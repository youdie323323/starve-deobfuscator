(function () {
  var c = 90;
  if (c >= 6) {
    c = 41;
  }
  Math.floor(29[29 .ⵠⵠᐃⲆⲆⵠΔ]);
  var Jd = 198;
  if (Jd == 2) {
    Jd = 112;
  }
  var yg = 240;
  if (yg === 13) {
    yg = 45;
  }
  Math.floor(56[56 .ΔᐃΔᐃᐃᐃⲆ]);
  const Ph = window;
  let n = 11;
  var aj = 114;
  var bj = 154;
  if (bj >= 12) {
    bj = 93;
  }
  if (aj == 2) {
    aj = 22;
  }
  const cj = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += Ph.String.fromCharCode(a[c] ^ n++ % 255);
    }
    return b;
  };
  var s = 78;
  if (s > 4) {
    s = 189;
  }
  var dj = 155;
  if (dj == 7) {
    dj = 152;
  }
  var ej = 174;
  if (ej > 5) {
    ej = 232;
  }
  var fj = 14;
  if (fj == 9) {
    fj = 156;
  }
  Math.floor(198[198 .ΔⲆⲆΔⵠᐃⲆⲆΔ]);
  const gj = 13;
  const b = 14;
  const d = 20;
  const v = 12;
  const m = 255;
  const hj = false;
  const p = 256;
  const C = 3;
  const f = -8;
  const z = 16;
  const y = -4;
  const w = 18;
  const ij = undefined;
  const k = 7;
  const A = true;
  const x = 6;
  const J = 100;
  const M = 18;
  const B = 4;
  const D = 19;
  const E = 2;
  const I = A;
  const P = 2;
  const Q = 16;
  const S = 4;
  const R = 11;
  const F = hj;
  const j = 17;
  const L = 2048;
  const T = 6;
  const G = 15;
  const q = 4096;
  const N = 4;
  const O = 255;
  const H = 10;
  const U = 8;
  const W = 9;
  const K = 12;
  const V = 4;
  const X = 5;
  const Y = 100;
  const Z = 2;
  const ie = ij;
  const _ = 1;
  const ee = 12;
  const ne = 255;
  const ae = 0;
  let oe = ij;
  const re = 15;
  const he = 8;
  let ge;
  let te;
  let jj;
  let kj;
  let lj = ie;
  let mj = ie;
  let nj = ie;
  let oj = [];
  const pe = 4916356;
  const Ce = 4916356 .ⵠᐃΔΔⲆΔⲆⲆⵠ;
  const Te = `const ⲆⲆΔΔⵠⲆⲆ = (typeof ΔᐃΔⲆΔⵠⲆᐃⵠ === "${Ce}") ? 1 : 0; return ⲆⲆΔΔⵠⲆⲆ;`;
  const fe = 6;
  let ze = "_";
  const pj = ij;
  let we;
  let qj;
  let rj;
  let sj = ij;
  const tj = 12;
  let Je = ij;
  let uj = ij;
  const vj = hj;
  let De;
  let wj = ie;
  let xj = ij;
  const yj = 13;
  let Qe = ie;
  let zj = pj;
  const Aj = 9;
  let Fe = pj;
  let Bj = ie;
  const Cj = 3;
  const We = 256;
  const Ge = 15;
  const qe = 14;
  const Ne = 18;
  let Oe;
  const Dj = 13;
  const Ue = 19;
  let Ye;
  const Ej = 19;
  let Ve = pj;
  let Fj = ie;
  let Gj = pj;
  const Hj = 16;
  let ei;
  let Ij = ij;
  const Jj = 20;
  const ni = A;
  const oi = 9;
  const ai = 2;
  let ri = ie;
  const Kj = 8;
  const hi = 20;
  let gi;
  let Lj;
  let Mj;
  let Nj = ie;
  let Oj = ij;
  let Pj = ij;
  const Qj = 17;
  const ci = 20;
  let pi;
  let Rj = ie;
  let Sj = pj;
  const Tj = ie;
  const zi = 18;
  const yi = 9;
  let wi = ie;
  let Uj = pj;
  const Vj = 1;
  const Ai = 9;
  const xi = 255;
  const Ji = 100;
  let Mi;
  const Wj = 10;
  const Di = 19;
  let Ei;
  const Xj = 0;
  let Si;
  const Yj = ij;
  let _i;
  let Zj;
  let $j = Tj;
  let _j = Tj;
  const ak = 11;
  const Wi = 7;
  let Gi;
  let bk;
  let ck = Tj;
  const dk = 255;
  let Hi = ij;
  const ek = 8;
  let Yi = 0;
  if (!Ph.WebAssembly || !Ph.WebAssembly.instantiate) {
    ΔⵠⵠⲆⵠᐃᐃⵠᐃ();
  }
  const fk = {
    Date: Date
  };
  const Vi = 256;
  Ph.WebAssembly.instantiate(Uint8Array.from(Ph.atob(""), function (a) {
    return a.charCodeAt(0);
  }), fk).then(async function (a) {
    oe = a.instance;
    ge = oe.exports;
    mj = ge.memory;
    lj = mj.buffer;
    te = ge.__pin;
    nj = ge.__unpin;
    jj = ge.__new;
    kj = ge.__collect;
    ze = "_";
    for (let b = 0; b < 31; b++) {
      oj[b] = ge[ze + b];
    }
    we = ge.__rtti_base;
    sj = new Float32Array(lj);
    qj = new Float64Array(lj);
    rj = new BigUint64Array(lj);
    Je = new Uint32Array(lj);
    uj = new Uint16Array(lj);
    De = new Uint8Array(lj);
    xj = new BigInt64Array(lj);
    wj = new Int32Array(lj);
    zj = new Int16Array(lj);
    Qe = new Int8Array(lj);
    Zj = oj[4];
    Ve = oj[17];
    Ij = oj[10];
    Fe = oj[21];
    Oe = oj[18];
    bk = oj[27];
    Mi = oj[3];
    ei = oj[9];
    _i = oj[19];
    Uj = oj[15];
    Gi = oj[22];
    Lj = oj[23];
    Ei = oj[11];
    $j = oj[2];
    Si = oj[13];
    Sj = oj[26];
    Pj = oj[0];
    Ye = oj[20];
    _j = oj[16];
    Rj = oj[1];
    wi = oj[8];
    Mj = oj[30];
    Bj = oj[12];
    Fj = oj[7];
    pi = oj[29];
    gi = oj[14];
    Oj = oj[6];
    ri = oj[24];
    ck = oj[5];
    Nj = oj[28];
    Gj = oj[25];
    Yi = 1;
    if (Hi) {
      await Hi();
    }
  });
  const Xi = function (a) {
    return Je[(we + 4 >>> 2) + (a << 1)];
  };
  const Zi = 20;
  const $i = 4;
  const gk = 14;
  function hk(a) {
    return 31 - Math.clz32(a >>> 6 & 31);
  }
  const ik = vj;
  const jk = 12;
  const kk = 5;
  const lk = 11;
  const mk = 7;
  function nk(a) {
    const b = Math.random;
    const c = [];
    Math.random = function () {
      for (let a = 0; a < 10099; a++) {
        c.push(a);
      }
      return b();
    };
  }
  function ok(b) {
    const c = Je[b + f >>> 2];
    const d = Xi(c);
    const e = hk(d);
    let g = d & 4 ? b : Je[b + 4 >>> 2];
    const h = d & 2 ? Je[b + 12 >>> 2] : Je[g + y >>> 2] >>> e;
    return pk(e, d & 2048, d & 4096).subarray(g >>>= e, g + h);
  }
  function pk(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return sj;
        case 3:
          return qj;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return Qe;
          } else {
            return De;
          }
        case 1:
          if (b) {
            return zj;
          } else {
            return uj;
          }
        case 2:
          if (b) {
            return wj;
          } else {
            return Je;
          }
        case 3:
          if (b) {
            return xj;
          } else {
            return rj;
          }
      }
    }
  }
  const qk = 13;
  const rk = 20;
  const sk = 6;
  const tk = 255;
  const uk = 2;
  function vk(a, b, c, d) {
    Lj(mf, a, b, c, d);
    const e = function (a, b, c) {
      $j(mf, a, b, c);
      const d = Xf(Lw[0], Lw[1], Lw[2]);
      (function (a, b, c) {
        Sj(mf, a, b, c);
        const d = Ok(Lw[0], Lw[1], Lw[2], Lw[0]);
        const e = function (a, b) {
          Oe(mf, a, b);
          const c = ef(Lw[0], Lw[1], Lw[0], Lw[1], Lw[0]);
          (function (b, c, d, e, f) {
            bk(mf, b, c, d, e, f);
            const g = Xf(Lw[0], Lw[1], Lw[2]);
            const a = ef(Lw[3], Lw[4], Lw[0], Lw[1], Lw[2]);
          })(Lw[1], Lw[0], Lw[1], Lw[0], Lw[1]);
          return c ^ 46780;
        }(Lw[1], Lw[2]);
      })(Lw[0], Lw[1], Lw[2]);
      return ~(d & 51287) & (d | 51287);
    }(Lw[0], Lw[1], Lw[2]);
    nb(Lw[3], Lw[0], Lw[1], Lw[2]);
    return e ^ 55113;
  }
  const wk = 15;
  const xk = 16;
  const yk = 20;
  const zk = 3;
  function Ak(b, c, d, e, f) {
    const i = (0 << (b >> 8 & 255)) + (8 << (b & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255));
    const a = (12345 + (c + 9159) * 1103515245) % 2147483648;
    const j = (24 << (e >> 8 & 255)) + (8 << (e & 255)) + (0 << (e >> 24 & 255)) + (16 << (e >> 16 & 255));
    const k = ~(f & 22525) & (f | 22525);
    const h = function (b, c, d) {
      const e = ~(b & 42559) & 42559 | ~(b & 42559) & b;
      const f = (8 << (c >> 24 & 255)) + (0 << (c >> 16 & 255)) + (16 << (c & 255)) + (24 << (c >> 8 & 255));
      const g = Xk(e, f, (16557 + d) % 65450);
      ps(e, f);
      return g ^ 26616;
    }(i, a, ~(d & 42721) & d | ~(d & 42721) & 42721);
    Gk(j, k, i, a);
    return h ^ 44176;
  }
  const Bk = 3;
  const Ck = 18;
  const Dk = 15;
  const Ek = 19;
  function Fk(b, c, d, e) {
    const f = b ^ 2449;
    const g = ~(c & 20386) & 20386 | ~(c & 20386) & c;
    const a = ((d + 30900) * 214013 + 2531011) % 4294967296;
    const i = (e | 52133) & ~(e & 52133);
    const j = Of(f, g, a, i, f, g);
    Of(a, i, f, g, a, i);
    return j ^ 18167;
  }
  function Gk(b, c, d, e) {
    const f = ((b + 51017) * 2147483629 + 2147483587) % 2147483647;
    const i = (24 << (c >> 8 & 255)) + (8 << (c & 255)) + (0 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = d ^ 15141;
    const j = (0 << (e >> 24 & 255)) + (16 << (e >> 8 & 255)) + (24 << (e & 255)) + (8 << (e >> 16 & 255));
    const k = Fk(f, i, a, j);
    const h = Of(f, i, a, j, f, i);
    return (16 << ((k ^ h) >> 24 & 255)) + (0 << ((k ^ h) >> 16 & 255)) + (24 << ((k ^ h) >> 8 & 255)) + (8 << ((k ^ h) & 255));
  }
  function Hk(a) {
    return function (b, c, d, e, f, i) {
      const a = (e | 26220) & ~(e & 26220);
      const j = (8 << (f >> 16 & 255)) + (16 << (f & 255)) + (24 << (f >> 24 & 255)) + (0 << (f >> 8 & 255));
      const k = (16 << (i >> 16 & 255)) + (0 << (i & 255)) + (8 << (i >> 8 & 255)) + (24 << (i >> 24 & 255));
      const h = mo((8 << (b & 255)) + (24 << (b >> 16 & 255)) + (0 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)), c ^ 53446, d ^ 6207);
      (function (b, c, d) {
        const e = b ^ 44078;
        const f = c ^ 22252;
        const g = ~(d & 19629) & d | ~(d & 19629) & 19629;
        const a = function (b, c, d, e) {
          const f = (24 << (b >> 16 & 255)) + (8 << (b >> 24 & 255)) + (0 << (b >> 8 & 255)) + (16 << (b & 255));
          const g = ((5549 + c) * 214013 + 2531011) % 4294967296;
          const a = (2147483587 + (45970 + d) * 2147483629) % 2147483647;
          const h = Po(f, g, a, (e | 10880) & ~(e & 10880), f);
          (function (b, c) {
            const d = b ^ 2746;
            const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (8 << (c & 255)) + (0 << (c >> 24 & 255));
            const f = Gf(d, e, d);
            const g = mo(e, d, e);
          })(g, a);
          return h ^ 47429;
        }(e, f, g, e);
        const h = Nf(f, g, e, f, g);
      })(a, j, k);
      return ~(h & 908) & (h | 908);
    }(a, 34326, 37107, 23368, 56221, 54967);
  }
  const Ik = 256;
  const Jk = A;
  function Kk(b, c, d, e) {
    const f = b ^ 62569;
    const g = c ^ 48597;
    const a = d ^ 18152;
    return (2147483587 + (41857 + (function (b, c, d, e) {
      const f = ~(b & 29633) & b | ~(b & 29633) & 29633;
      const g = ((55437 + c) * 1103515245 + 12345) % 2147483648;
      const a = ~(d & 19467) & d | ~(d & 19467) & 19467;
      const i = Gk(f, g, a, (e | 62976) & ~(e & 62976));
      const j = Gf(f, g, a);
      return (16 << ((i ^ j) >> 16 & 255)) + (0 << ((i ^ j) >> 24 & 255)) + (8 << ((i ^ j) & 255)) + (24 << ((i ^ j) >> 8 & 255));
    }(f, g, a, ~(e & 42888) & 42888 | ~(e & 42888) & e) ^ xx(f, g, a))) * 2147483629) % 2147483647;
  }
  const Lk = 20;
  function Mk(c, e, f, i, j, k) {
    const a = (c | 4820) & ~(c & 4820);
    const m = ~(e & 25051) & (e | 25051);
    const n = ((f + 2127) * 1664525 + 1013904223) % 4294967296;
    const h = ~(i & 40545) & i | ~(i & 40545) & 40545;
    const g = (0 << (j >> 16 & 255)) + (24 << (j >> 24 & 255)) + (8 << (j >> 8 & 255)) + (16 << (j & 255));
    const l = k ^ 32898;
    const o = function (b, c) {
      const d = (12345 + (32093 + b) * 1103515245) % 2147483648;
      const e = ((30705 + c) * 1103515245 + 12345) % 2147483648;
      const f = function (c, d, e, f, i, j) {
        const a = (0 << (c >> 8 & 255)) + (16 << (c >> 24 & 255)) + (24 << (c & 255)) + (8 << (c >> 16 & 255));
        const k = d ^ 34873;
        const m = f ^ 57951;
        const h = ((i + 27538) * 1103515245 + 12345) % 2147483648;
        const g = (4247 + j) % 65398;
        const l = xx(a, k, (8 << (e >> 8 & 255)) + (0 << (e >> 16 & 255)) + (16 << (e & 255)) + (24 << (e >> 24 & 255)));
        const n = Ak(m, h, g, a, k);
        return (2147483587 + (38733 + (l ^ n)) * 2147483629) % 2147483647;
      }(d, e, d, e, d, e);
      const g = Gf(d, e, d);
      return (16 << ((f ^ g) >> 16 & 255)) + (0 << ((f ^ g) & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 8 & 255));
    }(a, m);
    const b = cx(n, h, g, l, a, m);
    return (24 << ((o ^ b) >> 24 & 255)) + (16 << ((o ^ b) >> 8 & 255)) + (0 << ((o ^ b) >> 16 & 255)) + (8 << ((o ^ b) & 255));
  }
  const Nk = 10;
  function Ok(a, b, c, d) {
    _j(mf, a, b, c, d);
    const e = Vf(Lw[0], Lw[1], Lw[2]);
    ef(Lw[3], Lw[0], Lw[1], Lw[2], Lw[3]);
    return (e | 27182) & ~(e & 27182);
  }
  function Pk(a, b, c) {
    Pj(mf, a, b, c);
    const d = function (a, b) {
      pi(mf, a, b);
      const c = function (b, c, d, e, f) {
        Gj(mf, b, c, d, e, f);
        const g = Vf(Lw[0], Lw[1], Lw[2]);
        const a = function (a, b, c, d) {
          Fe(mf, a, b, c, d);
          const e = ef(Lw[0], Lw[1], Lw[2], Lw[3], Lw[0]);
          (function (a, b, c) {
            Ve(mf, a, b, c);
            const d = function (b, c, d, e, f, g) {
              Uj(mf, b, c, d, e, f, g);
              const a = vk(Lw[0], Lw[1], Lw[2], Lw[3]);
              const h = Kf(Lw[4], Lw[5]);
              return (24 << ((a ^ h) >> 16 & 255)) + (8 << ((a ^ h) >> 24 & 255)) + (16 << ((a ^ h) >> 0 & 255)) + (0 << ((a ^ h) >> 8 & 255));
            }(Lw[0], Lw[1], Lw[2], Lw[0], Lw[1], Lw[2]);
            const e = ef(Lw[0], Lw[1], Lw[2], Lw[0], Lw[1]);
          })(Lw[1], Lw[2], Lw[3]);
          return ~(e & 38663) & e | ~(e & 38663) & 38663;
        }(Lw[3], Lw[4], Lw[0], Lw[1]);
        return ((224 + (g ^ a)) * 75 + 74) % 65537;
      }(Lw[0], Lw[1], Lw[0], Lw[1], Lw[0]);
      vk(Lw[1], Lw[0], Lw[1], Lw[0]);
      return c ^ 43274;
    }(Lw[0], Lw[1]);
    const e = nb(Lw[2], Lw[0], Lw[1], Lw[2]);
    return (8 << ((d ^ e) >> 8 & 255)) + (0 << ((d ^ e) >> 24 & 255)) + (16 << ((d ^ e) & 255)) + (24 << ((d ^ e) >> 16 & 255));
  }
  const Qk = 8;
  const Rk = "development";
  const Sk = 17;
  const Tk = 11;
  const Uk = 10;
  const Vk = "production";
  function Wk(a) {
    this.ⵠⵠⵠᐃ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor((this.ⵠⵠⵠᐃ - 1) * Math.random());
  }
  function Xk(b, c, d) {
    const e = (24 << (b >> 16 & 255)) + (0 << (b >> 24 & 255)) + (16 << (b & 255)) + (8 << (b >> 8 & 255));
    const f = ~(c & 38511) & (c | 38511);
    const g = ((d + 59246) * 1664525 + 1013904223) % 4294967296;
    return (2531011 + (23454 + (Fk(e, f, g, e) ^ Fr(f, g, e, f, g, e))) * 214013) % 4294967296;
  }
  const Yk = {};
  Yk.get = function (a, b) {
    if (b !== "ᐃⵠ") {
      const a = Ph.setInterval;
      const b = a;
      const c = function () {
        a(c, 6677);
        b(c, 4555);
      };
      c();
    }
    return Ph.Reflect.get(...arguments);
  };
  const Zk = 256;
  Wk.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ⵠⵠⵠᐃ;
    return this.state / this.ⵠⵠⵠᐃ;
  };
  Wk.prototype.ΔⲆΔΔⲆⵠⲆ = function (a) {
    this.state = a;
  };
  const $k = 13;
  ᐃΔⲆⵠⵠᐃⲆ = 10000;
  const _k = 9;
  const ol = 2;
  ⲆΔΔⵠΔᐃⲆ = [];
  const Wl = 100;
  var cm = new Wk();
  const ep = Yj;
  cm.ΔⲆΔΔⲆⵠⲆ(new Date().getTime());
  for (var aq = 0; aq < ᐃΔⲆⵠⵠᐃⲆ; aq++) {
    ⲆΔΔⵠΔᐃⲆ.push(cm.random());
  }
  const bq = 15;
  function tn(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, e, f, i, j, k) {
      const a = c ^ 10715;
      const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
      const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
      const h = i ^ 40782;
      const g = j ^ 41301;
      const l = ~(k & 12091) & (k | 12091);
      const o = xn(a, m, n, h, g, l);
      xn(a, m, n, h, g, l);
      Nn(a, m, n, h, g);
      const b = (o | 3006) & ~(o & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, a, j, f, i);
    const h = ro(a, j, f, i, a);
    xn(j, f, i, a, j, f);
    const g = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (g | 38630) & ~(g & 38630);
  }
  const nn = 2;
  function on(c, e, f, i, j, k) {
    const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const g = (j + 3575) % 65503;
    const l = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = Vn(a, m, n, h, g);
    const b = function (c, d, e, f, i, j) {
      const a = c ^ 30142;
      const k = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const g = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
      const l = (j | 45652) & ~(j & 45652);
      const n = Vn(a, k, m, h, g);
      rn(l, a, k, m, h);
      Rn(g, l, a, k, m, h);
      return n ^ 60048;
    }(l, a, m, n, h, g);
    In(l, a, m, n, h, g);
    const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(d & 42138) & d | ~(d & 42138) & 42138;
  }
  const an = 20;
  function rn(c, d, e, f, i) {
    const j = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
    const a = d ^ 63080;
    const k = ((e + 60304) * 22695477 + 1) % 4294967296;
    const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
    const h = (i | 40165) & ~(i & 40165);
    const g = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const a = d ^ 62842;
      const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = dn(f, i, a, j);
      const h = Hn(f, i, a, j);
      tn(f, i, a, j);
      const g = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
      return ~(g & 63304) & (g | 63304);
    }(j, a, k, m);
    const l = ro(h, j, a, k, m);
    const n = lo(h, j, a, k, m, h);
    return ((28765 + ((16 << ((g ^ l) >> 24 & 255)) + (8 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 32 & 255)) + (32 << ((g ^ l) >> 8 & 255)) ^ n)) * 1664525 + 1013904223) % 4294967296;
  }
  const sn = 9;
  const hn = 0;
  const gn = 10;
  const ln = vj;
  const un = 18;
  const bn = 16;
  function dn(b, c, d, e) {
    const f = b ^ 11762;
    const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
  }
  function vn(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const a = d ^ 58614;
    const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const g = go(j, a);
    const l = tn(k, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = ho(c, d, c);
        An(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ Cn(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = oo(a, j, f, i, a);
      go(j, f);
      const g = (58498 + (k ^ h)) % 65531;
    })(a, k, m, h);
    const n = (24 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 32 & 255)) + (16 << ((g ^ l) >> 8 & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  const mn = 15;
  const cn = 14;
  const pn = 15;
  function Cn(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const a = (c + 39144) % 65406;
    const j = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const g = dn(i, a, j, k);
    oo(h, i, a, j, k);
    In(h, i, a, j, k, h);
    return (g | 19326) & ~(g & 19326) ^ 36297;
  }
  function Tn(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const g = Zn(i, a);
    oo(j, k, h, i, a);
    Rn(j, k, h, i, a, j);
    const l = ~(g & 49323) & 49323 | ~(g & 49323) & g;
    return ~(l & 46567) & (l | 46567);
  }
  const fn = 19;
  const zn = 6;
  function yn(c, d, e, f, i, j) {
    const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
    const g = (1 + (39199 + i) * 22695477) % 4294967296;
    const l = j ^ 33037;
    const n = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const i = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const a = Sn(e, f, i, e, f);
      const j = lo(i, e, f, i, e, f);
      const k = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = Rn(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const a = (2531011 + (c + 41768) * 214013) % 4294967296;
          const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const g = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const a = rn(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const g = ~(j & 24998) & (j | 24998);
                const l = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = Pn(a, m, n, h);
                const b = oo(g, l, a, m, n);
                const d = Pn(h, g, l, a);
              })(g, e, f, g, e, f);
              Hn(g, e, f, g);
              return ~(a & 43875) & (a | 43875) ^ 15116;
            }(c, d, c);
            Nn(d, c, d, c, d);
            dn(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, a);
          An(j, k, h, i);
          const l = Tn(a, j, k, h, i);
        })(c, d, c, d, c);
        Zn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(i, e);
      const h = (16 << ((a ^ j) >> 32 & 255)) + (24 << ((a ^ j) >> 24 & 255)) + (32 << ((a ^ j) >> 8 & 255)) + (8 << ((a ^ j) >> 16 & 255));
      return (8 << ((h ^ k) >> 32 & 255)) + (16 << ((h ^ k) >> 8 & 255)) + (32 << ((h ^ k) >> 16 & 255)) + (24 << ((h ^ k) >> 24 & 255));
    }(a, k, m);
    Hn(h, g, l, a);
    return ((34159 + (n ^ 2959 ^ Pn(k, m, h, g))) * 1103515245 + 12345) % 2147483648;
  }
  const wn = 7;
  function Pn(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = ~(d & 32053) & (d | 32053);
    const i = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const j = e ^ 18768;
      const k = Vn(f, i, a, j, f);
      const h = vn(i, a, j, f, i);
      const g = Fn(a, j);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ g)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, a, i);
    Hn(f, g, a, i);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ Vn(f, g, a, i, f))) * 214013) % 4294967296;
  }
  const kn = 100;
  function An(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const a = d ^ 38714;
    const i = e ^ 58084;
    const j = on(f, g, a, i, f, g);
    Hn(a, i, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ In(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
  }
  function xn(b, c, d, e, f, i) {
    const a = ~(b & 36133) & (b | 36133);
    const j = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const g = f ^ 7550;
    const l = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (ao(a, j, k, h, g) ^ Hn(l, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ Nn(h, g, l, a, j))) * 1103515245) % 2147483648;
  }
  const Jn = 1;
  const Mn = 9;
  const Bn = 255;
  const Dn = 18;
  const En = ni;
  function In(b, c, d, e, f, i) {
    const a = b ^ 23409;
    const j = c ^ 26380;
    const k = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = i ^ 42490;
    return ((19056 + (dn(a, j, d ^ 53590, e ^ 36633) ^ dn(k, h, a, j))) * 22695477 + 1) % 4294967296;
  }
  function Sn(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const j = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const g = In(i, a, j, k, h, i);
    const l = dn(a, j, k, h);
    ho(i, a, j);
    return (24 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 32 & 255)) ^ 31710;
  }
  const Qn = 15;
  const _n = 13;
  function Rn(c, e, f, i, j, k) {
    const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const m = (e | 41551) & ~(e & 41551);
    const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
    const h = ~(i & 32641) & (i | 32641);
    const g = ((j + 35582) * 214013 + 2531011) % 4294967296;
    const l = ~(k & 1090) & (k | 1090);
    const o = lo(a, m, n, h, g, l);
    Cn(a, m, n, h, g);
    dn(l, a, m, n);
    const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
    return ~(b & 3708) & (b | 3708);
  }
  function Fn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = In(d, e, d, e, d, e);
    const g = In(d, e, d, e, d, e);
    dn(d, e, d, e);
    const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(a & 55949) & 55949 | ~(a & 55949) & a;
  }
  const jn = 17;
  const Ln = 4;
  const Wn = 3;
  const Gn = 12;
  const qn = Yj;
  function Nn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const j = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const g = In(i, a, j, k, h, i);
    const l = Rn(a, j, k, h, i, a);
    dn(j, k, h, i);
    return (8 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 32 & 255)) ^ 35444;
  }
  const On = 14;
  function Hn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const i = c ^ 57623;
    const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const j = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const k = Zn(f, i);
    Zn(a, j);
    ro(f, i, a, j, f);
    const h = ~(k & 43902) & 43902 | ~(k & 43902) & k;
    return (h | 8862) & ~(h & 8862);
  }
  function Un(a) {
    return Ph.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⵠΔΔΔⲆⲆⲆᐃⵠ: 12128281,
      ᐃΔⵠⲆⲆᐃⲆ: 7832221,
      ᐃᐃⲆᐃⵠΔΔΔⵠ: 13668153,
      Ⲇᐃⵠᐃⵠᐃⵠ: 4616469
    };
  })();
  const Yn = 18;
  const Kn = 5;
  function Vn(b, c, d, e, f) {
    const i = b ^ 62008;
    const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const j = ((d + 46531) * 22695477 + 1) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const g = rn(i, a, j, k, h);
    lo(i, a, j, k, h, i);
    return ((3037 + (g ^ 57467 ^ ro(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  const Xn = 255;
  function Zn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (ao(c, d, c, d, c) ^ oo(d, c, d, c, d))) % 65357 ^ dn(c, d, c, d))) * 22695477) % 4294967296;
  }
  const $n = vj;
  const eo = 8;
  const io = 11;
  const to = 17;
  const no = 7;
  function oo(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const a = c ^ 50118;
    const j = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const g = lo(i, a, j, k, h, i);
    lo(a, j, k, h, i, a);
    return (2531011 + (53616 + ((g | 43477) & ~(g & 43477) ^ dn(j, k, h, i))) * 214013) % 4294967296;
  }
  function ao(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const a = d ^ 55978;
    const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const g = oo(j, a, k, m, h);
    const l = Nn(j, a, k, m, h);
    dn(j, a, k, m);
    const n = (16 << ((g ^ l) >> 32 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (8 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  function ro(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const a = (d + 52922) % 65337;
    const k = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const g = Cn(j, a, k, m, h);
    const l = go(j, a);
    Cn(k, m, h, j, a);
    const n = (1 + (19675 + (g ^ l)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  const so = 19;
  function ho(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const a = Tn(e, f, g, e, f);
    const h = Tn(g, e, f, g, e);
    Tn(f, g, e, f, g);
    return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
  }
  function go(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = Tn(d, e, d, e, d);
    const g = ao(e, d, e, d, e);
    Sn(d, e, d, e, d);
    const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(a & 40927) & 40927 | ~(a & 40927) & a;
  }
  function lo(b, c, d, e, f, i) {
    const a = d ^ 8102;
    const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (1 + (62237 + i) * 22695477) % 4294967296;
    const g = Fn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const l = Fn(a, j);
    Fn(k, h);
    return (45290 + (g ^ l)) % 65334 ^ 55575;
  }
  const uo = 100;
  const bo = 16;
  function vo(a) {
    return Pk(a, 21799, 32115);
  }
  function mo(b, c, d) {
    const e = b ^ 59552;
    const f = c ^ 800;
    const g = (1013904223 + (19978 + d) * 1664525) % 4294967296;
    const a = function (b, c, d) {
      const e = (b + 20681) % 65338;
      const f = ~(c & 42760) & (c | 42760);
      const g = ~(d & 52514) & d | ~(d & 52514) & 52514;
      const a = Jr(e, f);
      const h = Po(g, e, f, g, e);
      return (8 << ((a ^ h) >> 8 & 255)) + (0 << ((a ^ h) >> 16 & 255)) + (24 << ((a ^ h) & 255)) + (16 << ((a ^ h) >> 24 & 255));
    }(e, f, g);
    const h = Of(e, f, g, e, f, g);
    return (24 << ((a ^ h) >> 24 & 255)) + (16 << ((a ^ h) >> 16 & 255)) + (8 << ((a ^ h) & 255)) + (0 << ((a ^ h) >> 8 & 255));
  }
  const co = 15;
  const po = 9;
  const Co = Tj;
  const To = Jk;
  const fo = 2;
  ΔΔⲆ = {
    ⲆⵠⲆᐃᐃᐃΔ: () => new Promise((a, b) => {
      Ph.grecaptcha.ready(function () {
        Ph.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (af) {
            a(0);
          } else {
            console.log(undefined);
            b(c);
          }
        });
      });
    }),
    ΔΔⲆᐃⵠⵠⵠᐃⲆ: function (a) {
      Ph.open(a, "_blank").focus();
    },
    ⵠᐃⲆⲆⵠⵠΔ: function (a) {
      Ph.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ᐃᐃⵠⲆⲆᐃᐃ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return false;
        }
      }
      return En;
    },
    ⲆᐃⵠⲆᐃΔⵠⲆⵠ: function (a, b) {
      if (a.length != b.length) {
        return ln;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ᐃᐃⵠⲆⲆᐃᐃ(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return false;
        }
      }
      return true;
    },
    ΔⲆⵠᐃⲆΔⵠ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ΔⲆΔⲆⲆᐃΔ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ΔᐃⲆᐃⲆⲆᐃⲆⵠ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ᐃⵠⲆⵠⵠᐃⵠ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ⲆⵠⵠⲆⲆᐃⵠ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ᐃᐃⵠⵠⲆⵠᐃ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ⵠⵠᐃΔᐃⵠⲆ: function (b, c, d, e) {
      var f = e - c;
      var g = d - b;
      return Math.atan2(f, g);
    },
    ΔⵠΔⲆⲆⵠΔ: function (a, b) {
      return Math.asin(this.ᐃⵠⲆⵠⵠᐃⵠ(a, b) / (this.ⲆⵠⵠⲆⲆᐃⵠ(a) * this.ⲆⵠⵠⲆⲆᐃⵠ(b))) * this.sign(this.ᐃᐃⵠⵠⲆⵠᐃ(a, b));
    },
    ⵠⲆΔⵠⵠᐃᐃ: function (a) {
      ⵠΔⲆᐃᐃⵠⲆ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⵠΔⲆᐃᐃⵠⲆ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ⲆⲆⵠⵠΔΔⲆ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ΔⲆⲆⵠΔᐃⵠ: function (a, b) {
      return this.ΔⵠΔⲆⲆⵠΔ({
        x: 1,
        y: 0
      }, this.ΔⲆΔⲆⲆᐃΔ(a, b));
    },
    ⵠΔⲆⲆ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ΔⲆᐃΔΔΔΔ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ⲆⵠΔⵠΔⵠΔ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ⵠⵠᐃⲆⲆᐃⵠ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ⲆΔⵠᐃΔⵠⵠⲆΔ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ΔⵠΔⲆᐃᐃΔⲆⵠ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⵠΔΔᐃⲆ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ⵠᐃⵠΔᐃΔⵠ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ⵠΔⵠΔᐃⲆΔ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ΔⵠⵠⲆⲆⲆⵠ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ᐃⵠⲆΔΔⵠⲆᐃΔ: function (b, c, d) {
      var e = this.ΔⵠⵠⲆⲆⲆⵠ();
      var f = this.ΔⵠⵠⲆⲆⲆⵠ();
      var g = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(g) * e * d),
        y: Math.floor(c + Math.cos(g) * f * d)
      };
    },
    ᐃᐃⵠᐃΔᐃⲆⵠᐃ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ⲆΔⲆ = d;
    },
    ⲆΔΔΔΔⲆⲆⲆⲆ: function (a) {
      ⲆⲆΔᐃ = [];
      ⲆⲆΔᐃ.push.apply(ⲆⲆΔᐃ, a);
      var b = [];
      while (ⲆⲆΔᐃ.length > 0) {
        var c = Math.floor(Math.random() * ⲆⲆΔᐃ.length);
        b.push(ⲆⲆΔᐃ[c]);
        ⲆⲆΔᐃ.splice(c, 1);
      }
      return b;
    },
    ᐃᐃΔⲆᐃⲆᐃ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ᐃⲆᐃⵠⲆⲆᐃ: function (b) {
      if (typeof b != "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(0, 3 - c);
        var e = Math.floor(b / 1000).toString();
        if (d) {
          for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
            g++;
          }
          if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
            e = e.substring(0, e.length - 1);
          }
        }
        return e += "k";
      }
      return b.toString();
    },
    ᐃᐃΔᐃᐃᐃΔ: function (a) {
      return a * (2 - a);
    },
    ΔΔᐃⵠᐃΔΔ: function (a) {
      return --a * a * a + 1;
    },
    ⲆⵠⵠΔⲆ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (4 - a * 2) * a - 1;
      }
    },
    ᐃᐃᐃΔⲆΔΔ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ⲆᐃⵠⲆⵠΔⵠᐃᐃ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    ⵠᐃᐃΔᐃᐃᐃ: function (a) {
      return 1 - --a * a * a * a;
    },
    ⵠⵠᐃΔᐃⵠⵠ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ΔᐃᐃΔ: function (b, c, d, e, f, g) {
      this.ⲆⲆⲆ = b;
      this.ΔⵠⲆ = c;
      this.max = d;
      this.min = e;
      this.ⲆΔᐃᐃⲆⲆⵠ = f;
      this.ⵠⲆᐃᐃⵠᐃⲆ = g;
      this.ⲆⲆⲆⵠᐃ = 0;
      this.ΔⵠΔ = function () {
        if (this.ⲆⲆⲆ) {
          if ((a = this.ΔⵠⲆ + tx * this.ⲆΔᐃᐃⲆⲆⵠ) > this.max) {
            this.ΔⵠⲆ = this.max;
            this.ⲆⲆⲆ = vj;
            return true;
          }
          this.ΔⵠⲆ = a;
        } else {
          var a;
          if ((a = this.ΔⵠⲆ - tx * this.ⵠⲆᐃᐃⵠᐃⲆ) < this.min) {
            this.ΔⵠⲆ = this.min;
            this.ⲆⲆⲆ = true;
          } else {
            this.ΔⵠⲆ = a;
          }
        }
      };
      return false;
    },
    ΔᐃⵠΔᐃ: function (b, c, d, e, f, g) {
      this.ⲆⲆᐃΔⲆ = b;
      this.ⵠⲆⲆΔΔ = c;
      this.ⲆΔᐃᐃᐃ = d;
      this.ⵠⵠΔΔⲆ = e;
      this.x = f;
      this.ᐃΔΔⲆⲆ = g;
      this.ⵠⵠⲆⵠΔⲆΔ = function () {
        this.x = this.ⵠΔⵠᐃⵠⵠΔⵠΔ;
        this.ⵠⲆⲆΔΔ = 0;
      };
      this.ⲆᐃᐃΔⲆ = function (a) {
        if (a !== this.ᐃΔΔⲆⲆ) {
          this.ᐃΔΔⲆⲆ = a;
          this.ⵠⵠΔΔⲆ = this.x;
          this.ⵠⲆⲆΔΔ = 0;
        }
        if (this.ᐃΔΔⲆⲆ !== this.x) {
          this.ⵠⲆⲆΔΔ += tx;
          if (this.ⵠⲆⲆΔΔ > this.ⲆΔᐃᐃᐃ) {
            this.x = this.ᐃΔΔⲆⲆ;
          } else {
            var b = this.ⲆⲆᐃΔⲆ(this.ⵠⲆⲆΔΔ / this.ⲆΔᐃᐃᐃ);
            this.x = this.ⵠⵠΔΔⲆ + (this.ᐃΔΔⲆⲆ - this.ⵠⵠΔΔⲆ) * b;
          }
        }
      };
    },
    ΔⵠΔⲆᐃⲆΔ: function (b, c, d, e, f, g, a, i, j) {
      this.ⲆⲆᐃΔⲆ = b;
      this.ⵠⲆⲆΔΔ = c;
      this.ⲆΔᐃᐃᐃ = d;
      this.ⵠⵠΔΔⲆ = e;
      this.ᐃⵠᐃΔΔ = f;
      this.x = g;
      this.y = a;
      this.ᐃΔΔⲆⲆ = i;
      this.ⲆᐃⲆⵠⲆΔⵠ = j;
      this.ⲆᐃᐃΔⲆ = function (a) {
        if (a.x != this.ᐃΔΔⲆⲆ || a.y != this.ⲆᐃⲆⵠⲆΔⵠ) {
          this.ᐃΔΔⲆⲆ = a.x;
          this.ⲆᐃⲆⵠⲆΔⵠ = a.y;
          this.ⵠⵠΔΔⲆ = this.x;
          this.ᐃⵠᐃΔΔ = this.y;
          this.ⵠⲆⲆΔΔ = 0;
        }
        if (this.ᐃΔΔⲆⲆ != this.x || this.ⲆᐃⲆⵠⲆΔⵠ != this.y) {
          this.ⵠⲆⲆΔΔ += tx;
          if (this.ⵠⲆⲆΔΔ > this.ⲆΔᐃᐃᐃ) {
            this.x = this.ᐃΔΔⲆⲆ;
            this.y = this.ⲆᐃⲆⵠⲆΔⵠ;
          } else {
            var b = this.ⲆⲆᐃΔⲆ(this.ⵠⲆⲆΔΔ / this.ⲆΔᐃᐃᐃ);
            this.x = this.ⵠⵠΔΔⲆ + (this.ᐃΔΔⲆⲆ - this.ⵠⵠΔΔⲆ) * b;
            this.y = this.ᐃⵠᐃΔΔ + (this.ⲆᐃⲆⵠⲆΔⵠ - this.ᐃⵠᐃΔΔ) * b;
          }
        }
      };
    },
    ⵠⵠᐃⵠⵠᐃⵠ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ΔⵠΔⲆⲆⲆⵠ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ΔΔᐃᐃⲆ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ⵠΔⲆᐃⵠᐃᐃ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ⲆΔⲆ;
    },
    ᐃΔⲆⲆⲆⵠᐃ: function (b, c, d, e, f, g, a, h) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
        return 1;
      } else {
        return 0;
      }
    },
    ᐃⵠΔⵠΔ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ΔΔⵠΔⲆⲆᐃ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  const zo = 13;
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ᐃΔᐃΔΔΔᐃΔⵠ;
  };
  const yo = 9;
  const wo = 3;
  function Po(b, c, d, e, f) {
    const i = (b + 15733) % 65515;
    const a = (1013904223 + (55828 + c) * 1664525) % 4294967296;
    const j = ((d + 3676) * 1664525 + 1013904223) % 4294967296;
    const k = (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255)) + (0 << (e >> 16 & 255)) + (24 << (e & 255));
    const h = (f + 37920) % 65391;
    const g = function (b, c, d) {
      const e = ((25689 + b) * 1103515245 + 12345) % 2147483648;
      const f = c ^ 65380;
      const g = (24 << (d >> 8 & 255)) + (0 << (d >> 16 & 255)) + (8 << (d >> 24 & 255)) + (16 << (d & 255));
      const a = function (b, c, d, e, f) {
        const g = (3399 + e) % 65460;
        const a = (16 << (f >> 16 & 255)) + (8 << (f >> 24 & 255)) + (24 << (f & 255)) + (0 << (f >> 8 & 255));
        const h = ex(b ^ 1657, ((52608 + c) * 2147483629 + 2147483587) % 2147483647, ((32235 + d) * 1664525 + 1013904223) % 4294967296);
        (function (a, b) {
          const c = (16 << (a & 255)) + (24 << (a >> 16 & 255)) + (8 << (a >> 24 & 255)) + (0 << (a >> 8 & 255));
          const d = b ^ 31012;
          const e = function (b, c, d, e) {
            const f = b ^ 33389;
            const i = (53217 + c) % 65380;
            const a = d ^ 55165;
            const j = (24 << (e >> 24 & 255)) + (0 << (e >> 16 & 255)) + (8 << (e & 255)) + (16 << (e >> 8 & 255));
            const k = function (b, c, d, e) {
              const f = (16 << (b & 255)) + (24 << (b >> 8 & 255)) + (0 << (b >> 16 & 255)) + (8 << (b >> 24 & 255));
              const g = (c | 57010) & ~(c & 57010);
              const a = (1013904223 + (60639 + d) * 1664525) % 4294967296;
              const i = Nf(f, g, a, ((40579 + e) * 1664525 + 1013904223) % 4294967296, f);
              const j = function (b, c) {
                const d = (24 << (b >> 8 & 255)) + (0 << (b >> 24 & 255)) + (8 << (b >> 16 & 255)) + (16 << (b >> 0 & 255));
                const e = ((c + 33356) * 1664525 + 1013904223) % 4294967296;
                const f = Mk(d, e, d, e, d, e);
                const g = Nf(d, e, d, e, d);
                return (2531011 + (50750 + (f ^ g)) * 214013) % 4294967296;
              }(g, a);
              return (1013904223 + (35058 + (i ^ j)) * 1664525) % 4294967296;
            }(f, i, a, j);
            const h = Fr(f, i, a, j, f, i);
            return ((23396 + (k ^ h)) * 1103515245 + 12345) % 2147483648;
          }(c, d, c, d);
          ex(c, d, c);
        })(g, a);
        return ~(h & 51923) & (h | 51923);
      }(e, f, g, e, f);
      ps(g, e);
      return ~(a & 16822) & a | ~(a & 16822) & 16822;
    }(i, a, j);
    cx(k, h, i, a, j, k);
    return ~(g & 23916) & (g | 23916);
  }
  (function (a) {
    var b = $n;
    if (typeof ⵠⵠⵠΔΔⲆⲆ == "function" && ⵠⵠⵠΔΔⲆⲆ.ΔⲆᐃⵠᐃΔΔⲆᐃ) {
      ⵠⵠⵠΔΔⲆⲆ(a);
      b = A;
    }
    if (typeof ⵠᐃΔΔᐃᐃΔ === "object") {
      ⵠⲆⵠⵠⵠⲆΔⵠⵠ.exports = a();
      b = ni;
    }
    if (!b) {
      var c = Ph.ⵠᐃⲆⵠ;
      var d = Ph.ⵠᐃⲆⵠ = a();
      d.ⵠᐃⲆΔΔΔΔⲆⲆ = function () {
        Ph.ⵠᐃⲆⵠ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; a < arguments.length; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document != "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ᐃⲆⵠⲆⵠⵠⲆ, j)).expires == "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) { }
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⵠⵠΔⲆⲆΔΔⵠΔ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, g = 0; g < n.length; g++) {
            var p = n[g].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = p[0].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) { }
              }
              if (s === e) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) { }
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ΔΔⵠᐃⵠᐃⵠΔⵠ = function () {
        return d.apply({
          json: true
        }, [].slice.call(arguments));
      };
      d.ᐃⲆⵠⲆⵠⵠⲆ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ⲆⵠΔⵠⲆᐃⲆⲆⵠ = a;
      return d;
    }(function () { });
  });
  const ko = 256;
  const Ao = 20;
  const xo = 18;
  var Jo = document.getElementById("game_canvas");
  var Mo = Jo.getContext("2d");
  var Bo = Jo.width;
  var cq = Jo.height;
  var dq = Jo.width / 2;
  var eq = Jo.height / 2;
  const fq = 20;
  const Qo = A;
  const _o = 17;
  const Ro = 10;
  const Fo = 16;
  var jo = {
    x: dq,
    y: eq
  };
  const gq = 13;
  const Wo = 2;
  var Go = 1;
  var hq = 1;
  var iq = -1;
  const jq = 0;
  const Ho = ni;
  const Uo = 6;
  var Yo = "J" + vq;
  const kq = 9;
  var Vo = "S" + Mq;
  const lq = 256;
  var Zo = Ph;
  const $o = vj;
  const ea = 15;
  var ia;
  const mq = 18;
  var na = (za = "O") + "N";
  const nq = 17;
  const aa = 11;
  var ra;
  const oq = 256;
  const ha = 255;
  var la = 0;
  const ua = 11;
  const ba = 13;
  var da = Zo;
  const va = 12;
  var ma;
  const pq = 3;
  Vo = "N";
  const pa = pj;
  var Ca = "J";
  const qq = 1;
  const fa = 100;
  var za = "O" + vq;
  const rq = 14;
  const wa = 19;
  const Pa = 13;
  var ka = da;
  const Aa = 9;
  const xa = 16;
  const Ja = 4;
  var Ma;
  const sq = 10;
  const Da = 0;
  const Ea = ln;
  var Ia = ka;
  na = "N" + undefined;
  var Sa = Ia;
  const Qa = 7;
  const _a = 10;
  const Ra = 8;
  var Fa;
  const tq = 5;
  const La = 18;
  const Wa = 9;
  const Ga = 11;
  const qa = 256;
  var Na;
  var uq;
  var vq;
  var wq = Sa;
  const Ya = ie;
  var Ka = wq;
  const Va = 255;
  const Xa = Ho;
  var Za;
  const xq = $n;
  const yq = 5;
  var zq = Ka;
  const Aq = 2;
  const Bq = 6;
  const Cq = 12;
  Ca = "O";
  const Dq = 20;
  const Eq = 9;
  const Fq = 6;
  const Gq = 17;
  const Hq = 14;
  var Iq;
  var Jq;
  var Kq = zq = Ka;
  var Lq = Kq;
  var Mq = "J" + (Iq = "S");
  Jo.oncontextmenu = function () {
    return hj;
  };
  const Nq = 15;
  const Oq = 0;
  const Pq = 100;
  const Qq = 16;
  const Rq = 20;
  function Sq(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ᐃᐃⲆⲆⲆⲆⲆ = 1;
    return b;
  }
  Yo = "J";
  const Tq = 10;
  const Uq = 3;
  za = na;
  const Vq = 12;
  ma = ia = ra = Mq + (Ca += Yo = Vo);
  na = vq;
  const Wq = 7;
  const Xq = 8;
  vq = Mq;
  const Yq = pj;
  vq = Mq;
  const Zq = Ho;
  za = Mq;
  Ma = Fa = Mq + Ca;
  const $q = 2;
  const _q = 13;
  const ar = 100;
  const cr = 19;
  Vo = Ca + Yo;
  Na = ia;
  const dr = String.fromCharCode;
  const er = dr(101);
  const fr = dr(118);
  const gr = dr(97);
  const hr = dr(108);
  const ir = ep;
  function jr(a) {
    const b = function () {
      Ph.addEventListener("mousemove", function () {
        b();
      });
    };
    b();
  }
  za = Mq + Ca;
  const kr = 16;
  const lr = 11;
  const mr = 0;
  uq = ra;
  na = Mq + Ca;
  Za = ma;
  const nr = 3;
  Ca = vq;
  const or = 18;
  Iq = ra;
  Jq = ia;
  Yo = za;
  var pr = Ph.devicePixelRatio || 1;
  const qr = 14;
  var rr = Mo.ᐃΔⲆᐃΔΔⵠⲆⲆ || Mo.ᐃᐃΔⵠᐃⲆⲆⵠⲆ || Mo.ᐃᐃⲆⲆΔᐃⵠᐃΔ || Mo.ΔⵠⵠΔᐃⵠⵠⵠⲆ || Mo.ᐃᐃᐃⵠⵠⲆᐃⵠⲆ || 1;
  const sr = 1;
  const vr = 4;
  const wr = Ea;
  function xr() {
    if (Ph.innerWidth != Jo.width) {
      Jo.width = Ph.innerWidth;
      Bo = Jo.width;
      dq = Jo.width / 2;
    }
    if (Jo.height != Ph.innerHeight) {
      Jo.height = Ph.innerHeight;
      cq = Jo.height;
      eq = Jo.height / 2;
    }
    jo = {
      x: dq,
      y: eq
    };
    var a = Jo.width;
    var b = Jo.height;
    hq = iq === -1 ? pr / rr : iq;
    Jo.width = a * hq;
    Jo.height = b * hq;
    Jo.style.width = a + "px";
    Jo.style.height = b + "px";
    Mo.scale(hq, hq);
    if (lx) {
      lx.ⲆΔᐃ.ⵠΔΔⵠⵠΔⲆ = a;
      lx.ⲆΔᐃ.ⲆΔⵠⵠΔⲆⵠ = b;
    }
    if (ux.ⲆᐃΔᐃⲆ) {
      ux.ΔⵠΔ();
    } else if (jx.ⲆᐃΔᐃⲆ) {
      jx.ΔⵠΔ();
    } else if (ox.ⲆᐃΔᐃⲆ) {
      ox.ΔⵠΔ();
    } else if (mx.ⲆᐃΔᐃⲆ) {
      mx.ΔⵠΔ();
    }
  }
  var yr = document.getElementById("game_body");
  yr.ondragstart = function () {
    return xq;
  };
  yr.ondrop = function () {
    return $o;
  };
  yr.onresize = xr;
  const Ar = 256;
  const Br = 12;
  (function () {
    var b = 0;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; c < a.length && !Ph.requestAnimationFrame; ++c) {
      Ph.requestAnimationFrame = Ph[a[c] + "RequestAnimationFrame"];
      Ph.cancelAnimationFrame = Ph[a[c] + "CancelAnimationFrame"] || Ph[a[c] + "CancelRequestAnimationFrame"];
    }
    Ph.requestAnimationFrame ||= function (c, d) {
      var e = new Date().getTime();
      var f = Math.max(0, 16 - (e - b));
      var a = Ph.setTimeout(function () {
        c(e + f);
      }, f);
      b = e + f;
      return a;
    };
    Ph.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const Cr = 11;
  const Dr = 12;
  function Fr(b, c, d, e, f, g) {
    const a = ((16710 + f) * 2147483629 + 2147483587) % 2147483647;
    const i = ~(g & 51727) & g | ~(g & 51727) & 51727;
    const j = gs((b | 64943) & ~(b & 64943), (12345 + (c + 5686) * 1103515245) % 2147483648, ~(d & 53400) & (d | 53400), e ^ 13805);
    (function (b, c) {
      const d = ~(b & 20450) & b | ~(b & 20450) & 20450;
      const e = ((c + 15965) * 214013 + 2531011) % 4294967296;
      const f = gs(d, e, d, e);
      const g = gs(d, e, d, e);
    })(a, i);
    return ~(j & 43557) & j | ~(j & 43557) & 43557;
  }
  const Gr = 100;
  const Hr = 255;
  const Ir = 6;
  function Jr(a, b) {
    const c = ((a + 33219) * 214013 + 2531011) % 4294967296;
    const d = (24 << (b >> 8 & 255)) + (16 << (b & 255)) + (0 << (b >> 24 & 255)) + (8 << (b >> 16 & 255));
    return (2531011 + (48666 + (rs(c, d) ^ rs(c, d))) * 214013) % 4294967296;
  }
  const Kr = 9;
  const Lr = 13;
  const Mr = 255;
  const Nr = 3;
  var Or = navigator.language || navigator.userLanguage;
  const Pr = hj;
  const Qr = 4;
  var Rr = -new Date().getTimezoneOffset() / 60;
  const Sr = 20;
  var Tr = "Europe";
  const Ur = 19;
  var Vr = "South America";
  const Wr = 16;
  const Xr = 19;
  const Yr = 8;
  const Zr = 15;
  const $r = 2;
  const _r = 17;
  var as = Tr;
  const bs = 10;
  if (Rr >= -2 && Rr <= 2) {
    as = Tr;
  } else if (Rr > 2 && Rr <= 5) {
    as = "Russia";
  } else if (Rr > 5 && Rr <= 9) {
    as = "Asia";
  } else if (Rr > 9) {
    as = "Australia";
  } else if (Rr >= -5 && Rr < -2) {
    as = Or === "pt-BR" || Or === "pt-br" || Or === "pt" || Or === "pt-pt" ? Vr : "North America";
  } else if (Rr < -5) {
    as = Or === "pt-BR" || Or === "pt-br" || Or === "pt" || Or === "pt-pt" ? Vr : "West America";
  }
  const cs = 8;
  const ds = 5;
  const es = 8;
  function fs(b, c, d, e, f) {
    const i = (2531011 + (b + 22244) * 214013) % 4294967296;
    const a = ~(c & 54243) & 54243 | ~(c & 54243) & c;
    const j = ~(d & 1590) & 1590 | ~(d & 1590) & d;
    const k = (e | 59707) & ~(e & 59707);
    const h = (1 + (61293 + f) * 22695477) % 4294967296;
    const g = function (b, c, d, e, f, i) {
      const a = b ^ 25588;
      const j = (24 << (c & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255)) + (0 << (c >> 8 & 255));
      const k = d ^ 37200;
      const h = cx(a, j, k, ~(e & 27658) & 27658 | ~(e & 27658) & e, ~(f & 49778) & 49778 | ~(f & 49778) & f, (12345 + (i + 52957) * 1103515245) % 2147483648);
      const g = ex(a, j, k);
      return ((19889 + (h ^ g)) * 2147483629 + 2147483587) % 2147483647;
    }(i, a, j, k, h, i);
    Fr(a, j, k, h, i, a);
    return ~(g & 7995) & g | ~(g & 7995) & 7995;
  }
  function gs(b, c, d, e) {
    const f = ((42852 + b) * 2147483629 + 2147483587) % 2147483647;
    const g = (c + 51336) % 65370;
    const a = (16 << (d >> 24 & 255)) + (8 << (d & 255)) + (24 << (d >> 16 & 255)) + (0 << (d >> 8 & 255));
    const i = (e | 27866) & ~(e & 27866);
    const j = Of(f, g, a, i, f, g);
    (function (b, c, d, e) {
      const f = (16 << (b & 255)) + (24 << (b >> 24 & 255)) + (0 << (b >> 8 & 255)) + (8 << (b >> 16 & 255));
      const g = (c | 53303) & ~(c & 53303);
      const a = (16 << (d & 255)) + (8 << (d >> 8 & 255)) + (24 << (d >> 16 & 255)) + (0 << (d >> 24 & 255));
      const i = ~(e & 38798) & 38798 | ~(e & 38798) & e;
      const j = Nf(f, g, a, i, f);
      Nf(g, a, i, f, g);
    })(a, i, f, g);
    return ~(j & 34085) & j | ~(j & 34085) & 34085;
  }
  const hs = 1;
  var Wk = {
    ⵠⵠᐃⵠⲆⵠᐃ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor(Math.random() * (b - 1));
      this.ᐃⵠⵠΔᐃ = function (a) {
        c = a || Math.floor(Math.random() * (b - 1));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const is = Xa;
  const ks = 18;
  const ls = 7;
  var js = Ph.Math.acos;
  Ph.Math.acos = Ph.Math.asin;
  Ph.Math.asin = js;
  var ns = Ph.Math.cos;
  Ph.Math.cos = Ph.Math.sin;
  Ph.Math.sin = ns;
  const os = 14;
  function ps(a, b) {
    const c = (a | 65350) & ~(a & 65350);
    const d = (12345 + (20378 + b) * 1103515245) % 2147483648;
    const e = Fr(c, d, c, d, c, d);
    (function (b, c, d) {
      const e = (2531011 + (15148 + b) * 214013) % 4294967296;
      const f = (c | 52778) & ~(c & 52778);
      const g = (0 << (d >> 24 & 255)) + (24 << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (8 << (d >> 0 & 255));
      const a = Jr(e, f);
      Gf(g, e, f);
    })(c, d, c);
    return e ^ 34867;
  }
  var qs = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  function rs(a, b) {
    const c = ~(a & 32593) & (a | 32593);
    const d = (24 << (b >> 24 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (0 << (b & 255));
    const e = function (b, c, d) {
      const e = ((12773 + b) * 1103515245 + 12345) % 2147483648;
      const f = ((c + 18853) * 1664525 + 1013904223) % 4294967296;
      const g = (d | 32914) & ~(d & 32914);
      const a = Kk(e, f, g, e);
      const h = fs(f, g, e, f, g);
      return (16 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) & 255)) + (8 << ((a ^ h) >> 16 & 255));
    }(c, d, c);
    Fr(d, c, d, c, d, c);
    return ~(e & 25347) & (e | 25347);
  }
  var ss = 0;
  let ts = {
    ⵠⲆⲆᐃᐃ: ["#133A2B", "#042b30"],
    ⲆⵠⲆⵠⵠⵠⵠⲆᐃ: ["#EBF2F0", "#136167"],
    ᐃⲆⵠΔΔᐃⵠ: ["#4EB687", "#187484"],
    ᐃΔⲆΔⵠᐃΔ: ["#664516", "#13474C"],
    ⵠⵠⵠΔⲆⵠΔ: ["#FCEFBB", "#0F4D48"],
    ΔⵠΔⲆΔⵠⲆ: ["#C1AA7E", "#0F423D"],
    ⵠⲆΔⵠⵠⵠᐃ: ["#594837", "#163A3A"],
    ⵠⵠᐃⲆⲆⲆⵠ: ["#A5D6D6", "#539CA0"],
    ⵠⵠΔⵠⵠ: ["#0B6A84", "#09373F"],
    ΔⲆⲆⲆΔᐃᐃ: ["#2A8B9B", "#0F464C"],
    ⲆΔⵠⲆⲆᐃⲆ: ["#A9D6D3", "#115E60"],
    ⵠⵠᐃⲆΔᐃΔ: ["#ECF7F9", "#539CA0"],
    ⲆΔⲆⲆⲆⵠᐃ: ["#FFF", "#FFF"],
    ⵠⵠⵠΔᐃⲆⲆ: ["#FFF", "#FFF"],
    ΔⲆΔΔⲆⲆΔ: ["#1C9BA4", "#00272F"],
    ⵠⲆΔⵠΔ: ["#2D2017", "#031C1E"],
    ⵠⵠⵠ: 0,
    ⵠΔⵠ: 1,
    ᐃⲆΔⲆᐃᐃΔΔΔ: 2300,
    ᐃⵠᐃⵠⵠᐃΔΔⲆ: 2290,
    ⲆⵠΔⵠΔΔⵠ: 34,
    ⲆᐃΔⲆⲆΔᐃ: 5,
    ᐃΔᐃⲆΔⵠⲆ: 68,
    ⲆᐃⵠᐃᐃⲆⵠ: 34,
    ᐃⲆⲆᐃΔΔᐃ: 5,
    ⵠΔΔⲆⲆⵠⵠ: 1,
    ⲆΔΔΔⲆⲆⲆ: 0.6,
    ΔΔⵠᐃⲆⵠᐃ: 0.25,
    ⵠⲆⲆⲆⲆⲆΔ: 50,
    ⵠΔⵠΔΔⲆᐃ: 10,
    ᐃⲆⵠᐃⵠᐃΔ: 75,
    ᐃⵠᐃⵠᐃⵠⲆ: 20,
    ⲆΔⵠᐃⵠᐃⲆ: 5,
    ᐃⲆΔΔᐃ: 0,
    ⵠΔⵠⲆⲆ: 1,
    ⲆⵠⲆΔⲆ: 2,
    ⲆⵠΔΔⲆ: 3,
    ⲆᐃΔⵠΔ: 4,
    ⲆⲆᐃⵠⵠ: 5,
    ⵠᐃⵠⵠⲆ: 6,
    ΔⲆΔⵠᐃ: 7,
    ⲆⲆⵠΔΔ: 8,
    ΔⲆᐃⵠⲆ: 9,
    ⵠⲆΔᐃⵠ: 10,
    ΔΔΔⵠⲆ: 11,
    ⵠᐃⵠⲆᐃ: 12,
    ΔᐃΔᐃᐃ: 13,
    ᐃΔⲆᐃΔ: 14,
    ᐃⲆⲆⲆⵠ: 15,
    ᐃΔΔⵠᐃ: 16,
    ⵠᐃⲆⲆⵠ: 17,
    ⲆⲆⲆⵠⲆ: 18,
    ⵠΔⵠᐃⵠ: 19,
    ⲆᐃᐃⵠⲆ: 20,
    ᐃⲆΔⵠΔ: 21,
    ᐃΔΔⲆᐃ: 22,
    ΔⵠⵠΔᐃ: 23,
    ΔⲆᐃⵠΔ: 24,
    ⲆᐃΔⲆⵠ: 25,
    ᐃΔⵠⵠΔ: 26,
    ΔΔᐃⵠΔ: 27,
    ⲆΔⲆⲆⲆ: 28,
    ᐃᐃⲆΔ: 29,
    ΔⲆᐃΔΔ: 30,
    ⲆΔΔᐃⵠ: 31,
    ⵠⵠⵠⵠᐃ: 32,
    Ⲇᐃⵠᐃᐃ: 33,
    ᐃⲆⵠᐃⵠ: 34,
    ΔᐃⲆᐃⲆ: 35,
    ⵠΔΔⵠᐃ: 36,
    ⲆΔᐃⵠΔ: 37,
    ΔⲆⲆⲆΔ: 38,
    ⲆⵠΔⲆΔ: 39,
    ᐃΔΔᐃⲆ: 40,
    ⵠΔⲆⲆⵠ: 41,
    ΔΔΔⵠⵠ: 42,
    ⲆⵠΔⵠⲆ: 43,
    ᐃⵠⵠᐃⲆ: 44,
    ΔⲆⲆΔᐃ: 45,
    Δᐃⵠᐃⵠ: 46,
    ΔΔⵠⵠᐃ: 47,
    ΔΔⲆᐃⲆ: 48,
    ΔΔᐃⲆᐃ: 49,
    ⲆⵠⵠΔᐃ: 50,
    ᐃⲆⲆⵠΔ: 51,
    ⵠⲆⲆⵠᐃ: 52,
    ⵠΔⲆⲆⲆ: 53,
    ᐃΔΔᐃⵠ: 54,
    ⲆⲆᐃⵠᐃ: 55,
    ΔⲆᐃᐃᐃ: 56,
    ⲆᐃⲆΔⲆ: 57,
    ᐃⵠᐃⵠΔ: 58,
    ⵠΔⲆⵠΔ: 59,
    ΔⵠᐃⵠΔ: 60,
    ⲆᐃⵠΔΔ: 61,
    ΔΔΔⲆΔ: 62,
    ⵠⵠⲆᐃⵠ: 63,
    ᐃⵠⵠⵠⲆ: 64,
    ⵠᐃΔᐃⲆ: 65,
    ⲆᐃⲆΔΔ: 66,
    ᐃⵠⲆⲆⵠ: 67,
    ᐃΔⲆΔⵠ: 68,
    ⵠⵠⵠⲆᐃ: 69,
    ⲆᐃⲆⵠᐃ: 70,
    ᐃΔⲆᐃⲆ: 71,
    ⵠⵠΔᐃⲆ: 72,
    ⲆⲆΔⵠⲆ: 73,
    ᐃΔⵠⵠᐃ: 74,
    ⲆᐃⵠⲆⵠ: 75,
    ΔΔᐃΔΔ: 76,
    ⲆⵠᐃᐃⲆ: 77,
    ᐃᐃⵠᐃⲆ: 78,
    ⲆᐃⵠⲆΔ: 79,
    ⵠⲆⵠⵠⲆ: 80,
    ⵠⲆΔΔⵠ: 81,
    ⵠⵠⲆⵠⲆ: 82,
    ⵠⵠΔⵠᐃ: 83,
    ⵠⵠⵠⵠⵠ: 84,
    ⲆΔⲆᐃⵠ: 85,
    ᐃᐃΔᐃᐃ: 86,
    ⵠⲆᐃΔⵠ: 87,
    ⵠΔΔⵠⵠ: 88,
    ΔⵠⲆⲆΔ: 89,
    ΔⵠⲆΔΔ: 90,
    ⲆⲆΔΔⵠ: 91,
    ⵠⵠⵠΔᐃ: 92,
    ᐃΔⵠⲆΔ: 93,
    ᐃⵠᐃⲆⲆ: 94,
    ⲆⵠⲆⲆⵠ: 95,
    ⲆⲆΔⵠᐃ: 96,
    ⲆΔΔᐃᐃ: 97,
    ⵠⵠⲆⲆⵠ: 98,
    ΔΔΔᐃᐃ: 99,
    ⵠᐃⵠΔΔⵠⲆΔᐃ: 100,
    ⵠΔⲆᐃΔ: 101,
    ⵠΔⵠᐃᐃ: 102,
    ᐃᐃΔⲆⵠ: 103,
    ᐃⲆⲆⲆⲆ: 104,
    ⲆΔᐃΔⲆ: 105,
    ⲆᐃΔⵠᐃ: 106,
    ΔΔᐃΔⲆ: 107,
    ᐃⲆᐃΔⲆ: 108,
    ⵠΔᐃΔ: 109,
    ᐃⲆⵠΔᐃ: 110,
    ᐃᐃᐃⲆ: 111,
    ᐃⲆⵠⲆ: 112,
    ⵠᐃⵠⵠΔⲆⵠ: 113,
    ΔᐃΔⵠΔ: 114,
    ⲆΔⲆᐃΔΔⵠ: 115,
    ⵠⲆΔΔᐃ: 116,
    ΔΔΔⲆⵠ: 117,
    ᐃᐃΔᐃΔᐃⲆ: 118,
    ⲆᐃᐃΔⵠᐃᐃ: 119,
    ⵠᐃΔΔᐃ: 120,
    ΔⲆᐃᐃ: 121,
    ⲆⵠΔᐃΔ: 122,
    ᐃᐃᐃΔᐃ: 123,
    ⵠⲆⲆΔΔΔΔ: 124,
    ⲆΔⲆΔⲆ: 125,
    ΔᐃΔᐃⲆ: 126,
    ΔᐃᐃⲆᐃ: 127,
    ⲆⵠᐃᐃΔ: 128,
    ᐃᐃΔⵠΔ: 129,
    ⲆⵠΔΔⵠ: 130,
    ⵠᐃΔⲆⵠ: 131,
    ⲆⲆⵠΔⲆ: 132,
    ΔᐃᐃⲆⵠ: 133,
    ⲆΔΔⵠⲆ: 134,
    ⵠⵠᐃΔᐃ: 135,
    ⵠⲆᐃᐃᐃ: 136,
    Ⲇᐃⵠⵠⵠ: 137,
    ⵠΔⲆΔΔ: 138,
    ⲆᐃⵠⵠⲆ: 139,
    ⵠΔⵠᐃⵠⵠᐃ: 140,
    ᐃⲆⵠᐃᐃ: 141,
    ᐃⵠⵠΔⵠⲆᐃ: 142,
    ᐃⵠΔΔⲆΔⵠ: 143,
    ⵠΔΔⲆⲆΔΔ: 144,
    ΔⵠᐃⵠΔΔⵠ: 145,
    ⲆᐃᐃⲆⲆ: 146,
    ᐃᐃⲆⲆⲆ: 147,
    ⵠⵠᐃΔΔ: 148,
    ⲆᐃᐃⲆᐃ: 149,
    ⵠᐃᐃΔⲆ: 150,
    ᐃⵠΔᐃᐃ: 151,
    ΔⲆⲆⵠΔ: 152,
    ⵠᐃⲆᐃⵠ: 153,
    ᐃᐃΔⵠᐃ: 154,
    ⲆⵠᐃⲆᐃ: 155,
    ⵠΔΔᐃⵠ: 156,
    ⵠⵠⲆⲆΔ: 157,
    Δⵠᐃⵠᐃ: 158,
    ᐃⵠΔⲆΔ: 159,
    ᐃΔⵠⲆⵠ: 160,
    ⲆⵠⲆⲆⲆ: 161,
    ⲆᐃⵠΔⵠ: 162,
    ΔⵠᐃΔΔ: 163,
    ΔⲆⵠⵠⲆ: 164,
    ⵠᐃⵠⵠⵠ: 165,
    ΔⲆⲆⲆⵠΔᐃ: 166,
    ΔⲆⵠᐃΔ: 167,
    ⵠᐃᐃⲆⲆ: 168,
    ⵠⵠⲆΔΔ: 169,
    ⵠⵠᐃⵠᐃ: 170,
    ᐃⵠΔΔᐃᐃⲆ: 171,
    ⵠΔⲆΔᐃᐃⲆ: 172,
    ⲆᐃⲆⵠⲆⲆⵠ: 173,
    ⲆΔⵠⲆⵠ: 174,
    ⵠᐃᐃⲆΔᐃⲆ: 175,
    ᐃⲆᐃΔΔⲆⵠ: 176,
    ᐃⵠⵠΔⵠⵠᐃ: 177,
    ⲆᐃΔᐃΔⲆⲆ: 178,
    ⲆⲆⲆᐃᐃⵠⵠ: 179,
    ⲆᐃⵠⵠⵠΔⵠ: 180,
    ᐃⵠΔⲆⵠΔⲆ: 181,
    ΔⵠᐃⲆⵠⲆⲆ: 182,
    ᐃⲆΔΔⲆ: 183,
    ΔᐃᐃΔⵠ: 184,
    ΔΔⲆⲆΔ: 185,
    ᐃΔⵠΔⵠ: 186,
    Ⲇⵠᐃⵠᐃ: 187,
    ΔᐃΔᐃᐃⵠⲆ: 188,
    ⲆⲆᐃΔⵠ: 189,
    ⲆᐃᐃⲆΔ: 190,
    ⵠᐃΔᐃⵠⲆΔ: 191,
    ᐃⵠⵠⲆⵠ: 192,
    ᐃⵠΔⵠⵠⲆⲆ: 193,
    ᐃⵠⲆΔᐃ: 194,
    ⲆⵠᐃΔⲆ: 195,
    ⵠᐃⲆⲆᐃΔⵠ: 196,
    ⵠⵠⲆⵠᐃᐃⲆ: 197,
    ⲆⵠΔⲆᐃ: 198,
    ⲆΔᐃΔΔ: 199,
    ⵠⲆΔᐃⲆⲆΔ: 200,
    ᐃΔⵠᐃⵠ: 201,
    ΔΔᐃΔ: 202,
    ⲆᐃⵠᐃⲆ: 203,
    ⲆᐃᐃⲆⲆⵠΔ: 204,
    ⲆⵠΔⵠΔ: 205,
    ΔⵠⵠΔΔᐃΔ: 206,
    ΔᐃⵠᐃⲆ: 207,
    ᐃΔⵠⵠΔⵠⵠ: 208,
    ⵠᐃΔΔΔ: 209,
    ⵠᐃⲆⵠⲆⲆᐃ: 210,
    ᐃΔΔΔΔⲆⲆ: 211,
    ΔⲆΔΔΔ: 212,
    ᐃⵠⲆⵠΔ: 213,
    ⵠᐃᐃᐃᐃ: 214,
    ⵠⵠⵠⲆⲆ: 215,
    ΔⵠⵠΔΔ: 216,
    ΔⵠⵠⲆⲆ: 217,
    ᐃᐃΔᐃΔ: 218,
    ⲆΔⵠⵠΔ: 219,
    ⲆⲆⵠⲆᐃ: 220,
    ᐃⵠⲆᐃⵠ: 221,
    ΔΔⵠΔᐃ: 222,
    ΔΔΔⵠΔ: 223,
    ⵠⵠⲆⲆᐃ: 224,
    ΔⵠΔΔΔᐃΔ: 225,
    ⲆΔⲆⵠⲆⵠΔ: 226,
    ᐃΔⵠᐃᐃ: 227,
    ᐃⵠΔⵠⲆⲆⲆ: 228,
    ⵠᐃⲆᐃⲆ: 229,
    ΔⵠⲆⲆⲆ: 230,
    ⵠⵠᐃΔⵠ: 231,
    ⲆⵠᐃⵠⲆ: 232,
    ᐃᐃᐃᐃᐃ: 233,
    ᐃⲆⵠΔⲆⵠⵠ: 234,
    ⵠᐃΔⲆΔ: 235,
    ᐃⲆᐃⵠᐃ: 236,
    ⲆⵠΔΔᐃ: 237,
    ⵠⵠΔⲆⲆ: 238,
    ᐃⵠΔⲆᐃ: 239,
    ⵠⲆᐃⲆᐃ: 240,
    ᐃΔⲆⲆᐃ: 241,
    ⵠΔᐃⵠᐃ: 242,
    ᐃⲆᐃᐃᐃᐃⲆ: 243,
    ⵠΔΔⲆⵠ: 244,
    ᐃⵠΔⲆⲆ: 245,
    ΔⵠⵠΔᐃᐃᐃ: 246,
    ⲆⲆⲆΔᐃ: 247,
    ⲆΔᐃΔⵠ: 248,
    ΔⲆΔᐃᐃᐃⵠ: 249,
    ᐃⵠⵠΔⵠ: 250,
    ⲆⵠᐃⵠΔ: 251,
    ⵠⲆⲆᐃΔΔⲆ: 252,
    ΔⵠΔΔᐃᐃᐃ: 253,
    ΔⲆⲆⲆᐃΔᐃ: 254,
    ⵠⵠⲆᐃⲆ: 255,
    ⲆᐃᐃΔᐃᐃᐃ: 256,
    ⲆᐃⵠΔΔⲆΔ: 257,
    ⲆⲆΔᐃⵠⲆᐃ: 258,
    ⵠΔⲆᐃᐃⲆⵠ: 259,
    ΔΔⵠᐃᐃ: 260,
    ᐃⲆⵠⲆΔΔΔ: 261,
    ᐃᐃⲆⲆⵠΔⲆ: 262,
    ΔⲆᐃⲆᐃΔⵠ: 263,
    ΔΔⲆᐃᐃ: 264,
    ΔΔᐃⲆᐃⲆᐃ: 265,
    ⵠᐃΔΔⲆᐃᐃ: 266,
    ᐃⲆⲆⵠᐃⲆΔ: 267,
    ⲆΔᐃᐃᐃⲆⲆ: 268,
    ⲆᐃⵠᐃΔⲆⵠ: 269,
    ᐃᐃⲆΔᐃΔΔ: 270,
    ᐃΔᐃΔᐃⲆᐃ: 271,
    ⵠⲆᐃΔⲆᐃΔ: 272,
    ⵠⵠⲆⵠⲆⵠⵠ: 273,
    ⲆⵠⵠⲆⲆΔⵠ: 274,
    ⵠⲆⵠⲆⲆΔⵠ: 275,
    ⵠⵠᐃⲆⲆᐃΔ: 276,
    ΔΔⵠⲆⲆⲆⵠ: 277,
    ᐃⵠⲆⲆΔΔΔ: 278,
    ᐃⲆᐃΔ: 279,
    ΔⵠᐃⵠⲆ: 280,
    ΔΔᐃᐃΔⲆⲆ: 281,
    ΔⵠᐃΔⵠⵠᐃ: 282,
    ⲆΔ: 283,
    ⲆⵠΔⲆⵠᐃᐃ: 284,
    ΔⲆⲆⲆⲆ: 285,
    ⲆᐃΔⵠⲆ: 286,
    ⵠᐃᐃⵠΔΔⵠ: 287,
    ⵠᐃΔⵠΔ: 288,
    ⵠⲆᐃⵠⵠΔΔ: 289,
    ᐃⲆⲆⲆΔⵠⵠ: 290,
    ΔᐃⵠⵠⵠΔᐃ: 291,
    ΔΔΔⲆᐃⲆΔ: 292,
    ΔⲆᐃΔΔΔⲆ: 293,
    ⵠⲆⲆⵠⲆ: 294,
    ⵠⵠⵠᐃᐃΔⵠ: 295,
    ΔᐃᐃⲆΔᐃΔ: 296,
    ΔⲆⲆᐃⵠⲆΔ: 297,
    ⵠⲆΔⲆΔⵠᐃ: 298,
    ⵠΔΔΔΔ: 299,
    ΔΔΔᐃᐃⲆⲆ: 300,
    ⵠᐃᐃⵠⵠⲆⵠ: 301,
    ⲆⲆⵠΔⵠⵠΔ: 302,
    ⲆⲆⵠⵠⲆⵠΔ: 303,
    ᐃⲆⵠⵠΔⵠⲆ: 304,
    ⲆᐃⵠⲆᐃΔᐃ: 305,
    ΔΔⲆΔΔΔΔ: 306,
    ᐃΔΔⲆΔ: 307,
    ⲆⲆΔⲆⵠⲆⲆ: 308,
    Ⲇᐃⵠᐃᐃᐃⵠ: 309,
    ⲆⲆΔⵠᐃⵠⵠ: 310,
    ⵠΔⲆⲆᐃⲆⲆ: 311,
    ⲆᐃⲆⲆᐃⲆΔ: 312,
    ΔΔᐃᐃⲆΔᐃ: 313,
    ⲆⲆⲆⲆᐃΔΔ: 314,
    ⵠΔⲆⵠⵠⵠΔ: 315,
    ᐃⲆΔΔⲆⵠᐃ: 316,
    ⲆᐃᐃⲆΔⵠΔ: 317,
    ⲆᐃΔⵠᐃⲆΔ: 318,
    ᐃΔΔⲆⲆΔⵠ: 319,
    ⲆᐃⲆⲆⲆⵠⵠ: 320,
    ᐃᐃⲆΔΔ: 321,
    ⲆᐃⵠⲆⲆᐃⲆ: 322,
    ⵠᐃⲆⲆΔⲆⵠ: 323,
    ⵠᐃᐃᐃᐃᐃΔ: 324,
    ᐃΔⲆᐃᐃⵠⵠ: 325,
    ⲆⲆⵠᐃⵠⲆⲆ: 326,
    ᐃᐃⵠᐃΔᐃΔ: 327,
    ⵠΔⲆΔΔΔΔ: 328,
    ᐃΔⵠⵠΔΔΔ: 329,
    ΔΔⲆᐃⵠᐃᐃ: 330,
    ΔΔⵠⲆⲆΔⲆ: 331,
    ⵠᐃⲆᐃⵠⲆᐃ: 332,
    ΔⲆⵠΔⵠΔᐃ: 333,
    ⵠⲆᐃⵠⲆᐃⵠ: 334,
    ΔⲆᐃΔⲆⵠΔ: 335,
    ΔᐃⵠⲆΔΔⲆ: 336,
    ᐃⲆΔᐃᐃⲆⵠ: 337,
    ΔᐃⲆⲆⲆⲆᐃ: 338,
    ΔᐃⵠᐃⲆΔᐃ: 339,
    ΔΔⵠⵠΔⲆΔ: 340,
    ᐃᐃΔΔⲆⲆΔ: 341,
    ᐃᐃⲆⲆᐃΔΔ: 342,
    ΔⵠⲆⲆⲆΔⵠ: 343,
    ⵠⲆⲆᐃᐃᐃᐃ: 344,
    ⵠⲆΔⵠⲆᐃⲆ: 345,
    ΔᐃᐃᐃⲆⲆⵠ: 346,
    ⵠΔΔⵠᐃᐃⲆᐃⲆ: 347,
    ΔΔⲆⵠⲆⲆΔ: 348,
    ΔᐃᐃᐃᐃⲆΔ: 349,
    ᐃᐃΔᐃⵠΔⲆ: 350,
    ΔⵠΔΔⲆⲆΔ: 351,
    ⵠΔⲆⲆΔΔᐃ: 352,
    ΔΔⲆᐃⵠⵠΔ: 353,
    ΔᐃΔΔΔᐃⵠ: 354,
    ⲆΔⵠⵠΔⵠⵠ: 355,
    ⵠⵠΔΔⵠΔⲆ: 356,
    ᐃᐃⵠᐃΔΔᐃ: 357,
    ᐃᐃᐃΔⵠᐃᐃ: 358,
    ⲆΔⵠⲆᐃᐃⵠ: 359,
    ⵠⲆΔΔᐃΔᐃ: 360,
    ΔⵠΔΔΔⵠⲆ: 361,
    ᐃⲆᐃⵠΔᐃⵠ: 362,
    ⵠⲆⲆΔΔΔⲆ: 363,
    ⵠⲆⲆᐃᐃΔⵠ: 364,
    ΔⵠⲆⵠΔΔⲆ: 365,
    ΔⲆⲆⵠⲆⲆΔ: 366,
    ΔⲆⲆⵠᐃⵠⲆ: 367,
    ᐃⵠⲆᐃΔᐃᐃ: 368,
    ⵠᐃⵠᐃⲆΔΔ: 369,
    ΔΔⲆᐃⵠᐃⲆ: 370,
    ⵠⵠᐃⵠⵠⲆΔ: 371,
    ⲆᐃᐃⲆⲆⵠᐃ: 372,
    ⲆΔᐃⵠΔΔⵠ: 373,
    ᐃΔⵠⵠⵠⲆⲆ: 374,
    ⵠΔⵠⲆⲆΔΔ: 375,
    ⲆⲆⲆⵠⲆΔⲆ: 376,
    ΔⵠᐃⲆΔΔⲆ: 377,
    ΔᐃⲆⲆΔᐃΔ: 378,
    ΔⵠΔᐃᐃᐃᐃ: 379,
    ᐃⵠⵠΔΔᐃⲆ: 380,
    ΔᐃⲆⲆΔⵠᐃ: 381,
    ⲆΔᐃⲆΔΔⲆ: 382,
    ⲆᐃⲆⲆⵠⵠΔ: 383,
    ⵠΔΔΔᐃᐃΔ: 384,
    ᐃᐃⲆⵠΔⵠⲆ: 385,
    ᐃΔⵠⵠⲆΔⵠ: 386,
    ΔⲆⵠᐃⵠᐃⲆ: 387,
    ᐃΔⵠᐃΔᐃⲆ: 388,
    ⲆⲆⲆᐃᐃᐃᐃ: 389,
    ΔΔⵠⲆΔⲆΔ: 390,
    ⲆⲆΔⵠᐃᐃⲆ: 391,
    ⵠⵠⵠⵠᐃΔⲆ: 392,
    ⲆᐃᐃΔΔⵠⵠ: 393,
    ⵠΔΔᐃᐃⵠᐃ: 394,
    ᐃⲆΔⵠⲆᐃΔ: 395,
    ⲆΔⲆⲆⲆⲆᐃ: 396,
    ⵠⲆⲆᐃΔᐃᐃ: 397,
    ⲆⵠᐃⵠⲆᐃⲆ: 398,
    ⵠΔᐃⲆⲆΔᐃ: 399,
    ⲆⵠᐃΔⵠⲆΔ: 400,
    ⵠΔᐃΔΔⲆⲆ: 401,
    ⵠᐃᐃⲆΔⲆᐃ: 402,
    ᐃΔⵠⵠⵠΔΔ: 403,
    ⵠᐃᐃⲆⵠΔΔ: 404,
    ᐃᐃⵠⲆΔΔΔ: 405,
    ᐃᐃΔΔⲆⵠⵠ: 406,
    ⲆⵠⲆⲆΔⵠΔ: 407,
    ΔΔΔⵠΔⵠⵠ: 408,
    ⲆΔΔᐃᐃⵠⵠ: 409,
    ⵠⵠⵠⲆᐃⵠⵠ: 410,
    ᐃⲆⲆⵠᐃΔⲆ: 411,
    ⲆⲆⲆᐃᐃⵠᐃ: 412,
    ⵠⲆᐃⵠΔ: 413,
    ᐃΔⲆⵠΔᐃⵠⲆⲆ: 414,
    ⲆⲆΔⵠⵠ: 415,
    ᐃΔⲆΔΔ: 416,
    ΔⵠᐃⵠᐃⲆᐃᐃⵠ: 417,
    ΔᐃΔΔΔⵠⲆ: 418,
    ᐃΔΔᐃᐃ: 419,
    ᐃᐃⵠΔⲆᐃⲆ: 420,
    ᐃⲆⵠᐃⵠΔᐃ: 421,
    ᐃⲆⵠᐃᐃᐃⲆ: 422,
    ΔᐃⲆᐃⵠΔⵠ: 423,
    ⲆⲆⵠⲆⵠᐃⵠ: 424,
    ᐃⲆⵠᐃΔⲆΔ: 425,
    ⵠᐃᐃⲆⵠⵠΔ: 426,
    ΔⲆⵠΔᐃⲆⵠ: 427,
    ⲆΔⵠᐃⵠⲆⵠ: 428,
    ΔΔᐃΔᐃⲆⵠ: 429,
    ᐃΔⲆᐃⵠᐃⲆ: 430,
    ⵠⲆⲆᐃΔΔᐃ: 431,
    ⲆⲆᐃΔⲆΔᐃ: 432,
    ⲆΔᐃᐃⵠᐃⵠ: 433,
    ⲆΔΔᐃⵠⵠᐃ: 434,
    ᐃᐃᐃΔΔⵠᐃ: 435,
    ⲆⲆⵠⲆΔΔⲆ: 436,
    ΔΔᐃⵠⲆᐃΔ: 437,
    ΔⵠᐃΔⵠᐃⲆ: 438,
    ᐃⵠⲆⲆⲆⵠΔ: 439,
    ⲆⲆⲆΔⲆᐃⵠ: 440,
    ⵠΔⵠⲆΔⲆᐃ: 441,
    ᐃᐃⲆⲆⲆⲆᐃ: 442,
    ⲆⵠΔᐃᐃⲆⲆ: 443,
    ⵠᐃⲆⵠΔΔᐃᐃΔ: 444,
    ⵠᐃΔᐃΔ: 445,
    ⵠᐃⵠⲆⵠᐃΔ: 446,
    ᐃⵠⵠΔⲆⵠⵠ: 447,
    ΔⲆⲆΔⲆΔᐃΔⲆ: 448,
    ⲆΔⲆⵠⵠ: 449,
    ⵠⲆⲆᐃΔ: 450,
    ⲆⲆⵠᐃᐃⲆⵠ: 451,
    ⲆΔⵠⲆΔⲆⵠ: 452,
    ⵠᐃⵠᐃⲆⲆᐃ: 453,
    ⵠΔⵠⲆⵠⲆᐃ: 454,
    ⲆΔΔⲆⲆⵠᐃ: 455,
    ΔΔΔᐃᐃⲆᐃ: 456,
    ᐃⲆⲆⵠΔΔᐃ: 457,
    ⲆⲆᐃⵠⵠᐃᐃ: 458,
    ⵠⵠᐃⲆⵠⲆΔ: 459,
    ᐃΔⲆⵠᐃⵠΔ: 460,
    ⵠⵠᐃⲆⵠⵠᐃ: 461,
    ⲆⵠⵠᐃⲆⲆⵠ: 462,
    ⵠΔⲆᐃΔᐃΔ: 463,
    ⵠⲆⵠΔⲆⲆⵠ: 464,
    ΔⲆΔⲆⵠΔᐃ: 465,
    ΔⲆᐃᐃΔⵠΔ: 466,
    ⲆⲆⲆⵠⵠⵠⵠ: 467,
    ⲆΔⵠⵠⵠⲆΔ: 468,
    ⲆⲆⵠⵠᐃⵠᐃ: 469,
    ᐃⵠⲆΔᐃΔᐃ: 470,
    ΔΔΔᐃⵠΔΔ: 471,
    ᐃⵠⲆⵠⵠᐃΔ: 472,
    ΔⵠᐃᐃᐃΔⲆ: 473,
    ΔΔᐃΔᐃⲆⲆ: 474,
    ΔᐃΔⵠΔⵠΔ: 475,
    ⲆᐃⵠⲆⲆⲆᐃ: 476,
    ᐃΔᐃᐃᐃⵠⲆ: 477,
    ⵠⵠΔⵠᐃⲆᐃ: 478,
    ΔⵠⲆⲆᐃⵠⵠ: 479,
    ᐃΔᐃⵠⵠΔΔ: 480,
    ⲆⵠⲆᐃⵠΔⲆ: 481,
    ᐃⲆᐃΔⵠᐃΔ: 482,
    ΔⲆⵠⵠⲆΔᐃ: 483,
    ⲆΔⲆᐃⲆΔᐃ: 484,
    ⵠⵠΔⵠΔᐃⵠ: 485,
    ΔΔᐃⵠᐃⲆⲆ: 486,
    ᐃΔᐃᐃⵠΔⵠ: 487,
    ⲆᐃΔΔⵠⲆΔ: 488,
    ᐃⲆⵠΔⵠΔⵠ: 489,
    ΔΔΔⵠᐃᐃⲆ: 490,
    ⲆΔᐃΔⲆⲆⵠ: 491,
    ⲆⵠⲆⲆⵠⵠᐃ: 492,
    ⲆⲆΔΔᐃⵠⲆ: 493,
    ⲆⵠᐃⲆⵠⵠᐃ: 494,
    ⲆⲆᐃᐃᐃᐃⲆ: 495,
    ᐃᐃⵠⵠᐃᐃΔ: 496,
    ΔⲆΔᐃΔΔΔ: 497,
    ΔᐃΔᐃⵠᐃⲆ: 498,
    ⵠⵠᐃΔⵠᐃᐃ: 499,
    ᐃΔⲆΔⲆᐃᐃ: 500,
    ᐃᐃⵠⲆᐃᐃΔ: 501,
    ᐃᐃΔᐃⲆⵠⵠ: 502,
    ΔᐃᐃΔⲆᐃⲆ: 503,
    ⵠΔⵠΔⲆⲆⵠ: 504,
    ⵠᐃⲆΔΔⲆⲆ: 505,
    ΔᐃⲆΔᐃⲆⲆ: 506,
    ΔⲆΔⲆⵠΔᐃ: 507,
    ⵠΔᐃⲆⲆⲆⲆ: 508,
    ⲆⲆΔⲆⵠΔᐃ: 509,
    ΔⵠⲆΔΔⵠΔ: 510,
    ΔⵠⵠⲆⲆⵠᐃ: 511,
    ᐃᐃⲆⲆᐃⲆⵠ: 512,
    ⵠⵠⵠΔᐃΔⲆ: 513,
    ⵠΔⵠⲆⲆⵠᐃ: 514,
    ⲆΔⵠΔⵠΔⲆ: 515,
    ⵠⲆᐃᐃⵠⵠⵠ: 516,
    ΔΔΔΔⵠᐃⵠ: 517,
    ΔᐃⲆΔⲆⵠⵠ: 518,
    ⵠᐃⲆᐃᐃⲆᐃ: 519,
    ΔΔᐃΔΔᐃᐃ: 520,
    ᐃᐃⵠᐃⲆᐃⵠ: 521,
    ΔⵠᐃᐃⵠⲆᐃ: 522,
    ⵠⲆΔᐃΔⵠⵠ: 523,
    ᐃⲆⲆᐃᐃⵠᐃ: 524,
    ⲆⲆᐃⵠΔⵠⲆ: 525,
    ᐃⲆᐃΔⵠΔᐃ: 526,
    ⵠⲆⲆⵠⵠᐃⵠ: 527,
    ᐃⲆⵠᐃᐃᐃᐃ: 528,
    ⲆᐃᐃΔⲆᐃΔ: 529,
    ΔΔΔΔᐃΔⵠ: 530,
    ⲆᐃΔⲆⵠΔⵠ: 531,
    ⵠΔᐃⵠⲆⲆⲆ: 532,
    ᐃΔΔΔΔⲆⵠ: 533,
    ⲆⲆΔⲆᐃΔᐃ: 534,
    ⵠᐃⵠⵠΔΔΔ: 535,
    ΔⲆᐃⲆᐃⵠΔ: 536,
    ᐃᐃᐃΔⲆⵠⲆ: 537,
    ᐃⵠᐃΔⲆⵠΔ: 538,
    ᐃᐃΔⵠⲆⲆⲆΔⲆ: 539,
    ⲆᐃΔⲆⲆⵠΔ: 540,
    ⵠᐃΔᐃⲆⲆⲆ: 541,
    ΔⵠⵠⲆⲆᐃΔ: 542,
    ΔⵠⲆⵠⲆⵠΔ: 543,
    ⲆⵠⵠⵠᐃΔᐃⵠⲆ: 544,
    POINTS: 545,
    ᐃᐃⲆⲆⵠᐃᐃ: 546,
    ᐃⵠⲆⲆᐃⵠΔ: 547,
    ⵠΔⵠΔΔⵠᐃ: 548,
    ΔⵠⵠⵠⵠⲆⵠ: 549,
    ΔⲆⲆΔΔⲆΔ: 550,
    ⲆⲆΔΔΔⵠᐃ: 551,
    ⲆⲆᐃⵠᐃⵠⵠ: 552,
    ⵠⲆΔⵠΔΔΔ: 553,
    ⲆᐃΔⵠΔΔΔ: 554,
    ⲆᐃⲆΔΔΔⲆ: 555,
    ᐃⵠⵠΔⲆⵠᐃ: 556,
    ᐃⵠᐃⲆⲆΔⲆ: 557,
    ⲆⲆⲆⵠΔⵠΔ: 558,
    ᐃΔⲆᐃⲆⲆⵠ: 559,
    ᐃΔᐃΔΔΔΔ: 560,
    ᐃᐃΔᐃΔⲆⵠ: 561,
    ⵠᐃⲆⲆΔⵠΔ: 562,
    ⵠᐃΔⵠᐃᐃΔ: 563,
    ⵠᐃᐃⵠΔⲆⲆ: 564,
    ΔⲆΔⵠⵠΔΔ: 565,
    ΔᐃⲆⵠᐃΔᐃ: 566,
    ⵠᐃⵠΔΔⵠΔ: 567,
    ⲆⲆᐃΔⲆᐃᐃ: 568,
    ⲆⵠᐃᐃᐃΔᐃ: 569,
    ΔᐃⲆΔⵠⵠⲆ: 570,
    ⲆⵠⲆⲆⵠΔⵠ: 571,
    ⵠⵠᐃⲆⲆΔᐃ: 572,
    ᐃᐃΔᐃⲆⲆⲆ: 573,
    ⵠΔⵠⵠᐃⵠᐃ: 574,
    ᐃⲆⲆⲆⵠⲆⲆ: 575,
    ᐃⵠᐃⵠⵠΔΔ: 576,
    ΔⵠᐃⲆΔᐃᐃ: 577,
    ΔᐃᐃⵠⵠΔⲆ: 578,
    ⲆΔⵠⵠᐃⵠᐃ: 579,
    ᐃⲆⵠᐃⵠⵠⲆ: 580,
    ⲆΔⵠⲆⵠⲆᐃ: 581,
    ⲆΔⵠᐃⵠᐃᐃ: 582,
    ᐃⲆⲆⵠⵠᐃᐃ: 583,
    ⲆⵠⵠⵠⲆΔⵠ: 584,
    ⲆⲆΔⲆΔⵠⵠ: 585,
    ᐃⵠⲆⵠΔⲆⵠ: 586,
    ΔⵠᐃⵠΔᐃΔ: 587,
    ᐃⲆⵠⵠⵠⲆΔ: 588,
    ᐃⵠᐃⵠΔΔⵠ: 589,
    ᐃᐃᐃΔᐃⵠΔ: 590,
    ⲆᐃᐃᐃΔⵠⵠ: 591,
    ᐃΔⲆᐃΔⲆΔ: 592,
    ⲆΔΔΔΔΔⵠᐃⲆ: 593,
    ⵠΔⵠⵠⲆⵠΔ: 594,
    ⵠⲆⲆᐃΔΔⲆᐃᐃ: 595,
    ⲆᐃⲆΔᐃΔᐃ: 596,
    ⲆᐃᐃⲆⵠΔΔΔⲆ: 597,
    ΔⲆᐃΔΔΔⵠⲆΔ: 598,
    ΔⵠⲆᐃⵠΔⵠⲆⵠ: 599,
    ᐃᐃΔⵠΔᐃΔⵠᐃ: 600,
    ᐃⲆⲆⵠⵠΔᐃΔⲆ: 601,
    ⲆΔᐃⵠⲆΔⵠ: 602,
    ΔᐃⵠᐃΔ: 603,
    ᐃⲆᐃⲆⲆⵠᐃ: 604,
    ᐃᐃⲆⵠᐃᐃΔ: 605,
    ⲆⵠⵠⲆΔⵠΔ: 606,
    ΔⲆⲆⵠᐃⵠⵠⲆΔ: 607,
    ⲆⵠΔⲆⲆⲆⲆ: 608,
    ΔⲆᐃⲆⵠⵠⲆ: 609,
    ⲆⵠⲆⲆΔⵠᐃ: 610,
    ⵠᐃᐃⵠⲆⲆᐃ: 611,
    ⵠⵠΔΔⲆᐃⵠ: 612,
    ᐃᐃⲆⵠⲆⲆⵠ: 613,
    ᐃΔᐃⲆⲆΔᐃ: 614,
    ⲆΔᐃⲆⲆⵠⵠ: 615,
    ⲆᐃᐃⵠⲆᐃⵠ: 616,
    ᐃⵠⵠᐃⵠᐃΔ: 617,
    ⲆΔⵠⵠⲆⵠᐃ: 618,
    ⵠᐃⵠᐃᐃ: 619,
    ᐃᐃΔᐃⲆ: 620,
    ⵠⲆᐃᐃΔ: 621,
    ΔⲆᐃᐃΔⲆⵠⵠⲆ: 622,
    ⲆᐃⲆⵠᐃⲆᐃ: 623,
    ΔⵠΔᐃⵠⵠⵠ: 624,
    ⵠΔⲆⵠⵠᐃⲆ: 625,
    ⵠⵠⵠⲆⵠⲆⲆ: 626,
    ᐃᐃⵠᐃⵠᐃⵠ: 627,
    ᐃⵠⵠΔⵠΔΔ: 628,
    ΔΔⵠⵠⵠⲆᐃ: 629,
    ⲆⵠΔΔⵠⲆΔ: 630,
    ΔΔΔⲆᐃᐃⲆ: 631,
    ⲆΔᐃᐃⲆΔᐃ: 632,
    ᐃΔⲆᐃⲆⲆΔ: 633,
    ⵠⵠⵠᐃᐃⵠᐃ: 634,
    ΔⵠⲆⵠΔᐃⲆ: 635,
    ΔⵠᐃⵠΔⲆⲆ: 636,
    ᐃΔⲆᐃⵠ: 637,
    ΔⵠⲆΔΔᐃⵠ: 638,
    ΔΔⵠᐃᐃⵠⵠ: 639,
    ΔⲆᐃΔΔᐃᐃ: 640,
    ⲆⵠⲆᐃⲆⵠΔ: 641,
    ΔΔⵠⲆⲆΔᐃ: 642,
    ⵠⲆΔᐃⵠᐃᐃ: 643,
    ⵠΔΔᐃΔᐃΔ: 644,
    ⵠⲆΔᐃΔⵠⲆ: 645,
    ᐃⲆⵠᐃᐃⵠⵠ: 646,
    ΔⵠⵠΔⵠᐃⵠ: 647,
    ⲆᐃᐃᐃⵠⲆᐃ: 648,
    ᐃⵠⵠᐃᐃⲆᐃ: 649,
    ΔΔⲆⵠⵠⲆᐃ: 650,
    ⲆΔΔΔⲆᐃᐃ: 651,
    ⵠᐃⵠΔⵠⲆⵠ: 652,
    ᐃΔⵠΔⵠᐃΔ: 653,
    ⵠΔⲆᐃⲆΔⵠ: 654,
    ⲆⲆᐃⲆΔΔⵠ: 655,
    ΔΔᐃᐃⵠⵠᐃ: 656,
    ᐃᐃⵠⲆΔⲆⵠ: 657,
    ᐃᐃᐃⲆⲆⲆⵠ: 658,
    ⵠⲆⲆⲆⲆΔⵠ: 659,
    ⵠⵠⲆⵠⲆᐃΔ: 660,
    ΔΔᐃⲆⲆⵠⲆ: 661,
    ⵠⵠⲆᐃᐃⲆΔ: 662,
    ⲆⲆⲆⵠⵠᐃᐃ: 663,
    ⵠᐃⲆᐃᐃⵠᐃ: 664,
    ᐃⵠⲆᐃⲆΔΔ: 665,
    ⲆΔᐃΔⲆⵠΔ: 666,
    ᐃᐃⲆᐃⵠᐃⲆ: 667,
    ⲆΔⲆⵠΔΔᐃ: 668,
    ᐃΔⵠΔⲆⵠΔ: 669,
    ⲆΔⵠⲆⲆΔⵠ: 670,
    ⵠⲆⵠⵠⵠⲆⲆ: 671,
    ΔⲆⵠⲆΔⵠᐃ: 672,
    ΔⲆᐃⲆⲆ: 673,
    ΔᐃⲆⲆⲆᐃΔ: 674,
    ⲆΔΔᐃⲆⲆⲆ: 675,
    ⲆⲆᐃⲆΔ: 676,
    ᐃⵠᐃⲆⲆΔΔⵠᐃ: 677,
    ᐃⲆⵠⲆᐃΔᐃ: 678,
    ᐃⲆⵠⲆΔ: 679,
    ΔⵠᐃΔⲆⲆⵠ: 680,
    ᐃⲆⵠΔⲆⵠⲆ: 681,
    ΔⲆᐃⵠᐃΔⲆ: 682,
    ᐃⵠⲆⲆᐃᐃΔ: 683,
    ᐃΔⲆⲆᐃΔᐃ: 684,
    ⲆᐃⵠΔⲆΔⲆ: 685,
    ᐃᐃΔⵠⵠⵠΔ: 686,
    ⵠΔⵠⵠΔⵠᐃ: 687,
    ΔⵠΔⲆᐃⵠᐃ: 688,
    ⲆΔⲆⲆⲆⲆⲆ: 689,
    ΔⵠΔⲆᐃⵠΔ: 690,
    ΔΔΔⵠᐃ: 691,
    ⵠΔⵠⲆᐃ: 692,
    ⲆΔⲆΔΔ: 693,
    ᐃᐃᐃᐃΔ: 694,
    ΔⵠΔᐃᐃ: 695,
    ΔⲆΔⲆᐃⵠⲆ: 696,
    ⵠᐃⵠΔΔᐃᐃ: 697,
    ⵠᐃΔΔⲆⲆⵠ: 698,
    ⵠⵠᐃⲆⲆΔⲆ: 699,
    ΔⲆΔᐃⲆⵠᐃ: 700,
    ΔᐃⵠⲆΔΔᐃ: 701,
    ᐃΔⲆΔⵠⵠⵠ: 702,
    ⲆΔᐃⵠΔⲆⲆ: 703,
    ᐃΔΔⲆᐃⲆⲆ: 704,
    ⵠⵠⲆΔⵠⲆᐃ: 705,
    ᐃⵠΔⲆᐃᐃᐃ: 706,
    ΔΔᐃⲆⵠⲆΔ: 707,
    ᐃΔⲆⵠⲆΔⵠ: 708,
    ᐃᐃⲆⵠⵠⵠᐃ: 709,
    ⲆΔᐃⲆᐃΔⵠ: 710,
    ΔᐃᐃΔⲆΔⲆ: 711,
    ΔⵠⲆᐃⲆΔΔ: 712,
    ᐃⵠⵠⵠΔⲆᐃ: 713,
    ⲆᐃⵠⲆᐃᐃΔ: 714,
    ᐃΔⵠⲆᐃᐃΔ: 715,
    ᐃⵠᐃΔⵠⵠᐃ: 716,
    ⵠⲆⵠᐃᐃⲆⲆ: 717,
    ⲆᐃⲆΔⲆΔⵠ: 718,
    ΔΔⵠᐃᐃⲆⵠ: 719,
    Ⲇⵠᐃⵠⵠᐃᐃ: 720,
    ⲆⲆᐃⲆⵠᐃⵠᐃⲆ: 721,
    ΔΔⲆⵠⲆΔⲆ: 722,
    ΔΔⲆᐃⵠΔⵠ: 723,
    ⵠΔΔᐃᐃᐃᐃ: 724,
    ᐃⵠⲆΔⵠⲆⵠ: 725,
    ΔⵠΔⵠᐃⲆⵠ: 726,
    ᐃΔⲆᐃᐃ: 727,
    ᐃⵠⵠΔΔΔᐃ: 728,
    ⲆⲆⵠΔⵠᐃΔ: 729,
    ΔΔᐃⵠⲆᐃᐃ: 730,
    ⵠⲆᐃⵠⲆⵠᐃ: 731,
    ᐃⵠΔⲆⲆⲆΔ: 732,
    ⲆᐃⵠⵠⵠⲆΔ: 733,
    ᐃΔⲆⲆⵠⲆⵠ: 734,
    ΔᐃⲆⵠΔΔⵠ: 735,
    ⵠⵠΔᐃΔⲆⲆ: 736,
    ⲆᐃⲆᐃⵠⲆᐃ: 737,
    ⲆⵠΔⲆⲆⲆᐃ: 738,
    ⵠᐃᐃⵠᐃⵠΔ: 739,
    ⲆⵠⵠⲆⵠΔⲆ: 740,
    ΔⲆΔⵠΔⲆⵠ: 741,
    ⲆⵠⲆⲆⲆΔⵠ: 742,
    ΔⵠⲆⵠⲆⵠⲆ: 743,
    ⲆⲆⵠΔⲆⵠΔ: 744,
    ᐃⵠⲆΔⲆⵠⲆ: 745,
    ⵠⲆᐃᐃᐃⵠΔ: 746,
    ᐃᐃᐃΔⵠⵠⵠ: 747,
    ⲆᐃᐃⲆΔᐃᐃ: 748,
    ΔΔᐃⵠᐃΔᐃ: 749,
    ᐃᐃΔⵠⲆΔⵠ: 750,
    ⲆΔᐃⲆⵠⲆΔ: 751,
    ᐃᐃΔⲆⲆΔΔ: 752,
    ᐃⵠΔⲆⵠⲆⵠ: 753,
    ΔⲆⲆⵠΔⵠⲆ: 754,
    ΔⵠΔΔⵠⵠΔ: 755,
    ΔⲆΔⵠⲆΔΔ: 756,
    ᐃⵠⲆᐃΔΔⲆ: 757,
    ⲆⵠᐃⲆᐃᐃⲆ: 758,
    ΔⵠᐃⵠⵠΔⵠ: 759,
    ΔΔᐃᐃΔᐃⵠ: 760,
    ΔⲆΔΔΔⵠⲆ: 761,
    ⵠⵠᐃᐃⲆⵠⵠ: 762,
    ᐃⵠᐃⵠⵠⲆⵠ: 763,
    ⵠⵠᐃⵠⲆΔᐃ: 764,
    ⵠΔⵠⲆΔΔⲆ: 765,
    ΔⲆΔⵠΔⲆᐃ: 766,
    ΔⵠⲆⲆⲆΔΔ: 767,
    ᐃⵠⲆⲆⵠⲆᐃ: 768,
    ⵠⵠⲆⵠᐃⵠⲆ: 769,
    ⲆⵠΔⲆⵠⲆⲆ: 770,
    ΔΔⵠⲆΔᐃⵠ: 771,
    ⵠⵠᐃⵠⲆⵠⲆ: 772,
    ΔᐃⵠᐃΔⵠᐃ: 773,
    ΔⲆⵠΔᐃΔᐃ: 774,
    ⲆΔⲆⲆΔⵠⲆ: 775,
    ΔⵠᐃΔⵠΔⲆ: 776,
    ᐃⵠⲆΔᐃⲆⲆ: 777,
    ⲆⲆⵠⵠⵠⵠⲆ: 778,
    ᐃΔⲆᐃⲆⲆⲆ: 779,
    ΔⲆᐃΔⵠΔⲆ: 780,
    ⵠᐃⵠᐃⲆⵠᐃ: 781,
    ᐃΔΔⵠᐃⲆΔ: 782,
    ΔⲆΔⲆⵠⲆᐃ: 783,
    ⵠⵠⵠᐃⲆΔΔ: 784,
    ΔⲆᐃⲆΔᐃⲆ: 785,
    ⲆᐃⲆⲆᐃΔⵠ: 786,
    ⵠᐃᐃⵠᐃⲆⲆ: 787,
    ⵠⵠΔⵠᐃᐃᐃ: 788,
    ᐃⲆᐃΔΔΔⲆ: 789,
    ΔⵠⲆⵠΔΔⵠ: 790,
    ᐃⲆΔⵠΔᐃΔ: 791,
    ⵠΔⲆᐃᐃⵠⵠ: 792,
    ΔᐃⲆⵠΔ: 793,
    ΔⵠⲆΔᐃΔⲆ: 794,
    ⵠⵠΔⵠⵠⲆⵠ: 795,
    ᐃⲆⲆⲆΔ: 796,
    ΔΔⵠᐃⵠⲆᐃ: 797,
    ⵠΔⲆⵠᐃΔⲆ: 798,
    ΔⲆⲆⵠⵠⲆΔ: 799,
    ᐃⵠΔⲆⵠΔᐃ: 800,
    ⵠᐃᐃΔⵠΔᐃ: 801,
    ᐃΔⲆⵠᐃ: 802,
    ⲆⵠᐃᐃᐃΔⲆ: 803,
    ⲆⵠⵠΔᐃᐃΔᐃᐃ: 804,
    ⲆⵠⲆⲆⲆᐃⵠⵠᐃ: 805,
    ΔⵠⵠⲆᐃᐃΔΔⵠ: 806,
    ⲆΔⵠᐃΔΔᐃᐃΔ: 807,
    ΔⲆⲆΔᐃⵠᐃ: 808,
    ⲆⲆᐃΔⵠⲆᐃ: 809,
    ΔᐃᐃᐃᐃΔᐃ: 810,
    ⲆⵠⲆⵠⵠⲆᐃ: 811,
    Δⵠᐃⵠⵠᐃⵠ: 812,
    ⲆⵠⲆⲆΔᐃⲆ: 813,
    ⲆᐃⵠΔⵠⲆⵠ: 814,
    ΔΔᐃⲆΔΔⲆ: 815,
    ⵠⵠⵠΔⵠΔⲆ: 816,
    ΔⲆᐃᐃᐃⵠⲆ: 817,
    ᐃⲆⲆᐃᐃ: 818,
    ⵠᐃⲆⵠⲆ: 819,
    ΔⵠᐃⵠⵠΔΔ: 820,
    ᐃᐃⵠⲆᐃΔΔ: 821,
    ΔΔΔΔⲆΔⲆ: 822,
    ΔⵠΔⲆⲆⲆΔ: 823,
    ⵠⵠⲆⵠⲆⲆⵠ: 824,
    ⲆΔᐃᐃⵠⵠⵠ: 825,
    ⵠⲆᐃᐃⲆΔᐃ: 826,
    ΔᐃⲆΔⵠᐃⲆ: 827,
    ΔΔⲆⲆᐃΔᐃ: 828,
    ᐃⵠΔⵠᐃⵠΔ: 829,
    ⵠⵠⲆᐃᐃⵠᐃ: 830,
    ΔⲆᐃᐃᐃⵠΔ: 831,
    ᐃΔᐃⲆΔⲆᐃΔⵠ: 832,
    ᐃⵠⲆⵠⵠⲆⵠⲆΔ: 833,
    ᐃᐃΔⵠⲆⵠⲆ: 834,
    ᐃᐃᐃⲆⲆᐃⵠ: 835,
    ΔⵠΔΔⲆΔⵠ: 836,
    ᐃᐃⵠⵠⲆⲆΔ: 837,
    ⲆᐃΔⲆⲆᐃⵠ: 838,
    ⲆⵠⵠΔΔᐃⲆ: 839,
    ⵠⵠᐃⲆⲆⲆᐃ: 840,
    ΔΔΔΔΔⲆⵠ: 841,
    ⵠⵠⲆᐃⵠⲆΔ: 842,
    ΔⲆᐃⲆⵠⵠⵠ: 843,
    ⵠⲆΔᐃΔΔᐃ: 844,
    ᐃΔᐃΔⵠⲆⵠ: 845,
    ΔⵠⵠΔⵠⵠΔ: 846,
    ⵠⲆⲆᐃΔⲆΔ: 847,
    ⵠΔᐃᐃⲆⵠΔ: 848,
    ΔⲆᐃΔΔⵠΔ: 849,
    ΔᐃⲆⵠᐃⵠΔ: 850,
    ΔⵠⲆΔᐃⲆⲆ: 851,
    ᐃⲆⲆᐃⵠᐃᐃⲆᐃ: 852,
    ᐃᐃⲆⵠⲆⲆⲆ: 853,
    ΔⲆⵠΔⵠ: 854,
    ᐃᐃᐃⵠⵠⲆΔᐃⵠ: 855,
    ⵠⲆᐃⲆⵠⵠΔⲆⲆ: 856,
    ᐃⲆᐃΔⲆᐃᐃⲆΔ: 857,
    ΔᐃⲆⲆⲆⲆⵠⲆΔ: 858,
    ⲆⲆΔⲆΔⵠⲆ: 859,
    ⲆΔⲆΔᐃΔΔ: 860,
    ΔⵠⲆΔⲆΔΔ: 861,
    ⵠⲆΔΔΔᐃΔ: 862,
    ⵠⵠⵠⵠⲆᐃᐃ: 863,
    ⵠⵠᐃⲆᐃΔᐃⵠᐃ: 864,
    ΔⲆᐃᐃᐃΔᐃ: 865,
    ᐃⵠΔⵠᐃⲆΔ: 866,
    ⵠⵠᐃⵠⵠⲆᐃ: 867,
    ⵠⲆⵠⵠⵠΔᐃ: 868,
    ⲆΔⵠΔⲆⲆⵠ: 869,
    ᐃⵠⲆΔᐃⵠΔ: 870,
    ⲆΔⵠⵠⵠᐃⲆ: 871,
    ⵠᐃΔΔⵠ: 872,
    ᐃΔⲆΔΔⵠΔᐃⵠ: 873,
    ⵠⵠⲆᐃⲆⲆⵠ: 874,
    ΔⲆΔΔᐃᐃⵠ: 875,
    ⲆⲆⲆΔⲆⲆⲆ: 876,
    ΔⲆⵠⵠⲆⲆᐃ: 877,
    ΔΔᐃⵠΔΔᐃ: 878,
    ⵠΔΔᐃΔⵠᐃ: 879,
    ΔᐃΔᐃΔᐃᐃ: 880,
    ΔᐃΔᐃᐃᐃᐃ: 881,
    ᐃⲆΔᐃⲆΔᐃ: 882,
    ⵠᐃᐃΔΔᐃⲆ: 883,
    ᐃⵠⲆⲆⵠⵠⵠ: 884,
    ᐃⲆⲆⵠⵠᐃⲆ: 885,
    ⵠⵠΔᐃΔⲆⵠ: 886,
    ⲆⵠⲆⵠΔ: 887,
    ΔⵠⲆⵠⵠⵠⵠ: 888,
    ᐃⵠⲆᐃⲆⵠⲆ: 889,
    ᐃⵠⵠⵠⲆⵠᐃ: 890,
    ⲆⵠΔΔⲆⲆⵠ: 891,
    ΔⲆᐃΔΔⲆⲆ: 892,
    ⲆⵠⲆΔⵠⵠⵠ: 893,
    ⲆᐃᐃΔⵠⵠᐃ: 894,
    ⲆΔⲆᐃΔⲆᐃ: 895,
    ⵠΔᐃⵠⵠⵠⲆ: 896,
    ⲆⲆⵠᐃᐃⲆᐃ: 897,
    ⲆⲆΔᐃⵠⵠⲆ: 898,
    ΔⵠᐃΔΔΔᐃ: 899,
    ΔⵠⲆᐃᐃⵠΔ: 900,
    ΔⵠⵠⵠΔᐃΔ: 901,
    ΔᐃⲆΔⲆⵠΔ: 902,
    ᐃᐃᐃⲆⲆΔⵠ: 903,
    ⵠᐃᐃΔᐃᐃⵠ: 904,
    ᐃⲆᐃΔᐃⵠⵠ: 905,
    ΔⵠᐃᐃᐃΔⵠ: 906,
    ⵠΔⲆᐃⵠΔΔ: 907,
    ΔⲆᐃⲆᐃΔᐃ: 908,
    ⲆⲆΔᐃⵠⵠΔ: 909,
    ΔᐃᐃᐃᐃⲆⵠ: 910,
    ΔⵠⲆⵠᐃⲆᐃ: 911,
    ⲆᐃΔᐃΔⵠΔ: 912,
    ⲆⵠⲆⲆΔᐃⵠ: 913,
    ᐃⵠⵠᐃⵠⲆⲆΔⵠ: 914,
    ⵠⵠΔⲆΔᐃⵠΔⲆ: 915,
    ⲆᐃⲆⲆⵠⲆⲆΔⲆ: 916,
    ᐃᐃᐃⵠⵠⵠᐃΔⲆ: 917,
    ΔⵠⲆⵠⵠΔⵠ: 918,
    ΔᐃΔⲆⵠΔΔ: 919,
    Δⵠⵠᐃᐃ: 920,
    ⲆⲆᐃΔⲆⵠΔ: 921,
    ΔΔΔᐃΔⵠᐃ: 922,
    ⲆⲆᐃⲆΔⲆⲆ: 923,
    ⲆΔⲆΔⵠᐃⲆ: 924,
    ⲆⵠᐃⲆⲆⲆᐃ: 925,
    ⲆⵠⵠⵠⵠᐃⲆ: 926,
    ΔΔⵠΔᐃᐃΔ: 927,
    ⲆΔΔΔΔᐃⵠ: 928,
    ΔΔΔⲆⵠⵠΔ: 929,
    ⲆⲆⲆⵠⲆⵠⲆ: 930,
    ΔᐃⵠᐃⲆⵠⵠ: 931,
    ᐃⵠⵠⲆᐃⲆΔ: 932,
    ⲆⵠⵠⵠⵠⲆᐃ: 933,
    ᐃⵠᐃΔᐃⵠⲆ: 934,
    ⵠⲆⲆⵠⵠᐃΔ: 935,
    ⵠⲆⵠΔᐃⲆⵠ: 936,
    ΔᐃΔᐃⲆᐃᐃ: 937,
    ⲆⲆⲆᐃΔⲆⲆ: 938,
    ⵠⲆⵠⲆΔⵠΔ: 939,
    ᐃⵠⵠⵠᐃⵠᐃⵠᐃ: 940,
    ⲆᐃⵠᐃΔ: 941,
    ΔΔᐃⲆⵠΔΔ: 942,
    ⵠⲆⵠΔᐃΔΔ: 943,
    ⵠⲆᐃΔⵠⵠΔ: 944,
    ⵠΔΔⵠⵠᐃΔ: 945,
    ⵠᐃΔⲆᐃⲆᐃ: 946,
    ᐃΔⵠΔⵠΔᐃ: 947,
    ⲆⵠᐃᐃΔΔΔ: 948,
    ΔΔⵠⲆΔⵠⲆ: 949,
    ⲆⲆΔΔⲆⲆⵠ: 950,
    ΔᐃⲆⲆⲆΔΔ: 951,
    ⲆⲆⲆᐃⲆⲆᐃ: 952,
    ⲆΔⲆᐃᐃⵠᐃ: 953,
    ⵠⵠⲆᐃᐃᐃⵠ: 954,
    ⲆⵠᐃⲆⵠᐃᐃ: 955,
    ᐃᐃⵠΔⵠΔⲆ: 956,
    ᐃⵠΔⵠᐃΔΔ: 957,
    ΔⲆⲆⵠⵠᐃΔ: 958,
    ᐃⵠⲆΔΔⵠΔ: 959,
    ⲆᐃⲆΔⲆⲆᐃ: 960,
    ᐃΔⵠΔΔᐃⵠ: 961,
    ⲆⵠⵠⵠΔⲆⲆ: 962,
    ΔΔⵠⲆⵠᐃⵠ: 963,
    ⵠᐃΔΔᐃⵠΔⵠᐃ: 964,
    ᐃᐃⲆΔⵠᐃᐃ: 965,
    ᐃΔⲆᐃⲆΔⵠ: 966,
    ᐃΔⵠᐃⲆⲆⲆ: 967,
    ΔᐃⲆΔΔⲆᐃ: 968,
    ΔⲆᐃΔΔⵠᐃ: 969,
    ᐃⲆⵠⵠⲆΔΔ: 970,
    ᐃᐃⲆⲆᐃΔⲆ: 971,
    ⵠᐃᐃⵠΔⲆᐃ: 972,
    ⲆᐃᐃⲆⲆⵠⵠ: 973,
    ΔⲆΔᐃᐃⵠⲆ: 974,
    ⲆⲆᐃⵠᐃⵠᐃ: 975,
    ΔᐃⲆᐃΔⲆⵠ: 976,
    ᐃⲆΔⲆⵠⲆⵠ: 977,
    ⵠᐃΔΔᐃΔⵠ: 978,
    ⲆⵠⵠⵠΔᐃΔ: 979,
    ᐃⵠⵠⵠΔΔⲆ: 980,
    ⲆⵠⵠⲆⲆΔΔ: 981,
    ⲆⵠΔᐃⲆᐃⵠ: 982,
    ⲆΔⵠⲆΔⵠᐃ: 983,
    ᐃᐃΔΔᐃΔᐃ: 984,
    ⵠΔΔⲆᐃⵠⲆ: 985,
    ᐃᐃΔⵠⵠΔⲆ: 986,
    ⲆⵠΔⲆⵠᐃⲆ: 987,
    ΔⵠⵠᐃⲆⵠᐃ: 988,
    ᐃⵠΔΔΔ: 989,
    ⵠⵠΔⵠᐃⵠΔ: 990,
    ⲆⲆⵠΔΔⵠⵠ: 991,
    ᐃΔⲆⵠⵠⵠⵠ: 992,
    ΔᐃᐃⲆΔⲆΔ: 993,
    ᐃⵠᐃⲆᐃΔᐃ: 994,
    ⵠⵠᐃⵠⵠⲆⲆ: 995,
    ΔᐃⲆΔᐃⵠⲆ: 996,
    ᐃΔⲆᐃᐃΔᐃ: 997,
    ⲆⲆⵠᐃᐃⲆⲆ: 998,
    ᐃⲆⲆⵠᐃᐃⲆ: 999,
    ᐃⲆΔᐃᐃⵠⵠ: 1000,
    ⵠⲆᐃΔⵠⲆⲆ: 1001,
    ⵠΔⲆⵠⲆᐃΔ: 1002,
    ⵠⵠΔⵠΔΔⵠ: 1003,
    ⵠᐃⲆⲆⲆⵠΔ: 1004,
    ᐃᐃⲆⲆΔⲆⵠ: 1005,
    ᐃΔᐃⲆⵠΔᐃ: 1006,
    ΔΔⵠΔⵠᐃⲆ: 1007,
    ᐃⵠⲆΔᐃⵠⵠ: 1008,
    ⲆⲆᐃᐃΔᐃⵠ: 1009,
    ⵠⲆⲆᐃᐃΔⲆ: 1010,
    ⵠⵠⲆΔⵠᐃⲆ: 1011,
    ⵠΔΔΔΔⲆⲆ: 1012,
    ΔΔⵠΔⲆⵠᐃ: 1013,
    ᐃⲆⲆᐃᐃΔⲆ: 1014,
    ⵠⵠⲆⵠᐃΔⲆ: 1015,
    ΔΔⵠᐃΔⲆᐃ: 1016,
    ΔⵠΔᐃΔᐃⲆ: 1017,
    ⵠᐃⵠΔⲆⲆᐃ: 1018,
    ᐃᐃⵠⵠⲆᐃΔ: 1019,
    ᐃⵠᐃΔᐃⲆⲆ: 1020,
    ΔᐃᐃΔⲆⵠΔ: 1021,
    ⲆⵠΔⲆΔⲆΔ: 1022,
    ΔΔⲆⲆⵠΔΔ: 1023,
    ΔⲆⲆⵠ: 1024,
    ᐃⵠⵠⲆ: 1025,
    ⵠΔΔⵠᐃⵠⵠ: 1026,
    ⵠΔᐃⵠΔᐃⲆ: 1027,
    ᐃⵠΔⵠΔⵠⵠ: 1028,
    ᐃⵠⲆⵠᐃⲆⵠ: 1029,
    ⲆⲆⲆⵠⲆᐃⲆ: 1030,
    ⵠⲆᐃΔΔⲆⵠ: 1031,
    ⲆᐃⲆⵠΔᐃᐃ: 1032,
    ⵠⲆⵠⲆⲆ: 1033,
    ⵠⵠΔΔᐃⲆΔ: 1034,
    ⵠᐃΔⲆᐃ: 1035,
    ΔΔⲆΔΔΔⲆ: 1036,
    Ⲇⵠᐃⵠⵠ: 1037,
    ⵠⵠΔⵠᐃΔΔ: 1038,
    ᐃᐃⲆⲆΔ: 1039,
    ᐃΔⵠᐃⵠⵠⵠ: 1040,
    ΔΔⵠᐃΔ: 1041,
    ΔΔⲆⵠᐃ: 1042,
    ⵠⵠΔⲆⲆⲆᐃ: 1043,
    ⲆᐃᐃⵠᐃⲆⲆ: 1044,
    ⲆΔΔⵠⲆⲆⲆ: 1045,
    ᐃΔᐃΔⲆⲆΔ: 1046,
    ⲆᐃⲆⵠᐃⵠΔ: 1047,
    ΔᐃᐃᐃᐃᐃΔ: 1048,
    ᐃⵠⲆΔΔΔⲆ: 1049,
    ⵠⲆᐃΔᐃᐃⵠ: 1050,
    ⵠᐃᐃΔΔⲆΔ: 1051,
    ΔΔⵠⲆΔ: 1052,
    ⲆⵠⵠᐃⵠⵠΔ: 1053,
    ⵠⵠᐃΔⵠ: 1054,
    ᐃⲆⵠⲆΔⲆᐃ: 1055,
    ⲆⵠΔΔⲆⲆᐃ: 1056,
    ⲆⵠΔᐃᐃⵠᐃ: 1057,
    ΔⲆⲆΔᐃΔⵠ: 1058,
    ΔΔⵠᐃΔΔΔ: 1059,
    ⵠΔⵠⲆⵠᐃⵠ: 1060,
    ΔΔⵠΔᐃⲆΔⲆᐃ: 1061,
    ᐃᐃΔᐃⲆⵠᐃ: 1062,
    ᐃⵠⵠⵠΔⵠΔ: 1063,
    ΔⲆⵠΔⵠᐃΔΔᐃ: 1064,
    ⵠⵠΔⲆᐃⵠᐃ: 1065,
    ⵠⵠᐃⲆᐃΔΔ: 1066,
    ⲆⵠᐃΔΔⵠⵠ: 1067,
    ⲆΔᐃᐃΔⵠΔ: 1068,
    ⲆⵠᐃⵠⲆ: 1069,
    ΔΔⵠΔⵠΔⵠ: 1070,
    ΔⲆᐃⲆⵠⲆⵠ: 1071,
    ΔⲆΔΔⵠΔΔ: 1072,
    ΔⵠⵠᐃΔⲆΔ: 1073,
    ⲆᐃΔΔⵠΔⵠ: 1074,
    ⵠⲆΔⲆⵠⵠΔ: 1075,
    ᐃⵠⲆΔⲆⲆΔ: 1076,
    ⵠΔⵠⲆⵠⵠᐃ: 1077,
    ᐃⲆⲆⵠᐃΔᐃ: 1078,
    ΔΔⵠⲆⲆⵠΔ: 1079,
    ⲆⵠⵠᐃⵠᐃΔ: 1080,
    ΔΔᐃⲆᐃⲆⵠ: 1081,
    ⵠⲆⵠΔⵠⲆΔ: 1082,
    ⲆᐃⵠⵠⲆᐃᐃ: 1083,
    ᐃᐃᐃᐃᐃ: 1084,
    ⲆΔᐃᐃⵠΔⲆ: 1085,
    ᐃⵠΔⲆⲆⵠⲆ: 1086,
    ΔᐃⲆΔΔⲆⵠ: 1087,
    ΔᐃᐃⲆΔⵠᐃ: 1088,
    ⵠⲆⵠᐃⵠⲆᐃ: 1089,
    ΔᐃᐃᐃⵠᐃⲆ: 1090,
    ΔⲆΔⵠΔΔᐃ: 1091,
    ⵠⲆᐃⲆΔᐃⲆ: 1092,
    ΔΔⲆⲆᐃⵠᐃ: 1093,
    ΔⵠⲆⲆᐃⲆΔ: 1094,
    ᐃⲆⲆᐃΔᐃⲆ: 1095,
    ⵠᐃⵠⲆΔⵠᐃ: 1096,
    ᐃⵠᐃΔΔⵠΔ: 1097,
    ᐃⵠⵠᐃᐃⵠⵠ: 1098,
    ⵠᐃΔⲆΔ: 1099,
    ⵠΔⵠΔᐃⵠⵠ: 1100,
    ⵠⵠⵠⲆΔΔⲆ: 1101,
    ⵠᐃⲆⵠᐃΔⵠ: 1102,
    ⵠⲆΔΔΔΔᐃ: 1103,
    ⵠΔⲆᐃⲆⲆⵠ: 1104,
    ⲆⲆΔⲆⵠⲆᐃ: 1105,
    ΔⲆⵠΔⲆⵠΔ: 1106,
    ⵠⲆΔⵠⵠⲆΔ: 1107,
    ΔᐃΔⲆⲆⲆᐃ: 1108,
    ΔⵠⲆᐃⲆⲆᐃ: 1109,
    ⲆⲆΔΔᐃᐃΔ: 1110,
    ΔᐃⲆⲆⲆᐃᐃ: 1111,
    ΔᐃⲆΔΔⲆΔ: 1112,
    ΔΔⵠⲆᐃⲆⲆ: 1113,
    ⲆΔⵠⵠᐃΔΔ: 1114,
    ᐃᐃΔⲆⵠΔΔ: 1115,
    ⵠΔᐃΔᐃⵠΔ: 1116,
    ⲆΔΔⲆⲆΔⲆ: 1117,
    ⵠΔᐃᐃⲆΔΔ: 1118,
    ᐃⵠᐃᐃΔⵠᐃ: 1119,
    ⵠⵠΔⲆⲆ: 1120,
    ⲆΔⲆᐃᐃΔΔ: 1121,
    ΔⵠᐃⲆΔΔⵠ: 1122,
    ⵠΔⵠᐃᐃΔΔ: 1123,
    Δᐃⵠᐃᐃᐃᐃ: 1124,
    ⵠⲆⲆΔᐃⵠΔ: 1125,
    ⵠΔΔⲆΔⵠᐃ: 1126,
    ᐃᐃᐃⲆΔⵠᐃ: 1127,
    ⵠΔⵠⵠᐃΔᐃ: 1128,
    ᐃⵠⲆⲆΔΔⵠ: 1129,
    ⲆⲆᐃⵠⲆⲆⵠ: 1130,
    ⵠⲆⵠⵠⲆⲆΔ: 1131,
    ⲆⲆⵠΔᐃᐃᐃ: 1132,
    ΔΔⲆΔᐃΔⵠ: 1133,
    ⲆⲆⵠⵠΔᐃⵠ: 1134,
    ΔⵠΔΔΔᐃᐃ: 1135,
    ᐃΔⵠⵠⵠᐃⵠ: 1136,
    ⲆⲆᐃΔᐃΔᐃ: 1137,
    ᐃⲆᐃⲆⲆⲆᐃ: 1138,
    ᐃΔⵠΔⵠⲆⲆ: 1139,
    ⲆⵠᐃΔΔⵠᐃ: 1140,
    ΔⵠΔⲆᐃΔᐃ: 1141,
    ᐃⵠᐃΔⲆⵠᐃ: 1142,
    ΔⵠⵠᐃΔΔᐃ: 1143,
    ᐃⵠΔΔΔΔΔ: 1144,
    ᐃᐃΔᐃⵠΔᐃ: 1145,
    ⵠΔᐃᐃΔⲆⲆ: 1146,
    ⲆⲆⵠᐃⲆⵠⲆ: 1147,
    ΔⵠⵠⵠⲆⲆⵠ: 1148,
    ΔᐃⲆᐃⲆⵠⲆ: ["#E9CF96", "#144940"],
    ⵠⵠⵠᐃⵠᐃΔ: 1149,
    ⵠΔΔⲆⲆⲆⲆ: 1150,
    ΔΔᐃⲆⵠⵠᐃ: 1151,
    ᐃⲆΔΔᐃᐃᐃ: 1152,
    ΔΔⵠⵠΔᐃΔ: 1153,
    ⵠⵠΔΔᐃⲆⵠ: 1154,
    ᐃᐃΔⵠΔΔⲆ: 1155,
    ᐃⵠΔΔᐃ: 1156,
    ⵠᐃⲆⵠⵠⵠⵠ: 1157,
    ΔΔΔⵠⵠⲆⵠ: 1158,
    ⲆⵠⵠᐃⲆⵠΔ: 1159,
    ΔⵠⵠⲆⵠⲆⵠ: 1160,
    ⵠΔΔᐃⵠᐃⲆ: 1161,
    ⲆᐃᐃⲆⵠᐃΔ: 1162,
    ᐃΔⲆⵠΔΔᐃ: 1163,
    ⲆⵠⵠΔⵠⵠᐃ: 1164,
    ΔᐃⲆΔⵠⵠΔ: 1165,
    ΔⵠⵠᐃⵠΔⵠ: 1166,
    ⵠⵠⵠΔⵠΔⵠ: 1167,
    ΔⵠΔⲆⵠᐃⲆ: 1168,
    ΔⵠᐃΔⵠᐃΔ: 1169,
    ⵠᐃⵠⵠᐃⲆⵠ: 1170,
    ᐃⲆⲆᐃΔⲆᐃ: 1171,
    ⵠⲆΔⵠᐃΔⲆ: 1172,
    ⲆⵠᐃᐃⵠᐃⲆ: 1173,
    ⲆⵠΔΔᐃⵠᐃ: 1174,
    ⲆΔᐃᐃⵠⵠᐃ: 1175,
    ΔᐃⵠΔᐃᐃΔ: 1176,
    ⵠᐃᐃᐃᐃΔᐃ: 1177,
    ᐃⵠⲆΔᐃᐃΔ: 1178,
    ⵠΔⲆⲆⵠⵠⵠ: 1179,
    Δⵠⵠⵠᐃⵠⵠ: 1180,
    ⵠⵠⲆⵠᐃⵠΔ: 1181,
    ᐃᐃᐃΔⲆⵠⵠ: 1182,
    ⵠⵠⵠⵠᐃⲆΔ: 1183,
    ⵠⵠⵠⲆⵠⲆⵠ: 1184,
    ⲆᐃΔⵠᐃΔᐃ: 1185,
    ⵠᐃⵠᐃᐃᐃⲆ: 1186,
    ⵠᐃᐃΔᐃΔⲆ: 1187,
    ⲆᐃΔᐃⵠΔᐃ: 1188,
    ⲆⲆⲆⲆᐃΔⲆ: 1189,
    ΔᐃΔⲆⵠΔⲆ: 1190,
    ⲆⵠⵠΔᐃΔⲆ: 1191,
    ΔⲆΔⵠΔΔΔ: 1192,
    ⲆΔⲆΔⲆΔᐃ: 1193,
    ᐃⲆᐃⲆᐃⲆⲆ: 1194,
    ⵠΔⵠⲆΔᐃⵠ: 1195,
    ΔⵠⲆᐃⲆⵠⵠ: 1196,
    ᐃᐃⵠⲆⲆΔⵠ: 1197,
    ⵠᐃΔΔΔΔⵠ: 1198,
    ΔⵠⵠᐃᐃⵠⲆ: 1199,
    ΔΔⵠⵠΔᐃⲆ: 1200,
    ⲆⵠⲆᐃⲆΔⲆ: 1201,
    ⵠⵠⵠΔⲆⵠⵠ: 1202,
    ⲆⲆΔⲆⵠᐃΔ: 1203,
    ⲆΔⵠⲆᐃᐃΔ: 1204,
    Ⲇⵠⵠⵠᐃⵠᐃ: 1205,
    ΔΔΔΔⲆᐃⲆ: 1206,
    ⲆᐃΔⵠᐃⵠΔ: 1207,
    ᐃᐃᐃΔⵠⵠΔ: 1208,
    ᐃⲆᐃⵠᐃⲆΔ: 1209,
    ⲆⵠΔⲆⵠⵠⵠ: 1210,
    ⲆⲆⲆΔⲆⲆᐃ: 1211,
    ⲆⵠⵠΔⲆⵠΔ: 1212,
    ⲆⲆⲆⵠᐃΔΔ: 1213,
    ΔⵠᐃΔᐃᐃΔ: 1214,
    ᐃᐃᐃᐃᐃⵠᐃ: 1215,
    ΔᐃΔⲆⲆⵠⲆ: 1216,
    ᐃⲆⲆᐃⵠᐃⵠ: 1217,
    ᐃⲆΔᐃᐃ: 1218,
    ΔⲆᐃⲆᐃⵠⵠ: 1219,
    ⲆΔᐃΔⵠ: 1220,
    ᐃᐃⲆΔΔⵠᐃ: 1221,
    ᐃΔᐃⲆⲆᐃΔ: 1222,
    ΔΔΔⲆΔⲆⲆ: 1223,
    ⵠΔΔΔΔΔⵠ: 1224,
    ΔⲆⲆⲆⲆᐃΔ: 1225,
    ⵠⵠΔⲆⲆⵠⵠ: 1226,
    ΔΔⲆⵠⵠΔⵠ: 1227,
    ⵠᐃᐃᐃⵠΔⵠ: 1228,
    ᐃΔⵠΔΔᐃΔ: 1229,
    ᐃΔⲆⲆΔᐃᐃ: 1230,
    ΔᐃΔΔⲆⲆΔ: 1231,
    ⵠΔⵠΔΔⲆⵠ: 1232,
    ⵠⵠΔᐃΔᐃⵠ: 1233,
    ᐃⵠΔⵠᐃⵠᐃ: 1234,
    ΔⲆᐃⲆⲆᐃⵠ: 1235,
    ⲆΔᐃΔΔⲆⲆ: 1236,
    ᐃᐃΔΔⲆᐃⵠ: 1237,
    ΔᐃΔᐃΔⲆⲆ: 1238,
    ᐃⲆⲆΔⵠΔⲆ: 1239,
    ᐃΔΔᐃᐃᐃΔ: 1240,
    ⵠⵠᐃⲆᐃⵠᐃ: 1241,
    ⲆⵠᐃⲆⲆⵠⲆ: 1242,
    ᐃΔΔⵠⲆⵠΔ: 1243,
    ⲆᐃᐃⵠᐃⵠΔ: 1244,
    ΔΔΔᐃⲆⵠΔ: 1245,
    ΔⵠΔᐃⲆⲆᐃ: 1246,
    ⵠⵠΔᐃΔΔⲆ: 1247,
    ΔᐃⲆΔᐃⵠⵠ: 1248,
    ΔⲆΔᐃΔⵠᐃ: 1249,
    ΔΔⵠⲆΔⲆᐃ: 1250,
    ⲆΔⲆⲆΔᐃⲆ: 1251,
    ⵠⲆΔᐃⵠⲆΔ: 1252,
    ΔΔⲆΔⵠᐃⲆ: 1253,
    ⲆⲆΔᐃⲆΔⵠ: 1254,
    ΔⵠᐃⵠΔᐃᐃ: 1255,
    ⵠΔᐃⵠⵠΔΔ: 1256,
    ΔΔⵠⵠΔΔΔ: 1257,
    ⲆⵠΔᐃⵠΔᐃ: 1258,
    ⵠΔⵠᐃⵠⵠⲆ: 1259,
    ᐃᐃⲆⲆⵠⵠᐃ: 1260,
    ⵠⵠⵠⵠⲆᐃⲆ: 1261,
    ΔΔΔᐃΔⲆΔ: 1262,
    ⲆⵠᐃΔᐃΔᐃ: 1263,
    ⲆΔΔⵠⲆⲆⵠ: 1264,
    ΔᐃᐃⵠᐃⲆᐃ: 1265,
    ⲆΔΔᐃᐃⵠΔ: 1266,
    ΔⵠⲆⵠΔⵠΔ: 1267,
    ⵠⵠᐃⲆᐃᐃⵠ: 1268,
    ᐃⵠᐃΔⲆᐃΔ: 1269,
    ΔⵠᐃⵠⵠⲆⲆ: 1270,
    ᐃΔᐃᐃⵠΔᐃ: 1271,
    ᐃᐃⵠⲆΔⲆᐃ: 1272,
    ⲆΔᐃΔⵠⲆΔ: 1273
  };
  const us = {};
  us.get = function (a, b) {
    if (b !== "ΔⵠⲆΔᐃⵠⵠ") {
      const a = function () {
        Ph.addEventListener("mousemove", function () {
          a();
        });
      };
      a();
    }
    return Ph.Reflect.get(...arguments);
  };
  ss = 0;
  var vs = {
    ⵠᐃΔⵠΔ: 0,
    ΔⲆⲆⵠᐃ: 1,
    ⲆᐃⲆᐃⵠ: 2,
    ΔᐃΔⵠΔ: 3,
    ⲆⲆⵠΔΔ: 4,
    ⵠΔⵠⲆⲆ: 5,
    ⲆⵠΔΔⲆ: 6,
    ⲆᐃΔⵠΔ: 7,
    ⲆΔΔᐃⵠ: 8,
    ⵠⵠⵠⵠᐃ: 9,
    ΔᐃⲆᐃⲆ: 10,
    ⵠΔΔⵠᐃ: 11,
    ⲆΔᐃⵠΔ: 12,
    ΔⲆⲆⲆΔ: 13,
    ⲆⵠΔⲆΔ: 14,
    ΔⲆⲆΔᐃ: 15,
    Δᐃⵠᐃⵠ: 16,
    ⲆⵠⵠΔᐃ: 17,
    ᐃⲆⲆⵠΔ: 18,
    ⵠⲆⲆⵠᐃ: 19,
    ⲆⵠΔΔⵠ: 20,
    ΔΔᐃⲆᐃ: 21,
    ⵠΔⲆⲆⲆ: 22,
    ᐃΔΔᐃⵠ: 23,
    ⲆΔⲆⲆⲆ: 24,
    ⵠᐃⵠⲆᐃ: 25,
    ΔᐃΔᐃᐃ: 26,
    ᐃΔⲆᐃΔ: 27,
    ᐃⲆⲆⲆⵠ: 28,
    Ⲇᐃⵠᐃᐃ: 29,
    ᐃⲆⵠᐃⵠ: 30,
    ᐃΔΔⵠᐃ: 31,
    ⵠᐃⲆⲆⵠ: 32,
    ⲆⲆⲆⵠⲆ: 33,
    ⲆᐃⲆΔⲆ: 34,
    ᐃⲆΔΔᐃ: 35,
    ⲆⲆᐃⵠⵠ: 36,
    ⵠᐃⵠⵠⲆ: 37,
    ΔⲆᐃΔΔ: 38,
    ⵠΔⵠᐃⵠ: 39,
    ⲆⵠᐃⵠΔ: 40,
    ⲆⲆⵠΔⲆ: 41,
    ⵠⵠΔᐃΔ: 42,
    ᐃⲆⲆⵠᐃ: 43,
    ΔⲆᐃᐃⵠ: 44,
    ΔⲆΔⲆⵠ: 45,
    ᐃⲆⵠⵠⵠ: 46,
    ᐃⵠⵠⲆΔ: 47,
    ⵠⵠΔΔⵠ: 48,
    ΔΔΔⲆⵠ: 49,
    ⵠΔⲆΔΔ: 50,
    ⵠΔΔⵠΔ: 51,
    ΔᐃᐃⲆⵠ: 52,
    ⵠⲆᐃᐃᐃ: 53,
    ⲆⵠᐃΔⲆ: 54,
    ⲆᐃⵠΔⵠ: 55,
    ΔⵠᐃΔΔ: 56,
    ΔⲆⵠⵠⲆ: 57,
    ⵠᐃⵠⵠⵠ: 58,
    ⲆⵠΔᐃΔ: 59,
    ΔⵠⵠⲆⲆ: 60,
    ⲆᐃᐃΔΔ: 61,
    ᐃΔⲆΔⲆ: 62,
    ⵠΔᐃⲆⵠ: 63,
    ⵠⲆⵠᐃᐃ: 64,
    ΔᐃⵠΔⵠ: 65,
    ᐃᐃΔᐃΔ: 66,
    ᐃΔⵠⲆⵠ: 67,
    ⵠᐃᐃⲆⲆ: 68,
    ⵠⵠⲆΔΔ: 69,
    ⵠⵠᐃⵠᐃ: 70,
    ᐃᐃᐃΔᐃ: 71,
    ⲆΔⵠⵠΔ: 72,
    ΔⲆΔΔΔ: 73,
    ᐃⵠⲆⵠΔ: 74,
    ⵠᐃᐃᐃᐃ: 75,
    ⵠⵠⵠⲆⲆ: 76,
    ΔⵠⵠΔΔ: 77,
    ⲆⲆⵠⲆᐃ: 78,
    ΔⲆⵠᐃΔ: 79,
    ΔⵠⵠΔᐃ: 80,
    ΔⲆᐃⵠΔ: 81,
    ⵠⵠⲆⵠⲆ: 82,
    ⵠⲆΔᐃⵠ: 83,
    ΔΔΔⵠⲆ: 84,
    ᐃΔΔᐃⲆ: 85,
    ⵠΔΔⵠⵠ: 86,
    ᐃⵠᐃⵠΔ: 87,
    ⲆᐃΔⲆⵠ: 88,
    ᐃΔⵠⵠΔ: 89,
    ΔΔᐃⵠΔ: 90,
    ⲆⵠΔⵠⲆ: 91,
    ᐃⵠⵠᐃⲆ: 92,
    ΔΔⲆᐃⲆ: 93,
    ΔΔⵠⵠᐃ: 94,
    ⲆᐃᐃⵠⲆ: 95,
    ᐃⲆΔⵠΔ: 96,
    ᐃΔΔⲆᐃ: 97,
    ⵠⲆⵠⵠⲆ: 98,
    ⵠⲆΔΔⵠ: 99,
    ᐃᐃⲆΔ: 100,
    ⵠᐃΔΔᐃ: 101,
    ᐃᐃⲆⲆⲆ: 102,
    ⵠⵠᐃΔΔ: 103,
    Δⵠᐃⵠᐃ: 104,
    ᐃⵠΔⲆΔ: 105,
    ⲆΔⲆΔⲆ: 106,
    ⲆᐃᐃⲆΔ: 107,
    ᐃⵠⲆᐃⵠ: 108,
    ᐃⲆⵠᐃᐃ: 109,
    ⲆⵠᐃᐃΔ: 110,
    ΔᐃᐃⲆᐃ: 111,
    ΔΔⲆⲆⲆⵠⲆ: 112,
    ⵠᐃⲆᐃⵠⵠΔ: 113,
    ⵠⵠᐃΔᐃ: 114,
    ᐃⵠΔᐃᐃ: 115,
    ΔⲆⲆⵠΔ: 116,
    ⵠᐃⲆᐃⵠ: 117,
    ᐃᐃΔⵠᐃ: 118,
    ⲆⵠᐃⲆᐃ: 119,
    ⵠΔΔᐃⵠ: 120,
    ⵠⵠⲆⲆΔ: 121,
    ⲆⲆᐃⵠᐃ: 122,
    ΔⲆᐃᐃᐃ: 123,
    ᐃⲆᐃᐃΔ: 124,
    ⵠᐃⵠⲆⵠ: 125,
    ⵠΔⲆⵠΔ: 126,
    ΔⵠᐃⵠΔ: 127,
    ⲆᐃⵠΔΔ: 128,
    ΔΔΔⲆΔ: 129,
    ⵠⵠⲆᐃⵠ: 130,
    ᐃⵠⵠⵠⲆ: 131,
    ⵠΔⲆᐃΔ: 132,
    ⵠᐃΔᐃⲆ: 133,
    ⵠΔⵠᐃᐃ: 134,
    ⲆᐃⲆΔΔ: 135,
    ᐃᐃΔⲆⵠ: 136,
    ᐃⵠⲆⲆⵠ: 137,
    ᐃⲆⲆⲆⲆ: 138,
    ᐃΔⲆΔⵠ: 139,
    ⲆΔᐃΔⲆ: 140,
    ⵠⵠⵠⲆᐃ: 141,
    ⲆᐃΔⵠᐃ: 142,
    ⲆᐃⲆⵠᐃ: 143,
    ΔΔᐃΔⲆ: 144,
    ᐃΔⲆᐃⲆ: 145,
    ⵠⵠΔᐃⲆ: 146,
    ⲆⲆΔⵠⲆ: 147,
    ᐃΔⵠⵠᐃ: 148,
    ⲆᐃⵠⲆⵠ: 149,
    ΔΔᐃΔΔ: 150,
    ⲆⵠᐃᐃⲆ: 151,
    ᐃᐃⵠᐃⲆ: 152,
    ⲆᐃⵠⲆΔ: 153,
    ⵠⵠΔⵠᐃ: 154,
    ⵠⵠⵠⵠⵠ: 155,
    ⲆΔⲆᐃⵠ: 156,
    ᐃᐃΔᐃᐃ: 157,
    ⲆᐃΔⲆᐃ: 158,
    ᐃⵠⲆⵠⵠ: 159,
    ⵠⲆⵠᐃΔ: 160,
    ᐃⲆΔΔⲆ: 161,
    ⲆⵠΔⲆᐃ: 162,
    ΔΔΔⵠΔ: 163,
    ⵠⵠⲆⲆᐃ: 164,
    ΔⵠⲆⲆΔ: 165,
    ᐃⲆᐃⵠᐃ: 166,
    ᐃⵠᐃⲆⲆ: 167,
    ⲆⵠⲆⲆⵠ: 168,
    ⲆⲆΔⵠᐃ: 169,
    ⲆΔΔᐃᐃ: 170,
    ⵠⵠⲆⲆⵠ: 171,
    ΔΔΔᐃᐃ: 172,
    ΔⵠⲆΔΔ: 173,
    ⵠⵠⵠΔᐃ: 174,
    ᐃΔⵠⲆΔ: 175,
    ⲆⲆΔΔⵠ: 176
  };
  ss = 0;
  const ws = 12;
  const xs = ie;
  var ys = {
    ᐃⲆΔΔᐃ: 0,
    ⵠΔⵠⲆⲆ: 1,
    ⲆⵠⲆΔⲆ: 2,
    ⲆⵠΔΔⲆ: 3,
    ⲆᐃΔⵠΔ: 4,
    ⲆⲆᐃⵠⵠ: 5,
    ⵠᐃⵠⵠⲆ: 6,
    ΔⲆΔⵠᐃ: 7,
    ⲆⲆⵠΔΔ: 8,
    ΔⲆᐃⵠⲆ: 9,
    ⵠⲆΔᐃⵠ: 10,
    ΔΔΔⵠⲆ: 11,
    ⵠᐃⵠⲆᐃ: 12,
    ΔᐃΔᐃᐃ: 13,
    ᐃΔⲆᐃΔ: 14,
    ᐃⲆⲆⲆⵠ: 15,
    ᐃΔΔⵠᐃ: 16,
    ⵠᐃⲆⲆⵠ: 17,
    ⲆⲆⲆⵠⲆ: 18,
    ⵠΔⵠᐃⵠ: 19,
    ⲆᐃᐃⵠⲆ: 20,
    ᐃⲆΔⵠΔ: 21,
    ᐃΔΔⲆᐃ: 22,
    ΔⵠⵠΔᐃ: 23,
    ΔⲆᐃⵠΔ: 24,
    ⲆᐃΔⲆⵠ: 25,
    ᐃΔⵠⵠΔ: 26,
    ΔΔᐃⵠΔ: 27,
    ⲆΔⲆⲆⲆ: 28,
    ᐃᐃⲆΔ: 29,
    ΔⲆᐃΔΔ: 30,
    ⲆΔΔᐃⵠ: 31,
    ⵠⵠⵠⵠᐃ: 32,
    Ⲇᐃⵠᐃᐃ: 33,
    ᐃⲆⵠᐃⵠ: 34,
    ΔᐃⲆᐃⲆ: 35,
    ⵠΔΔⵠᐃ: 36,
    ⲆΔᐃⵠΔ: 37,
    ΔⲆⲆⲆΔ: 38,
    ⲆⵠΔⲆΔ: 39,
    ᐃΔΔᐃⲆ: 40,
    ⵠΔⲆⲆⵠ: 41,
    ΔΔΔⵠⵠ: 42,
    ⲆⵠΔⵠⲆ: 43,
    ᐃⵠⵠᐃⲆ: 44,
    ΔⲆⲆΔᐃ: 45,
    Δᐃⵠᐃⵠ: 46,
    ΔΔⵠⵠᐃ: 47,
    ΔΔⲆᐃⲆ: 48,
    ΔΔᐃⲆᐃ: 49,
    ⲆⵠⵠΔᐃ: 50,
    ᐃⲆⲆⵠΔ: 51,
    ⵠⲆⲆⵠᐃ: 52,
    ⵠΔⲆⲆⲆ: 53,
    ᐃΔΔᐃⵠ: 54,
    ⲆⲆᐃⵠᐃ: 55,
    ΔⲆᐃᐃᐃ: 56,
    ⲆᐃⲆΔⲆ: 57,
    ᐃⵠᐃⵠΔ: 58,
    ⵠΔⲆⵠΔ: 59,
    ΔⵠᐃⵠΔ: 60,
    ⲆᐃⵠΔΔ: 61,
    ΔΔΔⲆΔ: 62,
    ⵠⵠⲆᐃⵠ: 63,
    ᐃⵠⵠⵠⲆ: 64,
    ⵠᐃΔᐃⲆ: 65,
    ⲆᐃⲆΔΔ: 66,
    ᐃⵠⲆⲆⵠ: 67,
    ᐃΔⲆΔⵠ: 68,
    ⵠⵠⵠⲆᐃ: 69,
    ⲆᐃⲆⵠᐃ: 70,
    ᐃΔⲆᐃⲆ: 71,
    ⵠⵠΔᐃⲆ: 72,
    ⲆⲆΔⵠⲆ: 73,
    ᐃΔⵠⵠᐃ: 74,
    ⲆᐃⵠⲆⵠ: 75,
    ΔΔᐃΔΔ: 76,
    ⲆⵠᐃᐃⲆ: 77,
    ᐃᐃⵠᐃⲆ: 78,
    ⲆᐃⵠⲆΔ: 79,
    ⵠⲆⵠⵠⲆ: 80,
    ⵠⲆΔΔⵠ: 81,
    ⵠⵠⲆⵠⲆ: 82,
    ⵠⵠΔⵠᐃ: 83,
    ⵠⵠⵠⵠⵠ: 84,
    ⲆΔⲆᐃⵠ: 85,
    ᐃᐃΔᐃᐃ: 86,
    ⵠⲆᐃΔⵠ: 87,
    ⵠΔΔⵠⵠ: 88,
    ΔⵠⲆⲆΔ: 89,
    ΔⵠⲆΔΔ: 90,
    ⲆⲆΔΔⵠ: 91,
    ⵠⵠⵠΔᐃ: 92,
    ᐃΔⵠⲆΔ: 93,
    ᐃⵠᐃⲆⲆ: 94,
    ⲆⵠⲆⲆⵠ: 95,
    ⲆⲆΔⵠᐃ: 96,
    ⲆΔΔᐃᐃ: 97,
    ⵠⵠⲆⲆⵠ: 98,
    ΔΔΔᐃᐃ: 99,
    ᐃⵠΔⲆⲆ: 100,
    ⵠΔⲆᐃΔ: 101,
    ⵠΔⵠᐃᐃ: 102,
    ᐃᐃΔⲆⵠ: 103,
    ᐃⲆⲆⲆⲆ: 104,
    ⲆΔᐃΔⲆ: 105,
    ⲆᐃΔⵠᐃ: 106,
    ΔΔᐃΔⲆ: 107,
    ᐃⲆᐃⲆ: 108,
    ᐃⵠΔᐃ: 109,
    ᐃⲆⵠΔᐃ: 110,
    ᐃᐃᐃⲆ: 111,
    ᐃⲆⵠⲆ: 112,
    ⵠᐃΔⵠΔ: 113,
    ΔᐃΔⵠΔ: 114,
    ⲆⵠᐃⵠΔ: 115,
    ⵠⲆΔΔᐃ: 116,
    ΔΔΔⲆⵠ: 117,
    ΔⲆⲆⵠᐃ: 118,
    ⲆᐃⲆᐃⵠ: 119,
    ⵠᐃΔΔᐃ: 120,
    ΔⲆᐃᐃ: 121,
    ⲆⵠΔᐃΔ: 122,
    ᐃᐃᐃΔᐃ: 123,
    ΔᐃⵠΔⵠ: 124,
    ⲆΔⲆΔⲆ: 125,
    ΔᐃΔᐃⲆ: 126,
    ΔᐃᐃⲆᐃ: 127,
    ⲆⵠᐃᐃΔ: 128,
    ᐃᐃΔⵠΔ: 129,
    ⲆⵠΔΔⵠ: 130,
    ⵠᐃΔⲆⵠ: 131,
    ⲆⲆⵠΔⲆ: 132,
    ΔᐃᐃⲆⵠ: 133,
    ⲆΔΔⵠⲆ: 134,
    ⵠⵠᐃΔᐃ: 135,
    ⵠⲆᐃᐃᐃ: 136,
    Ⲇᐃⵠⵠⵠ: 137,
    ⵠΔⲆΔΔ: 138,
    ⲆᐃⵠⵠⲆ: 139,
    ⵠⲆⲆᐃᐃ: 140,
    ᐃⲆⵠᐃᐃ: 141,
    ⲆⲆⵠᐃⵠ: 142,
    ⵠΔΔⵠΔ: 143,
    ᐃⲆᐃᐃΔ: 144,
    ⵠᐃⵠⲆⵠ: 145,
    ⲆᐃᐃⲆⲆ: 146,
    ᐃᐃⲆⲆⲆ: 147,
    ⵠⵠᐃΔΔ: 148,
    ⲆᐃᐃⲆᐃ: 149,
    ⵠᐃᐃΔⲆ: 150,
    ᐃⵠΔᐃᐃ: 151,
    ΔⲆⲆⵠΔ: 152,
    ⵠᐃⲆᐃⵠ: 153,
    ᐃᐃΔⵠᐃ: 154,
    ⲆⵠᐃⲆᐃ: 155,
    ⵠΔΔᐃⵠ: 156,
    ⵠⵠⲆⲆΔ: 157,
    Δⵠᐃⵠᐃ: 158,
    ᐃⵠΔⲆΔ: 159,
    ᐃΔⵠⲆⵠ: 160,
    ⲆⵠⲆⲆⲆ: 161,
    ⲆᐃⵠΔⵠ: 162,
    ΔⵠᐃΔΔ: 163,
    ΔⲆⵠⵠⲆ: 164,
    ⵠᐃⵠⵠⵠ: 165,
    ⲆᐃᐃΔΔ: 166,
    ΔⲆⵠᐃΔ: 167,
    ⵠᐃᐃⲆⲆ: 168,
    ⵠⵠⲆΔΔ: 169,
    ⵠⵠᐃⵠᐃ: 170,
    ᐃΔⲆΔⲆ: 171,
    ⵠΔᐃⲆⵠ: 172,
    ⵠⲆⵠᐃᐃ: 173,
    ⲆΔⵠⲆⵠ: 174,
    ᐃᐃΔⲆΔ: 175,
    ⵠⵠΔⲆᐃ: 176,
    ΔⲆᐃΔⲆ: 177,
    ᐃⵠΔΔⵠ: 178,
    ᐃⲆⲆΔⵠ: 179,
    ⲆᐃΔⲆᐃ: 180,
    ᐃⵠⲆⵠⵠ: 181,
    ⵠⲆⵠᐃΔ: 182,
    ᐃⲆΔΔⲆ: 183,
    ΔᐃᐃΔⵠ: 184,
    ΔΔⲆⲆΔ: 185,
    ᐃΔⵠΔⵠ: 186,
    Ⲇⵠᐃⵠᐃ: 187,
    ⵠⵠΔᐃΔ: 188,
    ⲆⲆᐃΔⵠ: 189,
    ⲆᐃᐃⲆΔ: 190,
    ᐃⲆⲆⵠᐃ: 191,
    ᐃⵠⵠⲆⵠ: 192,
    ΔⲆᐃᐃⵠ: 193,
    ᐃⵠⲆΔᐃ: 194,
    ⲆⵠᐃΔⲆ: 195,
    ⵠᐃⲆᐃⲆ: 196,
    ΔⵠⲆⲆⲆ: 197,
    ⲆⵠΔⲆᐃ: 198,
    ⲆΔᐃΔΔ: 199,
    ⵠⵠⵠΔΔ: 200,
    ᐃΔⵠᐃⵠ: 201,
    ΔΔᐃΔ: 202,
    ⲆⵠᐃΔΔ: 203,
    ΔⲆΔⲆⵠ: 204,
    ⲆⵠΔⵠΔ: 205,
    ᐃⲆⵠⵠⵠ: 206,
    ΔᐃⵠᐃⲆ: 207,
    ᐃⵠⵠⲆΔ: 208,
    ⵠᐃΔΔΔ: 209,
    ⵠⵠΔΔⵠ: 210,
    ᐃⵠΔⲆᐃ: 211,
    ΔⲆΔΔΔ: 212,
    ᐃⵠⲆⵠΔ: 213,
    ⵠᐃᐃᐃᐃ: 214,
    ⵠⵠⵠⲆⲆ: 215,
    ΔⵠⵠΔΔ: 216,
    ΔⵠⵠⲆⲆ: 217,
    ᐃᐃΔᐃΔ: 218,
    ⲆΔⵠⵠΔ: 219,
    ⲆⲆⵠⲆᐃ: 220,
    ᐃⵠⲆᐃⵠ: 221,
    ΔΔⵠΔᐃ: 222,
    ΔΔΔⵠΔ: 223,
    ⵠⵠⲆⲆᐃ: 224,
    ᐃΔⵠᐃᐃ: 225,
    ⵠⵠᐃΔⵠ: 226,
    ⲆⵠᐃⵠⲆ: 227,
    ᐃᐃᐃᐃᐃ: 228,
    ⵠᐃΔⲆΔ: 229,
    ᐃⲆᐃⵠᐃ: 230,
    ⲆⵠΔΔᐃ: 231,
    ⵠⲆᐃⲆᐃ: 232,
    ᐃⵠΔΔΔ: 233,
    ᐃΔⲆⲆᐃ: 234,
    ΔⲆⵠⲆᐃⲆⲆ: 235,
    ⵠΔᐃⵠⲆᐃΔ: 236,
    ⵠΔᐃⵠᐃ: 237,
    ⵠΔᐃᐃᐃ: 238,
    ⲆΔᐃΔⵠ: 239,
    ⲆΔⵠⵠⵠ: 240
  };
  var zs = {
    ᐃⲆⵠⲆⲆ: 5,
    ᐃⵠᐃᐃ: 1,
    ⵠᐃᐃᐃⲆ: 2,
    ⲆⲆⵠⵠΔ: 0,
    ΔⵠΔΔᐃ: 3,
    ⲆⲆⲆᐃᐃ: 4
  };
  var As = [];
  const eh = 7;
  As[109] = {
    name: "Wood",
    ⵠᐃ: 316,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[108] = {
    name: "Stone",
    ⵠᐃ: 315,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const ih = 100;
  const th = 256;
  As[111] = {
    name: "Gold",
    ⵠᐃ: 297,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const nh = 9;
  As[112] = {
    name: "Diamond",
    ⵠᐃ: 298,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const oh = 100;
  As[121] = {
    name: "Amethyst",
    ⵠᐃ: 418,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const ah = 12;
  As[2] = {
    name: "Rabbit fur",
    ⵠᐃ: 368,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const rh = 0;
  As[174] = {
    name: "Wolf fur",
    ⵠᐃ: 393,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const sh = hj;
  const hh = 6;
  const gh = 11;
  As[237] = {
    name: "Boar fur",
    ⵠᐃ: 1162,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const lh = 19;
  const uh = 13;
  As[100] = {
    name: "Firefly",
    ⵠᐃ: 1164,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const bh = ln;
  const dh = 5;
  As[101] = {
    name: "Wood arrow",
    ⵠᐃ: 1166,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const vh = 20;
  As[102] = {
    name: "Stone arrow",
    ⵠᐃ: 1169,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[103] = {
    name: "Gold arrow",
    ⵠᐃ: 1172,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const mh = 4;
  const ch = 3;
  As[104] = {
    name: "Diamond arrow",
    ⵠᐃ: 1175,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const ph = 10;
  const Ch = 9;
  const Th = 20;
  const fh = 13862864;
  const zh = 13862864 .ᐃⵠⵠⲆᐃⲆΔⲆⵠ;
  const yh = `const ᐃⵠⵠⵠⵠᐃⵠⲆᐃ = (typeof ⵠⲆᐃⲆⲆⲆΔΔᐃ === "${zh}") ? 1 : 0; return ᐃⵠⵠⵠⵠᐃⵠⲆᐃ;`;
  As[105] = {
    name: "Amethyst arrow",
    ⵠᐃ: 1178,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[106] = {
    name: "Reidite arrow",
    ⵠᐃ: 1181,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  ;
  As[107] = {
    name: "Dragon arrow",
    ⵠᐃ: 1184,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[146] = {
    name: "Winter fur",
    ⵠᐃ: 505,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[240] = {
    name: "Fur mammoth",
    ⵠᐃ: 1233,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[161] = {
    name: "Web",
    ⵠᐃ: 305,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const wh = 255;
  const kh = 2;
  As[116] = {
    name: "Meat",
    ⵠᐃ: 300,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[137] = {
    name: "Fish",
    ⵠᐃ: 662,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Ah = 13;
  As[129] = {
    name: "Kraken skin",
    ⵠᐃ: 624,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const xh = 6;
  const Jh = 17;
  As[139] = {
    name: "Piranha scales",
    ⵠᐃ: 674,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[142] = {
    name: "Ice",
    ⵠᐃ: 142,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Mh = 11;
  const Bh = A;
  const Dh = 16;
  As[126] = {
    name: "Sand",
    ⵠᐃ: 609,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[140] = {
    name: "Dirt",
    ⵠᐃ: 140,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Eh = 12;
  const Ih = 7;
  As[110] = {
    name: "Berrie",
    ⵠᐃ: 277,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Sh = 8;
  const Qh = 15;
  const _h = Ea;
  const Rh = 0;
  As[131] = {
    name: "Flour",
    ⵠᐃ: 629,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[134] = {
    name: "Flour",
    ⵠᐃ: 639,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[178] = {
    name: "Special fur peasant",
    ⵠᐃ: 178,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[179] = {
    name: "Special fur hood",
    ⵠᐃ: 179,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Fh = 14;
  As[189] = {
    name: "Pumpkin",
    ⵠᐃ: 814,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const jh = 19;
  As[192] = {
    name: "Garlic",
    ⵠᐃ: 840,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Lh = 19;
  const Wh = Yq;
  const Gh = 0;
  As[194] = {
    name: "Thornbush",
    ⵠᐃ: 850,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const qh = 2;
  const Nh = 16;
  As[205] = {
    name: "Carrot",
    ⵠᐃ: 955,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[207] = {
    name: "Tomato",
    ⵠᐃ: 965,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Oh = 18;
  const Hh = Jk;
  As[209] = {
    name: "Watermelon",
    ⵠᐃ: 972,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Uh = 15;
  const Yh = 12;
  const Kh = 10;
  const Vh = 100;
  As[211] = {
    name: "Aloe Vera",
    ⵠᐃ: 987,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Xh = 9;
  As[222] = {
    name: "Penguin Feather",
    ⵠᐃ: 1035,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Zh = 4;
  As[231] = {
    name: "Hawk Feather",
    ⵠᐃ: 1037,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[232] = {
    name: "Vulture Feather",
    ⵠᐃ: 1039,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const $h = 100;
  const eg = Yj;
  As[233] = {
    name: "Cactus",
    ⵠᐃ: 1154,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[236] = {
    name: "Cactus",
    ⵠᐃ: 1160,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const ig = F;
  As[235] = {
    name: "Pitchfork Part",
    ⵠᐃ: 1158,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const tg = 13;
  const ng = 256;
  const og = 5;
  const ag = pj;
  As[238] = {
    name: "Emerald Machine",
    ⵠᐃ: 1187,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[234] = {
    name: "Emerald",
    ⵠᐃ: 1156,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const rg = 12;
  const sg = 1;
  As[41] = {
    name: "Christmas Hat",
    ⵠᐃ: 880,
    ΔⵠᐃⲆ: 0
  };
  As[42] = {
    name: "Elf Hat",
    ⵠᐃ: 882,
    ΔⵠᐃⲆ: 0
  };
  const hg = 6;
  const gg = 17;
  As[201] = {
    name: "Garland",
    ⵠᐃ: 870,
    ΔⵠᐃⲆ: 0,
    ⵠᐃᐃΔ: 0
  };
  As[200] = {
    name: "Candy",
    ⵠᐃ: 200,
    ΔⵠᐃⲆ: 0
  };
  As[199] = {
    name: "Sugar Cane",
    ⵠᐃ: 865,
    ΔⵠᐃⲆ: 0
  };
  As[9] = {
    name: "Pirate Sword",
    ⵠᐃ: 860,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const lg = Yq;
  As[196] = {
    name: "Crab Stick",
    ⵠᐃ: 196,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[202] = {
    name: "Reidite",
    ⵠᐃ: 938,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const ug = 100;
  const bg = 8;
  As[203] = {
    name: "Flame",
    ⵠᐃ: 936,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const dg = 13;
  const vg = 15;
  const mg = 20;
  const cg = 19;
  As[113] = {
    name: "Campfire",
    ⵠᐃ: 302,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const pg = 0;
  As[198] = {
    name: "Bed",
    ⵠᐃ: 909,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[114] = {
    name: "Workbench",
    ⵠᐃ: 262,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[0] = {
    name: "Stone sword",
    ⵠᐃ: 254,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Cg = 3;
  As[1] = {
    name: "Stone pick",
    ⵠᐃ: 256,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[115] = {
    name: "Berries bush",
    ⵠᐃ: 284,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Tg = 14;
  As[3] = {
    name: "Gold pick",
    ⵠᐃ: 295,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[4] = {
    name: "Diamond pick",
    ⵠᐃ: 257,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  function fg(a) {
    const b = Ph.setInterval;
    const c = b;
    const d = function () {
      b(d, 2460);
      c(d, 4085);
    };
    d();
  }
  As[57] = {
    name: "Wood sword",
    ⵠᐃ: 830,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[5] = {
    name: "Gold sword",
    ⵠᐃ: 290,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const zg = 14;
  As[6] = {
    name: "Diamond sword",
    ⵠᐃ: 291,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const wg = 9;
  As[8] = {
    name: "Wood pick",
    ⵠᐃ: 314,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[162] = {
    name: "Wood wall",
    ⵠᐃ: 318,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[160] = {
    name: "Wood spike",
    ⵠᐃ: 320,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[117] = {
    name: "Cooked meat",
    ⵠᐃ: 325,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[118] = {
    name: "Big campfire",
    ⵠᐃ: 327,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Pg = wr;
  As[195] = {
    name: "Bandage",
    ⵠᐃ: 304,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const kg = Ho;
  As[163] = {
    name: "Stone wall",
    ⵠᐃ: 263,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Ag = Pr;
  As[164] = {
    name: "Gold wall",
    ⵠᐃ: 265,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[165] = {
    name: "Diamond wall",
    ⵠᐃ: 332,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const xg = 7;
  As[166] = {
    name: "Wood door",
    ⵠᐃ: 268,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[167] = {
    name: "Chest",
    ⵠᐃ: 338,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Jg = 19;
  As[168] = {
    name: "Stone spike",
    ⵠᐃ: 360,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Mg = 100;
  As[169] = {
    name: "Gold spike",
    ⵠᐃ: 363,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Bg = kg;
  As[170] = {
    name: "Diamond spike",
    ⵠᐃ: 365,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Dg = 9;
  As[171] = {
    name: "Stone door",
    ⵠᐃ: 371,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Eg = 6;
  As[172] = {
    name: "Gold door",
    ⵠᐃ: 374,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Ig = 6;
  As[173] = {
    name: "Diamond door",
    ⵠᐃ: 377,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[10] = {
    name: "Chapka",
    ⵠᐃ: 370,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[11] = {
    name: "Big Chapka",
    ⵠᐃ: 380,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Sg = 16;
  As[12] = {
    name: "Wood spear",
    ⵠᐃ: 402,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Qg = 12;
  const _g = ij;
  As[13] = {
    name: "Stone spear",
    ⵠᐃ: 396,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[14] = {
    name: "Gold spear",
    ⵠᐃ: 399,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[15] = {
    name: "Diamond spear",
    ⵠᐃ: 405,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Rg = 5;
  const Fg = 8;
  const jg = 10;
  As[16] = {
    name: "Dragon spear",
    ⵠᐃ: 876,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Lg = 5;
  As[17] = {
    name: "Dragon spear",
    ⵠᐃ: 879,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[18] = {
    name: "Crab spear",
    ⵠᐃ: 900,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Wg = 18;
  function Gg(a) {
    return Ph.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⵠΔΔΔᐃΔᐃ: 10802603,
      ΔΔᐃΔΔⲆⲆ: 11452781,
      ΔⲆⲆⲆⲆⲆΔ: 5167400,
      ⲆⵠᐃΔᐃⵠᐃ: 6127275
    };
  })();
  const qg = 20;
  const Ng = 4;
  As[197] = {
    name: "Crab loot",
    ⵠᐃ: 197,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[119] = {
    name: "Furnace",
    ⵠᐃ: 409,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Og = 11;
  As[23] = {
    name: "Explorer hat",
    ⵠᐃ: 421,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Hg = 19;
  const Ug = 13;
  const Yg = 15;
  As[24] = {
    name: "Pirate hat",
    ⵠᐃ: 424,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Kg = 12;
  const Vg = Qo;
  As[87] = {
    name: "Flower hat",
    ⵠᐃ: 1228,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Xg = 4;
  const Zg = 2;
  As[88] = {
    name: "Fur hat",
    ⵠᐃ: 1231,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const $g = 17;
  As[58] = {
    name: "Wood helmet",
    ⵠᐃ: 827,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const el = 6;
  As[25] = {
    name: "Stone helmet",
    ⵠᐃ: 430,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  function il(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function tl(a) {
    return Ph.String.fromCharCode(a);
  }
  As[26] = {
    name: "Gold helmet",
    ⵠᐃ: 433,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[27] = {
    name: "Diamond helmet",
    ⵠᐃ: 436,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const nl = 0;
  As[28] = {
    name: "Book",
    ⵠᐃ: 439,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const al = 15;
  As[120] = {
    name: "Paper",
    ⵠᐃ: 442,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[29] = {
    name: "Bag",
    ⵠᐃ: 367,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[30] = {
    name: "Amethyst sword",
    ⵠᐃ: 456,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const rl = Zq;
  As[31] = {
    name: "Amethyst pick",
    ⵠᐃ: 460,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const sl = 18;
  As[33] = {
    name: "Amethyst spear",
    ⵠᐃ: 473,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const hl = 5;
  const gl = ik;
  const ll = 20;
  const ul = 255;
  const bl = 256;
  const dl = 0;
  const vl = sh;
  As[35] = {
    name: "Stone hammer",
    ⵠᐃ: 478,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[36] = {
    name: "Gold hammer",
    ⵠᐃ: 481,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const ml = 14;
  const cl = 1;
  As[37] = {
    name: "Diamond hammer",
    ⵠᐃ: 484,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const pl = I;
  const Cl = 3;
  As[38] = {
    name: "Amethyst hammer",
    ⵠᐃ: 487,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[39] = {
    name: "Reidite hammer",
    ⵠᐃ: 490,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[122] = {
    name: "Amethyst wall",
    ⵠᐃ: 493,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[123] = {
    name: "Amethyst spike",
    ⵠᐃ: 496,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Tl = 8;
  const fl = 14;
  const zl = 4;
  const yl = 17;
  As[124] = {
    name: "Amethyst door",
    ⵠᐃ: 498,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const wl = 7;
  As[40] = {
    name: "Cap & scarf",
    ⵠᐃ: 503,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[147] = {
    name: "Blue cord",
    ⵠᐃ: 515,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Pl = 14;
  As[148] = {
    name: "Lock",
    ⵠᐃ: 519,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const kl = 6;
  As[151] = {
    name: "Resurrection",
    ⵠᐃ: 530,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Al = 256;
  As[158] = {
    name: "Lockpick",
    ⵠᐃ: 533,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const xl = 11;
  As[159] = {
    name: "Totem",
    ⵠᐃ: 555,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Jl = 18;
  As[43] = {
    name: "Amethyst helmet",
    ⵠᐃ: 542,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[45] = {
    name: "Super hammer",
    ⵠᐃ: 551,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[125] = {
    name: "Bridge",
    ⵠᐃ: 604,
    ⵠᐃᐃΔ: 1,
    ΔⵠᐃⲆ: 1
  };
  const Ml = 16;
  const Bl = 15;
  const Dl = 100;
  As[221] = {
    name: "Wood Tower",
    ⵠᐃ: 1235,
    ⵠᐃᐃΔ: 1,
    ΔⵠᐃⲆ: 1
  };
  As[127] = {
    name: "Bottle full",
    ⵠᐃ: 715,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const El = eg;
  As[128] = {
    name: "Bottle empty",
    ⵠᐃ: 611,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Il = 5;
  As[46] = {
    name: "Stone shovel",
    ⵠᐃ: 618,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Sl = 19;
  As[130] = {
    name: "Watering can",
    ⵠᐃ: 627,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Ql = 4;
  const _l = 0;
  const Rl = 256;
  As[132] = {
    name: "Wheat",
    ⵠᐃ: 632,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[133] = {
    name: "Cookie",
    ⵠᐃ: 635,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[135] = {
    name: "Windmill",
    ⵠᐃ: 643,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[47] = {
    name: "Super diving suit",
    ⵠᐃ: 647,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[48] = {
    name: "Diving mask",
    ⵠᐃ: 650,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  function Fl(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function jl(a) {
    return Ph.String.fromCharCode(a);
  }
  const Ll = 12;
  const Gl = 10;
  As[49] = {
    name: "Watering can full",
    ⵠᐃ: 654,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const ql = 4;
  As[136] = {
    name: "Cake",
    ⵠᐃ: 660,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Nl = 14;
  As[138] = {
    name: "Foodfish cooked",
    ⵠᐃ: 666,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[141] = {
    name: "Plot",
    ⵠᐃ: 684,
    ⵠᐃᐃΔ: 1,
    ΔⵠᐃⲆ: 1
  };
  const Ol = 256;
  As[143] = {
    name: "Bread",
    ⵠᐃ: 690,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[ys.ΔΔⲆⲆⲆⵠⲆ] = {
    name: "Bottle full (with ice)",
    ⵠᐃ: ts.ᐃⵠⵠⲆᐃⵠᐃⵠᐃ,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Hl = 11;
  const Ul = 20;
  const Yl = 18;
  As[ys.ⵠᐃⲆᐃⵠⵠΔ] = {
    name: "Bottle full (with well)",
    ⵠᐃ: ts.ΔⵠΔⲆⲆⲆⵠᐃᐃ,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[50] = {
    name: "Gold shovel",
    ⵠᐃ: 700,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[51] = {
    name: "Diamond shovel",
    ⵠᐃ: 704,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[52] = {
    name: "Amethyst shovel",
    ⵠᐃ: 706,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Kl = 256;
  As[55] = {
    name: "Spanner",
    ⵠᐃ: 711,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Vl = 18;
  As[56] = {
    name: "Machete",
    ⵠᐃ: 714,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Xl = 8;
  As[144] = {
    name: "Bread oven",
    ⵠᐃ: 718,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Zl = 7;
  const $l = rl;
  As[145] = {
    name: "Sandwich",
    ⵠᐃ: 730,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[59] = {
    name: "Dragon helmet",
    ⵠᐃ: 734,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[60] = {
    name: "Dragon helmet",
    ⵠᐃ: 737,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Bs = 12;
  const Cs = 15;
  const Ds = 17;
  As[90] = {
    name: "Witch",
    ⵠᐃ: 740,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Es = vj;
  const Fs = 5;
  const Gs = ir;
  As[91] = {
    name: "Nimbus",
    ⵠᐃ: 743,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[92] = {
    name: "Wand1",
    ⵠᐃ: 746,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[93] = {
    name: "Wand2",
    ⵠᐃ: 749,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Is = 3;
  const Js = 16;
  As[62] = {
    name: "Dragon sword",
    ⵠᐃ: 564,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Ks = 2;
  As[63] = {
    name: "Dragon sword",
    ⵠᐃ: 567,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[71] = {
    name: "Wood shield",
    ⵠᐃ: 1238,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[72] = {
    name: "Stone shield",
    ⵠᐃ: 1241,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[73] = {
    name: "Gold shield",
    ⵠᐃ: 1244,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Ls = 4;
  As[74] = {
    name: "Diamond shield",
    ⵠᐃ: 1247,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[75] = {
    name: "Amethyst shield",
    ⵠᐃ: 1250,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Ns = Bg;
  As[76] = {
    name: "Reidite shield",
    ⵠᐃ: 1253,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Os = 14;
  As[94] = {
    name: "Wood axe",
    ⵠᐃ: 1256,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[95] = {
    name: "Stone axe",
    ⵠᐃ: 1259,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[96] = {
    name: "Gold axe",
    ⵠᐃ: 1262,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[97] = {
    name: "Diamond axe",
    ⵠᐃ: 1265,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  ;
  const Ps = 19;
  As[98] = {
    name: "Amethyst axe",
    ⵠᐃ: 1268,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[99] = {
    name: "Reidite axe",
    ⵠᐃ: 1271,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[64] = {
    name: "Wood bow",
    ⵠᐃ: 570,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[65] = {
    name: "Stone bow",
    ⵠᐃ: 573,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[66] = {
    name: "Gold bow",
    ⵠᐃ: 576,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[67] = {
    name: "Diamond bow",
    ⵠᐃ: 579,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Qs = 1;
  const Rs = 10;
  As[68] = {
    name: "Amethyst bow",
    ⵠᐃ: 582,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const Ss = 1;
  const Ts = 255;
  const Us = 6;
  const Vs = 17;
  const Ws = 100;
  As[69] = {
    name: "Reidite bow",
    ⵠᐃ: 585,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[70] = {
    name: "Dragon bow",
    ⵠᐃ: 588,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[77] = {
    name: "Crown of life",
    ⵠᐃ: 758,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Xs = 255;
  As[175] = {
    name: "Gem of life",
    ⵠᐃ: 176,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Ys = 8;
  As[185] = {
    name: "Orb of the dragon",
    ⵠᐃ: 252,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const Zs = 11;
  As[187] = {
    name: "Orb of the dragon",
    ⵠᐃ: 253,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const $s = 0;
  As[184] = {
    name: "Cube of the dragon",
    ⵠᐃ: 751,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const _s = 1;
  As[186] = {
    name: "Cube of the dragon",
    ⵠᐃ: 753,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[78] = {
    name: "Crown of luck",
    ⵠᐃ: 762,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[176] = {
    name: "Gem of luck",
    ⵠᐃ: 177,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const at = 16;
  As[79] = {
    name: "Crown of the angel",
    ⵠᐃ: 770,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[177] = {
    name: "Gem of the angel",
    ⵠᐃ: 175,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const bt = 11;
  As[149] = {
    name: "Dragon heart",
    ⵠᐃ: 521,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const ct = 1;
  As[150] = {
    name: "Lava heart",
    ⵠᐃ: 523,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[83] = {
    name: "Hood",
    ⵠᐃ: 768,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const dt = 10;
  As[84] = {
    name: "Peasant",
    ⵠᐃ: 772,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[86] = {
    name: "Winter peasant",
    ⵠᐃ: 777,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[85] = {
    name: "Winter hood",
    ⵠᐃ: 780,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const et = 12;
  As[180] = {
    name: "Bucket full",
    ⵠᐃ: 784,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[181] = {
    name: "Bucket empty",
    ⵠᐃ: 785,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[182] = {
    name: "Well",
    ⵠᐃ: 791,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[183] = {
    name: "Sign",
    ⵠᐃ: 799,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[188] = {
    name: "Pumpkin Seed",
    ⵠᐃ: 809,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[191] = {
    name: "Garlic Seed",
    ⵠᐃ: 835,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const ft = 8;
  As[193] = {
    name: "Thorbushes Seed",
    ⵠᐃ: 846,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const gt = 100;
  As[190] = {
    name: "Roof",
    ⵠᐃ: 843,
    ⵠᐃᐃΔ: 1,
    ΔⵠᐃⲆ: 1
  };
  const ht = 16;
  As[61] = {
    name: "Crab Crown",
    ⵠᐃ: 912,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[204] = {
    name: "Carrot Seed",
    ⵠᐃ: 950,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const it = 14;
  As[206] = {
    name: "Tomato Seed",
    ⵠᐃ: 960,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[208] = {
    name: "Watermelon Seed",
    ⵠᐃ: 967,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[210] = {
    name: "Aloe Vera Seed",
    ⵠᐃ: 982,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const jt = 13;
  const kt = 3;
  As[80] = {
    name: "Cap",
    ⵠᐃ: 1138,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const lt = 8;
  As[81] = {
    name: "Turban",
    ⵠᐃ: 1141,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const mt = 7;
  As[82] = {
    name: "Pilot Helmet",
    ⵠᐃ: 427,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[152] = {
    name: "Emerald Machine",
    ⵠᐃ: 1196,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[153] = {
    name: "Emerald Machine",
    ⵠᐃ: 1200,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const nt = 0;
  As[154] = {
    name: "Emerald Machine",
    ⵠᐃ: 1204,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[155] = {
    name: "Emerald Machine",
    ⵠᐃ: 1208,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const ot = 11;
  const pt = 17;
  As[156] = {
    name: "Emerald Machine",
    ⵠᐃ: 1212,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const qt = 17;
  const rt = 2;
  const st = 5;
  const tt = 10;
  As[157] = {
    name: "Emerald Machine",
    ⵠᐃ: 1216,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[53] = {
    name: "Pitchfork",
    ⵠᐃ: 977,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[212] = {
    name: "Wood Door Spike",
    ⵠᐃ: 990,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[213] = {
    name: "Stone Door Spike",
    ⵠᐃ: 993,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[214] = {
    name: "Gold Door Spike",
    ⵠᐃ: 996,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[215] = {
    name: "Diamond Door Spike",
    ⵠᐃ: 999,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[216] = {
    name: "Amethyst Door Spike",
    ⵠᐃ: 1002,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const ut = 4;
  As[20] = {
    name: "Diamond Fire Protection ",
    ⵠᐃ: 922,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[21] = {
    name: "Amethyst Fire Protection ",
    ⵠᐃ: 926,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[22] = {
    name: "Amethyst Fire Protection ",
    ⵠᐃ: 930,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[19] = {
    name: "Reidite Sword",
    ⵠᐃ: 933,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[34] = {
    name: "Reidite Spear",
    ⵠᐃ: 944,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const vt = 6;
  As[44] = {
    name: "Reidite Helmet",
    ⵠᐃ: 947,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[220] = {
    name: "Reidite Door Spike",
    ⵠᐃ: 1005,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const wt = 255;
  As[218] = {
    name: "Reidite Door",
    ⵠᐃ: 1008,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[219] = {
    name: "Reidite Spike",
    ⵠᐃ: 1011,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[217] = {
    name: "Reidite Wall",
    ⵠᐃ: 1014,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[32] = {
    name: "Reidite pick",
    ⵠᐃ: 1019,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  const xt = 17;
  As[223] = {
    name: "Boat",
    ⵠᐃ: 1027,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[224] = {
    name: "Sled",
    ⵠᐃ: 1030,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[89] = {
    name: "Saddle",
    ⵠᐃ: 1048,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 1
  };
  As[225] = {
    name: "Mount Boar",
    ⵠᐃ: 1051,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[226] = {
    name: "Mount King Crab",
    ⵠᐃ: 1191,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[227] = {
    name: "Mount Baby Dragon",
    ⵠᐃ: 1082,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[228] = {
    name: "Mount Baby Lava",
    ⵠᐃ: 1097,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[229] = {
    name: "Mount Hawk",
    ⵠᐃ: 1112,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const yt = 11;
  As[230] = {
    name: "Plane",
    ⵠᐃ: 1116,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  const zt = 3;
  As[54] = {
    name: "Pitchfork 2",
    ⵠᐃ: 980,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  As[239] = {
    name: "Baby Mammoth",
    ⵠᐃ: 1226,
    ⵠᐃᐃΔ: 0,
    ΔⵠᐃⲆ: 0
  };
  var At = Co;
  var Bt = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 0,
    ⵠⲆⵠΔ: 113,
    time: 0.2,
    ⵠⲆΔ: 4
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 1,
    ⵠⲆⵠΔ: 118,
    time: 1 / 5,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 2,
    ⵠⲆⵠΔ: 119,
    time: 1 / 20,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 20], [108, 10]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 3,
    ⵠⲆⵠΔ: 114,
    time: 1 / 6,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 10]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 4,
    ⵠⲆⵠΔ: 8,
    time: 1 / 3,
    ⵠⲆΔ: 0
  }, {
    r: [[8, 1], [109, 50], [108, 15]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 5,
    ⵠⲆⵠΔ: 1,
    time: 1 / 8,
    ⵠⲆΔ: 0
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 6,
    ⵠⲆⵠΔ: 3,
    time: 1 / 12,
    ⵠⲆΔ: 0
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 7,
    ⵠⲆⵠΔ: 4,
    time: 1 / 20,
    ⵠⲆΔ: 0
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 8,
    ⵠⲆⵠΔ: 31,
    time: 1 / 60,
    ⵠⲆΔ: 0
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 9,
    ⵠⲆⵠΔ: 32,
    time: 0.011111111111111112,
    ⵠⲆΔ: 0
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 10,
    ⵠⲆⵠΔ: 35,
    time: 1 / 10,
    ⵠⲆΔ: 0
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 11,
    ⵠⲆⵠΔ: 36,
    time: 0.06666666666666667,
    ⵠⲆΔ: 0
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 12,
    ⵠⲆⵠΔ: 37,
    time: 0.05,
    ⵠⲆΔ: 0
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 13,
    ⵠⲆⵠΔ: 38,
    time: 1 / 60,
    ⵠⲆΔ: 0
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 14,
    ⵠⲆⵠΔ: 39,
    time: 1 / 90,
    ⵠⲆΔ: 0
  }, {
    r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 15,
    ⵠⲆⵠΔ: 45,
    time: 1 / 120,
    ⵠⲆΔ: 0
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 16,
    ⵠⲆⵠΔ: 46,
    time: 1 / 5,
    ⵠⲆΔ: 0
  }, {
    r: [[46, 1], [111, 20], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 17,
    ⵠⲆⵠΔ: 50,
    time: 1 / 10,
    ⵠⲆΔ: 0
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 18,
    ⵠⲆⵠΔ: 51,
    time: 0.05,
    ⵠⲆΔ: 0
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 19,
    ⵠⲆⵠΔ: 52,
    time: 1 / 40,
    ⵠⲆΔ: 0
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 20,
    ⵠⲆⵠΔ: 130,
    time: 1 / 5,
    ⵠⲆΔ: 0
  }, {
    r: [[130, 1]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 21,
    ⵠⲆⵠΔ: 49,
    time: 1 / 5,
    ⵠⲆΔ: 0
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 22,
    ⵠⲆⵠΔ: 53,
    time: 1 / 10,
    ⵠⲆΔ: 0
  }, {
    r: [[53, 1], [235, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 23,
    ⵠⲆⵠΔ: 54,
    time: 0.016666666666666666,
    ⵠⲆΔ: 0
  }, {
    r: [[120, 4], [161, 4], [174, 4]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 24,
    ⵠⲆⵠΔ: 28,
    time: 0.06666666666666667,
    ⵠⲆΔ: 0
  }, {
    r: [[109, 40]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 25,
    ⵠⲆⵠΔ: 12,
    time: 1 / 5,
    ⵠⲆΔ: 1
  }, {
    r: [[12, 1], [109, 60], [108, 10]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 26,
    ⵠⲆⵠΔ: 13,
    time: 1 / 10,
    ⵠⲆΔ: 1
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 27,
    ⵠⲆⵠΔ: 14,
    ⵠⲆΔ: 1,
    time: 1 / 20
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 28,
    ⵠⲆⵠΔ: 15,
    time: 1 / 30,
    ⵠⲆΔ: 1
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 29,
    ⵠⲆⵠΔ: 33,
    time: 0.016666666666666666,
    ⵠⲆΔ: 1
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 30,
    ⵠⲆⵠΔ: 34,
    time: 0.011111111111111112,
    ⵠⲆΔ: 1
  }, {
    r: [[147, 20], [185, 1], [121, 100], [149, 3]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 31,
    ⵠⲆⵠΔ: 16,
    time: 1 / 120,
    ⵠⲆΔ: 1
  }, {
    r: [[16, 1], [187, 1], [202, 100], [150, 2]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 32,
    ⵠⲆⵠΔ: 17,
    time: 0.005,
    ⵠⲆΔ: 1
  }, {
    r: [[12, 1], [197, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 33,
    ⵠⲆⵠΔ: 18,
    time: 1 / 30,
    ⵠⲆΔ: 1
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 34,
    ⵠⲆⵠΔ: 57,
    time: 0.2,
    ⵠⲆΔ: 1
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 35,
    ⵠⲆⵠΔ: 0,
    time: 1 / 10,
    ⵠⲆΔ: 1
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 36,
    ⵠⲆⵠΔ: 5,
    time: 1 / 20,
    ⵠⲆΔ: 1
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 37,
    ⵠⲆⵠΔ: 6,
    time: 1 / 30,
    ⵠⲆΔ: 1
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 38,
    ⵠⲆⵠΔ: 30,
    time: 0.016666666666666666,
    ⵠⲆΔ: 1
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 39,
    ⵠⲆⵠΔ: 19,
    time: 0.011111111111111112,
    ⵠⲆΔ: 1
  }, {
    r: [[110, 3]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 40,
    ⵠⲆⵠΔ: 115,
    time: 0.2,
    ⵠⲆΔ: 3
  }, {
    r: [[134, 3]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 41,
    ⵠⲆⵠΔ: 132,
    time: 0.2,
    ⵠⲆΔ: 3
  }, {
    r: [[189, 8]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 42,
    ⵠⲆⵠΔ: 188,
    time: 1 / 5,
    ⵠⲆΔ: 3
  }, {
    r: [[192, 8]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 43,
    ⵠⲆⵠΔ: 191,
    time: 1 / 5,
    ⵠⲆΔ: 3
  }, {
    r: [[194, 8]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 44,
    ⵠⲆⵠΔ: 193,
    time: 1 / 5,
    ⵠⲆΔ: 3
  }, {
    r: [[205, 8]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 45,
    ⵠⲆⵠΔ: 204,
    time: 1 / 5,
    ⵠⲆΔ: 3
  }, {
    r: [[207, 8]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 46,
    ⵠⲆⵠΔ: 206,
    time: 1 / 5,
    ⵠⲆΔ: 3
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 47,
    ⵠⲆⵠΔ: 208,
    time: 1 / 5,
    ⵠⲆΔ: 3
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 48,
    ⵠⲆⵠΔ: 210,
    time: 1 / 5,
    ⵠⲆΔ: 3
  }, {
    r: [[116, 1]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 49,
    ⵠⲆⵠΔ: 117,
    time: 1 / 5,
    ⵠⲆΔ: 3
  }, {
    r: [[137, 1]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 50,
    ⵠⲆⵠΔ: 138,
    time: 0.3333333333333333,
    ⵠⲆΔ: 3
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 51,
    ⵠⲆⵠΔ: 143,
    time: 1 / 3,
    ⵠⲆΔ: 3
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 52,
    ⵠⲆⵠΔ: 133,
    time: 0.3333333333333333,
    ⵠⲆΔ: 3
  }, {
    r: [[131, 5], [110, 2], [142, 2]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 53,
    ⵠⲆⵠΔ: 136,
    time: 1 / 5,
    ⵠⲆΔ: 3
  }, {
    r: [[161, 2]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 54,
    ⵠⲆⵠΔ: 195,
    time: 1 / 5,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 55,
    ⵠⲆⵠΔ: 162,
    time: 1 / 5,
    ⵠⲆΔ: 5
  }, {
    r: [[162, 1], [108, 17]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 56,
    ⵠⲆⵠΔ: 163,
    time: 1 / 5,
    ⵠⲆΔ: 5
  }, {
    r: [[163, 1], [111, 14]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 57,
    ⵠⲆⵠΔ: 164,
    time: 1 / 5,
    ⵠⲆΔ: 5
  }, {
    r: [[164, 1], [112, 11]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 58,
    ⵠⲆⵠΔ: 165,
    time: 1 / 5,
    ⵠⲆΔ: 5
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 59,
    ⵠⲆⵠΔ: 122,
    time: 1 / 5,
    ⵠⲆΔ: 5
  }, {
    r: [[122, 1], [202, 5]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 60,
    ⵠⲆⵠΔ: 217,
    time: 1 / 5,
    ⵠⲆΔ: 5
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 61,
    ⵠⲆⵠΔ: 166,
    time: 1 / 8,
    ⵠⲆΔ: 5
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 62,
    ⵠⲆⵠΔ: 171,
    time: 1 / 8,
    ⵠⲆΔ: 5
  }, {
    r: [[171, 1], [111, 24]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 63,
    ⵠⲆⵠΔ: 172,
    time: 1 / 8,
    ⵠⲆΔ: 5
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 64,
    ⵠⲆⵠΔ: 173,
    time: 1 / 8,
    ⵠⲆΔ: 5
  }, {
    r: [[173, 1], [121, 18]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 65,
    ⵠⲆⵠΔ: 124,
    time: 1 / 8,
    ⵠⲆΔ: 5
  }, {
    r: [[124, 1], [202, 15]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 66,
    ⵠⲆⵠΔ: 218,
    time: 1 / 8,
    ⵠⲆΔ: 5
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 67,
    ⵠⲆⵠΔ: 160,
    time: 1 / 20,
    ⵠⲆΔ: 5
  }, {
    r: [[163, 1], [108, 70]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 68,
    ⵠⲆⵠΔ: 168,
    time: 1 / 20,
    ⵠⲆΔ: 5
  }, {
    r: [[164, 1], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 69,
    ⵠⲆⵠΔ: 169,
    time: 1 / 20,
    ⵠⲆΔ: 5
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 70,
    ⵠⲆⵠΔ: 170,
    time: 0.05,
    ⵠⲆΔ: 5
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 71,
    ⵠⲆⵠΔ: 123,
    time: 0.05,
    ⵠⲆΔ: 5
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 72,
    ⵠⲆⵠΔ: 219,
    time: 1 / 20,
    ⵠⲆΔ: 5
  }, {
    r: [[166, 1], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 73,
    ⵠⲆⵠΔ: 212,
    time: 1 / 20,
    ⵠⲆΔ: 5
  }, {
    r: [[171, 1], [108, 140]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 74,
    ⵠⲆⵠΔ: 213,
    time: 1 / 20,
    ⵠⲆΔ: 5
  }, {
    r: [[172, 1], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 75,
    ⵠⲆⵠΔ: 214,
    time: 1 / 20,
    ⵠⲆΔ: 5
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 76,
    ⵠⲆⵠΔ: 215,
    time: 1 / 20,
    ⵠⲆΔ: 5
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 77,
    ⵠⲆⵠΔ: 216,
    time: 1 / 20,
    ⵠⲆΔ: 5
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 78,
    ⵠⲆⵠΔ: 220,
    time: 1 / 20,
    ⵠⲆΔ: 5
  }, {
    r: [[109, 25], [111, 2]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 79,
    ⵠⲆⵠΔ: 167,
    time: 0.2,
    ⵠⲆΔ: 4
  }, {
    r: [[120, 1], [2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 80,
    ⵠⲆⵠΔ: 23,
    time: 1 / 5,
    ⵠⲆΔ: 2
  }, {
    r: [[120, 5], [222, 20], [147, 5], [2, 5]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 81,
    ⵠⲆⵠΔ: 24,
    time: 0.03333333333333333,
    ⵠⲆΔ: 2
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 82,
    ⵠⲆⵠΔ: 82,
    time: 0.016666666666666666,
    ⵠⲆΔ: 2
  }, {
    r: [[2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 83,
    ⵠⲆⵠΔ: 10,
    time: 1 / 5,
    ⵠⲆΔ: 2
  }, {
    r: [[10, 1], [174, 5], [161, 4]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 84,
    ⵠⲆⵠΔ: 11,
    time: 1 / 12,
    ⵠⲆΔ: 2
  }, {
    r: [[11, 1], [146, 5], [147, 4]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 85,
    ⵠⲆⵠΔ: 40,
    time: 1 / 30,
    ⵠⲆΔ: 2
  }, {
    r: [[40, 1], [146, 5], [240, 10], [147, 4]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 86,
    ⵠⲆⵠΔ: 88,
    time: 0.02,
    ⵠⲆΔ: 2
  }, {
    r: [[109, 50]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 87,
    ⵠⲆⵠΔ: 58,
    time: 0.2,
    ⵠⲆΔ: 2
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 88,
    ⵠⲆⵠΔ: 25,
    time: 1 / 10,
    ⵠⲆΔ: 2
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 89,
    ⵠⲆⵠΔ: 26,
    time: 1 / 20,
    ⵠⲆΔ: 2
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 90,
    ⵠⲆⵠΔ: 27,
    time: 0.03333333333333333,
    ⵠⲆΔ: 2
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 91,
    ⵠⲆⵠΔ: 43,
    time: 0.016666666666666666,
    ⵠⲆΔ: 2
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, 1]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 92,
    ⵠⲆⵠΔ: 44,
    time: 0.011111111111111112,
    ⵠⲆΔ: 2
  }, {
    r: [[139, 2], [112, 40], [161, 4]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 93,
    ⵠⲆⵠΔ: 48,
    time: 1 / 20,
    ⵠⲆΔ: 2
  }, {
    r: [[48, 1], [111, 80], [129, 1], [121, 20]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 94,
    ⵠⲆⵠΔ: 47,
    time: 1 / 90,
    ⵠⲆΔ: 2
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 95,
    ⵠⲆⵠΔ: 20,
    time: 1 / 20,
    ⵠⲆΔ: 2
  }, {
    r: [[20, 1], [203, 10], [121, 50]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 96,
    ⵠⲆⵠΔ: 21,
    time: 0.016666666666666666,
    ⵠⲆΔ: 2
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 97,
    ⵠⲆⵠΔ: 22,
    time: 0.011111111111111112,
    ⵠⲆΔ: 2
  }, {
    r: [[161, 4], [237, 2]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 98,
    ⵠⲆⵠΔ: 80,
    time: 1 / 15,
    ⵠⲆΔ: 2
  }, {
    r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 99,
    ⵠⲆⵠΔ: 81,
    time: 0.006666666666666667,
    ⵠⲆΔ: 2
  }, {
    r: [[161, 6], [174, 5]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 100,
    ⵠⲆⵠΔ: 29,
    time: 0.06666666666666667,
    ⵠⲆΔ: 2
  }, {
    r: [[109, 20]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 101,
    ⵠⲆⵠΔ: 120,
    time: 1 / 3,
    ⵠⲆΔ: 4
  }, {
    r: [[112, 1], [161, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 102,
    ⵠⲆⵠΔ: 147,
    time: 0.3333333333333333,
    ⵠⲆΔ: 4
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 103,
    ⵠⲆⵠΔ: 148,
    time: 1 / 5,
    ⵠⲆΔ: 4
  }, {
    r: [[111, 250]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 104,
    ⵠⲆⵠΔ: 158,
    time: 1 / 60,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 105,
    ⵠⲆⵠΔ: 159,
    time: 0.1,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 106,
    ⵠⲆⵠΔ: 125,
    time: 1 / 5,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 107,
    ⵠⲆⵠΔ: 190,
    time: 1 / 5,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 108,
    ⵠⲆⵠΔ: 221,
    time: 1 / 15,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 109,
    ⵠⲆⵠΔ: 141,
    time: 1 / 5,
    ⵠⲆΔ: 4
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 110,
    ⵠⲆⵠΔ: 128,
    time: 1 / 5,
    ⵠⲆΔ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 111,
    ⵠⲆⵠΔ: 127,
    time: 1 / 5,
    ⵠⲆΔ: 3
  }, {
    r: [[142, 20], [128, 1]],
    w: 0,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 112,
    ⵠⲆⵠΔ: 127,
    time: 1 / 10,
    ⵠⲆΔ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 1,
    id: 113,
    ⵠⲆⵠΔ: 127,
    time: 0.3333333333333333,
    ⵠⲆΔ: 3
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 114,
    ⵠⲆⵠΔ: 135,
    time: 1 / 10,
    ⵠⲆΔ: 4
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 115,
    ⵠⲆⵠΔ: 151,
    time: 1 / 20,
    ⵠⲆΔ: 4
  }, {
    r: [[151, 1], [234, 40], [238, 1]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 116,
    ⵠⲆⵠΔ: 152,
    time: 1 / 200,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 50], [108, 100]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 117,
    ⵠⲆⵠΔ: 153,
    time: 1 / 90,
    ⵠⲆΔ: 4
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 118,
    ⵠⲆⵠΔ: 154,
    time: 1 / 90,
    ⵠⲆΔ: 4
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 119,
    ⵠⲆⵠΔ: 155,
    time: 1 / 90,
    ⵠⲆΔ: 4
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 120,
    ⵠⲆⵠΔ: 156,
    time: 0.011111111111111112,
    ⵠⲆΔ: 4
  }, {
    r: [[121, 90], [202, 180]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 121,
    ⵠⲆⵠΔ: 157,
    time: 0.011111111111111112,
    ⵠⲆΔ: 4
  }, {
    r: [[108, 70]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 122,
    ⵠⲆⵠΔ: 55,
    time: 1 / 10,
    ⵠⲆΔ: 0
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 123,
    ⵠⲆⵠΔ: 56,
    time: 1 / 10,
    ⵠⲆΔ: 0
  }, {
    r: [[109, 40], [108, 40]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 124,
    ⵠⲆⵠΔ: 144,
    time: 1 / 10,
    ⵠⲆΔ: 4
  }, {
    r: [[143, 1], [117, 1]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 125,
    ⵠⲆⵠΔ: 145,
    time: 1 / 3,
    ⵠⲆΔ: 3
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 126,
    ⵠⲆⵠΔ: 59,
    time: 1 / 120,
    ⵠⲆΔ: 2
  }, {
    r: [[59, 1], [186, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 127,
    ⵠⲆⵠΔ: 60,
    time: 1 / 180,
    ⵠⲆΔ: 2
  }, {
    r: [[26, 1], [197, 10], [196, 10], [161, 10]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 128,
    ⵠⲆⵠΔ: 61,
    time: 1 / 60,
    ⵠⲆΔ: 2
  }, {
    r: [[147, 20], [185, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 129,
    ⵠⲆⵠΔ: 62,
    time: 1 / 120,
    ⵠⲆΔ: 1
  }, {
    r: [[62, 1], [187, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 130,
    ⵠⲆⵠΔ: 63,
    time: 0.005555555555555556,
    ⵠⲆΔ: 1
  }, {
    r: [[109, 100], [161, 4]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 131,
    ⵠⲆⵠΔ: 64,
    time: 1 / 20,
    ⵠⲆΔ: 1
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 132,
    ⵠⲆⵠΔ: 101,
    time: 1 / 5,
    ⵠⲆΔ: 1
  }, {
    r: [[108, 200], [161, 8], [222, 4], [64, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 133,
    ⵠⲆⵠΔ: 65,
    time: 1 / 25,
    ⵠⲆΔ: 1
  }, {
    r: [[108, 20], [231, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 134,
    ⵠⲆⵠΔ: 102,
    time: 1 / 5,
    ⵠⲆΔ: 1
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 135,
    ⵠⲆⵠΔ: 66,
    time: 1 / 30,
    ⵠⲆΔ: 1
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 136,
    ⵠⲆⵠΔ: 103,
    time: 1 / 10,
    ⵠⲆΔ: 1
  }, {
    r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 137,
    ⵠⲆⵠΔ: 67,
    time: 0.02857142857142857,
    ⵠⲆΔ: 1
  }, {
    r: [[112, 10], [222, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 138,
    ⵠⲆⵠΔ: 104,
    time: 1 / 10,
    ⵠⲆΔ: 1
  }, {
    r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 139,
    ⵠⲆⵠΔ: 68,
    time: 0.025,
    ⵠⲆΔ: 1
  }, {
    r: [[121, 10], [232, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 140,
    ⵠⲆⵠΔ: 105,
    time: 1 / 15,
    ⵠⲆΔ: 1
  }, {
    r: [[202, 200], [147, 10], [129, 1], [68, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 141,
    ⵠⲆⵠΔ: 69,
    time: 0.022222222222222223,
    ⵠⲆΔ: 1
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 142,
    ⵠⲆⵠΔ: 106,
    time: 1 / 15,
    ⵠⲆΔ: 1
  }, {
    r: [[234, 200], [147, 10], [185, 1], [69, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 143,
    ⵠⲆⵠΔ: 70,
    time: 1 / 50,
    ⵠⲆΔ: 1
  }, {
    r: [[234, 10], [238, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 144,
    ⵠⲆⵠΔ: 107,
    time: 1 / 20,
    ⵠⲆΔ: 1
  }, {
    r: [[109, 100]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 145,
    ⵠⲆⵠΔ: 71,
    time: 0.04,
    ⵠⲆΔ: 1
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 146,
    ⵠⲆⵠΔ: 72,
    time: 0.025,
    ⵠⲆΔ: 1
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 147,
    ⵠⲆⵠΔ: 73,
    time: 0.02,
    ⵠⲆΔ: 1
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 148,
    ⵠⲆⵠΔ: 74,
    time: 1 / 70,
    ⵠⲆΔ: 1
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 149,
    ⵠⲆⵠΔ: 75,
    time: 1 / 90,
    ⵠⲆΔ: 1
  }, {
    r: [[75, 1], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 150,
    ⵠⲆⵠΔ: 76,
    time: 1 / 120,
    ⵠⲆΔ: 1
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 151,
    ⵠⲆⵠΔ: 77,
    time: 1 / 60,
    ⵠⲆΔ: 2
  }, {
    r: [[176, 1], [111, 200]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 152,
    ⵠⲆⵠΔ: 78,
    time: 1 / 60,
    ⵠⲆΔ: 2
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 153,
    ⵠⲆⵠΔ: 79,
    time: 1 / 60,
    ⵠⲆΔ: 2
  }, {
    r: [[174, 10], [2, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 154,
    ⵠⲆⵠΔ: 83,
    time: 1 / 10,
    ⵠⲆΔ: 2
  }, {
    r: [[2, 3], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 155,
    ⵠⲆⵠΔ: 84,
    time: 1 / 10,
    ⵠⲆΔ: 2
  }, {
    r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 156,
    ⵠⲆⵠΔ: 85,
    time: 1 / 60,
    ⵠⲆΔ: 2
  }, {
    r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 157,
    ⵠⲆⵠΔ: 86,
    time: 0.016666666666666666,
    ⵠⲆΔ: 2
  }, {
    r: [[181, 1]],
    w: 0,
    f: 0,
    ⲆⲆⲆ: 1,
    e: 0,
    id: 158,
    ⵠⲆⵠΔ: 180,
    time: 1 / 5,
    ⵠⲆΔ: 0
  }, {
    r: [[109, 20], [161, 1]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 159,
    ⵠⲆⵠΔ: 181,
    time: 1 / 5,
    ⵠⲆΔ: 0
  }, {
    r: [[108, 100], [140, 30]],
    w: 1,
    f: 1,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 160,
    ⵠⲆⵠΔ: 182,
    time: 1 / 10,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 161,
    ⵠⲆⵠΔ: 183,
    time: 1 / 5,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 162,
    ⵠⲆⵠΔ: 198,
    time: 1 / 20,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 163,
    ⵠⲆⵠΔ: 223,
    time: 1 / 50,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 164,
    ⵠⲆⵠΔ: 224,
    time: 1 / 50,
    ⵠⲆΔ: 4
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 165,
    ⵠⲆⵠΔ: 89,
    time: 1 / 20,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 250], [161, 10], [120, 10], [231, 8]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 166,
    ⵠⲆⵠΔ: 230,
    time: 1 / 50,
    ⵠⲆΔ: 4
  }, {
    r: [[109, 40]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 167,
    ⵠⲆⵠΔ: 94,
    time: 1 / 5,
    ⵠⲆΔ: 1
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 168,
    ⵠⲆⵠΔ: 95,
    time: 1 / 10,
    ⵠⲆΔ: 1
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 169,
    ⵠⲆⵠΔ: 96,
    time: 0.05,
    ⵠⲆΔ: 1
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 170,
    ⵠⲆⵠΔ: 97,
    time: 0.03333333333333333,
    ⵠⲆΔ: 1
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 171,
    ⵠⲆⵠΔ: 98,
    time: 0.016666666666666666,
    ⵠⲆΔ: 1
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    ⲆⲆⲆ: 0,
    e: 0,
    id: 172,
    ⵠⲆⵠΔ: 99,
    time: 0.011111111111111112,
    ⵠⲆΔ: 1
  }];
  ss = 300;
  ᐃⵠᐃ = {
    ᐃⲆⵠⲆΔᐃΔ: 300,
    ⲆΔᐃᐃⲆⵠⵠ: 301,
    ⲆΔⵠΔⵠᐃᐃ: 302,
    ⵠΔⲆᐃᐃΔᐃ: 303,
    ⲆΔⲆⵠΔⲆᐃ: 304,
    ΔⵠⵠΔⵠⵠⵠ: 305,
    ΔⵠⵠΔⵠΔⵠ: 306,
    ΔⲆⵠᐃⲆⲆΔ: 307,
    ᐃΔᐃⵠⲆⲆⵠ: 308,
    ⲆⵠᐃⲆΔⵠⵠ: 309,
    ⲆⵠⲆᐃⲆⵠⲆ: 310,
    ⵠᐃⵠⲆⵠΔΔ: 311,
    EMPTY: 312,
    ⲆΔⲆᐃⵠⵠᐃ: 313,
    ᐃⲆᐃⲆᐃⵠΔ: 314,
    ⲆᐃⵠΔΔⵠΔ: 315,
    ᐃᐃⵠΔⲆⵠΔ: 316,
    ᐃⵠⵠᐃΔⵠΔ: 317,
    ΔⵠⲆⲆᐃⲆᐃ: 318,
    ⵠⲆΔⵠⲆΔⵠ: 319,
    ΔⵠⵠⲆΔΔᐃ: 320,
    ⲆⲆⵠⵠᐃⵠΔ: 321,
    ᐃᐃⲆᐃⲆ: 322,
    ΔⲆΔⵠᐃⲆᐃ: 323,
    ΔⵠᐃΔᐃ: 324,
    ΔⲆⵠⲆΔᐃᐃ: 325,
    ⲆⵠⵠᐃΔᐃⲆ: 326,
    ᐃⵠⵠⲆΔⲆⲆ: 327,
    ⲆᐃⵠᐃᐃᐃΔ: 328,
    ⲆⵠᐃⲆᐃⵠⵠ: 329,
    ᐃΔⲆⲆᐃⲆⲆ: 330,
    ⲆⲆᐃᐃⲆᐃⵠ: 331,
    POINTS: 332,
    ⲆⵠⵠᐃΔⵠⵠ: 333,
    ΔⵠΔⵠᐃΔΔ: 334,
    ⲆⲆΔⲆⵠⵠᐃ: 335,
    ⲆᐃⲆᐃⲆⵠᐃ: 336,
    ⲆΔⲆΔΔⵠⲆ: 337,
    ⲆᐃⲆΔΔᐃⲆ: 338,
    ⲆΔΔᐃⵠᐃⲆ: 339,
    ⲆΔⲆᐃᐃⵠⲆ: 340,
    ⵠΔⲆΔΔⵠⲆ: 341,
    ᐃⲆᐃᐃᐃⲆⵠ: 342,
    ⵠⵠⵠΔⲆᐃΔ: 343
  };
  const Ct = 100;
  function ib() {
    yb[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    yb[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    yb[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    yb[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    yb[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    yb[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    yb[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    yb[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    yb[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    yb[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    yb[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    yb[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    yb[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    yb[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    yb[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    yb[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    yb[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    yb[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    yb[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    yb[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    yb[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    yb[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    yb[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    yb[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    yb[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    yb[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    yb[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    yb[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    yb[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    yb[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    yb[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    yb[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    yb[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    yb[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    yb[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    yb[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    yb[232] = ["Vulture Feather", "From a deadly vulture"];
    yb[234] = ["Emerald", "How many golden breads can you get from it?"];
    yb[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    yb[80] = ["Turban", "Useful to survive in the desert."];
    yb[81] = ["Ninja outfit", "Essential to survive in the desert"];
    yb[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    yb[236] = ["Pilot Glasses"];
    yb[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    yb[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    yb[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    yb[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    yb[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    yb[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    yb[89] = ["Saddle", "Hit a boar with it to tame it."];
    yb[90] = ["Witch Hat", "You're a wizard Starvy!"];
    yb[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    yb[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    yb[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    yb[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    yb[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    yb[224] = ["Sled", "You are faster with it in the snow"];
    yb[223] = ["Boat", "You are faster with it in the water"];
    yb[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    yb[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 70"];
    yb[222] = ["Penguin Feather", "From a deadly cute penguin."];
    yb[231] = ["Hawk Feather", "From a deadly hawk."];
    yb[233] = ["Cactus", "Food : 20", "Water : 10"];
    yb[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    yb[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    yb[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    yb[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    yb[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    yb[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    yb[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    yb[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    yb[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    yb[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    yb[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    yb[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    yb[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    yb[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    yb[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    yb[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    yb[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    yb[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    yb[53] = ["Pitchfork", "Perfect for gathering"];
    yb[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    yb[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    yb[ys.ⵠᐃⵠΔⲆΔⲆ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    yb[ys.ⵠⲆⵠᐃᐃΔⵠ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    yb[ys.ᐃΔᐃΔᐃⵠᐃ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    yb[ys.ⵠⲆΔᐃΔⲆⲆ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    yb[ys.ΔᐃΔⵠⲆⲆⵠ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    yb[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    yb[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    yb[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    yb[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    yb[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    yb[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    yb[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    yb[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    yb[203] = ["Flame", "It's hot!"];
    yb[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    yb[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    yb[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    yb[202] = ["Reidite", "The ultimate ore"];
    yb[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Dt[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    Dt[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    Dt[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    Dt[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    Dt[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    Dt[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    Dt[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    Dt[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    Dt[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    Dt[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    Dt[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    Dt[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    Dt[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    Dt[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    Dt[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    Dt[38] = ["You died crushed by an angry baby mammoth."];
    Dt[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    Dt[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    yb[341] = "A sandstorm is approaching in a few seconds.";
    yb[340] = "The sandstorm will soon stop.";
    yb[343] = "A blizzard is approaching in a few seconds.";
    yb[342] = "The blizzard will soon stop.";
    yb[328] = " BACK TO THE GAME";
    yb[329] = " Share on Twitter";
    yb[330] = " Share on Facebook";
    yb[331] = "You can buy items on the shop in the next game with your points";
    yb[332] = "points";
    yb[333] = "Score";
    yb[334] = "Kill";
    yb[335] = "Days survived";
    yb[336] = "Building method: Free. Press G to change";
    yb[337] = "Building method: Grid. Press G to change";
    yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    yb[7] = ["Hand"];
    yb[140] = ["Dirt", "Dirty!"];
    yb[126] = ["Sand", "I got it in my eyes!"];
    yb[109] = ["Wood", "You can't get enough of it!"];
    yb[108] = ["Stone", "Also called a rock"];
    yb[111] = ["Gold", "Be generous, give it to others"];
    yb[112] = ["Diamond", "What will you make with it?"];
    yb[121] = ["Amethyst", "It's Mauve like Lapa"];
    yb[131] = ["Flour", "Used in cooking"];
    yb[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    yb[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    yb[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    yb[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    yb[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    yb[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    yb[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    yb[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    yb[200] = ["Candies", "Only for children!", "Food: 20"];
    yb[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    yb[201] = ["Garland", "Perfect decoration for roofs"];
    yb[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    yb[110] = ["Berry", "Berry tasty!", "Food: 10"];
    yb[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    yb[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    yb[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    yb[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    yb[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    yb[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    yb[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    yb[194] = ["Thorn bush", "It stings!"];
    yb[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    yb[142] = ["Ice", "Useful for making cakes and water"];
    yb[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    yb[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    yb[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    yb[178] = ["Pure Fur", "You're a bread factory"];
    yb[179] = ["Dark Fur", "You get ready to do something wrong"];
    yb[146] = ["Winter Fur", "These animals just wanted a hug..."];
    yb[139] = ["Scales", "It smells like fish!"];
    yb[129] = ["Kraken Skin", "Weren't you too scared?"];
    yb[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    yb[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    yb[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    yb[161] = ["Cord", "Used in crafting Hats and Bag"];
    yb[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    yb[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    yb[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    yb[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    yb[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    yb[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    yb[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    yb[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    yb[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    yb[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    yb[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    yb[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    yb[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    yb[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    yb[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    yb[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    yb[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    yb[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    yb[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    yb[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
    yb[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    yb[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    yb[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    yb[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    yb[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    yb[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    yb[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    yb[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    yb[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    yb[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    yb[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    yb[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    yb[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    yb[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    yb[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    yb[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    yb[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    yb[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    yb[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    yb[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    yb[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    yb[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    yb[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    yb[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    yb[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    yb[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    yb[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    yb[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    yb[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    yb[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    yb[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    yb[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    yb[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    yb[177] = ["Blue Gemstone", "For too kind people"];
    yb[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    yb[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    yb[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    yb[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    yb[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    yb[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    yb[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    yb[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    yb[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    yb[29] = ["Bag", "More space for your items!"];
    yb[120] = ["Paper", "Used in book-crafting"];
    yb[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    yb[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    yb[148] = ["Lock", "Allow you to lock your chest"];
    yb[158] = ["Lock-pick", "Allows you to unlock one chest"];
    yb[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    yb[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    yb[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    yb[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    yb[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    yb[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    yb[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    yb[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    yb[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    yb[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    yb[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    yb[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    yb[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    yb[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    yb[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    yb[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    yb[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    yb[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    yb[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    yb[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    yb[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    yb[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    yb[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    yb[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    yb[300] = "You cannot join this server";
    yb[301] = "Kicked: ";
    yb[302] = "Your key is already used by someone else";
    yb[303] = "Your key is wrong";
    yb[304] = "You have an old version, you need to clear your cache";
    yb[338] = "Your client version is too recent for this server. The server is being updated";
    yb[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    yb[305] = "There are no more new resources";
    yb[306] = "You survived 1 day";
    yb[307] = "You survived ";
    yb[308] = " days";
    yb[309] = "You are dead ;-;";
    yb[310] = "Server cannot find spawn location! Spam the play button!";
    yb[311] = "Server is full! Spam the play button!";
    yb[312] = "Resource is empty";
    yb[313] = "Inventory is full (right-click to empty items)";
    yb[314] = " is dead";
    yb[315] = "This is not the right tool";
    yb[316] = "You joined a team";
    yb[317] = "You are dead";
    yb[318] = " joined the team";
    yb[319] = "Your team was destroyed";
    yb[320] = "You left the team";
    yb[321] = " left the team";
    yb[322] = "Someone stole your token :>";
    yb[323] = "Choose a server";
    yb[324] = "players";
    yb[325] = "total players";
    yb[326] = "players on this mode";
    yb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    Dt[0] = ["You were killed for no reason"];
    Dt[1] = ["You starved to death, as the name of the game implies"];
    Dt[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    Dt[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    Dt[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    Dt[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    Dt[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    Dt[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    Dt[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    Dt[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    Dt[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    Dt[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    Dt[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    Dt[13] = ["You died of thirst. Better drink your own piss."];
    Dt[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    Dt[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    Dt[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    Dt[17] = ["Your skin's falling apart, the sun killed you."];
    Dt[18] = ["Garlic stored in your pockets boiled your brain."];
    Dt[19] = ["As a vampire, don't stand near the garlic cloves."];
    Dt[20] = ["You ate garlic as a vampire, what did you expect?"];
    Dt[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ᐃⵠᐃΔⵠ = "Uuunnnggg";
    ⲆⵠᐃⲆΔᐃⲆ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  function tb() {
    yb[184] = ["You feel a great power emanating from this orb"];
    Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    yb[328] = " BACK TO THE GAME";
    yb[329] = " Share on Twitter";
    yb[330] = " Share on Facebook";
    yb[331] = "You can buy items on the shop in the next game with your points";
    yb[332] = "points";
    yb[333] = "Score";
    yb[334] = "Kill";
    yb[335] = "Days survived";
    yb[336] = "Building method: Free. Press G to change";
    yb[337] = "Building method: Grid. Press G to change";
    yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    yb[7] = ["Рука"];
    yb[140] = ["Земля", "Грязно!"];
    yb[126] = ["Песок", "Он в моих глазах!"];
    yb[109] = ["Дерево", "Постоянно нужно больше!"];
    yb[108] = ["Камень", "Твердый"];
    yb[111] = ["Золото", "Будьте щедры, давайте его другим"];
    yb[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    yb[121] = ["Аметист", "Он сиреневый, как Lapa"];
    yb[131] = ["Мука", "Используется в готовке"];
    yb[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    yb[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    yb[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    yb[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    yb[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    yb[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    yb[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    yb[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    yb[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    yb[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    yb[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    yb[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    yb[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    yb[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    yb[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    yb[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    yb[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    yb[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    yb[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    yb[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    yb[194] = ["Колючий Куст", "Это больно!"];
    yb[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    yb[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    yb[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    yb[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    yb[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    yb[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    yb[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    yb[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    yb[139] = ["Чешуя", "Она пахнет рыбой!"];
    yb[129] = ["Шкура Кракена", "Вы не испугались?"];
    yb[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    yb[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    yb[114] = ["Верстак", "Необходим для создания многих предметов"];
    yb[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    yb[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    yb[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    yb[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    yb[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    yb[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    yb[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    yb[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    yb[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    yb[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    yb[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    yb[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    yb[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    yb[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    yb[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    yb[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    yb[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    yb[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    yb[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    yb[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    yb[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    yb[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    yb[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    yb[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    yb[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    yb[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    yb[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    yb[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    yb[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    yb[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    yb[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    yb[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    yb[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    yb[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    yb[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    yb[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    yb[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    yb[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    yb[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    yb[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    yb[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    yb[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    yb[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    yb[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    yb[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    yb[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    yb[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    yb[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    yb[185] = ["Шар Дракона", "Даётся за квест"];
    yb[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    yb[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    yb[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    yb[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    yb[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    yb[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    yb[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    yb[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    yb[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    yb[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    yb[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    yb[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    yb[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    yb[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    yb[120] = ["Бумага", "Используется при создании книги"];
    yb[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    yb[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    yb[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    yb[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    yb[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    yb[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    yb[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    yb[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    yb[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    yb[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    yb[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    yb[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    yb[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    yb[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    yb[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    yb[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    yb[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    yb[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    yb[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    yb[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    yb[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    yb[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    yb[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    yb[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    yb[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    yb[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    yb[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    yb[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    yb[300] = "Вы не можете зайти на этот сервер";
    yb[301] = "Выгнаны: ";
    yb[302] = "Ваш ключ уже используется кем-то";
    yb[303] = "Ваш ключ неправильный";
    yb[304] = "У вас старая версия, вам нужно очистить кеш";
    yb[305] = "Ресурсов больше нет";
    yb[306] = "Вы выжили 1 день";
    yb[307] = "Вы выжили ";
    yb[308] = " дней";
    yb[309] = "Вы умерли ;-;";
    yb[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    yb[311] = "Сервер заполнен! Спамьте кнопку играть!";
    yb[312] = "Ресурсы закончились";
    yb[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    yb[314] = " умер";
    yb[315] = "Это не тот инструмент";
    yb[316] = "Вы вошли в команду";
    yb[317] = "Вы умерли";
    yb[318] = " вошёл в команду";
    yb[319] = "Ваша команда была разрушена";
    yb[320] = "Вы покинули команду";
    yb[321] = " покинул команду";
    yb[322] = "Кто-то использует ваш токен :>";
    yb[323] = "Выберите сервер";
    yb[324] = "игроков";
    yb[325] = "игроков всего";
    yb[326] = "игроков в этом режиме";
    yb[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    Dt[0] = ["Вы были убиты без причины"];
    Dt[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    Dt[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    Dt[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    Dt[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    Dt[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    Dt[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    Dt[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    Dt[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    Dt[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    Dt[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    Dt[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    Dt[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    Dt[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    Dt[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    Dt[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    Dt[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    Dt[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    Dt[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    Dt[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    Dt[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    Dt[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ᐃⵠᐃΔⵠ = "Uuunnnggg";
    ⲆⵠᐃⲆΔᐃⲆ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function nb(a, b, c, d) {
    Mj(mf, a, b, c, d);
    return ((163 + (function (a, b) {
      Gi(mf, a, b);
      const c = Ok(Lw[0], Lw[1], Lw[0], Lw[1]);
      const d = Vf(Lw[0], Lw[1], Lw[0]);
      return (16 << ((c ^ d) >> 24 & 255)) + (0 << ((c ^ d) & 255)) + (8 << ((c ^ d) >> 8 & 255)) + (24 << ((c ^ d) >> 16 & 255));
    }(Lw[0], Lw[1]) ^ Vf(Lw[2], Lw[3], Lw[0]))) * 16807 + 0) % 2147483647;
  }
  function ob() {
    yb[184] = ["You feel a great power emanating from this orb"];
    Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    yb[328] = " BACK TO THE GAME";
    yb[329] = " Share on Twitter";
    yb[330] = " Share on Facebook";
    yb[331] = "You can buy items on the shop in the next game with your points";
    yb[332] = "points";
    yb[333] = "Score";
    yb[334] = "Kill";
    yb[335] = "Days survived";
    yb[336] = "Building method: Free. Press G to change";
    yb[337] = "Building method: Grid. Press G to change";
    yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    yb[7] = ["mão"];
    yb[140] = ["terra", "está sujo!"];
    yb[126] = ["areia", "entrou nos meus olhos!"];
    yb[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    yb[108] = ["pedra", "também chamado rocha"];
    yb[111] = ["ouro", "seja generoso, dê para outros"];
    yb[112] = ["diamante", "o que você irá fazer com isso?"];
    yb[121] = ["ametista", "é mauve como lapa"];
    yb[131] = ["farinha", "usada na cozinha"];
    yb[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    yb[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    yb[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    yb[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    yb[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    yb[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    yb[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    yb[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    yb[200] = ["doces", "apenas para crianças!", "comida: 100"];
    yb[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    yb[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    yb[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    yb[110] = ["berry", "Berry saborosa!", "comida: 10"];
    yb[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    yb[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    yb[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    yb[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    yb[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    yb[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    yb[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    yb[194] = ["mato de espinhos", "pica!"];
    yb[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    yb[142] = ["gelo", "útil para fazer bolo e água"];
    yb[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    yb[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    yb[2] = ["pele de coelho", "o coelho era tão fofo..."];
    yb[178] = ["pele pura", "você é uma fábrica de pão"];
    yb[179] = ["pele negra", "você está pronto para fazer algo errado"];
    yb[146] = ["pele de inverno", "ele só queria um abraço"];
    yb[139] = ["escala", "é pequeno como peixe!"];
    yb[129] = ["pele do kraken", "você não está com medo?"];
    yb[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    yb[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    yb[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    yb[161] = ["linha", "usada para fazer chapéus e mochila"];
    yb[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    yb[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    yb[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    yb[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    yb[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    yb[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    yb[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    yb[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    yb[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    yb[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    yb[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    yb[ys.ΔⵠⲆⵠⵠᐃⲆΔⲆ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    yb[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    yb[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    yb[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    yb[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    yb[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    yb[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    yb[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    yb[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    yb[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    yb[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    yb[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    yb[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    yb[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    yb[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    yb[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    yb[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    yb[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    yb[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    yb[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    yb[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    yb[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    yb[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    yb[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    yb[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    yb[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    yb[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    yb[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    yb[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    yb[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    yb[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    yb[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    yb[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    yb[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    yb[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    yb[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    yb[185] = ["esfera do dragão", "dado na questt"];
    yb[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    yb[175] = ["pedra verde", "você não vai trapacear, promete?"];
    yb[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    yb[177] = ["pedra azul", "para pessoas muito gentis"];
    yb[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    yb[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    yb[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    yb[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    yb[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    yb[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    yb[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    yb[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    yb[49] = ["regador", "permite regar as plantas", "dano: 1"];
    yb[29] = ["mochila", "mais espaço para seus itens!"];
    yb[120] = ["papel", "usado para fazer o livro"];
    yb[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    yb[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    yb[148] = ["fechadura", "permite você trancar seu baú"];
    yb[158] = ["chave", "permite destrancar um baú"];
    yb[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    yb[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    yb[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    yb[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    yb[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    yb[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    yb[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    yb[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    yb[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    yb[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    yb[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    yb[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    yb[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    yb[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    yb[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    yb[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    yb[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    yb[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    yb[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    yb[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    yb[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    yb[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    yb[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    yb[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    yb[300] = "você não pode entrar no servidor";
    yb[301] = "kickado: ";
    yb[302] = "sua chave está em uso por outra pessoa";
    yb[303] = "sua chave está errada";
    yb[304] = "você tem uma versão velha, limpe seu cache";
    yb[305] = "não tem mais recursos";
    yb[306] = "você sobreviveu 1 dia";
    yb[307] = "você sobreviveu ";
    yb[308] = " dias";
    yb[309] = "você está morto ;-;";
    yb[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    yb[311] = "servidor está cheio! spam o botão de play!";
    yb[312] = "não tem recursos";
    yb[313] = "inventário está cheio (botão direito para deletar itens)";
    yb[314] = " está morto";
    yb[315] = "essa não é a ferramenta certa";
    yb[316] = "você entrou no time";
    yb[317] = "você está morto";
    yb[318] = "entrou no time";
    yb[319] = "seu time foi destruido";
    yb[320] = "você saiu do time";
    yb[321] = " saiu do time";
    yb[322] = "alguém roubou sua ficha :>";
    yb[323] = "escolha um servidor";
    yb[324] = "jogadores";
    yb[325] = "jogadores totais";
    yb[326] = "jogadores nesse modo";
    yb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    Dt[0] = ["você morreu sem motivo"];
    Dt[1] = ["você morreu de fome, como o jogo diz"];
    Dt[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    Dt[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    Dt[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    Dt[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    Dt[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    Dt[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    Dt[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    Dt[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    Dt[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    Dt[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    Dt[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    Dt[13] = ["você morreu de sede. melhor beber sua própria urina."];
    Dt[14] = ["você sabia que você morre afogado? agora você sabe."];
    Dt[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    Dt[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    Dt[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    Dt[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    Dt[19] = ["como vampiro, não chegue perto do alho."];
    Dt[20] = ["você comeu alho como vampiro, o que você esperava?"];
    Dt[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ᐃⵠᐃΔⵠ = "Uuunnnggg";
    ⲆⵠᐃⲆΔᐃⲆ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  const ab = 7772510;
  const rb = 7772510 .ⲆⲆⵠᐃᐃᐃΔⲆᐃ;
  const sb = `const ᐃΔⲆᐃⲆΔΔ = (typeof ⲆᐃᐃⵠΔⲆⲆ === "${rb}") ? 1 : 0; return ᐃΔⲆᐃⲆΔΔ;`;
  const hb = 4;
  const gb = 2;
  const lb = 0;
  function ub() {
    yb[184] = ["You feel a great power emanating from this orb"];
    Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    yb[328] = " BACK TO THE GAME";
    yb[329] = " Share on Twitter";
    yb[330] = " Share on Facebook";
    yb[331] = "You can buy items on the shop in the next game with your points";
    yb[332] = "points";
    yb[333] = "Score";
    yb[334] = "Kill";
    yb[335] = "Days survived";
    yb[336] = "Building method: Free. Press G to change";
    yb[337] = "Building method: Grid. Press G to change";
    yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    yb[7] = ["Mano"];
    yb[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    yb[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    yb[109] = ["Madera", "¡Nunca hay suficiente!"];
    yb[108] = ["Piedra", "También llamada roca."];
    yb[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    yb[112] = ["Diamante", "¿Que vas a hacer con él?"];
    yb[121] = ["Amatista", "Es Mauve como Lapa"];
    yb[131] = ["Harina", "Usada para cocinar."];
    yb[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    yb[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    yb[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    yb[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    yb[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    yb[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    yb[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    yb[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    yb[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    yb[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    yb[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    yb[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    yb[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    yb[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    yb[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    yb[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    yb[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    yb[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    yb[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    yb[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    yb[194] = ["Planta de Espinas", "¡Te daña!"];
    yb[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    yb[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    yb[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    yb[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    yb[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    yb[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    yb[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    yb[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    yb[139] = ["Escamas", "¡Huele a pescado!"];
    yb[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    yb[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    yb[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    yb[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    yb[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    yb[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    yb[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    yb[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    yb[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    yb[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    yb[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    yb[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    yb[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    yb[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    yb[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    yb[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    yb[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    yb[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    yb[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    yb[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    yb[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    yb[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    yb[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    yb[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    yb[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    yb[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    yb[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    yb[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    yb[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    yb[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    yb[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    yb[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    yb[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    yb[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    yb[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    yb[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    yb[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    yb[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    yb[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    yb[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    yb[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    yb[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    yb[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    yb[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    yb[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    yb[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    yb[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    yb[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    yb[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    yb[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    yb[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    yb[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    yb[185] = ["Esfera del Dragón", "Dada en la misión"];
    yb[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    yb[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    yb[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    yb[177] = ["Gema Azul", "Para gente muy amable"];
    yb[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    yb[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    yb[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    yb[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    yb[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    yb[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    yb[128] = ["Botella Vacia", "La puedes llenar de agua"];
    yb[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    yb[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    yb[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    yb[120] = ["Hoja", "Usada para hacer un libro"];
    yb[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    yb[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    yb[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    yb[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    yb[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    yb[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    yb[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    yb[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    yb[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    yb[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    yb[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    yb[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    yb[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    yb[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    yb[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    yb[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    yb[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    yb[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    yb[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    yb[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    yb[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    yb[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    yb[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    yb[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    yb[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    yb[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    yb[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    yb[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    yb[300] = "No puedes unirte a este servidor";
    yb[301] = "Expulsado: ";
    yb[302] = "Tu llave ya está usada";
    yb[303] = "Tu llave está mal";
    yb[304] = "Tienes una versión antigua, limpia tu cache";
    yb[305] = "No hay mas recursos";
    yb[306] = "Has sobrevivido 1 día";
    yb[307] = "Has sobrevivido ";
    yb[308] = " días";
    yb[309] = "Estás muerto ;-;";
    yb[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    yb[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    yb[312] = "Recurso vacio";
    yb[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    yb[314] = " está muerto";
    yb[315] = "Esta no es la herramienta correcta";
    yb[316] = "Te has unido a un equipo";
    yb[317] = "Estás muerto";
    yb[318] = " se unió al equipo";
    yb[319] = "Tu equipo ha sido destruido";
    yb[320] = "Has dejado el equipo";
    yb[321] = " dejo el equipo ";
    yb[322] = "Alguien te robó tu token :>";
    yb[323] = "Elige un servidor";
    yb[324] = "jugadores";
    yb[325] = "total de jugadores";
    yb[326] = "Jugadores en este modo de juego";
    yb[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    Dt[0] = ["Has muerto por ninguna razón"];
    Dt[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    Dt[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    Dt[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    Dt[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    Dt[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    Dt[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    Dt[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    Dt[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    Dt[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    Dt[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    Dt[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    Dt[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    Dt[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    Dt[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    Dt[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    Dt[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    Dt[17] = ["Tu piel se cayó, el sol te quemó."];
    Dt[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    Dt[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    Dt[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    Dt[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ᐃⵠᐃΔⵠ = "Uuunnnggg";
    ⲆⵠᐃⲆΔᐃⲆ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  const bb = 7;
  function db() {
    yb[184] = ["You feel a great power emanating from this orb"];
    Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    yb[328] = " BACK TO THE GAME";
    yb[329] = " Share on Twitter";
    yb[330] = " Share on Facebook";
    yb[331] = "You can buy items on the shop in the next game with your points";
    yb[332] = "points";
    yb[333] = "Score";
    yb[334] = "Kill";
    yb[335] = "Days survived";
    yb[336] = "Building method: Free. Press G to change";
    yb[337] = "Building method: Grid. Press G to change";
    yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    yb[7] = ["Hand"];
    yb[140] = ["Boden", "Dreckig!"];
    yb[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    yb[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    yb[108] = ["Stein", "Auch Fels gennant"];
    yb[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    yb[112] = ["Diamant", "Was wirst du daraus machen?"];
    yb[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    yb[131] = ["Mehl", "wird fürs Backen gebraucht"];
    yb[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    yb[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    yb[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    yb[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    yb[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    yb[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    yb[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    yb[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    yb[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    yb[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    yb[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    yb[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    yb[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    yb[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    yb[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    yb[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    yb[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    yb[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    yb[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    yb[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    yb[194] = ["Dornenbusch", "Es sticht!"];
    yb[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    yb[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    yb[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    yb[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    yb[2] = ["Hasenfell", "Der Hase war so süß..."];
    yb[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    yb[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    yb[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    yb[139] = ["Schuppen", "Es riecht wie Fisch!"];
    yb[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    yb[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    yb[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    yb[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    yb[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    yb[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    yb[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    yb[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    yb[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    yb[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    yb[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    yb[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    yb[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    yb[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    yb[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    yb[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    yb[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    yb[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    yb[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    yb[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    yb[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    yb[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    yb[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    yb[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    yb[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    yb[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    yb[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    yb[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    yb[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    yb[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    yb[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    yb[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    yb[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    yb[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    yb[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    yb[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    yb[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    yb[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    yb[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    yb[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    yb[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    yb[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    yb[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    yb[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    yb[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    yb[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    yb[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    yb[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    yb[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    yb[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    yb[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    yb[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    yb[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    yb[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    yb[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    yb[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    yb[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    yb[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    yb[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    yb[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    yb[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    yb[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    yb[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    yb[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    yb[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    yb[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    yb[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    yb[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    yb[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    yb[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    yb[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    yb[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    yb[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    yb[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    yb[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    yb[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    yb[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    yb[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    yb[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    yb[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    yb[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    yb[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    yb[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    yb[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    yb[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    yb[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    yb[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    yb[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    yb[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    yb[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    yb[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    yb[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    yb[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    yb[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    yb[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    yb[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    yb[300] = "Du kannst diesem Server nicht beitreten";
    yb[301] = "Gekickt: ";
    yb[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    yb[303] = "Dein Schlüssel ist falsch";
    yb[304] = "Deine Version ist veraltet, säubere dein Cache";
    yb[305] = "Es gibt keine neuen Ressourcen";
    yb[306] = "Du hast einen Tag überlebt";
    yb[307] = "Du hast überlebt ";
    yb[308] = " Tage";
    yb[309] = "Du bist gestorben ;-;";
    yb[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    yb[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    yb[312] = "Ressource ist leer";
    yb[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    yb[314] = " ist gestorben";
    yb[315] = "Das ist nicht das richtige Werkzeug";
    yb[316] = "Du bist einem Team beigetreten";
    yb[317] = "Du bist gestorben";
    yb[318] = " ist dem Team beigetreten";
    yb[319] = "Dein Team wurde zerstört";
    yb[320] = "Du hast das Team verlassen";
    yb[321] = " hat das Team verlassen";
    yb[322] = "Jemand hat dein Token gestohlen :>";
    yb[323] = "Suche dir ein Server aus";
    yb[324] = "Spieler";
    yb[325] = "alle Spieler";
    yb[326] = "Spieler in diesem Modus";
    yb[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    Dt[0] = ["Du wurdest ohne Grund getötet"];
    Dt[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    Dt[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    Dt[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    Dt[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    Dt[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    Dt[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    Dt[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    Dt[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    Dt[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    Dt[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    Dt[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    Dt[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    Dt[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    Dt[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    Dt[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    Dt[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    Dt[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    Dt[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    Dt[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    Dt[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    Dt[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ᐃⵠᐃΔⵠ = "Uuunnnggg";
    ⲆⵠᐃⲆΔᐃⲆ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const vb = 17;
  function mb(a) {
    return Ph.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⵠⲆΔⲆⲆⲆᐃ: 3871367,
      ΔⲆΔⲆⵠⵠⲆ: 15512898,
      ΔⲆⲆⵠᐃⲆⲆⵠⲆ: 11035572,
      ⵠΔⵠΔΔΔᐃ: 8461661
    };
  })();
  const cb = 16;
  const pb = 1;
  const Cb = 8;
  function Tb() {
    yb[184] = ["You feel a great power emanating from this orb"];
    Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    yb[328] = " BACK TO THE GAME";
    yb[329] = " Share on Twitter";
    yb[330] = " Share on Facebook";
    yb[331] = "You can buy items on the shop in the next game with your points";
    yb[332] = "points";
    yb[333] = "Score";
    yb[334] = "Kill";
    yb[335] = "Days survived";
    yb[336] = "Building method: Free. Press G to change";
    yb[337] = "Building method: Grid. Press G to change";
    yb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    yb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    yb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    yb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    yb[7] = ["Ręka"];
    yb[140] = ["Ziemia", "Brudna!"];
    yb[126] = ["Piasek", "Mam go w oczach!"];
    yb[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    yb[108] = ["Kamień", "Także nazywany skałą"];
    yb[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    yb[112] = ["Diament", "Co z nim zrobisz?"];
    yb[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    yb[131] = ["Mąka", "Używana w gotowaniu"];
    yb[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    yb[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    yb[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    yb[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    yb[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    yb[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    yb[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    yb[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    yb[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    yb[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    yb[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    yb[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    yb[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    yb[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    yb[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    yb[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    yb[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    yb[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    yb[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    yb[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    yb[194] = ["Kolczasty krzew", "Kłuje!"];
    yb[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    yb[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    yb[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    yb[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    yb[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    yb[178] = ["Skóra", "Jesteś fabryką chleba"];
    yb[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    yb[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    yb[139] = ["Łuski", "Pachnie jak ryba!"];
    yb[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    yb[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    yb[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    yb[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    yb[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    yb[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    yb[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    yb[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    yb[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    yb[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    yb[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    yb[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    yb[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    yb[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    yb[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    yb[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    yb[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    yb[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    yb[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    yb[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    yb[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    yb[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    yb[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    yb[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    yb[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    yb[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    yb[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    yb[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    yb[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    yb[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    yb[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    yb[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    yb[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    yb[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    yb[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    yb[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    yb[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    yb[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    yb[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    yb[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    yb[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    yb[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    yb[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    yb[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    yb[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    yb[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    yb[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    yb[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    yb[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    yb[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    yb[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    yb[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    yb[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    yb[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    yb[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    yb[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    yb[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    yb[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    yb[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    yb[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    yb[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    yb[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    yb[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    yb[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    yb[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    yb[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    yb[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    yb[120] = ["Papier", "Używany w tworzeniu książki"];
    yb[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    yb[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    yb[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    yb[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    yb[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    yb[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    yb[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    yb[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    yb[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    yb[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    yb[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    yb[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    yb[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    yb[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    yb[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    yb[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    yb[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    yb[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    yb[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    yb[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    yb[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    yb[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    yb[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    yb[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    yb[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    yb[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    yb[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    yb[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    yb[300] = "Nie możesz dołączyć do tego serwera";
    yb[301] = "Wyrzucony: ";
    yb[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    yb[303] = "Twój klucz jest nieprawidłowy";
    yb[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    yb[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    yb[306] = "Przeżyłeś 1 dzień";
    yb[307] = "Przeżyłeś ";
    yb[308] = " dni";
    yb[309] = "Jesteś martwy ;-;";
    yb[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    yb[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    yb[312] = "Źródło jest puste";
    yb[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    yb[314] = " jest martwy";
    yb[315] = "To nie jest właściwe narzędzie";
    yb[316] = "Dołączyłeś do drużyny";
    yb[317] = "Jesteś martwy";
    yb[318] = " dołączył do drużyny";
    yb[319] = "Twoja drużyna została zniszczona";
    yb[320] = " Opuściłeś drużynę";
    yb[321] = " opuścił drużynę";
    yb[322] = "Ktoś ukradł twój żeton :>";
    yb[323] = "Wybierz serwer";
    yb[324] = "graczy";
    yb[325] = "wszystkich graczy";
    yb[326] = "graczy w tym trybie";
    yb[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    Dt[0] = ["Zostałeś zabity bez powodu"];
    Dt[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    Dt[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    Dt[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    Dt[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    Dt[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    Dt[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    Dt[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    Dt[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    Dt[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    Dt[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    Dt[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    Dt[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    Dt[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    Dt[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    Dt[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    Dt[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    Dt[17] = ["Twoja skóra odpada, słońce cię zabija."];
    Dt[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    Dt[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    Dt[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    Dt[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ᐃⵠᐃΔⵠ = "Uuunnnggg";
    ⲆⵠᐃⲆΔᐃⲆ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  function fb() {
    yb[184] = ["You feel a great power emanating from this orb"];
    Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    yb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    yb[328] = " RETOUR AU JEU";
    yb[329] = " Partage sur Twitter";
    yb[330] = " Partage sur Facebook";
    yb[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    yb[332] = "points";
    yb[333] = "Score";
    yb[334] = "Tués";
    yb[335] = "Jours survécus";
    yb[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    yb[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    yb[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    yb[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    yb[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    yb[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    yb[7] = ["Main"];
    yb[140] = ["Terre", "C'est sale!"];
    yb[126] = ["Sable", "J'en ai dans les yeux"];
    yb[109] = ["Bois", "Tu n'en auras jamais trop!"];
    yb[108] = ["Pierre", "Aussi appelée roche"];
    yb[111] = ["Or", "Sois généreux, donne en aux autres"];
    yb[112] = ["Diamant", "Comme tes yeux! wesh"];
    yb[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    yb[131] = ["Farine", "Utile pour la cuisine"];
    yb[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    yb[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    yb[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    yb[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    yb[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    yb[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    yb[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    yb[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    yb[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    yb[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    yb[201] = ["Guirlandes", "Utilisable sur les toits"];
    yb[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    yb[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    yb[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    yb[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    yb[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    yb[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    yb[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    yb[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    yb[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    yb[194] = ["Ronces", "Ça pique!"];
    yb[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    yb[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    yb[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    yb[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    yb[2] = ["Peau de lapin", "Vous êtes un monstre"];
    yb[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    yb[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    yb[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    yb[139] = ["Écailles", "Ça sent le poisson!"];
    yb[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    yb[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    yb[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    yb[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    yb[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    yb[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    yb[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    yb[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    yb[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    yb[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    yb[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    yb[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    yb[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    yb[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    yb[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    yb[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    yb[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    yb[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    yb[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    yb[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    yb[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    yb[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    yb[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    yb[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    yb[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    yb[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    yb[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    yb[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    yb[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    yb[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    yb[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    yb[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    yb[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    yb[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    yb[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    yb[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    yb[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    yb[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    yb[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    yb[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    yb[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    yb[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    yb[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    yb[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    yb[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    yb[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    yb[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    yb[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    yb[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    yb[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    yb[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    yb[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    yb[185] = ["Orbe du Dragon", "Donné en Quête"];
    yb[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    yb[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    yb[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    yb[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    yb[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    yb[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    yb[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    yb[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    yb[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    yb[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    yb[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    yb[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    yb[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    yb[29] = ["Sac", "Plus de place dans ton inventaire!"];
    yb[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    yb[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    yb[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    yb[148] = ["Cadenas", "Pour verrouiller un coffre"];
    yb[158] = ["Clé", "Pour déverrouiller un coffre"];
    yb[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    yb[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    yb[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    yb[190] = ["Toit", "Te cache un peu et te réchauffe"];
    yb[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    yb[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    yb[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    yb[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    yb[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    yb[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    yb[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    yb[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    yb[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    yb[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    yb[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    yb[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    yb[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    yb[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    yb[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    yb[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    yb[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    yb[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    yb[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    yb[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    yb[300] = "Tu ne peux pas rejoindre le serveur";
    yb[301] = "Expulsé: ";
    yb[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    yb[303] = "Ta clé est fausse";
    yb[304] = "Tu as une vieille version, rafraichis tes caches";
    yb[305] = "Il n'y a plus de nouvelles ressources";
    yb[306] = "Tu as survécu 1 jour";
    yb[307] = "Tu as survécu ";
    yb[308] = " jours";
    yb[309] = "Tu es mort ;-;";
    yb[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    yb[311] = "Le serveur est complet! Spam le bouton jouer";
    yb[312] = "Cette ressource est vide";
    yb[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    yb[314] = " est mort";
    yb[315] = "Ce n'est pas le bon outil";
    yb[316] = "Tu as rejoins une équipe";
    yb[317] = "Tu es mort";
    yb[318] = " a rejoint l'équipe";
    yb[319] = "Ton équipe a été détruite";
    yb[320] = "Tu as quitté l'équipe";
    yb[321] = " a quitté l'équipe";
    yb[322] = "Quelqu'un a volé ton token :>";
    yb[323] = "Choisis un serveur";
    yb[324] = "joueurs";
    yb[325] = "joueurs";
    yb[326] = "joueurs dans ce mode";
    yb[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    Dt[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    Dt[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    Dt[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    Dt[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    Dt[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    Dt[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    Dt[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    Dt[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    Dt[8] = ["Cet ours voulait juste un câlin."];
    Dt[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    Dt[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    Dt[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    Dt[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    Dt[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    Dt[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    Dt[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    Dt[16] = ["Un kraken a 'kraké' tes os."];
    Dt[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    Dt[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    Dt[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    Dt[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    Dt[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ᐃⵠᐃΔⵠ = "Uuunnnggg";
    ⲆⵠᐃⲆΔᐃⲆ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  const zb = 5;
  var yb = [];
  for (var wb = 0; wb < 344; wb++) {
    yb[wb] = "";
  }
  var Dt = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      ib();
    } else if (a === "Français") {
      fb();
    } else if (a === "Deutsch") {
      db();
    } else if (a === "Español") {
      ub();
    } else if (a === "Português") {
      ob();
    } else if (a === "Русский") {
      tb();
    } else if (a === "Polski") {
      Tb();
    }
    ⲆΔΔⲆΔ = [];
    lx.ⲆᐃΔΔ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  Or = "EN";
  const kb = 14;
  var Ab = navigator.language || navigator.userLanguage;
  const xb = 10;
  switch (Ab) {
    case "ru":
      Or = "RU";
      break;
    case "en":
      Or = "EN";
      break;
    case "es":
      Or = "SP";
      break;
    case "fr":
      Or = "FR";
      break;
    case "pl":
      Or = "PL";
      break;
    case "de":
      Or = "DE";
      break;
    case "pt":
      Or = "PT";
  }
  var Jb;
  if (Or === "FR") {
    $(".md-languages label button").text("Français");
    Jb = fb;
  } else if (Or === "PL") {
    $(".md-languages label button").text("Polski");
    Jb = Tb;
  } else if (Or === "PT") {
    $(".md-languages label button").text("Português");
    Jb = ob;
  } else if (Or === "SP") {
    $(".md-languages label button").text("Español");
    Jb = ub;
  } else if (Or === "RU") {
    $(".md-languages label button").text("Русский");
    Jb = tb;
  } else if (Or === "DE") {
    $(".md-languages label button").text("Deutsch");
    Jb = db;
  } else {
    $(".md-languages label button").text("English");
    Jb = ib;
  }
  ΔΔ = {
    ᐃᐃᐃⵠᐃᐃⵠⵠⲆ: "img/logo.png",
    ⲆᐃⲆᐃⲆᐃΔ: "img/mapday.png",
    ⵠᐃⲆⲆΔⲆΔ: "img/mapnight.png",
    ᐃΔⵠⲆΔⲆᐃΔⲆ: "img/bigzday.png",
    ⲆΔᐃΔⲆⵠⵠᐃᐃ: "img/bigznight.png",
    ᐃⵠᐃⵠⵠΔᐃ: "img/bigday-river1.png",
    ⵠⵠⲆⲆΔⵠⵠⵠᐃ: "img/bigday-lake.png",
    ⲆΔΔⵠⲆΔᐃ: "img/bigday-berry.png",
    ΔⲆⲆⲆⲆᐃⵠ: "img/bigday-stone1.png",
    ΔⲆⲆᐃⲆᐃⲆ: "img/bigday-stone2.png",
    ΔⲆᐃⲆΔⲆᐃ: "img/bigday-gold1.png",
    ᐃᐃⵠⲆᐃᐃᐃ: "img/bigday-gold2.png",
    ⲆⲆᐃⲆⲆΔΔ: "img/bigday-emerald1.png",
    ΔⲆⵠᐃⲆᐃΔ: "img/bigday-emerald2.png",
    ᐃⲆⲆⵠΔΔⵠ: "img/bigday-amethyst.png",
    ΔᐃⲆⵠⲆᐃⵠ: "img/bigday-bear.png",
    ⲆᐃⲆΔⲆᐃⵠ: "img/bigday-cave.png",
    ΔⵠⲆⵠⲆᐃⲆ: "img/bigday-diamond.png",
    ⵠΔⲆⵠΔᐃᐃ: "img/bigday-island.png",
    ⲆᐃΔⲆⵠⵠⵠ: "img/bigday-reidite.png",
    ΔⵠΔⵠΔⵠΔ: "img/bigday-spider.png",
    ⲆⲆⲆⵠΔⲆⵠ: "img/bigday-wolf.png",
    ᐃΔᐃⵠᐃⲆⲆ: "img/bigday-fir-tree.png",
    ⲆΔΔⲆΔΔᐃ: "img/bigday-fox.png",
    ⲆΔΔⵠᐃᐃⲆ: "img/bigday-kraken.png",
    ΔᐃᐃⵠⲆⵠⲆ: "img/bigday-piranha.png",
    ⲆⵠⲆΔΔⲆΔ: "img/bigday-cactus.png",
    ᐃⵠᐃᐃⲆᐃᐃ: "img/bigday-magma.png",
    ⵠⵠⵠⲆⵠⲆᐃ: "img/bigday-river1.png",
    ⵠⲆΔᐃΔⵠⲆⵠⵠ: "img/bignight-lake.png",
    ΔⵠᐃⵠⲆΔⵠᐃⵠ: "img/bignight-berry.png",
    ᐃⲆΔⵠⵠⵠⵠ: "img/bignight-stone1.png",
    ΔΔᐃⲆΔᐃᐃ: "img/bignight-stone2.png",
    ΔᐃⲆⲆΔⵠⵠ: "img/bignight-gold1.png",
    ΔᐃⲆΔᐃΔΔ: "img/bignight-gold2.png",
    ᐃΔΔⲆᐃΔⵠ: "img/bignight-emerald1.png",
    ⲆⵠΔΔⲆⵠᐃ: "img/bignight-emerald2.png",
    ΔⵠⲆᐃᐃⵠⲆ: "img/bignight-amethyst.png",
    ⲆⵠⲆΔⵠᐃΔ: "img/bignight-bear.png",
    ᐃᐃⲆΔΔⵠⲆ: "img/bignight-cave.png",
    ⲆⲆΔΔⲆᐃⵠ: "img/bignight-diamond.png",
    ᐃΔΔⵠΔᐃΔ: "img/bignight-island.png",
    ᐃⲆⵠⲆᐃᐃⲆ: "img/bignight-reidite.png",
    ΔⲆᐃⵠⵠΔΔ: "img/bignight-spider.png",
    ᐃᐃᐃᐃⲆⲆⵠ: "img/bignight-wolf.png",
    ⵠΔᐃⲆⲆⵠΔ: "img/bignight-fir-tree.png",
    ⵠⲆᐃᐃΔΔᐃ: "img/bignight-fox.png",
    ᐃᐃⵠᐃᐃⵠᐃ: "img/bignight-kraken.png",
    ⵠᐃΔⲆⵠⵠⲆ: "img/bignight-piranha.png",
    ⵠΔⲆⲆᐃⵠᐃ: "img/bignight-cactus.png",
    ⵠᐃΔᐃⵠⵠΔ: "img/bignight-magma.png",
    ⲆᐃᐃⲆΔⵠⵠ: "img/bigday-desert.png",
    ⵠΔΔΔΔⵠΔ: "img/bigday-winter.png",
    ⵠΔⵠⵠΔⲆⲆ: "img/bigday-lava.png",
    ⵠⵠⲆⵠⵠⲆΔ: "img/bigday-forest.png",
    ⵠⵠⲆⲆΔⵠΔ: "img/bignight-desert.png",
    ⲆⲆᐃᐃⲆΔᐃ: "img/bignight-winter.png",
    ⲆⵠⲆⲆⵠᐃΔ: "img/bignight-lava.png",
    ᐃⲆⵠⵠⵠⲆⵠ: "img/bignight-forest.png",
    ΔᐃⵠᐃᐃᐃΔ: "img/day-river-wave.png",
    ⵠᐃⲆΔⲆⵠⲆ: "img/night-river-wave.png",
    ⵠᐃΔⲆᐃⲆΔ: "img/day-fog0.png",
    ⲆⲆᐃⲆΔᐃΔ: "img/day-fog1.png",
    ᐃΔᐃⵠᐃⵠⵠ: "img/day-fog2.png",
    ⲆⲆᐃⲆⵠⲆⲆ: "img/night-fog0.png",
    ᐃᐃⲆΔⵠⲆⲆ: "img/night-fog1.png",
    ⵠⲆⲆΔΔⵠΔ: "img/night-fog2.png",
    ΔⲆⲆⵠⵠᐃᐃ: "img/day-fogdesert0.png",
    ⲆᐃᐃᐃⲆⲆᐃ: "img/day-fogdesert1.png",
    ΔⲆᐃⲆⲆΔⲆ: "img/day-fogdesert2.png",
    ΔⲆᐃΔⲆᐃⵠ: "img/night-fogdesert0.png",
    ⲆⲆᐃΔⲆΔⵠ: "img/night-fogdesert1.png",
    ⵠⵠⵠⵠⲆⲆⲆ: "img/night-fogdesert2.png",
    ⵠⲆⲆⲆΔᐃⲆ: "img/day-cross-server.png",
    ⲆⲆⵠᐃΔⲆⲆ: "img/day-here-server.png",
    ⵠⵠⲆᐃΔⵠΔ: "img/day-finish-server.png",
    ΔⲆⲆΔᐃΔᐃ: "img/day-item-server.png",
    ᐃⲆᐃⵠᐃⵠΔ: "img/day-skull-server.png",
    ᐃᐃⵠᐃᐃⲆⲆ: "img/night-cross-server.png",
    ᐃⵠⲆⵠⵠⲆᐃ: "img/night-here-server.png",
    ΔΔΔΔᐃΔⲆ: "img/night-finish-server.png",
    ⵠⵠΔᐃΔᐃΔ: "img/night-item-server.png",
    ⲆᐃⲆᐃⵠΔᐃ: "img/night-skull-server.png",
    ΔᐃᐃᐃᐃᐃⲆ: "img/day-reidite0.png",
    ᐃⵠΔⵠⲆΔⲆ: "img/night-reidite0.png",
    ᐃⲆΔⲆⵠⵠⵠ: "img/day-reidite1.png",
    ⵠΔⵠΔⵠⲆⲆ: "img/night-reidite1.png",
    ⲆΔᐃⵠⵠⵠⲆ: "img/day-reidite2.png",
    ⲆᐃⲆΔΔⵠⲆ: "img/night-reidite2.png",
    ⵠⵠᐃᐃⲆᐃⵠ: "img/day-lava1.png",
    ΔⵠΔⵠΔⲆⲆ: "img/night-lava1.png",
    ⵠⵠⲆⲆΔΔⵠ: "img/day-lava2.png",
    ⵠᐃΔᐃΔⵠᐃ: "img/night-lava2.png",
    ΔⵠⲆᐃⲆΔᐃ: "img/day-lava3.png",
    ⵠᐃⵠᐃⵠᐃᐃ: "img/night-lava3.png",
    ᐃⲆΔⲆΔᐃᐃ: "img/day-lava4.png",
    ⵠᐃᐃΔⵠⵠΔ: "img/night-lava4.png",
    ᐃᐃⵠᐃⵠⵠΔ: "img/day-lava5.png",
    ᐃΔⵠᐃⲆΔᐃ: "img/night-lava5.png",
    ᐃⵠΔΔΔⲆᐃ: "img/day-lava6.png",
    ⲆΔᐃⵠᐃΔΔ: "img/night-lava6.png",
    ⵠᐃᐃⵠᐃᐃΔ: "img/day-lava-ground1.png",
    ᐃΔⲆⵠⲆΔΔ: "img/night-lava-ground1.png",
    ⵠΔΔⲆᐃⵠⵠ: "img/day-lava-ground2.png",
    ⵠⵠΔΔᐃᐃⵠ: "img/night-lava-ground2.png",
    ᐃᐃᐃᐃᐃΔΔ: "img/day-lava-ground3.png",
    ⵠᐃΔⵠⲆΔΔ: "img/night-lava-ground3.png",
    ⵠⲆⵠⵠⵠΔⵠ: "img/day-lava-ground4.png",
    ⲆᐃⲆⵠᐃⵠⲆ: "img/night-lava-ground4.png",
    ΔⲆⵠⲆⵠΔⵠ: "img/day-lava-ground5.png",
    ΔⵠⵠΔⲆⲆᐃ: "img/night-lava-ground5.png",
    ⲆᐃⵠⲆᐃⵠᐃ: "img/day-lava-ground6.png",
    ᐃᐃⲆᐃⵠⲆⲆ: "img/night-lava-ground6.png",
    ΔᐃᐃⵠⵠⵠΔ: "img/day-fire-mob.png",
    ⲆⲆᐃⲆᐃΔΔ: "img/night-fire-mob.png",
    ΔⵠᐃⵠᐃᐃⲆ: "img/hurt-fire-mob.png",
    ΔΔΔΔΔᐃᐃ: "img/day-diamond-protection.png",
    ΔΔᐃΔⵠⲆΔ: "img/night-diamond-protection.png",
    ⲆⲆⵠΔⲆΔⲆ: "img/day-hand-diamond-protection.png",
    ⵠΔᐃⵠⲆΔⵠ: "img/night-hand-diamond-protection.png",
    ⵠᐃⲆⲆⵠⵠⲆ: "img/inv-diamond-protection-out.png",
    ⲆⵠⲆⵠΔΔΔ: "img/inv-diamond-protection-in.png",
    ΔᐃⲆᐃⲆⵠᐃ: "img/inv-diamond-protection-click.png",
    ᐃΔᐃΔⲆᐃᐃ: "img/day-amethyst-protection.png",
    ⵠΔΔⲆΔᐃⲆ: "img/night-amethyst-protection.png",
    ΔᐃⲆⲆⵠⲆⵠⵠΔ: "img/day-hand-amethyst-protection.png",
    ᐃⲆⲆΔⵠⲆΔᐃᐃ: "img/night-hand-amethyst-protection.png",
    ΔᐃᐃᐃⲆⵠΔ: "img/inv-amethyst-protection-out.png",
    ᐃΔⵠⵠᐃΔⵠ: "img/inv-amethyst-protection-in.png",
    ᐃⲆⲆⲆⵠⵠᐃ: "img/inv-amethyst-protection-click.png",
    ΔΔᐃΔᐃᐃⵠ: "img/day-reidite-sword.png",
    ΔⲆΔⵠΔⵠⲆ: "img/night-reidite-sword.png",
    Ⲇᐃᐃⵠⵠⵠᐃ: "img/inv-reidite-sword-out.png",
    ⲆᐃΔᐃⵠⵠΔ: "img/inv-reidite-sword-in.png",
    ⵠⲆΔⵠᐃᐃⲆ: "img/inv-reidite-sword-click.png",
    ΔᐃⵠᐃⲆⲆⵠ: "img/inv-reidite-out.png",
    ⲆⵠΔᐃᐃΔⲆ: "img/inv-reidite-in.png",
    ᐃⵠⲆⲆᐃⲆᐃ: "img/inv-reidite-click.png",
    ⵠᐃⵠⲆΔᐃᐃ: "img/inv-flame-out.png",
    ΔⲆᐃⵠᐃⲆᐃ: "img/inv-flame-in.png",
    ⲆⲆⲆⵠⲆⵠᐃ: "img/inv-flame-click.png",
    ⲆΔⵠⲆΔⲆΔ: "img/day-magma-buble0.png",
    ⵠⵠᐃⵠᐃⲆⲆ: "img/night-magma-buble0.png",
    ⵠⲆΔΔΔᐃᐃ: "img/day-magma-buble1.png",
    ⲆᐃΔΔᐃⵠⲆ: "img/night-magma-buble1.png",
    ⵠΔⲆⵠΔΔⵠ: "img/day-magma-buble2.png",
    ⵠⲆⲆΔΔⵠᐃ: "img/night-magma-buble2.png",
    ⲆⵠⲆᐃⲆⲆΔ: "img/day-lava-dragon.png",
    ΔⵠΔᐃⲆⵠᐃ: "img/night-lava-dragon.png",
    ΔΔᐃⵠⲆᐃⵠᐃⵠ: "img/day-fire-dragon.png",
    ᐃΔⲆᐃⵠΔΔⲆⵠ: "img/night-fire-dragon.png",
    ⵠⲆⵠΔⲆⲆⵠ: "img/hurt-lava-dragon.png",
    ᐃⲆᐃⲆΔⵠⵠ: "img/day-lava-wing-left.png",
    ᐃⲆᐃⲆΔⲆⲆ: "img/night-lava-wing-left.png",
    ᐃⲆΔΔΔΔᐃ: "img/day-lava-wing-right.png",
    ΔᐃⵠΔᐃⲆΔ: "img/night-lava-wing-right.png",
    ⲆΔⵠⵠⵠⲆΔ: "img/hurt-lava-wing-left.png",
    ⲆⲆⵠⵠᐃⵠᐃ: "img/hurt-lava-wing-right.png",
    ᐃᐃⲆΔⲆΔⲆ: "img/day-reidite-spear.png",
    ᐃⵠⵠⵠᐃᐃΔ: "img/night-reidite-spear.png",
    ⲆᐃⵠⲆΔᐃⲆ: "img/inv-reidite-spear-out.png",
    ⵠⲆΔⲆⲆᐃΔ: "img/inv-reidite-spear-in.png",
    ⵠΔⵠᐃᐃᐃΔ: "img/inv-reidite-spear-click.png",
    ⲆΔΔⵠΔΔⵠ: "img/day-reidite-helmet.png",
    ⲆΔⵠᐃΔΔᐃ: "img/night-reidite-helmet.png",
    ⲆΔⲆΔⲆΔⲆ: "img/inv-reidite-helmet-out.png",
    ᐃΔⲆΔᐃᐃⲆ: "img/inv-reidite-helmet-in.png",
    ᐃᐃⲆⲆⲆᐃⲆ: "img/inv-reidite-helmet-click.png",
    ⵠΔΔΔΔᐃᐃ: "img/day-hand-reidite-protection.png",
    ΔᐃᐃⲆΔΔⵠ: "img/night-hand-reidite-protection.png",
    ᐃⵠⵠⵠⲆⲆⲆ: "img/day-reidite-protection.png",
    ⵠⵠΔⲆΔΔⲆ: "img/night-reidite-protection.png",
    ⵠⲆᐃΔⲆⵠⵠ: "img/inv-reidite-protection-out.png",
    ⵠⵠᐃⲆᐃⲆⲆ: "img/inv-reidite-protection-in.png",
    ΔΔⵠⵠⵠΔⲆ: "img/inv-reidite-protection-click.png",
    ⲆᐃⵠⵠΔⲆⲆ: "img/day-lava-dragon-sword.png",
    ⵠⲆⲆΔᐃⲆΔ: "img/night-lava-dragon-sword.png",
    ᐃⲆᐃⵠⵠΔⲆ: "img/inv-lava-dragon-sword-out.png",
    ᐃⲆΔⵠᐃΔⲆ: "img/inv-lava-dragon-sword-in.png",
    ᐃⲆⵠᐃΔⲆᐃ: "img/inv-lava-dragon-sword-click.png",
    ⲆⲆᐃᐃᐃΔⲆ: "img/day-lava-spear.png",
    ⵠᐃᐃΔΔⵠΔ: "img/night-lava-spear.png",
    ΔᐃⵠΔᐃΔⵠ: "img/inv-lava-spear-out.png",
    ⲆᐃⵠᐃᐃΔᐃ: "img/inv-lava-spear-in.png",
    ΔᐃⲆᐃᐃΔΔ: "img/inv-lava-spear-click.png",
    ⵠΔⲆΔⵠΔⲆ: "img/day-lava-helmet.png",
    ΔⲆⲆᐃᐃΔⲆ: "img/night-lava-helmet.png",
    ΔᐃⵠᐃΔΔⵠ: "img/inv-lava-helmet-out.png",
    ᐃⲆⲆᐃⲆΔⲆ: "img/inv-lava-helmet-in.png",
    ⲆΔⵠⲆⲆⵠⲆ: "img/inv-lava-helmet-click.png",
    ΔᐃΔΔⵠᐃΔ: "img/day-witch-hat.png",
    ⵠⵠΔΔⵠᐃⵠ: "img/night-witch-hat.png",
    ⵠᐃᐃΔⲆΔΔ: "img/inv-witch-hat-out.png",
    ⵠΔᐃᐃΔΔΔ: "img/inv-witch-hat-in.png",
    ᐃΔᐃᐃⵠⵠⲆ: "img/inv-witch-hat-click.png",
    ΔⵠᐃⲆⲆⵠᐃ: "img/day-nimbus2000.png",
    ⵠⲆⵠΔⵠⵠⵠ: "img/night-nimbus2000.png",
    ⲆᐃᐃⵠΔᐃΔ: "img/inv-nimbus2000-out.png",
    ⵠΔⵠᐃΔⲆⲆ: "img/inv-nimbus2000-in.png",
    ΔⵠⵠΔΔΔᐃ: "img/inv-nimbus2000-click.png",
    ⲆⵠΔⵠᐃⲆⲆ: "img/day-accessory1-pacques.png",
    ⵠΔΔⲆⲆⲆⵠ: "img/night-accessory1-pacques.png",
    ᐃΔⵠΔᐃᐃᐃ: "img/day-accessory2-pacques.png",
    ⵠᐃΔⵠΔⲆⵠ: "img/night-accessory2-pacques.png",
    ΔΔᐃᐃΔΔᐃ: "img/day-accessory3-pacques.png",
    ᐃⵠΔⵠⵠⵠΔ: "img/night-accessory3-pacques.png",
    ⲆⲆΔⲆᐃⲆⲆ: "img/day-accessory5-pacques.png",
    ᐃⵠⵠⲆⲆⲆⵠ: "img/night-accessory5-pacques.png",
    ΔⲆΔΔΔΔΔ: "img/day-accessory6-pacques.png",
    ⲆᐃⵠᐃᐃΔⵠ: "img/night-accessory6-pacques.png",
    ᐃΔⵠⵠΔⵠᐃ: "img/day-accessory7-pacques.png",
    ⵠⲆⵠΔᐃⲆⲆ: "img/night-accessory7-pacques.png",
    ΔⵠⲆⵠᐃⵠᐃ: "img/day-accessory8-pacques.png",
    ⲆΔⵠⲆΔᐃⵠ: "img/night-accessory8-pacques.png",
    ⵠⵠΔΔⲆⲆᐃ: "img/day-bag-pacques.png",
    ᐃⵠΔⵠⲆΔᐃ: "img/night-bag-pacques.png",
    ⵠⲆⲆⲆⵠᐃΔ: "img/day-carrot.png",
    ⵠᐃΔⵠⲆⵠⵠ: "img/night-carrot.png",
    ΔⲆΔΔΔⲆⵠ: "img/day-carrot-dried.png",
    ᐃᐃΔΔΔΔᐃ: "img/night-carrot-dried.png",
    ⲆᐃⵠⵠⲆⵠᐃ: "img/day-tomato-herb.png",
    ΔΔᐃⵠⵠⲆⵠ: "img/night-tomato-herb.png",
    ⲆⲆⵠᐃᐃΔΔ: "img/day-tomato-herb-dried.png",
    ⲆⵠΔᐃΔⲆᐃ: "img/night-tomato-herb-dried.png",
    ΔᐃᐃⵠᐃⲆΔ: "img/day-tomato.png",
    ⲆΔⲆᐃᐃⲆⲆ: "img/night-tomato.png",
    ⲆⲆⲆⵠΔⲆⲆ: "img/inv-carrot-out.png",
    ⲆⵠⲆⵠⲆᐃΔ: "img/inv-carrot-in.png",
    ⲆⲆᐃΔΔⲆΔ: "img/inv-carrot-click.png",
    ⵠΔΔᐃⵠΔⵠ: "img/inv-tomato-out.png",
    ⵠΔⵠΔᐃⵠΔ: "img/inv-tomato-in.png",
    ᐃΔⵠᐃⵠⵠᐃ: "img/inv-tomato-click.png",
    ⵠᐃⵠΔⲆᐃᐃ: "img/day-player0.png",
    ⵠᐃᐃⲆΔᐃⵠ: "img/night-player0.png",
    ᐃⵠⲆᐃⲆΔⵠ: "img/day-player1.png",
    ᐃⲆΔⵠᐃⵠᐃ: "img/night-player1.png",
    ⲆⵠᐃⵠⲆⵠⵠ: "img/day-player2.png",
    ⵠᐃΔⲆΔⲆⵠ: "img/night-player22.png",
    ⲆⲆΔⵠᐃⲆᐃ: "img/day-player3.png",
    ⲆⲆⵠᐃⵠⵠᐃ: "img/night-player33.png",
    ΔⵠᐃⵠᐃΔⵠ: "img/day-player4.png",
    ᐃⲆⵠᐃᐃⲆΔ: "img/night-player4.png",
    ⵠᐃⲆΔⲆΔⵠ: "img/day-player5.png",
    ⲆᐃΔⵠΔΔⲆ: "img/night-player5.png",
    ⲆᐃⲆᐃΔᐃⵠ: "img/day-player6.png",
    ⲆᐃⲆⲆΔΔᐃ: "img/night-player6.png",
    ΔⲆΔΔΔΔⵠ: "img/day-player7.png",
    ᐃⵠⵠⵠⲆΔᐃ: "img/night-player7.png",
    ΔᐃΔⵠΔΔⲆ: "img/day-player8.png",
    ⵠⲆᐃⵠⵠᐃⲆ: "img/night-player8.png",
    ⵠᐃΔⲆⲆΔᐃ: "img/day-player9.png",
    ᐃᐃΔΔᐃⵠⵠ: "img/night-player9.png",
    ⵠᐃⲆᐃΔᐃᐃ: "img/day-player10.png",
    ⵠᐃΔⵠⵠᐃⵠ: "img/night-player10.png",
    ⵠⵠᐃⲆᐃᐃΔ: "img/day-player11.png",
    ᐃᐃⲆⲆᐃⵠⲆ: "img/night-player11.png",
    ⲆᐃᐃⲆⵠⵠᐃ: "img/day-player12.png",
    ᐃᐃΔᐃⲆᐃᐃ: "img/night-player12.png",
    ΔΔⲆⵠⵠⵠⵠ: "img/day-player13.png",
    ΔⲆⵠᐃⲆⵠΔ: "img/night-player13.png",
    ᐃΔⲆⲆΔⵠⲆ: "img/day-player14.png",
    ᐃΔᐃⲆⲆᐃᐃ: "img/night-player14.png",
    ⵠⲆΔΔΔⲆⲆ: "img/day-player15.png",
    ᐃⲆⵠΔᐃⵠⲆ: "img/night-player15.png",
    ΔΔⲆᐃⵠⵠⲆ: "img/day-player16.png",
    ⲆⲆⵠΔⲆᐃⵠ: "img/night-player16.png",
    ⲆⵠⲆᐃⵠᐃⲆ: "img/day-player17.png",
    ΔⵠⵠΔᐃⲆⵠ: "img/night-player17.png",
    ⵠⲆΔⲆⵠᐃΔ: "img/day-player18.png",
    ⲆⲆⵠΔΔⲆⲆ: "img/night-player18.png",
    ⲆⲆⲆⲆΔⲆΔ: "img/day-player19.png",
    ΔⵠᐃⲆⲆⵠΔ: "img/night-player19.png",
    ⲆᐃᐃΔⵠⵠΔ: "img/day-hand-player0.png",
    ΔᐃᐃᐃᐃⲆⲆ: "img/night-hand-player0.png",
    ΔⲆᐃᐃᐃⵠⵠ: "img/day-hand-player1.png",
    ᐃⵠⵠΔⲆⵠΔ: "img/night-hand-player1.png",
    ΔⲆⵠⵠᐃⲆⵠ: "img/day-hand-player2.png",
    Δᐃⵠⵠⵠᐃᐃ: "img/night-hand-player22.png",
    ΔᐃᐃⲆᐃᐃⲆ: "img/day-hand-player3.png",
    ⲆⲆⵠΔᐃᐃⵠ: "img/night-hand-player33.png",
    ᐃΔⵠᐃⵠΔΔ: "img/day-hand-player4.png",
    ᐃⲆᐃΔΔᐃⵠ: "img/night-hand-player4.png",
    ⲆᐃΔⵠⵠⵠⲆ: "img/day-hand-player5.png",
    ᐃⵠΔᐃⵠᐃΔ: "img/night-hand-player5.png",
    ⵠⲆᐃᐃⵠΔΔ: "img/day-hand-player6.png",
    ΔᐃΔⲆⵠᐃΔ: "img/night-hand-player6.png",
    ⵠΔⵠΔⲆΔΔ: "img/day-hand-player7.png",
    ΔⵠⵠⵠΔⲆΔ: "img/night-hand-player7.png",
    ⲆⵠΔⲆᐃΔⵠ: "img/day-hand-player8.png",
    ⲆᐃⵠⲆᐃⲆⲆ: "img/night-hand-player8.png",
    ᐃⵠⵠⵠΔⵠⵠ: "img/day-hand-player9.png",
    ⲆⵠΔⵠⲆΔⵠ: "img/night-hand-player9.png",
    ⲆⵠΔⲆΔᐃΔ: "img/day-hand-player10.png",
    ⲆΔⵠΔⲆⲆᐃ: "img/night-hand-player10.png",
    ⲆΔΔⲆᐃΔΔ: "img/day-hand-player11.png",
    ⵠⲆⲆᐃᐃⲆⵠ: "img/night-hand-player11.png",
    ΔⵠΔΔᐃⵠΔ: "img/day-hand-player12.png",
    ΔΔⲆΔⲆⵠᐃ: "img/night-hand-player12.png",
    ᐃⵠⵠΔΔⲆⵠ: "img/day-hand-player13.png",
    ᐃΔᐃⵠⲆᐃⲆ: "img/night-hand-player13.png",
    ⵠᐃΔᐃⵠⲆⵠ: "img/day-hand-player14.png",
    ⲆⵠΔΔⵠⲆⲆ: "img/night-hand-player14.png",
    ΔᐃⵠᐃΔⲆⵠ: "img/day-hand-player15.png",
    ᐃΔⲆⵠⲆⵠᐃ: "img/night-hand-player15.png",
    ⵠⵠᐃⲆᐃΔᐃ: "img/day-hand-player16.png",
    ⲆᐃΔᐃⵠⵠⲆ: "img/night-hand-player16.png",
    ΔⵠⵠᐃⲆⵠⵠ: "img/day-hand-player17.png",
    ⲆⵠΔᐃⵠⵠⲆ: "img/night-hand-player17.png",
    ΔⵠᐃΔⲆⵠⲆ: "img/day-hand-player18.png",
    ΔᐃΔⵠΔⲆⲆ: "img/night-hand-player18.png",
    ⵠᐃⲆⵠⵠΔΔ: "img/day-hand-player19.png",
    ΔᐃᐃΔⲆⲆⲆ: "img/night-hand-player19.png",
    ⲆⵠⲆⵠᐃⲆᐃ: "img/day-accessory4.png",
    ᐃΔⲆⵠᐃⲆⵠ: "img/night-accessory4.png",
    ᐃⲆΔᐃⵠⲆᐃ: "img/day-accessory9.png",
    ⵠⵠⲆᐃⲆᐃⲆ: "img/night-accessory9.png",
    ⲆᐃΔⲆⵠᐃΔ: "img/day-accessory10.png",
    ΔᐃᐃⵠΔⲆᐃ: "img/night-accessory10.png",
    ⲆᐃⵠᐃⵠⵠⲆ: "img/day-accessory11.png",
    ⵠΔⲆⲆⵠⵠᐃ: "img/night-accessory11.png",
    ΔΔⲆᐃΔᐃᐃ: "img/day-accessory12.png",
    ⵠⵠΔᐃᐃΔⲆ: "img/night-accessory12.png",
    ᐃᐃᐃⲆⲆⵠⵠ: "img/day-bag.png",
    ⵠᐃⲆΔⲆΔⲆ: "img/night-bag.png",
    ΔⲆⵠΔⵠⲆⵠ: "img/inv-bag-out.png",
    ⵠⵠⲆⵠⵠᐃΔ: "img/inv-bag-in.png",
    ⵠⵠΔᐃΔⵠᐃ: "img/inv-bag-click.png",
    ⲆⲆᐃᐃⵠᐃⵠ: "img/day-pitchfork.png",
    ᐃᐃΔᐃⵠⲆⲆ: "img/night-pitchfork.png",
    ΔᐃᐃᐃΔΔⵠ: "img/inv-pitchfork-out.png",
    ᐃᐃⵠᐃΔΔⵠ: "img/inv-pitchfork-in.png",
    ᐃΔⵠⵠᐃᐃⵠ: "img/inv-pitchfork-click.png",
    ΔⲆⲆΔⲆⲆⲆ: "img/inv-wood-spike-door-out.png",
    ⲆᐃⲆⲆⵠⵠⲆ: "img/inv-wood-spike-door-in.png",
    ⲆΔΔⵠΔΔᐃ: "img/inv-wood-spike-door-click.png",
    ⲆⵠⲆⵠΔΔⲆ: "img/inv-stone-spike-door-out.png",
    ⲆⲆᐃⵠⵠⲆⲆ: "img/inv-stone-spike-door-in.png",
    ΔⲆⲆΔⵠⵠΔ: "img/inv-stone-spike-door-click.png",
    ΔΔᐃᐃᐃΔⲆ: "img/inv-gold-spike-door-out.png",
    ⵠⵠⵠⵠᐃᐃⵠ: "img/inv-gold-spike-door-in.png",
    ⲆΔⵠᐃΔⵠⲆ: "img/inv-gold-spike-door-click.png",
    ΔᐃⲆⵠⲆⵠΔ: "img/inv-diamond-spike-door-out.png",
    ⲆⵠᐃᐃΔⵠᐃ: "img/inv-diamond-spike-door-in.png",
    ᐃⲆᐃⵠΔⲆⲆ: "img/inv-diamond-spike-door-click.png",
    ⲆⵠΔΔⲆⵠⵠ: "img/inv-amethyst-spike-door-out.png",
    ⲆΔᐃΔᐃⵠᐃ: "img/inv-amethyst-spike-door-in.png",
    ᐃΔᐃΔⵠᐃᐃ: "img/inv-amethyst-spike-door-click.png",
    ⵠⲆⲆⲆⲆᐃΔ: "img/day-wood-spike-door.png",
    ⵠⵠᐃⵠᐃΔⵠ: "img/night-wood-spike-door.png",
    ᐃΔΔⲆΔᐃᐃ: "img/day-stone-spike-door.png",
    ΔΔᐃᐃⲆⲆᐃ: "img/night-stone-spike-door.png",
    ⵠⵠᐃⵠⲆΔⲆ: "img/day-gold-spike-door.png",
    ΔⵠⲆᐃΔΔᐃ: "img/night-gold-spike-door.png",
    ΔⲆΔⵠⵠⲆⵠ: "img/day-diamond-spike-door.png",
    ΔᐃΔᐃᐃⲆⵠ: "img/night-diamond-spike-door.png",
    ᐃⲆᐃⵠⲆᐃΔ: "img/day-amethyst-spike-door.png",
    ⲆΔⲆⵠⵠᐃᐃ: "img/night-amethyst-spike-door.png",
    ΔΔⵠᐃⵠⵠⲆ: "img/inv-reidite-spike-door-out.png",
    ᐃΔⲆⵠⲆⵠⵠ: "img/inv-reidite-spike-door-in.png",
    Δᐃᐃᐃⵠᐃᐃ: "img/inv-reidite-spike-door-click.png",
    ⲆΔⵠⲆⵠⵠⲆ: "img/inv-reidite-door-out.png",
    ⵠⲆΔΔⲆⲆⵠ: "img/inv-reidite-door-in.png",
    ᐃΔⵠⵠᐃΔΔ: "img/inv-reidite-door-click.png",
    ⲆⲆᐃⲆΔᐃⵠ: "img/inv-reidite-spike-out.png",
    ᐃⲆΔΔⵠᐃΔ: "img/inv-reidite-spike-in.png",
    ⵠⵠⵠⲆᐃΔⲆ: "img/inv-reidite-spike-click.png",
    ΔᐃᐃᐃΔⵠᐃ: "img/inv-reidite-wall-out.png",
    ⲆⲆⲆΔᐃᐃⲆ: "img/inv-reidite-wall-in.png",
    ΔᐃΔⲆⲆᐃᐃ: "img/inv-reidite-wall-click.png",
    ΔΔᐃⵠΔⵠⲆ: "img/day-reidite-wall.png",
    ΔⲆⲆᐃⲆⲆΔ: "img/night-reidite-wall.png",
    ᐃΔⵠⲆⵠᐃΔ: "img/day-reidite-door.png",
    ⲆⲆᐃᐃΔΔᐃ: "img/night-reidite-door.png",
    ⲆⵠⲆᐃⲆΔΔ: "img/day-reidite-spike.png",
    ᐃⵠᐃᐃⲆⲆΔ: "img/night-reidite-spike.png",
    ⲆⵠΔᐃⲆⲆΔ: "img/day-reidite-spike-door.png",
    ᐃΔⲆΔⲆⵠᐃ: "img/night-reidite-spike-door.png",
    ⲆᐃΔⲆΔᐃⲆ: "img/inv-reidite-pickaxe-out.png",
    ⲆⲆΔᐃⲆᐃΔ: "img/inv-reidite-pickaxe-in.png",
    ⵠⵠⲆⲆΔⲆⵠ: "img/inv-reidite-pickaxe-click.png",
    ⲆᐃΔΔⵠᐃΔ: "img/day-reidite-pickaxe.png",
    ⵠΔⲆᐃⵠⲆᐃ: "img/night-reidite-pickaxe.png",
    ⲆⲆΔⵠⲆΔΔ: "img/inv-reidite-hammer-out.png",
    ΔᐃⵠⵠⵠΔⵠ: "img/inv-reidite-hammer-in.png",
    ⲆⵠⲆᐃⵠⵠⵠ: "img/inv-reidite-hammer-click.png",
    ⵠⵠᐃᐃᐃⲆⲆ: "img/day-reidite-hammer.png",
    ᐃᐃⵠⵠᐃⲆⵠ: "img/night-reidite-hammer.png",
    ΔᐃⵠΔⵠⵠⵠ: "img/day-watermelon1.png",
    ⲆΔⲆⵠⵠⲆΔ: "img/night-watermelon1.png",
    ⲆᐃᐃⵠᐃΔⲆ: "img/day-watermelon-dried1.png",
    ⲆΔⲆⵠⵠᐃⲆ: "img/night-watermelon-dried1.png",
    ᐃⲆΔᐃⲆᐃⵠ: "img/inv-watermelon-out.png",
    ⲆΔᐃᐃⲆᐃⲆ: "img/inv-watermelon-in.png",
    ΔΔⵠⵠᐃⵠᐃ: "img/inv-watermelon-click.png",
    ᐃᐃᐃⵠᐃⲆΔ: "img/day-boat.png",
    ⵠⵠⵠⲆⲆⲆΔ: "img/night-boat.png",
    ⵠᐃⲆᐃΔΔⲆ: "img/day-boat-wave.png",
    ⵠⵠⲆⲆⲆⵠⲆ: "img/night-boat-wave.png",
    ⲆΔΔⵠΔⲆᐃ: "img/inv-boat-out.png",
    ᐃⲆⲆΔⵠⵠⵠ: "img/inv-boat-in.png",
    ΔΔⵠᐃⲆⲆⵠ: "img/inv-boat-click.png",
    ΔⲆⵠⵠΔⲆⵠ: "img/day-plane.png",
    ⲆᐃⲆᐃᐃᐃⵠ: "img/night-plane.png",
    ᐃⵠΔΔⲆΔⲆ: "img/inv-plane-out.png",
    ⵠΔⵠⲆⲆⲆⲆ: "img/inv-plane-in.png",
    ΔⲆⲆΔΔᐃⵠ: "img/inv-plane-click.png",
    ⲆⵠΔⲆᐃⵠⲆ: "img/day-sled.png",
    ⲆΔⵠⲆⵠᐃᐃ: "img/night-sled.png",
    ⵠⲆⲆᐃⲆⲆⲆ: "img/day-sled-wave.png",
    ᐃⵠⲆⵠⲆΔⵠ: "img/night-sled-wave.png",
    ΔᐃΔⲆⲆΔⵠ: "img/inv-sled-out.png",
    ᐃⲆΔΔΔΔΔ: "img/inv-sled-in.png",
    ⲆⲆΔᐃᐃⲆⵠ: "img/inv-sled-click.png",
    ⲆΔⲆⲆⵠⵠᐃ: "img/day-pirate-hat.png",
    ᐃⲆⵠΔⵠᐃΔ: "img/night-pirate-hat.png",
    ᐃⲆᐃΔΔⲆⲆ: "img/inv-pirate-hat-out.png",
    ΔΔΔᐃΔⲆⵠ: "img/inv-pirate-hat-in.png",
    ⵠⲆΔⲆⵠⲆΔ: "img/inv-pirate-hat-click.png",
    ᐃΔⲆⵠⵠᐃᐃ: "img/day-penguin.png",
    ⲆΔᐃⲆⲆⵠΔ: "img/night-penguin.png",
    ⵠⵠΔΔᐃⲆΔ: "img/hurt-penguin.png",
    ⵠᐃΔⲆᐃ: "img/inv-penguin-feather-click.png",
    Ⲇⵠᐃⵠⵠ: "img/inv-hawk-feather-click.png",
    ⲆⲆᐃΔⲆⲆⲆ: "img/day-boar1.png",
    ᐃᐃᐃᐃⲆⵠᐃ: "img/day-boar1-tamed.png",
    ΔΔᐃⲆᐃᐃΔ: "img/day-boar1-angry.png",
    ΔⲆⲆΔΔⲆⵠ: "img/night-boar1.png",
    ᐃΔᐃⵠᐃⲆᐃ: "img/night-boar1-tamed.png",
    ΔⵠⲆⲆⲆᐃⵠ: "img/night-boar1-angry.png",
    ΔⵠᐃΔⵠⲆᐃ: "img/inv-mount-boar-out.png",
    ᐃⲆΔᐃⲆⲆⵠ: "img/inv-mount-boar-in.png",
    ⲆᐃᐃᐃΔΔⲆ: "img/inv-mount-boar-click.png",
    ⲆΔΔⵠⲆⲆⲆ: "img/day-hurt-boar1.png",
    ᐃⵠΔⵠⲆⲆⲆ: "img/boar1-step.png",
    ⲆᐃᐃΔΔΔⲆ: "img/day-saddle1.png",
    ᐃΔⵠⲆΔⲆΔ: "img/night-saddle1.png",
    ⲆΔⲆΔⵠⵠΔ: "img/inv-saddle-out.png",
    ΔΔⲆⵠⵠᐃΔ: "img/inv-saddle-in.png",
    ⲆⵠⲆᐃΔΔⲆ: "img/inv-saddle-click.png",
    ΔⲆⲆᐃᐃⵠᐃ: "img/day-magic-wand0.png",
    ⵠᐃⵠᐃᐃᐃΔ: "img/night-magic-wand0.png",
    ᐃⵠⵠⵠⲆⲆΔ: "img/day-light-wand1.png",
    ᐃⲆⲆⲆΔⵠⲆ: "img/night-light-wand1.png",
    ΔᐃⵠⵠᐃᐃΔ: "img/inv-magic-wand0-out.png",
    ᐃΔΔⵠⵠᐃⲆ: "img/inv-magic-wand0-in.png",
    ᐃΔΔΔΔⵠΔ: "img/inv-magic-wand0-click.png",
    ᐃⲆᐃᐃⲆΔⲆ: "img/day-magic-wand1.png",
    ⲆⵠⲆᐃⵠⲆⲆ: "img/night-magic-wand1.png",
    ΔⵠⲆᐃᐃⲆᐃ: "img/day-light-wand0.png",
    ᐃⲆᐃⵠᐃⲆⲆ: "img/night-light-wand0.png",
    ᐃΔΔⵠᐃⵠᐃ: "img/inv-magic-wand1-out.png",
    ⵠᐃⵠᐃⵠΔⵠ: "img/inv-magic-wand1-in.png",
    ⲆⲆⲆΔᐃΔⵠ: "img/inv-magic-wand1-click.png",
    ⵠᐃⲆⵠⵠⲆⲆ: "img/day-firefly.png",
    ⲆⲆⲆⲆᐃᐃΔ: "img/night-firefly.png",
    ΔⵠⵠΔᐃᐃᐃ: "img/hurt-firefly.png",
    ᐃΔᐃⵠⲆᐃᐃ: "img/inv-firefly-out.png",
    ᐃⵠΔΔⵠⲆⲆ: "img/inv-firefly-in.png",
    ⲆᐃⵠⵠᐃⲆᐃ: "img/inv-firefly-click.png",
    ΔⲆⲆⵠⵠΔⲆ: "img/day-baby-dragon.png",
    ᐃⲆΔᐃᐃΔⵠ: "img/night-baby-dragon.png",
    ΔⵠⵠⲆⲆΔΔ: "img/day-baby-dragon-angry.png",
    ⲆⵠᐃᐃⲆΔⲆ: "img/night-baby-dragon-angry.png",
    ⵠⵠΔⲆⵠⵠⵠ: "img/day-baby-dragon-tamed.png",
    ⵠΔⵠΔⵠΔⵠ: "img/night-baby-dragon-tamed.png",
    ᐃᐃᐃΔⲆⲆΔ: "img/day-wing-dragon-left-angry.png",
    ᐃⲆΔΔⵠᐃᐃ: "img/night-dragon-wing-left-angry.png",
    ⵠⵠⲆⵠᐃⲆⵠ: "img/day-wing-dragon-right-angry.png",
    ᐃΔⲆⵠΔⲆⵠ: "img/night-dragon-wing-right-angry.png",
    ⵠΔΔΔᐃⲆᐃ: "img/day-wing-dragon-left-tamed.png",
    ⲆᐃⵠⵠΔⵠⵠ: "img/night-dragon-wing-left-tamed.png",
    ᐃⵠᐃᐃᐃⵠΔ: "img/day-wing-dragon-right-tamed.png",
    ⵠⵠⲆⲆΔΔⲆ: "img/night-wing-dragon-right-tamed.png",
    ⵠΔⵠᐃΔΔⲆ: "img/day-wing-dragon-left.png",
    ΔᐃⵠᐃΔᐃⲆ: "img/night-dragon-wing-left.png",
    ⲆᐃᐃΔⲆⵠⲆ: "img/day-wing-dragon-right.png",
    ᐃⵠⲆⲆⲆᐃΔ: "img/night-wing-dragon-right.png",
    ⵠΔⵠⲆⵠⵠᐃ: "img/hurt-baby-dragon.png",
    ᐃⲆⲆⵠᐃΔᐃ: "img/hurt-baby-dragon-wing-left.png",
    ΔΔⵠⲆⲆⵠΔ: "img/hurt-baby-dragon-wing-right.png",
    ⵠⲆᐃΔⵠⲆᐃ: "img/inv-baby-dragon-out.png",
    ᐃⲆΔᐃⵠⵠΔ: "img/inv-baby-dragon-in.png",
    ᐃⵠᐃⲆⵠᐃΔ: "img/inv-baby-dragon-click.png",
    ᐃⵠΔᐃⵠⲆⵠ: "img/day-baby-lava.png",
    ᐃᐃⵠΔⲆᐃᐃ: "img/night-baby-lava.png",
    ⵠⲆᐃΔⲆΔⲆ: "img/day-baby-lava-angry.png",
    ⲆΔΔⲆᐃⵠᐃ: "img/night-baby-lava-angry.png",
    ⲆᐃΔⲆᐃΔⲆ: "img/day-baby-lava-tamed.png",
    ᐃᐃⵠⵠⵠᐃΔ: "img/night-baby-lava-tamed.png",
    ⵠΔᐃᐃΔⵠⲆ: "img/day-wing-lava-left-angry.png",
    ⲆⵠⲆᐃⲆΔⵠ: "img/night-wing-lava-left-angry.png",
    ⲆⵠᐃⵠᐃΔΔ: "img/day-wing-lava-right-angry.png",
    ⵠⵠⵠⲆᐃᐃⲆ: "img/night-wing-lava-right-angry.png",
    ⲆΔΔⲆΔⵠⵠ: "img/day-wing-lava-left-tamed.png",
    ΔΔⲆΔΔᐃᐃ: "img/night-wing-lava-left-tamed.png",
    ⵠⲆᐃⵠᐃⲆⵠ: "img/day-wing-lava-right-tamed.png",
    ⲆⵠⵠΔⲆΔΔ: "img/night-wing-lava-right-tamed.png",
    ⵠᐃⲆⵠᐃⵠⲆ: "img/day-wing-lava-left.png",
    ᐃΔⲆΔΔⲆᐃ: "img/night-wing-lava-left.png",
    ⲆᐃⵠᐃᐃᐃⲆ: "img/day-wing-lava-right.png",
    ᐃⵠⵠΔΔᐃⵠ: "img/night-wing-lava-right.png",
    ⵠⲆᐃⲆΔᐃⲆ: "img/hurt-baby-lava.png",
    ΔΔⲆⲆᐃⵠᐃ: "img/hurt-baby-lava-wing-left.png",
    ΔⵠⲆⲆᐃⲆΔ: "img/hurt-baby-lava-wing-right.png",
    Δᐃⵠᐃᐃⵠⵠ: "img/inv-baby-lava-out.png",
    ⲆⲆⵠΔΔΔᐃ: "img/inv-baby-lava-in.png",
    ⵠᐃⲆⵠΔⲆᐃ: "img/inv-baby-lava-click.png",
    ⲆⵠᐃⲆᐃⵠᐃ: "img/day-falcon.png",
    ⵠᐃΔΔⵠᐃⲆ: "img/night-falcon.png",
    ⵠⵠⵠΔᐃΔⵠ: "img/day-falcon-angry.png",
    ᐃⲆⲆᐃⲆΔⵠ: "img/night-falcon-angry.png",
    ⲆΔⲆᐃⵠΔⲆ: "img/day-falcon-ground.png",
    ᐃΔΔⵠᐃⲆⵠ: "img/night-falcon-ground.png",
    ᐃⵠΔⲆⲆᐃΔ: "img/day-falcon-ground-angry.png",
    ΔᐃᐃΔⵠⲆΔ: "img/night-falcon-ground-angry.png",
    ΔⵠⲆΔⵠᐃΔ: "img/day-falcon-wings-left.png",
    ᐃᐃΔΔΔᐃⵠ: "img/night-falcon-wings-left.png",
    ΔⲆⲆⲆΔᐃⵠ: "img/day-falcon-wings-right.png",
    ΔⵠΔΔⵠᐃⲆ: "img/night-falcon-wings-right.png",
    ΔᐃⵠΔᐃᐃⲆ: "img/day-falcon-angry-wings-left.png",
    ΔΔᐃΔᐃΔᐃ: "img/night-falcon-angry-wings-left.png",
    ᐃᐃⲆΔᐃΔⵠ: "img/day-falcon-angry-wings-right.png",
    ΔᐃΔᐃᐃⲆⲆ: "img/night-falcon-angry-wings-right.png",
    ⲆᐃᐃᐃᐃΔΔ: "img/day-falcon-wings-left-tamed.png",
    ⵠΔⵠⵠᐃΔΔ: "img/night-falcon-wings-left-tamed.png",
    ⵠΔⲆⲆΔⵠⲆ: "img/day-falcon-wings-right-tamed.png",
    ΔΔΔⲆΔᐃΔ: "img/night-falcon-wings-right-tamed.png",
    ⲆΔⲆᐃᐃᐃⲆ: "img/day-falcon-tamed.png",
    ⲆⲆΔⵠᐃⲆⵠ: "img/night-falcon-tamed.png",
    ᐃᐃΔⲆⵠΔΔ: "img/hurt-falcon-ground.png",
    ⵠⲆΔⵠⵠⲆΔ: "img/hurt-falcon.png",
    ΔᐃΔⲆⲆⲆᐃ: "img/hurt-falcon-wings-left.png",
    ΔⵠⲆᐃⲆⲆᐃ: "img/hurt-falcon-wings-right.png",
    ⲆⵠⵠᐃⵠΔⲆ: "img/inv-falcon-out.png",
    ⲆⵠⵠᐃⲆⲆΔ: "img/inv-falcon-in.png",
    ⲆΔΔⲆⵠⲆΔ: "img/inv-falcon-click.png",
    ΔⲆⵠᐃⵠΔⵠ: "img/day-crab-boss.png",
    ⲆᐃΔΔΔⵠᐃ: "img/night-crab-boss.png",
    ΔⵠΔⲆᐃΔⲆ: "img/day-crab-boss-angry.png",
    ΔⵠΔᐃΔⲆⲆ: "img/night-crab-boss-angry.png",
    ᐃΔᐃⲆΔᐃⲆ: "img/day-crab-boss-tamed.png",
    ᐃΔⲆⵠᐃΔᐃ: "img/night-crab-boss-tamed.png",
    ᐃᐃⵠⲆΔⵠⲆ: "img/day-crab-boss-claw-left-attack.png",
    ⲆⵠⲆᐃᐃᐃᐃ: "img/night-crab-boss-claw-left-attack.png",
    ΔΔⵠⵠᐃⲆᐃ: "img/day-crab-boss-claw-right-attack.png",
    ⲆΔᐃΔΔΔⲆ: "img/night-crab-boss-claw-right-attack.png",
    ᐃⵠᐃᐃΔⲆⲆᐃᐃ: "img/day-crab-boss-claw-left-tamed.png",
    ⲆΔⵠᐃΔᐃᐃⵠⵠ: "img/night-crab-boss-claw-left-tamed.png",
    ⲆⵠΔⵠᐃⵠΔΔΔ: "img/day-crab-boss-claw-right-tamed.png",
    ΔᐃⲆⵠⵠΔᐃΔΔ: "img/night-crab-boss-claw-right-tamed.png",
    ΔⲆᐃⵠᐃᐃᐃ: "img/day-crab-boss-claw-left.png",
    ⲆⲆΔⲆⲆᐃⲆ: "img/night-crab-boss-claw-left.png",
    ΔⵠⲆᐃᐃΔᐃ: "img/day-crab-boss-claw-right.png",
    Δⵠᐃⵠⵠⵠⵠ: "img/night-crab-boss-claw-right.png",
    ⲆⵠΔΔⲆⲆᐃ: "img/hurt-crab-boss.png",
    ⲆⵠΔᐃᐃⵠᐃ: "img/hurt-crab-boss-claw-left.png",
    ΔⲆⲆΔᐃΔⵠ: "img/hurt-crab-boss-claw-right.png",
    ⵠⵠΔⲆᐃⵠᐃ: "img/heal-crab-boss.png",
    ⵠⵠᐃⲆᐃΔΔ: "img/heal-crab-boss-claw-left.png",
    ⲆⵠᐃΔΔⵠⵠ: "img/heal-crab-boss-claw-right.png",
    ᐃⲆⵠΔⲆⵠⵠ: "img/crab-step.png",
    ᐃⵠⲆΔᐃΔⲆ: "img/inv-crab-boss-out.png",
    ΔᐃⵠⲆΔᐃⵠ: "img/inv-crab-boss-in.png",
    ᐃᐃⲆᐃᐃⵠᐃ: "img/inv-crab-boss-click.png",
    ⵠⵠⲆΔᐃⵠΔ: "img/day-cactus10.png",
    ΔⲆⵠΔΔᐃᐃ: "img/night-cactus10.png",
    ⵠⵠΔⵠΔⲆⲆ: "img/inv-cactus-out.png",
    ᐃⵠΔΔΔⵠⵠ: "img/inv-cactus-in.png",
    ΔⵠᐃΔⲆⵠΔ: "img/inv-cactus-click.png",
    ⵠᐃᐃΔᐃⲆⵠ: "img/day-scorpion.png",
    ᐃΔⵠⵠΔⵠΔ: "img/night-scorpion.png",
    ⲆⲆΔⲆⲆⲆᐃ: "img/day-scorpion-hand-left.png",
    ⵠⵠⵠⲆⲆⵠΔ: "img/night-scorpion-hand-left.png",
    ᐃΔΔⲆⵠΔⵠ: "img/day-scorpion-hand-right.png",
    ⲆⲆΔⵠⵠⵠᐃ: "img/night-scorpion-hand-right.png",
    ᐃⵠΔΔΔΔΔ: "img/hurt-scorpion.png",
    ⲆⲆⵠᐃⲆⵠⲆ: "img/hurt-scorpion-hand-left.png",
    ΔⵠⵠⵠⲆⲆⵠ: "img/hurt-scorpion-hand-right.png",
    ⵠⵠΔⲆΔⵠΔ: "img/day-vulture.png",
    ᐃΔⲆΔⲆΔΔ: "img/night-vulture.png",
    ᐃΔⵠⲆΔᐃⵠ: "img/day-vulture-angry.png",
    ΔᐃⲆᐃⲆᐃⵠ: "img/night-vulture-angry.png",
    ΔᐃⵠⲆᐃᐃⲆ: "img/day-vulture-ground.png",
    ⵠᐃᐃᐃⲆΔⲆ: "img/night-vulture-ground.png",
    ⵠΔΔⵠⵠⲆᐃ: "img/day-vulture-ground-angry.png",
    ⵠΔΔΔⵠⵠΔ: "img/night-vulture-ground-angry.png",
    ΔᐃⲆΔⲆⲆᐃ: "img/day-vulture-wings-left.png",
    ⲆⲆⲆⵠᐃⵠⲆ: "img/night-vulture-wings-left.png",
    ᐃΔⲆΔᐃΔⵠ: "img/day-vulture-wings-right.png",
    ⵠᐃᐃΔΔᐃΔ: "img/night-vulture-wings-right.png",
    ΔⲆΔⲆⲆᐃⵠ: "img/day-vulture-angry-wings-left.png",
    ⲆᐃᐃⵠᐃᐃΔ: "img/night-vulture-angry-wings-left.png",
    ⲆⵠΔⵠⵠΔΔ: "img/day-vulture-angry-wings-right.png",
    Ⲇᐃⵠᐃⵠⵠⵠ: "img/night-vulture-angry-wings-right.png",
    ΔⲆᐃᐃⲆᐃⲆ: "img/day-vulture-wings-left-tamed.png",
    ⵠΔᐃⲆΔⵠᐃ: "img/night-vulture-wings-left-tamed.png",
    ⲆⲆᐃⲆⲆⵠⵠ: "img/day-vulture-wings-right-tamed.png",
    ΔⲆⵠΔᐃᐃⵠ: "img/night-vulture-wings-right-tamed.png",
    ᐃᐃΔΔⲆⵠⲆ: "img/day-vulture-tamed.png",
    ΔⵠΔᐃᐃᐃΔ: "img/night-vulture-tamed.png",
    ᐃΔⵠⵠⵠᐃⵠ: "img/hurt-vulture-ground.png",
    ⵠΔⵠⵠᐃΔᐃ: "img/hurt-vulture.png",
    ᐃⵠⲆⲆΔΔⵠ: "img/hurt-vulture-wings-left.png",
    ⲆⲆᐃⵠⲆⲆⵠ: "img/hurt-vulture-wings-right.png",
    ΔΔΔⲆΔΔΔ: "img/day-aloe-vera.png",
    ⲆᐃⵠΔⵠⲆᐃ: "img/night-aloe-vera.png",
    ΔⵠⵠΔⲆΔΔ: "img/inv-aloe-vera-out.png",
    ΔΔⵠⵠⵠⲆⲆ: "img/inv-aloe-vera-in.png",
    ΔΔᐃᐃⲆΔⵠ: "img/inv-aloe-vera-click.png",
    ⵠΔⵠⵠⲆⵠⵠ: "img/day-aloe-vera-grown.png",
    ᐃⵠΔⲆⲆΔΔ: "img/night-aloe-vera-grown.png",
    ⵠⲆⵠⵠΔᐃⲆ: "img/day-aloe-vera-dried.png",
    ΔⲆΔᐃᐃⵠᐃ: "img/night-aloe-vera-dried.png",
    ΔⲆⵠⲆΔⵠⲆ: "img/day-turban1.png",
    ⲆⲆⵠⲆⲆⵠⲆ: "img/night-turban1.png",
    ⵠⲆᐃᐃⵠΔⲆ: "img/day-turban2.png",
    ⵠᐃΔΔⲆⲆᐃ: "img/night-turban2.png",
    ΔᐃⵠᐃΔΔᐃ: "img/inv-turban2-out.png",
    ⵠⲆΔΔᐃᐃᐃ: "img/inv-turban2-in.png",
    ⵠⲆᐃⵠΔᐃⵠ: "img/inv-turban2-click.png",
    ᐃᐃΔⵠⲆⲆᐃ: "img/inv-turban1-out.png",
    ⵠᐃⵠΔᐃⵠⵠ: "img/inv-turban1-in.png",
    ᐃⲆΔΔⲆΔⲆ: "img/inv-turban1-click.png",
    ⵠⵠᐃΔⵠⵠⲆ: "img/day-pitchfork2.png",
    ΔⵠⵠᐃⲆΔⵠ: "img/night-pitchfork2.png",
    ΔΔΔᐃᐃⵠΔ: "img/inv-pitchfork2-out.png",
    ⵠⵠᐃⲆⵠΔᐃ: "img/inv-pitchfork2-in.png",
    ᐃᐃⲆⵠΔΔᐃ: "img/inv-pitchfork2-click.png",
    ⲆⵠⵠᐃΔᐃⵠ: "img/inv-gold-fork-click.png",
    ᐃΔⵠⲆⵠⵠⲆ: "img/inv-pilot-glasses-click.png",
    ⵠⵠᐃⵠⲆⵠⵠ: "img/day-pilot-helmet.png",
    ΔⲆΔΔΔⵠⵠ: "img/night-pilot-helmet.png",
    ⲆΔΔⵠᐃⲆᐃ: "img/inv-pilot-helmet-out.png",
    ΔⵠⲆΔⲆⲆⲆ: "img/inv-pilot-helmet-in.png",
    ⵠᐃΔᐃΔΔᐃ: "img/inv-pilot-helmet-click.png",
    ⲆⲆΔΔⲆⲆⲆᐃⲆ: "img/day-sandworm0.png",
    ΔΔᐃⲆⲆⲆⵠ: "img/day-sandworm1.png",
    ⵠⵠⵠⲆΔⲆᐃ: "img/day-sandworm2.png",
    ᐃⲆⵠᐃᐃⲆⲆΔΔ: "img/night-sandworm0.png",
    ⲆⲆᐃΔΔᐃᐃ: "img/night-sandworm1.png",
    ⲆΔΔⵠᐃᐃΔ: "img/night-sandworm2.png",
    ⵠⵠⵠᐃⵠᐃΔ: "img/hurt-sandworm0.png",
    ΔΔᐃⲆⵠⵠᐃ: "img/hurt-sandworm1.png",
    ΔΔⵠⵠΔᐃΔ: "img/hurt-sandworm2.png",
    ᐃᐃⲆⲆΔ: "img/inv-vulture-feather-click.png",
    ᐃⲆᐃⲆΔΔⲆ: "img/day-emerald0.png",
    ⵠᐃⵠⵠⵠᐃⵠ: "img/night-emerald0.png",
    ⲆΔΔⲆⲆΔᐃ: "img/day-emerald1.png",
    ᐃᐃⲆⲆΔΔⲆ: "img/night-emerald1.png",
    ΔⲆⵠⲆΔⵠΔ: "img/day-emerald2.png",
    ⵠⵠᐃⵠⲆⲆᐃ: "img/night-emerald2.png",
    ᐃⵠΔΔᐃ: "img/inv-emerald-click.png",
    ΔᐃⲆⵠᐃΔΔ: "img/inv-sworm-juice-out.png",
    ᐃᐃⵠⵠΔⵠⲆ: "img/inv-sworm-juice-in.png",
    ⲆⲆⵠⵠᐃⵠⵠ: "img/inv-sworm-juice-click.png",
    ᐃⲆΔΔᐃⲆⲆ: "img/day-point-machine.png",
    ⵠΔⵠⲆΔΔᐃ: "img/night-point-machine.png",
    ᐃΔⲆΔΔⵠⵠ: "img/day-point-machine-hole.png",
    ⵠᐃⲆⵠΔⵠΔ: "img/night-point-machine-hole.png",
    ᐃᐃΔⲆⲆⵠⵠ: "img/day-point-machine-ground.png",
    ⲆⵠⲆΔⲆᐃⵠ: "img/night-point-machine-ground.png",
    ⵠΔᐃΔΔⲆΔ: "img/day-point-machine-rotate.png",
    ⵠΔⵠΔᐃᐃΔ: "img/night-point-machine-rotate.png",
    ⲆᐃᐃⲆΔᐃΔ: "img/inv-point-machine-out.png",
    ΔⲆΔΔⵠΔⲆ: "img/inv-point-machine-in.png",
    ⵠⲆᐃᐃⵠⲆⲆ: "img/inv-point-machine-click.png",
    ΔᐃⲆΔᐃΔⵠ: "img/day-extractor-machine0-stone.png",
    ⵠⲆⲆᐃⲆⵠⵠ: "img/night-extractor-machine0-stone.png",
    ⵠⲆⲆⲆⵠⲆⲆ: "img/day-extractor-machine-stone.png",
    ΔⲆⲆᐃΔⲆᐃ: "img/night-extractor-machine-stone.png",
    ⲆΔΔΔⵠΔΔ: "img/inv-extractor-machine-stone-out.png",
    ⵠⵠᐃΔᐃⲆⵠ: "img/inv-extractor-machine-stone-in.png",
    ⲆⵠⲆᐃᐃⵠΔ: "img/inv-extractor-machine-stone-click.png",
    ⵠⵠᐃⵠⵠΔΔ: "img/day-extractor-machine0-gold.png",
    ΔⲆⵠⲆⲆᐃᐃ: "img/night-extractor-machine0-gold.png",
    ⲆⲆᐃⵠΔⵠΔ: "img/day-extractor-machine-gold.png",
    ⵠⲆⲆΔⲆⲆΔ: "img/night-extractor-machine-gold.png",
    ⲆΔⲆΔⲆⲆⲆ: "img/inv-extractor-machine-gold-out.png",
    ΔⵠⲆᐃΔᐃᐃ: "img/inv-extractor-machine-gold-in.png",
    ⲆᐃΔⵠⲆⵠⵠ: "img/inv-extractor-machine-gold-click.png",
    ⵠΔⲆⵠⵠⲆᐃ: "img/day-extractor-machine0-diamond.png",
    ΔΔⲆᐃᐃⲆⵠ: "img/night-extractor-machine0-diamond.png",
    ᐃᐃᐃΔΔᐃⲆ: "img/day-extractor-machine-diamond.png",
    ⲆⵠⵠΔΔᐃⵠ: "img/night-extractor-machine-diamond.png",
    ᐃⲆᐃⵠⲆᐃⵠ: "img/inv-extractor-machine-diamond-out.png",
    ⲆᐃΔⲆΔᐃΔ: "img/inv-extractor-machine-diamond-in.png",
    ΔΔΔΔᐃᐃΔ: "img/inv-extractor-machine-diamond-click.png",
    ⲆⵠⲆⵠⲆⵠⵠ: "img/day-extractor-machine0-amethyst.png",
    ⲆΔⵠⵠⵠⵠⲆ: "img/night-extractor-machine0-amethyst.png",
    ⲆⲆΔⲆⲆΔΔ: "img/day-extractor-machine-amethyst.png",
    ΔΔⲆⲆΔᐃΔ: "img/night-extractor-machine-amethyst.png",
    ⵠᐃᐃⲆᐃΔᐃ: "img/inv-extractor-machine-amethyst-out.png",
    ᐃⵠⲆⵠⲆⵠⵠ: "img/inv-extractor-machine-amethyst-in.png",
    ⲆΔΔᐃΔⵠΔ: "img/inv-extractor-machine-amethyst-click.png",
    ΔᐃΔⲆΔΔΔ: "img/day-extractor-machine0-reidite.png",
    ⲆⵠⵠΔⲆⲆΔ: "img/night-extractor-machine0-reidite.png",
    ⲆᐃᐃⵠⵠᐃΔ: "img/day-extractor-machine-reidite.png",
    ᐃⲆⵠⲆⵠΔᐃ: "img/night-extractor-machine-reidite.png",
    ΔⲆⵠⵠΔᐃΔ: "img/inv-extractor-machine-reidite-out.png",
    ⵠⵠⲆⲆΔᐃⲆ: "img/inv-extractor-machine-reidite-in.png",
    ⵠᐃΔⵠⵠⵠᐃ: "img/inv-extractor-machine-reidite-click.png",
    ΔΔᐃᐃⵠⵠᐃ: "img/extractor-cases.png",
    ᐃⲆⵠⲆᐃᐃΔ: "img/day-golden-hen.png",
    ⵠⵠⲆΔⵠΔⵠ: "img/night-golden-hen.png",
    ⲆⵠⵠᐃᐃΔΔ: "img/day-golden-chicken.png",
    ᐃᐃⵠⲆΔⵠΔ: "img/night-golden-chicken.png",
    ⲆⵠΔⲆΔⲆΔ: "img/hurt-golden-hen.png",
    ΔΔⲆⲆⵠΔΔ: "img/hurt-golden-chicken.png",
    ⲆΔⵠᐃΔᐃΔ: "img/logo-interface.png",
    ᐃⵠᐃⵠⵠᐃᐃ: "img/forest-mode-hover.png",
    ⲆΔⲆΔΔⲆⲆ: "img/normal-mode-hover.png",
    ⵠΔⵠⲆΔⵠⵠ: "img/vampire-mode-hover.png",
    ᐃᐃᐃⵠⵠΔⲆ: "img/zombie-mode-hover.png",
    ΔΔⲆᐃⲆⲆⲆ: "img/community-mode-hover2.png",
    ⲆⲆⵠᐃⵠᐃΔ: "img/experimental-mode-hover.png",
    ΔᐃⲆⵠⵠΔⵠ: "img/zombie-mode-out.png",
    ⵠⵠᐃΔᐃⲆᐃ: "img/zombie-mode-in.png",
    ⵠΔΔⵠⵠⵠᐃ: "img/zombie-mode-click.png",
    ΔⲆᐃⵠᐃᐃⵠ: "img/vampire-mode-out.png",
    ΔⲆΔΔⲆᐃΔ: "img/vampire-mode-in.png",
    ⲆⲆᐃΔΔⲆⲆ: "img/vampire-mode-click.png",
    ᐃᐃⲆΔᐃᐃᐃ: "img/normal-mode-out.png",
    ΔⲆΔⲆⵠᐃⲆ: "img/normal-mode-in.png",
    ΔⲆⲆΔᐃΔⲆ: "img/normal-mode-click.png",
    ΔⲆⵠΔΔᐃΔ: "img/forest-mode-out.png",
    ⵠΔΔΔⲆⵠⲆ: "img/forest-mode-in.png",
    ᐃᐃⲆᐃΔⵠⲆ: "img/forest-mode-click.png",
    ᐃⵠⵠΔΔᐃΔ: "img/community-mode-out.png",
    ⵠⲆᐃᐃⵠⲆΔ: "img/community-mode-in.png",
    ⵠᐃⲆⲆᐃᐃⲆ: "img/community-mode-click.png",
    ΔⲆⲆᐃᐃⲆⵠ: "img/experimental-modes-out.png",
    ΔⵠⵠΔⲆⵠⲆ: "img/experimental-modes-in.png",
    ⲆⲆⲆΔⲆᐃᐃ: "img/experimental-modes-click.png",
    ΔⵠⲆᐃⵠⲆⲆ: "img/youtube-button-out.png",
    ⲆⵠⲆⲆⲆΔΔ: "img/youtube-button-in.png",
    ⲆΔⲆⵠⲆᐃⵠ: "img/youtube-button-click.png",
    ᐃⵠⵠⵠⲆᐃⲆ: "img/wiki-button-out.png",
    ⵠⲆⲆᐃⵠΔΔ: "img/wiki-button-in.png",
    ᐃΔⵠⵠⲆᐃⲆ: "img/wiki-button-click.png",
    ΔⵠⲆΔⲆᐃⵠ: "img/twitter-button-out.png",
    ᐃⲆᐃᐃΔᐃⵠ: "img/twitter-button-in.png",
    ΔᐃΔⵠᐃⵠⲆ: "img/twitter-button-click.png",
    ⲆⵠⵠΔᐃⵠⵠ: "img/facebook-button-out.png",
    ᐃⵠᐃΔⲆᐃⲆ: "img/facebook-button-in.png",
    ᐃⵠᐃᐃⵠᐃⲆ: "img/facebook-button-click.png",
    ⲆᐃΔⵠⲆⵠᐃ: "img/reddit-button-out.png",
    ⵠΔΔΔᐃᐃⵠ: "img/reddit-button-in.png",
    ᐃᐃᐃⲆᐃᐃⲆ: "img/reddit-button-click.png",
    ΔⲆᐃᐃⵠΔΔ: "img/discord-button-out.png",
    ᐃΔΔⵠⵠⲆᐃ: "img/discord-button-in.png",
    ⲆᐃᐃΔⵠΔⵠ: "img/discord-button-click.png",
    Ⲇᐃᐃⵠⵠⵠⵠ: "img/merch-button-out.png",
    ᐃⵠⲆᐃⵠⲆⵠ: "img/merch-button-in.png",
    ⲆᐃᐃΔⲆⵠᐃ: "img/merch-button-click.png",
    ᐃⵠᐃΔᐃᐃⲆᐃⲆ: "img/terminal-button-out.png",
    ⵠⲆᐃⲆⵠΔᐃᐃΔ: "img/terminal-button-in.png",
    ⵠⵠⵠⵠⵠΔⲆΔⲆ: "img/terminal-button-click.png",
    ΔⲆᐃᐃΔⵠᐃ: "img/restart-out.png",
    ᐃⲆΔⵠⲆⲆᐃ: "img/restart-in.png",
    ᐃⵠᐃⵠⲆΔΔ: "img/restart-click.png",
    ΔᐃⵠⲆⲆⵠᐃ: "img/reboot-out.png",
    ΔⲆᐃⵠⲆΔΔ: "img/reboot-in.png",
    ᐃᐃᐃⲆΔᐃⲆ: "img/reboot-click.png",
    ᐃⵠⵠΔⵠⲆΔ: "img/guide-out.png",
    ΔᐃⵠⲆⵠΔⵠ: "img/guide-in.png",
    ⵠᐃⲆΔᐃⵠⵠ: "img/guide-click.png",
    ⲆⵠΔⵠᐃᐃᐃ: "img/copy-paste-out.png",
    ⲆⲆⲆⵠᐃᐃᐃ: "img/copy-paste-in.png",
    ⲆΔΔⵠΔΔΔ: "img/copy-paste-click.png",
    ⲆᐃΔᐃⲆⲆⵠ: "img/link-buttons-bg.png",
    ᐃᐃΔᐃⵠⵠⲆ: "img/changelog-box2.png",
    ΔᐃΔΔⵠᐃᐃ: "img/changelog_31.png",
    ᐃⵠⵠⵠⵠⵠΔ: "img/banner-taming.png",
    ᐃⵠⵠⵠⵠΔⵠ: "img/profile-button-out.png",
    ⵠⲆⵠⲆⵠΔΔ: "img/profile-button-in.png",
    ⵠⵠⵠⵠΔⵠⲆ: "img/profile-button-click.png",
    ⲆⵠᐃⲆⲆⵠΔ: "img/login-button-out.png",
    ΔⲆⲆⵠⵠᐃⲆ: "img/login-button-in.png",
    ᐃᐃΔᐃᐃᐃⵠ: "img/login-button-click.png",
    ΔⵠⲆΔΔΔΔ: "img/login-google-out.png",
    ⵠᐃᐃⲆΔⵠⵠ: "img/login-google-in.png",
    ⲆⵠΔᐃᐃᐃΔ: "img/login-google-click.png",
    ⵠⲆⵠⲆⲆⵠᐃ: "img/login-facebook-out.png",
    ᐃΔᐃⲆⵠⲆᐃ: "img/login-facebook-in.png",
    ΔⲆΔᐃⵠᐃΔ: "img/login-facebook-click.png",
    ⵠΔΔΔⵠⲆⲆ: "img/account-box.png",
    ⲆⵠΔΔΔΔⵠⵠΔ: "img/account-under-maintenance.png",
    ΔⲆΔΔΔΔᐃ: "img/close-button-account-out.png",
    ⵠΔΔᐃΔⲆⵠ: "img/close-button-account-in.png",
    ⲆⲆⲆᐃⵠᐃⲆ: "img/close-button-account-click.png",
    ⲆΔᐃᐃⵠᐃΔ: "img/play-button-out.png",
    ΔΔⵠΔΔⵠᐃ: "img/play-button-in.png",
    ⲆⵠΔΔᐃⲆⵠ: "img/play-button-click.png",
    ᐃᐃⵠᐃⲆΔᐃⲆⵠ: "img/app-store-badge.png",
    ᐃⲆᐃΔⲆΔΔΔᐃ: "img/play-store-badge.png",
    ᐃΔᐃⵠⲆⵠⵠᐃᐃ: "img/mobile-boxad.png",
    ᐃΔⵠΔⲆΔⵠ: "img/modify-name-out.png",
    ⵠΔΔᐃⲆⲆⵠ: "img/modify-name-in.png",
    ⵠᐃⲆⵠᐃΔⲆ: "img/modify-name-click.png",
    ΔⵠⵠⲆⲆⵠⲆ: "img/copy-id-button-out.png",
    ΔⲆⲆΔΔΔΔ: "img/copy-id-button-hover.png",
    ⵠⵠΔⲆᐃⵠⵠ: "img/copy-id-button-active.png",
    ᐃᐃⲆᐃⲆⵠⵠ: "img/yes-button-out.png",
    ⵠⵠΔⲆⲆΔⵠ: "img/yes-button-in.png",
    ⵠⲆΔⲆᐃⲆⲆ: "img/yes-button-click.png",
    ᐃᐃᐃⲆⲆⵠΔ: "img/yes-300-button-out.png",
    ⲆᐃⵠⲆⲆⲆΔ: "img/yes-300-button-in.png",
    ΔΔⲆⲆⲆⲆⲆ: "img/yes-300-button-click.png",
    ⵠⲆΔⲆⵠⲆⲆ: "img/no-button-out.png",
    ΔΔᐃⵠⵠⲆΔ: "img/no-button-in.png",
    ᐃᐃᐃΔⲆᐃΔ: "img/no-button-click.png",
    ΔᐃⵠⵠⵠᐃⲆ: "img/no-thanks-button-out.png",
    ᐃᐃᐃⵠⵠⲆⲆ: "img/no-thanks-button-in.png",
    ⲆⲆΔᐃΔⵠⵠ: "img/no-thanks-button-click.png",
    ᐃᐃᐃᐃⵠⲆⵠ: "img/shop-button-out.png",
    ⵠΔΔⲆⵠΔΔ: "img/shop-button-in.png",
    ⲆⲆᐃΔᐃⲆᐃ: "img/shop-button-click.png",
    ΔΔⲆⵠΔᐃⵠ: "img/logout-out.png",
    ᐃⵠΔⵠᐃᐃΔ: "img/logout-in.png",
    ΔⲆⵠⵠΔΔⵠ: "img/logout-click.png",
    ⲆΔΔᐃⵠΔΔ: "img/terms-button-out.png",
    ᐃⲆⵠⲆᐃᐃⵠ: "img/terms-button-in.png",
    ΔⵠⲆⵠᐃΔⵠ: "img/terms-button-click.png",
    ⵠΔⵠⲆΔⵠΔ: "img/tutorial-icon.png",
    ᐃⵠᐃⲆᐃᐃΔ: "img/skins-icon.png",
    ΔⲆⲆᐃᐃΔΔ: "img/shop-icon.png",
    ⵠⵠᐃⲆⲆⵠⵠⲆΔ: "img/paint-icon.png",
    ΔΔⲆᐃᐃᐃⲆ: "img/leaderboard-icon.png",
    ᐃⲆⲆⵠᐃⲆⵠ: "img/start-icon.png",
    ⲆΔΔⲆᐃⵠΔ: "img/profile-icon.png",
    ᐃᐃⲆΔΔΔΔ: "img/server-access-icon2.png",
    ΔᐃⲆⲆᐃΔⲆ: "img/button-homepage-bg-out.png",
    ᐃΔⵠⲆᐃΔⵠ: "img/button-homepage-bg-in.png",
    ΔⲆΔⲆⲆⲆΔ: "img/button-homepage-bg-click.png",
    ⲆⵠΔᐃᐃᐃᐃ: "img/button-bottom-homepage-bg-out.png",
    ᐃⵠⲆᐃⵠⲆᐃ: "img/button-bottom-homepage-bg-in.png",
    ⵠⵠⵠᐃⲆⵠᐃ: "img/button-bottom-homepage-bg-click.png",
    ⲆΔⲆᐃⲆⵠΔ: "img/lvl-player.png",
    ΔΔⵠⲆⵠΔᐃ: "img/avatar-player.png",
    ⲆΔΔⲆᐃᐃⵠ: "img/avatar-player1.png",
    ΔⲆⵠᐃⵠΔΔ: "img/avatar-player2.png",
    ⲆΔⲆΔΔᐃΔ: "img/avatar-player3.png",
    ΔⵠⵠΔⵠⲆᐃ: "img/avatar-player4.png",
    ⵠᐃΔᐃⵠΔΔ: "img/avatar-player5.png",
    ⵠⲆⵠᐃⲆⲆᐃ: "img/avatar-player6.png",
    ⵠⵠⲆΔΔⵠⲆ: "img/avatar-player7.png",
    ΔΔⲆⵠΔΔᐃ: "img/avatar-player8.png",
    ⵠΔΔⵠᐃᐃⲆ: "img/avatar-player9.png",
    ⵠᐃᐃᐃⵠⵠⲆ: "img/avatar-player10.png",
    ΔΔᐃᐃⵠⵠΔ: "img/avatar-player11.png",
    ⲆᐃΔⲆΔΔⵠ: "img/avatar-player12.png",
    ⲆΔⲆᐃᐃⲆⵠ: "img/avatar-player13.png",
    ⵠⲆΔΔⵠⲆᐃ: "img/avatar-player14.png",
    ⵠᐃⲆΔⲆΔᐃ: "img/avatar-player14.png",
    ⵠΔᐃⲆⲆⵠᐃ: "img/avatar-player14.png",
    ⵠⲆᐃⵠⲆᐃΔ: "img/avatar-player14.png",
    ⲆᐃΔΔⵠⲆΔΔΔ: "img/golden-bread.png",
    ⵠⵠⵠⵠⵠⵠᐃ: "img/buy-bread-out.png",
    ⲆⵠⲆⵠΔⲆΔ: "img/buy-bread-in.png",
    ᐃΔⲆΔΔⵠᐃ: "img/buy-bread-click.png",
    ⵠⵠΔΔΔᐃⵠ: "img/gauge.png",
    ⲆΔᐃⲆΔⵠᐃⲆᐃ: "img/season-4-out.png",
    ᐃᐃΔᐃⵠᐃⵠᐃⵠ: "img/season-4-in.png",
    ⵠᐃⵠⲆΔⲆⵠᐃᐃ: "img/season-4-click.png",
    ⲆⲆⲆᐃᐃΔⲆⵠΔ: "img/season4-box.png",
    ⲆⲆⲆΔⵠⲆⲆΔᐃ: "img/season-5-out.png",
    ⵠⲆⲆⲆⵠⵠⵠΔΔ: "img/season-5-in.png",
    ⲆⲆⲆⲆΔΔⵠᐃⵠ: "img/season-5-click.png",
    ⵠⲆⵠᐃᐃⵠΔᐃΔ: "img/season5-box.png",
    ΔⵠᐃⵠⲆⲆⲆ: "img/season-6-out.png",
    ΔⲆΔᐃⲆᐃΔ: "img/season-6-in.png",
    ⲆΔⵠΔΔⲆⵠ: "img/season-6-click.png",
    ΔΔⵠΔᐃⲆΔ: "img/season6-box.png",
    ᐃᐃᐃᐃᐃⵠⲆ: "img/profile3-box.png",
    ΔⲆⲆᐃⲆⲆⲆ: "img/skins-box.png",
    ⲆᐃΔⲆᐃⲆΔ: "img/shop-box.png",
    ΔΔᐃⲆᐃⲆᐃΔⵠ: "img/private-server-box.png",
    ᐃᐃᐃⲆⵠᐃⲆ: "img/location-box.png",
    ⵠᐃΔᐃⲆⵠᐃ: "img/server-duration-box.png",
    ⲆᐃΔΔᐃΔⵠ: "img/tutorial-box.png",
    ΔᐃⲆΔⲆΔᐃ: "img/leaderboard2-box.png",
    ᐃΔᐃΔⲆⵠⲆ: "img/buy-breads-box.png",
    ΔⵠΔᐃⲆᐃⵠ: "img/bag-box.png",
    ΔΔΔΔΔⵠᐃ: "img/deadbox-box.png",
    ⲆⲆΔⲆᐃⲆⵠ: "img/book-box.png",
    ᐃᐃᐃⵠΔΔⲆ: "img/accessories-box.png",
    ⲆᐃᐃⲆᐃⲆⲆ: "img/customskin-box.png",
    ⵠΔⲆᐃⵠⲆⵠ: "img/bag-lasts.png",
    ⵠⵠᐃⵠᐃΔᐃ: "img/server-lasts.png",
    ⵠΔΔⵠΔⵠᐃ: "img/server-access-box3.png",
    ΔΔⵠᐃⲆⲆⲆ: "img/lootbox-box.png",
    ⵠⵠⵠᐃΔⵠⵠ: "img/change-nickname0.png",
    ⲆⵠⵠᐃⲆⵠⵠ: "img/change-nickname1.png",
    ΔⵠⲆᐃⵠⲆᐃ: "img/cheating-box.png",
    ⵠΔⵠⵠΔΔⲆᐃΔ: "img/daily-quest-box.png",
    ⲆⲆΔᐃⲆⲆⲆΔⲆ: "img/daily-5-bread.png",
    ⲆΔᐃᐃⲆⵠΔⵠⲆ: "img/daily-10-bread.png",
    ⲆᐃΔⵠΔᐃᐃᐃΔ: "img/daily-valid.png",
    ΔΔⲆⲆᐃᐃᐃ: "img/normal-profile-out.png",
    ΔⲆΔⲆⲆⵠᐃ: "img/normal-profile-in.png",
    ⲆⲆⵠⵠᐃⲆⲆ: "img/normal-profile-click.png",
    ⵠⲆᐃᐃΔᐃⲆ: "img/forest-profile-out.png",
    ⲆᐃⲆΔᐃΔΔ: "img/forest-profile-in.png",
    ᐃⲆⲆⲆⲆᐃΔ: "img/forest-profile-click.png",
    ΔⲆⵠⵠⲆⲆⵠ: "img/zombie-profile-out.png",
    ᐃᐃⲆΔⵠΔⵠ: "img/zombie-profile-in.png",
    ᐃᐃⵠᐃΔⵠⲆ: "img/zombie-profile-click.png",
    ΔΔⲆⵠⲆΔᐃ: "img/vampire-profile-out.png",
    ᐃⲆΔΔⲆⲆⲆ: "img/vampire-profile-in.png",
    ᐃΔⲆⲆⲆΔᐃ: "img/vampire-profile-click.png",
    ᐃᐃᐃᐃⲆⵠⵠ: "img/total-profile-out.png",
    ΔⵠⵠⲆⵠⲆⲆ: "img/total-profile-in.png",
    ⵠᐃⵠⲆᐃΔⲆ: "img/total-profile-click.png",
    ΔⵠⵠΔⲆⲆⲆ: "img/season1-out.png",
    ⲆᐃΔⲆⵠⵠᐃ: "img/season1-in.png",
    ⵠⲆⲆⲆⲆⲆⵠ: "img/season1-click.png",
    ᐃᐃΔⵠⲆᐃᐃ: "img/season2-out.png",
    ᐃⲆⵠΔᐃⲆⵠ: "img/season2-in.png",
    ΔΔⲆⵠⲆΔΔ: "img/season2-click.png",
    ΔⵠⵠΔᐃⲆᐃ: "img/season3-out.png",
    ⲆᐃⲆⲆΔᐃⵠ: "img/season3-in.png",
    ⵠᐃΔⵠΔΔᐃ: "img/season3-click.png",
    ⵠⲆᐃᐃᐃⲆᐃ: "img/season4-out.png",
    ⲆᐃⲆᐃΔᐃΔ: "img/season4-in.png",
    ⲆΔⵠⵠⲆⲆⵠ: "img/season4-click.png",
    ΔᐃⲆᐃⲆΔᐃ: "img/season5-out.png",
    ΔⵠⵠΔᐃΔΔ: "img/season5-in.png",
    ᐃΔᐃᐃⲆᐃⲆ: "img/season5-click.png",
    ⲆⵠⵠⵠΔΔⲆ: "img/season6-out.png",
    ⵠΔΔⵠΔⲆΔ: "img/season6-in.png",
    ⲆᐃⵠΔΔᐃⵠ: "img/season6-click.png",
    ⲆⵠⲆⲆᐃᐃⵠ: "img/locked-skin-alert.png",
    ⵠⲆᐃᐃⲆⲆΔ: "img/locked-custom-alert.png",
    ᐃⲆⲆⵠΔᐃⲆ: "img/bg-red-locked.png",
    ⵠⲆᐃᐃⵠⵠᐃ: "img/skin-button-out.png",
    ΔⵠᐃΔⵠⵠⵠ: "img/skin-button-in.png",
    ⲆΔᐃᐃᐃⲆᐃ: "img/skin-button-click.png",
    ⵠⲆᐃΔᐃⲆⲆ: "img/accessory-button-out.png",
    ΔⲆΔᐃⵠⲆⲆ: "img/accessory-button-in.png",
    ᐃᐃΔⲆⲆᐃⵠ: "img/accessory-button-click.png",
    ΔΔⵠⲆⵠⵠⵠ: "img/bag-button-out.png",
    ⲆⵠⵠⲆⲆᐃᐃ: "img/bag-button-in.png",
    ΔᐃᐃⲆⲆⲆⵠ: "img/bag-button-click.png",
    ⲆⵠΔΔⵠⲆᐃ: "img/book-button-out.png",
    ⲆⲆᐃⲆⵠⵠⵠ: "img/book-button-in.png",
    ⲆᐃΔⲆⵠᐃⲆ: "img/book-button-click.png",
    ⲆᐃΔⲆⵠΔᐃ: "img/deadbox-button-out.png",
    ΔᐃΔΔⲆⵠⲆ: "img/deadbox-button-in.png",
    ᐃᐃⲆᐃⲆⵠⲆ: "img/deadbox-button-click.png",
    ⲆᐃᐃⵠΔⵠⵠ: "img/loot-button-out.png",
    ΔⵠΔΔᐃⲆΔ: "img/loot-button-in.png",
    ⲆⲆᐃΔΔΔⲆ: "img/loot-button-click.png",
    ᐃⲆⵠΔΔΔΔ: "img/free-item-out.png",
    ΔΔΔⵠᐃᐃᐃ: "img/free-item-in.png",
    ⵠⲆΔᐃⲆΔⵠ: "img/free-item-click.png",
    ⵠⲆⵠᐃ: "img/wood-item-out.png",
    ⵠⲆⲆⵠ: "img/wood-item-in.png",
    ⲆΔΔΔ: "img/wood-item-click.png",
    ᐃⲆⲆᐃⵠᐃⲆ: "img/stone-item.png",
    ᐃⲆⲆΔⵠⵠΔ: "img/stone-item-in.png",
    ⵠΔΔⲆⲆⵠᐃ: "img/stone-item-click.png",
    ᐃᐃΔᐃⵠⲆΔ: "img/gold-item.png",
    ⲆⵠⵠΔⲆΔᐃ: "img/gold-item-in.png",
    ⵠᐃⲆΔⲆⵠᐃ: "img/gold-item-click.png",
    ᐃᐃⵠᐃΔⲆᐃ: "img/diamond-item.png",
    ᐃΔᐃᐃⲆᐃᐃ: "img/diamond-item-in.png",
    ᐃⲆⵠΔⲆⲆᐃ: "img/diamond-item-click.png",
    ᐃᐃⵠⲆⲆⲆᐃ: "img/amethyst-item.png",
    ᐃᐃⵠⵠⲆΔⲆ: "img/amethyst-item-in.png",
    ⲆⲆΔᐃⲆⵠⵠ: "img/amethyst-item-click.png",
    Δᐃⵠᐃⵠᐃⵠ: "img/reidite-item.png",
    ⵠᐃΔΔΔᐃᐃ: "img/reidite-item-in.png",
    ⵠⵠΔΔᐃΔⲆ: "img/reidite-item-click.png",
    ΔᐃΔⵠⵠᐃⵠ: "img/special-item-out.png",
    ᐃⲆⵠⲆᐃⵠⲆ: "img/special-item-in.png",
    ΔⲆΔⵠⵠΔⵠ: "img/special-item-click.png",
    ΔⵠⲆᐃⲆᐃⲆ: "img/level-item-out.png",
    ⲆⵠⲆⵠⲆⲆᐃ: "img/level-item-in.png",
    ⵠⲆᐃⵠᐃᐃΔ: "img/level-item-click.png",
    ΔΔⵠΔⲆᐃΔ: "img/skin-previous-out.png",
    ⵠⵠⲆΔᐃⵠᐃ: "img/skin-previous-in.png",
    ΔΔⲆΔⲆⲆⵠ: "img/skin-previous-click.png",
    ⵠⵠΔΔⲆⵠᐃ: "img/skin-next-out.png",
    ΔⲆⵠⵠᐃΔΔ: "img/skin-next-in.png",
    ⵠᐃⲆⵠⵠⵠΔ: "img/skin-next-click.png",
    ⵠᐃⲆΔⲆ: "img/back-button-out.png",
    ⲆⲆΔⲆⵠ: "img/back-button-in.png",
    Ⲇᐃᐃⵠⵠ: "img/back-button-click.png",
    ΔΔⲆᐃⲆⲆΔ: "img/get-more-button-out.png",
    ᐃᐃΔⵠᐃᐃⵠ: "img/get-more-button-in.png",
    ⵠⲆΔΔᐃⲆⲆ: "img/get-more-button-click.png",
    ⲆⲆⵠⲆΔⲆᐃ: "img/currency1-out.png",
    ⲆᐃⲆⵠᐃΔΔ: "img/currency1-in.png",
    ᐃᐃᐃΔΔᐃΔ: "img/currency1-click.png",
    ⲆΔΔᐃⲆᐃⵠ: "img/currency2-out.png",
    ⵠⲆⲆᐃᐃⲆⲆ: "img/currency2-in.png",
    ΔᐃⲆⲆᐃⲆΔ: "img/currency2-click.png",
    ΔΔΔⲆⲆⲆΔ: "img/currency3-out.png",
    ΔⲆᐃΔΔᐃΔ: "img/currency3-in.png",
    ᐃΔᐃⲆⲆΔⲆ: "img/currency3-click.png",
    ΔⲆᐃΔΔⵠⲆ: "img/currency4-out.png",
    ᐃΔⵠⵠⲆΔΔ: "img/currency4-in.png",
    ᐃᐃᐃΔᐃⲆᐃ: "img/currency4-click.png",
    ⵠⲆΔΔⲆⲆⲆ: "img/currency5-out.png",
    ⵠᐃᐃΔⵠⲆⲆ: "img/currency5-in.png",
    ⵠΔΔᐃΔΔΔ: "img/currency5-click.png",
    ⵠΔΔⲆⵠⵠⵠ: "img/price1-out.png",
    ᐃⲆᐃΔⲆΔΔ: "img/price1-in.png",
    ΔΔⵠᐃΔⵠⵠ: "img/price1-click.png",
    ⵠⲆᐃⵠⲆⵠⲆ: "img/price2-out.png",
    ᐃΔΔΔⲆⲆⵠ: "img/price2-in.png",
    ΔⲆⵠΔᐃⲆΔ: "img/price2-click.png",
    ᐃΔᐃΔᐃⵠⲆ: "img/price3-out.png",
    ᐃΔᐃᐃⵠⵠⵠ: "img/price3-in.png",
    ᐃⵠⵠⵠⲆᐃⵠ: "img/price3-click.png",
    ⲆⵠⲆΔᐃⲆⵠ: "img/price4-out.png",
    ᐃΔᐃᐃΔᐃⵠ: "img/price4-in.png",
    ΔΔⲆⵠᐃᐃⲆ: "img/price4-click.png",
    ⵠΔⵠᐃΔᐃⵠ: "img/price5-out.png",
    ⲆΔΔⵠᐃᐃⵠ: "img/price5-in.png",
    ΔⲆⲆⵠⵠⲆⲆ: "img/price5-click.png",
    ⲆΔⵠⲆⵠⵠⲆᐃⲆ: "img/buy-private-server-out.png",
    Δᐃᐃᐃᐃᐃⵠᐃᐃ: "img/buy-private-server-in.png",
    ⵠᐃⲆⲆⵠΔⲆᐃΔ: "img/buy-private-server-click.png",
    ᐃⵠΔΔⵠⵠⲆ: "img/atlanta-button-out.png",
    ⲆⵠΔᐃⲆⵠⲆ: "img/atlanta-button-in.png",
    ΔΔᐃΔᐃᐃᐃ: "img/atlanta-button-click.png",
    ⲆⵠΔᐃⲆᐃΔ: "img/los-angeles-button-out.png",
    ⲆᐃᐃᐃΔᐃΔ: "img/los-angeles-button-in.png",
    ΔᐃⵠᐃⵠΔⵠ: "img/los-angeles-button-click.png",
    ⲆΔᐃⵠᐃᐃⲆ: "img/sydney-button-out.png",
    ΔᐃⵠΔⵠⲆᐃ: "img/sydney-button-in.png",
    ΔΔⲆⵠⲆⵠⲆ: "img/sydney-button-click.png",
    ⲆΔⵠⵠⲆΔᐃ: "img/frankfurt-button-out.png",
    ⲆᐃΔⵠⲆⲆⲆ: "img/frankfurt-button-in.png",
    ΔⲆᐃⲆⵠᐃⵠ: "img/frankfurt-button-click.png",
    ᐃΔⲆᐃⲆⵠⲆ: "img/osaka-button-out.png",
    ΔΔⲆⲆΔᐃⵠ: "img/osaka-button-in.png",
    ᐃⵠⵠᐃΔΔⲆ: "img/osaka-button-click.png",
    ᐃΔᐃⵠΔΔⵠΔⲆ: "img/yes-location-out.png",
    ᐃΔⵠΔⲆᐃᐃΔΔ: "img/yes-location-in.png",
    ᐃⵠᐃⵠΔⲆᐃΔΔ: "img/yes-location-click.png",
    ΔⲆᐃⵠΔⲆⵠ: "img/3days-button-out.png",
    ⵠΔΔⵠᐃⲆⲆ: "img/3days-button-in.png",
    ᐃⲆⵠᐃΔΔᐃ: "img/3days-button-click.png",
    ⵠⵠⵠⵠᐃⵠⲆ: "img/7days-button-out.png",
    ⲆⲆⲆᐃⲆᐃᐃ: "img/7days-button-in.png",
    ᐃⲆⲆⵠᐃⵠⵠ: "img/7days-button-click.png",
    ⵠᐃⵠⵠᐃΔⵠ: "img/30days-button-out.png",
    ⲆᐃⵠΔⲆⲆΔ: "img/30days-button-in.png",
    ⲆⵠⵠΔⲆᐃΔ: "img/30days-button-click.png",
    ⵠᐃⲆⲆⵠⲆΔ: "img/90days-button-out.png",
    ⵠⵠⲆΔΔΔⵠ: "img/90days-button-in.png",
    ⵠⲆⲆⵠⲆΔⲆ: "img/90days-button-click.png",
    ΔΔⲆⵠΔᐃΔ: "img/spin1.png",
    ⲆΔΔⲆΔΔⲆ: "img/spin2.png",
    ⵠᐃΔΔⲆΔΔ: "img/spin3.png",
    ⵠΔΔⵠᐃΔⲆ: "img/spin4.png",
    ⵠⲆⵠⲆⲆⵠⵠ: "img/spin5.png",
    ⵠⲆΔΔΔᐃⵠ: "img/spin6.png",
    Δⵠⵠⵠⵠⵠᐃ: "img/arrow-spin.png",
    ⵠΔᐃᐃᐃⲆⲆ: "img/spin-button-1-out.png",
    ΔᐃⲆⲆᐃⵠᐃ: "img/spin-button-1-in.png",
    ⲆⵠⵠⲆΔⲆΔ: "img/spin-button-1-click.png",
    ⵠΔⲆᐃⲆⲆΔ: "img/spin-button-2-out.png",
    ⵠΔᐃⵠⵠᐃΔ: "img/spin-button-2-in.png",
    ⲆⵠᐃΔΔΔⲆ: "img/spin-button-2-click.png",
    ⲆⲆΔⵠᐃΔᐃ: "img/spin-button-3-out.png",
    ⲆᐃⲆⵠⲆⵠΔ: "img/spin-button-3-in.png",
    ᐃᐃⲆΔᐃᐃΔ: "img/spin-button-3-click.png",
    ᐃⲆⲆⲆⵠᐃⵠ: "img/spin-button-4-out.png",
    ⵠΔⵠⵠⵠΔⵠ: "img/spin-button-4-in.png",
    ⵠⲆⵠΔⵠᐃᐃ: "img/spin-button-4-click.png",
    ᐃⲆⲆΔⲆⵠⵠ: "img/spin-button-5-out.png",
    ᐃⵠᐃⵠⲆⲆᐃ: "img/spin-button-5-in.png",
    ΔⲆΔΔᐃⲆᐃ: "img/spin-button-5-click.png",
    ᐃΔᐃⵠⵠᐃⲆ: "img/spin-light.png",
    ᐃⵠⲆᐃΔⵠᐃ: "img/tuto-wiki-out.png",
    ⲆΔᐃΔᐃⵠⲆ: "img/tuto-wiki-in.png",
    ⲆⲆⵠⵠⵠΔᐃ: "img/tuto-wiki-click.png",
    ⵠⵠΔⵠΔⲆᐃ: "img/tuto-previous-out.png",
    ΔⲆⲆⲆᐃᐃⵠ: "img/tuto-previous-in.png",
    ⲆⵠⵠΔⵠⲆⵠ: "img/tuto-previous-click.png",
    ΔΔⵠⲆᐃᐃⵠ: "img/tuto-next-out.png",
    ΔⵠⵠⵠᐃᐃΔ: "img/tuto-next-in.png",
    ⵠⲆᐃⲆᐃΔⵠ: "img/tuto-next-click.png",
    ΔᐃΔΔⲆⲆⲆ: "img/time-leaderboard-out.png",
    ᐃᐃᐃⵠΔⵠⵠ: "img/time-leaderboard-in.png",
    ᐃⵠⲆⵠⲆΔᐃ: "img/time-leaderboard-click.png",
    ᐃⲆⲆⵠⲆⵠΔ: "img/score-leaderboard-out.png",
    ⵠᐃᐃⵠᐃⵠⵠ: "img/score-leaderboard-in.png",
    ⲆᐃⵠΔΔⲆⵠ: "img/score-leaderboard-click.png",
    ⵠⲆⲆⲆΔΔᐃ: "img/lvl-leaderboard-out.png",
    ᐃᐃⲆⵠᐃⵠΔ: "img/lvl-leaderboard-in.png",
    ΔⲆΔᐃᐃⲆΔ: "img/lvl-leaderboard-click.png",
    ΔᐃⲆΔΔΔΔ: "img/kill-leaderboard-out.png",
    ΔᐃᐃⵠΔᐃⲆ: "img/kill-leaderboard-in.png",
    ΔⲆΔᐃΔΔⲆ: "img/kill-leaderboard-click.png",
    ⲆΔⵠΔᐃⲆⵠ: "img/all-leaderboard-out.png",
    ᐃᐃⵠⲆΔᐃΔ: "img/all-leaderboard-in.png",
    ᐃΔⲆᐃᐃΔⵠ: "img/all-leaderboard-click.png",
    ΔΔΔⵠⵠΔⲆ: "img/today-leaderboard-out.png",
    ⲆⵠⲆⲆΔⵠⵠ: "img/today-leaderboard-in.png",
    ⲆᐃᐃⲆΔⲆⲆ: "img/today-leaderboard-click.png",
    ᐃΔⲆⵠⲆᐃⵠ: "img/week-leaderboard-out.png",
    ᐃⵠΔⲆᐃᐃΔ: "img/week-leaderboard-in.png",
    ᐃΔΔⵠⵠⵠⵠ: "img/week-leaderboard-click.png",
    ⵠΔⲆΔⵠⲆⵠ: "img/season1-out.png",
    ⵠⵠΔΔⵠⲆΔ: "img/season1-in.png",
    ⵠᐃᐃⲆⵠⵠⲆ: "img/season1-click.png",
    ⲆΔⵠᐃᐃⵠⲆ: "img/season2-out.png",
    ⲆΔᐃⵠⲆᐃᐃ: "img/season2-in.png",
    ⲆᐃΔΔⵠⵠΔ: "img/season2-click.png",
    ⲆᐃⲆᐃⵠⲆⲆ: "img/season3-out.png",
    ⵠΔΔᐃⲆⲆΔ: "img/season3-in.png",
    ⲆⲆᐃᐃΔⵠᐃ: "img/season3-click.png",
    ᐃⲆᐃⵠⲆᐃⲆ: "img/season4-out.png",
    ⲆⵠΔⵠⲆⵠᐃ: "img/season4-in.png",
    ᐃΔⵠⵠΔΔⵠ: "img/season4-click.png",
    ⲆᐃⲆΔⵠⵠΔ: "img/season5-out.png",
    ᐃΔᐃᐃᐃⲆⵠ: "img/season5-in.png",
    ΔⲆⵠᐃᐃⵠᐃ: "img/season5-click.png",
    ᐃⲆⵠⲆⲆⲆᐃ: "img/season6-out.png",
    ⵠᐃΔᐃᐃⵠΔ: "img/season6-in.png",
    ⲆⵠᐃⲆⵠᐃⲆ: "img/season6-click.png",
    ⲆⵠᐃⲆᐃᐃΔ: "img/total-lead-out.png",
    ᐃⲆΔⵠⲆᐃⵠ: "img/total-lead-in.png",
    ⵠᐃᐃⵠⵠᐃᐃ: "img/total-lead-click.png",
    ⵠᐃⵠᐃᐃΔⵠ: "img/normal-lead-out.png",
    ⵠⵠⲆⲆⲆᐃᐃ: "img/normal-lead-in.png",
    ⲆⲆᐃⲆⵠⵠⲆ: "img/normal-lead-click.png",
    ᐃⲆⵠᐃΔᐃⵠ: "img/forest-lead-out.png",
    ⲆⵠΔΔᐃᐃᐃ: "img/forest-lead-in.png",
    ΔΔΔΔᐃᐃᐃ: "img/forest-lead-click.png",
    ⵠᐃΔⲆⲆᐃⲆ: "img/vampire-lead-out.png",
    ΔⲆᐃⵠⲆⵠⲆ: "img/vampire-lead-in.png",
    ᐃΔⵠⲆⵠⲆⲆ: "img/vampire-lead-click.png",
    ⵠⲆⵠᐃΔΔΔ: "img/zombie-lead-out.png",
    ⵠᐃⲆⲆⵠᐃⲆ: "img/zombie-lead-in.png",
    ΔⲆᐃⵠΔⵠⵠ: "img/zombie-lead-click.png",
    ᐃⲆⲆᐃΔⲆⲆ: "img/day-level5.png",
    ⵠᐃᐃΔΔΔᐃ: "img/night-level5.png",
    ⲆΔΔⵠᐃⵠⵠ: "img/day-level10.png",
    ᐃⵠᐃⲆᐃⲆⵠ: "img/night-level10.png",
    ᐃᐃΔⲆⵠⵠᐃ: "img/day-level15.png",
    ΔⲆⲆΔᐃⵠⵠ: "img/night-level15.png",
    ᐃⲆⵠⵠΔΔⵠ: "img/day-level20.png",
    ΔᐃΔᐃΔⲆᐃ: "img/night-level20.png",
    ΔⵠⲆⵠⵠΔΔ: "img/day-level25.png",
    ⵠᐃⵠᐃᐃⲆᐃ: "img/night-level25.png",
    ⵠΔᐃᐃΔⵠⵠ: "img/day-level30.png",
    ⲆΔⲆⵠⵠΔⵠ: "img/night-level30.png",
    ⵠᐃⲆΔⵠᐃⵠ: "img/day-level35.png",
    ᐃⲆⵠΔΔⲆⲆ: "img/night-level35.png",
    ⲆⵠᐃΔⲆᐃⲆ: "img/day-level40.png",
    ⵠΔⵠⵠⵠⵠΔ: "img/night-level40.png",
    ΔᐃⲆⵠᐃⲆⵠ: "img/day-level45.png",
    ⲆⵠⲆᐃΔⵠΔ: "img/night-level45.png",
    ᐃⵠⵠᐃⵠⲆΔ: "img/day-level50.png",
    ⵠᐃᐃⲆⲆᐃᐃ: "img/night-level50.png",
    ᐃⲆΔⵠᐃⵠⲆ: "img/day-level55.png",
    ⲆⲆᐃᐃⲆⲆΔ: "img/night-level55.png",
    ⲆᐃΔᐃᐃΔⵠ: "img/day-level60.png",
    ⲆΔⵠΔᐃⵠᐃ: "img/night-level60.png",
    ⵠᐃⲆⲆⵠΔⵠ: "img/day-skin-devast0.png",
    ⲆΔⵠⲆᐃⲆᐃ: "img/night-skin-devast0.png",
    ⲆΔⲆΔⵠⵠⵠ: "img/day-hand-devaster.png",
    ΔᐃᐃⲆⲆⵠᐃ: "img/night-hand-devaster.png",
    ΔⵠⲆΔΔΔⵠ: "img/day-skin-star0.png",
    ᐃΔⵠᐃᐃᐃΔ: "img/night-skin-star0.png",
    ⵠⵠΔⵠΔⲆΔ: "img/day-hand-star0.png",
    ΔΔⲆⲆΔⵠⵠ: "img/night-hand-star0.png",
    ⵠΔⲆⲆⲆΔᐃ: "img/day-vampire.png",
    ᐃᐃᐃᐃⲆΔⵠ: "img/night-vampire.png",
    ⲆᐃⲆΔⲆⲆΔ: "img/day-hand-vampire.png",
    ᐃᐃⵠⲆᐃⵠⲆ: "img/night-hand-vampire.png",
    ⵠⵠⲆⲆⲆᐃⵠ: "img/day-zombie.png",
    ⵠᐃⲆⵠᐃⲆΔ: "img/night-zombie.png",
    ᐃⵠΔᐃΔⲆᐃ: "img/day-hand-zombie.png",
    ΔⵠⵠⵠⲆᐃΔ: "img/night-hand-zombie.png",
    ⲆⵠⵠᐃᐃⲆᐃ: "img/day-skin113.png",
    ΔᐃΔⲆⲆⲆⲆ: "img/night-skin113.png",
    ᐃⵠΔⲆⲆⲆⵠ: "img/day-hand-skin113.png",
    ⵠᐃΔΔΔᐃⵠ: "img/night-hand-skin113.png",
    ⵠᐃⵠΔⵠⵠⵠ: "img/day-skin0.png",
    ⲆⵠⵠⲆⲆⲆᐃ: "img/night-skin0.png",
    ⵠΔⲆⵠⲆᐃᐃ: "img/day-skin1.png",
    ⲆⲆⲆⵠΔᐃⵠ: "img/night-skin1.png",
    ΔⲆᐃⵠⲆⵠΔ: "img/day-skin2.png",
    ΔⲆⵠᐃⲆⲆⲆ: "img/night-skin2.png",
    ⵠᐃᐃⲆΔΔᐃ: "img/day-skin3.png",
    ᐃΔᐃⲆᐃᐃⲆ: "img/night-skin3.png",
    ΔⲆⵠⲆᐃᐃⵠ: "img/day-skin4.png",
    ⲆΔⵠⵠᐃᐃᐃ: "img/night-skin4.png",
    ⲆᐃⵠⵠⲆⵠⲆ: "img/day-skin5.png",
    ᐃᐃⵠⵠⲆᐃⵠ: "img/night-skin5.png",
    ΔᐃᐃⲆⲆᐃᐃ: "img/day-skin6.png",
    ⵠⵠᐃⲆᐃΔⵠ: "img/night-skin6.png",
    ᐃΔⲆΔΔⲆⲆ: "img/day-skin7.png",
    ⲆΔⲆᐃᐃᐃⵠ: "img/night-skin7.png",
    ⵠᐃⲆᐃⲆᐃⵠ: "img/day-skin8.png",
    ᐃᐃⵠⵠⵠΔⲆ: "img/night-skin8.png",
    ⲆᐃⲆΔⵠⵠᐃ: "img/day-skin9.png",
    ΔᐃⵠΔᐃᐃⵠ: "img/night-skin9.png",
    ⲆᐃΔᐃⵠⲆⵠ: "img/day-skin10.png",
    ⵠᐃⵠⵠΔᐃⲆ: "img/night-skin10.png",
    ⵠΔⵠΔᐃΔᐃ: "img/day-skin11.png",
    ⵠΔⲆᐃⵠⲆⲆ: "img/night-skin11.png",
    ⲆᐃᐃⲆᐃΔⲆ: "img/day-skin12.png",
    ΔⵠᐃᐃⵠⲆΔ: "img/night-skin12.png",
    ᐃΔᐃΔΔΔᐃ: "img/day-skin13.png",
    ⵠᐃᐃⲆΔⲆΔ: "img/night-skin13.png",
    ΔⵠΔⵠΔⵠⲆ: "img/day-skin14.png",
    ΔⵠᐃΔΔΔⵠ: "img/night-skin14.png",
    ⲆᐃⲆⵠᐃⲆⵠ: "img/day-skin15.png",
    ⵠᐃᐃᐃᐃⲆⵠ: "img/night-skin15.png",
    ⵠᐃΔⲆᐃⲆⵠ: "img/day-skin16.png",
    ΔⵠⵠᐃⲆⲆΔ: "img/night-skin16.png",
    ⲆΔᐃⵠΔᐃΔ: "img/day-skin17.png",
    ᐃᐃᐃⲆⲆⵠᐃ: "img/night-skin17.png",
    ⵠΔᐃΔⵠᐃΔ: "img/day-skin18.png",
    ᐃⲆΔΔΔⵠᐃ: "img/night-skin18.png",
    ⵠⲆΔⵠⵠΔⲆ: "img/day-skin19.png",
    ᐃⲆᐃᐃᐃΔΔ: "img/night-skin19.png",
    ⲆⵠΔⵠᐃⵠᐃ: "img/day-skin20.png",
    ΔⵠⵠⵠΔΔᐃ: "img/night-skin20.png",
    ⵠⲆᐃⵠᐃⵠⵠ: "img/day-skin21.png",
    ⲆⵠΔⵠⵠⲆⵠ: "img/night-skin21.png",
    ⲆΔΔᐃΔΔⲆ: "img/day-skin22.png",
    ΔΔΔΔⵠⲆΔ: "img/night-skin22.png",
    ΔⲆᐃⲆⵠΔⲆ: "img/day-skin23.png",
    ᐃᐃⵠⵠⲆⵠΔ: "img/night-skin23.png",
    ⵠᐃᐃΔΔⲆⲆ: "img/day-skin24.png",
    ΔⲆⲆⲆᐃⵠⵠ: "img/night-skin24.png",
    ⲆⲆⵠⲆⲆⲆΔ: "img/day-skin25.png",
    ⲆᐃⲆᐃⵠᐃⵠ: "img/night-skin25.png",
    ΔⵠⲆᐃΔⲆⵠ: "img/day-skin26.png",
    ⲆⵠⵠⲆⵠⵠⵠ: "img/night-skin26.png",
    ⲆⵠᐃΔⵠⵠΔ: "img/day-skin27.png",
    ⲆᐃᐃΔⲆΔᐃ: "img/night-skin27.png",
    ᐃⵠΔⲆⵠⵠΔ: "img/day-skin28.png",
    ᐃᐃΔᐃᐃΔᐃ: "img/night-skin28.png",
    ᐃᐃΔⲆᐃⵠᐃ: "img/day-skin29.png",
    ᐃᐃⲆᐃᐃΔⵠ: "img/night-skin29.png",
    ᐃΔⲆΔΔⵠⲆ: "img/day-skin30.png",
    ⲆⵠᐃΔᐃⵠⲆ: "img/night-skin30.png",
    ᐃᐃᐃΔⵠⵠⲆ: "img/day-skin31.png",
    ᐃΔΔⵠⵠⲆⲆ: "img/night-skin31.png",
    ΔΔⵠⵠΔⲆᐃ: "img/day-skin32.png",
    ᐃᐃⲆΔΔⵠⵠ: "img/night-skin32.png",
    ⵠΔⵠΔⲆᐃⵠ: "img/day-skin33.png",
    ΔⵠΔΔⵠⵠⵠ: "img/night-skin33.png",
    ⵠⵠᐃⵠᐃᐃᐃ: "img/day-skin34.png",
    ΔΔⲆᐃΔᐃⵠ: "img/night-skin34.png",
    ⵠᐃᐃⲆΔΔⲆ: "img/day-skin35.png",
    ⵠΔΔⵠΔᐃΔ: "img/night-skin35.png",
    ⲆⲆⲆΔⵠⲆᐃ: "img/day-skin36.png",
    ΔΔᐃΔΔⵠⲆ: "img/night-skin36.png",
    ⵠᐃⲆᐃⲆⵠᐃ: "img/day-skin37.png",
    ᐃᐃΔᐃⲆⲆᐃ: "img/night-skin37.png",
    ΔΔⵠⲆᐃᐃᐃ: "img/day-skin38.png",
    ⲆⲆΔⵠᐃΔΔ: "img/night-skin38.png",
    ⵠⵠⵠΔⵠⵠᐃ: "img/day-skin39.png",
    ⲆΔⲆᐃΔᐃᐃ: "img/night-skin39.png",
    ΔΔᐃⲆⲆᐃΔ: "img/day-skin40.png",
    ᐃⲆᐃᐃⵠⵠᐃ: "img/night-skin40.png",
    ⵠᐃⵠⵠⵠΔⲆ: "img/day-skin41.png",
    ⲆΔΔⲆΔᐃⲆ: "img/night-skin41.png",
    ᐃᐃᐃΔⵠΔⵠ: "img/day-skin42.png",
    ⲆⲆⵠΔⲆΔⵠ: "img/night-skin42.png",
    ⲆΔΔᐃᐃⲆⵠ: "img/day-skin43.png",
    ⵠⲆᐃΔⵠⵠⲆ: "img/night-skin43.png",
    ΔᐃΔᐃⵠⲆΔ: "img/day-skin44.png",
    ⲆᐃΔⵠΔᐃΔ: "img/night-skin44.png",
    ΔⲆⵠⵠⵠΔᐃ: "img/day-skin45.png",
    ⵠΔⲆᐃⵠⲆΔ: "img/night-skin45.png",
    ΔΔⲆᐃΔΔⵠ: "img/day-skin46.png",
    ⵠⵠΔΔΔΔⵠ: "img/night-skin46.png",
    ᐃⵠⵠⲆΔⲆⵠ: "img/day-skin47.png",
    ᐃᐃΔⲆⲆⲆⵠ: "img/night-skin47.png",
    ΔΔⵠⵠᐃᐃⲆ: "img/day-skin48.png",
    ᐃⵠⵠΔⲆⲆⵠ: "img/night-skin48.png",
    ΔⲆⵠΔᐃᐃΔ: "img/day-skin49.png",
    ⲆᐃⵠΔΔⲆᐃ: "img/night-skin49.png",
    ⵠⵠⲆᐃⵠΔᐃ: "img/day-skin50.png",
    ᐃⲆᐃⲆᐃⲆᐃ: "img/night-skin50.png",
    ᐃΔⲆᐃᐃᐃᐃ: "img/day-skin51.png",
    ⲆΔΔⲆᐃΔⲆ: "img/night-skin51.png",
    ⵠᐃⲆⲆΔⲆᐃ: "img/day-skin52.png",
    ⵠⲆⵠⵠᐃⵠⲆ: "img/night-skin52.png",
    ⲆⵠⵠΔⵠΔⵠ: "img/day-skin53.png",
    ⲆⵠΔΔⲆⵠⲆ: "img/night-skin53.png",
    ⵠΔⵠᐃᐃⲆⲆ: "img/day-skin54.png",
    ⲆⲆⲆⵠᐃᐃⵠ: "img/night-skin54.png",
    ⵠⲆᐃⲆᐃᐃⵠ: "img/day-skin55.png",
    ᐃⲆΔᐃⲆᐃⲆ: "img/night-skin55.png",
    ᐃⵠΔΔⵠΔΔ: "img/day-skin56.png",
    ⲆⲆᐃᐃⵠⲆⲆ: "img/night-skin56.png",
    ΔⵠⵠⵠᐃᐃⲆ: "img/day-skin57.png",
    ⵠᐃⲆΔΔⲆΔ: "img/night-skin57.png",
    ΔⲆᐃⵠⲆᐃᐃ: "img/day-skin58.png",
    ⲆⵠⲆᐃⵠΔⵠ: "img/night-skin58.png",
    ΔΔᐃᐃⲆⲆⵠ: "img/day-skin59.png",
    ΔᐃᐃᐃⲆᐃⲆ: "img/night-skin59.png",
    ⲆⲆΔⵠⵠΔΔ: "img/day-skin60.png",
    ᐃⵠᐃᐃⲆᐃΔ: "img/night-skin60.png",
    ⲆΔᐃΔⲆΔⵠ: "img/day-skin61.png",
    ⲆᐃⵠⵠⵠΔΔ: "img/night-skin61.png",
    ⵠΔⵠⵠⲆⲆΔ: "img/day-skin62.png",
    ⲆᐃⵠⲆΔⵠᐃ: "img/night-skin62.png",
    ⲆΔⲆⵠΔᐃᐃ: "img/day-skin63.png",
    ᐃⲆⵠΔΔⲆⵠ: "img/night-skin63.png",
    ⲆᐃΔᐃⲆᐃᐃ: "img/day-skin64.png",
    ΔΔⵠᐃⲆⵠⵠ: "img/night-skin64.png",
    ᐃⵠΔⵠᐃΔⵠ: "img/day-skin65.png",
    ⵠⵠⲆⵠⲆΔⵠ: "img/night-skin65.png",
    ⲆᐃΔᐃᐃⲆᐃ: "img/day-skin66.png",
    Δⵠᐃⵠⵠᐃᐃ: "img/night-skin66.png",
    ᐃᐃᐃΔᐃᐃⵠ: "img/day-skin67.png",
    ⲆΔΔⵠⲆⵠⲆ: "img/night-skin67.png",
    ⵠᐃΔⵠⲆᐃΔ: "img/day-skin68.png",
    ΔⲆΔⵠⲆⵠⵠ: "img/night-skin68.png",
    ⲆΔⵠⵠⵠⵠⵠ: "img/day-skin69.png",
    ⲆⲆⵠⲆᐃⲆΔ: "img/night-skin69.png",
    ⲆΔΔⲆⲆᐃⵠ: "img/day-skin70.png",
    ⲆⵠⲆΔΔΔᐃ: "img/night-skin70.png",
    ⵠᐃᐃⵠΔᐃΔ: "img/day-skin71.png",
    ᐃΔⲆⲆⵠᐃᐃ: "img/night-skin71.png",
    ΔⵠⲆᐃᐃᐃⵠ: "img/day-skin72.png",
    ⵠᐃⲆᐃⵠⵠⲆ: "img/night-skin72.png",
    ΔΔⲆΔΔⲆᐃ: "img/day-skin73.png",
    ᐃⵠΔᐃΔᐃⵠ: "img/night-skin73.png",
    ⲆᐃⵠΔⲆⵠⲆ: "img/day-skin74.png",
    ⲆᐃΔⵠⵠᐃᐃ: "img/night-skin74.png",
    ᐃΔᐃΔΔⵠⲆ: "img/day-skin75.png",
    ⲆⲆⵠᐃⵠΔΔ: "img/night-skin75.png",
    ΔⵠᐃΔⲆΔⲆ: "img/day-skin76.png",
    ᐃⵠⵠⵠⲆⵠⵠ: "img/night-skin76.png",
    ⵠⵠᐃΔᐃΔⵠ: "img/day-skin77.png",
    ⲆΔⵠⵠΔⲆΔ: "img/night-skin77.png",
    ᐃΔᐃᐃⲆᐃⵠ: "img/day-skin78.png",
    ᐃⲆΔⲆⲆⵠΔ: "img/night-skin78.png",
    ⵠⵠⲆΔᐃⲆⵠ: "img/day-skin79.png",
    ΔⲆⲆⲆᐃΔΔ: "img/night-skin79.png",
    ΔⲆΔⲆΔⵠⲆ: "img/day-skin80.png",
    ⵠⲆᐃΔⵠΔΔ: "img/night-skin80.png",
    ⵠⵠΔᐃⲆΔᐃ: "img/day-skin81.png",
    ⵠⵠⵠⲆⲆᐃΔ: "img/night-skin81.png",
    ⵠⲆⲆᐃⲆⲆⵠ: "img/day-skin82.png",
    ⵠⲆⲆΔⵠᐃⲆ: "img/night-skin82.png",
    ᐃⲆⵠᐃⲆⵠΔ: "img/day-skin83.png",
    ΔΔⵠⲆΔΔΔ: "img/night-skin83.png",
    ⲆⲆᐃⲆΔⵠⵠ: "img/day-skin84.png",
    ⵠⲆᐃΔⲆⵠⲆ: "img/night-skin84.png",
    ᐃⲆⵠⵠᐃΔⲆ: "img/day-skin85.png",
    ⲆΔⵠΔᐃᐃⵠ: "img/night-skin85.png",
    ΔᐃΔⲆⲆᐃⵠ: "img/day-skin86.png",
    ΔⲆⵠⲆⲆᐃΔ: "img/night-skin86.png",
    ⲆⲆΔᐃⵠᐃᐃ: "img/day-skin87.png",
    ΔⵠⲆⵠᐃⵠⵠ: "img/night-skin87.png",
    ⵠⲆᐃⲆⲆΔⲆ: "img/day-skin88.png",
    ΔⵠⲆᐃΔⵠΔ: "img/night-skin88.png",
    ⲆΔⲆⵠⵠᐃⵠ: "img/day-skin89.png",
    ⵠᐃΔⲆᐃⵠⵠ: "img/night-skin89.png",
    ⵠⵠⵠⲆΔΔⵠ: "img/day-skin90.png",
    ⲆⵠⵠⲆΔᐃⲆ: "img/night-skin90.png",
    ΔΔⲆᐃᐃⵠⵠ: "img/day-skin91.png",
    ⲆᐃᐃΔΔᐃⲆ: "img/night-skin91.png",
    ⵠΔᐃᐃⲆΔᐃ: "img/day-skin92.png",
    ᐃΔΔⲆⵠΔⲆ: "img/night-skin92.png",
    ᐃⵠⲆⲆⵠΔⵠ: "img/day-skin93.png",
    ᐃⵠΔⲆΔⲆⲆ: "img/night-skin93.png",
    ΔⲆᐃⵠⵠⲆΔ: "img/day-skin94.png",
    Δⵠᐃⵠᐃᐃᐃ: "img/night-skin94.png",
    ΔⵠⵠᐃᐃⲆⲆ: "img/day-skin95.png",
    ⲆⵠᐃⵠΔΔⵠ: "img/night-skin95.png",
    ΔⵠΔⵠⵠⲆᐃ: "img/day-skin96.png",
    ⵠⵠᐃΔᐃΔᐃ: "img/night-skin96.png",
    ⵠⲆⵠᐃⲆⵠⲆ: "img/day-skin97.png",
    ΔⵠⵠΔΔΔⲆ: "img/night-skin97.png",
    ᐃΔⵠⵠΔⲆᐃ: "img/day-skin98.png",
    ΔⲆⲆⵠⲆⲆᐃ: "img/night-skin98.png",
    ⲆⲆⲆᐃⵠᐃΔ: "img/day-skin99.png",
    ᐃᐃⵠⲆᐃⵠⵠ: "img/night-skin99.png",
    ⲆΔᐃΔᐃⵠΔ: "img/day-skin100.png",
    ⲆᐃⵠⲆⵠⲆⵠ: "img/night-skin100.png",
    ⲆΔΔⲆⵠⵠᐃ: "img/day-skin101.png",
    ᐃΔᐃᐃⵠΔⲆ: "img/night-skin101.png",
    ᐃⵠⵠΔᐃⲆΔ: "img/day-skin102.png",
    ⲆⵠᐃⵠΔΔᐃ: "img/night-skin102.png",
    ᐃΔᐃⵠⵠⲆⵠ: "img/day-skin103.png",
    ⵠΔⵠᐃᐃⵠᐃ: "img/night-skin103.png",
    ΔⲆⲆΔᐃᐃΔ: "img/day-skin104.png",
    ᐃᐃⵠⵠⲆΔᐃ: "img/night-skin104.png",
    ΔⲆΔᐃⵠⵠᐃ: "img/day-skin105.png",
    ΔⵠᐃᐃⲆⲆⲆ: "img/night-skin105.png",
    ⵠᐃⵠΔΔⵠᐃ: "img/day-skin106.png",
    ⵠᐃΔᐃᐃᐃⲆ: "img/night-skin106.png",
    ⲆᐃᐃⲆᐃⵠΔ: "img/day-skin107.png",
    ⲆⲆΔᐃᐃⲆⲆ: "img/night-skin107.png",
    ⲆⵠᐃⲆΔΔⵠ: "img/day-skin108.png",
    ⵠᐃᐃⵠⵠᐃⲆ: "img/night-skin108.png",
    ᐃᐃⵠΔᐃⲆⵠ: "img/day-skin109.png",
    ⵠⲆⲆⵠⲆⵠΔ: "img/night-skin109.png",
    ᐃⵠⵠΔΔⲆⲆ: "img/day-skin110.png",
    ⵠⵠΔⲆᐃⲆⲆ: "img/night-skin110.png",
    ΔΔⵠΔᐃΔⵠ: "img/day-skin111.png",
    ⵠᐃⵠᐃᐃΔᐃ: "img/night-skin111.png",
    ⲆΔⲆⵠⵠⵠⲆ: "img/day-skin112.png",
    ⵠᐃΔⵠⵠⵠΔ: "img/night-skin112.png",
    ᐃᐃⲆᐃΔΔⵠⵠᐃ: "img/day-skin113.png",
    ⲆⲆᐃΔΔᐃᐃⵠΔ: "img/night-skin113.png",
    ΔᐃⵠΔⵠᐃᐃ: "img/day-skin114.png",
    ᐃⵠᐃᐃⲆΔⵠ: "img/night-skin114.png",
    ⲆΔⵠΔΔⵠⵠ: "img/day-skin115.png",
    ΔᐃⲆⲆⲆⲆⲆ: "img/night-skin115.png",
    ΔᐃⵠⵠⲆⵠⲆ: "img/day-skin116.png",
    ΔⵠⵠᐃΔΔⲆ: "img/night-skin116.png",
    ⵠΔⲆΔΔⵠⵠ: "img/day-skin117.png",
    ⲆⵠⲆΔⵠᐃⵠ: "img/night-skin117.png",
    ΔⲆⵠⲆᐃᐃΔ: "img/day-skin118.png",
    ᐃⲆⵠΔΔⵠⲆ: "img/night-skin118.png",
    ⲆᐃⵠᐃⲆⲆⵠ: "img/day-skin119.png",
    ᐃᐃᐃⵠⲆⵠⲆ: "img/night-skin119.png",
    ΔⵠΔΔⵠᐃΔ: "img/day-skin120.png",
    ⵠⲆᐃⵠΔⲆΔ: "img/night-skin120.png",
    ᐃΔΔᐃⵠⵠᐃ: "img/day-skin121.png",
    ⵠⵠⲆΔⵠᐃΔ: "img/night-skin121.png",
    ⵠΔⲆⲆᐃΔⲆ: "img/day-skin122.png",
    ⵠᐃΔⲆΔᐃᐃ: "img/night-skin122.png",
    ⲆΔΔⲆᐃⲆΔ: "img/day-skin123.png",
    ⵠⲆⲆⲆᐃⲆΔ: "img/night-skin123.png",
    ⲆᐃᐃⲆᐃⵠⵠ: "img/day-skin124.png",
    ⲆⵠᐃⵠⵠᐃⲆ: "img/night-skin124.png",
    ⲆⵠⲆⲆᐃΔΔ: "img/day-skin125.png",
    ⲆᐃᐃΔΔⲆᐃ: "img/night-skin125.png",
    ⵠⵠⵠᐃᐃⲆᐃ: "img/day-skin126.png",
    ⲆᐃⵠΔᐃΔᐃ: "img/night-skin126.png",
    ⲆⲆⵠΔⲆⲆᐃ: "img/day-skin127.png",
    ΔΔΔⲆⲆΔᐃ: "img/night-skin127.png",
    ΔᐃΔⲆᐃᐃⵠ: "img/day-skin128.png",
    ⲆⵠⵠΔᐃⲆΔ: "img/night-skin128.png",
    ⵠⲆⲆΔⵠⵠⵠ: "img/day-skin129.png",
    ΔⵠᐃⲆᐃΔΔ: "img/night-skin129.png",
    ΔⵠΔⵠᐃΔᐃ: "img/day-skin130-1.png",
    ⲆⵠᐃΔⵠΔⵠ: "img/night-skin130-1.png",
    ΔΔΔⵠⲆΔᐃ: "img/day-skin131.png",
    ⵠᐃⲆⵠᐃᐃⲆ: "img/night-skin131.png",
    ⵠᐃⵠⲆⲆΔᐃ: "img/day-skin132.png",
    ᐃⵠᐃΔⲆⲆⵠ: "img/night-skin132.png",
    ΔⲆⲆᐃΔᐃⲆ: "img/day-skin133.png",
    ⲆᐃⲆⲆΔΔⵠ: "img/night-skin133.png",
    ᐃⲆⵠⲆⵠΔΔ: "img/day-skin134.png",
    ᐃⲆᐃⲆⵠᐃⵠ: "img/night-skin134.png",
    ΔΔᐃⲆⵠⵠΔ: "img/day-skin135.png",
    ⵠᐃᐃᐃⵠⲆⲆ: "img/night-skin135.png",
    ⲆΔⵠᐃⲆᐃᐃ: "img/day-skin136.png",
    ΔᐃᐃΔΔΔΔ: "img/night-skin136.png",
    ᐃΔⲆⵠⲆⲆⵠ: "img/day-skin137.png",
    ⵠΔⵠⲆΔⲆΔ: "img/night-skin137.png",
    ΔΔⵠΔΔⵠΔ: "img/day-skin138.png",
    ΔⵠΔΔⲆΔⲆ: "img/night-skin138.png",
    ⵠᐃⲆⲆⵠᐃΔ: "img/day-skin139.png",
    ⲆΔΔᐃⲆⵠⲆ: "img/night-skin139.png",
    ᐃⲆΔⲆⵠᐃⲆ: "img/day-skin140.png",
    ΔΔΔΔᐃⲆΔ: "img/night-skin140.png",
    ΔⲆⵠⲆⲆΔⵠ: "img/day-skin141.png",
    ΔⵠⵠⵠⲆᐃⵠ: "img/night-skin141.png",
    ⵠᐃᐃⵠΔⵠᐃ: "img/day-skin142.png",
    ⲆⵠᐃⲆᐃⵠⲆ: "img/night-skin142.png",
    ΔΔⲆⵠⲆⲆⵠ: "img/day-skin143.png",
    ΔΔⵠⵠⵠᐃⵠ: "img/night-skin143.png",
    ᐃⲆᐃⵠΔᐃΔ: "img/day-skin144.png",
    ΔΔᐃᐃᐃΔΔ: "img/night-skin144.png",
    ⲆᐃⵠΔΔⵠᐃ: "img/day-skin145.png",
    ⲆΔⵠⵠⵠΔⵠ: "img/night-skin145.png",
    ⲆⵠΔΔⵠᐃⵠ: "img/day-skin146.png",
    ⵠⵠⲆΔⲆΔⲆ: "img/night-skin146.png",
    ΔⵠⵠᐃⲆΔⲆ: "img/day-skin147.png",
    ᐃⵠⲆⲆⵠΔᐃ: "img/night-skin147.png",
    ᐃᐃΔΔⲆΔⵠ: "img/day-skin148.png",
    ΔⵠᐃⵠΔⲆΔ: "img/night-skin148.png",
    ᐃΔᐃⲆᐃᐃΔ: "img/day-skin149.png",
    ᐃᐃⵠⵠΔΔⲆ: "img/night-skin149.png",
    ⵠⵠΔᐃᐃᐃΔ: "img/day-skin150.png",
    ᐃΔᐃⵠⲆⵠᐃ: "img/night-skin150.png",
    ᐃⲆᐃΔⲆⵠΔ: "img/day-skin151.png",
    ⵠΔⵠΔΔⵠⲆ: "img/night-skin151.png",
    ⵠⲆΔⵠᐃⲆⵠ: "img/day-skin152.png",
    ΔᐃⵠΔᐃⵠⵠ: "img/night-skin152.png",
    ᐃⵠⵠΔⵠᐃΔ: "img/day-skin153.png",
    ⲆΔⵠⲆΔⲆⲆ: "img/night-skin153.png",
    ⵠⲆᐃⲆΔΔⵠ: "img/day-skin154.png",
    ⵠΔΔΔΔⵠⵠ: "img/night-skin154.png",
    ᐃΔᐃⵠΔᐃⵠ: "img/day-skin155.png",
    ΔⲆᐃᐃⲆⵠⵠ: "img/night-skin155.png",
    ⲆⲆⲆⲆⵠⵠᐃ: "img/day-skin156.png",
    ⵠᐃᐃᐃⵠⵠᐃ: "img/night-skin156.png",
    ΔΔᐃⲆⵠᐃⲆ: "img/day-skin157.png",
    ᐃⵠⲆⲆⵠⵠᐃ: "img/night-skin157.png",
    Ⲇⵠᐃᐃᐃⵠᐃ: "img/day-skin158.png",
    ΔΔᐃⵠⲆⵠⵠ: "img/night-skin158.png",
    ⵠⲆⵠΔⵠⲆᐃ: "img/day-skin159.png",
    ᐃΔΔⵠⵠⲆΔ: "img/night-skin159.png",
    ᐃⲆΔΔᐃⲆΔ: "img/day-skin160.png",
    ᐃᐃΔⵠⲆⵠᐃ: "img/night-skin160.png",
    ᐃⵠΔᐃⵠⵠⵠ: "img/day-skin161.png",
    ⲆᐃΔᐃⵠⲆⲆ: "img/night-skin161.png",
    ᐃⲆⲆΔⲆΔᐃ: "img/day-skin162.png",
    ⲆⵠⲆⲆⵠᐃⵠ: "img/night-skin162.png",
    ΔᐃᐃΔΔⵠᐃ: "img/day-skin163.png",
    ᐃΔΔⵠⵠΔⵠ: "img/night-skin163.png",
    ᐃᐃΔΔᐃⲆⲆ: "img/day-skin164.png",
    ΔⲆⲆᐃⲆΔΔ: "img/night-skin164.png",
    ᐃⲆⵠⲆⲆⵠΔ: "img/day-skin165.png",
    ⲆΔⲆΔᐃⲆΔ: "img/night-skin165.png",
    ᐃⲆᐃᐃⵠⲆᐃ: "img/day-skin166.png",
    ΔᐃΔⵠⲆⵠⲆ: "img/night-skin166.png",
    ᐃΔⵠⵠⲆⵠᐃ: "img/day-skin167.png",
    ᐃΔⵠⵠⵠΔⲆ: "img/night-skin167.png",
    ᐃᐃⵠΔᐃⵠⲆ: "img/day-skin168.png",
    ⲆⵠᐃⲆⵠΔᐃ: "img/night-skin168.png",
    ⲆᐃΔΔΔᐃⲆ: "img/day-skin169.png",
    ᐃⵠⵠⲆᐃΔⵠ: "img/night-skin169.png",
    ⲆⲆⵠⵠΔΔᐃ: "img/day-skin170.png",
    ⲆⵠΔᐃΔⵠᐃ: "img/night-skin170.png",
    ᐃⵠⲆⵠⲆᐃᐃ: "img/day-skin171.png",
    ΔΔⵠᐃⲆΔΔ: "img/night-skin171.png",
    ⵠⲆΔᐃΔⲆΔ: "img/day-skin172.png",
    ⲆΔᐃⲆⵠⵠⲆ: "img/night-skin172.png",
    ⲆⲆΔΔᐃᐃⵠ: "img/day-skin173.png",
    ⲆΔΔΔⵠⵠⲆ: "img/night-skin173.png",
    ⵠᐃⵠⲆⲆⵠⲆ: "img/day-skin174.png",
    ΔⵠᐃΔⲆΔᐃ: "img/night-skin174.png",
    ⵠⲆⲆᐃᐃⵠᐃ: "img/day-skin175.png",
    ΔⵠΔΔΔⲆΔ: "img/night-skin175.png",
    ΔⲆΔΔⲆᐃⵠ: "img/day-skin176.png",
    ΔᐃᐃⲆⵠᐃⵠ: "img/night-skin176.png",
    ⲆⵠΔⲆⵠΔⵠ: "img/day-skin177.png",
    ⵠⲆⲆΔⵠⵠⲆ: "img/night-skin177.png",
    ⵠᐃᐃᐃⵠᐃⵠ: "img/day-skin178.png",
    ⲆᐃΔᐃⵠΔⵠ: "img/night-skin178.png",
    ΔᐃᐃⲆᐃⵠΔ: "img/day-skin179.png",
    ᐃⲆΔⵠΔⵠᐃ: "img/night-skin179.png",
    ⵠⲆᐃⲆⲆᐃⲆ: "img/day-skin180.png",
    ⲆᐃⲆⵠⵠᐃⲆ: "img/night-skin180.png",
    ΔⲆᐃᐃⲆⲆⲆ: "img/day-skin181.png",
    ⲆΔⲆᐃΔᐃΔ: "img/night-skin181.png",
    ᐃⲆᐃⵠᐃⵠⲆ: "img/day-skin182.png",
    ⵠⲆⵠΔΔⵠΔ: "img/night-skin182.png",
    ⵠΔᐃΔᐃᐃⲆ: "img/day-skin183.png",
    ᐃᐃⲆⵠⵠᐃᐃ: "img/night-skin183.png",
    ᐃⲆΔΔⵠⵠΔ: "img/day-skin184.png",
    ⲆⵠΔⵠⵠⲆᐃ: "img/night-skin184.png",
    ⲆⵠⲆⵠⵠⵠᐃ: "img/day-skin185.png",
    ᐃΔⵠⵠⵠΔⵠ: "img/night-skin185.png",
    ⵠᐃⲆⲆᐃΔΔ: "img/day-skin186.png",
    ᐃⲆΔⲆΔΔᐃ: "img/night-skin186.png",
    ΔⲆⵠⲆᐃⲆᐃ: "img/day-skin187.png",
    ΔΔⲆᐃⵠᐃΔ: "img/night-skin187.png",
    ΔΔᐃΔΔΔᐃ: "img/day-skin188.png",
    ⵠᐃᐃΔΔⵠⲆ: "img/night-skin188.png",
    ⵠⲆᐃⵠⲆΔⲆ: "img/day-skin189.png",
    ⲆⲆⵠⲆⲆⵠΔ: "img/night-skin189.png",
    ΔΔΔᐃΔᐃⵠ: "img/day-skin190.png",
    ⲆΔᐃⵠⵠⲆⲆ: "img/night-skin190.png",
    ᐃⵠⲆⵠⲆᐃⲆ: "img/day-skin191.png",
    ⲆⵠⲆᐃΔΔᐃ: "img/night-skin191.png",
    ΔᐃΔⲆᐃΔⵠ: "img/day-skin192.png",
    ⵠⵠΔᐃⲆⲆᐃ: "img/night-skin192.png",
    ⲆᐃΔⲆⲆᐃΔ: "img/day-skin193.png",
    ᐃΔⲆⵠⵠⵠⲆ: "img/night-skin193.png",
    ⲆⲆᐃⵠΔᐃⲆ: "img/day-skin194.png",
    ⵠΔⵠᐃⲆⵠⵠ: "img/night-skin194.png",
    ⲆⲆⵠⵠᐃⵠⲆ: "img/day-skin195.png",
    ΔᐃᐃⲆⵠⲆⵠ: "img/night-skin195.png",
    ᐃᐃⵠΔᐃᐃᐃ: "img/day-skin196.png",
    ⲆᐃΔΔΔⲆⵠ: "img/night-skin196.png",
    ᐃᐃᐃᐃΔΔΔ: "img/day-skin197.png",
    ΔᐃⵠΔⲆⵠⲆ: "img/night-skin197.png",
    ᐃΔⵠⵠⲆⲆΔ: "img/day-skin198.png",
    ⲆΔⵠⲆⲆⲆⵠ: "img/night-skin198.png",
    ⲆᐃᐃΔᐃⲆΔ: "img/day-skin199.png",
    ⲆΔⵠⵠΔⲆᐃ: "img/night-skin199.png",
    ΔⵠⵠᐃᐃΔΔ: "img/day-skin200.png",
    ΔⲆᐃᐃⲆΔⲆ: "img/night-skin200.png",
    ᐃⲆᐃⵠΔᐃᐃ: "img/day-skin201.png",
    ΔⵠⵠⲆⲆᐃⵠ: "img/night-skin201.png",
    ΔᐃᐃⵠⲆⲆᐃ: "img/day-skin202.png",
    ᐃⵠΔΔΔⲆΔ: "img/night-skin202.png",
    ⲆⵠΔΔⲆΔⲆ: "img/day-skin203.png",
    ΔⵠⵠᐃⵠᐃⲆ: "img/night-skin203.png",
    ΔᐃⲆᐃΔⲆᐃ: "img/day-skin204.png",
    ΔⵠᐃΔΔⲆΔ: "img/night-skin204.png",
    ⲆⲆⲆⲆⵠΔᐃ: "img/day-skin205.png",
    ⵠⵠⲆΔᐃⲆᐃ: "img/night-skin205.png",
    ⲆⲆⲆᐃⵠᐃⵠ: "img/day-skin206.png",
    ΔⵠⲆⵠⵠⲆⵠ: "img/night-skin206.png",
    ᐃⲆⲆⲆⲆΔⲆ: "img/day-skin207.png",
    ⵠᐃⵠⲆⲆⵠΔ: "img/night-skin207.png",
    ⲆⵠΔⲆΔⲆᐃ: "img/day-skin208.png",
    ⲆⵠⲆΔⲆⲆᐃ: "img/night-skin208.png",
    ⲆΔⲆΔᐃΔⵠ: "img/day-skin209.png",
    ΔᐃᐃᐃᐃⵠΔ: "img/night-skin209.png",
    ΔⵠᐃⵠΔⵠⲆ: "img/day-skin210.png",
    ΔⲆΔΔΔᐃⵠ: "img/night-skin210.png",
    ΔΔⲆᐃᐃᐃᐃ: "img/day-skin211.png",
    ⵠⲆᐃᐃᐃᐃᐃ: "img/night-skin211.png",
    ⲆΔⵠⵠⵠᐃΔ: "img/day-skin212.png",
    ᐃⵠⲆΔΔⲆΔ: "img/night-skin212.png",
    ᐃᐃⲆⲆΔⲆΔ: "img/day-skin213.png",
    ⵠⲆᐃᐃⵠⲆᐃ: "img/night-skin213.png",
    ⵠΔⵠⵠΔᐃΔ: "img/day-skin214.png",
    ΔΔⵠᐃΔᐃⵠ: "img/night-skin214.png",
    ⲆᐃΔⵠⵠΔⲆ: "img/day-hand-skin0.png",
    ΔᐃᐃᐃⲆⵠⵠ: "img/night-hand-skin0.png",
    ΔΔⵠⲆⲆᐃΔ: "img/day-hand-skin1.png",
    ᐃⵠᐃⲆᐃΔⲆ: "img/night-hand-skin1.png",
    ΔᐃᐃΔᐃⵠᐃ: "img/day-hand-skin2.png",
    ⵠⲆⵠⵠᐃᐃΔ: "img/night-hand-skin2.png",
    ΔⵠᐃⵠⲆⲆⵠ: "img/day-hand-skin3.png",
    ΔⵠⵠΔᐃᐃⵠ: "img/night-hand-skin3.png",
    ΔΔΔⵠᐃⲆⲆ: "img/day-hand-skin4.png",
    ⲆⲆᐃΔᐃΔⲆ: "img/night-hand-skin4.png",
    ΔᐃΔᐃⲆⲆⵠ: "img/day-hand-skin5.png",
    ⲆⲆⲆⲆⵠⲆⵠ: "img/night-hand-skin5.png",
    ΔⵠⵠΔⲆⵠⵠ: "img/day-hand-skin6.png",
    ᐃΔⲆⵠⵠΔⲆⲆⵠ: "img/night-hand-skin6.png",
    ΔΔⲆⲆⲆΔⲆ: "img/day-hand-skin6.png",
    ΔⲆⵠᐃΔᐃⲆ: "img/night-hand-skin6.png",
    ⵠᐃᐃΔᐃΔⵠ: "img/day-hand-skin8.png",
    ᐃΔᐃⲆΔⲆⲆ: "img/night-hand-skin8.png",
    ⲆΔᐃΔⲆᐃⲆ: "img/day-hand-skin9.png",
    ΔΔⵠᐃⲆᐃⵠ: "img/night-hand-skin9.png",
    ⲆⲆΔⲆⵠΔⲆ: "img/day-hand-skin10.png",
    ⵠⲆᐃⲆΔⲆΔ: "img/night-hand-skin10.png",
    ⲆᐃΔΔΔΔᐃ: "img/day-hand-skin11.png",
    ΔΔⵠⲆⲆⵠᐃ: "img/night-hand-skin11.png",
    ⵠᐃⲆⵠⲆΔᐃ: "img/day-hand-skin12.png",
    ⵠⵠⲆΔⵠΔⲆ: "img/night-hand-skin12.png",
    ᐃⵠΔⵠⵠΔΔ: "img/day-hand-skin13.png",
    ᐃⵠⲆᐃⵠΔᐃ: "img/night-hand-skin13.png",
    ᐃᐃⵠᐃⲆᐃᐃ: "img/day-hand-skin14.png",
    ⵠⲆΔⵠᐃⵠᐃ: "img/night-hand-skin14.png",
    ΔⲆΔᐃᐃⲆᐃ: "img/day-hand-skin15.png",
    ΔⵠⲆⵠᐃⲆⲆ: "img/night-hand-skin15.png",
    ΔΔᐃⵠⵠⲆᐃ: "img/day-hand-skin16.png",
    ⲆⵠⲆⲆΔᐃᐃ: "img/night-hand-skin16.png",
    ⵠΔᐃΔⲆΔΔ: "img/day-hand-skin17.png",
    ⵠⲆᐃⲆᐃⵠⲆ: "img/night-hand-skin17.png",
    ⲆᐃᐃⲆⲆᐃⵠ: "img/day-hand-skin18.png",
    ⵠᐃᐃΔⲆᐃᐃ: "img/night-hand-skin18.png",
    ⵠᐃⵠⲆⵠΔⲆ: "img/day-hand-skin19.png",
    ⲆΔⵠⵠⵠΔᐃ: "img/night-hand-skin19.png",
    ᐃᐃⲆⵠΔⲆᐃ: "img/day-hand-skin20.png",
    ᐃᐃᐃⵠⲆᐃΔ: "img/night-hand-skin20.png",
    ΔᐃⲆᐃⵠⲆⵠ: "img/day-hand-skin21.png",
    ⵠⲆΔΔⲆᐃⵠ: "img/night-hand-skin21.png",
    ΔΔᐃⵠⲆⵠΔ: "img/day-hand-skin22.png",
    ΔⲆⵠⵠΔⲆᐃ: "img/night-hand-skin22.png",
    ᐃⲆⵠᐃⲆᐃΔ: "img/day-hand-skin23.png",
    ⲆⵠⵠΔᐃᐃΔ: "img/night-hand-skin23.png",
    ⵠΔΔⲆΔⲆⵠ: "img/day-hand-skin24.png",
    ⵠΔⵠΔⵠⵠΔ: "img/night-hand-skin24.png",
    ⲆΔΔΔⵠⲆⵠ: "img/day-hand-skin25.png",
    ⲆΔⲆᐃⵠᐃΔ: "img/night-hand-skin25.png",
    ᐃᐃⲆᐃⲆⲆⲆ: "img/day-hand-skin26.png",
    ⵠᐃⵠⲆΔⲆⵠ: "img/night-hand-skin26.png",
    ⲆⲆⲆᐃⲆⲆⵠ: "img/day-hand-skin27.png",
    ⵠⲆⵠⲆᐃᐃᐃ: "img/night-hand-skin27.png",
    ᐃⵠΔΔⵠᐃᐃ: "img/day-hand-skin28.png",
    ΔᐃᐃᐃᐃⲆᐃ: "img/night-hand-skin28.png",
    ᐃΔᐃⵠΔⲆᐃ: "img/day-hand-skin29.png",
    ⲆⲆΔᐃᐃⵠΔ: "img/night-hand-skin29.png",
    ΔⵠΔᐃΔⵠᐃ: "img/day-hand-skin30.png",
    ᐃᐃΔᐃΔⲆΔ: "img/night-hand-skin30.png",
    ᐃᐃᐃⲆᐃᐃⵠ: "img/day-hand-skin31.png",
    ⲆΔΔⲆⲆⲆΔ: "img/night-hand-skin31.png",
    ⵠΔᐃᐃⲆⲆⲆ: "img/day-hand-skin32.png",
    ᐃᐃⲆⵠΔΔΔ: "img/night-hand-skin32.png",
    ᐃΔⲆⲆⵠⵠⵠ: "img/day-hand-skin33.png",
    ⵠⲆⵠΔⵠΔⲆ: "img/night-hand-skin33.png",
    ᐃᐃⵠΔⵠΔΔ: "img/day-hand-skin34.png",
    ΔΔᐃᐃⲆⲆΔ: "img/night-hand-skin34.png",
    ⲆⲆΔⲆⵠⵠΔ: "img/day-hand-skin35.png",
    ⲆᐃΔⲆⲆᐃᐃ: "img/night-hand-skin35.png",
    ᐃᐃⵠⵠΔⵠᐃ: "img/day-hand-skin36.png",
    ΔⲆⲆⲆᐃᐃΔ: "img/night-hand-skin36.png",
    ΔΔᐃⵠᐃᐃᐃ: "img/day-hand-skin37.png",
    ⲆⵠΔΔⵠⲆⵠ: "img/night-hand-skin37.png",
    ΔᐃⲆⲆΔⵠΔ: "img/day-hand-skin38.png",
    ⲆᐃΔᐃΔᐃᐃ: "img/night-hand-skin38.png",
    ᐃⵠΔⲆⵠΔΔ: "img/day-hand-skin39.png",
    ⵠᐃⵠΔΔⲆᐃ: "img/night-hand-skin39.png",
    ΔΔΔᐃⵠᐃᐃ: "img/day-hand-skin40.png",
    ⵠⲆΔⵠⵠΔᐃ: "img/night-hand-skin40.png",
    ᐃⵠⵠᐃⲆᐃᐃ: "img/day-hand-skin41.png",
    ⲆⵠᐃⵠⲆΔᐃ: "img/night-hand-skin41.png",
    ᐃᐃᐃΔᐃΔⵠ: "img/day-hand-skin42.png",
    ⵠⲆⲆⵠᐃⵠⵠ: "img/night-hand-skin42.png",
    ᐃᐃΔⲆᐃΔΔ: "img/day-hand-skin43.png",
    ΔΔⵠᐃΔΔᐃ: "img/night-hand-skin43.png",
    ᐃΔᐃᐃⵠⵠΔ: "img/day-hand-skin16.png",
    ⵠᐃᐃᐃᐃᐃⲆ: "img/night-hand-skin16.png",
    ⲆΔᐃⵠᐃⲆΔ: "img/day-hand-skin45.png",
    ⲆΔΔⵠⲆΔΔ: "img/night-hand-skin45.png",
    ⵠᐃΔᐃΔⲆΔ: "img/day-hand-skin46.png",
    ΔⵠᐃᐃⲆᐃᐃ: "img/night-hand-skin46.png",
    ⲆⲆᐃⵠⲆⵠΔ: "img/day-hand-skin47.png",
    ⵠⲆᐃΔⵠΔᐃ: "img/night-hand-skin47.png",
    Δᐃᐃᐃᐃᐃᐃ: "img/day-hand-skin48.png",
    ᐃΔⵠⲆⵠΔᐃ: "img/night-hand-skin48.png",
    ᐃⲆⵠΔΔᐃΔ: "img/day-hand-skin49.png",
    ᐃⵠᐃΔΔΔΔ: "img/night-hand-skin49.png",
    ᐃᐃⵠⲆᐃⲆⵠ: "img/day-hand-skin49.png",
    ᐃⲆⵠΔᐃᐃⵠ: "img/night-hand-skin49.png",
    ᐃⵠᐃⵠᐃⵠΔ: "img/day-hand-skin51.png",
    ⵠⵠΔⲆⵠⵠⲆ: "img/night-hand-skin51.png",
    ⲆⲆᐃΔΔᐃⵠ: "img/day-hand-skin52.png",
    ΔⵠΔᐃⲆⵠΔ: "img/night-hand-skin52.png",
    ⲆⲆᐃᐃⵠⲆΔ: "img/day-hand-skin53.png",
    ⲆᐃΔΔΔⵠⵠ: "img/night-hand-skin53.png",
    ᐃⲆΔⲆⵠⵠᐃ: "img/day-hand-skin53.png",
    ⵠᐃᐃΔⵠᐃⲆ: "img/night-hand-skin53.png",
    ⵠΔΔⵠᐃⲆΔ: "img/day-hand-skin55.png",
    ⲆⲆΔⵠⲆΔⲆ: "img/night-hand-skin55.png",
    ᐃᐃᐃᐃΔΔᐃ: "img/day-hand-skin56.png",
    ⲆΔⲆᐃⵠⵠⲆ: "img/night-hand-skin56.png",
    ⲆΔⲆΔⲆᐃⵠ: "img/day-hand-skin57.png",
    ΔⲆΔΔⲆΔᐃ: "img/night-hand-skin57.png",
    ⲆⲆⲆⲆⲆⵠⲆ: "img/day-hand-skin58.png",
    ΔΔΔΔⲆΔᐃ: "img/night-hand-skin58.png",
    ΔᐃΔΔⵠΔⲆ: "img/day-hand-skin59.png",
    ⵠᐃⲆᐃⲆΔⵠ: "img/night-hand-skin59.png",
    ⵠⵠⲆΔⲆΔᐃ: "img/day-hand-skin61.png",
    ⲆⲆⲆⲆΔⵠᐃ: "img/night-hand-skin61.png",
    ⲆⲆⲆⵠⵠᐃΔ: "img/day-hand-skin61.png",
    ᐃⵠⲆΔⵠΔⲆ: "img/night-hand-skin61.png",
    ⵠⲆᐃΔΔⵠΔ: "img/day-hand-skin62.png",
    ΔΔⲆⲆⵠⵠΔ: "img/night-hand-skin62.png",
    ᐃⲆⵠⵠΔⲆΔ: "img/day-hand-skin63.png",
    ΔⵠⵠᐃⵠⲆⲆ: "img/night-hand-skin63.png",
    ⲆΔⵠⵠᐃⵠⵠ: "img/day-hand-skin64.png",
    ΔᐃΔⵠᐃΔⲆ: "img/night-hand-skin64.png",
    ⵠᐃΔⵠⵠΔΔ: "img/day-hand-skin65.png",
    ΔⵠΔⵠΔⲆΔ: "img/night-hand-skin65.png",
    ⲆⲆΔΔⲆΔᐃ: "img/day-hand-skin66.png",
    ⵠⵠΔⲆⲆⵠⲆ: "img/night-hand-skin66.png",
    ᐃⲆᐃⵠᐃⵠⵠ: "img/day-hand-skin67.png",
    ΔⵠⵠΔᐃⲆΔ: "img/night-hand-skin67.png",
    ⲆⲆⲆᐃΔⲆⵠ: "img/day-hand-skin68.png",
    ΔᐃᐃⲆᐃΔΔ: "img/night-hand-skin68.png",
    ⵠⵠⵠⲆⵠΔⵠ: "img/day-hand-skin69.png",
    Ⲇᐃᐃᐃⵠⵠⵠ: "img/night-hand-skin69.png",
    ⲆΔⲆⲆⲆᐃᐃ: "img/day-hand-skin70.png",
    ΔⵠᐃⵠⲆΔⵠ: "img/night-hand-skin70.png",
    ⲆⲆⲆΔⲆΔⵠ: "img/day-hand-skin71.png",
    ⵠⲆⵠᐃⵠⲆΔ: "img/night-hand-skin71.png",
    ΔⵠᐃⲆᐃⵠΔ: "img/day-hand-skin72.png",
    ⵠⲆᐃᐃⲆⵠⲆ: "img/night-hand-skin72.png",
    ᐃⲆΔⲆΔⵠⵠ: "img/day-hand-skin73.png",
    ΔΔⲆΔᐃᐃᐃ: "img/night-hand-skin73.png",
    ΔΔⲆᐃΔⵠΔ: "img/day-hand-skin74.png",
    ⵠᐃΔΔΔᐃΔ: "img/night-hand-skin74.png",
    ⲆⲆⲆᐃᐃᐃⲆ: "img/day-hand-skin75.png",
    ΔΔΔⵠⵠⲆᐃ: "img/night-hand-skin75.png",
    ⵠᐃΔΔᐃᐃⲆ: "img/day-hand-skin76.png",
    ᐃᐃⵠᐃᐃᐃᐃ: "img/night-hand-skin76.png",
    ᐃΔⲆⵠᐃᐃⵠ: "img/day-hand-skin77.png",
    ᐃΔⲆᐃΔΔⲆ: "img/night-hand-skin77.png",
    ⵠⵠᐃᐃΔⵠΔ: "img/day-hand-skin78.png",
    ᐃΔⲆᐃⵠΔᐃ: "img/night-hand-skin78.png",
    ΔⵠᐃᐃΔᐃⲆ: "img/day-hand-skin79.png",
    ⵠⲆⵠⲆⵠΔⵠ: "img/night-hand-skin79.png",
    ⵠᐃⲆⵠΔⲆΔ: "img/day-hand-skin80.png",
    ΔᐃᐃⲆⲆᐃⵠ: "img/night-hand-skin80.png",
    ⲆΔΔᐃΔᐃᐃ: "img/day-hand-skin81.png",
    ᐃᐃΔⵠᐃΔⲆ: "img/night-hand-skin81.png",
    ⵠᐃᐃⲆⲆⵠⵠ: "img/day-hand-skin82.png",
    ᐃΔⲆΔᐃᐃΔ: "img/night-hand-skin82.png",
    ᐃⵠⲆΔⵠⵠΔ: "img/day-hand-skin83.png",
    ᐃⵠᐃⵠⲆⲆⲆ: "img/night-hand-skin83.png",
    ⲆⲆⵠΔⵠⲆᐃ: "img/day-hand-skin84.png",
    ΔⵠⵠⵠΔΔΔ: "img/night-hand-skin84.png",
    ΔΔⵠⵠΔⲆⲆ: "img/day-hand-skin85.png",
    ᐃⲆⲆᐃᐃᐃᐃ: "img/night-hand-skin85.png",
    ᐃΔᐃᐃΔⵠⵠ: "img/day-hand-skin86.png",
    ᐃᐃⵠΔΔΔⵠ: "img/night-hand-skin86.png",
    ⲆⲆᐃⵠΔΔⲆ: "img/day-hand-skin87.png",
    ⲆΔᐃᐃᐃⵠΔ: "img/night-hand-skin87.png",
    ΔⵠⵠⲆⵠᐃⲆ: "img/day-hand-skin88.png",
    ⵠᐃᐃᐃᐃΔⵠ: "img/night-hand-skin88.png",
    ⵠΔᐃⲆⵠⲆⵠ: "img/day-hand-skin89.png",
    ⵠⲆᐃᐃΔⲆᐃ: "img/night-hand-skin89.png",
    ᐃⲆΔᐃΔⵠᐃ: "img/day-hand-skin90.png",
    ᐃⲆⵠⵠⲆΔⲆ: "img/night-hand-skin90.png",
    ΔⲆⵠⲆᐃΔⵠ: "img/day-hand-skin91.png",
    ΔΔⲆⲆΔⵠΔ: "img/night-hand-skin91.png",
    ⵠΔⲆᐃⲆⲆⲆ: "img/day-hand-skin92.png",
    ⲆⲆᐃⵠⵠⲆΔ: "img/night-hand-skin92.png",
    ⵠⵠᐃΔⲆⵠⲆ: "img/day-hand-skin93.png",
    ⲆⲆΔⲆᐃⵠⲆ: "img/night-hand-skin93.png",
    ⲆⲆΔᐃΔᐃⵠ: "img/day-hand-skin94.png",
    ⵠᐃⵠᐃᐃⲆⲆ: "img/night-hand-skin94.png",
    ⲆⵠⵠΔΔⲆⲆ: "img/day-hand-skin95.png",
    ΔΔΔⲆᐃΔᐃ: "img/night-hand-skin95.png",
    ⵠᐃⲆⲆⵠⵠⵠ: "img/day-hand-skin96.png",
    ⵠΔΔⲆΔᐃⵠ: "img/night-hand-skin96.png",
    ⲆⵠΔⲆⲆⵠΔ: "img/day-hand-skin97.png",
    ⵠᐃⲆΔⵠᐃⲆ: "img/night-hand-skin97.png",
    ᐃΔΔΔᐃΔⲆ: "img/day-hand-skin98.png",
    ⲆⲆᐃⲆⲆⲆⲆ: "img/night-hand-skin98.png",
    ΔᐃΔᐃΔⵠΔ: "img/day-hand-skin99.png",
    ⵠᐃⵠⲆⲆᐃΔ: "img/night-hand-skin99.png",
    ⲆΔⲆΔᐃᐃⵠ: "img/day-hand-skin100.png",
    ⵠΔᐃⲆΔⲆΔ: "img/night-hand-skin100.png",
    ⵠΔᐃⲆᐃⲆᐃ: "img/day-hand-skin101.png",
    ⲆⵠⲆΔⵠΔΔ: "img/night-hand-skin101.png",
    ᐃᐃⵠⵠᐃⵠΔ: "img/day-hand-skin102.png",
    ⵠⲆΔᐃⵠⲆⵠ: "img/night-hand-skin102.png",
    ᐃⵠΔⲆⵠⲆΔ: "img/day-hand-skin103.png",
    ΔᐃΔⵠᐃΔᐃ: "img/night-hand-skin103.png",
    ΔⵠⲆⲆⵠΔΔ: "img/day-hand-skin104.png",
    ΔᐃΔⲆᐃⲆᐃ: "img/night-hand-skin104.png",
    ⵠΔᐃΔΔⲆⵠ: "img/day-hand-skin105.png",
    ⲆⲆᐃⵠΔᐃᐃ: "img/night-hand-skin105.png",
    ΔᐃΔΔΔᐃΔ: "img/day-hand-skin106.png",
    ΔⲆⲆΔΔⵠⵠ: "img/night-hand-skin106.png",
    ᐃⵠΔᐃΔⵠⵠ: "img/day-hand-skin107.png",
    ΔⲆⵠⲆΔΔᐃ: "img/night-hand-skin107.png",
    ⵠᐃᐃᐃᐃΔΔ: "img/day-hand-skin108.png",
    ᐃⵠⵠⵠᐃᐃⵠ: "img/night-hand-skin108.png",
    ΔⵠΔⵠⵠⵠΔ: "img/day-hand-skin109.png",
    ᐃΔⲆᐃΔⵠⲆ: "img/night-hand-skin109.png",
    ᐃⵠⵠΔᐃΔᐃ: "img/day-hand-skin110.png",
    ΔⵠⲆⲆⲆⲆⲆ: "img/night-hand-skin110.png",
    ᐃᐃⵠΔⵠⵠᐃ: "img/day-hand-skin111.png",
    ᐃᐃⵠⵠⵠᐃⲆ: "img/night-hand-skin111.png",
    ⲆⲆⵠⵠⵠⵠΔ: "img/day-hand-skin112.png",
    ⲆᐃⵠⵠⲆΔⵠ: "img/night-hand-skin112.png",
    ΔⲆΔΔᐃΔⲆᐃΔ: "img/day-hand-skin113.png",
    ᐃⵠⲆΔΔᐃᐃⲆⲆ: "img/night-hand-skin113.png",
    ᐃⲆⵠⲆⲆᐃᐃ: "img/day-hand-skin114.png",
    ΔⲆΔⲆⵠᐃᐃ: "img/night-hand-skin114.png",
    ⲆⲆⲆΔᐃⲆᐃ: "img/day-hand-skin115.png",
    ⵠΔΔⲆᐃⲆⲆ: "img/night-hand-skin115.png",
    ᐃᐃⵠᐃⵠΔΔ: "img/day-hand-skin116.png",
    ΔⵠΔⲆᐃΔⵠ: "img/night-hand-skin116.png",
    ᐃΔⲆΔᐃΔᐃ: "img/day-hand-skin117.png",
    ⲆⲆΔⲆΔΔⵠ: "img/night-hand-skin117.png",
    ⵠΔⵠΔᐃⲆⵠ: "img/day-hand-skin118.png",
    ᐃⲆⲆⵠⲆᐃΔ: "img/night-hand-skin118.png",
    ᐃᐃΔᐃⵠΔⵠ: "img/day-hand-skin119.png",
    ᐃᐃⵠⲆΔⵠᐃ: "img/night-hand-skin119.png",
    ⵠⵠΔΔⲆⵠⲆ: "img/day-hand-skin120.png",
    ⵠⵠΔⵠⲆⲆⵠ: "img/night-hand-skin120.png",
    ⲆⲆⲆΔΔΔⵠ: "img/day-hand-skin122.png",
    ⲆⵠΔᐃΔᐃⲆ: "img/night-hand-skin122.png",
    ᐃⲆΔΔΔᐃⲆ: "img/day-hand-skin122.png",
    ᐃᐃᐃⵠⲆᐃⲆ: "img/night-hand-skin122.png",
    ⵠⵠΔⵠⵠⵠᐃ: "img/day-hand-skin122.png",
    ᐃᐃⲆΔⲆᐃΔ: "img/night-hand-skin122.png",
    Ⲇⵠᐃᐃᐃᐃⵠ: "img/day-hand-skin124.png",
    ᐃⵠᐃⲆⵠⲆΔ: "img/night-hand-skin124.png",
    Δᐃᐃᐃⵠⵠⵠ: "img/day-hand-skin125.png",
    ΔⵠΔᐃΔΔⲆ: "img/night-hand-skin125.png",
    ⵠⲆΔⲆⵠᐃⲆ: "img/day-hand-skin126.png",
    ⲆⵠⵠΔⲆⲆⲆ: "img/night-hand-skin126.png",
    ΔⲆⲆⵠⵠΔΔ: "img/day-hand-skin127.png",
    ΔᐃⲆᐃⵠⵠΔ: "img/night-hand-skin127.png",
    ᐃᐃⵠⲆⵠᐃⲆ: "img/day-hand-skin128.png",
    ᐃⲆⲆΔΔΔΔ: "img/night-hand-skin128.png",
    ΔⲆⲆⲆΔΔᐃ: "img/day-hand-skin129.png",
    ⵠΔⵠᐃᐃⲆΔ: "img/night-hand-skin129.png",
    ⲆᐃΔᐃᐃⵠⵠ: "img/day-hand-skin130.png",
    ⲆⲆΔᐃⵠⲆⲆ: "img/night-hand-skin130.png",
    ⵠΔΔⵠΔᐃᐃ: "img/day-hand-skin131.png",
    ⵠⲆⲆᐃᐃⵠⵠ: "img/night-hand-skin131.png",
    ΔᐃⵠⲆΔⵠᐃ: "img/day-hand-skin130.png",
    ⵠⲆᐃⵠΔΔⲆ: "img/night-hand-skin130.png",
    ⵠᐃⵠΔΔΔᐃ: "img/day-hand-skin133.png",
    ⲆⵠⲆᐃⲆᐃΔ: "img/night-hand-skin133.png",
    ᐃⲆⵠΔⵠⵠᐃ: "img/day-hand-skin134.png",
    ⵠⵠⵠⲆⵠᐃΔ: "img/night-hand-skin134.png",
    ⵠⵠⵠⲆⲆᐃⵠ: "img/day-hand-skin135.png",
    ⲆⵠⲆᐃⲆⲆⵠ: "img/night-hand-skin135.png",
    ΔⲆⵠⲆⵠᐃⵠ: "img/day-hand-skin136.png",
    ᐃᐃΔⵠⵠᐃΔ: "img/night-hand-skin136.png",
    ᐃᐃⵠⵠᐃⵠⵠ: "img/day-hand-skin137.png",
    ⲆΔᐃΔΔⵠᐃ: "img/night-hand-skin137.png",
    ᐃⵠⵠᐃⵠⵠⵠ: "img/day-hand-skin138.png",
    ΔΔΔⲆⵠⲆΔ: "img/night-hand-skin138.png",
    ᐃΔᐃΔΔⲆⲆ: "img/day-hand-skin139.png",
    ᐃⵠⵠᐃᐃⵠⲆ: "img/night-hand-skin139.png",
    ⲆⲆᐃΔᐃⲆⲆ: "img/day-hand-skin140.png",
    ᐃⵠΔⵠΔᐃΔ: "img/night-hand-skin140.png",
    ᐃⲆΔᐃⵠᐃⵠ: "img/day-hand-skin141.png",
    ⵠⲆⵠⵠⵠΔⲆ: "img/night-hand-skin141.png",
    ΔᐃⵠΔᐃΔΔ: "img/day-hand-skin142.png",
    ᐃΔⵠΔⲆΔᐃ: "img/night-hand-skin142.png",
    ΔⲆᐃᐃⵠⲆⵠ: "img/day-hand-skin143.png",
    ⵠⵠᐃⵠᐃᐃΔ: "img/night-hand-skin143.png",
    ⵠΔΔᐃⵠΔᐃ: "img/day-hand-skin144.png",
    ᐃᐃΔⲆᐃⲆⲆ: "img/night-hand-skin144.png",
    ᐃΔΔᐃᐃⵠΔ: "img/day-hand-skin145.png",
    ⵠⵠⵠΔᐃⲆᐃ: "img/night-hand-skin145.png",
    ΔᐃⲆᐃⵠᐃⲆ: "img/day-hand-skin146.png",
    ⵠⵠΔᐃⵠᐃⲆ: "img/night-hand-skin146.png",
    ⵠⵠᐃⲆᐃⵠⵠ: "img/day-hand-skin147.png",
    ᐃᐃᐃΔᐃⲆⵠ: "img/night-hand-skin147.png",
    ᐃⲆⲆΔⵠⲆⲆ: "img/day-hand-skin148.png",
    ᐃΔᐃΔⵠΔⲆ: "img/night-hand-skin148.png",
    ⵠΔⵠΔΔᐃΔ: "img/day-hand-skin149.png",
    ⲆΔⵠⵠⵠⵠᐃ: "img/night-hand-skin149.png",
    ⲆⵠⵠᐃⲆΔⲆ: "img/day-hand-skin150.png",
    ⵠⲆⲆⲆᐃⵠᐃ: "img/night-hand-skin150.png",
    ᐃⲆᐃⵠΔⵠᐃ: "img/day-hand-skin151.png",
    ⵠΔᐃΔⵠΔΔ: "img/night-hand-skin151.png",
    ⵠⵠᐃᐃⲆΔⵠ: "img/day-hand-skin152.png",
    ᐃⵠⲆΔᐃⲆΔ: "img/night-hand-skin152.png",
    ᐃΔⵠⵠΔᐃΔ: "img/day-hand-skin153.png",
    ΔⲆΔⵠⵠⵠΔ: "img/night-hand-skin153.png",
    ᐃΔⲆⲆⵠⵠⲆ: "img/day-hand-skin154.png",
    ᐃⲆᐃⲆⲆᐃᐃ: "img/night-hand-skin154.png",
    ᐃΔⲆΔⲆᐃⵠ: "img/day-hand-skin155.png",
    ᐃⲆⵠⵠΔⵠⵠ: "img/night-hand-skin155.png",
    ⵠᐃⵠΔⲆᐃⵠ: "img/day-hand-skin156.png",
    ΔⲆΔⲆᐃⵠΔ: "img/night-hand-skin156.png",
    ΔⵠΔᐃΔΔΔ: "img/day-hand-skin157.png",
    ΔⲆⵠᐃΔⵠΔ: "img/night-hand-skin157.png",
    ΔⲆᐃᐃⲆᐃⵠ: "img/day-hand-skin158.png",
    ΔᐃⲆⵠᐃⵠᐃ: "img/night-hand-skin158.png",
    ΔᐃᐃᐃΔⲆᐃ: "img/day-hand-skin159.png",
    ΔᐃⲆⵠⲆᐃⲆ: "img/night-hand-skin159.png",
    ᐃⲆΔⵠⲆΔⲆ: "img/day-hand-skin160.png",
    ᐃᐃΔⲆᐃⵠⲆ: "img/night-hand-skin160.png",
    ⵠⲆΔⲆⵠΔⵠ: "img/day-hand-skin161.png",
    ⲆⲆⵠⲆⵠᐃΔ: "img/night-hand-skin161.png",
    ⲆⲆΔⲆⲆᐃⵠ: "img/day-hand-skin162.png",
    ⵠΔⲆᐃⵠᐃⵠ: "img/night-hand-skin162.png",
    ⵠᐃΔⵠΔᐃᐃ: "img/day-hand-skin163.png",
    ⲆᐃⲆᐃⲆⲆⲆ: "img/night-hand-skin163.png",
    ΔⵠΔΔᐃΔᐃ: "img/day-hand-skin164.png",
    ⲆⲆΔⵠⲆⲆᐃ: "img/night-hand-skin164.png",
    ⲆⵠⲆⵠΔᐃⲆ: "img/day-hand-skin165.png",
    ⲆᐃΔⵠⵠⵠᐃ: "img/night-hand-skin165.png",
    ΔⵠΔΔⵠⲆΔ: "img/day-hand-skin166.png",
    ⲆⲆⵠΔⲆⲆⲆ: "img/night-hand-skin166.png",
    ΔΔΔΔᐃⵠΔ: "img/day-hand-skin167.png",
    ᐃᐃⵠⲆⲆⲆΔ: "img/night-hand-skin167.png",
    ΔΔⲆⵠⲆᐃⵠ: "img/day-hand-skin168.png",
    ⲆᐃⲆⲆⵠⲆⵠ: "img/night-hand-skin168.png",
    ⲆΔⲆⵠΔⵠⵠ: "img/day-hand-skin169.png",
    ΔΔⲆΔΔⵠᐃ: "img/night-hand-skin169.png",
    ⲆⲆⲆΔᐃΔΔ: "img/day-hand-skin170.png",
    ᐃΔΔᐃᐃᐃᐃ: "img/night-hand-skin170.png",
    ΔΔⵠᐃᐃⲆᐃ: "img/day-hand-skin171.png",
    ᐃⲆΔᐃΔᐃΔ: "img/night-hand-skin171.png",
    ⲆᐃⵠⵠᐃᐃⲆ: "img/day-hand-skin172.png",
    ⵠⲆᐃⲆⲆⲆⲆ: "img/night-hand-skin172.png",
    ⲆᐃⵠⲆᐃᐃⲆ: "img/day-hand-skin173.png",
    ᐃⲆⵠᐃⵠⵠᐃ: "img/night-hand-skin173.png",
    ᐃⲆⲆᐃΔⲆⵠ: "img/day-hand-skin174.png",
    ⲆⲆⲆᐃⵠⵠΔ: "img/night-hand-skin174.png",
    ΔΔⵠⵠΔΔⵠ: "img/day-hand-skin175.png",
    Ⲇᐃⵠⵠⵠⵠⵠ: "img/night-hand-skin175.png",
    ⲆⵠⲆΔⲆΔⲆ: "img/day-hand-skin176.png",
    ⲆᐃΔⲆⲆΔⵠ: "img/night-hand-skin176.png",
    ⵠⵠᐃⵠⲆᐃⵠ: "img/day-hand-skin177.png",
    ᐃΔΔⵠⲆⵠⵠ: "img/night-hand-skin177.png",
    ⲆᐃⵠᐃⵠⲆᐃ: "img/day-hand-skin178.png",
    ᐃΔⲆⲆᐃⵠⲆ: "img/night-hand-skin178.png",
    ⲆⵠⵠⵠⲆΔⲆ: "img/day-hand-skin179.png",
    ΔⲆⵠΔⲆΔᐃ: "img/night-hand-skin179.png",
    ⵠΔᐃΔᐃᐃΔ: "img/day-hand-skin180.png",
    Δⵠⵠᐃⵠⵠⵠ: "img/night-hand-skin180.png",
    ᐃᐃᐃⲆⵠΔⵠ: "img/day-hand-skin181.png",
    ΔⲆⲆᐃⵠΔΔ: "img/night-hand-skin181.png",
    ᐃΔᐃᐃⲆΔΔ: "img/day-hand-skin182.png",
    ⲆᐃⵠΔᐃⲆΔ: "img/night-hand-skin182.png",
    ᐃⵠⵠⲆΔᐃⵠ: "img/day-hand-skin183.png",
    ⲆⵠᐃΔΔᐃΔ: "img/night-hand-skin183.png",
    ⲆΔⵠⲆⲆᐃΔ: "img/day-hand-skin184.png",
    ⲆⵠΔⲆⵠⲆⵠ: "img/night-hand-skin184.png",
    ⵠⵠⵠⵠΔⲆⵠ: "img/day-hand-skin185.png",
    ⵠᐃΔⵠⵠΔⲆ: "img/night-hand-skin185.png",
    ⵠᐃⲆⵠⵠΔᐃ: "img/day-hand-skin186.png",
    ⲆⲆΔᐃⵠⵠᐃ: "img/night-hand-skin186.png",
    ᐃⲆᐃᐃᐃⵠⲆ: "img/day-hand-skin187.png",
    ⵠΔᐃⵠΔⵠΔ: "img/night-hand-skin187.png",
    ⲆΔᐃⵠᐃᐃᐃ: "img/day-hand-skin188.png",
    ΔΔΔⵠⲆΔⲆ: "img/night-hand-skin188.png",
    ΔⵠⵠⲆⲆΔⲆ: "img/day-hand-skin189.png",
    ⵠΔΔᐃⵠΔⲆ: "img/night-hand-skin189.png",
    ᐃΔⲆⲆⲆΔΔ: "img/day-hand-skin190.png",
    ⵠΔⲆⵠᐃⵠⵠ: "img/night-hand-skin190.png",
    ⲆᐃⲆΔᐃⵠᐃ: "img/day-hand-skin191.png",
    ΔΔᐃΔⲆⵠΔ: "img/night-hand-skin191.png",
    ⵠⵠΔⵠⵠⵠⲆ: "img/day-hand-skin192.png",
    ΔᐃⵠⲆΔᐃⲆ: "img/night-hand-skin192.png",
    ᐃᐃⲆΔⵠⵠⵠ: "img/day-hand-skin193.png",
    ⲆⲆᐃⲆΔⵠΔ: "img/night-hand-skin193.png",
    ⵠᐃᐃΔⲆᐃⵠ: "img/day-hand-skin194.png",
    ⲆΔᐃᐃⲆⵠΔ: "img/night-hand-skin194.png",
    ⵠⵠᐃᐃᐃΔⵠ: "img/day-hand-skin195.png",
    ΔⵠΔᐃⲆᐃᐃ: "img/night-hand-skin195.png",
    ⲆΔᐃⲆΔⲆΔ: "img/day-hand-skin196.png",
    ⲆᐃΔⲆΔⵠΔ: "img/night-hand-skin196.png",
    ᐃΔᐃⵠΔⲆⵠ: "img/day-hand-skin197.png",
    ⵠᐃⲆΔⵠΔᐃ: "img/night-hand-skin197.png",
    ⵠⲆΔᐃᐃⲆⲆ: "img/day-hand-skin198.png",
    ᐃⵠᐃⵠⲆΔⵠ: "img/night-hand-skin198.png",
    ᐃᐃⲆⵠⵠⵠⲆ: "img/day-hand-skin199.png",
    ⲆΔⵠⲆᐃΔⵠ: "img/night-hand-skin199.png",
    ⲆᐃᐃⵠΔⲆⵠ: "img/day-hand-skin200.png",
    ⲆⵠⲆΔᐃᐃⲆ: "img/night-hand-skin200.png",
    ΔᐃᐃⵠⵠᐃΔ: "img/day-hand-skin201.png",
    ⵠΔᐃⲆⵠⵠⵠ: "img/night-hand-skin201.png",
    ᐃΔΔᐃᐃⲆΔ: "img/day-hand-skin202.png",
    ΔᐃⲆᐃᐃᐃⲆ: "img/night-hand-skin202.png",
    ⲆΔᐃᐃⵠᐃⲆ: "img/day-hand-skin203.png",
    ΔⵠᐃⵠΔΔᐃ: "img/night-hand-skin203.png",
    ⵠΔⲆⵠⲆΔᐃ: "img/day-hand-skin204.png",
    ΔⵠⲆⵠⲆⲆᐃ: "img/night-hand-skin204.png",
    ᐃᐃᐃΔᐃⵠⵠ: "img/day-hand-skin205.png",
    ⲆᐃⵠΔⲆⲆᐃ: "img/night-hand-skin205.png",
    ⲆⲆⲆΔⵠΔΔ: "img/day-hand-skin206.png",
    ΔⵠⲆᐃⵠᐃᐃ: "img/night-hand-skin206.png",
    ΔⲆⵠΔⵠᐃᐃ: "img/day-hand-skin207.png",
    ⵠΔᐃΔⲆᐃⵠ: "img/night-hand-skin207.png",
    ᐃⵠᐃⵠⵠⲆⲆ: "img/day-hand-skin208.png",
    ᐃᐃⲆⲆⲆΔΔ: "img/night-hand-skin208.png",
    ᐃⵠΔⲆᐃⲆⵠ: "img/day-hand-skin209.png",
    ΔΔⵠⵠⲆΔΔ: "img/night-hand-skin209.png",
    ᐃᐃᐃᐃᐃⲆᐃ: "img/day-hand-skin210.png",
    ⵠᐃⵠⵠⵠⲆᐃ: "img/night-hand-skin210.png",
    ᐃᐃᐃⵠᐃⲆⲆ: "img/day-hand-skin211.png",
    ᐃΔΔΔⵠⵠΔ: "img/night-hand-skin211.png",
    ⵠᐃⵠΔᐃⲆⲆ: "img/day-hand-skin212.png",
    ΔⵠΔⵠΔΔⵠ: "img/night-hand-skin212.png",
    ΔⲆⲆⲆⵠΔⵠ: "img/day-hand-skin213.png",
    ⵠⵠΔⵠᐃⵠᐃ: "img/night-hand-skin213.png",
    ⲆᐃᐃⲆᐃⲆᐃ: "img/day-hand-skin214.png",
    ⲆΔΔΔᐃⲆΔ: "img/night-hand-skin214.png",
    ΔᐃⵠΔΔⵠⵠ: "img/day-bag-star0.png",
    ΔⲆⲆⲆᐃᐃᐃ: "img/night-bag-star0.png",
    ΔⲆⵠᐃᐃΔⵠ: "img/day-bag0.png",
    ⵠᐃⵠⲆⲆΔⲆ: "img/night-bag0.png",
    ΔⵠᐃᐃᐃᐃΔ: "img/day-bag1.png",
    ⵠⲆΔᐃⵠⵠⲆ: "img/night-bag1.png",
    ⵠⵠΔⵠⲆⵠᐃ: "img/day-bag2.png",
    ᐃᐃΔⲆⲆⲆΔ: "img/night-bag2.png",
    ⲆΔΔΔᐃᐃᐃ: "img/day-bag3.png",
    ⲆⵠⵠΔᐃⵠᐃ: "img/night-bag3.png",
    ΔⲆᐃΔⵠᐃᐃ: "img/day-bag4.png",
    ⵠᐃΔᐃⵠΔᐃ: "img/night-bag4.png",
    ⵠΔⵠᐃⵠⲆΔ: "img/day-bag5.png",
    ΔⵠⵠᐃⲆᐃᐃ: "img/night-bag5.png",
    ᐃⲆᐃⲆΔΔᐃ: "img/day-bag6.png",
    ΔΔΔⲆⵠᐃᐃ: "img/night-bag6.png",
    ᐃΔᐃⲆⵠⵠᐃ: "img/day-bag7.png",
    ΔⲆΔᐃⵠⲆⵠ: "img/night-bag7.png",
    ⵠⵠⲆΔⵠⵠᐃ: "img/day-bag8.png",
    ᐃⲆⵠΔΔᐃⲆ: "img/night-bag8.png",
    ⲆΔⵠⵠΔⵠⲆ: "img/day-bag9.png",
    ⲆΔⵠⵠⵠᐃⵠ: "img/night-bag9.png",
    ΔᐃⵠⵠⵠⲆⵠ: "img/day-bag10.png",
    ΔⲆΔᐃⵠⲆΔ: "img/night-bag10.png",
    ⲆΔᐃⲆⲆⲆⲆ: "img/day-bag11.png",
    ⵠⵠΔⵠⲆⲆᐃ: "img/night-bag11.png",
    ⵠᐃᐃΔᐃᐃⲆ: "img/day-bag13.png",
    ᐃΔΔⵠⵠⵠΔ: "img/night-bag13.png",
    ⲆⵠΔΔᐃⲆΔ: "img/day-bag14.png",
    ᐃΔⵠⲆᐃⵠⲆ: "img/night-bag14.png",
    ⵠⵠᐃⲆⲆⲆⲆ: "img/day-bag16.png",
    ⵠⵠⲆΔⲆⵠΔ: "img/night-bag16.png",
    ᐃⵠⵠΔⵠⵠⵠ: "img/day-bag17.png",
    ⲆⲆᐃⲆᐃⲆᐃ: "img/night-bag17.png",
    ΔⲆⲆⵠᐃⵠᐃ: "img/day-bag18.png",
    ΔΔⲆⲆΔᐃᐃ: "img/night-bag18.png",
    ᐃⲆⲆᐃᐃΔΔ: "img/day-bag19.png",
    ⲆᐃⵠΔⵠΔΔ: "img/night-bag19.png",
    ᐃⲆᐃᐃᐃᐃᐃ: "img/day-bag20.png",
    ⲆᐃΔᐃᐃᐃᐃ: "img/night-bag20.png",
    ᐃΔᐃΔⲆⲆⲆ: "img/day-bag21.png",
    ΔⵠΔΔᐃᐃⵠ: "img/night-bag21.png",
    ⵠΔᐃΔⲆᐃⲆ: "img/day-bag22.png",
    ⵠᐃⲆᐃᐃⵠⵠ: "img/night-bag22.png",
    ⲆⲆⲆⵠⵠᐃⵠ: "img/day-bag23.png",
    ⵠΔΔⲆᐃΔⲆ: "img/night-bag23.png",
    ⵠᐃΔⲆⲆⲆΔ: "img/day-bag24.png",
    ᐃⲆᐃᐃⵠⵠⲆ: "img/night-bag24.png",
    ⲆⵠⲆᐃⲆⵠⵠ: "img/day-bag25.png",
    ΔⵠⲆᐃⵠⲆΔ: "img/night-bag25.png",
    ΔⵠᐃⲆᐃⲆⲆ: "img/day-bag26.png",
    ⲆΔΔⵠᐃⲆⵠ: "img/night-bag26.png",
    ⲆᐃᐃᐃⵠⲆΔ: "img/day-bag27.png",
    Δⵠᐃᐃᐃᐃᐃ: "img/night-bag27.png",
    ΔΔⵠΔⵠᐃᐃ: "img/day-bag28.png",
    ⵠᐃⵠᐃⵠΔᐃ: "img/night-bag28.png",
    ᐃᐃΔᐃⲆⲆΔ: "img/day-bag29.png",
    ΔⲆΔⲆᐃΔⲆ: "img/night-bag29.png",
    ⲆⵠⲆΔⲆⲆⵠ: "img/day-bag30.png",
    ᐃⲆᐃⵠᐃᐃⵠ: "img/night-bag30.png",
    ⵠⵠᐃΔⲆΔᐃ: "img/day-bag31.png",
    ⲆⵠΔΔᐃᐃⵠ: "img/night-bag31.png",
    ΔⵠⵠⵠⲆΔΔ: "img/day-bag32.png",
    ⲆⵠⲆⵠᐃΔⵠ: "img/night-bag32.png",
    ⲆᐃⵠⲆⲆΔⲆ: "img/day-bag33.png",
    ⵠᐃⵠᐃᐃⵠᐃ: "img/night-bag33.png",
    ᐃΔⵠⲆᐃΔᐃ: "img/day-bag34.png",
    ᐃⵠΔΔᐃⵠᐃ: "img/night-bag34.png",
    ᐃⲆⵠᐃⲆᐃⲆ: "img/day-bag35.png",
    ΔᐃᐃΔᐃⲆΔ: "img/night-bag35.png",
    ⲆⵠⵠⵠᐃᐃⲆ: "img/day-bag36.png",
    ΔⲆⵠⲆΔΔⵠ: "img/night-bag36.png",
    ᐃⵠⲆⵠⲆⵠⲆ: "img/day-bag37.png",
    ⵠⵠΔⲆᐃΔⵠ: "img/night-bag37.png",
    ⲆⲆΔᐃⲆᐃᐃ: "img/day-bag38.png",
    ⲆⵠᐃΔΔⵠΔ: "img/night-bag38.png",
    ΔΔⲆΔⲆΔΔ: "img/day-bag39.png",
    ΔⲆᐃΔΔᐃⲆ: "img/night-bag39.png",
    ᐃΔᐃⵠⵠΔⵠ: "img/day-bag40.png",
    ⲆΔᐃᐃⵠΔΔ: "img/night-bag40.png",
    ⲆⲆΔΔⲆⵠᐃ: "img/day-bag41.png",
    ⲆΔⲆΔⵠⵠᐃ: "img/night-bag41.png",
    ⲆΔⵠᐃᐃᐃᐃ: "img/day-bag42.png",
    ⲆⵠΔΔⵠⵠΔ: "img/night-bag42.png",
    ᐃᐃⵠΔΔⲆΔ: "img/day-bag43.png",
    ᐃⲆⲆⵠⵠⲆᐃ: "img/night-bag43.png",
    ⵠⲆᐃⲆᐃΔᐃ: "img/day-bag44.png",
    ⲆᐃⲆᐃᐃᐃᐃ: "img/night-bag44.png",
    ᐃⲆⲆᐃⲆⵠΔ: "img/day-bag45.png",
    ᐃᐃⵠᐃΔⵠᐃ: "img/night-bag45.png",
    ΔΔⵠᐃⵠⵠⵠ: "img/day-bag46.png",
    ⲆᐃΔᐃⲆⵠⵠ: "img/night-bag46.png",
    ⲆⲆᐃΔⵠᐃⲆ: "img/day-bag47.png",
    ᐃⲆⲆⵠᐃⵠⲆ: "img/night-bag47.png",
    ΔⵠΔΔΔⵠⵠ: "img/day-bag48.png",
    ⲆΔⵠΔⵠᐃΔ: "img/night-bag48.png",
    ⵠⲆⵠⵠⲆⵠᐃ: "img/day-bag49.png",
    ᐃⲆⵠΔⲆΔΔ: "img/night-bag49.png",
    ᐃⲆⵠΔⵠΔⲆ: "img/day-bag50.png",
    ᐃⵠᐃⵠⵠⵠᐃ: "img/night-bag50.png",
    ΔᐃΔⲆΔⲆⲆ: "img/day-bag51.png",
    ᐃᐃᐃΔΔΔⲆ: "img/night-bag51.png",
    ⲆᐃᐃⲆⲆΔⲆ: "img/day-bag52.png",
    ⲆΔΔⵠΔᐃΔ: "img/night-bag52.png",
    ᐃⵠⵠΔⲆᐃΔ: "img/day-bag53.png",
    ⲆᐃᐃᐃⵠⲆⵠ: "img/night-bag53.png",
    ⲆⲆᐃⲆⲆⵠᐃ: "img/day-bag54.png",
    ⲆΔᐃᐃΔᐃΔ: "img/night-bag54.png",
    ⲆΔΔΔⲆⲆᐃ: "img/day-bag55.png",
    Δⵠᐃⵠᐃᐃⵠ: "img/night-bag55.png",
    ⵠⵠⵠᐃⵠΔⲆ: "img/day-bag56.png",
    ⲆΔΔⲆⲆⵠⲆ: "img/night-bag56.png",
    ⲆΔΔᐃⲆⲆᐃ: "img/day-bag57.png",
    ⵠᐃΔⵠΔᐃⲆ: "img/night-bag57.png",
    ⲆⵠⵠⲆⲆᐃΔ: "img/day-bag58.png",
    ᐃⵠᐃⲆΔⵠΔ: "img/night-bag58.png",
    ᐃᐃⲆⲆⲆΔⵠ: "img/day-bag59.png",
    ᐃⲆΔⵠᐃᐃⲆ: "img/night-bag59.png",
    ΔⲆΔⵠᐃΔⵠ: "img/day-bag60.png",
    ᐃⵠⵠΔⲆΔΔ: "img/night-bag60.png",
    ⵠⵠⵠⲆΔᐃⵠ: "img/day-bag61.png",
    ᐃⲆᐃⵠⵠΔΔ: "img/night-bag61.png",
    ⲆⲆΔⲆΔᐃⵠ: "img/day-bag62.png",
    ⲆΔⲆⵠⲆᐃⲆ: "img/night-bag62.png",
    ⵠⵠⵠᐃⲆΔⲆ: "img/day-bag63.png",
    ⲆΔΔΔⲆΔᐃ: "img/night-bag63.png",
    ᐃΔⵠⵠⲆΔⲆ: "img/day-bag64.png",
    ⲆᐃⲆⵠΔΔΔ: "img/night-bag64.png",
    ΔⵠΔⲆᐃᐃⵠ: "img/day-bag65.png",
    ⲆⵠⲆᐃⵠΔᐃ: "img/night-bag65.png",
    Ⲇⵠⵠⵠⵠⵠᐃ: "img/day-bag66.png",
    ΔⲆⲆⵠⲆΔᐃ: "img/night-bag66.png",
    ⲆⵠⲆⲆⵠⵠⵠ: "img/day-bag67.png",
    ᐃⲆⲆΔⵠᐃⲆ: "img/night-bag67.png",
    ΔᐃΔⵠⲆΔⲆ: "img/day-bag68.png",
    ᐃⵠᐃⲆᐃⵠⵠ: "img/night-bag68.png",
    ⵠⵠⵠⵠᐃᐃΔ: "img/day-bag69.png",
    ΔᐃⵠΔⲆΔⲆ: "img/night-bag69.png",
    ΔⲆⵠᐃⲆΔΔ: "img/day-bag70.png",
    ⲆΔⵠᐃΔⲆΔ: "img/night-bag70.png",
    ᐃⵠΔⲆΔⲆᐃ: "img/day-bag71.png",
    ΔⵠⲆⵠΔⲆΔ: "img/night-bag71.png",
    ⲆΔΔΔΔΔⲆ: "img/day-bag72.png",
    Ⲇᐃⵠᐃᐃⵠᐃ: "img/night-bag72.png",
    ᐃᐃΔΔⲆΔΔ: "img/day-bag73.png",
    ΔΔⵠΔΔᐃᐃ: "img/night-bag73.png",
    ⲆⲆⲆᐃΔⲆΔ: "img/day-bag74.png",
    ᐃᐃⵠⲆᐃΔᐃ: "img/night-bag74.png",
    ⵠⵠᐃⵠⵠᐃᐃ: "img/day-bag75.png",
    ΔΔⲆᐃΔⲆΔ: "img/night-bag75.png",
    ⲆⵠⵠΔⵠⲆⲆ: "img/day-bag76.png",
    ⲆᐃΔᐃΔΔⲆ: "img/night-bag76.png",
    ⵠᐃΔᐃⲆᐃᐃ: "img/day-bag77.png",
    ᐃΔᐃⲆΔΔΔ: "img/night-bag77.png",
    ⲆⲆⵠⵠΔᐃΔ: "img/day-bag78.png",
    ᐃⵠᐃΔᐃΔΔ: "img/night-bag78.png",
    ΔⵠⲆⲆΔⲆⲆ: "img/day-bag79.png",
    ⵠⵠⲆⵠⲆⲆΔ: "img/night-bag79.png",
    ΔⲆΔⲆΔⲆⵠ: "img/day-bag80.png",
    ⲆⵠᐃⵠᐃΔᐃ: "img/night-bag80.png",
    ᐃΔⵠⵠⵠᐃⲆ: "img/day-accessory0.png",
    ᐃⵠΔΔⲆᐃⲆ: "img/day-accessory0-pacques.png",
    ΔⵠⲆᐃⲆⲆⲆ: "img/night-accessory0-pacques.png",
    ΔΔΔᐃⲆⵠᐃ: "img/day-accessory13.png",
    ΔⵠΔⲆⵠⵠᐃ: "img/night-accessory13.png",
    ⲆᐃΔᐃⲆⵠⲆ: "img/day-accessory14.png",
    ᐃⵠⵠⲆᐃᐃΔ: "img/night-accessory14.png",
    ΔⵠΔΔⲆⵠⲆ: "img/day-accessory15.png",
    ⵠᐃⵠⲆⵠⵠᐃ: "img/night-accessory15.png",
    ⲆⲆⲆᐃⵠΔⵠ: "img/day-accessory16.png",
    ᐃΔⲆⲆⲆᐃⲆ: "img/night-accessory16.png",
    ⵠᐃⲆΔⲆΔΔ: "img/day-accessory17.png",
    ⵠᐃⲆⲆΔⵠⵠ: "img/day-accessory17.png",
    ᐃⵠΔᐃⲆⵠⲆ: "img/day-accessory19.png",
    ⲆᐃⲆⲆΔⵠᐃ: "img/night-accessory19.png",
    ΔⲆᐃΔⲆⲆⲆ: "img/day-accessory20.png",
    ᐃΔⵠⲆⲆΔⵠ: "img/night-accessory20.png",
    ⲆΔΔᐃᐃⵠⲆ: "img/day-accessory21.png",
    ⵠⵠⲆⲆΔⲆⲆ: "img/night-accessory21.png",
    ⵠⲆⲆᐃⵠΔᐃ: "img/day-accessory22.png",
    ᐃΔⲆᐃᐃⵠⲆ: "img/night-accessory22.png",
    ᐃΔⲆⵠᐃΔΔ: "img/day-accessory23.png",
    ⲆⵠᐃⲆⲆᐃᐃ: "img/night-accessory23.png",
    ⵠⲆⲆΔⲆⵠΔ: "img/day-accessory24.png",
    ⲆⲆⲆΔⲆᐃⲆ: "img/night-accessory24.png",
    ΔΔⵠᐃⵠⲆⲆ: "img/day-accessory25.png",
    ᐃΔⲆᐃΔⲆⲆ: "img/night-accessory25.png",
    ⲆΔᐃᐃⲆⲆΔ: "img/day-accessory26.png",
    ⲆⲆⲆᐃᐃΔᐃ: "img/night-accessory26.png",
    ᐃΔᐃᐃⲆⵠΔ: "img/day-accessory27.png",
    ⲆᐃⲆⵠⵠΔⲆ: "img/night-accessory27.png",
    ⲆⵠⵠⵠΔⵠΔ: "img/day-accessory18.png",
    ⵠΔᐃΔⵠᐃⲆ: "img/night-accessory18.png",
    ΔᐃⵠΔᐃⵠΔ: "img/day-accessory29.png",
    ΔⵠⵠⲆⲆⲆⲆ: "img/night-accessory29.png",
    ΔⵠᐃᐃΔⵠΔ: "img/day-accessory30.png",
    ΔᐃᐃⵠⲆΔⲆ: "img/night-accessory30.png",
    ᐃᐃᐃⲆΔΔⵠ: "img/day-accessory31.png",
    ΔⵠΔⲆᐃᐃᐃ: "img/night-accessory31.png",
    ᐃⲆⲆⲆⵠΔⵠ: "img/day-accessory32.png",
    ⵠΔΔⵠⵠᐃᐃ: "img/night-accessory32.png",
    ΔΔΔᐃⲆΔⲆ: "img/day-accessory33.png",
    ⵠⵠⲆⲆⵠⵠᐃ: "img/night-accessory33.png",
    ΔⲆᐃΔᐃᐃᐃ: "img/day-accessory34.png",
    ⲆΔᐃΔΔⲆⵠ: "img/night-accessory34.png",
    ⵠᐃⵠⵠᐃⵠΔ: "img/day-accessory35.png",
    ΔⲆⵠΔᐃⲆᐃ: "img/night-accessory35.png",
    ⲆⵠᐃᐃⲆᐃⵠ: "img/day-accessory28.png",
    ΔᐃⲆⵠⲆⲆΔ: "img/night-accessory28.png",
    ⵠⵠΔⲆᐃⵠΔ: "img/day-accessory36.png",
    ΔΔⲆΔⲆᐃᐃ: "img/night-accessory36.png",
    ⲆⲆΔⲆᐃᐃⵠ: "img/day-accessory37.png",
    ⲆⵠᐃΔᐃⲆᐃ: "img/night-accessory37.png",
    ⵠⲆⵠΔΔΔΔ: "img/day-accessory39.png",
    ᐃΔⲆⲆᐃΔΔ: "img/night-accessory39.png",
    ΔⵠⲆᐃⲆⲆⵠ: "img/day-accessory40.png",
    ⲆⲆⲆⵠⵠⲆΔ: "img/night-accessory40.png",
    ⲆᐃⵠⲆΔⲆΔ: "img/day-accessory41.png",
    ΔⲆⵠᐃⲆΔᐃ: "img/night-accessory41.png",
    ΔΔⲆⲆᐃⲆΔ: "img/day-accessory42.png",
    ΔΔⲆΔΔⲆΔ: "img/night-accessory42.png",
    ⲆⲆⵠᐃⵠᐃᐃ: "img/day-accessory43.png",
    ⲆⵠⲆⵠⲆᐃᐃ: "img/night-accessory43.png",
    ΔⵠΔⲆⲆᐃⵠ: "img/day-accessory44.png",
    ᐃⵠⵠᐃᐃⵠΔ: "img/night-accessory44.png",
    ⵠΔᐃⲆⲆΔΔ: "img/day-accessory38.png",
    ΔᐃΔᐃⵠⲆⵠ: "img/night-accessory38.png",
    ᐃᐃᐃᐃᐃⵠΔ: "img/day-accessory46.png",
    ᐃⲆⲆΔΔⵠⵠ: "img/night-accessory46.png",
    ⲆᐃΔΔᐃΔⲆ: "img/day-accessory47.png",
    ᐃᐃⲆᐃⲆᐃⲆ: "img/night-accessory47.png",
    ᐃΔⲆᐃᐃᐃⵠ: "img/day-accessory48.png",
    ⲆᐃⲆΔⵠⲆⵠ: "img/night-accessory48.png",
    ᐃⵠⲆᐃΔᐃⵠ: "img/day-accessory49.png",
    ⵠᐃΔΔᐃⵠⲆ: "img/night-accessory49.png",
    ⵠⲆⵠᐃⲆᐃΔ: "img/day-accessory45.png",
    ΔΔⲆᐃΔⲆⵠ: "img/night-accessory45.png",
    ᐃⲆⵠⵠⵠᐃᐃ: "img/day-accessory50.png",
    ΔⵠⵠⵠᐃⵠⲆ: "img/night-accessory50.png",
    ΔⵠⲆᐃΔᐃΔ: "img/day-accessory51.png",
    ᐃⲆᐃⲆᐃⵠⵠ: "img/night-accessory51.png",
    ⲆᐃΔΔᐃⲆᐃ: "img/day-accessory52.png",
    ΔΔⲆⵠᐃⲆⵠ: "img/night-accessory52.png",
    ⵠᐃΔⲆⲆΔⵠ: "img/day-accessory53.png",
    ⵠΔΔΔΔΔⲆ: "img/night-accessory53.png",
    ⵠᐃⲆᐃᐃᐃᐃ: "img/day-accessory54.png",
    ⲆΔΔⵠⲆⵠⵠ: "img/night-accessory54.png",
    ΔⲆᐃⵠΔΔΔ: "img/day-accessory55.png",
    ᐃΔⵠΔⵠΔΔ: "img/night-accessory55.png",
    ᐃⲆⵠⵠⲆⲆⲆ: "img/day-accessory56.png",
    ᐃΔⵠⲆⵠᐃᐃ: "img/night-accessory56.png",
    ⵠⵠᐃⵠⵠΔⲆ: "img/day-accessory57.png",
    ⵠᐃᐃᐃᐃⲆᐃ: "img/night-accessory57.png",
    ⵠᐃⲆΔᐃⲆᐃ: "img/day-accessory58.png",
    ⲆΔⲆⲆᐃⲆΔ: "img/night-accessory58.png",
    ΔⵠⵠⵠⲆⲆᐃ: "img/day-accessory59.png",
    ΔⲆⵠⲆᐃΔΔ: "img/night-accessory59.png",
    ᐃΔᐃⵠΔⲆΔ: "img/day-accessory60.png",
    ⲆᐃᐃᐃΔᐃⵠ: "img/night-accessory60.png",
    ᐃⲆⵠᐃΔⵠΔ: "img/day-accessory61.png",
    ᐃᐃΔⲆᐃΔᐃ: "img/night-accessory61.png",
    ΔⵠΔⵠᐃⵠⵠ: "img/day-accessory62.png",
    ᐃⵠΔᐃΔⵠⲆ: "img/night-accessory62.png",
    ⲆᐃΔⲆⵠᐃᐃ: "img/day-accessory63.png",
    ΔΔⵠΔΔⲆᐃ: "img/night-accessory63.png",
    ⵠΔⲆⲆᐃΔᐃ: "img/day-accessory64.png",
    ⲆⲆΔⲆΔΔᐃ: "img/night-accessory64.png",
    ΔⵠⵠⵠⲆⲆⲆ: "img/day-accessory65.png",
    ⲆᐃⵠᐃᐃⵠⲆ: "img/night-accessory65.png",
    ⵠⲆΔᐃΔΔⲆ: "img/day-accessory66.png",
    ⵠⲆΔΔᐃᐃΔ: "img/night-accessory66.png",
    ⵠⵠᐃᐃΔⲆⵠ: "img/day-accessory67.png",
    ᐃΔⲆⲆΔΔⲆ: "img/night-accessory67.png",
    ᐃᐃⲆΔⲆⲆⲆ: "img/day-accessory68.png",
    ΔⵠᐃᐃΔⲆΔ: "img/night-accessory68.png",
    ⲆⲆᐃⲆⲆᐃᐃ: "img/day-accessory69.png",
    ΔᐃᐃΔΔΔᐃ: "img/night-accessory69.png",
    ⵠⲆⵠⲆⲆⵠΔ: "img/day-accessory70.png",
    ⵠᐃΔΔᐃΔᐃ: "img/night-accessory70.png",
    ⵠᐃΔⵠΔᐃⵠ: "img/day-accessory71.png",
    ⲆⵠΔΔⵠᐃᐃ: "img/night-accessory71.png",
    ᐃΔᐃⵠⲆᐃΔ: "img/day-accessory72.png",
    ⵠⵠⵠᐃⵠΔⵠ: "img/night-accessory72.png",
    ΔᐃⲆΔⵠΔᐃ: "img/day-accessory73.png",
    ⵠΔᐃᐃᐃᐃᐃ: "img/night-accessory73.png",
    ᐃΔⲆΔᐃⲆⲆ: "img/day-accessory74.png",
    ⵠΔᐃΔᐃⲆⲆ: "img/night-accessory74.png",
    ⵠⵠⵠⲆΔΔΔ: "img/day-accessory75.png",
    ⵠⲆΔᐃⲆᐃⲆ: "img/night-accessory75.png",
    ⲆⲆΔᐃᐃⵠⲆ: "img/day-accessory76.png",
    ᐃᐃⵠⵠⵠⵠⲆ: "img/night-accessory76.png",
    ᐃΔΔᐃⵠᐃᐃ: "img/day-accessory77.png",
    ⲆᐃᐃᐃⲆⵠΔ: "img/night-accessory77.png",
    ᐃⵠⲆⵠᐃⲆᐃ: "img/day-accessory78.png",
    ⲆᐃⵠᐃᐃⲆⲆ: "img/night-accessory78.png",
    ᐃⲆΔᐃⲆΔⵠ: "img/day-accessory79.png",
    ⲆⵠⲆⲆᐃᐃⲆ: "img/night-accessory79.png",
    ⲆⲆΔΔⵠⵠⵠ: "img/day-accessory80.png",
    ΔΔⲆᐃⲆⵠΔ: "img/night-accessory80.png",
    ΔΔⵠᐃⵠⲆⵠ: "img/day-accessory81.png",
    ᐃᐃⵠᐃⲆⲆΔ: "img/night-accessory81.png",
    ⲆⲆᐃΔΔΔΔ: "img/day-accessory83.png",
    ΔⲆᐃΔᐃᐃⲆ: "img/night-accessory83.png",
    ᐃⵠᐃⲆⲆⲆᐃ: "img/day-accessory84.png",
    ΔΔΔⲆᐃᐃΔ: "img/night-accessory84.png",
    ᐃΔΔᐃᐃΔᐃ: "img/day-accessory85.png",
    ΔᐃⵠᐃⵠᐃⲆ: "img/night-accessory85.png",
    ⲆᐃᐃᐃⲆᐃⲆ: "img/day-accessory86.png",
    ⵠᐃΔⵠⵠᐃⲆ: "img/night-accessory86.png",
    ⲆⲆⲆⵠΔⵠⵠ: "img/day-accessory87.png",
    ⲆΔᐃⲆᐃᐃⲆ: "img/night-accessory87.png",
    ΔΔⵠⵠⵠⵠⲆ: "img/day-accessory88.png",
    ᐃⲆᐃΔⲆᐃⲆ: "img/night-accessory88.png",
    ΔΔᐃⲆⵠᐃⵠ: "img/day-accessory89.png",
    ⵠⲆⲆⵠⲆⲆᐃ: "img/night-accessory89.png",
    ⲆⲆΔᐃⲆⲆⵠ: "img/day-accessory90.png",
    ᐃᐃᐃⲆᐃᐃᐃ: "img/night-accessory90.png",
    ⲆΔΔᐃⲆΔⵠ: "img/day-accessory91.png",
    ⵠⵠⲆᐃᐃᐃⲆ: "img/night-accessory91.png",
    ⲆΔΔᐃⵠⵠΔ: "img/day-accessory92.png",
    ⲆⵠΔᐃΔⵠⵠ: "img/night-accessory92.png",
    ᐃΔᐃⲆⵠΔⵠ: "img/day-accessory93.png",
    ΔΔⵠΔⵠⲆⵠ: "img/night-accessory93.png",
    ⵠᐃⵠⲆᐃᐃᐃ: "img/day-accessory94.png",
    ⲆᐃⲆⵠΔᐃⲆ: "img/night-accessory94.png",
    ΔⲆᐃᐃⲆΔⵠ: "img/day-accessory95.png",
    ᐃᐃΔⲆᐃⵠΔ: "img/night-accessory95.png",
    ⲆⲆⵠΔⵠⵠⵠ: "img/day-accessory96.png",
    ᐃⲆΔᐃᐃᐃΔ: "img/night-accessory96.png",
    ΔᐃⵠⲆⲆⲆᐃ: "img/day-accessory97.png",
    ⲆⵠΔᐃⲆᐃⲆ: "img/night-accessory97.png",
    ⵠΔᐃΔⵠΔⲆ: "img/day-accessory98.png",
    ⲆⵠΔΔⵠᐃΔ: "img/night-accessory98.png",
    ⲆΔⵠΔⵠΔⵠ: "img/day-accessory99.png",
    ⲆⲆⵠⵠⵠᐃⲆ: "img/night-accessory99.png",
    ᐃΔΔᐃⵠᐃΔ: "img/day-accessory100.png",
    ΔΔⲆᐃᐃΔΔ: "img/night-accessory100.png",
    ⵠⲆΔᐃΔᐃⵠ: "img/day-accessory101.png",
    ΔΔᐃⵠΔᐃΔ: "img/night-accessory101.png",
    ⵠⲆΔⵠΔⵠΔ: "img/day-accessory102.png",
    ᐃⲆᐃᐃΔᐃᐃ: "img/night-accessory102.png",
    ΔᐃⵠᐃΔⵠⲆ: "img/day-accessory103.png",
    ᐃΔⲆⵠΔⲆΔ: "img/night-accessory103.png",
    ᐃΔΔⵠⵠΔᐃ: "img/day-accessory104.png",
    ᐃᐃⲆⲆᐃΔᐃ: "img/night-accessory104.png",
    ᐃΔᐃᐃⵠᐃⵠ: "img/day-accessory105.png",
    ⲆΔᐃΔΔⵠⲆ: "img/night-accessory105.png",
    ⵠΔᐃΔᐃᐃⲆᐃⵠ: "img/day-accessory106.png",
    ΔΔᐃⲆᐃᐃᐃⵠᐃ: "img/night-accessory106.png",
    ᐃᐃⲆᐃᐃⲆⲆᐃⲆ: "img/day-accessory107.png",
    ΔⵠⵠⵠⲆΔⲆⵠⲆ: "img/night-accessory107.png",
    ΔⵠⲆΔⵠᐃⲆ: "img/day-accessory82.png",
    ΔⲆⵠᐃᐃⵠⲆ: "img/night-accessory82.png",
    ΔⵠⲆᐃΔᐃⵠ: "img/day-book0.png",
    ⲆⵠᐃⵠⵠⲆΔ: "img/night-book0.png",
    ⵠᐃᐃⵠⲆΔⵠ: "img/day-book1.png",
    ΔᐃⵠⲆΔΔΔ: "img/night-book1.png",
    ΔᐃⵠⲆⲆⵠⲆ: "img/day-book2.png",
    ΔᐃⲆᐃᐃΔⲆ: "img/night-book2.png",
    ᐃᐃⵠᐃⵠⵠⵠ: "img/day-book3.png",
    ⲆⵠΔᐃⵠᐃⲆ: "img/night-book3.png",
    ⵠΔⵠΔΔΔⵠ: "img/day-book4.png",
    ΔⵠⵠΔΔᐃⵠ: "img/night-book4.png",
    ᐃⵠΔᐃᐃΔᐃ: "img/day-book5.png",
    ᐃΔᐃⵠⵠⵠᐃ: "img/night-book5.png",
    ⲆⵠΔⲆⵠΔⲆ: "img/day-book6.png",
    ⲆⲆⲆⵠⵠΔΔ: "img/night-book6.png",
    ᐃⲆᐃᐃᐃⲆᐃ: "img/day-book7.png",
    ᐃⵠᐃⵠΔΔΔ: "img/night-book7.png",
    ᐃᐃᐃⲆΔⵠⵠ: "img/day-book8.png",
    ᐃⵠⵠᐃⵠΔⵠ: "img/night-book8.png",
    ᐃΔΔⵠⵠⵠᐃ: "img/day-book9.png",
    ᐃⵠⲆΔⵠᐃⲆ: "img/night-book9.png",
    ⵠᐃⵠᐃΔⲆⵠ: "img/day-book10.png",
    ⲆᐃᐃΔⵠⲆΔ: "img/night-book10.png",
    ⲆΔᐃⵠⲆΔΔ: "img/day-book11.png",
    ᐃⲆⵠⲆⵠᐃⵠ: "img/night-book11.png",
    ⲆⵠᐃⵠⲆᐃⵠ: "img/day-book12.png",
    ᐃⲆⲆⲆⵠᐃΔ: "img/night-book12.png",
    ⲆⵠᐃΔᐃᐃⲆ: "img/day-book13.png",
    ᐃⲆⲆⲆΔⲆⲆ: "img/night-book13.png",
    ⵠΔᐃΔⵠΔᐃ: "img/day-book14.png",
    ⵠᐃΔᐃΔᐃⲆ: "img/night-book14.png",
    ΔΔⵠᐃⵠΔⲆ: "img/day-book15.png",
    ᐃᐃΔⲆⵠⲆᐃ: "img/night-book15.png",
    ᐃⵠⵠⲆᐃΔᐃ: "img/day-book16.png",
    ⲆᐃⲆⲆΔⵠⲆ: "img/night-book16.png",
    ΔⵠⲆⲆΔᐃΔ: "img/day-book17.png",
    ⲆⵠⲆⵠᐃᐃⲆ: "img/night-book17.png",
    ᐃᐃⲆΔΔΔᐃ: "img/day-book18.png",
    ⲆᐃⵠΔᐃᐃᐃ: "img/night-book18.png",
    ⲆⵠΔᐃΔⵠΔ: "img/day-book19.png",
    ⲆⲆⵠⵠᐃⲆⵠ: "img/night-book19.png",
    ᐃⵠᐃᐃⲆⵠⲆ: "img/day-book20.png",
    ⵠⵠⵠᐃΔⲆΔ: "img/night-book20.png",
    ᐃⵠⵠⵠᐃᐃᐃ: "img/day-book21.png",
    ᐃΔΔⵠᐃΔΔ: "img/night-book21.png",
    ⵠⲆᐃⵠΔⲆⲆ: "img/day-book22.png",
    ⵠⵠᐃᐃΔⵠⲆ: "img/night-book22.png",
    ᐃⲆᐃᐃΔΔΔ: "img/day-book23.png",
    ⵠⵠᐃⵠΔᐃⲆ: "img/night-book23.png",
    ᐃΔΔⲆᐃᐃΔ: "img/day-book24.png",
    ⵠⲆᐃⵠᐃᐃᐃ: "img/night-book24.png",
    ⲆᐃΔΔΔΔΔ: "img/day-book25.png",
    ⲆⲆⵠᐃⲆᐃᐃ: "img/night-book25.png",
    ⵠⵠΔᐃᐃᐃᐃ: "img/day-book26.png",
    ΔΔΔⵠΔᐃⵠ: "img/night-book26.png",
    ⵠⲆⵠⲆⵠⲆⵠ: "img/day-book27.png",
    ⲆⲆⵠⵠⵠⵠⵠ: "img/night-book27.png",
    ᐃⲆⵠᐃᐃΔⵠ: "img/day-book28.png",
    ΔⵠⲆΔᐃⵠΔ: "img/night-book28.png",
    ⲆⲆⲆᐃΔⵠⵠ: "img/day-book29.png",
    ⲆΔⵠⵠᐃⲆⵠ: "img/night-book29.png",
    ΔⲆⲆⵠⵠⲆᐃ: "img/day-book30.png",
    ⲆᐃⵠⲆⵠΔⵠ: "img/night-book30.png",
    ᐃⵠⵠⲆⵠᐃᐃ: "img/day-book31.png",
    ⵠⵠᐃᐃᐃⲆⵠ: "img/night-book31.png",
    ᐃⵠⲆⲆΔᐃΔ: "img/day-book32.png",
    ⲆᐃⵠΔⲆΔⵠ: "img/night-book32.png",
    ΔⵠᐃΔᐃΔⲆ: "img/day-book33.png",
    ⵠᐃΔⵠΔᐃΔ: "img/night-book33.png",
    ⲆᐃᐃⲆⲆⲆⵠ: "img/day-book34.png",
    ⲆΔΔΔⵠⲆᐃ: "img/night-book34.png",
    ⲆΔⲆᐃΔᐃⲆ: "img/day-book35.png",
    ⵠⲆⲆⵠΔᐃΔ: "img/night-book35.png",
    ΔⲆᐃⵠⵠⵠᐃ: "img/day-book36.png",
    ΔᐃⲆΔᐃⲆⵠ: "img/night-book36.png",
    ᐃΔᐃⲆⵠⵠᐃⲆΔ: "img/day-book37.png",
    ᐃΔΔΔⲆᐃᐃΔⵠ: "img/night-book37.png",
    ⲆⲆⵠΔΔⵠⲆ: "img/day-book38.png",
    ΔΔⵠⲆΔΔᐃ: "img/night-book38.png",
    ΔΔⲆⲆⵠⵠᐃ: "img/day-book39.png",
    ᐃⲆΔⲆⲆⲆⵠ: "img/night-book39.png",
    ᐃΔⲆᐃⲆᐃΔ: "img/day-book40.png",
    ᐃⵠⲆⵠᐃᐃⲆ: "img/night-book40.png",
    ⲆᐃΔᐃⲆᐃⵠ: "img/day-book41.png",
    ΔⵠᐃΔᐃⲆⵠ: "img/night-book41.png",
    ⵠᐃΔᐃⵠⲆⲆ: "img/day-book42.png",
    ᐃΔΔⲆΔᐃⵠ: "img/night-book42.png",
    ⲆᐃᐃⵠΔⲆΔ: "img/day-book43.png",
    ⲆᐃᐃⲆⵠΔⲆ: "img/night-book43.png",
    ᐃⲆⲆⲆΔᐃΔ: "img/day-book44.png",
    ⵠΔⲆᐃᐃⲆᐃ: "img/night-book44.png",
    ᐃⵠⵠᐃᐃᐃⲆ: "img/day-book45.png",
    ᐃⵠⵠⵠⲆΔΔ: "img/night-book45.png",
    ⵠΔⲆⲆΔᐃᐃ: "img/day-book46.png",
    ⲆⲆΔΔΔᐃᐃ: "img/night-book46.png",
    ᐃⲆⵠⲆⵠⲆⲆ: "img/day-book47.png",
    ⵠΔᐃᐃΔΔⵠ: "img/night-book47.png",
    ᐃⵠᐃΔⵠΔᐃ: "img/day-book48.png",
    ⵠΔᐃΔⲆⵠᐃ: "img/night-book48.png",
    ΔⲆΔΔᐃΔⵠ: "img/day-book49.png",
    ⵠⲆᐃⵠΔⲆⵠ: "img/night-book49.png",
    ΔⵠᐃⲆⵠⵠΔ: "img/day-book50.png",
    ⲆΔᐃⲆⲆⲆᐃ: "img/night-book50.png",
    ⲆΔⵠᐃᐃⲆⲆ: "img/day-crate1.png",
    ΔⵠⵠⲆᐃⲆⵠ: "img/night-crate1.png",
    ᐃᐃᐃᐃΔⵠᐃ: "img/day-crate2.png",
    ⵠΔᐃⲆᐃⵠΔ: "img/night-crate2.png",
    ⵠᐃᐃᐃᐃⵠᐃ: "img/day-crate3.png",
    ⲆⵠΔⵠⵠⲆΔ: "img/night-crate3.png",
    ⲆΔᐃΔΔᐃⲆ: "img/day-crate4.png",
    ΔΔⲆΔᐃⵠᐃ: "img/night-crate4.png",
    ᐃⵠⲆⲆᐃᐃⵠ: "img/day-crate5.png",
    ᐃⵠⲆⲆΔᐃᐃ: "img/night-crate5.png",
    ⵠⵠⲆⲆᐃⵠΔ: "img/day-crate6.png",
    ⲆⵠⲆᐃΔⵠⵠ: "img/night-crate6.png",
    ᐃⲆⲆΔΔⲆᐃ: "img/day-crate7.png",
    ᐃⵠⲆᐃΔⵠⵠ: "img/night-crate7.png",
    ⲆⵠᐃⵠⲆⲆᐃ: "img/day-crate8.png",
    ⲆⵠⵠᐃΔⲆⵠ: "img/night-crate8.png",
    ⲆᐃⲆⲆΔᐃΔ: "img/day-crate9.png",
    ΔⲆⵠΔⵠΔⵠ: "img/night-crate9.png",
    ΔⵠⵠⲆⵠΔⲆ: "img/day-crate10.png",
    ΔΔⵠΔᐃⲆⵠ: "img/night-crate10.png",
    ΔΔᐃᐃⲆᐃⲆ: "img/day-crate11.png",
    ⵠᐃⵠⵠᐃᐃⲆ: "img/night-crate11.png",
    ᐃⵠᐃᐃⲆⵠⵠ: "img/day-crate12.png",
    ᐃⵠⵠⵠⵠⲆⲆ: "img/night-crate12.png",
    ⲆⲆᐃⲆⲆⲆⵠ: "img/day-crate13.png",
    ⲆⵠΔᐃⵠΔΔ: "img/night-crate13.png",
    ⵠⵠΔⲆΔⵠⲆ: "img/day-crate14.png",
    ΔᐃᐃⲆᐃΔⵠ: "img/night-crate14.png",
    ⵠᐃΔⵠΔⵠΔ: "img/day-crate15.png",
    ⲆⵠⲆⲆⲆⵠⵠ: "img/night-crate15.png",
    ᐃᐃⵠⲆⲆΔⲆ: "img/day-crate16.png",
    ᐃⵠⲆⲆΔⲆⲆ: "img/night-crate16.png",
    ⲆⲆᐃⵠᐃⲆΔ: "img/day-crate17.png",
    ΔΔΔΔΔⲆⲆ: "img/night-crate17.png",
    ᐃΔᐃⵠΔᐃΔ: "img/day-crate18.png",
    ⵠΔⲆΔⲆⵠΔ: "img/night-crate18.png",
    ⲆⲆⲆᐃⵠΔᐃ: "img/day-crate19.png",
    Ⲇᐃᐃᐃⵠⵠᐃ: "img/night-crate19.png",
    ᐃⵠΔⲆᐃΔΔ: "img/day-crate20.png",
    ΔⵠⲆΔⵠΔⲆ: "img/night-crate20.png",
    ⲆΔⲆᐃΔΔΔ: "img/day-crate21.png",
    ΔᐃΔⲆΔⵠⵠ: "img/night-crate21.png",
    ⵠⲆⵠⲆᐃⲆΔ: "img/day-crate22.png",
    ⲆΔⲆΔⵠⲆⵠ: "img/night-crate22.png",
    ⲆⲆΔⵠⲆΔᐃ: "img/day-crate23.png",
    ⲆⲆΔᐃΔⲆᐃ: "img/night-crate23.png",
    ⲆⵠΔⲆⲆⵠⵠ: "img/day-crate24.png",
    ΔᐃⵠⲆᐃⲆᐃ: "img/night-crate24.png",
    ⵠⲆⲆΔⲆⵠᐃ: "img/day-crate25.png",
    ⵠⵠΔΔΔΔΔ: "img/night-crate25.png",
    ⵠⲆᐃⲆᐃⲆᐃ: "img/day-crate26.png",
    ⲆⵠᐃⲆᐃᐃᐃ: "img/night-crate26.png",
    ⵠΔΔᐃΔᐃⵠ: "img/day-crate27.png",
    ⵠⲆᐃᐃⲆⲆᐃ: "img/night-crate27.png",
    ⲆⲆⵠΔⲆᐃΔ: "img/day-crate28.png",
    ᐃⵠⲆᐃⵠᐃⲆ: "img/night-crate28.png",
    ⲆⲆⵠΔᐃⲆⲆ: "img/day-crate29.png",
    ⲆⵠⵠΔᐃΔᐃ: "img/night-crate29.png",
    ΔΔⵠⵠΔΔᐃ: "img/day-crate30.png",
    ⵠⲆⵠΔⲆΔᐃ: "img/night-crate30.png",
    ΔᐃⵠⵠⲆⲆᐃ: "img/day-crate31.png",
    ΔⵠⲆⵠⵠΔᐃ: "img/night-crate31.png",
    ⵠΔΔᐃΔⲆᐃ: "img/day-crate32.png",
    ⲆᐃᐃΔⲆΔⵠ: "img/night-crate32.png",
    ⲆᐃΔⲆΔᐃᐃ: "img/day-crate33.png",
    ⲆⵠᐃⲆⵠΔⵠ: "img/night-crate33.png",
    ⵠᐃΔⲆⵠⲆⵠ: "img/day-crate34.png",
    ΔⵠᐃⲆⲆⲆⲆ: "img/night-crate34.png",
    ⲆⵠⵠⵠⵠΔⲆ: "img/day-crate35.png",
    ⲆⲆᐃᐃⵠᐃⲆ: "img/night-crate35.png",
    ⵠⵠᐃΔⵠΔⲆ: "img/day-crate36.png",
    ⵠⲆⵠᐃᐃᐃⵠ: "img/night-crate36.png",
    ᐃᐃⲆᐃᐃΔᐃ: "img/day-crate37.png",
    ⲆᐃᐃᐃᐃⲆⵠ: "img/night-crate37.png",
    ΔᐃᐃⵠⲆᐃⲆ: "img/day-crate38.png",
    ᐃᐃⵠⵠΔΔⵠ: "img/night-crate38.png",
    ΔⲆΔΔⵠⲆΔ: "img/day-crate39.png",
    ⲆΔⲆⵠΔⲆΔ: "img/night-crate39.png",
    ΔᐃⵠⵠΔⵠⵠ: "img/day-crate40.png",
    ᐃΔᐃⲆᐃⵠᐃ: "img/night-crate40.png",
    ΔΔᐃⲆᐃΔⵠ: "img/day-crate41.png",
    ⲆΔⲆⵠᐃΔⵠ: "img/night-crate41.png",
    ⲆⲆΔᐃⵠΔᐃ: "img/day-crate42.png",
    ᐃⵠⲆΔⲆΔⲆ: "img/night-crate42.png",
    ᐃᐃᐃⵠⲆⵠᐃ: "img/day-crate43.png",
    ⲆⵠⲆᐃⲆΔᐃ: "img/night-crate43.png",
    ⲆⵠΔΔᐃⵠΔ: "img/day-crate44.png",
    ⵠⲆΔⵠⲆⲆᐃ: "img/night-crate44.png",
    ΔⵠΔᐃⵠⲆⲆ: "img/day-crate45.png",
    ΔⵠⵠⵠⵠⲆΔ: "img/night-crate45.png",
    ᐃⵠⲆⵠⵠⵠΔ: "img/day-crate46.png",
    ⲆΔᐃⵠᐃᐃΔ: "img/night-crate46.png",
    ⲆⲆⲆⵠᐃⲆⵠ: "img/day-crate47.png",
    ⵠⲆΔᐃⲆⵠᐃ: "img/night-crate47.png",
    ⲆΔⲆᐃⲆᐃⵠ: "img/day-crate48.png",
    ⵠᐃᐃᐃⲆⵠⲆ: "img/night-crate48.png",
    ⵠΔⵠΔΔᐃⵠ: "img/day-crate49.png",
    ⵠⵠⲆⲆᐃⲆⵠ: "img/night-crate49.png",
    ⵠⲆⲆⵠⲆⲆⲆ: "img/day-crate50.png",
    ⲆⲆᐃⲆⲆᐃⵠ: "img/night-crate50.png",
    ⵠᐃⲆΔΔⲆᐃ: "img/day-crate51.png",
    ⲆΔΔΔΔⵠⲆ: "img/night-crate51.png",
    ᐃΔⲆⲆΔⲆᐃ: "img/day-crate52.png",
    ΔᐃΔⲆΔΔⲆ: "img/night-crate52.png",
    ᐃⲆΔⲆᐃⲆΔ: "img/day-crate53.png",
    ᐃⲆᐃⲆⵠΔΔ: "img/night-crate53.png",
    ΔΔⲆⵠᐃᐃΔ: "img/day-crate54.png",
    ⲆΔᐃΔⵠⲆᐃ: "img/night-crate54.png",
    ΔΔᐃⲆΔⵠᐃ: "img/day-crate55.png",
    ΔΔΔᐃⲆᐃⲆ: "img/night-crate55.png",
    ᐃⲆⲆᐃⵠⵠᐃ: "img/day-crate56.png",
    ⵠⵠⲆⲆⵠⵠⵠ: "img/night-crate56.png",
    ᐃⵠᐃΔΔⲆᐃ: "img/day-crate57.png",
    ⵠᐃⵠⲆⵠⲆⵠ: "img/night-crate57.png",
    ΔᐃⲆⲆⲆⲆⵠ: "img/day-crate58.png",
    ⵠⲆΔⲆΔⲆΔ: "img/night-crate58.png",
    ⵠᐃⲆⵠᐃⵠⵠ: "img/day-crate59.png",
    ᐃⵠⲆᐃᐃᐃΔ: "img/night-crate59.png",
    ᐃᐃⵠᐃⲆΔΔ: "img/day-crate60.png",
    ⵠᐃᐃⲆᐃᐃⵠ: "img/night-crate60.png",
    ⲆᐃⲆⲆⲆⲆⲆ: "img/day-crate61.png",
    ⲆⵠΔᐃⲆⲆⵠ: "img/night-crate61.png",
    ᐃᐃᐃΔⵠⲆΔ: "img/day-crate62.png",
    ⵠⵠⲆΔⲆⵠᐃ: "img/night-crate62.png",
    ΔᐃⵠⲆⲆᐃᐃ: "img/day-crate63.png",
    ΔⲆⵠⵠᐃⵠᐃ: "img/night-crate63.png",
    ⵠⲆᐃΔⲆᐃⵠ: "img/day-crate64.png",
    ⵠⲆⲆⲆΔⲆⵠ: "img/night-crate64.png",
    ΔᐃⲆᐃΔΔᐃ: "img/day-crate65.png",
    ⵠᐃΔⲆⲆⵠⲆ: "img/night-crate65.png",
    ⲆΔⲆⵠᐃⲆΔ: "img/day-crate66.png",
    ⲆⵠⲆΔⵠΔⵠ: "img/night-crate66.png",
    ⲆΔⵠᐃⲆᐃⵠ: "img/day-crate67.png",
    ⲆⵠⲆⵠᐃΔⲆ: "img/night-crate67.png",
    ⵠⲆᐃᐃᐃⲆΔ: "img/day-crate68.png",
    ΔⵠΔᐃΔᐃΔ: "img/night-crate68.png",
    ⲆⵠᐃⵠΔⵠⲆ: "img/day-crate69.png",
    ⲆⵠⵠⲆⵠⵠΔ: "img/night-crate69.png",
    ⲆⵠⵠⲆⲆⲆⵠ: "img/day-crate70.png",
    ᐃᐃⵠΔΔⵠⵠ: "img/night-crate70.png",
    ΔΔᐃᐃΔⵠΔ: "img/day-crate71.png",
    ⵠⵠⲆⵠⵠⵠᐃ: "img/night-crate71.png",
    ᐃⲆⲆⵠⵠΔᐃ: "img/day-crate72.png",
    ⵠΔᐃᐃΔⲆᐃ: "img/night-crate72.png",
    ΔΔᐃᐃᐃⲆᐃ: "img/day-crate73.png",
    ᐃⵠᐃᐃⵠᐃᐃ: "img/night-crate73.png",
    ᐃⵠΔΔᐃⲆᐃ: "img/day-crate74.png",
    ⵠⲆᐃᐃΔⵠΔ: "img/night-crate74.png",
    ⲆⵠΔⲆⲆᐃⲆ: "img/day-crate75.png",
    ⲆⲆⵠᐃΔᐃᐃ: "img/night-crate75.png",
    ᐃᐃᐃᐃⵠⵠΔ: "img/day-crate76.png",
    ⵠΔⲆⵠⲆⲆΔ: "img/night-crate76.png",
    ΔᐃⲆⵠⲆᐃᐃ: "img/day-crate77.png",
    ΔⵠⵠΔᐃⵠⵠ: "img/night-crate77.png",
    ⲆΔΔⵠⲆᐃᐃ: "img/day-crate78.png",
    ΔΔΔⵠⵠⵠⲆ: "img/night-crate78.png",
    ᐃΔᐃΔⵠⵠᐃ: "img/day-crate79.png",
    ᐃⲆΔⵠΔⲆⵠ: "img/night-crate79.png",
    ΔᐃⲆᐃⲆⵠⵠ: "img/day-herb0.png",
    ΔΔΔⲆⵠΔΔ: "img/day-herb1.png",
    ΔⲆⲆⵠᐃΔⲆ: "img/day-herb2.png",
    ⲆⵠⲆⲆᐃⲆΔ: "img/day-herb3.png",
    ⵠᐃⲆᐃⵠⵠⵠ: "img/day-herb4.png",
    ⵠⵠⲆᐃᐃⲆⵠ: "img/day-herb5.png",
    ⲆⲆⲆᐃᐃⵠΔ: "img/day-herb6.png",
    ΔᐃⲆᐃΔΔⲆ: "img/day-herb7.png",
    ΔᐃᐃⲆⲆΔⲆ: "img/day-herb8.png",
    ΔᐃⲆⲆⵠᐃᐃ: "img/day-herb9.png",
    ΔⲆⵠⲆⲆⵠΔ: "img/day-herb10.png",
    ⲆΔᐃᐃⲆᐃᐃ: "img/day-herb11.png",
    ⲆⵠⵠΔᐃⲆᐃ: "img/day-herb12.png",
    ⵠᐃⲆⲆⵠᐃⵠ: "img/day-herb13.png",
    ⲆΔⲆΔᐃⵠᐃ: "img/day-herb14.png",
    ΔΔⵠⵠᐃⲆⲆ: "img/day-herb15.png",
    ΔΔⲆⲆⵠᐃⵠ: "img/day-shell0.png",
    ⵠᐃᐃΔᐃⲆⲆ: "img/day-shell1.png",
    ᐃⵠΔΔΔᐃⵠ: "img/day-shell2.png",
    ⵠⲆⲆⲆᐃᐃⵠ: "img/day-leaf1.png",
    ᐃⵠΔⵠᐃⲆᐃ: "img/day-leaf2.png",
    ᐃΔⲆΔᐃⲆΔ: "img/day-leaf3.png",
    ⵠⲆΔΔᐃΔⲆ: "img/day-leaf4.png",
    ᐃⵠⵠⲆΔΔΔ: "img/day-leaf5.png",
    ⲆⲆⵠⵠⲆⲆΔ: "img/day-leaf6.png",
    ⵠΔⵠⵠΔⵠⲆ: "img/day-leaf7.png",
    ᐃᐃᐃⵠⲆΔΔ: "img/day-leaf8.png",
    ΔΔⲆⵠᐃⵠⵠ: "img/day-rock0.png",
    ᐃⲆᐃⵠΔⵠⵠ: "img/day-rock1.png",
    ⲆΔᐃΔⲆᐃᐃ: "img/day-rock2.png",
    ΔΔᐃⵠᐃᐃⵠ: "img/day-rock3.png",
    ⵠⵠΔΔΔⲆⵠ: "img/day-rock4.png",
    ᐃᐃᐃΔⲆⵠΔ: "img/day-rock5.png",
    ᐃⲆΔᐃΔⵠⲆ: "img/day-rock6.png",
    ΔΔⲆΔΔⲆⲆ: "img/day-rock7.png",
    ⵠᐃⵠΔΔⵠⵠ: "img/day-rock8.png",
    ⵠᐃⵠⲆⲆΔⵠ: "img/day-rock9.png",
    ᐃⲆΔᐃΔΔᐃ: "img/day-rock10.png",
    ᐃΔΔᐃΔΔⵠ: "img/day-rock11.png",
    ⲆⵠΔⲆᐃⵠⵠ: "img/day-rock12.png",
    ⵠᐃⵠⵠⲆⲆⵠ: "img/day-rock13.png",
    ΔΔⵠᐃΔᐃⲆ: "img/day-flower1.png",
    ⵠΔᐃⲆⵠᐃⲆ: "img/day-flower2.png",
    ⵠⲆⵠⵠΔⲆΔ: "img/day-flower3.png",
    ⲆⲆᐃΔⵠᐃΔ: "img/day-flower4.png",
    ⲆΔⲆᐃΔⵠⲆ: "img/day-flower5.png",
    ⵠⲆⲆⲆᐃᐃⲆ: "img/day-flower6.png",
    ⵠᐃⵠᐃⵠᐃΔ: "img/day-flower7.png",
    ⵠⲆⵠⲆΔⲆⵠ: "img/day-flower8.png",
    ΔΔΔᐃᐃⵠᐃ: "img/day-flower9.png",
    ⲆⲆⲆΔⵠᐃⵠ: "img/day-herb16.png",
    ΔⵠΔⲆΔᐃⵠ: "img/day-herb17.png",
    ΔⵠⵠΔΔΔΔ: "img/day-herb18.png",
    ⵠⵠⵠⵠⲆⲆᐃ: "img/day-herb19.png",
    ᐃᐃⵠΔⵠΔⵠ: "img/day-herb20.png",
    ⵠΔⲆⲆⲆΔΔ: "img/day-herb21.png",
    ΔⲆΔⲆⵠⵠΔ: "img/night-herb0.png",
    ΔΔᐃΔⲆⲆΔ: "img/night-herb1.png",
    ⵠΔᐃᐃⵠΔΔ: "img/night-herb2.png",
    ᐃⲆⵠᐃⲆⵠⵠ: "img/night-herb3.png",
    ⲆΔⲆⲆΔⲆΔ: "img/night-herb4.png",
    ⲆΔⲆⵠⵠⲆⲆ: "img/night-herb5.png",
    ΔⲆⵠⲆΔΔΔ: "img/night-herb6.png",
    ᐃᐃⲆⵠᐃᐃⵠ: "img/night-herb7.png",
    ᐃΔᐃⲆⵠⵠⵠ: "img/night-herb8.png",
    ᐃΔⵠΔᐃⵠⲆ: "img/night-herb9.png",
    ᐃΔΔΔⵠⵠⵠ: "img/night-herb10.png",
    ΔᐃᐃⵠΔⲆΔ: "img/night-herb11.png",
    ⲆⵠΔᐃⵠΔⵠ: "img/night-herb12.png",
    ᐃᐃⲆᐃⲆⵠΔ: "img/night-herb13.png",
    ᐃⲆⲆⲆⵠⲆΔ: "img/night-herb14.png",
    ΔᐃⲆΔᐃΔᐃ: "img/night-herb15.png",
    ⵠⲆΔΔⲆⵠⲆ: "img/night-shell0.png",
    ΔⲆᐃⲆⵠΔᐃ: "img/night-shell1.png",
    ΔΔⲆᐃᐃΔᐃ: "img/night-shell2.png",
    ΔΔⵠⲆⲆⵠⲆ: "img/night-leaf1.png",
    ΔΔⵠΔᐃⲆⲆ: "img/night-leaf2.png",
    ΔΔΔᐃΔⲆᐃ: "img/night-leaf3.png",
    ᐃΔΔⲆᐃⵠⵠ: "img/night-leaf4.png",
    ᐃᐃΔΔΔⵠⵠ: "img/night-leaf5.png",
    ⵠᐃΔᐃᐃᐃⵠ: "img/night-leaf6.png",
    ⵠⵠᐃᐃᐃⵠⲆ: "img/night-leaf7.png",
    ⲆⵠⲆⲆᐃⵠΔ: "img/night-leaf8.png",
    ⵠΔᐃⵠΔᐃᐃ: "img/night-rock0.png",
    ᐃⲆᐃⵠⲆⵠⵠ: "img/night-rock1.png",
    ᐃᐃᐃⵠⵠΔΔ: "img/night-rock2.png",
    ᐃⵠᐃᐃᐃΔⲆ: "img/night-rock3.png",
    ᐃⲆᐃΔⵠᐃⲆ: "img/night-rock4.png",
    ΔᐃⲆⵠⵠⲆⲆ: "img/night-rock5.png",
    ⲆⲆΔᐃΔⲆΔ: "img/night-rock6.png",
    ΔⲆⵠΔⵠΔΔ: "img/night-rock7.png",
    ⲆᐃⵠⲆΔΔⲆ: "img/night-rock8.png",
    ⲆⲆΔΔᐃᐃⲆ: "img/night-rock9.png",
    ⵠⵠⲆΔΔᐃⲆ: "img/night-rock10.png",
    ΔΔΔⲆᐃⵠⲆ: "img/night-rock11.png",
    ⵠⲆⲆΔΔᐃⲆ: "img/night-rock12.png",
    ᐃⲆⵠⵠⵠΔⲆ: "img/night-rock13.png",
    ⵠᐃⵠⵠⲆᐃΔ: "img/night-flower1.png",
    ᐃΔⲆᐃⵠᐃΔ: "img/night-flower2.png",
    ΔⲆΔⲆⲆΔⲆ: "img/night-flower3.png",
    ΔⵠᐃΔᐃⵠᐃ: "img/night-flower4.png",
    ᐃⵠΔⵠΔᐃⵠ: "img/night-flower5.png",
    ⲆⲆⵠⲆⵠⵠⲆ: "img/night-flower6.png",
    ΔᐃᐃⲆⵠΔⲆ: "img/night-flower7.png",
    ΔΔᐃΔⵠⲆᐃ: "img/night-flower8.png",
    ⵠⵠᐃᐃⵠⲆΔ: "img/night-flower9.png",
    ⲆⵠⲆΔⲆⵠΔ: "img/night-herb16.png",
    ⵠΔⵠⵠΔⲆΔ: "img/night-herb17.png",
    ⲆⵠᐃᐃⵠⲆⲆ: "img/night-herb18.png",
    ᐃᐃⵠᐃⵠⲆΔ: "img/night-herb19.png",
    ΔⵠⲆΔΔⲆΔ: "img/night-herb20.png",
    ⵠⲆⵠⲆΔᐃⲆ: "img/night-herb21.png",
    ᐃⵠⵠΔᐃΔΔ: "img/day-river000-010-000.png",
    ⵠᐃⲆⲆΔᐃⲆ: "img/day-river000-010-010.png",
    ⵠⲆΔΔᐃⵠΔ: "img/day-river000-011-000.png",
    ⲆᐃⵠⵠⵠⲆⵠ: "img/day-river000-011-010.png",
    ⲆⲆᐃⵠᐃⵠⲆ: "img/day-river000-011-011.png",
    ΔⲆⵠⲆΔᐃⲆ: "img/day-river000-110-000.png",
    ᐃⵠΔⲆⵠΔⵠ: "img/day-river000-110-010.png",
    ⵠᐃΔⵠⵠΔᐃ: "img/day-river000-110-110.png",
    ⵠΔΔⵠⲆᐃΔ: "img/day-river000-111-000.png",
    ᐃΔΔᐃⲆᐃⵠ: "img/day-river000-111-010.png",
    ⵠⲆᐃⵠΔⵠⵠ: "img/day-river000-111-011.png",
    ΔΔⵠⲆΔⵠΔ: "img/day-river000-111-110.png",
    ⵠⲆᐃⲆⵠΔⵠ: "img/day-river000-111-111.png",
    ᐃΔⵠⲆᐃⲆᐃ: "img/day-river010-010-000.png",
    ⵠⲆΔⵠΔⵠᐃ: "img/day-river010-010-010.png",
    ΔⵠⵠⲆᐃᐃᐃ: "img/day-river010-011-000.png",
    ⵠⲆΔᐃᐃΔΔ: "img/day-river010-011-010.png",
    ᐃΔᐃᐃⵠΔΔ: "img/day-river010-011-011.png",
    ⵠⵠⲆⲆⲆΔⵠ: "img/day-river010-110-000.png",
    ⵠⵠⲆΔᐃᐃⲆ: "img/day-river010-110-010.png",
    Ⲇⵠⵠⵠᐃⵠⵠ: "img/day-river010-110-110.png",
    ΔᐃΔⲆᐃΔⲆ: "img/day-river010-111-000.png",
    ⵠᐃⲆⲆᐃⵠⲆ: "img/day-river010-111-010.png",
    ⲆⵠΔⲆⵠⵠⲆ: "img/day-river010-111-011.png",
    ⵠⲆⵠΔΔᐃᐃ: "img/day-river010-111-110.png",
    ⲆⵠⵠΔⲆⲆᐃ: "img/day-river010-111-111.png",
    ⵠⵠⲆᐃⵠΔΔ: "img/day-river011-011-000.png",
    ΔᐃᐃⲆⵠⵠⵠ: "img/day-river011-011-010.png",
    ᐃⵠΔᐃΔΔᐃ: "img/day-river011-011-011.png",
    ⵠᐃΔΔᐃΔⲆ: "img/day-river011-111-000.png",
    ⲆⵠⵠⵠⵠⲆⵠ: "img/day-river011-111-010.png",
    ΔⲆΔⵠⵠⵠᐃ: "img/day-river011-111-011.png",
    ⵠⵠΔⲆⵠᐃⵠ: "img/day-river011-111-110.png",
    ΔᐃᐃⲆΔⵠⲆ: "img/day-river011-111-111.png",
    ⵠᐃⵠΔⵠⲆⲆ: "img/day-river110-110-000.png",
    ΔⲆⵠΔΔΔᐃ: "img/day-river110-110-010.png",
    ⵠⲆⵠⲆᐃΔⵠ: "img/day-river110-110-110.png",
    ⲆᐃⲆⲆᐃΔΔ: "img/day-river110-111-000.png",
    ᐃᐃⵠⵠⲆⲆᐃ: "img/day-river110-111-010.png",
    ΔⵠⵠΔΔⵠΔ: "img/day-river110-111-011.png",
    ⲆⵠⵠᐃⲆᐃᐃ: "img/day-river110-111-110.png",
    ⵠⵠⵠΔΔⵠΔ: "img/day-river110-111-111.png",
    ΔⵠⲆⲆΔᐃᐃ: "img/day-river111-111-011.png",
    ΔⵠᐃΔᐃⵠⲆ: "img/day-river111-111-110.png",
    ΔⵠⲆⲆΔᐃᐃ: "img/day-river111-111-011.png",
    ⲆΔⵠᐃⲆⲆΔ: "img/day-river111-111-000.png",
    ᐃⲆᐃⲆΔΔΔ: "img/day-river111-111-111.png",
    ⵠⲆⲆᐃᐃᐃⵠ: "img/day-river111-111-010.png",
    ᐃⵠᐃⲆᐃⵠᐃ: "img/night-river000-010-000.png",
    ⵠΔⲆΔΔᐃⲆ: "img/night-river000-010-010.png",
    ΔⵠⲆⵠᐃⲆⵠ: "img/night-river000-011-000.png",
    ΔⵠⲆⲆⲆᐃᐃ: "img/night-river000-011-010.png",
    ⵠⵠⲆⵠΔⵠⲆ: "img/night-river000-011-011.png",
    ᐃΔΔᐃᐃΔⵠ: "img/night-river000-110-000.png",
    ᐃⵠⵠⲆⲆⵠΔ: "img/night-river000-110-010.png",
    ᐃΔⵠΔᐃⲆⲆ: "img/night-river000-110-110.png",
    ⵠΔⵠΔᐃΔⲆ: "img/night-river000-111-000.png",
    ΔⲆΔΔⲆⲆⲆ: "img/night-river000-111-010.png",
    ᐃΔⲆⵠᐃⵠᐃ: "img/night-river000-111-011.png",
    ᐃᐃΔⵠⵠᐃᐃ: "img/night-river000-111-110.png",
    ⵠⵠⵠⲆᐃᐃⵠ: "img/night-river000-111-111.png",
    ⵠⲆⵠᐃᐃᐃⲆ: "img/night-river010-010-000.png",
    ⵠⲆΔⵠΔⵠⵠ: "img/night-river010-010-010.png",
    ᐃⲆΔⵠⲆⲆΔ: "img/night-river010-011-000.png",
    ⲆⵠⲆⲆΔΔⲆ: "img/night-river010-011-010.png",
    ⲆⵠᐃⲆΔⲆⵠ: "img/night-river010-011-011.png",
    ᐃΔⵠΔⵠⵠᐃ: "img/night-river010-110-000.png",
    ΔⲆΔΔΔΔⲆ: "img/night-river010-110-010.png",
    Ⲇⵠᐃᐃⵠⵠⵠ: "img/night-river010-110-110.png",
    ⵠⲆⵠᐃΔⲆΔ: "img/night-river010-111-000.png",
    ⵠᐃΔⲆⵠᐃⲆ: "img/night-river010-111-010.png",
    ΔⲆⲆᐃⵠⵠΔ: "img/night-river010-111-011.png",
    ⵠⵠⲆⵠⵠᐃᐃ: "img/night-river010-111-110.png",
    ΔΔΔᐃⵠᐃΔ: "img/night-river010-111-111.png",
    ΔΔΔᐃⲆΔⵠ: "img/night-river011-011-000.png",
    ΔᐃΔⵠΔⵠⲆ: "img/night-river011-011-010.png",
    ⲆⵠⲆΔᐃⲆᐃ: "img/night-river011-011-011.png",
    ⲆΔᐃᐃⵠᐃᐃ: "img/night-river011-111-000.png",
    ⲆᐃΔⲆᐃΔᐃ: "img/night-river011-111-010.png",
    ⲆⲆⵠⲆⵠᐃᐃ: "img/night-river011-111-011.png",
    ⵠΔᐃΔΔΔΔ: "img/night-river011-111-110.png",
    ᐃᐃⲆΔᐃⲆⵠ: "img/night-river011-111-111.png",
    ΔΔⵠⲆⵠⲆΔ: "img/night-river110-110-000.png",
    ΔⵠⵠᐃⵠⲆᐃ: "img/night-river110-110-010.png",
    ΔⵠⵠᐃⲆⲆᐃ: "img/night-river110-110-110.png",
    ΔⵠΔᐃⵠⵠⲆ: "img/night-river110-111-000.png",
    ⵠᐃᐃΔⵠΔΔ: "img/night-river110-111-010.png",
    ⲆⲆΔΔᐃⵠᐃ: "img/night-river110-111-011.png",
    ᐃᐃᐃⵠᐃⵠᐃ: "img/night-river110-111-110.png",
    ⵠΔⲆⵠⲆⵠΔ: "img/night-river110-111-111.png",
    ᐃΔᐃᐃΔΔⵠ: "img/night-river111-111-011.png",
    ᐃⲆⲆΔᐃⲆᐃ: "img/night-river111-111-110.png",
    ᐃΔᐃᐃΔΔⵠ: "img/night-river111-111-011.png",
    ⵠᐃⵠΔΔⲆΔ: "img/night-river111-111-000.png",
    ⵠΔⲆⵠⵠⲆⵠ: "img/night-river111-111-111.png",
    ΔᐃᐃΔΔⲆⲆ: "img/night-river111-111-010.png",
    ⵠᐃΔᐃⵠᐃΔ: "img/day-pebblecompo1.png",
    ΔΔⵠⲆᐃ: "img/day-pebblecompo2.png",
    ᐃⲆⵠΔⵠ: "img/day-pebblecompo3.png",
    ⲆⵠᐃΔᐃᐃᐃ: "img/day-pebblecompo4.png",
    ⵠΔⵠⲆΔ: "img/day-pebblecompo5.png",
    ᐃⵠᐃΔᐃ: "img/day-pebblecompo6.png",
    ΔⲆⵠⲆΔ: "img/day-pebblecompo7.png",
    ΔⵠΔⵠᐃⵠᐃ: "img/day-pebblecompo8.png",
    ⲆᐃⵠᐃⵠⲆΔ: "img/day-pebblecompo9.png",
    ⵠᐃⲆΔⵠᐃΔ: "img/day-pebblecompo10.png",
    ΔΔᐃΔⵠ: "img/day-pebblecompo11.png",
    ΔⵠⵠⵠⵠΔⲆ: "img/day-pebblecompo12.png",
    ⲆⵠᐃᐃᐃⲆΔ: "img/day-pebblecompo13.png",
    ΔᐃⲆⵠⲆⵠⵠ: "img/day-pebblecompo14.png",
    ⲆⲆᐃⵠⲆΔΔ: "img/day-pebblecompo15.png",
    ΔΔⵠᐃᐃⲆΔ: "img/day-pebblecompo16.png",
    ᐃⲆⲆⵠⵠ: "img/day-pebblecompo17.png",
    ⲆᐃⲆΔᐃⵠⵠ: "img/day-pebblecompo18.png",
    ΔΔΔᐃⵠΔⵠ: "img/day-pebblecompo19.png",
    ⲆΔⵠᐃᐃ: "img/day-pebblecompo20.png",
    ᐃΔΔΔΔ: "img/day-pebblecompo21.png",
    ⵠⲆΔΔΔⵠⲆ: "img/day-pebblecompo22.png",
    ᐃΔΔᐃΔᐃⲆ: "img/day-pebblecompo23.png",
    ⲆⲆⵠⵠΔⵠⵠ: "img/day-pebblecompo24.png",
    ᐃᐃᐃⵠΔ: "img/day-pebblecompo25.png",
    ᐃⵠⲆⵠⲆ: "img/day-pebblecompo26.png",
    ᐃⵠΔⲆΔΔⵠ: "img/day-pebblecompo27.png",
    ⲆⲆⵠⵠⲆ: "img/day-pebblecompo28.png",
    ᐃⵠⲆΔΔΔᐃ: "img/night-pebblecompo1.png",
    ⲆᐃΔᐃⵠ: "img/night-pebblecompo2.png",
    ⵠΔⲆⵠⵠ: "img/night-pebblecompo3.png",
    ⲆⲆᐃΔΔⲆⵠ: "img/night-pebblecompo4.png",
    ᐃⲆⵠᐃⲆ: "img/night-pebblecompo5.png",
    ᐃⲆᐃᐃⲆ: "img/night-pebblecompo6.png",
    ΔⲆⵠΔΔ: "img/night-pebblecompo7.png",
    ⲆⲆⵠᐃⲆⲆⵠ: "img/night-pebblecompo8.png",
    ⵠⲆᐃⲆᐃⵠΔ: "img/night-pebblecompo9.png",
    ⵠᐃᐃᐃⵠⲆⵠ: "img/night-pebblecompo10.png",
    ΔⲆᐃⲆᐃ: "img/night-pebblecompo11.png",
    ⵠⲆⲆΔᐃᐃΔ: "img/night-pebblecompo12.png",
    ᐃⲆΔⵠᐃⲆᐃ: "img/night-pebblecompo13.png",
    ⲆΔᐃΔⲆⵠⵠ: "img/night-pebblecompo14.png",
    ⵠᐃⲆⵠᐃΔᐃ: "img/night-pebblecompo15.png",
    ⵠΔΔⵠΔΔΔ: "img/night-pebblecompo16.png",
    ⵠⲆⲆᐃⲆ: "img/night-pebblecompo17.png",
    ⲆⵠⵠΔⲆⵠᐃ: "img/night-pebblecompo18.png",
    ᐃⵠΔΔⵠΔᐃ: "img/night-pebblecompo19.png",
    ᐃᐃᐃⵠⵠ: "img/night-pebblecompo20.png",
    ΔΔΔΔΔ: "img/night-pebblecompo21.png",
    ΔᐃⲆᐃᐃⲆⵠ: "img/night-pebblecompo22.png",
    ⲆⲆᐃⲆⵠΔⲆ: "img/night-pebblecompo23.png",
    ⵠΔᐃⲆⵠⲆᐃ: "img/night-pebblecompo24.png",
    ⲆΔⲆⵠᐃ: "img/night-pebblecompo25.png",
    ⲆⲆⵠⲆⵠ: "img/night-pebblecompo26.png",
    ᐃⵠᐃⵠⲆᐃᐃ: "img/night-pebblecompo27.png",
    ᐃᐃΔⲆᐃ: "img/night-pebblecompo28.png",
    ⵠⲆⵠᐃᐃⲆⵠ: "img/day-baby-mammoth.png",
    ᐃⲆⵠΔᐃⲆΔ: "img/day-baby-mammoth-tamed.png",
    ΔᐃⵠⲆⵠⵠᐃ: "img/day-baby-mammoth-angry.png",
    ⵠⲆΔΔⵠΔᐃ: "img/night-baby-mammoth.png",
    ⵠⵠᐃΔⵠⵠΔ: "img/night-baby-mammoth-tamed.png",
    ⵠⵠⵠΔⲆΔᐃ: "img/night-baby-mammoth-angry.png",
    ΔᐃⵠΔⲆᐃᐃ: "img/inv-mammoth-out.png",
    ᐃⲆⵠⲆΔᐃⵠ: "img/inv-mammoth-in.png",
    ᐃⲆᐃΔⲆᐃⵠ: "img/inv-mammoth-click.png",
    ΔΔΔⲆΔⲆⲆ: "img/hurt-baby-mammoth.png",
    ΔⲆΔᐃᐃᐃⵠ: "img/baby-mammoth-step.png",
    ᐃᐃΔⲆⲆⵠⲆ: "img/day-flower-hat.png",
    ᐃᐃⲆⵠⲆⵠⲆ: "img/night-flower-hat.png",
    ΔᐃⲆΔⲆᐃⵠ: "img/inv-flower-hat-out.png",
    ⵠⵠⵠΔᐃᐃⲆ: "img/inv-flower-hat-in.png",
    ᐃⲆΔⲆᐃⵠⲆ: "img/inv-flower-hat-click.png",
    ᐃΔΔⵠⲆⵠᐃ: "img/day-fur-hat.png",
    ΔⲆⵠᐃⲆⵠⲆ: "img/night-fur-hat.png",
    ᐃⲆⲆΔⲆᐃᐃ: "img/inv-fur-hat-out.png",
    ⵠᐃⲆⵠᐃⲆᐃ: "img/inv-fur-hat-in.png",
    ⵠⲆⲆᐃⵠⲆⵠ: "img/inv-fur-hat-click.png",
    ᐃᐃᐃⲆΔⲆⲆ: "img/day-mammoth.png",
    ⵠᐃΔΔⲆⲆΔ: "img/night-mammoth.png",
    ΔⲆᐃⲆᐃⵠⵠ: "img/hurt-mammoth.png",
    ΔⵠᐃᐃΔⲆⵠ: "img/inv-mammoth-fur-out.png",
    ΔΔᐃᐃⲆΔⲆ: "img/inv-mammoth-fur-in.png",
    ᐃⲆⲆᐃⵠⲆⲆ: "img/inv-mammoth-fur-click.png",
    ΔΔΔⵠᐃΔΔ: "img/inv-wood-bow-out.png",
    ⵠⲆⲆⲆΔⵠⲆ: "img/inv-wood-bow-in.png",
    ᐃᐃⲆᐃⵠΔΔ: "img/inv-wood-bow-click.png",
    ⵠⵠⲆΔᐃᐃΔ: "img/inv-wood-arrow-out.png",
    ⲆᐃⲆᐃⲆⲆᐃ: "img/inv-wood-arrow-in.png",
    ΔᐃⲆⲆΔΔΔ: "img/inv-wood-arrow-click.png",
    ⵠᐃⲆᐃᐃᐃⵠ: "img/day-wood-bow2.png",
    ΔⵠⵠᐃⲆΔᐃ: "img/night-wood-bow2.png",
    ⵠⵠⵠⵠⵠΔⵠ: "img/day-wood-arrow.png",
    ᐃΔᐃⲆⲆᐃⲆ: "img/night-wood-arrow.png",
    ⵠⵠᐃΔΔⵠⲆ: "img/inv-stone-bow-out.png",
    ⵠⵠⵠⵠⲆΔⵠ: "img/inv-stone-bow-in.png",
    ⵠⵠᐃΔΔⲆⵠ: "img/inv-stone-bow-click.png",
    ᐃⵠᐃΔⲆⲆᐃ: "img/inv-stone-arrow-out.png",
    ᐃΔⵠⵠᐃⵠⵠ: "img/inv-stone-arrow-in.png",
    ᐃⲆΔⲆⵠΔⵠ: "img/inv-stone-arrow-click.png",
    ⲆⲆⵠⲆⲆⲆⵠ: "img/day-stone-bow.png",
    ⵠⵠΔⵠΔⵠᐃ: "img/night-stone-bow.png",
    ΔⵠⵠⵠΔⵠᐃ: "img/day-stone-arrow.png",
    ⵠΔⵠΔᐃⲆⲆ: "img/night-stone-arrow.png",
    ⵠⲆΔⲆⲆΔᐃ: "img/inv-gold-bow-out.png",
    ⵠⵠΔⲆᐃᐃᐃ: "img/inv-gold-bow-in.png",
    ΔⲆⵠⲆᐃᐃⲆ: "img/inv-gold-bow-click.png",
    ⵠⲆⲆᐃᐃⵠⲆ: "img/inv-gold-arrow-out.png",
    ΔⵠΔΔⵠⲆᐃ: "img/inv-gold-arrow-in.png",
    ⲆᐃⵠⵠⵠⲆᐃ: "img/inv-gold-arrow-click.png",
    ⵠⵠᐃⵠⲆⵠΔ: "img/day-gold-bow.png",
    ⵠΔⲆⵠⵠⲆΔ: "img/night-gold-bow.png",
    ⲆΔⵠⵠᐃΔⵠ: "img/day-gold-arrow.png",
    ΔΔᐃⵠⲆΔⵠ: "img/night-gold-arrow.png",
    ΔᐃⲆᐃΔⲆΔ: "img/inv-diamond-bow-out.png",
    ΔⵠᐃⲆⵠΔᐃ: "img/inv-diamond-bow-in.png",
    ⵠΔⲆⲆⲆⵠⲆ: "img/inv-diamond-bow-click.png",
    ΔᐃΔΔᐃⲆᐃ: "img/inv-diamond-arrow-out.png",
    ⵠΔⲆⲆᐃᐃᐃ: "img/inv-diamond-arrow-in.png",
    ΔⲆᐃⵠΔΔⲆ: "img/inv-diamond-arrow-click.png",
    ⵠΔⲆⲆΔΔⲆ: "img/day-diamond-bow.png",
    ΔⲆⵠⵠⵠⵠᐃ: "img/night-diamond-bow.png",
    ⲆᐃᐃⵠⲆᐃΔ: "img/day-diamond-arrow.png",
    ᐃΔᐃΔᐃⲆⲆ: "img/night-diamond-arrow.png",
    ΔⵠᐃᐃⵠΔΔ: "img/inv-amethyst-bow-out.png",
    ⵠᐃⵠⵠⵠᐃΔ: "img/inv-amethyst-bow-in.png",
    ᐃⵠⲆᐃⲆⵠΔ: "img/inv-amethyst-bow-click.png",
    ᐃⲆΔⵠᐃⵠⵠ: "img/inv-amethyst-arrow-out.png",
    ΔΔΔⲆΔⵠⲆ: "img/inv-amethyst-arrow-in.png",
    ⵠⲆⲆⵠᐃᐃΔ: "img/inv-amethyst-arrow-click.png",
    ⲆⲆⲆⲆⵠⲆΔ: "img/day-amethyst-bow.png",
    ⲆⲆⵠⵠⵠⵠᐃ: "img/night-amethyst-bow.png",
    ΔⲆᐃⲆⲆⵠΔ: "img/day-amethyst-arrow.png",
    ᐃⵠᐃᐃΔΔⲆ: "img/night-amethyst-arrow.png",
    ⵠΔⲆᐃᐃΔⲆ: "img/inv-dragon-bow-out.png",
    ᐃⵠⵠΔᐃⲆⲆ: "img/inv-dragon-bow-in.png",
    ΔΔᐃᐃΔⵠⵠ: "img/inv-dragon-bow-click.png",
    ⵠⲆⵠΔⵠᐃΔ: "img/inv-dragon-arrow-out.png",
    ⵠᐃΔᐃΔⲆᐃ: "img/inv-dragon-arrow-in.png",
    ⵠΔⲆΔⲆᐃΔ: "img/inv-dragon-arrow-click.png",
    ⵠΔⵠᐃΔⲆᐃ: "img/day-dragon-bow.png",
    ᐃⵠΔⲆΔⵠᐃ: "img/night-dragon-bow.png",
    ᐃᐃⵠⲆⵠⵠᐃ: "img/day-dragon-arrow.png",
    ᐃΔΔⲆΔΔⲆ: "img/night-dragon-arrow.png",
    ᐃⵠⲆᐃⲆᐃᐃ: "img/inv-reidite-bow-out.png",
    ⵠⵠΔᐃᐃⵠⲆ: "img/inv-reidite-bow-in.png",
    ᐃⵠⵠⲆᐃΔⲆ: "img/inv-reidite-bow-click.png",
    ΔⵠⲆⲆᐃᐃⲆ: "img/inv-reidite-arrow-out.png",
    ⲆⵠᐃΔΔⵠⲆ: "img/inv-reidite-arrow-in.png",
    ⵠΔΔⵠΔΔⲆ: "img/inv-reidite-arrow-click.png",
    ᐃⲆΔⵠⲆⲆⲆ: "img/day-reidite-bow.png",
    ⲆΔⵠⲆⵠⲆΔ: "img/night-reidite-bow.png",
    ⵠⲆⵠᐃΔⵠΔ: "img/day-reidite-arrow.png",
    ⲆΔⵠⵠΔⲆⲆ: "img/night-reidite-arrow.png",
    ᐃⵠΔΔⲆⵠᐃ: "img/inv-wooden-axe-out.png",
    ΔⵠⲆᐃᐃⵠⵠ: "img/inv-wooden-axe-in.png",
    ᐃⵠⲆⵠᐃΔΔ: "img/inv-wooden-axe-click.png",
    ΔⵠΔΔΔΔⲆ: "img/day-wooden-axe.png",
    ᐃⲆⲆⲆΔⵠᐃ: "img/night-wooden-axe.png",
    ⲆⵠΔΔΔΔⲆ: "img/inv-stone-axe-out.png",
    ᐃᐃⲆᐃⵠᐃᐃ: "img/inv-stone-axe-in.png",
    ᐃΔⲆⵠΔΔⲆ: "img/inv-stone-axe-click.png",
    ᐃⵠⲆΔᐃΔΔ: "img/day-stone-axe.png",
    ⲆᐃᐃΔⲆⲆΔ: "img/night-stone-axe.png",
    ᐃΔⲆΔᐃⵠΔ: "img/inv-golden-axe-out.png",
    ⲆⲆⲆΔΔⵠΔ: "img/inv-golden-axe-in.png",
    ᐃᐃΔᐃⲆᐃΔ: "img/inv-golden-axe-click.png",
    ΔⵠⵠⵠΔⵠⲆⲆⲆ: "img/day-golden-axe.png",
    ⵠΔⲆⲆⵠⵠᐃⲆᐃ: "img/night-golden-axe.png",
    ΔΔΔᐃⵠⵠⵠⵠⵠ: "img/inv-diamond-axe-out.png",
    ΔΔⲆᐃⲆΔⵠᐃΔ: "img/inv-diamond-axe-in.png",
    ΔΔᐃΔⵠᐃⲆΔⲆ: "img/inv-diamond-axe-click.png",
    ᐃⵠᐃⵠⵠᐃᐃΔⲆ: "img/day-diamond-axe.png",
    ⲆΔⵠⲆᐃⵠᐃⵠΔ: "img/night-diamond-axe.png",
    ᐃⵠⵠⲆΔΔⵠᐃΔ: "img/inv-amethyst-axe-out.png",
    ⵠΔⲆΔⲆⲆⲆΔΔ: "img/inv-amethyst-axe-in.png",
    ⵠⵠᐃᐃⵠⵠⲆⲆᐃ: "img/inv-amethyst-axe-click.png",
    ᐃᐃᐃΔΔΔᐃᐃⵠ: "img/day-amethyst-axe.png",
    ⵠΔᐃᐃⲆΔᐃⵠⵠ: "img/night-amethyst-axe.png",
    ΔⵠⵠⵠΔⲆΔⵠⲆ: "img/inv-reidite-axe-out.png",
    ᐃⲆΔΔⲆⲆᐃⵠⵠ: "img/inv-reidite-axe-in.png",
    ΔⵠΔᐃⵠⵠΔⵠⲆ: "img/inv-reidite-axe-click.png",
    ΔⲆᐃⵠⲆᐃᐃΔᐃ: "img/day-reidite-axe.png",
    ⲆᐃΔΔⲆᐃᐃⲆⵠ: "img/night-reidite-axe.png",
    ᐃⵠⲆⲆᐃⵠΔ: "img/bandage-activated.png",
    ᐃᐃⲆⲆⵠᐃᐃ: "img/auto-feed.png",
    ΔⵠⵠⵠⵠⲆⵠ: "img/stop-regeneration.png",
    ⵠΔⵠΔΔⵠᐃ: "img/stop-regeneration2.png",
    ⲆⵠⲆΔᐃᐃⲆⵠᐃ: "img/day-wood-platform.png",
    ΔΔᐃⲆⵠⵠᐃΔⲆ: "img/night-wood-platform.png",
    ΔᐃΔⵠⲆΔⲆⵠⵠ: "img/inv-wood-platform-in.png",
    ᐃΔΔΔⲆᐃᐃⵠⲆ: "img/inv-wood-platform-out.png",
    ⲆΔⲆᐃⲆⵠⵠⲆᐃ: "img/inv-wood-platform-click.png",
    ΔᐃⵠΔⲆΔᐃⵠⲆ: "img/day-wood-shield.png",
    ⵠⵠⵠⵠΔⵠⵠΔΔ: "img/night-wood-shield.png",
    ⵠⵠⲆⲆΔⵠΔΔⲆ: "img/day-stone-shield.png",
    ΔᐃᐃⲆⲆᐃⵠⲆⲆ: "img/night-stone-shield.png",
    ΔᐃⵠⲆΔⲆⵠᐃΔ: "img/day-gold-shield.png",
    ᐃΔΔᐃⵠᐃΔⲆΔ: "img/night-gold-shield.png",
    ᐃΔᐃⵠⲆᐃⲆΔⵠ: "img/day-diamond-shield.png",
    ⲆⵠΔⵠᐃⲆᐃᐃΔ: "img/night-diamond-shield.png",
    ΔⵠⵠΔᐃᐃᐃᐃⲆ: "img/day-amethyst-shield.png",
    ⵠᐃⵠΔⵠΔⲆᐃⵠ: "img/night-amethyst-shield.png",
    ᐃⵠⲆᐃⲆΔᐃΔΔ: "img/day-reidite-shield.png",
    ΔⵠᐃⵠⵠᐃΔΔΔ: "img/night-reidite-shield.png",
    ⲆⵠΔⵠᐃΔⵠⵠΔ: "img/inv-wood-shield-in.png",
    ᐃⵠᐃⵠⵠΔⵠΔΔ: "img/inv-wood-shield-out.png",
    ⵠΔᐃΔΔⵠⵠⲆΔ: "img/inv-wood-shield-click.png",
    ⵠΔⲆⲆⵠⵠᐃᐃΔ: "img/inv-stone-shield-in.png",
    ᐃⲆⲆᐃⲆᐃⲆⵠⲆ: "img/inv-stone-shield-out.png",
    ⵠⲆΔⲆᐃⵠᐃΔΔ: "img/inv-stone-shield-click.png",
    ᐃΔΔⲆᐃⲆⵠΔⲆ: "img/inv-gold-shield-in.png",
    ⲆⵠΔΔᐃⲆⵠⵠᐃ: "img/inv-gold-shield-out.png",
    ⵠⲆⵠⲆⵠΔᐃⲆᐃ: "img/inv-gold-shield-click.png",
    ᐃᐃᐃⵠᐃⲆᐃⵠⲆ: "img/inv-diamond-shield-in.png",
    ΔᐃⲆⲆΔᐃⲆᐃΔ: "img/inv-diamond-shield-out.png",
    ⵠⵠΔⵠᐃⵠΔᐃⵠ: "img/inv-diamond-shield-click.png",
    ⲆⵠⵠΔΔⵠⲆᐃΔ: "img/inv-amethyst-shield-in.png",
    ⵠᐃΔΔⲆⵠⵠΔⵠ: "img/inv-amethyst-shield-out.png",
    ᐃⵠΔⲆⵠⲆᐃⲆᐃ: "img/inv-amethyst-shield-click.png",
    ⲆⵠΔᐃΔⵠᐃⲆⲆ: "img/inv-reidite-shield-in.png",
    ⵠᐃᐃⵠΔⲆⲆΔΔ: "img/inv-reidite-shield-out.png",
    ⲆΔᐃⵠΔΔⲆⲆᐃ: "img/inv-reidite-shield-click.png",
    ⵠⲆΔⲆΔᐃⲆᐃΔ: "img/day-machete.png",
    ⲆⲆⲆⲆⲆΔᐃΔᐃ: "img/night-machete.png",
    ⲆᐃΔⵠᐃⵠⵠⲆⲆ: "img/inv-machete-in.png",
    ΔⲆⲆⲆΔΔⲆᐃᐃ: "img/inv-machete-out.png",
    ⵠⲆⲆⲆᐃⲆΔⵠⵠ: "img/inv-machete-click.png"
  };
  ⵠᐃΔⵠⲆⵠⲆ = [{}];
  ⵠᐃΔⵠⲆⵠⲆ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = 0; c < a.length; c++) {
      b[c] = a[c];
    }
    return b;
  };
  ⲆΔⵠᐃⲆⲆᐃ = {};
  ᐃᐃⵠΔⵠΔⵠⲆΔ = {};
  for (var wb in ΔΔ) {
    ⲆΔⵠᐃⲆⲆᐃ[wb] = ΔΔ[wb];
  }
  const Et = 7;
  const Bb = 2;
  const Db = 6;
  ᐃΔ = [];
  ⵠᐃᐃ = {};
  ⵠᐃᐃ.Δᐃⵠⵠⵠ = 0;
  ⵠᐃᐃ.ᐃⵠΔᐃ = 1;
  ⵠᐃᐃ.ᐃⲆᐃⲆ = 2;
  ⵠᐃᐃ.ᐃᐃᐃⲆ = 3;
  ⵠᐃᐃ.ᐃⲆⵠⲆ = 4;
  const Eb = 10;
  ⵠᐃᐃ.ΔⲆᐃᐃ = 5;
  ⵠᐃᐃ.ΔΔᐃΔ = 6;
  ⵠᐃᐃ.ⲆᐃⲆⵠⲆⵠᐃ = 7;
  ⵠᐃᐃ.ᐃⵠⲆⵠᐃ = 8;
  const Ib = 6;
  ΔⵠⲆⲆ = {};
  ᐃᐃᐃᐃ = [];
  ᐃⲆΔΔⲆⵠΔ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (b === a[c].id) {
        return c;
      }
    }
    return -1;
  };
  const Sb = 5;
  var Qb = [];
  function Ft(a, b) {
    for (var c = 0; c < Qb.length; c += b) {
      var d = Qb[c];
      if (a === d[0]) {
        Fb(d[0], d[1], d[2], d[3]);
      }
    }
  }
  const Rb = 14;
  function Fb(b, c, d, e) {
    var f = ᐃᐃᐃᐃ[b];
    if (f !== undefined) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / kx.ᐃⵠᐃⲆⵠ;
        var m = d * 193 / kx.ΔᐃⲆⲆⵠ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ᐃΔ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
        k = e * 600 / kx.ᐃⵠᐃⲆⵠ;
        m = d * 600 / kx.ΔᐃⲆⲆⵠ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ᐃΔ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
      }
    }
  }
  function jb(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  function Lb(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  function Wb(b, c, d, e, f, g) {
    if (e < g * 2) {
      g = e / 2;
    }
    if (f < g * 2) {
      g = f / 2;
    }
    if (g < 0) {
      g = 0;
    }
    b.beginPath();
    b.moveTo(c + g, d);
    b.arcTo(c + e, d, c + e, d + f, g);
    b.arcTo(c + e, d + f, c, d + f, g);
    b.arcTo(c, d + f, c, d, g);
    b.arcTo(c, d, c + e, d, g);
    b.closePath();
  }
  function Gb(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, e * (Math.PI * 2));
  }
  ⵠΔᐃᐃⲆⲆⲆⵠⵠ = function () {
    for (var b = 0; b < 2; b++) {
      ᐃΔ[818][b].clearRect(0, 0, 193, 193);
      ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.MAP[b], 0, 0, 193, 193);
      ᐃΔ[819][b].clearRect(0, 0, 600, 600);
      ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.MAP[b], 0, 0, 600, 600);
      for (var c = kx.Ⲇᐃⵠⵠ.length - 1; c >= 0; c--) {
        var d = kx.Ⲇᐃⵠⵠ[c];
        var f = d.x1 * 193 / (kx.ᐃⵠᐃⲆⵠ * 100);
        var j = d.y1 * 193 / (kx.ΔᐃⲆⲆⵠ * 100);
        var k = d.w * 193 / (kx.ᐃⵠᐃⲆⵠ * 100);
        var m = d.ⲆΔⲆ * 193 / (kx.ΔᐃⲆⲆⵠ * 100);
        var p = d.x1 * 600 / (kx.ᐃⵠᐃⲆⵠ * 100);
        var q = d.y1 * 600 / (kx.ΔᐃⲆⲆⵠ * 100);
        var u = d.w * 600 / (kx.ᐃⵠᐃⲆⵠ * 100);
        var v = d.ⲆΔⲆ * 600 / (kx.ΔᐃⲆⲆⵠ * 100);
        if (d.ⵠⲆΔ === kx.ΔΔᐃⵠⵠ) {
          ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.FOREST[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.FOREST[b], p, q, u, v);
        }
        if (kx.ᐃⲆⲆᐃⲆⵠⲆ === d.ⵠⲆΔ) {
          ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.WINTER[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.WINTER[b], p, q, u, v);
        }
        if (kx.ᐃᐃⵠΔᐃΔⵠ === d.ⵠⲆΔ) {
          ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.LAVA[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.LAVA[b], p, q, u, v);
        }
        if (kx.ΔⲆᐃⵠⵠᐃⵠ === d.ⵠⲆΔ) {
          ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.CAVE[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.CAVE[b], p, q, u, v);
        }
        if (d.ⵠⲆΔ === kx.ⲆⵠᐃⵠΔⲆⲆ) {
          ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.DESERT[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ᐃⲆⲆᐃⲆⲆΔᐃⵠ = function () {
    ΔⵠⲆⲆ = {
      ⵠᐃⲆⲆᐃ: [{
        id: 0,
        ΔΔᐃ: ΔΔ.ⵠᐃⵠΔⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃⲆΔᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃᐃΔⵠⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃᐃᐃᐃⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ΔΔᐃ: ΔΔ.ⲆⲆΔⵠᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠᐃⵠⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃᐃⲆᐃᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆⵠΔᐃᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ΔΔᐃ: ΔΔ.ⲆⵠᐃⵠⲆⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔⲆΔⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔⲆⵠⵠᐃⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.Δᐃⵠⵠⵠᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ΔΔᐃ: ΔΔ.ⵠᐃΔⲆⲆΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃᐃΔΔᐃⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠⵠⵠΔⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠΔⵠⲆΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ΔΔᐃ: ΔΔ.ᐃⵠⲆᐃⲆΔⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⲆΔⵠᐃⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔⲆᐃᐃᐃⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠⵠΔⲆⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ΔΔᐃ: ΔΔ.ΔⵠᐃⵠᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⵠᐃᐃⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔⵠᐃⵠΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⲆᐃΔΔᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆΔⲆΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆᐃΔⵠΔΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃΔⵠⵠⵠⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠΔᐃⵠᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        ΔΔᐃ: ΔΔ.ⲆᐃⲆᐃΔᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⲆⲆΔΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⲆᐃᐃⵠΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃΔⲆⵠᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        ΔΔᐃ: ΔΔ.ΔⲆΔΔΔΔⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⵠⵠⲆΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔⵠΔⲆΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠⵠⵠΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ΔΔᐃ: ΔΔ.ΔᐃΔⵠΔΔⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⲆᐃⵠⵠᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⵠΔⲆᐃΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃⵠⲆᐃⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆᐃΔᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔⵠⵠᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⵠΔⲆΔᐃΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔⵠΔⲆⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        ΔΔᐃ: ΔΔ.ⵠⵠᐃⲆᐃᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⲆⲆᐃⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔΔⲆᐃΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆⲆᐃᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        ΔΔᐃ: ΔΔ.ⲆᐃᐃⲆⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃᐃΔᐃⲆᐃᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠΔΔᐃⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔⲆΔⲆⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ΔΔᐃ: ΔΔ.ΔΔⲆⵠⵠⵠⵠ,
        ⲆⲆΔ: ΔΔ.ΔⲆⵠᐃⲆⵠΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠⵠΔΔⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔᐃⵠⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ΔΔᐃ: ΔΔ.ᐃΔⲆⲆΔⵠⲆ,
        ⲆⲆΔ: ΔΔ.ᐃΔᐃⲆⲆᐃᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃΔᐃⵠⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠΔΔⵠⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ΔΔᐃ: ΔΔ.ⵠⲆΔΔΔⲆⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⵠΔᐃⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃⵠᐃΔⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔⲆⵠⲆⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ΔΔᐃ: ΔΔ.ΔΔⲆᐃⵠⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠΔⲆᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠᐃⲆᐃΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃΔᐃⵠⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ΔΔᐃ: ΔΔ.ⲆⵠⲆᐃⵠᐃⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠΔᐃⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠⵠᐃⲆⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠΔᐃⵠⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ΔΔᐃ: ΔΔ.ⵠⲆΔⲆⵠᐃΔ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠΔΔⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠᐃΔⲆⵠⲆ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃΔⵠΔⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆⲆΔⲆΔ,
        ⲆⲆΔ: ΔΔ.ΔⵠᐃⲆⲆⵠΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃⲆⵠⵠΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃᐃΔⲆⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ΔΔᐃ: ΔΔ.ᐃΔⲆΔΔⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⲆΔⲆᐃᐃᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔⲆⲆⲆΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆⵠᐃΔᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ΔΔᐃ: ΔΔ.ⵠᐃⵠΔⵠⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⵠⲆⲆⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃΔⵠⵠΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃᐃᐃⲆⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ΔΔᐃ: ΔΔ.ᐃΔᐃᐃⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⲆΔⲆⲆⵠΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠᐃᐃΔⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔⲆᐃⵠΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ΔΔᐃ: ΔΔ.ΔⲆΔⲆΔⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⲆᐃΔⵠΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃⲆⵠΔⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃᐃⲆⲆᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ΔΔᐃ: ΔΔ.ⵠⵠΔᐃⲆΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⵠⲆⲆᐃΔ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔΔᐃΔᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃΔⵠᐃΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃᐃΔΔΔ,
        ⲆⲆΔ: ΔΔ.ΔᐃⵠΔⲆⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔᐃⵠΔⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃⲆΔⵠΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Seams"
      }, {
        id: 104,
        ΔΔᐃ: ΔΔ.ⵠⵠⲆΔᐃⲆⵠ,
        ⲆⲆΔ: ΔΔ.ΔⲆⲆⲆᐃΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠᐃᐃΔᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆⵠⲆⵠΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ΔΔᐃ: ΔΔ.ⵠΔⲆⲆⲆΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃᐃᐃᐃⲆΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃⲆΔⲆⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃⵠⲆᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ΔΔᐃ: ΔΔ.ⵠⵠⲆⲆⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⲆⵠᐃⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠΔᐃΔⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠⵠⵠⲆᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆⲆⵠΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠⲆᐃⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔⲆΔⵠⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃᐃⲆⲆⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ΔΔᐃ: ΔΔ.ΔΔⲆᐃᐃⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆᐃᐃΔΔᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔⲆⵠⲆᐃΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔⲆⲆΔⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ΔΔᐃ: ΔΔ.ⵠⲆΔⵠⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⲆᐃᐃᐃΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃⵠⲆⵠΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔⵠⵠⵠΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ΔΔᐃ: ΔΔ.ⲆⵠΔⵠᐃⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠⵠΔΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⲆⵠΔⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃᐃⵠⲆᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ΔΔᐃ: ΔΔ.ⵠᐃᐃΔΔⲆⲆ,
        ⲆⲆΔ: ΔΔ.ΔⲆⲆⲆᐃⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔΔⲆΔⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔⵠΔⵠⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ΔΔᐃ: ΔΔ.ⵠⵠᐃⵠᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔⲆᐃΔᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⵠΔⵠΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔᐃᐃⲆⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ΔΔᐃ: ΔΔ.ⵠΔⵠΔⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠΔΔⵠⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔⲆⲆⵠⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆⵠΔⵠΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ΔΔᐃ: ΔΔ.ⲆΔⵠⵠⵠⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠⲆᐃⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠⵠⲆⵠΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.Ⲇᐃᐃᐃⵠⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ΔΔᐃ: ΔΔ.ⲆⲆᐃⲆΔⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⲆᐃΔⲆⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⵠΔⵠⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠⵠⵠΔΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ΔΔᐃ: ΔΔ.ⲆΔⲆⵠⵠᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔⲆᐃⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔᐃⲆⵠⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆᐃᐃΔⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ΔΔᐃ: ΔΔ.ΔⵠⵠᐃᐃⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃⵠΔΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⵠⵠΔΔⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔΔⲆᐃΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ΔΔᐃ: ΔΔ.ᐃᐃⵠΔᐃⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⲆⵠⲆⵠΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠΔⵠⵠⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔⲆᐃΔⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ΔΔᐃ: ΔΔ.ᐃⵠⵠΔΔⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⵠΔⲆᐃⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠⵠΔᐃΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠⲆⲆⲆⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ΔΔᐃ: ΔΔ.ΔΔⵠΔᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⵠᐃᐃΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⵠΔⵠⵠᐃ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃⵠⵠⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ΔΔᐃ: ΔΔ.ⲆΔⲆⵠⵠⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔⵠⵠⵠΔ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⵠⵠⵠⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃⵠⵠⲆΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ΔΔᐃ: ΔΔ.ΔᐃⵠΔⵠᐃᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠᐃᐃⲆΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆⵠⲆⲆᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆΔⲆⵠᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ΔΔᐃ: ΔΔ.ⲆΔⵠΔΔⵠⵠ,
        ⲆⲆΔ: ΔΔ.ΔᐃⲆⲆⲆⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⲆΔᐃⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔΔⲆᐃⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ΔΔᐃ: ΔΔ.ΔᐃⵠⵠⲆⵠⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠᐃΔΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⵠᐃⵠΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠΔⲆᐃΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ΔΔᐃ: ΔΔ.ⵠΔⲆΔΔⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆΔⵠᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔⲆΔᐃΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆΔⲆΔΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ΔΔᐃ: ΔΔ.ΔⲆⵠⲆᐃᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⵠΔΔⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔⵠΔᐃⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⲆⲆⵠⲆᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ΔΔᐃ: ΔΔ.ⲆᐃᐃⲆᐃⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃⵠⵠᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.Ⲇⵠᐃᐃᐃᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠᐃⲆⵠⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ΔΔᐃ: ΔΔ.ⲆⵠⲆⲆᐃΔΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃᐃΔΔⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.Δᐃᐃᐃⵠⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠΔᐃΔΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ΔΔᐃ: ΔΔ.ⵠⵠⵠᐃᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠΔᐃΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⲆΔⲆⵠᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠⵠΔⲆⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ΔΔᐃ: ΔΔ.ⲆⲆⵠΔⲆⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔΔⲆⲆΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔⲆⲆⵠⵠΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃⲆᐃⵠⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ΔΔᐃ: ΔΔ.ΔᐃΔⲆᐃᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⵠΔᐃⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⵠⲆⵠᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⲆⲆΔΔΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ΔΔᐃ: ΔΔ.ⵠⲆⲆΔⵠⵠⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠᐃⲆᐃΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔⲆⲆⲆΔΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔⵠᐃᐃⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ΔΔᐃ: ΔΔ.ΔⵠΔⵠᐃΔᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃΔⵠΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃΔᐃᐃⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆΔᐃⵠⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ΔΔᐃ: ΔΔ.ΔΔΔⵠⲆΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⲆⵠᐃᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔΔⵠΔᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆⲆᐃᐃⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ΔΔᐃ: ΔΔ.ⵠᐃⵠⲆⲆΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠᐃΔⲆⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃⵠⲆΔⵠᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆᐃⵠΔΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ΔΔᐃ: ΔΔ.ΔΔᐃⲆⵠⵠΔ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃᐃⵠⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠⵠⲆⲆᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠⲆᐃⲆⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ΔΔᐃ: ΔΔ.ΔΔⲆⵠⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ΔΔⵠⵠⵠᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔⲆᐃᐃⵠⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⵠᐃⵠᐃᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ΔΔᐃ: ΔΔ.ⲆⵠΔΔⵠᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆΔⲆΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃⲆᐃⵠᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⵠΔᐃⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ΔΔᐃ: ΔΔ.ΔⵠⵠᐃⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⲆⲆⵠΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠᐃⲆᐃⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃᐃΔᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ΔΔᐃ: ΔΔ.ᐃΔᐃⲆᐃᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠⵠΔΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔⵠΔΔᐃΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔⵠⵠⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        ΔΔᐃ: ΔΔ.ᐃⲆΔΔᐃⲆΔ,
        ⲆⲆΔ: ΔΔ.ᐃᐃΔⵠⲆⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆΔⵠⲆΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃΔⲆᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        ΔΔᐃ: ΔΔ.ⵠΔᐃΔᐃᐃⲆ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⲆⵠⵠᐃᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠⵠⲆΔᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠᐃΔΔᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆⲆᐃΔΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆΔⲆΔΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃⲆⵠⵠΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆΔᐃⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        ΔΔᐃ: ΔΔ.ᐃⲆⲆⲆⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⵠⲆⲆⵠΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔⲆⵠΔⵠᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔᐃΔⲆᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        ΔΔᐃ: ΔΔ.ⲆⵠΔⲆΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆΔⲆⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠᐃⵠⵠⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃⲆⲆⲆΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        ΔΔᐃ: ΔΔ.ⲆΔⲆΔᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ΔᐃᐃᐃᐃⵠΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠΔⲆᐃⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔⵠⵠⲆΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        ΔΔᐃ: ΔΔ.ΔⵠᐃⵠΔⵠⲆ,
        ⲆⲆΔ: ΔΔ.ΔⲆΔΔΔᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃᐃᐃᐃⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃⵠⵠⵠⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 29,
        ΔΔᐃ: ΔΔ.ΔⲆᐃⵠⲆⵠΔ,
        ⲆⲆΔ: ΔΔ.ΔⲆⵠᐃⲆⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃᐃΔᐃⵠᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆⵠⵠᐃᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ΔΔᐃ: ΔΔ.ⵠᐃᐃⲆΔΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔᐃⲆᐃᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠᐃⵠⲆⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠⵠΔᐃᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ΔΔᐃ: ΔΔ.ΔⲆⵠⲆᐃᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠⵠᐃᐃᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔΔⵠᐃⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆᐃΔᐃΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ΔΔᐃ: ΔΔ.ⲆᐃⵠⵠⲆⵠⲆ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠⵠⲆᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃΔᐃⲆⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆⲆⲆⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆᐃⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠⵠⵠΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃᐃΔᐃΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔᐃⲆΔⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ΔΔᐃ: ΔΔ.ⲆᐃⲆΔⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔᐃⵠΔᐃᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔᐃΔⲆᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔⵠᐃⲆᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ΔΔᐃ: ΔΔ.ⲆᐃΔᐃⵠⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⵠⵠΔᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆΔⲆⵠΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆᐃⲆΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ΔΔᐃ: ΔΔ.ⲆΔᐃⵠΔᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃᐃᐃⲆⲆⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔᐃΔⲆΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆᐃⲆᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ΔΔᐃ: ΔΔ.ⲆⵠᐃΔⵠⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃᐃΔⲆΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⲆᐃⲆⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆⵠⲆᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ΔΔᐃ: ΔΔ.ᐃⵠΔⲆⵠⵠΔ,
        ⲆⲆΔ: ΔΔ.ᐃᐃΔᐃᐃΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠΔΔⵠᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃᐃᐃᐃⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ΔΔᐃ: ΔΔ.ΔⲆⵠΔᐃᐃΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠΔΔⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆⵠΔΔᐃΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠᐃΔΔΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ΔΔᐃ: ΔΔ.ⵠⵠⲆᐃⵠΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⲆᐃⲆᐃⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⵠⲆᐃⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⲆⵠΔᐃᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ΔΔᐃ: ΔΔ.ⵠᐃᐃⲆΔΔⲆ,
        ⲆⲆΔ: ΔΔ.ⵠΔΔⵠΔᐃΔ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆΔⲆⵠⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃΔⲆⲆᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆΔⵠⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔᐃΔΔⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⵠⵠΔⵠᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆⲆⲆᐃᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ΔΔᐃ: ΔΔ.ΔⲆⵠⵠⵠΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠΔⲆᐃⵠⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔᐃⵠᐃⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔΔⵠⲆΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ΔΔᐃ: ΔΔ.ΔΔⲆᐃΔΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⵠΔΔΔΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃΔᐃΔⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠᐃᐃⲆᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆⲆΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⵠⵠᐃⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆᐃΔΔᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠΔᐃⲆⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ΔΔᐃ: ΔΔ.ⵠΔⵠⵠⲆⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠⲆΔⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⲆᐃΔΔⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔⲆⲆⵠⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ΔΔᐃ: ΔΔ.ⲆⵠⵠΔⵠΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔΔⲆⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆᐃᐃⵠⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃΔΔΔⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ΔΔᐃ: ΔΔ.ⵠΔⵠᐃᐃⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⲆⵠᐃᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆΔⲆⵠⵠᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃᐃΔⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ΔΔᐃ: ΔΔ.ⵠᐃᐃⵠΔᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃΔⲆⲆⵠᐃᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⲆΔⲆΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆⵠᐃⵠⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ΔΔᐃ: ΔΔ.ⵠⵠᐃΔᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠⵠΔⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔⲆⵠᐃᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔⲆᐃΔΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ΔΔᐃ: ΔΔ.ⵠⲆⲆᐃⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⲆΔⵠᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃᐃⲆⲆⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔⲆΔᐃᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ΔΔᐃ: ΔΔ.ⲆᐃᐃⲆᐃⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆⲆΔᐃᐃⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠΔᐃΔⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆⵠⲆΔΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ΔΔᐃ: ΔΔ.ΔᐃΔⲆⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ΔⲆⵠⲆⲆᐃΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔᐃᐃΔⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃⵠΔΔΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ΔΔᐃ: ΔΔ.ⵠⲆᐃⲆⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠⲆᐃΔⵠΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠⵠⲆⵠᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃᐃᐃᐃΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ΔΔᐃ: ΔΔ.ⵠΔᐃᐃⲆΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔΔⲆⵠΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔⲆᐃⲆⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆᐃⵠⵠⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ΔΔᐃ: ΔΔ.ᐃⵠⲆⲆⵠΔⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⵠΔⲆΔⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠᐃΔⲆⵠⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆΔⲆᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ΔΔᐃ: ΔΔ.ΔⲆᐃⵠⵠⲆΔ,
        ⲆⲆΔ: ΔΔ.Δⵠᐃⵠᐃᐃᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆΔᐃΔᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃⵠᐃᐃⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ΔΔᐃ: ΔΔ.ⵠⲆⵠᐃⲆⵠⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠΔΔΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⵠΔⲆⲆⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃⲆΔⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ΔΔᐃ: ΔΔ.ᐃⵠⵠΔᐃⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃⵠΔΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⵠⵠᐃⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆΔᐃⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ΔΔᐃ: ΔΔ.ⲆΔⵠᐃⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔᐃᐃΔΔΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔⲆⵠⲆⵠᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃΔⵠⵠᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ΔΔᐃ: ΔΔ.ΔΔⵠΔΔⵠΔ,
        ⲆⲆΔ: ΔΔ.ΔⵠΔΔⲆΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠⵠᐃⵠⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔΔⲆⵠⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ΔΔᐃ: ΔΔ.ⵠᐃᐃⵠΔⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃⲆᐃⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃⵠΔᐃΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔⵠΔⲆΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ΔΔᐃ: ΔΔ.ⲆᐃⵠΔΔⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠⵠⵠΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔΔᐃᐃⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⵠⵠΔᐃⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ΔΔᐃ: ΔΔ.ᐃᐃΔΔⲆΔⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠᐃⵠΔⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆⲆΔⵠⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔᐃΔⵠΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        ΔΔᐃ: ΔΔ.ⵠⲆᐃⲆΔΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠΔΔΔΔⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔⲆⲆⵠⵠⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⲆᐃⲆⲆᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        ΔΔᐃ: ΔΔ.ᐃΔᐃⵠΔᐃⵠ,
        ⲆⲆΔ: ΔΔ.ΔⲆᐃᐃⲆⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔⲆΔⲆᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⲆⵠⵠΔⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        ΔΔᐃ: ΔΔ.ΔΔᐃⲆⵠᐃⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⲆⲆⵠⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠΔᐃΔΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆⵠᐃΔⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        ΔΔᐃ: ΔΔ.ᐃΔⵠⵠⲆⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔⵠⵠⵠΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔΔΔᐃⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃⵠⲆⲆⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        ΔΔᐃ: ΔΔ.ⵠᐃⵠⲆⲆⵠⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠᐃΔⲆΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆⲆᐃΔⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆⲆᐃⵠⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        ΔΔᐃ: ΔΔ.ΔⲆΔΔⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ΔᐃᐃⲆⵠᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⵠⲆΔⲆΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃΔⲆⲆΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        ΔΔᐃ: ΔΔ.ΔᐃᐃⲆᐃⵠΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆΔⵠΔⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⵠⵠⵠⲆΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆⵠΔⲆΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        ΔΔᐃ: ΔΔ.ⵠⲆᐃⲆⲆᐃⲆ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⲆⵠⵠᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔᐃΔᐃᐃΔ,
        ΔⲆⵠⵠ: ΔΔ.Δⵠⵠᐃⵠⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        ΔΔᐃ: ΔΔ.ΔΔᐃΔΔΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃΔΔⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔᐃⵠᐃᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔΔⵠⲆΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        ΔΔᐃ: ΔΔ.ΔΔΔᐃΔᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔᐃⵠⵠⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔⲆⲆⲆΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔⲆⵠᐃⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        ΔΔᐃ: ΔΔ.ᐃᐃⵠΔᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃΔΔΔⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔᐃⲆΔⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃΔⲆΔⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        ΔΔᐃ: ΔΔ.ᐃΔⵠⵠⲆⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠⲆⲆⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⲆΔᐃᐃⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠᐃⵠⲆΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        ΔΔᐃ: ΔΔ.ⲆᐃᐃΔᐃⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠⵠΔⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⲆⵠⵠⵠⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔⵠⲆᐃΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        ΔΔᐃ: ΔΔ.ΔⵠⵠᐃᐃΔΔ,
        ⲆⲆΔ: ΔΔ.ΔⲆᐃᐃⲆΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃᐃⵠΔⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠⲆΔᐃᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆⲆⵠΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆΔᐃⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃᐃΔᐃⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃⵠΔⲆⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆᐃⵠᐃⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠⲆⵠⵠⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⲆΔⵠΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠⲆᐃⵠᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        ΔΔᐃ: ΔΔ.ΔᐃⲆᐃΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔⵠᐃΔΔⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔⲆⵠⲆΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠⲆⵠⲆⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 25,
        ΔΔᐃ: ΔΔ.ΔᐃᐃⲆⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⵠᐃⲆᐃΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠⵠΔⲆⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃᐃᐃⲆⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ΔΔᐃ: ΔΔ.ΔⵠⲆΔΔΔⵠ,
        ⲆⲆΔ: ΔΔ.ᐃΔⵠᐃᐃᐃΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠΔⵠΔⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔⲆⲆΔⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ΔΔᐃ: ΔΔ.ⵠΔⵠΔᐃΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠΔⲆᐃⵠⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃΔΔΔΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔⵠⲆⲆⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ΔΔᐃ: ΔΔ.ⲆΔⲆⵠΔᐃᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⵠΔΔⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆⵠⵠΔⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠⵠᐃⵠⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ΔΔᐃ: ΔΔ.ΔⵠΔⵠⵠⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⵠᐃΔᐃΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃⲆⲆⵠⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔΔⲆΔᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ΔΔᐃ: ΔΔ.ⲆΔΔᐃΔΔⲆ,
        ⲆⲆΔ: ΔΔ.ΔΔΔΔⵠⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔᐃⵠⲆⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆⵠⵠΔⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ΔΔᐃ: ΔΔ.ΔⲆᐃⲆⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠⵠⲆⵠΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆⵠᐃⲆᐃΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠⵠΔᐃᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ΔΔᐃ: ΔΔ.ⵠᐃΔⲆᐃⲆⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠᐃⲆⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔᐃⵠⵠⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠⲆⲆΔᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ΔΔᐃ: ΔΔ.ΔᐃΔᐃⵠⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃΔⵠΔᐃΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔᐃᐃⵠⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃᐃᐃᐃᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ΔΔᐃ: ΔΔ.ΔⵠⲆᐃΔⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⵠⲆⵠⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⲆᐃⲆⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃⵠⲆΔⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ΔΔᐃ: ΔΔ.ⲆⵠᐃⲆΔΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃⵠⵠᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃᐃᐃᐃΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠⵠⵠᐃᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ΔΔᐃ: ΔΔ.ᐃΔⲆΔΔⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃΔᐃⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠΔᐃΔⵠᐃ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃΔᐃΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ΔΔᐃ: ΔΔ.ⲆΔΔᐃᐃⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⲆᐃΔⵠⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃΔⲆᐃΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔⵠᐃΔΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆᐃⲆⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃᐃΔᐃⲆⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔᐃⵠᐃᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠΔΔⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃΔⵠⵠⲆ,
        ⲆⲆΔ: ΔΔ.ᐃΔΔⵠⵠⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃᐃⲆᐃᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔΔⲆⲆⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ΔΔᐃ: ΔΔ.ᐃⵠⵠⲆΔⲆⵠ,
        ⲆⲆΔ: ΔΔ.ᐃᐃΔⲆⲆⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆᐃⵠⲆⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆᐃΔⵠΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ΔΔᐃ: ΔΔ.ΔΔⵠⵠᐃᐃⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⵠΔⲆⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.Δᐃᐃᐃᐃᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔⵠⲆⵠΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ΔΔᐃ: ΔΔ.ⵠᐃΔⵠⲆᐃΔ,
        ⲆⲆΔ: ΔΔ.ΔⲆΔⵠⲆⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⲆᐃΔⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃᐃⲆᐃΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ΔΔᐃ: ΔΔ.ΔⵠⵠⵠᐃᐃⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⲆΔΔⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔⲆΔⲆᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆΔΔⲆΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ΔΔᐃ: ΔΔ.ΔⲆᐃⵠⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆᐃⵠΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⲆⲆⲆⵠⲆ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔΔΔⲆΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ΔΔᐃ: ΔΔ.ΔΔᐃᐃⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ΔᐃᐃᐃⲆᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃΔΔⵠΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃⲆᐃⲆΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ΔΔᐃ: ΔΔ.ⲆⲆΔⵠⵠΔΔ,
        ⲆⲆΔ: ΔΔ.ᐃⵠᐃᐃⲆᐃΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠⲆΔⲆΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆⲆⲆΔⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ΔΔᐃ: ΔΔ.ⲆΔᐃΔⲆΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠⵠⵠΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⲆⵠⵠᐃΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠⲆΔⵠΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ΔΔᐃ: ΔΔ.ΔⵠⲆᐃᐃᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⲆᐃⵠⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠᐃⲆᐃⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆᐃᐃⲆⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ΔΔᐃ: ΔΔ.ΔΔⲆΔΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠΔᐃΔᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆΔⲆΔⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔⲆΔᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ΔΔᐃ: ΔΔ.ⲆΔΔⲆⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔᐃᐃⵠΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔᐃⲆᐃⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠⲆΔⵠΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ΔΔᐃ: ΔΔ.ᐃΔΔᐃⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆΔⵠᐃΔ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⲆΔΔΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠΔᐃΔᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ΔΔᐃ: ΔΔ.ⵠΔⲆⲆᐃΔⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔⲆΔᐃᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆΔΔΔᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃᐃⵠⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ΔΔᐃ: ΔΔ.ⲆΔΔⲆᐃⲆΔ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⲆⲆᐃⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠΔⵠⵠⵠᐃ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃⲆΔⲆᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠⲆⵠΔΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆᐃⲆⵠᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆⵠΔⵠⵠᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⵠⵠⲆⵠᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆⲆⵠᐃΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔᐃⲆⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔᐃΔΔⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠⵠᐃᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ΔΔᐃ: ΔΔ.ᐃⲆΔⲆⵠᐃⲆ,
        ⲆⲆΔ: ΔΔ.ΔΔΔΔᐃⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆᐃΔᐃⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠΔⵠΔᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ΔΔᐃ: ΔΔ.ᐃΔⲆⵠⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⵠΔⵠⲆΔⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⵠⵠᐃⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔᐃΔΔⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ΔΔᐃ: ΔΔ.ᐃⲆᐃⵠΔᐃΔ,
        ⲆⲆΔ: ΔΔ.ΔΔᐃᐃᐃΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔΔᐃⵠΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃΔⲆᐃⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ΔΔᐃ: ΔΔ.ⵠⵠΔᐃᐃᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃΔᐃⵠⲆⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⵠⵠᐃⲆΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆⲆⲆᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        ΔΔᐃ: ΔΔ.ᐃⲆᐃΔⲆⵠΔ,
        ⲆⲆΔ: ΔΔ.ⵠΔⵠΔΔⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆᐃⵠΔⵠᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔᐃΔⵠΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        ΔΔᐃ: ΔΔ.ⵠⲆΔⵠᐃⲆⵠ,
        ⲆⲆΔ: ΔΔ.ΔᐃⵠΔᐃⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠᐃᐃⲆΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠⲆΔᐃⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        ΔΔᐃ: ΔΔ.ᐃⵠⵠΔⵠᐃΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠⲆΔⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔⵠⵠΔᐃΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆΔⵠⵠⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        ΔΔᐃ: ΔΔ.Ⲇⵠᐃᐃᐃⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔᐃⵠⲆⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔⲆᐃᐃⲆᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃⲆⵠᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        ΔΔᐃ: ΔΔ.ᐃⵠΔᐃⵠⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆᐃΔᐃⵠⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⲆΔⲆⵠΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆⵠⲆⵠᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        ΔΔᐃ: ΔΔ.ᐃⲆⲆΔⲆΔᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆⲆⵠᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆΔⲆⲆᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔⲆᐃⵠᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        ΔΔᐃ: ΔΔ.ΔᐃᐃΔΔⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔΔⵠⵠΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃΔⵠΔᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃⲆᐃⲆⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        ΔΔᐃ: ΔΔ.ᐃᐃΔΔᐃⲆⲆ,
        ⲆⲆΔ: ΔΔ.ΔⲆⲆᐃⲆΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠΔΔᐃΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆΔⵠⲆⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠⲆⲆⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔⲆΔᐃⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⵠⲆⵠΔᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃΔⵠⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        ΔΔᐃ: ΔΔ.ᐃⲆᐃᐃⵠⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔᐃΔⵠⲆⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠΔΔⵠⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆⵠΔⲆⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        ΔΔᐃ: ΔΔ.ⵠⲆΔᐃΔⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔᐃⲆⵠⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃⵠⵠᐃᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆᐃⲆⲆⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        ΔΔᐃ: ΔΔ.ⵠᐃᐃᐃⵠᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆᐃΔᐃⵠΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃⵠᐃⵠⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔⲆⲆᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        ΔΔᐃ: ΔΔ.ᐃⲆΔΔⵠⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔⵠⵠⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔⵠⲆⲆᐃΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠΔⲆⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        ΔΔᐃ: ΔΔ.ⵠⲆᐃⵠⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠⲆⲆⵠΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠⵠⲆⲆΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔΔᐃⵠΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        ΔΔᐃ: ΔΔ.ⲆⲆⵠⵠᐃⵠⲆ,
        ⲆⲆΔ: ΔΔ.ΔᐃᐃⲆⵠⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠᐃᐃᐃΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠΔᐃⲆᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        ΔΔᐃ: ΔΔ.ᐃⲆᐃⵠΔᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠⲆⲆᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃᐃⵠⵠᐃΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔᐃⲆⵠⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        ΔΔᐃ: ΔΔ.ΔᐃᐃⵠⲆⲆᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠΔΔΔⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔΔᐃᐃⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃⲆᐃᐃᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        ΔΔᐃ: ΔΔ.ⲆΔⵠⵠⵠᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⲆΔΔⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃⵠΔᐃⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠΔⵠΔΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        ΔΔᐃ: ΔΔ.ΔΔⲆᐃᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⲆᐃᐃᐃᐃᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃᐃⵠᐃⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔΔΔⵠⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 42,
        ΔΔᐃ: ΔΔ.ΔⵠΔⵠΔⵠⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠᐃΔΔΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⵠᐃⲆᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆΔⵠᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ΔΔᐃ: ΔΔ.ⲆᐃΔᐃᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.Δⵠᐃⵠⵠᐃᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆΔΔⲆΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⵠΔⲆⲆⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ΔΔᐃ: ΔΔ.ⲆᐃⲆⵠᐃⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃᐃᐃⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔⲆΔᐃᐃⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠⲆⵠᐃⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ΔΔᐃ: ΔΔ.ⵠΔᐃΔⵠᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆΔΔΔⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃᐃⲆⲆᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃᐃΔⲆᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ΔΔᐃ: ΔΔ.ⲆⲆⵠⲆⲆⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⲆᐃⵠᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔΔΔⵠⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔⲆᐃⵠᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ΔΔᐃ: ΔΔ.ᐃᐃΔⲆᐃⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⲆᐃᐃΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔᐃⵠΔⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆΔᐃᐃⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ΔΔᐃ: ΔΔ.ΔΔⵠⵠΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⲆΔΔⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔᐃᐃⲆⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃⲆⵠΔΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ΔΔᐃ: ΔΔ.ⵠⵠⵠΔⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⲆΔⲆᐃΔᐃᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠΔⲆⵠΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃⵠΔΔⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ΔΔᐃ: ΔΔ.ΔΔᐃⲆⲆᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆᐃᐃⵠⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔΔᐃⵠᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆΔⵠⵠΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃΔᐃᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔⵠⲆⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆᐃⵠᐃⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠⵠΔᐃⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ΔΔᐃ: ΔΔ.ⵠᐃⵠⵠⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔⲆΔᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠⵠᐃⲆᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠᐃⵠⲆΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ΔΔᐃ: ΔΔ.ⵠⲆᐃⲆᐃᐃⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⲆΔᐃⲆᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔΔⵠᐃⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆΔⵠⲆΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ΔΔᐃ: ΔΔ.ᐃⵠΔΔⵠΔΔ,
        ⲆⲆΔ: ΔΔ.ⲆⲆᐃᐃⵠⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃᐃᐃΔΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔⲆᐃⵠⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ΔΔᐃ: ΔΔ.ⲆᐃⵠΔⲆⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⲆᐃΔⵠⵠᐃᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔⲆᐃΔⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃΔΔΔᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ΔΔᐃ: ΔΔ.ᐃΔᐃΔΔⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠᐃⵠΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⲆᐃᐃᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔΔⵠⵠⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ΔΔᐃ: ΔΔ.ⵠⵠⵠⲆΔΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⵠⲆΔᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆΔᐃΔⵠᐃ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⲆⵠⵠⲆΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ΔΔᐃ: ΔΔ.ΔⵠᐃΔⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⵠⵠⲆⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃΔΔᐃᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃⵠᐃᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ΔΔᐃ: ΔΔ.ⵠᐃⵠΔΔⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔᐃᐃᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃΔΔΔᐃΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆⲆΔΔⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ΔΔᐃ: ΔΔ.ⲆᐃⵠᐃⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ᐃᐃᐃⵠⲆⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃΔᐃⵠΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃᐃⵠⲆΔⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ΔΔᐃ: ΔΔ.ΔⵠΔΔⵠᐃΔ,
        ⲆⲆΔ: ΔΔ.ⵠⲆᐃⵠΔⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠΔΔⲆⵠⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⵠΔⵠⲆⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆⲆⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃᐃⵠⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃⵠΔⲆᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆΔⲆᐃⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        ΔΔᐃ: ΔΔ.ⲆᐃΔΔΔᐃⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⵠⲆᐃΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔⲆⵠΔⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔⲆΔΔⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        ΔΔᐃ: ΔΔ.ᐃⵠⲆⵠⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔⵠᐃⲆΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔⵠᐃᐃⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⲆΔᐃΔᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        ΔΔᐃ: ΔΔ.ⲆⲆΔΔᐃᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔΔⵠⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃⵠⲆᐃᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⲆⵠᐃⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        ΔΔᐃ: ΔΔ.ⵠⲆⲆᐃᐃⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔⵠΔΔΔⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔⵠⵠΔΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.Ⲇᐃⵠⵠⵠⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        ΔΔᐃ: ΔΔ.ⲆⵠΔⲆⵠΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⲆΔⵠⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠᐃⵠⲆᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔΔⵠⲆⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        ΔΔᐃ: ΔΔ.ΔⲆᐃᐃⲆⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⲆΔⲆᐃΔᐃΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃᐃⲆⵠΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔⲆⲆᐃⵠΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        ΔΔᐃ: ΔΔ.ΔⲆⵠⲆᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔⲆᐃⵠᐃΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆᐃᐃᐃⵠⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔᐃⵠΔⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        ΔΔᐃ: ΔΔ.ᐃⵠⲆⵠⲆᐃⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆᐃΔΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃⲆΔᐃⵠᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔΔᐃΔⲆⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        ΔΔᐃ: ΔΔ.ΔᐃΔⲆᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⵠΔᐃⲆⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠΔⵠⵠⵠⲆ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃⵠⲆΔᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        ΔΔᐃ: ΔΔ.ⲆⲆᐃⵠΔᐃⲆ,
        ⲆⲆΔ: ΔΔ.ⵠΔⵠᐃⲆⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃᐃΔⲆᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔᐃᐃⲆⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 95,
        ΔΔᐃ: ΔΔ.ⲆΔΔⲆⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆΔΔΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔⲆⲆⲆᐃᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠᐃⵠⲆΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ΔΔᐃ: ΔΔ.ᐃΔⲆᐃᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔⲆᐃΔⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠᐃⵠᐃⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⵠΔⲆⵠⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ΔΔᐃ: ΔΔ.ⵠΔⲆⵠⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⲆⵠΔᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔⵠⲆⲆᐃΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠᐃⲆᐃΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ΔΔᐃ: ΔΔ.ᐃⵠΔⵠᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆⵠⲆΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃΔⵠⵠΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠΔⵠΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆᐃⵠᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠⲆᐃⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃΔᐃΔⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃⵠⲆⲆᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ΔΔᐃ: ΔΔ.ⲆᐃᐃⲆᐃΔⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠᐃᐃⵠⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃⲆⵠⲆΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⵠⲆΔⵠΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ΔΔᐃ: ΔΔ.ᐃΔᐃΔΔΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃⲆΔⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠΔⵠⵠΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠⲆᐃⵠΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠᐃⲆⵠΔ,
        ⲆⲆΔ: ΔΔ.ΔΔⵠⲆΔΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠⲆΔⵠⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⵠᐃⵠⲆⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ΔΔᐃ: ΔΔ.ᐃΔⵠⵠΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔⲆⲆⵠⲆⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔΔΔᐃΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆᐃⲆⲆⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ΔΔᐃ: ΔΔ.ᐃΔᐃⵠⵠⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⵠΔⵠᐃᐃⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠΔⲆⵠⲆΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃΔⵠᐃΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ΔΔᐃ: ΔΔ.ⲆΔᐃΔᐃⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠⲆⵠⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔⲆΔᐃᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠΔᐃⲆΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ΔΔᐃ: ΔΔ.ⵠⲆᐃⵠᐃⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔⵠⵠⲆⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃⲆᐃⵠⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆΔΔⲆᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ΔΔᐃ: ΔΔ.ΔⲆⲆΔᐃᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠⵠⲆΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔⵠⲆⲆⵠΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃΔⲆᐃⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ΔΔᐃ: ΔΔ.ΔΔⵠⲆᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⲆΔⵠᐃΔΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃⲆⲆΔⵠΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃΔᐃΔᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃΔⵠΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠΔⲆΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃᐃΔᐃΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆⲆⵠᐃⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ΔΔᐃ: ΔΔ.ΔⲆΔᐃⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔⵠᐃᐃⲆⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⵠΔᐃΔΔⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆᐃⵠΔᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ΔΔᐃ: ΔΔ.ⲆᐃΔᐃⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔⵠᐃⲆⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔⵠⵠᐃⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃΔⵠᐃΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ΔΔᐃ: ΔΔ.ⲆⲆΔᐃⵠᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔⵠⲆⵠᐃⵠⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆᐃⵠΔΔⲆ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔᐃᐃᐃⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        ΔΔᐃ: ΔΔ.ⵠⲆⵠΔⵠⲆᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔΔⵠⵠⲆΔ,
        ⲆᐃᐃΔ: ΔΔ.ΔᐃᐃᐃΔⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ΔᐃⲆⵠⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        ΔΔᐃ: ΔΔ.ᐃᐃⵠΔᐃⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃⲆⵠΔᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔⲆⵠⲆᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃⲆⲆⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        ΔΔᐃ: ΔΔ.ⲆⲆⵠⵠΔΔᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔᐃΔⵠᐃ,
        ⲆᐃᐃΔ: ΔΔ.ⲆⲆⲆΔᐃΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ᐃΔΔᐃᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        ΔΔᐃ: ΔΔ.ᐃⲆᐃⵠᐃⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⵠΔΔⵠΔ,
        ⲆᐃᐃΔ: ΔΔ.ᐃΔᐃᐃⲆΔΔ,
        ΔⲆⵠⵠ: ΔΔ.ⲆᐃⵠΔᐃⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        ΔΔᐃ: ΔΔ.ⲆⵠⲆⵠⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔⵠⵠⵠΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠⵠⵠⵠΔⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃΔⵠⵠΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        ΔΔᐃ: ΔΔ.ⲆᐃΔⲆⲆᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃΔⲆⵠⵠⵠⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃᐃⲆΔⵠⵠⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⲆᐃⲆΔⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        ΔΔᐃ: ΔΔ.ⲆⵠΔΔⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠᐃⵠᐃⲆ,
        ⲆᐃᐃΔ: ΔΔ.ⲆΔᐃᐃⵠᐃⲆ,
        ΔⲆⵠⵠ: ΔΔ.ΔⵠᐃⵠΔΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Cursed"
      }, {
        id: 48,
        ΔΔᐃ: ΔΔ.ⲆⵠⵠᐃᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔᐃΔⲆⲆⲆⲆ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⵠΔⲆⲆⲆⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠᐃΔΔΔᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ⲆᐃⲆⵠⲆⵠᐃ,
        ᐃᐃΔ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠⵠᐃΔⲆ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠΔᐃᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ΔΔⵠⵠΔⲆⲆ,
        ΔⲆⵠⵠ: ΔΔ.ᐃⲆⲆᐃᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ⲆᐃⲆⵠⲆⵠᐃ,
        ᐃᐃΔ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ΔΔᐃ: ΔΔ.ΔⲆⲆᐃΔᐃⲆ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⲆⲆΔΔⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⵠᐃⵠΔΔΔᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆⵠⲆᐃⲆᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ⲆᐃⲆⵠⲆⵠᐃ,
        ᐃᐃΔ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ΔΔᐃ: ΔΔ.ΔⲆⵠⲆⲆΔⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠⵠⲆᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ᐃⲆΔᐃⵠᐃⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⲆⵠⵠⵠΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ⲆᐃⲆⵠⲆⵠᐃ,
        ᐃᐃΔ: "OmarJr13",
        name: "Blob Skin"
      }, {
        id: 237,
        ΔΔᐃ: ΔΔ.ᐃᐃⲆⲆΔⲆΔ,
        ⲆⲆΔ: ΔΔ.ⵠⲆᐃᐃⵠⲆᐃ,
        ⲆᐃᐃΔ: ΔΔ.ΔⲆⲆⲆⵠΔⵠ,
        ΔⲆⵠⵠ: ΔΔ.ⵠⵠΔⵠᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ⲆᐃⲆⵠⲆⵠᐃ,
        ᐃᐃΔ: "NotBonnie",
        name: "NotBonnie"
      }, {
        id: 238,
        ΔΔᐃ: ΔΔ.ⵠΔⵠⵠΔᐃΔ,
        ⲆⲆΔ: ΔΔ.ΔΔⵠᐃΔᐃⵠ,
        ⲆᐃᐃΔ: ΔΔ.ⲆᐃᐃⲆᐃⲆᐃ,
        ΔⲆⵠⵠ: ΔΔ.ⲆΔΔΔᐃⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ⲆᐃⲆⵠⲆⵠᐃ,
        ᐃᐃΔ: "NotBonnie",
        name: "Cynder"
      }],
      ᐃᐃⲆΔ: [{
        id: 0,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃⲆⲆⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⲆΔⲆΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        ΔΔᐃ: ΔΔ.ΔⲆⵠᐃᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⵠⲆⲆΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ΔΔᐃ: ΔΔ.ΔⲆᐃΔⵠᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔᐃⵠΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ΔΔᐃ: ΔΔ.ⵠΔⵠᐃⵠⲆΔ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠᐃⲆᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ΔΔᐃ: ΔΔ.ᐃⲆᐃⲆΔΔᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔΔⲆⵠᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        ΔΔᐃ: ΔΔ.ᐃΔᐃⲆⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔⲆΔᐃⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆⵠⵠᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⵠΔΔⲆᐃΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ΔΔᐃ: ΔΔ.ⵠⵠᐃⲆⲆⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆΔⲆⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ΔΔᐃ: ΔΔ.ⲆⵠⵠⵠᐃᐃⲆ,
        ⲆⲆΔ: ΔΔ.ΔⲆⵠⲆΔΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ΔΔᐃ: ΔΔ.ⲆⲆΔᐃⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃΔΔⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ΔΔᐃ: ΔΔ.ᐃᐃⵠΔΔⲆΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⲆⵠⵠⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ΔΔᐃ: ΔΔ.ⲆⵠΔΔᐃⲆΔ,
        ⲆⲆΔ: ΔΔ.ᐃΔⵠⲆᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ΔΔᐃ: ΔΔ.ⵠⵠΔΔⲆⲆᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠΔⵠⲆΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ΔΔᐃ: ΔΔ.ΔᐃⵠΔΔⵠⵠ,
        ⲆⲆΔ: ΔΔ.ΔⲆⲆⲆᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ΔΔᐃ: ΔΔ.ⲆΔⵠⵠΔⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠⵠⵠᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ΔΔᐃ: ΔΔ.ᐃⵠⵠΔⵠⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⲆᐃⲆᐃⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ΔΔᐃ: ΔΔ.ⵠᐃΔⲆⲆⲆΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆᐃᐃⵠⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ΔΔᐃ: ΔΔ.ⵠᐃᐃΔᐃᐃⲆ,
        ⲆⲆΔ: ΔΔ.ᐃΔΔⵠⵠⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ΔΔᐃ: ΔΔ.ᐃⵠⲆⵠⲆⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⵠΔⲆᐃΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ΔΔᐃ: ΔΔ.ᐃⵠⵠΔⲆᐃΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃᐃᐃⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ΔΔᐃ: ΔΔ.ⲆⵠⵠⲆⲆᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃⵠᐃⲆΔⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ΔΔᐃ: ΔΔ.ⵠⵠⵠⲆΔᐃⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⲆᐃⵠⵠΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        ΔΔᐃ: ΔΔ.ΔⲆⵠᐃⲆΔΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠᐃΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        ΔΔᐃ: ΔΔ.ⵠᐃΔᐃⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔᐃⲆΔΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        ΔΔᐃ: ΔΔ.ΔᐃⵠⵠⵠⲆⵠ,
        ⲆⲆΔ: ΔΔ.ΔⲆΔᐃⵠⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ΔΔᐃ: ΔΔ.ΔⲆⲆⵠᐃⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔⲆⲆΔᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ΔΔᐃ: ΔΔ.ⲆⵠⲆᐃⲆⵠⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠⲆᐃⵠⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ΔΔᐃ: ΔΔ.ⵠⵠᐃΔⲆΔᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔΔᐃᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ΔΔᐃ: ΔΔ.ᐃΔᐃⵠⵠΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔᐃᐃⵠΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ΔΔᐃ: ΔΔ.ΔΔⵠᐃⵠⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆᐃΔᐃⲆⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠΔⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⵠᐃⵠⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ΔΔᐃ: ΔΔ.ⲆᐃᐃⲆⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔⵠΔᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ΔΔᐃ: ΔΔ.ⲆΔΔᐃⲆⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔⵠΔᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ΔΔᐃ: ΔΔ.ᐃᐃⲆⲆⲆΔⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⵠΔⲆΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ΔΔᐃ: ΔΔ.ΔⲆΔⵠᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⲆΔⵠᐃᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ΔΔᐃ: ΔΔ.ⵠⵠⵠᐃⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔΔⲆΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ΔΔᐃ: ΔΔ.ΔᐃΔⵠⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⵠᐃⲆᐃⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        ΔΔᐃ: ΔΔ.ⵠⵠⵠⵠᐃᐃΔ,
        ⲆⲆΔ: ΔΔ.ΔᐃⵠΔⲆΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        ΔΔᐃ: ΔΔ.ᐃⵠΔⲆΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔⵠⲆⵠΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        ΔΔᐃ: ΔΔ.ⲆΔΔΔΔΔⲆ,
        ⲆⲆΔ: ΔΔ.Ⲇᐃⵠᐃᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        ΔΔᐃ: ΔΔ.ᐃᐃΔΔⲆΔΔ,
        ⲆⲆΔ: ΔΔ.ΔΔⵠΔΔᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        ΔΔᐃ: ΔΔ.ⵠⵠᐃⵠⵠᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔⲆᐃΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        ΔΔᐃ: ΔΔ.ΔⵠᐃᐃᐃᐃΔ,
        ⲆⲆΔ: ΔΔ.ⵠⲆΔᐃⵠⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        ΔΔᐃ: ΔΔ.ⵠⵠΔⵠⲆⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃᐃΔⲆⲆⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ΔΔᐃ: ΔΔ.ⲆΔΔΔᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⵠΔᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ΔΔᐃ: ΔΔ.ⵠⵠⲆΔⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⵠΔΔᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ΔΔᐃ: ΔΔ.ᐃⲆⲆᐃᐃΔΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠΔⵠΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ΔΔᐃ: ΔΔ.ⵠΔᐃΔⲆᐃⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⲆᐃᐃⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ΔΔᐃ: ΔΔ.ΔⵠᐃⲆᐃⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔⵠᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ΔΔᐃ: ΔΔ.ΔΔⲆΔⲆΔΔ,
        ⲆⲆΔ: ΔΔ.ΔⲆᐃΔΔᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ΔΔᐃ: ΔΔ.ⵠⲆᐃⲆᐃΔᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⲆᐃᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ΔΔᐃ: ΔΔ.ᐃⲆⲆᐃⲆⵠΔ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠᐃΔⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ΔΔᐃ: ΔΔ.ΔᐃΔⲆΔⲆⲆ,
        ⲆⲆΔ: ΔΔ.ᐃᐃᐃΔΔΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ΔΔᐃ: ΔΔ.ᐃΔⵠⵠⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⲆⵠΔΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ΔΔᐃ: ΔΔ.Ⲇⵠⵠⵠⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔⲆⲆⵠⲆΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        ΔΔᐃ: ΔΔ.ⲆⵠⵠΔⵠⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⲆᐃΔᐃΔΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        ΔΔᐃ: ΔΔ.ΔⵠⲆⲆΔⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆⵠⲆⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        ΔΔᐃ: ΔΔ.ΔⲆΔⲆΔⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃⵠᐃΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        ΔΔᐃ: ΔΔ.ⲆⲆᐃΔⵠᐃⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⲆⵠᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ΔΔᐃ: ΔΔ.ᐃⲆᐃᐃᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃΔᐃᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ΔΔᐃ: ΔΔ.ⲆᐃᐃᐃⵠⲆΔ,
        ⲆⲆΔ: ΔΔ.Δⵠᐃᐃᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ΔΔᐃ: ΔΔ.ⲆⵠⲆΔⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⲆᐃⵠᐃᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ΔΔᐃ: ΔΔ.ΔⵠⵠⵠⲆΔΔ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆⵠᐃΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ΔΔᐃ: ΔΔ.ⲆΔⵠᐃᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔΔⵠⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ΔΔᐃ: ΔΔ.ᐃΔⵠⲆᐃΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠΔΔᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ΔΔᐃ: ΔΔ.ⵠⲆⵠⵠⲆⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⵠΔⲆΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ΔΔᐃ: ΔΔ.ⲆΔΔΔⲆⲆᐃ,
        ⲆⲆΔ: ΔΔ.Δⵠᐃⵠᐃᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ΔΔᐃ: ΔΔ.ⵠⵠⵠᐃⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔⲆⲆⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ΔΔᐃ: ΔΔ.ΔⵠΔⲆᐃᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆᐃⵠΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ΔΔᐃ: ΔΔ.ⲆⵠⲆⲆⵠⵠⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⲆΔⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆᐃΔⲆΔ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠⲆᐃΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        ΔΔᐃ: ΔΔ.ⲆⲆⵠⵠΔᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃⵠᐃΔᐃΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        ΔΔᐃ: ΔΔ.ᐃΔᐃΔⲆⲆⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠΔΔᐃᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ΔΔᐃ: ΔΔ.ⲆΔᐃⲆⲆⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⵠΔⵠⲆⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ΔΔᐃ: ΔΔ.ΔⵠΔΔΔⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠΔⵠᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠᐃⲆᐃⲆ,
        ⲆⲆΔ: ΔΔ.ΔᐃᐃΔᐃⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ΔΔᐃ: ΔΔ.ⲆⲆᐃⲆⲆⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⲆΔᐃᐃΔᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ΔΔᐃ: ΔΔ.ΔΔⵠΔⵠᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⵠᐃⵠΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ΔΔᐃ: ΔΔ.ᐃᐃΔᐃⲆⲆΔ,
        ⲆⲆΔ: ΔΔ.ΔⲆΔⲆᐃΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ΔΔᐃ: ΔΔ.ⲆᐃⵠⲆⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⵠᐃᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ΔΔᐃ: ΔΔ.ⲆⲆΔΔⲆⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⲆΔⲆΔⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ΔΔᐃ: ΔΔ.ⲆⲆΔⲆΔᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔⲆⵠⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Engineer Bag"
      }],
      ᐃⵠⵠΔⵠ: [{
        id: 0,
        ΔΔᐃ: ΔΔ.ᐃⲆⲆΔΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⲆᐃΔⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ΔΔᐃ: ΔΔ.ⵠⵠⲆⲆᐃⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆᐃΔⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ΔΔᐃ: ΔΔ.ⲆΔⵠᐃᐃⲆⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠⲆᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃᐃΔⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⵠΔᐃⲆᐃⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ΔΔᐃ: ΔΔ.ⵠᐃᐃᐃᐃⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔⵠⵠⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        ΔΔᐃ: ΔΔ.ⲆΔᐃΔΔᐃⲆ,
        ⲆⲆΔ: ΔΔ.ΔΔⲆΔᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ΔΔᐃ: ΔΔ.ᐃⵠⲆⲆᐃᐃⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⲆⲆΔᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        ΔΔᐃ: ΔΔ.ⲆⵠᐃⵠⲆⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⵠᐃΔⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ΔΔᐃ: ΔΔ.ⲆᐃⲆⲆΔᐃΔ,
        ⲆⲆΔ: ΔΔ.ΔⲆⵠΔⵠΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ΔΔᐃ: ΔΔ.ΔⵠⵠⲆⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ΔΔⵠΔᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ΔΔᐃ: ΔΔ.ΔΔᐃᐃⲆᐃⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⵠⵠᐃᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ΔΔᐃ: ΔΔ.ᐃⵠᐃᐃⲆⵠⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⵠⵠⵠⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ΔΔᐃ: ΔΔ.ΔⲆΔΔⵠⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔⲆⵠΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ΔΔᐃ: ΔΔ.ⲆⲆᐃⲆⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔᐃⵠΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆᐃⵠΔᐃ,
        ⲆⲆΔ: ΔΔ.Ⲇᐃᐃᐃⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ΔΔᐃ: ΔΔ.ᐃⵠΔⲆᐃΔΔ,
        ⲆⲆΔ: ΔΔ.ΔⵠⲆΔⵠΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ΔΔᐃ: ΔΔ.ⲆⲆⵠΔᐃⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⵠΔᐃΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆⵠᐃⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⲆΔᐃⲆⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃᐃⵠⵠΔ,
        ⲆⲆΔ: ΔΔ.ⵠΔⲆⵠⲆⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        ΔΔᐃ: ΔΔ.ⲆΔⲆᐃΔΔΔ,
        ⲆⲆΔ: ΔΔ.ΔᐃΔⲆΔⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ΔΔᐃ: ΔΔ.ⵠⵠΔⲆΔⵠⲆ,
        ⲆⲆΔ: ΔΔ.ΔᐃᐃⲆᐃΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ΔΔᐃ: ΔΔ.ⵠⲆⵠⲆᐃⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔⲆΔⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ΔΔᐃ: ΔΔ.ⵠⲆᐃⲆᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃⲆᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ΔΔᐃ: ΔΔ.ΔΔⵠⵠΔΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⵠΔⲆΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ΔΔᐃ: ΔΔ.ⲆⵠⵠⵠⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⲆᐃᐃⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ΔΔᐃ: ΔΔ.ⵠⵠᐃΔⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⵠᐃᐃᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        ΔΔᐃ: ΔΔ.ΔΔᐃᐃΔⵠΔ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆⵠⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        ΔΔᐃ: ΔΔ.ⲆⵠΔⲆⲆᐃⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠᐃΔᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        ΔΔᐃ: ΔΔ.ⲆΔΔⵠⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔΔⵠⵠⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        ΔΔᐃ: ΔΔ.ⵠᐃΔⵠΔⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆⲆⲆⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ΔΔᐃ: ΔΔ.ᐃΔᐃⵠΔᐃΔ,
        ⲆⲆΔ: ΔΔ.ⵠΔⲆΔⲆⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ΔΔᐃ: ΔΔ.ⵠΔΔᐃΔᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⲆᐃᐃⲆⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ΔΔᐃ: ΔΔ.ⵠΔΔᐃΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃᐃΔⲆΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ΔΔᐃ: ΔΔ.ⲆᐃΔⲆΔᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃⲆⵠΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ΔΔᐃ: ΔΔ.ⵠᐃΔⲆⵠⲆⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠᐃⲆⲆⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ΔΔᐃ: ΔΔ.ᐃᐃⲆᐃᐃΔᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃᐃᐃᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃⵠⲆⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆᐃⲆΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        ΔΔᐃ: ΔΔ.ΔΔᐃᐃᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠᐃᐃⵠᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        ΔΔᐃ: ΔΔ.ⲆⲆΔⵠⲆΔᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⲆΔᐃΔⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ΔΔᐃ: ΔΔ.ᐃᐃⵠⲆⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⲆⲆΔⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ΔΔᐃ: ΔΔ.ⵠⲆⲆΔⲆⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⵠΔΔΔΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ΔΔᐃ: ΔΔ.ⲆⲆⵠΔⲆᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⲆᐃⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ΔΔᐃ: ΔΔ.ΔΔᐃⲆᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔⲆⵠᐃΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ΔΔᐃ: ΔΔ.ⲆⲆΔᐃⵠΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⲆΔⲆΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ΔΔᐃ: ΔΔ.ΔᐃⵠⵠΔⵠⵠ,
        ⲆⲆΔ: ΔΔ.ᐃΔᐃⲆᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ΔΔᐃ: ΔΔ.ⲆⵠΔΔᐃⵠΔ,
        ⲆⲆΔ: ΔΔ.ⵠⲆΔⵠⲆⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ΔΔᐃ: ΔΔ.ⲆΔⲆᐃⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃᐃⲆⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ΔΔᐃ: ΔΔ.ⵠΔⵠΔΔᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆⲆᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        ΔΔᐃ: ΔΔ.ᐃΔᐃΔⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⲆΔⵠΔⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        ΔΔᐃ: ΔΔ.ᐃⵠⲆⵠⵠⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔᐃⵠᐃᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ΔΔᐃ: ΔΔ.ΔⵠΔᐃⵠⲆⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠⵠⵠⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        ΔΔᐃ: ΔΔ.ⲆⲆᐃⵠᐃⲆΔ,
        ⲆⲆΔ: ΔΔ.ΔΔΔΔΔⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ΔΔᐃ: ΔΔ.ⲆⵠΔⲆⲆⵠⵠ,
        ⲆⲆΔ: ΔΔ.ΔᐃⵠⲆᐃⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ΔΔᐃ: ΔΔ.ΔᐃⵠⵠⲆⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔⵠⲆⵠⵠΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ΔΔᐃ: ΔΔ.ΔᐃᐃⵠⲆᐃⲆ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠⵠΔΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ΔΔᐃ: ΔΔ.ⵠⲆⲆⵠⲆⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⲆᐃⲆⲆᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆΔΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔΔΔⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ΔΔᐃ: ΔΔ.ᐃΔⲆⲆΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔᐃΔⲆΔΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ΔΔᐃ: ΔΔ.ᐃⲆΔⲆᐃⲆΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆᐃⲆⵠΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ΔΔᐃ: ΔΔ.ΔΔⲆⵠᐃᐃΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔᐃΔⵠⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ΔΔᐃ: ΔΔ.ΔΔᐃⲆΔⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔΔᐃⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ΔΔᐃ: ΔΔ.ᐃⲆⲆᐃⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆⲆⵠⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ΔΔᐃ: ΔΔ.ᐃⵠᐃΔΔⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⵠⲆⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ΔΔᐃ: ΔΔ.ΔᐃⲆⲆⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⲆΔⲆΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆⵠᐃⵠⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⲆᐃᐃᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ΔΔᐃ: ΔΔ.ᐃᐃⵠᐃⲆΔΔ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃⲆᐃᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ΔΔᐃ: ΔΔ.ⲆᐃⲆⲆⲆⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔᐃⲆⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃΔⵠⲆΔ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆΔⲆⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ΔΔᐃ: ΔΔ.ΔᐃⵠⲆⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔⲆⵠⵠᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ΔΔᐃ: ΔΔ.ⵠⲆᐃΔⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⲆⲆΔⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ΔΔᐃ: ΔΔ.ΔᐃⲆᐃΔΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔⲆⲆⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ΔΔᐃ: ΔΔ.ⲆΔⲆⵠᐃⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆΔⵠΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ΔΔᐃ: ΔΔ.ⲆΔⵠᐃⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆⵠᐃΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ΔΔᐃ: ΔΔ.ⵠⲆᐃᐃᐃⲆΔ,
        ⲆⲆΔ: ΔΔ.ΔⵠΔᐃΔᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ΔΔᐃ: ΔΔ.ⲆⵠᐃⵠΔⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⵠⲆⵠⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ΔΔᐃ: ΔΔ.ⲆⵠⵠⲆⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠΔΔⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        ΔΔᐃ: ΔΔ.ᐃⲆⲆⵠⵠΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠΔᐃᐃΔⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        ΔΔᐃ: ΔΔ.ᐃⵠΔΔᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⲆᐃᐃΔⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        ΔΔᐃ: ΔΔ.ΔᐃⲆⵠⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠΔᐃⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }],
      ⲆΔⲆⲆⲆ: [{
        id: 0,
        ΔΔᐃ: ΔΔ.ΔⵠⲆᐃΔᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃⵠⵠⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ΔΔᐃ: ΔΔ.ᐃᐃⵠᐃⵠⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔᐃⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ΔΔᐃ: ΔΔ.ⵠΔⵠΔΔΔⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠΔΔᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ΔΔᐃ: ΔΔ.ᐃⵠΔᐃᐃΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔᐃⵠⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        ΔΔᐃ: ΔΔ.ⲆⵠΔⲆⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⲆⵠⵠΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ΔΔᐃ: ΔΔ.ᐃᐃⲆΔΔΔᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠΔᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ΔΔᐃ: ΔΔ.ⵠᐃᐃⵠⲆΔⵠ,
        ⲆⲆΔ: ΔΔ.ΔᐃⵠⲆΔΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ΔΔᐃ: ΔΔ.ΔᐃⵠⲆⲆⵠⲆ,
        ⲆⲆΔ: ΔΔ.ΔᐃⲆᐃᐃΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        ΔΔᐃ: ΔΔ.ᐃⲆᐃᐃᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠᐃⵠΔΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ΔΔᐃ: ΔΔ.ᐃⵠᐃᐃⲆⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⵠᐃΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ΔΔᐃ: ΔΔ.ᐃΔΔⲆᐃᐃΔ,
        ⲆⲆΔ: ΔΔ.ⵠⲆᐃⵠᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        ΔΔᐃ: ΔΔ.ᐃⵠᐃΔⵠΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠΔᐃΔⲆⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        ΔΔᐃ: ΔΔ.ⲆⵠᐃΔᐃᐃⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⲆⲆΔⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ΔΔᐃ: ΔΔ.ᐃΔΔⵠⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⲆΔⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        ΔΔᐃ: ΔΔ.ΔΔⵠᐃⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ᐃᐃΔⲆⵠⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        ΔΔᐃ: ΔΔ.ΔⵠⲆⲆΔᐃΔ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆⵠᐃᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ΔΔᐃ: ΔΔ.ⲆᐃΔΔΔΔΔ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠᐃⲆᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ΔΔᐃ: ΔΔ.ᐃⵠⲆⲆΔᐃΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠΔⲆΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ΔΔᐃ: ΔΔ.ΔΔⲆⲆⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⲆΔⲆⲆⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ΔΔᐃ: ΔΔ.ⲆⲆⵠΔΔⵠⲆ,
        ⲆⲆΔ: ΔΔ.ΔΔⵠⲆΔΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ΔΔᐃ: ΔΔ.ᐃΔⲆᐃⲆᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⲆⵠᐃᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ΔΔᐃ: ΔΔ.ⵠᐃⵠᐃΔⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⲆᐃᐃΔⵠⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃⲆΔⵠⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⵠᐃⵠΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ΔΔᐃ: ΔΔ.ᐃⵠⵠⲆᐃΔᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⲆⲆΔⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ΔΔᐃ: ΔΔ.ⵠⲆᐃⵠΔⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⵠᐃᐃΔⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ΔΔᐃ: ΔΔ.ᐃⲆᐃᐃΔΔΔ,
        ⲆⲆΔ: ΔΔ.ⵠⵠᐃⵠΔᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ΔΔᐃ: ΔΔ.ΔⲆⲆⵠⵠⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠⲆⵠΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ΔΔᐃ: ΔΔ.ᐃⵠⵠⲆⵠᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⵠᐃᐃᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        ΔΔᐃ: ΔΔ.ΔⲆΔΔᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⲆᐃⵠΔⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        ΔΔᐃ: ΔΔ.ΔⵠᐃⲆⵠⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆΔᐃⲆⲆⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        ΔΔᐃ: ΔΔ.ⲆΔᐃⵠⲆΔΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⵠⲆⵠᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠᐃᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠⲆΔᐃⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆᐃΔⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠⵠᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ΔΔᐃ: ΔΔ.ⵠⲆⵠⲆⵠⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠⵠⵠⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ΔΔᐃ: ΔΔ.ⲆΔⲆᐃΔᐃⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⲆⵠΔᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ΔΔᐃ: ΔΔ.ΔⲆᐃⵠⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔᐃⲆΔᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ΔΔᐃ: ΔΔ.ⲆᐃΔᐃⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠᐃΔᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ΔΔᐃ: ΔΔ.ⵠᐃΔᐃⵠⲆⲆ,
        ⲆⲆΔ: ΔΔ.ᐃΔΔⲆΔᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        ΔΔᐃ: ΔΔ.ⵠΔⲆⲆΔᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⲆΔΔΔᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        ΔΔᐃ: ΔΔ.ΔⵠᐃΔᐃΔⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔⵠΔᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ΔΔᐃ: ΔΔ.ⲆᐃᐃⲆⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔΔⵠⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ΔΔᐃ: ΔΔ.ⲆⵠᐃⵠⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⲆⲆⵠᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ΔΔᐃ: ΔΔ.ⵠΔᐃΔⵠΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔᐃΔᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ΔΔᐃ: ΔΔ.ⵠⵠΔᐃᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔΔⵠΔᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        ΔΔᐃ: ΔΔ.ⲆⵠΔᐃΔⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠⵠᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ΔΔᐃ: ΔΔ.ᐃⵠⵠⵠᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔΔⵠᐃΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ΔΔᐃ: ΔΔ.ⲆᐃᐃⵠΔⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃᐃⲆⵠΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ΔΔᐃ: ΔΔ.ᐃⲆⲆⲆΔᐃΔ,
        ⲆⲆΔ: ΔΔ.ⵠΔⲆᐃᐃⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ΔΔᐃ: ΔΔ.ᐃⵠⵠᐃᐃᐃⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⵠⵠⲆΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠⲆⵠⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⵠΔᐃᐃΔΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Cursed Book"
      }],
      ᐃⲆⲆⲆΔ: [{
        id: 0,
        ΔΔᐃ: ΔΔ.ᐃΔⵠⵠⵠᐃⲆ,
        ⲆⲆΔ: ΔΔ.ᐃΔⵠⵠⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ΔΔᐃ: ΔΔ.ⲆⵠⲆⵠᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔⲆⵠᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ΔΔᐃ: ΔΔ.ⲆⲆΔⲆᐃⲆⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⵠⲆⲆⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        ΔΔᐃ: ΔΔ.ΔΔᐃᐃΔΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃⵠΔⵠⵠⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ΔΔᐃ: ΔΔ.ΔⲆΔΔΔΔΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠᐃᐃΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.Δᐃⵠⵠⵠ,
        ᐃᐃΔ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        ΔΔᐃ: ΔΔ.ΔⵠⲆⵠᐃⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠⲆΔᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ΔΔᐃ: ΔΔ.ᐃⲆΔᐃⵠⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆᐃⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        ΔΔᐃ: ΔΔ.ΔⵠΔΔⲆⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⵠⲆⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ΔΔᐃ: ΔΔ.ⲆᐃΔⲆⵠᐃΔ,
        ⲆⲆΔ: ΔΔ.ΔᐃᐃⵠΔⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ΔΔᐃ: ΔΔ.ⲆⵠᐃᐃⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ΔᐃⲆⵠⲆⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ΔΔᐃ: ΔΔ.ⲆᐃΔΔᐃΔⲆ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⲆᐃⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆᐃᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆΔΔⵠⲆⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ΔΔᐃ: ΔΔ.ΔⲆᐃⵠΔΔΔ,
        ⲆⲆΔ: ΔΔ.ᐃΔⵠΔⵠΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠⵠⲆⲆⲆ,
        ⲆⲆΔ: ΔΔ.ᐃΔⵠⲆⵠᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠΔᐃ,
        ᐃᐃΔ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ΔΔᐃ: ΔΔ.ᐃⵠΔΔⲆᐃⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠⲆᐃⲆⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        ΔΔᐃ: ΔΔ.ᐃΔⵠⵠΔⵠᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⵠΔᐃⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ΔΔᐃ: ΔΔ.ΔΔΔᐃⲆⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔⵠΔⲆⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ΔΔᐃ: ΔΔ.ⲆᐃⵠᐃⵠⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⵠΔⲆⲆⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ΔΔᐃ: ΔΔ.ΔⵠΔⲆⲆᐃⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⵠᐃᐃⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ΔΔᐃ: ΔΔ.ᐃΔⲆⵠᐃΔΔ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃⲆⲆᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        ΔΔᐃ: ΔΔ.ᐃΔⵠΔᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔⵠΔⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ΔΔᐃ: ΔΔ.ΔⵠᐃᐃΔⵠΔ,
        ⲆⲆΔ: ΔΔ.ΔᐃᐃⵠⲆΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ΔΔᐃ: ΔΔ.ⲆⲆΔⲆᐃᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠᐃΔᐃⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠᐃΔⵠΔ,
        ⲆⲆΔ: ΔΔ.ᐃᐃΔⲆᐃΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ΔΔᐃ: ΔΔ.ΔⵠΔⵠᐃⵠⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⵠΔᐃΔⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ΔΔᐃ: ΔΔ.ⵠⲆΔᐃΔΔⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⲆΔΔᐃᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ΔΔᐃ: ΔΔ.ⲆⲆΔᐃᐃⵠⲆ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠⵠⵠⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ΔΔᐃ: ΔΔ.ᐃΔΔᐃⵠᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃᐃᐃⲆⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆⵠΔⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔᐃⲆᐃᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        ΔΔᐃ: ΔΔ.ⲆΔΔᐃⲆΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆᐃᐃᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        ΔΔᐃ: ΔΔ.ᐃΔᐃⲆⵠΔⵠ,
        ⲆⲆΔ: ΔΔ.ΔΔⵠΔⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        ΔΔᐃ: ΔΔ.ⲆⲆⵠΔⵠⵠⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⲆΔᐃᐃᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        ΔΔᐃ: ΔΔ.ⵠΔᐃΔⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔΔⵠᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        ΔΔᐃ: ΔΔ.ⲆⲆⲆᐃⵠΔⵠ,
        ⲆⲆΔ: ΔΔ.ᐃΔⲆⲆⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ΔΔᐃ: ΔΔ.ⲆΔΔᐃᐃⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆⲆΔⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ΔΔᐃ: ΔΔ.ⵠⲆⲆΔⲆⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⲆΔⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ΔΔᐃ: ΔΔ.ⵠⲆⲆᐃⵠΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃΔⲆᐃᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        ΔΔᐃ: ΔΔ.ⲆᐃΔᐃⲆⵠⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⵠⵠⲆᐃᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ΔΔᐃ: ΔΔ.ΔᐃⵠΔᐃⵠΔ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠⲆⲆⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃⲆΔΔⵠ,
        ⲆⲆΔ: ΔΔ.ΔⵠΔⲆᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ΔΔᐃ: ΔΔ.ΔⵠⲆᐃⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⲆⵠⵠⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ΔΔᐃ: ΔΔ.ⵠⲆⵠᐃⲆᐃΔ,
        ⲆⲆΔ: ΔΔ.ΔΔⲆᐃΔⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ΔΔᐃ: ΔΔ.ᐃᐃᐃᐃᐃⵠΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⲆΔΔⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ΔΔᐃ: ΔΔ.ᐃⲆΔᐃⲆΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆⲆᐃᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ΔΔᐃ: ΔΔ.ⲆⲆΔΔⵠⵠⵠ,
        ⲆⲆΔ: ΔΔ.ΔΔⲆᐃⲆⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ΔΔᐃ: ΔΔ.ΔΔⵠᐃⵠⲆⵠ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⵠᐃⲆⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        ΔΔᐃ: ΔΔ.ΔⵠⲆΔⵠᐃⲆ,
        ⲆⲆΔ: ΔΔ.ΔⲆⵠᐃᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        ΔΔᐃ: ΔΔ.ⲆⲆᐃΔΔΔΔ,
        ⲆⲆΔ: ΔΔ.ΔⲆᐃΔᐃᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        ΔΔᐃ: ΔΔ.ΔΔᐃⲆⵠᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⵠⲆⲆⵠⲆⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        ΔΔᐃ: ΔΔ.ⲆⲆΔᐃⲆⲆⵠ,
        ⲆⲆΔ: ΔΔ.ᐃᐃᐃⲆᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        ΔΔᐃ: ΔΔ.ΔⲆᐃᐃⲆΔⵠ,
        ⲆⲆΔ: ΔΔ.ᐃᐃΔⲆᐃⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        ΔΔᐃ: ΔΔ.ᐃΔΔⵠⵠΔᐃ,
        ⲆⲆΔ: ΔΔ.ᐃᐃⲆⲆᐃΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        ΔΔᐃ: ΔΔ.ᐃΔᐃᐃⵠᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔᐃΔΔⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃᐃᐃⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        ΔΔᐃ: ΔΔ.ⲆⵠΔⵠᐃⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⵠΔΔⲆⲆⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ΔΔᐃ: ΔΔ.ΔΔⵠᐃⵠⲆⲆ,
        ⲆⲆΔ: ΔΔ.ᐃΔⲆᐃΔⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ΔΔᐃ: ΔΔ.ΔΔⲆᐃΔᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⵠⵠΔᐃᐃΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        ΔΔᐃ: ΔΔ.ᐃⵠΔᐃⲆⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⲆⲆΔⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ΔΔᐃ: ΔΔ.ⲆⵠⵠⵠΔⵠΔ,
        ⲆⲆΔ: ΔΔ.ⵠΔᐃΔⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ΔΔᐃ: ΔΔ.ⵠⵠΔⲆᐃⵠΔ,
        ⲆⲆΔ: ΔΔ.ΔΔⲆΔⲆᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ΔΔᐃ: ΔΔ.ⵠⲆⵠΔΔΔΔ,
        ⲆⲆΔ: ΔΔ.ᐃΔⲆⲆᐃΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ΔΔᐃ: ΔΔ.ⲆⲆⵠᐃⵠᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆⵠⲆᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ΔΔᐃ: ΔΔ.ᐃⵠⲆᐃΔᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔΔᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠⵠⵠᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔⵠⵠⵠᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ΔΔᐃ: ΔΔ.ⲆᐃΔΔᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔⲆⵠᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ΔΔᐃ: ΔΔ.ⵠᐃΔⲆⲆΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠΔΔΔΔΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ΔΔᐃ: ΔΔ.ⵠⵠᐃⵠⵠΔⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃᐃᐃⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆΔᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⲆΔⲆⲆᐃⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ΔΔᐃ: ΔΔ.ΔⵠⵠⵠⲆⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔⲆⵠⲆᐃΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ΔΔᐃ: ΔΔ.ᐃΔᐃⵠΔⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃᐃᐃΔᐃⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ΔΔᐃ: ΔΔ.ⲆᐃΔⲆⵠᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔⵠΔΔⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ΔΔᐃ: ΔΔ.ⵠΔⲆⲆᐃΔᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⲆΔⲆΔΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ΔΔᐃ: ΔΔ.ΔⵠⵠⵠⲆⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠᐃᐃⵠⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ΔΔᐃ: ΔΔ.ⵠⵠᐃᐃΔⲆⵠ,
        ⲆⲆΔ: ΔΔ.ᐃΔⲆⲆΔΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ΔΔᐃ: ΔΔ.ᐃᐃⲆΔⲆⲆⲆ,
        ⲆⲆΔ: ΔΔ.ΔⵠᐃᐃΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ΔΔᐃ: ΔΔ.ⲆⲆᐃⲆⲆᐃᐃ,
        ⲆⲆΔ: ΔΔ.ΔᐃᐃΔΔΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ΔΔᐃ: ΔΔ.ⵠⲆⵠⲆⲆⵠΔ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔΔᐃΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ΔΔᐃ: ΔΔ.ⵠᐃΔⵠΔᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔΔⵠᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ΔΔᐃ: ΔΔ.ᐃⵠⲆⵠᐃⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⵠᐃᐃⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        ΔΔᐃ: ΔΔ.ΔΔⵠⵠⵠⵠⲆ,
        ⲆⲆΔ: ΔΔ.ᐃⲆᐃΔⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        ΔΔᐃ: ΔΔ.ⲆΔΔᐃⵠⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔᐃΔⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        ΔΔᐃ: ΔΔ.ᐃΔΔᐃⵠᐃΔ,
        ⲆⲆΔ: ΔΔ.ΔΔⲆᐃᐃΔΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        ΔΔᐃ: ΔΔ.ⵠⲆΔᐃΔᐃⵠ,
        ⲆⲆΔ: ΔΔ.ΔΔᐃⵠΔᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        ΔΔᐃ: ΔΔ.ⵠⲆΔⵠΔⵠΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆᐃᐃΔᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⲆⵠⲆ,
        ᐃᐃΔ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 27,
        ΔΔᐃ: ΔΔ.ᐃΔᐃᐃⲆⵠΔ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⲆⵠⵠΔⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ΔΔᐃ: ΔΔ.ΔⲆᐃΔⲆⲆⲆ,
        ⲆⲆΔ: ΔΔ.ᐃΔⵠⲆⲆΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ΔΔᐃ: ΔΔ.ᐃⲆⲆⲆⵠΔⵠ,
        ⲆⲆΔ: ΔΔ.ⵠΔΔⵠⵠᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ΔΔᐃ: ΔΔ.ΔΔΔᐃⲆΔⲆ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⲆⲆⵠⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ΔΔᐃ: ΔΔ.ΔⲆᐃΔᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆΔᐃΔΔⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ΔΔᐃ: ΔΔ.ⲆᐃⵠⲆΔⲆΔ,
        ⲆⲆΔ: ΔΔ.ΔⲆⵠᐃⲆΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ΔΔᐃ: ΔΔ.ΔΔⲆⲆᐃⲆΔ,
        ⲆⲆΔ: ΔΔ.ΔΔⲆΔΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ΔΔᐃ: ΔΔ.ᐃΔᐃⵠⲆᐃΔ,
        ⲆⲆΔ: ΔΔ.ⵠⵠⵠᐃⵠΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        ΔΔᐃ: ΔΔ.ΔᐃⵠⲆⲆⲆᐃ,
        ⲆⲆΔ: ΔΔ.ⲆⵠΔᐃⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔⲆᐃᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 60,
        ΔΔᐃ: ΔΔ.ᐃΔⲆᐃᐃᐃⵠ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⲆΔⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ΔΔᐃ: ΔΔ.ⲆΔᐃᐃⲆⲆΔ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⲆᐃᐃΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆΔⲆΔΔ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⲆⲆΔⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ΔΔᐃ: ΔΔ.ⵠᐃⵠⵠᐃⵠΔ,
        ⲆⲆΔ: ΔΔ.ΔⲆⵠΔᐃⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ΔΔᐃ: ΔΔ.ΔⵠⲆᐃΔᐃΔ,
        ⲆⲆΔ: ΔΔ.ᐃⲆᐃⲆᐃⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ΔΔᐃ: ΔΔ.ⵠΔᐃⲆⲆΔΔ,
        ⲆⲆΔ: ΔΔ.ΔᐃΔᐃⵠⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ΔΔᐃ: ΔΔ.ΔᐃⲆΔⵠΔᐃ,
        ⲆⲆΔ: ΔΔ.ⵠΔᐃᐃᐃᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ΔΔᐃ: ΔΔ.ᐃΔⲆΔᐃⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⵠΔᐃΔᐃⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ΔΔᐃ: ΔΔ.ⵠⵠⵠⲆΔΔΔ,
        ⲆⲆΔ: ΔΔ.ⵠⲆΔᐃⲆᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        ΔΔᐃ: ΔΔ.ᐃⵠᐃⲆⲆⲆᐃ,
        ⲆⲆΔ: ΔΔ.ΔΔΔⲆᐃᐃΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Jarred Horns"
      }, {
        id: 98,
        ΔΔᐃ: ΔΔ.ᐃΔΔᐃᐃΔᐃ,
        ⲆⲆΔ: ΔΔ.ΔᐃⵠᐃⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        ΔΔᐃ: ΔΔ.ⲆᐃᐃᐃⲆᐃⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃΔⵠⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        ΔΔᐃ: ΔΔ.ⵠᐃⵠⲆᐃᐃᐃ,
        ⲆⲆΔ: ΔΔ.ⲆᐃⲆⵠΔᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        ΔΔᐃ: ΔΔ.ⲆΔⵠΔⵠΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⲆⵠⵠⵠᐃⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        ΔΔᐃ: ΔΔ.ΔᐃⵠᐃΔⵠⲆ,
        ⲆⲆΔ: ΔΔ.ᐃΔⲆⵠΔⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ΔΔᐃΔ,
        ᐃᐃΔ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        ΔΔᐃ: ΔΔ.ᐃⲆⲆᐃΔⲆⲆ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃΔΔΔᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ΔΔᐃ: ΔΔ.ⲆΔΔⵠᐃⵠⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⵠᐃⲆᐃⲆⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ΔΔᐃ: ΔΔ.ᐃᐃΔⲆⵠⵠᐃ,
        ⲆⲆΔ: ΔΔ.ΔⲆⲆΔᐃⵠⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ΔΔᐃ: ΔΔ.ᐃⲆⵠⵠΔΔⵠ,
        ⲆⲆΔ: ΔΔ.ΔᐃΔᐃΔⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        ΔΔᐃ: ΔΔ.ΔⵠⲆⵠⵠΔΔ,
        ⲆⲆΔ: ΔΔ.ⵠᐃⵠᐃᐃⲆᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ΔΔᐃ: ΔΔ.ⵠΔᐃᐃΔⵠⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔⲆⵠⵠΔⵠ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ΔΔᐃ: ΔΔ.ⵠᐃⲆΔⵠᐃⵠ,
        ⲆⲆΔ: ΔΔ.ᐃⲆⵠΔΔⲆⲆ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ΔΔᐃ: ΔΔ.ⲆⵠᐃΔⲆᐃⲆ,
        ⲆⲆΔ: ΔΔ.ⵠΔⵠⵠⵠⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ΔΔᐃ: ΔΔ.ΔᐃⲆⵠᐃⲆⵠ,
        ⲆⲆΔ: ΔΔ.ⲆⵠⲆᐃΔⵠΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ΔΔᐃ: ΔΔ.ᐃⵠⵠᐃⵠⲆΔ,
        ⲆⲆΔ: ΔΔ.ⵠᐃᐃⲆⲆᐃᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ΔΔᐃ: ΔΔ.ᐃⲆΔⵠᐃⵠⲆ,
        ⲆⲆΔ: ΔΔ.ⲆⲆᐃᐃⲆⲆΔ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ΔΔᐃ: ΔΔ.ⲆᐃΔᐃᐃΔⵠ,
        ⲆⲆΔ: ΔΔ.ⲆΔⵠΔᐃⵠᐃ,
        ⵠⲆᐃ: ⵠᐃᐃ.ᐃⵠⲆⵠᐃ,
        ᐃᐃΔ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    Cf.ΔΔⵠⲆⵠΔⵠ = ᐃⲆΔΔⲆⵠΔ(ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ, 21);
    Cf.ΔΔⲆΔⵠᐃᐃ = ᐃⲆΔΔⲆⵠΔ(ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ, 20);
    ᐃΔ[255] = [];
    ᐃΔ[7] = [];
    ᐃΔ[250] = [];
    ᐃΔ[28] = [];
    ᐃΔ[29] = [];
    ᐃΔ[796] = [];
    for (var a = 0; ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ.length > a; a++) {
      ᐃΔ[255][a] = [ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ[a].ΔΔᐃ, ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ[a].ⲆⲆΔ];
      ᐃΔ[7][a] = [ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ[a].ⲆᐃᐃΔ, ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ[a].ΔⲆⵠⵠ];
    }
    for (a = 0; ΔⵠⲆⲆ.ⲆΔⲆⲆⲆ.length > a; a++) {
      ᐃΔ[28][a] = [ΔⵠⲆⲆ.ⲆΔⲆⲆⲆ[a].ΔΔᐃ, ΔⵠⲆⲆ.ⲆΔⲆⲆⲆ[a].ⲆⲆΔ];
    }
    for (a = 0; a < ΔⵠⲆⲆ.ᐃⵠⵠΔⵠ.length; a++) {
      ᐃΔ[250][a] = [ΔⵠⲆⲆ.ᐃⵠⵠΔⵠ[a].ΔΔᐃ, ΔⵠⲆⲆ.ᐃⵠⵠΔⵠ[a].ⲆⲆΔ];
    }
    for (a = 0; a < ΔⵠⲆⲆ.ᐃᐃⲆΔ.length; a++) {
      ᐃΔ[29][a] = [ΔⵠⲆⲆ.ᐃᐃⲆΔ[a].ΔΔᐃ, ΔⵠⲆⲆ.ᐃᐃⲆΔ[a].ⲆⲆΔ];
    }
    for (a = 0; a < ΔⵠⲆⲆ.ᐃⲆⲆⲆΔ.length; a++) {
      ᐃΔ[796][a] = [ΔⵠⲆⲆ.ᐃⲆⲆⲆΔ[a].ΔΔᐃ, ΔⵠⲆⲆ.ᐃⲆⲆⲆΔ[a].ⲆⲆΔ];
    }
  };
  const qb = 7;
  const Nb = 17;
  const Ob = 1;
  function Hb(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var i = [{
      x: d,
      y: 0
    }];
    var a = [];
    for (var j = 1; c > j; j++) {
      i.push({
        x: Math.sin(j * f) * d,
        y: Math.cos(j * f) * d
      });
      var k = i.length;
      a.push(ΔΔⲆ.ⵠΔⵠΔᐃⲆΔ(i[k - 2], i[k - 1]));
    }
    a.push(ΔΔⲆ.ⵠΔⵠΔᐃⲆΔ(i[i.length - 1], i[0]));
    var l = a[a.length - 1];
    b.moveTo(l.x, l.y);
    for (j = 0; c > j; j++) {
      b.arcTo(i[j].x, i[j].y, a[j].x, a[j].y, e);
    }
    b.closePath();
  }
  const Ub = 3;
  function Yb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  const Kb = 4;
  const Vb = 1;
  function Xb(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var a = b * 8;
    var h = e.measureText(c).width + a * 2;
    d.width = h;
    d.height = f;
    Wb(e, 0, 0, h, f, b * 10);
    e.globalAlpha = 0.5;
    Lb(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, a, f / 2);
    return d;
  }
  function Zb(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 120;
    var k = c * 110;
    var a = j / 2;
    var m = k / 2;
    var n = c * 20;
    var h = c * 112;
    var g = c * 82;
    var l = h / 2;
    var o = g / 2;
    var b = c * 4;
    f.width = j;
    f.height = k;
    i.globalAlpha = 1;
    i.translate(a, m);
    Wb(i, -l, -o, h, g, n);
    Lb(i, e, e, b);
    return f;
  }
  const $b = 10;
  function ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    Lb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    Lb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    return d;
  }
  function id(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    jb(e, a * 26, a * 26, a * 9);
    Lb(e, c[0]);
    jb(e, a * 56, a * 36, a * 9);
    Lb(e, c[1]);
    jb(e, a * 40, a * 50, a * 9);
    Lb(e, c[2]);
    e.globalAlpha = 1;
    jb(e, a * 26, a * 26, a * 5);
    Lb(e, c[0]);
    jb(e, a * 56, a * 36, a * 5);
    Lb(e, c[1]);
    jb(e, a * 40, a * 50, a * 5);
    Lb(e, c[2]);
    return d;
  }
  const td = 0;
  function nd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    Wb(e, a * -8, a * -67, a * 16, a * 134, a * 1);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    Wb(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    Wb(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    Lb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123, a * 179.5);
    Wb(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    e.restore();
    Lb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    Wb(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    Lb(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    Lb(e, c[1]);
    return d;
  }
  function od(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    Wb(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    Wb(e, a * -8, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    Wb(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    Lb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    Wb(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    e.restore();
    Lb(e, c[3], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    Wb(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    Lb(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    Lb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    Lb(e, c[1]);
    return d;
  }
  function ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    jb(e, a * 11, a * 11, a * 10);
    Lb(e, c[0]);
    e.globalAlpha = 0.7;
    jb(e, a * 11, a * 11, a * 7);
    Lb(e, c[0]);
    e.globalAlpha = 1;
    jb(e, a * 11, a * 11, a * 4);
    Lb(e, c[0]);
    return d;
  }
  const rd = 2;
  function sd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    Wb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    Lb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    Wb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    Lb(e, c[1], c[2], a * 4);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    Lb(e, c[2], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    Lb(e, c[5], c[6], a * 4);
    jb(e, a * 68, a * 111.29513549804688, a * 15);
    Lb(e, c[7], c[8], a * 4);
    jb(e, a * 123, a * 111.29510498046875, a * 15);
    Lb(e, c[7], c[8], a * 4);
    jb(e, a * 63, a * 106, a * 5);
    Lb(e, c[9]);
    jb(e, a * 118, a * 106, a * 5);
    Lb(e, c[9]);
    return d;
  }
  function hd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    Wb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    Lb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    Wb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    Lb(e, c[1], c[2], a * 4);
    e.translate(a * 2, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    return d;
  }
  function gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    Wb(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 69.5, a * 110);
    Wb(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    Wb(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    Lb(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    Lb(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    Lb(e, c[3], c[1], a * 6);
    return d;
  }
  function ld(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    Wb(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    Lb(d, b[0], b[0], a * 4);
    d.translate(a * 2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    Lb(d, b[0], b[0], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    Wb(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    Lb(d, b[0], b[0], a * 4);
    return c;
  }
  function ud(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 40;
    var a = b * 40;
    e.width = i;
    e.height = a;
    var j = i * b / 2;
    var k = b * a / 2;
    var l = b * 15;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    jb(f, 0, 0, l);
    Lb(f, d[0]);
    l = b * 5;
    j = b * 2;
    k = b * 1;
    f.translate(j, k);
    f.globalAlpha = 1;
    jb(f, 0, 0, l);
    Lb(f, d[1]);
    f.restore();
    return e;
  }
  const bd = 5;
  function dd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    Lb(d, b[0]);
    return c;
  }
  function vd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 240;
    g.globalAlpha = 0.5;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    Lb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    Lb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    Lb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    Lb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    Lb(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    Lb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    Lb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    Lb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    Lb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    Lb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 59, b * 99);
    g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    g.closePath();
    Lb(g, d[3], d[2], b * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 47, b * 149);
      g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      g.closePath();
      Lb(g, d[1]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 40, b * 139);
      g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      g.closePath();
      Lb(g, d[3], d[2], b * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 41, b * 139);
      g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      g.closePath();
      Lb(g, d[3], d[2], b * 4);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 95);
    g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
    g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
    g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    g.closePath();
    Lb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 86);
    g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
    g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    g.closePath();
    Lb(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 117);
    g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    g.closePath();
    Lb(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 175);
    g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    g.closePath();
    Lb(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 169);
    g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    g.closePath();
    Lb(g, undefined, d[2], b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 136, b * 171);
    g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    g.closePath();
    Lb(g, undefined, d[2], b * 4);
    jb(g, b * 63, b * 180, b * 15.231546211727817);
    Lb(g, d[4]);
    jb(g, b * 121, b * 181, b * 15.652475842498529);
    Lb(g, d[4]);
    jb(g, b * 58, b * 175, b * 5.656854249492381);
    Lb(g, d[2]);
    jb(g, b * 116, b * 175, b * 5.656854249492381);
    Lb(g, d[2]);
    return f;
  }
  const md = 2;
  function cd(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 32;
    var a = c * 32;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 5;
    var g = c * 28;
    var l = h / 2;
    var o = g / 2;
    j.translate(c * 0, c * 0);
    j.translate(m, n);
    if (f == 1) {
      jb(j, 0, 0, c * 10);
      Lb(j, e[2], e[2], c * 3);
      for (var b = 0; b < 4; b++) {
        Wb(j, -l, -o, h, g, c * 2);
        j.rotate(Math.PI / 4);
        Lb(j, e[2], e[2], c * 4);
      }
    }
    jb(j, 0, 0, c * 10);
    Lb(j, e[0], e[1], c * 1.5);
    for (b = 0; b < 4; b++) {
      Wb(j, -l, -o, h, g, c * 2);
      j.rotate(Math.PI / 4);
      Lb(j, e[0], e[1], c * 1.5);
    }
    jb(j, 0, 0, c * 10);
    Lb(j, e[0]);
    jb(j, 0, 0, c * 4);
    Lb(j, e[2], e[1], c * 1.5);
    j.globalCompositeOperation = "destination-out";
    jb(j, 0, 0, c * 4);
    Lb(j, e[0], e[1], c * 2);
    j.globalCompositeOperation = "source-over";
    jb(j, 0, 0, c * 4);
    Lb(j, undefined, e[1], c * 2);
    return i;
  }
  function pd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 100;
    var j = c * 100;
    var a = i / 2;
    var k = j / 2;
    e.width = i;
    e.height = j;
    var m = c * 5;
    var h = c * 28;
    var g = m / 2;
    var l = h / 2;
    f.translate(a, k);
    for (var n = 0; n < 4; n++) {
      Wb(f, -g, -l, m, h, c * 2);
      f.rotate(Math.PI / 4);
      Lb(f, d);
    }
    f.arc(0, 0, c * 10, 0, Math.PI * 2);
    Lb(f, d);
    f.globalCompositeOperation = "destination-out";
    jb(f, 0, 0, c * 4);
    f.fill();
    return e;
  }
  function Cd(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 200;
    var f = b * 200;
    c.width = e;
    c.height = f;
    var g = pu(0.35, ik, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(g, 10, 10);
    g = vu(0.9, ln, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 21, 20);
    g = vu(0.9, $o, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 38, 28);
    g = vu(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 15, 37);
    g = vu(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 32, 45);
    return c;
  }
  const Td = 7;
  function fd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var a = c * 6;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + a);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    Lb(f, d[0]);
    f.translate(0, -a);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    Lb(f, d[1], d[2], 4);
    var k = c * 155;
    var m = c * 133;
    var h = c * 10;
    var g = c * 3;
    var l = k + c * -3;
    var n = m + c * -5;
    f.save();
    f.translate(k, m);
    f.globalAlpha = 1;
    jb(f, 0, 0, h);
    Lb(f, d[3]);
    f.restore();
    f.save();
    f.translate(l, n);
    f.globalAlpha = 1;
    jb(f, 0, 0, g);
    Lb(f, d[4]);
    f.restore();
    f.save();
    f.translate(k + c * 27, m);
    f.globalAlpha = 1;
    jb(f, 0, 0, h);
    Lb(f, d[3]);
    f.restore();
    f.save();
    f.translate(c * 27 + l, n);
    f.globalAlpha = 1;
    jb(f, 0, 0, g);
    Lb(f, d[4]);
    return e;
  }
  function zd(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (d = c * 125) / 2;
    var a = (r = c * 95) / 2;
    var n = c * 10;
    var o = c * 8;
    var h = c * 112;
    var g = c * 82;
    var l = h / 2;
    var q = g / 2;
    var b = c * 4;
    i.width = d;
    i.height = r;
    j.translate(k - c * 4, a + c * 4);
    j.globalAlpha = e ? 0.5 : 1;
    Wb(j, -l, -q, h, g, n);
    Lb(j, f[0]);
    j.globalAlpha = 1;
    j.translate(0, -o);
    Wb(j, -l, -q, h, g, n);
    Lb(j, f[1], f[2], b);
    var d = c * 55;
    var r = c * 45;
    n = 5;
    j.translate(c * -40, c * -30);
    Wb(j, 0, 0, d, r, n);
    Lb(j, f[3]);
    var t = pd(c * 0.7, f[3]);
    j.drawImage(t, c * 45, c * -25);
    t = pd(c * 0.7, f[3]);
    j.drawImage(t, c * 45, c * 15);
    t = pd(c * 1.2, f[3]);
    j.drawImage(t, c * 28, c * -30);
    d = c * 15;
    r = c * 70;
    n = c * 5;
    j.translate(c * 78, c * -5);
    Wb(j, 0, 0, d, r, n);
    Lb(j, f[4]);
    d = c * 9;
    r = c * 50;
    n = c * 3;
    j.translate(c * -20, c * 20);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 0.6;
    Wb(j, 0, 0, d, r, n);
    Lb(j, f[5]);
    j.translate(c * -20, c * 29);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 0.6;
    j.beginPath();
    j.lineJoin = "round";
    j.moveTo(0, 0);
    j.lineTo(0, c * 30);
    j.lineTo(c * 30, c * 30);
    j.closePath();
    Lb(j, null, f[5], c * 8);
    return i;
  }
  const yd = 3;
  function wd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Lb(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    Lb(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    Lb(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    Lb(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Lb(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Lb(d, lg, b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    Lb(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    Lb(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    Lb(d, b[3]);
    jb(d, a * 77, a * 107, a * 6);
    Lb(d, b[2]);
    jb(d, a * 110, a * 107, a * 6);
    Lb(d, b[2]);
    jb(d, a * 75, a * 105, a * 3);
    Lb(d, b[4]);
    jb(d, a * 108, a * 105, a * 3);
    Lb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    Lb(d, b[1]);
    return c;
  }
  const Pd = 6;
  function kd(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Ad(a) {
    return Ph.String.fromCharCode(a);
  }
  function xd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    jb(d, a * 213.5, a * 256.75, a * 75);
    Lb(d, b[5]);
    jb(d, a * 213.5, a * 175.75, a * 25);
    Lb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -5);
    d.globalAlpha = 1;
    jb(d, a * 213.5, a * 256.75, a * 75);
    Lb(d, b[3]);
    jb(d, a * 213.5, a * 175.75, a * 25);
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    jb(d, a * 213.5, a * 256.75, a * 70);
    Lb(d, b[0]);
    jb(d, a * 213.5, a * 175.75, a * 20);
    Lb(d, b[0]);
    jb(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    jb(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    jb(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    jb(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    Wb(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    Wb(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  function Md(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var a = b * 55;
    var h = b * 8;
    e.width = g;
    e.height = a;
    f.translate(b * -65, b * -55 + h);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    Lb(f, d[0], d[1], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    Lb(f, d[2], d[3], 3);
    return e;
  }
  const Bd = 1;
  function Dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    Wb(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    Lb(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    Wb(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    Lb(e, b[2], b[1], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    Wb(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    Lb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    Wb(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    Lb(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    Wb(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    Lb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    Wb(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    Lb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    Wb(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    Lb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    Wb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    Lb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    Wb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    Lb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    Wb(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
    e.restore();
    Lb(e, b[3], b[3], a * 10);
    e.save();
    e.translate(a * 197, a * 299);
    Wb(e, a * 85, a * -9, a * -170, a * 18, a * 10);
    e.restore();
    Lb(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    Lb(e, ir, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    Lb(e, Tj, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    Lb(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    Lb(e, undefined, b[1], a * 12);
    if (c == 0) {
      e.scale(2, 2);
      e.translate(a * -7, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      Lb(e, b[4], b[4], a * 5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      Lb(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      Lb(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      Lb(e, b[4], b[4], a * 20);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      Lb(e, Yq, b[0], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      Lb(e, pa, b[0], a * 20);
      jb(e, a * 142, a * 221, a * 16.1245154965971);
      Lb(e, b[0]);
    }
    return d;
  }
  const Ed = 1;
  const Id = 0;
  function Sd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    Lb(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    Lb(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    Lb(e, Yj, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    Lb(e, c[3], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    Lb(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    Lb(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    Lb(e, Yq, c[1], a * 14);
    jb(e, a * 161, a * 201, a * 13);
    Lb(e, c[5]);
    jb(e, a * 216, a * 205, a * 8.06225774829855);
    Lb(e, c[5]);
    jb(e, a * 216, a * 175, a * 6.708203932499369);
    Lb(e, c[5]);
    jb(e, a * 271, a * 191, a * 5.0990195135927845);
    Lb(e, c[5]);
    jb(e, a * 206, a * 180, a * 11.180339887498949);
    Lb(e, c[5]);
    return d;
  }
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 54.585977194239184, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 57.63465889766331, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 50, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 54, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Hb(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    Hb(e, 6, a * 49.49747468305833, a * 1);
    e.restore();
    Lb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    Lb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    Lb(e, undefined, c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Hb(e, 6, a * 30, a * 15);
    e.restore();
    Lb(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Hb(e, 6, a * 30, a * 15);
    e.restore();
    Lb(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    Hb(e, 6, a * 30, a * 15);
    e.restore();
    Lb(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    Hb(e, 6, a * 30, a * 15);
    e.restore();
    Lb(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    Hb(e, 6, a * 30, a * 15);
    e.restore();
    Lb(e, c[3]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    Hb(e, 6, a * 30, a * 15);
    e.restore();
    Lb(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    Hb(e, 6, a * 30, a * 15);
    e.restore();
    Lb(e, c[3]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    Hb(e, 6, a * 30, a * 15);
    e.restore();
    Lb(e, c[3]);
    return d;
  }
  const _d = 1;
  function Rd(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var a = c * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = 1;
    Wb(j, -o, -b, g, l, h);
    Lb(j, f[0], f[1], d);
    j.translate(0, 0);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    Wb(j, -o, -b, g, l, h);
    Lb(j, f[0], f[1], d);
    return i;
  }
  function Fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Lb(e, xs, c[2], a * 4);
    jb(e, a * 18, a * 38, a * 14.866068747318506);
    Lb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    Lb(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    Lb(e, c[6], c[7], a * 6);
    return d;
  }
  function jd(c, e, f, i, j) {
    var k = document.createElement("canvas");
    var a = k.getContext("2d");
    var n = c * 70;
    var o = c * 70;
    var h = c * 10;
    var g = c * 5;
    k.width = n;
    k.height = o + g;
    for (var l = 0; e.length > l; l++) {
      var q = e[l];
      a.globalAlpha = q.a;
      var r = q.f(f, _h, q.c);
      a.save();
      a.translate(n / 2 + c * q.x, o / 2 + q.y * c);
      a.rotate(q.r);
      a.drawImage(r, -r.width / 2, -r.height / 2);
      a.restore();
    }
    var s = [];
    for (l = 0; l < i.length; l++) {
      var t = document.createElement("canvas");
      var v = t.getContext("2d");
      t.width = n;
      t.height = o + g;
      v.globalAlpha = j / 2;
      if (l == 2) {
        Wb(v, 0, g, n, o, h);
      } else {
        Wb(v, 0, 0, n, o + g, h);
      }
      Lb(v, "#081a19");
      v.globalAlpha = j;
      Wb(v, 0, l == 2 ? g : 0, n, o, h);
      Lb(v, i[l]);
      v.globalAlpha = 1;
      if (l == 2) {
        v.drawImage(k, 0, g);
      } else {
        v.drawImage(k, 0, 0);
      }
      s.push(Sq(t));
    }
    return s;
  }
  function Ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    Lb(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    Lb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    Lb(e, ij, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    Lb(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    Lb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    Lb(e, ag, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    Lb(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    Lb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    Lb(e, _g, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    Lb(e, pj, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    Lb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    Lb(e, undefined, c[6], a * 4);
    return d;
  }
  function Wd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 370;
    var a = b * 370;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 180;
    f.globalAlpha = 0.2;
    jb(f, j, k, h);
    Lb(f, d[0]);
    return e;
  }
  function Gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Hb(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Hb(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    Lb(e, c[8], c[9], a * 4);
    return d;
  }
  function qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Hb(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Hb(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Hb(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Hb(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    Lb(e, c[3], c[4], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    jb(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    jb(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    Lb(e, c[5], c[6], a * 4);
    return d;
  }
  function Nd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 205;
    var a = b * 205;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 100;
    f.translate(j, k);
    f.globalAlpha = 1;
    jb(f, 0, 0, h);
    Lb(f, d[0]);
    return e;
  }
  function Od(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var a = c * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 35;
    var l = c * 150;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(m - c * 5, n - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    Wb(j, -o, -b, g, l, h);
    Lb(j, f[0], f[1], d);
    j.translate(0, 0);
    j.rotate(Math.PI / 3);
    j.globalAlpha = 1;
    Wb(j, -o, -b, g, l, h);
    Lb(j, f[0], f[1], d);
    j.translate(0, 5);
    Wb(j, -o / 2, -b / 2, g / 2, l / 3, h - 2);
    Lb(j, f[1]);
    return i;
  }
  function Hd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var a = b * 55;
    e.width = g;
    e.height = a;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    Lb(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    Lb(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    Lb(f, false, d[1], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    Lb(f, d[2]);
    return e;
  }
  function Ud(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var a = c * 198;
    var m = c * 140;
    var n = c * 90;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(c * -25, c * 1);
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    Wb(j, -o, -b, g, l, h);
    Lb(j, f[0], f[1], d);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / 3);
    Wb(j, -o, -b, g, l, h);
    Lb(j, f[0], f[1], d);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    Wb(j, -o, -b, g, l, h);
    Lb(j, f[0], f[1], d);
    return i;
  }
  function Yd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 145;
    var a = b * 145;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 70;
    f.translate(j, k);
    f.globalAlpha = 0.4;
    jb(f, 0, 0, h);
    Lb(f, d[0]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    jb(f, 0, 0, h);
    Lb(f, d[0]);
    h = b * 35;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    jb(f, 0, 0, h);
    Lb(f, d[1]);
    h = b * 20;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    jb(f, 0, 0, h);
    Lb(f, d[2]);
    return e;
  }
  function Kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    Lb(e, ie, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    Lb(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    Lb(e, xs, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    Lb(e, ij, c[1], a * 2);
    return d;
  }
  const Vd = 4;
  function Xd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Lb(e, undefined, c[2], a * 4);
    jb(e, a * 18, a * 38, a * 14.866068747318506);
    Lb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    Lb(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    Lb(e, c[4], c[5], a * 4);
    return d;
  }
  const Zd = 1;
  function $d(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 32;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    jb(e, 0, 0, a);
    Lb(e, c[0], c[0]);
    e.translate(0, b * -8);
    e.globalAlpha = 1;
    jb(e, 0, 0, a);
    Lb(e, c[1], c[2], h);
    return d;
  }
  const Gt = 4;
  function Ht(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 16;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 0.5;
    jb(e, 0, 0, a);
    Lb(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  function It(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var a = b * 16;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 1;
    jb(e, 0, 0, a);
    Lb(e, c[0], c[1], h);
    return d;
  }
  const Jt = 0;
  function Kt(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    Lb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    Lb(d, qn, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    Lb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    Lb(d, xs, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    Lb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    Lb(d, El, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    Lb(d, b[0]);
    return c;
  }
  function Lt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    Wb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    Lb(e, c[0]);
    jb(e, a * 121, a * 480, a * 20.396078054371138);
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    Lb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    Wb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    Lb(e, c[4], c[5], a * 12.5);
    jb(e, a * 121, a * 480, a * 20.396078054371138);
    Lb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    Lb(e, c[1], c[2], a * 12.5);
    return d;
  }
  function Mt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    Wb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    Lb(e, c[0]);
    jb(e, a * 122, a * 480, a * 18.439088914585774);
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    Lb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    Wb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    Lb(e, c[4], c[5], a * 12.5);
    jb(e, a * 122, a * 480, a * 18.439088914585774);
    Lb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    Lb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    Lb(e, c[3]);
    return d;
  }
  function Ot(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    Lb(e, c[1], c[2], a * 10);
    return d;
  }
  function Pt(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 283;
    f.height = b * 224;
    g.translate(0, b * 15);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    Lb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    g.closePath();
    Lb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Lb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Lb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Lb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Lb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Lb(g, d[0]);
    g.translate(0, b * -15);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    Lb(g, Gs, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Lb(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Lb(g, Tj, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Lb(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Lb(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Lb(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    Lb(g, d[1], d[2], b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    Lb(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Lb(g, pj, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Lb(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Lb(g, Tj, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Lb(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Lb(g, Wh, d[1], b * 20);
    jb(g, b * 101, b * 155, b * 20.591260281974);
    Lb(g, d[3]);
    jb(g, b * 180, b * 155, b * 20.591260281974);
    Lb(g, d[3]);
    jb(g, b * 95, b * 148, b * 7.211102550927978);
    Lb(g, d[4]);
    jb(g, b * 173, b * 148, b * 7.211102550927978);
    Lb(g, d[4]);
    if (e === 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 191, b * 107);
      g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      g.closePath();
      Lb(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 206, b * 98);
      g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      g.closePath();
      Lb(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 172, b * 111);
      g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      g.closePath();
      Lb(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 202, b * 125);
      g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      g.closePath();
      Lb(g, d[2]);
    }
    return f;
  }
  function Qt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    Wb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    Lb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    Lb(e, undefined, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    Lb(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    Lb(e, c[4], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    Wb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    Lb(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    Lb(e, c[6]);
    return d;
  }
  function Rt(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 121;
    f.height = b * 130;
    g.translate(0, b * 20);
    if (d == 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 6, b * 23);
      g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
      g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
      g.closePath();
      Lb(g, undefined, c[3], b * 13);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 6, b * 23);
    g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
    g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
    g.closePath();
    Lb(g, c[1], c[2], b * 4);
    if (e == 1) {
      g.translate(0, b * 5);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      Lb(g, Wh, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      Lb(g, undefined, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      Lb(g, ie, c[0], b * 10);
      if (d == 1) {
        g.translate(b * -6, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 67, b * 30);
        g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        Lb(g, Gs, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 70, b * 17);
        g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        Lb(g, ir, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 76, b * 8);
        g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        Lb(g, ep, c[3], b * 18);
        g.translate(-6, b * 0);
      } else {
        g.translate(b * -6, b * -5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      Lb(g, undefined, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      Lb(g, undefined, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      Lb(g, undefined, c[2], b * 10);
    } else {
      if (d == 1) {
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        Lb(g, Gs, c[3], b * 18);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        Lb(g, qn, c[3], b * 18);
      } else {
        g.translate(0, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        Lb(g, undefined, c[0], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        Lb(g, undefined, c[0], b * 7);
        g.translate(0, b * 5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 108, b * 27);
      g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      g.closePath();
      Lb(g, undefined, c[2], b * 7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 79, b * 30);
      g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      g.closePath();
      Lb(g, undefined, c[2], b * 7);
    }
    return f;
  }
  function St(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Lb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Lb(e, lg, c[4], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Lb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Lb(e, Co, c[4], a * 4);
    e.translate(a * 20, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Lb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Lb(e, undefined, c[4], a * 4);
    return d;
  }
  function Tt(c, e, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var a = c * 210;
    var m = c * 205;
    var n = c * 30;
    var h = c * 20;
    var g = c * 200;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = 4;
    j.width = a;
    j.height = m;
    j.width = c * 419;
    j.height = c * 412;
    if (i == 1) {
      k.save();
      k.translate(c * 10, c * 0);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      Lb(k, Gs, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      Lb(k, ag, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      Lb(k, _g, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      Lb(k, ep, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      Lb(k, _g, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      Lb(k, xs, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      Lb(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      Lb(k, ep, e[4], c * 3);
      k.restore();
    } else if (i == 2) {
      k.save();
      k.translate(c * 130, c * 35);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      Lb(k, ir, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      Lb(k, eg, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      Lb(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      Lb(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      Lb(k, _g, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      Lb(k, pa, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      Lb(k, Tj, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      Lb(k, undefined, e[4], c * 3);
      k.restore();
    }
    k.translate(j.width / 2, j.height / 2);
    if (!i) {
      k.globalAlpha = 0.5;
      Wb(k, -o, -b, g, l + h, n);
      Lb(k, e[0]);
      if (f) {
        k.rotate(Math.PI);
      }
      k.globalAlpha = 1;
      Wb(k, -o, -b, g, l, n);
      Lb(k, e[1], e[2], d);
      k.globalAlpha = 1;
      Wb(k, c * 35 - o, c * 20 - b, g - c * 50, l - c * 50, n - c * 10);
      Lb(k, e[3]);
    }
    if (i == 3) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      Lb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      Lb(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      Lb(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      Lb(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      Lb(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      Lb(k, e[5]);
    } else if (i == 4) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 30, c * 167);
      k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
      k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      k.closePath();
      Lb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 26, c * 145);
      k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      k.closePath();
      Lb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 13, c * 193);
      k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
      k.closePath();
      Lb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      Lb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 335, c * 196);
      k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      k.closePath();
      Lb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 349, c * 212);
      k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      k.closePath();
      Lb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 46, c * 165);
      k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      k.closePath();
      Lb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      Lb(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      Lb(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      Lb(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      Lb(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      Lb(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 367, c * 164);
      k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      k.closePath();
      Lb(k, e[4]);
    }
    return j;
  }
  function Ut(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    Wb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    Lb(e, c[0]);
    jb(e, a * 204, a * 693, a * 36.013886210738214);
    Lb(e, c[0]);
    jb(e, a * 105, a * 518, a * 30);
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    Lb(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    Wb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    Lb(e, c[1], c[2], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    Lb(e, c[3], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    Lb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    Lb(e, c[6], c[4], a * 16);
    jb(e, a * 204, a * 693, a * 36.013886210738214);
    Lb(e, c[6], c[4], a * 16);
    jb(e, a * 105, a * 518, a * 30);
    Lb(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    Lb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    Lb(e, c[6]);
    jb(e, a * 204, a * 693, a * 17.029386365926403);
    Lb(e, c[7]);
    jb(e, a * 106, a * 518, a * 12);
    Lb(e, c[7]);
    return d;
  }
  function Vt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    Lb(e, c[0]);
    jb(e, a * 160.5, a * 243.03125, a * 7);
    Lb(e, c[0]);
    jb(e, a * 227.5, a * 242.03125, a * 7);
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    Lb(e, c[0], c[0], a * 5);
    jb(e, a * 194, a * 298, a * 9);
    Lb(e, c[0], c[0], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    Lb(e, c[1], c[2], a * 5);
    jb(e, a * 160.5, a * 243.03125, a * 7);
    Lb(e, c[1], c[2], a * 5);
    jb(e, a * 227.5, a * 242.03125, a * 7);
    Lb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    Lb(e, c[1], c[2], a * 7);
    jb(e, a * 194, a * 298, a * 9);
    Lb(e, c[1], c[2], a * 7);
    return d;
  }
  function Wt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (o = c * 450) / 2;
    var a = (p = c * 145) / 2;
    var m = c * 10;
    var n = c * 300;
    var h = c * 30;
    var g = n / 2;
    var l = h / 2;
    if (f) {
      var o = c * 145;
      var p = c * 450;
      i.width = o;
      i.height = p;
      j.rotate(Math.PI / 2);
      j.save();
      j.globalAlpha = 0.5;
      Wb(j, c * 100, c * -110, n, h, m);
      Lb(j, e[0]);
      j.translate(c * 178, c * -98);
      Wb(j, -g, -l - c * 6, c * 100, c * 100, m);
      Lb(j, e[0]);
      j.translate(c * -50, c * 5);
      Wb(j, c * 220, c * -15, c * 90, c * 90, m);
      Lb(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 250, c * -63);
      Wb(j, -g - c * 20, -l, n, h, m);
      Lb(j, e[1], e[2], 4);
      j.translate(c * -70, c * -40);
      Wb(j, -g - c * 20, -l, c * 100, c * 100, m);
      Lb(j, e[3], e[4], 4);
      j.translate(c * -70, c * 15);
      Wb(j, c * 220, c * -22, c * 90, c * 90, m);
      Lb(j, e[3], e[4], 4);
      Wb(j, c * 230, c * -12, c * 55, c * 55, m);
      Lb(j, e[5]);
      j.translate(c * -70, 0);
      Wb(j, c * -15, c * -2, c * 60, c * 60, m);
      Lb(j, e[5]);
      j.restore();
    } else {
      i.width = o;
      i.height = p;
      j.save();
      j.globalAlpha = 0.5;
      j.translate(k, a + c * 10);
      Wb(j, -g, -l, n, h, m);
      Lb(j, e[0]);
      j.translate(c * -65, c * -25);
      Wb(j, -g, -l - c * 6, c * 100, c * 100, c * 15);
      Lb(j, e[0]);
      j.translate(c * -35, c * -5);
      Wb(j, c * 220, c * -15, c * 90, c * 90, c * 15);
      Lb(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 240, c * 70);
      Wb(j, -g, -l, n, h, m);
      Lb(j, e[1], e[2], 4);
      j.translate(c * -60, c * -40);
      Wb(j, -g - c * 20, -l, c * 100, c * 100, c * 15);
      Lb(j, e[3], e[4], 4);
      j.translate(c * -55, c * 10);
      Wb(j, c * 220, c * -22, c * 90, c * 90, c * 15);
      Lb(j, e[3], e[4], 4);
      Wb(j, c * 240, c * -12, c * 55, c * 55, c * 12);
      Lb(j, e[5]);
      j.translate(c * 45, c * 0);
      Wb(j, c * -145, c * -2, c * 60, c * 60, c * 12);
      Lb(j, e[5]);
      j.restore();
    }
    return i;
  }
  function Xt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.max(c.width, b.width);
    var g = Math.max(c.height, b.height);
    d.width = f;
    d.height = g;
    e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
    e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
    return d;
  }
  function Yt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 105;
    var a = c * 125;
    var m = c * 4;
    var n = c * 10;
    var h = c * 5;
    var g = c * 10;
    var l = c * 110;
    var o = g / 2;
    var b = l / 2;
    i.width = k;
    i.height = a;
    j.save();
    j.globalAlpha = e ? 0.5 : 1;
    j.translate(k / 2 + c * 8, a / 2 + h);
    Wb(j, -o, -b, g, l, n);
    Lb(j, e ? f[0] : f[1]);
    j.translate(c * -130 + h, c * -128 + h);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    Lb(j, f[2]);
    j.restore();
    j.translate(k / 2 + 8, a / 2);
    j.globalAlpha = 1;
    Wb(j, -o, -b, g, l, n);
    Lb(j, f[3], f[4], m);
    j.translate(c * -130, c * -125);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    Lb(j, f[5], f[6], m);
    return i;
  }
  function Zt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    Lb(e, c[1], c[2], a * 8);
    return d;
  }
  const $t = 5;
  function _t(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    Wb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Hb(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    Lb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    Wb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    Lb(e, c[4], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Hb(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    Lb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    Lb(e, c[3]);
    return d;
  }
  const au = 7;
  function bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    Lb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    Lb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    Lb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    Lb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    Lb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    Lb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    Lb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    Lb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    Lb(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    Lb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    Lb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    Lb(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    Lb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    Lb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    Lb(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    Lb(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    Lb(e, c[9], c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    Lb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    Lb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    Lb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    Lb(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    Lb(e, ep, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    Lb(e, ep, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    Lb(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    Lb(e, ir, c[3], a * 4);
    return d;
  }
  function cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    Lb(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    Lb(e, c[0], c[1], a * 8);
    jb(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    Lb(e, c[2]);
    jb(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    Lb(e, c[2]);
    jb(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    Lb(e, c[2]);
    jb(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    Lb(e, c[2]);
    jb(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    Lb(e, c[2]);
    jb(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    return d;
  }
  function du(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 220;
    var a = b * 230;
    var j = b * 100;
    var k = j / 4;
    var h = b * 20;
    e.width = i;
    e.height = a;
    f.translate(i / 2, a / 2 + h);
    f.globalAlpha = 0.5;
    Hb(f, 7, j, k);
    Lb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    Hb(f, 7, j, k);
    Lb(f, d[1]);
    Hb(f, 6, j * 0.65, k * 0.65);
    Lb(f, d[2]);
    return e;
  }
  function eu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    Lb(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    Lb(e, c[4], c[5], a * 4);
    jb(e, a * 107, a * 152, a * 9);
    Lb(e, c[6]);
    jb(e, a * 105, a * 173, a * 9);
    Lb(e, c[6]);
    jb(e, a * 87, a * 161, a * 9);
    Lb(e, c[6]);
    jb(e, a * 106, a * 147, a * 4);
    Lb(e, c[7]);
    jb(e, a * 104, a * 167, a * 4);
    Lb(e, c[7]);
    jb(e, a * 86, a * 154, a * 4);
    Lb(e, c[7]);
    return d;
  }
  function fu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var a = b * 90;
    var i = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Lb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    Lb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    Lb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Lb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Lb(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    Lb(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    Lb(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Lb(f, d[0], d[1], i);
    f.restore();
    return e;
  }
  function gu(c, e, f, i, j, k, n, o, p, h, g = 0) {
    var l = document.createElement("canvas");
    var q = l.getContext("2d");
    k = k ? k * c : 0;
    var b = Math.floor(f * c);
    q.font = b + "px Baloo Paaji";
    q.lineJoin = "round";
    o *= c;
    var r = n ? o * 2 : 0;
    if (p) {
      var t = Math.min(q.measureText(e).width + c * 2 + r, p);
    } else {
      t = q.measureText(e).width + c * 2 + r + g * c * 2;
    }
    b = c * (b + k + g) + r;
    l.width = t;
    l.height = b;
    if (n) {
      q.fillStyle = n;
      Wb(q, 0, 0, t, b, o * 2);
      q.fill();
      q.translate(o, o);
    }
    q.textBaseline = "middle";
    q.font = f + "px Baloo Paaji";
    q.lineJoin = "round";
    if (j) {
      q.beginPath();
      q.fillStyle = j;
      q.fillText(e, 0, b / 2 + k - r / 2, t);
    }
    q.beginPath();
    if (h) {
      q.strokeStyle = h;
      q.lineWidth = g;
      q.strokeText(e, g, (b - r) / 2, t);
    }
    q.fillStyle = i;
    q.fillText(e, g, (b - r) / 2, t);
    return l;
  }
  function hu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    Wb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    Wb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    Lb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    Lb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    Lb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    Lb(e, c[1], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    Lb(e, c[3]);
    return d;
  }
  function iu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(0, a * 10);
    jb(e, a * 42, a * 43, a * 24.758836806279895);
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    Lb(e, c[0]);
    e.translate(0, a * -10);
    jb(e, a * 42, a * 43, a * 24.758836806279895);
    Lb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    Lb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    Lb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    Lb(e, c[5], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    Lb(e, c[7], c[8], a * 5);
    return d;
  }
  const ju = 3;
  function ku(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    Wb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    Lb(e, c[0], c[0], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    Lb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    Wb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    Lb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    Wb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    Lb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    Wb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    Lb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Wb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    Lb(e, c[0], c[0], a * 6);
    jb(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    Lb(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    Lb(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    Wb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    Lb(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    Wb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    Lb(e, c[5], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    Wb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    Lb(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    Wb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    Lb(e, c[6], c[4], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Wb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    Lb(e, c[7], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Wb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    Lb(e, c[7], c[8], a * 6);
    e.globalAlpha = 1;
    e.save();
    jb(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    Lb(e, c[3], c[4], a * 6);
    e.restore();
    return d;
  }
  function lu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(10, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    Lb(d, undefined, b[0], a * 10);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    Lb(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    Lb(d, undefined, b[2], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    Lb(d, ag, b[2], a * 8);
    return c;
  }
  function mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    Lb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    Lb(e, _g, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    Lb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    Lb(e, c[3], c[4], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    Lb(e, c[5], c[6], a * 12);
    jb(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    Lb(e, c[7]);
    jb(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    Lb(e, c[8]);
    return d;
  }
  function nu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 180;
    var a = b * 210;
    var j = (h = b * 60) / 4;
    var k = b * 20;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35 + k);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    Hb(f, 5, h, j);
    Lb(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15 + k);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    Hb(f, 5, h, j);
    Lb(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40 + k);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    Hb(f, 5, h, j);
    Lb(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, b * -20);
    Hb(f, 5, h, j);
    Lb(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Hb(f, 5, h, j);
    Lb(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Hb(f, 5, h, j);
    Lb(f, d[1]);
    f.restore();
    var h;
    j = (h = b * 30) / 4;
    f.save();
    f.translate(i / 2 + b * 5, a / 2 - b * 20);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Hb(f, 5, h, j);
    Lb(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Hb(f, 5, h, j);
    Lb(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 45, a / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Hb(f, 5, h, j);
    Lb(f, d[2]);
    f.restore();
    jb(f, i / 2 - b * 7, a / 2 + b * 7, 5);
    Lb(f, d[2]);
    return e;
  }
  function ou(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = c * b * 2;
    var a = b * c * 2;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j);
    jb(f, 0, 0, b * c);
    Lb(f, d);
    return e;
  }
  function pu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var a = b * 150;
    var i = b * 10;
    var j = b * 4;
    e.width = g;
    e.height = a;
    f.translate(b * -50, b * -38 + i);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    Lb(f, d[0]);
    f.translate(0, 0 - i);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    Lb(f, d[1], d[2], j);
    return e;
  }
  function qu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    Lb(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    Lb(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    Lb(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    Lb(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    Lb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    Lb(e, c[4]);
    jb(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    Lb(e, c[5]);
    jb(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    Lb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    Lb(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    Lb(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    Lb(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    Lb(e, eg, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    Lb(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    Lb(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    Lb(e, undefined, c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    Lb(e, Yq, c[9], a * 3);
    return d;
  }
  function ru(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    Lb(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    Lb(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    Lb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    Lb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    Lb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    Lb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    Lb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    Lb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    Lb(e, Co, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    Lb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    Lb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    Lb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    Lb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    Lb(e, _g, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    Lb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    Lb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    Lb(e, undefined, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(1, 1);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    Lb(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    Lb(e, c[2], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    Lb(e, _g, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    Lb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    Lb(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    Lb(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    Lb(e, c[0], c[0], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    Lb(e, Gs, c[1], a * 2);
    return d;
  }
  function su(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 120;
    var a = b * 150;
    var j = b * 60;
    var k = j / 4;
    var h = b * 15;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 0 + h);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    Hb(f, 8, j, k);
    Lb(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 11, a / 2 + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(0, -h);
    Hb(f, 8, j, k);
    Lb(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 9, a / 2 - b * 12);
    f.rotate(Math.PI / 2.8);
    Hb(f, 5, j * 0.5, k * 0.4);
    Lb(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 19, a / 2 + b * 5);
    f.rotate(Math.PI / 1);
    Hb(f, 5, j * 0.5, k * 0.4);
    Lb(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 8, a / 2 + b * 20);
    f.rotate(Math.PI / 2.25);
    Hb(f, 5, j * 0.5, k * 0.4);
    Lb(f, d[2]);
    f.restore();
    return e;
  }
  function tu(b, c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var a = b * 220;
    var j = b * 220;
    var k = b * 100;
    var h = k / 4;
    f.width = a;
    f.height = j;
    i.translate(a / 2, j / 2);
    i.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      i.translate(b * 0, b * -8);
    }
    Hb(i, 7, k, h);
    Lb(i, c ? d[0] : d[1]);
    i.globalAlpha = 1;
    if (e == 0) {
      Hb(i, 6, k * 0.65, h * 0.65);
      Lb(i, d[2]);
    } else if (e == 1) {
      i.translate(b * 20, b * 20);
      Hb(i, 6, k * 0.45, h * 0.4);
      Lb(i, d[2]);
    }
    return f;
  }
  function uu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    Lb(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    Lb(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    Lb(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    Lb(e, c[0], c[0], a * 10);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    Lb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    Lb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    Lb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    Lb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    Lb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    Lb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    Lb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    Lb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    Lb(e, c[1], c[2], a * 7);
    return d;
  }
  function vu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 18;
    var a = b * 18;
    e.width = i;
    e.height = a;
    var j = b * 9;
    var k = b * 9;
    var l = b * 8;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    jb(f, 0, 0, l);
    Lb(f, d[0]);
    l = b * 3;
    j = 0;
    k = b * -3;
    f.translate(j, k);
    f.globalAlpha = 1;
    jb(f, 0, 0, l);
    Lb(f, d[1]);
    f.restore();
    return e;
  }
  function wu(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var a = g.getContext("2d");
    if (e == 0) {
      var i = b * 270;
      var j = b * 250;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 140, b * 3);
      a.translate(b * -25, b * -20);
      a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      a.closePath();
      Lb(a, d[0]);
    } else if (e == 1) {
      i = b * 430;
      j = b * 350;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 180, b * 5);
      a.translate(b * -30, b * -60);
      a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      a.closePath();
      Lb(a, d[0]);
    } else if (e == 2) {
      i = b * 400;
      j = b * 300;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 80, b * 52);
      a.translate(b * -40, b * -30);
      a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      a.closePath();
      Lb(a, d[0]);
    }
    return g;
  }
  function lu(a, b) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 234;
    d.height = a * 183;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 25);
    e.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    e.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    e.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    e.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
    e.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    e.closePath();
    Lb(e, b[0], b[0], a * 4);
    return d;
  }
  const xu = 7;
  function yu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Lb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -15, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Lb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    Lb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    Lb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    Lb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    Lb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    Lb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    Lb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Lb(d, undefined, b[2], a * 4);
    return c;
  }
  function zu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var a = b * 142;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    jb(f, 0, 0, b * 60);
    Lb(f, d[0]);
    f.translate(0, b * -7);
    f.globalAlpha = 1;
    jb(f, 0, 0, b * 60);
    Lb(f, d[1], d[2], b * 4);
    jb(f, 0, 0, b * 40);
    Lb(f, d[3]);
    jb(f, 0, 0, b * 25);
    Lb(f, d[4], d[5], b * 8);
    return e;
  }
  function Au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    Hb(e, 9, a * 60, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    Hb(e, 9, a * 60, a * 10);
    Lb(e, c[1], c[2], 4);
    e.rotate(-0.32);
    Hb(e, 9, a * 38, a * 10);
    Lb(e, c[3], c[4], 4);
    e.rotate(0.68);
    Hb(e, 9, a * 20, a * 8);
    Lb(e, c[5], c[6], 6);
    e.restore();
    return d;
  }
  ;
  const Bu = 5;
  function Cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    Hb(e, 7, a * 60, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    Hb(e, 7, a * 60, a * 10);
    Lb(e, c[1], c[2], 4);
    e.rotate(0.64);
    Hb(e, 7, a * 40, a * 10);
    Lb(e, c[3], c[4], 4);
    e.rotate(0.12);
    Hb(e, 7, a * 23, a * 5);
    e.restore();
    Lb(e, c[5]);
    return d;
  }
  function Du(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 7);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    e.closePath();
    Lb(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    Lb(e, c[2], c[3], a * 1);
    return d;
  }
  const Eu = 5;
  function Fu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    Hb(e, 8, a * 60, a * 10);
    Lb(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    Hb(e, 8, a * 60, a * 10);
    Lb(e, c[1], c[2], 4);
    e.rotate(0.56);
    Hb(e, 8, a * 40, a * 10);
    Lb(e, c[3], c[4], 4);
    e.rotate(0.28);
    Hb(e, 8, a * 28, a * 8);
    Lb(e, c[5]);
    e.restore();
    return d;
  }
  function em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (wb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      Hb(e, 7, a * 41, a * 10);
      e.restore();
      Lb(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    Hb(e, 7, a * 41, a * 10);
    Lb(e, c[1], c[2], a * 4);
    Hb(e, 7, a * 35, a * 10);
    Lb(e, c[3], c[4], a * 4);
    Hb(e, 7, a * 23, a * 5);
    e.restore();
    Lb(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Wb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Lb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Wb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Lb(e, c[4], c[4], a * 2);
    jb(e, a * 45, a * 29, a * 7);
    Lb(e, c[5]);
    jb(e, a * 45, a * 61, a * 7);
    Lb(e, c[5]);
    jb(e, a * 28, a * 45, a * 7);
    Lb(e, c[5]);
    jb(e, a * 62, a * 45, a * 7);
    Lb(e, c[5]);
    return d;
  }
  function im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if (wb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      jb(e, a * 44, a * 55, a * 41);
      Lb(e, c[0]);
    }
    e.globalAlpha = 1;
    jb(e, a * 44, a * 45, a * 41);
    Lb(e, c[1], c[2], a * 4);
    jb(e, a * 44, a * 45, a * 31);
    Lb(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    Wb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Lb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    Wb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Lb(e, c[4], c[4], a * 2);
    jb(e, a * 45, a * 29, a * 7);
    Lb(e, c[5]);
    jb(e, a * 45, a * 61, a * 7);
    Lb(e, c[5]);
    jb(e, a * 28, a * 45, a * 7);
    Lb(e, c[5]);
    jb(e, a * 62, a * 45, a * 7);
    Lb(e, c[5]);
    return d;
  }
  const tm = 1;
  function nm(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var a = ym(b * 1, kg, d);
    g.drawImage(a, b * 0, b * 0);
    if (e == 1) {
      g.translate(b * 100, b * 0);
      jb(g, b * 113, b * 120, b * 66);
      Lb(g, undefined, d[4], b * 13);
      a = Vt(b * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(a, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      Lb(g, undefined, d[4], b * 13);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      jb(g, b * 113, b * 120, b * 66);
      Lb(g, undefined, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      Wb(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      g.restore();
      Lb(g, "#dff2f7", "#187484", b * 7);
      jb(g, b * 22, b * 82, b * 12);
      Lb(g, "#dff2f7", "#187484", b * 7);
      jb(g, b * 145, b * 82, b * 12);
      Lb(g, "#dff2f7", "#187484", b * 7);
      a = pu(b * 0.5, is, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 10, b * 85);
      a = pu(b * 0.5, is, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 50, b * 85);
      a = pu(b * 0.5, Xa, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 90, b * 85);
      a = vu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = vu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = vu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 125);
      a = vu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 50, b * 115);
      a = vu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 100);
      a = vu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 80, b * 120);
      a = vu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 110, b * 125);
      a = vu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * 0);
      jb(g, b * 113, b * 120, b * 66);
      Lb(g, undefined, d[4], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      Wb(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      Lb(g, undefined, d[5], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      Lb(g, d[5], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      Lb(g, undefined, d[4], b * 13);
    } else if (e == 4) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      Lb(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      Lb(g, ij, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      Lb(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * 16);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      Lb(g, _g, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      Lb(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      Lb(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      Lb(g, undefined, d[5], b * 14);
    }
    return f;
  }
  function om(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.translate(0, b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    Hb(f, 7, b * 60, b * 10);
    f.restore();
    Lb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Hb(f, 3, b * 21, b * 4);
      Lb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(0.2);
    Hb(f, 9, b * 60, b * 10);
    Lb(f, d[3], d[4], b * 4);
    f.rotate(-0.32);
    Hb(f, 9, b * 38, b * 10);
    Lb(f, d[5], d[6], b * 4);
    f.rotate(0.68);
    Hb(f, 9, b * 20, b * 8);
    Lb(f, d[7], d[8], b * 6);
    f.restore();
    return e;
  }
  function am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Hb(e, 6, a * 146, a * 30);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Hb(e, 6, a * 146, a * 30);
    e.restore();
    Lb(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Hb(e, 6, a * 105, a * 30);
    e.restore();
    Lb(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Hb(e, 6, a * 66, a * 30);
    e.restore();
    Lb(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    Hb(e, 7, a * 17, a * 8);
    e.restore();
    Lb(e, c[6]);
    e.save();
    e.translate(a * 163, a * 168);
    Hb(e, 7, a * 25, a * 8);
    e.restore();
    Lb(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    Hb(e, 7, a * 11, a * 8);
    e.restore();
    Lb(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    Hb(e, 7, a * 12, a * 8);
    e.restore();
    Lb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    Lb(e, pa, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    Lb(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    Lb(e, undefined, c[2], a * 8);
    return d;
  }
  function rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    Wb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    Lb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    Wb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    Lb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    Lb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    Lb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    Lb(e, c[8]);
    return d;
  }
  function sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    Lb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    Lb(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    Lb(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    Lb(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    Lb(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    Lb(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    Lb(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    Lb(e, c[3], c[2], a * 10);
    return d;
  }
  function hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      Lb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      Lb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      Lb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      Lb(e, b[3], b[3], a * 32);
      jb(e, a * 41, a * 30, a * 14.7648230602334);
      Lb(e, b[3], b[3], a * 32);
      jb(e, a * 369, a * 30, a * 15.556349186104045);
      Lb(e, b[3], b[3], a * 32);
      jb(e, a * 364, a * 190, a * 15.620499351813308);
      Lb(e, b[3], b[3], a * 32);
      jb(e, a * 41, a * 186, a * 15.556349186104045);
      Lb(e, b[3], b[3], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      Lb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      Lb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      Lb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      Lb(e, b[3], b[3], a * 32);
      jb(e, a * 41, a * 30, a * 14.7648230602334);
      Lb(e, b[3], b[3], a * 32);
      jb(e, a * 369, a * 30, a * 15.556349186104045);
      Lb(e, b[3], b[3], a * 32);
      jb(e, a * 364, a * 190, a * 15.620499351813308);
      Lb(e, b[3], b[3], a * 32);
      jb(e, a * 41, a * 186, a * 15.556349186104045);
      Lb(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    Lb(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    Lb(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    Lb(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    Lb(e, b[2], b[0], a * 12);
    jb(e, a * 41, a * 30, a * 14.7648230602334);
    Lb(e, b[2], b[0], a * 12);
    jb(e, a * 369, a * 30, a * 15.556349186104045);
    Lb(e, b[2], b[0], a * 12);
    jb(e, a * 364, a * 190, a * 15.620499351813308);
    Lb(e, b[2], b[0], a * 12);
    jb(e, a * 41, a * 186, a * 15.556349186104045);
    Lb(e, b[2], b[0], a * 12);
    return d;
  }
  function gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    Lb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    Lb(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    Lb(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    return d;
  }
  function lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    Wb(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    Wb(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    Lb(e, c[3], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    Wb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    Lb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(0);
    Wb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    Lb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    Lb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    Lb(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    Lb(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    Wb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    Lb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    Wb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    Lb(e, c[1], c[2], a * 5);
    return d;
  }
  function um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    Wb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    Lb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    Wb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    Lb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    Lb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    Lb(e, c[8]);
    return d;
  }
  function bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    Wb(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    Wb(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    Lb(e, c[0]);
    return d;
  }
  function dm(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function vm(a) {
    return Ph.String.fromCharCode(a);
  }
  function mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    Lb(e, c[2], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    Lb(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
    e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
    e.closePath();
    Lb(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    Lb(e, c[0], c[1], 4);
    return d;
  }
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (wb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      Hb(e, 8, a * 41, a * 10);
      Lb(e, c[0]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    Hb(e, 8, a * 41, a * 10);
    Lb(e, c[1], c[2], a * 4);
    e.rotate(0.56);
    Hb(e, 8, a * 33, a * 10);
    Lb(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    Hb(e, 8, a * 24, a * 8);
    Lb(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Wb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Lb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Wb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Lb(e, c[4], c[4], a * 2);
    jb(e, a * 45, a * 29, a * 7);
    Lb(e, c[5]);
    jb(e, a * 45, a * 61, a * 7);
    Lb(e, c[5]);
    jb(e, a * 28, a * 45, a * 7);
    Lb(e, c[5]);
    jb(e, a * 62, a * 45, a * 7);
    Lb(e, c[5]);
    return d;
  }
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    Wb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    Wb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    Wb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    Wb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    Wb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    Wb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    Lb(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    Wb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    Lb(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    Wb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    Lb(e, c[3], c[4], a * 3);
    return d;
  }
  function Tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    Lb(e, c[0], c[1], 4);
    return d;
  }
  function fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    Lb(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    Lb(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    Wb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    Lb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    Wb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    Lb(e, c[1], c[2], a * 5);
    return d;
  }
  function zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Hb(e, 6, a * 146, a * 30);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Hb(e, 6, a * 146, a * 30);
    e.restore();
    Lb(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Hb(e, 6, a * 105, a * 30);
    e.restore();
    Lb(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Hb(e, 6, a * 66, a * 30);
    e.restore();
    Lb(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Hb(e, 6, a * 31, a * 30);
    e.restore();
    Lb(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    Lb(e, Ya, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    Lb(e, pj, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    Lb(e, eg, c[2], a * 8);
    return d;
  }
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    Wb(e, 0, 0, a * 400, a * 220, a * 30);
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    Lb(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    Lb(e, c[3], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    Lb(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    Lb(e, c[3], c[1], a * 12);
    jb(e, a * 41, a * 30, a * 14.7648230602334);
    Lb(e, c[3], c[1], a * 12);
    jb(e, a * 369, a * 30, a * 15.556349186104045);
    Lb(e, c[3], c[1], a * 12);
    jb(e, a * 364, a * 190, a * 15.620499351813308);
    Lb(e, c[3], c[1], a * 12);
    jb(e, a * 41, a * 186, a * 15.556349186104045);
    Lb(e, c[3], c[1], a * 12);
    return d;
  }
  function wm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 170;
    var a = b * 172;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    f.translate(j, k + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    jb(f, 0, 0, b * 60);
    Lb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Hb(f, 3, b * 20, b * 4);
      Lb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.restore();
    jb(f, 0, 0, b * 60);
    Lb(f, d[3], d[4], b * 4);
    jb(f, 0, 0, b * 40);
    Lb(f, d[5]);
    jb(f, 0, 0, b * 25);
    Lb(f, d[6], d[7], b * 8);
    return e;
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    Wb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    Wb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    Lb(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    Wb(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    Lb(e, c[3], c[4], 4);
    e.save();
    e.translate(a * 79, a * 54);
    Wb(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    Lb(e, qn, c[5], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    Lb(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    Lb(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    Lb(e, undefined, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    Lb(e, qn, c[7], 4);
    e.save();
    e.translate(a * 79, a * 113);
    Wb(e, a * -18, a * -2, a * 36, a * 4, a * 20);
    e.restore();
    Lb(e, Yq, c[8], 4);
    e.save();
    e.translate(a * 75, a * 118);
    Wb(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    Lb(e, c[8]);
    return d;
  }
  function km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    Wb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    Lb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    Wb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    Lb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    Lb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    Lb(e, c[8]);
    return d;
  }
  function Am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    Lb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    Lb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    Lb(e, Co, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    Lb(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    Lb(e, undefined, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    Lb(e, El, c[5], a * 8);
    return d;
  }
  function xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    Wb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    Lb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    Wb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    Lb(e, Co, c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    Lb(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    Lb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    Lb(e, c[5], c[6], a * 8);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(2, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    Lb(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    Lb(e, c[8], c[9], a * 8);
    e.scale(2, 2);
    e.translate(a * -23, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    Lb(e, c[10]);
    return d;
  }
  function Jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    Lb(e, c[0]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    Lb(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    Lb(e, c[3], c[4], a * 15);
    return d;
  }
  function Mm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.save();
    f.translate(b * 85, b * 88);
    f.rotate(1.4);
    Hb(f, 7, b * 60, b * 10);
    f.restore();
    Lb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 80);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Hb(f, 3, b * 21, b * 4);
      Lb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1.4);
    Hb(f, 7, b * 60, b * 10);
    Lb(f, d[3], d[4], b * 4);
    f.rotate(0.64);
    Hb(f, 7, b * 40, b * 10);
    Lb(f, d[5], d[6], b * 4);
    f.rotate(0.12);
    Hb(f, 7, b * 23, b * 5);
    f.restore();
    Lb(f, d[7]);
    return e;
  }
  function Bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (wb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      Hb(e, 9, a * 41, a * 10);
      e.restore();
      Lb(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    Hb(e, 9, a * 41, a * 10);
    Lb(e, c[1], c[2], a * 4);
    e.rotate(-0.32);
    Hb(e, 9, a * 32, a * 10);
    Lb(e, c[3], c[4], a * 4);
    e.rotate(0.68);
    Hb(e, 9, a * 23, a * 8);
    Lb(e, c[5], c[6], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Wb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Lb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Wb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Lb(e, c[4], c[4], a * 2);
    jb(e, a * 45, a * 29, a * 7);
    Lb(e, c[5]);
    jb(e, a * 45, a * 61, a * 7);
    Lb(e, c[5]);
    jb(e, a * 28, a * 45, a * 7);
    Lb(e, c[5]);
    jb(e, a * 62, a * 45, a * 7);
    Lb(e, c[5]);
    return d;
  }
  function Dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    Lb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    Lb(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    Lb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    Lb(e, c[1], c[2], a * 8);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    Lb(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    Lb(e, c[7], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    Lb(e, Yj, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    Lb(e, undefined, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    Lb(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    Lb(e, c[3], c[4], a * 8);
    return d;
  }
  function Em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    Lb(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    Lb(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    Lb(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    Lb(e, c[2], c[3], a * 7);
    return d;
  }
  function Im(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 3);
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    Hb(f, 7, b * 60, b * 10);
    f.restore();
    Lb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Hb(f, 3, b * 21, b * 4);
      Lb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1);
    Hb(f, 8, b * 60, b * 10);
    Lb(f, d[3], d[4], b * 4);
    f.rotate(0.56);
    Hb(f, 8, b * 40, b * 10);
    Lb(f, d[5], d[6], b * 4);
    f.rotate(0.28);
    Hb(f, 8, b * 28, b * 8);
    Lb(f, d[7]);
    f.restore();
    return e;
  }
  function Sm(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      Lb(d, b[0]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      Lb(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      Lb(d, b[0]);
    }
    return e;
  }
  function Qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, 1);
    e.translate(a * -110, 0);
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    Wb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    Lb(e, c[0]);
    e.translate(a * -10, a * -10);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    Wb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    Lb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    Lb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    Lb(e, c[5], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    Lb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    Lb(e, undefined, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    Lb(e, undefined, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    Lb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    Lb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    Lb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    Lb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    Lb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    Lb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    Lb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    Lb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    Lb(e, c[3], c[4], a * 6);
    return d;
  }
  function _m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    Wb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    Lb(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(0, a * 10);
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    Wb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 4);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    Lb(e, c[5], c[6], a * 4);
    e.translate(0, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    Lb(e, c[8]);
    return d;
  }
  const Rm = 3;
  function Fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    Lb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    Lb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    Lb(e, xs, c[2], a * 4);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    Lb(e, c[10], c[10], a * 4);
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    Lb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 18);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    e.closePath();
    Lb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    Lb(e, _g, c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    Lb(e, undefined, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    Wb(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    Lb(e, c[7], c[2], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    Wb(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    Lb(e, c[8], c[2], a * 4);
    jb(e, a * 87, a * 39, a * 4.123105625617661);
    Lb(e, c[9], c[2], a * 4);
    jb(e, a * 87, a * 60, a * 4.242640687119285);
    Lb(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    Lb(e, c[8], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
    e.closePath();
    Lb(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    Lb(e, c[9], c[2], a * 4);
    jb(e, a * 50, a * 80, a * 5);
    Lb(e, c[9], c[2], a * 4);
    jb(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    Lb(e, c[9], c[2], a * 4);
    jb(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    Lb(e, c[9], c[2], a * 4);
    return d;
  }
  function jm(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 501;
    f.height = b * 564;
    g.scale(0.5, 0.5);
    g.translate(b * 240, b * 255);
    g.rotate(e);
    g.globalAlpha = c ? 0.5 : 0.2;
    jb(g, b * 174, b * 87.984375, b * 20.8806130178211);
    Lb(g, d[0], d[0], b * 8);
    jb(g, b * 174, b * 87.984375, b * 12.165525060596439);
    Lb(g, d[0], d[0], b * 8);
    jb(g, b * 174, b * 87.484375, b * 6);
    Lb(g, d[0]);
    jb(g, b * 30, b * 87.984375, b * 20.8806130178211);
    Lb(g, d[0], d[0], b * 4);
    jb(g, b * 30, b * 87.984375, b * 12.165525060596439);
    Lb(g, d[0], d[0], b * 4);
    jb(g, b * 30, b * 87.484375, b * 6);
    Lb(g, d[0]);
    jb(g, b * 100, b * 30, b * 20.8806130178211);
    Lb(g, d[0], d[0], b * 4);
    jb(g, b * 100, b * 30, b * 12.165525060596439);
    Lb(g, d[0], d[0], b * 4);
    jb(g, b * 100, b * 30, b * 6);
    Lb(g, d[0]);
    jb(g, b * 100, b * 130, b * 20.8806130178211);
    Lb(g, d[0], d[0], b * 4);
    jb(g, b * 100, b * 130, b * 12.165525060596439);
    Lb(g, d[0], d[0], b * 4);
    jb(g, b * 100, b * 130, b * 6);
    Lb(g, d[0]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    g.rotate(0);
    Wb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    Lb(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 101, b * 64.984375);
    g.rotate(0);
    Wb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    Lb(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 102, b * 63.484375);
    g.rotate(0);
    Wb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    g.translate(5, -5);
    g.globalAlpha = 1;
    jb(g, b * 174, b * 87.984375, b * 20.8806130178211);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 174, b * 87.984375, b * 12.165525060596439);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 174, b * 87.484375, b * 6);
    Lb(g, d[2]);
    jb(g, b * 30, b * 87.984375, b * 20.8806130178211);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 30, b * 87.984375, b * 12.165525060596439);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 30, b * 87.484375, b * 6);
    Lb(g, d[2]);
    jb(g, b * 102, b * 30, b * 20.8806130178211);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 102, b * 30, b * 12.165525060596439);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 102, b * 30, b * 6);
    Lb(g, d[1]);
    jb(g, b * 102, b * 130, b * 20.8806130178211);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 102, b * 130, b * 12.165525060596439);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 102, b * 130, b * 6);
    Lb(g, d[1]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    Wb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    Lb(g, d[1], d[3], b * 8);
    g.save();
    g.translate(b * 101, b * 64.984375);
    Wb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    Lb(g, d[2], d[1], b * 8);
    g.save();
    g.translate(b * 102, b * 63.484375);
    Wb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    Lb(g, d[2], d[1], b * 8);
    jb(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 135, b * 107.36605834960938, b * 13);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    Lb(g, d[2]);
    jb(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 70, b * 107.36605834960938, b * 13);
    Lb(g, d[1], d[3], b * 8);
    jb(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    Lb(g, d[2]);
    return f;
  }
  function Lm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    Lb(d, b[0]);
    return c;
  }
  function Wm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Lb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Lb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    Lb(d, b[3]);
    jb(d, a * 103, a * 110, a * 11);
    Lb(d, b[4]);
    jb(d, a * 55, a * 111, a * 11);
    Lb(d, b[4]);
    jb(d, a * 99, a * 107, a * 5);
    Lb(d, b[1]);
    jb(d, a * 51, a * 108, a * 5);
    Lb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    Lb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    Lb(d, b[3]);
    d.translate(2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Lb(d, ag, b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    Lb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    Lb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    Lb(d, b[3]);
    return c;
  }
  function Gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    Wb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    Lb(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    Lb(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    Lb(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    Lb(e, undefined, c[6], a * 15);
    return d;
  }
  function qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    Wb(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    Lb(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    Lb(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    Wb(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    Lb(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    Lb(e, ag, c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    Lb(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    Lb(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    Lb(e, c[4], c[1], a * 8);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    Wb(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    Lb(e, c[5]);
    return d;
  }
  function Nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    Lb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    Lb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    Lb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    Lb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    Lb(e, Tj, c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    Lb(e, c[4], c[5], a * 5);
    return d;
  }
  function Om() {
    new Date().getTime();
    ic();
    (function () {
      ᐃΔ[814] = jd(1, [{
        f: $m,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[815] = ᐃΔ[814];
      ᐃΔ[955] = [];
      ᐃΔ[955][0] = ΔΔ.ⲆⲆⲆⵠΔⲆⲆ;
      ᐃΔ[955][1] = ΔΔ.ⲆⵠⲆⵠⲆᐃΔ;
      ᐃΔ[955][2] = ΔΔ.ⲆⲆᐃΔΔⲆΔ;
      ᐃΔ[956] = ᐃΔ[955];
      ᐃΔ[972] = [];
      ᐃΔ[972][0] = ΔΔ.ᐃⲆΔᐃⲆᐃⵠ;
      ᐃΔ[972][1] = ΔΔ.ⲆΔᐃᐃⲆᐃⲆ;
      ᐃΔ[972][2] = ΔΔ.ΔΔⵠⵠᐃⵠᐃ;
      ᐃΔ[973] = ᐃΔ[972];
      ᐃΔ[987] = [];
      ᐃΔ[987][0] = ΔΔ.ΔⵠⵠΔⲆΔΔ;
      ᐃΔ[987][1] = ΔΔ.ΔΔⵠⵠⵠⲆⲆ;
      ᐃΔ[987][2] = ΔΔ.ΔΔᐃᐃⲆΔⵠ;
      ᐃΔ[988] = ᐃΔ[987];
      ᐃΔ[1154] = [];
      ᐃΔ[1154][0] = ΔΔ.ⵠⵠΔⵠΔⲆⲆ;
      ᐃΔ[1154][1] = ΔΔ.ᐃⵠΔΔΔⵠⵠ;
      ᐃΔ[1154][2] = ΔΔ.ΔⵠᐃΔⲆⵠΔ;
      ᐃΔ[1155] = ᐃΔ[1154];
      ᐃΔ[965] = [];
      ᐃΔ[965][0] = ΔΔ.ⵠΔΔᐃⵠΔⵠ;
      ᐃΔ[965][1] = ΔΔ.ⵠΔⵠΔᐃⵠΔ;
      ᐃΔ[965][2] = ΔΔ.ᐃΔⵠᐃⵠⵠᐃ;
      ᐃΔ[974] = ᐃΔ[965];
      ᐃΔ[1028] = [];
      ᐃΔ[1028][0] = ΔΔ.ⲆΔΔⵠΔⲆᐃ;
      ᐃΔ[1028][1] = ΔΔ.ᐃⲆⲆΔⵠⵠⵠ;
      ᐃΔ[1028][2] = ΔΔ.ΔΔⵠᐃⲆⲆⵠ;
      ᐃΔ[1029] = ᐃΔ[1028];
      ᐃΔ[1027] = ᐃΔ[1028];
      ᐃΔ[712] = [];
      ᐃΔ[712][0] = ΔΔ.ΔⲆⲆⲆΔΔⲆᐃᐃ;
      ᐃΔ[712][1] = ΔΔ.ⲆᐃΔⵠᐃⵠⵠⲆⲆ;
      ᐃΔ[712][2] = ΔΔ.ⵠⲆⲆⲆᐃⲆΔⵠⵠ;
      ᐃΔ[713] = ᐃΔ[712];
      ᐃΔ[714] = ᐃΔ[712];
      ᐃΔ[1031] = [];
      ᐃΔ[1031][0] = ΔΔ.ΔᐃΔⲆⲆΔⵠ;
      ᐃΔ[1031][1] = ΔΔ.ᐃⲆΔΔΔΔΔ;
      ᐃΔ[1031][2] = ΔΔ.ⲆⲆΔᐃᐃⲆⵠ;
      ᐃΔ[1032] = ᐃΔ[1031];
      ᐃΔ[1030] = ᐃΔ[1031];
      ᐃΔ[423] = [];
      ᐃΔ[423][0] = ΔΔ.ᐃⲆᐃΔΔⲆⲆ;
      ᐃΔ[423][1] = ΔΔ.ΔΔΔᐃΔⲆⵠ;
      ᐃΔ[423][2] = ΔΔ.ⵠⲆΔⲆⵠⲆΔ;
      ᐃΔ[425] = ᐃΔ[423];
      ᐃΔ[424] = ᐃΔ[423];
      ᐃΔ[1233] = [];
      ᐃΔ[1233][0] = ΔΔ.ΔⵠᐃᐃΔⲆⵠ;
      ᐃΔ[1233][1] = ΔΔ.ΔΔᐃᐃⲆΔⲆ;
      ᐃΔ[1233][2] = ΔΔ.ᐃⲆⲆᐃⵠⲆⲆ;
      ᐃΔ[1234] = ᐃΔ[1233];
      ᐃΔ[1230] = [];
      ᐃΔ[1230][0] = ΔΔ.ᐃⲆⲆΔⲆᐃᐃ;
      ᐃΔ[1230][1] = ΔΔ.ⵠᐃⲆⵠᐃⲆᐃ;
      ᐃΔ[1230][2] = ΔΔ.ⵠⲆⲆᐃⵠⲆⵠ;
      ᐃΔ[1232] = ᐃΔ[1230];
      ᐃΔ[1231] = ᐃΔ[1230];
      ᐃΔ[569] = [];
      ᐃΔ[569][0] = ΔΔ.ΔΔΔⵠᐃΔΔ;
      ᐃΔ[569][1] = ΔΔ.ⵠⲆⲆⲆΔⵠⲆ;
      ᐃΔ[569][2] = ΔΔ.ᐃᐃⲆᐃⵠΔΔ;
      ᐃΔ[571] = ᐃΔ[569];
      ᐃΔ[570] = ᐃΔ[569];
      ᐃΔ[1166] = [];
      ᐃΔ[1166][0] = ΔΔ.ⵠⵠⲆΔᐃᐃΔ;
      ᐃΔ[1166][1] = ΔΔ.ⲆᐃⲆᐃⲆⲆᐃ;
      ᐃΔ[1166][2] = ΔΔ.ΔᐃⲆⲆΔΔΔ;
      ᐃΔ[1167] = ᐃΔ[1166];
      ᐃΔ[1168] = ᐃΔ[1166];
      ᐃΔ[572] = [];
      ᐃΔ[572][0] = ΔΔ.ⵠⵠᐃΔΔⵠⲆ;
      ᐃΔ[572][1] = ΔΔ.ⵠⵠⵠⵠⲆΔⵠ;
      ᐃΔ[572][2] = ΔΔ.ⵠⵠᐃΔΔⲆⵠ;
      ᐃΔ[574] = ᐃΔ[572];
      ᐃΔ[573] = ᐃΔ[572];
      ᐃΔ[1169] = [];
      ᐃΔ[1169][0] = ΔΔ.ᐃⵠᐃΔⲆⲆᐃ;
      ᐃΔ[1169][1] = ΔΔ.ᐃΔⵠⵠᐃⵠⵠ;
      ᐃΔ[1169][2] = ΔΔ.ᐃⲆΔⲆⵠΔⵠ;
      ᐃΔ[1170] = ᐃΔ[1169];
      ᐃΔ[1171] = ᐃΔ[1169];
      ᐃΔ[575] = [];
      ᐃΔ[575][0] = ΔΔ.ⵠⲆΔⲆⲆΔᐃ;
      ᐃΔ[575][1] = ΔΔ.ⵠⵠΔⲆᐃᐃᐃ;
      ᐃΔ[575][2] = ΔΔ.ΔⲆⵠⲆᐃᐃⲆ;
      ᐃΔ[577] = ᐃΔ[575];
      ᐃΔ[576] = ᐃΔ[575];
      ᐃΔ[1172] = [];
      ᐃΔ[1172][0] = ΔΔ.ⵠⲆⲆᐃᐃⵠⲆ;
      ᐃΔ[1172][1] = ΔΔ.ΔⵠΔΔⵠⲆᐃ;
      ᐃΔ[1172][2] = ΔΔ.ⲆᐃⵠⵠⵠⲆᐃ;
      ᐃΔ[1173] = ᐃΔ[1172];
      ᐃΔ[1174] = ᐃΔ[1172];
      ᐃΔ[578] = [];
      ᐃΔ[578][0] = ΔΔ.ΔᐃⲆᐃΔⲆΔ;
      ᐃΔ[578][1] = ΔΔ.ΔⵠᐃⲆⵠΔᐃ;
      ᐃΔ[578][2] = ΔΔ.ⵠΔⲆⲆⲆⵠⲆ;
      ᐃΔ[580] = ᐃΔ[578];
      ᐃΔ[579] = ᐃΔ[578];
      ᐃΔ[1175] = [];
      ᐃΔ[1175][0] = ΔΔ.ΔᐃΔΔᐃⲆᐃ;
      ᐃΔ[1175][1] = ΔΔ.ⵠΔⲆⲆᐃᐃᐃ;
      ᐃΔ[1175][2] = ΔΔ.ΔⲆᐃⵠΔΔⲆ;
      ᐃΔ[1176] = ᐃΔ[1175];
      ᐃΔ[1177] = ᐃΔ[1175];
      ᐃΔ[581] = [];
      ᐃΔ[581][0] = ΔΔ.ΔⵠᐃᐃⵠΔΔ;
      ᐃΔ[581][1] = ΔΔ.ⵠᐃⵠⵠⵠᐃΔ;
      ᐃΔ[581][2] = ΔΔ.ᐃⵠⲆᐃⲆⵠΔ;
      ᐃΔ[583] = ᐃΔ[581];
      ᐃΔ[582] = ᐃΔ[581];
      ᐃΔ[1178] = [];
      ᐃΔ[1178][0] = ΔΔ.ᐃⲆΔⵠᐃⵠⵠ;
      ᐃΔ[1178][1] = ΔΔ.ΔΔΔⲆΔⵠⲆ;
      ᐃΔ[1178][2] = ΔΔ.ⵠⲆⲆⵠᐃᐃΔ;
      ᐃΔ[1179] = ᐃΔ[1178];
      ᐃΔ[1180] = ᐃΔ[1178];
      ᐃΔ[584] = [];
      ᐃΔ[584][0] = ΔΔ.ᐃⵠⲆᐃⲆᐃᐃ;
      ᐃΔ[584][1] = ΔΔ.ⵠⵠΔᐃᐃⵠⲆ;
      ᐃΔ[584][2] = ΔΔ.ᐃⵠⵠⲆᐃΔⲆ;
      ᐃΔ[586] = ᐃΔ[584];
      ᐃΔ[585] = ᐃΔ[584];
      ᐃΔ[1181] = [];
      ᐃΔ[1181][0] = ΔΔ.ΔⵠⲆⲆᐃᐃⲆ;
      ᐃΔ[1181][1] = ΔΔ.ⲆⵠᐃΔΔⵠⲆ;
      ᐃΔ[1181][2] = ΔΔ.ⵠΔΔⵠΔΔⲆ;
      ᐃΔ[1182] = ᐃΔ[1181];
      ᐃΔ[1183] = ᐃΔ[1181];
      ᐃΔ[587] = [];
      ᐃΔ[587][0] = ΔΔ.ⵠΔⲆᐃᐃΔⲆ;
      ᐃΔ[587][1] = ΔΔ.ᐃⵠⵠΔᐃⲆⲆ;
      ᐃΔ[587][2] = ΔΔ.ΔΔᐃᐃΔⵠⵠ;
      ᐃΔ[589] = ᐃΔ[587];
      ᐃΔ[588] = ᐃΔ[587];
      ᐃΔ[1184] = [];
      ᐃΔ[1184][0] = ΔΔ.ⵠⲆⵠΔⵠᐃΔ;
      ᐃΔ[1184][1] = ΔΔ.ⵠᐃΔᐃΔⲆᐃ;
      ᐃΔ[1184][2] = ΔΔ.ⵠΔⲆΔⲆᐃΔ;
      ᐃΔ[1185] = ᐃΔ[1184];
      ᐃΔ[1186] = ᐃΔ[1184];
      ᐃΔ[1257] = [];
      ᐃΔ[1257][0] = ΔΔ.ᐃⵠΔΔⲆⵠᐃ;
      ᐃΔ[1257][1] = ΔΔ.ΔⵠⲆᐃᐃⵠⵠ;
      ᐃΔ[1257][2] = ΔΔ.ᐃⵠⲆⵠᐃΔΔ;
      ᐃΔ[1258] = ᐃΔ[1257];
      ᐃΔ[1256] = ᐃΔ[1257];
      ᐃΔ[1260] = [];
      ᐃΔ[1260][0] = ΔΔ.ⲆⵠΔΔΔΔⲆ;
      ᐃΔ[1260][1] = ΔΔ.ᐃᐃⲆᐃⵠᐃᐃ;
      ᐃΔ[1260][2] = ΔΔ.ᐃΔⲆⵠΔΔⲆ;
      ᐃΔ[1261] = ᐃΔ[1260];
      ᐃΔ[1259] = ᐃΔ[1260];
      ᐃΔ[1263] = [];
      ᐃΔ[1263][0] = ΔΔ.ᐃΔⲆΔᐃⵠΔ;
      ᐃΔ[1263][1] = ΔΔ.ⲆⲆⲆΔΔⵠΔ;
      ᐃΔ[1263][2] = ΔΔ.ᐃᐃΔᐃⲆᐃΔ;
      ᐃΔ[1264] = ᐃΔ[1263];
      ᐃΔ[1262] = ᐃΔ[1263];
      ᐃΔ[1266] = [];
      ᐃΔ[1266][0] = ΔΔ.ΔΔΔᐃⵠⵠⵠⵠⵠ;
      ᐃΔ[1266][1] = ΔΔ.ΔΔⲆᐃⲆΔⵠᐃΔ;
      ᐃΔ[1266][2] = ΔΔ.ΔΔᐃΔⵠᐃⲆΔⲆ;
      ᐃΔ[1267] = ᐃΔ[1266];
      ᐃΔ[1265] = ᐃΔ[1266];
      ᐃΔ[1269] = [];
      ᐃΔ[1269][0] = ΔΔ.ᐃⵠⵠⲆΔΔⵠᐃΔ;
      ᐃΔ[1269][1] = ΔΔ.ⵠΔⲆΔⲆⲆⲆΔΔ;
      ᐃΔ[1269][2] = ΔΔ.ⵠⵠᐃᐃⵠⵠⲆⲆᐃ;
      ᐃΔ[1270] = ᐃΔ[1269];
      ᐃΔ[1268] = ᐃΔ[1269];
      ᐃΔ[1272] = [];
      ᐃΔ[1272][0] = ΔΔ.ΔⵠⵠⵠΔⲆΔⵠⲆ;
      ᐃΔ[1272][1] = ΔΔ.ᐃⲆΔΔⲆⲆᐃⵠⵠ;
      ᐃΔ[1272][2] = ΔΔ.ΔⵠΔᐃⵠⵠΔⵠⲆ;
      ᐃΔ[1273] = ᐃΔ[1272];
      ᐃΔ[1271] = ᐃΔ[1272];
      ᐃΔ[1239] = [];
      ᐃΔ[1239][0] = ΔΔ.ᐃⵠᐃⵠⵠΔⵠΔΔ;
      ᐃΔ[1239][1] = ΔΔ.ⲆⵠΔⵠᐃΔⵠⵠΔ;
      ᐃΔ[1239][2] = ΔΔ.ⵠΔᐃΔΔⵠⵠⲆΔ;
      ᐃΔ[1240] = ᐃΔ[1239];
      ᐃΔ[1238] = ᐃΔ[1239];
      ᐃΔ[1242] = [];
      ᐃΔ[1242][0] = ΔΔ.ᐃⲆⲆᐃⲆᐃⲆⵠⲆ;
      ᐃΔ[1242][1] = ΔΔ.ⵠΔⲆⲆⵠⵠᐃᐃΔ;
      ᐃΔ[1242][2] = ΔΔ.ⵠⲆΔⲆᐃⵠᐃΔΔ;
      ᐃΔ[1243] = ᐃΔ[1242];
      ᐃΔ[1241] = ᐃΔ[1242];
      ᐃΔ[1245] = [];
      ᐃΔ[1245][0] = ΔΔ.ⲆⵠΔΔᐃⲆⵠⵠᐃ;
      ᐃΔ[1245][1] = ΔΔ.ᐃΔΔⲆᐃⲆⵠΔⲆ;
      ᐃΔ[1245][2] = ΔΔ.ⵠⲆⵠⲆⵠΔᐃⲆᐃ;
      ᐃΔ[1246] = ᐃΔ[1245];
      ᐃΔ[1244] = ᐃΔ[1245];
      ᐃΔ[1248] = [];
      ᐃΔ[1248][0] = ΔΔ.ΔᐃⲆⲆΔᐃⲆᐃΔ;
      ᐃΔ[1248][1] = ΔΔ.ᐃᐃᐃⵠᐃⲆᐃⵠⲆ;
      ᐃΔ[1248][2] = ΔΔ.ⵠⵠΔⵠᐃⵠΔᐃⵠ;
      ᐃΔ[1249] = ᐃΔ[1248];
      ᐃΔ[1247] = ᐃΔ[1248];
      ᐃΔ[1251] = [];
      ᐃΔ[1251][0] = ΔΔ.ⵠᐃΔΔⲆⵠⵠΔⵠ;
      ᐃΔ[1251][1] = ΔΔ.ⲆⵠⵠΔΔⵠⲆᐃΔ;
      ᐃΔ[1251][2] = ΔΔ.ᐃⵠΔⲆⵠⲆᐃⲆᐃ;
      ᐃΔ[1252] = ᐃΔ[1251];
      ᐃΔ[1250] = ᐃΔ[1251];
      ᐃΔ[1254] = [];
      ᐃΔ[1254][0] = ΔΔ.ⵠᐃᐃⵠΔⲆⲆΔΔ;
      ᐃΔ[1254][1] = ΔΔ.ⲆⵠΔᐃΔⵠᐃⲆⲆ;
      ᐃΔ[1254][2] = ΔΔ.ⲆΔᐃⵠΔΔⲆⲆᐃ;
      ᐃΔ[1255] = ᐃΔ[1254];
      ᐃΔ[1253] = ᐃΔ[1254];
      ᐃΔ[1227] = [];
      ᐃΔ[1227][0] = ΔΔ.ΔᐃⲆΔⲆᐃⵠ;
      ᐃΔ[1227][1] = ΔΔ.ⵠⵠⵠΔᐃᐃⲆ;
      ᐃΔ[1227][2] = ΔΔ.ᐃⲆΔⲆᐃⵠⲆ;
      ᐃΔ[1229] = ᐃΔ[1227];
      ᐃΔ[1228] = ᐃΔ[1227];
      ᐃΔ[1187] = [];
      ᐃΔ[1187][0] = ΔΔ.ΔᐃⲆⵠᐃΔΔ;
      ᐃΔ[1187][1] = ΔΔ.ᐃᐃⵠⵠΔⵠⲆ;
      ᐃΔ[1187][2] = ΔΔ.ⲆⲆⵠⵠᐃⵠⵠ;
      ᐃΔ[1188] = ᐃΔ[1187];
      ᐃΔ[ts.ᐃⲆⵠⲆᐃΔⲆⵠⵠ] = ᐃΔ[1187];
      ᐃΔ[840] = jd(1, [{
        f: ed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
      }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[841] = ᐃΔ[840];
      ᐃΔ[850] = jd(1, [{
        f: Nm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[851] = ᐃΔ[850];
      ᐃΔ[644] = jd(1, [{
        f: qd,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Ld,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Gd,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[643] = ᐃΔ[644];
      ᐃΔ[639] = jd(1, [{
        f: Kd,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[800] = jd(1, [{
        f: ym,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[799] = ᐃΔ[800];
      ᐃΔ[631] = jd(1, [{
        f: fu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[632] = ᐃΔ[631];
      ᐃΔ[311] = jd(1, [{
        f: fu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"]
      }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[284] = ᐃΔ[311];
      ᐃΔ[808] = jd(1, [{
        f: fu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c67933", "#b17238"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[809] = ᐃΔ[808];
      ᐃΔ[834] = jd(1, [{
        f: fu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e8e8e8", "#bbbbbb"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[835] = ᐃΔ[834];
      ᐃΔ[845] = jd(1, [{
        f: fu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#328a56", "#449573"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[846] = ᐃΔ[845];
      ᐃΔ[949] = jd(1, [{
        f: fu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c98e2f", "#a36b11"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[950] = ᐃΔ[949];
      ᐃΔ[951] = ᐃΔ[949];
      ᐃΔ[966] = jd(1, [{
        f: fu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#13a56d", "#098a58"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[967] = ᐃΔ[966];
      ᐃΔ[968] = ᐃΔ[966];
      ᐃΔ[981] = jd(1, [{
        f: fu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[982] = ᐃΔ[981];
      ᐃΔ[983] = ᐃΔ[981];
      ᐃΔ[959] = jd(1, [{
        f: fu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#b22419", "#99110e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[960] = ᐃΔ[959];
      ᐃΔ[961] = ᐃΔ[959];
      ᐃΔ[309] = jd(1, [{
        f: Rd,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"]
      }, {
        f: Yd,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[302] = ᐃΔ[309];
      ᐃΔ[328] = jd(1, [{
        f: Ud,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
      }, {
        f: Yd,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[327] = ᐃΔ[328];
      ᐃΔ[860] = jd(1, [{
        f: Ut,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
      }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[865] = jd(1, [{
        f: eu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[829] = jd(1, [{
        f: Qt,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[261] = jd(1, [{
        f: Mt,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[292] = jd(1, [{
        f: Lt,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[293] = jd(1, [{
        f: _t,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[455] = jd(1, [{
        f: hu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[313] = jd(1, [{
        f: Yt,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[312] = jd(1, [{
        f: Yt,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[258] = jd(1, [{
        f: Yt,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[296] = jd(1, [{
        f: Yt,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[458] = jd(1, [{
        f: Yt,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[1017] = [];
      ᐃΔ[1017][0] = ΔΔ.ⲆᐃΔⲆΔᐃⲆ;
      ᐃΔ[1017][1] = ΔΔ.ⲆⲆΔᐃⲆᐃΔ;
      ᐃΔ[1017][2] = ΔΔ.ⵠⵠⲆⲆΔⲆⵠ;
      ᐃΔ[1019] = ᐃΔ[1017];
      ᐃΔ[1018] = ᐃΔ[1017];
      ᐃΔ[315] = jd(1, [{
        f: du,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#252B28", "#58645F", "#75827D"]
      }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[297] = jd(1, [{
        f: su,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#282823", "#877c2d", "#c4bc51"]
      }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[298] = jd(1, [{
        f: nu,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#232828", "#3fc9c9", "#74ede6"]
      }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[316] = jd(1, [{
        f: Rd,
        x: 0,
        y: -5,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[830] = ᐃΔ[829];
      ᐃΔ[254] = ᐃΔ[261];
      ᐃΔ[290] = ᐃΔ[292];
      ᐃΔ[291] = ᐃΔ[293];
      ᐃΔ[456] = ᐃΔ[455];
      ᐃΔ[314] = ᐃΔ[313];
      ᐃΔ[256] = ᐃΔ[312];
      ᐃΔ[295] = ᐃΔ[258];
      ᐃΔ[257] = ᐃΔ[296];
      ᐃΔ[460] = ᐃΔ[458];
      ᐃΔ[277] = jd(1, [{
        f: Cd,
        x: 0,
        y: 0,
        a: 1,
        r: 0
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[310] = jd(1, [{
        f: zd,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[262] = ᐃΔ[310];
      ᐃΔ[329] = jd(1, [{
        f: Cu,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[263] = ᐃΔ[329];
      ᐃΔ[331] = jd(1, [{
        f: Au,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[332] = ᐃΔ[331];
      ᐃΔ[492] = jd(1, [{
        f: Cu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[493] = ᐃΔ[492];
      ᐃΔ[330] = jd(1, [{
        f: Fu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[265] = ᐃΔ[330];
      ᐃΔ[317] = jd(1, [{
        f: zu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[318] = ᐃΔ[317];
      ᐃΔ[319] = jd(1, [{
        f: wm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[320] = ᐃΔ[319];
      ᐃΔ[362] = jd(1, [{
        f: Im,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[363] = ᐃΔ[362];
      ᐃΔ[364] = jd(1, [{
        f: Im,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[365] = ᐃΔ[364];
      ᐃΔ[361] = jd(1, [{
        f: Mm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[360] = ᐃΔ[361];
      ᐃΔ[495] = jd(1, [{
        f: Mm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[496] = ᐃΔ[495];
      ᐃΔ[335] = jd(1, [{
        f: im,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[268] = ᐃΔ[335];
      ᐃΔ[372] = jd(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[371] = ᐃΔ[372];
      ᐃΔ[499] = jd(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[498] = ᐃΔ[499];
      ᐃΔ[375] = jd(1, [{
        f: pm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[374] = ᐃΔ[375];
      ᐃΔ[378] = jd(1, [{
        f: Bm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[377] = ᐃΔ[378];
      ᐃΔ[337] = jd(1, [{
        f: Pm,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[338] = ᐃΔ[337];
      ᐃΔ[300] = jd(1, [{
        f: Md,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[323] = jd(1, [{
        f: Md,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[325] = ᐃΔ[323];
      ᐃΔ[305] = jd(1, [{
        f: Hd,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[513] = jd(1, [{
        f: Hd,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[515] = ᐃΔ[513];
      ᐃΔ[368] = jd(1, [{
        f: Tm,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ef96be", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[1162] = jd(1, [{
        f: Tm,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#55423e", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[178] = jd(1, [{
        f: Du,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[179] = jd(1, [{
        f: Du,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[624] = jd(1, [{
        f: Tm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[393] = jd(1, [{
        f: Tm,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#231f20", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[505] = jd(1, [{
        f: Tm,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ffffff", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[369] = jd(1, [{
        f: mm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[370] = ᐃΔ[369];
      ᐃΔ[381] = jd(1, [{
        f: Em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[380] = ᐃΔ[381];
      ᐃΔ[502] = jd(1, [{
        f: gm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[503] = ᐃΔ[502];
      ᐃΔ[880] = jd(1, [{
        f: Xd,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[881] = ᐃΔ[880];
      ᐃΔ[882] = jd(1, [{
        f: Fd,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[883] = ᐃΔ[882];
      ᐃΔ[303] = jd(1, [{
        f: Od,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#ffffff", "#cec0c4"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[304] = ᐃΔ[303];
      ᐃΔ[392] = [];
      ᐃΔ[392][0] = ΔΔ.ΔⲆⵠΔⵠⲆⵠ;
      ᐃΔ[392][1] = ΔΔ.ⵠⵠⲆⵠⵠᐃΔ;
      ᐃΔ[392][2] = ΔΔ.ⵠⵠΔᐃΔⵠᐃ;
      ᐃΔ[367] = ᐃΔ[392];
      ᐃΔ[975] = [];
      ᐃΔ[975][0] = ΔΔ.ΔᐃᐃᐃΔΔⵠ;
      ᐃΔ[975][1] = ΔΔ.ᐃᐃⵠᐃΔΔⵠ;
      ᐃΔ[975][2] = ΔΔ.ᐃΔⵠⵠᐃᐃⵠ;
      ᐃΔ[977] = ᐃΔ[975];
      ᐃΔ[976] = ᐃΔ[975];
      ᐃΔ[978] = [];
      ᐃΔ[978][0] = ΔΔ.ΔΔΔᐃᐃⵠΔ;
      ᐃΔ[978][1] = ΔΔ.ⵠⵠᐃⲆⵠΔᐃ;
      ᐃΔ[978][2] = ΔΔ.ᐃᐃⲆⵠΔΔᐃ;
      ᐃΔ[980] = ᐃΔ[978];
      ᐃΔ[979] = ᐃΔ[978];
      ᐃΔ[1158] = [];
      ᐃΔ[1158][0] = ΔΔ.ⲆⵠⵠᐃΔᐃⵠ;
      ᐃΔ[1158][1] = ΔΔ.ⲆⵠⵠᐃΔᐃⵠ;
      ᐃΔ[1158][2] = ΔΔ.ⲆⵠⵠᐃΔᐃⵠ;
      ᐃΔ[1159] = ᐃΔ[1158];
      ᐃΔ[426] = [];
      ᐃΔ[426][0] = ΔΔ.ⲆΔΔⵠᐃⲆᐃ;
      ᐃΔ[426][1] = ΔΔ.ΔⵠⲆΔⲆⲆⲆ;
      ᐃΔ[426][2] = ΔΔ.ⵠᐃΔᐃΔΔᐃ;
      ᐃΔ[427] = ᐃΔ[426];
      ᐃΔ[428] = ᐃΔ[426];
      ᐃΔ[1160] = [];
      ᐃΔ[1160][0] = ΔΔ.ᐃΔⵠⲆⵠⵠⲆ;
      ᐃΔ[1160][1] = ΔΔ.ᐃΔⵠⲆⵠⵠⲆ;
      ᐃΔ[1160][2] = ΔΔ.ᐃΔⵠⲆⵠⵠⲆ;
      ᐃΔ[1161] = ᐃΔ[1160];
      ᐃΔ[1236] = [];
      ᐃΔ[1236][0] = ΔΔ.ᐃΔΔΔⲆᐃᐃⵠⲆ;
      ᐃΔ[1236][1] = ΔΔ.ΔᐃΔⵠⲆΔⲆⵠⵠ;
      ᐃΔ[1236][2] = ΔΔ.ⲆΔⲆᐃⲆⵠⵠⲆᐃ;
      ᐃΔ[1235] = ᐃΔ[1236];
      ᐃΔ[1237] = ᐃΔ[1236];
      ᐃΔ[991] = [];
      ᐃΔ[991][0] = ΔΔ.ΔⲆⲆΔⲆⲆⲆ;
      ᐃΔ[991][1] = ΔΔ.ⲆᐃⲆⲆⵠⵠⲆ;
      ᐃΔ[991][2] = ΔΔ.ⲆΔΔⵠΔΔᐃ;
      ᐃΔ[990] = ᐃΔ[991];
      ᐃΔ[992] = ᐃΔ[991];
      ᐃΔ[994] = [];
      ᐃΔ[994][0] = ΔΔ.ⲆⵠⲆⵠΔΔⲆ;
      ᐃΔ[994][1] = ΔΔ.ⲆⲆᐃⵠⵠⲆⲆ;
      ᐃΔ[994][2] = ΔΔ.ΔⲆⲆΔⵠⵠΔ;
      ᐃΔ[993] = ᐃΔ[994];
      ᐃΔ[995] = ᐃΔ[994];
      ᐃΔ[997] = [];
      ᐃΔ[997][0] = ΔΔ.ΔΔᐃᐃᐃΔⲆ;
      ᐃΔ[997][1] = ΔΔ.ⵠⵠⵠⵠᐃᐃⵠ;
      ᐃΔ[997][2] = ΔΔ.ⲆΔⵠᐃΔⵠⲆ;
      ᐃΔ[996] = ᐃΔ[997];
      ᐃΔ[998] = ᐃΔ[997];
      ᐃΔ[1000] = [];
      ᐃΔ[1000][0] = ΔΔ.ΔᐃⲆⵠⲆⵠΔ;
      ᐃΔ[1000][1] = ΔΔ.ⲆⵠᐃᐃΔⵠᐃ;
      ᐃΔ[1000][2] = ΔΔ.ᐃⲆᐃⵠΔⲆⲆ;
      ᐃΔ[999] = ᐃΔ[1000];
      ᐃΔ[1001] = ᐃΔ[1000];
      ᐃΔ[1003] = [];
      ᐃΔ[1003][0] = ΔΔ.ⲆⵠΔΔⲆⵠⵠ;
      ᐃΔ[1003][1] = ΔΔ.ⲆΔᐃΔᐃⵠᐃ;
      ᐃΔ[1003][2] = ΔΔ.ᐃΔᐃΔⵠᐃᐃ;
      ᐃΔ[1002] = ᐃΔ[1003];
      ᐃΔ[1004] = ᐃΔ[1003];
      ᐃΔ[1006] = [];
      ᐃΔ[1006][0] = ΔΔ.ΔΔⵠᐃⵠⵠⲆ;
      ᐃΔ[1006][1] = ΔΔ.ᐃΔⲆⵠⲆⵠⵠ;
      ᐃΔ[1006][2] = ΔΔ.Δᐃᐃᐃⵠᐃᐃ;
      ᐃΔ[1005] = ᐃΔ[1006];
      ᐃΔ[1007] = ᐃΔ[1006];
      ᐃΔ[1009] = [];
      ᐃΔ[1009][0] = ΔΔ.ⲆΔⵠⲆⵠⵠⲆ;
      ᐃΔ[1009][1] = ΔΔ.ⵠⲆΔΔⲆⲆⵠ;
      ᐃΔ[1009][2] = ΔΔ.ᐃΔⵠⵠᐃΔΔ;
      ᐃΔ[1008] = ᐃΔ[1009];
      ᐃΔ[1010] = ᐃΔ[1009];
      ᐃΔ[1012] = [];
      ᐃΔ[1012][0] = ΔΔ.ⲆⲆᐃⲆΔᐃⵠ;
      ᐃΔ[1012][1] = ΔΔ.ᐃⲆΔΔⵠᐃΔ;
      ᐃΔ[1012][2] = ΔΔ.ⵠⵠⵠⲆᐃΔⲆ;
      ᐃΔ[1011] = ᐃΔ[1012];
      ᐃΔ[1013] = ᐃΔ[1012];
      ᐃΔ[1015] = [];
      ᐃΔ[1015][0] = ΔΔ.ΔᐃᐃᐃΔⵠᐃ;
      ᐃΔ[1015][1] = ΔΔ.ⲆⲆⲆΔᐃᐃⲆ;
      ᐃΔ[1015][2] = ΔΔ.ΔᐃΔⲆⲆᐃᐃ;
      ᐃΔ[1014] = ᐃΔ[1015];
      ᐃΔ[1016] = ᐃΔ[1015];
      ᐃΔ[1035] = [];
      ᐃΔ[1035][0] = ΔΔ.ⵠᐃΔⲆᐃ;
      ᐃΔ[1035][1] = ΔΔ.ⵠᐃΔⲆᐃ;
      ᐃΔ[1035][2] = ΔΔ.ⵠᐃΔⲆᐃ;
      ᐃΔ[ts.ⵠΔᐃⵠⲆΔⲆΔⲆ] = ᐃΔ[1035];
      ᐃΔ[1036] = ᐃΔ[1035];
      ᐃΔ[1037] = [];
      ᐃΔ[1037][0] = ΔΔ.Ⲇⵠᐃⵠⵠ;
      ᐃΔ[1037][1] = ΔΔ.Ⲇⵠᐃⵠⵠ;
      ᐃΔ[1037][2] = ΔΔ.Ⲇⵠᐃⵠⵠ;
      ᐃΔ[ts.ᐃᐃⲆᐃΔᐃⲆΔᐃ] = ᐃΔ[1037];
      ᐃΔ[1038] = ᐃΔ[1037];
      ᐃΔ[1039] = [];
      ᐃΔ[1039][0] = ΔΔ.ᐃᐃⲆⲆΔ;
      ᐃΔ[1039][1] = ΔΔ.ᐃᐃⲆⲆΔ;
      ᐃΔ[1039][2] = ΔΔ.ᐃᐃⲆⲆΔ;
      ᐃΔ[ts.ΔΔΔΔΔᐃⵠⲆⲆ] = ᐃΔ[1039];
      ᐃΔ[1040] = ᐃΔ[1039];
      ᐃΔ[1156] = [];
      ᐃΔ[1156][0] = ΔΔ.ᐃⵠΔΔᐃ;
      ᐃΔ[1156][1] = ΔΔ.ᐃⵠΔΔᐃ;
      ᐃΔ[1156][2] = ΔΔ.ᐃⵠΔΔᐃ;
      ᐃΔ[1157] = ᐃΔ[1156];
      ᐃΔ[1046] = [];
      ᐃΔ[1046][0] = ΔΔ.ⲆΔⲆΔⵠⵠΔ;
      ᐃΔ[1046][1] = ΔΔ.ΔΔⲆⵠⵠᐃΔ;
      ᐃΔ[1046][2] = ΔΔ.ⲆⵠⲆᐃΔΔⲆ;
      ᐃΔ[1048] = ᐃΔ[1046];
      ᐃΔ[1047] = ᐃΔ[1046];
      ᐃΔ[744] = [];
      ᐃΔ[744][0] = ΔΔ.ΔᐃⵠⵠᐃᐃΔ;
      ᐃΔ[744][1] = ΔΔ.ᐃΔΔⵠⵠᐃⲆ;
      ᐃΔ[744][2] = ΔΔ.ᐃΔΔΔΔⵠΔ;
      ᐃΔ[746] = ᐃΔ[744];
      ᐃΔ[745] = ᐃΔ[744];
      ᐃΔ[747] = [];
      ᐃΔ[747][0] = ΔΔ.ᐃΔΔⵠᐃⵠᐃ;
      ᐃΔ[747][1] = ΔΔ.ⵠᐃⵠᐃⵠΔⵠ;
      ᐃΔ[747][2] = ΔΔ.ⲆⲆⲆΔᐃΔⵠ;
      ᐃΔ[749] = ᐃΔ[747];
      ᐃΔ[748] = ᐃΔ[747];
      ᐃΔ[1049] = [];
      ᐃΔ[1049][0] = ΔΔ.ΔⵠᐃΔⵠⲆᐃ;
      ᐃΔ[1049][1] = ΔΔ.ᐃⲆΔᐃⲆⲆⵠ;
      ᐃΔ[1049][2] = ΔΔ.ⲆᐃᐃᐃΔΔⲆ;
      ᐃΔ[1051] = ᐃΔ[1049];
      ᐃΔ[1050] = ᐃΔ[1049];
      ᐃΔ[1189] = [];
      ᐃΔ[1189][0] = ΔΔ.ᐃⵠⲆΔᐃΔⲆ;
      ᐃΔ[1189][1] = ΔΔ.ΔᐃⵠⲆΔᐃⵠ;
      ᐃΔ[1189][2] = ΔΔ.ᐃᐃⲆᐃᐃⵠᐃ;
      ᐃΔ[1191] = ᐃΔ[1189];
      ᐃΔ[1190] = ᐃΔ[1189];
      ᐃΔ[1110] = [];
      ᐃΔ[1110][0] = ΔΔ.ⲆⵠⵠᐃⵠΔⲆ;
      ᐃΔ[1110][1] = ΔΔ.ⲆⵠⵠᐃⲆⲆΔ;
      ᐃΔ[1110][2] = ΔΔ.ⲆΔΔⲆⵠⲆΔ;
      ᐃΔ[1112] = ᐃΔ[1110];
      ᐃΔ[1111] = ᐃΔ[1110];
      ᐃΔ[1131] = [];
      ᐃΔ[1131][0] = ΔΔ.ⵠΔΔΔᐃⲆⵠⵠⵠ;
      ᐃΔ[1131][1] = ΔΔ.ⵠΔᐃᐃⵠᐃᐃᐃⲆ;
      ᐃΔ[1131][2] = ΔΔ.ᐃᐃᐃⵠⲆΔⵠᐃⲆ;
      ᐃΔ[1133] = ᐃΔ[1131];
      ᐃΔ[1132] = ᐃΔ[1131];
      ᐃΔ[1137] = [];
      ᐃΔ[1137][0] = ΔΔ.ᐃᐃΔⵠⲆⲆᐃ;
      ᐃΔ[1137][1] = ΔΔ.ⵠᐃⵠΔᐃⵠⵠ;
      ᐃΔ[1137][2] = ΔΔ.ᐃⲆΔΔⲆΔⲆ;
      ᐃΔ[1138] = ᐃΔ[1137];
      ᐃΔ[1139] = ᐃΔ[1137];
      ᐃΔ[1140] = [];
      ᐃΔ[1140][0] = ΔΔ.ΔᐃⵠᐃΔΔᐃ;
      ᐃΔ[1140][1] = ΔΔ.ⵠⲆΔΔᐃᐃᐃ;
      ᐃΔ[1140][2] = ΔΔ.ⵠⲆᐃⵠΔᐃⵠ;
      ᐃΔ[1141] = ᐃΔ[1140];
      ᐃΔ[1142] = ᐃΔ[1140];
      ᐃΔ[1117] = [];
      ᐃΔ[1117][0] = ΔΔ.ᐃⵠΔΔⲆΔⲆ;
      ᐃΔ[1117][1] = ΔΔ.ⵠΔⵠⲆⲆⲆⲆ;
      ᐃΔ[1117][2] = ΔΔ.ΔⲆⲆΔΔᐃⵠ;
      ᐃΔ[1116] = ᐃΔ[1117];
      ᐃΔ[1118] = ᐃΔ[1117];
      ᐃΔ[1080] = [];
      ᐃΔ[1080][0] = ΔΔ.ⵠⲆᐃΔⵠⲆᐃ;
      ᐃΔ[1080][1] = ΔΔ.ᐃⲆΔᐃⵠⵠΔ;
      ᐃΔ[1080][2] = ΔΔ.ᐃⵠᐃⲆⵠᐃΔ;
      ᐃΔ[1082] = ᐃΔ[1080];
      ᐃΔ[1081] = ᐃΔ[1080];
      ᐃΔ[1224] = [];
      ᐃΔ[1224][0] = ΔΔ.ΔᐃⵠΔⲆᐃᐃ;
      ᐃΔ[1224][1] = ΔΔ.ᐃⲆⵠⲆΔᐃⵠ;
      ᐃΔ[1224][2] = ΔΔ.ᐃⲆᐃΔⲆᐃⵠ;
      ᐃΔ[1226] = ᐃΔ[1224];
      ᐃΔ[1225] = ᐃΔ[1224];
      ᐃΔ[1095] = [];
      ᐃΔ[1095][0] = ΔΔ.Δᐃⵠᐃᐃⵠⵠ;
      ᐃΔ[1095][1] = ΔΔ.ⲆⲆⵠΔΔΔᐃ;
      ᐃΔ[1095][2] = ΔΔ.ⵠᐃⲆⵠΔⲆᐃ;
      ᐃΔ[1097] = ᐃΔ[1095];
      ᐃΔ[1096] = ᐃΔ[1095];
      ᐃΔ[717] = jd(1, [{
        f: gp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
      }, {
        f: Qc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e4c027"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[718] = ᐃΔ[717];
      ᐃΔ[408] = jd(1, [{
        f: zm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[409] = ᐃΔ[408];
      ᐃΔ[907] = jd(1, [{
        f: lm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
      }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[909] = ᐃΔ[907];
      ᐃΔ[908] = ᐃΔ[907];
      ᐃΔ[197] = jd(1, [{
        f: Jm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[906] = ᐃΔ[197];
      ᐃΔ[901] = jd(1, [{
        f: Qm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[900] = ᐃΔ[901];
      ᐃΔ[899] = ᐃΔ[901];
      ᐃΔ[401] = jd(1, [{
        f: Am,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[402] = ᐃΔ[401];
      ᐃΔ[395] = jd(1, [{
        f: xm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[396] = ᐃΔ[395];
      ᐃΔ[398] = jd(1, [{
        f: rm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[399] = ᐃΔ[398];
      ᐃΔ[404] = jd(1, [{
        f: km,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[405] = ᐃΔ[404];
      ᐃΔ[472] = jd(1, [{
        f: um,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[473] = ᐃΔ[472];
      ᐃΔ[874] = jd(1, [{
        f: _m,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
      }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[876] = ᐃΔ[874];
      ᐃΔ[875] = ᐃΔ[874];
      ᐃΔ[477] = jd(1, [{
        f: Cm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[478] = ᐃΔ[477];
      ᐃΔ[709] = jd(1, [{
        f: lc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[711] = ᐃΔ[709];
      ᐃΔ[550] = jd(1, [{
        f: cc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[551] = ᐃΔ[550];
      ᐃΔ[480] = jd(1, [{
        f: Cm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[481] = ᐃΔ[480];
      ᐃΔ[483] = jd(1, [{
        f: Cm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[484] = ᐃΔ[483];
      ᐃΔ[486] = jd(1, [{
        f: Cm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[487] = ᐃΔ[486];
      ᐃΔ[489] = [];
      ᐃΔ[489][0] = ΔΔ.ⲆⲆΔⵠⲆΔΔ;
      ᐃΔ[489][1] = ΔΔ.ΔᐃⵠⵠⵠΔⵠ;
      ᐃΔ[489][2] = ΔΔ.ⲆⵠⲆᐃⵠⵠⵠ;
      ᐃΔ[491] = ᐃΔ[489];
      ᐃΔ[490] = ᐃΔ[489];
      ᐃΔ[1195] = [];
      ᐃΔ[1195][0] = ΔΔ.ⲆᐃᐃⲆΔᐃΔ;
      ᐃΔ[1195][1] = ΔΔ.ΔⲆΔΔⵠΔⲆ;
      ᐃΔ[1195][2] = ΔΔ.ⵠⲆᐃᐃⵠⲆⲆ;
      ᐃΔ[1197] = ᐃΔ[1195];
      ᐃΔ[1196] = ᐃΔ[1195];
      ᐃΔ[1199] = [];
      ᐃΔ[1199][0] = ΔΔ.ⲆΔΔΔⵠΔΔ;
      ᐃΔ[1199][1] = ΔΔ.ⵠⵠᐃΔᐃⲆⵠ;
      ᐃΔ[1199][2] = ΔΔ.ⲆⵠⲆᐃᐃⵠΔ;
      ᐃΔ[1201] = ᐃΔ[1199];
      ᐃΔ[1200] = ᐃΔ[1199];
      ᐃΔ[1203] = [];
      ᐃΔ[1203][0] = ΔΔ.ⲆΔⲆΔⲆⲆⲆ;
      ᐃΔ[1203][1] = ΔΔ.ΔⵠⲆᐃΔᐃᐃ;
      ᐃΔ[1203][2] = ΔΔ.ⲆᐃΔⵠⲆⵠⵠ;
      ᐃΔ[1205] = ᐃΔ[1203];
      ᐃΔ[1204] = ᐃΔ[1203];
      ᐃΔ[1207] = [];
      ᐃΔ[1207][0] = ΔΔ.ᐃⲆᐃⵠⲆᐃⵠ;
      ᐃΔ[1207][1] = ΔΔ.ⲆᐃΔⲆΔᐃΔ;
      ᐃΔ[1207][2] = ΔΔ.ΔΔΔΔᐃᐃΔ;
      ᐃΔ[1209] = ᐃΔ[1207];
      ᐃΔ[1208] = ᐃΔ[1207];
      ᐃΔ[1211] = [];
      ᐃΔ[1211][0] = ΔΔ.ⵠᐃᐃⲆᐃΔᐃ;
      ᐃΔ[1211][1] = ΔΔ.ᐃⵠⲆⵠⲆⵠⵠ;
      ᐃΔ[1211][2] = ΔΔ.ⲆΔΔᐃΔⵠΔ;
      ᐃΔ[1213] = ᐃΔ[1211];
      ᐃΔ[1212] = ᐃΔ[1211];
      ᐃΔ[1215] = [];
      ᐃΔ[1215][0] = ΔΔ.ΔⲆⵠⵠΔᐃΔ;
      ᐃΔ[1215][1] = ΔΔ.ⵠⵠⲆⲆΔᐃⲆ;
      ᐃΔ[1215][2] = ΔΔ.ⵠᐃΔⵠⵠⵠᐃ;
      ᐃΔ[1217] = ᐃΔ[1215];
      ᐃΔ[1216] = ᐃΔ[1215];
      ᐃΔ[518] = jd(1, [{
        f: uc,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
      }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[519] = ᐃΔ[518];
      ᐃΔ[532] = jd(1, [{
        f: xc,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 5,
        c: ["#141414", "#c4a23a", "#816511"]
      }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[533] = ᐃΔ[532];
      ᐃΔ[521] = jd(1, [{
        f: Hm,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ᐃΔ[523] = jd(1, [{
        f: Hm,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ᐃΔ[529] = jd(1, [{
        f: ec,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba"]
      }, {
        f: Ym,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
      }, {
        f: Um,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0"]
      }, {
        f: tp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[530] = ᐃΔ[529];
      ᐃΔ[553] = jd(1, [{
        f: jm,
        x: 45,
        y: 70,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[555] = ᐃΔ[553];
      ᐃΔ[541] = jd(1, [{
        f: Xc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[542] = ᐃΔ[541];
      ᐃΔ[779] = jd(1, [{
        f: Zm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[780] = ᐃΔ[779];
      ᐃΔ[767] = jd(1, [{
        f: nc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041"]
      }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[768] = ᐃΔ[767];
      ᐃΔ[776] = jd(1, [{
        f: hp,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[777] = ᐃΔ[776];
      ᐃΔ[771] = jd(1, [{
        f: hp,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[772] = ᐃΔ[771];
      ᐃΔ[756] = jd(1, [{
        f: Wc,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[758] = ᐃΔ[756];
      ᐃΔ[760] = jd(1, [{
        f: Wc,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[762] = ᐃΔ[760];
      ᐃΔ[764] = jd(1, [{
        f: Wc,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[770] = ᐃΔ[764];
      ᐃΔ[910] = jd(1, [{
        f: sm,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[912] = ᐃΔ[910];
      ᐃΔ[911] = ᐃΔ[910];
      ᐃΔ[732] = jd(1, [{
        f: Dm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[734] = ᐃΔ[732];
      ᐃΔ[563] = jd(1, [{
        f: Zc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
      }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[564] = ᐃΔ[563];
      ᐃΔ[751] = jd(1, [{
        f: dc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[252] = jd(1, [{
        f: Bc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[753] = jd(1, [{
        f: dc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[253] = jd(1, [{
        f: Bc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[176] = jd(1, [{
        f: vc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[177] = jd(1, [{
        f: vc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[175] = jd(1, [{
        f: vc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[616] = jd(1, [{
        f: Pc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[618] = ᐃΔ[616];
      ᐃΔ[699] = jd(1, [{
        f: Pc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[700] = ᐃΔ[699];
      ᐃΔ[702] = jd(1, [{
        f: Pc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[704] = ᐃΔ[702];
      ᐃΔ[705] = jd(1, [{
        f: Pc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[706] = ᐃΔ[705];
      ᐃΔ[420] = jd(1, [{
        f: zc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[421] = ᐃΔ[420];
      ᐃΔ[826] = jd(1, [{
        f: hc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[827] = ᐃΔ[826];
      ᐃΔ[429] = jd(1, [{
        f: Fm,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[430] = ᐃΔ[429];
      ᐃΔ[432] = jd(1, [{
        f: yc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[433] = ᐃΔ[432];
      ᐃΔ[435] = jd(1, [{
        f: _c,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[436] = ᐃΔ[435];
      ᐃΔ[438] = jd(1, [{
        f: qm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[439] = ᐃΔ[438];
      ᐃΔ[441] = jd(1, [{
        f: ap,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[442] = ᐃΔ[441];
      ᐃΔ[418] = jd(1, [{
        f: mc,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#c27add", "#cd98e5"]
      }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[609] = jd(1, [{
        f: Tc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#D7C393", "#a48c6c"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[142] = jd(1, [{
        f: sc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#93CBCE", "#E9F6F6"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[140] = jd(1, [{
        f: Tc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#866432", "#6b4f25"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[180] = jd(1, [{
        f: kc,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[181] = jd(1, [{
        f: bc,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[784] = ᐃΔ[180];
      ᐃΔ[785] = ᐃΔ[181];
      ᐃΔ[789] = jd(1, [{
        f: Hc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
      }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[791] = ᐃΔ[789];
      ᐃΔ[613] = jd(1, [{
        f: Gm,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[612] = jd(1, [{
        f: qc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[715] = ᐃΔ[613];
      ᐃΔ[611] = ᐃΔ[612];
      ᐃΔ[634] = jd(1, [{
        f: cu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[635] = ᐃΔ[634];
      ᐃΔ[200] = jd(1, [{
        f: bu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[866] = jd(1, [{
        f: iu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[143] = jd(1, [{
        f: Ec,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[690] = ᐃΔ[143];
      ᐃΔ[662] = jd(1, [{
        f: qu,
        x: -3,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[664] = jd(1, [{
        f: uu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1d051e", "#42261A", "#281818"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[666] = ᐃΔ[664];
      ᐃΔ[649] = jd(1, [{
        f: ku,
        x: -3,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[650] = ᐃΔ[649];
      ᐃΔ[674] = jd(1, [{
        f: Qd,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
      }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[646] = jd(1, [{
        f: ru,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃΔ[647] = ᐃΔ[646];
      ᐃΔ[685] = jd(1, [{
        f: Oc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[684] = ᐃΔ[685];
      ᐃΔ[870] = jd(1, [{
        f: id,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
      }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[871] = ᐃΔ[870];
      ᐃΔ[605] = jd(1, [{
        f: Ac,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
      }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[604] = ᐃΔ[605];
      ᐃΔ[842] = jd(1, [{
        f: od,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[843] = ᐃΔ[842];
      ᐃΔ[652] = jd(1, [{
        f: Xm,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
      ᐃΔ[654] = ᐃΔ[652];
      ᐃΔ[626] = jd(1, [{
        f: Xm,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
      }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[627] = ᐃΔ[626];
      ᐃΔ[629] = jd(1, [{
        f: op,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃΔ[196] = jd(1, [{
        f: St,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[898] = ᐃΔ[196];
      ᐃΔ[659] = jd(1, [{
        f: mu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[660] = ᐃΔ[659];
      ᐃΔ[145] = jd(1, [{
        f: Sd,
        x: -2,
        y: -8,
        a: 1,
        r: 0,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃΔ[730] = ᐃΔ[145];
      ᐃΔ[566] = [];
      ᐃΔ[566][0] = ΔΔ.ᐃⲆᐃⵠⵠΔⲆ;
      ᐃΔ[566][1] = ΔΔ.ᐃⲆΔⵠᐃΔⲆ;
      ᐃΔ[566][2] = ΔΔ.ᐃⲆⵠᐃΔⲆᐃ;
      ᐃΔ[567] = ᐃΔ[566];
      ᐃΔ[568] = ᐃΔ[566];
      ᐃΔ[877] = [];
      ᐃΔ[877][0] = ΔΔ.ΔᐃⵠΔᐃΔⵠ;
      ᐃΔ[877][1] = ΔΔ.ⲆᐃⵠᐃᐃΔᐃ;
      ᐃΔ[877][2] = ΔΔ.ΔᐃⲆᐃᐃΔΔ;
      ᐃΔ[879] = ᐃΔ[877];
      ᐃΔ[878] = ᐃΔ[877];
      ᐃΔ[933] = ᐃΔ[932];
      ᐃΔ[934] = ᐃΔ[932];
      ᐃΔ[932] = [];
      ᐃΔ[932][0] = ΔΔ.Ⲇᐃᐃⵠⵠⵠᐃ;
      ᐃΔ[932][1] = ΔΔ.ⲆᐃΔᐃⵠⵠΔ;
      ᐃΔ[932][2] = ΔΔ.ⵠⲆΔⵠᐃᐃⲆ;
      ᐃΔ[933] = ᐃΔ[932];
      ᐃΔ[934] = ᐃΔ[932];
      ᐃΔ[943] = [];
      ᐃΔ[943][0] = ΔΔ.ⲆᐃⵠⲆΔᐃⲆ;
      ᐃΔ[943][1] = ΔΔ.ⵠⲆΔⲆⲆᐃΔ;
      ᐃΔ[943][2] = ΔΔ.ⵠΔⵠᐃᐃᐃΔ;
      ᐃΔ[944] = ᐃΔ[943];
      ᐃΔ[945] = ᐃΔ[943];
      ᐃΔ[921] = [];
      ᐃΔ[921][0] = ΔΔ.ⵠᐃⲆⲆⵠⵠⲆ;
      ᐃΔ[921][1] = ΔΔ.ⲆⵠⲆⵠΔΔΔ;
      ᐃΔ[921][2] = ΔΔ.ΔᐃⲆᐃⲆⵠᐃ;
      ᐃΔ[922] = ᐃΔ[921];
      ᐃΔ[923] = ᐃΔ[921];
      ᐃΔ[925] = [];
      ᐃΔ[925][0] = ΔΔ.ΔᐃᐃᐃⲆⵠΔ;
      ᐃΔ[925][1] = ΔΔ.ᐃΔⵠⵠᐃΔⵠ;
      ᐃΔ[925][2] = ΔΔ.ᐃⲆⲆⲆⵠⵠᐃ;
      ᐃΔ[926] = ᐃΔ[925];
      ᐃΔ[927] = ᐃΔ[925];
      ᐃΔ[929] = [];
      ᐃΔ[929][0] = ΔΔ.ⵠⲆᐃΔⲆⵠⵠ;
      ᐃΔ[929][1] = ΔΔ.ⵠⵠᐃⲆᐃⲆⲆ;
      ᐃΔ[929][2] = ΔΔ.ΔΔⵠⵠⵠΔⲆ;
      ᐃΔ[930] = ᐃΔ[929];
      ᐃΔ[931] = ᐃΔ[929];
      ᐃΔ[946] = [];
      ᐃΔ[946][0] = ΔΔ.ⲆΔⲆΔⲆΔⲆ;
      ᐃΔ[946][1] = ΔΔ.ᐃΔⲆΔᐃᐃⲆ;
      ᐃΔ[946][2] = ΔΔ.ᐃᐃⲆⲆⲆᐃⲆ;
      ᐃΔ[947] = ᐃΔ[946];
      ᐃΔ[948] = ᐃΔ[946];
      ᐃΔ[735] = [];
      ᐃΔ[735][0] = ΔΔ.ΔᐃⵠᐃΔΔⵠ;
      ᐃΔ[735][1] = ΔΔ.ᐃⲆⲆᐃⲆΔⲆ;
      ᐃΔ[735][2] = ΔΔ.ⲆΔⵠⲆⲆⵠⲆ;
      ᐃΔ[737] = ᐃΔ[735];
      ᐃΔ[736] = ᐃΔ[735];
      ᐃΔ[1164] = [];
      ᐃΔ[1164][0] = ΔΔ.ᐃΔᐃⵠⲆᐃᐃ;
      ᐃΔ[1164][1] = ΔΔ.ᐃⵠΔΔⵠⲆⲆ;
      ᐃΔ[1164][2] = ΔΔ.ⲆᐃⵠⵠᐃⲆᐃ;
      ᐃΔ[ts.ⵠⲆΔΔⲆᐃⲆⲆᐃ] = ᐃΔ[1164];
      ᐃΔ[1165] = ᐃΔ[1164];
      ᐃΔ[738] = [];
      ᐃΔ[738][0] = ΔΔ.ⵠᐃᐃΔⲆΔΔ;
      ᐃΔ[738][1] = ΔΔ.ⵠΔᐃᐃΔΔΔ;
      ᐃΔ[738][2] = ΔΔ.ᐃΔᐃᐃⵠⵠⲆ;
      ᐃΔ[740] = ᐃΔ[738];
      ᐃΔ[739] = ᐃΔ[738];
      ᐃΔ[741] = [];
      ᐃΔ[741][0] = ΔΔ.ⲆᐃᐃⵠΔᐃΔ;
      ᐃΔ[741][1] = ΔΔ.ⵠΔⵠᐃΔⲆⲆ;
      ᐃΔ[741][2] = ΔΔ.ΔⵠⵠΔΔΔᐃ;
      ᐃΔ[743] = ᐃΔ[741];
      ᐃΔ[742] = ᐃΔ[741];
      ᐃΔ[938] = [];
      ᐃΔ[938][0] = ΔΔ.ΔᐃⵠᐃⲆⲆⵠ;
      ᐃΔ[938][1] = ΔΔ.ⲆⵠΔᐃᐃΔⲆ;
      ᐃΔ[938][2] = ΔΔ.ᐃⵠⲆⲆᐃⲆᐃ;
      ᐃΔ[939] = ᐃΔ[938];
      ᐃΔ[936] = [];
      ᐃΔ[936][0] = ΔΔ.ⵠᐃⵠⲆΔᐃᐃ;
      ᐃΔ[936][1] = ΔΔ.ΔⲆᐃⵠᐃⲆᐃ;
      ᐃΔ[936][2] = ΔΔ.ⲆⲆⲆⵠⲆⵠᐃ;
      ᐃΔ[937] = ᐃΔ[936];
      ᐃΔ[617] = ᐃΔ[616];
      ᐃΔ[701] = ᐃΔ[699];
      ᐃΔ[703] = ᐃΔ[702];
      ᐃΔ[707] = ᐃΔ[705];
      ᐃΔ[348] = ᐃΔ[311];
      ᐃΔ[633] = ᐃΔ[631];
      ᐃΔ[645] = ᐃΔ[644];
      ᐃΔ[640] = ᐃΔ[639];
      ᐃΔ[273] = ᐃΔ[309];
      ᐃΔ[590] = ᐃΔ[252];
      ᐃΔ[752] = ᐃΔ[751];
      ᐃΔ[591] = ᐃΔ[253];
      ᐃΔ[754] = ᐃΔ[753];
      ᐃΔ[276] = ᐃΔ[328];
      ᐃΔ[863] = ᐃΔ[865];
      ᐃΔ[862] = ᐃΔ[860];
      ᐃΔ[831] = ᐃΔ[829];
      ᐃΔ[340] = ᐃΔ[261];
      ᐃΔ[596] = ᐃΔ[594];
      ᐃΔ[345] = ᐃΔ[292];
      ᐃΔ[346] = ᐃΔ[293];
      ᐃΔ[457] = ᐃΔ[455];
      ᐃΔ[274] = ᐃΔ[313];
      ᐃΔ[341] = ᐃΔ[312];
      ᐃΔ[272] = ᐃΔ[258];
      ᐃΔ[344] = ᐃΔ[296];
      ᐃΔ[459] = ᐃΔ[458];
      ᐃΔ[342] = ᐃΔ[315];
      ᐃΔ[270] = ᐃΔ[297];
      ᐃΔ[271] = ᐃΔ[298];
      ᐃΔ[343] = ᐃΔ[316];
      ᐃΔ[269] = ᐃΔ[277];
      ᐃΔ[358] = ᐃΔ[310];
      ᐃΔ[354] = ᐃΔ[329];
      ᐃΔ[356] = ᐃΔ[331];
      ᐃΔ[355] = ᐃΔ[330];
      ᐃΔ[494] = ᐃΔ[492];
      ᐃΔ[349] = ᐃΔ[317];
      ᐃΔ[350] = ᐃΔ[319];
      ᐃΔ[275] = ᐃΔ[300];
      ᐃΔ[351] = ᐃΔ[323];
      ᐃΔ[353] = ᐃΔ[305];
      ᐃΔ[514] = ᐃΔ[513];
      ᐃΔ[352] = ᐃΔ[303];
      ᐃΔ[520] = ᐃΔ[518];
      ᐃΔ[534] = ᐃΔ[532];
      ᐃΔ[531] = ᐃΔ[529];
      ᐃΔ[522] = ᐃΔ[521];
      ᐃΔ[524] = ᐃΔ[523];
      ᐃΔ[565] = ᐃΔ[563];
      ᐃΔ[554] = ᐃΔ[553];
      ᐃΔ[357] = ᐃΔ[335];
      ᐃΔ[359] = ᐃΔ[337];
      ᐃΔ[339] = Sq(function (a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 129;
        e.save();
        e.translate(a * 90, a * 90);
        Wb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
        e.restore();
        Lb(e, c[0], c[1], 4);
        e.save();
        Wb(e, a * 30, a * 115, a * 60, a * 5, a * 15);
        e.restore();
        Lb(e, c[2], c[3], 4);
        e.save();
        Wb(e, a * 50, a * 117, a * 20, a * 10, a * 15);
        e.restore();
        Lb(e, c[2]);
        return d;
      }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
      ᐃΔ[366] = jd(0.5, [{
        f: bm,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#ffffff"]
      }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
      ᐃΔ[382] = ᐃΔ[361];
      ᐃΔ[383] = ᐃΔ[362];
      ᐃΔ[384] = ᐃΔ[364];
      ᐃΔ[497] = ᐃΔ[495];
      ᐃΔ[385] = ᐃΔ[392];
      ᐃΔ[774] = ᐃΔ[178];
      ᐃΔ[775] = ᐃΔ[179];
      ᐃΔ[386] = ᐃΔ[368];
      ᐃΔ[625] = ᐃΔ[624];
      ᐃΔ[394] = ᐃΔ[393];
      ᐃΔ[1163] = ᐃΔ[1162];
      ᐃΔ[506] = ᐃΔ[505];
      ᐃΔ[387] = ᐃΔ[369];
      ᐃΔ[504] = ᐃΔ[502];
      ᐃΔ[388] = ᐃΔ[372];
      ᐃΔ[389] = ᐃΔ[375];
      ᐃΔ[390] = ᐃΔ[378];
      ᐃΔ[501] = ᐃΔ[499];
      ᐃΔ[391] = ᐃΔ[381];
      ᐃΔ[403] = ᐃΔ[401];
      ᐃΔ[397] = ᐃΔ[395];
      ᐃΔ[400] = ᐃΔ[398];
      ᐃΔ[406] = ᐃΔ[404];
      ᐃΔ[474] = ᐃΔ[472];
      ᐃΔ[875] = ᐃΔ[874];
      ᐃΔ[552] = ᐃΔ[550];
      ᐃΔ[710] = ᐃΔ[709];
      ᐃΔ[479] = ᐃΔ[477];
      ᐃΔ[482] = ᐃΔ[480];
      ᐃΔ[485] = ᐃΔ[483];
      ᐃΔ[488] = ᐃΔ[486];
      ᐃΔ[410] = ᐃΔ[408];
      ᐃΔ[719] = ᐃΔ[717];
      ᐃΔ[422] = ᐃΔ[420];
      ᐃΔ[431] = ᐃΔ[429];
      ᐃΔ[434] = ᐃΔ[432];
      ᐃΔ[437] = ᐃΔ[435];
      ᐃΔ[543] = ᐃΔ[541];
      ᐃΔ[733] = ᐃΔ[732];
      ᐃΔ[440] = ᐃΔ[438];
      ᐃΔ[443] = ᐃΔ[441];
      ᐃΔ[446] = ᐃΔ[418];
      ᐃΔ[606] = ᐃΔ[605];
      ᐃΔ[844] = ᐃΔ[842];
      ᐃΔ[683] = ᐃΔ[685];
      ᐃΔ[610] = ᐃΔ[609];
      ᐃΔ[689] = ᐃΔ[143];
      ᐃΔ[686] = ᐃΔ[142];
      ᐃΔ[682] = ᐃΔ[140];
      ᐃΔ[615] = ᐃΔ[613];
      ᐃΔ[614] = ᐃΔ[612];
      ᐃΔ[628] = ᐃΔ[626];
      ᐃΔ[630] = ᐃΔ[629];
      ᐃΔ[636] = ᐃΔ[634];
      ᐃΔ[868] = ᐃΔ[200];
      ᐃΔ[867] = ᐃΔ[866];
      ᐃΔ[648] = ᐃΔ[646];
      ᐃΔ[651] = ᐃΔ[649];
      ᐃΔ[653] = ᐃΔ[652];
      ᐃΔ[661] = ᐃΔ[659];
      ᐃΔ[898] = ᐃΔ[196];
      ᐃΔ[663] = ᐃΔ[662];
      ᐃΔ[665] = ᐃΔ[664];
      ᐃΔ[675] = ᐃΔ[674];
      ᐃΔ[731] = ᐃΔ[145];
      ᐃΔ[757] = ᐃΔ[756];
      ᐃΔ[759] = ᐃΔ[176];
      ᐃΔ[761] = ᐃΔ[760];
      ᐃΔ[763] = ᐃΔ[177];
      ᐃΔ[765] = ᐃΔ[764];
      ᐃΔ[766] = ᐃΔ[175];
      ᐃΔ[769] = ᐃΔ[767];
      ᐃΔ[773] = ᐃΔ[771];
      ᐃΔ[778] = ᐃΔ[776];
      ᐃΔ[781] = ᐃΔ[779];
      ᐃΔ[787] = ᐃΔ[181];
      ᐃΔ[786] = ᐃΔ[180];
      ᐃΔ[790] = ᐃΔ[789];
      ᐃΔ[801] = ᐃΔ[800];
      ᐃΔ[810] = ᐃΔ[808];
      ᐃΔ[836] = ᐃΔ[834];
      ᐃΔ[847] = ᐃΔ[845];
      ᐃΔ[828] = ᐃΔ[826];
    })();
    ᐃΔ[540] = [];
    ᐃΔ[540][ts.ⵠⵠⵠ] = [];
    ᐃΔ[540][ts.ⵠΔⵠ] = [];
    for (var a = 0; ts.ⲆΔⵠᐃⵠᐃⲆ > a; a++) {
      ᐃΔ[540][ts.ⵠⵠⵠ].push(Sq(ou(1, 4 + a, "#59B8CE")));
      ᐃΔ[540][ts.ⵠΔⵠ].push(Sq(ou(1, 4 + a, "#90DDD9")));
    }
    ᐃΔ[470] = [];
    ᐃΔ[470][ts.ⵠⵠⵠ] = [];
    ᐃΔ[470][ts.ⵠΔⵠ] = [];
    for (a = 0; a < ts.ⲆᐃΔⲆⲆΔᐃ; a++) {
      ᐃΔ[470][ts.ⵠⵠⵠ].push(Sq(ou(1, 4 + a, "#fff")));
      ᐃΔ[470][ts.ⵠΔⵠ].push(Sq(ou(1, 4 + a, "#fff")));
    }
    ᐃΔ[471] = [];
    ᐃΔ[471][ts.ⵠⵠⵠ] = [];
    ᐃΔ[471][ts.ⵠΔⵠ] = [];
    for (a = 0; a < ts.ⲆᐃΔⲆⲆΔᐃ; a++) {
      ᐃΔ[471][ts.ⵠⵠⵠ].push(Sq(ou(1, 6 + a, "#DDCD8A")));
      ᐃΔ[471][ts.ⵠΔⵠ].push(Sq(ou(1, 6 + a, "#155E57")));
    }
    ᐃΔ[942] = [];
    ᐃΔ[942][ts.ⵠⵠⵠ] = [];
    ᐃΔ[942][ts.ⵠΔⵠ] = [];
    for (a = 0; a < ts.ᐃⲆⲆᐃΔΔᐃ; a++) {
      ᐃΔ[942][ts.ⵠⵠⵠ].push(Sq(ou(1, 4 + a, "#353326")));
      ᐃΔ[942][ts.ⵠΔⵠ].push(Sq(ou(1, 4 + a, "#1D2526")));
    }
    ᐃΔ[201] = [];
    ᐃΔ[201][ts.ⵠⵠⵠ] = Sq(ad(1.5, 0, ["#ee71a9"]));
    ᐃΔ[201][ts.ⵠΔⵠ] = Sq(ad(1.5, 0, ["#ee71a9"]));
    ᐃΔ[872] = [ᐃΔ[201]];
    ᐃΔ[872][1] = [];
    ᐃΔ[872][2] = [];
    ᐃΔ[872][3] = [];
    ᐃΔ[872][4] = [];
    ᐃΔ[872][1][ts.ⵠⵠⵠ] = Sq(ad(1.5, 0, ["#e2d63b"]));
    ᐃΔ[872][1][ts.ⵠΔⵠ] = Sq(ad(1.5, 0, ["#e2d63b"]));
    ᐃΔ[872][2][ts.ⵠⵠⵠ] = Sq(ad(1.5, 0, ["#309cbd"]));
    ᐃΔ[872][2][ts.ⵠΔⵠ] = Sq(ad(1.5, 0, ["#309cbd"]));
    ᐃΔ[872][3][ts.ⵠⵠⵠ] = Sq(ad(1.5, 0, ["#cd232d"]));
    ᐃΔ[872][3][ts.ⵠΔⵠ] = Sq(ad(1.5, 0, ["#cd232d"]));
    ᐃΔ[872][4][ts.ⵠⵠⵠ] = Sq(ad(1.5, 0, ["#42b672"]));
    ᐃΔ[872][4][ts.ⵠΔⵠ] = Sq(ad(1.5, 0, ["#42b672"]));
    if (ΔΔⲆ.ΔⵠΔⲆⲆⲆⵠ("cti", Ph.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Sq = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ᐃΔ[797] = Sq(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ᐃΔ[108] = [];
    ᐃΔ[108][ts.ⵠⵠⵠ] = [];
    ᐃΔ[108][ts.ⵠΔⵠ] = [];
    ᐃΔ[108][ts.ⵠⵠⵠ].push(Sq(du(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][ts.ⵠⵠⵠ].push(Sq(du(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][ts.ⵠⵠⵠ].push(Sq(du(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][ts.ⵠΔⵠ].push(Sq(du(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[108][ts.ⵠΔⵠ].push(Sq(du(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[108][ts.ⵠΔⵠ].push(Sq(du(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[111] = [];
    ᐃΔ[111][ts.ⵠⵠⵠ] = [];
    ᐃΔ[111][ts.ⵠΔⵠ] = [];
    ᐃΔ[111][ts.ⵠⵠⵠ].push(Sq(su(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][ts.ⵠⵠⵠ].push(Sq(su(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][ts.ⵠⵠⵠ].push(Sq(su(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][ts.ⵠΔⵠ].push(Sq(su(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[111][ts.ⵠΔⵠ].push(Sq(su(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[111][ts.ⵠΔⵠ].push(Sq(su(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[112] = [];
    ᐃΔ[112][ts.ⵠⵠⵠ] = [];
    ᐃΔ[112][ts.ⵠΔⵠ] = [];
    ᐃΔ[112][ts.ⵠⵠⵠ].push(Sq(nu(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][ts.ⵠⵠⵠ].push(Sq(nu(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][ts.ⵠⵠⵠ].push(Sq(nu(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][ts.ⵠΔⵠ].push(Sq(nu(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[112][ts.ⵠΔⵠ].push(Sq(nu(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[112][ts.ⵠΔⵠ].push(Sq(nu(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[239] = [];
    ᐃΔ[239][ts.ⵠⵠⵠ] = ΔΔ.ΔΔΔⲆΔΔΔ;
    ᐃΔ[239][ts.ⵠΔⵠ] = ΔΔ.ⲆᐃⵠΔⵠⲆᐃ;
    ᐃΔ[286] = [];
    ᐃΔ[286][ts.ⵠⵠⵠ] = Sq(Ht(0.6, ["#0d1b1c"]));
    ᐃΔ[286][ts.ⵠΔⵠ] = Sq(Ht(0.6, ["#030d14"]));
    ᐃΔ[793] = [];
    ᐃΔ[793][ts.ⵠⵠⵠ] = Sq(It(0.6, ["#2a2938", "#242330"]));
    ᐃΔ[793][ts.ⵠΔⵠ] = Sq(It(0.6, ["#1b1e30", "#161921"]));
    ᐃΔ[820] = [];
    ᐃΔ[820][ts.ⵠⵠⵠ] = Sq(hd(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ᐃΔ[820][ts.ⵠΔⵠ] = Sq(hd(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ᐃΔ[821] = [];
    ᐃΔ[821][ts.ⵠⵠⵠ] = Sq(sd(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ᐃΔ[821][ts.ⵠΔⵠ] = Sq(sd(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ᐃΔ[822] = [];
    ᐃΔ[822][ts.ⵠⵠⵠ] = Sq($d(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ᐃΔ[822][ts.ⵠΔⵠ] = Sq($d(0.4, ["#030d14", "#11635e", "#02373e"]));
    ᐃΔ[823] = Sq(ld(0.6, ["#BB0000"]));
    ᐃΔ[824] = Sq(ld(0.6, ["#DBE71C"]));
    ᐃΔ[825] = Sq(ld(0.6, ["#00BB00"]));
    ᐃΔ[109] = [];
    ᐃΔ[109][ts.ⵠⵠⵠ] = [];
    ᐃΔ[109][ts.ⵠΔⵠ] = [];
    ᐃΔ[109][ts.ⵠⵠⵠ].push(Tt(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], Pg, 0));
    ᐃΔ[109][ts.ⵠⵠⵠ].push(Tt(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], kg, 0));
    ᐃΔ[109][ts.ⵠⵠⵠ].push(Tt(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], false, 0));
    ᐃΔ[109][ts.ⵠⵠⵠ].push(Tt(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
    ᐃΔ[109][ts.ⵠⵠⵠ].push(Tt(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], wr, 0));
    ᐃΔ[109][ts.ⵠⵠⵠ].push(Tt(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
    ᐃΔ[109][ts.ⵠΔⵠ].push(Tt(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], false, 0));
    ᐃΔ[109][ts.ⵠΔⵠ].push(Tt(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
    ᐃΔ[109][ts.ⵠΔⵠ].push(Tt(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], _h, 0));
    ᐃΔ[109][ts.ⵠΔⵠ].push(Tt(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], Ho, 0));
    ᐃΔ[109][ts.ⵠΔⵠ].push(Tt(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
    ᐃΔ[109][ts.ⵠΔⵠ].push(Tt(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], Bh, 0));
    ᐃΔ[307] = [];
    ᐃΔ[307][ts.ⵠⵠⵠ] = [];
    ᐃΔ[307][ts.ⵠΔⵠ] = [];
    ᐃΔ[307][ts.ⵠⵠⵠ].push(Sq(Xt(Wt(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ᐃΔ[109][ts.ⵠⵠⵠ][0])));
    ᐃΔ[307][ts.ⵠⵠⵠ].push(Sq(Xt(Wt(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), ᐃΔ[109][ts.ⵠⵠⵠ][1])));
    ᐃΔ[307][ts.ⵠΔⵠ].push(Sq(Xt(Wt(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], wr), ᐃΔ[109][ts.ⵠΔⵠ][0])));
    ᐃΔ[307][ts.ⵠΔⵠ].push(Sq(Xt(Wt(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], kg), ᐃΔ[109][ts.ⵠΔⵠ][1])));
    ᐃΔ[307][ts.ⵠⵠⵠ].push(Sq(Xt(Wt(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], false), ᐃΔ[109][ts.ⵠⵠⵠ][2])));
    ᐃΔ[307][ts.ⵠⵠⵠ].push(Sq(Xt(Wt(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Qo), ᐃΔ[109][ts.ⵠⵠⵠ][2])));
    ᐃΔ[307][ts.ⵠΔⵠ].push(Sq(Xt(Wt(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), ᐃΔ[109][ts.ⵠΔⵠ][2])));
    ᐃΔ[307][ts.ⵠΔⵠ].push(Sq(Xt(Wt(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], Xa), ᐃΔ[109][ts.ⵠΔⵠ][3])));
    ᐃΔ[109][ts.ⵠⵠⵠ][5] = Sq(ᐃΔ[109][ts.ⵠⵠⵠ][5]);
    ᐃΔ[109][ts.ⵠⵠⵠ][4] = Sq(ᐃΔ[109][ts.ⵠⵠⵠ][4]);
    ᐃΔ[109][ts.ⵠⵠⵠ][3] = Sq(ᐃΔ[109][ts.ⵠⵠⵠ][3]);
    ᐃΔ[109][ts.ⵠⵠⵠ][2] = Sq(ᐃΔ[109][ts.ⵠⵠⵠ][2]);
    ᐃΔ[109][ts.ⵠⵠⵠ][1] = Sq(ᐃΔ[109][ts.ⵠⵠⵠ][1]);
    ᐃΔ[109][ts.ⵠⵠⵠ][0] = Sq(ᐃΔ[109][ts.ⵠⵠⵠ][0]);
    ᐃΔ[109][ts.ⵠΔⵠ][5] = Sq(ᐃΔ[109][ts.ⵠΔⵠ][5]);
    ᐃΔ[109][ts.ⵠΔⵠ][4] = Sq(ᐃΔ[109][ts.ⵠΔⵠ][4]);
    ᐃΔ[109][ts.ⵠΔⵠ][3] = Sq(ᐃΔ[109][ts.ⵠΔⵠ][3]);
    ᐃΔ[109][ts.ⵠΔⵠ][2] = Sq(ᐃΔ[109][ts.ⵠΔⵠ][2]);
    ᐃΔ[109][ts.ⵠΔⵠ][1] = Sq(ᐃΔ[109][ts.ⵠΔⵠ][1]);
    ᐃΔ[109][ts.ⵠΔⵠ][0] = Sq(ᐃΔ[109][ts.ⵠΔⵠ][0]);
    ᐃΔ[8] = [];
    ᐃΔ[8][ts.ⵠⵠⵠ] = Sq(Yb(4, Yt(0.75, Hh, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ᐃΔ[8][ts.ⵠΔⵠ] = Sq(Yb(4, Yt(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ᐃΔ[1] = [];
    ᐃΔ[1][ts.ⵠⵠⵠ] = Sq(Yb(4, Yt(0.75, I, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃΔ[1][ts.ⵠΔⵠ] = Sq(Yb(4, Yt(0.75, Ns, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ᐃΔ[3] = [];
    ᐃΔ[3][ts.ⵠⵠⵠ] = Sq(Yb(4, Yt(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃΔ[3][ts.ⵠΔⵠ] = Sq(Yb(4, Yt(0.75, rl, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ᐃΔ[4] = [];
    ᐃΔ[4][ts.ⵠⵠⵠ] = Sq(Yb(4, Yt(0.75, En, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃΔ[4][ts.ⵠΔⵠ] = Sq(Yb(4, Yt(0.75, Ns, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃΔ[31] = [];
    ᐃΔ[31][ts.ⵠⵠⵠ] = Sq(Yb(4, Yt(0.75, Hh, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃΔ[31][ts.ⵠΔⵠ] = Sq(Yb(4, Yt(0.75, pl, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃΔ[9] = [];
    ᐃΔ[9][ts.ⵠⵠⵠ] = Sq(Yb(3, Ut(0.17, Ns, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ᐃΔ[9][ts.ⵠΔⵠ] = Sq(Yb(3, Ut(0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ᐃΔ[199] = [];
    ᐃΔ[199][ts.ⵠⵠⵠ] = Sq(Yb(3, eu(0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ᐃΔ[199][ts.ⵠΔⵠ] = Sq(Yb(3, eu(0.42, Hh, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ᐃΔ[57] = [];
    ᐃΔ[57][ts.ⵠⵠⵠ] = Sq(Yb(3, Qt(0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ᐃΔ[57][ts.ⵠΔⵠ] = Sq(Yb(3, Qt(0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ᐃΔ[0] = [];
    ᐃΔ[0][ts.ⵠⵠⵠ] = Sq(Yb(3, Mt(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ᐃΔ[0][ts.ⵠΔⵠ] = Sq(Yb(3, Mt(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ᐃΔ[5] = [];
    ᐃΔ[5][ts.ⵠⵠⵠ] = Sq(Yb(3, Lt(0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ᐃΔ[5][ts.ⵠΔⵠ] = Sq(Yb(3, Lt(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ᐃΔ[6] = [];
    ᐃΔ[6][ts.ⵠⵠⵠ] = Sq(Yb(3, _t(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ᐃΔ[6][ts.ⵠΔⵠ] = Sq(Yb(3, _t(0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ᐃΔ[30] = [];
    ᐃΔ[30][ts.ⵠⵠⵠ] = Sq(Yb(3, hu(0.4, kg, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ᐃΔ[30][ts.ⵠΔⵠ] = Sq(Yb(3, hu(0.4, Ns, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ᐃΔ[285] = [];
    ᐃΔ[285][ts.ⵠⵠⵠ] = [];
    ᐃΔ[285][ts.ⵠΔⵠ] = [];
    ᐃΔ[285][ts.ⵠⵠⵠ].push(Sq(wu(0.9, 0, ["#0d4f35"], 0)));
    ᐃΔ[285][ts.ⵠⵠⵠ].push(Sq(wu(0.9, 0, ["#0d4f35"], 1)));
    ᐃΔ[285][ts.ⵠⵠⵠ].push(Sq(wu(0.9, 0, ["#0d4f35"], 2)));
    ᐃΔ[285][ts.ⵠΔⵠ].push(Sq(wu(0.9, 0, ["#053339"], 0)));
    ᐃΔ[285][ts.ⵠΔⵠ].push(Sq(wu(0.9, 0, ["#053339"], 1)));
    ᐃΔ[285][ts.ⵠΔⵠ].push(Sq(wu(0.9, 0, ["#053339"], 2)));
    ᐃΔ[285][ts.ⵠⵠⵠ].push(Sq(lu(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ᐃΔ[285][ts.ⵠⵠⵠ].push(Sq(lu(0.8, ["#292002", "#ba930e", "#6d5704"])));
    ᐃΔ[285][ts.ⵠΔⵠ].push(Sq(lu(0.9, ["#052919", "#0a4738", "#06321f"])));
    ᐃΔ[285][ts.ⵠΔⵠ].push(Sq(lu(0.8, ["#052918", "#08491c", "#063417"])));
    ᐃΔ[183] = [];
    ᐃΔ[183][ts.ⵠⵠⵠ] = Sq(Yb(Math.PI / 2, ym(0.25, Bh, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ᐃΔ[183][ts.ⵠΔⵠ] = Sq(Yb(Math.PI / 2, ym(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ᐃΔ[803] = [];
    ᐃΔ[803].push(Sq(hm(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ᐃΔ[803].push(Sq(hm(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ᐃΔ[803].push(Sq(hm(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ᐃΔ[802] = [];
    ᐃΔ[802][ts.ⵠⵠⵠ] = [];
    ᐃΔ[802][ts.ⵠΔⵠ] = [];
    ᐃΔ[802][ts.ⵠⵠⵠ].push(Sq(Yb(Math.PI / 2, nm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ᐃΔ[802][ts.ⵠΔⵠ].push(Sq(Yb(Math.PI / 2, nm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ᐃΔ[802][ts.ⵠⵠⵠ].push(Sq(Yb(Math.PI / 2, nm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ᐃΔ[802][ts.ⵠΔⵠ].push(Sq(Yb(Math.PI / 2, nm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    ᐃΔ[802][ts.ⵠⵠⵠ].push(Sq(Yb(Math.PI / 2, nm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ᐃΔ[802][ts.ⵠΔⵠ].push(Sq(Yb(Math.PI / 2, nm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    ᐃΔ[802][ts.ⵠⵠⵠ].push(Sq(Yb(Math.PI / 2, nm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ᐃΔ[802][ts.ⵠΔⵠ].push(Sq(Yb(Math.PI / 2, nm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ᐃΔ[110] = [];
    ᐃΔ[110][ts.ⵠⵠⵠ] = [Sq(pu(1.2, A, ["#0e3022", "#0b8052", "#077b49"]))];
    ᐃΔ[110][ts.ⵠΔⵠ] = [Sq(pu(1.2, To, ["#030d14", "#084442", "#0a4049"]))];
    ᐃΔ[623] = [];
    ᐃΔ[623][ts.ⵠⵠⵠ] = Sq(pu(0.8, Bg, ["#0e3022", "#68622D", "#665329"]));
    ᐃΔ[623][ts.ⵠΔⵠ] = Sq(pu(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ᐃΔ[189] = [];
    ᐃΔ[189][ts.ⵠⵠⵠ] = Sq($m(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ᐃΔ[189][ts.ⵠΔⵠ] = Sq($m(0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ᐃΔ[192] = [];
    ᐃΔ[192][ts.ⵠⵠⵠ] = Sq(ed(0.5, Xa, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ᐃΔ[192][ts.ⵠΔⵠ] = Sq(ed(0.5, Qo, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ᐃΔ[194] = [];
    ᐃΔ[194][ts.ⵠⵠⵠ] = Sq(Nm(0.5, $l, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ᐃΔ[194][ts.ⵠΔⵠ] = Sq(Nm(0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ᐃΔ[287] = [];
    ᐃΔ[287][ts.ⵠⵠⵠ] = Sq(pu(0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
    ᐃΔ[287][ts.ⵠΔⵠ] = Sq(pu(0.8, true, ["#030d14", "#084442", "#0a4049"]));
    ᐃΔ[813] = [];
    ᐃΔ[813][ts.ⵠⵠⵠ] = Sq($m(0.5, is, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ᐃΔ[813][ts.ⵠΔⵠ] = Sq($m(0.5, En, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ᐃΔ[839] = [];
    ᐃΔ[839][ts.ⵠⵠⵠ] = Sq(ed(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ᐃΔ[839][ts.ⵠΔⵠ] = Sq(ed(0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ᐃΔ[869] = [];
    ᐃΔ[869][ts.ⵠⵠⵠ] = Sq(Nm(0.5, ni, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ᐃΔ[869][ts.ⵠΔⵠ] = Sq(Nm(0.5, Jk, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ᐃΔ[854] = [];
    ᐃΔ[854][ts.ⵠⵠⵠ] = Sq(Mc(0.45, is, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ᐃΔ[854][ts.ⵠΔⵠ] = Sq(Mc(0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ᐃΔ[859] = Sq(Mc(0.65, A, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ᐃΔ[294] = [];
    ᐃΔ[294][ts.ⵠⵠⵠ] = Sq(vu(1.4, 0, ["#ac222a", "#e6636a"]));
    ᐃΔ[294][ts.ⵠΔⵠ] = Sq(vu(1.4, 0, ["#46195e", "#744188"]));
    ᐃΔ[288] = [];
    ᐃΔ[288][ts.ⵠⵠⵠ] = Sq(Yd(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ᐃΔ[288][ts.ⵠΔⵠ] = Sq(Yd(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ᐃΔ[118] = [];
    ᐃΔ[118][ts.ⵠⵠⵠ] = Sq(Ud(0.9, 0, ["#4d2d14", "#432516"]));
    ᐃΔ[118][ts.ⵠΔⵠ] = Sq(Ud(0.9, 0, ["#282404", "#0a0a01"]));
    ᐃΔ[113] = [];
    ᐃΔ[113][ts.ⵠⵠⵠ] = Sq(Rd(0.9, 0, ["#4d2d14", "#432516"]));
    ᐃΔ[113][ts.ⵠΔⵠ] = Sq(Rd(0.9, 0, ["#282404", "#0a0a01"]));
    ᐃΔ[289] = [];
    ᐃΔ[289][ts.ⵠⵠⵠ] = Sq(Wd(0.9, 0, ["#efd435"]));
    ᐃΔ[289][ts.ⵠΔⵠ] = Sq(Wd(0.9, 0, ["#fffabb"]));
    ᐃΔ[282] = [];
    ᐃΔ[282][ts.ⵠⵠⵠ] = Sq(Nd(0.9, 0, ["#efd435"]));
    ᐃΔ[282][ts.ⵠΔⵠ] = Sq(Nd(0.9, 0, ["#fffabb"]));
    ᐃΔ[816] = [];
    ᐃΔ[816][ts.ⵠⵠⵠ] = Sq(Wd(0.9, 0, ["#efd435"]));
    ᐃΔ[816][ts.ⵠΔⵠ] = Sq(Wd(0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ᐃΔ[817] = [];
    ᐃΔ[817][ts.ⵠⵠⵠ] = Sq(Nd(0.9, 0, ["#efd435"]));
    ᐃΔ[817][ts.ⵠΔⵠ] = Sq(Nd(0.9, 0, ["#ff5704"]));
    ᐃΔ[324] = Sq(pd(1, "#ffffff"));
    ᐃΔ[301] = Sq(pd(1.5, "#ffffff"));
    ᐃΔ[306] = Sq(gu(1, "Your score:", 15, "#FFF"));
    ᐃΔ[655] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      jb(d, a * 119.5, a * 140.125, a * 19);
      Lb(d, undefined, b[1], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      Lb(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      Lb(d, undefined, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      Lb(d, undefined, b[3], a * 10);
      jb(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      Lb(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      Lb(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      Lb(d, undefined, b[8], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      Wb(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      Lb(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      Wb(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      Lb(d, b[9]);
      return c;
    }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ᐃΔ[656] = ΔΔ.ΔΔᐃᐃⵠⵠᐃ;
    ᐃΔ[135] = [];
    ᐃΔ[135][ts.ⵠⵠⵠ] = Sq(qd(1.5, ni, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[135][ts.ⵠΔⵠ] = Sq(qd(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[641] = [];
    ᐃΔ[641][ts.ⵠⵠⵠ] = Sq(Ld(2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[641][ts.ⵠΔⵠ] = Sq(Ld(2, Ho, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[642] = [];
    ᐃΔ[642][ts.ⵠⵠⵠ] = Sq(Gd(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[642][ts.ⵠΔⵠ] = Sq(Gd(1.5, Bg, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[134] = [];
    ᐃΔ[134][ts.ⵠⵠⵠ] = Sq(Kd(2.2, 0, ["#A89F67", "#9E8456"]));
    ᐃΔ[134][ts.ⵠΔⵠ] = Sq(Kd(2.2, 0, ["#0B4049", "#08383D"]));
    ᐃΔ[638] = [];
    ᐃΔ[638][ts.ⵠⵠⵠ] = Sq(Kd(2.2, 0, ["#68622D", "#665329"]));
    ᐃΔ[638][ts.ⵠΔⵠ] = Sq(Kd(2.2, 0, ["#0F3A24", "#083326"]));
    ᐃΔ[321] = [];
    ᐃΔ[321][ts.ⵠⵠⵠ] = Sq(fu(0.8, 0, ["#A89F67", "#9E8456"]));
    ᐃΔ[321][ts.ⵠΔⵠ] = Sq(fu(0.8, 0, ["#15514F", "#0F3F3D"]));
    ᐃΔ[811] = [];
    ᐃΔ[811][ts.ⵠⵠⵠ] = Sq(fu(0.8, 0, ["#c67933", "#b17238"]));
    ᐃΔ[811][ts.ⵠΔⵠ] = Sq(fu(0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[984] = [];
    ᐃΔ[984][ts.ⵠⵠⵠ] = Sq(fu(0.8, 0, ["#3a8214", "#4a9c1e"]));
    ᐃΔ[984][ts.ⵠΔⵠ] = Sq(fu(0.8, 0, ["#032d29", "#044640"]));
    ᐃΔ[837] = [];
    ᐃΔ[837][ts.ⵠⵠⵠ] = Sq(fu(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ᐃΔ[837][ts.ⵠΔⵠ] = Sq(fu(0.8, 0, ["#1c6161", "#07413f"]));
    ᐃΔ[848] = [];
    ᐃΔ[848][ts.ⵠⵠⵠ] = Sq(fu(0.8, 0, ["#328a56", "#449573"]));
    ᐃΔ[848][ts.ⵠΔⵠ] = Sq(fu(0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[952] = [];
    ᐃΔ[952][ts.ⵠⵠⵠ] = Sq(fu(0.8, 0, ["#c98e2f", "#a36b11"]));
    ᐃΔ[952][ts.ⵠΔⵠ] = Sq(fu(0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[962] = [];
    ᐃΔ[962][ts.ⵠⵠⵠ] = Sq(fu(0.8, 0, ["#b22419", "#99110e"]));
    ᐃΔ[962][ts.ⵠΔⵠ] = Sq(fu(0.8, 0, ["#04323c", "#03222b"]));
    ᐃΔ[969] = [];
    ᐃΔ[969][ts.ⵠⵠⵠ] = Sq(fu(0.8, 0, ["#13a56d", "#098a58"]));
    ᐃΔ[969][ts.ⵠΔⵠ] = Sq(fu(0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[657] = jd(1, [{
      f: Kd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[723] = jd(1, [{
      f: Rd,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[724] = jd(1, [{
      f: Ec,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[334] = jd(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[115] = [];
    ᐃΔ[115][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#7d613e", "#9e7e5a"]));
    ᐃΔ[115][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#084442", "#125e5a"]));
    ᐃΔ[132] = [];
    ᐃΔ[132][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#9E8456", "#A89F67"]));
    ᐃΔ[132][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ᐃΔ[668] = [];
    ᐃΔ[668][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#665329", "#68622D"]));
    ᐃΔ[668][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#083326", "#0F3A24"]));
    ᐃΔ[188] = [];
    ᐃΔ[188][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#c67933", "#ec952d"]));
    ᐃΔ[188][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[210] = [];
    ᐃΔ[210][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#375809", "#4b770e"]));
    ᐃΔ[210][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#09542d", "#0d5d2f"]));
    ᐃΔ[985] = [];
    ᐃΔ[985][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#585809", "#72770e"]));
    ᐃΔ[985][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#295209", "#305d0d"]));
    ᐃΔ[191] = [];
    ᐃΔ[191][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#b9b094", "#e2d2c0"]));
    ᐃΔ[191][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#126366", "#0d484b"]));
    ᐃΔ[193] = [];
    ᐃΔ[193][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#3f8662", "#30915d"]));
    ᐃΔ[193][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[812] = [];
    ᐃΔ[812][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#c79153", "#dfa868"]));
    ᐃΔ[812][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#073927", "#075040"]));
    ᐃΔ[838] = [];
    ᐃΔ[838][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#768b5b", "#819984"]));
    ᐃΔ[838][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#0c4540", "#0e5153"]));
    ᐃΔ[849] = [];
    ᐃΔ[849][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#567465", "#627c6e"]));
    ᐃΔ[849][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#073927", "#075040"]));
    ᐃΔ[204] = [];
    ᐃΔ[204][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#996b3a", "#bf956b"]));
    ᐃΔ[204][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[953] = [];
    ᐃΔ[953][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#7a634a", "#a68f77"]));
    ᐃΔ[953][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#1e4d43", "#113c32"]));
    ᐃΔ[206] = [];
    ᐃΔ[206][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#99403c", "#bc796c"]));
    ᐃΔ[206][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#1e434d", "#11303c"]));
    ᐃΔ[963] = [];
    ᐃΔ[963][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#88504e", "#b3857c"]));
    ᐃΔ[963][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#253b41", "#162930"]));
    ᐃΔ[208] = [];
    ᐃΔ[208][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#0f8870", "#23af93"]));
    ᐃΔ[208][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#032829", "#083233"]));
    ᐃΔ[970] = [];
    ᐃΔ[970][ts.ⵠⵠⵠ] = Sq(ud(0.9, 0, ["#618a20", "#84a74e"]));
    ᐃΔ[970][ts.ⵠΔⵠ] = Sq(ud(0.9, 0, ["#1f4632", "#335d47"]));
    ᐃΔ[114] = [];
    ᐃΔ[114][ts.ⵠⵠⵠ] = Sq(zd(1.2, is, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ᐃΔ[114][ts.ⵠΔⵠ] = Sq(zd(1.2, Zq, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ᐃΔ[162] = [];
    ᐃΔ[162][ts.ⵠⵠⵠ] = Sq(zu(1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃΔ[162][ts.ⵠΔⵠ] = Sq(zu(1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[165] = [];
    ᐃΔ[165][ts.ⵠⵠⵠ] = Sq(Au(1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[165][ts.ⵠΔⵠ] = Sq(Au(1, Bh, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[122] = [];
    ᐃΔ[122][ts.ⵠⵠⵠ] = Sq(Cu(1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[122][ts.ⵠΔⵠ] = Sq(Cu(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[163] = [];
    ᐃΔ[163][ts.ⵠⵠⵠ] = Sq(Cu(1, En, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃΔ[163][ts.ⵠΔⵠ] = Sq(Cu(1, Bg, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃΔ[164] = [];
    ᐃΔ[164][ts.ⵠⵠⵠ] = Sq(Fu(1, Bh, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃΔ[164][ts.ⵠΔⵠ] = Sq(Fu(1, $l, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃΔ[160] = [];
    ᐃΔ[160][ts.ⵠⵠⵠ] = Sq(wm(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃΔ[160][ts.ⵠΔⵠ] = Sq(wm(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[169] = [];
    ᐃΔ[169][ts.ⵠⵠⵠ] = Sq(Im(0.8, To, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃΔ[169][ts.ⵠΔⵠ] = Sq(Im(0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃΔ[170] = [];
    ᐃΔ[170][ts.ⵠⵠⵠ] = Sq(om(0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[170][ts.ⵠΔⵠ] = Sq(om(0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[168] = [];
    ᐃΔ[168][ts.ⵠⵠⵠ] = Sq(Mm(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃΔ[168][ts.ⵠΔⵠ] = Sq(Mm(0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃΔ[123] = [];
    ᐃΔ[123][ts.ⵠⵠⵠ] = Sq(Mm(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[123][ts.ⵠΔⵠ] = Sq(Mm(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[166] = [];
    ᐃΔ[166][ts.ⵠⵠⵠ] = Sq(im(1.5, Ns, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ᐃΔ[166][ts.ⵠΔⵠ] = Sq(im(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[336] = [];
    ᐃΔ[336][ts.ⵠⵠⵠ] = Sq(im(1, bh, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[336][ts.ⵠΔⵠ] = Sq(im(1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ᐃΔ[171] = [];
    ᐃΔ[171][ts.ⵠⵠⵠ] = Sq(em(1.5, Ns, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ᐃΔ[171][ts.ⵠΔⵠ] = Sq(em(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ᐃΔ[373] = [];
    ᐃΔ[373][ts.ⵠⵠⵠ] = Sq(em(1, xq, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[373][ts.ⵠΔⵠ] = Sq(em(1, xq, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[124] = [];
    ᐃΔ[124][ts.ⵠⵠⵠ] = Sq(em(1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[124][ts.ⵠΔⵠ] = Sq(em(1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[500] = [];
    ᐃΔ[500][ts.ⵠⵠⵠ] = Sq(em(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[500][ts.ⵠΔⵠ] = Sq(em(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[172] = [];
    ᐃΔ[172][ts.ⵠⵠⵠ] = Sq(pm(1.5, To, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ᐃΔ[172][ts.ⵠΔⵠ] = Sq(pm(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ᐃΔ[376] = [];
    ᐃΔ[376][ts.ⵠⵠⵠ] = Sq(pm(1, wr, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[376][ts.ⵠΔⵠ] = Sq(pm(1, vj, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[173] = [];
    ᐃΔ[173][ts.ⵠⵠⵠ] = Sq(Bm(1.5, Ns, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[173][ts.ⵠΔⵠ] = Sq(Bm(1.5, Vg, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[379] = [];
    ᐃΔ[379][ts.ⵠⵠⵠ] = Sq(Bm(1, bh, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[379][ts.ⵠΔⵠ] = Sq(Bm(1, bh, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[167] = [];
    ᐃΔ[167][ts.ⵠⵠⵠ] = Sq(Pm(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ᐃΔ[167][ts.ⵠΔⵠ] = Sq(Pm(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ᐃΔ[691] = [];
    ᐃΔ[691][ts.ⵠⵠⵠ] = Sq(Km(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ᐃΔ[691][ts.ⵠΔⵠ] = Sq(Km(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ᐃΔ[264] = [];
    ᐃΔ[264][ts.ⵠⵠⵠ] = Sq(fd(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ᐃΔ[264][ts.ⵠΔⵠ] = Sq(fd(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ᐃΔ[260] = [];
    ᐃΔ[260][ts.ⵠⵠⵠ] = Sq(Yb(Math.PI, xd(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ᐃΔ[260][ts.ⵠΔⵠ] = Sq(Yb(Math.PI, xd(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ᐃΔ[266] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      Lb(d, El, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      Lb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      Lb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      Lb(d, qn, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      Lb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      Lb(d, Co, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      Lb(d, ag, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      Lb(d, qn, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      Lb(d, ep, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      Lb(d, undefined, b[0], 4);
      return c;
    }(0.6, ["#FFFFFF"]));
    ᐃΔ[299] = [];
    ᐃΔ[299][ts.ⵠⵠⵠ] = Sq(wd(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ᐃΔ[299][ts.ⵠΔⵠ] = Sq(wd(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ᐃΔ[10] = [];
    ᐃΔ[10][ts.ⵠⵠⵠ] = Sq(mm(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ᐃΔ[10][ts.ⵠΔⵠ] = Sq(mm(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ᐃΔ[11] = [];
    ᐃΔ[11][ts.ⵠⵠⵠ] = Sq(Em(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ᐃΔ[11][ts.ⵠΔⵠ] = Sq(Em(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ᐃΔ[40] = [];
    ᐃΔ[40][ts.ⵠⵠⵠ] = Sq(gm(0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ᐃΔ[40][ts.ⵠΔⵠ] = Sq(gm(0.63, A, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ᐃΔ[41] = [];
    ᐃΔ[41][ts.ⵠⵠⵠ] = Sq(Xd(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ᐃΔ[41][ts.ⵠΔⵠ] = Sq(Xd(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ᐃΔ[42] = [];
    ᐃΔ[42][ts.ⵠⵠⵠ] = Sq(Fd(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ᐃΔ[42][ts.ⵠΔⵠ] = Sq(Fd(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ᐃΔ[716] = [];
    ᐃΔ[716][ts.ⵠⵠⵠ] = Sq(gp(0.42, ni, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ᐃΔ[716][ts.ⵠΔⵠ] = Sq(gp(0.42, Vg, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ᐃΔ[720] = [];
    ᐃΔ[720][ts.ⵠⵠⵠ] = Sq(Qc(0.9, ["#e4c027"]));
    ᐃΔ[720][ts.ⵠΔⵠ] = Sq(Qc(0.9, ["#D8E57F"]));
    ᐃΔ[144] = [];
    ᐃΔ[144][ts.ⵠⵠⵠ] = Sq(rc(0.42, Hh, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ᐃΔ[144][ts.ⵠΔⵠ] = Sq(rc(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ᐃΔ[722] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      Wb(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      Lb(d, b[0], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      Wb(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
      d.restore();
      Lb(d, b[6], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      Lb(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      Lb(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      Lb(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      Lb(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      Wb(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      Lb(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      Wb(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      Lb(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      Wb(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      Lb(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      Lb(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      Lb(d, b[3], b[3], a * 10);
      return c;
    }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ᐃΔ[407] = [];
    ᐃΔ[407][ts.ⵠⵠⵠ] = Sq(zm(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ᐃΔ[407][ts.ⵠΔⵠ] = Sq(zm(0.5, Jk, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ᐃΔ[119] = [];
    ᐃΔ[119][ts.ⵠⵠⵠ] = Sq(am(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ᐃΔ[119][ts.ⵠΔⵠ] = Sq(am(0.5, Xa, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ᐃΔ[411] = Sq(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      Wb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      Lb(e, c[0], c[1], 4);
      return d;
    }(0.8, 0, ["#5f6061", "#939393"]));
    ᐃΔ[412] = jd(1, [{
      f: Rd,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ᐃΔ[198] = [];
    ᐃΔ[198][ts.ⵠⵠⵠ] = Sq(lm(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃΔ[198][ts.ⵠΔⵠ] = Sq(lm(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃΔ[913] = [];
    ᐃΔ[913][ts.ⵠⵠⵠ] = Sq(fm(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃΔ[913][ts.ⵠΔⵠ] = Sq(fm(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃΔ[18] = [];
    ᐃΔ[18][ts.ⵠⵠⵠ] = Sq(Yb(3, Qm(0.7, rl, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ᐃΔ[18][ts.ⵠΔⵠ] = Sq(Yb(3, Qm(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ᐃΔ[12] = [];
    ᐃΔ[12][ts.ⵠⵠⵠ] = Sq(Yb(3, Am(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ᐃΔ[12][ts.ⵠΔⵠ] = Sq(Yb(3, Am(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ᐃΔ[13] = [];
    ᐃΔ[13][ts.ⵠⵠⵠ] = Sq(Yb(3, xm(0.65, I, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ᐃΔ[13][ts.ⵠΔⵠ] = Sq(Yb(3, xm(0.65, $l, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ᐃΔ[14] = [];
    ᐃΔ[14][ts.ⵠⵠⵠ] = Sq(Yb(3, rm(0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ᐃΔ[14][ts.ⵠΔⵠ] = Sq(Yb(3, rm(0.67, Xa, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ᐃΔ[15] = [];
    ᐃΔ[15][ts.ⵠⵠⵠ] = Sq(Yb(3, km(0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ᐃΔ[15][ts.ⵠΔⵠ] = Sq(Yb(3, km(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ᐃΔ[33] = [];
    ᐃΔ[33][ts.ⵠⵠⵠ] = Sq(Yb(3, um(0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ᐃΔ[33][ts.ⵠΔⵠ] = Sq(Yb(3, um(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ᐃΔ[16] = [];
    ᐃΔ[16][ts.ⵠⵠⵠ] = Sq(Yb(3, _m(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ᐃΔ[16][ts.ⵠΔⵠ] = Sq(Yb(3, _m(1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ᐃΔ[35] = [];
    ᐃΔ[35][ts.ⵠⵠⵠ] = Sq(Yb(3, Cm(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃΔ[35][ts.ⵠΔⵠ] = Sq(Yb(3, Cm(1, Xa, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ᐃΔ[55] = [];
    ᐃΔ[55][ts.ⵠⵠⵠ] = Sq(Yb(3, lc(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
    ᐃΔ[55][ts.ⵠΔⵠ] = Sq(Yb(3, lc(0.5, Bh, ["#030d14", "#485e66", "#1f343f"])));
    ᐃΔ[45] = [];
    ᐃΔ[45][ts.ⵠⵠⵠ] = Sq(Yb(3, cc(1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ᐃΔ[45][ts.ⵠΔⵠ] = Sq(Yb(3, cc(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ᐃΔ[36] = [];
    ᐃΔ[36][ts.ⵠⵠⵠ] = Sq(Yb(3, Cm(1, Hh, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃΔ[36][ts.ⵠΔⵠ] = Sq(Yb(3, Cm(1, rl, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ᐃΔ[37] = [];
    ᐃΔ[37][ts.ⵠⵠⵠ] = Sq(Yb(3, Cm(1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃΔ[37][ts.ⵠΔⵠ] = Sq(Yb(3, Cm(1, I, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃΔ[38] = [];
    ᐃΔ[38][ts.ⵠⵠⵠ] = Sq(Yb(3, Cm(1, Xa, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃΔ[38][ts.ⵠΔⵠ] = Sq(Yb(3, Cm(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃΔ[148] = [];
    ᐃΔ[148][ts.ⵠⵠⵠ] = Sq(uc(0.55, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ᐃΔ[148][ts.ⵠΔⵠ] = Sq(uc(0.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ᐃΔ[536] = [];
    ᐃΔ[536].push(Sq(uc(0.8, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ᐃΔ[536].push(Sq(uc(0.8, bh, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ᐃΔ[536].push(Sq(uc(0.8, false, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ᐃΔ[538] = [];
    ᐃΔ[538].push(ᐃΔ[536][0]);
    ᐃΔ[538].push(ᐃΔ[536][0]);
    ᐃΔ[538].push(ᐃΔ[536][0]);
    ᐃΔ[158] = [];
    ᐃΔ[158][ts.ⵠⵠⵠ] = Sq(xc(0.06, ik, ["#141414", "#c4a23a", "#816511"]));
    ᐃΔ[158][ts.ⵠΔⵠ] = Sq(xc(0.06, wr, ["#030d14", "#2b6664", "#133d3c"]));
    ᐃΔ[535] = [];
    ᐃΔ[535].push(Sq(xc(0.08, false, ["#141414", "#c4a23a", "#816511"])));
    ᐃΔ[535].push(Sq(xc(0.08, false, ["#141414", "#e2bd4e", "#a38018"])));
    ᐃΔ[535].push(Sq(xc(0.08, false, ["#141414", "#b0902e", "#634d09"])));
    ᐃΔ[149] = jd(1.5, [{
      f: Hm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃΔ[526] = [];
    ᐃΔ[526][ts.ⵠⵠⵠ] = Sq(ec(0.8, Xa, ["#347f93", "#54a4ba"]));
    ᐃΔ[526][ts.ⵠΔⵠ] = Sq(ec(0.8, ni, ["#98ede3", "#94f2e7"]));
    ᐃΔ[527] = [];
    ᐃΔ[527][ts.ⵠⵠⵠ] = Sq(tp(0.8, Xa, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ᐃΔ[527][ts.ⵠΔⵠ] = Sq(tp(0.8, true, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ᐃΔ[528] = [];
    ᐃΔ[528][ts.ⵠⵠⵠ] = Sq(Um(0.8, Ho, ["#a9e4ed", "#86d4e0"]));
    ᐃΔ[528][ts.ⵠΔⵠ] = Sq(Um(0.8, Ns, ["#83ddd4", "#485e66"]));
    ᐃΔ[151] = [];
    ᐃΔ[151][ts.ⵠⵠⵠ] = Sq(Ym(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ᐃΔ[151][ts.ⵠΔⵠ] = Sq(Ym(0.8, Qo, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ᐃΔ[1192] = [];
    ᐃΔ[1192][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃΔⲆⲆⵠⵠ;
    ᐃΔ[1192][ts.ⵠΔⵠ] = ΔΔ.ⲆⵠⲆΔⲆᐃⵠ;
    ᐃΔ[1193] = [];
    ᐃΔ[1193][ts.ⵠⵠⵠ] = ΔΔ.ᐃΔⲆΔΔⵠⵠ;
    ᐃΔ[1193][ts.ⵠΔⵠ] = ΔΔ.ⵠᐃⲆⵠΔⵠΔ;
    ᐃΔ[1194] = [];
    ᐃΔ[1194][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔᐃΔΔⲆΔ;
    ᐃΔ[1194][ts.ⵠΔⵠ] = ΔΔ.ⵠΔⵠΔᐃᐃΔ;
    ᐃΔ[152] = [];
    ᐃΔ[152][ts.ⵠⵠⵠ] = ΔΔ.ᐃⲆΔΔᐃⲆⲆ;
    ᐃΔ[152][ts.ⵠΔⵠ] = ΔΔ.ⵠΔⵠⲆΔΔᐃ;
    ᐃΔ[1198] = [];
    ᐃΔ[1198][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃⲆΔᐃΔⵠ;
    ᐃΔ[1198][ts.ⵠΔⵠ] = ΔΔ.ⵠⲆⲆᐃⲆⵠⵠ;
    ᐃΔ[153] = [];
    ᐃΔ[153][ts.ⵠⵠⵠ] = ΔΔ.ⵠⲆⲆⲆⵠⲆⲆ;
    ᐃΔ[153][ts.ⵠΔⵠ] = ΔΔ.ΔⲆⲆᐃΔⲆᐃ;
    ᐃΔ[1202] = [];
    ᐃΔ[1202][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠᐃⵠⵠΔΔ;
    ᐃΔ[1202][ts.ⵠΔⵠ] = ΔΔ.ΔⲆⵠⲆⲆᐃᐃ;
    ᐃΔ[154] = [];
    ᐃΔ[154][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆᐃⵠΔⵠΔ;
    ᐃΔ[154][ts.ⵠΔⵠ] = ΔΔ.ⵠⲆⲆΔⲆⲆΔ;
    ᐃΔ[1206] = [];
    ᐃΔ[1206][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔⲆⵠⵠⲆᐃ;
    ᐃΔ[1206][ts.ⵠΔⵠ] = ΔΔ.ΔΔⲆᐃᐃⲆⵠ;
    ᐃΔ[155] = [];
    ᐃΔ[155][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃᐃΔΔᐃⲆ;
    ᐃΔ[155][ts.ⵠΔⵠ] = ΔΔ.ⲆⵠⵠΔΔᐃⵠ;
    ᐃΔ[1210] = [];
    ᐃΔ[1210][ts.ⵠⵠⵠ] = ΔΔ.ⲆⵠⲆⵠⲆⵠⵠ;
    ᐃΔ[1210][ts.ⵠΔⵠ] = ΔΔ.ⲆΔⵠⵠⵠⵠⲆ;
    ᐃΔ[156] = [];
    ᐃΔ[156][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆΔⲆⲆΔΔ;
    ᐃΔ[156][ts.ⵠΔⵠ] = ΔΔ.ΔΔⲆⲆΔᐃΔ;
    ᐃΔ[1214] = [];
    ᐃΔ[1214][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃΔⲆΔΔΔ;
    ᐃΔ[1214][ts.ⵠΔⵠ] = ΔΔ.ⲆⵠⵠΔⲆⲆΔ;
    ᐃΔ[157] = [];
    ᐃΔ[157][ts.ⵠⵠⵠ] = ΔΔ.ⲆᐃᐃⵠⵠᐃΔ;
    ᐃΔ[157][ts.ⵠΔⵠ] = ΔΔ.ᐃⲆⵠⲆⵠΔᐃ;
    ᐃΔ[245] = [];
    ᐃΔ[245][ts.ⵠⵠⵠ] = ΔΔ.ⵠᐃⲆⵠⵠⲆⲆ;
    ᐃΔ[245][ts.ⵠΔⵠ] = ΔΔ.ⲆⲆⲆⲆᐃᐃΔ;
    ᐃΔ[246] = ΔΔ.ΔⵠⵠΔᐃᐃᐃ;
    ᐃΔ[159] = [];
    ᐃΔ[159][ts.ⵠⵠⵠ] = Sq(ip(0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ᐃΔ[159][ts.ⵠΔⵠ] = Sq(ip(0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ᐃΔ[558] = Sq($c(0.3, ["#092813", "#1f773d"], 0));
    ᐃΔ[559] = Sq($c(0.3, ["#092813", "#1f773d"], 1));
    ᐃΔ[885] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      Lb(d, b[0]);
      d.translate(0, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      Lb(d, b[1]);
      return c;
    }(0.6, ["#092813", "#1f773d"]));
    ᐃΔ[556] = [];
    ᐃΔ[556].push(Sq(Ic(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ᐃΔ[556].push(Sq(Ic(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    ᐃΔ[556].push(Sq(Ic(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ᐃΔ[560] = [];
    var b = Sq(Ic(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ᐃΔ[560].push(b);
    ᐃΔ[560].push(b);
    ᐃΔ[560].push(b);
    ᐃΔ[557] = [];
    ᐃΔ[557].push(Sq(Ic(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ᐃΔ[557].push(Sq(Ic(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    ᐃΔ[557].push(Sq(Ic(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ᐃΔ[681] = Sq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var a = f / 2;
      var i = g / 2;
      d.width = f;
      d.height = g;
      e.translate(a, i);
      e.save();
      for (var j = 0; j < 10; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, 0);
        Hb(e, 3, b * 18, b * 4);
        Lb(e, c[0]);
        e.restore();
      }
      e.restore();
      jb(e, 0, 0, b * 40);
      Lb(e, Tj, c[0], b * 6);
      jb(e, 0, 0, b * 20);
      Lb(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ᐃΔ[794] = Sq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var a = f / 2;
      var h = g / 2;
      d.width = f;
      d.height = g;
      jb(e, a, h, b * 40);
      Lb(e, undefined, c[0], b * 7);
      jb(e, a, h, b * 30);
      Lb(e, pa, c[0], b * 7);
      jb(e, a, h, b * 20);
      Lb(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ᐃΔ[562] = Sq($c(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ᐃΔ[667] = Sq(Yb(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      Wb(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      Lb(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      Lb(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      Lb(d, b[0], b[0], a * 15);
      return c;
    }(0.2, ["#FFFFFF"])));
    ᐃΔ[43] = [];
    ᐃΔ[43][ts.ⵠⵠⵠ] = Sq(Xc(0.85, kg, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ᐃΔ[43][ts.ⵠΔⵠ] = Sq(Xc(0.85, true, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ᐃΔ[561] = [];
    ᐃΔ[561].push(Sq(Ic(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ᐃΔ[561].push(Sq(Ic(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    ᐃΔ[561].push(Sq(Ic(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ᐃΔ[83] = [];
    ᐃΔ[83][ts.ⵠⵠⵠ] = Sq(nc(0.37, kg, ["#2a2938", "#242330", "#313041"]));
    ᐃΔ[83][ts.ⵠΔⵠ] = Sq(nc(0.37, true, ["#1b1e30", "#161921", "#252f3e"]));
    ᐃΔ[85] = [];
    ᐃΔ[85][ts.ⵠⵠⵠ] = Sq(Zm(0.17, true, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ᐃΔ[85][ts.ⵠΔⵠ] = Sq(Zm(0.17, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ᐃΔ[86] = [];
    ᐃΔ[86][ts.ⵠⵠⵠ] = Sq(hp(0.55, Qo, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ᐃΔ[86][ts.ⵠΔⵠ] = Sq(hp(0.55, Hh, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ᐃΔ[84] = [];
    ᐃΔ[84][ts.ⵠⵠⵠ] = Sq(hp(0.55, $l, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ᐃΔ[84][ts.ⵠΔⵠ] = Sq(hp(0.55, Vg, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ᐃΔ[77] = [];
    ᐃΔ[77][ts.ⵠⵠⵠ] = Sq(Wc(0.2, Bh, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ᐃΔ[77][ts.ⵠΔⵠ] = Sq(Wc(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ᐃΔ[78] = [];
    ᐃΔ[78][ts.ⵠⵠⵠ] = Sq(Wc(0.2, rl, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ᐃΔ[78][ts.ⵠΔⵠ] = Sq(Wc(0.2, En, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ᐃΔ[79] = [];
    ᐃΔ[79][ts.ⵠⵠⵠ] = Sq(Wc(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ᐃΔ[79][ts.ⵠΔⵠ] = Sq(Wc(0.2, Bh, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ᐃΔ[61] = [];
    ᐃΔ[61][ts.ⵠⵠⵠ] = Sq(sm(0.24, A, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ᐃΔ[61][ts.ⵠΔⵠ] = Sq(sm(0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ᐃΔ[59] = [];
    ᐃΔ[59][ts.ⵠⵠⵠ] = Sq(Dm(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ᐃΔ[59][ts.ⵠΔⵠ] = Sq(Dm(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ᐃΔ[62] = [];
    ᐃΔ[62][ts.ⵠⵠⵠ] = Sq(Yb(3, Zc(0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ᐃΔ[62][ts.ⵠΔⵠ] = Sq(Yb(3, Zc(0.9, A, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ᐃΔ[750] = [];
    ᐃΔ[750][ts.ⵠⵠⵠ] = Sq(Yb(3, Zc(1, true, [undefined, undefined, eg, "#c8efef", "#c8efef"])));
    ᐃΔ[750][ts.ⵠΔⵠ] = Sq(Yb(3, Zc(1, true, [undefined, lg, undefined, "#87d2e6", "#87d2e6"])));
    ᐃΔ[755] = [];
    ᐃΔ[755].push(Sq(tc(0.3, pl, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ᐃΔ[755].push(Sq(tc(0.3, Bh, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    ᐃΔ[755].push(Sq(tc(0.3, Ns, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ᐃΔ[795] = [];
    ᐃΔ[795].push(Sq(Jc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ᐃΔ[795].push(Sq(Jc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ᐃΔ[795].push(Sq(Jc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ᐃΔ[782] = [];
    ᐃΔ[782].push(Sq(Rt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    ᐃΔ[782].push(Sq(Rt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    ᐃΔ[782].push(Sq(Rt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ᐃΔ[783] = [];
    ᐃΔ[783].push(Sq(Rt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    ᐃΔ[783].push(Sq(Rt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    ᐃΔ[783].push(Sq(Rt(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    ᐃΔ[46] = [];
    ᐃΔ[46][ts.ⵠⵠⵠ] = Sq(Yb(3, Pc(0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ᐃΔ[46][ts.ⵠΔⵠ] = Sq(Yb(3, Pc(0.7, Vg, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ᐃΔ[50] = [];
    ᐃΔ[50][ts.ⵠⵠⵠ] = Sq(Yb(3, Pc(0.7, I, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ᐃΔ[50][ts.ⵠΔⵠ] = Sq(Yb(3, Pc(0.7, $l, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ᐃΔ[51] = [];
    ᐃΔ[51][ts.ⵠⵠⵠ] = Sq(Yb(3, Pc(0.7, $l, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ᐃΔ[51][ts.ⵠΔⵠ] = Sq(Yb(3, Pc(0.7, Xa, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ᐃΔ[52] = [];
    ᐃΔ[52][ts.ⵠⵠⵠ] = Sq(Yb(3, Pc(0.7, Hh, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ᐃΔ[52][ts.ⵠΔⵠ] = Sq(Yb(3, Pc(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ᐃΔ[592] = [];
    ᐃΔ[592].push(Sq(Yc(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ᐃΔ[592].push(Sq(Yc(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ᐃΔ[592].push(Sq(Yc(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ᐃΔ[326] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      Lb(d, b[0], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      Lb(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      Lb(d, b[0], b[0], a * 2);
      return c;
    }(1.1, ["#BB0000"]));
    ᐃΔ[333] = Sq(Yb(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      jb(d, a * 213.5, a * 256.75, a * 75);
      Lb(d, b);
      jb(d, a * 213.5, a * 175.75, a * 25);
      Lb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(0.9, "#BB0000")));
    ᐃΔ[23] = [];
    ᐃΔ[23][ts.ⵠⵠⵠ] = Sq(zc(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ᐃΔ[23][ts.ⵠΔⵠ] = Sq(zc(0.55, is, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ᐃΔ[58] = [];
    ᐃΔ[58][ts.ⵠⵠⵠ] = Sq(hc(0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ᐃΔ[58][ts.ⵠΔⵠ] = Sq(hc(0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ᐃΔ[25] = [];
    ᐃΔ[25][ts.ⵠⵠⵠ] = Sq(Fm(0.6, Hh, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ᐃΔ[25][ts.ⵠΔⵠ] = Sq(Fm(0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ᐃΔ[26] = [];
    ᐃΔ[26][ts.ⵠⵠⵠ] = Sq(yc(0.58, true, ["#dbce71", "#b29c32", "#c4bc51"]));
    ᐃΔ[26][ts.ⵠΔⵠ] = Sq(yc(0.58, kg, ["#2b7c57", "#15543c", "#1a7961"]));
    ᐃΔ[27] = [];
    ᐃΔ[27][ts.ⵠⵠⵠ] = Sq(_c(0.69, Bh, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ᐃΔ[27][ts.ⵠΔⵠ] = Sq(_c(0.69, true, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ᐃΔ[413] = [];
    ᐃΔ[413][ts.ⵠⵠⵠ] = [];
    ᐃΔ[413][ts.ⵠΔⵠ] = [];
    ᐃΔ[413][ts.ⵠⵠⵠ].push(Sq(fc(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ᐃΔ[413][ts.ⵠⵠⵠ].push(Sq(oc(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ᐃΔ[413][ts.ⵠⵠⵠ].push(Sq(Nc(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ᐃΔ[413][ts.ⵠΔⵠ].push(Sq(fc(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ᐃΔ[413][ts.ⵠΔⵠ].push(Sq(oc(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ᐃΔ[413][ts.ⵠΔⵠ].push(Sq(Nc(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ᐃΔ[449] = [];
    ᐃΔ[449][ts.ⵠⵠⵠ] = Sq(ac(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ᐃΔ[449][ts.ⵠΔⵠ] = Sq(ac(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ᐃΔ[451] = [];
    ᐃΔ[451][ts.ⵠⵠⵠ] = Sq(Cc(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃΔ[451][ts.ⵠΔⵠ] = Sq(Cc(1, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃΔ[452] = [];
    ᐃΔ[452][ts.ⵠⵠⵠ] = Sq(Lc(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃΔ[452][ts.ⵠΔⵠ] = Sq(Lc(1, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃΔ[243] = [];
    ᐃΔ[243][ts.ⵠⵠⵠ] = [];
    ᐃΔ[243][ts.ⵠΔⵠ] = [];
    ᐃΔ[243][ts.ⵠⵠⵠ] = [ΔΔ.ΔᐃⲆᐃⲆⵠⵠ, ΔΔ.ΔΔΔⲆⵠΔΔ, ΔΔ.ΔⲆⲆⵠᐃΔⲆ, ΔΔ.ⲆⵠⲆⲆᐃⲆΔ, ΔΔ.ⵠᐃⲆᐃⵠⵠⵠ, ΔΔ.ⵠⵠⲆᐃᐃⲆⵠ, ΔΔ.ⲆⲆⲆᐃᐃⵠΔ, ΔΔ.ΔᐃⲆᐃΔΔⲆ, ΔΔ.ΔᐃᐃⲆⲆΔⲆ, ΔΔ.ΔᐃⲆⲆⵠᐃᐃ, ΔΔ.ΔⲆⵠⲆⲆⵠΔ, ΔΔ.ⲆΔᐃᐃⲆᐃᐃ, ΔΔ.ⲆⵠⵠΔᐃⲆᐃ, ΔΔ.ⵠᐃⲆⲆⵠᐃⵠ, ΔΔ.ⲆΔⲆΔᐃⵠᐃ, ΔΔ.ΔΔⵠⵠᐃⲆⲆ, ΔΔ.ΔΔⲆⲆⵠᐃⵠ, ΔΔ.ⵠᐃᐃΔᐃⲆⲆ, ΔΔ.ᐃⵠΔΔΔᐃⵠ, ΔΔ.ⵠⲆⲆⲆᐃᐃⵠ, ΔΔ.ᐃⵠΔⵠᐃⲆᐃ, ΔΔ.ᐃΔⲆΔᐃⲆΔ, ΔΔ.ⵠⲆΔΔᐃΔⲆ, ΔΔ.ᐃⵠⵠⲆΔΔΔ, ΔΔ.ⲆⲆⵠⵠⲆⲆΔ, ΔΔ.ⵠΔⵠⵠΔⵠⲆ, ΔΔ.ᐃᐃᐃⵠⲆΔΔ, ΔΔ.ΔΔⲆⵠᐃⵠⵠ, ΔΔ.ᐃⲆᐃⵠΔⵠⵠ, ΔΔ.ⲆΔᐃΔⲆᐃᐃ, ΔΔ.ΔΔᐃⵠᐃᐃⵠ, ΔΔ.ⵠⵠΔΔΔⲆⵠ, ΔΔ.ᐃᐃᐃΔⲆⵠΔ, ΔΔ.ᐃⲆΔᐃΔⵠⲆ, ΔΔ.ΔΔⲆΔΔⲆⲆ, ΔΔ.ⵠᐃⵠΔΔⵠⵠ, ΔΔ.ⵠᐃⵠⲆⲆΔⵠ, ΔΔ.ᐃⲆΔᐃΔΔᐃ, ΔΔ.ᐃΔΔᐃΔΔⵠ, ΔΔ.ⲆⵠΔⲆᐃⵠⵠ, ΔΔ.ⵠᐃⵠⵠⲆⲆⵠ, ΔΔ.ΔΔⵠᐃΔᐃⲆ, ΔΔ.ⵠΔᐃⲆⵠᐃⲆ, ΔΔ.ⵠⲆⵠⵠΔⲆΔ, ΔΔ.ⲆⲆᐃΔⵠᐃΔ, ΔΔ.ⲆΔⲆᐃΔⵠⲆ, ΔΔ.ⵠⲆⲆⲆᐃᐃⲆ, ΔΔ.ⵠᐃⵠᐃⵠᐃΔ, ΔΔ.ⵠⲆⵠⲆΔⲆⵠ, ΔΔ.ΔΔΔᐃᐃⵠᐃ, ΔΔ.ⲆⲆⲆΔⵠᐃⵠ, ΔΔ.ΔⵠΔⲆΔᐃⵠ, ΔΔ.ΔⵠⵠΔΔΔΔ, ΔΔ.ⵠⵠⵠⵠⲆⲆᐃ, ΔΔ.ᐃᐃⵠΔⵠΔⵠ, ΔΔ.ⵠΔⲆⲆⲆΔΔ];
    ᐃΔ[243][ts.ⵠΔⵠ] = [ΔΔ.ΔⲆΔⲆⵠⵠΔ, ΔΔ.ΔΔᐃΔⲆⲆΔ, ΔΔ.ⵠΔᐃᐃⵠΔΔ, ΔΔ.ᐃⲆⵠᐃⲆⵠⵠ, ΔΔ.ⲆΔⲆⲆΔⲆΔ, ΔΔ.ⲆΔⲆⵠⵠⲆⲆ, ΔΔ.ΔⲆⵠⲆΔΔΔ, ΔΔ.ᐃᐃⲆⵠᐃᐃⵠ, ΔΔ.ᐃΔᐃⲆⵠⵠⵠ, ΔΔ.ᐃΔⵠΔᐃⵠⲆ, ΔΔ.ᐃΔΔΔⵠⵠⵠ, ΔΔ.ΔᐃᐃⵠΔⲆΔ, ΔΔ.ⲆⵠΔᐃⵠΔⵠ, ΔΔ.ᐃᐃⲆᐃⲆⵠΔ, ΔΔ.ᐃⲆⲆⲆⵠⲆΔ, ΔΔ.ΔᐃⲆΔᐃΔᐃ, ΔΔ.ⵠⲆΔΔⲆⵠⲆ, ΔΔ.ΔⲆᐃⲆⵠΔᐃ, ΔΔ.ΔΔⲆᐃᐃΔᐃ, ΔΔ.ΔΔⵠⲆⲆⵠⲆ, ΔΔ.ΔΔⵠΔᐃⲆⲆ, ΔΔ.ΔΔΔᐃΔⲆᐃ, ΔΔ.ᐃΔΔⲆᐃⵠⵠ, ΔΔ.ᐃᐃΔΔΔⵠⵠ, ΔΔ.ⵠᐃΔᐃᐃᐃⵠ, ΔΔ.ⵠⵠᐃᐃᐃⵠⲆ, ΔΔ.ⲆⵠⲆⲆᐃⵠΔ, ΔΔ.ⵠΔᐃⵠΔᐃᐃ, ΔΔ.ᐃⲆᐃⵠⲆⵠⵠ, ΔΔ.ᐃᐃᐃⵠⵠΔΔ, ΔΔ.ᐃⵠᐃᐃᐃΔⲆ, ΔΔ.ᐃⲆᐃΔⵠᐃⲆ, ΔΔ.ΔᐃⲆⵠⵠⲆⲆ, ΔΔ.ⲆⲆΔᐃΔⲆΔ, ΔΔ.ΔⲆⵠΔⵠΔΔ, ΔΔ.ⲆᐃⵠⲆΔΔⲆ, ΔΔ.ⲆⲆΔΔᐃᐃⲆ, ΔΔ.ⵠⵠⲆΔΔᐃⲆ, ΔΔ.ΔΔΔⲆᐃⵠⲆ, ΔΔ.ⵠⲆⲆΔΔᐃⲆ, ΔΔ.ᐃⲆⵠⵠⵠΔⲆ, ΔΔ.ⵠᐃⵠⵠⲆᐃΔ, ΔΔ.ᐃΔⲆᐃⵠᐃΔ, ΔΔ.ΔⲆΔⲆⲆΔⲆ, ΔΔ.ΔⵠᐃΔᐃⵠᐃ, ΔΔ.ᐃⵠΔⵠΔᐃⵠ, ΔΔ.ⲆⲆⵠⲆⵠⵠⲆ, ΔΔ.ΔᐃᐃⲆⵠΔⲆ, ΔΔ.ΔΔᐃΔⵠⲆᐃ, ΔΔ.ⵠⵠᐃᐃⵠⲆΔ, ΔΔ.ⲆⵠⲆΔⲆⵠΔ, ΔΔ.ⵠΔⵠⵠΔⲆΔ, ΔΔ.ⲆⵠᐃᐃⵠⲆⲆ, ΔΔ.ᐃᐃⵠᐃⵠⲆΔ, ΔΔ.ΔⵠⲆΔΔⲆΔ, ΔΔ.ⵠⲆⵠⲆΔᐃⲆ];
    ᐃΔ[676] = [];
    ᐃΔ[676][ts.ⵠⵠⵠ] = [];
    ᐃΔ[676][ts.ⵠΔⵠ] = [];
    ᐃΔ[676][ts.ⵠⵠⵠ].push(Sq(tu(1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
    ᐃΔ[676][ts.ⵠⵠⵠ].push(Sq(tu(0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
    ᐃΔ[676][ts.ⵠⵠⵠ].push(Sq(tu(1, false, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃΔ[676][ts.ⵠⵠⵠ].push(Sq(tu(0.9, gl, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃΔ[676][ts.ⵠΔⵠ].push(Sq(tu(1.1, ik, ["#030d14", "#123335", "#183f3f"], 0)));
    ᐃΔ[676][ts.ⵠΔⵠ].push(Sq(tu(0.9, vl, ["#030d14", "#123335", "#183f3f"], 1)));
    ᐃΔ[676][ts.ⵠΔⵠ].push(Sq(tu(1, false, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[676][ts.ⵠΔⵠ].push(Sq(tu(0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679] = [];
    ᐃΔ[679][ts.ⵠⵠⵠ] = [];
    ᐃΔ[679][ts.ⵠΔⵠ] = [];
    ᐃΔ[679][ts.ⵠⵠⵠ].push(Sq(tu(1.1, Hh, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][ts.ⵠⵠⵠ].push(Sq(tu(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][ts.ⵠⵠⵠ].push(Sq(tu(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][ts.ⵠⵠⵠ].push(Sq(tu(0.9, En, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][ts.ⵠΔⵠ].push(Sq(tu(1.1, pl, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679][ts.ⵠΔⵠ].push(Sq(tu(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679][ts.ⵠΔⵠ].push(Sq(tu(1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679][ts.ⵠΔⵠ].push(Sq(tu(0.9, A, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[415] = [];
    ᐃΔ[415][ts.ⵠⵠⵠ] = [];
    ᐃΔ[415][ts.ⵠΔⵠ] = [];
    ᐃΔ[415][ts.ⵠⵠⵠ].push(Sq(su(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][ts.ⵠⵠⵠ].push(Sq(su(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][ts.ⵠⵠⵠ].push(Sq(su(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][ts.ⵠΔⵠ].push(Sq(su(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[415][ts.ⵠΔⵠ].push(Sq(su(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[415][ts.ⵠΔⵠ].push(Sq(su(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[416] = [];
    ᐃΔ[416][ts.ⵠⵠⵠ] = [];
    ᐃΔ[416][ts.ⵠΔⵠ] = [];
    ᐃΔ[416][ts.ⵠⵠⵠ].push(Sq(nu(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][ts.ⵠⵠⵠ].push(Sq(nu(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][ts.ⵠⵠⵠ].push(Sq(nu(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][ts.ⵠΔⵠ].push(Sq(nu(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[416][ts.ⵠΔⵠ].push(Sq(nu(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[416][ts.ⵠΔⵠ].push(Sq(nu(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[121] = [];
    ᐃΔ[121][ts.ⵠⵠⵠ] = [];
    ᐃΔ[121][ts.ⵠΔⵠ] = [];
    ᐃΔ[121][ts.ⵠⵠⵠ].push(Sq(mc(1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][ts.ⵠⵠⵠ].push(Sq(mc(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][ts.ⵠⵠⵠ].push(Sq(mc(1.3, is, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][ts.ⵠΔⵠ].push(Sq(mc(1.7, $l, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[121][ts.ⵠΔⵠ].push(Sq(mc(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[121][ts.ⵠΔⵠ].push(Sq(mc(1.3, pl, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[678] = [];
    ᐃΔ[678][ts.ⵠⵠⵠ] = [];
    ᐃΔ[678][ts.ⵠΔⵠ] = [];
    ᐃΔ[678][ts.ⵠⵠⵠ].push(Sq(pc(1, ["#2d53c4"])));
    ᐃΔ[678][ts.ⵠΔⵠ].push(Sq(pc(1, ["#2d53c4"])));
    ᐃΔ[696] = [];
    ᐃΔ[696][ts.ⵠⵠⵠ] = [];
    ᐃΔ[696][ts.ⵠΔⵠ] = [];
    ᐃΔ[696][ts.ⵠⵠⵠ].push(Sq(pc(1, ["#c4912d"])));
    ᐃΔ[696][ts.ⵠΔⵠ].push(Sq(pc(1, ["#c4912d"])));
    ᐃΔ[680] = [];
    ᐃΔ[680][ts.ⵠⵠⵠ] = Sq(rp(1, ["#414040"]));
    ᐃΔ[680][ts.ⵠΔⵠ] = Sq(rp(1, ["#153635"]));
    ᐃΔ[508] = [];
    ᐃΔ[508][ts.ⵠⵠⵠ] = Sq(im(1, ln, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[508][ts.ⵠΔⵠ] = Sq(im(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[509] = [];
    ᐃΔ[509][ts.ⵠⵠⵠ] = Sq(em(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[509][ts.ⵠΔⵠ] = Sq(em(1, Pg, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[512] = [];
    ᐃΔ[512][ts.ⵠⵠⵠ] = Sq(em(1, Es, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[512][ts.ⵠΔⵠ] = Sq(em(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[511] = [];
    ᐃΔ[511][ts.ⵠⵠⵠ] = Sq(Bm(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[511][ts.ⵠΔⵠ] = Sq(Bm(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[510] = [];
    ᐃΔ[510][ts.ⵠⵠⵠ] = Sq(pm(1, bh, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[510][ts.ⵠΔⵠ] = Sq(pm(1, bh, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[419] = [];
    ᐃΔ[419][ts.ⵠⵠⵠ] = Sq(Wm(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ᐃΔ[419][ts.ⵠΔⵠ] = Sq(Wm(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ᐃΔ[445] = [];
    ᐃΔ[445][ts.ⵠⵠⵠ] = Sq(np(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ᐃΔ[445][ts.ⵠΔⵠ] = Sq(np(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ᐃΔ[259] = [];
    ᐃΔ[818] = [];
    ᐃΔ[516] = [];
    ᐃΔ[819] = [];
    for (a = 0; a < 2; a++) {
      ᐃΔ[259][a] = document.createElement("canvas");
      ᐃΔ[259][a].width = 193;
      ᐃΔ[259][a].height = 193;
      ᐃΔ[818][a] = ᐃΔ[259][a].getContext("2d");
      ᐃΔ[516][a] = document.createElement("canvas");
      ᐃΔ[516][a].width = 600;
      ᐃΔ[516][a].height = 600;
      ᐃΔ[819][a] = ᐃΔ[516][a].getContext("2d");
    }
    ᐃΔ[475] = [];
    ᐃΔ[475][ts.ⵠⵠⵠ] = Sq(rp(1, ["#c8e0de"]));
    ᐃΔ[475][ts.ⵠΔⵠ] = Sq(rp(1, ["#147071"]));
    ᐃΔ[476] = [];
    ᐃΔ[476][ts.ⵠⵠⵠ] = Sq(rp(1, ["#231912"]));
    ᐃΔ[476][ts.ⵠΔⵠ] = Sq(rp(1, ["#021719"]));
    ᐃΔ[697] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      Wb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
      d.restore();
      Lb(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      Wb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      Lb(d, b[0], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      Wb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      Lb(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      Wb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
      d.restore();
      Lb(d, b[0]);
      return c;
    }(0.5, ["#BB0000"]));
    ᐃΔ[461] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
      d.closePath();
      Lb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      Lb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      Lb(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ᐃΔ[462] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      Lb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      Lb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      Lb(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ᐃΔ[463] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      Lb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      Lb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      Lb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      Lb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      Lb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      Lb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      Lb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      Lb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      Lb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      Lb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      Lb(d, b[0]);
      return c;
    }(1, ["#BB0000"]));
    ᐃΔ[466] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      Lb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      Lb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      Lb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ᐃΔ[467] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      Lb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      Lb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      Lb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ᐃΔ[322] = Sq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var a = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      Lb(e, c, c, a);
      return d;
    }(0.9, "#BB0000"));
    ᐃΔ[279] = Sq(Zb(0.6, "#BB0000"));
    ᐃΔ[280] = Sq(Zb(0.6, "#1CE7E0"));
    ᐃΔ[281] = Sq(Zb(0.6, "#DBE71C"));
    ᐃΔ[308] = Sq(Zb(0.6, "#00BB00"));
    ᐃΔ[602] = [];
    ᐃΔ[602][ts.ⵠⵠⵠ] = Sq(rp(1, ["#dac291"]));
    ᐃΔ[602][ts.ⵠΔⵠ] = Sq(rp(1, ["#0D423D"]));
    ᐃΔ[698] = [];
    ᐃΔ[698][ts.ⵠⵠⵠ] = Sq(rp(1, ["#dac291"]));
    ᐃΔ[698][ts.ⵠΔⵠ] = Sq(rp(1, ["#0D423D"]));
    ᐃΔ[788] = [];
    ᐃΔ[788][ts.ⵠⵠⵠ] = Sq(Hc(0.3, kg, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ᐃΔ[788][ts.ⵠΔⵠ] = Sq(Hc(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ᐃΔ[182] = [];
    ᐃΔ[182][ts.ⵠⵠⵠ] = Sq(Hc(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ᐃΔ[182][ts.ⵠΔⵠ] = Sq(Hc(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ᐃΔ[127] = [Sq(Gm(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃΔ[128] = [Sq(Gm(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃΔ[603] = [];
    ᐃΔ[603][ts.ⵠⵠⵠ] = [];
    ᐃΔ[603][ts.ⵠΔⵠ] = [];
    ᐃΔ[603][ts.ⵠⵠⵠ].push(Sq(Fc(1, ["#0B6A84"])));
    ᐃΔ[603][ts.ⵠⵠⵠ].push(Sq(Kc(1, ["#0B6A84"])));
    ᐃΔ[603][ts.ⵠⵠⵠ].push(Sq(Sc(1, ["#0B6A84"])));
    ᐃΔ[603][ts.ⵠⵠⵠ].push(Sq(Rc(1, ["#0B6A84"])));
    ᐃΔ[603][ts.ⵠⵠⵠ].push(Sq(Dc(1, ["#0B6A84"])));
    ᐃΔ[603][ts.ⵠⵠⵠ].push(Sq(jc(1, ["#0B6A84"])));
    ᐃΔ[603][ts.ⵠⵠⵠ].push(Sq(Lm(1, ["#0B6A84"])));
    ᐃΔ[603][ts.ⵠΔⵠ].push(Sq(Fc(1, ["#09373F"])));
    ᐃΔ[603][ts.ⵠΔⵠ].push(Sq(Kc(1, ["#09373F"])));
    ᐃΔ[603][ts.ⵠΔⵠ].push(Sq(Sc(1, ["#09373F"])));
    ᐃΔ[603][ts.ⵠΔⵠ].push(Sq(Rc(1, ["#09373F"])));
    ᐃΔ[603][ts.ⵠΔⵠ].push(Sq(Dc(1, ["#09373F"])));
    ᐃΔ[603][ts.ⵠΔⵠ].push(Sq(jc(1, ["#09373F"])));
    ᐃΔ[603][ts.ⵠΔⵠ].push(Sq(Lm(1, ["#09373F"])));
    ᐃΔ[692] = [];
    ᐃΔ[692][ts.ⵠⵠⵠ] = [];
    ᐃΔ[692][ts.ⵠΔⵠ] = [];
    ᐃΔ[692][ts.ⵠⵠⵠ].push(Sq(Sm(1.7, ["#FBEFBC"], 0)));
    ᐃΔ[692][ts.ⵠⵠⵠ].push(Sq(Sm(1.9, ["#FBEFBC"], 1)));
    ᐃΔ[692][ts.ⵠⵠⵠ].push(Sq(Sm(1.7, ["#FBEFBC"], 2)));
    ᐃΔ[692][ts.ⵠΔⵠ].push(Sq(Sm(1.7, ["#0F4C48"], 0)));
    ᐃΔ[692][ts.ⵠΔⵠ].push(Sq(Sm(1.9, ["#0F4C48"], 1)));
    ᐃΔ[692][ts.ⵠΔⵠ].push(Sq(Sm(1.7, ["#0F4C48"], 2)));
    ᐃΔ[694] = [];
    ᐃΔ[694][ts.ⵠⵠⵠ] = [];
    ᐃΔ[694][ts.ⵠΔⵠ] = [];
    ᐃΔ[694][ts.ⵠⵠⵠ].push(Sq(Sm(1.8, ["#A9D6D3"], 0)));
    ᐃΔ[694][ts.ⵠⵠⵠ].push(Sq(Sm(2, ["#A9D6D3"], 1)));
    ᐃΔ[694][ts.ⵠⵠⵠ].push(Sq(Sm(1.8, ["#A9D6D3"], 2)));
    ᐃΔ[694][ts.ⵠΔⵠ].push(Sq(Sm(1.8, ["#115E60"], 0)));
    ᐃΔ[694][ts.ⵠΔⵠ].push(Sq(Sm(2, ["#115E60"], 1)));
    ᐃΔ[694][ts.ⵠΔⵠ].push(Sq(Sm(1.8, ["#115E60"], 2)));
    ᐃΔ[695] = [];
    ᐃΔ[695][ts.ⵠⵠⵠ] = [];
    ᐃΔ[695][ts.ⵠΔⵠ] = [];
    ᐃΔ[695][ts.ⵠⵠⵠ].push(Sq(Sm(1.9, ["#2A8B9B"], 0)));
    ᐃΔ[695][ts.ⵠⵠⵠ].push(Sq(Sm(2.1, ["#2A8B9B"], 1)));
    ᐃΔ[695][ts.ⵠⵠⵠ].push(Sq(Sm(1.9, ["#2A8B9B"], 2)));
    ᐃΔ[695][ts.ⵠΔⵠ].push(Sq(Sm(1.9, ["#0F464C"], 0)));
    ᐃΔ[695][ts.ⵠΔⵠ].push(Sq(Sm(2.1, ["#0F464C"], 1)));
    ᐃΔ[695][ts.ⵠΔⵠ].push(Sq(Sm(1.9, ["#0F464C"], 2)));
    ᐃΔ[693] = [];
    ᐃΔ[693][ts.ⵠⵠⵠ] = [];
    ᐃΔ[693][ts.ⵠΔⵠ] = [];
    ᐃΔ[693][ts.ⵠⵠⵠ].push(Sq(yu(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][ts.ⵠⵠⵠ].push(Sq(yu(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][ts.ⵠⵠⵠ].push(Sq(yu(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][ts.ⵠΔⵠ].push(Sq(yu(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[693][ts.ⵠΔⵠ].push(Sq(yu(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[693][ts.ⵠΔⵠ].push(Sq(yu(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[637] = [];
    ᐃΔ[637][ts.ⵠⵠⵠ] = Sq(Vc(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ᐃΔ[637][ts.ⵠΔⵠ] = Sq(Vc(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ᐃΔ[687] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      Lb(d, b[0], b[0], a * 12);
      return c;
    }(0.8, ["#B6222A"]));
    ᐃΔ[673] = [];
    ᐃΔ[673][ts.ⵠⵠⵠ] = Sq(sp(0.8, Bh, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ᐃΔ[673][ts.ⵠΔⵠ] = Sq(sp(0.8, Bg, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ᐃΔ[688] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      Lb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      Lb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      Lb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      Lb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      Lb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      Lb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      Lb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      Lb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      Lb(d, b[0], b[0], a * 10);
      return c;
    }(0.8, ["#B6222A"]));
    ᐃΔ[902] = [];
    ᐃΔ[902][ts.ⵠⵠⵠ] = Sq(vd(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ᐃΔ[902][ts.ⵠΔⵠ] = Sq(vd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃΔ[903] = [];
    ᐃΔ[903][ts.ⵠⵠⵠ] = Sq(vd(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ᐃΔ[903][ts.ⵠΔⵠ] = Sq(vd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ᐃΔ[ts.ⵠⲆΔⵠᐃΔⵠ] = [];
    ᐃΔ[ts.ⵠⲆΔⵠᐃΔⵠ][ts.ⵠⵠⵠ] = Sq(vd(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ᐃΔ[ts.ⵠⲆΔⵠᐃΔⵠ][ts.ⵠΔⵠ] = Sq(vd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃΔ[904] = Sq(dd(0.4, ["#B6222A"]));
    ᐃΔ[905] = Sq(dd(0.4, ["#B6222A"]));
    ᐃΔ[ts.ⵠⵠⲆⵠΔⵠⵠΔⵠ] = Sq(dd(0.4, ["#B6222A"]));
    ᐃΔ[230] = Sq(Jm(0.35, pl, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ᐃΔ[229] = Sq(St(0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ᐃΔ[886] = [];
    ᐃΔ[886][ts.ⵠⵠⵠ] = Sq(Pt(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ᐃΔ[886][ts.ⵠΔⵠ] = Sq(Pt(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ᐃΔ[887] = [];
    ᐃΔ[887][ts.ⵠⵠⵠ] = Sq(Pt(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ᐃΔ[887][ts.ⵠΔⵠ] = Sq(Pt(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ᐃΔ[894] = [];
    ᐃΔ[894][ts.ⵠⵠⵠ] = Sq(Ot(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃΔ[894][ts.ⵠΔⵠ] = Sq(Ot(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃΔ[895] = [];
    ᐃΔ[895][ts.ⵠⵠⵠ] = Sq(Zt(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃΔ[895][ts.ⵠΔⵠ] = Sq(Zt(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃΔ[896] = [];
    ᐃΔ[896][ts.ⵠⵠⵠ] = Sq(Ot(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃΔ[896][ts.ⵠΔⵠ] = Sq(Ot(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃΔ[897] = [];
    ᐃΔ[897][ts.ⵠⵠⵠ] = Sq(Zt(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃΔ[897][ts.ⵠΔⵠ] = Sq(Zt(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃΔ[888] = Sq(Kt(0.35, ["#B6222A"]));
    ᐃΔ[889] = Sq(Ot(0.35, 0, [undefined, "#B6222A"]));
    ᐃΔ[890] = Sq(Zt(0.35, 0, [undefined, "#B6222A"]));
    ᐃΔ[891] = Sq(Kt(0.35, ["#22E066"]));
    ᐃΔ[892] = Sq(Ot(0.35, 0, [undefined, "#22E066"]));
    ᐃΔ[893] = Sq(Zt(0.35, 0, [_g, "#22E066"]));
    ᐃΔ[48] = [];
    ᐃΔ[48][ts.ⵠⵠⵠ] = Sq(ku(0.3, Qo, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ᐃΔ[48][ts.ⵠΔⵠ] = Sq(ku(0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ᐃΔ[47] = [];
    ᐃΔ[47][ts.ⵠⵠⵠ] = Sq(ru(0.45, Hh, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ᐃΔ[47][ts.ⵠΔⵠ] = Sq(ru(0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ᐃΔ[141] = [];
    ᐃΔ[141][ts.ⵠⵠⵠ] = Sq(Oc(0.63, Xa, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ᐃΔ[141][ts.ⵠΔⵠ] = Sq(Oc(0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃΔ[125] = [];
    ᐃΔ[125][ts.ⵠⵠⵠ] = Sq(Ac(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ᐃΔ[125][ts.ⵠΔⵠ] = Sq(Ac(1, is, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃΔ[221] = [];
    ᐃΔ[221][ts.ⵠⵠⵠ] = ΔΔ.ⲆⵠⲆΔᐃᐃⲆⵠᐃ;
    ᐃΔ[221][ts.ⵠΔⵠ] = ΔΔ.ΔΔᐃⲆⵠⵠᐃΔⲆ;
    ᐃΔ[190] = [];
    ᐃΔ[190][ts.ⵠⵠⵠ] = Sq(od(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[190][ts.ⵠΔⵠ] = Sq(od(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[853] = [ᐃΔ[190]];
    ᐃΔ[853][1] = [];
    ᐃΔ[853][2] = [];
    ᐃΔ[853][1][ts.ⵠⵠⵠ] = Sq(nd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[853][1][ts.ⵠΔⵠ] = Sq(nd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[853][2][ts.ⵠⵠⵠ] = Sq(gd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[853][2][ts.ⵠΔⵠ] = Sq(gd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[49] = [];
    ᐃΔ[49][ts.ⵠⵠⵠ] = Sq(Yb(3 - Math.PI / 2, Xm(0.6, Zq, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ᐃΔ[49][ts.ⵠΔⵠ] = Sq(Yb(3 - Math.PI / 2, Xm(0.6, ni, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ᐃΔ[728] = [];
    ᐃΔ[728][ts.ⵠⵠⵠ] = Sq(Dd(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ᐃΔ[728][ts.ⵠΔⵠ] = Sq(Dd(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ᐃΔ[798] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      Wb(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      Lb(d, b[4], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      Wb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      Lb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      Wb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      Lb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      Wb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Lb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      Wb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Lb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      Wb(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      Lb(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      Wb(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      Lb(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      Lb(d, Co, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      Lb(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      Lb(d, pa, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      Lb(d, Yq, b[1], a * 12);
      return c;
    }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ᐃΔ[729] = Sq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      Wb(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      Lb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      Wb(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      Lb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      Wb(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      Lb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      Wb(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      Lb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      Wb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      Lb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      Wb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      Lb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      Wb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Lb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      Wb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Lb(d, b[0], b[0], a * 12);
      return c;
    }(0.3, ["#BB0000"]));
    ᐃΔ[658] = jd(1, [{
      f: op,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[150] = jd(1.5, [{
      f: Hm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃΔ[669] = wc(0.35, ["#072428", "#67A242", "#67A242"], 0);
    ᐃΔ[670] = wc(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ᐃΔ[671] = wc(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ᐃΔ[672] = wc(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ⲆⵠⵠⲆⵠⵠⲆ) {
      ᐃΔ[278] = Sq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        Wb(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        Lb(d, "#1D6055");
        d.globalAlpha = 1;
        var a = gu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    } else {
      ᐃΔ[278] = Sq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + 20;
        d.beginPath();
        Wb(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        Lb(d, "#1D6055");
        d.globalAlpha = 1;
        var a = gu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    }
    if (ⲆⵠⵠⲆⵠⵠⲆ) {
      ᐃΔ[267] = Sq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var a = b * 20;
        var j = b * 35;
        var k = b * 65;
        var h = b * 2;
        var g = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, b * 15);
        Wb(d, k, 0, f, a, h);
        Lb(d, null, "#69A148", g);
        d.translate(0, j);
        Wb(d, k, 0, f, a, h);
        Lb(d, null, "#AF352A", g);
        d.translate(0, j);
        Wb(d, k, 0, f, a, h);
        Lb(d, null, "#669BB1", g);
        return c;
      }(0.75));
    } else {
      ᐃΔ[267] = Sq(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var a = c * 20;
        var k = c * 240;
        var m = c * 35;
        var h = c * 1;
        var g = c * 4;
        var l = c * 4;
        d.width = f;
        d.height = j;
        e.translate(0, c * 15);
        Wb(e, m, h, i, a, g);
        Lb(e, null, "#69A148", l);
        var n = ᐃΔ[669];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        Wb(e, m, h, i, a, g);
        Lb(e, null, "#AF352A", l);
        n = ᐃΔ[671];
        e.drawImage(n, 17, -9);
        e.translate(k, 0);
        Wb(e, m, h, i, a, g);
        Lb(e, null, "#669BB1", l);
        n = ᐃΔ[670];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        Wb(e, m, h, i, a, g);
        Lb(e, null, "#074A87", l);
        n = ᐃΔ[672];
        e.drawImage(n, 17, -8);
        return d;
      }(1));
    }
    if (ⲆⵠⵠⲆⵠⵠⲆ) {
      ᐃΔ[608] = Sq(Gc(0.75));
    } else {
      ᐃΔ[608] = Sq(Gc(1));
    }
    ᐃΔ[792] = Sq(Fm(0.16, is, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ᐃΔ[537] = Sq(Yb(5.8, Vt(0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ᐃΔ[283] = [];
    ᐃΔ[465] = [];
    for (a = 0; a < 18; a++) {
      ᐃΔ[465][a] = gu(1, "" + (a + 1), 12, "#FFF");
    }
    ᐃΔ[708] = [];
    ᐃΔ[708].push(Sq(gc(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ᐃΔ[708].push(Sq(gc(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ᐃΔ[708].push(Sq(gc(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ᐃΔ[725] = [];
    ᐃΔ[725].push(Sq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      jb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Lb(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      jb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Lb(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      Lb(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      Lb(c, "#3A2A0D");
      jb(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      Lb(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      Lb(c, undefined, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Lb(c, Ya, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Lb(c, Wh, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Lb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Lb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Lb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Lb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Lb(c, Wh, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Lb(c, xs, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Lb(c, _g, "#c7a726", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Lb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Lb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Lb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Lb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Lb(c, Tj, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Lb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Lb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Lb(c, Yq, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Lb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      Lb(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      Lb(c, "#ECBE35", "#EDCE4F", a * 8);
      jb(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      Lb(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ᐃΔ[725].push(Sq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      jb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Lb(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      jb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Lb(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      Lb(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      Lb(c, "#071A1B");
      jb(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      Lb(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      Lb(c, undefined, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Lb(c, Yq, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Lb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Lb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Lb(c, Wh, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Lb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Lb(c, El, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Lb(c, ij, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Lb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Lb(c, undefined, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Lb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Lb(c, El, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Lb(c, ag, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Lb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Lb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Lb(c, qn, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Lb(c, _g, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Lb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Lb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      Lb(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      Lb(c, "#E1DDD5", "#EAE7E4", a * 8);
      jb(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      Lb(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ᐃΔ[726] = Sq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      jb(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      Lb(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      Lb(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      Wb(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      Lb(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      Wb(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
      c.restore();
      Lb(c, "#C09D6F");
      jb(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      Lb(c, "#C09D6F");
      return b;
    }(0.22));
    ᐃΔ[727] = [];
    ᐃΔ[727].push(Sq(cd(1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ᐃΔ[727].push(Sq(cd(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ᐃΔ[727].push(Sq(cd(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ᐃΔ[546] = ΔΔ.ᐃᐃⲆⲆⵠᐃᐃ;
    ᐃΔ[547] = ΔΔ.ᐃⵠⲆⲆᐃⵠΔ;
    ᐃΔ[548] = ΔΔ.ⵠΔⵠΔΔⵠᐃ;
    ᐃΔ[549] = ΔΔ.ΔⵠⵠⵠⵠⲆⵠ;
    ᐃΔ[517] = gu(1, "Show spectators", 25, "#FFF", ij, undefined, "#000", 5, 220);
    ᐃΔ[525] = gu(1, "Reconnecting...", 30, "#FFF");
    console.log(_g, ir);
  }
  function Hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(0, a * 10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    Lb(e, c[0]);
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    Lb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    Lb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    Lb(e, ij, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    Lb(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    Lb(e, lg, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    Lb(e, c[3]);
    return d;
  }
  function Um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    Hb(e, 6, a * 43, a * 10);
    e.restore();
    Lb(e, c[0], c[1], a * 3);
    return d;
  }
  function Ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    Wb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    Lb(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    Wb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    Lb(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    Wb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    Lb(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    Wb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    Lb(e, c[2]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    Wb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    Lb(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    Wb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    Lb(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    Wb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    Lb(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    Wb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    Lb(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    Wb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    Lb(e, qn, c[4], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    Wb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    Lb(e, El, c[4], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    Wb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    Lb(e, El, c[4], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    Wb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    Lb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    Lb(e, Yj, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    Hb(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    Lb(e, c[2]);
    e.save();
    e.translate(a * 98, a * 99);
    Hb(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    Lb(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    Hb(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    Lb(e, c[5], c[6], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    Hb(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    Lb(e, c[7], c[8], a * 7);
    return d;
  }
  function Km(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    Wb(d, a * -7, a * -20, a * 14, a * 39, a * 20);
    d.restore();
    Lb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    Wb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
    d.restore();
    Lb(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    Wb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    Lb(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    Wb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    Lb(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    Wb(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    Lb(d, b[3], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    Wb(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    Lb(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    Wb(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    Lb(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    Wb(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    Lb(d, b[3], b[2], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    Wb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    Lb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    Wb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    Lb(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    Wb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    Lb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    Wb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    Lb(d, b[2]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    Wb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    Lb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    Wb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    Lb(d, b[2]);
    return c;
  }
  function Vm(a) {
    return Ph.String.fromCharCode(a);
  }
  function Xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Wb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    Lb(e, c[0]);
    jb(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Wb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    Lb(e, eg, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    Lb(e, Co, c[3], a * 6);
    jb(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    Lb(e, ie, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Wb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    Lb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    Lb(e, c[1]);
    jb(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    Lb(e, c[2], c[1], a * 4);
    jb(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    Lb(e, c[3], c[1], a * 4);
    jb(e, a * 78, a * 44, a * 20);
    Lb(e, c[4]);
    return d;
  }
  function Zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    Lb(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    Lb(e, undefined, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    Lb(e, c[0], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    Lb(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    Lb(e, c[2], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    Lb(e, c[0], c[1], a * 20);
    return d;
  }
  function $m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    Lb(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    Lb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    Lb(e, c[4], c[5], a * 6);
    return d;
  }
  function ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = 0.3;
    jb(e, a * 98, a * 99, a * 100);
    Lb(e, c[0]);
    e.globalAlpha = 0.5;
    jb(e, a * 98, a * 99, a * 90);
    Lb(e, c[1]);
    return d;
  }
  function ic() {
    new Date().getTime();
    function b(a) {
      var b = 0;
      for (var c = 0, d = 0; a.length > c; c++) {
        var e = a.charAt(c);
        if (e !== "_" && c !== 5) {
          if (e === "1") {
            b += Math.pow(2, d);
          }
          d++;
        }
      }
      return b;
    }
    ᐃⲆⲆᐃⲆⲆΔᐃⵠ();
    ᐃΔ[1026] = [ΔΔ.ΔᐃⵠᐃᐃᐃΔ, ΔΔ.ⵠᐃⲆΔⲆⵠⲆ];
    ᐃΔ[1025] = [];
    ᐃΔ[1025][ts.ⵠⵠⵠ] = [];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_010_000")] = [ΔΔ.ᐃΔΔΔΔ, ΔΔ.ⲆΔⵠᐃᐃ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_010_010")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_010_000")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_011_000")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_010_000")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_011_010")] = [ΔΔ.ⵠΔⵠⲆΔ, ΔΔ.ᐃⵠᐃΔᐃ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ⵠⲆΔΔΔⵠⲆ, ΔΔ.ᐃΔΔᐃΔᐃⲆ, ΔΔ.ⲆⲆⵠⵠΔⵠⵠ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_011_011")] = [ΔΔ.ⲆⵠᐃΔᐃᐃᐃ, ΔΔ.ⵠΔⵠⲆΔ, ΔΔ.ᐃⵠᐃΔᐃ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ⵠⲆΔΔΔⵠⲆ, ΔΔ.ᐃΔΔᐃΔᐃⲆ, ΔΔ.ⲆⲆⵠⵠΔⵠⵠ, ΔΔ.ᐃᐃᐃⵠΔ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_110_000")] = [ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ⲆΔⵠᐃᐃ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_110_010")] = [ΔΔ.ΔⲆⵠⲆΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ᐃᐃᐃⵠΔ, ΔΔ.ᐃⵠⲆⵠⲆ, ΔΔ.ᐃⵠΔⲆΔΔⵠ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_110_110")] = [ΔΔ.ΔⲆⵠⲆΔ, ΔΔ.ΔⵠΔⵠᐃⵠᐃ, ΔΔ.ⲆᐃⵠᐃⵠⲆΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃᐃᐃⵠΔ, ΔΔ.ᐃⵠⲆⵠⲆ, ΔΔ.ᐃⵠΔⲆΔΔⵠ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_111_000")] = [ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆᐃⲆΔᐃⵠⵠ, ΔΔ.ΔΔΔᐃⵠΔⵠ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_111_111")] = [ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ⲆᐃⵠᐃⵠⲆΔ, ΔΔ.ΔⲆⵠⲆΔ, ΔΔ.ᐃⵠᐃΔᐃ, ΔΔ.ⵠΔⵠⲆΔ, ΔΔ.ⲆⵠᐃΔᐃᐃᐃ, ΔΔ.ⲆⵠᐃᐃᐃⲆΔ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_010_000")] = [ΔΔ.ⲆΔⵠᐃᐃ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_010_010")] = [ΔΔ.ΔΔⵠᐃᐃⲆΔ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_011_000")] = [ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ᐃⵠⲆⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_000")] = [ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃⵠⲆⵠⲆ, ΔΔ.ⲆⲆⵠⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")] = [ΔΔ.ΔΔⵠⲆᐃ, ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ⵠΔⵠⲆΔ, ΔΔ.ᐃⵠᐃΔᐃ, ΔΔ.ΔⲆⵠⲆΔ, ΔΔ.ⲆᐃⵠᐃⵠⲆΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ⲆⵠᐃᐃᐃⲆΔ, ΔΔ.ⲆⲆᐃⵠⲆΔΔ, ΔΔ.ΔΔⵠᐃᐃⲆΔ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆᐃⲆΔᐃⵠⵠ, ΔΔ.ΔΔΔᐃⵠΔⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ⵠⲆΔΔΔⵠⲆ, ΔΔ.ᐃΔΔᐃΔᐃⲆ, ΔΔ.ⲆⲆⵠⵠΔⵠⵠ, ΔΔ.ᐃᐃᐃⵠΔ, ΔΔ.ᐃⵠⲆⵠⲆ, ΔΔ.ⲆⲆⵠⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_011_010")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_011_011")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_111_011")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_010")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_111_000")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_111_010")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_111_011")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_111_110")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_111_111")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_111_110")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("000_111_010")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("011_011_000")] = [ΔΔ.ⵠᐃΔᐃⵠᐃΔ, ΔΔ.ΔΔⵠⲆᐃ, ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ᐃⵠⲆⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("011_011_010")] = [ΔΔ.ⵠᐃΔᐃⵠᐃΔ, ΔΔ.ΔΔⵠⲆᐃ, ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆᐃⲆΔᐃⵠⵠ, ΔΔ.ΔΔΔᐃⵠΔⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ᐃⵠⲆⵠⲆ, ΔΔ.ⲆⲆⵠⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("011_011_011")] = [ΔΔ.ᐃⵠᐃΔᐃ, ΔΔ.ⵠΔⵠⲆΔ, ΔΔ.ⲆⵠᐃΔᐃᐃᐃ, ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ΔΔⵠⲆᐃ, ΔΔ.ⵠᐃΔᐃⵠᐃΔ, ΔΔ.ⲆⲆᐃⵠⲆΔΔ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("011_111_000")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("011_011_010")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("011_111_010")] = [ΔΔ.ⵠᐃΔᐃⵠᐃΔ, ΔΔ.ΔΔⵠⲆᐃ, ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ⵠΔⵠⲆΔ, ΔΔ.ᐃⵠᐃΔᐃ, ΔΔ.ΔⲆⵠⲆΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ⲆⵠᐃᐃᐃⲆΔ, ΔΔ.ⲆⲆᐃⵠⲆΔΔ, ΔΔ.ΔΔⵠᐃᐃⲆΔ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆᐃⲆΔᐃⵠⵠ, ΔΔ.ΔΔΔᐃⵠΔⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ⵠⲆΔΔΔⵠⲆ, ΔΔ.ᐃΔΔᐃΔᐃⲆ, ΔΔ.ⲆⲆⵠⵠΔⵠⵠ, ΔΔ.ᐃᐃᐃⵠΔ, ΔΔ.ᐃⵠⲆⵠⲆ, ΔΔ.ⲆⲆⵠⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("011_111_011")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("011_111_010")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("011_111_110")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("011_111_010")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("011_111_111")] = [ΔΔ.ⵠᐃΔᐃⵠᐃΔ, ΔΔ.ΔΔⵠⲆᐃ, ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ⲆⵠᐃΔᐃᐃᐃ, ΔΔ.ⵠΔⵠⲆΔ, ΔΔ.ᐃⵠᐃΔᐃ, ΔΔ.ΔⲆⵠⲆΔ, ΔΔ.ⲆᐃⵠᐃⵠⲆΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ⲆⵠᐃᐃᐃⲆΔ, ΔΔ.ⲆⲆᐃⵠⲆΔΔ, ΔΔ.ΔΔⵠᐃᐃⲆΔ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆᐃⲆΔᐃⵠⵠ, ΔΔ.ΔΔΔᐃⵠΔⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ⵠⲆΔΔΔⵠⲆ, ΔΔ.ᐃΔΔᐃΔᐃⲆ, ΔΔ.ⲆⲆⵠⵠΔⵠⵠ, ΔΔ.ᐃᐃᐃⵠΔ, ΔΔ.ᐃⵠⲆⵠⲆ, ΔΔ.ⲆⲆⵠⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("110_110_000")] = [ΔΔ.ⵠᐃⲆΔⵠᐃΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ΔⵠⵠⵠⵠΔⲆ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ⲆⲆⵠⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("110_110_010")] = [ΔΔ.ΔⲆⵠⲆΔ, ΔΔ.ⵠᐃⲆΔⵠᐃΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ΔΔⵠᐃᐃⲆΔ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃᐃᐃⵠΔ, ΔΔ.ⲆⲆⵠⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("110_110_110")] = [ΔΔ.ΔⲆⵠⲆΔ, ΔΔ.ⲆᐃⵠᐃⵠⲆΔ, ΔΔ.ⵠᐃⲆΔⵠᐃΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ΔΔⵠᐃᐃⲆΔ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃᐃᐃⵠΔ, ΔΔ.ⲆⲆⵠⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("110_111_000")] = [ΔΔ.ΔΔⵠⲆᐃ, ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ⵠᐃⲆΔⵠᐃΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ΔⵠⵠⵠⵠΔⲆ, ΔΔ.ΔᐃⲆⵠⲆⵠⵠ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆᐃⲆΔᐃⵠⵠ, ΔΔ.ΔΔΔᐃⵠΔⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ᐃⵠⲆⵠⲆ, ΔΔ.ⲆⲆⵠⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("110_111_110")] = [ΔΔ.ΔΔⵠⲆᐃ, ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ⵠΔⵠⲆΔ, ΔΔ.ᐃⵠᐃΔᐃ, ΔΔ.ΔⲆⵠⲆΔ, ΔΔ.ⲆᐃⵠᐃⵠⲆΔ, ΔΔ.ⵠᐃⲆΔⵠᐃΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ⲆⵠᐃᐃᐃⲆΔ, ΔΔ.ΔᐃⲆⵠⲆⵠⵠ, ΔΔ.ⲆⲆᐃⵠⲆΔΔ, ΔΔ.ΔΔⵠᐃᐃⲆΔ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆᐃⲆΔᐃⵠⵠ, ΔΔ.ΔΔΔᐃⵠΔⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ⵠⲆΔΔΔⵠⲆ, ΔΔ.ᐃΔΔᐃΔᐃⲆ, ΔΔ.ⲆⲆⵠⵠΔⵠⵠ, ΔΔ.ᐃᐃᐃⵠΔ, ΔΔ.ᐃⵠⲆⵠⲆ, ΔΔ.ⲆⲆⵠⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("110_111_111")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("110_111_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("110_111_011")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("110_111_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("110_111_010")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("110_111_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("111_111_110")] = [ΔΔ.ⲆⲆⵠⵠⲆ, ΔΔ.ᐃⵠⲆⵠⲆ, ΔΔ.ᐃᐃᐃⵠΔ, ΔΔ.ⲆⲆⵠⵠΔⵠⵠ, ΔΔ.ᐃΔΔᐃΔᐃⲆ, ΔΔ.ⵠⲆΔΔΔⵠⲆ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ΔΔΔᐃⵠΔⵠ, ΔΔ.ⲆᐃⲆΔᐃⵠⵠ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ΔΔⵠᐃᐃⲆΔ, ΔΔ.ⲆⲆᐃⵠⲆΔΔ, ΔΔ.ΔᐃⲆⵠⲆⵠⵠ, ΔΔ.ⲆⵠᐃᐃᐃⲆΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ⵠᐃⲆΔⵠᐃΔ, ΔΔ.ΔⲆⵠⲆΔ, ΔΔ.ᐃⵠᐃΔᐃ, ΔΔ.ⵠΔⵠⲆΔ, ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ΔΔⵠⲆᐃ, ΔΔ.ⵠᐃΔᐃⵠᐃΔ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("111_111_011")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("111_111_110")];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("111_111_000")] = [ΔΔ.ΔⵠⵠⵠⵠΔⲆ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ⵠᐃⲆΔⵠᐃΔ, ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ΔΔⵠⲆᐃ, ΔΔ.ⵠᐃΔᐃⵠᐃΔ, ΔΔ.ΔᐃⲆⵠⲆⵠⵠ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("111_111_111")] = [ΔΔ.ⵠᐃΔᐃⵠᐃΔ, ΔΔ.ΔΔⵠⲆᐃ, ΔΔ.ᐃⲆⵠΔⵠ, ΔΔ.ⲆⵠᐃΔᐃᐃᐃ, ΔΔ.ⵠΔⵠⲆΔ, ΔΔ.ᐃⵠᐃΔᐃ, ΔΔ.ΔⲆⵠⲆΔ, ΔΔ.ⲆᐃⵠᐃⵠⲆΔ, ΔΔ.ⵠᐃⲆΔⵠᐃΔ, ΔΔ.ΔΔᐃΔⵠ, ΔΔ.ⲆⵠᐃᐃᐃⲆΔ, ΔΔ.ⲆⲆᐃⵠⲆΔΔ, ΔΔ.ΔΔⵠᐃᐃⲆΔ, ΔΔ.ᐃⲆⲆⵠⵠ, ΔΔ.ⲆᐃⲆΔᐃⵠⵠ, ΔΔ.ΔΔΔᐃⵠΔⵠ, ΔΔ.ⲆΔⵠᐃᐃ, ΔΔ.ᐃΔΔΔΔ, ΔΔ.ⵠⲆΔΔΔⵠⲆ, ΔΔ.ᐃΔΔᐃΔᐃⲆ, ΔΔ.ⲆⲆⵠⵠΔⵠⵠ, ΔΔ.ᐃᐃᐃⵠΔ, ΔΔ.ᐃⵠⲆⵠⲆ, ΔΔ.ⲆⲆⵠⵠⲆ];
    ᐃΔ[1025][ts.ⵠⵠⵠ][b("111_111_010")] = ᐃΔ[1025][ts.ⵠⵠⵠ][b("111_111_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ] = [];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_010_000")] = [ΔΔ.ΔΔΔΔΔ, ΔΔ.ᐃᐃᐃⵠⵠ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_010_010")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("000_010_000")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_011_000")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("000_010_000")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_011_010")] = [ΔΔ.ᐃⲆⵠᐃⲆ, ΔΔ.ᐃⲆᐃᐃⲆ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ΔᐃⲆᐃᐃⲆⵠ, ΔΔ.ⲆⲆᐃⲆⵠΔⲆ, ΔΔ.ⵠΔᐃⲆⵠⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_011_011")] = [ΔΔ.ⲆⲆᐃΔΔⲆⵠ, ΔΔ.ᐃⲆⵠᐃⲆ, ΔΔ.ᐃⲆᐃᐃⲆ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ΔᐃⲆᐃᐃⲆⵠ, ΔΔ.ⲆⲆᐃⲆⵠΔⲆ, ΔΔ.ⵠΔᐃⲆⵠⲆᐃ, ΔΔ.ⲆΔⲆⵠᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_110_000")] = [ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ᐃᐃᐃⵠⵠ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_110_010")] = [ΔΔ.ΔⲆⵠΔΔ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ⲆΔⲆⵠᐃ, ΔΔ.ⲆⲆⵠⲆⵠ, ΔΔ.ᐃⵠᐃⵠⲆᐃᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_110_110")] = [ΔΔ.ΔⲆⵠΔΔ, ΔΔ.ⲆⲆⵠᐃⲆⲆⵠ, ΔΔ.ⵠⲆᐃⲆᐃⵠΔ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ⲆΔⲆⵠᐃ, ΔΔ.ⲆⲆⵠⲆⵠ, ΔΔ.ᐃⵠᐃⵠⲆᐃᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_111_000")] = [ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ⲆⵠⵠΔⲆⵠᐃ, ΔΔ.ᐃⵠΔΔⵠΔᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_111_111")] = [ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠⲆᐃⲆᐃⵠΔ, ΔΔ.ΔⲆⵠΔΔ, ΔΔ.ᐃⲆᐃᐃⲆ, ΔΔ.ᐃⲆⵠᐃⲆ, ΔΔ.ⲆⲆᐃΔΔⲆⵠ, ΔΔ.ᐃⲆΔⵠᐃⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_010_000")] = [ΔΔ.ᐃᐃᐃⵠⵠ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_010_010")] = [ΔΔ.ⵠΔΔⵠΔΔΔ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_011_000")] = [ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ⲆⲆⵠⲆⵠ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_000")] = [ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ⲆⲆⵠⲆⵠ, ΔΔ.ᐃᐃΔⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")] = [ΔΔ.ⲆᐃΔᐃⵠ, ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ᐃⲆⵠᐃⲆ, ΔΔ.ᐃⲆᐃᐃⲆ, ΔΔ.ΔⲆⵠΔΔ, ΔΔ.ⵠⲆᐃⲆᐃⵠΔ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ᐃⲆΔⵠᐃⲆᐃ, ΔΔ.ⵠᐃⲆⵠᐃΔᐃ, ΔΔ.ⵠΔΔⵠΔΔΔ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ⲆⵠⵠΔⲆⵠᐃ, ΔΔ.ᐃⵠΔΔⵠΔᐃ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ΔᐃⲆᐃᐃⲆⵠ, ΔΔ.ⲆⲆᐃⲆⵠΔⲆ, ΔΔ.ⵠΔᐃⲆⵠⲆᐃ, ΔΔ.ⲆΔⲆⵠᐃ, ΔΔ.ⲆⲆⵠⲆⵠ, ΔΔ.ᐃᐃΔⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_011_010")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_011_011")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_111_011")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_010")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_111_000")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_111_010")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_111_011")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_111_110")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("010_111_111")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_111_110")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("000_111_010")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("011_011_000")] = [ΔΔ.ᐃⵠⲆΔΔΔᐃ, ΔΔ.ⲆᐃΔᐃⵠ, ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ⲆⲆⵠⲆⵠ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("011_011_010")] = [ΔΔ.ᐃⵠⲆΔΔΔᐃ, ΔΔ.ⲆᐃΔᐃⵠ, ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ⲆⵠⵠΔⲆⵠᐃ, ΔΔ.ᐃⵠΔΔⵠΔᐃ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ⲆⲆⵠⲆⵠ, ΔΔ.ᐃᐃΔⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("011_011_011")] = [ΔΔ.ᐃⲆᐃᐃⲆ, ΔΔ.ᐃⲆⵠᐃⲆ, ΔΔ.ⲆⲆᐃΔΔⲆⵠ, ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ⲆᐃΔᐃⵠ, ΔΔ.ᐃⵠⲆΔΔΔᐃ, ΔΔ.ⵠᐃⲆⵠᐃΔᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("011_111_000")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("011_011_010")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("011_111_010")] = [ΔΔ.ᐃⵠⲆΔΔΔᐃ, ΔΔ.ⲆᐃΔᐃⵠ, ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ᐃⲆⵠᐃⲆ, ΔΔ.ᐃⲆᐃᐃⲆ, ΔΔ.ΔⲆⵠΔΔ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ᐃⲆΔⵠᐃⲆᐃ, ΔΔ.ⵠᐃⲆⵠᐃΔᐃ, ΔΔ.ⵠΔΔⵠΔΔΔ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ⲆⵠⵠΔⲆⵠᐃ, ΔΔ.ᐃⵠΔΔⵠΔᐃ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ΔᐃⲆᐃᐃⲆⵠ, ΔΔ.ⲆⲆᐃⲆⵠΔⲆ, ΔΔ.ⵠΔᐃⲆⵠⲆᐃ, ΔΔ.ⲆΔⲆⵠᐃ, ΔΔ.ⲆⲆⵠⲆⵠ, ΔΔ.ᐃᐃΔⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("011_111_011")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("011_111_010")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("011_111_110")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("011_111_010")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("011_111_111")] = [ΔΔ.ᐃⵠⲆΔΔΔᐃ, ΔΔ.ⲆᐃΔᐃⵠ, ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ⲆⲆᐃΔΔⲆⵠ, ΔΔ.ᐃⲆⵠᐃⲆ, ΔΔ.ᐃⲆᐃᐃⲆ, ΔΔ.ΔⲆⵠΔΔ, ΔΔ.ⵠⲆᐃⲆᐃⵠΔ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ᐃⲆΔⵠᐃⲆᐃ, ΔΔ.ⵠᐃⲆⵠᐃΔᐃ, ΔΔ.ⵠΔΔⵠΔΔΔ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ⲆⵠⵠΔⲆⵠᐃ, ΔΔ.ᐃⵠΔΔⵠΔᐃ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ΔᐃⲆᐃᐃⲆⵠ, ΔΔ.ⲆⲆᐃⲆⵠΔⲆ, ΔΔ.ⵠΔᐃⲆⵠⲆᐃ, ΔΔ.ⲆΔⲆⵠᐃ, ΔΔ.ⲆⲆⵠⲆⵠ, ΔΔ.ᐃᐃΔⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("110_110_000")] = [ΔΔ.ⵠᐃᐃᐃⵠⲆⵠ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠⲆⲆΔᐃᐃΔ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ᐃᐃΔⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("110_110_010")] = [ΔΔ.ΔⲆⵠΔΔ, ΔΔ.ⵠᐃᐃᐃⵠⲆⵠ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠΔΔⵠΔΔΔ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ⲆΔⲆⵠᐃ, ΔΔ.ᐃᐃΔⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("110_110_110")] = [ΔΔ.ΔⲆⵠΔΔ, ΔΔ.ⵠⲆᐃⲆᐃⵠΔ, ΔΔ.ⵠᐃᐃᐃⵠⲆⵠ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠΔΔⵠΔΔΔ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ⲆΔⲆⵠᐃ, ΔΔ.ᐃᐃΔⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("110_111_000")] = [ΔΔ.ⲆᐃΔᐃⵠ, ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ⵠᐃᐃᐃⵠⲆⵠ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠⲆⲆΔᐃᐃΔ, ΔΔ.ⲆΔᐃΔⲆⵠⵠ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ⲆⵠⵠΔⲆⵠᐃ, ΔΔ.ᐃⵠΔΔⵠΔᐃ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ⲆⲆⵠⲆⵠ, ΔΔ.ᐃᐃΔⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("110_111_110")] = [ΔΔ.ⲆᐃΔᐃⵠ, ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ᐃⲆⵠᐃⲆ, ΔΔ.ᐃⲆᐃᐃⲆ, ΔΔ.ΔⲆⵠΔΔ, ΔΔ.ⵠⲆᐃⲆᐃⵠΔ, ΔΔ.ⵠᐃᐃᐃⵠⲆⵠ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ᐃⲆΔⵠᐃⲆᐃ, ΔΔ.ⲆΔᐃΔⲆⵠⵠ, ΔΔ.ⵠᐃⲆⵠᐃΔᐃ, ΔΔ.ⵠΔΔⵠΔΔΔ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ⲆⵠⵠΔⲆⵠᐃ, ΔΔ.ᐃⵠΔΔⵠΔᐃ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ΔᐃⲆᐃᐃⲆⵠ, ΔΔ.ⲆⲆᐃⲆⵠΔⲆ, ΔΔ.ⵠΔᐃⲆⵠⲆᐃ, ΔΔ.ⲆΔⲆⵠᐃ, ΔΔ.ⲆⲆⵠⲆⵠ, ΔΔ.ᐃᐃΔⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("110_111_111")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("110_111_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("110_111_011")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("110_111_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("110_111_010")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("110_111_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("111_111_110")] = [ΔΔ.ᐃᐃΔⲆᐃ, ΔΔ.ⲆⲆⵠⲆⵠ, ΔΔ.ⲆΔⲆⵠᐃ, ΔΔ.ⵠΔᐃⲆⵠⲆᐃ, ΔΔ.ⲆⲆᐃⲆⵠΔⲆ, ΔΔ.ΔᐃⲆᐃᐃⲆⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ᐃⵠΔΔⵠΔᐃ, ΔΔ.ⲆⵠⵠΔⲆⵠᐃ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ⵠΔΔⵠΔΔΔ, ΔΔ.ⵠᐃⲆⵠᐃΔᐃ, ΔΔ.ⲆΔᐃΔⲆⵠⵠ, ΔΔ.ᐃⲆΔⵠᐃⲆᐃ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠᐃᐃᐃⵠⲆⵠ, ΔΔ.ΔⲆⵠΔΔ, ΔΔ.ᐃⲆᐃᐃⲆ, ΔΔ.ᐃⲆⵠᐃⲆ, ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ⲆᐃΔᐃⵠ, ΔΔ.ᐃⵠⲆΔΔΔᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("111_111_011")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("111_111_110")];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("111_111_000")] = [ΔΔ.ⵠⲆⲆΔᐃᐃΔ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ⵠᐃᐃᐃⵠⲆⵠ, ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ⲆᐃΔᐃⵠ, ΔΔ.ᐃⵠⲆΔΔΔᐃ, ΔΔ.ⲆΔᐃΔⲆⵠⵠ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("111_111_111")] = [ΔΔ.ᐃⵠⲆΔΔΔᐃ, ΔΔ.ⲆᐃΔᐃⵠ, ΔΔ.ⵠΔⲆⵠⵠ, ΔΔ.ⲆⲆᐃΔΔⲆⵠ, ΔΔ.ᐃⲆⵠᐃⲆ, ΔΔ.ᐃⲆᐃᐃⲆ, ΔΔ.ΔⲆⵠΔΔ, ΔΔ.ⵠⲆᐃⲆᐃⵠΔ, ΔΔ.ⵠᐃᐃᐃⵠⲆⵠ, ΔΔ.ΔⲆᐃⲆᐃ, ΔΔ.ᐃⲆΔⵠᐃⲆᐃ, ΔΔ.ⵠᐃⲆⵠᐃΔᐃ, ΔΔ.ⵠΔΔⵠΔΔΔ, ΔΔ.ⵠⲆⲆᐃⲆ, ΔΔ.ⲆⵠⵠΔⲆⵠᐃ, ΔΔ.ᐃⵠΔΔⵠΔᐃ, ΔΔ.ᐃᐃᐃⵠⵠ, ΔΔ.ΔΔΔΔΔ, ΔΔ.ΔᐃⲆᐃᐃⲆⵠ, ΔΔ.ⲆⲆᐃⲆⵠΔⲆ, ΔΔ.ⵠΔᐃⲆⵠⲆᐃ, ΔΔ.ⲆΔⲆⵠᐃ, ΔΔ.ⲆⲆⵠⲆⵠ, ΔΔ.ᐃᐃΔⲆᐃ];
    ᐃΔ[1025][ts.ⵠΔⵠ][b("111_111_010")] = ᐃΔ[1025][ts.ⵠΔⵠ][b("111_111_110")];
    ᐃΔ[1024] = [];
    ᐃΔ[1024][ts.ⵠⵠⵠ] = [];
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_010_000")] = ΔΔ.ᐃⵠⵠΔᐃΔΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_010_010")] = ΔΔ.ⵠᐃⲆⲆΔᐃⲆ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_011_000")] = ΔΔ.ⵠⲆΔΔᐃⵠΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_011_010")] = ΔΔ.ⲆᐃⵠⵠⵠⲆⵠ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_011_011")] = ΔΔ.ⲆⲆᐃⵠᐃⵠⲆ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_110_000")] = ΔΔ.ΔⲆⵠⲆΔᐃⲆ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_110_010")] = ΔΔ.ᐃⵠΔⲆⵠΔⵠ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_110_110")] = ΔΔ.ⵠᐃΔⵠⵠΔᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_111_000")] = ΔΔ.ⵠΔΔⵠⲆᐃΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_111_010")] = ΔΔ.ᐃΔΔᐃⲆᐃⵠ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_111_011")] = ΔΔ.ⵠⲆᐃⵠΔⵠⵠ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_111_110")] = ΔΔ.ΔΔⵠⲆΔⵠΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("000_111_111")] = ΔΔ.ⵠⲆᐃⲆⵠΔⵠ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_010_000")] = ΔΔ.ᐃΔⵠⲆᐃⲆᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_010_010")] = ΔΔ.ⵠⲆΔⵠΔⵠᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_011_000")] = ΔΔ.ΔⵠⵠⲆᐃᐃᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_011_010")] = ΔΔ.ⵠⲆΔᐃᐃΔΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_011_011")] = ΔΔ.ᐃΔᐃᐃⵠΔΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_110_000")] = ΔΔ.ⵠⵠⲆⲆⲆΔⵠ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_110_010")] = ΔΔ.ⵠⵠⲆΔᐃᐃⲆ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_110_110")] = ΔΔ.Ⲇⵠⵠⵠᐃⵠⵠ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_111_000")] = ΔΔ.ΔᐃΔⲆᐃΔⲆ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_111_010")] = ΔΔ.ⵠᐃⲆⲆᐃⵠⲆ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_111_011")] = ΔΔ.ⲆⵠΔⲆⵠⵠⲆ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_111_110")] = ΔΔ.ⵠⲆⵠΔΔᐃᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("010_111_111")] = ΔΔ.ⲆⵠⵠΔⲆⲆᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("011_011_000")] = ΔΔ.ⵠⵠⲆᐃⵠΔΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("011_011_010")] = ΔΔ.ΔᐃᐃⲆⵠⵠⵠ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("011_011_011")] = ΔΔ.ᐃⵠΔᐃΔΔᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("011_111_000")] = ΔΔ.ⵠᐃΔΔᐃΔⲆ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("011_111_010")] = ΔΔ.ⲆⵠⵠⵠⵠⲆⵠ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("011_111_011")] = ΔΔ.ΔⲆΔⵠⵠⵠᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("011_111_110")] = ΔΔ.ⵠⵠΔⲆⵠᐃⵠ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("011_111_111")] = ΔΔ.ΔᐃᐃⲆΔⵠⲆ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("110_110_000")] = ΔΔ.ⵠᐃⵠΔⵠⲆⲆ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("110_110_010")] = ΔΔ.ΔⲆⵠΔΔΔᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("110_110_110")] = ΔΔ.ⵠⲆⵠⲆᐃΔⵠ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("110_111_000")] = ΔΔ.ⲆᐃⲆⲆᐃΔΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("110_111_010")] = ΔΔ.ᐃᐃⵠⵠⲆⲆᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("110_111_011")] = ΔΔ.ΔⵠⵠΔΔⵠΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("110_111_110")] = ΔΔ.ⲆⵠⵠᐃⲆᐃᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("110_111_111")] = ΔΔ.ⵠⵠⵠΔΔⵠΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("111_111_011")] = ΔΔ.ΔⵠⲆⲆΔᐃᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("111_111_110")] = ΔΔ.ΔⵠᐃΔᐃⵠⲆ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("111_111_011")] = ΔΔ.ΔⵠⲆⲆΔᐃᐃ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("111_111_000")] = ΔΔ.ⲆΔⵠᐃⲆⲆΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("111_111_111")] = ΔΔ.ᐃⲆᐃⲆΔΔΔ;
    ᐃΔ[1024][ts.ⵠⵠⵠ][b("111_111_010")] = ΔΔ.ⵠⲆⲆᐃᐃᐃⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ] = [];
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_010_000")] = ΔΔ.ᐃⵠᐃⲆᐃⵠᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_010_010")] = ΔΔ.ⵠΔⲆΔΔᐃⲆ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_011_000")] = ΔΔ.ΔⵠⲆⵠᐃⲆⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_011_010")] = ΔΔ.ΔⵠⲆⲆⲆᐃᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_011_011")] = ΔΔ.ⵠⵠⲆⵠΔⵠⲆ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_110_000")] = ΔΔ.ᐃΔΔᐃᐃΔⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_110_010")] = ΔΔ.ᐃⵠⵠⲆⲆⵠΔ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_110_110")] = ΔΔ.ᐃΔⵠΔᐃⲆⲆ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_111_000")] = ΔΔ.ⵠΔⵠΔᐃΔⲆ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_111_010")] = ΔΔ.ΔⲆΔΔⲆⲆⲆ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_111_011")] = ΔΔ.ᐃΔⲆⵠᐃⵠᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_111_110")] = ΔΔ.ᐃᐃΔⵠⵠᐃᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("000_111_111")] = ΔΔ.ⵠⵠⵠⲆᐃᐃⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_010_000")] = ΔΔ.ⵠⲆⵠᐃᐃᐃⲆ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_010_010")] = ΔΔ.ⵠⲆΔⵠΔⵠⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_011_000")] = ΔΔ.ᐃⲆΔⵠⲆⲆΔ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_011_010")] = ΔΔ.ⲆⵠⲆⲆΔΔⲆ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_011_011")] = ΔΔ.ⲆⵠᐃⲆΔⲆⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_110_000")] = ΔΔ.ᐃΔⵠΔⵠⵠᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_110_010")] = ΔΔ.ΔⲆΔΔΔΔⲆ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_110_110")] = ΔΔ.Ⲇⵠᐃᐃⵠⵠⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_111_000")] = ΔΔ.ⵠⲆⵠᐃΔⲆΔ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_111_010")] = ΔΔ.ⵠᐃΔⲆⵠᐃⲆ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_111_011")] = ΔΔ.ΔⲆⲆᐃⵠⵠΔ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_111_110")] = ΔΔ.ⵠⵠⲆⵠⵠᐃᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("010_111_111")] = ΔΔ.ΔΔΔᐃⵠᐃΔ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("011_011_000")] = ΔΔ.ΔΔΔᐃⲆΔⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("011_011_010")] = ΔΔ.ΔᐃΔⵠΔⵠⲆ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("011_011_011")] = ΔΔ.ⲆⵠⲆΔᐃⲆᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("011_111_000")] = ΔΔ.ⲆΔᐃᐃⵠᐃᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("011_111_010")] = ΔΔ.ⲆᐃΔⲆᐃΔᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("011_111_011")] = ΔΔ.ⲆⲆⵠⲆⵠᐃᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("011_111_110")] = ΔΔ.ⵠΔᐃΔΔΔΔ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("011_111_111")] = ΔΔ.ᐃᐃⲆΔᐃⲆⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("110_110_000")] = ΔΔ.ΔΔⵠⲆⵠⲆΔ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("110_110_010")] = ΔΔ.ΔⵠⵠᐃⵠⲆᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("110_110_110")] = ΔΔ.ΔⵠⵠᐃⲆⲆᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("110_111_000")] = ΔΔ.ΔⵠΔᐃⵠⵠⲆ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("110_111_010")] = ΔΔ.ⵠᐃᐃΔⵠΔΔ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("110_111_011")] = ΔΔ.ⲆⲆΔΔᐃⵠᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("110_111_110")] = ΔΔ.ᐃᐃᐃⵠᐃⵠᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("110_111_111")] = ΔΔ.ⵠΔⲆⵠⲆⵠΔ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("111_111_011")] = ΔΔ.ᐃΔᐃᐃΔΔⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("111_111_110")] = ΔΔ.ᐃⲆⲆΔᐃⲆᐃ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("111_111_011")] = ΔΔ.ᐃΔᐃᐃΔΔⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("111_111_000")] = ΔΔ.ⵠᐃⵠΔΔⲆΔ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("111_111_111")] = ΔΔ.ⵠΔⲆⵠⵠⲆⵠ;
    ᐃΔ[1024][ts.ⵠΔⵠ][b("111_111_010")] = ΔΔ.ΔᐃᐃΔΔⲆⲆ;
    ᐃΔ[32] = [];
    ᐃΔ[32][ts.ⵠⵠⵠ] = ΔΔ.ⲆᐃΔΔⵠᐃΔ;
    ᐃΔ[32][ts.ⵠΔⵠ] = ΔΔ.ⵠΔⲆᐃⵠⲆᐃ;
    ᐃΔ[205] = [];
    ᐃΔ[205][ts.ⵠⵠⵠ] = ΔΔ.ⵠⲆⲆⲆⵠᐃΔ;
    ᐃΔ[205][ts.ⵠΔⵠ] = ΔΔ.ⵠᐃΔⵠⲆⵠⵠ;
    ᐃΔ[957] = [];
    ᐃΔ[957][ts.ⵠⵠⵠ] = ΔΔ.ⲆᐃⵠⵠⲆⵠᐃ;
    ᐃΔ[957][ts.ⵠΔⵠ] = ΔΔ.ΔΔᐃⵠⵠⲆⵠ;
    ᐃΔ[207] = [];
    ᐃΔ[207][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃᐃⵠᐃⲆΔ;
    ᐃΔ[207][ts.ⵠΔⵠ] = ΔΔ.ⲆΔⲆᐃᐃⲆⲆ;
    ᐃΔ[954] = [];
    ᐃΔ[954][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆΔΔΔⲆⵠ;
    ᐃΔ[954][ts.ⵠΔⵠ] = ΔΔ.ᐃᐃΔΔΔΔᐃ;
    ᐃΔ[958] = [];
    ᐃΔ[958][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆⵠᐃᐃΔΔ;
    ᐃΔ[958][ts.ⵠΔⵠ] = ΔΔ.ⲆⵠΔᐃΔⲆᐃ;
    ᐃΔ[209] = [];
    ᐃΔ[209][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃⵠΔⵠⵠⵠ;
    ᐃΔ[209][ts.ⵠΔⵠ] = ΔΔ.ⲆΔⲆⵠⵠⲆΔ;
    ᐃΔ[971] = [];
    ᐃΔ[971][ts.ⵠⵠⵠ] = ΔΔ.ⲆᐃᐃⵠᐃΔⲆ;
    ᐃΔ[971][ts.ⵠΔⵠ] = ΔΔ.ⲆΔⲆⵠⵠᐃⲆ;
    ᐃΔ[211] = [];
    ᐃΔ[211][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔⵠⵠⲆⵠⵠ;
    ᐃΔ[211][ts.ⵠΔⵠ] = ΔΔ.ᐃⵠΔⲆⲆΔΔ;
    ᐃΔ[986] = [];
    ᐃΔ[986][ts.ⵠⵠⵠ] = ΔΔ.ⵠⲆⵠⵠΔᐃⲆ;
    ᐃΔ[986][ts.ⵠΔⵠ] = ΔΔ.ΔⲆΔᐃᐃⵠᐃ;
    ᐃΔ[989] = [];
    ᐃΔ[989][ts.ⵠⵠⵠ] = [ΔΔ.ⵠⵠⲆΔᐃⵠΔ];
    ᐃΔ[989][ts.ⵠΔⵠ] = [ΔΔ.ΔⲆⵠΔΔᐃᐃ];
    ᐃΔ[217] = [];
    ᐃΔ[217][ts.ⵠⵠⵠ] = ΔΔ.ΔΔᐃⵠΔⵠⲆ;
    ᐃΔ[217][ts.ⵠΔⵠ] = ΔΔ.ΔⲆⲆᐃⲆⲆΔ;
    ᐃΔ[219] = [];
    ᐃΔ[219][ts.ⵠⵠⵠ] = ΔΔ.ⲆⵠⲆᐃⲆΔΔ;
    ᐃΔ[219][ts.ⵠΔⵠ] = ΔΔ.ᐃⵠᐃᐃⲆⲆΔ;
    ᐃΔ[218] = [];
    ᐃΔ[218][ts.ⵠⵠⵠ] = ΔΔ.ᐃΔⵠⲆⵠᐃΔ;
    ᐃΔ[218][ts.ⵠΔⵠ] = ΔΔ.ⲆⲆᐃᐃΔΔᐃ;
    ᐃΔ[212] = [];
    ᐃΔ[212][ts.ⵠⵠⵠ] = ΔΔ.ⵠⲆⲆⲆⲆᐃΔ;
    ᐃΔ[212][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠᐃⵠᐃΔⵠ;
    ᐃΔ[213] = [];
    ᐃΔ[213][ts.ⵠⵠⵠ] = ΔΔ.ᐃΔΔⲆΔᐃᐃ;
    ᐃΔ[213][ts.ⵠΔⵠ] = ΔΔ.ΔΔᐃᐃⲆⲆᐃ;
    ᐃΔ[214] = [];
    ᐃΔ[214][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠᐃⵠⲆΔⲆ;
    ᐃΔ[214][ts.ⵠΔⵠ] = ΔΔ.ΔⵠⲆᐃΔΔᐃ;
    ᐃΔ[215] = [];
    ᐃΔ[215][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆΔⵠⵠⲆⵠ;
    ᐃΔ[215][ts.ⵠΔⵠ] = ΔΔ.ΔᐃΔᐃᐃⲆⵠ;
    ᐃΔ[216] = [];
    ᐃΔ[216][ts.ⵠⵠⵠ] = ΔΔ.ᐃⲆᐃⵠⲆᐃΔ;
    ᐃΔ[216][ts.ⵠΔⵠ] = ΔΔ.ⲆΔⲆⵠⵠᐃᐃ;
    ᐃΔ[220] = [];
    ᐃΔ[220][ts.ⵠⵠⵠ] = ΔΔ.ⲆⵠΔᐃⲆⲆΔ;
    ᐃΔ[220][ts.ⵠΔⵠ] = ΔΔ.ᐃΔⲆΔⲆⵠᐃ;
    ᐃΔ[1020] = [];
    ᐃΔ[1020][ts.ⵠⵠⵠ] = ΔΔ.ᐃⲆⵠⲆᐃᐃΔ;
    ᐃΔ[1020][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠⲆΔⵠΔⵠ;
    ᐃΔ[1021] = [];
    ᐃΔ[1021][ts.ⵠⵠⵠ] = ΔΔ.ⲆⵠⵠᐃᐃΔΔ;
    ᐃΔ[1021][ts.ⵠΔⵠ] = ΔΔ.ᐃᐃⵠⲆΔⵠΔ;
    ᐃΔ[39] = [];
    ᐃΔ[39][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠᐃᐃᐃⲆⲆ;
    ᐃΔ[39][ts.ⵠΔⵠ] = ΔΔ.ᐃᐃⵠⵠᐃⲆⵠ;
    ᐃΔ[1022] = ΔΔ.ⲆⵠΔⲆΔⲆΔ;
    ᐃΔ[1023] = ΔΔ.ΔΔⲆⲆⵠΔΔ;
    ᐃΔ[1041] = [];
    ᐃΔ[1041][ts.ⵠⵠⵠ] = [];
    ᐃΔ[1041][ts.ⵠΔⵠ] = [];
    ᐃΔ[1041][ts.ⵠⵠⵠ].push(ΔΔ.ⵠᐃΔⲆᐃⲆΔ);
    ᐃΔ[1041][ts.ⵠⵠⵠ].push(ΔΔ.ⲆⲆᐃⲆΔᐃΔ);
    ᐃΔ[1041][ts.ⵠⵠⵠ].push(ΔΔ.ᐃΔᐃⵠᐃⵠⵠ);
    ᐃΔ[1041][ts.ⵠΔⵠ].push(ΔΔ.ⲆⲆᐃⲆⵠⲆⲆ);
    ᐃΔ[1041][ts.ⵠΔⵠ].push(ΔΔ.ᐃᐃⲆΔⵠⲆⲆ);
    ᐃΔ[1041][ts.ⵠΔⵠ].push(ΔΔ.ⵠⲆⲆΔΔⵠΔ);
    ᐃΔ[244] = [];
    ᐃΔ[244][ts.ⵠⵠⵠ] = [];
    ᐃΔ[244][ts.ⵠΔⵠ] = [];
    ᐃΔ[244][ts.ⵠⵠⵠ].push(ΔΔ.ΔⲆⲆⵠⵠᐃᐃ);
    ᐃΔ[244][ts.ⵠⵠⵠ].push(ΔΔ.ⲆᐃᐃᐃⲆⲆᐃ);
    ᐃΔ[244][ts.ⵠⵠⵠ].push(ΔΔ.ΔⲆᐃⲆⲆΔⲆ);
    ᐃΔ[244][ts.ⵠΔⵠ].push(ΔΔ.ΔⲆᐃΔⲆᐃⵠ);
    ᐃΔ[244][ts.ⵠΔⵠ].push(ΔΔ.ⲆⲆᐃΔⲆΔⵠ);
    ᐃΔ[244][ts.ⵠΔⵠ].push(ΔΔ.ⵠⵠⵠⵠⲆⲆⲆ);
    ᐃΔ[1052] = [];
    ᐃΔ[1052][ts.ⵠⵠⵠ] = [];
    ᐃΔ[1052][ts.ⵠΔⵠ] = [];
    ᐃΔ[1052][ts.ⵠⵠⵠ].push(ΔΔ.ⵠⲆⲆⲆΔᐃⲆ);
    ᐃΔ[1052][ts.ⵠⵠⵠ].push(ΔΔ.ⲆⲆⵠᐃΔⲆⲆ);
    ᐃΔ[1052][ts.ⵠⵠⵠ].push(ΔΔ.ⵠⵠⲆᐃΔⵠΔ);
    ᐃΔ[1052][ts.ⵠⵠⵠ].push(ΔΔ.ΔⲆⲆΔᐃΔᐃ);
    ᐃΔ[1052][ts.ⵠⵠⵠ].push(ΔΔ.ᐃⲆᐃⵠᐃⵠΔ);
    ᐃΔ[1052][ts.ⵠΔⵠ].push(ΔΔ.ᐃᐃⵠᐃᐃⲆⲆ);
    ᐃΔ[1052][ts.ⵠΔⵠ].push(ΔΔ.ᐃⵠⲆⵠⵠⲆᐃ);
    ᐃΔ[1052][ts.ⵠΔⵠ].push(ΔΔ.ΔΔΔΔᐃΔⲆ);
    ᐃΔ[1052][ts.ⵠΔⵠ].push(ΔΔ.ⵠⵠΔᐃΔᐃΔ);
    ᐃΔ[1052][ts.ⵠΔⵠ].push(ΔΔ.ⲆᐃⲆᐃⵠΔᐃ);
    ᐃΔ[450] = [];
    ᐃΔ[450][ts.ⵠⵠⵠ] = ΔΔ.ⲆⵠⲆᐃⲆⲆΔ;
    ᐃΔ[450][ts.ⵠΔⵠ] = ΔΔ.ΔⵠΔᐃⲆⵠᐃ;
    ᐃΔ[453] = [];
    ᐃΔ[453][ts.ⵠⵠⵠ] = ΔΔ.ᐃⲆᐃⲆΔⵠⵠ;
    ᐃΔ[453][ts.ⵠΔⵠ] = ΔΔ.ᐃⲆᐃⲆΔⲆⲆ;
    ᐃΔ[454] = [];
    ᐃΔ[454][ts.ⵠⵠⵠ] = ΔΔ.ᐃⲆΔΔΔΔᐃ;
    ᐃΔ[454][ts.ⵠΔⵠ] = ΔΔ.ΔᐃⵠΔᐃⲆΔ;
    ᐃΔ[464] = ΔΔ.ⵠⲆⵠΔⲆⲆⵠ;
    ᐃΔ[468] = ΔΔ.ⲆΔⵠⵠⵠⲆΔ;
    ᐃΔ[469] = ΔΔ.ⲆⲆⵠⵠᐃⵠᐃ;
    ᐃΔ[20] = [];
    ᐃΔ[20][ts.ⵠⵠⵠ] = ΔΔ.ΔΔΔΔΔᐃᐃ;
    ᐃΔ[20][ts.ⵠΔⵠ] = ΔΔ.ΔΔᐃΔⵠⲆΔ;
    ᐃΔ[920] = [];
    ᐃΔ[920][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆⵠΔⲆΔⲆ;
    ᐃΔ[920][ts.ⵠΔⵠ] = ΔΔ.ⵠΔᐃⵠⲆΔⵠ;
    ᐃΔ[21] = [];
    ᐃΔ[21][ts.ⵠⵠⵠ] = ΔΔ.ᐃΔᐃΔⲆᐃᐃ;
    ᐃΔ[21][ts.ⵠΔⵠ] = ΔΔ.ⵠΔΔⲆΔᐃⲆ;
    ᐃΔ[924] = [];
    ᐃΔ[924][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆⵠΔⲆΔⲆ;
    ᐃΔ[924][ts.ⵠΔⵠ] = ΔΔ.ⵠΔᐃⵠⲆΔⵠ;
    ᐃΔ[44] = [];
    ᐃΔ[44][ts.ⵠⵠⵠ] = ΔΔ.ⲆΔΔⵠΔΔⵠ;
    ᐃΔ[44][ts.ⵠΔⵠ] = ΔΔ.ⲆΔⵠᐃΔΔᐃ;
    ᐃΔ[19] = [];
    ᐃΔ[19][ts.ⵠⵠⵠ] = ΔΔ.ΔΔᐃΔᐃᐃⵠ;
    ᐃΔ[19][ts.ⵠΔⵠ] = ΔΔ.ΔⲆΔⵠΔⵠⲆ;
    ᐃΔ[34] = [];
    ᐃΔ[34][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃⲆΔⲆΔⲆ;
    ᐃΔ[34][ts.ⵠΔⵠ] = ΔΔ.ᐃⵠⵠⵠᐃᐃΔ;
    ᐃΔ[17] = [];
    ᐃΔ[17][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆᐃᐃᐃΔⲆ;
    ᐃΔ[17][ts.ⵠΔⵠ] = ΔΔ.ⵠᐃᐃΔΔⵠΔ;
    ᐃΔ[63] = [];
    ᐃΔ[63][ts.ⵠⵠⵠ] = ΔΔ.ⲆᐃⵠⵠΔⲆⲆ;
    ᐃΔ[63][ts.ⵠΔⵠ] = ΔΔ.ⵠⲆⲆΔᐃⲆΔ;
    ᐃΔ[60] = [];
    ᐃΔ[60][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔⲆΔⵠΔⲆ;
    ᐃΔ[60][ts.ⵠΔⵠ] = ΔΔ.ΔⲆⲆᐃᐃΔⲆ;
    ᐃΔ[94] = [];
    ᐃΔ[94][ts.ⵠⵠⵠ] = ΔΔ.ΔⵠΔΔΔΔⲆ;
    ᐃΔ[94][ts.ⵠΔⵠ] = ΔΔ.ᐃⲆⲆⲆΔⵠᐃ;
    ᐃΔ[95] = [];
    ᐃΔ[95][ts.ⵠⵠⵠ] = ΔΔ.ᐃⵠⲆΔᐃΔΔ;
    ᐃΔ[95][ts.ⵠΔⵠ] = ΔΔ.ⲆᐃᐃΔⲆⲆΔ;
    ᐃΔ[96] = [];
    ᐃΔ[96][ts.ⵠⵠⵠ] = ΔΔ.ΔⵠⵠⵠΔⵠⲆⲆⲆ;
    ᐃΔ[96][ts.ⵠΔⵠ] = ΔΔ.ⵠΔⲆⲆⵠⵠᐃⲆᐃ;
    ᐃΔ[97] = [];
    ᐃΔ[97][ts.ⵠⵠⵠ] = ΔΔ.ᐃⵠᐃⵠⵠᐃᐃΔⲆ;
    ᐃΔ[97][ts.ⵠΔⵠ] = ΔΔ.ⲆΔⵠⲆᐃⵠᐃⵠΔ;
    ᐃΔ[98] = [];
    ᐃΔ[98][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃᐃΔΔΔᐃᐃⵠ;
    ᐃΔ[98][ts.ⵠΔⵠ] = ΔΔ.ⵠΔᐃᐃⲆΔᐃⵠⵠ;
    ᐃΔ[99] = [];
    ᐃΔ[99][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆᐃⵠⲆᐃᐃΔᐃ;
    ᐃΔ[99][ts.ⵠΔⵠ] = ΔΔ.ⲆᐃΔΔⲆᐃᐃⲆⵠ;
    ᐃΔ[90] = [];
    ᐃΔ[90][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃΔΔⵠᐃΔ;
    ᐃΔ[90][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠΔΔⵠᐃⵠ;
    ᐃΔ[91] = [];
    ᐃΔ[91][ts.ⵠⵠⵠ] = ΔΔ.ΔⵠᐃⲆⲆⵠᐃ;
    ᐃΔ[91][ts.ⵠΔⵠ] = ΔΔ.ⵠⲆⵠΔⵠⵠⵠ;
    ᐃΔ[71] = [];
    ᐃΔ[71][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃⵠΔⲆΔᐃⵠⲆ;
    ᐃΔ[71][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠⵠⵠΔⵠⵠΔΔ;
    ᐃΔ[72] = [];
    ᐃΔ[72][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠⲆⲆΔⵠΔΔⲆ;
    ᐃΔ[72][ts.ⵠΔⵠ] = ΔΔ.ΔᐃᐃⲆⲆᐃⵠⲆⲆ;
    ᐃΔ[73] = [];
    ᐃΔ[73][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃⵠⲆΔⲆⵠᐃΔ;
    ᐃΔ[73][ts.ⵠΔⵠ] = ΔΔ.ᐃΔΔᐃⵠᐃΔⲆΔ;
    ᐃΔ[74] = [];
    ᐃΔ[74][ts.ⵠⵠⵠ] = ΔΔ.ᐃΔᐃⵠⲆᐃⲆΔⵠ;
    ᐃΔ[74][ts.ⵠΔⵠ] = ΔΔ.ⲆⵠΔⵠᐃⲆᐃᐃΔ;
    ᐃΔ[75] = [];
    ᐃΔ[75][ts.ⵠⵠⵠ] = ΔΔ.ΔⵠⵠΔᐃᐃᐃᐃⲆ;
    ᐃΔ[75][ts.ⵠΔⵠ] = ΔΔ.ⵠᐃⵠΔⵠΔⲆᐃⵠ;
    ᐃΔ[76] = [];
    ᐃΔ[76][ts.ⵠⵠⵠ] = ΔΔ.ᐃⵠⲆᐃⲆΔᐃΔΔ;
    ᐃΔ[76][ts.ⵠΔⵠ] = ΔΔ.ΔⵠᐃⵠⵠᐃΔΔΔ;
    ᐃΔ[101] = [];
    ᐃΔ[101][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠⵠⵠⵠΔⵠ;
    ᐃΔ[101][ts.ⵠΔⵠ] = ΔΔ.ᐃΔᐃⲆⲆᐃⲆ;
    ᐃΔ[64] = [];
    ᐃΔ[64][ts.ⵠⵠⵠ] = ΔΔ.ⵠᐃⲆᐃᐃᐃⵠ;
    ᐃΔ[64][ts.ⵠΔⵠ] = ΔΔ.ΔⵠⵠᐃⲆΔᐃ;
    ᐃΔ[102] = [];
    ᐃΔ[102][ts.ⵠⵠⵠ] = ΔΔ.ΔⵠⵠⵠΔⵠᐃ;
    ᐃΔ[102][ts.ⵠΔⵠ] = ΔΔ.ⵠΔⵠΔᐃⲆⲆ;
    ᐃΔ[65] = [];
    ᐃΔ[65][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆⵠⲆⲆⲆⵠ;
    ᐃΔ[65][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠΔⵠΔⵠᐃ;
    ᐃΔ[103] = [];
    ᐃΔ[103][ts.ⵠⵠⵠ] = ΔΔ.ⲆΔⵠⵠᐃΔⵠ;
    ᐃΔ[103][ts.ⵠΔⵠ] = ΔΔ.ΔΔᐃⵠⲆΔⵠ;
    ᐃΔ[66] = [];
    ᐃΔ[66][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠᐃⵠⲆⵠΔ;
    ᐃΔ[66][ts.ⵠΔⵠ] = ΔΔ.ⵠΔⲆⵠⵠⲆΔ;
    ᐃΔ[104] = [];
    ᐃΔ[104][ts.ⵠⵠⵠ] = ΔΔ.ⲆᐃᐃⵠⲆᐃΔ;
    ᐃΔ[104][ts.ⵠΔⵠ] = ΔΔ.ᐃΔᐃΔᐃⲆⲆ;
    ᐃΔ[67] = [];
    ᐃΔ[67][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔⲆⲆΔΔⲆ;
    ᐃΔ[67][ts.ⵠΔⵠ] = ΔΔ.ΔⲆⵠⵠⵠⵠᐃ;
    ᐃΔ[105] = [];
    ᐃΔ[105][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆᐃⲆⲆⵠΔ;
    ᐃΔ[105][ts.ⵠΔⵠ] = ΔΔ.ᐃⵠᐃᐃΔΔⲆ;
    ᐃΔ[68] = [];
    ᐃΔ[68][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆⲆⲆⵠⲆΔ;
    ᐃΔ[68][ts.ⵠΔⵠ] = ΔΔ.ⲆⲆⵠⵠⵠⵠᐃ;
    ᐃΔ[106] = [];
    ᐃΔ[106][ts.ⵠⵠⵠ] = ΔΔ.ⵠⲆⵠᐃΔⵠΔ;
    ᐃΔ[106][ts.ⵠΔⵠ] = ΔΔ.ⲆΔⵠⵠΔⲆⲆ;
    ᐃΔ[69] = [];
    ᐃΔ[69][ts.ⵠⵠⵠ] = ΔΔ.ᐃⲆΔⵠⲆⲆⲆ;
    ᐃΔ[69][ts.ⵠΔⵠ] = ΔΔ.ⲆΔⵠⲆⵠⲆΔ;
    ᐃΔ[107] = [];
    ᐃΔ[107][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃⵠⲆⵠⵠᐃ;
    ᐃΔ[107][ts.ⵠΔⵠ] = ΔΔ.ᐃΔΔⲆΔΔⲆ;
    ᐃΔ[70] = [];
    ᐃΔ[70][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔⵠᐃΔⲆᐃ;
    ᐃΔ[70][ts.ⵠΔⵠ] = ΔΔ.ᐃⵠΔⲆΔⵠᐃ;
    ᐃΔ[80] = [];
    ᐃΔ[80][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆⵠⲆΔⵠⲆ;
    ᐃΔ[80][ts.ⵠΔⵠ] = ΔΔ.ⲆⲆⵠⲆⲆⵠⲆ;
    ᐃΔ[81] = [];
    ᐃΔ[81][ts.ⵠⵠⵠ] = ΔΔ.ⵠⲆᐃᐃⵠΔⲆ;
    ᐃΔ[81][ts.ⵠΔⵠ] = ΔΔ.ⵠᐃΔΔⲆⲆᐃ;
    ᐃΔ[22] = [];
    ᐃΔ[22][ts.ⵠⵠⵠ] = ΔΔ.ᐃⵠⵠⵠⲆⲆⲆ;
    ᐃΔ[22][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠΔⲆΔΔⲆ;
    ᐃΔ[928] = [];
    ᐃΔ[928][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔΔΔΔᐃᐃ;
    ᐃΔ[928][ts.ⵠΔⵠ] = ΔΔ.ΔᐃᐃⲆΔΔⵠ;
    ᐃΔ[935] = [];
    ᐃΔ[935][ts.ⵠⵠⵠ] = [];
    ᐃΔ[935][ts.ⵠΔⵠ] = [];
    ᐃΔ[935][ts.ⵠⵠⵠ].push(ΔΔ.ⲆᐃΔᐃΔᐃⲆⵠᐃ);
    ᐃΔ[935][ts.ⵠⵠⵠ].push(ΔΔ.ᐃΔΔΔⲆⵠᐃⵠⵠ);
    ᐃΔ[935][ts.ⵠΔⵠ].push(ΔΔ.ᐃΔΔΔⲆⵠᐃⵠⵠ);
    ᐃΔ[935][ts.ⵠΔⵠ].push(ΔΔ.ΔⲆΔⵠΔⲆΔⵠᐃ);
    ᐃΔ[941] = [];
    ᐃΔ[941][ts.ⵠⵠⵠ] = [];
    ᐃΔ[941][ts.ⵠΔⵠ] = [];
    ᐃΔ[941][ts.ⵠⵠⵠ].push(ΔΔ.ⲆΔⵠⲆΔⲆΔ);
    ᐃΔ[941][ts.ⵠⵠⵠ].push(ΔΔ.ⵠⲆΔΔΔᐃᐃ);
    ᐃΔ[941][ts.ⵠⵠⵠ].push(ΔΔ.ⵠΔⲆⵠΔΔⵠ);
    ᐃΔ[941][ts.ⵠΔⵠ].push(ΔΔ.ⵠⵠᐃⵠᐃⲆⲆ);
    ᐃΔ[941][ts.ⵠΔⵠ].push(ΔΔ.ⲆᐃΔΔᐃⵠⲆ);
    ᐃΔ[941][ts.ⵠΔⵠ].push(ΔΔ.ⵠⲆⲆΔΔⵠᐃ);
    ᐃΔ[53] = [];
    ᐃΔ[53][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆᐃᐃⵠᐃⵠ;
    ᐃΔ[53][ts.ⵠΔⵠ] = ΔΔ.ᐃᐃΔᐃⵠⲆⲆ;
    ᐃΔ[54] = [];
    ᐃΔ[54][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠᐃΔⵠⵠⲆ;
    ᐃΔ[54][ts.ⵠΔⵠ] = ΔΔ.ΔⵠⵠᐃⲆΔⵠ;
    ᐃΔ[241] = [];
    ᐃΔ[241][ts.ⵠⵠⵠ] = [];
    ᐃΔ[241][ts.ⵠΔⵠ] = [];
    ᐃΔ[241][ts.ⵠⵠⵠ].push(ΔΔ.ᐃⲆᐃⲆΔΔⲆ);
    ᐃΔ[241][ts.ⵠⵠⵠ].push(ΔΔ.ⲆΔΔⲆⲆΔᐃ);
    ᐃΔ[241][ts.ⵠⵠⵠ].push(ΔΔ.ΔⲆⵠⲆΔⵠΔ);
    ᐃΔ[241][ts.ⵠΔⵠ].push(ΔΔ.ⵠᐃⵠⵠⵠᐃⵠ);
    ᐃΔ[241][ts.ⵠΔⵠ].push(ΔΔ.ᐃᐃⲆⲆΔΔⲆ);
    ᐃΔ[241][ts.ⵠΔⵠ].push(ΔΔ.ⵠⵠᐃⵠⲆⲆᐃ);
    ᐃΔ[202] = [];
    ᐃΔ[202][ts.ⵠⵠⵠ] = [];
    ᐃΔ[202][ts.ⵠΔⵠ] = [];
    ᐃΔ[202][ts.ⵠⵠⵠ].push(ΔΔ.ΔᐃᐃᐃᐃᐃⲆ);
    ᐃΔ[202][ts.ⵠⵠⵠ].push(ΔΔ.ᐃⲆΔⲆⵠⵠⵠ);
    ᐃΔ[202][ts.ⵠⵠⵠ].push(ΔΔ.ⲆΔᐃⵠⵠⵠⲆ);
    ᐃΔ[202][ts.ⵠΔⵠ].push(ΔΔ.ᐃⵠΔⵠⲆΔⲆ);
    ᐃΔ[202][ts.ⵠΔⵠ].push(ΔΔ.ⵠΔⵠΔⵠⲆⲆ);
    ᐃΔ[202][ts.ⵠΔⵠ].push(ΔΔ.ⲆᐃⲆΔΔⵠⲆ);
    ᐃΔ[203] = [];
    ᐃΔ[203][ts.ⵠⵠⵠ] = [];
    ᐃΔ[203][ts.ⵠΔⵠ] = [];
    ᐃΔ[203][ts.ⵠⵠⵠ].push(ΔΔ.ⵠⵠᐃᐃⲆᐃⵠ);
    ᐃΔ[203][ts.ⵠⵠⵠ].push(ΔΔ.ⵠⵠⲆⲆΔΔⵠ);
    ᐃΔ[203][ts.ⵠⵠⵠ].push(ΔΔ.ΔⵠⲆᐃⲆΔᐃ);
    ᐃΔ[203][ts.ⵠⵠⵠ].push(ΔΔ.ᐃⲆΔⲆΔᐃᐃ);
    ᐃΔ[203][ts.ⵠⵠⵠ].push(ΔΔ.ᐃᐃⵠᐃⵠⵠΔ);
    ᐃΔ[203][ts.ⵠⵠⵠ].push(ΔΔ.ᐃⵠΔΔΔⲆᐃ);
    ᐃΔ[203][ts.ⵠΔⵠ].push(ΔΔ.ΔⵠΔⵠΔⲆⲆ);
    ᐃΔ[203][ts.ⵠΔⵠ].push(ΔΔ.ⵠᐃΔᐃΔⵠᐃ);
    ᐃΔ[203][ts.ⵠΔⵠ].push(ΔΔ.ⵠᐃⵠᐃⵠᐃᐃ);
    ᐃΔ[203][ts.ⵠΔⵠ].push(ΔΔ.ⵠᐃᐃΔⵠⵠΔ);
    ᐃΔ[203][ts.ⵠΔⵠ].push(ΔΔ.ᐃΔⵠᐃⲆΔᐃ);
    ᐃΔ[203][ts.ⵠΔⵠ].push(ΔΔ.ⲆΔᐃⵠᐃΔΔ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ] = [];
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠⵠⵠ] = [];
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠΔⵠ] = [];
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠⵠⵠ].push(ΔΔ.ⵠᐃᐃⵠᐃᐃΔ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠⵠⵠ].push(ΔΔ.ⵠΔΔⲆᐃⵠⵠ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠⵠⵠ].push(ΔΔ.ᐃᐃᐃᐃᐃΔΔ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠⵠⵠ].push(ΔΔ.ⵠⲆⵠⵠⵠΔⵠ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠⵠⵠ].push(ΔΔ.ΔⲆⵠⲆⵠΔⵠ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠⵠⵠ].push(ΔΔ.ⲆᐃⵠⲆᐃⵠᐃ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠΔⵠ].push(ΔΔ.ᐃΔⲆⵠⲆΔΔ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠΔⵠ].push(ΔΔ.ⵠⵠΔΔᐃᐃⵠ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠΔⵠ].push(ΔΔ.ⵠᐃΔⵠⲆΔΔ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠΔⵠ].push(ΔΔ.ⲆᐃⲆⵠᐃⵠⲆ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠΔⵠ].push(ΔΔ.ΔⵠⵠΔⲆⲆᐃ);
    ᐃΔ[ts.ⵠⲆΔⵠΔ][ts.ⵠΔⵠ].push(ΔΔ.ᐃᐃⲆᐃⵠⲆⲆ);
    ᐃΔ[918] = [];
    ᐃΔ[918][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃᐃⵠⵠⵠΔ;
    ᐃΔ[918][ts.ⵠΔⵠ] = ΔΔ.ⲆⲆᐃⲆᐃΔΔ;
    ᐃΔ[919] = ΔΔ.ΔⵠᐃⵠᐃᐃⲆ;
    ᐃΔ[56] = [];
    ᐃΔ[56][ts.ⵠⵠⵠ] = ΔΔ.ⵠⲆΔⲆΔᐃⲆᐃΔ;
    ᐃΔ[56][ts.ⵠΔⵠ] = ΔΔ.ⲆⲆⲆⲆⲆΔᐃΔᐃ;
    ᐃΔ[223] = [];
    ᐃΔ[223][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃᐃⵠᐃⲆΔ;
    ᐃΔ[223][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠⵠⲆⲆⲆΔ;
    ᐃΔ[224] = [];
    ᐃΔ[224][ts.ⵠⵠⵠ] = ΔΔ.ⲆⵠΔⲆᐃⵠⲆ;
    ᐃΔ[224][ts.ⵠΔⵠ] = ΔΔ.ⲆΔⵠⲆⵠᐃᐃ;
    ᐃΔ[236] = [];
    ᐃΔ[236][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆⵠⵠΔⲆⵠ;
    ᐃΔ[236][ts.ⵠΔⵠ] = ΔΔ.ⲆᐃⲆᐃᐃᐃⵠ;
    ᐃΔ[1033] = [];
    ᐃΔ[1033][ts.ⵠⵠⵠ] = ΔΔ.ᐃΔⲆⵠⵠᐃᐃ;
    ᐃΔ[1033][ts.ⵠΔⵠ] = ΔΔ.ⲆΔᐃⲆⲆⵠΔ;
    ᐃΔ[1034] = ΔΔ.ⵠⵠΔΔᐃⲆΔ;
    ᐃΔ[1150] = [];
    ᐃΔ[1150][ts.ⵠⵠⵠ] = ΔΔ.ΔΔᐃⲆⲆⲆⵠ;
    ᐃΔ[1150][ts.ⵠΔⵠ] = ΔΔ.ⲆⲆᐃΔΔᐃᐃ;
    ᐃΔ[1152] = [];
    ᐃΔ[1152][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠⵠⲆΔⲆᐃ;
    ᐃΔ[1152][ts.ⵠΔⵠ] = ΔΔ.ⲆΔΔⵠᐃᐃΔ;
    ᐃΔ[1149] = ΔΔ.ⵠⵠⵠᐃⵠᐃΔ;
    ᐃΔ[1151] = ΔΔ.ΔΔᐃⲆⵠⵠᐃ;
    ᐃΔ[1153] = ΔΔ.ΔΔⵠⵠΔᐃΔ;
    ᐃΔ[1143] = [];
    ᐃΔ[1143][ts.ⵠⵠⵠ] = ΔΔ.ⵠᐃᐃΔᐃⲆⵠ;
    ᐃΔ[1143][ts.ⵠΔⵠ] = ΔΔ.ᐃΔⵠⵠΔⵠΔ;
    ᐃΔ[1145] = [];
    ᐃΔ[1145][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆΔⲆⲆⲆᐃ;
    ᐃΔ[1145][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠⵠⲆⲆⵠΔ;
    ᐃΔ[1146] = [];
    ᐃΔ[1146][ts.ⵠⵠⵠ] = ΔΔ.ᐃΔΔⲆⵠΔⵠ;
    ᐃΔ[1146][ts.ⵠΔⵠ] = ΔΔ.ⲆⲆΔⵠⵠⵠᐃ;
    ᐃΔ[1144] = ΔΔ.ᐃⵠΔΔΔΔΔ;
    ᐃΔ[1148] = ΔΔ.ΔⵠⵠⵠⲆⲆⵠ;
    ᐃΔ[1147] = ΔΔ.ⲆⲆⵠᐃⲆⵠⲆ;
    ᐃΔ[1053] = [];
    ᐃΔ[1053][ts.ⵠⵠⵠ] = ΔΔ.ΔⵠΔⲆᐃΔⲆ;
    ᐃΔ[1053][ts.ⵠΔⵠ] = ΔΔ.ΔⵠΔᐃΔⲆⲆ;
    ᐃΔ[1055] = [];
    ᐃΔ[1055][ts.ⵠⵠⵠ] = ΔΔ.ᐃΔᐃⲆΔᐃⲆ;
    ᐃΔ[1055][ts.ⵠΔⵠ] = ΔΔ.ᐃΔⲆⵠᐃΔᐃ;
    ᐃΔ[231] = [];
    ᐃΔ[231][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆⵠᐃⵠΔⵠ;
    ᐃΔ[231][ts.ⵠΔⵠ] = ΔΔ.ⲆᐃΔΔΔⵠᐃ;
    ᐃΔ[1060] = [];
    ᐃΔ[1060][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆᐃⵠᐃᐃᐃ;
    ᐃΔ[1060][ts.ⵠΔⵠ] = ΔΔ.ⲆⲆΔⲆⲆᐃⲆ;
    ᐃΔ[1063] = [];
    ᐃΔ[1063][ts.ⵠⵠⵠ] = ΔΔ.ΔⵠⲆᐃᐃΔᐃ;
    ᐃΔ[1063][ts.ⵠΔⵠ] = ΔΔ.Δⵠᐃⵠⵠⵠⵠ;
    ᐃΔ[1059] = [];
    ᐃΔ[1059][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃⵠⲆΔⵠⲆ;
    ᐃΔ[1059][ts.ⵠΔⵠ] = ΔΔ.ⲆⵠⲆᐃᐃᐃᐃ;
    ᐃΔ[1062] = [];
    ᐃΔ[1062][ts.ⵠⵠⵠ] = ΔΔ.ΔΔⵠⵠᐃⲆᐃ;
    ᐃΔ[1062][ts.ⵠΔⵠ] = ΔΔ.ⲆΔᐃΔΔΔⲆ;
    ᐃΔ[1056] = ΔΔ.ⲆⵠΔΔⲆⲆᐃ;
    ᐃΔ[1057] = ΔΔ.ⲆⵠΔᐃᐃⵠᐃ;
    ᐃΔ[1058] = ΔΔ.ΔⲆⲆΔᐃΔⵠ;
    ᐃΔ[1065] = ΔΔ.ⵠⵠΔⲆᐃⵠᐃ;
    ᐃΔ[1066] = ΔΔ.ⵠⵠᐃⲆᐃΔΔ;
    ᐃΔ[1067] = ΔΔ.ⲆⵠᐃΔΔⵠⵠ;
    ᐃΔ[1222] = [];
    ᐃΔ[1222][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃⵠⲆⵠⵠᐃ;
    ᐃΔ[1222][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠⵠΔⲆΔᐃ;
    ᐃΔ[248] = [];
    ᐃΔ[248][ts.ⵠⵠⵠ] = ΔΔ.ⵠⲆⵠᐃᐃⲆⵠ;
    ᐃΔ[248][ts.ⵠΔⵠ] = ΔΔ.ⵠⲆΔΔⵠΔᐃ;
    ᐃΔ[1218] = [];
    ᐃΔ[1218][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃᐃⲆΔⲆⲆ;
    ᐃΔ[1218][ts.ⵠΔⵠ] = ΔΔ.ⵠᐃΔΔⲆⲆΔ;
    ᐃΔ[1221] = [];
    ᐃΔ[1221][ts.ⵠⵠⵠ] = ΔΔ.ᐃⲆⵠΔᐃⲆΔ;
    ᐃΔ[1221][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠᐃΔⵠⵠΔ;
    ᐃΔ[1223] = ΔΔ.ΔΔΔⲆΔⲆⲆ;
    ᐃΔ[1219] = ΔΔ.ΔⲆᐃⲆᐃⵠⵠ;
    ᐃΔ[1068] = [];
    ᐃΔ[1068][ts.ⵠⵠⵠ] = ΔΔ.ΔⵠⵠⲆⲆΔΔ;
    ᐃΔ[1068][ts.ⵠΔⵠ] = ΔΔ.ⲆⵠᐃᐃⲆΔⲆ;
    ᐃΔ[232] = [];
    ᐃΔ[232][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆⲆⵠⵠΔⲆ;
    ᐃΔ[232][ts.ⵠΔⵠ] = ΔΔ.ᐃⲆΔᐃᐃΔⵠ;
    ᐃΔ[1070] = [];
    ᐃΔ[1070][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠΔⲆⵠⵠⵠ;
    ᐃΔ[1070][ts.ⵠΔⵠ] = ΔΔ.ⵠΔⵠΔⵠΔⵠ;
    ᐃΔ[1072] = [];
    ᐃΔ[1072][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔⵠᐃΔΔⲆ;
    ᐃΔ[1072][ts.ⵠΔⵠ] = ΔΔ.ΔᐃⵠᐃΔᐃⲆ;
    ᐃΔ[1075] = [];
    ᐃΔ[1075][ts.ⵠⵠⵠ] = ΔΔ.ⲆᐃᐃΔⲆⵠⲆ;
    ᐃΔ[1075][ts.ⵠΔⵠ] = ΔΔ.ᐃⵠⲆⲆⲆᐃΔ;
    ᐃΔ[1071] = [];
    ᐃΔ[1071][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃᐃΔⲆⲆΔ;
    ᐃΔ[1071][ts.ⵠΔⵠ] = ΔΔ.ᐃⲆΔΔⵠᐃᐃ;
    ᐃΔ[1074] = [];
    ᐃΔ[1074][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠⲆⵠᐃⲆⵠ;
    ᐃΔ[1074][ts.ⵠΔⵠ] = ΔΔ.ᐃΔⲆⵠΔⲆⵠ;
    ᐃΔ[1073] = [];
    ᐃΔ[1073][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔΔΔᐃⲆᐃ;
    ᐃΔ[1073][ts.ⵠΔⵠ] = ΔΔ.ⲆᐃⵠⵠΔⵠⵠ;
    ᐃΔ[1076] = [];
    ᐃΔ[1076][ts.ⵠⵠⵠ] = ΔΔ.ᐃⵠᐃᐃᐃⵠΔ;
    ᐃΔ[1076][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠⲆⲆΔΔⲆ;
    ᐃΔ[1077] = ΔΔ.ⵠΔⵠⲆⵠⵠᐃ;
    ᐃΔ[1078] = ΔΔ.ᐃⲆⲆⵠᐃΔᐃ;
    ᐃΔ[1079] = ΔΔ.ΔΔⵠⲆⲆⵠΔ;
    ᐃΔ[1083] = [];
    ᐃΔ[1083][ts.ⵠⵠⵠ] = ΔΔ.ⵠⲆᐃΔⲆΔⲆ;
    ᐃΔ[1083][ts.ⵠΔⵠ] = ΔΔ.ⲆΔΔⲆᐃⵠᐃ;
    ᐃΔ[233] = [];
    ᐃΔ[233][ts.ⵠⵠⵠ] = ΔΔ.ᐃⵠΔᐃⵠⲆⵠ;
    ᐃΔ[233][ts.ⵠΔⵠ] = ΔΔ.ᐃᐃⵠΔⲆᐃᐃ;
    ᐃΔ[1085] = [];
    ᐃΔ[1085][ts.ⵠⵠⵠ] = ΔΔ.ⲆᐃΔⲆᐃΔⲆ;
    ᐃΔ[1085][ts.ⵠΔⵠ] = ΔΔ.ᐃᐃⵠⵠⵠᐃΔ;
    ᐃΔ[1087] = [];
    ᐃΔ[1087][ts.ⵠⵠⵠ] = ΔΔ.ⵠᐃⲆⵠᐃⵠⲆ;
    ᐃΔ[1087][ts.ⵠΔⵠ] = ΔΔ.ᐃΔⲆΔΔⲆᐃ;
    ᐃΔ[1090] = [];
    ᐃΔ[1090][ts.ⵠⵠⵠ] = ΔΔ.ⲆᐃⵠᐃᐃᐃⲆ;
    ᐃΔ[1090][ts.ⵠΔⵠ] = ΔΔ.ᐃⵠⵠΔΔᐃⵠ;
    ᐃΔ[1086] = [];
    ᐃΔ[1086][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔᐃᐃΔⵠⲆ;
    ᐃΔ[1086][ts.ⵠΔⵠ] = ΔΔ.ⲆⵠⲆᐃⲆΔⵠ;
    ᐃΔ[1089] = [];
    ᐃΔ[1089][ts.ⵠⵠⵠ] = ΔΔ.ⲆⵠᐃⵠᐃΔΔ;
    ᐃΔ[1089][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠⵠⲆᐃᐃⲆ;
    ᐃΔ[1088] = [];
    ᐃΔ[1088][ts.ⵠⵠⵠ] = ΔΔ.ⲆΔΔⲆΔⵠⵠ;
    ᐃΔ[1088][ts.ⵠΔⵠ] = ΔΔ.ΔΔⲆΔΔᐃᐃ;
    ᐃΔ[1091] = [];
    ᐃΔ[1091][ts.ⵠⵠⵠ] = ΔΔ.ⵠⲆᐃⵠᐃⲆⵠ;
    ᐃΔ[1091][ts.ⵠΔⵠ] = ΔΔ.ⲆⵠⵠΔⲆΔΔ;
    ᐃΔ[1092] = ΔΔ.ⵠⲆᐃⲆΔᐃⲆ;
    ᐃΔ[1093] = ΔΔ.ΔΔⲆⲆᐃⵠᐃ;
    ᐃΔ[1094] = ΔΔ.ΔⵠⲆⲆᐃⲆΔ;
    ᐃΔ[1098] = [];
    ᐃΔ[1098][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠⵠΔᐃΔⵠ;
    ᐃΔ[1098][ts.ⵠΔⵠ] = ΔΔ.ᐃⲆⲆᐃⲆΔⵠ;
    ᐃΔ[235] = [];
    ᐃΔ[235][ts.ⵠⵠⵠ] = ΔΔ.ⲆⵠᐃⲆᐃⵠᐃ;
    ᐃΔ[235][ts.ⵠΔⵠ] = ΔΔ.ⵠᐃΔΔⵠᐃⲆ;
    ᐃΔ[1115] = ΔΔ.ᐃᐃΔⲆⵠΔΔ;
    ᐃΔ[1113] = [];
    ᐃΔ[1113][ts.ⵠⵠⵠ] = ΔΔ.ⲆΔⲆᐃⵠΔⲆ;
    ᐃΔ[1113][ts.ⵠΔⵠ] = ΔΔ.ᐃΔΔⵠᐃⲆⵠ;
    ᐃΔ[1114] = [];
    ᐃΔ[1114][ts.ⵠⵠⵠ] = ΔΔ.ᐃⵠΔⲆⲆᐃΔ;
    ᐃΔ[1114][ts.ⵠΔⵠ] = ΔΔ.ΔᐃᐃΔⵠⲆΔ;
    ᐃΔ[1100] = [];
    ᐃΔ[1100][ts.ⵠⵠⵠ] = ΔΔ.ⲆΔⲆᐃᐃᐃⲆ;
    ᐃΔ[1100][ts.ⵠΔⵠ] = ΔΔ.ⲆⲆΔⵠᐃⲆⵠ;
    ᐃΔ[1102] = [];
    ᐃΔ[1102][ts.ⵠⵠⵠ] = ΔΔ.ΔⵠⲆΔⵠᐃΔ;
    ᐃΔ[1102][ts.ⵠΔⵠ] = ΔΔ.ᐃᐃΔΔΔᐃⵠ;
    ᐃΔ[1105] = [];
    ᐃΔ[1105][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆⲆⲆΔᐃⵠ;
    ᐃΔ[1105][ts.ⵠΔⵠ] = ΔΔ.ΔⵠΔΔⵠᐃⲆ;
    ᐃΔ[1101] = [];
    ᐃΔ[1101][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃⵠΔᐃᐃⲆ;
    ᐃΔ[1101][ts.ⵠΔⵠ] = ΔΔ.ΔΔᐃΔᐃΔᐃ;
    ᐃΔ[1104] = [];
    ᐃΔ[1104][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃⲆΔᐃΔⵠ;
    ᐃΔ[1104][ts.ⵠΔⵠ] = ΔΔ.ΔᐃΔᐃᐃⲆⲆ;
    ᐃΔ[1103] = [];
    ᐃΔ[1103][ts.ⵠⵠⵠ] = ΔΔ.ⲆᐃᐃᐃᐃΔΔ;
    ᐃΔ[1103][ts.ⵠΔⵠ] = ΔΔ.ⵠΔⵠⵠᐃΔΔ;
    ᐃΔ[1106] = [];
    ᐃΔ[1106][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔⲆⲆΔⵠⲆ;
    ᐃΔ[1106][ts.ⵠΔⵠ] = ΔΔ.ΔΔΔⲆΔᐃΔ;
    ᐃΔ[1107] = ΔΔ.ⵠⲆΔⵠⵠⲆΔ;
    ᐃΔ[1108] = ΔΔ.ΔᐃΔⲆⲆⲆᐃ;
    ᐃΔ[1109] = ΔΔ.ΔⵠⲆᐃⲆⲆᐃ;
    ᐃΔ[1119] = [];
    ᐃΔ[1119][ts.ⵠⵠⵠ] = ΔΔ.ᐃΔⵠⲆΔᐃⵠ;
    ᐃΔ[1119][ts.ⵠΔⵠ] = ΔΔ.ΔᐃⲆᐃⲆᐃⵠ;
    ᐃΔ[238] = [];
    ᐃΔ[238][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠΔⲆΔⵠΔ;
    ᐃΔ[238][ts.ⵠΔⵠ] = ΔΔ.ᐃΔⲆΔⲆΔΔ;
    ᐃΔ[1136] = ΔΔ.ᐃΔⵠⵠⵠᐃⵠ;
    ᐃΔ[1134] = [];
    ᐃΔ[1134][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃⵠⲆᐃᐃⲆ;
    ᐃΔ[1134][ts.ⵠΔⵠ] = ΔΔ.ⵠᐃᐃᐃⲆΔⲆ;
    ᐃΔ[1135] = [];
    ᐃΔ[1135][ts.ⵠⵠⵠ] = ΔΔ.ⵠΔΔⵠⵠⲆᐃ;
    ᐃΔ[1135][ts.ⵠΔⵠ] = ΔΔ.ⵠΔΔΔⵠⵠΔ;
    ᐃΔ[1121] = [];
    ᐃΔ[1121][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃΔΔⲆⵠⲆ;
    ᐃΔ[1121][ts.ⵠΔⵠ] = ΔΔ.ΔⵠΔᐃᐃᐃΔ;
    ᐃΔ[1123] = [];
    ᐃΔ[1123][ts.ⵠⵠⵠ] = ΔΔ.ΔᐃⲆΔⲆⲆᐃ;
    ᐃΔ[1123][ts.ⵠΔⵠ] = ΔΔ.ⲆⲆⲆⵠᐃⵠⲆ;
    ᐃΔ[1126] = [];
    ᐃΔ[1126][ts.ⵠⵠⵠ] = ΔΔ.ᐃΔⲆΔᐃΔⵠ;
    ᐃΔ[1126][ts.ⵠΔⵠ] = ΔΔ.ⵠᐃᐃΔΔᐃΔ;
    ᐃΔ[1122] = [];
    ᐃΔ[1122][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆΔⲆⲆᐃⵠ;
    ᐃΔ[1122][ts.ⵠΔⵠ] = ΔΔ.ⲆᐃᐃⵠᐃᐃΔ;
    ᐃΔ[1125] = [];
    ᐃΔ[1125][ts.ⵠⵠⵠ] = ΔΔ.ⲆⵠΔⵠⵠΔΔ;
    ᐃΔ[1125][ts.ⵠΔⵠ] = ΔΔ.Ⲇᐃⵠᐃⵠⵠⵠ;
    ᐃΔ[1124] = [];
    ᐃΔ[1124][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆᐃᐃⲆᐃⲆ;
    ᐃΔ[1124][ts.ⵠΔⵠ] = ΔΔ.ⵠΔᐃⲆΔⵠᐃ;
    ᐃΔ[1127] = [];
    ᐃΔ[1127][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆᐃⲆⲆⵠⵠ;
    ᐃΔ[1127][ts.ⵠΔⵠ] = ΔΔ.ΔⲆⵠΔᐃᐃⵠ;
    ᐃΔ[1128] = ΔΔ.ⵠΔⵠⵠᐃΔᐃ;
    ᐃΔ[1129] = ΔΔ.ᐃⵠⲆⲆΔΔⵠ;
    ᐃΔ[1130] = ΔΔ.ⲆⲆᐃⵠⲆⲆⵠ;
    ᐃΔ[1042] = [];
    ᐃΔ[1042][ts.ⵠⵠⵠ] = ΔΔ.ⲆⲆᐃΔⲆⲆⲆ;
    ᐃΔ[1042][ts.ⵠΔⵠ] = ΔΔ.ΔⲆⲆΔΔⲆⵠ;
    ᐃΔ[1043] = [];
    ᐃΔ[1043][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃᐃᐃⲆⵠᐃ;
    ᐃΔ[1043][ts.ⵠΔⵠ] = ΔΔ.ᐃΔᐃⵠᐃⲆᐃ;
    ᐃΔ[1044] = [];
    ᐃΔ[1044][ts.ⵠⵠⵠ] = ΔΔ.ΔΔᐃⲆᐃᐃΔ;
    ᐃΔ[1044][ts.ⵠΔⵠ] = ΔΔ.ΔⵠⲆⲆⲆᐃⵠ;
    ᐃΔ[228] = [];
    ᐃΔ[228][ts.ⵠⵠⵠ] = ΔΔ.ᐃⵠΔⵠⲆⲆⲆ;
    ᐃΔ[228][ts.ⵠΔⵠ] = ΔΔ.ᐃⵠΔⵠⲆⲆⲆ;
    ᐃΔ[234] = [];
    ᐃΔ[234][ts.ⵠⵠⵠ] = ΔΔ.ᐃⲆⵠΔⲆⵠⵠ;
    ᐃΔ[234][ts.ⵠΔⵠ] = ΔΔ.ᐃⲆⵠΔⲆⵠⵠ;
    ᐃΔ[249] = [];
    ᐃΔ[249][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆΔᐃᐃᐃⵠ;
    ᐃΔ[249][ts.ⵠΔⵠ] = ΔΔ.ΔⲆΔᐃᐃᐃⵠ;
    ᐃΔ[1045] = ΔΔ.ⲆΔΔⵠⲆⲆⲆ;
    ᐃΔ[89] = [];
    ᐃΔ[89][ts.ⵠⵠⵠ] = ΔΔ.ⲆᐃᐃΔΔΔⲆ;
    ᐃΔ[89][ts.ⵠΔⵠ] = ΔΔ.ᐃΔⵠⲆΔⲆΔ;
    ᐃΔ[92] = [];
    ᐃΔ[92][ts.ⵠⵠⵠ] = ΔΔ.ΔⲆⲆᐃᐃⵠᐃ;
    ᐃΔ[92][ts.ⵠΔⵠ] = ΔΔ.ⵠᐃⵠᐃᐃᐃΔ;
    ᐃΔ[247] = [];
    ᐃΔ[247][ts.ⵠⵠⵠ] = [ΔΔ.ΔⵠⲆᐃᐃⲆᐃ, ΔΔ.ᐃⵠⵠⵠⲆⲆΔ, ΔΔ.ⵠⵠⵠⵠⵠΔⵠ, ΔΔ.ΔⵠⵠⵠΔⵠᐃ, ΔΔ.ⲆΔⵠⵠᐃΔⵠ, ΔΔ.ⲆᐃᐃⵠⲆᐃΔ, ΔΔ.ΔⲆᐃⲆⲆⵠΔ, ΔΔ.ⵠⲆⵠᐃΔⵠΔ, ΔΔ.ᐃᐃⵠⲆⵠⵠᐃ];
    ᐃΔ[247][ts.ⵠΔⵠ] = [ΔΔ.ᐃⲆᐃⵠᐃⲆⲆ, ΔΔ.ᐃⲆⲆⲆΔⵠⲆ, ΔΔ.ᐃΔᐃⲆⲆᐃⲆ, ΔΔ.ⵠΔⵠΔᐃⲆⲆ, ΔΔ.ΔΔᐃⵠⲆΔⵠ, ΔΔ.ᐃΔᐃΔᐃⲆⲆ, ΔΔ.ᐃⵠᐃᐃΔΔⲆ, ΔΔ.ⵠⲆⵠᐃΔⵠΔ, ΔΔ.ᐃΔΔⲆΔΔⲆ];
    ᐃΔ[93] = [];
    ᐃΔ[93][ts.ⵠⵠⵠ] = ΔΔ.ᐃⲆᐃᐃⲆΔⲆ;
    ᐃΔ[93][ts.ⵠΔⵠ] = ΔΔ.ⲆⵠⲆᐃⵠⲆⲆ;
    ᐃΔ[225] = [];
    ᐃΔ[225][ts.ⵠⵠⵠ] = ΔΔ.ⵠᐃⲆᐃΔΔⲆ;
    ᐃΔ[225][ts.ⵠΔⵠ] = ΔΔ.ⵠⵠⲆⲆⲆⵠⲆ;
    ᐃΔ[226] = [];
    ᐃΔ[226][ts.ⵠⵠⵠ] = ΔΔ.ⵠⲆⲆᐃⲆⲆⲆ;
    ᐃΔ[226][ts.ⵠΔⵠ] = ΔΔ.ᐃⵠⲆⵠⲆΔⵠ;
    ᐃΔ[24] = [];
    ᐃΔ[24][ts.ⵠⵠⵠ] = ΔΔ.ⲆΔⲆⲆⵠⵠᐃ;
    ᐃΔ[24][ts.ⵠΔⵠ] = ΔΔ.ᐃⲆⵠΔⵠᐃΔ;
    ᐃΔ[88] = [];
    ᐃΔ[88][ts.ⵠⵠⵠ] = ΔΔ.ᐃΔΔⵠⲆⵠᐃ;
    ᐃΔ[88][ts.ⵠΔⵠ] = ΔΔ.ΔⲆⵠᐃⲆⵠⲆ;
    ᐃΔ[87] = [];
    ᐃΔ[87][ts.ⵠⵠⵠ] = ΔΔ.ᐃᐃΔⲆⲆⵠⲆ;
    ᐃΔ[87][ts.ⵠΔⵠ] = ΔΔ.ᐃᐃⲆⵠⲆⵠⲆ;
    ᐃΔ[82] = [];
    ᐃΔ[82][ts.ⵠⵠⵠ] = ΔΔ.ⵠⵠᐃⵠⲆⵠⵠ;
    ᐃΔ[82][ts.ⵠΔⵠ] = ΔΔ.ΔⲆΔΔΔⵠⵠ;
    ᐃΔ[621] = [];
    ᐃΔ[621][ts.ⵠⵠⵠ] = [];
    ᐃΔ[621][ts.ⵠΔⵠ] = [];
    ᐃΔ[621][ts.ⵠⵠⵠ].push(ΔΔ.ⵠⵠΔⲆⵠⲆΔⵠᐃ);
    ᐃΔ[621][ts.ⵠⵠⵠ].push(ΔΔ.ⲆΔΔΔΔΔΔΔΔ);
    ᐃΔ[621][ts.ⵠⵠⵠ].push(ΔΔ.ⵠᐃΔⲆⵠⲆᐃΔⵠ);
    ᐃΔ[621][ts.ⵠΔⵠ].push(ΔΔ.ⵠⲆᐃⲆΔⵠᐃⲆⲆ);
    ᐃΔ[621][ts.ⵠΔⵠ].push(ΔΔ.ᐃᐃΔⲆⵠⵠⵠΔᐃ);
    ᐃΔ[621][ts.ⵠΔⵠ].push(ΔΔ.ⲆΔⵠⵠⵠᐃⵠⲆΔ);
    ᐃΔ[619] = [];
    ᐃΔ[619][ts.ⵠⵠⵠ] = [];
    ᐃΔ[619][ts.ⵠΔⵠ] = [];
    ᐃΔ[619][ts.ⵠⵠⵠ].push(ΔΔ.ΔᐃΔⵠⵠΔᐃᐃⵠ);
    ᐃΔ[619][ts.ⵠⵠⵠ].push(ΔΔ.ⲆΔᐃⲆⲆΔᐃⲆΔ);
    ᐃΔ[619][ts.ⵠⵠⵠ].push(ΔΔ.ⲆΔⵠⲆΔΔΔΔⵠ);
    ᐃΔ[619][ts.ⵠΔⵠ].push(ΔΔ.ΔᐃᐃΔⲆⲆⵠᐃᐃ);
    ᐃΔ[619][ts.ⵠΔⵠ].push(ΔΔ.ⲆΔᐃⲆᐃΔΔΔⵠ);
    ᐃΔ[619][ts.ⵠΔⵠ].push(ΔΔ.ᐃᐃⵠΔᐃⲆⵠⲆΔ);
    ᐃΔ[620] = [];
    ᐃΔ[620][ts.ⵠⵠⵠ] = [];
    ᐃΔ[620][ts.ⵠΔⵠ] = [];
    ᐃΔ[620][ts.ⵠⵠⵠ].push(ΔΔ.ᐃΔⵠⵠΔⵠΔⲆⵠ);
    ᐃΔ[620][ts.ⵠⵠⵠ].push(ΔΔ.ⲆⲆⲆΔᐃⲆᐃᐃⵠ);
    ᐃΔ[620][ts.ⵠⵠⵠ].push(ΔΔ.ⵠⲆⵠΔⵠⲆᐃΔΔ);
    ᐃΔ[620][ts.ⵠΔⵠ].push(ΔΔ.ⵠⵠⵠⲆΔᐃᐃᐃΔ);
    ᐃΔ[620][ts.ⵠΔⵠ].push(ΔΔ.ᐃⲆⲆⲆΔⲆⵠⵠᐃ);
    ᐃΔ[620][ts.ⵠΔⵠ].push(ΔΔ.ⲆᐃᐃⵠᐃⵠⵠΔΔ);
    ᐃᐃᐃᐃ.g = [];
    ᐃᐃᐃᐃ.g[0] = [ΔΔ.ΔⲆᐃⲆΔⲆᐃ, ΔΔ.ΔᐃⲆⲆΔⵠⵠ];
    ᐃᐃᐃᐃ.g[1] = ᐃᐃᐃᐃ.g[0];
    ᐃᐃᐃᐃ.g[2] = [ΔΔ.ᐃᐃⵠⲆᐃᐃᐃ, ΔΔ.ΔᐃⲆΔᐃΔΔ];
    ᐃᐃᐃᐃ.m = [];
    ᐃᐃᐃᐃ.m[0] = [ΔΔ.ⲆⲆᐃⲆⲆΔΔ, ΔΔ.ᐃΔΔⲆᐃΔⵠ];
    ᐃᐃᐃᐃ.m[1] = ᐃᐃᐃᐃ.m[0];
    ᐃᐃᐃᐃ.m[2] = [ΔΔ.ΔⲆⵠᐃⲆᐃΔ, ΔΔ.ⲆⵠΔΔⲆⵠᐃ];
    ᐃᐃᐃᐃ.la = [];
    ᐃᐃᐃᐃ.la[0] = [ΔΔ.ᐃⵠᐃᐃⲆᐃᐃ, ΔΔ.ⵠᐃΔᐃⵠⵠΔ];
    ᐃᐃᐃᐃ.la[1] = ᐃᐃᐃᐃ.la[0];
    ᐃᐃᐃᐃ.la[2] = ᐃᐃᐃᐃ.la[0];
    ᐃᐃᐃᐃ.la[3] = ᐃᐃᐃᐃ.la[0];
    ᐃᐃᐃᐃ.la[4] = ᐃᐃᐃᐃ.la[0];
    ᐃᐃᐃᐃ.la[5] = ᐃᐃᐃᐃ.la[0];
    ᐃᐃᐃᐃ.s = [];
    ᐃᐃᐃᐃ.s[0] = [ΔΔ.ΔⲆⲆⲆⲆᐃⵠ, ΔΔ.ᐃⲆΔⵠⵠⵠⵠ];
    ᐃᐃᐃᐃ.s[1] = ᐃᐃᐃᐃ.s[0];
    ᐃᐃᐃᐃ.s[2] = [ΔΔ.ΔⲆⲆᐃⲆᐃⲆ, ΔΔ.ΔΔᐃⲆΔᐃᐃ];
    ᐃᐃᐃᐃ.p = [];
    ᐃᐃᐃᐃ.p[0] = [ΔΔ.ⲆΔΔⵠⲆΔᐃ, ΔΔ.ⲆΔΔⵠⲆΔᐃ];
    ᐃᐃᐃᐃ.a = [];
    ᐃᐃᐃᐃ.a[0] = [ΔΔ.ᐃⲆⲆⵠΔΔⵠ, ΔΔ.ΔⵠⲆᐃᐃⵠⲆ];
    ᐃᐃᐃᐃ.a[1] = ᐃᐃᐃᐃ.a[0];
    ᐃᐃᐃᐃ.a[2] = ᐃᐃᐃᐃ.a[0];
    ᐃᐃᐃᐃ.d = [];
    ᐃᐃᐃᐃ.d[0] = [ΔΔ.ΔⵠⲆⵠⲆᐃⲆ, ΔΔ.ⲆⲆΔΔⲆᐃⵠ];
    ᐃᐃᐃᐃ.d[1] = ᐃᐃᐃᐃ.d[0];
    ᐃᐃᐃᐃ.d[2] = ᐃᐃᐃᐃ.d[0];
    ᐃᐃᐃᐃ.re = [];
    ᐃᐃᐃᐃ.re[0] = [ΔΔ.ⲆᐃΔⲆⵠⵠⵠ, ΔΔ.ᐃⲆⵠⲆᐃᐃⲆ];
    ᐃᐃᐃᐃ.re[1] = ᐃᐃᐃᐃ.re[0];
    ᐃᐃᐃᐃ.re[2] = ᐃᐃᐃᐃ.re[0];
    ᐃᐃᐃᐃ.f = [];
    ᐃᐃᐃᐃ.f[0] = [ΔΔ.ᐃΔᐃⵠᐃⲆⲆ, ΔΔ.ⵠΔᐃⲆⲆⵠΔ];
    ᐃᐃᐃᐃ.f[1] = ᐃᐃᐃᐃ.f[0];
    ᐃᐃᐃᐃ.f[2] = ᐃᐃᐃᐃ.f[0];
    ᐃᐃᐃᐃ.isl = [];
    ᐃᐃᐃᐃ.isl[0] = [ΔΔ.ⵠΔⲆⵠΔᐃᐃ, ΔΔ.ᐃΔΔⵠΔᐃΔ];
    ᐃᐃᐃᐃ.isl[1] = ᐃᐃᐃᐃ.isl[0];
    ᐃᐃᐃᐃ.isl[2] = ᐃᐃᐃᐃ.isl[0];
    ᐃᐃᐃᐃ.c = [];
    ᐃᐃᐃᐃ.c[0] = [ΔΔ.ⲆⵠⲆΔΔⲆΔ, ΔΔ.ⵠΔⲆⲆᐃⵠᐃ];
    ᐃᐃᐃᐃ.c[1] = ᐃᐃᐃᐃ.c[0];
    ᐃᐃᐃᐃ.c[2] = ᐃᐃᐃᐃ.c[0];
    ᐃᐃᐃᐃ.wtb = [];
    ᐃᐃᐃᐃ.wtb[0] = [ΔΔ.ᐃⵠᐃⵠⵠΔᐃ, ΔΔ.ⵠⵠⵠⲆⵠⲆᐃ];
    ᐃᐃᐃᐃ.PIRANHA = [ΔΔ.ΔᐃᐃⵠⲆⵠⲆ, ΔΔ.ⵠᐃΔⲆⵠⵠⲆ];
    ᐃᐃᐃᐃ.KRAKEN = [ΔΔ.ⲆΔΔⵠᐃᐃⲆ, ΔΔ.ᐃᐃⵠᐃᐃⵠᐃ];
    ᐃᐃᐃᐃ.FOX = [ΔΔ.ⲆΔΔⲆΔΔᐃ, ΔΔ.ⵠⲆᐃᐃΔΔᐃ];
    ᐃᐃᐃᐃ.WOLF = [ΔΔ.ⲆⲆⲆⵠΔⲆⵠ, ΔΔ.ᐃᐃᐃᐃⲆⲆⵠ];
    ᐃᐃᐃᐃ.SPIDER = [ΔΔ.ΔⵠΔⵠΔⵠΔ, ΔΔ.ΔⲆᐃⵠⵠΔΔ];
    ᐃᐃᐃᐃ.BEAR = [ΔΔ.ΔᐃⲆⵠⲆᐃⵠ, ΔΔ.ⲆⵠⲆΔⵠᐃΔ];
    ᐃᐃᐃᐃ.CAVE = [ΔΔ.ⲆᐃⲆΔⲆᐃⵠ, ΔΔ.ᐃᐃⲆΔΔⵠⲆ];
    ᐃᐃᐃᐃ.MAP = [ΔΔ.ⲆᐃⲆᐃⲆᐃΔ, ΔΔ.ⵠᐃⲆⲆΔⲆΔ];
    ᐃᐃᐃᐃ.FOREST = [ΔΔ.ⵠⵠⲆⵠⵠⲆΔ, ΔΔ.ᐃⲆⵠⵠⵠⲆⵠ];
    ᐃᐃᐃᐃ.WINTER = [ΔΔ.ⵠΔΔΔΔⵠΔ, ΔΔ.ⲆⲆᐃᐃⲆΔᐃ];
    ᐃᐃᐃᐃ.DESERT = [ΔΔ.ⲆᐃᐃⲆΔⵠⵠ, ΔΔ.ⵠⵠⲆⲆΔⵠΔ];
    ᐃᐃᐃᐃ.LAVA = [ΔΔ.ⵠΔⵠⵠΔⲆⲆ, ΔΔ.ⲆⵠⲆⲆⵠᐃΔ];
    for (var c in ᐃᐃᐃᐃ) {
      for (var d = ᐃᐃᐃᐃ[c], e = 0; e < d.length; e++) {
        var f = d[e];
        if (f.ⵠⵠⵠΔⲆⲆᐃ !== undefined) {
          f.ⵠⵠⵠΔⲆⲆᐃ();
        } else if (f.length > 0) {
          for (var g = 0; g < f.length; g++) {
            if (f[g].ⵠⵠⵠΔⲆⲆᐃ !== undefined) {
              f[g].ⵠⵠⵠΔⲆⲆᐃ();
            }
          }
        }
      }
    }
    console.log(undefined, Ya);
  }
  function tc(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 200;
    g.translate(b * 5, b * 15);
    if (e == 1) {
      g.translate(0, b * -5);
      jb(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      Lb(g, d[1], d[5], b * 20);
      jb(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      Lb(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 31.267044067382812);
      Wb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
      g.restore();
      Lb(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 13.267044067382812);
      Wb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
      g.restore();
      Lb(g, d[1], d[5], b * 20);
    }
    jb(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    Lb(g, d[1], d[2], b * 7);
    jb(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    Lb(g, d[1], d[2], b * 7);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    g.closePath();
    Lb(g, d[1], d[2], b * 8);
    jb(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    Lb(g, d[1], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    g.closePath();
    Lb(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    g.closePath();
    Lb(g, d[3], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    g.closePath();
    Lb(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    g.closePath();
    Lb(g, d[3], d[2], b * 4);
    jb(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    Lb(g, d[3], d[2], b * 4);
    g.save();
    g.translate(b * 77.00003051757812, b * 31.267044067382812);
    g.rotate(0);
    Wb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
    g.restore();
    Lb(g, d[1], d[2], b * 7);
    g.save();
    g.translate(b * 77.00003051757812, b * 13.267044067382812);
    g.rotate(0);
    Wb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
    g.restore();
    Lb(g, d[1], d[2], b * 7);
    return f;
  }
  function nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    Lb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    Lb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    Lb(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    Lb(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    Lb(e, eg, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    Lb(e, c[2]);
    return d;
  }
  function oc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    jb(d, a * 86.5, a * 98, a * 80);
    Lb(d, b[0]);
    d.globalAlpha = 1;
    jb(d, a * 86.5, a * 89, a * 81);
    Lb(d, b[1], b[2], a * 4);
    jb(d, a * 86.5, a * 86, a * 59);
    Lb(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    jb(d, a * 86.5, a * 95, a * 34);
    Lb(d, b[0]);
    d.globalAlpha = 1;
    jb(d, a * 86.5, a * 89, a * 34);
    Lb(d, b[5]);
    return c;
  }
  function ac(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Lb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Lb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Lb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Lb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Lb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Lb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Lb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Lb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Lb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Lb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Lb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Lb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Lb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Lb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Lb(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Lb(d, b[1]);
    jb(d, a * 102, a * 269, a * 11);
    Lb(d, b[3]);
    jb(d, a * 98, a * 266, a * 5);
    Lb(d, b[6]);
    jb(d, a * 168, a * 269, a * 11);
    Lb(d, b[3]);
    jb(d, a * 164, a * 266, a * 5);
    Lb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Lb(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    Lb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    Lb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Lb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Lb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Lb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Lb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Lb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Lb(d, b[7]);
    return c;
  }
  function rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    jb(e, a * 220, a * 201, a * 170.41713528867922);
    Lb(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    jb(e, a * 220, a * 201, a * 170.41713528867922);
    Lb(e, c[1], c[2], a * 6);
    jb(e, a * 220, a * 201, a * 130);
    Lb(e, c[11], c[2], a * 6);
    jb(e, a * 222, a * 199, a * 120.74767078498864);
    Lb(e, Yq, c[3], a * 40);
    jb(e, a * 220, a * 200, a * 95.44108130150245);
    Lb(e, pj, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    jb(e, a * 63, a * 136, a * 49.193495504995376);
    Lb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    jb(e, a * 63, a * 136, a * 49.193495504995376);
    Lb(e, c[8], c[2], a * 4);
    jb(e, a * 63, a * 137, a * 25.632011235952593);
    Lb(e, c[7], c[2], a * 4);
    return d;
  }
  function sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    Wb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    Wb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    Lb(e, ir, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    Wb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    Wb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    Lb(e, xs, c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    Lb(e, Wh, c[1], a * 10);
    return d;
  }
  function hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    Wb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    Wb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    Wb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    Wb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    Lb(e, c[2]);
    return d;
  }
  function gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      Lb(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    Lb(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    Lb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    e.closePath();
    Lb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    Lb(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    Lb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    Lb(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    Lb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    Lb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    Lb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    Lb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    Lb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    Lb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    Lb(e, b[3], b[3], a * 12);
    return d;
  }
  function lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    Lb(e, c[1], c[2], a * 6);
    return d;
  }
  function uc(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    jb(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    Lb(d, ir, c[2], a * 4);
    jb(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    Lb(d, undefined, c[1], a * 4);
    jb(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    Lb(d, undefined, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    Wb(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    Lb(d, c[2], c[1], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    Hb(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    Lb(d, c[3]);
    jb(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    Lb(d, c[3]);
    return e;
  }
  function bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Lb(e, Yj, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    Lb(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Lb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    Lb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    Lb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    Lb(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    Lb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    Lb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Lb(e, undefined, c[2], a * 11);
    return d;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Lb(e, undefined, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Lb(e, undefined, c[1], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Lb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    Lb(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    Lb(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    Lb(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Lb(e, undefined, c[3], a * 4);
    return d;
  }
  function vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    Lb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    Lb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    Lb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    Lb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    Lb(e, ij, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    Lb(e, lg, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    Lb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    Lb(e, pa, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    Lb(e, Yq, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    e.closePath();
    Lb(e, ir, c[4], a * 6);
    return d;
  }
  function mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    Lb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    Lb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    Lb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    Lb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    Lb(e, c[2]);
    return d;
  }
  function cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    Wb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    Lb(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    Wb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    Lb(e, c[0], c[0], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    Wb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    Lb(e, c[0], c[0], a * 4);
    e.translate(a * 5, a * 0);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    Wb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    Lb(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    Wb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    Lb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    Wb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    Lb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    Lb(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    Lb(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    Lb(e, c[9], c[8], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    Lb(e, c[11], c[10], a * 3);
    return d;
  }
  function pc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * 100;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function Cc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    Lb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    Lb(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    Lb(d, b[2]);
    return c;
  }
  function Tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    Lb(e, c[0], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    Lb(e, c[1]);
    return d;
  }
  function fc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    jb(d, a * 126.5, a * 134, a * 119);
    Lb(d, b[0]);
    d.globalAlpha = 1;
    jb(d, a * 126.5, a * 124, a * 119);
    Lb(d, b[1], b[2], a * 4);
    jb(d, a * 126.5, a * 127, a * 100);
    Lb(d, b[3]);
    d.globalAlpha = 0.5;
    jb(d, a * 126.5, a * 135, a * 81);
    Lb(d, b[0]);
    d.globalAlpha = 1;
    jb(d, a * 126.5, a * 125, a * 84);
    Lb(d, b[4], b[5], a * 4);
    jb(d, a * 126.5, a * 125, a * 61);
    Lb(d, b[6], b[7], a * 4);
    d.globalAlpha = 0.5;
    jb(d, a * 126.5, a * 134, a * 40);
    Lb(d, b[8]);
    d.globalAlpha = 1;
    jb(d, a * 126.5, a * 125, a * 40);
    Lb(d, b[9]);
    return c;
  }
  function zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    Lb(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    Lb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    Lb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    Lb(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    Lb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    Lb(e, Tj, c[1], a * 4);
    jb(e, a * 58, a * 50, a * 5);
    Lb(e, c[4]);
    jb(e, a * 43, a * 65, a * 5);
    Lb(e, c[4]);
    jb(e, a * 58, a * 73, a * 5);
    Lb(e, c[4]);
    jb(e, a * 58, a * 50, a * 2);
    Lb(e, c[5]);
    jb(e, a * 43, a * 65, a * 2);
    Lb(e, c[5]);
    jb(e, a * 58, a * 73, a * 2);
    Lb(e, c[5]);
    return d;
  }
  function yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    Wb(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    Lb(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    Wb(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    Lb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    Lb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    Lb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    Lb(e, c[2], c[1], a * 4);
    jb(e, a * 71, a * 44.375, a * 16.55294535724685);
    Lb(e, c[2], c[1], a * 4);
    jb(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    Lb(e, c[2], c[1], a * 4);
    return d;
  }
  function wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    jb(e, a * 54.5, a * 55, a * 48.038209575038294);
    Lb(e, b[0], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      Lb(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      Wb(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      Lb(e, b[2], b[3], a * 4);
      jb(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      Lb(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      Wb(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      Lb(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      Lb(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      Lb(e, Tj, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      Lb(e, pj, b[5], a * 4);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      Lb(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      Lb(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      Lb(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      Lb(e, b[2]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      Lb(e, b[2], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      Lb(e, b[3]);
    }
    return d;
  }
  function Pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    Wb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    Lb(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    Wb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    Lb(e, c[5]);
    e.restore();
    return d;
  }
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Lb(e, undefined, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    Lb(e, c[3], c[2], a * 12);
    e.translate(0, a * 25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    Lb(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Lb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    Lb(e, pj, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    Lb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    Lb(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    Lb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    Lb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Lb(e, undefined, c[2], a * 11);
    return d;
  }
  function Ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    Wb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    Lb(e, c[0]);
    Wb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    Lb(e, c[0]);
    Wb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    Lb(e, c[0]);
    Wb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    Lb(e, c[0]);
    Wb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    Wb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    Lb(e, c[1]);
    Wb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    Lb(e, c[1]);
    Wb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    Lb(e, c[2], c[3], a * 4);
    Wb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    Lb(e, c[2], c[3], a * 4);
    Wb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    Lb(e, c[2], c[3], a * 4);
    return d;
  }
  function xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0 : 0;
    jb(e, a * 178.5, a * 172.828125, a * 150);
    Lb(e, undefined, c[0], a * 65);
    jb(e, a * 178.5, a * 172.828125, a * 150);
    Lb(e, Wh, c[0], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    Wb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    Wb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    Wb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    Lb(e, c[0]);
    e.translate(3, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    Lb(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    Lb(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * 15, a * 35);
    jb(e, a * 178.5, a * 172.828125, a * 150);
    Lb(e, undefined, c[2], a * 95);
    jb(e, a * 178.5, a * 172.828125, a * 150);
    Lb(e, undefined, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    Wb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    Lb(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    Wb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    Lb(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    Wb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    Lb(e, c[1], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    Lb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    Lb(e, c[1]);
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    Lb(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    Lb(e, c[1], c[1], a * 7);
    e.restore();
    return d;
  }
  function Jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(0, a * 10);
    e.scale(0.2, 0.2);
    e.translate(0, a * -30);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      Lb(e, b[0], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    Lb(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    Lb(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    Lb(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    Lb(e, b[2], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    Lb(e, b[1]);
    e.scale(3, 3);
    e.translate(15, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 32);
      e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      Lb(e, undefined, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      e.closePath();
      Lb(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    Lb(e, undefined, b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    Lb(e, b[1], b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    Lb(e, El, b[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    Lb(e, b[2], b[2], a * 10);
    return d;
  }
  function Mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    Wb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    Wb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    Wb(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    Lb(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80, a * 79.5);
    Wb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    Wb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    Lb(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    Lb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    Lb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    Lb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    Lb(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    Wb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 78.5, a * 78);
    Wb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    Lb(e, c[3], c[4], a * 6);
    return d;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    jb(e, a * 69, a * 64, a * 48.16637831516918);
    Lb(e, c[1]);
    e.globalAlpha = 0.7;
    jb(e, a * 69, a * 64, a * 38.23105625617661);
    Lb(e, c[2]);
    e.globalAlpha = 0.7;
    jb(e, a * 69, a * 64, a * 32.01562118716424);
    Lb(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    Lb(e, c[3]);
    return d;
  }
  function Dc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    Lb(d, b[0]);
    return c;
  }
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    Lb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    Lb(e, c[1], c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    Lb(e, Tj, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    Lb(e, undefined, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    Lb(e, c[3], c[2], a * 19);
    jb(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    Lb(e, c[4]);
    jb(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    Lb(e, c[4]);
    jb(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    Lb(e, c[4]);
    jb(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    Lb(e, c[4]);
    jb(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    Lb(e, c[4]);
    jb(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    Lb(e, c[4]);
    jb(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    Lb(e, c[4]);
    jb(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    Lb(e, c[4]);
    jb(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    Lb(e, c[4]);
    jb(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    Lb(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    Lb(e, c[5]);
    return d;
  }
  function Ic(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 120;
    e.height = b * 100;
    Wb(f, b * 10, b * 10, b * 95, b * 80, b * 10);
    Lb(f, c[2]);
    Wb(f, b * 10, b * 5, b * 95, b * 80, b * 10);
    Lb(f, c[3], c[4], b * 4);
    if (d == 0) {
      var g = $c(b * 0.75, c, 0);
      f.drawImage(g, b * 22, b * 18);
    } else if (d == 1) {
      g = $c(b * 0.75, c, 1);
      f.drawImage(g, b * 22, b * 18);
    }
    return e;
  }
  function Sc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    Lb(d, b[0]);
    return c;
  }
  function Qc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    jb(d, a * 55, a * 55, a * 55);
    Lb(d, b[0]);
    return c;
  }
  function _c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(0);
    Wb(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    Lb(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    Wb(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    e.restore();
    Lb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    Lb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    Lb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    Lb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    Wb(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
    e.restore();
    Lb(e, undefined, c[5], a * 4);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    Wb(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    Lb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    Wb(e, a * -10, a * -10, a * 20, a * 20, a * 5);
    e.restore();
    Lb(e, c[6], c[7], a * 4);
    return d;
  }
  function Rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    Lb(d, b[0]);
    return c;
  }
  function Fc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    Lb(d, b[0]);
    return c;
  }
  function jc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    Lb(d, b[0]);
    return c;
  }
  function Lc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    Lb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    Lb(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    Lb(d, b[2]);
    return c;
  }
  function Wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    Lb(e, c[0], c[0], a * 10);
    e.translate(a * 0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    Lb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    Lb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    Lb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    Lb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    Lb(e, c[1], c[1], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    Lb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    Lb(e, c[2], c[3], a * 10);
    jb(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    Lb(e, c[4], c[5], a * 1);
    jb(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    Lb(e, c[4], c[5], a * 1);
    jb(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    Lb(e, c[4], c[5], a * 1);
    jb(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    Lb(e, c[4], c[5], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    Lb(e, c[4], c[5], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    Lb(e, c[6]);
    return d;
  }
  function Gc(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var a = b * 4;
    c.width = e;
    c.height = f;
    Wb(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
    Lb(d, null, "#BBE8EF", a);
    return c;
  }
  function qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    Wb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    Lb(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    Lb(e, Yq, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    Lb(e, pj, c[6], a * 15);
    return d;
  }
  function Nc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    jb(d, a * 74.5, a * 85, a * 66);
    Lb(d, b[0]);
    d.globalAlpha = 1;
    jb(d, a * 75.5, a * 72.5, a * 67);
    Lb(d, b[1], b[2], a * 4);
    jb(d, a * 75.5, a * 73.5, a * 54);
    Lb(d, b[3]);
    d.globalAlpha = 0.5;
    jb(d, a * 74.5, a * 80.5, a * 39);
    Lb(d, b[4]);
    d.globalAlpha = 1;
    jb(d, a * 74.5, a * 74.5, a * 37);
    Lb(d, b[5]);
    return c;
  }
  function Oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    Wb(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    Lb(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    Wb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    Wb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    Lb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    Wb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    Wb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    Lb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    Wb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    Wb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    Lb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    Wb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    Wb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    Lb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    Wb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    Wb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    Lb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    Wb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    Wb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    Lb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    Wb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    Wb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    Lb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    Wb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    Wb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    Lb(e, c[2], c[3], a * 3);
    return d;
  }
  function Hc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 496;
    e.height = b * 520;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    f.closePath();
    Lb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -10);
    jb(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    Lb(f, d[5], undefined, b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    f.closePath();
    Lb(f, d[0]);
    f.globalAlpha = 1;
    var g = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      jb(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      Lb(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      jb(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      Lb(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    f.drawImage(g, 0, 0);
    f.translate(0, b * -10);
    jb(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    Lb(f, pj, d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    Lb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    Lb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    Lb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    Lb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    Lb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    Lb(f, d[4], d[2], b * 12);
    return e;
  }
  function Uc() {
    var b = ix.time;
    if (ᐃΔ[285]) {
      Mo.drawImage(ᐃΔ[285][b][1], dq + 480, eq + 190);
      Mo.drawImage(ᐃΔ[285][b][2], dq + 180, eq - 430);
      Mo.drawImage(ᐃΔ[285][b][1], dq - 855, eq + 100);
      Mo.drawImage(ᐃΔ[285][b][0], dq - 550, eq - 300);
      Mo.drawImage(ᐃΔ[285][b][0], dq - 1020, eq - 520);
    }
    if (ᐃΔ[108]) {
      Mo.drawImage(ᐃΔ[108][b][1], dq - 80, eq - 640);
      Mo.drawImage(ᐃΔ[108][b][1], dq + 80, eq + 490);
      Mo.drawImage(ᐃΔ[108][b][2], dq - 180, eq - 700);
      Mo.drawImage(ᐃΔ[108][b][0], dq + 550, eq + 100);
      Mo.drawImage(ᐃΔ[108][b][1], dq + 450, eq + 300);
      Mo.drawImage(ᐃΔ[108][b][1], dq + 780, eq + 300);
      Mo.drawImage(ᐃΔ[108][b][2], dq + 980, eq + 200);
      Mo.drawImage(ᐃΔ[108][b][2], dq + 680, eq + 600);
      Mo.drawImage(ᐃΔ[108][b][2], dq - 380, eq + 100);
      Mo.drawImage(ᐃΔ[108][b][2], dq + 280, eq + 250);
    }
    if (ᐃΔ[110]) {
      Mo.drawImage(ᐃΔ[110][b][0], dq - 590, eq);
      Mo.drawImage(ᐃΔ[110][b][0], dq + 120, eq - 390);
      Mo.drawImage(ᐃΔ[110][b][0], dq - 270, eq + 340);
    }
    if (ᐃΔ[109]) {
      Mo.drawImage(ᐃΔ[109][b][4], dq - 700, eq - 600);
      Mo.drawImage(ᐃΔ[109][b][2], dq - 970, eq - 250);
      Mo.drawImage(ᐃΔ[109][b][5], dq - 720, eq - 200);
      Mo.drawImage(ᐃΔ[109][b][2], dq - 1020, eq + 340);
      Mo.drawImage(ᐃΔ[109][b][0], dq - 1120, eq - 0);
      Mo.drawImage(ᐃΔ[109][b][1], dq - 650, eq - 330);
      Mo.drawImage(ᐃΔ[109][b][4], dq - 495, eq - 90);
      Mo.drawImage(ᐃΔ[109][b][3], dq - 520, eq + 340);
      Mo.drawImage(ᐃΔ[109][b][2], dq + 830, eq - 520);
    }
    ᐃΔ[413];
    if (lx && kx) {
      var c = lx.ⲆΔᐃ.x;
      var d = lx.ⲆΔᐃ.y;
      lx.ⲆΔᐃ.x = dq;
      lx.ⲆΔᐃ.y = eq;
      var e = kx.time;
      kx.time = ix.time;
      var f;
      var g = ix.items;
      g[2].x = 400;
      g[2].y = 100;
      g[2].ΔᐃⲆΔ(114);
      (f = g[1]).x = -500;
      f.y = 100;
      f.Δᐃᐃᐃ[0].x = f.x - 20.5;
      f.Δᐃᐃᐃ[0].y = f.y - 22.5;
      f.Δᐃᐃᐃ[1].x = f.x - 35.5;
      f.Δᐃᐃᐃ[1].y = f.y + 7.5;
      f.Δᐃᐃᐃ[2].x = f.x + 7.5;
      f.Δᐃᐃᐃ[2].y = f.y - 30;
      f.Δᐃᐃᐃ[3].x = f.x + 22.5;
      f.Δᐃᐃᐃ[3].y = f.y;
      f.Δᐃᐃᐃ[4].x = f.x - 7.5;
      f.Δᐃᐃᐃ[4].y = f.y + 14.5;
      for (var a = 0; a < f.info; a++) {
        f.Δᐃᐃᐃ[a].ΔᐃⲆΔ(294);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.Δᐃᐃᐃ[0].x = f.x - 20.5;
      f.Δᐃᐃᐃ[0].y = f.y - 22.5;
      f.Δᐃᐃᐃ[1].x = f.x - 35.5;
      f.Δᐃᐃᐃ[1].y = f.y + 7.5;
      f.Δᐃᐃᐃ[2].x = f.x + 7.5;
      f.Δᐃᐃᐃ[2].y = f.y - 30;
      f.Δᐃᐃᐃ[3].x = f.x + 22.5;
      f.Δᐃᐃᐃ[3].y = f.y;
      f.Δᐃᐃᐃ[4].x = f.x - 7.5;
      f.Δᐃᐃᐃ[4].y = f.y + 14.5;
      for (a = 0; a < f.info; a++) {
        f.Δᐃᐃᐃ[a].ΔᐃⲆΔ(294);
      }
      g[0].x = 450;
      g[0].y = -100;
      g[0].ⵠⲆⲆΔⲆ(113);
      g[0].ⲆΔᐃⲆᐃ();
      lx.ⲆΔᐃ.x = c;
      lx.ⲆΔᐃ.y = d;
      kx.time = e;
    }
  }
  function Yc(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    Wb(e, b * 10, b * 12, b * 110, b * 90, b * 10);
    Lb(e, c[0]);
    Wb(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    Lb(e, c[1], c[2], b * 4);
    var a = Yb(-Math.PI / 5, Yt(b * 0.5, Jk, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 12, b * 18);
    a = Yb(Math.PI / 4, Cm(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 36, b * 16);
    return d;
  }
  function Kc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    Lb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    Lb(d, b[0]);
    return c;
  }
  function Vc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    Lb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    Lb(d, undefined, b[1], a * 12);
    d.translate(a * -1, a * 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    Lb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    Lb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    Lb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    Lb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    Lb(d, b[2], b[3], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    Lb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    Lb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    Lb(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    Lb(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    Lb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    Lb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    Lb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    Lb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    Lb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    Lb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    Lb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    Lb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    Lb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    Lb(d, b[11]);
    jb(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    Lb(d, b[12]);
    jb(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    Lb(d, b[13]);
    jb(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    Lb(d, b[12]);
    jb(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    Lb(d, b[13]);
    return c;
  }
  function Xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    Lb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    Lb(e, c[4], c[5], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    Wb(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    Lb(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    Wb(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    Lb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    Lb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    Lb(e, c[4], c[5], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    Lb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    Lb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    Lb(e, c[3], c[2], a * 4);
    e.scale(0.5, 0.5);
    e.translate(a * 100, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    Lb(e, c[6], c[2], a * 4);
    return d;
  }
  function Zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    Lb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    Lb(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    Wb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    Lb(e, c[0]);
    e.translate(a * 0, 0);
    e.globalAlpha = 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    Lb(e, c[3], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    Lb(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    Lb(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    Wb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    Lb(e, c[1], c[2], a * 3);
    return d;
  }
  (function () {
    const a = {
      ⲆⲆᐃᐃⵠᐃΔ: 13406749,
      ᐃΔΔᐃΔⲆⵠⵠΔ: 11713331,
      ᐃᐃΔᐃⲆΔⲆ: 6196949,
      ⵠⵠⲆⲆΔⵠⲆ: 34645
    };
  })();
  ;
  function $c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(a * 7, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      Wb(e, a * 0, a * 5, a * 90, a * 60, 10);
      Lb(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      jb(e, a * 25, a * 40, a * 10);
      e.fill();
      jb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      Wb(e, 0, 0, a * 90, a * 60, a * 10);
      Lb(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      jb(e, a * 25, a * 40, a * 10);
      e.fill();
      jb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      Lb(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      Lb(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      Lb(e, b[1]);
      e.restore();
      e.save();
      Wb(e, 0, a * 15, a * 90, a * 50, a * 10);
      Lb(e, b[0]);
      Wb(e, 0, a * 10, a * 90, a * 50, a * 10);
      Lb(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      jb(e, a * 25, a * 40, a * 10);
      e.fill();
      jb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function ip(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 185;
    e.height = b * 164;
    f.translate(0, 0);
    var g = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * 5);
      e.globalAlpha = b ? 0.5 : 1;
      jb(e, a * 100.5, a * 82, a * 74.92746655359852);
      Lb(e, c[0], c[0], a * 4);
      jb(e, a * 100.5, a * 82, a * 65.9417374971317);
      Lb(e, c[0], c[0], a * 4);
      e.translate(0, -5);
      e.globalAlpha = 1;
      jb(e, a * 100.5, a * 82, a * 74.92746655359852);
      Lb(e, c[1], c[3], a * 4);
      jb(e, a * 100.5, a * 82, a * 65.9417374971317);
      Lb(e, c[1], c[2], a * 4);
      jb(e, a * 100.5, a * 82, a * 35.9417374971317);
      Lb(e, c[1], c[2], a * 20);
      jb(e, a * 100.5, a * 82, a * 15.9417374971317);
      Lb(e, c[1], c[2], a * 6);
      return d;
    }(b, c, d);
    f.drawImage(g, b * -10, b * 0);
    g = jm(b, c, d, 0);
    f.drawImage(g, b * -83, b * -40);
    g = jm(b, c, d, Math.PI / 1.4);
    f.drawImage(g, b * -15, b * -88);
    g = jm(b, c, d, Math.PI / -1.4);
    f.drawImage(g, b * 15, b * -8);
    return e;
  }
  function tp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Hb(e, 6, a * 40, a * 10);
    e.restore();
    Lb(e, c[0], c[1], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Hb(e, 6, a * 25.11521001172521, a * 10);
    e.restore();
    Lb(e, c[2], c[3], a * 5);
    return d;
  }
  function np(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    Lb(d, b[0]);
    d.translate(0, a * -8);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    Lb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    Lb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    Lb(d, b[1], b[2], a * 4);
    jb(d, a * 51, a * 91, a * 9);
    Lb(d, b[3]);
    jb(d, a * 95, a * 91, a * 9);
    Lb(d, b[3]);
    jb(d, a * 91, a * 89, a * 4);
    Lb(d, b[4]);
    jb(d, a * 47, a * 89, a * 4);
    Lb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    Lb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    Lb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    Lb(d, _g, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    Lb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    Lb(d, b[6]);
    return c;
  }
  function op(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    Lb(e, c[0], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    Lb(e, Gs, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    Lb(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    Lb(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    Lb(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    Lb(e, c[2], c[3], a * 12);
    return d;
  }
  function ap(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    Lb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    Lb(e, c[1], c[2], a * 10);
    return d;
  }
  function rp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    Wb(d, 0, 0, 20, 35, 7);
    Lb(d, b[0]);
    return c;
  }
  function sp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    Lb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    Lb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    Lb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    Lb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    Lb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    Lb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    Lb(e, c[8], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    Lb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    Lb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    Lb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    Lb(e, c[3], c[2], a * 4);
    jb(e, a * 108.5, a * 148.421875, a * 9);
    Lb(e, c[5]);
    jb(e, a * 106.5, a * 144.421875, a * 3);
    Lb(e, c[6]);
    jb(e, a * 46.5, a * 148.421875, a * 9);
    Lb(e, c[5]);
    jb(e, a * 44.5, a * 144.421875, a * 3);
    Lb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    Lb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.translate(0, a * -2);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    Lb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    Lb(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    Lb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    Lb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    Lb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    Lb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    Lb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    Lb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    Lb(e, c[3], c[2], a * 4);
    return d;
  }
  function hp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 198;
    f.height = b * 147;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 76);
    g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    g.closePath();
    Lb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    Lb(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    Lb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 49, b * 98);
    g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    g.closePath();
    Lb(g, d[1]);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 54, b * 98);
    g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    g.closePath();
    Lb(g, d[0]);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 118, b * 47);
    g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
    g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
    g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    g.closePath();
    Lb(g, d[1], d[2], b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 62, b * 21);
    g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    g.closePath();
    Lb(g, d[4]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 60, b * 29);
    g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    Lb(g, pj, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 61, b * 37);
    g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    Lb(g, ir, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 52, b * 31);
    g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    Lb(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 35);
    g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    Lb(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 58, b * 44);
    g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    Lb(g, _g, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 48);
    g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    Lb(g, Yj, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 41);
    g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    Lb(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 48);
    g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    Lb(g, _g, d[3], b * 4);
    if (e == 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 99, b * 101);
      g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      Lb(g, undefined, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      Lb(g, undefined, d[5], b * 6);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      Lb(g, Yj, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      Lb(g, undefined, d[5], b * 6);
      jb(g, b * 86, b * 114.39999389648438, b * 4.5);
      Lb(g, d[1], d[5], b * 6);
      jb(g, b * 121, b * 114.39999389648438, b * 4.5);
      Lb(g, d[1], d[5], b * 6);
    }
    return f;
  }
  function gp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    jb(e, a * 220, a * 201, a * 170.41713528867922);
    Lb(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    jb(e, a * 220, a * 201, a * 170.41713528867922);
    Lb(e, c[1], c[2], a * 6);
    jb(e, a * 220, a * 201, a * 130);
    Lb(e, c[11], c[2], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    Lb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    Lb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    Lb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    Lb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    Lb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    Lb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    Lb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    Lb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    Lb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    Lb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    Lb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    Lb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    Lb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    Lb(e, qn, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    Lb(e, undefined, c[6], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    Lb(e, Yq, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    Lb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    Lb(e, pa, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    Lb(e, Yq, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    Lb(e, ij, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    Lb(e, ij, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    Lb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    Lb(e, undefined, c[6], a * 6);
    jb(e, a * 222, a * 199, a * 120.74767078498864);
    Lb(e, eg, c[3], a * 40);
    jb(e, a * 220, a * 200, a * 95.44108130150245);
    Lb(e, Yj, c[2], a * 15);
    jb(e, a * 220, a * 201, a * 85);
    Lb(e, Yj, c[4], a * 10);
    e.globalAlpha = 0.5;
    jb(e, a * 220, a * 201, a * 82);
    Lb(e, c[9]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    jb(e, a * 63, a * 136, a * 49.193495504995376);
    Lb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    jb(e, a * 63, a * 136, a * 49.193495504995376);
    Lb(e, c[8], c[2], a * 4);
    jb(e, a * 63, a * 137, a * 25.632011235952593);
    Lb(e, c[7], c[2], a * 4);
    return d;
  }
  function lp() {
    var a = ox.ᐃᐃⲆΔⵠ;
    var b = a.id;
    if (a.ⲆⲆⲆⲆⲆ === 1 && a.display === 1) {
      if (ⲆΔΔⲆΔ[b] === undefined) {
        ⲆΔΔⲆΔ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = yb[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          wb = 2;
          for (; e.length > wb; wb++) {
            f = Math.max(f, d.measureText(e[wb]).width);
          }
          var g = f + 35;
          var a = 0;
          a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = a;
          Wb(d, 0, 0, g, a, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], 15, 55);
            a = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            wb = 2;
            for (; e.length > wb; wb++) {
              d.fillText(e[wb], 15, a + 28);
              a += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ⲆᐃΔΔ === 1) {
        zp(Mo, ⲆΔΔⲆΔ[b], a.x, a.y);
      } else if (a.x - 80 + ⲆΔΔⲆΔ[b].width > Bo) {
        zp(Mo, ⲆΔΔⲆΔ[b], Bo - ⲆΔΔⲆΔ[b].width - 10, a.y - ⲆΔΔⲆΔ[b].height - 10);
      } else {
        zp(Mo, ⲆΔΔⲆΔ[b], a.x - 80, a.y - ⲆΔΔⲆΔ[b].height - 10);
      }
    }
  }
  function up() {
    if (!lx.Ⲇⵠⵠᐃ.open && !lx.ΔⵠΔⲆΔ.open && !lx.ᐃⵠⵠΔ.open && !lx.ΔⲆᐃⲆ.open && !lx.ⲆΔⲆΔ.open) {
      lx.sign.open = ln;
      var a = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      var b = 100;
      if (a) {
        for (var c = 0; kx.ⵠⵠΔ[36].length > c; c++) {
          var d = kx.ⵠⵠΔ[36][c];
          var e = ΔΔⲆ.ⵠΔⲆⲆ(d, a);
          if (b > e && d.info === 0 && lx.id === d.ⵠⵠⲆᐃ) {
            lx.sign.open = true;
            b = e;
            lx.sign.ⵠΔⵠΔⲆ = d.id;
          }
        }
        if (b < 100) {
          ox.sign.button.ΔᐃⲆΔ(Mo);
        }
      }
    }
  }
  function bp() {
    lx.ⵠΔΔⲆΔ.open = false;
    var a = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
    var b = 100;
    if (a) {
      for (var c = 0; c < kx.ⵠⵠΔ[22].length; c++) {
        var d = kx.ⵠⵠΔ[22][c];
        var e = ΔΔⲆ.ⵠΔⲆⲆ(d, a);
        if (b > e) {
          b = e;
          lx.ⵠΔΔⲆΔ.open = Vg;
          lx.ⵠΔΔⲆΔ.ⵠⵠⲆᐃ = d.ⵠⵠⲆᐃ;
          lx.ⵠΔΔⲆΔ.ⵠΔⵠΔⲆ = d.id;
        }
      }
      if (b < 100) {
        ox.ⵠΔΔⲆΔ.ΔᐃⲆΔ(Mo);
      }
    }
  }
  function dp() {
    if (lx.reconnect.enabled) {
      Mo.globalAlpha = 0.9;
      Mo.fillStyle = "#000";
      Wb(Mo, dq - 150, eq - 90, 300, 180, 15);
      Mo.fill();
      Mo.globalAlpha = 1;
      var a = ᐃΔ[301];
      Mo.save();
      lx.reconnect.rotate = (lx.reconnect.rotate + tx * 2) % (Math.PI * 2);
      Mo.translate(Bo / 2, cq / 2 - 25);
      Mo.rotate(lx.reconnect.rotate);
      zp(Mo, a, -a.width / 2, -a.height / 2);
      Mo.restore();
      a = ᐃΔ[525];
      zp(Mo, a, (Bo - a.width) / 2, (cq - a.height) / 2 + 25);
    }
  }
  function vp() {
    if (lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ.length > 0) {
      var b = {
        x: ox.ᐃΔⵠⲆⲆ.translate.x,
        y: ox.ᐃΔⵠⲆⲆ.translate.y - Go * 120
      };
    } else {
      b = {
        x: ox.ᐃΔⵠⲆⲆ.translate.x,
        y: ox.ᐃΔⵠⲆⲆ.translate.y - Go * 50
      };
    }
    Mo.globalAlpha = 0.8;
    var c = ᐃΔ[259][kx.time];
    zp(Mo, c, b.x, b.y);
    Mo.globalAlpha = 1;
    if (ox.ᐃΔⵠⲆⲆ.ⵠⲆᐃⵠᐃ.x > -1) {
      Mo.fillStyle = "#660000";
      jb(Mo, b.x + Go * ox.ᐃΔⵠⲆⲆ.ⵠⲆᐃⵠᐃ.x, b.y + ox.ᐃΔⵠⲆⲆ.ⵠⲆᐃⵠᐃ.y * Go, Go * 5);
      Mo.fill();
    }
    var d = Go;
    for (var f = ox.ᐃΔⵠⲆⲆ.ⲆⲆⵠⵠ, g = 0; g < f.length; g++) {
      var h = f[g];
      kx.time;
      Mo.fillStyle = "#ff0000";
      jb(Mo, b.x + h.x / (kx.ᐃⵠᐃⲆⵠ * 100) * 193 * Go, b.y + h.y / (kx.ΔᐃⲆⲆⵠ * 100) * 193 * Go, Go * 2);
      Mo.fill();
    }
    var i = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
    if (i) {
      Mo.fillStyle = kx.time ? "#fff" : "#e39716";
      jb(Mo, b.x + Go * (i.x / (kx.ᐃⵠᐃⲆⵠ * 100) * 193), b.y + i.y / (kx.ΔᐃⲆⲆⵠ * 100) * 193 * Go, Go * 4);
      Mo.fill();
    }
    Go = d;
  }
  function mp() {
    if (!lx.Ⲇⵠⵠᐃ.open && !lx.ΔⵠΔⲆΔ.open) {
      lx.ᐃⵠⵠΔ.open = false;
      var b = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      var c = 100;
      if (b) {
        for (var d = 0; kx.ⵠⵠΔ[32].length > d; d++) {
          var e = kx.ⵠⵠΔ[32][d];
          var f = ΔΔⲆ.ⵠΔⲆⲆ(e, b);
          if (f < c) {
            c = f;
            lx.ᐃⵠⵠΔ.open = ni;
            lx.ᐃⵠⵠΔ.ⲆⵠΔⲆᐃⵠᐃ = e.info & 255;
            lx.ᐃⵠⵠΔ.Δᐃᐃⵠⵠ = (e.info & 65280) >> 8;
            lx.ᐃⵠⵠΔ.ⵠⵠⲆᐃ = e.ⵠⵠⲆᐃ;
            lx.ᐃⵠⵠΔ.ⵠΔⵠΔⲆ = e.id;
          }
        }
        if (c < 100) {
          var g = ᐃΔ[655];
          var a = (j = ox.ⲆΔⲆⵠⵠⵠΔ).info.translate.x - 33;
          zp(Mo, g, a, 0);
          if (lx.ᐃⵠⵠΔ.ⲆⵠΔⲆᐃⵠᐃ > 0) {
            j.ΔᐃⲆΔ(Mo);
            if ((k = lx.ᐃⵠⵠΔ.ⲆⵠΔⲆᐃⵠᐃ) > 1) {
              yp(k, j);
            }
          }
          var j = ox.ᐃΔΔⵠᐃΔⲆ;
          if (lx.ᐃⵠⵠΔ.Δᐃᐃⵠⵠ > 0) {
            j.ΔᐃⲆΔ(Mo);
            var k = lx.ᐃⵠⵠΔ.Δᐃᐃⵠⵠ;
            if (k > 1) {
              yp(k, j);
            }
          }
        }
      }
    }
  }
  function cp() {
    if (!lx.Ⲇⵠⵠᐃ.open) {
      lx.ΔⵠΔⲆΔ.ⲆᐃΔᐃ = 0;
      lx.ΔⵠΔⲆΔ.open = vj;
      var b = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      var c = 100;
      if (b) {
        for (var d = 0; kx.ⵠⵠΔ[18].length > d; d++) {
          var e = kx.ⵠⵠΔ[18][d];
          var f = ΔΔⲆ.ⵠΔⲆⲆ(e, b);
          if (c > f) {
            c = f;
            lx.ΔⵠΔⲆΔ.open = true;
            lx.ΔⵠΔⲆΔ.ⲆᐃΔᐃ = e.info;
            lx.ΔⵠΔⲆΔ.ⵠⵠⲆᐃ = e.ⵠⵠⲆᐃ;
            lx.ΔⵠΔⲆΔ.ⵠΔⵠΔⲆ = e.id;
          }
        }
        if (c < 100) {
          var j = ᐃΔ[411];
          var a = ox.ⵠⵠᐃⵠᐃᐃⵠ;
          var k = Math.floor(a.info.translate.x + (a.info.ⵠᐃ[0].width - j.width) / 2);
          var l = Math.floor(a.info.translate.y + (a.info.ⵠᐃ[0].height - j.height) / 2) + 3;
          zp(Mo, j, k, l);
          if (lx.ΔⵠΔⲆΔ.ⲆᐃΔᐃ > 0) {
            a.ΔᐃⲆΔ(Mo);
            var h = lx.ΔⵠΔⲆΔ.ⲆᐃΔᐃ;
            if (h > 1) {
              yp(h, a);
            }
          }
        }
      }
    }
  }
  function pp() {
    lx.Ⲇⵠⵠᐃ.id = -1;
    lx.Ⲇⵠⵠᐃ.lock = false;
    lx.Ⲇⵠⵠᐃ.locked = false;
    lx.Ⲇⵠⵠᐃ.ᐃⵠⵠᐃᐃⲆⲆ = $o;
    lx.Ⲇⵠⵠᐃ.ⵠᐃⵠⵠⲆⲆⲆ = false;
    lx.Ⲇⵠⵠᐃ.open = false;
    var b = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
    var c = 100;
    if (b) {
      for (var d = 0; kx.ⵠⵠΔ[11].length > d; d++) {
        var e = kx.ⵠⵠΔ[11][d];
        var f = ΔΔⲆ.ⵠΔⲆⲆ(e, b);
        if (f < c) {
          c = f;
          lx.Ⲇⵠⵠᐃ.open = Bg;
          lx.Ⲇⵠⵠᐃ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          lx.Ⲇⵠⵠᐃ.ⲆᐃΔᐃ = e.info;
          lx.Ⲇⵠⵠᐃ.ⵠⵠⲆᐃ = e.ⵠⵠⲆᐃ;
          lx.Ⲇⵠⵠᐃ.ⵠΔⵠΔⲆ = e.id;
          lx.Ⲇⵠⵠᐃ.locked = e.lock;
          lx.Ⲇⵠⵠᐃ.lock = !!e.lock && lx.id != e.ⵠⵠⲆᐃ && !lx.ⵠᐃⵠΔⵠⵠⲆ(e.ⵠⵠⲆᐃ) || sh;
          lx.Ⲇⵠⵠᐃ.ⵠᐃⵠⵠⲆⲆⲆ = e.ⵠⵠⲆᐃ !== lx.id || lx.Ⲇⵠⵠᐃ.locked || lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(148) == -1 ? Pg : To;
          if (lx.Ⲇⵠⵠᐃ.locked && lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(158) != -1) {
            lx.Ⲇⵠⵠᐃ.ᐃⵠⵠᐃᐃⲆⲆ = Bg;
          }
        }
      }
      if (c < 100) {
        var j = ᐃΔ[339];
        var a = ox.Ⲇⵠᐃ[0];
        var k = Math.floor(a.info.translate.x + (a.info.ⵠᐃ[0].width - j.width) / 2);
        var l = Math.floor(a.info.translate.y + (a.info.ⵠᐃ[0].height - j.height) / 2) + 3;
        zp(Mo, j, k, l);
        if ((!lx.Ⲇⵠⵠᐃ.lock || lx.id === lx.Ⲇⵠⵠᐃ.ⵠⵠⲆᐃ) && lx.Ⲇⵠⵠᐃ.id >= 0) {
          (a = ox.Ⲇⵠᐃ[lx.Ⲇⵠⵠᐃ.id]).ΔᐃⲆΔ(Mo);
          var h = lx.Ⲇⵠⵠᐃ.ⲆᐃΔᐃ;
          if (h > 1) {
            yp(h, a);
          }
        }
        if (lx.Ⲇⵠⵠᐃ.lock) {
          ox.ᐃΔΔΔⵠΔᐃ.ΔᐃⲆΔ(Mo);
        } else if (lx.Ⲇⵠⵠᐃ.ⵠᐃⵠⵠⲆⲆⲆ) {
          ox.ΔΔⵠⲆⵠΔΔ.ΔᐃⲆΔ(Mo);
        }
        if (lx.Ⲇⵠⵠᐃ.ᐃⵠⵠᐃᐃⲆⲆ) {
          ox.ⲆⲆΔⵠΔⲆⵠ.ΔᐃⲆΔ(Mo);
        }
      }
    }
  }
  function Cp() {
    lx.ⲆΔⲆⵠΔ.id = -1;
    lx.ⲆΔⲆⵠΔ.ⵠⵠⲆᐃ = -1;
    if (!lx.ᐃΔⲆᐃᐃⲆⲆ && !lx.ⲆΔⲆⵠΔ.wait && !lx.ᐃᐃⲆⵠⲆ) {
      var b = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      var c = 100;
      if (b) {
        for (var d = 0; d < kx.ⵠⵠΔ[29].length; d++) {
          var e = kx.ⵠⵠΔ[29][d];
          var f = ΔΔⲆ.ⵠΔⲆⲆ(e, b);
          if (f < c) {
            c = f;
            lx.ⲆΔⲆⵠΔ.id = e.id;
            lx.ⲆΔⲆⵠΔ.ⵠⵠⲆᐃ = e.ⵠⵠⲆᐃ;
            lx.ⲆΔⲆⵠΔ.info = e.info;
            lx.ⲆΔⲆⵠΔ.lock = (e.info & 16) >> 4;
          }
        }
      }
      var g = ox.ⵠⲆⵠᐃⲆ;
      ox.ⵠⲆⵠᐃⲆ = -1;
      if (lx.ⲆΔⲆⵠΔ.ⵠⵠⲆᐃ == -1 || lx.ⵠⲆᐃΔⲆ.length != 0 && lx.ⲆΔⲆⵠΔ.ⵠⵠⲆᐃ != lx.id) {
        if (lx.ⵠⲆᐃΔⲆ.length != 0 && lx.id != lx.ⵠⲆᐃΔⲆ[0]) {
          ox.ⵠⲆⵠᐃⲆ = 2;
        } else if (lx.ⵠⲆᐃΔⲆ.length != 0 && lx.id == lx.ⵠⲆᐃΔⲆ[0]) {
          ox.ⵠⲆⵠᐃⲆ = 1;
        } else if (lx.ⵠⲆᐃΔⲆ.length != 0) {
          ox.ⵠⲆⵠᐃⲆ = 3;
        }
      } else if (lx.ⵠⲆᐃΔⲆ.length == 0 && lx.ⲆΔⲆⵠΔ.info >= 8) {
        ox.ⵠⲆⵠᐃⲆ = 4;
      } else if (lx.ⵠⲆᐃΔⲆ.length == 0) {
        ox.ⵠⲆⵠᐃⲆ = 3;
      } else {
        ox.ⵠⲆⵠᐃⲆ = 0;
      }
      if (ox.ⵠⲆⵠᐃⲆ != -1) {
        ox.ᐃⵠⵠⵠᐃ[ox.ⵠⲆⵠᐃⲆ].button.ΔᐃⲆΔ(Mo);
      }
      var a = document.getElementById("team_box").style;
      if (ox.ⵠⲆⵠᐃⲆ != -1 && ox.ⵠⲆⵠᐃⲆ != g && a.display == "inline-block") {
        ox.ᐃⵠⵠⵠᐃ[ox.ⵠⲆⵠᐃⲆ].action();
      }
    }
  }
  function Tp() {
    if (!lx.Ⲇⵠⵠᐃ.open && !lx.ΔⵠΔⲆΔ.open) {
      lx.ⲆΔⲆΔ.open = false;
      var b = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      var c = 100;
      if (b) {
        for (var d = 0; d < yf.length; d++) {
          for (var e = yf[d][0], f = yf[d][1], j = 0; kx.ⵠⵠΔ[e].length > j; j++) {
            var k = kx.ⵠⵠΔ[e][j];
            var m = ΔΔⲆ.ⵠΔⲆⲆ(k, b);
            if (m < c) {
              c = m;
              lx.ⲆΔⲆΔ.ⵠΔᐃᐃΔᐃᐃ = f;
              lx.ⲆΔⲆΔ.type = e;
              lx.ⲆΔⲆΔ.open = true;
              lx.ⲆΔⲆΔ.ᐃᐃΔᐃⲆΔⵠ = k.info & 255;
              lx.ⲆΔⲆΔ.ⵠΔᐃⵠⲆᐃᐃ = (k.info & 65280) >> 8;
              lx.ⲆΔⲆΔ.ⵠⵠⲆᐃ = k.ⵠⵠⲆᐃ;
              lx.ⲆΔⲆΔ.ⵠΔⵠΔⲆ = k.id;
            }
          }
        }
        if (c < 100) {
          var p = ᐃΔ[656];
          var h = (q = ox.ⵠΔⵠΔⵠⵠᐃ).info.translate.x - 33;
          zp(Mo, p, h, 0);
          if (lx.ⲆΔⲆΔ.ᐃᐃΔᐃⲆΔⵠ > 0) {
            q.ΔᐃⲆΔ(Mo);
            var g = lx.ⲆΔⲆΔ.ᐃᐃΔᐃⲆΔⵠ;
            if (g > 1) {
              yp(g, q);
            }
          }
          switch (lx.ⲆΔⲆΔ.ⵠΔᐃᐃΔᐃᐃ) {
            case 108:
              var q = ox.ᐃⲆⲆⵠⵠⵠΔ;
              break;
            case 111:
              q = ox.ΔΔΔΔΔⲆΔ;
              break;
            case 112:
              q = ox.ⲆⲆΔⵠⵠⲆΔ;
              break;
            case 121:
              q = ox.ⲆΔⲆⵠⲆⲆⵠ;
              break;
            case 202:
              q = ox.ΔΔᐃΔᐃΔⵠ;
          }
          if (lx.ⲆΔⲆΔ.ⵠΔᐃⵠⲆᐃᐃ > 0) {
            q.ΔᐃⲆΔ(Mo);
            if ((g = lx.ⲆΔⲆΔ.ⵠΔᐃⵠⲆᐃᐃ) > 1) {
              yp(g, q);
            }
          }
        }
      }
    }
  }
  function fp() {
    if (!lx.Ⲇⵠⵠᐃ.open && !lx.ΔⵠΔⲆΔ.open && !lx.ᐃⵠⵠΔ.open && !lx.ⲆΔⲆΔ.open) {
      lx.ΔⲆᐃⲆ.open = false;
      var b = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      var c = 100;
      if (b) {
        for (var d = 0; d < kx.ⵠⵠΔ[34].length; d++) {
          var e = kx.ⵠⵠΔ[34][d];
          var f = ΔΔⲆ.ⵠΔⲆⲆ(e, b);
          if (f < c) {
            c = f;
            lx.ΔⲆᐃⲆ.open = Hh;
            lx.ΔⲆᐃⲆ.ᐃᐃΔᐃⲆΔⵠ = e.info & 31;
            lx.ΔⲆᐃⲆ.Δᐃᐃⵠⵠ = (e.info & 992) >> 5;
            lx.ΔⲆᐃⲆ.ⵠΔΔⵠΔⵠΔ = (e.info & 31744) >> 10;
            lx.ΔⲆᐃⲆ.ⵠⵠⲆᐃ = e.ⵠⵠⲆᐃ;
            lx.ΔⲆᐃⲆ.ⵠΔⵠΔⲆ = e.id;
          }
        }
        if (c < 100) {
          var g = ᐃΔ[722];
          var a = (k = ox.ⲆⵠⲆᐃⵠᐃⵠ).info.translate.x - 32;
          zp(Mo, g, a, 0);
          if (lx.ΔⲆᐃⲆ.ᐃᐃΔᐃⲆΔⵠ > 0) {
            k.ΔᐃⲆΔ(Mo);
            var j = lx.ΔⲆᐃⲆ.ᐃᐃΔᐃⲆΔⵠ;
            if (j > 1) {
              yp(j, k);
            }
          }
          var k = ox.ⵠⲆⵠⵠᐃⵠⵠ;
          if (lx.ΔⲆᐃⲆ.ⵠΔΔⵠΔⵠΔ > 0) {
            k.ΔᐃⲆΔ(Mo);
            if ((j = lx.ΔⲆᐃⲆ.ⵠΔΔⵠΔⵠΔ) > 1) {
              yp(j, k);
            }
          }
          k = ox.ᐃᐃⲆΔⵠᐃⲆ;
          if (lx.ΔⲆᐃⲆ.Δᐃᐃⵠⵠ > 0) {
            k.ΔᐃⲆΔ(Mo);
            if ((j = lx.ΔⲆᐃⲆ.Δᐃᐃⵠⵠ) > 1) {
              yp(j, k);
            }
          }
        }
      }
    }
  }
  function zp(b, c, d, e, f, i, a, j, k, h) {
    if (Ya === c.ⵠⵠⵠΔⲆⲆᐃ || c.ⵠⵠⵠΔⲆⲆᐃ() === 1) {
      if (h !== eg) {
        b.drawImage(c, d, e, Math.max(1, f), Math.max(1, i), a, j, k, h);
      } else if (ep !== i) {
        b.drawImage(c, d, e, f, i);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function yp(a, b) {
    ᐃΔ[283][a] ||= gu(Go, "x" + a, 17, "#FFF");
    var c = ᐃΔ[283][a];
    var d = b.info.translate.x + b.info.ⵠᐃ[0].width - c.width - Go * 14;
    var e = b.info.translate.y + b.info.ⵠᐃ[0].height - c.height - Go * 19;
    if (b.info.state == Ew) {
      e += Go * 5;
    }
    zp(Mo, c, d, e);
  }
  function wp() {
    if (lx.ⵠⲆⵠᐃΔΔᐃ) {
      Mo.globalAlpha = 0.5;
      Mo.fillStyle = "#000";
      Mo.fillRect(0, 0, Bo, cq);
      Mo.globalAlpha = 0.8;
      var b = ᐃΔ[516][kx.time];
      var c = dq - b.width / 2;
      var d = eq - b.height / 2;
      zp(Mo, b, c, d);
      Mo.globalAlpha = 1;
      if (ox.ᐃΔⵠⲆⲆ.ⵠⲆᐃⵠᐃ.x > -1) {
        Mo.fillStyle = "#660000";
        jb(Mo, c + ox.ᐃΔⵠⲆⲆ.ⵠⲆᐃⵠᐃ.x * 3 * Go, d + ox.ᐃΔⵠⲆⲆ.ⵠⲆᐃⵠᐃ.y * 3 * Go, Go * 14);
        Mo.fill();
      }
      for (var e = ox.ᐃΔⵠⲆⲆ.ⲆⲆⵠⵠ, f = 0; f < e.length; f++) {
        var g = e[f];
        kx.time;
        Mo.fillStyle = "#ff0000";
        jb(Mo, c + g.x / (kx.ᐃⵠᐃⲆⵠ * 100) * 600 * Go, d + Go * (g.y / (kx.ΔᐃⲆⲆⵠ * 100) * 600), Go * 6);
        Mo.fill();
      }
      var h = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      if (h) {
        Mo.fillStyle = kx.time ? "#fff" : "#e39716";
        jb(Mo, c + h.x / (kx.ᐃⵠᐃⲆⵠ * 100) * 600 * Go, d + Go * (h.y / (kx.ΔᐃⲆⲆⵠ * 100) * 600), Go * 12);
        Mo.fill();
      }
    }
  }
  function Pp(b, c, d) {
    var e = ᐃΔ[465][b];
    var f = c.info.translate.x + Go * 5;
    var g = c.info.translate.y + Go * 5;
    if (Ew == c.info.state || d) {
      g += Go * 5;
    }
    zp(Mo, e, f, g);
  }
  ⲆΔΔⲆΔ = [];
  ᐃⵠⵠΔⵠΔⲆ = [];
  var kp = [];
  function Ap() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = false;
      }
      var a = tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600 * Go;
      var b = a * Math.sin(this.ⵠᐃΔ.angle - this.angle);
      var c = Math.cos(this.ⵠᐃΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    ⵠᐃ = ᐃΔ[167][kx.time];
    ᐃΔΔ = -ⵠᐃ.width;
    ⲆΔⲆ = -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2 + b, -ⲆΔⲆ / 2 + c, ᐃΔΔ, ⲆΔⲆ);
    if (this.lock) {
      ⵠᐃ = ᐃΔ[148][kx.time];
      ᐃΔΔ = -ⵠᐃ.width;
      ⲆΔⲆ = -ⵠᐃ.height;
      zp(Mo, ⵠᐃ, -ᐃΔΔ / 2 + b - Go * 1, -ⲆΔⲆ / 2 + c, ᐃΔΔ, ⲆΔⲆ);
    }
    Mo.restore();
  }
  function xp(b) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = false;
      }
      var c = Go * ((1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600);
      var d = Math.sin(this.ⵠᐃΔ.angle - this.angle) * c;
      var e = Math.cos(this.ⵠᐃΔ.angle - this.angle) * c;
    } else {
      d = 0;
      e = 0;
    }
    var f = ᐃΔ[853].length;
    ⵠᐃ = ᐃΔ[853][(this.ⵠΔᐃ + this.ⵠⵠ % 2) % f][kx.time];
    ᐃΔΔ = -ⵠᐃ.width;
    ⲆΔⲆ = -ⵠᐃ.height;
    var g = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
    if (g && (this.ⵠⵠⲆᐃ === lx.id || lx.ⵠᐃⵠΔⵠⵠⲆ(this.ⵠⵠⲆᐃ))) {
      if (ΔΔⲆ.ⵠΔⲆⲆ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - tx, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + tx, 1);
      }
    } else if (g && ΔΔⲆ.ⵠΔⲆⲆ(this, kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ]) < 150) {
      this.opacity = Math.max(this.opacity - tx, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + tx, 1);
    }
    var a = Mo.globalAlpha;
    Mo.globalAlpha *= this.opacity;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2 + d, -ⲆΔⲆ / 2 + e, ᐃΔΔ, ⲆΔⲆ);
    Mo.globalAlpha = a;
    Mo.restore();
  }
  function Jp() {
    var a = lx.ᐃᐃⲆⵠΔ;
    if (a.wait) {
      var b = a.timeout.ΔⵠΔ();
      Mo.save();
      var c = ᐃΔ[794];
      Mo.translate(c.width - Go * 12, ox.ΔᐃᐃⲆ.translate.y - Go * 190);
      var d = -c.width / 2 + 9;
      var e = -c.height / 2 - 4;
      zp(Mo, c, d, e);
      Mo.beginPath();
      Mo.lineWidth = Go * 5;
      Mo.strokeStyle = ts.ⵠⵠⵠΔᐃⲆⲆ[kx.time];
      Mo.lineCap = "round";
      Mo.arc(9, e + c.height / 2, Go * 25, 0, a.timeout.ΔⵠⲆ * (Math.PI * 2));
      Mo.stroke();
      Mo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ΔⵠⲆ = 0;
        a.timeout.ⲆⲆⲆ = vl;
      }
    }
  }
  function Mp(b) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == $n) {
        this.ⵠᐃΔ.ΔⵠΔ = false;
      }
      var c = Go * (tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600);
      var d = Math.sin(this.ⵠᐃΔ.angle - this.angle) * c;
      var e = Math.cos(this.ⵠᐃΔ.angle - this.angle) * c;
    } else {
      d = 0;
      e = 0;
    }
    if (b === 913 && !kx.transition) {
      var f = 0;
      for (var g = kx.ⵠⵠΔ[0], a = 0; g.length > a; a++) {
        var h = ΔΔⲆ.ⵠΔⲆⲆ(g[a], this);
        if (h < 140 && h > 35) {
          f = 0;
          break;
        }
        if (h <= 35) {
          f = 1;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - tx / 1.5) : Math.min(1, this.opacity + tx / 1.5);
      Mo.globalAlpha = this.opacity;
    }
    ⵠᐃ = ᐃΔ[b][kx.time];
    ᐃΔΔ = -ⵠᐃ.width;
    ⲆΔⲆ = -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2 + d, -ⲆΔⲆ / 2 + e, ᐃΔΔ, ⲆΔⲆ);
    Mo.globalAlpha = 1;
    Mo.restore();
  }
  function Bp() {
    var b = lx.ⲆΔⲆⵠΔ;
    if (b.wait) {
      var c = b.timeout.ΔⵠΔ();
      Mo.save();
      var d = ᐃΔ[562];
      var e = ᐃΔ[537].height + Go * 25;
      Mo.translate(d.width, ox.ΔᐃᐃⲆ.translate.y - Go * 188 - e);
      var f = -d.width / 2 - 2;
      var g = -d.height / 2 - 4;
      zp(Mo, d, f + 2, g);
      Mo.beginPath();
      Mo.lineWidth = Go * 5;
      Mo.strokeStyle = ts.ⲆΔⲆⲆⲆⵠᐃ[kx.time];
      Mo.lineCap = "round";
      Mo.arc(0, g + d.height / 2, Go * 25, 0, Math.PI * 2 * b.timeout.ΔⵠⲆ);
      Mo.stroke();
      Mo.restore();
      if (c) {
        b.wait = false;
        b.timeout.ΔⵠⲆ = 0;
        b.timeout.ⲆⲆⲆ = false;
      }
    }
  }
  function Dp(a) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && sh == this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ) {
        this.ⵠᐃΔ.ΔⵠΔ = _h;
      }
      var b = Go * ((1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600);
      var c = b * Math.sin(this.ⵠᐃΔ.angle - this.angle);
      var d = Math.cos(this.ⵠᐃΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = ᐃΔ[a][kx.time];
    ᐃΔΔ = -e.width;
    ⲆΔⲆ = -e.height;
    zp(Mo, e, -ᐃΔΔ / 2 + c, -ⲆΔⲆ / 2 + d, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function Ep() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[321][kx.time];
    ᐃΔΔ = -ⵠᐃ.width;
    ⲆΔⲆ = -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function Ip() {
    var a = lx.ⲆΔᐃᐃⲆ;
    if (a.wait) {
      var b = a.timeout.ΔⵠΔ();
      Mo.save();
      var c = ᐃΔ[792];
      Mo.translate(c.width - Go * 2, ox.ΔᐃᐃⲆ.translate.y - Go * 125);
      var d = -c.width / 2 + 10;
      var e = -c.height / 2 - 4;
      zp(Mo, c, d, e);
      Mo.beginPath();
      Mo.lineWidth = Go * 5;
      Mo.strokeStyle = ts.ⵠⵠⵠΔᐃⲆⲆ[kx.time];
      Mo.lineCap = "round";
      Mo.arc(9, e + c.height / 2, Go * 25, 0, a.timeout.ΔⵠⲆ * (Math.PI * 2));
      Mo.stroke();
      Mo.restore();
      if (b) {
        a.wait = _h;
        a.timeout.ΔⵠⲆ = 0;
        a.timeout.ⲆⲆⲆ = false;
      }
    }
  }
  function Sp() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[848][kx.time];
    ᐃΔΔ = -ⵠᐃ.width;
    ⲆΔⲆ = -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function Qp() {
    var b = lx.ΔⲆᐃΔⵠ;
    var c = ox.ᐃⲆΔⲆ;
    if (b.ΔⵠΔ) {
      b.ΔⵠΔ = false;
      var d = b.ΔⲆΔΔᐃ;
      var e = c.ⵠΔ.width;
      var f = c.ⵠΔ.height;
      var i = c.ᐃ;
      var a = kx.ⲆⲆⵠⵠ;
      var j = Pr;
      i.clearRect(0, 0, e, f);
      i.drawImage(c.ⵠᐃ, 0, 0);
      for (var k = 0; k < d.length; k++) {
        var l = a[d[k]];
        if ((kx.mode !== 1 || l.ᐃᐃⵠⲆΔ !== "spectator") && (kx.mode !== 2 || l.ᐃⵠᐃⲆ !== 0)) {
          if (lx.id == d[k]) {
            j = rl;
            if (kx.mode === 3 && l.ᐃⵠᐃⲆ === 0) {
              ᐃᐃ = "#FF0000";
            } else {
              ᐃᐃ = "#FFF";
            }
          } else if (kx.mode === 3 && l.ᐃⵠᐃⲆ === 0) {
            ᐃᐃ = "#990000";
          } else {
            ᐃᐃ = "#A1BDCD";
          }
          i.drawImage(gu(Go, "" + (k + 1), Go * 15, ᐃᐃ), Go * 20, (40 + k * 22) * Go);
          if (!l.ⲆⲆⵠΔⵠΔⲆ) {
            l.ⲆⲆⵠΔⵠΔⲆ = gu(Go, l.ᐃᐃⵠⲆΔ, Go * 15, ᐃᐃ, undefined, undefined, undefined, undefined, Go * 110);
          }
          i.drawImage(l.ⲆⲆⵠΔⵠΔⲆ, Go * 39, Go * (40 + k * 22));
          i.drawImage(gu(Go, ΔΔⲆ.ᐃⲆᐃⵠⲆⲆᐃ(l.ᐃᐃΔᐃⵠ), Go * 15, ᐃᐃ), Go * 156, (40 + k * 22) * Go);
        }
      }
      if (!j) {
        if (kx.mode === 0 || kx.mode === 3 || kx.mode === 4 || kx.mode === 5 || kx.mode === 7 || kx.mode === 1 && !lx.ᐃΔⲆᐃᐃⲆⲆ || kx.mode === 2 && !lx.ᐃᐃⲆⵠⲆ) {
          i.drawImage(ᐃΔ[306], Go * 15, Go * (46 + k * 22));
          i.drawImage(gu(Go, ΔΔⲆ.ᐃⲆᐃⵠⲆⲆᐃ(kx.ⲆⲆⵠⵠ[lx.id].ᐃᐃΔᐃⵠ), Go * 15, "#FFF"), Go * 100, (46 + k * 22) * Go);
        }
      }
    }
    zp(Mo, c.ⵠΔ, c.translate.x, c.translate.y);
  }
  function _p(a) {
    if ((a = a / 100) <= 0.8) {
      Mo.save();
      Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ⵠᐃΔ.ΔⵠΔ) {
        if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
          this.ⵠᐃΔ.ΔⵠΔ = $o;
        }
        var b = (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600 * Go;
        var c = Math.sin(this.ⵠᐃΔ.angle - this.angle) * b;
        var d = Math.cos(this.ⵠᐃΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Mo.globalAlpha = 0.5;
      Gb(Mo, c, d, Go * 18, a);
      Lb(Mo, null, "#000000", Go * 18);
      Mo.globalAlpha = 1;
      Gb(Mo, c, d, Go * 18, a);
      Lb(Mo, null, ts.ᐃΔⲆΔⵠᐃΔ[kx.time], Go * 6);
      Mo.restore();
    }
  }
  function Rp() {
    for (var b = lx.ᐃⵠⵠᐃ, c = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ], d = 0; d < b.ᐃΔΔⵠⵠ.length; d++) {
      var e = b.ᐃΔΔⵠⵠ[d];
      var f = Ea;
      if ((c = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ]) && (c.right == e.id || c.ᐃⵠⵠΔΔ == e.id && c.ᐃⵠⵠΔΔ > 0)) {
        f = To;
        zp(Mo, e.info.ⵠᐃ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ΔᐃⲆΔ(Mo);
      }
      var g = lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[e.id];
      if (g > 1) {
        yp(g, e);
      }
      if (g > 0) {
        Pp(d, e, f);
      }
      var h = lx.Ⲇⵠⵠᐃ;
      if (!!h.open && (h.id < 0 || h.id == e.id) && (!h.lock || h.ⵠⵠⲆᐃ == lx.id)) {
        ox.ΔΔⵠⵠⲆ[e.id].ΔᐃⲆΔ(Mo);
      }
      if (lx.ΔⵠΔⲆΔ.open && e.id == 109) {
        ox.ΔΔⵠⵠⲆ[e.id].ΔᐃⲆΔ(Mo);
      }
      if (lx.ᐃⵠᐃᐃⲆ.open && e.id == 180) {
        ox.ΔΔⵠⵠⲆ[e.id].ΔᐃⲆΔ(Mo);
      }
      if (lx.ᐃⵠⵠΔ.open && e.id == 134) {
        ox.ΔΔⵠⵠⲆ[e.id].ΔᐃⲆΔ(Mo);
      }
      if (lx.ⲆΔⲆΔ.open && e.id == 109) {
        ox.ΔΔⵠⵠⲆ[e.id].ΔᐃⲆΔ(Mo);
      }
      if (lx.ΔⲆᐃⲆ.open && (e.id == 109 || e.id == 131)) {
        ox.ΔΔⵠⵠⲆ[e.id].ΔᐃⲆΔ(Mo);
      }
    }
    if (e && b.max > d) {
      var j = ᐃΔ[334][2];
      Δⵠ = e.info.translate.x;
      ᐃⲆⲆ = e.info.translate.y;
      ⵠΔᐃ = 1;
      for (; d < b.max; d++, ⵠΔᐃ++) {
        zp(Mo, j, Δⵠ + ⵠΔᐃ * (j.width + 5), ᐃⲆⲆ);
      }
    }
  }
  function Fp() {
    Mo.save();
    var a = Go;
    if (lx.ΔᐃᐃⲆ.ⵠΔⲆⲆΔ.x < 0.25) {
      Mo.globalAlpha = lx.ΔᐃᐃⲆ.ΔᐃᐃᐃⲆᐃΔ.ΔⵠⲆ;
    }
    var b = lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ.length > 0 ? -70 : 0;
    if (lx.Ⲇⵠⵠᐃ.open || lx.ΔⵠΔⲆΔ.open && lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(109) != -1 || lx.ᐃⵠⵠΔ.open && lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(134) != -1 || lx.ⲆΔⲆΔ.open && lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(109) != -1 || lx.ᐃⵠᐃᐃⲆ.open && lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(180) != -1 || lx.ΔⲆᐃⲆ.open && (lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(109) != -1 || lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(131) != -1)) {
      b -= Go * 50;
    }
    Mo.translate((Bo - Go * 950) / 2, b);
    Mo.fillStyle = "#69A148";
    Mo.fillRect(this.translate.x + Go * 37, this.translate.y + Go * 17, Go * (lx.ΔᐃᐃⲆ.ⵠΔⲆⲆΔ.x * 178), Go * 18);
    Mo.globalAlpha = 1;
    if (lx.ΔᐃᐃⲆ.ⵠⲆᐃᐃΔΔΔ.x < 0.35) {
      Mo.fillStyle = "#8F050A";
      Mo.globalAlpha = lx.ΔᐃᐃⲆ.ⵠᐃⵠⵠⵠΔᐃ.ΔⵠⲆ;
      Mo.fillRect(this.translate.x + Go * 277, this.translate.y + Go * 17, Go * 178, Go * 18);
      Mo.globalAlpha = 1;
    }
    Mo.fillStyle = "#AF352A";
    Mo.fillRect(this.translate.x + Go * 277, this.translate.y + Go * 17, Go * (lx.ΔᐃᐃⲆ.ⵠⲆᐃᐃΔΔΔ.x * 178), Go * 18);
    if (lx.ΔᐃᐃⲆ.ⵠⵠⵠᐃⵠ.x < 0.35) {
      Mo.fillStyle = "#366B91";
      Mo.globalAlpha = lx.ΔᐃᐃⲆ.ΔΔᐃΔΔⵠΔ.ΔⵠⲆ;
      Mo.fillRect(this.translate.x + Go * 517, this.translate.y + Go * 17, Go * 178, Go * 18);
      Mo.globalAlpha = 1;
    }
    Mo.fillStyle = "#669BB1";
    Mo.fillRect(this.translate.x + Go * 517, this.translate.y + Go * 17, lx.ΔᐃᐃⲆ.ⵠⵠⵠᐃⵠ.x * 178 * Go, Go * 18);
    if (lx.ΔᐃᐃⲆ.ⵠⵠⵠᐃⵠ.x > 0.99) {
      if (lx.ΔᐃᐃⲆ.ΔⵠΔᐃΔ.x < 0.35) {
        Mo.fillStyle = "#6C4036";
        Mo.globalAlpha = lx.ΔᐃᐃⲆ.ⵠⲆⵠΔⵠΔⵠ.ΔⵠⲆ;
        Mo.fillRect(this.translate.x + Go * 517, this.translate.y + Go * 17, Go * 178, Go * 18);
        Mo.globalAlpha = 1;
      }
      Mo.fillStyle = "#9C4036";
      Mo.fillRect(this.translate.x + Go * 517, this.translate.y + Go * 17, Go * ((1 - lx.ΔᐃᐃⲆ.ΔⵠΔᐃΔ.x) * 178), Go * 18);
    }
    if (lx.ΔᐃᐃⲆ.ⵠᐃⲆᐃΔᐃⲆ.x < 0.35) {
      Mo.fillStyle = "#001A57";
      Mo.globalAlpha = lx.ΔᐃᐃⲆ.ⲆΔⲆΔⲆⵠⵠ.ΔⵠⲆ;
      Mo.fillRect(this.translate.x + Go * 757, this.translate.y + Go * 17, Go * 178, Go * 18);
      Mo.globalAlpha = 1;
    }
    Mo.fillStyle = "#074A87";
    Mo.fillRect(this.translate.x + Go * 757, this.translate.y + Go * 17, Go * (lx.ΔᐃᐃⲆ.ⵠᐃⲆᐃΔᐃⲆ.x * 178), Go * 18);
    Go = a;
    zp(Mo, this.ⵠᐃ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    Mo.restore();
    if (lx.ΔᐃᐃⲆ.ᐃᐃᐃΔΔΔΔ.x < 0.99) {
      var c = Math.floor(dq - ᐃΔ[608].width / 2);
      b += this.translate.y - ᐃΔ[608].height - Go * 5;
      Mo.fillStyle = "#BBE8EF";
      Mo.fillRect(c + 5, b + Go * 5, lx.ΔᐃᐃⲆ.ᐃᐃᐃΔΔΔΔ.x * (Go * 588), Go * 10);
      if (lx.ΔᐃᐃⲆ.ᐃᐃᐃΔΔΔΔ.x < 0.35) {
        Mo.fillStyle = "#9BA8AF";
        Mo.globalAlpha = lx.ΔᐃᐃⲆ.ΔⲆⲆᐃᐃⵠΔ.ΔⵠⲆ;
        Mo.fillRect(c + 5, b + 5, Go * 588, Go * 10);
        Mo.globalAlpha = 1;
      }
      zp(Mo, ᐃΔ[608], c, b);
      this.y = b;
    }
  }
  function jp() {
    var a = kx.ⲆⲆΔΔⲆ;
    var b = ᐃΔ[725][kx.time];
    zp(Mo, b, a.translate.x, a.translate.y);
    Mo.save();
    Mo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    kx.ⲆⲆΔΔⲆ.now = (new Date().getTime() - a.ᐃⵠⵠΔᐃ + a.ᐃⵠⵠᐃΔ) % 480000;
    var c = Math.PI * 2 * kx.ⲆⲆΔΔⲆ.now / 480000 - Math.PI / 2;
    Mo.rotate(c);
    zp(Mo, ᐃΔ[726], -b.width / 2, -b.height / 2);
    Mo.restore();
  }
  function Lp() {
    var a = lx.ΔᐃᐃⵠⲆ;
    if (a.wait) {
      var b = a.timeout.ΔⵠΔ();
      Mo.save();
      var c = ᐃΔ[537];
      Mo.translate(c.width - Go * 2, ox.ΔᐃᐃⲆ.translate.y - Go * 60);
      var d = -c.width / 2 - 2;
      var e = -c.height / 2 - 4;
      zp(Mo, c, d, e);
      Mo.beginPath();
      Mo.lineWidth = Go * 5;
      Mo.strokeStyle = ts.ⲆΔⲆⲆⲆⵠᐃ[kx.time];
      Mo.lineCap = "round";
      Mo.arc(0, e + c.height / 2, Go * 25, 0, Math.PI * 2 * a.timeout.ΔⵠⲆ);
      Mo.stroke();
      Mo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ΔⵠⲆ = 0;
        a.timeout.ⲆⲆⲆ = false;
      }
    }
  }
  function Wp() {
    var a = lx.ⲆᐃΔΔ;
    if (a.ⲆᐃⵠⲆⲆ) {
      var b = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      Mo.save();
      Mo.translate(lx.ⲆΔᐃ.x + b.x, lx.ⲆΔᐃ.y + b.y);
      var c = ᐃΔ[324];
      var d = -c.width / 2;
      var e = -c.height / 2 - Go * 125;
      zp(Mo, c, d, e);
      Mo.beginPath();
      Mo.lineWidth = Go * 5;
      Mo.strokeStyle = ts.ᐃⲆⵠΔΔᐃⵠ[kx.time];
      Mo.lineCap = "round";
      Mo.arc(0, e + c.height / 2, Go * 25, 0, Math.PI * 2 * a.timeout.ΔⵠⲆ);
      Mo.stroke();
      Mo.restore();
    }
  }
  function Gp() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[811][kx.time];
    ᐃΔΔ = -ⵠᐃ.width;
    ⲆΔⲆ = -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function qp(a) {
    if ((a = a / 100) <= 0.95) {
      Mo.save();
      Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ⵠᐃΔ.ΔⵠΔ) {
        if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && Es == this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ) {
          this.ⵠᐃΔ.ΔⵠΔ = false;
        }
        var b = (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600 * Go;
        var c = Math.sin(this.ⵠᐃΔ.angle - this.angle) * b;
        var d = b * Math.cos(this.ⵠᐃΔ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      Mo.globalAlpha = 0.5;
      Gb(Mo, c, d, Go * 28, a);
      Lb(Mo, null, "#000000", Go * 18);
      Mo.globalAlpha = 1;
      Gb(Mo, c, d, Go * 28, a);
      Lb(Mo, null, ts.ᐃⲆⵠΔΔᐃⵠ[kx.time], Go * 6);
      Mo.restore();
    }
  }
  function Np(a) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == F) {
        this.ⵠᐃΔ.ΔⵠΔ = vl;
      }
      var b = tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600 * Go;
      var c = b * Math.sin(this.ⵠᐃΔ.angle - this.angle);
      var d = Math.cos(this.ⵠᐃΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    if (this.ⵠⲆⵠΔⲆ.ΔⵠΔ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ⵠᐃ = ᐃΔ[872][Math.floor(this.id + this.color) % 5][kx.time];
    ᐃΔΔ = this.ⵠⲆⵠΔⲆ.ΔⵠⲆ * -ⵠᐃ.width;
    ⲆΔⲆ = this.ⵠⲆⵠΔⲆ.ΔⵠⲆ * -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2 + c, -ⲆΔⲆ / 2 + d, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function Op() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[837][kx.time];
    ᐃΔΔ = -ⵠᐃ.width;
    ⲆΔⲆ = -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function Hp() {
    var b = lx.ⲆᐃΔΔ;
    if (!b.ⲆᐃⵠⲆⲆ && b.ΔⲆΔΔ > 0) {
      var c = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      if (!c) {
        return;
      }
      Mo.save();
      if (As[b.ΔⲆΔΔ].ⵠᐃᐃΔ === 0 && b.mode === 0) {
        Mo.translate(lx.ⲆΔᐃ.x + c.x, lx.ⲆΔᐃ.y + c.y);
        Mo.rotate(c.angle);
        Mo.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = lx.ⲆΔᐃ.x + (d - d % 100 + 50);
        e = lx.ⲆΔᐃ.y + (e - e % 100 + 50);
        Mo.translate(d, e);
      }
      var f = ᐃΔ[b.ΔⲆΔΔ][kx.time];
      Mo.globalAlpha = 0.5;
      zp(Mo, f, -f.width / 2, -f.height / 2);
      Mo.globalAlpha = 1;
      Mo.restore();
      if (As[b.ΔⲆΔΔ].ⵠᐃᐃΔ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = gu(Go, yb[336], 20, "#e2c340");
          } else {
            b.label[1] = gu(Go, yb[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        zp(Mo, f, dq + -f.width / 2, ox.ΔᐃᐃⲆ.y - 26);
      }
    }
    if (b.ⲆᐃⵠⲆⲆ) {
      var i = b.timeout.ΔⵠΔ();
      for (var a = 0; a < b.ΔΔᐃᐃᐃ.length; a++) {
        var j = b.ΔΔᐃᐃᐃ[a];
        if (j.id == b.id) {
          var k = Go * 42;
          var l = Go * 17;
          Wb(Mo, j.info.translate.x, j.info.translate.y + k * (1 - b.timeout.ΔⵠⲆ), j.info.width, k * b.timeout.ΔⵠⲆ + l, Go * 10);
          Mo.fillStyle = "#55B973";
          Mo.fill();
          Mo.globalAlpha = 0.8;
          j.ΔᐃⲆΔ(Mo);
        } else {
          Mo.globalAlpha = 0.5;
          j.ΔᐃⲆΔ(Mo);
        }
        Mo.globalAlpha = 1;
      }
      if (i) {
        b.ⲆᐃⵠⲆⲆ = wr;
        b.timeout.ΔⵠⲆ = 0;
        b.timeout.ⲆⲆⲆ = false;
      }
      return true;
    }
    for (a = 0; a < b.ΔΔᐃᐃᐃ.length; a++) {
      b.ΔΔᐃᐃᐃ[a].ΔᐃⲆΔ(Mo);
    }
    return false;
  }
  function Up(a) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = ig;
      }
      var b = tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600 * Go;
      var c = b * Math.sin(this.ⵠᐃΔ.angle - this.angle);
      var d = Math.cos(this.ⵠᐃΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    ⵠᐃ = ᐃΔ[a][kx.time];
    ᐃΔΔ = -ⵠᐃ.width;
    ⲆΔⲆ = -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2 + c, -ⲆΔⲆ / 2 + d, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function Yp() {
    var a = -8;
    if (lx.ⲆⲆΔᐃᐃ.enabled) {
      var b = ᐃΔ[546];
      zp(Mo, b, lx.ⲆⲆΔᐃᐃ.translate.x, lx.ⲆⲆΔᐃᐃ.translate.y + a);
      a += 70;
    }
    if (lx.ⵠΔⲆⵠΔΔᐃ === 1) {
      b = ᐃΔ[549];
      zp(Mo, b, lx.ⲆⲆΔᐃᐃ.translate.x, lx.ⲆⲆΔᐃᐃ.translate.y + a);
      a += 70;
    } else if (lx.ΔᐃᐃⲆ.ⵠⵠⵠᐃⵠ.x < 0.25 || lx.ΔᐃᐃⲆ.ⵠⲆᐃᐃΔΔΔ.x < 0.25 || lx.ΔᐃᐃⲆ.ⵠᐃⲆᐃΔᐃⲆ.x < 0.25 || lx.ΔᐃᐃⲆ.ᐃᐃᐃΔΔΔΔ.x < 0.25 || lx.ΔᐃᐃⲆ.ΔⵠΔᐃΔ.x < 0.25) {
      b = ᐃΔ[548];
      zp(Mo, b, lx.ⲆⲆΔᐃᐃ.translate.x, lx.ⲆⲆΔᐃᐃ.translate.y + a);
      a += 70;
    }
    if (lx.ⵠᐃⵠΔⲆ > 0) {
      b = ᐃΔ[547];
      zp(Mo, b, lx.ⲆⲆΔᐃᐃ.translate.x, lx.ⲆⲆΔᐃᐃ.translate.y + a);
      var c = kp[lx.ⵠᐃⵠΔⲆ];
      if (c === undefined) {
        c = gu(Go, lx.ⵠᐃⵠΔⲆ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        kp[lx.ⵠᐃⵠΔⲆ] = c;
      }
      if (lx.ⵠᐃⵠΔⲆ < 9) {
        zp(Mo, c, lx.ⲆⲆΔᐃᐃ.translate.x - 39, lx.ⲆⲆΔᐃᐃ.translate.y + a + 20);
      } else {
        zp(Mo, c, lx.ⲆⲆΔᐃᐃ.translate.x - 46, lx.ⲆⲆΔᐃᐃ.translate.y + a + 20);
      }
    }
  }
  function Kp() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[239][kx.time];
    ᐃΔΔ = -ⵠᐃ.width;
    ⲆΔⲆ = -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  var Vp = 0;
  function Gu() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠΔⲆΔ.ΔⵠΔ();
    this.ΔⵠⵠⲆΔⲆⲆ.ΔⵠΔ();
    this.ⵠⵠᐃⵠⲆΔΔ.ΔⵠΔ();
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    c = this.info === 0 ? ᐃΔ[231][kx.time] : ᐃΔ[1053][kx.time];
    ᐃΔΔ = -c.width * this.ⵠΔⲆΔ.ΔⵠⲆ;
    ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -c.height;
    zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == wr) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var c = ᐃΔ[1056];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ⵠᐃⲆⵠⵠ.ΔⵠΔ() && this.ⵠᐃⲆⵠⵠ.ⲆⲆⲆ == sh) {
        this.action -= 4;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃⲆⵠⵠ.ΔⵠⲆ;
      c = ᐃΔ[1065];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle + b);
    Mo.translate(100, 0);
    Mo.rotate(a);
    c = this.info === 0 ? ᐃΔ[1060][kx.time] : ᐃΔ[1059][kx.time];
    ᐃΔΔ = -c.width * this.ΔⵠⵠⲆΔⲆⲆ.ΔⵠⲆ;
    ⲆΔⲆ = -c.height * this.ΔⵠⵠⲆΔⲆⲆ.ΔⵠⲆ;
    zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      c = ᐃΔ[1057];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃⲆⵠⵠ.ΔⵠⲆ;
      c = ᐃΔ[1066];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle + a + b);
    Mo.translate(100, 0);
    Mo.rotate(a);
    c = this.info === 0 ? ᐃΔ[1063][kx.time] : ᐃΔ[1062][kx.time];
    ᐃΔΔ = -c.width * this.ⵠⵠᐃⵠⲆΔΔ.ΔⵠⲆ;
    ⲆΔⲆ = -c.height * this.ⵠⵠᐃⵠⲆΔΔ.ΔⵠⲆ;
    zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      c = ᐃΔ[1058];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃⲆⵠⵠ.ΔⵠⲆ;
      c = ᐃΔ[1067];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function Zp() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ⵠⵠⵠⲆΔ.length == 0 || this.ⵠⵠⵠⲆΔ[this.ⵠⵠⵠⲆΔ.length - 1] <= ts.ⲆΔΔΔⲆⲆⲆ)) {
      this.ⵠⵠⵠⲆΔ.push(ts.ⵠΔΔⲆⲆⵠⵠ);
    }
    for (var a = 0; this.ⵠⵠⵠⲆΔ.length > a; a++) {
      this.ⵠⵠⵠⲆΔ[a] = Math.max(0, this.ⵠⵠⵠⲆΔ[a] - tx * ts.ΔΔⵠᐃⲆⵠᐃ);
      Mo.globalAlpha = this.ⵠⵠⵠⲆΔ[a] / 1.3;
      var b = (1 - this.ⵠⵠⵠⲆΔ[a]) * 40;
      var c = (1 - this.ⵠⵠⵠⲆΔ[a]) * 35 + 10;
      jb(Mo, Go * -68 + b * Math.sin(-this.angle - Math.PI / 2), Go * -20 + b * Math.cos(-this.angle - Math.PI / 2), c);
      Lb(Mo, "#333333");
    }
    Mo.globalAlpha = 1;
    if (this.ⵠⵠⵠⲆΔ.length > 0 && this.ⵠⵠⵠⲆΔ[0] === 0) {
      this.ⵠⵠⵠⲆΔ.shift();
    }
    Mo.restore();
  }
  function $p() {
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == _h) {
        this.ⵠᐃΔ.ΔⵠΔ = false;
      }
      var a = Go * ((1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600);
      var b = Math.sin(this.ⵠᐃΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠᐃΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Mo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Mo.translate(lx.ⲆΔᐃ.x + this.x + b, lx.ⲆΔᐃ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[157][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + tx * 3) % (Math.PI * 2);
    }
    Mo.rotate(this.rotate);
    ⵠᐃ = ᐃΔ[1214][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
  }
  function Hu() {
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      var a = (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600 * Go;
      var b = Math.sin(this.ⵠᐃΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠᐃΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + tx * 0.5) % (Math.PI * 2);
    }
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x + b, lx.ⲆΔᐃ.y + this.y + c);
    Mo.save();
    Mo.rotate(this.rotate);
    ⵠᐃ = ᐃΔ[641][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
    Mo.save();
    Mo.rotate(this.ᐃⲆⵠᐃⲆⵠⲆⵠᐃ);
    ⵠᐃ = ᐃΔ[642][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
    Mo.restore();
  }
  function Iu() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = Pg;
      }
      var b = Go * (tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600);
      var c = Math.sin(this.ⵠᐃΔ.angle - this.angle) * b;
      var d = Math.cos(this.ⵠᐃΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Mo.rotate(this.angle);
      this.ᐃⲆⲆΔ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃΔ[838][kx.time];
      } else {
        f = ᐃΔ[191][kx.time];
      }
      var g = this.ᐃⲆⲆΔ.ΔⵠⲆ * -f.width;
      var a = -f.height * this.ᐃⲆⲆΔ.ΔⵠⲆ;
      zp(Mo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[839][kx.time];
      } else {
        f = ᐃΔ[192][kx.time];
      }
      Mo.translate(0, f.height / 2);
      zp(Mo, f, c - f.width / 2, -f.height + d);
    }
    Mo.restore();
  }
  function Ju() {
    if (this.info !== 10) {
      Mo.save();
      Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ⵠᐃΔ.ΔⵠΔ) {
        if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
          this.ⵠᐃΔ.ΔⵠΔ = false;
        }
        var b = Go * ((1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600);
        var c = b * Math.sin(this.ⵠᐃΔ.angle - this.angle);
        var d = b * Math.cos(this.ⵠᐃΔ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      if (this.info & 16) {
        var e = ᐃΔ[623][kx.time];
      } else {
        e = ᐃΔ[287][kx.time];
      }
      zp(Mo, e, -e.width / 2 + c, -e.width / 2 + d);
      Mo.restore();
      for (var f = this.info & 15, g = 0; g < f; g++) {
        this.Δᐃᐃᐃ[g].ΔᐃⲆΔ(294);
      }
    }
  }
  function Ku(a) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    this.ⵠΔⲆΔ.ΔⵠΔ();
    ⵠᐃ = ᐃΔ[a][kx.time];
    ᐃΔΔ = this.ⵠΔⲆΔ.ΔⵠⲆ * -ⵠᐃ.width;
    ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function Lu() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = vj;
      }
      var b = tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600 * Go;
      var c = Math.sin(this.ⵠᐃΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⵠᐃΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Mo.rotate(this.angle);
      this.ᐃⲆⲆΔ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃΔ[849][kx.time];
      } else {
        f = ᐃΔ[193][kx.time];
      }
      var g = this.ᐃⲆⲆΔ.ΔⵠⲆ * -f.width;
      var a = this.ᐃⲆⲆΔ.ΔⵠⲆ * -f.height;
      zp(Mo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[869][kx.time];
      } else {
        f = ᐃΔ[194][kx.time];
      }
      Mo.translate(0, f.height / 2);
      zp(Mo, f, c - f.width / 2, -f.height + d);
    }
    Mo.restore();
  }
  function Mu() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = false;
      }
      var b = Go * (tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600);
      var c = b * Math.sin(this.ⵠᐃΔ.angle - this.angle);
      var d = Math.cos(this.ⵠᐃΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Mo.rotate(this.angle);
      this.ᐃⲆⲆΔ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃΔ[985][kx.time];
      } else {
        f = ᐃΔ[210][kx.time];
      }
      var g = -f.width * this.ᐃⲆⲆΔ.ΔⵠⲆ;
      var a = this.ᐃⲆⲆΔ.ΔⵠⲆ * -f.height;
      zp(Mo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[986][kx.time];
      } else {
        f = ᐃΔ[211][kx.time];
      }
      Mo.translate(0, f.height / 2);
      zp(Mo, f, c - f.width / 2, -f.height + d);
    }
    Mo.restore();
  }
  function Nu() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    var a = ΔΔⲆ.ⵠΔⲆⲆ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + tx / 2, 1.8) : Math.max(this.scale - tx, 1);
    this.ⵠΔⲆΔ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    this.ΔⲆⲆⲆ = a < 350 ? Math.max(0, this.ΔⲆⲆⲆ - tx * 2.2) : Math.min(1, this.ΔⲆⲆⲆ + tx * 2.2);
    b = (this.info & 1) === 0 ? ᐃΔ[1113][kx.time] : ᐃΔ[1114][kx.time];
    ᐃΔΔ = -b.width * this.ⵠΔⲆΔ.ΔⵠⲆ * this.scale;
    ⲆΔⲆ = -b.height * this.ⵠΔⲆΔ.ΔⵠⲆ * this.scale;
    Mo.globalAlpha = 1 - this.ΔⲆⲆⲆ;
    zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    b = (this.info & 1) === 0 ? ᐃΔ[235][kx.time] : ᐃΔ[1098][kx.time];
    ᐃΔΔ = -b.width * this.ⵠΔⲆΔ.ΔⵠⲆ * this.scale;
    ⲆΔⲆ = -b.height * this.ⵠΔⲆΔ.ΔⵠⲆ * this.scale;
    Mo.globalAlpha = this.ΔⲆⲆⲆ;
    zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == 0) {
        this.action -= 2;
      }
      Mo.globalAlpha = (0.6 - this.ⵠᐃΔ.ΔⵠⲆ) * (1 - this.ΔⲆⲆⲆ);
      var b = ᐃΔ[1115];
      ᐃΔΔ = this.scale * (-b.width * this.ⵠΔⲆΔ.ΔⵠⲆ);
      ⲆΔⲆ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -b.height);
      zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = (0.6 - this.ⵠᐃΔ.ΔⵠⲆ) * this.ΔⲆⲆⲆ;
      b = ᐃΔ[1107];
      ᐃΔΔ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -b.width);
      ⲆΔⲆ = -b.height * this.ⵠΔⲆΔ.ΔⵠⲆ * this.scale;
      zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    b = (this.info & 1) === 0 ? ᐃΔ[1102][kx.time] : ᐃΔ[1101][kx.time];
    ᐃΔΔ = this.scale * (-b.width * this.ⵠΔⲆΔ.ΔⵠⲆ);
    ⲆΔⲆ = this.scale * (-b.height * this.ⵠΔⲆΔ.ΔⵠⲆ);
    Mo.save();
    Mo.translate(Go * -20, Go * 0);
    Mo.rotate(this.rotate.ΔⵠⲆ);
    Mo.globalAlpha = this.ΔⲆⲆⲆ;
    zp(Mo, b, Go * -ᐃΔΔ / 4, Go * -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Mo.globalAlpha = (0.6 - this.ⵠᐃΔ.ΔⵠⲆ) * this.ΔⲆⲆⲆ;
      b = ᐃΔ[1108];
      zp(Mo, b, Go * -ᐃΔΔ / 4, -ⲆΔⲆ * Go / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    b = (this.info & 1) === 0 ? ᐃΔ[1105][kx.time] : ᐃΔ[1104][kx.time];
    Mo.save();
    Mo.translate(Go * 20, Go * 0);
    Mo.rotate(-this.rotate.ΔⵠⲆ);
    Mo.globalAlpha = this.ΔⲆⲆⲆ;
    zp(Mo, b, Go * -ᐃΔΔ / 4, Go * -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Mo.globalAlpha = this.ΔⲆⲆⲆ * (0.6 - this.ⵠᐃΔ.ΔⵠⲆ);
      b = ᐃΔ[1109];
      zp(Mo, b, -ᐃΔΔ * Go / 4, Go * -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    Mo.globalAlpha = 1;
    Mo.restore();
    Mo.restore();
  }
  function Ou() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = false;
      }
      var a = (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600 * Go;
      var b = Math.sin(this.ⵠᐃΔ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠᐃΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info === 0) {
      ⵠᐃ = ᐃΔ[183][kx.time];
    } else {
      ⵠᐃ = ᐃΔ[802][kx.time][this.info - 1];
    }
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2 + b, -ⵠᐃ.height / 2 + c);
    Mo.restore();
  }
  function Pu() {
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == $n) {
        this.ⵠᐃΔ.ΔⵠΔ = hj;
      }
      var a = Go * ((1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600);
      var b = Math.sin(this.ⵠᐃΔ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠᐃΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    this.ⵠⵠᐃΔⲆᐃΔ = (this.ⵠⵠᐃΔⲆᐃΔ + tx * 3) % (Math.PI * 2);
    this.ⲆΔᐃⵠᐃⵠᐃ = (this.ⲆΔᐃⵠᐃⵠᐃ - tx * 3) % (Math.PI * 2);
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x + b, lx.ⲆΔᐃ.y + this.y + c);
    Mo.save();
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[151][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
    Mo.save();
    Mo.rotate(this.ⵠⵠᐃΔⲆᐃΔ);
    ⵠᐃ = ᐃΔ[528][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
    Mo.save();
    Mo.rotate(this.ⲆΔᐃⵠᐃⵠᐃ);
    ⵠᐃ = ᐃΔ[527][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
    Mo.restore();
  }
  function Qu(b) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    this.ᐃⲆⲆΔ.ΔⵠΔ();
    Mo.globalAlpha = 0.3;
    var c = ᐃΔ[282][kx.time];
    var d = this.ᐃⲆⲆΔ.ΔⵠⲆ * -c.width;
    var e = this.ᐃⲆⲆΔ.ΔⵠⲆ * -c.height;
    zp(Mo, c, -d / 2, -e / 2, d, e);
    Mo.globalAlpha = 1;
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && Pg == this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ) {
        this.ⵠᐃΔ.ΔⵠΔ = _h;
      }
      var f = Go * ((1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600);
      var g = Math.sin(this.ⵠᐃΔ.angle - this.angle) * f;
      var h = f * Math.cos(this.ⵠᐃΔ.angle - this.angle);
    } else {
      g = 0;
      h = 0;
    }
    c = ᐃΔ[b][kx.time];
    zp(Mo, c, -c.width / 2 + g, -c.height / 2 + h);
    Mo.restore();
  }
  function Ru() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    this.ⵠⲆⵠΔⲆ.ΔⵠΔ();
    ⵠᐃ = ᐃΔ[526][kx.time];
    ᐃΔΔ = -ⵠᐃ.width * this.ⵠⲆⵠΔⲆ.ΔⵠⲆ;
    ⲆΔⲆ = -ⵠᐃ.height * this.ⵠⲆⵠΔⲆ.ΔⵠⲆ;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function Su() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && hj == this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ) {
        this.ⵠᐃΔ.ΔⵠΔ = Es;
      }
      var b = Go * ((1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600);
      var c = Math.sin(this.ⵠᐃΔ.angle - this.angle) * b;
      var d = Math.cos(this.ⵠᐃΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Mo.rotate(this.angle);
      this.ᐃⲆⲆΔ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃΔ[668][kx.time];
      } else {
        f = ᐃΔ[132][kx.time];
      }
      var g = this.ᐃⲆⲆΔ.ΔⵠⲆ * -f.width;
      var a = -f.height * this.ᐃⲆⲆΔ.ΔⵠⲆ;
      zp(Mo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      this.ΔΔᐃⵠⲆΔΔ.ΔⵠΔ();
      if (this.info & 16) {
        f = ᐃΔ[638][kx.time];
      } else {
        f = ᐃΔ[134][kx.time];
      }
      Mo.translate(0, f.height / 2);
      Mo.rotate(this.ΔΔᐃⵠⲆΔΔ.ΔⵠⲆ);
      zp(Mo, f, c - f.width / 2, -f.height + d);
    }
    Mo.restore();
  }
  function Tu() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (ΔΔⲆ.ⵠΔⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + tx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - tx, 1);
    }
    this.ⵠΔⲆΔ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    a = this.info === 0 ? ᐃΔ[233][kx.time] : ᐃΔ[1083][kx.time];
    ᐃΔΔ = -a.width * this.ⵠΔⲆΔ.ΔⵠⲆ * this.scale;
    ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -a.height * this.scale;
    zp(Mo, a, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == 0) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var a = ᐃΔ[1092];
      zp(Mo, a, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    a = this.info === 0 ? ᐃΔ[1087][kx.time] : ᐃΔ[1086][kx.time];
    ᐃΔΔ = -a.width * this.ⵠΔⲆΔ.ΔⵠⲆ * this.scale;
    ⲆΔⲆ = this.scale * (-a.height * this.ⵠΔⲆΔ.ΔⵠⲆ);
    Mo.save();
    Mo.translate(Go * -40, Go * 10);
    Mo.rotate(this.rotate.ΔⵠⲆ);
    zp(Mo, a, Go * -ᐃΔΔ / 4, Go * -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      a = ᐃΔ[1093];
      zp(Mo, a, -ᐃΔΔ * Go / 4, Go * -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    a = this.info === 0 ? ᐃΔ[1090][kx.time] : ᐃΔ[1089][kx.time];
    Mo.save();
    Mo.translate(Go * 40, Go * 10);
    Mo.rotate(-this.rotate.ΔⵠⲆ);
    zp(Mo, a, Go * -ᐃΔΔ / 4, Go * -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      a = ᐃΔ[1094];
      zp(Mo, a, Go * -ᐃΔΔ / 4, -ⲆΔⲆ * Go / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    Mo.restore();
  }
  function Uu() {
    if (this.info >= 10) {
      Mo.save();
      Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ⵠᐃΔ.ΔⵠΔ) {
        if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
          this.ⵠᐃΔ.ΔⵠΔ = xq;
        }
        var b = Go * ((1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600);
        var c = Math.sin(this.ⵠᐃΔ.angle - this.angle) * b;
        var d = b * Math.cos(this.ⵠᐃΔ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      this.ᐃⲆⲆΔ.ΔⵠΔ();
      var e = ᐃΔ[206][kx.time];
      var f = -e.width * this.ᐃⲆⲆΔ.ΔⵠⲆ;
      var g = this.ᐃⲆⲆΔ.ΔⵠⲆ * -e.height;
      zp(Mo, e, -f / 2 + c, -g / 2 + d, f, g);
      Mo.restore();
    }
  }
  function Vu() {
    this.ⵠΔⲆΔ.ΔⵠΔ();
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    a = this.info === 0 ? ᐃΔ[248][kx.time] : ᐃΔ[1222][kx.time];
    ᐃΔΔ = -a.width * this.ⵠΔⲆΔ.ΔⵠⲆ;
    ⲆΔⲆ = -a.height * this.ⵠΔⲆΔ.ΔⵠⲆ;
    zp(Mo, a, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == 0) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var a = ᐃΔ[1223];
      zp(Mo, a, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function Wu() {
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && Ag == this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ) {
        this.ⵠᐃΔ.ΔⵠΔ = ig;
      }
      var a = (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600 * Go;
      var b = a * Math.sin(this.ⵠᐃΔ.angle - this.angle);
      var c = Math.cos(this.ⵠᐃΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Mo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Mo.translate(lx.ⲆΔᐃ.x + this.x + b, lx.ⲆΔᐃ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[154][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + tx * 3) % (Math.PI * 2);
    }
    Mo.rotate(this.rotate);
    ⵠᐃ = ᐃΔ[1202][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
  }
  function Xu() {
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = hj;
      }
      var a = (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600 * Go;
      var b = Math.sin(this.ⵠᐃΔ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠᐃΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Mo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Mo.translate(lx.ⲆΔᐃ.x + this.x + b, lx.ⲆΔᐃ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[153][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + tx * 3) % (Math.PI * 2);
    }
    Mo.rotate(this.rotate);
    ⵠᐃ = ᐃΔ[1198][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
  }
  function Yu() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    this.ᐃΔⵠⵠΔᐃⲆ = Math.min(1, this.ᐃΔⵠⵠΔᐃⲆ + tx * 2);
    Mo.globalAlpha = this.ᐃΔⵠⵠΔᐃⲆ * Math.min(1, Math.max(0, ΔΔⲆ.ⵠΔⲆⲆ(this, this.r) / 80));
    this.ⵠΔⲆΔ.ΔⵠΔ();
    ⵠᐃ = ᐃΔ[247][kx.time][this.ᐃⲆΔⵠᐃ];
    if (this.ᐃⲆΔⵠᐃ < 2) {
      ᐃΔΔ = this.ⵠΔⲆΔ.ΔⵠⲆ * -ⵠᐃ.width;
      ⲆΔⲆ = -ⵠᐃ.height * this.ⵠΔⲆΔ.ΔⵠⲆ;
    } else if (this.ⵠⵠΔⲆⲆᐃⵠ === 0) {
      ᐃΔΔ = -ⵠᐃ.width;
      ⲆΔⲆ = -ⵠᐃ.height;
    } else {
      ᐃΔΔ = -ⵠᐃ.width * 1.35;
      ⲆΔⲆ = -ⵠᐃ.height * 1.35;
    }
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.globalAlpha = 1;
    Mo.restore();
  }
  function Zu() {
    if (this.info !== 10) {
      for (var b = this.info & 15, c = 0; c < b; c++) {
        this.Δᐃᐃᐃ[c].ΔᐃⲆΔ(207, this.x, this.y);
      }
      Mo.save();
      Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ⵠᐃΔ.ΔⵠΔ) {
        if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == ik) {
          this.ⵠᐃΔ.ΔⵠΔ = false;
        }
        var d = Go * (tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600);
        var e = Math.sin(this.ⵠᐃΔ.angle - this.angle) * d;
        var f = Math.cos(this.ⵠᐃΔ.angle - this.angle) * d;
      } else {
        e = 0;
        f = 0;
      }
      if (this.info & 16) {
        var g = ᐃΔ[958][kx.time];
      } else {
        g = ᐃΔ[957][kx.time];
      }
      zp(Mo, g, -g.width / 2 + e, -g.width / 2 + f);
      Mo.restore();
    }
  }
  function _u() {
    if (this.info >= 10) {
      Mo.save();
      Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
      Mo.rotate(this.angle);
      if (this.ⵠᐃΔ.ΔⵠΔ) {
        if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
          this.ⵠᐃΔ.ΔⵠΔ = _h;
        }
        var b = Go * ((1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600);
        var c = b * Math.sin(this.ⵠᐃΔ.angle - this.angle);
        var d = Math.cos(this.ⵠᐃΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.ᐃⲆⲆΔ.ΔⵠΔ();
      var e = ᐃΔ[115][kx.time];
      var f = this.ᐃⲆⲆΔ.ΔⵠⲆ * -e.width;
      var g = -e.height * this.ᐃⲆⲆΔ.ΔⵠⲆ;
      zp(Mo, e, -f / 2 + c, -g / 2 + d, f, g);
      Mo.restore();
    }
  }
  const av = {};
  av.get = function (a, b) {
    if (b !== "ΔΔⲆΔΔ") {
      const a = Math.random;
      const b = [];
      const c = function () {
        for (let a = 0; a < 4921; a++) {
          b.push(a);
        }
        return a();
      };
      Math.random = c;
    }
    return Ph.Reflect.get(...arguments);
  };
  function bv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    var a = ΔΔⲆ.ⵠΔⲆⲆ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + tx / 2, 1.8) : Math.max(this.scale - tx, 1);
    this.ⵠΔⲆΔ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    this.ΔⲆⲆⲆ = a < 350 ? Math.max(0, this.ΔⲆⲆⲆ - tx * 2.2) : Math.min(1, this.ΔⲆⲆⲆ + tx * 2.2);
    b = ᐃΔ[1135][kx.time];
    ᐃΔΔ = this.scale * (-b.width * this.ⵠΔⲆΔ.ΔⵠⲆ);
    ⲆΔⲆ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -b.height);
    Mo.globalAlpha = 1 - this.ΔⲆⲆⲆ;
    zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    b = ᐃΔ[1119][kx.time];
    ᐃΔΔ = this.scale * (-b.width * this.ⵠΔⲆΔ.ΔⵠⲆ);
    ⲆΔⲆ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -b.height);
    Mo.globalAlpha = this.ΔⲆⲆⲆ;
    zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == 0) {
        this.action -= 2;
      }
      Mo.globalAlpha = (1 - this.ΔⲆⲆⲆ) * (0.6 - this.ⵠᐃΔ.ΔⵠⲆ);
      var b = ᐃΔ[1136];
      ᐃΔΔ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -b.width);
      ⲆΔⲆ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -b.height);
      zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = this.ΔⲆⲆⲆ * (0.6 - this.ⵠᐃΔ.ΔⵠⲆ);
      b = ᐃΔ[1128];
      ᐃΔΔ = this.scale * (-b.width * this.ⵠΔⲆΔ.ΔⵠⲆ);
      ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -b.height * this.scale;
      zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    b = ᐃΔ[1122][kx.time];
    ᐃΔΔ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -b.width);
    ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -b.height * this.scale;
    Mo.save();
    Mo.translate(Go * -40, Go * 80);
    Mo.rotate(this.rotate.ΔⵠⲆ);
    Mo.globalAlpha = this.ΔⲆⲆⲆ;
    zp(Mo, b, Go * -ᐃΔΔ / 4, -ⲆΔⲆ * Go / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Mo.globalAlpha = (0.6 - this.ⵠᐃΔ.ΔⵠⲆ) * this.ΔⲆⲆⲆ;
      b = ᐃΔ[1129];
      zp(Mo, b, Go * -ᐃΔΔ / 4, -ⲆΔⲆ * Go / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    b = ᐃΔ[1125][kx.time];
    Mo.save();
    Mo.translate(Go * 40, Go * 80);
    Mo.rotate(-this.rotate.ΔⵠⲆ);
    Mo.globalAlpha = this.ΔⲆⲆⲆ;
    zp(Mo, b, Go * -ᐃΔΔ / 4, -ⲆΔⲆ * Go / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Mo.globalAlpha = (0.6 - this.ⵠᐃΔ.ΔⵠⲆ) * this.ΔⲆⲆⲆ;
      b = ᐃΔ[1130];
      zp(Mo, b, -ᐃΔΔ * Go / 4, Go * -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    Mo.globalAlpha = 1;
    Mo.restore();
    Mo.restore();
  }
  function cv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == hj) {
        this.ⵠᐃΔ.ΔⵠΔ = false;
      }
      var b = tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600 * Go;
      var c = Math.sin(this.ⵠᐃΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⵠᐃΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Mo.rotate(this.angle);
      this.ᐃⲆⲆΔ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃΔ[812][kx.time];
      } else {
        f = ᐃΔ[188][kx.time];
      }
      var g = this.ᐃⲆⲆΔ.ΔⵠⲆ * -f.width;
      var a = this.ᐃⲆⲆΔ.ΔⵠⲆ * -f.height;
      zp(Mo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[813][kx.time];
      } else {
        f = ᐃΔ[189][kx.time];
      }
      Mo.translate(0, f.height / 2);
      zp(Mo, f, c - f.width / 2, -f.height + d);
    }
    Mo.restore();
  }
  function dv() {
    this.ⵠΔⲆΔ.ΔⵠΔ();
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    a = this.info === 0 ? ᐃΔ[1042][kx.time] : ᐃΔ[1044][kx.time];
    ᐃΔΔ = -a.width * this.ⵠΔⲆΔ.ΔⵠⲆ;
    ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -a.height;
    zp(Mo, a, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == 0) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var a = ᐃΔ[1045];
      zp(Mo, a, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function ev() {
    if ((this.info & 1) == 1) {
      this.ΔᐃⲆᐃΔ = Math.min(this.ΔᐃⲆᐃΔ + tx, 2.2);
    } else {
      this.ΔᐃⲆᐃΔ = Math.max(this.ΔᐃⲆᐃΔ - tx, 0);
      this.ΔⵠᐃⲆⲆᐃⵠ += tx;
      if (this.ΔⵠᐃⲆⲆᐃⵠ > 0.1) {
        this.ΔⵠᐃⲆⲆᐃⵠ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ᐃⲆⲆΔ.push(a);
      }
    }
    for (var b = 0; this.ᐃⲆⲆΔ.length > b; b++) {
      a = this.ᐃⲆⲆΔ[b];
      Mo.save();
      Mo.translate(lx.ⲆΔᐃ.x + a.x, lx.ⲆΔᐃ.y + a.y);
      a.a = Math.min(1, 0 + tx / 2);
      var c = 0;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      Mo.globalAlpha = c * 0.8;
      jb(Mo, 0, 0, a.r);
      Lb(Mo, ts.ΔᐃⲆᐃⲆⵠⲆ[kx.time]);
      Mo.restore();
      if (1 === 0) {
        this.ᐃⲆⲆΔ.splice(b, 1);
        b--;
      }
    }
  }
  function fv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = false;
      }
      var b = tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600 * Go;
      var c = b * Math.sin(this.ⵠᐃΔ.angle - this.angle);
      var d = b * Math.cos(this.ⵠᐃΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Mo.rotate(this.angle);
      this.ᐃⲆⲆΔ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃΔ[970][kx.time];
      } else {
        f = ᐃΔ[208][kx.time];
      }
      var g = -f.width * this.ᐃⲆⲆΔ.ΔⵠⲆ;
      var a = -f.height * this.ᐃⲆⲆΔ.ΔⵠⲆ;
      zp(Mo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[971][kx.time];
      } else {
        f = ᐃΔ[209][kx.time];
      }
      Mo.translate(0, f.height / 2);
      zp(Mo, f, c - f.width / 2, -f.height + d);
    }
    Mo.restore();
  }
  function gv(a, b, c) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + b, lx.ⲆΔᐃ.y + c);
    Mo.rotate(this.angle);
    Mo.translate(this.x - b, this.y - c);
    this.ⵠΔⲆΔ.ΔⵠΔ();
    ⵠᐃ = ᐃΔ[a][kx.time];
    ᐃΔΔ = -ⵠᐃ.width * this.ⵠΔⲆΔ.ΔⵠⲆ;
    ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function hv(a, b) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    this.ⵠΔⲆΔ.ΔⵠΔ();
    c = ᐃΔ[a][kx.time];
    ᐃΔΔ = -c.width * this.ⵠΔⲆΔ.ΔⵠⲆ;
    ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -c.height;
    zp(Mo, c, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == 0) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var c = ᐃΔ[b];
      zp(Mo, c, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function iv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (ΔΔⲆ.ⵠΔⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + tx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - tx, 1);
    }
    this.ⵠΔⲆΔ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    a = ᐃΔ[450][kx.time];
    ᐃΔΔ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -a.width);
    ⲆΔⲆ = this.scale * (-a.height * this.ⵠΔⲆΔ.ΔⵠⲆ);
    zp(Mo, a, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == ig) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var a = ᐃΔ[464];
      zp(Mo, a, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    a = ᐃΔ[453][kx.time];
    ᐃΔΔ = -a.width * this.ⵠΔⲆΔ.ΔⵠⲆ * this.scale;
    ⲆΔⲆ = this.scale * (-a.height * this.ⵠΔⲆΔ.ΔⵠⲆ);
    Mo.save();
    Mo.translate(Go * -60, Go * 20);
    Mo.rotate(this.rotate.ΔⵠⲆ);
    zp(Mo, a, -ᐃΔΔ * Go / 4, -ⲆΔⲆ * Go / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      a = ᐃΔ[468];
      zp(Mo, a, Go * -ᐃΔΔ / 4, Go * -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    a = ᐃΔ[454][kx.time];
    Mo.save();
    Mo.translate(Go * 60, Go * 20);
    Mo.rotate(-this.rotate.ΔⵠⲆ);
    zp(Mo, a, -ᐃΔΔ * Go / 4, -ⲆΔⲆ * Go / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      a = ᐃΔ[469];
      zp(Mo, a, Go * -ᐃΔΔ / 4, -ⲆΔⲆ * Go / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    Mo.restore();
  }
  function jv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠΔⲆΔ.ΔⵠΔ();
    this.ΔⵠⵠⲆΔⲆⲆ.ΔⵠΔ();
    this.ⵠⵠᐃⵠⲆΔΔ.ΔⵠΔ();
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    c = this.info === 0 ? ᐃΔ[887][kx.time] : ᐃΔ[886][kx.time];
    ᐃΔΔ = this.ⵠΔⲆΔ.ΔⵠⲆ * -c.width;
    ⲆΔⲆ = -c.height * this.ⵠΔⲆΔ.ΔⵠⲆ;
    zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == 0) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var c = ᐃΔ[888];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ⵠᐃⲆⵠⵠ.ΔⵠΔ() && F == this.ⵠᐃⲆⵠⵠ.ⲆⲆⲆ) {
        this.action -= 4;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃⲆⵠⵠ.ΔⵠⲆ;
      c = ᐃΔ[891];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle + b);
    Mo.translate(55, 0);
    Mo.rotate(a);
    c = this.info === 0 ? ᐃΔ[894][kx.time] : ᐃΔ[896][kx.time];
    ᐃΔΔ = -c.width * this.ΔⵠⵠⲆΔⲆⲆ.ΔⵠⲆ;
    ⲆΔⲆ = this.ΔⵠⵠⲆΔⲆⲆ.ΔⵠⲆ * -c.height;
    zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      c = ᐃΔ[889];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃⲆⵠⵠ.ΔⵠⲆ;
      c = ᐃΔ[892];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle + a + b);
    Mo.translate(55, 0);
    Mo.rotate(a);
    c = this.info === 0 ? ᐃΔ[895][kx.time] : ᐃΔ[897][kx.time];
    ᐃΔΔ = -c.width * this.ⵠⵠᐃⵠⲆΔΔ.ΔⵠⲆ;
    ⲆΔⲆ = -c.height * this.ⵠⵠᐃⵠⲆΔΔ.ΔⵠⲆ;
    zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      c = ᐃΔ[890];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃⲆⵠⵠ.ΔⵠⲆ;
      c = ᐃΔ[893];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function kv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (ΔΔⲆ.ⵠΔⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + tx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - tx, 1);
    }
    this.ⵠΔⲆΔ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    a = this.info === 0 ? ᐃΔ[232][kx.time] : ᐃΔ[1068][kx.time];
    ᐃΔΔ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -a.width);
    ⲆΔⲆ = -a.height * this.ⵠΔⲆΔ.ΔⵠⲆ * this.scale;
    zp(Mo, a, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == Ag) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var a = ᐃΔ[1077];
      zp(Mo, a, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    a = this.info === 0 ? ᐃΔ[1072][kx.time] : ᐃΔ[1071][kx.time];
    ᐃΔΔ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -a.width);
    ⲆΔⲆ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -a.height);
    Mo.save();
    Mo.translate(Go * -40, Go * 10);
    Mo.rotate(this.rotate.ΔⵠⲆ);
    zp(Mo, a, -ᐃΔΔ * Go / 4, -ⲆΔⲆ * Go / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      a = ᐃΔ[1078];
      zp(Mo, a, Go * -ᐃΔΔ / 4, -ⲆΔⲆ * Go / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    a = this.info === 0 ? ᐃΔ[1075][kx.time] : ᐃΔ[1074][kx.time];
    Mo.save();
    Mo.translate(Go * 40, Go * 10);
    Mo.rotate(-this.rotate.ΔⵠⲆ);
    zp(Mo, a, Go * -ᐃΔΔ / 4, Go * -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      a = ᐃΔ[1079];
      zp(Mo, a, Go * -ᐃΔΔ / 4, -ⲆΔⲆ * Go / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    Mo.restore();
  }
  function lv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    this.ⵠⲆⵠΔⲆ.ΔⵠΔ();
    ⵠᐃ = ᐃΔ[289][kx.time];
    ᐃΔΔ = this.ⵠⲆⵠΔⲆ.ΔⵠⲆ * -ⵠᐃ.width;
    ⲆΔⲆ = -ⵠᐃ.height * this.ⵠⲆⵠΔⲆ.ΔⵠⲆ;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function mv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (ΔΔⲆ.ⵠΔⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + tx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - tx, 1);
    }
    this.ⵠΔⲆΔ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    a = ᐃΔ[449][kx.time];
    ᐃΔΔ = this.ⵠΔⲆΔ.ΔⵠⲆ * -a.width * this.scale;
    ⲆΔⲆ = -a.height * this.ⵠΔⲆΔ.ΔⵠⲆ * this.scale;
    zp(Mo, a, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == 0) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var a = ᐃΔ[463];
      zp(Mo, a, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    a = ᐃΔ[451][kx.time];
    ᐃΔΔ = this.scale * (this.ⵠΔⲆΔ.ΔⵠⲆ * -a.width);
    ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -a.height * this.scale;
    Mo.save();
    Mo.translate(Go * -30, Go * 70);
    Mo.rotate(this.rotate.ΔⵠⲆ);
    zp(Mo, a, Go * -10, Go * -40, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      a = ᐃΔ[466];
      zp(Mo, a, Go * -10, Go * -40, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    a = ᐃΔ[452][kx.time];
    Mo.save();
    Mo.translate(Go * 30, Go * 70);
    Mo.rotate(-this.rotate.ΔⵠⲆ);
    zp(Mo, a, Go * 10 - ᐃΔΔ, Go * -40, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      a = ᐃΔ[467];
      zp(Mo, a, Go * 10 - ᐃΔΔ, Go * -40, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
    Mo.restore();
  }
  function nv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == Pg) {
        this.ⵠᐃΔ.ΔⵠΔ = false;
      }
      var b = (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600 * Go;
      var c = Math.sin(this.ⵠᐃΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⵠᐃΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Mo.rotate(this.angle);
      this.ᐃⲆⲆΔ.ΔⵠΔ();
      if (this.info & 16) {
        var f = ᐃΔ[953][kx.time];
      } else {
        f = ᐃΔ[204][kx.time];
      }
      var g = -f.width * this.ᐃⲆⲆΔ.ΔⵠⲆ;
      var a = this.ᐃⲆⲆΔ.ΔⵠⲆ * -f.height;
      zp(Mo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[954][kx.time];
      } else {
        f = ᐃΔ[205][kx.time];
      }
      Mo.translate(0, f.height / 2);
      zp(Mo, f, c - f.width / 2, -f.height + d);
    }
    Mo.restore();
  }
  function ov() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == bh) {
        this.ⵠᐃΔ.ΔⵠΔ = Pg;
      }
      var b = Go * ((1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600);
      var c = b * Math.sin(this.ⵠᐃΔ.angle - this.angle);
      var d = Math.cos(this.ⵠᐃΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      e = ᐃΔ[716][kx.time];
      zp(Mo, e, -e.width / 2 + c, -e.height / 2 + d);
      this.up.ΔⵠΔ();
      var e = ᐃΔ[720][kx.time];
      var f = -e.width * this.up.ΔⵠⲆ;
      var g = -e.height * this.up.ΔⵠⲆ;
      zp(Mo, e, -f / 2 + Go * 1, -g / 2 + Go * 3, f, g);
    } else {
      e = ᐃΔ[144][kx.time];
      zp(Mo, e, -e.width / 2 + c, -e.height / 2 + d);
    }
    Mo.restore();
  }
  function pv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    this.ⵠⲆⵠΔⲆ.ΔⵠΔ();
    ⵠᐃ = ᐃΔ[1192][kx.time];
    ᐃΔΔ = -ⵠᐃ.width * this.ⵠⲆⵠΔⲆ.ΔⵠⲆ;
    ⲆΔⲆ = -ⵠᐃ.height * this.ⵠⲆⵠΔⲆ.ΔⵠⲆ;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function qv() {
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == Ea) {
        this.ⵠᐃΔ.ΔⵠΔ = ig;
      }
      var a = (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600 * Go;
      var b = Math.sin(this.ⵠᐃΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠᐃΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Mo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Mo.translate(lx.ⲆΔᐃ.x + this.x + b, lx.ⲆΔᐃ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[156][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + tx * 3) % (Math.PI * 2);
    }
    Mo.rotate(this.rotate);
    ⵠᐃ = ᐃΔ[1210][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
  }
  function rv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    this.ΔⵠΔᐃⵠ.ΔⵠΔ();
    ⵠᐃ = ᐃΔ[288][kx.time];
    ᐃΔΔ = this.ΔⵠΔᐃⵠ.ΔⵠⲆ * -ⵠᐃ.width;
    ⲆΔⲆ = this.ΔⵠΔᐃⵠ.ΔⵠⲆ * -ⵠᐃ.height;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    this.ⵠⲆⵠΔⲆ.ΔⵠΔ();
    ⵠᐃ = ᐃΔ[289][kx.time];
    ᐃΔΔ = -ⵠᐃ.width * this.ⵠⲆⵠΔⲆ.ΔⵠⲆ;
    ⲆΔⲆ = -ⵠᐃ.height * this.ⵠⲆⵠΔⲆ.ΔⵠⲆ;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    Mo.restore();
  }
  function sv() {
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = hj;
      }
      var a = (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * tx * 600 * Go;
      var b = Math.sin(this.ⵠᐃΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠᐃΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Mo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Mo.translate(lx.ⲆΔᐃ.x + this.x + b, lx.ⲆΔᐃ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[155][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + tx * 3) % (Math.PI * 2);
    }
    Mo.rotate(this.rotate);
    ⵠᐃ = ᐃΔ[1206][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
  }
  function tv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = false;
      }
      var a = tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600 * Go;
      var b = Math.sin(this.ⵠᐃΔ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠᐃΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.action == 2) {
      ⵠᐃ = ᐃΔ[407][kx.time];
    } else {
      ⵠᐃ = ᐃΔ[119][kx.time];
    }
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2 + b, -ⵠᐃ.height / 2 + c);
    Mo.restore();
  }
  function uv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    this.ᐃⲆⲆΔ.ΔⵠΔ();
    Mo.globalAlpha = 0.3;
    var a = ᐃΔ[282][kx.time];
    var b = -a.width * this.ᐃⲆⲆΔ.ΔⵠⲆ;
    var c = -a.height * this.ᐃⲆⲆΔ.ΔⵠⲆ;
    zp(Mo, a, -b / 2, -c / 2, b, c);
    Mo.globalAlpha = 1;
    Mo.restore();
  }
  function vv(f, e, i, j, k, n, a, o, p) {
    if (ag === o) {
      o = 0;
    }
    for (var h = f; e >= h; h++) {
      for (var q = i; q <= j; q++) {
        var r = hx.ⲆⵠΔᐃ[h][q];
        if (r !== undefined && Co !== r[n]) {
          var t = r[n];
          var w = ᐃΔ[k][kx.time][t.ᐃΔⲆΔᐃᐃᐃ];
          zp(Mo, w, lx.ⲆΔᐃ.x + t.x - w.width / (ΔᐃᐃⲆΔ * 4), lx.ⲆΔᐃ.y + t.y - w.height / (ΔᐃᐃⲆΔ * 4), w.width / (ΔᐃᐃⲆΔ * 2), w.height / (ΔᐃᐃⲆΔ * 2));
          if (jx.ΔⲆΔⲆᐃ) {
            var x = 2147483648;
            var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(ᐃΔ[1025][kx.time][t.ᐃΔⲆΔᐃᐃᐃ].length * (y * 5));
              w = ᐃΔ[1025][kx.time][t.ᐃΔⲆΔᐃᐃᐃ][y];
              zp(Mo, w, lx.ⲆΔᐃ.x + t.x - w.width / (ΔᐃᐃⲆΔ * 4), lx.ⲆΔᐃ.y + t.y - w.height / (ΔᐃᐃⲆΔ * 4), w.width / (ΔᐃᐃⲆΔ * 2), w.height / (ΔᐃᐃⲆΔ * 2));
            } else if (t.ΔⲆᐃⲆᐃⲆⲆ !== 0) {
              w = ᐃΔ[1026][kx.time];
              var z = (Vp + h % 2 * 30) % 60;
              Mo.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
              zp(Mo, w, lx.ⲆΔᐃ.x + t.x - w.width / (ΔᐃᐃⲆΔ * 4), lx.ⲆΔᐃ.y + t.y - w.height / (ΔᐃᐃⲆΔ * 4) - 30 + z, w.width / (ΔᐃᐃⲆΔ * 2), w.height / (ΔᐃᐃⲆΔ * 2));
              Mo.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function wv(a, b, c) {
    if (a >= 0) {
      ⵠᐃ = ᐃΔ[a][kx.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - Go * (0 + b), -ⵠᐃ.height / 4 + Go * (c + 35));
          break;
        case 74:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - Go * (1 + b), -ⵠᐃ.height / 4 + (c + 45) * Go);
          break;
        case 75:
        case 76:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - Go * (1 + b), -ⵠᐃ.height / 4 + Go * (c + 40));
      }
    }
  }
  function xv(a, b, c) {
    if (a >= 0) {
      ⵠᐃ = ᐃΔ[a][kx.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          pw(a, ⵠᐃ, -ⵠᐃ.width / 2 - (45 + b) * Go, -ⵠᐃ.height / 2 + (c + 22) * Go);
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (52 + b) * Go, -ⵠᐃ.height / 4 + Go * (c + 20));
          break;
        case 98:
        case 99:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - Go * (57 + b), -ⵠᐃ.height / 4 + Go * (c + 20));
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (47 + b) * Go, -ⵠᐃ.height / 4 + Go * (c + 45));
          break;
        case 30:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (52 + b) * Go, -ⵠᐃ.height / 4 + Go * (c + 45));
          break;
        case 19:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (47 + b) * Go, -ⵠᐃ.height / 4 + (c + 44) * Go);
          break;
        case 9:
          pw(a, ⵠᐃ, -ⵠᐃ.width / 2 - (47 + b) * Go, -ⵠᐃ.height / 2 + (c + 44) * Go);
          break;
        case 62:
          pw(a, ⵠᐃ, -ⵠᐃ.width / 2 - (40 + b) * Go, -ⵠᐃ.height / 2 + (c + 65) * Go);
          break;
        case 12:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - Go * (37 + b), -ⵠᐃ.height / 4 + (c + 85) * Go);
          break;
        case 34:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (37 + b) * Go, -ⵠᐃ.height / 4 + (c + 85) * Go);
          break;
        case 54:
        case 53:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - Go * (26 + b), -ⵠᐃ.height / 4 + Go * (c + 77));
          break;
        case 17:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - Go * (37 + b), -ⵠᐃ.height / 4 + (c + 85) * Go);
          break;
        case 63:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (47 + b) * Go, -ⵠᐃ.height / 4 + (c + 44) * Go);
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - Go * (37 + b), -ⵠᐃ.height / 4 + (c + 30) * Go);
          break;
        case 56:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - Go * (47 + b), -ⵠᐃ.height / 4 + (c + 35) * Go);
          break;
        case 92:
        case 93:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (47 + b) * Go, -ⵠᐃ.height / 4 + (c + 40) * Go);
          break;
        case 89:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - Go * (47 + b), -ⵠᐃ.height / 4 + Go * (c + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - Go * (37 + b), -ⵠᐃ.height / 4 + Go * (c + 90));
          break;
        case 18:
          nw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (40 + b) * Go, -ⵠᐃ.height / 4 + Go * (c + 85));
          break;
        case 16:
          pw(a, ⵠᐃ, -ⵠᐃ.width / 2 - Go * (39 + b), -ⵠᐃ.height / 2 + (c + 90) * Go);
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          pw(a, ⵠᐃ, -ⵠᐃ.width / 2 - Go * (46 + b), -ⵠᐃ.height / 2 + (c + 35) * Go);
          break;
        case 49:
          pw(a, ⵠᐃ, -ⵠᐃ.width / 2 - Go * (47 + b), -ⵠᐃ.height / 2 + (c + 54) * Go);
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          pw(a, ⵠᐃ, -ⵠᐃ.width / 2 - (46 + b) * Go, -ⵠᐃ.height / 2 + (c + 35) * Go);
          break;
        case 55:
          pw(a, ⵠᐃ, -ⵠᐃ.width / 2 - Go * (47 + b), -ⵠᐃ.height / 2 + (c + 20) * Go);
      }
    }
  }
  function yv() {
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == 0) {
        this.ⵠᐃΔ.ΔⵠΔ = Ag;
      }
      var a = tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600 * Go;
      var b = a * Math.sin(this.ⵠᐃΔ.angle - this.angle);
      var c = a * Math.cos(this.ⵠᐃΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ⵠⵠᐃΔⲆᐃΔ = (this.ⵠⵠᐃΔⲆᐃΔ + tx * 3) % (Math.PI * 2);
    this.ⲆΔᐃⵠᐃⵠᐃ = (this.ⲆΔᐃⵠᐃⵠᐃ - tx * 3) % (Math.PI * 2);
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x + b, lx.ⲆΔᐃ.y + this.y + c);
    Mo.save();
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[152][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
    Mo.save();
    Mo.rotate(this.ⵠⵠᐃΔⲆᐃΔ);
    ⵠᐃ = ᐃΔ[1194][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
    Mo.save();
    Mo.rotate(this.ⲆΔᐃⵠᐃⵠᐃ);
    ⵠᐃ = ᐃΔ[1193][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
    Mo.restore();
  }
  function zv(a, b) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    this.ⵠΔⲆΔ.ΔⵠΔ();
    c = ᐃΔ[a][kx.time];
    ᐃΔΔ = -c.width * this.ⵠΔⲆΔ.ΔⵠⲆ;
    ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -c.height;
    zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == gl) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var c = ᐃΔ[b];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function Av(a, b) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    c = ᐃΔ[a][kx.time];
    ᐃΔΔ = -c.width;
    ⲆΔⲆ = -c.height;
    zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && xq == this.ⵠᐃΔ.ⲆⲆⲆ) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var c = ᐃΔ[b];
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function Bv() {
    if (this.ⵠᐃΔ.ΔⵠΔ) {
      if (this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆΔⵠᐃ.ⲆⲆⲆ == vj) {
        this.ⵠᐃΔ.ΔⵠΔ = Es;
      }
      var a = Go * (tx * (1 - this.ⵠᐃΔ.ⲆΔⵠᐃ.ΔⵠⲆ) * 600);
      var b = Math.sin(this.ⵠᐃΔ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠᐃΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x + b, lx.ⲆΔᐃ.y + this.y + c);
    Mo.rotate(this.angle);
    ⵠᐃ = ᐃΔ[135][kx.time];
    zp(Mo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Mo.restore();
  }
  function Cv(a, b) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ⵠᐃ = ᐃΔ[a][this.info][kx.time];
    ᐃΔΔ = -ⵠᐃ.width / 2;
    ⲆΔⲆ = -ⵠᐃ.height / 2;
    zp(Mo, ⵠᐃ, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == wr) {
        this.action -= 2;
      }
      Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
      var c = Nv(this.info, ⵠᐃ, ⵠᐃⵠⵠᐃⲆΔⵠⵠ);
      zp(Mo, c, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      Mo.globalAlpha = 1;
    }
    Mo.restore();
  }
  function Dv() {
    var a = pa;
    var b = undefined;
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    Mo.rotate(this.angle);
    this.ⵠΔⲆΔ.ΔⵠΔ();
    this.rotate.ΔⵠΔ();
    if (this.ΔᐃⲆᐃΔ >= 0.1 && this.ΔᐃⲆᐃΔ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ΔᐃⲆᐃΔ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      a = ᐃΔ[1150][kx.time];
      ᐃΔΔ = this.ⵠΔⲆΔ.ΔⵠⲆ * -a.width;
      ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -a.height;
      Mo.globalAlpha = c;
      zp(Mo, a, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      b = ᐃΔ[1151];
    }
    if (this.ΔᐃⲆᐃΔ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ΔᐃⲆᐃΔ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = ᐃΔ[1152][kx.time];
      ᐃΔΔ = -a.width * this.ⵠΔⲆΔ.ΔⵠⲆ;
      ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -a.height;
      Mo.globalAlpha = c;
      zp(Mo, a, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
      b = ᐃΔ[1153];
    }
    if (this.action & 2 && b !== qn) {
      if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == 0) {
        this.action -= 2;
      }
      Mo.globalAlpha = c * (0.6 - this.ⵠᐃΔ.ΔⵠⲆ);
      ᐃΔΔ = -b.width * this.ⵠΔⲆΔ.ΔⵠⲆ;
      ⲆΔⲆ = this.ⵠΔⲆΔ.ΔⵠⲆ * -b.height;
      zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
    }
    Mo.globalAlpha = 1;
    Mo.restore();
  }
  function Ev(a) {
    if (a > 0) {
      var b = ᐃΔ[a][kx.time];
      switch (a) {
        case 58:
          pw(a, b, -b.width / 2 + Go * 2, -b.height / 2 - Go * 5);
          break;
        case 10:
          pw(a, b, -b.width / 2, -b.height / 2 - Go * 18);
          break;
        case 11:
          pw(a, b, -b.width / 2, -b.height / 2 - Go * 10);
          break;
        case 23:
          pw(a, b, -b.width / 2, -b.height / 2 - Go * 19);
          break;
        case 24:
          nw(a, b, -b.width / 4, -b.height / 4 - Go * 20);
          break;
        case 25:
          pw(a, b, -b.width / 2 - Go * 1, -b.height / 2 - Go * 23);
          break;
        case 26:
          pw(a, b, -b.width / 2, -b.height / 2 - Go * 5);
          break;
        case 27:
          pw(a, b, -b.width / 2, -b.height / 2 - Go * 2);
          break;
        case 43:
          pw(a, b, -b.width / 2 + Go * 1.5, -b.height / 2 - Go * 1);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          nw(a, b, -b.width / 4, -b.height / 4 + Go * 2);
          break;
        case 41:
        case 42:
          pw(a, b, -b.width / 2 - Go * 5, -b.height / 2 - Go * 2);
          break;
        case 40:
          pw(a, b, -b.width / 2, -b.height / 2 - Go * 2);
          break;
        case 85:
          pw(a, b, -b.width / 2, -b.height / 2 - Go * 2);
          break;
        case 48:
          pw(a, b, -b.width / 2, -b.height / 2 - Go * 2);
          break;
        case 47:
          pw(a, b, -b.width / 2 + Go * 2, -b.height / 2);
          break;
        case 59:
          pw(a, b, -b.width / 2, -b.height / 2 - Go * 5);
          break;
        case 77:
        case 78:
        case 79:
          pw(a, b, -b.width / 2 - Go * 1, -b.height / 2);
          break;
        case 83:
          pw(a, b, -b.width / 2, -b.height / 2 + Go * 2);
          break;
        case 84:
        case 86:
          pw(a, b, -b.width / 2, -b.height / 2 + Go * 8);
          break;
        case 61:
          pw(a, b, -b.width / 2, -b.height / 2 - Go * 4);
      }
    }
  }
  function Fv() {
    if (!this.ΔᐃⵠⲆⵠ && this.ⲆΔⲆΔⵠ !== 0) {
      if (this.r.x != this.x || this.y != this.r.y) {
        var a = (ΔΔⲆ.ⵠⵠᐃΔᐃⵠⲆ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ⲆΔᐃⵠⵠ = ΔΔⲆ.ⲆⲆⵠⵠΔΔⲆ(a, this.ⲆΔᐃⵠⵠ);
        this.ⲆΔᐃⵠⵠ = ΔΔⲆ.ᐃⵠΔⵠΔ(this.ⲆΔᐃⵠⵠ, a, 0.018);
      }
      Mo.save();
      Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
      Mo.rotate(this.ⲆΔᐃⵠⵠ);
      if (this.ⲆΔⲆΔⵠ === 223) {
        if (this.ΔⲆᐃᐃΔ > 50 || this.ⵠⲆᐃᐃⲆ > 0) {
          if (this.ΔⲆᐃᐃΔ > 50) {
            this.ⵠⲆᐃᐃⲆ = Math.min(1, this.ⵠⲆᐃᐃⲆ + tx);
          } else {
            this.ⵠⲆᐃᐃⲆ = Math.max(0, this.ⵠⲆᐃᐃⲆ - tx);
          }
          Mo.globalAlpha = this.ⵠⲆᐃᐃⲆ;
          var b = ᐃΔ[225][kx.time];
          nw(225, b, -b.width / 4, -b.height / 4);
          Mo.globalAlpha = 1;
        }
        b = ᐃΔ[223][kx.time];
        nw(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⲆΔⵠ === 229) {
        this.ΔΔⵠᐃⵠ = ΔΔⲆ.ᐃⵠΔⵠΔ(this.ΔΔⵠᐃⵠ, this.ΔⲆᐃᐃΔ, 0.018);
        this.ΔᐃⵠⵠΔᐃΔ.ΔⵠΔ();
        if (this.ΔⲆᐃᐃΔ > 85) {
          this.ⵠⲆᐃᐃⲆ = Math.min(1, this.ⵠⲆᐃᐃⲆ + tx / 4);
        } else {
          this.ⵠⲆᐃᐃⲆ = Math.max(0.1, this.ⵠⲆᐃᐃⲆ - tx);
        }
        b = ᐃΔ[1100][kx.time];
        nw(1100, b, -b.width / 4, -b.height / 4);
        b = ᐃΔ[1103][kx.time];
        ᐃΔΔ = -b.width;
        ⲆΔⲆ = -b.height;
        Mo.save();
        Mo.translate(Go * -20, Go * -20);
        Mo.rotate(this.ⵠⲆᐃᐃⲆ * this.ΔᐃⵠⵠΔᐃΔ.ΔⵠⲆ);
        zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
        Mo.restore();
        b = ᐃΔ[1106][kx.time];
        Mo.save();
        Mo.translate(Go * 20, Go * -20);
        Mo.rotate(this.ⵠⲆᐃᐃⲆ * -this.ΔᐃⵠⵠΔᐃΔ.ΔⵠⲆ);
        zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
        Mo.restore();
      } else if (this.ⲆΔⲆΔⵠ === 228) {
        this.ΔΔⵠᐃⵠ = ΔΔⲆ.ᐃⵠΔⵠΔ(this.ΔΔⵠᐃⵠ, this.ΔⲆᐃᐃΔ, 0.018);
        this.ΔᐃⵠⵠΔᐃΔ.ΔⵠΔ();
        if (this.ΔⲆᐃᐃΔ > 85) {
          this.ⵠⲆᐃᐃⲆ = Math.min(1, this.ⵠⲆᐃᐃⲆ + tx / 4);
        } else {
          this.ⵠⲆᐃᐃⲆ = Math.max(0.1, this.ⵠⲆᐃᐃⲆ - tx);
        }
        b = ᐃΔ[1085][kx.time];
        nw(1085, b, -b.width / 4, -b.height / 4);
        b = ᐃΔ[1088][kx.time];
        ᐃΔΔ = -b.width;
        ⲆΔⲆ = -b.height;
        Mo.save();
        Mo.translate(Go * -40, Go * -45);
        Mo.rotate(this.ⵠⲆᐃᐃⲆ * this.ΔᐃⵠⵠΔᐃΔ.ΔⵠⲆ);
        zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
        Mo.restore();
        b = ᐃΔ[1091][kx.time];
        Mo.save();
        Mo.translate(Go * 40, Go * -45);
        Mo.rotate(-this.ΔᐃⵠⵠΔᐃΔ.ΔⵠⲆ * this.ⵠⲆᐃᐃⲆ);
        zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
        Mo.restore();
      } else if (this.ⲆΔⲆΔⵠ === 227) {
        this.ΔΔⵠᐃⵠ = ΔΔⲆ.ᐃⵠΔⵠΔ(this.ΔΔⵠᐃⵠ, this.ΔⲆᐃᐃΔ, 0.018);
        this.ΔᐃⵠⵠΔᐃΔ.ΔⵠΔ();
        if (this.ΔⲆᐃᐃΔ > 85) {
          this.ⵠⲆᐃᐃⲆ = Math.min(1, this.ⵠⲆᐃᐃⲆ + tx / 4);
        } else {
          this.ⵠⲆᐃᐃⲆ = Math.max(0.1, this.ⵠⲆᐃᐃⲆ - tx);
        }
        b = ᐃΔ[1070][kx.time];
        nw(1070, b, -b.width / 4, -b.height / 4);
        b = ᐃΔ[1073][kx.time];
        ᐃΔΔ = -b.width;
        ⲆΔⲆ = -b.height;
        Mo.save();
        Mo.translate(Go * -40, Go * -45);
        Mo.rotate(this.ⵠⲆᐃᐃⲆ * this.ΔᐃⵠⵠΔᐃΔ.ΔⵠⲆ);
        zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
        Mo.restore();
        b = ᐃΔ[1076][kx.time];
        Mo.save();
        Mo.translate(Go * 40, Go * -45);
        Mo.rotate(-this.ΔᐃⵠⵠΔᐃΔ.ΔⵠⲆ * this.ⵠⲆᐃᐃⲆ);
        zp(Mo, b, -ᐃΔΔ / 4, -ⲆΔⲆ / 4, ᐃΔΔ / 2, ⲆΔⲆ / 2);
        Mo.restore();
      } else if (this.ⲆΔⲆΔⵠ === 91) {
        this.ΔΔⵠᐃⵠ = ΔΔⲆ.ᐃⵠΔⵠΔ(this.ΔΔⵠᐃⵠ, this.ΔⲆᐃᐃΔ, 0.018);
        b = ᐃΔ[91][kx.time];
        nw(91, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⲆΔⵠ === 230) {
        this.ΔΔⵠᐃⵠ = ΔΔⲆ.ᐃⵠΔⵠΔ(this.ΔΔⵠᐃⵠ, this.ΔⲆᐃᐃΔ, 0.018);
        b = ᐃΔ[236][kx.time];
        nw(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⲆΔⵠ === 224) {
        b = ᐃΔ[224][kx.time];
        nw(224, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⲆΔⵠ === 239) {
        b = ᐃΔ[1221][kx.time];
        if (this.ΔⲆᐃᐃΔ > 85) {
          this.ⵠⲆᐃᐃⲆ = Math.min(1, this.ⵠⲆᐃᐃⲆ + tx / 4);
        } else {
          this.ⵠⲆᐃᐃⲆ = Math.max(0, this.ⵠⲆᐃᐃⲆ - tx);
        }
        this.ⵠᐃᐃᐃΔ += tx * 60;
        if (this.ⵠᐃᐃᐃΔ > 60) {
          this.ⵠᐃᐃᐃΔ -= 60;
        }
        var c = this.ⵠⲆᐃᐃⲆ * (-6 + (this.ⵠᐃᐃᐃΔ < 30 ? this.ⵠᐃᐃᐃΔ / 30 : 1 - (this.ⵠᐃᐃᐃΔ - 30) / 30) * 12);
        nw(1221, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⲆΔⲆΔⵠ === 225) {
        b = ᐃΔ[1043][kx.time];
        if (this.ΔⲆᐃᐃΔ > 85) {
          this.ⵠⲆᐃᐃⲆ = Math.min(1, this.ⵠⲆᐃᐃⲆ + tx / 4);
        } else {
          this.ⵠⲆᐃᐃⲆ = Math.max(0, this.ⵠⲆᐃᐃⲆ - tx);
        }
        this.ⵠᐃᐃᐃΔ += tx * 60;
        if (this.ⵠᐃᐃᐃΔ > 60) {
          this.ⵠᐃᐃᐃΔ -= 60;
        }
        c = (-6 + (this.ⵠᐃᐃᐃΔ < 30 ? this.ⵠᐃᐃᐃΔ / 30 : 1 - (this.ⵠᐃᐃᐃΔ - 30) / 30) * 12) * this.ⵠⲆᐃᐃⲆ;
        nw(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⲆΔⲆΔⵠ === 226) {
        var d = Math.PI / 2;
        var e = Math.PI / 4;
        b = ᐃΔ[1055][kx.time];
        if (this.ΔⲆᐃᐃΔ > 85) {
          this.ⵠⲆᐃᐃⲆ = Math.min(1, this.ⵠⲆᐃᐃⲆ + tx / 4);
        } else {
          this.ⵠⲆᐃᐃⲆ = Math.max(0, this.ⵠⲆᐃᐃⲆ - tx);
        }
        this.ⵠᐃᐃᐃΔ += tx * 60;
        if (this.ⵠᐃᐃᐃΔ > 60) {
          this.ⵠᐃᐃᐃΔ -= 60;
        }
        c = this.ⵠⲆᐃᐃⲆ * ((this.ⵠᐃᐃᐃΔ < 30 ? this.ⵠᐃᐃᐃΔ / 30 : 1 - (this.ⵠᐃᐃᐃΔ - 30) / 30) * 12 - 6);
        nw(1055, b, -b.width / 4 + c, -b.height / 4);
        Mo.restore();
        Mo.save();
        Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
        Mo.rotate(Math.PI + this.ⲆΔᐃⵠⵠ + e);
        Mo.translate(120, c);
        Mo.rotate(d);
        b = ᐃΔ[1060][kx.time];
        ᐃΔΔ = -b.width;
        ⲆΔⲆ = -b.height;
        zp(Mo, b, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
        Mo.restore();
        Mo.save();
        Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
        Mo.rotate(Math.PI + this.ⲆΔᐃⵠⵠ + d + e);
        Mo.translate(120, c);
        Mo.rotate(d);
        b = ᐃΔ[1063][kx.time];
        ᐃΔΔ = -b.width;
        ⲆΔⲆ = -b.height;
        zp(Mo, b, -ᐃΔΔ / 2, -ⲆΔⲆ / 2, ᐃΔΔ, ⲆΔⲆ);
      }
      Mo.restore();
    }
  }
  function Gv() {
    var c = 0;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        c = 1;
    }
    if (this.ΔᐃⵠⲆⵠ) {
      for (var f = 0; f < this.bubbles.length; f++) {
        var j = this.bubbles[f];
        if (j.ⵠΔⲆⲆΔ > 0.5) {
          var k = 1 - (j.ⵠΔⲆⲆΔ - 0.5) * 2;
        } else {
          k = j.ⵠΔⲆⲆΔ * 2;
        }
        Mo.globalAlpha = k;
        var m = ᐃΔ[540][kx.time][j.id];
        zp(Mo, m, lx.ⲆΔᐃ.x + j.x - m.width / 2, lx.ⲆΔᐃ.y + j.y - m.height / 2);
        Mo.globalAlpha = 1;
      }
    } else {
      Mo.save();
      Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
      kx.ⲆᐃⲆⲆⲆⲆⵠⵠΔ(this);
      if (this.action & 16) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                Mo.save();
                var b = a.attack.ΔⵠⲆ * -3 / Math.PI;
                if (a.attack.ⲆⲆⲆ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ΔⵠⲆ) / 3;
                } else {
                  c = a.attack.ΔⵠⲆ;
                }
                Mo.rotate(a.angle - Math.PI / 2 + c);
                Mo.globalAlpha = b / 1.2;
                jb(Mo, Go * -40, Go * 90, Go * 5);
                Lb(Mo, "#0B6A84");
                Mo.globalAlpha = b / 1.2;
                jb(Mo, Go * -52, Go * 100, Go * 8);
                Lb(Mo, "#0B6A84");
                Mo.globalAlpha = b / 1.2;
                jb(Mo, Go * -30, Go * 95, Go * 4);
                Lb(Mo, "#0B6A84");
                Mo.globalAlpha = 1;
                Mo.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (a.ⵠⵠΔⲆⲆᐃⵠ === 1) {
                  break;
                }
                if (a.ᐃΔᐃᐃⵠ > 0) {
                  var d = ts.ⵠⵠᐃⲆⲆⲆⵠ[kx.time];
                } else {
                  d = a.ᐃᐃΔⲆᐃᐃⲆ > 0 || a.ⲆⵠⲆΔΔ > 0 ? ts.ΔⵠΔⲆΔⵠⲆ[kx.time] : ts.ⵠⲆΔⵠⵠⵠᐃ[kx.time];
                }
                b = a.attack.ΔⵠⲆ * -3 / Math.PI;
                if ((c = a.attack.ⲆⲆⲆ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ⵠⵠΔᐃᐃⲆΔ = a.angle;
                }
                Mo.save();
                Mo.rotate(a.ⵠⵠΔᐃᐃⲆΔ - Math.PI / 2);
                Mo.globalAlpha = b;
                var e = Go * 25 + c * 25;
                jb(Mo, e, Go * 80, Go * 15);
                Lb(Mo, d);
                jb(Mo, -e, Go * 80, Go * 15);
                Lb(Mo, d);
                Mo.globalAlpha = 1;
                Mo.restore();
            }
          }
        })(this);
      }
      Mo.save();
      Mo.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ⲆΔⲆΔⵠ !== 0) {
          this.ΔᐃⵠΔΔᐃⵠ.ΔⵠΔ();
        } else if (this.action & 32) {
          this.ⵠᐃⵠⵠΔⲆⲆ.ΔⵠΔ();
        }
      }
      var p;
      var q = this.ΔᐃⵠΔΔᐃⵠ.ΔⵠⲆ;
      var v = this.ⵠᐃⵠⵠΔⲆⲆ.ΔⵠⲆ;
      if (this.ᐃⵠⵠΔΔ === 85) {
        m = ᐃΔ[793][kx.time];
        p = 793;
      } else if (this.ᐃⵠⵠΔΔ === 20) {
        m = ᐃΔ[920][kx.time];
        p = 920;
      } else if (this.ᐃⵠⵠΔΔ === 21) {
        m = ᐃΔ[924][kx.time];
        p = 924;
      } else if (this.ᐃⵠⵠΔΔ === 22) {
        m = ᐃΔ[928][kx.time];
        p = 928;
      } else if (this.ⵠⲆⵠⲆᐃⲆⲆ) {
        m = ᐃΔ[822][kx.time];
        p = 822;
      } else {
        m = ᐃΔ[7][this.ᐃⵠᐃⲆ][kx.time];
        p = 7;
      }
      ⲆᐃᐃⲆ = ᐃΔ[286][kx.time];
      var w = m;
      var h = p;
      if (this.action & 16) {
        if (this.attack.ΔⵠΔ() && this.attack.ⲆⲆⲆ == 0) {
          this.ΔΔⲆⵠΔ = !this.ΔΔⲆⵠΔ;
          this.action -= 16;
          if (lx.ᐃᐃΔΔ == this.ᐃᐃΔΔ) {
            lx.control.ᐃΔΔᐃ = 0;
          }
        }
        if (this.right >= 0) {
          this.ΔΔⲆⵠΔ = To;
        }
        var g = this.ΔΔⲆⵠΔ ? this.attack.ΔⵠⲆ : -this.attack.ΔⵠⲆ / 3;
        var x = this.ΔΔⲆⵠΔ ? this.attack.ΔⵠⲆ / 3 : -this.attack.ΔⵠⲆ;
        if (this.ⵠⲆⵠⲆᐃⲆⲆ) {
          Mo.save();
          Mo.rotate(g);
          pw(p, m, -m.width / 2 - (66 + q) * Go, -m.height / 2 + Go * (5 + v));
          Mo.restore();
          Mo.save();
          Mo.rotate(x);
          pw(p, m, -m.width / 2 + (66 + q) * Go, -m.height / 2 + Go * (5 + v));
          Mo.restore();
        } else if (c === 0) {
          if (this.right === 64) {
            g = -ΔΔⲆ.ᐃᐃΔᐃᐃᐃΔ(-g);
          }
          Mo.save();
          Mo.rotate(g);
          pw(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 - (49 + q) * Go, -ⲆᐃᐃⲆ.height / 2 + (15 + v) * Go);
          if (this.right === 28) {
            var u = ᐃΔ[this.right][this.ᐃⲆΔᐃⵠ][kx.time];
            gw(this.right, this.ᐃⲆΔᐃⵠ, u, -u.width / 4 - Go * (62 + q), -u.height / 4 + Go * (v + 18));
          } else {
            xv(this.right, q, v);
          }
          if (p >= 920) {
            nw(p, m, -m.width / 4 - (49 + q) * Go, -m.height / 4 + (11 + v) * Go);
          } else if (p !== 793) {
            gw(p, this.ᐃⵠᐃⲆ, m, -m.width / 4 - Go * (49 + q), -m.height / 4 + (11 + v) * Go);
          } else {
            pw(p, m, -m.width / 2 - Go * (49 + q), -m.height / 2 + Go * (11 + v));
          }
          Mo.restore();
          Mo.save();
          Mo.rotate(x);
          pw(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 + Go * (49 + q), -ⲆᐃᐃⲆ.height / 2 + (15 + v) * Go);
          if (p >= 920) {
            nw(p, m, -m.width / 4 + (49 + q) * Go, -m.height / 4 + Go * (11 + v));
          } else if (p !== 793) {
            gw(p, this.ᐃⵠᐃⲆ, m, -m.width / 4 + (49 + q) * Go, -m.height / 4 + (11 + v) * Go);
          } else {
            pw(p, m, -m.width / 2 + (49 + q) * Go, -m.height / 2 + (11 + v) * Go);
          }
          Mo.restore();
        }
      } else if (this.ⵠⲆⵠⲆᐃⲆⲆ) {
        pw(p, m, -m.width / 2 - (66 + q) * Go, -m.height / 2 + Go * (5 + v));
        pw(p, m, -m.width / 2 + Go * (66 + q), -m.height / 2 + (5 + v) * Go);
      } else if (c === 0) {
        pw(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 - (49 + q) * Go, -ⲆᐃᐃⲆ.height / 2 + Go * (15 + v));
        if (this.right === 28) {
          u = ᐃΔ[this.right][this.ᐃⲆΔᐃⵠ][kx.time];
          gw(this.right, this.ᐃⲆΔᐃⵠ, u, -u.width / 4 - Go * (62 + q), -u.height / 4 + Go * (v + 18));
        } else {
          xv(this.right, q, v);
        }
        if (p >= 920) {
          nw(p, m, -m.width / 4 - (49 + q) * Go, -m.height / 4 + Go * (11 + v));
        } else if (p !== 793) {
          gw(p, this.ᐃⵠᐃⲆ, m, -m.width / 4 - Go * (49 + q), -m.height / 4 + Go * (11 + v));
        } else {
          pw(p, m, -m.width / 2 - (49 + q) * Go, -m.height / 2 + Go * (11 + v));
        }
        pw(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 + Go * (49 + q), -ⲆᐃᐃⲆ.height / 2 + (15 + v) * Go);
        if (p >= 920) {
          nw(p, m, -m.width / 4 + (49 + q) * Go, -m.height / 4 + Go * (11 + v));
        } else if (p !== 793) {
          gw(p, this.ᐃⵠᐃⲆ, m, -m.width / 4 + (49 + q) * Go, -m.height / 4 + Go * (11 + v));
        } else {
          pw(p, m, -m.width / 2 + Go * (49 + q), -m.height / 2 + Go * (11 + v));
        }
      }
      if (this.ΔⲆᐃⲆⵠ && this.ᐃⵠⵠΔΔ < 1) {
        m = ᐃΔ[29][this.ΔⵠΔᐃⲆⵠⵠ][kx.time];
        gw(29, this.ΔⵠΔᐃⲆⵠⵠ, m, -m.width / 4, -m.height / 4 - Go * 39);
      }
      if (this.ⵠⲆⵠⲆᐃⲆⲆ) {
        m = ᐃΔ[820][kx.time];
        pw(820, m, -m.width / 2, -m.height / 2);
        this.ᐃΔᐃᐃΔⲆᐃ.ΔⵠΔ();
        m = ᐃΔ[821][kx.time];
        pw(821, m, -m.width / 2, -m.height / 2 + this.ᐃΔᐃᐃΔⲆᐃ.ΔⵠⲆ);
      } else {
        m = ᐃΔ[255][this.ᐃⵠᐃⲆ][kx.time];
        if (this.ᐃⵠⵠΔΔ !== 85 && (gw(255, this.ᐃⵠᐃⲆ, m, -m.width / 4, -m.height / 4), this.ⲆΔⲆⲆⵠ > 0)) {
          m = ᐃΔ[796][this.ⲆΔⲆⲆⵠ][kx.time];
          gw(796, this.ⲆΔⲆⲆⵠ, m, -m.width / 4, -m.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ⵠᐃⲆⵠⵠ.ΔⵠΔ() && ik == this.ⵠᐃⲆⵠⵠ.ⲆⲆⲆ) {
          this.action -= 128;
        }
        Mo.globalAlpha = 0.6 - this.ⵠᐃⲆⵠⵠ.ΔⵠⲆ;
        if (this.ⵠⲆⵠⲆᐃⲆⲆ) {
          m = ᐃΔ[825];
          zp(Mo, m, -m.width / 2, -m.height / 2);
        } else {
          m = Nv(this.ᐃⵠᐃⲆ, ᐃΔ[255][this.ᐃⵠᐃⲆ][0], ᐃⲆᐃΔΔⵠΔⵠΔ);
          zp(Mo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Mo.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ΔⲆⲆᐃⵠᐃΔ.ΔⵠΔ() && this.ΔⲆⲆᐃⵠᐃΔ.ⲆⲆⲆ == 0) {
          this.action -= 256;
        }
        Mo.globalAlpha = 0.6 - this.ΔⲆⲆᐃⵠᐃΔ.ΔⵠⲆ;
        m = ᐃΔ[266];
        zp(Mo, m, -m.width / 2, -m.height / 2);
        Mo.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ⵠᐃΔ.ΔⵠΔ() && this.ⵠᐃΔ.ⲆⲆⲆ == 0) {
          this.action -= 2;
        }
        Mo.globalAlpha = 0.6 - this.ⵠᐃΔ.ΔⵠⲆ;
        if (this.ⵠⲆⵠⲆᐃⲆⲆ) {
          m = ᐃΔ[823];
          zp(Mo, m, -m.width / 2, -m.height / 2);
        } else {
          m = Nv(this.ᐃⵠᐃⲆ, ᐃΔ[255][this.ᐃⵠᐃⲆ][0], ⲆⲆⵠᐃᐃᐃⲆΔⲆ);
          zp(Mo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Mo.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ΔⵠΔ() && this.freeze.ⲆⲆⲆ == 0) {
          this.action -= 4;
        }
        Mo.globalAlpha = 0.6 - this.freeze.ΔⵠⲆ;
        m = Nv(this.ᐃⵠᐃⲆ, ᐃΔ[255][this.ᐃⵠᐃⲆ][0], ⲆΔⲆⲆⵠⵠΔⲆⲆ);
        zp(Mo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        Mo.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ᐃᐃⵠᐃⵠⲆⲆ.ΔⵠΔ() && vj == this.ᐃᐃⵠᐃⵠⲆⲆ.ⲆⲆⲆ) {
          this.action -= 8;
        }
        Mo.globalAlpha = 0.6 - this.ᐃᐃⵠᐃⵠⲆⲆ.ΔⵠⲆ;
        if (this.ⵠⲆⵠⲆᐃⲆⲆ) {
          m = ᐃΔ[824];
          zp(Mo, m, -m.width / 2, -m.height / 2);
        } else {
          m = Nv(this.ᐃⵠᐃⲆ, ᐃΔ[255][this.ᐃⵠᐃⲆ][0], ⵠⲆⵠⵠᐃⲆⵠⲆᐃ);
          zp(Mo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Mo.globalAlpha = 1;
      }
      Ev(this.ᐃⵠⵠΔΔ);
      if (c === 1) {
        if (this.action & 16) {
          q += this.attack.ΔⵠⲆ * 15;
        }
        pw(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 - Go * 26, -ⲆᐃᐃⲆ.height / 2 + Go * (31 + v + q));
        if (h >= 920) {
          nw(h, w, -w.width / 4 - Go * 26, -w.height / 4 + Go * (27 + v + q));
        } else if (h !== 793) {
          gw(h, this.ᐃⵠᐃⲆ, w, -w.width / 4 - Go * 26, -w.height / 4 + (27 + v + q) * Go);
        } else {
          pw(h, w, -w.width / 2 - Go * 26, -w.height / 2 + (27 + v + q) * Go);
        }
        pw(286, ⲆᐃᐃⲆ, -ⲆᐃᐃⲆ.width / 2 + Go * 26, -ⲆᐃᐃⲆ.height / 2 + Go * (31 + v + q));
        if (h >= 920) {
          nw(h, w, -w.width / 4 + Go * 26, -w.height / 4 + (27 + v + q) * Go);
        } else if (h !== 793) {
          gw(h, this.ᐃⵠᐃⲆ, w, -w.width / 4 + Go * 26, -w.height / 4 + (27 + v + q) * Go);
        } else {
          pw(h, w, -w.width / 2 + Go * 26, -w.height / 2 + (27 + v + q) * Go);
        }
        wv(this.right, 0, v + q);
      }
      Mo.restore();
      if (this.ᐃⵠⵠΔΔ !== 83 && this.ᐃⵠⵠΔΔ !== 85) {
        if (this.ᐃΔᐃᐃⵠ > 0) {
          if (!this.ᐃΔⲆᐃ.ⲆΔⲆⲆⵠⲆⵠ) {
            this.ᐃΔⲆᐃ.ⲆΔⲆⲆⵠⲆⵠ = gu(Go, this.ᐃΔⲆᐃ.ᐃᐃⵠⲆΔ, 20, "#187484", "#000", 2, null, null, Go * 300);
          }
          m = this.ᐃΔⲆᐃ.ⲆΔⲆⲆⵠⲆⵠ;
        } else {
          this.ᐃΔⲆᐃ.label ||= gu(Go, this.ᐃΔⲆᐃ.ᐃᐃⵠⲆΔ, 20, "#FFF", "#000", 2, null, null, Go * 300);
          m = this.ᐃΔⲆᐃ.label;
        }
        if (ts.ⵠΔⵠ == kx.ΔΔᐃ) {
          Mo.globalAlpha = 0.5;
        }
        q = Math.floor(-m.width / 2);
        v = Math.floor(-m.height / 2 - Go * 70);
        zp(Mo, m, q, v);
        if (this.ᐃΔⲆᐃ.level > 0) {
          var y = q + m.width + 5;
          m = ᐃΔ[885];
          if (ᐃⵠⵠΔⵠΔⲆ[this.ᐃΔⲆᐃ.level] === undefined) {
            ᐃⵠⵠΔⵠΔⲆ[this.ᐃΔⲆᐃ.level] = gu(Go, "[" + this.ᐃΔⲆᐃ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, Go * 50);
          }
          zp(Mo, ᐃⵠⵠΔⵠΔⲆ[this.ᐃΔⲆᐃ.level], y, v);
        }
        Mo.globalAlpha = 1;
      } else {
        v = Math.floor(Go * -70);
        q = Math.floor(ᐃΔ[558].width / 1.5);
      }
      if (lx.ⵠᐃⵠΔⵠⵠⲆ(this.ⵠⵠⲆᐃ)) {
        if (lx.ⵠⲆᐃΔⲆ[0] == this.ⵠⵠⲆᐃ) {
          m = ᐃΔ[559];
        } else {
          m = ᐃΔ[558];
        }
        zp(Mo, m, q - m.width - 5, v - 6);
      }
      Mo.restore();
    }
  }
  function Hv() {
    if (this.enabled && this.ⵠⵠΔⵠΔ >= 0) {
      var a = new Date().getTime() - this.ⵠⵠΔⵠΔ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      a = Math.floor(a / 1000);
      if (a < 60) {
        a = 60 - a;
        this.label ||= gu(Go, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (this.now != a || !this.ⵠⲆΔⲆⵠΔΔ) {
          this.now = a;
          this.ⵠⲆΔⲆⵠΔΔ = gu(Go, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        zp(Mo, this.label, (Bo - this.label.width) / 2, Go * 100);
        Mo.globalAlpha = b;
        zp(Mo, this.ⵠⲆΔⲆⵠΔΔ, (Bo - this.label.width) / 2 - this.ⵠⲆΔⲆⵠΔΔ.width + Go * 15, Go * 100);
        Mo.globalAlpha = 1;
      }
    }
  }
  function Jv(a, b) {
    if (this.text) {
      if (this.timeout.ⲆⲆⲆ) {
        Mo.globalAlpha = 1 - this.timeout.ΔⵠⲆ;
      } else {
        Mo.globalAlpha = 1;
      }
      if (!this.label) {
        this.label = gu(Go, this.text, 40, a, null, null, null, null, null, b, 10);
      }
      zp(Mo, this.label, (Bo - this.label.width) / 2, Go * 50);
      Mo.globalAlpha = 1;
      if (this.timeout.ΔⵠΔ() && $o == this.timeout.ⲆⲆⲆ) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function Kv() {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + this.x, lx.ⲆΔᐃ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; this.text.length > a && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = Xb(Go, this.text[a]);
          this.ᐃⵠᐃΔⵠⵠΔ[a] = 0;
          this.ᐃⵠᐃⵠⲆⲆΔ[a] = 0;
        }
        if (a === 1) {
          this.ᐃⵠᐃⵠⲆⲆΔ[0] = ΔΔⲆ.ⲆⵠⵠΔⲆ(this.ΔⲆⵠⲆᐃΔⲆ) * 30;
        }
      }
      this.ᐃⵠᐃΔⵠⵠΔ[0] += tx;
      if (this.text.length > 1) {
        this.ΔⲆⵠⲆᐃΔⲆ = Math.min(this.ΔⲆⵠⲆᐃΔⲆ + tx, 1);
        if (this.ᐃⵠᐃΔⵠⵠΔ[0] > 1 && this.ΔⲆⵠⲆᐃΔⲆ > 0.5) {
          this.ᐃⵠᐃΔⵠⵠΔ[1] += tx;
        }
      }
      for (a = 0; a < this.text.length && a < 2; a++) {
        var b = this.ᐃⵠᐃΔⵠⵠΔ[a];
        if (b > 0) {
          Mo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
          zp(Mo, this.label[a], -this.label[a].width / 2, -this.ᐃⵠᐃⵠⲆⲆΔ[a] + -this.label[a].height / 2 - Go * 110);
        }
      }
      if (this.ᐃⵠᐃΔⵠⵠΔ[0] > 4) {
        this.ᐃⵠᐃΔⵠⵠΔ.shift();
        this.text.shift();
        this.ᐃⵠᐃⵠⲆⲆΔ.shift();
        this.label.shift();
        this.ΔⲆⵠⲆᐃΔⲆ = 0;
      }
    }
    Mo.restore();
  }
  ⲆⲆⵠᐃᐃᐃⲆΔⲆ = 0;
  ᐃⲆᐃΔΔⵠΔⵠΔ = 1;
  ⲆΔⲆⲆⵠⵠΔⲆⲆ = 2;
  ⵠⲆⵠⵠᐃⲆⵠⲆᐃ = 3;
  ⵠᐃⵠⵠᐃⲆΔⵠⵠ = 4;
  ⵠΔⵠⲆⵠⲆΔ = [[], [], [], [], []];
  ⲆᐃΔⵠⵠᐃᐃΔᐃ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  function Lv(a) {
    return Ph.String.fromCharCode(a);
  }
  function Mv() {
    if (this.message !== El) {
      var a = lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ.length > 0 ? -95 : 0;
      zp(Mo, this.message, 0, cq - this.message.height + a);
    }
  }
  function Nv(b, c, d) {
    if (c.ⵠⵠⵠΔⲆⲆᐃ() !== 1) {
      return c;
    }
    var e = ⵠΔⵠⲆⵠⲆΔ[d][b];
    if (e === ij) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var a = c.height;
      e.width = g;
      e.height = a;
      f.drawImage(c, 0, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ⲆᐃΔⵠⵠᐃᐃΔᐃ[d];
      f.fillRect(0, 0, g, a);
      ⵠΔⵠⲆⵠⲆΔ[d][b] = e;
    }
    return e;
  }
  (function () {
    const a = {
      ᐃⲆᐃᐃⵠⵠΔ: 2232585,
      ⲆΔⲆⲆᐃⲆⵠ: 16106292,
      ⵠΔΔΔᐃⲆⲆ: 15581687,
      ⲆⲆⵠⵠⲆΔⵠ: 8474946
    };
  })();
  var Ov = 0;
  function Pv(j, e, i, k, n, o, a, q) {
    if (q === Tj) {
      q = 0;
    }
    kx.ⵠΔⲆΔ[n].ΔⵠΔ();
    for (var r = a; q <= r; r--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; k >= w; w++) {
          var x = hx.ⲆⵠΔᐃ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== pj) {
              for (var z = 0; y.length > z; z++) {
                var A = y[z];
                if (A.ΔⵠΔ) {
                  if (A.ⵠᐃΔ.ΔⵠΔ() && A.ⵠᐃΔ.ⲆⲆⲆ == 0) {
                    A.ΔⵠΔ = false;
                  }
                  var B = Go * (tx * (1 - A.ⵠᐃΔ.ΔⵠⲆ) * 600);
                  var D = Math.sin(A.angle) * B;
                  var E = B * Math.cos(A.angle);
                } else {
                  D = 0;
                  E = 0;
                }
                var F = ᐃΔ[n][kx.time][r];
                var G = kx.ⵠΔⲆΔ[n].ΔⵠⲆ * -F.width;
                var H = -F.height * kx.ⵠΔⲆΔ[n].ΔⵠⲆ;
                zp(Mo, F, lx.ⲆΔᐃ.x + A.x - G / 2 + D, lx.ⲆΔᐃ.y + A.y - H / 2 + E, G, H);
              }
            }
          }
        }
      }
    }
  }
  function Qv(j, e, i, k, n, o, a, q) {
    if (El === q) {
      q = 0;
    }
    for (var r = a; q <= r; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; k >= w; w++) {
          var x = hx.ⲆⵠΔᐃ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (pj !== y) {
              for (var z = 0; z < y.length; z++) {
                var A = y[z];
                var B = ᐃΔ[n][kx.time][r];
                var D = (Ov + (t + w) * 3) % 60;
                var E = D < 30 ? D / 30 : 1 - (D - 30) / 30;
                var F = -B.width * (1 + E * 0.9 / 30);
                var G = -B.height * (1 + E * 0.9 / 30);
                E = (D = (Ov + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                var H = Mo.globalAlpha;
                Mo.globalAlpha = H * (0.9 + E * 0.1);
                zp(Mo, B, lx.ⲆΔᐃ.x + A.x - F / 2, lx.ⲆΔᐃ.y + A.y - G / 2, F, G);
                Mo.globalAlpha = H;
              }
            }
          }
        }
      }
    }
  }
  var Rv = [];
  for (wb = 0; wb < 100; wb++) {
    var Sv = 1;
    if (Math.random() < 0.25) {
      Sv = 0;
    }
    Rv.push(Sv);
  }
  function Tv(j, e, i, k, n, o, a, q = 0, r) {
    for (var h = a; q <= h; h--) {
      for (var s = j; s <= e; s++) {
        for (var t = i; t <= k; t++) {
          var w = hx.ⲆⵠΔᐃ[s][t];
          if (w !== undefined && w[o] !== undefined) {
            var x = w[o][h];
            if (x !== undefined) {
              for (var A = 0; A < x.length; A++) {
                var B = x[A];
                if (B.ΔⵠΔ) {
                  if (B.ⵠᐃΔ.ΔⵠΔ() && B.ⵠᐃΔ.ⲆⲆⲆ == 0) {
                    B.ΔⵠΔ = false;
                  }
                  var D = Go * ((1 - B.ⵠᐃΔ.ΔⵠⲆ) * tx * 600);
                  var E = Math.sin(B.angle) * D;
                  var F = Math.cos(B.angle) * D;
                } else {
                  E = 0;
                  F = 0;
                }
                for (var G = 0; G < ΔⲆᐃΔΔᐃⵠ[h].ⲆᐃΔᐃ; G++) {
                  if (sx !== kx.ⲆΔΔⲆᐃ[G].ⲆⲆⲆⵠᐃ) {
                    kx.ⲆΔΔⲆᐃ[G].ΔⵠΔ();
                    kx.ⲆΔΔⲆᐃ[G].ⲆⲆⲆⵠᐃ = sx;
                  }
                  var H = ᐃΔ[941][kx.time][ΔⲆᐃΔΔᐃⵠ[h].Δⵠᐃᐃ[G].ⵠⲆΔ];
                  var I = -H.width * kx.ⲆΔΔⲆᐃ[G].ΔⵠⲆ;
                  var J = kx.ⲆΔΔⲆᐃ[G].ΔⵠⲆ * -H.height;
                  zp(Mo, H, lx.ⲆΔᐃ.x + B.x - I / 4 + E + ΔⲆᐃΔΔᐃⵠ[h].Δⵠᐃᐃ[G].x, lx.ⲆΔᐃ.y + B.y - J / 4 + F + ΔⲆᐃΔΔᐃⵠ[h].Δⵠᐃᐃ[G].y, I / 2, J / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  function Uv(c, e, f, i, j, k, a, m = 0, n) {
    for (var h = c; h <= e; h++) {
      for (var o = f; o <= i; o++) {
        var p = hx.ⲆⵠΔᐃ[h][o];
        if (p !== undefined && p[k] !== Ya) {
          var q = p[k];
          if (q !== undefined) {
            if (q.scale === 1) {
              var r = ᐃΔ[j][kx.time][q.ⲆⵠΔⲆⲆ];
              Mo.save();
              Mo.translate(lx.ⲆΔᐃ.x + q.x, lx.ⲆΔᐃ.y + q.y);
              Mo.rotate(q.angle);
              zp(Mo, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
              Mo.restore();
            } else if (q.scale === 3) {
              for (var s = 0; q.ⵠΔⲆ.length > s; s++) {
                Mo.save();
                Mo.translate(lx.ⲆΔᐃ.x + q.x, lx.ⲆΔᐃ.y + q.y);
                Mo.rotate(q.ⵠΔⲆ[s].angle);
                r = ᐃΔ[j][kx.time][q.ⵠΔⲆ[s].ⲆⵠΔⲆⲆ];
                zp(Mo, r, -r.width / 3 + q.ⵠΔⲆ[s].x, -r.height / 3 + q.ⵠΔⲆ[s].y, r.width / 1.5, r.height / 1.5);
                Mo.restore();
              }
            } else {
              r = ᐃΔ[j][kx.time][q.ⲆⵠΔⲆⲆ];
              Mo.save();
              Mo.translate(lx.ⲆΔᐃ.x + q.x, lx.ⲆΔᐃ.y + q.y);
              Mo.rotate(q.angle);
              zp(Mo, r, -r.width / 2, -r.height / 2, r.width, r.height);
              Mo.restore();
            }
          }
        }
      }
    }
  }
  function Vv(f, e, i, j, k, n, a, o, q) {
    if (o === El) {
      o = 0;
    }
    for (var h = a; o <= h; h--) {
      for (var r = f; r <= e; r++) {
        for (var t = i; j >= t; t++) {
          if (q <= 0 || Rv[(r + t * q) % Rv.length] !== 1) {
            var w = hx.ⲆⵠΔᐃ[r][t];
            if (w !== undefined && w[n] !== Yq) {
              var x = w[n][h];
              if (x !== undefined) {
                for (var y = 0; y < x.length; y++) {
                  var z = x[y];
                  if (z.ΔⵠΔ) {
                    if (z.ⵠᐃΔ.ΔⵠΔ() && z.ⵠᐃΔ.ⲆⲆⲆ == sh) {
                      z.ΔⵠΔ = false;
                    }
                    var A = Go * ((1 - z.ⵠᐃΔ.ΔⵠⲆ) * tx * 600);
                    var B = Math.sin(z.angle) * A;
                    var D = Math.cos(z.angle) * A;
                  } else {
                    B = 0;
                    D = 0;
                  }
                  var E = ᐃΔ[k][kx.time][h];
                  zp(Mo, E, lx.ⲆΔᐃ.x + z.x - E.width / (ΔᐃᐃⲆΔ * 2) + B, lx.ⲆΔᐃ.y + z.y - E.height / (ΔᐃᐃⲆΔ * 2) + D, E.width / ΔᐃᐃⲆΔ, E.height / ΔᐃᐃⲆΔ);
                }
              }
            }
          }
        }
      }
    }
  }
  ΔᐃᐃⲆΔ = 1;
  ΔⲆᐃΔΔᐃⵠ = [{
    ⲆᐃΔᐃ: 10,
    Δⵠᐃᐃ: [{
      x: -128,
      y: -20,
      ⵠⲆΔ: 0
    }, {
      x: -86,
      y: -4,
      ⵠⲆΔ: 1
    }, {
      ⵠⲆΔ: 2,
      x: -60,
      y: -74
    }, {
      x: -22,
      ⵠⲆΔ: 0,
      y: -144
    }, {
      y: 86,
      ⵠⲆΔ: 0,
      x: -58
    }, {
      y: -30,
      x: 3,
      ⵠⲆΔ: 0
    }, {
      x: 65,
      ⵠⲆΔ: 1,
      y: -115
    }, {
      ⵠⲆΔ: 0,
      y: -50,
      x: 118
    }, {
      y: 15,
      ⵠⲆΔ: 1,
      x: 73
    }, {
      ⵠⲆΔ: 0,
      x: 67,
      y: 79
    }]
  }, {
    ⲆᐃΔᐃ: 5,
    Δⵠᐃᐃ: [{
      x: -45,
      ⵠⲆΔ: 0,
      y: -26
    }, {
      ⵠⲆΔ: 2,
      x: -45,
      y: 20
    }, {
      y: -60,
      ⵠⲆΔ: 1,
      x: 10
    }, {
      x: 52,
      y: -17,
      ⵠⲆΔ: 1
    }, {
      ⵠⲆΔ: 0,
      y: 45,
      x: 14
    }]
  }, {
    ⲆᐃΔᐃ: 3,
    Δⵠᐃᐃ: [{
      x: -30,
      ⵠⲆΔ: 2,
      y: 3
    }, {
      y: -38,
      x: 7,
      ⵠⲆΔ: 2
    }, {
      y: 5,
      ⵠⲆΔ: 2,
      x: 37
    }]
  }, {
    ⲆᐃΔᐃ: 11,
    Δⵠᐃᐃ: [{
      x: -74,
      ⵠⲆΔ: 2,
      y: -87
    }, {
      x: -11,
      ⵠⲆΔ: 1,
      y: -10
    }, {
      y: 17,
      ⵠⲆΔ: 1,
      x: -99
    }, {
      y: 84,
      x: -66,
      ⵠⲆΔ: 0
    }, {
      ⵠⲆΔ: 1,
      y: 123,
      x: -55
    }, {
      ⵠⲆΔ: 2,
      y: 81,
      x: 10
    }, {
      ⵠⲆΔ: 0,
      y: 50,
      x: 52
    }, {
      y: 9,
      x: 138,
      ⵠⲆΔ: 1
    }, {
      x: 104,
      y: -28,
      ⵠⲆΔ: 0
    }, {
      y: -56,
      ⵠⲆΔ: 2,
      x: 67
    }, {
      y: -112,
      x: 5,
      ⵠⲆΔ: 0
    }]
  }, {
    ⲆᐃΔᐃ: 6,
    Δⵠᐃᐃ: [{
      y: -66,
      ⵠⲆΔ: 2,
      x: -33
    }, {
      y: 10,
      x: -58,
      ⵠⲆΔ: 0
    }, {
      y: 44,
      x: -19,
      ⵠⲆΔ: 1
    }, {
      x: 44,
      ⵠⲆΔ: 0,
      y: 20
    }, {
      ⵠⲆΔ: 2,
      y: -36,
      x: 53
    }, {
      ⵠⲆΔ: 0,
      y: -62,
      x: 7
    }]
  }, {
    ⲆᐃΔᐃ: 3,
    Δⵠᐃᐃ: [{
      x: -19,
      y: -25,
      ⵠⲆΔ: 1
    }, {
      x: -29,
      y: 13,
      ⵠⲆΔ: 2
    }, {
      x: 12,
      y: 12,
      ⵠⲆΔ: 0
    }]
  }];
  var Wv = 0;
  var Xv = Ph.console;
  Xv.log = Xv.info = Xv.error = Xv.warn = Xv.debug = Xv.ⵠΔᐃⲆⵠᐃⵠᐃᐃ = Xv.trace = Xv.time = Xv.timeEnd = function () { };
  var Yv = 0;
  var Zv = 0;
  var $v = 0;
  function _v(b, c, d, e, f, i, a, j, k, h) {
    if (kx.transition) {
      Mo.globalAlpha = 1;
      b(c, d, e, f, i, a, j, k, h);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ;
      b(c, d, e, f, i, a, j, k, h);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      b(c, d, e, f, i, a, j, k, h);
    }
  }
  function aw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = lx.ⲆΔᐃ.y + f + 710;
    var g = Math.max(lx.ⲆΔᐃ.x + e, 0);
    var l = Math.max(-lx.ⲆΔᐃ.x + Bo - i - 100, 0);
    var r = g;
    var b = Bo - g - l;
    if (n) {
      var d = j.ⵠⲆΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ⵠⲆΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ⵠⲆΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (u > s + (t = h - 350 - s - d)) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.Ⲇᐃⵠⵠᐃⵠᐃ === 1) {
      if (kx.transition) {
        var p = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(15, 77, 72, 252, 239, 187, p);
      } else {
        Mo.fillStyle = ts.ⵠⵠⵠΔⲆⵠΔ[kx.time];
      }
      Mo.fillRect(r, s, b, t);
    } else {
      if (kx.transition) {
        p = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(k.ⲆⲆΔ[0], k.ⲆⲆΔ[1], k.ⲆⲆΔ[2], k.ΔΔᐃ[0], k.ΔΔᐃ[1], k.ΔΔᐃ[2], p);
      } else {
        Mo.fillStyle = k.ⲆⲆΔᐃⲆ[kx.time];
      }
      Mo.fillRect(r, s, b, t);
    }
  }
  function bw(b, c, d, e, f, g, a) {
    var i;
    var j = "#";
    j += (i = Math.floor(a * e + (1 - a) * b)) < 16 ? "0" + i.toString(16) : i.toString(16);
    j += (i = Math.floor(f * a + (1 - a) * c)) < 16 ? "0" + i.toString(16) : i.toString(16);
    return j += (i = Math.floor(g * a + (1 - a) * d)) < 16 ? "0" + i.toString(16) : i.toString(16);
  }
  function cw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = lx.ⲆΔᐃ.x + j + 820;
    var g = Math.max(lx.ⲆΔᐃ.y + e, 0);
    var l = Math.max(-lx.ⲆΔᐃ.y + cq - i - 100, 0);
    var t = g;
    var b = cq - g - l;
    if (o) {
      var d = q.ⵠⲆΔ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ⵠⲆΔ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ⵠⲆΔ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h - 350 - u - d.x) < k) {
      var A = Xa;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f + 2;
    } else {
      A = gl;
      u = k;
      D = -1;
    }
    f = h - 700 - u;
    if (kx.transition) {
      var N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
      Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
    }
    Mo.fillRect(F, c, p, C);
    if (o) {
      if (kx.transition) {
        N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(15, 70, 76, 42, 139, 155, N);
      } else {
        Mo.fillStyle = ts.ΔⲆⲆⲆΔᐃᐃ[kx.time];
      }
    } else if (kx.transition) {
      N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
      Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
    }
    Mo.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (kx.transition) {
          N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
          Mo.fillStyle = bw(17, 94, 96, 169, 214, 211, N);
        } else {
          Mo.fillStyle = ts.ⲆΔⵠⲆⲆᐃⲆ[kx.time];
        }
      } else if (kx.transition) {
        N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
      } else {
        Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
      }
      Mo.fillRect(L, J, M, B);
    }
    if (jx.ΔⲆΔⲆᐃ && o) {
      q.ⲆⵠⵠⵠᐃᐃⲆΔᐃ(k, D, G, h, -lx.ⲆΔᐃ.y + c, -lx.ⲆΔᐃ.y + c + C);
    }
  }
  function dw() {
    Mo.globalAlpha = 1;
    if (kx.transition) {
      var a = kx.ΔΔⲆⵠ.ΔⵠΔ();
    }
    kx.ⵠⲆΔᐃᐃⲆᐃⵠΔ(-lx.ⲆΔᐃ.x, -lx.ⲆΔᐃ.y);
    Wv = Math.max(Math.floor(-lx.ⲆΔᐃ.x / kx.ⲆᐃᐃⲆⲆΔⵠ) - 5, 0);
    Yv = Math.min(Math.floor((-lx.ⲆΔᐃ.x + lx.ⲆΔᐃ.w) / kx.ⲆᐃᐃⲆⲆΔⵠ) + 4, kx.ᐃⵠᐃⲆⵠ - 1);
    Zv = Math.max(Math.floor(-lx.ⲆΔᐃ.y / kx.ᐃᐃΔΔᐃΔΔ) - 3, 0);
    $v = Math.min(Math.floor((-lx.ⲆΔᐃ.y + lx.ⲆΔᐃ.ⲆΔⲆ) / kx.ᐃᐃΔΔᐃΔΔ) + 3, kx.ΔᐃⲆⲆⵠ - 1);
    (function () {
      for (var c = kx.Ⲇᐃⵠⵠ.length - 1; c >= 0; c--) {
        if ((C = kx.Ⲇᐃⵠⵠ[c]).ⵠⲆΔ === kx.ᐃⲆⲆΔⲆ) {
          var f = kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ];
          if (-lx.ⲆΔᐃ.x >= C.x1 - 230 - Bo && C.x2 + 330 >= -lx.ⲆΔᐃ.x && -lx.ⲆΔᐃ.y >= C.y1 - cq && C.y2 + 100 >= -lx.ⲆΔᐃ.y) {
            var j = C.x2;
            if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
              j -= 610;
            }
            var k = C.x1;
            if (C.ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ) {
              k += 610;
            }
            var m = C.y2;
            if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
              m -= 610;
            }
            var p = C.y1;
            if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
              p += 610;
            }
            if (kx.transition) {
              var q = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
              Mo.fillStyle = bw(f.ⲆⲆΔ[0], f.ⲆⲆΔ[1], f.ⲆⲆΔ[2], f.ΔΔᐃ[0], f.ΔΔᐃ[1], f.ΔΔᐃ[1], q);
            } else {
              Mo.fillStyle = f.ⲆⲆΔᐃⲆ[kx.time];
            }
            var w = Math.max(lx.ⲆΔᐃ.x + k - 2 - 230, 0);
            var x = Math.max(-lx.ⲆΔᐃ.x + Bo - j - 330 - 2, 0);
            var y = Math.max(lx.ⲆΔᐃ.y + p - 2, 0);
            var z = Math.max(-lx.ⲆΔᐃ.y + cq - m - 100 - 2, 0);
            Mo.beginPath();
            Mo.fillRect(w, y, Bo - x - w, cq - y - z);
          }
        }
      }
      for (c = kx.Ⲇᐃⵠⵠ.length - 1; c >= 0; c--) {
        if ((C = kx.Ⲇᐃⵠⵠ[c]).ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ) {
          j = C.x2;
          if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
            j -= 400;
          }
          k = C.x1;
          if (C.ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ) {
            k += 400;
          }
          m = C.y2;
          if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
            m -= 300;
          }
          p = C.y1;
          if (C.ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ) {
            p += 300;
          }
          if ((C.ΔⵠⲆ & 8) === 0 && -lx.ⲆΔᐃ.x >= j - Bo + 120 && j + 820 >= -lx.ⲆΔᐃ.x && p + 88 - cq <= -lx.ⲆΔᐃ.y && m + 50 >= -lx.ⲆΔᐃ.y) {
            iw(j, p + 88, m - 88, lx.ᐃⲆⲆⲆ[0], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 8);
            cw(j, p + 88, m - 88, lx.ᐃⲆⲆⲆ[0], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 8);
          }
          if ((C.ΔⵠⲆ & 4) === 0 && k - Bo - 700 <= -lx.ⲆΔᐃ.x && k - 20 >= -lx.ⲆΔᐃ.x && p + 88 - cq <= -lx.ⲆΔᐃ.y && m + 50 >= -lx.ⲆΔᐃ.y) {
            ew(k, p + 88, m - 88, lx.ᐃⲆⲆⲆ[1], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 4);
            fw(k, p + 88, m - 88, lx.ᐃⲆⲆⲆ[1], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 4);
          }
          if (!(C.ΔⵠⲆ & 2) && k - 235 - Bo <= -lx.ⲆΔᐃ.x && -lx.ⲆΔᐃ.x <= j + 350 && -lx.ⲆΔᐃ.y >= m - cq - 275 && m + 490 >= -lx.ⲆΔᐃ.y) {
            aw(m - 230, k - 230, j + 230, lx.ᐃⲆⲆⲆ[2], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 2);
            vw(m - 230, k - 230, j + 230, lx.ᐃⲆⲆⲆ[2], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 2);
          }
          if (!(C.ΔⵠⲆ & 1) && k - 235 - Bo <= -lx.ⲆΔᐃ.x && -lx.ⲆΔᐃ.x <= j + 350 && p - cq - 390 <= -lx.ⲆΔᐃ.y && p + 315 >= -lx.ⲆΔᐃ.y) {
            lw(p + 310, k - 230, j + 230, lx.ᐃⲆⲆⲆ[3], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 1);
            uw(p + 310, k - 230, j + 230, lx.ᐃⲆⲆⲆ[3], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 1);
          }
        }
      }
      for (c = kx.Ⲇᐃⵠⵠ.length - 1; c >= 0; c--) {
        if ((C = kx.Ⲇᐃⵠⵠ[c]).ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ) {
          j = C.x2;
          if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
            j -= 400;
          }
          k = C.x1;
          if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
            k += 400;
          }
          m = C.y2;
          if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
            m -= 300;
          }
          p = C.y1;
          if (C.ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ) {
            p += 300;
          }
          if ((C.ΔⵠⲆ & 8) !== 0 && j - Bo + 120 <= -lx.ⲆΔᐃ.x && -lx.ⲆΔᐃ.x <= j + 820 && -lx.ⲆΔᐃ.y >= p + 88 - cq && m + 50 >= -lx.ⲆΔᐃ.y) {
            iw(j, p + 88, m - 88, lx.ᐃⲆⲆⲆ[0], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 8);
          }
          if ((C.ΔⵠⲆ & 4) !== 0 && k - Bo - 700 <= -lx.ⲆΔᐃ.x && -lx.ⲆΔᐃ.x <= k - 20 && -lx.ⲆΔᐃ.y >= p + 88 - cq && -lx.ⲆΔᐃ.y <= m + 50) {
            ew(k, p + 88, m - 88, lx.ᐃⲆⲆⲆ[1], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 4);
          }
          if ((C.ΔⵠⲆ & 2) !== 0 && -lx.ⲆΔᐃ.x >= k - 235 - Bo && -lx.ⲆΔᐃ.x <= j + 350 && -lx.ⲆΔᐃ.y >= m - cq - 275 && -lx.ⲆΔᐃ.y <= m + 490) {
            aw(m - 230, k - 230, j + 230, lx.ᐃⲆⲆⲆ[2], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 2);
          }
          if (C.ΔⵠⲆ & 1 && k - 235 - Bo <= -lx.ⲆΔᐃ.x && -lx.ⲆΔᐃ.x <= j + 350 && p - cq - 390 <= -lx.ⲆΔᐃ.y && p + 315 >= -lx.ⲆΔᐃ.y) {
            lw(p + 310, k - 230, j + 230, lx.ᐃⲆⲆⲆ[3], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 1);
          }
        }
      }
      for (c = kx.Ⲇᐃⵠⵠ.length - 1; c >= 0; c--) {
        if ((C = kx.Ⲇᐃⵠⵠ[c]).ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ) {
          f = kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ];
          if (-lx.ⲆΔᐃ.x >= C.x1 - 230 - Bo && -lx.ⲆΔᐃ.x <= C.x2 + 330 && -lx.ⲆΔᐃ.y >= C.y1 - cq && C.y2 + 100 >= -lx.ⲆΔᐃ.y) {
            j = C.x2;
            if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
              if ((C.ΔⵠⲆ & 8) === 0) {
                j -= 414;
              } else {
                j -= 610;
              }
            }
            k = C.x1;
            if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
              if (C.ΔⵠⲆ & 4) {
                k += 610;
              } else {
                k += 414;
              }
            }
            m = C.y2;
            if (C.ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ) {
              if ((C.ΔⵠⲆ & 2) === 0) {
                m -= 414;
              } else {
                m -= 610;
              }
            }
            p = C.y1;
            if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
              if ((C.ΔⵠⲆ & 1) === 0) {
                p += 414;
              } else {
                p += 610;
              }
            }
            if (kx.transition) {
              q = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
              Mo.fillStyle = bw(f.ⲆⲆΔ[0], f.ⲆⲆΔ[1], f.ⲆⲆΔ[2], f.ΔΔᐃ[0], f.ΔΔᐃ[1], f.ΔΔᐃ[2], q);
            } else {
              Mo.fillStyle = f.ⲆⲆΔᐃⲆ[kx.time];
            }
            w = Math.max(lx.ⲆΔᐃ.x + k - 2 - 230, 0);
            x = Math.max(-lx.ⲆΔᐃ.x + Bo - j - 330 - 2, 0);
            y = Math.max(lx.ⲆΔᐃ.y + p - 2, 0);
            z = Math.max(-lx.ⲆΔᐃ.y + cq - m - 100 - 2, 0);
            Mo.beginPath();
            Mo.fillRect(w, y, Bo - x - w, cq - y - z);
          }
        }
      }
      if (jx.ΔⲆΔⲆᐃ) {
        _v(Pv, Zv, $v, Wv, Yv, 695, "isl", 2);
        _v(Pv, Zv, $v, Wv, Yv, 694, "isl", 2);
      }
      _v(Vv, Zv, $v, Wv, Yv, 692, "isl", 2);
      if (jx.ΔⲆΔⲆᐃ) {
        _v(Uv, Zv, $v, Wv, Yv, 243, "de");
      }
      var A = kx.ⵠⵠΔ[0];
      for (c = 0; A.length > c; c++) {
        for (var u = A[c], B = 0; u.ᐃΔⵠΔⲆ.length > B; B++) {
          ow(u.ᐃΔⵠΔⲆ[B]);
        }
      }
      if ((Vp += tx * 40) > 60) {
        Vp -= 60;
      }
      _v(vv, Zv, $v, Wv, Yv, 1024, "r", 0);
      for (c = 0; kx.Ⲇᐃⵠⵠ.length > c; c++) {
        var C;
        if ((C = kx.Ⲇᐃⵠⵠ[c]).ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ) {
          j = C.x2;
          if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
            j -= 400;
          }
          k = C.x1;
          if (C.ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ) {
            k += 400;
          }
          m = C.y2;
          if (kx.ᐃⲆⲆΔⲆ !== C.ⵠⲆΔ) {
            m -= 300;
          }
          p = C.y1;
          if (C.ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ) {
            p += 300;
          }
          if ((C.ΔⵠⲆ & 8) > 0 && -lx.ⲆΔᐃ.x >= j - Bo + 120 && j + 820 >= -lx.ⲆΔᐃ.x && p + 88 - cq <= -lx.ⲆΔᐃ.y && m + 50 >= -lx.ⲆΔᐃ.y) {
            cw(j, p + 88, m - 88, lx.ᐃⲆⲆⲆ[0], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 8);
          }
          if ((C.ΔⵠⲆ & 4) > 0 && -lx.ⲆΔᐃ.x >= k - Bo - 700 && -lx.ⲆΔᐃ.x <= k - 20 && -lx.ⲆΔᐃ.y >= p + 88 - cq && m + 50 >= -lx.ⲆΔᐃ.y) {
            fw(k, p + 88, m - 88, lx.ᐃⲆⲆⲆ[1], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 4);
          }
          if ((C.ΔⵠⲆ & 2) > 0 && -lx.ⲆΔᐃ.x >= k - 235 - Bo && -lx.ⲆΔᐃ.x <= j + 350 && -lx.ⲆΔᐃ.y >= m - cq - 275 && -lx.ⲆΔᐃ.y <= m + 490) {
            vw(m - 230, k - 230, j + 230, lx.ᐃⲆⲆⲆ[2], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 2);
          }
          if ((C.ΔⵠⲆ & 1) > 0 && k - 235 - Bo <= -lx.ⲆΔᐃ.x && -lx.ⲆΔᐃ.x <= j + 350 && p - cq - 390 <= -lx.ⲆΔᐃ.y && p + 315 >= -lx.ⲆΔᐃ.y) {
            uw(p + 310, k - 230, j + 230, lx.ᐃⲆⲆⲆ[3], kx.Δⵠᐃᐃⵠ[C.ⵠⲆΔ], C.ΔⵠⲆ & 1);
          }
        }
      }
    })();
    (function () {
      var c = Wv;
      var e = Yv;
      var i = Zv;
      var t = $v;
      if (jx.ΔⲆΔⲆᐃ) {
        _v(Vv, i, t, c, e, 621, "l", 2);
      }
      if (jx.ΔⲆΔⲆᐃ) {
        _v(Vv, i, t, c, e, ts.ⵠⲆΔⵠΔ, "la", 5);
      }
      _v(Vv, i, t, c, e, 203, "la", 5);
      _v(Pv, i, t, c, e, 620, "l", 2);
      if (jx.ΔⲆΔⲆᐃ) {
        _v(Tv, i, t, c, e, 203, "la", 5);
        _v(Pv, i, t, c, e, 619, "l", 2);
      }
      _v(Vv, i, t, c, e, 1052, "ma", 4);
      for (var n = kx.ⵠⵠΔ[76], M = 0; M < n.length; M++) {
        n[M].ᐃΔⵠᐃⲆⲆᐃ();
      }
      var aa = kx.ⵠⵠΔ[0];
      for (M = 0; aa.length > M; M++) {
        for (var ba = aa[M], ca = 0; ba.ΔᐃΔᐃΔ.length > ca; ca++) {
          mw(ba.ΔᐃΔᐃΔ[ca]);
        }
      }
      var da = kx.ⵠⵠΔ[30];
      for (M = 0; M < da.length; M++) {
        jw(da[M], 125);
        da[M].ᐃⵠⲆᐃᐃ(da[M].info);
      }
      var g = kx.ⵠⵠΔ[18];
      for (M = 0; M < g.length; M++) {
        if (g[M].action == 2) {
          hw(g[M]);
        }
      }
      var ea = kx.ⵠⵠΔ[1];
      for (M = 0; ea.length > M; M++) {
        hw(ea[M], 113);
      }
      var fa = kx.ⵠⵠΔ[22];
      for (M = 0; M < fa.length; M++) {
        hw(fa[M]);
      }
      var ha = kx.ⵠⵠΔ[23];
      for (M = 0; M < ha.length; M++) {
        hw(ha[M]);
      }
      var ia = kx.ⵠⵠΔ[6];
      for (M = 0; ia.length > M; M++) {
        hw(ia[M], 118);
      }
      var v = kx.ⵠⵠΔ[36];
      for (M = 0; v.length > M; M++) {
        jw(v[M]);
      }
      var m = kx.ⵠⵠΔ[33];
      for (M = 0; m.length > M; M++) {
        jw(m[M], 141);
      }
      var p = kx.ⵠⵠΔ[3];
      for (M = 0; M < p.length; M++) {
        hw(p[M]);
      }
      p = kx.ⵠⵠΔ[43];
      M = 0;
      for (; p.length > M; M++) {
        hw(p[M]);
      }
      p = kx.ⵠⵠΔ[3];
      M = 0;
      for (; M < p.length; M++) {
        kw(p[M]);
      }
      var ja = kx.ⵠⵠΔ[44];
      for (M = 0; ja.length > M; M++) {
        if (!(ja[M].info & 15) || ja[M].info === 10) {
          jw(ja[M]);
        }
      }
      var ka = kx.ⵠⵠΔ[54];
      for (M = 0; M < ka.length; M++) {
        if (!(ka[M].info & 15) || ka[M].info === 10) {
          jw(ka[M]);
        }
      }
      var la = kx.ⵠⵠΔ[55];
      for (M = 0; la.length > M; M++) {
        if (!(la[M].info & 15) || la[M].info === 10) {
          jw(la[M]);
        }
      }
      var ma = kx.ⵠⵠΔ[79];
      for (M = 0; ma.length > M; M++) {
        jw(ma[M], 132);
      }
      var na = kx.ⵠⵠΔ[39];
      for (M = 0; na.length > M; M++) {
        if ((na[M].info & 15) === 0 || na[M].info === 10) {
          jw(na[M]);
        }
      }
      var oa = kx.ⵠⵠΔ[40];
      for (M = 0; M < oa.length; M++) {
        if (!(oa[M].info & 15) || oa[M].info === 10) {
          jw(oa[M]);
        }
      }
      var pa = kx.ⵠⵠΔ[37];
      for (M = 0; pa.length > M; M++) {
        if ((pa[M].info & 15) === 0 || pa[M].info === 10) {
          jw(pa[M]);
        }
      }
      ma = kx.ⵠⵠΔ[31];
      M = 0;
      for (; ma.length > M; M++) {
        jw(ma[M]);
      }
      var qa = kx.ⵠⵠΔ[86];
      for (M = 0; qa.length > M; M++) {
        jw(qa[M], 250, 729);
      }
      var A = kx.ⵠⵠΔ[82];
      for (M = 0; M < A.length; M++) {
        jw(A[M], 250, 729);
      }
      var x = kx.ⵠⵠΔ[87];
      for (M = 0; M < x.length; M++) {
        jw(x[M], 854, 859);
      }
      var J = kx.ⵠⵠΔ[45];
      for (M = 0; M < J.length; M++) {
        if (J[M].info & 1) {
          jw(J[M], 336);
        }
      }
      J = kx.ⵠⵠΔ[46];
      M = 0;
      for (; J.length > M; M++) {
        if (J[M].info & 1) {
          jw(J[M], 373);
        }
      }
      J = kx.ⵠⵠΔ[47];
      M = 0;
      for (; M < J.length; M++) {
        if (J[M].info) {
          jw(J[M], 376);
        }
      }
      J = kx.ⵠⵠΔ[48];
      M = 0;
      for (; M < J.length; M++) {
        if (J[M].info) {
          jw(J[M], 379);
        }
      }
      J = kx.ⵠⵠΔ[49];
      M = 0;
      for (; J.length > M; M++) {
        if (J[M].info) {
          jw(J[M], 500);
        }
      }
      J = kx.ⵠⵠΔ[53];
      M = 0;
      for (; J.length > M; M++) {
        if (J[M].info) {
          jw(J[M], 376);
        }
      }
      J = kx.ⵠⵠΔ[10];
      M = 0;
      for (; J.length > M; M++) {
        if (J[M].info & 1) {
          jw(J[M], 336);
        }
      }
      J = kx.ⵠⵠΔ[15];
      M = 0;
      for (; M < J.length; M++) {
        if (J[M].info & 1) {
          jw(J[M], 373);
        }
      }
      J = kx.ⵠⵠΔ[16];
      M = 0;
      for (; J.length > M; M++) {
        if (J[M].info) {
          jw(J[M], 376);
        }
      }
      J = kx.ⵠⵠΔ[17];
      M = 0;
      for (; M < J.length; M++) {
        if (J[M].info) {
          jw(J[M], 379);
        }
      }
      J = kx.ⵠⵠΔ[21];
      M = 0;
      for (; M < J.length; M++) {
        if (J[M].info) {
          jw(J[M], 500);
        }
      }
      J = kx.ⵠⵠΔ[51];
      M = 0;
      for (; J.length > M; M++) {
        if (J[M].info) {
          jw(J[M], 376);
        }
      }
      var ra = kx.ⵠⵠΔ[80];
      for (M = 0; ra.length > M; M++) {
        jw(ra[M], 264, 322);
      }
      var D = kx.ⵠⵠΔ[41];
      for (M = 0; M < D.length; M++) {
        jw(D[M], 198);
      }
      n = kx.ⵠⵠΔ[76];
      M = 0;
      for (; M < n.length; M++) {
        jw(n[M], ts.ⵠᐃⵠΔⲆᐃΔ, ts.ⲆᐃᐃΔⵠᐃⲆⲆⲆ);
      }
      var sa = kx.ⵠⵠΔ[91];
      for (M = 0; M < sa.length; M++) {
        if (sa[M].ⵠⵠΔⲆⲆᐃⵠ === 0) {
          jw(sa[M]);
        }
      }
      aa = kx.ⵠⵠΔ[0];
      M = 0;
      for (; aa.length > M; M++) {
        ba = aa[M];
        if (aa[M].ⲆΔⲆΔⵠ !== 227 && aa[M].ⲆΔⲆΔⵠ !== 228 && aa[M].ⲆΔⲆΔⵠ !== 229 && aa[M].ⲆΔⲆΔⵠ !== 230 && aa[M].ⲆΔⲆΔⵠ !== 91) {
          if (ba.ⵠⲆⵠᐃⵠΔⵠ === 0) {
            if (ba.ⵠᐃΔΔΔⵠᐃ > 0.001) {
              ba.ⵠᐃΔΔΔⵠᐃ = ΔΔⲆ.ᐃⵠΔⵠΔ(ba.ⵠᐃΔΔΔⵠᐃ, 0, 0.018);
              var ta = 1 + Math.min(1, Math.max(ba.ⵠᐃΔΔΔⵠᐃ, 0) / 100) * 0.18;
              Mo.save();
              Mo.scale(ta, ta);
              lx.ⲆΔᐃ.x /= ta;
              lx.ⲆΔᐃ.y /= ta;
              ba.x /= ta;
              ba.y /= ta;
              ba.r.x /= ta;
              ba.r.y /= ta;
              ba.ΔᐃᐃⲆᐃᐃΔ();
              ba.ΔᐃⲆΔ();
              lx.ⲆΔᐃ.x *= ta;
              lx.ⲆΔᐃ.y *= ta;
              ba.x *= ta;
              ba.y *= ta;
              ba.r.x *= ta;
              ba.r.y *= ta;
              Mo.restore();
            } else {
              ba.ⵠⵠΔⲆⲆᐃⵠ = 0;
              ba.ΔᐃᐃⲆᐃᐃΔ();
              ba.ΔᐃⲆΔ();
            }
          }
        } else if (ba.ΔⲆᐃᐃΔ <= 180) {
          Mo.save();
          ta = 1 + Math.min(1, Math.max(ba.ΔΔⵠᐃⵠ - 30, 0) / 180) * 0.35;
          Mo.scale(ta, ta);
          lx.ⲆΔᐃ.x /= ta;
          lx.ⲆΔᐃ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ⵠⵠΔⲆⲆᐃⵠ = 0;
          ba.ΔᐃᐃⲆᐃᐃΔ();
          ba.ΔᐃⲆΔ();
          lx.ⲆΔᐃ.x *= ta;
          lx.ⲆΔᐃ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          Mo.restore();
        }
      }
      D = kx.ⵠⵠΔ[41];
      M = 0;
      for (; M < D.length; M++) {
        jw(D[M], 913);
      }
      var ua = kx.ⵠⵠΔ[67];
      for (M = 0; ua.length > M; M++) {
        jw(ua[M]);
      }
      var Q = kx.ⵠⵠΔ[62];
      for (M = 0; M < Q.length; M++) {
        jw(Q[M], 419, 461);
      }
      var _ = kx.ⵠⵠΔ[70];
      for (M = 0; M < _.length; M++) {
        jw(_[M]);
      }
      var R = kx.ⵠⵠΔ[60];
      for (M = 0; M < R.length; M++) {
        jw(R[M], 299, 326);
      }
      var F = kx.ⵠⵠΔ[72];
      for (M = 0; F.length > M; M++) {
        jw(F[M], 232, 1077);
      }
      var j = kx.ⵠⵠΔ[73];
      for (M = 0; j.length > M; M++) {
        jw(j[M], 233, 1092);
      }
      ja = kx.ⵠⵠΔ[44];
      M = 0;
      for (; M < ja.length; M++) {
        if (ja[M].info & 15 && ja[M].info !== 10) {
          jw(ja[M]);
        }
      }
      ka = kx.ⵠⵠΔ[54];
      M = 0;
      for (; M < ka.length; M++) {
        if ((ka[M].info & 15) !== 0 && ka[M].info !== 10) {
          jw(ka[M]);
        }
      }
      la = kx.ⵠⵠΔ[89];
      M = 0;
      for (; M < la.length; M++) {
        jw(la[M], 239);
      }
      la = kx.ⵠⵠΔ[55];
      M = 0;
      for (; M < la.length; M++) {
        if (la[M].info & 15 && la[M].info !== 10) {
          jw(la[M]);
        }
      }
      p = kx.ⵠⵠΔ[43];
      M = 0;
      for (; M < p.length; M++) {
        kw(p[M]);
      }
      na = kx.ⵠⵠΔ[39];
      M = 0;
      for (; M < na.length; M++) {
        if ((na[M].info & 15) !== 0 && na[M].info !== 10) {
          jw(na[M]);
        }
      }
      oa = kx.ⵠⵠΔ[40];
      M = 0;
      for (; oa.length > M; M++) {
        if (oa[M].info & 15 && oa[M].info !== 10) {
          jw(oa[M]);
        }
      }
      pa = kx.ⵠⵠΔ[37];
      M = 0;
      for (; pa.length > M; M++) {
        if ((pa[M].info & 15) !== 0 && pa[M].info !== 10) {
          jw(pa[M]);
        }
      }
      var L = kx.ⵠⵠΔ[81];
      for (M = 0; L.length > M; M++) {
        jw(L[M], 691, 697);
      }
      var W = kx.ⵠⵠΔ[66];
      for (M = 0; W.length > M; M++) {
        jw(W[M], 637, 687);
      }
      var G = kx.ⵠⵠΔ[65];
      for (M = 0; M < G.length; M++) {
        jw(G[M], 673, 688);
      }
      var q = kx.ⵠⵠΔ[61];
      for (M = 0; q.length > M; M++) {
        jw(q[M], 260, 333);
      }
      var N = kx.ⵠⵠΔ[88];
      for (M = 0; N.length > M; M++) {
        jw(N[M], 1033, 1034);
      }
      var O = kx.ⵠⵠΔ[63];
      for (M = 0; M < O.length; M++) {
        jw(O[M], 445, 462);
      }
      var H = kx.ⵠⵠΔ[77];
      for (M = 0; M < H.length; M++) {
        jw(H[M]);
      }
      var U = kx.ⵠⵠΔ[68];
      for (M = 0; M < U.length; M++) {
        jw(U[M], 918, 919);
      }
      var Y = kx.ⵠⵠΔ[71];
      for (M = 0; Y.length > M; M++) {
        jw(Y[M]);
      }
      var K = kx.ⵠⵠΔ[78];
      for (M = 0; M < K.length; M++) {
        jw(K[M], 1218, 1219);
      }
      var V = kx.ⵠⵠΔ[64];
      for (M = 0; V.length > M; M++) {
        if (V[M].scale === 1) {
          jw(V[M], 449, 463);
        }
      }
      V = kx.ⵠⵠΔ[69];
      M = 0;
      for (; M < V.length; M++) {
        if (V[M].scale === 1) {
          jw(V[M], 450, 464);
        }
      }
      var va = kx.ⵠⵠΔ[11];
      for (M = 0; M < va.length; M++) {
        jw(va[M]);
      }
      var Z = kx.ⵠⵠΔ[2];
      for (M = 0; M < Z.length; M++) {
        jw(Z[M], 114);
      }
      g = kx.ⵠⵠΔ[18];
      M = 0;
      for (; g.length > M; M++) {
        jw(g[M]);
      }
      var wa = kx.ⵠⵠΔ[34];
      for (M = 0; M < wa.length; M++) {
        jw(wa[M]);
      }
      J = kx.ⵠⵠΔ[10];
      M = 0;
      for (; M < J.length; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 166);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      J = kx.ⵠⵠΔ[15];
      M = 0;
      for (; J.length > M; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 171);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      J = kx.ⵠⵠΔ[16];
      M = 0;
      for (; M < J.length; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 172);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      J = kx.ⵠⵠΔ[17];
      M = 0;
      for (; M < J.length; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 173);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      J = kx.ⵠⵠΔ[21];
      M = 0;
      for (; M < J.length; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 124);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      J = kx.ⵠⵠΔ[51];
      M = 0;
      for (; J.length > M; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 218);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      J = kx.ⵠⵠΔ[45];
      M = 0;
      for (; J.length > M; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 212);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      J = kx.ⵠⵠΔ[46];
      M = 0;
      for (; M < J.length; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 213);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      J = kx.ⵠⵠΔ[47];
      M = 0;
      for (; M < J.length; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 214);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      J = kx.ⵠⵠΔ[48];
      M = 0;
      for (; J.length > M; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 215);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      J = kx.ⵠⵠΔ[49];
      M = 0;
      for (; J.length > M; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 216);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      J = kx.ⵠⵠΔ[53];
      M = 0;
      for (; J.length > M; M++) {
        if (!(J[M].info & 1)) {
          jw(J[M], 220);
        }
        J[M].ᐃⵠⲆᐃᐃ(J[M].info >> 1);
      }
      var xa = kx.ⵠⵠΔ[4];
      for (M = 0; M < xa.length; M++) {
        jw(xa[M], 162);
        xa[M].ᐃⵠⲆᐃᐃ(xa[M].info);
      }
      xa = kx.ⵠⵠΔ[7];
      M = 0;
      for (; M < xa.length; M++) {
        jw(xa[M], 163);
        xa[M].ᐃⵠⲆᐃᐃ(xa[M].info);
      }
      xa = kx.ⵠⵠΔ[8];
      M = 0;
      for (; M < xa.length; M++) {
        jw(xa[M], 164);
        xa[M].ᐃⵠⲆᐃᐃ(xa[M].info);
      }
      xa = kx.ⵠⵠΔ[9];
      M = 0;
      for (; xa.length > M; M++) {
        jw(xa[M], 165);
        xa[M].ᐃⵠⲆᐃᐃ(xa[M].info);
      }
      xa = kx.ⵠⵠΔ[19];
      M = 0;
      for (; xa.length > M; M++) {
        jw(xa[M], 122);
        xa[M].ᐃⵠⲆᐃᐃ(xa[M].info);
      }
      xa = kx.ⵠⵠΔ[50];
      M = 0;
      for (; M < xa.length; M++) {
        jw(xa[M], 217);
        xa[M].ᐃⵠⲆᐃᐃ(xa[M].info);
      }
      var ya = kx.ⵠⵠΔ[5];
      for (M = 0; ya.length > M; M++) {
        jw(ya[M], 160);
        ya[M].ᐃⵠⲆᐃᐃ(ya[M].info);
      }
      ya = kx.ⵠⵠΔ[12];
      M = 0;
      for (; M < ya.length; M++) {
        jw(ya[M], 168);
        ya[M].ᐃⵠⲆᐃᐃ(ya[M].info);
      }
      ya = kx.ⵠⵠΔ[13];
      M = 0;
      for (; ya.length > M; M++) {
        jw(ya[M], 169);
        ya[M].ᐃⵠⲆᐃᐃ(ya[M].info);
      }
      ya = kx.ⵠⵠΔ[14];
      M = 0;
      for (; M < ya.length; M++) {
        jw(ya[M], 170);
        ya[M].ᐃⵠⲆᐃᐃ(ya[M].info);
      }
      ya = kx.ⵠⵠΔ[20];
      M = 0;
      for (; ya.length > M; M++) {
        jw(ya[M], 123);
        ya[M].ᐃⵠⲆᐃᐃ(ya[M].info);
      }
      ya = kx.ⵠⵠΔ[52];
      M = 0;
      for (; ya.length > M; M++) {
        jw(ya[M], 219);
        ya[M].ᐃⵠⲆᐃᐃ(ya[M].info);
      }
      var za = kx.ⵠⵠΔ[35];
      for (M = 0; M < za.length; M++) {
        var Aa = za[M];
        if (Aa.info > 0) {
          jw(Aa, 788);
        } else {
          jw(Aa, 182);
        }
      }
      var Ba = kx.ⵠⵠΔ[29];
      for (M = 0; M < Ba.length; M++) {
        jw(Ba[M], 159);
      }
      _v(Vv, i, t, c, e, 111, "g", 2);
      _v(Vv, i, t, c, e, 415, "gw", 2);
      _v(Vv, i, t, c, e, 112, "d", 2);
      _v(Vv, i, t, c, e, 416, "dw", 2);
      _v(Vv, i, t, c, e, 110, "p", 0);
      _v(Vv, i, t, c, e, 241, "m", 2);
      _v(Vv, i, t, c, e, 121, "a", 2);
      _v(Vv, i, t, c, e, 202, "re", 2);
      _v(Vv, i, t, c, e, 679, "cs", 3, 3);
      _v(Vv, i, t, c, e, 679, "cs", 2, 2);
      _v(Vv, i, t, c, e, 679, "cs", 1, 1);
      _v(Vv, i, t, c, e, 679, "cs", 0, 0);
      _v(Vv, i, t, c, e, 676, "cs", 3, 3);
      _v(Vv, i, t, c, e, 676, "cs", 2, 2);
      _v(Vv, i, t, c, e, 676, "cs", 1, 1);
      _v(Vv, i, t, c, e, 676, "cs", 0, 0);
      var Ca = kx.ⵠⵠΔ[100];
      for (M = 0; M < Ca.length; M++) {
        for (ca = 0; Ca[M].info > ca; ca++) {
          jw(Ca[M].Δᐃᐃᐃ[ca], 294);
        }
      }
      _v(Vv, i, t, c, e, 108, "s", 2);
      var Da = kx.ⵠⵠΔ[24];
      for (M = 0; M < Da.length; M++) {
        jw(Da[M]);
      }
      Da = kx.ⵠⵠΔ[25];
      M = 0;
      for (; Da.length > M; M++) {
        jw(Da[M]);
      }
      Da = kx.ⵠⵠΔ[26];
      M = 0;
      for (; M < Da.length; M++) {
        jw(Da[M]);
      }
      Da = kx.ⵠⵠΔ[27];
      M = 0;
      for (; Da.length > M; M++) {
        jw(Da[M]);
      }
      Da = kx.ⵠⵠΔ[28];
      M = 0;
      for (; M < Da.length; M++) {
        jw(Da[M]);
      }
      var Ea = kx.ⵠⵠΔ[32];
      for (M = 0; Ea.length > M; M++) {
        hw(Ea[M]);
      }
      ea = kx.ⵠⵠΔ[1];
      M = 0;
      for (; M < ea.length; M++) {
        kw(ea[M]);
      }
      ea = kx.ⵠⵠΔ[6];
      M = 0;
      for (; M < ea.length; M++) {
        kw(ea[M]);
      }
      g = kx.ⵠⵠΔ[18];
      M = 0;
      for (; g.length > M; M++) {
        if (g[M].action == 2) {
          kw(g[M]);
        }
      }
      wa = kx.ⵠⵠΔ[34];
      M = 0;
      for (; M < wa.length; M++) {
        kw(wa[M]);
      }
      fa = kx.ⵠⵠΔ[22];
      M = 0;
      for (; fa.length > M; M++) {
        kw(fa[M]);
      }
      ha = kx.ⵠⵠΔ[23];
      M = 0;
      for (; M < ha.length; M++) {
        kw(ha[M]);
        ha[M].ᐃⵠⲆᐃᐃ(ha[M].info);
      }
      _v(Vv, i, t, c, e, 989, "c", 0);
      _v(Vv, i, t, c, e, 109, "t", 5, 4);
      _v(Vv, i, t, c, e, 413, "f", 2, 2);
      _v(Vv, i, t, c, e, 693, "plm", 0, 0);
      _v(Vv, i, t, c, e, 307, "b", 3, 2);
      _v(Vv, i, t, c, e, 109, "t", 3, 2);
      _v(Vv, i, t, c, e, 307, "b", 1, 0);
      _v(Vv, i, t, c, e, 413, "f", 1, 1);
      _v(Vv, i, t, c, e, 693, "plm", 1, 1);
      _v(Vv, i, t, c, e, 109, "t", 1, 0);
      _v(Vv, i, t, c, e, 413, "f", 0, 0);
      _v(Vv, i, t, c, e, 693, "plm", 2, 2);
      Ea = kx.ⵠⵠΔ[32];
      M = 0;
      for (; M < Ea.length; M++) {
        kw(Ea[M]);
      }
      var Fa = kx.ⵠⵠΔ[56];
      for (M = 0; Fa.length > M; M++) {
        jw(Fa[M], 221);
      }
      aa = kx.ⵠⵠΔ[0];
      M = 0;
      for (; M < aa.length; M++) {
        if ((ba = aa[M]).ⵠⲆⵠᐃⵠΔⵠ === 1 && (ba.ΔⲆᐃᐃΔ < 180 || ba.ⲆΔⲆΔⵠ !== 227 && ba.ⲆΔⲆΔⵠ !== 228 && ba.ⲆΔⲆΔⵠ !== 91 && ba.ⲆΔⲆΔⵠ !== 229 && ba.ⲆΔⲆΔⵠ !== 230)) {
          ba.ⵠᐃΔΔΔⵠᐃ = ΔΔⲆ.ᐃⵠΔⵠΔ(ba.ⵠᐃΔΔΔⵠᐃ, 100, 0.018);
          ta = 1 + Math.min(1, Math.max(ba.ⵠᐃΔΔΔⵠᐃ, 0) / 100) * 0.18;
          Mo.save();
          Mo.scale(ta, ta);
          lx.ⲆΔᐃ.x /= ta;
          lx.ⲆΔᐃ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ΔᐃᐃⲆᐃᐃΔ();
          ba.ΔᐃⲆΔ();
          lx.ⲆΔᐃ.x *= ta;
          lx.ⲆΔᐃ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          Mo.restore();
        }
      }
      var Ga = kx.ⵠⵠΔ[38];
      for (M = 0; M < Ga.length; M++) {
        jw(Ga[M], 190);
        Ga[M].ᐃⵠⲆᐃᐃ(Ga[M].info);
      }
      var Ha = kx.ⵠⵠΔ[90];
      for (M = 0; Ha.length > M; M++) {
        jw(Ha[M], 245, 246);
      }
      var Ia = kx.ⵠⵠΔ[42];
      for (M = 0; M < Ia.length; M++) {
        jw(Ia[M], 201);
      }
      aa = kx.ⵠⵠΔ[0];
      M = 0;
      for (; aa.length > M; M++) {
        ba = aa[M];
        if ((ba.ⲆΔⲆΔⵠ === 227 || ba.ⲆΔⲆΔⵠ === 228 || ba.ⲆΔⲆΔⵠ === 91 || ba.ⲆΔⲆΔⵠ === 229 || ba.ⲆΔⲆΔⵠ === 230) && ba.ΔⲆᐃᐃΔ > 180) {
          ba.ⵠⵠΔⲆⲆᐃⵠ = 1;
          Mo.save();
          ta = 1 + Math.min(1, Math.max(ba.ΔΔⵠᐃⵠ - 30, 0) / 180) * 0.35;
          Mo.scale(ta, ta);
          lx.ⲆΔᐃ.x /= ta;
          lx.ⲆΔᐃ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ΔᐃᐃⲆᐃᐃΔ();
          ba.ΔᐃⲆΔ();
          lx.ⲆΔᐃ.x *= ta;
          lx.ⲆΔᐃ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          Mo.restore();
        }
      }
      sa = kx.ⵠⵠΔ[91];
      M = 0;
      for (; M < sa.length; M++) {
        if (sa[M].ⵠⵠΔⲆⲆᐃⵠ === 1) {
          jw(sa[M]);
        }
      }
      V = kx.ⵠⵠΔ[64];
      M = 0;
      for (; M < V.length; M++) {
        if (V[M].scale > 1) {
          jw(V[M], 449, 463);
        }
      }
      V = kx.ⵠⵠΔ[69];
      M = 0;
      for (; M < V.length; M++) {
        if (V[M].scale > 1) {
          jw(V[M], 450, 464);
        }
      }
      var Ja = kx.ⵠⵠΔ[74];
      for (M = 0; Ja.length > M; M++) {
        jw(Ja[M], 235, 1107);
      }
      var Ka = kx.ⵠⵠΔ[75];
      for (M = 0; M < Ka.length; M++) {
        jw(Ka[M], 238, 1128);
      }
      if ((Ov += tx * 15) > 60) {
        Ov -= 60;
      }
      _v(Qv, i, t, c, e, 1041, "fo", 2);
      _v(Qv, i, t, c, e, 244, "fod", 2);
    })();
    if (jx.ΔⲆΔⲆᐃ && kx.mode !== 2 && kx.mode !== 4 && kx.mode !== 5) {
      (function () {
        var a = lx.ᐃᐃΔΔᐃ;
        if (a.ΔⵠⲆΔⲆ === 0) {
          a.ΔⵠⵠΔⲆ = Math.max(0, a.ΔⵠⵠΔⲆ - tx / 10);
        } else {
          a.ΔⵠⵠΔⲆ = Math.min(1, a.ΔⵠⵠΔⲆ + tx / 10);
        }
        for (var b = a.ⲆᐃⲆᐃΔ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ΔⵠΔ(d);
          qw(471, d.id, lx.ⲆΔᐃ.x + d.x, lx.ⲆΔᐃ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ⵠΔⲆⲆΔ <= 0 || -lx.ⲆΔᐃ.x + Bo < d.x || -lx.ⲆΔᐃ.x - lx.ⲆΔᐃ.w / 2 > d.x || -lx.ⲆΔᐃ.y + cq < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -lx.ⲆΔᐃ.y;
        if (kx.ⲆⵠⲆΔΔ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = lx.ΔᐃⵠⵠΔ;
        if (a.ΔⵠⲆΔⲆ === 0) {
          a.ΔⵠⵠΔⲆ = Math.max(0, a.ΔⵠⵠΔⲆ - tx / 10);
        } else {
          a.ΔⵠⵠΔⲆ = Math.min(1, a.ΔⵠⵠΔⲆ + tx / 10);
        }
        for (var b = a.ⲆᐃⲆᐃΔ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ΔⵠΔ(d);
          qw(470, d.id, lx.ⲆΔᐃ.x + d.x, lx.ⲆΔᐃ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ⵠΔⲆⲆΔ <= 0 || d.x > -lx.ⲆΔᐃ.x + Bo || d.x < -lx.ⲆΔᐃ.x || d.y > -lx.ⲆΔᐃ.y + cq) {
            b.splice(c, 1);
          }
        }
        var e = -lx.ⲆΔᐃ.y;
        if (kx.ᐃΔᐃᐃⵠ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = lx.ⲆⵠᐃⲆⲆⵠᐃ;
        for (var b = a.ⲆᐃⲆᐃΔ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ΔⵠΔ(d);
          qw(942, d.id, lx.ⲆΔᐃ.x + d.x, lx.ⲆΔᐃ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ⵠΔⲆⲆΔ <= 0 || d.x > -lx.ⲆΔᐃ.x + Bo || d.x < -lx.ⲆΔᐃ.x || d.y > -lx.ⲆΔᐃ.y + cq) {
            b.splice(c, 1);
          }
        }
        var e = -lx.ⲆΔᐃ.y;
        if (kx.ᐃΔⵠⵠⲆ > -1000) {
          a.add(e);
        }
      })();
    }
    if (kx.transition && a) {
      kx.transition = false;
      kx.ΔΔⲆⵠ.ΔⵠⲆ = 0;
      kx.ΔΔⲆⵠ.ⲆⲆⲆ = false;
    }
  }
  function ew(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = lx.ⲆΔᐃ.x + f - 700;
    var g = Math.max(lx.ⲆΔᐃ.y + e, 0);
    var l = Math.max(-lx.ⲆΔᐃ.y + cq - i - 100, 0);
    var r = g;
    var b = cq - g - l;
    if (n) {
      var d = j.ⵠⲆΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ⵠⲆΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ⵠⲆΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (u < s + (t = h + 350 - s + d) - 3) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.Ⲇᐃⵠⵠᐃⵠᐃ === 1) {
      if (kx.transition) {
        var p = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(15, 77, 72, 252, 239, 187, p);
      } else {
        Mo.fillStyle = ts.ⵠⵠⵠΔⲆⵠΔ[kx.time];
      }
      Mo.fillRect(s, r, t, b);
    } else {
      if (kx.transition) {
        p = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(k.ⲆⲆΔ[0], k.ⲆⲆΔ[1], k.ⲆⲆΔ[2], k.ΔΔᐃ[0], k.ΔΔᐃ[1], k.ΔΔᐃ[2], p);
      } else {
        Mo.fillStyle = k.ⲆⲆΔᐃⲆ[kx.time];
      }
      Mo.fillRect(s, r, t, b);
    }
  }
  function fw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = lx.ⲆΔᐃ.x + j - 700;
    var g = Math.max(lx.ⲆΔᐃ.y + e, 0);
    var l = Math.max(-lx.ⲆΔᐃ.y + cq - i - 100, 0);
    var t = g;
    var b = cq - g - l;
    if (o) {
      var d = q.ⵠⲆΔ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.ⵠⲆΔ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ⵠⲆΔ(s);
    } else {
      d = s.r;
    }
    if (k < u + (f = h + 350 - u + d.x) - 3) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f - 2;
    } else {
      A = false;
      u = k;
      D = -1;
    }
    f = h + 700 - u;
    if (kx.transition) {
      var N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
      Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
    }
    Mo.fillRect(F, c, p, C);
    if (o) {
      if (kx.transition) {
        N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(15, 70, 76, 42, 139, 155, N);
      } else {
        Mo.fillStyle = ts.ΔⲆⲆⲆΔᐃᐃ[kx.time];
      }
    } else if (kx.transition) {
      N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
      Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
    }
    Mo.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (kx.transition) {
          N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
          Mo.fillStyle = bw(17, 94, 96, 169, 214, 211, N);
        } else {
          Mo.fillStyle = ts.ⲆΔⵠⲆⲆᐃⲆ[kx.time];
        }
      } else if (kx.transition) {
        N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
      } else {
        Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
      }
      Mo.fillRect(L, J, M, B);
    }
    if (jx.ΔⲆΔⲆᐃ && o) {
      q.ΔⵠⵠⲆᐃⲆⲆⲆᐃ(k, D, G, h, -lx.ⲆΔᐃ.y + c, -lx.ⲆΔᐃ.y + c + C);
    }
  }
  function gw(b, c, d, e, f) {
    var g = d.width;
    var a = d.height;
    var i = Math.floor(g / 2);
    var j = Math.floor(a / 2);
    if (kx.transition) {
      Mo.globalAlpha = 1;
      zp(Mo, ᐃΔ[b][c][kx.time], 0, 0, g, a, e, f, i, j);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ;
      zp(Mo, ᐃΔ[b][c][kx.time], 0, 0, g, a, e, f, i, j);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      zp(Mo, ᐃΔ[b][c][kx.time], 0, 0, g, a, e, f, i, j);
    }
  }
  function hw(a, b) {
    if (kx.transition) {
      Mo.globalAlpha = 1;
      a.ⵠⲆⲆΔⲆ(b);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ;
      a.ⵠⲆⲆΔⲆ(b);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      a.ⵠⲆⲆΔⲆ(b);
    }
  }
  function iw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = lx.ⲆΔᐃ.x + f + 820;
    var g = Math.max(lx.ⲆΔᐃ.y + e, 0);
    var l = Math.max(-lx.ⲆΔᐃ.y + cq - i - 100, 0);
    var r = g;
    var b = cq - g - l;
    if (n) {
      var d = j.ⵠⲆΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ⵠⲆΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ⵠⲆΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h - 350 - s - d) < u) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.Ⲇᐃⵠⵠᐃⵠᐃ === 1) {
      if (kx.transition) {
        var p = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(15, 77, 72, 252, 239, 187, p);
      } else {
        Mo.fillStyle = ts.ⵠⵠⵠΔⲆⵠΔ[kx.time];
      }
      Mo.fillRect(s, r, t, b);
    } else {
      if (kx.transition) {
        p = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(k.ⲆⲆΔ[0], k.ⲆⲆΔ[1], k.ⲆⲆΔ[2], k.ΔΔᐃ[0], k.ΔΔᐃ[1], k.ΔΔᐃ[2], p);
      } else {
        Mo.fillStyle = k.ⲆⲆΔᐃⲆ[kx.time];
      }
      Mo.fillRect(s, r, t, b);
    }
  }
  function jw(a, b, c) {
    if (kx.transition) {
      Mo.globalAlpha = 1;
      a.ΔᐃⲆΔ(b, c);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ;
      a.ΔᐃⲆΔ(b, c);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      a.ΔᐃⲆΔ(b, c);
    }
  }
  function kw(a, b) {
    if (kx.transition) {
      Mo.globalAlpha = 1;
      a.ⲆΔᐃⲆᐃ(b);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ;
      a.ⲆΔᐃⲆᐃ(b);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      a.ⲆΔᐃⲆᐃ(b);
    }
  }
  function lw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = lx.ⲆΔᐃ.y + f - 700;
    var g = Math.max(lx.ⲆΔᐃ.x + e, 0);
    var l = Math.max(-lx.ⲆΔᐃ.x + Bo - i - 100, 0);
    var r = g;
    var b = Bo - g - l;
    if (n) {
      var d = j.ⵠⲆΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ⵠⲆΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ⵠⲆΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (u < s + (t = h + 350 - s + d) - 3) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.Ⲇᐃⵠⵠᐃⵠᐃ === 1) {
      if (kx.transition) {
        var p = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(15, 77, 72, 252, 239, 187, p);
      } else {
        Mo.fillStyle = ts.ⵠⵠⵠΔⲆⵠΔ[kx.time];
      }
      Mo.fillRect(r, s, b, t);
    } else {
      if (kx.transition) {
        p = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(k.ⲆⲆΔ[0], k.ⲆⲆΔ[1], k.ⲆⲆΔ[2], k.ΔΔᐃ[0], k.ΔΔᐃ[1], k.ΔΔᐃ[2], p);
      } else {
        Mo.fillStyle = k.ⲆⲆΔᐃⲆ[kx.time];
      }
      Mo.fillRect(r, s, b, t);
    }
  }
  function mw(a) {
    Mo.globalAlpha = a.alpha;
    jb(Mo, a.x + lx.ⲆΔᐃ.x, a.y + lx.ⲆΔᐃ.y, a.r);
    Lb(Mo, ts.ΔⲆΔΔⲆⲆΔ[kx.time]);
    Mo.globalAlpha = 1;
  }
  function nw(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var a = Math.floor(f / 2);
    var h = Math.floor(g / 2);
    if (kx.transition) {
      Mo.globalAlpha = 1;
      zp(Mo, ᐃΔ[b][kx.time], 0, 0, f, g, d, e, a, h);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ;
      zp(Mo, ᐃΔ[b][kx.time], 0, 0, f, g, d, e, a, h);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      zp(Mo, c, 0, 0, f, g, d, e, a, h);
    }
  }
  function ow(a) {
    Mo.save();
    Mo.translate(lx.ⲆΔᐃ.x + a.x, lx.ⲆΔᐃ.y + a.y);
    Mo.rotate(a.angle);
    Mo.globalAlpha = a.alpha;
    var b = ᐃΔ[a.id][kx.time];
    zp(Mo, b, -b.width / 2, -b.height / 2);
    Mo.globalAlpha = 1;
    Mo.restore();
  }
  function pw(a, b, c, d) {
    if (kx.transition) {
      Mo.globalAlpha = 1;
      zp(Mo, ᐃΔ[a][kx.time], c, d);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ;
      zp(Mo, ᐃΔ[a][kx.time], c, d);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      zp(Mo, b, c, d);
    }
  }
  function qw(a, b, c, d, e) {
    if (kx.transition && e == 1) {
      Mo.globalAlpha = 1;
      zp(Mo, ᐃΔ[a][kx.time][b], c, d);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ;
      zp(Mo, ᐃΔ[a][kx.time][b], c, d);
      kx.time = kx.time ? 0 : 1;
      Mo.globalAlpha = 1;
    } else {
      Mo.globalAlpha = e;
      zp(Mo, ᐃΔ[a][kx.time][b], c, d);
      Mo.globalAlpha = 1;
    }
  }
  const rw = 7234707;
  const sw = 7234707 .ΔΔⵠⵠⲆΔⵠ;
  const tw = `const ⵠⵠΔΔⲆᐃⵠⵠᐃ = (typeof ⵠᐃΔΔⵠΔⲆⵠⲆ === "${sw}") ? 1 : 0; return ⵠⵠΔΔⲆᐃⵠⵠᐃ;`;
  function uw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = lx.ⲆΔᐃ.y + j - 700;
    var g = Math.max(lx.ⲆΔᐃ.x + e, 0);
    var l = Math.max(-lx.ⲆΔᐃ.x + Bo - i - 100, 0);
    var t = g;
    var b = Bo - g - l;
    if (o) {
      var d = q.ⵠⲆΔ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = t;
    var c = u;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.ⵠⲆΔ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ⵠⲆΔ(s);
    } else {
      d = s.r;
    }
    if (k < u + (f = h + 350 - u + d.x) - 3) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f - 2;
    } else {
      A = vl;
      u = k;
      D = -1;
    }
    f = h + 700 - u;
    if (kx.transition) {
      var N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
      Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
    }
    Mo.fillRect(F, c, C, p);
    if (o) {
      if (kx.transition) {
        N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(15, 70, 76, 42, 139, 155, N);
      } else {
        Mo.fillStyle = ts.ΔⲆⲆⲆΔᐃᐃ[kx.time];
      }
    } else if (kx.transition) {
      N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
      Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
    }
    Mo.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (kx.transition) {
          N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
          Mo.fillStyle = bw(17, 94, 96, 169, 214, 211, N);
        } else {
          Mo.fillStyle = ts.ⲆΔⵠⲆⲆᐃⲆ[kx.time];
        }
      } else if (kx.transition) {
        N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
      } else {
        Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
      }
      Mo.fillRect(J, L, B, M);
    }
    if (jx.ΔⲆΔⲆᐃ && o) {
      q.ΔⲆⵠᐃⵠΔΔᐃⵠ(k, D, G, h, -lx.ⲆΔᐃ.x + F, -lx.ⲆΔᐃ.x + F + C);
    }
  }
  function vw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = lx.ⲆΔᐃ.y + j + 710;
    var g = Math.max(lx.ⲆΔᐃ.x + e, 0);
    var l = Math.max(-lx.ⲆΔᐃ.x + Bo - i - 100, 0);
    var t = g;
    var b = Bo - g - l;
    if (o) {
      var d = q.ⵠⲆΔ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ⵠⲆΔ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ⵠⲆΔ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h - 350 - u - d.x) < k) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f + 2;
    } else {
      A = Pg;
      u = k;
      D = -1;
    }
    f = h - 700 - u;
    if (kx.transition) {
      var N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
      Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
    }
    Mo.fillRect(c, F, C, p);
    if (o) {
      if (kx.transition) {
        N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(15, 70, 76, 42, 139, 155, N);
      } else {
        Mo.fillStyle = ts.ΔⲆⲆⲆΔᐃᐃ[kx.time];
      }
    } else if (kx.transition) {
      N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
      Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
    } else {
      Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
    }
    Mo.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (kx.transition) {
          N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
          Mo.fillStyle = bw(17, 94, 96, 169, 214, 211, N);
        } else {
          Mo.fillStyle = ts.ⲆΔⵠⲆⲆᐃⲆ[kx.time];
        }
      } else if (kx.transition) {
        N = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
        Mo.fillStyle = bw(9, 55, 63, 11, 106, 132, N);
      } else {
        Mo.fillStyle = ts.ⵠⵠΔⵠⵠ[kx.time];
      }
      Mo.fillRect(J, L, B, M);
    }
    if (jx.ΔⲆΔⲆᐃ && o) {
      q.ΔⲆᐃⲆⲆⲆᐃⲆⲆ(k, D, G, h, -lx.ⲆΔᐃ.x + c, -lx.ⲆΔᐃ.x + c + C);
    }
  }
  const ww = 12683971;
  const xw = 12683971 .ⵠⲆⲆⲆᐃⵠⵠ;
  const yw = `const ⲆΔΔΔΔⲆΔⵠⵠ = (typeof ΔΔⵠⲆᐃΔᐃ === "${xw}") ? 1 : 0; return ⲆΔΔΔΔⲆΔⵠⵠ;`;
  var zw = 0;
  var Aw = 1;
  var Bw = 2;
  var Cw = 0;
  var Dw = 1;
  var Ew = 2;
  function Fw(b, c, d, e, f) {
    var g = {
      x: d,
      y: e,
      ⲆⵠⵠⲆⲆ: d,
      ᐃΔᐃⵠᐃ: e
    };
    return {
      translate: g,
      ΔᐃⲆΔ: function (a) {
        zp(a, b, g.x, g.y, b.width / 2, b.height / 2);
      },
      active: c,
      position: f
    };
  }
  function Gw(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function Hw(c, e, f, i, j, k, n, p, q = 0, h, r) {
    if (p === _g) {
      p = 0;
    }
    if (h === undefined) {
      h = 0;
    }
    if (Yq === r) {
      r = 1;
    }
    if (k !== 1) {
      k = 0;
    }
    if (i) {
      var t = i;
    }
    var u;
    var w = {
      width: c,
      height: e,
      ⵠᐃ: t,
      state: Cw,
      translate: {
        x: p,
        y: q,
        ⲆⵠⵠⲆⲆ: p,
        ᐃΔᐃⵠᐃ: q
      },
      ᐃΔΔΔⵠΔⲆᐃⵠ: k,
      ⵠΔⲆΔ: 0,
      callback: n,
      position: h,
      active: r
    };
    function d() {
      return w.ⵠᐃ[w.state];
    }
    function v(a) {
      var b = w.translate;
      if (w.width === 0 || w.height === 0) {
        w.width = w.ⵠᐃ[0].width;
        w.height = w.ⵠᐃ[0].height;
      }
      return a.x > b.x && a.x < b.x + w.width / j && a.y > b.y && a.y < b.y + w.height / j;
    }
    k = function () {
      var a = 0;
      if (w.ᐃΔΔΔⵠΔⲆᐃⵠ === 1) {
        if (Dw === w.state || Ew === w.state) {
          w.ⵠΔⲆΔ = (0 + tx * 1000) % 1000;
        } else if (0 < 0) {
          w.ⵠΔⲆΔ = 500 < 0 ? 0 + tx * 1000 : 0 - tx * 1000;
          if (0 < 0 || 1000 < 0) {
            w.ⵠΔⲆΔ = 0;
          }
        }
        a = ΔΔⲆ.ⲆⵠⵠΔⲆ(0 > 500 ? 2 : 0) * 0.2;
      }
      return a;
    };
    if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
      u = function (a) {
        var b = 1 + k();
        var c = d();
        var e = b * w.width / 2;
        var f = w.height * b / 2;
        var g = (e - w.width / 2) / 2;
        var h = (f - w.height / 2) / 2;
        zp(a, c, w.translate.x - g, w.translate.y - h, e, f);
      };
    } else if (j === 3) {
      u = function (b) {
        var c = d();
        var e = w.width;
        var f = w.height;
        var g = (e - w.width) / 2;
        var h = (f - w.height) / 2;
        zp(b, c, w.translate.x - g, w.translate.y - h, e, f);
      };
      j = 1;
    } else {
      u = function (a) {
        zp(a, d(), w.translate.x, w.translate.y);
      };
    }
    return {
      info: w,
      ⲆⵠⵠΔ: function (a, b, c) {
        if (v(b)) {
          if (c == Aw) {
            w.state = Ew;
          } else if (Bw == c || c == zw && w.state != Ew) {
            w.state = Dw;
          }
          return true;
        } else {
          w.state = Cw;
          return Pg;
        }
      },
      ΔᐃⲆΔ: u,
      ⵠΔⲆΔᐃΔᐃ: v
    };
  }
  function Iw(c, f, i, j, k, n, a, q, t, w, g, l, u, b, x) {
    if (c.length === 0) {
      c = " ";
    }
    if (Yj === a) {
      a = 0;
    }
    if (q === ag) {
      q = 0;
    }
    if (t === ie) {
      t = 0;
    }
    if (b === ij) {
      b = 0;
    }
    var v = document.createElement("canvas");
    var m = v.getContext("2d");
    m.textBaseline = "middle";
    m.font = (x !== ij ? x + " " : "") + j + "px " + f;
    k = k !== undefined ? Math.min(m.measureText(c).width, k) : m.measureText(c).width;
    v.width = k + a;
    v.height = j + q;
    if (ir !== n) {
      if (g !== undefined) {
        m.globalAlpha = g;
      }
      m.fillStyle = n;
      if (Tj !== l) {
        ⲆᐃΔⲆⲆⲆΔⲆᐃ(m, t + 2, t, k + a - t * 2 - 4, j + q - t * 2, l);
        m.fill();
      } else {
        m.fillRect(t, t, k + a - t * 2, j + q - t * 2);
      }
      m.globalAlpha = 1;
      if (t !== 0) {
        m.lineWidth = t;
        m.strokeStyle = w;
        m.stroke();
      }
    }
    m.textBaseline = "middle";
    m.font = (x !== undefined ? x + " " : "") + j + "px " + f;
    if (u !== undefined) {
      m.strokeStyle = u;
      m.lineWidth = b;
      m.lineJoin = "miter";
      m.miterLimit = 2;
      m.strokeText(c, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(j / 2), k);
    }
    m.fillStyle = i;
    m.fillText(c, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(j / 2), k);
    v.w2 = v.width / 2;
    v.ᐃⵠᐃⲆᐃ = v.height / 2;
    return v;
  }
  function ef(b, c, d, e, f) {
    Ye(mf, b, c, d, e, f);
    const g = Vf(Lw[0], Lw[1], Lw[2]);
    const a = vx(Lw[3], Lw[4], Lw[0], Lw[1], Lw[2], Lw[3]);
    return (16 << ((g ^ a) >> 16 & 255)) + (0 << ((g ^ a) >> 24 & 255)) + (24 << ((g ^ a) >> 8 & 255)) + (8 << ((g ^ a) & 255));
  }
  var tf = "send";
  var nf = ΔΔⲆ.ⵠⲆΔⵠⵠᐃᐃ("id") === "1" ? 1 : 0;
  var of = ΔΔⲆ.ⵠⲆΔⵠⵠᐃᐃ("password");
  var af = ΔΔⲆ.ⵠⲆΔⵠⵠᐃᐃ("debug") || Wh;
  if (af !== undefined) {
    af = JSON.parse(Ph.decodeURIComponent(af));
  }
  var Jw = ΔΔⲆ.ⵠⲆΔⵠⵠᐃᐃ("server") || qn;
  var sf = ΔΔⲆ.ⵠⲆΔⵠⵠᐃᐃ("region") || Yj;
  var hf = "starve.io";
  var gf = "https://" + hf;
  var lf = {
    ΔⵠᐃⵠⲆ: 4,
    ⵠⲆⵠⵠᐃⵠᐃ: 32,
    ⲆⲆΔⲆⵠⲆⲆ: 128,
    ΔΔᐃᐃΔⲆⲆ: 8,
    IDLE: 64,
    ⲆⵠⵠⵠΔⲆⵠ: 16,
    ᐃⲆᐃΔ: 2,
    ΔΔΔⲆΔⵠⲆⲆᐃ: 1,
    ⵠᐃΔΔⲆᐃᐃ: 256
  };
  var uf = [{
    ΔⲆⵠⲆⵠ: 1000,
    items: [[2, 113], [1, 117], [8, 110], [1, 143]]
  }, {
    ΔⲆⵠⲆⵠ: 2000,
    items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ΔⲆⵠⲆⵠ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ΔⲆⵠⲆⵠ: 8000,
    items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ΔⲆⵠⲆⵠ: 16000,
    items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ΔⲆⵠⲆⵠ: 16000,
    items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ΔⲆⵠⲆⵠ: 16000,
    items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ΔⲆⵠⲆⵠ: 16000,
    items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
  }, {
    ΔⲆⵠⲆⵠ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ΔⲆⵠⲆⵠ: 20000,
    items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  const bf = [];
  let df = 0;
  var Kw = {
    ΔⲆⲆⲆΔⵠⵠⵠⲆ: 14,
    ⵠΔᐃⵠᐃᐃᐃ: 600000,
    ᐃΔᐃᐃΔᐃⵠᐃⵠ: "[21]",
    ⲆΔⲆⵠⲆⲆⲆⵠᐃ: 2000,
    ΔᐃⵠⲆΔⲆΔⲆΔ: 5,
    ⵠΔΔⲆΔⲆⲆⵠⲆ: 0.58,
    ΔⲆⲆⵠΔⵠᐃⵠⲆ: 14,
    ⵠᐃⲆⲆᐃΔᐃᐃᐃ: 5,
    ⲆⲆΔⵠᐃⲆⲆΔᐃ: 3,
    ᐃⲆⵠⲆⲆᐃⲆ: 4,
    ᐃᐃᐃΔⵠᐃⵠ: 1,
    ᐃⵠΔΔᐃᐃⵠⵠⵠ: 50,
    ⵠⲆᐃΔⵠᐃⵠⲆᐃ: 8000,
    ⲆΔᐃⵠᐃΔⲆⲆⵠ: 60000,
    ΔᐃΔⲆⵠⲆᐃΔⵠ: 20,
    ⵠⲆᐃⵠⵠᐃⵠ: 2,
    ᐃⲆΔΔᐃΔⵠ: 4,
    ᐃᐃΔΔᐃΔⵠ: 0,
    ᐃⵠᐃⲆΔⲆⵠ: 3,
    ᐃΔΔⵠⲆΔⵠΔΔ: 125000,
    ΔᐃⵠⵠᐃⲆΔΔⵠ: 5,
    ⵠⲆᐃⲆⲆᐃᐃ: 0.2,
    ⲆᐃΔΔⲆⲆΔ: 52,
    ΔⵠⲆⵠⵠⲆⵠΔⵠ: 200,
    ⲆⵠⵠⵠΔⲆⵠ: 0.2
  };
  let mf = ij;
  let Lw = Yq;
  const Mw = Hi;
  Hi = async function () {
    mf = te(Nj(15));
    Lw = ok(mf);
    if (Mw) {
      Mw();
    }

    await Ph.gapi.load("auth2", Rx);
  };
  var Cf = {
    ⵠⵠⵠ: 480000,
    ΔΔΔᐃⵠⲆᐃ: 10,
    ᐃⵠΔᐃᐃᐃⵠ: 16,
    ΔⵠⲆΔΔΔⵠⵠⵠ: 6,
    ⲆᐃⵠᐃΔᐃⲆ: 60,
    ⵠΔⵠⵠⵠ: 1,
    ⲆᐃⵠⵠΔ: 2,
    ΔΔⲆΔⵠ: 4,
    ΔᐃΔΔᐃ: 8,
    ⵠⲆᐃⲆⲆᐃᐃ: 10,
    ΔⲆⲆΔⵠΔⲆ: 100,
    ⵠⲆᐃⵠΔⵠⲆ: 100,
    ⲆⲆⵠⲆⲆΔⵠ: 100,
    ⵠΔⲆᐃΔⵠᐃᐃⵠ: 100,
    ⵠΔᐃⲆΔᐃⵠ: 100,
    ⲆᐃΔΔᐃⲆⲆ: 100,
    ᐃΔΔⲆⲆᐃⵠΔΔ: 100,
    ⲆᐃΔΔᐃⲆⲆ: 100,
    ΔⵠΔⲆⲆΔⵠ: 100,
    ᐃΔᐃᐃᐃΔΔ: 100,
    ⵠⵠΔᐃⵠ: 0,
    ᐃⵠⵠΔⵠΔⵠ: 1,
    ΔⵠⲆᐃᐃ: 2,
    ⵠΔⲆᐃⵠ: 3,
    ᐃΔⲆΔᐃ: 4,
    ⵠΔΔΔΔᐃΔ: 5,
    ᐃⵠⵠᐃⵠ: 6,
    ⲆΔᐃΔᐃ: 7,
    ᐃⲆΔΔᐃⲆⵠⵠΔ: {
      sydney: "Sydney",
      osaka: "Osaka",
      atlanta: "Atlanta",
      frankfurt: "Frankfurt",
      losangeles: "Los Angeles"
    },
    ⵠΔⲆΔᐃⵠⲆ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ΔΔⵠⲆⵠΔⵠ: 0,
    ΔΔⲆΔⵠᐃᐃ: 0,
    ᐃⵠⲆⲆⵠⵠⵠ: 30,
    ᐃⲆⲆⲆⲆⵠΔᐃⲆ: 2,
    ⲆᐃⵠᐃΔᐃⲆ: 60000,
    ᐃᐃⲆᐃΔΔᐃᐃᐃ: 0,
    ⵠⵠΔΔΔΔΔⲆⲆ: 0,
    ⲆᐃⲆⲆⲆΔΔΔⵠ: 50,
    ⵠᐃⵠᐃⲆᐃᐃᐃΔ: 0,
    ⲆᐃΔᐃⵠⵠᐃΔⵠ: 40,
    ⲆᐃᐃⲆⲆᐃᐃΔΔ: 39,
    ⲆΔΔᐃᐃⲆⵠⵠᐃ: 830,
    ΔⲆⵠΔⲆⲆⲆ: 25,
    ᐃⵠᐃⵠⲆΔᐃ: 8,
    ΔⲆⵠⵠᐃ: 0,
    ᐃᐃΔⵠⵠ: 0,
    ᐃⲆᐃⲆⵠΔⲆ: 200,
    ⵠΔⲆΔⲆⵠⵠ: 0,
    ᐃΔᐃⵠΔ: 250,
    ΔⵠⵠᐃⲆⲆⵠ: 150,
    ⵠⲆΔᐃᐃⲆΔ: 0,
    ⲆᐃΔᐃᐃ: 350,
    ᐃⲆⵠⲆᐃΔΔ: 100,
    ⵠΔᐃᐃⵠⲆⲆ: 700,
    ⲆⵠᐃⵠΔ: 39879
  };
  var Tf = [];
  for (wb = 0; wb < 500; wb++) {
    Tf[wb] = 0;
  }
  Tf[47] = 1;
  Tf[57] = 1;
  Tf[0] = 1;
  Tf[5] = 1;
  Tf[6] = 1;
  Tf[30] = 1;
  Tf[19] = 1;
  Tf[9] = 1;
  Tf[62] = 1;
  Tf[63] = 1;
  Tf[13] = 1;
  Tf[14] = 1;
  Tf[15] = 1;
  Tf[33] = 1;
  Tf[34] = 1;
  Tf[16] = 1;
  Tf[17] = 1;
  Tf[12] = 1;
  Tf[18] = 1;
  var ff = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  var zf = {
    ⲆΔⵠⵠΔ: 52,
    ⲆⵠᐃⲆᐃ: 26,
    ⵠⵠᐃΔⵠ: 71,
    ⲆΔΔⲆⵠⲆᐃ: 84,
    ⲆⵠᐃΔΔ: 68,
    ⲆΔⵠᐃΔⵠΔ: 85,
    ᐃⵠΔⲆⲆ: 90,
    ᐃⲆⵠᐃᐃ: 33,
    ⲆⵠΔⲆᐃ: 41,
    ⵠᐃᐃᐃᐃ: 47,
    ΔⲆⵠΔⵠ: 87,
    ⲆᐃᐃⲆΔ: 38,
    ᐃⵠΔⲆΔ: 29,
    ⵠⲆⵠⲆⲆ: 88,
    ΔΔⵠᐃᐃ: 61,
    ⲆⵠⲆⵠΔ: 67,
    ⲆᐃᐃΔΔ: 10,
    ᐃⲆᐃᐃΔ: 34,
    ⲆᐃⵠΔⵠ: 4,
    ΔΔⲆⵠᐃ: 70,
    ᐃΔⲆᐃⵠ: 66,
    ⵠΔΔᐃⵠ: 27,
    ΔⵠⵠⲆⲆ: 50,
    ⵠΔΔΔΔ: 60,
    ᐃⵠⲆᐃⵠ: 56,
    ⵠⵠᐃΔᐃ: 32,
    ᐃⵠⵠΔⵠ: 86,
    ᐃⲆΔᐃᐃ: 78,
    ⵠⲆⲆᐃΔ: 69,
    ⲆΔᐃΔⵠ: 77,
    ᐃⵠⵠΔΔΔᐃ: 82,
    ᐃᐃΔᐃΔ: 51,
    ΔⲆⵠⵠⲆ: 8,
    ΔᐃⵠΔⵠ: 21,
    ⲆⲆⲆΔᐃ: 91,
    ⵠⵠⲆΔΔ: 13,
    ⲆⵠᐃⵠΔ: 3,
    ⲆⲆⵠⲆᐃ: 53,
    ᐃᐃⲆΔΔ: 79,
    ⵠⵠΔⲆⲆ: 75,
    ⵠⵠΔΔⵠ: 55,
    ᐃᐃᐃᐃᐃ: 73,
    ΔᐃΔⵠΔ: 2,
    ⵠΔᐃⲆⵠ: 16,
    ΔⲆᐃᐃⵠ: 40,
    ⵠⵠⵠⲆⲆ: 48,
    ⵠᐃΔᐃΔ: 63,
    ΔⵠᐃΔΔ: 7,
    ⵠⲆⲆⵠⲆ: 100,
    ΔⲆΔⲆⵠ: 44,
    ⲆⵠΔᐃΔ: 19,
    ⲆΔⲆⵠⵠ: 64,
    ⵠᐃⵠΔⲆᐃΔ: 76,
    ⵠᐃΔⵠΔ: 1,
    ⵠⵠᐃⵠᐃ: 14,
    ΔⲆⲆⵠᐃ: 6,
    ᐃⲆΔΔⲆ: 36,
    ΔΔⲆᐃᐃ: 80,
    ΔⵠⵠΔΔ: 49,
    ᐃᐃΔⵠᐃ: 25,
    ᐃⵠⵠⵠᐃᐃⲆ: 83,
    ᐃΔΔᐃᐃ: 62,
    ᐃΔⵠᐃⵠ: 42,
    ᐃⵠⵠⲆΔ: 54,
    ΔⲆΔΔΔ: 45,
    ⵠᐃΔⲆΔ: 74,
    ⵠⵠⲆⲆΔ: 28,
    ᐃⲆⵠⵠⵠ: 43,
    ΔⵠᐃΔᐃ: 0,
    ᐃΔⵠⲆⵠ: 5,
    ⲆᐃⲆᐃⵠ: 18,
    ᐃⵠΔᐃᐃ: 22,
    ⵠᐃᐃⲆⲆ: 12,
    ᐃⲆⲆⵠᐃ: 39,
    ⵠᐃⵠⵠⵠ: 9,
    ⵠᐃⲆᐃⵠ: 24,
    ΔⲆⵠᐃΔ: 11,
    ΔⲆⲆⵠΔ: 23,
    ΔΔΔⵠᐃ: 81,
    ⲆⵠᐃⵠⲆ: 72,
    ⵠⵠΔᐃΔ: 37,
    ᐃΔⲆΔⲆ: 15,
    ⲆΔⲆΔⲆ: 30,
    ᐃⵠⲆⵠΔ: 46,
    ⲆⲆᐃᐃⲆⲆⵠ: 89,
    ᐃᐃᐃΔᐃ: 20,
    ⲆⲆⵠΔⲆ: 31,
    ΔⲆᐃⲆⲆ: 65,
    ⵠⲆⵠᐃΔ: 35,
    ⵠⲆⵠᐃᐃ: 17
  };
  var yf = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
  function wf(c) {
    function f(c, d, e, f, i) {
      var j = d + Math.floor(f * kx.ᐃᐃᐃⲆΔ.get());
      var a = e + Math.floor(kx.ᐃᐃᐃⲆΔ.get() * f);
      var k = 10 + Math.floor(kx.ᐃᐃᐃⲆΔ.get() * (kx.ᐃⵠᐃⲆⵠ - j - 20));
      var m = 10 + Math.floor((kx.ΔᐃⲆⲆⵠ - a - 20) * kx.ᐃᐃᐃⲆΔ.get());
      var h = k + j;
      var g = m + a;
      for (var l = 0; l < kx.Ⲇᐃⵠⵠ.length; l++) {
        var n = kx.Ⲇᐃⵠⵠ[l];
        if (ΔΔⲆ.ᐃΔⲆⲆⲆⵠᐃ(k, h, m, g, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
          return 0;
        }
      }
      kx.Ⲇᐃⵠⵠ.push(new kx.ᐃᐃⵠᐃᐃΔΔ(c, k, m, j, a, 15));
      return 1;
    }
    function e(b, c, d, e, g) {
      for (var a = 0; a < g && f(b, c, d, e, 8) !== 1; a++);
      if (a === g) {
        return 0;
      } else {
        return 1;
      }
    }
    function i(b, c, d) {
      var e = c;
      for (var f = d; kx.ΔᐃⲆⲆⵠ > f; f++) {
        for (var g = c; kx.ᐃⵠᐃⲆⵠ > g && (d === f && (e = Math.max(g, e)), g <= e) && b[f][g] !== 1; g++) {
          b[f][g] = 1;
        }
        if (g < e) {
          break;
        }
      }
      kx.Ⲇᐃⵠⵠ.push(new kx.ᐃᐃⵠᐃᐃΔΔ(kx.ᐃⲆⲆΔⲆ, c, d, e - c + 1, f - d, 15));
    }
    function j(a, c) {
      for (var d = 0; d < c.length; d++) {
        b(c[d][0], c[d][1], a, c[d][2]);
      }
    }
    function k(c, f, j, k, m, n, a, o) {
      var q = Math.floor(a / 2);
      var h = Math.max(1, Math.floor(a / 2));
      var g = Math.floor(o / 2);
      var l = Math.max(1, Math.floor(o / 2));
      for (var r = 0; r < j; r++) {
        for (var s = c - g; s < c + l; s++) {
          for (var t = f - q; f + h > t; t++) {
            if (p(s, t, "wtb", 0, 1) === 1) {
              n.push([s, t, 1]);
            }
          }
        }
        c += k;
        f += m;
      }
    }
    function a(a, c) {
      var e = kx.Ⲇᐃⵠⵠ[a];
      var f = Math.floor(e.y1 / 100);
      var i = Math.floor(e.x1 / 100);
      var j = Math.floor(e.ⲆΔⲆ / 100);
      var n = i + (y = Math.floor(e.w / 100));
      var o = 2;
      var q = j;
      var r = f;
      for (var s = i + 10 + Math.floor((y - 20) * kx.ᐃᐃᐃⲆΔ.get()), t = s - 4; t < s + 4; t++) {
        p(f - 1, t, "wtb", 0, 1);
      }
      while (q > 0) {
        if (o !== 2) {
          if (q < 10) {
            for (A = 1; q > 0; A++) {
              k(r, s, 1, 1, 0, c, A, 1);
              q -= 1;
              r += 1;
            }
          } else if (o !== 1) {
            o = 1;
            var w = Math.floor(1 + kx.ᐃᐃᐃⲆΔ.get() * 2);
            var x = 1 + Math.floor(kx.ᐃᐃᐃⲆΔ.get() * 4);
            if (i + 16 > s) {
              k(r, s, w, 0, 1, c, x, x);
              s += w;
            } else if (n - 16 < s) {
              k(r, s, w, 0, -1, c, x, x);
              s -= w;
            } else if (kx.ᐃᐃᐃⲆΔ.get() > 0.5) {
              k(r, s, w, 0, 1, c, x, x);
              s += w;
            } else {
              k(r, s, w, 0, -1, c, x, x);
              s -= w;
            }
          } else {
            var y;
            var z = Math.min(q, Math.floor(1 + kx.ᐃᐃᐃⲆΔ.get() * 4));
            k(r, s, z, 1, 0, c, y = 1 + Math.floor(kx.ᐃᐃᐃⲆΔ.get() * 4), y);
            o = 0;
            q -= z;
            r += z;
          }
        } else {
          for (var A = 10; A > 1; A--) {
            k(r, s, 1, 1, 0, c, A, 1);
            q -= 1;
            r += 1;
          }
          o = 0;
        }
      }
      for (t = s - 1; t < s + 2; t++) {
        p(r, t, "wtb", 0, 1);
      }
    }
    function n(b, c) {
      for (var d = 0; d < 6; d++) {
        g(b, "t", d, Math.floor(c * 80));
      }
      for (d = 0; d < 4; d++) {
        g(b, "b", d, Math.floor(c * 80));
      }
      for (d = 0; d < 3; d++) {
        g(b, "s", d, Math.floor(c * 50));
      }
      var e = [];
      for (d = 0; d < 6; d++) {
        a(b, e);
      }
      j(b, e);
      e = [];
      g(b, "p", 0, Math.floor(c * 28));
      for (d = 0; d < 3; d++) {
        g(b, "g", d, Math.floor(c * 7));
      }
      for (d = 0; d < 3; d++) {
        g(b, "d", d, Math.floor(c * 2));
      }
      for (d = 0; d < 3; d++) {
        g(b, "a", d, Math.floor(c * 1));
      }
      for (d = 0; d < 3; d++) {
        g(b, "m", d, Math.floor(c * 1));
      }
      g(b, "a", 0, Math.floor(c * 1));
      h(b);
    }
    function o(b, c) {
      for (var d = 0; d < 6; d++) {
        g(b, "t", d, Math.floor(c * 20));
      }
      for (d = 0; d < 4; d++) {
        g(b, "b", d, Math.floor(c * 20));
      }
      for (d = 0; d < 3; d++) {
        g(b, "s", d, Math.floor(c * 20));
      }
      var e = [];
      a(b, e);
      j(b, e);
      e = [];
      g(b, "p", 0, Math.floor(c * 24));
      for (d = 0; d < 3; d++) {
        g(b, "g", d, Math.floor(c * 5));
      }
      if (kx.mode === 2) {
        for (d = 0; d < 3; d++) {
          g(b, "d", d, Math.floor(c * 3));
        }
        for (d = 0; d < 3; d++) {
          g(b, "a", d, Math.floor(c * 2));
        }
      }
      h(b);
    }
    function h(a) {
      var b = kx.Ⲇᐃⵠⵠ[a];
      p(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      p(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      p(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      p(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function q(a, b) {
      (function (b, c) {
        var d = kx.Ⲇᐃⵠⵠ[c];
        for (var e = 0, f = 0; e < b && f < 10000; f++) {
          var i = d.y1 + d.ⲆΔⲆ * kx.ᐃᐃᐃⲆΔ.get();
          var j = d.x1 + kx.ᐃᐃᐃⲆΔ.get() * d.w;
          var k = Math.floor(i / 100);
          var m = Math.floor(j / 100);
          if (kx.ⵠᐃⲆⲆⲆ(c, m * 100 + 50, k * 100 + 50) >= 600) {
            for (var q = 1, t = k - 4; q === 1 && t <= k + 4; t++) {
              for (var v = m - 4; q === 1 && v <= m + 4; v++) {
                if (hx.ⲆⵠΔᐃ[t][v] !== undefined) {
                  q = 0;
                }
              }
            }
            if (q !== 0) {
              p(k, m, "la", e % 6, 0);
              e++;
            }
          }
        }
      })(b * 80, a);
      for (var c = 0; c < 3; c++) {
        g(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        g(a, "g", c, Math.floor(b * 6));
      }
      for (c = 0; c < 3; c++) {
        g(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      for (c = 0; c < 3; c++) {
        g(a, "a", c, Math.max(1, Math.floor(b * 2)));
      }
      h(a);
    }
    function g(c, e, f, i, j) {
      var k = kx.Ⲇᐃⵠⵠ[c];
      var a = Math.floor(k.x1 / 100);
      var n = Math.floor(k.y1 / 100);
      var q = Math.floor(k.w / 100);
      var t = Math.floor(k.ⲆΔⲆ / 100);
      if (j !== undefined) {
        j = 1 - j;
        a += Math.floor(j * q / 2);
        n += Math.floor(j * t / 2);
        q -= Math.floor(q * j);
        t -= Math.floor(j * t);
      }
      var w = hx.ⲆⵠΔᐃ;
      for (var l = 0, x = 0; i > l && x <= 50000; x++) {
        var y = n + Math.floor(t * kx.ᐃᐃᐃⲆΔ.get());
        var z = a + Math.floor(q * kx.ᐃᐃᐃⲆΔ.get());
        if (kx.ⵠᐃⲆⲆⲆ(c, z * 100 + 50, y * 100 + 50) >= 400 && ((A = w[y][z + 1]) === undefined || A[e] === undefined || A[e][f] === undefined) && ((A = w[y][z - 1]) === undefined || A[e] === undefined || A[e][f] === undefined) && ((A = w[y + 1][z]) === undefined || A[e] === Ya || A[e][f] === undefined) && ((A = w[y - 1][z]) === undefined || Tj === A[e] || A[e][f] === undefined) && ((A = w[y + 1][z - 1]) === Co || A[e] === undefined || A[e][f] === ij)) {
          var A = w[y - 1][z + 1];
          if (lg === A || A[e] === Wh || A[e][f] === Tj) {
            if ((A = w[y + 1][z + 1]) === ie || A[e] === ep || ie === A[e][f]) {
              if ((A = w[y - 1][z - 1]) === undefined || A[e] === undefined || Ya === A[e][f]) {
                if (w[y][z] === undefined) {
                  p(y, z, e, f, 1);
                  l++;
                }
              }
            }
          }
        }
      }
    }
    function l(a, b) {
      return a >= 0 && b >= 0 && a < kx.ΔᐃⲆⲆⵠ && b < kx.ᐃⵠᐃⲆⵠ;
    }
    function r(a, b) {
      for (var c = 0; c < 3; c++) {
        g(a, "s", c, Math.floor(b * 18));
      }
      for (c = 0; c < 3; c++) {
        g(a, "f", c, Math.floor(b * 24));
      }
      for (c = 0; c < 3; c++) {
        g(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
      }
      for (c = 0; c < 3; c++) {
        g(a, "g", c, Math.floor(b * 6));
      }
      h(a);
    }
    function d(a, b) {
      for (var c = 0; c < 3; c++) {
        g(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        g(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      g(a, "c", 0, Math.floor(b * 36));
      var d = [];
      (function (b, c) {
        var d = kx.Ⲇᐃⵠⵠ[b];
        var e = Math.floor(d.y1 / 100);
        var f = Math.floor(d.x1 / 100);
        var i = Math.floor(d.ⲆΔⲆ / 100);
        var a = Math.floor(d.w / 100);
        var j = e + Math.floor(i / 2);
        var k = f + Math.floor(a / 2);
        for (var h = 0; h < 3; h++) {
          p(m = Math.floor(j - 3 + kx.ᐃᐃᐃⲆΔ.get() * 6), n = Math.floor(k - 3 + kx.ᐃᐃᐃⲆΔ.get() * 6), "plm", h, 1);
        }
        for (h = 0; h < 80; h++) {
          var m;
          var n;
          if (p(m = Math.floor(j - 3 + kx.ᐃᐃᐃⲆΔ.get() * 6), n = Math.floor(k - 3 + kx.ᐃᐃᐃⲆΔ.get() * 6), "wtb", 0, 1) === 1) {
            c.push([m, n, 0]);
          }
        }
      })(a, d);
      j(a, d);
      d = [];
    }
    function b(a, b, c, d) {
      if (l(a, b) && (ⲆⵠΔᐃ = hx.ⲆⵠΔᐃ, ie === ⲆⵠΔᐃ[a][b] && (ⲆⵠΔᐃ[a][b] = {}), El === ⲆⵠΔᐃ[a][b].r)) {
        var e = 0;
        if (l(a - 1, b) && ⲆⵠΔᐃ[a - 1][b] !== _g && ⲆⵠΔᐃ[a - 1][b].wtb !== undefined) {
          e += 2;
        }
        if (l(a, b - 1) && ⲆⵠΔᐃ[a][b - 1] !== pj && ⲆⵠΔᐃ[a][b - 1].wtb !== undefined) {
          e += 8;
        }
        if (l(a, b + 1) && ⲆⵠΔᐃ[a][b + 1] !== undefined && ⲆⵠΔᐃ[a][b + 1].wtb !== El) {
          e += 16;
        }
        if (l(a + 1, b) && Gs !== ⲆⵠΔᐃ[a + 1][b] && ⲆⵠΔᐃ[a + 1][b].wtb !== lg) {
          e += 64;
        }
        if (l(a - 1, b - 1) && (e & 10) == 10 && ⲆⵠΔᐃ[a - 1][b - 1] !== undefined && ⲆⵠΔᐃ[a - 1][b - 1].wtb !== undefined) {
          e += 1;
        }
        if (l(a - 1, b + 1) && (e & 18) === 18 && ⲆⵠΔᐃ[a - 1][b + 1] !== undefined && ⲆⵠΔᐃ[a - 1][b + 1].wtb !== undefined) {
          e += 4;
        }
        if (l(a + 1, b - 1) && (e & 72) == 72 && ⲆⵠΔᐃ[a + 1][b - 1] !== ij && ⲆⵠΔᐃ[a + 1][b - 1].wtb !== undefined) {
          e += 32;
        }
        if (l(a + 1, b + 1) && (e & 80) == 80 && ⲆⵠΔᐃ[a + 1][b + 1] !== undefined && ag !== ⲆⵠΔᐃ[a + 1][b + 1].wtb) {
          e += 128;
        }
        ⲆⵠΔᐃ[a][b].r = {};
        ⲆⵠΔᐃ[a][b].r.ᐃΔⲆΔᐃᐃᐃ = e;
        ⲆⵠΔᐃ[a][b].r.ΔⲆᐃⲆᐃⲆⲆ = d;
        ⲆⵠΔᐃ[a][b].r.ⵠΔⲆⲆ = kx.ⵠᐃⲆⲆⲆ(c, b * 100 + 50, a * 100 + 50) - 400;
        ⲆⵠΔᐃ[a][b].r.x = b * 100 + 50;
        ⲆⵠΔᐃ[a][b].r.y = a * 100 + 50;
      }
    }
    function m(a) {
      for (var b = 0; b < 3; b++) {
        g(a, "s", b, 15);
      }
      for (b = 0; b < 3; b++) {
        g(a, "a", b, 1);
      }
      for (b = 0; b < 3; b++) {
        g(a, "d", b, 1);
      }
      h(a);
    }
    function p(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && a < kx.ΔᐃⲆⲆⵠ && b < kx.ᐃⵠᐃⲆⵠ) {
        ⲆⵠΔᐃ = hx.ⲆⵠΔᐃ;
        if (ⲆⵠΔᐃ[a][b] === undefined) {
          ⲆⵠΔᐃ[a][b] = {};
        }
        if (ⲆⵠΔᐃ[a][b][c] !== undefined) {
          return 0;
        } else {
          ⲆⵠΔᐃ[a][b][c] = [];
          ⲆⵠΔᐃ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === 1) {
            (function (a, b, c, d) {
              Qb.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function s(a, b, c) {
      if (a[b]) {
        for (aq = 0; aq < a[b].length; aq++) {
          if (a[b][aq]) {
            for (ⵠⲆΔΔ = 0; a[b][aq].length > ⵠⲆΔΔ; ⵠⲆΔΔ++) {
              a[b][aq][ⵠⲆΔΔ].ⵠᐃΔ = c;
              a[b][aq][ⵠⲆΔΔ].ΔⵠΔ = false;
              a[b][aq][ⵠⲆΔΔ].time = 0;
              a[b][aq][ⵠⲆΔΔ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ⵠⲆΔΔᐃᐃⵠ = c;
    this.ᐃᐃᐃΔⲆ = 0;
    this.ⲆⲆΔΔⲆⲆᐃ = 6;
    this.ⲆⲆⵠⵠ = [];
    this.ⵠⵠΔ = [];
    this.ⵠⵠΔ[0] = [];
    this.ⵠⵠΔ[100] = [];
    this.ⵠⵠΔ[80] = [];
    this.ⵠⵠΔ[60] = [];
    this.ⵠⵠΔ[67] = [];
    this.ⵠⵠΔ[70] = [];
    this.ⵠⵠΔ[77] = [];
    this.ⵠⵠΔ[71] = [];
    this.ⵠⵠΔ[72] = [];
    this.ⵠⵠΔ[73] = [];
    this.ⵠⵠΔ[74] = [];
    this.ⵠⵠΔ[65] = [];
    this.ⵠⵠΔ[66] = [];
    this.ⵠⵠΔ[62] = [];
    this.ⵠⵠΔ[88] = [];
    this.ⵠⵠΔ[91] = [];
    this.ⵠⵠΔ[90] = [];
    this.ⵠⵠΔ[63] = [];
    this.ⵠⵠΔ[78] = [];
    this.ⵠⵠΔ[64] = [];
    this.ⵠⵠΔ[69] = [];
    this.ⵠⵠΔ[68] = [];
    this.ⵠⵠΔ[79] = [];
    this.ⵠⵠΔ[89] = [];
    this.ⵠⵠΔ[83] = [];
    this.ⵠⵠΔ[84] = [];
    this.ⵠⵠΔ[85] = [];
    this.ⵠⵠΔ[81] = [];
    this.ⵠⵠΔ[82] = [];
    this.ⵠⵠΔ[86] = [];
    this.ⵠⵠΔ[34] = [];
    this.ⵠⵠΔ[36] = [];
    this.ⵠⵠΔ[61] = [];
    this.ⵠⵠΔ[2] = [];
    this.ⵠⵠΔ[1] = [];
    this.ⵠⵠΔ[6] = [];
    this.ⵠⵠΔ[3] = [];
    this.ⵠⵠΔ[5] = [];
    this.ⵠⵠΔ[12] = [];
    this.ⵠⵠΔ[13] = [];
    this.ⵠⵠΔ[14] = [];
    this.ⵠⵠΔ[20] = [];
    this.ⵠⵠΔ[52] = [];
    this.ⵠⵠΔ[4] = [];
    this.ⵠⵠΔ[7] = [];
    this.ⵠⵠΔ[8] = [];
    this.ⵠⵠΔ[9] = [];
    this.ⵠⵠΔ[19] = [];
    this.ⵠⵠΔ[50] = [];
    this.ⵠⵠΔ[41] = [];
    this.ⵠⵠΔ[10] = [];
    this.ⵠⵠΔ[15] = [];
    this.ⵠⵠΔ[16] = [];
    this.ⵠⵠΔ[17] = [];
    this.ⵠⵠΔ[21] = [];
    this.ⵠⵠΔ[51] = [];
    this.ⵠⵠΔ[45] = [];
    this.ⵠⵠΔ[46] = [];
    this.ⵠⵠΔ[47] = [];
    this.ⵠⵠΔ[48] = [];
    this.ⵠⵠΔ[49] = [];
    this.ⵠⵠΔ[53] = [];
    this.ⵠⵠΔ[18] = [];
    this.ⵠⵠΔ[29] = [];
    this.ⵠⵠΔ[56] = [];
    this.ⵠⵠΔ[11] = [];
    this.ⵠⵠΔ[22] = [];
    this.ⵠⵠΔ[23] = [];
    this.ⵠⵠΔ[30] = [];
    this.ⵠⵠΔ[38] = [];
    this.ⵠⵠΔ[33] = [];
    this.ⵠⵠΔ[31] = [];
    this.ⵠⵠΔ[55] = [];
    this.ⵠⵠΔ[37] = [];
    this.ⵠⵠΔ[43] = [];
    this.ⵠⵠΔ[44] = [];
    this.ⵠⵠΔ[54] = [];
    this.ⵠⵠΔ[39] = [];
    this.ⵠⵠΔ[40] = [];
    this.ⵠⵠΔ[32] = [];
    this.ⵠⵠΔ[24] = [];
    this.ⵠⵠΔ[25] = [];
    this.ⵠⵠΔ[26] = [];
    this.ⵠⵠΔ[27] = [];
    this.ⵠⵠΔ[28] = [];
    this.ⵠⵠΔ[35] = [];
    this.ⵠⵠΔ[87] = [];
    this.ⵠⵠΔ[42] = [];
    this.ⲆᐃΔΔᐃ = [];
    this.ᐃⵠᐃⲆⵠ = 260;
    this.ΔᐃⲆⲆⵠ = 260;
    this.ⲆᐃᐃⲆⲆΔⵠ = 100;
    this.ᐃᐃΔΔᐃΔΔ = 100;
    this.w = this.ⲆᐃᐃⲆⲆΔⵠ * this.ᐃⵠᐃⲆⵠ;
    this.ⲆΔⲆ = this.ᐃᐃΔΔᐃΔΔ * this.ΔᐃⲆⲆⵠ;
    this.ᐃᐃᐃⲆΔ = new Wk.ⵠⵠᐃⵠⲆⵠᐃ();
    this.Ⲇᐃⵠⵠ = [];
    this.ΔΔⲆⵠ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 1, 0, 1, 1);
    this.transition = hj;
    this.Δⵠᐃᐃⵠ = [];
    this.ΔΔᐃⵠⵠ = 0;
    this.ᐃⲆⲆᐃⲆⵠⲆ = 1;
    this.ᐃᐃⵠΔᐃΔⵠ = 2;
    this.ΔⲆᐃⵠⵠᐃⵠ = 3;
    this.ᐃⲆⲆΔⲆ = 4;
    this.ⲆⵠᐃⵠΔⲆⲆ = 10;
    this.Δⵠᐃᐃⵠ[this.ΔΔᐃⵠⵠ] = {
      Ⲇᐃⵠⵠᐃⵠᐃ: 1,
      ΔΔᐃ: [19, 58, 43],
      ⲆⲆΔ: [4, 43, 48],
      ⲆⲆΔᐃⲆ: ["#133a2b", "#042b30"]
    };
    this.Δⵠᐃᐃⵠ[this.ᐃⲆⲆΔⲆ] = {
      Ⲇᐃⵠⵠᐃⵠᐃ: 0,
      ΔΔᐃ: [11, 106, 132],
      ⲆⲆΔ: [9, 55, 63],
      ⲆⲆΔᐃⲆ: ["#0B6A84", "#09373F"]
    };
    this.Δⵠᐃᐃⵠ[this.ᐃⲆⲆᐃⲆⵠⲆ] = {
      Ⲇᐃⵠⵠᐃⵠᐃ: 0,
      ΔΔᐃ: [235, 242, 240],
      ⲆⲆΔ: [19, 97, 103],
      ⲆⲆΔᐃⲆ: ["#EBF2F0", "#136167"]
    };
    this.Δⵠᐃᐃⵠ[this.ᐃᐃⵠΔᐃΔⵠ] = {
      ΔΔᐃ: [45, 32, 23],
      ⲆⲆΔ: [3, 28, 30],
      Ⲇᐃⵠⵠᐃⵠᐃ: 0,
      ⲆⲆΔᐃⲆ: ["#2D2017", "#031C1E"]
    };
    this.Δⵠᐃᐃⵠ[this.ΔⲆᐃⵠⵠᐃⵠ] = {
      ⲆⲆΔ: [24, 61, 60],
      ΔΔᐃ: [74, 74, 74],
      ⲆⲆΔᐃⲆ: ["#4A4A4A", "#183D3C"],
      Ⲇᐃⵠⵠᐃⵠᐃ: 0
    };
    this.Δⵠᐃᐃⵠ[this.ⲆⵠᐃⵠΔⲆⲆ] = {
      ⲆⲆΔ: [9, 61, 56],
      ⲆⲆΔᐃⲆ: ["#EBD8A6", "#093D38"],
      ΔΔᐃ: [235, 216, 166],
      Ⲇᐃⵠⵠᐃⵠᐃ: 0
    };
    this.ᐃᐃⵠᐃᐃΔΔ = function (b, c, d, e, f, g) {
      this.x1 = c * 100;
      this.y1 = d * 100;
      this.w = e * 100;
      this.ⲆΔⲆ = f * 100;
      this.x2 = (c + e) * 100;
      this.y2 = (d + f) * 100;
      this.ⵠⲆΔ = b;
      this.ΔⵠⲆ = Yj === g ? 15 : g;
    };
    this.ⵠΔⵠⵠᐃ = -1000000;
    this.ᐃΔᐃᐃⵠ = this.ⵠΔⵠⵠᐃ;
    this.ⲆⵠⲆΔΔ = this.ⵠΔⵠⵠᐃ;
    this.ᐃΔⵠⵠⲆ = this.ⵠΔⵠⵠᐃ;
    this.ⲆᐃⵠΔᐃⲆⲆ = this.ⵠΔⵠⵠᐃ;
    this.ⲆⲆᐃⲆΔⲆΔ = this.ⵠΔⵠⵠᐃ;
    this.ⵠᐃΔᐃⵠ = this.ⵠΔⵠⵠᐃ;
    this.ⲆᐃⲆⲆⲆⲆⵠⵠΔ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / 100);
      b.ᐃΔᐃᐃⵠ = kx.ⵠΔⵠⵠᐃ;
      b.ⲆⵠⲆΔΔ = kx.ⵠΔⵠⵠᐃ;
      b.ᐃΔⵠⵠⲆ = kx.ⵠΔⵠⵠᐃ;
      b.ⲆᐃⵠΔᐃⲆⲆ = kx.ⵠΔⵠⵠᐃ;
      b.ⵠᐃΔᐃⵠ = kx.ⵠΔⵠⵠᐃ;
      b.ᐃᐃΔⲆᐃᐃⲆ = kx.ⵠΔⵠⵠᐃ;
      for (var g = 0; kx.Ⲇᐃⵠⵠ[g].ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ; g++) {
        if (kx.Ⲇᐃⵠⵠ[g].ⵠⲆΔ === kx.ΔΔᐃⵠⵠ) {
          var h = kx.ⵠᐃⲆⲆⲆ(g, c, d);
          b.ⲆᐃⵠΔᐃⲆⲆ = Math.max(b.ⲆᐃⵠΔᐃⲆⲆ, h);
          if (h > 0 && kx.ⵠⵠⵠⵠⲆᐃΔᐃⲆ(g, c, d) === 1) {
            b.ᐃᐃΔⲆᐃᐃⲆ = 1;
          }
        } else if (kx.ᐃⲆⲆᐃⲆⵠⲆ === kx.Ⲇᐃⵠⵠ[g].ⵠⲆΔ) {
          b.ᐃΔᐃᐃⵠ = Math.max(b.ᐃΔᐃᐃⵠ, kx.ⵠᐃⲆⲆⲆ(g, c, d));
        } else if (kx.Ⲇᐃⵠⵠ[g].ⵠⲆΔ === kx.ⲆⵠᐃⵠΔⲆⲆ) {
          b.ⲆⵠⲆΔΔ = Math.max(b.ⲆⵠⲆΔΔ, kx.ⵠᐃⲆⲆⲆ(g, c, d));
        } else if (kx.Ⲇᐃⵠⵠ[g].ⵠⲆΔ === kx.ᐃᐃⵠΔᐃΔⵠ) {
          b.ᐃΔⵠⵠⲆ = Math.max(b.ᐃΔⵠⵠⲆ, kx.ⵠᐃⲆⲆⲆ(g, c, d));
        } else if (kx.Ⲇᐃⵠⵠ[g].ⵠⲆΔ === kx.ΔⲆᐃⵠⵠᐃⵠ) {
          b.ⵠᐃΔᐃⵠ = Math.max(b.ⵠᐃΔᐃⵠ, kx.ⵠᐃⲆⲆⲆ(g, c, d));
        }
      }
      if (hx.ⲆⵠΔᐃ[e][f].iblk) {
        b.ᐃᐃΔⲆᐃᐃⲆ = 1;
      }
      if (kx.ⲆⵠⲆⲆΔᐃⲆᐃΔ(f, e)) {
        b.ⲆⲆᐃⲆΔⲆΔ = b.ⵠΔⵠⵠᐃ;
      } else if (hx.ⲆⵠΔᐃ[e][f].wtb || b.ᐃΔᐃᐃⵠ < 0 && b.ᐃΔⵠⵠⲆ < 0 && b.ⲆᐃⵠΔᐃⲆⲆ < 0 && b.ᐃᐃΔⲆᐃᐃⲆ < 0 && b.ⵠᐃΔᐃⵠ < 0 && b.ⲆⵠⲆΔΔ < 0) {
        b.ⲆⲆᐃⲆΔⲆΔ = 1;
      } else {
        b.ⲆⲆᐃⲆΔⲆΔ = b.ⵠΔⵠⵠᐃ;
      }
    };
    this.ⵠⲆΔᐃᐃⲆᐃⵠΔ = function (a, b) {
      kx.ᐃΔᐃᐃⵠ = kx.ⵠΔⵠⵠᐃ;
      kx.ⲆⵠⲆΔΔ = kx.ⵠΔⵠⵠᐃ;
      kx.ᐃΔⵠⵠⲆ = kx.ⵠΔⵠⵠᐃ;
      kx.ⵠᐃΔᐃⵠ = kx.ⵠΔⵠⵠᐃ;
      kx.ⲆᐃⵠΔᐃⲆⲆ = kx.ⵠΔⵠⵠᐃ;
      for (var c = 0; kx.Ⲇᐃⵠⵠ[c].ⵠⲆΔ !== kx.ᐃⲆⲆΔⲆ; c++) {
        if (kx.ΔΔᐃⵠⵠ === kx.Ⲇᐃⵠⵠ[c].ⵠⲆΔ) {
          kx.ⲆᐃⵠΔᐃⲆⲆ = Math.max(kx.ⲆᐃⵠΔᐃⲆⲆ, kx.ⵠᐃⲆⲆⲆ(c, a, b));
        } else if (kx.Ⲇᐃⵠⵠ[c].ⵠⲆΔ === kx.ᐃⲆⲆᐃⲆⵠⲆ) {
          kx.ᐃΔᐃᐃⵠ = Math.max(kx.ᐃΔᐃᐃⵠ, kx.ⵠᐃⲆⲆⲆ(c, a, b));
        } else if (kx.Ⲇᐃⵠⵠ[c].ⵠⲆΔ === kx.ⲆⵠᐃⵠΔⲆⲆ) {
          kx.ⲆⵠⲆΔΔ = Math.max(kx.ⲆⵠⲆΔΔ, kx.ⵠᐃⲆⲆⲆ(c, a, b));
        } else if (kx.ᐃᐃⵠΔᐃΔⵠ === kx.Ⲇᐃⵠⵠ[c].ⵠⲆΔ) {
          kx.ᐃΔⵠⵠⲆ = Math.max(kx.ᐃΔⵠⵠⲆ, kx.ⵠᐃⲆⲆⲆ(c, a, b));
        } else if (kx.Ⲇᐃⵠⵠ[c].ⵠⲆΔ === kx.ΔⲆᐃⵠⵠᐃⵠ) {
          kx.ⵠᐃΔᐃⵠ = Math.max(kx.ⵠᐃΔᐃⵠ, kx.ⵠᐃⲆⲆⲆ(c, a, b));
        }
      }
      if (kx.ᐃΔᐃᐃⵠ < 0 && kx.ⵠᐃΔᐃⵠ < 0 && kx.ⲆᐃⵠΔᐃⲆⲆ < 0 && kx.ⵠᐃΔᐃⵠ < 0 && kx.ⲆⵠⲆΔΔ < 0) {
        kx.ⲆⲆᐃⲆΔⲆΔ = 1;
      } else {
        kx.ⲆⲆᐃⲆΔⲆΔ = kx.ⵠΔⵠⵠᐃ;
      }
    };
    this.ⵠⵠⵠⵠⲆᐃΔᐃⲆ = function (b, c, d) {
      var e = kx.Ⲇᐃⵠⵠ[b];
      var f = 0;
      ⲆⲆᐃΔ = e.x1 + 30 + ((e.ΔⵠⲆ & 4) === 0 ? 150 : 0);
      var g = c - ⲆⲆᐃΔ;
      if ((e.ΔⵠⲆ & 4) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ᐃⲆᐃⵠ = e.y1 + 250 + (e.ΔⵠⲆ & 1 ? 0 : 150);
      g = d - ᐃⲆᐃⵠ;
      if ((e.ΔⵠⲆ & 1) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ΔΔⵠⲆ = e.x2 + 80 + ((e.ΔⵠⲆ & 8) === 0 ? -200 : 0);
      g = ΔΔⵠⲆ - c;
      if ((e.ΔⵠⲆ & 8) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆΔⵠⲆ = e.y2 - 200 + (e.ΔⵠⲆ & 2 ? 0 : -200);
      g = ⲆΔⵠⲆ - d;
      if ((e.ΔⵠⲆ & 2) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      if (c >= ⲆⲆᐃΔ && ΔΔⵠⲆ >= c && d >= ᐃⲆᐃⵠ && d <= ⲆΔⵠⲆ) {
        return f;
      } else {
        return 0;
      }
    };
    this.ⵠᐃⲆⲆⲆ = function (a, b, c) {
      var d = kx.Ⲇᐃⵠⵠ[a];
      ⲆⲆᐃΔ = d.x1 + 30;
      ᐃⲆᐃⵠ = d.y1 + 250;
      ΔΔⵠⲆ = d.x2 + 80;
      ⲆΔⵠⲆ = d.y2 - 200;
      if (ⲆⲆᐃΔ <= b && ΔΔⵠⲆ >= b && c >= ᐃⲆᐃⵠ && c <= ⲆΔⵠⲆ) {
        return Math.min(b - ⲆⲆᐃΔ, ΔΔⵠⲆ - b, c - ᐃⲆᐃⵠ, ⲆΔⵠⲆ - c);
      }
      var e = -1000000;
      if (b - ⲆⲆᐃΔ < 0) {
        e = Math.max(e, b - ⲆⲆᐃΔ);
      } else if (ΔΔⵠⲆ - b < 0) {
        e = Math.max(e, ΔΔⵠⲆ - b);
      }
      ΔᐃᐃΔⵠⲆⵠ = -1000000;
      if (c < ᐃⲆᐃⵠ || ⲆΔⵠⲆ < c) {
        if (c - ᐃⲆᐃⵠ < 0) {
          ΔᐃᐃΔⵠⲆⵠ = Math.max(ΔᐃᐃΔⵠⲆⵠ, c - ᐃⲆᐃⵠ);
        } else {
          ΔᐃᐃΔⵠⲆⵠ = Math.max(ΔᐃᐃΔⵠⲆⵠ, ⲆΔⵠⲆ - c);
        }
        e = e !== -1000000 && ΔᐃᐃΔⵠⲆⵠ !== -1000000 ? Math.min(e, ΔᐃᐃΔⵠⲆⵠ) : ΔᐃᐃΔⵠⲆⵠ;
      }
      return e;
    };
    this.ⲆⲆⲆᐃⵠⲆᐃ = function (b, c, d) {
      var e = d;
      var f = c;
      p(e, f, "isl", b, 1);
      for (var g = 0; g < 4; g++) {
        for (var h = 0; h < 3; h++) {
          p(e - h, f - g, "iblk", 0);
          p(e + h, f - g, "iblk", 0);
          p(e + h, f + g, "iblk", 0);
          p(e - h, f + g, "iblk", 0);
        }
      }
      if (b === 0) {
        for (g = 0; g < 2; g++) {
          p(e - g, f - 4, "iblk", 0);
          p(e + g, f - 4, "iblk", 0);
          p(e - g, f + 4, "iblk", 0);
          p(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          p(e - 3, f + g, "iblk", 0);
          p(e + 3, f + g, "iblk", 0);
          p(e - 3, f - g, "iblk", 0);
          p(e + 3, f - g, "iblk", 0);
        }
        p(e - 2, f - 4, "iblk", 0);
        p(e - 3, f - 3, "iblk", 0);
        p(e + 2, f + 4, "iblk", 0);
        p(e + 3, f + 3, "iblk", 0);
      } else if (b === 1) {
        for (g = 0; g < 3; g++) {
          p(e - g, f - 4, "iblk", 0);
          p(e + g, f - 4, "iblk", 0);
          p(e - g, f + 4, "iblk", 0);
          p(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 4; g++) {
          p(e - 3, f + g, "iblk", 0);
          p(e + 3, f + g, "iblk", 0);
          p(e - 3, f - g, "iblk", 0);
          p(e + 3, f - g, "iblk", 0);
        }
      } else if (b === 2) {
        for (g = 0; g < 2; g++) {
          p(e - g, f - 4, "iblk", 0);
          p(e + g, f - 4, "iblk", 0);
          p(e - g, f + 4, "iblk", 0);
          p(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          p(e - 3, f + g, "iblk", 0);
          p(e + 3, f + g, "iblk", 0);
          p(e - 3, f - g, "iblk", 0);
          p(e + 3, f - g, "iblk", 0);
        }
      }
    };
    this.ΔⵠᐃᐃᐃΔᐃᐃΔ = function (b) {
      for (var c = 0; c < kx.Ⲇᐃⵠⵠ.length && b > 0; c++) {
        var d = kx.Ⲇᐃⵠⵠ[c];
        if (d.ⵠⲆΔ === kx.ᐃⲆⲆΔⲆ && d.w > 1800 && d.ⲆΔⲆ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / 100);
          var g = Math.floor((d.y1 + d.ⲆΔⲆ / 2) / 100);
          kx.ⲆⲆⲆᐃⵠⲆᐃ(b % 3, f, g);
          for (var h = 0; h < 3; h++) {
            var j = g - 2 + Math.floor(kx.ᐃᐃᐃⲆΔ.get() * 4);
            var k = f - 3 + Math.floor(kx.ᐃᐃᐃⲆΔ.get() * 6);
            if (hx.ⲆⵠΔᐃ[j][k].s === undefined) {
              p(j, k, "plm", h);
            }
            j = g - 2 + Math.floor(kx.ᐃᐃᐃⲆΔ.get() * 4);
            k = f - 3 + Math.floor(kx.ᐃᐃᐃⲆΔ.get() * 6);
            if (hx.ⲆⵠΔᐃ[j][k].plm === Gs) {
              p(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(kx.ᐃᐃᐃⲆΔ.get() * 4);
          k = f - 3 + Math.floor(kx.ᐃᐃᐃⲆΔ.get() * 6);
          if (hx.ⲆⵠΔᐃ[j][k].plm === undefined && ep === hx.ⲆⵠΔᐃ[j][k].s) {
            p(j, k, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ⵠⵠⲆΔΔΔⵠΔᐃ = function (c) {
      kx.ᐃᐃᐃⲆΔ.ᐃⵠⵠΔᐃ(c);
      var h = 0;
      while (true) {
        if (++h > 10000) {
          return;
        }
        kx.Ⲇᐃⵠⵠ = [];
        if (kx.ᐃᐃᐃΔⲆ === 0 && (kx.mode === 3 || kx.mode === 7 || kx.mode === 0)) {
          kx.ᐃᐃᐃΔⲆ = qs;
        }
        if (kx.mode === 2) {
          kx.Ⲇᐃⵠⵠ.push(new kx.ᐃᐃⵠᐃᐃΔΔ(kx.ΔΔᐃⵠⵠ, 2, 2, 80, 80, 15));
        } else if (kx.mode === 4) {
          kx.Ⲇᐃⵠⵠ.push(new kx.ᐃᐃⵠᐃᐃΔΔ(kx.ΔΔᐃⵠⵠ, 2, 2, 150, 150, 15));
        } else if (kx.ᐃᐃᐃΔⲆ !== 0 && kx.ᐃᐃᐃΔⲆ.length > 0 && kx.ᐃᐃᐃΔⲆ[0].length > 3) {
          for (var k = 0; kx.ᐃᐃᐃΔⲆ.length > k; k++) {
            if ((E = kx.ᐃᐃᐃΔⲆ[k])[0] !== 0) {
              break;
            }
            var l = Cf.ΔΔᐃⵠⵠ;
            switch (E[1]) {
              case "FOREST":
                l = kx.ΔΔᐃⵠⵠ;
                break;
              case "WINTER":
                l = kx.ᐃⲆⲆᐃⲆⵠⲆ;
                break;
              case "DESERT":
                l = kx.ⲆⵠᐃⵠΔⲆⲆ;
                break;
              case "LAVA":
                l = kx.ᐃᐃⵠΔᐃΔⵠ;
                break;
              case "DRAGON":
                l = kx.ΔⲆᐃⵠⵠᐃⵠ;
            }
            kx.Ⲇᐃⵠⵠ.push(new kx.ᐃᐃⵠᐃᐃΔΔ(l, E[2], E[3], E[4], E[5], E[6], E[7]));
          }
        } else if (kx.ᐃᐃᐃΔⲆ !== 0) {
          for (k = 0; kx.ᐃᐃᐃΔⲆ.length > k; k++) {
            var s = kx.ᐃᐃᐃΔⲆ[k];
            l = Cf.ΔΔᐃⵠⵠ;
            switch (s[0]) {
              case "FOREST":
                l = kx.ΔΔᐃⵠⵠ;
                break;
              case "WINTER":
                l = kx.ᐃⲆⲆᐃⲆⵠⲆ;
                break;
              case "DESERT":
                l = kx.ⲆⵠᐃⵠΔⲆⲆ;
                break;
              case "LAVA":
                l = kx.ᐃᐃⵠΔᐃΔⵠ;
                break;
              case "DRAGON":
                l = kx.ΔⲆᐃⵠⵠᐃⵠ;
            }
            if (e(l, s[1], s[2], 0, (k + 1) * 10) === 0) {
              break;
            }
          }
          if (kx.ᐃᐃᐃΔⲆ.length !== k) {
            continue;
          }
        }
        break;
      }
      ⵠΔᐃᐃⲆⲆⲆⵠⵠ();
      var t = [];
      for (var u = 0; kx.ΔᐃⲆⲆⵠ > u; u++) {
        t[u] = new Array(kx.ᐃⵠᐃⲆⵠ);
        for (var x = 0; x < kx.ᐃⵠᐃⲆⵠ; x++) {
          t[u][x] = 0;
        }
      }
      for (u = 0; kx.Ⲇᐃⵠⵠ.length > u; u++) {
        for (var z = (s = kx.Ⲇᐃⵠⵠ[u]).x2 / 100, A = s.y2 / 100, B = s.x1 / 100; B <= z; B++) {
          for (var D = s.y1 / 100; A >= D; D++) {
            t[D][B] = 1;
          }
        }
      }
      for (D = 0; kx.ΔᐃⲆⲆⵠ > D; D++) {
        for (B = 0; kx.ᐃⵠᐃⲆⵠ > B; B++) {
          if (t[D][B] === 0) {
            i(t, B, D);
          }
        }
      }
      hx = {
        w: kx.ᐃⵠᐃⲆⵠ,
        ⲆΔⲆ: kx.ΔᐃⲆⲆⵠ,
        ⲆⵠΔᐃ: []
      };
      for (u = 0; kx.ΔᐃⲆⲆⵠ > u; u++) {
        hx.ⲆⵠΔᐃ[u] = [];
      }
      if (kx.ᐃᐃᐃΔⲆ !== 0 && kx.ᐃᐃᐃΔⲆ.length > 0 && kx.ᐃᐃᐃΔⲆ[0].length > 3) {
        for (k = 0; kx.ᐃᐃᐃΔⲆ.length > k; k++) {
          var E = kx.ᐃᐃᐃΔⲆ[k];
          if (E[1] === "isl") {
            kx.ⲆⲆⲆᐃⵠⲆᐃ(E[2], E[3], E[4]);
          }
        }
      } else {
        kx.ΔⵠᐃᐃᐃΔᐃᐃΔ(kx.ⲆⲆΔΔⲆⲆᐃ);
      }
      if (kx.ᐃᐃᐃΔⲆ !== 0 && kx.ᐃᐃᐃΔⲆ.length > 0 && kx.ᐃᐃᐃΔⲆ[0].length > 3) {
        var F = [];
        for (k = 0; k < kx.ᐃᐃᐃΔⲆ.length; k++) {
          if ((E = kx.ᐃᐃᐃΔⲆ[k])[0] === 1) {
            if (E[1] === "r") {
              p(E[3], E[2], "wtb", 0, 1);
              F.push([E[3], E[2], E[4]]);
            } else {
              p(E[4], E[3], E[1], E[2], E[5]);
            }
          }
        }
        j(0, F);
        F = [];
      } else {
        for (u = 0; kx.Ⲇᐃⵠⵠ.length > u; u++) {
          s = kx.Ⲇᐃⵠⵠ[u];
          if (kx.mode === 4) {
            if (s.ⵠⲆΔ === kx.ΔΔᐃⵠⵠ) {
              n(u, s.w / 10000);
            }
          } else {
            if (kx.ΔΔᐃⵠⵠ === s.ⵠⲆΔ) {
              o(u, s.w / 10000);
            }
            if (kx.ᐃᐃⵠΔᐃΔⵠ === s.ⵠⲆΔ) {
              q(u, s.w / 10000);
            }
            if (kx.ᐃⲆⲆᐃⲆⵠⲆ === s.ⵠⲆΔ) {
              r(u, s.w / 10000);
            }
            if (s.ⵠⲆΔ === kx.ⲆⵠᐃⵠΔⲆⲆ) {
              d(u, s.w / 10000);
            }
            if (s.ⵠⲆΔ === kx.ΔⲆᐃⵠⵠᐃⵠ) {
              m(u);
            }
          }
        }
      }
      Ft("isl", 1);
      Ft("wtb", 20);
      Ft("la", 1);
      Ft("c", 1);
      Ft("s", 1);
      Ft("f", 1);
      Ft("p", 1);
      Ft("g", 1);
      Ft("d", 1);
      Ft("a", 1);
      Ft("re", 1);
      Ft("m", 1);
      Qb = [];
      kx.ⵠⲆⲆᐃⲆᐃΔⲆΔ(hx);
    };
    this.ᐃⲆⲆⵠ = p;
    this.ⵠⲆⲆᐃⲆᐃΔⲆΔ = function (b) {
      for (var c = 0; c < this.ΔᐃⲆⲆⵠ; c++) {
        for (var d = 0; this.ᐃⵠᐃⲆⵠ > d; d++) {
          if (!b.ⲆⵠΔᐃ[c]) {
            b.ⲆⵠΔᐃ[c] = [];
          }
          if (b.ⲆⵠΔᐃ[c][d]) {
            var e = b.ⲆⵠΔᐃ[c][d];
            if (e.de && e.de.length > 0) {
              for (var f = 0; f < e.de.length; f++) {
                if (e.de[f] && e.de[f].length > 0) {
                  e.de = e.de[f][0];
                  if (f >= 41 && f <= 49) {
                    e.de.scale = 3;
                    var g = Math.floor(Math.random() * 3 + 1);
                    e.de.ⵠΔⲆ = [];
                    for (var h = 0; h < g; h++) {
                      e.de.ⵠΔⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ⲆⵠΔⲆⲆ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (f >= 19 && f <= 26) {
                    e.de.scale = 3;
                    g = Math.floor(Math.random() * 3 + 1);
                    e.de.ⵠΔⲆ = [];
                    for (h = 0; g > h; h++) {
                      e.de.ⵠΔⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ⲆⵠΔⲆⲆ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (f <= 15 || f >= 27 && f <= 40) {
                    e.de.angle = 0;
                    e.de.scale = 2;
                    e.de.ⲆⵠΔⲆⲆ = f;
                  } else {
                    e.de.angle = Math.PI * Math.random() * 2;
                    e.de.scale = 1;
                    e.de.ⲆⵠΔⲆⲆ = f;
                  }
                }
              }
            }
            s(e, "p", new ΔΔⲆ.ΔᐃᐃΔ(ln, 1, 1, 0, 10, 10));
            s(e, "t", new ΔΔⲆ.ΔᐃᐃΔ(ln, 1, 1, 0, 10, 10));
            s(e, "s", new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10));
            s(e, "g", new ΔΔⲆ.ΔᐃᐃΔ(vl, 1, 1, 0, 10, 10));
            s(e, "d", new ΔΔⲆ.ΔᐃᐃΔ(ig, 1, 1, 0, 10, 10));
            s(e, "b", new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10));
            s(e, "f", new ΔΔⲆ.ΔᐃᐃΔ(xq, 1, 1, 0, 10, 10));
            s(e, "sw", new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10));
            s(e, "gw", new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10));
            s(e, "dw", new ΔΔⲆ.ΔᐃᐃΔ(hj, 1, 1, 0, 10, 10));
            s(e, "a", new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10));
            s(e, "cs", new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10));
            s(e, "plm", new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10));
            s(e, "re", new ΔΔⲆ.ΔᐃᐃΔ(ig, 1, 1, 0, 10, 10));
            s(e, "c", new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10));
            s(e, "m", new ΔΔⲆ.ΔᐃᐃΔ(F, 1, 1, 0, 10, 10));
          } else {
            b.ⲆⵠΔᐃ[c][d] = [];
          }
        }
      }
    };
    this.time = ts.ⵠⵠⵠ;
    this.ⲆⲆΔΔⲆ = {
      translate: {
        x: 0,
        y: 0
      },
      ᐃⵠⵠᐃΔ: 0,
      ᐃⵠⵠΔᐃ: 0,
      now: 0
    };
    this.ᐃⲆⵠᐃⲆΔΔⲆⵠ = function () {
      this.ⲆᐃΔΔᐃ = [];
      this.ⵠⵠΔ[0] = [];
      this.ⵠⵠΔ[2] = [];
      this.ⵠⵠΔ[1] = [];
      this.ⵠⵠΔ[6] = [];
      this.ⵠⵠΔ[3] = [];
      this.ⵠⵠΔ[5] = [];
      this.ⵠⵠΔ[12] = [];
      this.ⵠⵠΔ[13] = [];
      this.ⵠⵠΔ[14] = [];
      this.ⵠⵠΔ[20] = [];
      this.ⵠⵠΔ[52] = [];
      this.ⵠⵠΔ[30] = [];
      this.ⵠⵠΔ[56] = [];
      this.ⵠⵠΔ[38] = [];
      this.ⵠⵠΔ[33] = [];
      this.ⵠⵠΔ[31] = [];
      this.ⵠⵠΔ[55] = [];
      this.ⵠⵠΔ[37] = [];
      this.ⵠⵠΔ[43] = [];
      this.ⵠⵠΔ[44] = [];
      this.ⵠⵠΔ[54] = [];
      this.ⵠⵠΔ[39] = [];
      this.ⵠⵠΔ[40] = [];
      this.ⵠⵠΔ[32] = [];
      this.ⵠⵠΔ[24] = [];
      this.ⵠⵠΔ[25] = [];
      this.ⵠⵠΔ[26] = [];
      this.ⵠⵠΔ[27] = [];
      this.ⵠⵠΔ[28] = [];
      this.ⵠⵠΔ[35] = [];
      this.ⵠⵠΔ[4] = [];
      this.ⵠⵠΔ[7] = [];
      this.ⵠⵠΔ[8] = [];
      this.ⵠⵠΔ[9] = [];
      this.ⵠⵠΔ[19] = [];
      this.ⵠⵠΔ[50] = [];
      this.ⵠⵠΔ[41] = [];
      this.ⵠⵠΔ[10] = [];
      this.ⵠⵠΔ[15] = [];
      this.ⵠⵠΔ[16] = [];
      this.ⵠⵠΔ[17] = [];
      this.ⵠⵠΔ[21] = [];
      this.ⵠⵠΔ[51] = [];
      this.ⵠⵠΔ[45] = [];
      this.ⵠⵠΔ[46] = [];
      this.ⵠⵠΔ[47] = [];
      this.ⵠⵠΔ[48] = [];
      this.ⵠⵠΔ[49] = [];
      this.ⵠⵠΔ[53] = [];
      this.ⵠⵠΔ[18] = [];
      this.ⵠⵠΔ[29] = [];
      this.ⵠⵠΔ[56] = [];
      this.ⵠⵠΔ[11] = [];
      this.ⵠⵠΔ[22] = [];
      this.ⵠⵠΔ[23] = [];
      this.ⵠⵠΔ[100] = [];
      this.ⵠⵠΔ[80] = [];
      this.ⵠⵠΔ[60] = [];
      this.ⵠⵠΔ[67] = [];
      this.ⵠⵠΔ[70] = [];
      this.ⵠⵠΔ[77] = [];
      this.ⵠⵠΔ[71] = [];
      this.ⵠⵠΔ[72] = [];
      this.ⵠⵠΔ[73] = [];
      this.ⵠⵠΔ[74] = [];
      this.ⵠⵠΔ[65] = [];
      this.ⵠⵠΔ[66] = [];
      this.ⵠⵠΔ[62] = [];
      this.ⵠⵠΔ[88] = [];
      this.ⵠⵠΔ[91] = [];
      this.ⵠⵠΔ[90] = [];
      this.ⵠⵠΔ[63] = [];
      this.ⵠⵠΔ[78] = [];
      this.ⵠⵠΔ[75] = [];
      this.ⵠⵠΔ[76] = [];
      this.ⵠⵠΔ[64] = [];
      this.ⵠⵠΔ[69] = [];
      this.ⵠⵠΔ[68] = [];
      this.ⵠⵠΔ[79] = [];
      this.ⵠⵠΔ[89] = [];
      this.ⵠⵠΔ[83] = [];
      this.ⵠⵠΔ[84] = [];
      this.ⵠⵠΔ[85] = [];
      this.ⵠⵠΔ[81] = [];
      this.ⵠⵠΔ[82] = [];
      this.ⵠⵠΔ[86] = [];
      this.ⵠⵠΔ[34] = [];
      this.ⵠⵠΔ[36] = [];
      this.ⵠⵠΔ[61] = [];
      this.ⵠⵠΔ[87] = [];
      this.ⵠⵠΔ[42] = [];
    };
    this.ⲆⵠΔⲆⲆⲆⲆᐃΔ = function (a) {
      if (this.ⲆᐃΔΔᐃ[a]) {
        ⵠᐃⵠᐃ = this.ⲆᐃΔΔᐃ[a].type;
        this.ⲆᐃΔΔᐃ[a] = null;
        for (var b = this.ⵠⵠΔ[ⵠᐃⵠᐃ], c = 0; c < b.length; c++) {
          if (a == b[c].ᐃᐃΔΔ) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⲆᐃΔⵠⲆⵠⲆⲆΔ = function (a, b) {
      for (var c = 0; this.ⵠⵠΔ[56].length > c; c++) {
        var d = this.ⵠⵠΔ[56][c];
        if (Math.floor(d.x / 100) === b && Math.floor(d.y / 100) === a) {
          return 1;
        }
      }
      return 0;
    };
    this.ⲆⵠⲆⲆΔᐃⲆᐃΔ = function (a, b) {
      for (var c = 0; this.ⵠⵠΔ[30].length > c; c++) {
        var d = this.ⵠⵠΔ[30][c];
        if (a == Math.floor(d.x / 100) && b == Math.floor(d.y / 100)) {
          return true;
        }
      }
      return false;
    };
    this.ᐃΔᐃΔⵠ = function (j) {
      for (var e = 0; e < j.length; e++) {
        ᐃΔΔΔ = j[e];
        if (ᐃΔΔΔ.ⲆⲆⵠⲆᐃⵠᐃ != ᐃΔΔΔ.angle) {
          var q = Math.PI * 2;
          ᐃΔΔΔ.angle = (ᐃΔΔΔ.angle + q) % q;
          ᐃΔΔΔ.ⲆⲆⵠⲆᐃⵠᐃ = (ᐃΔΔΔ.ⲆⲆⵠⲆᐃⵠᐃ + q) % q;
          if (ᐃΔΔΔ.angle != ᐃΔΔΔ.ⲆⲆⵠⲆᐃⵠᐃ) {
            var B = ᐃΔΔΔ.ⲆⲆⵠⲆᐃⵠᐃ - ᐃΔΔΔ.angle;
            var D = Math.abs(B);
            if (Math.PI < D) {
              D = Math.PI * 2 - D;
            }
            var E = tx * (D / Math.PI * 3 * 10);
            if (Math.PI < B) {
              ᐃΔΔΔ.angle -= E;
            } else if (B < -Math.PI) {
              ᐃΔΔΔ.angle += E;
            } else if (B < 0) {
              ᐃΔΔΔ.angle -= E;
            } else {
              ᐃΔΔΔ.angle += E;
            }
            ᐃΔΔΔ.angle = (ᐃΔΔΔ.angle + q) % q;
            if (Math.abs(ᐃΔΔΔ.angle - ᐃΔΔΔ.ⲆⲆⵠⲆᐃⵠᐃ) < E) {
              ᐃΔΔΔ.angle = ᐃΔΔΔ.ⲆⲆⵠⲆᐃⵠᐃ;
            }
          }
        }
        Math.floor(ᐃΔΔΔ.r.y / 100);
        Math.floor(ᐃΔΔΔ.r.x / 100);
        if (ᐃΔΔΔ.r.x != ᐃΔΔΔ.x || ᐃΔΔΔ.r.y != ᐃΔΔΔ.y) {
          if (ᐃΔΔΔ.action & 64) {
            ᐃΔΔΔ.action -= 64;
          }
          ᐃΔΔΔ.action |= 32;
          var F = ΔΔⲆ.ΔⲆⲆⵠΔᐃⵠ(ᐃΔΔΔ, ᐃΔΔΔ.r) + Math.PI;
          var G = tx * ᐃΔΔΔ.ΔⲆᐃᐃΔ;
          var H = ΔΔⲆ.ΔⲆᐃΔΔΔΔ(G, F);
          if (ΔΔⲆ.ⲆⵠⵠⲆⲆᐃⵠ(ΔΔⲆ.ΔⲆΔⲆⲆᐃΔ(ᐃΔΔΔ, ᐃΔΔΔ.r)) > ΔΔⲆ.ⲆⵠⵠⲆⲆᐃⵠ(H)) {
            ΔΔⲆ.ⲆⵠΔⵠΔⵠΔ(ᐃΔΔΔ, H);
          } else {
            if (ᐃΔΔΔ.action & 32) {
              ᐃΔΔΔ.action -= 32;
            }
            ᐃΔΔΔ.action |= 64;
            ΔΔⲆ.ΔⲆⵠᐃⲆΔⵠ(ᐃΔΔΔ.r, ᐃΔΔΔ);
          }
        }
        if (ᐃΔΔΔ.ΔᐃⵠⲆⵠ) {
          var I = ᐃΔΔΔ.bubbles;
          if ((M = I.length) === 0 || M < ts.ᐃⵠᐃⵠᐃⵠⲆ && I[M - 1].ⵠΔⲆⲆΔ < 0.95) {
            I.push({
              id: Math.floor(Math.random() * ᐃΔ[540][0].length),
              x: Math.floor(ᐃΔΔΔ.x + Math.random() * 80 - 40),
              y: Math.floor(ᐃΔΔΔ.y + Math.random() * 80 - 40),
              ⵠΔⲆⲆΔ: 1
            });
          }
          for (var J = 0; M > J; J++) {
            I[J].ⵠΔⲆⲆΔ = Math.max(0, I[J].ⵠΔⲆⲆΔ - tx);
          }
          for (J = 0; J < M; J++) {
            if (I[J].ⵠΔⲆⲆΔ === 0) {
              I.splice(J, 1);
              break;
            }
          }
        }
        var K = 0;
        if (ᐃΔΔΔ.ⲆᐃⲆΔ && jx.ΔⲆΔⲆᐃ) {
          var L = ᐃΔΔΔ.ΔᐃΔᐃΔ;
          var M = L.length;
          if (ᐃΔΔΔ.ⲆⲆᐃⲆΔⲆΔ > 0 && ᐃΔΔΔ.ⲆΔⲆΔⵠ !== 227 && ᐃΔΔΔ.ⲆΔⲆΔⵠ !== 228 && ᐃΔΔΔ.ⲆΔⲆΔⵠ !== 230 && ᐃΔΔΔ.ⲆΔⲆΔⵠ !== 229 && ᐃΔΔΔ.ⲆΔⲆΔⵠ !== 91 && !ᐃΔΔΔ.ΔᐃⵠⲆⵠ && (K = 1, M === 0 || ts.ᐃⲆⵠᐃⵠᐃΔ < ΔΔⲆ.ⵠΔⲆⲆ(L[M - 1], ᐃΔΔΔ))) {
            var N = -ᐃΔΔΔ.angle;
            var O = Math.cos(N) * 45 * Go;
            var Q = Go * (Math.sin(N) * 45);
            L.push({
              x: ᐃΔΔΔ.x + O,
              y: ᐃΔΔΔ.y + Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ᐃΔΔΔ.x - O,
              y: ᐃΔΔΔ.y - Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ᐃΔΔΔ.x,
              y: ᐃΔΔΔ.y,
              r: 24,
              alpha: 1
            });
          }
          for (J = 0; M > J; J++) {
            L[J].alpha = Math.max(0, L[J].alpha - tx / 2.2);
            L[J].r += tx * 20;
          }
          if (L.length > 0 && L[0].alpha === 0) {
            L.splice(0, 1);
          }
          var R = ᐃΔΔΔ.ᐃΔⵠΔⲆ;
          M = R.length;
          var S = -1;
          var U = Math.max(0, Math.sign(ᐃΔΔΔ.ᐃᐃΔⲆᐃᐃⲆ));
          var V = Math.max(0, Math.sign(ᐃΔΔΔ.ᐃΔᐃᐃⵠ));
          Math.max(0, Math.sign(ᐃΔΔΔ.ⲆⵠⲆΔΔ));
          var W = Math.max(0, Math.sign(ᐃΔΔΔ.ᐃΔⵠⵠⲆ));
          var X = Math.max(0, Math.sign(ᐃΔΔΔ.ⵠᐃΔᐃⵠ));
          if (ᐃΔΔΔ.ᐃᐃΔⲆᐃᐃⲆ > 0 || ᐃΔΔΔ.ⲆⵠⲆΔΔ > 0) {
            S = 602;
          } else if (ᐃΔΔΔ.ⵠᐃΔᐃⵠ > 0) {
            S = 680;
          } else if (ᐃΔΔΔ.ᐃΔᐃᐃⵠ > 0) {
            S = 475;
          } else if (ᐃΔΔΔ.ᐃΔⵠⵠⲆ > 0) {
            S = 476;
          }
          if (ᐃΔΔΔ.ⲆΔⲆΔⵠ === 225 && (U | V | W | X) === 1) {
            S = 228;
            var Y = ᐃΔΔΔ.ⲆΔᐃⵠⵠ - Math.PI / 2;
            var Z = 15;
            var _ = 11;
            var aa = ts.ⵠⲆⲆⲆⲆⲆΔ;
          } else if (ᐃΔΔΔ.ⲆΔⲆΔⵠ === 239 && (U | V | W | X) == 1) {
            S = 249;
            Y = ᐃΔΔΔ.ⲆΔᐃⵠⵠ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = ts.ⵠⲆⲆⲆⲆⲆΔ;
          } else if (ᐃΔΔΔ.ⲆΔⲆΔⵠ === 226 && (U | V | W | X) == 1) {
            S = 234;
            Y = ᐃΔΔΔ.ⲆΔᐃⵠⵠ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = 0 + ba;
            aa = ts.ⵠⲆⲆⲆⲆⲆΔ * 0.9;
          } else {
            Y = ᐃΔΔΔ.angle;
            Z = 15;
            _ = 11;
            aa = ts.ⵠⲆⲆⲆⲆⲆΔ;
          }
          if (ᐃΔΔΔ.ⲆΔⲆΔⵠ === 227 || ᐃΔΔΔ.ⲆΔⲆΔⵠ === 228 || ᐃΔΔΔ.ⲆΔⲆΔⵠ === 91 || ᐃΔΔΔ.ⲆΔⲆΔⵠ === 229 || ᐃΔΔΔ.ⲆΔⲆΔⵠ === 230 || ᐃΔΔΔ.ΔᐃⵠⲆⵠ); else if (ᐃΔΔΔ.ⲆΔⲆΔⵠ === 224) {
            if (M === 0 || ΔΔⲆ.ⵠΔⲆⲆ(R[M - 1], ᐃΔΔΔ) > ts.ⵠΔⵠΔΔⲆᐃ) {
              R.push({
                x: ᐃΔΔΔ.x,
                y: ᐃΔΔΔ.y,
                angle: ᐃΔΔΔ.ⲆΔᐃⵠⵠ,
                alpha: 1,
                id: 226
              });
            }
          } else if (S != -1 && K === 0 && (M === 0 || aa < ΔΔⲆ.ⵠΔⲆⲆ(R[M - 1], ᐃΔΔΔ))) {
            ᐃΔΔΔ.ᐃⵠΔⲆⵠⲆⲆ++;
            if (Math.abs(ᐃΔΔΔ.x - ᐃΔΔΔ.r.x) > 1 && Math.abs(ᐃΔΔΔ.y - ᐃΔΔΔ.r.y) > 1) {
              if (ᐃΔΔΔ.r.x > ᐃΔΔΔ.x && ᐃΔΔΔ.r.y < ᐃΔΔΔ.y || ᐃΔΔΔ.x > ᐃΔΔΔ.r.x && ᐃΔΔΔ.r.y > ᐃΔΔΔ.y) {
                if (ᐃΔΔΔ.ᐃⵠΔⲆⵠⲆⲆ % 2) {
                  O = Go * -_;
                  Q = -_ * Go;
                } else {
                  Q = _ * Go;
                  O = Go * _;
                }
              } else if (ᐃΔΔΔ.ᐃⵠΔⲆⵠⲆⲆ % 2) {
                O = _ * Go;
                Q = -_ * Go;
              } else {
                Q = _ * Go;
                O = Go * -_;
              }
            } else if (ᐃΔΔΔ.ᐃⵠΔⲆⵠⲆⲆ % 2) {
              O = Z * Math.cos(Y) * Go;
              Q = Go * (Math.sin(Y) * Z);
            } else {
              O = Z * -Math.cos(Y) * Go;
              Q = Go * (Z * -Math.sin(Y));
            }
            R.push({
              x: ᐃΔΔΔ.x + O,
              y: ᐃΔΔΔ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (J = 0; M > J; J++) {
            if (R[J].id === 226) {
              R[J].alpha = Math.max(0, R[J].alpha - tx * 1.5);
            } else {
              R[J].alpha = Math.max(0, R[J].alpha - tx / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(0, 1);
          }
        }
      }
    };
    this.ΔⵠΔ = function () {
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[0]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[80]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[60]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[67]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[70]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[77]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[71]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[72]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[73]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[74]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[61]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[62]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[88]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[91]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[90]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[63]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[78]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[75]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[76]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[64]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[68]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[65]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[66]);
      this.ᐃΔᐃΔⵠ(this.ⵠⵠΔ[69]);
    };
    this.ⵠΔⲆΔ = [];
    this.ⵠΔⲆΔ[620] = new ΔΔⲆ.ΔᐃᐃΔ(gl, 1, 1.05, 1, 0.008, 0.008);
    this.ⵠΔⲆΔ[619] = new ΔΔⲆ.ΔᐃᐃΔ(vj, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠΔⲆΔ[694] = new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1.02, 1, 0.008, 0.008);
    this.ⵠΔⲆΔ[695] = new ΔΔⲆ.ΔᐃᐃΔ(F, 1, 1.08, 1, 0.006, 0.006);
    this.ⲆΔΔⲆᐃ = [];
    this.ⲆΔΔⲆᐃ[0] = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.1, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[1] = new ΔΔⲆ.ΔᐃᐃΔ(wr, 0.4, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[2] = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[3] = new ΔΔⲆ.ΔᐃᐃΔ(hj, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[4] = new ΔΔⲆ.ΔᐃᐃΔ($o, 0.3, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[5] = new ΔΔⲆ.ΔᐃᐃΔ(vj, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[6] = new ΔΔⲆ.ΔᐃᐃΔ(xq, 0.5, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[7] = new ΔΔⲆ.ΔᐃᐃΔ(F, 0.9, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[8] = new ΔΔⲆ.ΔᐃᐃΔ(Pr, 0.6, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[9] = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[10] = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[11] = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[12] = new ΔΔⲆ.ΔᐃᐃΔ($o, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[13] = new ΔΔⲆ.ΔᐃᐃΔ(ik, 0.2, 1, 0, 0.6, 0.6);
    this.ⲆΔΔⲆᐃ[14] = new ΔΔⲆ.ΔᐃᐃΔ(ig, 0.7, 1, 0, 0.6, 0.6);
  }
  function Pf(b, c, d, e, f, i, a, j, k, h) {
    this.type = b;
    this.ⵠⵠⲆᐃ = c;
    this.id = d;
    this.x = e;
    this.y = f;
    this.angle = i;
    this.ⲆⲆⵠⲆᐃⵠᐃ = i;
    this.action = a;
    this.info = j;
    this.ΔΔⲆⲆᐃ = h;
    this.r = {
      x: e,
      y: f
    };
    this.ΔⲆᐃᐃΔ = k;
    if (kx) {
      this.ᐃᐃΔΔ = kx.ⵠⲆΔΔᐃᐃⵠ * c + d;
    }
    switch (b) {
      case 0:
        this.ᐃΔⲆᐃ = kx.ⲆⲆⵠⵠ[this.ⵠⵠⲆᐃ];
        this.ᐃⵠᐃⲆ = this.ᐃΔⲆᐃ.ᐃⵠᐃⲆ;
        this.ΔⵠΔᐃⲆⵠⵠ = this.ᐃΔⲆᐃ.ΔⵠΔᐃⲆⵠⵠ;
        this.ᐃⲆΔᐃⵠ = this.ᐃΔⲆᐃ.ᐃⲆΔᐃⵠ;
        this.ⲆΔⲆⲆⵠ = this.ᐃΔⲆᐃ.ⲆΔⲆⲆⵠ;
        this.ⲆᐃⵠΔᐃⲆⲆ = -1000000;
        this.ᐃΔⵠⵠⲆ = -1000000;
        this.ᐃΔᐃᐃⵠ = -1000000;
        this.ⲆⵠⲆΔΔ = -1000000;
        this.ⲆⲆᐃⲆΔⲆΔ = -1000000;
        this.ᐃᐃΔⲆᐃᐃⲆ = -1000000;
        this.ⵠᐃΔᐃⵠ = -1000000;
        this.ᐃᐃⲆⵠⲆ = kx.mode === 2 && this.ᐃⵠᐃⲆ === 0 || Pg;
        this.ᐃⵠΔⵠⵠⲆᐃ = kx.mode === 3 && this.ᐃⵠᐃⲆ === 0;
        this.ⵠⲆⵠⲆᐃⲆⲆ = this.ᐃᐃⲆⵠⲆ && this.ᐃΔⲆᐃ.ᐃᐃⵠⲆΔ === "  " ? kg : Pr;
        this.ᐃΔⵠΔⲆ = [];
        this.ⵠⲆⵠᐃⵠΔⵠ = 0;
        this.ⲆᐃⲆΔ = Ho;
        this.ᐃⵠΔⲆⵠⲆⲆ = 0;
        this.ⵠⵠΔⲆⲆᐃⵠ = 0;
        this.ΔᐃΔᐃΔ = [];
        this.r = {
          x: e,
          y: f
        };
        this.ΔᐃⲆΔ = Gv;
        this.ΔᐃᐃⲆᐃᐃΔ = Fv;
        this.ⵠⲆᐃᐃⲆ = 0;
        this.ⲆΔᐃⵠⵠ = 0;
        this.ⵠᐃᐃᐃΔ = 0;
        this.ΔᐃⵠⵠΔᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔΔⵠᐃⵠ = 0;
        this.ⵠᐃΔΔΔⵠᐃ = 0;
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(Es, 0.6, 0.6, 0, 5, 3);
        this.ⵠᐃⲆⵠⵠ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.6, 0.6, 0, 5, 3);
        this.freeze = new ΔΔⲆ.ΔᐃᐃΔ(Pr, 0.6, 0.6, 0, 5, 3);
        this.ᐃᐃⵠᐃⵠⲆⲆ = new ΔΔⲆ.ΔᐃᐃΔ(wr, 0.6, 0.6, 0, 5, 3);
        this.ΔᐃⵠΔΔᐃⵠ = new ΔΔⲆ.ΔᐃᐃΔ(true, 0, 2.25, -1.5, 3.75, 7.5);
        this.ⵠᐃⵠⵠΔⲆⲆ = new ΔΔⲆ.ΔᐃᐃΔ(true, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 0, -Math.PI / 3, 6, 9);
        this.ⵠⵠⲆᐃⲆΔΔⲆᐃ = 0;
        this.ΔⲆⲆᐃⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(ik, 0.6, 0.6, 0, 1, 3);
        this.ᐃΔᐃᐃΔⲆᐃ = this.ⵠⲆⵠⲆᐃⲆⲆ ? new ΔΔⲆ.ΔᐃᐃΔ(kg, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ⵠⵠΔᐃᐃⲆΔ = 0;
        this.ΔⲆⵠⲆᐃΔⲆ = 0;
        this.ᐃⵠᐃΔⵠⵠΔ = [];
        this.ᐃⵠᐃⵠⲆⲆΔ = [];
        this.text = [];
        this.label = [];
        this.ⵠⲆΔΔΔΔⵠ = Kv;
        this.ΔΔⲆⵠΔ = To;
        this.right = -1;
        this.ⲆΔⲆΔⵠ = -1;
        this.action = 64;
        this.ⲆᐃⵠⲆⵠΔᐃ = ik;
        this.ᐃⵠⵠΔΔ = 0;
        this.ΔᐃⵠⲆⵠ = false;
        this.bubbles = [];
        this.ΔⲆᐃⲆⵠ = 0;
        this.ⲆⵠⲆᐃᐃ = -1;
        this.ΔⵠΔ = function (a) {
          if (this.info & 32768) {
            this.ⲆᐃⵠⲆⵠΔᐃ = true;
            this.info = this.info & -32769;
          } else {
            this.ⲆᐃⵠⲆⵠΔᐃ = false;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ΔⲆᐃⲆⵠ = 1;
          } else {
            this.ΔⲆᐃⲆⵠ = 0;
          }
          this.ᐃⵠⵠΔΔ = Math.floor(this.info / 128);
          this.info -= this.ᐃⵠⵠΔΔ * 128;
          if (this.info === 7 || this.ⵠⲆⵠⲆᐃⲆⲆ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ⵠⲆⵠᐃⵠΔⵠ = kx.ⲆᐃΔⵠⲆⵠⲆⲆΔ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ⲆΔⲆΔⵠ = this.ΔΔⲆⲆᐃ & 255;
          if (this.right === 2) {
            this.ΔᐃⵠⲆⵠ = true;
          } else {
            this.ΔᐃⵠⲆⵠ = vj;
          }
          if (Tf[this.right]) {
            this.ΔᐃᐃⵠⲆ = true;
          } else {
            this.ΔᐃᐃⵠⲆ = false;
          }
          if (a & 256) {
            this.ΔⲆⲆᐃⵠᐃΔ.ⲆⲆⲆ = Pr;
            this.ΔⲆⲆᐃⵠᐃΔ.ΔⵠⲆ = 0.6;
          } else if (a & 4) {
            this.freeze.ⲆⲆⲆ = false;
            this.freeze.ΔⵠⲆ = 0.6;
          } else if (a & 128) {
            this.ⵠᐃⲆⵠⵠ.ⲆⲆⲆ = Es;
            this.ⵠᐃⲆⵠⵠ.ΔⵠⲆ = 0.6;
          }
          if (a & 8) {
            this.ᐃᐃⵠᐃⵠⲆⲆ.ⲆⲆⲆ = bh;
            this.ᐃᐃⵠᐃⵠⲆⲆ.ΔⵠⲆ = 0.6;
          }
          if (a & 2) {
            this.ⵠᐃΔ.ⲆⲆⲆ = false;
            this.ⵠᐃΔ.ΔⵠⲆ = 0.6;
          }
          if (a & 16) {
            this.ⵠⵠⲆᐃⲆΔΔⲆᐃ = 0.58;
            if (px.ⲆΔⵠΔᐃ && this.ⲆⵠⲆᐃᐃ !== -1) {
              px.ⲆⲆⵠⵠ[this.ⲆⵠⲆᐃᐃ].ⲆⵠΔⵠΔⵠⲆⵠᐃ(Tw[this.right]);
            }
          }
        };
        this.ΔⵠΔ();
        break;
      case 23:
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(F, 1, 1, 0, 10, 10),
          ΔⵠΔ: Es,
          angle: 0
        };
        this.ⵠⲆⲆΔⲆ = pv;
        this.ⲆΔᐃⲆᐃ = yv;
        this.ⵠⲆⵠΔⲆ = new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠⵠᐃΔⲆᐃΔ = 0;
        this.ⲆΔᐃⵠᐃⵠᐃ = 0;
        this.ᐃⵠⲆᐃᐃ = qp;
        break;
      case 22:
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: ik,
          angle: 0
        };
        this.ⵠⲆⲆΔⲆ = Ru;
        this.ⲆΔᐃⲆᐃ = Pu;
        this.ⵠⲆⵠΔⲆ = new ΔΔⲆ.ΔᐃᐃΔ(ig, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠⵠᐃΔⲆᐃΔ = 0;
        this.ⲆΔᐃⵠᐃⵠᐃ = 0;
        break;
      case 1:
      case 6:
        this.ⵠⲆⲆΔⲆ = Qu;
        this.ⲆΔᐃⲆᐃ = rv;
        this.ΔⵠΔᐃⵠ = new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1.03, 0.98, 0.3, 0.3);
        this.ᐃⲆⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ($n, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠⲆⵠΔⲆ = new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(Pg, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        break;
      case 43:
        this.ⵠⲆⲆΔⲆ = Uu;
        this.ⲆΔᐃⲆᐃ = Zu;
        this.ᐃⲆⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ($n, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(wr, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.Δᐃᐃᐃ = [];
        for (var g = 0; g < 3; g++) {
          this.Δᐃᐃᐃ.push({
            ΔᐃⲆΔ: gv,
            ⵠΔⲆΔ: new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.Δᐃᐃᐃ[0].x = this.x - 16.5;
        this.Δᐃᐃᐃ[0].y = this.y - 15.5;
        this.Δᐃᐃᐃ[0].angle = this.angle;
        this.Δᐃᐃᐃ[1].x = this.x + 36;
        this.Δᐃᐃᐃ[1].y = this.y + 17;
        this.Δᐃᐃᐃ[1].angle = this.angle;
        this.Δᐃᐃᐃ[2].x = this.x - 18.5;
        this.Δᐃᐃᐃ[2].y = this.y + 39;
        this.Δᐃᐃᐃ[2].angle = this.angle;
        break;
      case 3:
        this.ⵠⲆⲆΔⲆ = _u;
        this.ⲆΔᐃⲆᐃ = Ju;
        this.ᐃⲆⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: xq,
          angle: 0
        };
        this.Δᐃᐃᐃ = [];
        for (g = 0; g < 3; g++) {
          this.Δᐃᐃᐃ.push({
            ΔᐃⲆΔ: Ku,
            ⵠΔⲆΔ: new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.Δᐃᐃᐃ[0].x = this.x - 16.5;
        this.Δᐃᐃᐃ[0].y = this.y - 15.5;
        this.Δᐃᐃᐃ[1].x = this.x - 5.5;
        this.Δᐃᐃᐃ[1].y = this.y + 7.5;
        this.Δᐃᐃᐃ[2].x = this.x + 18;
        this.Δᐃᐃᐃ[2].y = this.y - 5;
        break;
      case 77:
        this.ΔᐃⲆΔ = Vu;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ($o, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(hj, 0.6, 0.6, 0, 5, 3);
        break;
      case 70:
        this.ΔᐃⲆΔ = dv;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.ΔᐃⲆΔ = Gu;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠⵠⲆΔⲆⲆ = new ΔΔⲆ.ΔᐃᐃΔ(sh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃⵠⲆΔΔ = new ΔΔⲆ.ΔᐃᐃΔ(ln, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ($n, 0.6, 0.6, 0, 5, 3);
        this.ⵠᐃⲆⵠⵠ = new ΔΔⲆ.ΔᐃᐃΔ($n, 0.6, 0.6, 0, 5, 3);
        break;
      case 67:
        this.ΔᐃⲆΔ = jv;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(Ea, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠⵠⲆΔⲆⲆ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃⵠⲆΔΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(ig, 0.6, 0.6, 0, 5, 3);
        this.ⵠᐃⲆⵠⵠ = new ΔΔⲆ.ΔᐃᐃΔ($n, 0.6, 0.6, 0, 5, 3);
        break;
      case 68:
        this.ΔᐃⲆΔ = hv;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
        this.ΔᐃⲆΔ = zv;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 91:
        this.ᐃⲆΔⵠᐃ = this.info & 15;
        this.ⵠⵠΔⲆⲆᐃⵠ = this.ΔΔⲆⲆᐃ & 1;
        this.ᐃΔⵠⵠΔᐃⲆ = 0;
        this.x = this.info;
        this.y = this.ΔΔⲆⲆᐃ;
        this.ΔᐃⲆΔ = Yu;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 80:
      case 60:
      case 61:
      case 62:
      case 63:
      case 78:
      case 65:
      case 66:
      case 88:
        this.ΔᐃⲆΔ = zv;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(Pr, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 36:
        this.ΔᐃⲆΔ = Ou;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(F, 1, 1, 0, 10, 10),
          ΔⵠΔ: wr,
          angle: 0
        };
        break;
      case 34:
        this.ⲆΔᐃⲆᐃ = Zp;
        this.ΔᐃⲆΔ = ov;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.up = new ΔΔⲆ.ΔᐃᐃΔ(Ea, 1, 1.03, 0.98, 0.1, 0.1);
        this.ⵠⵠⵠⲆΔ = [];
        break;
      case 87:
        this.angle = Math.PI * Math.random() / 2;
      case 86:
      case 82:
        this.ΔᐃⲆΔ = Cv;
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(Pr, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.ΔᐃⲆΔ = Av;
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(Ea, 0.6, 0.6, 0, 5, 3);
        break;
      case 69:
        this.scale = 1;
        this.ΔᐃⲆΔ = iv;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.ΔᐃⲆᐃΔ = 0;
        this.ᐃⲆⲆΔ = [];
        this.ΔⵠᐃⲆⲆᐃⵠ = 0;
        this.ᐃΔⵠᐃⲆⲆᐃ = ev;
        this.ΔᐃⲆΔ = Dv;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔΔⲆ.ΔᐃᐃΔ(sh, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(ln, 0.6, 0.6, 0, 5, 3);
        break;
      case 75:
        this.x = this.info;
        this.y = this.ΔΔⲆⲆᐃ;
        this.scale = 1;
        this.ΔⲆⲆⲆ = 0;
        this.ΔᐃⲆΔ = bv;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(Es, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔΔⲆ.ΔᐃᐃΔ(gl, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(gl, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.x = this.info;
        this.y = this.ΔΔⲆⲆᐃ;
        this.scale = 1;
        this.ΔⲆⲆⲆ = 0;
        this.ΔᐃⲆΔ = Nu;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔΔⲆ.ΔᐃᐃΔ(Ea, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(Es, 0.6, 0.6, 0, 5, 3);
        break;
      case 73:
        this.scale = 1;
        this.ΔᐃⲆΔ = Tu;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(ig, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔΔⲆ.ΔᐃᐃΔ(F, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ($o, 0.6, 0.6, 0, 5, 3);
        break;
      case 72:
        this.scale = 1;
        this.ΔᐃⲆΔ = kv;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ($n, 0.6, 0.6, 0, 5, 3);
        break;
      case 64:
        this.scale = 1;
        this.ΔᐃⲆΔ = mv;
        this.ⵠΔⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(hj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠᐃΔ = new ΔΔⲆ.ΔᐃᐃΔ(Pr, 0.6, 0.6, 0, 5, 3);
        break;
      case 100:
        this.Δᐃᐃᐃ = [];
        for (g = 0; g < 5; g++) {
          this.Δᐃᐃᐃ.push({
            ΔᐃⲆΔ: Ku,
            ⵠΔⲆΔ: new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.Δᐃᐃᐃ[0].x = this.x - 20.5;
            this.Δᐃᐃᐃ[0].y = this.y - 22.5;
            this.Δᐃᐃᐃ[1].x = this.x - 35.5;
            this.Δᐃᐃᐃ[1].y = this.y + 7.5;
            this.Δᐃᐃᐃ[2].x = this.x + 7.5;
            this.Δᐃᐃᐃ[2].y = this.y - 30;
            this.Δᐃᐃᐃ[3].x = this.x + 22.5;
            this.Δᐃᐃᐃ[3].y = this.y;
            this.Δᐃᐃᐃ[4].x = this.x - 7.5;
            this.Δᐃᐃᐃ[4].y = this.y + 14.5;
            break;
          case 1:
            this.Δᐃᐃᐃ[0].x = this.x - 30.5;
            this.Δᐃᐃᐃ[0].y = this.y - 22.5;
            this.Δᐃᐃᐃ[1].x = this.x - 15.5;
            this.Δᐃᐃᐃ[1].y = this.y + 7.5;
            this.Δᐃᐃᐃ[2].x = this.x + 15.5;
            this.Δᐃᐃᐃ[2].y = this.y - 30;
            this.Δᐃᐃᐃ[3].x = this.x + 12.5;
            this.Δᐃᐃᐃ[3].y = this.y + 5;
            this.Δᐃᐃᐃ[4].x = this.x - 40.5;
            this.Δᐃᐃᐃ[4].y = this.y + 14.5;
            break;
          case 2:
            this.Δᐃᐃᐃ[0].x = this.x - 20.5;
            this.Δᐃᐃᐃ[0].y = this.y - 20.5;
            this.Δᐃᐃᐃ[1].x = this.x - 35.5;
            this.Δᐃᐃᐃ[1].y = this.y + 15.5;
            this.Δᐃᐃᐃ[2].x = this.x + 7.5;
            this.Δᐃᐃᐃ[2].y = this.y - 17;
            this.Δᐃᐃᐃ[3].x = this.x + 22.5;
            this.Δᐃᐃᐃ[3].y = this.y + 5;
            this.Δᐃᐃᐃ[4].x = this.x - 7.5;
            this.Δᐃᐃᐃ[4].y = this.y + 1.5;
        }
        break;
      case 31:
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(vl, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ΔᐃⲆΔ = Su;
        this.ᐃⲆⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(Ag, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔᐃⵠⲆΔΔ = new ΔΔⲆ.ΔᐃᐃΔ(Pg, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 40:
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ΔᐃⲆΔ = Lu;
        this.ᐃⲆⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 39:
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ΔᐃⲆΔ = Iu;
        this.ᐃⲆⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 44:
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ΔᐃⲆΔ = nv;
        this.ᐃⲆⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 55:
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(ig, 1, 1, 0, 10, 10),
          ΔⵠΔ: ln,
          angle: 0
        };
        this.ΔᐃⲆΔ = Mu;
        this.ᐃⲆⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(vl, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 54:
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: ik,
          angle: 0
        };
        this.ΔᐃⲆΔ = fv;
        this.ᐃⲆⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 37:
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(bh, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ΔᐃⲆΔ = cv;
        this.ᐃⲆⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ(xq, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ΔᐃⲆΔ = Xu;
        this.rotate = 0;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(xq, 1, 1, 0, 10, 10),
          ΔⵠΔ: $n,
          angle: 0
        };
        break;
      case 25:
        this.ΔᐃⲆΔ = Wu;
        this.rotate = 0;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(F, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        break;
      case 26:
        this.ΔᐃⲆΔ = sv;
        this.rotate = 0;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        break;
      case 27:
        this.ΔᐃⲆΔ = qv;
        this.rotate = 0;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(Pr, 1, 1, 0, 10, 10),
          ΔⵠΔ: ik,
          angle: 0
        };
        break;
      case 28:
        this.ΔᐃⲆΔ = $p;
        this.rotate = 0;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: hj,
          angle: 0
        };
        break;
      case 32:
        this.ⵠⲆⲆΔⲆ = Bv;
        this.ⲆΔᐃⲆᐃ = Hu;
        this.rotate = 0;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        break;
      case 38:
        this.ΔᐃⲆΔ = xp;
        this.ⵠΔᐃ = Math.floor(this.x / 100);
        this.ⵠⵠ = Math.floor(this.y / 100);
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(ig, 1, 1, 0, 10, 10),
          ΔⵠΔ: vj,
          angle: 0
        };
        this.opacity = 1;
        this.ᐃⵠⲆᐃᐃ = _p;
        break;
      case 42:
        this.ΔᐃⲆΔ = Np;
        this.ⵠⲆⵠΔⲆ = new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        break;
      case 33:
      case 2:
      case 56:
      case 35:
      case 29:
        this.ΔᐃⲆΔ = Up;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(Ag, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        break;
      case 30:
        this.ΔᐃⲆΔ = Up;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(hj, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ᐃⵠⲆᐃᐃ = _p;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 50:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
        this.ΔᐃⲆΔ = Up;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(vj, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ᐃⵠⲆᐃᐃ = qp;
        break;
      case 41:
        this.ΔᐃⲆΔ = Mp;
        this.opacity = 1;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: gl,
          angle: 0
        };
        var m = this.angle % (Math.PI / 2);
        if (m < Math.PI / 4) {
          this.angle -= m;
        } else {
          this.angle += Math.PI / 2 - m;
        }
        break;
      case 79:
        this.ΔᐃⲆΔ = Ep;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 89:
        this.ΔᐃⲆΔ = Kp;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 83:
        this.ΔᐃⲆΔ = Gp;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 84:
        this.ΔᐃⲆΔ = Op;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 85:
        this.ΔᐃⲆΔ = Sp;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 11:
        this.ΔⵠΔ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ΔᐃⲆΔ = Ap;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(F, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.lock = 0;
        this.ΔⵠΔ(this.action);
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 53:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 51:
        this.ΔᐃⲆΔ = Dp;
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 10, 10),
          ΔⵠΔ: gl,
          angle: 0
        };
        this.ᐃⵠⲆᐃᐃ = qp;
        break;
      case 18:
        this.ⵠⲆⲆΔⲆ = uv;
        this.ΔᐃⲆΔ = tv;
        this.ⲆΔᐃⲆᐃ = lv;
        this.ᐃⲆⲆΔ = new ΔΔⲆ.ΔᐃᐃΔ($n, 1, 1.23, 1.18, 0.02, 0.02);
        this.ⵠⲆⵠΔⲆ = new ΔΔⲆ.ΔᐃᐃΔ(bh, 1, 1.23, 1.18, 0.04, 0.04);
        this.ⵠᐃΔ = {
          ⲆΔⵠᐃ: new ΔΔⲆ.ΔᐃᐃΔ(sh, 1, 1, 0, 10, 10),
          ΔⵠΔ: false,
          angle: 0
        };
        this.ΔⵠΔ = function (a) {
          this.action = a;
        };
    }
  }
  function kf(a, b, c, d) {
    this.id = a;
    this.ΔⲆᐃᐃΔ = (a + 5) * 8;
    this.ⵠΔⲆⲆΔ = Bo / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ᐃⵠⲆⲆ = Math.cos(d);
    this.alpha = 0;
  }
  function Af() {
    this.ᐃᐃⵠⲆΔ = "";
    this.ᐃⵠᐃⲆ = 0;
    this.ⲆΔⲆⲆⵠ = 0;
    this.ΔⲆᐃⲆⵠ = 0;
    this.ΔⵠΔᐃⲆⵠⵠ = 0;
    this.ᐃⲆΔᐃⵠ = 0;
    this.ⵠⵠⲆᐃᐃ = 0;
    this.ⲆᐃⵠΔⲆ = 0;
    this.level = 0;
    this.label = null;
    this.ⲆΔⲆⲆⵠⲆⵠ = null;
    this.ⲆⲆⵠΔⵠΔⲆ = null;
    this.ⲆΔΔΔᐃ = false;
    this.ᐃᐃΔᐃⵠ = 0;
  }
  function xf() {
    Math.random();
    return "a";
  }
  function Nw() {
    Math.random();
    return "g";
  }
  function Mf() {
    Math.random();
    return "s";
  }
  function Bf() {
    Math.random();
    return "p";
  }
  function Ow() {
    Math.random();
    return "o";
  }
  function Ow() {
    Math.random();
    return "o";
  }
  function Pw() {
    Math.random();
    return "r";
  }
  function If() {
    Math.random();
    return "d";
  }
  function Sf() {
    Math.random();
    return "t";
  }
  function Qw() {
    Math.random();
    return "C";
  }
  function _f() {
    this.ᐃⵠⵠΔᐃ = function () { };
    this.ⵠΔΔⲆΔ = {
      ⵠⵠⲆᐃ: 1,
      open: F,
      ⵠΔⵠΔⲆ: 1
    };
    this.ᐃⵠᐃᐃⲆ = {
      ⵠⵠⲆᐃ: 1,
      ⵠΔⵠΔⲆ: -1,
      open: false
    };
    this.ᐃⵠⵠΔ = {
      ⲆⵠΔⲆᐃⵠᐃ: 0,
      Δᐃᐃⵠⵠ: 0,
      ⵠⵠⲆᐃ: 1,
      ⵠΔⵠΔⲆ: -1,
      open: Pg
    };
    this.ⲆΔⲆΔ = {
      type: 0,
      ᐃᐃΔᐃⲆΔⵠ: 0,
      ⵠΔᐃⵠⲆᐃᐃ: 0,
      ⵠΔᐃᐃΔᐃᐃ: 0,
      ⵠⵠⲆᐃ: 1,
      open: _h,
      ⵠΔⵠΔⲆ: -1
    };
    this.ΔⲆᐃⲆ = {
      ᐃᐃΔᐃⲆΔⵠ: 0,
      ⵠΔΔⵠΔⵠΔ: 0,
      Δᐃᐃⵠⵠ: 0,
      ⵠⵠⲆᐃ: 1,
      ⵠΔⵠΔⲆ: -1,
      open: ig
    };
    this.sign = {
      ⵠΔⵠΔⲆ: -1,
      open: ig
    };
    this.ΔⵠΔⲆΔ = {
      ⲆᐃΔᐃ: 0,
      ⵠⵠⲆᐃ: 1,
      ⵠΔⵠΔⲆ: -1,
      open: false
    };
    this.ΔᐃⵠⲆⵠ = {
      enabled: false,
      ⵠⵠΔⵠΔ: -1,
      label: $o,
      now: -1,
      ΔᐃⲆΔ: Hv
    };
    this.Ⲇⵠⵠᐃ = {
      id: -1,
      ⲆᐃΔᐃ: 0,
      ⵠⵠⲆᐃ: 1,
      ⵠΔⵠΔⲆ: -1,
      open: Pg,
      lock: false,
      locked: false,
      ᐃⵠⵠᐃᐃⲆⲆ: Pg,
      ⵠᐃⵠⵠⲆⲆⲆ: false
    };
    this.ⲆΔΔΔᐃ = pl;
    this.reconnect = {
      enabled: Pr,
      rotate: 0
    };
    this.key = ΔΔⲆ.ΔⵠΔⲆⲆⲆⵠ("key", Ph.location.href);
    var a = ΔΔⲆ.ΔⵠΔⲆⲆⲆⵠ("egg", Ph.location.href);
    if (a) {
      jx.ᐃⵠᐃⲆ = parseInt(a);
    }
    this.beta = Ph.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ⵠᐃⲆⵠ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ⵠᐃⲆⵠ.get("starve_beta");
    }
    this.ⲆⲆⵠⲆΔ = ⵠᐃⲆⵠ.get("starve_token") ? ⵠᐃⲆⵠ.get("starve_token") : ΔΔⲆ.ⵠⵠᐃⵠⵠᐃⵠ(14);
    Ph.baguette();
    var b = Ph.kot2;
    function c() {
      this.seed = 1;
      this.ⲆⲆⵠⵠⵠᐃΔ = 2;
      this.ⵠᐃΔᐃΔΔⵠ = 3;
      this.ᐃᐃⲆΔⵠᐃⲆⵠΔ = 1;
      this.ⲆⵠΔᐃⲆᐃΔΔⵠ = 2;
      this.ᐃⵠΔΔⵠΔᐃⵠΔ = 3;
      this.ⵠⲆᐃΔᐃⵠΔ = function (a) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⲆⲆⲆⵠᐃⵠ = function (a) {
        this.ⲆⲆⵠⵠⵠᐃΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆΔⲆⲆⲆⵠⲆ = function (a) {
        this.ⵠᐃΔᐃΔΔⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆΔⲆⵠΔⵠΔᐃᐃ = function (a) {
        this.ᐃᐃⲆΔⵠᐃⲆⵠΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠⵠⵠᐃⲆᐃⲆⵠⲆ = function (a) {
        this.ⲆⵠΔᐃⲆᐃΔΔⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠⵠⵠΔΔᐃⵠΔΔ = function (a) {
        this.ᐃⵠΔΔⵠΔᐃⵠΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠⲆⵠΔⲆⵠᐃ = function (c, e, f, i, j, k, a) {
        for (var m = 1; a > m;) {
          var n = f * m % ᐃΔⲆⵠⵠᐃⲆ;
          var o = ⲆΔΔⵠΔᐃⲆ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(i * o + j);
            if (k < m && a > m) {
              var q = Math.random() > 0.5 ? tx * -10 : tx * 10;
              var r = e * p;
              this.ΔⵠⲆᐃⵠⵠΔ[n] = Math.max(-25, Math.min(25, this.ΔⵠⲆᐃⵠⵠΔ[n] + q));
              this.ⵠᐃⲆᐃΔⵠΔ[n] = Math.max(-8, Math.min(8, this.ⵠᐃⲆᐃΔⵠΔ[n] + q));
              if (r > 0) {
                Mo.beginPath();
                Mo.arc(m + lx.ⲆΔᐃ.x + this.ⵠᐃⲆᐃΔⵠΔ[n], c + this.ΔⵠⲆᐃⵠⵠΔ[n] - 20, r, 0, Math.PI * 2);
                if (kx.transition) {
                  var t = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
                  Mo.fillStyle = bw(83, 156, 160, 236, 247, 249, t);
                } else {
                  Mo.fillStyle = ts.ⵠⵠᐃⲆΔᐃΔ[kx.time];
                }
                Mo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ⲆⲆΔΔΔΔΔ = function (c, e, f, i, j, k, a) {
        for (var m = 1; a > m;) {
          var n = m * f % ᐃΔⲆⵠⵠᐃⲆ;
          var o = ⲆΔΔⵠΔᐃⲆ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (m > k && a > m) {
              var q = Math.random() > 0.5 ? tx * -10 : tx * 10;
              var r = p * e;
              this.ᐃᐃᐃⲆⵠ[n] = Math.max(-25, Math.min(25, this.ᐃᐃᐃⲆⵠ[n] + q));
              this.ⲆⲆⵠⵠᐃ[n] = Math.max(-8, Math.min(8, this.ⲆⲆⵠⵠᐃ[n] + q));
              if (r > 0) {
                Mo.beginPath();
                Mo.arc(c + this.ᐃᐃᐃⲆⵠ[n] - 20, m + lx.ⲆΔᐃ.y + this.ⲆⲆⵠⵠᐃ[n], r, 0, Math.PI * 2);
                if (kx.transition) {
                  var t = kx.time ? 1 - kx.ΔΔⲆⵠ.ΔⵠⲆ : kx.ΔΔⲆⵠ.ΔⵠⲆ;
                  Mo.fillStyle = bw(83, 156, 160, 236, 247, 249, t);
                } else {
                  Mo.fillStyle = ts.ⵠⵠᐃⲆΔᐃΔ[kx.time];
                }
                Mo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ΔⲆᐃⲆⲆⲆᐃⲆⲆ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ⲆΔⲆⲆⲆⵠⲆ();
        }
        Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
        this.ⵠⲆⵠΔⲆⵠᐃ(d, h, this.ⵠᐃΔᐃΔΔⵠ, 18, 16, f, g);
        Mo.globalAlpha = 1;
        var h = -(b - 250 - e + 500) / 150;
        if (h === 0) {
          this.ⵠⲆᐃΔᐃⵠΔ();
        }
        Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
        this.ⵠⲆⵠΔⲆⵠᐃ(b, h, this.seed, 12, 10, f, g);
        Mo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ⲆⲆⲆⲆⵠᐃⵠ();
          }
          Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
          this.ⵠⲆⵠΔⲆⵠᐃ(c, h, this.ⲆⲆⵠⵠⵠᐃΔ, 6, 6, f, g);
          Mo.globalAlpha = 1;
        }
      };
      this.ΔⲆⵠᐃⵠΔΔᐃⵠ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ⲆΔⲆⲆⲆⵠⲆ();
        }
        Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
        this.ⵠⲆⵠΔⲆⵠᐃ(d, h, this.ⵠᐃΔᐃΔΔⵠ, 18, 16, f, g);
        Mo.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⵠⲆᐃΔᐃⵠΔ();
        }
        Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
        this.ⵠⲆⵠΔⲆⵠᐃ(b, h, this.seed, 12, 10, f, g);
        Mo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ⲆⲆⲆⲆⵠᐃⵠ();
          }
          Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
          this.ⵠⲆⵠΔⲆⵠᐃ(c, h, this.ⲆⲆⵠⵠⵠᐃΔ, 6, 6, f, g);
          Mo.globalAlpha = 1;
        }
      };
      this.ΔⵠⵠⲆᐃⲆⲆⲆᐃ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ⲆΔⲆⲆⲆⵠⲆ();
        }
        Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
        this.ⲆⲆΔΔΔΔΔ(d, h, this.ⵠᐃΔᐃΔΔⵠ, 18, 16, f, g);
        Mo.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⵠⲆᐃΔᐃⵠΔ();
        }
        Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
        this.ⲆⲆΔΔΔΔΔ(b, h, this.seed, 12, 10, f, g);
        Mo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ⲆⲆⲆⲆⵠᐃⵠ();
          }
          Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
          this.ⲆⲆΔΔΔΔΔ(c, h, this.ⲆⲆⵠⵠⵠᐃΔ, 6, 6, f, g);
          Mo.globalAlpha = 1;
        }
      };
      this.ⲆⵠⵠⵠᐃᐃⲆΔᐃ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ⲆΔⲆⲆⲆⵠⲆ();
        }
        Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
        this.ⲆⲆΔΔΔΔΔ(d, h, this.ⵠᐃΔᐃΔΔⵠ, 18, 16, f, g);
        Mo.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ⵠⲆᐃΔᐃⵠΔ();
        }
        Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
        this.ⲆⲆΔΔΔΔΔ(b, h, this.seed, 12, 10, f, g);
        Mo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ⲆⲆⲆⲆⵠᐃⵠ();
          }
          Mo.globalAlpha = ΔΔⲆ.ⲆⵠⵠΔⲆ(h);
          this.ⲆⲆΔΔΔΔΔ(c, h, this.ⲆⲆⵠⵠⵠᐃΔ, 6, 6, f, g);
          Mo.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ΔΔᐃⵠᐃΔΔ, 0, 10, 0, 0, 200),
        ⵠⲆΔΔ: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ᐃᐃᐃΔⲆΔΔ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ⵠᐃᐃΔᐃᐃᐃ, 0, 10, 0, 0, 150),
        ⵠⲆΔΔ: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ⲆⵠⵠΔⲆ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ⵠⵠᐃΔᐃⵠⵠ, 0, 10, 0, 0, 100),
        ⵠⲆΔΔ: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ⲆⵠⵠΔⲆ, 0, 10, 100, 100, 0)
      };
      this.ⲆⵠΔⵠᐃΔΔΔᐃ = function (a) {
        if (a.r.x === a.r.ᐃΔΔⲆⲆ) {
          if (a.ⵠⲆΔΔ.x === a.ⵠⲆΔΔ.ᐃΔΔⲆⲆ) {
            return a.r;
          } else {
            return a.ⵠⲆΔΔ;
          }
        } else {
          return a.r;
        }
      };
      this.ⵠⲆΔ = function (a) {
        var b;
        if (a.r.x === a.r.ᐃΔΔⲆⲆ) {
          if (a.ⵠⲆΔΔ.x === a.ⵠⲆΔΔ.ᐃΔΔⲆⲆ) {
            a.r.ⵠⵠⲆⵠΔⲆΔ();
            a.ⵠⲆΔΔ.ⵠⵠⲆⵠΔⲆΔ();
            b = a.r;
          } else {
            b = a.ⵠⲆΔΔ;
          }
        } else {
          b = a.r;
        }
        b.ⲆᐃᐃΔⲆ(b.ᐃΔΔⲆⲆ);
        return b;
      };
      this.ᐃᐃᐃⲆⵠ = [];
      this.ⲆⲆⵠⵠᐃ = [];
      this.ΔⵠⲆᐃⵠⵠΔ = [];
      this.ⵠᐃⲆᐃΔⵠΔ = [];
      this.ᐃⵠⵠΔᐃ = function () {
        for (var a = 0; ᐃΔⲆⵠⵠᐃⲆ > a; a++) {
          this.ᐃᐃᐃⲆⵠ[a] = Math.floor(ⲆΔΔⵠΔᐃⲆ[a] * 25);
          this.ⲆⲆⵠⵠᐃ[a] = Math.floor(ⲆΔΔⵠΔᐃⲆ[a] * 8);
          this.ΔⵠⲆᐃⵠⵠΔ[a] = Math.floor(ⲆΔΔⵠΔᐃⲆ[a] * 25);
          this.ⵠᐃⲆᐃΔⵠΔ[a] = Math.floor(ⲆΔΔⵠΔᐃⲆ[a] * 8);
        }
        this.w1.r.x = this.w1.r.ᐃΔΔⲆⲆ;
        this.w2.r.ⵠⲆⲆΔΔ = 3.5;
        this.w3.r.ⵠⲆⲆΔΔ = 2;
      };
      this.ᐃⵠⵠΔᐃ();
    }
    this.ⲆⲆⵠⲆΔ = b.substring(0, 6) + this.ⲆⲆⵠⲆΔ.substring(6);
    this.ⵠⵠᐃᐃΔⲆᐃ = ⵠᐃⲆⵠ.get("starve_token_id") ? ⵠᐃⲆⵠ.get("starve_token_id") : "";
    this.id = 0;
    this.ᐃᐃΔΔ = 0;
    this.ΔΔᐃ = 0;
    this.ⵠᐃⲆΔΔΔᐃ = {
      ⵠΔᐃⵠΔ: 0,
      ᐃᐃΔᐃⵠ: 0,
      ⵠⵠᐃΔᐃΔΔ: "",
      ΔΔᐃᐃⵠᐃⵠ: 0
    };
    this.ᐃⲆΔⲆᐃⲆⵠⲆᐃ = {
      connected: 0,
      ⲆⲆⲆⵠᐃ: new Date().getTime()
    };
    this.ⵠⲆᐃΔⲆ = [];
    this.ⵠᐃⵠΔⵠⵠⲆ = function (a) {
      for (var b = 0; b < this.ⵠⲆᐃΔⲆ.length; b++) {
        if (a == this.ⵠⲆᐃΔⲆ[b]) {
          return true;
        }
      }
      return false;
    };
    this.ⵠⲆΔⵠⲆ = {
      ⵠⵠΔⵠΔ: 0,
      time: 0,
      value: 0,
      open: false,
      ΔᐃⲆΔ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ⵠⵠΔⵠΔ) / 1000);
          if (this.time < 60) {
            ox.ⵠⲆΔⵠⲆ.button.ΔᐃⲆΔ(Mo);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = bh;
          }
        }
      }
    };
    this.ⲆΔⲆⵠΔ = {
      id: -1,
      ⵠⵠⲆᐃ: -1,
      lock: 0,
      timeout: new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 1, 0, 1 / 30, 1),
      wait: Pg
    };
    this.ⲆΔᐃᐃⲆ = {
      timeout: new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 1, 0, 0.2, 1),
      wait: $o
    };
    this.ᐃᐃⲆⵠΔ = {
      timeout: new ΔΔⲆ.ΔᐃᐃΔ(_h, 0, 1, 0, 1, 1),
      wait: Pr
    };
    this.ΔᐃᐃⵠⲆ = {
      timeout: new ΔΔⲆ.ΔᐃᐃΔ($o, 0, 1, 0, 1 / 10, 1),
      wait: false
    };
    this.ⲆΔᐃ = new ΔΔⲆ.ΔⵠΔⲆᐃⲆΔ(ΔΔⲆ.ᐃᐃΔᐃᐃᐃΔ, 0, 0.4, 0, 0, dq, eq, dq, eq);
    this.ⲆΔᐃ.ⵠⵠΔⵠΔ = 0;
    this.ⲆΔᐃ.ΔΔⵠᐃᐃΔⵠ = 0;
    this.ⲆΔᐃ.ΔⵠΔ = function () {
      if (this.ΔΔⵠᐃᐃΔⵠ > 0) {
        this.ΔΔⵠᐃᐃΔⵠ -= tx;
      } else {
        var a = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
        if (a) {
          this.ⵠⵠΔⵠΔ = 0;
          var b = Math.max(Math.min(dq - a.x, -2), 2 - kx.w + Bo);
          var c = Math.max(Math.min(eq - a.y, -2), -kx.ⲆΔⲆ + 2 + cq);
          this.ⲆᐃᐃΔⲆ({
            x: b,
            y: c
          });
        } else {
          this.ⵠⵠΔⵠΔ += tx;
          if (this.ⵠⵠΔⵠΔ > 3) {
            this.ⵠⵠΔⵠΔ = 0;
            if (!lx.reconnect.enabled) {
              nx.ᐃᐃⲆⲆΔΔᐃⲆᐃ();
            }
          }
        }
      }
    };
    this.ⲆΔᐃ.w = screen.width;
    this.ⲆΔᐃ.ⲆΔⲆ = screen.height;
    this.ⲆΔᐃ.ⵠΔΔⵠⵠΔⲆ = this.ⲆΔᐃ.w;
    this.ⲆΔᐃ.ⲆΔⵠⵠΔⲆⵠ = this.ⲆΔᐃ.ⲆΔⲆ;
    this.ⲆΔᐃ.rx = 0;
    this.ⲆΔᐃ.ry = 0;
    this.ⲆΔᐃ.ⲆⵠⵠⵠΔⵠᐃΔⲆ = 0;
    this.ⲆΔᐃ.ⲆΔΔⵠⵠⵠΔᐃⲆ = 0;
    this.ⲆΔᐃ.ᐃΔᐃᐃⲆ = function (a, b) {
      this.x = -Math.min(Math.max(-kx.ⲆᐃᐃⲆⲆΔⵠ * 2, a - kx.ⲆᐃᐃⲆⲆΔⵠ - this.ⵠΔΔⵠⵠΔⲆ / 2), kx.w - this.ⵠΔΔⵠⵠΔⲆ);
      this.y = -Math.min(Math.max(-kx.ᐃᐃΔΔᐃΔΔ * 2, b - (kx.ᐃᐃΔΔᐃΔΔ + this.ⲆΔⵠⵠΔⲆⵠ) / 2), kx.ⲆΔⲆ - this.ⲆΔⵠⵠΔⲆⵠ + kx.ᐃᐃΔΔᐃΔΔ);
      this.ᐃΔΔⲆⲆ = this.x;
      this.ⲆᐃⲆⵠⲆΔⵠ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ΔⵠⲆⵠᐃᐃⲆ: 0,
      ᐃΔΔᐃ: 0,
      attack: 0,
      ΔⵠΔ: function () {
        var a = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
        if (a) {
          var b = {
            x: lx.ⲆΔᐃ.x + a.x,
            y: lx.ⲆΔᐃ.y + a.y
          };
        } else {
          b = jo;
        }
        var c = ΔΔⲆ.ΔⲆⲆⵠΔᐃⵠ(rx.Δⵠᐃᐃ, b);
        var d = false;
        this.ᐃΔΔᐃ += tx;
        if (!rx.state) {
          if (a && !(a.action & 16) && this.ᐃΔΔᐃ > 0.2) {
            this.attack = 1;
            d = true;
            this.ᐃΔΔᐃ = 0;
            nx.ᐃᐃᐃⵠⲆⵠΔΔⵠ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ⲆⲆⵠⲆᐃⵠᐃ = c;
        }
        if (!d) {
          this.timeout += tx;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              nx.ⲆᐃᐃᐃᐃⵠΔΔΔ(c);
              this.angle = c;
            }
          }
        }
        if (!lx.ⲆΔⲆᐃᐃ.open && !lx.ᐃΔⵠᐃΔ.open) {
          var e = 0;
          if (qx.ΔᐃᐃⵠΔᐃᐃ()) {
            e |= 1;
          }
          if (qx.ⲆⵠⵠⲆΔΔᐃ()) {
            e |= 2;
          }
          if (qx.ᐃⲆⲆΔⵠΔᐃ()) {
            e |= 4;
          }
          if (qx.ⵠⵠΔⵠᐃᐃⲆ()) {
            e |= 8;
          }
          if (this.ΔⵠⲆⵠᐃᐃⲆ != e) {
            nx.ⲆᐃⵠᐃᐃΔⵠᐃᐃ(e);
          }
          this.ΔⵠⲆⵠᐃᐃⲆ = e;
        }
      }
    };
    this.ΔᐃᐃⲆ = {
      c: 1,
      ⵠⲆΔΔ: 1,
      ⲆΔⲆ: 1,
      ⵠⲆΔ: 1,
      ⲆⲆⲆ: 1,
      ΔΔᐃᐃᐃᐃᐃ: 1,
      ΔΔᐃΔΔⵠΔ: new ΔΔⲆ.ΔᐃᐃΔ(Vg, 0, 1, 0, 3, 3),
      ΔᐃᐃᐃⲆᐃΔ: new ΔΔⲆ.ΔᐃᐃΔ(En, 0, 1, 0, 2, 2),
      ⵠᐃⵠⵠⵠΔᐃ: new ΔΔⲆ.ΔᐃᐃΔ(Zq, 0, 1, 0, 3, 3),
      ⲆΔⲆΔⲆⵠⵠ: new ΔΔⲆ.ΔᐃᐃΔ(true, 0, 1, 0, 3, 3),
      ΔⲆⲆᐃᐃⵠΔ: new ΔΔⲆ.ΔᐃᐃΔ(true, 0, 1, 0, 3, 3),
      ⵠⲆⵠΔⵠΔⵠ: new ΔΔⲆ.ΔᐃᐃΔ(true, 0, 1, 0, 3, 3),
      ⵠⵠⵠᐃⵠ: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ᐃᐃΔᐃᐃᐃΔ, 0, 1, 0, 0, 1),
      ⵠΔⲆⲆΔ: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ᐃᐃΔᐃᐃᐃΔ, 0, 1, 0, 0, 1),
      ⵠⲆᐃᐃΔΔΔ: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ᐃᐃΔᐃᐃᐃΔ, 0, 1, 0, 0, 1),
      ⵠᐃⲆᐃΔᐃⲆ: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ᐃᐃΔᐃᐃᐃΔ, 0, 1, 0, 0, 1),
      ᐃᐃᐃΔΔΔΔ: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ᐃᐃΔᐃᐃᐃΔ, 0, 1, 0, 0, 1),
      ΔⵠΔᐃΔ: new ΔΔⲆ.ΔᐃⵠΔᐃ(ΔΔⲆ.ᐃᐃΔᐃᐃᐃΔ, 0, 1, 0, 0, 1),
      ΔⵠΔ: function () {
        this.ΔΔᐃΔΔⵠΔ.ΔⵠΔ();
        this.ΔᐃᐃᐃⲆᐃΔ.ΔⵠΔ();
        this.ⵠᐃⵠⵠⵠΔᐃ.ΔⵠΔ();
        this.ⲆΔⲆΔⲆⵠⵠ.ΔⵠΔ();
        this.ΔⲆⲆᐃᐃⵠΔ.ΔⵠΔ();
        this.ⵠⲆⵠΔⵠΔⵠ.ΔⵠΔ();
        this.ⵠⵠⵠᐃⵠ.ⲆᐃᐃΔⲆ(this.c);
        this.ⵠΔⲆⲆΔ.ⲆᐃᐃΔⲆ(this.ⵠⲆΔΔ);
        this.ⵠⲆᐃᐃΔΔΔ.ⲆᐃᐃΔⲆ(this.ⲆΔⲆ);
        this.ⵠᐃⲆᐃΔᐃⲆ.ⲆᐃᐃΔⲆ(this.ⵠⲆΔ);
        this.ᐃᐃᐃΔΔΔΔ.ⲆᐃᐃΔⲆ(this.ⲆⲆⲆ);
        this.ΔⵠΔᐃΔ.ⲆᐃᐃΔⲆ(this.ΔΔᐃᐃᐃᐃᐃ);
      }
    };
    this.ⵠⲆⵠᐃΔΔᐃ = xq;
    this.ᐃΔⲆᐃᐃⲆⲆ = false;
    this.ᐃᐃⲆⵠⲆ = bh;
    this.ᐃⵠΔⵠⵠⲆᐃ = Pr;
    this.ᐃⵠⵠᐃ = {
      max: 10,
      ΔΔⲆᐃⵠⲆⵠ: 0,
      ΔⲆᐃⲆⵠ: 0,
      ᐃᐃⵠᐃ: [],
      ᐃΔΔⵠⵠ: [],
      ⲆΔⵠⲆⲆᐃᐃ: function (a, b) {
        if (a === 1) {
          this.ΔⲆᐃⲆⵠ = 6;
        }
        this.ΔΔⲆᐃⵠⲆⵠ += b;
        this.max = 10 + this.ΔΔⲆᐃⵠⲆⵠ + this.ΔⲆᐃⲆⵠ;
      },
      ⲆⲆΔΔΔⲆⵠ: {
        item: -1,
        ⵠᐃ: null,
        ΔᐃⵠᐃⵠⲆⵠ: 0,
        ᐃⵠⲆΔⲆⵠΔ: 0,
        ⲆⵠⵠⲆⲆ: -1,
        ᐃΔᐃⵠᐃ: -1,
        ⵠΔΔᐃⲆ: function (a) {
          if (!!this.ΔᐃⵠᐃⵠⲆⵠ && (a.x !== this.ⲆⵠⵠⲆⲆ || a.y !== this.ᐃΔᐃⵠᐃ)) {
            this.ᐃⵠⲆΔⲆⵠΔ = 1;
          }
        },
        start: function (a, b) {
          this.ⲆⵠⵠⲆⲆ = b.x;
          this.ᐃΔᐃⵠᐃ = b.y;
          this.item = a;
          this.ⵠᐃ = lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ[a].info.ⵠᐃ[2];
          this.ΔᐃⵠᐃⵠⲆⵠ = 1;
        },
        stop: function () {
          this.ΔᐃⵠᐃⵠⲆⵠ = 0;
          this.ᐃⵠⲆΔⲆⵠΔ = 0;
          this.ⲆⵠⵠⲆⲆ = -1;
          this.ᐃΔᐃⵠᐃ = -1;
        },
        release: function () {
          var a = -1;
          var b = lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ;
          var c = 0;
          if (this.ΔᐃⵠᐃⵠⲆⵠ && this.ᐃⵠⲆΔⲆⵠΔ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === Dw) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              ox.ⵠᐃⵠΔᐃΔᐃ();
            }
          }
          this.stop();
          return c;
        },
        ΔᐃⲆΔ: function (a, b) {
          if (this.ΔᐃⵠᐃⵠⲆⵠ && this.ᐃⵠⲆΔⲆⵠΔ) {
            zp(Mo, this.ⵠᐃ, Math.floor(a - this.ⵠᐃ.width / 2), Math.floor(b - this.ⵠᐃ.height / 2));
          }
        }
      },
      ⲆᐃΔᐃᐃⲆᐃΔⵠ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ᐃᐃⵠᐃ[a[d][0]] == a[d][1]) {
            return true;
          }
        }
        return sh;
      },
      ⵠᐃᐃΔΔ: function (a) {
        for (var b = 0; b < this.ᐃΔΔⵠⵠ.length; b++) {
          if (this.ᐃΔΔⵠⵠ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ⲆΔⲆΔⵠᐃⵠ: function (a, b) {
        this.ᐃᐃⵠᐃ[a] = 0;
        this.ᐃΔΔⵠⵠ.splice(b, 1);
        ox.ⵠᐃⵠΔᐃΔᐃ();
      },
      ΔⵠⲆⵠΔΔᐃ: function (a, b, c) {
        ΔⵠΔ = Zq;
        this.ᐃᐃⵠᐃ[a] = Math.max(0, this.ᐃᐃⵠᐃ[a] - b);
        if (!this.ᐃᐃⵠᐃ[a] && c >= 0) {
          this.ⲆΔⲆΔⵠᐃⵠ(a, c);
        }
      }
    };
    this.ΔⵠᐃᐃⲆ = {
      enabled: bh,
      translate: {
        x: 0,
        y: 0
      },
      ΔⲆⲆᐃᐃᐃⲆ: function () {
        if (kx.mode == 1 && !lx.ᐃΔⲆᐃᐃⲆⲆ) {
          lx.ΔⵠᐃᐃⲆ.enabled = !lx.ΔⵠᐃᐃⲆ.enabled;
          if (lx.ΔⵠᐃᐃⲆ.enabled) {
            ox.options.ΔⲆΔΔᐃΔⲆ.display = "inline-block";
          } else {
            ox.options.ΔⲆΔΔᐃΔⲆ.display = "none";
          }
        }
      }
    };
    ox.options.ΔⲆΔΔᐃΔⲆ.display = "none";
    this.ⲆⲆΔᐃᐃ = {
      enabled: ln,
      translate: {
        y: 0,
        x: 0
      },
      ⵠⵠΔⵠΔ: 0,
      ΔⲆⲆᐃᐃᐃⲆ: function () {
        lx.ⲆⲆΔᐃᐃ.enabled = !lx.ⲆⲆΔᐃᐃ.enabled;
        if (lx.ⲆⲆΔᐃᐃ.enabled) {
          ox.options.ⵠΔⵠΔⲆⲆᐃ.display = "inline-block";
        } else {
          ox.options.ⵠΔⵠΔⲆⲆᐃ.display = "none";
        }
      },
      ΔⵠΔ: function () {
        if (!!this.enabled && lx.ⲆᐃΔΔ.id < 0 && !ox.ⲆⲆⵠᐃ.open) {
          if (lx.ΔᐃᐃⲆ.ⲆΔⲆ < 0.35) {
            if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[110]) {
              nx.ⵠΔⵠᐃΔ(110, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(110));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[192]) {
              nx.ⵠΔⵠᐃΔ(192, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(192));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[196]) {
              nx.ⵠΔⵠᐃΔ(196, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(196));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[189]) {
              nx.ⵠΔⵠᐃΔ(189, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(189));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[207]) {
              nx.ⵠΔⵠᐃΔ(207, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(207));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[205]) {
              nx.ⵠΔⵠᐃΔ(205, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(205));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[209]) {
              nx.ⵠΔⵠᐃΔ(209, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(209));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[143]) {
              nx.ⵠΔⵠᐃΔ(143, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(143));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[117]) {
              nx.ⵠΔⵠᐃΔ(117, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(117));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[138]) {
              nx.ⵠΔⵠᐃΔ(138, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(138));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[133]) {
              nx.ⵠΔⵠᐃΔ(133, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(133));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[145]) {
              nx.ⵠΔⵠᐃΔ(145, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(145));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[136]) {
              nx.ⵠΔⵠᐃΔ(136, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(136));
            } else if (lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[197]) {
              nx.ⵠΔⵠᐃΔ(197, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(197));
            }
          } else if (lx.ΔᐃᐃⲆ.ⵠⲆΔ < 0.35 && lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[127]) {
            nx.ⵠΔⵠᐃΔ(127, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(127));
          }
        }
      }
    };
    ox.options.ⵠΔⵠΔⲆⲆᐃ.display = "none";
    this.ⲆᐃΔΔ = {
      id: -1,
      ⵠⲆⵠΔ: -1,
      timeout: new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 1, 0, 1, 1),
      ⲆᐃⵠⲆⲆ: xq,
      ΔⲆΔΔ: -1,
      mode: 0,
      label: [],
      ΔΔᐃᐃᐃ: [],
      ΔᐃⲆⵠⲆ: F,
      ΔⵠΔᐃⵠ: hj,
      ⵠⵠⵠⲆⵠᐃᐃ: false,
      ᐃⵠᐃᐃⲆ: false,
      ⲆⲆΔᐃᐃΔⲆⵠᐃ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ΔΔᐃΔᐃΔⲆⵠΔ: function (a) {
        this.ΔᐃⲆⵠⲆ = a;
        var b = ox.ⲆⲆⵠᐃ;
        if (b.open) {
          b.ⵠⵠⵠᐃⵠⲆⵠ(b.button);
        }
        this.ΔⵠΔ();
      },
      ⵠᐃᐃⲆᐃᐃⵠᐃⲆ: function (a) {
        var b = Bt[a];
        this.id = a;
        this.ⲆᐃⵠⲆⲆ = Bg;
        kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
        this.timeout.ⲆΔᐃᐃⲆⲆⵠ = b.time * 8;
        this.ⵠⲆⵠΔ = b.ⵠⲆⵠΔ;
      },
      ⵠⲆⵠⲆΔᐃᐃᐃΔ: function (a) {
        var b = Bt[a];
        this.id = a;
        this.ⲆᐃⵠⲆⲆ = true;
        var c = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
        if (c && c.right == 28) {
          this.timeout.ⲆΔᐃᐃⲆⲆⵠ = b.time * 3;
        } else {
          this.timeout.ⲆΔᐃᐃⲆⲆⵠ = b.time;
        }
        this.ⵠⲆⵠΔ = b.ⵠⲆⵠΔ;
        for (var d = 0; d < b.r.length; d++) {
          var e = b.r[d];
          lx.ᐃⵠⵠᐃ.ΔⵠⲆⵠΔΔᐃ(e[0], e[1], lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(e[0]));
        }
        ox.ⵠᐃⵠΔᐃΔᐃ();
      },
      ΔⵠΔ: function () {
        this.ΔΔᐃᐃᐃ = [];
        if (ox.ᐃᐃⲆΔⵠ.ⲆᐃΔΔ === 1) {
          ox.ᐃᐃⲆΔⵠ.display = 0;
        }
        for (var a in Bt) {
          var b = Bt[a];
          var c = true;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (lx.ᐃⵠⵠᐃ.max >= 16 && b.id === 100) {
                c = false;
                break;
              }
              if (b.w > this.ΔᐃⲆⵠⲆ || b.f > this.ΔⵠΔᐃⵠ || b.ⲆⲆⲆ > this.ⵠⵠⵠⲆⵠᐃᐃ || b.e > this.ᐃⵠᐃᐃⲆ) {
                c = F;
                break;
              }
              var f = b.r[d];
              if (!lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[f[0]] || lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[f[0]] < f[1]) {
                c = Ag;
                break;
              }
            }
            if (c) {
              this.ΔΔᐃᐃᐃ.push(ox.ᐃⵠΔ[b.id]);
            }
          }
        }
        ox.ⲆⵠΔⲆⲆΔⲆ();
        ox.ⵠΔⵠⵠⲆⵠⲆ();
        ox.Ⲇᐃⵠⵠᐃⵠⵠ();
        ox.ⵠⵠᐃΔⵠⵠⵠ();
        ox.ⵠΔΔᐃΔⲆΔ();
        ox.ᐃⲆⵠⵠⵠᐃⲆ();
        ox.sign.ⲆⵠⵠⲆⵠΔⵠ();
      },
      ⵠⵠⲆⵠΔⲆΔ: function () {
        this.id = -1;
        this.ⲆᐃⵠⲆⲆ = ig;
        this.timeout.ΔⵠⲆ = 0;
        this.timeout.ⲆⲆⲆ = false;
        this.ΔⵠΔ();
      }
    };
    this.ⲆⵠΔΔⲆΔΔ = {
      message: qn,
      ΔᐃⲆΔ: Mv
    };
    this.alert = {
      timeout: new ΔΔⲆ.ΔᐃᐃΔ(false, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ΔᐃⲆΔ: Jv,
      list: []
    };
    this.ΔⲆᐃΔⵠ = {
      ⵠΔ: document.createElement("canvas"),
      ΔⲆΔΔᐃ: [],
      ΔⵠΔ: true,
      translate: {
        x: 0,
        y: 0
      },
      sort: function () {
        var a = [];
        for (var b = kx.ⲆⲆⵠⵠ, c = 0; c < b.length; c++) {
          if (b[c].ⲆΔΔΔᐃ) {
            a.push({
              id: c,
              ᐃⵠⲆⲆ: b[c].ᐃᐃΔᐃⵠ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ᐃⵠⲆⲆ - a.ᐃⵠⲆⲆ;
        });
        this.ΔⲆΔΔᐃ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ΔⲆΔΔᐃ.push(a[c].id);
        }
        this.ΔⵠΔ = ni;
      },
      ᐃⵠⵠΔᐃ: function (a) {
        for (var b = kx.ⲆⲆⵠⵠ, c = 0; c < b.length; c++) {
          b[c].ᐃᐃΔᐃⵠ = 0;
        }
        b[lx.id].ᐃᐃΔᐃⵠ = ΔΔⲆ.ᐃᐃΔⲆᐃⲆᐃ(a[1]);
        this.ΔⲆΔΔᐃ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ΔⲆΔΔᐃ.push(a[c]);
          b[a[c]].ᐃᐃΔᐃⵠ = ΔΔⲆ.ᐃᐃΔⲆᐃⲆᐃ(a[c + 1]);
        }
        this.ΔⵠΔ = true;
      }
    };
    this.ΔⲆᐃΔⵠ.ⵠΔ.width = Go * 180;
    this.ΔⲆᐃΔⵠ.ⵠΔ.height = Go * 300;
    this.ΔⲆᐃΔⵠ.ᐃ = this.ΔⲆᐃΔⵠ.ⵠΔ.getContext("2d");
    this.ᐃΔⵠᐃΔ = {
      open: false,
      input: document.getElementById("commandInput"),
      ΔⵠᐃᐃⲆᐃΔ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ⵠΔⵠᐃᐃΔΔΔΔ: function (a) {
        this.ΔⵠᐃᐃⲆᐃΔ.innerHTML += a;
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(Bo / 2 - 300) + "px";
        this.style.top = Math.floor(cq / 2 - 250) + "px";
      },
      ᐃⲆΔⵠᐃⲆᐃΔⲆ: function () {
        this.ΔⵠᐃᐃⲆᐃΔ.innerHTML = "";
      },
      ⲆᐃⲆⲆΔ: function () {
        this.open = $n;
        this.style.display = "none";
      },
      ⵠⲆΔΔⲆ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % 3 == 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ⲆᐃᐃⵠΔ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ⵠΔⵠᐃᐃΔΔΔΔ(f);
        this.ᐃᐃⵠᐃᐃᐃᐃⲆΔ();
      },
      ᐃᐃⵠᐃᐃᐃᐃⲆΔ: function () {
        this.ΔⵠᐃᐃⲆᐃΔ.scrollTop = this.ΔⵠᐃᐃⲆᐃΔ.scrollHeight;
      },
      ⲆᐃⲆⲆΔⵠΔ: function (b) {
        switch (b) {
          case "clean":
            this.ᐃⲆΔⵠᐃⲆᐃΔⲆ();
            return Zq;
          case "list":
            var c = "";
            const a = Ph.document.createElement("div");
            for (var d = kx.ⲆⲆⵠⵠ, f = 0; f < d.length; f++) {
              var g = d[f];
              if (g.ⲆΔΔΔᐃ) {
                a.innerText = g.ᐃᐃⵠⲆΔ;
                c += a.innerHTML + " <span style=\"color:green\">#" + f + "</span><br />";
              }
            }
            this.ⲆᐃᐃⵠΔ("list", 1, "List all connected players", c);
            return true;
          case "weapon-list":
            this.ⲆᐃᐃⵠΔ("Weapons", 1, "List all weapons in the game", this.ⵠⲆΔΔⲆ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
            return Ho;
          case "tool-list":
            this.ⲆᐃᐃⵠΔ("Tools", 1, "List all tools in the game", this.ⵠⲆΔΔⲆ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return Ns;
          case "survival-list":
            this.ⲆᐃᐃⵠΔ("Survival Items", 1, "List all survival items in the game", this.ⵠⲆΔΔⲆ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return true;
          case "resource-list":
            this.ⲆᐃᐃⵠΔ("Resources", 1, "List all resources in the game", this.ⵠⲆΔΔⲆ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return true;
          case "food-list":
            this.ⲆᐃᐃⵠΔ("Food", 1, "List all food in the game", this.ⵠⲆΔΔⲆ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return ni;
          case "hat-list":
            this.ⲆᐃᐃⵠΔ("Hats", 1, "List all hats in the game", this.ⵠⲆΔΔⲆ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return kg;
          case "building-list":
            this.ⲆᐃᐃⵠΔ("Buildings", 1, "List all buildings in the game", this.ⵠⲆΔΔⲆ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return true;
          case "biome-list":
            this.ⲆᐃᐃⵠΔ("Biomes list", 1, "List all available biomes in the game", this.ⵠⲆΔΔⲆ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return true;
          case "help-config":
            this.ⲆᐃᐃⵠΔ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return Zq;
          case "pos":
            d = kx.ⵠⵠΔ[0];
            f = 0;
            for (; f < d.length; f++) {
              var e = d[f];
              if (e.ⵠⵠⲆᐃ === lx.id) {
                this.ⲆᐃᐃⵠΔ("pos", 1, "Your position is " + Math.floor(e.x / 100) + ":" + Math.floor(e.y / 100));
                return true;
              }
            }
            break;
          case "help-admin":
            this.ⲆᐃᐃⵠΔ("help-admin", 1, "List all available commands for admin only", this.ⵠⲆΔΔⲆ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return pl;
          case "help":
            this.ⲆᐃᐃⵠΔ("help", 1, "List all available commands", this.ⵠⲆΔΔⲆ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return true;
        }
        return false;
      },
      ᐃΔᐃᐃᐃᐃⵠⲆⵠ: function () {
        if (!this.open) {
          this.open = ni;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ᐃⲆᐃᐃΔΔᐃ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ⲆᐃⲆⲆΔⵠΔ(a)) {
            nx.ᐃᐃΔΔᐃᐃⲆΔᐃ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ⲆΔⲆᐃᐃ = {
      open: false,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ΔⵠΔ: function () {
        this.style.left = Math.floor(Bo / 2 - 150) + "px";
        this.style.top = Math.floor(cq / 2 + 80) + "px";
      },
      ⲆᐃⲆⲆΔ: function () {
        this.open = bh;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (lx.alert.text) {
              lx.alert.list.push(b);
            } else {
              lx.alert.text = b;
            }
            ox.ᐃⲆᐃΔⲆᐃΔ = 0;
          } else {
            ox.ᐃⲆᐃΔⲆᐃΔ = 1;
          }
        }
      },
      ⲆᐃⲆⲆΔⵠΔ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return pl;
        }
        return gl;
      },
      ⲆΔⵠΔᐃ: function () {
        if (this.open) {
          this.open = false;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ⲆᐃⲆⲆΔⵠΔ(a)) {
              nx.ΔΔΔⵠᐃⲆΔΔᐃ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = En;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ⲆⵠᐃⲆⲆⵠᐃ = {
      ⲆᐃⲆᐃΔ: [],
      ΔⵠΔ: function (a) {
        a.y += tx * 80 * a.ᐃⵠⲆⲆ;
        a.x += tx * 80 * a.c;
        a.ⵠΔⲆⲆΔ -= tx / 6;
        if (a.ⵠΔⲆⲆΔ > 0.2) {
          a.alpha = Math.min(a.alpha + tx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - tx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(ts.ⲆᐃⵠᐃᐃⲆⵠ * (Bo / 1366), ts.ⲆᐃⵠᐃᐃⲆⵠ + 10) * Math.max(Math.min(kx.ᐃΔⵠⵠⲆ + 1000, 3000) / 3000, 0));
        if (this.ⲆᐃⲆᐃΔ.length < c) {
          var d = Math.floor(Math.random() * ts.ᐃⲆⲆᐃΔΔᐃ);
          var e = -lx.ⲆΔᐃ.x + Math.floor(Math.random() * lx.ⲆΔᐃ.w);
          var f = -lx.ⲆΔᐃ.y + Math.floor(Math.random() * lx.ⲆΔᐃ.ⲆΔⲆ);
          var g = Math.random(Math.PI);
          this.ⲆᐃⲆᐃΔ.push(new kf(d, e, f, g));
        }
      }
    };
    this.ⵠΔⲆⵠΔΔᐃ = 0;
    this.ⵠᐃⵠΔⲆ = 0;
    this.ᐃᐃΔΔᐃ = {
      ⲆᐃⲆᐃΔ: [],
      ΔⵠⲆΔⲆ: 0,
      ΔⵠⵠΔⲆ: 0,
      ΔⵠΔ: function (a) {
        a.y += tx * (200 + this.ΔⵠⵠΔⲆ * 800) * a.ᐃⵠⲆⲆ;
        a.x += tx * (200 + this.ΔⵠⵠΔⲆ * 800) * a.c;
        a.ⵠΔⲆⲆΔ -= tx / 6;
        if (a.ⵠΔⲆⲆΔ > 0.2) {
          a.alpha = Math.min(a.alpha + tx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - tx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.ΔⵠⵠΔⲆ + 0.1) * ts.ᐃΔᐃⲆΔⵠⲆ * (Bo / 1366), (this.ΔⵠⵠΔⲆ + 0.1) * ts.ᐃΔᐃⲆΔⵠⲆ + 10) * Math.max(Math.min(kx.ⲆⵠⲆΔΔ + 1000, 3000) / 3000, 0));
        if (this.ⲆᐃⲆᐃΔ.length < c) {
          var d = Math.floor(Math.random() * ts.ᐃⲆⲆᐃΔΔᐃ);
          var e = -lx.ⲆΔᐃ.x + Math.floor(Math.random() * lx.ⲆΔᐃ.w);
          var f = -lx.ⲆΔᐃ.y + Math.floor(Math.random() * lx.ⲆΔᐃ.ⲆΔⲆ);
          var g = Math.random(Math.PI);
          if (lx.ᐃᐃΔΔᐃ.ΔⵠⲆΔⲆ !== 0) {
            e -= lx.ⲆΔᐃ.w / 2;
          }
          this.ⲆᐃⲆᐃΔ.push(new kf(d, e, f, g));
        }
      }
    };
    this.ΔᐃⵠⵠΔ = {
      ⲆᐃⲆᐃΔ: [],
      ΔⵠⲆΔⲆ: 0,
      ΔⵠⵠΔⲆ: 0,
      ΔⵠΔ: function (a) {
        if (qx.ᐃⲆⲆΔⵠΔᐃ()) {
          a.y += tx * a.ΔⲆᐃᐃΔ * (5.5 + this.ΔⵠⵠΔⲆ * 10);
        } else {
          a.y += tx * a.ΔⲆᐃᐃΔ * (5 + this.ΔⵠⵠΔⲆ * 10);
        }
        a.ⵠΔⲆⲆΔ -= tx / 2;
        if (qx.ΔᐃᐃⵠΔᐃᐃ()) {
          a.x += tx * (100 + this.ΔⵠⵠΔⲆ * 400);
        } else if (qx.ⲆⵠⵠⲆΔΔᐃ()) {
          a.x -= tx * (130 - this.ΔⵠⵠΔⲆ * 400);
        } else {
          a.x -= tx * (30 - this.ΔⵠⵠΔⲆ * 400);
        }
        if (a.ⵠΔⲆⲆΔ > 0.2) {
          a.alpha = Math.min(a.alpha + tx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - tx * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔⵠⵠΔⲆ * 1.5 + 0.5) * ts.ⲆⵠΔⵠΔΔⵠ * (Bo / 1366), (this.ΔⵠⵠΔⲆ * 1.5 + 0.5) * ts.ⲆⵠΔⵠΔΔⵠ + 10) * Math.max(Math.min(kx.ᐃΔᐃᐃⵠ + 1000, 3000) / 3000, 0));
        if (this.ⲆᐃⲆᐃΔ.length < b) {
          var c = Math.floor(Math.random() * ts.ⲆᐃΔⲆⲆΔᐃ);
          var d = -lx.ⲆΔᐃ.x + Math.floor(Math.random() * lx.ⲆΔᐃ.w);
          var e = -lx.ⲆΔᐃ.y + Math.floor(Math.random() * 400 * Go - Go * 200);
          this.ⲆᐃⲆᐃΔ.push(new kf(c, d, e, 0));
        }
      }
    };
    this.ᐃⲆⲆⲆ = [];
    for (var d = 0; d < 4; d++) {
      this.ᐃⲆⲆⲆ.push(new c());
    }
  }
  function Rf() {
    Math.random();
    return "e";
  }
  function Ff() {
    Math.random();
    return "i";
  }
  function jf() {
    Math.random();
    return "n";
  }
  function xf() {
    Math.random();
    return "a";
  }
  function Sf() {
    Math.random();
    return "t";
  }
  function Bf() {
    Math.random();
    return "p";
  }
  ᐃΔⲆᐃⲆᐃΔΔΔ = 1;
  function Lf(b, c) {
    this.ⵠΔ = b;
    this.ᐃ = c;
    var d = this;
    this.ΔⵠᐃⵠᐃⲆΔ = false;
    this.ⲆⲆⵠΔᐃᐃⲆ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        x: 0,
        y: 0
      },
      ΔⵠΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ᐃⵠⵠΔᐃ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + lx.ⵠᐃⲆΔΔΔᐃ.ⵠⵠᐃΔᐃΔΔ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + yb[335] + " : " + lx.ΔΔᐃ + "</div><div class=\"stats\"> " + yb[334] + " : " + lx.ⵠᐃⲆΔΔΔᐃ.ⵠΔᐃⵠΔ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + yb[333] + " : " + lx.ⵠᐃⲆΔΔΔᐃ.ᐃᐃΔᐃⵠ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + lx.ⵠᐃⲆΔΔΔᐃ.ΔΔᐃᐃⵠᐃⵠ + " " + yb[332] + "</div></div><div id=\"shop_points\">" + yb[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + yb[329] + "</div><div class=\"social\" id=\"fffacebook\">" + yb[330] + "</div></div><div id=\"bbback\">" + yb[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", Wf, vj);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          mx.ⲆᐃⲆⲆΔ(jx.ⲆΔⵠΔᐃ);
        }, false);
        document.getElementById("fffacebook").addEventListener("mouseup", Zf, bh);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Bx + "getBreadAndScore?userid=" + Ix);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - jx.ⲆᐃᐃⲆⵠ;
              jx.ⲆᐃᐃⲆⵠ = b.b;
              jx.ᐃᐃΔᐃⵠ = b.s;
              jx.ᐃᐃⲆⵠⵠ = jx.ΔⲆᐃᐃⵠᐃⵠ(jx.ᐃᐃΔᐃⵠ);
              jx.ⵠΔΔΔⲆᐃΔ = jx.ᐃⵠΔᐃᐃΔⵠ(jx.ᐃᐃΔᐃⵠ);
              jx.ΔᐃⵠⵠΔⵠΔ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var g = 0;
    function e() {
      d.ΔⵠΔ();
      if (++g != 30) {
        Ph.setTimeout(e, 33);
      } else {
        d.ΔⵠΔ();
      }
    }
    this.ⲆᐃⲆⲆΔ = function (a) {
      if (d.ΔⵠᐃⵠᐃⲆΔ === is) {
        d.ΔⵠᐃⵠᐃⲆΔ = vl;
        f = a;
        i = -1;
        j();
        wx();
      }
    };
    var i = -1;
    function j() {
      d.ΔⵠΔ();
      if (++i == 30) {
        d.stop();
        d.ⲆⲆⵠΔᐃᐃⲆ.style.display = "none";
        f();
        return;
      }
      Ph.setTimeout(j, 33);
    }
    this.ⲆᐃΔᐃⲆ = Pg;
    this.stop = function () {
      this.ⲆᐃΔᐃⲆ = sh;
    };
    this.ⲆΔⵠΔᐃ = function () {
      zx();
      document.getElementById("game_body").style.backgroundColor = ts.ⵠⲆⲆᐃᐃ[ix.time];
      d.ⲆⲆⵠΔᐃᐃⲆ.ᐃⵠⵠΔᐃ();
      jx.ΔᐃⵠⲆⲆ.style.display = "inline-block";
      d.ⲆᐃΔᐃⲆ = true;
      d.ΔⵠᐃⵠᐃⲆΔ = Jk;
      i = -1;
      g = 0;
      e();
    };
    this.ΔⵠΔ = function () {
      this.ⲆⲆⵠΔᐃᐃⲆ.translate.x = Math.floor(dq - 275);
      this.ⲆⲆⵠΔᐃᐃⲆ.translate.y = Math.floor(eq - this.ⲆⲆⵠΔᐃᐃⲆ.height - 28);
      jx.ΔᐃⵠⲆⲆ.translate.x = this.ⲆⲆⵠΔᐃᐃⲆ.translate.x - 350;
      jx.ΔᐃⵠⲆⲆ.translate.y = this.ⲆⲆⵠΔᐃᐃⲆ.translate.y + 0;
      jx.ΔᐃⵠⲆⲆ.ΔⵠΔ();
      if (g != 30 || i != -1) {
        var a = 0;
        if (g != 30) {
          a = 1500 / (g + 1) - 50;
        }
        if (i != -1) {
          a = -(1750 / (30 - i + 1) - 48);
        }
        this.ⲆⲆⵠΔᐃᐃⲆ.translate.y -= a;
      }
      this.ⲆⲆⵠΔᐃᐃⲆ.ΔⵠΔ();
    };
    this.ΔᐃⲆΔ = function () {
      Uc();
      lx.alert.ΔᐃⲆΔ("#FFF", "#000");
    };
  }
  function Wf() {
    ΔΔⲆ.ⵠᐃⲆⲆⵠⵠΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + lx.ΔΔᐃ + "%20days%20with%20" + lx.ⵠᐃⲆΔΔΔᐃ.ᐃᐃΔᐃⵠ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Gf(b, c, d) {
    const e = ~(b & 23736) & b | ~(b & 23736) & 23736;
    const f = ~(c & 34601) & (c | 34601);
    const g = (1 + (182 + d) * 22695477) % 4294967296;
    const a = xx(e, f, g);
    const h = ex(e, f, g);
    return (16 << ((a ^ h) >> 0 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (0 << ((a ^ h) >> 24 & 255)) + (24 << ((a ^ h) >> 16 & 255));
  }
  function qf(c, D) {
    this.ⵠΔ = c;
    this.ᐃ = D;
    if (Ph.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⵠⵠᐃⲆᐃᐃⲆ = "default";
      this.ΔΔΔⲆⵠⲆⵠ = "pointer";
    } else {
      this.ⵠⵠᐃⲆᐃᐃⲆ = "url('img/cursor0.png'), default";
      this.ΔΔΔⲆⵠⲆⵠ = "url('img/cursor1.png'), pointer";
    }
    var O = this;
    function e(c, d, e, f, i) {
      var a = this;
      for (var j = d + 9, k = 0, m = f, n = d; j > n; n++) {
        O.buttons[n].info.callback = o;
        O.buttons[n].info.ᐃΔᐃⲆᐃⵠᐃⲆᐃ = c;
      }
      function p() {
        var a = c[m];
        jx.ⵠᐃⲆⵠⲆⵠⵠ = Iw(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
        if (a.level !== undefined) {
          jx.ⵠⲆⵠⲆᐃᐃⵠ = Iw("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Tj, 10, 8);
        } else {
          jx.ⵠⲆⵠⲆᐃᐃⵠ = Iw("by " + a.ᐃᐃΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
        }
      }
      function o() {
        if (this.ⲆⵠΔⵠⲆⲆΔ !== m && this.ⲆⵠΔⵠⲆⲆΔ !== -1) {
          if (this.ΔᐃⵠⵠᐃⲆⲆ > 0) {
            if (d === ⲆᐃΔⵠⵠᐃΔ) {
              w(u, da, "none");
            } else {
              w(y, da, "none");
            }
          } else if (ⲆᐃΔⵠⵠᐃΔ === d) {
            w(u, ea, "inline-block");
          } else {
            w(y, ea, "inline-block");
          }
          m = this.ⲆⵠΔⵠⲆⲆΔ;
          e(this.ⲆⵠΔⵠⲆⲆΔ);
          p();
        }
      }
      this.ᐃⵠᐃⲆΔ = function () {
        for (var a = d, b = k * 3; a < j && b < c.length; a++, b++) {
          if (ⵠᐃᐃ.ⲆᐃⲆⵠⲆⵠᐃ !== c[b].ⵠⲆᐃ || i[b] !== 0) {
            O.buttons[a].info.ⲆⵠΔⵠⲆⲆΔ = b;
            for (var e = 0; e < 3; e++) {
              O.buttons[a].info.ⵠᐃ[e] = ⲆΔⵠⵠᐃ[c[b].ⵠⲆᐃ][e];
              O.buttons[a].info.active = ea;
              O.buttons[a].info.ΔᐃⵠⵠᐃⲆⲆ = i[b];
            }
          } else {
            O.buttons[a].info.ⲆⵠΔⵠⲆⲆΔ = -1;
            O.buttons[a].info.active = da;
          }
        }
        for (; j > a; a++) {
          O.buttons[a].info.ⲆⵠΔⵠⲆⲆΔ = -1;
          O.buttons[a].info.active = da;
        }
        p();
      };
      O.buttons[j].info.callback = function () {
        if (k > 0) {
          k--;
        }
        a.ᐃⵠᐃⲆΔ();
      };
      O.buttons[j + 1].info.callback = function () {
        if (c.length > k * 3 + 9) {
          k++;
        }
        a.ᐃⵠᐃⲆΔ();
      };
    }
    function k() {
      var b = Number(ⵠᐃⲆⵠ.get("starve_crate"));
      var c = Number(ⵠᐃⲆⵠ.get("starve_dead"));
      var d = Number(ⵠᐃⲆⵠ.get("starve_book"));
      var e = Number(ⵠᐃⲆⵠ.get("starve_bag"));
      var f = Number(ⵠᐃⲆⵠ.get("starve_skin"));
      var a = Number(ⵠᐃⲆⵠ.get("starve_accessory"));
      O.ᐃⵠᐃⲆ = f || 0;
      O.ᐃⲆΔᐃⵠ = d || 0;
      O.ⵠⵠⲆᐃᐃ = b || 1;
      O.ⲆΔⲆⲆⵠ = a || 0;
      O.ΔⲆᐃⲆⵠ = e || 0;
      O.ⲆᐃⵠΔⲆ = c || 0;
    }
    function a() {
      for (var a = ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ, b = 0; a.length > b; b++) {
        if (ⵠᐃᐃ.Δᐃⵠⵠⵠ === a[b].ⵠⲆᐃ) {
          O.unlock.ᐃⵠᐃⲆ[b] = 1;
        } else {
          O.unlock.ᐃⵠᐃⲆ[b] = 0;
        }
      }
      a = ΔⵠⲆⲆ.ᐃⲆⲆⲆΔ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ⵠⲆᐃ === ⵠᐃᐃ.Δᐃⵠⵠⵠ) {
          O.unlock.ⲆΔⲆⲆⵠ[b] = 1;
        } else {
          O.unlock.ⲆΔⲆⲆⵠ[b] = 0;
        }
      }
      a = ΔⵠⲆⲆ.ᐃᐃⲆΔ;
      b = 0;
      for (; a.length > b; b++) {
        if (ⵠᐃᐃ.Δᐃⵠⵠⵠ === a[b].ⵠⲆᐃ) {
          O.unlock.ΔⲆᐃⲆⵠ[b] = 1;
        } else {
          O.unlock.ΔⲆᐃⲆⵠ[b] = 0;
        }
      }
      a = ΔⵠⲆⲆ.ⲆΔⲆⲆⲆ;
      b = 0;
      for (; b < a.length; b++) {
        if (ⵠᐃᐃ.Δᐃⵠⵠⵠ === a[b].ⵠⲆᐃ) {
          O.unlock.ᐃⲆΔᐃⵠ[b] = 1;
        } else {
          O.unlock.ᐃⲆΔᐃⵠ[b] = 0;
        }
      }
      a = ΔⵠⲆⲆ.ᐃⵠⵠΔⵠ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ⵠⲆᐃ === ⵠᐃᐃ.Δᐃⵠⵠⵠ) {
          O.unlock.ⵠⵠⲆᐃᐃ[b] = 1;
          O.unlock.ⲆᐃⵠΔⲆ[b] = 1;
        } else {
          O.unlock.ⵠⵠⲆᐃᐃ[b] = 0;
          O.unlock.ⲆᐃⵠΔⲆ[b] = 0;
        }
      }
    }
    this.waiting = false;
    this.ΔΔⵠΔⵠΔᐃ = 0;
    this.ⵠⵠⵠⲆⵠΔΔ = -1;
    this.ⲆⲆⵠⵠΔⲆⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      angle: 0,
      ⵠᐃ: ᐃΔ[301],
      ΔᐃⲆΔ: function () {
        this.angle += tx * 2;
        D.save();
        D.translate(this.translate.x + this.ⵠᐃ.width / 2, this.translate.y + this.ⵠᐃ.height / 2);
        D.rotate(this.angle);
        zp(D, this.ⵠᐃ, -this.ⵠᐃ.width / 2, -this.ⵠᐃ.height / 2);
        D.restore();
      }
    };
    this.ΔⲆⵠᐃᐃⲆⵠ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        x: 0,
        y: 0
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆᐃᐃⲆⵠ = 0;
    this.ⵠΔΔⵠΔⲆⲆ = -1;
    this.ⵠⵠⵠΔᐃΔᐃ = Tj;
    this.ⵠⵠⵠⵠⲆⵠⲆ = "";
    this.ΔΔᐃΔΔⲆᐃ = "";
    this.ΔΔⵠⵠᐃᐃΔ = undefined;
    this.ᐃᐃⲆⵠⵠ = 0;
    this.ᐃΔⲆΔⲆΔⲆ = -1;
    this.ᐃⲆⵠΔⲆⲆΔ = undefined;
    this.ΔᐃⵠⵠΔⵠΔ = 0;
    this.ⵠΔΔΔⲆᐃΔ = 0;
    this.ΔⲆΔΔᐃⵠⵠ = 0;
    this.ⵠΔᐃⵠΔ = 0;
    this.ⵠΔᐃⵠΔⵠᐃ = 0;
    this.time = 0;
    this.ᐃᐃΔᐃⵠ = 0;
    this.ΔⲆⵠᐃⲆᐃⵠ = 0;
    this.ⲆᐃⲆⲆΔⵠⵠ = 0;
    this.ⵠⲆⵠΔᐃΔⵠ = 0;
    this.ⲆⵠⵠⲆΔⵠⲆ = 0;
    this.ΔⵠᐃⲆⵠⵠⵠ = [];
    this.ΔⲆΔⵠⲆ = -1;
    this.ⲆᐃᐃΔⵠⵠⲆ = -1;
    this.ᐃΔⲆᐃΔⲆᐃ = -1;
    this.ΔⵠⲆᐃΔⲆⲆ = qn;
    this.ᐃⲆΔⵠΔⵠΔ = undefined;
    this.ΔΔⲆᐃⲆᐃΔ = -1;
    this.ⵠΔΔΔⲆⲆᐃ = -1;
    this.ⵠΔⵠⲆⲆⲆⵠ = -1;
    this.ⵠΔΔᐃᐃΔⵠ = -1;
    this.ΔΔⲆⲆⵠⲆⵠ = El;
    this.ⵠⵠΔᐃⲆΔⵠ = undefined;
    this.ᐃⲆΔᐃⵠⲆΔ = Yj;
    this.ⵠᐃⲆⵠⲆⵠⵠ = ie;
    this.ⵠⲆⵠⲆᐃᐃⵠ = undefined;
    this.ΔΔⵠΔΔⲆⲆ = _g;
    this.ΔᐃⵠᐃⲆⲆᐃ = undefined;
    this.ⲆⲆΔⲆΔⵠΔ = undefined;
    this.ⵠⲆⲆⵠⵠΔᐃ = Wh;
    this.ᐃⲆΔᐃᐃⲆⲆ = 3;
    this.ⵠΔⲆΔ = 0;
    this.ⲆⲆΔⲆⲆᐃⲆⲆⲆ = false;
    this.ΔⲆΔⲆᐃ = ⵠᐃⲆⵠ.get("starve_quality") ? ⵠᐃⲆⵠ.get("starve_quality") : "high";
    if (this.ΔⲆΔⲆᐃ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ΔⲆΔⲆᐃ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ΔⲆΔⲆᐃ = 0;
    }
    this.ⵠᐃᐃΔⵠⵠⵠᐃΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ⵠᐃⲆⵠ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      ox.ᐃᐃⲆΔⵠᐃⵠ();
      jx.ΔⲆΔⲆᐃ = 1;
    };
    this.ⲆⲆⲆᐃᐃΔⲆᐃᐃ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ⵠᐃⲆⵠ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (pr / rr);
      ox.ᐃᐃⲆΔⵠᐃⵠ();
      jx.ΔⲆΔⲆᐃ = 0;
    };
    if (ⵠᐃⲆⵠ.get("starve_mapping") === undefined && Or === "FR") {
      qx.ᐃⵠⲆⵠᐃᐃⵠ();
      this.mapping = "azerty";
    } else {
      this.mapping = ⵠᐃⲆⵠ.get("starve_mapping") ? ⵠᐃⲆⵠ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      qx.ᐃⵠⲆⵠᐃᐃⵠ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ᐃⵠⲆⵠᐃᐃⵠ = function () {
      qx.ᐃⵠⲆⵠᐃᐃⵠ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ⵠᐃⲆⵠ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ᐃⲆᐃⲆΔᐃⵠ = function () {
      qx.ᐃⲆᐃⲆΔᐃⵠ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ⵠᐃⲆⵠ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ⲆⵠΔⲆⵠⲆΔ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        x: 0,
        y: 0
      },
      ΔⵠΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    k();
    this.unlock = {};
    this.unlock.ᐃⵠᐃⲆ = [];
    this.unlock.ΔⲆᐃⲆⵠ = [];
    this.unlock.ᐃⲆΔᐃⵠ = [];
    this.unlock.ⵠⵠⲆᐃᐃ = [];
    this.unlock.ⲆᐃⵠΔⲆ = [];
    this.unlock.ⲆΔⲆⲆⵠ = [];
    this.ⵠⲆⲆᐃⲆΔΔ = 0;
    this.ⵠⵠᐃΔΔⲆᐃ = a;
    a();
    this.ΔᐃⵠⲆⲆ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        y: 0,
        x: 0
      },
      ΔⵠΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var i;
    var n = 0;
    function o() {
      O.ΔⵠΔ();
      if (++n == 30) {
        O.ᐃⲆⲆⵠⵠⲆΔ();
        O.ΔΔⵠΔⵠΔᐃ = To;
        O.ΔⵠΔ();
        return;
      }
      Ph.setTimeout(o, 33);
    }
    this.ⲆᐃⲆⲆΔ = function (a) {
      i = a;
      O.ⵠΔⲆⵠΔⵠᐃ();
      O.ΔΔⵠΔⵠΔᐃ = 0;
      g = -1;
      r();
    };
    var g = -1;
    function r() {
      O.ΔⵠΔ();
      if (++g == 30) {
        ⵠᐃⲆⵠ.set("starve_nickname", O.ᐃᐃⵠⲆΔ.input.value, {
          expires: 30
        });
        O.ᐃᐃⵠⲆΔ.style.display = "none";
        O.ᐃⵠⵠΔⲆ.style.display = "none";
        O.ΔⲆⵠᐃᐃⲆⵠ.style.display = "none";
        O.ⲆⵠΔⲆⵠⲆΔ.style.display = "none";
        O.ΔᐃⵠⲆⲆ.style.display = "none";
        O.stop();
        i();
        return;
      }
      Ph.setTimeout(r, 33);
    }
    this.ⲆᐃΔᐃⲆ = false;
    this.stop = function () {
      this.ⲆᐃΔᐃⲆ = Es;
    };
    this.ⲆΔⵠΔᐃ = function () {
      zx();
      document.getElementById("game_body").style.backgroundColor = ts.ⵠⲆⲆᐃᐃ[ix.time];
      O.ᐃᐃⵠⲆΔ.style.display = "inline-block";
      O.ᐃⵠⵠΔⲆ.style.display = "inline-block";
      O.ΔⲆⵠᐃᐃⲆⵠ.style.display = "inline-block";
      O.ⲆⵠΔⲆⵠⲆΔ.style.display = "inline-block";
      O.ΔᐃⵠⲆⲆ.style.display = "inline-block";
      O.waiting = false;
      O.ⲆᐃΔᐃⲆ = Hh;
      g = -1;
      n = 0;
      o();
    };
    this.ΔⵠⲆⵠᐃⵠΔ = function (a, b) {
      b = b < 0 ? -b : b;
      if (ba === (a.position & ba)) {
        if (V === (a.position & V)) {
          a.translate.x = dq + a.translate.ⲆⵠⵠⲆⲆ - b;
        } else if (X === (a.position & X)) {
          a.translate.x = dq + a.translate.ⲆⵠⵠⲆⲆ + b;
        } else {
          a.translate.x = dq + a.translate.ⲆⵠⵠⲆⲆ;
        }
      } else if ((a.position & V) === V) {
        a.translate.x = a.translate.ⲆⵠⵠⲆⲆ - b;
      } else if (X === (a.position & X)) {
        a.translate.x = Bo - a.translate.ⲆⵠⵠⲆⲆ + b;
      } else {
        a.translate.x = a.translate.ⲆⵠⵠⲆⲆ;
      }
      if ((a.position & ca) === ca) {
        if (Y === (a.position & Y)) {
          a.translate.y = eq + a.translate.ᐃΔᐃⵠᐃ - b;
        } else if ((a.position & aa) === aa) {
          a.translate.y = eq + a.translate.ᐃΔᐃⵠᐃ + b;
        } else {
          a.translate.y = eq + a.translate.ᐃΔᐃⵠᐃ;
        }
      } else if ((a.position & Y) === Y) {
        a.translate.y = a.translate.ᐃΔᐃⵠᐃ - b;
      } else if ((a.position & aa) === aa) {
        a.translate.y = cq + a.translate.ᐃΔᐃⵠᐃ + b;
      } else {
        a.translate.y = a.translate.ᐃΔᐃⵠᐃ;
      }
      if (a.style !== eg) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ΔⵠΔ = function () {
      var a = 0;
      if (n != 30 || g != -1) {
        if (n != 30) {
          a = 1500 / (n + 1) - 50;
        }
        if (g != -1) {
          a = -(1750 / (30 - g + 1) - 48);
        }
      }
      for (var b = 0; b < this.ⵠΔᐃⲆ.length; b++) {
        this.ΔⵠⲆⵠᐃⵠΔ(this.ⵠΔᐃⲆ[b], a);
      }
      for (b = 0; this.buttons.length > b; b++) {
        this.ΔⵠⲆⵠᐃⵠΔ(this.buttons[b].info, a);
      }
      for (b = 0; this.ⲆⵠⵠⲆⵠ.length > b; b++) {
        this.ΔⵠⲆⵠᐃⵠΔ(this.ⲆⵠⵠⲆⵠ[b], a);
      }
      this.ⲆⲆⵠⵠΔⲆⲆ.translate.x = (Bo - this.ⲆⲆⵠⵠΔⲆⲆ.ⵠᐃ.width) / 2;
      this.ⲆⲆⵠⵠΔⲆⲆ.translate.y = 0;
      this.ΔⲆⵠᐃᐃⲆⵠ.translate.x = Bo - 450;
      this.ΔⲆⵠᐃᐃⲆⵠ.translate.y = cq - 40;
      this.ⲆⵠΔⲆⵠⲆΔ.translate.x = Bo - 340;
      this.ⲆⵠΔⲆⵠⲆΔ.translate.y = cq - 25;
      this.ΔᐃⵠⲆⲆ.translate.x = Bo - 320;
      this.ΔᐃⵠⲆⲆ.translate.y = 80;
      if (n != 30 || g != -1) {
        var c = 0;
        if (n != 30) {
          c = 1500 / (n + 1) - 50;
        }
        if (g != -1) {
          c = -(1750 / (30 - g + 1) - 48);
        }
        this.ⲆⲆⵠⵠΔⲆⲆ.translate.y -= c > 0 ? c : -c;
        this.ΔⲆⵠᐃᐃⲆⵠ.translate.y -= c < 0 ? c : -c;
        this.ⲆⵠΔⲆⵠⲆΔ.translate.y -= c < 0 ? c : -c;
      }
      this.ΔⲆⵠᐃᐃⲆⵠ.ΔⵠΔ();
      this.ⲆⵠΔⲆⵠⲆΔ.ΔⵠΔ();
      this.ΔᐃⵠⲆⲆ.ΔⵠΔ();
    };
    this.ⲆΔⵠΔⵠⲆᐃ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; b.length > f; f++) {
        var g = b[f][0];
        var h = b[f][1] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, false);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ΔΔᐃⵠⵠⲆⵠΔΔ = function () {
      this.ⵠⵠⵠⵠⲆⵠⲆ = document.getElementById("account_nickname_input").value;
      if (this.ⵠⵠⵠⵠⲆⵠⲆ !== this.ΔΔᐃΔΔⲆᐃ) {
        this.ΔΔᐃΔΔⲆᐃ = this.ⵠⵠⵠⵠⲆⵠⲆ;
        this.ΔΔⵠⵠᐃᐃΔ = Iw(this.ⵠⵠⵠⵠⲆⵠⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ΔᐃⲆΔ = function () {
      Uc();
      jx.ΔᐃⵠⵠΔⵠΔ = ΔΔⲆ.ᐃⵠΔⵠΔ(jx.ΔᐃⵠⵠΔⵠΔ, jx.ⵠΔΔΔⲆᐃΔ, 0.03);
      this.ⵠΔᐃⲆ[ⲆⵠⵠⲆΔⲆⲆ].translate.x = this.ⵠΔᐃⲆ[0].translate.x + -72 + jx.ΔᐃⵠⵠΔⵠΔ * 165;
      this.ⵠΔᐃⲆ[ⲆⵠⵠⲆΔⲆⲆ].translate.ⲆⵠⵠⲆⲆ = this.ⵠΔᐃⲆ[ⲆⵠⵠⲆΔⲆⲆ].translate.x;
      this.ⵠΔᐃⲆ[ⲆⵠⵠⲆΔⲆⲆ].translate.y = this.ⵠΔᐃⲆ[0].translate.y + 30;
      this.ⵠΔᐃⲆ[ⲆⵠⵠⲆΔⲆⲆ].translate.ᐃΔᐃⵠᐃ = this.ⵠΔᐃⲆ[ⲆⵠⵠⲆΔⲆⲆ].translate.y;
      for (var c = 2; c < this.ⵠΔᐃⲆ.length; c++) {
        if (ea === this.ⵠΔᐃⲆ[c].active) {
          this.ⵠΔᐃⲆ[c].ΔᐃⲆΔ(D);
        }
      }
      var f;
      if ((f = this.ΔⲆΔⵠⲆ - Date.now()) > 0) {
        var i = Math.floor(f / 60000);
        var t = Math.floor(i / 60);
        if ((i %= 60) !== this.ᐃΔⲆᐃΔⲆᐃ) {
          this.ᐃΔⲆᐃΔⲆᐃ = i;
          i = i < 10 ? "0" + i : "" + i;
          O.ΔⵠⲆᐃΔⲆⲆ = Iw(i, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⲆᐃᐃΔⵠⵠⲆ !== t) {
          this.ⲆᐃᐃΔⵠⵠⲆ = t;
          t = t < 10 ? "0" + t : "" + t;
          O.ᐃⲆΔⵠΔⵠΔ = Iw(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (N = this.ⵠΔᐃⲆ[ⵠΔⲆᐃⵠⲆⵠ]).ΔᐃⲆΔ(D);
        var K = this.ᐃⲆΔⵠΔⵠΔ;
        zp(D, K, N.translate.x - K.width / 4 + 182, N.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ΔⵠⲆᐃΔⲆⲆ;
        zp(D, K, N.translate.x - K.width / 4 + 251, N.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
      }
      if ((f = this.ΔΔⲆᐃⲆᐃΔ - Date.now()) > 0) {
        i = Math.floor(f / 60000);
        t = Math.floor(i / 60);
        var N;
        var U = Math.floor(t / 24);
        t %= 24;
        if ((i %= 60) !== this.ⵠΔΔᐃᐃΔⵠ) {
          this.ⵠΔΔᐃᐃΔⵠ = i;
          i = i < 10 ? "0" + i : "" + i;
          O.ΔΔⲆⲆⵠⲆⵠ = Iw(i, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (t !== this.ⵠΔⵠⲆⲆⲆⵠ) {
          this.ⵠΔⵠⲆⲆⲆⵠ = t;
          t = t < 10 ? "0" + t : "" + t;
          O.ⵠⵠΔᐃⲆΔⵠ = Iw(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⵠΔΔΔⲆⲆᐃ !== U) {
          this.ⵠΔΔΔⲆⲆᐃ = U;
          U = U < 10 ? "0" + U : "" + U;
          O.ᐃⲆΔᐃⵠⲆΔ = Iw(U, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (N = this.ⵠΔᐃⲆ[ⵠⵠᐃⵠᐃΔᐃ]).ΔᐃⲆΔ(D);
        K = this.ᐃⲆΔᐃⵠⲆΔ;
        zp(D, K, N.translate.x - K.width / 4 + 113, N.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ⵠⵠΔᐃⲆΔⵠ;
        zp(D, K, N.translate.x - K.width / 4 + 182, N.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ΔΔⲆⲆⵠⲆⵠ;
        zp(D, K, N.translate.x - K.width / 4 + 251, N.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
      }
      if (Q === (this.ⵠΔⲆΔᐃ & Q)) {
        this.buttons[ⲆⵠᐃᐃⵠΔⲆ].info.state = Ew;
      } else if (T === (this.ⵠΔⲆΔᐃ & T)) {
        this.buttons[ᐃᐃⵠⵠᐃᐃⲆ].info.state = Ew;
      } else if (m === (this.ⵠΔⲆΔᐃ & m)) {
        this.buttons[ᐃᐃᐃᐃⵠⲆΔ].info.state = Ew;
      } else if (d === (this.ⵠΔⲆΔᐃ & d)) {
        this.buttons[ᐃⵠⵠⲆΔⲆΔ].info.state = Ew;
      } else if (C === (this.ⵠΔⲆΔᐃ & C)) {
        this.buttons[ⵠΔⲆⲆᐃᐃⵠ].info.state = Ew;
      } else if (v === (this.ⵠΔⲆΔᐃ & v)) {
        this.buttons[ΔⵠⲆΔᐃⲆⵠ].info.state = Ew;
      } else if ((this.ⵠΔⲆΔᐃ & p) === p || Z === (this.ⵠΔⲆΔᐃ & Z) || P === (this.ⵠΔⲆΔᐃ & P) || (this.ⵠΔⲆΔᐃ & A) === A || (this.ⵠΔⲆΔᐃ & x) === x || (this.ⵠΔⲆΔᐃ & J) === J || M === (this.ⵠΔⲆΔᐃ & M)) {
        this.buttons[ⲆⵠⵠⲆᐃΔⲆ].info.state = Ew;
      } else if (B === (this.ⵠΔⲆΔᐃ & B) || (this.ⵠΔⲆΔᐃ & I) === I || E === (this.ⵠΔⲆΔᐃ & E) || S === (this.ⵠΔⲆΔᐃ & S) || _ === (this.ⵠΔⲆΔᐃ & _) || R === (this.ⵠΔⲆΔᐃ & R)) {
        this.buttons[ᐃᐃᐃᐃⵠⲆΔ].info.state = Ew;
      } else if ((this.ⵠΔⲆΔᐃ & L) === L || (this.ⵠΔⲆΔᐃ & W) === W || (this.ⵠΔⲆΔᐃ & G) === G) {
        this.buttons[ⵠΔᐃⲆΔΔⵠ].info.state = Ew;
      } else if (q === (this.ⵠΔⲆΔᐃ & q)) {
        this.buttons[ᐃⵠⵠⲆΔⲆΔ].info.state = Ew;
      }
      if (T === (this.ⵠΔⲆΔᐃ & T)) {
        if (this.ΔᐃⵠᐃⲆⲆᐃ === this.ᐃⵠⲆⵠⵠⲆⵠ) {
          this.ΔΔⵠΔΔⲆⲆ = this.ⵠΔΔΔⵠᐃⲆ;
          this.buttons[this.ⵠΔΔΔⵠᐃⲆ].info.active = da;
          this.buttons[this.ᐃⵠᐃᐃΔᐃⲆ].info.active = da;
          this.buttons[this.ⲆᐃⲆⲆᐃⲆⲆ].info.active = da;
        } else {
          this.buttons[this.ⵠΔΔΔⵠᐃⲆ].info.active = ea;
          this.buttons[this.ᐃⵠᐃᐃΔᐃⲆ].info.active = ea;
          this.buttons[this.ⲆᐃⲆⲆᐃⲆⲆ].info.active = ea;
        }
        if (this.ΔᐃⵠᐃⲆⲆᐃ === this.ᐃΔΔΔᐃᐃⵠ) {
          this.buttons[this.ᐃΔΔΔᐃᐃⵠ].info.state = Ew;
        } else if (this.ⲆΔⵠᐃΔᐃⲆ === this.ΔᐃⵠᐃⲆⲆᐃ) {
          this.buttons[this.ⲆΔⵠᐃΔᐃⲆ].info.state = Ew;
        } else if (this.ΔᐃⵠᐃⲆⲆᐃ === this.ᐃⵠⲆⵠⵠⲆⵠ) {
          this.buttons[this.ᐃⵠⲆⵠⵠⲆⵠ].info.state = Ew;
        } else if (this.ΔⲆᐃⵠⵠⲆᐃ === this.ΔᐃⵠᐃⲆⲆᐃ) {
          this.buttons[this.ΔⲆᐃⵠⵠⲆᐃ].info.state = Ew;
        } else if (this.ᐃⲆᐃᐃⵠⲆΔ === this.ΔᐃⵠᐃⲆⲆᐃ) {
          this.buttons[this.ᐃⲆᐃᐃⵠⲆΔ].info.state = Ew;
        }
        if (this.ⵠΔΔΔⵠᐃⲆ === this.ΔΔⵠΔΔⲆⲆ) {
          this.buttons[this.ⵠΔΔΔⵠᐃⲆ].info.state = Ew;
        } else if (this.ΔΔⵠΔΔⲆⲆ === this.ᐃⵠᐃᐃΔᐃⲆ) {
          this.buttons[this.ᐃⵠᐃᐃΔᐃⲆ].info.state = Ew;
        } else if (this.ⲆᐃⲆⲆᐃⲆⲆ === this.ΔΔⵠΔΔⲆⲆ) {
          this.buttons[this.ⲆᐃⲆⲆᐃⲆⲆ].info.state = Ew;
        }
        if (this.ᐃΔᐃᐃΔⲆΔ === this.ⲆⲆΔⲆΔⵠΔ) {
          this.buttons[this.ᐃΔᐃᐃΔⲆΔ].info.state = Ew;
        } else if (this.ⲆⲆΔⲆΔⵠΔ === this.ⲆⵠΔⲆⲆⲆⵠ) {
          this.buttons[this.ⲆⵠΔⲆⲆⲆⵠ].info.state = Ew;
        } else if (this.ⲆⵠΔᐃᐃⵠΔ === this.ⲆⲆΔⲆΔⵠΔ) {
          this.buttons[this.ⲆⵠΔᐃᐃⵠΔ].info.state = Ew;
        }
        if (this.ⵠⲆⲆⵠⵠΔᐃ === this.ΔⵠᐃΔⵠΔⵠ) {
          this.buttons[this.ΔⵠᐃΔⵠΔⵠ].info.state = Ew;
        } else if (this.ⵠⲆⲆⵠⵠΔᐃ === this.ΔⵠΔᐃΔⲆΔ) {
          this.buttons[this.ΔⵠΔᐃΔⲆΔ].info.state = Ew;
        } else if (this.ⵠⲆⲆⵠⵠΔᐃ === this.ⲆΔⲆⲆᐃⵠⵠ) {
          this.buttons[this.ⲆΔⲆⲆᐃⵠⵠ].info.state = Ew;
        } else if (this.ᐃⵠᐃⲆⲆⵠⵠ === this.ⵠⲆⲆⵠⵠΔᐃ) {
          this.buttons[this.ᐃⵠᐃⲆⲆⵠⵠ].info.state = Ew;
        } else if (this.ⲆⵠΔᐃΔΔᐃ === this.ⵠⲆⲆⵠⵠΔᐃ) {
          this.buttons[this.ⲆⵠΔᐃΔΔᐃ].info.state = Ew;
        } else if (this.ⵠⲆⲆⵠⵠΔᐃ === this.ᐃⲆⵠΔⲆᐃΔ) {
          this.buttons[this.ᐃⲆⵠΔⲆᐃΔ].info.state = Ew;
        }
      }
      if (d === (this.ⵠΔⲆΔᐃ & d)) {
        if (this.ⵠⵠⵠⲆⵠΔΔ === -1) {
          this.buttons[xa].info.state = Ew;
        } else if (this.ⵠⵠⵠⲆⵠΔΔ === 0) {
          this.buttons[ya].info.state = Ew;
        } else if (this.ⵠⵠⵠⲆⵠΔΔ === 2) {
          this.buttons[Aa].info.state = Ew;
        } else if (this.ⵠⵠⵠⲆⵠΔΔ === 3) {
          this.buttons[Ba].info.state = Ew;
        } else if (this.ⵠⵠⵠⲆⵠΔΔ === 4) {
          this.buttons[za].info.state = Ew;
        }
        if (this.ᐃⲆΔᐃᐃⲆⲆ === 0) {
          this.buttons[ra].info.state = Ew;
        } else if (this.ᐃⲆΔᐃᐃⲆⲆ === 1) {
          this.buttons[sa].info.state = Ew;
        } else if (this.ᐃⲆΔᐃᐃⲆⲆ === 2) {
          this.buttons[ta].info.state = Ew;
        } else if (this.ᐃⲆΔᐃᐃⲆⲆ === 3) {
          this.buttons[ua].info.state = Ew;
        } else if (this.ᐃⲆΔᐃᐃⲆⲆ === 4) {
          this.buttons[va].info.state = Ew;
        } else if (this.ᐃⲆΔᐃᐃⲆⲆ === 5) {
          this.buttons[wa].info.state = Ew;
        }
      }
      if ((this.ⵠΔⲆΔᐃ & Q) === Q && nx.ᐃΔᐃⵠⵠⵠⲆ === 0) {
        if (this.buttons[ja].ⵠΔⲆΔᐃΔᐃ(rx.Δⵠᐃᐃ)) {
          this.buttons[ja].hint = Math.min(1, this.buttons[ja].hint + tx * 1.5);
        } else {
          this.buttons[ja].hint = Math.max(0, this.buttons[ja].hint - tx * 1.5);
        }
        if (this.buttons[ka].ⵠΔⲆΔᐃΔᐃ(rx.Δⵠᐃᐃ)) {
          this.buttons[ka].hint = Math.min(1, this.buttons[ka].hint + tx * 1.5);
        } else {
          this.buttons[ka].hint = Math.max(0, this.buttons[ka].hint - tx * 1.5);
        }
        if (this.buttons[la].ⵠΔⲆΔᐃΔᐃ(rx.Δⵠᐃᐃ)) {
          this.buttons[la].hint = Math.min(1, this.buttons[la].hint + tx * 1.5);
        } else {
          this.buttons[la].hint = Math.max(0, this.buttons[la].hint - tx * 1.5);
        }
        if (this.buttons[oa].ⵠΔⲆΔᐃΔᐃ(rx.Δⵠᐃᐃ)) {
          this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + tx * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - tx * 1.5);
        }
        if (this.buttons[ma].ⵠΔⲆΔᐃΔᐃ(rx.Δⵠᐃᐃ)) {
          this.buttons[ma].hint = Math.min(1, this.buttons[ma].hint + tx * 1.5);
        } else {
          this.buttons[ma].hint = Math.max(0, this.buttons[ma].hint - tx * 1.5);
        }
        if (this.buttons[na].ⵠΔⲆΔᐃΔᐃ(rx.Δⵠᐃᐃ)) {
          this.buttons[na].hint = Math.min(1, this.buttons[na].hint + tx * 1.5);
        } else {
          this.buttons[na].hint = Math.max(0, this.buttons[na].hint - tx * 1.5);
        }
      }
      var V = 1;
      if ((this.ⵠΔⲆΔᐃ & (Z | P | A | x | J | M)) > 1) {
        K = ΔΔ.Δⵠⵠⵠⵠⵠᐃ;
        D.save();
        D.translate(dq, ia + K.height / 4);
        if (this.ⵠⵠⵠΔⵠ === 1) {
          this.ᐃⵠⵠᐃΔⲆΔ += tx / 3;
          V = this.ᐃⲆΔⲆΔⵠᐃ - 100 / Math.pow(1 + this.ᐃⵠⵠᐃΔⲆΔ, 1 + this.ᐃⵠⵠᐃΔⲆΔ);
          D.rotate(V);
        }
        zp(D, K, -K.width / 4, -K.height / 4, K.width / 2, K.height / 2);
        D.restore();
      }
      if (nx.ᐃΔᐃⵠⵠⵠⲆ === 0) {
        if (nx.ⲆᐃΔΔΔ === 0) {
          this.buttons[ja].info.state = Ew;
        } else if (nx.ⲆᐃΔΔΔ === 4) {
          this.buttons[ka].info.state = Ew;
        } else if (nx.ⲆᐃΔΔΔ === 2) {
          this.buttons[ma].info.state = Ew;
        } else if (nx.ⲆᐃΔΔΔ === 3) {
          this.buttons[na].info.state = Ew;
        } else if (nx.ⲆᐃΔΔΔ === 6) {
          this.buttons[la].info.state = Ew;
        } else if (nx.ⲆᐃΔΔΔ === 7) {
          this.buttons[oa].info.state = Ew;
        }
      }
      for (c = 1; this.buttons.length > c; c++) {
        if (this.buttons[c].info.active === ea) {
          this.buttons[c].ΔᐃⲆΔ(D);
        }
      }
      this.ⵠΔᐃⲆ[0].ΔᐃⲆΔ(D);
      if ((this.ⵠΔⲆΔᐃ & (j | F)) > 0) {
        K = this.ΔΔⵠⵠᐃᐃΔ;
        zp(D, K, dq - K.width / 4, 138, K.width / 2, K.height / 2);
      }
      var X = Math.max(1, Math.min(18, Math.floor((jx.ᐃᐃⲆⵠⵠ + 3) / 2)));
      this.ⵠΔᐃⲆ[X].active = ea;
      this.ⵠΔᐃⲆ[X].ΔᐃⲆΔ(D);
      this.ⵠΔᐃⲆ[X].active = da;
      this.buttons[0].ΔᐃⲆΔ(D);
      if ((this.ⵠΔⲆΔᐃ & (m | I | S | B | _)) > 1) {
        var l = (this.ⵠΔⲆΔᐃ & (I | S | B | _)) > 1 ? -190 : 0;
        K = ᐃΔ[29][this.ΔⲆᐃⲆⵠ][this.ⵠⲆⲆᐃⲆΔΔ];
        zp(D, K, dq - K.width / 4 + l, 183, K.width / 2, K.height / 2);
        this.ⵠΔⲆΔ = (this.ⵠΔⲆΔ + tx * 1000) % 2000;
        var u = (this.ⵠΔⲆΔ < 1000) * 4.5 ? this.ⵠΔⲆΔ / 1000 : (2000 - this.ⵠΔⲆΔ) / 1000;
        K = ᐃΔ[28][this.ᐃⲆΔᐃⵠ][this.ⵠⲆⲆᐃⲆΔΔ];
        zp(D, K, dq - K.width / 4 - 62 + u + l, 240, K.width / 2, K.height / 2);
        K = ᐃΔ[7][this.ᐃⵠᐃⲆ][this.ⵠⲆⲆᐃⲆΔΔ];
        zp(D, K, dq - K.width / 4 - 54 + u + l, 272, K.width / 2, K.height / 2);
        zp(D, K, dq - K.width / 4 + 54 - u + l, 272, K.width / 2, K.height / 2);
        K = ᐃΔ[255][this.ᐃⵠᐃⲆ][this.ⵠⲆⲆᐃⲆΔΔ];
        zp(D, K, dq - K.width / 4 + l, 222, K.width / 2, K.height / 2);
        K = ᐃΔ[796][this.ⲆΔⲆⲆⵠ][this.ⵠⲆⲆᐃⲆΔΔ];
        zp(D, K, dq - K.width / 4 + l, 222, K.width / 2, K.height / 2);
      }
      if (m === (this.ⵠΔⲆΔᐃ & m)) {
        K = ᐃΔ[250][this.ⵠⵠⲆᐃᐃ][this.ⵠⲆⲆᐃⲆΔΔ];
        zp(D, K, dq - K.width / 4 - 61, 406 - K.height / 4, K.width / 2, K.height / 2);
        K = ᐃΔ[250][this.ⲆᐃⵠΔⲆ][this.ⵠⲆⲆᐃⲆΔΔ];
        zp(D, K, dq - K.width / 4 + 53, 406 - K.height / 4, K.width / 2, K.height / 2);
      }
      if ((this.ⵠΔⲆΔᐃ & E) === E) {
        K = ᐃΔ[250][this.ⲆᐃⵠΔⲆ][this.ⵠⲆⲆᐃⲆΔΔ];
        zp(D, K, dq - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
      }
      if (R === (this.ⵠΔⲆΔᐃ & R)) {
        K = ᐃΔ[250][this.ⵠⵠⲆᐃᐃ][this.ⵠⲆⲆᐃⲆΔΔ];
        zp(D, K, dq - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
      }
      if ((this.ⵠΔⲆΔᐃ & (I | S | B | _ | E | R)) > 1) {
        for (c = 1; this.buttons.length > c; c++) {
          if (this.buttons[c].view & this.ⵠΔⲆΔᐃ) {
            var Y = this.buttons[c].info;
            if (Y.ⲆⵠΔⵠⲆⲆΔ >= 0) {
              K = Y.ᐃΔᐃⲆᐃⵠᐃⲆᐃ[Y.ⲆⵠΔⵠⲆⲆΔ].ΔΔᐃ;
              zp(D, K, Y.translate.x - K.width / 8 + 44.5, Y.translate.y - K.height / 8 + 45.5, K.width / 4, K.height / 4);
              if (Y.ΔᐃⵠⵠᐃⲆⲆ !== 1) {
                K = ΔΔ.ᐃⲆⲆⵠΔᐃⲆ;
                zp(D, K, Y.translate.x - K.width / 4 + 44.5, Y.translate.y - K.height / 4 + 44.5, K.width / 2, K.height / 2);
              }
            }
          }
        }
        K = this.ⵠᐃⲆⵠⲆⵠⵠ;
        zp(D, K, dq - 312, 375, K.width / 2, K.height / 2);
        K = this.ⵠⲆⵠⲆᐃᐃⵠ;
        zp(D, K, dq - 312, 395, K.width / 2, K.height / 2);
      }
      if (this.ⲆᐃᐃⲆⵠ !== this.ⵠΔΔⵠΔⲆⲆ) {
        this.ⵠΔΔⵠΔⲆⲆ = this.ⲆᐃᐃⲆⵠ;
        this.ⵠⵠⵠΔᐃΔᐃ = Iw("" + this.ⲆᐃᐃⲆⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      zp(D, this.ⵠⵠⵠΔᐃΔᐃ, this.ⵠΔᐃⲆ[0].translate.x + 350, 15, this.ⵠⵠⵠΔᐃΔᐃ.w2, this.ⵠⵠⵠΔᐃΔᐃ.ᐃⵠᐃⲆᐃ);
      if (this.ᐃΔⲆΔⲆΔⲆ !== this.ᐃᐃⲆⵠⵠ) {
        this.ᐃΔⲆΔⲆΔⲆ = this.ᐃᐃⲆⵠⵠ;
        this.ᐃⲆⵠΔⲆⲆΔ = Iw("LVL " + (this.ᐃᐃⲆⵠⵠ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, undefined, undefined, undefined, undefined, "#3F3019", 20);
      }
      zp(D, this.ᐃⲆⵠΔⲆⲆΔ, this.ⵠΔᐃⲆ[0].translate.x + 94, 0, this.ᐃⲆⵠΔⲆⲆΔ.w2, this.ᐃⲆⵠΔⲆⲆΔ.ᐃⵠᐃⲆᐃ);
      if (nx.ᐃΔᐃⵠⵠⵠⲆ === 0) {
        if ((aa = this.buttons[ja].hint) > 0) {
          K = ΔΔ.ⲆΔⲆΔΔⲆⲆ;
          zp(D, K, dq - K.width / 4, -36 - K.height * ΔΔⲆ.ⲆⵠⵠΔⲆ(1 - aa) / 2, K.width / 2, K.height / 2);
        }
        var aa = this.buttons[ka].hint;
        if (aa > 0) {
          K = ΔΔ.ᐃⵠᐃⵠⵠᐃᐃ;
          zp(D, K, dq - K.width / 4, -36 - K.height * ΔΔⲆ.ⲆⵠⵠΔⲆ(1 - aa) / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[la].hint) > 0) {
          K = ΔΔ.ΔΔⲆᐃⲆⲆⲆ;
          zp(D, K, dq - K.width / 4, -36 - ΔΔⲆ.ⲆⵠⵠΔⲆ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[oa].hint) > 0) {
          K = ΔΔ.ⲆⲆⵠᐃⵠᐃΔ;
          zp(D, K, dq - K.width / 4, -36 - ΔΔⲆ.ⲆⵠⵠΔⲆ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[na].hint) > 0) {
          K = ΔΔ.ⵠΔⵠⲆΔⵠⵠ;
          zp(D, K, dq - K.width / 4, -36 - K.height * ΔΔⲆ.ⲆⵠⵠΔⲆ(1 - aa) / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[ma].hint) > 0) {
          K = ΔΔ.ᐃᐃᐃⵠⵠΔⲆ;
          zp(D, K, dq - K.width / 4, -36 - ΔΔⲆ.ⲆⵠⵠΔⲆ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
      }
      if (this.ⵠⵠⵠΔⵠ === 1 && Math.abs(V - this.ᐃⲆΔⲆΔⵠᐃ) < 0.006) {
        D.globalAlpha = Math.min(1, this.ᐃⵠⵠⵠΔᐃⵠ * 3);
        K = ΔΔ.ᐃΔᐃⵠⵠᐃⲆ;
        D.save();
        D.translate(dq, 260);
        this.ᐃⵠⵠⵠΔᐃⵠ += tx;
        D.rotate(this.ᐃⵠⵠⵠΔᐃⵠ);
        zp(D, K, -K.width / 2, -K.height / 2, K.width, K.height);
        D.restore();
        u = 1.05 + Math.cos(this.ᐃⵠⵠⵠΔᐃⵠ * 5) * 0.05;
        if (this.ΔΔⲆⵠΔΔΔ === 0) {
          var ba = (K = ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ[this.ⵠᐃᐃᐃΔΔⲆ].ΔΔᐃ).width * u;
          var ca = K.height * u;
          zp(D, K, dq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ΔΔⲆⵠΔΔΔ === 1) {
          ba = (K = ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ[0].ΔΔᐃ).width * u;
          ca = u * K.height;
          zp(D, K, dq - ba / 2, 260 - ca / 2, ba, ca);
          ba = (K = ΔⵠⲆⲆ.ᐃⲆⲆⲆΔ[this.ⵠᐃᐃᐃΔΔⲆ].ΔΔᐃ).width * u;
          ca = K.height * u;
          zp(D, K, dq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ΔΔⲆⵠΔΔΔ === 2) {
          ba = (K = ΔⵠⲆⲆ.ᐃᐃⲆΔ[this.ⵠᐃᐃᐃΔΔⲆ].ΔΔᐃ).width * u;
          ca = u * K.height;
          zp(D, K, dq - ba / 2, 180 - ca / 2, ba, ca);
          ba = (K = ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ[0].ΔΔᐃ).width * u;
          ca = u * K.height;
          zp(D, K, dq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ΔΔⲆⵠΔΔΔ === 3) {
          ba = (K = ΔⵠⲆⲆ.ⲆΔⲆⲆⲆ[this.ⵠᐃᐃᐃΔΔⲆ].ΔΔᐃ).width * u;
          ca = K.height * u;
          D.save();
          D.translate(dq, 260);
          D.rotate(Math.PI);
          zp(D, K, -ba / 2, -ca / 2, ba, ca);
          D.restore();
        } else if (this.ΔΔⲆⵠΔΔΔ === 4) {
          ba = u * (K = ΔⵠⲆⲆ.ᐃⵠⵠΔⵠ[this.ⵠᐃᐃᐃΔΔⲆ].ΔΔᐃ).width;
          ca = K.height * u;
          zp(D, K, dq - ba / 2, 260 - ca / 2, ba, ca);
        }
        K = this.ⵠΔⲆⵠᐃⲆⵠ;
        zp(D, K, dq - K.width / 4, 340, K.width / 2, K.height / 2);
        K = this.ⲆᐃᐃΔⲆⲆᐃ;
        zp(D, K, dq - K.width / 4, 365, K.width / 2, K.height / 2);
        if (this.ᐃⵠⵠⵠΔᐃⵠ > 6) {
          this.ⵠⵠⵠΔⵠ = 0;
          H(p);
        }
        D.globalAlpha = 1;
      }
      lx.alert.ΔᐃⲆΔ("#FFF", "#000");
      if (O.waiting) {
        this.ⲆⲆⵠⵠΔⲆⲆ.ΔᐃⲆΔ();
      }
    };
    var t = 0;
    var Q = Math.pow(2, t++);
    var d = Math.pow(2, t++);
    this.ΔᐃⲆΔⲆ = d;
    var v = Math.pow(2, t++);
    var m = Math.pow(2, t++);
    var p = Math.pow(2, t++);
    var C = Math.pow(2, t++);
    var T = Math.pow(2, t++);
    var f = Math.pow(2, t++);
    this.ᐃΔⲆⲆΔ = f;
    var u = Math.pow(2, t++);
    var y = Math.pow(2, t++);
    var Z = Math.pow(2, t++);
    var P = Math.pow(2, t++);
    var A = Math.pow(2, t++);
    var x = Math.pow(2, t++);
    var J = Math.pow(2, t++);
    var M = Math.pow(2, t++);
    var B = Math.pow(2, t++);
    var E = Math.pow(2, t++);
    var I = Math.pow(2, t++);
    var S = Math.pow(2, t++);
    var _ = Math.pow(2, t++);
    var R = Math.pow(2, t++);
    var F = Math.pow(2, t++);
    var j = Math.pow(2, t++);
    var L = Math.pow(2, t++);
    this.ⲆⲆⵠⲆⲆ = L;
    var W = Math.pow(2, t++);
    this.ᐃᐃⵠΔΔ = W;
    var G = Math.pow(2, t++);
    this.ⵠΔΔⲆⲆ = G;
    var q = Math.pow(2, t++);
    function w(a, b, c) {
      for (var d = 0; d < O.ⵠΔᐃⲆ.length; d++) {
        if ((O.ⵠΔᐃⲆ[d].view & a) !== 0) {
          O.ⵠΔᐃⲆ[d].active = b;
        }
      }
      for (d = 0; O.buttons.length > d; d++) {
        if ((O.buttons[d].view & a) !== 0) {
          O.buttons[d].info.active = b;
        }
      }
      for (d = 0; O.ⲆⵠⵠⲆⵠ.length > d; d++) {
        if ((O.ⲆⵠⵠⲆⵠ[d].view & a) !== 0) {
          O.ⲆⵠⵠⲆⵠ[d].style.display = c;
        }
      }
    }
    this.ⵠΔⲆΔᐃ = Q;
    function z() {
      var b = Number(ⵠᐃⲆⵠ.get("starve_crate"));
      var c = Number(ⵠᐃⲆⵠ.get("starve_dead"));
      var d = Number(ⵠᐃⲆⵠ.get("starve_book"));
      var e = Number(ⵠᐃⲆⵠ.get("starve_bag"));
      var f = Number(ⵠᐃⲆⵠ.get("starve_skin"));
      var g = Number(ⵠᐃⲆⵠ.get("starve_accessory"));
      if (jx.unlock.ᐃⵠᐃⲆ[jx.ᐃⵠᐃⲆ] <= 0) {
        jx.ᐃⵠᐃⲆ = jx.unlock.ᐃⵠᐃⲆ[f] > 0 ? f : 0;
      }
      if (jx.unlock.ᐃⲆΔᐃⵠ[jx.ᐃⲆΔᐃⵠ] <= 0) {
        jx.ᐃⲆΔᐃⵠ = jx.unlock.ᐃⲆΔᐃⵠ[d] > 0 ? d : 0;
      }
      if (jx.unlock.ⲆᐃⵠΔⲆ[jx.ⲆᐃⵠΔⲆ] <= 0) {
        jx.ⲆᐃⵠΔⲆ = jx.unlock.ⲆᐃⵠΔⲆ[c] > 0 ? c : 0;
      }
      if (jx.unlock.ⵠⵠⲆᐃᐃ[jx.ⵠⵠⲆᐃᐃ] <= 0) {
        jx.ⵠⵠⲆᐃᐃ = jx.unlock.ⵠⵠⲆᐃᐃ[b] > 0 ? b : 0;
      }
      if (jx.unlock.ⲆΔⲆⲆⵠ[jx.ⲆΔⲆⲆⵠ] <= 0) {
        jx.ⲆΔⲆⲆⵠ = jx.unlock.ⲆΔⲆⲆⵠ[g] > 0 ? g : 0;
      }
      if (jx.unlock.ΔⲆᐃⲆⵠ[jx.ΔⲆᐃⲆⵠ] <= 0) {
        jx.ΔⲆᐃⲆⵠ = jx.unlock.ΔⲆᐃⲆⵠ[e] > 0 ? e : 0;
      }
    }
    function H(a) {
      if (O.ΔΔⵠΔⵠΔᐃ !== false) {
        w(u, da, "none");
        w(y, da, "none");
        z();
        if (O.ⵠΔⲆΔᐃ !== a && O.ⵠⵠⵠΔⵠ < 1) {
          O.ΔᐃⵠⲆⲆ.style.display = a === Q || p === a || d === a || T === a || a === m || a === C ? "inline-block" : "none";
          w(O.ⵠΔⲆΔᐃ, da, "none");
          O.ⵠΔⲆΔᐃ = a;
          w(O.ⵠΔⲆΔᐃ, ea, "inline-block");
        }
      }
    }
    function N(a) {
      if (lx.ΔⲆᐃⵠΔⵠⲆ !== Gs && lx.ⵠⵠⲆⲆᐃᐃᐃ !== undefined && lx.ⲆΔᐃⵠⵠΔᐃ !== undefined && lx.ᐃΔⵠᐃᐃⲆⲆ !== undefined) {
        a();
      }
    }
    function K() {
      z();
      if (yx % 2) {
        console.log(ep);
        nx.connect();
      } else {
        console.log(eg);
        if (Ph.Widget.isBlocked === 1) {
          Ph.Widget.createAdPlayer(nx.connect.bind(nx), nx.connect.bind(nx));
        } else {
          Ph.Widget.preroll();
          Ph.Widget.play = nx.connect.bind(nx);
        }
      }
    }
    function U(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (b !== Wh) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== undefined) {
          c();
        }
      };
      d.send();
    }
    this.ᐃᐃᐃⲆᐃⲆᐃ = 0;
    this.ᐃⲆⵠⵠ = H;
    this.ⵠΔⲆΔΔΔⲆ = function (f, a) {
      let b = "0";
      let e = 0;
      if (Ix) {
        b = Ix + "0";
      }
      if (lx.ΔⲆᐃⵠΔⵠⲆ) {
        N(f);
      } else {
        U(`${Bx}token?id=${b}`, function (b) {
          if (e === 1) {
            return;
          }
          const c = b.split("_");
          const d = c[0] + "_";
          const g = Number(c[1]);
          const a = Math.abs(function (a) {
            return yn(a, 8260, 46947, 8004, 37330, 5330);
          }(g));
          lx.ΔⲆᐃⵠΔⵠⲆ = d + a;
          N(f);
        }, function () {
          if (e !== 1) {
            if (a === 1) {
              e = 1;
              f();
              return;
            } else {
              O.waiting = false;
              return;
            }
          }
        });
      }
      U(`${Cx}let`, function (j) {
        if (e === 1) {
          return;
        }
        var k = 101;
        if (k >= 8) {
          k = 161;
        }
        Math.floor(129[129 .ⲆⲆⲆᐃΔⵠΔ]);
        var o = 71;
        var q = 108;
        if (q === 13) {
          q = 43;
        }
        var w = 223;
        if (w > 1) {
          w = 80;
        }
        if (o === 8) {
          o = 149;
        }
        var x = 134;
        if (x == 1) {
          x = 22;
        }
        Math.floor(21[21 .ⲆⵠⲆᐃᐃⵠᐃ]);
        j = j.split(":");
        Math.floor(101[101 .ᐃⵠⵠⲆⵠⵠᐃ]);
        var y = 26;
        if (y === 13) {
          y = 198;
        }
        {
          if (189 === 197) {
            49;
          }
          var z = 38;
          if (z === 9) {
            z = 127;
          }
          if (194 === 221) {
            110;
          }
          var A = 35;
          if (A > 11) {
            A = 57;
          }
          if (65 == 29) {
            223;
          }
          const b = j[0].split("_");
          if (203 < 22) {
            195;
          }
          const c = b[0] + "_";
          const d = Number(b[1]);
          const e = 30;
          Math.floor(30[e.ⲆⲆᐃⵠᐃΔⵠ]);
          const f = Math.abs(Hk(d));
          lx.ⵠⵠⲆⲆᐃᐃᐃ = c + f;
          lx.ⵠΔⲆᐃⵠᐃΔ = f;
          var B = 213;
          if (B === 13) {
            B = 46;
          }
        }
        var C = 44;
        Math.floor(146[146 .ⲆΔⵠⲆⵠΔᐃ]);
        if (C == 8) {
          C = 219;
        }
        {
          const b = j[1].split("_");
          const c = b[0] + "_";
          const d = Number(b[1]);
          const e = Math.abs(vo(d));
          lx.ⲆΔᐃⵠⵠΔᐃ = c + e;
          const f = 45;
          Math.floor(45[f.ⵠΔⲆⲆⵠΔΔ]);
          lx.ᐃΔⵠᐃᐃΔⵠⵠⵠ = e;
        }
        {
          const b = j[2].split("_");
          140 .ᐃⵠⵠᐃΔⲆᐃᐃⲆ = 14;
          if (35 > 110) {
            63;
          }
          var D = 230;
          if (D == 4) {
            D = 72;
          }
          if (108 > 176) {
            69;
          }
          const c = 180;
          Math.floor(180[c.ᐃΔΔΔᐃΔᐃ]);
          const d = b[0] + "_";
          170 .ⵠΔⵠⵠᐃⲆⵠᐃᐃ = 9;
          var E = 25;
          if (E === 2) {
            E = 189;
          }
          if (118 >= 105) {
            245;
          }
          const e = Number(b[1]);
          var F = 98;
          if (F > 0) {
            F = 253;
          }
          const f = Math.abs(vo(e));
          lx.ᐃΔⵠᐃᐃⲆⲆ = d + f;
          lx.ⵠⲆᐃⲆⲆⲆⲆⵠⵠ = f;
          if (13 <= 204) {
            190;
          }
        }
        var G = 220;
        if (G === 0) {
          G = 84;
        }
        N(f);
        var H = 121;
        if (H > 8) {
          H = 146;
        }
      }, function () {
        if (e !== 1) {
          if (a === 1) {
            e = 1;
            f();
            return;
          } else {
            O.waiting = ik;
            return;
          }
        }
      });
    };
    this.ⵠⲆᐃⵠᐃⲆΔ = function () {
      if ($n === O.waiting) {
        lx.reconnect.enabled = false;
        O.waiting = To;
        O.ⵠΔⲆΔΔΔⲆ(K);
      }
    };
    var V = 1;
    var X = 2;
    var Y = 4;
    var aa = 8;
    var ba = 16;
    var ca = 32;
    var da = 0;
    var ea = 1;
    if (Ph.innerWidth < 1300) {
      this.ᐃᐃⵠⲆΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ea,
        position: Y | V,
        view: Q,
        translate: {
          ᐃΔᐃⵠᐃ: 184,
          y: 0,
          x: 0,
          ⲆⵠⵠⲆⲆ: 200
        }
      };
    } else {
      this.ᐃᐃⵠⲆΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ea,
        position: Y | ba,
        view: Q,
        translate: {
          y: 0,
          ⲆⵠⵠⲆⲆ: -180,
          x: 0,
          ᐃΔᐃⵠᐃ: 184
        }
      };
    }
    this.ᐃᐃⵠⲆΔ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !O.waiting && !O.ⲆⲆΔⲆⲆᐃⲆⲆⲆ) {
        O.ⵠⲆᐃⵠᐃⲆΔ();
      }
    });
    this.ᐃᐃⵠⲆΔ.input.value = ⵠᐃⲆⵠ.get("starve_nickname") ? ⵠᐃⲆⵠ.get("starve_nickname") : "";
    this.ⵠΔᐃⲆⲆᐃᐃⵠᐃ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: da,
      position: Y | ba,
      view: d,
      translate: {
        ᐃΔᐃⵠᐃ: 110,
        x: 0,
        y: 0,
        ⲆⵠⵠⲆⲆ: -122
      }
    };
    if (Ph.innerWidth < 1300) {
      this.ᐃⵠⵠΔⲆ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ea,
        position: Y | V,
        view: Q,
        translate: {
          x: 0,
          y: 0,
          ᐃΔᐃⵠᐃ: 225,
          ⲆⵠⵠⲆⲆ: 208
        }
      };
    } else {
      this.ᐃⵠⵠΔⲆ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ea,
        position: Y | ba,
        view: Q,
        translate: {
          ⲆⵠⵠⲆⲆ: -180,
          ᐃΔᐃⵠᐃ: 225,
          x: 0,
          y: 0
        }
      };
    }
    this.ᐃⲆΔⲆ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: da,
      position: Y | ba,
      view: T,
      translate: {
        ⲆⵠⵠⲆⲆ: -294.5,
        x: 0,
        ᐃΔᐃⵠᐃ: 190,
        y: 0
      }
    };
    this.ⵠᐃΔⵠⲆⵠΔⲆΔ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: da,
      position: Y | ba,
      view: d,
      translate: {
        x: 0,
        ᐃΔᐃⵠᐃ: 187,
        y: 0,
        ⲆⵠⵠⲆⲆ: 125
      }
    };
    this.ⲆᐃΔΔⵠᐃᐃⵠⲆ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: da,
      position: Y | ba,
      view: G,
      translate: {
        ᐃΔᐃⵠᐃ: 350,
        x: 0,
        y: 0,
        ⲆⵠⵠⲆⲆ: -260
      }
    };
    t = 0;
    this.ⲆⵠⵠⲆⵠ = [];
    this.ⲆⵠⵠⲆⵠ[t++] = this.ᐃᐃⵠⲆΔ;
    this.ⲆⵠⵠⲆⵠ[t++] = this.ᐃⵠⵠΔⲆ;
    this.ⲆⵠⵠⲆⵠ[t++] = this.ᐃⲆΔⲆ;
    this.ⲆⵠⵠⲆⵠ[t++] = this.ⵠΔᐃⲆⲆᐃᐃⵠᐃ;
    this.ⲆⵠⵠⲆⵠ[t++] = this.ⵠᐃΔⵠⲆⵠΔⲆΔ;
    this.ⲆⵠⵠⲆⵠ[t++] = this.ⲆᐃΔΔⵠᐃᐃⵠⲆ;
    t = 0;
    this.ⵠΔᐃⲆ = [];
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⲆΔⲆᐃⲆⵠΔ, ea, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ΔΔⵠⲆⵠΔᐃ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⲆΔΔⲆᐃᐃⵠ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ΔⲆⵠᐃⵠΔΔ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⲆΔⲆΔΔᐃΔ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ΔⵠⵠΔⵠⲆᐃ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⵠᐃΔᐃⵠΔΔ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⵠⲆⵠᐃⲆⲆᐃ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⵠⵠⲆΔΔⵠⲆ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ΔΔⲆⵠΔΔᐃ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⵠΔΔⵠᐃᐃⲆ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⵠᐃᐃᐃⵠⵠⲆ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ΔΔᐃᐃⵠⵠΔ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⲆᐃΔⲆΔΔⵠ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⲆΔⲆᐃᐃⲆⵠ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⵠⲆΔΔⵠⲆᐃ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⵠᐃⲆΔⲆΔᐃ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⵠΔᐃⲆⲆⵠᐃ, da, 0, 0, V);
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⵠⲆᐃⵠⲆᐃΔ, da, 0, 0, V);
    if (Ph.innerWidth < 1300) {
      this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⲆΔⵠᐃΔᐃΔ, ea, 200, 100, Y | V);
    } else {
      this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⲆΔⵠᐃΔᐃΔ, ea, -753 / 4, 100, Y | ba);
    }
    this.ⵠΔᐃⲆ[t++].view = Q;
    this.ⵠΔᐃⲆ[t++] = Fw(ΔΔ.ⲆᐃΔᐃⲆⲆⵠ, ea, 403, -10, X);
    if (Ph.innerWidth > 1300) {
      this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ᐃᐃΔᐃⵠⵠⲆ, ea, -885 / 4, -319 / 2, aa | ba);
      this.ⵠΔᐃⲆ[t++].view = Q;
    }
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ᐃᐃᐃᐃᐃⵠⲆ, da, -323.25, 100, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = d;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ΔⲆⲆᐃⲆⲆⲆ, da, -1425 / 4, 100, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = m;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⵠΔΔΔⵠⲆⲆ, da, -905 / 4, 50, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = v;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⲆᐃΔⲆᐃⲆΔ, da, -402, 130, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = p;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ᐃᐃᐃⲆⵠᐃⲆ, da, -1117 / 4, 130, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = L;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⵠᐃΔᐃⲆⵠᐃ, da, -1222 / 4, 130, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = W;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⵠΔΔⵠΔⵠᐃ, da, -1222 / 4, 100, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = G;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ΔΔⵠΔᐃⲆΔ, da, -ΔΔ.ΔΔⵠΔᐃⲆΔ.width / 4 - 350, -15, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = q;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⲆᐃΔΔᐃΔⵠ, da, -1497 / 4, 110, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = C;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ΔᐃⲆΔⲆΔᐃ, da, -1226 / 4, 100, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = T;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ᐃΔᐃΔⲆⵠⲆ, da, -1381 / 4, 80, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = f;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ΔΔⲆⵠΔᐃΔ, da, -385.5, 150, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = Z;
    var fa = 3.6;
    var ha = this.ⲆΔⵠΔⵠⲆᐃ([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", fa * 57]]);
    this.ⵠΔᐃⲆ[t] = Fw(ha, da, -ha.width / 4, 178, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = Z;
    this.ⲆⲆⵠᐃⵠΔΔⵠᐃ = function (b, c, d) {
      var e;
      O.ⵠⵠⵠΔⵠ = 1;
      O.ᐃⵠⵠᐃΔⲆΔ = 0;
      O.ᐃⵠⵠⵠΔᐃⵠ = 0;
      O.ᐃⲆΔⲆΔⵠᐃ = b;
      O.ΔΔⲆⵠΔΔΔ = c;
      var f = 0;
      if (c === 0) {
        for (f = 0; ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ.length > f && ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ[f].id !== d; f++);
        e = ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ[f];
        O.unlock.ᐃⵠᐃⲆ[f] = 1;
      } else if (c === 1) {
        for (f = 0; ΔⵠⲆⲆ.ᐃⲆⲆⲆΔ.length > f && d !== ΔⵠⲆⲆ.ᐃⲆⲆⲆΔ[f].id; f++);
        e = ΔⵠⲆⲆ.ᐃⲆⲆⲆΔ[f];
        O.unlock.ⲆΔⲆⲆⵠ[f] = 1;
      } else if (c === 2) {
        for (f = 0; ΔⵠⲆⲆ.ᐃᐃⲆΔ.length > f && ΔⵠⲆⲆ.ᐃᐃⲆΔ[f].id !== d; f++);
        e = ΔⵠⲆⲆ.ᐃᐃⲆΔ[f];
        O.unlock.ΔⲆᐃⲆⵠ[f] = 1;
      } else if (c === 3) {
        for (f = 0; f < ΔⵠⲆⲆ.ⲆΔⲆⲆⲆ.length && ΔⵠⲆⲆ.ⲆΔⲆⲆⲆ[f].id !== d; f++);
        e = ΔⵠⲆⲆ.ⲆΔⲆⲆⲆ[f];
        O.unlock.ᐃⲆΔᐃⵠ[f] = 1;
      } else if (c === 4) {
        for (f = 0; f < ΔⵠⲆⲆ.ᐃⵠⵠΔⵠ.length && ΔⵠⲆⲆ.ᐃⵠⵠΔⵠ[f].id !== d; f++);
        e = ΔⵠⲆⲆ.ᐃⵠⵠΔⵠ[f];
        O.unlock.ⵠⵠⲆᐃᐃ[f] = 1;
        O.unlock.ⲆᐃⵠΔⲆ[f] = 1;
      }
      O.ⵠᐃᐃᐃΔΔⲆ = f;
      O.ⲆᐃᐃΔⲆⲆᐃ = Iw("by " + e.ᐃᐃΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, Ya, 30, 24, undefined, xs, undefined, qn, "#000000", 24);
      O.ⵠΔⲆⵠᐃⲆⵠ = Iw(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, qn, 30, 24, Co, undefined, ep, qn, "#000000", 20);
    };
    this.ⵠⵠⵠΔⵠ = 0;
    this.ᐃⵠⵠᐃΔⲆΔ = 0;
    this.ᐃⲆΔⲆΔⵠᐃ = 0;
    this.ΔΔⲆⵠΔΔΔ = 0;
    this.ᐃⵠⵠⵠΔᐃⵠ = 0;
    this.ⲆᐃᐃΔⲆⲆᐃ = undefined;
    this.ⵠΔⲆⵠᐃⲆⵠ = Gs;
    var ia = 197;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⲆΔΔⲆΔΔⲆ, da, -385.5, 150, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = J;
    ha = this.ⲆΔⵠΔⵠⲆᐃ([["#d45ce5", fa * 3], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", fa * 57]]);
    this.ⵠΔᐃⲆ[t] = Fw(ha, da, -ha.width / 4, 178, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = J;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⵠᐃΔΔⲆΔΔ, da, -1542 / 4, 150, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = A;
    ha = this.ⲆΔⵠΔⵠⲆᐃ([["#d33a2a", fa * 3], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", fa * 57]]);
    this.ⵠΔᐃⲆ[t] = Fw(ha, da, -ha.width / 4, 178, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = A;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⵠΔΔⵠᐃΔⲆ, da, -1542 / 4, 150, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = x;
    ha = this.ⲆΔⵠΔⵠⲆᐃ([["#25c5d6", fa * 3], ["#e2cf27", fa * 10], ["#afac98", 108], ["#d88e23", fa * 57]]);
    this.ⵠΔᐃⲆ[t] = Fw(ha, da, -ha.width / 4, 178, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = x;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⵠⲆⵠⲆⲆⵠⵠ, da, -1542 / 4, 150, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = P;
    ha = this.ⲆΔⵠΔⵠⲆᐃ([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", fa * 57]]);
    this.ⵠΔᐃⲆ[t] = Fw(ha, da, -ha.width / 4, 178, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = P;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⵠⲆΔΔΔᐃⵠ, da, -1542 / 4, 150, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = M;
    ha = this.ⲆΔⵠΔⵠⲆᐃ([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", fa * 57]]);
    this.ⵠΔᐃⲆ[t] = Fw(ha, da, -ha.width / 4, 178, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = M;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⲆᐃᐃⲆᐃⲆⲆ, da, -341.5, 100, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = B;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ᐃᐃᐃⵠΔΔⲆ, da, -341.5, 100, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = _;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ΔⵠΔᐃⲆᐃⵠ, da, -1366 / 4, 100, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = I;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⲆⲆΔⲆᐃⲆⵠ, da, -1366 / 4, 100, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = S;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ΔΔΔΔΔⵠᐃ, da, -341.5, 100, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = E;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ΔΔⵠᐃⲆⲆⲆ, da, -341.5, 100, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = R;
    ⵠΔⲆᐃⵠⲆⵠ = t++;
    this.ⵠΔᐃⲆ[ⵠΔⲆᐃⵠⲆⵠ] = Fw(ΔΔ.ⵠΔⲆᐃⵠⲆⵠ, da, 484, 0, Y);
    ⵠⵠᐃⵠᐃΔᐃ = t++;
    this.ⵠΔᐃⲆ[ⵠⵠᐃⵠᐃΔᐃ] = Fw(ΔΔ.ⵠⵠᐃⵠᐃΔᐃ, da, 812.5, 0, Y);
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⵠⲆᐃᐃⲆⲆΔ, da, -758 / 4, -5, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = y;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⲆⵠⲆⲆᐃᐃⵠ, da, -189.5, -5, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = u;
    ⲆⵠⵠⲆΔⲆⲆ = t++;
    this.ⵠΔᐃⲆ[ⲆⵠⵠⲆΔⲆⲆ] = Fw(ΔΔ.ⵠⵠΔΔΔᐃⵠ, ea, 93, 30, Y);
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⵠⵠⵠᐃΔⵠⵠ, da, -173, 110, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = F;
    this.ⵠΔᐃⲆ[t] = Fw(ΔΔ.ⲆⵠⵠᐃⲆⵠⵠ, da, -173, 110, Y | ba);
    this.ⵠΔᐃⲆ[t++].view = j;
    t = 0;
    this.buttons = [];
    this.buttons[t] = Hw(50, 57, 0, [ΔΔ.ⵠⵠⵠⵠⵠⵠᐃ, ΔΔ.ⲆⵠⲆⵠΔⲆΔ, ΔΔ.ᐃΔⲆΔΔⵠᐃ], 1, 0, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        H(f);
      } else {
        H(v);
      }
    }, 320, 0, V, ea);
    t++;
    if (Ph.innerWidth < 1300) {
      this.buttons[t] = Hw(202, 97, 0, [ΔΔ.ⲆΔᐃᐃⵠᐃΔ, ΔΔ.ΔΔⵠΔΔⵠᐃ, ΔΔ.ⲆⵠΔΔᐃⲆⵠ], 1, 0, this.ⵠⲆᐃⵠᐃⲆΔ, 462, 235, Y | V, ea);
    } else {
      this.buttons[t] = Hw(202, 97, 0, [ΔΔ.ⲆΔᐃᐃⵠᐃΔ, ΔΔ.ΔΔⵠΔΔⵠᐃ, ΔΔ.ⲆⵠΔΔᐃⲆⵠ], 1, 0, this.ⵠⲆᐃⵠᐃⲆΔ, 74, 235, Y | ba, ea);
    }
    this.buttons[t].view = Q;
    t++;
    if (Ph.innerWidth > 1300) {
      this.buttons[t] = Hw(355, 168, 0, [ΔΔ.ΔᐃΔΔⵠᐃᐃ, ΔΔ.ΔᐃΔΔⵠᐃᐃ, ΔΔ.ΔᐃΔΔⵠᐃᐃ], 1, 0, function () {
        Ph.open("./changelog.html", "_blank");
      }, -195, -115, aa | ba, ea);
      this.buttons[t++].view = Q;
      this.buttons[t] = Hw(355, 168, 0, [ΔΔ.ᐃⵠⵠⵠⵠⵠΔ, ΔΔ.ᐃⵠⵠⵠⵠⵠΔ, ΔΔ.ᐃⵠⵠⵠⵠⵠΔ], 1, 0, function () {
        Ph.open("https://taming.io", "_blank");
      }, 20, -115, aa | ba, ea);
      this.buttons[t++].view = Q;
    }
    this.buttons[t++] = Hw(80, 80, 0, [ΔΔ.Ⲇᐃᐃⵠⵠⵠⵠ, ΔΔ.ᐃⵠⲆᐃⵠⲆⵠ, ΔΔ.ⲆᐃᐃΔⲆⵠᐃ], 1, 0, function () {
      Ph.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, X, ea);
    this.buttons[t++] = Hw(80, 80, 0, [ΔΔ.ΔⲆᐃᐃⵠΔΔ, ΔΔ.ᐃΔΔⵠⵠⲆᐃ, ΔΔ.ⲆᐃᐃΔⵠΔⵠ], 1, 0, function () {
      Ph.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, X, ea);
    this.buttons[t++] = Hw(80, 80, 0, [ΔΔ.ⲆᐃΔⵠⲆⵠᐃ, ΔΔ.ⵠΔΔΔᐃᐃⵠ, ΔΔ.ᐃᐃᐃⲆᐃᐃⲆ], 1, 0, function () {
      Ph.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, X, ea);
    this.buttons[t++] = Hw(80, 80, 0, [ΔΔ.ᐃⵠⵠⵠⲆᐃⲆ, ΔΔ.ⵠⲆⲆᐃⵠΔΔ, ΔΔ.ᐃΔⵠⵠⲆᐃⲆ], 1, 0, function () {
      Ph.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, X, ea);
    this.buttons[t++] = Hw(80, 80, 0, [ΔΔ.ⲆⵠⵠΔᐃⵠⵠ, ΔΔ.ᐃⵠᐃΔⲆᐃⲆ, ΔΔ.ᐃⵠᐃᐃⵠᐃⲆ], 1, 0, function () {
      Ph.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, X, ea);
    this.buttons[t++] = Hw(80, 80, 0, [ΔΔ.ΔⵠⲆΔⲆᐃⵠ, ΔΔ.ᐃⲆᐃᐃΔᐃⵠ, ΔΔ.ΔᐃΔⵠᐃⵠⲆ], 1, 0, function () {
      Ph.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, X, ea);
    this.buttons[t++] = Hw(80, 80, 0, [ΔΔ.ΔⵠⲆᐃⵠⲆⲆ, ΔΔ.ⲆⵠⲆⲆⲆΔΔ, ΔΔ.ⲆΔⲆⵠⲆᐃⵠ], 1, 0, function () {
      Ph.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, X, ea);
    ᐃᐃⵠⵠᐃᐃⲆ = t++;
    this.buttons[ᐃᐃⵠⵠᐃᐃⲆ] = Hw(232, 142, 0, [ΔΔ.ⲆⵠΔᐃᐃᐃᐃ, ΔΔ.ᐃⵠⲆᐃⵠⲆᐃ, ΔΔ.ⵠⵠⵠᐃⲆⵠᐃ], 1, 0, function () {
      H(T);
      $x(jx.ⵠΔΔΔⵠᐃⲆ, jx.ᐃⵠⲆⵠⵠⲆⵠ, jx.ⲆⵠΔⲆⲆⲆⵠ, jx.ᐃⲆⵠΔⲆᐃΔ);
    }, -5, 573, V, ea);
    this.buttons[t++] = Hw(236, 165, 0, [ΔΔ.ΔΔⲆᐃᐃᐃⲆ, ΔΔ.ΔΔⲆᐃᐃᐃⲆ, ΔΔ.ΔΔⲆᐃᐃᐃⲆ], 1, 1, function () {
      H(T);
    }, -5, 566, V, ea);
    ⵠΔⲆⲆᐃᐃⵠ = t++;
    this.buttons[ⵠΔⲆⲆᐃᐃⵠ] = Hw(236, 165, 0, [ΔΔ.ΔᐃⲆⲆᐃΔⲆ, ΔΔ.ᐃΔⵠⲆᐃΔⵠ, ΔΔ.ΔⲆΔⲆⲆⲆΔ], 1, 0, function () {
      H(C);
    }, -5, 494, V, ea);
    this.buttons[t++] = Hw(236, 165, 0, [ΔΔ.ⵠΔⵠⲆΔⵠΔ, ΔΔ.ⵠΔⵠⲆΔⵠΔ, ΔΔ.ⵠΔⵠⲆΔⵠΔ], 1, 1, function () {
      H(C);
    }, -5, 494, V, ea);
    ⵠΔᐃⲆΔΔⵠ = t++;
    this.buttons[ⵠΔᐃⲆΔΔⵠ] = Hw(236, 165, 0, [ΔΔ.ΔᐃⲆⲆᐃΔⲆ, ΔΔ.ᐃΔⵠⲆᐃΔⵠ, ΔΔ.ΔⲆΔⲆⲆⲆΔ], 1, 0, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        if (jx.ΔΔⲆᐃⲆᐃΔ - Date.now() > 0) {
          H(G);
        } else {
          H(L);
        }
      } else {
        H(v);
      }
    }, -5, 415, V, ea);
    this.buttons[t++] = Hw(236, 165, 0, [ΔΔ.ᐃᐃⲆΔΔΔΔ, ΔΔ.ᐃᐃⲆΔΔΔΔ, ΔΔ.ᐃᐃⲆΔΔΔΔ], 1, 1, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        if (jx.ΔΔⲆᐃⲆᐃΔ - Date.now() > 0) {
          H(G);
        } else {
          H(L);
        }
      } else {
        H(v);
      }
    }, -5, 415, V, ea);
    ⲆⵠⵠⲆᐃΔⲆ = t++;
    this.buttons[ⲆⵠⵠⲆᐃΔⲆ] = Hw(236, 165, 0, [ΔΔ.ΔᐃⲆⲆᐃΔⲆ, ΔΔ.ᐃΔⵠⲆᐃΔⵠ, ΔΔ.ΔⲆΔⲆⲆⲆΔ], 1, 0, function () {
      H(p);
    }, -5, 336, V, ea);
    this.buttons[t++] = Hw(236, 165, 0, [ΔΔ.ΔⲆⲆᐃᐃΔΔ, ΔΔ.ΔⲆⲆᐃᐃΔΔ, ΔΔ.ΔⲆⲆᐃᐃΔΔ], 1, 1, function () {
      H(p);
    }, -5, 336, V, ea);
    ᐃᐃᐃᐃⵠⲆΔ = t++;
    this.buttons[ᐃᐃᐃᐃⵠⲆΔ] = Hw(236, 165, 0, [ΔΔ.ΔᐃⲆⲆᐃΔⲆ, ΔΔ.ᐃΔⵠⲆᐃΔⵠ, ΔΔ.ΔⲆΔⲆⲆⲆΔ], 1, 0, function () {
      H(m);
    }, -5, 257, V, ea);
    this.buttons[t++] = Hw(236, 165, 0, [ΔΔ.ᐃⵠᐃⲆᐃᐃΔ, ΔΔ.ᐃⵠᐃⲆᐃᐃΔ, ΔΔ.ᐃⵠᐃⲆᐃᐃΔ], 1, 1, function () {
      H(m);
    }, -5, 257, V, ea);
    ⲆⵠᐃᐃⵠΔⲆ = t++;
    this.buttons[ⲆⵠᐃᐃⵠΔⲆ] = Hw(236, 165, 0, [ΔΔ.ΔᐃⲆⲆᐃΔⲆ, ΔΔ.ᐃΔⵠⲆᐃΔⵠ, ΔΔ.ΔⲆΔⲆⲆⲆΔ], 1, 0, function () {
      H(Q);
    }, -5, 178, V, ea);
    this.buttons[t++] = Hw(236, 165, 0, [ΔΔ.ᐃⲆⲆⵠᐃⲆⵠ, ΔΔ.ᐃⲆⲆⵠᐃⲆⵠ, ΔΔ.ᐃⲆⲆⵠᐃⲆⵠ], 1, 1, function () {
      H(Q);
    }, -5, 178, V, ea);
    ΔⵠⲆΔᐃⲆⵠ = t++;
    this.ΔⵠⲆΔᐃⲆⵠ = ΔⵠⲆΔᐃⲆⵠ;
    this.buttons[ΔⵠⲆΔᐃⲆⵠ] = Hw(324, 222, 0, [ΔΔ.ⲆⵠᐃⲆⲆⵠΔ, ΔΔ.ΔⲆⲆⵠⵠᐃⲆ, ΔΔ.ᐃᐃΔᐃᐃᐃⵠ], 1, 0, function () {
      H(v);
    }, 0, 70, V, ea);
    ᐃⵠⵠⲆΔⲆΔ = t++;
    ΔⲆⲆⲆΔᐃⲆ = t++;
    this.ᐃⵠⵠⲆΔⲆΔ = ᐃⵠⵠⲆΔⲆΔ;
    this.ΔⲆⲆⲆΔᐃⲆ = ΔⲆⲆⲆΔᐃⲆ;
    this.buttons[ᐃⵠⵠⲆΔⲆΔ] = Hw(324, 222, 0, [ΔΔ.ᐃⵠⵠⵠⵠΔⵠ, ΔΔ.ⵠⲆⵠⲆⵠΔΔ, ΔΔ.ⵠⵠⵠⵠΔⵠⲆ], 1, 0, function () {
      H(d);
      qa(-1);
    }, 0, 70, V, da);
    this.buttons[ΔⲆⲆⲆΔᐃⲆ] = Hw(324, 222, 0, [ΔΔ.ⲆΔΔⲆᐃⵠΔ, ΔΔ.ⲆΔΔⲆᐃⵠΔ, ΔΔ.ⲆΔΔⲆᐃⵠΔ], 1, 1, function () {
      H(d);
      qa(-1);
    }, 0, 70, V, da);
    if (nx.ᐃΔᐃⵠⵠⵠⲆ === 0) {
      var ja = t++;
      if (Ph.innerWidth < 1300) {
        this.buttons[ja] = Hw(266, 176, 0, [ΔΔ.ᐃᐃⲆΔᐃᐃᐃ, ΔΔ.ΔⲆΔⲆⵠᐃⲆ, ΔΔ.ΔⲆⲆΔᐃΔⲆ], 1, 0, function () {
          nx.ⵠΔⵠⵠΔ(0);
        }, 150, 300, V | Y, ea);
      } else {
        this.buttons[ja] = Hw(266, 176, 0, [ΔΔ.ᐃᐃⲆΔᐃᐃᐃ, ΔΔ.ΔⲆΔⲆⵠᐃⲆ, ΔΔ.ΔⲆⲆΔᐃΔⲆ], 1, 0, function () {
          nx.ⵠΔⵠⵠΔ(0);
        }, -340, 100, ba | Y, ea);
      }
      this.buttons[ja].view = Q;
      this.buttons[ja].hint = 0;
      var ka = t++;
      if (Ph.innerWidth < 1300) {
        this.buttons[ka] = Hw(266, 176, 0, [ΔΔ.ΔⲆⵠΔΔᐃΔ, ΔΔ.ⵠΔΔΔⲆⵠⲆ, ΔΔ.ᐃᐃⲆᐃΔⵠⲆ], 1, 0, function () {
          nx.ⵠΔⵠⵠΔ(4);
        }, 150, 400, V | Y, ea);
      } else {
        this.buttons[ka] = Hw(266, 176, 0, [ΔΔ.ΔⲆⵠΔΔᐃΔ, ΔΔ.ⵠΔΔΔⲆⵠⲆ, ΔΔ.ᐃᐃⲆᐃΔⵠⲆ], 1, 0, function () {
          nx.ⵠΔⵠⵠΔ(4);
        }, -340, 200, ba | Y, ea);
      }
      this.buttons[ka].view = Q;
      this.buttons[ka].hint = 0;
      var la = t++;
      if (Ph.innerWidth < 1300) {
        this.buttons[la] = Hw(266, 176, 0, [ΔΔ.ᐃⵠⵠΔΔᐃΔ, ΔΔ.ⵠⲆᐃᐃⵠⲆΔ, ΔΔ.ⵠᐃⲆⲆᐃᐃⲆ], 1, 0, function () {
          nx.ⵠΔⵠⵠΔ(6);
        }, 450, 300, V | Y, ea);
      } else {
        this.buttons[la] = Hw(266, 176, 0, [ΔΔ.ᐃⵠⵠΔΔᐃΔ, ΔΔ.ⵠⲆᐃᐃⵠⲆΔ, ΔΔ.ⵠᐃⲆⲆᐃᐃⲆ], 1, 0, function () {
          nx.ⵠΔⵠⵠΔ(6);
        }, -340, 300, ba | Y, ea);
      }
      this.buttons[la].view = Q;
      this.buttons[la].hint = 0;
      var ma = t++;
      if (Ph.innerWidth < 1300) {
        this.buttons[ma] = Hw(266, 176, 0, [ΔΔ.ΔᐃⲆⵠⵠΔⵠ, ΔΔ.ⵠⵠᐃΔᐃⲆᐃ, ΔΔ.ⵠΔΔⵠⵠⵠᐃ], 1, 0, function () {
          nx.ⵠΔⵠⵠΔ(2);
        }, 300, 300, V | Y, ea);
      } else {
        this.buttons[ma] = Hw(266, 176, 0, [ΔΔ.ΔᐃⲆⵠⵠΔⵠ, ΔΔ.ⵠⵠᐃΔᐃⲆᐃ, ΔΔ.ⵠΔΔⵠⵠⵠᐃ], 1, 0, function () {
          nx.ⵠΔⵠⵠΔ(2);
        }, 204, 100, ba | Y, ea);
      }
      this.buttons[ma].view = Q;
      this.buttons[ma].hint = 0;
      var na = t++;
      if (Ph.innerWidth < 1300) {
        this.buttons[na] = Hw(266, 176, 0, [ΔΔ.ΔⲆᐃⵠᐃᐃⵠ, ΔΔ.ΔⲆΔΔⲆᐃΔ, ΔΔ.ⲆⲆᐃΔΔⲆⲆ], 1, 0, function () {
          nx.ⵠΔⵠⵠΔ(3);
        }, 300, 400, V | Y, ea);
      } else {
        this.buttons[na] = Hw(266, 176, 0, [ΔΔ.ΔⲆᐃⵠᐃᐃⵠ, ΔΔ.ΔⲆΔΔⲆᐃΔ, ΔΔ.ⲆⲆᐃΔΔⲆⲆ], 1, 0, function () {
          nx.ⵠΔⵠⵠΔ(3);
        }, 204, 200, ba | Y, ea);
      }
      this.buttons[na].view = Q;
      this.buttons[na].hint = 0;
      var oa = t++;
      this.buttons[oa] = Hw(266, 176, 0, [ΔΔ.ΔⲆⲆᐃᐃⲆⵠ, ΔΔ.ΔⵠⵠΔⲆⵠⲆ, ΔΔ.ⲆⲆⲆΔⲆᐃᐃ], 1, 0, function () {
        nx.ⵠΔⵠⵠΔ(7);
      }, Ph.innerWidth < 1300 ? 450 : 204, Ph.innerWidth < 1300 ? 400 : 300, (Ph.innerWidth < 1300 ? V : ba) | Y, ea);
      this.buttons[oa].view = Q;
      this.buttons[oa].hint = 0;
    }
    function qa(b, c) {
      if (c !== xs) {
        jx.ᐃⲆΔᐃᐃⲆⲆ = c;
        var d = jx.ΔⵠᐃⲆⵠⵠⵠ[c];
        jx.ᐃᐃΔᐃⵠ = d.score;
        jx.ⵠΔᐃⵠΔ = d.kill;
        jx.ⵠΔᐃⵠΔⵠᐃ = d.death;
        jx.time = d.time;
        jx.ⲆⵠⵠⲆΔⵠⲆ = d.bestScore;
        jx.ⲆᐃⲆⲆΔⵠⵠ = d.bestKill;
        jx.ⵠⲆⵠΔᐃΔⵠ = d.bestTime;
        jx.ΔⲆⵠᐃⲆᐃⵠ = d.scoreTotal;
      }
      if (b === _g) {
        b = jx.ⵠⵠⵠⲆⵠΔΔ;
      }
      jx.ⵠⵠⵠⲆⵠΔΔ = b;
      if (b >= 0) {
        document.getElementById("stats_box_time").innerHTML = jx.ⵠⲆⵠΔᐃΔⵠ[b];
        document.getElementById("stats_box_kill").innerHTML = jx.ⲆᐃⲆⲆΔⵠⵠ[b];
        document.getElementById("stats_box_score").innerHTML = jx.ⲆⵠⵠⲆΔⵠⲆ[b];
      } else {
        var f = 0;
        for (var g = 0; jx.ⵠΔᐃⵠΔ.length > g; g++) {
          f += jx.ⵠΔᐃⵠΔ[g];
        }
        var h = 0;
        for (g = 0; g < jx.time.length; g++) {
          h += jx.time[g];
        }
        document.getElementById("stats_box_time").innerHTML = h;
        document.getElementById("stats_box_kill").innerHTML = f;
        document.getElementById("stats_box_score").innerHTML = jx.ᐃᐃΔᐃⵠ;
      }
    }
    this.buttons[t] = Hw(87, 78, 0, [ΔΔ.ᐃΔⵠΔⲆΔⵠ, ΔΔ.ⵠΔΔᐃⲆⲆⵠ, ΔΔ.ⵠᐃⲆⵠᐃΔⲆ], 1, 0, function () {
      jx.ΔΔᐃⵠⵠⲆⵠΔΔ();
      if (jx.ΔⲆΔΔᐃⵠⵠ === 0) {
        H(j);
      } else {
        H(F);
      }
    }, 127, 110, ba | Y, da);
    this.buttons[t++].view = d;
    this.buttons[t] = Hw(87, 78, 0, [ΔΔ.ΔⵠⵠⲆⲆⵠⲆ, ΔΔ.ΔⲆⲆΔΔΔΔ, ΔΔ.ⵠⵠΔⲆᐃⵠⵠ], 1, 0, function () {
      const a = Ph.document.createElement("textarea");
      a.value = Ix;
      Ph.document.body.appendChild(a);
      a.select();
      Ph.document.execCommand("copy");
      Ph.document.body.removeChild(a);
    }, 182, 110, ba | Y, da);
    this.buttons[t++].view = d;
    this.buttons[t] = Hw(87, 78, 0, [ΔΔ.ΔΔⲆⵠΔᐃⵠ, ΔΔ.ᐃⵠΔⵠᐃᐃΔ, ΔΔ.ΔⲆⵠⵠΔΔⵠ], 1, 0, function () {
      (function () {
        if (Gx === Ex && Ph.FB && Ph.FB.getUserID()) {
          Ph.FB.logout();
        }
        if (Dx === Gx && Yq !== Qx) {
          Ph.gapi.auth2.getAuthInstance().signOut();
          Qx = undefined;
        }
        Ix = undefined;
        Hx = undefined;
        Gx = Ya;
        jx.ΔⲆΔⵠⲆ = 0;
        jx.ⲆᐃᐃⲆⵠ = 0;
        jx.ᐃᐃΔᐃⵠ = 0;
        jx.ⵠⵠᐃΔΔⲆᐃ();
        ⵠⵠᐃⵠⵠⵠⵠⵠΔ();
      })();
    }, 255, 110, ba | Y, da);
    this.buttons[t++].view = d;
    this.buttons[t] = Hw(58, 64, 0, [ΔΔ.ΔⲆΔΔΔΔᐃ, ΔΔ.ⵠΔΔᐃΔⲆⵠ, ΔΔ.ⲆⲆⲆᐃⵠᐃⲆ], 1, 0, function () {
      H(Q);
    }, 189, 118, ba | Y, da);
    this.buttons[t++].view = v;
    this.buttons[t] = Hw(497, 72, 0, [ΔΔ.ΔⵠⲆΔΔΔΔ, ΔΔ.ⵠᐃᐃⲆΔⵠⵠ, ΔΔ.ⲆⵠΔᐃᐃᐃΔ], 1, 0, function () {
      (function () {
        if (af) {
          Hx = ΔΔⲆ.ⵠⵠᐃⵠⵠᐃⵠ(40);
          Gx = Fx;
          Ix = af.userId;
          Ph.ΔⵠΔⵠᐃᐃⵠ();
          return;
        }
        Ph.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, ba | Y, da);
    this.buttons[t++].view = v;
    this.buttons[t] = Hw(497, 72, 0, [ΔΔ.ⵠⲆⵠⲆⲆⵠᐃ, ΔΔ.ᐃΔᐃⲆⵠⲆᐃ, ΔΔ.ΔⲆΔᐃⵠᐃΔ], 1, 0, function () {
      Ph.FB.login(function (a) {
        if (a.authResponse) {
          Ph.FB.api("/me", function (a) {
            Gx = Ex;
            Hx = Ph.FB.getAuthResponse().accessToken;
            Vx();
            Ph.ΔⵠΔⵠᐃᐃⵠ();
          });
        }
      });
    }, -130, 430, ba | Y, da);
    this.buttons[t++].view = v;
    ⲆᐃⲆⵠⵠⵠⵠ = 20000;
    this.ᐃⵠΔᐃᐃΔⵠ = function (a) {
      var b = jx.ΔⲆᐃᐃⵠᐃⵠ(a);
      var c = ⲆᐃⲆⵠⵠⵠⵠ * (b * b);
      return (a -= c) / ((b + 1) * (b + 1) * ⲆᐃⲆⵠⵠⵠⵠ - c);
    };
    this.ΔⲆᐃᐃⵠᐃⵠ = function (a) {
      return Math.floor(Math.sqrt(a / ⲆᐃⲆⵠⵠⵠⵠ));
    };
    this.ⲆⲆΔᐃⲆᐃⲆΔⲆ = function (a) {
      jx.ᐃᐃⲆⵠⵠ = jx.ΔⲆᐃᐃⵠᐃⵠ(a);
      jx.ⵠΔΔΔⲆᐃΔ = jx.ᐃⵠΔᐃᐃΔⵠ(a);
      jx.ΔᐃⵠⵠΔⵠΔ = 0;
      jx.ᐃᐃΔᐃⵠ = a;
    };
    this.ΔⵠᐃⵠΔⵠᐃⲆⵠ = function (a) {
      jx.buttons[jx.ΔⵠⲆΔᐃⲆⵠ].info.active = 0;
      jx.buttons[jx.ᐃⵠⵠⲆΔⲆΔ].info.active = 1;
      jx.buttons[jx.ΔⲆⲆⲆΔᐃⲆ].info.active = 1;
      k();
      if (a.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = Ph.decodeURIComponent(Ph.escape(Ph.atob(a.name)));
      } else {
        document.getElementById("account_nickname_input").value = a.name;
      }
      jx.ⲆᐃᐃⲆⵠ = a.bread;
      var b = a.seasons;
      var c = b[b.length - 1];
      jx.ΔⵠᐃⲆⵠⵠⵠ = b;
      O.ⲆⲆΔᐃⲆᐃⲆΔⲆ(c.score);
      jx.ᐃᐃΔᐃⵠ = c.score;
      jx.ⵠΔᐃⵠΔ = c.kill;
      jx.ⵠΔᐃⵠΔⵠᐃ = c.death;
      jx.time = c.time;
      jx.ⲆⵠⵠⲆΔⵠⲆ = c.bestScore;
      jx.ⲆᐃⲆⲆΔⵠⵠ = c.bestKill;
      jx.ⵠⲆⵠΔᐃΔⵠ = c.bestTime;
      jx.ΔⲆⵠᐃⲆᐃⵠ = c.scoreTotal;
      jx.ΔⲆΔΔᐃⵠⵠ = a.firstName;
      document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
      if (lg === jx.ΔⲆΔΔᐃⵠⵠ) {
        jx.ΔⲆΔΔᐃⵠⵠ = 0;
      }
      jx.ΔΔⲆᐃⲆᐃΔ = Date.now() + a.privateServerTime;
      if (Number(a.privateServerTime) > 0) {
        jx.ΔΔⲆᐃⲆᐃΔ = Date.now() + Number(a.privateServerTime);
      }
      jx.ΔⲆΔⵠⲆ = Date.now() + a.kit;
      if (Number(a.kit) > 0) {
        jx.ΔⲆΔⵠⲆ = Date.now() + Number(a.kit);
      }
      var d = ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ;
      for (var e = 0; e < a.skins.length; e++) {
        if ((i = a.skins[e]) > 0) {
          for (var f = 0; d.length > f; f++) {
            if (e === d[f].id) {
              O.unlock.ᐃⵠᐃⲆ[f] = 1;
            }
          }
        }
      }
      d = ΔⵠⲆⲆ.ᐃⲆⲆⲆΔ;
      e = 0;
      for (; e < a.accessories.length; e++) {
        var i = a.accessories[e];
        if (i > 0) {
          for (f = 0; d.length > f; f++) {
            if (d[f].id === e) {
              O.unlock.ⲆΔⲆⲆⵠ[f] = 1;
            }
          }
        }
      }
      d = ΔⵠⲆⲆ.ⲆΔⲆⲆⲆ;
      e = 0;
      for (; a.books.length > e; e++) {
        if ((i = a.books[e]) > 0) {
          for (f = 0; f < d.length; f++) {
            if (e === d[f].id) {
              O.unlock.ᐃⲆΔᐃⵠ[f] = 1;
            }
          }
        }
      }
      d = ΔⵠⲆⲆ.ᐃᐃⲆΔ;
      e = 0;
      for (; e < a.bags.length; e++) {
        i = a.bags[e];
        if (i > 0) {
          for (f = 0; d.length > f; f++) {
            if (e === d[f].id) {
              O.unlock.ΔⲆᐃⲆⵠ[f] = 1;
            }
          }
        }
      }
      d = ΔⵠⲆⲆ.ᐃⵠⵠΔⵠ;
      e = 0;
      for (; a.crates.length > e; e++) {
        if ((i = a.crates[e]) > 0) {
          for (f = 0; f < d.length; f++) {
            if (e === d[f].id) {
              O.unlock.ⵠⵠⲆᐃᐃ[f] = 1;
              O.unlock.ⲆᐃⵠΔⲆ[f] = 1;
            }
          }
        }
      }
    };
    this.ⵠΔⲆΔΔⵠⵠⵠⵠ = function () {
      Ph.ΔⵠΔⵠᐃᐃⵠ = function () {
        H(Q);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Bx + "login?token=" + Hx + "&type=" + Gx + (af ? "&userId=" + af.userId + "&userInfo=" + af.userInfo : ""));
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(O.ΔⵠᐃⵠΔⵠᐃⲆⵠ);
      };
      if (Mx === 1) {
        Ph.ΔⵠΔⵠᐃᐃⵠ();
      }
    };
    Ph.ⵠⵠᐃⵠⵠⵠⵠⵠΔ = function () {
      jx.buttons[jx.ΔⵠⲆΔᐃⲆⵠ].info.active = 1;
      jx.buttons[jx.ᐃⵠⵠⲆΔⲆΔ].info.active = 0;
      jx.buttons[jx.ΔⲆⲆⲆΔᐃⲆ].info.active = 0;
      H(Q);
    };
    this.ᐃⲆΔⲆⵠ = function () {
      return jx.buttons[jx.ᐃⵠⵠⲆΔⲆΔ].info.active;
    };
    this.buttons[t] = Hw(461, 105, 0, [ΔΔ.ΔΔⲆᐃⲆⲆΔ, ΔΔ.ᐃᐃΔⵠᐃᐃⵠ, ΔΔ.ⵠⲆΔΔᐃⲆⲆ], 1, 0, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        H(f);
      } else {
        H(v);
      }
    }, -100, 80, ba | Y, da);
    this.buttons[t++].view = p;
    this.buttons[t] = Hw(157, 158, 0, [ΔΔ.ᐃⵠⲆᐃΔⵠᐃ, ΔΔ.ⲆΔᐃΔᐃⵠⲆ, ΔΔ.ⲆⲆⵠⵠⵠΔᐃ], 1, 0, function () {
      Ph.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, ba | Y, da);
    this.buttons[t++].view = C;
    this.buttons[t] = Hw(66, 73, 0, [ΔΔ.ⵠⵠΔⵠΔⲆᐃ, ΔΔ.ΔⲆⲆⲆᐃᐃⵠ, ΔΔ.ⲆⵠⵠΔⵠⲆⵠ], 1, 0, undefined, -68, 340, ba | Y, da);
    this.buttons[t++].view = C;
    this.buttons[t] = Hw(66, 73, 0, [ΔΔ.ΔΔⵠⲆᐃᐃⵠ, ΔΔ.ΔⵠⵠⵠᐃᐃΔ, ΔΔ.ⵠⲆᐃⲆᐃΔⵠ], 1, 0, undefined, -30, 340, ba | Y, da);
    this.buttons[t++].view = C;
    this.ⵠⵠⲆΔⵠⵠᐃⲆⲆ = t;
    this.buttons[t] = Hw(97, 66, 0, [ΔΔ.ⵠⲆⲆⲆΔΔᐃ, ΔΔ.ᐃᐃⲆⵠᐃⵠΔ, ΔΔ.ΔⲆΔᐃᐃⲆΔ], 1, 0, function () {
      $x(undefined, undefined, jx.ⲆⵠΔⲆⲆⲆⵠ);
    }, -14, 151, ba | Y, da);
    this.buttons[t++].view = T;
    this.ᐃΔᐃᐃΔⲆΔ = t;
    this.buttons[t] = Hw(135, 66, 0, [ΔΔ.ΔᐃⲆΔΔΔΔ, ΔΔ.ΔᐃᐃⵠΔᐃⲆ, ΔΔ.ΔⲆΔᐃΔΔⲆ], 1, 0, function () {
      $x(ir, undefined, jx.ᐃΔᐃᐃΔⲆΔ);
    }, 37.5, 151, ba | Y, da);
    this.buttons[t++].view = T;
    this.ⲆⵠΔᐃᐃⵠΔ = t;
    this.buttons[t] = Hw(160, 66, 0, [ΔΔ.ΔᐃΔΔⲆⲆⲆ, ΔΔ.ᐃᐃᐃⵠΔⵠⵠ, ΔΔ.ᐃⵠⲆⵠⲆΔᐃ], 1, 0, function () {
      $x(xs, undefined, jx.ⲆⵠΔᐃᐃⵠΔ);
    }, 107.5, 151, ba | Y, da);
    this.buttons[t++].view = T;
    this.ⲆⵠΔⲆⲆⲆⵠ = t;
    this.buttons[t] = Hw(207, 66, 0, [ΔΔ.ᐃⲆⲆⵠⲆⵠΔ, ΔΔ.ⵠᐃᐃⵠᐃⵠⵠ, ΔΔ.ⲆᐃⵠΔΔⲆⵠ], 1, 0, function () {
      $x(undefined, ir, jx.ⲆⵠΔⲆⲆⲆⵠ);
    }, 190.5, 151, ba | Y, da);
    this.buttons[t++].view = T;
    this.ⲆᐃⲆⲆᐃⲆⲆ = t;
    this.buttons[t] = Hw(144, 66, 0, [ΔΔ.ΔΔΔⵠⵠΔⲆ, ΔΔ.ⲆⵠⲆⲆΔⵠⵠ, ΔΔ.ⲆᐃᐃⲆΔⲆⲆ], 1, 0, function () {
      $x(jx.ⲆᐃⲆⲆᐃⲆⲆ);
    }, 103.5, 110, ba | Y, da);
    this.buttons[t++].view = T;
    this.ᐃⵠᐃᐃΔᐃⲆ = t;
    this.buttons[t] = Hw(124, 66, 0, [ΔΔ.ᐃΔⲆⵠⲆᐃⵠ, ΔΔ.ᐃⵠΔⲆᐃᐃΔ, ΔΔ.ᐃΔΔⵠⵠⵠⵠ], 1, 0, function () {
      $x(jx.ᐃⵠᐃᐃΔᐃⲆ);
    }, 177.5, 110, ba | Y, da);
    this.buttons[t++].view = T;
    this.ⵠΔΔΔⵠᐃⲆ = t;
    this.buttons[t] = Hw(104, 66, 0, [ΔΔ.ⲆΔⵠΔᐃⲆⵠ, ΔΔ.ᐃᐃⵠⲆΔᐃΔ, ΔΔ.ᐃΔⲆᐃᐃΔⵠ], 1, 0, function () {
      $x(jx.ⵠΔΔΔⵠᐃⲆ);
    }, 242, 110, ba | Y, da);
    this.buttons[t++].view = T;
    this.ΔⵠᐃΔⵠΔⵠ = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ⵠΔⲆΔⵠⲆⵠ, ΔΔ.ⵠⵠΔΔⵠⲆΔ, ΔΔ.ⵠᐃᐃⲆⵠⵠⲆ], 1, 0, function () {
      $x(undefined, undefined, undefined, jx.ΔⵠᐃΔⵠΔⵠ);
    }, -185, 528, ba | Y, da);
    this.buttons[t++].view = T;
    this.ΔⵠΔᐃΔⲆΔ = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ⲆΔⵠᐃᐃⵠⲆ, ΔΔ.ⲆΔᐃⵠⲆᐃᐃ, ΔΔ.ⲆᐃΔΔⵠⵠΔ], 1, 0, function () {
      $x(Yj, xs, Wh, jx.ΔⵠΔᐃΔⲆΔ);
    }, -149, 528, ba | Y, da);
    this.buttons[t++].view = T;
    this.ⲆΔⲆⲆᐃⵠⵠ = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ⲆᐃⲆᐃⵠⲆⲆ, ΔΔ.ⵠΔΔᐃⲆⲆΔ, ΔΔ.ⲆⲆᐃᐃΔⵠᐃ], 1, 0, function () {
      $x(xs, xs, undefined, jx.ⲆΔⲆⲆᐃⵠⵠ);
    }, -113, 528, ba | Y, da);
    this.buttons[t++].view = T;
    this.ᐃⵠᐃⲆⲆⵠⵠ = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ᐃⲆᐃⵠⲆᐃⲆ, ΔΔ.ⲆⵠΔⵠⲆⵠᐃ, ΔΔ.ᐃΔⵠⵠΔΔⵠ], 1, 0, function () {
      $x(lg, El, undefined, jx.ᐃⵠᐃⲆⲆⵠⵠ);
    }, -77, 528, ba | Y, da);
    this.buttons[t++].view = T;
    this.ⲆⵠΔᐃΔΔᐃ = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ⲆᐃⲆΔⵠⵠΔ, ΔΔ.ᐃΔᐃᐃᐃⲆⵠ, ΔΔ.ΔⲆⵠᐃᐃⵠᐃ], 1, 0, function () {
      $x(undefined, undefined, undefined, jx.ⲆⵠΔᐃΔΔᐃ);
    }, -41, 528, ba | Y, da);
    this.buttons[t++].view = T;
    this.ᐃⲆⵠΔⲆᐃΔ = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ᐃⲆⵠⲆⲆⲆᐃ, ΔΔ.ⵠᐃΔᐃᐃⵠΔ, ΔΔ.ⲆⵠᐃⲆⵠᐃⲆ], 1, 0, function () {
      $x(Tj, eg, Wh, jx.ᐃⲆⵠΔⲆᐃΔ);
    }, -5, 528, ba | Y, da);
    this.buttons[t++].view = T;
    this.buttons[t] = Hw(232, 352, 0, [ΔΔ.ⲆⲆⵠⲆΔⲆᐃ, ΔΔ.ⲆᐃⲆⵠᐃΔΔ, ΔΔ.ᐃᐃᐃΔΔᐃΔ], 1, 0, function () {
      _x(300);
    }, -330, 135, ba | Y, da);
    this.buttons[t++].view = f;
    this.buttons[t] = Hw(232, 352, 0, [ΔΔ.ⲆΔΔᐃⲆᐃⵠ, ΔΔ.ⵠⲆⲆᐃᐃⲆⲆ, ΔΔ.ΔᐃⲆⲆᐃⲆΔ], 1, 0, function () {
      _x(600);
    }, -195, 135, ba | Y, da);
    this.buttons[t++].view = f;
    this.buttons[t] = Hw(243, 374, 0, [ΔΔ.ΔΔΔⲆⲆⲆΔ, ΔΔ.ΔⲆᐃΔΔᐃΔ, ΔΔ.ᐃΔᐃⲆⲆΔⲆ], 1, 0, function () {
      _x(2600);
    }, -60, 130, ba | Y, da);
    this.buttons[t++].view = f;
    this.buttons[t] = Hw(232, 352, 0, [ΔΔ.ΔⲆᐃΔΔⵠⲆ, ΔΔ.ᐃΔⵠⵠⲆΔΔ, ΔΔ.ᐃᐃᐃΔᐃⲆᐃ], 1, 0, function () {
      _x(7000);
    }, 78, 135, ba | Y, da);
    this.buttons[t++].view = f;
    this.buttons[t] = Hw(243, 374, 0, [ΔΔ.ⵠⲆΔΔⲆⲆⲆ, ΔΔ.ⵠᐃᐃΔⵠⲆⲆ, ΔΔ.ⵠΔΔᐃΔΔΔ], 1, 0, function () {
      _x(20000);
    }, 213, 130, ba | Y, da);
    this.buttons[t++].view = f;
    this.buttons[t] = Hw(58, 64, 0, [ΔΔ.ΔⲆΔΔΔΔᐃ, ΔΔ.ⵠΔΔᐃΔⲆⵠ, ΔΔ.ⲆⲆⲆᐃⵠᐃⲆ], 1, 0, function () {
      H(p);
    }, 300, 88, ba | Y, da);
    this.buttons[t++].view = f;
    this.buttons[t] = Hw(323, 112, 0, [ΔΔ.ⵠⲆᐃᐃⵠⵠᐃ, ΔΔ.ΔⵠᐃΔⵠⵠⵠ, ΔΔ.ⲆΔᐃᐃᐃⲆᐃ], 1, 0, function () {
      H(B);
      Ca.ᐃⵠᐃⲆΔ();
    }, -315, 185, ba | Y, da);
    this.buttons[t++].view = m;
    this.buttons[t] = Hw(323, 112, 0, [ΔΔ.ⵠⲆᐃΔᐃⲆⲆ, ΔΔ.ΔⲆΔᐃⵠⲆⲆ, ΔΔ.ᐃᐃΔⲆⲆᐃⵠ], 1, 0, function () {
      H(_);
      Ia.ᐃⵠᐃⲆΔ();
    }, -315, 321, ba | Y, da);
    this.buttons[t++].view = m;
    this.buttons[t] = Hw(323, 112, 0, [ΔΔ.ΔΔⵠⲆⵠⵠⵠ, ΔΔ.ⲆⵠⵠⲆⲆᐃᐃ, ΔΔ.ΔᐃᐃⲆⲆⲆⵠ], 1, 0, function () {
      H(I);
      Da.ᐃⵠᐃⲆΔ();
    }, 153, 185, ba | Y, da);
    this.buttons[t++].view = m;
    this.buttons[t] = Hw(323, 112, 0, [ΔΔ.ⲆⵠΔΔⵠⲆᐃ, ΔΔ.ⲆⲆᐃⲆⵠⵠⵠ, ΔΔ.ⲆᐃΔⲆⵠᐃⲆ], 1, 0, function () {
      H(S);
      Fa.ᐃⵠᐃⲆΔ();
    }, 153, 321, ba | Y, da);
    this.buttons[t++].view = m;
    this.buttons[t] = Hw(323, 112, 0, [ΔΔ.ⲆᐃΔⲆⵠΔᐃ, ΔΔ.ΔᐃΔΔⲆⵠⲆ, ΔΔ.ᐃᐃⲆᐃⲆⵠⲆ], 1, 0, function () {
      H(E);
      Ga.ᐃⵠᐃⲆΔ();
    }, 153, 463, ba | Y, da);
    this.buttons[t++].view = m;
    this.buttons[t] = Hw(323, 112, 0, [ΔΔ.ⲆᐃᐃⵠΔⵠⵠ, ΔΔ.ΔⵠΔΔᐃⲆΔ, ΔΔ.ⲆⲆᐃΔΔΔⲆ], 1, 0, function () {
      H(R);
      Ha.ᐃⵠᐃⲆΔ();
    }, -315, 463, ba | Y, da);
    this.buttons[t++].view = m;
    this.buttons[t] = Hw(327, 117, 0, [ΔΔ.ΔⵠᐃⵠⲆⲆⲆ, ΔΔ.ΔⲆΔᐃⲆᐃΔ, ΔΔ.ⲆΔⵠΔΔⲆⵠ], 1, 0, function () {
      H(q);
    }, 155, 70, V, ea);
    this.buttons[t++].view = Q;
    this.buttons[t] = Hw(130, 129, 0, [ΔΔ.ᐃᐃᐃᐃⵠⲆⵠ, ΔΔ.ⵠΔΔⲆⵠΔΔ, ΔΔ.ⲆⲆᐃΔᐃⲆᐃ], 1, 0, function () {
      w(u, da, "none");
      H(p);
    }, 10, 40, ba | Y, da);
    this.buttons[t++].view = u;
    this.buttons[t] = Hw(130, 129, 0, [ΔΔ.ᐃᐃᐃᐃⵠⲆⵠ, ΔΔ.ⵠΔΔⲆⵠΔΔ, ΔΔ.ⲆⲆᐃΔᐃⲆᐃ], 1, 0, function () {
      w(y, da, "none");
      H(p);
    }, 10, 40, ba | Y, da);
    this.buttons[t++].view = y;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(p);
    }, 200, 140, ba | Y, da);
    this.buttons[t++].view = L;
    this.buttons[t] = Hw(524, 110, 0, [ΔΔ.ᐃⵠΔΔⵠⵠⲆ, ΔΔ.ⲆⵠΔᐃⲆⵠⲆ, ΔΔ.ΔΔᐃΔᐃᐃᐃ], 1, 0, function () {
      Xx("Atlanta");
    }, -265, 300, ba | Y, da);
    this.buttons[t++].view = L;
    this.buttons[t] = Hw(523, 110, 0, [ΔΔ.ⲆⵠΔᐃⲆᐃΔ, ΔΔ.ⲆᐃᐃᐃΔᐃΔ, ΔΔ.ΔᐃⵠᐃⵠΔⵠ], 1, 0, function () {
      Xx("LosAngeles");
    }, 5, 300, ba | Y, da);
    this.buttons[t++].view = L;
    this.buttons[t] = Hw(344, 110, 0, [ΔΔ.ⲆΔⵠⵠⲆΔᐃ, ΔΔ.ⲆᐃΔⵠⲆⲆⲆ, ΔΔ.ΔⲆᐃⲆⵠᐃⵠ], 1, 0, function () {
      Xx("Frankfurt");
    }, -265, 365, ba | Y, da);
    this.buttons[t++].view = L;
    this.buttons[t] = Hw(344, 110, 0, [ΔΔ.ᐃΔⲆᐃⲆⵠⲆ, ΔΔ.ΔΔⲆⲆΔᐃⵠ, ΔΔ.ᐃⵠⵠᐃΔΔⲆ], 1, 0, function () {
      Xx("Osaka");
    }, 100, 365, ba | Y, da);
    this.buttons[t++].view = L;
    this.buttons[t] = Hw(344, 110, 0, [ΔΔ.ⲆΔᐃⵠᐃᐃⲆ, ΔΔ.ΔᐃⵠΔⵠⲆᐃ, ΔΔ.ΔΔⲆⵠⲆⵠⲆ], 1, 0, function () {
      Xx("Sydney");
    }, -86, 365, ba | Y, da);
    this.buttons[t++].view = L;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(L);
    }, 224, 140, ba | Y, da);
    this.buttons[t++].view = W;
    this.buttons[t] = Hw(230, 352, 0, [ΔΔ.ΔⲆᐃⵠΔⲆⵠ, ΔΔ.ⵠΔΔⵠᐃⲆⲆ, ΔΔ.ᐃⲆⵠᐃΔΔᐃ], 1, 0, function () {
      _x(350);
    }, -280, 240, ba | Y, da);
    this.buttons[t++].view = W;
    this.buttons[t] = Hw(230, 352, 0, [ΔΔ.ⵠⵠⵠⵠᐃⵠⲆ, ΔΔ.ⲆⲆⲆᐃⲆᐃᐃ, ΔΔ.ᐃⲆⲆⵠᐃⵠⵠ], 1, 0, function () {
      _x(700);
    }, -130, 240, ba | Y, da);
    this.buttons[t++].view = W;
    this.buttons[t] = Hw(230, 352, 0, [ΔΔ.ⵠᐃⵠⵠᐃΔⵠ, ΔΔ.ⲆᐃⵠΔⲆⲆΔ, ΔΔ.ⲆⵠⵠΔⲆᐃΔ], 1, 0, function () {
      _x(1400);
    }, 20, 240, ba | Y, da);
    this.buttons[t++].view = W;
    this.buttons[t] = Hw(230, 352, 0, [ΔΔ.ⵠᐃⲆⲆⵠⲆΔ, ΔΔ.ⵠⵠⲆΔΔΔⵠ, ΔΔ.ⵠⲆⲆⵠⲆΔⲆ], 1, 0, function () {
      _x(3000);
    }, 170, 240, ba | Y, da);
    this.buttons[t++].view = W;
    this.buttons[t] = Hw(105, 119, 0, [ΔΔ.ⲆⵠΔⵠᐃᐃᐃ, ΔΔ.ⲆⲆⲆⵠᐃᐃᐃ, ΔΔ.ⲆΔΔⵠΔΔΔ], 1, 0, function () {
      const a = document.getElementById("serverAddressInput").value.split(" : ");
      const b = Ph.document.createElement("textarea");
      b.value = gf + "?server=" + a[1] + "&region=" + a[0];
      Ph.document.body.appendChild(b);
      b.select();
      Ph.document.execCommand("copy");
      Ph.document.body.removeChild(b);
    }, 105, 310, ba | Y, da);
    this.buttons[t++].view = G;
    this.buttons[t] = Hw(105, 119, 0, [ΔΔ.ΔᐃⵠⲆⲆⵠᐃ, ΔΔ.ΔⲆᐃⵠⲆΔΔ, ΔΔ.ᐃᐃᐃⲆΔᐃⲆ], 1, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Bx + "rebootServer?token=" + Hx + "&userid=" + Ix);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = gf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 235, 310, ba | Y, da);
    this.buttons[t++].view = G;
    this.buttons[t] = Hw(105, 119, 0, [ΔΔ.ΔⲆᐃᐃΔⵠᐃ, ΔΔ.ᐃⲆΔⵠⲆⲆᐃ, ΔΔ.ᐃⵠᐃⵠⲆΔΔ], 1, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Bx + "restartServer?token=" + Hx + "&userid=" + Ix);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = gf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 170, 310, ba | Y, da);
    this.buttons[t++].view = G;
    this.buttons[t] = Hw(204, 115, 0, [ΔΔ.ᐃⵠⵠΔⵠⲆΔ, ΔΔ.ΔᐃⵠⲆⵠΔⵠ, ΔΔ.ⵠᐃⲆΔᐃⵠⵠ], 1, 0, function () {
      Ph.open("./commands.html", "_blank");
    }, -265, 490, ba | Y, da);
    this.buttons[t++].view = G;
    this.buttons[t] = Hw(145, 69, 0, [ΔΔ.ⵠΔⵠᐃΔᐃⵠ, ΔΔ.ⲆΔΔⵠᐃᐃⵠ, ΔΔ.ΔⲆⲆⵠⵠⲆⲆ], 1, 0, function () {
      H(Z);
    }, -210, 170, ba | Y, da);
    this.buttons[t++].view = p;
    this.buttons[t] = Hw(145, 69, 0, [ΔΔ.ⵠΔΔⲆⵠⵠⵠ, ΔΔ.ᐃⲆᐃΔⲆΔΔ, ΔΔ.ΔΔⵠᐃΔⵠⵠ], 1, 0, function () {
      H(x);
    }, 70, 170, ba | Y, da);
    this.buttons[t++].view = p;
    this.buttons[t] = Hw(145, 69, 0, [ΔΔ.ⵠⲆᐃⵠⲆⵠⲆ, ΔΔ.ᐃΔΔΔⲆⲆⵠ, ΔΔ.ΔⲆⵠΔᐃⲆΔ], 1, 0, function () {
      H(P);
    }, 70, 204, ba | Y, da);
    this.buttons[t++].view = p;
    this.buttons[t] = Hw(145, 69, 0, [ΔΔ.ᐃΔᐃΔᐃⵠⲆ, ΔΔ.ᐃΔᐃᐃⵠⵠⵠ, ΔΔ.ᐃⵠⵠⵠⲆᐃⵠ], 1, 0, function () {
      H(J);
    }, -210, 204, ba | Y, da);
    this.buttons[t++].view = p;
    this.buttons[t] = Hw(145, 69, 0, [ΔΔ.ᐃΔᐃΔᐃⵠⲆ, ΔΔ.ᐃΔᐃᐃⵠⵠⵠ, ΔΔ.ᐃⵠⵠⵠⲆᐃⵠ], 1, 0, function () {
      H(M);
    }, 70, 238, ba | Y, da);
    this.buttons[t++].view = p;
    this.buttons[t] = Hw(145, 69, 0, [ΔΔ.ᐃΔᐃΔᐃⵠⲆ, ΔΔ.ᐃΔᐃᐃⵠⵠⵠ, ΔΔ.ᐃⵠⵠⵠⲆᐃⵠ], 1, 0, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        Wx(0, 300);
      } else {
        H(v);
      }
    }, 307, 205, ba | Y, da);
    this.buttons[t++].view = p;
    this.buttons[t] = Hw(145, 69, 0, [ΔΔ.ⲆⵠⲆΔᐃⲆⵠ, ΔΔ.ᐃΔᐃᐃΔᐃⵠ, ΔΔ.ΔΔⲆⵠᐃᐃⲆ], 1, 0, function () {
      H(A);
    }, -210, 238, ba | Y, da);
    this.buttons[t++].view = p;
    this.buttons[t] = Hw(145, 69, 0, [ΔΔ.ⲆⵠⲆΔᐃⲆⵠ, ΔΔ.ᐃΔᐃᐃΔᐃⵠ, ΔΔ.ΔΔⲆⵠᐃᐃⲆ], 1, 0, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        Wx(1, 600);
      } else {
        H(v);
      }
    }, 307, 239, ba | Y, da);
    this.buttons[t++].view = p;
    this.buttons[t] = Hw(192, 101, 0, [ΔΔ.ᐃᐃⲆᐃⲆⵠⵠ, ΔΔ.ⵠⵠΔⲆⲆΔⵠ, ΔΔ.ⵠⲆΔⲆᐃⲆⲆ], 1, 0, function () {
      Zx();
    }, -100, 250, ba | Y, da);
    this.buttons[t++].view = j;
    this.buttons[t] = Hw(192, 104, 0, [ΔΔ.ᐃᐃᐃⲆⲆⵠΔ, ΔΔ.ⲆᐃⵠⲆⲆⲆΔ, ΔΔ.ΔΔⲆⲆⲆⲆⲆ], 1, 0, function () {
      Zx();
    }, -100, 239, ba | Y, da);
    this.buttons[t++].view = F;
    this.buttons[t] = Hw(192, 101, 0, [ΔΔ.ⵠⲆΔⲆⵠⲆⲆ, ΔΔ.ΔΔᐃⵠⵠⲆΔ, ΔΔ.ᐃᐃᐃΔⲆᐃΔ], 1, 0, function () {
      H(d);
    }, 10, 250, ba | Y, da);
    this.buttons[t++].view = j;
    this.buttons[t] = Hw(192, 104, 0, [ΔΔ.ΔᐃⵠⵠⵠᐃⲆ, ΔΔ.ᐃᐃᐃⵠⵠⲆⲆ, ΔΔ.ⲆⲆΔᐃΔⵠⵠ], 1, 0, function () {
      H(d);
    }, 10, 239, ba | Y, da);
    this.buttons[t++].view = F;
    ⲆΔⵠⵠᐃ = [];
    ⲆΔⵠⵠᐃ[ⵠᐃᐃ.Δᐃⵠⵠⵠ] = [ΔΔ.ᐃⲆⵠΔΔΔΔ, ΔΔ.ΔΔΔⵠᐃᐃᐃ, ΔΔ.ⵠⲆΔᐃⲆΔⵠ];
    ⲆΔⵠⵠᐃ[ⵠᐃᐃ.ᐃⵠΔᐃ] = [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ];
    ⲆΔⵠⵠᐃ[ⵠᐃᐃ.ᐃⲆᐃⲆ] = [ΔΔ.ᐃⲆⲆᐃⵠᐃⲆ, ΔΔ.ᐃⲆⲆΔⵠⵠΔ, ΔΔ.ⵠΔΔⲆⲆⵠᐃ];
    ⲆΔⵠⵠᐃ[ⵠᐃᐃ.ᐃᐃᐃⲆ] = [ΔΔ.ᐃᐃΔᐃⵠⲆΔ, ΔΔ.ⲆⵠⵠΔⲆΔᐃ, ΔΔ.ⵠᐃⲆΔⲆⵠᐃ];
    ⲆΔⵠⵠᐃ[ⵠᐃᐃ.ᐃⲆⵠⲆ] = [ΔΔ.ᐃᐃⵠᐃΔⲆᐃ, ΔΔ.ᐃΔᐃᐃⲆᐃᐃ, ΔΔ.ᐃⲆⵠΔⲆⲆᐃ];
    ⲆΔⵠⵠᐃ[ⵠᐃᐃ.ΔⲆᐃᐃ] = [ΔΔ.ᐃᐃⵠⲆⲆⲆᐃ, ΔΔ.ᐃᐃⵠⵠⲆΔⲆ, ΔΔ.ⲆⲆΔᐃⲆⵠⵠ];
    ⲆΔⵠⵠᐃ[ⵠᐃᐃ.ΔΔᐃΔ] = [ΔΔ.Δᐃⵠᐃⵠᐃⵠ, ΔΔ.ⵠᐃΔΔΔᐃᐃ, ΔΔ.ⵠⵠΔΔᐃΔⲆ];
    ⲆΔⵠⵠᐃ[ⵠᐃᐃ.ᐃⵠⲆⵠᐃ] = [ΔΔ.ΔⵠⲆᐃⲆᐃⲆ, ΔΔ.ⲆⵠⲆⵠⲆⲆᐃ, ΔΔ.ⵠⲆᐃⵠᐃᐃΔ];
    ⲆΔⵠⵠᐃ[ⵠᐃᐃ.ⲆᐃⲆⵠⲆⵠᐃ] = [ΔΔ.ΔᐃΔⵠⵠᐃⵠ, ΔΔ.ᐃⲆⵠⲆᐃⵠⲆ, ΔΔ.ΔⲆΔⵠⵠΔⵠ];
    ⲆᐃΔⵠⵠᐃΔ = t;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, pa, -29, 205, ba | Y, da);
    this.buttons[t++].view = B;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, Yj, -29, 300, ba | Y, da);
    this.buttons[t++].view = B;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, -29, 395, ba | Y, da);
    this.buttons[t++].view = B;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, Yq, 65, 205, ba | Y, da);
    this.buttons[t++].view = B;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 65, 300, ba | Y, da);
    this.buttons[t++].view = B;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, _g, 65, 395, ba | Y, da);
    this.buttons[t++].view = B;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 159, 205, ba | Y, da);
    this.buttons[t++].view = B;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, Yj, 159, 300, ba | Y, da);
    this.buttons[t++].view = B;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, Co, 159, 395, ba | Y, da);
    this.buttons[t++].view = B;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ΔΔⵠΔⲆᐃΔ, ΔΔ.ⵠⵠⲆΔᐃⵠᐃ, ΔΔ.ΔΔⲆΔⲆⲆⵠ], 1, 0, lg, -61, 315, ba | Y, da);
    this.buttons[t++].view = B;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ⵠⵠΔΔⲆⵠᐃ, ΔΔ.ΔⲆⵠⵠᐃΔΔ, ΔΔ.ⵠᐃⲆⵠⵠⵠΔ], 1, 0, ie, 260, 315, ba | Y, da);
    this.buttons[t++].view = B;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(m);
    }, -320, 470, ba | Y, da);
    this.buttons[t++].view = B;
    ⲆᐃⲆᐃⲆΔⲆΔⵠ = t;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, -29, 205, ba | Y, da);
    this.buttons[t++].view = _;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, Co, -29, 300, ba | Y, da);
    this.buttons[t++].view = _;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, -29, 395, ba | Y, da);
    this.buttons[t++].view = _;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, ie, 65, 205, ba | Y, da);
    this.buttons[t++].view = _;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, xs, 65, 300, ba | Y, da);
    this.buttons[t++].view = _;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 65, 395, ba | Y, da);
    this.buttons[t++].view = _;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, ij, 159, 205, ba | Y, da);
    this.buttons[t++].view = _;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 159, 300, ba | Y, da);
    this.buttons[t++].view = _;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, ie, 159, 395, ba | Y, da);
    this.buttons[t++].view = _;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ΔΔⵠΔⲆᐃΔ, ΔΔ.ⵠⵠⲆΔᐃⵠᐃ, ΔΔ.ΔΔⲆΔⲆⲆⵠ], 1, 0, Gs, -61, 315, ba | Y, da);
    this.buttons[t++].view = _;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ⵠⵠΔΔⲆⵠᐃ, ΔΔ.ΔⲆⵠⵠᐃΔΔ, ΔΔ.ⵠᐃⲆⵠⵠⵠΔ], 1, 0, undefined, 260, 315, ba | Y, da);
    this.buttons[t++].view = _;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(m);
    }, -320, 470, ba | Y, da);
    this.buttons[t++].view = _;
    ΔⵠⵠⲆᐃᐃⵠⲆᐃ = t;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, -29, 205, ba | Y, da);
    this.buttons[t++].view = R;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, -29, 300, ba | Y, da);
    this.buttons[t++].view = R;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, -29, 395, ba | Y, da);
    this.buttons[t++].view = R;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 65, 205, ba | Y, da);
    this.buttons[t++].view = R;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 65, 300, ba | Y, da);
    this.buttons[t++].view = R;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 65, 395, ba | Y, da);
    this.buttons[t++].view = R;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, pa, 159, 205, ba | Y, da);
    this.buttons[t++].view = R;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, ie, 159, 300, ba | Y, da);
    this.buttons[t++].view = R;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 159, 395, ba | Y, da);
    this.buttons[t++].view = R;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ΔΔⵠΔⲆᐃΔ, ΔΔ.ⵠⵠⲆΔᐃⵠᐃ, ΔΔ.ΔΔⲆΔⲆⲆⵠ], 1, 0, undefined, -61, 315, ba | Y, da);
    this.buttons[t++].view = R;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ⵠⵠΔΔⲆⵠᐃ, ΔΔ.ΔⲆⵠⵠᐃΔΔ, ΔΔ.ⵠᐃⲆⵠⵠⵠΔ], 1, 0, Ya, 260, 315, ba | Y, da);
    this.buttons[t++].view = R;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(m);
    }, -320, 470, ba | Y, da);
    this.buttons[t++].view = R;
    ΔⵠΔⲆⵠⵠᐃⵠⵠ = t;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, lg, -29, 205, ba | Y, da);
    this.buttons[t++].view = I;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, ir, -29, 300, ba | Y, da);
    this.buttons[t++].view = I;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, -29, 395, ba | Y, da);
    this.buttons[t++].view = I;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 65, 205, ba | Y, da);
    this.buttons[t++].view = I;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, Wh, 65, 300, ba | Y, da);
    this.buttons[t++].view = I;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 65, 395, ba | Y, da);
    this.buttons[t++].view = I;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 159, 205, ba | Y, da);
    this.buttons[t++].view = I;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 159, 300, ba | Y, da);
    this.buttons[t++].view = I;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 159, 395, ba | Y, da);
    this.buttons[t++].view = I;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ΔΔⵠΔⲆᐃΔ, ΔΔ.ⵠⵠⲆΔᐃⵠᐃ, ΔΔ.ΔΔⲆΔⲆⲆⵠ], 1, 0, undefined, -61, 315, ba | Y, da);
    this.buttons[t++].view = I;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ⵠⵠΔΔⲆⵠᐃ, ΔΔ.ΔⲆⵠⵠᐃΔΔ, ΔΔ.ⵠᐃⲆⵠⵠⵠΔ], 1, 0, undefined, 260, 315, ba | Y, da);
    this.buttons[t++].view = I;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(m);
    }, -320, 470, ba | Y, da);
    this.buttons[t++].view = I;
    ΔⵠⵠΔΔⵠⲆⵠⲆ = t;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, Gs, -29, 205, ba | Y, da);
    this.buttons[t++].view = S;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, -29, 300, ba | Y, da);
    this.buttons[t++].view = S;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, ir, -29, 395, ba | Y, da);
    this.buttons[t++].view = S;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, Gs, 65, 205, ba | Y, da);
    this.buttons[t++].view = S;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, Wh, 65, 300, ba | Y, da);
    this.buttons[t++].view = S;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 65, 395, ba | Y, da);
    this.buttons[t++].view = S;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, pa, 159, 205, ba | Y, da);
    this.buttons[t++].view = S;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 159, 300, ba | Y, da);
    this.buttons[t++].view = S;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 159, 395, ba | Y, da);
    this.buttons[t++].view = S;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ΔΔⵠΔⲆᐃΔ, ΔΔ.ⵠⵠⲆΔᐃⵠᐃ, ΔΔ.ΔΔⲆΔⲆⲆⵠ], 1, 0, undefined, -61, 315, ba | Y, da);
    this.buttons[t++].view = S;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ⵠⵠΔΔⲆⵠᐃ, ΔΔ.ΔⲆⵠⵠᐃΔΔ, ΔΔ.ⵠᐃⲆⵠⵠⵠΔ], 1, 0, xs, 260, 315, ba | Y, da);
    this.buttons[t++].view = S;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(m);
    }, -320, 470, ba | Y, da);
    this.buttons[t++].view = S;
    ᐃⲆⵠⲆΔⲆᐃᐃⵠ = t;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, Co, -29, 205, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, ie, -29, 300, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, pa, -29, 395, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, Gs, 65, 205, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 65, 300, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 65, 395, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, undefined, 159, 205, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, ir, 159, 300, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(178, 182, 0, [ΔΔ.ⵠⲆⵠᐃ, ΔΔ.ⵠⲆⲆⵠ, ΔΔ.ⲆΔΔΔ], 1, 0, qn, 159, 395, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ΔΔⵠΔⲆᐃΔ, ΔΔ.ⵠⵠⲆΔᐃⵠᐃ, ΔΔ.ΔΔⲆΔⲆⲆⵠ], 1, 0, undefined, -61, 315, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(39, 122, 0, [ΔΔ.ⵠⵠΔΔⲆⵠᐃ, ΔΔ.ΔⲆⵠⵠᐃΔΔ, ΔΔ.ⵠᐃⲆⵠⵠⵠΔ], 1, 0, ie, 260, 315, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(m);
    }, -320, 470, ba | Y, da);
    this.buttons[t++].view = E;
    this.buttons[t] = Hw(260, 260, 0, [ΔΔ.ⵠΔᐃᐃᐃⲆⲆ, ΔΔ.ΔᐃⲆⲆᐃⵠᐃ, ΔΔ.ⲆⵠⵠⲆΔⲆΔ], 1, 0, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        ay(3, 50);
      } else {
        H(v);
      }
    }, -65, 197, ba | Y, da);
    this.buttons[t++].view = x;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(p);
    }, 309, 180, ba | Y, da);
    this.buttons[t++].view = x;
    this.buttons[t] = Hw(260, 260, 0, [ΔΔ.ⵠΔⲆᐃⲆⲆΔ, ΔΔ.ⵠΔᐃⵠⵠᐃΔ, ΔΔ.ⲆⵠᐃΔΔΔⲆ], 1, 0, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        ay(0, 100);
      } else {
        H(v);
      }
    }, -65, 197, ba | Y, da);
    this.buttons[t++].view = Z;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(p);
    }, 309, 180, ba | Y, da);
    this.buttons[t++].view = Z;
    this.buttons[t] = Hw(260, 260, 0, [ΔΔ.ⲆⲆΔⵠᐃΔᐃ, ΔΔ.ⲆᐃⲆⵠⲆⵠΔ, ΔΔ.ᐃᐃⲆΔᐃᐃΔ], 1, 0, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        ay(4, 150);
      } else {
        H(v);
      }
    }, -65, 197, ba | Y, da);
    this.buttons[t++].view = P;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(p);
    }, 309, 180, ba | Y, da);
    this.buttons[t++].view = P;
    this.buttons[t] = Hw(260, 260, 0, [ΔΔ.ᐃⲆⲆⲆⵠᐃⵠ, ΔΔ.ⵠΔⵠⵠⵠΔⵠ, ΔΔ.ⵠⲆⵠΔⵠᐃᐃ], 1, 0, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        ay(1, 300);
      } else {
        H(v);
      }
    }, -65, 197, ba | Y, da);
    this.buttons[t++].view = J;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(p);
    }, 309, 180, ba | Y, da);
    this.buttons[t++].view = J;
    this.buttons[t] = Hw(260, 260, 0, [ΔΔ.ᐃⲆⲆΔⲆⵠⵠ, ΔΔ.ᐃⵠᐃⵠⲆⲆᐃ, ΔΔ.ΔⲆΔΔᐃⲆᐃ], 1, 0, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        ay(2, 600);
      } else {
        H(v);
      }
    }, -65, 197, ba | Y, da);
    this.buttons[t++].view = A;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(p);
    }, 309, 180, ba | Y, da);
    this.buttons[t++].view = A;
    this.buttons[t] = Hw(260, 260, 0, [ΔΔ.ᐃⲆⲆⲆⵠᐃⵠ, ΔΔ.ⵠΔⵠⵠⵠΔⵠ, ΔΔ.ⵠⲆⵠΔⵠᐃᐃ], 1, 0, function () {
      if (O.ᐃⲆΔⲆⵠ()) {
        ay(5, 300);
      } else {
        H(v);
      }
    }, -65, 197, ba | Y, da);
    this.buttons[t++].view = M;
    this.buttons[t] = Hw(115, 73, 0, [ΔΔ.ⵠᐃⲆΔⲆ, ΔΔ.ⲆⲆΔⲆⵠ, ΔΔ.Ⲇᐃᐃⵠⵠ], 1, 0, function () {
      H(p);
    }, 309, 180, ba | Y, da);
    this.buttons[t++].view = M;
    var ra = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ΔⵠⵠΔⲆⲆⲆ, ΔΔ.ⲆᐃΔⲆⵠⵠᐃ, ΔΔ.ⵠⲆⲆⲆⲆⲆⵠ], 1, 0, function () {
      qa(El, 0);
    }, -305, 132, ba | Y, da);
    this.buttons[t++].view = d;
    var sa = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ᐃᐃΔⵠⲆᐃᐃ, ΔΔ.ᐃⲆⵠΔᐃⲆⵠ, ΔΔ.ΔΔⲆⵠⲆΔΔ], 1, 0, function () {
      qa(undefined, 1);
    }, -273, 132, ba | Y, da);
    this.buttons[t++].view = d;
    var ta = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ΔⵠⵠΔᐃⲆᐃ, ΔΔ.ⲆᐃⲆⲆΔᐃⵠ, ΔΔ.ⵠᐃΔⵠΔΔᐃ], 1, 0, function () {
      qa(pj, 2);
    }, -241, 132, ba | Y, da);
    this.buttons[t++].view = d;
    var ua = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ⵠⲆᐃᐃᐃⲆᐃ, ΔΔ.ⲆᐃⲆᐃΔᐃΔ, ΔΔ.ⲆΔⵠⵠⲆⲆⵠ], 1, 0, function () {
      qa(undefined, 3);
    }, -305, 165, ba | Y, da);
    this.buttons[t++].view = d;
    var va = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ΔᐃⲆᐃⲆΔᐃ, ΔΔ.ΔⵠⵠΔᐃΔΔ, ΔΔ.ᐃΔᐃᐃⲆᐃⲆ], 1, 0, function () {
      qa(undefined, 4);
    }, -273, 165, ba | Y, da);
    this.buttons[t++].view = d;
    var wa = t;
    this.buttons[t] = Hw(46, 51, 0, [ΔΔ.ⲆⵠⵠⵠΔΔⲆ, ΔΔ.ⵠΔΔⵠΔⲆΔ, ΔΔ.ⲆᐃⵠΔΔᐃⵠ], 1, 0, function () {
      qa(pa, 5);
    }, -241, 165, ba | Y, da);
    this.buttons[t++].view = d;
    var xa = t;
    this.buttons[t] = Hw(460, 73, 0, [ΔΔ.ᐃᐃᐃᐃⲆⵠⵠ, ΔΔ.ΔⵠⵠⲆⵠⲆⲆ, ΔΔ.ⵠᐃⵠⲆᐃΔⲆ], 1, 0, function () {
      qa(-1);
    }, -180, 170, ba | Y, da);
    this.buttons[t++].view = d;
    var ya = t;
    this.buttons[t] = Hw(222, 68, 0, [ΔΔ.ΔΔⲆⲆᐃᐃᐃ, ΔΔ.ΔⲆΔⲆⲆⵠᐃ, ΔΔ.ⲆⲆⵠⵠᐃⲆⲆ], 1, 0, function () {
      qa(0);
    }, -180, 215, ba | Y, da);
    this.buttons[t++].view = d;
    var za = t;
    this.buttons[t] = Hw(222, 68, 0, [ΔΔ.ⵠⲆᐃᐃΔᐃⲆ, ΔΔ.ⲆᐃⲆΔᐃΔΔ, ΔΔ.ᐃⲆⲆⲆⲆᐃΔ], 1, 0, function () {
      qa(4);
    }, -180, 260, ba | Y, da);
    this.buttons[t++].view = d;
    var Aa = t;
    this.buttons[t] = Hw(222, 68, 0, [ΔΔ.ΔⲆⵠⵠⲆⲆⵠ, ΔΔ.ᐃᐃⲆΔⵠΔⵠ, ΔΔ.ᐃᐃⵠᐃΔⵠⲆ], 1, 0, function () {
      qa(2);
    }, -60, 215, ba | Y, da);
    this.buttons[t++].view = d;
    var Ba = t;
    this.buttons[t] = Hw(222, 68, 0, [ΔΔ.ΔΔⲆⵠⲆΔᐃ, ΔΔ.ᐃⲆΔΔⲆⲆⲆ, ΔΔ.ᐃΔⲆⲆⲆΔᐃ], 1, 0, function () {
      qa(3);
    }, -60, 260, ba | Y, da);
    this.buttons[t++].view = d;
    this.ᐃⵠⲆⵠⵠⲆⵠ = t;
    this.buttons[t] = Hw(143, 66, 0, [ΔΔ.ⲆⵠᐃⲆᐃᐃΔ, ΔΔ.ᐃⲆΔⵠⲆᐃⵠ, ΔΔ.ⵠᐃᐃⵠⵠᐃᐃ], 1, 0, function () {
      $x(undefined, jx.ᐃⵠⲆⵠⵠⲆⵠ);
    }, -298, 110, ba | Y, da);
    this.buttons[t++].view = T;
    this.ᐃΔΔΔᐃᐃⵠ = t;
    this.buttons[t] = Hw(104, 66, 0, [ΔΔ.ⵠᐃⵠᐃᐃΔⵠ, ΔΔ.ⵠⵠⲆⲆⲆᐃᐃ, ΔΔ.ⲆⲆᐃⲆⵠⵠⲆ], 1, 0, function () {
      $x(undefined, jx.ᐃΔΔΔᐃᐃⵠ);
    }, -223, 110, ba | Y, da);
    this.buttons[t++].view = T;
    this.ᐃⲆᐃᐃⵠⲆΔ = t;
    this.buttons[t] = Hw(110, 66, 0, [ΔΔ.ᐃⲆⵠᐃΔᐃⵠ, ΔΔ.ⲆⵠΔΔᐃᐃᐃ, ΔΔ.ΔΔΔΔᐃᐃᐃ], 1, 0, function () {
      $x(undefined, jx.ᐃⲆᐃᐃⵠⲆΔ);
    }, -168, 110, ba | Y, da);
    this.buttons[t++].view = T;
    this.ΔⲆᐃⵠⵠⲆᐃ = t;
    this.buttons[t] = Hw(88, 66, 0, [ΔΔ.ⵠⲆⵠᐃΔΔΔ, ΔΔ.ⵠᐃⲆⲆⵠᐃⲆ, ΔΔ.ΔⲆᐃⵠΔⵠⵠ], 1, 0, function () {
      $x(qn, jx.ΔⲆᐃⵠⵠⲆᐃ);
    }, -110, 110, ba | Y, da);
    this.buttons[t++].view = T;
    this.ⲆΔⵠᐃΔᐃⲆ = t;
    this.buttons[t] = Hw(88, 66, 0, [ΔΔ.ⵠᐃΔⲆⲆᐃⲆ, ΔΔ.ΔⲆᐃⵠⲆⵠⲆ, ΔΔ.ᐃΔⵠⲆⵠⲆⲆ], 1, 0, function () {
      $x(Yj, jx.ⲆΔⵠᐃΔᐃⲆ);
    }, -63, 110, ba | Y, da);
    this.buttons[t++].view = T;
    this.buttons[t] = Hw(86, 44, 0, [ΔΔ.ⲆΔΔᐃⵠΔΔ, ΔΔ.ᐃⲆⵠⲆᐃᐃⵠ, ΔΔ.ΔⵠⲆⵠᐃΔⵠ], 1, 0, function () {
      Ph.open("./terms.html", "_blank");
    }, 349, 290, ba | Y, da);
    this.buttons[t++].view = p;
    var Ca = new e(ΔⵠⲆⲆ.ⵠᐃⲆⲆᐃ, ⲆᐃΔⵠⵠᐃΔ, function (a) {
      jx.ᐃⵠᐃⲆ = a;
      if (jx.unlock.ᐃⵠᐃⲆ[a] === 1) {
        ⵠᐃⲆⵠ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⵠᐃⲆ, this.unlock.ᐃⵠᐃⲆ);
    var Da = new e(ΔⵠⲆⲆ.ᐃᐃⲆΔ, ΔⵠΔⲆⵠⵠᐃⵠⵠ, function (a) {
      jx.ΔⲆᐃⲆⵠ = a;
      if (jx.unlock.ΔⲆᐃⲆⵠ[a] === 1) {
        ⵠᐃⲆⵠ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⲆᐃⲆⵠ, this.unlock.ΔⲆᐃⲆⵠ);
    var Fa = new e(ΔⵠⲆⲆ.ⲆΔⲆⲆⲆ, ΔⵠⵠΔΔⵠⲆⵠⲆ, function (a) {
      jx.ᐃⲆΔᐃⵠ = a;
      if (jx.unlock.ᐃⲆΔᐃⵠ[a] === 1) {
        ⵠᐃⲆⵠ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⲆΔᐃⵠ, this.unlock.ᐃⲆΔᐃⵠ);
    var Ga = new e(ΔⵠⲆⲆ.ᐃⵠⵠΔⵠ, ᐃⲆⵠⲆΔⲆᐃᐃⵠ, function (a) {
      jx.ⲆᐃⵠΔⲆ = a;
      if (jx.unlock.ⲆᐃⵠΔⲆ[a] === 1) {
        ⵠᐃⲆⵠ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆᐃⵠΔⲆ, this.unlock.ⲆᐃⵠΔⲆ);
    var Ha = new e(ΔⵠⲆⲆ.ᐃⵠⵠΔⵠ, ΔⵠⵠⲆᐃᐃⵠⲆᐃ, function (a) {
      jx.ⵠⵠⲆᐃᐃ = a;
      if (jx.unlock.ⵠⵠⲆᐃᐃ[a] === 1) {
        ⵠᐃⲆⵠ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠⵠⲆᐃᐃ, this.unlock.ⵠⵠⲆᐃᐃ);
    var Ia = new e(ΔⵠⲆⲆ.ᐃⲆⲆⲆΔ, ⲆᐃⲆᐃⲆΔⲆΔⵠ, function (a) {
      jx.ⲆΔⲆⲆⵠ = a;
      if (jx.unlock.ⲆΔⲆⲆⵠ[a] === 1) {
        ⵠᐃⲆⵠ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆΔⲆⲆⵠ, this.unlock.ⲆΔⲆⲆⵠ);
    this.ᐃⵠΔⲆΔΔⲆ = function (a) {
      rx.Δⵠᐃᐃ = Gw(O.ⵠΔ, a);
      for (var b = 0; O.buttons.length > b; b++) {
        if (O.buttons[b].info.active === ea) {
          O.buttons[b].ⲆⵠⵠΔ(O.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
        }
      }
    };
    this.ⲆᐃⲆⲆⲆⲆⵠ = function (a) {
      rx.Δⵠᐃᐃ = Gw(O.ⵠΔ, a);
      for (var b = 0; b < O.buttons.length; b++) {
        var c = O.buttons[b];
        if (c.info.active === ea && c.ⲆⵠⵠΔ(O.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
          c.info.callback();
          return;
        }
      }
    };
    this.Ⲇᐃᐃᐃᐃⵠᐃ = _h;
    this.ᐃΔⲆΔⵠⵠᐃ = function (a) {
      rx.Δⵠᐃᐃ = Gw(O.ⵠΔ, a);
      var b = Ag;
      for (var d = 0; O.buttons.length > d; d++) {
        if (O.buttons[d].info.active === ea) {
          b |= O.buttons[d].ⲆⵠⵠΔ(O.ⵠΔ, rx.Δⵠᐃᐃ, zw);
        }
      }
      if (b !== O.Ⲇᐃᐃᐃᐃⵠᐃ) {
        O.Ⲇᐃᐃᐃᐃⵠᐃ = b;
        c.style.cursor = b ? O.ΔΔΔⲆⵠⲆⵠ : O.ⵠⵠᐃⲆᐃᐃⲆ;
      }
    };
    this.ᐃⲆⲆⵠⵠⲆΔ = function () {
      Ph.addEventListener("mousedown", this.ᐃⵠΔⲆΔΔⲆ, false);
      Ph.addEventListener("mouseup", this.ⲆᐃⲆⲆⲆⲆⵠ, gl);
      Ph.addEventListener("mousemove", this.ᐃΔⲆΔⵠⵠᐃ, false);
    };
    this.ⵠΔⲆⵠΔⵠᐃ = function () {
      Ph.removeEventListener("mousedown", this.ᐃⵠΔⲆΔΔⲆ, Ag);
      Ph.removeEventListener("mouseup", this.ⲆᐃⲆⲆⲆⲆⵠ, false);
      Ph.removeEventListener("mousemove", this.ᐃΔⲆΔⵠⵠᐃ, Ea);
    };
  }
  function Nf(b, c, d, e, f) {
    const g = ~(b & 6942) & (b | 6942);
    const a = c ^ 45249;
    const i = ~(d & 24315) & 24315 | ~(d & 24315) & d;
    const j = (1 + (f + 16090) * 22695477) % 4294967296;
    return ((42062 + (Gk(g, a, i, (2147483587 + (5330 + e) * 2147483629) % 2147483647) ^ Fk(j, g, a, i))) * 1664525 + 1013904223) % 4294967296;
  }
  function Of(b, c, d, e, f, g) {
    const a = (13736 + (((b + 183) * 2147483629 + 2147483587) % 2147483647 ^ (2147483587 + (22962 + c) * 2147483629) % 2147483647)) % 65350;
    const i = ~(a & 10222) & 10222 | ~(a & 10222) & a;
    const j = ~(i & 57824) & i | ~(i & 57824) & 57824;
    return ((3808 + ((j | 2761) & ~(j & 2761) ^ (2531011 + (g + 49840) * 214013) % 4294967296)) * 1103515245 + 12345) % 2147483648;
  }
  function Hf(c, f) {
    var j = this;
    this.ⵠΔ = c;
    this.ᐃ = f;
    if (Ph.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⵠⵠᐃⲆᐃᐃⲆ = "default";
      this.ΔΔΔⲆⵠⲆⵠ = "pointer";
    } else {
      this.ⵠⵠᐃⲆᐃᐃⲆ = "url('img/cursor0.png'), default";
      this.ΔΔΔⲆⵠⲆⵠ = "url('img/cursor1.png'), pointer";
    }
    this.ᐃⲆᐃΔⲆᐃΔ = 1;
    this.ΔⲆⵠⵠⲆΔΔ = 1;
    this.ᐃⲆᐃᐃᐃⲆⲆ = 1;
    this.ⲆⲆⲆΔΔⲆⵠ = 1;
    this.ΔⵠᐃΔᐃΔⲆⲆⵠ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ΔⵠΔ: function () {
        this.style.left = Math.floor(dq - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ⵠⵠᐃΔ = {
      ᐃⵠΔⵠᐃᐃⲆ: Hw(60, 60, 0, ᐃΔ[782]),
      ᐃΔΔᐃΔᐃΔ: Hw(60, 60, 0, ᐃΔ[783])
    };
    this.sign = {
      open: false,
      ΔᐃⲆΔⵠΔᐃᐃⲆ: 0,
      ᐃⵠᐃⵠᐃΔΔ: document.getElementById("sign_object"),
      ⲆΔΔⲆⲆᐃⲆ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: Hw(60, 60, 0, ᐃΔ[803]),
      ⲆⵠⵠⲆⵠΔⵠ: function () {
        var a = Math.floor(Math.floor((3 + lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ.length) / 4) * (10 + ᐃΔ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(dq - 150) + "px";
        this.style.top = Math.floor(eq - 115) + "px";
      },
      ⲆᐃⲆⲆΔ: function () {
        ox.sign.style.display = "none";
        ox.sign.open = false;
      },
      select: function () {
        ox.sign.open = !ox.sign.open;
        if (ox.sign.open) {
          ox.sign.style.display = "inline-block";
        } else {
          ox.sign.style.display = "none";
        }
      },
      ok: function () {
        nx.ⵠᐃⲆΔΔⵠⲆᐃⵠ(lx.sign.ⵠΔⵠΔⲆ, ox.sign.ⲆΔΔⲆⲆᐃⲆ);
        ox.sign.select();
      },
      up: function () {
        ox.sign.ⲆΔΔⲆⲆᐃⲆ = ox.sign.ⲆΔΔⲆⲆᐃⲆ === 0 ? 3 : ox.sign.ⲆΔΔⲆⲆᐃⲆ - 1;
        ox.sign.ᐃⵠᐃⵠᐃΔΔ.src = "./img/sign" + ox.sign.ⲆΔΔⲆⲆᐃⲆ + ".png";
      },
      down: function () {
        ox.sign.ⲆΔΔⲆⲆᐃⲆ = (ox.sign.ⲆΔΔⲆⲆᐃⲆ + 1) % 4;
        ox.sign.ᐃⵠᐃⵠᐃΔΔ.src = "./img/sign" + ox.sign.ⲆΔΔⲆⲆᐃⲆ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, ik);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, hj);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, Ea);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, sh);
    this.ⲆⵠΔᐃᐃ = {
      open: ig,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ᐃΔᐃΔΔ: 1,
        b: 1,
        a: 3,
        ΔⵠⵠⲆΔ: 316
      }, {
        id: 1,
        name: "stone",
        ᐃΔᐃΔΔ: 1,
        b: 1,
        a: 4,
        ΔⵠⵠⲆΔ: 315
      }, {
        id: 2,
        name: "gold",
        ᐃΔᐃΔΔ: 1,
        b: 1,
        a: 6,
        ΔⵠⵠⲆΔ: 297
      }, {
        id: 3,
        name: "diamond",
        ᐃΔᐃΔΔ: 4,
        b: 4,
        a: 1,
        ΔⵠⵠⲆΔ: 298
      }, {
        id: 4,
        name: "amethyst",
        ᐃΔᐃΔΔ: 8,
        b: 8,
        a: 1,
        ΔⵠⵠⲆΔ: 418
      }, {
        id: 5,
        name: "reidite",
        ᐃΔᐃΔΔ: 16,
        b: 16,
        a: 1,
        ΔⵠⵠⲆΔ: 938
      }, {
        id: 6,
        name: "pumpkin_seed",
        ᐃΔᐃΔΔ: 10,
        b: 10,
        a: 1,
        ΔⵠⵠⲆΔ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        ᐃΔᐃΔΔ: 16,
        b: 16,
        a: 1,
        ΔⵠⵠⲆΔ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        ᐃΔᐃΔΔ: 20,
        b: 20,
        a: 1,
        ΔⵠⵠⲆΔ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        ᐃΔᐃΔΔ: 30,
        b: 30,
        a: 1,
        ΔⵠⵠⲆΔ: 845
      }, {
        id: 10,
        name: "garlic_seed",
        ᐃΔᐃΔΔ: 40,
        b: 40,
        a: 1,
        ΔⵠⵠⲆΔ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        ᐃΔᐃΔΔ: 60,
        b: 60,
        a: 1,
        ΔⵠⵠⲆΔ: 966
      }],
      button: Hw(60, 60, 0, ᐃΔ[795]),
      ΔⵠΔ: function () {
        this.style.left = Math.floor(dq - 450) + "px";
        this.style.top = Math.floor(eq - 270) + "px";
      },
      select: function () {
        ox.ⲆⵠΔᐃᐃ.open = !ox.ⲆⵠΔᐃᐃ.open;
        if (ox.ⲆⵠΔᐃᐃ.open) {
          ox.ⲆⵠΔᐃᐃ.style.display = "inline-block";
        } else {
          ox.ⲆⵠΔᐃᐃ.style.display = "none";
        }
      },
      ⲆᐃⲆⲆΔ: function () {
        ox.ⲆⵠΔᐃᐃ.style.display = "none";
        ox.ⲆⵠΔᐃᐃ.open = false;
      },
      ⵠᐃᐃⲆᐃⵠᐃ: function () {
        nx.ᐃΔΔⲆⵠᐃⵠⵠⲆ(this.ⵠΔⲆⲆᐃΔⵠ);
      },
      ᐃΔᐃᐃⲆ: function () {
        this.id;
        if (this.ⵠΔⲆⲆᐃΔⵠ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ⵠΔⲆⲆᐃΔⵠ.b);
          this.ⵠΔⲆⲆᐃΔⵠ.ᐃΔᐃΔΔ = a;
          document.getElementById(this.ⵠΔⲆⲆᐃΔⵠ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ⵠΔⲆⲆᐃΔⵠ.a);
          this.ⵠΔⲆⲆᐃΔⵠ.ᐃΔᐃΔΔ = a;
          document.getElementById(this.ⵠΔⲆⲆᐃΔⵠ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⲆⵠΔᐃᐃ.ⲆᐃⲆⲆΔ, _h);
    var e = [["mouseup", this.ⲆⵠΔᐃᐃ.ⵠᐃᐃⲆᐃⵠᐃ, "buy_"], ["click", this.ⲆⵠΔᐃᐃ.ᐃΔᐃᐃⲆ, ""], ["change", this.ⲆⵠΔᐃᐃ.ᐃΔᐃᐃⲆ, ""], ["keypress", this.ⲆⵠΔᐃᐃ.keypress, ""]];
    for (var i = 0; i < this.ⲆⵠΔᐃᐃ.items.length; i++) {
      var k = this.ⲆⵠΔᐃᐃ.items[i];
      document.getElementById(k.name + "_market").src = ᐃΔ[k.ΔⵠⵠⲆΔ][0].ⲆⲆⵠΔⵠ === undefined ? ᐃΔ[k.ΔⵠⵠⲆΔ][0].src : ᐃΔ[k.ΔⵠⵠⲆΔ][0].ⲆⲆⵠΔⵠ;
      if (k.a === 1) {
        document.getElementById(k.name + "_trad_number").innerHTML = k.b;
        document.getElementById(k.name + "_number").value = 1;
        document.getElementById(k.name + "_number").step = 1;
        document.getElementById(k.name + "_number").min = 1;
        document.getElementById(k.name + "_number").max = Math.floor(255 / k.b);
      } else {
        document.getElementById(k.name + "_trad_number").innerHTML = 1;
        document.getElementById(k.name + "_number").value = k.a;
        document.getElementById(k.name + "_number").step = k.a;
        document.getElementById(k.name + "_number").min = k.a;
      }
      document.getElementById("buy_" + k.name + "_number").ⵠΔⲆⲆᐃΔⵠ = k;
      document.getElementById(k.name + "_number").ⵠΔⲆⲆᐃΔⵠ = k;
      for (var m = 0; m < e.length; m++) {
        document.getElementById(e[m][2] + k.name + "_number").addEventListener(e[m][0], e[m][1], $n);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: Pr,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ⵠⲆΔᐃΔ: document.getElementById("agree_ing").style,
      ΔΔΔΔⵠⲆⲆ: document.getElementById("cancel_agree_ing").style,
      ΔΔⲆᐃᐃΔⲆ: document.getElementById("quest_agree_ing").style,
      ΔⲆΔΔᐃΔⲆ: document.getElementById("spectator_agree_ing").style,
      ⵠΔⵠΔⲆⲆᐃ: document.getElementById("auto_feed_agree_ing").style,
      ⵠΔΔᐃΔΔⲆ: document.getElementById("info_agree_ing").style,
      ᐃⲆΔⲆᐃⲆⲆ: document.getElementById("pixelated_agree_ing").style,
      button: Hw(60, 60, 0, ᐃΔ[727]),
      ⲆⲆⲆΔⵠΔⵠΔᐃ: function () {
        ox.options.open = !ox.options.open;
        if (ox.options.open) {
          ox.options.style.display = "inline-block";
        } else {
          ox.options.style.display = "none";
        }
      },
      ⲆⵠⲆᐃⵠᐃⵠᐃΔ: function () {
        jx.ᐃⵠⲆⵠᐃᐃⵠ();
      },
      ΔⲆᐃᐃΔⵠⲆⲆΔ: function () {
        jx.ᐃⲆᐃⲆΔᐃⵠ();
      },
      high: function () {
        jx.ⵠᐃᐃΔⵠⵠⵠᐃΔ();
      },
      low: function () {
        jx.ⲆⲆⲆᐃᐃΔⲆᐃᐃ();
      },
      ᐃⵠⲆᐃⲆ: function () {
        ox.ⲆⲆⵠᐃ.ᐃⵠⲆᐃⲆ();
      },
      ᐃᐃⵠᐃⵠᐃᐃⲆⵠ: function () {
        ox.ⲆΔΔΔⲆ.ᐃⵠⲆᐃⲆ();
      },
      ⵠᐃⲆⵠΔⵠⵠⵠⲆ: function () {
        ox.ⵠⲆᐃⵠ.ᐃⵠⲆᐃⲆ();
      },
      ᐃⵠⲆⵠΔᐃⵠΔⵠ: function () {
        lx.ΔⵠᐃᐃⲆ.ΔⲆⲆᐃᐃᐃⲆ();
      },
      ΔΔⲆⲆΔⲆⵠᐃΔ: function () {
        lx.ⲆⲆΔᐃᐃ.ΔⲆⲆᐃᐃᐃⲆ();
      },
      ⲆᐃⲆⲆΔ: function () {
        ox.options.style.display = "none";
        ox.options.open = gl;
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(dq - 235) + "px";
        this.style.top = Math.floor(eq - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ⲆⵠⲆᐃⵠᐃⵠᐃΔ, $n);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ΔⲆᐃᐃΔⵠⲆⲆΔ, false);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, gl);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⲆᐃⲆⲆΔ, $o);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠⲆᐃⲆ, ik);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⵠᐃⲆⵠΔⵠⵠⵠⲆ, false);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ᐃᐃⵠᐃⵠᐃᐃⲆⵠ, false);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠⲆⵠΔᐃⵠΔⵠ, ik);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ΔΔⲆⲆΔⲆⵠᐃΔ, false);
    this.ⲆΔΔΔⲆ = {
      open: false,
      ⲆⲆⲆⲆⲆ: ⵠᐃⲆⵠ.get("starve_cancel") && ⵠᐃⲆⵠ.get("starve_cancel") === "0" ? 0 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ⵠⲆΔᐃΔ: document.getElementById("cancel_agree").style,
      button: 0,
      ⵠⵠ: 0,
      ⲆᐃⲆⲆΔ: function () {
        ox.ⲆΔΔΔⲆ.style.display = "none";
        ox.ⲆΔΔΔⲆ.open = vl;
      },
      ΔⲆⲆΔⲆⵠⵠ: function () {
        if (lx.ⲆᐃΔΔ.ⲆᐃⵠⲆⲆ) {
          nx.ⲆᐃⲆΔⲆⲆⵠⵠⲆ();
        }
        ox.ⲆΔΔΔⲆ.ⲆᐃⲆⲆΔ();
      },
      ᐃⵠⲆᐃⲆ: function () {
        if (ox.ⲆΔΔΔⲆ.ⲆⲆⲆⲆⲆ) {
          ⵠᐃⲆⵠ.set("starve_cancel", "0");
          ox.ⲆΔΔΔⲆ.ⵠⲆΔᐃΔ.display = "inline-block";
          ox.options.ΔΔΔΔⵠⲆⲆ.display = "none";
        } else {
          ⵠᐃⲆⵠ.set("starve_cancel", "1");
          ox.ⲆΔΔΔⲆ.ⵠⲆΔᐃΔ.display = "none";
          ox.options.ΔΔΔΔⵠⲆⲆ.display = "inline-block";
        }
        ox.ⲆΔΔΔⲆ.ⲆⲆⲆⲆⲆ = !ox.ⲆΔΔΔⲆ.ⲆⲆⲆⲆⲆ;
      },
      ⵠⵠⵠᐃⵠⲆⵠ: function () {
        if (this.ⲆⲆⲆⲆⲆ) {
          this.style.display = "inline-block";
          this.open = To;
        } else {
          this.ΔⲆⲆΔⲆⵠⵠ();
        }
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(dq - 235) + "px";
        this.style.top = Math.floor(eq - 130) + "px";
      }
    };
    this.ⲆΔΔΔⲆ.id.oncontextmenu = function () {
      return false;
    };
    this.ⲆΔΔΔⲆ.ⵠⲆΔᐃΔ.display = "none";
    if (this.ⲆΔΔΔⲆ.ⲆⲆⲆⲆⲆ) {
      this.options.ΔΔΔΔⵠⲆⲆ.display = "inline-block";
    } else {
      this.options.ΔΔΔΔⵠⲆⲆ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ⲆΔΔΔⲆ.ΔⲆⲆΔⲆⵠⵠ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ⲆΔΔΔⲆ.ⲆᐃⲆⲆΔ, $o);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ⲆΔΔΔⲆ.ᐃⵠⲆᐃⲆ, false);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, false);
    this.ΔⲆᐃⵠᐃΔΔ = {
      ⲆⲆⲆⲆⲆ: ⵠᐃⲆⵠ.get("starve_aliasing") && ⵠᐃⲆⵠ.get("starve_aliasing") === "0" ? 0 : 1,
      ᐃⵠᐃΔᐃᐃⲆ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ᐃⵠⲆᐃⲆ: function () {
        if (ox.ΔⲆᐃⵠᐃΔΔ.ⲆⲆⲆⲆⲆ === 0) {
          ⵠᐃⲆⵠ.set("starve_aliasing", "1");
          ox.ΔⲆᐃⵠᐃΔΔ.ᐃⵠᐃΔᐃᐃⲆ(1);
          ox.options.ᐃⲆΔⲆᐃⲆⲆ.display = "inline-block";
        } else {
          ⵠᐃⲆⵠ.set("starve_aliasing", "0");
          ox.ΔⲆᐃⵠᐃΔΔ.ᐃⵠᐃΔᐃᐃⲆ(0);
          ox.options.ᐃⲆΔⲆᐃⲆⲆ.display = "none";
        }
        ox.ΔⲆᐃⵠᐃΔΔ.ⲆⲆⲆⲆⲆ = (ox.ΔⲆᐃⵠᐃΔΔ.ⲆⲆⲆⲆⲆ + 1) % 2;
      }
    };
    if (this.ΔⲆᐃⵠᐃΔΔ.ⲆⲆⲆⲆⲆ === 1) {
      this.options.ᐃⲆΔⲆᐃⲆⲆ.display = "inline-block";
    } else {
      this.ΔⲆᐃⵠᐃΔΔ.ᐃⵠᐃΔᐃᐃⲆ(0);
      this.options.ᐃⲆΔⲆᐃⲆⲆ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ΔⲆᐃⵠᐃΔΔ.ᐃⵠⲆᐃⲆ, false);
    this.ᐃᐃⲆΔⵠ = {
      ⲆⲆⲆⲆⲆ: ⵠᐃⲆⵠ.get("starve_info_box") ? ⵠᐃⲆⵠ.get("starve_info_box") === "0" ? 0 : 1 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ⲆᐃΔΔ: 0,
      ᐃⵠⲆᐃⲆ: function () {
        if (ox.ᐃᐃⲆΔⵠ.ⲆⲆⲆⲆⲆ === 0) {
          ⵠᐃⲆⵠ.set("starve_info_box", "1");
          ox.options.ⵠΔΔᐃΔΔⲆ.display = "inline-block";
        } else {
          ⵠᐃⲆⵠ.set("starve_info_box", "0");
          ox.options.ⵠΔΔᐃΔΔⲆ.display = "none";
        }
        ox.ᐃᐃⲆΔⵠ.ⲆⲆⲆⲆⲆ = (ox.ᐃᐃⲆΔⵠ.ⲆⲆⲆⲆⲆ + 1) % 2;
      },
      ⲆⵠⵠΔ: function (a, b, c) {
        if (a && this.ⲆⲆⲆⲆⲆ) {
          this.display = 1;
          this.id = c === 0 ? b.id : Bt[b.id].ⵠⲆⵠΔ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ⲆᐃΔΔ = c;
        }
        return a;
      }
    };
    if (this.ᐃᐃⲆΔⵠ.ⲆⲆⲆⲆⲆ === 1) {
      this.options.ⵠΔΔᐃΔΔⲆ.display = "inline-block";
    } else {
      this.options.ⵠΔΔᐃΔΔⲆ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ᐃᐃⲆΔⵠ.ᐃⵠⲆᐃⲆ, Es);
    if (ⵠᐃⲆⵠ.get("starve_scale")) {
      iq = Number(ⵠᐃⲆⵠ.get("starve_scale"));
      document.getElementById("input_ratio").value = iq;
      iq *= pr / rr;
      xr();
    }
    this.ᐃᐃⲆΔⵠᐃⵠ = function () {
      ⵠᐃⲆⵠ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      iq = pr / rr * document.getElementById("input_ratio").value;
      xr();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ᐃᐃⲆΔⵠᐃⵠ, ln);
    this.ⲆⲆⵠᐃ = {
      open: F,
      ⲆⲆⲆⲆⲆ: ⵠᐃⲆⵠ.get("starve_safe") ? ⵠᐃⲆⵠ.get("starve_safe") === "0" ? 0 : 1 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ⵠⲆΔᐃΔ: document.getElementById("agree").style,
      button: 0,
      ⵠⵠ: 0,
      ⲆᐃⲆⲆΔ: function () {
        ox.ⲆⲆⵠᐃ.style.display = "none";
        ox.ⲆⲆⵠᐃ.open = $o;
      },
      all: function () {
        if (!lx.ᐃᐃⲆⵠΔ.wait) {
          if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && lx.ⲆᐃΔΔ.id < 0 && !lx.ΔᐃⵠⲆⵠ.enabled) {
            nx.ᐃⵠᐃᐃⲆᐃΔΔᐃ(ox.ⲆⲆⵠᐃ.button);
          }
          ox.ⲆⲆⵠᐃ.ⲆᐃⲆⲆΔ();
        }
      },
      ΔⵠᐃⲆ: function () {
        if (lx.ⲆᐃΔΔ.ΔᐃⲆⵠⲆ && !lx.ᐃᐃⲆⵠΔ.wait) {
          if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && lx.ⲆᐃΔΔ.id < 0 && !lx.ΔᐃⵠⲆⵠ.enabled) {
            nx.ⲆᐃⲆⵠᐃⲆΔᐃⵠ(ox.ⲆⲆⵠᐃ.button);
          }
          ox.ⲆⲆⵠᐃ.ⲆᐃⲆⲆΔ();
        }
      },
      ⲆⲆΔⲆᐃᐃΔᐃⵠ: function () {
        if (!lx.ᐃᐃⲆⵠΔ.wait) {
          if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && lx.ⲆᐃΔΔ.id < 0 && !lx.ΔᐃⵠⲆⵠ.enabled) {
            nx.ΔΔᐃᐃΔⲆⵠⲆⵠ(ox.ⲆⲆⵠᐃ.button);
          }
          ox.ⲆⲆⵠᐃ.ⲆᐃⲆⲆΔ();
        }
      },
      ᐃⵠⲆᐃⲆ: function () {
        if (ox.ⲆⲆⵠᐃ.ⲆⲆⲆⲆⲆ) {
          ⵠᐃⲆⵠ.set("starve_safe", "0");
          ox.ⲆⲆⵠᐃ.ⵠⲆΔᐃΔ.display = "inline-block";
          ox.options.ⵠⲆΔᐃΔ.display = "none";
        } else {
          ⵠᐃⲆⵠ.set("starve_safe", "1");
          ox.ⲆⲆⵠᐃ.ⵠⲆΔᐃΔ.display = "none";
          ox.options.ⵠⲆΔᐃΔ.display = "inline-block";
        }
        ox.ⲆⲆⵠᐃ.ⲆⲆⲆⲆⲆ = !ox.ⲆⲆⵠᐃ.ⲆⲆⲆⲆⲆ;
      },
      ⵠⵠⵠᐃⵠⲆⵠ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ᐃΔ[As[a].ⵠᐃ][0].ⲆⲆⵠΔⵠ === eg ? ᐃΔ[As[a].ⵠᐃ][0].src : ᐃΔ[As[a].ⵠᐃ][0].ⲆⲆⵠΔⵠ;
        if (As[a].ΔⵠᐃⲆ && !lx.ᐃᐃⲆⵠⲆ && lx.ⲆᐃΔΔ.ΔᐃⲆⵠⲆ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ⲆⲆⲆⲆⲆ) {
          this.style.display = "inline-block";
          this.open = Bh;
        } else {
          this.all();
        }
      },
      ΔⵠΔ: function () {
        this.style.left = Math.floor(dq - 235) + "px";
        this.style.top = Math.floor(eq - 175) + "px";
      }
    };
    this.ⲆⲆⵠᐃ.ⵠⲆΔᐃΔ.display = "none";
    if (this.ⲆⲆⵠᐃ.ⲆⲆⲆⲆⲆ) {
      this.options.ⵠⲆΔᐃΔ.display = "inline-block";
    } else {
      this.options.ⵠⲆΔᐃΔ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ⲆⲆⵠᐃ.ⲆⲆΔⲆᐃᐃΔᐃⵠ, false);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ⲆⲆⵠᐃ.all, false);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ⲆⲆⵠᐃ.ΔⵠᐃⲆ, ig);
    document.getElementById("no_delete").addEventListener("mouseup", this.ⲆⲆⵠᐃ.ⲆᐃⲆⲆΔ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ⲆⲆⵠᐃ.ᐃⵠⲆᐃⲆ, hj);
    this.ⵠⲆΔⵠⲆ = {
      open: false,
      ΔⲆΔⵠⲆ: -1,
      button: Hw(60, 60, 0, ᐃΔ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ΔⵠΔ: function () {
        this.style.left = Math.floor(dq - 300) + "px";
        this.style.top = Math.floor(eq - 215) + "px";
      },
      ⲆᐃⲆⲆΔ: function () {
        ox.ⵠⲆΔⵠⲆ.open = F;
        ox.ⵠⲆΔⵠⲆ.style.display = "none";
      },
      select: function () {
        ox.ⵠⲆΔⵠⲆ.open = !ox.ⵠⲆΔⵠⲆ.open;
        if (ox.ⵠⲆΔⵠⲆ.open) {
          ox.ⵠⲆΔⵠⲆ.style.display = "inline-block";
        } else {
          ox.ⵠⲆΔⵠⲆ.style.display = "none";
        }
      },
      ⵠᐃᐃⲆᐃⵠᐃ: function () {
        if (ox.ⵠⲆΔⵠⲆ.ΔⲆΔⵠⲆ >= 0) {
          nx.ΔⲆᐃⵠᐃⵠᐃⲆⲆ(ox.ⵠⲆΔⵠⲆ.ΔⲆΔⵠⲆ);
          ox.ⵠⲆΔⵠⲆ.ⲆᐃⲆⲆΔ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + ox.ⵠⲆΔⵠⲆ.ΔⲆΔⵠⲆ);
          }
        }
      },
      ᐃⵠⵠΔᐃ: function () {
        var a = lx.ⵠⲆΔⵠⲆ.value;
        document.getElementById("points_bank").innerHTML = ΔΔⲆ.ᐃⲆᐃⵠⲆⲆᐃ(a) + " points";
        for (var b = 0; b < uf.length; b++) {
          if (uf[b].ΔⲆⵠⲆⵠ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = 1; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ᐃΔᐃⲆⲆΔᐃΔⲆ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = uf[a - 1];
        if (lx.ⵠⲆΔⵠⲆ.value >= b.ΔⲆⵠⲆⵠ) {
          ox.ⵠⲆΔⵠⲆ.ΔⲆΔⵠⲆ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          ox.ⵠⲆΔⵠⲆ.ΔⲆΔⵠⲆ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - 1][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ᐃΔ[As[b[c - 1][1]].ⵠᐃ][0].ⲆⲆⵠΔⵠ === undefined ? ᐃΔ[As[b[c - 1][1]].ⵠᐃ][0].src : ᐃΔ[As[b[c - 1][1]].ⵠᐃ][0].ⲆⲆⵠΔⵠ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ⵠⲆΔⵠⲆ.ⲆᐃⲆⲆΔ, Ea);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ⵠⲆΔⵠⲆ.ⵠᐃᐃⲆᐃⵠᐃ, false);
    for (m = 1; m < 11; m++) {
      document.getElementById("starter" + m).addEventListener("mouseup", this.ⵠⲆΔⵠⲆ.ᐃΔᐃⲆⲆΔᐃΔⲆ, vj);
    }
    this.ⵠⲆᐃⵠ = {
      open: vl,
      ⲆⲆⲆⲆⲆ: ⵠᐃⲆⵠ.get("starve_quests") ? ⵠᐃⲆⵠ.get("starve_quests") === "1" ? 1 : 0 : 0,
      button: Hw(60, 60, 0, ᐃΔ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ΔⵠΔ: function () {
        this.style.left = Math.floor(dq - 420) + "px";
        this.style.top = Math.floor(eq - 270) + "px";
      },
      ⲆᐃⲆⲆΔ: function () {
        ox.ⵠⲆᐃⵠ.style.display = "none";
        ox.ⵠⲆᐃⵠ.open = false;
      },
      select: function () {
        ox.ⵠⲆᐃⵠ.open = !ox.ⵠⲆᐃⵠ.open;
        if (ox.ⵠⲆᐃⵠ.open) {
          ox.ⵠⲆᐃⵠ.style.display = "inline-block";
        } else {
          ox.ⵠⲆᐃⵠ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < ff.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ⵠⲆⵠⵠⲆΔᐃ: 0,
      ᐃΔⵠⵠΔᐃⲆ: 0,
      ΔΔⵠⲆᐃᐃⵠΔⲆ: function () {
        if (ox.ⵠⲆᐃⵠ.open) {
          var a = new Date().getTime();
          if (a - this.ⵠⲆⵠⵠⲆΔᐃ >= 1000) {
            this.ⵠⲆⵠⵠⲆΔᐃ = a;
            for (var b = 0; b < ff.length; b++) {
              if (ox.ⵠⲆᐃⵠ.list[b]) {
                var c = ff[b].time - (a - kx.ⲆⲆΔΔⲆ.ᐃⵠⵠΔᐃ + ox.ⵠⲆᐃⵠ.ᐃΔⵠⵠΔᐃⲆ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            ox.ⵠⲆᐃⵠ.ⵠⵠΔᐃⲆᐃⲆ(b, a[b]);
          }
        }
      },
      ⵠⵠΔᐃⲆᐃⲆ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          lx.ᐃⵠⵠᐃ.ⲆΔⵠⲆⲆᐃᐃ(0, 1);
          ox.ⵠᐃⵠΔᐃΔᐃ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        ox.ⵠⲆᐃⵠ.list[a] = 0;
      },
      modify: function (a, b) {
        ox.ⵠⲆᐃⵠ.ⵠⵠΔᐃⲆᐃⲆ(a, b);
        if (ox.ⵠⲆᐃⵠ.ⲆⲆⲆⲆⲆ) {
          ox.ⵠⲆᐃⵠ.open = Hh;
          ox.ⵠⲆᐃⵠ.style.display = "inline-block";
        }
      },
      ᐃⵠⲆᐃⲆ: function () {
        if (ox.ⵠⲆᐃⵠ.ⲆⲆⲆⲆⲆ) {
          ⵠᐃⲆⵠ.set("starve_quests", "0");
          ox.options.ΔΔⲆᐃᐃΔⲆ.display = "none";
        } else {
          ⵠᐃⲆⵠ.set("starve_quests", "1");
          ox.options.ΔΔⲆᐃᐃΔⲆ.display = "inline-block";
        }
        ox.ⵠⲆᐃⵠ.ⲆⲆⲆⲆⲆ = !ox.ⵠⲆᐃⵠ.ⲆⲆⲆⲆⲆ;
      },
      ΔᐃⲆⲆⲆΔⲆⲆⲆ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * 10 + b;
        }
        nx.ᐃⵠⲆΔᐃⵠⲆⵠⵠ(a);
      }
    };
    if (this.ⵠⲆᐃⵠ.ⲆⲆⲆⲆⲆ) {
      this.options.ΔΔⲆᐃᐃΔⲆ.display = "inline-block";
    } else {
      this.options.ΔΔⲆᐃᐃΔⲆ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ⵠⲆᐃⵠ.ⲆᐃⲆⲆΔ, Ag);
    for (m = 0; m < ff.length; m++) {
      document.getElementById("claim_reward_" + m).addEventListener("mouseup", this.ⵠⲆᐃⵠ.ΔᐃⲆⲆⲆΔⲆⲆⲆ, false);
    }
    this.ᐃⵠΔⵠ = {
      open: Pr,
      button: Hw(60, 60, 0, ᐃΔ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ⵠⵠⲆⵠᐃⵠⵠ: [],
        ⵠᐃⵠΔⵠⵠᐃ: 0,
        ΔⵠΔ: function () {
          this.style.left = Math.floor(dq - 335) + "px";
          this.style.top = Math.floor(eq - 215) + "px";
        },
        ⲆᐃⲆⲆΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          ox.ᐃⵠΔⵠ.open = false;
        },
        ΔⵠⲆⵠᐃᐃⲆ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ᐃΔⵠⲆ: function (a) {
          if ((b = this.ⵠⵠⲆⵠᐃⵠⵠ[a]).ⲆⲆⲆ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ᐃΔ[As[b[a][0]].ⵠᐃ][0].ⲆⲆⵠΔⵠ === undefined ? ᐃΔ[As[b[a][0]].ⵠᐃ][0].src : ᐃΔ[As[b[a][0]].ⵠᐃ][0].ⲆⲆⵠΔⵠ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ⵠᐃⵠΔⵠⵠᐃ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < Bt.length; b++) {
            var d = Bt[b];
            if (a === d.ⵠⲆΔ) {
              this.ⵠⵠⲆⵠᐃⵠⵠ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ᐃΔ[As[d.ⵠⲆⵠΔ].ⵠᐃ][0].ⲆⲆⵠΔⵠ === undefined ? ᐃΔ[As[d.ⵠⲆⵠΔ].ⵠᐃ][0].src : ᐃΔ[As[d.ⵠⲆⵠΔ].ⵠᐃ][0].ⲆⲆⵠΔⵠ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ⲆᐃᐃΔΔⲆⲆ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ΔⵠΔ: function () {
          this.style.left = Math.floor(dq - 285) + "px";
          this.style.top = Math.floor(eq - 170) + "px";
        },
        ⲆᐃⲆⲆΔ: function () {
          document.getElementById("home_craft").style.display = "none";
          ox.ᐃⵠΔⵠ.open = Ea;
        }
      },
      ΔⵠᐃᐃⲆᐃΔᐃᐃ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ᐃⵠΔⵠ.ⲆᐃᐃΔΔⲆⲆ.ⲆᐃⲆⲆΔ, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ᐃⵠΔⵠ.list.ⲆᐃⲆⲆΔ, false);
    document.getElementById("backhome").addEventListener("mouseup", this.ᐃⵠΔⵠ.list.ΔⵠⲆⵠᐃᐃⲆ, false);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      ox.ᐃⵠΔⵠ.list.select(2);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      ox.ᐃⵠΔⵠ.list.select(1);
    }, gl);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      ox.ᐃⵠΔⵠ.list.select(0);
    }, false);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      ox.ᐃⵠΔⵠ.list.select(3);
    }, F);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      ox.ᐃⵠΔⵠ.list.select(4);
    }, false);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      ox.ᐃⵠΔⵠ.list.select(5);
    }, $o);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(0);
    }, Pg);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(1);
    }, gl);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(2);
    }, Ag);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(3);
    }, false);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(4);
    }, false);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(5);
    }, false);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(6);
    }, false);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(7);
    }, false);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(8);
    }, false);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(9);
    }, false);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(10);
    }, false);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(11);
    }, false);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(13);
    }, false);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(14);
    }, ik);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(15);
    }, false);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(16);
    }, false);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(17);
    }, Pr);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(18);
    }, false);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(19);
    }, false);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(20);
    }, false);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(21);
    }, false);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(22);
    }, false);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(23);
    }, false);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(24);
    }, false);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(25);
    }, false);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(26);
    }, hj);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(27);
    }, $n);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(28);
    }, ik);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(29);
    }, false);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(30);
    }, ln);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(31);
    }, false);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(32);
    }, vl);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(33);
    }, vl);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(34);
    }, Pr);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(35);
    }, Pr);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(37);
    }, ik);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(38);
    }, vl);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(39);
    }, false);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(40);
    }, false);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(41);
    }, $n);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(42);
    }, false);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(43);
    }, ig);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(45);
    }, Pr);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(46);
    }, xq);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      ox.ᐃⵠΔⵠ.list.ᐃΔⵠⲆ(47);
    }, false);
    this.ᐃΔⵠⲆⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      ⵠⲆᐃⵠᐃ: {
        x: -1,
        y: -1
      },
      ⲆⲆⵠⵠ: [],
      focus: function (a) {
        var b = this.translate.y + (lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ⵠⲆᐃⵠᐃ.x = a.x - this.translate.x;
          this.ⵠⲆᐃⵠᐃ.y = a.y - b;
        }
      }
    };
    this.ᐃⲆΔⲆ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠᐃ: ᐃΔ[278],
      ⵠΔ: document.createElement("canvas")
    };
    this.ᐃⲆΔⲆ.ⵠΔ.width = this.ᐃⲆΔⲆ.ⵠᐃ.width;
    this.ᐃⲆΔⲆ.ⵠΔ.height = this.ᐃⲆΔⲆ.ⵠᐃ.height;
    this.ᐃⲆΔⲆ.ᐃ = this.ᐃⲆΔⲆ.ⵠΔ.getContext("2d");
    this.ΔᐃᐃⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      ⵠᐃ: ᐃΔ[267],
      ΔᐃⲆΔ: Fp,
      y: 0
    };
    var n = Ph.document.createElement("div");
    this.ⲆⲆⲆᐃᐃᐃⵠ = function () {
      ⵠᐃⲆⵠΔ = document.getElementById("team_box");
      ⵠᐃⲆⵠΔ.innerHTML = "";
      ⵠᐃⲆⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((n.innerText = kx.ⲆⲆⵠⵠ[lx.ⵠⲆᐃΔⲆ[0]].ᐃᐃⵠⲆΔ) && n.innerHTML) + "</div";
      for (var a = 1; a < lx.ⵠⲆᐃΔⲆ.length; a++) {
        ⵠᐃⲆⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((n.innerText = kx.ⲆⲆⵠⵠ[lx.ⵠⲆᐃΔⲆ[a]].ᐃᐃⵠⲆΔ) && n.innerHTML) + "</div></div>";
      }
      ⵠᐃⲆⵠΔ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ⵠᐃⲆⵠΔ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", nx.ⲆⲆⲆᐃᐃᐃⵠ, false);
    };
    this.ⲆΔⵠΔΔⲆⲆΔΔ = function () {
      ⵠᐃⲆⵠΔ = document.getElementById("team_box");
      ⵠᐃⲆⵠΔ.innerHTML = "";
      ⵠᐃⲆⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((n.innerText = kx.ⲆⲆⵠⵠ[lx.ⵠⲆᐃΔⲆ[0]].ᐃᐃⵠⲆΔ) && n.innerHTML) + "</div";
      for (var a = 1; lx.ⵠⲆᐃΔⲆ.length > a; a++) {
        ⵠᐃⲆⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((n.innerText = kx.ⲆⲆⵠⵠ[lx.ⵠⲆᐃΔⲆ[a]].ᐃᐃⵠⲆΔ) && n.innerHTML) + "</div></div>";
      }
      ⵠᐃⲆⵠΔ.innerHTML += "</div>";
      ⵠᐃⲆⵠΔ.style.display = "inline-block";
    };
    this.ⵠⵠⲆⲆⲆᐃᐃⵠΔ = function () {
      ⵠᐃⲆⵠΔ = document.getElementById("team_box");
      ⵠᐃⲆⵠΔ.innerHTML = "";
      ⵠᐃⲆⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((n.innerText = kx.ⲆⲆⵠⵠ[lx.ⵠⲆᐃΔⲆ[0]].ᐃᐃⵠⲆΔ) && n.innerHTML) + "</div";
      for (var a = 1; lx.ⵠⲆᐃΔⲆ.length > a; a++) {
        ⵠᐃⲆⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((n.innerText = kx.ⲆⲆⵠⵠ[lx.ⵠⲆᐃΔⲆ[a]].ᐃᐃⵠⲆΔ) && n.innerHTML) + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (lx.ⲆΔⲆⵠΔ.lock === 0) {
        ⵠᐃⲆⵠΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ⵠᐃⲆⵠΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", nx.ΔⵠⲆᐃΔⲆⲆΔⲆ, false);
      ⵠᐃⲆⵠΔ.style.display = "inline-block";
      for (a = 1; a < lx.ⵠⲆᐃΔⲆ.length; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              nx.ᐃⵠΔᐃᐃⲆᐃ(1);
            }, Pr);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              nx.ᐃⵠΔᐃᐃⲆᐃ(2);
            }, false);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              nx.ᐃⵠΔᐃᐃⲆᐃ(3);
            }, Ea);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              nx.ᐃⵠΔᐃᐃⲆᐃ(4);
            }, Ea);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              nx.ᐃⵠΔᐃᐃⲆᐃ(5);
            }, false);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              nx.ᐃⵠΔᐃᐃⲆᐃ(6);
            }, false);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              nx.ᐃⵠΔᐃᐃⲆᐃ(7);
            }, wr);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              nx.ᐃⵠΔᐃᐃⲆᐃ(8);
            }, false);
        }
      }
    };
    this.ᐃⵠⵠⵠᐃ = [];
    this.ᐃⵠⵠⵠᐃ[2] = {
      button: Hw(60, 60, 0, ᐃΔ[556]),
      action: this.ⲆⲆⲆᐃᐃᐃⵠ
    };
    this.ᐃⵠⵠⵠᐃ[3] = {
      button: Hw(60, 60, 0, ᐃΔ[556]),
      action: nx.ΔⲆᐃΔⲆᐃᐃⵠⵠ
    };
    this.ᐃⵠⵠⵠᐃ[0] = {
      button: Hw(60, 60, 0, ᐃΔ[557]),
      action: this.ⵠⵠⲆⲆⲆᐃᐃⵠΔ
    };
    this.ᐃⵠⵠⵠᐃ[1] = {
      button: Hw(60, 60, 0, ᐃΔ[561]),
      action: this.ⲆΔⵠΔΔⲆⲆΔΔ
    };
    this.ᐃⵠⵠⵠᐃ[4] = {
      button: Hw(60, 60, 0, ᐃΔ[560]),
      action: function () { }
    };
    this.ⵠⲆⵠᐃⲆ = -1;
    this.ⲆⵠⲆᐃⵠᐃⵠ = Hw(60, 60, 0, ᐃΔ[723]);
    this.ⵠⲆⵠⵠᐃⵠⵠ = Hw(60, 60, 0, ᐃΔ[724]);
    this.ᐃᐃⲆΔⵠᐃⲆ = Hw(60, 60, 0, ᐃΔ[658]);
    this.ⲆΔⲆⵠⵠⵠΔ = Hw(60, 60, 0, ᐃΔ[657]);
    this.ᐃΔΔⵠᐃΔⲆ = Hw(60, 60, 0, ᐃΔ[658]);
    this.ⵠΔⵠΔⵠⵠᐃ = Hw(60, 60, 0, ᐃΔ[316]);
    this.ᐃⲆⲆⵠⵠⵠΔ = Hw(60, 60, 0, ᐃΔ[315]);
    this.ΔΔΔΔΔⲆΔ = Hw(60, 60, 0, ᐃΔ[297]);
    this.ⲆⲆΔⵠⵠⲆΔ = Hw(60, 60, 0, ᐃΔ[298]);
    this.ⲆΔⲆⵠⲆⲆⵠ = Hw(60, 60, 0, ᐃΔ[418]);
    this.ΔΔᐃΔᐃΔⵠ = Hw(60, 60, 0, ᐃΔ[938]);
    this.ⵠⵠᐃⵠᐃᐃⵠ = Hw(60, 60, 0, ᐃΔ[412]);
    this.ΔΔⵠⲆⵠΔΔ = Hw(60, 60, 0, ᐃΔ[536]);
    this.ⲆⲆΔⵠΔⲆⵠ = Hw(60, 60, 0, ᐃΔ[535]);
    this.ᐃΔΔΔⵠΔᐃ = Hw(60, 60, 0, ᐃΔ[538]);
    this.ⵠΔΔⲆΔ = Hw(120, 120, 0, ᐃΔ[149]);
    this.ⵠΔΔⲆΔ.info.translate.x = 10;
    this.ⵠΔΔⲆΔ.info.translate.y = 10;
    this.Ⲇⵠᐃ = [];
    this.Ⲇⵠᐃ[0] = Hw(68, 68, 0, ᐃΔ[340], 3);
    this.Ⲇⵠᐃ[0].id = 0;
    this.Ⲇⵠᐃ[1] = Hw(68, 68, 0, ᐃΔ[341], 3);
    this.Ⲇⵠᐃ[1].id = 1;
    this.Ⲇⵠᐃ[108] = Hw(68, 68, 0, ᐃΔ[342], 3);
    this.Ⲇⵠᐃ[108].id = 108;
    this.Ⲇⵠᐃ[109] = Hw(68, 68, 0, ᐃΔ[343], 3);
    this.Ⲇⵠᐃ[109].id = 109;
    this.Ⲇⵠᐃ[110] = Hw(68, 68, 0, ᐃΔ[269], 3);
    this.Ⲇⵠᐃ[110].id = 110;
    this.Ⲇⵠᐃ[233] = Hw(68, 68, 0, ᐃΔ[1155], 3);
    this.Ⲇⵠᐃ[233].id = 233;
    this.Ⲇⵠᐃ[111] = Hw(68, 68, 0, ᐃΔ[270], 3);
    this.Ⲇⵠᐃ[111].id = 111;
    this.Ⲇⵠᐃ[112] = Hw(68, 68, 0, ᐃΔ[271], 3);
    this.Ⲇⵠᐃ[112].id = 112;
    this.Ⲇⵠᐃ[3] = Hw(68, 68, 0, ᐃΔ[272], 3);
    this.Ⲇⵠᐃ[3].id = 3;
    this.Ⲇⵠᐃ[4] = Hw(68, 68, 0, ᐃΔ[344], 3);
    this.Ⲇⵠᐃ[4].id = 4;
    this.Ⲇⵠᐃ[5] = Hw(68, 68, 0, ᐃΔ[345], 3);
    this.Ⲇⵠᐃ[5].id = 5;
    this.Ⲇⵠᐃ[57] = Hw(68, 68, 0, ᐃΔ[831], 3);
    this.Ⲇⵠᐃ[57].id = 57;
    this.Ⲇⵠᐃ[6] = Hw(68, 68, 0, ᐃΔ[346], 3);
    this.Ⲇⵠᐃ[6].id = 6;
    this.Ⲇⵠᐃ[113] = Hw(68, 68, 0, ᐃΔ[273], 3);
    this.Ⲇⵠᐃ[113].id = 113;
    this.Ⲇⵠᐃ[114] = Hw(68, 68, 0, ᐃΔ[358], 3);
    this.Ⲇⵠᐃ[114].id = 114;
    this.Ⲇⵠᐃ[115] = Hw(68, 68, 0, ᐃΔ[348], 3);
    this.Ⲇⵠᐃ[115].id = 115;
    this.Ⲇⵠᐃ[162] = Hw(68, 68, 0, ᐃΔ[349], 3);
    this.Ⲇⵠᐃ[162].id = 162;
    this.Ⲇⵠᐃ[160] = Hw(68, 68, 0, ᐃΔ[350], 3);
    this.Ⲇⵠᐃ[160].id = 160;
    this.Ⲇⵠᐃ[8] = Hw(68, 68, 0, ᐃΔ[274], 3);
    this.Ⲇⵠᐃ[8].id = 8;
    this.Ⲇⵠᐃ[117] = Hw(68, 68, 0, ᐃΔ[351], 3);
    this.Ⲇⵠᐃ[117].id = 117;
    this.Ⲇⵠᐃ[116] = Hw(68, 68, 0, ᐃΔ[275], 3);
    this.Ⲇⵠᐃ[116].id = 116;
    this.Ⲇⵠᐃ[118] = Hw(68, 68, 0, ᐃΔ[276], 3);
    this.Ⲇⵠᐃ[118].id = 118;
    this.Ⲇⵠᐃ[195] = Hw(68, 68, 0, ᐃΔ[352], 3);
    this.Ⲇⵠᐃ[195].id = 195;
    this.Ⲇⵠᐃ[161] = Hw(68, 68, 0, ᐃΔ[353], 3);
    this.Ⲇⵠᐃ[161].id = 161;
    this.Ⲇⵠᐃ[163] = Hw(68, 68, 0, ᐃΔ[354], 3);
    this.Ⲇⵠᐃ[163].id = 163;
    this.Ⲇⵠᐃ[164] = Hw(68, 68, 0, ᐃΔ[355], 3);
    this.Ⲇⵠᐃ[164].id = 164;
    this.Ⲇⵠᐃ[165] = Hw(68, 68, 0, ᐃΔ[356], 3);
    this.Ⲇⵠᐃ[165].id = 165;
    this.Ⲇⵠᐃ[166] = Hw(68, 68, 0, ᐃΔ[357], 3);
    this.Ⲇⵠᐃ[166].id = 166;
    this.Ⲇⵠᐃ[167] = Hw(68, 68, 0, ᐃΔ[359], 3);
    this.Ⲇⵠᐃ[167].id = 167;
    this.Ⲇⵠᐃ[168] = Hw(68, 68, 0, ᐃΔ[382], 3);
    this.Ⲇⵠᐃ[168].id = 168;
    this.Ⲇⵠᐃ[169] = Hw(68, 68, 0, ᐃΔ[383], 3);
    this.Ⲇⵠᐃ[169].id = 169;
    this.Ⲇⵠᐃ[170] = Hw(68, 68, 0, ᐃΔ[384], 3);
    this.Ⲇⵠᐃ[170].id = 170;
    this.Ⲇⵠᐃ[2] = Hw(68, 68, 0, ᐃΔ[386], 3);
    this.Ⲇⵠᐃ[2].id = 2;
    this.Ⲇⵠᐃ[237] = Hw(68, 68, 0, ᐃΔ[1163], 3);
    this.Ⲇⵠᐃ[237].id = 237;
    this.Ⲇⵠᐃ[174] = Hw(68, 68, 0, ᐃΔ[394], 3);
    this.Ⲇⵠᐃ[174].id = 174;
    this.Ⲇⵠᐃ[222] = Hw(68, 68, 0, ᐃΔ[1036], 3);
    this.Ⲇⵠᐃ[222].id = 222;
    this.Ⲇⵠᐃ[231] = Hw(68, 68, 0, ᐃΔ[1038], 3);
    this.Ⲇⵠᐃ[231].id = 231;
    this.Ⲇⵠᐃ[232] = Hw(68, 68, 0, ᐃΔ[1040], 3);
    this.Ⲇⵠᐃ[232].id = 232;
    this.Ⲇⵠᐃ[234] = Hw(68, 68, 0, ᐃΔ[1157], 3);
    this.Ⲇⵠᐃ[234].id = 234;
    this.Ⲇⵠᐃ[10] = Hw(68, 68, 0, ᐃΔ[387], 3);
    this.Ⲇⵠᐃ[10].id = 10;
    this.Ⲇⵠᐃ[171] = Hw(68, 68, 0, ᐃΔ[388], 3);
    this.Ⲇⵠᐃ[171].id = 171;
    this.Ⲇⵠᐃ[172] = Hw(68, 68, 0, ᐃΔ[389], 3);
    this.Ⲇⵠᐃ[172].id = 172;
    this.Ⲇⵠᐃ[173] = Hw(68, 68, 0, ᐃΔ[390], 3);
    this.Ⲇⵠᐃ[173].id = 173;
    this.Ⲇⵠᐃ[11] = Hw(68, 68, 0, ᐃΔ[391], 3);
    this.Ⲇⵠᐃ[11].id = 11;
    this.Ⲇⵠᐃ[12] = Hw(68, 68, 0, ᐃΔ[403], 3);
    this.Ⲇⵠᐃ[12].id = 12;
    this.Ⲇⵠᐃ[13] = Hw(68, 68, 0, ᐃΔ[397], 3);
    this.Ⲇⵠᐃ[13].id = 13;
    this.Ⲇⵠᐃ[14] = Hw(68, 68, 0, ᐃΔ[400], 3);
    this.Ⲇⵠᐃ[14].id = 14;
    this.Ⲇⵠᐃ[15] = Hw(68, 68, 0, ᐃΔ[406], 3);
    this.Ⲇⵠᐃ[15].id = 15;
    this.Ⲇⵠᐃ[16] = Hw(68, 68, 0, ᐃΔ[875], 3);
    this.Ⲇⵠᐃ[16].id = 16;
    this.Ⲇⵠᐃ[119] = Hw(68, 68, 0, ᐃΔ[410], 3);
    this.Ⲇⵠᐃ[119].id = 119;
    this.Ⲇⵠᐃ[23] = Hw(68, 68, 0, ᐃΔ[422], 3);
    this.Ⲇⵠᐃ[23].id = 23;
    this.Ⲇⵠᐃ[24] = Hw(68, 68, 0, ᐃΔ[425], 3);
    this.Ⲇⵠᐃ[24].id = 24;
    this.Ⲇⵠᐃ[87] = Hw(68, 68, 0, ᐃΔ[1229], 3);
    this.Ⲇⵠᐃ[87].id = 87;
    this.Ⲇⵠᐃ[88] = Hw(68, 68, 0, ᐃΔ[1232], 3);
    this.Ⲇⵠᐃ[88].id = 88;
    this.Ⲇⵠᐃ[80] = Hw(68, 68, 0, ᐃΔ[1139], 3);
    this.Ⲇⵠᐃ[80].id = 80;
    this.Ⲇⵠᐃ[81] = Hw(68, 68, 0, ᐃΔ[1142], 3);
    this.Ⲇⵠᐃ[81].id = 81;
    this.Ⲇⵠᐃ[101] = Hw(68, 68, 0, ᐃΔ[1167], 3);
    this.Ⲇⵠᐃ[101].id = 101;
    this.Ⲇⵠᐃ[64] = Hw(68, 68, 0, ᐃΔ[571], 3);
    this.Ⲇⵠᐃ[64].id = 64;
    this.Ⲇⵠᐃ[71] = Hw(68, 68, 0, ᐃΔ[1240], 3);
    this.Ⲇⵠᐃ[71].id = 71;
    this.Ⲇⵠᐃ[102] = Hw(68, 68, 0, ᐃΔ[1170], 3);
    this.Ⲇⵠᐃ[102].id = 102;
    this.Ⲇⵠᐃ[65] = Hw(68, 68, 0, ᐃΔ[574], 3);
    this.Ⲇⵠᐃ[65].id = 65;
    this.Ⲇⵠᐃ[72] = Hw(68, 68, 0, ᐃΔ[1243], 3);
    this.Ⲇⵠᐃ[72].id = 72;
    this.Ⲇⵠᐃ[103] = Hw(68, 68, 0, ᐃΔ[1173], 3);
    this.Ⲇⵠᐃ[103].id = 103;
    this.Ⲇⵠᐃ[66] = Hw(68, 68, 0, ᐃΔ[577], 3);
    this.Ⲇⵠᐃ[66].id = 66;
    this.Ⲇⵠᐃ[73] = Hw(68, 68, 0, ᐃΔ[1246], 3);
    this.Ⲇⵠᐃ[73].id = 73;
    this.Ⲇⵠᐃ[104] = Hw(68, 68, 0, ᐃΔ[1176], 3);
    this.Ⲇⵠᐃ[104].id = 104;
    this.Ⲇⵠᐃ[67] = Hw(68, 68, 0, ᐃΔ[580], 3);
    this.Ⲇⵠᐃ[67].id = 67;
    this.Ⲇⵠᐃ[74] = Hw(68, 68, 0, ᐃΔ[1249], 3);
    this.Ⲇⵠᐃ[74].id = 74;
    this.Ⲇⵠᐃ[105] = Hw(68, 68, 0, ᐃΔ[1179], 3);
    this.Ⲇⵠᐃ[105].id = 105;
    this.Ⲇⵠᐃ[68] = Hw(68, 68, 0, ᐃΔ[583], 3);
    this.Ⲇⵠᐃ[68].id = 68;
    this.Ⲇⵠᐃ[75] = Hw(68, 68, 0, ᐃΔ[1252], 3);
    this.Ⲇⵠᐃ[75].id = 75;
    this.Ⲇⵠᐃ[106] = Hw(68, 68, 0, ᐃΔ[1182], 3);
    this.Ⲇⵠᐃ[106].id = 106;
    this.Ⲇⵠᐃ[69] = Hw(68, 68, 0, ᐃΔ[586], 3);
    this.Ⲇⵠᐃ[69].id = 69;
    this.Ⲇⵠᐃ[76] = Hw(68, 68, 0, ᐃΔ[1255], 3);
    this.Ⲇⵠᐃ[76].id = 76;
    this.Ⲇⵠᐃ[107] = Hw(68, 68, 0, ᐃΔ[1185], 3);
    this.Ⲇⵠᐃ[107].id = 107;
    this.Ⲇⵠᐃ[70] = Hw(68, 68, 0, ᐃΔ[589], 3);
    this.Ⲇⵠᐃ[70].id = 70;
    this.Ⲇⵠᐃ[94] = Hw(68, 68, 0, ᐃΔ[1258], 3);
    this.Ⲇⵠᐃ[94].id = 94;
    this.Ⲇⵠᐃ[95] = Hw(68, 68, 0, ᐃΔ[1261], 3);
    this.Ⲇⵠᐃ[95].id = 95;
    this.Ⲇⵠᐃ[96] = Hw(68, 68, 0, ᐃΔ[1264], 3);
    this.Ⲇⵠᐃ[96].id = 96;
    this.Ⲇⵠᐃ[97] = Hw(68, 68, 0, ᐃΔ[1267], 3);
    this.Ⲇⵠᐃ[97].id = 97;
    this.Ⲇⵠᐃ[98] = Hw(68, 68, 0, ᐃΔ[1270], 3);
    this.Ⲇⵠᐃ[98].id = 98;
    this.Ⲇⵠᐃ[99] = Hw(68, 68, 0, ᐃΔ[1273], 3);
    this.Ⲇⵠᐃ[99].id = 99;
    this.Ⲇⵠᐃ[58] = Hw(68, 68, 0, ᐃΔ[828], 3);
    this.Ⲇⵠᐃ[58].id = 58;
    this.Ⲇⵠᐃ[25] = Hw(68, 68, 0, ᐃΔ[431], 3);
    this.Ⲇⵠᐃ[25].id = 25;
    this.Ⲇⵠᐃ[26] = Hw(68, 68, 0, ᐃΔ[434], 3);
    this.Ⲇⵠᐃ[26].id = 26;
    this.Ⲇⵠᐃ[27] = Hw(68, 68, 0, ᐃΔ[437], 3);
    this.Ⲇⵠᐃ[27].id = 27;
    this.Ⲇⵠᐃ[28] = Hw(68, 68, 0, ᐃΔ[440], 3);
    this.Ⲇⵠᐃ[28].id = 28;
    this.Ⲇⵠᐃ[120] = Hw(68, 68, 0, ᐃΔ[443], 3);
    this.Ⲇⵠᐃ[120].id = 120;
    this.Ⲇⵠᐃ[29] = Hw(68, 68, 0, ᐃΔ[385], 3);
    this.Ⲇⵠᐃ[29].id = 29;
    this.Ⲇⵠᐃ[121] = Hw(68, 68, 0, ᐃΔ[446], 3);
    this.Ⲇⵠᐃ[121].id = 121;
    this.Ⲇⵠᐃ[30] = Hw(68, 68, 0, ᐃΔ[457], 3);
    this.Ⲇⵠᐃ[30].id = 30;
    this.Ⲇⵠᐃ[9] = Hw(68, 68, 0, ᐃΔ[862], 3);
    this.Ⲇⵠᐃ[9].id = 9;
    this.Ⲇⵠᐃ[31] = Hw(68, 68, 0, ᐃΔ[459], 3);
    this.Ⲇⵠᐃ[31].id = 31;
    this.Ⲇⵠᐃ[32] = Hw(68, 68, 0, ᐃΔ[1018], 3);
    this.Ⲇⵠᐃ[32].id = 32;
    this.Ⲇⵠᐃ[33] = Hw(68, 68, 0, ᐃΔ[474], 3);
    this.Ⲇⵠᐃ[33].id = 33;
    this.Ⲇⵠᐃ[35] = Hw(68, 68, 0, ᐃΔ[479], 3);
    this.Ⲇⵠᐃ[35].id = 35;
    this.Ⲇⵠᐃ[36] = Hw(68, 68, 0, ᐃΔ[482], 3);
    this.Ⲇⵠᐃ[36].id = 36;
    this.Ⲇⵠᐃ[37] = Hw(68, 68, 0, ᐃΔ[485], 3);
    this.Ⲇⵠᐃ[37].id = 37;
    this.Ⲇⵠᐃ[38] = Hw(68, 68, 0, ᐃΔ[488], 3);
    this.Ⲇⵠᐃ[38].id = 38;
    this.Ⲇⵠᐃ[39] = Hw(68, 68, 0, ᐃΔ[491], 3);
    this.Ⲇⵠᐃ[39].id = 39;
    this.Ⲇⵠᐃ[122] = Hw(68, 68, 0, ᐃΔ[494], 3);
    this.Ⲇⵠᐃ[122].id = 122;
    this.Ⲇⵠᐃ[123] = Hw(68, 68, 0, ᐃΔ[497], 3);
    this.Ⲇⵠᐃ[123].id = 123;
    this.Ⲇⵠᐃ[124] = Hw(68, 68, 0, ᐃΔ[501], 3);
    this.Ⲇⵠᐃ[124].id = 124;
    this.Ⲇⵠᐃ[40] = Hw(68, 68, 0, ᐃΔ[504], 3);
    this.Ⲇⵠᐃ[40].id = 40;
    this.Ⲇⵠᐃ[146] = Hw(68, 68, 0, ᐃΔ[506], 3);
    this.Ⲇⵠᐃ[146].id = 146;
    this.Ⲇⵠᐃ[240] = Hw(68, 68, 0, ᐃΔ[1234], 3);
    this.Ⲇⵠᐃ[240].id = 240;
    this.Ⲇⵠᐃ[147] = Hw(68, 68, 0, ᐃΔ[514], 3);
    this.Ⲇⵠᐃ[147].id = 147;
    this.Ⲇⵠᐃ[148] = Hw(68, 68, 0, ᐃΔ[520], 3);
    this.Ⲇⵠᐃ[148].id = 148;
    this.Ⲇⵠᐃ[149] = Hw(68, 68, 0, ᐃΔ[522], 3);
    this.Ⲇⵠᐃ[149].id = 149;
    this.Ⲇⵠᐃ[150] = Hw(68, 68, 0, ᐃΔ[524], 3);
    this.Ⲇⵠᐃ[150].id = 150;
    this.Ⲇⵠᐃ[151] = Hw(68, 68, 0, ᐃΔ[531], 3);
    this.Ⲇⵠᐃ[151].id = 151;
    this.Ⲇⵠᐃ[158] = Hw(68, 68, 0, ᐃΔ[534], 3);
    this.Ⲇⵠᐃ[158].id = 158;
    this.Ⲇⵠᐃ[159] = Hw(68, 68, 0, ᐃΔ[554], 3);
    this.Ⲇⵠᐃ[159].id = 159;
    this.Ⲇⵠᐃ[43] = Hw(68, 68, 0, ᐃΔ[543], 3);
    this.Ⲇⵠᐃ[43].id = 43;
    this.Ⲇⵠᐃ[45] = Hw(68, 68, 0, ᐃΔ[552], 3);
    this.Ⲇⵠᐃ[45].id = 45;
    this.Ⲇⵠᐃ[125] = Hw(68, 68, 0, ᐃΔ[606], 3);
    this.Ⲇⵠᐃ[125].id = 125;
    this.Ⲇⵠᐃ[221] = Hw(68, 68, 0, ᐃΔ[1237], 3);
    this.Ⲇⵠᐃ[221].id = 221;
    this.Ⲇⵠᐃ[223] = Hw(68, 68, 0, ᐃΔ[1029], 3);
    this.Ⲇⵠᐃ[223].id = 223;
    this.Ⲇⵠᐃ[224] = Hw(68, 68, 0, ᐃΔ[1032], 3);
    this.Ⲇⵠᐃ[224].id = 224;
    this.Ⲇⵠᐃ[230] = Hw(68, 68, 0, ᐃΔ[1118], 3);
    this.Ⲇⵠᐃ[230].id = 230;
    this.Ⲇⵠᐃ[89] = Hw(68, 68, 0, ᐃΔ[1047], 3);
    this.Ⲇⵠᐃ[89].id = 89;
    this.Ⲇⵠᐃ[225] = Hw(68, 68, 0, ᐃΔ[1050], 3);
    this.Ⲇⵠᐃ[225].id = 225;
    this.Ⲇⵠᐃ[227] = Hw(68, 68, 0, ᐃΔ[1081], 3);
    this.Ⲇⵠᐃ[227].id = 227;
    this.Ⲇⵠᐃ[239] = Hw(68, 68, 0, ᐃΔ[1225], 3);
    this.Ⲇⵠᐃ[239].id = 239;
    this.Ⲇⵠᐃ[228] = Hw(68, 68, 0, ᐃΔ[1096], 3);
    this.Ⲇⵠᐃ[228].id = 228;
    this.Ⲇⵠᐃ[229] = Hw(68, 68, 0, ᐃΔ[1111], 3);
    this.Ⲇⵠᐃ[229].id = 229;
    this.Ⲇⵠᐃ[226] = Hw(68, 68, 0, ᐃΔ[1190], 3);
    this.Ⲇⵠᐃ[226].id = 226;
    this.Ⲇⵠᐃ[126] = Hw(68, 68, 0, ᐃΔ[610], 3);
    this.Ⲇⵠᐃ[126].id = 126;
    this.Ⲇⵠᐃ[127] = Hw(68, 68, 0, ᐃΔ[615], 3);
    this.Ⲇⵠᐃ[127].id = 127;
    this.Ⲇⵠᐃ[128] = Hw(68, 68, 0, ᐃΔ[614], 3);
    this.Ⲇⵠᐃ[128].id = 128;
    this.Ⲇⵠᐃ[46] = Hw(68, 68, 0, ᐃΔ[617], 3);
    this.Ⲇⵠᐃ[46].id = 46;
    this.Ⲇⵠᐃ[50] = Hw(68, 68, 0, ᐃΔ[701], 3);
    this.Ⲇⵠᐃ[50].id = 50;
    this.Ⲇⵠᐃ[51] = Hw(68, 68, 0, ᐃΔ[703], 3);
    this.Ⲇⵠᐃ[51].id = 51;
    this.Ⲇⵠᐃ[52] = Hw(68, 68, 0, ᐃΔ[707], 3);
    this.Ⲇⵠᐃ[52].id = 52;
    this.Ⲇⵠᐃ[55] = Hw(68, 68, 0, ᐃΔ[710], 3);
    this.Ⲇⵠᐃ[55].id = 55;
    this.Ⲇⵠᐃ[129] = Hw(68, 68, 0, ᐃΔ[625], 3);
    this.Ⲇⵠᐃ[129].id = 129;
    this.Ⲇⵠᐃ[130] = Hw(68, 68, 0, ᐃΔ[628], 3);
    this.Ⲇⵠᐃ[130].id = 130;
    this.Ⲇⵠᐃ[131] = Hw(68, 68, 0, ᐃΔ[630], 3);
    this.Ⲇⵠᐃ[131].id = 131;
    this.Ⲇⵠᐃ[132] = Hw(68, 68, 0, ᐃΔ[633], 3);
    this.Ⲇⵠᐃ[132].id = 132;
    this.Ⲇⵠᐃ[133] = Hw(68, 68, 0, ᐃΔ[636], 3);
    this.Ⲇⵠᐃ[133].id = 133;
    this.Ⲇⵠᐃ[134] = Hw(68, 68, 0, ᐃΔ[640], 3);
    this.Ⲇⵠᐃ[134].id = 134;
    this.Ⲇⵠᐃ[135] = Hw(68, 68, 0, ᐃΔ[645], 3);
    this.Ⲇⵠᐃ[135].id = 135;
    this.Ⲇⵠᐃ[47] = Hw(68, 68, 0, ᐃΔ[648], 3);
    this.Ⲇⵠᐃ[47].id = 47;
    this.Ⲇⵠᐃ[48] = Hw(68, 68, 0, ᐃΔ[651], 3);
    this.Ⲇⵠᐃ[48].id = 48;
    this.Ⲇⵠᐃ[49] = Hw(68, 68, 0, ᐃΔ[653], 3);
    this.Ⲇⵠᐃ[49].id = 49;
    this.Ⲇⵠᐃ[136] = Hw(68, 68, 0, ᐃΔ[661], 3);
    this.Ⲇⵠᐃ[136].id = 136;
    this.Ⲇⵠᐃ[143] = Hw(68, 68, 0, ᐃΔ[689], 3);
    this.Ⲇⵠᐃ[143].id = 143;
    this.Ⲇⵠᐃ[137] = Hw(68, 68, 0, ᐃΔ[663], 3);
    this.Ⲇⵠᐃ[137].id = 137;
    this.Ⲇⵠᐃ[138] = Hw(68, 68, 0, ᐃΔ[665], 3);
    this.Ⲇⵠᐃ[138].id = 138;
    this.Ⲇⵠᐃ[139] = Hw(68, 68, 0, ᐃΔ[675], 3);
    this.Ⲇⵠᐃ[139].id = 139;
    this.Ⲇⵠᐃ[140] = Hw(68, 68, 0, ᐃΔ[682], 3);
    this.Ⲇⵠᐃ[140].id = 140;
    this.Ⲇⵠᐃ[141] = Hw(68, 68, 0, ᐃΔ[683], 3);
    this.Ⲇⵠᐃ[141].id = 141;
    this.Ⲇⵠᐃ[142] = Hw(68, 68, 0, ᐃΔ[686], 3);
    this.Ⲇⵠᐃ[142].id = 142;
    this.Ⲇⵠᐃ[144] = Hw(68, 68, 0, ᐃΔ[719], 3);
    this.Ⲇⵠᐃ[144].id = 144;
    this.Ⲇⵠᐃ[145] = Hw(68, 68, 0, ᐃΔ[731], 3);
    this.Ⲇⵠᐃ[145].id = 145;
    this.Ⲇⵠᐃ[59] = Hw(68, 68, 0, ᐃΔ[733], 3);
    this.Ⲇⵠᐃ[59].id = 59;
    this.Ⲇⵠᐃ[62] = Hw(68, 68, 0, ᐃΔ[565], 3);
    this.Ⲇⵠᐃ[62].id = 62;
    this.Ⲇⵠᐃ[185] = Hw(68, 68, 0, ᐃΔ[590], 3);
    this.Ⲇⵠᐃ[185].id = 185;
    this.Ⲇⵠᐃ[184] = Hw(68, 68, 0, ᐃΔ[752], 3);
    this.Ⲇⵠᐃ[184].id = 184;
    this.Ⲇⵠᐃ[187] = Hw(68, 68, 0, ᐃΔ[591], 3);
    this.Ⲇⵠᐃ[187].id = 187;
    this.Ⲇⵠᐃ[186] = Hw(68, 68, 0, ᐃΔ[754], 3);
    this.Ⲇⵠᐃ[186].id = 186;
    this.Ⲇⵠᐃ[77] = Hw(68, 68, 0, ᐃΔ[757], 3);
    this.Ⲇⵠᐃ[77].id = 77;
    this.Ⲇⵠᐃ[175] = Hw(68, 68, 0, ᐃΔ[759], 3);
    this.Ⲇⵠᐃ[175].id = 175;
    this.Ⲇⵠᐃ[176] = Hw(68, 68, 0, ᐃΔ[763], 3);
    this.Ⲇⵠᐃ[176].id = 176;
    this.Ⲇⵠᐃ[78] = Hw(68, 68, 0, ᐃΔ[761], 3);
    this.Ⲇⵠᐃ[78].id = 78;
    this.Ⲇⵠᐃ[177] = Hw(68, 68, 0, ᐃΔ[766], 3);
    this.Ⲇⵠᐃ[177].id = 177;
    this.Ⲇⵠᐃ[79] = Hw(68, 68, 0, ᐃΔ[765], 3);
    this.Ⲇⵠᐃ[79].id = 79;
    this.Ⲇⵠᐃ[83] = Hw(68, 68, 0, ᐃΔ[769], 3);
    this.Ⲇⵠᐃ[83].id = 83;
    this.Ⲇⵠᐃ[84] = Hw(68, 68, 0, ᐃΔ[773], 3);
    this.Ⲇⵠᐃ[84].id = 84;
    this.Ⲇⵠᐃ[178] = Hw(68, 68, 0, ᐃΔ[774], 3);
    this.Ⲇⵠᐃ[178].id = 178;
    this.Ⲇⵠᐃ[179] = Hw(68, 68, 0, ᐃΔ[775], 3);
    this.Ⲇⵠᐃ[179].id = 179;
    this.Ⲇⵠᐃ[86] = Hw(68, 68, 0, ᐃΔ[778], 3);
    this.Ⲇⵠᐃ[86].id = 86;
    this.Ⲇⵠᐃ[85] = Hw(68, 68, 0, ᐃΔ[781], 3);
    this.Ⲇⵠᐃ[85].id = 85;
    this.Ⲇⵠᐃ[180] = Hw(68, 68, 0, ᐃΔ[786], 3);
    this.Ⲇⵠᐃ[180].id = 180;
    this.Ⲇⵠᐃ[181] = Hw(68, 68, 0, ᐃΔ[787], 3);
    this.Ⲇⵠᐃ[181].id = 181;
    this.Ⲇⵠᐃ[182] = Hw(68, 68, 0, ᐃΔ[790], 3);
    this.Ⲇⵠᐃ[182].id = 182;
    this.Ⲇⵠᐃ[183] = Hw(68, 68, 0, ᐃΔ[801], 3);
    this.Ⲇⵠᐃ[183].id = 183;
    this.Ⲇⵠᐃ[188] = Hw(68, 68, 0, ᐃΔ[810], 3);
    this.Ⲇⵠᐃ[188].id = 188;
    this.Ⲇⵠᐃ[189] = Hw(68, 68, 0, ᐃΔ[815], 3);
    this.Ⲇⵠᐃ[189].id = 189;
    this.Ⲇⵠᐃ[190] = Hw(68, 68, 0, ᐃΔ[844], 3);
    this.Ⲇⵠᐃ[190].id = 190;
    this.Ⲇⵠᐃ[191] = Hw(68, 68, 0, ᐃΔ[836], 3);
    this.Ⲇⵠᐃ[191].id = 191;
    this.Ⲇⵠᐃ[192] = Hw(68, 68, 0, ᐃΔ[841], 3);
    this.Ⲇⵠᐃ[192].id = 192;
    this.Ⲇⵠᐃ[193] = Hw(68, 68, 0, ᐃΔ[847], 3);
    this.Ⲇⵠᐃ[193].id = 193;
    this.Ⲇⵠᐃ[194] = Hw(68, 68, 0, ᐃΔ[851], 3);
    this.Ⲇⵠᐃ[194].id = 194;
    this.Ⲇⵠᐃ[206] = Hw(68, 68, 0, ᐃΔ[961], 3);
    this.Ⲇⵠᐃ[206].id = 206;
    this.Ⲇⵠᐃ[207] = Hw(68, 68, 0, ᐃΔ[974], 3);
    this.Ⲇⵠᐃ[207].id = 207;
    this.Ⲇⵠᐃ[204] = Hw(68, 68, 0, ᐃΔ[951], 3);
    this.Ⲇⵠᐃ[204].id = 204;
    this.Ⲇⵠᐃ[205] = Hw(68, 68, 0, ᐃΔ[956], 3);
    this.Ⲇⵠᐃ[205].id = 205;
    this.Ⲇⵠᐃ[208] = Hw(68, 68, 0, ᐃΔ[968], 3);
    this.Ⲇⵠᐃ[208].id = 208;
    this.Ⲇⵠᐃ[209] = Hw(68, 68, 0, ᐃΔ[973], 3);
    this.Ⲇⵠᐃ[209].id = 209;
    this.Ⲇⵠᐃ[210] = Hw(68, 68, 0, ᐃΔ[983], 3);
    this.Ⲇⵠᐃ[210].id = 210;
    this.Ⲇⵠᐃ[211] = Hw(68, 68, 0, ᐃΔ[988], 3);
    this.Ⲇⵠᐃ[211].id = 211;
    this.Ⲇⵠᐃ[41] = Hw(68, 68, 0, ᐃΔ[881], 3);
    this.Ⲇⵠᐃ[41].id = 41;
    this.Ⲇⵠᐃ[42] = Hw(68, 68, 0, ᐃΔ[883], 3);
    this.Ⲇⵠᐃ[42].id = 42;
    this.Ⲇⵠᐃ[12] = Hw(68, 68, 0, ᐃΔ[403], 3);
    this.Ⲇⵠᐃ[12].id = 12;
    this.Ⲇⵠᐃ[16] = Hw(68, 68, 0, ᐃΔ[875], 3);
    this.Ⲇⵠᐃ[16].id = 16;
    this.Ⲇⵠᐃ[196] = Hw(68, 68, 0, ᐃΔ[898], 3);
    this.Ⲇⵠᐃ[196].id = 196;
    this.Ⲇⵠᐃ[18] = Hw(68, 68, 0, ᐃΔ[899], 3);
    this.Ⲇⵠᐃ[18].id = 18;
    this.Ⲇⵠᐃ[197] = Hw(68, 68, 0, ᐃΔ[906], 3);
    this.Ⲇⵠᐃ[197].id = 197;
    this.Ⲇⵠᐃ[198] = Hw(68, 68, 0, ᐃΔ[908], 3);
    this.Ⲇⵠᐃ[198].id = 198;
    this.Ⲇⵠᐃ[61] = Hw(68, 68, 0, ᐃΔ[911], 3);
    this.Ⲇⵠᐃ[61].id = 61;
    this.Ⲇⵠᐃ[201] = Hw(68, 68, 0, ᐃΔ[871], 3);
    this.Ⲇⵠᐃ[201].id = 201;
    this.Ⲇⵠᐃ[199] = Hw(68, 68, 0, ᐃΔ[863], 3);
    this.Ⲇⵠᐃ[199].id = 199;
    this.Ⲇⵠᐃ[200] = Hw(68, 68, 0, ᐃΔ[868], 3);
    this.Ⲇⵠᐃ[200].id = 200;
    this.ΔΔⵠⵠⲆ = [];
    for (m = 0; m < 250; m++) {
      this.ΔΔⵠⵠⲆ[m] = Hw(0, 0, 0, ᐃΔ[366]);
    }
    this.ᐃⲆᐃ = [];
    this.ᐃⲆᐃ[0] = Hw(60, 60, 0, ᐃΔ[261], 3);
    this.ᐃⲆᐃ[0].id = 0;
    this.ᐃⲆᐃ[1] = Hw(60, 60, 0, ᐃΔ[312], 3);
    this.ᐃⲆᐃ[1].id = 1;
    this.ᐃⲆᐃ[108] = Hw(60, 60, 0, ᐃΔ[315], 3);
    this.ᐃⲆᐃ[108].id = 108;
    this.ᐃⲆᐃ[108].info.ⵠᐃ[2] = this.ᐃⲆᐃ[108].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[109] = Hw(60, 60, 0, ᐃΔ[316], 3);
    this.ᐃⲆᐃ[109].id = 109;
    this.ᐃⲆᐃ[109].info.ⵠᐃ[2] = this.ᐃⲆᐃ[109].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[110] = Hw(60, 60, 0, ᐃΔ[277], 3);
    this.ᐃⲆᐃ[110].id = 110;
    this.ᐃⲆᐃ[233] = Hw(60, 60, 0, ᐃΔ[1154], 3);
    this.ᐃⲆᐃ[233].id = 233;
    this.ᐃⲆᐃ[111] = Hw(60, 60, 0, ᐃΔ[297], 3);
    this.ᐃⲆᐃ[111].id = 111;
    this.ᐃⲆᐃ[111].info.ⵠᐃ[2] = this.ᐃⲆᐃ[111].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[112] = Hw(60, 60, 0, ᐃΔ[298], 3);
    this.ᐃⲆᐃ[112].id = 112;
    this.ᐃⲆᐃ[112].info.ⵠᐃ[2] = this.ᐃⲆᐃ[112].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[3] = Hw(60, 60, 0, ᐃΔ[258], 3);
    this.ᐃⲆᐃ[3].id = 3;
    this.ᐃⲆᐃ[4] = Hw(60, 60, 0, ᐃΔ[296], 3);
    this.ᐃⲆᐃ[4].id = 4;
    this.ᐃⲆᐃ[5] = Hw(60, 60, 0, ᐃΔ[292], 3);
    this.ᐃⲆᐃ[5].id = 5;
    this.ᐃⲆᐃ[57] = Hw(60, 60, 0, ᐃΔ[829], 3);
    this.ᐃⲆᐃ[57].id = 57;
    this.ᐃⲆᐃ[6] = Hw(60, 60, 0, ᐃΔ[293], 3);
    this.ᐃⲆᐃ[6].id = 6;
    this.ᐃⲆᐃ[113] = Hw(60, 60, 0, ᐃΔ[309], 3);
    this.ᐃⲆᐃ[113].id = 113;
    this.ᐃⲆᐃ[114] = Hw(60, 60, 0, ᐃΔ[310], 3);
    this.ᐃⲆᐃ[114].id = 114;
    this.ᐃⲆᐃ[115] = Hw(60, 60, 0, ᐃΔ[311], 3);
    this.ᐃⲆᐃ[115].id = 115;
    this.ᐃⲆᐃ[162] = Hw(60, 60, 0, ᐃΔ[317], 3);
    this.ᐃⲆᐃ[162].id = 162;
    this.ᐃⲆᐃ[160] = Hw(60, 60, 0, ᐃΔ[319], 3);
    this.ᐃⲆᐃ[160].id = 160;
    this.ᐃⲆᐃ[8] = Hw(60, 60, 0, ᐃΔ[313], 3);
    this.ᐃⲆᐃ[8].id = 8;
    this.ᐃⲆᐃ[117] = Hw(60, 60, 0, ᐃΔ[323], 3);
    this.ᐃⲆᐃ[117].id = 117;
    this.ᐃⲆᐃ[116] = Hw(60, 60, 0, ᐃΔ[300], 3);
    this.ᐃⲆᐃ[116].id = 116;
    this.ᐃⲆᐃ[118] = Hw(60, 60, 0, ᐃΔ[328], 3);
    this.ᐃⲆᐃ[118].id = 118;
    this.ᐃⲆᐃ[195] = Hw(60, 60, 0, ᐃΔ[303], 3);
    this.ᐃⲆᐃ[195].id = 195;
    this.ᐃⲆᐃ[161] = Hw(60, 60, 0, ᐃΔ[305], 3);
    this.ᐃⲆᐃ[161].id = 161;
    this.ᐃⲆᐃ[161].info.ⵠᐃ[2] = this.ᐃⲆᐃ[161].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[163] = Hw(60, 60, 0, ᐃΔ[329], 3);
    this.ᐃⲆᐃ[163].id = 163;
    this.ᐃⲆᐃ[164] = Hw(60, 60, 0, ᐃΔ[330], 3);
    this.ᐃⲆᐃ[164].id = 164;
    this.ᐃⲆᐃ[165] = Hw(60, 60, 0, ᐃΔ[331], 3);
    this.ᐃⲆᐃ[165].id = 165;
    this.ᐃⲆᐃ[166] = Hw(60, 60, 0, ᐃΔ[335], 3);
    this.ᐃⲆᐃ[166].id = 166;
    this.ᐃⲆᐃ[167] = Hw(60, 60, 0, ᐃΔ[337], 3);
    this.ᐃⲆᐃ[167].id = 167;
    this.ᐃⲆᐃ[168] = Hw(60, 60, 0, ᐃΔ[361], 3);
    this.ᐃⲆᐃ[168].id = 168;
    this.ᐃⲆᐃ[169] = Hw(60, 60, 0, ᐃΔ[362], 3);
    this.ᐃⲆᐃ[169].id = 169;
    this.ᐃⲆᐃ[170] = Hw(60, 60, 0, ᐃΔ[364], 3);
    this.ᐃⲆᐃ[170].id = 170;
    this.ᐃⲆᐃ[29] = Hw(60, 60, 0, ᐃΔ[392], 3);
    this.ᐃⲆᐃ[29].id = 29;
    this.ᐃⲆᐃ[10] = Hw(60, 60, 0, ᐃΔ[369], 3);
    this.ᐃⲆᐃ[10].id = 10;
    this.ᐃⲆᐃ[171] = Hw(60, 60, 0, ᐃΔ[372], 3);
    this.ᐃⲆᐃ[171].id = 171;
    this.ᐃⲆᐃ[172] = Hw(60, 60, 0, ᐃΔ[375], 3);
    this.ᐃⲆᐃ[172].id = 172;
    this.ᐃⲆᐃ[173] = Hw(60, 60, 0, ᐃΔ[378], 3);
    this.ᐃⲆᐃ[173].id = 173;
    this.ᐃⲆᐃ[2] = Hw(60, 60, 0, ᐃΔ[368], 3);
    this.ᐃⲆᐃ[2].id = 2;
    this.ᐃⲆᐃ[2].info.ⵠᐃ[2] = this.ᐃⲆᐃ[2].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[237] = Hw(60, 60, 0, ᐃΔ[1162], 3);
    this.ᐃⲆᐃ[237].id = 237;
    this.ᐃⲆᐃ[237].info.ⵠᐃ[2] = this.ᐃⲆᐃ[237].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[174] = Hw(60, 60, 0, ᐃΔ[393], 3);
    this.ᐃⲆᐃ[174].id = 174;
    this.ᐃⲆᐃ[174].info.ⵠᐃ[2] = this.ᐃⲆᐃ[174].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[222] = Hw(60, 60, 0, ᐃΔ[1035], 3);
    this.ᐃⲆᐃ[222].id = 222;
    this.ᐃⲆᐃ[231] = Hw(60, 60, 0, ᐃΔ[1037], 3);
    this.ᐃⲆᐃ[231].id = 231;
    this.ᐃⲆᐃ[232] = Hw(60, 60, 0, ᐃΔ[1039], 3);
    this.ᐃⲆᐃ[232].id = 232;
    this.ᐃⲆᐃ[234] = Hw(60, 60, 0, ᐃΔ[1156], 3);
    this.ᐃⲆᐃ[234].id = 234;
    this.ᐃⲆᐃ[10] = Hw(60, 60, 0, ᐃΔ[369], 3);
    this.ᐃⲆᐃ[10].id = 10;
    this.ᐃⲆᐃ[11] = Hw(60, 60, 0, ᐃΔ[381], 3);
    this.ᐃⲆᐃ[11].id = 11;
    this.ᐃⲆᐃ[12] = Hw(60, 60, 0, ᐃΔ[401], 3);
    this.ᐃⲆᐃ[12].id = 12;
    this.ᐃⲆᐃ[13] = Hw(60, 60, 0, ᐃΔ[395], 3);
    this.ᐃⲆᐃ[13].id = 13;
    this.ᐃⲆᐃ[14] = Hw(60, 60, 0, ᐃΔ[398], 3);
    this.ᐃⲆᐃ[14].id = 14;
    this.ᐃⲆᐃ[15] = Hw(60, 60, 0, ᐃΔ[404], 3);
    this.ᐃⲆᐃ[15].id = 15;
    this.ᐃⲆᐃ[16] = Hw(60, 60, 0, ᐃΔ[874], 3);
    this.ᐃⲆᐃ[16].id = 16;
    this.ᐃⲆᐃ[119] = Hw(60, 60, 0, ᐃΔ[408], 3);
    this.ᐃⲆᐃ[119].id = 119;
    this.ᐃⲆᐃ[23] = Hw(60, 60, 0, ᐃΔ[420], 3);
    this.ᐃⲆᐃ[23].id = 23;
    this.ᐃⲆᐃ[24] = Hw(60, 60, 0, ᐃΔ[423], 3);
    this.ᐃⲆᐃ[24].id = 24;
    this.ᐃⲆᐃ[87] = Hw(60, 60, 0, ᐃΔ[1227], 3);
    this.ᐃⲆᐃ[87].id = 87;
    this.ᐃⲆᐃ[88] = Hw(60, 60, 0, ᐃΔ[1230], 3);
    this.ᐃⲆᐃ[88].id = 88;
    this.ᐃⲆᐃ[80] = Hw(60, 60, 0, ᐃΔ[1137], 3);
    this.ᐃⲆᐃ[80].id = 80;
    this.ᐃⲆᐃ[81] = Hw(60, 60, 0, ᐃΔ[1140], 3);
    this.ᐃⲆᐃ[81].id = 81;
    this.ᐃⲆᐃ[64] = Hw(60, 60, 0, ᐃΔ[569], 3);
    this.ᐃⲆᐃ[64].id = 64;
    this.ᐃⲆᐃ[101] = Hw(60, 60, 0, ᐃΔ[1166], 3);
    this.ᐃⲆᐃ[101].id = 101;
    this.ᐃⲆᐃ[71] = Hw(60, 60, 0, ᐃΔ[1239], 3);
    this.ᐃⲆᐃ[71].id = 71;
    this.ᐃⲆᐃ[65] = Hw(60, 60, 0, ᐃΔ[572], 3);
    this.ᐃⲆᐃ[65].id = 65;
    this.ᐃⲆᐃ[102] = Hw(60, 60, 0, ᐃΔ[1169], 3);
    this.ᐃⲆᐃ[102].id = 102;
    this.ᐃⲆᐃ[72] = Hw(60, 60, 0, ᐃΔ[1242], 3);
    this.ᐃⲆᐃ[72].id = 72;
    this.ᐃⲆᐃ[66] = Hw(60, 60, 0, ᐃΔ[575], 3);
    this.ᐃⲆᐃ[66].id = 66;
    this.ᐃⲆᐃ[103] = Hw(60, 60, 0, ᐃΔ[1172], 3);
    this.ᐃⲆᐃ[103].id = 103;
    this.ᐃⲆᐃ[73] = Hw(60, 60, 0, ᐃΔ[1245], 3);
    this.ᐃⲆᐃ[73].id = 73;
    this.ᐃⲆᐃ[67] = Hw(60, 60, 0, ᐃΔ[578], 3);
    this.ᐃⲆᐃ[67].id = 67;
    this.ᐃⲆᐃ[104] = Hw(60, 60, 0, ᐃΔ[1175], 3);
    this.ᐃⲆᐃ[104].id = 104;
    this.ᐃⲆᐃ[74] = Hw(60, 60, 0, ᐃΔ[1248], 3);
    this.ᐃⲆᐃ[74].id = 74;
    this.ᐃⲆᐃ[68] = Hw(60, 60, 0, ᐃΔ[581], 3);
    this.ᐃⲆᐃ[68].id = 68;
    this.ᐃⲆᐃ[105] = Hw(60, 60, 0, ᐃΔ[1178], 3);
    this.ᐃⲆᐃ[105].id = 105;
    this.ᐃⲆᐃ[75] = Hw(60, 60, 0, ᐃΔ[1251], 3);
    this.ᐃⲆᐃ[75].id = 75;
    this.ᐃⲆᐃ[69] = Hw(60, 60, 0, ᐃΔ[584], 3);
    this.ᐃⲆᐃ[69].id = 69;
    this.ᐃⲆᐃ[106] = Hw(60, 60, 0, ᐃΔ[1181], 3);
    this.ᐃⲆᐃ[106].id = 106;
    this.ᐃⲆᐃ[76] = Hw(60, 60, 0, ᐃΔ[1254], 3);
    this.ᐃⲆᐃ[76].id = 76;
    this.ᐃⲆᐃ[70] = Hw(60, 60, 0, ᐃΔ[587], 3);
    this.ᐃⲆᐃ[70].id = 70;
    this.ᐃⲆᐃ[107] = Hw(60, 60, 0, ᐃΔ[1184], 3);
    this.ᐃⲆᐃ[107].id = 107;
    this.ᐃⲆᐃ[94] = Hw(60, 60, 0, ᐃΔ[1257], 3);
    this.ᐃⲆᐃ[94].id = 94;
    this.ᐃⲆᐃ[95] = Hw(60, 60, 0, ᐃΔ[1260], 3);
    this.ᐃⲆᐃ[95].id = 95;
    this.ᐃⲆᐃ[96] = Hw(60, 60, 0, ᐃΔ[1263], 3);
    this.ᐃⲆᐃ[96].id = 96;
    this.ᐃⲆᐃ[97] = Hw(60, 60, 0, ᐃΔ[1266], 3);
    this.ᐃⲆᐃ[97].id = 97;
    this.ᐃⲆᐃ[98] = Hw(60, 60, 0, ᐃΔ[1269], 3);
    this.ᐃⲆᐃ[98].id = 98;
    this.ᐃⲆᐃ[99] = Hw(60, 60, 0, ᐃΔ[1272], 3);
    this.ᐃⲆᐃ[99].id = 99;
    this.ᐃⲆᐃ[58] = Hw(60, 60, 0, ᐃΔ[826], 3);
    this.ᐃⲆᐃ[58].id = 58;
    this.ᐃⲆᐃ[25] = Hw(60, 60, 0, ᐃΔ[429], 3);
    this.ᐃⲆᐃ[25].id = 25;
    this.ᐃⲆᐃ[26] = Hw(60, 60, 0, ᐃΔ[432], 3);
    this.ᐃⲆᐃ[26].id = 26;
    this.ᐃⲆᐃ[27] = Hw(60, 60, 0, ᐃΔ[435], 3);
    this.ᐃⲆᐃ[27].id = 27;
    this.ᐃⲆᐃ[28] = Hw(60, 60, 0, ᐃΔ[438], 3);
    this.ᐃⲆᐃ[28].id = 28;
    this.ᐃⲆᐃ[120] = Hw(60, 60, 0, ᐃΔ[441], 3);
    this.ᐃⲆᐃ[120].id = 120;
    this.ᐃⲆᐃ[120].info.ⵠᐃ[2] = this.ᐃⲆᐃ[120].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[29] = Hw(60, 60, 0, ᐃΔ[392], 3);
    this.ᐃⲆᐃ[29].id = 29;
    this.ᐃⲆᐃ[121] = Hw(60, 60, 0, ᐃΔ[418], 3);
    this.ᐃⲆᐃ[121].id = 121;
    this.ᐃⲆᐃ[121].info.ⵠᐃ[2] = this.ᐃⲆᐃ[121].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[30] = Hw(60, 60, 0, ᐃΔ[455], 3);
    this.ᐃⲆᐃ[30].id = 30;
    this.ᐃⲆᐃ[9] = Hw(60, 60, 0, ᐃΔ[860], 3);
    this.ᐃⲆᐃ[9].id = 9;
    this.ᐃⲆᐃ[31] = Hw(60, 60, 0, ᐃΔ[458], 3);
    this.ᐃⲆᐃ[31].id = 31;
    this.ᐃⲆᐃ[32] = Hw(60, 60, 0, ᐃΔ[1017], 3);
    this.ᐃⲆᐃ[32].id = 32;
    this.ᐃⲆᐃ[33] = Hw(60, 60, 0, ᐃΔ[472], 3);
    this.ᐃⲆᐃ[33].id = 33;
    this.ᐃⲆᐃ[35] = Hw(60, 60, 0, ᐃΔ[477], 3);
    this.ᐃⲆᐃ[35].id = 35;
    this.ᐃⲆᐃ[36] = Hw(60, 60, 0, ᐃΔ[480], 3);
    this.ᐃⲆᐃ[36].id = 36;
    this.ᐃⲆᐃ[37] = Hw(60, 60, 0, ᐃΔ[483], 3);
    this.ᐃⲆᐃ[37].id = 37;
    this.ᐃⲆᐃ[38] = Hw(60, 60, 0, ᐃΔ[486], 3);
    this.ᐃⲆᐃ[38].id = 38;
    this.ᐃⲆᐃ[39] = Hw(60, 60, 0, ᐃΔ[489], 3);
    this.ᐃⲆᐃ[39].id = 39;
    this.ᐃⲆᐃ[122] = Hw(60, 60, 0, ᐃΔ[492], 3);
    this.ᐃⲆᐃ[122].id = 122;
    this.ᐃⲆᐃ[123] = Hw(60, 60, 0, ᐃΔ[495], 3);
    this.ᐃⲆᐃ[123].id = 123;
    this.ᐃⲆᐃ[124] = Hw(60, 60, 0, ᐃΔ[499], 3);
    this.ᐃⲆᐃ[124].id = 124;
    this.ᐃⲆᐃ[40] = Hw(60, 60, 0, ᐃΔ[502], 3);
    this.ᐃⲆᐃ[40].id = 40;
    this.ᐃⲆᐃ[146] = Hw(60, 60, 0, ᐃΔ[505], 3);
    this.ᐃⲆᐃ[146].id = 146;
    this.ᐃⲆᐃ[146].info.ⵠᐃ[2] = this.ᐃⲆᐃ[146].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[240] = Hw(60, 60, 0, ᐃΔ[1233], 3);
    this.ᐃⲆᐃ[240].id = 240;
    this.ᐃⲆᐃ[240].info.ⵠᐃ[2] = this.ᐃⲆᐃ[240].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[147] = Hw(60, 60, 0, ᐃΔ[513], 3);
    this.ᐃⲆᐃ[147].id = 147;
    this.ᐃⲆᐃ[147].info.ⵠᐃ[2] = this.ᐃⲆᐃ[147].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[148] = Hw(60, 60, 0, ᐃΔ[518], 3);
    this.ᐃⲆᐃ[148].id = 148;
    this.ᐃⲆᐃ[148].info.ⵠᐃ[2] = this.ᐃⲆᐃ[148].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[149] = Hw(60, 60, 0, ᐃΔ[521], 3);
    this.ᐃⲆᐃ[149].id = 149;
    this.ᐃⲆᐃ[150] = Hw(60, 60, 0, ᐃΔ[523], 3);
    this.ᐃⲆᐃ[150].id = 150;
    this.ᐃⲆᐃ[151] = Hw(60, 60, 0, ᐃΔ[529], 3);
    this.ᐃⲆᐃ[151].id = 151;
    this.ᐃⲆᐃ[158] = Hw(60, 60, 0, ᐃΔ[532], 3);
    this.ᐃⲆᐃ[158].id = 158;
    this.ᐃⲆᐃ[159] = Hw(60, 60, 0, ᐃΔ[553], 3);
    this.ᐃⲆᐃ[159].id = 159;
    this.ᐃⲆᐃ[43] = Hw(60, 60, 0, ᐃΔ[541], 3);
    this.ᐃⲆᐃ[43].id = 43;
    this.ᐃⲆᐃ[45] = Hw(60, 60, 0, ᐃΔ[550], 3);
    this.ᐃⲆᐃ[45].id = 45;
    this.ᐃⲆᐃ[125] = Hw(60, 60, 0, ᐃΔ[605], 3);
    this.ᐃⲆᐃ[125].id = 125;
    this.ᐃⲆᐃ[221] = Hw(60, 60, 0, ᐃΔ[1236], 3);
    this.ᐃⲆᐃ[221].id = 221;
    this.ᐃⲆᐃ[223] = Hw(60, 60, 0, ᐃΔ[1028], 3);
    this.ᐃⲆᐃ[223].id = 223;
    this.ᐃⲆᐃ[224] = Hw(60, 60, 0, ᐃΔ[1031], 3);
    this.ᐃⲆᐃ[224].id = 224;
    this.ᐃⲆᐃ[230] = Hw(60, 60, 0, ᐃΔ[1117], 3);
    this.ᐃⲆᐃ[230].id = 230;
    this.ᐃⲆᐃ[89] = Hw(60, 60, 0, ᐃΔ[1046], 3);
    this.ᐃⲆᐃ[89].id = 89;
    this.ᐃⲆᐃ[225] = Hw(60, 60, 0, ᐃΔ[1049], 3);
    this.ᐃⲆᐃ[225].id = 225;
    this.ᐃⲆᐃ[226] = Hw(60, 60, 0, ᐃΔ[1189], 3);
    this.ᐃⲆᐃ[226].id = 226;
    this.ᐃⲆᐃ[227] = Hw(60, 60, 0, ᐃΔ[1080], 3);
    this.ᐃⲆᐃ[227].id = 227;
    this.ᐃⲆᐃ[239] = Hw(60, 60, 0, ᐃΔ[1224], 3);
    this.ᐃⲆᐃ[239].id = 239;
    this.ᐃⲆᐃ[228] = Hw(60, 60, 0, ᐃΔ[1095], 3);
    this.ᐃⲆᐃ[228].id = 228;
    this.ᐃⲆᐃ[229] = Hw(60, 60, 0, ᐃΔ[1110], 3);
    this.ᐃⲆᐃ[229].id = 229;
    this.ᐃⲆᐃ[126] = Hw(60, 60, 0, ᐃΔ[609], 3);
    this.ᐃⲆᐃ[126].id = 126;
    this.ᐃⲆᐃ[126].info.ⵠᐃ[2] = this.ᐃⲆᐃ[126].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[127] = Hw(60, 60, 0, ᐃΔ[613], 3);
    this.ᐃⲆᐃ[127].id = 127;
    this.ᐃⲆᐃ[128] = Hw(60, 60, 0, ᐃΔ[612], 3);
    this.ᐃⲆᐃ[128].id = 128;
    this.ᐃⲆᐃ[46] = Hw(60, 60, 0, ᐃΔ[616], 3);
    this.ᐃⲆᐃ[46].id = 46;
    this.ᐃⲆᐃ[50] = Hw(60, 60, 0, ᐃΔ[699], 3);
    this.ᐃⲆᐃ[50].id = 50;
    this.ᐃⲆᐃ[51] = Hw(60, 60, 0, ᐃΔ[702], 3);
    this.ᐃⲆᐃ[51].id = 51;
    this.ᐃⲆᐃ[52] = Hw(60, 60, 0, ᐃΔ[705], 3);
    this.ᐃⲆᐃ[52].id = 52;
    this.ᐃⲆᐃ[55] = Hw(60, 60, 0, ᐃΔ[709], 3);
    this.ᐃⲆᐃ[55].id = 55;
    this.ᐃⲆᐃ[129] = Hw(60, 60, 0, ᐃΔ[624], 3);
    this.ᐃⲆᐃ[129].id = 129;
    this.ᐃⲆᐃ[129].info.ⵠᐃ[2] = this.ᐃⲆᐃ[129].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[130] = Hw(60, 60, 0, ᐃΔ[626], 3);
    this.ᐃⲆᐃ[130].id = 130;
    this.ᐃⲆᐃ[131] = Hw(60, 60, 0, ᐃΔ[629], 3);
    this.ᐃⲆᐃ[131].id = 131;
    this.ᐃⲆᐃ[131].info.ⵠᐃ[2] = this.ᐃⲆᐃ[131].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[132] = Hw(60, 60, 0, ᐃΔ[631], 3);
    this.ᐃⲆᐃ[132].id = 132;
    this.ᐃⲆᐃ[133] = Hw(60, 60, 0, ᐃΔ[634], 3);
    this.ᐃⲆᐃ[133].id = 133;
    this.ᐃⲆᐃ[134] = Hw(60, 60, 0, ᐃΔ[639], 3);
    this.ᐃⲆᐃ[134].id = 134;
    this.ᐃⲆᐃ[134].info.ⵠᐃ[2] = this.ᐃⲆᐃ[134].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[135] = Hw(60, 60, 0, ᐃΔ[644], 3);
    this.ᐃⲆᐃ[135].id = 135;
    this.ᐃⲆᐃ[47] = Hw(60, 60, 0, ᐃΔ[646], 3);
    this.ᐃⲆᐃ[47].id = 47;
    this.ᐃⲆᐃ[48] = Hw(60, 60, 0, ᐃΔ[649], 3);
    this.ᐃⲆᐃ[48].id = 48;
    this.ᐃⲆᐃ[49] = Hw(60, 60, 0, ᐃΔ[652], 3);
    this.ᐃⲆᐃ[49].id = 49;
    this.ᐃⲆᐃ[136] = Hw(60, 60, 0, ᐃΔ[659], 3);
    this.ᐃⲆᐃ[136].id = 136;
    this.ᐃⲆᐃ[143] = Hw(60, 60, 0, ᐃΔ[143], 3);
    this.ᐃⲆᐃ[143].id = 143;
    this.ᐃⲆᐃ[137] = Hw(60, 60, 0, ᐃΔ[662], 3);
    this.ᐃⲆᐃ[137].id = 137;
    this.ᐃⲆᐃ[138] = Hw(60, 60, 0, ᐃΔ[664], 3);
    this.ᐃⲆᐃ[138].id = 138;
    this.ᐃⲆᐃ[139] = Hw(60, 60, 0, ᐃΔ[674], 3);
    this.ᐃⲆᐃ[139].id = 139;
    this.ᐃⲆᐃ[139].info.ⵠᐃ[2] = this.ᐃⲆᐃ[139].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[140] = Hw(60, 60, 0, ᐃΔ[140], 3);
    this.ᐃⲆᐃ[140].id = 140;
    this.ᐃⲆᐃ[140].info.ⵠᐃ[2] = this.ᐃⲆᐃ[140].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[141] = Hw(60, 60, 0, ᐃΔ[685], 3);
    this.ᐃⲆᐃ[141].id = 141;
    this.ᐃⲆᐃ[142] = Hw(60, 60, 0, ᐃΔ[142], 3);
    this.ᐃⲆᐃ[142].id = 142;
    this.ᐃⲆᐃ[142].info.ⵠᐃ[2] = this.ᐃⲆᐃ[142].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[144] = Hw(60, 60, 0, ᐃΔ[717], 3);
    this.ᐃⲆᐃ[144].id = 144;
    this.ᐃⲆᐃ[145] = Hw(60, 60, 0, ᐃΔ[145], 3);
    this.ᐃⲆᐃ[145].id = 145;
    this.ᐃⲆᐃ[59] = Hw(60, 60, 0, ᐃΔ[732], 3);
    this.ᐃⲆᐃ[59].id = 59;
    this.ᐃⲆᐃ[62] = Hw(60, 60, 0, ᐃΔ[563], 3);
    this.ᐃⲆᐃ[62].id = 62;
    this.ᐃⲆᐃ[185] = Hw(60, 60, 0, ᐃΔ[252], 3);
    this.ᐃⲆᐃ[185].id = 185;
    this.ᐃⲆᐃ[185].info.ⵠᐃ[2] = this.ᐃⲆᐃ[185].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[184] = Hw(60, 60, 0, ᐃΔ[751], 3);
    this.ᐃⲆᐃ[184].id = 184;
    this.ᐃⲆᐃ[184].info.ⵠᐃ[2] = this.ᐃⲆᐃ[184].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[17] = Hw(60, 60, 0, ᐃΔ[877], 3);
    this.ᐃⲆᐃ[17].id = 17;
    this.ᐃⲆᐃ[63] = Hw(60, 60, 0, ᐃΔ[566], 3);
    this.ᐃⲆᐃ[63].id = 63;
    this.ᐃⲆᐃ[187] = Hw(60, 60, 0, ᐃΔ[253], 3);
    this.ᐃⲆᐃ[187].id = 187;
    this.ᐃⲆᐃ[187].info.ⵠᐃ[2] = this.ᐃⲆᐃ[187].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[186] = Hw(60, 60, 0, ᐃΔ[753], 3);
    this.ᐃⲆᐃ[186].id = 186;
    this.ᐃⲆᐃ[186].info.ⵠᐃ[2] = this.ᐃⲆᐃ[186].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[77] = Hw(60, 60, 0, ᐃΔ[756], 3);
    this.ᐃⲆᐃ[77].id = 77;
    this.ᐃⲆᐃ[175] = Hw(60, 60, 0, ᐃΔ[176], 3);
    this.ᐃⲆᐃ[175].id = 175;
    this.ᐃⲆᐃ[175].info.ⵠᐃ[2] = this.ᐃⲆᐃ[175].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[176] = Hw(60, 60, 0, ᐃΔ[177], 3);
    this.ᐃⲆᐃ[176].id = 176;
    this.ᐃⲆᐃ[176].info.ⵠᐃ[2] = this.ᐃⲆᐃ[176].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[78] = Hw(60, 60, 0, ᐃΔ[760], 3);
    this.ᐃⲆᐃ[78].id = 78;
    this.ᐃⲆᐃ[177] = Hw(60, 60, 0, ᐃΔ[175], 3);
    this.ᐃⲆᐃ[177].id = 177;
    this.ᐃⲆᐃ[177].info.ⵠᐃ[2] = this.ᐃⲆᐃ[177].info.ⵠᐃ[0];
    this.ᐃⲆᐃ[79] = Hw(60, 60, 0, ᐃΔ[764], 3);
    this.ᐃⲆᐃ[79].id = 79;
    this.ᐃⲆᐃ[83] = Hw(60, 60, 0, ᐃΔ[767], 3);
    this.ᐃⲆᐃ[83].id = 83;
    this.ᐃⲆᐃ[84] = Hw(60, 60, 0, ᐃΔ[771], 3);
    this.ᐃⲆᐃ[84].id = 84;
    this.ᐃⲆᐃ[178] = Hw(60, 60, 0, ᐃΔ[178], 3);
    this.ᐃⲆᐃ[178].id = 178;
    this.ᐃⲆᐃ[179] = Hw(60, 60, 0, ᐃΔ[179], 3);
    this.ᐃⲆᐃ[179].id = 179;
    this.ᐃⲆᐃ[86] = Hw(60, 60, 0, ᐃΔ[776], 3);
    this.ᐃⲆᐃ[86].id = 86;
    this.ᐃⲆᐃ[85] = Hw(60, 60, 0, ᐃΔ[779], 3);
    this.ᐃⲆᐃ[85].id = 85;
    this.ᐃⲆᐃ[180] = Hw(60, 60, 0, ᐃΔ[180], 3);
    this.ᐃⲆᐃ[180].id = 180;
    this.ᐃⲆᐃ[181] = Hw(60, 60, 0, ᐃΔ[181], 3);
    this.ᐃⲆᐃ[181].id = 181;
    this.ᐃⲆᐃ[182] = Hw(60, 60, 0, ᐃΔ[789], 3);
    this.ᐃⲆᐃ[182].id = 182;
    this.ᐃⲆᐃ[183] = Hw(60, 60, 0, ᐃΔ[800], 3);
    this.ᐃⲆᐃ[183].id = 183;
    this.ᐃⲆᐃ[188] = Hw(60, 60, 0, ᐃΔ[808], 3);
    this.ᐃⲆᐃ[188].id = 188;
    this.ᐃⲆᐃ[189] = Hw(60, 60, 0, ᐃΔ[814], 3);
    this.ᐃⲆᐃ[189].id = 189;
    this.ᐃⲆᐃ[191] = Hw(60, 60, 0, ᐃΔ[834], 3);
    this.ᐃⲆᐃ[191].id = 191;
    this.ᐃⲆᐃ[192] = Hw(60, 60, 0, ᐃΔ[840], 3);
    this.ᐃⲆᐃ[192].id = 192;
    this.ᐃⲆᐃ[190] = Hw(60, 60, 0, ᐃΔ[842], 3);
    this.ᐃⲆᐃ[190].id = 190;
    this.ᐃⲆᐃ[193] = Hw(60, 60, 0, ᐃΔ[845], 3);
    this.ᐃⲆᐃ[193].id = 193;
    this.ᐃⲆᐃ[194] = Hw(60, 60, 0, ᐃΔ[850], 3);
    this.ᐃⲆᐃ[194].id = 194;
    this.ᐃⲆᐃ[204] = Hw(60, 60, 0, ᐃΔ[949], 3);
    this.ᐃⲆᐃ[204].id = 204;
    this.ᐃⲆᐃ[205] = Hw(60, 60, 0, ᐃΔ[955], 3);
    this.ᐃⲆᐃ[205].id = 205;
    this.ᐃⲆᐃ[206] = Hw(60, 60, 0, ᐃΔ[959], 3);
    this.ᐃⲆᐃ[206].id = 206;
    this.ᐃⲆᐃ[207] = Hw(60, 60, 0, ᐃΔ[965], 3);
    this.ᐃⲆᐃ[207].id = 207;
    this.ᐃⲆᐃ[208] = Hw(60, 60, 0, ᐃΔ[966], 3);
    this.ᐃⲆᐃ[208].id = 208;
    this.ᐃⲆᐃ[209] = Hw(60, 60, 0, ᐃΔ[972], 3);
    this.ᐃⲆᐃ[209].id = 209;
    this.ᐃⲆᐃ[210] = Hw(60, 60, 0, ᐃΔ[981], 3);
    this.ᐃⲆᐃ[210].id = 210;
    this.ᐃⲆᐃ[211] = Hw(60, 60, 0, ᐃΔ[987], 3);
    this.ᐃⲆᐃ[211].id = 211;
    this.ᐃⲆᐃ[41] = Hw(60, 60, 0, ᐃΔ[880], 3);
    this.ᐃⲆᐃ[41].id = 41;
    this.ᐃⲆᐃ[42] = Hw(60, 60, 0, ᐃΔ[882], 3);
    this.ᐃⲆᐃ[42].id = 42;
    this.ᐃⲆᐃ[12] = Hw(60, 60, 0, ᐃΔ[401], 3);
    this.ᐃⲆᐃ[12].id = 12;
    this.ᐃⲆᐃ[16] = Hw(60, 60, 0, ᐃΔ[874], 3);
    this.ᐃⲆᐃ[16].id = 16;
    this.ᐃⲆᐃ[196] = Hw(60, 60, 0, ᐃΔ[196], 3);
    this.ᐃⲆᐃ[196].id = 196;
    this.ᐃⲆᐃ[18] = Hw(60, 60, 0, ᐃΔ[901], 3);
    this.ᐃⲆᐃ[18].id = 18;
    this.ᐃⲆᐃ[197] = Hw(60, 60, 0, ᐃΔ[197], 3);
    this.ᐃⲆᐃ[197].id = 197;
    this.ᐃⲆᐃ[198] = Hw(60, 60, 0, ᐃΔ[907], 3);
    this.ᐃⲆᐃ[198].id = 198;
    this.ᐃⲆᐃ[61] = Hw(60, 60, 0, ᐃΔ[910], 3);
    this.ᐃⲆᐃ[61].id = 61;
    this.ᐃⲆᐃ[201] = Hw(60, 60, 0, ᐃΔ[870], 3);
    this.ᐃⲆᐃ[201].id = 201;
    this.ᐃⲆᐃ[200] = Hw(60, 60, 0, ᐃΔ[200], 3);
    this.ᐃⲆᐃ[200].id = 200;
    this.ᐃⲆᐃ[199] = Hw(60, 60, 0, ᐃΔ[865], 3);
    this.ᐃⲆᐃ[199].id = 199;
    this.ᐃⵠΔ = [];
    this.ᐃⵠΔ[35] = Hw(60, 60, 0, ᐃΔ[254], 3);
    this.ᐃⵠΔ[35].id = 35;
    this.ᐃⵠΔ[5] = Hw(60, 60, 0, ᐃΔ[256], 3);
    this.ᐃⵠΔ[5].id = 5;
    this.ᐃⵠΔ[0] = Hw(60, 60, 0, ᐃΔ[302], 3);
    this.ᐃⵠΔ[0].id = 0;
    this.ᐃⵠΔ[3] = Hw(60, 60, 0, ᐃΔ[262], 3);
    this.ᐃⵠΔ[3].id = 3;
    this.ᐃⵠΔ[55] = Hw(60, 60, 0, ᐃΔ[318], 3);
    this.ᐃⵠΔ[55].id = 55;
    this.ᐃⵠΔ[67] = Hw(60, 60, 0, ᐃΔ[320], 3);
    this.ᐃⵠΔ[67].id = 67;
    this.ᐃⵠΔ[40] = Hw(60, 60, 0, ᐃΔ[284], 3);
    this.ᐃⵠΔ[40].id = 40;
    this.ᐃⵠΔ[6] = Hw(60, 60, 0, ᐃΔ[295], 3);
    this.ᐃⵠΔ[6].id = 6;
    this.ᐃⵠΔ[7] = Hw(60, 60, 0, ᐃΔ[257], 3);
    this.ᐃⵠΔ[7].id = 7;
    this.ᐃⵠΔ[36] = Hw(60, 60, 0, ᐃΔ[290], 3);
    this.ᐃⵠΔ[36].id = 36;
    this.ᐃⵠΔ[34] = Hw(60, 60, 0, ᐃΔ[830], 3);
    this.ᐃⵠΔ[34].id = 34;
    this.ᐃⵠΔ[37] = Hw(60, 60, 0, ᐃΔ[291], 3);
    this.ᐃⵠΔ[37].id = 37;
    this.ᐃⵠΔ[4] = Hw(60, 60, 0, ᐃΔ[314], 3);
    this.ᐃⵠΔ[4].id = 4;
    this.ᐃⵠΔ[49] = Hw(60, 60, 0, ᐃΔ[325], 3);
    this.ᐃⵠΔ[49].id = 49;
    this.ᐃⵠΔ[1] = Hw(60, 60, 0, ᐃΔ[327], 3);
    this.ᐃⵠΔ[1].id = 1;
    this.ᐃⵠΔ[54] = Hw(60, 60, 0, ᐃΔ[304], 3);
    this.ᐃⵠΔ[54].id = 54;
    this.ᐃⵠΔ[56] = Hw(60, 60, 0, ᐃΔ[263], 3);
    this.ᐃⵠΔ[56].id = 56;
    this.ᐃⵠΔ[57] = Hw(60, 60, 0, ᐃΔ[265], 3);
    this.ᐃⵠΔ[57].id = 57;
    this.ᐃⵠΔ[58] = Hw(60, 60, 0, ᐃΔ[332], 3);
    this.ᐃⵠΔ[58].id = 58;
    this.ᐃⵠΔ[61] = Hw(60, 60, 0, ᐃΔ[268], 3);
    this.ᐃⵠΔ[61].id = 61;
    this.ᐃⵠΔ[79] = Hw(60, 60, 0, ᐃΔ[338], 3);
    this.ᐃⵠΔ[79].id = 79;
    this.ᐃⵠΔ[68] = Hw(60, 60, 0, ᐃΔ[360], 3);
    this.ᐃⵠΔ[68].id = 68;
    this.ᐃⵠΔ[69] = Hw(60, 60, 0, ᐃΔ[363], 3);
    this.ᐃⵠΔ[69].id = 69;
    this.ᐃⵠΔ[70] = Hw(60, 60, 0, ᐃΔ[365], 3);
    this.ᐃⵠΔ[70].id = 70;
    this.ᐃⵠΔ[100] = Hw(60, 60, 0, ᐃΔ[367], 3);
    this.ᐃⵠΔ[100].id = 100;
    this.ᐃⵠΔ[83] = Hw(60, 60, 0, ᐃΔ[370], 3);
    this.ᐃⵠΔ[83].id = 83;
    this.ᐃⵠΔ[62] = Hw(60, 60, 0, ᐃΔ[371], 3);
    this.ᐃⵠΔ[62].id = 62;
    this.ᐃⵠΔ[63] = Hw(60, 60, 0, ᐃΔ[374], 3);
    this.ᐃⵠΔ[63].id = 63;
    this.ᐃⵠΔ[64] = Hw(60, 60, 0, ᐃΔ[377], 3);
    this.ᐃⵠΔ[64].id = 64;
    this.ᐃⵠΔ[83] = Hw(60, 60, 0, ᐃΔ[370], 3);
    this.ᐃⵠΔ[83].id = 83;
    this.ᐃⵠΔ[84] = Hw(60, 60, 0, ᐃΔ[380], 3);
    this.ᐃⵠΔ[84].id = 84;
    this.ᐃⵠΔ[25] = Hw(60, 60, 0, ᐃΔ[402], 3);
    this.ᐃⵠΔ[25].id = 25;
    this.ᐃⵠΔ[26] = Hw(60, 60, 0, ᐃΔ[396], 3);
    this.ᐃⵠΔ[26].id = 26;
    this.ᐃⵠΔ[27] = Hw(60, 60, 0, ᐃΔ[399], 3);
    this.ᐃⵠΔ[27].id = 27;
    this.ᐃⵠΔ[28] = Hw(60, 60, 0, ᐃΔ[405], 3);
    this.ᐃⵠΔ[28].id = 28;
    this.ᐃⵠΔ[31] = Hw(60, 60, 0, ᐃΔ[876], 3);
    this.ᐃⵠΔ[31].id = 31;
    this.ᐃⵠΔ[2] = Hw(60, 60, 0, ᐃΔ[409], 3);
    this.ᐃⵠΔ[2].id = 2;
    this.ᐃⵠΔ[80] = Hw(60, 60, 0, ᐃΔ[421], 3);
    this.ᐃⵠΔ[80].id = 80;
    this.ᐃⵠΔ[81] = Hw(60, 60, 0, ᐃΔ[424], 3);
    this.ᐃⵠΔ[81].id = 81;
    this.ᐃⵠΔ[vs.ⵠⲆᐃΔⵠ] = Hw(60, 60, 0, ᐃΔ[1228], 3);
    this.ᐃⵠΔ[vs.ⵠⲆᐃΔⵠ].id = vs.ⵠⲆᐃΔⵠ;
    this.ᐃⵠΔ[86] = Hw(60, 60, 0, ᐃΔ[1231], 3);
    this.ᐃⵠΔ[86].id = 86;
    this.ᐃⵠΔ[98] = Hw(60, 60, 0, ᐃΔ[1138], 3);
    this.ᐃⵠΔ[98].id = 98;
    this.ᐃⵠΔ[99] = Hw(60, 60, 0, ᐃΔ[1141], 3);
    this.ᐃⵠΔ[99].id = 99;
    this.ᐃⵠΔ[131] = Hw(60, 60, 0, ᐃΔ[570], 3);
    this.ᐃⵠΔ[131].id = 131;
    this.ᐃⵠΔ[132] = Hw(60, 60, 0, ᐃΔ[1168], 3);
    this.ᐃⵠΔ[132].id = 132;
    this.ᐃⵠΔ[145] = Hw(60, 60, 0, ᐃΔ[1238], 3);
    this.ᐃⵠΔ[145].id = 145;
    this.ᐃⵠΔ[133] = Hw(60, 60, 0, ᐃΔ[573], 3);
    this.ᐃⵠΔ[133].id = 133;
    this.ᐃⵠΔ[134] = Hw(60, 60, 0, ᐃΔ[1171], 3);
    this.ᐃⵠΔ[134].id = 134;
    this.ᐃⵠΔ[146] = Hw(60, 60, 0, ᐃΔ[1241], 3);
    this.ᐃⵠΔ[146].id = 146;
    this.ᐃⵠΔ[135] = Hw(60, 60, 0, ᐃΔ[576], 3);
    this.ᐃⵠΔ[135].id = 135;
    this.ᐃⵠΔ[136] = Hw(60, 60, 0, ᐃΔ[1174], 3);
    this.ᐃⵠΔ[136].id = 136;
    this.ᐃⵠΔ[147] = Hw(60, 60, 0, ᐃΔ[1244], 3);
    this.ᐃⵠΔ[147].id = 147;
    this.ᐃⵠΔ[137] = Hw(60, 60, 0, ᐃΔ[579], 3);
    this.ᐃⵠΔ[137].id = 137;
    this.ᐃⵠΔ[138] = Hw(60, 60, 0, ᐃΔ[1177], 3);
    this.ᐃⵠΔ[138].id = 138;
    this.ᐃⵠΔ[167] = Hw(60, 60, 0, ᐃΔ[1256], 3);
    this.ᐃⵠΔ[167].id = 167;
    this.ᐃⵠΔ[168] = Hw(60, 60, 0, ᐃΔ[1259], 3);
    this.ᐃⵠΔ[168].id = 168;
    this.ᐃⵠΔ[169] = Hw(60, 60, 0, ᐃΔ[1262], 3);
    this.ᐃⵠΔ[169].id = 169;
    this.ᐃⵠΔ[170] = Hw(60, 60, 0, ᐃΔ[1265], 3);
    this.ᐃⵠΔ[170].id = 170;
    this.ᐃⵠΔ[171] = Hw(60, 60, 0, ᐃΔ[1268], 3);
    this.ᐃⵠΔ[171].id = 171;
    this.ᐃⵠΔ[172] = Hw(60, 60, 0, ᐃΔ[1271], 3);
    this.ᐃⵠΔ[172].id = 172;
    this.ᐃⵠΔ[148] = Hw(60, 60, 0, ᐃΔ[1247], 3);
    this.ᐃⵠΔ[148].id = 148;
    this.ᐃⵠΔ[139] = Hw(60, 60, 0, ᐃΔ[582], 3);
    this.ᐃⵠΔ[139].id = 139;
    this.ᐃⵠΔ[140] = Hw(60, 60, 0, ᐃΔ[1180], 3);
    this.ᐃⵠΔ[140].id = 140;
    this.ᐃⵠΔ[149] = Hw(60, 60, 0, ᐃΔ[1250], 3);
    this.ᐃⵠΔ[149].id = 149;
    this.ᐃⵠΔ[141] = Hw(60, 60, 0, ᐃΔ[585], 3);
    this.ᐃⵠΔ[141].id = 141;
    this.ᐃⵠΔ[142] = Hw(60, 60, 0, ᐃΔ[1183], 3);
    this.ᐃⵠΔ[142].id = 142;
    this.ᐃⵠΔ[150] = Hw(60, 60, 0, ᐃΔ[1253], 3);
    this.ᐃⵠΔ[150].id = 150;
    this.ᐃⵠΔ[143] = Hw(60, 60, 0, ᐃΔ[588], 3);
    this.ᐃⵠΔ[143].id = 143;
    this.ᐃⵠΔ[144] = Hw(60, 60, 0, ᐃΔ[1186], 3);
    this.ᐃⵠΔ[144].id = 144;
    this.ᐃⵠΔ[87] = Hw(60, 60, 0, ᐃΔ[827], 3);
    this.ᐃⵠΔ[87].id = 87;
    this.ᐃⵠΔ[88] = Hw(60, 60, 0, ᐃΔ[430], 3);
    this.ᐃⵠΔ[88].id = 88;
    this.ᐃⵠΔ[89] = Hw(60, 60, 0, ᐃΔ[433], 3);
    this.ᐃⵠΔ[89].id = 89;
    this.ᐃⵠΔ[90] = Hw(60, 60, 0, ᐃΔ[436], 3);
    this.ᐃⵠΔ[90].id = 90;
    this.ᐃⵠΔ[24] = Hw(60, 60, 0, ᐃΔ[439], 3);
    this.ᐃⵠΔ[24].id = 24;
    this.ᐃⵠΔ[101] = Hw(60, 60, 0, ᐃΔ[442], 3);
    this.ᐃⵠΔ[101].id = 101;
    this.ᐃⵠΔ[100] = Hw(60, 60, 0, ᐃΔ[367], 3);
    this.ᐃⵠΔ[100].id = 100;
    this.ᐃⵠΔ[38] = Hw(60, 60, 0, ᐃΔ[456], 3);
    this.ᐃⵠΔ[38].id = 38;
    this.ᐃⵠΔ[vs.ΔⲆᐃⵠⲆ] = Hw(60, 60, 0, ᐃΔ[861], 3);
    this.ᐃⵠΔ[vs.ΔⲆᐃⵠⲆ].id = vs.ΔⲆᐃⵠⲆ;
    this.ᐃⵠΔ[8] = Hw(60, 60, 0, ᐃΔ[460], 3);
    this.ᐃⵠΔ[8].id = 8;
    this.ᐃⵠΔ[9] = Hw(60, 60, 0, ᐃΔ[1019], 3);
    this.ᐃⵠΔ[9].id = 9;
    this.ᐃⵠΔ[29] = Hw(60, 60, 0, ᐃΔ[473], 3);
    this.ᐃⵠΔ[29].id = 29;
    this.ᐃⵠΔ[10] = Hw(60, 60, 0, ᐃΔ[478], 3);
    this.ᐃⵠΔ[10].id = 10;
    this.ᐃⵠΔ[11] = Hw(60, 60, 0, ᐃΔ[481], 3);
    this.ᐃⵠΔ[11].id = 11;
    this.ᐃⵠΔ[12] = Hw(60, 60, 0, ᐃΔ[484], 3);
    this.ᐃⵠΔ[12].id = 12;
    this.ᐃⵠΔ[13] = Hw(60, 60, 0, ᐃΔ[487], 3);
    this.ᐃⵠΔ[13].id = 13;
    this.ᐃⵠΔ[14] = Hw(60, 60, 0, ᐃΔ[490], 3);
    this.ᐃⵠΔ[14].id = 14;
    this.ᐃⵠΔ[59] = Hw(60, 60, 0, ᐃΔ[493], 3);
    this.ᐃⵠΔ[59].id = 59;
    this.ᐃⵠΔ[71] = Hw(60, 60, 0, ᐃΔ[496], 3);
    this.ᐃⵠΔ[71].id = 71;
    this.ᐃⵠΔ[65] = Hw(60, 60, 0, ᐃΔ[498], 3);
    this.ᐃⵠΔ[65].id = 65;
    this.ᐃⵠΔ[85] = Hw(60, 60, 0, ᐃΔ[503], 3);
    this.ᐃⵠΔ[85].id = 85;
    this.ᐃⵠΔ[102] = Hw(60, 60, 0, ᐃΔ[515], 3);
    this.ᐃⵠΔ[102].id = 102;
    this.ᐃⵠΔ[103] = Hw(60, 60, 0, ᐃΔ[519], 3);
    this.ᐃⵠΔ[103].id = 103;
    this.ᐃⵠΔ[115] = Hw(60, 60, 0, ᐃΔ[530], 3);
    this.ᐃⵠΔ[115].id = 115;
    this.ᐃⵠΔ[104] = Hw(60, 60, 0, ᐃΔ[533], 3);
    this.ᐃⵠΔ[104].id = 104;
    this.ᐃⵠΔ[105] = Hw(60, 60, 0, ᐃΔ[555], 3);
    this.ᐃⵠΔ[105].id = 105;
    this.ᐃⵠΔ[91] = Hw(60, 60, 0, ᐃΔ[542], 3);
    this.ᐃⵠΔ[91].id = 91;
    this.ᐃⵠΔ[15] = Hw(60, 60, 0, ᐃΔ[551], 3);
    this.ᐃⵠΔ[15].id = 15;
    this.ᐃⵠΔ[106] = Hw(60, 60, 0, ᐃΔ[604], 3);
    this.ᐃⵠΔ[106].id = 106;
    this.ᐃⵠΔ[108] = Hw(60, 60, 0, ᐃΔ[1235], 3);
    this.ᐃⵠΔ[108].id = 108;
    this.ᐃⵠΔ[163] = Hw(60, 60, 0, ᐃΔ[1027], 3);
    this.ᐃⵠΔ[163].id = 163;
    this.ᐃⵠΔ[164] = Hw(60, 60, 0, ᐃΔ[1030], 3);
    this.ᐃⵠΔ[164].id = 164;
    this.ᐃⵠΔ[166] = Hw(60, 60, 0, ᐃΔ[1116], 3);
    this.ᐃⵠΔ[166].id = 166;
    this.ᐃⵠΔ[165] = Hw(60, 60, 0, ᐃΔ[1048], 3);
    this.ᐃⵠΔ[165].id = 165;
    this.ᐃⵠΔ[vs.ᐃΔⵠᐃᐃ] = Hw(60, 60, 0, ᐃΔ[1051], 3);
    this.ᐃⵠΔ[vs.ᐃΔⵠᐃᐃ].id = vs.ᐃΔⵠᐃᐃ;
    this.ᐃⵠΔ[vs.ⲆⵠᐃⵠⲆ] = Hw(60, 60, 0, ᐃΔ[1082], 3);
    this.ᐃⵠΔ[vs.ⲆⵠᐃⵠⲆ].id = vs.ⲆⵠᐃⵠⲆ;
    this.ᐃⵠΔ[vs.ⲆΔᐃΔⵠ] = Hw(60, 60, 0, ᐃΔ[1226], 3);
    this.ᐃⵠΔ[vs.ⲆΔᐃΔⵠ].id = vs.ⲆΔᐃΔⵠ;
    this.ᐃⵠΔ[vs.ⵠⵠᐃΔⵠ] = Hw(60, 60, 0, ᐃΔ[1191], 3);
    this.ᐃⵠΔ[vs.ⵠⵠᐃΔⵠ].id = vs.ⵠⵠᐃΔⵠ;
    this.ᐃⵠΔ[110] = Hw(60, 60, 0, ᐃΔ[611], 3);
    this.ᐃⵠΔ[110].id = 110;
    this.ᐃⵠΔ[111] = Hw(60, 60, 0, ᐃΔ[715], 3);
    this.ᐃⵠΔ[111].id = 111;
    this.ᐃⵠΔ[112] = Hw(60, 60, 0, ᐃΔ[715], 3);
    this.ᐃⵠΔ[112].id = 112;
    this.ᐃⵠΔ[113] = Hw(60, 60, 0, ᐃΔ[715], 3);
    this.ᐃⵠΔ[113].id = 113;
    this.ᐃⵠΔ[16] = Hw(60, 60, 0, ᐃΔ[618], 3);
    this.ᐃⵠΔ[16].id = 16;
    this.ᐃⵠΔ[17] = Hw(60, 60, 0, ᐃΔ[700], 3);
    this.ᐃⵠΔ[17].id = 17;
    this.ᐃⵠΔ[18] = Hw(60, 60, 0, ᐃΔ[704], 3);
    this.ᐃⵠΔ[18].id = 18;
    this.ᐃⵠΔ[19] = Hw(60, 60, 0, ᐃΔ[706], 3);
    this.ᐃⵠΔ[19].id = 19;
    this.ᐃⵠΔ[122] = Hw(60, 60, 0, ᐃΔ[711], 3);
    this.ᐃⵠΔ[122].id = 122;
    this.ᐃⵠΔ[20] = Hw(60, 60, 0, ᐃΔ[627], 3);
    this.ᐃⵠΔ[20].id = 20;
    this.ᐃⵠΔ[41] = Hw(60, 60, 0, ᐃΔ[632], 3);
    this.ᐃⵠΔ[41].id = 41;
    this.ᐃⵠΔ[52] = Hw(60, 60, 0, ᐃΔ[635], 3);
    this.ᐃⵠΔ[52].id = 52;
    this.ᐃⵠΔ[114] = Hw(60, 60, 0, ᐃΔ[643], 3);
    this.ᐃⵠΔ[114].id = 114;
    this.ᐃⵠΔ[94] = Hw(60, 60, 0, ᐃΔ[647], 3);
    this.ᐃⵠΔ[94].id = 94;
    this.ᐃⵠΔ[93] = Hw(60, 60, 0, ᐃΔ[650], 3);
    this.ᐃⵠΔ[93].id = 93;
    this.ᐃⵠΔ[21] = Hw(60, 60, 0, ᐃΔ[654], 3);
    this.ᐃⵠΔ[21].id = 21;
    this.ᐃⵠΔ[53] = Hw(60, 60, 0, ᐃΔ[660], 3);
    this.ᐃⵠΔ[53].id = 53;
    this.ᐃⵠΔ[51] = Hw(60, 60, 0, ᐃΔ[690], 3);
    this.ᐃⵠΔ[51].id = 51;
    this.ᐃⵠΔ[50] = Hw(60, 60, 0, ᐃΔ[666], 3);
    this.ᐃⵠΔ[50].id = 50;
    this.ᐃⵠΔ[109] = Hw(60, 60, 0, ᐃΔ[684], 3);
    this.ᐃⵠΔ[109].id = 109;
    this.ᐃⵠΔ[124] = Hw(60, 60, 0, ᐃΔ[718], 3);
    this.ᐃⵠΔ[124].id = 124;
    this.ᐃⵠΔ[125] = Hw(60, 60, 0, ᐃΔ[730], 3);
    this.ᐃⵠΔ[125].id = 125;
    this.ᐃⵠΔ[126] = Hw(60, 60, 0, ᐃΔ[734], 3);
    this.ᐃⵠΔ[126].id = 126;
    this.ᐃⵠΔ[129] = Hw(60, 60, 0, ᐃΔ[563], 3);
    this.ᐃⵠΔ[129].id = 129;
    this.ᐃⵠΔ[151] = Hw(60, 60, 0, ᐃΔ[758], 3);
    this.ᐃⵠΔ[151].id = 151;
    this.ᐃⵠΔ[152] = Hw(60, 60, 0, ᐃΔ[762], 3);
    this.ᐃⵠΔ[152].id = 152;
    this.ᐃⵠΔ[153] = Hw(60, 60, 0, ᐃΔ[770], 3);
    this.ᐃⵠΔ[153].id = 153;
    this.ᐃⵠΔ[154] = Hw(60, 60, 0, ᐃΔ[768], 3);
    this.ᐃⵠΔ[154].id = 154;
    this.ᐃⵠΔ[155] = Hw(60, 60, 0, ᐃΔ[772], 3);
    this.ᐃⵠΔ[155].id = 155;
    this.ᐃⵠΔ[157] = Hw(60, 60, 0, ᐃΔ[777], 3);
    this.ᐃⵠΔ[157].id = 157;
    this.ᐃⵠΔ[156] = Hw(60, 60, 0, ᐃΔ[780], 3);
    this.ᐃⵠΔ[156].id = 156;
    this.ᐃⵠΔ[158] = Hw(60, 60, 0, ᐃΔ[784], 3);
    this.ᐃⵠΔ[158].id = 158;
    this.ᐃⵠΔ[159] = Hw(60, 60, 0, ᐃΔ[785], 3);
    this.ᐃⵠΔ[159].id = 159;
    this.ᐃⵠΔ[160] = Hw(60, 60, 0, ᐃΔ[791], 3);
    this.ᐃⵠΔ[160].id = 160;
    this.ᐃⵠΔ[161] = Hw(60, 60, 0, ᐃΔ[799], 3);
    this.ᐃⵠΔ[161].id = 161;
    this.ᐃⵠΔ[42] = Hw(60, 60, 0, ᐃΔ[809], 3);
    this.ᐃⵠΔ[42].id = 42;
    this.ᐃⵠΔ[43] = Hw(60, 60, 0, ᐃΔ[835], 3);
    this.ᐃⵠΔ[43].id = 43;
    this.ᐃⵠΔ[107] = Hw(60, 60, 0, ᐃΔ[843], 3);
    this.ᐃⵠΔ[107].id = 107;
    this.ᐃⵠΔ[44] = Hw(60, 60, 0, ᐃΔ[846], 3);
    this.ᐃⵠΔ[44].id = 44;
    this.ᐃⵠΔ[46] = Hw(60, 60, 0, ᐃΔ[960], 3);
    this.ᐃⵠΔ[46].id = 46;
    this.ᐃⵠΔ[45] = Hw(60, 60, 0, ᐃΔ[950], 3);
    this.ᐃⵠΔ[45].id = 45;
    this.ᐃⵠΔ[47] = Hw(60, 60, 0, ᐃΔ[967], 3);
    this.ᐃⵠΔ[47].id = 47;
    this.ᐃⵠΔ[48] = Hw(60, 60, 0, ᐃΔ[982], 3);
    this.ᐃⵠΔ[48].id = 48;
    this.ᐃⵠΔ[25] = Hw(60, 60, 0, ᐃΔ[402], 3);
    this.ᐃⵠΔ[25].id = 25;
    this.ᐃⵠΔ[31] = Hw(60, 60, 0, ᐃΔ[876], 3);
    this.ᐃⵠΔ[31].id = 31;
    this.ᐃⵠΔ[33] = Hw(60, 60, 0, ᐃΔ[900], 3);
    this.ᐃⵠΔ[33].id = 33;
    this.ᐃⵠΔ[162] = Hw(60, 60, 0, ᐃΔ[909], 3);
    this.ᐃⵠΔ[162].id = 162;
    this.ᐃⵠΔ[128] = Hw(60, 60, 0, ᐃΔ[912], 3);
    this.ᐃⵠΔ[128].id = 128;
    this.Ⲇⵠᐃ[53] = Hw(68, 68, 0, ᐃΔ[976], 3);
    this.Ⲇⵠᐃ[53].id = 53;
    this.ᐃⲆᐃ[53] = Hw(60, 60, 0, ᐃΔ[975], 3);
    this.ᐃⲆᐃ[53].id = 53;
    this.ᐃⵠΔ[22] = Hw(60, 60, 0, ᐃΔ[977], 3);
    this.ᐃⵠΔ[22].id = 22;
    this.Ⲇⵠᐃ[54] = Hw(68, 68, 0, ᐃΔ[979], 3);
    this.Ⲇⵠᐃ[54].id = 54;
    this.ᐃⲆᐃ[54] = Hw(60, 60, 0, ᐃΔ[978], 3);
    this.ᐃⲆᐃ[54].id = 54;
    this.ᐃⵠΔ[23] = Hw(60, 60, 0, ᐃΔ[980], 3);
    this.ᐃⵠΔ[23].id = 23;
    this.Ⲇⵠᐃ[56] = Hw(68, 68, 0, ᐃΔ[713], 3);
    this.Ⲇⵠᐃ[56].id = 56;
    this.ᐃⲆᐃ[56] = Hw(60, 60, 0, ᐃΔ[712], 3);
    this.ᐃⲆᐃ[56].id = 56;
    this.ᐃⵠΔ[123] = Hw(60, 60, 0, ᐃΔ[714], 3);
    this.ᐃⵠΔ[123].id = 123;
    this.Ⲇⵠᐃ[82] = Hw(68, 68, 0, ᐃΔ[428], 3);
    this.Ⲇⵠᐃ[82].id = 82;
    this.ᐃⲆᐃ[82] = Hw(60, 60, 0, ᐃΔ[426], 3);
    this.ᐃⲆᐃ[82].id = 82;
    this.ᐃⵠΔ[82] = Hw(60, 60, 0, ᐃΔ[427], 3);
    this.ᐃⵠΔ[82].id = 82;
    this.Ⲇⵠᐃ[235] = Hw(68, 68, 0, ᐃΔ[1159], 3);
    this.Ⲇⵠᐃ[235].id = 235;
    this.ᐃⲆᐃ[235] = Hw(60, 60, 0, ᐃΔ[1158], 3);
    this.ᐃⲆᐃ[235].id = 235;
    this.Ⲇⵠᐃ[238] = Hw(68, 68, 0, ᐃΔ[1188], 3);
    this.Ⲇⵠᐃ[238].id = 238;
    this.ᐃⲆᐃ[238] = Hw(60, 60, 0, ᐃΔ[1187], 3);
    this.ᐃⲆᐃ[238].id = 238;
    this.Ⲇⵠᐃ[236] = Hw(68, 68, 0, ᐃΔ[1161], 3);
    this.Ⲇⵠᐃ[236].id = 236;
    this.ᐃⲆᐃ[236] = Hw(60, 60, 0, ᐃΔ[1160], 3);
    this.ᐃⲆᐃ[236].id = 236;
    this.Ⲇⵠᐃ[152] = Hw(68, 68, 0, ᐃΔ[1197], 3);
    this.Ⲇⵠᐃ[152].id = 152;
    this.ᐃⲆᐃ[152] = Hw(60, 60, 0, ᐃΔ[1195], 3);
    this.ᐃⲆᐃ[152].id = 152;
    this.ᐃⵠΔ[116] = Hw(60, 60, 0, ᐃΔ[1196], 3);
    this.ᐃⵠΔ[116].id = 116;
    this.Ⲇⵠᐃ[212] = Hw(68, 68, 0, ᐃΔ[992], 3);
    this.Ⲇⵠᐃ[212].id = 212;
    this.ᐃⲆᐃ[212] = Hw(60, 60, 0, ᐃΔ[991], 3);
    this.ᐃⲆᐃ[212].id = 212;
    this.ᐃⵠΔ[73] = Hw(60, 60, 0, ᐃΔ[990], 3);
    this.ᐃⵠΔ[73].id = 73;
    this.Ⲇⵠᐃ[213] = Hw(68, 68, 0, ᐃΔ[995], 3);
    this.Ⲇⵠᐃ[213].id = 213;
    this.ᐃⲆᐃ[213] = Hw(60, 60, 0, ᐃΔ[994], 3);
    this.ᐃⲆᐃ[213].id = 213;
    this.ᐃⵠΔ[74] = Hw(60, 60, 0, ᐃΔ[993], 3);
    this.ᐃⵠΔ[74].id = 74;
    this.Ⲇⵠᐃ[214] = Hw(68, 68, 0, ᐃΔ[998], 3);
    this.Ⲇⵠᐃ[214].id = 214;
    this.ᐃⲆᐃ[214] = Hw(60, 60, 0, ᐃΔ[997], 3);
    this.ᐃⲆᐃ[214].id = 214;
    this.ᐃⵠΔ[75] = Hw(60, 60, 0, ᐃΔ[996], 3);
    this.ᐃⵠΔ[75].id = 75;
    this.Ⲇⵠᐃ[215] = Hw(68, 68, 0, ᐃΔ[1001], 3);
    this.Ⲇⵠᐃ[215].id = 215;
    this.ᐃⲆᐃ[215] = Hw(60, 60, 0, ᐃΔ[1000], 3);
    this.ᐃⲆᐃ[215].id = 215;
    this.ᐃⵠΔ[76] = Hw(60, 60, 0, ᐃΔ[999], 3);
    this.ᐃⵠΔ[76].id = 76;
    this.Ⲇⵠᐃ[216] = Hw(68, 68, 0, ᐃΔ[1004], 3);
    this.Ⲇⵠᐃ[216].id = 216;
    this.ᐃⲆᐃ[216] = Hw(60, 60, 0, ᐃΔ[1003], 3);
    this.ᐃⲆᐃ[216].id = 216;
    this.ᐃⵠΔ[77] = Hw(60, 60, 0, ᐃΔ[1002], 3);
    this.ᐃⵠΔ[77].id = 77;
    this.Ⲇⵠᐃ[220] = Hw(68, 68, 0, ᐃΔ[1007], 3);
    this.Ⲇⵠᐃ[220].id = 220;
    this.ᐃⲆᐃ[220] = Hw(60, 60, 0, ᐃΔ[1006], 3);
    this.ᐃⲆᐃ[220].id = 220;
    this.ᐃⵠΔ[78] = Hw(60, 60, 0, ᐃΔ[1005], 3);
    this.ᐃⵠΔ[78].id = 78;
    this.Ⲇⵠᐃ[217] = Hw(68, 68, 0, ᐃΔ[1016], 3);
    this.Ⲇⵠᐃ[217].id = 217;
    this.ᐃⲆᐃ[217] = Hw(60, 60, 0, ᐃΔ[1015], 3);
    this.ᐃⲆᐃ[217].id = 217;
    this.ᐃⵠΔ[60] = Hw(60, 60, 0, ᐃΔ[1014], 3);
    this.ᐃⵠΔ[60].id = 60;
    this.Ⲇⵠᐃ[219] = Hw(68, 68, 0, ᐃΔ[1013], 3);
    this.Ⲇⵠᐃ[219].id = 219;
    this.ᐃⲆᐃ[219] = Hw(60, 60, 0, ᐃΔ[1012], 3);
    this.ᐃⲆᐃ[219].id = 219;
    this.ᐃⵠΔ[72] = Hw(60, 60, 0, ᐃΔ[1011], 3);
    this.ᐃⵠΔ[72].id = 72;
    this.Ⲇⵠᐃ[218] = Hw(68, 68, 0, ᐃΔ[1010], 3);
    this.Ⲇⵠᐃ[218].id = 218;
    this.ᐃⲆᐃ[218] = Hw(60, 60, 0, ᐃΔ[1009], 3);
    this.ᐃⲆᐃ[218].id = 218;
    this.ᐃⵠΔ[66] = Hw(60, 60, 0, ᐃΔ[1008], 3);
    this.ᐃⵠΔ[66].id = 66;
    this.Ⲇⵠᐃ[153] = Hw(68, 68, 0, ᐃΔ[1201], 3);
    this.Ⲇⵠᐃ[153].id = 153;
    this.ᐃⲆᐃ[153] = Hw(60, 60, 0, ᐃΔ[1199], 3);
    this.ᐃⲆᐃ[153].id = 153;
    this.ᐃⵠΔ[117] = Hw(60, 60, 0, ᐃΔ[1200], 3);
    this.ᐃⵠΔ[117].id = 117;
    this.Ⲇⵠᐃ[154] = Hw(68, 68, 0, ᐃΔ[1205], 3);
    this.Ⲇⵠᐃ[154].id = 154;
    this.ᐃⲆᐃ[154] = Hw(60, 60, 0, ᐃΔ[1203], 3);
    this.ᐃⲆᐃ[154].id = 154;
    this.ᐃⵠΔ[118] = Hw(60, 60, 0, ᐃΔ[1204], 3);
    this.ᐃⵠΔ[118].id = 118;
    this.Ⲇⵠᐃ[155] = Hw(68, 68, 0, ᐃΔ[1209], 3);
    this.Ⲇⵠᐃ[155].id = 155;
    this.ᐃⲆᐃ[155] = Hw(60, 60, 0, ᐃΔ[1207], 3);
    this.ᐃⲆᐃ[155].id = 155;
    this.ᐃⵠΔ[119] = Hw(60, 60, 0, ᐃΔ[1208], 3);
    this.ᐃⵠΔ[119].id = 119;
    this.Ⲇⵠᐃ[156] = Hw(68, 68, 0, ᐃΔ[1213], 3);
    this.Ⲇⵠᐃ[156].id = 156;
    this.ᐃⲆᐃ[156] = Hw(60, 60, 0, ᐃΔ[1211], 3);
    this.ᐃⲆᐃ[156].id = 156;
    this.ᐃⵠΔ[120] = Hw(60, 60, 0, ᐃΔ[1212], 3);
    this.ᐃⵠΔ[120].id = 120;
    this.Ⲇⵠᐃ[157] = Hw(68, 68, 0, ᐃΔ[1217], 3);
    this.Ⲇⵠᐃ[157].id = 157;
    this.ᐃⲆᐃ[157] = Hw(60, 60, 0, ᐃΔ[1215], 3);
    this.ᐃⲆᐃ[157].id = 157;
    this.ᐃⵠΔ[121] = Hw(60, 60, 0, ᐃΔ[1216], 3);
    this.ᐃⵠΔ[121].id = 121;
    this.Ⲇⵠᐃ[203] = Hw(68, 68, 0, ᐃΔ[937], 3);
    this.Ⲇⵠᐃ[203].id = 203;
    this.ᐃⲆᐃ[203] = Hw(60, 60, 0, ᐃΔ[936], 3);
    this.ᐃⲆᐃ[203].id = 203;
    this.ᐃⲆᐃ[203].info.ⵠᐃ[2] = this.ᐃⲆᐃ[203].info.ⵠᐃ[0];
    this.Ⲇⵠᐃ[150] = Hw(68, 68, 0, ᐃΔ[524], 3);
    this.Ⲇⵠᐃ[150].id = 150;
    this.ᐃⲆᐃ[150] = Hw(60, 60, 0, ᐃΔ[523], 3);
    this.ᐃⲆᐃ[150].id = 150;
    this.ᐃⲆᐃ[150].info.ⵠᐃ[2] = this.ᐃⲆᐃ[150].info.ⵠᐃ[0];
    this.Ⲇⵠᐃ[202] = Hw(68, 68, 0, ᐃΔ[939], 3);
    this.Ⲇⵠᐃ[202].id = 202;
    this.ᐃⲆᐃ[202] = Hw(60, 60, 0, ᐃΔ[938], 3);
    this.ᐃⲆᐃ[202].id = 202;
    this.ᐃⲆᐃ[202].info.ⵠᐃ[2] = this.ᐃⲆᐃ[202].info.ⵠᐃ[0];
    this.Ⲇⵠᐃ[19] = Hw(68, 68, 0, ᐃΔ[934], 3);
    this.Ⲇⵠᐃ[19].id = 19;
    this.ᐃⲆᐃ[19] = Hw(60, 60, 0, ᐃΔ[932], 3);
    this.ᐃⲆᐃ[19].id = 19;
    this.ᐃⵠΔ[39] = Hw(60, 60, 0, ᐃΔ[933], 3);
    this.ᐃⵠΔ[39].id = 39;
    this.Ⲇⵠᐃ[20] = Hw(68, 68, 0, ᐃΔ[923], 3);
    this.Ⲇⵠᐃ[20].id = 20;
    this.ᐃⲆᐃ[20] = Hw(60, 60, 0, ᐃΔ[921], 3);
    this.ᐃⲆᐃ[20].id = 20;
    this.ᐃⵠΔ[95] = Hw(60, 60, 0, ᐃΔ[922], 3);
    this.ᐃⵠΔ[95].id = 95;
    this.Ⲇⵠᐃ[21] = Hw(68, 68, 0, ᐃΔ[927], 3);
    this.Ⲇⵠᐃ[21].id = 21;
    this.ᐃⲆᐃ[21] = Hw(60, 60, 0, ᐃΔ[925], 3);
    this.ᐃⲆᐃ[21].id = 21;
    this.ᐃⵠΔ[96] = Hw(60, 60, 0, ᐃΔ[926], 3);
    this.ᐃⵠΔ[96].id = 96;
    this.Ⲇⵠᐃ[22] = Hw(68, 68, 0, ᐃΔ[931], 3);
    this.Ⲇⵠᐃ[22].id = 22;
    this.ᐃⲆᐃ[22] = Hw(60, 60, 0, ᐃΔ[929], 3);
    this.ᐃⲆᐃ[22].id = 22;
    this.ᐃⵠΔ[97] = Hw(60, 60, 0, ᐃΔ[930], 3);
    this.ᐃⵠΔ[97].id = 97;
    this.Ⲇⵠᐃ[60] = Hw(68, 68, 0, ᐃΔ[736], 3);
    this.Ⲇⵠᐃ[60].id = 60;
    this.ᐃⲆᐃ[60] = Hw(60, 60, 0, ᐃΔ[735], 3);
    this.ᐃⲆᐃ[60].id = 60;
    this.ᐃⵠΔ[127] = Hw(60, 60, 0, ᐃΔ[737], 3);
    this.ᐃⵠΔ[127].id = 127;
    this.Ⲇⵠᐃ[90] = Hw(68, 68, 0, ᐃΔ[739], 3);
    this.Ⲇⵠᐃ[90].id = 90;
    this.ᐃⲆᐃ[90] = Hw(60, 60, 0, ᐃΔ[738], 3);
    this.ᐃⲆᐃ[90].id = 90;
    this.ᐃⵠΔ[173] = Hw(60, 60, 0, ᐃΔ[740], 3);
    this.ᐃⵠΔ[173].id = 173;
    this.Ⲇⵠᐃ[92] = Hw(68, 68, 0, ᐃΔ[745], 3);
    this.Ⲇⵠᐃ[92].id = 92;
    this.ᐃⲆᐃ[92] = Hw(60, 60, 0, ᐃΔ[744], 3);
    this.ᐃⲆᐃ[92].id = 92;
    this.ᐃⵠΔ[174] = Hw(60, 60, 0, ᐃΔ[746], 3);
    this.ᐃⵠΔ[174].id = 174;
    this.Ⲇⵠᐃ[93] = Hw(68, 68, 0, ᐃΔ[748], 3);
    this.Ⲇⵠᐃ[93].id = 93;
    this.ᐃⲆᐃ[93] = Hw(60, 60, 0, ᐃΔ[747], 3);
    this.ᐃⲆᐃ[93].id = 93;
    this.ᐃⵠΔ[175] = Hw(60, 60, 0, ᐃΔ[749], 3);
    this.ᐃⵠΔ[175].id = 175;
    this.Ⲇⵠᐃ[91] = Hw(68, 68, 0, ᐃΔ[742], 3);
    this.Ⲇⵠᐃ[91].id = 91;
    this.ᐃⲆᐃ[91] = Hw(60, 60, 0, ᐃΔ[741], 3);
    this.ᐃⲆᐃ[91].id = 91;
    this.ᐃⵠΔ[176] = Hw(60, 60, 0, ᐃΔ[743], 3);
    this.ᐃⵠΔ[176].id = 176;
    this.Ⲇⵠᐃ[100] = Hw(68, 68, 0, ᐃΔ[1165], 3);
    this.Ⲇⵠᐃ[100].id = 100;
    this.ᐃⲆᐃ[100] = Hw(60, 60, 0, ᐃΔ[1164], 3);
    this.ᐃⲆᐃ[100].id = 100;
    this.ᐃⵠΔ[vs.ᐃⵠΔⲆⲆ] = Hw(60, 60, 0, ᐃΔ[ts.ⵠⲆΔΔⲆᐃⲆⲆᐃ], 3);
    this.ᐃⵠΔ[vs.ᐃⵠΔⲆⲆ].id = vs.ᐃⵠΔⲆⲆ;
    this.Ⲇⵠᐃ[34] = Hw(68, 68, 0, ᐃΔ[945], 3);
    this.Ⲇⵠᐃ[34].id = 34;
    this.ᐃⲆᐃ[34] = Hw(60, 60, 0, ᐃΔ[943], 3);
    this.ᐃⲆᐃ[34].id = 34;
    this.ᐃⵠΔ[30] = Hw(60, 60, 0, ᐃΔ[944], 3);
    this.ᐃⵠΔ[30].id = 30;
    this.Ⲇⵠᐃ[44] = Hw(68, 68, 0, ᐃΔ[948], 3);
    this.Ⲇⵠᐃ[44].id = 44;
    this.ᐃⲆᐃ[44] = Hw(60, 60, 0, ᐃΔ[946], 3);
    this.ᐃⲆᐃ[44].id = 44;
    this.ᐃⵠΔ[92] = Hw(60, 60, 0, ᐃΔ[947], 3);
    this.ᐃⵠΔ[92].id = 92;
    this.Ⲇⵠᐃ[17] = Hw(68, 68, 0, ᐃΔ[878], 3);
    this.Ⲇⵠᐃ[17].id = 17;
    this.ᐃⲆᐃ[17] = Hw(60, 60, 0, ᐃΔ[877], 3);
    this.ᐃⲆᐃ[17].id = 17;
    this.ᐃⵠΔ[32] = Hw(60, 60, 0, ᐃΔ[879], 3);
    this.ᐃⵠΔ[32].id = 32;
    this.Ⲇⵠᐃ[63] = Hw(68, 68, 0, ᐃΔ[568], 3);
    this.Ⲇⵠᐃ[63].id = 63;
    this.ᐃⲆᐃ[63] = Hw(60, 60, 0, ᐃΔ[566], 3);
    this.ᐃⲆᐃ[63].id = 63;
    this.ᐃⵠΔ[130] = Hw(60, 60, 0, ᐃΔ[567], 3);
    this.ᐃⵠΔ[130].id = 130;
    this.Ⲇⵠᐃ[187] = Hw(68, 68, 0, ᐃΔ[591], 3);
    this.Ⲇⵠᐃ[187].id = 187;
    this.ᐃⲆᐃ[187] = Hw(60, 60, 0, ᐃΔ[253], 3);
    this.ᐃⲆᐃ[187].id = 187;
    this.Ⲇⵠᐃ[ys.ⵠᐃⵠΔⲆΔⲆ] = Hw(68, 68, 0, ᐃΔ[ts.ΔⲆⲆⲆⵠΔⵠⵠᐃ], 3);
    this.Ⲇⵠᐃ[ys.ⵠᐃⵠΔⲆΔⲆ].id = ys.ⵠᐃⵠΔⲆΔⲆ;
    this.ᐃⲆᐃ[ys.ⵠᐃⵠΔⲆΔⲆ] = Hw(60, 60, 0, ᐃΔ[ts.ΔⲆⲆⲆⵠᐃⵠⲆᐃ], 3);
    this.ᐃⲆᐃ[ys.ⵠᐃⵠΔⲆΔⲆ].id = ys.ⵠᐃⵠΔⲆΔⲆ;
    this.Ⲇⵠᐃ[ys.ⵠⲆⵠᐃᐃΔⵠ] = Hw(68, 68, 0, ᐃΔ[ts.ⲆⵠⵠⵠⲆⲆΔⵠⲆ], 3);
    this.Ⲇⵠᐃ[ys.ⵠⲆⵠᐃᐃΔⵠ].id = ys.ⵠⲆⵠᐃᐃΔⵠ;
    this.ᐃⲆᐃ[ys.ⵠⲆⵠᐃᐃΔⵠ] = Hw(60, 60, 0, ᐃΔ[ts.ᐃⵠᐃᐃⲆᐃⵠᐃΔ], 3);
    this.ᐃⲆᐃ[ys.ⵠⲆⵠᐃᐃΔⵠ].id = ys.ⵠⲆⵠᐃᐃΔⵠ;
    this.Ⲇⵠᐃ[ys.ᐃΔᐃΔᐃⵠᐃ] = Hw(68, 68, 0, ᐃΔ[ts.ᐃⵠΔΔᐃⲆᐃΔⵠ], 3);
    this.Ⲇⵠᐃ[ys.ᐃΔᐃΔᐃⵠᐃ].id = ys.ᐃΔᐃΔᐃⵠᐃ;
    this.ᐃⲆᐃ[ys.ᐃΔᐃΔᐃⵠᐃ] = Hw(60, 60, 0, ᐃΔ[ts.ⵠᐃΔⵠⵠⵠⵠⵠⵠ], 3);
    this.ᐃⲆᐃ[ys.ᐃΔᐃΔᐃⵠᐃ].id = ys.ᐃΔᐃΔᐃⵠᐃ;
    this.Ⲇⵠᐃ[ys.ⵠⲆΔᐃΔⲆⲆ] = Hw(68, 68, 0, ᐃΔ[ts.ᐃⲆΔⵠⲆᐃᐃᐃⲆ], 3);
    this.Ⲇⵠᐃ[ys.ⵠⲆΔᐃΔⲆⲆ].id = ys.ⵠⲆΔᐃΔⲆⲆ;
    this.ᐃⲆᐃ[ys.ⵠⲆΔᐃΔⲆⲆ] = Hw(60, 60, 0, ᐃΔ[ts.ⵠᐃⵠᐃᐃⵠΔⲆⵠ], 3);
    this.ᐃⲆᐃ[ys.ⵠⲆΔᐃΔⲆⲆ].id = ys.ⵠⲆΔᐃΔⲆⲆ;
    this.Ⲇⵠᐃ[ys.ΔᐃΔⵠⲆⲆⵠ] = Hw(68, 68, 0, ᐃΔ[ts.ΔⵠⵠⵠⲆⵠΔᐃⲆ], 3);
    this.Ⲇⵠᐃ[ys.ΔᐃΔⵠⲆⲆⵠ].id = ys.ΔᐃΔⵠⲆⲆⵠ;
    this.ᐃⲆᐃ[ys.ΔᐃΔⵠⲆⲆⵠ] = Hw(60, 60, 0, ᐃΔ[ts.ᐃΔᐃⵠⵠⲆΔⵠⲆ], 3);
    this.ᐃⲆᐃ[ys.ΔᐃΔⵠⲆⲆⵠ].id = ys.ΔᐃΔⵠⲆⲆⵠ;
    this.ⲆⵠΔⲆⲆΔⲆ = function () {
      for (var a = lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ, b = 10, c = 10, d = 0; d < a.length; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ⵠΔⵠⵠⲆⵠⲆ = function () {
      var a = Math.floor((10 + this.Ⲇⵠᐃ[0].info.ⵠᐃ[0].width) * Math.floor((3 + lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ.length) / 4) + 35);
      for (var b = 0; b < this.Ⲇⵠᐃ.length; b++) {
        if (this.Ⲇⵠᐃ[b]) {
          this.Ⲇⵠᐃ[b].info.translate.x = a;
          this.Ⲇⵠᐃ[b].info.translate.y = 22;
        }
      }
      this.ⲆⲆΔⵠΔⲆⵠ.info.translate.x = a + 17;
      this.ⲆⲆΔⵠΔⲆⵠ.info.translate.y = 22 + ᐃΔ[339].height;
      this.ᐃΔΔΔⵠΔᐃ.info.translate.x = a + 17;
      this.ᐃΔΔΔⵠΔᐃ.info.translate.y = 30;
      this.ΔΔⵠⲆⵠΔΔ.info.translate.x = a + 17;
      this.ΔΔⵠⲆⵠΔΔ.info.translate.y = 22 + ᐃΔ[339].height;
    };
    this.ΔⵠⲆⲆᐃⵠⵠⲆⵠ = function () {
      var a = Math.floor((Bo - ᐃΔ[556][0].width) / 2);
      for (var b = 0; b < this.ᐃⵠⵠⵠᐃ.length; b++) {
        this.ᐃⵠⵠⵠᐃ[b].button.info.translate.x = a;
        this.ᐃⵠⵠⵠᐃ[b].button.info.translate.y = -13;
      }
    };
    this.ᐃⲆⵠⵠⵠᐃⲆ = function () {
      var a = 12 + Math.floor(Math.floor((3 + lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ.length) / 4) * (10 + this.ⲆⵠⲆᐃⵠᐃⵠ.info.ⵠᐃ[0].width) + 35);
      this.ⲆⵠⲆᐃⵠᐃⵠ.info.translate.x = a;
      this.ⲆⵠⲆᐃⵠᐃⵠ.info.translate.y = 33;
      this.ᐃᐃⲆΔⵠᐃⲆ.info.translate.x = this.ⲆⵠⲆᐃⵠᐃⵠ.info.translate.x;
      this.ᐃᐃⲆΔⵠᐃⲆ.info.translate.y = 137;
      this.ⵠⲆⵠⵠᐃⵠⵠ.info.translate.x = this.ⲆⵠⲆᐃⵠᐃⵠ.info.translate.x;
      this.ⵠⲆⵠⵠᐃⵠⵠ.info.translate.y = 240;
    };
    this.ⵠΔΔᐃΔⲆΔ = function () {
      var a = 12 + Math.floor((10 + this.ⵠΔⵠΔⵠⵠᐃ.info.ⵠᐃ[0].width) * Math.floor((3 + lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ.length) / 4) + 35);
      this.ⵠΔⵠΔⵠⵠᐃ.info.translate.x = a;
      this.ⵠΔⵠΔⵠⵠᐃ.info.translate.y = 36;
      a += 83;
      this.ᐃⲆⲆⵠⵠⵠΔ.info.translate.x = a;
      this.ᐃⲆⲆⵠⵠⵠΔ.info.translate.y = 36;
      this.ΔΔΔΔΔⲆΔ.info.translate.x = a;
      this.ΔΔΔΔΔⲆΔ.info.translate.y = 36;
      this.ⲆⲆΔⵠⵠⲆΔ.info.translate.x = a;
      this.ⲆⲆΔⵠⵠⲆΔ.info.translate.y = 36;
      this.ⲆΔⲆⵠⲆⲆⵠ.info.translate.x = a;
      this.ⲆΔⲆⵠⲆⲆⵠ.info.translate.y = 36;
      this.ΔΔᐃΔᐃΔⵠ.info.translate.x = a;
      this.ΔΔᐃΔᐃΔⵠ.info.translate.y = 36;
    };
    this.ⵠⵠᐃΔⵠⵠⵠ = function () {
      var a = 12 + Math.floor(Math.floor((3 + lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ.length) / 4) * (10 + this.ⲆΔⲆⵠⵠⵠΔ.info.ⵠᐃ[0].width) + 35);
      this.ⲆΔⲆⵠⵠⵠΔ.info.translate.x = a;
      this.ⲆΔⲆⵠⵠⵠΔ.info.translate.y = 36;
      a += 83;
      this.ᐃΔΔⵠᐃΔⲆ.info.translate.x = a;
      this.ᐃΔΔⵠᐃΔⲆ.info.translate.y = 36;
    };
    this.Ⲇᐃⵠⵠᐃⵠⵠ = function () {
      var a = Math.floor((10 + this.ⵠⵠᐃⵠᐃᐃⵠ.info.ⵠᐃ[0].width) * Math.floor((3 + lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ.length) / 4) + 35);
      this.ⵠⵠᐃⵠᐃᐃⵠ.info.translate.x = a;
      this.ⵠⵠᐃⵠᐃᐃⵠ.info.translate.y = 22;
    };
    this.ⵠᐃⵠΔᐃΔᐃ = function () {
      var a = lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ;
      if (a.length > 0) {
        var b = Math.floor((Bo - (a[0].info.width + 5) * lx.ᐃⵠⵠᐃ.max) / 2);
      }
      for (var c = 0; a.length > c; c++) {
        a[c].info.translate.x = b + (a[c].info.width + 5) * c;
        a[c].info.translate.y = cq - a[c].info.width - 10;
        this.ΔΔⵠⵠⲆ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ΔΔⵠⵠⲆ[a[c].id].info.translate.y = a[c].info.translate.y - this.ΔΔⵠⵠⲆ[a[c].id].info.ⵠᐃ[0].height - 6;
      }
    };
    var h;
    var o = 0;
    function p() {
      j.ΔⵠΔ();
      if (++o == 30) {
        j.ᐃⲆⲆⵠⵠⲆΔ();
        j.ΔⵠΔ();
        return;
      }
      Ph.setTimeout(p, 33);
    }
    this.ⲆᐃⲆⲆΔ = function (a) {
      if (lx.ⲆΔⲆᐃᐃ.open) {
        lx.ⲆΔⲆᐃᐃ.ⲆᐃⲆⲆΔ();
      }
      if (lx.ᐃΔⵠᐃΔ.open) {
        lx.ᐃΔⵠᐃΔ.ⲆᐃⲆⲆΔ();
      }
      document.getElementById("team_box").style.display = "none";
      j.ⲆⵠΔᐃᐃ.style.display = "none";
      j.ⲆⵠΔᐃᐃ.open = false;
      j.sign.style.display = "none";
      j.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      j.ᐃⵠΔⵠ.open = false;
      document.getElementById("option_in_game").style.display = "none";
      j.options.open = false;
      document.getElementById("sure_delete").style.display = "none";
      j.ⲆⲆⵠᐃ.open = xq;
      document.getElementById("cancel_sure_delete").style.display = "none";
      j.ⲆΔΔΔⲆ.open = vl;
      document.getElementById("chronoquest").style.display = "none";
      j.ⵠⲆᐃⵠ.open = Ea;
      h = a;
      j.ⵠΔⲆⵠΔⵠᐃ();
      j.ⵠΔ.style.cursor = j.ⵠⵠᐃⲆᐃᐃⲆ;
      px.ⲆᐃⲆⲆΔ();
      q = -1;
      t();
      wx();
    };
    var q = -1;
    function t() {
      j.ΔⵠΔ();
      if (++q == 30) {
        j.stop();
        h();
        return;
      }
      Ph.setTimeout(t, 33);
    }
    this.ⲆᐃΔᐃⲆ = $n;
    this.stop = function () {
      this.ⲆᐃΔᐃⲆ = F;
    };
    this.ⲆΔⵠΔᐃ = function () {
      nx.ΔΔᐃⲆᐃᐃⲆᐃⵠ();
      j.ⲆᐃΔᐃⲆ = Hh;
      q = -1;
      o = 0;
      p();
    };
    this.ΔⵠΔ = function () {
      this.ᐃⲆΔⲆ.translate.x = Bo - this.ᐃⲆΔⲆ.ⵠᐃ.width - 10;
      this.ᐃⲆΔⲆ.translate.y = 5;
      kx.ⲆⲆΔΔⲆ.translate.x = this.ᐃⲆΔⲆ.translate.x - ᐃΔ[725][0].width - 85;
      kx.ⲆⲆΔΔⲆ.translate.y = 10;
      this.ᐃⵠΔⵠ.button.info.translate.x = this.ᐃⲆΔⲆ.translate.x - ᐃΔ[708][0].width - 10;
      this.ᐃⵠΔⵠ.button.info.translate.y = 10;
      this.ⵠⲆᐃⵠ.button.info.translate.x = this.ᐃⲆΔⲆ.translate.x - ᐃΔ[755][0].width - 20;
      this.ⵠⲆᐃⵠ.button.info.translate.y = this.ᐃⵠΔⵠ.button.info.translate.y + ᐃΔ[708][0].height + 5;
      this.options.button.info.translate.x = this.ᐃⲆΔⲆ.translate.x - ᐃΔ[727][0].width - 20;
      this.options.button.info.translate.y = this.ⵠⲆᐃⵠ.button.info.translate.y + ᐃΔ[727][0].height + 18;
      this.ⵠⵠᐃΔ.ᐃⵠΔⵠᐃᐃⲆ.info.translate.x = this.ᐃⲆΔⲆ.translate.x - ᐃΔ[727][0].width - 20;
      this.ⵠⵠᐃΔ.ᐃⵠΔⵠᐃᐃⲆ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
      this.ⵠⵠᐃΔ.ᐃΔΔᐃΔᐃΔ.info.translate.x = this.ᐃⲆΔⲆ.translate.x - ᐃΔ[727][0].width - 20;
      this.ⵠⵠᐃΔ.ᐃΔΔᐃΔᐃΔ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
      this.ⲆⵠΔᐃᐃ.button.info.translate.x = this.ᐃⲆΔⲆ.translate.x - ᐃΔ[795][0].width - 20;
      this.ⲆⵠΔᐃᐃ.button.info.translate.y = this.ⵠⵠᐃΔ.ᐃⵠΔⵠᐃᐃⲆ.info.translate.y + ᐃΔ[795][0].height;
      lx.ⲆⲆΔᐃᐃ.translate.x = this.ᐃⲆΔⲆ.translate.x - 63 - 85;
      lx.ⲆⲆΔᐃᐃ.translate.y = 100;
      lx.ΔⵠᐃᐃⲆ.translate.x = this.ᐃⲆΔⲆ.translate.x - ᐃΔ[517].width - 85;
      lx.ΔⵠᐃᐃⲆ.translate.y = lx.ⲆⲆΔᐃᐃ.translate.y + 10 + ᐃΔ[546].height;
      this.ᐃΔⵠⲆⲆ.translate.y = cq - 3 - 193;
      this.ᐃΔⵠⲆⲆ.translate.x = Bo - 3 - 193;
      this.ΔᐃᐃⲆ.translate.x = 5;
      this.ΔᐃᐃⲆ.translate.y = cq - this.ΔᐃᐃⲆ.ⵠᐃ.height - 5;
      this.ⵠⲆΔⵠⲆ.button.info.translate.x = dq - 91 / 2;
      this.ⵠⲆΔⵠⲆ.button.info.translate.y = 50;
      this.ⲆⵠΔⲆⲆΔⲆ();
      this.ⵠᐃⵠΔᐃΔᐃ();
      this.ⵠΔⵠⵠⲆⵠⲆ();
      this.Ⲇᐃⵠⵠᐃⵠⵠ();
      this.ⵠⵠᐃΔⵠⵠⵠ();
      this.ⵠΔΔᐃΔⲆΔ();
      this.ᐃⲆⵠⵠⵠᐃⲆ();
      this.ΔⵠⲆⲆᐃⵠⵠⲆⵠ();
      this.sign.ⲆⵠⵠⲆⵠΔⵠ();
      Cp();
      lx.ⲆΔⲆᐃᐃ.ΔⵠΔ();
      lx.ᐃΔⵠᐃΔ.ΔⵠΔ();
      this.ΔⵠᐃΔᐃΔⲆⲆⵠ.ΔⵠΔ();
      this.ᐃⵠΔⵠ.ⲆᐃᐃΔΔⲆⲆ.ΔⵠΔ();
      this.ᐃⵠΔⵠ.list.ΔⵠΔ();
      this.ⲆⲆⵠᐃ.ΔⵠΔ();
      this.ⲆΔΔΔⲆ.ΔⵠΔ();
      this.ⵠⲆᐃⵠ.ΔⵠΔ();
      this.ⵠⲆΔⵠⲆ.ΔⵠΔ();
      this.options.ΔⵠΔ();
      this.ⲆⵠΔᐃᐃ.ΔⵠΔ();
      this.sign.ΔⵠΔ();
      var a = 0;
      if (o != 30) {
        a = 1500 / (o + 1) - 50;
      }
      if (q != -1) {
        a = -(1500 / (30 - q + 1) - 48);
      }
      this.ⵠⲆΔⵠⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⲆΔⲆ.translate.y -= a > 0 ? a : -a;
      lx.ⲆⲆΔᐃᐃ.translate.y -= a > 0 ? a : -a;
      lx.ΔⵠᐃᐃⲆ.translate.y -= a > 0 ? a : -a;
      this.ᐃⵠΔⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠⲆᐃⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ⲆⵠΔᐃᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠⵠᐃΔ.ᐃⵠΔⵠᐃᐃⲆ.info.translate.y -= a > 0 ? a : -a;
      this.ⵠⵠᐃΔ.ᐃΔΔᐃΔᐃΔ.info.translate.y -= a > 0 ? a : -a;
      kx.ⲆⲆΔΔⲆ.translate.y -= a > 0 ? a : -a;
      this.ΔᐃᐃⲆ.translate.y -= a < 0 ? a : -a;
      this.ᐃΔⵠⲆⲆ.translate.y -= a < 0 ? a : -a;
    };
    this.ⲆᐃⲆⵠⵠΔΔⲆΔ = function () {
      if (!lx.ΔᐃⵠⲆⵠ.enabled && this.ᐃⲆᐃΔⲆᐃΔ && !lx.ᐃᐃⲆⵠⲆ) {
        Hp();
      }
      Wp();
      (function () {
        var a = kx.ⵠⵠΔ[0];
        if (kx.mode === 0 || kx.mode === 7 || kx.mode === 2 || kx.mode === 4 || kx.mode === 5 || kx.mode === 6 || kx.mode === 3) {
          for (var b = 0; a.length > b; b++) {
            a[b].ⵠⲆΔΔΔΔⵠ();
          }
        } else if (kx.mode === 1) {
          for (b = 0; b < a.length; b++) {
            if (lx.ᐃΔⲆᐃᐃⲆⲆ || lx.ΔⵠᐃᐃⲆ.enabled || a[b].ᐃΔⲆᐃ.ᐃᐃⵠⲆΔ !== "spectator") {
              a[b].ⵠⲆΔΔΔΔⵠ();
            }
          }
        }
      })();
      if (this.ᐃⲆᐃΔⲆᐃΔ) {
        vp();
        if (this.ᐃⲆᐃᐃᐃⲆⲆ === 1) {
          this.ᐃⵠΔⵠ.button.ΔᐃⲆΔ(f);
        }
        if (kx.mode !== 2 && kx.mode !== 4 && kx.mode !== 5 && this.ⲆⲆⲆΔΔⲆⵠ === 1) {
          this.ⵠⲆᐃⵠ.button.ΔᐃⲆΔ(f);
        }
        this.options.button.ΔᐃⲆΔ(f);
        if (this.ΔⲆᐃⲆⲆⵠᐃ === 1) {
          this.ⲆⵠΔᐃᐃ.button.ΔᐃⲆΔ(f);
        }
        if (px.ⲆΔⵠΔᐃ) {
          this.ⵠⵠᐃΔ.ᐃⵠΔⵠᐃᐃⲆ.ΔᐃⲆΔ(f);
        } else {
          this.ⵠⵠᐃΔ.ᐃΔΔᐃΔᐃΔ.ΔᐃⲆΔ(f);
        }
        Qp();
        Yp();
        this.ΔᐃᐃⲆ.ΔᐃⲆΔ();
        Lp();
        Ip();
        Jp();
        Bp();
        Rp();
        pp();
        cp();
        (function () {
          if (!lx.Ⲇⵠⵠᐃ.open && !lx.ΔⵠΔⲆΔ.open && !lx.ᐃⵠⵠΔ.open && !lx.ΔⲆᐃⲆ.open && !lx.ⲆΔⲆΔ.open) {
            lx.ᐃⵠᐃᐃⲆ.open = false;
            var a = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
            var b = 100;
            if (a) {
              for (var c = 0; c < kx.ⵠⵠΔ[35].length; c++) {
                var d = kx.ⵠⵠΔ[35][c];
                var e = ΔΔⲆ.ⵠΔⲆⲆ(d, a);
                if (b > e) {
                  b = e;
                  lx.ᐃⵠᐃᐃⲆ.open = Ns;
                  lx.ᐃⵠᐃᐃⲆ.ⵠⵠⲆᐃ = d.ⵠⵠⲆᐃ;
                  lx.ᐃⵠᐃᐃⲆ.ⵠΔⵠΔⲆ = d.id;
                }
              }
            }
          }
        })();
        mp();
        Tp();
        fp();
        up();
        Cp();
        lp();
      }
      if (lx.ΔᐃⵠⲆⵠ.enabled) {
        bp();
      }
      wp();
      if (this.ᐃⲆᐃΔⲆᐃΔ && this.ΔⲆⵠⵠⲆΔΔ === 1) {
        jp();
      }
      lx.ⲆⵠΔΔⲆΔΔ.ΔᐃⲆΔ();
      lx.alert.ΔᐃⲆΔ("#FFF", "#000");
      if (this.ᐃⲆᐃΔⲆᐃΔ) {
        lx.ΔᐃⵠⲆⵠ.ΔᐃⲆΔ();
        lx.ⵠⲆΔⵠⲆ.ΔᐃⲆΔ();
        lx.ᐃⵠⵠᐃ.ⲆⲆΔΔΔⲆⵠ.ΔᐃⲆΔ(rx.Δⵠᐃᐃ.x, rx.Δⵠᐃᐃ.y);
      }
      dp();
    };
    this.ΔᐃᐃⵠⲆⲆᐃⲆᐃ = function () {
      lx.ⲆΔᐃ.ΔⵠΔ();
      lx.ΔᐃᐃⲆ.ΔⵠΔ();
      if (!lx.reconnect.enabled && lx.ⲆΔΔΔᐃ) {
        lx.control.ΔⵠΔ();
        //lx.ⲆⲆΔᐃᐃ.ΔⵠΔ();
      }
      kx.ΔⵠΔ();
      this.ⵠⲆᐃⵠ.ΔΔⵠⲆᐃᐃⵠΔⲆ();
    };
    this.ⲆⵠⵠᐃΔᐃΔᐃᐃ = function () {
      dw();
    };
    this.ⵠⲆⲆᐃΔᐃⵠΔᐃ = function () {
      nx.ⲆᐃⵠⵠⵠⲆⲆⲆⲆ();
      nx.ΔⲆᐃᐃⲆᐃⵠΔⲆ();
      nx.ⲆⲆⲆΔⵠᐃΔᐃⲆ();
      nx.ΔⵠⲆᐃΔⲆⵠᐃⵠ();
    };
    this.ΔᐃⲆΔ = function () {
      if (!lx.reconnect.enabled && lx.ⲆΔΔΔᐃ) {
        this.ⵠⲆⲆᐃΔᐃⵠΔᐃ();
      }
      px.ᐃⵠᐃⲆᐃᐃⵠⲆⵠ();
      this.ΔᐃᐃⵠⲆⲆᐃⲆᐃ();
      if (jx.ᐃᐃᐃⲆᐃⲆᐃ !== 1) {
        this.ⲆⵠⵠᐃΔᐃΔᐃᐃ();
        this.ⲆᐃⲆⵠⵠΔΔⲆΔ();
      } else {
        var a = ΔΔ.ΔⵠⲆᐃⵠⲆᐃ;
        zp(f, a, dq - a.width / 4, eq - a.height / 4, a.width / 2, a.height / 2);
      }
    };
    this.ᐃᐃΔⵠⲆⲆⵠ = function (a) {
      if (lx.ⲆΔⲆᐃᐃ.open && a.keyCode === 27) {
        lx.ⲆΔⲆᐃᐃ.ⲆᐃⲆⲆΔ();
      } else if (lx.ᐃΔⵠᐃΔ.open && a.keyCode === 27) {
        lx.ᐃΔⵠᐃΔ.ⲆᐃⲆⲆΔ();
      } else if (lx.ⲆΔⲆᐃᐃ.open || lx.ᐃΔⵠᐃΔ.open || a.keyCode != 79 || q != -1) {
        if (a.keyCode == 13 && q == -1) {
          if (lx.ᐃΔⵠᐃΔ.open) {
            lx.ᐃΔⵠᐃΔ.ᐃⲆᐃᐃΔΔᐃ();
          } else {
            lx.ⲆΔⲆᐃᐃ.ⲆΔⵠΔᐃ();
          }
        } else if (!lx.ⲆΔⲆᐃᐃ.open && !lx.ᐃΔⵠᐃΔ.open) {
          if (a.keyCode === 82) {
            lx.ⲆⲆΔᐃᐃ.ΔⲆⲆᐃᐃᐃⲆ();
          } else if (a.keyCode !== 80 || kx.mode !== 1 || lx.ᐃΔⲆᐃᐃⲆⲆ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (lx.ⲆᐃΔΔ.id < 0) {
                var b = a.keyCode - 49;
                var c = lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ[b];
                if (c) {
                  nx.ⵠΔⵠᐃΔ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              lx.ⵠⲆⵠᐃΔΔᐃ = !lx.ⵠⲆⵠᐃΔΔᐃ;
            } else if (a.keyCode == 71) {
              lx.ⲆᐃΔΔ.ⲆⲆΔᐃᐃΔⲆⵠᐃ();
            }
          } else {
            lx.ΔⵠᐃᐃⲆ.ΔⲆⲆᐃᐃᐃⲆ();
          }
        }
      } else {
        lx.ᐃΔⵠᐃΔ.ᐃΔᐃᐃᐃᐃⵠⲆⵠ();
      }
      qx.up(a);
    };
    this.ⵠΔᐃΔᐃⵠⲆ = function (a) {
      qx.down(a);
      if (a.keyCode == 8 && !lx.ⲆΔⲆᐃᐃ.open && !lx.ᐃΔⵠᐃΔ.open) {
        a.preventDefault();
      }
    };
    this.ᐃⵠΔⲆΔΔⲆ = function (b) {
      rx.Δⵠᐃᐃ = Gw(j.ⵠΔ, b);
      var c = hj;
      if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0) {
        j.ᐃΔⵠⲆⲆ.focus(rx.Δⵠᐃᐃ);
      }
      var d = lx.Ⲇⵠⵠᐃ;
      if (lx.ⲆᐃΔΔ.id < 0 && d.id >= 0 && (!lx.Ⲇⵠⵠᐃ.lock || lx.Ⲇⵠⵠᐃ.ⵠⵠⲆᐃ === lx.id)) {
        c |= j.Ⲇⵠᐃ[lx.Ⲇⵠⵠᐃ.id].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      var e = lx.ᐃⵠⵠΔ;
      if (e.open && e.Δᐃᐃⵠⵠ > 0) {
        c |= j.ᐃΔΔⵠᐃΔⲆ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      var f = lx.ⲆΔⲆΔ;
      if (f.open && f.ⵠΔᐃⵠⲆᐃᐃ > 0) {
        c |= j.ᐃⲆⲆⵠⵠⵠΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
        c |= j.ΔΔΔΔΔⲆΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
        c |= j.ⲆⲆΔⵠⵠⲆΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
        c |= j.ⲆΔⲆⵠⲆⲆⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
        c |= j.ΔΔᐃΔᐃΔⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      var a = lx.ΔⲆᐃⲆ;
      if (a.open && a.ⵠΔΔⵠΔⵠΔ > 0) {
        c |= j.ⵠⲆⵠⵠᐃⵠⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      if (lx.sign.open) {
        c |= j.sign.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      if (!lx.Ⲇⵠⵠᐃ.lock) {
        if (lx.Ⲇⵠⵠᐃ.ⵠᐃⵠⵠⲆⲆⲆ) {
          c |= j.ΔΔⵠⲆⵠΔΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
        }
      }
      if (lx.Ⲇⵠⵠᐃ.ᐃⵠⵠᐃᐃⲆⲆ) {
        c |= j.ⲆⲆΔⵠΔⲆⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      if (lx.ⲆᐃΔΔ.id < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.options.open && !j.ⲆⵠΔᐃᐃ.open) {
        for (var k = lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ, m = 0; k.length > m; m++) {
          var n = k[m].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
          c |= n;
          if (n) {
            lx.ᐃⵠⵠᐃ.ⲆⲆΔΔΔⲆⵠ.start(m, rx.Δⵠᐃᐃ);
          }
          if (d.open && (d.id < 0 || d.id == k[m].id) || lx.ΔⵠΔⲆΔ.open && k[m].id === 109 || lx.ᐃⵠᐃᐃⲆ.open && k[m].id === 180 || lx.ΔⲆᐃⲆ.open && (k[m].id === 109 || k[m].id === 131) || lx.ᐃⵠⵠΔ.open && k[m].id === 134 || lx.ⲆΔⲆΔ.open && k[m].id === 109) {
            c |= j.ΔΔⵠⵠⲆ[k[m].id].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
          }
        }
      }
      if (lx.ⵠΔΔⲆΔ.open) {
        c |= j.ⵠΔΔⲆΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      if (j.ⵠⲆⵠᐃⲆ != -1) {
        if (c |= j.ᐃⵠⵠⵠᐃ[j.ⵠⲆⵠᐃⲆ].button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw)) {
          var o = ni;
        }
      } else {
        o = Pr;
      }
      if (lx.ⲆᐃΔΔ.id < 0 && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !o && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.options.open && !j.ⲆΔΔΔⲆ.open && !j.ⲆⵠΔᐃᐃ.open && !lx.ᐃᐃⲆⵠⲆ) {
        k = lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ;
        m = 0;
        for (; m < k.length; m++) {
          c |= k[m].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
        }
      }
      if (lx.ⲆᐃΔΔ.id < 0 && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !!lx.ⵠⲆΔⵠⲆ.open && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.options.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.ⲆⵠΔᐃᐃ.open) {
        c |= j.ⵠⲆΔⵠⲆ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ⲆⲆⵠᐃ.open && !j.options.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.ⲆⵠΔᐃᐃ.open) {
        c |= j.ᐃⵠΔⵠ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.ⲆⵠΔᐃᐃ.open) {
        c |= j.options.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.options.open) {
        c |= j.ⲆⵠΔᐃᐃ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.options.open && !j.ⲆⵠΔᐃᐃ.open) {
        if (px.ⲆΔⵠΔᐃ) {
          c |= j.ⵠⵠᐃΔ.ᐃⵠΔⵠᐃᐃⲆ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
        } else {
          c |= j.ⵠⵠᐃΔ.ᐃΔΔᐃΔᐃΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
        }
      }
      if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⵠΔᐃᐃ.open && !j.ⲆⲆⵠᐃ.open && !j.options.open && !j.ⲆΔΔΔⲆ.open && kx.mode !== 2 && kx.mode !== 4 && kx.mode !== 5) {
        c |= j.ⵠⲆᐃⵠ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Aw);
      }
      if (!c && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.options.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.ⲆⵠΔᐃᐃ.open && !j.sign.open) {
        if (lx.ⲆᐃΔΔ.ΔⲆΔΔ >= 0) {
          nx.ⵠⵠⵠᐃⲆᐃⲆⵠΔ();
        } else if (!o) {
          rx.down();
        }
      }
    };
    this.ⲆᐃⲆⲆⲆⲆⵠ = function (b) {
      rx.Δⵠᐃᐃ = Gw(j.ⵠΔ, b);
      rx.up();
      if (!lx.ᐃⵠⵠᐃ.ⲆⲆΔΔΔⲆⵠ.release()) {
        var c = lx.Ⲇⵠⵠᐃ;
        var d = lx.ΔⵠΔⲆΔ;
        var e = lx.ᐃⵠᐃᐃⲆ;
        var f = lx.ᐃⵠⵠΔ;
        var i = lx.ⲆΔⲆΔ;
        var k = lx.ΔⲆᐃⲆ;
        if (lx.control.attack) {
          lx.control.attack = 0;
          nx.ΔᐃⲆⵠⵠⵠΔΔᐃ();
        }
        if (j.ⵠⲆⵠᐃⲆ != -1) {
          var m = j.ᐃⵠⵠⵠᐃ[j.ⵠⲆⵠᐃⲆ].button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            j.ᐃⵠⵠⵠᐃ[j.ⵠⲆⵠᐃⲆ].action();
          }
        }
        if (lx.ⲆᐃΔΔ.id < 0 && c.id >= 0 && !j.ⲆⲆⵠᐃ.open) {
          if (!lx.Ⲇⵠⵠᐃ.lock || lx.Ⲇⵠⵠᐃ.ⵠⵠⲆᐃ === lx.id) {
            if (m = j.Ⲇⵠᐃ[lx.Ⲇⵠⵠᐃ.id].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
              nx.ⲆᐃⲆⵠΔΔⲆᐃⲆ(c);
            }
          }
        }
        if ((f = lx.ᐃⵠⵠΔ).open && f.Δᐃᐃⵠⵠ > 0 && !j.ⲆⲆⵠᐃ.open) {
          if (m = j.ᐃΔΔⵠᐃΔⲆ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
            nx.ΔⲆⵠⲆΔΔⵠᐃΔ(f);
          }
        }
        if ((i = lx.ⲆΔⲆΔ).open && i.ⵠΔᐃⵠⲆᐃᐃ > 0 && !j.ⲆⲆⵠᐃ.open) {
          switch (i.type) {
            case 24:
              if (m = j.ᐃⲆⲆⵠⵠⵠΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
                nx.ⵠΔⲆⵠⵠᐃΔ(i);
              }
              break;
            case 25:
              if (m = j.ΔΔΔΔΔⲆΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
                nx.ⵠΔⲆⵠⵠᐃΔ(i);
              }
              break;
            case 26:
              if (m = j.ⲆⲆΔⵠⵠⲆΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
                nx.ⵠΔⲆⵠⵠᐃΔ(i);
              }
              break;
            case 27:
              if (m = j.ⲆΔⲆⵠⲆⲆⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
                nx.ⵠΔⲆⵠⵠᐃΔ(i);
              }
              break;
            case 28:
              if (m = j.ΔΔᐃΔᐃΔⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
                nx.ⵠΔⲆⵠⵠᐃΔ(i);
              }
          }
        }
        if ((k = lx.ΔⲆᐃⲆ).open && k.ⵠΔΔⵠΔⵠΔ > 0 && !j.ⲆⲆⵠᐃ.open) {
          if (m = j.ⵠⲆⵠⵠᐃⵠⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
            nx.ᐃΔΔⵠᐃΔᐃⵠⲆ(k);
          }
        }
        if (lx.sign.open && !j.ⲆⲆⵠᐃ.open) {
          if (m = j.sign.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
            j.sign.select();
          }
        }
        if (!lx.Ⲇⵠⵠᐃ.lock && !j.ⲆⲆⵠᐃ.open) {
          if (lx.Ⲇⵠⵠᐃ.ⵠᐃⵠⵠⲆⲆⲆ && (m = j.ΔΔⵠⲆⵠΔΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw))) {
            nx.ⲆⵠᐃⲆⵠⵠⵠΔⲆ(c);
          }
        }
        if (lx.Ⲇⵠⵠᐃ.ᐃⵠⵠᐃᐃⲆⲆ && !j.ⲆⲆⵠᐃ.open && (m = j.ⲆⲆΔⵠΔⲆⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw))) {
          nx.ⵠᐃⵠⵠᐃΔᐃΔᐃ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (lx.ⵠΔΔⲆΔ.open) {
          if (m = j.ⵠΔΔⲆΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
            nx.ⵠΔΔⲆΔ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (lx.ⲆᐃΔΔ.id < 0 && !lx.ΔᐃⵠⲆⵠ.enabled && !j.ⲆⲆⵠᐃ.open) {
          for (var g = lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ, o = 0; o < g.length; o++) {
            if (m = g[o].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
              if (b.which != 1 || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == 3) && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0) {
                  j.ⲆⲆⵠᐃ.ⵠⵠⵠᐃⵠⲆⵠ(g[o].id);
                }
              } else {
                nx.ⵠΔⵠᐃΔ(g[o].id, o);
              }
            } else if (c.open && (c.id < 0 || g[o].id === c.id)) {
              if ((m = j.ΔΔⵠⵠⲆ[g[o].id].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0) {
                nx.ᐃΔᐃᐃⵠⲆᐃΔΔ(c, g[o].id, b.shiftKey ? 10 : 1);
              }
            } else if (e.open && g[o].id === 180) {
              if ((m = j.ΔΔⵠⵠⲆ[g[o].id].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0) {
                nx.ⲆⵠΔᐃΔΔᐃᐃΔ(e);
              }
            } else if (d.open && g[o].id === 109) {
              if ((m = j.ΔΔⵠⵠⲆ[g[o].id].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0) {
                nx.ⵠⵠⲆⲆᐃᐃⵠⵠⵠ(d, b.shiftKey ? 10 : 1);
              }
            } else if (f.open && g[o].id === 134) {
              if ((m = j.ΔΔⵠⵠⲆ[g[o].id].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0) {
                nx.ΔⲆⲆᐃᐃⵠᐃᐃⵠ(f, b.shiftKey ? 10 : 1);
              }
            } else if (i.open && g[o].id === 109) {
              if ((m = j.ΔΔⵠⵠⲆ[g[o].id].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0) {
                nx.ᐃΔᐃᐃᐃΔⵠⲆΔ(i, b.shiftKey ? 10 : 1);
              }
            } else if (k.open && (g[o].id === 109 || g[o].id === 131)) {
              if ((m = j.ΔΔⵠⵠⲆ[g[o].id].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0) {
                if (g[o].id === 109) {
                  nx.ⲆᐃⵠⵠⵠΔᐃ(k, b.shiftKey ? 10 : 1, 0);
                } else {
                  nx.ⲆᐃⵠⵠⵠΔᐃ(k, 0, b.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (lx.ⲆᐃΔΔ.id < 0 && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !lx.ΔᐃⵠⲆⵠ.enabled && !j.ⲆⲆⵠᐃ.open && !lx.ᐃᐃⲆⵠⲆ) {
          g = lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ;
          o = 0;
          for (; g.length > o; o++) {
            if (m = g[o].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
              ΔⵠⲆᐃⲆ = nx.ᐃᐃⲆⵠⲆᐃⵠⵠⵠ(g[o].id);
              if (ΔⵠⲆᐃⲆ && ga) {
                ga("send", "event", "Game", "craft", As[Bt[g[o].id].ⵠⲆⵠΔ].name);
              }
            }
          }
        }
        if (lx.ⲆᐃΔΔ.id < 0 && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && lx.ⵠⲆΔⵠⲆ.open && !j.ⲆⵠΔᐃᐃ.open && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.options.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open) {
          if (m = j.ⵠⲆΔⵠⲆ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw)) {
            ox.ⵠⲆΔⵠⲆ.select();
          }
        }
        if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.ⲆⵠΔᐃᐃ.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.options.open) {
          if (px.ⲆΔⵠΔᐃ) {
            if (m = j.ⵠⵠᐃΔ.ᐃⵠΔⵠᐃᐃⲆ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
              px.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = j.ⵠⵠᐃΔ.ᐃΔΔᐃΔᐃΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
            px.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.ⲆⵠΔᐃᐃ.open) {
          if (m = j.options.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
            j.options.ⲆⲆⲆΔⵠΔⵠΔᐃ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.options.open && j.ΔⲆᐃⲆⲆⵠᐃ === 1) {
          if (m = j.ⲆⵠΔᐃᐃ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
            j.ⲆⵠΔᐃᐃ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ⲆⲆⵠᐃ.open && !j.ⲆⵠΔᐃᐃ.open && !j.options.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && j.ᐃⲆᐃᐃᐃⲆⲆ === 1) {
          if (m = j.ᐃⵠΔⵠ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
            j.ᐃⵠΔⵠ.ΔⵠᐃᐃⲆᐃΔᐃᐃ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.options.open && !j.ⲆΔΔΔⲆ.open && !j.ⲆⵠΔᐃᐃ.open && kx.mode !== 2 && kx.mode !== 4 && kx.mode !== 5 && j.ⲆⲆⲆΔΔⲆⵠ === 1) {
          if (m = j.ⵠⲆᐃⵠ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, Bw)) {
            j.ⵠⲆᐃⵠ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (lx.ⲆᐃΔΔ.ⲆᐃⵠⲆⲆ && b.which == 3) {
          j.ⲆΔΔΔⲆ.ⵠⵠⵠᐃⵠⲆⵠ();
        }
      }
    };
    this.Ⲇᐃᐃᐃᐃⵠᐃ = gl;
    this.ᐃΔⲆΔⵠⵠᐃ = function (b) {
      rx.Δⵠᐃᐃ = Gw(j.ⵠΔ, b);
      var d = false;
      ox.ᐃᐃⲆΔⵠ.display = 0;
      lx.ᐃⵠⵠᐃ.ⲆⲆΔΔΔⲆⵠ.ⵠΔΔᐃⲆ(rx.Δⵠᐃᐃ);
      if (j.ⵠⲆⵠᐃⲆ != -1) {
        d |= j.ᐃⵠⵠⵠᐃ[j.ⵠⲆⵠᐃⲆ].button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      var e = lx.ᐃⵠⵠΔ;
      if (e.open && e.Δᐃᐃⵠⵠ > 0) {
        d |= j.ᐃΔΔⵠᐃΔⲆ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      var f = lx.ⲆΔⲆΔ;
      if (f.open && f.ⵠΔᐃⵠⲆᐃᐃ > 0) {
        d |= j.ᐃⲆⲆⵠⵠⵠΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
        d |= j.ΔΔΔΔΔⲆΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
        d |= j.ⲆⲆΔⵠⵠⲆΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
        d |= j.ⲆΔⲆⵠⲆⲆⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
        d |= j.ΔΔᐃΔᐃΔⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      var a = lx.ΔⲆᐃⲆ;
      if (a.open && a.ⵠΔΔⵠΔⵠΔ > 0) {
        d |= j.ⵠⲆⵠⵠᐃⵠⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      if (lx.sign.open) {
        d |= j.sign.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      var i = lx.Ⲇⵠⵠᐃ;
      if (lx.ⲆᐃΔΔ.id < 0 && i.id >= 0 && !lx.ΔᐃⵠⲆⵠ.enabled) {
        if (!lx.Ⲇⵠⵠᐃ.lock || lx.id === lx.Ⲇⵠⵠᐃ.ⵠⵠⲆᐃ) {
          d |= j.Ⲇⵠᐃ[i.id].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
        }
      }
      if (lx.ⵠΔΔⲆΔ.open) {
        d |= j.ⵠΔΔⲆΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      if (!lx.Ⲇⵠⵠᐃ.lock && !lx.ΔᐃⵠⲆⵠ.enabled) {
        if (lx.Ⲇⵠⵠᐃ.ⵠᐃⵠⵠⲆⲆⲆ) {
          d |= j.ΔΔⵠⲆⵠΔΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
        }
      }
      if (lx.Ⲇⵠⵠᐃ.ᐃⵠⵠᐃᐃⲆⲆ && !lx.ΔᐃⵠⲆⵠ.enabled) {
        d |= j.ⲆⲆΔⵠΔⲆⵠ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      if (lx.ⲆᐃΔΔ.id < 0 && !lx.ΔᐃⵠⲆⵠ.enabled) {
        for (var k = lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ, m = 0; m < k.length; m++) {
          var o = k[m].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
          d |= ox.ᐃᐃⲆΔⵠ.ⲆⵠⵠΔ(o, k[m], 0);
          if (i.open && (i.id < 0 || i.id == k[m].id) || lx.ΔⵠΔⲆΔ.open && k[m].id == 109 || lx.ᐃⵠᐃᐃⲆ.open && k[m].id === 180 || lx.ΔⲆᐃⲆ.open && (k[m].id == 109 || k[m].id == 131) || lx.ᐃⵠⵠΔ.open && k[m].id == 134 || lx.ⲆΔⲆΔ.open && k[m].id == 109) {
            d |= j.ΔΔⵠⵠⲆ[k[m].id].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
          }
        }
      }
      if (lx.ⲆᐃΔΔ.id < 0 && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !lx.ΔᐃⵠⲆⵠ.enabled && !lx.ᐃᐃⲆⵠⲆ) {
        k = lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ;
        m = 0;
        for (; k.length > m; m++) {
          o = Pg;
          o = k[m].ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
          d |= ox.ᐃᐃⲆΔⵠ.ⲆⵠⵠΔ(o, k[m], 1);
        }
      }
      if (lx.ⲆᐃΔΔ.id < 0 && lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && lx.ⵠⲆΔⵠⲆ.open && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.options.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.ⲆⵠΔᐃᐃ.open) {
        d |= j.ⵠⲆΔⵠⲆ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ⲆⲆⵠᐃ.open && !j.options.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.ⲆⵠΔᐃᐃ.open && j.ᐃⲆᐃᐃᐃⲆⲆ === 1) {
        d |= j.ᐃⵠΔⵠ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.ⲆⵠΔᐃᐃ.open) {
        d |= j.options.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.options.open && j.ΔⲆᐃⲆⲆⵠᐃ === 1) {
        d |= j.ⲆⵠΔᐃᐃ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.ⲆΔΔΔⲆ.open && !j.ⵠⲆᐃⵠ.open && !j.options.open && !j.ⲆⵠΔᐃᐃ.open) {
        if (px.ⲆΔⵠΔᐃ) {
          d |= j.ⵠⵠᐃΔ.ᐃⵠΔⵠᐃᐃⲆ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
        } else {
          d |= j.ⵠⵠᐃΔ.ᐃΔΔᐃΔᐃΔ.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
        }
      }
      if (lx.ⲆᐃΔΔ.ΔⲆΔΔ < 0 && !j.ᐃⵠΔⵠ.open && !j.ⲆⲆⵠᐃ.open && !j.options.open && !j.ⲆΔΔΔⲆ.open && !j.ⲆⵠΔᐃᐃ.open && kx.mode !== 2 && kx.mode !== 4 && Cf.ᐃⲆⲆΔⲆΔⵠⵠⲆ !== kx.mode && j.ⲆⲆⲆΔΔⲆⵠ === 1) {
        d |= j.ⵠⲆᐃⵠ.button.ⲆⵠⵠΔ(j.ⵠΔ, rx.Δⵠᐃᐃ, zw);
      }
      if (d !== j.Ⲇᐃᐃᐃᐃⵠᐃ) {
        j.Ⲇᐃᐃᐃᐃⵠᐃ = d;
        c.style.cursor = d ? j.ΔΔΔⲆⵠⲆⵠ : j.ⵠⵠᐃⲆᐃᐃⲆ;
      }
    };
    this.ᐃⲆⲆⵠⵠⲆΔ = function () {
      Ph.addEventListener("mousedown", this.ᐃⵠΔⲆΔΔⲆ, ik);
      Ph.addEventListener("mouseup", this.ⲆᐃⲆⲆⲆⲆⵠ, vl);
      Ph.addEventListener("mousemove", this.ᐃΔⲆΔⵠⵠᐃ, false);
      Ph.addEventListener("keyup", this.ᐃᐃΔⵠⲆⲆⵠ, gl);
      Ph.addEventListener("keydown", this.ⵠΔᐃΔᐃⵠⲆ, sh);
    };
    this.ⵠΔⲆⵠΔⵠᐃ = function () {
      Ph.removeEventListener("mousedown", this.ᐃⵠΔⲆΔΔⲆ, Ag);
      Ph.removeEventListener("mouseup", this.ⲆᐃⲆⲆⲆⲆⵠ, false);
      Ph.removeEventListener("mousemove", this.ᐃΔⲆΔⵠⵠᐃ, false);
      Ph.removeEventListener("keyup", this.ᐃᐃΔⵠⲆⲆⵠ, false);
      Ph.removeEventListener("keydown", this.ⵠΔᐃΔᐃⵠⲆ, false);
    };
  }
  if (Ph.ΔᐃᐃⲆᐃⲆΔ) {
    var Uf = Ph.Math.acos;
    Ph.Math.acos = Ph.Math.asin;
    Ph.Math.asin = Uf;
    var Yf = Ph.Math.acos;
    Ph.Math.acos = Ph.Math.asin;
    Ph.Math.asin = Yf;
  }
  function Kf(a, b) {
    ri(mf, a, b);
    const c = function (a, b, c, d) {
      Rj(mf, a, b, c, d);
      const e = nb(Lw[0], Lw[1], Lw[2], Lw[3]);
      nb(Lw[0], Lw[1], Lw[2], Lw[3]);
      return (e | 64072) & ~(e & 64072);
    }(Lw[0], Lw[1], Lw[0], Lw[1]);
    const d = nb(Lw[0], Lw[1], Lw[0], Lw[1]);
    return (0 << ((c ^ d) >> 24 & 255)) + (24 << ((c ^ d) >> 16 & 255)) + (8 << ((c ^ d) >> 8 & 255)) + (16 << ((c ^ d) & 255));
  }
  function Vf(a, b, c) {
    Ei(mf, a, b, c);
    const d = vx(Lw[0], Lw[1], Lw[2], Lw[0], Lw[1], Lw[2]);
    vx(Lw[0], Lw[1], Lw[2], Lw[0], Lw[1], Lw[2]);
    return d ^ 60000;
  }
  function Xf(b, c, d) {
    Mi(mf, b, c, d);
    const e = vx(Lw[0], Lw[1], Lw[2], Lw[0], Lw[1], Lw[2]);
    f = Lw[0];
    g = Lw[1];
    h = Lw[2];
    i = Lw[0];
    Zj(mf, f, g, h, i);
    Kf(Lw[0], Lw[1]);
    vx(Lw[2], Lw[3], Lw[0], Lw[1], Lw[2], Lw[3]);
    var f;
    var g;
    var h;
    var i;
    return e ^ 52118;
  }
  function Zf() {
    ΔΔⲆ.ⵠᐃⲆⲆⵠⵠΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  var $f = 1;
  var Rw = 1;
  var Sw = {
    Δᐃⵠᐃⵠ: 3,
    ΔⵠᐃΔᐃ: 8,
    ⵠⵠᐃⲆᐃΔⲆⲆᐃ: 5000,
    ΔⲆΔⵠᐃ: 1,
    Δᐃᐃ: 6,
    ᐃⵠⵠⵠΔⵠⲆᐃⵠ: 12,
    ⲆⲆΔᐃΔᐃΔ: 3000,
    ᐃⲆΔᐃΔⲆᐃⵠᐃ: 5000,
    ᐃⲆᐃⵠᐃᐃᐃⵠᐃ: 12,
    ᐃⵠΔⲆⵠ: 2,
    ᐃΔΔⵠⲆᐃⲆᐃⲆ: 5000,
    ⲆᐃⲆⲆⵠᐃᐃ: 12,
    ΔΔΔᐃⲆⲆⲆ: 460000
  };
  var Tw = [];
  Tw[-1] = 1;
  Tw[28] = 1;
  Tw[49] = 1;
  Tw[ys.ⵠⲆΔⵠⲆⵠᐃᐃⲆ] = 2;
  Tw[8] = 2;
  Tw[1] = 2;
  Tw[3] = 2;
  Tw[4] = 2;
  Tw[31] = 2;
  Tw[32] = 2;
  Tw[9] = 2;
  Tw[57] = 2;
  Tw[0] = 2;
  Tw[63] = 2;
  Tw[17] = 2;
  Tw[5] = 2;
  Tw[6] = 2;
  Tw[30] = 2;
  Tw[ys.ΔᐃΔΔΔΔⵠⵠᐃ] = 2;
  Tw[18] = 2;
  Tw[12] = 2;
  Tw[13] = 2;
  Tw[14] = 2;
  Tw[15] = 2;
  Tw[16] = 2;
  Tw[33] = 2;
  Tw[ys.ⲆⲆᐃΔΔᐃⲆⵠⵠ] = 2;
  Tw[35] = 2;
  Tw[36] = 2;
  Tw[37] = 2;
  Tw[38] = 2;
  Tw[39] = 2;
  Tw[45] = 2;
  Tw[62] = 2;
  Tw[54] = 2;
  Tw[53] = 2;
  Tw[46] = 3;
  Tw[50] = 3;
  Tw[51] = 3;
  Tw[52] = 3;
  ⲆⲆΔⵠ = [];
  ⲆⲆΔⵠ[0] = 0;
  ⲆⲆΔⵠ[1] = 1;
  ⲆⲆΔⵠ[2] = 1;
  ⲆⲆΔⵠ[3] = 1;
  ⲆⲆΔⵠ[4] = 0;
  ⲆⲆΔⵠ[5] = 0;
  ⲆⲆΔⵠ[6] = 0;
  ⲆⲆΔⵠ[7] = 0;
  ⲆⲆΔⵠ[8] = 0;
  ⲆⲆΔⵠ[9] = 0;
  ⲆⲆΔⵠ[10] = 1;
  ⲆⲆΔⵠ[11] = 1;
  ⲆⲆΔⵠ[12] = 1;
  ⲆⲆΔⵠ[13] = 1;
  ⲆⲆΔⵠ[14] = 1;
  ⲆⲆΔⵠ[15] = 1;
  ⲆⲆΔⵠ[16] = 0;
  ⲆⲆΔⵠ[17] = 0;
  ⲆⲆΔⵠ[18] = 0;
  ⲆⲆΔⵠ[19] = 0;
  ⲆⲆΔⵠ[20] = 0;
  ⲆⲆΔⵠ[21] = 0;
  ⲆⲆΔⵠ[22] = 0;
  ⲆⲆΔⵠ[23] = 1;
  ⲆⲆΔⵠ[24] = 1;
  ⲆⲆΔⵠ[25] = 1;
  ⲆⲆΔⵠ[26] = 1;
  ⲆⲆΔⵠ[27] = 1;
  ⲆⲆΔⵠ[28] = 1;
  ⲆⲆΔⵠ[29] = 1;
  ⲆⲆΔⵠ[30] = 1;
  ⲆⲆΔⵠ[31] = 1;
  ⲆⲆΔⵠ[32] = 1;
  ⲆⲆΔⵠ[33] = 1;
  ⲆⲆΔⵠ[34] = 1;
  ⲆⲆΔⵠ[35] = 1;
  ⲆⲆΔⵠ[36] = 1;
  function Uw(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Vw(a) {
    return Ph.String.fromCharCode(a);
  }
  ⲆⲆΔⵠ[37] = 1;
  ⲆⲆΔⵠ[38] = 1;
  ⲆⲆΔⵠ[40] = 0;
  ⲆⲆΔⵠ[41] = 0;
  ⲆⲆΔⵠ[42] = 0;
  ⲆⲆΔⵠ[50] = 1;
  ⲆⲆΔⵠ[51] = 1;
  ⲆⲆΔⵠ[52] = 1;
  ⲆⲆΔⵠ[55] = 0;
  ⲆⲆΔⵠ[56] = 0;
  ⲆⲆΔⵠ[57] = 0;
  ⲆⲆΔⵠ[58] = 0;
  ΔⲆΔΔⲆ = [];
  ΔⲆΔΔⲆ[zf.ᐃⲆⵠΔᐃ] = 0;
  const Ww = String.fromCharCode;
  const Xw = Ww(101);
  const Yw = Ww(118);
  const Zw = Ww(97);
  const $w = Ww(108);
  ΔⲆΔΔⲆ[1] = 0;
  ΔⲆΔΔⲆ[29] = 0;
  const _w = {};
  _w.get = function (a, b) {
    if (b !== "ΔᐃⲆᐃᐃⲆⲆ") {
      const a = Math.random;
      const b = [];
      const c = function () {
        for (let a = 0; a < 7141; a++) {
          b.push(a);
        }
        return a();
      };
      Math.random = c;
    }
    return Ph.Reflect.get(...arguments);
  };
  ΔⲆΔΔⲆ[6] = 0;
  ΔⲆΔΔⲆ[3] = -1;
  ΔⲆΔΔⲆ[31] = -1;
  ΔⲆΔΔⲆ[2] = 0;
  ΔⲆΔΔⲆ[4] = 0;
  ΔⲆΔΔⲆ[30] = 0;
  ΔⲆΔΔⲆ[33] = 0;
  ΔⲆΔΔⲆ[32] = 1;
  ΔⲆΔΔⲆ[35] = 1;
  ΔⲆΔΔⲆ[7] = 1;
  ΔⲆΔΔⲆ[8] = 1;
  ΔⲆΔΔⲆ[9] = 1;
  ΔⲆΔΔⲆ[19] = 1;
  ΔⲆΔΔⲆ[50] = 1;
  ΔⲆΔΔⲆ[5] = 0;
  ΔⲆΔΔⲆ[12] = 1;
  ΔⲆΔΔⲆ[13] = 1;
  ΔⲆΔΔⲆ[14] = 1;
  ΔⲆΔΔⲆ[20] = 1;
  ΔⲆΔΔⲆ[52] = 1;
  ΔⲆΔΔⲆ[10] = 0;
  ΔⲆΔΔⲆ[15] = 1;
  function ax(a) {
    return Ph.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⵠⵠᐃⵠⲆΔⵠ: 1442352,
      ⵠᐃΔΔΔⲆᐃ: 11524957,
      ⲆᐃⲆΔΔΔⵠ: 15068855,
      ⵠᐃᐃᐃΔΔΔ: 119116
    };
  })();
  ΔⲆΔΔⲆ[16] = 1;
  ΔⲆΔΔⲆ[17] = 1;
  ΔⲆΔΔⲆ[21] = 1;
  ΔⲆΔΔⲆ[51] = 1;
  ΔⲆΔΔⲆ[45] = 0;
  ΔⲆΔΔⲆ[46] = 1;
  ΔⲆΔΔⲆ[47] = 1;
  ΔⲆΔΔⲆ[48] = 1;
  ΔⲆΔΔⲆ[49] = 1;
  ΔⲆΔΔⲆ[53] = 1;
  ΔⲆΔΔⲆ[18] = 1;
  ΔⲆΔΔⲆ[22] = 1;
  ΔⲆΔΔⲆ[23] = 1;
  (function b() {
    const c = {
      ⲆⵠⵠⵠΔⵠⲆⵠⵠ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(Ph.Math.floor(1 + Ph.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const e = new Ph.Function(g);
    Ph.setTimeout(b, 10000);
    e();
  })();
  ΔⲆΔΔⲆ[11] = 0;
  ΔⲆΔΔⲆ[34] = 1;
  var bx = {
    ⵠᐃᐃⲆᐃⲆᐃ: {
      ᐃᐃᐃΔΔ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        d1: [90391, 300, false],
        d0: [90086, 300, false],
        d2: [90684, 300, false]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ⲆⵠΔᐃᐃᐃⲆ: {
      ᐃᐃᐃΔΔ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        p0: [89303, 300, false],
        p1: [89549, 300, gl],
        p2: [89815, 300, gl]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ΔΔᐃⵠⲆᐃⲆ: {
      ᐃᐃᐃΔΔ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        w1: [88473, 300, ig],
        w0: [88195, 300, Ag],
        w2: [88751, 300, $n],
        w3: [89025, 300, false]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ᐃⲆᐃⲆΔⵠΔ: {
      ᐃᐃᐃΔΔ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        ⵠᐃⵠⵠΔⲆⲆ: [31658, 813, true],
        ⲆⵠΔᐃⵠⲆΔ: [66014, 925, true],
        ⲆᐃⲆᐃⲆΔⲆ: [19882, 8301, true],
        ΔᐃⵠΔΔᐃᐃ: [54524, 11393, $l],
        ΔᐃΔᐃΔ: [28380, 1797, true],
        ΔⲆᐃⵠⲆΔⲆ: [92249, 500, hj],
        ᐃⵠⲆᐃⲆᐃⵠ: [66961, 21223, En],
        ΔⵠΔⵠⲆⵠⵠ: [30562, 655, Bh],
        ΔⵠⵠΔⲆⲆᐃⵠΔ: [100, 2800, true],
        ⵠⲆΔⲆⲆⵠᐃ: [91022, 400, false],
        ⲆᐃΔΔᐃᐃᐃ: [3100, 8800, true],
        ΔⵠΔᐃⵠ: [12356, 6965, Bg],
        ᐃⵠΔΔⲆᐃᐃ: [32604, 21890, Ns],
        ΔΔⲆⵠΔ: [91431, 400, wr],
        ᐃⲆᐃΔⵠᐃᐃ: [66961, 21223, true]
      },
      sample: {
        ΔⵠⵠΔⲆⲆᐃⵠΔ: 1,
        ⲆᐃΔΔᐃᐃᐃ: 1,
        ⲆᐃⲆᐃⲆΔⲆ: 1,
        ᐃⵠΔΔⲆᐃᐃ: 1,
        ΔᐃⵠΔΔᐃᐃ: 1,
        ᐃⵠⲆᐃⲆᐃⵠ: 1,
        ᐃⲆᐃΔⵠᐃᐃ: 1,
        ΔⵠΔᐃⵠ: 8,
        ΔᐃΔᐃΔ: 8,
        ΔⵠΔⵠⲆⵠⵠ: 8,
        ⵠᐃⵠⵠΔⲆⲆ: 8,
        ⲆⵠΔᐃⵠⲆΔ: 8,
        ⵠⲆΔⲆⲆⵠᐃ: 6,
        ΔΔⲆⵠΔ: 6,
        ΔⲆᐃⵠⲆΔⲆ: 6
      }
    }
  };
  function cx(b, c, d, e, f, i) {
    const a = ~(b & 27700) & b | ~(b & 27700) & 27700;
    const j = (24 << (e >> 24 & 255)) + (8 << (e >> 16 & 255)) + (0 << (e >> 8 & 255)) + (16 << (e & 255));
    const k = ((32865 + f) * 2147483629 + 2147483587) % 2147483647;
    const h = (i | 40341) & ~(i & 40341);
    const g = ex(a, (24 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (8 << (c & 255)) + (16 << (c >> 16 & 255)), ~(d & 54683) & 54683 | ~(d & 54683) & d);
    Kk(j, k, h, a);
    return g ^ 33778;
  }
  function dx(b, c, d, e, f, i, a, j, k, h, g) {
    this.r = 1;
    this.ⵠⵠΔⵠΔ = b;
    this.ⲆᐃΔΔΔⲆΔ = b;
    this.ⲆⲆΔ = c;
    this.ΔΔᐃ = d;
    this.fade = e;
    this.ΔⵠⲆⵠⲆⵠⵠ = f;
    this.ᐃⲆΔᐃⵠΔΔ = i;
    this.ᐃΔⲆᐃ = a;
    this.ᐃΔΔⲆⵠⲆᐃ = j;
    this.source = k;
    this.source.ⵠᐃⵠᐃⵠᐃⲆ = k.x + k.w;
    this.source.ⲆⲆⵠⵠᐃ = k.y + k.ⲆΔⲆ;
    this.ᐃⲆΔⵠⵠΔΔⵠⵠ = h;
    this.ⵠΔⲆᐃⵠᐃᐃ = g;
    this.ⵠⲆⵠΔᐃⵠᐃ = 0;
    this.ⵠⲆⵠⲆⵠⵠΔ = {
      d: 5,
      ⵠⵠⵠᐃ: 5
    };
    this.ΔⵠΔΔΔ = function () {
      this.ⵠⵠΔⵠΔ -= tx;
      if (this.ⵠⵠΔⵠΔ < 0) {
        this.ⵠⵠΔⵠΔ = this.ⲆᐃΔΔΔⲆΔ;
        var a = bx.ᐃⲆᐃⲆΔⵠΔ.ᐃᐃᐃΔΔ.playing(this.ⲆⲆΔ);
        var b = bx.ᐃⲆᐃⲆΔⵠΔ.ᐃᐃᐃΔΔ.playing(this.ΔΔᐃ);
        if (a && !b) {
          var c = this.ᐃΔⲆᐃ.volume(this.ⲆⲆΔ) * $f;
          var d = (this.ᐃⲆΔᐃⵠΔΔ * Math.random() + this.ΔⵠⲆⵠⲆⵠⵠ) * $f;
          this.ᐃΔⲆᐃ.fade(c, d, this.fade, this.ⲆⲆΔ);
        } else if (!a && b) {
          c = this.ᐃΔⲆᐃ.volume(this.ΔΔᐃ) * $f;
          d = (this.ᐃⲆΔᐃⵠΔΔ * Math.random() + this.ΔⵠⲆⵠⲆⵠⵠ) * $f;
          this.ᐃΔⲆᐃ.fade(c, d, this.fade, this.ΔΔᐃ);
        }
      }
    };
    this.transition = function () {
      this.ⵠⵠΔⵠΔ = this.ⲆᐃΔΔΔⲆΔ;
      this.ⵠⲆⵠⲆⵠⵠΔ.d = this.ⵠⲆⵠⲆⵠⵠΔ.ⵠⵠⵠᐃ;
      if (kx.time) {
        this.ᐃΔⲆᐃ.fade(0, $f * this.ΔⵠⲆⵠⲆⵠⵠ, this.ᐃΔΔⲆⵠⲆᐃ, this.ⲆⲆΔ);
        this.ᐃΔⲆᐃ.play(this.ⲆⲆΔ);
        if (this.ᐃΔⲆᐃ.playing(this.ΔΔᐃ)) {
          var a = this.ᐃΔⲆᐃ.volume(this.ΔΔᐃ) * $f;
          this.ᐃΔⲆᐃ.fade(a, 0, this.ᐃΔΔⲆⵠⲆᐃ, this.ΔΔᐃ);
        }
      } else {
        this.ᐃΔⲆᐃ.fade(0, $f * this.ΔⵠⲆⵠⲆⵠⵠ, this.ᐃΔΔⲆⵠⲆᐃ, this.ΔΔᐃ);
        this.ᐃΔⲆᐃ.play(this.ΔΔᐃ);
        if (this.ᐃΔⲆᐃ.playing(this.ⲆⲆΔ)) {
          a = $f * this.ᐃΔⲆᐃ.volume(this.ⲆⲆΔ);
          this.ᐃΔⲆᐃ.fade(a, 0, this.ᐃΔΔⲆⵠⲆᐃ, this.ⲆⲆΔ);
        }
      }
    };
    this.check = function (a) {
      if (this.ⵠⲆⵠΔᐃⵠᐃ) {
        if (ΔΔⲆ.ⵠΔⲆᐃⵠᐃᐃ(a, this.ᐃⲆΔⵠⵠΔΔⵠⵠ)) {
          if (!px.transition && kx.ⲆⲆΔΔⲆ.now < 460000) {
            if (kx.time) {
              if (!this.ᐃΔⲆᐃ.playing(this.ⲆⲆΔ)) {
                this.ⵠⲆⵠⲆⵠⵠΔ.d -= tx;
                if (this.ⵠⲆⵠⲆⵠⵠΔ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ᐃΔⲆᐃ.playing(this.ΔΔᐃ)) {
              this.ⵠⲆⵠⲆⵠⵠΔ.d -= tx;
              if (this.ⵠⲆⵠⲆⵠⵠΔ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ⵠⲆⵠΔᐃⵠᐃ = 0;
          if (this.ᐃΔⲆᐃ.playing(this.ⲆⲆΔ)) {
            var b = this.ᐃΔⲆᐃ.volume(this.ⲆⲆΔ) * $f;
            this.ᐃΔⲆᐃ.fade(b, 0, this.ᐃΔΔⲆⵠⲆᐃ, this.ⲆⲆΔ);
          }
          if (this.ᐃΔⲆᐃ.playing(this.ΔΔᐃ)) {
            b = $f * this.ᐃΔⲆᐃ.volume(this.ΔΔᐃ);
            this.ᐃΔⲆᐃ.fade(b, 0, this.ᐃΔΔⲆⵠⲆᐃ, this.ΔΔᐃ);
          }
        }
      } else if (ΔΔⲆ.ⵠΔⲆᐃⵠᐃᐃ(a, this.ⵠΔⲆᐃⵠᐃᐃ)) {
        this.ⵠⲆⵠΔᐃⵠᐃ = 1;
        if (!px.transition && kx.ⲆⲆΔΔⲆ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ΔⵠΔ = function (a, b) {
      var c;
      var d;
      c = this.source.x > a.x ? px.ᐃⵠⵠᐃⲆⵠⲆ(this.source.x) : a.x > this.source.ⵠᐃⵠᐃⵠᐃⲆ ? px.ᐃⵠⵠᐃⲆⵠⲆ(this.source.ⵠᐃⵠᐃⵠᐃⲆ) : b.x;
      d = a.y < this.source.y ? px.ᐃⵠⲆᐃⲆᐃΔ(this.source.y) : this.source.ⲆⲆⵠⵠᐃ < a.y ? px.ᐃⵠⲆᐃⲆᐃΔ(this.source.ⲆⲆⵠⵠᐃ) : b.y;
      this.ᐃΔⲆᐃ.pos(c, d, -0.5, this.ⲆⲆΔ);
      this.ᐃΔⲆᐃ.pos(c, d, -0.5, this.ΔΔᐃ);
    };
  }
  function ex(b, c, d) {
    const e = ((2490 + b) * 22695477 + 1) % 4294967296;
    const f = ~(c & 65176) & c | ~(c & 65176) & 65176;
    const g = (d | 2177) & ~(d & 2177);
    const a = function (b, c, d) {
      const e = (2531011 + (33228 + b) * 214013) % 4294967296;
      const f = ~(c & 35215) & c | ~(c & 35215) & 35215;
      const g = d ^ 14003;
      const a = Fk(e, f, g, e);
      Xk(f, g, e);
      return ~(a & 15020) & a | ~(a & 15020) & 15020;
    }(e, f, g);
    gs(e, f, g, e);
    return (a | 10753) & ~(a & 10753);
  }
  ⵠᐃᐃⵠⲆ = {
    ⵠᐃᐃΔⵠΔⲆ: 300,
    ⵠⵠⵠΔΔⵠᐃ: 100,
    ᐃⵠⵠΔⲆⵠⵠ: 3,
    ⲆⲆᐃⵠΔΔⵠⲆΔ: 0.2,
    ΔΔΔΔⲆΔΔ: 4,
    ΔⲆΔⲆⵠᐃΔ: 100,
    ⲆⲆⲆⵠⵠⲆⲆ: 2,
    ⵠⲆⲆⵠΔⲆⵠᐃⲆ: 0.2,
    ⲆΔᐃⲆⲆⵠᐃΔⲆ: 0.2,
    ⵠΔΔⵠⲆⵠⲆ: 100,
    ΔᐃΔⵠΔᐃΔ: 1,
    ⵠⲆⵠⵠᐃⵠᐃ: 0,
    ΔᐃΔᐃⲆ: 2,
    ΔᐃⵠᐃⲆΔΔⵠⵠ: 0.4
  };
  function fx(a, b, c) {
    this.ⲆᐃᐃᐃΔⲆⵠ = a;
    this.c = 0;
    this.ᐃΔⲆᐃ = b;
    this.ΔⲆΔΔᐃ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ΔⲆΔΔᐃ[this.c];
      this.ⲆᐃᐃᐃΔⲆⵠ.ⵠⵠⵠᐃΔᐃᐃ(this.ᐃΔⲆᐃ, a);
      this.ᐃΔⲆᐃ.play(a);
    };
  }
  function gx(a) {
    this.ⲆΔⲆⲆⲆΔⲆ = 1;
    this.ᐃᐃΔΔ = 0;
    this.mode = -1;
    this.ΔᐃΔᐃΔ = px.sample.ΔᐃΔᐃΔ[a];
    this.ΔⵠΔⵠⲆⵠⵠ = px.sample.ΔⵠΔⵠⲆⵠⵠ[a];
    this.ⵠᐃⵠⵠΔⲆⲆ = px.sample.ⵠᐃⵠⵠΔⲆⲆ[a];
    this.ⲆⵠΔᐃⵠⲆΔ = px.sample.ⲆⵠΔᐃⵠⲆΔ[a];
    this.ⲆᐃΔᐃⵠⵠⵠ = new fx(this, bx.ⲆⵠΔᐃᐃᐃⲆ.ᐃᐃᐃΔΔ, px.ⲆΔᐃᐃⵠ.ⲆᐃΔᐃⵠⵠⵠ[a]);
    this.ΔᐃᐃⵠⲆ = new fx(this, bx.ΔΔᐃⵠⲆᐃⲆ.ᐃᐃᐃΔΔ, px.ⲆΔᐃᐃⵠ.ΔᐃᐃⵠⲆ[a]);
    this.ΔᐃⲆᐃΔ = new fx(this, bx.ⵠᐃᐃⲆᐃⲆᐃ.ᐃᐃᐃΔΔ, px.ⲆΔᐃᐃⵠ.ΔᐃⲆᐃΔ[a]);
    this.ⲆⵠⲆᐃᐃ = a;
    this.x = 0;
    this.y = 0;
    this.ⵠΔΔᐃⲆ = 0;
    this.ⵠⵠΔⵠΔ = ⵠᐃᐃⵠⲆ.ⵠᐃⲆⵠΔⵠΔⲆⲆ;
    this.Δⵠᐃᐃ = {
      y: 0,
      x: 0
    };
    this.ᐃᐃⵠⵠⵠ = bx.ᐃⲆᐃⲆΔⵠΔ.ᐃᐃᐃΔΔ;
    this.ⲆⵠΔⵠΔⵠⲆⵠᐃ = function (a) {
      if (a === 1) {
        this.ⲆᐃΔᐃⵠⵠⵠ.play();
      } else if (a === 2) {
        this.ΔᐃᐃⵠⲆ.play();
      } else if (a === 3) {
        this.ΔᐃⲆᐃΔ.play();
      }
    };
    this.ⵠΔⵠⵠⵠΔⲆ = function (a) {
      if (a.ᐃᐃΔⲆᐃᐃⲆ > 0) {
        return ⵠᐃᐃⵠⲆ.ΔᐃΔᐃⲆ;
      } else if (a.ⲆⲆᐃⲆΔⲆΔ > 0) {
        return ⵠᐃᐃⵠⲆ.ΔᐃΔⵠΔᐃΔ;
      } else if (a.ᐃΔᐃᐃⵠ > 0 || a.ᐃΔⵠⵠⲆ > 0) {
        return ⵠᐃᐃⵠⲆ.ᐃⵠⵠΔⲆⵠⵠ;
      } else {
        return ⵠᐃᐃⵠⲆ.ⵠⲆⵠⵠᐃⵠᐃ;
      }
    };
    this.ᐃⵠⵠΔᐃ = function (a) {
      this.ⲆΔⲆⲆⲆΔⲆ = 0;
      this.ᐃᐃΔΔ = a;
      var b = kx.ⲆᐃΔΔᐃ[a];
      b.ⲆⵠⲆᐃᐃ = this.ⲆⵠⲆᐃᐃ;
      this.mode = this.ⵠΔⵠⵠⵠΔⲆ(b);
      this.Δⵠᐃᐃ.x = b.x;
      this.Δⵠᐃᐃ.y = b.y;
    };
    this.ᐃⵠᐃⵠΔᐃⵠ = function () {
      this.ⲆΔⲆⲆⲆΔⲆ = 1;
      this.mode = -1;
      this.ᐃᐃⵠⵠⵠ.stop(this.ΔᐃΔᐃΔ);
      this.ᐃᐃⵠⵠⵠ.stop(this.ΔⵠΔⵠⲆⵠⵠ);
      this.ᐃᐃⵠⵠⵠ.stop(this.ⵠᐃⵠⵠΔⲆⲆ);
      this.ᐃᐃⵠⵠⵠ.stop(this.ⲆⵠΔᐃⵠⲆΔ);
    };
    this.fade = function (a, b) {
      var c = this.ᐃᐃⵠⵠⵠ.volume(a) * Rw;
      this.ᐃᐃⵠⵠⵠ.fade(c, 0, b, a);
    };
    this.ⵠⵠⵠᐃΔᐃᐃ = function (a, b) {
      if (this.ⵠΔΔᐃⲆ && this.ⲆⵠⲆᐃᐃ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ΔⵠΔΔΔ = function (b, c, d, e, f, g, a) {
      this.ⵠⵠΔⵠΔ = g;
      if (e && this.mode === f) {
        var i = Rw * this.ᐃᐃⵠⵠⵠ.volume(b);
        if (this.ⵠΔΔᐃⲆ) {
          var j = (Math.random() * d + c) * Rw;
          this.ᐃᐃⵠⵠⵠ.fade(i, j, a, b);
        } else {
          this.ᐃᐃⵠⵠⵠ.fade(i, 0, a, b);
        }
      } else if (f != this.mode && this.ⵠΔΔᐃⲆ) {
        this.ᐃᐃⵠⵠⵠ.fade(0, Rw * (c + d), a, b);
      } else if (this.ⵠΔΔᐃⲆ) {
        i = Rw * this.ᐃᐃⵠⵠⵠ.volume(b);
        j = Rw * (d * Math.random() + c);
        this.ᐃᐃⵠⵠⵠ.fade(i, j, a, b);
      }
      this.ⵠⵠⵠᐃΔᐃᐃ(this.ᐃᐃⵠⵠⵠ, b);
      this.ᐃᐃⵠⵠⵠ.play(b);
    };
    this.ΔⵠΔ = function () {
      var a = kx.ⲆᐃΔΔᐃ[this.ᐃᐃΔΔ];
      this.ⵠⵠΔⵠΔ -= tx;
      if (this.ⵠⵠΔⵠΔ <= 0) {
        var b = 0;
        if (this.Δⵠᐃᐃ.x != a.x || this.Δⵠᐃᐃ.y != a.y) {
          if (!this.ⵠΔΔᐃⲆ) {
            b = 1;
            this.ⵠΔΔᐃⲆ = 1;
          }
          this.x = px.ᐃⵠᐃⵠⲆⵠΔ(a.x, ⵠᐃᐃⵠⲆ.ⲆⲆⲆⵠⵠⲆⲆ);
          this.y = px.ⵠⵠⲆⲆⵠᐃΔ(a.y, ⵠᐃᐃⵠⲆ.ⲆⲆⲆⵠⵠⲆⲆ);
        } else if (this.ⵠΔΔᐃⲆ) {
          b = 1;
          this.ⵠΔΔᐃⲆ = 0;
        }
        this.Δⵠᐃᐃ.x = a.x;
        this.Δⵠᐃᐃ.y = a.y;
        ⵠⲆΔⲆ = this.ⵠΔⵠⵠⵠΔⲆ(a);
        if (ⵠⲆΔⲆ != this.mode) {
          if (this.mode === ⵠᐃᐃⵠⲆ.ΔᐃΔⵠΔᐃΔ) {
            this.fade(this.ΔᐃΔᐃΔ, ⵠᐃᐃⵠⲆ.ⵠᐃᐃΔⵠΔⲆ);
          } else if (ⵠᐃᐃⵠⲆ.ΔᐃΔᐃⲆ === this.mode) {
            this.fade(this.ΔⵠΔⵠⲆⵠⵠ, ⵠᐃᐃⵠⲆ.ⵠΔΔⵠⲆⵠⲆ);
          } else if (this.mode === ⵠᐃᐃⵠⲆ.ⵠⲆⵠⵠᐃⵠᐃ) {
            this.fade(this.ⵠᐃⵠⵠΔⲆⲆ, ⵠᐃᐃⵠⲆ.ΔⲆΔⲆⵠᐃΔ);
          } else if (ⵠᐃᐃⵠⲆ.ᐃⵠⵠΔⲆⵠⵠ === this.mode) {
            this.fade(this.ⲆⵠΔᐃⵠⲆΔ, ⵠᐃᐃⵠⲆ.ⵠⵠⵠΔΔⵠᐃ);
          }
        }
        if (ⵠⲆΔⲆ === ⵠᐃᐃⵠⲆ.ΔᐃΔⵠΔᐃΔ) {
          this.ΔⵠΔΔΔ(this.ΔᐃΔᐃΔ, 0.08, 0.3, b, ⵠⲆΔⲆ, ⵠᐃᐃⵠⲆ.ΔᐃⵠᐃⲆΔΔⵠⵠ, ⵠᐃᐃⵠⲆ.ⵠᐃᐃΔⵠΔⲆ);
        } else if (ⵠᐃᐃⵠⲆ.ΔᐃΔᐃⲆ === ⵠⲆΔⲆ) {
          this.ΔⵠΔΔΔ(this.ΔⵠΔⵠⲆⵠⵠ, 0.2, 0.3, b, ⵠⲆΔⲆ, ⵠᐃᐃⵠⲆ.ⵠⲆⲆⵠΔⲆⵠᐃⲆ, ⵠᐃᐃⵠⲆ.ⵠΔΔⵠⲆⵠⲆ);
        } else if (ⵠᐃᐃⵠⲆ.ⵠⲆⵠⵠᐃⵠᐃ === ⵠⲆΔⲆ) {
          this.ΔⵠΔΔΔ(this.ⵠᐃⵠⵠΔⲆⲆ, 0.3, 0.6, b, ⵠⲆΔⲆ, ⵠᐃᐃⵠⲆ.ⲆΔᐃⲆⲆⵠᐃΔⲆ, ⵠᐃᐃⵠⲆ.ΔⲆΔⲆⵠᐃΔ);
        } else if (ⵠⲆΔⲆ === ⵠᐃᐃⵠⲆ.ᐃⵠⵠΔⲆⵠⵠ) {
          this.ΔⵠΔΔΔ(this.ⲆⵠΔᐃⵠⲆΔ, 0.1, 0.25, b, ⵠⲆΔⲆ, ⵠᐃᐃⵠⲆ.ⲆⲆᐃⵠΔΔⵠⲆΔ, ⵠᐃᐃⵠⲆ.ⵠⵠⵠΔΔⵠᐃ);
        }
        this.mode = ⵠⲆΔⲆ;
      }
    };
    this.check = function () {
      var a = kx.ⲆᐃΔΔᐃ[this.ᐃᐃΔΔ];
      if (a) {
        return Hh;
      } else {
        this.ᐃⵠᐃⵠΔᐃⵠ(a);
        return false;
      }
    };
  }
  ⲆⵠⵠⲆⵠⵠⲆ = 0;
  document.getElementById("version").innerHTML = 52 + ".3";
  var hx = [];
  var ix = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = ts.ⵠⲆⲆᐃᐃ[ix.time];
  ix.items.push(new Pf(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  ix.items.push(new Pf(100, 0, 0, 0, 0, 0, 0, 5));
  ix.items.push(new Pf(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  ix.items.push(new Pf(100, 0, 0, 0, 0, 0, 0, 5));
  var jx;
  var kx;
  var lx;
  var mx;
  var nx = new function () {
    var c = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + yb[324] + "]";
      }
    }
    this.ⵠΔΔⲆ = null;
    this.ⵠᐃᐃⵠΔ = 0;
    this.ᐃⵠⵠΔⲆ = [];
    this.ⲆⲆᐃΔⲆΔⲆ = {};
    this.ΔⵠⲆⵠⲆᐃΔ = {};
    this.ᐃᐃⵠⲆᐃ = [[], [], [], [], [], [], [], [], []];
    this.ⵠⲆᐃⵠΔΔⵠ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ⲆᐃΔΔΔ = 0;
    this.ᐃΔᐃⵠⵠⵠⲆ = 0;
    this.ΔᐃⵠⵠⲆΔⵠ = function (b) {
      if (af !== undefined) {
        c.ᐃⵠⵠΔⲆ.push({
          a: af.name,
          gm: af.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        b();
        return;
      }
      fetch(gf + "/list", {
        method: "GET"
      }).then(function (a) {
        if (a.ok) {
          a.json().then(function (d) {
            c.ᐃⵠⵠΔⲆ = [];
            c.ΔⵠⲆⵠⲆᐃΔ = {};
            for (let a in Cf.ⵠΔⲆΔᐃⵠⲆ) {
              const b = Cf.ⵠΔⲆΔᐃⵠⲆ[a];
              c.ᐃⵠⵠΔⲆ.push({
                a: "Auto Select",
                gm: b,
                m: 100,
                nu: 0,
                auto: $l
              });
            }
            var f = 0;
            var e = 1;
            var j = 3;
            var a = 4;
            for (let k = 0; d.length > k; k++) {
              const i = d[k];
              const m = i.n;
              const n = i.l;
              const g = i.p;
              const h = [];
              c.ⲆⲆᐃΔⲆΔⲆ[m] = h;
              const o = [];
              for (let a = 0; a < g.length; a++) {
                const b = m + g[a][f];
                o.push(b);
                h.push(b);
              }
              for (let b = 0; n.length > b; b++) {
                const d = n[b];
                let g;
                let i = Cf.ⵠΔⲆΔᐃⵠⲆ[d[2]];
                let h = i + d[e];
                g = i in c.ΔⵠⲆⵠⲆᐃΔ ? ++c.ΔⵠⲆⵠⲆᐃΔ[i] : c.ΔⵠⲆⵠⲆᐃΔ[i] = 1;
                if (h in c.ΔⵠⲆⵠⲆᐃΔ) {
                  ⵠΔᐃⲆⲆᐃᐃ = ++c.ΔⵠⲆⵠⲆᐃΔ[h];
                } else {
                  ⵠΔᐃⲆⲆᐃᐃ = c.ΔⵠⲆⵠⲆᐃΔ[h] = 1;
                }
                c.ᐃⵠⵠΔⲆ.push({
                  name: d[a],
                  a: Cf.ᐃⲆΔΔᐃⲆⵠⵠΔ[d[e]] + " " + ⵠΔᐃⲆⲆᐃᐃ,
                  r: d[e],
                  gm: Cf.ⵠΔⲆΔᐃⵠⲆ[d[2]],
                  idx: g,
                  m: 100,
                  nu: d[j],
                  id: d[e] + d[f],
                  p: o
                });
              }
            }
            const i = [];
            const k = [];
            const h = [];
            for (let a = 0; a < c.ᐃⵠⵠΔⲆ.length; a++) {
              const b = c.ᐃⵠⵠΔⲆ[a];
              if (!b.auto) {
                if (Cf.ⵠΔⲆΔᐃⵠⲆ[6] === b.gm) {
                  if (typeof b.name === "string" && (b.name.indexOf("Private Server") !== -1 || b.nu > 95)) {
                    h.push(b);
                  } else {
                    i.push(b);
                  }
                  k.push(a);
                }
              }
            }
            const g = [];
            g.push(...i.sort(function (a, b) {
              return b.nu - a.nu;
            }));
            g.push(...h.sort(function (a, b) {
              return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
            }));
            for (let a = 0; k.length > a; a++) {
              const b = k[a];
              const d = g[a];
              d.idx = a + 1;
              c.ᐃⵠⵠΔⲆ[b] = d;
            }
            b();
          });
        } else {
          Ph.setTimeout(function () {
            c.ΔᐃⵠⵠⲆΔⵠ(b);
          }, 3000);
        }
      });
    };
    this.ΔⲆΔⲆᐃΔⲆΔᐃ = function (a) {
      var b = [];
      for (var c = 0; c < a.length; c++) {
        if (a[c].a.indexOf(as) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return 0;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ΔⲆⵠᐃΔⲆᐃ = function (b) {
      var c = 0;
      for (var d = 0; b.length > d; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (nx.ⵠⲆᐃⵠΔΔⵠ[nx.ⲆᐃΔΔΔ] === -1) {
        nx.ⵠⲆᐃⵠΔΔⵠ[nx.ⲆᐃΔΔΔ] = e.selectedIndex = nx.ΔⲆΔⲆᐃΔⲆΔᐃ(b);
      } else {
        e.selectedIndex = nx.ⵠⲆᐃⵠΔΔⵠ[nx.ⲆᐃΔΔΔ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + yb[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + yb[323] + " (" + this.ᐃΔΔΔⵠΔⲆ + ") " + yb[325] + "</li>";
      for (d = 0; d < b.length; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + yb[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = nx.ᐃᐃⵠⲆᐃ[nx.ⲆᐃΔΔΔ], e = 0; e < d.length; e++) {
          if (a(d[e]) === b) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          nx.ⵠⲆᐃⵠΔΔⵠ[nx.ⲆᐃΔΔΔ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ᐃΔΔΔⵠΔⲆ = 0;
    this.ⲆⵠⲆΔⵠΔᐃΔΔ = function () {
      this.ᐃΔΔΔⵠΔⲆ = 0;
      for (var a = 0; a < nx.ᐃⵠⵠΔⲆ.length; a++) {
        if (this.ᐃⵠⵠΔⲆ[a].gm == "experimental") {
          this.ᐃᐃⵠⲆᐃ[7].push(this.ᐃⵠⵠΔⲆ[a]);
        } else if (this.ᐃⵠⵠΔⲆ[a].gm == "zombies") {
          this.ᐃᐃⵠⲆᐃ[2].push(this.ᐃⵠⵠΔⲆ[a]);
        } else if (this.ᐃⵠⵠΔⲆ[a].gm == "community") {
          this.ᐃᐃⵠⲆᐃ[6].push(this.ᐃⵠⵠΔⲆ[a]);
        } else if (this.ᐃⵠⵠΔⲆ[a].gm == "forest") {
          this.ᐃᐃⵠⲆᐃ[4].push(this.ᐃⵠⵠΔⲆ[a]);
        } else if (this.ᐃⵠⵠΔⲆ[a].gm == "battle-royale") {
          this.ᐃᐃⵠⲆᐃ[5].push(this.ᐃⵠⵠΔⲆ[a]);
        } else if (this.ᐃⵠⵠΔⲆ[a].gm == "vampires") {
          this.ᐃᐃⵠⲆᐃ[3].push(this.ᐃⵠⵠΔⲆ[a]);
        } else {
          this.ᐃᐃⵠⲆᐃ[0].push(this.ᐃⵠⵠΔⲆ[a]);
        }
        this.ᐃΔΔΔⵠΔⲆ += this.ᐃⵠⵠΔⲆ[a].nu;
      }
      for (a = 0; this.ᐃᐃⵠⲆᐃ.length > a; a++) {
        if (this.ᐃᐃⵠⲆᐃ[a].length === 0) {
          this.ᐃᐃⵠⲆᐃ[a].push({
            a: yb[327],
            ⵠΔⵠᐃⵠⲆⵠΔⲆ: 0,
            ⵠⵠ: "127.0.0.1",
            ⵠΔⲆ: 80
          });
        }
      }
      this.ΔⲆⵠᐃΔⲆᐃ(this.ᐃᐃⵠⲆᐃ[0]);
      this.ⵠΔⵠⵠΔ = function (a) {
        nx.ⲆᐃΔΔΔ = a;
        nx.ΔⲆⵠᐃΔⲆᐃ(nx.ᐃᐃⵠⲆᐃ[nx.ⲆᐃΔΔΔ]);
        nx.ΔⲆⵠᐃΔⲆᐃ(nx.ᐃᐃⵠⲆᐃ[nx.ⲆᐃΔΔΔ]);
        document.getElementById("servselect").selectedIndex = nx.ⲆᐃΔΔΔ;
      };
    };
    this.ⲆⲆⲆᐃⲆᐃΔ = 0;
    this.ⲆΔⵠⲆΔᐃᐃ = 0;
    this.ΔᐃⵠΔΔ = null;
    this.timeout = function () {
      c.ⲆΔⵠⲆΔᐃᐃ++;
      c.ⵠΔΔⲆ.close();
      if (c.ⲆΔⵠⲆΔᐃᐃ > 3) {
        yx = 1;
        jx.ΔᐃΔΔᐃⵠᐃΔΔ = Kw.ᐃⲆΔⲆⲆⲆⵠⲆⵠ;
        c.ⲆⲆΔΔᐃ(yb[300]);
        jx.waiting = false;
        if (lx.reconnect.enabled) {
          ox.ⲆᐃⲆⲆΔ(jx.ⲆΔⵠΔᐃ);
        }
      } else if (lx.ΔⲆᐃⵠΔⵠⲆ === undefined || lx.ⵠⵠⲆⲆᐃᐃᐃ === undefined || lx.ⲆΔᐃⵠⵠΔᐃ === undefined || lx.ᐃΔⵠᐃᐃⲆⲆ === undefined) {
        jx.ⵠΔⲆΔΔΔⲆ(function () {
          c.ⵠΔⵠᐃⲆⵠΔ();
        }, 1);
      } else {
        c.ⵠΔⵠᐃⲆⵠΔ();
      }
    };
    this.ΔᐃⵠⲆⵠᐃⲆ = function (a) {
      if (this.ⵠΔΔⲆ.ⵠᐃᐃⵠΔ == this.ⵠᐃᐃⵠΔ) {
        this.ⵠᐃᐃⵠΔ++;
        this.ⲆⲆΔΔᐃ(yb[301] + a);
        ox.ⲆᐃⲆⲆΔ(jx.ⲆΔⵠΔᐃ);
      }
    };
    this.ΔΔΔΔⲆⲆⵠⵠⲆ = function () {
      this.ⲆⲆΔΔᐃ("You speak too much");
    };
    this.ⲆⵠΔΔᐃⲆᐃⲆⲆ = function () {
      clearTimeout(this.ΔᐃⵠΔΔ);
      this.ⲆⲆΔΔᐃ(yb[302]);
      jx.waiting = false;
    };
    this.ⲆᐃⵠᐃᐃⵠⲆᐃⲆ = function () {
      lx.ⵠⲆΔⵠⲆ.open = sh;
    };
    this.ⲆᐃⲆΔⵠᐃᐃⵠΔ = function () {
      ox.ᐃⲆᐃᐃᐃⲆⲆ = 0;
    };
    this.ΔΔⵠⵠⲆⲆⲆⲆⵠ = function () {
      ox.ΔⲆⵠⵠⲆΔΔ = 0;
    };
    this.ΔΔΔΔⲆⲆΔΔᐃ = function (a) {
      lx.ᐃᐃΔΔᐃ.ΔⵠⲆΔⲆ = a;
      if (kx.ⲆⵠⲆΔΔ > -300) {
        if (a === 0) {
          this.ⲆⲆΔΔᐃ(yb[340]);
        } else {
          this.ⲆⲆΔΔᐃ(yb[341]);
        }
      }
    };
    this.ⵠᐃⵠΔⲆ = function (a) {
      lx.ⵠᐃⵠΔⲆ = a;
    };
    this.ⵠᐃⵠᐃᐃⲆᐃᐃⲆ = function (a) {
      lx.ⵠΔⲆⵠΔΔᐃ = a;
    };
    this.ⵠΔⲆⵠΔΔᐃ = function (a) {
      lx.ΔᐃⵠⵠΔ.ΔⵠⲆΔⲆ = a;
      if (kx.ᐃΔᐃᐃⵠ > -300) {
        if (a === 0) {
          this.ⲆⲆΔΔᐃ(yb[342]);
        } else {
          this.ⲆⲆΔΔᐃ(yb[343]);
        }
      }
    };
    this.ⲆⲆΔᐃⲆΔⵠⵠⲆ = function (a) {
      if (a === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ᐃⲆΔᐃΔⵠⵠΔⵠ = function () {
      ox.ΔⲆᐃⲆⲆⵠᐃ = 0;
    };
    this.ⲆᐃⵠΔΔⵠΔΔᐃ = function () {
      ox.ⲆⲆⲆΔΔⲆⵠ = 0;
    };
    this.ΔⲆⵠΔⵠⵠΔᐃⲆ = function () {
      lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ = [];
      lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ = [];
      lx.ᐃⵠⵠᐃ.id = -1;
      lx.ᐃⵠⵠᐃ.ⲆⲆΔΔΔⲆⵠ.stop();
      lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ = [];
      lx.ⲆᐃΔΔ.ⲆᐃⵠⲆⲆ = false;
      lx.ⲆᐃΔΔ.ΔⲆⵠΔⲆⲆⵠᐃᐃ = false;
      lx.ⲆᐃΔΔ.ΔⲆΔΔ = -1;
      lx.ⲆᐃΔΔ.id = -1;
      lx.ⲆᐃΔΔ.ΔᐃⲆⵠⲆ = false;
      lx.ⲆᐃΔΔ.ᐃⵠᐃᐃⲆ = false;
      lx.ⲆᐃΔΔ.ΔⵠΔᐃⵠ = ik;
      lx.ⲆᐃΔΔ.ⵠⵠⵠⲆⵠᐃᐃ = $n;
      lx.ⲆᐃΔΔ.timeout = new ΔΔⲆ.ΔᐃᐃΔ(Es, 0, 1, 0, 1, 1);
    };
    this.ⵠΔⲆᐃΔᐃⲆᐃⵠ = function () {
      clearTimeout(this.ΔᐃⵠΔΔ);
      this.ⲆⲆΔΔᐃ();
      jx.waiting = Pg;
    };
    this.ⲆᐃⲆⲆΔⵠΔ = function (a) {
      for (var b = 0; b < a.length; b++) {
        if (typeof a[b] === "string") {
          a[b] = ΔΔⲆ.ΔΔⵠΔⲆⲆᐃ(a[b]);
        }
      }
      lx.ᐃΔⵠᐃΔ.ⲆᐃᐃⵠΔ(a[1], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.ⲆⲆΔΔᐃ(a);
    };
    this.ⵠᐃⵠᐃⲆΔⲆΔᐃ = function () {
      clearTimeout(this.ΔᐃⵠΔΔ);
      this.ⲆⲆΔΔᐃ(yb[339]);
      jx.waiting = Ea;
    };
    this.ⵠΔⲆⵠᐃᐃΔⵠΔ = function () {
      clearTimeout(this.ΔᐃⵠΔΔ);
      this.ⲆⲆΔΔᐃ(yb[338]);
      jx.waiting = gl;
    };
    this.ᐃⲆⵠⲆΔⵠⲆΔᐃ = function () {
      clearTimeout(this.ΔᐃⵠΔΔ);
      this.ⲆⲆΔΔᐃ(yb[304]);
      jx.waiting = false;
    };
    this.ⵠⲆᐃΔⲆΔⵠᐃᐃ = function () {
      lx.ᐃⵠⵠᐃ.ⲆΔⵠⲆⲆᐃᐃ(1, 0);
      ox.ⵠᐃⵠΔᐃΔᐃ();
    };
    this.ⲆᐃⲆΔⵠΔⵠⵠⵠ = function (a) {
      var b = a[1];
      var c = kx.ⲆⲆⵠⵠ[b];
      c.ᐃⵠᐃⲆ = a[2];
      c.ⲆΔⲆⲆⵠ = a[3];
      c.ΔⵠΔᐃⲆⵠⵠ = a[4];
      c.ᐃⲆΔᐃⵠ = a[5];
      c.ⵠⵠⲆᐃᐃ = a[6];
      c.ⲆᐃⵠΔⲆ = a[7];
      c.level = a[8];
      var d = kx.ⲆᐃΔΔᐃ[b * kx.ⵠⲆΔΔᐃᐃⵠ];
      if (d) {
        d.ᐃⵠᐃⲆ = a[2];
        d.ⲆΔⲆⲆⵠ = a[3];
        d.ΔⵠΔᐃⲆⵠⵠ = a[4];
        d.ᐃⲆΔᐃⵠ = a[5];
      }
    };
    this.ⵠⲆΔᐃᐃⲆΔⲆᐃ = function (a) {
      if (a === 29) {
        lx.ᐃⵠⵠᐃ.ⲆΔⵠⲆⲆᐃᐃ(1, 0);
        ox.ⵠᐃⵠΔᐃΔᐃ();
      } else {
        this.ΔᐃⲆⲆⵠΔⲆ([0, a, 1]);
      }
      lx.ⲆᐃΔΔ.ⵠⵠⲆⵠΔⲆΔ();
    };
    this.ⲆΔⵠΔΔⵠⵠᐃⵠ = function (a) {
      lx.ⲆⲆΔᐃᐃ.ⵠⵠΔⵠΔ = 0;
      lx.ⲆᐃΔΔ.ⵠᐃᐃⲆᐃᐃⵠᐃⲆ(a);
    };
    this.ᐃΔⲆᐃⲆΔⲆⲆΔ = function (a) {
      for (var b = Bt[a].r, c = 0; c < b.length; c++) {
        if (lx.ᐃⵠⵠᐃ.max > lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ.length || lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ΔᐃⲆⲆⵠΔⲆ([0, b[c][0], d]);
        }
      }
      lx.ⲆᐃΔΔ.ⵠⵠⲆⵠΔⲆΔ();
    };
    this.ᐃⵠᐃⲆΔᐃᐃᐃᐃ = function (a) {
      lx.ⲆⲆΔᐃᐃ.ⵠⵠΔⵠΔ = 0;
      lx.ⲆᐃΔΔ.ⵠⲆⵠⲆΔᐃᐃᐃΔ(a);
    };
    this.ⲆⲆΔΔᐃ = function (a) {
      if (lx.alert.text) {
        if (a !== lx.alert.text && lx.alert.list[lx.alert.list.length - 1] !== a) {
          lx.alert.list.push(a);
        }
      } else {
        lx.alert.text = a;
      }
    };
    this.ⲆᐃᐃΔΔΔⵠᐃΔ = function () {
      this.ⲆⲆΔΔᐃ(yb[305]);
    };
    this.ΔᐃⲆⵠΔᐃΔΔⲆ = function () {
      var a;
      a = lx.ΔΔᐃ == 0 ? yb[306] : yb[307] + (lx.ΔΔᐃ + 1) + yb[308];
      this.ⲆⲆΔΔᐃ(a);
      lx.ΔΔᐃ++;
    };
    this.ᐃᐃᐃΔᐃⲆⲆⵠᐃ = function () {
      clearTimeout(c.ΔᐃⵠΔΔ);
      lx.reconnect.enabled = ig;
      lx.ⲆΔΔΔᐃ = false;
      this.ⲆⲆΔΔᐃ(yb[309]);
      ox.ⲆᐃⲆⲆΔ(jx.ⲆΔⵠΔᐃ);
      this.ⵠΔΔⲆ.close();
    };
    this.ⲆΔⵠⲆΔⵠⲆΔⵠ = function () {
      yx = 1;
      clearTimeout(this.ΔᐃⵠΔΔ);
      this.ⲆⲆΔΔᐃ(yb[310]);
      jx.waiting = false;
    };
    this.ᐃⲆᐃΔⵠⲆⵠΔⵠ = function () {
      yx = 1;
      clearTimeout(this.ΔᐃⵠΔΔ);
      this.ⲆⲆΔΔᐃ(yb[311]);
      jx.waiting = Ag;
    };
    this.ΔΔΔⵠΔᐃΔⵠⵠ = function (a) {
      var b = a[1];
      var c = kx.ⲆⲆⵠⵠ;
      c[b].ᐃᐃⵠⲆΔ = a[2];
      c[b].ᐃⵠᐃⲆ = a[3];
      c[b].ⲆΔⲆⲆⵠ = a[4];
      c[b].ΔⵠΔᐃⲆⵠⵠ = a[5];
      c[b].ᐃⲆΔᐃⵠ = a[6];
      c[b].ⵠⵠⲆᐃᐃ = a[7];
      c[b].ⲆᐃⵠΔⲆ = a[8];
      c[b].level = a[9];
      c[b].ᐃᐃΔᐃⵠ = 0;
      c[b].ⲆⲆⵠΔⵠΔⲆ = null;
      c[b].label = null;
      c[b].ⲆΔⲆⲆⵠⲆⵠ = null;
      c[b].ⲆΔΔΔᐃ = true;
      if (nf === 1) {
        c[b].ᐃᐃⵠⲆΔ += "|" + b;
      }
    };
    this.ᐃᐃⲆⲆΔΔᐃⲆᐃ = function () {
      this.ⵠΔΔⲆ[tf](Zo[ra].stringify([9]));
    };
    this.ⵠΔⲆⵠᐃᐃⲆᐃⲆ = function () {
      this.ⲆⲆΔΔᐃ(yb[312]);
    };
    this.ⲆⵠΔⵠᐃᐃⵠ = function () {
      this.ⲆⲆΔΔᐃ(yb[313]);
    };
    this.ΔⲆᐃⵠᐃⵠᐃⲆⲆ = function (a) {
      this.ⵠΔΔⲆ[tf](ka[uq].stringify([38, a]));
      lx.ⵠⲆΔⵠⲆ.open = hj;
    };
    this.ᐃⲆⲆᐃᐃᐃⵠⲆᐃ = function (a) {
      for (var b = uf[a - 1].items, c = 0; c < b.length && lx.ᐃⵠⵠᐃ.max > lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ.length; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][1] === 29) {
          lx.ᐃⵠⵠᐃ.ⲆΔⵠⲆⲆᐃᐃ(1, 0);
        } else {
          this.ΔᐃⲆⲆⵠΔⲆ([0, d, e]);
        }
      }
    };
    this.ΔᐃⲆⲆⵠΔⲆ = function (b) {
      for (var c = b.length, d = lx.ᐃⵠⵠᐃ, e = 1; e < c; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; h < d.ᐃΔΔⵠⵠ.length; h++) {
          if (d.ᐃΔΔⵠⵠ[h].id == f) {
            d.ᐃᐃⵠᐃ[f] += g;
            break;
          }
        }
        if (h == d.ᐃΔΔⵠⵠ.length) {
          d.ᐃᐃⵠᐃ[f] = g;
          d.ᐃΔΔⵠⵠ.push(ox.ᐃⲆᐃ[f]);
          ox.ⵠᐃⵠΔᐃΔᐃ();
        }
      }
      lx.ⲆᐃΔΔ.ΔⵠΔ();
    };
    this.ΔᐃᐃⲆ = function (b, c, d, e, f, g, a) {
      lx.ΔᐃᐃⲆ.ⵠⲆΔΔ = b / 100;
      lx.ΔᐃᐃⲆ.ⲆΔⲆ = c / 100;
      lx.ΔᐃᐃⲆ.c = d / 100;
      lx.ΔᐃᐃⲆ.ⵠⲆΔ = e / 100;
      lx.ΔᐃᐃⲆ.ⲆⲆⲆ = f / 100;
      lx.ΔᐃᐃⲆ.ΔΔᐃᐃᐃᐃᐃ = g / 100;
      lx.ⵠᐃⵠΔⲆ = a;
    };
    this.ᐃᐃⲆⲆΔΔⵠⵠⵠ = function (a) {
      ox.ⵠⲆᐃⵠ.modify(a, 2);
    };
    this.ΔⵠⵠΔΔΔᐃⲆΔ = function (a) {
      ox.ⵠⲆᐃⵠ.modify(a, 0);
    };
    this.claimed = function (a) {
      ox.ⵠⲆᐃⵠ.modify(a, 3);
    };
    this.ⲆΔΔΔⲆⲆⵠΔᐃ = function (a, b) {
      lx.ΔᐃᐃⲆ.ⵠⲆΔΔ = a / 100;
      lx.ⵠᐃⵠΔⲆ = b;
    };
    this.ⵠⵠⵠΔᐃⵠⵠᐃⲆ = function (a) {
      lx.ΔᐃᐃⲆ.ⵠⲆΔ = a / 100;
    };
    this.ΔᐃⵠⲆⲆⵠΔᐃⲆ = function (a) {
      lx.ΔᐃᐃⲆ.ⲆΔⲆ = a / 100;
    };
    this.ΔⵠⲆᐃᐃΔΔΔᐃ = function (a) {
      lx.ΔᐃᐃⲆ.ΔΔᐃᐃᐃᐃᐃ = a / 100;
    };
    this.ᐃⲆᐃΔⲆⵠⵠⲆᐃ = function (a) {
      lx.ΔᐃᐃⲆ.c = a / 100;
    };
    this.ⲆᐃΔⵠᐃΔⵠΔⲆ = function (a) {
      kx.time = a;
      kx.transition = Zq;
      px.transition = 1;
    };
    this.ΔΔᐃⲆᐃᐃⲆᐃⵠ = function () {
      document.getElementById("game_body").style.backgroundColor = ts.ⵠⲆⲆᐃᐃ[kx.time];
    };
    this.ⲆⵠΔᐃⲆⵠⲆⲆΔ = function (a) {
      if (kx.mode == 1 && kx.ⲆⲆⵠⵠ[a].ᐃᐃⵠⲆΔ !== "spectator") {
        this.ⲆⲆΔΔᐃ(kx.ⲆⲆⵠⵠ[a].ᐃᐃⵠⲆΔ + yb[314]);
      }
      kx.ⲆⲆⵠⵠ[a].ⲆΔΔΔᐃ = Pg;
    };
    this.ⲆⵠⵠΔᐃᐃΔΔⲆ = function (a) {
      var b = new Uint16Array(a);
      ᐃΔⲆᐃ.ⲆΔᐃ.ᐃΔᐃᐃⲆ(b[1], b[2]);
    };
    this.ᐃᐃΔⵠⵠⲆⵠⵠⲆ = function (a) {
      var b = new Uint16Array(a);
      lx.ⲆΔᐃ.ᐃΔᐃᐃⲆ(b[1], b[2]);
    };
    this.ⲆᐃⲆⲆⵠⲆⲆᐃΔ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = 0; e > f; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = Math.PI * ((b[5 + f * 4] >> 1) / 127) * 2;
        var k = kx.ⲆᐃΔΔᐃ[i * kx.ⵠⲆΔΔᐃᐃⵠ + g];
        if (k && k.ⵠᐃΔ) {
          if (px.loaded && px.ⲆΔⵠΔᐃ) {
            px.ⵠᐃΔ(b[5 + f * 4] & 1, ΔⲆΔΔⲆ[k.type], k.x, k.y);
          }
          k.ⵠᐃΔ.angle = j;
          k.ⵠᐃΔ.ΔⵠΔ = j;
        }
      }
    };
    this.ⲆⵠⵠΔΔΔᐃᐃⵠ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, e = 0; d > e; e++) {
        var f;
        var i = e * 4;
        var j = c[1 + i];
        var k = c[2 + i];
        var m = (c[3 + i] >> 1) / 127 * Math.PI * 2;
        var p = c[4 + i];
        var q = hx.ⲆⵠΔᐃ[k][j];
        switch (p) {
          case 0:
            (f = q.p[0][0]).angle = m;
            f.ΔⵠΔ = A;
            break;
          case 1:
            (f = q.s[0][0]).angle = m;
            f.ΔⵠΔ = $l;
            break;
          case 2:
            (f = q.s[1][0]).angle = m;
            f.ΔⵠΔ = I;
            break;
          case 3:
            (f = q.s[2][0]).angle = m;
            f.ΔⵠΔ = Ns;
            break;
          case 4:
            (f = q.t[0][0]).angle = m;
            f.ΔⵠΔ = Vg;
            break;
          case 5:
            (f = q.t[1][0]).angle = m;
            f.ΔⵠΔ = Jk;
            break;
          case 6:
            (f = q.t[2][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 7:
            (f = q.t[3][0]).angle = m;
            f.ΔⵠΔ = En;
            break;
          case 8:
            (f = q.t[4][0]).angle = m;
            f.ΔⵠΔ = Zq;
            break;
          case 9:
            (f = q.t[5][0]).angle = m;
            f.ΔⵠΔ = Xa;
            break;
          case 10:
            (f = q.g[0][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 11:
            (f = q.g[1][0]).angle = m;
            f.ΔⵠΔ = is;
            break;
          case 12:
            (f = q.g[2][0]).angle = m;
            f.ΔⵠΔ = En;
            break;
          case 13:
            (f = q.d[0][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 14:
            (f = q.d[1][0]).angle = m;
            f.ΔⵠΔ = Qo;
            break;
          case 15:
            (f = q.d[2][0]).angle = m;
            f.ΔⵠΔ = Zq;
            break;
          case 16:
            (f = q.b[0][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 17:
            (f = q.b[1][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 18:
            (f = q.b[2][0]).angle = m;
            f.ΔⵠΔ = I;
            break;
          case 19:
            (f = q.b[3][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 20:
            (f = q.f[0][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 21:
            (f = q.f[1][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 22:
            (f = q.f[2][0]).angle = m;
            f.ΔⵠΔ = Bh;
            break;
          case 23:
            (f = q.sw[0][0]).angle = m;
            f.ΔⵠΔ = pl;
            break;
          case 24:
            (f = q.sw[1][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 25:
            (f = q.sw[2][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 26:
            (f = q.gw[0][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 27:
            (f = q.gw[1][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 28:
            (f = q.gw[2][0]).angle = m;
            f.ΔⵠΔ = pl;
            break;
          case 29:
            (f = q.dw[0][0]).angle = m;
            f.ΔⵠΔ = Ho;
            break;
          case 30:
            (f = q.dw[1][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 31:
            (f = q.dw[2][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 32:
            (f = q.a[0][0]).angle = m;
            f.ΔⵠΔ = kg;
            break;
          case 33:
            (f = q.a[1][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 34:
            (f = q.a[2][0]).angle = m;
            f.ΔⵠΔ = is;
            break;
          case 35:
            (f = q.cs[0][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 36:
            (f = q.cs[1][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 37:
            (f = q.cs[2][0]).angle = m;
            f.ΔⵠΔ = A;
            break;
          case 38:
            (f = q.cs[3][0]).angle = m;
            f.ΔⵠΔ = Vg;
            break;
          case 40:
            (f = q.plm[0][0]).angle = m;
            f.ΔⵠΔ = $l;
            break;
          case 41:
            (f = q.plm[1][0]).angle = m;
            f.ΔⵠΔ = kg;
            break;
          case 42:
            (f = q.plm[2][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 50:
            (f = q.re[0][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 51:
            (f = q.re[1][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 52:
            (f = q.re[2][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 55:
            (f = q.c[0][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 56:
            (f = q.m[0][0]).angle = m;
            f.ΔⵠΔ = Ns;
            break;
          case 57:
            (f = q.m[1][0]).angle = m;
            f.ΔⵠΔ = true;
            break;
          case 58:
            (f = q.m[2][0]).angle = m;
            f.ΔⵠΔ = true;
        }
        if (px.loaded && px.ⲆΔⵠΔᐃ && f) {
          px.ⵠᐃΔ(c[3 + i] & 1, ⲆⲆΔⵠ[p], f.x, f.y);
        }
      }
    };
    this.ⵠΔΔⲆΔ = function () {
      this.ⵠΔΔⲆ[tf](da[ia].stringify([35, lx.ⵠΔΔⲆΔ.ⵠⵠⲆᐃ, lx.ⵠΔΔⲆΔ.ⵠΔⵠΔⲆ]));
    };
    this.ΔⲆⲆᐃᐃⵠᐃᐃⵠ = function (a, b) {
      this.ⵠΔΔⲆ[tf](da[Ma].stringify([30, b, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ]));
    };
    this.ⲆᐃⵠⵠⵠΔᐃ = function (a, b, c) {
      if (b) {
        this.ⵠΔΔⲆ[tf](da[Ma].stringify([14, b, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ]));
      } else {
        this.ⵠΔΔⲆ[tf](da[ma].stringify([25, c, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ]));
      }
    };
    this.ᐃΔΔⵠᐃΔᐃⵠⲆ = function (a) {
      this.ⵠΔΔⲆ[tf](Sa[Fa].stringify([13, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ]));
    };
    this.ᐃⵠⲆΔᐃⵠⲆⵠⵠ = function (a) {
      this.ⵠΔΔⲆ[tf](Sa[Za].stringify([32, a]));
    };
    this.ⲆⵠΔᐃΔΔᐃᐃΔ = function (a) {
      this.ⵠΔΔⲆ[tf](Ia[ia].stringify([29, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ]));
    };
    this.ᐃΔᐃᐃᐃΔⵠⲆΔ = function (a, b) {
      this.ⵠΔΔⲆ[tf](ka[Fa].stringify([27, b, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ, a.type]));
    };
    this.ⵠⵠⲆⲆᐃᐃⵠⵠⵠ = function (a, b) {
      this.ⵠΔΔⲆ[tf](ka[Fa].stringify([7, b, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ]));
    };
    this.ᐃΔᐃᐃⵠⲆᐃΔΔ = function (a, b, c) {
      this.ⵠΔΔⲆ[tf](Ia[Ma].stringify([1, b, c, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ]));
    };
    this.ⵠΔⲆⵠⵠᐃΔ = function (a) {
      this.ⵠΔΔⲆ[tf](Sa[Fa].stringify([37, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ, a.type]));
    };
    this.ΔⲆⵠⲆΔΔⵠᐃΔ = function (a) {
      this.ⵠΔΔⲆ[tf](Sa[Fa].stringify([4, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ]));
    };
    this.ⲆᐃⲆⵠΔΔⲆᐃⲆ = function (a) {
      this.ⵠΔΔⲆ[tf](Sa[Fa].stringify([8, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ]));
    };
    this.ⵠᐃⵠⵠᐃΔᐃΔᐃ = function (a) {
      this.ⵠΔΔⲆ[tf](wq[Na].stringify([20, a.ⵠⵠⲆᐃ, a.ⵠΔⵠΔⲆ]));
    };
    this.ⲆⵠᐃⲆⵠⵠⵠΔⲆ = function (a) {
      this.ⵠΔΔⲆ[tf](Ka[uq].stringify([3, a.ⵠΔⵠΔⲆ]));
    };
    this.ᐃⵠΔᐃᐃⲆᐃ = function (a) {
      c.ⵠΔΔⲆ[tf](zq[Za].stringify([23, lx.ⲆΔⲆⵠΔ.id, lx.ⵠⲆᐃΔⲆ[a]]));
    };
    this.ΔⲆᐃΔⲆᐃᐃⵠⵠ = function () {
      c.ⵠΔΔⲆ[tf](Kq[Iq].stringify([17, lx.ⲆΔⲆⵠΔ.ⵠⵠⲆᐃ, lx.ⲆΔⲆⵠΔ.id]));
    };
    this.ⲆⲆⲆᐃᐃᐃⵠ = function () {
      c.ⵠΔΔⲆ[tf](Lq[Jq].stringify([12]));
    };
    this.ΔⵠⲆᐃΔⲆⲆΔⲆ = function () {
      c.ⵠΔΔⲆ[tf](Lq[Za].stringify([19, lx.ⲆΔⲆⵠΔ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        lx.ⲆΔⲆⵠΔ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        lx.ⲆΔⲆⵠΔ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ⵠⵠΔ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        kx.ᐃⲆⵠᐃⲆΔΔⲆⵠ();
      }
      for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
        var q = 2 + o * 18;
        var t = 1 + o * 9;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + 5];
        var z = w * kx.ⵠⲆΔΔᐃᐃⵠ + y;
        if (x & 1) {
          kx.ⲆⵠΔⲆⲆⲆⲆᐃΔ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + 6];
          var F = k[t + 7];
          var G = k[t + 8];
          var H = Math.PI * (e[q + 1] / 255) * 2;
          if (kx.ⲆᐃΔΔᐃ[z]) {
            var I = kx.ⲆᐃΔΔᐃ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && ΔΔⲆ.ⵠΔⲆⲆ(I, I.r) > 200) {
              I.x = B;
              I.y = D;
            }
            if (lx.id !== I.id || w === 0) {
              I.ⲆⲆⵠⲆᐃⵠᐃ = H;
            }
            I.action |= x;
            I.info = E;
            I.ΔⲆᐃᐃΔ = F;
            I.ΔΔⲆⲆᐃ = G;
            if (I.ΔⵠΔ) {
              I.ΔⵠΔ(x);
            }
          } else {
            var J = new Pf(A, w, y, B, D, H, x, E, F, G);
            kx.ⲆᐃΔΔᐃ[z] = J;
            kx.ⵠⵠΔ[A].push(J);
          }
        }
      }
    };
    this.ᐃⲆΔⲆ = function (a) {
      this.ⲆⲆⲆᐃⲆᐃΔ = sx;
      var b = new Uint16Array(a);
      lx.ΔⲆᐃΔⵠ.ᐃⵠⵠΔᐃ(b);
    };
    this.ⲆⵠᐃⲆⵠⵠⲆⵠⲆ = function (a) {
      if (At !== eg) {
        Bt = At;
      }
      if (a.length > 0) {
        At = JSON.parse(JSON.stringify(Bt));
        for (var b = 0; a.length > b; b++) {
          var c = a[b];
          var d = Bt[c.item];
          if (ij !== d) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ⲆⲆⲆ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ⲆⵠΔΔⲆΔΔ = function (a) {
      if (a && a.length !== 0) {
        lx.ⲆⵠΔΔⲆΔΔ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ᐃᐃ = [];
          var f = b.length * 18 + 10;
          var g = 0;
          d.font = 14 + "px Baloo Paaji";
          for (var h = 0; h < b.length; h++) {
            if (b[h].charAt(0) === "#") {
              ᐃᐃ[h] = b[h].substring(0, 7);
              b[h] = b[h].substring(8);
            } else {
              ᐃᐃ[h] = "#FFFFFF";
            }
            g = Math.max(d.measureText(b[h]).width + 16, g);
          }
          c.height = f;
          c.width = g;
          h = 0;
          for (; h < b.length; h++) {
            var i = gu(1, b[h], 14, ᐃᐃ[h], null, null, null, null, null, "#000", 6);
            d.drawImage(i, 8, h * 18 + 5);
          }
          return c;
        }(a);
      } else {
        lx.ⲆⵠΔΔⲆΔΔ.message = undefined;
      }
    };
    this.ⲆΔⲆᐃᐃ = function (a) {
      var b = kx.ⲆᐃΔΔᐃ[a[1] * kx.ⵠⲆΔΔᐃᐃⵠ];
      if (b) {
        if (kx.mode === 2 && b.ᐃⵠᐃⲆ === 0) {
          if (lx.ᐃᐃⲆⵠⲆ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ᐃⵠᐃΔⵠ);
            } else {
              b.text.push(ᐃⵠᐃΔⵠ + "... " + a[2]);
            }
          } else {
            b.text.push(ⲆⵠᐃⲆΔᐃⲆ[Math.floor(Math.random() * ⲆⵠᐃⲆΔᐃⲆ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ᐃᐃⲆⵠⲆᐃⵠⵠⵠ = function (a) {
      if (lx.ᐃⵠⵠᐃ.max !== lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ.length || Bt[a].ⵠⲆⵠΔ === 29 || lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(Bt[a].ⵠⲆⵠΔ) != -1 || lx.ᐃⵠⵠᐃ.ⲆᐃΔᐃᐃⲆᐃΔⵠ(Bt[a].r)) {
        this.ⵠΔΔⲆ[tf](Zo[ra].stringify([26, a]));
        return 1;
      } else {
        this.ⲆⵠΔⵠᐃᐃⵠ();
        return 0;
      }
    };
    this.ΔᐃⲆⵠⲆ = function (a) {
      lx.ⲆᐃΔΔ.ΔΔᐃΔᐃΔⲆⵠΔ(a);
    };
    this.ᐃⵠᐃᐃⲆ = function (a) {
      lx.ⲆᐃΔΔ.ᐃⵠᐃᐃⲆ = a;
      lx.ⲆᐃΔΔ.ΔⵠΔ();
    };
    this.ΔⵠΔᐃⵠ = function (a) {
      lx.ⲆᐃΔΔ.ΔⵠΔᐃⵠ = a;
      lx.ⲆᐃΔΔ.ΔⵠΔ();
    };
    this.ⵠⵠⵠⲆⵠᐃᐃ = function (a) {
      lx.ⲆᐃΔΔ.ⵠⵠⵠⲆⵠᐃᐃ = a;
      lx.ⲆᐃΔΔ.ΔⵠΔ();
    };
    this.ⵠᐃⵠⵠⵠⲆΔⵠΔ = function (a) {
      this.ⲆⲆΔΔᐃ(yb[315]);
    };
    this.ΔᐃⵠΔⵠⵠⲆΔᐃ = function () {
      lx.ⲆᐃΔΔ.ⵠⵠⲆⵠΔⲆΔ();
    };
    this.ᐃΔⵠⲆⲆ = function (a) {
      ox.ᐃΔⵠⲆⲆ.ⲆⲆⵠⵠ = [];
      var b = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      var c = 0;
      for (var d = 1; a.length > d; d += 2) {
        var e = {
          x: Math.floor(a[d] * kx.w / 250),
          y: Math.floor(a[d + 1] * kx.ⲆΔⲆ / 250)
        };
        if (b && !c && !lx.ᐃΔⲆᐃᐃⲆⲆ && ΔΔⲆ.ⵠΔⲆⲆ(e, b) < 250) {
          c += 1;
        } else {
          ox.ᐃΔⵠⲆⲆ.ⲆⲆⵠⵠ.push(e);
        }
      }
    };
    this.ᐃᐃⲆⵠⲆⵠⲆⲆᐃ = function () {
      lx.ⵠΔΔⲆΔ.open = false;
      lx.ΔᐃⵠⲆⵠ.enabled = false;
      lx.ΔᐃⵠⲆⵠ.ⵠⵠΔⵠΔ = -1;
      lx.ΔᐃⵠⲆⵠ.label = null;
      lx.ΔᐃⵠⲆⵠ.ⵠⲆΔⲆⵠΔΔ = null;
      lx.ΔᐃⵠⲆⵠ.now = -1;
    };
    this.ΔᐃⵠⲆⵠ = function (a) {
      Cf.ⲆᐃⵠᐃΔᐃⲆ = a;
      lx.ΔᐃⵠⲆⵠ.enabled = true;
      lx.ΔᐃⵠⲆⵠ.ⵠⵠΔⵠΔ = new Date().getTime();
      lx.ΔᐃⵠⲆⵠ.label = null;
      lx.ΔᐃⵠⲆⵠ.now = -1;
      for (var b = [39, 45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; b.length > c; c++) {
        var d = lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(b[c]);
        if (d != -1) {
          lx.ᐃⵠⵠᐃ.ⲆΔⲆΔⵠᐃⵠ(b.length[c], d);
        }
      }
      lx.ⲆᐃΔΔ.ⵠⵠⲆⵠΔⲆΔ();
    };
    this.ᐃⲆᐃΔⵠⵠΔⵠⵠ = function (a, b, c) {
      this.ⵠΔᐃΔΔᐃⲆ(a, b * 256 + c);
    };
    this.ⵠΔᐃΔΔᐃⲆ = function (a, b) {
      lx.ⲆᐃΔΔ.ΔⲆΔΔ = -1;
      lx.ᐃⵠⵠᐃ.ΔⵠⲆⵠΔΔᐃ(a, b, lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(a));
      lx.ⲆᐃΔΔ.ΔⵠΔ();
    };
    this.ΔⵠⲆΔⵠⵠⵠⵠΔ = function (a) {
      lx.ⲆᐃΔΔ.ΔⲆΔΔ = -1;
      lx.ᐃᐃⲆⵠΔ.wait = true;
      var b = lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(a);
      lx.ᐃⵠⵠᐃ.ΔⵠⲆⵠΔΔᐃ(a, 1, b);
      if (b >= 0 && !lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ[a]) {
        lx.ⲆᐃΔΔ.ΔⵠΔ();
      }
      if (a == 159) {
        lx.ⵠⲆᐃΔⲆ = [lx.id];
      }
    };
    this.ⲆᐃⲆΔⲆⲆⵠⵠⲆ = function () {
      this.ⵠΔΔⲆ[tf](da[ia].stringify([6]));
    };
    this.ᐃΔΔⲆⵠᐃⵠⵠⲆ = function (a) {
      this.ⵠΔΔⲆ[tf](ka[ma].stringify([2, a.ᐃΔᐃΔΔ, a.id]));
    };
    this.ⵠᐃⲆΔΔⵠⲆᐃⵠ = function (a, b) {
      this.ⵠΔΔⲆ[tf](ka[Fa].stringify([10, a, b]));
    };
    this.ⵠⵠⵠᐃⲆᐃⲆⵠΔ = function () {
      var a = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      if (a) {
        var b = Math.PI * 2;
        this.ⵠΔΔⲆ[tf](ka[ma].stringify([22, lx.ⲆᐃΔΔ.ΔⲆΔΔ, Math.floor((a.angle + b) % b * 255 / b), lx.ⲆᐃΔΔ.mode]));
      }
    };
    this.ⵠΔⵠᐃΔ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          lx.ⲆᐃΔΔ.ΔⲆΔΔ = -1;
          this.ⵠΔΔⲆ[tf](Ia[Ma].stringify([34, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!lx.ᐃᐃⲆⵠⲆ) {
            if (a === lx.ⲆᐃΔΔ.ΔⲆΔΔ) {
              lx.ⲆᐃΔΔ.ΔⲆΔΔ = -1;
            } else {
              lx.ⲆᐃΔΔ.ΔⲆΔΔ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case ys.ⲆⲆᐃΔΔᐃⲆⵠⵠ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!lx.ᐃᐃⲆⵠⲆ) {
            lx.ⲆᐃΔΔ.ΔⲆΔΔ = -1;
            if ((c = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ]) && c.right === a) {
              this.ⵠΔΔⲆ[tf](Sa[Fa].stringify([34, 7]));
            } else {
              lx.ΔᐃᐃⵠⲆ.wait = Qo;
              this.ⵠΔΔⲆ[tf](wq[Na].stringify([34, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!lx.ᐃᐃⲆⵠⲆ) {
            lx.ⲆᐃΔΔ.ΔⲆΔΔ = -1;
            if ((c = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ]) && a === c.right) {
              this.ⵠΔΔⲆ[tf](Ka[uq].stringify([34, 7]));
            } else {
              this.ⵠΔΔⲆ[tf](zq[Za].stringify([34, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!lx.ᐃᐃⲆⵠⲆ) {
            lx.ⲆᐃΔΔ.ΔⲆΔΔ = -1;
            var c = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
            this.ⵠΔΔⲆ[tf](zq[Za].stringify([34, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ]) && a !== c.ᐃⵠⵠΔΔ) {
            lx.ⲆΔᐃᐃⲆ.wait = true;
          }
          this.ⵠΔΔⲆ[tf](Ia[Fa].stringify([34, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ⵠΔΔⲆ[tf](Kq[Iq].stringify([34, a]));
      }
    };
    this.ᐃⵠᐃᐃⲆᐃΔΔᐃ = function (a) {
      this.ⵠΔΔⲆ[tf](ka[ra].stringify([31, a]));
    };
    this.ᐃΔᐃⲆⲆΔΔᐃᐃ = function (a) {
      lx.ᐃᐃⲆⵠΔ.wait = $l;
      var b = lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(a);
      lx.ᐃⵠⵠᐃ.ⲆΔⲆΔⵠᐃⵠ(a, b);
      lx.ⲆᐃΔΔ.ΔⵠΔ();
    };
    this.ⲆᐃⲆⵠᐃⲆΔᐃⵠ = function (a, b) {
      this.ⵠΔΔⲆ[tf](Zo[uq].stringify([18, a]));
    };
    this.ΔΔᐃᐃΔⲆⵠⲆⵠ = function (a, b) {
      this.ⵠΔΔⲆ[tf](da[ia].stringify([24, a]));
    };
    this.ᐃΔⵠⲆΔⲆⵠⵠᐃ = function (a) {
      lx.ᐃᐃⲆⵠΔ.wait = true;
      var b = lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(a);
      lx.ᐃⵠⵠᐃ.ΔⵠⲆⵠΔΔᐃ(a, 1, b);
      lx.ⲆᐃΔΔ.ΔⵠΔ();
    };
    this.ⵠⲆᐃΔⵠΔΔᐃᐃ = function (a) {
      var b = a[1];
      var c = a[2];
      lx.ᐃᐃⲆⵠΔ.wait = rl;
      var d = lx.ᐃⵠⵠᐃ.ⵠᐃᐃΔΔ(b);
      lx.ᐃⵠⵠᐃ.ΔⵠⲆⵠΔΔᐃ(b, c, d);
      lx.ⲆᐃΔΔ.ΔⵠΔ();
    };
    this.ΔᐃⲆⵠⵠⵠΔΔᐃ = function () {
      this.ⵠΔΔⲆ[tf](da[ia].stringify([16]));
    };
    this.ᐃᐃᐃⵠⲆⵠΔΔⵠ = function (a) {
      var b = Math.PI * 2;
      this.ⵠΔΔⲆ[tf](ka[ma].stringify([36, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⲆᐃᐃᐃᐃⵠΔΔΔ = function (a) {
      var b = Math.PI * 2;
      this.ⵠΔΔⲆ[tf](ka[ma].stringify([0, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⲆᐃⵠᐃᐃΔⵠᐃᐃ = function (a) {
      this.ⵠΔΔⲆ[tf](ⵠᐃΔⵠⲆⵠⲆ[la].stringify([11, a]));
    };
    this.ᐃᐃΔΔᐃᐃⲆΔᐃ = function (a) {
      this.ⵠΔΔⲆ[tf](Sa[Fa].stringify([33, a]));
    };
    this.ΔΔΔⵠᐃⲆΔΔᐃ = function (a) {
      var b = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      if (lx.ᐃᐃⲆⵠⲆ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ᐃⵠᐃΔⵠ);
        } else {
          b.text.push(ᐃⵠᐃΔⵠ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ⵠΔΔⲆ[tf](Sa[Fa].stringify([15, a]));
    };
    this.ᐃΔᐃΔⵠ = function (a) {
      var b = ᐃΔⲆᐃ.select.ⵠⵠΔ;
      if (b.length != 0) {
        var c = [11];
        var d = [];
        ΔΔⲆ.ⵠⵠᐃⲆⲆᐃⵠ(a, {
          x: ᐃΔⲆᐃ.ⲆΔᐃ.rx,
          y: ᐃΔⲆᐃ.ⲆΔᐃ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; e < b.length; e++) {
          d.push(b[e].ⲆᐃᐃⵠᐃⲆⵠΔᐃ);
        }
        c.push(d);
        this.ⵠΔΔⲆ[tf](wq[Na].stringify(c));
      }
    };
    this.ᐃⵠⵠⲆΔⵠΔ = 0;
    this.ΔΔⲆⵠΔⵠᐃ = {
      ⵠⵠ: 0,
      ⵠΔᐃ: 0
    };
    this.ΔⵠⲆᐃΔⲆⵠᐃⵠ = function () {
      if (sx - this.ᐃⵠⵠⲆΔⵠΔ > 50) {
        this.ᐃⵠⵠⲆΔⵠΔ = sx;
        var a = lx.ⲆΔᐃ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / 100);
        if (this.ΔΔⲆⵠΔⵠᐃ.ⵠⵠ != b || c != this.ΔΔⲆⵠΔⵠᐃ.ⵠΔᐃ) {
          this.ⵠΔΔⲆ[tf](zq[uq].stringify([28, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ΔΔⲆⵠΔⵠᐃ.ⵠⵠ = b;
          this.ΔΔⲆⵠΔⵠᐃ.ⵠΔᐃ = c;
        }
      }
    };
    this.ⲆⲆⵠⵠᐃⲆΔ = 0;
    this.ⲆⲆⲆΔⵠᐃΔᐃⲆ = function () {
      if (sx - this.ⲆⲆⵠⵠᐃⲆΔ > 60000) {
        this.ⲆⲆⵠⵠᐃⲆΔ = sx;
        //this.ping();
      }
    };
    this.ⵠⲆⵠⵠΔⲆⲆⵠⲆ = function () {
      lx.reconnect.enabled = Bh;
      if (c.ⵠΔΔⲆ.ⵠᐃᐃⵠΔ == c.ⵠᐃᐃⵠΔ) {
        c.ⵠᐃᐃⵠΔ++;
        c.ⵠΔΔⲆ.close();
        nx.connect();
      }
    };
    this.ᐃⵠⲆⲆΔⵠⲆΔᐃ = function (a) {
      this.ⲆⲆΔΔᐃ(yb[316]);
      for (var b = 1; b < a.length; b++) {
        lx.ⵠⲆᐃΔⲆ.push(a[b]);
      }
    };
    this.ᐃᐃΔⲆΔΔⲆⵠᐃ = function (a) {
      this.ⲆⲆΔΔᐃ(kx.ⲆⲆⵠⵠ[a].ᐃᐃⵠⲆΔ + yb[318]);
      lx.ⵠⲆᐃΔⲆ.push(a);
      var b = document.getElementById("team_box");
      if (ox.ⵠⲆⵠᐃⲆ != -1 && b.style.display == "inline-block") {
        ox.ᐃⵠⵠⵠᐃ[ox.ⵠⲆⵠᐃⲆ].action();
      }
    };
    this.ⲆᐃⵠΔΔΔⵠⲆⵠ = function () {
      this.ⲆⲆΔΔᐃ(yb[319]);
      lx.ⲆΔⲆⵠΔ.wait = Vg;
      lx.ⵠⲆᐃΔⲆ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ⲆⲆⵠᐃⵠⵠⲆⵠⲆ = function (a) {
      if (lx.id == a) {
        this.ⲆⲆΔΔᐃ(yb[320]);
        lx.ⲆΔⲆⵠΔ.wait = Bh;
        lx.ⵠⲆᐃΔⲆ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ⲆⲆΔΔᐃ(kx.ⲆⲆⵠⵠ[a].ᐃᐃⵠⲆΔ + yb[321]);
        for (var b = 0; lx.ⵠⲆᐃΔⲆ.length > b; b++) {
          if (lx.ⵠⲆᐃΔⲆ[b] == a) {
            lx.ⵠⲆᐃΔⲆ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (ox.ⵠⲆⵠᐃⲆ != -1 && c.style.display == "inline-block") {
          ox.ᐃⵠⵠⵠᐃ[ox.ⵠⲆⵠᐃⲆ].action();
        }
      }
    };
    this.ⵠⵠΔⲆⵠⲆᐃⵠⲆ = function (a) {
      lx.ⲆΔΔΔᐃ = false;
      this.ⲆⲆΔΔᐃ(yb[322]);
      if (this.ⵠᐃᐃⵠΔ == this.ⵠΔΔⲆ.ⵠᐃᐃⵠΔ) {
        this.ⵠᐃᐃⵠΔ++;
        ox.ⲆᐃⲆⲆΔ(jx.ⲆΔⵠΔᐃ);
        this.ⵠΔΔⲆ.close();
      }
    };
    this.ᐃⵠΔΔⲆᐃᐃⵠᐃ = function (a, b) {
      lx.ⲆΔΔΔᐃ = false;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      lx.ⵠᐃⲆΔΔΔᐃ.ⵠⵠᐃΔᐃΔΔ = Dt[a][Math.floor(Math.random() * Dt[a].length)];
      lx.ⵠᐃⲆΔΔΔᐃ.ᐃᐃΔᐃⵠ = ΔΔⲆ.ᐃⲆᐃⵠⲆⲆᐃ(kx.ⲆⲆⵠⵠ[lx.id].ᐃᐃΔᐃⵠ);
      lx.ⵠᐃⲆΔΔΔᐃ.ΔΔᐃᐃⵠᐃⵠ = ΔΔⲆ.ᐃⲆᐃⵠⲆⲆᐃ(d[1]);
      lx.ⵠᐃⲆΔΔΔᐃ.ⵠΔᐃⵠΔ = c[1];
      this.ⲆⲆΔΔᐃ(yb[317]);
      if (this.ⵠΔΔⲆ.ⵠᐃᐃⵠΔ == this.ⵠᐃᐃⵠΔ) {
        this.ⵠᐃᐃⵠΔ++;
        ox.ⲆᐃⲆⲆΔ(mx.ⲆΔⵠΔᐃ);
        this.ⵠΔΔⲆ.close();
        try {
          Ph.Widget.adsRefresh();
        } catch (a) { }
      }
    };
    this.ping = function () {
      this.ⵠΔΔⲆ[tf]("[21]");
    };
    this.ⲆᐃⵠⵠⵠⲆⲆⲆⲆ = function () {
      if (this.ⵠΔΔⲆ.readyState == 3) {
        this.ⲆⲆⲆᐃⲆᐃΔ -= 600000;
      }
    };
    this.ΔⲆᐃᐃⲆᐃⵠΔⲆ = function () {
      if (tx > 5) {
        this.ⲆⲆⲆᐃⲆᐃΔ = sx;
      }
      if (sx - this.ⲆⲆⲆᐃⲆᐃΔ > 600000) {
        this.ⲆⲆⲆᐃⲆᐃΔ = sx;
        this.ⵠⲆⵠⵠΔⲆⲆⵠⲆ();
      }
    };
    this.ⵠΔΔⵠⲆⵠⵠᐃⵠ = function (b) {
      yx++;
      clearTimeout(this.ΔᐃⵠΔΔ);
      document.getElementById("commandMainBoxName").innerHTML = this.ᐃᐃⵠⲆᐃ[this.ⲆᐃΔΔΔ][this.ⵠⲆᐃⵠΔΔⵠ[this.ⲆᐃΔΔΔ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ⲆⲆⲆᐃⲆᐃΔ = sx;
      lx.ΔᐃᐃⲆ.ⵠⵠⵠᐃⵠ.ⵠⲆⲆΔΔ = lx.ΔᐃᐃⲆ.ⵠⵠⵠᐃⵠ.ⲆΔᐃᐃᐃ;
      lx.ΔᐃᐃⲆ.ⵠⲆᐃᐃΔΔΔ.ⵠⲆⲆΔΔ = lx.ΔᐃᐃⲆ.ⵠⲆᐃᐃΔΔΔ.ⲆΔᐃᐃᐃ;
      lx.ΔᐃᐃⲆ.ⵠᐃⲆᐃΔᐃⲆ.ⵠⲆⲆΔΔ = lx.ΔᐃᐃⲆ.ⵠᐃⲆᐃΔᐃⲆ.ⲆΔᐃᐃᐃ;
      lx.ΔᐃᐃⲆ.ᐃᐃᐃΔΔΔΔ.ⵠⲆⲆΔΔ = lx.ΔᐃᐃⲆ.ᐃᐃᐃΔΔΔΔ.ⲆΔᐃᐃᐃ;
      lx.ΔᐃᐃⲆ.ΔⵠΔᐃΔ.ⵠⲆⲆΔΔ = lx.ΔᐃᐃⲆ.ΔⵠΔᐃΔ.ⲆΔᐃᐃᐃ;
      lx.ΔᐃᐃⲆ.ⵠⲆΔΔ = 1;
      lx.ΔᐃᐃⲆ.c = 1;
      lx.ΔᐃᐃⲆ.ⲆΔⲆ = 1;
      lx.ΔᐃᐃⲆ.ⵠⲆΔ = 1;
      lx.ΔᐃᐃⲆ.ⲆⲆⲆ = 1;
      lx.ΔᐃᐃⲆ.ΔΔᐃᐃᐃᐃᐃ = 1;
      lx.ⵠⲆⵠᐃΔΔᐃ = ik;
      ox.ᐃᐃⲆΔⵠ.display = 0;
      lx.ᐃⵠⵠᐃ.ᐃΔΔⵠⵠ = [];
      lx.ᐃⵠⵠᐃ.ᐃᐃⵠᐃ = [];
      lx.ᐃⵠⵠᐃ.max = 10;
      lx.ᐃⵠⵠᐃ.ΔΔⲆᐃⵠⲆⵠ = 0;
      lx.ᐃⵠⵠᐃ.ΔⲆᐃⲆⵠ = 0;
      lx.ᐃⵠⵠᐃ.id = -1;
      ox.ᐃⲆᐃᐃᐃⲆⲆ = 1;
      ox.ΔⲆⵠⵠⲆΔΔ = 1;
      ox.ⲆⲆⲆΔΔⲆⵠ = 1;
      ox.ΔⲆᐃⲆⲆⵠᐃ = 1;
      lx.ⲆΔΔΔᐃ = true;
      lx.ᐃⵠⵠᐃ.ⲆⲆΔΔΔⲆⵠ.stop();
      lx.ⲆᐃΔΔ.ΔΔᐃᐃᐃ = [];
      lx.ⲆᐃΔΔ.ⲆᐃⵠⲆⲆ = Es;
      lx.ⲆᐃΔΔ.ΔⲆⵠΔⲆⲆⵠᐃᐃ = gl;
      lx.ⲆᐃΔΔ.ΔⲆΔΔ = -1;
      lx.ⲆᐃΔΔ.id = -1;
      lx.ⲆᐃΔΔ.ΔᐃⲆⵠⲆ = false;
      lx.ⲆᐃΔΔ.ᐃⵠᐃᐃⲆ = false;
      lx.ⲆᐃΔΔ.ΔⵠΔᐃⵠ = false;
      lx.ⲆᐃΔΔ.ⵠⵠⵠⲆⵠᐃᐃ = ln;
      lx.ⲆᐃΔΔ.timeout = new ΔΔⲆ.ΔᐃᐃΔ(Ag, 0, 1, 0, 1, 1);
      lx.ΔᐃᐃⵠⲆ.timeout = new ΔΔⲆ.ΔᐃᐃΔ(Ag, 0, 1, 0, 0.1, 1);
      lx.ΔᐃᐃⵠⲆ.wait = false;
      lx.ⲆΔᐃᐃⲆ.timeout = new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 1, 0, 1 / 5, 1);
      lx.ⲆΔᐃᐃⲆ.wait = ig;
      lx.ᐃᐃⲆⵠΔ.timeout = new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 1, 0, 1, 1);
      lx.ᐃᐃⲆⵠΔ.wait = vl;
      lx.ⲆΔⲆⵠΔ.id = -1;
      lx.ⲆΔⲆⵠΔ.ⵠⵠⲆᐃ = -1;
      lx.ⲆΔⲆⵠΔ.wait = xq;
      lx.ⲆΔⲆⵠΔ.timeout = new ΔΔⲆ.ΔᐃᐃΔ(false, 0, 1, 0, 1 / 30, 1);
      ox.ᐃΔⵠⲆⲆ.ⵠⲆᐃⵠᐃ.x = -1;
      ox.ᐃΔⵠⲆⲆ.ⵠⲆᐃⵠᐃ.y = -1;
      ox.ᐃⵠΔⵠ.open = false;
      ox.ᐃΔⵠⲆⲆ.ⲆⲆⵠⵠ = [];
      lx.ΔⵠᐃᐃⲆ.enabled = Pg;
      kx.mode = b[1];
      if (b[20] !== undefined && b[21] !== undefined) {
        kx.ᐃⵠᐃⲆⵠ = b[20];
        kx.ΔᐃⲆⲆⵠ = b[21];
        kx.w = kx.ⲆᐃᐃⲆⲆΔⵠ * kx.ᐃⵠᐃⲆⵠ;
        kx.ⲆΔⲆ = kx.ᐃᐃΔΔᐃΔΔ * kx.ΔᐃⲆⲆⵠ;
      }
      kx.ⲆⲆΔΔⲆⲆᐃ = b[22];
      kx.ᐃᐃᐃΔⲆ = b[23];
      c.ⲆⵠΔΔⲆΔΔ(b[24]);
      c.ⲆⵠᐃⲆⵠⵠⲆⵠⲆ(b[25]);
      lx.ᐃᐃΔΔᐃ.ΔⵠⲆΔⲆ = b[26];
      lx.ⵠΔⲆⵠΔΔᐃ = 0;
      lx.ΔᐃⵠⵠΔ.ΔⵠⲆΔⲆ = b[27];
      kx.ⵠⵠⲆΔΔΔⵠΔᐃ(b[19]);
      kx.time = b[5];
      kx.ⲆⲆΔΔⲆ.ᐃⵠⵠᐃΔ = b[15];
      kx.ⲆⲆΔΔⲆ.ᐃⵠⵠΔᐃ = new Date().getTime();
      ox.ⵠⲆᐃⵠ.ᐃΔⵠⵠΔᐃⲆ = b[16];
      kx.transition = false;
      lx.ΔΔᐃ = b[2];
      ox.ⵠⲆᐃⵠ.reset();
      lx.ⵠⲆᐃΔⲆ = b[8];
      kx.ⵠⵠΔ[0] = [];
      kx.ⵠⵠΔ[100] = [];
      kx.ⵠⵠΔ[2] = [];
      kx.ⵠⵠΔ[1] = [];
      kx.ⵠⵠΔ[6] = [];
      kx.ⵠⵠΔ[3] = [];
      kx.ⵠⵠΔ[31] = [];
      kx.ⵠⵠΔ[37] = [];
      kx.ⵠⵠΔ[43] = [];
      kx.ⵠⵠΔ[44] = [];
      kx.ⵠⵠΔ[39] = [];
      kx.ⵠⵠΔ[40] = [];
      kx.ⵠⵠΔ[54] = [];
      kx.ⵠⵠΔ[55] = [];
      kx.ⵠⵠΔ[4] = [];
      kx.ⵠⵠΔ[7] = [];
      kx.ⵠⵠΔ[8] = [];
      kx.ⵠⵠΔ[9] = [];
      kx.ⵠⵠΔ[10] = [];
      kx.ⵠⵠΔ[15] = [];
      kx.ⵠⵠΔ[16] = [];
      kx.ⵠⵠΔ[17] = [];
      kx.ⵠⵠΔ[45] = [];
      kx.ⵠⵠΔ[46] = [];
      kx.ⵠⵠΔ[47] = [];
      kx.ⵠⵠΔ[48] = [];
      kx.ⵠⵠΔ[49] = [];
      kx.ⵠⵠΔ[53] = [];
      kx.ⵠⵠΔ[11] = [];
      kx.ⵠⵠΔ[22] = [];
      kx.ⵠⵠΔ[23] = [];
      kx.ⵠⵠΔ[5] = [];
      kx.ⵠⵠΔ[12] = [];
      kx.ⵠⵠΔ[13] = [];
      kx.ⵠⵠΔ[14] = [];
      kx.ⵠⵠΔ[60] = [];
      kx.ⵠⵠΔ[70] = [];
      kx.ⵠⵠΔ[71] = [];
      kx.ⵠⵠΔ[72] = [];
      kx.ⵠⵠΔ[73] = [];
      kx.ⵠⵠΔ[74] = [];
      kx.ⵠⵠΔ[81] = [];
      kx.ⵠⵠΔ[82] = [];
      kx.ⵠⵠΔ[87] = [];
      kx.ⵠⵠΔ[86] = [];
      kx.ⵠⵠΔ[34] = [];
      kx.ⵠⵠΔ[65] = [];
      kx.ⵠⵠΔ[66] = [];
      kx.ⵠⵠΔ[67] = [];
      kx.ⵠⵠΔ[62] = [];
      kx.ⵠⵠΔ[63] = [];
      kx.ⵠⵠΔ[78] = [];
      kx.ⵠⵠΔ[77] = [];
      kx.ⵠⵠΔ[75] = [];
      kx.ⵠⵠΔ[76] = [];
      kx.ⵠⵠΔ[64] = [];
      kx.ⵠⵠΔ[69] = [];
      kx.ⵠⵠΔ[68] = [];
      kx.ⵠⵠΔ[79] = [];
      kx.ⵠⵠΔ[89] = [];
      kx.ⵠⵠΔ[83] = [];
      kx.ⵠⵠΔ[84] = [];
      kx.ⵠⵠΔ[85] = [];
      kx.ⵠⵠΔ[80] = [];
      kx.ⵠⵠΔ[88] = [];
      kx.ⵠⵠΔ[91] = [];
      kx.ⵠⵠΔ[90] = [];
      kx.ⵠⵠΔ[61] = [];
      kx.ⵠⵠΔ[18] = [];
      kx.ⵠⵠΔ[19] = [];
      kx.ⵠⵠΔ[20] = [];
      kx.ⵠⵠΔ[21] = [];
      kx.ⵠⵠΔ[50] = [];
      kx.ⵠⵠΔ[52] = [];
      kx.ⵠⵠΔ[51] = [];
      kx.ⵠⵠΔ[29] = [];
      kx.ⵠⵠΔ[56] = [];
      kx.ⵠⵠΔ[30] = [];
      kx.ⵠⵠΔ[38] = [];
      kx.ⵠⵠΔ[33] = [];
      kx.ⵠⵠΔ[32] = [];
      kx.ⵠⵠΔ[24] = [];
      kx.ⵠⵠΔ[25] = [];
      kx.ⵠⵠΔ[26] = [];
      kx.ⵠⵠΔ[27] = [];
      kx.ⵠⵠΔ[28] = [];
      kx.ⵠⵠΔ[42] = [];
      kx.ⵠⵠΔ[41] = [];
      kx.ⵠⵠΔ[35] = [];
      kx.ⵠⵠΔ[36] = [];
      kx.ⲆᐃΔΔᐃ = [];
      kx.ⵠⲆΔΔᐃᐃⵠ = b[7];
      lx.id = b[9];
      lx.ᐃᐃΔΔ = kx.ⵠⲆΔΔᐃᐃⵠ * lx.id;
      if (px.loaded) {
        px.ⲆⲆⵠⵠ[0].ᐃᐃΔΔ = lx.ᐃᐃΔΔ;
        px.ⲆⲆⵠⵠ[0].ⲆΔⲆⲆⲆΔⲆ = 0;
      }
      qx.ⲆⲆΔⵠᐃⲆΔ();
      lx.ⲆΔᐃ.ᐃΔᐃᐃⲆ(b[3], b[10]);
      kx.ⲆⲆⵠⵠ = [];
      var d = kx.ⲆⲆⵠⵠ;
      for (var e = 0; e < b[11]; e++) {
        d.push(new Af());
      }
      e = 0;
      for (var f = b[4]; e < f.length; e++) {
        var g = d[f[e].i];
        g.ᐃᐃⵠⲆΔ = f[e].n;
        g.ᐃⵠᐃⲆ = f[e].s;
        g.ⲆΔⲆⲆⵠ = f[e].a;
        g.ⵠⵠⲆᐃᐃ = f[e].c;
        g.ᐃⲆΔᐃⵠ = f[e].b;
        g.ⲆᐃⵠΔⲆ = f[e].d;
        g.ΔⵠΔᐃⲆⵠⵠ = f[e].g;
        g.level = f[e].l;
        g.ᐃᐃΔᐃⵠ = ΔΔⲆ.ᐃᐃΔⲆᐃⲆᐃ(f[e].p);
        g.ⲆΔΔΔᐃ = true;
        if (nf === 1) {
          g.ᐃᐃⵠⲆΔ += "|" + f[e].i;
        }
      }
      lx.ΔⲆᐃΔⵠ.sort();
      if (kx.mode === 1 && kx.ⲆⲆⵠⵠ[lx.id].ᐃᐃⵠⲆΔ === "spectator") {
        lx.ᐃΔⲆᐃᐃⲆⲆ = true;
      } else {
        lx.ᐃΔⲆᐃᐃⲆⲆ = false;
      }
      if (kx.mode === 2 && kx.ⲆⲆⵠⵠ[lx.id].ᐃⵠᐃⲆ === 0) {
        lx.ᐃᐃⲆⵠⲆ = kg;
      } else {
        lx.ᐃᐃⲆⵠⲆ = ln;
      }
      if (kx.mode === 3 && kx.ⲆⲆⵠⵠ[lx.id].ᐃⵠᐃⲆ === 0) {
        lx.ᐃⵠΔⵠⵠⲆᐃ = rl;
      } else {
        lx.ᐃⵠΔⵠⵠⲆᐃ = _h;
      }
      ⵠᐃⲆⵠ.set("starve_token", lx.ⲆⲆⵠⲆΔ);
      if (b[12] === 0) {
        lx.ⵠⲆΔⵠⲆ.ⵠⵠΔⵠΔ = 0;
        ox.ⵠⲆᐃⵠ.restore(b[17]);
        var h = b[14];
        if (h[29]) {
          lx.ᐃⵠⵠᐃ.ⲆΔⵠⲆⲆᐃᐃ(1, 0);
        }
        for (e = 0; e < h.length; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ΔᐃⲆⲆⵠΔⲆ([0, e, h[e]]);
          }
        }
        lx.ⵠⲆΔⵠⲆ.open = gl;
      } else {
        if (kx.mode === 4) {
          this.ΔᐃⲆⲆⵠΔⲆ([0, 238, 1]);
        } else if (kx.mode === 3) {
          if (lx.ᐃⵠΔⵠⵠⲆᐃ) {
            this.ΔᐃⲆⲆⵠΔⲆ([0, 190, 4]);
          } else {
            this.ΔᐃⲆⲆⵠΔⲆ([0, 191, 3]);
          }
        }
        if (kx.mode === 0 || kx.mode === 3 || kx.mode === 7 || kx.mode === 4) {
          lx.ⵠⲆΔⵠⲆ.ⵠⵠΔⵠΔ = new Date().getTime();
          lx.ⵠⲆΔⵠⲆ.open = true;
          lx.ⵠⲆΔⵠⲆ.value = b[13];
          ox.ⵠⲆΔⵠⲆ.ᐃⵠⵠΔᐃ();
        } else {
          lx.ⵠⲆΔⵠⲆ.ⵠⵠΔⵠΔ = 0;
          lx.ⵠⲆΔⵠⲆ.open = false;
          lx.ⵠⲆΔⵠⲆ.value = 0;
        }
        lx.ⵠⵠᐃᐃΔⲆᐃ = b[12].toString();
      }
      lx.ΔᐃⵠⲆⵠ.enabled = b[6];
      lx.ΔᐃⵠⲆⵠ.ⵠⵠΔⵠΔ = -1;
      lx.ΔᐃⵠⲆⵠ.label = null;
      lx.ΔᐃⵠⲆⵠ.now = -1;
      ⵠᐃⲆⵠ.set("starve_token_id", lx.ⵠⵠᐃᐃΔⲆᐃ);
      if (lx.reconnect.enabled) {
        lx.reconnect.rotate = 0;
        lx.reconnect.enabled = xq;
      } else {
        jx.ⲆᐃⲆⲆΔ(ox.ⲆΔⵠΔᐃ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + jx.ᐃⵠᐃⲆ + "A" + jx.ⲆΔⲆⲆⵠ);
        }
      }
    };
    this.connect = function () {
      c.ⲆΔⵠⲆΔᐃᐃ = 0;
      c.ⵠΔⵠᐃⲆⵠΔ();
    };
    this.ΔΔⲆΔⵠⵠⲆ = [];
    this.ⵠΔⵠⲆⵠⲆⵠⵠⵠ = function (b) {
      const d = c.ᐃⵠⵠΔⲆ.filter(a => a.gm === b);
      const f = {};
      for (let a = 0; d.length > a; a++) {
        const b = d[a];
        const c = b.r;
        if (ep !== c) {
          if (f[c] === undefined) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function g(d) {
        c.ΔΔⲆΔⵠⵠⲆ[b] = d;
        const e = f[d];
        const g = e[Math.floor(Math.random() * e.length)];
        c.ⵠⵠⵠⲆᐃΔⵠ({
          domain: hf,
          is_tls: 1,
          id: g.id,
          p: g.p
        });
      }
      if (c.ΔΔⲆΔⵠⵠⲆ[b] !== ag) {
        g(c.ΔΔⲆΔⵠⵠⲆ[b]);
        return;
      }
      let a = 1;
      function h(b) {
        const c = new Ph.XMLHttpRequest();
        const d = b[0];
        const e = d.p;
        const f = d.r;
        const i = e[Math.floor(Math.random() * e.length)];
        c.open("GET", "https://" + i + "." + hf + "/", Hh);
        c.onreadystatechange = function () {
          if (c.readyState === 4) {
            if (a === 0) {
              return;
            }
            a = 0;
            g(f);
          }
        };
        c.send();
      }
      for (let a in f) {
        h(f[a]);
      }
      Ph.setTimeout(function () {
        if (a === 0) {
          return;
        }
        a = 0;
        const b = Ph.Object.keys(f);
        g(b[Math.floor(Math.random() * b.length)]);
      }, 5000);
    };
    this.ΔᐃᐃΔᐃᐃⵠⲆᐃ = function () {
      let a = Cf.ⵠΔⲆΔᐃⵠⲆ[c.ⲆᐃΔΔΔ];
      console.log(undefined, undefined, ag);
      let b = c.ⵠⲆᐃⵠΔΔⵠ[c.ⲆᐃΔΔΔ];
      let d = c.ᐃⵠⵠΔⲆ.find(c => c.gm == a && c.idx == b);
      if (d === undefined) {
        c.ⵠΔⵠⲆⵠⲆⵠⵠⵠ(a);
      } else {
        c.ⵠⵠⵠⲆᐃΔⵠ({
          domain: hf,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ⵠΔⵠᐃⲆⵠΔ = function () {
      console.log(ep);
      if (Jw !== eg && sf !== undefined) {
        console.log(undefined, undefined, undefined);
        c.ⵠⵠⵠⲆᐃΔⵠ({
          domain: hf,
          is_tls: 1,
          id: sf + Jw,
          p: c.ⲆⲆᐃΔⲆΔⲆ[sf]
        });
        return;
      }
      if (Ya === af) {
        c.ΔᐃᐃΔᐃᐃⵠⲆᐃ();
      } else {
        c.ⵠⵠⵠⲆᐃΔⵠ({
          domain: af.domain,
          is_tls: af.ssl,
          id: af.id,
          p: [af.p]
        });
      }
    };
    this.ⵠⵠⵠⲆᐃΔⵠ = function (b) {
      let d = b.domain;
      let e = b.is_tls;
      let f = b.id;
      let a = b.p;
      let g = a[Math.floor(Math.random() * a.length)];
      let i = e ? "wss://" + g + "." + d + "/" + f + "?" + lx.ᐃΔⵠᐃᐃⲆⲆ : "ws://" + d;
      console.log(ep, ir);
      c.ⵠΔΔⲆ = new Ph.WebSocket(i);
      c.ⵠΔΔⲆ.binaryType = "arraybuffer";
      c.ⵠΔΔⲆ.ⵠᐃᐃⵠΔ = c.ⵠᐃᐃⵠΔ;
      c.ⵠΔΔⲆ.onmessage = function (a) {
        if (c.ⵠᐃᐃⵠΔ == c.ⵠᐃᐃⵠΔ) {
          if (typeof a.data == "string") {
            var b = JSON.parse(a.data);
            switch (b[0]) {
              case 0:
                c.ⲆΔⲆᐃᐃ(b);
                break;
              case 1:
                c.ΔᐃⵠⲆⵠᐃⲆ(b[1]);
                break;
              case 2:
                c.ΔΔΔⵠΔᐃΔⵠⵠ(b);
                break;
              case 3:
                c.ⵠΔΔⵠⲆⵠⵠᐃⵠ(b);
                break;
              case 4:
                c.message(b[1]);
                break;
              case 5:
                c.ⲆᐃⲆⲆΔⵠΔ(b);
                break;
              case 6:
                c.ⲆⵠΔΔⲆΔΔ(b[1]);
            }
          } else {
            var d = function (b, c, d) {
              const f = new Uint8Array(b);
              const e = f.length;
              let g = bf[e];
              let a = pa;
              let h = qn;
              if (g === pj) {
                df += e * 2;
                if (df < 65535) {
                  h = te(ei(e));
                } else {
                  df = e;
                  for (let a = 0; bf.length > a; a++) {
                    if (bf[a] !== undefined) {
                      const b = bf[a][0];
                      bf[a] = pa;
                      nj(b);
                    }
                  }
                  h = te(ei(e));
                  kj();
                }
                a = ok(h);
                bf[e] = [h, a];
              } else {
                h = g[0];
                a = g[1];
              }
              for (let g = 0; f.length > g; g++) {
                a[g] = f[g];
              }
              Bj(h, c, d);
              for (let g = 0; f.length > g; g++) {
                f[g] = a[g];
              }
              return f;
            }(a.data, lx.ⵠΔⲆᐃⵠᐃΔ, lx.ᐃΔⵠᐃᐃΔⵠⵠⵠ);
            var e = d.buffer;
            switch (d[0]) {
              case 0:
                c.ⵠⵠΔ(e, d, false);
                break;
              case 1:
                c.ⵠⵠΔ(e, d, Qo);
                break;
              case 2:
                c.ΔᐃⵠΔⵠⵠⲆΔᐃ();
                break;
              case 3:
                c.ΔᐃⲆⲆⵠΔⲆ(new Uint16Array(e));
                break;
              case 4:
                c.ᐃⲆⵠⲆΔⵠⲆΔᐃ();
                break;
              case 5:
                c.ᐃⲆᐃΔⵠⲆⵠΔⵠ();
                break;
              case 6:
                c.ⵠᐃⵠⵠⵠⲆΔⵠΔ();
                break;
              case 7:
                c.ⲆⵠⵠΔΔΔᐃᐃⵠ(e);
                break;
              case 8:
                c.ⵠⲆΔᐃᐃⲆΔⲆᐃ(d[1]);
                break;
              case 9:
                c.ᐃⵠᐃⲆΔᐃᐃᐃᐃ(d[1]);
                break;
              case 10:
                c.ⲆⵠΔⵠᐃᐃⵠ();
                break;
              case 11:
                c.ⵠΔᐃΔΔᐃⲆ(d[1], d[2]);
                break;
              case 12:
                c.ΔᐃⲆⵠⲆ(d[1]);
                break;
              case 13:
                c.ⲆᐃⲆⲆⵠⲆⲆᐃΔ(d, e);
                break;
              case 14:
                c.ΔΔΔΔⲆⲆⵠⵠⲆ();
                break;
              case 15:
                c.ⲆⵠΔᐃⲆⵠⲆⲆΔ(d[1]);
                break;
              case 16:
                c.ΔᐃᐃⲆ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                break;
              case 17:
                c.ᐃᐃΔⵠⵠⲆⵠⵠⲆ(e);
                break;
              case 18:
                c.ⵠΔⲆⵠᐃᐃⲆᐃⲆ();
                break;
              case 19:
                c.ΔⵠΔᐃⵠ(d[1]);
                break;
              case 20:
                c.ΔᐃⲆⵠΔᐃΔΔⲆ();
                break;
              case 21:
                c.ᐃⲆΔⲆ(e);
                break;
              case 22:
                c.ⲆᐃΔⵠᐃΔⵠΔⲆ(d[1]);
                break;
              case 23:
                c.ⲆⵠⵠΔᐃᐃΔΔⲆ(e);
                break;
              case 24:
                c.ΔⵠⲆΔⵠⵠⵠⵠΔ(d[1]);
                break;
              case 25:
                c.ᐃⵠΔΔⲆᐃᐃⵠᐃ(d[1], e);
                break;
              case 26:
                c.ᐃΔⵠⲆⲆ(d);
                break;
              case 27:
                c.ᐃᐃᐃΔᐃⲆⲆⵠᐃ();
                break;
              case 28:
                c.ΔᐃⵠⲆⵠ(d[1]);
                break;
              case 29:
                c.ᐃᐃⲆⵠⲆⵠⲆⲆᐃ();
                break;
              case 30:
                c.ⵠⵠΔⲆⵠⲆᐃⵠⲆ();
                break;
              case 31:
                c.ᐃⵠⲆⲆΔⵠⲆΔᐃ(d);
                break;
              case 32:
                c.ⲆⲆⵠᐃⵠⵠⲆⵠⲆ(d[1]);
                break;
              case 33:
                c.ᐃᐃΔⲆΔΔⲆⵠᐃ(d[1]);
                break;
              case 34:
                c.ⲆᐃⵠΔΔΔⵠⲆⵠ();
                break;
              case 35:
                c.ᐃⲆⲆᐃᐃᐃⵠⲆᐃ(d[1]);
                break;
              case 36:
                c.ⵠⵠⵠⲆⵠᐃᐃ(d[1]);
                break;
              case 37:
                c.ⲆΔΔΔⲆⲆⵠΔᐃ(d[1], d[2]);
                break;
              case 38:
                c.ΔᐃⵠⲆⲆⵠΔᐃⲆ(d[1]);
                break;
              case 39:
                c.ⵠⵠⵠΔᐃⵠⵠᐃⲆ(d[1]);
                break;
              case 40:
                c.ⵠⲆᐃΔⲆΔⵠᐃᐃ();
                break;
              case 41:
                c.ⲆᐃⲆΔⵠΔⵠⵠⵠ(d);
                break;
              case 42:
                c.ᐃᐃⲆⲆΔΔⵠⵠⵠ(d[1]);
                break;
              case 43:
                c.ΔⵠⵠΔΔΔᐃⲆΔ(d[1]);
                break;
              case 44:
                c.claimed(d[1]);
                break;
              case 45:
                c.ⲆΔⵠΔΔⵠⵠᐃⵠ(d[1]);
                break;
              case 46:
                c.ᐃΔⲆᐃⲆΔⲆⲆΔ(d[1]);
                break;
              case 47:
                c.ᐃⵠᐃᐃⲆ(d[1]);
                break;
              case 48:
                c.ⲆᐃᐃΔΔΔⵠᐃΔ();
                break;
              case 50:
                c.ᐃⲆᐃΔⵠⵠΔⵠⵠ(d[1], d[2], d[3]);
                break;
              case 51:
                c.ⲆΔⵠⲆΔⵠⲆΔⵠ();
                break;
              case 52:
                c.ᐃΔᐃⲆⲆΔΔᐃᐃ(d[1]);
                break;
              case 53:
                c.ᐃΔⵠⲆΔⲆⵠⵠᐃ(d[1]);
                break;
              case 54:
                c.ⵠΔΔΔΔⵠⲆᐃᐃ();
                break;
              case 55:
                c.ΔⵠⲆᐃᐃΔΔΔᐃ(d[1]);
                break;
              case 56:
                c.ᐃⲆᐃΔⲆⵠⵠⲆᐃ(d[1]);
                break;
              case 57:
                c.ⵠΔⲆⵠᐃᐃΔⵠΔ();
                break;
              case 58:
                c.ⵠᐃⵠᐃⲆΔⲆΔᐃ();
                break;
              case 59:
                c.ΔⲆⵠΔⵠⵠΔᐃⲆ();
                break;
              case 60:
                c.ⲆᐃⵠᐃᐃⵠⲆᐃⲆ();
                break;
              case 61:
                lx.ⲆΔᐃ.ΔΔⵠᐃᐃΔⵠ = 0.2;
                lx.ⲆΔᐃ.ⵠⵠΔⵠΔ = 3;
                break;
              case 62:
                c.ⵠⲆᐃΔⵠΔΔᐃᐃ(new Uint16Array(e));
                break;
              case 63:
                c.ΔΔⵠⵠⲆⲆⲆⲆⵠ();
                break;
              case 64:
                c.ⲆᐃⲆΔⵠᐃᐃⵠΔ();
                break;
              case 65:
                c.ⲆᐃⵠΔΔⵠΔΔᐃ();
                break;
              case 66:
                c.ᐃⲆΔᐃΔⵠⵠΔⵠ();
                break;
              case 67:
                c.ⲆⲆΔᐃⲆΔⵠⵠⲆ(d[1]);
                break;
              case 68:
                c.ΔΔΔΔⲆⲆΔΔᐃ(d[1]);
                break;
              case 69:
                c.ⵠΔⲆⵠΔΔᐃ(d[1]);
                break;
              case 70:
                c.ⵠᐃⵠᐃᐃⲆᐃᐃⲆ(d[1]);
                break;
              case 71:
                c.ⵠᐃⵠΔⲆ(d[1]);
            }
          }
        }
      };
      c.ⵠΔΔⲆ.onerror = function () {
        if (lx.reconnect.enabled) {
          Ph.setTimeout(c.timeout, 2500);
        }
      };
      this.ⵠΔΔⲆ.onopen = function () {
        clearTimeout(c.ΔᐃⵠΔΔ);
        lx.ΔⲆᐃⵠΔⵠⲆ = lx.ΔⲆᐃⵠΔⵠⲆ || ΔΔⲆ.ⵠⲆΔⵠⵠᐃᐃ("token");
        ΔΔⲆ.ⲆⵠⲆᐃᐃᐃΔ().then(a => {
          c.ⵠΔΔⲆ[tf](Lq[Iq].stringify([jx.ᐃᐃⵠⲆΔ.input.value, screen.width + 200, screen.height + 200, 52, lx.ⲆⲆⵠⲆΔ, lx.ⵠⵠᐃᐃΔⲆᐃ, lx.reconnect.enabled ? 1 : 0, jx.ᐃⵠᐃⲆ, jx.ⲆΔⲆⲆⵠ, jx.ΔⲆᐃⲆⵠ, jx.ᐃⲆΔᐃⵠ, jx.ⵠⵠⲆᐃᐃ, jx.ⲆᐃⵠΔⲆ, Ix === Ya ? 0 : Ix, Hx === ep ? 0 : Hx.substring(Hx.length - 50), of, lx.ΔⲆᐃⵠΔⵠⲆ, a, lx.ⵠⵠⲆⲆᐃᐃᐃ, lx.ⲆΔᐃⵠⵠΔᐃ]));
          lx.ΔⲆᐃⵠΔⵠⲆ = Wh;
          lx.ⵠⵠⲆⲆᐃᐃᐃ = undefined;
          lx.ⲆΔᐃⵠⵠΔᐃ = undefined;
          lx.ᐃΔⵠᐃᐃⲆⲆ = El;
          c.ΔᐃⵠΔΔ = setTimeout(c.timeout, 2000);
        });
      };
    };
  }();
  var ox = {
    ⲆᐃΔᐃⲆ: false
  };
  var px = new function () {
    this.ⲆΔⵠΔᐃ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ᐃⵠⵠᐃⲆⵠⲆ = function (a) {
      return a / kx.w * 100;
    };
    this.ᐃⵠⲆᐃⲆᐃΔ = function (a) {
      return a / kx.ⲆΔⲆ * 100;
    };
    this.ᐃⵠᐃⵠⲆⵠΔ = function (a, b) {
      a = this.ᐃⵠⵠᐃⲆⵠⲆ(a) - this.ΔΔⵠⵠⵠ.x;
      return this.ΔΔⵠⵠⵠ.x + b * a;
    };
    this.ⵠⵠⲆⲆⵠᐃΔ = function (a, b) {
      a = Math.abs(this.ᐃⵠⲆᐃⲆᐃΔ(a) - this.ΔΔⵠⵠⵠ.y);
      return this.ΔΔⵠⵠⵠ.y + b * a;
    };
    this.sample = {};
    this.ⲆΔᐃᐃⵠ = {};
    this.ᐃΔⲆᐃ = {};
    this.ᐃΔⲆⲆⲆⲆⲆ = function (b, c, d, e) {
      for (var f = 0; f < c.length; f++) {
        var g = c[f];
        if (!b.playing(g)) {
          b.pos(d, e, -0.5, g);
          b.play(g);
          return pl;
        }
      }
      return Ea;
    };
    this.ⵠᐃΔ = function (a, b, c, d) {
      c = this.ᐃⵠᐃⵠⲆⵠΔ(c, ⵠᐃᐃⵠⲆ.ΔΔΔΔⲆΔΔ);
      d = this.ⵠⵠⲆⲆⵠᐃΔ(d, ⵠᐃᐃⵠⲆ.ΔΔΔΔⲆΔΔ);
      console.log("HIT", a, b, c, d, ⵠᐃᐃⵠⲆ.ΔΔΔΔⲆΔΔ);
      if (a) {
        if (b === 1) {
          this.ᐃΔⲆⲆⲆⲆⲆ(this.ᐃΔⲆᐃ.ΔⲆᐃⵠⲆΔⲆ, this.sample.ΔⲆᐃⵠⲆΔⲆ, c, d);
        } else if (b === 0) {
          this.ᐃΔⲆⲆⲆⲆⲆ(this.ᐃΔⲆᐃ.ⵠⲆΔⲆⲆⵠᐃ, this.sample.ⵠⲆΔⲆⲆⵠᐃ, c, d);
        }
      } else {
        this.ᐃΔⲆⲆⲆⲆⲆ(this.ᐃΔⲆᐃ.ΔΔⲆⵠΔ, this.sample.ΔΔⲆⵠΔ, c, d);
      }
    };
    this.ΔΔⵠⵠⵠ = {
      y: 0,
      x: 0
    };
    this.ᐃⵠΔⵠⲆΔⵠ = {
      y: 0,
      x: 0
    };
    this.ⵠΔⵠᐃⲆ = {};
    this.ⲆⲆⵠⵠ = [];
    this.ᐃᐃⵠⵠⵠ = function (a, b) {
      for (var c in this.ⵠΔⵠᐃⲆ) {
        var d = this.ⵠΔⵠᐃⲆ[c];
        d.check(a);
        if (d.ⵠⲆⵠΔᐃⵠᐃ) {
          if (kx.ⲆⲆΔΔⲆ.now < 460000) {
            d.ΔⵠΔΔΔ();
          }
          if (b) {
            d.ΔⵠΔ(a, this.ΔΔⵠⵠⵠ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ⵠⵠⵠⲆⲆⵠⵠⵠⲆ = function () {
      var a = [];
      for (var b = 0; b < this.ⲆⲆⵠⵠ.length; b++) {
        if ((e = this.ⲆⲆⵠⵠ[b]).ⲆΔⲆⲆⲆΔⲆ) {
          a.push(b);
        } else if (!e.ⲆΔⲆⲆⲆΔⲆ && !kx.ⲆᐃΔΔᐃ[e.ᐃᐃΔΔ]) {
          e.ᐃⵠᐃⵠΔᐃⵠ();
          a.push(b);
        }
      }
      var c = kx.ⵠⵠΔ[0];
      var d = 0;
      for (b = 0; b < c.length && d < a.length; b++) {
        var e = c[b];
        if ((kx.mode != 1 || kx.ⲆⲆⵠⵠ[e.id].ᐃᐃⵠⲆΔ !== "spectator") && e.ⲆⵠⲆᐃᐃ === -1 && e.ᐃᐃΔΔ !== lx.ᐃᐃΔΔ) {
          this.ⲆⲆⵠⵠ[a[d]].ᐃⵠⵠΔᐃ(e.ᐃᐃΔΔ);
          d++;
        }
      }
    };
    this.ΔᐃⲆⵠⵠᐃΔⵠⵠ = function () {
      this.ⵠⵠⵠⲆⲆⵠⵠⵠⲆ();
      for (var a = 0; a < this.ⲆⲆⵠⵠ.length; a++) {
        var b = this.ⲆⲆⵠⵠ[a];
        if (!b.ⲆΔⲆⲆⲆΔⲆ && b.check()) {
          b.ΔⵠΔ();
        }
      }
    };
    this.ᐃᐃᐃΔⵠᐃⲆᐃⵠ = function (a) {
      if (this.ᐃⵠΔⵠⲆΔⵠ.x === a.x && this.ᐃⵠΔⵠⲆΔⵠ.y === a.y) {
        return 0;
      } else {
        this.ᐃⵠΔⵠⲆΔⵠ.x = a.x;
        this.ᐃⵠΔⵠⲆΔⵠ.y = a.y;
        this.ΔΔⵠⵠⵠ.x = this.ᐃⵠⵠᐃⲆⵠⲆ(a.x);
        this.ΔΔⵠⵠⵠ.y = this.ᐃⵠⲆᐃⲆᐃΔ(a.y);
        Howler.pos(this.ΔΔⵠⵠⵠ.x, this.ΔΔⵠⵠⵠ.y, 0);
        return 1;
      }
    };
    this.ᐃⵠᐃⲆᐃᐃⵠⲆⵠ = function () {
      if (this.ⲆΔⵠΔᐃ && this.loaded) {
        var a = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
        if (a) {
          a.ⲆⵠⲆᐃᐃ = 0;
          var b = this.ᐃᐃᐃΔⵠᐃⲆᐃⵠ(a);
          if (kx.mode !== 2 && kx.mode !== 4 && kx.mode !== 5) {
            this.ᐃᐃⵠⵠⵠ(a, b);
          }
          this.ΔᐃⲆⵠⵠᐃΔⵠⵠ();
        }
      }
    };
    this.ᐃΔΔΔΔⵠⵠⵠⲆ = function () {
      for (var b in bx) {
        var c = bx[b];
        if (typeof c === "object" && c.path) {
          c.ᐃᐃᐃΔΔ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.ᐃΔ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(undefined);
          for (var h = 0; h < f; h++) {
            var j = c.ᐃᐃᐃΔΔ.play(d);
            c.ᐃᐃᐃΔΔ.stop(j);
            c.ᐃᐃᐃΔΔ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(qn, undefined);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            px.sample[d] = g;
          } else {
            px.sample[d] = g[0];
          }
          px.ᐃΔⲆᐃ[d] = c.ᐃᐃᐃΔΔ;
        }
      }
    };
    this.ⵠᐃⲆᐃᐃᐃⲆ = function (a, b, c) {
      for (var d = 0; d < a.length; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ᐃᐃΔΔΔⵠΔ = function (b, c, d, e, f, g) {
      var a = b;
      for (var i = 0; i < d; i++) {
        var j = a[i] = [];
        for (ⵠΔᐃ = 0; ⵠΔᐃ < e; ⵠΔᐃ++) {
          j[ⵠΔᐃ] = px.sample[f + ⵠΔᐃ][i];
          c.ᐃᐃᐃΔΔ.volume(g, j[ⵠΔᐃ]);
        }
      }
    };
    this.ᐃⵠⵠΔᐃ = function () {
      px.ᐃΔΔΔΔⵠⵠⵠⲆ();
      px.ⲆΔᐃᐃⵠ.ⲆᐃΔᐃⵠⵠⵠ = [];
      px.ⲆΔᐃᐃⵠ.ΔᐃᐃⵠⲆ = [];
      px.ⲆΔᐃᐃⵠ.ΔᐃⲆᐃΔ = [];
      px.ᐃᐃΔΔΔⵠΔ(px.ⲆΔᐃᐃⵠ.ⲆᐃΔᐃⵠⵠⵠ, bx.ⲆⵠΔᐃᐃᐃⲆ, 8, 3, "p", 0.15);
      px.ᐃᐃΔΔΔⵠΔ(px.ⲆΔᐃᐃⵠ.ΔᐃᐃⵠⲆ, bx.ΔΔᐃⵠⲆᐃⲆ, 8, 4, "w", 0.15);
      px.ᐃᐃΔΔΔⵠΔ(px.ⲆΔᐃᐃⵠ.ΔᐃⲆᐃΔ, bx.ⵠᐃᐃⲆᐃⲆᐃ, 8, 3, "d", 0.09);
      px.ⵠᐃⲆᐃᐃᐃⲆ(px.sample.ΔΔⲆⵠΔ, px.ᐃΔⲆᐃ.ΔΔⲆⵠΔ, 0.15);
      px.ⵠᐃⲆᐃᐃᐃⲆ(px.sample.ⵠⲆΔⲆⲆⵠᐃ, px.ᐃΔⲆᐃ.ⵠⲆΔⲆⲆⵠᐃ, 0.2);
      px.ⵠᐃⲆᐃᐃᐃⲆ(px.sample.ΔⲆᐃⵠⲆΔⲆ, px.ᐃΔⲆᐃ.ΔⲆᐃⵠⲆΔⲆ, 1);
      px.ⵠΔⵠᐃⲆ.ΔⵠᐃⲆΔⵠⵠᐃᐃ = new dx(12, this.sample.ⲆᐃⲆᐃⲆΔⲆ, this.sample.ⲆᐃΔΔᐃᐃᐃ, 5000, 0.05, 0.4, bx.ᐃⲆᐃⲆΔⵠΔ.ᐃᐃᐃΔΔ, 3000, {
        x: ts.ΔⵠⵠⲆⵠⲆᐃ,
        y: ts.ᐃⵠΔᐃΔΔⲆ,
        w: kx.w,
        ⲆΔⲆ: kx.ⲆΔⲆ
      }, {
        x: ts.ΔⵠⵠⲆⵠⲆᐃ - 2300,
        y: ts.ᐃⵠΔᐃΔΔⲆ - 4000,
        w: kx.w,
        ⲆΔⲆ: kx.ⲆΔⲆ
      }, {
        x: ts.ΔⵠⵠⲆⵠⲆᐃ - 1500,
        y: ts.ᐃⵠΔᐃΔΔⲆ - 2000,
        w: kx.w,
        ⲆΔⲆ: kx.ⲆΔⲆ
      });
      px.ⵠΔⵠᐃⲆ.ᐃⲆΔⲆⲆⵠⲆⵠⲆ = new dx(12, this.sample.ΔᐃⵠΔΔᐃᐃ, this.sample.ᐃⵠΔΔⲆᐃᐃ, 5000, 0.03, 0.25, bx.ᐃⲆᐃⲆΔⵠΔ.ᐃᐃᐃΔΔ, 3000, {
        x: 0,
        y: ts.ᐃⵠΔᐃΔΔⲆ + 800,
        w: ts.ΔⵠⵠⲆⵠⲆᐃ - 2300,
        ⲆΔⲆ: kx.ⲆΔⲆ
      }, {
        x: -100,
        y: ts.ᐃⵠΔᐃΔΔⲆ - 300,
        w: ts.ΔⵠⵠⲆⵠⲆᐃ - 100,
        ⲆΔⲆ: kx.ⲆΔⲆ
      }, {
        x: -100,
        y: ts.ᐃⵠΔᐃΔΔⲆ + 400,
        w: ts.ΔⵠⵠⲆⵠⲆᐃ - 1400,
        ⲆΔⲆ: kx.ⲆΔⲆ
      });
      px.ⵠΔⵠᐃⲆ.ⲆⵠΔᐃⵠⲆΔ = new dx(12, this.sample.ᐃⲆᐃΔⵠᐃᐃ, this.sample.ᐃⵠⲆᐃⲆᐃⵠ, 5000, 0.01, 0.22, bx.ᐃⲆᐃⲆΔⵠΔ.ᐃᐃᐃΔΔ, 3000, {
        x: -100,
        y: -100,
        w: kx.w + 200,
        ⲆΔⲆ: ts.ᐃⵠΔᐃΔΔⲆ - 1000
      }, {
        x: -100,
        y: -100,
        w: kx.w + 200,
        ⲆΔⲆ: ts.ᐃⵠΔᐃΔΔⲆ + 600
      }, {
        x: -100,
        y: -100,
        w: kx.w + 200,
        ⲆΔⲆ: ts.ᐃⵠΔᐃΔΔⲆ + 100
      });
      for (var a = 0; a < 8; a++) {
        px.ⲆⲆⵠⵠ[a] = new gx(a);
      }
      px.ⲆⲆⵠⵠ[0].ᐃⵠⵠΔᐃ(lx.ᐃᐃΔΔ);
      px.loaded = 1;
    };
    this.ⲆⵠΔΔᐃΔᐃΔΔ = function () {
      if (!this.transition && kx.ⲆⲆΔΔⲆ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ⲆᐃⲆⲆΔ = function () {
      if (this.ⲆΔⵠΔᐃ && this.loaded) {
        for (var a in px.sample) {
          var b = px.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              px.ᐃΔⲆᐃ[a].stop(b[c]);
            }
          } else {
            px.ᐃΔⲆᐃ[a].stop(b);
          }
        }
        for (c = 0; c < px.ⲆⲆⵠⵠ.length; c++) {
          px.ⲆⲆⵠⵠ[c].ᐃⵠᐃⵠΔᐃⵠ();
        }
      }
    };
    this.select = function () {
      if (px.ⲆΔⵠΔᐃ) {
        px.ⲆᐃⲆⲆΔ();
      } else {
        if (!px.loaded) {
          px.ᐃⵠⵠΔᐃ();
        }
        px.ⲆⲆⵠⵠ[0].ᐃᐃΔΔ = lx.ᐃᐃΔΔ;
        px.ⲆⲆⵠⵠ[0].ⲆΔⲆⲆⲆΔⲆ = 0;
        px.ⲆⵠΔΔᐃΔᐃΔΔ();
      }
      px.ⲆΔⵠΔᐃ = !px.ⲆΔⵠΔᐃ;
    };
  }();
  var qx = new function () {
    this.ᐃⵠⲆⵠᐃᐃⵠ = function () {
      this.ΔΔⲆΔⵠ = 81;
      this.ΔᐃΔΔᐃ = 68;
      this.ⵠΔⵠⵠⵠ = 90;
      this.ᐃⲆⵠᐃⲆᐃⵠ = 83;
    };
    this.ᐃⲆᐃⲆΔᐃⵠ = function () {
      this.ΔΔⲆΔⵠ = 65;
      this.ΔᐃΔΔᐃ = 68;
      this.ⵠΔⵠⵠⵠ = 87;
      this.ⲆᐃⵠⵠΔ = 83;
    };
    this.ⵠΔΔᐃΔ = 0;
    this.ᐃⲆⵠᐃⲆᐃⵠ = 1;
    this.ΔⲆΔᐃⲆⵠⲆ = 49;
    this.ᐃΔⲆᐃⵠⲆⲆ = 50;
    this.ⲆⲆᐃᐃⵠⵠᐃ = 51;
    this.ⲆⲆᐃⲆᐃⵠΔ = 52;
    this.ⲆⵠᐃᐃᐃⲆΔᐃⲆ = 53;
    this.ΔΔⲆΔᐃΔΔ = 17;
    this.ΔⲆΔⵠᐃᐃⵠ = 37;
    this.ᐃΔΔΔⲆⵠᐃ = 39;
    this.ᐃⲆⵠᐃΔΔⵠ = 38;
    this.ⵠᐃⲆⲆⲆΔΔ = 40;
    this.ᐃᐃⵠΔΔᐃⵠ = 32;
    this.ⲆΔⵠᐃᐃᐃⵠ = 82;
    this.ΔΔΔⲆᐃΔⲆ = 71;
    this.ΔΔⵠⲆᐃⵠΔ = 86;
    this.ⲆᐃΔⲆᐃⵠⵠ = 66;
    this.ᐃⲆᐃⲆΔᐃⵠ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ⵠΔΔᐃΔ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ⵠΔΔᐃΔ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (this.ΔΔⲆΔⵠ == b || b == this.ΔⲆΔⵠᐃᐃⵠ) {
        this.ΔΔⵠΔⲆⵠΔ();
      } else if (this.ⵠΔⵠⵠⵠ == b || b == this.ᐃⲆⵠᐃΔΔⵠ) {
        this.ΔΔΔᐃⵠⲆⲆ();
      } else if (this.ᐃⲆⵠᐃⲆᐃⵠ == b || this.ᐃⵠᐃⲆⵠⲆΔᐃⲆ == b) {
        this.ΔΔⲆⵠΔⲆΔ();
      } else if (this.ΔᐃΔΔᐃ == b || this.ᐃΔΔΔⲆⵠᐃ == b) {
        this.ᐃⵠⵠΔΔⵠᐃ();
      }
      this.keys[b] = this.ᐃⲆⵠᐃⲆᐃⵠ;
      return b;
    };
    this.ΔΔⵠΔⲆⵠΔ = function () {
      this.keys[this.ΔᐃΔΔᐃ] = this.ⵠΔΔᐃΔ;
      this.keys[this.ᐃΔΔΔⲆⵠᐃ] = this.ⵠΔΔᐃΔ;
    };
    this.ᐃⵠⵠΔΔⵠᐃ = function () {
      this.keys[this.ΔΔⲆΔⵠ] = this.ⵠΔΔᐃΔ;
      this.keys[this.ΔⲆΔⵠᐃᐃⵠ] = this.ⵠΔΔᐃΔ;
    };
    this.ΔΔⲆⵠΔⲆΔ = function () {
      this.keys[this.ⵠΔⵠⵠⵠ] = this.ⵠΔΔᐃΔ;
      this.keys[this.ᐃⲆⵠᐃΔΔⵠ] = this.ⵠΔΔᐃΔ;
    };
    this.ΔΔΔᐃⵠⲆⲆ = function () {
      this.keys[this.ⲆᐃⵠⵠΔ] = this.ⵠΔΔᐃΔ;
      this.keys[this.ⵠᐃⲆⲆⲆΔΔ] = this.ⵠΔΔᐃΔ;
    };
    this.ⲆⲆΔⵠᐃⲆΔ = function () {
      this.keys[this.ΔᐃΔΔᐃ] = this.ⵠΔΔᐃΔ;
      this.keys[this.ᐃΔΔΔⲆⵠᐃ] = this.ⵠΔΔᐃΔ;
      this.keys[this.ΔΔⲆΔⵠ] = this.ⵠΔΔᐃΔ;
      this.keys[this.ΔⲆΔⵠᐃᐃⵠ] = this.ⵠΔΔᐃΔ;
      this.keys[this.ⵠΔⵠⵠⵠ] = this.ⵠΔΔᐃΔ;
      this.keys[this.ᐃⲆⵠᐃΔΔⵠ] = this.ⵠΔΔᐃΔ;
      this.keys[this.ⲆᐃⵠⵠΔ] = this.ⵠΔΔᐃΔ;
      this.keys[this.ⵠᐃⲆⲆⲆΔΔ] = this.ⵠΔΔᐃΔ;
    };
    this.ΔᐃᐃⵠΔᐃᐃ = function () {
      return this.keys[this.ΔΔⲆΔⵠ] || this.keys[this.ΔⲆΔⵠᐃᐃⵠ];
    };
    this.ⲆⵠⵠⲆΔΔᐃ = function () {
      return this.keys[this.ΔᐃΔΔᐃ] || this.keys[this.ᐃΔΔΔⲆⵠᐃ];
    };
    this.ⵠⵠΔⵠᐃᐃⲆ = function () {
      return this.keys[this.ⵠΔⵠⵠⵠ] || this.keys[this.ᐃⲆⵠᐃΔΔⵠ];
    };
    this.ᐃⲆⲆΔⵠΔᐃ = function () {
      return this.keys[this.ⲆᐃⵠⵠΔ] || this.keys[this.ⵠᐃⲆⲆⲆΔΔ];
    };
    this.ᐃΔΔᐃΔⲆⲆΔΔ = function () {
      return this.keys[this.ΔΔⲆΔᐃΔΔ];
    };
    this.ⲆⵠΔⵠⲆⵠⲆⵠΔ = function () {
      return this.keys[this.ΔⲆΔᐃⲆⵠⲆ];
    };
    this.ΔⵠⵠⲆⵠⵠΔΔⵠ = function () {
      return this.keys[this.ᐃΔⲆᐃⵠⲆⲆ];
    };
    this.ⵠⵠⵠⵠⲆⲆⲆΔⵠ = function () {
      return this.keys[this.ⲆⲆᐃᐃⵠⵠᐃ];
    };
    this.ΔⵠΔⵠᐃⲆⵠⵠᐃ = function () {
      return this.keys[this.ⲆⲆᐃⲆᐃⵠΔ];
    };
    this.ⵠᐃᐃⵠⵠᐃⲆⲆΔ = function () {
      return this.keys[this.ᐃᐃⵠΔΔᐃⵠ];
    };
    this.ᐃᐃⲆΔᐃΔᐃᐃⵠ = function () {
      return this.keys[this.ⲆΔⵠᐃᐃᐃⵠ];
    };
    this.ⵠᐃΔᐃΔΔⲆⵠⵠ = function () {
      return this.keys[this.ΔΔΔⲆᐃΔⲆ];
    };
    this.ᐃⵠⲆΔΔᐃⵠⵠΔ = function () {
      return this.keys[this.ΔΔⵠⲆᐃⵠΔ];
    };
    this.ᐃⲆⵠΔᐃᐃⵠᐃⵠ = function () {
      return this.keys[this.ⲆᐃΔⲆᐃⵠⵠ];
    };
  }();
  var rx = new function () {
    this.ᐃⲆⵠᐃⲆᐃⵠ = 0;
    this.ⵠΔΔᐃΔ = 1;
    this.IDLE = 2;
    this.ΔⲆⲆΔᐃⵠⲆ = 0;
    this.ⲆⵠΔΔᐃᐃᐃⵠΔ = 1;
    this.Δⵠᐃᐃ = {
      x: 0,
      y: 0
    };
    this.ᐃⲆⲆᐃΔⵠΔ = 0;
    this.ᐃᐃΔΔⲆᐃΔ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ⵠΔⲆⲆ = this.ΔⲆⲆΔᐃⵠⲆ;
    this.down = function () {
      this.state = this.ᐃⲆⵠᐃⲆᐃⵠ;
    };
    this.up = function () {
      this.state = this.ⵠΔΔᐃΔ;
    };
    this.ΔⵠΔ = function () {
      return (this.Δⵠᐃᐃ.x != this.ᐃⲆⲆᐃΔⵠΔ || this.ᐃᐃΔΔⲆᐃΔ != this.Δⵠᐃᐃ.y) && (this.ᐃⲆⲆᐃΔⵠΔ = this.Δⵠᐃᐃ.x, this.ᐃᐃΔΔⲆᐃΔ = this.Δⵠᐃᐃ.y, true);
    };
  }();
  var sx = 0;
  var tx = 0;
  var ux = new function (c, e, f) {
    this.ⵠΔ = c;
    this.ᐃ = e;
    this.ᐃᐃΔⵠⲆⵠⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      style: document.getElementById("loading").style,
      ΔⵠΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ᐃᐃΔⵠⲆⵠⵠ.style.position = "absolute";
    this.ᐃᐃΔⵠⲆⵠⵠ.style.display = "inline-block";
    this.ᐃᐃΔⵠⲆⵠⵠ.ΔⵠΔ();
    this.ⲆᐃΔᐃⲆ = Vg;
    this.stop = function () {
      this.ⲆᐃΔᐃⲆ = false;
    };
    this.ⲆⲆⵠⵠΔⲆⲆ = {
      total: 1
    };
    var i = this;
    function j() { }
    var k = 0;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ⵠᐃΔⲆⲆ = function () {
      i.ΔⵠΔ();
      if (++k == 40) {
        i.stop();
        j();
        return;
      }
      Ph.setTimeout(i.ⵠᐃΔⲆⲆ, 33);
    };
    this.ⲆᐃⲆⲆΔ = function (a) {
      j = a;
      i.ⵠᐃΔⲆⲆ();
    };
    new Date().getTime();
    Object.keys(ΔΔ).length;
    console.log(Yj, xs);
    for (var o in ΔΔ) {
      if (n(ΔΔ[o]) === 0) {
        0;
      }
    }
    console.log(Gs, undefined);
    function p() {
      if (this.ᐃᐃⲆⲆⲆⲆⲆ !== 0) {
        return this.ᐃᐃⲆⲆⲆⲆⲆ;
      } else {
        this.ᐃᐃⲆⲆⲆⲆⲆ = 2;
        this.src = this.ⲆⲆⵠΔⵠ;
        return 0;
      }
    }
    function g(a) {
      this.ᐃᐃⲆⲆⲆⲆⲆ = 1;
    }
    var l = 0;
    function q() {
      console.log(qn);
      if (l !== 1) {
        l = 1;
        console.log(undefined);
        if (ib !== Jb) {
          ib();
        }
        Jb();
        var a = ΔΔⲆ.ⵠⲆΔⵠⵠᐃᐃ("server");
        if (a !== null) {
          nx.ᐃΔᐃⵠⵠⵠⲆ = 1;
          nx.ᐃⵠⵠΔⲆ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: a,
            ssl: 1
          }];
        }
        nx.ⲆⵠⲆΔⵠΔᐃΔΔ();
        setTimeout(f, 100);
      }
    }
    function b() {
      let a = function () {
        nx.ΔᐃⵠⵠⲆΔⵠ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(b, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function d() {
      this.ⵠⲆΔᐃᐃΔⵠ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ⵠⲆΔᐃᐃΔⵠ}`, this);
      if (this.ⵠⲆΔᐃᐃΔⵠ > 3) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ⵠⲆΔᐃᐃΔⵠ;
      var b = this.src;
      var c = n(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ⲆΔⵠᐃⲆⲆᐃ) {
          if (b.indexOf(ⲆΔⵠᐃⲆⲆᐃ[c]) !== -1) {
            ΔΔ[c] = new Image();
            ΔΔ[c].onload = g;
            ΔΔ[c].onerror = d;
            ΔΔ[c].ⵠⲆΔᐃᐃΔⵠ = a;
            ΔΔ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function s(a) {
      for (var b in ΔΔ) {
        var c = ΔΔ[b];
        if (typeof c === "string" && n(c) === a) {
          ΔΔ[b] = new Image();
          ΔΔ[b].ᐃᐃⲆⲆⲆⲆⲆ = 0;
          ΔΔ[b].ⵠⲆΔᐃᐃΔⵠ = 0;
          ΔΔ[b].onload = g;
          ΔΔ[b].onerror = d;
          ΔΔ[b].ⵠⵠⵠΔⲆⲆᐃ = p;
          ΔΔ[b].ⲆⲆⵠΔⵠ = c;
        }
      }
    }
    s(1);
    s(0);
    gu(1, "l", 20, "#000");
    b();
    ic();
    this.ΔⵠΔ = function () {
      this.ᐃᐃΔⵠⲆⵠⵠ.translate.x = (Bo - 500) / 2;
      this.ᐃᐃΔⵠⲆⵠⵠ.translate.y = (cq - 150) / 2;
      var a = 2500 / (40 - k + 1) - 48;
      this.ᐃᐃΔⵠⲆⵠⵠ.translate.y -= a;
      this.ᐃᐃΔⵠⲆⵠⵠ.ΔⵠΔ();
    };
    this.ᐃᐃΔⵠⲆⵠⵠ.ΔⵠΔ();
    this.ΔᐃⲆΔ = function () {
      try {
        Uc();
      } catch (a) { }
      this.ΔⵠΔ();
    };
  }(Jo, Mo, function () {
    Om();
    ox = new Hf(Jo, Mo);
    (jx = new qf(Jo, Mo)).ⵠΔⲆΔΔⵠⵠⵠⵠ();
    mx = new Lf(Jo, Mo);
    kx = new wf();
    lx = new _f();
    ux.ⲆᐃⲆⲆΔ(function () {
      ux.ᐃᐃΔⵠⲆⵠⵠ.style.display = "none";
      jx.ⲆΔⵠΔᐃ();
    });
  });
  function vx(b, c, d, e, f, i) {
    Fj(mf, b, c, d, e, f, i);
    const a = Lw[0] ^ 45294;
    const j = (16 << ((a ^ Lw[2]) >> 8 & 255)) + (0 << ((a ^ Lw[2]) & 255)) + (8 << ((a ^ Lw[2]) >> 16 & 255)) + (24 << ((a ^ Lw[2]) >> 24 & 255));
    const k = (j | 55830) & ~(j & 55830);
    const h = ~(k & 29127) & k | ~(k & 29127) & 29127;
    return ~(h & 17874) & (h | 17874);
  }
  function wx() {
    try {
      Ph.Widget.adsRefresh();
    } catch (a) { }
  }
  function xx(b, c, d) {
    const e = (0 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (24 << (b >> 24 & 255)) + (16 << (b & 255));
    const f = (12345 + (c + 33780) * 1103515245) % 2147483648;
    const g = ~(d & 20497) & d | ~(d & 20497) & 20497;
    return ((62983 + (Nf(e, f, g, e, f) ^ ex(g, e, f))) * 1103515245 + 12345) % 2147483648;
  }
  Ph.onbeforeunload = function () {
    if (ox.ⲆᐃΔᐃⲆ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  xr();
  (function b(a) {
    Ph.requestAnimationFrame(b);
    tx = (a - sx) / 1000;
    sx = a;
    tx = tx > 1 ? 1 : tx;
    if (ox.ⲆᐃΔᐃⲆ) {
      ox.ΔᐃⲆΔ();
    } else {
      Mo.clearRect(0, 0, Bo, cq);
      if (ux.ⲆᐃΔᐃⲆ) {
        ux.ΔᐃⲆΔ();
      } else if (jx.ⲆᐃΔᐃⲆ) {
        jx.ΔᐃⲆΔ();
      } else if (mx.ⲆᐃΔᐃⲆ) {
        mx.ΔᐃⲆΔ();
      }
    }
  })(0);
  const [workerTimersSetInterval, unusedWorkerTimersSetTimeout] = (() => {
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __commonJS = (cb, mod) => function __require() {
      return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));

    // node_modules/fast-unique-numbers/build/es5/bundle.js
    var require_bundle = __commonJS({
      "node_modules/fast-unique-numbers/build/es5/bundle.js"(exports, module) {
        (function (global, factory) {
          typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.fastUniqueNumbers = {}));
        })(exports, function (exports2) {
          "use strict";
          var createAddUniqueNumber = function createAddUniqueNumber2(generateUniqueNumber3) {
            return function (set) {
              var number = generateUniqueNumber3(set);
              set.add(number);
              return number;
            };
          };
          var createCache = function createCache2(lastNumberWeakMap) {
            return function (collection, nextNumber) {
              lastNumberWeakMap.set(collection, nextNumber);
              return nextNumber;
            };
          };
          var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER === void 0 ? 9007199254740991 : Number.MAX_SAFE_INTEGER;
          var TWO_TO_THE_POWER_OF_TWENTY_NINE = 536870912;
          var TWO_TO_THE_POWER_OF_THIRTY = TWO_TO_THE_POWER_OF_TWENTY_NINE * 2;
          var createGenerateUniqueNumber = function createGenerateUniqueNumber2(cache2, lastNumberWeakMap) {
            return function (collection) {
              var lastNumber = lastNumberWeakMap.get(collection);
              var nextNumber = lastNumber === void 0 ? collection.size : lastNumber < TWO_TO_THE_POWER_OF_THIRTY ? lastNumber + 1 : 0;
              if (!collection.has(nextNumber)) {
                return cache2(collection, nextNumber);
              }
              if (collection.size < TWO_TO_THE_POWER_OF_TWENTY_NINE) {
                while (collection.has(nextNumber)) {
                  nextNumber = Math.floor(Math.random() * TWO_TO_THE_POWER_OF_THIRTY);
                }
                return cache2(collection, nextNumber);
              }
              if (collection.size > MAX_SAFE_INTEGER) {
                throw new Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
              }
              while (collection.has(nextNumber)) {
                nextNumber = Math.floor(Math.random() * MAX_SAFE_INTEGER);
              }
              return cache2(collection, nextNumber);
            };
          };
          var LAST_NUMBER_WEAK_MAP = /* @__PURE__ */ new WeakMap();
          var cache = createCache(LAST_NUMBER_WEAK_MAP);
          var generateUniqueNumber2 = createGenerateUniqueNumber(cache, LAST_NUMBER_WEAK_MAP);
          var addUniqueNumber = createAddUniqueNumber(generateUniqueNumber2);
          exports2.addUniqueNumber = addUniqueNumber;
          exports2.generateUniqueNumber = generateUniqueNumber2;
        });
      }
    });

    // node_modules/worker-timers-broker/build/es2019/module.js
    var import_fast_unique_numbers = __toESM(require_bundle());

    // node_modules/worker-timers-broker/build/es2019/guards/call-notification.js
    var isCallNotification = (message) => {
      return message.method !== void 0 && message.method === "call";
    };

    // node_modules/worker-timers-broker/build/es2019/guards/clear-response.js
    var isClearResponse = (message) => {
      return typeof message.id === "number" && typeof message.result === "boolean";
    };

    // node_modules/worker-timers-broker/build/es2019/module.js
    var load = (url) => {
      const scheduledIntervalFunctions = /* @__PURE__ */ new Map([[0, () => {
      }]]);
      const scheduledTimeoutFunctions = /* @__PURE__ */ new Map([[0, () => {
      }]]);
      const unrespondedRequests = /* @__PURE__ */ new Map();
      const worker2 = new Worker(url);
      worker2.addEventListener("message", ({ data }) => {
        if (isCallNotification(data)) {
          const { params: { timerId, timerType } } = data;
          if (timerType === "interval") {
            const idOrFunc = scheduledIntervalFunctions.get(timerId);
            if (typeof idOrFunc === void 0) {
              throw new Error("The timer is in an undefined state.");
            }
            if (typeof idOrFunc === "number") {
              const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
              if (timerIdAndTimerType === void 0 || timerIdAndTimerType.timerId !== timerId || timerIdAndTimerType.timerType !== timerType) {
                throw new Error("The timer is in an undefined state.");
              }
            } else if (typeof idOrFunc === "function") {
              idOrFunc();
            }
          } else if (timerType === "timeout") {
            const idOrFunc = scheduledTimeoutFunctions.get(timerId);
            if (typeof idOrFunc === void 0) {
              throw new Error("The timer is in an undefined state.");
            }
            if (typeof idOrFunc === "number") {
              const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
              if (timerIdAndTimerType === void 0 || timerIdAndTimerType.timerId !== timerId || timerIdAndTimerType.timerType !== timerType) {
                throw new Error("The timer is in an undefined state.");
              }
            } else if (typeof idOrFunc === "function") {
              idOrFunc();
              scheduledTimeoutFunctions.delete(timerId);
            }
          }
        } else if (isClearResponse(data)) {
          const { id } = data;
          const timerIdAndTimerType = unrespondedRequests.get(id);
          if (timerIdAndTimerType === void 0) {
            throw new Error("The timer is in an undefined state.");
          }
          const { timerId, timerType } = timerIdAndTimerType;
          unrespondedRequests.delete(id);
          if (timerType === "interval") {
            scheduledIntervalFunctions.delete(timerId);
          } else {
            scheduledTimeoutFunctions.delete(timerId);
          }
        } else {
          const { error: { message } } = data;
          throw new Error(message);
        }
      });
      const clearInterval = (timerId) => {
        if (typeof scheduledIntervalFunctions.get(timerId) === "function") {
          const id = (0, import_fast_unique_numbers.generateUniqueNumber)(unrespondedRequests);
          unrespondedRequests.set(id, { timerId, timerType: "interval" });
          scheduledIntervalFunctions.set(timerId, id);
          worker2.postMessage({
            id,
            method: "clear",
            params: { timerId, timerType: "interval" }
          });
        }
      };
      const clearTimeout = (timerId) => {
        if (typeof scheduledTimeoutFunctions.get(timerId) === "function") {
          const id = (0, import_fast_unique_numbers.generateUniqueNumber)(unrespondedRequests);
          unrespondedRequests.set(id, { timerId, timerType: "timeout" });
          scheduledTimeoutFunctions.set(timerId, id);
          worker2.postMessage({
            id,
            method: "clear",
            params: { timerId, timerType: "timeout" }
          });
        }
      };
      const setInterval2 = (func, delay = 0, ...args) => {
        const timerId = (0, import_fast_unique_numbers.generateUniqueNumber)(scheduledIntervalFunctions);
        scheduledIntervalFunctions.set(timerId, () => {
          func(...args);
          if (typeof scheduledIntervalFunctions.get(timerId) === "function") {
            worker2.postMessage({
              id: null,
              method: "set",
              params: {
                delay,
                now: performance.timeOrigin + performance.now(),
                timerId,
                timerType: "interval"
              }
            });
          }
        });
        worker2.postMessage({
          id: null,
          method: "set",
          params: {
            delay,
            now: performance.timeOrigin + performance.now(),
            timerId,
            timerType: "interval"
          }
        });
        return timerId;
      };
      const setTimeout3 = (func, delay = 0, ...args) => {
        const timerId = (0, import_fast_unique_numbers.generateUniqueNumber)(scheduledTimeoutFunctions);
        scheduledTimeoutFunctions.set(timerId, () => func(...args));
        worker2.postMessage({
          id: null,
          method: "set",
          params: {
            delay,
            now: performance.timeOrigin + performance.now(),
            timerId,
            timerType: "timeout"
          }
        });
        return timerId;
      };
      return {
        clearInterval,
        clearTimeout,
        setInterval: setInterval2,
        setTimeout: setTimeout3
      };
    };

    // node_modules/worker-timers/build/es2019/factories/load-or-return-broker.js
    var createLoadOrReturnBroker = (loadBroker, worker2) => {
      let broker = null;
      return () => {
        if (broker !== null) {
          return broker;
        }
        const blob = new Blob([worker2], { type: "application/javascript; charset=utf-8" });
        const url = URL.createObjectURL(blob);
        broker = loadBroker(url);
        setTimeout(() => URL.revokeObjectURL(url));
        return broker;
      };
    };

    // node_modules/worker-timers/build/es2019/worker/worker.js
    var worker = `(()=>{"use strict";const e=new Map,t=new Map,r=t=>{const r=e.get(t);return void 0!==r&&(clearTimeout(r),e.delete(t),!0)},s=e=>{const r=t.get(e);return void 0!==r&&(clearTimeout(r),t.delete(e),!0)},o=(e,t)=>{const r=performance.now(),s=e+t-r-performance.timeOrigin;return{expected:r+s,remainingDelay:s}},i=(e,t,r,s)=>{const o=r-performance.now();o>0?e.set(t,setTimeout(i,o,e,t,r,s)):(e.delete(t),postMessage({id:null,method:"call",params:{timerId:t,timerType:s}}))};addEventListener("message",(n=>{let{data:a}=n;try{if("clear"===a.method){const{id:e,params:{timerId:t,timerType:o}}=a;if("interval"===o)postMessage({id:e,result:r(t)});else{if("timeout"!==o)throw new Error('The given type "'.concat(o,'" is not supported'));postMessage({id:e,result:s(t)})}}else{if("set"!==a.method)throw new Error('The given method "'.concat(a.method,'" is not supported'));{const{params:{delay:r,now:s,timerId:n,timerType:m}}=a;if("interval"===m)((t,r,s)=>{const{expected:n,remainingDelay:a}=o(t,s);e.set(r,setTimeout(i,a,e,r,n,"interval"))})(r,n,s);else{if("timeout"!==m)throw new Error('The given type "'.concat(m,'" is not supported'));((e,r,s)=>{const{expected:n,remainingDelay:a}=o(e,s);t.set(r,setTimeout(i,a,t,r,n,"timeout"))})(r,n,s)}}}}catch(e){postMessage({error:{message:e.message},id:a.id,result:null})}}))})();`;

    // node_modules/worker-timers/build/es2019/module.js
    var loadOrReturnBroker = createLoadOrReturnBroker(load, worker);
    var setInterval = (...args) => loadOrReturnBroker().setInterval(...args);
    var setTimeout2 = (...args) => loadOrReturnBroker().setTimeout(...args);

    return [setInterval, setTimeout2]
  })();
  workerTimersSetInterval(function () {
    try {
      if (!lx.reconnect.enabled && lx.ⲆΔΔΔᐃ) {
        lx.ⲆⲆΔᐃᐃ.ΔⵠΔ();
      }
    } catch { }
  }, 2e3);
  workerTimersSetInterval(function () {
    try {
      if (!lx.reconnect.enabled && lx.ⲆΔΔΔᐃ) {
        nx.ping();
      }
    } catch { }
  }, 1000 * 60);
  function getRandomUTF16Char() {
    // UTF-16の範囲は0x0000から0xFFFFまで
    const randomCodePoint = Math.floor(Math.random() * 0x10000);
    return String.fromCharCode(randomCodePoint);
  }

  workerTimersSetInterval(function () {
    if (!lx.reconnect.enabled && lx.ⲆΔΔΔᐃ) {
      var b = kx.ⲆᐃΔΔᐃ[lx.ᐃᐃΔΔ];
      const a = (function () {
        var bb = "";
        for (let i = 0; i < 70; i++) {
          bb += getRandomUTF16Char();
        }
        return bb
      })();
      if (lx.ᐃᐃⲆⵠⲆ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ᐃⵠᐃΔⵠ);
        } else {
          b.text.push(ᐃⵠᐃΔⵠ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ⵠΔΔⲆ[tf](JSON.stringify([15, a]));
    }
  }, 1000 * 2);
  var yx = 0;
  function zx() {
    Ax.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
    Ax.send();
  }
  var Ax = new XMLHttpRequest();
  Ax.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var Bx = "https://token.starve.io/";
  var Cx = "https://token2.starve.io/";
  var Dx = 0;
  var Ex = 1;
  var Fx = 4;
  var Gx = eg;
  var Hx = undefined;
  var Ix = undefined;
  const Jx = 11305981;
  const Kx = 11305981 .ᐃᐃⵠⲆᐃⵠᐃ;
  const Lx = `const ⲆΔⵠⲆⵠᐃΔ = (typeof ΔΔᐃᐃΔⵠⵠⵠⵠ === "${Kx}") ? 1 : 0; return ⲆΔⵠⲆⵠᐃΔ;`;
  var Mx = 0;
  Ph.ΔⵠΔⵠᐃᐃⵠ = function () {
    Mx = 1;
  };
  var Nx = {
    ᐃⲆⵠⵠⲆΔᐃᐃⲆ: "ACCESS_TOKEN"
  };
  var Ox = document.createElement("script");
  Ox.type = "text/javascript";
  Ox.async = Hh;
  Ox.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  Ox.addEventListener("load", function (a) {
    Ph.XPayStationWidget.init(Nx);
    Ph.XPayStationWidget.on("status-done", Yx);
  }, false);
  document.getElementsByTagName("head")[0].appendChild(Ox);
  Ph.fbAsyncInit = function () {
    Vx();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var Px = xs;
  var Qx = pa;
  function Rx() {
    Ph.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (Px = a).isSignedIn.listen(Sx);
      Px.currentUser.listen(Tx);
      if (Px.isSignedIn.get()) {
        Px.signIn();
      }
      Ux();
    });
  }
  function Sx(a) { }
  function Tx(a) {
    if (Hx === _g && Qx !== xs && (Hx = Qx.getAuthResponse().id_token, ij !== Hx)) {
      Gx = Dx;
      Ix = Qx.getBasicProfile().getId();
      Ph.ΔⵠΔⵠᐃᐃⵠ();
      return;
    }
    if (a !== undefined && a.isSignedIn() === true) {
      Ix = (Qx = a).id;
      Ix = Qx.getBasicProfile().getId();
      Hx = Qx.getAuthResponse().id_token;
      Gx = Dx;
      Ph.ΔⵠΔⵠᐃᐃⵠ();
    }
  }
  function Ux() {
    if (Px) {
      Qx = Px.currentUser.get();
    }
  }
  function Vx() {
    if (Ph.FB) {
      Ph.FB.init({
        cookie: true,
        xfbml: Zq,
        version: "v15.0",
        appId: "642017356260407"
      });
    }
    if (pa === Ix) {
      (function () {
        try {
          if (Ph.FB && Ph.FB.getUserID()) {
            Ix = Ph.FB.getUserID();
            if (Hx === undefined) {
              Ph.FB.getLoginStatus(function () {
                Gx = Ex;
                Hx = Ph.FB.getAuthResponse().accessToken;
                Ph.ΔⵠΔⵠᐃᐃⵠ(Ix);
              });
            }
          }
        } catch (a) { }
        try {
          Ix = Qx.getBasicProfile().getId();
        } catch (a) { }
      })();
    }
  }
  function Wx(a, b) {
    if (b > jx.ⲆᐃᐃⲆⵠ) {
      jx.ᐃⲆⵠⵠ(jx.ᐃΔⲆⲆΔ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Bx + "buyKit?token=" + Hx + "&userid=" + Ix + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          jx.ⲆᐃᐃⲆⵠ -= b;
          jx.ΔⲆΔⵠⲆ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function Xx(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Bx + "setRegion?token=" + Hx + "&userid=" + Ix + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          jx.ᐃⲆⵠⵠ(jx.ᐃᐃⵠΔΔ);
        } else {
          jx.ᐃⲆⵠⵠ(jx.ΔᐃⲆⵠᐃ);
        }
      }
    };
    b.send();
  }
  function Yx() {
    var a = new XMLHttpRequest();
    a.open("GET", Bx + "claimBread?userid=" + Ix);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          jx.ⲆᐃᐃⲆⵠ = b;
        }
      }
    };
    a.send();
  }
  function Zx() {
    if (jx.ⲆᐃᐃⲆⵠ >= 300 || jx.ΔⲆΔΔᐃⵠⵠ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Bx + "changeNickname?token=" + Hx + "&userid=" + Ix + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              jx.ⲆᐃᐃⲆⵠ -= a;
            }
            jx.ΔⲆΔΔᐃⵠⵠ = 1;
            jx.ᐃⲆⵠⵠ(jx.ΔᐃⲆΔⲆ);
          }
        };
        b.send();
      }
    }
  }
  function $x(b, c, d, f) {
    b = b === pa ? jx.ΔΔⵠΔΔⲆⲆ : b;
    c = c === undefined ? jx.ΔᐃⵠᐃⲆⲆᐃ : c;
    d = d === ie ? jx.ⲆⲆΔⲆΔⵠΔ : d;
    f = f === undefined ? jx.ⵠⲆⲆⵠⵠΔᐃ : f;
    if (b !== jx.ΔΔⵠΔΔⲆⲆ || jx.ΔᐃⵠᐃⲆⲆᐃ !== c || d !== jx.ⲆⲆΔⲆΔⵠΔ || jx.ⵠⲆⲆⵠⵠΔᐃ !== f) {
      jx.ΔΔⵠΔΔⲆⲆ = b;
      jx.ΔᐃⵠᐃⲆⲆᐃ = c;
      jx.ⲆⲆΔⲆΔⵠΔ = d;
      jx.ⵠⲆⲆⵠⵠΔᐃ = f;
      if (f === jx.ΔⵠᐃΔⵠΔⵠ) {
        f = "0";
      } else if (jx.ΔⵠΔᐃΔⲆΔ === f) {
        f = "1";
      } else if (jx.ⲆΔⲆⲆᐃⵠⵠ === f) {
        f = "2";
      } else if (f === jx.ᐃⵠᐃⲆⲆⵠⵠ) {
        f = "3";
      } else if (jx.ⲆⵠΔᐃΔΔᐃ === f) {
        f = "4";
      } else if (f === jx.ᐃⲆⵠΔⲆᐃΔ) {
        f = "5";
      }
      if (c === jx.ᐃⵠⲆⵠⵠⲆⵠ) {
        c = "total";
      } else if (c === jx.ᐃΔΔΔᐃᐃⵠ) {
        c = "normal";
      } else if (c === jx.ΔⲆᐃⵠⵠⲆᐃ) {
        c = "zombie";
      } else if (c === jx.ⲆΔⵠᐃΔᐃⲆ) {
        c = "vampire";
      } else if (c === jx.ᐃⲆᐃᐃⵠⲆΔ) {
        c = "forest";
      }
      if (b === jx.ⵠΔΔΔⵠᐃⲆ) {
        b = "all";
      }
      if (b === jx.ᐃⵠᐃᐃΔᐃⲆ) {
        b = "week";
      }
      if (b === jx.ⲆᐃⲆⲆᐃⲆⲆ) {
        b = "today";
      }
      if (d === jx.ᐃΔᐃᐃΔⲆΔ) {
        d = "kill";
      } else if (jx.ⲆⵠΔⲆⲆⲆⵠ === d) {
        d = "score";
      } else if (jx.ⲆⵠΔᐃᐃⵠΔ === d) {
        d = "time";
      }
      var g = new XMLHttpRequest();
      g.open("GET", Bx + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + f);
      g.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      g.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && g.responseText !== "0") {
          for (var a = JSON.parse(g.responseText), b = "", c = 0; c < a.length; c++) {
            ⲆⵠⵠⵠⲆ = a[c];
            var d = ⲆⵠⵠⵠⲆ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = Ph.decodeURIComponent(Ph.escape(Ph.atob(d)));
              }
            } catch (a) { }
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += jx.ΔⲆᐃᐃⵠᐃⵠ(ⲆⵠⵠⵠⲆ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ⲆⵠⵠⵠⲆ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ⲆⵠⵠⵠⲆ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ⲆⵠⵠⵠⲆ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      g.send();
    }
  }
  function _x(a) {
    if (Ix) {
      var b = new XMLHttpRequest();
      b.open("GET", Bx + "xsolla?userid=" + Ix + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          Nx.access_token = b.responseText;
          Ph.XPayStationWidget.init(Nx);
          Ph.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function ay(a, b) {
    if (jx.ⵠⵠⵠΔⵠ <= 0) {
      if (b > jx.ⲆᐃᐃⲆⵠ) {
        jx.ᐃⲆⵠⵠ(jx.ᐃΔⲆⲆΔ);
      } else {
        jx.ⵠⵠⵠΔⵠ = 2;
        jx.ᐃⵠⵠᐃΔⲆΔ = 0;
        jx.ᐃⲆΔⲆΔⵠᐃ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Bx + "buySpin?token=" + Hx + "&userid=" + Ix + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              jx.ⲆⲆⵠᐃⵠΔΔⵠᐃ(a.rand * Math.PI * 2, a.type, a.id);
              jx.ⲆᐃᐃⲆⵠ -= b;
            } else {
              jx.ⵠⵠⵠΔⵠ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
})();
