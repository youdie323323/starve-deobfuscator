(function () {
  var u = 7;
  if (u == 5) {
    u = 144;
  }
  var Lb = 219;
  if (Lb == 13) {
    Lb = 36;
  }
  var Cc = 153;
  if (Cc >= 8) {
    Cc = 89;
  }
  const rg = window;
  var n = 205;
  if (n > 10) {
    n = 223;
  }
  Math.floor(101[101 .ᐃΔΔⵠⵠⲆᐃ]);
  Math.floor(252[252 .ΔᐃⵠⵠΔⵠⵠΔⲆ]);
  let ch = 114;
  var Fh = 98;
  if (Fh > 1) {
    Fh = 56;
  }
  const ti = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += rg.String.fromCharCode(a[c] ^ ch++ % 255);
    }
    return b;
  };
  var s = 74;
  if (s >= 0) {
    s = 107;
  }
  var Yi = 253;
  if (Yi == 12) {
    Yi = 18;
  }
  var aj = 129;
  if (aj >= 12) {
    aj = 225;
  }
  Math.floor(32[32 .ᐃⵠⵠⲆⲆⲆᐃ]);
  const bj = 255;
  const b = 15;
  const d = 0;
  const v = -8;
  const m = 4;
  const c = 100;
  const p = -4;
  const C = 20;
  const T = 18;
  const f = 256;
  const z = 8;
  const y = false;
  const w = undefined;
  const P = true;
  const k = 11;
  const A = 1;
  const x = 16;
  const J = 1 << 1;
  const M = 1 << 2;
  const B = 12;
  const E = 14;
  const D = 19;
  const I = 100;
  const S = 6;
  const Q = 17;
  const _ = 100;
  const F = 9;
  const R = 13;
  const j = 5;
  const G = 7;
  const W = 255;
  const L = 1 << 11;
  const N = 7;
  const q = 4096;
  const O = 10;
  const H = 2;
  var U = rg.Math.acos;
  rg.Math.acos = rg.Math.asin;
  rg.Math.asin = U;
  var Y = rg.Math.cos;
  rg.Math.cos = rg.Math.sin;
  rg.Math.sin = Y;
  const K = 4;
  const V = 12;
  const Z = 6;
  const X = 3;
  const ee = 15;
  const ie = 8;
  const te = 6;
  const ne = 10;
  const oe = 12;
  let ae;
  const cj = 1;
  let se;
  let dj = w;
  let ej = w;
  const fj = 6;
  const ue = 16;
  const be = 19;
  let de = w;
  const gj = 13;
  let me;
  let hj = w;
  const ij = 15;
  const Ce = 256;
  const Te = 7;
  let fe = w;
  const jj = P;
  let ye = [];
  const we = 11;
  let Pe;
  let kj = "_";
  let lj = w;
  const mj = y;
  let Je = w;
  const nj = 7;
  let Be;
  let oj;
  let pj;
  const qj = 255;
  let Se;
  let rj = w;
  let sj = w;
  const tj = 20;
  let Re;
  const uj = 9;
  let Ge;
  let vj = w;
  let wj = w;
  let xj = w;
  let yj = w;
  const zj = 14;
  let He;
  let Aj = w;
  const Bj = w;
  let Ke = w;
  const Cj = 100;
  const Ze = 9;
  let Xe;
  function Dj(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function ei(a) {
    return rg.String.fromCharCode(a);
  }
  let ii = w;
  const Ej = 100;
  const oi = 12;
  let ai;
  let Fj = Bj;
  const Gj = 18;
  const hi = 1;
  const gi = 16;
  let li;
  const Hj = 7;
  let bi;
  let Ij;
  let Jj;
  const Kj = y;
  let ci = w;
  const Lj = 3;
  let Ci;
  const Mj = 2;
  const fi = 256;
  const zi = 17;
  let yi = Bj;
  let Nj = Bj;
  let Oj = Bj;
  const Pj = 8;
  const Ai = 6;
  let xi;
  let Qj;
  let Rj;
  let Sj;
  let Tj = Bj;
  const Uj = w;
  const Ii = 4;
  let Si;
  const Vj = 19;
  const _i = 4;
  const Fi = 14;
  let Ri;
  let Wj = Uj;
  const Xj = 5;
  const Wi = 15;
  let Li;
  const Yj = 12;
  const qi = 0;
  let Oi = w;
  function Zj(a) {
    const b = function () {
      for (let a = 0; a < 5; a++) {
        rg.addEventListener("click", function () {
          b();
        });
      }
    };
    b();
  }
  const Ui = 1;
  let Ki;
  const $j = 18;
  const Zi = 11;
  const Xi = 10;
  let $i = Bj;
  const _j = jj;
  const ak = 15;
  let bk = 0;
  if (!rg.WebAssembly || !rg.WebAssembly.instantiate) {
    ⵠᐃⲆⵠⲆⵠΔᐃⵠ();
  }
  const ck = 13;
  const dk = {
    Date: Date
  };
  rg.WebAssembly.instantiate(Uint8Array.from(rg.atob(""), function (a) {
    return a.charCodeAt(0);
  }), dk).then(async function (a) {
    ae = a.instance;
    ej = ae.exports;
    dj = ej.memory;
    se = dj.buffer;
    de = ej.__pin;
    hj = ej.__unpin;
    me = ej.__new;
    fe = ej.__collect;
    kj = "_";
    for (let b = 0; b < 31; b++) {
      ye[b] = ej[kj + b];
    }
    Pe = ej.__rtti_base;
    lj = new Float32Array(se);
    Je = new Float64Array(se);
    Be = new BigUint64Array(se);
    oj = new Uint32Array(se);
    pj = new Uint16Array(se);
    Se = new Uint8Array(se);
    rj = new BigInt64Array(se);
    sj = new Int32Array(se);
    Re = new Int16Array(se);
    vj = new Int8Array(se);
    ci = ye[24];
    Xe = ye[7];
    Oj = ye[8];
    Nj = ye[30];
    xj = ye[13];
    Oi = ye[6];
    Ri = ye[4];
    Si = ye[21];
    Fj = ye[22];
    ii = ye[16];
    Qj = ye[9];
    Ge = ye[0];
    yj = ye[10];
    Aj = ye[28];
    Ke = ye[17];
    Ki = ye[14];
    Jj = ye[15];
    Ij = ye[20];
    li = ye[23];
    xi = ye[11];
    Li = ye[5];
    Tj = ye[27];
    yi = ye[12];
    Sj = ye[2];
    Rj = ye[26];
    ai = ye[29];
    He = ye[25];
    Wj = ye[1];
    Ci = ye[3];
    bi = ye[19];
    wj = ye[18];
    bk = 1;
    if ($i) {
      await $i();
    }
  });
  const ek = 5;
  const fk = function (a) {
    return oj[(Pe + 4 >>> 2) + (a << 1)];
  };
  function gk(a) {
    return 31 - Math.clz32(a >>> 6 & 31);
  }
  const hk = 20;
  const ik = 0;
  const jk = 16;
  function kk(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return lj;
        case 3:
          return Je;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return vj;
          } else {
            return Se;
          }
        case 1:
          if (b) {
            return Re;
          } else {
            return pj;
          }
        case 2:
          if (b) {
            return sj;
          } else {
            return oj;
          }
        case 3:
          if (b) {
            return rj;
          } else {
            return Be;
          }
      }
    }
  }
  const lk = 255;
  const mk = 100;
  const nk = 8;
  function ok(b) {
    const c = oj[b + v >>> 2];
    const d = fk(c);
    const e = gk(d);
    let f = d & M ? b : oj[b + 4 >>> 2];
    const g = d & J ? oj[b + 12 >>> 2] : oj[f + p >>> 2] >>> e;
    return kk(e, d & L, d & q).subarray(f >>>= e, f + g);
  }
  const pk = Kj;
  const qk = 1;
  const rk = "development";
  const sk = "production";
  function tk(b, c, d, e) {
    const f = ~(b & 9109) & (b | 9109);
    const i = (1 + (c + 17815) * 22695477) % 4294967296;
    const a = ((40891 + d) * 22695477 + 1) % 4294967296;
    const j = e ^ 16384;
    const k = Ww(f, i, a, j);
    const h = function (b, c, d, e, f) {
      const i = (0 << (b >> 8 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 24 & 255)) + (24 << (b & 255));
      const a = ~(c & 1405) & c | ~(c & 1405) & 1405;
      const j = ~(d & 13989) & (d | 13989);
      const k = ~(e & 55660) & 55660 | ~(e & 55660) & e;
      const h = ((f + 48935) * 1103515245 + 12345) % 2147483648;
      const g = Jk(i, a);
      Jp(j, k, h, i, a);
      return g ^ 61111;
    }(f, i, a, j, f);
    return (0 << ((k ^ h) >> 24 & 255)) + (24 << ((k ^ h) >> 16 & 255)) + (8 << ((k ^ h) & 255)) + (16 << ((k ^ h) >> 8 & 255));
  }
  function uk(b, c, d, e, f) {
    const i = ((44768 + b) * 214013 + 2531011) % 4294967296;
    const a = c ^ 53031;
    const j = ~(d & 14352) & 14352 | ~(d & 14352) & d;
    const k = (1013904223 + (e + 59836) * 1664525) % 4294967296;
    const h = ~(f & 25565) & (f | 25565);
    const g = Jp(i, a, j, k, h);
    ht(i, a, j, k, h);
    return g ^ 15757;
  }
  function vk(b, c, d, e, f) {
    const g = ~(b & 63453) & b | ~(b & 63453) & 63453;
    const a = (24 << (c >> 24 & 255)) + (16 << (c & 255)) + (0 << (c >> 16 & 255)) + (8 << (c >> 8 & 255));
    const i = ~(d & 8752) & (d | 8752);
    const j = f ^ 64292;
    return (19565 + (Ww(g, a, i, ~(e & 56767) & e | ~(e & 56767) & 56767) ^ tk(j, g, a, i))) % 65370;
  }
  const wk = 3;
  function xk(a) {
    this.ᐃⲆⵠΔ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ᐃⲆⵠΔ - 1));
  }
  const yk = 9;
  xk.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ᐃⲆⵠΔ;
    return this.state / this.ᐃⲆⵠΔ;
  };
  const zk = 14;
  const Ak = 19;
  const Bk = 12;
  xk.prototype.ⵠⲆΔⲆᐃⵠⲆ = function (a) {
    this.state = a;
  };
  ᐃᐃΔᐃΔΔᐃ = 10000;
  ᐃΔⲆⵠⲆᐃⲆ = [];
  var Ck = new xk();
  Ck.ⵠⲆΔⲆᐃⵠⲆ(new Date().getTime());
  const Dk = 10;
  const Ek = 7;
  for (var Fk = 0; Fk < ᐃᐃΔᐃΔΔᐃ; Fk++) {
    ᐃΔⲆⵠⲆᐃⲆ.push(Ck.random());
  }
  const Gk = 4;
  function Hk(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, e, f, i, j, k) {
      const a = c ^ 10715;
      const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
      const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
      const h = i ^ 40782;
      const g = j ^ 41301;
      const l = ~(k & 12091) & (k | 12091);
      const o = Xk(a, m, n, h, g, l);
      Xk(a, m, n, h, g, l);
      tn(a, m, n, h, g);
      const b = (o | 3006) & ~(o & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, a, j, f, i);
    const h = jn(a, j, f, i, a);
    Xk(j, f, i, a, j, f);
    const g = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (g | 38630) & ~(g & 38630);
  }
  function Ik(c, e, f, i, j, k) {
    const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const g = (j + 3575) % 65503;
    const l = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = zn(a, m, n, h, g);
    const b = function (c, d, e, f, i, j) {
      const a = c ^ 30142;
      const k = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const g = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
      const l = (j | 45652) & ~(j & 45652);
      const n = zn(a, k, m, h, g);
      Lk(l, a, k, m, h);
      hn(g, l, a, k, m, h);
      return n ^ 60048;
    }(l, a, m, n, h, g);
    en(l, a, m, n, h, g);
    const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(d & 42138) & d | ~(d & 42138) & 42138;
  }
  function Jk(a, b) {
    const c = (0 << (a >> 16 & 255)) + (16 << (a >> 24 & 255)) + (8 << (a >> 0 & 255)) + (24 << (a >> 8 & 255));
    const d = (61590 + b) % 65433;
    return (2147483587 + (62119 + (Ep(c, d) ^ function (b, c, d, e, f, g) {
      const a = ~(b & 57079) & (b | 57079);
      const i = g ^ 47762;
      const j = Bb(a, c ^ 5929, d ^ 19327, e ^ 39383, f ^ 23987);
      Ep(i, a);
      return (j | 61866) & ~(j & 61866);
    }(c, d, c, d, c, d))) * 2147483629) % 2147483647;
  }
  const Kk = mj;
  function Lk(b, c, d, e, f) {
    const i = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
    const a = c ^ 63080;
    const j = ((d + 60304) * 22695477 + 1) % 4294967296;
    const k = ~(e & 5467) & 5467 | ~(e & 5467) & e;
    const h = (f | 40165) & ~(f & 40165);
    const g = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const a = d ^ 62842;
      const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = Ok(f, i, a, j);
      const h = dn(f, i, a, j);
      Hk(f, i, a, j);
      const g = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
      return ~(g & 63304) & (g | 63304);
    }(i, a, j, k);
    const l = jn(h, i, a, j, k);
    return ((28765 + ((16 << ((g ^ l) >> 24 & 255)) + (8 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 32 & 255)) + (32 << ((g ^ l) >> 8 & 255)) ^ Nn(h, i, a, j, k, h))) * 1664525 + 1013904223) % 4294967296;
  }
  function Mk(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const a = d ^ 58614;
    const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const g = Qn(j, a);
    const l = Hk(k, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (b, c) {
        const d = ~(b & 41406) & b | ~(b & 41406) & 41406;
        const e = ((c + 17922) * 1103515245 + 12345) % 2147483648;
        const f = qn(d, e, d);
        Zk(e, d, e, d);
        const g = Pk(e, d, e, d, e);
        return ((42346 + (f ^ 18573 ^ g)) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = Bn(a, j, f, i, a);
      Qn(j, f);
      const g = (58498 + (k ^ h)) % 65531;
    })(a, k, m, h);
    const n = (24 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 32 & 255)) + (16 << ((g ^ l) >> 8 & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  const Nk = 17;
  function Ok(b, c, d, e) {
    const f = b ^ 11762;
    const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
  }
  function Pk(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const a = (c + 39144) % 65406;
    const j = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const g = Ok(i, a, j, k);
    Bn(h, i, a, j, k);
    en(h, i, a, j, k, h);
    return (g | 19326) & ~(g & 19326) ^ 36297;
  }
  function Qk(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const g = wn(i, a);
    Bn(j, k, h, i, a);
    hn(j, k, h, i, a, j);
    const l = ~(g & 49323) & 49323 | ~(g & 49323) & g;
    return ~(l & 46567) & (l | 46567);
  }
  const Rk = 13;
  const Sk = 14;
  function Tk(b, c, e, f, i, j) {
    const a = (1013904223 + (b + 28824) * 1664525) % 4294967296;
    const k = (1013904223 + (13210 + c) * 1664525) % 4294967296;
    const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
    const g = (1 + (39199 + i) * 22695477) % 4294967296;
    const l = j ^ 33037;
    const n = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const i = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const a = an(e, f, i, e, f);
      const j = Nn(i, e, f, i, e, f);
      const k = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = hn(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const a = (2531011 + (c + 41768) * 214013) % 4294967296;
          const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const g = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const a = Lk(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const g = ~(j & 24998) & (j | 24998);
                const l = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = Vk(a, m, n, h);
                const b = Bn(g, l, a, m, n);
                const d = Vk(h, g, l, a);
              })(g, e, f, g, e, f);
              dn(g, e, f, g);
              return ~(a & 43875) & (a | 43875) ^ 15116;
            }(c, d, c);
            tn(d, c, d, c, d);
            Ok(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, a);
          Zk(j, k, h, i);
          const l = Qk(a, j, k, h, i);
        })(c, d, c, d, c);
        wn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(i, e);
      const h = (16 << ((a ^ j) >> 32 & 255)) + (24 << ((a ^ j) >> 24 & 255)) + (32 << ((a ^ j) >> 8 & 255)) + (8 << ((a ^ j) >> 16 & 255));
      return (8 << ((h ^ k) >> 32 & 255)) + (16 << ((h ^ k) >> 8 & 255)) + (32 << ((h ^ k) >> 16 & 255)) + (24 << ((h ^ k) >> 24 & 255));
    }(a, k, m);
    dn(h, g, l, a);
    return ((34159 + (n ^ 2959 ^ Vk(k, m, h, g))) * 1103515245 + 12345) % 2147483648;
  }
  const Uk = w;
  function Vk(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = ~(d & 32053) & (d | 32053);
    const i = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const j = e ^ 18768;
      const k = zn(f, i, a, j, f);
      const h = Mk(i, a, j, f, i);
      const g = nn(a, j);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ g)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, a, i);
    dn(f, g, a, i);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ zn(f, g, a, i, f))) * 214013) % 4294967296;
  }
  const Wk = 6;
  function Xk(b, c, d, e, f, i) {
    const a = ~(b & 36133) & (b | 36133);
    const j = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const g = f ^ 7550;
    const l = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (Pn(a, j, k, h, g) ^ dn(l, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ tn(h, g, l, a, j))) * 1103515245) % 2147483648;
  }
  const Yk = 11;
  function Zk(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const a = d ^ 38714;
    const i = e ^ 58084;
    const j = Ik(f, g, a, i, f, g);
    dn(a, i, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ en(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
  }
  const $k = 16;
  const _k = 20;
  const Dm = 2;
  function en(b, c, d, e, f, i) {
    const a = b ^ 23409;
    const j = c ^ 26380;
    const k = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = i ^ 42490;
    return ((19056 + (Ok(a, j, d ^ 53590, e ^ 36633) ^ Ok(k, h, a, j))) * 22695477 + 1) % 4294967296;
  }
  function nn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = en(d, e, d, e, d, e);
    const g = en(d, e, d, e, d, e);
    Ok(d, e, d, e);
    const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(a & 55949) & 55949 | ~(a & 55949) & a;
  }
  function an(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const j = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const g = en(i, a, j, k, h, i);
    const l = Ok(a, j, k, h);
    qn(i, a, j);
    return (24 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 32 & 255)) ^ 31710;
  }
  const on = _j;
  const rn = 255;
  function hn(c, e, f, i, j, k) {
    const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const m = (e | 41551) & ~(e & 41551);
    const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
    const h = ~(i & 32641) & (i | 32641);
    const g = ((j + 35582) * 214013 + 2531011) % 4294967296;
    const l = ~(k & 1090) & (k | 1090);
    const o = Nn(a, m, n, h, g, l);
    Pk(a, m, n, h, g);
    Ok(l, a, m, n);
    const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
    return ~(b & 3708) & (b | 3708);
  }
  const gn = 12;
  const ln = 18;
  const sn = 17;
  const bn = 15;
  function dn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const i = c ^ 57623;
    const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const j = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const k = wn(f, i);
    wn(a, j);
    jn(f, i, a, j, f);
    const h = ~(k & 43902) & 43902 | ~(k & 43902) & k;
    return (h | 8862) & ~(h & 8862);
  }
  function tn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const j = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const g = en(i, a, j, k, h, i);
    const l = hn(a, j, k, h, i, a);
    Ok(j, k, h, i);
    return (8 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 32 & 255)) ^ 35444;
  }
  const mn = 7;
  const cn = 18;
  const pn = 1;
  const un = w;
  const vn = 20;
  const fn = 14;
  function zn(b, c, d, e, f) {
    const i = b ^ 62008;
    const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const j = ((d + 46531) * 22695477 + 1) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const g = Lk(i, a, j, k, h);
    Nn(i, a, j, k, h, i);
    return ((3037 + (g ^ 57467 ^ jn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  const yn = 100;
  function wn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (Pn(c, d, c, d, c) ^ Bn(d, c, d, c, d))) % 65357 ^ Ok(c, d, c, d))) * 22695477) % 4294967296;
  }
  function Bn(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const a = c ^ 50118;
    const j = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const g = Nn(i, a, j, k, h, i);
    Nn(a, j, k, h, i, a);
    return (2531011 + (53616 + ((g | 43477) & ~(g & 43477) ^ Ok(j, k, h, i))) * 214013) % 4294967296;
  }
  const kn = 14;
  const An = 4;
  function xn(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Cn(a) {
    return rg.String.fromCharCode(a);
  }
  const Jn = 255;
  function En(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Dn(a) {
    return rg.String.fromCharCode(a);
  }
  const In = 19;
  const Mn = 6;
  function Pn(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const a = d ^ 55978;
    const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const g = Bn(j, a, k, m, h);
    const l = tn(j, a, k, m, h);
    Ok(j, a, k, m);
    const n = (16 << ((g ^ l) >> 32 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (8 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  const Fn = P;
  function Qn(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = Qk(d, e, d, e, d);
    const g = Pn(e, d, e, d, e);
    an(d, e, d, e, d);
    const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(a & 40927) & 40927 | ~(a & 40927) & a;
  }
  function jn(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const a = (d + 52922) % 65337;
    const k = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const g = Pk(j, a, k, m, h);
    const l = Qn(j, a);
    Pk(k, m, h, j, a);
    const n = (1 + (19675 + (g ^ l)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  const Gn = 100;
  const Rn = 0;
  const Ln = 8;
  function Nn(b, c, d, e, f, i) {
    const a = d ^ 8102;
    const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (1 + (62237 + i) * 22695477) % 4294967296;
    const g = nn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const l = nn(a, j);
    nn(k, h);
    return (45290 + (g ^ l)) % 65334 ^ 55575;
  }
  function qn(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const a = Qk(e, f, g, e, f);
    const h = Qk(g, e, f, g, e);
    Qk(f, g, e, f, g);
    return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
  }
  const On = 5;
  function Hn(a, b) {
    const c = (0 << (a >> 24 & 255)) + (24 << (a & 255)) + (8 << (a >> 8 & 255)) + (16 << (a >> 16 & 255));
    const d = b ^ 45410;
    const e = function (b, c, d, e) {
      const f = (8 << (b >> 24 & 255)) + (16 << (b & 255)) + (24 << (b >> 8 & 255)) + (0 << (b >> 16 & 255));
      const g = ~(d & 29463) & d | ~(d & 29463) & 29463;
      const a = (8 << (e >> 24 & 255)) + (24 << (e & 255)) + (0 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
      const h = function (a, b) {
        const c = (a | 30641) & ~(a & 30641);
        const d = ~(b & 64795) & (b | 64795);
        const e = Un(c, d, c, d, c, d);
        (function (b, c, d, e) {
          const f = ((41752 + b) * 1664525 + 1013904223) % 4294967296;
          const g = (1 + (23606 + c) * 22695477) % 4294967296;
          const a = d ^ 13955;
          const h = fx(f, g, a, (1013904223 + (e + 37361) * 1664525) % 4294967296, f);
          (function (a, b) {
            const c = a ^ 20067;
            const d = (64368 + b) % 65460;
            const e = function (a, b) {
              const c = ~(a & 29910) & 29910 | ~(a & 29910) & a;
              const d = (1 + (b + 16784) * 22695477) % 4294967296;
              const e = Jk(c, d);
              Zw(c, d, c);
              return ~(e & 10893) & 10893 | ~(e & 10893) & e;
            }(c, d);
            fx(c, d, c, d, c);
          })(g, a);
        })(c, d, c, d);
        return ~(e & 23864) & e | ~(e & 23864) & 23864;
      }(f, (c | 44366) & ~(c & 44366));
      Zw(g, a, f);
      return ~(h & 30752) & h | ~(h & 30752) & 30752;
    }(c, d, c, d);
    _p(c, d, c, d, c, d);
    return ~(e & 51532) & e | ~(e & 51532) & 51532;
  }
  ⵠᐃⵠ = {
    ⵠⵠΔᐃⲆⵠⲆ: () => new Promise((a, b) => {
      rg.grecaptcha.ready(function () {
        rg.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (Sf) {
            a(0);
          } else {
            console.log(Bj);
            b(c);
          }
        });
      });
    }),
    ⲆΔᐃⲆⵠⵠⲆᐃΔ: function (a) {
      rg.open(a, "_blank").focus();
    },
    ᐃΔᐃⲆⵠⲆΔ: function (a) {
      rg.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ⲆᐃⲆⲆⵠᐃᐃ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return false;
        }
      }
      return true;
    },
    ΔⵠⲆᐃⵠᐃΔⵠᐃ: function (a, b) {
      if (a.length != b.length) {
        return Kk;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ⲆᐃⲆⲆⵠᐃᐃ(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return Kk;
        }
      }
      return _j;
    },
    ⲆⲆⵠⲆΔᐃᐃ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ΔΔⵠⵠᐃΔᐃ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⲆᐃⲆⵠᐃᐃⲆⲆⵠ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ᐃΔⵠᐃⵠΔΔ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ΔⵠΔᐃⲆΔⲆ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ᐃΔⲆⲆⲆᐃᐃ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ⵠᐃᐃᐃⲆᐃᐃ: function (b, c, d, e) {
      var f = e - c;
      var g = d - b;
      return Math.atan2(f, g);
    },
    ⵠΔⲆⵠΔⲆⲆ: function (a, b) {
      return Math.asin(this.ᐃΔⵠᐃⵠΔΔ(a, b) / (this.ΔⵠΔᐃⲆΔⲆ(a) * this.ΔⵠΔᐃⲆΔⲆ(b))) * this.sign(this.ᐃΔⲆⲆⲆᐃᐃ(a, b));
    },
    ΔΔⲆᐃⵠⵠⲆ: function (a) {
      ⵠⵠⲆᐃⵠᐃⲆ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⵠⵠⲆᐃⵠᐃⲆ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ⵠⵠᐃᐃⲆΔᐃ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ⵠΔⲆᐃⵠⲆᐃ: function (a, b) {
      return this.ⵠΔⲆⵠΔⲆⲆ({
        x: 1,
        y: 0
      }, this.ΔΔⵠⵠᐃΔᐃ(a, b));
    },
    Ⲇᐃⵠᐃ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ⵠⵠⲆᐃⲆΔⲆ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ⲆⵠΔⵠⲆⲆⵠ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ⵠⲆⵠⲆᐃᐃⲆ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ᐃΔΔᐃⵠᐃΔⵠᐃ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ᐃⵠΔΔᐃⲆΔΔⲆ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ᐃⵠⵠⵠᐃ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ᐃⵠⵠΔⲆᐃⲆ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ΔⲆᐃᐃΔⵠⵠ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ᐃᐃⵠᐃⵠⲆΔ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ΔⵠΔⲆᐃⵠΔⲆⵠ: function (b, c, d) {
      var e = this.ᐃᐃⵠᐃⵠⲆΔ();
      var f = this.ᐃᐃⵠᐃⵠⲆΔ();
      var g = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(g) * e * d),
        y: Math.floor(c + Math.cos(g) * f * d)
      };
    },
    ⵠΔᐃⵠΔⲆⲆⲆⲆ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ΔⲆⲆ = d;
    },
    ᐃⲆⲆᐃΔⵠⵠᐃⵠ: function (a) {
      ⲆᐃΔΔ = [];
      ⲆᐃΔΔ.push.apply(ⲆᐃΔΔ, a);
      var b = [];
      while (ⲆᐃΔΔ.length > 0) {
        var c = Math.floor(Math.random() * ⲆᐃΔΔ.length);
        b.push(ⲆᐃΔΔ[c]);
        ⲆᐃΔΔ.splice(c, 1);
      }
      return b;
    },
    ⲆΔᐃᐃⵠΔΔ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ᐃΔΔΔⲆⲆΔ: function (b) {
      if (typeof b != "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(0, 3 - c);
        var e = Math.floor(b / 1000).toString();
        if (d) {
          for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
            g++;
          }
          if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
            e = e.substring(0, e.length - 1);
          }
        }
        return e += "k";
      }
      return b.toString();
    },
    ᐃᐃᐃᐃᐃⵠᐃ: function (a) {
      return a * (2 - a);
    },
    ⵠⲆⵠΔⲆᐃΔ: function (a) {
      return --a * a * a + 1;
    },
    ΔΔᐃⲆΔ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (4 - a * 2) * a - 1;
      }
    },
    ᐃⵠⵠⲆᐃⵠᐃ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ⵠΔⵠⲆⵠⵠⵠⲆΔ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    ⲆⲆᐃᐃΔⲆᐃ: function (a) {
      return 1 - --a * a * a * a;
    },
    ⵠΔⲆⵠΔΔⲆ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ⲆΔⵠᐃ: function (b, c, d, e, f, g) {
      this.ᐃᐃᐃ = b;
      this.ᐃⵠⲆ = c;
      this.max = d;
      this.min = e;
      this.ⵠⲆΔᐃᐃᐃⵠ = f;
      this.ΔⵠᐃΔⵠΔⲆ = g;
      this.ⲆⲆΔΔⵠ = 0;
      this.ⵠⲆⲆ = function () {
        if (this.ᐃᐃᐃ) {
          if ((a = this.ᐃⵠⲆ + vx * this.ⵠⲆΔᐃᐃᐃⵠ) > this.max) {
            this.ᐃⵠⲆ = this.max;
            this.ᐃᐃᐃ = false;
            return true;
          }
          this.ᐃⵠⲆ = a;
        } else {
          var a;
          if ((a = this.ᐃⵠⲆ - vx * this.ΔⵠᐃΔⵠΔⲆ) < this.min) {
            this.ᐃⵠⲆ = this.min;
            this.ᐃᐃᐃ = true;
          } else {
            this.ᐃⵠⲆ = a;
          }
        }
      };
      return false;
    },
    ΔΔᐃⵠⲆ: function (b, c, d, e, f, g) {
      this.ⵠⵠⲆⵠⵠ = b;
      this.ⵠᐃΔⵠΔ = c;
      this.ⵠⲆΔⵠⲆ = d;
      this.ⲆᐃⵠΔᐃ = e;
      this.x = f;
      this.ⲆⲆᐃᐃᐃ = g;
      this.ᐃΔΔⲆΔⵠⵠ = function () {
        this.x = this.ΔⲆⲆᐃΔⵠⲆⵠⲆ;
        this.ⵠᐃΔⵠΔ = 0;
      };
      this.ᐃⵠⵠⵠⵠ = function (a) {
        if (a !== this.ⲆⲆᐃᐃᐃ) {
          this.ⲆⲆᐃᐃᐃ = a;
          this.ⲆᐃⵠΔᐃ = this.x;
          this.ⵠᐃΔⵠΔ = 0;
        }
        if (this.ⲆⲆᐃᐃᐃ !== this.x) {
          this.ⵠᐃΔⵠΔ += vx;
          if (this.ⵠᐃΔⵠΔ > this.ⵠⲆΔⵠⲆ) {
            this.x = this.ⲆⲆᐃᐃᐃ;
          } else {
            var b = this.ⵠⵠⲆⵠⵠ(this.ⵠᐃΔⵠΔ / this.ⵠⲆΔⵠⲆ);
            this.x = this.ⲆᐃⵠΔᐃ + (this.ⲆⲆᐃᐃᐃ - this.ⲆᐃⵠΔᐃ) * b;
          }
        }
      };
    },
    ᐃⲆⵠΔΔⵠⵠ: function (b, c, d, e, f, g, a, i, j) {
      this.ⵠⵠⲆⵠⵠ = b;
      this.ⵠᐃΔⵠΔ = c;
      this.ⵠⲆΔⵠⲆ = d;
      this.ⲆᐃⵠΔᐃ = e;
      this.ᐃᐃⵠⵠⵠ = f;
      this.x = g;
      this.y = a;
      this.ⲆⲆᐃᐃᐃ = i;
      this.ⵠΔⲆΔΔΔⵠ = j;
      this.ᐃⵠⵠⵠⵠ = function (a) {
        if (a.x != this.ⲆⲆᐃᐃᐃ || a.y != this.ⵠΔⲆΔΔΔⵠ) {
          this.ⲆⲆᐃᐃᐃ = a.x;
          this.ⵠΔⲆΔΔΔⵠ = a.y;
          this.ⲆᐃⵠΔᐃ = this.x;
          this.ᐃᐃⵠⵠⵠ = this.y;
          this.ⵠᐃΔⵠΔ = 0;
        }
        if (this.ⲆⲆᐃᐃᐃ != this.x || this.ⵠΔⲆΔΔΔⵠ != this.y) {
          this.ⵠᐃΔⵠΔ += vx;
          if (this.ⵠᐃΔⵠΔ > this.ⵠⲆΔⵠⲆ) {
            this.x = this.ⲆⲆᐃᐃᐃ;
            this.y = this.ⵠΔⲆΔΔΔⵠ;
          } else {
            var b = this.ⵠⵠⲆⵠⵠ(this.ⵠᐃΔⵠΔ / this.ⵠⲆΔⵠⲆ);
            this.x = this.ⲆᐃⵠΔᐃ + (this.ⲆⲆᐃᐃᐃ - this.ⲆᐃⵠΔᐃ) * b;
            this.y = this.ᐃᐃⵠⵠⵠ + (this.ⵠΔⲆΔΔΔⵠ - this.ᐃᐃⵠⵠⵠ) * b;
          }
        }
      };
    },
    ᐃⵠᐃΔⲆⲆⲆ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ⵠΔⲆⵠᐃⵠᐃ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ⲆΔΔⵠΔ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ⵠⵠⲆⲆΔⲆⵠ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ΔⲆⲆ;
    },
    ⲆᐃⵠΔⵠⵠΔ: function (b, c, d, e, f, g, a, h) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
        return 1;
      } else {
        return 0;
      }
    },
    ⵠⵠⲆⲆⵠ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ΔᐃⲆᐃⲆᐃΔ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  const Sn = 5;
  const Tn = 10;
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ᐃᐃⵠᐃⵠᐃᐃΔⵠ;
  };
  const Kn = 15;
  function Un(b, c, d, e, f, g) {
    const a = ~(d & 3554) & 3554 | ~(d & 3554) & d;
    const h = (16 << (e >> 8 & 255)) + (0 << (e >> 24 & 255)) + (8 << (e & 255)) + (24 << (e >> 16 & 255));
    return (2531011 + (61375 + (Ep(~(b & 18879) & b | ~(b & 18879) & 18879, (2147483587 + (c + 39448) * 2147483629) % 2147483647) ^ function (a, b) {
      const c = (a + 37613) % 65426;
      const d = (0 << (b >> 24 & 255)) + (8 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 0 & 255));
      const e = vk(c, d, c, d, c);
      Jk(d, c);
      return (e | 29218) & ~(e & 29218);
    }(a, h))) * 214013) % 4294967296;
  }
  (function (a) {
    var b = false;
    if (typeof ᐃⲆΔΔⲆⵠΔ == "function" && ᐃⲆΔΔⲆⵠΔ.ΔᐃⵠⵠΔᐃᐃᐃⲆ) {
      ᐃⲆΔΔⲆⵠΔ(a);
      b = true;
    }
    if (typeof ᐃᐃΔΔᐃⵠⲆ === "object") {
      ⵠⲆᐃᐃᐃⵠᐃᐃΔ.exports = a();
      b = true;
    }
    if (!b) {
      var c = rg.ᐃΔⲆⵠ;
      var d = rg.ᐃΔⲆⵠ = a();
      d.ⲆⲆΔᐃΔⲆΔᐃⲆ = function () {
        rg.ᐃΔⲆⵠ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; a < arguments.length; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document != "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ⵠᐃⵠⲆⲆᐃᐃ, j)).expires == "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) { }
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ᐃᐃᐃΔᐃⲆᐃᐃⵠ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, g = 0; n.length > g; g++) {
            var p = n[g].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = "On-Hit Damage: 3".replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) { }
              }
              if (e === s) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) { }
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ⵠⲆΔⲆᐃΔⵠⵠⲆ = function () {
        return d.apply({
          json: P
        }, [].slice.call(arguments));
      };
      d.ⵠᐃⵠⲆⲆᐃᐃ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ΔΔⵠⲆΔᐃᐃᐃⵠ = a;
      return d;
    }(function () { });
  });
  var Vn = document.getElementById("game_canvas");
  const Wn = 9;
  var Xn = Vn.getContext("2d");
  var Yn = Vn.width;
  const Zn = 13;
  const $n = 3;
  var _n = Vn.height;
  const eo = y;
  var ao = Vn.width / 2;
  var no = Vn.height / 2;
  const to = 19;
  const ho = 1;
  const go = 100;
  const lo = 12;
  var uo = {
    x: ao,
    y: no
  };
  var aq = 1;
  var bq = 1;
  var cq = -1;
  const dq = 255;
  var po = "J" + Ca;
  var eq = "S" + Ga;
  var fq = rg;
  const fo = un;
  var zo;
  const gq = 17;
  const wo = 11;
  const Po = 2;
  const ko = 18;
  const Ao = 16;
  var xo = (kq = "O") + "N";
  const hq = 2;
  const Mo = 255;
  var Bo;
  const iq = 20;
  var Do = 0;
  var Io = fq;
  const So = 8;
  const Qo = 11;
  const _o = 7;
  var Fo;
  const jq = Fn;
  const jo = 1;
  eq = "N";
  var Go = "J";
  var kq = "O" + Ca;
  var lq = Io;
  const No = y;
  const qo = 13;
  var Oo;
  const mq = 6;
  const Uo = 15;
  var Yo = lq;
  xo = "N" + undefined;
  const Ko = 4;
  var Vo = Yo;
  const Zo = 17;
  var Xo;
  const nq = 1;
  const ea = 256;
  const ia = 6;
  const ta = 12;
  const na = 20;
  var oa;
  const oq = 14;
  var ra;
  var pq = Vo;
  const ha = 8;
  const la = 9;
  const ua = 10;
  const ba = 100;
  const da = 16;
  const va = 5;
  const ma = on;
  const ca = 15;
  const pa = 11;
  var Ca;
  const qq = 19;
  var fa = pq;
  const za = 19;
  var ya;
  const rq = 12;
  var Pa = fa;
  Go = "O";
  const sq = 2;
  const Aa = 255;
  const xa = pk;
  const Ja = 4;
  const Ma = 12;
  const Ba = 3;
  const Ea = 20;
  const Da = 16;
  const Ia = 0;
  var Sa;
  var tq = Pa = fa;
  const _a = 5;
  var Fa;
  var uq = tq;
  const ja = xa;
  var Ga = "J" + (Sa = "S");
  const Wa = Uj;
  Vn.oncontextmenu = function () {
    return false;
  };
  const La = 8;
  const Na = 18;
  po = "J";
  const qa = _j;
  function Oa(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⲆⲆⲆⵠᐃⵠΔ = 1;
    return b;
  }
  const vq = 16;
  Go += po = eq;
  zo = Bo = Ga + Go;
  const Ua = 19;
  kq = xo;
  const Ya = 18;
  const Ka = String.fromCharCode;
  const Va = Ka(101);
  const Za = Ka(118);
  const Xa = Ka(97);
  const $a = Ka(108);
  const wq = 5;
  xo = Ca;
  const xq = 17;
  Ca = Ga;
  const yq = 13;
  const zq = 7;
  const Aq = 100;
  const Bq = 13;
  const Cq = 0;
  const Dq = 256;
  kq = Ga;
  Oo = Xo = Ga + Go;
  eq = Go + po;
  oa = zo;
  kq = Ga + Go;
  ra = Bo;
  const Eq = 100;
  const Fq = 3;
  xo = Ga + Go;
  ya = Fo = zo;
  const Gq = 11;
  Go = Ca = Ga;
  Sa = Bo;
  Fa = zo;
  po = kq;
  const Hq = 16;
  var Iq = rg.devicePixelRatio || 1;
  const Jq = 4;
  var Kq = Xn.ⲆⵠⲆⲆⵠⵠΔⲆⲆ || Xn.ᐃⵠΔΔᐃᐃⲆⲆⵠ || Xn.ⵠⲆⵠⵠᐃᐃΔᐃⵠ || Xn.ⵠᐃᐃΔⵠΔⵠⵠΔ || Xn.ΔᐃⲆΔΔΔⲆⲆⲆ || 1;
  const Lq = Uk;
  function Mq() {
    if (Vn.width != rg.innerWidth) {
      Vn.width = rg.innerWidth;
      Yn = Vn.width;
      ao = Vn.width / 2;
    }
    if (Vn.height != rg.innerHeight) {
      Vn.height = rg.innerHeight;
      _n = Vn.height;
      no = Vn.height / 2;
    }
    uo = {
      x: ao,
      y: no
    };
    var a = Vn.width;
    var b = Vn.height;
    bq = cq === -1 ? Iq / Kq : cq;
    Vn.width = a * bq;
    Vn.height = b * bq;
    Vn.style.width = a + "px";
    Vn.style.height = b + "px";
    Xn.scale(bq, bq);
    if (nx) {
      nx.ᐃΔΔ.ⲆⲆⵠᐃⵠⲆⵠ = a;
      nx.ᐃΔΔ.ⲆΔⲆⵠᐃᐃᐃ = b;
    }
    if (wx.ⵠⲆᐃᐃᐃ) {
      wx.ⵠⲆⲆ();
    } else if (lx.ⵠⲆᐃᐃᐃ) {
      lx.ⵠⲆⲆ();
    } else if (qx.ⵠⲆᐃᐃᐃ) {
      qx.ⵠⲆⲆ();
    } else if (ox.ⵠⲆᐃᐃᐃ) {
      ox.ⵠⲆⲆ();
    }
  }
  const Nq = 255;
  const Oq = 12;
  const Pq = 20;
  var Qq = document.getElementById("game_body");
  const Rq = 255;
  const Sq = 9;
  const Tq = 20;
  const Uq = Kj;
  Qq.ondragstart = function () {
    return Kj;
  };
  const Vq = 17;
  Qq.ondrop = function () {
    return mj;
  };
  Qq.onresize = Mq;
  (function () {
    var b = 0;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; c < a.length && !rg.requestAnimationFrame; ++c) {
      rg.requestAnimationFrame = rg[a[c] + "RequestAnimationFrame"];
      rg.cancelAnimationFrame = rg[a[c] + "CancelAnimationFrame"] || rg[a[c] + "CancelRequestAnimationFrame"];
    }
    rg.requestAnimationFrame ||= function (c, d) {
      var e = new Date().getTime();
      var f = Math.max(0, 16 - (e - b));
      var a = rg.setTimeout(function () {
        c(e + f);
      }, f);
      b = e + f;
      return a;
    };
    rg.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const Xq = 1;
  const Yq = 6;
  const Zq = 2;
  var $q = navigator.language || navigator.userLanguage;
  const _q = 15260829;
  const ar = 15260829 .ΔⲆⵠΔᐃᐃΔᐃΔ;
  const br = `const ᐃⵠⵠⵠⵠΔᐃᐃⵠ = (typeof ⲆΔⲆⲆⵠⲆⵠ === "${ar}") ? 1 : 0; return ᐃⵠⵠⵠⵠΔᐃᐃⵠ;`;
  const cr = 14;
  var dr = -new Date().getTimezoneOffset() / 60;
  var er = "Europe";
  const fr = 15;
  const gr = 10;
  const hr = 17;
  var ir = "South America";
  const jr = 11;
  const kr = 2;
  var lr = er;
  const mr = 19;
  if (dr >= -2 && dr <= 2) {
    lr = er;
  } else if (dr > 2 && dr <= 5) {
    lr = "Russia";
  } else if (dr > 5 && dr <= 9) {
    lr = "Asia";
  } else if (dr > 9) {
    lr = "Australia";
  } else if (dr >= -5 && dr < -2) {
    lr = $q === "pt-BR" || $q === "pt-br" || $q === "pt" || $q === "pt-pt" ? ir : "North America";
  } else if (dr < -5) {
    lr = $q === "pt-BR" || $q === "pt-br" || $q === "pt" || $q === "pt-pt" ? ir : "West America";
  }
  const nr = Uj;
  const or = 11;
  const pr = _j;
  const qr = 255;
  var xk = {
    ⲆᐃᐃΔΔⵠⲆ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor(Math.random() * (b - 1));
      this.ⲆΔⲆⲆⵠ = function (a) {
        c = a || Math.floor((b - 1) * Math.random());
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const rr = Kj;
  const sr = Uk;
  function tr(a, b, c, d) {
    return (12345 + (56409 + ((a + 44312) % 65377 ^ ~(b & 33026) & (b | 33026))) * 1103515245) % 2147483648 ^ 21354 ^ 13366;
  }
  var ur = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  function vr(c, d, e, f, i, j) {
    const a = ~(c & 8877) & 8877 | ~(c & 8877) & c;
    const k = (1 + (d + 23745) * 22695477) % 4294967296;
    const m = (8 << (e >> 24 & 255)) + (24 << (e & 255)) + (0 << (e >> 16 & 255)) + (16 << (e >> 8 & 255));
    const h = f ^ 7211;
    const g = (16 << (j & 255)) + (8 << (j >> 24 & 255)) + (24 << (j >> 16 & 255)) + (0 << (j >> 8 & 255));
    const l = Mb(a, k, m, h, i ^ 49958);
    const n = Mb(g, a, k, m, h);
    return (16 << ((l ^ n) & 255)) + (24 << ((l ^ n) >> 8 & 255)) + (8 << ((l ^ n) >> 16 & 255)) + (0 << ((l ^ n) >> 24 & 255));
  }
  const wr = 18;
  const xr = ma;
  const yr = 12;
  var zr = 0;
  function Ar(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Br(a) {
    return rg.String.fromCharCode(a);
  }
  let Cr = {
    ΔΔΔᐃⵠ: ["#133A2B", "#042b30"],
    ΔⲆᐃΔΔⲆⲆᐃΔ: ["#EBF2F0", "#136167"],
    ΔⲆⲆⲆⵠⲆⲆ: ["#4EB687", "#187484"],
    ⵠΔᐃⲆΔᐃⲆ: ["#664516", "#13474C"],
    ᐃⲆⲆΔⲆⲆᐃ: ["#FCEFBB", "#0F4D48"],
    ⵠⲆⲆⵠⵠⵠΔ: ["#C1AA7E", "#0F423D"],
    ⵠΔᐃΔⵠΔⲆ: ["#594837", "#163A3A"],
    ᐃⲆᐃⵠΔᐃΔ: ["#A5D6D6", "#539CA0"],
    ⲆⵠⲆᐃᐃ: ["#0B6A84", "#09373F"],
    ⲆᐃΔⵠΔΔⲆ: ["#2A8B9B", "#0F464C"],
    ᐃᐃΔⵠΔⵠⵠ: ["#A9D6D3", "#115E60"],
    ⵠᐃΔᐃΔᐃⲆ: ["#ECF7F9", "#539CA0"],
    ᐃⵠⵠⵠⲆΔᐃ: ["#FFF", "#FFF"],
    ⵠⵠΔᐃⵠⲆΔ: ["#FFF", "#FFF"],
    ᐃⵠⵠᐃⵠᐃΔ: ["#1C9BA4", "#00272F"],
    ⲆⲆⵠΔⲆ: ["#2D2017", "#031C1E"],
    ᐃᐃⵠ: 0,
    ⵠΔⵠ: 1,
    ⵠⵠᐃⲆⵠᐃⲆⲆΔ: 2300,
    ΔⲆᐃΔᐃⲆⵠᐃⲆ: 2290,
    ΔᐃΔᐃᐃⵠᐃ: 34,
    ΔΔⲆⵠΔΔⲆ: 5,
    ᐃⵠΔⵠᐃⵠⵠ: 68,
    ΔⵠⵠᐃⲆⲆⲆ: 34,
    ⵠⵠⵠⲆᐃΔⲆ: 5,
    ᐃᐃⲆΔⲆⵠΔ: 1,
    ᐃᐃΔᐃΔᐃⵠ: 0.6,
    ⲆⲆΔⵠⲆⲆᐃ: 0.25,
    ΔᐃⵠΔᐃⲆⲆ: 50,
    ΔΔᐃΔᐃⲆᐃ: 10,
    ⲆⵠΔΔΔᐃᐃ: 75,
    ⵠᐃᐃΔᐃΔᐃ: 20,
    ᐃⵠⵠΔᐃΔᐃ: 5,
    ΔⵠᐃⵠΔ: 0,
    ΔΔᐃᐃⵠ: 1,
    ᐃΔⵠΔⵠ: 2,
    ⵠⵠᐃⲆⲆ: 3,
    ᐃⵠⵠⲆᐃ: 4,
    ᐃΔⲆⵠᐃ: 5,
    ᐃⲆΔⲆⲆ: 6,
    ⲆⲆⲆⵠᐃ: 7,
    ⵠⵠⲆᐃⵠ: 8,
    ⵠᐃⲆⲆⵠ: 9,
    ⲆⵠΔⲆΔ: 10,
    ⵠᐃΔⵠⲆ: 11,
    ⲆᐃᐃⵠⲆ: 12,
    ⵠⵠⲆⵠΔ: 13,
    ΔⲆⵠⲆⲆ: 14,
    Δᐃⵠᐃᐃ: 15,
    ᐃⵠᐃⵠᐃ: 16,
    ⵠⲆⲆᐃᐃ: 17,
    ⲆᐃⲆᐃᐃ: 18,
    ⲆΔᐃᐃⲆ: 19,
    ΔⵠⵠⲆᐃ: 20,
    ᐃΔΔΔᐃ: 21,
    ⲆΔⵠΔᐃ: 22,
    ΔⲆⵠⲆⵠ: 23,
    ⵠⲆᐃⵠᐃ: 24,
    ᐃⲆⲆⵠⲆ: 25,
    ΔⲆᐃⵠⵠ: 26,
    ΔⵠΔⲆΔ: 27,
    ΔⵠⲆⲆⲆ: 28,
    ⲆΔⵠΔ: 29,
    ᐃⲆΔⵠⵠ: 30,
    ⵠⵠᐃⲆⵠ: 31,
    ΔᐃⵠᐃⲆ: 32,
    ᐃⲆⲆⵠᐃ: 33,
    ⵠᐃᐃᐃᐃ: 34,
    ⵠⵠⲆᐃᐃ: 35,
    ⵠᐃⵠΔⲆ: 36,
    ΔⲆⵠⲆᐃ: 37,
    ⵠΔⵠⲆΔ: 38,
    Ⲇᐃᐃⵠᐃ: 39,
    ⵠΔⵠⲆᐃ: 40,
    ᐃΔΔⲆᐃ: 41,
    ΔⲆΔⵠⲆ: 42,
    ⵠⲆⲆᐃΔ: 43,
    ⵠΔᐃΔⵠ: 44,
    ⲆⵠΔⵠΔ: 45,
    ⲆⲆⲆᐃᐃ: 46,
    ⵠΔⲆᐃⲆ: 47,
    ᐃⵠᐃΔⵠ: 48,
    ⲆΔᐃᐃⵠ: 49,
    ᐃΔⵠᐃΔ: 50,
    ⲆΔΔᐃⲆ: 51,
    ⵠΔᐃⵠⵠ: 52,
    ⵠΔⵠⲆⲆ: 53,
    ΔᐃⵠⲆⵠ: 54,
    ⵠⲆΔⲆᐃ: 55,
    ⵠᐃᐃⵠⲆ: 56,
    ⵠⲆⲆⵠᐃ: 57,
    ᐃᐃⵠⲆΔ: 58,
    ⲆΔΔᐃΔ: 59,
    ⲆⵠⵠᐃΔ: 60,
    ⵠᐃⵠⵠᐃ: 61,
    ΔⲆᐃⵠᐃ: 62,
    ᐃΔᐃⲆΔ: 63,
    ᐃⲆᐃΔᐃ: 64,
    ⲆΔⲆΔΔ: 65,
    ⵠⲆΔᐃΔ: 66,
    ⵠⵠᐃᐃⵠ: 67,
    ⲆⵠᐃⲆⲆ: 68,
    ⵠΔᐃᐃΔ: 69,
    ᐃⲆⲆΔᐃ: 70,
    ΔⲆⵠΔΔ: 71,
    ΔΔⲆⵠⵠ: 72,
    ⲆᐃⵠΔΔ: 73,
    ᐃΔⲆⲆⲆ: 74,
    ⲆⵠΔΔΔ: 75,
    ΔⵠⲆΔⵠ: 76,
    ᐃᐃᐃⲆⵠ: 77,
    ⵠⵠΔΔᐃ: 78,
    ᐃⵠᐃᐃⲆ: 79,
    ⲆΔⲆᐃⲆ: 80,
    ΔⵠⵠΔᐃ: 81,
    ΔΔⵠⲆⵠ: 82,
    ᐃⲆᐃᐃΔ: 83,
    Δⵠᐃⵠᐃ: 84,
    ΔΔᐃΔᐃ: 85,
    ⵠΔⵠΔΔ: 86,
    ⵠΔⵠᐃⵠ: 87,
    ᐃⵠⲆⲆᐃ: 88,
    ⵠΔⲆⵠⲆ: 89,
    ᐃΔᐃᐃᐃ: 90,
    ᐃⲆⲆΔⲆ: 91,
    ᐃⲆᐃⲆΔ: 92,
    ⵠⵠⵠⵠΔ: 93,
    ⵠΔΔⲆⵠ: 94,
    ⵠⲆⵠⲆΔ: 95,
    ΔⲆᐃΔⵠ: 96,
    ᐃΔΔⲆⲆ: 97,
    ⵠᐃΔΔⲆ: 98,
    ᐃᐃᐃᐃᐃ: 99,
    ΔⵠΔᐃⲆᐃⲆⵠⲆ: 100,
    ⲆⲆΔⲆᐃ: 101,
    ΔⵠⲆⵠⲆ: 102,
    ᐃᐃⵠⲆⵠ: 103,
    ᐃΔΔᐃΔ: 104,
    ᐃⵠⲆⲆⵠ: 105,
    ᐃⲆΔΔᐃ: 106,
    ΔⲆⵠΔⲆ: 107,
    ⲆⵠΔΔⲆ: 108,
    ⵠⵠⲆᐃ: 109,
    ᐃⲆⵠⵠΔ: 110,
    ⲆΔⲆⲆ: 111,
    ⵠᐃᐃⵠ: 112,
    ⲆΔⵠᐃⲆⵠⲆ: 113,
    ᐃⵠⵠᐃⲆ: 114,
    ΔᐃΔⵠⵠⵠΔ: 115,
    ⵠⲆΔᐃᐃ: 116,
    ᐃⵠΔᐃⲆ: 117,
    ΔᐃΔΔⵠᐃΔ: 118,
    ⲆΔⲆⲆΔⵠᐃ: 119,
    ⲆⵠⲆᐃⵠ: 120,
    ⵠⲆⲆⵠ: 121,
    ᐃᐃⵠᐃⵠ: 122,
    ⵠⲆⵠᐃᐃ: 123,
    ᐃΔⵠΔΔΔⲆ: 124,
    ⵠⵠᐃΔΔ: 125,
    ΔᐃΔⲆⲆ: 126,
    ΔⲆΔⲆⲆ: 127,
    ⲆⵠⵠΔΔ: 128,
    ᐃⲆΔΔΔ: 129,
    ⵠᐃⲆⲆᐃ: 130,
    ᐃᐃᐃΔᐃ: 131,
    ΔⲆᐃⵠΔ: 132,
    ΔⲆⲆⵠⲆ: 133,
    ΔᐃⲆⲆⵠ: 134,
    ΔΔⲆᐃⵠ: 135,
    ΔⵠΔⵠᐃ: 136,
    ΔᐃⲆΔⲆ: 137,
    ᐃᐃⲆⵠⵠ: 138,
    ΔᐃΔⲆΔ: 139,
    ΔΔΔᐃΔⲆⵠ: 140,
    ⲆᐃΔᐃᐃ: 141,
    ⲆᐃΔⲆΔᐃⵠ: 142,
    ᐃΔⵠᐃⲆᐃⲆ: 143,
    ⵠᐃⵠᐃΔᐃⵠ: 144,
    ΔⲆⲆⵠⲆᐃⵠ: 145,
    ᐃⲆᐃⲆᐃ: 146,
    ⲆⵠΔⲆⲆ: 147,
    ⲆⵠⵠⲆᐃ: 148,
    ⵠⵠΔᐃΔ: 149,
    ΔᐃᐃⲆⲆ: 150,
    ΔⵠⵠΔΔ: 151,
    ᐃᐃΔⲆᐃ: 152,
    ⵠᐃΔⵠⵠ: 153,
    ⲆⲆΔⲆΔ: 154,
    ᐃⵠᐃᐃᐃ: 155,
    ⵠᐃⵠᐃⵠ: 156,
    ⵠⲆⵠΔⲆ: 157,
    ⲆⲆΔⵠᐃ: 158,
    ⵠⵠΔⲆⲆ: 159,
    ⵠⲆΔΔᐃ: 160,
    ᐃⵠⵠⵠΔ: 161,
    ΔᐃΔΔΔ: 162,
    ⵠⵠⵠⲆⲆ: 163,
    ΔΔⵠᐃΔ: 164,
    ᐃΔⲆᐃⲆ: 165,
    ᐃᐃΔΔᐃΔⵠ: 166,
    ΔⲆᐃΔᐃ: 167,
    Ⲇⵠᐃⵠᐃ: 168,
    ⵠⲆⵠⵠⵠ: 169,
    ΔᐃⵠΔⲆ: 170,
    ⲆⵠᐃⲆΔⲆⲆ: 171,
    ⵠⵠⲆⵠⲆᐃⲆ: 172,
    ⲆΔⲆⲆⲆᐃΔ: 173,
    ⲆⲆᐃᐃⵠ: 174,
    ⵠᐃⵠⲆᐃΔⲆ: 175,
    ΔΔⲆΔⵠΔⲆ: 176,
    ⲆⵠⲆᐃΔⲆΔ: 177,
    ΔⲆⵠΔⲆⲆⵠ: 178,
    ᐃⵠⵠⲆΔⵠᐃ: 179,
    ⲆⲆⵠΔᐃⵠⵠ: 180,
    ⵠᐃⲆΔⵠⲆΔ: 181,
    ΔᐃᐃⲆᐃⵠᐃ: 182,
    ⵠⲆᐃΔᐃ: 183,
    ⲆⲆΔⲆⲆ: 184,
    ⲆΔΔᐃⵠ: 185,
    ᐃⲆⲆⲆⵠ: 186,
    ΔᐃΔΔᐃ: 187,
    ᐃᐃᐃᐃⵠᐃⲆ: 188,
    ⲆᐃΔᐃΔ: 189,
    ⵠᐃΔᐃⵠ: 190,
    ΔᐃᐃⲆᐃΔᐃ: 191,
    ⵠΔⲆΔᐃ: 192,
    Δⵠᐃⵠᐃᐃᐃ: 193,
    ⲆⵠΔΔᐃ: 194,
    ⵠⵠⵠΔⵠ: 195,
    ⵠⵠⲆᐃⵠΔᐃ: 196,
    ΔⵠⲆᐃⵠⵠᐃ: 197,
    ⵠⲆΔΔⲆ: 198,
    ΔΔΔⲆᐃ: 199,
    ΔΔᐃΔΔᐃⵠ: 200,
    ΔᐃΔΔⵠ: 201,
    Δⵠᐃᐃ: 202,
    ⵠᐃΔΔᐃ: 203,
    ⲆΔΔᐃⵠΔᐃ: 204,
    ᐃⵠⵠᐃⵠ: 205,
    ⵠᐃΔⵠⵠⲆᐃ: 206,
    ⵠⵠΔⵠᐃ: 207,
    ⵠΔⲆⵠⵠⵠⲆ: 208,
    ⵠⵠⲆⲆᐃ: 209,
    ⲆΔᐃᐃᐃΔᐃ: 210,
    ⲆΔᐃⲆⵠⲆⲆ: 211,
    Δᐃᐃⵠⵠ: 212,
    Δⵠⵠⵠⵠ: 213,
    ᐃᐃⵠᐃΔ: 214,
    ᐃᐃΔΔΔ: 215,
    ⲆⲆΔΔᐃ: 216,
    ᐃΔⵠᐃⲆ: 217,
    ᐃⲆᐃⵠⲆ: 218,
    ᐃΔⲆⲆⵠ: 219,
    ⲆⵠΔⵠⵠ: 220,
    ⵠⵠΔⲆᐃ: 221,
    ⲆⲆΔⵠⲆ: 222,
    ⵠⵠΔⵠⲆ: 223,
    Δᐃⵠⵠⵠ: 224,
    ᐃᐃⲆⲆⵠᐃΔ: 225,
    ᐃᐃⵠⵠⵠᐃΔ: 226,
    ⵠΔᐃⵠᐃ: 227,
    ΔᐃΔⲆΔᐃⲆ: 228,
    ΔΔⲆⲆⲆ: 229,
    ⲆᐃΔΔᐃ: 230,
    ΔΔΔΔᐃ: 231,
    ᐃΔᐃᐃⵠ: 232,
    ΔⲆΔΔⵠ: 233,
    ᐃⲆΔΔⵠⲆⵠ: 234,
    ΔⲆⲆᐃⲆ: 235,
    ⵠⵠⵠⲆⵠ: 236,
    ᐃⲆΔᐃᐃ: 237,
    Δⵠᐃᐃⵠ: 238,
    ΔⵠᐃΔΔ: 239,
    ⵠⵠⲆⲆⲆ: 240,
    ⵠᐃᐃΔΔ: 241,
    ⲆΔⲆΔᐃ: 242,
    ᐃᐃᐃⵠⲆΔΔ: 243,
    ᐃⲆᐃΔⲆ: 244,
    ᐃᐃᐃⵠⲆ: 245,
    ΔⲆᐃⲆᐃⲆᐃ: 246,
    ⵠΔᐃⲆⲆ: 247,
    ᐃᐃΔⵠⲆ: 248,
    ⵠⵠⲆᐃⵠⲆⵠ: 249,
    ⲆⵠⲆᐃⲆ: 250,
    ΔⵠⲆⵠΔ: 251,
    ΔΔⲆΔᐃΔᐃ: 252,
    ᐃᐃᐃⲆΔⵠᐃ: 253,
    ⵠⲆⵠⵠΔΔⵠ: 254,
    ΔⲆΔⲆΔ: 255,
    ⵠΔᐃⲆⲆⵠᐃ: 256,
    ΔⵠΔΔᐃᐃⲆ: 257,
    ᐃᐃⲆⲆᐃᐃⲆ: 258,
    ⵠᐃΔᐃΔᐃᐃ: 259,
    Ⲇᐃⵠᐃⵠ: 260,
    ⵠΔᐃⵠᐃΔⵠ: 261,
    ΔᐃⲆⵠΔᐃⵠ: 262,
    ⵠᐃΔΔΔⵠⵠ: 263,
    ᐃⵠⲆⲆΔ: 264,
    ᐃᐃⲆⵠΔᐃⲆ: 265,
    ⲆⲆⲆⲆⲆΔⲆ: 266,
    ⵠⵠᐃⵠⵠΔⲆ: 267,
    ΔⵠᐃΔΔΔΔ: 268,
    ⲆⵠΔΔΔⲆⲆ: 269,
    ⵠᐃⵠⲆᐃⲆⵠ: 270,
    ⵠᐃΔᐃⲆᐃᐃ: 271,
    ᐃⲆΔⲆⲆᐃⵠ: 272,
    ΔΔⵠⲆⵠΔΔ: 273,
    ⲆⵠΔᐃⲆᐃᐃ: 274,
    ᐃⲆⲆΔᐃΔⵠ: 275,
    ⵠΔⵠᐃⲆΔⲆ: 276,
    ᐃΔⵠᐃⲆⵠⵠ: 277,
    ΔᐃᐃΔⲆΔⲆ: 278,
    ΔΔⲆΔ: 279,
    ⵠΔᐃⲆⵠ: 280,
    ⲆⵠΔⲆⵠΔⲆ: 281,
    ⵠⵠᐃⵠᐃⵠⲆ: 282,
    ᐃⲆ: 283,
    ⲆⵠⲆᐃⵠᐃⲆ: 284,
    ᐃⵠΔⵠⵠ: 285,
    ⵠΔᐃⲆᐃ: 286,
    ΔΔⵠΔⵠΔⲆ: 287,
    ⲆᐃⵠⵠⲆ: 288,
    ⵠⲆᐃᐃΔⵠᐃ: 289,
    ⵠΔⵠⲆᐃⵠΔ: 290,
    ΔⵠⲆⵠⵠΔⵠ: 291,
    ⵠⵠᐃᐃΔⲆⵠ: 292,
    ⲆΔΔΔⲆⲆⵠ: 293,
    ⵠⵠⵠᐃⲆ: 294,
    ⵠⵠⲆⵠᐃⵠᐃ: 295,
    ⵠΔⵠⵠᐃⵠⵠ: 296,
    ⲆⲆΔⲆⲆⲆⲆ: 297,
    ᐃⵠΔᐃⲆⲆⲆ: 298,
    ⲆᐃⲆⵠᐃ: 299,
    ᐃⲆΔΔᐃᐃΔ: 300,
    ⵠⵠⵠΔⲆⲆᐃ: 301,
    ⲆⵠⵠⵠⲆⵠⵠ: 302,
    ⵠᐃⵠⲆᐃⲆⲆ: 303,
    ᐃⵠⲆᐃⲆᐃᐃ: 304,
    ⲆⵠΔᐃᐃⵠΔ: 305,
    ᐃⲆᐃᐃⲆᐃⲆ: 306,
    ΔᐃⲆᐃⵠ: 307,
    ⲆⵠⲆΔⲆⵠᐃ: 308,
    ᐃΔⲆᐃΔΔⵠ: 309,
    ᐃⵠⵠⲆΔΔᐃ: 310,
    ⵠⲆΔⵠⵠⲆΔ: 311,
    ᐃᐃΔΔⵠⵠΔ: 312,
    ᐃⲆΔⲆΔΔᐃ: 313,
    ⵠⲆᐃΔΔⵠᐃ: 314,
    ⵠΔⲆΔⵠⵠᐃ: 315,
    ⵠⲆⲆⵠⵠⲆᐃ: 316,
    ⵠⲆᐃⵠᐃΔⵠ: 317,
    ⵠΔⲆⵠⵠⲆⵠ: 318,
    ᐃᐃⵠⲆᐃΔᐃ: 319,
    ⲆⲆⲆⵠΔᐃΔ: 320,
    ⵠᐃΔᐃᐃ: 321,
    ⲆⵠⲆᐃⵠⲆᐃ: 322,
    ⲆᐃᐃᐃⵠΔΔ: 323,
    ⲆᐃᐃⵠΔᐃᐃ: 324,
    ⵠᐃΔⵠΔⲆΔ: 325,
    ᐃΔᐃⵠⵠᐃⵠ: 326,
    ΔⵠⲆΔᐃᐃΔ: 327,
    ⵠⲆⲆΔⲆΔᐃ: 328,
    ⲆΔΔⲆⲆΔⵠ: 329,
    ᐃⲆᐃΔⲆΔⲆ: 330,
    ⲆⲆⲆⵠⲆΔᐃ: 331,
    ⲆᐃΔᐃᐃΔⲆ: 332,
    ᐃΔⲆⵠⵠᐃΔ: 333,
    ᐃᐃⵠⲆⵠⲆⵠ: 334,
    ⲆⲆᐃᐃⲆΔⵠ: 335,
    ⵠⲆⵠΔⲆⲆᐃ: 336,
    ⵠⵠᐃΔᐃⲆΔ: 337,
    ⵠⲆⲆΔᐃⵠⵠ: 338,
    ⵠⲆⲆΔΔⵠᐃ: 339,
    ⵠΔⵠⲆΔᐃⲆ: 340,
    ⵠⵠⵠᐃΔΔᐃ: 341,
    ᐃⲆᐃⲆⲆΔⲆ: 342,
    ⵠⵠᐃᐃⵠᐃⵠ: 343,
    ⵠᐃΔΔΔᐃΔ: 344,
    ΔⵠⲆⲆⲆⵠΔ: 345,
    ⵠᐃⵠΔⵠΔᐃ: 346,
    ΔᐃⵠⵠᐃⲆΔⲆⵠ: 347,
    ⵠᐃⵠᐃⲆⵠⲆ: 348,
    ⲆⵠⲆΔⲆᐃᐃ: 349,
    ᐃⵠΔⵠᐃⵠΔ: 350,
    ⵠⵠΔᐃⵠΔⵠ: 351,
    ⵠΔⵠΔΔⵠⵠ: 352,
    ΔⵠᐃΔᐃⲆⲆ: 353,
    ᐃᐃⵠᐃⵠΔⲆ: 354,
    ᐃΔᐃⲆⲆⲆⲆ: 355,
    ΔⵠΔⵠⲆⲆⲆ: 356,
    ⵠⵠΔⲆᐃⵠⲆ: 357,
    ⵠⵠⲆⲆⲆⲆⵠ: 358,
    ᐃⲆⲆⵠⵠⲆⵠ: 359,
    ΔΔΔᐃⵠⲆⲆ: 360,
    ⲆⲆⲆᐃᐃⵠⲆ: 361,
    ⵠⲆᐃᐃⵠⲆⵠ: 362,
    ⵠΔⵠⲆᐃⵠᐃ: 363,
    ᐃᐃⵠⵠⵠᐃᐃ: 364,
    ΔΔⲆᐃⲆⲆⲆ: 365,
    ⲆΔΔᐃⲆⵠᐃ: 366,
    ΔΔⲆⵠᐃΔᐃ: 367,
    ⵠⲆⵠΔᐃᐃⵠ: 368,
    ᐃᐃΔⵠⲆⲆᐃ: 369,
    ⲆΔᐃΔⲆᐃⵠ: 370,
    ΔⵠΔⵠⵠⲆΔ: 371,
    ᐃⲆⵠᐃΔΔⲆ: 372,
    ⵠΔᐃⲆΔΔⵠ: 373,
    ΔⲆⵠᐃΔᐃᐃ: 374,
    ΔᐃⲆᐃᐃⲆΔ: 375,
    ΔᐃⲆⲆⲆᐃⵠ: 376,
    ΔⵠⲆⵠΔⲆᐃ: 377,
    ᐃΔⲆⲆⵠⵠΔ: 378,
    ⵠⵠⵠⲆᐃⲆⲆ: 379,
    ΔⲆⵠΔⵠⲆⲆ: 380,
    ᐃⵠᐃᐃᐃⵠᐃ: 381,
    ⲆⵠΔⲆⲆᐃᐃ: 382,
    ⲆⵠᐃⲆΔΔⲆ: 383,
    ⲆⵠΔⵠⵠᐃⵠ: 384,
    ΔᐃᐃⵠΔⵠⵠ: 385,
    ⵠⲆⵠⵠΔⵠᐃ: 386,
    ⵠΔⵠΔⲆⲆᐃ: 387,
    ⵠᐃⵠᐃⲆⵠᐃ: 388,
    ⲆⵠᐃⵠΔᐃᐃ: 389,
    ⲆΔᐃⵠΔⲆⵠ: 390,
    ΔⲆᐃᐃⲆⵠⲆ: 391,
    ⲆⲆᐃᐃᐃΔΔ: 392,
    ᐃΔᐃΔΔⵠΔ: 393,
    ᐃⲆᐃΔᐃⵠΔ: 394,
    ⵠⲆᐃᐃᐃΔⵠ: 395,
    ᐃᐃⵠΔⵠⵠΔ: 396,
    ⵠⵠⲆⲆⲆΔⵠ: 397,
    ᐃΔⲆΔΔΔⵠ: 398,
    ΔⲆⲆᐃΔΔΔ: 399,
    ᐃⲆⲆᐃΔⲆᐃ: 400,
    ΔᐃⵠΔⵠⲆⲆ: 401,
    ΔⲆⵠⵠⲆⲆΔ: 402,
    ᐃⵠᐃΔⵠΔᐃ: 403,
    ΔⵠⲆᐃⲆⵠⲆ: 404,
    ⵠᐃⲆΔᐃᐃⵠ: 405,
    ⲆⵠⲆⲆΔΔΔ: 406,
    ΔᐃⵠⵠᐃⲆΔ: 407,
    ⵠΔᐃⵠΔᐃⵠ: 408,
    ⵠⲆⵠⲆⲆⲆΔ: 409,
    ᐃΔⵠᐃⲆⲆᐃ: 410,
    ΔᐃᐃΔⵠᐃⲆ: 411,
    ⲆⵠΔⲆⲆᐃΔ: 412,
    ΔⲆⵠᐃᐃ: 413,
    ⵠᐃⲆᐃⲆⲆⵠΔΔ: 414,
    ΔⲆⲆⲆᐃ: 415,
    ⲆᐃⵠⲆΔ: 416,
    ᐃⵠⲆᐃΔΔⵠⲆΔ: 417,
    ΔᐃΔⲆⲆΔᐃ: 418,
    ΔⵠΔΔΔ: 419,
    ⲆᐃⲆⲆᐃⵠⵠ: 420,
    ΔᐃᐃΔⵠΔⲆ: 421,
    ⵠⵠⲆΔΔⵠⵠ: 422,
    ⲆⵠΔⵠⵠΔⵠ: 423,
    ᐃᐃᐃΔⲆⵠΔ: 424,
    ⵠΔⵠΔⲆⲆⵠ: 425,
    ΔⵠⵠΔⵠⵠⵠ: 426,
    ᐃⲆⵠΔΔΔΔ: 427,
    ᐃΔⵠⲆΔⵠⲆ: 428,
    ᐃᐃΔᐃᐃΔᐃ: 429,
    ΔⵠΔⲆΔⲆⵠ: 430,
    ⵠⵠⵠᐃΔⵠΔ: 431,
    ⲆⵠᐃⲆᐃⲆΔ: 432,
    ΔⲆᐃⵠᐃⲆΔ: 433,
    ᐃⵠⲆⲆΔᐃⵠ: 434,
    ᐃΔΔⲆᐃᐃⵠ: 435,
    ⵠⵠᐃⵠΔⲆⵠ: 436,
    ΔΔΔⲆᐃⵠⵠ: 437,
    ⲆΔⲆΔⵠⲆᐃ: 438,
    ΔⵠᐃΔᐃᐃⵠ: 439,
    ⲆᐃᐃΔΔⵠᐃ: 440,
    ᐃⵠⵠⵠΔⵠΔ: 441,
    ⲆᐃⵠᐃΔⲆⲆ: 442,
    ᐃⲆⵠⲆΔⲆⲆ: 443,
    ᐃΔΔᐃᐃᐃⵠⵠᐃ: 444,
    ᐃᐃⵠΔⵠ: 445,
    ΔᐃᐃⲆⲆᐃⵠ: 446,
    ⵠⵠΔΔᐃΔᐃ: 447,
    ⲆⲆⵠᐃⲆΔᐃⲆᐃ: 448,
    ᐃⵠⲆⵠᐃ: 449,
    ΔΔⵠΔⵠ: 450,
    ⵠⲆⲆⲆᐃⲆΔ: 451,
    ⵠⵠΔΔΔⲆⵠ: 452,
    ⲆⲆⲆΔⵠᐃⵠ: 453,
    ᐃⵠΔⲆⲆΔΔ: 454,
    ⵠᐃΔᐃⲆⲆΔ: 455,
    ⲆΔⲆⵠⵠᐃΔ: 456,
    ᐃᐃⵠᐃⲆⵠⵠ: 457,
    ⵠⲆⲆⵠᐃⲆᐃ: 458,
    ⲆᐃⵠⲆⵠᐃᐃ: 459,
    ⲆΔⲆᐃΔᐃᐃ: 460,
    ΔΔΔᐃΔⵠᐃ: 461,
    ⵠᐃⲆᐃⲆⲆⵠ: 462,
    ΔⵠΔⵠⵠⵠᐃ: 463,
    ⲆᐃΔᐃᐃⵠᐃ: 464,
    ΔⲆΔᐃΔΔΔ: 465,
    ᐃⲆⵠᐃΔⵠⵠ: 466,
    ΔⵠⲆⵠⲆⵠΔ: 467,
    ⲆⲆⲆᐃΔΔⲆ: 468,
    ΔΔΔⲆΔᐃⲆ: 469,
    ⵠΔᐃΔΔᐃᐃ: 470,
    Ⲇⵠⵠⵠⵠᐃᐃ: 471,
    ⲆⲆⵠⵠⲆΔⲆ: 472,
    ᐃⵠᐃⲆⵠᐃΔ: 473,
    ⵠΔⵠΔⵠⵠⲆ: 474,
    ΔᐃⲆᐃΔᐃⵠ: 475,
    ᐃᐃⲆᐃⵠⲆⲆ: 476,
    ⵠⲆᐃΔⲆⲆΔ: 477,
    ⲆΔΔⵠⵠⲆΔ: 478,
    ᐃΔⵠΔⵠⵠᐃ: 479,
    ⵠΔⵠᐃᐃⵠⵠ: 480,
    Ⲇᐃⵠⵠᐃᐃⵠ: 481,
    ᐃⵠᐃⵠⲆΔΔ: 482,
    ⵠΔⵠΔⲆⵠᐃ: 483,
    ⵠᐃⲆΔⵠⵠΔ: 484,
    ⵠⵠΔⲆᐃᐃΔ: 485,
    ΔΔⲆᐃⵠᐃⲆ: 486,
    ΔⲆⲆⵠⲆⲆⵠ: 487,
    ⲆⲆᐃᐃΔΔᐃ: 488,
    ⵠΔⵠΔᐃⲆⵠ: 489,
    ΔⲆⲆΔᐃⲆΔ: 490,
    ⲆⵠΔᐃⵠⲆⲆ: 491,
    ΔⵠΔᐃⵠⵠΔ: 492,
    ᐃᐃⲆᐃΔⲆⵠ: 493,
    ᐃΔΔᐃᐃⲆⵠ: 494,
    ΔⵠᐃᐃΔⲆᐃ: 495,
    ᐃΔⵠΔᐃⵠΔ: 496,
    ⵠᐃⲆⲆⵠⲆᐃ: 497,
    ᐃⲆΔΔⵠΔΔ: 498,
    ⵠⲆΔᐃⲆⲆΔ: 499,
    ⲆᐃΔΔⵠᐃⵠ: 500,
    ᐃΔΔΔΔᐃΔ: 501,
    ⵠᐃᐃᐃΔⵠΔ: 502,
    ᐃⲆⵠΔᐃⵠⲆ: 503,
    ΔⲆⲆᐃⵠΔⲆ: 504,
    ΔΔⵠⵠⲆᐃΔ: 505,
    ⲆⲆⵠᐃⵠᐃΔ: 506,
    ΔⲆΔᐃΔΔΔ: 507,
    ⵠⵠⵠⵠΔⵠᐃ: 508,
    ᐃᐃΔᐃⲆΔⲆ: 509,
    ⲆΔΔᐃⲆᐃΔ: 510,
    ΔΔⵠΔᐃᐃⲆ: 511,
    ΔⵠⲆΔᐃⵠΔ: 512,
    ᐃⲆⵠΔᐃΔⲆ: 513,
    ⲆΔⵠⵠΔⲆΔ: 514,
    ⲆⵠⵠΔΔᐃⵠ: 515,
    ⵠⲆⵠⲆΔⲆⲆ: 516,
    ⲆⵠΔᐃⲆⵠⲆ: 517,
    ΔⲆⲆⵠⲆⵠⵠ: 518,
    ᐃⵠⲆⵠᐃΔⵠ: 519,
    ⲆⲆⲆⲆᐃⲆⲆ: 520,
    ᐃᐃΔⵠⲆᐃⵠ: 521,
    ⵠⲆⵠⵠⵠᐃⵠ: 522,
    ᐃΔⲆⲆᐃΔⵠ: 523,
    ⲆⵠⵠΔᐃᐃⲆ: 524,
    ᐃᐃⵠᐃᐃΔᐃ: 525,
    ᐃⵠⵠⵠᐃΔⵠ: 526,
    ΔⵠΔⲆⲆⲆⲆ: 527,
    ᐃᐃΔⲆⲆⲆᐃ: 528,
    ᐃᐃⵠⲆΔⵠᐃ: 529,
    ⵠⵠΔΔΔⵠⵠ: 530,
    ⲆΔΔᐃⲆΔΔ: 531,
    ᐃᐃⵠⲆⲆΔⲆ: 532,
    ΔᐃⲆᐃΔⲆⲆ: 533,
    ᐃΔⲆⲆΔⵠⲆ: 534,
    ΔΔⵠΔΔⲆⲆ: 535,
    ᐃⲆⵠⵠⲆⲆⵠ: 536,
    ⵠΔᐃᐃⵠᐃⲆ: 537,
    ᐃᐃⲆⵠΔⲆⵠ: 538,
    ⵠⲆⲆⵠᐃⲆⲆΔΔ: 539,
    ⵠᐃⲆⵠⵠᐃⵠ: 540,
    ΔᐃΔΔⵠⲆᐃ: 541,
    ΔᐃⲆᐃⲆⵠΔ: 542,
    ΔΔⲆⲆᐃⲆⵠ: 543,
    ᐃΔⲆⲆᐃⲆᐃᐃⲆ: 544,
    POINTS: 545,
    ⲆΔᐃⲆᐃⲆᐃ: 546,
    ΔΔΔⵠΔⲆΔ: 547,
    ΔⵠⵠⲆΔⲆᐃ: 548,
    ΔᐃΔⵠᐃⲆᐃ: 549,
    ⵠᐃᐃᐃΔΔΔ: 550,
    ᐃⵠᐃΔⵠᐃⵠ: 551,
    ΔⵠΔⵠΔⲆⵠ: 552,
    ᐃᐃΔᐃΔⲆⲆ: 553,
    ᐃⵠΔⵠⵠⵠΔ: 554,
    ᐃᐃᐃⵠⲆⵠΔ: 555,
    ⵠⵠⲆⵠⲆⵠᐃ: 556,
    ᐃⵠᐃⵠⲆⲆΔ: 557,
    ᐃⲆⲆᐃⵠⵠⲆ: 558,
    ⲆⲆΔᐃⲆᐃⵠ: 559,
    ΔⲆᐃⵠΔⵠΔ: 560,
    ⵠⵠⲆⲆⵠⲆⲆ: 561,
    ΔᐃΔΔᐃⲆᐃ: 562,
    ⲆⵠⵠⲆⵠᐃⲆ: 563,
    ⵠⲆⵠᐃⲆⵠΔ: 564,
    ⲆⲆⲆᐃᐃᐃⲆ: 565,
    ᐃΔⲆⲆᐃᐃᐃ: 566,
    ⵠⵠᐃⲆⵠⲆⵠ: 567,
    ⲆᐃⵠΔⲆⲆⵠ: 568,
    ΔⵠⵠᐃⵠΔΔ: 569,
    ΔᐃᐃΔⲆⵠⲆ: 570,
    ⵠⲆᐃⵠΔΔⵠ: 571,
    ⲆᐃΔᐃⵠⵠⵠ: 572,
    ᐃⵠⲆⵠⲆᐃⵠ: 573,
    ⵠᐃⲆⲆΔᐃⲆ: 574,
    ⵠⵠΔⲆⵠΔⵠ: 575,
    ⲆⲆᐃᐃΔΔⵠ: 576,
    ᐃᐃᐃΔΔᐃⲆ: 577,
    ᐃᐃᐃⵠᐃΔⲆ: 578,
    ᐃᐃⵠΔⵠⲆΔ: 579,
    ᐃᐃⲆΔᐃⵠᐃ: 580,
    ⲆⲆΔⵠΔΔⵠ: 581,
    ᐃΔΔΔⲆᐃⵠ: 582,
    ΔⲆᐃᐃΔⵠΔ: 583,
    ⵠΔⲆᐃᐃⵠᐃ: 584,
    ᐃᐃⲆᐃⲆᐃΔ: 585,
    ᐃᐃΔΔⵠᐃⵠ: 586,
    ᐃⵠⲆⵠⵠⵠⵠ: 587,
    ⵠⲆⵠᐃᐃΔⵠ: 588,
    ⵠⲆⲆᐃΔⲆⲆ: 589,
    ᐃᐃᐃΔΔΔⵠ: 590,
    ⵠᐃⲆᐃⲆⲆⲆ: 591,
    ΔⲆⵠΔⵠⵠⲆ: 592,
    ⲆⲆⲆⲆᐃⲆᐃⲆΔ: 593,
    ⲆᐃⲆΔⲆⲆᐃ: 594,
    ᐃΔΔⵠᐃΔⵠⵠⵠ: 595,
    ᐃΔΔᐃⲆᐃⲆ: 596,
    ⲆΔⵠⵠᐃΔΔⲆᐃ: 597,
    ΔⵠⵠᐃⲆᐃⲆᐃⵠ: 598,
    ⵠⵠᐃΔⵠᐃⵠᐃΔ: 599,
    ΔᐃᐃⲆᐃΔⲆⵠⵠ: 600,
    ᐃⲆΔⵠⵠΔΔΔΔ: 601,
    ᐃⲆᐃᐃΔᐃᐃ: 602,
    ⲆᐃᐃΔⲆ: 603,
    ⲆⲆᐃΔΔⲆΔ: 604,
    ΔᐃⵠᐃΔⵠⵠ: 605,
    ΔⵠᐃⲆᐃΔΔ: 606,
    ΔᐃⵠᐃᐃⲆⵠⲆᐃ: 607,
    ⲆᐃⲆⲆᐃⵠᐃ: 608,
    ᐃᐃⲆΔⲆᐃᐃ: 609,
    ⲆᐃⵠⵠΔⵠΔ: 610,
    ᐃⲆⵠΔᐃⲆⲆ: 611,
    ΔⲆΔᐃⲆⵠⲆ: 612,
    ᐃΔⵠⵠⲆⵠⲆ: 613,
    ᐃΔⲆᐃⵠⲆⲆ: 614,
    ⲆΔⵠⲆⵠⲆΔ: 615,
    ΔΔⵠⵠⵠΔΔ: 616,
    ΔⵠⵠⵠΔΔΔ: 617,
    ⲆᐃΔⵠΔⲆᐃ: 618,
    ⵠⵠⲆⵠⲆ: 619,
    ᐃᐃᐃᐃⲆ: 620,
    ⲆⲆⵠᐃΔ: 621,
    ᐃΔⲆΔΔⲆΔⵠᐃ: 622,
    ⵠᐃΔⲆⲆⵠⵠ: 623,
    ᐃⵠᐃⵠⲆΔⵠ: 624,
    ΔΔΔᐃⵠⵠⲆ: 625,
    ⵠⵠⲆⵠΔⵠⵠ: 626,
    ᐃᐃΔⵠⵠⲆᐃ: 627,
    ΔⲆⲆⲆⲆⲆⲆ: 628,
    ᐃᐃΔΔⲆΔᐃ: 629,
    ⵠΔⵠΔᐃⲆᐃ: 630,
    ᐃⲆⵠᐃⲆΔⵠ: 631,
    ⵠΔⲆΔⲆⵠΔ: 632,
    ⵠⵠΔⲆⲆᐃⵠ: 633,
    ΔⲆᐃΔᐃⲆⵠ: 634,
    ⲆᐃΔᐃᐃΔⵠ: 635,
    ⵠᐃᐃᐃᐃⵠΔ: 636,
    ⵠᐃΔⵠᐃ: 637,
    ΔᐃⲆᐃᐃΔⵠ: 638,
    ΔᐃᐃⵠⲆⲆⲆ: 639,
    ⵠᐃΔᐃᐃⲆΔ: 640,
    ⲆᐃΔᐃⲆⲆΔ: 641,
    ⵠⲆⵠⲆⲆⲆᐃ: 642,
    ⵠⵠⲆⲆΔⵠᐃ: 643,
    Ⲇᐃⵠᐃᐃᐃⵠ: 644,
    ⲆⵠΔⵠΔᐃⲆ: 645,
    ᐃΔΔⵠᐃⵠⵠ: 646,
    ⲆⵠᐃⲆⵠⲆⲆ: 647,
    ⲆᐃᐃᐃᐃⲆᐃ: 648,
    ⵠΔⲆΔᐃᐃⲆ: 649,
    ⵠᐃΔⵠᐃⵠⵠ: 650,
    ⲆⲆⵠⵠᐃᐃⲆ: 651,
    ⲆⵠⲆⵠⲆΔΔ: 652,
    ΔᐃᐃⵠΔⲆΔ: 653,
    Ⲇᐃᐃᐃⵠⵠᐃ: 654,
    ᐃⵠᐃᐃΔᐃΔ: 655,
    ᐃⲆⵠⵠⲆⵠⵠ: 656,
    ⵠⲆΔᐃΔΔⵠ: 657,
    ⵠⲆΔΔΔΔᐃ: 658,
    ΔᐃΔΔⵠΔⲆ: 659,
    ⵠⲆⲆᐃⵠᐃᐃ: 660,
    ΔⵠᐃΔΔᐃΔ: 661,
    ⵠᐃⲆᐃⲆⵠᐃ: 662,
    ⲆΔΔᐃΔⵠⲆ: 663,
    ΔⲆⲆᐃᐃⵠΔ: 664,
    ⲆΔΔᐃⲆᐃⲆ: 665,
    ⵠᐃᐃΔⲆΔⵠ: 666,
    ⵠΔⲆⲆᐃⲆⲆ: 667,
    ᐃⲆΔΔⲆⵠⲆ: 668,
    ⲆⲆᐃⲆⲆⲆᐃ: 669,
    ᐃⵠⲆᐃᐃⲆⵠ: 670,
    ᐃΔᐃⲆⲆⵠΔ: 671,
    ⲆⵠΔᐃⵠΔΔ: 672,
    ΔᐃⲆⵠⲆ: 673,
    ΔⵠⵠᐃⲆΔΔ: 674,
    ⲆᐃⵠⵠΔΔΔ: 675,
    ΔᐃΔΔⲆ: 676,
    ⲆᐃⲆⲆΔΔⵠⵠᐃ: 677,
    ⵠⵠⵠᐃΔΔΔ: 678,
    ⵠΔΔᐃΔ: 679,
    ⲆⵠᐃᐃΔΔⲆ: 680,
    ⲆΔⵠᐃⵠΔᐃ: 681,
    ⲆᐃᐃᐃΔΔΔ: 682,
    ⲆⲆΔⲆΔΔⵠ: 683,
    ΔΔⲆⲆΔΔΔ: 684,
    ⵠⵠΔⲆⵠⲆⵠ: 685,
    ΔᐃΔΔᐃᐃⲆ: 686,
    ΔⵠΔⵠΔⵠᐃ: 687,
    ⵠⵠⲆᐃⲆⲆⲆ: 688,
    ⵠⲆⵠⲆᐃⲆΔ: 689,
    ⵠᐃⵠⵠⵠΔⵠ: 690,
    ⵠΔᐃᐃⲆ: 691,
    ΔⲆΔΔΔ: 692,
    ⲆⲆⲆⵠΔ: 693,
    ⵠΔᐃᐃⵠ: 694,
    ΔⵠᐃᐃΔ: 695,
    ᐃⲆⵠᐃᐃⵠⲆ: 696,
    ⲆᐃΔΔᐃΔᐃ: 697,
    ΔᐃΔⲆⵠΔᐃ: 698,
    ⲆΔΔΔᐃⵠΔ: 699,
    ΔᐃⵠⵠᐃΔⵠ: 700,
    ⵠⲆⲆⲆⵠⵠΔ: 701,
    ΔⵠⲆᐃᐃⲆΔ: 702,
    ⵠⵠΔΔⲆⲆⵠ: 703,
    ⵠᐃⵠΔⵠᐃⲆ: 704,
    ⵠᐃΔⲆΔΔᐃ: 705,
    ⵠⲆⵠᐃΔⵠΔ: 706,
    ⵠⲆᐃΔᐃΔΔ: 707,
    ΔΔⲆⲆⵠΔΔ: 708,
    ΔᐃⵠᐃⵠᐃⲆ: 709,
    ΔᐃⲆⲆΔⵠΔ: 710,
    ΔⵠᐃᐃΔᐃⵠ: 711,
    ΔᐃΔΔⵠⵠⲆ: 712,
    ⵠⲆⵠΔⵠᐃⵠ: 713,
    ⲆΔⵠᐃⲆᐃᐃ: 714,
    ᐃⲆⵠᐃΔᐃⲆ: 715,
    ΔᐃⲆΔⲆΔᐃ: 716,
    ᐃΔᐃⲆΔⲆΔ: 717,
    ⵠⵠⲆⵠⲆᐃᐃ: 718,
    ΔⲆΔΔⲆᐃⲆ: 719,
    ᐃⵠⵠᐃⲆⲆΔ: 720,
    ᐃⲆΔᐃⲆΔᐃⵠᐃ: 721,
    ⵠᐃΔᐃⲆΔᐃ: 722,
    ᐃΔⵠᐃⵠⲆᐃ: 723,
    ⵠⵠᐃᐃⵠᐃΔ: 724,
    ⵠΔⲆᐃⲆΔΔ: 725,
    ΔΔᐃⵠᐃⵠΔ: 726,
    ⲆΔΔⲆᐃ: 727,
    ⲆⲆⵠᐃⲆ: 728,
    ⲆⵠᐃΔᐃⵠᐃ: 729,
    ⲆⵠⲆⵠⵠⲆⵠ: 730,
    ⲆΔⵠᐃΔᐃⲆ: 731,
    ⲆⲆⵠᐃⵠᐃᐃ: 732,
    ᐃⵠᐃΔⵠⵠΔ: 733,
    ⲆᐃⲆᐃΔᐃΔ: 734,
    ⵠᐃⲆⲆⲆᐃⲆ: 735,
    ⵠⲆᐃⵠⵠΔΔ: 736,
    ⲆⵠᐃⲆⲆⵠⲆ: 737,
    ⲆΔᐃᐃⲆⲆⲆ: 738,
    ⵠᐃⲆⲆⵠᐃⲆ: 739,
    ⲆⲆⵠⲆⵠⵠᐃ: 740,
    ⲆⲆⵠΔᐃᐃΔ: 741,
    ΔⵠΔⵠⵠᐃΔ: 742,
    ⵠⲆⵠᐃᐃΔⲆ: 743,
    ⵠᐃⲆⲆⲆⲆΔ: 744,
    ⲆⵠⲆᐃⲆᐃΔ: 745,
    ΔⲆⲆⵠⵠΔᐃ: 746,
    ᐃⵠⵠⲆⵠⵠΔ: 747,
    ⲆⵠᐃΔⵠⵠᐃ: 748,
    ⵠⲆΔⵠᐃⲆⲆ: 749,
    ⵠΔᐃⲆΔᐃⵠ: 750,
    ⵠⵠᐃΔⵠⲆⵠ: 751,
    ⵠⲆΔᐃⲆΔᐃ: 752,
    ⵠⵠᐃΔⲆΔᐃ: 753,
    ⵠⵠᐃⲆΔᐃⵠ: 754,
    ⲆᐃᐃΔⲆⵠΔ: 755,
    ⵠᐃⲆᐃΔⵠⲆ: 756,
    ⵠⵠΔⵠΔⵠⵠ: 757,
    ⵠᐃᐃⲆᐃⵠΔ: 758,
    ⲆΔⲆⲆΔⵠⲆ: 759,
    ΔᐃΔᐃΔⵠᐃ: 760,
    ⲆⲆⵠᐃΔᐃⵠ: 761,
    ⲆΔⵠΔᐃⵠΔ: 762,
    ᐃΔⲆᐃᐃⵠᐃ: 763,
    ΔⲆⲆΔᐃⲆⲆ: 764,
    ⲆⵠⲆᐃⲆⵠⵠ: 765,
    ΔᐃⲆⵠⲆΔΔ: 766,
    ΔⵠᐃᐃΔⵠⲆ: 767,
    ⵠⵠᐃⵠⵠⵠᐃ: 768,
    ΔⵠⵠΔⲆⲆᐃ: 769,
    ⵠⲆⲆΔΔᐃᐃ: 770,
    ΔᐃⵠⵠᐃΔⲆ: 771,
    ΔᐃⵠⵠⲆⲆᐃ: 772,
    ⲆⲆΔⵠΔⲆΔ: 773,
    ⵠⲆⵠΔⵠⵠⲆ: 774,
    ᐃⲆⵠⵠΔᐃⵠ: 775,
    ⲆⵠⵠᐃⲆΔⲆ: 776,
    ⲆⵠⲆᐃᐃⵠⵠ: 777,
    ⵠΔΔΔⲆⵠᐃ: 778,
    ⲆᐃΔΔᐃⵠⵠ: 779,
    ΔΔⵠᐃⲆⲆⵠ: 780,
    ᐃⲆᐃⲆⲆᐃΔ: 781,
    ΔᐃⵠᐃⲆⵠᐃ: 782,
    ⲆᐃΔᐃⵠⲆⵠ: 783,
    ⲆⵠⵠⵠⲆⲆⲆ: 784,
    ΔⲆⵠᐃⵠⲆΔ: 785,
    ΔⵠᐃᐃᐃⲆⲆ: 786,
    ⵠΔᐃΔⲆᐃⲆ: 787,
    ᐃΔΔⵠⵠⵠⵠ: 788,
    ⵠⲆΔᐃⲆΔⵠ: 789,
    ⵠΔᐃΔⵠⲆⵠ: 790,
    ⵠᐃΔᐃᐃⲆᐃ: 791,
    ⲆⲆΔᐃⵠⲆⵠ: 792,
    ⵠⵠᐃΔⲆ: 793,
    ᐃⵠⲆⵠⲆⵠΔ: 794,
    ΔⲆⲆⲆᐃⵠⲆ: 795,
    ᐃⵠΔⲆΔ: 796,
    ΔᐃᐃΔᐃᐃᐃ: 797,
    ΔⵠΔⲆⵠᐃⵠ: 798,
    ΔⲆⵠⵠⲆⵠⵠ: 799,
    ⵠΔⵠⵠᐃᐃᐃ: 800,
    ⲆΔⲆⵠⵠⵠⵠ: 801,
    ⵠΔⲆⵠⵠ: 802,
    ᐃΔⵠΔΔΔᐃ: 803,
    ᐃΔᐃⲆⵠⵠᐃΔΔ: 804,
    ΔᐃᐃΔᐃᐃⲆᐃⵠ: 805,
    ⵠᐃⲆΔⲆΔⵠΔⲆ: 806,
    ΔᐃⲆΔⵠᐃⲆⵠΔ: 807,
    ΔᐃⵠᐃΔⲆᐃ: 808,
    ΔᐃⵠⵠⵠᐃⲆ: 809,
    ⵠΔⲆⲆⵠᐃᐃ: 810,
    ⲆⲆΔΔᐃΔⵠ: 811,
    ΔᐃⲆⵠⲆⲆⲆ: 812,
    ⲆΔⵠⲆᐃⲆᐃ: 813,
    ᐃⲆⲆⲆΔⲆᐃ: 814,
    ΔⵠⵠΔᐃΔⵠ: 815,
    ⵠⵠⲆᐃⲆⵠⵠ: 816,
    ⲆᐃⲆⲆⵠΔⲆ: 817,
    ᐃΔⲆΔΔ: 818,
    ⵠΔΔⲆΔ: 819,
    ⲆⵠΔⲆⲆⵠΔ: 820,
    ΔⲆⵠΔΔΔᐃ: 821,
    ΔᐃᐃⵠᐃᐃⲆ: 822,
    ΔⲆⲆΔΔⵠⵠ: 823,
    ᐃⲆⵠⲆᐃᐃᐃ: 824,
    ΔᐃⲆⲆⵠᐃⲆ: 825,
    ⲆᐃᐃⵠΔΔΔ: 826,
    ΔⲆⲆⲆᐃⲆⵠ: 827,
    ⵠᐃΔⲆΔΔΔ: 828,
    ⵠⵠᐃΔΔᐃᐃ: 829,
    ᐃᐃⵠΔᐃᐃΔ: 830,
    ΔⲆⵠΔⲆΔⲆ: 831,
    ⵠΔΔⲆᐃⵠⵠⲆⵠ: 832,
    ΔᐃⵠⵠⲆΔⵠⵠᐃ: 833,
    Δᐃⵠᐃⵠⵠⵠ: 834,
    ΔΔⲆⲆΔΔⲆ: 835,
    ⲆΔᐃⵠⵠΔⲆ: 836,
    ⲆΔᐃΔᐃⵠΔ: 837,
    ⲆΔΔΔᐃΔⵠ: 838,
    ⲆⵠᐃΔᐃⲆΔ: 839,
    ᐃΔᐃⵠᐃΔⵠ: 840,
    ΔⲆⲆⵠᐃⲆⲆ: 841,
    ᐃΔⲆⵠᐃⵠᐃ: 842,
    ⵠⵠⵠⲆᐃⵠⲆ: 843,
    ⲆⲆΔⵠⲆⲆΔ: 844,
    ΔⲆⲆΔⵠⲆⵠ: 845,
    ⲆⲆⵠᐃⵠΔⲆ: 846,
    ⲆΔᐃΔΔⵠⵠ: 847,
    ᐃⲆⵠⵠΔⵠᐃ: 848,
    ⵠⵠᐃᐃⵠⲆⲆ: 849,
    ΔᐃᐃΔⲆⲆⵠ: 850,
    ᐃⲆⲆⲆᐃᐃⵠ: 851,
    ᐃⵠⵠⵠᐃᐃⲆⵠⲆ: 852,
    ΔᐃⵠᐃΔ: 853,
    ᐃᐃⲆΔᐃ: 854,
    ⲆⲆΔⵠⵠⲆΔⲆΔ: 855,
    ⲆⵠⲆⵠⲆΔᐃⵠΔ: 856,
    ᐃⲆΔⵠⵠΔⲆⲆⵠ: 857,
    ΔⵠᐃᐃⲆⲆΔᐃⵠ: 858,
    ΔᐃⲆΔΔⲆΔ: 859,
    ΔΔᐃΔΔΔⲆ: 860,
    ⲆⲆΔⵠⵠⲆΔ: 861,
    ᐃᐃⲆᐃⵠΔⲆ: 862,
    ᐃⵠⲆΔⲆⵠᐃ: 863,
    ⵠⵠⵠΔᐃⲆᐃⵠΔ: 864,
    ᐃⲆⵠᐃⵠⵠⲆ: 865,
    ΔΔᐃⲆᐃⲆⲆ: 866,
    ⵠᐃΔⲆᐃⲆᐃ: 867,
    ⲆΔⲆᐃⲆⲆᐃ: 868,
    ⲆⵠⵠⵠⲆΔⵠ: 869,
    ⵠΔⵠⵠⲆⲆᐃ: 870,
    ᐃᐃΔⲆᐃⵠᐃ: 871,
    ⲆⲆᐃⵠᐃ: 872,
    ⲆΔΔΔΔⵠᐃⵠⲆ: 873,
    ΔⵠΔⲆⲆⵠΔ: 874,
    ΔΔⲆⲆⲆΔᐃ: 875,
    ΔⲆⲆⵠᐃⵠΔ: 876,
    ΔⲆᐃⵠᐃΔⲆ: 877,
    ⵠᐃΔᐃᐃᐃⲆ: 878,
    ᐃⲆⵠΔᐃⵠⵠ: 879,
    ΔΔᐃΔⲆⵠΔ: 880,
    ΔᐃΔΔᐃⲆΔ: 881,
    ᐃⵠΔᐃᐃΔΔ: 882,
    ΔⵠⵠᐃⵠⲆᐃ: 883,
    ⲆᐃΔᐃⲆⵠᐃ: 884,
    ⵠⲆⲆⵠⲆᐃⲆ: 885,
    ΔΔᐃⲆᐃⲆᐃ: 886,
    ᐃⲆᐃⵠΔ: 887,
    ᐃⵠᐃⵠΔΔⲆ: 888,
    ΔΔⵠⵠᐃΔⲆ: 889,
    ⵠᐃⲆΔᐃΔⵠ: 890,
    ᐃⵠᐃΔⵠⵠⲆ: 891,
    ΔᐃⲆᐃΔᐃᐃ: 892,
    ᐃⵠⲆⵠΔⵠΔ: 893,
    ᐃᐃⲆᐃΔΔⵠ: 894,
    ΔΔⵠⲆᐃⵠΔ: 895,
    ⵠᐃⲆⵠⵠΔⲆ: 896,
    ⲆᐃⵠⵠⲆΔᐃ: 897,
    ⵠⲆΔⲆⲆⵠΔ: 898,
    ᐃⲆⲆᐃΔⲆⵠ: 899,
    ⲆⵠᐃⲆΔⲆΔ: 900,
    ⲆΔⲆⲆΔⵠΔ: 901,
    ΔᐃᐃᐃⲆᐃⵠ: 902,
    ΔΔⲆΔⵠᐃᐃ: 903,
    ᐃΔΔΔΔⵠⵠ: 904,
    ⵠᐃⲆᐃᐃⵠᐃ: 905,
    ᐃⵠⲆⲆⲆΔᐃ: 906,
    ⵠΔⲆⲆΔⲆⲆ: 907,
    ⵠΔΔⲆᐃⲆⵠ: 908,
    ⲆⵠᐃⲆΔⲆᐃ: 909,
    ⲆᐃⲆⲆⵠᐃⲆ: 910,
    ΔᐃΔⵠⵠᐃΔ: 911,
    ⵠΔΔΔⵠⲆⵠ: 912,
    ᐃⲆΔᐃᐃᐃᐃ: 913,
    ⵠΔⲆᐃᐃᐃⵠⵠΔ: 914,
    ⲆⵠⲆⵠⲆⲆⲆΔⲆ: 915,
    ⲆⵠⲆΔΔⵠΔⲆᐃ: 916,
    ΔΔᐃⵠΔΔⲆⲆᐃ: 917,
    ᐃⲆᐃⵠΔΔⲆ: 918,
    ⵠᐃᐃⵠⲆⵠⵠ: 919,
    ᐃᐃⲆⵠⲆ: 920,
    ΔⵠΔΔⲆⲆᐃ: 921,
    ⲆᐃᐃⵠΔᐃΔ: 922,
    ⵠⲆⵠᐃᐃⲆΔ: 923,
    ΔⲆⵠᐃⲆⲆⲆ: 924,
    ΔΔᐃΔᐃΔΔ: 925,
    ΔΔᐃΔⵠⵠⵠ: 926,
    ⲆΔⲆΔΔΔΔ: 927,
    ΔΔⵠΔⵠⲆⵠ: 928,
    ΔⵠΔⵠΔⵠⲆ: 929,
    ᐃⲆᐃⵠⵠᐃΔ: 930,
    ᐃⵠΔᐃⵠᐃⲆ: 931,
    ΔⵠᐃᐃⲆ: 932,
    ᐃⵠⲆΔⵠΔⵠ: 933,
    ᐃᐃⲆΔⲆΔΔ: 934,
    ΔⲆⵠⵠᐃᐃⲆ: 935,
    ᐃⲆⲆⵠᐃΔⲆ: 936,
    ΔⵠⵠⵠⲆⲆⵠ: 937,
    ᐃⲆⲆⲆΔ: 938,
    ᐃᐃⲆᐃⲆΔⲆ: 939,
    ⵠᐃⲆΔⵠⲆΔΔⵠ: 940,
    ᐃⲆᐃᐃⲆ: 941,
    ᐃⲆᐃᐃᐃⲆⲆ: 942,
    ⵠⲆⵠⵠᐃⲆⵠ: 943,
    Δᐃᐃᐃⵠᐃⵠ: 944,
    ⲆⵠᐃΔᐃᐃⲆ: 945,
    ⵠⲆⲆΔΔⲆΔ: 946,
    ⲆⲆΔᐃᐃᐃᐃ: 947,
    ΔⲆⲆᐃⲆⵠΔ: 948,
    ᐃⲆᐃᐃⵠΔΔ: 949,
    ⵠΔΔΔᐃⲆⵠ: 950,
    ⲆⲆⵠᐃΔⲆⵠ: 951,
    ΔΔΔᐃⲆⵠᐃ: 952,
    ΔⵠᐃΔᐃⲆᐃ: 953,
    ⲆᐃⵠⲆⵠᐃΔ: 954,
    ⵠᐃᐃⵠⲆⵠΔ: 955,
    ΔΔⲆⵠⲆᐃⲆ: 956,
    ⲆᐃΔᐃⲆᐃᐃ: 957,
    ⵠⵠⲆᐃⵠⵠΔ: 958,
    ⲆᐃΔᐃⵠΔⲆ: 959,
    ⲆⲆⲆΔⲆⵠᐃ: 960,
    ⲆᐃⲆΔⵠᐃᐃ: 961,
    ⲆⵠΔΔⵠΔᐃ: 962,
    ⵠⵠΔⲆᐃⵠⵠ: 963,
    ⵠΔⵠΔⵠᐃᐃⵠᐃ: 964,
    ⵠΔΔΔⲆⵠⵠ: 965,
    ΔⵠⲆⵠⵠⲆΔ: 966,
    ⵠΔⲆᐃⵠΔⲆ: 967,
    ΔᐃᐃΔΔᐃⵠ: 968,
    ⲆᐃᐃⲆⵠⵠΔ: 969,
    ⵠᐃⵠⵠⵠΔᐃ: 970,
    ⵠⵠⲆⲆⵠᐃⵠ: 971,
    ΔⵠⵠΔᐃΔΔ: 972,
    ᐃᐃᐃᐃⲆᐃⲆ: 973,
    ΔⵠⲆⲆᐃᐃⵠ: 974,
    ᐃⲆⵠⵠΔⲆⲆ: 975,
    ᐃⵠⵠⲆΔⲆᐃ: 976,
    ⲆᐃⵠⲆΔⵠⵠ: 977,
    ᐃΔᐃΔⵠᐃⲆ: 978,
    ᐃⲆΔⲆⵠᐃΔ: 979,
    ⲆⵠⲆΔⵠΔⵠ: 980,
    ᐃⲆΔΔⵠⵠⲆ: 981,
    ᐃⵠᐃⵠᐃⲆᐃ: 982,
    ᐃⲆⵠΔΔΔⲆ: 983,
    ⵠⲆⵠⵠⲆΔⵠ: 984,
    ⲆⵠΔⵠⲆⵠΔ: 985,
    ᐃⵠΔᐃᐃⲆᐃ: 986,
    ⵠⲆᐃⵠⲆⵠⲆ: 987,
    ΔⵠⲆΔⵠᐃᐃ: 988,
    ΔΔⲆⲆᐃ: 989,
    ΔΔᐃⲆΔΔΔ: 990,
    ⵠⲆᐃⵠᐃᐃΔ: 991,
    ⲆΔⵠⵠᐃⲆᐃ: 992,
    ΔΔⲆᐃᐃΔⵠ: 993,
    ⲆⲆⲆΔⲆᐃΔ: 994,
    ⲆⵠᐃⲆΔᐃⵠ: 995,
    ⲆᐃⲆᐃᐃⵠⵠ: 996,
    ᐃⲆΔΔⲆⲆΔ: 997,
    ᐃⵠᐃⵠⵠⲆΔ: 998,
    ᐃⲆᐃΔΔΔⲆ: 999,
    ᐃⲆᐃᐃⵠΔⲆ: 1000,
    ⲆΔⵠᐃⵠᐃⲆ: 1001,
    ⵠᐃⲆᐃᐃⵠⲆ: 1002,
    ᐃΔⵠⲆΔⲆⲆ: 1003,
    ⲆᐃΔⵠⵠΔᐃ: 1004,
    ⵠᐃⲆΔⵠᐃⵠ: 1005,
    ΔⵠⵠᐃⲆΔᐃ: 1006,
    ΔΔⵠΔΔΔⵠ: 1007,
    ⵠΔⲆᐃΔΔᐃ: 1008,
    ⲆⲆΔᐃⵠⲆⲆ: 1009,
    ᐃⲆⵠᐃⵠᐃᐃ: 1010,
    ⵠⵠᐃΔⵠⵠⲆ: 1011,
    ΔⲆΔΔΔᐃⵠ: 1012,
    ΔᐃⲆΔᐃⵠᐃ: 1013,
    ᐃⵠⵠⵠⲆᐃⵠ: 1014,
    ⲆΔΔⲆⵠⲆⵠ: 1015,
    ⲆⲆᐃⲆⵠᐃΔ: 1016,
    ΔΔΔΔΔᐃⵠ: 1017,
    ⵠΔⲆⵠᐃᐃⲆ: 1018,
    ᐃⲆⲆⵠᐃⵠⵠ: 1019,
    ⲆΔᐃⵠΔⵠΔ: 1020,
    ΔᐃᐃⲆⲆᐃΔ: 1021,
    ΔᐃⲆⲆⲆΔΔ: 1022,
    ⲆⲆᐃⲆⲆΔᐃ: 1023,
    ΔΔⵠᐃ: 1024,
    ΔⲆⵠᐃ: 1025,
    ᐃⲆⲆΔⵠⵠᐃ: 1026,
    ⲆᐃᐃⵠⲆⲆⵠ: 1027,
    ⲆΔΔⵠⲆⲆΔ: 1028,
    ΔΔΔⲆⵠⵠᐃ: 1029,
    ⲆⲆⵠΔⵠᐃΔ: 1030,
    ⲆᐃᐃⲆⲆⲆᐃ: 1031,
    ᐃⵠⵠⲆⲆⲆⲆ: 1032,
    ⲆΔΔⵠⵠ: 1033,
    ⲆⵠⵠᐃᐃⲆⵠ: 1034,
    ⵠⲆᐃⲆᐃ: 1035,
    ⵠᐃⵠΔⵠⵠΔ: 1036,
    ᐃΔⵠⵠΔ: 1037,
    ᐃΔⵠΔⲆⵠⵠ: 1038,
    ᐃᐃⲆᐃᐃ: 1039,
    ⵠᐃΔⲆᐃᐃⲆ: 1040,
    ΔᐃⵠΔΔ: 1041,
    ᐃⲆⵠⵠⲆ: 1042,
    ΔΔⵠᐃⲆⵠⵠ: 1043,
    ⲆΔⵠⲆᐃΔⵠ: 1044,
    ΔⵠΔΔⲆⵠᐃ: 1045,
    ⲆⵠΔᐃᐃΔⲆ: 1046,
    ⲆΔⵠΔᐃⵠⵠ: 1047,
    ⵠⲆⲆΔⲆΔⵠ: 1048,
    ᐃᐃΔⵠⵠⵠⲆ: 1049,
    ΔⲆᐃΔⵠⵠⵠ: 1050,
    ᐃⵠΔⲆⵠΔᐃ: 1051,
    ᐃⵠᐃⲆⲆ: 1052,
    ⲆⵠⵠⵠΔⵠᐃ: 1053,
    ΔΔΔΔᐃ: 1054,
    ⵠᐃΔᐃⲆⲆⵠ: 1055,
    ⲆⲆⲆⲆⲆᐃΔ: 1056,
    ᐃᐃⵠᐃⵠΔΔ: 1057,
    ΔⵠⵠⵠⵠⲆΔ: 1058,
    ΔⵠΔⵠᐃⲆⲆ: 1059,
    ᐃΔⵠⲆⵠⵠⲆ: 1060,
    ⵠⲆⵠⵠⵠΔᐃⵠΔ: 1061,
    ⲆΔΔⵠⲆᐃᐃ: 1062,
    ᐃⵠΔⵠΔΔᐃ: 1063,
    ᐃⵠᐃᐃᐃⲆⲆⵠⲆ: 1064,
    ⲆΔΔΔⲆΔⵠ: 1065,
    ⲆⲆⵠᐃⵠΔΔ: 1066,
    ΔⵠⲆⲆΔᐃⲆ: 1067,
    ⲆᐃΔΔⲆⵠᐃ: 1068,
    ᐃΔᐃᐃⵠ: 1069,
    ΔᐃⲆⵠᐃᐃⲆ: 1070,
    ⵠⲆⲆⲆᐃⵠⵠ: 1071,
    ΔΔⲆᐃᐃⲆᐃ: 1072,
    ΔΔⵠⵠⵠⲆⵠ: 1073,
    ⵠᐃⲆⲆΔⲆΔ: 1074,
    ΔⵠⲆⵠⵠᐃΔ: 1075,
    ΔᐃΔⵠΔᐃΔ: 1076,
    ΔⲆΔⲆᐃΔΔ: 1077,
    ᐃⲆⵠᐃⲆᐃⲆ: 1078,
    ᐃᐃⲆᐃⵠΔΔ: 1079,
    ΔⵠᐃᐃΔⲆΔ: 1080,
    ΔⲆΔᐃⲆΔᐃ: 1081,
    ΔᐃᐃᐃⵠΔⵠ: 1082,
    ΔᐃⲆⲆⵠΔⲆ: 1083,
    ΔⲆΔΔⵠ: 1084,
    ᐃᐃᐃΔⵠⲆⵠ: 1085,
    ᐃᐃⵠⲆⲆᐃⲆ: 1086,
    ᐃᐃⲆᐃΔⵠᐃ: 1087,
    ⲆΔⲆᐃᐃⲆⲆ: 1088,
    ⵠΔⵠⲆΔᐃᐃ: 1089,
    ΔⲆᐃΔᐃΔⵠ: 1090,
    ⵠⲆᐃᐃⵠᐃᐃ: 1091,
    ⲆᐃⲆΔᐃⵠΔ: 1092,
    ⲆⵠⵠⲆᐃΔΔ: 1093,
    ⲆΔⲆⲆᐃΔⵠ: 1094,
    ΔⲆΔΔᐃΔⵠ: 1095,
    ΔᐃΔΔᐃΔⵠ: 1096,
    ΔⲆᐃⲆᐃᐃⵠ: 1097,
    ᐃᐃΔΔⲆⲆⲆ: 1098,
    ΔⲆⲆᐃⲆ: 1099,
    ΔΔΔⲆⵠΔⲆ: 1100,
    ᐃⵠⲆΔⵠᐃᐃ: 1101,
    ⵠⲆⵠⵠⵠⲆⵠ: 1102,
    ΔΔⲆΔⲆⵠⲆ: 1103,
    ⵠⲆΔⲆΔⲆⲆ: 1104,
    ΔⵠᐃᐃⵠⲆⲆ: 1105,
    ᐃᐃⲆⵠΔᐃⵠ: 1106,
    ᐃⲆⲆΔᐃΔᐃ: 1107,
    ⲆΔⵠᐃᐃᐃΔ: 1108,
    ⵠΔⲆⲆⲆⵠΔ: 1109,
    ᐃⲆⲆΔⵠᐃΔ: 1110,
    ᐃᐃᐃᐃⲆⵠΔ: 1111,
    ΔΔΔⲆΔⵠⵠ: 1112,
    ᐃΔᐃⵠΔⵠⵠ: 1113,
    ᐃⵠΔΔⲆΔΔ: 1114,
    ⵠⵠᐃᐃⲆᐃⵠ: 1115,
    ᐃⲆΔΔⵠⵠⵠ: 1116,
    ⲆⵠⵠΔⵠΔⲆ: 1117,
    ᐃᐃⵠᐃⲆⵠⲆ: 1118,
    ΔⲆⵠⲆᐃⵠᐃ: 1119,
    Δⵠᐃᐃⵠ: 1120,
    ᐃⲆΔΔΔΔΔ: 1121,
    ᐃⵠΔᐃⵠⵠⲆ: 1122,
    ⵠᐃΔΔΔⲆⵠ: 1123,
    ᐃⵠΔⲆᐃᐃᐃ: 1124,
    ᐃⲆᐃᐃᐃΔⵠ: 1125,
    ᐃⵠΔⲆⲆᐃΔ: 1126,
    ᐃΔⵠⵠⲆΔⲆ: 1127,
    ΔᐃᐃⲆᐃΔΔ: 1128,
    ᐃᐃⲆΔΔΔᐃ: 1129,
    ⵠΔᐃⲆΔⲆᐃ: 1130,
    ⵠᐃⲆⲆⵠⲆⲆ: 1131,
    ⵠⲆΔⲆᐃⲆⲆ: 1132,
    ⲆⲆⲆⲆⵠⲆⲆ: 1133,
    ⲆΔᐃⲆΔⵠⵠ: 1134,
    ⲆⵠⵠⲆΔᐃⵠ: 1135,
    ΔᐃⲆⵠⵠⲆⵠ: 1136,
    ⲆⲆⲆⵠΔⲆⲆ: 1137,
    ΔⲆⲆⲆⲆᐃⲆ: 1138,
    ⲆΔᐃᐃⵠᐃⵠ: 1139,
    ⲆⵠⲆⵠⵠⵠᐃ: 1140,
    ΔΔΔΔΔⵠΔ: 1141,
    ⲆΔⵠⲆᐃⲆⲆ: 1142,
    ⲆⵠᐃᐃⵠⲆⵠ: 1143,
    ᐃⲆⵠⲆᐃΔᐃ: 1144,
    ΔᐃⲆⲆᐃⵠᐃ: 1145,
    ΔⲆⵠⲆⲆⵠⵠ: 1146,
    ΔΔΔᐃⵠⲆᐃ: 1147,
    ⵠⵠⵠᐃⲆᐃᐃ: 1148,
    ⵠᐃΔΔⵠⵠᐃ: ["#E9CF96", "#144940"],
    ⵠᐃΔᐃΔⵠΔ: 1149,
    ⲆⲆΔⵠᐃΔᐃ: 1150,
    ⵠΔΔⵠᐃⵠΔ: 1151,
    ⲆΔᐃⵠⵠⵠΔ: 1152,
    ΔΔΔᐃⲆⲆⲆ: 1153,
    ᐃⲆΔⲆⲆⲆᐃ: 1154,
    ⵠΔΔᐃᐃⲆΔ: 1155,
    ⵠⵠⵠΔᐃ: 1156,
    ⲆⵠⵠᐃᐃΔΔ: 1157,
    ΔⵠⵠΔΔⵠⲆ: 1158,
    ⵠᐃΔᐃΔⲆΔ: 1159,
    ⵠⵠᐃΔⵠᐃΔ: 1160,
    ⲆΔᐃⵠΔᐃΔ: 1161,
    ΔⵠⵠⵠᐃⲆΔ: 1162,
    ᐃΔⲆⲆⵠᐃᐃ: 1163,
    ᐃΔΔⲆⵠⵠᐃ: 1164,
    ⵠⲆᐃⵠΔᐃⲆ: 1165,
    ΔΔⲆΔΔⲆᐃ: 1166,
    ΔᐃᐃⲆᐃⲆΔ: 1167,
    ⵠᐃᐃⵠⲆⲆᐃ: 1168,
    ΔΔᐃⵠΔᐃᐃ: 1169,
    ⲆⲆⵠᐃⲆⲆᐃ: 1170,
    ΔΔΔⲆᐃⲆⵠ: 1171,
    ⵠΔⲆⲆⵠⲆΔ: 1172,
    ΔⲆⲆᐃᐃΔⲆ: 1173,
    ᐃⲆΔᐃΔⵠⲆ: 1174,
    ᐃⲆⲆⵠΔΔⵠ: 1175,
    ᐃⲆΔⵠⵠᐃΔ: 1176,
    ΔⲆⵠⲆⲆᐃⵠ: 1177,
    ⲆᐃⲆΔᐃⲆᐃ: 1178,
    ΔⵠⲆⵠⲆᐃΔ: 1179,
    ⲆⵠⲆⵠΔΔⲆ: 1180,
    ⲆⲆⲆⵠΔⵠΔ: 1181,
    ⲆⲆᐃᐃᐃⲆΔ: 1182,
    ΔⲆΔⲆⲆΔⵠ: 1183,
    ⲆΔⵠⵠᐃⲆⲆ: 1184,
    ᐃΔᐃΔⵠⲆⲆ: 1185,
    ⲆΔⲆⵠⲆΔⵠ: 1186,
    ᐃⵠΔⵠⲆΔΔ: 1187,
    ΔⵠΔᐃᐃⵠΔ: 1188,
    ΔΔⵠᐃⵠⵠⲆ: 1189,
    ᐃᐃᐃᐃⲆⲆᐃ: 1190,
    ⲆⲆⲆⲆᐃᐃᐃ: 1191,
    ᐃᐃⵠⵠᐃⲆⲆ: 1192,
    ΔⵠⲆⲆⵠΔΔ: 1193,
    ΔⵠⲆⲆΔΔΔ: 1194,
    ᐃΔⵠΔⲆΔⲆ: 1195,
    ᐃⵠΔⵠⵠΔᐃ: 1196,
    ΔΔⵠΔⲆᐃⲆ: 1197,
    ⵠⵠΔᐃⲆⵠᐃ: 1198,
    ⵠΔⲆᐃⲆΔᐃ: 1199,
    ⲆᐃⵠⲆΔⵠⲆ: 1200,
    ΔⵠⲆⵠⲆⲆⲆ: 1201,
    ⲆᐃⲆⲆΔⵠᐃ: 1202,
    ᐃⲆᐃΔᐃⵠⵠ: 1203,
    ᐃᐃΔᐃΔΔⵠ: 1204,
    ΔᐃΔⲆⲆⵠⵠ: 1205,
    ⲆΔⲆⲆΔᐃΔ: 1206,
    ⲆⲆΔⵠⵠΔⵠ: 1207,
    ᐃᐃⲆⵠⵠΔⵠ: 1208,
    ⲆᐃΔⵠⲆΔᐃ: 1209,
    ᐃΔΔΔΔⵠΔ: 1210,
    ᐃᐃᐃⵠΔⲆⵠ: 1211,
    ⵠⲆⲆΔΔΔⲆ: 1212,
    ΔⵠᐃᐃᐃΔⲆ: 1213,
    ΔⲆΔⲆⵠⲆⲆ: 1214,
    ⲆⲆⵠⵠᐃⵠⲆ: 1215,
    ᐃᐃⵠⲆΔⲆⵠ: 1216,
    ᐃⵠⲆⲆⵠⵠᐃ: 1217,
    ᐃΔⲆᐃᐃ: 1218,
    ᐃⲆΔᐃΔⵠⵠ: 1219,
    ᐃᐃΔⵠⲆ: 1220,
    ⲆⲆᐃⵠⵠΔⵠ: 1221,
    ΔⵠΔΔᐃΔⵠ: 1222,
    ⲆⲆΔⵠⵠⲆⵠ: 1223,
    ΔΔᐃⲆⵠⲆΔ: 1224,
    ⵠⲆⵠᐃⵠⲆⲆ: 1225,
    ⲆᐃΔⵠᐃⵠⲆ: 1226,
    ⵠᐃⲆᐃᐃΔⵠ: 1227,
    ᐃⵠⵠⲆⵠΔⲆ: 1228,
    ΔΔᐃᐃᐃⵠΔ: 1229,
    ⲆᐃⲆΔΔΔⲆ: 1230,
    ΔⲆΔⵠⵠⵠⲆ: 1231,
    ᐃⵠΔⲆⲆⲆᐃ: 1232,
    ⵠΔᐃᐃⲆᐃⲆ: 1233,
    ⲆᐃΔᐃᐃΔΔ: 1234,
    ΔⵠᐃΔᐃᐃΔ: 1235,
    ⲆᐃᐃⵠⲆⲆΔ: 1236,
    ᐃᐃᐃᐃⲆⲆΔ: 1237,
    ᐃⵠⲆΔᐃΔΔ: 1238,
    ᐃⲆΔΔᐃΔⲆ: 1239,
    ⲆᐃᐃᐃᐃΔΔ: 1240,
    ⲆᐃⵠⵠⲆⵠⵠ: 1241,
    ⲆΔᐃᐃᐃⵠᐃ: 1242,
    ᐃⵠⲆΔᐃΔᐃ: 1243,
    ⲆΔⵠⲆⵠⵠⲆ: 1244,
    ⲆⵠΔⵠᐃΔᐃ: 1245,
    ⵠⵠⵠΔᐃΔⵠ: 1246,
    ⵠΔⲆⵠΔᐃⵠ: 1247,
    ⲆⲆⵠᐃⲆⵠᐃ: 1248,
    ⵠⲆΔᐃⵠᐃΔ: 1249,
    ᐃᐃⵠⵠⵠΔᐃ: 1250,
    ⵠᐃΔΔΔᐃᐃ: 1251,
    ᐃΔᐃᐃᐃⵠΔ: 1252,
    ⲆⵠⵠⵠⵠᐃΔ: 1253,
    ⲆⲆΔΔΔⲆⵠ: 1254,
    ⲆⲆⵠⲆⲆⵠⲆ: 1255,
    ⵠᐃⵠΔΔⵠᐃ: 1256,
    ΔⵠⲆᐃᐃⵠⵠ: 1257,
    ⲆΔᐃᐃΔᐃⵠ: 1258,
    ⲆⲆΔⲆⵠΔᐃ: 1259,
    ⵠⵠⵠᐃⲆΔⲆ: 1260,
    ⲆΔⵠΔΔⲆⵠ: 1261,
    ΔⵠⲆⲆΔΔⵠ: 1262,
    ᐃᐃⵠⵠⵠⵠᐃ: 1263,
    ⲆᐃⵠᐃⲆⲆⵠ: 1264,
    ΔⲆΔⵠⵠⵠⵠ: 1265,
    ⵠⵠⵠⵠⲆⲆᐃ: 1266,
    ⵠΔΔⲆⲆᐃⲆ: 1267,
    ⵠⵠᐃⵠⵠⵠΔ: 1268,
    ⲆⵠⵠⲆΔΔΔ: 1269,
    ᐃⲆΔΔⲆΔⵠ: 1270,
    ⵠᐃⲆⵠᐃⲆᐃ: 1271,
    ᐃⲆⵠⵠΔⵠⲆ: 1272,
    ⲆᐃΔⲆⲆⵠⲆ: 1273
  };
  const Er = 5;
  const Fr = 16;
  zr = 0;
  var Gr = {
    ⲆᐃⵠⵠⲆ: 0,
    ⵠⵠⲆΔΔ: 1,
    ΔⵠΔᐃⲆ: 2,
    ᐃⵠⵠᐃⲆ: 3,
    ⵠⵠⲆᐃⵠ: 4,
    ΔΔᐃᐃⵠ: 5,
    ⵠⵠᐃⲆⲆ: 6,
    ᐃⵠⵠⲆᐃ: 7,
    ⵠⵠᐃⲆⵠ: 8,
    ΔᐃⵠᐃⲆ: 9,
    ⵠⵠⲆᐃᐃ: 10,
    ⵠᐃⵠΔⲆ: 11,
    ΔⲆⵠⲆᐃ: 12,
    ⵠΔⵠⲆΔ: 13,
    Ⲇᐃᐃⵠᐃ: 14,
    ⲆⵠΔⵠΔ: 15,
    ⲆⲆⲆᐃᐃ: 16,
    ᐃΔⵠᐃΔ: 17,
    ⲆΔΔᐃⲆ: 18,
    ⵠΔᐃⵠⵠ: 19,
    ⵠᐃⲆⲆᐃ: 20,
    ⲆΔᐃᐃⵠ: 21,
    ⵠΔⵠⲆⲆ: 22,
    ΔᐃⵠⲆⵠ: 23,
    ΔⵠⲆⲆⲆ: 24,
    ⲆᐃᐃⵠⲆ: 25,
    ⵠⵠⲆⵠΔ: 26,
    ΔⲆⵠⲆⲆ: 27,
    Δᐃⵠᐃᐃ: 28,
    ᐃⲆⲆⵠᐃ: 29,
    ⵠᐃᐃᐃᐃ: 30,
    ᐃⵠᐃⵠᐃ: 31,
    ⵠⲆⲆᐃᐃ: 32,
    ⲆᐃⲆᐃᐃ: 33,
    ⵠⲆⲆⵠᐃ: 34,
    ΔⵠᐃⵠΔ: 35,
    ᐃΔⲆⵠᐃ: 36,
    ᐃⲆΔⲆⲆ: 37,
    ᐃⲆΔⵠⵠ: 38,
    ⲆΔᐃᐃⲆ: 39,
    ΔⵠⲆⵠΔ: 40,
    ΔⲆᐃⵠΔ: 41,
    ᐃᐃⲆⲆⵠ: 42,
    ⵠᐃⲆᐃⲆ: 43,
    ⲆⲆᐃⵠⵠ: 44,
    ᐃⲆⵠΔⵠ: 45,
    ΔΔⲆΔⵠ: 46,
    ⲆᐃⲆᐃⲆ: 47,
    ⵠΔΔΔⵠ: 48,
    ᐃⵠΔᐃⲆ: 49,
    ᐃᐃⲆⵠⵠ: 50,
    ΔᐃⵠⵠΔ: 51,
    ΔⲆⲆⵠⲆ: 52,
    ΔⵠΔⵠᐃ: 53,
    ⵠⵠⵠΔⵠ: 54,
    ΔᐃΔΔΔ: 55,
    ⵠⵠⵠⲆⲆ: 56,
    ΔΔⵠᐃΔ: 57,
    ᐃΔⲆᐃⲆ: 58,
    ᐃᐃⵠᐃⵠ: 59,
    ᐃΔⵠᐃⲆ: 60,
    ⲆⵠⵠⵠⲆ: 61,
    ⵠΔⲆᐃᐃ: 62,
    ΔᐃⲆᐃⲆ: 63,
    ΔⵠⵠᐃⲆ: 64,
    ⲆⲆΔⵠΔ: 65,
    ᐃⲆᐃⵠⲆ: 66,
    ⵠⲆΔΔᐃ: 67,
    Ⲇⵠᐃⵠᐃ: 68,
    ⵠⲆⵠⵠⵠ: 69,
    ΔᐃⵠΔⲆ: 70,
    ⵠⲆⵠᐃᐃ: 71,
    ᐃΔⲆⲆⵠ: 72,
    Δᐃᐃⵠⵠ: 73,
    Δⵠⵠⵠⵠ: 74,
    ᐃᐃⵠᐃΔ: 75,
    ᐃᐃΔΔΔ: 76,
    ⲆⲆΔΔᐃ: 77,
    ⲆⵠΔⵠⵠ: 78,
    ΔⲆᐃΔᐃ: 79,
    ΔⲆⵠⲆⵠ: 80,
    ⵠⲆᐃⵠᐃ: 81,
    ΔΔⵠⲆⵠ: 82,
    ⲆⵠΔⲆΔ: 83,
    ⵠᐃΔⵠⲆ: 84,
    ⵠΔⵠⲆᐃ: 85,
    ᐃⵠⲆⲆᐃ: 86,
    ᐃᐃⵠⲆΔ: 87,
    ᐃⲆⲆⵠⲆ: 88,
    ΔⲆᐃⵠⵠ: 89,
    ΔⵠΔⲆΔ: 90,
    ⵠⲆⲆᐃΔ: 91,
    ⵠΔᐃΔⵠ: 92,
    ᐃⵠᐃΔⵠ: 93,
    ⵠΔⲆᐃⲆ: 94,
    ΔⵠⵠⲆᐃ: 95,
    ᐃΔΔΔᐃ: 96,
    ⲆΔⵠΔᐃ: 97,
    ⲆΔⲆᐃⲆ: 98,
    ΔⵠⵠΔᐃ: 99,
    ⲆΔⵠΔ: 100,
    ⲆⵠⲆᐃⵠ: 101,
    ⲆⵠΔⲆⲆ: 102,
    ⲆⵠⵠⲆᐃ: 103,
    ⲆⲆΔⵠᐃ: 104,
    ⵠⵠΔⲆⲆ: 105,
    ⵠⵠᐃΔΔ: 106,
    ⵠᐃΔᐃⵠ: 107,
    ⵠⵠΔⲆᐃ: 108,
    ⲆᐃΔᐃᐃ: 109,
    ⲆⵠⵠΔΔ: 110,
    ΔⲆΔⲆⲆ: 111,
    ⵠⲆΔΔⲆⵠᐃ: 112,
    ⵠΔᐃΔⵠᐃⲆ: 113,
    ΔΔⲆᐃⵠ: 114,
    ΔⵠⵠΔΔ: 115,
    ᐃᐃΔⲆᐃ: 116,
    ⵠᐃΔⵠⵠ: 117,
    ⲆⲆΔⲆΔ: 118,
    ᐃⵠᐃᐃᐃ: 119,
    ⵠᐃⵠᐃⵠ: 120,
    ⵠⲆⵠΔⲆ: 121,
    ⵠⲆΔⲆᐃ: 122,
    ⵠᐃᐃⵠⲆ: 123,
    ⵠΔⲆⵠΔ: 124,
    ᐃⲆⲆⲆᐃ: 125,
    ⲆΔΔᐃΔ: 126,
    ⲆⵠⵠᐃΔ: 127,
    ⵠᐃⵠⵠᐃ: 128,
    ΔⲆᐃⵠᐃ: 129,
    ᐃΔᐃⲆΔ: 130,
    ᐃⲆᐃΔᐃ: 131,
    ⲆⲆΔⲆᐃ: 132,
    ⲆΔⲆΔΔ: 133,
    ΔⵠⲆⵠⲆ: 134,
    ⵠⲆΔᐃΔ: 135,
    ᐃᐃⵠⲆⵠ: 136,
    ⵠⵠᐃᐃⵠ: 137,
    ᐃΔΔᐃΔ: 138,
    ⲆⵠᐃⲆⲆ: 139,
    ᐃⵠⲆⲆⵠ: 140,
    ⵠΔᐃᐃΔ: 141,
    ᐃⲆΔΔᐃ: 142,
    ᐃⲆⲆΔᐃ: 143,
    ΔⲆⵠΔⲆ: 144,
    ΔⲆⵠΔΔ: 145,
    ΔΔⲆⵠⵠ: 146,
    ⲆᐃⵠΔΔ: 147,
    ᐃΔⲆⲆⲆ: 148,
    ⲆⵠΔΔΔ: 149,
    ΔⵠⲆΔⵠ: 150,
    ᐃᐃᐃⲆⵠ: 151,
    ⵠⵠΔΔᐃ: 152,
    ᐃⵠᐃᐃⲆ: 153,
    ᐃⲆᐃᐃΔ: 154,
    Δⵠᐃⵠᐃ: 155,
    ΔΔᐃΔᐃ: 156,
    ⵠΔⵠΔΔ: 157,
    ᐃΔΔΔⵠ: 158,
    ⲆⲆⲆⲆⵠ: 159,
    ⲆΔΔⲆⲆ: 160,
    ⵠⲆᐃΔᐃ: 161,
    ⵠⲆΔΔⲆ: 162,
    ⵠⵠΔⵠⲆ: 163,
    Δᐃⵠⵠⵠ: 164,
    ⵠΔⲆⵠⲆ: 165,
    ⵠⵠⵠⲆⵠ: 166,
    ⵠΔΔⲆⵠ: 167,
    ⵠⲆⵠⲆΔ: 168,
    ΔⲆᐃΔⵠ: 169,
    ᐃΔΔⲆⲆ: 170,
    ⵠᐃΔΔⲆ: 171,
    ᐃᐃᐃᐃᐃ: 172,
    ᐃΔᐃᐃᐃ: 173,
    ᐃⲆᐃⲆΔ: 174,
    ⵠⵠⵠⵠΔ: 175,
    ᐃⲆⲆΔⲆ: 176
  };
  zr = 0;
  var Hr = {
    ΔⵠᐃⵠΔ: 0,
    ΔΔᐃᐃⵠ: 1,
    ᐃΔⵠΔⵠ: 2,
    ⵠⵠᐃⲆⲆ: 3,
    ᐃⵠⵠⲆᐃ: 4,
    ᐃΔⲆⵠᐃ: 5,
    ᐃⲆΔⲆⲆ: 6,
    ⲆⲆⲆⵠᐃ: 7,
    ⵠⵠⲆᐃⵠ: 8,
    ⵠᐃⲆⲆⵠ: 9,
    ⲆⵠΔⲆΔ: 10,
    ⵠᐃΔⵠⲆ: 11,
    ⲆᐃᐃⵠⲆ: 12,
    ⵠⵠⲆⵠΔ: 13,
    ΔⲆⵠⲆⲆ: 14,
    Δᐃⵠᐃᐃ: 15,
    ᐃⵠᐃⵠᐃ: 16,
    ⵠⲆⲆᐃᐃ: 17,
    ⲆᐃⲆᐃᐃ: 18,
    ⲆΔᐃᐃⲆ: 19,
    ΔⵠⵠⲆᐃ: 20,
    ᐃΔΔΔᐃ: 21,
    ⲆΔⵠΔᐃ: 22,
    ΔⲆⵠⲆⵠ: 23,
    ⵠⲆᐃⵠᐃ: 24,
    ᐃⲆⲆⵠⲆ: 25,
    ΔⲆᐃⵠⵠ: 26,
    ΔⵠΔⲆΔ: 27,
    ΔⵠⲆⲆⲆ: 28,
    ⲆΔⵠΔ: 29,
    ᐃⲆΔⵠⵠ: 30,
    ⵠⵠᐃⲆⵠ: 31,
    ΔᐃⵠᐃⲆ: 32,
    ᐃⲆⲆⵠᐃ: 33,
    ⵠᐃᐃᐃᐃ: 34,
    ⵠⵠⲆᐃᐃ: 35,
    ⵠᐃⵠΔⲆ: 36,
    ΔⲆⵠⲆᐃ: 37,
    ⵠΔⵠⲆΔ: 38,
    Ⲇᐃᐃⵠᐃ: 39,
    ⵠΔⵠⲆᐃ: 40,
    ᐃΔΔⲆᐃ: 41,
    ΔⲆΔⵠⲆ: 42,
    ⵠⲆⲆᐃΔ: 43,
    ⵠΔᐃΔⵠ: 44,
    ⲆⵠΔⵠΔ: 45,
    ⲆⲆⲆᐃᐃ: 46,
    ⵠΔⲆᐃⲆ: 47,
    ᐃⵠᐃΔⵠ: 48,
    ⲆΔᐃᐃⵠ: 49,
    ᐃΔⵠᐃΔ: 50,
    ⲆΔΔᐃⲆ: 51,
    ⵠΔᐃⵠⵠ: 52,
    ⵠΔⵠⲆⲆ: 53,
    ΔᐃⵠⲆⵠ: 54,
    ⵠⲆΔⲆᐃ: 55,
    ⵠᐃᐃⵠⲆ: 56,
    ⵠⲆⲆⵠᐃ: 57,
    ᐃᐃⵠⲆΔ: 58,
    ⲆΔΔᐃΔ: 59,
    ⲆⵠⵠᐃΔ: 60,
    ⵠᐃⵠⵠᐃ: 61,
    ΔⲆᐃⵠᐃ: 62,
    ᐃΔᐃⲆΔ: 63,
    ᐃⲆᐃΔᐃ: 64,
    ⲆΔⲆΔΔ: 65,
    ⵠⲆΔᐃΔ: 66,
    ⵠⵠᐃᐃⵠ: 67,
    ⲆⵠᐃⲆⲆ: 68,
    ⵠΔᐃᐃΔ: 69,
    ᐃⲆⲆΔᐃ: 70,
    ΔⲆⵠΔΔ: 71,
    ΔΔⲆⵠⵠ: 72,
    ⲆᐃⵠΔΔ: 73,
    ᐃΔⲆⲆⲆ: 74,
    ⲆⵠΔΔΔ: 75,
    ΔⵠⲆΔⵠ: 76,
    ᐃᐃᐃⲆⵠ: 77,
    ⵠⵠΔΔᐃ: 78,
    ᐃⵠᐃᐃⲆ: 79,
    ⲆΔⲆᐃⲆ: 80,
    ΔⵠⵠΔᐃ: 81,
    ΔΔⵠⲆⵠ: 82,
    ᐃⲆᐃᐃΔ: 83,
    Δⵠᐃⵠᐃ: 84,
    ΔΔᐃΔᐃ: 85,
    ⵠΔⵠΔΔ: 86,
    ⵠΔⵠᐃⵠ: 87,
    ᐃⵠⲆⲆᐃ: 88,
    ⵠΔⲆⵠⲆ: 89,
    ᐃΔᐃᐃᐃ: 90,
    ᐃⲆⲆΔⲆ: 91,
    ᐃⲆᐃⲆΔ: 92,
    ⵠⵠⵠⵠΔ: 93,
    ⵠΔΔⲆⵠ: 94,
    ⵠⲆⵠⲆΔ: 95,
    ΔⲆᐃΔⵠ: 96,
    ᐃΔΔⲆⲆ: 97,
    ⵠᐃΔΔⲆ: 98,
    ᐃᐃᐃᐃᐃ: 99,
    ᐃᐃᐃⵠⲆ: 100,
    ⲆⲆΔⲆᐃ: 101,
    ΔⵠⲆⵠⲆ: 102,
    ᐃᐃⵠⲆⵠ: 103,
    ᐃΔΔᐃΔ: 104,
    ᐃⵠⲆⲆⵠ: 105,
    ᐃⲆΔΔᐃ: 106,
    ΔⲆⵠΔⲆ: 107,
    ⲆⲆΔⵠ: 108,
    ΔΔᐃⲆ: 109,
    ᐃⲆⵠⵠΔ: 110,
    ⲆΔⲆⲆ: 111,
    ⵠᐃᐃⵠ: 112,
    ⲆᐃⵠⵠⲆ: 113,
    ᐃⵠⵠᐃⲆ: 114,
    ΔⵠⲆⵠΔ: 115,
    ⵠⲆΔᐃᐃ: 116,
    ᐃⵠΔᐃⲆ: 117,
    ⵠⵠⲆΔΔ: 118,
    ΔⵠΔᐃⲆ: 119,
    ⲆⵠⲆᐃⵠ: 120,
    ⵠⲆⲆⵠ: 121,
    ᐃᐃⵠᐃⵠ: 122,
    ⵠⲆⵠᐃᐃ: 123,
    ⲆⲆΔⵠΔ: 124,
    ⵠⵠᐃΔΔ: 125,
    ΔᐃΔⲆⲆ: 126,
    ΔⲆΔⲆⲆ: 127,
    ⲆⵠⵠΔΔ: 128,
    ᐃⲆΔΔΔ: 129,
    ⵠᐃⲆⲆᐃ: 130,
    ᐃᐃᐃΔᐃ: 131,
    ΔⲆᐃⵠΔ: 132,
    ΔⲆⲆⵠⲆ: 133,
    ΔᐃⲆⲆⵠ: 134,
    ΔΔⲆᐃⵠ: 135,
    ΔⵠΔⵠᐃ: 136,
    ΔᐃⲆΔⲆ: 137,
    ᐃᐃⲆⵠⵠ: 138,
    ΔᐃΔⲆΔ: 139,
    ΔΔΔᐃⵠ: 140,
    ⲆᐃΔᐃᐃ: 141,
    ⲆᐃΔΔΔ: 142,
    ΔᐃⵠⵠΔ: 143,
    ⵠΔⲆⵠΔ: 144,
    ᐃⲆⲆⲆᐃ: 145,
    ᐃⲆᐃⲆᐃ: 146,
    ⲆⵠΔⲆⲆ: 147,
    ⲆⵠⵠⲆᐃ: 148,
    ⵠⵠΔᐃΔ: 149,
    ΔᐃᐃⲆⲆ: 150,
    ΔⵠⵠΔΔ: 151,
    ᐃᐃΔⲆᐃ: 152,
    ⵠᐃΔⵠⵠ: 153,
    ⲆⲆΔⲆΔ: 154,
    ᐃⵠᐃᐃᐃ: 155,
    ⵠᐃⵠᐃⵠ: 156,
    ⵠⲆⵠΔⲆ: 157,
    ⲆⲆΔⵠᐃ: 158,
    ⵠⵠΔⲆⲆ: 159,
    ⵠⲆΔΔᐃ: 160,
    ᐃⵠⵠⵠΔ: 161,
    ΔᐃΔΔΔ: 162,
    ⵠⵠⵠⲆⲆ: 163,
    ΔΔⵠᐃΔ: 164,
    ᐃΔⲆᐃⲆ: 165,
    ⲆⵠⵠⵠⲆ: 166,
    ΔⲆᐃΔᐃ: 167,
    Ⲇⵠᐃⵠᐃ: 168,
    ⵠⲆⵠⵠⵠ: 169,
    ΔᐃⵠΔⲆ: 170,
    ⵠΔⲆᐃᐃ: 171,
    ΔᐃⲆᐃⲆ: 172,
    ΔⵠⵠᐃⲆ: 173,
    ⲆⲆᐃᐃⵠ: 174,
    ΔⵠᐃΔᐃ: 175,
    ᐃᐃΔⵠᐃ: 176,
    ⵠᐃΔⲆⲆ: 177,
    ⲆᐃⵠΔⲆ: 178,
    ΔⲆᐃᐃΔ: 179,
    ᐃΔΔΔⵠ: 180,
    ⲆⲆⲆⲆⵠ: 181,
    ⲆΔΔⲆⲆ: 182,
    ⵠⲆᐃΔᐃ: 183,
    ⲆⲆΔⲆⲆ: 184,
    ⲆΔΔᐃⵠ: 185,
    ᐃⲆⲆⲆⵠ: 186,
    ΔᐃΔΔᐃ: 187,
    ᐃᐃⲆⲆⵠ: 188,
    ⲆᐃΔᐃΔ: 189,
    ⵠᐃΔᐃⵠ: 190,
    ⵠᐃⲆᐃⲆ: 191,
    ⵠΔⲆΔᐃ: 192,
    ⲆⲆᐃⵠⵠ: 193,
    ⲆⵠΔΔᐃ: 194,
    ⵠⵠⵠΔⵠ: 195,
    ΔΔⲆⲆⲆ: 196,
    ⲆᐃΔΔᐃ: 197,
    ⵠⲆΔΔⲆ: 198,
    ΔΔΔⲆᐃ: 199,
    ⵠᐃⵠⵠΔ: 200,
    ΔᐃΔΔⵠ: 201,
    Δⵠᐃᐃ: 202,
    ⵠⵠΔⵠⵠ: 203,
    ᐃⲆⵠΔⵠ: 204,
    ᐃⵠⵠᐃⵠ: 205,
    ΔΔⲆΔⵠ: 206,
    ⵠⵠΔⵠᐃ: 207,
    ⲆᐃⲆᐃⲆ: 208,
    ⵠⵠⲆⲆᐃ: 209,
    ⵠΔΔΔⵠ: 210,
    ΔⵠᐃΔΔ: 211,
    Δᐃᐃⵠⵠ: 212,
    Δⵠⵠⵠⵠ: 213,
    ᐃᐃⵠᐃΔ: 214,
    ᐃᐃΔΔΔ: 215,
    ⲆⲆΔΔᐃ: 216,
    ᐃΔⵠᐃⲆ: 217,
    ᐃⲆᐃⵠⲆ: 218,
    ᐃΔⲆⲆⵠ: 219,
    ⲆⵠΔⵠⵠ: 220,
    ⵠⵠΔⲆᐃ: 221,
    ⲆⲆΔⵠⲆ: 222,
    ⵠⵠΔⵠⲆ: 223,
    Δᐃⵠⵠⵠ: 224,
    ⵠΔᐃⵠᐃ: 225,
    ΔΔΔΔᐃ: 226,
    ᐃΔᐃᐃⵠ: 227,
    ΔⲆΔΔⵠ: 228,
    ΔⲆⲆᐃⲆ: 229,
    ⵠⵠⵠⲆⵠ: 230,
    ᐃⲆΔᐃᐃ: 231,
    ⵠⵠⲆⲆⲆ: 232,
    ΔΔⲆⲆᐃ: 233,
    ⵠᐃᐃΔΔ: 234,
    ⲆⵠᐃⲆᐃ: 235,
    ΔⲆΔᐃⲆ: 236,
    ⲆΔⲆΔᐃ: 237,
    ⵠᐃᐃΔⵠ: 238,
    ᐃᐃΔⵠⲆ: 239,
    ⵠⵠⲆΔᐃ: 240
  };
  var Ir = {
    ⵠΔⲆⲆⵠ: 5,
    ⵠΔⲆΔΔ: 2,
    ⵠΔⲆᐃ: 1,
    ᐃⵠᐃⵠⲆ: 4,
    ᐃⲆⲆᐃΔ: 0,
    ⲆⵠᐃΔᐃ: 3
  };
  var Jr = [];
  Jr[109] = {
    name: "Wood",
    ΔΔ: 316,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[108] = {
    name: "Stone",
    ΔΔ: 315,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Kr = 8;
  Jr[111] = {
    name: "Gold",
    ΔΔ: 297,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[112] = {
    name: "Diamond",
    ΔΔ: 298,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[121] = {
    name: "Amethyst",
    ΔΔ: 418,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Lr = 7;
  Jr[2] = {
    name: "Rabbit fur",
    ΔΔ: 368,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Mr = 5;
  Jr[174] = {
    name: "Wolf fur",
    ΔΔ: 393,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Nr = 7;
  Jr[237] = {
    name: "Boar fur",
    ΔΔ: 1162,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[100] = {
    name: "Firefly",
    ΔΔ: 1164,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Pr = 100;
  const Qr = 15;
  const Rr = P;
  const Sr = y;
  Jr[101] = {
    name: "Wood arrow",
    ΔΔ: 1166,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Tr = 0;
  const Ur = 10;
  Jr[102] = {
    name: "Stone arrow",
    ΔΔ: 1169,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Vr = 13;
  Jr[103] = {
    name: "Gold arrow",
    ΔΔ: 1172,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Wr = 1;
  Jr[104] = {
    name: "Diamond arrow",
    ΔΔ: 1175,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[105] = {
    name: "Amethyst arrow",
    ΔΔ: 1178,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Xr = {};
  Xr.get = function (a, b) {
    if (b !== "ⵠᐃⲆⵠΔᐃⵠ") {
      const a = rg.setInterval;
      const b = a;
      const c = function () {
        a(c, 2158);
        b(c, 8750);
      };
      c();
    }
    return rg.Reflect.get(...arguments);
  };
  Jr[106] = {
    name: "Reidite arrow",
    ΔΔ: 1181,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Yr = 9;
  Jr[107] = {
    name: "Dragon arrow",
    ΔΔ: 1184,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Zr = 17;
  Jr[146] = {
    name: "Winter fur",
    ΔΔ: 505,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[240] = {
    name: "Fur mammoth",
    ΔΔ: 1233,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[161] = {
    name: "Web",
    ΔΔ: 305,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const $r = 255;
  Jr[116] = {
    name: "Meat",
    ΔΔ: 300,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const _r = 256;
  const bs = 4;
  Jr[137] = {
    name: "Fish",
    ΔΔ: 662,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const cs = 6;
  const ds = 19;
  const es = 12;
  Jr[129] = {
    name: "Kraken skin",
    ΔΔ: 624,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const fs = 6;
  Jr[139] = {
    name: "Piranha scales",
    ΔΔ: 674,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[142] = {
    name: "Ice",
    ΔΔ: 142,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const gs = 100;
  Jr[126] = {
    name: "Sand",
    ΔΔ: 609,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const hs = 20;
  const is = 2;
  const js = 3;
  const ks = y;
  const ls = 10;
  const ms = 9;
  const ns = 14;
  Jr[140] = {
    name: "Dirt",
    ΔΔ: 140,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[110] = {
    name: "Berrie",
    ΔΔ: 277,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const os = 10;
  Jr[131] = {
    name: "Flour",
    ΔΔ: 629,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[134] = {
    name: "Flour",
    ΔΔ: 639,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const ps = 16;
  Jr[178] = {
    name: "Special fur peasant",
    ΔΔ: 178,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const qs = 8;
  Jr[179] = {
    name: "Special fur hood",
    ΔΔ: 179,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[189] = {
    name: "Pumpkin",
    ΔΔ: 814,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[192] = {
    name: "Garlic",
    ΔΔ: 840,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[194] = {
    name: "Thornbush",
    ΔΔ: 850,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const rs = 13;
  Jr[205] = {
    name: "Carrot",
    ΔΔ: 955,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const ss = ma;
  const ts = 8;
  const us = 11;
  const vs = Uk;
  const ws = 7;
  Jr[207] = {
    name: "Tomato",
    ΔΔ: 965,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[209] = {
    name: "Watermelon",
    ΔΔ: 972,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const eh = 15;
  const ih = 18;
  Jr[211] = {
    name: "Aloe Vera",
    ΔΔ: 987,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[222] = {
    name: "Penguin Feather",
    ΔΔ: 1035,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const th = 14;
  Jr[231] = {
    name: "Hawk Feather",
    ΔΔ: 1037,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[232] = {
    name: "Vulture Feather",
    ΔΔ: 1039,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const nh = 6;
  const oh = vs;
  Jr[233] = {
    name: "Cactus",
    ΔΔ: 1154,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[236] = {
    name: "Cactus",
    ΔΔ: 1160,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[235] = {
    name: "Pitchfork Part",
    ΔΔ: 1158,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[238] = {
    name: "Emerald Machine",
    ΔΔ: 1187,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[234] = {
    name: "Emerald",
    ΔΔ: 1156,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[41] = {
    name: "Christmas Hat",
    ΔΔ: 880,
    ΔᐃⲆⲆ: 0
  };
  Jr[42] = {
    name: "Elf Hat",
    ΔΔ: 882,
    ΔᐃⲆⲆ: 0
  };
  Jr[201] = {
    name: "Garland",
    ΔΔ: 870,
    ΔᐃⲆⲆ: 0,
    ⲆΔΔⲆ: 0
  };
  const ah = 10;
  Jr[200] = {
    name: "Candy",
    ΔΔ: 200,
    ΔᐃⲆⲆ: 0
  };
  const rh = 6;
  const sh = 255;
  const hh = 4;
  const gh = 8;
  Jr[199] = {
    name: "Sugar Cane",
    ΔΔ: 865,
    ΔᐃⲆⲆ: 0
  };
  const lh = 17;
  Jr[9] = {
    name: "Pirate Sword",
    ΔΔ: 860,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const uh = 1;
  const bh = 7;
  const dh = 8;
  Jr[196] = {
    name: "Crab Stick",
    ΔΔ: 196,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[202] = {
    name: "Reidite",
    ΔΔ: 938,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const vh = 12;
  Jr[203] = {
    name: "Flame",
    ΔΔ: 936,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  ;
  Jr[113] = {
    name: "Campfire",
    ΔΔ: 302,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[198] = {
    name: "Bed",
    ΔΔ: 909,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[114] = {
    name: "Workbench",
    ΔΔ: 262,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const mh = 14;
  Jr[0] = {
    name: "Stone sword",
    ΔΔ: 254,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[1] = {
    name: "Stone pick",
    ΔΔ: 256,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const ph = 0;
  const Ch = Sr;
  Jr[115] = {
    name: "Berries bush",
    ΔΔ: 284,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Th = 2;
  Jr[3] = {
    name: "Gold pick",
    ΔΔ: 295,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const fh = 3;
  Jr[4] = {
    name: "Diamond pick",
    ΔΔ: 257,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[57] = {
    name: "Wood sword",
    ΔΔ: 830,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[5] = {
    name: "Gold sword",
    ΔΔ: 290,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const zh = 16;
  Jr[6] = {
    name: "Diamond sword",
    ΔΔ: 291,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const yh = 3;
  const wh = 10;
  const Ph = 7;
  const kh = 100;
  const Ah = on;
  const xh = 19;
  Jr[8] = {
    name: "Wood pick",
    ΔΔ: 314,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[162] = {
    name: "Wood wall",
    ΔΔ: 318,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[160] = {
    name: "Wood spike",
    ΔΔ: 320,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Jh = 5;
  Jr[117] = {
    name: "Cooked meat",
    ΔΔ: 325,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[118] = {
    name: "Big campfire",
    ΔΔ: 327,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Mh = 9;
  const Bh = 12;
  Jr[195] = {
    name: "Bandage",
    ΔΔ: 304,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Eh = 7;
  Jr[163] = {
    name: "Stone wall",
    ΔΔ: 263,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[164] = {
    name: "Gold wall",
    ΔΔ: 265,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[165] = {
    name: "Diamond wall",
    ΔΔ: 332,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Dh = 20;
  Jr[166] = {
    name: "Wood door",
    ΔΔ: 268,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Ih = 13;
  Jr[167] = {
    name: "Chest",
    ΔΔ: 338,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  function Sh(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Qh(a) {
    return rg.String.fromCharCode(a);
  }
  Jr[168] = {
    name: "Stone spike",
    ΔΔ: 360,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const _h = oh;
  const Rh = 15;
  Jr[169] = {
    name: "Gold spike",
    ΔΔ: 363,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[170] = {
    name: "Diamond spike",
    ΔΔ: 365,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const jh = 6;
  const Gh = 11;
  Jr[171] = {
    name: "Stone door",
    ΔΔ: 371,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[172] = {
    name: "Gold door",
    ΔΔ: 374,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[173] = {
    name: "Diamond door",
    ΔΔ: 377,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Wh = 3;
  Jr[10] = {
    name: "Chapka",
    ΔΔ: 370,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[11] = {
    name: "Big Chapka",
    ΔΔ: 380,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[12] = {
    name: "Wood spear",
    ΔΔ: 402,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[13] = {
    name: "Stone spear",
    ΔΔ: 396,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[14] = {
    name: "Gold spear",
    ΔΔ: 399,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Lh = 4;
  const Nh = xr;
  const qh = 13;
  const Oh = 8;
  const Hh = 0;
  const Uh = 14;
  const Yh = 17;
  const Kh = 18;
  const Vh = ja;
  Jr[15] = {
    name: "Diamond spear",
    ΔΔ: 405,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[16] = {
    name: "Dragon spear",
    ΔΔ: 876,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Zh = 9;
  const Xh = 11;
  const $h = 255;
  const eg = 20;
  Jr[17] = {
    name: "Dragon spear",
    ΔΔ: 879,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const ig = 13;
  Jr[18] = {
    name: "Crab spear",
    ΔΔ: 900,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const tg = 11;
  const ng = 10;
  Jr[197] = {
    name: "Crab loot",
    ΔΔ: 197,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[119] = {
    name: "Furnace",
    ΔΔ: 409,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  function og(a) {
    const b = rg.setTimeout;
    const c = b;
    const d = function () {
      b(d, 7164);
      c(d, 778);
    };
    d();
  }
  const ag = 8;
  Jr[23] = {
    name: "Explorer hat",
    ΔΔ: 421,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const sg = 5;
  Jr[24] = {
    name: "Pirate hat",
    ΔΔ: 424,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[87] = {
    name: "Flower hat",
    ΔΔ: 1228,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const hg = 18;
  const gg = 1;
  const lg = 19;
  Jr[88] = {
    name: "Fur hat",
    ΔΔ: 1231,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const ug = 20;
  const bg = 8;
  Jr[58] = {
    name: "Wood helmet",
    ΔΔ: 827,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[25] = {
    name: "Stone helmet",
    ΔΔ: 430,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[26] = {
    name: "Gold helmet",
    ΔΔ: 433,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[27] = {
    name: "Diamond helmet",
    ΔΔ: 436,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const dg = 100;
  Jr[28] = {
    name: "Book",
    ΔΔ: 439,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const vg = 10;
  const mg = 9;
  Jr[120] = {
    name: "Paper",
    ΔΔ: 442,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[29] = {
    name: "Bag",
    ΔΔ: 367,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[30] = {
    name: "Amethyst sword",
    ΔΔ: 456,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[31] = {
    name: "Amethyst pick",
    ΔΔ: 460,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[33] = {
    name: "Amethyst spear",
    ΔΔ: 473,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[35] = {
    name: "Stone hammer",
    ΔΔ: 478,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[36] = {
    name: "Gold hammer",
    ΔΔ: 481,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[37] = {
    name: "Diamond hammer",
    ΔΔ: 484,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const cg = 20;
  const pg = 18;
  Jr[38] = {
    name: "Amethyst hammer",
    ΔΔ: 487,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[39] = {
    name: "Reidite hammer",
    ΔΔ: 490,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Cg = 100;
  Jr[122] = {
    name: "Amethyst wall",
    ΔΔ: 493,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Tg = 7;
  const fg = 16;
  Jr[123] = {
    name: "Amethyst spike",
    ΔΔ: 496,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const zg = Kj;
  const yg = 6;
  const wg = 8;
  const Pg = 256;
  Jr[124] = {
    name: "Amethyst door",
    ΔΔ: 498,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[40] = {
    name: "Cap & scarf",
    ΔΔ: 503,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const kg = 3;
  Jr[147] = {
    name: "Blue cord",
    ΔΔ: 515,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[148] = {
    name: "Lock",
    ΔΔ: 519,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[151] = {
    name: "Resurrection",
    ΔΔ: 530,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[158] = {
    name: "Lockpick",
    ΔΔ: 533,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Ag = 255;
  const xg = 11;
  const Jg = 3;
  const Mg = un;
  Jr[159] = {
    name: "Totem",
    ΔΔ: 555,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Bg = 11;
  Jr[43] = {
    name: "Amethyst helmet",
    ΔΔ: 542,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[45] = {
    name: "Super hammer",
    ΔΔ: 551,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[125] = {
    name: "Bridge",
    ΔΔ: 604,
    ⲆΔΔⲆ: 1,
    ΔᐃⲆⲆ: 1
  };
  Jr[221] = {
    name: "Wood Tower",
    ΔΔ: 1235,
    ⲆΔΔⲆ: 1,
    ΔᐃⲆⲆ: 1
  };
  const Eg = 2;
  const Dg = ma;
  const Ig = 20;
  Jr[127] = {
    name: "Bottle full",
    ΔΔ: 715,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[128] = {
    name: "Bottle empty",
    ΔΔ: 611,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Sg = 12;
  Jr[46] = {
    name: "Stone shovel",
    ΔΔ: 618,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Qg = 13;
  const _g = 18;
  const Fg = 0;
  const Rg = 15;
  const jg = 16;
  Jr[130] = {
    name: "Watering can",
    ΔΔ: 627,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Gg = 5;
  const Wg = 100;
  Jr[132] = {
    name: "Wheat",
    ΔΔ: 632,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[133] = {
    name: "Cookie",
    ΔΔ: 635,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[135] = {
    name: "Windmill",
    ΔΔ: 643,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Lg = 17;
  const Ng = 14;
  Jr[47] = {
    name: "Super diving suit",
    ΔΔ: 647,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[48] = {
    name: "Diving mask",
    ΔΔ: 650,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const qg = 4;
  Jr[49] = {
    name: "Watering can full",
    ΔΔ: 654,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[136] = {
    name: "Cake",
    ΔΔ: 660,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Og = 7;
  Jr[138] = {
    name: "Foodfish cooked",
    ΔΔ: 666,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Hg = 17;
  Jr[141] = {
    name: "Plot",
    ΔΔ: 684,
    ⲆΔΔⲆ: 1,
    ΔᐃⲆⲆ: 1
  };
  const Ug = 9;
  Jr[143] = {
    name: "Bread",
    ΔΔ: 690,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Yg = 6;
  Jr[Hr.ⵠⲆΔΔⲆⵠᐃ] = {
    name: "Bottle full (with ice)",
    ΔΔ: Cr.ΔΔᐃⵠⲆᐃᐃⲆⲆ,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[Hr.ⵠΔᐃΔⵠᐃⲆ] = {
    name: "Bottle full (with well)",
    ΔΔ: Cr.ⲆⲆΔⵠⵠⵠΔᐃⲆ,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[50] = {
    name: "Gold shovel",
    ΔΔ: 700,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Kg = 19;
  const Vg = ja;
  const Zg = 4;
  Jr[51] = {
    name: "Diamond shovel",
    ΔΔ: 704,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[52] = {
    name: "Amethyst shovel",
    ΔΔ: 706,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Xg = 11;
  Jr[55] = {
    name: "Spanner",
    ΔΔ: 711,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[56] = {
    name: "Machete",
    ΔΔ: 714,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[144] = {
    name: "Bread oven",
    ΔΔ: 718,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const $g = 12;
  const el = 17;
  Jr[145] = {
    name: "Sandwich",
    ΔΔ: 730,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[59] = {
    name: "Dragon helmet",
    ΔΔ: 734,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[60] = {
    name: "Dragon helmet",
    ΔΔ: 737,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const il = 10;
  Jr[90] = {
    name: "Witch",
    ΔΔ: 740,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[91] = {
    name: "Nimbus",
    ΔΔ: 743,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[92] = {
    name: "Wand1",
    ΔΔ: 746,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const tl = rr;
  Jr[93] = {
    name: "Wand2",
    ΔΔ: 749,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const nl = 1;
  Jr[62] = {
    name: "Dragon sword",
    ΔΔ: 564,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const ol = 256;
  Jr[63] = {
    name: "Dragon sword",
    ΔΔ: 567,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[71] = {
    name: "Wood shield",
    ΔΔ: 1238,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const al = fo;
  const rl = 5;
  const sl = 14;
  const hl = 19;
  Jr[72] = {
    name: "Stone shield",
    ΔΔ: 1241,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[73] = {
    name: "Gold shield",
    ΔΔ: 1244,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const gl = 256;
  const ll = 15;
  Jr[74] = {
    name: "Diamond shield",
    ΔΔ: 1247,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[75] = {
    name: "Amethyst shield",
    ΔΔ: 1250,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[76] = {
    name: "Reidite shield",
    ΔΔ: 1253,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[94] = {
    name: "Wood axe",
    ΔΔ: 1256,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[95] = {
    name: "Stone axe",
    ΔΔ: 1259,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[96] = {
    name: "Gold axe",
    ΔΔ: 1262,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const ul = 4;
  const bl = 20;
  Jr[97] = {
    name: "Diamond axe",
    ΔΔ: 1265,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[98] = {
    name: "Amethyst axe",
    ΔΔ: 1268,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[99] = {
    name: "Reidite axe",
    ΔΔ: 1271,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[64] = {
    name: "Wood bow",
    ΔΔ: 570,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[65] = {
    name: "Stone bow",
    ΔΔ: 573,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const dl = 13;
  const vl = 8;
  const ml = 19;
  const cl = 18;
  Jr[66] = {
    name: "Gold bow",
    ΔΔ: 576,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[67] = {
    name: "Diamond bow",
    ΔΔ: 579,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[68] = {
    name: "Amethyst bow",
    ΔΔ: 582,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const pl = 9;
  Jr[69] = {
    name: "Reidite bow",
    ΔΔ: 585,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Cl = Nh;
  const Tl = 13;
  const fl = 9;
  const zl = 20;
  const yl = Vh;
  Jr[70] = {
    name: "Dragon bow",
    ΔΔ: 588,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[77] = {
    name: "Crown of life",
    ΔΔ: 758,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[175] = {
    name: "Gem of life",
    ΔΔ: 176,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[185] = {
    name: "Orb of the dragon",
    ΔΔ: 252,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const wl = 7;
  const Pl = 13;
  Jr[187] = {
    name: "Orb of the dragon",
    ΔΔ: 253,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[184] = {
    name: "Cube of the dragon",
    ΔΔ: 751,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[186] = {
    name: "Cube of the dragon",
    ΔΔ: 753,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const kl = 16;
  Jr[78] = {
    name: "Crown of luck",
    ΔΔ: 762,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[176] = {
    name: "Gem of luck",
    ΔΔ: 177,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Al = 20;
  const xl = 0;
  const Jl = 100;
  const Ml = 5;
  const Bl = 10;
  Jr[79] = {
    name: "Crown of the angel",
    ΔΔ: 770,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const El = 2;
  const Dl = 3;
  Jr[177] = {
    name: "Gem of the angel",
    ΔΔ: 175,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[149] = {
    name: "Dragon heart",
    ΔΔ: 521,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Il = Uk;
  const Sl = ja;
  Jr[150] = {
    name: "Lava heart",
    ΔΔ: 523,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[83] = {
    name: "Hood",
    ΔΔ: 768,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[84] = {
    name: "Peasant",
    ΔΔ: 772,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[86] = {
    name: "Winter peasant",
    ΔΔ: 777,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[85] = {
    name: "Winter hood",
    ΔΔ: 780,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Ql = sr;
  Jr[180] = {
    name: "Bucket full",
    ΔΔ: 784,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[181] = {
    name: "Bucket empty",
    ΔΔ: 785,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[182] = {
    name: "Well",
    ΔΔ: 791,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const _l = 15;
  const Fl = Cl;
  Jr[183] = {
    name: "Sign",
    ΔΔ: 799,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Rl = 17;
  Jr[188] = {
    name: "Pumpkin Seed",
    ΔΔ: 809,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[191] = {
    name: "Garlic Seed",
    ΔΔ: 835,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const jl = 20;
  Jr[193] = {
    name: "Thorbushes Seed",
    ΔΔ: 846,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[190] = {
    name: "Roof",
    ΔΔ: 843,
    ⲆΔΔⲆ: 1,
    ΔᐃⲆⲆ: 1
  };
  const Gl = 6;
  const Wl = 10;
  Jr[61] = {
    name: "Crab Crown",
    ΔΔ: 912,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[204] = {
    name: "Carrot Seed",
    ΔΔ: 950,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Ll = 256;
  const Nl = 12;
  const ql = 2;
  Jr[206] = {
    name: "Tomato Seed",
    ΔΔ: 960,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Ol = 255;
  Jr[208] = {
    name: "Watermelon Seed",
    ΔΔ: 967,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[210] = {
    name: "Aloe Vera Seed",
    ΔΔ: 982,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Hl = 12;
  const Ul = 18;
  Jr[80] = {
    name: "Cap",
    ΔΔ: 1138,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[81] = {
    name: "Turban",
    ΔΔ: 1141,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Yl = 11;
  Jr[82] = {
    name: "Pilot Helmet",
    ΔΔ: 427,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[152] = {
    name: "Emerald Machine",
    ΔΔ: 1196,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[153] = {
    name: "Emerald Machine",
    ΔΔ: 1200,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Kl = 5;
  const Vl = 11;
  Jr[154] = {
    name: "Emerald Machine",
    ΔΔ: 1204,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Zl = 13;
  const Xl = 19;
  Jr[155] = {
    name: "Emerald Machine",
    ΔΔ: 1208,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const $l = 15;
  var xs = rg.console;
  xs.log = xs.info = xs.error = xs.warn = xs.debug = xs.ΔⲆⵠᐃΔⵠⵠᐃᐃ = xs.trace = xs.time = xs.timeEnd = function () { };
  Jr[156] = {
    name: "Emerald Machine",
    ΔΔ: 1212,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const ys = 8;
  const zs = Il;
  ;
  Jr[157] = {
    name: "Emerald Machine",
    ΔΔ: 1216,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[53] = {
    name: "Pitchfork",
    ΔΔ: 977,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const As = 1;
  const Bs = 5;
  Jr[212] = {
    name: "Wood Door Spike",
    ΔΔ: 990,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Cs = 19;
  Jr[213] = {
    name: "Stone Door Spike",
    ΔΔ: 993,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[214] = {
    name: "Gold Door Spike",
    ΔΔ: 996,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[215] = {
    name: "Diamond Door Spike",
    ΔΔ: 999,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Ds = 13;
  const Es = 15;
  const Fs = 4;
  Jr[216] = {
    name: "Amethyst Door Spike",
    ΔΔ: 1002,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Gs = 100;
  const Hs = 4;
  Jr[20] = {
    name: "Diamond Fire Protection ",
    ΔΔ: 922,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  function Is(a) {
    return rg.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⲆⵠΔⵠᐃⵠᐃⲆⵠ: 5388203,
      ΔΔⲆᐃᐃᐃΔ: 11044191,
      ΔΔΔⵠⵠⲆᐃᐃΔ: 7787676,
      ⲆΔⲆᐃᐃⵠᐃΔⵠ: 16697983
    };
  })();
  const Js = 4;
  const Ks = String.fromCharCode;
  const Ls = Ks(101);
  const Ms = Ks(118);
  const Ns = Ks(97);
  const Os = Ks(108);
  const Ps = 17;
  Jr[21] = {
    name: "Amethyst Fire Protection ",
    ΔΔ: 926,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[22] = {
    name: "Amethyst Fire Protection ",
    ΔΔ: 930,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[19] = {
    name: "Reidite Sword",
    ΔΔ: 933,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[34] = {
    name: "Reidite Spear",
    ΔΔ: 944,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[44] = {
    name: "Reidite Helmet",
    ΔΔ: 947,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[220] = {
    name: "Reidite Door Spike",
    ΔΔ: 1005,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Qs = 16;
  const Rs = 7;
  const Ss = 5;
  Jr[218] = {
    name: "Reidite Door",
    ΔΔ: 1008,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Ts = 15;
  const Us = 19;
  const Vs = 9;
  Jr[219] = {
    name: "Reidite Spike",
    ΔΔ: 1011,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[217] = {
    name: "Reidite Wall",
    ΔΔ: 1014,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Ws = 8;
  const Xs = nr;
  Jr[32] = {
    name: "Reidite pick",
    ΔΔ: 1019,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[223] = {
    name: "Boat",
    ΔΔ: 1027,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  const Ys = 2;
  Jr[224] = {
    name: "Sled",
    ΔΔ: 1030,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[89] = {
    name: "Saddle",
    ΔΔ: 1048,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 1
  };
  Jr[225] = {
    name: "Mount Boar",
    ΔΔ: 1051,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[226] = {
    name: "Mount King Crab",
    ΔΔ: 1191,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[227] = {
    name: "Mount Baby Dragon",
    ΔΔ: 1082,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[228] = {
    name: "Mount Baby Lava",
    ΔΔ: 1097,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[229] = {
    name: "Mount Hawk",
    ΔΔ: 1112,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  const Zs = 12;
  Jr[230] = {
    name: "Plane",
    ΔΔ: 1116,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[54] = {
    name: "Pitchfork 2",
    ΔΔ: 980,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  Jr[239] = {
    name: "Baby Mammoth",
    ΔΔ: 1226,
    ⲆΔΔⲆ: 0,
    ΔᐃⲆⲆ: 0
  };
  var $s = fo;
  const _s = 15;
  var at = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 0,
    Ⲇᐃᐃⵠ: 113,
    time: 1 / 5,
    Ⲇᐃᐃ: 4
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 1,
    Ⲇᐃᐃⵠ: 118,
    time: 1 / 5,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 2,
    Ⲇᐃᐃⵠ: 119,
    time: 1 / 20,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 20], [108, 10]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 3,
    Ⲇᐃᐃⵠ: 114,
    time: 1 / 6,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 10]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 4,
    Ⲇᐃᐃⵠ: 8,
    time: 1 / 3,
    Ⲇᐃᐃ: 0
  }, {
    r: [[8, 1], [109, 50], [108, 15]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 5,
    Ⲇᐃᐃⵠ: 1,
    time: 1 / 8,
    Ⲇᐃᐃ: 0
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 6,
    Ⲇᐃᐃⵠ: 3,
    time: 0.08333333333333333,
    Ⲇᐃᐃ: 0
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 7,
    Ⲇᐃᐃⵠ: 4,
    time: 1 / 20,
    Ⲇᐃᐃ: 0
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 8,
    Ⲇᐃᐃⵠ: 31,
    time: 0.016666666666666666,
    Ⲇᐃᐃ: 0
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 9,
    Ⲇᐃᐃⵠ: 32,
    time: 1 / 90,
    Ⲇᐃᐃ: 0
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 10,
    Ⲇᐃᐃⵠ: 35,
    time: 1 / 10,
    Ⲇᐃᐃ: 0
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 11,
    Ⲇᐃᐃⵠ: 36,
    time: 0.06666666666666667,
    Ⲇᐃᐃ: 0
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 12,
    Ⲇᐃᐃⵠ: 37,
    time: 1 / 20,
    Ⲇᐃᐃ: 0
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 13,
    Ⲇᐃᐃⵠ: 38,
    time: 1 / 60,
    Ⲇᐃᐃ: 0
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 14,
    Ⲇᐃᐃⵠ: 39,
    time: 1 / 90,
    Ⲇᐃᐃ: 0
  }, {
    r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 15,
    Ⲇᐃᐃⵠ: 45,
    time: 0.008333333333333333,
    Ⲇᐃᐃ: 0
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 16,
    Ⲇᐃᐃⵠ: 46,
    time: 0.2,
    Ⲇᐃᐃ: 0
  }, {
    r: [[46, 1], [111, 20], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 17,
    Ⲇᐃᐃⵠ: 50,
    time: 0.1,
    Ⲇᐃᐃ: 0
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 18,
    Ⲇᐃᐃⵠ: 51,
    time: 1 / 20,
    Ⲇᐃᐃ: 0
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 19,
    Ⲇᐃᐃⵠ: 52,
    time: 1 / 40,
    Ⲇᐃᐃ: 0
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 20,
    Ⲇᐃᐃⵠ: 130,
    time: 1 / 5,
    Ⲇᐃᐃ: 0
  }, {
    r: [[130, 1]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 21,
    Ⲇᐃᐃⵠ: 49,
    time: 0.2,
    Ⲇᐃᐃ: 0
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 22,
    Ⲇᐃᐃⵠ: 53,
    time: 1 / 10,
    Ⲇᐃᐃ: 0
  }, {
    r: [[53, 1], [235, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 23,
    Ⲇᐃᐃⵠ: 54,
    time: 1 / 60,
    Ⲇᐃᐃ: 0
  }, {
    r: [[120, 4], [161, 4], [174, 4]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 24,
    Ⲇᐃᐃⵠ: 28,
    time: 1 / 15,
    Ⲇᐃᐃ: 0
  }, {
    r: [[109, 40]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 25,
    Ⲇᐃᐃⵠ: 12,
    time: 1 / 5,
    Ⲇᐃᐃ: 1
  }, {
    r: [[12, 1], [109, 60], [108, 10]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 26,
    Ⲇᐃᐃⵠ: 13,
    time: 1 / 10,
    Ⲇᐃᐃ: 1
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 27,
    Ⲇᐃᐃⵠ: 14,
    Ⲇᐃᐃ: 1,
    time: 1 / 20
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 28,
    Ⲇᐃᐃⵠ: 15,
    time: 1 / 30,
    Ⲇᐃᐃ: 1
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 29,
    Ⲇᐃᐃⵠ: 33,
    time: 0.016666666666666666,
    Ⲇᐃᐃ: 1
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 30,
    Ⲇᐃᐃⵠ: 34,
    time: 1 / 90,
    Ⲇᐃᐃ: 1
  }, {
    r: [[147, 20], [185, 1], [121, 100], [149, 3]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 31,
    Ⲇᐃᐃⵠ: 16,
    time: 1 / 120,
    Ⲇᐃᐃ: 1
  }, {
    r: [[16, 1], [187, 1], [202, 100], [150, 2]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 32,
    Ⲇᐃᐃⵠ: 17,
    time: 0.005,
    Ⲇᐃᐃ: 1
  }, {
    r: [[12, 1], [197, 5], [161, 6]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 33,
    Ⲇᐃᐃⵠ: 18,
    time: 1 / 30,
    Ⲇᐃᐃ: 1
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 34,
    Ⲇᐃᐃⵠ: 57,
    time: 1 / 5,
    Ⲇᐃᐃ: 1
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 35,
    Ⲇᐃᐃⵠ: 0,
    time: 1 / 10,
    Ⲇᐃᐃ: 1
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 36,
    Ⲇᐃᐃⵠ: 5,
    time: 1 / 20,
    Ⲇᐃᐃ: 1
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 37,
    Ⲇᐃᐃⵠ: 6,
    time: 0.03333333333333333,
    Ⲇᐃᐃ: 1
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 38,
    Ⲇᐃᐃⵠ: 30,
    time: 1 / 60,
    Ⲇᐃᐃ: 1
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 39,
    Ⲇᐃᐃⵠ: 19,
    time: 1 / 90,
    Ⲇᐃᐃ: 1
  }, {
    r: [[110, 3]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 40,
    Ⲇᐃᐃⵠ: 115,
    time: 1 / 5,
    Ⲇᐃᐃ: 3
  }, {
    r: [[134, 3]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 41,
    Ⲇᐃᐃⵠ: 132,
    time: 0.2,
    Ⲇᐃᐃ: 3
  }, {
    r: [[189, 8]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 42,
    Ⲇᐃᐃⵠ: 188,
    time: 1 / 5,
    Ⲇᐃᐃ: 3
  }, {
    r: [[192, 8]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 43,
    Ⲇᐃᐃⵠ: 191,
    time: 1 / 5,
    Ⲇᐃᐃ: 3
  }, {
    r: [[194, 8]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 44,
    Ⲇᐃᐃⵠ: 193,
    time: 1 / 5,
    Ⲇᐃᐃ: 3
  }, {
    r: [[205, 8]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 45,
    Ⲇᐃᐃⵠ: 204,
    time: 1 / 5,
    Ⲇᐃᐃ: 3
  }, {
    r: [[207, 8]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 46,
    Ⲇᐃᐃⵠ: 206,
    time: 1 / 5,
    Ⲇᐃᐃ: 3
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 47,
    Ⲇᐃᐃⵠ: 208,
    time: 0.2,
    Ⲇᐃᐃ: 3
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 48,
    Ⲇᐃᐃⵠ: 210,
    time: 1 / 5,
    Ⲇᐃᐃ: 3
  }, {
    r: [[116, 1]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 49,
    Ⲇᐃᐃⵠ: 117,
    time: 0.2,
    Ⲇᐃᐃ: 3
  }, {
    r: [[137, 1]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 50,
    Ⲇᐃᐃⵠ: 138,
    time: 1 / 3,
    Ⲇᐃᐃ: 3
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 51,
    Ⲇᐃᐃⵠ: 143,
    time: 0.3333333333333333,
    Ⲇᐃᐃ: 3
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 52,
    Ⲇᐃᐃⵠ: 133,
    time: 1 / 3,
    Ⲇᐃᐃ: 3
  }, {
    r: [[131, 5], [110, 2], [142, 2]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 53,
    Ⲇᐃᐃⵠ: 136,
    time: 0.2,
    Ⲇᐃᐃ: 3
  }, {
    r: [[161, 2]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 54,
    Ⲇᐃᐃⵠ: 195,
    time: 0.2,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 55,
    Ⲇᐃᐃⵠ: 162,
    time: 1 / 5,
    Ⲇᐃᐃ: 5
  }, {
    r: [[162, 1], [108, 17]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 56,
    Ⲇᐃᐃⵠ: 163,
    time: 0.2,
    Ⲇᐃᐃ: 5
  }, {
    r: [[163, 1], [111, 14]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 57,
    Ⲇᐃᐃⵠ: 164,
    time: 1 / 5,
    Ⲇᐃᐃ: 5
  }, {
    r: [[164, 1], [112, 11]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 58,
    Ⲇᐃᐃⵠ: 165,
    time: 0.2,
    Ⲇᐃᐃ: 5
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 59,
    Ⲇᐃᐃⵠ: 122,
    time: 0.2,
    Ⲇᐃᐃ: 5
  }, {
    r: [[122, 1], [202, 5]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 60,
    Ⲇᐃᐃⵠ: 217,
    time: 1 / 5,
    Ⲇᐃᐃ: 5
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 61,
    Ⲇᐃᐃⵠ: 166,
    time: 1 / 8,
    Ⲇᐃᐃ: 5
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 62,
    Ⲇᐃᐃⵠ: 171,
    time: 1 / 8,
    Ⲇᐃᐃ: 5
  }, {
    r: [[171, 1], [111, 24]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 63,
    Ⲇᐃᐃⵠ: 172,
    time: 0.125,
    Ⲇᐃᐃ: 5
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 64,
    Ⲇᐃᐃⵠ: 173,
    time: 1 / 8,
    Ⲇᐃᐃ: 5
  }, {
    r: [[173, 1], [121, 18]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 65,
    Ⲇᐃᐃⵠ: 124,
    time: 1 / 8,
    Ⲇᐃᐃ: 5
  }, {
    r: [[124, 1], [202, 15]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 66,
    Ⲇᐃᐃⵠ: 218,
    time: 1 / 8,
    Ⲇᐃᐃ: 5
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 67,
    Ⲇᐃᐃⵠ: 160,
    time: 1 / 20,
    Ⲇᐃᐃ: 5
  }, {
    r: [[163, 1], [108, 70]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 68,
    Ⲇᐃᐃⵠ: 168,
    time: 1 / 20,
    Ⲇᐃᐃ: 5
  }, {
    r: [[164, 1], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 69,
    Ⲇᐃᐃⵠ: 169,
    time: 0.05,
    Ⲇᐃᐃ: 5
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 70,
    Ⲇᐃᐃⵠ: 170,
    time: 1 / 20,
    Ⲇᐃᐃ: 5
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 71,
    Ⲇᐃᐃⵠ: 123,
    time: 1 / 20,
    Ⲇᐃᐃ: 5
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 72,
    Ⲇᐃᐃⵠ: 219,
    time: 0.05,
    Ⲇᐃᐃ: 5
  }, {
    r: [[166, 1], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 73,
    Ⲇᐃᐃⵠ: 212,
    time: 1 / 20,
    Ⲇᐃᐃ: 5
  }, {
    r: [[171, 1], [108, 140]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 74,
    Ⲇᐃᐃⵠ: 213,
    time: 1 / 20,
    Ⲇᐃᐃ: 5
  }, {
    r: [[172, 1], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 75,
    Ⲇᐃᐃⵠ: 214,
    time: 0.05,
    Ⲇᐃᐃ: 5
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 76,
    Ⲇᐃᐃⵠ: 215,
    time: 1 / 20,
    Ⲇᐃᐃ: 5
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 77,
    Ⲇᐃᐃⵠ: 216,
    time: 1 / 20,
    Ⲇᐃᐃ: 5
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 78,
    Ⲇᐃᐃⵠ: 220,
    time: 1 / 20,
    Ⲇᐃᐃ: 5
  }, {
    r: [[109, 25], [111, 2]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 79,
    Ⲇᐃᐃⵠ: 167,
    time: 1 / 5,
    Ⲇᐃᐃ: 4
  }, {
    r: [[120, 1], [2, 1], [161, 2]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 80,
    Ⲇᐃᐃⵠ: 23,
    time: 1 / 5,
    Ⲇᐃᐃ: 2
  }, {
    r: [[120, 5], [222, 20], [147, 5], [2, 5]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 81,
    Ⲇᐃᐃⵠ: 24,
    time: 0.03333333333333333,
    Ⲇᐃᐃ: 2
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 82,
    Ⲇᐃᐃⵠ: 82,
    time: 0.016666666666666666,
    Ⲇᐃᐃ: 2
  }, {
    r: [[2, 1], [161, 2]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 83,
    Ⲇᐃᐃⵠ: 10,
    time: 0.2,
    Ⲇᐃᐃ: 2
  }, {
    r: [[10, 1], [174, 5], [161, 4]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 84,
    Ⲇᐃᐃⵠ: 11,
    time: 0.08333333333333333,
    Ⲇᐃᐃ: 2
  }, {
    r: [[11, 1], [146, 5], [147, 4]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 85,
    Ⲇᐃᐃⵠ: 40,
    time: 1 / 30,
    Ⲇᐃᐃ: 2
  }, {
    r: [[40, 1], [146, 5], [240, 10], [147, 4]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 86,
    Ⲇᐃᐃⵠ: 88,
    time: 0.02,
    Ⲇᐃᐃ: 2
  }, {
    r: [[109, 50]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 87,
    Ⲇᐃᐃⵠ: 58,
    time: 1 / 5,
    Ⲇᐃᐃ: 2
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 88,
    Ⲇᐃᐃⵠ: 25,
    time: 1 / 10,
    Ⲇᐃᐃ: 2
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 89,
    Ⲇᐃᐃⵠ: 26,
    time: 1 / 20,
    Ⲇᐃᐃ: 2
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 90,
    Ⲇᐃᐃⵠ: 27,
    time: 1 / 30,
    Ⲇᐃᐃ: 2
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 91,
    Ⲇᐃᐃⵠ: 43,
    time: 1 / 60,
    Ⲇᐃᐃ: 2
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, 1]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 92,
    Ⲇᐃᐃⵠ: 44,
    time: 1 / 90,
    Ⲇᐃᐃ: 2
  }, {
    r: [[139, 2], [112, 40], [161, 4]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 93,
    Ⲇᐃᐃⵠ: 48,
    time: 0.05,
    Ⲇᐃᐃ: 2
  }, {
    r: [[48, 1], [111, 80], [129, 1], [121, 20]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 94,
    Ⲇᐃᐃⵠ: 47,
    time: 0.011111111111111112,
    Ⲇᐃᐃ: 2
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 95,
    Ⲇᐃᐃⵠ: 20,
    time: 1 / 20,
    Ⲇᐃᐃ: 2
  }, {
    r: [[20, 1], [203, 10], [121, 50]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 96,
    Ⲇᐃᐃⵠ: 21,
    time: 1 / 60,
    Ⲇᐃᐃ: 2
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 97,
    Ⲇᐃᐃⵠ: 22,
    time: 1 / 90,
    Ⲇᐃᐃ: 2
  }, {
    r: [[161, 4], [237, 2]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 98,
    Ⲇᐃᐃⵠ: 80,
    time: 1 / 15,
    Ⲇᐃᐃ: 2
  }, {
    r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 99,
    Ⲇᐃᐃⵠ: 81,
    time: 0.006666666666666667,
    Ⲇᐃᐃ: 2
  }, {
    r: [[161, 6], [174, 5]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 100,
    Ⲇᐃᐃⵠ: 29,
    time: 1 / 15,
    Ⲇᐃᐃ: 2
  }, {
    r: [[109, 20]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 101,
    Ⲇᐃᐃⵠ: 120,
    time: 1 / 3,
    Ⲇᐃᐃ: 4
  }, {
    r: [[112, 1], [161, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 102,
    Ⲇᐃᐃⵠ: 147,
    time: 0.3333333333333333,
    Ⲇᐃᐃ: 4
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 103,
    Ⲇᐃᐃⵠ: 148,
    time: 1 / 5,
    Ⲇᐃᐃ: 4
  }, {
    r: [[111, 250]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 104,
    Ⲇᐃᐃⵠ: 158,
    time: 0.016666666666666666,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 105,
    Ⲇᐃᐃⵠ: 159,
    time: 0.1,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 106,
    Ⲇᐃᐃⵠ: 125,
    time: 1 / 5,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 107,
    Ⲇᐃᐃⵠ: 190,
    time: 0.2,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 108,
    Ⲇᐃᐃⵠ: 221,
    time: 1 / 15,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 109,
    Ⲇᐃᐃⵠ: 141,
    time: 0.2,
    Ⲇᐃᐃ: 4
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 110,
    Ⲇᐃᐃⵠ: 128,
    time: 1 / 5,
    Ⲇᐃᐃ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 111,
    Ⲇᐃᐃⵠ: 127,
    time: 1 / 5,
    Ⲇᐃᐃ: 3
  }, {
    r: [[142, 20], [128, 1]],
    w: 0,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 112,
    Ⲇᐃᐃⵠ: 127,
    time: 1 / 10,
    Ⲇᐃᐃ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 1,
    id: 113,
    Ⲇᐃᐃⵠ: 127,
    time: 1 / 3,
    Ⲇᐃᐃ: 3
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 114,
    Ⲇᐃᐃⵠ: 135,
    time: 1 / 10,
    Ⲇᐃᐃ: 4
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 115,
    Ⲇᐃᐃⵠ: 151,
    time: 1 / 20,
    Ⲇᐃᐃ: 4
  }, {
    r: [[151, 1], [234, 40], [238, 1]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 116,
    Ⲇᐃᐃⵠ: 152,
    time: 1 / 200,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 50], [108, 100]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 117,
    Ⲇᐃᐃⵠ: 153,
    time: 0.011111111111111112,
    Ⲇᐃᐃ: 4
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 118,
    Ⲇᐃᐃⵠ: 154,
    time: 0.011111111111111112,
    Ⲇᐃᐃ: 4
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 119,
    Ⲇᐃᐃⵠ: 155,
    time: 0.011111111111111112,
    Ⲇᐃᐃ: 4
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 120,
    Ⲇᐃᐃⵠ: 156,
    time: 1 / 90,
    Ⲇᐃᐃ: 4
  }, {
    r: [[121, 90], [202, 180]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 121,
    Ⲇᐃᐃⵠ: 157,
    time: 1 / 90,
    Ⲇᐃᐃ: 4
  }, {
    r: [[108, 70]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 122,
    Ⲇᐃᐃⵠ: 55,
    time: 1 / 10,
    Ⲇᐃᐃ: 0
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 123,
    Ⲇᐃᐃⵠ: 56,
    time: 1 / 10,
    Ⲇᐃᐃ: 0
  }, {
    r: [[109, 40], [108, 40]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 124,
    Ⲇᐃᐃⵠ: 144,
    time: 1 / 10,
    Ⲇᐃᐃ: 4
  }, {
    r: [[143, 1], [117, 1]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 125,
    Ⲇᐃᐃⵠ: 145,
    time: 1 / 3,
    Ⲇᐃᐃ: 3
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 126,
    Ⲇᐃᐃⵠ: 59,
    time: 1 / 120,
    Ⲇᐃᐃ: 2
  }, {
    r: [[59, 1], [186, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 127,
    Ⲇᐃᐃⵠ: 60,
    time: 1 / 180,
    Ⲇᐃᐃ: 2
  }, {
    r: [[26, 1], [197, 10], [196, 10], [161, 10]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 128,
    Ⲇᐃᐃⵠ: 61,
    time: 1 / 60,
    Ⲇᐃᐃ: 2
  }, {
    r: [[147, 20], [185, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 129,
    Ⲇᐃᐃⵠ: 62,
    time: 1 / 120,
    Ⲇᐃᐃ: 1
  }, {
    r: [[62, 1], [187, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 130,
    Ⲇᐃᐃⵠ: 63,
    time: 0.005555555555555556,
    Ⲇᐃᐃ: 1
  }, {
    r: [[109, 100], [161, 4]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 131,
    Ⲇᐃᐃⵠ: 64,
    time: 1 / 20,
    Ⲇᐃᐃ: 1
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 132,
    Ⲇᐃᐃⵠ: 101,
    time: 1 / 5,
    Ⲇᐃᐃ: 1
  }, {
    r: [[108, 200], [161, 8], [222, 4], [64, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 133,
    Ⲇᐃᐃⵠ: 65,
    time: 0.04,
    Ⲇᐃᐃ: 1
  }, {
    r: [[108, 20], [231, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 134,
    Ⲇᐃᐃⵠ: 102,
    time: 1 / 5,
    Ⲇᐃᐃ: 1
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 135,
    Ⲇᐃᐃⵠ: 66,
    time: 0.03333333333333333,
    Ⲇᐃᐃ: 1
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 136,
    Ⲇᐃᐃⵠ: 103,
    time: 1 / 10,
    Ⲇᐃᐃ: 1
  }, {
    r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 137,
    Ⲇᐃᐃⵠ: 67,
    time: 1 / 35,
    Ⲇᐃᐃ: 1
  }, {
    r: [[112, 10], [222, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 138,
    Ⲇᐃᐃⵠ: 104,
    time: 1 / 10,
    Ⲇᐃᐃ: 1
  }, {
    r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 139,
    Ⲇᐃᐃⵠ: 68,
    time: 1 / 40,
    Ⲇᐃᐃ: 1
  }, {
    r: [[121, 10], [232, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 140,
    Ⲇᐃᐃⵠ: 105,
    time: 1 / 15,
    Ⲇᐃᐃ: 1
  }, {
    r: [[202, 200], [147, 10], [129, 1], [68, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 141,
    Ⲇᐃᐃⵠ: 69,
    time: 0.022222222222222223,
    Ⲇᐃᐃ: 1
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 142,
    Ⲇᐃᐃⵠ: 106,
    time: 0.06666666666666667,
    Ⲇᐃᐃ: 1
  }, {
    r: [[234, 200], [147, 10], [185, 1], [69, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 143,
    Ⲇᐃᐃⵠ: 70,
    time: 0.02,
    Ⲇᐃᐃ: 1
  }, {
    r: [[234, 10], [238, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 144,
    Ⲇᐃᐃⵠ: 107,
    time: 1 / 20,
    Ⲇᐃᐃ: 1
  }, {
    r: [[109, 100]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 145,
    Ⲇᐃᐃⵠ: 71,
    time: 0.04,
    Ⲇᐃᐃ: 1
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 146,
    Ⲇᐃᐃⵠ: 72,
    time: 1 / 40,
    Ⲇᐃᐃ: 1
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 147,
    Ⲇᐃᐃⵠ: 73,
    time: 0.02,
    Ⲇᐃᐃ: 1
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 148,
    Ⲇᐃᐃⵠ: 74,
    time: 0.014285714285714285,
    Ⲇᐃᐃ: 1
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 149,
    Ⲇᐃᐃⵠ: 75,
    time: 1 / 90,
    Ⲇᐃᐃ: 1
  }, {
    r: [[75, 1], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 150,
    Ⲇᐃᐃⵠ: 76,
    time: 0.008333333333333333,
    Ⲇᐃᐃ: 1
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 151,
    Ⲇᐃᐃⵠ: 77,
    time: 1 / 60,
    Ⲇᐃᐃ: 2
  }, {
    r: [[176, 1], [111, 200]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 152,
    Ⲇᐃᐃⵠ: 78,
    time: 1 / 60,
    Ⲇᐃᐃ: 2
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 153,
    Ⲇᐃᐃⵠ: 79,
    time: 1 / 60,
    Ⲇᐃᐃ: 2
  }, {
    r: [[174, 10], [2, 5], [161, 6]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 154,
    Ⲇᐃᐃⵠ: 83,
    time: 1 / 10,
    Ⲇᐃᐃ: 2
  }, {
    r: [[2, 3], [161, 2]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 155,
    Ⲇᐃᐃⵠ: 84,
    time: 0.1,
    Ⲇᐃᐃ: 2
  }, {
    r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 156,
    Ⲇᐃᐃⵠ: 85,
    time: 0.016666666666666666,
    Ⲇᐃᐃ: 2
  }, {
    r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 157,
    Ⲇᐃᐃⵠ: 86,
    time: 0.016666666666666666,
    Ⲇᐃᐃ: 2
  }, {
    r: [[181, 1]],
    w: 0,
    f: 0,
    ᐃᐃᐃ: 1,
    e: 0,
    id: 158,
    Ⲇᐃᐃⵠ: 180,
    time: 1 / 5,
    Ⲇᐃᐃ: 0
  }, {
    r: [[109, 20], [161, 1]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 159,
    Ⲇᐃᐃⵠ: 181,
    time: 1 / 5,
    Ⲇᐃᐃ: 0
  }, {
    r: [[108, 100], [140, 30]],
    w: 1,
    f: 1,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 160,
    Ⲇᐃᐃⵠ: 182,
    time: 1 / 10,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 161,
    Ⲇᐃᐃⵠ: 183,
    time: 0.2,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 162,
    Ⲇᐃᐃⵠ: 198,
    time: 0.05,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 163,
    Ⲇᐃᐃⵠ: 223,
    time: 1 / 50,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 164,
    Ⲇᐃᐃⵠ: 224,
    time: 1 / 50,
    Ⲇᐃᐃ: 4
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 165,
    Ⲇᐃᐃⵠ: 89,
    time: 1 / 20,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 250], [161, 10], [120, 10], [231, 8]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 166,
    Ⲇᐃᐃⵠ: 230,
    time: 0.02,
    Ⲇᐃᐃ: 4
  }, {
    r: [[109, 40]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 167,
    Ⲇᐃᐃⵠ: 94,
    time: 0.2,
    Ⲇᐃᐃ: 1
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 168,
    Ⲇᐃᐃⵠ: 95,
    time: 1 / 10,
    Ⲇᐃᐃ: 1
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 169,
    Ⲇᐃᐃⵠ: 96,
    time: 1 / 20,
    Ⲇᐃᐃ: 1
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 170,
    Ⲇᐃᐃⵠ: 97,
    time: 1 / 30,
    Ⲇᐃᐃ: 1
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 171,
    Ⲇᐃᐃⵠ: 98,
    time: 0.016666666666666666,
    Ⲇᐃᐃ: 1
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    ᐃᐃᐃ: 0,
    e: 0,
    id: 172,
    Ⲇᐃᐃⵠ: 99,
    time: 1 / 90,
    Ⲇᐃᐃ: 1
  }];
  const bt = 6;
  const ct = _j;
  const dt = 9;
  function ft(b, c, d, e, f) {
    const g = (b | 19365) & ~(b & 19365);
    const a = ~(f & 10391) & f | ~(f & 10391) & 10391;
    return (12345 + (61790 + (Ww(g, (1 + (30398 + c) * 22695477) % 4294967296, ~(d & 47971) & (d | 47971), e ^ 61370) ^ Ep(a, g))) * 1103515245) % 2147483648;
  }
  const gt = 17;
  function ht(b, c, d, e, f) {
    const g = ~(b & 15602) & b | ~(b & 15602) & 15602;
    const a = ((13607 + c) * 214013 + 2531011) % 4294967296;
    const h = ~(f & 51115) & f | ~(f & 51115) & 51115;
    return (41635 + (tr(g, a) ^ tr(h, g))) % 65505;
  }
  const it = 3;
  const jt = vs;
  zr = 300;
  function lt(b, c, d, e, f) {
    const i = (b | 21354) & ~(b & 21354);
    const a = c ^ 36094;
    const j = (d | 25442) & ~(d & 25442);
    const k = ((e + 55735) * 1664525 + 1013904223) % 4294967296;
    const h = ~(f & 48568) & 48568 | ~(f & 48568) & f;
    const g = function (b, c, d, e, f, i) {
      const a = (8 << (b >> 16 & 255)) + (0 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (24 << (b >> 0 & 255));
      const j = (c | 32183) & ~(c & 32183);
      const k = vr(a, j, ~(d & 25689) & (d | 25689), e ^ 57497, (12345 + (61461 + f) * 1103515245) % 2147483648, i ^ 48210);
      const h = Hn(a, j);
      return (2531011 + (61410 + (k ^ h)) * 214013) % 4294967296;
    }(i, a, j, k, h, i);
    Un(a, j, k, h);
    return g ^ 19503;
  }
  ⵠⲆᐃ = {
    ⵠⲆΔⲆΔⲆΔ: 300,
    ⲆⲆⲆΔΔᐃⲆ: 301,
    ⵠⲆΔΔΔΔⵠ: 302,
    ΔⲆⵠⵠⵠⲆⵠ: 303,
    ΔⲆⲆⵠⲆΔⲆ: 304,
    ᐃᐃᐃⲆⵠⵠΔ: 305,
    ΔⲆᐃⲆⲆⲆᐃ: 306,
    ᐃⵠΔΔΔⲆΔ: 307,
    ⲆⲆⲆⵠⵠⵠⲆ: 308,
    ⲆⲆⵠⵠⵠᐃΔ: 309,
    ⲆⲆⲆᐃⲆⲆⵠ: 310,
    ᐃⵠΔᐃᐃⵠⵠ: 311,
    EMPTY: 312,
    ⲆⲆᐃⵠΔΔⲆ: 313,
    ⵠΔΔⵠⲆⵠΔ: 314,
    ΔΔⵠᐃᐃᐃᐃ: 315,
    ᐃⲆⲆⵠΔⲆⵠ: 316,
    ᐃⲆⵠⲆⲆⲆⵠ: 317,
    ᐃΔΔΔⵠⲆⵠ: 318,
    ⵠᐃⵠⵠᐃⵠⵠ: 319,
    ᐃⲆᐃⵠΔⲆΔ: 320,
    ᐃⲆᐃⵠᐃⲆⲆ: 321,
    ⵠⲆⵠⵠᐃ: 322,
    ᐃΔΔᐃΔⲆᐃ: 323,
    ᐃΔᐃⲆ: 324,
    ΔⵠⵠΔΔΔⵠ: 325,
    ⵠⵠⲆⵠⵠⵠⵠ: 326,
    ⵠᐃᐃⲆᐃⵠᐃ: 327,
    ᐃⵠⵠΔᐃⵠⲆ: 328,
    ᐃⵠⵠΔⲆΔΔ: 329,
    ᐃⲆⲆⲆᐃⲆⲆ: 330,
    ⵠΔⵠⲆΔᐃⵠ: 331,
    POINTS: 332,
    ⵠⲆᐃⵠΔⵠᐃ: 333,
    ⵠⲆΔΔΔⲆΔ: 334,
    ΔⲆᐃⵠⲆⵠᐃ: 335,
    ΔⲆⲆᐃⵠⵠⵠ: 336,
    ⵠᐃⵠΔⲆⵠᐃ: 337,
    ⲆⲆᐃⵠⵠᐃⲆ: 338,
    ΔΔᐃⵠⵠⲆᐃ: 339,
    ᐃΔᐃⵠⵠⵠⵠ: 340,
    ᐃⲆΔΔⵠᐃΔ: 341,
    ⲆⵠΔᐃⲆΔᐃ: 342,
    ⵠⲆⲆⵠⵠⲆⲆ: 343
  };
  const mt = 0;
  function ot(b, c) {
    const d = (2531011 + (b + 5207) * 214013) % 4294967296;
    const e = c ^ 38700;
    const f = function (b, c, d, e) {
      const f = ~(b & 28214) & (b | 28214);
      const i = ~(c & 52029) & 52029 | ~(c & 52029) & c;
      const a = ~(d & 45064) & d | ~(d & 45064) & 45064;
      const j = e ^ 53700;
      const k = fx(f, i, a, j, f);
      const h = Mb(i, a, j, f, i);
      return (16 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) & 255)) + (0 << ((k ^ h) >> 16 & 255)) + (24 << ((k ^ h) >> 8 & 255));
    }(d, e, d, e);
    const g = kb(d, e, d, e, d, e);
    return (16 << ((f ^ g) & 255)) + (8 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) >> 8 & 255)) + (0 << ((f ^ g) >> 24 & 255));
  }
  function pt(a) {
    return function (b, c, d, e, f) {
      const i = ((59223 + b) * 214013 + 2531011) % 4294967296;
      const a = (24 << (c >> 8 & 255)) + (16 << (c & 255)) + (0 << (c >> 16 & 255)) + (8 << (c >> 24 & 255));
      const j = ~(d & 47568) & d | ~(d & 47568) & 47568;
      const k = (e + 20167) % 65417;
      const h = ~(f & 62691) & (f | 62691);
      const g = lt(i, a, j, k, h);
      ft(i, a, j, k, h);
      return g ^ 40963;
    }(a, 18844, 23141, 60204, 60728);
  }
  const qt = 19;
  const rt = Fn;
  const st = 18;
  const tt = 10;
  function ut() {
    Ib[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    Ib[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    Ib[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    Ib[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    Ib[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    Ib[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    Ib[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    Ib[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    Ib[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    Ib[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    Ib[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    Ib[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    Ib[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    Ib[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    Ib[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    Ib[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    Ib[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    Ib[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    Ib[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    Ib[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    Ib[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    Ib[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    Ib[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    Ib[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    Ib[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    Ib[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    Ib[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    Ib[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    Ib[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    Ib[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    Ib[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    Ib[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    Ib[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    Ib[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    Ib[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    Ib[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    Ib[232] = ["Vulture Feather", "From a deadly vulture"];
    Ib[234] = ["Emerald", "How many golden breads can you get from it?"];
    Ib[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    Ib[80] = ["Turban", "Useful to survive in the desert."];
    Ib[81] = ["Ninja outfit", "Essential to survive in the desert"];
    Ib[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    Ib[236] = ["Pilot Glasses"];
    Ib[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    Ib[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    Ib[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    Ib[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    Ib[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    Ib[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    Ib[89] = ["Saddle", "Hit a boar with it to tame it."];
    Ib[90] = ["Witch Hat", "You're a wizard Starvy!"];
    Ib[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    Ib[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    Ib[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    Ib[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    Ib[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    Ib[224] = ["Sled", "You are faster with it in the snow"];
    Ib[223] = ["Boat", "You are faster with it in the water"];
    Ib[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    Ib[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 70"];
    Ib[222] = ["Penguin Feather", "From a deadly cute penguin."];
    Ib[231] = ["Hawk Feather", "From a deadly hawk."];
    Ib[233] = ["Cactus", "Food : 20", "Water : 10"];
    Ib[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    Ib[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    Ib[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    Ib[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    Ib[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    Ib[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    Ib[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    Ib[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    Ib[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    Ib[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    Ib[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    Ib[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    Ib[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    Ib[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    Ib[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    Ib[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    Ib[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Ib[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Ib[53] = ["Pitchfork", "Perfect for gathering"];
    Ib[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    Ib[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    Ib[Hr.ⵠΔΔΔⵠᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    Ib[Hr.ᐃΔΔΔᐃⵠⵠ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    Ib[Hr.ᐃⵠⲆᐃᐃⲆⲆ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    Ib[Hr.ⲆⵠⲆΔⵠⵠᐃ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    Ib[Hr.ⲆⵠⵠⵠᐃΔⵠ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    Ib[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    Ib[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    Ib[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    Ib[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    Ib[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    Ib[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    Ib[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    Ib[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    Ib[203] = ["Flame", "It's hot!"];
    Ib[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    Ib[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    Ib[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    Ib[202] = ["Reidite", "The ultimate ore"];
    Ib[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    At[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    At[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    At[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    At[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    At[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    At[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    At[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    At[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    At[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    At[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    At[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    At[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    At[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    At[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    At[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    At[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    At[38] = ["You died crushed by an angry baby mammoth."];
    At[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    At[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[341] = "A sandstorm is approaching in a few seconds.";
    Ib[340] = "The sandstorm will soon stop.";
    Ib[343] = "A blizzard is approaching in a few seconds.";
    Ib[342] = "The blizzard will soon stop.";
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["Hand"];
    Ib[140] = ["Dirt", "Dirty!"];
    Ib[126] = ["Sand", "I got it in my eyes!"];
    Ib[109] = ["Wood", "You can't get enough of it!"];
    Ib[108] = ["Stone", "Also called a rock"];
    Ib[111] = ["Gold", "Be generous, give it to others"];
    Ib[112] = ["Diamond", "What will you make with it?"];
    Ib[121] = ["Amethyst", "It's Mauve like Lapa"];
    Ib[131] = ["Flour", "Used in cooking"];
    Ib[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    Ib[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    Ib[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    Ib[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    Ib[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    Ib[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    Ib[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    Ib[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    Ib[200] = ["Candies", "Only for children!", "Food: 20"];
    Ib[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    Ib[201] = ["Garland", "Perfect decoration for roofs"];
    Ib[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    Ib[110] = ["Berry", "Berry tasty!", "Food: 10"];
    Ib[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Ib[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    Ib[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Ib[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    Ib[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Ib[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    Ib[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    Ib[194] = ["Thorn bush", "It stings!"];
    Ib[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    Ib[142] = ["Ice", "Useful for making cakes and water"];
    Ib[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    Ib[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    Ib[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    Ib[178] = ["Pure Fur", "You're a bread factory"];
    Ib[179] = ["Dark Fur", "You get ready to do something wrong"];
    Ib[146] = ["Winter Fur", "These animals just wanted a hug..."];
    Ib[139] = ["Scales", "It smells like fish!"];
    Ib[129] = ["Kraken Skin", "Weren't you too scared?"];
    Ib[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    Ib[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    Ib[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    Ib[161] = ["Cord", "Used in crafting Hats and Bag"];
    Ib[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    Ib[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    Ib[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    Ib[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    Ib[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    Ib[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    Ib[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    Ib[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    Ib[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    Ib[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    Ib[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    Ib[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    Ib[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    Ib[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    Ib[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    Ib[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    Ib[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    Ib[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    Ib[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    Ib[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
    Ib[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    Ib[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    Ib[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    Ib[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    Ib[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    Ib[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    Ib[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    Ib[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    Ib[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    Ib[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    Ib[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    Ib[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    Ib[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    Ib[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    Ib[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    Ib[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    Ib[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    Ib[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    Ib[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    Ib[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    Ib[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    Ib[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    Ib[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    Ib[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    Ib[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Ib[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    Ib[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Ib[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    Ib[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    Ib[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    Ib[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    Ib[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    Ib[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    Ib[177] = ["Blue Gemstone", "For too kind people"];
    Ib[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    Ib[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    Ib[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    Ib[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    Ib[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    Ib[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    Ib[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    Ib[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    Ib[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    Ib[29] = ["Bag", "More space for your items!"];
    Ib[120] = ["Paper", "Used in book-crafting"];
    Ib[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    Ib[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    Ib[148] = ["Lock", "Allow you to lock your chest"];
    Ib[158] = ["Lock-pick", "Allows you to unlock one chest"];
    Ib[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    Ib[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    Ib[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    Ib[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    Ib[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    Ib[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    Ib[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    Ib[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    Ib[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    Ib[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    Ib[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    Ib[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    Ib[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    Ib[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    Ib[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    Ib[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    Ib[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    Ib[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    Ib[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    Ib[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    Ib[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    Ib[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    Ib[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    Ib[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    Ib[300] = "You cannot join this server";
    Ib[301] = "Kicked: ";
    Ib[302] = "Your key is already used by someone else";
    Ib[303] = "Your key is wrong";
    Ib[304] = "You have an old version, you need to clear your cache";
    Ib[338] = "Your client version is too recent for this server. The server is being updated";
    Ib[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    Ib[305] = "There are no more new resources";
    Ib[306] = "You survived 1 day";
    Ib[307] = "You survived ";
    Ib[308] = " days";
    Ib[309] = "You are dead ;-;";
    Ib[310] = "Server cannot find spawn location! Spam the play button!";
    Ib[311] = "Server is full! Spam the play button!";
    Ib[312] = "Resource is empty";
    Ib[313] = "Inventory is full (right-click to empty items)";
    Ib[314] = " is dead";
    Ib[315] = "This is not the right tool";
    Ib[316] = "You joined a team";
    Ib[317] = "You are dead";
    Ib[318] = " joined the team";
    Ib[319] = "Your team was destroyed";
    Ib[320] = "You left the team";
    Ib[321] = " left the team";
    Ib[322] = "Someone stole your token :>";
    Ib[323] = "Choose a server";
    Ib[324] = "players";
    Ib[325] = "total players";
    Ib[326] = "players on this mode";
    Ib[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    At[0] = ["You were killed for no reason"];
    At[1] = ["You starved to death, as the name of the game implies"];
    At[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    At[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    At[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    At[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    At[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    At[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    At[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    At[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    At[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    At[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    At[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    At[13] = ["You died of thirst. Better drink your own piss."];
    At[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    At[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    At[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    At[17] = ["Your skin's falling apart, the sun killed you."];
    At[18] = ["Garlic stored in your pockets boiled your brain."];
    At[19] = ["As a vampire, don't stand near the garlic cloves."];
    At[20] = ["You ate garlic as a vampire, what did you expect?"];
    At[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ΔⵠⲆⲆᐃ = "Uuunnnggg";
    ⵠⵠⲆⵠᐃΔⵠ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  function vt(b, c, d) {
    const e = ~(b & 30948) & 30948 | ~(b & 30948) & b;
    const f = (0 << (c >> 24 & 255)) + (24 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c & 255));
    const g = function (b, c, d) {
      const e = b ^ 54738;
      const f = ~(c & 19954) & (c | 19954);
      const g = ~(d & 40936) & (d | 40936);
      const a = Vb(e, f, g);
      const h = function (b, c, d, e, f, g) {
        const a = ~(b & 30781) & 30781 | ~(b & 30781) & b;
        const i = ~(g & 44925) & g | ~(g & 44925) & 44925;
        const j = ft(a, (12345 + (29857 + c) * 1103515245) % 2147483648, ((53421 + d) * 22695477 + 1) % 4294967296, ((22125 + e) * 22695477 + 1) % 4294967296, (0 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f & 255)) + (8 << (f >> 24 & 255)));
        ot(i, a);
        return ~(j & 39106) & j | ~(j & 39106) & 39106;
      }(e, f, g, e, f, g);
      return ((20124 + (a ^ h)) * 1664525 + 1013904223) % 4294967296;
    }(e, f, ((12127 + d) * 22695477 + 1) % 4294967296);
    const a = ot(e, f);
    return (16 << ((g ^ a) >> 16 & 255)) + (8 << ((g ^ a) >> 8 & 255)) + (0 << ((g ^ a) >> 24 & 255)) + (24 << ((g ^ a) >> 0 & 255));
  }
  const wt = 11;
  function xt() {
    Ib[184] = ["You feel a great power emanating from this orb"];
    At[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["Рука"];
    Ib[140] = ["Земля", "Грязно!"];
    Ib[126] = ["Песок", "Он в моих глазах!"];
    Ib[109] = ["Дерево", "Постоянно нужно больше!"];
    Ib[108] = ["Камень", "Твердый"];
    Ib[111] = ["Золото", "Будьте щедры, давайте его другим"];
    Ib[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    Ib[121] = ["Аметист", "Он сиреневый, как Lapa"];
    Ib[131] = ["Мука", "Используется в готовке"];
    Ib[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    Ib[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    Ib[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    Ib[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    Ib[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    Ib[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    Ib[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    Ib[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    Ib[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    Ib[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    Ib[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    Ib[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Ib[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    Ib[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Ib[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    Ib[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Ib[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    Ib[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Ib[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    Ib[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    Ib[194] = ["Колючий Куст", "Это больно!"];
    Ib[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    Ib[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    Ib[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    Ib[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    Ib[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    Ib[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    Ib[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    Ib[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    Ib[139] = ["Чешуя", "Она пахнет рыбой!"];
    Ib[129] = ["Шкура Кракена", "Вы не испугались?"];
    Ib[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    Ib[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    Ib[114] = ["Верстак", "Необходим для создания многих предметов"];
    Ib[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    Ib[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    Ib[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    Ib[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    Ib[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    Ib[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    Ib[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    Ib[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    Ib[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    Ib[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    Ib[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    Ib[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    Ib[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    Ib[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    Ib[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    Ib[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    Ib[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    Ib[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    Ib[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    Ib[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    Ib[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    Ib[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    Ib[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    Ib[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    Ib[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    Ib[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    Ib[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    Ib[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    Ib[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    Ib[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    Ib[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    Ib[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    Ib[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    Ib[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    Ib[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    Ib[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    Ib[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    Ib[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    Ib[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    Ib[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Ib[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    Ib[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    Ib[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    Ib[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Ib[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Ib[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Ib[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    Ib[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    Ib[185] = ["Шар Дракона", "Даётся за квест"];
    Ib[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    Ib[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    Ib[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    Ib[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    Ib[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    Ib[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    Ib[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    Ib[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    Ib[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    Ib[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    Ib[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    Ib[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    Ib[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    Ib[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    Ib[120] = ["Бумага", "Используется при создании книги"];
    Ib[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    Ib[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    Ib[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    Ib[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    Ib[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    Ib[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    Ib[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    Ib[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    Ib[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    Ib[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    Ib[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    Ib[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    Ib[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    Ib[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    Ib[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    Ib[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    Ib[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    Ib[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    Ib[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    Ib[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    Ib[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    Ib[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    Ib[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    Ib[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    Ib[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    Ib[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    Ib[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    Ib[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    Ib[300] = "Вы не можете зайти на этот сервер";
    Ib[301] = "Выгнаны: ";
    Ib[302] = "Ваш ключ уже используется кем-то";
    Ib[303] = "Ваш ключ неправильный";
    Ib[304] = "У вас старая версия, вам нужно очистить кеш";
    Ib[305] = "Ресурсов больше нет";
    Ib[306] = "Вы выжили 1 день";
    Ib[307] = "Вы выжили ";
    Ib[308] = " дней";
    Ib[309] = "Вы умерли ;-;";
    Ib[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    Ib[311] = "Сервер заполнен! Спамьте кнопку играть!";
    Ib[312] = "Ресурсы закончились";
    Ib[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    Ib[314] = " умер";
    Ib[315] = "Это не тот инструмент";
    Ib[316] = "Вы вошли в команду";
    Ib[317] = "Вы умерли";
    Ib[318] = " вошёл в команду";
    Ib[319] = "Ваша команда была разрушена";
    Ib[320] = "Вы покинули команду";
    Ib[321] = " покинул команду";
    Ib[322] = "Кто-то использует ваш токен :>";
    Ib[323] = "Выберите сервер";
    Ib[324] = "игроков";
    Ib[325] = "игроков всего";
    Ib[326] = "игроков в этом режиме";
    Ib[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    At[0] = ["Вы были убиты без причины"];
    At[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    At[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    At[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    At[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    At[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    At[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    At[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    At[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    At[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    At[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    At[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    At[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    At[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    At[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    At[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    At[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    At[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    At[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    At[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    At[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    At[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ΔⵠⲆⲆᐃ = "Uuunnnggg";
    ⵠⵠⲆⵠᐃΔⵠ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function eb(b, c, d, e, f, g) {
    Ge(yt, b, c, d, e, f, g);
    const a = zb(sb[0], sb[1], sb[2], sb[3]);
    Eb(sb[4], sb[5], sb[0]);
    return (a | 6116) & ~(a & 6116);
  }
  function ib(a, b, c) {
    ai(yt, a, b, c);
    const d = function (b, c, d, e, f) {
      Tj(yt, b, c, d, e, f);
      const g = Zf(sb[0], sb[1], sb[2], sb[3], sb[4]);
      const a = function (a, b, c, d) {
        li(yt, a, b, c, d);
        const e = Eb(sb[0], sb[1], sb[2]);
        Bx(sb[3], sb[0], sb[1]);
        return ~(e & 49050) & e | ~(e & 49050) & 49050;
      }(sb[0], sb[1], sb[2], sb[3]);
      return ((145 + (g ^ a)) * 8121 + 28411) % 134456;
    }(sb[0], sb[1], sb[2], sb[0], sb[1]);
    const e = Bx(sb[2], sb[0], sb[1]);
    return (8 << ((d ^ e) >> 24 & 255)) + (16 << ((d ^ e) >> 8 & 255)) + (24 << ((d ^ e) >> 16 & 255)) + (0 << ((d ^ e) & 255));
  }
  const tb = 2;
  const nb = 13;
  const ob = 3;
  function ab(a, b, c, d, e) {
    Ki(yt, a, b, c, d, e);
    return ((26 + (function (a, b) {
      xj(yt, a, b);
      const c = Ob(sb[0], sb[1], sb[0], sb[1], sb[0]);
      const d = df(sb[1], sb[0], sb[1]);
      return (2686 + (c ^ d)) % 65489;
    }(sb[0], sb[1]) ^ Ob(sb[2], sb[3], sb[4], sb[0], sb[1]))) * 16807 + 0) % 2147483647;
  }
  function rb(b, c, d, e, f) {
    Xe(yt, b, c, d, e, f);
    const g = cb(sb[0], sb[1]);
    cb(sb[2], sb[3]);
    return g ^ 28863;
  }
  let sb;
  let yt = un;
  const zt = 17;
  const lb = $i;
  const ub = 10;
  const bb = 2;
  const db = 14;
  $i = async function () {
    yt = de(yj(15));
    sb = ok(yt);
    if (lb) {
      lb();
    }

    await rg.gapi.load("auth2", Px);
  };
  const vb = 4;
  const mb = 9;
  function cb(a, b) {
    ci(yt, a, b);
    return (31996 + (eb(sb[0], sb[1], sb[0], sb[1], sb[0], sb[1]) ^ ab(sb[0], sb[1], sb[0], sb[1], sb[0]))) % 65311;
  }
  function pb() {
    Ib[184] = ["You feel a great power emanating from this orb"];
    At[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["mão"];
    Ib[140] = ["terra", "está sujo!"];
    Ib[126] = ["areia", "entrou nos meus olhos!"];
    Ib[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    Ib[108] = ["pedra", "também chamado rocha"];
    Ib[111] = ["ouro", "seja generoso, dê para outros"];
    Ib[112] = ["diamante", "o que você irá fazer com isso?"];
    Ib[121] = ["ametista", "é mauve como lapa"];
    Ib[131] = ["farinha", "usada na cozinha"];
    Ib[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    Ib[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    Ib[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    Ib[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    Ib[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    Ib[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    Ib[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    Ib[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    Ib[200] = ["doces", "apenas para crianças!", "comida: 100"];
    Ib[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    Ib[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    Ib[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Ib[110] = ["berry", "Berry saborosa!", "comida: 10"];
    Ib[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    Ib[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    Ib[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    Ib[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    Ib[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Ib[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    Ib[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    Ib[194] = ["mato de espinhos", "pica!"];
    Ib[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    Ib[142] = ["gelo", "útil para fazer bolo e água"];
    Ib[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    Ib[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    Ib[2] = ["pele de coelho", "o coelho era tão fofo..."];
    Ib[178] = ["pele pura", "você é uma fábrica de pão"];
    Ib[179] = ["pele negra", "você está pronto para fazer algo errado"];
    Ib[146] = ["pele de inverno", "ele só queria um abraço"];
    Ib[139] = ["escala", "é pequeno como peixe!"];
    Ib[129] = ["pele do kraken", "você não está com medo?"];
    Ib[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    Ib[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    Ib[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    Ib[161] = ["linha", "usada para fazer chapéus e mochila"];
    Ib[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    Ib[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    Ib[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    Ib[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    Ib[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    Ib[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    Ib[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    Ib[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    Ib[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    Ib[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    Ib[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    Ib[Hr.ⵠⲆⲆΔⲆΔΔⵠⵠ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    Ib[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    Ib[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    Ib[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    Ib[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    Ib[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    Ib[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    Ib[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    Ib[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    Ib[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    Ib[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    Ib[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    Ib[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    Ib[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    Ib[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    Ib[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    Ib[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    Ib[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    Ib[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    Ib[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    Ib[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    Ib[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    Ib[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    Ib[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    Ib[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    Ib[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    Ib[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    Ib[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    Ib[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    Ib[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    Ib[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    Ib[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Ib[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    Ib[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Ib[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    Ib[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    Ib[185] = ["esfera do dragão", "dado na questt"];
    Ib[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    Ib[175] = ["pedra verde", "você não vai trapacear, promete?"];
    Ib[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    Ib[177] = ["pedra azul", "para pessoas muito gentis"];
    Ib[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    Ib[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    Ib[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    Ib[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    Ib[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    Ib[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    Ib[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    Ib[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    Ib[49] = ["regador", "permite regar as plantas", "dano: 1"];
    Ib[29] = ["mochila", "mais espaço para seus itens!"];
    Ib[120] = ["papel", "usado para fazer o livro"];
    Ib[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    Ib[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    Ib[148] = ["fechadura", "permite você trancar seu baú"];
    Ib[158] = ["chave", "permite destrancar um baú"];
    Ib[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    Ib[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    Ib[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    Ib[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    Ib[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    Ib[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    Ib[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    Ib[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    Ib[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    Ib[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    Ib[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    Ib[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    Ib[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    Ib[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    Ib[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    Ib[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    Ib[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    Ib[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    Ib[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    Ib[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    Ib[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    Ib[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Ib[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Ib[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    Ib[300] = "você não pode entrar no servidor";
    Ib[301] = "kickado: ";
    Ib[302] = "sua chave está em uso por outra pessoa";
    Ib[303] = "sua chave está errada";
    Ib[304] = "você tem uma versão velha, limpe seu cache";
    Ib[305] = "não tem mais recursos";
    Ib[306] = "você sobreviveu 1 dia";
    Ib[307] = "você sobreviveu ";
    Ib[308] = " dias";
    Ib[309] = "você está morto ;-;";
    Ib[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    Ib[311] = "servidor está cheio! spam o botão de play!";
    Ib[312] = "não tem recursos";
    Ib[313] = "inventário está cheio (botão direito para deletar itens)";
    Ib[314] = " está morto";
    Ib[315] = "essa não é a ferramenta certa";
    Ib[316] = "você entrou no time";
    Ib[317] = "você está morto";
    Ib[318] = "entrou no time";
    Ib[319] = "seu time foi destruido";
    Ib[320] = "você saiu do time";
    Ib[321] = " saiu do time";
    Ib[322] = "alguém roubou sua ficha :>";
    Ib[323] = "escolha um servidor";
    Ib[324] = "jogadores";
    Ib[325] = "jogadores totais";
    Ib[326] = "jogadores nesse modo";
    Ib[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    At[0] = ["você morreu sem motivo"];
    At[1] = ["você morreu de fome, como o jogo diz"];
    At[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    At[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    At[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    At[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    At[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    At[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    At[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    At[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    At[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    At[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    At[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    At[13] = ["você morreu de sede. melhor beber sua própria urina."];
    At[14] = ["você sabia que você morre afogado? agora você sabe."];
    At[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    At[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    At[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    At[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    At[19] = ["como vampiro, não chegue perto do alho."];
    At[20] = ["você comeu alho como vampiro, o que você esperava?"];
    At[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ΔⵠⲆⲆᐃ = "Uuunnnggg";
    ⵠⵠⲆⵠᐃΔⵠ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  function Cb() {
    Ib[184] = ["You feel a great power emanating from this orb"];
    At[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["Mano"];
    Ib[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    Ib[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    Ib[109] = ["Madera", "¡Nunca hay suficiente!"];
    Ib[108] = ["Piedra", "También llamada roca."];
    Ib[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    Ib[112] = ["Diamante", "¿Que vas a hacer con él?"];
    Ib[121] = ["Amatista", "Es Mauve como Lapa"];
    Ib[131] = ["Harina", "Usada para cocinar."];
    Ib[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    Ib[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    Ib[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    Ib[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    Ib[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    Ib[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    Ib[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    Ib[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    Ib[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    Ib[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    Ib[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    Ib[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Ib[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    Ib[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Ib[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    Ib[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Ib[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    Ib[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    Ib[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    Ib[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    Ib[194] = ["Planta de Espinas", "¡Te daña!"];
    Ib[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    Ib[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    Ib[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    Ib[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    Ib[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    Ib[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    Ib[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    Ib[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    Ib[139] = ["Escamas", "¡Huele a pescado!"];
    Ib[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    Ib[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    Ib[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    Ib[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    Ib[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    Ib[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    Ib[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    Ib[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    Ib[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    Ib[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    Ib[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    Ib[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    Ib[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    Ib[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    Ib[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    Ib[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    Ib[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    Ib[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    Ib[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    Ib[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    Ib[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    Ib[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    Ib[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    Ib[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    Ib[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    Ib[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    Ib[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    Ib[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    Ib[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    Ib[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    Ib[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    Ib[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    Ib[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    Ib[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    Ib[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    Ib[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    Ib[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    Ib[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    Ib[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    Ib[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    Ib[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    Ib[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    Ib[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    Ib[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    Ib[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    Ib[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    Ib[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    Ib[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    Ib[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    Ib[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    Ib[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    Ib[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    Ib[185] = ["Esfera del Dragón", "Dada en la misión"];
    Ib[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    Ib[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    Ib[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    Ib[177] = ["Gema Azul", "Para gente muy amable"];
    Ib[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Ib[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Ib[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    Ib[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    Ib[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    Ib[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    Ib[128] = ["Botella Vacia", "La puedes llenar de agua"];
    Ib[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    Ib[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    Ib[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    Ib[120] = ["Hoja", "Usada para hacer un libro"];
    Ib[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    Ib[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    Ib[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    Ib[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    Ib[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    Ib[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    Ib[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    Ib[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    Ib[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    Ib[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    Ib[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    Ib[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    Ib[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    Ib[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    Ib[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    Ib[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    Ib[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    Ib[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    Ib[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    Ib[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    Ib[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    Ib[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    Ib[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    Ib[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    Ib[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    Ib[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Ib[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Ib[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    Ib[300] = "No puedes unirte a este servidor";
    Ib[301] = "Expulsado: ";
    Ib[302] = "Tu llave ya está usada";
    Ib[303] = "Tu llave está mal";
    Ib[304] = "Tienes una versión antigua, limpia tu cache";
    Ib[305] = "No hay mas recursos";
    Ib[306] = "Has sobrevivido 1 día";
    Ib[307] = "Has sobrevivido ";
    Ib[308] = " días";
    Ib[309] = "Estás muerto ;-;";
    Ib[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    Ib[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    Ib[312] = "Recurso vacio";
    Ib[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    Ib[314] = " está muerto";
    Ib[315] = "Esta no es la herramienta correcta";
    Ib[316] = "Te has unido a un equipo";
    Ib[317] = "Estás muerto";
    Ib[318] = " se unió al equipo";
    Ib[319] = "Tu equipo ha sido destruido";
    Ib[320] = "Has dejado el equipo";
    Ib[321] = " dejo el equipo ";
    Ib[322] = "Alguien te robó tu token :>";
    Ib[323] = "Elige un servidor";
    Ib[324] = "jugadores";
    Ib[325] = "total de jugadores";
    Ib[326] = "Jugadores en este modo de juego";
    Ib[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    At[0] = ["Has muerto por ninguna razón"];
    At[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    At[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    At[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    At[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    At[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    At[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    At[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    At[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    At[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    At[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    At[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    At[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    At[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    At[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    At[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    At[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    At[17] = ["Tu piel se cayó, el sol te quemó."];
    At[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    At[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    At[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    At[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ΔⵠⲆⲆᐃ = "Uuunnnggg";
    ⵠⵠⲆⵠᐃΔⵠ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  const Tb = 17;
  function fb(b, c, d, e) {
    const f = ~(b & 39819) & b | ~(b & 39819) & 39819;
    const i = (c | 49552) & ~(c & 49552);
    const a = ~(d & 59029) & (d | 59029);
    const j = e ^ 1304;
    const k = kb(f, i, a, j, f, i);
    const h = Ww(a, j, f, i);
    return (8 << ((k ^ h) >> 8 & 255)) + (16 << ((k ^ h) & 255)) + (24 << ((k ^ h) >> 24 & 255)) + (0 << ((k ^ h) >> 16 & 255));
  }
  function zb(a, b, c, d) {
    xi(yt, a, b, c, d);
    return ((234 + (df(sb[0], sb[1], sb[2]) ^ df(sb[3], sb[0], sb[1]))) * 48271 + 0) % 2147483647;
  }
  function yb() {
    Ib[184] = ["You feel a great power emanating from this orb"];
    At[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["Hand"];
    Ib[140] = ["Boden", "Dreckig!"];
    Ib[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    Ib[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    Ib[108] = ["Stein", "Auch Fels gennant"];
    Ib[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    Ib[112] = ["Diamant", "Was wirst du daraus machen?"];
    Ib[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    Ib[131] = ["Mehl", "wird fürs Backen gebraucht"];
    Ib[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    Ib[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    Ib[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    Ib[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    Ib[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    Ib[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    Ib[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    Ib[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    Ib[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    Ib[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    Ib[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    Ib[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ib[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    Ib[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ib[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    Ib[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ib[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    Ib[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ib[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    Ib[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    Ib[194] = ["Dornenbusch", "Es sticht!"];
    Ib[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    Ib[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    Ib[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    Ib[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    Ib[2] = ["Hasenfell", "Der Hase war so süß..."];
    Ib[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    Ib[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    Ib[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    Ib[139] = ["Schuppen", "Es riecht wie Fisch!"];
    Ib[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    Ib[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    Ib[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    Ib[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    Ib[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    Ib[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    Ib[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    Ib[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    Ib[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    Ib[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    Ib[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Ib[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Ib[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    Ib[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    Ib[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    Ib[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    Ib[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    Ib[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Ib[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Ib[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Ib[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    Ib[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    Ib[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    Ib[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    Ib[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    Ib[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    Ib[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    Ib[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    Ib[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    Ib[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    Ib[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    Ib[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Ib[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Ib[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Ib[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    Ib[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    Ib[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    Ib[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    Ib[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    Ib[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    Ib[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    Ib[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    Ib[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ib[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    Ib[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    Ib[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    Ib[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    Ib[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    Ib[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ib[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ib[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ib[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    Ib[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    Ib[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    Ib[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    Ib[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    Ib[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    Ib[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    Ib[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    Ib[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    Ib[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    Ib[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    Ib[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    Ib[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    Ib[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    Ib[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    Ib[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    Ib[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    Ib[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    Ib[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    Ib[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    Ib[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    Ib[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    Ib[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    Ib[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    Ib[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    Ib[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    Ib[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    Ib[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    Ib[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    Ib[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    Ib[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    Ib[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    Ib[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    Ib[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Ib[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Ib[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    Ib[300] = "Du kannst diesem Server nicht beitreten";
    Ib[301] = "Gekickt: ";
    Ib[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    Ib[303] = "Dein Schlüssel ist falsch";
    Ib[304] = "Deine Version ist veraltet, säubere dein Cache";
    Ib[305] = "Es gibt keine neuen Ressourcen";
    Ib[306] = "Du hast einen Tag überlebt";
    Ib[307] = "Du hast überlebt ";
    Ib[308] = " Tage";
    Ib[309] = "Du bist gestorben ;-;";
    Ib[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    Ib[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    Ib[312] = "Ressource ist leer";
    Ib[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    Ib[314] = " ist gestorben";
    Ib[315] = "Das ist nicht das richtige Werkzeug";
    Ib[316] = "Du bist einem Team beigetreten";
    Ib[317] = "Du bist gestorben";
    Ib[318] = " ist dem Team beigetreten";
    Ib[319] = "Dein Team wurde zerstört";
    Ib[320] = "Du hast das Team verlassen";
    Ib[321] = " hat das Team verlassen";
    Ib[322] = "Jemand hat dein Token gestohlen :>";
    Ib[323] = "Suche dir ein Server aus";
    Ib[324] = "Spieler";
    Ib[325] = "alle Spieler";
    Ib[326] = "Spieler in diesem Modus";
    Ib[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    At[0] = ["Du wurdest ohne Grund getötet"];
    At[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    At[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    At[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    At[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    At[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    At[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    At[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    At[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    At[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    At[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    At[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    At[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    At[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    At[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    At[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    At[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    At[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    At[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    At[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    At[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    At[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ΔⵠⲆⲆᐃ = "Uuunnnggg";
    ⵠⵠⲆⵠᐃΔⵠ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const wb = 3;
  function Pb() {
    Ib[184] = ["You feel a great power emanating from this orb"];
    At[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["Ręka"];
    Ib[140] = ["Ziemia", "Brudna!"];
    Ib[126] = ["Piasek", "Mam go w oczach!"];
    Ib[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    Ib[108] = ["Kamień", "Także nazywany skałą"];
    Ib[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    Ib[112] = ["Diament", "Co z nim zrobisz?"];
    Ib[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    Ib[131] = ["Mąka", "Używana w gotowaniu"];
    Ib[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    Ib[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    Ib[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    Ib[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    Ib[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    Ib[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    Ib[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    Ib[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    Ib[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    Ib[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    Ib[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    Ib[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ib[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    Ib[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ib[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    Ib[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ib[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    Ib[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ib[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    Ib[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    Ib[194] = ["Kolczasty krzew", "Kłuje!"];
    Ib[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    Ib[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    Ib[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    Ib[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    Ib[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    Ib[178] = ["Skóra", "Jesteś fabryką chleba"];
    Ib[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    Ib[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    Ib[139] = ["Łuski", "Pachnie jak ryba!"];
    Ib[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    Ib[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    Ib[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    Ib[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    Ib[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    Ib[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    Ib[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    Ib[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    Ib[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    Ib[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    Ib[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Ib[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Ib[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    Ib[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    Ib[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    Ib[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    Ib[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    Ib[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Ib[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Ib[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Ib[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    Ib[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    Ib[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    Ib[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    Ib[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    Ib[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    Ib[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    Ib[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    Ib[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    Ib[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    Ib[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    Ib[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Ib[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Ib[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Ib[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    Ib[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    Ib[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    Ib[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    Ib[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    Ib[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    Ib[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    Ib[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    Ib[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    Ib[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    Ib[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    Ib[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    Ib[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    Ib[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    Ib[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    Ib[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    Ib[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    Ib[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ib[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    Ib[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    Ib[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    Ib[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    Ib[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    Ib[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ib[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ib[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ib[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    Ib[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    Ib[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    Ib[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    Ib[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    Ib[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    Ib[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    Ib[120] = ["Papier", "Używany w tworzeniu książki"];
    Ib[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    Ib[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    Ib[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    Ib[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    Ib[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    Ib[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    Ib[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    Ib[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    Ib[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    Ib[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    Ib[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    Ib[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    Ib[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    Ib[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    Ib[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    Ib[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    Ib[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    Ib[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    Ib[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    Ib[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    Ib[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    Ib[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    Ib[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    Ib[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    Ib[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    Ib[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Ib[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Ib[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    Ib[300] = "Nie możesz dołączyć do tego serwera";
    Ib[301] = "Wyrzucony: ";
    Ib[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    Ib[303] = "Twój klucz jest nieprawidłowy";
    Ib[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    Ib[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    Ib[306] = "Przeżyłeś 1 dzień";
    Ib[307] = "Przeżyłeś ";
    Ib[308] = " dni";
    Ib[309] = "Jesteś martwy ;-;";
    Ib[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    Ib[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    Ib[312] = "Źródło jest puste";
    Ib[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    Ib[314] = " jest martwy";
    Ib[315] = "To nie jest właściwe narzędzie";
    Ib[316] = "Dołączyłeś do drużyny";
    Ib[317] = "Jesteś martwy";
    Ib[318] = " dołączył do drużyny";
    Ib[319] = "Twoja drużyna została zniszczona";
    Ib[320] = " Opuściłeś drużynę";
    Ib[321] = " opuścił drużynę";
    Ib[322] = "Ktoś ukradł twój żeton :>";
    Ib[323] = "Wybierz serwer";
    Ib[324] = "graczy";
    Ib[325] = "wszystkich graczy";
    Ib[326] = "graczy w tym trybie";
    Ib[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    At[0] = ["Zostałeś zabity bez powodu"];
    At[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    At[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    At[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    At[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    At[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    At[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    At[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    At[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    At[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    At[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    At[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    At[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    At[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    At[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    At[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    At[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    At[17] = ["Twoja skóra odpada, słońce cię zabija."];
    At[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    At[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    At[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    At[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ΔⵠⲆⲆᐃ = "Uuunnnggg";
    ⵠⵠⲆⵠᐃΔⵠ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  function kb(b, c, d, e, f, g) {
    const a = (8 << (b & 255)) + (24 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (0 << (b >> 16 & 255));
    const i = ~(c & 11165) & (c | 11165);
    const j = _p(a, i, (d + 7770) % 65447, (e | 22009) & ~(e & 22009), f ^ 28043, (46093 + g) % 65295);
    Jk(a, i);
    return (j | 60452) & ~(j & 60452);
  }
  const Ab = 5;
  const xb = 1;
  const Jb = 4;
  function Mb(b, c, d, e, f) {
    const i = (8 << (b >> 0 & 255)) + (0 << (b >> 24 & 255)) + (24 << (b >> 16 & 255)) + (16 << (b >> 8 & 255));
    const a = (24 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c & 255)) + (0 << (c >> 24 & 255));
    const j = (24 << (d & 255)) + (16 << (d >> 24 & 255)) + (0 << (d >> 8 & 255)) + (8 << (d >> 16 & 255));
    const k = ~(e & 2995) & 2995 | ~(e & 2995) & e;
    const h = _p(i, a, j, k, (0 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (16 << (f >> 24 & 255)) + (24 << (f & 255)), i);
    (function (b, c, d) {
      const e = (b | 54468) & ~(b & 54468);
      const f = c ^ 1751;
      const g = (1013904223 + (d + 25972) * 1664525) % 4294967296;
      const a = vk(e, f, g, e, f);
      const h = Vb(g, e, f);
    })(a, j, k);
    return ~(h & 38337) & (h | 38337);
  }
  function Bb(b, c, d, e, f) {
    const i = ~(b & 38040) & b | ~(b & 38040) & 38040;
    const a = c ^ 45881;
    const j = (12345 + (d + 50800) * 1103515245) % 2147483648;
    const k = ~(e & 61384) & e | ~(e & 61384) & 61384;
    const h = ~(f & 24322) & f | ~(f & 24322) & 24322;
    const g = Ww(i, a, j, k);
    ft(h, i, a, j, k);
    return g ^ 56020;
  }
  function Eb(a, b, c) {
    Ij(yt, a, b, c);
    const d = zb(sb[0], sb[1], sb[2], sb[0]);
    zb(sb[1], sb[2], sb[0], sb[1]);
    return (d | 2949) & ~(d & 2949);
  }
  var Db = function () {
    Ib[184] = ["You feel a great power emanating from this orb"];
    At[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " RETOUR AU JEU";
    Ib[329] = " Partage sur Twitter";
    Ib[330] = " Partage sur Facebook";
    Ib[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Tués";
    Ib[335] = "Jours survécus";
    Ib[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    Ib[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    Ib[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    Ib[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    Ib[7] = ["Main"];
    Ib[140] = ["Terre", "C'est sale!"];
    Ib[126] = ["Sable", "J'en ai dans les yeux"];
    Ib[109] = ["Bois", "Tu n'en auras jamais trop!"];
    Ib[108] = ["Pierre", "Aussi appelée roche"];
    Ib[111] = ["Or", "Sois généreux, donne en aux autres"];
    Ib[112] = ["Diamant", "Comme tes yeux! wesh"];
    Ib[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    Ib[131] = ["Farine", "Utile pour la cuisine"];
    Ib[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    Ib[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    Ib[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    Ib[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    Ib[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    Ib[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    Ib[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    Ib[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    Ib[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    Ib[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    Ib[201] = ["Guirlandes", "Utilisable sur les toits"];
    Ib[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ib[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    Ib[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ib[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    Ib[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ib[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    Ib[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ib[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    Ib[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    Ib[194] = ["Ronces", "Ça pique!"];
    Ib[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    Ib[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    Ib[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    Ib[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    Ib[2] = ["Peau de lapin", "Vous êtes un monstre"];
    Ib[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    Ib[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    Ib[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    Ib[139] = ["Écailles", "Ça sent le poisson!"];
    Ib[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    Ib[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    Ib[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    Ib[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    Ib[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    Ib[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    Ib[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    Ib[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    Ib[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    Ib[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    Ib[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    Ib[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    Ib[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    Ib[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    Ib[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    Ib[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    Ib[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    Ib[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    Ib[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    Ib[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    Ib[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    Ib[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    Ib[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    Ib[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    Ib[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    Ib[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    Ib[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    Ib[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    Ib[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    Ib[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    Ib[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    Ib[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    Ib[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    Ib[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    Ib[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    Ib[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    Ib[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    Ib[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    Ib[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    Ib[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    Ib[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    Ib[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    Ib[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    Ib[185] = ["Orbe du Dragon", "Donné en Quête"];
    Ib[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    Ib[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    Ib[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    Ib[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    Ib[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    Ib[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    Ib[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    Ib[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    Ib[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    Ib[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    Ib[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    Ib[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    Ib[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    Ib[29] = ["Sac", "Plus de place dans ton inventaire!"];
    Ib[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    Ib[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    Ib[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    Ib[148] = ["Cadenas", "Pour verrouiller un coffre"];
    Ib[158] = ["Clé", "Pour déverrouiller un coffre"];
    Ib[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    Ib[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    Ib[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    Ib[190] = ["Toit", "Te cache un peu et te réchauffe"];
    Ib[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    Ib[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    Ib[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    Ib[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    Ib[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    Ib[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    Ib[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    Ib[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    Ib[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    Ib[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    Ib[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    Ib[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    Ib[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    Ib[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    Ib[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    Ib[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    Ib[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    Ib[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Ib[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Ib[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    Ib[300] = "Tu ne peux pas rejoindre le serveur";
    Ib[301] = "Expulsé: ";
    Ib[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    Ib[303] = "Ta clé est fausse";
    Ib[304] = "Tu as une vieille version, rafraichis tes caches";
    Ib[305] = "Il n'y a plus de nouvelles ressources";
    Ib[306] = "Tu as survécu 1 jour";
    Ib[307] = "Tu as survécu ";
    Ib[308] = " jours";
    Ib[309] = "Tu es mort ;-;";
    Ib[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    Ib[311] = "Le serveur est complet! Spam le bouton jouer";
    Ib[312] = "Cette ressource est vide";
    Ib[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    Ib[314] = " est mort";
    Ib[315] = "Ce n'est pas le bon outil";
    Ib[316] = "Tu as rejoins une équipe";
    Ib[317] = "Tu es mort";
    Ib[318] = " a rejoint l'équipe";
    Ib[319] = "Ton équipe a été détruite";
    Ib[320] = "Tu as quitté l'équipe";
    Ib[321] = " a quitté l'équipe";
    Ib[322] = "Quelqu'un a volé ton token :>";
    Ib[323] = "Choisis un serveur";
    Ib[324] = "joueurs";
    Ib[325] = "joueurs";
    Ib[326] = "joueurs dans ce mode";
    Ib[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    At[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    At[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    At[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    At[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    At[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    At[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    At[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    At[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    At[8] = ["Cet ours voulait juste un câlin."];
    At[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    At[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    At[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    At[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    At[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    At[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    At[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    At[16] = ["Un kraken a 'kraké' tes os."];
    At[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    At[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    At[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    At[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    At[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ΔⵠⲆⲆᐃ = "Uuunnnggg";
    ⵠⵠⲆⵠᐃΔⵠ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  };
  var Ib = [];
  for (var Sb = 0; Sb < 344; Sb++) {
    Ib[Sb] = "";
  }
  var At = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      ut();
    } else if (a === "Français") {
      Db();
    } else if (a === "Deutsch") {
      yb();
    } else if (a === "Español") {
      Cb();
    } else if (a === "Português") {
      pb();
    } else if (a === "Русский") {
      xt();
    } else if (a === "Polski") {
      Pb();
    }
    ΔⲆΔᐃΔ = [];
    nx.ᐃⵠⲆΔ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  const _b = 16;
  $q = "EN";
  const Fb = 16;
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      $q = "RU";
      break;
    case "en":
      $q = "EN";
      break;
    case "es":
      $q = "SP";
      break;
    case "fr":
      $q = "FR";
      break;
    case "pl":
      $q = "PL";
      break;
    case "de":
      $q = "DE";
      break;
    case "pt":
      $q = "PT";
  }
  const Rb = 7;
  function jb(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Gb(a) {
    return rg.String.fromCharCode(a);
  }
  var Wb;
  if ($q === "FR") {
    $(".md-languages label button").text("Français");
    Wb = Db;
  } else if ($q === "PL") {
    $(".md-languages label button").text("Polski");
    Wb = Pb;
  } else if ($q === "PT") {
    $(".md-languages label button").text("Português");
    Wb = pb;
  } else if ($q === "SP") {
    $(".md-languages label button").text("Español");
    Wb = Cb;
  } else if ($q === "RU") {
    $(".md-languages label button").text("Русский");
    Wb = xt;
  } else if ($q === "DE") {
    $(".md-languages label button").text("Deutsch");
    Wb = yb;
  } else {
    $(".md-languages label button").text("English");
    Wb = ut;
  }
  const Bt = 1;
  const qb = 18;
  function Ob(b, c, d, e, f) {
    Li(yt, b, c, d, e, f);
    const g = Kb(sb[0], sb[1]);
    const a = function (a, b) {
      Qj(yt, a, b);
      const c = Zf(sb[0], sb[1], sb[0], sb[1], sb[0]);
      Zf(sb[1], sb[0], sb[1], sb[0], sb[1]);
      return ~(c & 48807) & (c | 48807);
    }(sb[2], sb[3]);
    return (0 << ((g ^ a) >> 8 & 255)) + (16 << ((g ^ a) & 255)) + (24 << ((g ^ a) >> 24 & 255)) + (8 << ((g ^ a) >> 16 & 255));
  }
  ᐃᐃ = {
    ⲆᐃΔⵠⵠᐃⲆᐃΔ: "img/logo.png",
    ΔᐃΔⵠᐃΔΔ: "img/mapday.png",
    ᐃⵠᐃⲆΔⵠⲆ: "img/mapnight.png",
    ΔⵠⵠⵠⲆⵠⲆⲆⵠ: "img/bigzday.png",
    ⲆⲆⵠΔᐃΔⲆΔᐃ: "img/bigznight.png",
    ⲆᐃᐃᐃΔⵠⵠ: "img/bigday-river1.png",
    ⵠⲆⲆⲆⵠΔⲆⲆⲆ: "img/bigday-lake.png",
    ⵠⵠΔΔⲆⲆⲆ: "img/bigday-berry.png",
    ΔⲆᐃΔᐃⵠⵠ: "img/bigday-stone1.png",
    ⵠⵠⲆᐃⲆᐃⵠ: "img/bigday-stone2.png",
    ⵠᐃⲆΔᐃΔΔ: "img/bigday-gold1.png",
    ⵠⲆⲆⵠΔⵠΔ: "img/bigday-gold2.png",
    ΔⲆΔᐃᐃⵠⵠ: "img/bigday-emerald1.png",
    ⲆⵠᐃᐃⲆᐃⵠ: "img/bigday-emerald2.png",
    ⵠⲆΔΔⲆⵠΔ: "img/bigday-amethyst.png",
    ⵠΔᐃⵠᐃΔᐃ: "img/bigday-bear.png",
    ⵠⵠⲆⲆⵠΔΔ: "img/bigday-cave.png",
    ΔᐃΔΔᐃⵠΔ: "img/bigday-diamond.png",
    ⲆⲆⲆᐃⵠⲆⲆ: "img/bigday-island.png",
    ⵠᐃⲆⲆⵠⵠⵠ: "img/bigday-reidite.png",
    ⲆᐃⵠⵠᐃⵠΔ: "img/bigday-spider.png",
    ⲆᐃᐃΔΔΔᐃ: "img/bigday-wolf.png",
    ᐃⲆᐃΔⵠⵠΔ: "img/bigday-fir-tree.png",
    ⵠΔᐃᐃΔⵠΔ: "img/bigday-fox.png",
    ᐃΔⵠΔⲆΔᐃ: "img/bigday-kraken.png",
    ᐃᐃⵠᐃⵠᐃⲆ: "img/bigday-piranha.png",
    ⲆΔΔⲆᐃⵠⲆ: "img/bigday-cactus.png",
    ⵠᐃⵠΔΔⵠⵠ: "img/bigday-magma.png",
    ⲆⲆΔⵠⵠⲆⲆ: "img/bigday-river1.png",
    ⲆᐃⲆΔⵠᐃΔⲆⲆ: "img/bignight-lake.png",
    ⵠⵠⲆΔⵠΔᐃⵠⲆ: "img/bignight-berry.png",
    ᐃΔⲆᐃⵠⵠᐃ: "img/bignight-stone1.png",
    ΔΔⲆᐃᐃΔᐃ: "img/bignight-stone2.png",
    ΔⲆΔⲆᐃⵠⲆ: "img/bignight-gold1.png",
    ⲆⵠᐃᐃᐃΔⵠ: "img/bignight-gold2.png",
    ⵠᐃⲆᐃⵠⲆⵠ: "img/bignight-emerald1.png",
    ᐃΔⲆⲆⲆⲆⵠ: "img/bignight-emerald2.png",
    ᐃⲆⲆⵠᐃⲆⲆ: "img/bignight-amethyst.png",
    ⲆⵠⲆⲆⲆΔⵠ: "img/bignight-bear.png",
    ⵠΔⲆⲆⲆΔᐃ: "img/bignight-cave.png",
    ΔΔᐃΔᐃᐃᐃ: "img/bignight-diamond.png",
    ⲆⵠⲆⲆⲆⵠⵠ: "img/bignight-island.png",
    ⲆⵠⵠⲆⵠⵠⵠ: "img/bignight-reidite.png",
    ΔⲆⵠΔᐃⵠⲆ: "img/bignight-spider.png",
    ⵠⲆΔᐃⲆⵠⲆ: "img/bignight-wolf.png",
    ⲆⲆΔᐃⲆΔⵠ: "img/bignight-fir-tree.png",
    ⲆⲆᐃⵠⵠΔΔ: "img/bignight-fox.png",
    ⲆⵠⲆⲆⵠⲆΔ: "img/bignight-kraken.png",
    ΔΔⵠⵠⲆⵠᐃ: "img/bignight-piranha.png",
    ΔⵠⲆⲆⲆⵠⲆ: "img/bignight-cactus.png",
    ⵠⵠΔⵠⵠⲆⲆ: "img/bignight-magma.png",
    ⵠⲆᐃⲆⵠⲆⵠ: "img/bigday-desert.png",
    ⲆΔⲆⵠᐃⵠⲆ: "img/bigday-winter.png",
    ⵠⲆⲆΔⵠⵠⲆ: "img/bigday-lava.png",
    ΔⲆΔᐃⲆⵠᐃ: "img/bigday-forest.png",
    ⲆⲆᐃΔⵠᐃΔ: "img/bignight-desert.png",
    ᐃⲆⲆⲆⵠⵠⵠ: "img/bignight-winter.png",
    ᐃⲆⲆⵠΔⵠⵠ: "img/bignight-lava.png",
    ΔⲆᐃΔⵠᐃΔ: "img/bignight-forest.png",
    ᐃᐃΔⵠᐃᐃΔ: "img/day-river-wave.png",
    ᐃⲆⵠΔᐃΔᐃ: "img/night-river-wave.png",
    ΔⲆⲆⵠⵠⵠΔ: "img/day-fog0.png",
    ⲆᐃⲆⵠᐃΔⵠ: "img/day-fog1.png",
    ⲆⲆⵠⲆΔᐃΔ: "img/day-fog2.png",
    ⵠⲆᐃᐃⵠΔⲆ: "img/night-fog0.png",
    ΔⲆΔⲆΔⵠⲆ: "img/night-fog1.png",
    ᐃⲆⵠᐃᐃᐃⲆ: "img/night-fog2.png",
    ᐃⵠᐃᐃⲆⵠⲆ: "img/day-fogdesert0.png",
    ⵠⲆⲆΔΔΔΔ: "img/day-fogdesert1.png",
    ⲆᐃΔⵠⲆⲆᐃ: "img/day-fogdesert2.png",
    ⵠⲆⲆⲆᐃΔᐃ: "img/night-fogdesert0.png",
    ⲆⵠⵠⲆᐃⵠΔ: "img/night-fogdesert1.png",
    Ⲇⵠⵠᐃᐃᐃⵠ: "img/night-fogdesert2.png",
    ΔΔᐃᐃΔΔΔ: "img/day-cross-server.png",
    ᐃⵠΔᐃΔⵠⵠ: "img/day-here-server.png",
    ᐃΔΔᐃᐃᐃΔ: "img/day-finish-server.png",
    ΔⵠⵠᐃΔᐃⲆ: "img/day-item-server.png",
    ΔᐃΔΔⵠⵠΔ: "img/day-skull-server.png",
    ᐃᐃᐃΔᐃᐃΔ: "img/night-cross-server.png",
    ⵠⵠⲆⲆⵠᐃⲆ: "img/night-here-server.png",
    ᐃⲆⵠⲆⵠᐃΔ: "img/night-finish-server.png",
    ΔⵠⲆⲆΔⵠΔ: "img/night-item-server.png",
    ⲆⲆⵠΔⲆᐃⵠ: "img/night-skull-server.png",
    ΔⵠⲆⲆⲆⵠⵠ: "img/day-reidite0.png",
    ⲆᐃⲆΔᐃᐃᐃ: "img/night-reidite0.png",
    ΔⲆΔᐃᐃΔΔ: "img/day-reidite1.png",
    ⲆⵠΔΔᐃⲆᐃ: "img/night-reidite1.png",
    ᐃΔᐃⵠΔΔⲆ: "img/day-reidite2.png",
    ΔⲆᐃΔⲆⲆⲆ: "img/night-reidite2.png",
    ⲆΔΔᐃΔⲆᐃ: "img/day-lava1.png",
    ⲆΔΔΔᐃᐃⲆ: "img/night-lava1.png",
    ⵠᐃΔΔⲆⵠⵠ: "img/day-lava2.png",
    ⵠⵠⵠⲆⵠⲆᐃ: "img/night-lava2.png",
    ⲆᐃⵠⵠᐃΔᐃ: "img/day-lava3.png",
    ᐃⵠΔⵠⲆΔⵠ: "img/night-lava3.png",
    ᐃⵠⵠᐃⲆⵠΔ: "img/day-lava4.png",
    ⲆⵠⵠⲆⲆⵠΔ: "img/night-lava4.png",
    ⲆⲆΔᐃΔⲆⵠ: "img/day-lava5.png",
    ⵠᐃⵠⵠⲆᐃⲆ: "img/night-lava5.png",
    ⵠⲆⲆⲆⲆΔⵠ: "img/day-lava6.png",
    ΔⲆⲆᐃⲆⲆᐃ: "img/night-lava6.png",
    ΔⲆᐃⵠΔⲆⲆ: "img/day-lava-ground1.png",
    ⵠᐃⵠΔᐃⵠᐃ: "img/night-lava-ground1.png",
    ΔⵠᐃⲆⲆⵠᐃ: "img/day-lava-ground2.png",
    ⵠᐃᐃΔⲆᐃⵠ: "img/night-lava-ground2.png",
    ⲆⲆⵠⲆⵠⲆᐃ: "img/day-lava-ground3.png",
    ⲆⲆᐃΔⲆᐃⲆ: "img/night-lava-ground3.png",
    ᐃⲆⲆⲆᐃⲆᐃ: "img/day-lava-ground4.png",
    ⵠᐃΔⲆⵠⲆⵠ: "img/night-lava-ground4.png",
    ΔᐃΔᐃⲆⵠⲆ: "img/day-lava-ground5.png",
    ΔⲆΔᐃΔΔᐃ: "img/night-lava-ground5.png",
    ⵠⲆΔⵠΔⵠΔ: "img/day-lava-ground6.png",
    ᐃⲆΔⲆᐃᐃΔ: "img/night-lava-ground6.png",
    ΔᐃᐃΔⵠⲆⵠ: "img/day-fire-mob.png",
    ᐃᐃΔᐃⵠⵠⲆ: "img/night-fire-mob.png",
    ⵠΔᐃᐃΔⵠᐃ: "img/hurt-fire-mob.png",
    ᐃⵠᐃΔΔⲆⲆ: "img/day-diamond-protection.png",
    ᐃΔᐃⲆΔⵠⵠ: "img/night-diamond-protection.png",
    ⵠⵠΔΔᐃᐃⵠ: "img/day-hand-diamond-protection.png",
    ⵠⵠⵠⵠⲆᐃⵠ: "img/night-hand-diamond-protection.png",
    ⵠᐃΔΔⲆⵠⲆ: "img/inv-diamond-protection-out.png",
    ⲆΔΔⲆᐃⲆΔ: "img/inv-diamond-protection-in.png",
    ᐃⵠᐃᐃⲆⲆᐃ: "img/inv-diamond-protection-click.png",
    ⲆΔΔᐃⵠⵠΔ: "img/day-amethyst-protection.png",
    ΔᐃΔⲆᐃᐃⵠ: "img/night-amethyst-protection.png",
    ⲆΔⵠⵠⵠΔⲆΔᐃ: "img/day-hand-amethyst-protection.png",
    ΔⲆⲆⲆⵠΔΔᐃⲆ: "img/night-hand-amethyst-protection.png",
    ΔΔΔΔᐃⵠΔ: "img/inv-amethyst-protection-out.png",
    ⲆΔⵠᐃΔⲆⲆ: "img/inv-amethyst-protection-in.png",
    ⲆᐃᐃΔᐃᐃΔ: "img/inv-amethyst-protection-click.png",
    ⲆΔⲆΔⵠⵠⲆ: "img/day-reidite-sword.png",
    ᐃΔΔⵠⲆⲆⵠ: "img/night-reidite-sword.png",
    ΔⲆΔΔᐃᐃⲆ: "img/inv-reidite-sword-out.png",
    ⲆΔⵠⲆⵠⲆⲆ: "img/inv-reidite-sword-in.png",
    ΔΔⲆⵠⲆⲆᐃ: "img/inv-reidite-sword-click.png",
    ᐃⵠⲆᐃⵠΔⵠ: "img/inv-reidite-out.png",
    ⵠᐃΔⵠⵠΔΔ: "img/inv-reidite-in.png",
    ᐃⲆᐃᐃⵠⲆⵠ: "img/inv-reidite-click.png",
    ⵠᐃⵠⵠᐃΔΔ: "img/inv-flame-out.png",
    ΔᐃⵠΔᐃⵠⵠ: "img/inv-flame-in.png",
    ⲆⲆΔⲆⵠⵠΔ: "img/inv-flame-click.png",
    ΔᐃΔᐃⵠΔⵠ: "img/day-magma-buble0.png",
    ᐃᐃᐃⲆⲆΔⵠ: "img/night-magma-buble0.png",
    ᐃⵠⵠᐃᐃΔⲆ: "img/day-magma-buble1.png",
    ᐃΔⵠⲆⲆΔΔ: "img/night-magma-buble1.png",
    ΔⲆⵠⵠΔⵠⵠ: "img/day-magma-buble2.png",
    ⵠⵠᐃⵠΔᐃᐃ: "img/night-magma-buble2.png",
    ᐃᐃⲆⲆⵠⲆⲆ: "img/day-lava-dragon.png",
    ⵠΔⵠΔⲆⵠⲆ: "img/night-lava-dragon.png",
    ΔᐃᐃⵠⵠΔⵠᐃⵠ: "img/day-fire-dragon.png",
    ΔⵠⲆᐃᐃⵠⲆᐃⲆ: "img/night-fire-dragon.png",
    ⲆᐃΔᐃᐃⵠᐃ: "img/hurt-lava-dragon.png",
    ⲆⵠᐃᐃΔᐃᐃ: "img/day-lava-wing-left.png",
    ΔᐃⲆΔⵠⵠⲆ: "img/night-lava-wing-left.png",
    ⲆⵠⵠΔⲆΔⵠ: "img/day-lava-wing-right.png",
    ⲆⵠᐃⵠⵠΔⲆ: "img/night-lava-wing-right.png",
    ⲆⲆⲆᐃΔΔⲆ: "img/hurt-lava-wing-left.png",
    ΔΔΔⲆΔᐃⲆ: "img/hurt-lava-wing-right.png",
    ⵠΔΔⵠΔⵠⵠ: "img/day-reidite-spear.png",
    Δⵠᐃⵠⵠⵠᐃ: "img/night-reidite-spear.png",
    ΔⵠⲆⲆΔⵠⲆ: "img/inv-reidite-spear-out.png",
    ΔᐃΔᐃⵠΔΔ: "img/inv-reidite-spear-in.png",
    ⵠΔΔⵠⵠⵠⲆ: "img/inv-reidite-spear-click.png",
    ᐃΔΔΔᐃⲆΔ: "img/day-reidite-helmet.png",
    ᐃⵠᐃⵠᐃⲆΔ: "img/night-reidite-helmet.png",
    ⲆⵠⵠᐃΔΔⲆ: "img/inv-reidite-helmet-out.png",
    ⵠᐃⵠᐃΔⵠⵠ: "img/inv-reidite-helmet-in.png",
    ⲆᐃⵠΔⲆⵠⲆ: "img/inv-reidite-helmet-click.png",
    ᐃⵠΔⵠΔᐃᐃ: "img/day-hand-reidite-protection.png",
    ⲆᐃᐃᐃΔᐃⲆ: "img/night-hand-reidite-protection.png",
    ᐃᐃⵠᐃΔⵠᐃ: "img/day-reidite-protection.png",
    ⲆᐃⲆⲆⲆⲆⲆ: "img/night-reidite-protection.png",
    ⵠⵠⲆⵠΔⵠⲆ: "img/inv-reidite-protection-out.png",
    ⲆΔᐃΔⵠⲆᐃ: "img/inv-reidite-protection-in.png",
    ΔΔΔⵠΔΔΔ: "img/inv-reidite-protection-click.png",
    ΔΔⵠᐃᐃⲆᐃ: "img/day-lava-dragon-sword.png",
    ΔᐃⵠᐃΔⲆⲆ: "img/night-lava-dragon-sword.png",
    ⲆᐃⵠⲆᐃⲆⲆ: "img/inv-lava-dragon-sword-out.png",
    ⵠⲆⲆⲆΔᐃⵠ: "img/inv-lava-dragon-sword-in.png",
    ᐃⵠΔᐃΔⲆᐃ: "img/inv-lava-dragon-sword-click.png",
    ⵠᐃⲆΔⲆⵠⵠ: "img/day-lava-spear.png",
    ᐃⵠⲆⲆΔΔΔ: "img/night-lava-spear.png",
    ΔⲆᐃⲆⲆᐃΔ: "img/inv-lava-spear-out.png",
    Ⲇⵠⵠⵠⵠⵠⵠ: "img/inv-lava-spear-in.png",
    ⵠⵠⵠᐃⵠᐃⲆ: "img/inv-lava-spear-click.png",
    ⲆΔⲆΔᐃᐃⲆ: "img/day-lava-helmet.png",
    ᐃⲆΔⵠⵠᐃⲆ: "img/night-lava-helmet.png",
    ⲆⵠⲆᐃⲆⲆⵠ: "img/inv-lava-helmet-out.png",
    ᐃⵠΔⲆⲆⵠΔ: "img/inv-lava-helmet-in.png",
    ⵠⲆᐃⵠᐃⵠΔ: "img/inv-lava-helmet-click.png",
    ᐃⵠᐃᐃⲆᐃⲆ: "img/day-witch-hat.png",
    ᐃⵠᐃᐃᐃᐃⵠ: "img/night-witch-hat.png",
    ⲆⵠΔⵠⲆⲆᐃ: "img/inv-witch-hat-out.png",
    ᐃⵠⵠᐃⲆᐃΔ: "img/inv-witch-hat-in.png",
    ΔΔⵠΔᐃⲆⵠ: "img/inv-witch-hat-click.png",
    ᐃⲆΔⲆΔⲆⲆ: "img/day-nimbus2000.png",
    ΔΔⵠⲆᐃⵠⵠ: "img/night-nimbus2000.png",
    ᐃᐃⲆΔᐃᐃΔ: "img/inv-nimbus2000-out.png",
    ⲆⵠⵠⵠⵠΔᐃ: "img/inv-nimbus2000-in.png",
    ⲆⲆΔΔᐃⵠⲆ: "img/inv-nimbus2000-click.png",
    ⲆⵠΔΔⵠⲆᐃ: "img/day-accessory1-pacques.png",
    ᐃΔΔᐃⵠⲆᐃ: "img/night-accessory1-pacques.png",
    ΔᐃⵠⵠΔᐃΔ: "img/day-accessory2-pacques.png",
    ⲆⲆⲆΔᐃΔᐃ: "img/night-accessory2-pacques.png",
    ᐃᐃᐃⲆⵠⲆⵠ: "img/day-accessory3-pacques.png",
    ⵠΔⲆⵠⲆΔⲆ: "img/night-accessory3-pacques.png",
    ΔᐃᐃᐃΔᐃΔ: "img/day-accessory5-pacques.png",
    ΔΔⲆⲆⲆΔⲆ: "img/night-accessory5-pacques.png",
    ⵠⵠΔΔᐃⲆᐃ: "img/day-accessory6-pacques.png",
    ᐃΔⵠⵠᐃΔⵠ: "img/night-accessory6-pacques.png",
    ΔⲆⵠⵠⵠΔΔ: "img/day-accessory7-pacques.png",
    ᐃΔⲆᐃⲆⵠΔ: "img/night-accessory7-pacques.png",
    ⲆⲆⵠᐃΔᐃΔ: "img/day-accessory8-pacques.png",
    ΔᐃΔΔΔⵠⲆ: "img/night-accessory8-pacques.png",
    ΔⵠΔΔⲆⵠⲆ: "img/day-bag-pacques.png",
    ΔᐃⵠⵠⲆⲆⲆ: "img/night-bag-pacques.png",
    ⵠⲆΔⵠⵠⲆⲆ: "img/day-carrot.png",
    ⲆⵠᐃΔΔⲆⵠ: "img/night-carrot.png",
    ᐃⲆⲆΔΔΔᐃ: "img/day-carrot-dried.png",
    ⵠᐃⲆⲆⵠΔΔ: "img/night-carrot-dried.png",
    ᐃΔᐃᐃⵠⵠᐃ: "img/day-tomato-herb.png",
    ⵠΔᐃⵠⲆᐃΔ: "img/night-tomato-herb.png",
    ΔᐃⲆᐃᐃᐃⲆ: "img/day-tomato-herb-dried.png",
    Ⲇⵠᐃⵠᐃᐃᐃ: "img/night-tomato-herb-dried.png",
    ⵠⲆⵠΔⲆΔⵠ: "img/day-tomato.png",
    ΔΔⵠⵠᐃᐃΔ: "img/night-tomato.png",
    ⲆΔⵠⵠΔᐃⵠ: "img/inv-carrot-out.png",
    ⵠⲆⵠⵠΔⵠⵠ: "img/inv-carrot-in.png",
    ⵠΔᐃⵠᐃᐃᐃ: "img/inv-carrot-click.png",
    ⵠΔΔΔΔΔΔ: "img/inv-tomato-out.png",
    ᐃᐃᐃΔⵠᐃᐃ: "img/inv-tomato-in.png",
    ⲆᐃΔⲆⲆⲆⵠ: "img/inv-tomato-click.png",
    ⵠⵠΔⵠΔⲆᐃ: "img/day-player0.png",
    ΔⲆⲆⵠᐃΔⲆ: "img/night-player0.png",
    ᐃⵠⵠΔⲆⵠΔ: "img/day-player1.png",
    ΔΔⵠⲆⵠᐃⲆ: "img/night-player1.png",
    ⲆⵠᐃⵠᐃᐃΔ: "img/day-player2.png",
    ⲆⲆⵠⵠⵠⵠⵠ: "img/night-player22.png",
    ᐃⵠΔᐃΔⵠᐃ: "img/day-player3.png",
    ΔΔΔᐃⲆΔⲆ: "img/night-player33.png",
    ΔΔΔⲆΔᐃᐃ: "img/day-player4.png",
    ⲆΔᐃΔᐃᐃᐃ: "img/night-player4.png",
    ᐃΔⵠⲆⵠᐃᐃ: "img/day-player5.png",
    ⵠᐃⵠⵠΔᐃΔ: "img/night-player5.png",
    ᐃᐃⵠΔΔⲆⵠ: "img/day-player6.png",
    ⲆΔΔᐃⵠΔⲆ: "img/night-player6.png",
    ᐃⵠᐃΔΔⲆᐃ: "img/day-player7.png",
    ᐃΔΔⲆⵠΔⵠ: "img/night-player7.png",
    ΔⲆΔⲆⵠΔⵠ: "img/day-player8.png",
    ⲆⵠⲆΔⲆᐃⵠ: "img/night-player8.png",
    ⵠⵠΔΔⵠⵠⲆ: "img/day-player9.png",
    ⵠΔᐃΔᐃΔⲆ: "img/night-player9.png",
    ⵠⵠᐃΔⲆⲆΔ: "img/day-player10.png",
    ᐃΔᐃⲆⲆⲆⵠ: "img/night-player10.png",
    ⵠⲆⲆⲆΔⵠⵠ: "img/day-player11.png",
    ⵠᐃᐃⲆⲆⲆᐃ: "img/night-player11.png",
    ⲆⵠᐃⲆΔⲆⵠ: "img/day-player12.png",
    ⵠⲆⲆΔⵠᐃᐃ: "img/night-player12.png",
    ⲆⵠⲆᐃΔᐃΔ: "img/day-player13.png",
    ᐃⵠⵠΔΔᐃⵠ: "img/night-player13.png",
    ᐃⵠⵠΔΔΔΔ: "img/day-player14.png",
    ⲆⲆΔΔⲆᐃⲆ: "img/night-player14.png",
    ⲆΔⵠᐃⲆⵠⵠ: "img/day-player15.png",
    ᐃᐃΔᐃΔᐃᐃ: "img/night-player15.png",
    ⵠⵠᐃΔᐃΔⲆ: "img/day-player16.png",
    ⲆΔΔᐃⵠᐃᐃ: "img/night-player16.png",
    ⲆⲆΔⲆᐃⲆΔ: "img/day-player17.png",
    ⲆΔΔⵠⲆⲆⲆ: "img/night-player17.png",
    ᐃⵠⵠΔᐃⵠⵠ: "img/day-player18.png",
    ΔᐃⲆᐃⲆΔⲆ: "img/night-player18.png",
    ⲆΔⲆᐃᐃⵠᐃ: "img/day-player19.png",
    ⲆΔΔΔⲆⵠᐃ: "img/night-player19.png",
    ΔⵠΔⵠⵠΔⲆ: "img/day-hand-player0.png",
    ⵠΔΔⵠᐃⲆΔ: "img/night-hand-player0.png",
    ⵠΔⵠᐃⲆⵠΔ: "img/day-hand-player1.png",
    ⵠΔΔᐃⲆⵠΔ: "img/night-hand-player1.png",
    ᐃⵠⲆⵠΔⲆⵠ: "img/day-hand-player2.png",
    ᐃΔΔⵠΔⵠⵠ: "img/night-hand-player22.png",
    ⲆⲆⵠᐃᐃⲆⲆ: "img/day-hand-player3.png",
    ⲆΔⵠⵠⵠᐃᐃ: "img/night-hand-player33.png",
    ΔΔⲆⲆⲆΔⵠ: "img/day-hand-player4.png",
    ΔΔⵠΔⲆⵠⵠ: "img/night-hand-player4.png",
    ᐃᐃΔⲆᐃⲆⲆ: "img/day-hand-player5.png",
    ⲆΔᐃᐃⵠⲆΔ: "img/night-hand-player5.png",
    ⵠⲆΔⲆⵠⲆⲆ: "img/day-hand-player6.png",
    Δᐃᐃᐃᐃⵠⵠ: "img/night-hand-player6.png",
    ⵠᐃⵠΔᐃⵠⲆ: "img/day-hand-player7.png",
    ⵠⲆⲆⲆⲆΔᐃ: "img/night-hand-player7.png",
    ⵠΔⲆⲆⲆᐃⲆ: "img/day-hand-player8.png",
    ⲆᐃⵠᐃᐃΔⵠ: "img/night-hand-player8.png",
    ᐃⵠΔΔᐃⲆⲆ: "img/day-hand-player9.png",
    ΔΔⵠᐃᐃⵠⲆ: "img/night-hand-player9.png",
    ᐃⵠⲆΔᐃⲆⲆ: "img/day-hand-player10.png",
    ⵠΔΔⵠⵠⵠᐃ: "img/night-hand-player10.png",
    ⲆᐃᐃⲆᐃΔΔ: "img/day-hand-player11.png",
    ΔΔⵠⲆⲆΔᐃ: "img/night-hand-player11.png",
    ⵠⵠΔⲆⵠⵠᐃ: "img/day-hand-player12.png",
    ᐃΔⵠⲆⲆΔⵠ: "img/night-hand-player12.png",
    ΔᐃⲆⲆᐃⲆⲆ: "img/day-hand-player13.png",
    ᐃⲆᐃΔⵠⵠᐃ: "img/night-hand-player13.png",
    ΔⵠΔⲆᐃΔⲆ: "img/day-hand-player14.png",
    ᐃᐃⵠⲆᐃⲆⲆ: "img/night-hand-player14.png",
    ΔᐃΔⵠΔⵠⵠ: "img/day-hand-player15.png",
    ΔᐃᐃᐃⲆⵠΔ: "img/night-hand-player15.png",
    ΔⵠⵠᐃⵠⲆⵠ: "img/day-hand-player16.png",
    ᐃⲆⵠⲆᐃΔⲆ: "img/night-hand-player16.png",
    ⵠⲆⲆⲆΔⵠΔ: "img/day-hand-player17.png",
    ⲆⵠΔΔⵠᐃΔ: "img/night-hand-player17.png",
    ᐃⲆⲆᐃⵠᐃΔ: "img/day-hand-player18.png",
    Δᐃⵠᐃⵠᐃⵠ: "img/night-hand-player18.png",
    ΔΔΔΔⲆⲆΔ: "img/day-hand-player19.png",
    ᐃΔΔᐃᐃⵠⵠ: "img/night-hand-player19.png",
    ⵠΔⲆΔⵠⲆⵠ: "img/day-accessory4.png",
    ᐃⵠⵠΔᐃⲆᐃ: "img/night-accessory4.png",
    ΔᐃⵠⲆᐃᐃΔ: "img/day-accessory9.png",
    ᐃⲆⵠⵠⲆⲆⲆ: "img/night-accessory9.png",
    ᐃⵠΔⲆⵠΔⵠ: "img/day-accessory10.png",
    ᐃΔᐃΔᐃⲆⵠ: "img/night-accessory10.png",
    ⲆᐃⵠⲆⲆⲆΔ: "img/day-accessory11.png",
    ᐃᐃⲆΔⵠΔΔ: "img/night-accessory11.png",
    ΔⲆΔᐃᐃⲆᐃ: "img/day-accessory12.png",
    ⵠⵠⵠⵠⲆⲆⵠ: "img/night-accessory12.png",
    ⵠΔⵠⲆΔᐃΔ: "img/day-bag.png",
    ΔΔᐃΔⲆΔⲆ: "img/night-bag.png",
    ᐃᐃᐃⲆⲆⲆΔ: "img/inv-bag-out.png",
    ΔⵠⲆⲆⵠⲆΔ: "img/inv-bag-in.png",
    ΔⵠⵠᐃⵠᐃⲆ: "img/inv-bag-click.png",
    ᐃᐃΔΔⲆᐃⵠ: "img/day-pitchfork.png",
    ⵠᐃⲆⵠᐃⵠⲆ: "img/night-pitchfork.png",
    ΔⵠⲆⵠⵠⵠⲆ: "img/inv-pitchfork-out.png",
    ᐃΔⲆΔΔⵠΔ: "img/inv-pitchfork-in.png",
    ᐃΔⲆΔΔΔΔ: "img/inv-pitchfork-click.png",
    ⵠⲆⲆᐃⵠⵠΔ: "img/inv-wood-spike-door-out.png",
    ⵠᐃⲆⲆᐃⲆⲆ: "img/inv-wood-spike-door-in.png",
    ⵠⲆⲆⵠΔΔᐃ: "img/inv-wood-spike-door-click.png",
    ΔⲆⵠΔΔⵠᐃ: "img/inv-stone-spike-door-out.png",
    ᐃⲆⲆⵠⲆⲆⵠ: "img/inv-stone-spike-door-in.png",
    ᐃᐃᐃΔᐃⵠⲆ: "img/inv-stone-spike-door-click.png",
    ᐃⵠᐃᐃᐃΔⲆ: "img/inv-gold-spike-door-out.png",
    ΔᐃⲆΔⲆⵠᐃ: "img/inv-gold-spike-door-in.png",
    ⵠⵠΔⵠΔΔᐃ: "img/inv-gold-spike-door-click.png",
    ΔΔΔⵠⲆⲆᐃ: "img/inv-diamond-spike-door-out.png",
    ᐃΔΔⵠᐃⲆⲆ: "img/inv-diamond-spike-door-in.png",
    ⵠΔΔⵠⵠΔᐃ: "img/inv-diamond-spike-door-click.png",
    ᐃΔⲆⵠΔΔⵠ: "img/inv-amethyst-spike-door-out.png",
    ⲆⲆΔⲆᐃΔⵠ: "img/inv-amethyst-spike-door-in.png",
    ⲆΔΔⲆᐃⲆᐃ: "img/inv-amethyst-spike-door-click.png",
    ⲆⲆᐃΔⵠᐃⲆ: "img/day-wood-spike-door.png",
    ⵠⲆΔᐃΔⲆᐃ: "img/night-wood-spike-door.png",
    ΔⵠⵠⲆᐃΔⲆ: "img/day-stone-spike-door.png",
    ⲆⲆⲆⲆⵠΔⲆ: "img/night-stone-spike-door.png",
    ΔⵠΔᐃⵠΔⲆ: "img/day-gold-spike-door.png",
    ᐃⲆᐃΔⵠⲆⵠ: "img/night-gold-spike-door.png",
    ΔⲆΔⵠⲆΔΔ: "img/day-diamond-spike-door.png",
    ⲆⵠⲆᐃᐃⵠᐃ: "img/night-diamond-spike-door.png",
    ⲆᐃΔⵠᐃᐃΔ: "img/day-amethyst-spike-door.png",
    ᐃⵠⵠⵠⵠΔⵠ: "img/night-amethyst-spike-door.png",
    ΔΔⲆⲆⲆΔΔ: "img/inv-reidite-spike-door-out.png",
    ΔΔⲆᐃΔⵠⵠ: "img/inv-reidite-spike-door-in.png",
    ᐃᐃΔΔΔΔⲆ: "img/inv-reidite-spike-door-click.png",
    ᐃΔⲆⲆⲆⵠⵠ: "img/inv-reidite-door-out.png",
    ⵠᐃⵠᐃΔΔΔ: "img/inv-reidite-door-in.png",
    ⵠᐃᐃΔⵠᐃΔ: "img/inv-reidite-door-click.png",
    ΔⲆⲆⲆⵠΔᐃ: "img/inv-reidite-spike-out.png",
    ΔᐃΔᐃᐃᐃᐃ: "img/inv-reidite-spike-in.png",
    ᐃᐃΔΔᐃᐃΔ: "img/inv-reidite-spike-click.png",
    ΔⵠΔᐃⵠⲆΔ: "img/inv-reidite-wall-out.png",
    ᐃⵠᐃΔΔⲆⵠ: "img/inv-reidite-wall-in.png",
    ⲆⲆᐃⲆⵠⵠᐃ: "img/inv-reidite-wall-click.png",
    ᐃΔᐃΔᐃᐃⵠ: "img/day-reidite-wall.png",
    ᐃᐃⲆΔΔΔⵠ: "img/night-reidite-wall.png",
    ᐃᐃⲆᐃΔⲆⲆ: "img/day-reidite-door.png",
    ᐃΔⵠᐃⵠᐃⵠ: "img/night-reidite-door.png",
    ⵠⵠⲆΔⲆᐃᐃ: "img/day-reidite-spike.png",
    ⵠᐃᐃᐃⲆⵠⵠ: "img/night-reidite-spike.png",
    ᐃΔⵠΔΔⲆᐃ: "img/day-reidite-spike-door.png",
    ΔⵠᐃᐃⲆⵠⲆ: "img/night-reidite-spike-door.png",
    ᐃⵠΔⵠⵠᐃⵠ: "img/inv-reidite-pickaxe-out.png",
    ᐃⲆⵠΔⲆⵠⲆ: "img/inv-reidite-pickaxe-in.png",
    ΔΔᐃⵠⲆⵠⵠ: "img/inv-reidite-pickaxe-click.png",
    ⵠᐃⵠⲆΔᐃᐃ: "img/day-reidite-pickaxe.png",
    ᐃΔΔΔΔᐃⲆ: "img/night-reidite-pickaxe.png",
    ⲆⲆⵠⵠⲆⵠⵠ: "img/inv-reidite-hammer-out.png",
    ⵠᐃΔΔⲆⲆΔ: "img/inv-reidite-hammer-in.png",
    ⵠΔᐃᐃⵠⵠⵠ: "img/inv-reidite-hammer-click.png",
    ΔⵠΔΔᐃⵠⲆ: "img/day-reidite-hammer.png",
    ᐃΔⵠⵠᐃᐃⵠ: "img/night-reidite-hammer.png",
    ⵠΔⲆⵠΔⵠᐃ: "img/day-watermelon1.png",
    ⲆⲆⲆΔᐃᐃⵠ: "img/night-watermelon1.png",
    ⲆⵠⵠΔⲆⲆᐃ: "img/day-watermelon-dried1.png",
    ⵠΔΔⵠⵠᐃᐃ: "img/night-watermelon-dried1.png",
    ⵠⵠⵠΔᐃⵠᐃ: "img/inv-watermelon-out.png",
    ΔⲆⵠⲆⵠⲆΔ: "img/inv-watermelon-in.png",
    ᐃⵠΔⵠᐃΔⵠ: "img/inv-watermelon-click.png",
    ΔⵠⵠⵠⵠΔⵠ: "img/day-boat.png",
    Δⵠᐃᐃᐃⵠᐃ: "img/night-boat.png",
    ⲆⲆⲆⵠⲆⲆᐃ: "img/day-boat-wave.png",
    ᐃⵠⵠⵠⵠⲆⵠ: "img/night-boat-wave.png",
    ⲆᐃᐃⵠΔⵠⲆ: "img/inv-boat-out.png",
    ΔᐃᐃΔⲆⲆᐃ: "img/inv-boat-in.png",
    ᐃᐃᐃⲆᐃᐃⵠ: "img/inv-boat-click.png",
    ⲆⵠⲆⲆᐃᐃᐃ: "img/day-plane.png",
    ⵠⵠⲆΔⵠΔΔ: "img/night-plane.png",
    ᐃⲆⲆⵠⵠⵠⲆ: "img/inv-plane-out.png",
    ΔΔΔᐃⵠᐃΔ: "img/inv-plane-in.png",
    ΔΔᐃⵠᐃᐃⲆ: "img/inv-plane-click.png",
    ⲆⵠⵠΔⵠΔⵠ: "img/day-sled.png",
    ᐃΔΔΔⲆⲆᐃ: "img/night-sled.png",
    ᐃΔΔΔⲆⵠⲆ: "img/day-sled-wave.png",
    ΔⲆⲆⵠΔᐃⲆ: "img/night-sled-wave.png",
    ΔⵠⵠⵠᐃΔᐃ: "img/inv-sled-out.png",
    ΔⲆⲆⵠⲆΔΔ: "img/inv-sled-in.png",
    ⲆⵠᐃⵠΔⵠⲆ: "img/inv-sled-click.png",
    ᐃᐃⵠΔⲆⵠⵠ: "img/day-pirate-hat.png",
    ΔΔⲆⲆⲆⲆⵠ: "img/night-pirate-hat.png",
    ⲆΔⵠⲆΔⵠΔ: "img/inv-pirate-hat-out.png",
    ⵠΔⵠⵠⵠΔΔ: "img/inv-pirate-hat-in.png",
    ΔΔΔᐃᐃⵠⲆ: "img/inv-pirate-hat-click.png",
    ⲆⲆΔᐃΔⵠⵠ: "img/day-penguin.png",
    ΔⵠΔᐃΔᐃΔ: "img/night-penguin.png",
    ⲆⵠⵠᐃᐃⲆⵠ: "img/hurt-penguin.png",
    ⵠⲆᐃⲆᐃ: "img/inv-penguin-feather-click.png",
    ᐃΔⵠⵠΔ: "img/inv-hawk-feather-click.png",
    ⲆⵠΔᐃΔⵠⲆ: "img/day-boar1.png",
    ΔⵠᐃΔⵠⵠⵠ: "img/day-boar1-tamed.png",
    ⲆΔᐃᐃⵠⵠΔ: "img/day-boar1-angry.png",
    Δⵠⵠᐃᐃᐃⵠ: "img/night-boar1.png",
    ᐃᐃⵠΔᐃⲆᐃ: "img/night-boar1-tamed.png",
    ⲆⲆΔΔᐃΔΔ: "img/night-boar1-angry.png",
    ᐃᐃⲆⲆᐃⲆⲆ: "img/inv-mount-boar-out.png",
    ΔΔⵠⲆⵠᐃᐃ: "img/inv-mount-boar-in.png",
    ⲆΔⵠΔⲆⵠⵠ: "img/inv-mount-boar-click.png",
    ΔⵠΔΔⲆⵠᐃ: "img/day-hurt-boar1.png",
    ΔᐃΔⲆΔᐃⲆ: "img/boar1-step.png",
    ΔⲆⲆⲆⵠⲆⵠ: "img/day-saddle1.png",
    ⲆⲆᐃⲆⵠΔᐃ: "img/night-saddle1.png",
    ΔⵠᐃᐃⵠΔΔ: "img/inv-saddle-out.png",
    ⵠᐃⲆⲆᐃⵠⵠ: "img/inv-saddle-in.png",
    ΔⵠⵠΔΔᐃᐃ: "img/inv-saddle-click.png",
    ⲆᐃᐃⲆⲆᐃᐃ: "img/day-magic-wand0.png",
    ⵠⲆᐃΔΔⵠⵠ: "img/night-magic-wand0.png",
    ΔΔⲆᐃΔΔΔ: "img/day-light-wand1.png",
    ΔᐃΔᐃΔⲆᐃ: "img/night-light-wand1.png",
    ⵠⲆⵠΔΔᐃᐃ: "img/inv-magic-wand0-out.png",
    ⲆΔᐃᐃᐃⲆΔ: "img/inv-magic-wand0-in.png",
    ⵠⵠⲆΔⵠⵠᐃ: "img/inv-magic-wand0-click.png",
    ᐃΔΔⲆΔⵠᐃ: "img/day-magic-wand1.png",
    ⵠⵠⵠⵠⵠᐃⲆ: "img/night-magic-wand1.png",
    ⲆΔΔⲆΔⵠᐃ: "img/day-light-wand0.png",
    ᐃΔᐃΔᐃⲆΔ: "img/night-light-wand0.png",
    ᐃⵠᐃⲆⲆⵠᐃ: "img/inv-magic-wand1-out.png",
    ⲆᐃᐃⲆᐃⲆΔ: "img/inv-magic-wand1-in.png",
    ΔΔⵠΔⵠΔⵠ: "img/inv-magic-wand1-click.png",
    ΔΔⲆⲆⵠⲆⲆ: "img/day-firefly.png",
    ΔⲆⲆᐃΔⲆⲆ: "img/night-firefly.png",
    ΔⲆᐃⲆᐃⲆᐃ: "img/hurt-firefly.png",
    ᐃⲆᐃⵠⲆΔᐃ: "img/inv-firefly-out.png",
    ΔᐃΔΔΔΔⵠ: "img/inv-firefly-in.png",
    ᐃⵠΔⲆⲆⲆⲆ: "img/inv-firefly-click.png",
    ᐃⲆⵠⵠᐃⲆⵠ: "img/day-baby-dragon.png",
    ⵠⲆⵠΔⵠⵠⵠ: "img/night-baby-dragon.png",
    ΔΔᐃΔⵠᐃⵠ: "img/day-baby-dragon-angry.png",
    ⲆΔΔⲆⲆⲆᐃ: "img/night-baby-dragon-angry.png",
    ⵠⵠⲆⵠΔᐃⵠ: "img/day-baby-dragon-tamed.png",
    ΔⵠΔⲆⲆⵠⵠ: "img/night-baby-dragon-tamed.png",
    ⵠⵠⵠᐃᐃⲆΔ: "img/day-wing-dragon-left-angry.png",
    ΔⵠⵠᐃᐃᐃⲆ: "img/night-dragon-wing-left-angry.png",
    ⵠΔⲆⲆΔᐃΔ: "img/day-wing-dragon-right-angry.png",
    ΔⲆᐃᐃⲆΔᐃ: "img/night-dragon-wing-right-angry.png",
    ᐃᐃⲆⵠΔⲆⲆ: "img/day-wing-dragon-left-tamed.png",
    ⵠΔᐃⲆΔΔⲆ: "img/night-dragon-wing-left-tamed.png",
    ⲆΔΔᐃᐃⵠⵠ: "img/day-wing-dragon-right-tamed.png",
    ⵠΔΔⲆⲆⲆⲆ: "img/night-wing-dragon-right-tamed.png",
    ⵠΔⲆⲆⲆΔⲆ: "img/day-wing-dragon-left.png",
    ᐃΔᐃΔⲆⲆⵠ: "img/night-dragon-wing-left.png",
    ΔⵠΔⵠᐃᐃⵠ: "img/day-wing-dragon-right.png",
    ᐃⵠⲆⵠΔΔΔ: "img/night-wing-dragon-right.png",
    ΔⲆΔⲆᐃΔΔ: "img/hurt-baby-dragon.png",
    ᐃⲆⵠᐃⲆᐃⲆ: "img/hurt-baby-dragon-wing-left.png",
    ᐃᐃⲆᐃⵠΔΔ: "img/hurt-baby-dragon-wing-right.png",
    ⲆⲆᐃⵠᐃᐃΔ: "img/inv-baby-dragon-out.png",
    ⵠⵠⲆⵠⲆⵠⲆ: "img/inv-baby-dragon-in.png",
    ΔⵠⲆΔᐃⵠⵠ: "img/inv-baby-dragon-click.png",
    ⲆᐃᐃⲆⵠᐃΔ: "img/day-baby-lava.png",
    ⲆⲆᐃⲆⲆᐃⵠ: "img/night-baby-lava.png",
    ΔᐃΔⲆⵠⵠΔ: "img/day-baby-lava-angry.png",
    ⵠΔᐃⵠΔⵠᐃ: "img/night-baby-lava-angry.png",
    ᐃΔΔᐃᐃΔⲆ: "img/day-baby-lava-tamed.png",
    ΔⵠⲆⲆⲆⲆᐃ: "img/night-baby-lava-tamed.png",
    ⵠΔⲆΔⵠΔⲆ: "img/day-wing-lava-left-angry.png",
    ᐃᐃⵠⵠⵠΔΔ: "img/night-wing-lava-left-angry.png",
    ⲆΔΔΔⵠΔΔ: "img/day-wing-lava-right-angry.png",
    ΔⲆᐃⵠΔᐃⲆ: "img/night-wing-lava-right-angry.png",
    ΔⲆᐃΔΔᐃⵠ: "img/day-wing-lava-left-tamed.png",
    ᐃⵠΔᐃⵠⲆᐃ: "img/night-wing-lava-left-tamed.png",
    ⲆΔⲆⵠⲆᐃΔ: "img/day-wing-lava-right-tamed.png",
    ⵠΔᐃⲆᐃⲆⵠ: "img/night-wing-lava-right-tamed.png",
    ᐃⲆᐃⵠᐃⲆᐃ: "img/day-wing-lava-left.png",
    ⲆΔΔⲆΔΔᐃ: "img/night-wing-lava-left.png",
    ⵠΔΔᐃᐃⵠΔ: "img/day-wing-lava-right.png",
    ⲆⲆⲆⵠᐃᐃⵠ: "img/night-wing-lava-right.png",
    ⲆᐃⲆΔᐃⵠΔ: "img/hurt-baby-lava.png",
    ⲆⵠⵠⲆᐃΔΔ: "img/hurt-baby-lava-wing-left.png",
    ⲆΔⲆⲆᐃΔⵠ: "img/hurt-baby-lava-wing-right.png",
    ⲆⲆⵠⵠⵠΔᐃ: "img/inv-baby-lava-out.png",
    ΔⵠΔⵠΔΔⲆ: "img/inv-baby-lava-in.png",
    ΔΔΔⲆⵠⲆⲆ: "img/inv-baby-lava-click.png",
    ⵠᐃⵠⲆΔΔⲆ: "img/day-falcon.png",
    ⲆⵠΔᐃⲆⲆⵠ: "img/night-falcon.png",
    ⲆᐃⲆⲆΔΔⵠ: "img/day-falcon-angry.png",
    ⲆΔᐃⲆⲆᐃⵠ: "img/night-falcon-angry.png",
    ⲆᐃᐃᐃᐃΔᐃ: "img/day-falcon-ground.png",
    ᐃⲆΔΔⲆΔᐃ: "img/night-falcon-ground.png",
    ⵠⲆᐃⵠᐃᐃᐃ: "img/day-falcon-ground-angry.png",
    ᐃⵠⵠⲆΔΔΔ: "img/night-falcon-ground-angry.png",
    ᐃⵠⵠΔⲆⲆᐃ: "img/day-falcon-wings-left.png",
    ⲆᐃᐃⵠᐃⲆᐃ: "img/night-falcon-wings-left.png",
    ⵠⲆⵠΔΔⲆⲆ: "img/day-falcon-wings-right.png",
    ΔⲆⵠⲆⵠᐃΔ: "img/night-falcon-wings-right.png",
    ⲆⲆⲆⲆⲆⵠᐃ: "img/day-falcon-angry-wings-left.png",
    ⵠⲆΔⲆⵠΔⲆ: "img/night-falcon-angry-wings-left.png",
    ⲆΔᐃᐃΔᐃΔ: "img/day-falcon-angry-wings-right.png",
    ᐃΔⲆⲆᐃⲆΔ: "img/night-falcon-angry-wings-right.png",
    ⲆΔⵠⲆΔᐃᐃ: "img/day-falcon-wings-left-tamed.png",
    ⵠⲆᐃⲆⵠᐃⲆ: "img/night-falcon-wings-left-tamed.png",
    ⵠᐃΔΔⵠⲆΔ: "img/day-falcon-wings-right-tamed.png",
    ΔⵠΔⵠΔᐃΔ: "img/night-falcon-wings-right-tamed.png",
    ΔΔᐃⲆⲆⲆⲆ: "img/day-falcon-tamed.png",
    ⵠᐃⵠᐃΔΔⲆ: "img/night-falcon-tamed.png",
    ⵠⵠᐃᐃⲆᐃⵠ: "img/hurt-falcon-ground.png",
    ᐃⲆⲆΔᐃΔᐃ: "img/hurt-falcon.png",
    ⲆΔⵠᐃᐃᐃΔ: "img/hurt-falcon-wings-left.png",
    ⵠΔⲆⲆⲆⵠΔ: "img/hurt-falcon-wings-right.png",
    ᐃⵠⵠᐃᐃΔⵠ: "img/inv-falcon-out.png",
    ΔΔⵠⵠⵠⲆⲆ: "img/inv-falcon-in.png",
    ᐃⲆΔᐃΔⵠΔ: "img/inv-falcon-click.png",
    ⲆΔⵠΔⲆᐃⲆ: "img/day-crab-boss.png",
    ⵠᐃⲆᐃⲆⵠⲆ: "img/night-crab-boss.png",
    ᐃᐃⲆΔⵠᐃΔ: "img/day-crab-boss-angry.png",
    ΔΔᐃΔΔΔⵠ: "img/night-crab-boss-angry.png",
    ⲆᐃΔΔΔᐃᐃ: "img/day-crab-boss-tamed.png",
    ΔⵠⲆⵠᐃΔⵠ: "img/night-crab-boss-tamed.png",
    ΔⲆΔᐃⲆⵠⵠ: "img/day-crab-boss-claw-left-attack.png",
    ᐃΔⲆΔΔⲆⵠ: "img/night-crab-boss-claw-left-attack.png",
    ᐃⵠⵠⲆΔᐃᐃ: "img/day-crab-boss-claw-right-attack.png",
    ΔᐃⲆⵠⵠⵠⵠ: "img/night-crab-boss-claw-right-attack.png",
    ΔΔⲆⵠⲆⲆᐃⲆⵠ: "img/day-crab-boss-claw-left-tamed.png",
    ᐃⵠⲆᐃⵠⵠⲆⲆᐃ: "img/night-crab-boss-claw-left-tamed.png",
    ⲆⵠᐃⵠᐃᐃⵠⵠⲆ: "img/day-crab-boss-claw-right-tamed.png",
    ΔΔΔⵠⵠⲆΔⵠⲆ: "img/night-crab-boss-claw-right-tamed.png",
    ᐃΔΔᐃⲆᐃΔ: "img/day-crab-boss-claw-left.png",
    ⲆⲆⵠⲆⵠᐃⵠ: "img/night-crab-boss-claw-left.png",
    ᐃᐃΔᐃⲆΔⵠ: "img/day-crab-boss-claw-right.png",
    ⵠΔᐃᐃΔᐃΔ: "img/night-crab-boss-claw-right.png",
    ⲆⲆⲆⲆⲆᐃΔ: "img/hurt-crab-boss.png",
    ᐃᐃⵠᐃⵠΔΔ: "img/hurt-crab-boss-claw-left.png",
    ΔⵠⵠⵠⵠⲆΔ: "img/hurt-crab-boss-claw-right.png",
    ⲆΔΔΔⲆΔⵠ: "img/heal-crab-boss.png",
    ⲆⲆⵠᐃⵠΔΔ: "img/heal-crab-boss-claw-left.png",
    ΔⵠⲆⲆΔᐃⲆ: "img/heal-crab-boss-claw-right.png",
    ᐃⲆΔΔⵠⲆⵠ: "img/crab-step.png",
    ⲆⵠⵠΔΔΔⵠ: "img/inv-crab-boss-out.png",
    ΔᐃᐃⵠΔⲆⵠ: "img/inv-crab-boss-in.png",
    ᐃⲆⵠⲆᐃᐃΔ: "img/inv-crab-boss-click.png",
    ΔᐃᐃⵠⵠⲆΔ: "img/day-cactus10.png",
    ᐃⲆⵠΔΔⵠΔ: "img/night-cactus10.png",
    ⵠⲆᐃⵠΔΔΔ: "img/inv-cactus-out.png",
    ⵠΔΔⵠⲆΔᐃ: "img/inv-cactus-in.png",
    ᐃΔᐃⲆⵠⵠⵠ: "img/inv-cactus-click.png",
    ΔⵠⵠΔΔⲆᐃ: "img/day-scorpion.png",
    ⲆᐃⲆΔΔᐃᐃ: "img/night-scorpion.png",
    ᐃⲆᐃΔⲆⵠᐃ: "img/day-scorpion-hand-left.png",
    ⲆⵠᐃᐃⲆΔᐃ: "img/night-scorpion-hand-left.png",
    ⲆᐃⲆⲆⲆᐃⵠ: "img/day-scorpion-hand-right.png",
    ⲆⲆⲆᐃⵠΔⵠ: "img/night-scorpion-hand-right.png",
    ᐃⲆⵠⲆᐃΔᐃ: "img/hurt-scorpion.png",
    ΔΔΔᐃⵠⲆᐃ: "img/hurt-scorpion-hand-left.png",
    ⵠⵠⵠᐃⲆᐃᐃ: "img/hurt-scorpion-hand-right.png",
    ΔᐃΔⲆᐃᐃⲆ: "img/day-vulture.png",
    ᐃⲆⲆⵠᐃⲆⵠ: "img/night-vulture.png",
    ΔⵠⵠⲆᐃⲆⵠ: "img/day-vulture-angry.png",
    ⲆᐃⲆⲆⵠⲆᐃ: "img/night-vulture-angry.png",
    ᐃΔΔⵠᐃⲆⵠ: "img/day-vulture-ground.png",
    ⲆⲆΔⲆⵠⵠᐃ: "img/night-vulture-ground.png",
    ⵠᐃΔᐃⵠⲆⵠ: "img/day-vulture-ground-angry.png",
    ᐃⲆΔᐃⲆΔᐃ: "img/night-vulture-ground-angry.png",
    ΔΔⵠΔᐃⵠⵠ: "img/day-vulture-wings-left.png",
    ⲆΔⵠᐃΔⲆᐃ: "img/night-vulture-wings-left.png",
    ⲆⵠⵠΔⵠΔΔ: "img/day-vulture-wings-right.png",
    ⲆⵠΔᐃⲆᐃⵠ: "img/night-vulture-wings-right.png",
    ᐃⵠᐃⲆᐃⵠΔ: "img/day-vulture-angry-wings-left.png",
    ᐃᐃⵠⲆⲆΔⵠ: "img/night-vulture-angry-wings-left.png",
    ⲆΔⵠΔᐃᐃⲆ: "img/day-vulture-angry-wings-right.png",
    ⵠᐃⲆⵠⲆᐃⲆ: "img/night-vulture-angry-wings-right.png",
    ΔⲆΔⵠⵠⲆᐃ: "img/day-vulture-wings-left-tamed.png",
    ΔⵠⲆⲆᐃᐃⲆ: "img/night-vulture-wings-left-tamed.png",
    ⵠⲆⵠⵠΔᐃⵠ: "img/day-vulture-wings-right-tamed.png",
    ᐃᐃⲆⵠⵠΔᐃ: "img/night-vulture-wings-right-tamed.png",
    ⲆΔΔⵠⲆⲆⵠ: "img/day-vulture-tamed.png",
    ΔᐃⵠΔⵠⲆⵠ: "img/night-vulture-tamed.png",
    ΔᐃⲆⵠⵠⲆⵠ: "img/hurt-vulture-ground.png",
    ΔᐃᐃⲆᐃΔΔ: "img/hurt-vulture.png",
    ᐃᐃⲆΔΔΔᐃ: "img/hurt-vulture-wings-left.png",
    ⵠΔᐃⲆΔⲆᐃ: "img/hurt-vulture-wings-right.png",
    ᐃⲆᐃᐃⵠᐃⵠ: "img/day-aloe-vera.png",
    ΔⵠⵠᐃΔΔᐃ: "img/night-aloe-vera.png",
    ᐃᐃⲆⲆⵠᐃⵠ: "img/inv-aloe-vera-out.png",
    ⲆⵠΔⲆᐃᐃⵠ: "img/inv-aloe-vera-in.png",
    ᐃⲆⵠΔⲆⲆΔ: "img/inv-aloe-vera-click.png",
    ᐃⲆⲆᐃᐃⵠⲆ: "img/day-aloe-vera-grown.png",
    ΔᐃⵠᐃᐃΔⵠ: "img/night-aloe-vera-grown.png",
    ΔⵠΔⲆᐃᐃΔ: "img/day-aloe-vera-dried.png",
    ⵠⵠⵠⲆΔΔΔ: "img/night-aloe-vera-dried.png",
    ΔᐃΔΔᐃᐃⵠ: "img/day-turban1.png",
    ⵠⵠΔᐃⵠΔΔ: "img/night-turban1.png",
    ᐃᐃⵠᐃΔΔⲆ: "img/day-turban2.png",
    ⲆΔⲆⲆⵠᐃⵠ: "img/night-turban2.png",
    ⲆⵠΔⵠΔⲆⵠ: "img/inv-turban2-out.png",
    ⵠⲆΔΔⲆⲆᐃ: "img/inv-turban2-in.png",
    ⲆⵠⲆΔΔⵠⵠ: "img/inv-turban2-click.png",
    ᐃΔⲆᐃⲆⲆᐃ: "img/inv-turban1-out.png",
    ᐃΔΔᐃⲆⲆᐃ: "img/inv-turban1-in.png",
    ᐃΔΔⲆᐃΔⲆ: "img/inv-turban1-click.png",
    ΔΔⲆⲆΔΔᐃ: "img/day-pitchfork2.png",
    ⲆΔⵠⲆⲆΔⲆ: "img/night-pitchfork2.png",
    ΔⵠⲆⵠΔᐃⲆ: "img/inv-pitchfork2-out.png",
    ⲆᐃⵠⲆⵠⵠᐃ: "img/inv-pitchfork2-in.png",
    ⵠΔᐃᐃΔᐃⲆ: "img/inv-pitchfork2-click.png",
    ⲆⵠᐃᐃΔⵠⵠ: "img/inv-gold-fork-click.png",
    ᐃΔΔΔⵠΔⲆ: "img/inv-pilot-glasses-click.png",
    ⵠᐃⵠⵠᐃⵠΔ: "img/day-pilot-helmet.png",
    ΔⲆᐃΔⲆΔⲆ: "img/night-pilot-helmet.png",
    ⵠⲆⲆᐃⲆᐃⲆ: "img/inv-pilot-helmet-out.png",
    ⵠΔΔΔᐃΔΔ: "img/inv-pilot-helmet-in.png",
    ΔⵠᐃⲆᐃᐃᐃ: "img/inv-pilot-helmet-click.png",
    ⲆⵠⵠⲆΔⲆⲆᐃΔ: "img/day-sandworm0.png",
    ⵠΔⵠⲆⵠⵠⵠ: "img/day-sandworm1.png",
    ΔⲆΔⵠⲆΔᐃ: "img/day-sandworm2.png",
    ᐃᐃⵠΔⵠΔΔΔΔ: "img/night-sandworm0.png",
    ⲆᐃⲆⵠⵠⵠᐃ: "img/night-sandworm1.png",
    ⵠᐃΔᐃⲆⵠΔ: "img/night-sandworm2.png",
    ⵠᐃΔᐃΔⵠΔ: "img/hurt-sandworm0.png",
    ⵠΔΔⵠᐃⵠΔ: "img/hurt-sandworm1.png",
    ΔΔΔᐃⲆⲆⲆ: "img/hurt-sandworm2.png",
    ᐃᐃⲆᐃᐃ: "img/inv-vulture-feather-click.png",
    ⵠᐃⲆⲆⲆᐃΔ: "img/day-emerald0.png",
    ΔⵠᐃΔΔⲆᐃ: "img/night-emerald0.png",
    ⵠⵠΔᐃΔⲆᐃ: "img/day-emerald1.png",
    ⲆᐃⵠⵠⵠΔⲆ: "img/night-emerald1.png",
    ΔⲆⵠΔᐃᐃΔ: "img/day-emerald2.png",
    ᐃⲆΔⵠⲆⵠᐃ: "img/night-emerald2.png",
    ⵠⵠⵠΔᐃ: "img/inv-emerald-click.png",
    ⵠⲆᐃⵠⲆΔⲆ: "img/inv-sworm-juice-out.png",
    ΔΔⲆⵠⲆᐃΔ: "img/inv-sworm-juice-in.png",
    ᐃΔΔᐃⵠᐃΔ: "img/inv-sworm-juice-click.png",
    ⲆᐃΔΔᐃⲆⵠ: "img/day-point-machine.png",
    ᐃⵠⲆᐃᐃᐃΔ: "img/night-point-machine.png",
    ᐃⲆΔΔⵠΔᐃ: "img/day-point-machine-hole.png",
    ⲆⲆⵠᐃᐃΔᐃ: "img/night-point-machine-hole.png",
    ᐃⲆⵠΔⵠΔᐃ: "img/day-point-machine-ground.png",
    ΔⵠⵠΔΔΔⲆ: "img/night-point-machine-ground.png",
    ⲆᐃΔⵠⲆᐃᐃ: "img/day-point-machine-rotate.png",
    ᐃⲆΔΔⵠΔⵠ: "img/night-point-machine-rotate.png",
    ᐃⵠᐃⲆΔᐃⵠ: "img/inv-point-machine-out.png",
    ΔⲆⵠⲆⵠⲆⲆ: "img/inv-point-machine-in.png",
    ⲆᐃΔᐃⲆᐃⲆ: "img/inv-point-machine-click.png",
    ΔⵠᐃᐃΔΔΔ: "img/day-extractor-machine0-stone.png",
    ΔⲆΔⵠΔΔΔ: "img/night-extractor-machine0-stone.png",
    ⲆⵠⵠᐃⵠⲆΔ: "img/day-extractor-machine-stone.png",
    ᐃⲆⵠⲆⵠⲆΔ: "img/night-extractor-machine-stone.png",
    ᐃᐃⵠⲆᐃⵠⵠ: "img/inv-extractor-machine-stone-out.png",
    ΔⲆⲆΔᐃⲆⵠ: "img/inv-extractor-machine-stone-in.png",
    ΔΔⵠΔⲆⵠΔ: "img/inv-extractor-machine-stone-click.png",
    ⲆⵠᐃᐃⲆΔⲆ: "img/day-extractor-machine0-gold.png",
    ᐃⵠΔΔⵠⵠⵠ: "img/night-extractor-machine0-gold.png",
    ΔⵠᐃⵠᐃⵠⲆ: "img/day-extractor-machine-gold.png",
    ⵠⵠⵠᐃᐃΔΔ: "img/night-extractor-machine-gold.png",
    ⲆⵠⲆⲆᐃⵠᐃ: "img/inv-extractor-machine-gold-out.png",
    ᐃΔΔⵠⵠⵠᐃ: "img/inv-extractor-machine-gold-in.png",
    ⵠΔᐃΔᐃⵠⵠ: "img/inv-extractor-machine-gold-click.png",
    ΔΔΔⲆⵠΔⵠ: "img/day-extractor-machine0-diamond.png",
    ᐃⵠⵠⲆⲆⵠᐃ: "img/night-extractor-machine0-diamond.png",
    ΔⲆᐃⲆΔⵠⲆ: "img/day-extractor-machine-diamond.png",
    ΔΔⲆⵠᐃΔⲆ: "img/night-extractor-machine-diamond.png",
    ᐃΔᐃⵠΔⲆⲆ: "img/inv-extractor-machine-diamond-out.png",
    ⲆⵠᐃΔᐃⲆᐃ: "img/inv-extractor-machine-diamond-in.png",
    ΔⲆᐃᐃⲆⵠⵠ: "img/inv-extractor-machine-diamond-click.png",
    ⵠⲆΔⵠΔᐃⵠ: "img/day-extractor-machine0-amethyst.png",
    ⵠΔΔⲆᐃⲆᐃ: "img/night-extractor-machine0-amethyst.png",
    ⵠᐃΔᐃᐃΔᐃ: "img/day-extractor-machine-amethyst.png",
    ΔΔⵠᐃⲆⲆΔ: "img/night-extractor-machine-amethyst.png",
    ⲆΔⵠⲆⵠΔⵠ: "img/inv-extractor-machine-amethyst-out.png",
    ΔΔΔΔᐃᐃᐃ: "img/inv-extractor-machine-amethyst-in.png",
    ⵠΔΔᐃΔᐃᐃ: "img/inv-extractor-machine-amethyst-click.png",
    ᐃⲆⲆⵠⲆⲆΔ: "img/day-extractor-machine0-reidite.png",
    ⵠᐃᐃΔᐃⵠⵠ: "img/night-extractor-machine0-reidite.png",
    ΔⲆΔᐃⵠΔᐃ: "img/day-extractor-machine-reidite.png",
    ΔΔⲆⵠⲆⵠⲆ: "img/night-extractor-machine-reidite.png",
    ⵠⵠⵠΔⲆΔⲆ: "img/inv-extractor-machine-reidite-out.png",
    ⲆΔᐃΔΔᐃⲆ: "img/inv-extractor-machine-reidite-in.png",
    ᐃⲆⵠⵠΔΔΔ: "img/inv-extractor-machine-reidite-click.png",
    ᐃⲆⵠⵠⲆⵠⵠ: "img/extractor-cases.png",
    ᐃⵠᐃⵠⵠⲆⵠ: "img/day-golden-hen.png",
    ⵠᐃⵠⵠΔᐃⲆ: "img/night-golden-hen.png",
    ΔΔΔⵠᐃⵠᐃ: "img/day-golden-chicken.png",
    ΔΔΔᐃᐃᐃⲆ: "img/night-golden-chicken.png",
    ΔᐃⲆⲆⲆΔΔ: "img/hurt-golden-hen.png",
    ⲆⲆᐃⲆⲆΔᐃ: "img/hurt-golden-chicken.png",
    ⲆΔⵠᐃᐃⲆΔ: "img/logo-interface.png",
    ⲆⲆⲆΔⲆΔΔ: "img/forest-mode-hover.png",
    ᐃⲆᐃΔⲆᐃᐃ: "img/normal-mode-hover.png",
    ΔⲆⲆΔⲆᐃⵠ: "img/vampire-mode-hover.png",
    ᐃᐃⵠΔⲆⵠΔ: "img/zombie-mode-hover.png",
    ᐃⵠᐃΔᐃᐃⵠ: "img/community-mode-hover2.png",
    ᐃᐃⵠΔⵠΔⲆ: "img/experimental-mode-hover.png",
    ⲆⲆᐃΔⲆᐃⵠ: "img/zombie-mode-out.png",
    ⲆⵠⲆⲆᐃⲆⵠ: "img/zombie-mode-in.png",
    ⲆⵠΔⵠᐃⵠⲆ: "img/zombie-mode-click.png",
    ᐃᐃᐃᐃⲆΔⲆ: "img/vampire-mode-out.png",
    ⲆᐃⲆⲆΔᐃⵠ: "img/vampire-mode-in.png",
    ⲆᐃⵠᐃⵠᐃΔ: "img/vampire-mode-click.png",
    ⵠᐃΔⲆⲆᐃⵠ: "img/normal-mode-out.png",
    ᐃⲆᐃⲆᐃⲆΔ: "img/normal-mode-in.png",
    ΔⵠᐃⲆᐃΔⲆ: "img/normal-mode-click.png",
    ⵠᐃᐃΔΔΔⵠ: "img/forest-mode-out.png",
    ⲆᐃⲆⵠΔⲆΔ: "img/forest-mode-in.png",
    ⲆⲆⵠΔⵠⲆⲆ: "img/forest-mode-click.png",
    ⵠⲆⲆⲆⲆⲆΔ: "img/community-mode-out.png",
    ⲆΔⵠᐃⵠⲆⵠ: "img/community-mode-in.png",
    ⵠᐃᐃⲆΔΔᐃ: "img/community-mode-click.png",
    ᐃⵠⲆⲆⵠΔᐃ: "img/experimental-modes-out.png",
    ᐃⵠΔΔⲆⵠΔ: "img/experimental-modes-in.png",
    ᐃᐃⵠΔⵠᐃΔ: "img/experimental-modes-click.png",
    ⲆᐃⲆᐃΔⲆᐃ: "img/youtube-button-out.png",
    ᐃᐃⲆⲆⵠⵠᐃ: "img/youtube-button-in.png",
    ᐃⵠⵠᐃᐃⲆΔ: "img/youtube-button-click.png",
    ᐃⵠⵠΔⲆᐃᐃ: "img/wiki-button-out.png",
    ⲆΔᐃⵠᐃⲆⵠ: "img/wiki-button-in.png",
    ⵠᐃⵠⵠΔΔΔ: "img/wiki-button-click.png",
    ΔⲆⵠⵠⵠᐃᐃ: "img/twitter-button-out.png",
    ⵠⵠⵠΔⲆⲆΔ: "img/twitter-button-in.png",
    ⲆᐃⲆᐃⵠⲆⵠ: "img/twitter-button-click.png",
    ⵠⲆⵠΔⵠⵠΔ: "img/facebook-button-out.png",
    ⵠᐃΔΔⵠΔⲆ: "img/facebook-button-in.png",
    ᐃᐃΔⵠΔⲆⵠ: "img/facebook-button-click.png",
    ΔΔᐃᐃΔΔⲆ: "img/reddit-button-out.png",
    ⲆⵠⵠⲆⲆΔᐃ: "img/reddit-button-in.png",
    ΔⲆᐃⲆⲆᐃⵠ: "img/reddit-button-click.png",
    ⵠΔᐃⲆⵠⲆⵠ: "img/discord-button-out.png",
    ΔⵠΔⵠᐃΔᐃ: "img/discord-button-in.png",
    ⵠⵠⲆᐃᐃⵠᐃ: "img/discord-button-click.png",
    ᐃΔⵠⲆⲆⵠⵠ: "img/merch-button-out.png",
    ⵠᐃⲆⵠᐃᐃⵠ: "img/merch-button-in.png",
    ⵠⲆᐃᐃⲆᐃΔ: "img/merch-button-click.png",
    ⲆΔᐃⵠⲆⲆᐃΔΔ: "img/terminal-button-out.png",
    ᐃΔⲆⲆΔⵠᐃᐃᐃ: "img/terminal-button-in.png",
    ⵠⵠΔⲆᐃⵠⲆⵠᐃ: "img/terminal-button-click.png",
    ⲆⲆᐃⲆⲆᐃᐃ: "img/restart-out.png",
    ΔᐃᐃΔΔᐃⲆ: "img/restart-in.png",
    ΔⵠΔⵠΔΔΔ: "img/restart-click.png",
    ᐃⵠⲆᐃΔᐃⵠ: "img/reboot-out.png",
    ⵠⵠⵠⵠⲆᐃΔ: "img/reboot-in.png",
    ΔⲆⵠⵠᐃΔⵠ: "img/reboot-click.png",
    ⲆⵠⵠΔⲆⵠΔ: "img/guide-out.png",
    ⵠΔΔᐃⵠⲆΔ: "img/guide-in.png",
    ⵠᐃⲆΔⵠⵠⲆ: "img/guide-click.png",
    ⵠⵠⲆΔⲆⲆᐃ: "img/copy-paste-out.png",
    ᐃΔⵠⵠΔⵠⲆ: "img/copy-paste-in.png",
    ᐃⲆᐃᐃᐃᐃⲆ: "img/copy-paste-click.png",
    ᐃΔⵠⲆᐃΔᐃ: "img/link-buttons-bg.png",
    ᐃᐃⲆᐃⲆΔⵠ: "img/changelog-box2.png",
    ⲆⵠⵠᐃΔⵠΔ: "img/changelog_31.png",
    ⲆⲆⵠⵠⲆⵠΔ: "img/banner-taming.png",
    ΔⲆⵠΔΔⵠⵠ: "img/profile-button-out.png",
    ΔⵠΔⵠⲆⵠᐃ: "img/profile-button-in.png",
    ΔⵠⵠⲆⵠⲆⲆ: "img/profile-button-click.png",
    ⵠⲆⵠⵠⲆⲆⵠ: "img/login-button-out.png",
    ⵠᐃᐃⵠⲆΔⵠ: "img/login-button-in.png",
    ⵠⵠΔⲆΔⵠⵠ: "img/login-button-click.png",
    ⵠΔⵠⵠⲆΔᐃ: "img/login-google-out.png",
    ΔΔΔⵠΔⵠᐃ: "img/login-google-in.png",
    ΔⵠΔⵠⵠⵠⵠ: "img/login-google-click.png",
    ᐃΔⵠΔⲆⲆᐃ: "img/login-facebook-out.png",
    ΔⵠᐃⲆⲆΔⲆ: "img/login-facebook-in.png",
    ⵠⲆⲆΔᐃⲆⲆ: "img/login-facebook-click.png",
    ⲆᐃⲆᐃⵠᐃᐃ: "img/account-box.png",
    ⲆⵠⵠⲆⵠᐃᐃⵠⵠ: "img/account-under-maintenance.png",
    ⲆⲆⲆⵠᐃⲆᐃ: "img/close-button-account-out.png",
    ᐃⲆⵠⵠᐃⲆΔ: "img/close-button-account-in.png",
    ᐃᐃⲆᐃⲆΔΔ: "img/close-button-account-click.png",
    ⲆΔΔᐃΔⲆⲆ: "img/play-button-out.png",
    ΔΔᐃⲆᐃΔᐃ: "img/play-button-in.png",
    ΔⲆⵠⵠⲆΔΔ: "img/play-button-click.png",
    ⵠⵠᐃΔᐃᐃᐃⵠᐃ: "img/app-store-badge.png",
    ⲆᐃΔⵠΔΔΔΔΔ: "img/play-store-badge.png",
    ⵠⲆⲆⵠᐃΔⵠⲆⲆ: "img/mobile-boxad.png",
    ΔᐃⵠΔᐃΔᐃ: "img/modify-name-out.png",
    ᐃⵠᐃΔᐃΔΔ: "img/modify-name-in.png",
    ⲆᐃⵠᐃᐃⲆⵠ: "img/modify-name-click.png",
    ᐃΔⲆⲆⲆⲆᐃ: "img/copy-id-button-out.png",
    ΔⲆⵠᐃᐃΔᐃ: "img/copy-id-button-hover.png",
    ᐃⲆⵠⲆᐃⲆⵠ: "img/copy-id-button-active.png",
    ⵠΔΔⵠⲆΔΔ: "img/yes-button-out.png",
    ⲆᐃⲆᐃⲆⲆⵠ: "img/yes-button-in.png",
    ⵠΔⵠⲆⲆⲆΔ: "img/yes-button-click.png",
    ΔⵠⵠⵠⲆᐃᐃ: "img/yes-300-button-out.png",
    ⵠᐃⲆᐃⵠΔⵠ: "img/yes-300-button-in.png",
    ΔⵠᐃⲆⲆⵠⵠ: "img/yes-300-button-click.png",
    ⲆⵠⵠΔⲆⵠᐃ: "img/no-button-out.png",
    ΔⵠᐃⲆΔΔΔ: "img/no-button-in.png",
    ⲆⵠⲆⵠΔᐃⲆ: "img/no-button-click.png",
    ⲆⲆⵠΔΔⵠⲆ: "img/no-thanks-button-out.png",
    ΔΔⵠΔⵠⵠΔ: "img/no-thanks-button-in.png",
    ⲆⵠΔⵠⲆΔᐃ: "img/no-thanks-button-click.png",
    ᐃΔⲆΔⲆᐃᐃ: "img/shop-button-out.png",
    ΔⵠΔᐃΔᐃⵠ: "img/shop-button-in.png",
    ΔⵠⵠΔⲆΔΔ: "img/shop-button-click.png",
    ⲆΔΔⲆⲆᐃᐃ: "img/logout-out.png",
    ΔⲆⵠⲆᐃΔⲆ: "img/logout-in.png",
    ⲆᐃⲆΔⵠⲆⲆ: "img/logout-click.png",
    ΔⲆᐃᐃⲆⲆΔ: "img/terms-button-out.png",
    ᐃΔⵠᐃΔΔΔ: "img/terms-button-in.png",
    ⵠΔⲆⲆΔΔΔ: "img/terms-button-click.png",
    ΔᐃᐃΔⲆΔⵠ: "img/tutorial-icon.png",
    ΔΔΔΔᐃⲆⵠ: "img/skins-icon.png",
    ΔΔⲆⲆⵠΔᐃ: "img/shop-icon.png",
    ⵠΔⲆⲆⲆⵠⲆⵠⵠ: "img/paint-icon.png",
    ΔΔᐃⲆⵠᐃᐃ: "img/leaderboard-icon.png",
    ⲆΔⲆⲆⵠΔΔ: "img/start-icon.png",
    ⲆΔΔΔᐃⲆᐃ: "img/profile-icon.png",
    ⲆᐃΔᐃⲆᐃⵠ: "img/server-access-icon2.png",
    ᐃΔⵠᐃⲆΔⵠ: "img/button-homepage-bg-out.png",
    ᐃΔᐃᐃᐃᐃᐃ: "img/button-homepage-bg-in.png",
    ⵠΔΔΔⲆⲆⵠ: "img/button-homepage-bg-click.png",
    ᐃᐃⲆᐃᐃΔⲆ: "img/button-bottom-homepage-bg-out.png",
    ᐃⲆᐃΔⲆⲆⵠ: "img/button-bottom-homepage-bg-in.png",
    ΔⵠΔᐃᐃΔⲆ: "img/button-bottom-homepage-bg-click.png",
    ⲆⲆⲆᐃⵠⲆᐃ: "img/lvl-player.png",
    ΔᐃΔΔΔΔᐃ: "img/avatar-player.png",
    ΔⲆΔΔⵠΔⲆ: "img/avatar-player1.png",
    ⲆⵠΔⲆⵠΔⵠ: "img/avatar-player2.png",
    ᐃΔⲆⲆᐃⲆⲆ: "img/avatar-player3.png",
    ΔⵠⲆΔΔⵠⵠ: "img/avatar-player4.png",
    ⲆⵠⲆᐃⵠⵠΔ: "img/avatar-player5.png",
    ᐃⲆᐃⵠΔᐃⵠ: "img/avatar-player6.png",
    ⵠΔⵠⲆΔⵠᐃ: "img/avatar-player7.png",
    ᐃⵠΔΔⵠⵠᐃ: "img/avatar-player8.png",
    ⵠⲆⵠⵠᐃⲆΔ: "img/avatar-player9.png",
    ⲆⲆᐃⲆΔⵠⲆ: "img/avatar-player10.png",
    ΔⵠᐃΔΔⲆⵠ: "img/avatar-player11.png",
    ⵠⵠⵠⲆⲆΔΔ: "img/avatar-player12.png",
    ⵠᐃⲆᐃⵠⲆΔ: "img/avatar-player13.png",
    ⵠΔⵠᐃᐃΔᐃ: "img/avatar-player14.png",
    ΔⵠᐃᐃⲆΔⲆ: "img/avatar-player14.png",
    ᐃⲆΔᐃⵠⵠⵠ: "img/avatar-player14.png",
    ᐃΔⵠⲆᐃᐃⵠ: "img/avatar-player14.png",
    ΔΔΔᐃⲆΔⵠⲆΔ: "img/golden-bread.png",
    ΔᐃⲆΔᐃⲆⲆ: "img/buy-bread-out.png",
    ⵠΔⵠᐃⲆⵠⵠ: "img/buy-bread-in.png",
    ᐃⲆⵠΔⲆΔⲆ: "img/buy-bread-click.png",
    ᐃΔⲆΔᐃΔⵠ: "img/gauge.png",
    ⲆⵠΔⵠⲆᐃΔΔᐃ: "img/season-4-out.png",
    ΔⲆΔⲆⵠΔⵠⵠΔ: "img/season-4-in.png",
    ⵠᐃⵠᐃᐃⲆⵠᐃΔ: "img/season-4-click.png",
    ⵠᐃⵠΔᐃΔΔⵠⲆ: "img/season4-box.png",
    ΔⲆΔᐃᐃⲆΔᐃΔ: "img/season-5-out.png",
    ΔΔᐃᐃΔᐃⵠΔⲆ: "img/season-5-in.png",
    ⵠΔᐃⵠⵠΔⵠⲆΔ: "img/season-5-click.png",
    ⵠᐃΔⵠᐃΔᐃᐃᐃ: "img/season5-box.png",
    ⵠᐃᐃⲆⵠⲆΔ: "img/season-6-out.png",
    ⲆⲆⵠⲆΔⵠᐃ: "img/season-6-in.png",
    ᐃᐃᐃⲆᐃᐃΔ: "img/season-6-click.png",
    ᐃᐃΔΔΔⲆΔ: "img/season6-box.png",
    ᐃΔᐃⲆⲆᐃΔ: "img/profile3-box.png",
    ⵠΔΔⵠᐃᐃⲆ: "img/skins-box.png",
    ᐃⲆⲆⲆⵠΔΔ: "img/shop-box.png",
    ⲆⵠΔⵠⵠⵠⵠⵠᐃ: "img/private-server-box.png",
    ΔΔⲆⵠᐃⲆⲆ: "img/location-box.png",
    ⲆᐃΔΔΔⲆⵠ: "img/server-duration-box.png",
    ⲆⲆⲆⲆⲆΔᐃ: "img/tutorial-box.png",
    ⵠⲆⵠⲆⵠⵠⵠ: "img/leaderboard2-box.png",
    ΔΔⲆⵠⵠⵠᐃ: "img/buy-breads-box.png",
    ΔᐃΔⲆΔⲆⵠ: "img/bag-box.png",
    ΔΔᐃⵠⲆΔⲆ: "img/deadbox-box.png",
    ᐃᐃΔΔΔⲆᐃ: "img/book-box.png",
    ᐃⵠⲆⵠΔⵠᐃ: "img/accessories-box.png",
    ⵠᐃᐃⵠⵠⲆΔ: "img/customskin-box.png",
    ΔⲆⵠᐃⲆⵠⲆ: "img/bag-lasts.png",
    ⲆᐃΔⲆⵠⵠΔ: "img/server-lasts.png",
    ΔⵠⵠᐃⲆⵠΔ: "img/server-access-box3.png",
    ᐃⲆⵠⲆΔΔΔ: "img/lootbox-box.png",
    ᐃᐃΔⵠⲆⵠᐃ: "img/change-nickname0.png",
    ⵠⵠᐃⵠⵠᐃⵠ: "img/change-nickname1.png",
    ΔΔⲆᐃⲆΔⵠ: "img/cheating-box.png",
    ⲆΔΔⵠⲆΔᐃᐃΔ: "img/daily-quest-box.png",
    ᐃᐃⲆᐃⲆᐃⵠᐃⵠ: "img/daily-5-bread.png",
    ⵠΔΔΔⲆᐃᐃⲆⵠ: "img/daily-10-bread.png",
    ⲆΔⲆⲆⵠⲆⵠΔⲆ: "img/daily-valid.png",
    ⲆⲆⲆⲆᐃⲆΔ: "img/normal-profile-out.png",
    ᐃΔΔⵠⲆⲆᐃ: "img/normal-profile-in.png",
    ΔⲆΔΔᐃⲆᐃ: "img/normal-profile-click.png",
    ⲆⲆᐃΔᐃⵠⵠ: "img/forest-profile-out.png",
    ⲆⵠΔΔΔⲆⵠ: "img/forest-profile-in.png",
    ⲆⲆⲆⵠⲆⵠⵠ: "img/forest-profile-click.png",
    ⲆΔΔⲆⲆⲆⵠ: "img/zombie-profile-out.png",
    ⵠⲆΔᐃⵠⲆᐃ: "img/zombie-profile-in.png",
    ⵠⵠΔⵠⲆᐃⵠ: "img/zombie-profile-click.png",
    ⲆⲆⲆⵠΔⲆⵠ: "img/vampire-profile-out.png",
    ᐃΔⵠⵠΔΔⵠ: "img/vampire-profile-in.png",
    ⵠⵠΔΔⲆⲆΔ: "img/vampire-profile-click.png",
    ᐃᐃᐃΔⲆⵠⵠ: "img/total-profile-out.png",
    ⵠᐃΔⵠᐃΔⲆ: "img/total-profile-in.png",
    ⵠΔⲆⵠᐃⵠΔ: "img/total-profile-click.png",
    ⲆΔᐃᐃΔⵠΔ: "img/season1-out.png",
    ᐃⲆⲆΔΔᐃᐃ: "img/season1-in.png",
    ⲆΔⵠᐃⵠΔⵠ: "img/season1-click.png",
    ⲆⲆΔⵠΔᐃΔ: "img/season2-out.png",
    ΔⵠⲆⲆⲆᐃᐃ: "img/season2-in.png",
    ΔⵠⲆᐃⵠᐃΔ: "img/season2-click.png",
    ⵠΔΔᐃⲆⵠⵠ: "img/season3-out.png",
    ΔᐃⲆⵠⲆⵠⲆ: "img/season3-in.png",
    ΔⵠᐃⵠⵠⵠΔ: "img/season3-click.png",
    ᐃᐃᐃᐃⲆⲆⲆ: "img/season4-out.png",
    ᐃᐃΔⵠⲆⵠⲆ: "img/season4-in.png",
    ᐃⲆⲆᐃᐃⲆΔ: "img/season4-click.png",
    ᐃⵠᐃᐃΔΔⵠ: "img/season5-out.png",
    ⵠⵠⵠΔΔⲆᐃ: "img/season5-in.png",
    ⵠᐃᐃᐃᐃⵠᐃ: "img/season5-click.png",
    ⵠΔΔΔⲆⵠⲆ: "img/season6-out.png",
    ᐃᐃⵠⵠⲆⵠⲆ: "img/season6-in.png",
    ⲆΔΔΔΔΔΔ: "img/season6-click.png",
    ΔΔⵠⲆⵠⲆⲆ: "img/locked-skin-alert.png",
    ᐃⲆⵠΔᐃⲆⵠ: "img/locked-custom-alert.png",
    ᐃⲆΔΔᐃΔᐃ: "img/bg-red-locked.png",
    ⲆᐃⲆᐃᐃⲆΔ: "img/skin-button-out.png",
    ⲆΔᐃⲆΔⲆⲆ: "img/skin-button-in.png",
    ⵠⵠΔⵠᐃⵠΔ: "img/skin-button-click.png",
    ⲆΔⲆⵠⲆⲆᐃ: "img/accessory-button-out.png",
    ᐃⵠⵠⲆᐃΔⲆ: "img/accessory-button-in.png",
    ΔⵠⵠᐃΔΔΔ: "img/accessory-button-click.png",
    ⲆⲆⵠⲆᐃᐃᐃ: "img/bag-button-out.png",
    ΔⵠΔΔΔᐃᐃ: "img/bag-button-in.png",
    ᐃⵠⵠΔⵠⲆΔ: "img/bag-button-click.png",
    ᐃⵠⵠⲆᐃⲆⵠ: "img/book-button-out.png",
    ⲆⵠᐃΔⵠΔΔ: "img/book-button-in.png",
    ⵠⵠⵠⲆΔΔⵠ: "img/book-button-click.png",
    ⲆᐃⲆⲆⲆⵠΔ: "img/deadbox-button-out.png",
    ΔⲆᐃⲆⵠᐃⵠ: "img/deadbox-button-in.png",
    ΔⲆⲆᐃΔⲆⵠ: "img/deadbox-button-click.png",
    ᐃᐃⵠΔⵠⲆⵠ: "img/loot-button-out.png",
    ⵠΔᐃᐃΔΔᐃ: "img/loot-button-in.png",
    ⵠΔⵠⲆⲆᐃⵠ: "img/loot-button-click.png",
    ΔⲆΔᐃⵠⲆⲆ: "img/free-item-out.png",
    ᐃⲆⲆⲆΔⵠⲆ: "img/free-item-in.png",
    ⲆⵠΔⲆⲆⵠⵠ: "img/free-item-click.png",
    ΔⵠΔⵠ: "img/wood-item-out.png",
    ⵠⲆΔⲆ: "img/wood-item-in.png",
    ᐃᐃΔⲆ: "img/wood-item-click.png",
    ΔⵠΔΔⵠⲆΔ: "img/stone-item.png",
    ΔⵠⵠⲆⲆΔⵠ: "img/stone-item-in.png",
    ΔⵠᐃⵠⲆΔᐃ: "img/stone-item-click.png",
    ΔᐃΔⲆΔΔⵠ: "img/gold-item.png",
    ⲆᐃⵠⲆⲆΔᐃ: "img/gold-item-in.png",
    ⵠⵠΔᐃⲆΔⵠ: "img/gold-item-click.png",
    ⵠⵠⵠⵠⲆΔⲆ: "img/diamond-item.png",
    ⲆᐃⲆΔⲆΔᐃ: "img/diamond-item-in.png",
    ⲆⲆΔⲆᐃⲆⲆ: "img/diamond-item-click.png",
    ΔᐃⵠΔⵠⵠΔ: "img/amethyst-item.png",
    ⵠΔᐃⵠᐃⲆⵠ: "img/amethyst-item-in.png",
    ⲆⲆⲆᐃΔⲆᐃ: "img/amethyst-item-click.png",
    ⵠᐃⵠᐃⵠᐃΔ: "img/reidite-item.png",
    ⲆᐃⵠⲆⲆᐃⲆ: "img/reidite-item-in.png",
    ⲆΔⵠᐃᐃᐃᐃ: "img/reidite-item-click.png",
    ΔᐃΔᐃⲆⲆᐃ: "img/special-item-out.png",
    ΔⲆⵠⵠⲆⲆⵠ: "img/special-item-in.png",
    ᐃᐃΔⵠΔΔΔ: "img/special-item-click.png",
    ⵠⵠΔΔΔᐃΔ: "img/level-item-out.png",
    ΔΔⵠⵠᐃⵠΔ: "img/level-item-in.png",
    ΔΔΔΔⲆΔᐃ: "img/level-item-click.png",
    ΔΔⵠΔⵠΔΔ: "img/skin-previous-out.png",
    ΔΔⲆⲆⲆⵠΔ: "img/skin-previous-in.png",
    ⵠΔᐃⵠΔⵠⵠ: "img/skin-previous-click.png",
    ΔΔⲆΔΔⲆΔ: "img/skin-next-out.png",
    ⲆΔⵠΔⵠᐃᐃ: "img/skin-next-in.png",
    ΔᐃⵠⲆⲆΔⲆ: "img/skin-next-click.png",
    ⲆᐃⲆΔⲆ: "img/back-button-out.png",
    ⵠᐃⲆᐃᐃ: "img/back-button-in.png",
    ⵠⲆΔⵠΔ: "img/back-button-click.png",
    ⲆⵠᐃⲆᐃΔᐃ: "img/get-more-button-out.png",
    ⲆⲆⲆⵠⲆΔⲆ: "img/get-more-button-in.png",
    ᐃⵠΔΔⲆⲆⲆ: "img/get-more-button-click.png",
    ⲆⵠΔⲆΔΔⵠ: "img/currency1-out.png",
    ΔⵠⵠᐃΔΔⵠ: "img/currency1-in.png",
    ⲆⲆⵠΔᐃⲆᐃ: "img/currency1-click.png",
    ᐃΔᐃⵠⲆⵠᐃ: "img/currency2-out.png",
    ⲆⲆᐃᐃΔᐃⵠ: "img/currency2-in.png",
    ΔΔⲆⵠᐃᐃⵠ: "img/currency2-click.png",
    ᐃⲆΔⲆᐃⲆᐃ: "img/currency3-out.png",
    ⵠᐃⲆΔⵠᐃᐃ: "img/currency3-in.png",
    ⵠΔⵠⲆⵠΔΔ: "img/currency3-click.png",
    ΔⵠⲆⵠⲆᐃⲆ: "img/currency4-out.png",
    ᐃⲆⵠⲆΔⲆⵠ: "img/currency4-in.png",
    ᐃⲆⵠⵠⵠΔⲆ: "img/currency4-click.png",
    ⵠⲆⲆΔⲆⲆᐃ: "img/currency5-out.png",
    ⵠⵠⲆⲆⲆΔⲆ: "img/currency5-in.png",
    ᐃⵠⵠⲆΔΔⲆ: "img/currency5-click.png",
    ⵠⵠⵠᐃⵠⵠⵠ: "img/price1-out.png",
    ⲆⲆᐃⲆᐃΔⵠ: "img/price1-in.png",
    ⵠⵠᐃΔⲆᐃᐃ: "img/price1-click.png",
    ᐃⲆⲆᐃⲆⵠⵠ: "img/price2-out.png",
    ⲆᐃᐃⵠΔᐃⵠ: "img/price2-in.png",
    ⵠΔΔⵠᐃᐃⵠ: "img/price2-click.png",
    ᐃΔⲆⲆΔⵠⵠ: "img/price3-out.png",
    ΔⲆⲆᐃᐃᐃⲆ: "img/price3-in.png",
    ⲆΔⲆⲆⲆΔⵠ: "img/price3-click.png",
    ΔΔΔⵠⲆΔᐃ: "img/price4-out.png",
    ΔΔΔⵠⵠᐃΔ: "img/price4-in.png",
    ΔⲆⵠⲆⲆⵠⲆ: "img/price4-click.png",
    ⲆᐃⲆⵠΔⲆⵠ: "img/price5-out.png",
    ΔᐃΔⵠΔⵠᐃ: "img/price5-in.png",
    ΔⲆΔΔⵠⵠⵠ: "img/price5-click.png",
    ⵠⲆⵠⵠᐃᐃΔΔⵠ: "img/buy-private-server-out.png",
    ΔᐃᐃⵠⵠᐃⵠⵠⲆ: "img/buy-private-server-in.png",
    ⲆⵠΔⲆⵠⲆⲆⵠᐃ: "img/buy-private-server-click.png",
    ⵠᐃⲆⲆᐃⵠⲆ: "img/atlanta-button-out.png",
    ΔⵠᐃⲆΔⲆΔ: "img/atlanta-button-in.png",
    ⵠⵠⲆⲆⵠΔᐃ: "img/atlanta-button-click.png",
    ⵠᐃΔⲆΔᐃΔ: "img/los-angeles-button-out.png",
    ΔⲆΔⵠᐃΔⵠ: "img/los-angeles-button-in.png",
    ᐃᐃᐃΔΔⵠᐃ: "img/los-angeles-button-click.png",
    ⲆⲆⲆΔΔΔᐃ: "img/sydney-button-out.png",
    ⵠΔⲆⵠᐃⵠⵠ: "img/sydney-button-in.png",
    ⵠⵠⲆᐃᐃᐃⵠ: "img/sydney-button-click.png",
    ΔᐃᐃΔᐃΔⲆ: "img/frankfurt-button-out.png",
    ΔⲆΔⲆⲆⵠΔ: "img/frankfurt-button-in.png",
    ⲆⲆⲆⲆᐃⵠΔ: "img/frankfurt-button-click.png",
    ΔΔⲆᐃΔⵠΔ: "img/osaka-button-out.png",
    ᐃΔⵠⲆⲆⲆΔ: "img/osaka-button-in.png",
    ⵠⲆⵠΔΔⲆΔ: "img/osaka-button-click.png",
    ΔᐃΔⵠⲆⲆΔⵠⵠ: "img/yes-location-out.png",
    ⵠⲆⲆⵠⵠᐃΔΔΔ: "img/yes-location-in.png",
    ΔⵠⵠΔⵠᐃⲆΔΔ: "img/yes-location-click.png",
    ᐃᐃᐃⵠΔΔΔ: "img/3days-button-out.png",
    ᐃᐃᐃᐃⵠΔⵠ: "img/3days-button-in.png",
    ᐃᐃⵠΔΔᐃⲆ: "img/3days-button-click.png",
    ⵠᐃᐃⲆⵠᐃⲆ: "img/7days-button-out.png",
    ᐃⵠᐃⲆᐃΔⵠ: "img/7days-button-in.png",
    ⲆⲆᐃΔΔᐃⵠ: "img/7days-button-click.png",
    ᐃᐃΔΔⵠᐃΔ: "img/30days-button-out.png",
    ᐃᐃⵠⵠⵠⵠⲆ: "img/30days-button-in.png",
    ᐃᐃᐃᐃΔⵠΔ: "img/30days-button-click.png",
    ⲆⲆΔᐃⲆⲆⵠ: "img/90days-button-out.png",
    ⲆⵠⲆᐃⲆⵠⲆ: "img/90days-button-in.png",
    ⲆᐃⲆΔⵠⵠⲆ: "img/90days-button-click.png",
    ΔᐃΔⲆΔΔΔ: "img/spin1.png",
    ᐃⲆᐃⵠⲆⵠⲆ: "img/spin2.png",
    ΔⵠⲆΔⵠⵠΔ: "img/spin3.png",
    ⲆⲆⲆΔⲆⲆⲆ: "img/spin4.png",
    ᐃᐃᐃⲆᐃⲆΔ: "img/spin5.png",
    ΔΔⲆᐃⵠΔⵠ: "img/spin6.png",
    ᐃⵠⵠⲆⵠΔΔ: "img/arrow-spin.png",
    ⲆΔΔⲆΔᐃΔ: "img/spin-button-1-out.png",
    ⵠⲆᐃⵠᐃᐃⲆ: "img/spin-button-1-in.png",
    ⵠⲆⲆⲆΔᐃⲆ: "img/spin-button-1-click.png",
    ΔᐃᐃⲆΔⵠΔ: "img/spin-button-2-out.png",
    ⵠᐃⵠΔⵠΔⵠ: "img/spin-button-2-in.png",
    ⵠⲆΔⲆⲆΔⵠ: "img/spin-button-2-click.png",
    ᐃᐃⵠⵠᐃᐃᐃ: "img/spin-button-3-out.png",
    ᐃⲆⲆᐃⵠⵠΔ: "img/spin-button-3-in.png",
    ᐃᐃᐃⵠⵠᐃⵠ: "img/spin-button-3-click.png",
    ᐃΔⵠⲆⵠᐃΔ: "img/spin-button-4-out.png",
    ΔᐃᐃⵠⲆᐃΔ: "img/spin-button-4-in.png",
    ΔⲆⵠᐃⵠΔᐃ: "img/spin-button-4-click.png",
    ΔⲆΔⲆⲆⲆΔ: "img/spin-button-5-out.png",
    ⵠⲆⲆᐃᐃⵠΔ: "img/spin-button-5-in.png",
    ΔⵠᐃᐃᐃᐃΔ: "img/spin-button-5-click.png",
    ΔᐃᐃⲆⲆΔΔ: "img/spin-light.png",
    ⲆΔⲆⲆᐃΔⲆ: "img/tuto-wiki-out.png",
    ⲆⵠⲆΔⲆⵠⵠ: "img/tuto-wiki-in.png",
    ᐃⲆᐃΔⵠᐃᐃ: "img/tuto-wiki-click.png",
    Ⲇⵠᐃᐃⵠᐃⵠ: "img/tuto-previous-out.png",
    ᐃⵠᐃΔⵠΔⲆ: "img/tuto-previous-in.png",
    ⲆΔᐃᐃⲆᐃΔ: "img/tuto-previous-click.png",
    ⵠⲆΔᐃⲆᐃΔ: "img/tuto-next-out.png",
    ⲆᐃⵠΔΔΔΔ: "img/tuto-next-in.png",
    ᐃΔⲆⲆⲆΔⵠ: "img/tuto-next-click.png",
    ΔᐃΔᐃΔΔΔ: "img/time-leaderboard-out.png",
    ⲆⲆᐃⲆΔᐃᐃ: "img/time-leaderboard-in.png",
    ⵠⵠⵠᐃᐃⵠⲆ: "img/time-leaderboard-click.png",
    ᐃⲆⲆΔᐃⵠⲆ: "img/score-leaderboard-out.png",
    ⵠΔⵠᐃⵠⲆⲆ: "img/score-leaderboard-in.png",
    ΔⵠΔᐃᐃᐃⵠ: "img/score-leaderboard-click.png",
    ⵠᐃⵠΔᐃᐃΔ: "img/lvl-leaderboard-out.png",
    ⵠⵠⵠᐃⵠⵠⲆ: "img/lvl-leaderboard-in.png",
    ᐃⵠΔᐃᐃΔᐃ: "img/lvl-leaderboard-click.png",
    ᐃⵠⵠᐃⲆⲆⵠ: "img/kill-leaderboard-out.png",
    ΔⵠᐃⵠⵠⲆⲆ: "img/kill-leaderboard-in.png",
    ΔΔⵠΔΔᐃⵠ: "img/kill-leaderboard-click.png",
    ⲆⵠΔⲆᐃᐃᐃ: "img/all-leaderboard-out.png",
    ᐃᐃᐃᐃⵠⲆⲆ: "img/all-leaderboard-in.png",
    ⵠⲆᐃᐃⲆⲆⵠ: "img/all-leaderboard-click.png",
    ΔΔⵠⲆⵠⵠᐃ: "img/today-leaderboard-out.png",
    ΔΔᐃᐃⵠΔⲆ: "img/today-leaderboard-in.png",
    ΔⲆᐃΔⵠᐃⲆ: "img/today-leaderboard-click.png",
    ⲆΔⵠⲆⵠⲆᐃ: "img/week-leaderboard-out.png",
    ⵠⲆⲆΔᐃΔⲆ: "img/week-leaderboard-in.png",
    ⲆⵠᐃΔⲆᐃⵠ: "img/week-leaderboard-click.png",
    ⵠᐃᐃᐃⵠⲆΔ: "img/season1-out.png",
    ⵠⵠⵠⵠΔᐃⵠ: "img/season1-in.png",
    ΔΔⵠⲆⲆⲆᐃ: "img/season1-click.png",
    ⵠⵠⲆΔᐃⲆᐃ: "img/season2-out.png",
    ⲆⲆⲆΔⲆΔⲆ: "img/season2-in.png",
    ⵠⲆⵠΔᐃⲆⲆ: "img/season2-click.png",
    ΔΔᐃⲆΔΔᐃ: "img/season3-out.png",
    ΔᐃᐃᐃᐃᐃΔ: "img/season3-in.png",
    ΔᐃⵠᐃⲆΔⲆ: "img/season3-click.png",
    ᐃΔᐃΔᐃⵠᐃ: "img/season4-out.png",
    ᐃΔⲆⲆᐃΔΔ: "img/season4-in.png",
    ΔⵠⵠⵠⲆΔⲆ: "img/season4-click.png",
    ⲆⵠᐃΔⵠᐃⵠ: "img/season5-out.png",
    ᐃⲆΔⲆᐃᐃⲆ: "img/season5-in.png",
    ⲆⵠᐃⲆᐃⵠⲆ: "img/season5-click.png",
    ⲆᐃΔⲆⲆⲆΔ: "img/season6-out.png",
    ᐃΔᐃᐃⲆⵠⵠ: "img/season6-in.png",
    ᐃΔΔⲆⵠᐃⵠ: "img/season6-click.png",
    ⵠΔⵠⲆΔΔᐃ: "img/total-lead-out.png",
    ΔΔΔΔᐃᐃⲆ: "img/total-lead-in.png",
    ⵠᐃⲆΔΔᐃⵠ: "img/total-lead-click.png",
    ᐃⵠᐃΔΔΔⲆ: "img/normal-lead-out.png",
    ⲆⲆΔⲆᐃΔⲆ: "img/normal-lead-in.png",
    ⲆⲆᐃᐃΔⵠⲆ: "img/normal-lead-click.png",
    ᐃΔΔΔΔⲆⲆ: "img/forest-lead-out.png",
    ᐃⵠⵠⵠΔⵠⵠ: "img/forest-lead-in.png",
    ΔᐃⵠᐃΔᐃⲆ: "img/forest-lead-click.png",
    ΔⲆⲆⲆᐃⵠᐃ: "img/vampire-lead-out.png",
    ᐃΔⵠⵠⲆⵠΔ: "img/vampire-lead-in.png",
    ΔⲆⲆΔᐃΔᐃ: "img/vampire-lead-click.png",
    ⵠΔΔⲆΔΔⲆ: "img/zombie-lead-out.png",
    ⲆⲆᐃⲆⲆᐃⲆ: "img/zombie-lead-in.png",
    ⲆⲆⲆΔⲆⵠⵠ: "img/zombie-lead-click.png",
    ᐃⲆᐃᐃⲆΔᐃ: "img/day-level5.png",
    ΔᐃᐃᐃᐃΔΔ: "img/night-level5.png",
    ⲆⵠΔΔᐃⲆⲆ: "img/day-level10.png",
    ⲆᐃΔⲆᐃΔΔ: "img/night-level10.png",
    ᐃⲆⲆⲆⲆⲆⲆ: "img/day-level15.png",
    ⲆⲆᐃΔᐃⲆⵠ: "img/night-level15.png",
    ᐃⲆᐃᐃⲆΔⵠ: "img/day-level20.png",
    ⵠᐃⵠΔⵠⲆᐃ: "img/night-level20.png",
    ⲆΔΔΔⲆⵠⲆ: "img/day-level25.png",
    ΔΔᐃᐃᐃⲆⲆ: "img/night-level25.png",
    ΔⲆⵠᐃⵠΔⵠ: "img/day-level30.png",
    ΔⵠᐃⵠΔⲆⲆ: "img/night-level30.png",
    ΔΔⵠⵠΔⲆᐃ: "img/day-level35.png",
    ᐃⲆΔⵠⵠⲆⲆ: "img/night-level35.png",
    ⲆⵠᐃⲆⲆⲆΔ: "img/day-level40.png",
    ⲆΔⵠᐃⲆⲆᐃ: "img/night-level40.png",
    ᐃⲆΔⵠᐃᐃΔ: "img/day-level45.png",
    ᐃΔᐃⲆⵠⲆⵠ: "img/night-level45.png",
    ᐃⲆⵠᐃᐃΔΔ: "img/day-level50.png",
    ΔⲆⵠⲆᐃⲆᐃ: "img/night-level50.png",
    ΔᐃΔⵠⵠΔⵠ: "img/day-level55.png",
    ᐃΔⲆΔⲆᐃⲆ: "img/night-level55.png",
    ⵠⲆⲆᐃᐃᐃΔ: "img/day-level60.png",
    ᐃᐃΔΔⲆΔⲆ: "img/night-level60.png",
    ⵠⵠⲆᐃΔⵠⵠ: "img/day-skin-devast0.png",
    ⵠᐃᐃᐃⵠᐃⲆ: "img/night-skin-devast0.png",
    ᐃᐃΔⲆΔΔⲆ: "img/day-hand-devaster.png",
    ᐃⵠⲆᐃΔᐃᐃ: "img/night-hand-devaster.png",
    ᐃⲆΔⵠⲆⲆⵠ: "img/day-skin-star0.png",
    ⲆΔⲆΔⲆⵠᐃ: "img/night-skin-star0.png",
    ⲆⲆⵠⲆΔᐃⲆ: "img/day-hand-star0.png",
    ΔⵠᐃⵠᐃΔΔ: "img/night-hand-star0.png",
    ⵠⲆΔᐃⵠΔᐃ: "img/day-vampire.png",
    ΔⲆᐃᐃΔΔᐃ: "img/night-vampire.png",
    ᐃⲆΔⲆΔᐃΔ: "img/day-hand-vampire.png",
    ᐃⵠⲆᐃΔᐃΔ: "img/night-hand-vampire.png",
    ⲆᐃᐃᐃⲆⲆΔ: "img/day-zombie.png",
    ⲆⲆⲆΔᐃΔΔ: "img/night-zombie.png",
    ΔΔΔᐃⲆᐃⵠ: "img/day-hand-zombie.png",
    ᐃⲆⵠΔⲆⲆⵠ: "img/night-hand-zombie.png",
    ΔΔᐃⵠΔⵠΔ: "img/day-skin113.png",
    ᐃⵠⲆᐃⵠⲆⵠ: "img/night-skin113.png",
    ⲆᐃᐃⲆᐃⲆᐃ: "img/day-hand-skin113.png",
    ΔᐃⵠᐃⲆⲆᐃ: "img/night-hand-skin113.png",
    ᐃⲆⵠᐃΔⲆᐃ: "img/day-skin0.png",
    ΔΔⲆⵠⲆⲆⵠ: "img/night-skin0.png",
    ᐃᐃᐃⵠⵠᐃⲆ: "img/day-skin1.png",
    ΔⲆΔΔᐃⵠᐃ: "img/night-skin1.png",
    ⵠⲆⲆⵠⵠΔΔ: "img/day-skin2.png",
    ⲆⵠⵠⵠΔⲆΔ: "img/night-skin2.png",
    ΔⲆⲆᐃⵠᐃⵠ: "img/day-skin3.png",
    ⲆᐃⲆᐃⲆΔΔ: "img/night-skin3.png",
    ᐃⵠⵠᐃⵠⵠⲆ: "img/day-skin4.png",
    ⵠⲆΔᐃΔⲆΔ: "img/night-skin4.png",
    ΔⲆΔᐃΔⲆᐃ: "img/day-skin5.png",
    ⲆⵠᐃΔⵠⲆⵠ: "img/night-skin5.png",
    ᐃⵠΔΔⲆΔⲆ: "img/day-skin6.png",
    ΔΔΔᐃΔⵠⲆ: "img/night-skin6.png",
    ⲆᐃᐃⲆᐃΔⲆ: "img/day-skin7.png",
    ΔΔⵠⵠⵠⵠᐃ: "img/night-skin7.png",
    ⵠᐃⲆᐃⵠᐃⲆ: "img/day-skin8.png",
    ΔᐃⲆΔΔᐃΔ: "img/night-skin8.png",
    ᐃⵠⲆᐃΔⲆᐃ: "img/day-skin9.png",
    Ⲇⵠⵠᐃᐃⵠⵠ: "img/night-skin9.png",
    ᐃΔⲆⵠⵠⵠΔ: "img/day-skin10.png",
    ⲆⵠᐃΔⵠΔⵠ: "img/night-skin10.png",
    ᐃⲆᐃⲆⵠᐃⲆ: "img/day-skin11.png",
    ⲆⲆⲆΔⲆᐃⲆ: "img/night-skin11.png",
    ⲆⲆⵠⲆᐃᐃⵠ: "img/day-skin12.png",
    ⵠΔΔⵠΔᐃⲆ: "img/night-skin12.png",
    ΔᐃΔⲆⲆⲆᐃ: "img/day-skin13.png",
    ⵠⲆΔᐃⵠᐃⲆ: "img/night-skin13.png",
    ΔⵠⲆⵠΔⵠΔ: "img/day-skin14.png",
    ᐃⵠⵠᐃᐃᐃⲆ: "img/night-skin14.png",
    ᐃΔⵠΔΔⵠᐃ: "img/day-skin15.png",
    ⲆᐃᐃⵠⵠΔⲆ: "img/night-skin15.png",
    ΔⵠΔⵠⲆⲆᐃ: "img/day-skin16.png",
    ΔΔΔⲆᐃⲆΔ: "img/night-skin16.png",
    ⲆΔⵠᐃⲆⵠᐃ: "img/day-skin17.png",
    ΔⲆⵠᐃⵠⵠⲆ: "img/night-skin17.png",
    ⲆⲆⲆᐃⲆᐃᐃ: "img/day-skin18.png",
    ΔᐃᐃⵠΔΔⲆ: "img/night-skin18.png",
    ⲆΔⲆⵠΔΔΔ: "img/day-skin19.png",
    ⵠⵠᐃⲆᐃⵠⲆ: "img/night-skin19.png",
    ΔΔⲆᐃⲆΔᐃ: "img/day-skin20.png",
    ΔᐃΔΔⲆᐃⵠ: "img/night-skin20.png",
    ⵠᐃᐃⵠΔΔⲆ: "img/day-skin21.png",
    ⵠⲆⵠᐃΔᐃⲆ: "img/night-skin21.png",
    ᐃᐃⵠⵠⵠᐃⵠ: "img/day-skin22.png",
    ⲆᐃⵠΔⲆⲆᐃ: "img/night-skin22.png",
    ᐃⵠᐃΔⲆᐃᐃ: "img/day-skin23.png",
    ⵠⵠⲆᐃⲆᐃΔ: "img/night-skin23.png",
    ᐃΔΔⲆⲆᐃΔ: "img/day-skin24.png",
    ⲆΔΔⲆⵠΔⵠ: "img/night-skin24.png",
    ⲆΔⲆⵠΔⲆΔ: "img/day-skin25.png",
    ⵠΔΔΔⵠΔᐃ: "img/night-skin25.png",
    ⵠᐃⲆⲆⵠⲆⵠ: "img/day-skin26.png",
    ΔⵠᐃΔⵠΔᐃ: "img/night-skin26.png",
    ⵠΔⵠⵠᐃⵠΔ: "img/day-skin27.png",
    ⵠΔⵠᐃⲆⲆⲆ: "img/night-skin27.png",
    ΔΔΔⵠΔⲆᐃ: "img/day-skin28.png",
    ΔⵠΔΔⵠᐃΔ: "img/night-skin28.png",
    ΔΔⲆΔⵠⲆⵠ: "img/day-skin29.png",
    ᐃⲆΔⲆⲆⲆⲆ: "img/night-skin29.png",
    ᐃⵠⲆΔᐃⵠⲆ: "img/day-skin30.png",
    ΔⵠᐃΔΔᐃⲆ: "img/night-skin30.png",
    ⲆᐃⲆⲆΔⵠⵠ: "img/day-skin31.png",
    ΔⵠⵠⵠⲆΔⵠ: "img/night-skin31.png",
    ⵠΔⲆⵠᐃᐃΔ: "img/day-skin32.png",
    ⵠⵠⲆⵠⵠⵠΔ: "img/night-skin32.png",
    ΔᐃⲆᐃⲆⵠⲆ: "img/day-skin33.png",
    ⵠᐃⲆⵠⵠⲆⲆ: "img/night-skin33.png",
    ⵠⵠΔⲆⲆⵠᐃ: "img/day-skin34.png",
    ΔⵠᐃⵠΔᐃᐃ: "img/night-skin34.png",
    ⲆᐃΔⵠⵠᐃⵠ: "img/day-skin35.png",
    ᐃⵠⲆⵠⲆΔᐃ: "img/night-skin35.png",
    ΔΔⲆᐃΔᐃⲆ: "img/day-skin36.png",
    ΔΔᐃⵠᐃⲆᐃ: "img/night-skin36.png",
    ᐃΔΔⲆⵠⵠⲆ: "img/day-skin37.png",
    ⲆⲆΔᐃΔⲆⲆ: "img/night-skin37.png",
    ⲆΔⲆⲆⵠᐃΔ: "img/day-skin38.png",
    ᐃⵠᐃΔⲆⵠⵠ: "img/night-skin38.png",
    ᐃⵠⲆΔⵠΔⲆ: "img/day-skin39.png",
    ⲆΔΔⲆᐃⲆⵠ: "img/night-skin39.png",
    ΔⵠⵠⵠΔⲆⲆ: "img/day-skin40.png",
    ⲆⲆⵠⵠⵠⲆⲆ: "img/night-skin40.png",
    ΔⲆΔΔΔⲆᐃ: "img/day-skin41.png",
    ᐃⵠⵠᐃⲆⲆⲆ: "img/night-skin41.png",
    Δᐃᐃⵠᐃᐃᐃ: "img/day-skin42.png",
    ᐃⵠᐃⵠᐃΔΔ: "img/night-skin42.png",
    ⵠⲆΔⵠⵠⵠⲆ: "img/day-skin43.png",
    ᐃΔⲆⲆⲆᐃΔ: "img/night-skin43.png",
    ⵠᐃΔⲆⵠᐃⲆ: "img/day-skin44.png",
    ⲆⲆⵠΔⵠⲆᐃ: "img/night-skin44.png",
    ᐃΔⲆᐃⵠᐃⵠ: "img/day-skin45.png",
    ⵠⲆᐃⲆⵠⵠⲆ: "img/night-skin45.png",
    ᐃᐃⲆⲆᐃⵠᐃ: "img/day-skin46.png",
    ⲆΔΔⲆⵠΔᐃ: "img/night-skin46.png",
    ΔⲆⲆΔⵠᐃᐃ: "img/day-skin47.png",
    ⲆᐃᐃΔⵠⵠᐃ: "img/night-skin47.png",
    ⵠΔⲆᐃΔⵠΔ: "img/day-skin48.png",
    ΔΔΔᐃᐃΔⲆ: "img/night-skin48.png",
    ⲆΔⵠⲆⲆΔΔ: "img/day-skin49.png",
    ⵠⵠᐃⵠΔΔᐃ: "img/night-skin49.png",
    ⲆⵠΔᐃΔⵠⵠ: "img/day-skin50.png",
    ΔⲆⵠΔⵠⲆⵠ: "img/night-skin50.png",
    ⲆᐃⲆⲆΔΔᐃ: "img/day-skin51.png",
    ᐃⲆⵠⵠⲆⲆΔ: "img/night-skin51.png",
    ᐃⲆⲆᐃΔΔᐃ: "img/day-skin52.png",
    ΔⲆⵠⲆⲆΔⲆ: "img/night-skin52.png",
    ⵠΔΔⲆᐃⵠᐃ: "img/day-skin53.png",
    ⲆΔⵠᐃⲆΔⲆ: "img/night-skin53.png",
    ⲆⲆΔΔᐃⲆⲆ: "img/day-skin54.png",
    ⲆⵠᐃⲆⲆΔᐃ: "img/night-skin54.png",
    ᐃᐃⲆⲆᐃΔΔ: "img/day-skin55.png",
    ⵠⵠⵠΔⲆⲆⵠ: "img/night-skin55.png",
    ⵠᐃᐃΔᐃⲆⵠ: "img/day-skin56.png",
    ⲆᐃⵠΔⲆΔⵠ: "img/night-skin56.png",
    ⵠΔΔⲆΔΔⵠ: "img/day-skin57.png",
    ΔⲆᐃⵠᐃΔΔ: "img/night-skin57.png",
    ⵠᐃⲆⵠⵠⵠΔ: "img/day-skin58.png",
    ⲆⵠΔⲆⵠᐃⵠ: "img/night-skin58.png",
    ⲆΔⵠΔⲆΔᐃ: "img/day-skin59.png",
    ⵠⵠΔᐃΔⲆⲆ: "img/night-skin59.png",
    ᐃᐃⵠⵠΔᐃΔ: "img/day-skin60.png",
    ΔⵠΔΔⲆⲆΔ: "img/night-skin60.png",
    ⵠΔⲆⲆΔⲆΔ: "img/day-skin61.png",
    ⲆΔⲆⵠΔᐃᐃ: "img/night-skin61.png",
    ΔΔᐃᐃⲆⵠⵠ: "img/day-skin62.png",
    ⲆᐃⲆⲆΔΔΔ: "img/night-skin62.png",
    ΔⲆΔΔᐃᐃⵠ: "img/day-skin63.png",
    ⲆΔΔⵠⲆⵠⵠ: "img/night-skin63.png",
    ⲆⵠᐃⵠΔᐃⲆ: "img/day-skin64.png",
    ΔⲆᐃⲆᐃⲆΔ: "img/night-skin64.png",
    ⵠⵠΔᐃΔΔΔ: "img/day-skin65.png",
    ⲆⲆⲆΔᐃⲆΔ: "img/night-skin65.png",
    ⵠΔᐃᐃⵠⵠΔ: "img/day-skin66.png",
    ΔⲆⲆⲆΔⵠᐃ: "img/night-skin66.png",
    ⲆⵠⲆΔᐃⲆᐃ: "img/day-skin67.png",
    ΔⵠᐃᐃΔΔⵠ: "img/night-skin67.png",
    ᐃⵠΔⲆΔⲆⲆ: "img/day-skin68.png",
    ΔΔΔⵠⲆⵠⲆ: "img/night-skin68.png",
    ΔΔⲆⲆᐃⲆΔ: "img/day-skin69.png",
    ⲆⲆᐃΔᐃᐃΔ: "img/night-skin69.png",
    ⵠⵠᐃⲆΔⵠⵠ: "img/day-skin70.png",
    ᐃᐃΔΔᐃⲆⵠ: "img/night-skin70.png",
    ΔⲆⵠⲆⲆⲆⵠ: "img/day-skin71.png",
    ᐃᐃⵠΔΔⵠⲆ: "img/night-skin71.png",
    ⵠᐃΔⲆΔⲆΔ: "img/day-skin72.png",
    ΔⵠⵠⲆⲆⵠᐃ: "img/night-skin72.png",
    ⵠΔΔⲆⵠᐃᐃ: "img/day-skin73.png",
    ᐃⵠᐃᐃΔⲆⵠ: "img/night-skin73.png",
    ΔᐃΔⵠᐃⲆⵠ: "img/day-skin74.png",
    ᐃᐃⲆᐃΔᐃᐃ: "img/night-skin74.png",
    ⲆⵠᐃⲆΔᐃΔ: "img/day-skin75.png",
    ᐃᐃᐃⲆΔᐃⵠ: "img/night-skin75.png",
    ΔᐃΔΔⲆᐃΔ: "img/day-skin76.png",
    ΔᐃΔⲆⵠⲆΔ: "img/night-skin76.png",
    ΔᐃᐃΔᐃⵠᐃ: "img/day-skin77.png",
    ᐃⵠᐃⲆΔⵠᐃ: "img/night-skin77.png",
    ᐃⲆⵠⲆΔΔⲆ: "img/day-skin78.png",
    ΔⵠΔΔΔⵠⵠ: "img/night-skin78.png",
    ᐃⲆᐃⵠᐃⲆΔ: "img/day-skin79.png",
    ⲆᐃⲆᐃⵠⵠᐃ: "img/night-skin79.png",
    ⲆⲆⲆΔᐃΔⵠ: "img/day-skin80.png",
    ⲆⲆⲆΔΔⲆΔ: "img/night-skin80.png",
    ⵠⲆΔΔΔⵠᐃ: "img/day-skin81.png",
    ΔⲆΔᐃⵠⲆΔ: "img/night-skin81.png",
    ⵠΔᐃⲆⵠᐃⲆ: "img/day-skin82.png",
    ᐃΔᐃⵠᐃΔᐃ: "img/night-skin82.png",
    ⲆⵠⵠⲆⲆᐃⲆ: "img/day-skin83.png",
    ⵠΔΔᐃᐃᐃΔ: "img/night-skin83.png",
    ΔⵠᐃⲆⲆΔᐃ: "img/day-skin84.png",
    ⵠΔᐃᐃⲆΔΔ: "img/night-skin84.png",
    ⵠᐃⵠΔΔⲆⵠ: "img/day-skin85.png",
    ⵠⲆⲆᐃΔⵠⵠ: "img/night-skin85.png",
    ᐃᐃⵠΔⲆⵠⲆ: "img/day-skin86.png",
    ⵠᐃᐃⲆⲆᐃⵠ: "img/night-skin86.png",
    ⵠΔΔⵠᐃⲆᐃ: "img/day-skin87.png",
    ⲆⲆⲆⵠⲆⵠⲆ: "img/night-skin87.png",
    ᐃᐃᐃⵠⲆⵠᐃ: "img/day-skin88.png",
    ⲆᐃΔᐃΔᐃΔ: "img/night-skin88.png",
    ᐃⵠΔΔⲆⵠⲆ: "img/day-skin89.png",
    ⵠΔΔⵠΔΔΔ: "img/night-skin89.png",
    ᐃⵠᐃΔΔΔΔ: "img/day-skin90.png",
    ⲆⲆⲆⲆΔⲆᐃ: "img/night-skin90.png",
    ΔᐃⲆΔᐃΔΔ: "img/day-skin91.png",
    ᐃⲆᐃⵠᐃⵠⲆ: "img/night-skin91.png",
    ΔᐃⵠⲆⵠⲆⵠ: "img/day-skin92.png",
    ΔΔⵠᐃᐃᐃΔ: "img/night-skin92.png",
    ⵠᐃᐃᐃΔᐃΔ: "img/day-skin93.png",
    ⵠⲆⵠⵠⵠᐃⲆ: "img/night-skin93.png",
    ⵠⲆᐃΔⲆⲆⲆ: "img/day-skin94.png",
    ⲆΔᐃⲆⲆΔΔ: "img/night-skin94.png",
    ᐃᐃΔⵠⲆΔⵠ: "img/day-skin95.png",
    ᐃⵠⵠᐃᐃΔᐃ: "img/night-skin95.png",
    ΔΔᐃᐃᐃⲆⵠ: "img/day-skin96.png",
    ΔᐃΔΔⲆΔⵠ: "img/night-skin96.png",
    ᐃⵠΔΔΔᐃⲆ: "img/day-skin97.png",
    ΔⲆΔⲆᐃᐃΔ: "img/night-skin97.png",
    ⲆΔⵠⲆⵠᐃⲆ: "img/day-skin98.png",
    ⵠⲆⲆΔΔⲆᐃ: "img/night-skin98.png",
    ΔⵠⵠΔΔⵠΔ: "img/day-skin99.png",
    ⲆΔⵠⵠᐃΔΔ: "img/night-skin99.png",
    ⵠⵠΔⲆΔⲆΔ: "img/day-skin100.png",
    ⲆᐃⵠⲆⲆⵠⲆ: "img/night-skin100.png",
    ᐃⲆᐃⲆⲆΔΔ: "img/day-skin101.png",
    ᐃⲆⲆⵠⵠᐃⵠ: "img/night-skin101.png",
    ΔᐃⲆΔⲆΔⵠ: "img/day-skin102.png",
    ⲆⵠᐃⵠᐃΔⲆ: "img/night-skin102.png",
    ⲆΔⲆⵠⵠΔⵠ: "img/day-skin103.png",
    Ⲇᐃⵠⵠᐃᐃᐃ: "img/night-skin103.png",
    ⵠΔΔⲆΔᐃΔ: "img/day-skin104.png",
    ᐃⵠⲆⲆⵠᐃΔ: "img/night-skin104.png",
    ⲆᐃⵠᐃΔⵠⵠ: "img/day-skin105.png",
    ⵠᐃⵠᐃⲆⵠΔ: "img/night-skin105.png",
    ⵠⵠⲆⵠᐃᐃΔ: "img/day-skin106.png",
    ⲆⵠΔⲆᐃΔⲆ: "img/night-skin106.png",
    ⲆᐃⲆⵠⲆᐃⵠ: "img/day-skin107.png",
    ⵠᐃⵠΔⵠᐃᐃ: "img/night-skin107.png",
    ⵠⵠᐃⵠΔⵠΔ: "img/day-skin108.png",
    ⵠⵠΔⵠⲆⲆⲆ: "img/night-skin108.png",
    ᐃΔⲆⲆΔⵠΔ: "img/day-skin109.png",
    ⵠⵠΔⲆⲆΔΔ: "img/night-skin109.png",
    ΔΔⲆⲆⵠᐃⲆ: "img/day-skin110.png",
    ⲆᐃⲆⵠΔΔⵠ: "img/night-skin110.png",
    ᐃΔⵠⲆᐃⵠⵠ: "img/day-skin111.png",
    ⵠΔΔᐃΔⲆᐃ: "img/night-skin111.png",
    ᐃΔⵠΔⵠΔⲆ: "img/day-skin112.png",
    ᐃⲆᐃⲆΔⵠⲆ: "img/night-skin112.png",
    ᐃⵠⲆᐃⵠⵠΔⵠⲆ: "img/day-skin113.png",
    ⲆΔᐃⵠⵠⲆⲆⲆⲆ: "img/night-skin113.png",
    ⵠᐃΔⵠⲆᐃⵠ: "img/day-skin114.png",
    ⵠⵠᐃΔⵠⲆΔ: "img/night-skin114.png",
    ⵠΔⲆⵠᐃⲆᐃ: "img/day-skin115.png",
    ⵠᐃᐃⵠΔΔⵠ: "img/night-skin115.png",
    ᐃᐃΔΔΔⵠΔ: "img/day-skin116.png",
    ᐃⵠᐃΔⲆⵠᐃ: "img/night-skin116.png",
    ⵠⵠΔΔᐃⵠⵠ: "img/day-skin117.png",
    ΔⲆⲆΔⵠⵠᐃ: "img/night-skin117.png",
    ⵠΔⵠΔⲆᐃᐃ: "img/day-skin118.png",
    ᐃΔⵠᐃΔⲆⲆ: "img/night-skin118.png",
    ᐃⲆⵠⵠⲆΔΔ: "img/day-skin119.png",
    ΔⲆⲆⵠᐃΔᐃ: "img/night-skin119.png",
    ᐃᐃⲆᐃᐃⲆⲆ: "img/day-skin120.png",
    ⲆᐃΔⵠΔⵠⵠ: "img/night-skin120.png",
    ΔⲆᐃΔⲆⵠⵠ: "img/day-skin121.png",
    ⲆΔⲆⲆⲆⵠⵠ: "img/night-skin121.png",
    ᐃᐃⲆΔᐃᐃᐃ: "img/day-skin122.png",
    ⲆⵠΔⲆⵠᐃⲆ: "img/night-skin122.png",
    ΔᐃⵠΔⵠⵠⲆ: "img/day-skin123.png",
    ᐃΔΔⵠⲆΔⵠ: "img/night-skin123.png",
    ΔⵠⲆΔᐃΔⵠ: "img/day-skin124.png",
    ᐃⲆⲆⵠΔΔᐃ: "img/night-skin124.png",
    ΔᐃⵠⵠⲆⵠᐃ: "img/day-skin125.png",
    ⵠᐃΔΔΔⲆΔ: "img/night-skin125.png",
    ᐃⲆⲆⲆⲆΔᐃ: "img/day-skin126.png",
    ΔᐃΔⲆᐃⲆΔ: "img/night-skin126.png",
    ⵠⵠΔᐃᐃⲆᐃ: "img/day-skin127.png",
    ⵠΔΔⲆᐃⲆⲆ: "img/night-skin127.png",
    ΔΔⲆᐃⵠᐃⵠ: "img/day-skin128.png",
    ⵠⲆΔⵠⵠᐃᐃ: "img/night-skin128.png",
    ⵠⵠⵠΔΔᐃⵠ: "img/day-skin129.png",
    ⲆⲆΔΔΔⵠⵠ: "img/night-skin129.png",
    ⲆⵠᐃⵠⵠⲆΔ: "img/day-skin130-1.png",
    ⵠΔⵠⵠᐃⲆᐃ: "img/night-skin130-1.png",
    ⵠΔⲆᐃⵠⵠᐃ: "img/day-skin131.png",
    ᐃΔⲆΔΔᐃΔ: "img/night-skin131.png",
    ⵠᐃᐃᐃᐃⲆΔ: "img/day-skin132.png",
    ⲆⲆᐃⵠⵠⵠⵠ: "img/night-skin132.png",
    ΔⲆΔΔᐃⲆⵠ: "img/day-skin133.png",
    ΔΔᐃΔΔⵠΔ: "img/night-skin133.png",
    ᐃᐃⵠΔᐃΔᐃ: "img/day-skin134.png",
    ⲆⲆΔⵠᐃΔⲆ: "img/night-skin134.png",
    ⲆⵠⵠᐃⲆᐃⵠ: "img/day-skin135.png",
    ᐃᐃⲆⵠⵠᐃΔ: "img/night-skin135.png",
    ΔⵠⵠΔⵠᐃⵠ: "img/day-skin136.png",
    ΔⵠⵠΔⲆᐃᐃ: "img/night-skin136.png",
    ⲆⵠᐃⲆⲆⲆᐃ: "img/day-skin137.png",
    ⵠⲆⵠⲆⵠⲆⲆ: "img/night-skin137.png",
    ⲆⵠΔΔᐃⵠΔ: "img/day-skin138.png",
    ⲆⲆⲆᐃΔΔⵠ: "img/night-skin138.png",
    ⲆⲆⲆΔⵠᐃΔ: "img/day-skin139.png",
    ᐃⲆⵠⵠⵠᐃΔ: "img/night-skin139.png",
    ᐃⵠΔΔΔⲆⵠ: "img/day-skin140.png",
    ⵠⲆⵠⲆⲆⲆⵠ: "img/night-skin140.png",
    ΔΔⵠᐃⲆⵠΔ: "img/day-skin141.png",
    ⲆⵠⵠⵠⵠⵠΔ: "img/night-skin141.png",
    ⵠⲆⵠΔΔⵠΔ: "img/day-skin142.png",
    ⵠᐃΔⵠⲆΔΔ: "img/night-skin142.png",
    ⵠⵠⵠΔⵠⲆᐃ: "img/day-skin143.png",
    ⲆⲆⲆⲆΔᐃⵠ: "img/night-skin143.png",
    ⲆᐃΔⵠΔᐃΔ: "img/day-skin144.png",
    ᐃⵠⲆⲆⲆⵠⵠ: "img/night-skin144.png",
    ⲆⲆⵠⲆⵠⵠΔ: "img/day-skin145.png",
    ᐃΔᐃᐃⲆⲆⵠ: "img/night-skin145.png",
    ΔⵠⲆⲆⵠᐃΔ: "img/day-skin146.png",
    ᐃⲆⲆΔⲆΔⵠ: "img/night-skin146.png",
    ᐃΔΔΔⵠΔᐃ: "img/day-skin147.png",
    ⵠᐃΔⵠⲆᐃⲆ: "img/night-skin147.png",
    ΔⵠⲆᐃᐃⵠⲆ: "img/day-skin148.png",
    ΔⲆᐃⲆΔⵠᐃ: "img/night-skin148.png",
    ΔⲆΔⵠⲆΔⲆ: "img/day-skin149.png",
    ᐃΔⵠᐃⵠΔⵠ: "img/night-skin149.png",
    ⵠᐃᐃᐃⵠⵠΔ: "img/day-skin150.png",
    Δᐃᐃⵠᐃⵠᐃ: "img/night-skin150.png",
    ⲆᐃⵠⵠⲆΔⲆ: "img/day-skin151.png",
    ΔΔⲆⲆΔⲆΔ: "img/night-skin151.png",
    ⵠΔⵠᐃⲆⵠᐃ: "img/day-skin152.png",
    ⵠⵠⵠⲆⵠⵠΔ: "img/night-skin152.png",
    ⲆᐃΔⵠᐃⲆⵠ: "img/day-skin153.png",
    ⵠΔⵠᐃⵠⲆⵠ: "img/night-skin153.png",
    ᐃⲆⲆᐃᐃΔⵠ: "img/day-skin154.png",
    ᐃⵠᐃⲆΔⲆᐃ: "img/night-skin154.png",
    ᐃⲆⲆᐃΔᐃΔ: "img/day-skin155.png",
    ΔⲆΔⵠⲆⲆΔ: "img/night-skin155.png",
    ⵠⲆⲆᐃⲆᐃⵠ: "img/day-skin156.png",
    ⲆᐃⲆⵠⲆΔⵠ: "img/night-skin156.png",
    ⵠⵠΔᐃⲆⲆᐃ: "img/day-skin157.png",
    ⲆᐃⵠⵠᐃⲆΔ: "img/night-skin157.png",
    ⲆⵠⵠⲆⵠⵠᐃ: "img/day-skin158.png",
    ᐃⵠΔⵠⲆⲆⲆ: "img/night-skin158.png",
    ᐃⲆⲆⲆΔᐃᐃ: "img/day-skin159.png",
    ⲆⲆᐃΔΔⵠⲆ: "img/night-skin159.png",
    ⲆⵠⵠᐃⵠⲆⵠ: "img/day-skin160.png",
    ⲆⵠΔⵠΔⵠⲆ: "img/night-skin160.png",
    ⲆⵠᐃⲆᐃⵠᐃ: "img/day-skin161.png",
    ⲆⵠⲆᐃⲆⲆⲆ: "img/night-skin161.png",
    ⵠⵠᐃⵠⲆΔΔ: "img/day-skin162.png",
    ⵠΔΔⵠⲆⲆⲆ: "img/night-skin162.png",
    ⵠⲆⲆᐃᐃⲆΔ: "img/day-skin163.png",
    ΔⵠⲆⲆᐃΔⲆ: "img/night-skin163.png",
    ⲆΔᐃⵠⵠⵠⵠ: "img/day-skin164.png",
    ⵠᐃᐃⵠⲆⲆΔ: "img/night-skin164.png",
    ⵠᐃⲆΔⵠᐃⲆ: "img/day-skin165.png",
    ⵠⵠΔΔΔᐃⵠ: "img/night-skin165.png",
    ⲆⵠⵠᐃᐃᐃΔ: "img/day-skin166.png",
    ᐃΔᐃⵠΔᐃⲆ: "img/night-skin166.png",
    ΔⲆΔΔⲆⲆⲆ: "img/day-skin167.png",
    ᐃΔᐃⲆⵠᐃⵠ: "img/night-skin167.png",
    ⵠᐃⲆΔᐃᐃⲆ: "img/day-skin168.png",
    ⵠΔᐃᐃⲆⲆᐃ: "img/night-skin168.png",
    ⵠⲆⲆⵠΔΔⵠ: "img/day-skin169.png",
    ᐃΔΔΔⵠΔΔ: "img/night-skin169.png",
    ᐃᐃΔⲆᐃᐃᐃ: "img/day-skin170.png",
    ΔⵠⲆⲆⲆΔᐃ: "img/night-skin170.png",
    ᐃⲆⲆᐃΔΔⵠ: "img/day-skin171.png",
    Ⲇᐃⵠⵠⵠⵠⵠ: "img/night-skin171.png",
    ᐃΔᐃᐃⲆⵠⲆ: "img/day-skin172.png",
    ⲆΔᐃⲆⲆⲆⲆ: "img/night-skin172.png",
    ⲆⵠⲆⲆΔᐃΔ: "img/day-skin173.png",
    ⵠⲆΔⲆΔⵠᐃ: "img/night-skin173.png",
    ⲆΔⵠΔΔΔⵠ: "img/day-skin174.png",
    ᐃⲆΔΔΔᐃⲆ: "img/night-skin174.png",
    ΔⵠⲆⲆⲆᐃⲆ: "img/day-skin175.png",
    ⵠᐃᐃΔⲆΔΔ: "img/night-skin175.png",
    ᐃᐃⲆⲆⵠΔΔ: "img/day-skin176.png",
    ⵠΔⲆᐃᐃΔⵠ: "img/night-skin176.png",
    ⵠᐃⲆΔⲆⵠΔ: "img/day-skin177.png",
    ⲆⵠᐃⲆⲆΔⵠ: "img/night-skin177.png",
    ᐃΔⵠⲆΔⲆᐃ: "img/day-skin178.png",
    ᐃⵠⵠⵠⵠⵠⲆ: "img/night-skin178.png",
    ⵠⵠΔᐃⵠⲆⵠ: "img/day-skin179.png",
    ⵠⲆΔⲆⲆⲆⵠ: "img/night-skin179.png",
    ΔⲆᐃⵠⲆⲆΔ: "img/day-skin180.png",
    ΔⲆΔⵠΔᐃᐃ: "img/night-skin180.png",
    ΔⲆᐃΔᐃΔΔ: "img/day-skin181.png",
    ᐃΔⲆᐃⲆᐃᐃ: "img/night-skin181.png",
    ᐃⵠᐃⵠᐃⵠΔ: "img/day-skin182.png",
    ⲆⲆⲆⲆᐃⲆᐃ: "img/night-skin182.png",
    ΔⵠⲆΔΔΔΔ: "img/day-skin183.png",
    ᐃⵠΔⲆΔᐃⵠ: "img/night-skin183.png",
    ΔⲆⵠΔⵠᐃⵠ: "img/day-skin184.png",
    ΔᐃⵠΔᐃᐃⵠ: "img/night-skin184.png",
    ΔⵠᐃΔⲆᐃⵠ: "img/day-skin185.png",
    ᐃⲆΔⵠⵠΔⵠ: "img/night-skin185.png",
    ⲆᐃⲆᐃⲆⵠᐃ: "img/day-skin186.png",
    ΔⲆⲆᐃⵠⵠᐃ: "img/night-skin186.png",
    ⵠΔⲆⵠⲆⲆⵠ: "img/day-skin187.png",
    ⵠᐃᐃⲆᐃΔᐃ: "img/night-skin187.png",
    ⲆⵠⵠᐃΔΔᐃ: "img/day-skin188.png",
    ⵠⲆⵠⵠⵠⵠᐃ: "img/night-skin188.png",
    ᐃⵠⲆⵠᐃⵠⲆ: "img/day-skin189.png",
    ⵠⵠⲆⵠⵠᐃⵠ: "img/night-skin189.png",
    ⲆⲆⵠⵠⵠⲆⵠ: "img/day-skin190.png",
    ΔᐃⵠⵠᐃᐃⲆ: "img/night-skin190.png",
    ᐃᐃΔΔΔⲆⲆ: "img/day-skin191.png",
    ᐃΔⵠΔⵠⲆⵠ: "img/night-skin191.png",
    ⲆⲆᐃᐃⵠⲆᐃ: "img/day-skin192.png",
    ⲆᐃⲆΔⵠⲆΔ: "img/night-skin192.png",
    ⲆᐃⲆⵠΔⲆᐃ: "img/day-skin193.png",
    ΔΔΔΔⵠⵠⵠ: "img/night-skin193.png",
    ⲆⵠⵠᐃⲆⵠⵠ: "img/day-skin194.png",
    ΔΔΔⵠⲆⲆΔ: "img/night-skin194.png",
    ⵠΔΔΔⲆᐃⵠ: "img/day-skin195.png",
    ⲆⵠⲆΔⲆΔᐃ: "img/night-skin195.png",
    ᐃⵠⲆⲆⵠᐃⵠ: "img/day-skin196.png",
    ᐃⵠⵠⵠᐃⲆᐃ: "img/night-skin196.png",
    ᐃΔⵠᐃⵠᐃⲆ: "img/day-skin197.png",
    ⵠⵠⲆⵠⲆΔΔ: "img/night-skin197.png",
    ⲆⲆⲆᐃⵠΔΔ: "img/day-skin198.png",
    ΔⲆᐃΔⵠΔⲆ: "img/night-skin198.png",
    ΔⲆⵠⲆᐃΔⵠ: "img/day-skin199.png",
    ΔⲆᐃᐃᐃᐃΔ: "img/night-skin199.png",
    ΔⵠᐃᐃⲆⲆΔ: "img/day-skin200.png",
    ⵠΔⲆᐃⵠᐃⲆ: "img/night-skin200.png",
    ⲆⵠΔⲆⲆⵠᐃ: "img/day-skin201.png",
    ⵠⵠⲆΔⵠⲆᐃ: "img/night-skin201.png",
    ⲆᐃⵠΔᐃⵠⲆ: "img/day-skin202.png",
    ⲆⲆⵠᐃᐃΔΔ: "img/night-skin202.png",
    ᐃΔⵠⲆⵠⲆⵠ: "img/day-skin203.png",
    ΔᐃⲆⵠΔΔⵠ: "img/night-skin203.png",
    ΔᐃᐃⵠΔⵠΔ: "img/day-skin204.png",
    ⲆᐃᐃΔⵠΔⵠ: "img/night-skin204.png",
    ⲆᐃⲆΔΔⵠᐃ: "img/day-skin205.png",
    ΔⵠⲆᐃᐃᐃΔ: "img/night-skin205.png",
    ⲆᐃΔΔᐃᐃⲆ: "img/day-skin206.png",
    ⲆᐃⲆΔⵠⵠⵠ: "img/night-skin206.png",
    ⲆⲆΔⵠⲆⵠΔ: "img/day-skin207.png",
    ᐃᐃⵠᐃΔⲆⵠ: "img/night-skin207.png",
    ⲆⵠⲆᐃΔⲆⵠ: "img/day-skin208.png",
    ⵠⵠⲆΔⵠᐃⲆ: "img/night-skin208.png",
    ΔᐃᐃΔᐃⲆⲆ: "img/day-skin209.png",
    ΔΔΔΔⲆⵠΔ: "img/night-skin209.png",
    ᐃΔⲆⲆⲆⵠᐃ: "img/day-skin210.png",
    ΔᐃΔⲆⲆⵠⲆ: "img/night-skin210.png",
    ΔⲆᐃΔⲆⲆᐃ: "img/day-skin211.png",
    ΔᐃⲆΔⵠⵠΔ: "img/night-skin211.png",
    ΔⵠΔⲆⵠᐃⲆ: "img/day-skin212.png",
    ⵠⵠᐃⵠⵠⲆⲆ: "img/night-skin212.png",
    ΔΔⵠΔΔⵠⵠ: "img/day-skin213.png",
    ᐃᐃⵠⵠᐃⵠΔ: "img/night-skin213.png",
    ΔⵠΔᐃᐃⲆⲆ: "img/day-skin214.png",
    ⲆⲆⲆᐃⲆⵠᐃ: "img/night-skin214.png",
    ⲆᐃᐃⵠΔⵠⵠ: "img/day-hand-skin0.png",
    ΔⲆΔⲆᐃⲆⵠ: "img/night-hand-skin0.png",
    ΔΔⵠⲆⵠⵠΔ: "img/day-hand-skin1.png",
    ᐃᐃⲆᐃΔⵠΔ: "img/night-hand-skin1.png",
    ⲆᐃⵠⵠⵠᐃΔ: "img/day-hand-skin2.png",
    ΔⵠᐃᐃΔⵠᐃ: "img/night-hand-skin2.png",
    ⲆⵠᐃΔΔⵠⲆ: "img/day-hand-skin3.png",
    ᐃᐃⵠⵠΔⲆⲆ: "img/night-hand-skin3.png",
    ⲆⲆΔⲆΔᐃⲆ: "img/day-hand-skin4.png",
    ⵠⲆⵠᐃΔⲆⵠ: "img/night-hand-skin4.png",
    ⵠⲆΔᐃᐃΔΔ: "img/day-hand-skin5.png",
    ΔᐃⲆⲆⵠⵠⵠ: "img/night-hand-skin5.png",
    ⵠⵠⵠΔⵠⲆΔ: "img/day-hand-skin6.png",
    ⵠⵠΔⲆⲆᐃⵠⲆᐃ: "img/night-hand-skin6.png",
    ⲆΔΔⲆⲆⲆⲆ: "img/day-hand-skin6.png",
    Δⵠⵠᐃⵠⵠⵠ: "img/night-hand-skin6.png",
    ΔⲆⲆⵠᐃⵠⵠ: "img/day-hand-skin8.png",
    ⵠⲆⵠᐃⲆⵠⲆ: "img/night-hand-skin8.png",
    ᐃᐃΔΔΔᐃᐃ: "img/day-hand-skin9.png",
    ⵠⲆΔⵠⲆⵠⲆ: "img/night-hand-skin9.png",
    ΔΔᐃⲆᐃΔΔ: "img/day-hand-skin10.png",
    ᐃᐃⵠΔⵠⲆᐃ: "img/night-hand-skin10.png",
    Ⲇᐃⵠⵠⵠⵠᐃ: "img/day-hand-skin11.png",
    ΔⲆⲆᐃⵠᐃⲆ: "img/night-hand-skin11.png",
    ᐃΔⵠᐃΔᐃΔ: "img/day-hand-skin12.png",
    ΔⵠΔᐃⵠΔᐃ: "img/night-hand-skin12.png",
    ΔⲆΔΔⵠᐃΔ: "img/day-hand-skin13.png",
    ⵠΔⲆⵠⲆⲆⲆ: "img/night-hand-skin13.png",
    ⲆⵠⲆⲆⲆΔⲆ: "img/day-hand-skin14.png",
    ΔⲆⲆⲆᐃᐃⲆ: "img/night-hand-skin14.png",
    ⲆΔⵠΔⲆⲆᐃ: "img/day-hand-skin15.png",
    ⲆⵠⲆⵠᐃᐃᐃ: "img/night-hand-skin15.png",
    ᐃᐃⲆⵠᐃⵠᐃ: "img/day-hand-skin16.png",
    ᐃᐃΔⲆⵠΔᐃ: "img/night-hand-skin16.png",
    ΔⵠⲆⲆᐃⵠᐃ: "img/day-hand-skin17.png",
    ΔΔΔΔᐃⲆᐃ: "img/night-hand-skin17.png",
    ᐃⵠΔⵠᐃᐃΔ: "img/day-hand-skin18.png",
    ⲆⲆᐃⲆΔⵠⵠ: "img/night-hand-skin18.png",
    ⲆΔΔᐃᐃᐃᐃ: "img/day-hand-skin19.png",
    Ⲇⵠⵠᐃᐃᐃᐃ: "img/night-hand-skin19.png",
    ᐃΔⲆⵠⵠᐃᐃ: "img/day-hand-skin20.png",
    ⵠⵠᐃΔⵠΔⲆ: "img/night-hand-skin20.png",
    ᐃⲆⲆⲆⵠⵠⲆ: "img/day-hand-skin21.png",
    ΔⲆⵠΔΔᐃᐃ: "img/night-hand-skin21.png",
    ⵠⲆⲆΔᐃᐃⲆ: "img/day-hand-skin22.png",
    ᐃΔⲆⵠᐃⲆⲆ: "img/night-hand-skin22.png",
    ⲆΔⲆΔΔⲆΔ: "img/day-hand-skin23.png",
    ⵠⲆᐃⲆⵠΔΔ: "img/night-hand-skin23.png",
    ⵠᐃⲆΔᐃⲆᐃ: "img/day-hand-skin24.png",
    ΔᐃⵠΔᐃⲆᐃ: "img/night-hand-skin24.png",
    ᐃΔⵠΔΔⵠⲆ: "img/day-hand-skin25.png",
    ⵠⲆⲆΔⵠΔⲆ: "img/night-hand-skin25.png",
    ΔΔᐃⵠᐃΔⲆ: "img/day-hand-skin26.png",
    ⲆⵠⵠⵠⵠΔΔ: "img/night-hand-skin26.png",
    ᐃⲆᐃⵠⵠⵠΔ: "img/day-hand-skin27.png",
    ⲆⲆᐃᐃᐃΔⵠ: "img/night-hand-skin27.png",
    ⲆΔᐃⲆᐃⲆΔ: "img/day-hand-skin28.png",
    ⲆⲆⲆᐃᐃΔᐃ: "img/night-hand-skin28.png",
    ΔⲆΔⵠⲆᐃᐃ: "img/day-hand-skin29.png",
    ⵠᐃΔⵠⲆⵠΔ: "img/night-hand-skin29.png",
    ᐃΔΔⵠⲆᐃᐃ: "img/day-hand-skin30.png",
    ᐃᐃΔⲆⲆΔΔ: "img/night-hand-skin30.png",
    ⲆⲆΔⵠΔⲆⲆ: "img/day-hand-skin31.png",
    ᐃᐃⵠᐃⲆⲆΔ: "img/night-hand-skin31.png",
    ⵠΔⵠᐃⲆⲆΔ: "img/day-hand-skin32.png",
    ΔᐃⵠΔΔᐃⵠ: "img/night-hand-skin32.png",
    ᐃⵠΔᐃⵠᐃⵠ: "img/day-hand-skin33.png",
    ⵠⲆⵠⵠⲆⲆᐃ: "img/night-hand-skin33.png",
    ⵠᐃⲆΔⵠⲆⲆ: "img/day-hand-skin34.png",
    ᐃᐃⵠⲆⵠΔᐃ: "img/night-hand-skin34.png",
    ⵠᐃⵠΔᐃᐃⲆ: "img/day-hand-skin35.png",
    ⲆⲆᐃᐃΔΔⲆ: "img/night-hand-skin35.png",
    ⲆᐃⵠᐃⲆⵠᐃ: "img/day-hand-skin36.png",
    ᐃΔΔᐃΔᐃΔ: "img/night-hand-skin36.png",
    ⲆΔⲆΔⲆᐃⲆ: "img/day-hand-skin37.png",
    ⲆΔⲆⲆⲆᐃⲆ: "img/night-hand-skin37.png",
    ⲆⲆⲆⲆⵠⵠΔ: "img/day-hand-skin38.png",
    ⲆΔⲆⲆⲆΔΔ: "img/night-hand-skin38.png",
    ᐃⲆⲆΔⲆΔⲆ: "img/day-hand-skin39.png",
    ᐃⲆΔΔΔⵠⲆ: "img/night-hand-skin39.png",
    ᐃᐃᐃⲆΔΔᐃ: "img/day-hand-skin40.png",
    ΔⵠⵠⲆᐃΔⵠ: "img/night-hand-skin40.png",
    ΔⲆⲆⲆⵠⵠⲆ: "img/day-hand-skin41.png",
    ᐃᐃᐃⵠⲆΔⵠ: "img/night-hand-skin41.png",
    ⲆⲆⲆⵠᐃⵠⲆ: "img/day-hand-skin42.png",
    ⲆⲆⵠΔⲆΔᐃ: "img/night-hand-skin42.png",
    ᐃᐃΔᐃⲆᐃᐃ: "img/day-hand-skin43.png",
    ᐃᐃⲆΔΔΔΔ: "img/night-hand-skin43.png",
    ΔⲆΔⵠⲆⲆᐃ: "img/day-hand-skin16.png",
    ᐃᐃΔΔΔⲆⵠ: "img/night-hand-skin16.png",
    ⲆᐃᐃⵠΔⲆⵠ: "img/day-hand-skin45.png",
    ⲆΔΔΔᐃⵠᐃ: "img/night-hand-skin45.png",
    ⵠᐃᐃᐃⲆⲆⵠ: "img/day-hand-skin46.png",
    ⵠᐃⲆⲆⵠⵠᐃ: "img/night-hand-skin46.png",
    ᐃᐃΔⲆⵠᐃΔ: "img/day-hand-skin47.png",
    ΔΔᐃᐃⲆΔⲆ: "img/night-hand-skin47.png",
    ⵠⵠᐃΔⲆΔⲆ: "img/day-hand-skin48.png",
    ᐃⲆⲆΔΔⵠᐃ: "img/night-hand-skin48.png",
    ΔΔᐃΔΔᐃΔ: "img/day-hand-skin49.png",
    ⵠⵠᐃᐃⵠⲆΔ: "img/night-hand-skin49.png",
    ⵠᐃⵠᐃΔⲆⵠ: "img/day-hand-skin49.png",
    ᐃᐃᐃΔΔⲆⵠ: "img/night-hand-skin49.png",
    ΔᐃᐃΔΔⵠⵠ: "img/day-hand-skin51.png",
    ΔⵠΔᐃⲆΔΔ: "img/night-hand-skin51.png",
    ΔⵠⲆΔⵠⵠⵠ: "img/day-hand-skin52.png",
    ⵠⵠⲆⲆΔᐃⲆ: "img/night-hand-skin52.png",
    ΔᐃⵠⲆⵠⲆΔ: "img/day-hand-skin53.png",
    ᐃΔⲆΔⵠΔⲆ: "img/night-hand-skin53.png",
    ᐃᐃⲆΔᐃᐃⲆ: "img/day-hand-skin53.png",
    ΔⵠⲆⲆᐃᐃᐃ: "img/night-hand-skin53.png",
    ᐃΔⲆⵠᐃⵠⵠ: "img/day-hand-skin55.png",
    ᐃᐃⵠΔᐃⲆΔ: "img/night-hand-skin55.png",
    ᐃΔΔⵠⵠᐃᐃ: "img/day-hand-skin56.png",
    ᐃⵠΔⲆᐃᐃⵠ: "img/night-hand-skin56.png",
    ΔᐃⲆᐃΔⵠⵠ: "img/day-hand-skin57.png",
    ⲆⲆΔᐃⲆⲆΔ: "img/night-hand-skin57.png",
    ⲆⵠⲆΔⵠⲆᐃ: "img/day-hand-skin58.png",
    ᐃⲆΔΔⲆⲆⵠ: "img/night-hand-skin58.png",
    ᐃⲆⵠⵠⲆᐃᐃ: "img/day-hand-skin59.png",
    ΔⲆⲆⵠᐃⲆⵠ: "img/night-hand-skin59.png",
    ᐃΔᐃᐃⵠᐃΔ: "img/day-hand-skin61.png",
    ΔⵠⲆΔⵠⲆΔ: "img/night-hand-skin61.png",
    ᐃᐃⵠⲆⲆⲆΔ: "img/day-hand-skin61.png",
    ⲆⵠⵠⲆᐃᐃᐃ: "img/night-hand-skin61.png",
    ᐃⲆⵠⲆΔⲆᐃ: "img/day-hand-skin62.png",
    ⵠⵠⵠⲆᐃⵠΔ: "img/night-hand-skin62.png",
    ⲆⲆⵠⲆᐃⵠΔ: "img/day-hand-skin63.png",
    ⲆⵠΔⵠΔⲆⲆ: "img/night-hand-skin63.png",
    ΔⲆⲆᐃⲆⵠⲆ: "img/day-hand-skin64.png",
    ᐃᐃᐃᐃΔᐃⵠ: "img/night-hand-skin64.png",
    ΔᐃⲆᐃⵠⵠᐃ: "img/day-hand-skin65.png",
    ΔᐃⲆⵠΔᐃᐃ: "img/night-hand-skin65.png",
    ⵠᐃΔᐃⵠᐃᐃ: "img/day-hand-skin66.png",
    ΔΔⵠⲆⵠᐃΔ: "img/night-hand-skin66.png",
    ⵠᐃⵠᐃΔᐃΔ: "img/day-hand-skin67.png",
    ⲆⲆⵠΔⲆΔⲆ: "img/night-hand-skin67.png",
    ⲆⲆΔⵠⲆⲆⲆ: "img/day-hand-skin68.png",
    ⵠΔΔⲆⵠⵠⵠ: "img/night-hand-skin68.png",
    ᐃⲆⵠᐃΔΔⵠ: "img/day-hand-skin69.png",
    ΔΔⲆⲆᐃΔⵠ: "img/night-hand-skin69.png",
    ⲆⵠⲆᐃⲆᐃⲆ: "img/day-hand-skin70.png",
    ΔΔᐃⵠⵠΔΔ: "img/night-hand-skin70.png",
    ⵠᐃⲆⲆⵠⵠΔ: "img/day-hand-skin71.png",
    ⵠΔᐃᐃΔᐃⵠ: "img/night-hand-skin71.png",
    ΔΔΔⲆᐃΔΔ: "img/day-hand-skin72.png",
    ᐃΔΔΔⵠᐃᐃ: "img/night-hand-skin72.png",
    ΔΔΔΔᐃΔΔ: "img/day-hand-skin73.png",
    ᐃᐃⲆΔΔⲆⵠ: "img/night-hand-skin73.png",
    ⲆⵠⲆⲆᐃᐃⲆ: "img/day-hand-skin74.png",
    ᐃⵠⲆⲆᐃⲆΔ: "img/night-hand-skin74.png",
    ᐃΔᐃⵠΔᐃⵠ: "img/day-hand-skin75.png",
    ⵠⲆᐃⵠⲆΔⵠ: "img/night-hand-skin75.png",
    ᐃⲆⲆΔΔⵠⲆ: "img/day-hand-skin76.png",
    ᐃⵠⵠⲆⵠΔᐃ: "img/night-hand-skin76.png",
    ⲆⵠᐃᐃΔⲆᐃ: "img/day-hand-skin77.png",
    ⵠᐃᐃⵠᐃⲆΔ: "img/night-hand-skin77.png",
    ⲆᐃⵠᐃⵠⲆᐃ: "img/day-hand-skin78.png",
    ᐃΔⵠΔⲆᐃⲆ: "img/night-hand-skin78.png",
    ⲆᐃᐃⲆΔⵠⵠ: "img/day-hand-skin79.png",
    ᐃΔᐃᐃᐃᐃⲆ: "img/night-hand-skin79.png",
    ᐃᐃᐃᐃᐃᐃⵠ: "img/day-hand-skin80.png",
    ⵠᐃⵠᐃΔΔᐃ: "img/night-hand-skin80.png",
    ΔΔⵠΔΔΔᐃ: "img/day-hand-skin81.png",
    ΔΔⵠΔᐃⲆⲆ: "img/night-hand-skin81.png",
    ⲆⵠΔΔΔΔⲆ: "img/day-hand-skin82.png",
    ⵠᐃᐃΔⲆⵠᐃ: "img/night-hand-skin82.png",
    ⵠⵠⲆⵠⲆⲆᐃ: "img/day-hand-skin83.png",
    ΔΔⲆⲆΔᐃᐃ: "img/night-hand-skin83.png",
    ᐃⲆⲆΔⲆⵠᐃ: "img/day-hand-skin84.png",
    ᐃⲆᐃⲆⵠⲆΔ: "img/night-hand-skin84.png",
    ⵠⲆΔⲆⲆⲆᐃ: "img/day-hand-skin85.png",
    ⵠⲆⵠⵠᐃⵠⲆ: "img/night-hand-skin85.png",
    ⲆΔⵠⵠⵠΔⵠ: "img/day-hand-skin86.png",
    ⵠⵠⲆⵠΔᐃΔ: "img/night-hand-skin86.png",
    ΔᐃᐃᐃⵠΔⲆ: "img/day-hand-skin87.png",
    ⲆᐃⲆΔΔᐃⲆ: "img/night-hand-skin87.png",
    ΔΔΔⲆⲆⵠⲆ: "img/day-hand-skin88.png",
    ⲆΔⵠⲆΔΔΔ: "img/night-hand-skin88.png",
    ⵠⲆᐃⲆⲆⲆⵠ: "img/day-hand-skin89.png",
    ⲆⲆᐃⵠΔⲆᐃ: "img/night-hand-skin89.png",
    ⵠΔΔⵠⵠⵠΔ: "img/day-hand-skin90.png",
    ᐃᐃⵠⲆⲆⲆⲆ: "img/night-hand-skin90.png",
    ⲆⲆⵠᐃᐃΔⲆ: "img/day-hand-skin91.png",
    ⲆᐃⵠΔⵠⵠᐃ: "img/night-hand-skin91.png",
    ΔΔᐃⲆΔⵠᐃ: "img/day-hand-skin92.png",
    ᐃⵠⲆⵠΔΔⵠ: "img/night-hand-skin92.png",
    ᐃⲆⵠⵠⵠⲆᐃ: "img/day-hand-skin93.png",
    ᐃᐃᐃᐃⲆⲆⵠ: "img/night-hand-skin93.png",
    ⵠΔΔᐃΔⵠⵠ: "img/day-hand-skin94.png",
    ᐃᐃⲆΔⵠⲆⵠ: "img/night-hand-skin94.png",
    ⲆⲆⵠⲆΔᐃⵠ: "img/day-hand-skin95.png",
    ⵠⲆᐃⵠΔⵠⵠ: "img/night-hand-skin95.png",
    ⲆᐃⲆᐃⲆᐃᐃ: "img/day-hand-skin96.png",
    ᐃΔᐃⵠΔΔⵠ: "img/night-hand-skin96.png",
    ΔΔⵠⵠⵠᐃΔ: "img/day-hand-skin97.png",
    ⲆⵠΔΔⵠⲆⲆ: "img/night-hand-skin97.png",
    ⲆⲆⵠΔΔⵠΔ: "img/day-hand-skin98.png",
    ⲆⵠⵠΔⲆΔΔ: "img/night-hand-skin98.png",
    ⵠⲆΔᐃⵠⲆⵠ: "img/day-hand-skin99.png",
    ⲆⲆᐃⵠᐃⵠⵠ: "img/night-hand-skin99.png",
    ᐃᐃⵠⵠⲆⲆᐃ: "img/day-hand-skin100.png",
    ΔᐃⵠΔᐃⵠⲆ: "img/night-hand-skin100.png",
    Δⵠⵠⵠⵠⵠᐃ: "img/day-hand-skin101.png",
    ΔΔΔⲆⲆᐃⲆ: "img/night-hand-skin101.png",
    ⲆΔⵠⲆᐃΔᐃ: "img/day-hand-skin102.png",
    ΔⵠⵠⵠΔΔⲆ: "img/night-hand-skin102.png",
    ΔᐃΔΔⲆⵠⲆ: "img/day-hand-skin103.png",
    ⵠⲆᐃⵠᐃⵠᐃ: "img/night-hand-skin103.png",
    ΔⵠⲆⵠⵠⵠᐃ: "img/day-hand-skin104.png",
    ᐃⵠⲆᐃⵠᐃⵠ: "img/night-hand-skin104.png",
    ᐃᐃⲆⵠⲆⲆⲆ: "img/day-hand-skin105.png",
    ᐃⵠᐃⵠⲆᐃⵠ: "img/night-hand-skin105.png",
    ΔΔΔⲆⵠΔΔ: "img/day-hand-skin106.png",
    ⲆᐃⵠΔⲆᐃᐃ: "img/night-hand-skin106.png",
    ΔⲆⲆᐃⲆᐃᐃ: "img/day-hand-skin107.png",
    ⵠᐃᐃⵠΔⲆⲆ: "img/night-hand-skin107.png",
    ⲆΔⵠⲆΔⲆΔ: "img/day-hand-skin108.png",
    ⵠⲆⵠᐃⵠᐃⵠ: "img/night-hand-skin108.png",
    ᐃΔⲆⵠⵠⵠⵠ: "img/day-hand-skin109.png",
    ΔⲆᐃⲆⵠΔⵠ: "img/night-hand-skin109.png",
    ᐃⵠᐃⲆⲆⵠΔ: "img/day-hand-skin110.png",
    ΔⲆⲆΔΔⲆⵠ: "img/night-hand-skin110.png",
    ⲆⵠⵠᐃⵠΔΔ: "img/day-hand-skin111.png",
    ᐃⲆⲆⲆⵠΔⵠ: "img/night-hand-skin111.png",
    ΔᐃⲆⵠⲆᐃᐃ: "img/day-hand-skin112.png",
    ΔⵠⵠᐃⵠⵠⲆ: "img/night-hand-skin112.png",
    ᐃⵠᐃⲆⵠⵠⲆΔᐃ: "img/day-hand-skin113.png",
    ΔᐃᐃᐃⲆΔⲆⲆⵠ: "img/night-hand-skin113.png",
    ᐃⲆᐃΔⵠᐃΔ: "img/day-hand-skin114.png",
    ⵠΔᐃᐃⵠⵠⲆ: "img/night-hand-skin114.png",
    ⵠⲆᐃΔⲆᐃᐃ: "img/day-hand-skin115.png",
    ⵠΔᐃΔΔΔᐃ: "img/night-hand-skin115.png",
    ⲆΔᐃⲆⵠⲆᐃ: "img/day-hand-skin116.png",
    ⵠⵠⲆΔΔⵠⲆ: "img/night-hand-skin116.png",
    ΔⵠⲆⵠΔΔᐃ: "img/day-hand-skin117.png",
    ΔᐃᐃⲆᐃⲆᐃ: "img/night-hand-skin117.png",
    ⵠᐃᐃⵠΔⲆΔ: "img/day-hand-skin118.png",
    ᐃⲆΔᐃᐃⵠᐃ: "img/night-hand-skin118.png",
    ΔΔⲆΔⵠᐃΔ: "img/day-hand-skin119.png",
    ⵠⵠΔⵠⲆⵠⲆ: "img/night-hand-skin119.png",
    ⵠᐃᐃᐃⲆΔⵠ: "img/day-hand-skin120.png",
    ⲆΔⲆⵠⲆⵠΔ: "img/night-hand-skin120.png",
    ᐃΔⵠⵠⲆᐃⵠ: "img/day-hand-skin122.png",
    ⵠⲆⵠΔⲆⲆΔ: "img/night-hand-skin122.png",
    ⲆⲆΔΔⲆᐃΔ: "img/day-hand-skin122.png",
    ⵠⵠᐃⵠⲆⵠⲆ: "img/night-hand-skin122.png",
    ΔᐃᐃΔᐃΔΔ: "img/day-hand-skin122.png",
    ΔⲆᐃⲆⵠΔⲆ: "img/night-hand-skin122.png",
    ΔΔΔΔΔᐃᐃ: "img/day-hand-skin124.png",
    ⵠⵠᐃΔΔⵠⲆ: "img/night-hand-skin124.png",
    ᐃⲆⵠⵠᐃⵠᐃ: "img/day-hand-skin125.png",
    ΔⵠΔⲆᐃⲆⲆ: "img/night-hand-skin125.png",
    ΔⲆᐃⵠΔⵠⲆ: "img/day-hand-skin126.png",
    ⲆⲆⲆⵠᐃⵠᐃ: "img/night-hand-skin126.png",
    ⲆᐃΔⵠΔᐃᐃ: "img/day-hand-skin127.png",
    ⲆᐃΔⵠⵠΔⵠ: "img/night-hand-skin127.png",
    ΔΔⵠᐃΔⲆⲆ: "img/day-hand-skin128.png",
    ⵠⲆΔΔⲆΔⲆ: "img/night-hand-skin128.png",
    ⵠⵠΔⵠⵠⵠⲆ: "img/day-hand-skin129.png",
    ⵠΔⵠΔⵠⵠΔ: "img/night-hand-skin129.png",
    ⵠᐃᐃⲆⲆᐃⲆ: "img/day-hand-skin130.png",
    ⲆⲆⲆⲆᐃΔⲆ: "img/night-hand-skin130.png",
    ⲆΔⵠⵠⲆⲆᐃ: "img/day-hand-skin131.png",
    ᐃⲆᐃΔᐃᐃᐃ: "img/night-hand-skin131.png",
    ᐃΔΔᐃⲆⲆⲆ: "img/day-hand-skin130.png",
    ⲆᐃⵠᐃⲆᐃⵠ: "img/night-hand-skin130.png",
    ⲆᐃⲆΔᐃΔᐃ: "img/day-hand-skin133.png",
    ⲆᐃᐃⵠᐃⵠΔ: "img/night-hand-skin133.png",
    ᐃⵠⲆᐃⲆⵠΔ: "img/day-hand-skin134.png",
    ΔᐃΔⵠⲆⲆⵠ: "img/night-hand-skin134.png",
    ⵠⲆⲆᐃᐃᐃᐃ: "img/day-hand-skin135.png",
    ΔⲆⵠⲆᐃⵠⵠ: "img/night-hand-skin135.png",
    ⵠᐃⵠⵠᐃⵠⲆ: "img/day-hand-skin136.png",
    ⵠⲆΔΔᐃΔⵠ: "img/night-hand-skin136.png",
    ⲆⵠᐃᐃⵠΔΔ: "img/day-hand-skin137.png",
    ⵠⲆⵠⵠⵠΔᐃ: "img/night-hand-skin137.png",
    ⵠⲆᐃΔᐃⵠΔ: "img/day-hand-skin138.png",
    ᐃΔΔⲆΔⲆⵠ: "img/night-hand-skin138.png",
    ⵠⲆⲆΔⲆⲆⵠ: "img/day-hand-skin139.png",
    ⵠΔΔⲆⵠΔⵠ: "img/night-hand-skin139.png",
    ᐃⲆⲆᐃⲆΔᐃ: "img/day-hand-skin140.png",
    ΔⵠᐃΔⵠᐃⲆ: "img/night-hand-skin140.png",
    ⵠⵠᐃᐃΔⵠⲆ: "img/day-hand-skin141.png",
    ⲆᐃⵠᐃᐃⵠΔ: "img/night-hand-skin141.png",
    ⵠᐃΔΔⵠᐃᐃ: "img/day-hand-skin142.png",
    ⵠΔⵠᐃⲆᐃΔ: "img/night-hand-skin142.png",
    ⵠⵠᐃᐃᐃΔⵠ: "img/day-hand-skin143.png",
    ⵠΔⲆⲆⵠⵠᐃ: "img/night-hand-skin143.png",
    ΔⲆⲆᐃᐃΔᐃ: "img/day-hand-skin144.png",
    ΔⵠᐃᐃⲆⲆⲆ: "img/night-hand-skin144.png",
    ΔΔᐃⲆⵠⵠⵠ: "img/day-hand-skin145.png",
    ⲆΔᐃΔⵠⵠᐃ: "img/night-hand-skin145.png",
    ⵠᐃΔΔᐃⲆⲆ: "img/day-hand-skin146.png",
    ᐃΔⲆⲆΔΔⵠ: "img/night-hand-skin146.png",
    ΔⲆΔⵠⵠⵠᐃ: "img/day-hand-skin147.png",
    ⲆⵠⲆΔⵠΔΔ: "img/night-hand-skin147.png",
    ⲆᐃⲆⲆⵠᐃΔ: "img/day-hand-skin148.png",
    ⵠΔΔⲆⲆᐃᐃ: "img/night-hand-skin148.png",
    ⲆᐃⵠⲆᐃⲆⵠ: "img/day-hand-skin149.png",
    ΔⲆⵠⲆⵠⵠΔ: "img/night-hand-skin149.png",
    ΔᐃⵠᐃⲆⵠⲆ: "img/day-hand-skin150.png",
    ⲆⵠᐃⲆΔΔᐃ: "img/night-hand-skin150.png",
    ΔᐃᐃᐃⲆΔⲆ: "img/day-hand-skin151.png",
    ᐃᐃᐃΔⲆⲆⲆ: "img/night-hand-skin151.png",
    Δᐃⵠᐃᐃᐃᐃ: "img/day-hand-skin152.png",
    ᐃⲆᐃΔᐃⵠᐃ: "img/night-hand-skin152.png",
    ΔᐃⲆᐃⲆⵠᐃ: "img/day-hand-skin153.png",
    ΔᐃⲆᐃᐃᐃΔ: "img/night-hand-skin153.png",
    ᐃⲆΔⲆᐃⵠⲆ: "img/day-hand-skin154.png",
    ⵠᐃⵠⲆⲆⲆΔ: "img/night-hand-skin154.png",
    ᐃⵠΔΔΔΔⵠ: "img/day-hand-skin155.png",
    ⵠΔᐃᐃⲆΔᐃ: "img/night-hand-skin155.png",
    ΔᐃᐃⵠⵠΔⲆ: "img/day-hand-skin156.png",
    ⲆⵠⲆⵠΔᐃⵠ: "img/night-hand-skin156.png",
    ⲆⵠⲆⵠⲆᐃⵠ: "img/day-hand-skin157.png",
    ⲆⵠⵠⲆᐃⲆΔ: "img/night-hand-skin157.png",
    ⵠᐃᐃⲆⵠⵠⲆ: "img/day-hand-skin158.png",
    ᐃΔᐃΔΔⲆΔ: "img/night-hand-skin158.png",
    ᐃᐃΔⵠᐃⲆᐃ: "img/day-hand-skin159.png",
    ⵠⵠᐃⵠᐃΔΔ: "img/night-hand-skin159.png",
    ⵠᐃᐃⵠᐃⲆⵠ: "img/day-hand-skin160.png",
    ΔΔᐃⲆⵠⵠΔ: "img/night-hand-skin160.png",
    ΔΔⲆⵠᐃⵠⲆ: "img/day-hand-skin161.png",
    ⵠΔᐃⵠΔⲆⵠ: "img/night-hand-skin161.png",
    ⲆⵠᐃᐃᐃᐃⲆ: "img/day-hand-skin162.png",
    ᐃⲆⲆⵠⲆⲆᐃ: "img/night-hand-skin162.png",
    ᐃᐃΔΔⲆⵠⲆ: "img/day-hand-skin163.png",
    ⲆⵠⵠᐃΔⵠᐃ: "img/night-hand-skin163.png",
    ΔⲆᐃⵠᐃᐃᐃ: "img/day-hand-skin164.png",
    ΔⲆⵠⵠᐃⲆⵠ: "img/night-hand-skin164.png",
    ⲆⲆΔⵠⵠⵠΔ: "img/day-hand-skin165.png",
    ⵠΔΔᐃᐃΔΔ: "img/night-hand-skin165.png",
    ᐃⲆⵠᐃⲆⵠⵠ: "img/day-hand-skin166.png",
    ⵠⲆⵠⵠΔⵠΔ: "img/night-hand-skin166.png",
    ΔⲆᐃΔΔⵠᐃ: "img/day-hand-skin167.png",
    ⵠⲆΔΔⵠⵠⵠ: "img/night-hand-skin167.png",
    ⵠΔⵠⲆΔΔⲆ: "img/day-hand-skin168.png",
    ⲆΔᐃⲆⵠΔΔ: "img/night-hand-skin168.png",
    ⲆᐃΔΔΔⲆΔ: "img/day-hand-skin169.png",
    ⲆⲆΔᐃΔⵠΔ: "img/night-hand-skin169.png",
    ᐃⵠᐃⵠᐃΔᐃ: "img/day-hand-skin170.png",
    ΔⲆⲆⵠⲆᐃᐃ: "img/night-hand-skin170.png",
    ⵠⵠᐃⲆⵠᐃⲆ: "img/day-hand-skin171.png",
    ⵠᐃⲆᐃᐃᐃⵠ: "img/night-hand-skin171.png",
    ΔⵠΔᐃⲆᐃᐃ: "img/day-hand-skin172.png",
    ⲆⲆⵠⵠΔⵠΔ: "img/night-hand-skin172.png",
    ⵠᐃⵠᐃᐃΔⵠ: "img/day-hand-skin173.png",
    ⲆⵠΔΔᐃⲆⵠ: "img/night-hand-skin173.png",
    ⲆΔⵠΔΔⵠΔ: "img/day-hand-skin174.png",
    ⲆᐃⵠⵠΔⵠᐃ: "img/night-hand-skin174.png",
    ᐃⵠᐃⲆⵠⵠᐃ: "img/day-hand-skin175.png",
    ⲆΔⵠⵠⲆΔᐃ: "img/night-hand-skin175.png",
    ⲆⲆⵠⵠⵠᐃᐃ: "img/day-hand-skin176.png",
    ᐃⵠΔⲆⵠⵠⲆ: "img/night-hand-skin176.png",
    ΔᐃΔⲆΔⵠⵠ: "img/day-hand-skin177.png",
    ⵠΔⵠΔᐃⲆⲆ: "img/night-hand-skin177.png",
    ⲆⵠᐃⵠⵠΔΔ: "img/day-hand-skin178.png",
    ΔᐃⵠΔⵠᐃⵠ: "img/night-hand-skin178.png",
    ⵠᐃⵠⲆⲆⲆⵠ: "img/day-hand-skin179.png",
    ΔⲆᐃⵠⵠᐃᐃ: "img/night-hand-skin179.png",
    ⵠᐃᐃᐃⵠΔᐃ: "img/day-hand-skin180.png",
    ⵠᐃᐃᐃⵠⵠⲆ: "img/night-hand-skin180.png",
    ⵠⵠⵠⵠΔᐃᐃ: "img/day-hand-skin181.png",
    ΔΔᐃⵠⲆⵠΔ: "img/night-hand-skin181.png",
    ⵠⲆᐃⵠⵠⵠΔ: "img/day-hand-skin182.png",
    ᐃⵠⵠΔⲆΔᐃ: "img/night-hand-skin182.png",
    ΔⲆΔΔⵠᐃⲆ: "img/day-hand-skin183.png",
    ᐃΔⵠⲆⲆⵠᐃ: "img/night-hand-skin183.png",
    ᐃΔⵠΔᐃᐃᐃ: "img/day-hand-skin184.png",
    ᐃⲆⵠᐃⲆᐃⵠ: "img/night-hand-skin184.png",
    ⵠⲆΔΔᐃⲆⲆ: "img/day-hand-skin185.png",
    ΔⵠⲆΔⵠⵠⲆ: "img/night-hand-skin185.png",
    ⲆᐃΔⵠᐃⵠⵠ: "img/day-hand-skin186.png",
    ᐃⲆⵠᐃⲆⵠⲆ: "img/night-hand-skin186.png",
    ᐃΔᐃᐃⲆⵠᐃ: "img/day-hand-skin187.png",
    ᐃᐃⵠⵠΔⵠᐃ: "img/night-hand-skin187.png",
    ᐃⲆᐃⵠⵠⵠᐃ: "img/day-hand-skin188.png",
    ⵠᐃⲆⵠᐃᐃΔ: "img/night-hand-skin188.png",
    ᐃΔⲆⲆΔᐃΔ: "img/day-hand-skin189.png",
    ⲆⵠΔΔⵠⵠΔ: "img/night-hand-skin189.png",
    ΔⵠΔᐃΔⲆᐃ: "img/day-hand-skin190.png",
    ΔⵠΔᐃᐃⵠⵠ: "img/night-hand-skin190.png",
    ⲆΔᐃᐃⵠⵠᐃ: "img/day-hand-skin191.png",
    ᐃᐃⲆΔⲆⲆⲆ: "img/night-hand-skin191.png",
    ΔⵠⲆⵠⲆΔⲆ: "img/day-hand-skin192.png",
    ⵠΔⲆᐃΔⲆⲆ: "img/night-hand-skin192.png",
    ΔᐃᐃⵠΔΔΔ: "img/day-hand-skin193.png",
    ⲆΔⵠᐃᐃⲆᐃ: "img/night-hand-skin193.png",
    ⵠⲆⵠΔᐃⵠᐃ: "img/day-hand-skin194.png",
    ᐃΔᐃⵠⵠⲆᐃ: "img/night-hand-skin194.png",
    ⵠΔᐃᐃᐃΔⲆ: "img/day-hand-skin195.png",
    ᐃⲆᐃⵠⲆᐃΔ: "img/night-hand-skin195.png",
    ΔⵠⲆⵠᐃΔⲆ: "img/day-hand-skin196.png",
    ᐃⲆᐃⵠΔⲆᐃ: "img/night-hand-skin196.png",
    ΔΔⲆⵠΔᐃⲆ: "img/day-hand-skin197.png",
    ᐃΔⵠΔⲆⵠᐃ: "img/night-hand-skin197.png",
    ⵠΔᐃⵠⵠⲆⵠ: "img/day-hand-skin198.png",
    ΔⵠⵠⲆΔⵠᐃ: "img/night-hand-skin198.png",
    ⵠᐃΔⵠΔΔⵠ: "img/day-hand-skin199.png",
    ⵠΔⵠⵠΔᐃⵠ: "img/night-hand-skin199.png",
    ⲆᐃΔᐃΔⵠᐃ: "img/day-hand-skin200.png",
    ΔΔⲆᐃΔᐃⵠ: "img/night-hand-skin200.png",
    ΔⵠⲆᐃΔᐃⵠ: "img/day-hand-skin201.png",
    ⵠΔⵠᐃⲆᐃⵠ: "img/night-hand-skin201.png",
    ⲆᐃⲆⵠΔⵠⵠ: "img/day-hand-skin202.png",
    ᐃΔⵠᐃᐃⲆᐃ: "img/night-hand-skin202.png",
    ᐃᐃΔᐃⵠⲆΔ: "img/day-hand-skin203.png",
    ᐃᐃⲆΔⵠⵠⲆ: "img/night-hand-skin203.png",
    ⵠΔΔΔΔΔⵠ: "img/day-hand-skin204.png",
    ᐃᐃΔⲆⲆΔⵠ: "img/night-hand-skin204.png",
    ΔᐃᐃⵠⲆᐃᐃ: "img/day-hand-skin205.png",
    ᐃᐃⲆⲆΔΔⲆ: "img/night-hand-skin205.png",
    ⲆⵠⵠⲆΔΔⲆ: "img/day-hand-skin206.png",
    ⵠⲆⵠⵠΔΔΔ: "img/night-hand-skin206.png",
    ΔⵠⲆⲆⲆΔⲆ: "img/day-hand-skin207.png",
    ⵠⲆⵠᐃⲆᐃΔ: "img/night-hand-skin207.png",
    ᐃⲆΔⵠⵠⲆΔ: "img/day-hand-skin208.png",
    ΔⵠⵠΔⵠΔⵠ: "img/night-hand-skin208.png",
    ᐃⲆΔΔᐃⵠⵠ: "img/day-hand-skin209.png",
    ⵠᐃᐃΔᐃⵠⲆ: "img/night-hand-skin209.png",
    ⵠⵠⵠᐃⵠΔⵠ: "img/day-hand-skin210.png",
    ΔⲆΔⵠΔΔⵠ: "img/night-hand-skin210.png",
    ᐃᐃᐃΔⵠΔⵠ: "img/day-hand-skin211.png",
    ⵠᐃⲆᐃΔΔⵠ: "img/night-hand-skin211.png",
    ⲆΔⵠᐃⲆᐃⲆ: "img/day-hand-skin212.png",
    ⲆᐃΔⵠⲆⲆⲆ: "img/night-hand-skin212.png",
    ᐃᐃⲆⲆⵠΔⲆ: "img/day-hand-skin213.png",
    ᐃⵠᐃⲆΔΔΔ: "img/night-hand-skin213.png",
    ᐃⵠᐃΔⵠⲆⲆ: "img/day-hand-skin214.png",
    ⵠΔⲆΔⵠΔⵠ: "img/night-hand-skin214.png",
    ᐃⵠΔⵠΔΔⲆ: "img/day-bag-star0.png",
    ᐃᐃⲆᐃᐃᐃΔ: "img/night-bag-star0.png",
    ΔᐃΔΔⲆⲆⲆ: "img/day-bag0.png",
    ⵠⵠⲆΔᐃⵠΔ: "img/night-bag0.png",
    ᐃᐃᐃⲆⵠΔⵠ: "img/day-bag1.png",
    ⵠⲆᐃⲆᐃⲆᐃ: "img/night-bag1.png",
    ⲆⲆⲆΔΔⵠⲆ: "img/day-bag2.png",
    ⲆⲆⵠⵠⲆⲆᐃ: "img/night-bag2.png",
    ⲆᐃΔΔⵠⲆΔ: "img/day-bag3.png",
    ⵠΔΔⲆⵠᐃⲆ: "img/night-bag3.png",
    ⵠᐃⵠⵠⵠⵠⵠ: "img/day-bag4.png",
    ⲆΔΔⵠⵠᐃᐃ: "img/night-bag4.png",
    ᐃΔΔⵠⲆⲆⲆ: "img/day-bag5.png",
    ⲆΔΔΔᐃΔᐃ: "img/night-bag5.png",
    ⲆⲆⲆᐃⲆⲆᐃ: "img/day-bag6.png",
    ΔⲆΔⲆⲆⵠⵠ: "img/night-bag6.png",
    ᐃᐃⲆΔⵠⵠⵠ: "img/day-bag7.png",
    ⲆᐃᐃⲆΔⲆⲆ: "img/night-bag7.png",
    ᐃᐃᐃⲆⵠⵠⵠ: "img/day-bag8.png",
    ⵠⵠⲆⲆᐃΔⵠ: "img/night-bag8.png",
    ᐃⲆᐃⵠᐃΔᐃ: "img/day-bag9.png",
    ⲆᐃΔᐃΔⵠΔ: "img/night-bag9.png",
    ΔⵠΔⵠⵠΔᐃ: "img/day-bag10.png",
    ⲆᐃΔⲆΔⲆⲆ: "img/night-bag10.png",
    ᐃΔᐃΔⵠⵠᐃ: "img/day-bag11.png",
    ᐃΔΔᐃᐃⲆⲆ: "img/night-bag11.png",
    ⵠΔᐃⵠΔΔᐃ: "img/day-bag13.png",
    ᐃᐃΔⵠΔⲆⲆ: "img/night-bag13.png",
    ᐃⲆᐃⲆᐃᐃⲆ: "img/day-bag14.png",
    ⵠᐃⲆⲆΔᐃΔ: "img/night-bag14.png",
    ⲆⲆᐃΔᐃΔⲆ: "img/day-bag16.png",
    ΔΔⵠⵠⲆΔΔ: "img/night-bag16.png",
    ᐃⵠⲆᐃⲆⵠⵠ: "img/day-bag17.png",
    ΔⲆᐃΔⲆᐃᐃ: "img/night-bag17.png",
    ⲆⵠᐃⵠᐃΔᐃ: "img/day-bag18.png",
    ⵠⵠᐃⲆⵠᐃᐃ: "img/night-bag18.png",
    ⵠⲆⲆⲆⵠⲆⲆ: "img/day-bag19.png",
    ⵠΔⵠΔᐃᐃΔ: "img/night-bag19.png",
    Δⵠⵠⵠᐃᐃᐃ: "img/day-bag20.png",
    ⲆⲆΔΔⵠᐃΔ: "img/night-bag20.png",
    ⵠᐃΔⵠⵠᐃⵠ: "img/day-bag21.png",
    ᐃⵠΔⲆΔΔⲆ: "img/night-bag21.png",
    ⲆⲆᐃΔΔⵠⵠ: "img/day-bag22.png",
    ⲆⵠⵠⲆⲆᐃᐃ: "img/night-bag22.png",
    ΔᐃᐃΔᐃⵠⵠ: "img/day-bag23.png",
    ΔᐃⵠᐃⵠⲆⵠ: "img/night-bag23.png",
    ᐃⵠΔⵠΔⵠΔ: "img/day-bag24.png",
    ⲆᐃⵠᐃⲆⲆᐃ: "img/night-bag24.png",
    ᐃΔⲆΔⲆΔⲆ: "img/day-bag25.png",
    ⵠⲆΔΔᐃⵠᐃ: "img/night-bag25.png",
    ΔᐃᐃⲆⵠΔΔ: "img/day-bag26.png",
    ᐃⵠⲆΔⵠⵠᐃ: "img/night-bag26.png",
    ⲆΔⵠΔⵠⵠⵠ: "img/day-bag27.png",
    ⵠᐃΔΔΔⲆᐃ: "img/night-bag27.png",
    ⵠⵠⵠⵠᐃΔⵠ: "img/day-bag28.png",
    ΔΔⲆⵠᐃⲆⵠ: "img/night-bag28.png",
    ΔᐃᐃⵠᐃⲆΔ: "img/day-bag29.png",
    ᐃⲆⵠⵠΔⲆⵠ: "img/night-bag29.png",
    ⲆⲆΔⵠⵠⲆᐃ: "img/day-bag30.png",
    ⵠⲆΔⵠⲆⵠⵠ: "img/night-bag30.png",
    ⵠⵠⲆⲆᐃⲆᐃ: "img/day-bag31.png",
    ⵠⲆⲆΔᐃᐃⵠ: "img/night-bag31.png",
    ΔⵠΔᐃΔⲆⲆ: "img/day-bag32.png",
    ᐃΔⲆᐃΔΔⲆ: "img/night-bag32.png",
    ⵠᐃΔᐃᐃⲆⵠ: "img/day-bag33.png",
    ΔⲆᐃⲆⵠⲆᐃ: "img/night-bag33.png",
    ⲆⵠΔⵠᐃⵠⵠ: "img/day-bag34.png",
    ⲆΔⲆᐃⲆᐃⲆ: "img/night-bag34.png",
    ΔⵠⵠΔⲆⲆⲆ: "img/day-bag35.png",
    ΔΔᐃⲆⲆⲆᐃ: "img/night-bag35.png",
    ᐃⵠΔⲆᐃⵠⵠ: "img/day-bag36.png",
    ΔⵠΔⲆⵠⵠΔ: "img/night-bag36.png",
    ⲆᐃⲆΔΔⵠⲆ: "img/day-bag37.png",
    ⵠᐃⲆⲆΔⲆᐃ: "img/night-bag37.png",
    ΔᐃΔᐃⵠᐃᐃ: "img/day-bag38.png",
    ⲆᐃᐃΔⲆⲆⵠ: "img/night-bag38.png",
    ⵠᐃᐃᐃΔⲆⵠ: "img/day-bag39.png",
    ⲆΔⵠᐃΔΔⲆ: "img/night-bag39.png",
    ⵠⵠᐃᐃⲆᐃΔ: "img/day-bag40.png",
    ⲆᐃΔΔΔΔⵠ: "img/night-bag40.png",
    ΔⲆΔⵠⵠᐃᐃ: "img/day-bag41.png",
    ΔⵠΔᐃⲆᐃⲆ: "img/night-bag41.png",
    ⵠΔᐃΔⵠⲆⲆ: "img/day-bag42.png",
    ⲆⲆᐃΔⵠᐃⵠ: "img/night-bag42.png",
    ΔⲆⲆⲆⵠⵠΔ: "img/day-bag43.png",
    ⲆΔⲆΔᐃᐃΔ: "img/night-bag43.png",
    ⵠΔⵠⲆᐃΔᐃ: "img/day-bag44.png",
    ⵠᐃᐃⲆᐃᐃⵠ: "img/night-bag44.png",
    ᐃΔⵠΔΔᐃⵠ: "img/day-bag45.png",
    ᐃⵠΔΔⵠΔᐃ: "img/night-bag45.png",
    ⵠΔⵠⵠΔᐃᐃ: "img/day-bag46.png",
    ⲆΔⵠᐃⲆⲆⵠ: "img/night-bag46.png",
    ⲆΔⵠᐃᐃⵠⵠ: "img/day-bag47.png",
    ⵠᐃᐃΔΔⲆΔ: "img/night-bag47.png",
    ᐃΔᐃᐃⲆᐃⵠ: "img/day-bag48.png",
    ⲆΔΔᐃᐃⵠⲆ: "img/night-bag48.png",
    ΔΔⲆⵠⲆΔⲆ: "img/day-bag49.png",
    ⵠⲆⵠΔⵠⲆᐃ: "img/night-bag49.png",
    ᐃᐃⵠⲆᐃΔⵠ: "img/day-bag50.png",
    ⲆⲆᐃⵠⲆⵠᐃ: "img/night-bag50.png",
    ⲆⵠΔⲆᐃⵠΔ: "img/day-bag51.png",
    ⲆᐃᐃΔⵠⵠⲆ: "img/night-bag51.png",
    ᐃⵠΔⵠⲆⲆᐃ: "img/day-bag52.png",
    ΔᐃⵠΔΔⵠⵠ: "img/night-bag52.png",
    ⲆⲆΔΔᐃᐃᐃ: "img/day-bag53.png",
    ⲆⵠⵠⵠΔⲆᐃ: "img/night-bag53.png",
    ⲆⵠⲆⵠΔⲆⲆ: "img/day-bag54.png",
    ⲆⲆⲆᐃⵠΔⲆ: "img/night-bag54.png",
    ᐃᐃᐃⵠⵠΔⲆ: "img/day-bag55.png",
    ⲆⲆⵠⵠⵠⲆΔ: "img/night-bag55.png",
    ⲆⵠⵠᐃΔⵠⲆ: "img/day-bag56.png",
    ⲆΔⵠᐃΔᐃⵠ: "img/night-bag56.png",
    ᐃⵠΔΔⵠΔⵠ: "img/day-bag57.png",
    ⲆⵠᐃⵠΔⵠΔ: "img/night-bag57.png",
    ⵠᐃⲆⵠⲆⵠΔ: "img/day-bag58.png",
    ⵠⲆⵠⲆΔⵠΔ: "img/night-bag58.png",
    ⵠⵠᐃΔᐃⵠΔ: "img/day-bag59.png",
    ΔⲆᐃᐃΔⲆⵠ: "img/night-bag59.png",
    ⵠⲆⵠⲆⲆⵠⲆ: "img/day-bag60.png",
    ⲆⲆⲆⵠⲆΔⵠ: "img/night-bag60.png",
    ⵠⵠⲆⵠᐃⲆⲆ: "img/day-bag61.png",
    ⵠⵠⲆᐃⵠᐃᐃ: "img/night-bag61.png",
    ᐃΔΔⲆᐃⵠⲆ: "img/day-bag62.png",
    ᐃᐃᐃⲆⵠⲆΔ: "img/night-bag62.png",
    ⵠⲆᐃⵠΔᐃᐃ: "img/day-bag63.png",
    ᐃⵠᐃΔⵠⲆⵠ: "img/night-bag63.png",
    ⲆΔⵠⵠⲆⲆΔ: "img/day-bag64.png",
    ⲆⵠⵠⵠᐃᐃΔ: "img/night-bag64.png",
    ⵠᐃⲆⵠⵠᐃΔ: "img/day-bag65.png",
    ⲆΔᐃΔΔᐃΔ: "img/night-bag65.png",
    ΔΔᐃΔΔⵠᐃ: "img/day-bag66.png",
    ⵠᐃⲆᐃᐃⲆⲆ: "img/night-bag66.png",
    ⲆⲆⲆⵠⲆⲆⲆ: "img/day-bag67.png",
    ΔⵠΔⲆΔⲆΔ: "img/night-bag67.png",
    ⵠᐃⲆⲆΔⵠΔ: "img/day-bag68.png",
    ⵠⲆⲆⲆΔᐃΔ: "img/night-bag68.png",
    ⲆΔΔⵠⲆΔΔ: "img/day-bag69.png",
    ⲆⲆΔⵠⲆᐃⵠ: "img/night-bag69.png",
    ΔᐃⲆΔᐃⲆΔ: "img/day-bag70.png",
    ⲆⵠΔᐃⵠⵠΔ: "img/night-bag70.png",
    ⵠᐃⵠⲆⵠⲆᐃ: "img/day-bag71.png",
    ΔⲆΔⲆⲆⲆⵠ: "img/night-bag71.png",
    ⵠΔⵠᐃᐃΔⲆ: "img/day-bag72.png",
    ⲆᐃΔᐃΔⲆᐃ: "img/night-bag72.png",
    ΔⵠΔⲆΔᐃΔ: "img/day-bag73.png",
    ΔⲆⲆⵠⲆⲆΔ: "img/night-bag73.png",
    ⲆΔᐃᐃⲆⲆΔ: "img/day-bag74.png",
    ⵠⵠΔⲆΔⵠᐃ: "img/night-bag74.png",
    ΔᐃΔⲆⲆⲆⲆ: "img/day-bag75.png",
    ⲆᐃⵠᐃⲆΔᐃ: "img/night-bag75.png",
    ⵠΔⲆⵠᐃΔΔ: "img/day-bag76.png",
    ᐃᐃΔᐃⲆᐃΔ: "img/night-bag76.png",
    ΔᐃΔΔΔᐃΔ: "img/day-bag77.png",
    ΔᐃᐃᐃᐃⵠΔ: "img/night-bag77.png",
    ΔΔⵠᐃΔΔᐃ: "img/day-bag78.png",
    ᐃᐃⲆⲆᐃⲆᐃ: "img/night-bag78.png",
    ⵠᐃΔⵠᐃᐃⵠ: "img/day-bag79.png",
    ᐃᐃⲆⲆΔᐃΔ: "img/night-bag79.png",
    ΔΔᐃⵠΔⲆⲆ: "img/day-bag80.png",
    ⵠᐃΔΔⲆⵠΔ: "img/night-bag80.png",
    ⵠⲆᐃᐃᐃⲆⵠ: "img/day-accessory0.png",
    ⲆᐃⲆΔⵠᐃⵠ: "img/day-accessory0-pacques.png",
    ᐃᐃⲆⵠᐃΔⲆ: "img/night-accessory0-pacques.png",
    ᐃⲆⲆᐃⲆᐃᐃ: "img/day-accessory13.png",
    ᐃΔⲆᐃΔᐃⲆ: "img/night-accessory13.png",
    ⲆⲆⵠᐃᐃⲆᐃ: "img/day-accessory14.png",
    ⲆⲆⵠⵠᐃΔΔ: "img/night-accessory14.png",
    ⵠᐃΔⵠᐃΔⵠ: "img/day-accessory15.png",
    ⲆΔᐃⵠᐃΔⵠ: "img/night-accessory15.png",
    ⵠΔⲆΔΔⲆⲆ: "img/day-accessory16.png",
    ᐃᐃᐃⲆᐃΔΔ: "img/night-accessory16.png",
    ᐃΔⵠⵠΔᐃⲆ: "img/day-accessory17.png",
    ⵠⵠᐃⵠⵠΔΔ: "img/day-accessory17.png",
    ΔᐃⵠΔΔΔᐃ: "img/day-accessory19.png",
    ᐃΔΔΔⵠⵠΔ: "img/night-accessory19.png",
    ΔⲆΔⲆⵠⲆⵠ: "img/day-accessory20.png",
    ΔᐃᐃⲆΔⲆⲆ: "img/night-accessory20.png",
    ⲆΔⲆⵠΔΔⵠ: "img/day-accessory21.png",
    ΔᐃⲆᐃⵠᐃⵠ: "img/night-accessory21.png",
    ⲆΔⲆⲆⲆΔⲆ: "img/day-accessory22.png",
    ᐃⵠⲆᐃΔⵠⵠ: "img/night-accessory22.png",
    ᐃⲆⲆᐃᐃⵠᐃ: "img/day-accessory23.png",
    ΔⵠΔⲆⵠⲆΔ: "img/night-accessory23.png",
    ⲆⲆⲆⵠΔⲆᐃ: "img/day-accessory24.png",
    ⲆⲆⲆΔΔⲆⵠ: "img/night-accessory24.png",
    ᐃⵠΔΔᐃⵠⵠ: "img/day-accessory25.png",
    ΔᐃΔⵠⲆⲆΔ: "img/night-accessory25.png",
    ᐃⲆⲆⲆⵠⲆΔ: "img/day-accessory26.png",
    ᐃⲆⲆᐃⵠⲆΔ: "img/night-accessory26.png",
    ΔⵠⵠⲆⵠⵠⵠ: "img/day-accessory27.png",
    ⵠᐃⵠⵠᐃⵠᐃ: "img/night-accessory27.png",
    ᐃΔᐃΔⲆⵠⵠ: "img/day-accessory18.png",
    ⵠᐃΔⲆᐃᐃΔ: "img/night-accessory18.png",
    ⵠⵠΔⵠⵠⲆⵠ: "img/day-accessory29.png",
    ΔⲆⵠⲆⲆⵠΔ: "img/night-accessory29.png",
    ᐃΔⲆᐃᐃⲆⲆ: "img/day-accessory30.png",
    ΔⲆΔⲆⲆΔΔ: "img/night-accessory30.png",
    ΔΔΔΔΔΔΔ: "img/day-accessory31.png",
    ᐃⲆᐃᐃΔⲆΔ: "img/night-accessory31.png",
    ᐃⲆⵠᐃⵠⵠᐃ: "img/day-accessory32.png",
    ᐃΔΔⲆΔΔΔ: "img/night-accessory32.png",
    ⲆⲆⲆΔᐃΔⲆ: "img/day-accessory33.png",
    ⵠⲆⲆᐃᐃⵠⵠ: "img/night-accessory33.png",
    ΔⵠΔᐃⵠⵠᐃ: "img/day-accessory34.png",
    ⵠⲆᐃΔᐃⲆⲆ: "img/night-accessory34.png",
    ΔᐃⵠⵠΔⲆᐃ: "img/day-accessory35.png",
    ᐃᐃᐃΔⵠⵠⵠ: "img/night-accessory35.png",
    ⵠᐃᐃΔΔⲆⵠ: "img/day-accessory28.png",
    ⵠⵠᐃᐃᐃΔⲆ: "img/night-accessory28.png",
    ⲆΔⵠΔᐃΔΔ: "img/day-accessory36.png",
    ⵠⲆⲆⲆⲆΔⲆ: "img/night-accessory36.png",
    ⲆᐃᐃⲆⲆⵠⵠ: "img/day-accessory37.png",
    ᐃⵠⲆᐃᐃΔⵠ: "img/night-accessory37.png",
    ΔⲆⲆⵠⵠⲆⲆ: "img/day-accessory39.png",
    ΔᐃⵠᐃΔᐃⵠ: "img/night-accessory39.png",
    ⵠⲆᐃⲆⲆᐃⵠ: "img/day-accessory40.png",
    ᐃⵠⲆᐃᐃⵠⲆ: "img/night-accessory40.png",
    ᐃᐃⵠⵠⲆΔⲆ: "img/day-accessory41.png",
    ⵠⵠᐃⵠΔⵠᐃ: "img/night-accessory41.png",
    ᐃⵠⵠⲆⵠⲆⵠ: "img/day-accessory42.png",
    ⵠᐃΔⲆⲆΔⲆ: "img/night-accessory42.png",
    ᐃΔⲆⵠΔᐃⵠ: "img/day-accessory43.png",
    ⵠⵠⵠⲆᐃᐃΔ: "img/night-accessory43.png",
    ⲆⲆΔᐃⵠᐃⲆ: "img/day-accessory44.png",
    ⵠᐃⲆⵠΔΔⲆ: "img/night-accessory44.png",
    ⵠⵠⵠΔᐃⵠΔ: "img/day-accessory38.png",
    ΔᐃΔⲆᐃⵠⵠ: "img/night-accessory38.png",
    ΔᐃΔΔⲆⵠᐃ: "img/day-accessory46.png",
    ⵠᐃⲆⲆⲆΔᐃ: "img/night-accessory46.png",
    ⲆΔΔᐃⲆⵠⲆ: "img/day-accessory47.png",
    ΔⲆⵠΔⲆᐃᐃ: "img/night-accessory47.png",
    ⵠⵠΔⲆΔⲆⵠ: "img/day-accessory48.png",
    ⵠⵠΔΔⵠⲆⵠ: "img/night-accessory48.png",
    ΔΔⵠᐃⲆΔᐃ: "img/day-accessory49.png",
    ᐃᐃⵠⵠⲆΔᐃ: "img/night-accessory49.png",
    ᐃⲆⲆⵠΔᐃᐃ: "img/day-accessory45.png",
    ⲆᐃᐃᐃᐃᐃΔ: "img/night-accessory45.png",
    ᐃⲆⵠΔⵠⲆⵠ: "img/day-accessory50.png",
    ⵠΔΔⲆⵠΔΔ: "img/night-accessory50.png",
    ⲆᐃᐃⵠΔᐃⲆ: "img/day-accessory51.png",
    ⵠᐃΔⲆᐃⵠⲆ: "img/night-accessory51.png",
    ᐃⵠⲆⵠᐃⵠⵠ: "img/day-accessory52.png",
    ⵠⲆᐃⵠⲆΔΔ: "img/night-accessory52.png",
    ΔⲆⲆⲆⵠⲆᐃ: "img/day-accessory53.png",
    ᐃⲆΔᐃᐃΔⵠ: "img/night-accessory53.png",
    ΔᐃΔᐃΔⲆⵠ: "img/day-accessory54.png",
    ᐃΔᐃΔⲆᐃΔ: "img/night-accessory54.png",
    ᐃⵠΔᐃⵠΔⵠ: "img/day-accessory55.png",
    ᐃᐃᐃᐃΔⲆⵠ: "img/night-accessory55.png",
    ᐃΔᐃⲆᐃⵠⲆ: "img/day-accessory56.png",
    ΔⲆⵠᐃⲆΔⵠ: "img/night-accessory56.png",
    ⵠⵠᐃᐃⵠΔⲆ: "img/day-accessory57.png",
    ⵠᐃⵠⵠⵠᐃⵠ: "img/night-accessory57.png",
    ᐃΔⲆⲆΔΔⲆ: "img/day-accessory58.png",
    ⲆⲆᐃΔΔᐃⲆ: "img/night-accessory58.png",
    ΔⲆᐃⲆᐃⲆⲆ: "img/day-accessory59.png",
    ⲆᐃⲆⲆᐃᐃᐃ: "img/night-accessory59.png",
    ⵠⵠⵠⵠⲆⵠⲆ: "img/day-accessory60.png",
    ⵠⵠᐃⲆᐃⲆᐃ: "img/night-accessory60.png",
    ΔⲆⵠⵠᐃⲆᐃ: "img/day-accessory61.png",
    ⲆⵠⵠⲆᐃⵠⵠ: "img/night-accessory61.png",
    ⲆΔΔⲆⵠΔΔ: "img/day-accessory62.png",
    ᐃᐃᐃΔΔΔⲆ: "img/night-accessory62.png",
    ᐃΔΔΔΔⲆⵠ: "img/day-accessory63.png",
    ΔⲆᐃΔⲆᐃΔ: "img/night-accessory63.png",
    ᐃᐃΔⵠᐃᐃᐃ: "img/day-accessory64.png",
    ⵠⵠⵠⲆⵠᐃᐃ: "img/night-accessory64.png",
    ᐃⲆᐃⵠⵠⲆᐃ: "img/day-accessory65.png",
    ΔⲆⲆⵠⵠᐃΔ: "img/night-accessory65.png",
    ΔᐃΔⲆⵠᐃᐃ: "img/day-accessory66.png",
    ⲆΔⲆⵠⵠⲆⵠ: "img/night-accessory66.png",
    ⲆⵠᐃⲆⲆᐃΔ: "img/day-accessory67.png",
    ᐃⵠΔⵠⲆᐃᐃ: "img/night-accessory67.png",
    ⵠΔⲆⲆᐃᐃⲆ: "img/day-accessory68.png",
    ᐃⲆⵠⲆⲆΔᐃ: "img/night-accessory68.png",
    ⲆⵠΔⵠΔΔᐃ: "img/day-accessory69.png",
    ΔⲆΔᐃⲆⲆⲆ: "img/night-accessory69.png",
    ΔⵠⲆⵠⵠⲆⲆ: "img/day-accessory70.png",
    ΔᐃⵠⵠⵠΔⵠ: "img/night-accessory70.png",
    ᐃᐃᐃᐃⲆΔΔ: "img/day-accessory71.png",
    ΔᐃⵠⲆᐃⵠⲆ: "img/night-accessory71.png",
    ΔΔⲆᐃΔⲆᐃ: "img/day-accessory72.png",
    ⵠΔⵠⵠΔⲆⲆ: "img/night-accessory72.png",
    ⵠⲆⵠⵠᐃⵠᐃ: "img/day-accessory73.png",
    ⲆⵠᐃⲆⵠΔᐃ: "img/night-accessory73.png",
    ⵠᐃΔΔᐃΔⲆ: "img/day-accessory74.png",
    ⲆⲆᐃᐃΔᐃⲆ: "img/night-accessory74.png",
    ᐃΔⲆⵠΔⲆⵠ: "img/day-accessory75.png",
    ᐃⲆⵠΔΔⲆᐃ: "img/night-accessory75.png",
    ⵠᐃᐃᐃΔᐃⵠ: "img/day-accessory76.png",
    ΔⵠΔΔΔⲆΔ: "img/night-accessory76.png",
    ΔᐃᐃⵠᐃⲆⲆ: "img/day-accessory77.png",
    ⵠⵠᐃᐃᐃⲆΔ: "img/night-accessory77.png",
    ΔⵠⲆᐃⵠⲆΔ: "img/day-accessory78.png",
    ΔⲆⵠΔⵠⲆᐃ: "img/night-accessory78.png",
    ᐃⵠⲆᐃΔᐃⲆ: "img/day-accessory79.png",
    ⵠⵠⲆᐃᐃⲆⲆ: "img/night-accessory79.png",
    ᐃⲆⵠⵠᐃⵠΔ: "img/day-accessory80.png",
    ⲆⵠⲆᐃⵠⲆΔ: "img/night-accessory80.png",
    ᐃΔⲆⵠᐃᐃⵠ: "img/day-accessory81.png",
    ᐃᐃⵠΔⵠΔⵠ: "img/night-accessory81.png",
    ⲆΔᐃΔᐃⵠᐃ: "img/day-accessory83.png",
    ⵠⲆΔᐃⲆⵠⵠ: "img/night-accessory83.png",
    ᐃΔⲆᐃⵠⲆⵠ: "img/day-accessory84.png",
    ᐃⲆΔⵠⵠⲆᐃ: "img/night-accessory84.png",
    ⵠⲆΔΔⲆᐃΔ: "img/day-accessory85.png",
    ᐃΔΔᐃⲆⵠⵠ: "img/night-accessory85.png",
    ΔⲆⲆⲆᐃΔΔ: "img/day-accessory86.png",
    ⲆⵠΔⲆⲆⲆᐃ: "img/night-accessory86.png",
    ⲆΔᐃⵠΔⲆΔ: "img/day-accessory87.png",
    ΔⵠΔⵠⲆΔⲆ: "img/night-accessory87.png",
    ΔⵠⵠΔⵠⲆΔ: "img/day-accessory88.png",
    ⵠⵠⵠⵠᐃⵠⲆ: "img/night-accessory88.png",
    ΔⲆᐃⲆⲆᐃᐃ: "img/day-accessory89.png",
    ΔⲆⲆΔⵠᐃⵠ: "img/night-accessory89.png",
    ⵠⲆΔⲆⲆΔᐃ: "img/day-accessory90.png",
    ᐃᐃⵠⵠΔΔᐃ: "img/night-accessory90.png",
    ᐃᐃΔΔⵠΔⵠ: "img/day-accessory91.png",
    ᐃⲆᐃᐃⵠⲆᐃ: "img/night-accessory91.png",
    ⲆΔᐃⵠⲆⵠⵠ: "img/day-accessory92.png",
    ⲆⲆⲆⲆᐃΔᐃ: "img/night-accessory92.png",
    ᐃᐃⵠⲆᐃⲆΔ: "img/day-accessory93.png",
    ΔΔᐃⵠⲆⵠⲆ: "img/night-accessory93.png",
    ΔⲆⵠⵠᐃΔⲆ: "img/day-accessory94.png",
    ᐃᐃⵠΔΔⵠΔ: "img/night-accessory94.png",
    ᐃΔⵠⲆᐃᐃΔ: "img/day-accessory95.png",
    ᐃΔⲆΔᐃΔΔ: "img/night-accessory95.png",
    ⵠⵠᐃᐃΔⵠΔ: "img/day-accessory96.png",
    ⲆΔⵠⵠⲆⵠᐃ: "img/night-accessory96.png",
    ΔⵠⵠⵠᐃⵠΔ: "img/day-accessory97.png",
    ⵠΔᐃΔΔΔⵠ: "img/night-accessory97.png",
    ⵠᐃⵠⲆᐃⲆΔ: "img/day-accessory98.png",
    ᐃⲆΔⲆᐃⵠᐃ: "img/night-accessory98.png",
    ΔᐃⵠᐃᐃⲆᐃ: "img/day-accessory99.png",
    ⲆⲆⵠⵠⵠΔΔ: "img/night-accessory99.png",
    ⵠⲆᐃⵠⵠΔᐃ: "img/day-accessory100.png",
    ᐃΔⵠΔⵠⲆᐃ: "img/night-accessory100.png",
    ᐃⵠⵠⵠⵠⲆΔ: "img/day-accessory101.png",
    ⲆΔⲆⲆᐃⵠⲆ: "img/night-accessory101.png",
    ⲆⲆΔⲆΔᐃᐃ: "img/day-accessory102.png",
    ᐃⵠⵠΔᐃᐃᐃ: "img/night-accessory102.png",
    ΔⲆⵠᐃⵠᐃⲆ: "img/day-accessory103.png",
    ᐃⲆⵠⲆⵠⵠⵠ: "img/night-accessory103.png",
    ᐃⲆⵠⵠⵠⵠΔ: "img/day-accessory104.png",
    ⲆⵠΔⵠᐃΔΔ: "img/night-accessory104.png",
    ⵠΔΔⵠⵠⲆⲆ: "img/day-accessory105.png",
    ΔᐃⵠΔⲆᐃⲆ: "img/night-accessory105.png",
    ΔⵠᐃⵠᐃⲆⲆᐃⲆ: "img/day-accessory106.png",
    ΔⵠᐃΔΔⵠΔᐃᐃ: "img/night-accessory106.png",
    ⵠᐃⵠΔᐃⵠⲆⵠⲆ: "img/day-accessory107.png",
    ⲆᐃⵠⲆⲆΔᐃΔⲆ: "img/night-accessory107.png",
    ᐃⵠΔΔⵠᐃⲆ: "img/day-accessory82.png",
    ᐃⵠⵠᐃΔⵠᐃ: "img/night-accessory82.png",
    ΔⵠᐃⵠΔΔⲆ: "img/day-book0.png",
    ⵠΔⲆᐃΔᐃΔ: "img/night-book0.png",
    ⲆΔᐃΔⲆⵠⵠ: "img/day-book1.png",
    ⵠᐃᐃᐃⲆᐃΔ: "img/night-book1.png",
    ⲆⵠΔⵠⲆΔⲆ: "img/day-book2.png",
    ⵠⵠⵠⵠΔⵠΔ: "img/night-book2.png",
    ⲆᐃⲆⲆᐃⲆⵠ: "img/day-book3.png",
    ⵠΔⲆⵠⵠᐃΔ: "img/night-book3.png",
    ΔΔΔΔⵠⲆⲆ: "img/day-book4.png",
    ⵠΔⲆᐃᐃᐃΔ: "img/night-book4.png",
    ΔⵠᐃⵠΔⵠⲆ: "img/day-book5.png",
    ᐃᐃᐃΔΔᐃΔ: "img/night-book5.png",
    ⵠᐃΔⵠΔⲆⲆ: "img/day-book6.png",
    ᐃⵠΔᐃᐃⲆΔ: "img/night-book6.png",
    ᐃΔⲆⲆⲆⵠⲆ: "img/day-book7.png",
    ΔⲆⵠᐃⵠΔⲆ: "img/night-book7.png",
    ⲆᐃⵠᐃΔᐃᐃ: "img/day-book8.png",
    ΔᐃⲆⲆᐃⲆΔ: "img/night-book8.png",
    ⲆᐃᐃᐃⵠΔᐃ: "img/day-book9.png",
    ⵠΔᐃⵠⵠⵠⵠ: "img/night-book9.png",
    ⵠΔⵠⲆᐃΔⲆ: "img/day-book10.png",
    ΔΔᐃᐃᐃⵠᐃ: "img/night-book10.png",
    ΔΔΔΔⵠᐃⲆ: "img/day-book11.png",
    ⵠᐃⲆᐃⲆᐃΔ: "img/night-book11.png",
    ⵠᐃⵠⵠΔⲆⲆ: "img/day-book12.png",
    ⲆᐃⲆᐃⵠΔᐃ: "img/night-book12.png",
    ⲆΔΔⲆᐃⲆⲆ: "img/day-book13.png",
    ⵠⵠᐃⵠᐃⵠΔ: "img/night-book13.png",
    ᐃⲆⲆᐃᐃⲆᐃ: "img/day-book14.png",
    ΔⵠⲆΔⵠᐃΔ: "img/night-book14.png",
    ΔᐃΔᐃⲆⲆΔ: "img/day-book15.png",
    ⲆⲆⵠᐃⵠⲆᐃ: "img/night-book15.png",
    ΔΔΔⵠᐃᐃΔ: "img/day-book16.png",
    ΔᐃⲆΔⵠᐃΔ: "img/night-book16.png",
    ⵠΔⲆⵠᐃⵠⲆ: "img/day-book17.png",
    ᐃⵠⲆΔⲆᐃᐃ: "img/night-book17.png",
    ᐃᐃⲆᐃΔⵠⵠ: "img/day-book18.png",
    ΔⲆⲆΔⲆⵠᐃ: "img/night-book18.png",
    ⵠᐃⵠⵠΔⵠⵠ: "img/day-book19.png",
    ⲆⵠΔⲆᐃⵠⲆ: "img/night-book19.png",
    ⵠᐃⲆⲆᐃᐃᐃ: "img/day-book20.png",
    ᐃⵠᐃⲆΔⲆⲆ: "img/night-book20.png",
    ⵠⲆᐃⲆΔⵠΔ: "img/day-book21.png",
    ΔⵠᐃᐃⵠΔⲆ: "img/night-book21.png",
    ⲆᐃΔⵠⲆⲆΔ: "img/day-book22.png",
    ᐃΔᐃᐃᐃⲆⲆ: "img/night-book22.png",
    ΔΔⵠᐃᐃΔⵠ: "img/day-book23.png",
    ⲆΔᐃΔᐃⲆΔ: "img/night-book23.png",
    ⵠⵠΔΔⵠᐃⵠ: "img/day-book24.png",
    ᐃⵠⵠᐃⲆⲆᐃ: "img/night-book24.png",
    ΔΔᐃΔΔⲆⵠ: "img/day-book25.png",
    ⲆⲆΔⵠⲆⵠᐃ: "img/night-book25.png",
    ΔΔᐃᐃⵠᐃᐃ: "img/day-book26.png",
    ᐃΔΔⲆⲆⵠΔ: "img/night-book26.png",
    ᐃᐃⵠⵠᐃᐃⲆ: "img/day-book27.png",
    ᐃⲆΔᐃᐃΔΔ: "img/night-book27.png",
    ΔⲆⲆⵠᐃⵠⲆ: "img/day-book28.png",
    ᐃⵠΔⲆᐃⲆⲆ: "img/night-book28.png",
    ΔⲆⵠᐃⲆΔⲆ: "img/day-book29.png",
    ΔⵠΔⲆΔⵠⵠ: "img/night-book29.png",
    ⵠⵠⵠⲆⲆⲆᐃ: "img/day-book30.png",
    ⲆΔΔΔⵠΔⵠ: "img/night-book30.png",
    ⵠⲆΔⵠⲆᐃΔ: "img/day-book31.png",
    ⵠΔⵠΔⲆⵠΔ: "img/night-book31.png",
    ⵠΔΔⵠᐃΔᐃ: "img/day-book32.png",
    ⲆⵠⲆΔᐃΔᐃ: "img/night-book32.png",
    ΔᐃΔᐃⲆⲆⲆ: "img/day-book33.png",
    ᐃⵠᐃⵠΔᐃᐃ: "img/night-book33.png",
    ⵠⵠΔⲆΔᐃΔ: "img/day-book34.png",
    ⲆΔⵠⲆⲆⲆᐃ: "img/night-book34.png",
    ᐃᐃᐃⲆᐃⵠⵠ: "img/day-book35.png",
    ᐃΔⵠⲆᐃΔⲆ: "img/night-book35.png",
    ᐃⵠⲆⲆⲆᐃⲆ: "img/day-book36.png",
    ⲆⲆΔΔⵠᐃᐃ: "img/night-book36.png",
    ⵠⲆⵠⲆⲆᐃⵠⲆᐃ: "img/day-book37.png",
    ⵠⲆⲆΔᐃΔⲆΔⵠ: "img/night-book37.png",
    ΔⲆᐃⲆⲆⲆⵠ: "img/day-book38.png",
    ⵠᐃΔΔⲆΔᐃ: "img/night-book38.png",
    ⲆⲆⵠⲆΔΔⵠ: "img/day-book39.png",
    ⵠⲆΔᐃⲆⲆᐃ: "img/night-book39.png",
    ΔᐃⵠⲆⲆⲆΔ: "img/day-book40.png",
    ΔΔⵠΔⵠᐃⲆ: "img/night-book40.png",
    ⲆⲆᐃΔⵠⲆΔ: "img/day-book41.png",
    Δⵠⵠⵠᐃⵠⵠ: "img/night-book41.png",
    ⲆᐃⲆⵠⲆⲆⲆ: "img/day-book42.png",
    ⲆⲆᐃⵠᐃᐃᐃ: "img/night-book42.png",
    ⲆᐃΔᐃⵠⲆⲆ: "img/day-book43.png",
    ⵠⲆⵠⵠᐃᐃΔ: "img/night-book43.png",
    ᐃΔⵠᐃᐃⲆΔ: "img/day-book44.png",
    ΔᐃⵠΔⲆΔΔ: "img/night-book44.png",
    ⵠⵠⵠᐃᐃⲆⵠ: "img/day-book45.png",
    ⲆᐃⵠΔⵠᐃΔ: "img/night-book45.png",
    ΔΔⲆⲆⲆᐃⵠ: "img/day-book46.png",
    ⵠᐃΔⲆᐃΔⲆ: "img/night-book46.png",
    ⵠΔᐃΔΔᐃⲆ: "img/day-book47.png",
    ⲆΔΔΔᐃᐃⵠ: "img/night-book47.png",
    ⲆΔⲆᐃⲆᐃΔ: "img/day-book48.png",
    ⲆⵠΔⵠⲆΔⵠ: "img/night-book48.png",
    ⵠⵠΔΔⲆΔᐃ: "img/day-book49.png",
    ᐃⲆⲆⲆΔⲆⵠ: "img/night-book49.png",
    ΔᐃᐃΔᐃΔⵠ: "img/day-book50.png",
    ΔⲆΔⵠᐃᐃⵠ: "img/night-book50.png",
    ⵠⵠⵠⲆΔΔᐃ: "img/day-crate1.png",
    ⵠⲆⵠᐃⵠⵠⵠ: "img/night-crate1.png",
    ΔΔΔᐃΔΔⲆ: "img/day-crate2.png",
    ⲆΔᐃΔⲆΔⵠ: "img/night-crate2.png",
    ⲆᐃᐃΔΔΔⵠ: "img/day-crate3.png",
    ⵠΔΔⲆⵠᐃⵠ: "img/night-crate3.png",
    ⵠⲆᐃⵠᐃⲆⵠ: "img/day-crate4.png",
    ΔⲆⲆⵠⲆᐃⲆ: "img/night-crate4.png",
    ⲆⵠⵠⲆΔⲆⲆ: "img/day-crate5.png",
    ΔΔⵠⵠΔⲆⲆ: "img/night-crate5.png",
    ⲆⵠⲆⵠᐃⵠⵠ: "img/day-crate6.png",
    ᐃΔΔⵠᐃᐃᐃ: "img/night-crate6.png",
    ⵠⲆΔΔΔᐃⵠ: "img/day-crate7.png",
    ᐃⲆⵠⲆᐃΔΔ: "img/night-crate7.png",
    ⵠⲆⵠΔⵠⲆⲆ: "img/day-crate8.png",
    ⲆⵠΔΔΔⵠΔ: "img/night-crate8.png",
    ⵠⲆᐃΔΔⲆⵠ: "img/day-crate9.png",
    ⵠᐃᐃΔⵠⵠⲆ: "img/night-crate9.png",
    ᐃᐃⵠⲆᐃⵠΔ: "img/day-crate10.png",
    ⵠⵠⵠΔⲆᐃΔ: "img/night-crate10.png",
    ⲆᐃⲆⲆⵠⵠΔ: "img/day-crate11.png",
    ⲆᐃΔΔᐃΔΔ: "img/night-crate11.png",
    ΔⵠᐃᐃⲆΔᐃ: "img/day-crate12.png",
    ⵠΔᐃᐃⲆᐃⵠ: "img/night-crate12.png",
    ⵠⵠⵠⲆⵠⵠᐃ: "img/day-crate13.png",
    ΔΔΔⲆᐃⵠᐃ: "img/night-crate13.png",
    ΔΔΔⵠᐃΔⵠ: "img/day-crate14.png",
    ᐃⵠΔⲆⵠᐃᐃ: "img/night-crate14.png",
    ᐃᐃⲆᐃᐃᐃⵠ: "img/day-crate15.png",
    ΔΔᐃⵠⲆⲆⵠ: "img/night-crate15.png",
    ⲆᐃⲆⵠⲆΔⲆ: "img/day-crate16.png",
    ⵠᐃΔᐃᐃᐃⵠ: "img/night-crate16.png",
    ᐃᐃΔⲆⵠⲆᐃ: "img/day-crate17.png",
    ᐃᐃΔⲆⲆⵠᐃ: "img/night-crate17.png",
    ᐃⲆᐃᐃΔΔΔ: "img/day-crate18.png",
    ⵠⵠΔⵠᐃⲆΔ: "img/night-crate18.png",
    ⵠⵠᐃΔⵠⵠⵠ: "img/day-crate19.png",
    ᐃᐃⵠⵠᐃⵠⵠ: "img/night-crate19.png",
    ΔᐃⵠⲆⵠⲆⲆ: "img/day-crate20.png",
    ᐃΔⵠᐃΔΔᐃ: "img/night-crate20.png",
    ⲆΔⵠΔⵠⵠΔ: "img/day-crate21.png",
    ᐃᐃΔΔᐃⵠⵠ: "img/night-crate21.png",
    ΔⲆΔⲆΔΔⲆ: "img/day-crate22.png",
    ΔᐃΔΔΔⵠⵠ: "img/night-crate22.png",
    ᐃᐃᐃΔⵠⵠΔ: "img/day-crate23.png",
    ⵠᐃᐃΔᐃᐃⲆ: "img/night-crate23.png",
    ⵠᐃⵠΔⲆΔᐃ: "img/day-crate24.png",
    ⵠᐃΔᐃΔⵠᐃ: "img/night-crate24.png",
    ⲆⲆⲆᐃⵠⵠⲆ: "img/day-crate25.png",
    ⲆᐃⲆᐃᐃⵠΔ: "img/night-crate25.png",
    ᐃΔⵠⲆⲆⲆⵠ: "img/day-crate26.png",
    ᐃⵠᐃΔⵠⲆΔ: "img/night-crate26.png",
    ΔⲆᐃⵠⵠⵠΔ: "img/day-crate27.png",
    ⵠⲆⵠᐃⵠΔⵠ: "img/night-crate27.png",
    ΔⵠΔᐃⲆⲆΔ: "img/day-crate28.png",
    ⵠΔⵠᐃΔⵠⲆ: "img/night-crate28.png",
    ᐃΔΔΔⵠⲆⲆ: "img/day-crate29.png",
    ΔᐃΔΔΔᐃⲆ: "img/night-crate29.png",
    ⵠᐃⲆᐃΔΔᐃ: "img/day-crate30.png",
    ΔⲆΔΔΔᐃᐃ: "img/night-crate30.png",
    ⵠⵠΔⵠΔᐃⲆ: "img/day-crate31.png",
    Δⵠᐃⵠⵠᐃⵠ: "img/night-crate31.png",
    ⲆᐃⲆΔⵠⵠᐃ: "img/day-crate32.png",
    ⵠⲆΔΔΔⲆⲆ: "img/night-crate32.png",
    ΔᐃᐃⲆⵠⲆⵠ: "img/day-crate33.png",
    ⵠΔⲆΔᐃⵠⲆ: "img/night-crate33.png",
    ΔΔⲆᐃⵠⵠΔ: "img/day-crate34.png",
    ᐃᐃⲆΔᐃΔᐃ: "img/night-crate34.png",
    ΔⲆΔΔⵠⵠⲆ: "img/day-crate35.png",
    ᐃⲆⵠΔΔᐃⵠ: "img/night-crate35.png",
    ᐃⲆᐃᐃΔᐃΔ: "img/day-crate36.png",
    ΔᐃᐃᐃᐃⲆⵠ: "img/night-crate36.png",
    ⲆΔⲆΔΔᐃⵠ: "img/day-crate37.png",
    ΔⲆΔΔᐃⲆⲆ: "img/night-crate37.png",
    ⲆⲆΔⵠᐃᐃⲆ: "img/day-crate38.png",
    ᐃᐃΔᐃⵠⵠᐃ: "img/night-crate38.png",
    ⵠⲆⲆΔΔⵠⲆ: "img/day-crate39.png",
    ⲆⵠⵠⲆΔⲆΔ: "img/night-crate39.png",
    ⲆⵠⵠΔⵠΔᐃ: "img/day-crate40.png",
    ⵠⲆᐃⵠⵠᐃᐃ: "img/night-crate40.png",
    ᐃⲆᐃᐃⵠⵠⵠ: "img/day-crate41.png",
    ᐃⵠΔᐃⵠⲆⵠ: "img/night-crate41.png",
    ⲆⵠⵠΔⵠⵠΔ: "img/day-crate42.png",
    ΔⵠΔΔΔⲆⲆ: "img/night-crate42.png",
    ⵠᐃⲆΔᐃⵠΔ: "img/day-crate43.png",
    ΔΔᐃᐃΔⲆⵠ: "img/night-crate43.png",
    ⲆⲆⲆᐃᐃΔΔ: "img/day-crate44.png",
    Ⲇⵠⵠᐃⵠⵠⵠ: "img/night-crate44.png",
    ΔⲆΔΔᐃΔⲆ: "img/day-crate45.png",
    ⲆΔΔⲆΔⵠⲆ: "img/night-crate45.png",
    ᐃⵠⲆⲆᐃᐃᐃ: "img/day-crate46.png",
    ᐃᐃⲆΔΔΔⲆ: "img/night-crate46.png",
    ᐃΔΔⵠⵠᐃⲆ: "img/day-crate47.png",
    ΔᐃΔⲆⵠΔⲆ: "img/night-crate47.png",
    ⵠⵠⵠᐃⵠΔⲆ: "img/day-crate48.png",
    ⵠΔⲆᐃⵠⲆΔ: "img/night-crate48.png",
    ⵠⵠⲆⲆⵠⵠⵠ: "img/day-crate49.png",
    ⵠⲆΔΔⵠⲆⵠ: "img/night-crate49.png",
    ΔⵠᐃⵠⵠᐃΔ: "img/day-crate50.png",
    ⲆᐃΔᐃΔΔᐃ: "img/night-crate50.png",
    ᐃΔᐃⵠΔⵠⲆ: "img/day-crate51.png",
    ᐃᐃⵠⵠᐃⵠⲆ: "img/night-crate51.png",
    ⲆΔᐃΔΔΔᐃ: "img/day-crate52.png",
    ⲆᐃΔᐃⵠⵠΔ: "img/night-crate52.png",
    ⲆΔⵠⵠⵠΔΔ: "img/day-crate53.png",
    ΔΔⲆⲆΔⵠⲆ: "img/night-crate53.png",
    ⲆΔⵠΔⵠᐃⲆ: "img/day-crate54.png",
    ⲆⲆⲆⲆⲆⲆⲆ: "img/night-crate54.png",
    ⲆᐃᐃⵠᐃⲆΔ: "img/day-crate55.png",
    ᐃⲆⲆᐃᐃⵠΔ: "img/night-crate55.png",
    ⲆⲆⲆⵠⲆᐃᐃ: "img/day-crate56.png",
    ⲆᐃⵠⲆⲆⲆⵠ: "img/night-crate56.png",
    ⲆΔⵠⵠⵠⲆⲆ: "img/day-crate57.png",
    ⵠⵠⲆΔⲆΔᐃ: "img/night-crate57.png",
    ⵠᐃⲆᐃΔⲆⵠ: "img/day-crate58.png",
    ΔⵠⵠⲆⵠⵠᐃ: "img/night-crate58.png",
    ⵠⵠⲆⵠᐃᐃᐃ: "img/day-crate59.png",
    ⵠⵠⲆⵠΔⲆⲆ: "img/night-crate59.png",
    ΔΔᐃᐃᐃⵠⵠ: "img/day-crate60.png",
    ᐃᐃΔΔΔⵠᐃ: "img/night-crate60.png",
    ⵠᐃΔᐃᐃⵠⵠ: "img/day-crate61.png",
    ⵠᐃΔⲆᐃⲆΔ: "img/night-crate61.png",
    ⵠΔⲆΔⵠⲆΔ: "img/day-crate62.png",
    ᐃᐃⲆᐃⵠΔᐃ: "img/night-crate62.png",
    ᐃⵠΔΔⵠⵠΔ: "img/day-crate63.png",
    ᐃΔΔΔⲆᐃⲆ: "img/night-crate63.png",
    ⵠⲆⲆⲆΔⲆⲆ: "img/day-crate64.png",
    ΔⵠⲆⲆⵠᐃⲆ: "img/night-crate64.png",
    ΔΔⲆⵠΔᐃᐃ: "img/day-crate65.png",
    ᐃⲆΔᐃⲆⲆᐃ: "img/night-crate65.png",
    ᐃᐃᐃⲆⲆᐃᐃ: "img/day-crate66.png",
    ⲆΔΔᐃⲆⲆᐃ: "img/night-crate66.png",
    ᐃᐃⲆⵠᐃΔΔ: "img/day-crate67.png",
    ⲆΔΔⵠᐃᐃⲆ: "img/night-crate67.png",
    ⵠⲆᐃΔⵠⲆⲆ: "img/day-crate68.png",
    ᐃⲆΔᐃΔΔᐃ: "img/night-crate68.png",
    ᐃᐃⵠᐃⵠᐃⵠ: "img/day-crate69.png",
    ⵠⵠⲆΔΔⲆΔ: "img/night-crate69.png",
    ⲆⵠᐃΔᐃΔⲆ: "img/day-crate70.png",
    ⵠΔΔᐃΔⵠⲆ: "img/night-crate70.png",
    ΔᐃᐃΔᐃⲆᐃ: "img/day-crate71.png",
    ⲆⵠⲆΔΔⵠᐃ: "img/night-crate71.png",
    ᐃⵠΔᐃⲆⵠᐃ: "img/day-crate72.png",
    ⵠⵠⲆⵠᐃᐃⵠ: "img/night-crate72.png",
    ⵠΔΔᐃᐃΔᐃ: "img/day-crate73.png",
    ⲆᐃᐃΔΔΔΔ: "img/night-crate73.png",
    ᐃΔΔᐃⵠⵠΔ: "img/day-crate74.png",
    ⲆᐃᐃΔⲆⵠᐃ: "img/night-crate74.png",
    ⲆᐃⵠⲆΔⲆⵠ: "img/day-crate75.png",
    ᐃⵠᐃⲆᐃΔΔ: "img/night-crate75.png",
    ⵠⵠⵠΔⵠᐃᐃ: "img/day-crate76.png",
    ⲆᐃᐃⵠⲆΔΔ: "img/night-crate76.png",
    ⲆᐃⲆᐃⲆⵠⲆ: "img/day-crate77.png",
    ⲆᐃΔᐃⵠΔΔ: "img/night-crate77.png",
    ᐃⲆⵠⵠⵠΔⵠ: "img/day-crate78.png",
    ᐃΔⵠⲆⲆᐃᐃ: "img/night-crate78.png",
    ΔΔᐃⲆΔᐃⵠ: "img/day-crate79.png",
    ΔᐃⲆᐃᐃᐃᐃ: "img/night-crate79.png",
    ΔᐃⲆⵠⵠⵠΔ: "img/day-herb0.png",
    ΔⲆⲆⵠᐃⲆᐃ: "img/day-herb1.png",
    ΔΔΔⵠΔΔᐃ: "img/day-herb2.png",
    ΔΔΔᐃΔΔΔ: "img/day-herb3.png",
    ⵠⵠⲆΔⲆⲆΔ: "img/day-herb4.png",
    ΔⲆΔⵠᐃⵠΔ: "img/day-herb5.png",
    Ⲇⵠⵠⵠⵠⵠᐃ: "img/day-herb6.png",
    ⲆⲆⵠᐃᐃᐃⵠ: "img/day-herb7.png",
    ΔΔⲆᐃⲆᐃⲆ: "img/day-herb8.png",
    ᐃⵠΔⲆΔⲆⵠ: "img/day-herb9.png",
    ⲆᐃᐃⲆᐃⵠⲆ: "img/day-herb10.png",
    ⵠΔΔᐃⵠⵠⲆ: "img/day-herb11.png",
    ΔΔⲆᐃⵠΔΔ: "img/day-herb12.png",
    ΔΔᐃⵠΔΔᐃ: "img/day-herb13.png",
    ᐃⲆⲆⲆⲆⵠΔ: "img/day-herb14.png",
    ΔⵠⲆΔⵠΔΔ: "img/day-herb15.png",
    ΔⲆⵠΔⲆⵠᐃ: "img/day-shell0.png",
    ⵠⲆⵠⵠⲆΔΔ: "img/day-shell1.png",
    ⲆⵠᐃⵠΔᐃΔ: "img/day-shell2.png",
    ᐃⵠⲆΔᐃᐃⲆ: "img/day-leaf1.png",
    ΔⲆⵠⲆⵠⲆⵠ: "img/day-leaf2.png",
    ⵠΔⵠⲆⲆΔⲆ: "img/day-leaf3.png",
    ⵠⵠⲆΔⵠⵠⵠ: "img/day-leaf4.png",
    ᐃΔⲆⵠⲆⲆⵠ: "img/day-leaf5.png",
    ⵠΔⲆᐃᐃΔᐃ: "img/day-leaf6.png",
    ᐃΔΔᐃᐃⲆΔ: "img/day-leaf7.png",
    ⵠⵠΔΔⵠᐃΔ: "img/day-leaf8.png",
    ΔⵠΔⲆⵠⲆⵠ: "img/day-rock0.png",
    ΔΔⵠⵠⲆᐃⲆ: "img/day-rock1.png",
    ΔⵠΔΔΔᐃⵠ: "img/day-rock2.png",
    ⵠⲆⲆⲆᐃⲆⵠ: "img/day-rock3.png",
    ΔΔⵠᐃⵠⵠⵠ: "img/day-rock4.png",
    ΔⵠᐃⵠⲆⲆᐃ: "img/day-rock5.png",
    ⲆⲆᐃᐃᐃΔⲆ: "img/day-rock6.png",
    ⲆⵠᐃΔⲆⲆΔ: "img/day-rock7.png",
    ᐃᐃᐃᐃᐃᐃᐃ: "img/day-rock8.png",
    ΔΔΔᐃⵠᐃᐃ: "img/day-rock9.png",
    ⵠⵠⵠⲆΔᐃⵠ: "img/day-rock10.png",
    ᐃΔᐃⲆᐃᐃⵠ: "img/day-rock11.png",
    ᐃⵠⲆΔⵠⲆΔ: "img/day-rock12.png",
    ᐃⲆΔΔⲆⲆⲆ: "img/day-rock13.png",
    ⵠⵠΔⲆᐃΔⲆ: "img/day-flower1.png",
    ⵠΔΔΔⲆᐃᐃ: "img/day-flower2.png",
    ᐃⵠⵠΔΔⵠⲆ: "img/day-flower3.png",
    ⲆᐃᐃⵠΔⲆⲆ: "img/day-flower4.png",
    ⵠᐃⵠᐃΔΔⵠ: "img/day-flower5.png",
    ᐃΔᐃⵠⲆᐃΔ: "img/day-flower6.png",
    ᐃᐃΔⲆⵠⲆΔ: "img/day-flower7.png",
    ⲆΔΔⵠⲆᐃⲆ: "img/day-flower8.png",
    ⲆⲆΔⲆⲆΔⲆ: "img/day-flower9.png",
    ΔⵠᐃⵠⵠΔᐃ: "img/day-herb16.png",
    ᐃⵠⵠᐃᐃⵠΔ: "img/day-herb17.png",
    ⵠΔΔⵠⲆΔⵠ: "img/day-herb18.png",
    ⵠᐃⵠⵠΔᐃᐃ: "img/day-herb19.png",
    ᐃΔⲆᐃᐃⵠⵠ: "img/day-herb20.png",
    ΔⵠΔΔⲆⵠΔ: "img/day-herb21.png",
    ΔΔⲆᐃⲆᐃΔ: "img/night-herb0.png",
    ΔΔᐃⲆᐃᐃⵠ: "img/night-herb1.png",
    ΔΔᐃΔΔᐃᐃ: "img/night-herb2.png",
    ΔⲆᐃⵠⲆᐃᐃ: "img/night-herb3.png",
    ᐃΔΔᐃⵠⵠⲆ: "img/night-herb4.png",
    ΔⲆΔᐃΔᐃΔ: "img/night-herb5.png",
    ⵠⲆΔΔⵠⵠΔ: "img/night-herb6.png",
    ⵠⲆᐃᐃⵠⵠΔ: "img/night-herb7.png",
    ⲆⵠⵠΔⲆᐃⵠ: "img/night-herb8.png",
    ΔⵠⵠΔΔⵠⵠ: "img/night-herb9.png",
    ΔᐃΔⵠⵠⵠⵠ: "img/night-herb10.png",
    ⲆΔⲆⵠΔⵠⵠ: "img/night-herb11.png",
    ⵠⲆΔⵠΔⵠⲆ: "img/night-herb12.png",
    ᐃᐃⲆⲆᐃᐃΔ: "img/night-herb13.png",
    ⲆⲆⲆⵠⲆᐃⲆ: "img/night-herb14.png",
    ᐃⲆᐃΔⵠⲆΔ: "img/night-herb15.png",
    ⲆᐃⵠᐃⲆᐃᐃ: "img/night-shell0.png",
    ⵠΔⵠΔΔΔⲆ: "img/night-shell1.png",
    ΔⲆⲆΔⵠⵠΔ: "img/night-shell2.png",
    ᐃⲆᐃᐃΔⵠᐃ: "img/night-leaf1.png",
    ⲆⵠΔⵠⵠⵠⲆ: "img/night-leaf2.png",
    ΔⵠΔᐃⵠᐃⲆ: "img/night-leaf3.png",
    ΔⵠⵠⵠⲆⵠⲆ: "img/night-leaf4.png",
    ΔΔⵠⲆᐃΔⵠ: "img/night-leaf5.png",
    ⵠⲆⵠⵠⲆⲆΔ: "img/night-leaf6.png",
    ⵠⵠΔᐃⵠⲆᐃ: "img/night-leaf7.png",
    ⵠⲆⲆⵠᐃᐃΔ: "img/night-leaf8.png",
    ΔⲆᐃΔᐃᐃⲆ: "img/night-rock0.png",
    ΔⵠⵠⵠⲆⵠⵠ: "img/night-rock1.png",
    ᐃᐃΔΔⲆΔⵠ: "img/night-rock2.png",
    ᐃΔⲆⵠΔᐃΔ: "img/night-rock3.png",
    ⲆⲆΔⲆΔⵠᐃ: "img/night-rock4.png",
    ⵠⲆᐃΔⵠⲆᐃ: "img/night-rock5.png",
    ⵠⲆⵠᐃᐃⲆⲆ: "img/night-rock6.png",
    ⵠΔⲆⲆⲆⵠⵠ: "img/night-rock7.png",
    ΔⲆᐃᐃⵠⵠⲆ: "img/night-rock8.png",
    ⵠᐃⲆᐃⲆⵠΔ: "img/night-rock9.png",
    ⲆᐃⵠΔᐃⲆⵠ: "img/night-rock10.png",
    ⵠⲆⵠᐃⵠᐃᐃ: "img/night-rock11.png",
    ΔⵠⵠⵠᐃᐃⲆ: "img/night-rock12.png",
    ⲆΔΔΔᐃⵠⲆ: "img/night-rock13.png",
    ⲆⲆᐃⵠᐃⲆⲆ: "img/night-flower1.png",
    ᐃⵠΔᐃΔᐃⲆ: "img/night-flower2.png",
    ᐃᐃΔⵠᐃΔΔ: "img/night-flower3.png",
    ΔᐃⵠⲆΔΔΔ: "img/night-flower4.png",
    ⵠⲆⲆᐃᐃⲆⲆ: "img/night-flower5.png",
    ⵠⲆⵠⵠⲆᐃᐃ: "img/night-flower6.png",
    ⵠⵠᐃⲆΔⲆᐃ: "img/night-flower7.png",
    ⲆΔΔᐃᐃⵠᐃ: "img/night-flower8.png",
    ΔⵠᐃⵠⲆⵠⲆ: "img/night-flower9.png",
    ΔΔΔⲆⵠⲆΔ: "img/night-herb16.png",
    ᐃΔⵠⲆᐃΔⵠ: "img/night-herb17.png",
    ᐃⲆΔᐃΔⲆⲆ: "img/night-herb18.png",
    ᐃⵠᐃⲆᐃⲆᐃ: "img/night-herb19.png",
    ⲆⵠΔΔⵠᐃⲆ: "img/night-herb20.png",
    ⲆᐃᐃᐃⲆᐃᐃ: "img/night-herb21.png",
    ᐃⵠΔⲆΔⵠⲆ: "img/day-river000-010-000.png",
    ⵠᐃᐃⲆⲆⵠᐃ: "img/day-river000-010-010.png",
    ⲆⵠᐃⲆᐃᐃⲆ: "img/day-river000-011-000.png",
    ⵠᐃⵠⵠᐃᐃⲆ: "img/day-river000-011-010.png",
    ⲆⲆΔⲆΔⲆΔ: "img/day-river000-011-011.png",
    ΔⲆⲆⲆⲆⵠⲆ: "img/day-river000-110-000.png",
    ⵠⲆⵠⲆⵠΔⵠ: "img/day-river000-110-010.png",
    ⵠᐃⲆΔᐃⲆⵠ: "img/day-river000-110-110.png",
    ᐃᐃΔⲆⵠΔΔ: "img/day-river000-111-000.png",
    ⲆⵠⵠΔⵠᐃᐃ: "img/day-river000-111-010.png",
    ᐃⲆⵠⵠᐃⲆⲆ: "img/day-river000-111-011.png",
    ᐃΔΔⵠⲆᐃΔ: "img/day-river000-111-110.png",
    ⵠⲆⲆΔᐃⵠᐃ: "img/day-river000-111-111.png",
    ᐃⲆⵠⲆΔⲆΔ: "img/day-river010-010-000.png",
    ⵠᐃⵠⲆᐃⵠᐃ: "img/day-river010-010-010.png",
    ⵠⲆⲆᐃΔΔΔ: "img/day-river010-011-000.png",
    ΔⵠᐃΔⵠⲆⲆ: "img/day-river010-011-010.png",
    ᐃⵠΔⲆᐃⲆΔ: "img/day-river010-011-011.png",
    ΔⲆΔⵠΔΔⲆ: "img/day-river010-110-000.png",
    ᐃΔⵠΔⲆᐃⵠ: "img/day-river010-110-010.png",
    ⵠⵠⵠⵠⲆᐃⲆ: "img/day-river010-110-110.png",
    ᐃⵠΔᐃⵠΔΔ: "img/day-river010-111-000.png",
    ⲆⲆⵠΔⵠᐃⵠ: "img/day-river010-111-010.png",
    ΔΔⵠⲆΔⵠⵠ: "img/day-river010-111-011.png",
    ᐃⵠⵠᐃᐃⲆᐃ: "img/day-river010-111-110.png",
    ᐃⲆᐃⲆᐃΔᐃ: "img/day-river010-111-111.png",
    ⲆᐃᐃⲆⲆⲆⲆ: "img/day-river011-011-000.png",
    ⲆᐃⲆⵠⲆⵠᐃ: "img/day-river011-011-010.png",
    ⲆΔΔⵠⵠΔᐃ: "img/day-river011-011-011.png",
    ⲆᐃⲆΔⵠΔᐃ: "img/day-river011-111-000.png",
    ⵠⲆⲆᐃΔⲆΔ: "img/day-river011-111-010.png",
    ⲆⲆΔⲆΔΔⲆ: "img/day-river011-111-011.png",
    ⲆΔᐃΔⲆⲆᐃ: "img/day-river011-111-110.png",
    ΔⵠⵠᐃᐃⲆⵠ: "img/day-river011-111-111.png",
    ⲆⲆᐃΔⵠΔᐃ: "img/day-river110-110-000.png",
    ⲆⲆΔⲆⲆⵠⲆ: "img/day-river110-110-010.png",
    ⲆᐃΔⲆⵠⵠᐃ: "img/day-river110-110-110.png",
    ⲆΔᐃⲆᐃΔΔ: "img/day-river110-111-000.png",
    ⵠᐃⵠΔⵠⲆΔ: "img/day-river110-111-010.png",
    ᐃΔⲆⵠⵠⲆᐃ: "img/day-river110-111-011.png",
    ⲆᐃⲆⵠΔⵠᐃ: "img/day-river110-111-110.png",
    ᐃⵠⲆⵠΔⲆⲆ: "img/day-river110-111-111.png",
    ᐃⵠΔᐃᐃᐃΔ: "img/day-river111-111-011.png",
    ᐃⵠⵠΔⵠⲆⵠ: "img/day-river111-111-110.png",
    ᐃⵠΔᐃᐃᐃΔ: "img/day-river111-111-011.png",
    ⲆⵠΔΔΔⵠⲆ: "img/day-river111-111-000.png",
    ᐃᐃᐃⵠⲆᐃᐃ: "img/day-river111-111-111.png",
    ⵠΔⵠᐃᐃⲆⵠ: "img/day-river111-111-010.png",
    ᐃⵠᐃᐃᐃⵠΔ: "img/night-river000-010-000.png",
    ΔΔΔⵠᐃⵠⵠ: "img/night-river000-010-010.png",
    ΔⲆⲆΔⲆΔⲆ: "img/night-river000-011-000.png",
    ⵠⲆⲆᐃᐃⵠᐃ: "img/night-river000-011-010.png",
    ⵠⵠᐃᐃⵠⲆᐃ: "img/night-river000-011-011.png",
    ᐃⲆⵠᐃⲆΔΔ: "img/night-river000-110-000.png",
    ⵠⵠᐃᐃΔⵠⵠ: "img/night-river000-110-010.png",
    ΔⵠⲆⲆⲆᐃΔ: "img/night-river000-110-110.png",
    ΔᐃⵠⲆΔΔⵠ: "img/night-river000-111-000.png",
    ΔⲆΔⲆᐃⵠΔ: "img/night-river000-111-010.png",
    ΔⲆⵠⵠⵠⲆᐃ: "img/night-river000-111-011.png",
    ⵠⲆⲆΔᐃΔᐃ: "img/night-river000-111-110.png",
    ⲆⵠΔⵠΔΔΔ: "img/night-river000-111-111.png",
    ᐃᐃⵠⲆⵠⲆⲆ: "img/night-river010-010-000.png",
    ΔⵠΔΔⵠⵠⵠ: "img/night-river010-010-010.png",
    ΔΔⲆⵠⲆᐃⵠ: "img/night-river010-011-000.png",
    ᐃΔⵠΔⵠΔⵠ: "img/night-river010-011-010.png",
    ΔΔΔⵠⵠΔᐃ: "img/night-river010-011-011.png",
    ⲆⵠΔⵠⵠᐃΔ: "img/night-river010-110-000.png",
    ᐃΔⵠⲆΔΔᐃ: "img/night-river010-110-010.png",
    ᐃᐃⵠⵠⵠⲆᐃ: "img/night-river010-110-110.png",
    Δⵠⵠⵠᐃⵠᐃ: "img/night-river010-111-000.png",
    ⲆᐃⵠⲆΔⲆⲆ: "img/night-river010-111-010.png",
    ᐃᐃⵠⲆⲆⲆⵠ: "img/night-river010-111-011.png",
    ⵠⵠⵠⵠⵠⲆᐃ: "img/night-river010-111-110.png",
    ΔΔⲆⲆⲆⲆᐃ: "img/night-river010-111-111.png",
    ⲆⵠΔⲆᐃΔᐃ: "img/night-river011-011-000.png",
    ⵠⲆⲆᐃΔΔⲆ: "img/night-river011-011-010.png",
    ⲆⵠᐃⲆᐃΔⵠ: "img/night-river011-011-011.png",
    ⵠΔⲆⵠΔⵠΔ: "img/night-river011-111-000.png",
    ⵠⲆⵠΔᐃⵠⲆ: "img/night-river011-111-010.png",
    ΔⵠⵠⲆΔΔⵠ: "img/night-river011-111-011.png",
    ⵠⵠΔⵠᐃⵠⵠ: "img/night-river011-111-110.png",
    ⵠΔⲆⲆᐃⵠⵠ: "img/night-river011-111-111.png",
    ⲆⵠⲆⵠⲆΔⲆ: "img/night-river110-110-000.png",
    ᐃᐃΔᐃⵠΔᐃ: "img/night-river110-110-010.png",
    ⵠⲆⲆᐃΔᐃⵠ: "img/night-river110-110-110.png",
    ΔⵠΔΔΔΔⵠ: "img/night-river110-111-000.png",
    ΔⲆΔⲆᐃᐃⲆ: "img/night-river110-111-010.png",
    ΔⲆⵠⵠⵠᐃⵠ: "img/night-river110-111-011.png",
    ⵠᐃᐃⵠᐃΔΔ: "img/night-river110-111-110.png",
    ᐃΔᐃᐃⵠᐃᐃ: "img/night-river110-111-111.png",
    ᐃΔΔⵠⵠΔⵠ: "img/night-river111-111-011.png",
    ΔⵠΔⲆⵠⲆⲆ: "img/night-river111-111-110.png",
    ᐃΔΔⵠⵠΔⵠ: "img/night-river111-111-011.png",
    ⵠⲆⲆᐃⲆΔⲆ: "img/night-river111-111-000.png",
    ⲆⲆⵠⵠΔᐃᐃ: "img/night-river111-111-111.png",
    ⲆⵠΔᐃⲆⲆΔ: "img/night-river111-111-010.png",
    ᐃⵠⵠⲆΔᐃⵠ: "img/day-pebblecompo1.png",
    ΔᐃᐃΔⲆ: "img/day-pebblecompo2.png",
    ΔΔᐃΔⲆ: "img/day-pebblecompo3.png",
    ⲆᐃΔΔⲆⲆᐃ: "img/day-pebblecompo4.png",
    ⵠⲆᐃⵠΔ: "img/day-pebblecompo5.png",
    ᐃΔⵠⵠⲆ: "img/day-pebblecompo6.png",
    ᐃⵠⵠⲆⲆ: "img/day-pebblecompo7.png",
    ⵠⵠᐃΔⲆⵠⵠ: "img/day-pebblecompo8.png",
    ⵠΔΔⵠⵠⲆΔ: "img/day-pebblecompo9.png",
    ᐃⲆⵠΔⲆⵠⵠ: "img/day-pebblecompo10.png",
    ⲆⲆᐃⲆⵠ: "img/day-pebblecompo11.png",
    ⵠᐃΔⲆⵠΔⵠ: "img/day-pebblecompo12.png",
    ⵠΔᐃⵠⵠᐃᐃ: "img/day-pebblecompo13.png",
    ᐃⵠⲆᐃΔΔⲆ: "img/day-pebblecompo14.png",
    ⵠⵠⲆⲆⲆⵠᐃ: "img/day-pebblecompo15.png",
    ᐃⵠᐃⵠⲆⲆⲆ: "img/day-pebblecompo16.png",
    ΔⲆⵠⵠΔ: "img/day-pebblecompo17.png",
    ⲆⲆΔΔⵠᐃⲆ: "img/day-pebblecompo18.png",
    ΔΔΔⲆⵠΔᐃ: "img/day-pebblecompo19.png",
    Ⲇⵠᐃᐃᐃ: "img/day-pebblecompo20.png",
    ᐃΔⵠⲆΔ: "img/day-pebblecompo21.png",
    ᐃⲆᐃΔᐃⲆᐃ: "img/day-pebblecompo22.png",
    ⵠⲆⵠΔΔΔᐃ: "img/day-pebblecompo23.png",
    ⲆⲆⵠⲆΔⲆⲆ: "img/day-pebblecompo24.png",
    ᐃⲆⵠⲆᐃ: "img/day-pebblecompo25.png",
    ⲆΔⲆⵠΔ: "img/day-pebblecompo26.png",
    ᐃⲆΔΔᐃⲆᐃ: "img/day-pebblecompo27.png",
    ᐃⵠΔⲆⵠ: "img/day-pebblecompo28.png",
    ⲆΔΔⲆⵠⲆΔ: "img/night-pebblecompo1.png",
    ⵠⵠⵠᐃⵠ: "img/night-pebblecompo2.png",
    ⵠⲆⲆⵠΔ: "img/night-pebblecompo3.png",
    ᐃᐃΔΔᐃΔᐃ: "img/night-pebblecompo4.png",
    ⲆΔΔⵠᐃ: "img/night-pebblecompo5.png",
    ᐃⲆᐃᐃⵠ: "img/night-pebblecompo6.png",
    ᐃΔᐃⵠΔ: "img/night-pebblecompo7.png",
    ⵠΔᐃⲆᐃⵠΔ: "img/night-pebblecompo8.png",
    ⲆᐃⲆΔΔⲆᐃ: "img/night-pebblecompo9.png",
    ⵠᐃⵠΔⲆⵠⲆ: "img/night-pebblecompo10.png",
    ᐃΔⲆᐃΔ: "img/night-pebblecompo11.png",
    ⵠⵠᐃⵠⲆΔᐃ: "img/night-pebblecompo12.png",
    Ⲇⵠᐃᐃᐃᐃⵠ: "img/night-pebblecompo13.png",
    ⲆΔⲆᐃⲆᐃⵠ: "img/night-pebblecompo14.png",
    ᐃⵠⲆⲆⵠⲆΔ: "img/night-pebblecompo15.png",
    ⵠⵠᐃⲆⲆᐃⲆ: "img/night-pebblecompo16.png",
    ΔⵠΔⲆⵠ: "img/night-pebblecompo17.png",
    ⲆⵠⵠⲆⲆⲆⲆ: "img/night-pebblecompo18.png",
    ΔᐃⵠⲆⵠΔⵠ: "img/night-pebblecompo19.png",
    ᐃⲆᐃⲆⲆ: "img/night-pebblecompo20.png",
    ⲆᐃⲆᐃⵠ: "img/night-pebblecompo21.png",
    ⵠⲆΔⵠΔΔⵠ: "img/night-pebblecompo22.png",
    ᐃⲆⵠΔⲆΔᐃ: "img/night-pebblecompo23.png",
    ΔⲆᐃᐃⲆΔΔ: "img/night-pebblecompo24.png",
    ⵠⲆᐃΔΔ: "img/night-pebblecompo25.png",
    ⲆΔⵠⲆΔ: "img/night-pebblecompo26.png",
    ΔⵠᐃΔΔⵠⲆ: "img/night-pebblecompo27.png",
    ⲆⲆⵠΔΔ: "img/night-pebblecompo28.png",
    ᐃⵠⲆⲆΔᐃΔ: "img/day-baby-mammoth.png",
    ⵠᐃⵠⵠⲆᐃᐃ: "img/day-baby-mammoth-tamed.png",
    ΔⲆⵠⵠΔΔᐃ: "img/day-baby-mammoth-angry.png",
    ΔⵠⵠⲆΔΔⲆ: "img/night-baby-mammoth.png",
    ᐃᐃᐃⵠᐃΔΔ: "img/night-baby-mammoth-tamed.png",
    ⵠΔⲆⵠⵠΔΔ: "img/night-baby-mammoth-angry.png",
    ⵠᐃⵠⵠᐃΔⲆ: "img/inv-mammoth-out.png",
    ⵠᐃΔᐃⲆⲆᐃ: "img/inv-mammoth-in.png",
    Δᐃᐃⵠⵠⵠⵠ: "img/inv-mammoth-click.png",
    ⲆⲆΔⵠⵠⲆⵠ: "img/hurt-baby-mammoth.png",
    ⵠⵠⲆᐃⵠⲆⵠ: "img/baby-mammoth-step.png",
    ᐃΔΔⵠⵠⵠⲆ: "img/day-flower-hat.png",
    ᐃΔⲆΔΔⵠⲆ: "img/night-flower-hat.png",
    ⵠᐃⵠⲆΔⲆⵠ: "img/inv-flower-hat-out.png",
    ⲆⲆⲆΔΔⵠΔ: "img/inv-flower-hat-in.png",
    ΔⵠⲆⵠⲆⲆΔ: "img/inv-flower-hat-click.png",
    ⵠᐃⲆΔΔⵠᐃ: "img/day-fur-hat.png",
    ᐃᐃᐃⲆⲆΔΔ: "img/night-fur-hat.png",
    ᐃΔⵠⵠᐃⲆⵠ: "img/inv-fur-hat-out.png",
    ⲆⵠⵠⵠⲆΔΔ: "img/inv-fur-hat-in.png",
    ⵠΔᐃⲆⵠⵠⵠ: "img/inv-fur-hat-click.png",
    ⵠⵠⵠⲆⵠⲆⲆ: "img/day-mammoth.png",
    ⵠⵠΔΔⲆⲆᐃ: "img/night-mammoth.png",
    ᐃⲆΔᐃΔⵠⵠ: "img/hurt-mammoth.png",
    ΔΔⵠΔⲆⲆΔ: "img/inv-mammoth-fur-out.png",
    ΔⵠⲆᐃⵠᐃⲆ: "img/inv-mammoth-fur-in.png",
    ΔⵠⲆⲆᐃΔΔ: "img/inv-mammoth-fur-click.png",
    ⲆⵠᐃⲆᐃⲆⲆ: "img/inv-wood-bow-out.png",
    ⵠᐃΔⵠⵠᐃᐃ: "img/inv-wood-bow-in.png",
    ⵠⲆᐃᐃΔΔⲆ: "img/inv-wood-bow-click.png",
    ⵠⲆᐃΔᐃᐃⵠ: "img/inv-wood-arrow-out.png",
    ᐃᐃⵠⲆⵠⲆⲆⵠᐃ: "img/inv-wood-arrow-in.png",
    ΔᐃᐃᐃⲆⲆΔⵠⵠ: "img/inv-wood-arrow-click.png",
    ᐃᐃⵠⵠⵠⲆΔⲆⲆ: "img/day-wood-bow2.png",
    ⲆⲆⵠⲆΔⵠᐃⲆⲆ: "img/night-wood-bow2.png",
    ΔᐃⵠΔⲆⵠⵠ: "img/day-wood-arrow.png",
    ᐃⲆⲆⲆΔⵠΔ: "img/night-wood-arrow.png",
    ΔⲆᐃΔⲆⲆᐃⵠΔ: "img/inv-stone-bow-out.png",
    ⲆΔⲆᐃⲆⲆᐃⵠⵠ: "img/inv-stone-bow-in.png",
    ⵠⲆⵠⵠᐃᐃⵠΔⲆ: "img/inv-stone-bow-click.png",
    ᐃⵠⵠΔⵠΔᐃⵠᐃ: "img/inv-stone-arrow-out.png",
    ΔΔᐃΔⲆΔⲆΔᐃ: "img/inv-stone-arrow-in.png",
    ⵠᐃΔΔⲆᐃᐃⵠΔ: "img/inv-stone-arrow-click.png",
    ⵠⲆⵠⵠΔᐃⲆⵠᐃ: "img/day-stone-bow.png",
    ⵠΔⵠⲆΔΔⲆⲆᐃ: "img/night-stone-bow.png",
    ⲆⵠⲆⵠⵠⲆⲆ: "img/day-stone-arrow.png",
    ᐃⵠⲆⲆᐃΔⲆ: "img/night-stone-arrow.png",
    ⵠⵠΔⲆΔΔⵠΔᐃ: "img/inv-gold-bow-out.png",
    ᐃΔⲆᐃᐃᐃⵠⵠⵠ: "img/inv-gold-bow-in.png",
    ⲆⵠΔⵠᐃⵠⲆΔⲆ: "img/inv-gold-bow-click.png",
    ⲆⲆⵠⵠΔΔⲆΔΔ: "img/inv-gold-arrow-out.png",
    ⲆⵠΔⲆⵠⲆⲆᐃᐃ: "img/inv-gold-arrow-in.png",
    ⲆΔᐃⲆⵠΔⵠⲆᐃ: "img/inv-gold-arrow-click.png",
    ⲆΔᐃⲆⵠⲆΔⵠⵠ: "img/day-gold-bow.png",
    ΔⲆΔⵠΔⲆⲆᐃⲆ: "img/night-gold-bow.png",
    ΔⵠⲆΔⵠⵠᐃ: "img/day-gold-arrow.png",
    ⲆΔΔΔⲆΔΔ: "img/night-gold-arrow.png",
    ᐃⵠᐃᐃⲆΔⵠⲆⲆ: "img/inv-diamond-bow-out.png",
    ᐃⵠΔⲆⵠⲆΔⲆΔ: "img/inv-diamond-bow-in.png",
    ⲆⲆᐃᐃⲆⲆΔΔΔ: "img/inv-diamond-bow-click.png",
    ⵠᐃΔⵠᐃⲆⵠᐃΔ: "img/inv-diamond-arrow-out.png",
    ᐃⵠⵠᐃΔΔⲆᐃⲆ: "img/inv-diamond-arrow-in.png",
    ⲆⵠᐃΔΔᐃΔⵠⲆ: "img/inv-diamond-arrow-click.png",
    ΔⲆⲆΔⵠᐃΔⵠᐃ: "img/day-diamond-bow.png",
    ⵠⵠⲆⵠᐃⲆⲆⵠⲆ: "img/night-diamond-bow.png",
    ΔΔΔΔⵠⲆΔ: "img/day-diamond-arrow.png",
    ᐃⲆⲆⵠᐃᐃⵠ: "img/night-diamond-arrow.png",
    ⲆⵠⲆᐃᐃΔⲆⲆΔ: "img/inv-amethyst-bow-out.png",
    ᐃᐃⵠⲆⵠⵠᐃⵠⵠ: "img/inv-amethyst-bow-in.png",
    ⲆⵠᐃⲆⲆΔⲆΔΔ: "img/inv-amethyst-bow-click.png",
    ⵠⲆᐃΔΔⲆᐃΔΔ: "img/inv-amethyst-arrow-out.png",
    ΔⵠⵠⵠΔⵠΔΔⵠ: "img/inv-amethyst-arrow-in.png",
    ΔⵠᐃⵠⵠΔΔᐃΔ: "img/inv-amethyst-arrow-click.png",
    ⵠΔᐃⵠⵠΔⲆⲆⲆ: "img/day-amethyst-bow.png",
    ᐃⵠΔΔᐃⲆⲆΔⵠ: "img/night-amethyst-bow.png",
    ΔᐃⵠΔⲆΔⵠ: "img/day-amethyst-arrow.png",
    ᐃⵠⵠⵠⲆⲆᐃ: "img/night-amethyst-arrow.png",
    ᐃᐃᐃᐃᐃᐃⲆⵠⵠ: "img/inv-dragon-bow-out.png",
    ⲆᐃⲆⵠΔΔⲆΔᐃ: "img/inv-dragon-bow-in.png",
    ᐃᐃⲆⲆⲆΔΔⵠⲆ: "img/inv-dragon-bow-click.png",
    ⲆⲆΔⵠᐃΔᐃᐃⵠ: "img/inv-dragon-arrow-out.png",
    ᐃΔⵠⲆⵠⲆᐃⵠⵠ: "img/inv-dragon-arrow-in.png",
    ᐃΔⲆⵠⲆᐃⵠⲆᐃ: "img/inv-dragon-arrow-click.png",
    ⵠⵠⵠⵠᐃΔⲆᐃⲆ: "img/day-dragon-bow.png",
    ΔᐃⵠⵠΔⲆⵠΔⲆ: "img/night-dragon-bow.png",
    ⵠⵠΔΔⵠΔΔ: "img/day-dragon-arrow.png",
    ΔΔⵠⵠⵠⲆᐃ: "img/night-dragon-arrow.png",
    ⲆᐃⲆᐃⵠΔᐃⲆΔ: "img/inv-reidite-bow-out.png",
    ΔⲆⵠᐃⵠⲆⵠⵠⵠ: "img/inv-reidite-bow-in.png",
    ΔᐃᐃΔⵠᐃΔⵠᐃ: "img/inv-reidite-bow-click.png",
    ᐃⲆΔᐃΔⲆⲆⵠⵠ: "img/inv-reidite-arrow-out.png",
    ⵠⲆᐃᐃⲆⲆⲆΔΔ: "img/inv-reidite-arrow-in.png",
    ΔᐃⲆⲆΔⲆⵠᐃⵠ: "img/inv-reidite-arrow-click.png",
    ⲆΔΔⲆᐃⵠΔⵠΔ: "img/day-reidite-bow.png",
    ⲆᐃΔⲆᐃᐃⲆᐃⵠ: "img/night-reidite-bow.png",
    ᐃⵠⵠᐃⵠᐃᐃ: "img/day-reidite-arrow.png",
    ΔⵠΔΔⲆᐃᐃΔⵠ: "img/night-reidite-arrow.png",
    ᐃᐃᐃⲆⵠⵠΔⵠᐃ: "img/inv-wooden-axe-out.png",
    ⲆⲆⲆⵠⵠⲆⲆⵠⲆ: "img/inv-wooden-axe-in.png",
    ΔΔᐃⵠⵠⲆⵠⲆᐃ: "img/inv-wooden-axe-click.png",
    ⵠⲆᐃⵠⵠᐃⵠⵠⵠ: "img/day-wooden-axe.png",
    ⲆᐃΔⵠⵠᐃᐃᐃⲆ: "img/night-wooden-axe.png",
    ΔᐃᐃΔⲆΔⲆΔΔ: "img/inv-stone-axe-out.png",
    ᐃΔΔⲆΔⲆⵠⵠᐃ: "img/inv-stone-axe-in.png",
    ⵠⵠⵠⵠΔⲆΔⲆΔ: "img/inv-stone-axe-click.png",
    ᐃΔⵠᐃⲆⵠᐃⵠΔ: "img/day-stone-axe.png",
    ΔᐃⲆⲆΔⵠΔⲆⵠ: "img/night-stone-axe.png",
    ⲆᐃᐃⵠᐃⲆΔΔⵠ: "img/inv-golden-axe-out.png",
    ᐃⵠΔⵠⵠᐃΔᐃⵠ: "img/inv-golden-axe-in.png",
    ⵠᐃⲆᐃΔⵠᐃΔⲆ: "img/inv-golden-axe-click.png",
    ⲆⵠᐃⲆⲆⲆΔᐃΔ: "img/day-golden-axe.png",
    ⲆᐃᐃΔⲆⵠⵠⲆⲆ: "img/night-golden-axe.png",
    ΔⲆΔⲆᐃⵠⵠᐃᐃ: "img/inv-diamond-axe-out.png",
    ΔⵠᐃᐃΔᐃⵠⵠⲆ: "img/inv-diamond-axe-in.png",
    ⵠΔⲆᐃⵠⲆⵠᐃᐃ: "img/inv-diamond-axe-click.png",
    ⲆᐃᐃⲆΔᐃⵠⲆᐃ: "img/day-diamond-axe.png",
    ⲆⲆⵠⵠᐃⲆᐃⵠΔ: "img/night-diamond-axe.png",
    ⲆⵠΔᐃⲆΔΔⲆᐃ: "img/inv-amethyst-axe-out.png",
    ⵠⲆΔⵠΔⵠΔⲆΔ: "img/inv-amethyst-axe-in.png",
    ᐃⵠⵠⲆⲆᐃᐃΔᐃ: "img/inv-amethyst-axe-click.png",
    ⲆΔᐃΔⲆΔΔⵠⲆ: "img/day-amethyst-axe.png",
    ⵠⲆᐃΔⲆᐃⲆᐃᐃ: "img/night-amethyst-axe.png",
    ⵠⲆᐃⲆⲆΔᐃᐃⵠ: "img/inv-reidite-axe-out.png",
    ΔⵠᐃΔⵠⵠⲆⲆⲆ: "img/inv-reidite-axe-in.png",
    ΔⲆⵠⵠⵠΔⵠⲆᐃ: "img/inv-reidite-axe-click.png",
    ⲆⲆⲆᐃⲆᐃⵠΔΔ: "img/day-reidite-axe.png",
    ᐃᐃⵠᐃΔⲆⵠⵠΔ: "img/night-reidite-axe.png",
    ΔΔΔⵠΔⲆΔ: "img/bandage-activated.png",
    ⲆΔᐃⲆᐃⲆᐃ: "img/auto-feed.png",
    ΔᐃΔⵠᐃⲆᐃ: "img/stop-regeneration.png",
    ΔⵠⵠⲆΔⲆᐃ: "img/stop-regeneration2.png",
    ⵠⵠⲆΔΔⵠᐃⵠⵠ: "img/day-wood-platform.png",
    ⲆⲆΔΔⲆⵠⵠΔⵠ: "img/night-wood-platform.png",
    ⲆⲆⲆᐃᐃΔΔⵠᐃ: "img/inv-wood-platform-in.png",
    ⵠⲆᐃⲆⵠΔⵠⲆΔ: "img/inv-wood-platform-out.png",
    ⲆΔΔⲆᐃᐃᐃΔⵠ: "img/inv-wood-platform-click.png",
    ᐃΔΔⵠΔΔᐃⲆⵠ: "img/day-wood-shield.png",
    ᐃⵠΔΔᐃⲆΔⵠᐃ: "img/night-wood-shield.png",
    ᐃⲆⲆΔⵠᐃΔΔᐃ: "img/day-stone-shield.png",
    ΔⲆⲆᐃΔⵠⲆΔΔ: "img/night-stone-shield.png",
    ᐃⵠᐃΔΔᐃⵠΔᐃ: "img/day-gold-shield.png",
    ⲆᐃΔᐃⲆⲆⲆᐃΔ: "img/night-gold-shield.png",
    ΔⲆᐃⵠⲆᐃΔⲆᐃ: "img/day-diamond-shield.png",
    ⲆᐃⵠᐃⵠᐃΔᐃⲆ: "img/night-diamond-shield.png",
    ⲆⲆⵠΔⵠⲆⲆⲆΔ: "img/day-amethyst-shield.png",
    ᐃΔΔⵠⵠⲆΔⲆⲆ: "img/night-amethyst-shield.png",
    ⵠᐃᐃⲆᐃΔⵠⲆΔ: "img/day-reidite-shield.png",
    ⲆⲆΔⲆΔΔⲆᐃⲆ: "img/night-reidite-shield.png",
    ΔⲆⲆⵠⵠⵠΔᐃΔ: "img/inv-wood-shield-in.png",
    ⲆΔⲆᐃⵠⲆΔⲆᐃ: "img/inv-wood-shield-out.png",
    ᐃⲆⲆⵠᐃΔΔⲆΔ: "img/inv-wood-shield-click.png",
    ⵠᐃⲆΔΔΔⲆⲆΔ: "img/inv-stone-shield-in.png",
    ⲆⲆᐃΔΔᐃΔᐃᐃ: "img/inv-stone-shield-out.png",
    ⲆΔΔΔᐃⲆᐃⲆᐃ: "img/inv-stone-shield-click.png",
    ᐃΔⵠⲆⲆⲆⵠⲆⵠ: "img/inv-gold-shield-in.png",
    ⲆΔΔⲆⵠⲆΔⵠⲆ: "img/inv-gold-shield-out.png",
    ᐃΔΔᐃΔΔⵠΔⵠ: "img/inv-gold-shield-click.png",
    ΔᐃⵠⵠΔⲆⲆⵠⲆ: "img/inv-diamond-shield-in.png",
    ⵠᐃⲆᐃΔΔᐃΔⲆ: "img/inv-diamond-shield-out.png",
    ⲆᐃᐃΔⲆⲆⵠΔⲆ: "img/inv-diamond-shield-click.png",
    ⵠⵠᐃⵠᐃΔⵠᐃⲆ: "img/inv-amethyst-shield-in.png",
    ΔΔⵠⲆⲆΔΔⲆⵠ: "img/inv-amethyst-shield-out.png",
    ᐃⲆⵠᐃΔⲆⲆⵠᐃ: "img/inv-amethyst-shield-click.png",
    ΔⲆⲆⲆᐃⵠⲆⵠⲆ: "img/inv-reidite-shield-in.png",
    ΔΔΔⵠᐃΔΔⵠⵠ: "img/inv-reidite-shield-out.png",
    ⵠΔΔⵠᐃᐃᐃⲆⲆ: "img/inv-reidite-shield-click.png",
    ⲆᐃⵠⵠⵠΔΔΔᐃ: "img/day-machete.png",
    ⲆⲆⲆⵠⵠⵠᐃⵠⵠ: "img/night-machete.png",
    ᐃᐃΔΔᐃⲆⵠΔⵠ: "img/inv-machete-in.png",
    ⲆⲆΔΔΔᐃⵠΔᐃ: "img/inv-machete-out.png",
    ᐃᐃᐃⲆᐃⲆΔⲆⵠ: "img/inv-machete-click.png"
  };
  ⵠⲆⵠΔⲆⲆⲆ = [{}];
  ⵠⲆⵠΔⲆⲆⲆ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = 0; a.length > c; c++) {
      b[c] = a[c];
    }
    return b;
  };
  ⵠⵠᐃⵠⵠⲆᐃ = {};
  const Hb = 5;
  const Ub = 6;
  ΔᐃᐃΔⵠΔΔⵠΔ = {};
  for (var Sb in ᐃᐃ) {
    ⵠⵠᐃⵠⵠⲆᐃ[Sb] = ᐃᐃ[Sb];
  }
  function Yb(b, c, d, e, f) {
    const i = ~(b & 18086) & (b | 18086);
    const a = (c | 36611) & ~(c & 36611);
    const j = ~(d & 53508) & (d | 53508);
    const k = (f | 14705) & ~(f & 14705);
    const h = fb(i, a, j, (2147483587 + (52637 + e) * 2147483629) % 2147483647);
    const g = fb(k, i, a, j);
    return (0 << ((h ^ g) >> 8 & 255)) + (8 << ((h ^ g) >> 16 & 255)) + (16 << ((h ^ g) >> 24 & 255)) + (24 << ((h ^ g) & 255));
  }
  function Kb(a, b) {
    Wj(yt, a, b);
    const c = eb(sb[0], sb[1], sb[0], sb[1], sb[0], sb[1]);
    (function (a, b, c) {
      Jj(yt, a, b, c);
      const d = function (b, c, d, e, f, g) {
        Oj(yt, b, c, d, e, f, g);
        const a = zb(sb[0], sb[1], sb[2], sb[3]);
        eb(sb[4], sb[5], sb[0], sb[1], sb[2], sb[3]);
        return a ^ 28425;
      }(sb[0], sb[1], sb[2], sb[0], sb[1], sb[2]);
      eb(sb[0], sb[1], sb[2], sb[0], sb[1], sb[2]);
    })(sb[0], sb[1], sb[0]);
    return ~(c & 8854) & (c | 8854);
  }
  function Vb(b, c, d) {
    const e = b ^ 34027;
    const f = (c + 62304) % 65476;
    const g = ~(d & 41262) & d | ~(d & 41262) & 41262;
    const a = function (b, c, d, e) {
      const f = (2531011 + (b + 55110) * 214013) % 4294967296;
      const i = ~(c & 48843) & 48843 | ~(c & 48843) & c;
      const a = ((d + 15363) * 1664525 + 1013904223) % 4294967296;
      const j = ~(e & 10068) & e | ~(e & 10068) & 10068;
      const k = fb(f, i, a, j);
      const h = function (b, c, d, e) {
        const f = (24 << (b & 255)) + (0 << (b >> 16 & 255)) + (8 << (b >> 24 & 255)) + (16 << (b >> 8 & 255));
        const g = (8 << (c & 255)) + (24 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (16 << (c >> 16 & 255));
        const a = (1 + (59039 + d) * 22695477) % 4294967296;
        const i = (e | 19940) & ~(e & 19940);
        const j = Bb(f, g, a, i, f);
        Yb(g, a, i, f, g);
        return ~(j & 33437) & 33437 | ~(j & 33437) & j;
      }(f, i, a, j);
      return (0 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) & 255)) + (16 << ((k ^ h) >> 16 & 255)) + (24 << ((k ^ h) >> 8 & 255));
    }(e, f, g, e);
    Un(f, g, e, f);
    return a ^ 48217;
  }
  ⵠⵠ = [];
  ⲆΔⵠ = {};
  const Zb = Rr;
  ⲆΔⵠ.ⲆᐃⲆΔᐃ = 0;
  ⲆΔⵠ.ΔΔᐃⲆ = 1;
  const Xb = 4;
  ⲆΔⵠ.ⲆⲆΔⵠ = 2;
  const $b = 6;
  const ed = 0;
  const id = {};
  id.get = function (a, b) {
    if (b !== "ⵠᐃⵠⲆⵠⵠⵠ") {
      const a = function () {
        for (let b = 0; b < 5; b++) {
          rg.addEventListener("click", function () {
            a();
          });
        }
      };
      a();
    }
    return rg.Reflect.get(...arguments);
  };
  ⲆΔⵠ.ⲆΔⲆⲆ = 3;
  ⲆΔⵠ.ⵠᐃᐃⵠ = 4;
  ⲆΔⵠ.ⵠⲆⲆⵠ = 5;
  ⲆΔⵠ.Δⵠᐃᐃ = 6;
  ⲆΔⵠ.ᐃⵠᐃⵠΔΔⵠ = 7;
  ⲆΔⵠ.ⲆⲆⵠⵠᐃ = 8;
  const td = 16;
  ᐃΔⲆΔ = {};
  const nd = 9;
  ᐃⵠⵠᐃ = [];
  ΔⲆΔᐃΔⲆⵠ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (a[c].id === b) {
        return c;
      }
    }
    return -1;
  };
  const od = 18;
  var ad = [];
  function Ct(a, b) {
    for (var c = 0; ad.length > c; c += b) {
      var d = ad[c];
      if (a === d[0]) {
        hd(d[0], d[1], d[2], d[3]);
      }
    }
  }
  const sd = 10;
  function hd(b, c, d, e) {
    var f = ᐃⵠⵠᐃ[b];
    if (f !== undefined) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / mx.ⲆⲆⲆΔΔ;
        var m = d * 193 / mx.ᐃᐃⲆⲆΔ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ⵠⵠ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
        k = e * 600 / mx.ⲆⲆⲆΔΔ;
        m = d * 600 / mx.ᐃᐃⲆⲆΔ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ⵠⵠ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
      }
    }
  }
  function gd(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  ⵠⵠᐃⵠⵠⵠⵠΔⲆ = function () {
    for (var b = 0; b < 2; b++) {
      ⵠⵠ[818][b].clearRect(0, 0, 193, 193);
      ⵠⵠ[818][b].drawImage(ᐃⵠⵠᐃ.MAP[b], 0, 0, 193, 193);
      ⵠⵠ[819][b].clearRect(0, 0, 600, 600);
      ⵠⵠ[819][b].drawImage(ᐃⵠⵠᐃ.MAP[b], 0, 0, 600, 600);
      for (var c = mx.ⲆΔΔΔ.length - 1; c >= 0; c--) {
        var d = mx.ⲆΔΔΔ[c];
        var f = d.x1 * 193 / (mx.ⲆⲆⲆΔΔ * 100);
        var j = d.y1 * 193 / (mx.ᐃᐃⲆⲆΔ * 100);
        var k = d.w * 193 / (mx.ⲆⲆⲆΔΔ * 100);
        var m = d.ΔⲆⲆ * 193 / (mx.ᐃᐃⲆⲆΔ * 100);
        var p = d.x1 * 600 / (mx.ⲆⲆⲆΔΔ * 100);
        var q = d.y1 * 600 / (mx.ᐃᐃⲆⲆΔ * 100);
        var u = d.w * 600 / (mx.ⲆⲆⲆΔΔ * 100);
        var v = d.ΔⲆⲆ * 600 / (mx.ᐃᐃⲆⲆΔ * 100);
        if (mx.ᐃⲆⲆΔⵠ === d.Ⲇᐃᐃ) {
          ⵠⵠ[818][b].drawImage(ᐃⵠⵠᐃ.FOREST[b], f, j, k, m);
          ⵠⵠ[819][b].drawImage(ᐃⵠⵠᐃ.FOREST[b], p, q, u, v);
        }
        if (mx.ⲆⲆᐃᐃⵠΔᐃ === d.Ⲇᐃᐃ) {
          ⵠⵠ[818][b].drawImage(ᐃⵠⵠᐃ.WINTER[b], f, j, k, m);
          ⵠⵠ[819][b].drawImage(ᐃⵠⵠᐃ.WINTER[b], p, q, u, v);
        }
        if (d.Ⲇᐃᐃ === mx.ⵠⵠⲆᐃΔΔⲆ) {
          ⵠⵠ[818][b].drawImage(ᐃⵠⵠᐃ.LAVA[b], f, j, k, m);
          ⵠⵠ[819][b].drawImage(ᐃⵠⵠᐃ.LAVA[b], p, q, u, v);
        }
        if (mx.ⵠⲆⵠⲆⲆⵠΔ === d.Ⲇᐃᐃ) {
          ⵠⵠ[818][b].drawImage(ᐃⵠⵠᐃ.CAVE[b], f, j, k, m);
          ⵠⵠ[819][b].drawImage(ᐃⵠⵠᐃ.CAVE[b], p, q, u, v);
        }
        if (d.Ⲇᐃᐃ === mx.ⵠΔΔΔΔΔᐃ) {
          ⵠⵠ[818][b].drawImage(ᐃⵠⵠᐃ.DESERT[b], f, j, k, m);
          ⵠⵠ[819][b].drawImage(ᐃⵠⵠᐃ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ⵠⲆᐃΔⲆΔⲆⲆᐃ = function () {
    ᐃΔⲆΔ = {
      ΔΔᐃⲆⵠ: [{
        id: 0,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔⵠΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⲆⵠᐃΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠΔⵠⵠΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔΔⵠᐃⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔᐃΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔΔΔᐃⲆΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆⵠᐃᐃⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆΔⵠⵠⵠᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠᐃⵠᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⵠⵠⵠⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⵠⲆⵠΔⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔΔⵠΔⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔΔⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔᐃΔᐃΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⵠΔΔᐃⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔⵠᐃᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⵠΔⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ΔΔⵠⲆⵠᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠΔⵠᐃⲆⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔΔᐃⲆⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ⲆΔⲆ: ᐃᐃ.ΔΔΔⲆΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔᐃΔᐃᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔⲆⲆⲆΔⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔⵠΔⲆⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠⲆⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⵠⵠΔᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃΔⲆᐃⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆΔᐃᐃⵠⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⵠΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔᐃⵠΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆΔⲆⵠⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.Δᐃᐃᐃᐃⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠᐃΔΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔΔⲆⵠΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃⵠΔᐃⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⲆⲆⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔⲆⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⲆΔⲆᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠΔⲆⲆⲆᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆᐃⵠᐃᐃΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠᐃΔⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔᐃⲆⲆⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⵠⲆΔᐃⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔΔⵠⵠⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⲆⲆΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃⲆⲆⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃᐃⲆᐃΔΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔⵠⲆⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠᐃⲆΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⲆΔⵠᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⵠΔⲆⵠⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔⵠⲆⲆΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⲆᐃΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⵠΔΔᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃⲆⲆᐃⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆᐃΔⵠⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⵠΔΔΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆΔΔⲆᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠΔⲆᐃΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⵠⲆᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠᐃⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃΔᐃΔᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃΔⵠΔⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔᐃᐃᐃⲆⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠᐃΔᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔᐃⵠᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠⵠᐃⵠⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆⵠⲆᐃΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆΔⲆᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔⵠⲆⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆⲆⲆΔⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠΔΔⵠᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⵠΔᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⲆᐃⲆΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⲆᐃⵠᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.Δᐃⵠᐃⵠᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⲆᐃᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔΔⲆⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔΔΔⲆⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔΔᐃᐃⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃᐃⲆᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔΔⵠⵠⵠⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔΔⲆⲆⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.Δⵠⵠᐃⵠⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⵠᐃΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔΔⲆⵠⲆⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃᐃⵠΔⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆΔⲆᐃⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⵠⲆΔΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠΔΔΔⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃⵠᐃⵠⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔⵠΔⲆᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆΔᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆΔΔⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃᐃᐃᐃᐃⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃⵠᐃΔΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆΔΔΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔᐃⵠⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔⵠΔΔΔᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔⵠΔᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠᐃⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆⵠⲆΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔⲆⵠΔᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔⵠΔⲆⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Seams"
      }, {
        id: 104,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆᐃⵠᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⲆᐃⵠⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃᐃⲆΔⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔᐃᐃᐃᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆΔᐃⵠΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆᐃᐃΔΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆΔⲆΔᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⵠⲆᐃΔᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃᐃᐃⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆΔᐃΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔΔᐃⲆᐃⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆⵠΔⲆⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⲆᐃΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃᐃⵠᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃΔⲆΔΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⵠⲆᐃΔᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⲆΔᐃΔΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆᐃⵠᐃⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆⵠᐃᐃΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆᐃⵠΔⵠⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⲆⵠΔΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠᐃⲆᐃⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔΔᐃᐃᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.Ⲇⵠⵠᐃᐃᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ⲆΔⲆ: ᐃᐃ.ΔΔⲆᐃⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃΔΔⲆᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔⲆⵠⵠᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⵠᐃΔⵠΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ⲆΔⲆ: ᐃᐃ.ᐃΔΔⲆⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔⲆⵠΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃⲆΔᐃⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔᐃⵠΔᐃⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔⲆⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠᐃⵠΔᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃⲆΔⵠⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⵠⲆⵠΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⲆᐃⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⲆⵠⵠⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⵠΔᐃⵠᐃⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⵠⵠⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ⲆΔⲆ: ᐃᐃ.ΔΔⲆⲆᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆᐃΔᐃᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⵠᐃΔΔⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔⲆⲆᐃΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ⲆΔⲆ: ᐃᐃ.ΔⵠᐃⲆⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔᐃᐃⲆΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⲆΔⲆⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆᐃⲆⵠⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔΔⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔΔⵠΔΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆᐃⲆⲆⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆᐃⵠΔⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃΔⵠⲆΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⵠᐃᐃΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆⵠⲆΔᐃⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆᐃⵠΔⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆⲆΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠΔⲆⲆΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔⲆⵠⵠⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆᐃⲆⵠΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ⲆΔⲆ: ᐃᐃ.ΔΔⲆⲆⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⲆⵠΔΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⵠᐃⲆⲆⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆⲆΔΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠⲆᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔΔᐃΔⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠⵠᐃⵠΔΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆⲆⲆⵠΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠΔⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆᐃⲆΔⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃⲆⵠⲆᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠⵠᐃⵠⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃΔⵠⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠᐃΔⵠⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆᐃΔⵠᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔᐃᐃⵠⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆⵠᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃⵠΔΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆᐃΔⲆᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔᐃΔΔΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃΔΔΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠᐃΔⲆⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔᐃⲆⵠⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⵠⲆΔΔⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔΔᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⲆΔⵠⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠⲆⵠΔΔᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔᐃᐃⲆᐃⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⵠΔⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⵠᐃΔⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃᐃⵠΔⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆΔᐃᐃⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⲆΔᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⲆⵠΔΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔΔΔΔᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⵠᐃΔΔⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⵠⵠⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔΔΔⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⵠⵠᐃⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠΔⲆᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆⲆⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃΔⲆᐃⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆᐃⵠΔⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆⲆⵠᐃⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔᐃᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔΔⲆᐃⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃΔⵠΔᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆᐃΔⵠⵠΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ⲆΔⲆ: ᐃᐃ.ΔΔⲆᐃⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆΔⵠⵠᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔⵠᐃΔⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆΔΔⲆΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⵠΔΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆΔΔΔⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⵠΔⵠⵠⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔⵠΔⵠⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠᐃⵠⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⵠⵠᐃⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃᐃⲆⲆᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆⲆⲆᐃΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆᐃⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⲆΔΔᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔⵠⵠⲆⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆᐃΔᐃᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃᐃᐃᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆᐃⵠⵠⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔΔᐃⲆⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆᐃⵠᐃⲆᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⵠᐃⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⲆⵠⵠᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆⲆᐃᐃᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆⵠⲆᐃⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⵠΔⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆⲆΔᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⵠᐃᐃᐃΔⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔⲆⲆⵠⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⲆⲆⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⲆΔⲆΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃΔΔᐃⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔⲆⲆΔΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ⲆΔⲆ: ᐃᐃ.ᐃΔΔΔⵠΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔⵠⲆᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆΔⵠⵠⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠⲆΔⵠΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔⵠⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⵠᐃⵠΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃⵠⲆᐃⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆⵠⲆⵠⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⵠᐃⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠΔⵠΔⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃᐃⵠᐃⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔᐃⲆⵠⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⲆΔΔΔΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠΔⲆΔᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆΔΔⵠᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔⵠⲆⲆⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆᐃⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⲆᐃⵠⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃΔⵠᐃⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆⵠᐃⲆⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆΔⵠⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⵠᐃΔⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠⲆⲆⲆΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⵠᐃⲆᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⲆᐃΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆΔⵠᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆΔⵠⵠⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠⵠΔⵠΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        ⲆΔⲆ: ᐃᐃ.ΔᐃᐃΔᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔΔΔΔⲆⵠΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆΔΔᐃⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃᐃΔᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆⲆⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃΔⲆⲆⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⵠⵠᐃⵠΔⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆΔⵠΔΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 29,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⲆⵠⵠΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⵠⵠΔⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃⵠⵠⵠᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠᐃᐃΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⲆᐃⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⲆᐃⲆΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠᐃΔΔⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⵠⵠΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⵠᐃⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆΔᐃΔⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆΔⲆΔᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⵠᐃΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔᐃΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠᐃΔⵠⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆΔᐃᐃΔΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔᐃⲆⲆⵠⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆᐃⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⲆΔΔᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆⲆⵠᐃⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⵠᐃⲆⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⲆᐃΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.Ⲇⵠⵠᐃᐃⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃΔΔΔᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆΔⵠⲆⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆⵠⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠᐃΔⵠΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔᐃⲆᐃΔΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⵠΔⵠⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠᐃⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⵠᐃⵠⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠⲆⲆᐃⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔΔΔᐃⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⵠⵠᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⵠᐃⲆⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆᐃⵠⵠⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆᐃᐃᐃΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ⲆΔⲆ: ᐃᐃ.ΔΔΔⵠΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠΔΔⵠᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔᐃⲆᐃⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆⲆᐃᐃΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠⲆⲆΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠᐃⵠΔΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔᐃΔΔᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⵠᐃᐃⵠⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠΔᐃΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⵠΔⵠⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃⵠᐃΔⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃᐃΔΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃΔⵠⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⲆⵠⲆΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃⵠΔᐃᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆᐃᐃΔΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ⲆΔⲆ: ᐃᐃ.ΔΔⲆᐃΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔΔᐃⵠᐃⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃⵠᐃⲆⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔΔᐃΔᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆᐃⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆᐃⲆⵠⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃᐃⵠΔⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆΔΔΔᐃⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⲆⲆᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔⲆⵠΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃᐃᐃⲆⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃⲆⲆⵠⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆᐃΔΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⵠⲆⲆΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠⲆΔⵠⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⵠⲆⲆΔᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ⲆΔⲆ: ᐃᐃ.ΔΔᐃᐃⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⲆⲆΔΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⵠⲆΔⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⵠⵠⲆᐃⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ⲆΔⲆ: ᐃᐃ.ⵠΔΔⲆᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⵠᐃⲆΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃⵠⲆⵠⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔⲆΔⵠΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆΔΔᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠᐃⲆⲆΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃⲆΔᐃᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠⲆⲆᐃᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⵠⲆⲆⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⵠΔΔⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃⲆⲆⵠⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔᐃᐃΔᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ⲆΔⲆ: ᐃᐃ.ΔᐃᐃΔᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠᐃⲆΔⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠᐃᐃΔⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃᐃⵠᐃⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ⲆΔⲆ: ᐃᐃ.ⵠΔᐃⲆⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔᐃⵠᐃΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠΔΔΔΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃᐃΔⲆⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆⵠⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⵠΔⵠᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆⲆᐃⲆᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃᐃⵠΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⵠΔⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃⲆⲆᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔⵠⵠⵠΔⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⵠⲆⵠΔᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃᐃⵠⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃΔᐃΔᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔΔⲆⲆⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆΔⵠⲆΔΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⵠⲆⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔΔⵠᐃᐃᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔᐃⲆΔⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⵠⲆⵠΔΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃᐃᐃΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⵠⵠⵠᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⵠⵠⵠⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃᐃᐃⲆⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆᐃΔⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔᐃⲆⲆΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠΔΔᐃΔⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⲆΔⵠⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔΔΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔⲆᐃᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔⵠⵠⵠᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠΔΔⵠⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⲆΔⲆΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠᐃⵠᐃΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔⵠⲆᐃΔᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠⵠⵠΔΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⵠΔⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠⵠΔⲆᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃⵠⵠᐃⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆΔΔᐃΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠΔΔᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆᐃΔΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆᐃΔᐃⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔΔⲆΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⵠΔΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔⵠⲆΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃΔΔⵠᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔⵠᐃⲆᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⵠⲆⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔᐃᐃⲆⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔᐃⲆⵠⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆΔᐃΔⵠⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⲆᐃᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆᐃⲆΔⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃⲆⲆⵠᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔΔⲆⲆᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆᐃᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠᐃⲆΔⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆΔⲆᐃⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃⵠⲆⲆⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆᐃΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔⵠⲆⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⵠΔΔΔΔⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔᐃᐃⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔᐃⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⵠⵠᐃⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠⲆⵠⲆᐃⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠⵠⲆᐃⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔΔⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔᐃⲆⵠᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆᐃΔΔⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆΔΔⵠⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠΔΔΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆΔΔΔᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔⵠΔΔⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆᐃⵠⵠΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⲆⲆⵠΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⲆᐃᐃΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆⵠⵠⵠᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⵠΔⲆⵠⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔᐃⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆΔⲆⲆⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃⵠⲆⲆⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆᐃⵠⵠᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        ⲆΔⲆ: ᐃᐃ.ΔⲆᐃⵠⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔⵠΔᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃᐃᐃⵠΔᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃᐃᐃⵠⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⵠᐃΔΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⵠⵠⵠⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆᐃⵠⵠⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃⲆⵠᐃᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⵠⵠⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⵠⵠᐃᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠΔᐃΔⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠΔᐃᐃⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⲆⲆⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⵠⵠᐃⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠⲆⵠᐃΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆᐃⵠΔⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆᐃⵠΔΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆᐃΔⵠΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠΔᐃⵠⵠⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠⵠⲆΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⵠⲆᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆᐃᐃᐃᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃΔⵠΔΔⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔⵠⵠΔᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        ⲆΔⲆ: ᐃᐃ.ΔⵠᐃᐃⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⲆᐃⵠᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃΔᐃΔⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔⲆᐃΔᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆΔΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠⲆᐃᐃᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃᐃⵠⲆᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⲆⲆΔΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃΔΔᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⲆΔⵠⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠⵠⲆΔΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⵠⵠΔΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        ⲆΔⲆ: ᐃᐃ.ΔᐃᐃⵠΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃᐃΔⵠΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠΔΔΔΔΔⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃΔⲆⲆΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 25,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔΔⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔΔΔᐃΔⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⵠⵠΔⵠⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆΔⲆᐃⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆΔⵠⲆⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⲆΔⲆⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆⵠⲆΔᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠᐃⵠᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆᐃⲆⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆΔⲆᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.Ⲇᐃⵠⵠⵠⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆⲆᐃⵠᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔΔᐃᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔⵠⲆⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆⵠⲆᐃⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠΔⵠΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ⲆΔⲆ: ᐃᐃ.ΔΔᐃᐃᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃΔΔⲆΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃⲆᐃⲆᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔᐃⵠΔΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⵠⵠⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⵠΔⲆⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆⲆΔᐃᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔⲆⵠᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠᐃΔⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆᐃⲆᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔⲆΔΔⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆᐃⲆⵠΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ⲆΔⲆ: ᐃᐃ.ΔⵠΔⵠⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔΔΔⲆᐃⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃⲆⵠᐃⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃΔⲆⵠΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃΔⲆⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⵠΔⵠⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆΔⵠⲆⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃΔΔΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆⲆⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠᐃΔⵠΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔᐃⵠᐃΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠⵠⵠⵠΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠᐃⵠΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠΔⵠⲆⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔⵠⲆΔⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⵠᐃⵠᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⲆΔᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠᐃΔΔᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔΔⵠⲆᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃΔⲆⲆΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆΔⵠⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⲆⲆⲆᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃΔᐃⲆᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⲆΔΔΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ⲆΔⲆ: ᐃᐃ.ᐃΔΔⲆⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆΔᐃΔⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔⲆΔⲆᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆΔⲆⲆⲆᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆⲆΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠⵠⵠⲆΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆΔⵠΔⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⵠᐃⲆⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⲆΔⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃᐃΔⵠⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃΔⲆⵠᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔᐃᐃⲆΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆᐃΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ΔΔΔᐃᐃΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⵠᐃΔⲆΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆⲆΔΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔⲆΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔΔΔⵠⲆⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆΔⵠⲆⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔΔⲆⵠⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ⲆΔⲆ: ᐃᐃ.ⵠΔΔⲆΔΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆᐃⵠᐃΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃⲆᐃΔⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆΔᐃⲆⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆⵠⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠΔⲆⵠᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠⲆΔⵠⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆΔΔⲆⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠΔⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠΔᐃΔⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⵠⵠⲆᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆⲆⵠᐃⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⵠⵠΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠΔΔⲆⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔᐃᐃⵠᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠⲆΔⵠⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆⲆΔⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⲆⵠΔᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃⵠⲆⲆⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠⵠⲆᐃᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃΔⲆΔⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠⵠⲆⲆⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔΔⲆᐃΔΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔΔΔⵠᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ⲆΔⲆ: ᐃᐃ.ⵠΔΔⲆⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠᐃᐃΔⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔΔΔᐃΔΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⲆΔΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆᐃⲆⲆΔΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⲆⵠⵠᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.Δⵠⵠⵠⵠⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔΔⲆⲆᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ⲆΔⲆ: ᐃᐃ.ΔⲆᐃΔⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⲆⲆⲆⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔⵠⵠⲆᐃⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⵠΔⲆⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⲆΔᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠΔⲆⵠᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆΔΔⲆᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⵠᐃⵠⲆⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⵠΔⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔΔⵠⲆΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃᐃΔᐃΔΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆᐃⲆⵠΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⵠΔᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆΔⵠᐃΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⵠⲆᐃⲆⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔᐃΔⵠⲆⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆΔⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⵠⵠⵠᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆⲆΔⲆⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔΔⲆⵠΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⵠⲆⲆⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⲆᐃⲆΔᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠᐃΔⵠᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠᐃⲆⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⵠⲆⵠⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠᐃᐃⵠΔΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⵠⵠⵠΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃΔⵠΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⲆⲆⲆⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆⲆᐃᐃΔᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠᐃᐃⲆⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃᐃᐃⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.Δᐃᐃⵠᐃⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃⵠᐃⲆⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠᐃⲆΔΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⵠⵠⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔΔⲆⲆΔⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃᐃᐃⲆΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃᐃΔⲆⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⵠᐃⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⵠⲆⵠⵠΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.Δᐃⵠᐃᐃᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆᐃΔᐃⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃΔⵠᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⵠᐃⵠⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃⲆᐃⲆⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔᐃⲆᐃᐃᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⵠⲆⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠΔⵠⲆⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃᐃⲆⵠⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔᐃΔΔⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠᐃⲆᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⲆᐃⲆⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔⲆⵠᐃⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔᐃⵠΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠᐃⵠⲆΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔΔⵠⲆⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠᐃᐃᐃᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆⲆⵠⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⲆᐃᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠⲆⲆᐃΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃΔΔⲆⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠⵠᐃΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        ⲆΔⲆ: ᐃᐃ.ⲆΔᐃⵠⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃⵠⲆⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆᐃⵠᐃᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆⵠⵠᐃⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆΔⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠΔΔΔᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆΔⵠⵠⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔΔᐃᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⵠᐃᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔᐃⵠΔᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⵠᐃⲆⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⵠⵠΔⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        ⲆΔⲆ: ᐃᐃ.ᐃΔᐃᐃⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔᐃⲆⲆⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠΔᐃⲆᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆⵠⵠΔⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠⲆΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⵠⵠⵠⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠᐃⵠⵠΔΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔᐃⵠΔⵠᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⵠΔⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⵠΔᐃᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔⵠΔᐃᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆⵠᐃⲆᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⲆⵠᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆⵠⵠᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔⲆⲆΔᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠΔΔⵠⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        ⲆΔⲆ: ᐃᐃ.ⵠΔΔΔⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⲆΔⲆΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠΔᐃᐃᐃΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆᐃⵠⲆᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠΔⲆⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆΔⵠⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠⲆᐃΔᐃⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔⵠᐃⲆᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⵠΔᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⵠᐃᐃΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃⲆⵠΔⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔⵠᐃᐃⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        ⲆΔⲆ: ᐃᐃ.ΔⵠΔⲆⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠᐃⵠⵠⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔⵠᐃⲆᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆᐃΔⵠⲆⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        ⲆΔⲆ: ᐃᐃ.ΔⲆᐃΔⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⲆΔⵠⵠΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃᐃΔⵠΔⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃⲆᐃΔΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 42,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⲆⵠΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⵠᐃᐃᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠⲆⲆⲆΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆⲆⲆᐃᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ⲆΔⲆ: ᐃᐃ.ⵠΔᐃᐃⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⲆⲆΔⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃΔᐃⵠᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔⵠⲆⵠᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠΔΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃᐃⵠⵠΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔⵠΔⲆⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠⲆⵠᐃᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆᐃⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃᐃⵠΔΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⵠΔⵠᐃᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆᐃⲆΔⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⲆⵠΔⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔΔΔⵠΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔⵠΔΔⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⲆΔⵠΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ⲆΔⲆ: ᐃᐃ.ΔΔⲆΔⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆΔⲆⲆⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆΔⵠⲆᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃΔⵠⲆⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆⵠᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆⵠⵠⵠΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠΔⵠᐃⲆⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔᐃⵠΔΔᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⲆΔⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔⲆᐃⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⲆΔⲆΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⲆΔΔΔⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⵠⵠΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⵠⵠⵠⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃᐃⲆΔΔᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠⵠⲆᐃΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⲆΔᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠᐃᐃΔΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃⵠᐃΔᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆⵠΔⲆΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔΔΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⵠᐃⲆⲆⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆⲆⲆⵠⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃᐃⵠⲆΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⲆⲆᐃΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⵠΔⲆⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔⲆⵠᐃⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⵠΔᐃⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃᐃΔᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⵠΔⲆΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔΔⵠⵠᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⵠΔⲆᐃᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔⵠᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⲆᐃΔᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠⲆⲆᐃᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⵠⲆⲆᐃⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠᐃⲆΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃᐃⲆΔᐃⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔᐃⵠΔᐃⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆᐃⵠⲆΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠᐃΔΔΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆⲆΔⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠΔΔⵠⵠⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⵠⲆⲆⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔΔⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃΔⲆⵠⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⲆΔΔⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⵠⵠⲆⵠΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⲆⵠᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠΔⲆᐃΔⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔΔⲆⵠΔΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆᐃⵠΔⲆᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⵠⵠⲆΔΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⲆⵠᐃΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔⲆΔⵠᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⵠΔⵠⲆⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⲆᐃᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃΔⵠΔⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃᐃᐃⲆΔⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆΔⲆⵠⲆⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⲆᐃⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⲆⵠⲆΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃᐃⵠⵠΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠⲆⵠΔᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⲆⵠΔΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔΔΔⵠΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃΔΔΔⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆΔᐃΔⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆᐃΔΔⵠ,
        ΔⲆⵠ: ᐃᐃ.Ⲇᐃⵠⵠⵠⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⵠᐃⲆⵠᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠᐃⲆᐃᐃᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⲆⲆΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆΔⲆΔⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠᐃⵠᐃᐃΔⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠΔΔᐃⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⲆⲆⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃΔⲆΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⵠᐃⲆⵠⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆΔⵠⵠⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆΔⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠᐃⲆⲆΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃΔⲆΔⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔⵠΔᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        ⲆΔⲆ: ᐃᐃ.ΔⲆᐃΔᐃΔΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⲆᐃⲆᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⵠⵠⵠΔᐃᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔᐃⵠⲆⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆⵠⲆⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃⲆᐃΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔᐃᐃⲆⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⵠⵠΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃΔΔΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⵠΔⵠⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆΔᐃᐃⵠⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⲆΔⲆⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆᐃᐃⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⲆΔⵠⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠⲆⵠⲆΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔⲆᐃΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⵠᐃⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔΔΔⵠⲆⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆⵠΔᐃⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃΔᐃⵠⵠⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 95,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠᐃⲆΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃΔΔᐃⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⵠⲆᐃⲆᐃⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔᐃⵠⵠΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆⲆΔΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⵠⵠⲆⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃᐃΔΔⵠⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠΔᐃⲆΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃᐃⵠⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔΔᐃⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔΔⵠⲆⵠⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⲆᐃΔⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔᐃΔΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆΔᐃⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃⲆᐃⵠⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔᐃⲆⵠΔᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⵠΔΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⵠⵠᐃΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆΔᐃⵠⲆⵠ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆᐃⵠᐃⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⵠⲆᐃᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔΔⵠΔᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃΔⵠᐃΔᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠΔᐃⵠΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔⲆⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆΔᐃⵠᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆΔΔⵠᐃΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔⲆⵠⲆⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⵠⲆⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔΔᐃᐃᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⵠⲆⵠⲆⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔΔⲆⲆΔᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠⲆⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⲆΔΔⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆⵠΔΔⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⵠⵠΔⲆΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⲆⵠⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃ.Ⲇᐃⵠⵠᐃᐃᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃΔΔⲆⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆᐃⵠᐃⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔⲆΔⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⵠⲆⲆⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃⵠⵠⲆⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔᐃⵠΔᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃᐃⵠΔΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⵠᐃΔᐃⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⲆⲆⲆⵠⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆⵠΔΔᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ⲆΔⲆ: ᐃᐃ.ⵠΔΔⲆΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⲆⲆⵠᐃΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⵠⲆⵠⵠⵠᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⵠⲆᐃⵠᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⲆⲆⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠᐃΔⲆⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆⲆⲆⵠⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆΔⲆⲆⲆΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ⲆΔⲆ: ᐃᐃ.Δᐃᐃⵠᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠᐃⵠᐃΔΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆⲆⲆⵠᐃⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆⲆⵠΔⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⵠᐃΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⵠᐃⲆⵠΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃⲆⵠⲆⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⵠᐃⵠⲆᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠᐃⵠΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆᐃⲆᐃⲆΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔⲆⲆᐃⲆⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃᐃᐃΔᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ⲆΔⲆ: ᐃᐃ.ⵠΔΔⵠᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆⵠⲆⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃᐃᐃⵠΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆᐃⲆΔΔᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆⲆΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆᐃΔΔⵠⲆ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃΔⵠᐃⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⵠᐃⵠᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆΔᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔᐃᐃⲆⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠΔⵠⲆΔΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆΔᐃⲆⵠΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃΔⲆᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠⲆⲆⲆΔᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⵠᐃⵠᐃΔᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⲆⲆⵠⲆᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠᐃⵠᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆⲆᐃⲆᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆᐃⵠⵠⵠΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⵠⵠΔⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        ⲆΔⲆ: ᐃᐃ.ΔⵠᐃΔⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆΔⵠⵠΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆΔΔᐃⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔⵠⲆΔⵠⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆⵠΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔΔΔΔⵠⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ΔᐃᐃⵠΔΔΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆΔⵠᐃᐃⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠⲆⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⲆⵠΔΔⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃΔᐃⵠⲆΔ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃᐃⲆΔⵠⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Cursed"
      }, {
        id: 48,
        ⲆΔⲆ: ᐃᐃ.ΔΔᐃⵠΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⲆᐃⵠⲆⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃᐃⲆᐃⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ΔᐃⵠᐃⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ᐃⵠᐃⵠΔΔⵠ,
        Δᐃⵠ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⵠΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⲆᐃΔⵠⵠ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⲆΔⲆⲆⲆᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠⲆⵠⵠᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ᐃⵠᐃⵠΔΔⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔΔᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔΔᐃΔΔⵠΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⲆᐃⲆΔᐃΔᐃ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆᐃᐃⵠᐃⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ᐃⵠᐃⵠΔΔⵠ,
        Δᐃⵠ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ⲆΔⲆ: ᐃᐃ.ΔΔⵠᐃⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⵠⵠⵠⵠΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ⵠⵠᐃᐃΔⵠⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⲆᐃⵠᐃᐃⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ᐃⵠᐃⵠΔΔⵠ,
        Δᐃⵠ: "OmarJr13",
        name: "Blob Skin"
      }, {
        id: 237,
        ⲆΔⲆ: ᐃᐃ.ΔΔⵠΔΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⵠⵠᐃⵠΔ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃᐃⲆⲆⵠΔⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ᐃⵠᐃⲆΔΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ᐃⵠᐃⵠΔΔⵠ,
        Δᐃⵠ: "NotBonnie",
        name: "NotBonnie"
      }, {
        id: 238,
        ⲆΔⲆ: ᐃᐃ.ΔⵠΔᐃᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆᐃⲆⵠᐃ,
        ⵠⵠᐃᐃ: ᐃᐃ.ᐃⵠᐃΔⵠⲆⲆ,
        ⲆⲆⵠᐃ: ᐃᐃ.ⵠΔⲆΔⵠΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ᐃⵠᐃⵠΔΔⵠ,
        Δᐃⵠ: "NotBonnie",
        name: "Cynder"
      }],
      ⲆΔⵠΔ: [{
        id: 0,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⵠⲆΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ΔΔᐃΔⲆΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔΔⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆΔᐃⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⵠⵠⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔⵠⵠᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ⲆΔⲆ: ᐃᐃ.ᐃΔΔⵠⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔΔᐃΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆᐃⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔⲆⲆⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⲆΔⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃᐃⲆΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ⲆΔⲆ: ᐃᐃ.ΔᐃᐃΔᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⵠᐃⵠⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆᐃΔᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔΔⵠⵠⲆΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔⲆᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠΔⲆⵠⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔᐃⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃᐃΔⲆⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⲆⲆⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⲆΔᐃᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆᐃⲆᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⲆⲆΔᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ⲆΔⲆ: ᐃᐃ.ΔⵠΔΔⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⵠⵠⲆⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔⵠΔΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⲆᐃᐃᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆᐃⵠᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃΔᐃΔⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⲆᐃⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆᐃΔⲆᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔⵠΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⵠᐃⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ⲆΔⲆ: ᐃᐃ.ⵠΔᐃⵠΔΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃΔⵠΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆΔΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⲆⲆΔⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆΔΔᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⵠⵠΔⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆⵠⲆⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⵠⲆΔⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⲆⵠᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆᐃⵠᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⲆΔᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠΔᐃⵠⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔΔΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃᐃᐃᐃⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        ⲆΔⲆ: ᐃᐃ.ΔⵠΔⵠⵠΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃΔⲆΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠᐃⵠᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠᐃⲆⵠᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆΔⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆΔΔᐃⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⲆⲆᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⲆΔᐃᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠᐃᐃⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃΔΔΔΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⵠⵠΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⵠᐃⲆⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⵠⲆᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆᐃⵠⲆⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔⵠⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⵠΔΔⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔΔⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠᐃⵠΔⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠᐃΔᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆⵠⲆΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⵠⲆⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆᐃᐃΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆᐃⵠΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠᐃΔⵠⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆⲆΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⲆⲆΔᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        ⲆΔⲆ: ᐃᐃ.ⲆΔΔⵠⲆΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆΔⵠⲆᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⵠⲆⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔⲆⲆⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⵠᐃᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃΔᐃΔⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        ⲆΔⲆ: ᐃᐃ.ΔⵠΔⲆΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⲆⵠⲆⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔⲆⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⵠᐃⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃᐃⲆⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆᐃⲆᐃⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆΔΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⵠⵠⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃΔΔⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔΔⲆⵠᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃᐃⲆⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆⲆᐃΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⲆⲆⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⵠΔᐃᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆᐃΔΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⵠⲆⲆᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ⲆΔⲆ: ᐃᐃ.ΔᐃᐃⲆⵠΔΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⲆΔⵠⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃᐃᐃΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⵠᐃΔΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⵠⲆᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃⲆᐃᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠΔΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠΔΔⵠΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠΔⲆᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃᐃΔⵠⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠⵠⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⵠⵠᐃᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ⲆΔⲆ: ᐃᐃ.ΔΔᐃΔΔⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⲆᐃᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆⵠᐃΔΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃΔᐃⲆᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃΔⵠᐃᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⲆⲆΔᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        ⲆΔⲆ: ᐃᐃ.ΔΔᐃⵠΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔΔⲆⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠᐃᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃΔΔⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ⲆΔⲆ: ᐃᐃ.Δⵠⵠⵠᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆΔΔⵠᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠΔⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔΔΔⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆΔⵠⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆΔⵠⲆⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ⲆΔⲆ: ᐃᐃ.ΔⵠΔᐃΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⲆᐃΔΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ⲆΔⲆ: ᐃᐃ.ⵠΔᐃΔⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆᐃΔⵠᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠΔⵠᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⲆᐃⲆᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ⲆΔⲆ: ᐃᐃ.ΔΔⲆⵠⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⵠΔⵠⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃᐃⵠⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⵠⵠⵠⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⵠᐃΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⵠᐃΔᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆⵠⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔᐃΔΔᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆⵠⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠΔⲆΔⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        ⲆΔⲆ: ᐃᐃ.ⲆΔᐃᐃⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠΔⲆΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        ⲆΔⲆ: ᐃᐃ.ΔΔⵠᐃΔΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⲆⲆᐃⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃΔⵠⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠΔⲆΔΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ⲆΔⲆ: ᐃᐃ.ᐃΔᐃΔⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔΔᐃᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ⲆΔⲆ: ᐃᐃ.ᐃΔᐃᐃⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔᐃᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⵠΔⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔΔᐃⲆⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⲆⵠΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆᐃⵠΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⵠⵠᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔΔⲆⵠᐃⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ⲆΔⲆ: ᐃᐃ.ΔᐃᐃⵠᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⵠⵠΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃΔᐃᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆᐃⲆⵠⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔⵠⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠΔᐃⲆᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ⲆΔⲆ: ᐃᐃ.ᐃΔΔⲆᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃᐃⲆⵠⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Engineer Bag"
      }],
      ⲆⵠⲆᐃⲆ: [{
        id: 0,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆΔΔΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⵠⲆᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⲆⵠᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔΔⵠᐃᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⵠⲆΔΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⵠᐃⵠⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ⲆΔⲆ: ᐃᐃ.ΔΔΔᐃΔΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔᐃΔⲆΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃᐃΔΔΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔΔⲆⵠᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆᐃⵠᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⲆⵠⲆᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⵠⲆΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔΔⵠⵠΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⵠΔⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠΔΔΔⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆᐃΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃΔⵠⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⵠⲆᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⵠΔⲆᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆⲆⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃΔΔᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ⲆΔⲆ: ᐃᐃ.ΔⵠᐃᐃⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔᐃᐃⲆᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⲆΔΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⵠⲆΔⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⵠⲆⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔΔΔⲆᐃⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠᐃΔⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⵠⵠᐃⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⵠⲆⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⵠᐃΔΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ⲆΔⲆ: ᐃᐃ.ᐃΔΔΔⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃΔΔΔᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ⲆΔⲆ: ᐃᐃ.ᐃΔΔⵠⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃΔⲆⵠΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⵠΔⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃᐃⵠⲆΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠΔⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃΔΔᐃⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ⲆΔⲆ: ᐃᐃ.ΔΔΔⵠᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠΔⲆⵠᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔⲆΔΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃΔΔΔⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠⲆⲆⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠᐃΔⵠⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆᐃΔΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔΔΔᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔΔⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⵠΔΔᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆᐃᐃΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃᐃᐃᐃⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        ⲆΔⲆ: ᐃᐃ.ΔᐃᐃΔᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⲆΔΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⵠⲆΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠᐃⲆᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⵠⵠⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⵠⲆⲆᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⲆᐃᐃᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔΔᐃⵠⲆⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆᐃᐃΔΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠΔⵠᐃⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ⲆΔⲆ: ᐃᐃ.ΔⲆᐃⵠⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⵠᐃⵠΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆΔⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆΔΔΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ⲆΔⲆ: ᐃᐃ.ΔᐃᐃⲆⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⲆΔᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ⲆΔⲆ: ᐃᐃ.ΔΔⲆᐃⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⲆΔᐃΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⲆΔΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔΔᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆΔᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ΔΔᐃᐃΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        ⲆΔⲆ: ᐃᐃ.ⵠΔΔᐃᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃᐃΔΔΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃᐃΔⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃΔᐃᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆⵠⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔᐃᐃᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆᐃⵠⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⲆᐃᐃⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ⲆΔⲆ: ᐃᐃ.ΔⵠΔᐃⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⵠᐃΔⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆᐃᐃⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠΔᐃⵠⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⵠΔⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠΔΔΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠⵠΔⵠΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆᐃⵠⵠᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆᐃᐃΔΔ,
        ΔⲆⵠ: ᐃᐃ.Ⲇⵠⵠᐃⵠⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⵠᐃⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⲆᐃⵠⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⲆⲆⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆΔΔⵠⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        ⲆΔⲆ: ᐃᐃ.ΔΔᐃⲆΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⲆᐃᐃᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⲆⲆᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⲆΔΔΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔΔᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔⲆΔⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃΔⲆⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃΔⲆⲆⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⵠΔⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔᐃΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔⵠΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.Δⵠᐃⵠⵠᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆΔⵠᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃΔᐃⵠⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ⲆΔⲆ: ᐃᐃ.ΔⵠᐃⵠⵠᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃΔᐃΔΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ⲆΔⲆ: ᐃᐃ.ᐃΔᐃⵠΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⵠⵠᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ⲆΔⲆ: ᐃᐃ.ⲆΔᐃΔΔΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃΔᐃⵠⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠⵠⵠΔΔ,
        ΔⲆⵠ: ᐃᐃ.ΔΔⲆⲆΔⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠΔⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆⲆⲆⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃᐃⵠᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⲆᐃᐃⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆⵠⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⵠⲆⲆⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠⵠⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆΔⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆᐃΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠⵠⲆⵠⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⲆⵠᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆⵠΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ⲆΔⲆ: ᐃᐃ.ΔΔᐃᐃᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃΔΔΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃΔᐃᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔⲆᐃⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆΔⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⲆᐃⵠΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔΔⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔΔΔⲆᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⲆⲆΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠⲆⲆⵠᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ⲆΔⲆ: ᐃᐃ.ΔΔⲆⵠΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆΔᐃⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃᐃⲆⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔᐃⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⲆⵠᐃΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔⵠᐃᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆᐃΔⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆΔᐃΔΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⵠᐃⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆΔΔⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠᐃΔᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔΔᐃΔⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔᐃⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆⵠᐃᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        ⲆΔⲆ: ᐃᐃ.ᐃΔΔᐃⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃᐃΔⲆⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆᐃⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃΔᐃⵠΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }],
      ΔⵠⲆⲆⲆ: [{
        id: 0,
        ⲆΔⲆ: ᐃᐃ.ΔⵠᐃⵠΔΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⲆᐃΔᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆⲆᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⲆⵠⵠᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ⲆΔⲆ: ᐃᐃ.ΔΔΔΔⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⲆᐃᐃᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ⲆΔⲆ: ᐃᐃ.ΔⵠᐃⵠΔⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃᐃΔΔᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃΔⵠΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠΔᐃᐃⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⲆᐃΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⲆΔⲆⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ⲆΔⲆ: ᐃᐃ.ⲆΔᐃΔⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃᐃᐃⲆᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠΔⵠⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⵠⵠΔⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆⲆⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⵠᐃⵠΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⲆⲆᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠᐃⲆΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔΔⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⵠᐃⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⲆᐃⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠΔⵠⲆΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        ⲆΔⲆ: ᐃᐃ.ⲆΔΔⲆᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠᐃⵠᐃⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃᐃᐃⵠΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔᐃⵠⵠⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔᐃⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⵠᐃⵠⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆⵠᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⲆΔⲆᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ⲆΔⲆ: ᐃᐃ.ΔΔᐃΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆΔⵠⲆⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ⲆΔⲆ: ᐃᐃ.ⵠΔΔⵠᐃΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⲆΔᐃΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⵠⲆΔΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆΔᐃⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ⲆΔⲆ: ᐃᐃ.ΔⲆᐃⲆⲆⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔΔⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⵠⲆⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ΔΔⵠΔⵠᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⵠⲆᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔΔᐃᐃᐃⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⵠᐃΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⲆⲆᐃⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ⲆΔⲆ: ᐃᐃ.ΔΔΔⵠᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⲆΔⵠᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃΔⵠⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔᐃᐃᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ⲆΔⲆ: ᐃᐃ.ΔΔⵠᐃᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔᐃΔᐃⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⵠⲆⲆⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔΔⵠΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆΔⵠⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⵠΔⲆⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔΔⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⲆⲆΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        ⲆΔⲆ: ᐃᐃ.ΔᐃᐃΔᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔⵠᐃᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        ⲆΔⲆ: ᐃᐃ.ΔΔΔΔⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⲆᐃⲆᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⲆⵠᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠΔⲆᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⵠᐃⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠΔⲆΔⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⵠⵠᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆΔᐃᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃᐃⲆᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⵠⲆᐃΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⲆⲆⲆᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆΔΔⵠᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆᐃΔⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃ.Δⵠⵠⵠᐃⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆⵠⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆᐃⵠᐃᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        ⲆΔⲆ: ᐃᐃ.ΔΔⲆⲆⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔⲆᐃΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔᐃⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠᐃⵠΔᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔⲆΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⵠⲆⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⵠⵠΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⲆᐃⵠΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆᐃᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠⲆΔⵠᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ⲆΔⲆ: ᐃᐃ.ΔΔᐃᐃⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔΔⲆⲆⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⵠⵠΔⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠΔⲆᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆᐃⲆΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠᐃᐃⵠΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃΔᐃⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⵠⵠᐃᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠᐃᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⵠΔⲆΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⵠᐃᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⵠΔⵠᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        ⲆΔⲆ: ᐃᐃ.ⵠΔᐃΔΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔΔΔᐃᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Cursed Book"
      }],
      ᐃⵠΔⲆΔ: [{
        id: 0,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆᐃᐃᐃⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆᐃᐃᐃⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆΔⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⵠΔᐃⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ⲆΔⲆ: ᐃᐃ.ΔᐃᐃᐃΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ΔΔⲆⲆⲆΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃᐃⲆⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⲆⵠⲆΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔΔᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⵠⵠᐃΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆᐃⲆΔᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⵠᐃΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃΔΔΔⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⵠⲆᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⵠⵠⲆⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃΔⵠᐃΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔᐃⵠᐃΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔⲆⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔᐃΔᐃⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃᐃΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠᐃᐃᐃΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ⲆΔⲆ: ᐃᐃ.ⲆΔΔᐃⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⵠΔⲆᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔᐃΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔᐃΔⲆᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔᐃⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃᐃᐃΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ⲆΔⲆ: ᐃᐃ.ᐃΔᐃⲆᐃⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⵠᐃⲆΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ΔΔᐃⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⲆΔⵠᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⲆⵠᐃΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⵠⵠⵠΔΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⲆᐃⲆⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆᐃⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⲆᐃΔᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃⵠⲆⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⲆΔⵠΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆΔᐃⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⲆⵠΔΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆᐃᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠΔⲆⵠⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⵠⵠΔᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆΔᐃΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆᐃᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔⲆⲆΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃᐃⲆⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⲆᐃᐃΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⵠⵠᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⵠⲆᐃⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ⲆΔⲆ: ᐃᐃ.ⲆΔΔⲆⵠΔΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃᐃΔΔΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔⲆⵠᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⲆⵠⵠⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃᐃᐃΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠΔΔΔⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ⲆΔⲆ: ᐃᐃ.ΔᐃᐃⵠᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠᐃᐃᐃⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        ⲆΔⲆ: ᐃᐃ.ⲆΔᐃⵠΔⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠΔⵠⲆΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃΔΔⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆᐃᐃⵠⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⵠⲆᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ΔΔᐃⵠⲆⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠᐃᐃΔⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⵠⵠⲆⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃⵠⲆᐃⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆΔⲆᐃⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆΔⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆΔΔⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃᐃⲆᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⲆⵠΔΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⲆᐃⵠᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆⵠΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆΔΔⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⲆⲆⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⲆᐃΔⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⵠᐃᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⵠⵠᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔⵠⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⵠⲆⲆⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ⲆΔⲆ: ᐃᐃ.ΔΔΔΔΔΔΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆᐃᐃΔⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆᐃⲆⲆᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⲆᐃᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆⵠΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃᐃᐃᐃᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔΔⲆⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⲆⲆⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⲆᐃΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⲆᐃᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⵠⵠᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠⲆᐃⵠⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆⵠᐃᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⵠΔⵠΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔΔⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⵠᐃΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        ⲆΔⲆ: ᐃᐃ.ⲆΔᐃΔᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆΔᐃⲆⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        ⲆΔⲆ: ᐃᐃ.ΔⲆᐃⲆⲆᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⲆΔⵠᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆΔⲆⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⵠⵠΔΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠⲆᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⲆΔᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⵠⵠⵠⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠΔⵠᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        ⲆΔⲆ: ᐃᐃ.ⵠΔΔⵠⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⵠΔⲆᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆΔⲆⲆ,
        Δᐃⵠ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠΔΔⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔΔᐃⵠⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠΔΔᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃΔⵠⲆⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔᐃᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⵠⵠⲆⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⵠΔΔΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔΔΔⵠⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ⲆΔⲆ: ᐃᐃ.ᐃΔᐃΔⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔⲆᐃᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ⲆΔⲆ: ᐃᐃ.ⲆΔⵠΔᐃΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⲆⲆⲆΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⲆⵠⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⵠᐃΔᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆⵠΔᐃⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⵠⲆᐃᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ⲆΔⲆ: ᐃᐃ.ΔΔⵠᐃⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⵠⵠⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⵠΔⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔΔⲆⵠΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⲆⵠᐃⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆᐃⵠⲆΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⲆⲆⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆΔᐃᐃΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠᐃᐃⵠΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⵠⵠⵠᐃⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆⲆΔΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆᐃΔΔᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ⲆΔⲆ: ᐃᐃ.ΔⲆᐃⲆᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃⲆⲆᐃᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⵠⵠⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠᐃⲆᐃⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ⲆΔⲆ: ᐃᐃ.ᐃΔΔΔΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆᐃΔⲆᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃΔⵠᐃᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⵠⲆⵠᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆᐃⵠⵠⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⲆⵠⵠᐃΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠᐃⲆⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠΔⵠⲆᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ⲆΔⲆ: ᐃᐃ.ⵠΔⲆⲆᐃᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⵠⲆⲆΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠΔⵠΔΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆΔᐃⲆⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⲆⵠⵠⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⵠⵠⵠΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃᐃᐃⲆΔΔ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃⵠⲆᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⲆᐃⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⵠΔⵠⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⵠΔⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠⵠⵠᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        ⲆΔⲆ: ᐃᐃ.ⲆΔᐃⵠⲆⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⲆⲆᐃΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆᐃⵠⵠΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⵠΔⵠⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⵠⵠⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⲆⲆᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆΔⲆΔᐃᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⵠⵠΔᐃᐃᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠᐃᐃⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 27,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⵠⲆⵠⵠⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⵠⵠᐃⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ⲆΔⲆ: ᐃᐃ.ΔⲆΔⲆⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃᐃⲆΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⵠᐃⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔΔⲆΔΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ⲆΔⲆ: ᐃᐃ.ⲆⲆⲆΔᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆⲆᐃᐃⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ⲆΔⲆ: ᐃᐃ.ΔⵠΔᐃⵠⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠⲆᐃΔᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ⲆΔⲆ: ᐃᐃ.ᐃᐃⵠⵠⲆΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠᐃⵠΔⵠᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ⲆΔⲆ: ᐃᐃ.ᐃⵠⵠⲆⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔⲆⲆΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ⲆΔⲆ: ᐃᐃ.ΔΔⲆᐃΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔⵠⵠΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        ⲆΔⲆ: ᐃᐃ.ΔⵠⵠⵠᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ⵠΔᐃΔΔΔⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⵠⲆⲆⵠ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 60,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠΔⲆΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠΔΔⵠⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆⲆⵠⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⲆᐃⵠⲆΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⵠⵠΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠⵠᐃⵠⵠΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⵠⵠΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃᐃΔⵠⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ⲆΔⲆ: ᐃᐃ.ⲆᐃᐃⵠΔᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃΔⲆᐃⵠⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ⲆΔⲆ: ᐃᐃ.ⵠⵠⵠΔᐃⵠΔ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃΔⲆᐃⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⵠⵠᐃⵠᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠᐃⲆⵠΔᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ⲆΔⲆ: ᐃᐃ.ⵠᐃΔΔᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆᐃᐃΔᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆⵠΔⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⵠΔΔⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        ⲆΔⲆ: ᐃᐃ.ᐃΔⲆᐃⵠⲆⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆΔⵠⵠⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Jarred Horns"
      }, {
        id: 98,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆΔΔⲆᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔΔᐃⲆⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⲆⲆᐃΔΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆⵠΔⲆⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⵠⵠᐃΔⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃⵠΔΔⵠΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        ⲆΔⲆ: ᐃᐃ.ΔᐃⵠᐃᐃⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆⵠⵠⵠΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⵠᐃⵠᐃⲆ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆⵠⲆⵠⵠⵠ,
        ⲆⵠΔ: ⲆΔⵠ.Δⵠᐃᐃ,
        Δᐃⵠ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆᐃᐃⲆΔᐃ,
        ΔⲆⵠ: ᐃᐃ.ΔᐃᐃᐃᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠΔΔᐃⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆᐃΔⲆᐃΔΔ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⲆⲆⲆⲆⲆ,
        ΔⲆⵠ: ᐃᐃ.ⲆⲆᐃΔᐃⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆᐃᐃⲆΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ⵠᐃⵠΔⵠⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        ⲆΔⲆ: ᐃᐃ.ⲆΔΔΔⲆⵠⲆ,
        ΔⲆⵠ: ᐃᐃ.ΔΔᐃᐃᐃⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ⲆΔⲆ: ᐃᐃ.ΔⲆⵠᐃⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ΔⵠᐃⵠΔⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ⲆΔⲆ: ᐃᐃ.ΔΔⵠⵠΔⲆᐃ,
        ΔⲆⵠ: ᐃᐃ.ᐃⲆΔⵠⵠⲆⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ⲆΔⲆ: ᐃᐃ.ⲆⵠᐃⲆⲆⲆΔ,
        ΔⲆⵠ: ᐃᐃ.ⲆΔⵠᐃⲆⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆΔⵠᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔᐃⲆⵠⲆⵠ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ⲆΔⲆ: ᐃᐃ.ᐃⲆⵠᐃᐃΔΔ,
        ΔⲆⵠ: ᐃᐃ.ΔⲆⵠⲆᐃⲆᐃ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ⲆΔⲆ: ᐃᐃ.ΔᐃΔⵠⵠΔⵠ,
        ΔⲆⵠ: ᐃᐃ.ᐃΔⲆΔⲆᐃⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ⲆΔⲆ: ᐃᐃ.ⵠⲆⲆᐃᐃᐃΔ,
        ΔⲆⵠ: ᐃᐃ.ᐃᐃΔΔⲆΔⲆ,
        ⲆⵠΔ: ⲆΔⵠ.ⲆⲆⵠⵠᐃ,
        Δᐃⵠ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    qf.ᐃΔᐃΔⲆⲆᐃ = ΔⲆΔᐃΔⲆⵠ(ᐃΔⲆΔ.ΔΔᐃⲆⵠ, 21);
    qf.ⲆⵠⲆᐃᐃⵠΔ = ΔⲆΔᐃΔⲆⵠ(ᐃΔⲆΔ.ΔΔᐃⲆⵠ, 20);
    ⵠⵠ[255] = [];
    ⵠⵠ[7] = [];
    ⵠⵠ[250] = [];
    ⵠⵠ[28] = [];
    ⵠⵠ[29] = [];
    ⵠⵠ[796] = [];
    for (var a = 0; ᐃΔⲆΔ.ΔΔᐃⲆⵠ.length > a; a++) {
      ⵠⵠ[255][a] = [ᐃΔⲆΔ.ΔΔᐃⲆⵠ[a].ⲆΔⲆ, ᐃΔⲆΔ.ΔΔᐃⲆⵠ[a].ΔⲆⵠ];
      ⵠⵠ[7][a] = [ᐃΔⲆΔ.ΔΔᐃⲆⵠ[a].ⵠⵠᐃᐃ, ᐃΔⲆΔ.ΔΔᐃⲆⵠ[a].ⲆⲆⵠᐃ];
    }
    for (a = 0; ᐃΔⲆΔ.ΔⵠⲆⲆⲆ.length > a; a++) {
      ⵠⵠ[28][a] = [ᐃΔⲆΔ.ΔⵠⲆⲆⲆ[a].ⲆΔⲆ, ᐃΔⲆΔ.ΔⵠⲆⲆⲆ[a].ΔⲆⵠ];
    }
    for (a = 0; a < ᐃΔⲆΔ.ⲆⵠⲆᐃⲆ.length; a++) {
      ⵠⵠ[250][a] = [ᐃΔⲆΔ.ⲆⵠⲆᐃⲆ[a].ⲆΔⲆ, ᐃΔⲆΔ.ⲆⵠⲆᐃⲆ[a].ΔⲆⵠ];
    }
    for (a = 0; a < ᐃΔⲆΔ.ⲆΔⵠΔ.length; a++) {
      ⵠⵠ[29][a] = [ᐃΔⲆΔ.ⲆΔⵠΔ[a].ⲆΔⲆ, ᐃΔⲆΔ.ⲆΔⵠΔ[a].ΔⲆⵠ];
    }
    for (a = 0; ᐃΔⲆΔ.ᐃⵠΔⲆΔ.length > a; a++) {
      ⵠⵠ[796][a] = [ᐃΔⲆΔ.ᐃⵠΔⲆΔ[a].ⲆΔⲆ, ᐃΔⲆΔ.ᐃⵠΔⲆΔ[a].ΔⲆⵠ];
    }
  };
  const ld = 18;
  const ud = 2;
  function bd(b, c, d, e, f, g) {
    if (g * 2 > e) {
      g = e / 2;
    }
    if (f < g * 2) {
      g = f / 2;
    }
    if (g < 0) {
      g = 0;
    }
    b.beginPath();
    b.moveTo(c + g, d);
    b.arcTo(c + e, d, c + e, d + f, g);
    b.arcTo(c + e, d + f, c, d + f, g);
    b.arcTo(c, d + f, c, d, g);
    b.arcTo(c, d, c + e, d, g);
    b.closePath();
  }
  const dd = 14;
  function vd(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  function md(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, e * (Math.PI * 2));
  }
  const cd = 3;
  function pd(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var i = [{
      x: d,
      y: 0
    }];
    var a = [];
    for (var j = 1; j < c; j++) {
      i.push({
        x: d * Math.sin(j * f),
        y: Math.cos(j * f) * d
      });
      var k = i.length;
      a.push(ⵠᐃⵠ.ΔⲆᐃᐃΔⵠⵠ(i[k - 2], i[k - 1]));
    }
    a.push(ⵠᐃⵠ.ΔⲆᐃᐃΔⵠⵠ(i[i.length - 1], i[0]));
    var l = a[a.length - 1];
    b.moveTo(l.x, l.y);
    for (j = 0; j < c; j++) {
      b.arcTo(i[j].x, i[j].y, a[j].x, a[j].y, e);
    }
    b.closePath();
  }
  const Cd = 3;
  function Td(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var a = b * 8;
    var h = e.measureText(c).width + a * 2;
    d.width = h;
    d.height = f;
    bd(e, 0, 0, h, f, b * 10);
    e.globalAlpha = 0.5;
    gd(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, a, f / 2);
    return d;
  }
  function fd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  const zd = 3;
  function yd(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 120;
    var k = c * 110;
    var a = j / 2;
    var m = k / 2;
    var n = c * 20;
    var h = c * 112;
    var g = c * 82;
    var l = h / 2;
    var b = g / 2;
    var d = c * 4;
    f.width = j;
    f.height = k;
    i.globalAlpha = 1;
    i.translate(a, m);
    bd(i, -l, -b, h, g, n);
    gd(i, e, e, d);
    return f;
  }
  const wd = 14;
  const Pd = 1;
  function kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    gd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    gd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    return d;
  }
  function Ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    vd(e, a * 26, a * 26, a * 9);
    gd(e, c[0]);
    vd(e, a * 56, a * 36, a * 9);
    gd(e, c[1]);
    vd(e, a * 40, a * 50, a * 9);
    gd(e, c[2]);
    e.globalAlpha = 1;
    vd(e, a * 26, a * 26, a * 5);
    gd(e, c[0]);
    vd(e, a * 56, a * 36, a * 5);
    gd(e, c[1]);
    vd(e, a * 40, a * 50, a * 5);
    gd(e, c[2]);
    return d;
  }
  function xd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    vd(e, a * 11, a * 11, a * 10);
    gd(e, c[0]);
    e.globalAlpha = 0.7;
    vd(e, a * 11, a * 11, a * 7);
    gd(e, c[0]);
    e.globalAlpha = 1;
    vd(e, a * 11, a * 11, a * 4);
    gd(e, c[0]);
    return d;
  }
  const Jd = 0;
  function Md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    bd(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    bd(e, a * -8, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    bd(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    gd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    bd(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    e.restore();
    gd(e, c[3], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    bd(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    gd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    gd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    gd(e, c[1]);
    return d;
  }
  function Bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    bd(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 69.5, a * 110);
    bd(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    bd(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    gd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    gd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    gd(e, c[3], c[1], a * 6);
    return d;
  }
  function Ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    bd(e, a * -8, a * -67, a * 16, a * 134, a * 1);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    bd(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    bd(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    gd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123, a * 179.5);
    bd(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    e.restore();
    gd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    bd(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    gd(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    gd(e, c[1]);
    return d;
  }
  const Dd = 9;
  const Id = 2;
  function Sd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    bd(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    gd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    bd(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    gd(e, c[1], c[2], a * 4);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    gd(e, c[2], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    gd(e, c[5], c[6], a * 4);
    vd(e, a * 68, a * 111.29513549804688, a * 15);
    gd(e, c[7], c[8], a * 4);
    vd(e, a * 123, a * 111.29510498046875, a * 15);
    gd(e, c[7], c[8], a * 4);
    vd(e, a * 63, a * 106, a * 5);
    gd(e, c[9]);
    vd(e, a * 118, a * 106, a * 5);
    gd(e, c[9]);
    return d;
  }
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    bd(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    gd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    bd(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    gd(e, c[1], c[2], a * 4);
    e.translate(a * 2, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    return d;
  }
  const _d = 14;
  function Fd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 40;
    var a = b * 40;
    e.width = i;
    e.height = a;
    var j = i * b / 2;
    var k = b * a / 2;
    var l = b * 15;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    vd(f, 0, 0, l);
    gd(f, d[0]);
    l = b * 5;
    j = b * 2;
    k = b * 1;
    f.translate(j, k);
    f.globalAlpha = 1;
    vd(f, 0, 0, l);
    gd(f, d[1]);
    f.restore();
    return e;
  }
  function Rd(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 32;
    var a = c * 32;
    var n = k / 2;
    var o = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 5;
    var g = c * 28;
    var l = h / 2;
    var b = g / 2;
    j.translate(c * 0, c * 0);
    j.translate(n, o);
    if (f == 1) {
      vd(j, 0, 0, c * 10);
      gd(j, e[2], e[2], c * 3);
      for (var d = 0; d < 4; d++) {
        bd(j, -l, -b, h, g, c * 2);
        j.rotate(Math.PI / 4);
        gd(j, e[2], e[2], c * 4);
      }
    }
    vd(j, 0, 0, c * 10);
    gd(j, e[0], e[1], c * 1.5);
    for (d = 0; d < 4; d++) {
      bd(j, -l, -b, h, g, c * 2);
      j.rotate(Math.PI / 4);
      gd(j, e[0], e[1], c * 1.5);
    }
    vd(j, 0, 0, c * 10);
    gd(j, e[0]);
    vd(j, 0, 0, c * 4);
    gd(j, e[2], e[1], c * 1.5);
    j.globalCompositeOperation = "destination-out";
    vd(j, 0, 0, c * 4);
    gd(j, e[0], e[1], c * 2);
    j.globalCompositeOperation = "source-over";
    vd(j, 0, 0, c * 4);
    gd(j, w, e[1], c * 2);
    return i;
  }
  function jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    gd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    gd(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    gd(e, undefined, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    gd(e, c[3], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    gd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    gd(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    gd(e, undefined, c[1], a * 14);
    vd(e, a * 161, a * 201, a * 13);
    gd(e, c[5]);
    vd(e, a * 216, a * 205, a * 8.06225774829855);
    gd(e, c[5]);
    vd(e, a * 216, a * 175, a * 6.708203932499369);
    gd(e, c[5]);
    vd(e, a * 271, a * 191, a * 5.0990195135927845);
    gd(e, c[5]);
    vd(e, a * 206, a * 180, a * 11.180339887498949);
    gd(e, c[5]);
    return d;
  }
  function Gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    gd(e, vs, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    gd(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    gd(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    gd(e, undefined, c[1], a * 2);
    return d;
  }
  function Wd(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var n = (r = f * 125) / 2;
    var a = (t = f * 95) / 2;
    var o = f * 10;
    var q = f * 8;
    var h = f * 112;
    var g = f * 82;
    var l = h / 2;
    var b = g / 2;
    var d = f * 4;
    j.width = r;
    j.height = t;
    k.translate(n - f * 4, a + f * 4);
    k.globalAlpha = e ? 0.5 : 1;
    bd(k, -l, -b, h, g, o);
    gd(k, i[0]);
    k.globalAlpha = 1;
    k.translate(0, -q);
    bd(k, -l, -b, h, g, o);
    gd(k, i[1], i[2], d);
    var r = f * 55;
    var t = f * 45;
    o = 5;
    k.translate(f * -40, f * -30);
    bd(k, 0, 0, r, t, o);
    gd(k, i[3]);
    var u = Vd(f * 0.7, i[3]);
    k.drawImage(u, f * 45, f * -25);
    u = Vd(f * 0.7, i[3]);
    k.drawImage(u, f * 45, f * 15);
    u = Vd(f * 1.2, i[3]);
    k.drawImage(u, f * 28, f * -30);
    r = f * 15;
    t = f * 70;
    o = f * 5;
    k.translate(f * 78, f * -5);
    bd(k, 0, 0, r, t, o);
    gd(k, i[4]);
    r = f * 9;
    t = f * 50;
    o = f * 3;
    k.translate(f * -20, f * 20);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    bd(k, 0, 0, r, t, o);
    gd(k, i[5]);
    k.translate(f * -20, f * 29);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(0, 0);
    k.lineTo(0, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    gd(k, null, i[5], f * 8);
    return j;
  }
  function Ld(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    bd(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    gd(d, b[0], b[0], a * 4);
    d.translate(a * 2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    gd(d, b[0], b[0], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    bd(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    gd(d, b[0], b[0], a * 4);
    return c;
  }
  function Nd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    bd(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    gd(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    bd(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    gd(e, b[2], b[1], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    bd(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    gd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    bd(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    gd(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    bd(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    gd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    bd(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    gd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    bd(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    gd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    bd(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    gd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    bd(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    gd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    bd(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
    e.restore();
    gd(e, b[3], b[3], a * 10);
    e.save();
    e.translate(a * 197, a * 299);
    bd(e, a * 85, a * -9, a * -170, a * 18, a * 10);
    e.restore();
    gd(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    gd(e, al, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    gd(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    gd(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    gd(e, Lq, b[1], a * 12);
    if (c == 0) {
      e.scale(2, 2);
      e.translate(a * -7, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      gd(e, b[4], b[4], a * 5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      gd(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      gd(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      gd(e, b[4], b[4], a * 20);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      gd(e, Lq, b[0], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      gd(e, undefined, b[0], a * 20);
      vd(e, a * 142, a * 221, a * 16.1245154965971);
      gd(e, b[0]);
    }
    return d;
  }
  function qd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    gd(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    gd(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    gd(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    gd(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    gd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    gd(d, Bj, b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    gd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    gd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    gd(d, b[3]);
    vd(d, a * 77, a * 107, a * 6);
    gd(d, b[2]);
    vd(d, a * 110, a * 107, a * 6);
    gd(d, b[2]);
    vd(d, a * 75, a * 105, a * 3);
    gd(d, b[4]);
    vd(d, a * 108, a * 105, a * 3);
    gd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    gd(d, b[1]);
    return c;
  }
  function Od(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    gd(d, b[0]);
    return c;
  }
  function Hd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 54.585977194239184, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 57.63465889766331, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 50, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 54, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    pd(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    pd(e, 6, a * 49.49747468305833, a * 1);
    e.restore();
    gd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    gd(e, w, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    gd(e, undefined, c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    pd(e, 6, a * 30, a * 15);
    e.restore();
    gd(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    pd(e, 6, a * 30, a * 15);
    e.restore();
    gd(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    pd(e, 6, a * 30, a * 15);
    e.restore();
    gd(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    pd(e, 6, a * 30, a * 15);
    e.restore();
    gd(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    pd(e, 6, a * 30, a * 15);
    e.restore();
    gd(e, c[3]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    pd(e, 6, a * 30, a * 15);
    e.restore();
    gd(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    pd(e, 6, a * 30, a * 15);
    e.restore();
    gd(e, c[3]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    pd(e, 6, a * 30, a * 15);
    e.restore();
    gd(e, c[3]);
    return d;
  }
  function Ud(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    vd(d, a * 213.5, a * 256.75, a * 75);
    gd(d, b[5]);
    vd(d, a * 213.5, a * 175.75, a * 25);
    gd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -5);
    d.globalAlpha = 1;
    vd(d, a * 213.5, a * 256.75, a * 75);
    gd(d, b[3]);
    vd(d, a * 213.5, a * 175.75, a * 25);
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    vd(d, a * 213.5, a * 256.75, a * 70);
    gd(d, b[0]);
    vd(d, a * 213.5, a * 175.75, a * 20);
    gd(d, b[0]);
    vd(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    vd(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    vd(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    vd(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    bd(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    bd(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  function Yd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var a = b * 55;
    var h = b * 8;
    e.width = g;
    e.height = a;
    f.translate(b * -65, b * -55 + h);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    gd(f, d[0], d[1], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    gd(f, d[2], d[3], 3);
    return e;
  }
  function Kd(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 200;
    var f = b * 200;
    c.width = e;
    c.height = f;
    var g = nu(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(g, 10, 10);
    g = xu(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 21, 20);
    g = xu(0.9, Uq, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 38, 28);
    g = xu(0.9, y, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 15, 37);
    g = xu(0.9, Sl, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 32, 45);
    return c;
  }
  function Vd(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 100;
    var k = c * 100;
    var a = j / 2;
    var m = k / 2;
    f.width = j;
    f.height = k;
    var n = c * 5;
    var h = c * 28;
    var g = n / 2;
    var l = h / 2;
    i.translate(a, m);
    for (var b = 0; b < 4; b++) {
      bd(i, -g, -l, n, h, c * 2);
      i.rotate(Math.PI / 4);
      gd(i, e);
    }
    i.arc(0, 0, c * 10, 0, Math.PI * 2);
    gd(i, e);
    i.globalCompositeOperation = "destination-out";
    vd(i, 0, 0, c * 4);
    i.fill();
    return f;
  }
  function Zd(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Xd(a) {
    return rg.String.fromCharCode(a);
  }
  function $d(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 240;
    g.globalAlpha = 0.5;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    gd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    gd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    gd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    gd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    gd(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    gd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    gd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    gd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    gd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    gd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 59, b * 99);
    g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    g.closePath();
    gd(g, d[3], d[2], b * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 47, b * 149);
      g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      g.closePath();
      gd(g, d[1]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 40, b * 139);
      g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      g.closePath();
      gd(g, d[3], d[2], b * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 41, b * 139);
      g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      g.closePath();
      gd(g, d[3], d[2], b * 4);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 95);
    g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
    g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
    g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    g.closePath();
    gd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 86);
    g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
    g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    g.closePath();
    gd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 117);
    g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    g.closePath();
    gd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 175);
    g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    g.closePath();
    gd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 169);
    g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    g.closePath();
    gd(g, undefined, d[2], b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 136, b * 171);
    g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    g.closePath();
    gd(g, fo, d[2], b * 4);
    vd(g, b * 63, b * 180, b * 15.231546211727817);
    gd(g, d[4]);
    vd(g, b * 121, b * 181, b * 15.652475842498529);
    gd(g, d[4]);
    vd(g, b * 58, b * 175, b * 5.656854249492381);
    gd(g, d[2]);
    vd(g, b * 116, b * 175, b * 5.656854249492381);
    gd(g, d[2]);
    return f;
  }
  function Dt(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 85;
    var k = c * 115;
    var a = c * 6;
    f.width = j;
    f.height = k;
    i.translate(c * -130, c * -60 + a);
    i.globalAlpha = 0.5;
    i.beginPath();
    i.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    i.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    i.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    i.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    i.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    i.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    i.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    i.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    i.closePath();
    gd(i, e[0]);
    i.translate(0, -a);
    i.globalAlpha = 1;
    i.beginPath();
    i.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    i.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    i.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    i.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    i.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    i.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    i.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    i.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    i.closePath();
    gd(i, e[1], e[2], 4);
    var m = c * 155;
    var n = c * 133;
    var h = c * 10;
    var g = c * 3;
    var l = m + c * -3;
    var b = n + c * -5;
    i.save();
    i.translate(m, n);
    i.globalAlpha = 1;
    vd(i, 0, 0, h);
    gd(i, e[3]);
    i.restore();
    i.save();
    i.translate(l, b);
    i.globalAlpha = 1;
    vd(i, 0, 0, g);
    gd(i, e[4]);
    i.restore();
    i.save();
    i.translate(m + c * 27, n);
    i.globalAlpha = 1;
    vd(i, 0, 0, h);
    gd(i, e[3]);
    i.restore();
    i.save();
    i.translate(c * 27 + l, b);
    i.globalAlpha = 1;
    vd(i, 0, 0, g);
    gd(i, e[4]);
    return f;
  }
  const Et = 0;
  function Ft(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var a = b * 55;
    e.width = g;
    e.height = a;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    gd(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    gd(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    gd(f, xa, d[1], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    gd(f, d[2]);
    return e;
  }
  function Gt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var a = c * 190;
    var n = k / 2;
    var o = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 35;
    var l = c * 150;
    var b = g / 2;
    var d = l / 2;
    var p = c * 4;
    j.translate(n - c * 5, o - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    bd(j, -b, -d, g, l, h);
    gd(j, f[0], f[1], p);
    j.translate(0, 0);
    j.rotate(Math.PI / 3);
    j.globalAlpha = 1;
    bd(j, -b, -d, g, l, h);
    gd(j, f[0], f[1], p);
    j.translate(0, 5);
    bd(j, -b / 2, -d / 2, g / 2, l / 3, h - 2);
    gd(j, f[1]);
    return i;
  }
  function Ht(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    pd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    pd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    gd(e, c[8], c[9], a * 4);
    return d;
  }
  function Jt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 205;
    var a = b * 205;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 100;
    f.translate(j, k);
    f.globalAlpha = 1;
    vd(f, 0, 0, h);
    gd(f, d[0]);
    return e;
  }
  function Kt(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var a = n.getContext("2d");
    var o = f * 70;
    var q = f * 70;
    var h = f * 10;
    var g = f * 5;
    n.width = o;
    n.height = q + g;
    for (var l = 0; e.length > l; l++) {
      var r = e[l];
      a.globalAlpha = r.a;
      var s = r.f(i, rr, r.c);
      a.save();
      a.translate(o / 2 + f * r.x, q / 2 + f * r.y);
      a.rotate(r.r);
      a.drawImage(s, -s.width / 2, -s.height / 2);
      a.restore();
    }
    var t = [];
    for (l = 0; l < j.length; l++) {
      var m = document.createElement("canvas");
      var u = m.getContext("2d");
      m.width = o;
      m.height = q + g;
      u.globalAlpha = k / 2;
      if (l == 2) {
        bd(u, 0, g, o, q, h);
      } else {
        bd(u, 0, 0, o, q + g, h);
      }
      gd(u, "#081a19");
      u.globalAlpha = k;
      bd(u, 0, l == 2 ? g : 0, o, q, h);
      gd(u, j[l]);
      u.globalAlpha = 1;
      if (l == 2) {
        u.drawImage(n, 0, g);
      } else {
        u.drawImage(n, 0, 0);
      }
      t.push(Oa(m));
    }
    return t;
  }
  function Lt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var a = c * 198;
    var n = c * 140;
    var o = c * 90;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var b = g / 2;
    var d = l / 2;
    var p = c * 4;
    j.translate(c * -25, c * 1);
    j.translate(n, o);
    j.rotate(-Math.PI / 5);
    bd(j, -b, -d, g, l, h);
    gd(j, f[0], f[1], p);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / 3);
    bd(j, -b, -d, g, l, h);
    gd(j, f[0], f[1], p);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    bd(j, -b, -d, g, l, h);
    gd(j, f[0], f[1], p);
    return i;
  }
  function Mt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    pd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    pd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    pd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    pd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    gd(e, c[3], c[4], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    vd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    vd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    gd(e, c[5], c[6], a * 4);
    return d;
  }
  function Nt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var a = c * 190;
    var n = k / 2;
    var o = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var b = g / 2;
    var d = l / 2;
    var p = c * 4;
    j.translate(n, o);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = 1;
    bd(j, -b, -d, g, l, h);
    gd(j, f[0], f[1], p);
    j.translate(0, 0);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    bd(j, -b, -d, g, l, h);
    gd(j, f[0], f[1], p);
    return i;
  }
  function Ot(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 145;
    var a = b * 145;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 70;
    f.translate(j, k);
    f.globalAlpha = 0.4;
    vd(f, 0, 0, h);
    gd(f, d[0]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    vd(f, 0, 0, h);
    gd(f, d[0]);
    h = b * 35;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    vd(f, 0, 0, h);
    gd(f, d[1]);
    h = b * 20;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    vd(f, 0, 0, h);
    gd(f, d[2]);
    return e;
  }
  function Pt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    gd(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    gd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    gd(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    gd(e, un, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    gd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    gd(e, oh, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    gd(e, zs, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    gd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    gd(e, Lq, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    gd(e, jt, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    gd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    gd(e, undefined, c[6], a * 4);
    return d;
  }
  function Qt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 370;
    var a = b * 370;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 180;
    f.globalAlpha = 0.2;
    vd(f, j, k, h);
    gd(f, d[0]);
    return e;
  }
  const Rt = 2;
  function St(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 32;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    vd(e, 0, 0, a);
    gd(e, c[0], c[0]);
    e.translate(0, b * -8);
    e.globalAlpha = 1;
    vd(e, 0, 0, a);
    gd(e, c[1], c[2], h);
    return d;
  }
  function Tt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    gd(e, undefined, c[2], a * 4);
    vd(e, a * 18, a * 38, a * 14.866068747318506);
    gd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    gd(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    gd(e, c[6], c[7], a * 6);
    return d;
  }
  function Ut(a) {
    return rg.String.fromCharCode(a);
  }
  function Vt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    gd(e, Xs, c[2], a * 4);
    vd(e, a * 18, a * 38, a * 14.866068747318506);
    gd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    gd(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    gd(e, c[4], c[5], a * 4);
    return d;
  }
  (function () {
    const a = {
      ⲆᐃᐃᐃⲆΔΔ: 13783526,
      ᐃⵠᐃᐃᐃⲆᐃⲆⲆ: 8225921,
      ᐃⲆⵠᐃᐃΔⲆⲆᐃ: 3316535,
      ⵠⵠᐃΔᐃᐃⲆᐃΔ: 11539749
    };
  })();
  const Wt = 1;
  function Xt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    bd(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    gd(e, c[0]);
    vd(e, a * 204, a * 693, a * 36.013886210738214);
    gd(e, c[0]);
    vd(e, a * 105, a * 518, a * 30);
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    gd(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    bd(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    gd(e, c[1], c[2], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    gd(e, c[3], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    gd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    gd(e, c[6], c[4], a * 16);
    vd(e, a * 204, a * 693, a * 36.013886210738214);
    gd(e, c[6], c[4], a * 16);
    vd(e, a * 105, a * 518, a * 30);
    gd(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    gd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    gd(e, c[6]);
    vd(e, a * 204, a * 693, a * 17.029386365926403);
    gd(e, c[7]);
    vd(e, a * 106, a * 518, a * 12);
    gd(e, c[7]);
    return d;
  }
  function Yt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var a = b * 16;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 1;
    vd(e, 0, 0, a);
    gd(e, c[0], c[1], h);
    return d;
  }
  function Zt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.max(c.width, b.width);
    var g = Math.max(c.height, b.height);
    d.width = f;
    d.height = g;
    e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
    e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
    return d;
  }
  function $t(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (d = c * 450) / 2;
    var a = (p = c * 145) / 2;
    var n = c * 10;
    var o = c * 300;
    var h = c * 30;
    var g = o / 2;
    var l = h / 2;
    var b = 4;
    if (f) {
      var d = c * 145;
      var p = c * 450;
      i.width = d;
      i.height = p;
      j.rotate(Math.PI / 2);
      j.save();
      j.globalAlpha = 0.5;
      bd(j, c * 100, c * -110, o, h, n);
      gd(j, e[0]);
      j.translate(c * 178, c * -98);
      bd(j, -g, -l - c * 6, c * 100, c * 100, n);
      gd(j, e[0]);
      j.translate(c * -50, c * 5);
      bd(j, c * 220, c * -15, c * 90, c * 90, n);
      gd(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 250, c * -63);
      bd(j, -g - c * 20, -l, o, h, n);
      gd(j, e[1], e[2], b);
      j.translate(c * -70, c * -40);
      bd(j, -g - c * 20, -l, c * 100, c * 100, n);
      gd(j, e[3], e[4], b);
      j.translate(c * -70, c * 15);
      bd(j, c * 220, c * -22, c * 90, c * 90, n);
      gd(j, e[3], e[4], b);
      bd(j, c * 230, c * -12, c * 55, c * 55, n);
      gd(j, e[5]);
      j.translate(c * -70, 0);
      bd(j, c * -15, c * -2, c * 60, c * 60, n);
      gd(j, e[5]);
      j.restore();
    } else {
      i.width = d;
      i.height = p;
      j.save();
      j.globalAlpha = 0.5;
      j.translate(k, a + c * 10);
      bd(j, -g, -l, o, h, n);
      gd(j, e[0]);
      j.translate(c * -65, c * -25);
      bd(j, -g, -l - c * 6, c * 100, c * 100, c * 15);
      gd(j, e[0]);
      j.translate(c * -35, c * -5);
      bd(j, c * 220, c * -15, c * 90, c * 90, c * 15);
      gd(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 240, c * 70);
      bd(j, -g, -l, o, h, n);
      gd(j, e[1], e[2], b);
      j.translate(c * -60, c * -40);
      bd(j, -g - c * 20, -l, c * 100, c * 100, c * 15);
      gd(j, e[3], e[4], b);
      j.translate(c * -55, c * 10);
      bd(j, c * 220, c * -22, c * 90, c * 90, c * 15);
      gd(j, e[3], e[4], b);
      bd(j, c * 240, c * -12, c * 55, c * 55, c * 12);
      gd(j, e[5]);
      j.translate(c * 45, c * 0);
      bd(j, c * -145, c * -2, c * 60, c * 60, c * 12);
      gd(j, e[5]);
      j.restore();
    }
    return i;
  }
  function _t(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 121;
    f.height = b * 130;
    g.translate(0, b * 20);
    if (d == 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 6, b * 23);
      g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
      g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
      g.closePath();
      gd(g, Bj, c[3], b * 13);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 6, b * 23);
    g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
    g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
    g.closePath();
    gd(g, c[1], c[2], b * 4);
    if (e == 1) {
      g.translate(0, b * 5);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      gd(g, zs, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      gd(g, undefined, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      gd(g, undefined, c[0], b * 10);
      if (d == 1) {
        g.translate(b * -6, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 67, b * 30);
        g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        gd(g, nr, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 70, b * 17);
        g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        gd(g, vs, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 76, b * 8);
        g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        gd(g, vs, c[3], b * 18);
        g.translate(-6, b * 0);
      } else {
        g.translate(b * -6, b * -5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      gd(g, undefined, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      gd(g, un, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      gd(g, undefined, c[2], b * 10);
    } else {
      if (d == 1) {
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        gd(g, undefined, c[3], b * 18);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        gd(g, undefined, c[3], b * 18);
      } else {
        g.translate(0, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        gd(g, nr, c[0], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        gd(g, undefined, c[0], b * 7);
        g.translate(0, b * 5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 108, b * 27);
      g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      g.closePath();
      gd(g, undefined, c[2], b * 7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 79, b * 30);
      g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      g.closePath();
      gd(g, undefined, c[2], b * 7);
    }
    return f;
  }
  function au(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 16;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 0.5;
    vd(e, 0, 0, a);
    gd(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  function bu(c, e, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var a = c * 210;
    var m = c * 205;
    var n = c * 30;
    var h = c * 20;
    var g = c * 200;
    var l = c * 180;
    var b = g / 2;
    var d = l / 2;
    j.width = a;
    j.height = m;
    j.width = c * 419;
    j.height = c * 412;
    if (i == 1) {
      k.save();
      k.translate(c * 10, c * 0);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      gd(k, sr, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      gd(k, Uj, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      gd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      gd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      gd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      gd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      gd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      gd(k, Wa, e[4], c * 3);
      k.restore();
    } else if (i == 2) {
      k.save();
      k.translate(c * 130, c * 35);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      gd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      gd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      gd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      gd(k, oh, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      gd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      gd(k, nr, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      gd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      gd(k, undefined, e[4], c * 3);
      k.restore();
    }
    k.translate(j.width / 2, j.height / 2);
    if (!i) {
      k.globalAlpha = 0.5;
      bd(k, -b, -d, g, l + h, n);
      gd(k, e[0]);
      if (f) {
        k.rotate(Math.PI);
      }
      k.globalAlpha = 1;
      bd(k, -b, -d, g, l, n);
      gd(k, e[1], e[2], 4);
      k.globalAlpha = 1;
      bd(k, c * 35 - b, c * 20 - d, g - c * 50, l - c * 50, n - c * 10);
      gd(k, e[3]);
    }
    if (i == 3) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      gd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      gd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      gd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      gd(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      gd(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      gd(k, e[5]);
    } else if (i == 4) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 30, c * 167);
      k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
      k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      k.closePath();
      gd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 26, c * 145);
      k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      k.closePath();
      gd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 13, c * 193);
      k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
      k.closePath();
      gd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      gd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 335, c * 196);
      k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      k.closePath();
      gd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 349, c * 212);
      k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      k.closePath();
      gd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 46, c * 165);
      k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      k.closePath();
      gd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      gd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      gd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      gd(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      gd(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      gd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 367, c * 164);
      k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      k.closePath();
      gd(k, e[4]);
    }
    return j;
  }
  function cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    gd(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    bd(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    gd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    gd(e, undefined, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    gd(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    gd(e, c[4], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    bd(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    gd(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    gd(e, c[6]);
    return d;
  }
  function du(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 105;
    var a = c * 125;
    var m = c * 4;
    var n = c * 10;
    var h = c * 5;
    var g = c * 10;
    var l = c * 110;
    var b = g / 2;
    var d = l / 2;
    i.width = k;
    i.height = a;
    j.save();
    j.globalAlpha = e ? 0.5 : 1;
    j.translate(k / 2 + c * 8, a / 2 + h);
    bd(j, -b, -d, g, l, n);
    gd(j, e ? f[0] : f[1]);
    j.translate(c * -130 + h, c * -128 + h);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    gd(j, f[2]);
    j.restore();
    j.translate(k / 2 + 8, a / 2);
    j.globalAlpha = 1;
    bd(j, -b, -d, g, l, n);
    gd(j, f[3], f[4], m);
    j.translate(c * -130, c * -125);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    gd(j, f[5], f[6], m);
    return i;
  }
  const eu = 3;
  function fu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    bd(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    bd(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    gd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    gd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    gd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    gd(e, c[1], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    gd(e, c[3]);
    return d;
  }
  function gu(f, e, i, j, k, n, o, p, q, h, g = 0) {
    var l = document.createElement("canvas");
    var b = l.getContext("2d");
    n = n ? f * n : 0;
    var d = Math.floor(i * f);
    b.font = d + "px Baloo Paaji";
    b.lineJoin = "round";
    p *= f;
    var r = o ? p * 2 : 0;
    if (q) {
      var m = Math.min(b.measureText(e).width + f * 2 + r, q);
    } else {
      m = b.measureText(e).width + f * 2 + r + g * f * 2;
    }
    d = (d + n + g) * f + r;
    l.width = m;
    l.height = d;
    if (o) {
      b.fillStyle = o;
      bd(b, 0, 0, m, d, p * 2);
      b.fill();
      b.translate(p, p);
    }
    b.textBaseline = "middle";
    b.font = i + "px Baloo Paaji";
    b.lineJoin = "round";
    if (k) {
      b.beginPath();
      b.fillStyle = k;
      b.fillText(e, 0, d / 2 + n - r / 2, m);
    }
    b.beginPath();
    if (h) {
      b.strokeStyle = h;
      b.lineWidth = g;
      b.strokeText(e, g, (d - r) / 2, m);
    }
    b.fillStyle = j;
    b.fillText(e, g, (d - r) / 2, m);
    return l;
  }
  function hu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    gd(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    bd(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    gd(e, c[0]);
    vd(e, a * 122, a * 480, a * 18.439088914585774);
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    gd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    bd(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    gd(e, c[4], c[5], a * 12.5);
    vd(e, a * 122, a * 480, a * 18.439088914585774);
    gd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    gd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    gd(e, c[3]);
    return d;
  }
  function iu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    gd(e, c[0]);
    vd(e, a * 160.5, a * 243.03125, a * 7);
    gd(e, c[0]);
    vd(e, a * 227.5, a * 242.03125, a * 7);
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    gd(e, c[0], c[0], a * 5);
    vd(e, a * 194, a * 298, a * 9);
    gd(e, c[0], c[0], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    gd(e, c[1], c[2], a * 5);
    vd(e, a * 160.5, a * 243.03125, a * 7);
    gd(e, c[1], c[2], a * 5);
    vd(e, a * 227.5, a * 242.03125, a * 7);
    gd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    gd(e, c[1], c[2], a * 7);
    vd(e, a * 194, a * 298, a * 9);
    gd(e, c[1], c[2], a * 7);
    return d;
  }
  function ju(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 283;
    f.height = b * 224;
    g.translate(0, b * 15);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    gd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    g.closePath();
    gd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    gd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    gd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    gd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    gd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    gd(g, d[0]);
    g.translate(0, b * -15);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    gd(g, sr, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    gd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    gd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    gd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    gd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    gd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    gd(g, d[1], d[2], b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    gd(g, Wa, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    gd(g, _h, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    gd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    gd(g, fo, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    gd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    gd(g, vs, d[1], b * 20);
    vd(g, b * 101, b * 155, b * 20.591260281974);
    gd(g, d[3]);
    vd(g, b * 180, b * 155, b * 20.591260281974);
    gd(g, d[3]);
    vd(g, b * 95, b * 148, b * 7.211102550927978);
    gd(g, d[4]);
    vd(g, b * 173, b * 148, b * 7.211102550927978);
    gd(g, d[4]);
    if (e === 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 191, b * 107);
      g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      g.closePath();
      gd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 206, b * 98);
      g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      g.closePath();
      gd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 172, b * 111);
      g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      g.closePath();
      gd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 202, b * 125);
      g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      g.closePath();
      gd(g, d[2]);
    }
    return f;
  }
  function ku(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    gd(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    gd(e, c[0], c[1], a * 8);
    vd(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    gd(e, c[2]);
    vd(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    gd(e, c[2]);
    vd(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    gd(e, c[2]);
    vd(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    gd(e, c[2]);
    vd(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    gd(e, c[2]);
    vd(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    return d;
  }
  function lu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    gd(d, Ql, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    gd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    gd(d, Uk, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    gd(d, sr, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    gd(d, _h, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    gd(d, Lq, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    gd(d, b[0]);
    return c;
  }
  function mu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 180;
    var a = b * 210;
    var j = (h = b * 60) / 4;
    var k = b * 20;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35 + k);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    pd(f, 5, h, j);
    gd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15 + k);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    pd(f, 5, h, j);
    gd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40 + k);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    pd(f, 5, h, j);
    gd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, b * -20);
    pd(f, 5, h, j);
    gd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    pd(f, 5, h, j);
    gd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    pd(f, 5, h, j);
    gd(f, d[1]);
    f.restore();
    var h;
    j = (h = b * 30) / 4;
    f.save();
    f.translate(i / 2 + b * 5, a / 2 - b * 20);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    pd(f, 5, h, j);
    gd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    pd(f, 5, h, j);
    gd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 45, a / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    pd(f, 5, h, j);
    gd(f, d[2]);
    f.restore();
    vd(f, i / 2 - b * 7, a / 2 + b * 7, 5);
    gd(f, d[2]);
    return e;
  }
  function nu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var a = b * 150;
    var i = b * 10;
    var j = b * 4;
    e.width = g;
    e.height = a;
    f.translate(b * -50, b * -38 + i);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    gd(f, d[0]);
    f.translate(0, 0 - i);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    gd(f, d[1], d[2], j);
    return e;
  }
  function ou(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    gd(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    gd(e, c[4], c[5], a * 4);
    vd(e, a * 107, a * 152, a * 9);
    gd(e, c[6]);
    vd(e, a * 105, a * 173, a * 9);
    gd(e, c[6]);
    vd(e, a * 87, a * 161, a * 9);
    gd(e, c[6]);
    vd(e, a * 106, a * 147, a * 4);
    gd(e, c[7]);
    vd(e, a * 104, a * 167, a * 4);
    gd(e, c[7]);
    vd(e, a * 86, a * 154, a * 4);
    gd(e, c[7]);
    return d;
  }
  function pu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    gd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    gd(e, Il, c[4], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    gd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    gd(e, Uj, c[4], a * 4);
    e.translate(a * 20, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    gd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    gd(e, undefined, c[4], a * 4);
    return d;
  }
  function qu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    gd(e, c[1], c[2], a * 8);
    return d;
  }
  function ru(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 220;
    var a = b * 230;
    var j = b * 100;
    var k = j / 4;
    var h = b * 20;
    e.width = i;
    e.height = a;
    f.translate(i / 2, a / 2 + h);
    f.globalAlpha = 0.5;
    pd(f, 7, j, k);
    gd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    pd(f, 7, j, k);
    gd(f, d[1]);
    pd(f, 6, j * 0.65, k * 0.65);
    gd(f, d[2]);
    return e;
  }
  function su(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    gd(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    bd(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    pd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    gd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    bd(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    gd(e, c[4], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    pd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    gd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    gd(e, c[3]);
    return d;
  }
  function tu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(0, a * 10);
    vd(e, a * 42, a * 43, a * 24.758836806279895);
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    gd(e, c[0]);
    e.translate(0, a * -10);
    vd(e, a * 42, a * 43, a * 24.758836806279895);
    gd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    gd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    gd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    gd(e, c[5], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    gd(e, c[7], c[8], a * 5);
    return d;
  }
  function uu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    gd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    gd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    gd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    gd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    gd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    gd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    gd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    gd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    gd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    gd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    gd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    gd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    gd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    gd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    gd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    gd(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    gd(e, c[9], c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    gd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    gd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    gd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    gd(e, Uj, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    gd(e, Mg, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    gd(e, Xs, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    gd(e, Xs, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    gd(e, Mg, c[3], a * 4);
    return d;
  }
  function vu(b, c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var a = b * 220;
    var j = b * 220;
    var k = b * 100;
    var h = k / 4;
    f.width = a;
    f.height = j;
    i.translate(a / 2, j / 2);
    i.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      i.translate(b * 0, b * -8);
    }
    pd(i, 7, k, h);
    gd(i, c ? d[0] : d[1]);
    i.globalAlpha = 1;
    if (e == 0) {
      pd(i, 6, k * 0.65, h * 0.65);
      gd(i, d[2]);
    } else if (e == 1) {
      i.translate(b * 20, b * 20);
      pd(i, 6, k * 0.45, h * 0.4);
      gd(i, d[2]);
    }
    return f;
  }
  function wu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(10, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    gd(d, undefined, b[0], a * 10);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    gd(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    gd(d, nr, b[2], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    gd(d, undefined, b[2], a * 8);
    return c;
  }
  function xu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 18;
    var a = b * 18;
    e.width = i;
    e.height = a;
    var j = b * 9;
    var k = b * 9;
    var l = b * 8;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    vd(f, 0, 0, l);
    gd(f, d[0]);
    l = b * 3;
    j = 0;
    k = b * -3;
    f.translate(j, k);
    f.globalAlpha = 1;
    vd(f, 0, 0, l);
    gd(f, d[1]);
    f.restore();
    return e;
  }
  function yu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 120;
    var a = b * 150;
    var j = b * 60;
    var k = j / 4;
    var h = b * 15;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 0 + h);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    pd(f, 8, j, k);
    gd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 11, a / 2 + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(0, -h);
    pd(f, 8, j, k);
    gd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 9, a / 2 - b * 12);
    f.rotate(Math.PI / 2.8);
    pd(f, 5, j * 0.5, k * 0.4);
    gd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 19, a / 2 + b * 5);
    f.rotate(Math.PI / 1);
    pd(f, 5, j * 0.5, k * 0.4);
    gd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 8, a / 2 + b * 20);
    f.rotate(Math.PI / 2.25);
    pd(f, 5, j * 0.5, k * 0.4);
    gd(f, d[2]);
    f.restore();
    return e;
  }
  function zu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var a = b * 90;
    var i = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    gd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    gd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    gd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    gd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    gd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    gd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    gd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    gd(f, d[0], d[1], i);
    f.restore();
    return e;
  }
  function Au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    gd(e, c[1], c[2], a * 10);
    return d;
  }
  function Bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    gd(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    bd(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    gd(e, c[0]);
    vd(e, a * 121, a * 480, a * 20.396078054371138);
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    gd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    bd(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    gd(e, c[4], c[5], a * 12.5);
    vd(e, a * 121, a * 480, a * 20.396078054371138);
    gd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    gd(e, c[1], c[2], a * 12.5);
    return d;
  }
  const Cu = 0;
  function em(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    gd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -15, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    gd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    gd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    gd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    gd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    gd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    gd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    gd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    gd(d, undefined, b[2], a * 4);
    return c;
  }
  function im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    pd(e, 9, a * 60, a * 10);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    pd(e, 9, a * 60, a * 10);
    gd(e, c[1], c[2], 4);
    e.rotate(-0.32);
    pd(e, 9, a * 38, a * 10);
    gd(e, c[3], c[4], 4);
    e.rotate(0.68);
    pd(e, 9, a * 20, a * 8);
    gd(e, c[5], c[6], 6);
    e.restore();
    return d;
  }
  function tm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * c * 2;
    var a = b * c * 2;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j);
    vd(f, 0, 0, b * c);
    gd(f, d);
    return e;
  }
  function nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    gd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    gd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    gd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    gd(e, c[0], c[0], a * 10);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    gd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    gd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    gd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    gd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    gd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    gd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    gd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    gd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    gd(e, c[1], c[2], a * 7);
    return d;
  }
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    gd(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    gd(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    gd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    gd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    gd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    gd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    gd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    gd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    gd(e, w, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    gd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    gd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    gd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    gd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    gd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    gd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    gd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    gd(e, oh, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(1, 1);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    gd(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    gd(e, c[2], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    gd(e, Ql, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    gd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    gd(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    gd(e, fo, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    gd(e, c[0], c[0], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    gd(e, w, c[1], a * 2);
    return d;
  }
  function am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    gd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    gd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    gd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    gd(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    gd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    gd(e, c[4]);
    vd(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    gd(e, c[5]);
    vd(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    gd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    gd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    gd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    gd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    gd(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    gd(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    gd(e, nr, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    gd(e, oh, c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    gd(e, undefined, c[9], a * 3);
    return d;
  }
  function rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    pd(e, 7, a * 60, a * 10);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    pd(e, 7, a * 60, a * 10);
    gd(e, c[1], c[2], 4);
    e.rotate(0.64);
    pd(e, 7, a * 40, a * 10);
    gd(e, c[3], c[4], 4);
    e.rotate(0.12);
    pd(e, 7, a * 23, a * 5);
    e.restore();
    gd(e, c[5]);
    return d;
  }
  function wu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    gd(d, b[0], b[0], a * 4);
    return c;
  }
  function sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 7);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    e.closePath();
    gd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    gd(e, c[2], c[3], a * 1);
    return d;
  }
  function hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if (Sb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      vd(e, a * 44, a * 55, a * 41);
      gd(e, c[0]);
    }
    e.globalAlpha = 1;
    vd(e, a * 44, a * 45, a * 41);
    gd(e, c[1], c[2], a * 4);
    vd(e, a * 44, a * 45, a * 31);
    gd(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    bd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    gd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    bd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    gd(e, c[4], c[4], a * 2);
    vd(e, a * 45, a * 29, a * 7);
    gd(e, c[5]);
    vd(e, a * 45, a * 61, a * 7);
    gd(e, c[5]);
    vd(e, a * 28, a * 45, a * 7);
    gd(e, c[5]);
    vd(e, a * 62, a * 45, a * 7);
    gd(e, c[5]);
    return d;
  }
  function gm(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var a = g.getContext("2d");
    if (e == 0) {
      var i = b * 270;
      var j = b * 250;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 140, b * 3);
      a.translate(b * -25, b * -20);
      a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      a.closePath();
      gd(a, d[0]);
    } else if (e == 1) {
      i = b * 430;
      j = b * 350;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 180, b * 5);
      a.translate(b * -30, b * -60);
      a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      a.closePath();
      gd(a, d[0]);
    } else if (e == 2) {
      i = b * 400;
      j = b * 300;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 80, b * 52);
      a.translate(b * -40, b * -30);
      a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      a.closePath();
      gd(a, d[0]);
    }
    return g;
  }
  function lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    bd(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    gd(e, c[0], c[0], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    gd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    bd(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    gd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    bd(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    gd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    bd(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    gd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    bd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    gd(e, c[0], c[0], a * 6);
    vd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    gd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    gd(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    bd(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    gd(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    bd(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    gd(e, c[5], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    bd(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    gd(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    bd(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    gd(e, c[6], c[4], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    bd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    gd(e, c[7], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    bd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    gd(e, c[7], c[8], a * 6);
    e.globalAlpha = 1;
    e.save();
    vd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    gd(e, c[3], c[4], a * 6);
    e.restore();
    return d;
  }
  function um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    gd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    gd(e, _h, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    gd(e, Uj, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    gd(e, c[3], c[4], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    gd(e, c[5], c[6], a * 12);
    vd(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    gd(e, c[7]);
    vd(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    gd(e, c[8]);
    return d;
  }
  function bm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var a = b * 142;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    vd(f, 0, 0, b * 60);
    gd(f, d[0]);
    f.translate(0, b * -7);
    f.globalAlpha = 1;
    vd(f, 0, 0, b * 60);
    gd(f, d[1], d[2], b * 4);
    vd(f, 0, 0, b * 40);
    gd(f, d[3]);
    vd(f, 0, 0, b * 25);
    gd(f, d[4], d[5], b * 8);
    return e;
  }
  function dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    pd(e, 8, a * 60, a * 10);
    gd(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    pd(e, 8, a * 60, a * 10);
    gd(e, c[1], c[2], 4);
    e.rotate(0.56);
    pd(e, 8, a * 40, a * 10);
    gd(e, c[3], c[4], 4);
    e.rotate(0.28);
    pd(e, 8, a * 28, a * 8);
    gd(e, c[5]);
    e.restore();
    return d;
  }
  const vm = 2;
  function mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Sb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      pd(e, 7, a * 41, a * 10);
      e.restore();
      gd(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    pd(e, 7, a * 41, a * 10);
    gd(e, c[1], c[2], a * 4);
    pd(e, 7, a * 35, a * 10);
    gd(e, c[3], c[4], a * 4);
    pd(e, 7, a * 23, a * 5);
    e.restore();
    gd(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    bd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    gd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    bd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    gd(e, c[4], c[4], a * 2);
    vd(e, a * 45, a * 29, a * 7);
    gd(e, c[5]);
    vd(e, a * 45, a * 61, a * 7);
    gd(e, c[5]);
    vd(e, a * 28, a * 45, a * 7);
    gd(e, c[5]);
    vd(e, a * 62, a * 45, a * 7);
    gd(e, c[5]);
    return d;
  }
  function cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Sb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      pd(e, 8, a * 41, a * 10);
      gd(e, c[0]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    pd(e, 8, a * 41, a * 10);
    gd(e, c[1], c[2], a * 4);
    e.rotate(0.56);
    pd(e, 8, a * 33, a * 10);
    gd(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    pd(e, 8, a * 24, a * 8);
    gd(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    bd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    gd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    bd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    gd(e, c[4], c[4], a * 2);
    vd(e, a * 45, a * 29, a * 7);
    gd(e, c[5]);
    vd(e, a * 45, a * 61, a * 7);
    gd(e, c[5]);
    vd(e, a * 28, a * 45, a * 7);
    gd(e, c[5]);
    vd(e, a * 62, a * 45, a * 7);
    gd(e, c[5]);
    return d;
  }
  const pm = 1;
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    pd(e, 6, a * 146, a * 30);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    pd(e, 6, a * 146, a * 30);
    e.restore();
    gd(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    pd(e, 6, a * 105, a * 30);
    e.restore();
    gd(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    pd(e, 6, a * 66, a * 30);
    e.restore();
    gd(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    pd(e, 7, a * 17, a * 8);
    e.restore();
    gd(e, c[6]);
    e.save();
    e.translate(a * 163, a * 168);
    pd(e, 7, a * 25, a * 8);
    e.restore();
    gd(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    pd(e, 7, a * 11, a * 8);
    e.restore();
    gd(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    pd(e, 7, a * 12, a * 8);
    e.restore();
    gd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    gd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    gd(e, Bj, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    gd(e, undefined, c[2], a * 8);
    return d;
  }
  function Tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    pd(e, 6, a * 146, a * 30);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    pd(e, 6, a * 146, a * 30);
    e.restore();
    gd(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    pd(e, 6, a * 105, a * 30);
    e.restore();
    gd(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    pd(e, 6, a * 66, a * 30);
    e.restore();
    gd(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    pd(e, 6, a * 31, a * 30);
    e.restore();
    gd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    gd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    gd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    gd(e, undefined, c[2], a * 8);
    return d;
  }
  function fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Sb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      pd(e, 9, a * 41, a * 10);
      e.restore();
      gd(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    pd(e, 9, a * 41, a * 10);
    gd(e, c[1], c[2], a * 4);
    e.rotate(-0.32);
    pd(e, 9, a * 32, a * 10);
    gd(e, c[3], c[4], a * 4);
    e.rotate(0.68);
    pd(e, 9, a * 23, a * 8);
    gd(e, c[5], c[6], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    bd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    gd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    bd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    gd(e, c[4], c[4], a * 2);
    vd(e, a * 45, a * 29, a * 7);
    gd(e, c[5]);
    vd(e, a * 45, a * 61, a * 7);
    gd(e, c[5]);
    vd(e, a * 28, a * 45, a * 7);
    gd(e, c[5]);
    vd(e, a * 62, a * 45, a * 7);
    gd(e, c[5]);
    return d;
  }
  const zm = 0;
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, 1);
    e.translate(a * -110, 0);
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    bd(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    gd(e, c[0]);
    e.translate(a * -10, a * -10);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    bd(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    gd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    gd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    gd(e, c[5], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    gd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    gd(e, undefined, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    gd(e, Uk, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    gd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    gd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    gd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    gd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    gd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    gd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    gd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    gd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    gd(e, c[3], c[4], a * 6);
    return d;
  }
  function wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    gd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    gd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    gd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    gd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    gd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    gd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    gd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    gd(e, c[3], c[2], a * 10);
    return d;
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    bd(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    gd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    bd(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    gd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    gd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    gd(e, c[8]);
    return d;
  }
  function km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    bd(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    bd(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    gd(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    bd(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    gd(e, c[3], c[4], 4);
    e.save();
    e.translate(a * 79, a * 54);
    bd(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    gd(e, _h, c[5], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    gd(e, Mg, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    gd(e, oh, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    gd(e, vs, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    gd(e, undefined, c[7], 4);
    e.save();
    e.translate(a * 79, a * 113);
    bd(e, a * -18, a * -2, a * 36, a * 4, a * 20);
    e.restore();
    gd(e, undefined, c[8], 4);
    e.save();
    e.translate(a * 75, a * 118);
    bd(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    gd(e, c[8]);
    return d;
  }
  const Am = String.fromCharCode;
  const xm = Am(101);
  const Jm = Am(118);
  const Mm = Am(97);
  const Bm = Am(108);
  function Em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    gd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    gd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    gd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    gd(e, c[2], c[3], a * 7);
    return d;
  }
  function Im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    gd(e, c[2], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    gd(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
    e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
    e.closePath();
    gd(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    gd(e, c[0], c[1], 4);
    return d;
  }
  function Sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    gd(e, c[0]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    gd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    gd(e, c[3], c[4], a * 15);
    return d;
  }
  function Qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    gd(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    gd(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    bd(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    gd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    bd(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    gd(e, c[1], c[2], a * 5);
    return d;
  }
  function _m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    bd(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    bd(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    gd(e, c[0]);
    return d;
  }
  function Fm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 170;
    var a = b * 172;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    f.translate(j, k + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    vd(f, 0, 0, b * 60);
    gd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      pd(f, 3, b * 20, b * 4);
      gd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.restore();
    vd(f, 0, 0, b * 60);
    gd(f, d[3], d[4], b * 4);
    vd(f, 0, 0, b * 40);
    gd(f, d[5]);
    vd(f, 0, 0, b * 25);
    gd(f, d[6], d[7], b * 8);
    return e;
  }
  function Rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    bd(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    gd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    bd(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    gd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    gd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    gd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    gd(e, c[8]);
    return d;
  }
  function jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    gd(e, c[0], c[1], 4);
    return d;
  }
  function Gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    bd(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    gd(e, c[0]);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    gd(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(0, a * 10);
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    bd(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 4);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    gd(e, c[5], c[6], a * 4);
    e.translate(0, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    gd(e, c[8]);
    return d;
  }
  function Wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    gd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    gd(e, oh, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    gd(e, oh, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    return d;
  }
  function Lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    gd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    gd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    gd(e, Il, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    gd(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    gd(e, Wa, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    gd(e, undefined, c[5], a * 8);
    return d;
  }
  function Nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    bd(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    gd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    bd(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    gd(e, undefined, c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    gd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    gd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    gd(e, c[5], c[6], a * 8);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(2, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    gd(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    gd(e, c[8], c[9], a * 8);
    e.scale(2, 2);
    e.translate(a * -23, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    gd(e, c[10]);
    return d;
  }
  function qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    bd(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    gd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    bd(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    gd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    gd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    gd(e, c[8]);
    return d;
  }
  function Om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    bd(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    bd(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    gd(e, c[3], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    bd(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    gd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(0);
    bd(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    gd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    gd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    gd(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    gd(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    bd(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    gd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    bd(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    gd(e, c[1], c[2], a * 5);
    return d;
  }
  const Hm = 0;
  function Um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    bd(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    gd(e, c[0]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    bd(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    bd(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    bd(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    gd(e, c[2]);
    return d;
  }
  function Ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    bd(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    gd(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    bd(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    gd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    gd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    gd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    gd(e, c[2], c[1], a * 4);
    vd(e, a * 71, a * 44.375, a * 16.55294535724685);
    gd(e, c[2], c[1], a * 4);
    vd(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    gd(e, c[2], c[1], a * 4);
    return d;
  }
  function Km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    gd(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    gd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    gd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    gd(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    gd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    gd(e, fo, c[1], a * 4);
    vd(e, a * 58, a * 50, a * 5);
    gd(e, c[4]);
    vd(e, a * 43, a * 65, a * 5);
    gd(e, c[4]);
    vd(e, a * 58, a * 73, a * 5);
    gd(e, c[4]);
    vd(e, a * 58, a * 50, a * 2);
    gd(e, c[5]);
    vd(e, a * 43, a * 65, a * 2);
    gd(e, c[5]);
    vd(e, a * 58, a * 73, a * 2);
    gd(e, c[5]);
    return d;
  }
  function Vm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    gd(d, b[0]);
    return c;
  }
  function Zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(0);
    bd(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    gd(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    bd(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    e.restore();
    gd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    gd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    gd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    bd(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
    e.restore();
    gd(e, Wa, c[5], a * 4);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    bd(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    gd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    bd(e, a * -10, a * -10, a * 20, a * 20, a * 5);
    e.restore();
    gd(e, c[6], c[7], a * 4);
    return d;
  }
  function Xm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.save();
    f.translate(b * 85, b * 88);
    f.rotate(1.4);
    pd(f, 7, b * 60, b * 10);
    f.restore();
    gd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 80);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      pd(f, 3, b * 21, b * 4);
      gd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1.4);
    pd(f, 7, b * 60, b * 10);
    gd(f, d[3], d[4], b * 4);
    f.rotate(0.64);
    pd(f, 7, b * 40, b * 10);
    gd(f, d[5], d[6], b * 4);
    f.rotate(0.12);
    pd(f, 7, b * 23, b * 5);
    f.restore();
    gd(f, d[7]);
    return e;
  }
  function $m(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      gd(d, b[0]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      gd(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      gd(d, b[0]);
    }
    return e;
  }
  function ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    gd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    gd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    gd(e, undefined, c[2], a * 4);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    gd(e, c[10], c[10], a * 4);
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    gd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 18);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    e.closePath();
    gd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    gd(e, undefined, c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    gd(e, undefined, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    bd(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    gd(e, c[7], c[2], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    bd(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    gd(e, c[8], c[2], a * 4);
    vd(e, a * 87, a * 39, a * 4.123105625617661);
    gd(e, c[9], c[2], a * 4);
    vd(e, a * 87, a * 60, a * 4.242640687119285);
    gd(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    gd(e, c[8], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
    e.closePath();
    gd(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    gd(e, c[9], c[2], a * 4);
    vd(e, a * 50, a * 80, a * 5);
    gd(e, c[9], c[2], a * 4);
    vd(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    gd(e, c[9], c[2], a * 4);
    vd(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    gd(e, c[9], c[2], a * 4);
    return d;
  }
  function ic(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    vd(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    gd(d, fo, c[2], a * 4);
    vd(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    gd(d, fo, c[1], a * 4);
    vd(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    gd(d, oh, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    bd(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    gd(d, c[2], c[1], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    pd(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    gd(d, c[3]);
    vd(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    gd(d, c[3]);
    return e;
  }
  function tc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    gd(d, b[0]);
    return c;
  }
  function nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * 5);
    e.globalAlpha = 0;
    vd(e, a * 178.5, a * 172.828125, a * 150);
    gd(e, undefined, c[0], a * 65);
    vd(e, a * 178.5, a * 172.828125, a * 150);
    gd(e, undefined, c[0], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    bd(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    bd(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    bd(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    gd(e, c[0]);
    e.translate(3, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    gd(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    gd(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * 15, a * 35);
    vd(e, a * 178.5, a * 172.828125, a * 150);
    gd(e, Uk, c[2], a * 95);
    vd(e, a * 178.5, a * 172.828125, a * 150);
    gd(e, Il, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    bd(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    gd(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    bd(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    gd(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    bd(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    gd(e, c[1], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    gd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    gd(e, c[1]);
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    gd(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    gd(e, c[1], c[1], a * 7);
    e.restore();
    return d;
  }
  function oc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    gd(d, b[0]);
    return c;
  }
  function ac(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    gd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    gd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    gd(d, b[3]);
    vd(d, a * 103, a * 110, a * 11);
    gd(d, b[4]);
    vd(d, a * 55, a * 111, a * 11);
    gd(d, b[4]);
    vd(d, a * 99, a * 107, a * 5);
    gd(d, b[1]);
    vd(d, a * 51, a * 108, a * 5);
    gd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    gd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    gd(d, b[3]);
    d.translate(2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    gd(d, un, b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    gd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    gd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    gd(d, b[3]);
    return c;
  }
  function rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    gd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    gd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    gd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    gd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    gd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    gd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    gd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    gd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    gd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    gd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    gd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    gd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    gd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    gd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    gd(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    gd(d, b[1]);
    vd(d, a * 102, a * 269, a * 11);
    gd(d, b[3]);
    vd(d, a * 98, a * 266, a * 5);
    gd(d, b[6]);
    vd(d, a * 168, a * 269, a * 11);
    gd(d, b[3]);
    vd(d, a * 164, a * 266, a * 5);
    gd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    gd(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    gd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    gd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    gd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    gd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    gd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    gd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    gd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    gd(d, b[7]);
    return c;
  }
  function sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    bd(e, 0, 0, a * 400, a * 220, a * 30);
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    gd(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    gd(e, c[3], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    gd(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    gd(e, c[3], c[1], a * 12);
    vd(e, a * 41, a * 30, a * 14.7648230602334);
    gd(e, c[3], c[1], a * 12);
    vd(e, a * 369, a * 30, a * 15.556349186104045);
    gd(e, c[3], c[1], a * 12);
    vd(e, a * 364, a * 190, a * 15.620499351813308);
    gd(e, c[3], c[1], a * 12);
    vd(e, a * 41, a * 186, a * 15.556349186104045);
    gd(e, c[3], c[1], a * 12);
    return d;
  }
  function hc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    gd(d, b[0]);
    return c;
  }
  function gc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    vd(d, a * 74.5, a * 85, a * 66);
    gd(d, b[0]);
    d.globalAlpha = 1;
    vd(d, a * 75.5, a * 72.5, a * 67);
    gd(d, b[1], b[2], a * 4);
    vd(d, a * 75.5, a * 73.5, a * 54);
    gd(d, b[3]);
    d.globalAlpha = 0.5;
    vd(d, a * 74.5, a * 80.5, a * 39);
    gd(d, b[4]);
    d.globalAlpha = 1;
    vd(d, a * 74.5, a * 74.5, a * 37);
    gd(d, b[5]);
    return c;
  }
  function lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      gd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      gd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      gd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      gd(e, b[3], b[3], a * 32);
      vd(e, a * 41, a * 30, a * 14.7648230602334);
      gd(e, b[3], b[3], a * 32);
      vd(e, a * 369, a * 30, a * 15.556349186104045);
      gd(e, b[3], b[3], a * 32);
      vd(e, a * 364, a * 190, a * 15.620499351813308);
      gd(e, b[3], b[3], a * 32);
      vd(e, a * 41, a * 186, a * 15.556349186104045);
      gd(e, b[3], b[3], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      gd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      gd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      gd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      gd(e, b[3], b[3], a * 32);
      vd(e, a * 41, a * 30, a * 14.7648230602334);
      gd(e, b[3], b[3], a * 32);
      vd(e, a * 369, a * 30, a * 15.556349186104045);
      gd(e, b[3], b[3], a * 32);
      vd(e, a * 364, a * 190, a * 15.620499351813308);
      gd(e, b[3], b[3], a * 32);
      vd(e, a * 41, a * 186, a * 15.556349186104045);
      gd(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    gd(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    gd(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    gd(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    gd(e, b[2], b[0], a * 12);
    vd(e, a * 41, a * 30, a * 14.7648230602334);
    gd(e, b[2], b[0], a * 12);
    vd(e, a * 369, a * 30, a * 15.556349186104045);
    gd(e, b[2], b[0], a * 12);
    vd(e, a * 364, a * 190, a * 15.620499351813308);
    gd(e, b[2], b[0], a * 12);
    vd(e, a * 41, a * 186, a * 15.556349186104045);
    gd(e, b[2], b[0], a * 12);
    return d;
  }
  function uc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 185;
    e.height = b * 164;
    f.translate(0, 0);
    var g = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * 5);
      e.globalAlpha = b ? 0.5 : 1;
      vd(e, a * 100.5, a * 82, a * 74.92746655359852);
      gd(e, c[0], c[0], a * 4);
      vd(e, a * 100.5, a * 82, a * 65.9417374971317);
      gd(e, c[0], c[0], a * 4);
      e.translate(0, -5);
      e.globalAlpha = 1;
      vd(e, a * 100.5, a * 82, a * 74.92746655359852);
      gd(e, c[1], c[3], a * 4);
      vd(e, a * 100.5, a * 82, a * 65.9417374971317);
      gd(e, c[1], c[2], a * 4);
      vd(e, a * 100.5, a * 82, a * 35.9417374971317);
      gd(e, c[1], c[2], a * 20);
      vd(e, a * 100.5, a * 82, a * 15.9417374971317);
      gd(e, c[1], c[2], a * 6);
      return d;
    }(b, c, d);
    f.drawImage(g, b * -10, b * 0);
    g = zc(b, c, d, 0);
    f.drawImage(g, b * -83, b * -40);
    g = zc(b, c, d, Math.PI / 1.4);
    f.drawImage(g, b * -15, b * -88);
    g = zc(b, c, d, Math.PI / -1.4);
    f.drawImage(g, b * 15, b * -8);
    return e;
  }
  function bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    gd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    gd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    gd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    gd(e, c[1], c[2], a * 8);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    gd(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    gd(e, c[7], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    gd(e, undefined, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    gd(e, undefined, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    gd(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    gd(e, c[3], c[4], a * 8);
    return d;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(a * 7, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      bd(e, a * 0, a * 5, a * 90, a * 60, 10);
      gd(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      vd(e, a * 25, a * 40, a * 10);
      e.fill();
      vd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      bd(e, 0, 0, a * 90, a * 60, a * 10);
      gd(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      vd(e, a * 25, a * 40, a * 10);
      e.fill();
      vd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      gd(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      gd(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      gd(e, b[1]);
      e.restore();
      e.save();
      bd(e, 0, a * 15, a * 90, a * 50, a * 10);
      gd(e, b[0]);
      bd(e, 0, a * 10, a * 90, a * 50, a * 10);
      gd(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      vd(e, a * 25, a * 40, a * 10);
      e.fill();
      vd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function vc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    gd(d, b[0]);
    return c;
  }
  function mc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    bd(d, 0, 0, 20, 35, 7);
    gd(d, b[0]);
    return c;
  }
  function cc(a) {
    const b = function () {
      rg.addEventListener("mousemove", function () {
        b();
      });
    };
    b();
  }
  function pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    gd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    gd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    gd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    gd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    gd(e, c[2]);
    return d;
  }
  function Tc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    vd(d, a * 86.5, a * 98, a * 80);
    gd(d, b[0]);
    d.globalAlpha = 1;
    vd(d, a * 86.5, a * 89, a * 81);
    gd(d, b[1], b[2], a * 4);
    vd(d, a * 86.5, a * 86, a * 59);
    gd(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    vd(d, a * 86.5, a * 95, a * 34);
    gd(d, b[0]);
    d.globalAlpha = 1;
    vd(d, a * 86.5, a * 89, a * 34);
    gd(d, b[5]);
    return c;
  }
  function fc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    gd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    gd(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    gd(d, b[2]);
    return c;
  }
  function zc(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 501;
    f.height = b * 564;
    g.scale(0.5, 0.5);
    g.translate(b * 240, b * 255);
    g.rotate(e);
    g.globalAlpha = c ? 0.5 : 0.2;
    vd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    gd(g, d[0], d[0], b * 8);
    vd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    gd(g, d[0], d[0], b * 8);
    vd(g, b * 174, b * 87.484375, b * 6);
    gd(g, d[0]);
    vd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    gd(g, d[0], d[0], b * 4);
    vd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    gd(g, d[0], d[0], b * 4);
    vd(g, b * 30, b * 87.484375, b * 6);
    gd(g, d[0]);
    vd(g, b * 100, b * 30, b * 20.8806130178211);
    gd(g, d[0], d[0], b * 4);
    vd(g, b * 100, b * 30, b * 12.165525060596439);
    gd(g, d[0], d[0], b * 4);
    vd(g, b * 100, b * 30, b * 6);
    gd(g, d[0]);
    vd(g, b * 100, b * 130, b * 20.8806130178211);
    gd(g, d[0], d[0], b * 4);
    vd(g, b * 100, b * 130, b * 12.165525060596439);
    gd(g, d[0], d[0], b * 4);
    vd(g, b * 100, b * 130, b * 6);
    gd(g, d[0]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    g.rotate(0);
    bd(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    gd(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 101, b * 64.984375);
    g.rotate(0);
    bd(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    gd(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 102, b * 63.484375);
    g.rotate(0);
    bd(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    g.translate(5, -5);
    g.globalAlpha = 1;
    vd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 174, b * 87.484375, b * 6);
    gd(g, d[2]);
    vd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 30, b * 87.484375, b * 6);
    gd(g, d[2]);
    vd(g, b * 102, b * 30, b * 20.8806130178211);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 102, b * 30, b * 12.165525060596439);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 102, b * 30, b * 6);
    gd(g, d[1]);
    vd(g, b * 102, b * 130, b * 20.8806130178211);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 102, b * 130, b * 12.165525060596439);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 102, b * 130, b * 6);
    gd(g, d[1]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    bd(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    gd(g, d[1], d[3], b * 8);
    g.save();
    g.translate(b * 101, b * 64.984375);
    bd(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    gd(g, d[2], d[1], b * 8);
    g.save();
    g.translate(b * 102, b * 63.484375);
    bd(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    gd(g, d[2], d[1], b * 8);
    vd(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 135, b * 107.36605834960938, b * 13);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    gd(g, d[2]);
    vd(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 70, b * 107.36605834960938, b * 13);
    gd(g, d[1], d[3], b * 8);
    vd(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    gd(g, d[2]);
    return f;
  }
  function yc(a) {
    return rg.String.fromCharCode(a);
  }
  function wc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    vd(d, a * 126.5, a * 134, a * 119);
    gd(d, b[0]);
    d.globalAlpha = 1;
    vd(d, a * 126.5, a * 124, a * 119);
    gd(d, b[1], b[2], a * 4);
    vd(d, a * 126.5, a * 127, a * 100);
    gd(d, b[3]);
    d.globalAlpha = 0.5;
    vd(d, a * 126.5, a * 135, a * 81);
    gd(d, b[0]);
    d.globalAlpha = 1;
    vd(d, a * 126.5, a * 125, a * 84);
    gd(d, b[4], b[5], a * 4);
    vd(d, a * 126.5, a * 125, a * 61);
    gd(d, b[6], b[7], a * 4);
    d.globalAlpha = 0.5;
    vd(d, a * 126.5, a * 134, a * 40);
    gd(d, b[8]);
    d.globalAlpha = 1;
    vd(d, a * 126.5, a * 125, a * 40);
    gd(d, b[9]);
    return c;
  }
  function Pc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.translate(0, b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    pd(f, 7, b * 60, b * 10);
    f.restore();
    gd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      pd(f, 3, b * 21, b * 4);
      gd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(0.2);
    pd(f, 9, b * 60, b * 10);
    gd(f, d[3], d[4], b * 4);
    f.rotate(-0.32);
    pd(f, 9, b * 38, b * 10);
    gd(f, d[5], d[6], b * 4);
    f.rotate(0.68);
    pd(f, 9, b * 20, b * 8);
    gd(f, d[7], d[8], b * 6);
    f.restore();
    return e;
  }
  function kc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    gd(d, b[0]);
    d.translate(0, a * -8);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    gd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    gd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    gd(d, b[1], b[2], a * 4);
    vd(d, a * 51, a * 91, a * 9);
    gd(d, b[3]);
    vd(d, a * 95, a * 91, a * 9);
    gd(d, b[3]);
    vd(d, a * 91, a * 89, a * 4);
    gd(d, b[4]);
    vd(d, a * 47, a * 89, a * 4);
    gd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    gd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    gd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    gd(d, undefined, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    gd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    gd(d, b[6]);
    return c;
  }
  function Ac(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var a = sc(b * 1, true, d);
    g.drawImage(a, b * 0, b * 0);
    if (e == 1) {
      g.translate(b * 100, b * 0);
      vd(g, b * 113, b * 120, b * 66);
      gd(g, Uk, d[4], b * 13);
      a = iu(b * 0.65, Zb, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(a, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      gd(g, undefined, d[4], b * 13);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      vd(g, b * 113, b * 120, b * 66);
      gd(g, undefined, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      bd(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      g.restore();
      gd(g, "#dff2f7", "#187484", b * 7);
      vd(g, b * 22, b * 82, b * 12);
      gd(g, "#dff2f7", "#187484", b * 7);
      vd(g, b * 145, b * 82, b * 12);
      gd(g, "#dff2f7", "#187484", b * 7);
      a = nu(b * 0.5, pr, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 10, b * 85);
      a = nu(b * 0.5, ma, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 50, b * 85);
      a = nu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 90, b * 85);
      a = xu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = xu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = xu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 125);
      a = xu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 50, b * 115);
      a = xu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 100);
      a = xu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 80, b * 120);
      a = xu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 110, b * 125);
      a = xu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * 0);
      vd(g, b * 113, b * 120, b * 66);
      gd(g, undefined, d[4], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      bd(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      gd(g, _h, d[5], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      gd(g, d[5], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      gd(g, undefined, d[4], b * 13);
    } else if (e == 4) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      gd(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      gd(g, jt, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      gd(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * 16);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      gd(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      gd(g, _h, d[5], b * 14);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      gd(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      gd(g, Wa, d[5], b * 14);
    }
    return f;
  }
  function xc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * 100;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function Jc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    gd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    gd(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    gd(d, b[2]);
    return c;
  }
  function Mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    bd(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    gd(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    gd(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    bd(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    gd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    gd(e, undefined, c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    gd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    gd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    gd(e, c[4], c[1], a * 8);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    bd(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    gd(e, c[5]);
    return d;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    bd(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    bd(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    bd(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    gd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    bd(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    bd(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    bd(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    gd(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    bd(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    gd(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    bd(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    gd(e, c[3], c[4], a * 3);
    return d;
  }
  function Ec(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 120;
    e.height = b * 100;
    bd(f, b * 10, b * 10, b * 95, b * 80, b * 10);
    gd(f, c[2]);
    bd(f, b * 10, b * 5, b * 95, b * 80, b * 10);
    gd(f, c[3], c[4], b * 4);
    if (d == 0) {
      var g = dc(b * 0.75, c, 0);
      f.drawImage(g, b * 22, b * 18);
    } else if (d == 1) {
      g = dc(b * 0.75, c, 1);
      f.drawImage(g, b * 22, b * 18);
    }
    return e;
  }
  function Dc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    gd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    gd(d, b[0]);
    return c;
  }
  function Ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    gd(e, c[1], c[2], a * 10);
    return d;
  }
  function Sc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    gd(d, b[0]);
    return c;
  }
  function Qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    gd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    gd(e, c[4], c[5], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    bd(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    gd(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    bd(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    gd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    gd(e, c[4], c[5], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    gd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    gd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    gd(e, c[3], c[2], a * 4);
    e.scale(0.5, 0.5);
    e.translate(a * 100, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    gd(e, c[6], c[2], a * 4);
    return d;
  }
  function _c(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 3);
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    pd(f, 7, b * 60, b * 10);
    f.restore();
    gd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      pd(f, 3, b * 21, b * 4);
      gd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1);
    pd(f, 8, b * 60, b * 10);
    gd(f, d[3], d[4], b * 4);
    f.rotate(0.56);
    pd(f, 8, b * 40, b * 10);
    gd(f, d[5], d[6], b * 4);
    f.rotate(0.28);
    pd(f, 8, b * 28, b * 8);
    gd(f, d[7]);
    f.restore();
    return e;
  }
  (function () {
    const a = {
      ᐃⲆⲆΔΔⵠΔ: 12161801,
      ᐃᐃⲆΔⲆΔⲆⵠⲆ: 4344544,
      ᐃⵠⲆΔΔᐃᐃΔⵠ: 6899250,
      ⵠᐃⲆᐃᐃΔᐃ: 785882
    };
  })();
  const Fc = 0;
  function Rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    gd(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    gd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    gd(e, c[4], c[5], a * 6);
    return d;
  }
  function jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    pd(e, 6, a * 43, a * 10);
    e.restore();
    gd(e, c[0], c[1], a * 3);
    return d;
  }
  function Gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    gd(e, c[1], c[2], a * 6);
    return d;
  }
  function Wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(0, a * 10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    gd(e, c[0]);
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    gd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    gd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    gd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    gd(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    gd(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    gd(e, c[3]);
    return d;
  }
  function Lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    gd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    gd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    gd(e, Mg, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    gd(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    gd(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    gd(e, c[2]);
    return d;
  }
  function Nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    gd(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    gd(e, Wa, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    gd(e, c[0], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    gd(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    gd(e, c[2], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    gd(e, c[0], c[1], a * 20);
    return d;
  }
  function qc(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    bd(e, b * 10, b * 12, b * 110, b * 90, b * 10);
    gd(e, c[0]);
    bd(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    gd(e, c[1], c[2], b * 4);
    var a = fd(-Math.PI / 5, du(b * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 12, b * 18);
    a = fd(Math.PI / 4, Bc(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 36, b * 16);
    return d;
  }
  function Oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    bd(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    gd(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    bd(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    gd(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    bd(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    gd(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    bd(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    gd(e, c[2]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    bd(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    gd(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    bd(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    gd(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    bd(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    gd(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    bd(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    gd(e, w, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    bd(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    gd(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    bd(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    gd(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    bd(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    gd(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    bd(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    gd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    gd(e, Uj, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    pd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    gd(e, c[2]);
    e.save();
    e.translate(a * 98, a * 99);
    pd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    gd(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    pd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    gd(e, c[5], c[6], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    pd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    gd(e, c[7], c[8], a * 7);
    return d;
  }
  function Hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    bd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    gd(e, c[0]);
    vd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    bd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    gd(e, vs, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    gd(e, undefined, c[3], a * 6);
    vd(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    gd(e, vs, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    bd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    gd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    gd(e, c[1]);
    vd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    gd(e, c[2], c[1], a * 4);
    vd(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    gd(e, c[3], c[1], a * 4);
    vd(e, a * 78, a * 44, a * 20);
    gd(e, c[4]);
    return d;
  }
  function Uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    gd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    gd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    gd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    gd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    gd(e, Mg, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    gd(e, oh, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    gd(e, vs, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    gd(e, zs, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    gd(e, w, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    gd(e, un, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    e.closePath();
    gd(e, undefined, c[4], a * 6);
    return d;
  }
  function Yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    vd(e, a * 220, a * 201, a * 170.41713528867922);
    gd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    vd(e, a * 220, a * 201, a * 170.41713528867922);
    gd(e, c[1], c[2], a * 6);
    vd(e, a * 220, a * 201, a * 130);
    gd(e, c[11], c[2], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    gd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    gd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    gd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    gd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    gd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    gd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    gd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    gd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    gd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    gd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    gd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    gd(e, Uk, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    gd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    gd(e, Uk, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    gd(e, w, c[6], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    gd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    gd(e, zs, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    gd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    gd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    gd(e, Bj, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    gd(e, un, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    gd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    gd(e, undefined, c[6], a * 6);
    vd(e, a * 222, a * 199, a * 120.74767078498864);
    gd(e, undefined, c[3], a * 40);
    vd(e, a * 220, a * 200, a * 95.44108130150245);
    gd(e, undefined, c[2], a * 15);
    vd(e, a * 220, a * 201, a * 85);
    gd(e, undefined, c[4], a * 10);
    e.globalAlpha = 0.5;
    vd(e, a * 220, a * 201, a * 82);
    gd(e, c[9]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    vd(e, a * 63, a * 136, a * 49.193495504995376);
    gd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    vd(e, a * 63, a * 136, a * 49.193495504995376);
    gd(e, c[8], c[2], a * 4);
    vd(e, a * 63, a * 137, a * 25.632011235952593);
    gd(e, c[7], c[2], a * 4);
    return d;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    gd(e, undefined, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    gd(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    gd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    gd(e, Xs, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    gd(e, Uk, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    gd(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    gd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    gd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    gd(e, undefined, c[2], a * 11);
    return d;
  }
  function Vc(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var a = b * 4;
    c.width = e;
    c.height = f;
    bd(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
    gd(d, null, "#BBE8EF", a);
    return c;
  }
  function Zc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    bd(d, a * -7, a * -20, a * 14, a * 39, a * 20);
    d.restore();
    gd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    bd(d, a * -7, a * -20, a * 14, a * 37, a * 20);
    d.restore();
    gd(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    bd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    gd(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    bd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    gd(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    bd(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    gd(d, b[3], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    bd(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    gd(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    bd(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    gd(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    bd(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    gd(d, b[3], b[2], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    bd(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    gd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    bd(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    gd(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    bd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    gd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    bd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    gd(d, b[2]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    bd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    gd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    bd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    gd(d, b[2]);
    return c;
  }
  function Xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    vd(e, a * 54.5, a * 55, a * 48.038209575038294);
    gd(e, b[0], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      gd(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      bd(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      gd(e, b[2], b[3], a * 4);
      vd(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      gd(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      bd(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      gd(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      gd(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      gd(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      gd(e, undefined, b[5], a * 4);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      gd(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      gd(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      gd(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      gd(e, b[2]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      gd(e, b[2], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      gd(e, b[3]);
    }
    return d;
  }
  function $c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    gd(e, c[0], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    gd(e, Lq, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    gd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    gd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    gd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    gd(e, c[2], c[3], a * 12);
    return d;
  }
  function ep(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = 0.3;
    vd(e, a * 98, a * 99, a * 100);
    gd(e, c[0]);
    e.globalAlpha = 0.5;
    vd(e, a * 98, a * 99, a * 90);
    gd(e, c[1]);
    return d;
  }
  function ip(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    gd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    gd(d, undefined, b[1], a * 12);
    d.translate(a * -1, a * 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    gd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    gd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    gd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    gd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    gd(d, b[2], b[3], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    gd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    gd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    gd(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    gd(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    gd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    gd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    gd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    gd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    gd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    gd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    gd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    gd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    gd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    gd(d, b[11]);
    vd(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    gd(d, b[12]);
    vd(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    gd(d, b[13]);
    vd(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    gd(d, b[12]);
    vd(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    gd(d, b[13]);
    return c;
  }
  function tp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    gd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    gd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    gd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    gd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    gd(e, un, c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    gd(e, c[4], c[5], a * 5);
    return d;
  }
  function np(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    bd(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    gd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    gd(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    gd(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    gd(e, undefined, c[6], a * 15);
    return d;
  }
  function op(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    vd(e, a * 220, a * 201, a * 170.41713528867922);
    gd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    vd(e, a * 220, a * 201, a * 170.41713528867922);
    gd(e, c[1], c[2], a * 6);
    vd(e, a * 220, a * 201, a * 130);
    gd(e, c[11], c[2], a * 6);
    vd(e, a * 222, a * 199, a * 120.74767078498864);
    gd(e, Bj, c[3], a * 40);
    vd(e, a * 220, a * 200, a * 95.44108130150245);
    gd(e, undefined, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    vd(e, a * 63, a * 136, a * 49.193495504995376);
    gd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    vd(e, a * 63, a * 136, a * 49.193495504995376);
    gd(e, c[8], c[2], a * 4);
    vd(e, a * 63, a * 137, a * 25.632011235952593);
    gd(e, c[7], c[2], a * 4);
    return d;
  }
  function ap(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    gd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    gd(e, c[1], c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    gd(e, jt, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    gd(e, w, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    gd(e, c[3], c[2], a * 19);
    vd(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    gd(e, c[4]);
    vd(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    gd(e, c[4]);
    vd(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    gd(e, c[4]);
    vd(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    gd(e, c[4]);
    vd(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    gd(e, c[4]);
    vd(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    gd(e, c[4]);
    vd(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    gd(e, c[4]);
    vd(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    gd(e, c[4]);
    vd(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    gd(e, c[4]);
    vd(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    gd(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    gd(e, c[5]);
    return d;
  }
  function rp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    gd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    gd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    gd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    gd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    gd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    gd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    gd(e, c[8], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    gd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    gd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    gd(e, c[3], c[2], a * 4);
    vd(e, a * 108.5, a * 148.421875, a * 9);
    gd(e, c[5]);
    vd(e, a * 106.5, a * 144.421875, a * 3);
    gd(e, c[6]);
    vd(e, a * 46.5, a * 148.421875, a * 9);
    gd(e, c[5]);
    vd(e, a * 44.5, a * 144.421875, a * 3);
    gd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    gd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.translate(0, a * -2);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    gd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    gd(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    gd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    gd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    gd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    gd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    gd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    gd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    gd(e, c[3], c[2], a * 4);
    return d;
  }
  function sp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    vd(e, a * 69, a * 64, a * 48.16637831516918);
    gd(e, c[1]);
    e.globalAlpha = 0.7;
    vd(e, a * 69, a * 64, a * 38.23105625617661);
    gd(e, c[2]);
    e.globalAlpha = 0.7;
    vd(e, a * 69, a * 64, a * 32.01562118716424);
    gd(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    gd(e, c[3]);
    return d;
  }
  function hp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    pd(e, 6, a * 40, a * 10);
    e.restore();
    gd(e, c[0], c[1], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    pd(e, 6, a * 25.11521001172521, a * 10);
    e.restore();
    gd(e, c[2], c[3], a * 5);
    return d;
  }
  function gp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    vd(d, a * 55, a * 55, a * 55);
    gd(d, b[0]);
    return c;
  }
  function lp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    bd(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    gd(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    bd(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    gd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    gd(e, c[5]);
    e.restore();
    return d;
  }
  function up(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    gd(e, c[0], c[0], a * 10);
    e.translate(a * 0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    gd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    gd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    gd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    gd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    gd(e, c[1], c[1], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    gd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    gd(e, c[2], c[3], a * 10);
    vd(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    gd(e, c[4], c[5], a * 1);
    vd(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    gd(e, c[4], c[5], a * 1);
    vd(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    gd(e, c[4], c[5], a * 1);
    vd(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    gd(e, c[4], c[5], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    gd(e, c[4], c[5], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    gd(e, c[6]);
    return d;
  }
  function bp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    bd(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    gd(e, c[0]);
    bd(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    gd(e, c[0]);
    bd(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    gd(e, c[0]);
    bd(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    gd(e, c[0]);
    bd(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    bd(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    gd(e, c[1]);
    bd(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    gd(e, c[1]);
    bd(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    gd(e, c[2], c[3], a * 4);
    bd(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    gd(e, c[2], c[3], a * 4);
    bd(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    gd(e, c[2], c[3], a * 4);
    return d;
  }
  function dp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    bd(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    gd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    gd(e, fo, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    gd(e, _h, c[6], a * 15);
    return d;
  }
  function vp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    gd(e, c[0], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    gd(e, c[1]);
    return d;
  }
  function mp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    gd(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    bd(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    gd(e, c[0]);
    e.translate(a * 0, 0);
    e.globalAlpha = 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    gd(e, c[3], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    gd(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    gd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    bd(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 3);
    return d;
  }
  function cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    bd(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    bd(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    gd(e, undefined, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    bd(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    bd(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    gd(e, undefined, c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    gd(e, undefined, c[1], a * 10);
    return d;
  }
  function pp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    bd(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    bd(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    gd(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    bd(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    gd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80, a * 79.5);
    bd(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    bd(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    gd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    gd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    gd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    gd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    gd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    bd(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 78.5, a * 78);
    bd(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    gd(e, c[3], c[4], a * 6);
    return d;
  }
  function Cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(0, a * 10);
    e.scale(0.2, 0.2);
    e.translate(0, a * -30);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      gd(e, b[0], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    gd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    gd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    gd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    gd(e, b[2], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    gd(e, b[1]);
    e.scale(3, 3);
    e.translate(15, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 32);
      e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      gd(e, undefined, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      e.closePath();
      gd(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    gd(e, undefined, b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    gd(e, b[1], b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    gd(e, jt, b[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    gd(e, b[2], b[2], a * 10);
    return d;
  }
  function Tp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    bd(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    gd(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    bd(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    gd(e, c[0], c[0], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    bd(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    gd(e, c[0], c[0], a * 4);
    e.translate(a * 5, a * 0);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    bd(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    gd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    bd(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    gd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    bd(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    gd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    gd(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    gd(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    gd(e, c[9], c[8], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    gd(e, c[11], c[10], a * 3);
    return d;
  }
  function fp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 496;
    e.height = b * 520;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    f.closePath();
    gd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -10);
    vd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    gd(f, d[5], Xs, b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    f.closePath();
    gd(f, d[0]);
    f.globalAlpha = 1;
    var g = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      vd(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      gd(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      vd(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      gd(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    f.drawImage(g, 0, 0);
    f.translate(0, b * -10);
    vd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    gd(f, undefined, d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    gd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    gd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    gd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    gd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    gd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    gd(f, d[4], d[2], b * 12);
    return e;
  }
  function zp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    bd(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    gd(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    bd(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    bd(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    gd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    bd(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    bd(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    gd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    bd(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    bd(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    gd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    bd(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    bd(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    gd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    bd(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    bd(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    gd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    bd(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    bd(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    gd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    bd(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    bd(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    gd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    bd(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    gd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    bd(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    gd(e, c[2], c[3], a * 3);
    return d;
  }
  function yp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    gd(e, undefined, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    gd(e, undefined, c[1], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    gd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    gd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    gd(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    gd(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    gd(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    gd(e, Xs, c[3], a * 4);
    return d;
  }
  function wp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 200;
    g.translate(b * 5, b * 15);
    if (e == 1) {
      g.translate(0, b * -5);
      vd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      gd(g, d[1], d[5], b * 20);
      vd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      gd(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 31.267044067382812);
      bd(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
      g.restore();
      gd(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 13.267044067382812);
      bd(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
      g.restore();
      gd(g, d[1], d[5], b * 20);
    }
    vd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    gd(g, d[1], d[2], b * 7);
    vd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    gd(g, d[1], d[2], b * 7);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    g.closePath();
    gd(g, d[1], d[2], b * 8);
    vd(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    gd(g, d[1], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    g.closePath();
    gd(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    g.closePath();
    gd(g, d[3], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    g.closePath();
    gd(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    g.closePath();
    gd(g, d[3], d[2], b * 4);
    vd(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    gd(g, d[3], d[2], b * 4);
    g.save();
    g.translate(b * 77.00003051757812, b * 31.267044067382812);
    g.rotate(0);
    bd(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
    g.restore();
    gd(g, d[1], d[2], b * 7);
    g.save();
    g.translate(b * 77.00003051757812, b * 13.267044067382812);
    g.rotate(0);
    bd(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
    g.restore();
    gd(g, d[1], d[2], b * 7);
    return f;
  }
  function Pp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 198;
    f.height = b * 147;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 76);
    g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    g.closePath();
    gd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    gd(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    gd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 49, b * 98);
    g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    g.closePath();
    gd(g, d[1]);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 54, b * 98);
    g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    g.closePath();
    gd(g, d[0]);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 118, b * 47);
    g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
    g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
    g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    g.closePath();
    gd(g, d[1], d[2], b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 62, b * 21);
    g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    g.closePath();
    gd(g, d[4]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 60, b * 29);
    g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    gd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 61, b * 37);
    g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    gd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 52, b * 31);
    g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    gd(g, Uj, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 35);
    g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    gd(g, Ql, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 58, b * 44);
    g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    gd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 48);
    g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    gd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 41);
    g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    gd(g, vs, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 48);
    g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    gd(g, undefined, d[3], b * 4);
    if (e == 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 99, b * 101);
      g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      gd(g, Ql, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      gd(g, Il, d[5], b * 6);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      gd(g, jt, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      gd(g, undefined, d[5], b * 6);
      vd(g, b * 86, b * 114.39999389648438, b * 4.5);
      gd(g, d[1], d[5], b * 6);
      vd(g, b * 121, b * 114.39999389648438, b * 4.5);
      gd(g, d[1], d[5], b * 6);
    }
    return f;
  }
  function kp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      gd(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    gd(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    gd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    e.closePath();
    gd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    gd(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    gd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    gd(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    gd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    gd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    gd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    gd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    gd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    gd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    gd(e, b[3], b[3], a * 12);
    return d;
  }
  function Ap(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    gd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    gd(e, Il, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    gd(e, c[3], c[2], a * 12);
    e.translate(0, a * 25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    gd(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    gd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    gd(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    gd(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    gd(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    gd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    gd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    gd(e, Uk, c[2], a * 11);
    return d;
  }
  const xp = 0;
  function Jp(b, c, d, e, f) {
    const g = ~(b & 3487) & (b | 3487);
    const a = ~(f & 43730) & 43730 | ~(f & 43730) & f;
    const h = tr(g, (1013904223 + (c + 52656) * 1664525) % 4294967296);
    Ep(a, g);
    return h ^ 7085;
  }
  function Mp(a) {
    return function (a, b) {
      ii(yt, a, b);
      const c = ix(sb[0], sb[1], sb[0], sb[1], sb[0], sb[1]);
      const d = ix(sb[0], sb[1], sb[0], sb[1], sb[0], sb[1]);
      return (0 << ((c ^ d) >> 16 & 255)) + (8 << ((c ^ d) & 255)) + (16 << ((c ^ d) >> 24 & 255)) + (24 << ((c ^ d) >> 8 & 255));
    }(a, 2413);
  }
  function Bp() {
    ⵠⵠ[814] = Kt(1, [{
      f: Rc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[815] = ⵠⵠ[814];
    ⵠⵠ[955] = [];
    ⵠⵠ[955][0] = ᐃᐃ.ⲆΔⵠⵠΔᐃⵠ;
    ⵠⵠ[955][1] = ᐃᐃ.ⵠⲆⵠⵠΔⵠⵠ;
    ⵠⵠ[955][2] = ᐃᐃ.ⵠΔᐃⵠᐃᐃᐃ;
    ⵠⵠ[956] = ⵠⵠ[955];
    ⵠⵠ[972] = [];
    ⵠⵠ[972][0] = ᐃᐃ.ⵠⵠⵠΔᐃⵠᐃ;
    ⵠⵠ[972][1] = ᐃᐃ.ΔⲆⵠⲆⵠⲆΔ;
    ⵠⵠ[972][2] = ᐃᐃ.ᐃⵠΔⵠᐃΔⵠ;
    ⵠⵠ[973] = ⵠⵠ[972];
    ⵠⵠ[987] = [];
    ⵠⵠ[987][0] = ᐃᐃ.ᐃᐃⲆⲆⵠᐃⵠ;
    ⵠⵠ[987][1] = ᐃᐃ.ⲆⵠΔⲆᐃᐃⵠ;
    ⵠⵠ[987][2] = ᐃᐃ.ᐃⲆⵠΔⲆⲆΔ;
    ⵠⵠ[988] = ⵠⵠ[987];
    ⵠⵠ[1154] = [];
    ⵠⵠ[1154][0] = ᐃᐃ.ⵠⲆᐃⵠΔΔΔ;
    ⵠⵠ[1154][1] = ᐃᐃ.ⵠΔΔⵠⲆΔᐃ;
    ⵠⵠ[1154][2] = ᐃᐃ.ᐃΔᐃⲆⵠⵠⵠ;
    ⵠⵠ[1155] = ⵠⵠ[1154];
    ⵠⵠ[965] = [];
    ⵠⵠ[965][0] = ᐃᐃ.ⵠΔΔΔΔΔΔ;
    ⵠⵠ[965][1] = ᐃᐃ.ᐃᐃᐃΔⵠᐃᐃ;
    ⵠⵠ[965][2] = ᐃᐃ.ⲆᐃΔⲆⲆⲆⵠ;
    ⵠⵠ[974] = ⵠⵠ[965];
    ⵠⵠ[1028] = [];
    ⵠⵠ[1028][0] = ᐃᐃ.ⲆᐃᐃⵠΔⵠⲆ;
    ⵠⵠ[1028][1] = ᐃᐃ.ΔᐃᐃΔⲆⲆᐃ;
    ⵠⵠ[1028][2] = ᐃᐃ.ᐃᐃᐃⲆᐃᐃⵠ;
    ⵠⵠ[1029] = ⵠⵠ[1028];
    ⵠⵠ[1027] = ⵠⵠ[1028];
    ⵠⵠ[712] = [];
    ⵠⵠ[712][0] = ᐃᐃ.ⲆⲆΔΔΔᐃⵠΔᐃ;
    ⵠⵠ[712][1] = ᐃᐃ.ᐃᐃΔΔᐃⲆⵠΔⵠ;
    ⵠⵠ[712][2] = ᐃᐃ.ᐃᐃᐃⲆᐃⲆΔⲆⵠ;
    ⵠⵠ[713] = ⵠⵠ[712];
    ⵠⵠ[714] = ⵠⵠ[712];
    ⵠⵠ[1031] = [];
    ⵠⵠ[1031][0] = ᐃᐃ.ΔⵠⵠⵠᐃΔᐃ;
    ⵠⵠ[1031][1] = ᐃᐃ.ΔⲆⲆⵠⲆΔΔ;
    ⵠⵠ[1031][2] = ᐃᐃ.ⲆⵠᐃⵠΔⵠⲆ;
    ⵠⵠ[1032] = ⵠⵠ[1031];
    ⵠⵠ[1030] = ⵠⵠ[1031];
    ⵠⵠ[423] = [];
    ⵠⵠ[423][0] = ᐃᐃ.ⲆΔⵠⲆΔⵠΔ;
    ⵠⵠ[423][1] = ᐃᐃ.ⵠΔⵠⵠⵠΔΔ;
    ⵠⵠ[423][2] = ᐃᐃ.ΔΔΔᐃᐃⵠⲆ;
    ⵠⵠ[425] = ⵠⵠ[423];
    ⵠⵠ[424] = ⵠⵠ[423];
    ⵠⵠ[1233] = [];
    ⵠⵠ[1233][0] = ᐃᐃ.ΔΔⵠΔⲆⲆΔ;
    ⵠⵠ[1233][1] = ᐃᐃ.ΔⵠⲆᐃⵠᐃⲆ;
    ⵠⵠ[1233][2] = ᐃᐃ.ΔⵠⲆⲆᐃΔΔ;
    ⵠⵠ[1234] = ⵠⵠ[1233];
    ⵠⵠ[1230] = [];
    ⵠⵠ[1230][0] = ᐃᐃ.ᐃΔⵠⵠᐃⲆⵠ;
    ⵠⵠ[1230][1] = ᐃᐃ.ⲆⵠⵠⵠⲆΔΔ;
    ⵠⵠ[1230][2] = ᐃᐃ.ⵠΔᐃⲆⵠⵠⵠ;
    ⵠⵠ[1232] = ⵠⵠ[1230];
    ⵠⵠ[1231] = ⵠⵠ[1230];
    ⵠⵠ[569] = [];
    ⵠⵠ[569][0] = ᐃᐃ.ⲆⵠᐃⲆᐃⲆⲆ;
    ⵠⵠ[569][1] = ᐃᐃ.ⵠᐃΔⵠⵠᐃᐃ;
    ⵠⵠ[569][2] = ᐃᐃ.ⵠⲆᐃᐃΔΔⲆ;
    ⵠⵠ[571] = ⵠⵠ[569];
    ⵠⵠ[570] = ⵠⵠ[569];
    ⵠⵠ[1166] = [];
    ⵠⵠ[1166][0] = ᐃᐃ.ⵠⲆᐃΔᐃᐃⵠ;
    ⵠⵠ[1166][1] = ᐃᐃ.ᐃᐃⵠⲆⵠⲆⲆⵠᐃ;
    ⵠⵠ[1166][2] = ᐃᐃ.ΔᐃᐃᐃⲆⲆΔⵠⵠ;
    ⵠⵠ[1167] = ⵠⵠ[1166];
    ⵠⵠ[1168] = ⵠⵠ[1166];
    ⵠⵠ[572] = [];
    ⵠⵠ[572][0] = ᐃᐃ.ΔⲆᐃΔⲆⲆᐃⵠΔ;
    ⵠⵠ[572][1] = ᐃᐃ.ⲆΔⲆᐃⲆⲆᐃⵠⵠ;
    ⵠⵠ[572][2] = ᐃᐃ.ⵠⲆⵠⵠᐃᐃⵠΔⲆ;
    ⵠⵠ[574] = ⵠⵠ[572];
    ⵠⵠ[573] = ⵠⵠ[572];
    ⵠⵠ[1169] = [];
    ⵠⵠ[1169][0] = ᐃᐃ.ᐃⵠⵠΔⵠΔᐃⵠᐃ;
    ⵠⵠ[1169][1] = ᐃᐃ.ΔΔᐃΔⲆΔⲆΔᐃ;
    ⵠⵠ[1169][2] = ᐃᐃ.ⵠᐃΔΔⲆᐃᐃⵠΔ;
    ⵠⵠ[1170] = ⵠⵠ[1169];
    ⵠⵠ[1171] = ⵠⵠ[1169];
    ⵠⵠ[575] = [];
    ⵠⵠ[575][0] = ᐃᐃ.ⵠⵠΔⲆΔΔⵠΔᐃ;
    ⵠⵠ[575][1] = ᐃᐃ.ᐃΔⲆᐃᐃᐃⵠⵠⵠ;
    ⵠⵠ[575][2] = ᐃᐃ.ⲆⵠΔⵠᐃⵠⲆΔⲆ;
    ⵠⵠ[577] = ⵠⵠ[575];
    ⵠⵠ[576] = ⵠⵠ[575];
    ⵠⵠ[1172] = [];
    ⵠⵠ[1172][0] = ᐃᐃ.ⲆⲆⵠⵠΔΔⲆΔΔ;
    ⵠⵠ[1172][1] = ᐃᐃ.ⲆⵠΔⲆⵠⲆⲆᐃᐃ;
    ⵠⵠ[1172][2] = ᐃᐃ.ⲆΔᐃⲆⵠΔⵠⲆᐃ;
    ⵠⵠ[1173] = ⵠⵠ[1172];
    ⵠⵠ[1174] = ⵠⵠ[1172];
    ⵠⵠ[578] = [];
    ⵠⵠ[578][0] = ᐃᐃ.ᐃⵠᐃᐃⲆΔⵠⲆⲆ;
    ⵠⵠ[578][1] = ᐃᐃ.ᐃⵠΔⲆⵠⲆΔⲆΔ;
    ⵠⵠ[578][2] = ᐃᐃ.ⲆⲆᐃᐃⲆⲆΔΔΔ;
    ⵠⵠ[580] = ⵠⵠ[578];
    ⵠⵠ[579] = ⵠⵠ[578];
    ⵠⵠ[1175] = [];
    ⵠⵠ[1175][0] = ᐃᐃ.ⵠᐃΔⵠᐃⲆⵠᐃΔ;
    ⵠⵠ[1175][1] = ᐃᐃ.ᐃⵠⵠᐃΔΔⲆᐃⲆ;
    ⵠⵠ[1175][2] = ᐃᐃ.ⲆⵠᐃΔΔᐃΔⵠⲆ;
    ⵠⵠ[1176] = ⵠⵠ[1175];
    ⵠⵠ[1177] = ⵠⵠ[1175];
    ⵠⵠ[581] = [];
    ⵠⵠ[581][0] = ᐃᐃ.ⲆⵠⲆᐃᐃΔⲆⲆΔ;
    ⵠⵠ[581][1] = ᐃᐃ.ᐃᐃⵠⲆⵠⵠᐃⵠⵠ;
    ⵠⵠ[581][2] = ᐃᐃ.ⲆⵠᐃⲆⲆΔⲆΔΔ;
    ⵠⵠ[583] = ⵠⵠ[581];
    ⵠⵠ[582] = ⵠⵠ[581];
    ⵠⵠ[1178] = [];
    ⵠⵠ[1178][0] = ᐃᐃ.ⵠⲆᐃΔΔⲆᐃΔΔ;
    ⵠⵠ[1178][1] = ᐃᐃ.ΔⵠⵠⵠΔⵠΔΔⵠ;
    ⵠⵠ[1178][2] = ᐃᐃ.ΔⵠᐃⵠⵠΔΔᐃΔ;
    ⵠⵠ[1179] = ⵠⵠ[1178];
    ⵠⵠ[1180] = ⵠⵠ[1178];
    ⵠⵠ[584] = [];
    ⵠⵠ[584][0] = ᐃᐃ.ⲆᐃⲆᐃⵠΔᐃⲆΔ;
    ⵠⵠ[584][1] = ᐃᐃ.ΔⲆⵠᐃⵠⲆⵠⵠⵠ;
    ⵠⵠ[584][2] = ᐃᐃ.ΔᐃᐃΔⵠᐃΔⵠᐃ;
    ⵠⵠ[586] = ⵠⵠ[584];
    ⵠⵠ[585] = ⵠⵠ[584];
    ⵠⵠ[1181] = [];
    ⵠⵠ[1181][0] = ᐃᐃ.ᐃⲆΔᐃΔⲆⲆⵠⵠ;
    ⵠⵠ[1181][1] = ᐃᐃ.ⵠⲆᐃᐃⲆⲆⲆΔΔ;
    ⵠⵠ[1181][2] = ᐃᐃ.ΔᐃⲆⲆΔⲆⵠᐃⵠ;
    ⵠⵠ[1182] = ⵠⵠ[1181];
    ⵠⵠ[1183] = ⵠⵠ[1181];
    ⵠⵠ[587] = [];
    ⵠⵠ[587][0] = ᐃᐃ.ᐃᐃᐃᐃᐃᐃⲆⵠⵠ;
    ⵠⵠ[587][1] = ᐃᐃ.ⲆᐃⲆⵠΔΔⲆΔᐃ;
    ⵠⵠ[587][2] = ᐃᐃ.ᐃᐃⲆⲆⲆΔΔⵠⲆ;
    ⵠⵠ[589] = ⵠⵠ[587];
    ⵠⵠ[588] = ⵠⵠ[587];
    ⵠⵠ[1184] = [];
    ⵠⵠ[1184][0] = ᐃᐃ.ⲆⲆΔⵠᐃΔᐃᐃⵠ;
    ⵠⵠ[1184][1] = ᐃᐃ.ᐃΔⵠⲆⵠⲆᐃⵠⵠ;
    ⵠⵠ[1184][2] = ᐃᐃ.ᐃΔⲆⵠⲆᐃⵠⲆᐃ;
    ⵠⵠ[1185] = ⵠⵠ[1184];
    ⵠⵠ[1186] = ⵠⵠ[1184];
    ⵠⵠ[1257] = [];
    ⵠⵠ[1257][0] = ᐃᐃ.ᐃᐃᐃⲆⵠⵠΔⵠᐃ;
    ⵠⵠ[1257][1] = ᐃᐃ.ⲆⲆⲆⵠⵠⲆⲆⵠⲆ;
    ⵠⵠ[1257][2] = ᐃᐃ.ΔΔᐃⵠⵠⲆⵠⲆᐃ;
    ⵠⵠ[1258] = ⵠⵠ[1257];
    ⵠⵠ[1256] = ⵠⵠ[1257];
    ⵠⵠ[1260] = [];
    ⵠⵠ[1260][0] = ᐃᐃ.ΔᐃᐃΔⲆΔⲆΔΔ;
    ⵠⵠ[1260][1] = ᐃᐃ.ᐃΔΔⲆΔⲆⵠⵠᐃ;
    ⵠⵠ[1260][2] = ᐃᐃ.ⵠⵠⵠⵠΔⲆΔⲆΔ;
    ⵠⵠ[1261] = ⵠⵠ[1260];
    ⵠⵠ[1259] = ⵠⵠ[1260];
    ⵠⵠ[1263] = [];
    ⵠⵠ[1263][0] = ᐃᐃ.ⲆᐃᐃⵠᐃⲆΔΔⵠ;
    ⵠⵠ[1263][1] = ᐃᐃ.ᐃⵠΔⵠⵠᐃΔᐃⵠ;
    ⵠⵠ[1263][2] = ᐃᐃ.ⵠᐃⲆᐃΔⵠᐃΔⲆ;
    ⵠⵠ[1264] = ⵠⵠ[1263];
    ⵠⵠ[1262] = ⵠⵠ[1263];
    ⵠⵠ[1266] = [];
    ⵠⵠ[1266][0] = ᐃᐃ.ΔⲆΔⲆᐃⵠⵠᐃᐃ;
    ⵠⵠ[1266][1] = ᐃᐃ.ΔⵠᐃᐃΔᐃⵠⵠⲆ;
    ⵠⵠ[1266][2] = ᐃᐃ.ⵠΔⲆᐃⵠⲆⵠᐃᐃ;
    ⵠⵠ[1267] = ⵠⵠ[1266];
    ⵠⵠ[1265] = ⵠⵠ[1266];
    ⵠⵠ[1269] = [];
    ⵠⵠ[1269][0] = ᐃᐃ.ⲆⵠΔᐃⲆΔΔⲆᐃ;
    ⵠⵠ[1269][1] = ᐃᐃ.ⵠⲆΔⵠΔⵠΔⲆΔ;
    ⵠⵠ[1269][2] = ᐃᐃ.ᐃⵠⵠⲆⲆᐃᐃΔᐃ;
    ⵠⵠ[1270] = ⵠⵠ[1269];
    ⵠⵠ[1268] = ⵠⵠ[1269];
    ⵠⵠ[1272] = [];
    ⵠⵠ[1272][0] = ᐃᐃ.ⵠⲆᐃⲆⲆΔᐃᐃⵠ;
    ⵠⵠ[1272][1] = ᐃᐃ.ΔⵠᐃΔⵠⵠⲆⲆⲆ;
    ⵠⵠ[1272][2] = ᐃᐃ.ΔⲆⵠⵠⵠΔⵠⲆᐃ;
    ⵠⵠ[1273] = ⵠⵠ[1272];
    ⵠⵠ[1271] = ⵠⵠ[1272];
    ⵠⵠ[1239] = [];
    ⵠⵠ[1239][0] = ᐃᐃ.ⲆΔⲆᐃⵠⲆΔⲆᐃ;
    ⵠⵠ[1239][1] = ᐃᐃ.ΔⲆⲆⵠⵠⵠΔᐃΔ;
    ⵠⵠ[1239][2] = ᐃᐃ.ᐃⲆⲆⵠᐃΔΔⲆΔ;
    ⵠⵠ[1240] = ⵠⵠ[1239];
    ⵠⵠ[1238] = ⵠⵠ[1239];
    ⵠⵠ[1242] = [];
    ⵠⵠ[1242][0] = ᐃᐃ.ⲆⲆᐃΔΔᐃΔᐃᐃ;
    ⵠⵠ[1242][1] = ᐃᐃ.ⵠᐃⲆΔΔΔⲆⲆΔ;
    ⵠⵠ[1242][2] = ᐃᐃ.ⲆΔΔΔᐃⲆᐃⲆᐃ;
    ⵠⵠ[1243] = ⵠⵠ[1242];
    ⵠⵠ[1241] = ⵠⵠ[1242];
    ⵠⵠ[1245] = [];
    ⵠⵠ[1245][0] = ᐃᐃ.ⲆΔΔⲆⵠⲆΔⵠⲆ;
    ⵠⵠ[1245][1] = ᐃᐃ.ᐃΔⵠⲆⲆⲆⵠⲆⵠ;
    ⵠⵠ[1245][2] = ᐃᐃ.ᐃΔΔᐃΔΔⵠΔⵠ;
    ⵠⵠ[1246] = ⵠⵠ[1245];
    ⵠⵠ[1244] = ⵠⵠ[1245];
    ⵠⵠ[1248] = [];
    ⵠⵠ[1248][0] = ᐃᐃ.ⵠᐃⲆᐃΔΔᐃΔⲆ;
    ⵠⵠ[1248][1] = ᐃᐃ.ΔᐃⵠⵠΔⲆⲆⵠⲆ;
    ⵠⵠ[1248][2] = ᐃᐃ.ⲆᐃᐃΔⲆⲆⵠΔⲆ;
    ⵠⵠ[1249] = ⵠⵠ[1248];
    ⵠⵠ[1247] = ⵠⵠ[1248];
    ⵠⵠ[1251] = [];
    ⵠⵠ[1251][0] = ᐃᐃ.ΔΔⵠⲆⲆΔΔⲆⵠ;
    ⵠⵠ[1251][1] = ᐃᐃ.ⵠⵠᐃⵠᐃΔⵠᐃⲆ;
    ⵠⵠ[1251][2] = ᐃᐃ.ᐃⲆⵠᐃΔⲆⲆⵠᐃ;
    ⵠⵠ[1252] = ⵠⵠ[1251];
    ⵠⵠ[1250] = ⵠⵠ[1251];
    ⵠⵠ[1254] = [];
    ⵠⵠ[1254][0] = ᐃᐃ.ΔΔΔⵠᐃΔΔⵠⵠ;
    ⵠⵠ[1254][1] = ᐃᐃ.ΔⲆⲆⲆᐃⵠⲆⵠⲆ;
    ⵠⵠ[1254][2] = ᐃᐃ.ⵠΔΔⵠᐃᐃᐃⲆⲆ;
    ⵠⵠ[1255] = ⵠⵠ[1254];
    ⵠⵠ[1253] = ⵠⵠ[1254];
    ⵠⵠ[1227] = [];
    ⵠⵠ[1227][0] = ᐃᐃ.ⵠᐃⵠⲆΔⲆⵠ;
    ⵠⵠ[1227][1] = ᐃᐃ.ⲆⲆⲆΔΔⵠΔ;
    ⵠⵠ[1227][2] = ᐃᐃ.ΔⵠⲆⵠⲆⲆΔ;
    ⵠⵠ[1229] = ⵠⵠ[1227];
    ⵠⵠ[1228] = ⵠⵠ[1227];
    ⵠⵠ[1187] = [];
    ⵠⵠ[1187][0] = ᐃᐃ.ⵠⲆᐃⵠⲆΔⲆ;
    ⵠⵠ[1187][1] = ᐃᐃ.ΔΔⲆⵠⲆᐃΔ;
    ⵠⵠ[1187][2] = ᐃᐃ.ᐃΔΔᐃⵠᐃΔ;
    ⵠⵠ[1188] = ⵠⵠ[1187];
    ⵠⵠ[Cr.ΔᐃᐃⲆΔⵠᐃⲆΔ] = ⵠⵠ[1187];
    ⵠⵠ[840] = Kt(1, [{
      f: kd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
    }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[841] = ⵠⵠ[840];
    ⵠⵠ[850] = Kt(1, [{
      f: tp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[851] = ⵠⵠ[850];
    ⵠⵠ[644] = Kt(1, [{
      f: Mt,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Pt,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Ht,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[643] = ⵠⵠ[644];
    ⵠⵠ[639] = Kt(1, [{
      f: Gd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[800] = Kt(1, [{
      f: sc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[799] = ⵠⵠ[800];
    ⵠⵠ[631] = Kt(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[632] = ⵠⵠ[631];
    ⵠⵠ[311] = Kt(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#493d36", "#332b28"]
    }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[284] = ⵠⵠ[311];
    ⵠⵠ[808] = Kt(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c67933", "#b17238"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[809] = ⵠⵠ[808];
    ⵠⵠ[834] = Kt(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e8e8e8", "#bbbbbb"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[835] = ⵠⵠ[834];
    ⵠⵠ[845] = Kt(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#328a56", "#449573"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[846] = ⵠⵠ[845];
    ⵠⵠ[949] = Kt(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c98e2f", "#a36b11"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[950] = ⵠⵠ[949];
    ⵠⵠ[951] = ⵠⵠ[949];
    ⵠⵠ[966] = Kt(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#13a56d", "#098a58"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[967] = ⵠⵠ[966];
    ⵠⵠ[968] = ⵠⵠ[966];
    ⵠⵠ[981] = Kt(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a8214", "#4a9c1e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[982] = ⵠⵠ[981];
    ⵠⵠ[983] = ⵠⵠ[981];
    ⵠⵠ[959] = Kt(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#b22419", "#99110e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[960] = ⵠⵠ[959];
    ⵠⵠ[961] = ⵠⵠ[959];
    ⵠⵠ[309] = Kt(1, [{
      f: Nt,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516"]
    }, {
      f: Ot,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[302] = ⵠⵠ[309];
    ⵠⵠ[328] = Kt(1, [{
      f: Lt,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
    }, {
      f: Ot,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[327] = ⵠⵠ[328];
    ⵠⵠ[860] = Kt(1, [{
      f: Xt,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
    }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[865] = Kt(1, [{
      f: ou,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[829] = Kt(1, [{
      f: cu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[261] = Kt(1, [{
      f: hu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[292] = Kt(1, [{
      f: Bu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[293] = Kt(1, [{
      f: su,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[455] = Kt(1, [{
      f: fu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[313] = Kt(1, [{
      f: du,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[312] = Kt(1, [{
      f: du,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[258] = Kt(1, [{
      f: du,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[296] = Kt(1, [{
      f: du,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[458] = Kt(1, [{
      f: du,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[1017] = [];
    ⵠⵠ[1017][0] = ᐃᐃ.ᐃⵠΔⵠⵠᐃⵠ;
    ⵠⵠ[1017][1] = ᐃᐃ.ᐃⲆⵠΔⲆⵠⲆ;
    ⵠⵠ[1017][2] = ᐃᐃ.ΔΔᐃⵠⲆⵠⵠ;
    ⵠⵠ[1019] = ⵠⵠ[1017];
    ⵠⵠ[1018] = ⵠⵠ[1017];
    ⵠⵠ[315] = Kt(1, [{
      f: ru,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#252B28", "#58645F", "#75827D"]
    }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[297] = Kt(1, [{
      f: yu,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#282823", "#877c2d", "#c4bc51"]
    }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[298] = Kt(1, [{
      f: mu,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#232828", "#3fc9c9", "#74ede6"]
    }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[316] = Kt(1, [{
      f: Nt,
      x: 0,
      y: -5,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[830] = ⵠⵠ[829];
    ⵠⵠ[254] = ⵠⵠ[261];
    ⵠⵠ[290] = ⵠⵠ[292];
    ⵠⵠ[291] = ⵠⵠ[293];
    ⵠⵠ[456] = ⵠⵠ[455];
    ⵠⵠ[314] = ⵠⵠ[313];
    ⵠⵠ[256] = ⵠⵠ[312];
    ⵠⵠ[295] = ⵠⵠ[258];
    ⵠⵠ[257] = ⵠⵠ[296];
    ⵠⵠ[460] = ⵠⵠ[458];
    ⵠⵠ[277] = Kt(1, [{
      f: Kd,
      x: 0,
      y: 0,
      a: 1,
      r: 0
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[310] = Kt(1, [{
      f: Wd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[262] = ⵠⵠ[310];
    ⵠⵠ[329] = Kt(1, [{
      f: rm,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[263] = ⵠⵠ[329];
    ⵠⵠ[331] = Kt(1, [{
      f: im,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[332] = ⵠⵠ[331];
    ⵠⵠ[492] = Kt(1, [{
      f: rm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[493] = ⵠⵠ[492];
    ⵠⵠ[330] = Kt(1, [{
      f: dm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[265] = ⵠⵠ[330];
    ⵠⵠ[317] = Kt(1, [{
      f: bm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[318] = ⵠⵠ[317];
    ⵠⵠ[319] = Kt(1, [{
      f: Fm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[320] = ⵠⵠ[319];
    ⵠⵠ[362] = Kt(1, [{
      f: _c,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[363] = ⵠⵠ[362];
    ⵠⵠ[364] = Kt(1, [{
      f: _c,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[365] = ⵠⵠ[364];
    ⵠⵠ[361] = Kt(1, [{
      f: Xm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[360] = ⵠⵠ[361];
    ⵠⵠ[495] = Kt(1, [{
      f: Xm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[496] = ⵠⵠ[495];
    ⵠⵠ[335] = Kt(1, [{
      f: hm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[268] = ⵠⵠ[335];
    ⵠⵠ[372] = Kt(1, [{
      f: mm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[371] = ⵠⵠ[372];
    ⵠⵠ[499] = Kt(1, [{
      f: mm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[498] = ⵠⵠ[499];
    ⵠⵠ[375] = Kt(1, [{
      f: cm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[374] = ⵠⵠ[375];
    ⵠⵠ[378] = Kt(1, [{
      f: fm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[377] = ⵠⵠ[378];
    ⵠⵠ[337] = Kt(1, [{
      f: km,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[338] = ⵠⵠ[337];
    ⵠⵠ[300] = Kt(1, [{
      f: Yd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[323] = Kt(1, [{
      f: Yd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[325] = ⵠⵠ[323];
    ⵠⵠ[305] = Kt(1, [{
      f: Ft,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#cec0c4", "#ffffff", "#6d6768"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[513] = Kt(1, [{
      f: Ft,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#d4e9ec", "#37b1d7", "#506c71"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[515] = ⵠⵠ[513];
    ⵠⵠ[368] = Kt(1, [{
      f: jm,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ef96be", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[1162] = Kt(1, [{
      f: jm,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#55423e", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[178] = Kt(1, [{
      f: sm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[179] = Kt(1, [{
      f: sm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[624] = Kt(1, [{
      f: jm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#201851", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[393] = Kt(1, [{
      f: jm,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#231f20", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[505] = Kt(1, [{
      f: jm,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ffffff", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[369] = Kt(1, [{
      f: Im,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[370] = ⵠⵠ[369];
    ⵠⵠ[381] = Kt(1, [{
      f: Em,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[380] = ⵠⵠ[381];
    ⵠⵠ[502] = Kt(1, [{
      f: Wm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[503] = ⵠⵠ[502];
    ⵠⵠ[880] = Kt(1, [{
      f: Vt,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[881] = ⵠⵠ[880];
    ⵠⵠ[882] = Kt(1, [{
      f: Tt,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[883] = ⵠⵠ[882];
    ⵠⵠ[303] = Kt(1, [{
      f: Gt,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#ffffff", "#cec0c4"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[304] = ⵠⵠ[303];
    ⵠⵠ[392] = [];
    ⵠⵠ[392][0] = ᐃᐃ.ᐃᐃᐃⲆⲆⲆΔ;
    ⵠⵠ[392][1] = ᐃᐃ.ΔⵠⲆⲆⵠⲆΔ;
    ⵠⵠ[392][2] = ᐃᐃ.ΔⵠⵠᐃⵠᐃⲆ;
    ⵠⵠ[367] = ⵠⵠ[392];
    ⵠⵠ[975] = [];
    ⵠⵠ[975][0] = ᐃᐃ.ΔⵠⲆⵠⵠⵠⲆ;
    ⵠⵠ[975][1] = ᐃᐃ.ᐃΔⲆΔΔⵠΔ;
    ⵠⵠ[975][2] = ᐃᐃ.ᐃΔⲆΔΔΔΔ;
    ⵠⵠ[977] = ⵠⵠ[975];
    ⵠⵠ[976] = ⵠⵠ[975];
    ⵠⵠ[978] = [];
    ⵠⵠ[978][0] = ᐃᐃ.ΔⵠⲆⵠΔᐃⲆ;
    ⵠⵠ[978][1] = ᐃᐃ.ⲆᐃⵠⲆⵠⵠᐃ;
    ⵠⵠ[978][2] = ᐃᐃ.ⵠΔᐃᐃΔᐃⲆ;
    ⵠⵠ[980] = ⵠⵠ[978];
    ⵠⵠ[979] = ⵠⵠ[978];
    ⵠⵠ[1158] = [];
    ⵠⵠ[1158][0] = ᐃᐃ.ⲆⵠᐃᐃΔⵠⵠ;
    ⵠⵠ[1158][1] = ᐃᐃ.ⲆⵠᐃᐃΔⵠⵠ;
    ⵠⵠ[1158][2] = ᐃᐃ.ⲆⵠᐃᐃΔⵠⵠ;
    ⵠⵠ[1159] = ⵠⵠ[1158];
    ⵠⵠ[426] = [];
    ⵠⵠ[426][0] = ᐃᐃ.ⵠⲆⲆᐃⲆᐃⲆ;
    ⵠⵠ[426][1] = ᐃᐃ.ⵠΔΔΔᐃΔΔ;
    ⵠⵠ[426][2] = ᐃᐃ.ΔⵠᐃⲆᐃᐃᐃ;
    ⵠⵠ[427] = ⵠⵠ[426];
    ⵠⵠ[428] = ⵠⵠ[426];
    ⵠⵠ[1160] = [];
    ⵠⵠ[1160][0] = ᐃᐃ.ᐃΔΔΔⵠΔⲆ;
    ⵠⵠ[1160][1] = ᐃᐃ.ᐃΔΔΔⵠΔⲆ;
    ⵠⵠ[1160][2] = ᐃᐃ.ᐃΔΔΔⵠΔⲆ;
    ⵠⵠ[1161] = ⵠⵠ[1160];
    ⵠⵠ[1236] = [];
    ⵠⵠ[1236][0] = ᐃᐃ.ⵠⲆᐃⲆⵠΔⵠⲆΔ;
    ⵠⵠ[1236][1] = ᐃᐃ.ⲆⲆⲆᐃᐃΔΔⵠᐃ;
    ⵠⵠ[1236][2] = ᐃᐃ.ⲆΔΔⲆᐃᐃᐃΔⵠ;
    ⵠⵠ[1235] = ⵠⵠ[1236];
    ⵠⵠ[1237] = ⵠⵠ[1236];
    ⵠⵠ[991] = [];
    ⵠⵠ[991][0] = ᐃᐃ.ⵠⲆⲆᐃⵠⵠΔ;
    ⵠⵠ[991][1] = ᐃᐃ.ⵠᐃⲆⲆᐃⲆⲆ;
    ⵠⵠ[991][2] = ᐃᐃ.ⵠⲆⲆⵠΔΔᐃ;
    ⵠⵠ[990] = ⵠⵠ[991];
    ⵠⵠ[992] = ⵠⵠ[991];
    ⵠⵠ[994] = [];
    ⵠⵠ[994][0] = ᐃᐃ.ΔⲆⵠΔΔⵠᐃ;
    ⵠⵠ[994][1] = ᐃᐃ.ᐃⲆⲆⵠⲆⲆⵠ;
    ⵠⵠ[994][2] = ᐃᐃ.ᐃᐃᐃΔᐃⵠⲆ;
    ⵠⵠ[993] = ⵠⵠ[994];
    ⵠⵠ[995] = ⵠⵠ[994];
    ⵠⵠ[997] = [];
    ⵠⵠ[997][0] = ᐃᐃ.ᐃⵠᐃᐃᐃΔⲆ;
    ⵠⵠ[997][1] = ᐃᐃ.ΔᐃⲆΔⲆⵠᐃ;
    ⵠⵠ[997][2] = ᐃᐃ.ⵠⵠΔⵠΔΔᐃ;
    ⵠⵠ[996] = ⵠⵠ[997];
    ⵠⵠ[998] = ⵠⵠ[997];
    ⵠⵠ[1000] = [];
    ⵠⵠ[1000][0] = ᐃᐃ.ΔΔΔⵠⲆⲆᐃ;
    ⵠⵠ[1000][1] = ᐃᐃ.ᐃΔΔⵠᐃⲆⲆ;
    ⵠⵠ[1000][2] = ᐃᐃ.ⵠΔΔⵠⵠΔᐃ;
    ⵠⵠ[999] = ⵠⵠ[1000];
    ⵠⵠ[1001] = ⵠⵠ[1000];
    ⵠⵠ[1003] = [];
    ⵠⵠ[1003][0] = ᐃᐃ.ᐃΔⲆⵠΔΔⵠ;
    ⵠⵠ[1003][1] = ᐃᐃ.ⲆⲆΔⲆᐃΔⵠ;
    ⵠⵠ[1003][2] = ᐃᐃ.ⲆΔΔⲆᐃⲆᐃ;
    ⵠⵠ[1002] = ⵠⵠ[1003];
    ⵠⵠ[1004] = ⵠⵠ[1003];
    ⵠⵠ[1006] = [];
    ⵠⵠ[1006][0] = ᐃᐃ.ΔΔⲆⲆⲆΔΔ;
    ⵠⵠ[1006][1] = ᐃᐃ.ΔΔⲆᐃΔⵠⵠ;
    ⵠⵠ[1006][2] = ᐃᐃ.ᐃᐃΔΔΔΔⲆ;
    ⵠⵠ[1005] = ⵠⵠ[1006];
    ⵠⵠ[1007] = ⵠⵠ[1006];
    ⵠⵠ[1009] = [];
    ⵠⵠ[1009][0] = ᐃᐃ.ᐃΔⲆⲆⲆⵠⵠ;
    ⵠⵠ[1009][1] = ᐃᐃ.ⵠᐃⵠᐃΔΔΔ;
    ⵠⵠ[1009][2] = ᐃᐃ.ⵠᐃᐃΔⵠᐃΔ;
    ⵠⵠ[1008] = ⵠⵠ[1009];
    ⵠⵠ[1010] = ⵠⵠ[1009];
    ⵠⵠ[1012] = [];
    ⵠⵠ[1012][0] = ᐃᐃ.ΔⲆⲆⲆⵠΔᐃ;
    ⵠⵠ[1012][1] = ᐃᐃ.ΔᐃΔᐃᐃᐃᐃ;
    ⵠⵠ[1012][2] = ᐃᐃ.ᐃᐃΔΔᐃᐃΔ;
    ⵠⵠ[1011] = ⵠⵠ[1012];
    ⵠⵠ[1013] = ⵠⵠ[1012];
    ⵠⵠ[1015] = [];
    ⵠⵠ[1015][0] = ᐃᐃ.ΔⵠΔᐃⵠⲆΔ;
    ⵠⵠ[1015][1] = ᐃᐃ.ᐃⵠᐃΔΔⲆⵠ;
    ⵠⵠ[1015][2] = ᐃᐃ.ⲆⲆᐃⲆⵠⵠᐃ;
    ⵠⵠ[1014] = ⵠⵠ[1015];
    ⵠⵠ[1016] = ⵠⵠ[1015];
    ⵠⵠ[1035] = [];
    ⵠⵠ[1035][0] = ᐃᐃ.ⵠⲆᐃⲆᐃ;
    ⵠⵠ[1035][1] = ᐃᐃ.ⵠⲆᐃⲆᐃ;
    ⵠⵠ[1035][2] = ᐃᐃ.ⵠⲆᐃⲆᐃ;
    ⵠⵠ[Cr.ᐃΔᐃⲆΔⵠⵠᐃΔ] = ⵠⵠ[1035];
    ⵠⵠ[1036] = ⵠⵠ[1035];
    ⵠⵠ[1037] = [];
    ⵠⵠ[1037][0] = ᐃᐃ.ᐃΔⵠⵠΔ;
    ⵠⵠ[1037][1] = ᐃᐃ.ᐃΔⵠⵠΔ;
    ⵠⵠ[1037][2] = ᐃᐃ.ᐃΔⵠⵠΔ;
    ⵠⵠ[Cr.ⲆⲆᐃⵠΔⵠⵠᐃⲆ] = ⵠⵠ[1037];
    ⵠⵠ[1038] = ⵠⵠ[1037];
    ⵠⵠ[1039] = [];
    ⵠⵠ[1039][0] = ᐃᐃ.ᐃᐃⲆᐃᐃ;
    ⵠⵠ[1039][1] = ᐃᐃ.ᐃᐃⲆᐃᐃ;
    ⵠⵠ[1039][2] = ᐃᐃ.ᐃᐃⲆᐃᐃ;
    ⵠⵠ[Cr.ᐃᐃΔⲆᐃᐃΔⲆΔ] = ⵠⵠ[1039];
    ⵠⵠ[1040] = ⵠⵠ[1039];
    ⵠⵠ[1156] = [];
    ⵠⵠ[1156][0] = ᐃᐃ.ⵠⵠⵠΔᐃ;
    ⵠⵠ[1156][1] = ᐃᐃ.ⵠⵠⵠΔᐃ;
    ⵠⵠ[1156][2] = ᐃᐃ.ⵠⵠⵠΔᐃ;
    ⵠⵠ[1157] = ⵠⵠ[1156];
    ⵠⵠ[1046] = [];
    ⵠⵠ[1046][0] = ᐃᐃ.ΔⵠᐃᐃⵠΔΔ;
    ⵠⵠ[1046][1] = ᐃᐃ.ⵠᐃⲆⲆᐃⵠⵠ;
    ⵠⵠ[1046][2] = ᐃᐃ.ΔⵠⵠΔΔᐃᐃ;
    ⵠⵠ[1048] = ⵠⵠ[1046];
    ⵠⵠ[1047] = ⵠⵠ[1046];
    ⵠⵠ[744] = [];
    ⵠⵠ[744][0] = ᐃᐃ.ⵠⲆⵠΔΔᐃᐃ;
    ⵠⵠ[744][1] = ᐃᐃ.ⲆΔᐃᐃᐃⲆΔ;
    ⵠⵠ[744][2] = ᐃᐃ.ⵠⵠⲆΔⵠⵠᐃ;
    ⵠⵠ[746] = ⵠⵠ[744];
    ⵠⵠ[745] = ⵠⵠ[744];
    ⵠⵠ[747] = [];
    ⵠⵠ[747][0] = ᐃᐃ.ᐃⵠᐃⲆⲆⵠᐃ;
    ⵠⵠ[747][1] = ᐃᐃ.ⲆᐃᐃⲆᐃⲆΔ;
    ⵠⵠ[747][2] = ᐃᐃ.ΔΔⵠΔⵠΔⵠ;
    ⵠⵠ[749] = ⵠⵠ[747];
    ⵠⵠ[748] = ⵠⵠ[747];
    ⵠⵠ[1049] = [];
    ⵠⵠ[1049][0] = ᐃᐃ.ᐃᐃⲆⲆᐃⲆⲆ;
    ⵠⵠ[1049][1] = ᐃᐃ.ΔΔⵠⲆⵠᐃᐃ;
    ⵠⵠ[1049][2] = ᐃᐃ.ⲆΔⵠΔⲆⵠⵠ;
    ⵠⵠ[1051] = ⵠⵠ[1049];
    ⵠⵠ[1050] = ⵠⵠ[1049];
    ⵠⵠ[1189] = [];
    ⵠⵠ[1189][0] = ᐃᐃ.ⲆⵠⵠΔΔΔⵠ;
    ⵠⵠ[1189][1] = ᐃᐃ.ΔᐃᐃⵠΔⲆⵠ;
    ⵠⵠ[1189][2] = ᐃᐃ.ᐃⲆⵠⲆᐃᐃΔ;
    ⵠⵠ[1191] = ⵠⵠ[1189];
    ⵠⵠ[1190] = ⵠⵠ[1189];
    ⵠⵠ[1110] = [];
    ⵠⵠ[1110][0] = ᐃᐃ.ᐃⵠⵠᐃᐃΔⵠ;
    ⵠⵠ[1110][1] = ᐃᐃ.ΔΔⵠⵠⵠⲆⲆ;
    ⵠⵠ[1110][2] = ᐃᐃ.ᐃⲆΔᐃΔⵠΔ;
    ⵠⵠ[1112] = ⵠⵠ[1110];
    ⵠⵠ[1111] = ⵠⵠ[1110];
    ⵠⵠ[1131] = [];
    ⵠⵠ[1131][0] = ᐃᐃ.ΔΔⲆⲆⲆΔΔΔᐃ;
    ⵠⵠ[1131][1] = ᐃᐃ.ⵠΔΔᐃΔⵠⵠᐃΔ;
    ⵠⵠ[1131][2] = ᐃᐃ.ⲆⲆΔΔᐃΔⲆⵠⵠ;
    ⵠⵠ[1133] = ⵠⵠ[1131];
    ⵠⵠ[1132] = ⵠⵠ[1131];
    ⵠⵠ[1137] = [];
    ⵠⵠ[1137][0] = ᐃᐃ.ᐃΔⲆᐃⲆⲆᐃ;
    ⵠⵠ[1137][1] = ᐃᐃ.ᐃΔΔᐃⲆⲆᐃ;
    ⵠⵠ[1137][2] = ᐃᐃ.ᐃΔΔⲆᐃΔⲆ;
    ⵠⵠ[1138] = ⵠⵠ[1137];
    ⵠⵠ[1139] = ⵠⵠ[1137];
    ⵠⵠ[1140] = [];
    ⵠⵠ[1140][0] = ᐃᐃ.ⲆⵠΔⵠΔⲆⵠ;
    ⵠⵠ[1140][1] = ᐃᐃ.ⵠⲆΔΔⲆⲆᐃ;
    ⵠⵠ[1140][2] = ᐃᐃ.ⲆⵠⲆΔΔⵠⵠ;
    ⵠⵠ[1141] = ⵠⵠ[1140];
    ⵠⵠ[1142] = ⵠⵠ[1140];
    ⵠⵠ[1117] = [];
    ⵠⵠ[1117][0] = ᐃᐃ.ᐃⲆⲆⵠⵠⵠⲆ;
    ⵠⵠ[1117][1] = ᐃᐃ.ΔΔΔᐃⵠᐃΔ;
    ⵠⵠ[1117][2] = ᐃᐃ.ΔΔᐃⵠᐃᐃⲆ;
    ⵠⵠ[1116] = ⵠⵠ[1117];
    ⵠⵠ[1118] = ⵠⵠ[1117];
    ⵠⵠ[1080] = [];
    ⵠⵠ[1080][0] = ᐃᐃ.ⲆⲆᐃⵠᐃᐃΔ;
    ⵠⵠ[1080][1] = ᐃᐃ.ⵠⵠⲆⵠⲆⵠⲆ;
    ⵠⵠ[1080][2] = ᐃᐃ.ΔⵠⲆΔᐃⵠⵠ;
    ⵠⵠ[1082] = ⵠⵠ[1080];
    ⵠⵠ[1081] = ⵠⵠ[1080];
    ⵠⵠ[1224] = [];
    ⵠⵠ[1224][0] = ᐃᐃ.ⵠᐃⵠⵠᐃΔⲆ;
    ⵠⵠ[1224][1] = ᐃᐃ.ⵠᐃΔᐃⲆⲆᐃ;
    ⵠⵠ[1224][2] = ᐃᐃ.Δᐃᐃⵠⵠⵠⵠ;
    ⵠⵠ[1226] = ⵠⵠ[1224];
    ⵠⵠ[1225] = ⵠⵠ[1224];
    ⵠⵠ[1095] = [];
    ⵠⵠ[1095][0] = ᐃᐃ.ⲆⲆⵠⵠⵠΔᐃ;
    ⵠⵠ[1095][1] = ᐃᐃ.ΔⵠΔⵠΔΔⲆ;
    ⵠⵠ[1095][2] = ᐃᐃ.ΔΔΔⲆⵠⲆⲆ;
    ⵠⵠ[1097] = ⵠⵠ[1095];
    ⵠⵠ[1096] = ⵠⵠ[1095];
    ⵠⵠ[717] = Kt(1, [{
      f: Yc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
    }, {
      f: gp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e4c027"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[718] = ⵠⵠ[717];
    ⵠⵠ[408] = Kt(1, [{
      f: Tm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[409] = ⵠⵠ[408];
    ⵠⵠ[907] = Kt(1, [{
      f: Om,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
    }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[909] = ⵠⵠ[907];
    ⵠⵠ[908] = ⵠⵠ[907];
    ⵠⵠ[197] = Kt(1, [{
      f: Sm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[906] = ⵠⵠ[197];
    ⵠⵠ[901] = Kt(1, [{
      f: ym,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[900] = ⵠⵠ[901];
    ⵠⵠ[899] = ⵠⵠ[901];
    ⵠⵠ[401] = Kt(1, [{
      f: Lm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[402] = ⵠⵠ[401];
    ⵠⵠ[395] = Kt(1, [{
      f: Nm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[396] = ⵠⵠ[395];
    ⵠⵠ[398] = Kt(1, [{
      f: Rm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[399] = ⵠⵠ[398];
    ⵠⵠ[404] = Kt(1, [{
      f: qm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[405] = ⵠⵠ[404];
    ⵠⵠ[472] = Kt(1, [{
      f: Pm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[473] = ⵠⵠ[472];
    ⵠⵠ[874] = Kt(1, [{
      f: Gm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
    }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[876] = ⵠⵠ[874];
    ⵠⵠ[875] = ⵠⵠ[874];
    ⵠⵠ[477] = Kt(1, [{
      f: Bc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[478] = ⵠⵠ[477];
    ⵠⵠ[709] = Kt(1, [{
      f: Gc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[711] = ⵠⵠ[709];
    ⵠⵠ[550] = Kt(1, [{
      f: Tp,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[551] = ⵠⵠ[550];
    ⵠⵠ[480] = Kt(1, [{
      f: Bc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[481] = ⵠⵠ[480];
    ⵠⵠ[483] = Kt(1, [{
      f: Bc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[484] = ⵠⵠ[483];
    ⵠⵠ[486] = Kt(1, [{
      f: Bc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[487] = ⵠⵠ[486];
    ⵠⵠ[489] = [];
    ⵠⵠ[489][0] = ᐃᐃ.ⲆⲆⵠⵠⲆⵠⵠ;
    ⵠⵠ[489][1] = ᐃᐃ.ⵠᐃΔΔⲆⲆΔ;
    ⵠⵠ[489][2] = ᐃᐃ.ⵠΔᐃᐃⵠⵠⵠ;
    ⵠⵠ[491] = ⵠⵠ[489];
    ⵠⵠ[490] = ⵠⵠ[489];
    ⵠⵠ[1195] = [];
    ⵠⵠ[1195][0] = ᐃᐃ.ᐃⵠᐃⲆΔᐃⵠ;
    ⵠⵠ[1195][1] = ᐃᐃ.ΔⲆⵠⲆⵠⲆⲆ;
    ⵠⵠ[1195][2] = ᐃᐃ.ⲆᐃΔᐃⲆᐃⲆ;
    ⵠⵠ[1197] = ⵠⵠ[1195];
    ⵠⵠ[1196] = ⵠⵠ[1195];
    ⵠⵠ[1199] = [];
    ⵠⵠ[1199][0] = ᐃᐃ.ᐃᐃⵠⲆᐃⵠⵠ;
    ⵠⵠ[1199][1] = ᐃᐃ.ΔⲆⲆΔᐃⲆⵠ;
    ⵠⵠ[1199][2] = ᐃᐃ.ΔΔⵠΔⲆⵠΔ;
    ⵠⵠ[1201] = ⵠⵠ[1199];
    ⵠⵠ[1200] = ⵠⵠ[1199];
    ⵠⵠ[1203] = [];
    ⵠⵠ[1203][0] = ᐃᐃ.ⲆⵠⲆⲆᐃⵠᐃ;
    ⵠⵠ[1203][1] = ᐃᐃ.ᐃΔΔⵠⵠⵠᐃ;
    ⵠⵠ[1203][2] = ᐃᐃ.ⵠΔᐃΔᐃⵠⵠ;
    ⵠⵠ[1205] = ⵠⵠ[1203];
    ⵠⵠ[1204] = ⵠⵠ[1203];
    ⵠⵠ[1207] = [];
    ⵠⵠ[1207][0] = ᐃᐃ.ᐃΔᐃⵠΔⲆⲆ;
    ⵠⵠ[1207][1] = ᐃᐃ.ⲆⵠᐃΔᐃⲆᐃ;
    ⵠⵠ[1207][2] = ᐃᐃ.ΔⲆᐃᐃⲆⵠⵠ;
    ⵠⵠ[1209] = ⵠⵠ[1207];
    ⵠⵠ[1208] = ⵠⵠ[1207];
    ⵠⵠ[1211] = [];
    ⵠⵠ[1211][0] = ᐃᐃ.ⲆΔⵠⲆⵠΔⵠ;
    ⵠⵠ[1211][1] = ᐃᐃ.ΔΔΔΔᐃᐃᐃ;
    ⵠⵠ[1211][2] = ᐃᐃ.ⵠΔΔᐃΔᐃᐃ;
    ⵠⵠ[1213] = ⵠⵠ[1211];
    ⵠⵠ[1212] = ⵠⵠ[1211];
    ⵠⵠ[1215] = [];
    ⵠⵠ[1215][0] = ᐃᐃ.ⵠⵠⵠΔⲆΔⲆ;
    ⵠⵠ[1215][1] = ᐃᐃ.ⲆΔᐃΔΔᐃⲆ;
    ⵠⵠ[1215][2] = ᐃᐃ.ᐃⲆⵠⵠΔΔΔ;
    ⵠⵠ[1217] = ⵠⵠ[1215];
    ⵠⵠ[1216] = ⵠⵠ[1215];
    ⵠⵠ[518] = Kt(1, [{
      f: ic,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
    }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[519] = ⵠⵠ[518];
    ⵠⵠ[532] = Kt(1, [{
      f: nc,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 5,
      c: ["#141414", "#c4a23a", "#816511"]
    }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[533] = ⵠⵠ[532];
    ⵠⵠ[521] = Kt(1, [{
      f: Wc,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ⵠⵠ[523] = Kt(1, [{
      f: Wc,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#120202", "#991616", "#750a0a", "#120202"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ⵠⵠ[529] = Kt(1, [{
      f: ep,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba"]
    }, {
      f: Oc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
    }, {
      f: jc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0"]
    }, {
      f: hp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[530] = ⵠⵠ[529];
    ⵠⵠ[553] = Kt(1, [{
      f: zc,
      x: 45,
      y: 70,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[555] = ⵠⵠ[553];
    ⵠⵠ[541] = Kt(1, [{
      f: Qc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[542] = ⵠⵠ[541];
    ⵠⵠ[779] = Kt(1, [{
      f: Nc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[780] = ⵠⵠ[779];
    ⵠⵠ[767] = Kt(1, [{
      f: Lc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041"]
    }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[768] = ⵠⵠ[767];
    ⵠⵠ[776] = Kt(1, [{
      f: Pp,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[777] = ⵠⵠ[776];
    ⵠⵠ[771] = Kt(1, [{
      f: Pp,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[772] = ⵠⵠ[771];
    ⵠⵠ[756] = Kt(1, [{
      f: up,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[758] = ⵠⵠ[756];
    ⵠⵠ[760] = Kt(1, [{
      f: up,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[762] = ⵠⵠ[760];
    ⵠⵠ[764] = Kt(1, [{
      f: up,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[770] = ⵠⵠ[764];
    ⵠⵠ[910] = Kt(1, [{
      f: wm,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[912] = ⵠⵠ[910];
    ⵠⵠ[911] = ⵠⵠ[910];
    ⵠⵠ[732] = Kt(1, [{
      f: bc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[734] = ⵠⵠ[732];
    ⵠⵠ[563] = Kt(1, [{
      f: mp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
    }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[564] = ⵠⵠ[563];
    ⵠⵠ[751] = Kt(1, [{
      f: yp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[252] = Kt(1, [{
      f: sp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[753] = Kt(1, [{
      f: yp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[253] = Kt(1, [{
      f: sp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[176] = Kt(1, [{
      f: Uc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[177] = Kt(1, [{
      f: Uc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[175] = Kt(1, [{
      f: Uc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[616] = Kt(1, [{
      f: lp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[618] = ⵠⵠ[616];
    ⵠⵠ[699] = Kt(1, [{
      f: lp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[700] = ⵠⵠ[699];
    ⵠⵠ[702] = Kt(1, [{
      f: lp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[704] = ⵠⵠ[702];
    ⵠⵠ[705] = Kt(1, [{
      f: lp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[706] = ⵠⵠ[705];
    ⵠⵠ[420] = Kt(1, [{
      f: Km,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[421] = ⵠⵠ[420];
    ⵠⵠ[826] = Kt(1, [{
      f: Um,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#252525", "#73583e", "#493425", "#7d6144"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[827] = ⵠⵠ[826];
    ⵠⵠ[429] = Kt(1, [{
      f: ec,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[430] = ⵠⵠ[429];
    ⵠⵠ[432] = Kt(1, [{
      f: Ym,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#dbce71", "#b29c32", "#c4bc51"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[433] = ⵠⵠ[432];
    ⵠⵠ[435] = Kt(1, [{
      f: Zm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[436] = ⵠⵠ[435];
    ⵠⵠ[438] = Kt(1, [{
      f: Mc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[439] = ⵠⵠ[438];
    ⵠⵠ[441] = Kt(1, [{
      f: Ic,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#221e1b", "#ffffff", "#f6f0e7"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[442] = ⵠⵠ[441];
    ⵠⵠ[418] = Kt(1, [{
      f: pc,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#c27add", "#cd98e5"]
    }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[609] = Kt(1, [{
      f: vp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#D7C393", "#a48c6c"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[142] = Kt(1, [{
      f: cp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#93CBCE", "#E9F6F6"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[140] = Kt(1, [{
      f: vp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#866432", "#6b4f25"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[180] = Kt(1, [{
      f: Ap,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[181] = Kt(1, [{
      f: Kc,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[784] = ⵠⵠ[180];
    ⵠⵠ[785] = ⵠⵠ[181];
    ⵠⵠ[789] = Kt(1, [{
      f: fp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
    }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[791] = ⵠⵠ[789];
    ⵠⵠ[613] = Kt(1, [{
      f: np,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[612] = Kt(1, [{
      f: dp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[715] = ⵠⵠ[613];
    ⵠⵠ[611] = ⵠⵠ[612];
    ⵠⵠ[634] = Kt(1, [{
      f: ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[635] = ⵠⵠ[634];
    ⵠⵠ[200] = Kt(1, [{
      f: uu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[866] = Kt(1, [{
      f: tu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[143] = Kt(1, [{
      f: ap,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[690] = ⵠⵠ[143];
    ⵠⵠ[662] = Kt(1, [{
      f: am,
      x: -3,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[664] = Kt(1, [{
      f: nm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1d051e", "#42261A", "#281818"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[666] = ⵠⵠ[664];
    ⵠⵠ[649] = Kt(1, [{
      f: lm,
      x: -3,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[650] = ⵠⵠ[649];
    ⵠⵠ[674] = Kt(1, [{
      f: Hd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
    }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[646] = Kt(1, [{
      f: om,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠⵠ[647] = ⵠⵠ[646];
    ⵠⵠ[685] = Kt(1, [{
      f: zp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[684] = ⵠⵠ[685];
    ⵠⵠ[870] = Kt(1, [{
      f: Ad,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#e2d63b", "#ee71a9", "#42b672"]
    }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[871] = ⵠⵠ[870];
    ⵠⵠ[605] = Kt(1, [{
      f: bp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
    }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[604] = ⵠⵠ[605];
    ⵠⵠ[842] = Kt(1, [{
      f: Md,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[843] = ⵠⵠ[842];
    ⵠⵠ[652] = Kt(1, [{
      f: Hc,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
    ⵠⵠ[654] = ⵠⵠ[652];
    ⵠⵠ[626] = Kt(1, [{
      f: Hc,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
    }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[627] = ⵠⵠ[626];
    ⵠⵠ[629] = Kt(1, [{
      f: $c,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[196] = Kt(1, [{
      f: pu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[898] = ⵠⵠ[196];
    ⵠⵠ[659] = Kt(1, [{
      f: um,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[660] = ⵠⵠ[659];
    ⵠⵠ[145] = Kt(1, [{
      f: jd,
      x: -2,
      y: -8,
      a: 1,
      r: 0,
      c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠⵠ[730] = ⵠⵠ[145];
    ⵠⵠ[566] = [];
    ⵠⵠ[566][0] = ᐃᐃ.ⲆᐃⵠⲆᐃⲆⲆ;
    ⵠⵠ[566][1] = ᐃᐃ.ⵠⲆⲆⲆΔᐃⵠ;
    ⵠⵠ[566][2] = ᐃᐃ.ᐃⵠΔᐃΔⲆᐃ;
    ⵠⵠ[567] = ⵠⵠ[566];
    ⵠⵠ[568] = ⵠⵠ[566];
    ⵠⵠ[877] = [];
    ⵠⵠ[877][0] = ᐃᐃ.ΔⲆᐃⲆⲆᐃΔ;
    ⵠⵠ[877][1] = ᐃᐃ.Ⲇⵠⵠⵠⵠⵠⵠ;
    ⵠⵠ[877][2] = ᐃᐃ.ⵠⵠⵠᐃⵠᐃⲆ;
    ⵠⵠ[879] = ⵠⵠ[877];
    ⵠⵠ[878] = ⵠⵠ[877];
    ⵠⵠ[933] = ⵠⵠ[932];
    ⵠⵠ[934] = ⵠⵠ[932];
    ⵠⵠ[932] = [];
    ⵠⵠ[932][0] = ᐃᐃ.ΔⲆΔΔᐃᐃⲆ;
    ⵠⵠ[932][1] = ᐃᐃ.ⲆΔⵠⲆⵠⲆⲆ;
    ⵠⵠ[932][2] = ᐃᐃ.ΔΔⲆⵠⲆⲆᐃ;
    ⵠⵠ[933] = ⵠⵠ[932];
    ⵠⵠ[934] = ⵠⵠ[932];
    ⵠⵠ[943] = [];
    ⵠⵠ[943][0] = ᐃᐃ.ΔⵠⲆⲆΔⵠⲆ;
    ⵠⵠ[943][1] = ᐃᐃ.ΔᐃΔᐃⵠΔΔ;
    ⵠⵠ[943][2] = ᐃᐃ.ⵠΔΔⵠⵠⵠⲆ;
    ⵠⵠ[944] = ⵠⵠ[943];
    ⵠⵠ[945] = ⵠⵠ[943];
    ⵠⵠ[921] = [];
    ⵠⵠ[921][0] = ᐃᐃ.ⵠᐃΔΔⲆⵠⲆ;
    ⵠⵠ[921][1] = ᐃᐃ.ⲆΔΔⲆᐃⲆΔ;
    ⵠⵠ[921][2] = ᐃᐃ.ᐃⵠᐃᐃⲆⲆᐃ;
    ⵠⵠ[922] = ⵠⵠ[921];
    ⵠⵠ[923] = ⵠⵠ[921];
    ⵠⵠ[925] = [];
    ⵠⵠ[925][0] = ᐃᐃ.ΔΔΔΔᐃⵠΔ;
    ⵠⵠ[925][1] = ᐃᐃ.ⲆΔⵠᐃΔⲆⲆ;
    ⵠⵠ[925][2] = ᐃᐃ.ⲆᐃᐃΔᐃᐃΔ;
    ⵠⵠ[926] = ⵠⵠ[925];
    ⵠⵠ[927] = ⵠⵠ[925];
    ⵠⵠ[929] = [];
    ⵠⵠ[929][0] = ᐃᐃ.ⵠⵠⲆⵠΔⵠⲆ;
    ⵠⵠ[929][1] = ᐃᐃ.ⲆΔᐃΔⵠⲆᐃ;
    ⵠⵠ[929][2] = ᐃᐃ.ΔΔΔⵠΔΔΔ;
    ⵠⵠ[930] = ⵠⵠ[929];
    ⵠⵠ[931] = ⵠⵠ[929];
    ⵠⵠ[946] = [];
    ⵠⵠ[946][0] = ᐃᐃ.ⲆⵠⵠᐃΔΔⲆ;
    ⵠⵠ[946][1] = ᐃᐃ.ⵠᐃⵠᐃΔⵠⵠ;
    ⵠⵠ[946][2] = ᐃᐃ.ⲆᐃⵠΔⲆⵠⲆ;
    ⵠⵠ[947] = ⵠⵠ[946];
    ⵠⵠ[948] = ⵠⵠ[946];
    ⵠⵠ[735] = [];
    ⵠⵠ[735][0] = ᐃᐃ.ⲆⵠⲆᐃⲆⲆⵠ;
    ⵠⵠ[735][1] = ᐃᐃ.ᐃⵠΔⲆⲆⵠΔ;
    ⵠⵠ[735][2] = ᐃᐃ.ⵠⲆᐃⵠᐃⵠΔ;
    ⵠⵠ[737] = ⵠⵠ[735];
    ⵠⵠ[736] = ⵠⵠ[735];
    ⵠⵠ[1164] = [];
    ⵠⵠ[1164][0] = ᐃᐃ.ᐃⲆᐃⵠⲆΔᐃ;
    ⵠⵠ[1164][1] = ᐃᐃ.ΔᐃΔΔΔΔⵠ;
    ⵠⵠ[1164][2] = ᐃᐃ.ᐃⵠΔⲆⲆⲆⲆ;
    ⵠⵠ[Cr.ⵠⵠΔⵠᐃⲆⵠΔⵠ] = ⵠⵠ[1164];
    ⵠⵠ[1165] = ⵠⵠ[1164];
    ⵠⵠ[738] = [];
    ⵠⵠ[738][0] = ᐃᐃ.ⲆⵠΔⵠⲆⲆᐃ;
    ⵠⵠ[738][1] = ᐃᐃ.ᐃⵠⵠᐃⲆᐃΔ;
    ⵠⵠ[738][2] = ᐃᐃ.ΔΔⵠΔᐃⲆⵠ;
    ⵠⵠ[740] = ⵠⵠ[738];
    ⵠⵠ[739] = ⵠⵠ[738];
    ⵠⵠ[741] = [];
    ⵠⵠ[741][0] = ᐃᐃ.ᐃᐃⲆΔᐃᐃΔ;
    ⵠⵠ[741][1] = ᐃᐃ.ⲆⵠⵠⵠⵠΔᐃ;
    ⵠⵠ[741][2] = ᐃᐃ.ⲆⲆΔΔᐃⵠⲆ;
    ⵠⵠ[743] = ⵠⵠ[741];
    ⵠⵠ[742] = ⵠⵠ[741];
    ⵠⵠ[938] = [];
    ⵠⵠ[938][0] = ᐃᐃ.ᐃⵠⲆᐃⵠΔⵠ;
    ⵠⵠ[938][1] = ᐃᐃ.ⵠᐃΔⵠⵠΔΔ;
    ⵠⵠ[938][2] = ᐃᐃ.ᐃⲆᐃᐃⵠⲆⵠ;
    ⵠⵠ[939] = ⵠⵠ[938];
    ⵠⵠ[936] = [];
    ⵠⵠ[936][0] = ᐃᐃ.ⵠᐃⵠⵠᐃΔΔ;
    ⵠⵠ[936][1] = ᐃᐃ.ΔᐃⵠΔᐃⵠⵠ;
    ⵠⵠ[936][2] = ᐃᐃ.ⲆⲆΔⲆⵠⵠΔ;
    ⵠⵠ[937] = ⵠⵠ[936];
    ⵠⵠ[617] = ⵠⵠ[616];
    ⵠⵠ[701] = ⵠⵠ[699];
    ⵠⵠ[703] = ⵠⵠ[702];
    ⵠⵠ[707] = ⵠⵠ[705];
    ⵠⵠ[348] = ⵠⵠ[311];
    ⵠⵠ[633] = ⵠⵠ[631];
    ⵠⵠ[645] = ⵠⵠ[644];
    ⵠⵠ[640] = ⵠⵠ[639];
    ⵠⵠ[273] = ⵠⵠ[309];
    ⵠⵠ[590] = ⵠⵠ[252];
    ⵠⵠ[752] = ⵠⵠ[751];
    ⵠⵠ[591] = ⵠⵠ[253];
    ⵠⵠ[754] = ⵠⵠ[753];
    ⵠⵠ[276] = ⵠⵠ[328];
    ⵠⵠ[863] = ⵠⵠ[865];
    ⵠⵠ[862] = ⵠⵠ[860];
    ⵠⵠ[831] = ⵠⵠ[829];
    ⵠⵠ[340] = ⵠⵠ[261];
    ⵠⵠ[596] = ⵠⵠ[594];
    ⵠⵠ[345] = ⵠⵠ[292];
    ⵠⵠ[346] = ⵠⵠ[293];
    ⵠⵠ[457] = ⵠⵠ[455];
    ⵠⵠ[274] = ⵠⵠ[313];
    ⵠⵠ[341] = ⵠⵠ[312];
    ⵠⵠ[272] = ⵠⵠ[258];
    ⵠⵠ[344] = ⵠⵠ[296];
    ⵠⵠ[459] = ⵠⵠ[458];
    ⵠⵠ[342] = ⵠⵠ[315];
    ⵠⵠ[270] = ⵠⵠ[297];
    ⵠⵠ[271] = ⵠⵠ[298];
    ⵠⵠ[343] = ⵠⵠ[316];
    ⵠⵠ[269] = ⵠⵠ[277];
    ⵠⵠ[358] = ⵠⵠ[310];
    ⵠⵠ[354] = ⵠⵠ[329];
    ⵠⵠ[356] = ⵠⵠ[331];
    ⵠⵠ[355] = ⵠⵠ[330];
    ⵠⵠ[494] = ⵠⵠ[492];
    ⵠⵠ[349] = ⵠⵠ[317];
    ⵠⵠ[350] = ⵠⵠ[319];
    ⵠⵠ[275] = ⵠⵠ[300];
    ⵠⵠ[351] = ⵠⵠ[323];
    ⵠⵠ[353] = ⵠⵠ[305];
    ⵠⵠ[514] = ⵠⵠ[513];
    ⵠⵠ[352] = ⵠⵠ[303];
    ⵠⵠ[520] = ⵠⵠ[518];
    ⵠⵠ[534] = ⵠⵠ[532];
    ⵠⵠ[531] = ⵠⵠ[529];
    ⵠⵠ[522] = ⵠⵠ[521];
    ⵠⵠ[524] = ⵠⵠ[523];
    ⵠⵠ[565] = ⵠⵠ[563];
    ⵠⵠ[554] = ⵠⵠ[553];
    ⵠⵠ[357] = ⵠⵠ[335];
    ⵠⵠ[359] = ⵠⵠ[337];
    ⵠⵠ[339] = Oa(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      bd(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      gd(e, c[0], c[1], 4);
      e.save();
      bd(e, a * 30, a * 115, a * 60, a * 5, a * 15);
      e.restore();
      gd(e, c[2], c[3], 4);
      e.save();
      bd(e, a * 50, a * 117, a * 20, a * 10, a * 15);
      e.restore();
      gd(e, c[2]);
      return d;
    }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ⵠⵠ[366] = Kt(0.5, [{
      f: _m,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#ffffff"]
    }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
    ⵠⵠ[382] = ⵠⵠ[361];
    ⵠⵠ[383] = ⵠⵠ[362];
    ⵠⵠ[384] = ⵠⵠ[364];
    ⵠⵠ[497] = ⵠⵠ[495];
    ⵠⵠ[385] = ⵠⵠ[392];
    ⵠⵠ[774] = ⵠⵠ[178];
    ⵠⵠ[775] = ⵠⵠ[179];
    ⵠⵠ[386] = ⵠⵠ[368];
    ⵠⵠ[625] = ⵠⵠ[624];
    ⵠⵠ[394] = ⵠⵠ[393];
    ⵠⵠ[1163] = ⵠⵠ[1162];
    ⵠⵠ[506] = ⵠⵠ[505];
    ⵠⵠ[387] = ⵠⵠ[369];
    ⵠⵠ[504] = ⵠⵠ[502];
    ⵠⵠ[388] = ⵠⵠ[372];
    ⵠⵠ[389] = ⵠⵠ[375];
    ⵠⵠ[390] = ⵠⵠ[378];
    ⵠⵠ[501] = ⵠⵠ[499];
    ⵠⵠ[391] = ⵠⵠ[381];
    ⵠⵠ[403] = ⵠⵠ[401];
    ⵠⵠ[397] = ⵠⵠ[395];
    ⵠⵠ[400] = ⵠⵠ[398];
    ⵠⵠ[406] = ⵠⵠ[404];
    ⵠⵠ[474] = ⵠⵠ[472];
    ⵠⵠ[875] = ⵠⵠ[874];
    ⵠⵠ[552] = ⵠⵠ[550];
    ⵠⵠ[710] = ⵠⵠ[709];
    ⵠⵠ[479] = ⵠⵠ[477];
    ⵠⵠ[482] = ⵠⵠ[480];
    ⵠⵠ[485] = ⵠⵠ[483];
    ⵠⵠ[488] = ⵠⵠ[486];
    ⵠⵠ[410] = ⵠⵠ[408];
    ⵠⵠ[719] = ⵠⵠ[717];
    ⵠⵠ[422] = ⵠⵠ[420];
    ⵠⵠ[431] = ⵠⵠ[429];
    ⵠⵠ[434] = ⵠⵠ[432];
    ⵠⵠ[437] = ⵠⵠ[435];
    ⵠⵠ[543] = ⵠⵠ[541];
    ⵠⵠ[733] = ⵠⵠ[732];
    ⵠⵠ[440] = ⵠⵠ[438];
    ⵠⵠ[443] = ⵠⵠ[441];
    ⵠⵠ[446] = ⵠⵠ[418];
    ⵠⵠ[606] = ⵠⵠ[605];
    ⵠⵠ[844] = ⵠⵠ[842];
    ⵠⵠ[683] = ⵠⵠ[685];
    ⵠⵠ[610] = ⵠⵠ[609];
    ⵠⵠ[689] = ⵠⵠ[143];
    ⵠⵠ[686] = ⵠⵠ[142];
    ⵠⵠ[682] = ⵠⵠ[140];
    ⵠⵠ[615] = ⵠⵠ[613];
    ⵠⵠ[614] = ⵠⵠ[612];
    ⵠⵠ[628] = ⵠⵠ[626];
    ⵠⵠ[630] = ⵠⵠ[629];
    ⵠⵠ[636] = ⵠⵠ[634];
    ⵠⵠ[868] = ⵠⵠ[200];
    ⵠⵠ[867] = ⵠⵠ[866];
    ⵠⵠ[648] = ⵠⵠ[646];
    ⵠⵠ[651] = ⵠⵠ[649];
    ⵠⵠ[653] = ⵠⵠ[652];
    ⵠⵠ[661] = ⵠⵠ[659];
    ⵠⵠ[898] = ⵠⵠ[196];
    ⵠⵠ[663] = ⵠⵠ[662];
    ⵠⵠ[665] = ⵠⵠ[664];
    ⵠⵠ[675] = ⵠⵠ[674];
    ⵠⵠ[731] = ⵠⵠ[145];
    ⵠⵠ[757] = ⵠⵠ[756];
    ⵠⵠ[759] = ⵠⵠ[176];
    ⵠⵠ[761] = ⵠⵠ[760];
    ⵠⵠ[763] = ⵠⵠ[177];
    ⵠⵠ[765] = ⵠⵠ[764];
    ⵠⵠ[766] = ⵠⵠ[175];
    ⵠⵠ[769] = ⵠⵠ[767];
    ⵠⵠ[773] = ⵠⵠ[771];
    ⵠⵠ[778] = ⵠⵠ[776];
    ⵠⵠ[781] = ⵠⵠ[779];
    ⵠⵠ[787] = ⵠⵠ[181];
    ⵠⵠ[786] = ⵠⵠ[180];
    ⵠⵠ[790] = ⵠⵠ[789];
    ⵠⵠ[801] = ⵠⵠ[800];
    ⵠⵠ[810] = ⵠⵠ[808];
    ⵠⵠ[836] = ⵠⵠ[834];
    ⵠⵠ[847] = ⵠⵠ[845];
    ⵠⵠ[828] = ⵠⵠ[826];
  }
  function Ep(a, b) {
    const c = (0 << (a & 255)) + (8 << (a >> 24 & 255)) + (16 << (a >> 16 & 255)) + (24 << (a >> 8 & 255));
    const d = b ^ 63701;
    const e = tr(c, d);
    ht(c, d, 0, 0, c);
    return e ^ 18032;
  }
  const Dp = {};
  Dp.get = function (a, b) {
    if (b !== "ΔⲆᐃⲆⵠΔᐃⲆⲆ") {
      const a = rg.setInterval;
      const b = a;
      const c = function () {
        a(c, 7007);
        b(c, 1879);
      };
      c();
    }
    return rg.Reflect.get(...arguments);
  };
  function Ip() {
    var b = kx.time;
    if (ⵠⵠ[285]) {
      Xn.drawImage(ⵠⵠ[285][b][1], ao + 480, no + 190);
      Xn.drawImage(ⵠⵠ[285][b][2], ao + 180, no - 430);
      Xn.drawImage(ⵠⵠ[285][b][1], ao - 855, no + 100);
      Xn.drawImage(ⵠⵠ[285][b][0], ao - 550, no - 300);
      Xn.drawImage(ⵠⵠ[285][b][0], ao - 1020, no - 520);
    }
    if (ⵠⵠ[108]) {
      Xn.drawImage(ⵠⵠ[108][b][1], ao - 80, no - 640);
      Xn.drawImage(ⵠⵠ[108][b][1], ao + 80, no + 490);
      Xn.drawImage(ⵠⵠ[108][b][2], ao - 180, no - 700);
      Xn.drawImage(ⵠⵠ[108][b][0], ao + 550, no + 100);
      Xn.drawImage(ⵠⵠ[108][b][1], ao + 450, no + 300);
      Xn.drawImage(ⵠⵠ[108][b][1], ao + 780, no + 300);
      Xn.drawImage(ⵠⵠ[108][b][2], ao + 980, no + 200);
      Xn.drawImage(ⵠⵠ[108][b][2], ao + 680, no + 600);
      Xn.drawImage(ⵠⵠ[108][b][2], ao - 380, no + 100);
      Xn.drawImage(ⵠⵠ[108][b][2], ao + 280, no + 250);
    }
    if (ⵠⵠ[110]) {
      Xn.drawImage(ⵠⵠ[110][b][0], ao - 590, no);
      Xn.drawImage(ⵠⵠ[110][b][0], ao + 120, no - 390);
      Xn.drawImage(ⵠⵠ[110][b][0], ao - 270, no + 340);
    }
    if (ⵠⵠ[109]) {
      Xn.drawImage(ⵠⵠ[109][b][4], ao - 700, no - 600);
      Xn.drawImage(ⵠⵠ[109][b][2], ao - 970, no - 250);
      Xn.drawImage(ⵠⵠ[109][b][5], ao - 720, no - 200);
      Xn.drawImage(ⵠⵠ[109][b][2], ao - 1020, no + 340);
      Xn.drawImage(ⵠⵠ[109][b][0], ao - 1120, no - 0);
      Xn.drawImage(ⵠⵠ[109][b][1], ao - 650, no - 330);
      Xn.drawImage(ⵠⵠ[109][b][4], ao - 495, no - 90);
      Xn.drawImage(ⵠⵠ[109][b][3], ao - 520, no + 340);
      Xn.drawImage(ⵠⵠ[109][b][2], ao + 830, no - 520);
    }
    ⵠⵠ[413];
    if (nx && mx) {
      var c = nx.ᐃΔΔ.x;
      var d = nx.ᐃΔΔ.y;
      nx.ᐃΔΔ.x = ao;
      nx.ᐃΔΔ.y = no;
      var e = mx.time;
      mx.time = kx.time;
      var f;
      var g = kx.items;
      g[2].x = 400;
      g[2].y = 100;
      g[2].ΔⵠᐃⲆ(114);
      (f = g[1]).x = -500;
      f.y = 100;
      f.ⵠⵠᐃⲆ[0].x = f.x - 20.5;
      f.ⵠⵠᐃⲆ[0].y = f.y - 22.5;
      f.ⵠⵠᐃⲆ[1].x = f.x - 35.5;
      f.ⵠⵠᐃⲆ[1].y = f.y + 7.5;
      f.ⵠⵠᐃⲆ[2].x = f.x + 7.5;
      f.ⵠⵠᐃⲆ[2].y = f.y - 30;
      f.ⵠⵠᐃⲆ[3].x = f.x + 22.5;
      f.ⵠⵠᐃⲆ[3].y = f.y;
      f.ⵠⵠᐃⲆ[4].x = f.x - 7.5;
      f.ⵠⵠᐃⲆ[4].y = f.y + 14.5;
      for (var a = 0; f.info > a; a++) {
        f.ⵠⵠᐃⲆ[a].ΔⵠᐃⲆ(294);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.ⵠⵠᐃⲆ[0].x = f.x - 20.5;
      f.ⵠⵠᐃⲆ[0].y = f.y - 22.5;
      f.ⵠⵠᐃⲆ[1].x = f.x - 35.5;
      f.ⵠⵠᐃⲆ[1].y = f.y + 7.5;
      f.ⵠⵠᐃⲆ[2].x = f.x + 7.5;
      f.ⵠⵠᐃⲆ[2].y = f.y - 30;
      f.ⵠⵠᐃⲆ[3].x = f.x + 22.5;
      f.ⵠⵠᐃⲆ[3].y = f.y;
      f.ⵠⵠᐃⲆ[4].x = f.x - 7.5;
      f.ⵠⵠᐃⲆ[4].y = f.y + 14.5;
      for (a = 0; a < f.info; a++) {
        f.ⵠⵠᐃⲆ[a].ΔⵠᐃⲆ(294);
      }
      g[0].x = 450;
      g[0].y = -100;
      g[0].ⲆⲆⲆΔⵠ(113);
      g[0].ΔⲆΔⵠⵠ();
      nx.ᐃΔΔ.x = c;
      nx.ᐃΔΔ.y = d;
      mx.time = e;
    }
  }
  function Sp() {
    new Date().getTime();
    function b(a) {
      var b = 0;
      var c = 0;
      for (var d = 0; a.length > d; d++) {
        var e = a.charAt(d);
        if (e !== "_" && d !== 5) {
          if (e === "1") {
            b += Math.pow(2, c);
          }
          c++;
        }
      }
      return b;
    }
    ⵠⲆᐃΔⲆΔⲆⲆᐃ();
    ⵠⵠ[1026] = [ᐃᐃ.ᐃᐃΔⵠᐃᐃΔ, ᐃᐃ.ᐃⲆⵠΔᐃΔᐃ];
    ⵠⵠ[1025] = [];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_010_000")] = [ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_010_010")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_010_000")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_011_000")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_010_000")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_011_010")] = [ᐃᐃ.ⵠⲆᐃⵠΔ, ᐃᐃ.ᐃΔⵠⵠⲆ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ᐃⲆᐃΔᐃⲆᐃ, ᐃᐃ.ⵠⲆⵠΔΔΔᐃ, ᐃᐃ.ⲆⲆⵠⲆΔⲆⲆ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_011_011")] = [ᐃᐃ.ⲆᐃΔΔⲆⲆᐃ, ᐃᐃ.ⵠⲆᐃⵠΔ, ᐃᐃ.ᐃΔⵠⵠⲆ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ᐃⲆᐃΔᐃⲆᐃ, ᐃᐃ.ⵠⲆⵠΔΔΔᐃ, ᐃᐃ.ⲆⲆⵠⲆΔⲆⲆ, ᐃᐃ.ᐃⲆⵠⲆᐃ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_110_000")] = [ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.Ⲇⵠᐃᐃᐃ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_110_010")] = [ᐃᐃ.ᐃⵠⵠⲆⲆ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ᐃⲆⵠⲆᐃ, ᐃᐃ.ⲆΔⲆⵠΔ, ᐃᐃ.ᐃⲆΔΔᐃⲆᐃ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_110_110")] = [ᐃᐃ.ᐃⵠⵠⲆⲆ, ᐃᐃ.ⵠⵠᐃΔⲆⵠⵠ, ᐃᐃ.ⵠΔΔⵠⵠⲆΔ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃⲆⵠⲆᐃ, ᐃᐃ.ⲆΔⲆⵠΔ, ᐃᐃ.ᐃⲆΔΔᐃⲆᐃ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_111_000")] = [ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.ⲆⲆΔΔⵠᐃⲆ, ᐃᐃ.ΔΔΔⲆⵠΔᐃ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_111_111")] = [ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ⵠΔΔⵠⵠⲆΔ, ᐃᐃ.ᐃⵠⵠⲆⲆ, ᐃᐃ.ᐃΔⵠⵠⲆ, ᐃᐃ.ⵠⲆᐃⵠΔ, ᐃᐃ.ⲆᐃΔΔⲆⲆᐃ, ᐃᐃ.ⵠΔᐃⵠⵠᐃᐃ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_010_000")] = [ᐃᐃ.Ⲇⵠᐃᐃᐃ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_010_010")] = [ᐃᐃ.ᐃⵠᐃⵠⲆⲆⲆ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_011_000")] = [ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ⲆΔⲆⵠΔ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_000")] = [ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ⲆΔⲆⵠΔ, ᐃᐃ.ᐃⵠΔⲆⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")] = [ᐃᐃ.ΔᐃᐃΔⲆ, ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.ⵠⲆᐃⵠΔ, ᐃᐃ.ᐃΔⵠⵠⲆ, ᐃᐃ.ᐃⵠⵠⲆⲆ, ᐃᐃ.ⵠΔΔⵠⵠⲆΔ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ⵠΔᐃⵠⵠᐃᐃ, ᐃᐃ.ⵠⵠⲆⲆⲆⵠᐃ, ᐃᐃ.ᐃⵠᐃⵠⲆⲆⲆ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.ⲆⲆΔΔⵠᐃⲆ, ᐃᐃ.ΔΔΔⲆⵠΔᐃ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ᐃⲆᐃΔᐃⲆᐃ, ᐃᐃ.ⵠⲆⵠΔΔΔᐃ, ᐃᐃ.ⲆⲆⵠⲆΔⲆⲆ, ᐃᐃ.ᐃⲆⵠⲆᐃ, ᐃᐃ.ⲆΔⲆⵠΔ, ᐃᐃ.ᐃⵠΔⲆⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_011_010")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_011_011")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_111_011")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_010")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_111_000")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_111_010")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_111_011")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_111_110")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_111_111")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_111_110")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("000_111_010")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("011_011_000")] = [ᐃᐃ.ᐃⵠⵠⲆΔᐃⵠ, ᐃᐃ.ΔᐃᐃΔⲆ, ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ⲆΔⲆⵠΔ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("011_011_010")] = [ᐃᐃ.ᐃⵠⵠⲆΔᐃⵠ, ᐃᐃ.ΔᐃᐃΔⲆ, ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.ⲆⲆΔΔⵠᐃⲆ, ᐃᐃ.ΔΔΔⲆⵠΔᐃ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ⲆΔⲆⵠΔ, ᐃᐃ.ᐃⵠΔⲆⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("011_011_011")] = [ᐃᐃ.ᐃΔⵠⵠⲆ, ᐃᐃ.ⵠⲆᐃⵠΔ, ᐃᐃ.ⲆᐃΔΔⲆⲆᐃ, ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.ΔᐃᐃΔⲆ, ᐃᐃ.ᐃⵠⵠⲆΔᐃⵠ, ᐃᐃ.ⵠⵠⲆⲆⲆⵠᐃ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("011_111_000")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("011_011_010")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("011_111_010")] = [ᐃᐃ.ᐃⵠⵠⲆΔᐃⵠ, ᐃᐃ.ΔᐃᐃΔⲆ, ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.ⵠⲆᐃⵠΔ, ᐃᐃ.ᐃΔⵠⵠⲆ, ᐃᐃ.ᐃⵠⵠⲆⲆ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ⵠΔᐃⵠⵠᐃᐃ, ᐃᐃ.ⵠⵠⲆⲆⲆⵠᐃ, ᐃᐃ.ᐃⵠᐃⵠⲆⲆⲆ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.ⲆⲆΔΔⵠᐃⲆ, ᐃᐃ.ΔΔΔⲆⵠΔᐃ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ᐃⲆᐃΔᐃⲆᐃ, ᐃᐃ.ⵠⲆⵠΔΔΔᐃ, ᐃᐃ.ⲆⲆⵠⲆΔⲆⲆ, ᐃᐃ.ᐃⲆⵠⲆᐃ, ᐃᐃ.ⲆΔⲆⵠΔ, ᐃᐃ.ᐃⵠΔⲆⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("011_111_011")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("011_111_010")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("011_111_110")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("011_111_010")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("011_111_111")] = [ᐃᐃ.ᐃⵠⵠⲆΔᐃⵠ, ᐃᐃ.ΔᐃᐃΔⲆ, ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.ⲆᐃΔΔⲆⲆᐃ, ᐃᐃ.ⵠⲆᐃⵠΔ, ᐃᐃ.ᐃΔⵠⵠⲆ, ᐃᐃ.ᐃⵠⵠⲆⲆ, ᐃᐃ.ⵠΔΔⵠⵠⲆΔ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ⵠΔᐃⵠⵠᐃᐃ, ᐃᐃ.ⵠⵠⲆⲆⲆⵠᐃ, ᐃᐃ.ᐃⵠᐃⵠⲆⲆⲆ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.ⲆⲆΔΔⵠᐃⲆ, ᐃᐃ.ΔΔΔⲆⵠΔᐃ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ᐃⲆᐃΔᐃⲆᐃ, ᐃᐃ.ⵠⲆⵠΔΔΔᐃ, ᐃᐃ.ⲆⲆⵠⲆΔⲆⲆ, ᐃᐃ.ᐃⲆⵠⲆᐃ, ᐃᐃ.ⲆΔⲆⵠΔ, ᐃᐃ.ᐃⵠΔⲆⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("110_110_000")] = [ᐃᐃ.ᐃⲆⵠΔⲆⵠⵠ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ⵠᐃΔⲆⵠΔⵠ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃⵠΔⲆⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("110_110_010")] = [ᐃᐃ.ᐃⵠⵠⲆⲆ, ᐃᐃ.ᐃⲆⵠΔⲆⵠⵠ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ᐃⵠᐃⵠⲆⲆⲆ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃⲆⵠⲆᐃ, ᐃᐃ.ᐃⵠΔⲆⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("110_110_110")] = [ᐃᐃ.ᐃⵠⵠⲆⲆ, ᐃᐃ.ⵠΔΔⵠⵠⲆΔ, ᐃᐃ.ᐃⲆⵠΔⲆⵠⵠ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ᐃⵠᐃⵠⲆⲆⲆ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃⲆⵠⲆᐃ, ᐃᐃ.ᐃⵠΔⲆⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("110_111_000")] = [ᐃᐃ.ΔᐃᐃΔⲆ, ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.ᐃⲆⵠΔⲆⵠⵠ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ⵠᐃΔⲆⵠΔⵠ, ᐃᐃ.ᐃⵠⲆᐃΔΔⲆ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.ⲆⲆΔΔⵠᐃⲆ, ᐃᐃ.ΔΔΔⲆⵠΔᐃ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ⲆΔⲆⵠΔ, ᐃᐃ.ᐃⵠΔⲆⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("110_111_110")] = [ᐃᐃ.ΔᐃᐃΔⲆ, ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.ⵠⲆᐃⵠΔ, ᐃᐃ.ᐃΔⵠⵠⲆ, ᐃᐃ.ᐃⵠⵠⲆⲆ, ᐃᐃ.ⵠΔΔⵠⵠⲆΔ, ᐃᐃ.ᐃⲆⵠΔⲆⵠⵠ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ⵠΔᐃⵠⵠᐃᐃ, ᐃᐃ.ᐃⵠⲆᐃΔΔⲆ, ᐃᐃ.ⵠⵠⲆⲆⲆⵠᐃ, ᐃᐃ.ᐃⵠᐃⵠⲆⲆⲆ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.ⲆⲆΔΔⵠᐃⲆ, ᐃᐃ.ΔΔΔⲆⵠΔᐃ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ᐃⲆᐃΔᐃⲆᐃ, ᐃᐃ.ⵠⲆⵠΔΔΔᐃ, ᐃᐃ.ⲆⲆⵠⲆΔⲆⲆ, ᐃᐃ.ᐃⲆⵠⲆᐃ, ᐃᐃ.ⲆΔⲆⵠΔ, ᐃᐃ.ᐃⵠΔⲆⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("110_111_111")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("110_111_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("110_111_011")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("110_111_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("110_111_010")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("110_111_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("111_111_110")] = [ᐃᐃ.ᐃⵠΔⲆⵠ, ᐃᐃ.ⲆΔⲆⵠΔ, ᐃᐃ.ᐃⲆⵠⲆᐃ, ᐃᐃ.ⲆⲆⵠⲆΔⲆⲆ, ᐃᐃ.ⵠⲆⵠΔΔΔᐃ, ᐃᐃ.ᐃⲆᐃΔᐃⲆᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ΔΔΔⲆⵠΔᐃ, ᐃᐃ.ⲆⲆΔΔⵠᐃⲆ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.ᐃⵠᐃⵠⲆⲆⲆ, ᐃᐃ.ⵠⵠⲆⲆⲆⵠᐃ, ᐃᐃ.ᐃⵠⲆᐃΔΔⲆ, ᐃᐃ.ⵠΔᐃⵠⵠᐃᐃ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ᐃⲆⵠΔⲆⵠⵠ, ᐃᐃ.ᐃⵠⵠⲆⲆ, ᐃᐃ.ᐃΔⵠⵠⲆ, ᐃᐃ.ⵠⲆᐃⵠΔ, ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.ΔᐃᐃΔⲆ, ᐃᐃ.ᐃⵠⵠⲆΔᐃⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("111_111_011")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("111_111_110")];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("111_111_000")] = [ᐃᐃ.ⵠᐃΔⲆⵠΔⵠ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ᐃⲆⵠΔⲆⵠⵠ, ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.ΔᐃᐃΔⲆ, ᐃᐃ.ᐃⵠⵠⲆΔᐃⵠ, ᐃᐃ.ᐃⵠⲆᐃΔΔⲆ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("111_111_111")] = [ᐃᐃ.ᐃⵠⵠⲆΔᐃⵠ, ᐃᐃ.ΔᐃᐃΔⲆ, ᐃᐃ.ΔΔᐃΔⲆ, ᐃᐃ.ⲆᐃΔΔⲆⲆᐃ, ᐃᐃ.ⵠⲆᐃⵠΔ, ᐃᐃ.ᐃΔⵠⵠⲆ, ᐃᐃ.ᐃⵠⵠⲆⲆ, ᐃᐃ.ⵠΔΔⵠⵠⲆΔ, ᐃᐃ.ᐃⲆⵠΔⲆⵠⵠ, ᐃᐃ.ⲆⲆᐃⲆⵠ, ᐃᐃ.ⵠΔᐃⵠⵠᐃᐃ, ᐃᐃ.ⵠⵠⲆⲆⲆⵠᐃ, ᐃᐃ.ᐃⵠᐃⵠⲆⲆⲆ, ᐃᐃ.ΔⲆⵠⵠΔ, ᐃᐃ.ⲆⲆΔΔⵠᐃⲆ, ᐃᐃ.ΔΔΔⲆⵠΔᐃ, ᐃᐃ.Ⲇⵠᐃᐃᐃ, ᐃᐃ.ᐃΔⵠⲆΔ, ᐃᐃ.ᐃⲆᐃΔᐃⲆᐃ, ᐃᐃ.ⵠⲆⵠΔΔΔᐃ, ᐃᐃ.ⲆⲆⵠⲆΔⲆⲆ, ᐃᐃ.ᐃⲆⵠⲆᐃ, ᐃᐃ.ⲆΔⲆⵠΔ, ᐃᐃ.ᐃⵠΔⲆⵠ];
    ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("111_111_010")] = ⵠⵠ[1025][Cr.ᐃᐃⵠ][b("111_111_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_010_000")] = [ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_010_010")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_010_000")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_011_000")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_010_000")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_011_010")] = [ᐃᐃ.ⲆΔΔⵠᐃ, ᐃᐃ.ᐃⲆᐃᐃⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⵠⲆΔⵠΔΔⵠ, ᐃᐃ.ᐃⲆⵠΔⲆΔᐃ, ᐃᐃ.ΔⲆᐃᐃⲆΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_011_011")] = [ᐃᐃ.ᐃᐃΔΔᐃΔᐃ, ᐃᐃ.ⲆΔΔⵠᐃ, ᐃᐃ.ᐃⲆᐃᐃⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⵠⲆΔⵠΔΔⵠ, ᐃᐃ.ᐃⲆⵠΔⲆΔᐃ, ᐃᐃ.ΔⲆᐃᐃⲆΔΔ, ᐃᐃ.ⵠⲆᐃΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_110_000")] = [ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ᐃⲆᐃⲆⲆ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_110_010")] = [ᐃᐃ.ᐃΔᐃⵠΔ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⵠⲆᐃΔΔ, ᐃᐃ.ⲆΔⵠⲆΔ, ᐃᐃ.ΔⵠᐃΔΔⵠⲆ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_110_110")] = [ᐃᐃ.ᐃΔᐃⵠΔ, ᐃᐃ.ⵠΔᐃⲆᐃⵠΔ, ᐃᐃ.ⲆᐃⲆΔΔⲆᐃ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⵠⲆᐃΔΔ, ᐃᐃ.ⲆΔⵠⲆΔ, ᐃᐃ.ΔⵠᐃΔΔⵠⲆ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_111_000")] = [ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ⲆⵠⵠⲆⲆⲆⲆ, ᐃᐃ.ΔᐃⵠⲆⵠΔⵠ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_111_111")] = [ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ⲆᐃⲆΔΔⲆᐃ, ᐃᐃ.ᐃΔᐃⵠΔ, ᐃᐃ.ᐃⲆᐃᐃⵠ, ᐃᐃ.ⲆΔΔⵠᐃ, ᐃᐃ.ᐃᐃΔΔᐃΔᐃ, ᐃᐃ.Ⲇⵠᐃᐃᐃᐃⵠ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_010_000")] = [ᐃᐃ.ᐃⲆᐃⲆⲆ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_010_010")] = [ᐃᐃ.ⵠⵠᐃⲆⲆᐃⲆ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_011_000")] = [ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⲆΔⵠⲆΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_000")] = [ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆΔⵠⲆΔ, ᐃᐃ.ⲆⲆⵠΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")] = [ᐃᐃ.ⵠⵠⵠᐃⵠ, ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ⲆΔΔⵠᐃ, ᐃᐃ.ᐃⲆᐃᐃⵠ, ᐃᐃ.ᐃΔᐃⵠΔ, ᐃᐃ.ⲆᐃⲆΔΔⲆᐃ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃᐃⵠ, ᐃᐃ.ᐃⵠⲆⲆⵠⲆΔ, ᐃᐃ.ⵠⵠᐃⲆⲆᐃⲆ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ⲆⵠⵠⲆⲆⲆⲆ, ᐃᐃ.ΔᐃⵠⲆⵠΔⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⵠⲆΔⵠΔΔⵠ, ᐃᐃ.ᐃⲆⵠΔⲆΔᐃ, ᐃᐃ.ΔⲆᐃᐃⲆΔΔ, ᐃᐃ.ⵠⲆᐃΔΔ, ᐃᐃ.ⲆΔⵠⲆΔ, ᐃᐃ.ⲆⲆⵠΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_011_010")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_011_011")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_111_011")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_010")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_111_000")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_111_010")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_111_011")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_111_110")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_111_111")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_111_110")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("000_111_010")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("010_110_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("011_011_000")] = [ᐃᐃ.ⲆΔΔⲆⵠⲆΔ, ᐃᐃ.ⵠⵠⵠᐃⵠ, ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⲆΔⵠⲆΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("011_011_010")] = [ᐃᐃ.ⲆΔΔⲆⵠⲆΔ, ᐃᐃ.ⵠⵠⵠᐃⵠ, ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ⲆⵠⵠⲆⲆⲆⲆ, ᐃᐃ.ΔᐃⵠⲆⵠΔⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⲆΔⵠⲆΔ, ᐃᐃ.ⲆⲆⵠΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("011_011_011")] = [ᐃᐃ.ᐃⲆᐃᐃⵠ, ᐃᐃ.ⲆΔΔⵠᐃ, ᐃᐃ.ᐃᐃΔΔᐃΔᐃ, ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ⵠⵠⵠᐃⵠ, ᐃᐃ.ⲆΔΔⲆⵠⲆΔ, ᐃᐃ.ᐃⵠⲆⲆⵠⲆΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("011_111_000")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("011_011_010")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("011_111_010")] = [ᐃᐃ.ⲆΔΔⲆⵠⲆΔ, ᐃᐃ.ⵠⵠⵠᐃⵠ, ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ⲆΔΔⵠᐃ, ᐃᐃ.ᐃⲆᐃᐃⵠ, ᐃᐃ.ᐃΔᐃⵠΔ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃᐃⵠ, ᐃᐃ.ᐃⵠⲆⲆⵠⲆΔ, ᐃᐃ.ⵠⵠᐃⲆⲆᐃⲆ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ⲆⵠⵠⲆⲆⲆⲆ, ᐃᐃ.ΔᐃⵠⲆⵠΔⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⵠⲆΔⵠΔΔⵠ, ᐃᐃ.ᐃⲆⵠΔⲆΔᐃ, ᐃᐃ.ΔⲆᐃᐃⲆΔΔ, ᐃᐃ.ⵠⲆᐃΔΔ, ᐃᐃ.ⲆΔⵠⲆΔ, ᐃᐃ.ⲆⲆⵠΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("011_111_011")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("011_111_010")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("011_111_110")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("011_111_010")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("011_111_111")] = [ᐃᐃ.ⲆΔΔⲆⵠⲆΔ, ᐃᐃ.ⵠⵠⵠᐃⵠ, ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ᐃᐃΔΔᐃΔᐃ, ᐃᐃ.ⲆΔΔⵠᐃ, ᐃᐃ.ᐃⲆᐃᐃⵠ, ᐃᐃ.ᐃΔᐃⵠΔ, ᐃᐃ.ⲆᐃⲆΔΔⲆᐃ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃᐃⵠ, ᐃᐃ.ᐃⵠⲆⲆⵠⲆΔ, ᐃᐃ.ⵠⵠᐃⲆⲆᐃⲆ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ⲆⵠⵠⲆⲆⲆⲆ, ᐃᐃ.ΔᐃⵠⲆⵠΔⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⵠⲆΔⵠΔΔⵠ, ᐃᐃ.ᐃⲆⵠΔⲆΔᐃ, ᐃᐃ.ΔⲆᐃᐃⲆΔΔ, ᐃᐃ.ⵠⲆᐃΔΔ, ᐃᐃ.ⲆΔⵠⲆΔ, ᐃᐃ.ⲆⲆⵠΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("110_110_000")] = [ᐃᐃ.ⵠᐃⵠΔⲆⵠⲆ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ⵠⵠᐃⵠⲆΔᐃ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆⲆⵠΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("110_110_010")] = [ᐃᐃ.ᐃΔᐃⵠΔ, ᐃᐃ.ⵠᐃⵠΔⲆⵠⲆ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ⵠⵠᐃⲆⲆᐃⲆ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⵠⲆᐃΔΔ, ᐃᐃ.ⲆⲆⵠΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("110_110_110")] = [ᐃᐃ.ᐃΔᐃⵠΔ, ᐃᐃ.ⲆᐃⲆΔΔⲆᐃ, ᐃᐃ.ⵠᐃⵠΔⲆⵠⲆ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ⵠⵠᐃⲆⲆᐃⲆ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⵠⲆᐃΔΔ, ᐃᐃ.ⲆⲆⵠΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("110_111_000")] = [ᐃᐃ.ⵠⵠⵠᐃⵠ, ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ⵠᐃⵠΔⲆⵠⲆ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ⵠⵠᐃⵠⲆΔᐃ, ᐃᐃ.ⲆΔⲆᐃⲆᐃⵠ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ⲆⵠⵠⲆⲆⲆⲆ, ᐃᐃ.ΔᐃⵠⲆⵠΔⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⲆΔⵠⲆΔ, ᐃᐃ.ⲆⲆⵠΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("110_111_110")] = [ᐃᐃ.ⵠⵠⵠᐃⵠ, ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ⲆΔΔⵠᐃ, ᐃᐃ.ᐃⲆᐃᐃⵠ, ᐃᐃ.ᐃΔᐃⵠΔ, ᐃᐃ.ⲆᐃⲆΔΔⲆᐃ, ᐃᐃ.ⵠᐃⵠΔⲆⵠⲆ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃᐃⵠ, ᐃᐃ.ⲆΔⲆᐃⲆᐃⵠ, ᐃᐃ.ᐃⵠⲆⲆⵠⲆΔ, ᐃᐃ.ⵠⵠᐃⲆⲆᐃⲆ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ⲆⵠⵠⲆⲆⲆⲆ, ᐃᐃ.ΔᐃⵠⲆⵠΔⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⵠⲆΔⵠΔΔⵠ, ᐃᐃ.ᐃⲆⵠΔⲆΔᐃ, ᐃᐃ.ΔⲆᐃᐃⲆΔΔ, ᐃᐃ.ⵠⲆᐃΔΔ, ᐃᐃ.ⲆΔⵠⲆΔ, ᐃᐃ.ⲆⲆⵠΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("110_111_111")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("110_111_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("110_111_011")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("110_111_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("110_111_010")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("110_111_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("111_111_110")] = [ᐃᐃ.ⲆⲆⵠΔΔ, ᐃᐃ.ⲆΔⵠⲆΔ, ᐃᐃ.ⵠⲆᐃΔΔ, ᐃᐃ.ΔⲆᐃᐃⲆΔΔ, ᐃᐃ.ᐃⲆⵠΔⲆΔᐃ, ᐃᐃ.ⵠⲆΔⵠΔΔⵠ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ΔᐃⵠⲆⵠΔⵠ, ᐃᐃ.ⲆⵠⵠⲆⲆⲆⲆ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ⵠⵠᐃⲆⲆᐃⲆ, ᐃᐃ.ᐃⵠⲆⲆⵠⲆΔ, ᐃᐃ.ⲆΔⲆᐃⲆᐃⵠ, ᐃᐃ.Ⲇⵠᐃᐃᐃᐃⵠ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ⵠᐃⵠΔⲆⵠⲆ, ᐃᐃ.ᐃΔᐃⵠΔ, ᐃᐃ.ᐃⲆᐃᐃⵠ, ᐃᐃ.ⲆΔΔⵠᐃ, ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ⵠⵠⵠᐃⵠ, ᐃᐃ.ⲆΔΔⲆⵠⲆΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("111_111_011")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("111_111_110")];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("111_111_000")] = [ᐃᐃ.ⵠⵠᐃⵠⲆΔᐃ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.ⵠᐃⵠΔⲆⵠⲆ, ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ⵠⵠⵠᐃⵠ, ᐃᐃ.ⲆΔΔⲆⵠⲆΔ, ᐃᐃ.ⲆΔⲆᐃⲆᐃⵠ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("111_111_111")] = [ᐃᐃ.ⲆΔΔⲆⵠⲆΔ, ᐃᐃ.ⵠⵠⵠᐃⵠ, ᐃᐃ.ⵠⲆⲆⵠΔ, ᐃᐃ.ᐃᐃΔΔᐃΔᐃ, ᐃᐃ.ⲆΔΔⵠᐃ, ᐃᐃ.ᐃⲆᐃᐃⵠ, ᐃᐃ.ᐃΔᐃⵠΔ, ᐃᐃ.ⲆᐃⲆΔΔⲆᐃ, ᐃᐃ.ⵠᐃⵠΔⲆⵠⲆ, ᐃᐃ.ᐃΔⲆᐃΔ, ᐃᐃ.Ⲇⵠᐃᐃᐃᐃⵠ, ᐃᐃ.ᐃⵠⲆⲆⵠⲆΔ, ᐃᐃ.ⵠⵠᐃⲆⲆᐃⲆ, ᐃᐃ.ΔⵠΔⲆⵠ, ᐃᐃ.ⲆⵠⵠⲆⲆⲆⲆ, ᐃᐃ.ΔᐃⵠⲆⵠΔⵠ, ᐃᐃ.ᐃⲆᐃⲆⲆ, ᐃᐃ.ⲆᐃⲆᐃⵠ, ᐃᐃ.ⵠⲆΔⵠΔΔⵠ, ᐃᐃ.ᐃⲆⵠΔⲆΔᐃ, ᐃᐃ.ΔⲆᐃᐃⲆΔΔ, ᐃᐃ.ⵠⲆᐃΔΔ, ᐃᐃ.ⲆΔⵠⲆΔ, ᐃᐃ.ⲆⲆⵠΔΔ];
    ⵠⵠ[1025][Cr.ⵠΔⵠ][b("111_111_010")] = ⵠⵠ[1025][Cr.ⵠΔⵠ][b("111_111_110")];
    ⵠⵠ[1024] = [];
    ⵠⵠ[1024][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_010_000")] = ᐃᐃ.ᐃⵠΔⲆΔⵠⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_010_010")] = ᐃᐃ.ⵠᐃᐃⲆⲆⵠᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_011_000")] = ᐃᐃ.ⲆⵠᐃⲆᐃᐃⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_011_010")] = ᐃᐃ.ⵠᐃⵠⵠᐃᐃⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_011_011")] = ᐃᐃ.ⲆⲆΔⲆΔⲆΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_110_000")] = ᐃᐃ.ΔⲆⲆⲆⲆⵠⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_110_010")] = ᐃᐃ.ⵠⲆⵠⲆⵠΔⵠ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_110_110")] = ᐃᐃ.ⵠᐃⲆΔᐃⲆⵠ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_111_000")] = ᐃᐃ.ᐃᐃΔⲆⵠΔΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_111_010")] = ᐃᐃ.ⲆⵠⵠΔⵠᐃᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_111_011")] = ᐃᐃ.ᐃⲆⵠⵠᐃⲆⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_111_110")] = ᐃᐃ.ᐃΔΔⵠⲆᐃΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("000_111_111")] = ᐃᐃ.ⵠⲆⲆΔᐃⵠᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_010_000")] = ᐃᐃ.ᐃⲆⵠⲆΔⲆΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_010_010")] = ᐃᐃ.ⵠᐃⵠⲆᐃⵠᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_011_000")] = ᐃᐃ.ⵠⲆⲆᐃΔΔΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_011_010")] = ᐃᐃ.ΔⵠᐃΔⵠⲆⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_011_011")] = ᐃᐃ.ᐃⵠΔⲆᐃⲆΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_110_000")] = ᐃᐃ.ΔⲆΔⵠΔΔⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_110_010")] = ᐃᐃ.ᐃΔⵠΔⲆᐃⵠ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_110_110")] = ᐃᐃ.ⵠⵠⵠⵠⲆᐃⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_111_000")] = ᐃᐃ.ᐃⵠΔᐃⵠΔΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_111_010")] = ᐃᐃ.ⲆⲆⵠΔⵠᐃⵠ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_111_011")] = ᐃᐃ.ΔΔⵠⲆΔⵠⵠ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_111_110")] = ᐃᐃ.ᐃⵠⵠᐃᐃⲆᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("010_111_111")] = ᐃᐃ.ᐃⲆᐃⲆᐃΔᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("011_011_000")] = ᐃᐃ.ⲆᐃᐃⲆⲆⲆⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("011_011_010")] = ᐃᐃ.ⲆᐃⲆⵠⲆⵠᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("011_011_011")] = ᐃᐃ.ⲆΔΔⵠⵠΔᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("011_111_000")] = ᐃᐃ.ⲆᐃⲆΔⵠΔᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("011_111_010")] = ᐃᐃ.ⵠⲆⲆᐃΔⲆΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("011_111_011")] = ᐃᐃ.ⲆⲆΔⲆΔΔⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("011_111_110")] = ᐃᐃ.ⲆΔᐃΔⲆⲆᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("011_111_111")] = ᐃᐃ.ΔⵠⵠᐃᐃⲆⵠ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("110_110_000")] = ᐃᐃ.ⲆⲆᐃΔⵠΔᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("110_110_010")] = ᐃᐃ.ⲆⲆΔⲆⲆⵠⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("110_110_110")] = ᐃᐃ.ⲆᐃΔⲆⵠⵠᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("110_111_000")] = ᐃᐃ.ⲆΔᐃⲆᐃΔΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("110_111_010")] = ᐃᐃ.ⵠᐃⵠΔⵠⲆΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("110_111_011")] = ᐃᐃ.ᐃΔⲆⵠⵠⲆᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("110_111_110")] = ᐃᐃ.ⲆᐃⲆⵠΔⵠᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("110_111_111")] = ᐃᐃ.ᐃⵠⲆⵠΔⲆⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("111_111_011")] = ᐃᐃ.ᐃⵠΔᐃᐃᐃΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("111_111_110")] = ᐃᐃ.ᐃⵠⵠΔⵠⲆⵠ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("111_111_011")] = ᐃᐃ.ᐃⵠΔᐃᐃᐃΔ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("111_111_000")] = ᐃᐃ.ⲆⵠΔΔΔⵠⲆ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("111_111_111")] = ᐃᐃ.ᐃᐃᐃⵠⲆᐃᐃ;
    ⵠⵠ[1024][Cr.ᐃᐃⵠ][b("111_111_010")] = ᐃᐃ.ⵠΔⵠᐃᐃⲆⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_010_000")] = ᐃᐃ.ᐃⵠᐃᐃᐃⵠΔ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_010_010")] = ᐃᐃ.ΔΔΔⵠᐃⵠⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_011_000")] = ᐃᐃ.ΔⲆⲆΔⲆΔⲆ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_011_010")] = ᐃᐃ.ⵠⲆⲆᐃᐃⵠᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_011_011")] = ᐃᐃ.ⵠⵠᐃᐃⵠⲆᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_110_000")] = ᐃᐃ.ᐃⲆⵠᐃⲆΔΔ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_110_010")] = ᐃᐃ.ⵠⵠᐃᐃΔⵠⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_110_110")] = ᐃᐃ.ΔⵠⲆⲆⲆᐃΔ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_111_000")] = ᐃᐃ.ΔᐃⵠⲆΔΔⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_111_010")] = ᐃᐃ.ΔⲆΔⲆᐃⵠΔ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_111_011")] = ᐃᐃ.ΔⲆⵠⵠⵠⲆᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_111_110")] = ᐃᐃ.ⵠⲆⲆΔᐃΔᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("000_111_111")] = ᐃᐃ.ⲆⵠΔⵠΔΔΔ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_010_000")] = ᐃᐃ.ᐃᐃⵠⲆⵠⲆⲆ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_010_010")] = ᐃᐃ.ΔⵠΔΔⵠⵠⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_011_000")] = ᐃᐃ.ΔΔⲆⵠⲆᐃⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_011_010")] = ᐃᐃ.ᐃΔⵠΔⵠΔⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_011_011")] = ᐃᐃ.ΔΔΔⵠⵠΔᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_110_000")] = ᐃᐃ.ⲆⵠΔⵠⵠᐃΔ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_110_010")] = ᐃᐃ.ᐃΔⵠⲆΔΔᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_110_110")] = ᐃᐃ.ᐃᐃⵠⵠⵠⲆᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_111_000")] = ᐃᐃ.Δⵠⵠⵠᐃⵠᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_111_010")] = ᐃᐃ.ⲆᐃⵠⲆΔⲆⲆ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_111_011")] = ᐃᐃ.ᐃᐃⵠⲆⲆⲆⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_111_110")] = ᐃᐃ.ⵠⵠⵠⵠⵠⲆᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("010_111_111")] = ᐃᐃ.ΔΔⲆⲆⲆⲆᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("011_011_000")] = ᐃᐃ.ⲆⵠΔⲆᐃΔᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("011_011_010")] = ᐃᐃ.ⵠⲆⲆᐃΔΔⲆ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("011_011_011")] = ᐃᐃ.ⲆⵠᐃⲆᐃΔⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("011_111_000")] = ᐃᐃ.ⵠΔⲆⵠΔⵠΔ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("011_111_010")] = ᐃᐃ.ⵠⲆⵠΔᐃⵠⲆ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("011_111_011")] = ᐃᐃ.ΔⵠⵠⲆΔΔⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("011_111_110")] = ᐃᐃ.ⵠⵠΔⵠᐃⵠⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("011_111_111")] = ᐃᐃ.ⵠΔⲆⲆᐃⵠⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("110_110_000")] = ᐃᐃ.ⲆⵠⲆⵠⲆΔⲆ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("110_110_010")] = ᐃᐃ.ᐃᐃΔᐃⵠΔᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("110_110_110")] = ᐃᐃ.ⵠⲆⲆᐃΔᐃⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("110_111_000")] = ᐃᐃ.ΔⵠΔΔΔΔⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("110_111_010")] = ᐃᐃ.ΔⲆΔⲆᐃᐃⲆ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("110_111_011")] = ᐃᐃ.ΔⲆⵠⵠⵠᐃⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("110_111_110")] = ᐃᐃ.ⵠᐃᐃⵠᐃΔΔ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("110_111_111")] = ᐃᐃ.ᐃΔᐃᐃⵠᐃᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("111_111_011")] = ᐃᐃ.ᐃΔΔⵠⵠΔⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("111_111_110")] = ᐃᐃ.ΔⵠΔⲆⵠⲆⲆ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("111_111_011")] = ᐃᐃ.ᐃΔΔⵠⵠΔⵠ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("111_111_000")] = ᐃᐃ.ⵠⲆⲆᐃⲆΔⲆ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("111_111_111")] = ᐃᐃ.ⲆⲆⵠⵠΔᐃᐃ;
    ⵠⵠ[1024][Cr.ⵠΔⵠ][b("111_111_010")] = ᐃᐃ.ⲆⵠΔᐃⲆⲆΔ;
    ⵠⵠ[32] = [];
    ⵠⵠ[32][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃⵠⲆΔᐃᐃ;
    ⵠⵠ[32][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃΔΔΔΔᐃⲆ;
    ⵠⵠ[205] = [];
    ⵠⵠ[205][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆΔⵠⵠⲆⲆ;
    ⵠⵠ[205][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⵠᐃΔΔⲆⵠ;
    ⵠⵠ[957] = [];
    ⵠⵠ[957][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔᐃᐃⵠⵠᐃ;
    ⵠⵠ[957][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠΔᐃⵠⲆᐃΔ;
    ⵠⵠ[207] = [];
    ⵠⵠ[207][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆⵠΔⲆΔⵠ;
    ⵠⵠ[207][Cr.ⵠΔⵠ] = ᐃᐃ.ΔΔⵠⵠᐃᐃΔ;
    ⵠⵠ[954] = [];
    ⵠⵠ[954][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆⲆΔΔΔᐃ;
    ⵠⵠ[954][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠᐃⲆⲆⵠΔΔ;
    ⵠⵠ[958] = [];
    ⵠⵠ[958][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔᐃⲆᐃᐃᐃⲆ;
    ⵠⵠ[958][Cr.ⵠΔⵠ] = ᐃᐃ.Ⲇⵠᐃⵠᐃᐃᐃ;
    ⵠⵠ[209] = [];
    ⵠⵠ[209][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠΔⲆⵠΔⵠᐃ;
    ⵠⵠ[209][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆⲆΔᐃᐃⵠ;
    ⵠⵠ[971] = [];
    ⵠⵠ[971][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠⵠΔⲆⲆᐃ;
    ⵠⵠ[971][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠΔΔⵠⵠᐃᐃ;
    ⵠⵠ[211] = [];
    ⵠⵠ[211][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆⲆᐃᐃⵠⲆ;
    ⵠⵠ[211][Cr.ⵠΔⵠ] = ᐃᐃ.ΔᐃⵠᐃᐃΔⵠ;
    ⵠⵠ[986] = [];
    ⵠⵠ[986][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠΔⲆᐃᐃΔ;
    ⵠⵠ[986][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⵠⵠⲆΔΔΔ;
    ⵠⵠ[989] = [];
    ⵠⵠ[989][Cr.ᐃᐃⵠ] = [ᐃᐃ.ΔᐃᐃⵠⵠⲆΔ];
    ⵠⵠ[989][Cr.ⵠΔⵠ] = [ᐃᐃ.ᐃⲆⵠΔΔⵠΔ];
    ⵠⵠ[217] = [];
    ⵠⵠ[217][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔᐃΔᐃᐃⵠ;
    ⵠⵠ[217][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃᐃⲆΔΔΔⵠ;
    ⵠⵠ[219] = [];
    ⵠⵠ[219][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠⲆΔⲆᐃᐃ;
    ⵠⵠ[219][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠᐃᐃᐃⲆⵠⵠ;
    ⵠⵠ[218] = [];
    ⵠⵠ[218][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⲆᐃΔⲆⲆ;
    ⵠⵠ[218][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃΔⵠᐃⵠᐃⵠ;
    ⵠⵠ[212] = [];
    ⵠⵠ[212][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆᐃΔⵠᐃⲆ;
    ⵠⵠ[212][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⲆΔᐃΔⲆᐃ;
    ⵠⵠ[213] = [];
    ⵠⵠ[213][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠⵠⲆᐃΔⲆ;
    ⵠⵠ[213][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆⲆⲆⵠΔⲆ;
    ⵠⵠ[214] = [];
    ⵠⵠ[214][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠΔᐃⵠΔⲆ;
    ⵠⵠ[214][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⲆᐃΔⵠⲆⵠ;
    ⵠⵠ[215] = [];
    ⵠⵠ[215][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⲆΔⵠⲆΔΔ;
    ⵠⵠ[215][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⵠⲆᐃᐃⵠᐃ;
    ⵠⵠ[216] = [];
    ⵠⵠ[216][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃΔⵠᐃᐃΔ;
    ⵠⵠ[216][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠⵠⵠⵠΔⵠ;
    ⵠⵠ[220] = [];
    ⵠⵠ[220][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔⵠΔΔⲆᐃ;
    ⵠⵠ[220][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠᐃᐃⲆⵠⲆ;
    ⵠⵠ[1020] = [];
    ⵠⵠ[1020][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠᐃⵠⵠⲆⵠ;
    ⵠⵠ[1020][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠᐃⵠⵠΔᐃⲆ;
    ⵠⵠ[1021] = [];
    ⵠⵠ[1021][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔΔΔⵠᐃⵠᐃ;
    ⵠⵠ[1021][Cr.ⵠΔⵠ] = ᐃᐃ.ΔΔΔᐃᐃᐃⲆ;
    ⵠⵠ[39] = [];
    ⵠⵠ[39][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠΔΔᐃⵠⲆ;
    ⵠⵠ[39][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃΔⵠⵠᐃᐃⵠ;
    ⵠⵠ[1022] = ᐃᐃ.ΔᐃⲆⲆⲆΔΔ;
    ⵠⵠ[1023] = ᐃᐃ.ⲆⲆᐃⲆⲆΔᐃ;
    ⵠⵠ[1041] = [];
    ⵠⵠ[1041][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[1041][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[1041][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔⲆⲆⵠⵠⵠΔ);
    ⵠⵠ[1041][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⲆᐃⲆⵠᐃΔⵠ);
    ⵠⵠ[1041][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⲆⲆⵠⲆΔᐃΔ);
    ⵠⵠ[1041][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠⲆᐃᐃⵠΔⲆ);
    ⵠⵠ[1041][Cr.ⵠΔⵠ].push(ᐃᐃ.ΔⲆΔⲆΔⵠⲆ);
    ⵠⵠ[1041][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃⲆⵠᐃᐃᐃⲆ);
    ⵠⵠ[244] = [];
    ⵠⵠ[244][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[244][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[244][Cr.ᐃᐃⵠ].push(ᐃᐃ.ᐃⵠᐃᐃⲆⵠⲆ);
    ⵠⵠ[244][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠⲆⲆΔΔΔΔ);
    ⵠⵠ[244][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⲆᐃΔⵠⲆⲆᐃ);
    ⵠⵠ[244][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠⲆⲆⲆᐃΔᐃ);
    ⵠⵠ[244][Cr.ⵠΔⵠ].push(ᐃᐃ.ⲆⵠⵠⲆᐃⵠΔ);
    ⵠⵠ[244][Cr.ⵠΔⵠ].push(ᐃᐃ.Ⲇⵠⵠᐃᐃᐃⵠ);
    ⵠⵠ[1052] = [];
    ⵠⵠ[1052][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[1052][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[1052][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔΔᐃᐃΔΔΔ);
    ⵠⵠ[1052][Cr.ᐃᐃⵠ].push(ᐃᐃ.ᐃⵠΔᐃΔⵠⵠ);
    ⵠⵠ[1052][Cr.ᐃᐃⵠ].push(ᐃᐃ.ᐃΔΔᐃᐃᐃΔ);
    ⵠⵠ[1052][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔⵠⵠᐃΔᐃⲆ);
    ⵠⵠ[1052][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔᐃΔΔⵠⵠΔ);
    ⵠⵠ[1052][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃᐃᐃΔᐃᐃΔ);
    ⵠⵠ[1052][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠⵠⲆⲆⵠᐃⲆ);
    ⵠⵠ[1052][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃⲆⵠⲆⵠᐃΔ);
    ⵠⵠ[1052][Cr.ⵠΔⵠ].push(ᐃᐃ.ΔⵠⲆⲆΔⵠΔ);
    ⵠⵠ[1052][Cr.ⵠΔⵠ].push(ᐃᐃ.ⲆⲆⵠΔⲆᐃⵠ);
    ⵠⵠ[450] = [];
    ⵠⵠ[450][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⲆⲆⵠⲆⲆ;
    ⵠⵠ[450][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠΔⵠΔⲆⵠⲆ;
    ⵠⵠ[453] = [];
    ⵠⵠ[453][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠᐃᐃΔᐃᐃ;
    ⵠⵠ[453][Cr.ⵠΔⵠ] = ᐃᐃ.ΔᐃⲆΔⵠⵠⲆ;
    ⵠⵠ[454] = [];
    ⵠⵠ[454][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠⵠΔⲆΔⵠ;
    ⵠⵠ[454][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⵠᐃⵠⵠΔⲆ;
    ⵠⵠ[464] = ᐃᐃ.ⲆᐃΔᐃᐃⵠᐃ;
    ⵠⵠ[468] = ᐃᐃ.ⲆⲆⲆᐃΔΔⲆ;
    ⵠⵠ[469] = ᐃᐃ.ΔΔΔⲆΔᐃⲆ;
    ⵠⵠ[20] = [];
    ⵠⵠ[20][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠᐃΔΔⲆⲆ;
    ⵠⵠ[20][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃΔᐃⲆΔⵠⵠ;
    ⵠⵠ[920] = [];
    ⵠⵠ[920][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠΔΔᐃᐃⵠ;
    ⵠⵠ[920][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⵠⵠⵠⲆᐃⵠ;
    ⵠⵠ[21] = [];
    ⵠⵠ[21][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔΔᐃⵠⵠΔ;
    ⵠⵠ[21][Cr.ⵠΔⵠ] = ᐃᐃ.ΔᐃΔⲆᐃᐃⵠ;
    ⵠⵠ[924] = [];
    ⵠⵠ[924][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠΔΔᐃᐃⵠ;
    ⵠⵠ[924][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⵠⵠⵠⲆᐃⵠ;
    ⵠⵠ[44] = [];
    ⵠⵠ[44][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔΔΔᐃⲆΔ;
    ⵠⵠ[44][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠᐃⵠᐃⲆΔ;
    ⵠⵠ[19] = [];
    ⵠⵠ[19][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔⲆΔⵠⵠⲆ;
    ⵠⵠ[19][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃΔΔⵠⲆⲆⵠ;
    ⵠⵠ[34] = [];
    ⵠⵠ[34][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠΔΔⵠΔⵠⵠ;
    ⵠⵠ[34][Cr.ⵠΔⵠ] = ᐃᐃ.Δⵠᐃⵠⵠⵠᐃ;
    ⵠⵠ[17] = [];
    ⵠⵠ[17][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃⲆΔⲆⵠⵠ;
    ⵠⵠ[17][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠⲆⲆΔΔΔ;
    ⵠⵠ[63] = [];
    ⵠⵠ[63][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔΔⵠᐃᐃⲆᐃ;
    ⵠⵠ[63][Cr.ⵠΔⵠ] = ᐃᐃ.ΔᐃⵠᐃΔⲆⲆ;
    ⵠⵠ[60] = [];
    ⵠⵠ[60][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔⲆΔᐃᐃⲆ;
    ⵠⵠ[60][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⲆΔⵠⵠᐃⲆ;
    ⵠⵠ[94] = [];
    ⵠⵠ[94][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆᐃⵠⵠᐃⵠⵠⵠ;
    ⵠⵠ[94][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆᐃΔⵠⵠᐃᐃᐃⲆ;
    ⵠⵠ[95] = [];
    ⵠⵠ[95][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔⵠᐃⲆⵠᐃⵠΔ;
    ⵠⵠ[95][Cr.ⵠΔⵠ] = ᐃᐃ.ΔᐃⲆⲆΔⵠΔⲆⵠ;
    ⵠⵠ[96] = [];
    ⵠⵠ[96][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠᐃⲆⲆⲆΔᐃΔ;
    ⵠⵠ[96][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆᐃᐃΔⲆⵠⵠⲆⲆ;
    ⵠⵠ[97] = [];
    ⵠⵠ[97][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃᐃⲆΔᐃⵠⲆᐃ;
    ⵠⵠ[97][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆⵠⵠᐃⲆᐃⵠΔ;
    ⵠⵠ[98] = [];
    ⵠⵠ[98][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔᐃΔⲆΔΔⵠⲆ;
    ⵠⵠ[98][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⲆᐃΔⲆᐃⲆᐃᐃ;
    ⵠⵠ[99] = [];
    ⵠⵠ[99][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆⲆᐃⲆᐃⵠΔΔ;
    ⵠⵠ[99][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃᐃⵠᐃΔⲆⵠⵠΔ;
    ⵠⵠ[90] = [];
    ⵠⵠ[90][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠᐃᐃⲆᐃⲆ;
    ⵠⵠ[90][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠᐃᐃᐃᐃⵠ;
    ⵠⵠ[91] = [];
    ⵠⵠ[91][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆΔⲆΔⲆⲆ;
    ⵠⵠ[91][Cr.ⵠΔⵠ] = ᐃᐃ.ΔΔⵠⲆᐃⵠⵠ;
    ⵠⵠ[71] = [];
    ⵠⵠ[71][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔΔⵠΔΔᐃⲆⵠ;
    ⵠⵠ[71][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠΔΔᐃⲆΔⵠᐃ;
    ⵠⵠ[72] = [];
    ⵠⵠ[72][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆⲆΔⵠᐃΔΔᐃ;
    ⵠⵠ[72][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⲆⲆᐃΔⵠⲆΔΔ;
    ⵠⵠ[73] = [];
    ⵠⵠ[73][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠᐃΔΔᐃⵠΔᐃ;
    ⵠⵠ[73][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆᐃΔᐃⲆⲆⲆᐃΔ;
    ⵠⵠ[74] = [];
    ⵠⵠ[74][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⲆᐃⵠⲆᐃΔⲆᐃ;
    ⵠⵠ[74][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆᐃⵠᐃⵠᐃΔᐃⲆ;
    ⵠⵠ[75] = [];
    ⵠⵠ[75][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆⵠΔⵠⲆⲆⲆΔ;
    ⵠⵠ[75][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃΔΔⵠⵠⲆΔⲆⲆ;
    ⵠⵠ[76] = [];
    ⵠⵠ[76][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃᐃⲆᐃΔⵠⲆΔ;
    ⵠⵠ[76][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆΔⲆΔΔⲆᐃⲆ;
    ⵠⵠ[101] = [];
    ⵠⵠ[101][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔᐃⵠΔⲆⵠⵠ;
    ⵠⵠ[101][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⲆⲆⲆΔⵠΔ;
    ⵠⵠ[64] = [];
    ⵠⵠ[64][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⵠⵠⵠⲆΔⲆⲆ;
    ⵠⵠ[64][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆⵠⲆΔⵠᐃⲆⲆ;
    ⵠⵠ[102] = [];
    ⵠⵠ[102][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠⲆⵠⵠⲆⲆ;
    ⵠⵠ[102][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠⲆⲆᐃΔⲆ;
    ⵠⵠ[65] = [];
    ⵠⵠ[65][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆⵠⵠΔᐃⲆⵠᐃ;
    ⵠⵠ[65][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠΔⵠⲆΔΔⲆⲆᐃ;
    ⵠⵠ[103] = [];
    ⵠⵠ[103][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠⲆΔⵠⵠᐃ;
    ⵠⵠ[103][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆΔΔΔⲆΔΔ;
    ⵠⵠ[66] = [];
    ⵠⵠ[66][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔᐃⲆⵠⲆΔⵠⵠ;
    ⵠⵠ[66][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⲆΔⵠΔⲆⲆᐃⲆ;
    ⵠⵠ[104] = [];
    ⵠⵠ[104][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔΔΔΔⵠⲆΔ;
    ⵠⵠ[104][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⲆⲆⵠᐃᐃⵠ;
    ⵠⵠ[67] = [];
    ⵠⵠ[67][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⲆⲆΔⵠᐃΔⵠᐃ;
    ⵠⵠ[67][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⵠⲆⵠᐃⲆⲆⵠⲆ;
    ⵠⵠ[105] = [];
    ⵠⵠ[105][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔᐃⵠΔⲆΔⵠ;
    ⵠⵠ[105][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠⵠⵠⲆⲆᐃ;
    ⵠⵠ[68] = [];
    ⵠⵠ[68][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠΔᐃⵠⵠΔⲆⲆⲆ;
    ⵠⵠ[68][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠΔΔᐃⲆⲆΔⵠ;
    ⵠⵠ[106] = [];
    ⵠⵠ[106][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠⵠᐃⵠᐃᐃ;
    ⵠⵠ[106][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠΔΔⲆᐃᐃΔⵠ;
    ⵠⵠ[69] = [];
    ⵠⵠ[69][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔΔⲆᐃⵠΔⵠΔ;
    ⵠⵠ[69][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆᐃΔⲆᐃᐃⲆᐃⵠ;
    ⵠⵠ[107] = [];
    ⵠⵠ[107][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠΔΔⵠΔΔ;
    ⵠⵠ[107][Cr.ⵠΔⵠ] = ᐃᐃ.ΔΔⵠⵠⵠⲆᐃ;
    ⵠⵠ[70] = [];
    ⵠⵠ[70][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠⵠⵠᐃΔⲆᐃⲆ;
    ⵠⵠ[70][Cr.ⵠΔⵠ] = ᐃᐃ.ΔᐃⵠⵠΔⲆⵠΔⲆ;
    ⵠⵠ[80] = [];
    ⵠⵠ[80][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔᐃΔΔᐃᐃⵠ;
    ⵠⵠ[80][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⵠΔᐃⵠΔΔ;
    ⵠⵠ[81] = [];
    ⵠⵠ[81][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⵠᐃΔΔⲆ;
    ⵠⵠ[81][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆΔⲆⲆⵠᐃⵠ;
    ⵠⵠ[22] = [];
    ⵠⵠ[22][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⵠᐃΔⵠᐃ;
    ⵠⵠ[22][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆᐃⲆⲆⲆⲆⲆ;
    ⵠⵠ[928] = [];
    ⵠⵠ[928][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠΔⵠΔᐃᐃ;
    ⵠⵠ[928][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆᐃᐃᐃΔᐃⲆ;
    ⵠⵠ[935] = [];
    ⵠⵠ[935][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[935][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[935][Cr.ᐃᐃⵠ].push(ᐃᐃ.ᐃⵠⲆΔⵠᐃΔⲆᐃ);
    ⵠⵠ[935][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠᐃⵠⲆⵠⵠΔΔΔ);
    ⵠⵠ[935][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠᐃⵠⲆⵠⵠΔΔΔ);
    ⵠⵠ[935][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠᐃᐃᐃΔⵠⵠᐃⲆ);
    ⵠⵠ[941] = [];
    ⵠⵠ[941][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[941][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[941][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔᐃΔᐃⵠΔⵠ);
    ⵠⵠ[941][Cr.ᐃᐃⵠ].push(ᐃᐃ.ᐃⵠⵠᐃᐃΔⲆ);
    ⵠⵠ[941][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔⲆⵠⵠΔⵠⵠ);
    ⵠⵠ[941][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃᐃᐃⲆⲆΔⵠ);
    ⵠⵠ[941][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃΔⵠⲆⲆΔΔ);
    ⵠⵠ[941][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠⵠᐃⵠΔᐃᐃ);
    ⵠⵠ[53] = [];
    ⵠⵠ[53][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃΔΔⲆᐃⵠ;
    ⵠⵠ[53][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠᐃⲆⵠᐃⵠⲆ;
    ⵠⵠ[54] = [];
    ⵠⵠ[54][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔΔⲆⲆΔΔᐃ;
    ⵠⵠ[54][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆΔⵠⲆⲆΔⲆ;
    ⵠⵠ[241] = [];
    ⵠⵠ[241][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[241][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[241][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠᐃⲆⲆⲆᐃΔ);
    ⵠⵠ[241][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠⵠΔᐃΔⲆᐃ);
    ⵠⵠ[241][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔⲆⵠΔᐃᐃΔ);
    ⵠⵠ[241][Cr.ⵠΔⵠ].push(ᐃᐃ.ΔⵠᐃΔΔⲆᐃ);
    ⵠⵠ[241][Cr.ⵠΔⵠ].push(ᐃᐃ.ⲆᐃⵠⵠⵠΔⲆ);
    ⵠⵠ[241][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃⲆΔⵠⲆⵠᐃ);
    ⵠⵠ[202] = [];
    ⵠⵠ[202][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[202][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[202][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔⵠⲆⲆⲆⵠⵠ);
    ⵠⵠ[202][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔⲆΔᐃᐃΔΔ);
    ⵠⵠ[202][Cr.ᐃᐃⵠ].push(ᐃᐃ.ᐃΔᐃⵠΔΔⲆ);
    ⵠⵠ[202][Cr.ⵠΔⵠ].push(ᐃᐃ.ⲆᐃⲆΔᐃᐃᐃ);
    ⵠⵠ[202][Cr.ⵠΔⵠ].push(ᐃᐃ.ⲆⵠΔΔᐃⲆᐃ);
    ⵠⵠ[202][Cr.ⵠΔⵠ].push(ᐃᐃ.ΔⲆᐃΔⲆⲆⲆ);
    ⵠⵠ[203] = [];
    ⵠⵠ[203][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[203][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[203][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⲆΔΔᐃΔⲆᐃ);
    ⵠⵠ[203][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠᐃΔΔⲆⵠⵠ);
    ⵠⵠ[203][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⲆᐃⵠⵠᐃΔᐃ);
    ⵠⵠ[203][Cr.ᐃᐃⵠ].push(ᐃᐃ.ᐃⵠⵠᐃⲆⵠΔ);
    ⵠⵠ[203][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⲆⲆΔᐃΔⲆⵠ);
    ⵠⵠ[203][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠⲆⲆⲆⲆΔⵠ);
    ⵠⵠ[203][Cr.ⵠΔⵠ].push(ᐃᐃ.ⲆΔΔΔᐃᐃⲆ);
    ⵠⵠ[203][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠⵠⵠⲆⵠⲆᐃ);
    ⵠⵠ[203][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃⵠΔⵠⲆΔⵠ);
    ⵠⵠ[203][Cr.ⵠΔⵠ].push(ᐃᐃ.ⲆⵠⵠⲆⲆⵠΔ);
    ⵠⵠ[203][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠᐃⵠⵠⲆᐃⲆ);
    ⵠⵠ[203][Cr.ⵠΔⵠ].push(ᐃᐃ.ΔⲆⲆᐃⲆⲆᐃ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ] = [];
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔⲆᐃⵠΔⲆⲆ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔⵠᐃⲆⲆⵠᐃ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⲆⲆⵠⲆⵠⲆᐃ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ᐃᐃⵠ].push(ᐃᐃ.ᐃⲆⲆⲆᐃⲆᐃ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔᐃΔᐃⲆⵠⲆ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠⲆΔⵠΔⵠΔ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠᐃⵠΔᐃⵠᐃ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠᐃᐃΔⲆᐃⵠ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ⵠΔⵠ].push(ᐃᐃ.ⲆⲆᐃΔⲆᐃⲆ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠᐃΔⲆⵠⲆⵠ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ⵠΔⵠ].push(ᐃᐃ.ΔⲆΔᐃΔΔᐃ);
    ⵠⵠ[Cr.ⲆⲆⵠΔⲆ][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃⲆΔⲆᐃᐃΔ);
    ⵠⵠ[918] = [];
    ⵠⵠ[918][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔᐃᐃΔⵠⲆⵠ;
    ⵠⵠ[918][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃᐃΔᐃⵠⵠⲆ;
    ⵠⵠ[919] = ᐃᐃ.ⵠΔᐃᐃΔⵠᐃ;
    ⵠⵠ[56] = [];
    ⵠⵠ[56][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃⵠⵠⵠΔΔΔᐃ;
    ⵠⵠ[56][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆⲆⵠⵠⵠᐃⵠⵠ;
    ⵠⵠ[223] = [];
    ⵠⵠ[223][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠⵠⵠⵠΔⵠ;
    ⵠⵠ[223][Cr.ⵠΔⵠ] = ᐃᐃ.Δⵠᐃᐃᐃⵠᐃ;
    ⵠⵠ[224] = [];
    ⵠⵠ[224][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠⵠΔⵠΔⵠ;
    ⵠⵠ[224][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃΔΔΔⲆⲆᐃ;
    ⵠⵠ[236] = [];
    ⵠⵠ[236][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠⲆⲆᐃᐃᐃ;
    ⵠⵠ[236][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⵠⲆΔⵠΔΔ;
    ⵠⵠ[1033] = [];
    ⵠⵠ[1033][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆΔᐃΔⵠⵠ;
    ⵠⵠ[1033][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠΔᐃΔᐃΔ;
    ⵠⵠ[1034] = ᐃᐃ.ⲆⵠⵠᐃᐃⲆⵠ;
    ⵠⵠ[1150] = [];
    ⵠⵠ[1150][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠΔⵠⲆⵠⵠⵠ;
    ⵠⵠ[1150][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆᐃⲆⵠⵠⵠᐃ;
    ⵠⵠ[1152] = [];
    ⵠⵠ[1152][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⲆΔⵠⲆΔᐃ;
    ⵠⵠ[1152][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠᐃΔᐃⲆⵠΔ;
    ⵠⵠ[1149] = ᐃᐃ.ⵠᐃΔᐃΔⵠΔ;
    ⵠⵠ[1151] = ᐃᐃ.ⵠΔΔⵠᐃⵠΔ;
    ⵠⵠ[1153] = ᐃᐃ.ΔΔΔᐃⲆⲆⲆ;
    ⵠⵠ[1143] = [];
    ⵠⵠ[1143][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠⵠΔΔⲆᐃ;
    ⵠⵠ[1143][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆᐃⲆΔΔᐃᐃ;
    ⵠⵠ[1145] = [];
    ⵠⵠ[1145][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆᐃΔⲆⵠᐃ;
    ⵠⵠ[1145][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⵠᐃᐃⲆΔᐃ;
    ⵠⵠ[1146] = [];
    ⵠⵠ[1146][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃⲆⲆⲆᐃⵠ;
    ⵠⵠ[1146][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆⲆᐃⵠΔⵠ;
    ⵠⵠ[1144] = ᐃᐃ.ᐃⲆⵠⲆᐃΔᐃ;
    ⵠⵠ[1148] = ᐃᐃ.ⵠⵠⵠᐃⲆᐃᐃ;
    ⵠⵠ[1147] = ᐃᐃ.ΔΔΔᐃⵠⲆᐃ;
    ⵠⵠ[1053] = [];
    ⵠⵠ[1053][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⲆΔⵠᐃΔ;
    ⵠⵠ[1053][Cr.ⵠΔⵠ] = ᐃᐃ.ΔΔᐃΔΔΔⵠ;
    ⵠⵠ[1055] = [];
    ⵠⵠ[1055][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃΔΔΔᐃᐃ;
    ⵠⵠ[1055][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠⲆⵠᐃΔⵠ;
    ⵠⵠ[231] = [];
    ⵠⵠ[231][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔⵠΔⲆᐃⲆ;
    ⵠⵠ[231][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠᐃⲆᐃⲆⵠⲆ;
    ⵠⵠ[1060] = [];
    ⵠⵠ[1060][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔΔᐃⲆᐃΔ;
    ⵠⵠ[1060][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆⵠⲆⵠᐃⵠ;
    ⵠⵠ[1063] = [];
    ⵠⵠ[1063][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃΔᐃⲆΔⵠ;
    ⵠⵠ[1063][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠΔᐃᐃΔᐃΔ;
    ⵠⵠ[1059] = [];
    ⵠⵠ[1059][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⲆΔᐃⲆⵠⵠ;
    ⵠⵠ[1059][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃΔⲆΔΔⲆⵠ;
    ⵠⵠ[1062] = [];
    ⵠⵠ[1062][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠⵠⲆΔᐃᐃ;
    ⵠⵠ[1062][Cr.ⵠΔⵠ] = ᐃᐃ.ΔᐃⲆⵠⵠⵠⵠ;
    ⵠⵠ[1056] = ᐃᐃ.ⲆⲆⲆⲆⲆᐃΔ;
    ⵠⵠ[1057] = ᐃᐃ.ᐃᐃⵠᐃⵠΔΔ;
    ⵠⵠ[1058] = ᐃᐃ.ΔⵠⵠⵠⵠⲆΔ;
    ⵠⵠ[1065] = ᐃᐃ.ⲆΔΔΔⲆΔⵠ;
    ⵠⵠ[1066] = ᐃᐃ.ⲆⲆⵠᐃⵠΔΔ;
    ⵠⵠ[1067] = ᐃᐃ.ΔⵠⲆⲆΔᐃⲆ;
    ⵠⵠ[1222] = [];
    ⵠⵠ[1222][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⲆⵠⵠΔΔᐃ;
    ⵠⵠ[1222][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠΔⲆⵠⵠΔΔ;
    ⵠⵠ[248] = [];
    ⵠⵠ[248][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠⲆⲆΔᐃΔ;
    ⵠⵠ[248][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠⵠⲆΔΔⲆ;
    ⵠⵠ[1218] = [];
    ⵠⵠ[1218][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠⵠⲆⵠⲆⲆ;
    ⵠⵠ[1218][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⵠΔΔⲆⲆᐃ;
    ⵠⵠ[1221] = [];
    ⵠⵠ[1221][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃⵠⵠⲆᐃᐃ;
    ⵠⵠ[1221][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃᐃᐃⵠᐃΔΔ;
    ⵠⵠ[1223] = ᐃᐃ.ⲆⲆΔⵠⵠⲆⵠ;
    ⵠⵠ[1219] = ᐃᐃ.ᐃⲆΔᐃΔⵠⵠ;
    ⵠⵠ[1068] = [];
    ⵠⵠ[1068][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔΔᐃΔⵠᐃⵠ;
    ⵠⵠ[1068][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆΔΔⲆⲆⲆᐃ;
    ⵠⵠ[232] = [];
    ⵠⵠ[232][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆⵠⵠᐃⲆⵠ;
    ⵠⵠ[232][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⲆⵠΔⵠⵠⵠ;
    ⵠⵠ[1070] = [];
    ⵠⵠ[1070][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠⲆⵠΔᐃⵠ;
    ⵠⵠ[1070][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠΔⲆⲆⵠⵠ;
    ⵠⵠ[1072] = [];
    ⵠⵠ[1072][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠΔⲆⲆⲆΔⲆ;
    ⵠⵠ[1072][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃΔᐃΔⲆⲆⵠ;
    ⵠⵠ[1075] = [];
    ⵠⵠ[1075][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠΔⵠᐃᐃⵠ;
    ⵠⵠ[1075][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠⲆⵠΔΔΔ;
    ⵠⵠ[1071] = [];
    ⵠⵠ[1071][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠⵠᐃᐃⲆΔ;
    ⵠⵠ[1071][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠⵠᐃᐃᐃⲆ;
    ⵠⵠ[1074] = [];
    ⵠⵠ[1074][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠΔⲆⲆΔᐃΔ;
    ⵠⵠ[1074][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⲆᐃᐃⲆΔᐃ;
    ⵠⵠ[1073] = [];
    ⵠⵠ[1073][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⲆⵠΔⲆⲆ;
    ⵠⵠ[1073][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠΔᐃⲆΔΔⲆ;
    ⵠⵠ[1076] = [];
    ⵠⵠ[1076][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔΔᐃᐃⵠⵠ;
    ⵠⵠ[1076][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠΔΔⲆⲆⲆⲆ;
    ⵠⵠ[1077] = ᐃᐃ.ΔⲆΔⲆᐃΔΔ;
    ⵠⵠ[1078] = ᐃᐃ.ᐃⲆⵠᐃⲆᐃⲆ;
    ⵠⵠ[1079] = ᐃᐃ.ᐃᐃⲆᐃⵠΔΔ;
    ⵠⵠ[1083] = [];
    ⵠⵠ[1083][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔᐃΔⲆⵠⵠΔ;
    ⵠⵠ[1083][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠΔᐃⵠΔⵠᐃ;
    ⵠⵠ[233] = [];
    ⵠⵠ[233][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃᐃⲆⵠᐃΔ;
    ⵠⵠ[233][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆᐃⲆⲆᐃⵠ;
    ⵠⵠ[1085] = [];
    ⵠⵠ[1085][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔΔᐃᐃΔⲆ;
    ⵠⵠ[1085][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠⲆⲆⲆⲆᐃ;
    ⵠⵠ[1087] = [];
    ⵠⵠ[1087][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆᐃⵠᐃⲆᐃ;
    ⵠⵠ[1087][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆΔΔⲆΔΔᐃ;
    ⵠⵠ[1090] = [];
    ⵠⵠ[1090][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠΔΔᐃᐃⵠΔ;
    ⵠⵠ[1090][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆⲆⵠᐃᐃⵠ;
    ⵠⵠ[1086] = [];
    ⵠⵠ[1086][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠΔⲆΔⵠΔⲆ;
    ⵠⵠ[1086][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃᐃⵠⵠⵠΔΔ;
    ⵠⵠ[1089] = [];
    ⵠⵠ[1089][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔΔΔⵠΔΔ;
    ⵠⵠ[1089][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⲆᐃⵠΔᐃⲆ;
    ⵠⵠ[1088] = [];
    ⵠⵠ[1088][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⲆᐃΔΔᐃⵠ;
    ⵠⵠ[1088][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠΔᐃⵠⲆᐃ;
    ⵠⵠ[1091] = [];
    ⵠⵠ[1091][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔⲆⵠⲆᐃΔ;
    ⵠⵠ[1091][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠΔᐃⲆᐃⲆⵠ;
    ⵠⵠ[1092] = ᐃᐃ.ⲆᐃⲆΔᐃⵠΔ;
    ⵠⵠ[1093] = ᐃᐃ.ⲆⵠⵠⲆᐃΔΔ;
    ⵠⵠ[1094] = ᐃᐃ.ⲆΔⲆⲆᐃΔⵠ;
    ⵠⵠ[1098] = [];
    ⵠⵠ[1098][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃⲆⲆΔΔⵠ;
    ⵠⵠ[1098][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆΔᐃⲆⲆᐃⵠ;
    ⵠⵠ[235] = [];
    ⵠⵠ[235][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃⵠⲆΔΔⲆ;
    ⵠⵠ[235][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⵠΔᐃⲆⲆⵠ;
    ⵠⵠ[1115] = ᐃᐃ.ⵠⵠᐃᐃⲆᐃⵠ;
    ⵠⵠ[1113] = [];
    ⵠⵠ[1113][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃᐃᐃᐃΔᐃ;
    ⵠⵠ[1113][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⲆΔΔⲆΔᐃ;
    ⵠⵠ[1114] = [];
    ⵠⵠ[1114][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆᐃⵠᐃᐃᐃ;
    ⵠⵠ[1114][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠⵠⲆΔΔΔ;
    ⵠⵠ[1100] = [];
    ⵠⵠ[1100][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔΔᐃⲆⲆⲆⲆ;
    ⵠⵠ[1100][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠᐃⵠᐃΔΔⲆ;
    ⵠⵠ[1102] = [];
    ⵠⵠ[1102][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠⵠΔⲆⲆᐃ;
    ⵠⵠ[1102][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆᐃᐃⵠᐃⲆᐃ;
    ⵠⵠ[1105] = [];
    ⵠⵠ[1105][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆⵠΔΔⲆⲆ;
    ⵠⵠ[1105][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⲆⵠⲆⵠᐃΔ;
    ⵠⵠ[1101] = [];
    ⵠⵠ[1101][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆⲆⲆⲆⵠᐃ;
    ⵠⵠ[1101][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⲆΔⲆⵠΔⲆ;
    ⵠⵠ[1104] = [];
    ⵠⵠ[1104][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔᐃᐃΔᐃΔ;
    ⵠⵠ[1104][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃΔⲆⲆᐃⲆΔ;
    ⵠⵠ[1103] = [];
    ⵠⵠ[1103][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔⵠⲆΔᐃᐃ;
    ⵠⵠ[1103][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⲆᐃⲆⵠᐃⲆ;
    ⵠⵠ[1106] = [];
    ⵠⵠ[1106][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃΔΔⵠⲆΔ;
    ⵠⵠ[1106][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠΔⵠΔᐃΔ;
    ⵠⵠ[1107] = ᐃᐃ.ᐃⲆⲆΔᐃΔᐃ;
    ⵠⵠ[1108] = ᐃᐃ.ⲆΔⵠᐃᐃᐃΔ;
    ⵠⵠ[1109] = ᐃᐃ.ⵠΔⲆⲆⲆⵠΔ;
    ⵠⵠ[1119] = [];
    ⵠⵠ[1119][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠⵠⲆᐃⲆⵠ;
    ⵠⵠ[1119][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆᐃⲆⲆⵠⲆᐃ;
    ⵠⵠ[238] = [];
    ⵠⵠ[238][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔᐃΔⲆᐃᐃⲆ;
    ⵠⵠ[238][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⲆⲆⵠᐃⲆⵠ;
    ⵠⵠ[1136] = ᐃᐃ.ΔᐃⲆⵠⵠⲆⵠ;
    ⵠⵠ[1134] = [];
    ⵠⵠ[1134][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔΔⵠᐃⲆⵠ;
    ⵠⵠ[1134][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆΔⲆⵠⵠᐃ;
    ⵠⵠ[1135] = [];
    ⵠⵠ[1135][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃΔᐃⵠⲆⵠ;
    ⵠⵠ[1135][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⲆΔᐃⲆΔᐃ;
    ⵠⵠ[1121] = [];
    ⵠⵠ[1121][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔΔⵠⲆⲆⵠ;
    ⵠⵠ[1121][Cr.ⵠΔⵠ] = ᐃᐃ.ΔᐃⵠΔⵠⲆⵠ;
    ⵠⵠ[1123] = [];
    ⵠⵠ[1123][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔΔⵠΔᐃⵠⵠ;
    ⵠⵠ[1123][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆΔⵠᐃΔⲆᐃ;
    ⵠⵠ[1126] = [];
    ⵠⵠ[1126][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠⵠΔⵠΔΔ;
    ⵠⵠ[1126][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⵠΔᐃⲆᐃⵠ;
    ⵠⵠ[1122] = [];
    ⵠⵠ[1122][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠᐃⲆᐃⵠΔ;
    ⵠⵠ[1122][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃᐃⵠⲆⲆΔⵠ;
    ⵠⵠ[1125] = [];
    ⵠⵠ[1125][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔⵠΔᐃᐃⲆ;
    ⵠⵠ[1125][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠᐃⲆⵠⲆᐃⲆ;
    ⵠⵠ[1124] = [];
    ⵠⵠ[1124][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⲆΔⵠⵠⲆᐃ;
    ⵠⵠ[1124][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠⲆⲆᐃᐃⲆ;
    ⵠⵠ[1127] = [];
    ⵠⵠ[1127][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆⵠⵠΔᐃⵠ;
    ⵠⵠ[1127][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃᐃⲆⵠⵠΔᐃ;
    ⵠⵠ[1128] = ᐃᐃ.ΔᐃᐃⲆᐃΔΔ;
    ⵠⵠ[1129] = ᐃᐃ.ᐃᐃⲆΔΔΔᐃ;
    ⵠⵠ[1130] = ᐃᐃ.ⵠΔᐃⲆΔⲆᐃ;
    ⵠⵠ[1042] = [];
    ⵠⵠ[1042][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠΔᐃΔⵠⲆ;
    ⵠⵠ[1042][Cr.ⵠΔⵠ] = ᐃᐃ.Δⵠⵠᐃᐃᐃⵠ;
    ⵠⵠ[1043] = [];
    ⵠⵠ[1043][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠᐃΔⵠⵠⵠ;
    ⵠⵠ[1043][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃᐃⵠΔᐃⲆᐃ;
    ⵠⵠ[1044] = [];
    ⵠⵠ[1044][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆΔᐃᐃⵠⵠΔ;
    ⵠⵠ[1044][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆΔΔᐃΔΔ;
    ⵠⵠ[228] = [];
    ⵠⵠ[228][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔᐃΔⲆΔᐃⲆ;
    ⵠⵠ[228][Cr.ⵠΔⵠ] = ᐃᐃ.ΔᐃΔⲆΔᐃⲆ;
    ⵠⵠ[234] = [];
    ⵠⵠ[234][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆΔΔⵠⲆⵠ;
    ⵠⵠ[234][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⲆΔΔⵠⲆⵠ;
    ⵠⵠ[249] = [];
    ⵠⵠ[249][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠⲆᐃⵠⲆⵠ;
    ⵠⵠ[249][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⵠⲆᐃⵠⲆⵠ;
    ⵠⵠ[1045] = ᐃᐃ.ΔⵠΔΔⲆⵠᐃ;
    ⵠⵠ[89] = [];
    ⵠⵠ[89][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⲆⲆⲆⵠⲆⵠ;
    ⵠⵠ[89][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆᐃⲆⵠΔᐃ;
    ⵠⵠ[92] = [];
    ⵠⵠ[92][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃᐃⲆⲆᐃᐃ;
    ⵠⵠ[92][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⲆᐃΔΔⵠⵠ;
    ⵠⵠ[247] = [];
    ⵠⵠ[247][Cr.ᐃᐃⵠ] = [ᐃᐃ.ⲆΔΔⲆΔⵠᐃ, ᐃᐃ.ΔΔⲆᐃΔΔΔ, ᐃᐃ.ΔᐃⵠΔⲆⵠⵠ, ᐃᐃ.ⲆⵠⲆⵠⵠⲆⲆ, ᐃᐃ.ΔⵠⲆΔⵠⵠᐃ, ᐃᐃ.ΔΔΔΔⵠⲆΔ, ᐃᐃ.ΔᐃⵠΔⲆΔⵠ, ᐃᐃ.ᐃⵠⵠᐃⵠᐃᐃ, ᐃᐃ.ⵠⵠΔΔⵠΔΔ];
    ⵠⵠ[247][Cr.ⵠΔⵠ] = [ᐃᐃ.ᐃΔᐃΔᐃⲆΔ, ᐃᐃ.ΔᐃΔᐃΔⲆᐃ, ᐃᐃ.ᐃⲆⲆⲆΔⵠΔ, ᐃᐃ.ᐃⵠⲆⲆᐃΔⲆ, ᐃᐃ.ⲆΔΔΔⲆΔΔ, ᐃᐃ.ᐃⲆⲆⵠᐃᐃⵠ, ᐃᐃ.ᐃⵠⵠⵠⲆⲆᐃ, ᐃᐃ.ᐃⵠⵠᐃⵠᐃᐃ, ᐃᐃ.ΔΔⵠⵠⵠⲆᐃ];
    ⵠⵠ[93] = [];
    ⵠⵠ[93][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔΔⲆΔⵠᐃ;
    ⵠⵠ[93][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⵠⵠⵠⵠᐃⲆ;
    ⵠⵠ[225] = [];
    ⵠⵠ[225][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆⲆⵠⲆⲆᐃ;
    ⵠⵠ[225][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠⵠⵠⵠⲆⵠ;
    ⵠⵠ[226] = [];
    ⵠⵠ[226][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔΔΔⲆⵠⲆ;
    ⵠⵠ[226][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⲆⲆⵠΔᐃⲆ;
    ⵠⵠ[24] = [];
    ⵠⵠ[24][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⵠΔⲆⵠⵠ;
    ⵠⵠ[24][Cr.ⵠΔⵠ] = ᐃᐃ.ΔΔⲆⲆⲆⲆⵠ;
    ⵠⵠ[88] = [];
    ⵠⵠ[88][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃⲆΔΔⵠᐃ;
    ⵠⵠ[88][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃᐃᐃⲆⲆΔΔ;
    ⵠⵠ[87] = [];
    ⵠⵠ[87][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃΔΔⵠⵠⵠⲆ;
    ⵠⵠ[87][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃΔⲆΔΔⵠⲆ;
    ⵠⵠ[82] = [];
    ⵠⵠ[82][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃⵠⵠᐃⵠΔ;
    ⵠⵠ[82][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⲆᐃΔⲆΔⲆ;
    ⵠⵠ[621] = [];
    ⵠⵠ[621][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[621][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[621][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠᐃΔΔⵠᐃΔⵠᐃ);
    ⵠⵠ[621][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠⵠⵠⵠⵠᐃᐃΔⲆ);
    ⵠⵠ[621][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠᐃⵠⵠⲆᐃΔⲆΔ);
    ⵠⵠ[621][Cr.ⵠΔⵠ].push(ᐃᐃ.ⲆΔᐃⵠΔⲆᐃᐃⲆ);
    ⵠⵠ[621][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠᐃⲆᐃᐃΔⵠⲆⲆ);
    ⵠⵠ[621][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃΔΔᐃⵠⲆᐃⲆⲆ);
    ⵠⵠ[619] = [];
    ⵠⵠ[619][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[619][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[619][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠΔᐃⲆⵠⲆⲆⵠⵠ);
    ⵠⵠ[619][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔΔᐃⵠΔⵠᐃⵠᐃ);
    ⵠⵠ[619][Cr.ᐃᐃⵠ].push(ᐃᐃ.ᐃΔⲆⵠⵠⵠΔᐃⲆ);
    ⵠⵠ[619][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃΔⵠⲆⲆⲆⲆⵠⵠ);
    ⵠⵠ[619][Cr.ⵠΔⵠ].push(ᐃᐃ.ⵠΔᐃⲆⵠⵠΔⲆⲆ);
    ⵠⵠ[619][Cr.ⵠΔⵠ].push(ᐃᐃ.ΔᐃΔⲆᐃΔᐃᐃⵠ);
    ⵠⵠ[620] = [];
    ⵠⵠ[620][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[620][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[620][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⲆΔⵠⲆᐃⵠⲆΔⲆ);
    ⵠⵠ[620][Cr.ᐃᐃⵠ].push(ᐃᐃ.ΔⵠᐃΔⲆⲆΔⵠⵠ);
    ⵠⵠ[620][Cr.ᐃᐃⵠ].push(ᐃᐃ.ⵠⲆΔⵠⵠΔⲆᐃᐃ);
    ⵠⵠ[620][Cr.ⵠΔⵠ].push(ᐃᐃ.ⲆⲆΔⵠⲆⲆⲆΔⲆ);
    ⵠⵠ[620][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃᐃⲆⲆⲆΔⲆⵠΔ);
    ⵠⵠ[620][Cr.ⵠΔⵠ].push(ᐃᐃ.ᐃᐃⵠᐃΔᐃⵠᐃⵠ);
    ᐃⵠⵠᐃ.g = [];
    ᐃⵠⵠᐃ.g[0] = [ᐃᐃ.ⵠᐃⲆΔᐃΔΔ, ᐃᐃ.ΔⲆΔⲆᐃⵠⲆ];
    ᐃⵠⵠᐃ.g[1] = ᐃⵠⵠᐃ.g[0];
    ᐃⵠⵠᐃ.g[2] = [ᐃᐃ.ⵠⲆⲆⵠΔⵠΔ, ᐃᐃ.ⲆⵠᐃᐃᐃΔⵠ];
    ᐃⵠⵠᐃ.m = [];
    ᐃⵠⵠᐃ.m[0] = [ᐃᐃ.ΔⲆΔᐃᐃⵠⵠ, ᐃᐃ.ⵠᐃⲆᐃⵠⲆⵠ];
    ᐃⵠⵠᐃ.m[1] = ᐃⵠⵠᐃ.m[0];
    ᐃⵠⵠᐃ.m[2] = [ᐃᐃ.ⲆⵠᐃᐃⲆᐃⵠ, ᐃᐃ.ᐃΔⲆⲆⲆⲆⵠ];
    ᐃⵠⵠᐃ.la = [];
    ᐃⵠⵠᐃ.la[0] = [ᐃᐃ.ⵠᐃⵠΔΔⵠⵠ, ᐃᐃ.ⵠⵠΔⵠⵠⲆⲆ];
    ᐃⵠⵠᐃ.la[1] = ᐃⵠⵠᐃ.la[0];
    ᐃⵠⵠᐃ.la[2] = ᐃⵠⵠᐃ.la[0];
    ᐃⵠⵠᐃ.la[3] = ᐃⵠⵠᐃ.la[0];
    ᐃⵠⵠᐃ.la[4] = ᐃⵠⵠᐃ.la[0];
    ᐃⵠⵠᐃ.la[5] = ᐃⵠⵠᐃ.la[0];
    ᐃⵠⵠᐃ.s = [];
    ᐃⵠⵠᐃ.s[0] = [ᐃᐃ.ΔⲆᐃΔᐃⵠⵠ, ᐃᐃ.ᐃΔⲆᐃⵠⵠᐃ];
    ᐃⵠⵠᐃ.s[1] = ᐃⵠⵠᐃ.s[0];
    ᐃⵠⵠᐃ.s[2] = [ᐃᐃ.ⵠⵠⲆᐃⲆᐃⵠ, ᐃᐃ.ΔΔⲆᐃᐃΔᐃ];
    ᐃⵠⵠᐃ.p = [];
    ᐃⵠⵠᐃ.p[0] = [ᐃᐃ.ⵠⵠΔΔⲆⲆⲆ, ᐃᐃ.ⵠⵠΔΔⲆⲆⲆ];
    ᐃⵠⵠᐃ.a = [];
    ᐃⵠⵠᐃ.a[0] = [ᐃᐃ.ⵠⲆΔΔⲆⵠΔ, ᐃᐃ.ᐃⲆⲆⵠᐃⲆⲆ];
    ᐃⵠⵠᐃ.a[1] = ᐃⵠⵠᐃ.a[0];
    ᐃⵠⵠᐃ.a[2] = ᐃⵠⵠᐃ.a[0];
    ᐃⵠⵠᐃ.d = [];
    ᐃⵠⵠᐃ.d[0] = [ᐃᐃ.ΔᐃΔΔᐃⵠΔ, ᐃᐃ.ΔΔᐃΔᐃᐃᐃ];
    ᐃⵠⵠᐃ.d[1] = ᐃⵠⵠᐃ.d[0];
    ᐃⵠⵠᐃ.d[2] = ᐃⵠⵠᐃ.d[0];
    ᐃⵠⵠᐃ.re = [];
    ᐃⵠⵠᐃ.re[0] = [ᐃᐃ.ⵠᐃⲆⲆⵠⵠⵠ, ᐃᐃ.ⲆⵠⵠⲆⵠⵠⵠ];
    ᐃⵠⵠᐃ.re[1] = ᐃⵠⵠᐃ.re[0];
    ᐃⵠⵠᐃ.re[2] = ᐃⵠⵠᐃ.re[0];
    ᐃⵠⵠᐃ.f = [];
    ᐃⵠⵠᐃ.f[0] = [ᐃᐃ.ᐃⲆᐃΔⵠⵠΔ, ᐃᐃ.ⲆⲆΔᐃⲆΔⵠ];
    ᐃⵠⵠᐃ.f[1] = ᐃⵠⵠᐃ.f[0];
    ᐃⵠⵠᐃ.f[2] = ᐃⵠⵠᐃ.f[0];
    ᐃⵠⵠᐃ.isl = [];
    ᐃⵠⵠᐃ.isl[0] = [ᐃᐃ.ⲆⲆⲆᐃⵠⲆⲆ, ᐃᐃ.ⲆⵠⲆⲆⲆⵠⵠ];
    ᐃⵠⵠᐃ.isl[1] = ᐃⵠⵠᐃ.isl[0];
    ᐃⵠⵠᐃ.isl[2] = ᐃⵠⵠᐃ.isl[0];
    ᐃⵠⵠᐃ.c = [];
    ᐃⵠⵠᐃ.c[0] = [ᐃᐃ.ⲆΔΔⲆᐃⵠⲆ, ᐃᐃ.ΔⵠⲆⲆⲆⵠⲆ];
    ᐃⵠⵠᐃ.c[1] = ᐃⵠⵠᐃ.c[0];
    ᐃⵠⵠᐃ.c[2] = ᐃⵠⵠᐃ.c[0];
    ᐃⵠⵠᐃ.wtb = [];
    ᐃⵠⵠᐃ.wtb[0] = [ᐃᐃ.ⲆᐃᐃᐃΔⵠⵠ, ᐃᐃ.ⲆⲆΔⵠⵠⲆⲆ];
    ᐃⵠⵠᐃ.PIRANHA = [ᐃᐃ.ᐃᐃⵠᐃⵠᐃⲆ, ᐃᐃ.ΔΔⵠⵠⲆⵠᐃ];
    ᐃⵠⵠᐃ.KRAKEN = [ᐃᐃ.ᐃΔⵠΔⲆΔᐃ, ᐃᐃ.ⲆⵠⲆⲆⵠⲆΔ];
    ᐃⵠⵠᐃ.FOX = [ᐃᐃ.ⵠΔᐃᐃΔⵠΔ, ᐃᐃ.ⲆⲆᐃⵠⵠΔΔ];
    ᐃⵠⵠᐃ.WOLF = [ᐃᐃ.ⲆᐃᐃΔΔΔᐃ, ᐃᐃ.ⵠⲆΔᐃⲆⵠⲆ];
    ᐃⵠⵠᐃ.SPIDER = [ᐃᐃ.ⲆᐃⵠⵠᐃⵠΔ, ᐃᐃ.ΔⲆⵠΔᐃⵠⲆ];
    ᐃⵠⵠᐃ.BEAR = [ᐃᐃ.ⵠΔᐃⵠᐃΔᐃ, ᐃᐃ.ⲆⵠⲆⲆⲆΔⵠ];
    ᐃⵠⵠᐃ.CAVE = [ᐃᐃ.ⵠⵠⲆⲆⵠΔΔ, ᐃᐃ.ⵠΔⲆⲆⲆΔᐃ];
    ᐃⵠⵠᐃ.MAP = [ᐃᐃ.ΔᐃΔⵠᐃΔΔ, ᐃᐃ.ᐃⵠᐃⲆΔⵠⲆ];
    ᐃⵠⵠᐃ.FOREST = [ᐃᐃ.ΔⲆΔᐃⲆⵠᐃ, ᐃᐃ.ΔⲆᐃΔⵠᐃΔ];
    ᐃⵠⵠᐃ.WINTER = [ᐃᐃ.ⲆΔⲆⵠᐃⵠⲆ, ᐃᐃ.ᐃⲆⲆⲆⵠⵠⵠ];
    ᐃⵠⵠᐃ.DESERT = [ᐃᐃ.ⵠⲆᐃⲆⵠⲆⵠ, ᐃᐃ.ⲆⲆᐃΔⵠᐃΔ];
    ᐃⵠⵠᐃ.LAVA = [ᐃᐃ.ⵠⲆⲆΔⵠⵠⲆ, ᐃᐃ.ᐃⲆⲆⵠΔⵠⵠ];
    for (var c in ᐃⵠⵠᐃ) {
      for (var d = ᐃⵠⵠᐃ[c], e = 0; e < d.length; e++) {
        var f = d[e];
        if (f.ᐃⲆᐃᐃⲆΔⲆ !== Mg) {
          f.ᐃⲆᐃᐃⲆΔⲆ();
        } else if (f.length > 0) {
          for (var g = 0; g < f.length; g++) {
            if (f[g].ᐃⲆᐃᐃⲆΔⲆ !== Uj) {
              f[g].ᐃⲆᐃᐃⲆΔⲆ();
            }
          }
        }
      }
    }
    console.log(al, undefined);
  }
  function Qp() {
    new Date().getTime();
    Sp();
    Bp();
    ⵠⵠ[540] = [];
    ⵠⵠ[540][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[540][Cr.ⵠΔⵠ] = [];
    for (var a = 0; Cr.ᐃⵠⵠΔᐃΔᐃ > a; a++) {
      ⵠⵠ[540][Cr.ᐃᐃⵠ].push(Oa(tm(1, 4 + a, "#59B8CE")));
      ⵠⵠ[540][Cr.ⵠΔⵠ].push(Oa(tm(1, 4 + a, "#90DDD9")));
    }
    ⵠⵠ[470] = [];
    ⵠⵠ[470][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[470][Cr.ⵠΔⵠ] = [];
    for (a = 0; a < Cr.ΔΔⲆⵠΔΔⲆ; a++) {
      ⵠⵠ[470][Cr.ᐃᐃⵠ].push(Oa(tm(1, 4 + a, "#fff")));
      ⵠⵠ[470][Cr.ⵠΔⵠ].push(Oa(tm(1, 4 + a, "#fff")));
    }
    ⵠⵠ[471] = [];
    ⵠⵠ[471][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[471][Cr.ⵠΔⵠ] = [];
    for (a = 0; Cr.ΔΔⲆⵠΔΔⲆ > a; a++) {
      ⵠⵠ[471][Cr.ᐃᐃⵠ].push(Oa(tm(1, 6 + a, "#DDCD8A")));
      ⵠⵠ[471][Cr.ⵠΔⵠ].push(Oa(tm(1, 6 + a, "#155E57")));
    }
    ⵠⵠ[942] = [];
    ⵠⵠ[942][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[942][Cr.ⵠΔⵠ] = [];
    for (a = 0; a < Cr.ⵠⵠⵠⲆᐃΔⲆ; a++) {
      ⵠⵠ[942][Cr.ᐃᐃⵠ].push(Oa(tm(1, 4 + a, "#353326")));
      ⵠⵠ[942][Cr.ⵠΔⵠ].push(Oa(tm(1, 4 + a, "#1D2526")));
    }
    ⵠⵠ[201] = [];
    ⵠⵠ[201][Cr.ᐃᐃⵠ] = Oa(xd(1.5, 0, ["#ee71a9"]));
    ⵠⵠ[201][Cr.ⵠΔⵠ] = Oa(xd(1.5, 0, ["#ee71a9"]));
    ⵠⵠ[872] = [ⵠⵠ[201]];
    ⵠⵠ[872][1] = [];
    ⵠⵠ[872][2] = [];
    ⵠⵠ[872][3] = [];
    ⵠⵠ[872][4] = [];
    ⵠⵠ[872][1][Cr.ᐃᐃⵠ] = Oa(xd(1.5, 0, ["#e2d63b"]));
    ⵠⵠ[872][1][Cr.ⵠΔⵠ] = Oa(xd(1.5, 0, ["#e2d63b"]));
    ⵠⵠ[872][2][Cr.ᐃᐃⵠ] = Oa(xd(1.5, 0, ["#309cbd"]));
    ⵠⵠ[872][2][Cr.ⵠΔⵠ] = Oa(xd(1.5, 0, ["#309cbd"]));
    ⵠⵠ[872][3][Cr.ᐃᐃⵠ] = Oa(xd(1.5, 0, ["#cd232d"]));
    ⵠⵠ[872][3][Cr.ⵠΔⵠ] = Oa(xd(1.5, 0, ["#cd232d"]));
    ⵠⵠ[872][4][Cr.ᐃᐃⵠ] = Oa(xd(1.5, 0, ["#42b672"]));
    ⵠⵠ[872][4][Cr.ⵠΔⵠ] = Oa(xd(1.5, 0, ["#42b672"]));
    if (ⵠᐃⵠ.ⵠΔⲆⵠᐃⵠᐃ("cti", rg.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Oa = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ⵠⵠ[797] = Oa(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ⵠⵠ[108] = [];
    ⵠⵠ[108][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[108][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[108][Cr.ᐃᐃⵠ].push(Oa(ru(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⵠⵠ[108][Cr.ᐃᐃⵠ].push(Oa(ru(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⵠⵠ[108][Cr.ᐃᐃⵠ].push(Oa(ru(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⵠⵠ[108][Cr.ⵠΔⵠ].push(Oa(ru(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⵠⵠ[108][Cr.ⵠΔⵠ].push(Oa(ru(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⵠⵠ[108][Cr.ⵠΔⵠ].push(Oa(ru(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⵠⵠ[111] = [];
    ⵠⵠ[111][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[111][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[111][Cr.ᐃᐃⵠ].push(Oa(yu(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠⵠ[111][Cr.ᐃᐃⵠ].push(Oa(yu(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠⵠ[111][Cr.ᐃᐃⵠ].push(Oa(yu(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠⵠ[111][Cr.ⵠΔⵠ].push(Oa(yu(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⵠⵠ[111][Cr.ⵠΔⵠ].push(Oa(yu(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⵠⵠ[111][Cr.ⵠΔⵠ].push(Oa(yu(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⵠⵠ[112] = [];
    ⵠⵠ[112][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[112][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[112][Cr.ᐃᐃⵠ].push(Oa(mu(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⵠⵠ[112][Cr.ᐃᐃⵠ].push(Oa(mu(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⵠⵠ[112][Cr.ᐃᐃⵠ].push(Oa(mu(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⵠⵠ[112][Cr.ⵠΔⵠ].push(Oa(mu(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⵠⵠ[112][Cr.ⵠΔⵠ].push(Oa(mu(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⵠⵠ[112][Cr.ⵠΔⵠ].push(Oa(mu(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⵠⵠ[239] = [];
    ⵠⵠ[239][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆᐃᐃⵠᐃⵠ;
    ⵠⵠ[239][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠⵠᐃΔΔᐃ;
    ⵠⵠ[286] = [];
    ⵠⵠ[286][Cr.ᐃᐃⵠ] = Oa(au(0.6, ["#0d1b1c"]));
    ⵠⵠ[286][Cr.ⵠΔⵠ] = Oa(au(0.6, ["#030d14"]));
    ⵠⵠ[793] = [];
    ⵠⵠ[793][Cr.ᐃᐃⵠ] = Oa(Yt(0.6, ["#2a2938", "#242330"]));
    ⵠⵠ[793][Cr.ⵠΔⵠ] = Oa(Yt(0.6, ["#1b1e30", "#161921"]));
    ⵠⵠ[820] = [];
    ⵠⵠ[820][Cr.ᐃᐃⵠ] = Oa(Qd(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ⵠⵠ[820][Cr.ⵠΔⵠ] = Oa(Qd(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ⵠⵠ[821] = [];
    ⵠⵠ[821][Cr.ᐃᐃⵠ] = Oa(Sd(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ⵠⵠ[821][Cr.ⵠΔⵠ] = Oa(Sd(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ⵠⵠ[822] = [];
    ⵠⵠ[822][Cr.ᐃᐃⵠ] = Oa(St(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ⵠⵠ[822][Cr.ⵠΔⵠ] = Oa(St(0.4, ["#030d14", "#11635e", "#02373e"]));
    ⵠⵠ[823] = Oa(Ld(0.6, ["#BB0000"]));
    ⵠⵠ[824] = Oa(Ld(0.6, ["#DBE71C"]));
    ⵠⵠ[825] = Oa(Ld(0.6, ["#00BB00"]));
    ⵠⵠ[109] = [];
    ⵠⵠ[109][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[109][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[109][Cr.ᐃᐃⵠ].push(bu(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], No, 0));
    ⵠⵠ[109][Cr.ᐃᐃⵠ].push(bu(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
    ⵠⵠ[109][Cr.ᐃᐃⵠ].push(bu(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], xa, 0));
    ⵠⵠ[109][Cr.ᐃᐃⵠ].push(bu(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
    ⵠⵠ[109][Cr.ᐃᐃⵠ].push(bu(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], xa, 0));
    ⵠⵠ[109][Cr.ᐃᐃⵠ].push(bu(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
    ⵠⵠ[109][Cr.ⵠΔⵠ].push(bu(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], No, 0));
    ⵠⵠ[109][Cr.ⵠΔⵠ].push(bu(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
    ⵠⵠ[109][Cr.ⵠΔⵠ].push(bu(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], No, 0));
    ⵠⵠ[109][Cr.ⵠΔⵠ].push(bu(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
    ⵠⵠ[109][Cr.ⵠΔⵠ].push(bu(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
    ⵠⵠ[109][Cr.ⵠΔⵠ].push(bu(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
    ⵠⵠ[307] = [];
    ⵠⵠ[307][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[307][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[307][Cr.ᐃᐃⵠ].push(Oa(Zt($t(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ⵠⵠ[109][Cr.ᐃᐃⵠ][0])));
    ⵠⵠ[307][Cr.ᐃᐃⵠ].push(Oa(Zt($t(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), ⵠⵠ[109][Cr.ᐃᐃⵠ][1])));
    ⵠⵠ[307][Cr.ⵠΔⵠ].push(Oa(Zt($t(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], zg), ⵠⵠ[109][Cr.ⵠΔⵠ][0])));
    ⵠⵠ[307][Cr.ⵠΔⵠ].push(Oa(Zt($t(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), ⵠⵠ[109][Cr.ⵠΔⵠ][1])));
    ⵠⵠ[307][Cr.ᐃᐃⵠ].push(Oa(Zt($t(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], false), ⵠⵠ[109][Cr.ᐃᐃⵠ][2])));
    ⵠⵠ[307][Cr.ᐃᐃⵠ].push(Oa(Zt($t(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], true), ⵠⵠ[109][Cr.ᐃᐃⵠ][2])));
    ⵠⵠ[307][Cr.ⵠΔⵠ].push(Oa(Zt($t(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), ⵠⵠ[109][Cr.ⵠΔⵠ][2])));
    ⵠⵠ[307][Cr.ⵠΔⵠ].push(Oa(Zt($t(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], true), ⵠⵠ[109][Cr.ⵠΔⵠ][3])));
    ⵠⵠ[109][Cr.ᐃᐃⵠ][5] = Oa(ⵠⵠ[109][Cr.ᐃᐃⵠ][5]);
    ⵠⵠ[109][Cr.ᐃᐃⵠ][4] = Oa(ⵠⵠ[109][Cr.ᐃᐃⵠ][4]);
    ⵠⵠ[109][Cr.ᐃᐃⵠ][3] = Oa(ⵠⵠ[109][Cr.ᐃᐃⵠ][3]);
    ⵠⵠ[109][Cr.ᐃᐃⵠ][2] = Oa(ⵠⵠ[109][Cr.ᐃᐃⵠ][2]);
    ⵠⵠ[109][Cr.ᐃᐃⵠ][1] = Oa(ⵠⵠ[109][Cr.ᐃᐃⵠ][1]);
    ⵠⵠ[109][Cr.ᐃᐃⵠ][0] = Oa(ⵠⵠ[109][Cr.ᐃᐃⵠ][0]);
    ⵠⵠ[109][Cr.ⵠΔⵠ][5] = Oa(ⵠⵠ[109][Cr.ⵠΔⵠ][5]);
    ⵠⵠ[109][Cr.ⵠΔⵠ][4] = Oa(ⵠⵠ[109][Cr.ⵠΔⵠ][4]);
    ⵠⵠ[109][Cr.ⵠΔⵠ][3] = Oa(ⵠⵠ[109][Cr.ⵠΔⵠ][3]);
    ⵠⵠ[109][Cr.ⵠΔⵠ][2] = Oa(ⵠⵠ[109][Cr.ⵠΔⵠ][2]);
    ⵠⵠ[109][Cr.ⵠΔⵠ][1] = Oa(ⵠⵠ[109][Cr.ⵠΔⵠ][1]);
    ⵠⵠ[109][Cr.ⵠΔⵠ][0] = Oa(ⵠⵠ[109][Cr.ⵠΔⵠ][0]);
    ⵠⵠ[8] = [];
    ⵠⵠ[8][Cr.ᐃᐃⵠ] = Oa(fd(4, du(0.75, jj, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ⵠⵠ[8][Cr.ⵠΔⵠ] = Oa(fd(4, du(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ⵠⵠ[1] = [];
    ⵠⵠ[1][Cr.ᐃᐃⵠ] = Oa(fd(4, du(0.75, Cl, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ⵠⵠ[1][Cr.ⵠΔⵠ] = Oa(fd(4, du(0.75, Cl, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ⵠⵠ[3] = [];
    ⵠⵠ[3][Cr.ᐃᐃⵠ] = Oa(fd(4, du(0.75, Rr, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ⵠⵠ[3][Cr.ⵠΔⵠ] = Oa(fd(4, du(0.75, Fn, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ⵠⵠ[4] = [];
    ⵠⵠ[4][Cr.ᐃᐃⵠ] = Oa(fd(4, du(0.75, Ah, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ⵠⵠ[4][Cr.ⵠΔⵠ] = Oa(fd(4, du(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ⵠⵠ[31] = [];
    ⵠⵠ[31][Cr.ᐃᐃⵠ] = Oa(fd(4, du(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ⵠⵠ[31][Cr.ⵠΔⵠ] = Oa(fd(4, du(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ⵠⵠ[9] = [];
    ⵠⵠ[9][Cr.ᐃᐃⵠ] = Oa(fd(3, Xt(0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ⵠⵠ[9][Cr.ⵠΔⵠ] = Oa(fd(3, Xt(0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ⵠⵠ[199] = [];
    ⵠⵠ[199][Cr.ᐃᐃⵠ] = Oa(fd(3, ou(0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ⵠⵠ[199][Cr.ⵠΔⵠ] = Oa(fd(3, ou(0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ⵠⵠ[57] = [];
    ⵠⵠ[57][Cr.ᐃᐃⵠ] = Oa(fd(3, cu(0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ⵠⵠ[57][Cr.ⵠΔⵠ] = Oa(fd(3, cu(0.4, jq, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ⵠⵠ[0] = [];
    ⵠⵠ[0][Cr.ᐃᐃⵠ] = Oa(fd(3, hu(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ⵠⵠ[0][Cr.ⵠΔⵠ] = Oa(fd(3, hu(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ⵠⵠ[5] = [];
    ⵠⵠ[5][Cr.ᐃᐃⵠ] = Oa(fd(3, Bu(0.4, Rr, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ⵠⵠ[5][Cr.ⵠΔⵠ] = Oa(fd(3, Bu(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ⵠⵠ[6] = [];
    ⵠⵠ[6][Cr.ᐃᐃⵠ] = Oa(fd(3, su(0.4, Rr, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ⵠⵠ[6][Cr.ⵠΔⵠ] = Oa(fd(3, su(0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ⵠⵠ[30] = [];
    ⵠⵠ[30][Cr.ᐃᐃⵠ] = Oa(fd(3, fu(0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ⵠⵠ[30][Cr.ⵠΔⵠ] = Oa(fd(3, fu(0.4, Dg, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ⵠⵠ[285] = [];
    ⵠⵠ[285][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[285][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[285][Cr.ᐃᐃⵠ].push(Oa(gm(0.9, 0, ["#0d4f35"], 0)));
    ⵠⵠ[285][Cr.ᐃᐃⵠ].push(Oa(gm(0.9, 0, ["#0d4f35"], 1)));
    ⵠⵠ[285][Cr.ᐃᐃⵠ].push(Oa(gm(0.9, 0, ["#0d4f35"], 2)));
    ⵠⵠ[285][Cr.ⵠΔⵠ].push(Oa(gm(0.9, 0, ["#053339"], 0)));
    ⵠⵠ[285][Cr.ⵠΔⵠ].push(Oa(gm(0.9, 0, ["#053339"], 1)));
    ⵠⵠ[285][Cr.ⵠΔⵠ].push(Oa(gm(0.9, 0, ["#053339"], 2)));
    ⵠⵠ[285][Cr.ᐃᐃⵠ].push(Oa(wu(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ⵠⵠ[285][Cr.ᐃᐃⵠ].push(Oa(wu(0.8, ["#292002", "#ba930e", "#6d5704"])));
    ⵠⵠ[285][Cr.ⵠΔⵠ].push(Oa(wu(0.9, ["#052919", "#0a4738", "#06321f"])));
    ⵠⵠ[285][Cr.ⵠΔⵠ].push(Oa(wu(0.8, ["#052918", "#08491c", "#063417"])));
    ⵠⵠ[183] = [];
    ⵠⵠ[183][Cr.ᐃᐃⵠ] = Oa(fd(Math.PI / 2, sc(0.25, ct, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ⵠⵠ[183][Cr.ⵠΔⵠ] = Oa(fd(Math.PI / 2, sc(0.25, P, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ⵠⵠ[803] = [];
    ⵠⵠ[803].push(Oa(lc(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ⵠⵠ[803].push(Oa(lc(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ⵠⵠ[803].push(Oa(lc(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ⵠⵠ[802] = [];
    ⵠⵠ[802][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[802][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[802][Cr.ᐃᐃⵠ].push(Oa(fd(Math.PI / 2, Ac(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ⵠⵠ[802][Cr.ⵠΔⵠ].push(Oa(fd(Math.PI / 2, Ac(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ⵠⵠ[802][Cr.ᐃᐃⵠ].push(Oa(fd(Math.PI / 2, Ac(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ⵠⵠ[802][Cr.ⵠΔⵠ].push(Oa(fd(Math.PI / 2, Ac(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    ⵠⵠ[802][Cr.ᐃᐃⵠ].push(Oa(fd(Math.PI / 2, Ac(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ⵠⵠ[802][Cr.ⵠΔⵠ].push(Oa(fd(Math.PI / 2, Ac(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    ⵠⵠ[802][Cr.ᐃᐃⵠ].push(Oa(fd(Math.PI / 2, Ac(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ⵠⵠ[802][Cr.ⵠΔⵠ].push(Oa(fd(Math.PI / 2, Ac(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ⵠⵠ[110] = [];
    ⵠⵠ[110][Cr.ᐃᐃⵠ] = [Oa(nu(1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
    ⵠⵠ[110][Cr.ⵠΔⵠ] = [Oa(nu(1.2, Rr, ["#030d14", "#084442", "#0a4049"]))];
    ⵠⵠ[623] = [];
    ⵠⵠ[623][Cr.ᐃᐃⵠ] = Oa(nu(0.8, true, ["#0e3022", "#68622D", "#665329"]));
    ⵠⵠ[623][Cr.ⵠΔⵠ] = Oa(nu(0.8, Zb, ["#030d14", "#0F3A24", "#083326"]));
    ⵠⵠ[189] = [];
    ⵠⵠ[189][Cr.ᐃᐃⵠ] = Oa(Rc(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ⵠⵠ[189][Cr.ⵠΔⵠ] = Oa(Rc(0.5, jq, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ⵠⵠ[192] = [];
    ⵠⵠ[192][Cr.ᐃᐃⵠ] = Oa(kd(0.5, qa, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ⵠⵠ[192][Cr.ⵠΔⵠ] = Oa(kd(0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ⵠⵠ[194] = [];
    ⵠⵠ[194][Cr.ᐃᐃⵠ] = Oa(tp(0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ⵠⵠ[194][Cr.ⵠΔⵠ] = Oa(tp(0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ⵠⵠ[287] = [];
    ⵠⵠ[287][Cr.ᐃᐃⵠ] = Oa(nu(0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
    ⵠⵠ[287][Cr.ⵠΔⵠ] = Oa(nu(0.8, true, ["#030d14", "#084442", "#0a4049"]));
    ⵠⵠ[813] = [];
    ⵠⵠ[813][Cr.ᐃᐃⵠ] = Oa(Rc(0.5, ct, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ⵠⵠ[813][Cr.ⵠΔⵠ] = Oa(Rc(0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ⵠⵠ[839] = [];
    ⵠⵠ[839][Cr.ᐃᐃⵠ] = Oa(kd(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ⵠⵠ[839][Cr.ⵠΔⵠ] = Oa(kd(0.5, Fl, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ⵠⵠ[869] = [];
    ⵠⵠ[869][Cr.ᐃᐃⵠ] = Oa(tp(0.5, ct, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ⵠⵠ[869][Cr.ⵠΔⵠ] = Oa(tp(0.5, Nh, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ⵠⵠ[854] = [];
    ⵠⵠ[854][Cr.ᐃᐃⵠ] = Oa(pp(0.45, Zb, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ⵠⵠ[854][Cr.ⵠΔⵠ] = Oa(pp(0.45, P, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ⵠⵠ[859] = Oa(pp(0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ⵠⵠ[294] = [];
    ⵠⵠ[294][Cr.ᐃᐃⵠ] = Oa(xu(1.4, 0, ["#ac222a", "#e6636a"]));
    ⵠⵠ[294][Cr.ⵠΔⵠ] = Oa(xu(1.4, 0, ["#46195e", "#744188"]));
    ⵠⵠ[288] = [];
    ⵠⵠ[288][Cr.ᐃᐃⵠ] = Oa(Ot(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ⵠⵠ[288][Cr.ⵠΔⵠ] = Oa(Ot(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ⵠⵠ[118] = [];
    ⵠⵠ[118][Cr.ᐃᐃⵠ] = Oa(Lt(0.9, 0, ["#4d2d14", "#432516"]));
    ⵠⵠ[118][Cr.ⵠΔⵠ] = Oa(Lt(0.9, 0, ["#282404", "#0a0a01"]));
    ⵠⵠ[113] = [];
    ⵠⵠ[113][Cr.ᐃᐃⵠ] = Oa(Nt(0.9, 0, ["#4d2d14", "#432516"]));
    ⵠⵠ[113][Cr.ⵠΔⵠ] = Oa(Nt(0.9, 0, ["#282404", "#0a0a01"]));
    ⵠⵠ[289] = [];
    ⵠⵠ[289][Cr.ᐃᐃⵠ] = Oa(Qt(0.9, 0, ["#efd435"]));
    ⵠⵠ[289][Cr.ⵠΔⵠ] = Oa(Qt(0.9, 0, ["#fffabb"]));
    ⵠⵠ[282] = [];
    ⵠⵠ[282][Cr.ᐃᐃⵠ] = Oa(Jt(0.9, 0, ["#efd435"]));
    ⵠⵠ[282][Cr.ⵠΔⵠ] = Oa(Jt(0.9, 0, ["#fffabb"]));
    ⵠⵠ[816] = [];
    ⵠⵠ[816][Cr.ᐃᐃⵠ] = Oa(Qt(0.9, 0, ["#efd435"]));
    ⵠⵠ[816][Cr.ⵠΔⵠ] = Oa(Qt(0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ⵠⵠ[817] = [];
    ⵠⵠ[817][Cr.ᐃᐃⵠ] = Oa(Jt(0.9, 0, ["#efd435"]));
    ⵠⵠ[817][Cr.ⵠΔⵠ] = Oa(Jt(0.9, 0, ["#ff5704"]));
    ⵠⵠ[324] = Oa(Vd(1, "#ffffff"));
    ⵠⵠ[301] = Oa(Vd(1.5, "#ffffff"));
    ⵠⵠ[306] = Oa(gu(1, "Your score:", 15, "#FFF"));
    ⵠⵠ[655] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      vd(d, a * 119.5, a * 140.125, a * 19);
      gd(d, undefined, b[1], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      gd(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      gd(d, Uj, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      gd(d, Uj, b[3], a * 10);
      vd(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      gd(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      gd(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      gd(d, undefined, b[8], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      bd(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      gd(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      bd(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      gd(d, b[9]);
      return c;
    }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ⵠⵠ[656] = ᐃᐃ.ᐃⲆⵠⵠⲆⵠⵠ;
    ⵠⵠ[135] = [];
    ⵠⵠ[135][Cr.ᐃᐃⵠ] = Oa(Mt(1.5, Rr, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⵠⵠ[135][Cr.ⵠΔⵠ] = Oa(Mt(1.5, Zb, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⵠⵠ[641] = [];
    ⵠⵠ[641][Cr.ᐃᐃⵠ] = Oa(Pt(2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⵠⵠ[641][Cr.ⵠΔⵠ] = Oa(Pt(2, Fn, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⵠⵠ[642] = [];
    ⵠⵠ[642][Cr.ᐃᐃⵠ] = Oa(Ht(1.5, rt, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⵠⵠ[642][Cr.ⵠΔⵠ] = Oa(Ht(1.5, Dg, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⵠⵠ[134] = [];
    ⵠⵠ[134][Cr.ᐃᐃⵠ] = Oa(Gd(2.2, 0, ["#A89F67", "#9E8456"]));
    ⵠⵠ[134][Cr.ⵠΔⵠ] = Oa(Gd(2.2, 0, ["#0B4049", "#08383D"]));
    ⵠⵠ[638] = [];
    ⵠⵠ[638][Cr.ᐃᐃⵠ] = Oa(Gd(2.2, 0, ["#68622D", "#665329"]));
    ⵠⵠ[638][Cr.ⵠΔⵠ] = Oa(Gd(2.2, 0, ["#0F3A24", "#083326"]));
    ⵠⵠ[321] = [];
    ⵠⵠ[321][Cr.ᐃᐃⵠ] = Oa(zu(0.8, 0, ["#A89F67", "#9E8456"]));
    ⵠⵠ[321][Cr.ⵠΔⵠ] = Oa(zu(0.8, 0, ["#15514F", "#0F3F3D"]));
    ⵠⵠ[811] = [];
    ⵠⵠ[811][Cr.ᐃᐃⵠ] = Oa(zu(0.8, 0, ["#c67933", "#b17238"]));
    ⵠⵠ[811][Cr.ⵠΔⵠ] = Oa(zu(0.8, 0, ["#043c37", "#032b23"]));
    ⵠⵠ[984] = [];
    ⵠⵠ[984][Cr.ᐃᐃⵠ] = Oa(zu(0.8, 0, ["#3a8214", "#4a9c1e"]));
    ⵠⵠ[984][Cr.ⵠΔⵠ] = Oa(zu(0.8, 0, ["#032d29", "#044640"]));
    ⵠⵠ[837] = [];
    ⵠⵠ[837][Cr.ᐃᐃⵠ] = Oa(zu(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ⵠⵠ[837][Cr.ⵠΔⵠ] = Oa(zu(0.8, 0, ["#1c6161", "#07413f"]));
    ⵠⵠ[848] = [];
    ⵠⵠ[848][Cr.ᐃᐃⵠ] = Oa(zu(0.8, 0, ["#328a56", "#449573"]));
    ⵠⵠ[848][Cr.ⵠΔⵠ] = Oa(zu(0.8, 0, ["#043c37", "#032b23"]));
    ⵠⵠ[952] = [];
    ⵠⵠ[952][Cr.ᐃᐃⵠ] = Oa(zu(0.8, 0, ["#c98e2f", "#a36b11"]));
    ⵠⵠ[952][Cr.ⵠΔⵠ] = Oa(zu(0.8, 0, ["#043c37", "#032b23"]));
    ⵠⵠ[962] = [];
    ⵠⵠ[962][Cr.ᐃᐃⵠ] = Oa(zu(0.8, 0, ["#b22419", "#99110e"]));
    ⵠⵠ[962][Cr.ⵠΔⵠ] = Oa(zu(0.8, 0, ["#04323c", "#03222b"]));
    ⵠⵠ[969] = [];
    ⵠⵠ[969][Cr.ᐃᐃⵠ] = Oa(zu(0.8, 0, ["#13a56d", "#098a58"]));
    ⵠⵠ[969][Cr.ⵠΔⵠ] = Oa(zu(0.8, 0, ["#043c37", "#032b23"]));
    ⵠⵠ[657] = Kt(1, [{
      f: Gd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠⵠ[723] = Kt(1, [{
      f: Nt,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠⵠ[724] = Kt(1, [{
      f: ap,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠⵠ[334] = Kt(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠⵠ[115] = [];
    ⵠⵠ[115][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#7d613e", "#9e7e5a"]));
    ⵠⵠ[115][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#084442", "#125e5a"]));
    ⵠⵠ[132] = [];
    ⵠⵠ[132][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#9E8456", "#A89F67"]));
    ⵠⵠ[132][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ⵠⵠ[668] = [];
    ⵠⵠ[668][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#665329", "#68622D"]));
    ⵠⵠ[668][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#083326", "#0F3A24"]));
    ⵠⵠ[188] = [];
    ⵠⵠ[188][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#c67933", "#ec952d"]));
    ⵠⵠ[188][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#0e6553", "#094437"]));
    ⵠⵠ[210] = [];
    ⵠⵠ[210][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#375809", "#4b770e"]));
    ⵠⵠ[210][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#09542d", "#0d5d2f"]));
    ⵠⵠ[985] = [];
    ⵠⵠ[985][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#585809", "#72770e"]));
    ⵠⵠ[985][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#295209", "#305d0d"]));
    ⵠⵠ[191] = [];
    ⵠⵠ[191][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#b9b094", "#e2d2c0"]));
    ⵠⵠ[191][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#126366", "#0d484b"]));
    ⵠⵠ[193] = [];
    ⵠⵠ[193][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#3f8662", "#30915d"]));
    ⵠⵠ[193][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#0e6553", "#094437"]));
    ⵠⵠ[812] = [];
    ⵠⵠ[812][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#c79153", "#dfa868"]));
    ⵠⵠ[812][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#073927", "#075040"]));
    ⵠⵠ[838] = [];
    ⵠⵠ[838][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#768b5b", "#819984"]));
    ⵠⵠ[838][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#0c4540", "#0e5153"]));
    ⵠⵠ[849] = [];
    ⵠⵠ[849][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#567465", "#627c6e"]));
    ⵠⵠ[849][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#073927", "#075040"]));
    ⵠⵠ[204] = [];
    ⵠⵠ[204][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#996b3a", "#bf956b"]));
    ⵠⵠ[204][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#0e6553", "#094437"]));
    ⵠⵠ[953] = [];
    ⵠⵠ[953][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#7a634a", "#a68f77"]));
    ⵠⵠ[953][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#1e4d43", "#113c32"]));
    ⵠⵠ[206] = [];
    ⵠⵠ[206][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#99403c", "#bc796c"]));
    ⵠⵠ[206][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#1e434d", "#11303c"]));
    ⵠⵠ[963] = [];
    ⵠⵠ[963][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#88504e", "#b3857c"]));
    ⵠⵠ[963][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#253b41", "#162930"]));
    ⵠⵠ[208] = [];
    ⵠⵠ[208][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#0f8870", "#23af93"]));
    ⵠⵠ[208][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#032829", "#083233"]));
    ⵠⵠ[970] = [];
    ⵠⵠ[970][Cr.ᐃᐃⵠ] = Oa(Fd(0.9, 0, ["#618a20", "#84a74e"]));
    ⵠⵠ[970][Cr.ⵠΔⵠ] = Oa(Fd(0.9, 0, ["#1f4632", "#335d47"]));
    ⵠⵠ[114] = [];
    ⵠⵠ[114][Cr.ᐃᐃⵠ] = Oa(Wd(1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ⵠⵠ[114][Cr.ⵠΔⵠ] = Oa(Wd(1.2, _j, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ⵠⵠ[162] = [];
    ⵠⵠ[162][Cr.ᐃᐃⵠ] = Oa(bm(1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ⵠⵠ[162][Cr.ⵠΔⵠ] = Oa(bm(1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⵠⵠ[165] = [];
    ⵠⵠ[165][Cr.ᐃᐃⵠ] = Oa(im(1, Ah, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⵠⵠ[165][Cr.ⵠΔⵠ] = Oa(im(1, jq, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⵠⵠ[122] = [];
    ⵠⵠ[122][Cr.ᐃᐃⵠ] = Oa(rm(1, jq, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⵠⵠ[122][Cr.ⵠΔⵠ] = Oa(rm(1, Zb, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⵠⵠ[163] = [];
    ⵠⵠ[163][Cr.ᐃᐃⵠ] = Oa(rm(1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ⵠⵠ[163][Cr.ⵠΔⵠ] = Oa(rm(1, Cl, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ⵠⵠ[164] = [];
    ⵠⵠ[164][Cr.ᐃᐃⵠ] = Oa(dm(1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ⵠⵠ[164][Cr.ⵠΔⵠ] = Oa(dm(1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ⵠⵠ[160] = [];
    ⵠⵠ[160][Cr.ᐃᐃⵠ] = Oa(Fm(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ⵠⵠ[160][Cr.ⵠΔⵠ] = Oa(Fm(0.8, ct, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⵠⵠ[169] = [];
    ⵠⵠ[169][Cr.ᐃᐃⵠ] = Oa(_c(0.8, Dg, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ⵠⵠ[169][Cr.ⵠΔⵠ] = Oa(_c(0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ⵠⵠ[170] = [];
    ⵠⵠ[170][Cr.ᐃᐃⵠ] = Oa(Pc(0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⵠⵠ[170][Cr.ⵠΔⵠ] = Oa(Pc(0.8, on, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⵠⵠ[168] = [];
    ⵠⵠ[168][Cr.ᐃᐃⵠ] = Oa(Xm(0.8, Dg, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ⵠⵠ[168][Cr.ⵠΔⵠ] = Oa(Xm(0.8, qa, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ⵠⵠ[123] = [];
    ⵠⵠ[123][Cr.ᐃᐃⵠ] = Oa(Xm(0.8, Dg, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⵠⵠ[123][Cr.ⵠΔⵠ] = Oa(Xm(0.8, ct, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⵠⵠ[166] = [];
    ⵠⵠ[166][Cr.ᐃᐃⵠ] = Oa(hm(1.5, ma, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ⵠⵠ[166][Cr.ⵠΔⵠ] = Oa(hm(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⵠⵠ[336] = [];
    ⵠⵠ[336][Cr.ᐃᐃⵠ] = Oa(hm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠⵠ[336][Cr.ⵠΔⵠ] = Oa(hm(1, mj, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ⵠⵠ[171] = [];
    ⵠⵠ[171][Cr.ᐃᐃⵠ] = Oa(mm(1.5, pr, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ⵠⵠ[171][Cr.ⵠΔⵠ] = Oa(mm(1.5, Rr, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ⵠⵠ[373] = [];
    ⵠⵠ[373][Cr.ᐃᐃⵠ] = Oa(mm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠⵠ[373][Cr.ⵠΔⵠ] = Oa(mm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⵠⵠ[124] = [];
    ⵠⵠ[124][Cr.ᐃᐃⵠ] = Oa(mm(1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⵠⵠ[124][Cr.ⵠΔⵠ] = Oa(mm(1.5, ct, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⵠⵠ[500] = [];
    ⵠⵠ[500][Cr.ᐃᐃⵠ] = Oa(mm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠⵠ[500][Cr.ⵠΔⵠ] = Oa(mm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⵠⵠ[172] = [];
    ⵠⵠ[172][Cr.ᐃᐃⵠ] = Oa(cm(1.5, Fn, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ⵠⵠ[172][Cr.ⵠΔⵠ] = Oa(cm(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ⵠⵠ[376] = [];
    ⵠⵠ[376][Cr.ᐃᐃⵠ] = Oa(cm(1, yl, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠⵠ[376][Cr.ⵠΔⵠ] = Oa(cm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⵠⵠ[173] = [];
    ⵠⵠ[173][Cr.ᐃᐃⵠ] = Oa(fm(1.5, Rr, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⵠⵠ[173][Cr.ⵠΔⵠ] = Oa(fm(1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⵠⵠ[379] = [];
    ⵠⵠ[379][Cr.ᐃᐃⵠ] = Oa(fm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠⵠ[379][Cr.ⵠΔⵠ] = Oa(fm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⵠⵠ[167] = [];
    ⵠⵠ[167][Cr.ᐃᐃⵠ] = Oa(km(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ⵠⵠ[167][Cr.ⵠΔⵠ] = Oa(km(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ⵠⵠ[691] = [];
    ⵠⵠ[691][Cr.ᐃᐃⵠ] = Oa(Zc(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ⵠⵠ[691][Cr.ⵠΔⵠ] = Oa(Zc(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ⵠⵠ[264] = [];
    ⵠⵠ[264][Cr.ᐃᐃⵠ] = Oa(Dt(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ⵠⵠ[264][Cr.ⵠΔⵠ] = Oa(Dt(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ⵠⵠ[260] = [];
    ⵠⵠ[260][Cr.ᐃᐃⵠ] = Oa(fd(Math.PI, Ud(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ⵠⵠ[260][Cr.ⵠΔⵠ] = Oa(fd(Math.PI, Ud(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ⵠⵠ[266] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      gd(d, al, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      gd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      gd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      gd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      gd(d, sr, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      gd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      gd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      gd(d, oh, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      gd(d, Uj, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      gd(d, undefined, b[0], 4);
      return c;
    }(0.6, ["#FFFFFF"]));
    ⵠⵠ[299] = [];
    ⵠⵠ[299][Cr.ᐃᐃⵠ] = Oa(qd(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ⵠⵠ[299][Cr.ⵠΔⵠ] = Oa(qd(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ⵠⵠ[10] = [];
    ⵠⵠ[10][Cr.ᐃᐃⵠ] = Oa(Im(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ⵠⵠ[10][Cr.ⵠΔⵠ] = Oa(Im(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ⵠⵠ[11] = [];
    ⵠⵠ[11][Cr.ᐃᐃⵠ] = Oa(Em(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ⵠⵠ[11][Cr.ⵠΔⵠ] = Oa(Em(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ⵠⵠ[40] = [];
    ⵠⵠ[40][Cr.ᐃᐃⵠ] = Oa(Wm(0.63, Fn, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ⵠⵠ[40][Cr.ⵠΔⵠ] = Oa(Wm(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ⵠⵠ[41] = [];
    ⵠⵠ[41][Cr.ᐃᐃⵠ] = Oa(Vt(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ⵠⵠ[41][Cr.ⵠΔⵠ] = Oa(Vt(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ⵠⵠ[42] = [];
    ⵠⵠ[42][Cr.ᐃᐃⵠ] = Oa(Tt(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ⵠⵠ[42][Cr.ⵠΔⵠ] = Oa(Tt(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ⵠⵠ[716] = [];
    ⵠⵠ[716][Cr.ᐃᐃⵠ] = Oa(Yc(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ⵠⵠ[716][Cr.ⵠΔⵠ] = Oa(Yc(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ⵠⵠ[720] = [];
    ⵠⵠ[720][Cr.ᐃᐃⵠ] = Oa(gp(0.9, ["#e4c027"]));
    ⵠⵠ[720][Cr.ⵠΔⵠ] = Oa(gp(0.9, ["#D8E57F"]));
    ⵠⵠ[144] = [];
    ⵠⵠ[144][Cr.ᐃᐃⵠ] = Oa(op(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ⵠⵠ[144][Cr.ⵠΔⵠ] = Oa(op(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ⵠⵠ[722] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      bd(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      gd(d, b[0], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      bd(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
      d.restore();
      gd(d, b[6], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      gd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      gd(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      gd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      gd(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      bd(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      gd(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      bd(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      gd(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      bd(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      gd(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      gd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      gd(d, b[3], b[3], a * 10);
      return c;
    }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ⵠⵠ[407] = [];
    ⵠⵠ[407][Cr.ᐃᐃⵠ] = Oa(Tm(0.5, Dg, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ⵠⵠ[407][Cr.ⵠΔⵠ] = Oa(Tm(0.5, _j, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ⵠⵠ[119] = [];
    ⵠⵠ[119][Cr.ᐃᐃⵠ] = Oa(Cm(0.5, _j, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ⵠⵠ[119][Cr.ⵠΔⵠ] = Oa(Cm(0.5, jj, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ⵠⵠ[411] = Oa(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      bd(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      gd(e, c[0], c[1], 4);
      return d;
    }(0.8, 0, ["#5f6061", "#939393"]));
    ⵠⵠ[412] = Kt(1, [{
      f: Nt,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ⵠⵠ[198] = [];
    ⵠⵠ[198][Cr.ᐃᐃⵠ] = Oa(Om(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ⵠⵠ[198][Cr.ⵠΔⵠ] = Oa(Om(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ⵠⵠ[913] = [];
    ⵠⵠ[913][Cr.ᐃᐃⵠ] = Oa(Qm(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ⵠⵠ[913][Cr.ⵠΔⵠ] = Oa(Qm(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ⵠⵠ[18] = [];
    ⵠⵠ[18][Cr.ᐃᐃⵠ] = Oa(fd(3, ym(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ⵠⵠ[18][Cr.ⵠΔⵠ] = Oa(fd(3, ym(0.7, rt, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ⵠⵠ[12] = [];
    ⵠⵠ[12][Cr.ᐃᐃⵠ] = Oa(fd(3, Lm(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ⵠⵠ[12][Cr.ⵠΔⵠ] = Oa(fd(3, Lm(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ⵠⵠ[13] = [];
    ⵠⵠ[13][Cr.ᐃᐃⵠ] = Oa(fd(3, Nm(0.65, ct, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ⵠⵠ[13][Cr.ⵠΔⵠ] = Oa(fd(3, Nm(0.65, Fn, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ⵠⵠ[14] = [];
    ⵠⵠ[14][Cr.ᐃᐃⵠ] = Oa(fd(3, Rm(0.67, ct, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ⵠⵠ[14][Cr.ⵠΔⵠ] = Oa(fd(3, Rm(0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ⵠⵠ[15] = [];
    ⵠⵠ[15][Cr.ᐃᐃⵠ] = Oa(fd(3, qm(0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ⵠⵠ[15][Cr.ⵠΔⵠ] = Oa(fd(3, qm(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ⵠⵠ[33] = [];
    ⵠⵠ[33][Cr.ᐃᐃⵠ] = Oa(fd(3, Pm(0.67, Fl, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ⵠⵠ[33][Cr.ⵠΔⵠ] = Oa(fd(3, Pm(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ⵠⵠ[16] = [];
    ⵠⵠ[16][Cr.ᐃᐃⵠ] = Oa(fd(3, Gm(1, qa, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ⵠⵠ[16][Cr.ⵠΔⵠ] = Oa(fd(3, Gm(1, jj, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ⵠⵠ[35] = [];
    ⵠⵠ[35][Cr.ᐃᐃⵠ] = Oa(fd(3, Bc(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ⵠⵠ[35][Cr.ⵠΔⵠ] = Oa(fd(3, Bc(1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ⵠⵠ[55] = [];
    ⵠⵠ[55][Cr.ᐃᐃⵠ] = Oa(fd(3, Gc(0.5, pr, ["#0d1b1c", "#939393", "#5f6061"])));
    ⵠⵠ[55][Cr.ⵠΔⵠ] = Oa(fd(3, Gc(0.5, true, ["#030d14", "#485e66", "#1f343f"])));
    ⵠⵠ[45] = [];
    ⵠⵠ[45][Cr.ᐃᐃⵠ] = Oa(fd(3, Tp(1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ⵠⵠ[45][Cr.ⵠΔⵠ] = Oa(fd(3, Tp(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ⵠⵠ[36] = [];
    ⵠⵠ[36][Cr.ᐃᐃⵠ] = Oa(fd(3, Bc(1, Fn, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ⵠⵠ[36][Cr.ⵠΔⵠ] = Oa(fd(3, Bc(1, jj, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ⵠⵠ[37] = [];
    ⵠⵠ[37][Cr.ᐃᐃⵠ] = Oa(fd(3, Bc(1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ⵠⵠ[37][Cr.ⵠΔⵠ] = Oa(fd(3, Bc(1, qa, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ⵠⵠ[38] = [];
    ⵠⵠ[38][Cr.ᐃᐃⵠ] = Oa(fd(3, Bc(1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ⵠⵠ[38][Cr.ⵠΔⵠ] = Oa(fd(3, Bc(1, xr, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ⵠⵠ[148] = [];
    ⵠⵠ[148][Cr.ᐃᐃⵠ] = Oa(ic(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ⵠⵠ[148][Cr.ⵠΔⵠ] = Oa(ic(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ⵠⵠ[536] = [];
    ⵠⵠ[536].push(Oa(ic(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ⵠⵠ[536].push(Oa(ic(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ⵠⵠ[536].push(Oa(ic(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ⵠⵠ[538] = [];
    ⵠⵠ[538].push(ⵠⵠ[536][0]);
    ⵠⵠ[538].push(ⵠⵠ[536][0]);
    ⵠⵠ[538].push(ⵠⵠ[536][0]);
    ⵠⵠ[158] = [];
    ⵠⵠ[158][Cr.ᐃᐃⵠ] = Oa(nc(0.06, 0, ["#141414", "#c4a23a", "#816511"]));
    ⵠⵠ[158][Cr.ⵠΔⵠ] = Oa(nc(0.06, 0, ["#030d14", "#2b6664", "#133d3c"]));
    ⵠⵠ[535] = [];
    ⵠⵠ[535].push(Oa(nc(0.08, 0, ["#141414", "#c4a23a", "#816511"])));
    ⵠⵠ[535].push(Oa(nc(0.08, 0, ["#141414", "#e2bd4e", "#a38018"])));
    ⵠⵠ[535].push(Oa(nc(0.08, 0, ["#141414", "#b0902e", "#634d09"])));
    ⵠⵠ[149] = Kt(1.5, [{
      f: Wc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ⵠⵠ[526] = [];
    ⵠⵠ[526][Cr.ᐃᐃⵠ] = Oa(ep(0.8, 0, ["#347f93", "#54a4ba"]));
    ⵠⵠ[526][Cr.ⵠΔⵠ] = Oa(ep(0.8, 0, ["#98ede3", "#94f2e7"]));
    ⵠⵠ[527] = [];
    ⵠⵠ[527][Cr.ᐃᐃⵠ] = Oa(hp(0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ⵠⵠ[527][Cr.ⵠΔⵠ] = Oa(hp(0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ⵠⵠ[528] = [];
    ⵠⵠ[528][Cr.ᐃᐃⵠ] = Oa(jc(0.8, 0, ["#a9e4ed", "#86d4e0"]));
    ⵠⵠ[528][Cr.ⵠΔⵠ] = Oa(jc(0.8, 0, ["#83ddd4", "#485e66"]));
    ⵠⵠ[151] = [];
    ⵠⵠ[151][Cr.ᐃᐃⵠ] = Oa(Oc(0.8, rt, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ⵠⵠ[151][Cr.ⵠΔⵠ] = Oa(Oc(0.8, ma, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ⵠⵠ[1192] = [];
    ⵠⵠ[1192][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆⵠΔⵠΔᐃ;
    ⵠⵠ[1192][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⵠⵠΔΔΔⲆ;
    ⵠⵠ[1193] = [];
    ⵠⵠ[1193][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆΔΔⵠΔᐃ;
    ⵠⵠ[1193][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆⵠᐃᐃΔᐃ;
    ⵠⵠ[1194] = [];
    ⵠⵠ[1194][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃΔⵠⲆᐃᐃ;
    ⵠⵠ[1194][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⲆΔΔⵠΔⵠ;
    ⵠⵠ[152] = [];
    ⵠⵠ[152][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃΔΔᐃⲆⵠ;
    ⵠⵠ[152][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠⲆᐃᐃᐃΔ;
    ⵠⵠ[1198] = [];
    ⵠⵠ[1198][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠᐃᐃΔΔΔ;
    ⵠⵠ[1198][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⲆΔⵠΔΔΔ;
    ⵠⵠ[153] = [];
    ⵠⵠ[153][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠⵠᐃⵠⲆΔ;
    ⵠⵠ[153][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⲆⵠⲆⵠⲆΔ;
    ⵠⵠ[1202] = [];
    ⵠⵠ[1202][Cr.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠᐃᐃⲆΔⲆ;
    ⵠⵠ[1202][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠΔΔⵠⵠⵠ;
    ⵠⵠ[154] = [];
    ⵠⵠ[154][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⵠᐃⵠᐃⵠⲆ;
    ⵠⵠ[154][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠⵠⵠᐃᐃΔΔ;
    ⵠⵠ[1206] = [];
    ⵠⵠ[1206][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔΔΔⲆⵠΔⵠ;
    ⵠⵠ[1206][Cr.ⵠΔⵠ] = ᐃᐃ.ᐃⵠⵠⲆⲆⵠᐃ;
    ⵠⵠ[155] = [];
    ⵠⵠ[155][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⲆᐃⲆΔⵠⲆ;
    ⵠⵠ[155][Cr.ⵠΔⵠ] = ᐃᐃ.ΔΔⲆⵠᐃΔⲆ;
    ⵠⵠ[1210] = [];
    ⵠⵠ[1210][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆΔⵠΔᐃⵠ;
    ⵠⵠ[1210][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠΔΔⲆᐃⲆᐃ;
    ⵠⵠ[156] = [];
    ⵠⵠ[156][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃΔᐃᐃΔᐃ;
    ⵠⵠ[156][Cr.ⵠΔⵠ] = ᐃᐃ.ΔΔⵠᐃⲆⲆΔ;
    ⵠⵠ[1214] = [];
    ⵠⵠ[1214][Cr.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆⲆⵠⲆⲆΔ;
    ⵠⵠ[1214][Cr.ⵠΔⵠ] = ᐃᐃ.ⵠᐃᐃΔᐃⵠⵠ;
    ⵠⵠ[157] = [];
    ⵠⵠ[157][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔⲆΔᐃⵠΔᐃ;
    ⵠⵠ[157][Cr.ⵠΔⵠ] = ᐃᐃ.ΔΔⲆⵠⲆⵠⲆ;
    ⵠⵠ[245] = [];
    ⵠⵠ[245][Cr.ᐃᐃⵠ] = ᐃᐃ.ΔΔⲆⲆⵠⲆⲆ;
    ⵠⵠ[245][Cr.ⵠΔⵠ] = ᐃᐃ.ΔⲆⲆᐃΔⲆⲆ;
    ⵠⵠ[246] = ᐃᐃ.ΔⲆᐃⲆᐃⲆᐃ;
    ⵠⵠ[159] = [];
    ⵠⵠ[159][Cr.ᐃᐃⵠ] = Oa(uc(0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ⵠⵠ[159][Cr.ⵠΔⵠ] = Oa(uc(0.75, _j, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ⵠⵠ[558] = Oa(dc(0.3, ["#092813", "#1f773d"], 0));
    ⵠⵠ[559] = Oa(dc(0.3, ["#092813", "#1f773d"], 1));
    ⵠⵠ[885] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      gd(d, b[0]);
      d.translate(0, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      gd(d, b[1]);
      return c;
    }(0.6, ["#092813", "#1f773d"]));
    ⵠⵠ[556] = [];
    ⵠⵠ[556].push(Oa(Ec(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ⵠⵠ[556].push(Oa(Ec(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    ⵠⵠ[556].push(Oa(Ec(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ⵠⵠ[560] = [];
    var b = Oa(Ec(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ⵠⵠ[560].push(b);
    ⵠⵠ[560].push(b);
    ⵠⵠ[560].push(b);
    ⵠⵠ[557] = [];
    ⵠⵠ[557].push(Oa(Ec(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ⵠⵠ[557].push(Oa(Ec(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    ⵠⵠ[557].push(Oa(Ec(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ⵠⵠ[681] = Oa(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var a = f / 2;
      var i = g / 2;
      d.width = f;
      d.height = g;
      e.translate(a, i);
      e.save();
      for (var j = 0; j < 10; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, 0);
        pd(e, 3, b * 18, b * 4);
        gd(e, c[0]);
        e.restore();
      }
      e.restore();
      vd(e, 0, 0, b * 40);
      gd(e, undefined, c[0], b * 6);
      vd(e, 0, 0, b * 20);
      gd(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ⵠⵠ[794] = Oa(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var a = f / 2;
      var h = g / 2;
      d.width = f;
      d.height = g;
      vd(e, a, h, b * 40);
      gd(e, oh, c[0], b * 7);
      vd(e, a, h, b * 30);
      gd(e, _h, c[0], b * 7);
      vd(e, a, h, b * 20);
      gd(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ⵠⵠ[562] = Oa(dc(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ⵠⵠ[667] = Oa(fd(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      bd(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      gd(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      gd(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      gd(d, b[0], b[0], a * 15);
      return c;
    }(0.2, ["#FFFFFF"])));
    ⵠⵠ[43] = [];
    ⵠⵠ[43][Cr.ᐃᐃⵠ] = Oa(Qc(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ⵠⵠ[43][Cr.ⵠΔⵠ] = Oa(Qc(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ⵠⵠ[561] = [];
    ⵠⵠ[561].push(Oa(Ec(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ⵠⵠ[561].push(Oa(Ec(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    ⵠⵠ[561].push(Oa(Ec(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ⵠⵠ[83] = [];
    ⵠⵠ[83][Cr.ᐃᐃⵠ] = Oa(Lc(0.37, 0, ["#2a2938", "#242330", "#313041"]));
    ⵠⵠ[83][Cr.ⵠΔⵠ] = Oa(Lc(0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
    ⵠⵠ[85] = [];
    ⵠⵠ[85][Cr.ᐃᐃⵠ] = Oa(Nc(0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ⵠⵠ[85][Cr.ⵠΔⵠ] = Oa(Nc(0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ⵠⵠ[86] = [];
    ⵠⵠ[86][Cr.ᐃᐃⵠ] = Oa(Pp(0.55, on, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ⵠⵠ[86][Cr.ⵠΔⵠ] = Oa(Pp(0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ⵠⵠ[84] = [];
    ⵠⵠ[84][Cr.ᐃᐃⵠ] = Oa(Pp(0.55, pr, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ⵠⵠ[84][Cr.ⵠΔⵠ] = Oa(Pp(0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ⵠⵠ[77] = [];
    ⵠⵠ[77][Cr.ᐃᐃⵠ] = Oa(up(0.2, Zb, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ⵠⵠ[77][Cr.ⵠΔⵠ] = Oa(up(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ⵠⵠ[78] = [];
    ⵠⵠ[78][Cr.ᐃᐃⵠ] = Oa(up(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ⵠⵠ[78][Cr.ⵠΔⵠ] = Oa(up(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ⵠⵠ[79] = [];
    ⵠⵠ[79][Cr.ᐃᐃⵠ] = Oa(up(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ⵠⵠ[79][Cr.ⵠΔⵠ] = Oa(up(0.2, Cl, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ⵠⵠ[61] = [];
    ⵠⵠ[61][Cr.ᐃᐃⵠ] = Oa(wm(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ⵠⵠ[61][Cr.ⵠΔⵠ] = Oa(wm(0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ⵠⵠ[59] = [];
    ⵠⵠ[59][Cr.ᐃᐃⵠ] = Oa(bc(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ⵠⵠ[59][Cr.ⵠΔⵠ] = Oa(bc(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ⵠⵠ[62] = [];
    ⵠⵠ[62][Cr.ᐃᐃⵠ] = Oa(fd(3, mp(0.9, ma, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ⵠⵠ[62][Cr.ⵠΔⵠ] = Oa(fd(3, mp(0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ⵠⵠ[750] = [];
    ⵠⵠ[750][Cr.ᐃᐃⵠ] = Oa(fd(3, mp(1, true, [undefined, jt, undefined, "#c8efef", "#c8efef"])));
    ⵠⵠ[750][Cr.ⵠΔⵠ] = Oa(fd(3, mp(1, true, [Wa, undefined, un, "#87d2e6", "#87d2e6"])));
    ⵠⵠ[755] = [];
    ⵠⵠ[755].push(Oa(wp(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ⵠⵠ[755].push(Oa(wp(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    ⵠⵠ[755].push(Oa(wp(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ⵠⵠ[795] = [];
    ⵠⵠ[795].push(Oa(Cp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ⵠⵠ[795].push(Oa(Cp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ⵠⵠ[795].push(Oa(Cp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ⵠⵠ[782] = [];
    ⵠⵠ[782].push(Oa(_t(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    ⵠⵠ[782].push(Oa(_t(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    ⵠⵠ[782].push(Oa(_t(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ⵠⵠ[783] = [];
    ⵠⵠ[783].push(Oa(_t(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    ⵠⵠ[783].push(Oa(_t(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    ⵠⵠ[783].push(Oa(_t(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    ⵠⵠ[46] = [];
    ⵠⵠ[46][Cr.ᐃᐃⵠ] = Oa(fd(3, lp(0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ⵠⵠ[46][Cr.ⵠΔⵠ] = Oa(fd(3, lp(0.7, rt, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ⵠⵠ[50] = [];
    ⵠⵠ[50][Cr.ᐃᐃⵠ] = Oa(fd(3, lp(0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ⵠⵠ[50][Cr.ⵠΔⵠ] = Oa(fd(3, lp(0.7, pr, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ⵠⵠ[51] = [];
    ⵠⵠ[51][Cr.ᐃᐃⵠ] = Oa(fd(3, lp(0.7, ss, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ⵠⵠ[51][Cr.ⵠΔⵠ] = Oa(fd(3, lp(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ⵠⵠ[52] = [];
    ⵠⵠ[52][Cr.ᐃᐃⵠ] = Oa(fd(3, lp(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ⵠⵠ[52][Cr.ⵠΔⵠ] = Oa(fd(3, lp(0.7, ct, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ⵠⵠ[592] = [];
    ⵠⵠ[592].push(Oa(qc(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ⵠⵠ[592].push(Oa(qc(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ⵠⵠ[592].push(Oa(qc(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ⵠⵠ[326] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      gd(d, b[0], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      gd(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      gd(d, b[0], b[0], a * 2);
      return c;
    }(1.1, ["#BB0000"]));
    ⵠⵠ[333] = Oa(fd(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      vd(d, a * 213.5, a * 256.75, a * 75);
      gd(d, b);
      vd(d, a * 213.5, a * 175.75, a * 25);
      gd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(0.9, "#BB0000")));
    ⵠⵠ[23] = [];
    ⵠⵠ[23][Cr.ᐃᐃⵠ] = Oa(Km(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ⵠⵠ[23][Cr.ⵠΔⵠ] = Oa(Km(0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ⵠⵠ[58] = [];
    ⵠⵠ[58][Cr.ᐃᐃⵠ] = Oa(Um(0.55, xr, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ⵠⵠ[58][Cr.ⵠΔⵠ] = Oa(Um(0.55, Cl, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ⵠⵠ[25] = [];
    ⵠⵠ[25][Cr.ᐃᐃⵠ] = Oa(ec(0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ⵠⵠ[25][Cr.ⵠΔⵠ] = Oa(ec(0.6, ct, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ⵠⵠ[26] = [];
    ⵠⵠ[26][Cr.ᐃᐃⵠ] = Oa(Ym(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
    ⵠⵠ[26][Cr.ⵠΔⵠ] = Oa(Ym(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
    ⵠⵠ[27] = [];
    ⵠⵠ[27][Cr.ᐃᐃⵠ] = Oa(Zm(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ⵠⵠ[27][Cr.ⵠΔⵠ] = Oa(Zm(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ⵠⵠ[413] = [];
    ⵠⵠ[413][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[413][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[413][Cr.ᐃᐃⵠ].push(Oa(wc(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ⵠⵠ[413][Cr.ᐃᐃⵠ].push(Oa(Tc(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ⵠⵠ[413][Cr.ᐃᐃⵠ].push(Oa(gc(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ⵠⵠ[413][Cr.ⵠΔⵠ].push(Oa(wc(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ⵠⵠ[413][Cr.ⵠΔⵠ].push(Oa(Tc(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ⵠⵠ[413][Cr.ⵠΔⵠ].push(Oa(gc(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ⵠⵠ[449] = [];
    ⵠⵠ[449][Cr.ᐃᐃⵠ] = Oa(rc(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ⵠⵠ[449][Cr.ⵠΔⵠ] = Oa(rc(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ⵠⵠ[451] = [];
    ⵠⵠ[451][Cr.ᐃᐃⵠ] = Oa(fc(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ⵠⵠ[451][Cr.ⵠΔⵠ] = Oa(fc(1, ["#050505", "#327570", "#021724", "#200333"]));
    ⵠⵠ[452] = [];
    ⵠⵠ[452][Cr.ᐃᐃⵠ] = Oa(Jc(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ⵠⵠ[452][Cr.ⵠΔⵠ] = Oa(Jc(1, ["#050505", "#327570", "#021724", "#200333"]));
    ⵠⵠ[243] = [];
    ⵠⵠ[243][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[243][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[243][Cr.ᐃᐃⵠ] = [ᐃᐃ.ΔᐃⲆⵠⵠⵠΔ, ᐃᐃ.ΔⲆⲆⵠᐃⲆᐃ, ᐃᐃ.ΔΔΔⵠΔΔᐃ, ᐃᐃ.ΔΔΔᐃΔΔΔ, ᐃᐃ.ⵠⵠⲆΔⲆⲆΔ, ᐃᐃ.ΔⲆΔⵠᐃⵠΔ, ᐃᐃ.Ⲇⵠⵠⵠⵠⵠᐃ, ᐃᐃ.ⲆⲆⵠᐃᐃᐃⵠ, ᐃᐃ.ΔΔⲆᐃⲆᐃⲆ, ᐃᐃ.ᐃⵠΔⲆΔⲆⵠ, ᐃᐃ.ⲆᐃᐃⲆᐃⵠⲆ, ᐃᐃ.ⵠΔΔᐃⵠⵠⲆ, ᐃᐃ.ΔΔⲆᐃⵠΔΔ, ᐃᐃ.ΔΔᐃⵠΔΔᐃ, ᐃᐃ.ᐃⲆⲆⲆⲆⵠΔ, ᐃᐃ.ΔⵠⲆΔⵠΔΔ, ᐃᐃ.ΔⲆⵠΔⲆⵠᐃ, ᐃᐃ.ⵠⲆⵠⵠⲆΔΔ, ᐃᐃ.ⲆⵠᐃⵠΔᐃΔ, ᐃᐃ.ᐃⵠⲆΔᐃᐃⲆ, ᐃᐃ.ΔⲆⵠⲆⵠⲆⵠ, ᐃᐃ.ⵠΔⵠⲆⲆΔⲆ, ᐃᐃ.ⵠⵠⲆΔⵠⵠⵠ, ᐃᐃ.ᐃΔⲆⵠⲆⲆⵠ, ᐃᐃ.ⵠΔⲆᐃᐃΔᐃ, ᐃᐃ.ᐃΔΔᐃᐃⲆΔ, ᐃᐃ.ⵠⵠΔΔⵠᐃΔ, ᐃᐃ.ΔⵠΔⲆⵠⲆⵠ, ᐃᐃ.ΔΔⵠⵠⲆᐃⲆ, ᐃᐃ.ΔⵠΔΔΔᐃⵠ, ᐃᐃ.ⵠⲆⲆⲆᐃⲆⵠ, ᐃᐃ.ΔΔⵠᐃⵠⵠⵠ, ᐃᐃ.ΔⵠᐃⵠⲆⲆᐃ, ᐃᐃ.ⲆⲆᐃᐃᐃΔⲆ, ᐃᐃ.ⲆⵠᐃΔⲆⲆΔ, ᐃᐃ.ᐃᐃᐃᐃᐃᐃᐃ, ᐃᐃ.ΔΔΔᐃⵠᐃᐃ, ᐃᐃ.ⵠⵠⵠⲆΔᐃⵠ, ᐃᐃ.ᐃΔᐃⲆᐃᐃⵠ, ᐃᐃ.ᐃⵠⲆΔⵠⲆΔ, ᐃᐃ.ᐃⲆΔΔⲆⲆⲆ, ᐃᐃ.ⵠⵠΔⲆᐃΔⲆ, ᐃᐃ.ⵠΔΔΔⲆᐃᐃ, ᐃᐃ.ᐃⵠⵠΔΔⵠⲆ, ᐃᐃ.ⲆᐃᐃⵠΔⲆⲆ, ᐃᐃ.ⵠᐃⵠᐃΔΔⵠ, ᐃᐃ.ᐃΔᐃⵠⲆᐃΔ, ᐃᐃ.ᐃᐃΔⲆⵠⲆΔ, ᐃᐃ.ⲆΔΔⵠⲆᐃⲆ, ᐃᐃ.ⲆⲆΔⲆⲆΔⲆ, ᐃᐃ.ΔⵠᐃⵠⵠΔᐃ, ᐃᐃ.ᐃⵠⵠᐃᐃⵠΔ, ᐃᐃ.ⵠΔΔⵠⲆΔⵠ, ᐃᐃ.ⵠᐃⵠⵠΔᐃᐃ, ᐃᐃ.ᐃΔⲆᐃᐃⵠⵠ, ᐃᐃ.ΔⵠΔΔⲆⵠΔ];
    ⵠⵠ[243][Cr.ⵠΔⵠ] = [ᐃᐃ.ΔΔⲆᐃⲆᐃΔ, ᐃᐃ.ΔΔᐃⲆᐃᐃⵠ, ᐃᐃ.ΔΔᐃΔΔᐃᐃ, ᐃᐃ.ΔⲆᐃⵠⲆᐃᐃ, ᐃᐃ.ᐃΔΔᐃⵠⵠⲆ, ᐃᐃ.ΔⲆΔᐃΔᐃΔ, ᐃᐃ.ⵠⲆΔΔⵠⵠΔ, ᐃᐃ.ⵠⲆᐃᐃⵠⵠΔ, ᐃᐃ.ⲆⵠⵠΔⲆᐃⵠ, ᐃᐃ.ΔⵠⵠΔΔⵠⵠ, ᐃᐃ.ΔᐃΔⵠⵠⵠⵠ, ᐃᐃ.ⲆΔⲆⵠΔⵠⵠ, ᐃᐃ.ⵠⲆΔⵠΔⵠⲆ, ᐃᐃ.ᐃᐃⲆⲆᐃᐃΔ, ᐃᐃ.ⲆⲆⲆⵠⲆᐃⲆ, ᐃᐃ.ᐃⲆᐃΔⵠⲆΔ, ᐃᐃ.ⲆᐃⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠΔⵠΔΔΔⲆ, ᐃᐃ.ΔⲆⲆΔⵠⵠΔ, ᐃᐃ.ᐃⲆᐃᐃΔⵠᐃ, ᐃᐃ.ⲆⵠΔⵠⵠⵠⲆ, ᐃᐃ.ΔⵠΔᐃⵠᐃⲆ, ᐃᐃ.ΔⵠⵠⵠⲆⵠⲆ, ᐃᐃ.ΔΔⵠⲆᐃΔⵠ, ᐃᐃ.ⵠⲆⵠⵠⲆⲆΔ, ᐃᐃ.ⵠⵠΔᐃⵠⲆᐃ, ᐃᐃ.ⵠⲆⲆⵠᐃᐃΔ, ᐃᐃ.ΔⲆᐃΔᐃᐃⲆ, ᐃᐃ.ΔⵠⵠⵠⲆⵠⵠ, ᐃᐃ.ᐃᐃΔΔⲆΔⵠ, ᐃᐃ.ᐃΔⲆⵠΔᐃΔ, ᐃᐃ.ⲆⲆΔⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃΔⵠⲆᐃ, ᐃᐃ.ⵠⲆⵠᐃᐃⲆⲆ, ᐃᐃ.ⵠΔⲆⲆⲆⵠⵠ, ᐃᐃ.ΔⲆᐃᐃⵠⵠⲆ, ᐃᐃ.ⵠᐃⲆᐃⲆⵠΔ, ᐃᐃ.ⲆᐃⵠΔᐃⲆⵠ, ᐃᐃ.ⵠⲆⵠᐃⵠᐃᐃ, ᐃᐃ.ΔⵠⵠⵠᐃᐃⲆ, ᐃᐃ.ⲆΔΔΔᐃⵠⲆ, ᐃᐃ.ⲆⲆᐃⵠᐃⲆⲆ, ᐃᐃ.ᐃⵠΔᐃΔᐃⲆ, ᐃᐃ.ᐃᐃΔⵠᐃΔΔ, ᐃᐃ.ΔᐃⵠⲆΔΔΔ, ᐃᐃ.ⵠⲆⲆᐃᐃⲆⲆ, ᐃᐃ.ⵠⲆⵠⵠⲆᐃᐃ, ᐃᐃ.ⵠⵠᐃⲆΔⲆᐃ, ᐃᐃ.ⲆΔΔᐃᐃⵠᐃ, ᐃᐃ.ΔⵠᐃⵠⲆⵠⲆ, ᐃᐃ.ΔΔΔⲆⵠⲆΔ, ᐃᐃ.ᐃΔⵠⲆᐃΔⵠ, ᐃᐃ.ᐃⲆΔᐃΔⲆⲆ, ᐃᐃ.ᐃⵠᐃⲆᐃⲆᐃ, ᐃᐃ.ⲆⵠΔΔⵠᐃⲆ, ᐃᐃ.ⲆᐃᐃᐃⲆᐃᐃ];
    ⵠⵠ[676] = [];
    ⵠⵠ[676][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[676][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[676][Cr.ᐃᐃⵠ].push(Oa(vu(1.1, Sl, ["#252B28", "#747471", "#83827e"], 0)));
    ⵠⵠ[676][Cr.ᐃᐃⵠ].push(Oa(vu(0.9, Uq, ["#252B28", "#747471", "#83827e"], 1)));
    ⵠⵠ[676][Cr.ᐃᐃⵠ].push(Oa(vu(1, ja, ["#252B28", "#747471", "#83827e"], 2)));
    ⵠⵠ[676][Cr.ᐃᐃⵠ].push(Oa(vu(0.9, Vh, ["#252B28", "#747471", "#83827e"], 2)));
    ⵠⵠ[676][Cr.ⵠΔⵠ].push(Oa(vu(1.1, yl, ["#030d14", "#123335", "#183f3f"], 0)));
    ⵠⵠ[676][Cr.ⵠΔⵠ].push(Oa(vu(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
    ⵠⵠ[676][Cr.ⵠΔⵠ].push(Oa(vu(1, No, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠⵠ[676][Cr.ⵠΔⵠ].push(Oa(vu(0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠⵠ[679] = [];
    ⵠⵠ[679][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[679][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[679][Cr.ᐃᐃⵠ].push(Oa(vu(1.1, _j, ["#252B28", "#58645F", "#75827D"], 2)));
    ⵠⵠ[679][Cr.ᐃᐃⵠ].push(Oa(vu(0.9, qa, ["#252B28", "#58645F", "#75827D"], 2)));
    ⵠⵠ[679][Cr.ᐃᐃⵠ].push(Oa(vu(1, Fn, ["#252B28", "#58645F", "#75827D"], 2)));
    ⵠⵠ[679][Cr.ᐃᐃⵠ].push(Oa(vu(0.9, rt, ["#252B28", "#58645F", "#75827D"], 2)));
    ⵠⵠ[679][Cr.ⵠΔⵠ].push(Oa(vu(1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠⵠ[679][Cr.ⵠΔⵠ].push(Oa(vu(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠⵠ[679][Cr.ⵠΔⵠ].push(Oa(vu(1, ss, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠⵠ[679][Cr.ⵠΔⵠ].push(Oa(vu(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠⵠ[415] = [];
    ⵠⵠ[415][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[415][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[415][Cr.ᐃᐃⵠ].push(Oa(yu(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠⵠ[415][Cr.ᐃᐃⵠ].push(Oa(yu(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠⵠ[415][Cr.ᐃᐃⵠ].push(Oa(yu(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠⵠ[415][Cr.ⵠΔⵠ].push(Oa(yu(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⵠⵠ[415][Cr.ⵠΔⵠ].push(Oa(yu(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⵠⵠ[415][Cr.ⵠΔⵠ].push(Oa(yu(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⵠⵠ[416] = [];
    ⵠⵠ[416][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[416][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[416][Cr.ᐃᐃⵠ].push(Oa(mu(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⵠⵠ[416][Cr.ᐃᐃⵠ].push(Oa(mu(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⵠⵠ[416][Cr.ᐃᐃⵠ].push(Oa(mu(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⵠⵠ[416][Cr.ⵠΔⵠ].push(Oa(mu(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⵠⵠ[416][Cr.ⵠΔⵠ].push(Oa(mu(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⵠⵠ[416][Cr.ⵠΔⵠ].push(Oa(mu(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⵠⵠ[121] = [];
    ⵠⵠ[121][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[121][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[121][Cr.ᐃᐃⵠ].push(Oa(pc(1.7, ct, ["#1d051e", "#c27add", "#cd98e5"])));
    ⵠⵠ[121][Cr.ᐃᐃⵠ].push(Oa(pc(1.5, on, ["#1d051e", "#c27add", "#cd98e5"])));
    ⵠⵠ[121][Cr.ᐃᐃⵠ].push(Oa(pc(1.3, Rr, ["#1d051e", "#c27add", "#cd98e5"])));
    ⵠⵠ[121][Cr.ⵠΔⵠ].push(Oa(pc(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⵠⵠ[121][Cr.ⵠΔⵠ].push(Oa(pc(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⵠⵠ[121][Cr.ⵠΔⵠ].push(Oa(pc(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⵠⵠ[678] = [];
    ⵠⵠ[678][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[678][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[678][Cr.ᐃᐃⵠ].push(Oa(xc(1, ["#2d53c4"])));
    ⵠⵠ[678][Cr.ⵠΔⵠ].push(Oa(xc(1, ["#2d53c4"])));
    ⵠⵠ[696] = [];
    ⵠⵠ[696][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[696][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[696][Cr.ᐃᐃⵠ].push(Oa(xc(1, ["#c4912d"])));
    ⵠⵠ[696][Cr.ⵠΔⵠ].push(Oa(xc(1, ["#c4912d"])));
    ⵠⵠ[680] = [];
    ⵠⵠ[680][Cr.ᐃᐃⵠ] = Oa(mc(1, ["#414040"]));
    ⵠⵠ[680][Cr.ⵠΔⵠ] = Oa(mc(1, ["#153635"]));
    ⵠⵠ[508] = [];
    ⵠⵠ[508][Cr.ᐃᐃⵠ] = Oa(hm(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠⵠ[508][Cr.ⵠΔⵠ] = Oa(hm(1, Sr, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠⵠ[509] = [];
    ⵠⵠ[509][Cr.ᐃᐃⵠ] = Oa(mm(1, pk, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠⵠ[509][Cr.ⵠΔⵠ] = Oa(mm(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠⵠ[512] = [];
    ⵠⵠ[512][Cr.ᐃᐃⵠ] = Oa(mm(1, Uq, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠⵠ[512][Cr.ⵠΔⵠ] = Oa(mm(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠⵠ[511] = [];
    ⵠⵠ[511][Cr.ᐃᐃⵠ] = Oa(fm(1, Vh, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠⵠ[511][Cr.ⵠΔⵠ] = Oa(fm(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠⵠ[510] = [];
    ⵠⵠ[510][Cr.ᐃᐃⵠ] = Oa(cm(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠⵠ[510][Cr.ⵠΔⵠ] = Oa(cm(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠⵠ[419] = [];
    ⵠⵠ[419][Cr.ᐃᐃⵠ] = Oa(ac(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ⵠⵠ[419][Cr.ⵠΔⵠ] = Oa(ac(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ⵠⵠ[445] = [];
    ⵠⵠ[445][Cr.ᐃᐃⵠ] = Oa(kc(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ⵠⵠ[445][Cr.ⵠΔⵠ] = Oa(kc(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ⵠⵠ[259] = [];
    ⵠⵠ[818] = [];
    ⵠⵠ[516] = [];
    ⵠⵠ[819] = [];
    for (a = 0; a < 2; a++) {
      ⵠⵠ[259][a] = document.createElement("canvas");
      ⵠⵠ[259][a].width = 193;
      ⵠⵠ[259][a].height = 193;
      ⵠⵠ[818][a] = ⵠⵠ[259][a].getContext("2d");
      ⵠⵠ[516][a] = document.createElement("canvas");
      ⵠⵠ[516][a].width = 600;
      ⵠⵠ[516][a].height = 600;
      ⵠⵠ[819][a] = ⵠⵠ[516][a].getContext("2d");
    }
    ⵠⵠ[475] = [];
    ⵠⵠ[475][Cr.ᐃᐃⵠ] = Oa(mc(1, ["#c8e0de"]));
    ⵠⵠ[475][Cr.ⵠΔⵠ] = Oa(mc(1, ["#147071"]));
    ⵠⵠ[476] = [];
    ⵠⵠ[476][Cr.ᐃᐃⵠ] = Oa(mc(1, ["#231912"]));
    ⵠⵠ[476][Cr.ⵠΔⵠ] = Oa(mc(1, ["#021719"]));
    ⵠⵠ[697] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      bd(d, a * -7, a * -20, a * 14, a * 37, a * 20);
      d.restore();
      gd(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      bd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      gd(d, b[0], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      bd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      gd(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      bd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
      d.restore();
      gd(d, b[0]);
      return c;
    }(0.5, ["#BB0000"]));
    ⵠⵠ[461] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
      d.closePath();
      gd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      gd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      gd(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ⵠⵠ[462] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      gd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      gd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      gd(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ⵠⵠ[463] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      gd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      gd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      gd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      gd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      gd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      gd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      gd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      gd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      gd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      gd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      gd(d, b[0]);
      return c;
    }(1, ["#BB0000"]));
    ⵠⵠ[466] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      gd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      gd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      gd(d, b);
      return c;
    }(0.8, "#BB0000"));
    ⵠⵠ[467] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      gd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      gd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      gd(d, b);
      return c;
    }(0.8, "#BB0000"));
    ⵠⵠ[322] = Oa(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var a = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      gd(e, c, c, a);
      return d;
    }(0.9, "#BB0000"));
    ⵠⵠ[279] = Oa(yd(0.6, "#BB0000"));
    ⵠⵠ[280] = Oa(yd(0.6, "#1CE7E0"));
    ⵠⵠ[281] = Oa(yd(0.6, "#DBE71C"));
    ⵠⵠ[308] = Oa(yd(0.6, "#00BB00"));
    ⵠⵠ[602] = [];
    ⵠⵠ[602][Cr.ᐃᐃⵠ] = Oa(mc(1, ["#dac291"]));
    ⵠⵠ[602][Cr.ⵠΔⵠ] = Oa(mc(1, ["#0D423D"]));
    ⵠⵠ[698] = [];
    ⵠⵠ[698][Cr.ᐃᐃⵠ] = Oa(mc(1, ["#dac291"]));
    ⵠⵠ[698][Cr.ⵠΔⵠ] = Oa(mc(1, ["#0D423D"]));
    ⵠⵠ[788] = [];
    ⵠⵠ[788][Cr.ᐃᐃⵠ] = Oa(fp(0.3, rt, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ⵠⵠ[788][Cr.ⵠΔⵠ] = Oa(fp(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ⵠⵠ[182] = [];
    ⵠⵠ[182][Cr.ᐃᐃⵠ] = Oa(fp(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ⵠⵠ[182][Cr.ⵠΔⵠ] = Oa(fp(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ⵠⵠ[127] = [Oa(np(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ⵠⵠ[128] = [Oa(np(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ⵠⵠ[603] = [];
    ⵠⵠ[603][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[603][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[603][Cr.ᐃᐃⵠ].push(Oa(hc(1, ["#0B6A84"])));
    ⵠⵠ[603][Cr.ᐃᐃⵠ].push(Oa(Dc(1, ["#0B6A84"])));
    ⵠⵠ[603][Cr.ᐃᐃⵠ].push(Oa(oc(1, ["#0B6A84"])));
    ⵠⵠ[603][Cr.ᐃᐃⵠ].push(Oa(vc(1, ["#0B6A84"])));
    ⵠⵠ[603][Cr.ᐃᐃⵠ].push(Oa(tc(1, ["#0B6A84"])));
    ⵠⵠ[603][Cr.ᐃᐃⵠ].push(Oa(Sc(1, ["#0B6A84"])));
    ⵠⵠ[603][Cr.ᐃᐃⵠ].push(Oa(Vm(1, ["#0B6A84"])));
    ⵠⵠ[603][Cr.ⵠΔⵠ].push(Oa(hc(1, ["#09373F"])));
    ⵠⵠ[603][Cr.ⵠΔⵠ].push(Oa(Dc(1, ["#09373F"])));
    ⵠⵠ[603][Cr.ⵠΔⵠ].push(Oa(oc(1, ["#09373F"])));
    ⵠⵠ[603][Cr.ⵠΔⵠ].push(Oa(vc(1, ["#09373F"])));
    ⵠⵠ[603][Cr.ⵠΔⵠ].push(Oa(tc(1, ["#09373F"])));
    ⵠⵠ[603][Cr.ⵠΔⵠ].push(Oa(Sc(1, ["#09373F"])));
    ⵠⵠ[603][Cr.ⵠΔⵠ].push(Oa(Vm(1, ["#09373F"])));
    ⵠⵠ[692] = [];
    ⵠⵠ[692][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[692][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[692][Cr.ᐃᐃⵠ].push(Oa($m(1.7, ["#FBEFBC"], 0)));
    ⵠⵠ[692][Cr.ᐃᐃⵠ].push(Oa($m(1.9, ["#FBEFBC"], 1)));
    ⵠⵠ[692][Cr.ᐃᐃⵠ].push(Oa($m(1.7, ["#FBEFBC"], 2)));
    ⵠⵠ[692][Cr.ⵠΔⵠ].push(Oa($m(1.7, ["#0F4C48"], 0)));
    ⵠⵠ[692][Cr.ⵠΔⵠ].push(Oa($m(1.9, ["#0F4C48"], 1)));
    ⵠⵠ[692][Cr.ⵠΔⵠ].push(Oa($m(1.7, ["#0F4C48"], 2)));
    ⵠⵠ[694] = [];
    ⵠⵠ[694][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[694][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[694][Cr.ᐃᐃⵠ].push(Oa($m(1.8, ["#A9D6D3"], 0)));
    ⵠⵠ[694][Cr.ᐃᐃⵠ].push(Oa($m(2, ["#A9D6D3"], 1)));
    ⵠⵠ[694][Cr.ᐃᐃⵠ].push(Oa($m(1.8, ["#A9D6D3"], 2)));
    ⵠⵠ[694][Cr.ⵠΔⵠ].push(Oa($m(1.8, ["#115E60"], 0)));
    ⵠⵠ[694][Cr.ⵠΔⵠ].push(Oa($m(2, ["#115E60"], 1)));
    ⵠⵠ[694][Cr.ⵠΔⵠ].push(Oa($m(1.8, ["#115E60"], 2)));
    ⵠⵠ[695] = [];
    ⵠⵠ[695][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[695][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[695][Cr.ᐃᐃⵠ].push(Oa($m(1.9, ["#2A8B9B"], 0)));
    ⵠⵠ[695][Cr.ᐃᐃⵠ].push(Oa($m(2.1, ["#2A8B9B"], 1)));
    ⵠⵠ[695][Cr.ᐃᐃⵠ].push(Oa($m(1.9, ["#2A8B9B"], 2)));
    ⵠⵠ[695][Cr.ⵠΔⵠ].push(Oa($m(1.9, ["#0F464C"], 0)));
    ⵠⵠ[695][Cr.ⵠΔⵠ].push(Oa($m(2.1, ["#0F464C"], 1)));
    ⵠⵠ[695][Cr.ⵠΔⵠ].push(Oa($m(1.9, ["#0F464C"], 2)));
    ⵠⵠ[693] = [];
    ⵠⵠ[693][Cr.ᐃᐃⵠ] = [];
    ⵠⵠ[693][Cr.ⵠΔⵠ] = [];
    ⵠⵠ[693][Cr.ᐃᐃⵠ].push(Oa(em(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⵠⵠ[693][Cr.ᐃᐃⵠ].push(Oa(em(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⵠⵠ[693][Cr.ᐃᐃⵠ].push(Oa(em(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⵠⵠ[693][Cr.ⵠΔⵠ].push(Oa(em(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⵠⵠ[693][Cr.ⵠΔⵠ].push(Oa(em(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⵠⵠ[693][Cr.ⵠΔⵠ].push(Oa(em(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⵠⵠ[637] = [];
    ⵠⵠ[637][Cr.ᐃᐃⵠ] = Oa(ip(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ⵠⵠ[637][Cr.ⵠΔⵠ] = Oa(ip(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ⵠⵠ[687] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      gd(d, b[0], b[0], a * 12);
      return c;
    }(0.8, ["#B6222A"]));
    ⵠⵠ[673] = [];
    ⵠⵠ[673][Cr.ᐃᐃⵠ] = Oa(rp(0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ⵠⵠ[673][Cr.ⵠΔⵠ] = Oa(rp(0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ⵠⵠ[688] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      gd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      gd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      gd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      gd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      gd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      gd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      gd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      gd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      gd(d, b[0], b[0], a * 10);
      return c;
    }(0.8, ["#B6222A"]));
    ⵠⵠ[902] = [];
    ⵠⵠ[902][Cr.ᐃᐃⵠ] = Oa($d(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ⵠⵠ[902][Cr.ⵠΔⵠ] = Oa($d(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ⵠⵠ[903] = [];
    ⵠⵠ[903][Cr.ᐃᐃⵠ] = Oa($d(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ⵠⵠ[903][Cr.ⵠΔⵠ] = Oa($d(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ⵠⵠ[Cr.ⵠⵠⵠᐃⵠⲆΔ] = [];
    ⵠⵠ[Cr.ⵠⵠⵠᐃⵠⲆΔ][Cr.ᐃᐃⵠ] = Oa($d(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ⵠⵠ[Cr.ⵠⵠⵠᐃⵠⲆΔ][Cr.ⵠΔⵠ] = Oa($d(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ⵠⵠ[904] = Oa(Od(0.4, ["#B6222A"]));
    ⵠⵠ[905] = Oa(Od(0.4, ["#B6222A"]));
    ⵠⵠ[Cr.ΔΔᐃⵠΔⵠⵠⵠⲆ] = Oa(Od(0.4, ["#B6222A"]));
    ⵠⵠ[230] = Oa(Sm(0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ⵠⵠ[229] = Oa(pu(0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ⵠⵠ[886] = [];
    ⵠⵠ[886][Cr.ᐃᐃⵠ] = Oa(ju(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ⵠⵠ[886][Cr.ⵠΔⵠ] = Oa(ju(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ⵠⵠ[887] = [];
    ⵠⵠ[887][Cr.ᐃᐃⵠ] = Oa(ju(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ⵠⵠ[887][Cr.ⵠΔⵠ] = Oa(ju(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ⵠⵠ[894] = [];
    ⵠⵠ[894][Cr.ᐃᐃⵠ] = Oa(Au(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ⵠⵠ[894][Cr.ⵠΔⵠ] = Oa(Au(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ⵠⵠ[895] = [];
    ⵠⵠ[895][Cr.ᐃᐃⵠ] = Oa(qu(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ⵠⵠ[895][Cr.ⵠΔⵠ] = Oa(qu(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ⵠⵠ[896] = [];
    ⵠⵠ[896][Cr.ᐃᐃⵠ] = Oa(Au(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ⵠⵠ[896][Cr.ⵠΔⵠ] = Oa(Au(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ⵠⵠ[897] = [];
    ⵠⵠ[897][Cr.ᐃᐃⵠ] = Oa(qu(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ⵠⵠ[897][Cr.ⵠΔⵠ] = Oa(qu(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ⵠⵠ[888] = Oa(lu(0.35, ["#B6222A"]));
    ⵠⵠ[889] = Oa(Au(0.35, 0, [un, "#B6222A"]));
    ⵠⵠ[890] = Oa(qu(0.35, 0, [jt, "#B6222A"]));
    ⵠⵠ[891] = Oa(lu(0.35, ["#22E066"]));
    ⵠⵠ[892] = Oa(Au(0.35, 0, [un, "#22E066"]));
    ⵠⵠ[893] = Oa(qu(0.35, 0, [vs, "#22E066"]));
    ⵠⵠ[48] = [];
    ⵠⵠ[48][Cr.ᐃᐃⵠ] = Oa(lm(0.3, Cl, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ⵠⵠ[48][Cr.ⵠΔⵠ] = Oa(lm(0.3, jj, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ⵠⵠ[47] = [];
    ⵠⵠ[47][Cr.ᐃᐃⵠ] = Oa(om(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ⵠⵠ[47][Cr.ⵠΔⵠ] = Oa(om(0.45, P, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ⵠⵠ[141] = [];
    ⵠⵠ[141][Cr.ᐃᐃⵠ] = Oa(zp(0.63, Ah, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ⵠⵠ[141][Cr.ⵠΔⵠ] = Oa(zp(0.63, P, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ⵠⵠ[125] = [];
    ⵠⵠ[125][Cr.ᐃᐃⵠ] = Oa(bp(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ⵠⵠ[125][Cr.ⵠΔⵠ] = Oa(bp(1, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ⵠⵠ[221] = [];
    ⵠⵠ[221][Cr.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠⲆΔΔⵠᐃⵠⵠ;
    ⵠⵠ[221][Cr.ⵠΔⵠ] = ᐃᐃ.ⲆⲆΔΔⲆⵠⵠΔⵠ;
    ⵠⵠ[190] = [];
    ⵠⵠ[190][Cr.ᐃᐃⵠ] = Oa(Md(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⵠⵠ[190][Cr.ⵠΔⵠ] = Oa(Md(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⵠⵠ[853] = [ⵠⵠ[190]];
    ⵠⵠ[853][1] = [];
    ⵠⵠ[853][2] = [];
    ⵠⵠ[853][1][Cr.ᐃᐃⵠ] = Oa(Ed(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⵠⵠ[853][1][Cr.ⵠΔⵠ] = Oa(Ed(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⵠⵠ[853][2][Cr.ᐃᐃⵠ] = Oa(Bd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⵠⵠ[853][2][Cr.ⵠΔⵠ] = Oa(Bd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⵠⵠ[49] = [];
    ⵠⵠ[49][Cr.ᐃᐃⵠ] = Oa(fd(3 - Math.PI / 2, Hc(0.6, Dg, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ⵠⵠ[49][Cr.ⵠΔⵠ] = Oa(fd(3 - Math.PI / 2, Hc(0.6, Fl, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ⵠⵠ[728] = [];
    ⵠⵠ[728][Cr.ᐃᐃⵠ] = Oa(Nd(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ⵠⵠ[728][Cr.ⵠΔⵠ] = Oa(Nd(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ⵠⵠ[798] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      bd(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      gd(d, b[4], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      bd(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      gd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      bd(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      gd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      bd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      gd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      bd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      gd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      bd(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      gd(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      bd(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      gd(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      gd(d, w, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      gd(d, Uj, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      gd(d, un, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      gd(d, undefined, b[1], a * 12);
      return c;
    }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ⵠⵠ[729] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      bd(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      gd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      bd(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      gd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      bd(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      gd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      bd(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      gd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      bd(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      gd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      bd(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      gd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      bd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      gd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      bd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      gd(d, b[0], b[0], a * 12);
      return c;
    }(0.3, ["#BB0000"]));
    ⵠⵠ[658] = Kt(1, [{
      f: $c,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠⵠ[150] = Kt(1.5, [{
      f: Wc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ⵠⵠ[669] = Xc(0.35, ["#072428", "#67A242", "#67A242"], 0);
    ⵠⵠ[670] = Xc(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ⵠⵠ[671] = Xc(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ⵠⵠ[672] = Xc(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ⲆⵠⵠΔΔⵠⵠ) {
      ⵠⵠ[278] = Oa(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        bd(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        gd(d, "#1D6055");
        d.globalAlpha = 1;
        var a = gu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    } else {
      ⵠⵠ[278] = Oa(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + 20;
        d.beginPath();
        bd(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        gd(d, "#1D6055");
        d.globalAlpha = 1;
        var a = gu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    }
    if (ⲆⵠⵠΔΔⵠⵠ) {
      ⵠⵠ[267] = Oa(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var a = b * 20;
        var j = b * 35;
        var k = b * 65;
        var h = b * 2;
        var g = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, b * 15);
        bd(d, k, 0, f, a, h);
        gd(d, null, "#69A148", g);
        d.translate(0, j);
        bd(d, k, 0, f, a, h);
        gd(d, null, "#AF352A", g);
        d.translate(0, j);
        bd(d, k, 0, f, a, h);
        gd(d, null, "#669BB1", g);
        return c;
      }(0.75));
    } else {
      ⵠⵠ[267] = Oa(function (c) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 950;
        var j = c * 180;
        var k = c * 50;
        var a = c * 20;
        var m = c * 240;
        var n = c * 35;
        var h = c * 1;
        var g = c * 4;
        var l = c * 4;
        e.width = i;
        e.height = k;
        f.translate(0, c * 15);
        bd(f, n, h, j, a, g);
        gd(f, null, "#69A148", l);
        var b = ⵠⵠ[669];
        f.drawImage(b, 17, -8);
        f.translate(m, 0);
        bd(f, n, h, j, a, g);
        gd(f, null, "#AF352A", l);
        b = ⵠⵠ[671];
        f.drawImage(b, 17, -9);
        f.translate(m, 0);
        bd(f, n, h, j, a, g);
        gd(f, null, "#669BB1", l);
        b = ⵠⵠ[670];
        f.drawImage(b, 17, -8);
        f.translate(m, 0);
        bd(f, n, h, j, a, g);
        gd(f, null, "#074A87", l);
        b = ⵠⵠ[672];
        f.drawImage(b, 17, -8);
        return e;
      }(1));
    }
    if (ⲆⵠⵠΔΔⵠⵠ) {
      ⵠⵠ[608] = Oa(Vc(0.75));
    } else {
      ⵠⵠ[608] = Oa(Vc(1));
    }
    ⵠⵠ[792] = Oa(ec(0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ⵠⵠ[537] = Oa(fd(5.8, iu(0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ⵠⵠ[283] = [];
    ⵠⵠ[465] = [];
    for (a = 0; a < 18; a++) {
      ⵠⵠ[465][a] = gu(1, "" + (a + 1), 12, "#FFF");
    }
    ⵠⵠ[708] = [];
    ⵠⵠ[708].push(Oa(kp(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ⵠⵠ[708].push(Oa(kp(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ⵠⵠ[708].push(Oa(kp(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ⵠⵠ[725] = [];
    ⵠⵠ[725].push(Oa(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      vd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      gd(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      vd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      gd(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      gd(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      gd(c, "#3A2A0D");
      vd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      gd(c, Wa, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      gd(c, un, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      gd(c, oh, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      gd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      gd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      gd(c, Mg, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      gd(c, Xs, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      gd(c, sr, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      gd(c, al, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      gd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      gd(c, undefined, "#c7a726", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      gd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      gd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      gd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      gd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      gd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      gd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      gd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      gd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      gd(c, oh, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      gd(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      gd(c, "#ECBE35", "#EDCE4F", a * 8);
      vd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      gd(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ⵠⵠ[725].push(Oa(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      vd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      gd(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      vd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      gd(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      gd(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      gd(c, "#071A1B");
      vd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      gd(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      gd(c, vs, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      gd(c, _h, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      gd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      gd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      gd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      gd(c, vs, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      gd(c, oh, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      gd(c, un, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      gd(c, fo, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      gd(c, undefined, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      gd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      gd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      gd(c, Xs, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      gd(c, _h, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      gd(c, Wa, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      gd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      gd(c, vs, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      gd(c, sr, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      gd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      gd(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      gd(c, "#E1DDD5", "#EAE7E4", a * 8);
      vd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      gd(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ⵠⵠ[726] = Oa(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      vd(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      gd(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      gd(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      bd(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      gd(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      bd(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
      c.restore();
      gd(c, "#C09D6F");
      vd(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      gd(c, "#C09D6F");
      return b;
    }(0.22));
    ⵠⵠ[727] = [];
    ⵠⵠ[727].push(Oa(Rd(1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ⵠⵠ[727].push(Oa(Rd(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ⵠⵠ[727].push(Oa(Rd(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ⵠⵠ[546] = ᐃᐃ.ⲆΔᐃⲆᐃⲆᐃ;
    ⵠⵠ[547] = ᐃᐃ.ΔΔΔⵠΔⲆΔ;
    ⵠⵠ[548] = ᐃᐃ.ΔⵠⵠⲆΔⲆᐃ;
    ⵠⵠ[549] = ᐃᐃ.ΔᐃΔⵠᐃⲆᐃ;
    ⵠⵠ[517] = gu(1, "Show spectators", 25, "#FFF", jt, vs, "#000", 5, 220);
    ⵠⵠ[525] = gu(1, "Reconnecting...", 30, "#FFF");
    console.log(w, undefined);
  }
  function _p(b, c, d, e, f, i) {
    const a = b ^ 11706;
    const j = c ^ 55689;
    const k = ((d + 63705) * 214013 + 2531011) % 4294967296;
    const h = (1013904223 + (39596 + e) * 1664525) % 4294967296;
    const g = ((f + 25180) * 2147483629 + 2147483587) % 2147483647;
    const l = Un(a, j, k, h);
    ft(a, j, k, h, g);
    return l ^ 30332;
  }
  function Fp(b, c, d) {
    var e = ⵠⵠ[465][b];
    var f = c.info.translate.x + aq * 5;
    var g = c.info.translate.y + aq * 5;
    if (c.info.state == Af || d) {
      g += aq * 5;
    }
    Up(Xn, e, f, g);
  }
  function Rp() {
    nx.ⵠᐃᐃⵠⵠ.open = false;
    var a = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
    var b = 100;
    if (a) {
      for (var c = 0; c < mx.ⵠΔⲆ[22].length; c++) {
        var d = mx.ⵠΔⲆ[22][c];
        var e = ⵠᐃⵠ.Ⲇᐃⵠᐃ(d, a);
        if (b > e) {
          b = e;
          nx.ⵠᐃᐃⵠⵠ.open = _j;
          nx.ⵠᐃᐃⵠⵠ.ⲆⵠⲆⵠ = d.ⲆⵠⲆⵠ;
          nx.ⵠᐃᐃⵠⵠ.ΔᐃⲆᐃΔ = d.id;
        }
      }
      if (b < 100) {
        qx.ⵠᐃᐃⵠⵠ.ΔⵠᐃⲆ(Xn);
      }
    }
  }
  function jp() {
    if (!nx.ΔΔᐃⵠ.open && !nx.ΔΔΔⲆΔ.open) {
      nx.ᐃⵠᐃⵠ.open = ja;
      var b = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      var c = 100;
      if (b) {
        for (var d = 0; Kf.length > d; d++) {
          for (var e = Kf[d][0], f = Kf[d][1], j = 0; j < mx.ⵠΔⲆ[e].length; j++) {
            var k = mx.ⵠΔⲆ[e][j];
            var m = ⵠᐃⵠ.Ⲇᐃⵠᐃ(k, b);
            if (c > m) {
              c = m;
              nx.ᐃⵠᐃⵠ.ⵠⵠᐃᐃⲆⵠⲆ = f;
              nx.ᐃⵠᐃⵠ.type = e;
              nx.ᐃⵠᐃⵠ.open = true;
              nx.ᐃⵠᐃⵠ.ⲆⵠⲆᐃⵠⵠᐃ = k.info & 255;
              nx.ᐃⵠᐃⵠ.ᐃⵠΔᐃⲆΔΔ = (k.info & 65280) >> 8;
              nx.ᐃⵠᐃⵠ.ⲆⵠⲆⵠ = k.ⲆⵠⲆⵠ;
              nx.ᐃⵠᐃⵠ.ΔᐃⲆᐃΔ = k.id;
            }
          }
        }
        if (c < 100) {
          var p;
          var q = ⵠⵠ[656];
          var g = (l = qx.ᐃᐃᐃΔⵠⲆΔ).info.translate.x - 33;
          Up(Xn, q, g, 0);
          if (nx.ᐃⵠᐃⵠ.ⲆⵠⲆᐃⵠⵠᐃ > 0) {
            l.ΔⵠᐃⲆ(Xn);
            if ((p = nx.ᐃⵠᐃⵠ.ⲆⵠⲆᐃⵠⵠᐃ) > 1) {
              Gp(p, l);
            }
          }
          switch (nx.ᐃⵠᐃⵠ.ⵠⵠᐃᐃⲆⵠⲆ) {
            case 108:
              var l = qx.ᐃᐃᐃⲆⲆⵠⲆ;
              break;
            case 111:
              l = qx.ⵠⵠⵠⵠⲆⵠΔ;
              break;
            case 112:
              l = qx.ⵠⵠᐃΔΔⲆᐃ;
              break;
            case 121:
              l = qx.ΔⵠᐃΔⵠᐃᐃ;
              break;
            case 202:
              l = qx.ⲆⵠⲆΔⲆⲆⵠ;
          }
          if (nx.ᐃⵠᐃⵠ.ᐃⵠΔᐃⲆΔΔ > 0) {
            l.ΔⵠᐃⲆ(Xn);
            if ((p = nx.ᐃⵠᐃⵠ.ᐃⵠΔᐃⲆΔΔ) > 1) {
              Gp(p, l);
            }
          }
        }
      }
    }
  }
  function Gp(a, b) {
    if (!ⵠⵠ[283][a]) {
      ⵠⵠ[283][a] = gu(aq, "x" + a, 17, "#FFF");
    }
    var c = ⵠⵠ[283][a];
    var d = b.info.translate.x + b.info.ΔΔ[0].width - c.width - aq * 14;
    var e = b.info.translate.y + b.info.ΔΔ[0].height - c.height - aq * 19;
    if (b.info.state == Af) {
      e += aq * 5;
    }
    Up(Xn, c, d, e);
  }
  function Wp() {
    if (!nx.ΔΔᐃⵠ.open) {
      nx.ΔΔΔⲆΔ.ᐃⲆⵠᐃ = 0;
      nx.ΔΔΔⲆΔ.open = ks;
      var b = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      var c = 100;
      if (b) {
        for (var d = 0; d < mx.ⵠΔⲆ[18].length; d++) {
          var e = mx.ⵠΔⲆ[18][d];
          var f = ⵠᐃⵠ.Ⲇᐃⵠᐃ(e, b);
          if (f < c) {
            c = f;
            nx.ΔΔΔⲆΔ.open = rt;
            nx.ΔΔΔⲆΔ.ᐃⲆⵠᐃ = e.info;
            nx.ΔΔΔⲆΔ.ⲆⵠⲆⵠ = e.ⲆⵠⲆⵠ;
            nx.ΔΔΔⲆΔ.ΔᐃⲆᐃΔ = e.id;
          }
        }
        if (c < 100) {
          var j = ⵠⵠ[411];
          var a = qx.ⵠᐃⲆᐃⵠⵠᐃ;
          var k = Math.floor(a.info.translate.x + (a.info.ΔΔ[0].width - j.width) / 2);
          var l = Math.floor(a.info.translate.y + (a.info.ΔΔ[0].height - j.height) / 2) + 3;
          Up(Xn, j, k, l);
          if (nx.ΔΔΔⲆΔ.ᐃⲆⵠᐃ > 0) {
            a.ΔⵠᐃⲆ(Xn);
            var h = nx.ΔΔΔⲆΔ.ᐃⲆⵠᐃ;
            if (h > 1) {
              Gp(h, a);
            }
          }
        }
      }
    }
  }
  function Lp() {
    if (!nx.ΔΔᐃⵠ.open && !nx.ΔΔΔⲆΔ.open && !nx.ⵠⵠⵠΔ.open && !nx.ᐃⵠᐃⵠ.open) {
      nx.ᐃⵠΔⲆ.open = false;
      var b = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      var c = 100;
      if (b) {
        for (var d = 0; d < mx.ⵠΔⲆ[34].length; d++) {
          var e = mx.ⵠΔⲆ[34][d];
          var f = ⵠᐃⵠ.Ⲇᐃⵠᐃ(e, b);
          if (f < c) {
            c = f;
            nx.ᐃⵠΔⲆ.open = true;
            nx.ᐃⵠΔⲆ.ⲆⵠⲆᐃⵠⵠᐃ = e.info & 31;
            nx.ᐃⵠΔⲆ.ⲆΔⲆⲆⲆ = (e.info & 992) >> 5;
            nx.ᐃⵠΔⲆ.ⵠᐃⲆⵠᐃⲆΔ = (e.info & 31744) >> 10;
            nx.ᐃⵠΔⲆ.ⲆⵠⲆⵠ = e.ⲆⵠⲆⵠ;
            nx.ᐃⵠΔⲆ.ΔᐃⲆᐃΔ = e.id;
          }
        }
        if (c < 100) {
          var g = ⵠⵠ[722];
          var a = (j = qx.ᐃⲆᐃⵠⲆⲆⵠ).info.translate.x - 32;
          Up(Xn, g, a, 0);
          if (nx.ᐃⵠΔⲆ.ⲆⵠⲆᐃⵠⵠᐃ > 0) {
            j.ΔⵠᐃⲆ(Xn);
            if ((k = nx.ᐃⵠΔⲆ.ⲆⵠⲆᐃⵠⵠᐃ) > 1) {
              Gp(k, j);
            }
          }
          var j = qx.ᐃⲆⲆΔⵠⲆⲆ;
          if (nx.ᐃⵠΔⲆ.ⵠᐃⲆⵠᐃⲆΔ > 0) {
            j.ΔⵠᐃⲆ(Xn);
            if ((k = nx.ᐃⵠΔⲆ.ⵠᐃⲆⵠᐃⲆΔ) > 1) {
              Gp(k, j);
            }
          }
          var k;
          j = qx.ΔᐃⵠᐃⲆᐃⵠ;
          if (nx.ᐃⵠΔⲆ.ⲆΔⲆⲆⲆ > 0) {
            j.ΔⵠᐃⲆ(Xn);
            if ((k = nx.ᐃⵠΔⲆ.ⲆΔⲆⲆⲆ) > 1) {
              Gp(k, j);
            }
          }
        }
      }
    }
  }
  function Np() {
    if (nx.reconnect.enabled) {
      Xn.globalAlpha = 0.9;
      Xn.fillStyle = "#000";
      bd(Xn, ao - 150, no - 90, 300, 180, 15);
      Xn.fill();
      Xn.globalAlpha = 1;
      var a = ⵠⵠ[301];
      Xn.save();
      nx.reconnect.rotate = (nx.reconnect.rotate + vx * 2) % (Math.PI * 2);
      Xn.translate(Yn / 2, _n / 2 - 25);
      Xn.rotate(nx.reconnect.rotate);
      Up(Xn, a, -a.width / 2, -a.height / 2);
      Xn.restore();
      a = ⵠⵠ[525];
      Up(Xn, a, (Yn - a.width) / 2, (_n - a.height) / 2 + 25);
    }
  }
  function qp() {
    if (nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ.length > 0) {
      var b = {
        x: qx.ⵠⲆΔⵠᐃ.translate.x,
        y: qx.ⵠⲆΔⵠᐃ.translate.y - aq * 120
      };
    } else {
      b = {
        x: qx.ⵠⲆΔⵠᐃ.translate.x,
        y: qx.ⵠⲆΔⵠᐃ.translate.y - aq * 50
      };
    }
    Xn.globalAlpha = 0.8;
    var c = ⵠⵠ[259][mx.time];
    Up(Xn, c, b.x, b.y);
    Xn.globalAlpha = 1;
    if (qx.ⵠⲆΔⵠᐃ.ⲆⲆⵠΔⵠ.x > -1) {
      Xn.fillStyle = "#660000";
      vd(Xn, b.x + aq * qx.ⵠⲆΔⵠᐃ.ⲆⲆⵠΔⵠ.x, b.y + qx.ⵠⲆΔⵠᐃ.ⲆⲆⵠΔⵠ.y * aq, aq * 5);
      Xn.fill();
    }
    var d = aq;
    for (var f = qx.ⵠⲆΔⵠᐃ.ᐃᐃΔΔ, g = 0; f.length > g; g++) {
      var h = f[g];
      mx.time;
      Xn.fillStyle = "#ff0000";
      vd(Xn, b.x + aq * (h.x / (mx.ⲆⲆⲆΔΔ * 100) * 193), b.y + h.y / (mx.ᐃᐃⲆⲆΔ * 100) * 193 * aq, aq * 2);
      Xn.fill();
    }
    var i = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
    if (i) {
      Xn.fillStyle = mx.time ? "#fff" : "#e39716";
      vd(Xn, b.x + i.x / (mx.ⲆⲆⲆΔΔ * 100) * 193 * aq, b.y + i.y / (mx.ᐃᐃⲆⲆΔ * 100) * 193 * aq, aq * 4);
      Xn.fill();
    }
    aq = d;
  }
  function Op() {
    if (!nx.ΔΔᐃⵠ.open && !nx.ΔΔΔⲆΔ.open) {
      nx.ⵠⵠⵠΔ.open = rr;
      var b = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      var c = 100;
      if (b) {
        for (var d = 0; mx.ⵠΔⲆ[32].length > d; d++) {
          var e = mx.ⵠΔⲆ[32][d];
          var f = ⵠᐃⵠ.Ⲇᐃⵠᐃ(e, b);
          if (c > f) {
            c = f;
            nx.ⵠⵠⵠΔ.open = true;
            nx.ⵠⵠⵠΔ.ᐃⵠΔⲆⲆᐃᐃ = e.info & 255;
            nx.ⵠⵠⵠΔ.ⲆΔⲆⲆⲆ = (e.info & 65280) >> 8;
            nx.ⵠⵠⵠΔ.ⲆⵠⲆⵠ = e.ⲆⵠⲆⵠ;
            nx.ⵠⵠⵠΔ.ΔᐃⲆᐃΔ = e.id;
          }
        }
        if (c < 100) {
          var g = ⵠⵠ[655];
          var a = (k = qx.ΔⲆⲆΔᐃᐃᐃ).info.translate.x - 33;
          Up(Xn, g, a, 0);
          if (nx.ⵠⵠⵠΔ.ᐃⵠΔⲆⲆᐃᐃ > 0) {
            k.ΔⵠᐃⲆ(Xn);
            if ((j = nx.ⵠⵠⵠΔ.ᐃⵠΔⲆⲆᐃᐃ) > 1) {
              Gp(j, k);
            }
          }
          var j;
          var k = qx.ᐃᐃᐃΔᐃⵠᐃ;
          if (nx.ⵠⵠⵠΔ.ⲆΔⲆⲆⲆ > 0) {
            k.ΔⵠᐃⲆ(Xn);
            if ((j = nx.ⵠⵠⵠΔ.ⲆΔⲆⲆⲆ) > 1) {
              Gp(j, k);
            }
          }
        }
      }
    }
  }
  function Hp() {
    var a = qx.ⲆΔΔΔᐃ;
    var b = a.id;
    if (a.Ⲇᐃᐃᐃⵠ === 1 && a.display === 1) {
      if (ΔⲆΔᐃΔ[b] === Lq) {
        ΔⲆΔᐃΔ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = Ib[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          Sb = 2;
          for (; e.length > Sb; Sb++) {
            f = Math.max(f, d.measureText(e[Sb]).width);
          }
          var g = f + 35;
          var a = 0;
          a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = a;
          bd(d, 0, 0, g, a, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], 15, 55);
            a = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            Sb = 2;
            for (; e.length > Sb; Sb++) {
              d.fillText(e[Sb], 15, a + 28);
              a += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ᐃⵠⲆΔ === 1) {
        Up(Xn, ΔⲆΔᐃΔ[b], a.x, a.y);
      } else if (Yn < a.x - 80 + ΔⲆΔᐃΔ[b].width) {
        Up(Xn, ΔⲆΔᐃΔ[b], Yn - ΔⲆΔᐃΔ[b].width - 10, a.y - ΔⲆΔᐃΔ[b].height - 10);
      } else {
        Up(Xn, ΔⲆΔᐃΔ[b], a.x - 80, a.y - ΔⲆΔᐃΔ[b].height - 10);
      }
    }
  }
  function Up(b, c, d, e, f, i, a, j, k, h) {
    if (c.ᐃⲆᐃᐃⲆΔⲆ === undefined || c.ᐃⲆᐃᐃⲆΔⲆ() === 1) {
      if (h !== undefined) {
        b.drawImage(c, d, e, Math.max(1, f), Math.max(1, i), a, j, k, h);
      } else if (Uk !== i) {
        b.drawImage(c, d, e, f, i);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function Yp() {
    nx.ⲆⲆⵠⵠⵠ.id = -1;
    nx.ⲆⲆⵠⵠⵠ.ⲆⵠⲆⵠ = -1;
    if (!nx.ⲆⲆⵠⲆᐃⲆⵠ && !nx.ⲆⲆⵠⵠⵠ.wait && !nx.ⲆⵠⲆⵠⲆ) {
      var b = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      var c = 100;
      if (b) {
        for (var d = 0; mx.ⵠΔⲆ[29].length > d; d++) {
          var e = mx.ⵠΔⲆ[29][d];
          var f = ⵠᐃⵠ.Ⲇᐃⵠᐃ(e, b);
          if (c > f) {
            c = f;
            nx.ⲆⲆⵠⵠⵠ.id = e.id;
            nx.ⲆⲆⵠⵠⵠ.ⲆⵠⲆⵠ = e.ⲆⵠⲆⵠ;
            nx.ⲆⲆⵠⵠⵠ.info = e.info;
            nx.ⲆⲆⵠⵠⵠ.lock = (e.info & 16) >> 4;
          }
        }
      }
      var g = qx.ΔΔⲆΔΔ;
      qx.ΔΔⲆΔΔ = -1;
      if (nx.ⲆⲆⵠⵠⵠ.ⲆⵠⲆⵠ == -1 || nx.ΔⲆⲆⵠᐃ.length != 0 && nx.id != nx.ⲆⲆⵠⵠⵠ.ⲆⵠⲆⵠ) {
        if (nx.ΔⲆⲆⵠᐃ.length != 0 && nx.id != nx.ΔⲆⲆⵠᐃ[0]) {
          qx.ΔΔⲆΔΔ = 2;
        } else if (nx.ΔⲆⲆⵠᐃ.length != 0 && nx.ΔⲆⲆⵠᐃ[0] == nx.id) {
          qx.ΔΔⲆΔΔ = 1;
        } else if (nx.ΔⲆⲆⵠᐃ.length != 0) {
          qx.ΔΔⲆΔΔ = 3;
        }
      } else if (nx.ΔⲆⲆⵠᐃ.length == 0 && nx.ⲆⲆⵠⵠⵠ.info >= 8) {
        qx.ΔΔⲆΔΔ = 4;
      } else if (nx.ΔⲆⲆⵠᐃ.length == 0) {
        qx.ΔΔⲆΔΔ = 3;
      } else {
        qx.ΔΔⲆΔΔ = 0;
      }
      if (qx.ΔΔⲆΔΔ != -1) {
        qx.ΔΔⲆΔⲆ[qx.ΔΔⲆΔΔ].button.ΔⵠᐃⲆ(Xn);
      }
      var a = document.getElementById("team_box").style;
      if (qx.ΔΔⲆΔΔ != -1 && qx.ΔΔⲆΔΔ != g && a.display == "inline-block") {
        qx.ΔΔⲆΔⲆ[qx.ΔΔⲆΔΔ].action();
      }
    }
  }
  function Kp() {
    if (!nx.ΔΔᐃⵠ.open && !nx.ΔΔΔⲆΔ.open && !nx.ⵠⵠⵠΔ.open && !nx.ᐃⵠΔⲆ.open && !nx.ᐃⵠᐃⵠ.open) {
      nx.sign.open = y;
      var a = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      var b = 100;
      if (a) {
        for (var c = 0; c < mx.ⵠΔⲆ[36].length; c++) {
          var d = mx.ⵠΔⲆ[36][c];
          var e = ⵠᐃⵠ.Ⲇᐃⵠᐃ(d, a);
          if (b > e && d.info === 0 && d.ⲆⵠⲆⵠ === nx.id) {
            nx.sign.open = Nh;
            b = e;
            nx.sign.ΔᐃⲆᐃΔ = d.id;
          }
        }
        if (b < 100) {
          qx.sign.button.ΔⵠᐃⲆ(Xn);
        }
      }
    }
  }
  function Vp() {
    nx.ΔΔᐃⵠ.id = -1;
    nx.ΔΔᐃⵠ.lock = false;
    nx.ΔΔᐃⵠ.locked = false;
    nx.ΔΔᐃⵠ.ⵠΔⵠⵠⵠᐃⲆ = ks;
    nx.ΔΔᐃⵠ.ΔⲆΔⲆⵠᐃⵠ = No;
    nx.ΔΔᐃⵠ.open = false;
    var b = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
    var c = 100;
    if (b) {
      for (var d = 0; mx.ⵠΔⲆ[11].length > d; d++) {
        var e = mx.ⵠΔⲆ[11][d];
        var f = ⵠᐃⵠ.Ⲇᐃⵠᐃ(e, b);
        if (c > f) {
          c = f;
          nx.ΔΔᐃⵠ.open = _j;
          nx.ΔΔᐃⵠ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          nx.ΔΔᐃⵠ.ᐃⲆⵠᐃ = e.info;
          nx.ΔΔᐃⵠ.ⲆⵠⲆⵠ = e.ⲆⵠⲆⵠ;
          nx.ΔΔᐃⵠ.ΔᐃⲆᐃΔ = e.id;
          nx.ΔΔᐃⵠ.locked = e.lock;
          nx.ΔΔᐃⵠ.lock = e.lock && nx.id != e.ⲆⵠⲆⵠ && !nx.ΔᐃᐃⵠⲆᐃⲆ(e.ⲆⵠⲆⵠ) ? Fn : Kj;
          nx.ΔΔᐃⵠ.ΔⲆΔⲆⵠᐃⵠ = e.ⲆⵠⲆⵠ === nx.id && !nx.ΔΔᐃⵠ.locked && nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(148) != -1 || mj;
          if (nx.ΔΔᐃⵠ.locked && nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(158) != -1) {
            nx.ΔΔᐃⵠ.ⵠΔⵠⵠⵠᐃⲆ = ma;
          }
        }
      }
      if (c < 100) {
        var j = ⵠⵠ[339];
        var a = qx.ⵠⲆΔ[0];
        var k = Math.floor(a.info.translate.x + (a.info.ΔΔ[0].width - j.width) / 2);
        var l = Math.floor(a.info.translate.y + (a.info.ΔΔ[0].height - j.height) / 2) + 3;
        Up(Xn, j, k, l);
        if ((!nx.ΔΔᐃⵠ.lock || nx.id === nx.ΔΔᐃⵠ.ⲆⵠⲆⵠ) && nx.ΔΔᐃⵠ.id >= 0) {
          (a = qx.ⵠⲆΔ[nx.ΔΔᐃⵠ.id]).ΔⵠᐃⲆ(Xn);
          var h = nx.ΔΔᐃⵠ.ᐃⲆⵠᐃ;
          if (h > 1) {
            Gp(h, a);
          }
        }
        if (nx.ΔΔᐃⵠ.lock) {
          qx.ⵠΔΔⵠⵠⵠⵠ.ΔⵠᐃⲆ(Xn);
        } else if (nx.ΔΔᐃⵠ.ΔⲆΔⲆⵠᐃⵠ) {
          qx.ᐃⲆᐃⵠⵠⲆΔ.ΔⵠᐃⲆ(Xn);
        }
        if (nx.ΔΔᐃⵠ.ⵠΔⵠⵠⵠᐃⲆ) {
          qx.ⲆⲆᐃΔⲆⲆⲆ.ΔⵠᐃⲆ(Xn);
        }
      }
    }
  }
  function Zp() {
    if (nx.ⲆⵠΔᐃⲆΔΔ) {
      Xn.globalAlpha = 0.5;
      Xn.fillStyle = "#000";
      Xn.fillRect(0, 0, Yn, _n);
      Xn.globalAlpha = 0.8;
      var b = ⵠⵠ[516][mx.time];
      var c = ao - b.width / 2;
      var d = no - b.height / 2;
      Up(Xn, b, c, d);
      Xn.globalAlpha = 1;
      if (qx.ⵠⲆΔⵠᐃ.ⲆⲆⵠΔⵠ.x > -1) {
        Xn.fillStyle = "#660000";
        vd(Xn, c + aq * (qx.ⵠⲆΔⵠᐃ.ⲆⲆⵠΔⵠ.x * 3), d + aq * (qx.ⵠⲆΔⵠᐃ.ⲆⲆⵠΔⵠ.y * 3), aq * 14);
        Xn.fill();
      }
      for (var e = qx.ⵠⲆΔⵠᐃ.ᐃᐃΔΔ, f = 0; e.length > f; f++) {
        var g = e[f];
        mx.time;
        Xn.fillStyle = "#ff0000";
        vd(Xn, c + g.x / (mx.ⲆⲆⲆΔΔ * 100) * 600 * aq, d + aq * (g.y / (mx.ᐃᐃⲆⲆΔ * 100) * 600), aq * 6);
        Xn.fill();
      }
      var h = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      if (h) {
        Xn.fillStyle = mx.time ? "#fff" : "#e39716";
        vd(Xn, c + h.x / (mx.ⲆⲆⲆΔΔ * 100) * 600 * aq, d + h.y / (mx.ᐃᐃⲆⲆΔ * 100) * 600 * aq, aq * 12);
        Xn.fill();
      }
    }
  }
  ΔⲆΔᐃΔ = [];
  ⲆΔΔΔⵠᐃᐃ = [];
  var Xp = [];
  function $p() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[239][mx.time];
    ⵠⵠᐃ = -ΔΔ.width;
    ΔⲆⲆ = -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function Eu() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[321][mx.time];
    ⵠⵠᐃ = -ΔΔ.width;
    ΔⲆⲆ = -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function Fu() {
    var a = nx.ᐃⲆⲆᐃᐃ;
    if (a.wait) {
      var b = a.timeout.ⵠⲆⲆ();
      Xn.save();
      var c = ⵠⵠ[537];
      Xn.translate(c.width - aq * 2, qx.ΔⲆᐃΔ.translate.y - aq * 60);
      var d = -c.width / 2 - 2;
      var e = -c.height / 2 - 4;
      Up(Xn, c, d, e);
      Xn.beginPath();
      Xn.lineWidth = aq * 5;
      Xn.strokeStyle = Cr.ᐃⵠⵠⵠⲆΔᐃ[mx.time];
      Xn.lineCap = "round";
      Xn.arc(0, e + c.height / 2, aq * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠⲆ);
      Xn.stroke();
      Xn.restore();
      if (b) {
        a.wait = Vh;
        a.timeout.ᐃⵠⲆ = 0;
        a.timeout.ᐃᐃᐃ = xa;
      }
    }
  }
  (function b() {
    const c = {
      ⲆⲆΔⲆⵠⲆΔᐃᐃ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(rg.Math.floor(1 + rg.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const e = new rg.Function(g);
    rg.setTimeout(b, 10000);
    e();
  })();
  function Gu(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Hu(a) {
    return rg.String.fromCharCode(a);
  }
  function Iu() {
    var a = nx.ⵠⲆⲆⲆⵠ;
    if (a.wait) {
      var b = a.timeout.ⵠⲆⲆ();
      Xn.save();
      var c = ⵠⵠ[792];
      Xn.translate(c.width - aq * 2, qx.ΔⲆᐃΔ.translate.y - aq * 125);
      var d = -c.width / 2 + 10;
      var e = -c.height / 2 - 4;
      Up(Xn, c, d, e);
      Xn.beginPath();
      Xn.lineWidth = aq * 5;
      Xn.strokeStyle = Cr.ⵠⵠΔᐃⵠⲆΔ[mx.time];
      Xn.lineCap = "round";
      Xn.arc(9, e + c.height / 2, aq * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠⲆ);
      Xn.stroke();
      Xn.restore();
      if (b) {
        a.wait = Sr;
        a.timeout.ᐃⵠⲆ = 0;
        a.timeout.ᐃᐃᐃ = Kj;
      }
    }
  }
  function Ju() {
    var b = nx.ΔᐃᐃᐃΔ;
    var c = qx.ΔᐃΔⲆ;
    if (b.ⵠⲆⲆ) {
      b.ⵠⲆⲆ = false;
      var d = b.ⵠᐃᐃⲆⲆ;
      var e = c.ⵠⲆ.width;
      var f = c.ⵠⲆ.height;
      var i = c.Ⲇ;
      var a = mx.ᐃᐃΔΔ;
      var j = false;
      i.clearRect(0, 0, e, f);
      i.drawImage(c.ΔΔ, 0, 0);
      for (var k = 0; k < d.length; k++) {
        var l = a[d[k]];
        if ((mx.mode !== 1 || l.ΔΔΔᐃᐃ !== "spectator") && (mx.mode !== 2 || l.ᐃⵠᐃΔ !== 0)) {
          if (d[k] == nx.id) {
            j = Ah;
            if (mx.mode === 3 && l.ᐃⵠᐃΔ === 0) {
              ⵠᐃ = "#FF0000";
            } else {
              ⵠᐃ = "#FFF";
            }
          } else if (mx.mode === 3 && l.ᐃⵠᐃΔ === 0) {
            ⵠᐃ = "#990000";
          } else {
            ⵠᐃ = "#A1BDCD";
          }
          i.drawImage(gu(aq, "" + (k + 1), aq * 15, ⵠᐃ), aq * 20, (40 + k * 22) * aq);
          if (!l.ΔᐃΔΔΔⵠᐃ) {
            l.ΔᐃΔΔΔⵠᐃ = gu(aq, l.ΔΔΔᐃᐃ, aq * 15, ⵠᐃ, undefined, undefined, undefined, undefined, aq * 110);
          }
          i.drawImage(l.ΔᐃΔΔΔⵠᐃ, aq * 39, aq * (40 + k * 22));
          i.drawImage(gu(aq, ⵠᐃⵠ.ᐃΔΔΔⲆⲆΔ(l.ΔⲆᐃⲆⵠ), aq * 15, ⵠᐃ), aq * 156, aq * (40 + k * 22));
        }
      }
      if (!j) {
        if (mx.mode === 0 || mx.mode === 3 || mx.mode === 4 || mx.mode === 5 || mx.mode === 7 || mx.mode === 1 && !nx.ⲆⲆⵠⲆᐃⲆⵠ || mx.mode === 2 && !nx.ⲆⵠⲆⵠⲆ) {
          i.drawImage(ⵠⵠ[306], aq * 15, aq * (46 + k * 22));
          i.drawImage(gu(aq, ⵠᐃⵠ.ᐃΔΔΔⲆⲆΔ(mx.ᐃᐃΔΔ[nx.id].ΔⲆᐃⲆⵠ), aq * 15, "#FFF"), aq * 100, aq * (46 + k * 22));
        }
      }
    }
    Up(Xn, c.ⵠⲆ, c.translate.x, c.translate.y);
  }
  function Ku() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[811][mx.time];
    ⵠⵠᐃ = -ΔΔ.width;
    ΔⲆⲆ = -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function Lu(b) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = Kj;
      }
      var c = vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600 * aq;
      var d = c * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var e = c * Math.cos(this.ⵠΔΔ.angle - this.angle);
    } else {
      d = 0;
      e = 0;
    }
    if (b === 913 && !mx.transition) {
      var f = 0;
      for (var g = mx.ⵠΔⲆ[0], a = 0; g.length > a; a++) {
        var h = ⵠᐃⵠ.Ⲇᐃⵠᐃ(g[a], this);
        if (h < 140 && h > 35) {
          f = 0;
          break;
        }
        if (h <= 35) {
          f = 1;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - vx / 1.5) : Math.min(1, this.opacity + vx / 1.5);
      Xn.globalAlpha = this.opacity;
    }
    ΔΔ = ⵠⵠ[b][mx.time];
    ⵠⵠᐃ = -ΔΔ.width;
    ΔⲆⲆ = -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2 + d, -ΔⲆⲆ / 2 + e, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.globalAlpha = 1;
    Xn.restore();
  }
  function Mu() {
    var b = nx.ⲆⲆⵠⵠⵠ;
    if (b.wait) {
      var c = b.timeout.ⵠⲆⲆ();
      Xn.save();
      var d = ⵠⵠ[562];
      var e = ⵠⵠ[537].height + aq * 25;
      Xn.translate(d.width, qx.ΔⲆᐃΔ.translate.y - aq * 188 - e);
      var f = -d.width / 2 - 2;
      var g = -d.height / 2 - 4;
      Up(Xn, d, f + 2, g);
      Xn.beginPath();
      Xn.lineWidth = aq * 5;
      Xn.strokeStyle = Cr.ᐃⵠⵠⵠⲆΔᐃ[mx.time];
      Xn.lineCap = "round";
      Xn.arc(0, g + d.height / 2, aq * 25, 0, Math.PI * 2 * b.timeout.ᐃⵠⲆ);
      Xn.stroke();
      Xn.restore();
      if (c) {
        b.wait = false;
        b.timeout.ᐃⵠⲆ = 0;
        b.timeout.ᐃᐃᐃ = rr;
      }
    }
  }
  function Nu(a) {
    if ((a = a / 100) <= 0.8) {
      Xn.save();
      Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
      Xn.rotate(this.angle);
      if (this.ⵠΔΔ.ⵠⲆⲆ) {
        if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == Ch) {
          this.ⵠΔΔ.ⵠⲆⲆ = false;
        }
        var b = aq * ((1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600);
        var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
        var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Xn.globalAlpha = 0.5;
      md(Xn, c, d, aq * 18, a);
      gd(Xn, null, "#000000", aq * 18);
      Xn.globalAlpha = 1;
      md(Xn, c, d, aq * 18, a);
      gd(Xn, null, Cr.ⵠΔᐃⲆΔᐃⲆ[mx.time], aq * 6);
      Xn.restore();
    }
  }
  function Ou() {
    var a = nx.ⲆΔᐃⵠᐃ;
    if (a.wait) {
      var b = a.timeout.ⵠⲆⲆ();
      Xn.save();
      var c = ⵠⵠ[794];
      Xn.translate(c.width - aq * 12, qx.ΔⲆᐃΔ.translate.y - aq * 190);
      var d = -c.width / 2 + 9;
      var e = -c.height / 2 - 4;
      Up(Xn, c, d, e);
      Xn.beginPath();
      Xn.lineWidth = aq * 5;
      Xn.strokeStyle = Cr.ⵠⵠΔᐃⵠⲆΔ[mx.time];
      Xn.lineCap = "round";
      Xn.arc(9, e + c.height / 2, aq * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠⲆ);
      Xn.stroke();
      Xn.restore();
      if (b) {
        a.wait = Vg;
        a.timeout.ᐃⵠⲆ = 0;
        a.timeout.ᐃᐃᐃ = false;
      }
    }
  }
  function Pu() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && Sr == this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ) {
        this.ⵠΔΔ.ⵠⲆⲆ = y;
      }
      var a = (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600 * aq;
      var b = Math.sin(this.ⵠΔΔ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠΔΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    ΔΔ = ⵠⵠ[167][mx.time];
    ⵠⵠᐃ = -ΔΔ.width;
    ΔⲆⲆ = -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2 + b, -ΔⲆⲆ / 2 + c, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.lock) {
      ΔΔ = ⵠⵠ[148][mx.time];
      ⵠⵠᐃ = -ΔΔ.width;
      ΔⲆⲆ = -ΔΔ.height;
      Up(Xn, ΔΔ, -ⵠⵠᐃ / 2 + b - aq * 1, -ΔⲆⲆ / 2 + c, ⵠⵠᐃ, ΔⲆⲆ);
    }
    Xn.restore();
  }
  function Qu() {
    var a = mx.ᐃⲆΔⲆΔ;
    var b = ⵠⵠ[725][mx.time];
    Up(Xn, b, a.translate.x, a.translate.y);
    Xn.save();
    Xn.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    mx.ᐃⲆΔⲆΔ.now = (new Date().getTime() - a.ⲆΔⲆⲆⵠ + a.ᐃᐃⲆⵠᐃ) % 480000;
    var c = mx.ᐃⲆΔⲆΔ.now * (Math.PI * 2) / 480000 - Math.PI / 2;
    Xn.rotate(c);
    Up(Xn, ⵠⵠ[726], -b.width / 2, -b.height / 2);
    Xn.restore();
  }
  function Ru(a) {
    if ((a = a / 100) <= 0.95) {
      Xn.save();
      Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
      Xn.rotate(this.angle);
      if (this.ⵠΔΔ.ⵠⲆⲆ) {
        if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
          this.ⵠΔΔ.ⵠⲆⲆ = zg;
        }
        var b = vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600 * aq;
        var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
        var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Xn.globalAlpha = 0.5;
      md(Xn, c, d, aq * 28, a);
      gd(Xn, null, "#000000", aq * 18);
      Xn.globalAlpha = 1;
      md(Xn, c, d, aq * 28, a);
      gd(Xn, null, Cr.ΔⲆⲆⲆⵠⲆⲆ[mx.time], aq * 6);
      Xn.restore();
    }
  }
  function Tu(a) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = false;
      }
      var b = aq * (vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600);
      var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    if (this.ⲆⵠᐃⵠΔ.ⵠⲆⲆ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ΔΔ = ⵠⵠ[872][Math.floor(this.id + this.color) % 5][mx.time];
    ⵠⵠᐃ = -ΔΔ.width * this.ⲆⵠᐃⵠΔ.ᐃⵠⲆ;
    ΔⲆⲆ = -ΔΔ.height * this.ⲆⵠᐃⵠΔ.ᐃⵠⲆ;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2 + c, -ΔⲆⲆ / 2 + d, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function Uu(a) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == Kk) {
        this.ⵠΔΔ.ⵠⲆⲆ = false;
      }
      var b = aq * ((1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600);
      var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var d = b * Math.cos(this.ⵠΔΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = ⵠⵠ[a][mx.time];
    ⵠⵠᐃ = -e.width;
    ΔⲆⲆ = -e.height;
    Up(Xn, e, -ⵠⵠᐃ / 2 + c, -ΔⲆⲆ / 2 + d, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function Vu(a) {
    return rg.String.fromCharCode(a);
  }
  function Wu() {
    var a = -8;
    if (nx.ΔⵠⲆΔᐃ.enabled) {
      var b = ⵠⵠ[546];
      Up(Xn, b, nx.ΔⵠⲆΔᐃ.translate.x, nx.ΔⵠⲆΔᐃ.translate.y + a);
      a += 70;
    }
    if (nx.ⵠⲆⵠⲆⲆΔΔ === 1) {
      b = ⵠⵠ[549];
      Up(Xn, b, nx.ΔⵠⲆΔᐃ.translate.x, nx.ΔⵠⲆΔᐃ.translate.y + a);
      a += 70;
    } else if (nx.ΔⲆᐃΔ.ⲆⲆⲆΔⲆ.x < 0.25 || nx.ΔⲆᐃΔ.ᐃⵠΔⲆᐃⵠΔ.x < 0.25 || nx.ΔⲆᐃΔ.ⵠΔΔᐃᐃᐃᐃ.x < 0.25 || nx.ΔⲆᐃΔ.ᐃᐃⵠΔⲆᐃΔ.x < 0.25 || nx.ΔⲆᐃΔ.ΔΔᐃⵠᐃ.x < 0.25) {
      b = ⵠⵠ[548];
      Up(Xn, b, nx.ΔⵠⲆΔᐃ.translate.x, nx.ΔⵠⲆΔᐃ.translate.y + a);
      a += 70;
    }
    if (nx.ᐃⵠΔⲆᐃ > 0) {
      b = ⵠⵠ[547];
      Up(Xn, b, nx.ΔⵠⲆΔᐃ.translate.x, nx.ΔⵠⲆΔᐃ.translate.y + a);
      var c = Xp[nx.ᐃⵠΔⲆᐃ];
      if (c === undefined) {
        c = gu(aq, nx.ᐃⵠΔⲆᐃ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        Xp[nx.ᐃⵠΔⲆᐃ] = c;
      }
      if (nx.ᐃⵠΔⲆᐃ < 9) {
        Up(Xn, c, nx.ΔⵠⲆΔᐃ.translate.x - 39, nx.ΔⵠⲆΔᐃ.translate.y + a + 20);
      } else {
        Up(Xn, c, nx.ΔⵠⲆΔᐃ.translate.x - 46, nx.ΔⵠⲆΔᐃ.translate.y + a + 20);
      }
    }
  }
  (function () {
    const a = {
      ᐃⲆⵠΔⲆⲆᐃ: 11620341,
      ΔΔⲆⲆᐃΔⲆ: 14300740,
      ⵠΔⵠΔΔⵠᐃ: 12661970,
      ᐃⲆⲆⲆᐃⲆⵠⵠⵠ: 8226786
    };
  })();
  function Xu(a) {
    return rg.String.fromCharCode(a);
  }
  function Yu() {
    for (var b = nx.ΔⲆⵠⵠ, c = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ], d = 0; d < b.ⵠᐃⵠⲆⲆ.length; d++) {
      var e = b.ⵠᐃⵠⲆⲆ[d];
      var f = false;
      if ((c = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ]) && (c.right == e.id || c.ΔⲆᐃΔΔ == e.id && c.ΔⲆᐃΔΔ > 0)) {
        f = pr;
        Up(Xn, e.info.ΔΔ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ΔⵠᐃⲆ(Xn);
      }
      var g = nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[e.id];
      if (g > 1) {
        Gp(g, e);
      }
      if (g > 0) {
        Fp(d, e, f);
      }
      var h = nx.ΔΔᐃⵠ;
      if (h.open && (h.id < 0 || e.id == h.id) && (!h.lock || h.ⲆⵠⲆⵠ == nx.id)) {
        qx.ΔⲆⲆⵠⵠ[e.id].ΔⵠᐃⲆ(Xn);
      }
      if (nx.ΔΔΔⲆΔ.open && e.id == 109) {
        qx.ΔⲆⲆⵠⵠ[e.id].ΔⵠᐃⲆ(Xn);
      }
      if (nx.ΔⵠⲆᐃⲆ.open && e.id == 180) {
        qx.ΔⲆⲆⵠⵠ[e.id].ΔⵠᐃⲆ(Xn);
      }
      if (nx.ⵠⵠⵠΔ.open && e.id == 134) {
        qx.ΔⲆⲆⵠⵠ[e.id].ΔⵠᐃⲆ(Xn);
      }
      if (nx.ᐃⵠᐃⵠ.open && e.id == 109) {
        qx.ΔⲆⲆⵠⵠ[e.id].ΔⵠᐃⲆ(Xn);
      }
      if (nx.ᐃⵠΔⲆ.open && (e.id == 109 || e.id == 131)) {
        qx.ΔⲆⲆⵠⵠ[e.id].ΔⵠᐃⲆ(Xn);
      }
    }
    if (e && d < b.max) {
      var j = ⵠⵠ[334][2];
      ⵠΔ = e.info.translate.x;
      ⵠᐃⲆ = e.info.translate.y;
      ⵠⵠΔⵠ = 1;
      for (; b.max > d; d++, ⵠⵠΔⵠ++) {
        Up(Xn, j, ⵠΔ + (j.width + 5) * ⵠⵠΔⵠ, ⵠᐃⲆ);
      }
    }
  }
  function Zu(b) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = ks;
      }
      var c = aq * ((1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600);
      var d = Math.sin(this.ⵠΔΔ.angle - this.angle) * c;
      var e = Math.cos(this.ⵠΔΔ.angle - this.angle) * c;
    } else {
      d = 0;
      e = 0;
    }
    var f = ⵠⵠ[853].length;
    ΔΔ = ⵠⵠ[853][(this.ⵠⵠΔⵠ + this.ⲆⲆ % 2) % f][mx.time];
    ⵠⵠᐃ = -ΔΔ.width;
    ΔⲆⲆ = -ΔΔ.height;
    var g = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
    if (g && (nx.id === this.ⲆⵠⲆⵠ || nx.ΔᐃᐃⵠⲆᐃⲆ(this.ⲆⵠⲆⵠ))) {
      if (ⵠᐃⵠ.Ⲇᐃⵠᐃ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - vx, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + vx, 1);
      }
    } else if (g && ⵠᐃⵠ.Ⲇᐃⵠᐃ(this, mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ]) < 150) {
      this.opacity = Math.max(this.opacity - vx, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + vx, 1);
    }
    var a = Xn.globalAlpha;
    Xn.globalAlpha *= this.opacity;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2 + d, -ΔⲆⲆ / 2 + e, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.globalAlpha = a;
    Xn.restore();
  }
  function $u(a) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && eo == this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ) {
        this.ⵠΔΔ.ⵠⲆⲆ = false;
      }
      var b = aq * (vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600);
      var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    ΔΔ = ⵠⵠ[a][mx.time];
    ⵠⵠᐃ = -ΔΔ.width;
    ΔⲆⲆ = -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2 + c, -ΔⲆⲆ / 2 + d, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function _u() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[837][mx.time];
    ⵠⵠᐃ = -ΔΔ.width;
    ΔⲆⲆ = -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function av() {
    Xn.save();
    var a = aq;
    if (nx.ΔⲆᐃΔ.ⲆⵠᐃⵠⲆ.x < 0.25) {
      Xn.globalAlpha = nx.ΔⲆᐃΔ.ⵠᐃⲆⲆⵠᐃⵠ.ᐃⵠⲆ;
    }
    var b = nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ.length > 0 ? -70 : 0;
    if (nx.ΔΔᐃⵠ.open || nx.ΔΔΔⲆΔ.open && nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(109) != -1 || nx.ⵠⵠⵠΔ.open && nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(134) != -1 || nx.ᐃⵠᐃⵠ.open && nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(109) != -1 || nx.ΔⵠⲆᐃⲆ.open && nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(180) != -1 || nx.ᐃⵠΔⲆ.open && (nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(109) != -1 || nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(131) != -1)) {
      b -= aq * 50;
    }
    Xn.translate((Yn - aq * 950) / 2, b);
    Xn.fillStyle = "#69A148";
    Xn.fillRect(this.translate.x + aq * 37, this.translate.y + aq * 17, aq * (nx.ΔⲆᐃΔ.ⲆⵠᐃⵠⲆ.x * 178), aq * 18);
    Xn.globalAlpha = 1;
    if (nx.ΔⲆᐃΔ.ᐃⵠΔⲆᐃⵠΔ.x < 0.35) {
      Xn.fillStyle = "#8F050A";
      Xn.globalAlpha = nx.ΔⲆᐃΔ.ⵠⲆⵠⲆᐃΔᐃ.ᐃⵠⲆ;
      Xn.fillRect(this.translate.x + aq * 277, this.translate.y + aq * 17, aq * 178, aq * 18);
      Xn.globalAlpha = 1;
    }
    Xn.fillStyle = "#AF352A";
    Xn.fillRect(this.translate.x + aq * 277, this.translate.y + aq * 17, nx.ΔⲆᐃΔ.ᐃⵠΔⲆᐃⵠΔ.x * 178 * aq, aq * 18);
    if (nx.ΔⲆᐃΔ.ⲆⲆⲆΔⲆ.x < 0.35) {
      Xn.fillStyle = "#366B91";
      Xn.globalAlpha = nx.ΔⲆᐃΔ.ⵠⵠⲆᐃⵠⵠᐃ.ᐃⵠⲆ;
      Xn.fillRect(this.translate.x + aq * 517, this.translate.y + aq * 17, aq * 178, aq * 18);
      Xn.globalAlpha = 1;
    }
    Xn.fillStyle = "#669BB1";
    Xn.fillRect(this.translate.x + aq * 517, this.translate.y + aq * 17, aq * (nx.ΔⲆᐃΔ.ⲆⲆⲆΔⲆ.x * 178), aq * 18);
    if (nx.ΔⲆᐃΔ.ⲆⲆⲆΔⲆ.x > 0.99) {
      if (nx.ΔⲆᐃΔ.ΔΔᐃⵠᐃ.x < 0.35) {
        Xn.fillStyle = "#6C4036";
        Xn.globalAlpha = nx.ΔⲆᐃΔ.ΔᐃⵠⲆΔᐃᐃ.ᐃⵠⲆ;
        Xn.fillRect(this.translate.x + aq * 517, this.translate.y + aq * 17, aq * 178, aq * 18);
        Xn.globalAlpha = 1;
      }
      Xn.fillStyle = "#9C4036";
      Xn.fillRect(this.translate.x + aq * 517, this.translate.y + aq * 17, (1 - nx.ΔⲆᐃΔ.ΔΔᐃⵠᐃ.x) * 178 * aq, aq * 18);
    }
    if (nx.ΔⲆᐃΔ.ⵠΔΔᐃᐃᐃᐃ.x < 0.35) {
      Xn.fillStyle = "#001A57";
      Xn.globalAlpha = nx.ΔⲆᐃΔ.ᐃΔᐃΔⵠⲆΔ.ᐃⵠⲆ;
      Xn.fillRect(this.translate.x + aq * 757, this.translate.y + aq * 17, aq * 178, aq * 18);
      Xn.globalAlpha = 1;
    }
    Xn.fillStyle = "#074A87";
    Xn.fillRect(this.translate.x + aq * 757, this.translate.y + aq * 17, aq * (nx.ΔⲆᐃΔ.ⵠΔΔᐃᐃᐃᐃ.x * 178), aq * 18);
    aq = a;
    Up(Xn, this.ΔΔ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    Xn.restore();
    if (nx.ΔⲆᐃΔ.ᐃᐃⵠΔⲆᐃΔ.x < 0.99) {
      var c = Math.floor(ao - ⵠⵠ[608].width / 2);
      b += this.translate.y - ⵠⵠ[608].height - aq * 5;
      Xn.fillStyle = "#BBE8EF";
      Xn.fillRect(c + 5, b + aq * 5, aq * 588 * nx.ΔⲆᐃΔ.ᐃᐃⵠΔⲆᐃΔ.x, aq * 10);
      if (nx.ΔⲆᐃΔ.ᐃᐃⵠΔⲆᐃΔ.x < 0.35) {
        Xn.fillStyle = "#9BA8AF";
        Xn.globalAlpha = nx.ΔⲆᐃΔ.ᐃⲆⲆᐃⲆᐃⵠ.ᐃⵠⲆ;
        Xn.fillRect(c + 5, b + 5, aq * 588, aq * 10);
        Xn.globalAlpha = 1;
      }
      Up(Xn, ⵠⵠ[608], c, b);
      this.y = b;
    }
  }
  function bv() {
    var a = nx.ᐃⵠⲆΔ;
    if (a.ᐃΔΔᐃᐃ) {
      var b = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      Xn.save();
      Xn.translate(nx.ᐃΔΔ.x + b.x, nx.ᐃΔΔ.y + b.y);
      var c = ⵠⵠ[324];
      var d = -c.width / 2;
      var e = -c.height / 2 - aq * 125;
      Up(Xn, c, d, e);
      Xn.beginPath();
      Xn.lineWidth = aq * 5;
      Xn.strokeStyle = Cr.ΔⲆⲆⲆⵠⲆⲆ[mx.time];
      Xn.lineCap = "round";
      Xn.arc(0, e + c.height / 2, aq * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠⲆ);
      Xn.stroke();
      Xn.restore();
    }
  }
  function cv() {
    var b = nx.ᐃⵠⲆΔ;
    if (!b.ᐃΔΔᐃᐃ && b.ΔΔᐃΔ > 0) {
      var c = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      if (!c) {
        return;
      }
      Xn.save();
      if (Jr[b.ΔΔᐃΔ].ⲆΔΔⲆ === 0 && b.mode === 0) {
        Xn.translate(nx.ᐃΔΔ.x + c.x, nx.ᐃΔΔ.y + c.y);
        Xn.rotate(c.angle);
        Xn.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = nx.ᐃΔΔ.x + (d - d % 100 + 50);
        e = nx.ᐃΔΔ.y + (e - e % 100 + 50);
        Xn.translate(d, e);
      }
      var f = ⵠⵠ[b.ΔΔᐃΔ][mx.time];
      Xn.globalAlpha = 0.5;
      Up(Xn, f, -f.width / 2, -f.height / 2);
      Xn.globalAlpha = 1;
      Xn.restore();
      if (Jr[b.ΔΔᐃΔ].ⲆΔΔⲆ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = gu(aq, Ib[336], 20, "#e2c340");
          } else {
            b.label[1] = gu(aq, Ib[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Up(Xn, f, ao + -f.width / 2, qx.ΔⲆᐃΔ.y - 26);
      }
    }
    if (b.ᐃΔΔᐃᐃ) {
      var i = b.timeout.ⵠⲆⲆ();
      for (var a = 0; a < b.ⲆⲆⲆⲆᐃ.length; a++) {
        var j = b.ⲆⲆⲆⲆᐃ[a];
        if (j.id == b.id) {
          var k = aq * 42;
          var l = aq * 17;
          bd(Xn, j.info.translate.x, j.info.translate.y + (1 - b.timeout.ᐃⵠⲆ) * k, j.info.width, b.timeout.ᐃⵠⲆ * k + l, aq * 10);
          Xn.fillStyle = "#55B973";
          Xn.fill();
          Xn.globalAlpha = 0.8;
          j.ΔⵠᐃⲆ(Xn);
        } else {
          Xn.globalAlpha = 0.5;
          j.ΔⵠᐃⲆ(Xn);
        }
        Xn.globalAlpha = 1;
      }
      if (i) {
        b.ᐃΔΔᐃᐃ = false;
        b.timeout.ᐃⵠⲆ = 0;
        b.timeout.ᐃᐃᐃ = false;
      }
      return Dg;
    }
    for (a = 0; b.ⲆⲆⲆⲆᐃ.length > a; a++) {
      b.ⲆⲆⲆⲆᐃ[a].ΔⵠᐃⲆ(Xn);
    }
    return xa;
  }
  function dv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[848][mx.time];
    ⵠⵠᐃ = -ΔΔ.width;
    ΔⲆⲆ = -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  (function () {
    const a = {
      ⵠΔᐃᐃ: 13702153,
      ⵠⵠᐃΔ: 10270954,
      ⵠᐃΔⲆ: 1933538,
      ⵠⵠⵠⵠΔⲆΔ: 8182643
    };
  })();
  var ev = 0;
  function fv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    this.ᐃⲆΔⲆ.ⵠⲆⲆ();
    Xn.globalAlpha = 0.3;
    var a = ⵠⵠ[282][mx.time];
    var b = -a.width * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
    var c = -a.height * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
    Up(Xn, a, -b / 2, -c / 2, b, c);
    Xn.globalAlpha = 1;
    Xn.restore();
  }
  function gv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    this.ⵠⵠΔⵠᐃⵠᐃ.ⵠⲆⲆ();
    this.ᐃᐃΔᐃᐃΔⲆ.ⵠⲆⲆ();
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    c = this.info === 0 ? ⵠⵠ[887][mx.time] : ⵠⵠ[886][mx.time];
    ⵠⵠᐃ = -c.width * this.ᐃΔΔΔ.ᐃⵠⲆ;
    ΔⲆⲆ = -c.height * this.ᐃΔΔΔ.ᐃⵠⲆ;
    Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == Vg) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var c = ⵠⵠ[888];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ⵠⵠᐃᐃⲆ.ⵠⲆⲆ() && pk == this.ⵠⵠᐃᐃⲆ.ᐃᐃᐃ) {
        this.action -= 4;
      }
      Xn.globalAlpha = 0.6 - this.ⵠⵠᐃᐃⲆ.ᐃⵠⲆ;
      c = ⵠⵠ[891];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle + b);
    Xn.translate(55, 0);
    Xn.rotate(a);
    c = this.info === 0 ? ⵠⵠ[894][mx.time] : ⵠⵠ[896][mx.time];
    ⵠⵠᐃ = this.ⵠⵠΔⵠᐃⵠᐃ.ᐃⵠⲆ * -c.width;
    ΔⲆⲆ = -c.height * this.ⵠⵠΔⵠᐃⵠᐃ.ᐃⵠⲆ;
    Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      c = ⵠⵠ[889];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Xn.globalAlpha = 0.6 - this.ⵠⵠᐃᐃⲆ.ᐃⵠⲆ;
      c = ⵠⵠ[892];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle + a + b);
    Xn.translate(55, 0);
    Xn.rotate(a);
    c = this.info === 0 ? ⵠⵠ[895][mx.time] : ⵠⵠ[897][mx.time];
    ⵠⵠᐃ = -c.width * this.ᐃᐃΔᐃᐃΔⲆ.ᐃⵠⲆ;
    ΔⲆⲆ = -c.height * this.ᐃᐃΔᐃᐃΔⲆ.ᐃⵠⲆ;
    Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      c = ⵠⵠ[890];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Xn.globalAlpha = 0.6 - this.ⵠⵠᐃᐃⲆ.ᐃⵠⲆ;
      c = ⵠⵠ[893];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
  }
  function hv() {
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = rr;
      }
      var a = aq * (vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600);
      var b = Math.sin(this.ⵠΔΔ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠΔΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Xn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Xn.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[154][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + vx * 3) % (Math.PI * 2);
    }
    Xn.rotate(this.rotate);
    ΔΔ = ⵠⵠ[1202][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
  }
  function iv(a, b, c) {
    if (a >= 0) {
      ΔΔ = ⵠⵠ[a][mx.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          Aw(a, ΔΔ, -ΔΔ.width / 2 - aq * (45 + b), -ΔΔ.height / 2 + (c + 22) * aq);
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          af(a, ΔΔ, -ΔΔ.width / 4 - (52 + b) * aq, -ΔΔ.height / 4 + aq * (c + 20));
          break;
        case 98:
        case 99:
          af(a, ΔΔ, -ΔΔ.width / 4 - (57 + b) * aq, -ΔΔ.height / 4 + aq * (c + 20));
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          af(a, ΔΔ, -ΔΔ.width / 4 - aq * (47 + b), -ΔΔ.height / 4 + (c + 45) * aq);
          break;
        case 30:
          af(a, ΔΔ, -ΔΔ.width / 4 - aq * (52 + b), -ΔΔ.height / 4 + aq * (c + 45));
          break;
        case 19:
          af(a, ΔΔ, -ΔΔ.width / 4 - aq * (47 + b), -ΔΔ.height / 4 + (c + 44) * aq);
          break;
        case 9:
          Aw(a, ΔΔ, -ΔΔ.width / 2 - aq * (47 + b), -ΔΔ.height / 2 + aq * (c + 44));
          break;
        case 62:
          Aw(a, ΔΔ, -ΔΔ.width / 2 - (40 + b) * aq, -ΔΔ.height / 2 + (c + 65) * aq);
          break;
        case 12:
          af(a, ΔΔ, -ΔΔ.width / 4 - (37 + b) * aq, -ΔΔ.height / 4 + aq * (c + 85));
          break;
        case 34:
          af(a, ΔΔ, -ΔΔ.width / 4 - aq * (37 + b), -ΔΔ.height / 4 + (c + 85) * aq);
          break;
        case 54:
        case 53:
          af(a, ΔΔ, -ΔΔ.width / 4 - (26 + b) * aq, -ΔΔ.height / 4 + aq * (c + 77));
          break;
        case 17:
          af(a, ΔΔ, -ΔΔ.width / 4 - (37 + b) * aq, -ΔΔ.height / 4 + aq * (c + 85));
          break;
        case 63:
          af(a, ΔΔ, -ΔΔ.width / 4 - aq * (47 + b), -ΔΔ.height / 4 + aq * (c + 44));
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          af(a, ΔΔ, -ΔΔ.width / 4 - (37 + b) * aq, -ΔΔ.height / 4 + aq * (c + 30));
          break;
        case 56:
          af(a, ΔΔ, -ΔΔ.width / 4 - aq * (47 + b), -ΔΔ.height / 4 + aq * (c + 35));
          break;
        case 92:
        case 93:
          af(a, ΔΔ, -ΔΔ.width / 4 - aq * (47 + b), -ΔΔ.height / 4 + (c + 40) * aq);
          break;
        case 89:
          af(a, ΔΔ, -ΔΔ.width / 4 - aq * (47 + b), -ΔΔ.height / 4 + aq * (c + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          af(a, ΔΔ, -ΔΔ.width / 4 - (37 + b) * aq, -ΔΔ.height / 4 + aq * (c + 90));
          break;
        case 18:
          af(a, ΔΔ, -ΔΔ.width / 4 - (40 + b) * aq, -ΔΔ.height / 4 + aq * (c + 85));
          break;
        case 16:
          Aw(a, ΔΔ, -ΔΔ.width / 2 - aq * (39 + b), -ΔΔ.height / 2 + aq * (c + 90));
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          Aw(a, ΔΔ, -ΔΔ.width / 2 - aq * (46 + b), -ΔΔ.height / 2 + (c + 35) * aq);
          break;
        case 49:
          Aw(a, ΔΔ, -ΔΔ.width / 2 - aq * (47 + b), -ΔΔ.height / 2 + (c + 54) * aq);
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          Aw(a, ΔΔ, -ΔΔ.width / 2 - aq * (46 + b), -ΔΔ.height / 2 + (c + 35) * aq);
          break;
        case 55:
          Aw(a, ΔΔ, -ΔΔ.width / 2 - aq * (47 + b), -ΔΔ.height / 2 + aq * (c + 20));
      }
    }
  }
  function jv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    var a = ⵠᐃⵠ.Ⲇᐃⵠᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + vx / 2, 1.8) : Math.max(this.scale - vx, 1);
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    this.rotate.ⵠⲆⲆ();
    this.ⵠΔⵠΔ = a < 350 ? Math.max(0, this.ⵠΔⵠΔ - vx * 2.2) : Math.min(1, this.ⵠΔⵠΔ + vx * 2.2);
    b = (this.info & 1) === 0 ? ⵠⵠ[1113][mx.time] : ⵠⵠ[1114][mx.time];
    ⵠⵠᐃ = -b.width * this.ᐃΔΔΔ.ᐃⵠⲆ * this.scale;
    ΔⲆⲆ = this.scale * (-b.height * this.ᐃΔΔΔ.ᐃⵠⲆ);
    Xn.globalAlpha = 1 - this.ⵠΔⵠΔ;
    Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    b = this.info & 1 ? ⵠⵠ[1098][mx.time] : ⵠⵠ[235][mx.time];
    ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -b.width * this.scale;
    ΔⲆⲆ = this.scale * (-b.height * this.ᐃΔΔΔ.ᐃⵠⲆ);
    Xn.globalAlpha = this.ⵠΔⵠΔ;
    Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == 0) {
        this.action -= 2;
      }
      Xn.globalAlpha = (0.6 - this.ⵠΔΔ.ᐃⵠⲆ) * (1 - this.ⵠΔⵠΔ);
      var b = ⵠⵠ[1115];
      ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -b.width * this.scale;
      ΔⲆⲆ = this.scale * (-b.height * this.ᐃΔΔΔ.ᐃⵠⲆ);
      Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = this.ⵠΔⵠΔ * (0.6 - this.ⵠΔΔ.ᐃⵠⲆ);
      b = ⵠⵠ[1107];
      ⵠⵠᐃ = this.scale * (this.ᐃΔΔΔ.ᐃⵠⲆ * -b.width);
      ΔⲆⲆ = this.ᐃΔΔΔ.ᐃⵠⲆ * -b.height * this.scale;
      Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    b = this.info & 1 ? ⵠⵠ[1101][mx.time] : ⵠⵠ[1102][mx.time];
    ⵠⵠᐃ = this.scale * (-b.width * this.ᐃΔΔΔ.ᐃⵠⲆ);
    ΔⲆⲆ = this.ᐃΔΔΔ.ᐃⵠⲆ * -b.height * this.scale;
    Xn.save();
    Xn.translate(aq * -20, aq * 0);
    Xn.rotate(this.rotate.ᐃⵠⲆ);
    Xn.globalAlpha = this.ⵠΔⵠΔ;
    Up(Xn, b, -ⵠⵠᐃ * aq / 4, -ΔⲆⲆ * aq / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      Xn.globalAlpha = (0.6 - this.ⵠΔΔ.ᐃⵠⲆ) * this.ⵠΔⵠΔ;
      b = ⵠⵠ[1108];
      Up(Xn, b, -ⵠⵠᐃ * aq / 4, aq * -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    b = (this.info & 1) === 0 ? ⵠⵠ[1105][mx.time] : ⵠⵠ[1104][mx.time];
    Xn.save();
    Xn.translate(aq * 20, aq * 0);
    Xn.rotate(-this.rotate.ᐃⵠⲆ);
    Xn.globalAlpha = this.ⵠΔⵠΔ;
    Up(Xn, b, -ⵠⵠᐃ * aq / 4, -ΔⲆⲆ * aq / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      Xn.globalAlpha = this.ⵠΔⵠΔ * (0.6 - this.ⵠΔΔ.ᐃⵠⲆ);
      b = ⵠⵠ[1109];
      Up(Xn, b, aq * -ⵠⵠᐃ / 4, -ΔⲆⲆ * aq / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    Xn.globalAlpha = 1;
    Xn.restore();
    Xn.restore();
  }
  function kv() {
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = xa;
      }
      var a = aq * (vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600);
      var b = a * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var c = a * Math.cos(this.ⵠΔΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Xn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Xn.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[153][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + vx * 3) % (Math.PI * 2);
    }
    Xn.rotate(this.rotate);
    ΔΔ = ⵠⵠ[1198][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
  }
  function lv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && ja == this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ) {
        this.ⵠΔΔ.ⵠⲆⲆ = Ch;
      }
      var b = (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600 * aq;
      var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Xn.rotate(this.angle);
      this.ᐃⲆΔⲆ.ⵠⲆⲆ();
      if (this.info & 16) {
        var f = ⵠⵠ[849][mx.time];
      } else {
        f = ⵠⵠ[193][mx.time];
      }
      var g = -f.width * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
      var a = this.ᐃⲆΔⲆ.ᐃⵠⲆ * -f.height;
      Up(Xn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠⵠ[869][mx.time];
      } else {
        f = ⵠⵠ[194][mx.time];
      }
      Xn.translate(0, f.height / 2);
      Up(Xn, f, c - f.width / 2, -f.height + d);
    }
    Xn.restore();
  }
  function mv() {
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = zg;
      }
      var a = aq * ((1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600);
      var b = Math.sin(this.ⵠΔΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠΔΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Xn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Xn.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[157][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + vx * 3) % (Math.PI * 2);
    }
    Xn.rotate(this.rotate);
    ΔΔ = ⵠⵠ[1214][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
  }
  function nv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (ⵠᐃⵠ.Ⲇᐃⵠᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + vx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - vx, 1);
    }
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    this.rotate.ⵠⲆⲆ();
    a = ⵠⵠ[449][mx.time];
    ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.width * this.scale;
    ΔⲆⲆ = -a.height * this.ᐃΔΔΔ.ᐃⵠⲆ * this.scale;
    Up(Xn, a, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && Kj == this.ⵠΔΔ.ᐃᐃᐃ) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var a = ⵠⵠ[463];
      Up(Xn, a, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    a = ⵠⵠ[451][mx.time];
    ⵠⵠᐃ = this.scale * (this.ᐃΔΔΔ.ᐃⵠⲆ * -a.width);
    ΔⲆⲆ = this.scale * (-a.height * this.ᐃΔΔΔ.ᐃⵠⲆ);
    Xn.save();
    Xn.translate(aq * -30, aq * 70);
    Xn.rotate(this.rotate.ᐃⵠⲆ);
    Up(Xn, a, aq * -10, aq * -40, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      a = ⵠⵠ[466];
      Up(Xn, a, aq * -10, aq * -40, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    a = ⵠⵠ[452][mx.time];
    Xn.save();
    Xn.translate(aq * 30, aq * 70);
    Xn.rotate(-this.rotate.ᐃⵠⲆ);
    Up(Xn, a, aq * 10 - ⵠⵠᐃ, aq * -40, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      a = ⵠⵠ[467];
      Up(Xn, a, aq * 10 - ⵠⵠᐃ, aq * -40, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    Xn.restore();
  }
  function ov() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    this.ⲆⵠᐃⵠΔ.ⵠⲆⲆ();
    ΔΔ = ⵠⵠ[1192][mx.time];
    ⵠⵠᐃ = -ΔΔ.width * this.ⲆⵠᐃⵠΔ.ᐃⵠⲆ;
    ΔⲆⲆ = this.ⲆⵠᐃⵠΔ.ᐃⵠⲆ * -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function pv() {
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = false;
      }
      var a = vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600 * aq;
      var b = a * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var c = a * Math.cos(this.ⵠΔΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[135][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
  }
  function qv() {
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = yl;
      }
      var a = aq * (vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600);
      var b = Math.sin(this.ⵠΔΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠΔΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Xn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Xn.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[155][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + vx * 3) % (Math.PI * 2);
    }
    Xn.rotate(this.rotate);
    ΔΔ = ⵠⵠ[1206][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
  }
  function rv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == Kk) {
        this.ⵠΔΔ.ⵠⲆⲆ = false;
      }
      var a = aq * ((1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600);
      var b = Math.sin(this.ⵠΔΔ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠΔΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info === 0) {
      ΔΔ = ⵠⵠ[183][mx.time];
    } else {
      ΔΔ = ⵠⵠ[802][mx.time][this.info - 1];
    }
    Up(Xn, ΔΔ, -ΔΔ.width / 2 + b, -ΔΔ.height / 2 + c);
    Xn.restore();
  }
  function sv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == Kk) {
        this.ⵠΔΔ.ⵠⲆⲆ = false;
      }
      var b = (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600 * aq;
      var c = Math.sin(this.ⵠΔΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⵠΔΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Xn.rotate(this.angle);
      this.ᐃⲆΔⲆ.ⵠⲆⲆ();
      if (this.info & 16) {
        var f = ⵠⵠ[985][mx.time];
      } else {
        f = ⵠⵠ[210][mx.time];
      }
      var g = this.ᐃⲆΔⲆ.ᐃⵠⲆ * -f.width;
      var a = this.ᐃⲆΔⲆ.ᐃⵠⲆ * -f.height;
      Up(Xn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠⵠ[986][mx.time];
      } else {
        f = ⵠⵠ[211][mx.time];
      }
      Xn.translate(0, f.height / 2);
      Up(Xn, f, c - f.width / 2, -f.height + d);
    }
    Xn.restore();
  }
  function tv(a, b) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ΔΔ = ⵠⵠ[a][this.info][mx.time];
    ⵠⵠᐃ = -ΔΔ.width / 2;
    ΔⲆⲆ = -ΔΔ.height / 2;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && y == this.ⵠΔΔ.ᐃᐃᐃ) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var c = mw(this.info, ΔΔ, ⲆᐃΔΔⵠⲆΔΔⵠ);
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
  }
  function uv(a, b) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    c = ⵠⵠ[a][mx.time];
    ⵠⵠᐃ = -c.width;
    ΔⲆⲆ = -c.height;
    Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && rr == this.ⵠΔΔ.ᐃᐃᐃ) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var c = ⵠⵠ[b];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
  }
  function vv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = yl;
      }
      var b = vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600 * aq;
      var c = Math.sin(this.ⵠΔΔ.angle - this.angle) * b;
      var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Xn.rotate(this.angle);
      this.ᐃⲆΔⲆ.ⵠⲆⲆ();
      if (this.info & 16) {
        var f = ⵠⵠ[953][mx.time];
      } else {
        f = ⵠⵠ[204][mx.time];
      }
      var g = this.ᐃⲆΔⲆ.ᐃⵠⲆ * -f.width;
      var a = -f.height * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
      Up(Xn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠⵠ[954][mx.time];
      } else {
        f = ⵠⵠ[205][mx.time];
      }
      Xn.translate(0, f.height / 2);
      Up(Xn, f, c - f.width / 2, -f.height + d);
    }
    Xn.restore();
  }
  function wv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ΔⲆⲆᐃᐃ.length == 0 || this.ΔⲆⲆᐃᐃ[this.ΔⲆⲆᐃᐃ.length - 1] <= Cr.ᐃᐃΔᐃΔᐃⵠ)) {
      this.ΔⲆⲆᐃᐃ.push(Cr.ᐃᐃⲆΔⲆⵠΔ);
    }
    for (var a = 0; a < this.ΔⲆⲆᐃᐃ.length; a++) {
      this.ΔⲆⲆᐃᐃ[a] = Math.max(0, this.ΔⲆⲆᐃᐃ[a] - vx * Cr.ⲆⲆΔⵠⲆⲆᐃ);
      Xn.globalAlpha = this.ΔⲆⲆᐃᐃ[a] / 1.3;
      var b = (1 - this.ΔⲆⲆᐃᐃ[a]) * 40;
      var c = (1 - this.ΔⲆⲆᐃᐃ[a]) * 35 + 10;
      vd(Xn, aq * -68 + Math.sin(-this.angle - Math.PI / 2) * b, aq * -20 + Math.cos(-this.angle - Math.PI / 2) * b, c);
      gd(Xn, "#333333");
    }
    Xn.globalAlpha = 1;
    if (this.ΔⲆⲆᐃᐃ.length > 0 && this.ΔⲆⲆᐃᐃ[0] === 0) {
      this.ΔⲆⲆᐃᐃ.shift();
    }
    Xn.restore();
  }
  function xv() {
    if (this.info !== 10) {
      for (var b = this.info & 15, c = 0; b > c; c++) {
        this.ⵠⵠᐃⲆ[c].ΔⵠᐃⲆ(207, this.x, this.y);
      }
      Xn.save();
      Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
      Xn.rotate(this.angle);
      if (this.ⵠΔΔ.ⵠⲆⲆ) {
        if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
          this.ⵠΔΔ.ⵠⲆⲆ = false;
        }
        var d = aq * ((1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600);
        var e = Math.sin(this.ⵠΔΔ.angle - this.angle) * d;
        var f = d * Math.cos(this.ⵠΔΔ.angle - this.angle);
      } else {
        e = 0;
        f = 0;
      }
      if (this.info & 16) {
        var g = ⵠⵠ[958][mx.time];
      } else {
        g = ⵠⵠ[957][mx.time];
      }
      Up(Xn, g, -g.width / 2 + e, -g.width / 2 + f);
      Xn.restore();
    }
  }
  function yv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (ⵠᐃⵠ.Ⲇᐃⵠᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + vx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - vx, 1);
    }
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    this.rotate.ⵠⲆⲆ();
    a = this.info === 0 ? ⵠⵠ[232][mx.time] : ⵠⵠ[1068][mx.time];
    ⵠⵠᐃ = this.scale * (-a.width * this.ᐃΔΔΔ.ᐃⵠⲆ);
    ΔⲆⲆ = -a.height * this.ᐃΔΔΔ.ᐃⵠⲆ * this.scale;
    Up(Xn, a, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == 0) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var a = ⵠⵠ[1077];
      Up(Xn, a, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    a = this.info === 0 ? ⵠⵠ[1072][mx.time] : ⵠⵠ[1071][mx.time];
    ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.width * this.scale;
    ΔⲆⲆ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.height * this.scale;
    Xn.save();
    Xn.translate(aq * -40, aq * 10);
    Xn.rotate(this.rotate.ᐃⵠⲆ);
    Up(Xn, a, aq * -ⵠⵠᐃ / 4, -ΔⲆⲆ * aq / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      a = ⵠⵠ[1078];
      Up(Xn, a, -ⵠⵠᐃ * aq / 4, aq * -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    a = this.info === 0 ? ⵠⵠ[1075][mx.time] : ⵠⵠ[1074][mx.time];
    Xn.save();
    Xn.translate(aq * 40, aq * 10);
    Xn.rotate(-this.rotate.ᐃⵠⲆ);
    Up(Xn, a, -ⵠⵠᐃ * aq / 4, aq * -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      a = ⵠⵠ[1079];
      Up(Xn, a, aq * -ⵠⵠᐃ / 4, aq * -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    Xn.restore();
  }
  function zv() {
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    a = this.info === 0 ? ⵠⵠ[1042][mx.time] : ⵠⵠ[1044][mx.time];
    ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.width;
    ΔⲆⲆ = -a.height * this.ᐃΔΔΔ.ᐃⵠⲆ;
    Up(Xn, a, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == 0) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var a = ⵠⵠ[1045];
      Up(Xn, a, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
  }
  function Av() {
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    a = this.info === 0 ? ⵠⵠ[248][mx.time] : ⵠⵠ[1222][mx.time];
    ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.width;
    ΔⲆⲆ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.height;
    Up(Xn, a, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && Kj == this.ⵠΔΔ.ᐃᐃᐃ) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var a = ⵠⵠ[1223];
      Up(Xn, a, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
  }
  function Bv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    this.ΔΔΔⵠⵠ.ⵠⲆⲆ();
    ΔΔ = ⵠⵠ[288][mx.time];
    ⵠⵠᐃ = this.ΔΔΔⵠⵠ.ᐃⵠⲆ * -ΔΔ.width;
    ΔⲆⲆ = -ΔΔ.height * this.ΔΔΔⵠⵠ.ᐃⵠⲆ;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    this.ⲆⵠᐃⵠΔ.ⵠⲆⲆ();
    ΔΔ = ⵠⵠ[289][mx.time];
    ⵠⵠᐃ = -ΔΔ.width * this.ⲆⵠᐃⵠΔ.ᐃⵠⲆ;
    ΔⲆⲆ = this.ⲆⵠᐃⵠΔ.ᐃⵠⲆ * -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function Cv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = No;
      }
      var b = aq * (vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600);
      var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var d = b * Math.cos(this.ⵠΔΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Xn.rotate(this.angle);
      this.ᐃⲆΔⲆ.ⵠⲆⲆ();
      if (this.info & 16) {
        var f = ⵠⵠ[812][mx.time];
      } else {
        f = ⵠⵠ[188][mx.time];
      }
      var g = -f.width * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
      var a = -f.height * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
      Up(Xn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠⵠ[813][mx.time];
      } else {
        f = ⵠⵠ[189][mx.time];
      }
      Xn.translate(0, f.height / 2);
      Up(Xn, f, c - f.width / 2, -f.height + d);
    }
    Xn.restore();
  }
  function Dv(f, e, i, j, k, n, a, o, p) {
    if (Wa === o) {
      o = 0;
    }
    for (var h = f; h <= e; h++) {
      for (var q = i; j >= q; q++) {
        var r = jx.ΔΔⵠⵠ[h][q];
        if (r !== fo && r[n] !== Uk) {
          var t = r[n];
          var w = ⵠⵠ[k][mx.time][t.ᐃⵠΔⵠⲆⲆⵠ];
          Up(Xn, w, nx.ᐃΔΔ.x + t.x - w.width / (ᐃⲆᐃΔⵠ * 4), nx.ᐃΔΔ.y + t.y - w.height / (ᐃⲆᐃΔⵠ * 4), w.width / (ᐃⲆᐃΔⵠ * 2), w.height / (ᐃⲆᐃΔⵠ * 2));
          if (lx.ⲆᐃΔⲆΔ) {
            var x = 2147483648;
            var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(y * 5 * ⵠⵠ[1025][mx.time][t.ᐃⵠΔⵠⲆⲆⵠ].length);
              w = ⵠⵠ[1025][mx.time][t.ᐃⵠΔⵠⲆⲆⵠ][y];
              Up(Xn, w, nx.ᐃΔΔ.x + t.x - w.width / (ᐃⲆᐃΔⵠ * 4), nx.ᐃΔΔ.y + t.y - w.height / (ᐃⲆᐃΔⵠ * 4), w.width / (ᐃⲆᐃΔⵠ * 2), w.height / (ᐃⲆᐃΔⵠ * 2));
            } else if (t.ΔΔᐃΔⵠⲆⵠ !== 0) {
              w = ⵠⵠ[1026][mx.time];
              var z = (ev + h % 2 * 30) % 60;
              Xn.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
              Up(Xn, w, nx.ᐃΔΔ.x + t.x - w.width / (ᐃⲆᐃΔⵠ * 4), nx.ᐃΔΔ.y + t.y - w.height / (ᐃⲆᐃΔⵠ * 4) - 30 + z, w.width / (ᐃⲆᐃΔⵠ * 2), w.height / (ᐃⲆᐃΔⵠ * 2));
              Xn.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function Ev() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    var a = ⵠᐃⵠ.Ⲇᐃⵠᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + vx / 2, 1.8) : Math.max(this.scale - vx, 1);
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    this.rotate.ⵠⲆⲆ();
    this.ⵠΔⵠΔ = a < 350 ? Math.max(0, this.ⵠΔⵠΔ - vx * 2.2) : Math.min(1, this.ⵠΔⵠΔ + vx * 2.2);
    b = ⵠⵠ[1135][mx.time];
    ⵠⵠᐃ = -b.width * this.ᐃΔΔΔ.ᐃⵠⲆ * this.scale;
    ΔⲆⲆ = -b.height * this.ᐃΔΔΔ.ᐃⵠⲆ * this.scale;
    Xn.globalAlpha = 1 - this.ⵠΔⵠΔ;
    Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    b = ⵠⵠ[1119][mx.time];
    ⵠⵠᐃ = this.scale * (this.ᐃΔΔΔ.ᐃⵠⲆ * -b.width);
    ΔⲆⲆ = -b.height * this.ᐃΔΔΔ.ᐃⵠⲆ * this.scale;
    Xn.globalAlpha = this.ⵠΔⵠΔ;
    Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == 0) {
        this.action -= 2;
      }
      Xn.globalAlpha = (1 - this.ⵠΔⵠΔ) * (0.6 - this.ⵠΔΔ.ᐃⵠⲆ);
      var b = ⵠⵠ[1136];
      ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -b.width * this.scale;
      ΔⲆⲆ = this.scale * (this.ᐃΔΔΔ.ᐃⵠⲆ * -b.height);
      Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = this.ⵠΔⵠΔ * (0.6 - this.ⵠΔΔ.ᐃⵠⲆ);
      b = ⵠⵠ[1128];
      ⵠⵠᐃ = this.scale * (-b.width * this.ᐃΔΔΔ.ᐃⵠⲆ);
      ΔⲆⲆ = -b.height * this.ᐃΔΔΔ.ᐃⵠⲆ * this.scale;
      Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    b = ⵠⵠ[1122][mx.time];
    ⵠⵠᐃ = this.scale * (this.ᐃΔΔΔ.ᐃⵠⲆ * -b.width);
    ΔⲆⲆ = this.scale * (-b.height * this.ᐃΔΔΔ.ᐃⵠⲆ);
    Xn.save();
    Xn.translate(aq * -40, aq * 80);
    Xn.rotate(this.rotate.ᐃⵠⲆ);
    Xn.globalAlpha = this.ⵠΔⵠΔ;
    Up(Xn, b, -ⵠⵠᐃ * aq / 4, -ΔⲆⲆ * aq / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      Xn.globalAlpha = (0.6 - this.ⵠΔΔ.ᐃⵠⲆ) * this.ⵠΔⵠΔ;
      b = ⵠⵠ[1129];
      Up(Xn, b, aq * -ⵠⵠᐃ / 4, aq * -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    b = ⵠⵠ[1125][mx.time];
    Xn.save();
    Xn.translate(aq * 40, aq * 80);
    Xn.rotate(-this.rotate.ᐃⵠⲆ);
    Xn.globalAlpha = this.ⵠΔⵠΔ;
    Up(Xn, b, aq * -ⵠⵠᐃ / 4, -ΔⲆⲆ * aq / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      Xn.globalAlpha = (0.6 - this.ⵠΔΔ.ᐃⵠⲆ) * this.ⵠΔⵠΔ;
      b = ⵠⵠ[1130];
      Up(Xn, b, -ⵠⵠᐃ * aq / 4, aq * -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    Xn.globalAlpha = 1;
    Xn.restore();
    Xn.restore();
  }
  function Fv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = false;
      }
      var b = vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600 * aq;
      var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Xn.rotate(this.angle);
      this.ᐃⲆΔⲆ.ⵠⲆⲆ();
      if (this.info & 16) {
        var f = ⵠⵠ[668][mx.time];
      } else {
        f = ⵠⵠ[132][mx.time];
      }
      var g = -f.width * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
      var a = -f.height * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
      Up(Xn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      this.ⵠᐃⵠΔⲆⵠΔ.ⵠⲆⲆ();
      if (this.info & 16) {
        f = ⵠⵠ[638][mx.time];
      } else {
        f = ⵠⵠ[134][mx.time];
      }
      Xn.translate(0, f.height / 2);
      Xn.rotate(this.ⵠᐃⵠΔⲆⵠΔ.ᐃⵠⲆ);
      Up(Xn, f, c - f.width / 2, -f.height + d);
    }
    Xn.restore();
  }
  function Gv() {
    if (this.info >= 10) {
      Xn.save();
      Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
      Xn.rotate(this.angle);
      if (this.ⵠΔΔ.ⵠⲆⲆ) {
        if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
          this.ⵠΔΔ.ⵠⲆⲆ = ja;
        }
        var b = (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600 * aq;
        var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
        var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.ᐃⲆΔⲆ.ⵠⲆⲆ();
      var e = ⵠⵠ[206][mx.time];
      var f = this.ᐃⲆΔⲆ.ᐃⵠⲆ * -e.width;
      var g = -e.height * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
      Up(Xn, e, -f / 2 + c, -g / 2 + d, f, g);
      Xn.restore();
    }
  }
  function Hv() {
    if (this.info !== 10) {
      Xn.save();
      Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
      Xn.rotate(this.angle);
      if (this.ⵠΔΔ.ⵠⲆⲆ) {
        if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && pk == this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ) {
          this.ⵠΔΔ.ⵠⲆⲆ = pk;
        }
        var b = (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600 * aq;
        var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
        var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      if (this.info & 16) {
        var e = ⵠⵠ[623][mx.time];
      } else {
        e = ⵠⵠ[287][mx.time];
      }
      Up(Xn, e, -e.width / 2 + c, -e.width / 2 + d);
      Xn.restore();
      for (var f = this.info & 15, g = 0; g < f; g++) {
        this.ⵠⵠᐃⲆ[g].ΔⵠᐃⲆ(294);
      }
    }
  }
  function Iv() {
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = false;
      }
      var a = (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600 * aq;
      var b = Math.sin(this.ⵠΔΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠΔΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Xn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Xn.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[156][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + vx * 3) % (Math.PI * 2);
    }
    Xn.rotate(this.rotate);
    ΔΔ = ⵠⵠ[1210][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
  }
  function Jv() {
    if (this.info >= 10) {
      Xn.save();
      Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
      Xn.rotate(this.angle);
      if (this.ⵠΔΔ.ⵠⲆⲆ) {
        if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
          this.ⵠΔΔ.ⵠⲆⲆ = zg;
        }
        var b = aq * ((1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600);
        var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
        var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.ᐃⲆΔⲆ.ⵠⲆⲆ();
      var e = ⵠⵠ[115][mx.time];
      var f = this.ᐃⲆΔⲆ.ᐃⵠⲆ * -e.width;
      var g = -e.height * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
      Up(Xn, e, -f / 2 + c, -g / 2 + d, f, g);
      Xn.restore();
    }
  }
  function Kv() {
    var a = jt;
    var b = Wa;
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    this.rotate.ⵠⲆⲆ();
    if (this.ⲆⲆᐃⲆⲆ >= 0.1 && this.ⲆⲆᐃⲆⲆ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ⲆⲆᐃⲆⲆ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      a = ⵠⵠ[1150][mx.time];
      ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.width;
      ΔⲆⲆ = -a.height * this.ᐃΔΔΔ.ᐃⵠⲆ;
      Xn.globalAlpha = c;
      Up(Xn, a, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      b = ⵠⵠ[1151];
    }
    if (this.ⲆⲆᐃⲆⲆ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ⲆⲆᐃⲆⲆ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = ⵠⵠ[1152][mx.time];
      ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.width;
      ΔⲆⲆ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.height;
      Xn.globalAlpha = c;
      Up(Xn, a, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      b = ⵠⵠ[1153];
    }
    if (this.action & 2 && b !== jt) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == 0) {
        this.action -= 2;
      }
      Xn.globalAlpha = c * (0.6 - this.ⵠΔΔ.ᐃⵠⲆ);
      ⵠⵠᐃ = -b.width * this.ᐃΔΔΔ.ᐃⵠⲆ;
      ΔⲆⲆ = -b.height * this.ᐃΔΔΔ.ᐃⵠⲆ;
      Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    }
    Xn.globalAlpha = 1;
    Xn.restore();
  }
  function Lv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    this.ⵠⵠⵠᐃᐃⲆᐃ = Math.min(1, this.ⵠⵠⵠᐃᐃⲆᐃ + vx * 2);
    Xn.globalAlpha = Math.min(1, Math.max(0, ⵠᐃⵠ.Ⲇᐃⵠᐃ(this, this.r) / 80)) * this.ⵠⵠⵠᐃᐃⲆᐃ;
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    ΔΔ = ⵠⵠ[247][mx.time][this.ᐃᐃⲆⵠΔ];
    if (this.ᐃᐃⲆⵠΔ < 2) {
      ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -ΔΔ.width;
      ΔⲆⲆ = -ΔΔ.height * this.ᐃΔΔΔ.ᐃⵠⲆ;
    } else if (this.ΔⲆΔⵠΔⲆΔ === 0) {
      ⵠⵠᐃ = -ΔΔ.width;
      ΔⲆⲆ = -ΔΔ.height;
    } else {
      ⵠⵠᐃ = -ΔΔ.width * 1.35;
      ΔⲆⲆ = -ΔΔ.height * 1.35;
    }
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.globalAlpha = 1;
    Xn.restore();
  }
  function Mv(a, b, c) {
    if (a >= 0) {
      ΔΔ = ⵠⵠ[a][mx.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          af(a, ΔΔ, -ΔΔ.width / 4 - aq * (0 + b), -ΔΔ.height / 4 + (c + 35) * aq);
          break;
        case 74:
          af(a, ΔΔ, -ΔΔ.width / 4 - (1 + b) * aq, -ΔΔ.height / 4 + aq * (c + 45));
          break;
        case 75:
        case 76:
          af(a, ΔΔ, -ΔΔ.width / 4 - aq * (1 + b), -ΔΔ.height / 4 + aq * (c + 40));
      }
    }
  }
  function Nv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && Uq == this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ) {
        this.ⵠΔΔ.ⵠⲆⲆ = false;
      }
      var b = aq * ((1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600);
      var c = Math.sin(this.ⵠΔΔ.angle - this.angle) * b;
      var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Xn.rotate(this.angle);
      this.ᐃⲆΔⲆ.ⵠⲆⲆ();
      if (this.info & 16) {
        var f = ⵠⵠ[970][mx.time];
      } else {
        f = ⵠⵠ[208][mx.time];
      }
      var g = -f.width * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
      var a = this.ᐃⲆΔⲆ.ᐃⵠⲆ * -f.height;
      Up(Xn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠⵠ[971][mx.time];
      } else {
        f = ⵠⵠ[209][mx.time];
      }
      Xn.translate(0, f.height / 2);
      Up(Xn, f, c - f.width / 2, -f.height + d);
    }
    Xn.restore();
  }
  function Ov() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && Sr == this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ) {
        this.ⵠΔΔ.ⵠⲆⲆ = No;
      }
      var a = aq * (vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600);
      var b = a * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var c = Math.cos(this.ⵠΔΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.action == 2) {
      ΔΔ = ⵠⵠ[407][mx.time];
    } else {
      ΔΔ = ⵠⵠ[119][mx.time];
    }
    Up(Xn, ΔΔ, -ΔΔ.width / 2 + b, -ΔΔ.height / 2 + c);
    Xn.restore();
  }
  function Pv(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Qv(a) {
    return rg.String.fromCharCode(a);
  }
  function Rv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    this.ⵠⵠΔⵠᐃⵠᐃ.ⵠⲆⲆ();
    this.ᐃᐃΔᐃᐃΔⲆ.ⵠⲆⲆ();
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    c = this.info === 0 ? ⵠⵠ[231][mx.time] : ⵠⵠ[1053][mx.time];
    ⵠⵠᐃ = -c.width * this.ᐃΔΔΔ.ᐃⵠⲆ;
    ΔⲆⲆ = -c.height * this.ᐃΔΔΔ.ᐃⵠⲆ;
    Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == 0) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var c = ⵠⵠ[1056];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ⵠⵠᐃᐃⲆ.ⵠⲆⲆ() && this.ⵠⵠᐃᐃⲆ.ᐃᐃᐃ == 0) {
        this.action -= 4;
      }
      Xn.globalAlpha = 0.6 - this.ⵠⵠᐃᐃⲆ.ᐃⵠⲆ;
      c = ⵠⵠ[1065];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle + b);
    Xn.translate(100, 0);
    Xn.rotate(a);
    c = this.info === 0 ? ⵠⵠ[1060][mx.time] : ⵠⵠ[1059][mx.time];
    ⵠⵠᐃ = -c.width * this.ⵠⵠΔⵠᐃⵠᐃ.ᐃⵠⲆ;
    ΔⲆⲆ = -c.height * this.ⵠⵠΔⵠᐃⵠᐃ.ᐃⵠⲆ;
    Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      c = ⵠⵠ[1057];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Xn.globalAlpha = 0.6 - this.ⵠⵠᐃᐃⲆ.ᐃⵠⲆ;
      c = ⵠⵠ[1066];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle + a + b);
    Xn.translate(100, 0);
    Xn.rotate(a);
    c = this.info === 0 ? ⵠⵠ[1063][mx.time] : ⵠⵠ[1062][mx.time];
    ⵠⵠᐃ = this.ᐃᐃΔᐃᐃΔⲆ.ᐃⵠⲆ * -c.width;
    ΔⲆⲆ = this.ᐃᐃΔᐃᐃΔⲆ.ᐃⵠⲆ * -c.height;
    Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      c = ⵠⵠ[1058];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Xn.globalAlpha = 0.6 - this.ⵠⵠᐃᐃⲆ.ᐃⵠⲆ;
      c = ⵠⵠ[1067];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
  }
  function Sv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = yl;
      }
      var b = vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600 * aq;
      var c = Math.sin(this.ⵠΔΔ.angle - this.angle) * b;
      var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      e = ⵠⵠ[716][mx.time];
      Up(Xn, e, -e.width / 2 + c, -e.height / 2 + d);
      this.up.ⵠⲆⲆ();
      var e = ⵠⵠ[720][mx.time];
      var f = this.up.ᐃⵠⲆ * -e.width;
      var g = -e.height * this.up.ᐃⵠⲆ;
      Up(Xn, e, -f / 2 + aq * 1, -g / 2 + aq * 3, f, g);
    } else {
      e = ⵠⵠ[144][mx.time];
      Up(Xn, e, -e.width / 2 + c, -e.height / 2 + d);
    }
    Xn.restore();
  }
  function Tv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (ⵠᐃⵠ.Ⲇᐃⵠᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + vx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - vx, 1);
    }
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    this.rotate.ⵠⲆⲆ();
    a = this.info === 0 ? ⵠⵠ[233][mx.time] : ⵠⵠ[1083][mx.time];
    ⵠⵠᐃ = this.scale * (-a.width * this.ᐃΔΔΔ.ᐃⵠⲆ);
    ΔⲆⲆ = this.scale * (-a.height * this.ᐃΔΔΔ.ᐃⵠⲆ);
    Up(Xn, a, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == 0) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var a = ⵠⵠ[1092];
      Up(Xn, a, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    a = this.info === 0 ? ⵠⵠ[1087][mx.time] : ⵠⵠ[1086][mx.time];
    ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.width * this.scale;
    ΔⲆⲆ = this.scale * (-a.height * this.ᐃΔΔΔ.ᐃⵠⲆ);
    Xn.save();
    Xn.translate(aq * -40, aq * 10);
    Xn.rotate(this.rotate.ᐃⵠⲆ);
    Up(Xn, a, aq * -ⵠⵠᐃ / 4, -ΔⲆⲆ * aq / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      a = ⵠⵠ[1093];
      Up(Xn, a, aq * -ⵠⵠᐃ / 4, -ΔⲆⲆ * aq / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    a = this.info === 0 ? ⵠⵠ[1090][mx.time] : ⵠⵠ[1089][mx.time];
    Xn.save();
    Xn.translate(aq * 40, aq * 10);
    Xn.rotate(-this.rotate.ᐃⵠⲆ);
    Up(Xn, a, -ⵠⵠᐃ * aq / 4, aq * -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      a = ⵠⵠ[1094];
      Up(Xn, a, -ⵠⵠᐃ * aq / 4, -ΔⲆⲆ * aq / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    Xn.restore();
  }
  function Uv() {
    if ((this.info & 1) == 1) {
      this.ⲆⲆᐃⲆⲆ = Math.min(this.ⲆⲆᐃⲆⲆ + vx, 2.2);
    } else {
      this.ⲆⲆᐃⲆⲆ = Math.max(this.ⲆⲆᐃⲆⲆ - vx, 0);
      this.ΔΔᐃⲆΔⲆⵠ += vx;
      if (this.ΔΔᐃⲆΔⲆⵠ > 0.1) {
        this.ΔΔᐃⲆΔⲆⵠ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ᐃⲆΔⲆ.push(a);
      }
    }
    for (var b = 0; this.ᐃⲆΔⲆ.length > b; b++) {
      a = this.ᐃⲆΔⲆ[b];
      Xn.save();
      Xn.translate(nx.ᐃΔΔ.x + a.x, nx.ᐃΔΔ.y + a.y);
      a.a = Math.min(1, 0 + vx / 2);
      var c = 0;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      Xn.globalAlpha = c * 0.8;
      vd(Xn, 0, 0, a.r);
      gd(Xn, Cr.ⵠᐃΔΔⵠⵠᐃ[mx.time]);
      Xn.restore();
      if (1 === 0) {
        this.ᐃⲆΔⲆ.splice(b, 1);
        b--;
      }
    }
  }
  function Vv() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    this.ⲆⵠᐃⵠΔ.ⵠⲆⲆ();
    ΔΔ = ⵠⵠ[289][mx.time];
    ⵠⵠᐃ = -ΔΔ.width * this.ⲆⵠᐃⵠΔ.ᐃⵠⲆ;
    ΔⲆⲆ = this.ⲆⵠᐃⵠΔ.ᐃⵠⲆ * -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function Wv() {
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && ks == this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ) {
        this.ⵠΔΔ.ⵠⲆⲆ = tl;
      }
      var a = (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600 * aq;
      var b = a * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var c = a * Math.cos(this.ⵠΔΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ᐃΔⲆⲆⵠⵠⵠ = (this.ᐃΔⲆⲆⵠⵠⵠ + vx * 3) % (Math.PI * 2);
    this.ᐃⲆⵠⲆⵠⲆⵠ = (this.ᐃⲆⵠⲆⵠⲆⵠ - vx * 3) % (Math.PI * 2);
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
    Xn.save();
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[151][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
    Xn.save();
    Xn.rotate(this.ᐃΔⲆⲆⵠⵠⵠ);
    ΔΔ = ⵠⵠ[528][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
    Xn.save();
    Xn.rotate(this.ᐃⲆⵠⲆⵠⲆⵠ);
    ΔΔ = ⵠⵠ[527][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
    Xn.restore();
  }
  function Xv() {
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      var a = aq * (vx * (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * 600);
      var b = Math.sin(this.ⵠΔΔ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠΔΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + vx * 0.5) % (Math.PI * 2);
    }
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
    Xn.save();
    Xn.rotate(this.rotate);
    ΔΔ = ⵠⵠ[641][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
    Xn.save();
    Xn.rotate(this.ΔⵠᐃⲆΔΔΔᐃΔ);
    ΔΔ = ⵠⵠ[642][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
    Xn.restore();
  }
  function Zv(a) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    ΔΔ = ⵠⵠ[a][mx.time];
    ⵠⵠᐃ = -ΔΔ.width * this.ᐃΔΔΔ.ᐃⵠⲆ;
    ΔⲆⲆ = -ΔΔ.height * this.ᐃΔΔΔ.ᐃⵠⲆ;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function $v() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == 0) {
        this.ⵠΔΔ.ⵠⲆⲆ = false;
      }
      var b = (1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600 * aq;
      var c = b * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var d = Math.cos(this.ⵠΔΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Xn.rotate(this.angle);
      this.ᐃⲆΔⲆ.ⵠⲆⲆ();
      if (this.info & 16) {
        var f = ⵠⵠ[838][mx.time];
      } else {
        f = ⵠⵠ[191][mx.time];
      }
      var g = -f.width * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
      var a = -f.height * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
      Up(Xn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠⵠ[839][mx.time];
      } else {
        f = ⵠⵠ[192][mx.time];
      }
      Xn.translate(0, f.height / 2);
      Up(Xn, f, c - f.width / 2, -f.height + d);
    }
    Xn.restore();
  }
  function _v() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    this.ⲆⵠᐃⵠΔ.ⵠⲆⲆ();
    ΔΔ = ⵠⵠ[526][mx.time];
    ⵠⵠᐃ = this.ⲆⵠᐃⵠΔ.ᐃⵠⲆ * -ΔΔ.width;
    ΔⲆⲆ = this.ⲆⵠᐃⵠΔ.ᐃⵠⲆ * -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function aw(a, b) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    c = ⵠⵠ[a][mx.time];
    ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -c.width;
    ΔⲆⲆ = this.ᐃΔΔΔ.ᐃⵠⲆ * -c.height;
    Up(Xn, c, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == Ch) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var c = ⵠⵠ[b];
      Up(Xn, c, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
  }
  function bw(b) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    this.ᐃⲆΔⲆ.ⵠⲆⲆ();
    Xn.globalAlpha = 0.3;
    var c = ⵠⵠ[282][mx.time];
    var d = -c.width * this.ᐃⲆΔⲆ.ᐃⵠⲆ;
    var e = this.ᐃⲆΔⲆ.ᐃⵠⲆ * -c.height;
    Up(Xn, c, -d / 2, -e / 2, d, e);
    Xn.globalAlpha = 1;
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && ks == this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ) {
        this.ⵠΔΔ.ⵠⲆⲆ = Uq;
      }
      var f = aq * ((1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600);
      var g = f * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var h = Math.cos(this.ⵠΔΔ.angle - this.angle) * f;
    } else {
      g = 0;
      h = 0;
    }
    c = ⵠⵠ[b][mx.time];
    Up(Xn, c, -c.width / 2 + g, -c.height / 2 + h);
    Xn.restore();
  }
  function cw(a, b) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    c = ⵠⵠ[a][mx.time];
    ⵠⵠᐃ = -c.width * this.ᐃΔΔΔ.ᐃⵠⲆ;
    ΔⲆⲆ = -c.height * this.ᐃΔΔΔ.ᐃⵠⲆ;
    Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == 0) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var c = ⵠⵠ[b];
      Up(Xn, c, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
  }
  function dw(a, b, c) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + b, nx.ᐃΔΔ.y + c);
    Xn.rotate(this.angle);
    Xn.translate(this.x - b, this.y - c);
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    ΔΔ = ⵠⵠ[a][mx.time];
    ⵠⵠᐃ = -ΔΔ.width * this.ᐃΔΔΔ.ᐃⵠⲆ;
    ΔⲆⲆ = this.ᐃΔΔΔ.ᐃⵠⲆ * -ΔΔ.height;
    Up(Xn, ΔΔ, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
    Xn.restore();
  }
  function ew() {
    if (this.ⵠΔΔ.ⵠⲆⲆ) {
      if (this.ⵠΔΔ.ᐃⵠⵠⵠ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃᐃᐃ == yl) {
        this.ⵠΔΔ.ⵠⲆⲆ = Uq;
      }
      var a = aq * ((1 - this.ⵠΔΔ.ᐃⵠⵠⵠ.ᐃⵠⲆ) * vx * 600);
      var b = a * Math.sin(this.ⵠΔΔ.angle - this.angle);
      var c = a * Math.cos(this.ⵠΔΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ᐃΔⲆⲆⵠⵠⵠ = (this.ᐃΔⲆⲆⵠⵠⵠ + vx * 3) % (Math.PI * 2);
    this.ᐃⲆⵠⲆⵠⲆⵠ = (this.ᐃⲆⵠⲆⵠⲆⵠ - vx * 3) % (Math.PI * 2);
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x + b, nx.ᐃΔΔ.y + this.y + c);
    Xn.save();
    Xn.rotate(this.angle);
    ΔΔ = ⵠⵠ[152][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
    Xn.save();
    Xn.rotate(this.ᐃΔⲆⲆⵠⵠⵠ);
    ΔΔ = ⵠⵠ[1194][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
    Xn.save();
    Xn.rotate(this.ᐃⲆⵠⲆⵠⲆⵠ);
    ΔΔ = ⵠⵠ[1193][mx.time];
    Up(Xn, ΔΔ, -ΔΔ.width / 2, -ΔΔ.height / 2);
    Xn.restore();
    Xn.restore();
  }
  function fw() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    Xn.rotate(this.angle);
    if (ⵠᐃⵠ.Ⲇᐃⵠᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + vx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - vx, 1);
    }
    this.ᐃΔΔΔ.ⵠⲆⲆ();
    this.rotate.ⵠⲆⲆ();
    a = ⵠⵠ[450][mx.time];
    ⵠⵠᐃ = -a.width * this.ᐃΔΔΔ.ᐃⵠⲆ * this.scale;
    ΔⲆⲆ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.height * this.scale;
    Up(Xn, a, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == 0) {
        this.action -= 2;
      }
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      var a = ⵠⵠ[464];
      Up(Xn, a, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    a = ⵠⵠ[453][mx.time];
    ⵠⵠᐃ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.width * this.scale;
    ΔⲆⲆ = this.ᐃΔΔΔ.ᐃⵠⲆ * -a.height * this.scale;
    Xn.save();
    Xn.translate(aq * -60, aq * 20);
    Xn.rotate(this.rotate.ᐃⵠⲆ);
    Up(Xn, a, -ⵠⵠᐃ * aq / 4, aq * -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      a = ⵠⵠ[468];
      Up(Xn, a, aq * -ⵠⵠᐃ / 4, -ΔⲆⲆ * aq / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    a = ⵠⵠ[454][mx.time];
    Xn.save();
    Xn.translate(aq * 60, aq * 20);
    Xn.rotate(-this.rotate.ᐃⵠⲆ);
    Up(Xn, a, -ⵠⵠᐃ * aq / 4, -ΔⲆⲆ * aq / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
    if (this.action & 2) {
      Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
      a = ⵠⵠ[469];
      Up(Xn, a, aq * -ⵠⵠᐃ / 4, aq * -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
      Xn.globalAlpha = 1;
    }
    Xn.restore();
    Xn.restore();
  }
  function gw(a) {
    if (a > 0) {
      var b = ⵠⵠ[a][mx.time];
      switch (a) {
        case 58:
          Aw(a, b, -b.width / 2 + aq * 2, -b.height / 2 - aq * 5);
          break;
        case 10:
          Aw(a, b, -b.width / 2, -b.height / 2 - aq * 18);
          break;
        case 11:
          Aw(a, b, -b.width / 2, -b.height / 2 - aq * 10);
          break;
        case 23:
          Aw(a, b, -b.width / 2, -b.height / 2 - aq * 19);
          break;
        case 24:
          af(a, b, -b.width / 4, -b.height / 4 - aq * 20);
          break;
        case 25:
          Aw(a, b, -b.width / 2 - aq * 1, -b.height / 2 - aq * 23);
          break;
        case 26:
          Aw(a, b, -b.width / 2, -b.height / 2 - aq * 5);
          break;
        case 27:
          Aw(a, b, -b.width / 2, -b.height / 2 - aq * 2);
          break;
        case 43:
          Aw(a, b, -b.width / 2 + aq * 1.5, -b.height / 2 - aq * 1);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          af(a, b, -b.width / 4, -b.height / 4 + aq * 2);
          break;
        case 41:
        case 42:
          Aw(a, b, -b.width / 2 - aq * 5, -b.height / 2 - aq * 2);
          break;
        case 40:
          Aw(a, b, -b.width / 2, -b.height / 2 - aq * 2);
          break;
        case 85:
          Aw(a, b, -b.width / 2, -b.height / 2 - aq * 2);
          break;
        case 48:
          Aw(a, b, -b.width / 2, -b.height / 2 - aq * 2);
          break;
        case 47:
          Aw(a, b, -b.width / 2 + aq * 2, -b.height / 2);
          break;
        case 59:
          Aw(a, b, -b.width / 2, -b.height / 2 - aq * 5);
          break;
        case 77:
        case 78:
        case 79:
          Aw(a, b, -b.width / 2 - aq * 1, -b.height / 2);
          break;
        case 83:
          Aw(a, b, -b.width / 2, -b.height / 2 + aq * 2);
          break;
        case 84:
        case 86:
          Aw(a, b, -b.width / 2, -b.height / 2 + aq * 8);
          break;
        case 61:
          Aw(a, b, -b.width / 2, -b.height / 2 - aq * 4);
      }
    }
  }
  function hw() {
    if (!this.ⲆⵠΔΔⵠ && this.ⲆΔⵠⵠⲆ !== 0) {
      if (this.r.x != this.x || this.r.y != this.y) {
        var a = (ⵠᐃⵠ.ⵠᐃᐃᐃⲆᐃᐃ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ⲆⵠⲆⲆᐃ = ⵠᐃⵠ.ⵠⵠᐃᐃⲆΔᐃ(a, this.ⲆⵠⲆⲆᐃ);
        this.ⲆⵠⲆⲆᐃ = ⵠᐃⵠ.ⵠⵠⲆⲆⵠ(this.ⲆⵠⲆⲆᐃ, a, 0.018);
      }
      Xn.save();
      Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
      Xn.rotate(this.ⲆⵠⲆⲆᐃ);
      if (this.ⲆΔⵠⵠⲆ === 223) {
        if (this.ⲆΔΔΔⵠ > 50 || this.ⵠΔΔᐃⵠ > 0) {
          if (this.ⲆΔΔΔⵠ > 50) {
            this.ⵠΔΔᐃⵠ = Math.min(1, this.ⵠΔΔᐃⵠ + vx);
          } else {
            this.ⵠΔΔᐃⵠ = Math.max(0, this.ⵠΔΔᐃⵠ - vx);
          }
          Xn.globalAlpha = this.ⵠΔΔᐃⵠ;
          var b = ⵠⵠ[225][mx.time];
          af(225, b, -b.width / 4, -b.height / 4);
          Xn.globalAlpha = 1;
        }
        b = ⵠⵠ[223][mx.time];
        af(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⵠⵠⲆ === 229) {
        this.ⲆⵠⵠΔⲆ = ⵠᐃⵠ.ⵠⵠⲆⲆⵠ(this.ⲆⵠⵠΔⲆ, this.ⲆΔΔΔⵠ, 0.018);
        this.ⲆⵠⲆⵠⵠΔⲆ.ⵠⲆⲆ();
        if (this.ⲆΔΔΔⵠ > 85) {
          this.ⵠΔΔᐃⵠ = Math.min(1, this.ⵠΔΔᐃⵠ + vx / 4);
        } else {
          this.ⵠΔΔᐃⵠ = Math.max(0.1, this.ⵠΔΔᐃⵠ - vx);
        }
        b = ⵠⵠ[1100][mx.time];
        af(1100, b, -b.width / 4, -b.height / 4);
        b = ⵠⵠ[1103][mx.time];
        ⵠⵠᐃ = -b.width;
        ΔⲆⲆ = -b.height;
        Xn.save();
        Xn.translate(aq * -20, aq * -20);
        Xn.rotate(this.ⲆⵠⲆⵠⵠΔⲆ.ᐃⵠⲆ * this.ⵠΔΔᐃⵠ);
        Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
        Xn.restore();
        b = ⵠⵠ[1106][mx.time];
        Xn.save();
        Xn.translate(aq * 20, aq * -20);
        Xn.rotate(-this.ⲆⵠⲆⵠⵠΔⲆ.ᐃⵠⲆ * this.ⵠΔΔᐃⵠ);
        Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
        Xn.restore();
      } else if (this.ⲆΔⵠⵠⲆ === 228) {
        this.ⲆⵠⵠΔⲆ = ⵠᐃⵠ.ⵠⵠⲆⲆⵠ(this.ⲆⵠⵠΔⲆ, this.ⲆΔΔΔⵠ, 0.018);
        this.ⲆⵠⲆⵠⵠΔⲆ.ⵠⲆⲆ();
        if (this.ⲆΔΔΔⵠ > 85) {
          this.ⵠΔΔᐃⵠ = Math.min(1, this.ⵠΔΔᐃⵠ + vx / 4);
        } else {
          this.ⵠΔΔᐃⵠ = Math.max(0.1, this.ⵠΔΔᐃⵠ - vx);
        }
        b = ⵠⵠ[1085][mx.time];
        af(1085, b, -b.width / 4, -b.height / 4);
        b = ⵠⵠ[1088][mx.time];
        ⵠⵠᐃ = -b.width;
        ΔⲆⲆ = -b.height;
        Xn.save();
        Xn.translate(aq * -40, aq * -45);
        Xn.rotate(this.ⲆⵠⲆⵠⵠΔⲆ.ᐃⵠⲆ * this.ⵠΔΔᐃⵠ);
        Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
        Xn.restore();
        b = ⵠⵠ[1091][mx.time];
        Xn.save();
        Xn.translate(aq * 40, aq * -45);
        Xn.rotate(-this.ⲆⵠⲆⵠⵠΔⲆ.ᐃⵠⲆ * this.ⵠΔΔᐃⵠ);
        Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
        Xn.restore();
      } else if (this.ⲆΔⵠⵠⲆ === 227) {
        this.ⲆⵠⵠΔⲆ = ⵠᐃⵠ.ⵠⵠⲆⲆⵠ(this.ⲆⵠⵠΔⲆ, this.ⲆΔΔΔⵠ, 0.018);
        this.ⲆⵠⲆⵠⵠΔⲆ.ⵠⲆⲆ();
        if (this.ⲆΔΔΔⵠ > 85) {
          this.ⵠΔΔᐃⵠ = Math.min(1, this.ⵠΔΔᐃⵠ + vx / 4);
        } else {
          this.ⵠΔΔᐃⵠ = Math.max(0.1, this.ⵠΔΔᐃⵠ - vx);
        }
        b = ⵠⵠ[1070][mx.time];
        af(1070, b, -b.width / 4, -b.height / 4);
        b = ⵠⵠ[1073][mx.time];
        ⵠⵠᐃ = -b.width;
        ΔⲆⲆ = -b.height;
        Xn.save();
        Xn.translate(aq * -40, aq * -45);
        Xn.rotate(this.ⲆⵠⲆⵠⵠΔⲆ.ᐃⵠⲆ * this.ⵠΔΔᐃⵠ);
        Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
        Xn.restore();
        b = ⵠⵠ[1076][mx.time];
        Xn.save();
        Xn.translate(aq * 40, aq * -45);
        Xn.rotate(this.ⵠΔΔᐃⵠ * -this.ⲆⵠⲆⵠⵠΔⲆ.ᐃⵠⲆ);
        Up(Xn, b, -ⵠⵠᐃ / 4, -ΔⲆⲆ / 4, ⵠⵠᐃ / 2, ΔⲆⲆ / 2);
        Xn.restore();
      } else if (this.ⲆΔⵠⵠⲆ === 91) {
        this.ⲆⵠⵠΔⲆ = ⵠᐃⵠ.ⵠⵠⲆⲆⵠ(this.ⲆⵠⵠΔⲆ, this.ⲆΔΔΔⵠ, 0.018);
        b = ⵠⵠ[91][mx.time];
        af(91, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⵠⵠⲆ === 230) {
        this.ⲆⵠⵠΔⲆ = ⵠᐃⵠ.ⵠⵠⲆⲆⵠ(this.ⲆⵠⵠΔⲆ, this.ⲆΔΔΔⵠ, 0.018);
        b = ⵠⵠ[236][mx.time];
        af(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⵠⵠⲆ === 224) {
        b = ⵠⵠ[224][mx.time];
        af(224, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⵠⵠⲆ === 239) {
        b = ⵠⵠ[1221][mx.time];
        if (this.ⲆΔΔΔⵠ > 85) {
          this.ⵠΔΔᐃⵠ = Math.min(1, this.ⵠΔΔᐃⵠ + vx / 4);
        } else {
          this.ⵠΔΔᐃⵠ = Math.max(0, this.ⵠΔΔᐃⵠ - vx);
        }
        this.ΔⵠⲆᐃΔ += vx * 60;
        if (this.ΔⵠⲆᐃΔ > 60) {
          this.ΔⵠⲆᐃΔ -= 60;
        }
        var c = this.ⵠΔΔᐃⵠ * (-6 + (this.ΔⵠⲆᐃΔ < 30 ? this.ΔⵠⲆᐃΔ / 30 : 1 - (this.ΔⵠⲆᐃΔ - 30) / 30) * 12);
        af(1221, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⲆΔⵠⵠⲆ === 225) {
        b = ⵠⵠ[1043][mx.time];
        if (this.ⲆΔΔΔⵠ > 85) {
          this.ⵠΔΔᐃⵠ = Math.min(1, this.ⵠΔΔᐃⵠ + vx / 4);
        } else {
          this.ⵠΔΔᐃⵠ = Math.max(0, this.ⵠΔΔᐃⵠ - vx);
        }
        this.ΔⵠⲆᐃΔ += vx * 60;
        if (this.ΔⵠⲆᐃΔ > 60) {
          this.ΔⵠⲆᐃΔ -= 60;
        }
        c = (-6 + (this.ΔⵠⲆᐃΔ < 30 ? this.ΔⵠⲆᐃΔ / 30 : 1 - (this.ΔⵠⲆᐃΔ - 30) / 30) * 12) * this.ⵠΔΔᐃⵠ;
        af(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⲆΔⵠⵠⲆ === 226) {
        var d = Math.PI / 2;
        var e = Math.PI / 4;
        b = ⵠⵠ[1055][mx.time];
        if (this.ⲆΔΔΔⵠ > 85) {
          this.ⵠΔΔᐃⵠ = Math.min(1, this.ⵠΔΔᐃⵠ + vx / 4);
        } else {
          this.ⵠΔΔᐃⵠ = Math.max(0, this.ⵠΔΔᐃⵠ - vx);
        }
        this.ΔⵠⲆᐃΔ += vx * 60;
        if (this.ΔⵠⲆᐃΔ > 60) {
          this.ΔⵠⲆᐃΔ -= 60;
        }
        c = this.ⵠΔΔᐃⵠ * ((this.ΔⵠⲆᐃΔ < 30 ? this.ΔⵠⲆᐃΔ / 30 : 1 - (this.ΔⵠⲆᐃΔ - 30) / 30) * 12 - 6);
        af(1055, b, -b.width / 4 + c, -b.height / 4);
        Xn.restore();
        Xn.save();
        Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        Xn.rotate(Math.PI + this.ⲆⵠⲆⲆᐃ + e);
        Xn.translate(120, c);
        Xn.rotate(d);
        b = ⵠⵠ[1060][mx.time];
        ⵠⵠᐃ = -b.width;
        ΔⲆⲆ = -b.height;
        Up(Xn, b, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
        Xn.restore();
        Xn.save();
        Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
        Xn.rotate(Math.PI + this.ⲆⵠⲆⲆᐃ + d + e);
        Xn.translate(120, c);
        Xn.rotate(d);
        b = ⵠⵠ[1063][mx.time];
        ⵠⵠᐃ = -b.width;
        ΔⲆⲆ = -b.height;
        Up(Xn, b, -ⵠⵠᐃ / 2, -ΔⲆⲆ / 2, ⵠⵠᐃ, ΔⲆⲆ);
      }
      Xn.restore();
    }
  }
  ⲆΔⵠⲆⲆⵠⲆⵠᐃ = 0;
  ⵠᐃⵠᐃΔⲆⵠⵠᐃ = 1;
  ᐃΔᐃᐃⲆΔⵠⵠΔ = 2;
  ΔᐃⵠΔᐃⲆᐃⲆⵠ = 3;
  ⲆᐃΔΔⵠⲆΔΔⵠ = 4;
  ⵠᐃⵠᐃᐃⲆΔ = [[], [], [], [], []];
  ;
  function iw() {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; this.text.length > a && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = Td(aq, this.text[a]);
          this.ⲆᐃⲆΔⵠᐃⲆ[a] = 0;
          this.ⵠⲆⲆⵠΔᐃΔ[a] = 0;
        }
        if (a === 1) {
          this.ⵠⲆⲆⵠΔᐃΔ[0] = ⵠᐃⵠ.ΔΔᐃⲆΔ(this.ᐃⲆΔᐃΔΔⲆ) * 30;
        }
      }
      this.ⲆᐃⲆΔⵠᐃⲆ[0] += vx;
      if (this.text.length > 1) {
        this.ᐃⲆΔᐃΔΔⲆ = Math.min(this.ᐃⲆΔᐃΔΔⲆ + vx, 1);
        if (this.ⲆᐃⲆΔⵠᐃⲆ[0] > 1 && this.ᐃⲆΔᐃΔΔⲆ > 0.5) {
          this.ⲆᐃⲆΔⵠᐃⲆ[1] += vx;
        }
      }
      for (a = 0; this.text.length > a && a < 2; a++) {
        var b = this.ⲆᐃⲆΔⵠᐃⲆ[a];
        if (b > 0) {
          Xn.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
          Up(Xn, this.label[a], -this.label[a].width / 2, -this.ⵠⲆⲆⵠΔᐃΔ[a] + -this.label[a].height / 2 - aq * 110);
        }
      }
      if (this.ⲆᐃⲆΔⵠᐃⲆ[0] > 4) {
        this.ⲆᐃⲆΔⵠᐃⲆ.shift();
        this.text.shift();
        this.ⵠⲆⲆⵠΔᐃΔ.shift();
        this.label.shift();
        this.ᐃⲆΔᐃΔΔⲆ = 0;
      }
    }
    Xn.restore();
  }
  function jw() {
    if (this.enabled && this.ᐃⲆΔⵠΔ >= 0) {
      var a = new Date().getTime() - this.ᐃⲆΔⵠΔ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      if ((a = Math.floor(a / 1000)) < 60) {
        a = 60 - a;
        if (!this.label) {
          this.label = gu(aq, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        if (this.now != a || !this.ⵠᐃΔᐃⵠΔΔ) {
          this.now = a;
          this.ⵠᐃΔᐃⵠΔΔ = gu(aq, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        Up(Xn, this.label, (Yn - this.label.width) / 2, aq * 100);
        Xn.globalAlpha = b;
        Up(Xn, this.ⵠᐃΔᐃⵠΔΔ, (Yn - this.label.width) / 2 - this.ⵠᐃΔᐃⵠΔΔ.width + aq * 15, aq * 100);
        Xn.globalAlpha = 1;
      }
    }
  }
  function kw(a, b) {
    if (this.text) {
      if (this.timeout.ᐃᐃᐃ) {
        Xn.globalAlpha = 1 - this.timeout.ᐃⵠⲆ;
      } else {
        Xn.globalAlpha = 1;
      }
      if (!this.label) {
        this.label = gu(aq, this.text, 40, a, null, null, null, null, null, b, 10);
      }
      Up(Xn, this.label, (Yn - this.label.width) / 2, aq * 50);
      Xn.globalAlpha = 1;
      if (this.timeout.ⵠⲆⲆ() && this.timeout.ᐃᐃᐃ == Sr) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function lw() {
    var c = 0;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        c = 1;
    }
    if (this.ⲆⵠΔΔⵠ) {
      for (var f = 0; this.bubbles.length > f; f++) {
        var j = this.bubbles[f];
        if (j.ⲆⵠᐃⵠⲆ > 0.5) {
          var k = 1 - (j.ⲆⵠᐃⵠⲆ - 0.5) * 2;
        } else {
          k = j.ⲆⵠᐃⵠⲆ * 2;
        }
        Xn.globalAlpha = k;
        var p = ⵠⵠ[540][mx.time][j.id];
        Up(Xn, p, nx.ᐃΔΔ.x + j.x - p.width / 2, nx.ᐃΔΔ.y + j.y - p.height / 2);
        Xn.globalAlpha = 1;
      }
    } else {
      Xn.save();
      Xn.translate(nx.ᐃΔΔ.x + this.x, nx.ᐃΔΔ.y + this.y);
      mx.ⵠⵠᐃⲆⲆⵠᐃⲆΔ(this);
      if (this.action & 16) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                Xn.save();
                var b = a.attack.ᐃⵠⲆ * -3 / Math.PI;
                if (a.attack.ᐃᐃᐃ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ᐃⵠⲆ) / 3;
                } else {
                  c = a.attack.ᐃⵠⲆ;
                }
                Xn.rotate(a.angle - Math.PI / 2 + c);
                Xn.globalAlpha = b / 1.2;
                vd(Xn, aq * -40, aq * 90, aq * 5);
                gd(Xn, "#0B6A84");
                Xn.globalAlpha = b / 1.2;
                vd(Xn, aq * -52, aq * 100, aq * 8);
                gd(Xn, "#0B6A84");
                Xn.globalAlpha = b / 1.2;
                vd(Xn, aq * -30, aq * 95, aq * 4);
                gd(Xn, "#0B6A84");
                Xn.globalAlpha = 1;
                Xn.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (a.ΔⲆΔⵠΔⲆΔ === 1) {
                  break;
                }
                if (a.ⲆⲆⲆⵠⲆ > 0) {
                  var d = Cr.ᐃⲆᐃⵠΔᐃΔ[mx.time];
                } else {
                  d = a.ⵠⲆⲆΔⲆΔⲆ > 0 || a.ⲆᐃᐃⲆᐃ > 0 ? Cr.ⵠⲆⲆⵠⵠⵠΔ[mx.time] : Cr.ⵠΔᐃΔⵠΔⲆ[mx.time];
                }
                b = a.attack.ᐃⵠⲆ * -3 / Math.PI;
                c = a.attack.ᐃᐃᐃ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0);
                if (c === 0) {
                  a.ΔᐃⲆⲆᐃᐃⵠ = a.angle;
                }
                Xn.save();
                Xn.rotate(a.ΔᐃⲆⲆᐃᐃⵠ - Math.PI / 2);
                Xn.globalAlpha = b;
                var e = aq * 25 + c * 25;
                vd(Xn, e, aq * 80, aq * 15);
                gd(Xn, d);
                vd(Xn, -e, aq * 80, aq * 15);
                gd(Xn, d);
                Xn.globalAlpha = 1;
                Xn.restore();
            }
          }
        })(this);
      }
      Xn.save();
      Xn.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ⲆΔⵠⵠⲆ !== 0) {
          this.ⲆᐃⵠᐃⵠΔΔ.ⵠⲆⲆ();
        } else if (this.action & 32) {
          this.ⲆⲆᐃⲆⵠⲆⵠ.ⵠⲆⲆ();
        }
      }
      var q;
      var u = this.ⲆᐃⵠᐃⵠΔΔ.ᐃⵠⲆ;
      var v = this.ⲆⲆᐃⲆⵠⲆⵠ.ᐃⵠⲆ;
      if (this.ΔⲆᐃΔΔ === 85) {
        p = ⵠⵠ[793][mx.time];
        q = 793;
      } else if (this.ΔⲆᐃΔΔ === 20) {
        p = ⵠⵠ[920][mx.time];
        q = 920;
      } else if (this.ΔⲆᐃΔΔ === 21) {
        p = ⵠⵠ[924][mx.time];
        q = 924;
      } else if (this.ΔⲆᐃΔΔ === 22) {
        p = ⵠⵠ[928][mx.time];
        q = 928;
      } else if (this.ΔᐃⲆΔᐃΔⵠ) {
        p = ⵠⵠ[822][mx.time];
        q = 822;
      } else {
        p = ⵠⵠ[7][this.ᐃⵠᐃΔ][mx.time];
        q = 7;
      }
      ᐃⲆΔΔ = ⵠⵠ[286][mx.time];
      var w = p;
      var h = q;
      if (this.action & 16) {
        if (this.attack.ⵠⲆⲆ() && this.attack.ᐃᐃᐃ == 0) {
          this.ᐃΔΔⵠⵠ = !this.ᐃΔΔⵠⵠ;
          this.action -= 16;
          if (this.ᐃΔⲆᐃ == nx.ᐃΔⲆᐃ) {
            nx.control.ᐃΔⵠⲆ = 0;
          }
        }
        if (this.right >= 0) {
          this.ᐃΔΔⵠⵠ = Dg;
        }
        var g = this.ᐃΔΔⵠⵠ ? this.attack.ᐃⵠⲆ : -this.attack.ᐃⵠⲆ / 3;
        var x = this.ᐃΔΔⵠⵠ ? this.attack.ᐃⵠⲆ / 3 : -this.attack.ᐃⵠⲆ;
        if (this.ΔᐃⲆΔᐃΔⵠ) {
          Xn.save();
          Xn.rotate(g);
          Aw(q, p, -p.width / 2 - (66 + u) * aq, -p.height / 2 + (5 + v) * aq);
          Xn.restore();
          Xn.save();
          Xn.rotate(x);
          Aw(q, p, -p.width / 2 + aq * (66 + u), -p.height / 2 + (5 + v) * aq);
          Xn.restore();
        } else if (c === 0) {
          if (this.right === 64) {
            g = -ⵠᐃⵠ.ᐃᐃᐃᐃᐃⵠᐃ(-g);
          }
          Xn.save();
          Xn.rotate(g);
          Aw(286, ᐃⲆΔΔ, -ᐃⲆΔΔ.width / 2 - (49 + u) * aq, -ᐃⲆΔΔ.height / 2 + (15 + v) * aq);
          if (this.right === 28) {
            var b = ⵠⵠ[this.right][this.ⵠΔⲆΔⲆ][mx.time];
            bf(this.right, this.ⵠΔⲆΔⲆ, b, -b.width / 4 - aq * (62 + u), -b.height / 4 + (v + 18) * aq);
          } else {
            iv(this.right, u, v);
          }
          if (q >= 920) {
            af(q, p, -p.width / 4 - aq * (49 + u), -p.height / 4 + (11 + v) * aq);
          } else if (q !== 793) {
            bf(q, this.ᐃⵠᐃΔ, p, -p.width / 4 - aq * (49 + u), -p.height / 4 + (11 + v) * aq);
          } else {
            Aw(q, p, -p.width / 2 - (49 + u) * aq, -p.height / 2 + (11 + v) * aq);
          }
          Xn.restore();
          Xn.save();
          Xn.rotate(x);
          Aw(286, ᐃⲆΔΔ, -ᐃⲆΔΔ.width / 2 + (49 + u) * aq, -ᐃⲆΔΔ.height / 2 + aq * (15 + v));
          if (q >= 920) {
            af(q, p, -p.width / 4 + aq * (49 + u), -p.height / 4 + aq * (11 + v));
          } else if (q !== 793) {
            bf(q, this.ᐃⵠᐃΔ, p, -p.width / 4 + aq * (49 + u), -p.height / 4 + (11 + v) * aq);
          } else {
            Aw(q, p, -p.width / 2 + aq * (49 + u), -p.height / 2 + aq * (11 + v));
          }
          Xn.restore();
        }
      } else if (this.ΔᐃⲆΔᐃΔⵠ) {
        Aw(q, p, -p.width / 2 - aq * (66 + u), -p.height / 2 + aq * (5 + v));
        Aw(q, p, -p.width / 2 + (66 + u) * aq, -p.height / 2 + aq * (5 + v));
      } else if (c === 0) {
        Aw(286, ᐃⲆΔΔ, -ᐃⲆΔΔ.width / 2 - aq * (49 + u), -ᐃⲆΔΔ.height / 2 + aq * (15 + v));
        if (this.right === 28) {
          b = ⵠⵠ[this.right][this.ⵠΔⲆΔⲆ][mx.time];
          bf(this.right, this.ⵠΔⲆΔⲆ, b, -b.width / 4 - (62 + u) * aq, -b.height / 4 + aq * (v + 18));
        } else {
          iv(this.right, u, v);
        }
        if (q >= 920) {
          af(q, p, -p.width / 4 - aq * (49 + u), -p.height / 4 + aq * (11 + v));
        } else if (q !== 793) {
          bf(q, this.ᐃⵠᐃΔ, p, -p.width / 4 - aq * (49 + u), -p.height / 4 + (11 + v) * aq);
        } else {
          Aw(q, p, -p.width / 2 - aq * (49 + u), -p.height / 2 + aq * (11 + v));
        }
        Aw(286, ᐃⲆΔΔ, -ᐃⲆΔΔ.width / 2 + (49 + u) * aq, -ᐃⲆΔΔ.height / 2 + aq * (15 + v));
        if (q >= 920) {
          af(q, p, -p.width / 4 + (49 + u) * aq, -p.height / 4 + (11 + v) * aq);
        } else if (q !== 793) {
          bf(q, this.ᐃⵠᐃΔ, p, -p.width / 4 + aq * (49 + u), -p.height / 4 + (11 + v) * aq);
        } else {
          Aw(q, p, -p.width / 2 + (49 + u) * aq, -p.height / 2 + aq * (11 + v));
        }
      }
      if (this.ⲆⵠⲆΔⵠ && this.ΔⲆᐃΔΔ < 1) {
        p = ⵠⵠ[29][this.ⵠⲆᐃⲆⲆⲆΔ][mx.time];
        bf(29, this.ⵠⲆᐃⲆⲆⲆΔ, p, -p.width / 4, -p.height / 4 - aq * 39);
      }
      if (this.ΔᐃⲆΔᐃΔⵠ) {
        p = ⵠⵠ[820][mx.time];
        Aw(820, p, -p.width / 2, -p.height / 2);
        this.ᐃᐃⲆᐃΔⲆΔ.ⵠⲆⲆ();
        p = ⵠⵠ[821][mx.time];
        Aw(821, p, -p.width / 2, -p.height / 2 + this.ᐃᐃⲆᐃΔⲆΔ.ᐃⵠⲆ);
      } else {
        p = ⵠⵠ[255][this.ᐃⵠᐃΔ][mx.time];
        if (this.ΔⲆᐃΔΔ !== 85 && (bf(255, this.ᐃⵠᐃΔ, p, -p.width / 4, -p.height / 4), this.ΔΔⲆⲆΔ > 0)) {
          p = ⵠⵠ[796][this.ΔΔⲆⲆΔ][mx.time];
          bf(796, this.ΔΔⲆⲆΔ, p, -p.width / 4, -p.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ⵠⵠᐃᐃⲆ.ⵠⲆⲆ() && Vh == this.ⵠⵠᐃᐃⲆ.ᐃᐃᐃ) {
          this.action -= 128;
        }
        Xn.globalAlpha = 0.6 - this.ⵠⵠᐃᐃⲆ.ᐃⵠⲆ;
        if (this.ΔᐃⲆΔᐃΔⵠ) {
          p = ⵠⵠ[825];
          Up(Xn, p, -p.width / 2, -p.height / 2);
        } else {
          p = mw(this.ᐃⵠᐃΔ, ⵠⵠ[255][this.ᐃⵠᐃΔ][0], ⵠᐃⵠᐃΔⲆⵠⵠᐃ);
          Up(Xn, p, p.width / 4, p.height / 4, -p.width / 2, -p.height / 2);
        }
        Xn.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ΔⵠⵠⲆⲆᐃᐃ.ⵠⲆⲆ() && this.ΔⵠⵠⲆⲆᐃᐃ.ᐃᐃᐃ == 0) {
          this.action -= 256;
        }
        Xn.globalAlpha = 0.6 - this.ΔⵠⵠⲆⲆᐃᐃ.ᐃⵠⲆ;
        p = ⵠⵠ[266];
        Up(Xn, p, -p.width / 2, -p.height / 2);
        Xn.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ⵠΔΔ.ⵠⲆⲆ() && this.ⵠΔΔ.ᐃᐃᐃ == yl) {
          this.action -= 2;
        }
        Xn.globalAlpha = 0.6 - this.ⵠΔΔ.ᐃⵠⲆ;
        if (this.ΔᐃⲆΔᐃΔⵠ) {
          p = ⵠⵠ[823];
          Up(Xn, p, -p.width / 2, -p.height / 2);
        } else {
          p = mw(this.ᐃⵠᐃΔ, ⵠⵠ[255][this.ᐃⵠᐃΔ][0], ⲆΔⵠⲆⲆⵠⲆⵠᐃ);
          Up(Xn, p, p.width / 4, p.height / 4, -p.width / 2, -p.height / 2);
        }
        Xn.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ⵠⲆⲆ() && Kk == this.freeze.ᐃᐃᐃ) {
          this.action -= 4;
        }
        Xn.globalAlpha = 0.6 - this.freeze.ᐃⵠⲆ;
        p = mw(this.ᐃⵠᐃΔ, ⵠⵠ[255][this.ᐃⵠᐃΔ][0], ᐃΔᐃᐃⲆΔⵠⵠΔ);
        Up(Xn, p, p.width / 4, p.height / 4, -p.width / 2, -p.height / 2);
        Xn.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ΔᐃⵠᐃⲆⵠⵠ.ⵠⲆⲆ() && ja == this.ΔᐃⵠᐃⲆⵠⵠ.ᐃᐃᐃ) {
          this.action -= 8;
        }
        Xn.globalAlpha = 0.6 - this.ΔᐃⵠᐃⲆⵠⵠ.ᐃⵠⲆ;
        if (this.ΔᐃⲆΔᐃΔⵠ) {
          p = ⵠⵠ[824];
          Up(Xn, p, -p.width / 2, -p.height / 2);
        } else {
          p = mw(this.ᐃⵠᐃΔ, ⵠⵠ[255][this.ᐃⵠᐃΔ][0], ΔᐃⵠΔᐃⲆᐃⲆⵠ);
          Up(Xn, p, p.width / 4, p.height / 4, -p.width / 2, -p.height / 2);
        }
        Xn.globalAlpha = 1;
      }
      gw(this.ΔⲆᐃΔΔ);
      if (c === 1) {
        if (this.action & 16) {
          u += this.attack.ᐃⵠⲆ * 15;
        }
        Aw(286, ᐃⲆΔΔ, -ᐃⲆΔΔ.width / 2 - aq * 26, -ᐃⲆΔΔ.height / 2 + (31 + v + u) * aq);
        if (h >= 920) {
          af(h, w, -w.width / 4 - aq * 26, -w.height / 4 + (27 + v + u) * aq);
        } else if (h !== 793) {
          bf(h, this.ᐃⵠᐃΔ, w, -w.width / 4 - aq * 26, -w.height / 4 + aq * (27 + v + u));
        } else {
          Aw(h, w, -w.width / 2 - aq * 26, -w.height / 2 + aq * (27 + v + u));
        }
        Aw(286, ᐃⲆΔΔ, -ᐃⲆΔΔ.width / 2 + aq * 26, -ᐃⲆΔΔ.height / 2 + aq * (31 + v + u));
        if (h >= 920) {
          af(h, w, -w.width / 4 + aq * 26, -w.height / 4 + (27 + v + u) * aq);
        } else if (h !== 793) {
          bf(h, this.ᐃⵠᐃΔ, w, -w.width / 4 + aq * 26, -w.height / 4 + aq * (27 + v + u));
        } else {
          Aw(h, w, -w.width / 2 + aq * 26, -w.height / 2 + (27 + v + u) * aq);
        }
        Mv(this.right, 0, v + u);
      }
      Xn.restore();
      if (this.ΔⲆᐃΔΔ !== 83 && this.ΔⲆᐃΔΔ !== 85) {
        if (this.ⲆⲆⲆⵠⲆ > 0) {
          this.ⲆΔᐃᐃ.ⵠᐃΔⵠΔᐃⵠ ||= gu(aq, this.ⲆΔᐃᐃ.ΔΔΔᐃᐃ, 20, "#187484", "#000", 2, null, null, aq * 300);
          p = this.ⲆΔᐃᐃ.ⵠᐃΔⵠΔᐃⵠ;
        } else {
          this.ⲆΔᐃᐃ.label ||= gu(aq, this.ⲆΔᐃᐃ.ΔΔΔᐃᐃ, 20, "#FFF", "#000", 2, null, null, aq * 300);
          p = this.ⲆΔᐃᐃ.label;
        }
        if (mx.ⲆΔⲆ == Cr.ⵠΔⵠ) {
          Xn.globalAlpha = 0.5;
        }
        u = Math.floor(-p.width / 2);
        v = Math.floor(-p.height / 2 - aq * 70);
        Up(Xn, p, u, v);
        if (this.ⲆΔᐃᐃ.level > 0) {
          var y = u + p.width + 5;
          p = ⵠⵠ[885];
          if (jt === ⲆΔΔΔⵠᐃᐃ[this.ⲆΔᐃᐃ.level]) {
            ⲆΔΔΔⵠᐃᐃ[this.ⲆΔᐃᐃ.level] = gu(aq, "[" + this.ⲆΔᐃᐃ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, aq * 50);
          }
          Up(Xn, ⲆΔΔΔⵠᐃᐃ[this.ⲆΔᐃᐃ.level], y, v);
        }
        Xn.globalAlpha = 1;
      } else {
        v = Math.floor(aq * -70);
        u = Math.floor(ⵠⵠ[558].width / 1.5);
      }
      if (nx.ΔᐃᐃⵠⲆᐃⲆ(this.ⲆⵠⲆⵠ)) {
        if (this.ⲆⵠⲆⵠ == nx.ΔⲆⲆⵠᐃ[0]) {
          p = ⵠⵠ[559];
        } else {
          p = ⵠⵠ[558];
        }
        Up(Xn, p, u - p.width - 5, v - 6);
      }
      Xn.restore();
    }
  }
  function mw(b, c, d) {
    if (c.ᐃⲆᐃᐃⲆΔⲆ() !== 1) {
      return c;
    }
    var e = ⵠᐃⵠᐃᐃⲆΔ[d][b];
    if (Wa === e) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var a = c.height;
      e.width = g;
      e.height = a;
      f.drawImage(c, 0, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ᐃᐃⲆΔΔΔⵠΔⵠ[d];
      f.fillRect(0, 0, g, a);
      ⵠᐃⵠᐃᐃⲆΔ[d][b] = e;
    }
    return e;
  }
  function nw() {
    if (this.message !== undefined) {
      var a = nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ.length > 0 ? -95 : 0;
      Up(Xn, this.message, 0, _n - this.message.height + a);
    }
  }
  ᐃᐃⲆΔΔΔⵠΔⵠ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var ow = 0;
  function pw(j, e, i, k, n, o, a, q = 0) {
    mx.ᐃΔΔΔ[n].ⵠⲆⲆ();
    for (var r = a; q <= r; r--) {
      for (var s = j; s <= e; s++) {
        for (var t = i; t <= k; t++) {
          var w = jx.ΔΔⵠⵠ[s][t];
          if (w && w[o]) {
            var x = w[o][r];
            if (x !== undefined) {
              for (var y = 0; y < x.length; y++) {
                var z = x[y];
                if (z.ⵠⲆⲆ) {
                  if (z.ⵠΔΔ.ⵠⲆⲆ() && z.ⵠΔΔ.ᐃᐃᐃ == 0) {
                    z.ⵠⲆⲆ = No;
                  }
                  var A = (1 - z.ⵠΔΔ.ᐃⵠⲆ) * vx * 600 * aq;
                  var B = A * Math.sin(z.angle);
                  var D = A * Math.cos(z.angle);
                } else {
                  B = 0;
                  D = 0;
                }
                var E = ⵠⵠ[n][mx.time][r];
                var F = mx.ᐃΔΔΔ[n].ᐃⵠⲆ * -E.width;
                var G = -E.height * mx.ᐃΔΔΔ[n].ᐃⵠⲆ;
                Up(Xn, E, nx.ᐃΔΔ.x + z.x - F / 2 + B, nx.ᐃΔΔ.y + z.y - G / 2 + D, F, G);
              }
            }
          }
        }
      }
    }
  }
  function qw(j, e, i, k, n, o, a, q) {
    if (Ql === q) {
      q = 0;
    }
    for (var r = a; r >= q; r--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; k >= w; w++) {
          var x = jx.ΔΔⵠⵠ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== undefined) {
              for (var z = 0; y.length > z; z++) {
                var A = y[z];
                var B = ⵠⵠ[n][mx.time][r];
                var D = (ow + (t + w) * 3) % 60;
                var E = D < 30 ? D / 30 : 1 - (D - 30) / 30;
                var F = (1 + E * 0.9 / 30) * -B.width;
                var G = -B.height * (1 + E * 0.9 / 30);
                E = (D = (ow + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                var H = Xn.globalAlpha;
                Xn.globalAlpha = H * (0.9 + E * 0.1);
                Up(Xn, B, nx.ᐃΔΔ.x + A.x - F / 2, nx.ᐃΔΔ.y + A.y - G / 2, F, G);
                Xn.globalAlpha = H;
              }
            }
          }
        }
      }
    }
  }
  var rw = [];
  for (Sb = 0; Sb < 100; Sb++) {
    var sw = 1;
    if (Math.random() < 0.25) {
      sw = 0;
    }
    rw.push(sw);
  }
  function tw(c, e, f, i, j, k, a, m = 0, n) {
    for (var h = c; h <= e; h++) {
      for (var o = f; i >= o; o++) {
        var p = jx.ΔΔⵠⵠ[h][o];
        if (p !== undefined && p[k] !== undefined) {
          var q = p[k];
          if (q !== undefined) {
            if (q.scale === 1) {
              var r = ⵠⵠ[j][mx.time][q.ΔⵠⲆⲆⵠ];
              Xn.save();
              Xn.translate(nx.ᐃΔΔ.x + q.x, nx.ᐃΔΔ.y + q.y);
              Xn.rotate(q.angle);
              Up(Xn, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
              Xn.restore();
            } else if (q.scale === 3) {
              for (var s = 0; q.ΔᐃⲆ.length > s; s++) {
                Xn.save();
                Xn.translate(nx.ᐃΔΔ.x + q.x, nx.ᐃΔΔ.y + q.y);
                Xn.rotate(q.ΔᐃⲆ[s].angle);
                r = ⵠⵠ[j][mx.time][q.ΔᐃⲆ[s].ΔⵠⲆⲆⵠ];
                Up(Xn, r, -r.width / 3 + q.ΔᐃⲆ[s].x, -r.height / 3 + q.ΔᐃⲆ[s].y, r.width / 1.5, r.height / 1.5);
                Xn.restore();
              }
            } else {
              r = ⵠⵠ[j][mx.time][q.ΔⵠⲆⲆⵠ];
              Xn.save();
              Xn.translate(nx.ᐃΔΔ.x + q.x, nx.ᐃΔΔ.y + q.y);
              Xn.rotate(q.angle);
              Up(Xn, r, -r.width / 2, -r.height / 2, r.width, r.height);
              Xn.restore();
            }
          }
        }
      }
    }
  }
  function uw(j, e, i, k, n, o, a, q = 0, r) {
    for (var h = a; q <= h; h--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; k >= t; t++) {
          if (r <= 0 || rw[(s + t * r) % rw.length] !== 1) {
            var v = jx.ΔΔⵠⵠ[s][t];
            if (v !== undefined && v[o] !== undefined) {
              var w = v[o][h];
              if (Il !== w) {
                for (var x = 0; x < w.length; x++) {
                  var y = w[x];
                  if (y.ⵠⲆⲆ) {
                    if (y.ⵠΔΔ.ⵠⲆⲆ() && y.ⵠΔΔ.ᐃᐃᐃ == pk) {
                      y.ⵠⲆⲆ = false;
                    }
                    var z = aq * (vx * (1 - y.ⵠΔΔ.ᐃⵠⲆ) * 600);
                    var A = z * Math.sin(y.angle);
                    var B = Math.cos(y.angle) * z;
                  } else {
                    A = 0;
                    B = 0;
                  }
                  var D = ⵠⵠ[n][mx.time][h];
                  Up(Xn, D, nx.ᐃΔΔ.x + y.x - D.width / (ᐃⲆᐃΔⵠ * 2) + A, nx.ᐃΔΔ.y + y.y - D.height / (ᐃⲆᐃΔⵠ * 2) + B, D.width / ᐃⲆᐃΔⵠ, D.height / ᐃⲆᐃΔⵠ);
                }
              }
            }
          }
        }
      }
    }
  }
  function vw(j, e, i, k, n, o, a, q = 0, r) {
    for (var h = a; h >= q; h--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; t <= k; t++) {
          var w = jx.ΔΔⵠⵠ[s][t];
          if (w !== _h && w[o] !== undefined) {
            var x = w[o][h];
            if (Lq !== x) {
              for (var A = 0; x.length > A; A++) {
                var B = x[A];
                if (B.ⵠⲆⲆ) {
                  if (B.ⵠΔΔ.ⵠⲆⲆ() && B.ⵠΔΔ.ᐃᐃᐃ == 0) {
                    B.ⵠⲆⲆ = Vh;
                  }
                  var D = (1 - B.ⵠΔΔ.ᐃⵠⲆ) * vx * 600 * aq;
                  var E = Math.sin(B.angle) * D;
                  var F = Math.cos(B.angle) * D;
                } else {
                  E = 0;
                  F = 0;
                }
                for (var G = 0; G < ᐃⵠΔΔᐃⵠⲆ[h].ᐃⲆⵠᐃ; G++) {
                  if (ux !== mx.ⲆⲆᐃⵠΔ[G].ⲆⲆΔΔⵠ) {
                    mx.ⲆⲆᐃⵠΔ[G].ⵠⲆⲆ();
                    mx.ⲆⲆᐃⵠΔ[G].ⲆⲆΔΔⵠ = ux;
                  }
                  var H = ⵠⵠ[941][mx.time][ᐃⵠΔΔᐃⵠⲆ[h].ⲆⵠΔᐃ[G].Ⲇᐃᐃ];
                  var I = -H.width * mx.ⲆⲆᐃⵠΔ[G].ᐃⵠⲆ;
                  var J = -H.height * mx.ⲆⲆᐃⵠΔ[G].ᐃⵠⲆ;
                  Up(Xn, H, nx.ᐃΔΔ.x + B.x - I / 4 + E + ᐃⵠΔΔᐃⵠⲆ[h].ⲆⵠΔᐃ[G].x, nx.ᐃΔΔ.y + B.y - J / 4 + F + ᐃⵠΔΔᐃⵠⲆ[h].ⲆⵠΔᐃ[G].y, I / 2, J / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  ᐃⲆᐃΔⵠ = 1;
  ᐃⵠΔΔᐃⵠⲆ = [{
    ᐃⲆⵠᐃ: 10,
    ⲆⵠΔᐃ: [{
      y: -20,
      x: -128,
      Ⲇᐃᐃ: 0
    }, {
      x: -86,
      y: -4,
      Ⲇᐃᐃ: 1
    }, {
      y: -74,
      Ⲇᐃᐃ: 2,
      x: -60
    }, {
      x: -22,
      y: -144,
      Ⲇᐃᐃ: 0
    }, {
      Ⲇᐃᐃ: 0,
      y: 86,
      x: -58
    }, {
      Ⲇᐃᐃ: 0,
      x: 3,
      y: -30
    }, {
      x: 65,
      y: -115,
      Ⲇᐃᐃ: 1
    }, {
      x: 118,
      y: -50,
      Ⲇᐃᐃ: 0
    }, {
      x: 73,
      Ⲇᐃᐃ: 1,
      y: 15
    }, {
      y: 79,
      Ⲇᐃᐃ: 0,
      x: 67
    }]
  }, {
    ᐃⲆⵠᐃ: 5,
    ⲆⵠΔᐃ: [{
      y: -26,
      Ⲇᐃᐃ: 0,
      x: -45
    }, {
      x: -45,
      y: 20,
      Ⲇᐃᐃ: 2
    }, {
      Ⲇᐃᐃ: 1,
      y: -60,
      x: 10
    }, {
      y: -17,
      Ⲇᐃᐃ: 1,
      x: 52
    }, {
      Ⲇᐃᐃ: 0,
      y: 45,
      x: 14
    }]
  }, {
    ⲆⵠΔᐃ: [{
      y: 3,
      Ⲇᐃᐃ: 2,
      x: -30
    }, {
      y: -38,
      Ⲇᐃᐃ: 2,
      x: 7
    }, {
      y: 5,
      Ⲇᐃᐃ: 2,
      x: 37
    }],
    ᐃⲆⵠᐃ: 3
  }, {
    ᐃⲆⵠᐃ: 11,
    ⲆⵠΔᐃ: [{
      x: -74,
      Ⲇᐃᐃ: 2,
      y: -87
    }, {
      x: -11,
      y: -10,
      Ⲇᐃᐃ: 1
    }, {
      y: 17,
      x: -99,
      Ⲇᐃᐃ: 1
    }, {
      y: 84,
      x: -66,
      Ⲇᐃᐃ: 0
    }, {
      x: -55,
      y: 123,
      Ⲇᐃᐃ: 1
    }, {
      x: 10,
      Ⲇᐃᐃ: 2,
      y: 81
    }, {
      x: 52,
      Ⲇᐃᐃ: 0,
      y: 50
    }, {
      x: 138,
      Ⲇᐃᐃ: 1,
      y: 9
    }, {
      Ⲇᐃᐃ: 0,
      y: -28,
      x: 104
    }, {
      x: 67,
      Ⲇᐃᐃ: 2,
      y: -56
    }, {
      y: -112,
      x: 5,
      Ⲇᐃᐃ: 0
    }]
  }, {
    ᐃⲆⵠᐃ: 6,
    ⲆⵠΔᐃ: [{
      y: -66,
      x: -33,
      Ⲇᐃᐃ: 2
    }, {
      y: 10,
      x: -58,
      Ⲇᐃᐃ: 0
    }, {
      x: -19,
      y: 44,
      Ⲇᐃᐃ: 1
    }, {
      y: 20,
      x: 44,
      Ⲇᐃᐃ: 0
    }, {
      Ⲇᐃᐃ: 2,
      y: -36,
      x: 53
    }, {
      x: 7,
      Ⲇᐃᐃ: 0,
      y: -62
    }]
  }, {
    ᐃⲆⵠᐃ: 3,
    ⲆⵠΔᐃ: [{
      Ⲇᐃᐃ: 1,
      x: -19,
      y: -25
    }, {
      x: -29,
      Ⲇᐃᐃ: 2,
      y: 13
    }, {
      Ⲇᐃᐃ: 0,
      x: 12,
      y: 12
    }]
  }];
  var ww = 0;
  var xw = 0;
  var yw = 0;
  var zw = 0;
  function Aw(a, b, c, d) {
    if (mx.transition) {
      Xn.globalAlpha = 1;
      Up(Xn, ⵠⵠ[a][mx.time], c, d);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Up(Xn, ⵠⵠ[a][mx.time], c, d);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1;
    } else {
      Up(Xn, b, c, d);
    }
  }
  function Bw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = nx.ᐃΔΔ.y + f - 700;
    var g = Math.max(nx.ᐃΔΔ.x + e, 0);
    var l = Math.max(-nx.ᐃΔΔ.x + Yn - i - 100, 0);
    var r = g;
    var b = Yn - g - l;
    if (n) {
      var d = j.Ⲇᐃᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.Ⲇᐃᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.Ⲇᐃᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h + 350 - s + d) - 3 > u) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ΔⵠⵠⲆⲆᐃΔ === 1) {
      if (mx.transition) {
        var p = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(15, 77, 72, 252, 239, 187, p);
      } else {
        Xn.fillStyle = Cr.ᐃⲆⲆΔⲆⲆᐃ[mx.time];
      }
      Xn.fillRect(r, s, b, t);
    } else {
      if (mx.transition) {
        p = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(k.ΔⲆⵠ[0], k.ΔⲆⵠ[1], k.ΔⲆⵠ[2], k.ⲆΔⲆ[0], k.ⲆΔⲆ[1], k.ⲆΔⲆ[2], p);
      } else {
        Xn.fillStyle = k.ⲆΔⵠⵠᐃ[mx.time];
      }
      Xn.fillRect(r, s, b, t);
    }
  }
  function Cw(b, c, d, e, f, i, a, j, k, h) {
    if (mx.transition) {
      Xn.globalAlpha = 1;
      b(c, d, e, f, i, a, j, k, h);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      b(c, d, e, f, i, a, j, k, h);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1;
    } else {
      b(c, d, e, f, i, a, j, k, h);
    }
  }
  function ef(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = nx.ᐃΔΔ.x + f + 820;
    var g = Math.max(nx.ᐃΔΔ.y + e, 0);
    var l = Math.max(-nx.ᐃΔΔ.y + _n - i - 100, 0);
    var r = g;
    var b = _n - g - l;
    if (n) {
      var d = j.Ⲇᐃᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.Ⲇᐃᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.Ⲇᐃᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h - 350 - s - d) < u) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ΔⵠⵠⲆⲆᐃΔ === 1) {
      if (mx.transition) {
        var p = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(15, 77, 72, 252, 239, 187, p);
      } else {
        Xn.fillStyle = Cr.ᐃⲆⲆΔⲆⲆᐃ[mx.time];
      }
      Xn.fillRect(s, r, t, b);
    } else {
      if (mx.transition) {
        p = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(k.ΔⲆⵠ[0], k.ΔⲆⵠ[1], k.ΔⲆⵠ[2], k.ⲆΔⲆ[0], k.ⲆΔⲆ[1], k.ⲆΔⲆ[2], p);
      } else {
        Xn.fillStyle = k.ⲆΔⵠⵠᐃ[mx.time];
      }
      Xn.fillRect(s, r, t, b);
    }
  }
  function tf() {
    Xn.globalAlpha = 1;
    if (mx.transition) {
      var a = mx.ⵠΔΔᐃ.ⵠⲆⲆ();
    }
    mx.ⲆⵠΔⲆⵠᐃⵠⵠⵠ(-nx.ᐃΔΔ.x, -nx.ᐃΔΔ.y);
    ww = Math.max(Math.floor(-nx.ᐃΔΔ.x / mx.ⲆⵠⵠᐃᐃΔⲆ) - 5, 0);
    xw = Math.min(Math.floor((-nx.ᐃΔΔ.x + nx.ᐃΔΔ.w) / mx.ⲆⵠⵠᐃᐃΔⲆ) + 4, mx.ⲆⲆⲆΔΔ - 1);
    yw = Math.max(Math.floor(-nx.ᐃΔΔ.y / mx.ⵠⲆⵠⵠᐃⵠΔ) - 3, 0);
    zw = Math.min(Math.floor((-nx.ᐃΔΔ.y + nx.ᐃΔΔ.ΔⲆⲆ) / mx.ⵠⲆⵠⵠᐃⵠΔ) + 3, mx.ᐃᐃⲆⲆΔ - 1);
    (function () {
      for (var f = mx.ⲆΔΔΔ.length - 1; f >= 0; f--) {
        var j = mx.ⲆΔΔΔ[f];
        if (mx.ⵠⲆΔⲆΔ === j.Ⲇᐃᐃ) {
          var k = mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ];
          if (j.x1 - 230 - Yn <= -nx.ᐃΔΔ.x && j.x2 + 330 >= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.y >= j.y1 - _n && -nx.ᐃΔΔ.y <= j.y2 + 100) {
            var p = j.x2;
            if (mx.ⵠⲆΔⲆΔ !== j.Ⲇᐃᐃ) {
              p -= 610;
            }
            var q = j.x1;
            if (j.Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
              q += 610;
            }
            var u = j.y2;
            if (j.Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
              u -= 610;
            }
            var v = j.y1;
            if (mx.ⵠⲆΔⲆΔ !== j.Ⲇᐃᐃ) {
              v += 610;
            }
            if (mx.transition) {
              var w = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
              Xn.fillStyle = sf(k.ΔⲆⵠ[0], k.ΔⲆⵠ[1], k.ΔⲆⵠ[2], k.ⲆΔⲆ[0], k.ⲆΔⲆ[1], k.ⲆΔⲆ[1], w);
            } else {
              Xn.fillStyle = k.ⲆΔⵠⵠᐃ[mx.time];
            }
            var x = Math.max(nx.ᐃΔΔ.x + q - 2 - 230, 0);
            var y = Math.max(-nx.ᐃΔΔ.x + Yn - p - 330 - 2, 0);
            var z = Math.max(nx.ᐃΔΔ.y + v - 2, 0);
            var A = Math.max(-nx.ᐃΔΔ.y + _n - u - 100 - 2, 0);
            Xn.beginPath();
            Xn.fillRect(x, z, Yn - y - x, _n - z - A);
          }
        }
      }
      for (f = mx.ⲆΔΔΔ.length - 1; f >= 0; f--) {
        j = mx.ⲆΔΔΔ[f];
        if (mx.ⵠⲆΔⲆΔ !== j.Ⲇᐃᐃ) {
          p = j.x2;
          if (mx.ⵠⲆΔⲆΔ !== j.Ⲇᐃᐃ) {
            p -= 400;
          }
          q = j.x1;
          if (mx.ⵠⲆΔⲆΔ !== j.Ⲇᐃᐃ) {
            q += 400;
          }
          u = j.y2;
          if (mx.ⵠⲆΔⲆΔ !== j.Ⲇᐃᐃ) {
            u -= 300;
          }
          v = j.y1;
          if (j.Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
            v += 300;
          }
          if ((j.ᐃⵠⲆ & 8) === 0 && p - Yn + 120 <= -nx.ᐃΔΔ.x && p + 820 >= -nx.ᐃΔΔ.x && v + 88 - _n <= -nx.ᐃΔΔ.y && -nx.ᐃΔΔ.y <= u + 50) {
            ef(p, v + 88, u - 88, nx.ⲆᐃΔⵠ[0], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 8);
            hf(p, v + 88, u - 88, nx.ⲆᐃΔⵠ[0], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 8);
          }
          if ((j.ᐃⵠⲆ & 4) === 0 && q - Yn - 700 <= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.x <= q - 20 && -nx.ᐃΔΔ.y >= v + 88 - _n && u + 50 >= -nx.ᐃΔΔ.y) {
            mf(q, v + 88, u - 88, nx.ⲆᐃΔⵠ[1], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 4);
            nf(q, v + 88, u - 88, nx.ⲆᐃΔⵠ[1], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 4);
          }
          if (!(j.ᐃⵠⲆ & 2) && -nx.ᐃΔΔ.x >= q - 235 - Yn && p + 350 >= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.y >= u - _n - 275 && -nx.ᐃΔΔ.y <= u + 490) {
            pf(u - 230, q - 230, p + 230, nx.ⲆᐃΔⵠ[2], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 2);
            rf(u - 230, q - 230, p + 230, nx.ⲆᐃΔⵠ[2], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 2);
          }
          if (!(j.ᐃⵠⲆ & 1) && q - 235 - Yn <= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.x <= p + 350 && -nx.ᐃΔΔ.y >= v - _n - 390 && -nx.ᐃΔΔ.y <= v + 315) {
            Bw(v + 310, q - 230, p + 230, nx.ⲆᐃΔⵠ[3], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 1);
            uf(v + 310, q - 230, p + 230, nx.ⲆᐃΔⵠ[3], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 1);
          }
        }
      }
      for (f = mx.ⲆΔΔΔ.length - 1; f >= 0; f--) {
        if ((j = mx.ⲆΔΔΔ[f]).Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
          p = j.x2;
          if (mx.ⵠⲆΔⲆΔ !== j.Ⲇᐃᐃ) {
            p -= 400;
          }
          q = j.x1;
          if (j.Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
            q += 400;
          }
          u = j.y2;
          if (j.Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
            u -= 300;
          }
          v = j.y1;
          if (mx.ⵠⲆΔⲆΔ !== j.Ⲇᐃᐃ) {
            v += 300;
          }
          if (j.ᐃⵠⲆ & 8 && p - Yn + 120 <= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.x <= p + 820 && v + 88 - _n <= -nx.ᐃΔΔ.y && u + 50 >= -nx.ᐃΔΔ.y) {
            ef(p, v + 88, u - 88, nx.ⲆᐃΔⵠ[0], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 8);
          }
          if ((j.ᐃⵠⲆ & 4) !== 0 && -nx.ᐃΔΔ.x >= q - Yn - 700 && -nx.ᐃΔΔ.x <= q - 20 && -nx.ᐃΔΔ.y >= v + 88 - _n && u + 50 >= -nx.ᐃΔΔ.y) {
            mf(q, v + 88, u - 88, nx.ⲆᐃΔⵠ[1], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 4);
          }
          if (j.ᐃⵠⲆ & 2 && q - 235 - Yn <= -nx.ᐃΔΔ.x && p + 350 >= -nx.ᐃΔΔ.x && u - _n - 275 <= -nx.ᐃΔΔ.y && u + 490 >= -nx.ᐃΔΔ.y) {
            pf(u - 230, q - 230, p + 230, nx.ⲆᐃΔⵠ[2], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 2);
          }
          if ((j.ᐃⵠⲆ & 1) !== 0 && q - 235 - Yn <= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.x <= p + 350 && v - _n - 390 <= -nx.ᐃΔΔ.y && v + 315 >= -nx.ᐃΔΔ.y) {
            Bw(v + 310, q - 230, p + 230, nx.ⲆᐃΔⵠ[3], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 1);
          }
        }
      }
      for (f = mx.ⲆΔΔΔ.length - 1; f >= 0; f--) {
        if ((j = mx.ⲆΔΔΔ[f]).Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
          k = mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ];
          if (j.x1 - 230 - Yn <= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.x <= j.x2 + 330 && j.y1 - _n <= -nx.ᐃΔΔ.y && -nx.ᐃΔΔ.y <= j.y2 + 100) {
            p = j.x2;
            if (j.Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
              if ((j.ᐃⵠⲆ & 8) === 0) {
                p -= 414;
              } else {
                p -= 610;
              }
            }
            q = j.x1;
            if (j.Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
              if (j.ᐃⵠⲆ & 4) {
                q += 610;
              } else {
                q += 414;
              }
            }
            u = j.y2;
            if (mx.ⵠⲆΔⲆΔ !== j.Ⲇᐃᐃ) {
              if ((j.ᐃⵠⲆ & 2) === 0) {
                u -= 414;
              } else {
                u -= 610;
              }
            }
            v = j.y1;
            if (j.Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
              if ((j.ᐃⵠⲆ & 1) === 0) {
                v += 414;
              } else {
                v += 610;
              }
            }
            if (mx.transition) {
              w = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
              Xn.fillStyle = sf(k.ΔⲆⵠ[0], k.ΔⲆⵠ[1], k.ΔⲆⵠ[2], k.ⲆΔⲆ[0], k.ⲆΔⲆ[1], k.ⲆΔⲆ[2], w);
            } else {
              Xn.fillStyle = k.ⲆΔⵠⵠᐃ[mx.time];
            }
            x = Math.max(nx.ᐃΔΔ.x + q - 2 - 230, 0);
            y = Math.max(-nx.ᐃΔΔ.x + Yn - p - 330 - 2, 0);
            z = Math.max(nx.ᐃΔΔ.y + v - 2, 0);
            A = Math.max(-nx.ᐃΔΔ.y + _n - u - 100 - 2, 0);
            Xn.beginPath();
            Xn.fillRect(x, z, Yn - y - x, _n - z - A);
          }
        }
      }
      if (lx.ⲆᐃΔⲆΔ) {
        Cw(pw, yw, zw, ww, xw, 695, "isl", 2);
        Cw(pw, yw, zw, ww, xw, 694, "isl", 2);
      }
      Cw(uw, yw, zw, ww, xw, 692, "isl", 2);
      if (lx.ⲆᐃΔⲆΔ) {
        Cw(tw, yw, zw, ww, xw, 243, "de");
      }
      var B = mx.ⵠΔⲆ[0];
      for (f = 0; B.length > f; f++) {
        for (var d = B[f], C = 0; C < d.ΔⲆⵠⵠⵠ.length; C++) {
          of(d.ΔⲆⵠⵠⵠ[C]);
        }
      }
      if ((ev += vx * 40) > 60) {
        ev -= 60;
      }
      Cw(Dv, yw, zw, ww, xw, 1024, "r", 0);
      f = 0;
      for (; f < mx.ⲆΔΔΔ.length; f++) {
        if ((j = mx.ⲆΔΔΔ[f]).Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
          p = j.x2;
          if (j.Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
            p -= 400;
          }
          q = j.x1;
          if (mx.ⵠⲆΔⲆΔ !== j.Ⲇᐃᐃ) {
            q += 400;
          }
          u = j.y2;
          if (j.Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
            u -= 300;
          }
          v = j.y1;
          if (j.Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ) {
            v += 300;
          }
          if ((j.ᐃⵠⲆ & 8) > 0 && -nx.ᐃΔΔ.x >= p - Yn + 120 && p + 820 >= -nx.ᐃΔΔ.x && v + 88 - _n <= -nx.ᐃΔΔ.y && -nx.ᐃΔΔ.y <= u + 50) {
            hf(p, v + 88, u - 88, nx.ⲆᐃΔⵠ[0], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 8);
          }
          if ((j.ᐃⵠⲆ & 4) > 0 && -nx.ᐃΔΔ.x >= q - Yn - 700 && -nx.ᐃΔΔ.x <= q - 20 && v + 88 - _n <= -nx.ᐃΔΔ.y && -nx.ᐃΔΔ.y <= u + 50) {
            nf(q, v + 88, u - 88, nx.ⲆᐃΔⵠ[1], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 4);
          }
          if ((j.ᐃⵠⲆ & 2) > 0 && q - 235 - Yn <= -nx.ᐃΔΔ.x && -nx.ᐃΔΔ.x <= p + 350 && u - _n - 275 <= -nx.ᐃΔΔ.y && u + 490 >= -nx.ᐃΔΔ.y) {
            rf(u - 230, q - 230, p + 230, nx.ⲆᐃΔⵠ[2], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 2);
          }
          if ((j.ᐃⵠⲆ & 1) > 0 && -nx.ᐃΔΔ.x >= q - 235 - Yn && -nx.ᐃΔΔ.x <= p + 350 && -nx.ᐃΔΔ.y >= v - _n - 390 && v + 315 >= -nx.ᐃΔΔ.y) {
            uf(v + 310, q - 230, p + 230, nx.ⲆᐃΔⵠ[3], mx.ΔⲆᐃⲆᐃ[j.Ⲇᐃᐃ], j.ᐃⵠⲆ & 1);
          }
        }
      }
    })();
    (function () {
      var u = ww;
      var e = xw;
      var i = yw;
      var t = zw;
      if (lx.ⲆᐃΔⲆΔ) {
        Cw(uw, i, t, u, e, 621, "l", 2);
      }
      if (lx.ⲆᐃΔⲆΔ) {
        Cw(uw, i, t, u, e, Cr.ⲆⲆⵠΔⲆ, "la", 5);
      }
      Cw(uw, i, t, u, e, 203, "la", 5);
      Cw(pw, i, t, u, e, 620, "l", 2);
      if (lx.ⲆᐃΔⲆΔ) {
        Cw(vw, i, t, u, e, 203, "la", 5);
        Cw(pw, i, t, u, e, 619, "l", 2);
      }
      Cw(uw, i, t, u, e, 1052, "ma", 4);
      for (var n = mx.ⵠΔⲆ[76], v = 0; v < n.length; v++) {
        n[v].ⲆⲆΔⵠⲆΔⲆ();
      }
      var H = mx.ⵠΔⲆ[0];
      for (v = 0; H.length > v; v++) {
        for (var U = H[v], aa = 0; U.ΔⲆⵠΔⵠ.length > aa; aa++) {
          Cf(U.ΔⲆⵠΔⵠ[aa]);
        }
      }
      var ba = mx.ⵠΔⲆ[30];
      for (v = 0; v < ba.length; v++) {
        gf(ba[v], 125);
        ba[v].ᐃⵠΔΔⵠ(ba[v].info);
      }
      var g = mx.ⵠΔⲆ[18];
      for (v = 0; v < g.length; v++) {
        if (g[v].action == 2) {
          lf(g[v]);
        }
      }
      var ca = mx.ⵠΔⲆ[1];
      for (v = 0; v < ca.length; v++) {
        lf(ca[v], 113);
      }
      var da = mx.ⵠΔⲆ[22];
      for (v = 0; v < da.length; v++) {
        lf(da[v]);
      }
      var ea = mx.ⵠΔⲆ[23];
      for (v = 0; ea.length > v; v++) {
        lf(ea[v]);
      }
      var fa = mx.ⵠΔⲆ[6];
      for (v = 0; v < fa.length; v++) {
        lf(fa[v], 118);
      }
      var c = mx.ⵠΔⲆ[36];
      for (v = 0; v < c.length; v++) {
        gf(c[v]);
      }
      var p = mx.ⵠΔⲆ[33];
      for (v = 0; p.length > v; v++) {
        gf(p[v], 141);
      }
      var C = mx.ⵠΔⲆ[3];
      for (v = 0; C.length > v; v++) {
        lf(C[v]);
      }
      C = mx.ⵠΔⲆ[43];
      v = 0;
      for (; C.length > v; v++) {
        lf(C[v]);
      }
      C = mx.ⵠΔⲆ[3];
      v = 0;
      for (; v < C.length; v++) {
        vf(C[v]);
      }
      var ha = mx.ⵠΔⲆ[44];
      for (v = 0; v < ha.length; v++) {
        if ((ha[v].info & 15) === 0 || ha[v].info === 10) {
          gf(ha[v]);
        }
      }
      var ia = mx.ⵠΔⲆ[54];
      for (v = 0; ia.length > v; v++) {
        if (!(ia[v].info & 15) || ia[v].info === 10) {
          gf(ia[v]);
        }
      }
      var ja = mx.ⵠΔⲆ[55];
      for (v = 0; v < ja.length; v++) {
        if (!(ja[v].info & 15) || ja[v].info === 10) {
          gf(ja[v]);
        }
      }
      var ka = mx.ⵠΔⲆ[79];
      for (v = 0; ka.length > v; v++) {
        gf(ka[v], 132);
      }
      var la = mx.ⵠΔⲆ[39];
      for (v = 0; v < la.length; v++) {
        if (!(la[v].info & 15) || la[v].info === 10) {
          gf(la[v]);
        }
      }
      var ma = mx.ⵠΔⲆ[40];
      for (v = 0; v < ma.length; v++) {
        if (!(ma[v].info & 15) || ma[v].info === 10) {
          gf(ma[v]);
        }
      }
      var na = mx.ⵠΔⲆ[37];
      for (v = 0; v < na.length; v++) {
        if (!(na[v].info & 15) || na[v].info === 10) {
          gf(na[v]);
        }
      }
      ka = mx.ⵠΔⲆ[31];
      v = 0;
      for (; v < ka.length; v++) {
        gf(ka[v]);
      }
      var oa = mx.ⵠΔⲆ[86];
      for (v = 0; oa.length > v; v++) {
        gf(oa[v], 250, 729);
      }
      var x = mx.ⵠΔⲆ[82];
      for (v = 0; v < x.length; v++) {
        gf(x[v], 250, 729);
      }
      var J = mx.ⵠΔⲆ[87];
      for (v = 0; J.length > v; v++) {
        gf(J[v], 854, 859);
      }
      var M = mx.ⵠΔⲆ[45];
      for (v = 0; v < M.length; v++) {
        if (M[v].info & 1) {
          gf(M[v], 336);
        }
      }
      M = mx.ⵠΔⲆ[46];
      v = 0;
      for (; v < M.length; v++) {
        if (M[v].info & 1) {
          gf(M[v], 373);
        }
      }
      M = mx.ⵠΔⲆ[47];
      v = 0;
      for (; v < M.length; v++) {
        if (M[v].info) {
          gf(M[v], 376);
        }
      }
      M = mx.ⵠΔⲆ[48];
      v = 0;
      for (; v < M.length; v++) {
        if (M[v].info) {
          gf(M[v], 379);
        }
      }
      M = mx.ⵠΔⲆ[49];
      v = 0;
      for (; M.length > v; v++) {
        if (M[v].info) {
          gf(M[v], 500);
        }
      }
      M = mx.ⵠΔⲆ[53];
      v = 0;
      for (; M.length > v; v++) {
        if (M[v].info) {
          gf(M[v], 376);
        }
      }
      M = mx.ⵠΔⲆ[10];
      v = 0;
      for (; v < M.length; v++) {
        if (M[v].info & 1) {
          gf(M[v], 336);
        }
      }
      M = mx.ⵠΔⲆ[15];
      v = 0;
      for (; v < M.length; v++) {
        if (M[v].info & 1) {
          gf(M[v], 373);
        }
      }
      M = mx.ⵠΔⲆ[16];
      v = 0;
      for (; M.length > v; v++) {
        if (M[v].info) {
          gf(M[v], 376);
        }
      }
      M = mx.ⵠΔⲆ[17];
      v = 0;
      for (; M.length > v; v++) {
        if (M[v].info) {
          gf(M[v], 379);
        }
      }
      M = mx.ⵠΔⲆ[21];
      v = 0;
      for (; v < M.length; v++) {
        if (M[v].info) {
          gf(M[v], 500);
        }
      }
      M = mx.ⵠΔⲆ[51];
      v = 0;
      for (; v < M.length; v++) {
        if (M[v].info) {
          gf(M[v], 376);
        }
      }
      var pa = mx.ⵠΔⲆ[80];
      for (v = 0; v < pa.length; v++) {
        gf(pa[v], 264, 322);
      }
      var E = mx.ⵠΔⲆ[41];
      for (v = 0; v < E.length; v++) {
        gf(E[v], 198);
      }
      n = mx.ⵠΔⲆ[76];
      v = 0;
      for (; n.length > v; v++) {
        gf(n[v], Cr.ⵠΔⵠᐃᐃⲆⲆ, Cr.ⲆᐃⵠⵠⲆΔᐃⲆⵠ);
      }
      var qa = mx.ⵠΔⲆ[91];
      for (v = 0; v < qa.length; v++) {
        if (qa[v].ΔⲆΔⵠΔⲆΔ === 0) {
          gf(qa[v]);
        }
      }
      H = mx.ⵠΔⲆ[0];
      v = 0;
      for (; H.length > v; v++) {
        U = H[v];
        if (H[v].ⲆΔⵠⵠⲆ !== 227 && H[v].ⲆΔⵠⵠⲆ !== 228 && H[v].ⲆΔⵠⵠⲆ !== 229 && H[v].ⲆΔⵠⵠⲆ !== 230 && H[v].ⲆΔⵠⵠⲆ !== 91) {
          if (U.ᐃⵠⵠᐃΔⲆᐃ === 0) {
            if (U.ᐃⲆᐃⲆᐃⲆⵠ > 0.001) {
              U.ᐃⲆᐃⲆᐃⲆⵠ = ⵠᐃⵠ.ⵠⵠⲆⲆⵠ(U.ᐃⲆᐃⲆᐃⲆⵠ, 0, 0.018);
              var ra = 1 + Math.min(1, Math.max(U.ᐃⲆᐃⲆᐃⲆⵠ, 0) / 100) * 0.18;
              Xn.save();
              Xn.scale(ra, ra);
              nx.ᐃΔΔ.x /= ra;
              nx.ᐃΔΔ.y /= ra;
              U.x /= ra;
              U.y /= ra;
              U.r.x /= ra;
              U.r.y /= ra;
              U.ⲆⵠⵠⵠⲆⵠᐃ();
              U.ΔⵠᐃⲆ();
              nx.ᐃΔΔ.x *= ra;
              nx.ᐃΔΔ.y *= ra;
              U.x *= ra;
              U.y *= ra;
              U.r.x *= ra;
              U.r.y *= ra;
              Xn.restore();
            } else {
              U.ΔⲆΔⵠΔⲆΔ = 0;
              U.ⲆⵠⵠⵠⲆⵠᐃ();
              U.ΔⵠᐃⲆ();
            }
          }
        } else if (U.ⲆΔΔΔⵠ <= 180) {
          Xn.save();
          ra = 1 + Math.min(1, Math.max(U.ⲆⵠⵠΔⲆ - 30, 0) / 180) * 0.35;
          Xn.scale(ra, ra);
          nx.ᐃΔΔ.x /= ra;
          nx.ᐃΔΔ.y /= ra;
          U.x /= ra;
          U.y /= ra;
          U.r.x /= ra;
          U.r.y /= ra;
          U.ΔⲆΔⵠΔⲆΔ = 0;
          U.ⲆⵠⵠⵠⲆⵠᐃ();
          U.ΔⵠᐃⲆ();
          nx.ᐃΔΔ.x *= ra;
          nx.ᐃΔΔ.y *= ra;
          U.x *= ra;
          U.y *= ra;
          U.r.x *= ra;
          U.r.y *= ra;
          Xn.restore();
        }
      }
      E = mx.ⵠΔⲆ[41];
      v = 0;
      for (; v < E.length; v++) {
        gf(E[v], 913);
      }
      var sa = mx.ⵠΔⲆ[67];
      for (v = 0; sa.length > v; v++) {
        gf(sa[v]);
      }
      var Q = mx.ⵠΔⲆ[62];
      for (v = 0; v < Q.length; v++) {
        gf(Q[v], 419, 461);
      }
      var _ = mx.ⵠΔⲆ[70];
      for (v = 0; _.length > v; v++) {
        gf(_[v]);
      }
      var F = mx.ⵠΔⲆ[60];
      for (v = 0; F.length > v; v++) {
        gf(F[v], 299, 326);
      }
      var R = mx.ⵠΔⲆ[72];
      for (v = 0; R.length > v; v++) {
        gf(R[v], 232, 1077);
      }
      var j = mx.ⵠΔⲆ[73];
      for (v = 0; v < j.length; v++) {
        gf(j[v], 233, 1092);
      }
      ha = mx.ⵠΔⲆ[44];
      v = 0;
      for (; v < ha.length; v++) {
        if (ha[v].info & 15 && ha[v].info !== 10) {
          gf(ha[v]);
        }
      }
      ia = mx.ⵠΔⲆ[54];
      v = 0;
      for (; v < ia.length; v++) {
        if (ia[v].info & 15 && ia[v].info !== 10) {
          gf(ia[v]);
        }
      }
      ja = mx.ⵠΔⲆ[89];
      v = 0;
      for (; ja.length > v; v++) {
        gf(ja[v], 239);
      }
      ja = mx.ⵠΔⲆ[55];
      v = 0;
      for (; ja.length > v; v++) {
        if ((ja[v].info & 15) !== 0 && ja[v].info !== 10) {
          gf(ja[v]);
        }
      }
      C = mx.ⵠΔⲆ[43];
      v = 0;
      for (; v < C.length; v++) {
        vf(C[v]);
      }
      la = mx.ⵠΔⲆ[39];
      v = 0;
      for (; la.length > v; v++) {
        if (la[v].info & 15 && la[v].info !== 10) {
          gf(la[v]);
        }
      }
      ma = mx.ⵠΔⲆ[40];
      v = 0;
      for (; ma.length > v; v++) {
        if ((ma[v].info & 15) !== 0 && ma[v].info !== 10) {
          gf(ma[v]);
        }
      }
      na = mx.ⵠΔⲆ[37];
      v = 0;
      for (; na.length > v; v++) {
        if (na[v].info & 15 && na[v].info !== 10) {
          gf(na[v]);
        }
      }
      var G = mx.ⵠΔⲆ[81];
      for (v = 0; G.length > v; v++) {
        gf(G[v], 691, 697);
      }
      var W = mx.ⵠΔⲆ[66];
      for (v = 0; v < W.length; v++) {
        gf(W[v], 637, 687);
      }
      var L = mx.ⵠΔⲆ[65];
      for (v = 0; L.length > v; v++) {
        gf(L[v], 673, 688);
      }
      var N = mx.ⵠΔⲆ[61];
      for (v = 0; N.length > v; v++) {
        gf(N[v], 260, 333);
      }
      var q = mx.ⵠΔⲆ[88];
      for (v = 0; q.length > v; v++) {
        gf(q[v], 1033, 1034);
      }
      var O = mx.ⵠΔⲆ[63];
      for (v = 0; O.length > v; v++) {
        gf(O[v], 445, 462);
      }
      var Y = mx.ⵠΔⲆ[77];
      for (v = 0; v < Y.length; v++) {
        gf(Y[v]);
      }
      var K = mx.ⵠΔⲆ[68];
      for (v = 0; K.length > v; v++) {
        gf(K[v], 918, 919);
      }
      var V = mx.ⵠΔⲆ[71];
      for (v = 0; V.length > v; v++) {
        gf(V[v]);
      }
      var Z = mx.ⵠΔⲆ[78];
      for (v = 0; Z.length > v; v++) {
        gf(Z[v], 1218, 1219);
      }
      var X = mx.ⵠΔⲆ[64];
      for (v = 0; X.length > v; v++) {
        if (X[v].scale === 1) {
          gf(X[v], 449, 463);
        }
      }
      X = mx.ⵠΔⲆ[69];
      v = 0;
      for (; X.length > v; v++) {
        if (X[v].scale === 1) {
          gf(X[v], 450, 464);
        }
      }
      var ta = mx.ⵠΔⲆ[11];
      for (v = 0; v < ta.length; v++) {
        gf(ta[v]);
      }
      var ua = mx.ⵠΔⲆ[2];
      for (v = 0; v < ua.length; v++) {
        gf(ua[v], 114);
      }
      g = mx.ⵠΔⲆ[18];
      v = 0;
      for (; g.length > v; v++) {
        gf(g[v]);
      }
      var va = mx.ⵠΔⲆ[34];
      for (v = 0; v < va.length; v++) {
        gf(va[v]);
      }
      M = mx.ⵠΔⲆ[10];
      v = 0;
      for (; v < M.length; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 166);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      M = mx.ⵠΔⲆ[15];
      v = 0;
      for (; M.length > v; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 171);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      M = mx.ⵠΔⲆ[16];
      v = 0;
      for (; v < M.length; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 172);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      M = mx.ⵠΔⲆ[17];
      v = 0;
      for (; M.length > v; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 173);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      M = mx.ⵠΔⲆ[21];
      v = 0;
      for (; M.length > v; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 124);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      M = mx.ⵠΔⲆ[51];
      v = 0;
      for (; v < M.length; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 218);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      M = mx.ⵠΔⲆ[45];
      v = 0;
      for (; M.length > v; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 212);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      M = mx.ⵠΔⲆ[46];
      v = 0;
      for (; M.length > v; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 213);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      M = mx.ⵠΔⲆ[47];
      v = 0;
      for (; M.length > v; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 214);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      M = mx.ⵠΔⲆ[48];
      v = 0;
      for (; M.length > v; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 215);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      M = mx.ⵠΔⲆ[49];
      v = 0;
      for (; M.length > v; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 216);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      M = mx.ⵠΔⲆ[53];
      v = 0;
      for (; v < M.length; v++) {
        if (!(M[v].info & 1)) {
          gf(M[v], 220);
        }
        M[v].ᐃⵠΔΔⵠ(M[v].info >> 1);
      }
      var wa = mx.ⵠΔⲆ[4];
      for (v = 0; wa.length > v; v++) {
        gf(wa[v], 162);
        wa[v].ᐃⵠΔΔⵠ(wa[v].info);
      }
      wa = mx.ⵠΔⲆ[7];
      v = 0;
      for (; wa.length > v; v++) {
        gf(wa[v], 163);
        wa[v].ᐃⵠΔΔⵠ(wa[v].info);
      }
      wa = mx.ⵠΔⲆ[8];
      v = 0;
      for (; wa.length > v; v++) {
        gf(wa[v], 164);
        wa[v].ᐃⵠΔΔⵠ(wa[v].info);
      }
      wa = mx.ⵠΔⲆ[9];
      v = 0;
      for (; v < wa.length; v++) {
        gf(wa[v], 165);
        wa[v].ᐃⵠΔΔⵠ(wa[v].info);
      }
      wa = mx.ⵠΔⲆ[19];
      v = 0;
      for (; v < wa.length; v++) {
        gf(wa[v], 122);
        wa[v].ᐃⵠΔΔⵠ(wa[v].info);
      }
      wa = mx.ⵠΔⲆ[50];
      v = 0;
      for (; v < wa.length; v++) {
        gf(wa[v], 217);
        wa[v].ᐃⵠΔΔⵠ(wa[v].info);
      }
      var xa = mx.ⵠΔⲆ[5];
      for (v = 0; xa.length > v; v++) {
        gf(xa[v], 160);
        xa[v].ᐃⵠΔΔⵠ(xa[v].info);
      }
      xa = mx.ⵠΔⲆ[12];
      v = 0;
      for (; v < xa.length; v++) {
        gf(xa[v], 168);
        xa[v].ᐃⵠΔΔⵠ(xa[v].info);
      }
      xa = mx.ⵠΔⲆ[13];
      v = 0;
      for (; xa.length > v; v++) {
        gf(xa[v], 169);
        xa[v].ᐃⵠΔΔⵠ(xa[v].info);
      }
      xa = mx.ⵠΔⲆ[14];
      v = 0;
      for (; v < xa.length; v++) {
        gf(xa[v], 170);
        xa[v].ᐃⵠΔΔⵠ(xa[v].info);
      }
      xa = mx.ⵠΔⲆ[20];
      v = 0;
      for (; v < xa.length; v++) {
        gf(xa[v], 123);
        xa[v].ᐃⵠΔΔⵠ(xa[v].info);
      }
      xa = mx.ⵠΔⲆ[52];
      v = 0;
      for (; xa.length > v; v++) {
        gf(xa[v], 219);
        xa[v].ᐃⵠΔΔⵠ(xa[v].info);
      }
      var ya = mx.ⵠΔⲆ[35];
      for (v = 0; v < ya.length; v++) {
        var za = ya[v];
        if (za.info > 0) {
          gf(za, 788);
        } else {
          gf(za, 182);
        }
      }
      var Aa = mx.ⵠΔⲆ[29];
      for (v = 0; v < Aa.length; v++) {
        gf(Aa[v], 159);
      }
      Cw(uw, i, t, u, e, 111, "g", 2);
      Cw(uw, i, t, u, e, 415, "gw", 2);
      Cw(uw, i, t, u, e, 112, "d", 2);
      Cw(uw, i, t, u, e, 416, "dw", 2);
      Cw(uw, i, t, u, e, 110, "p", 0);
      Cw(uw, i, t, u, e, 241, "m", 2);
      Cw(uw, i, t, u, e, 121, "a", 2);
      Cw(uw, i, t, u, e, 202, "re", 2);
      Cw(uw, i, t, u, e, 679, "cs", 3, 3);
      Cw(uw, i, t, u, e, 679, "cs", 2, 2);
      Cw(uw, i, t, u, e, 679, "cs", 1, 1);
      Cw(uw, i, t, u, e, 679, "cs", 0, 0);
      Cw(uw, i, t, u, e, 676, "cs", 3, 3);
      Cw(uw, i, t, u, e, 676, "cs", 2, 2);
      Cw(uw, i, t, u, e, 676, "cs", 1, 1);
      Cw(uw, i, t, u, e, 676, "cs", 0, 0);
      var Ba = mx.ⵠΔⲆ[100];
      for (v = 0; v < Ba.length; v++) {
        for (aa = 0; aa < Ba[v].info; aa++) {
          gf(Ba[v].ⵠⵠᐃⲆ[aa], 294);
        }
      }
      Cw(uw, i, t, u, e, 108, "s", 2);
      var Ca = mx.ⵠΔⲆ[24];
      for (v = 0; v < Ca.length; v++) {
        gf(Ca[v]);
      }
      Ca = mx.ⵠΔⲆ[25];
      v = 0;
      for (; v < Ca.length; v++) {
        gf(Ca[v]);
      }
      Ca = mx.ⵠΔⲆ[26];
      v = 0;
      for (; v < Ca.length; v++) {
        gf(Ca[v]);
      }
      Ca = mx.ⵠΔⲆ[27];
      v = 0;
      for (; v < Ca.length; v++) {
        gf(Ca[v]);
      }
      Ca = mx.ⵠΔⲆ[28];
      v = 0;
      for (; v < Ca.length; v++) {
        gf(Ca[v]);
      }
      var Da = mx.ⵠΔⲆ[32];
      for (v = 0; v < Da.length; v++) {
        lf(Da[v]);
      }
      ca = mx.ⵠΔⲆ[1];
      v = 0;
      for (; ca.length > v; v++) {
        vf(ca[v]);
      }
      ca = mx.ⵠΔⲆ[6];
      v = 0;
      for (; v < ca.length; v++) {
        vf(ca[v]);
      }
      g = mx.ⵠΔⲆ[18];
      v = 0;
      for (; g.length > v; v++) {
        if (g[v].action == 2) {
          vf(g[v]);
        }
      }
      va = mx.ⵠΔⲆ[34];
      v = 0;
      for (; v < va.length; v++) {
        vf(va[v]);
      }
      da = mx.ⵠΔⲆ[22];
      v = 0;
      for (; v < da.length; v++) {
        vf(da[v]);
      }
      ea = mx.ⵠΔⲆ[23];
      v = 0;
      for (; v < ea.length; v++) {
        vf(ea[v]);
        ea[v].ᐃⵠΔΔⵠ(ea[v].info);
      }
      Cw(uw, i, t, u, e, 989, "c", 0);
      Cw(uw, i, t, u, e, 109, "t", 5, 4);
      Cw(uw, i, t, u, e, 413, "f", 2, 2);
      Cw(uw, i, t, u, e, 693, "plm", 0, 0);
      Cw(uw, i, t, u, e, 307, "b", 3, 2);
      Cw(uw, i, t, u, e, 109, "t", 3, 2);
      Cw(uw, i, t, u, e, 307, "b", 1, 0);
      Cw(uw, i, t, u, e, 413, "f", 1, 1);
      Cw(uw, i, t, u, e, 693, "plm", 1, 1);
      Cw(uw, i, t, u, e, 109, "t", 1, 0);
      Cw(uw, i, t, u, e, 413, "f", 0, 0);
      Cw(uw, i, t, u, e, 693, "plm", 2, 2);
      Da = mx.ⵠΔⲆ[32];
      v = 0;
      for (; Da.length > v; v++) {
        vf(Da[v]);
      }
      var Ea = mx.ⵠΔⲆ[56];
      for (v = 0; v < Ea.length; v++) {
        gf(Ea[v], 221);
      }
      H = mx.ⵠΔⲆ[0];
      v = 0;
      for (; H.length > v; v++) {
        U = H[v];
        if (U.ᐃⵠⵠᐃΔⲆᐃ === 1 && (U.ⲆΔΔΔⵠ < 180 || U.ⲆΔⵠⵠⲆ !== 227 && U.ⲆΔⵠⵠⲆ !== 228 && U.ⲆΔⵠⵠⲆ !== 91 && U.ⲆΔⵠⵠⲆ !== 229 && U.ⲆΔⵠⵠⲆ !== 230)) {
          U.ᐃⲆᐃⲆᐃⲆⵠ = ⵠᐃⵠ.ⵠⵠⲆⲆⵠ(U.ᐃⲆᐃⲆᐃⲆⵠ, 100, 0.018);
          ra = 1 + Math.min(1, Math.max(U.ᐃⲆᐃⲆᐃⲆⵠ, 0) / 100) * 0.18;
          Xn.save();
          Xn.scale(ra, ra);
          nx.ᐃΔΔ.x /= ra;
          nx.ᐃΔΔ.y /= ra;
          U.x /= ra;
          U.y /= ra;
          U.r.x /= ra;
          U.r.y /= ra;
          U.ⲆⵠⵠⵠⲆⵠᐃ();
          U.ΔⵠᐃⲆ();
          nx.ᐃΔΔ.x *= ra;
          nx.ᐃΔΔ.y *= ra;
          U.x *= ra;
          U.y *= ra;
          U.r.x *= ra;
          U.r.y *= ra;
          Xn.restore();
        }
      }
      var Fa = mx.ⵠΔⲆ[38];
      for (v = 0; Fa.length > v; v++) {
        gf(Fa[v], 190);
        Fa[v].ᐃⵠΔΔⵠ(Fa[v].info);
      }
      var Ga = mx.ⵠΔⲆ[90];
      for (v = 0; Ga.length > v; v++) {
        gf(Ga[v], 245, 246);
      }
      var Ha = mx.ⵠΔⲆ[42];
      for (v = 0; Ha.length > v; v++) {
        gf(Ha[v], 201);
      }
      H = mx.ⵠΔⲆ[0];
      v = 0;
      for (; v < H.length; v++) {
        U = H[v];
        if ((U.ⲆΔⵠⵠⲆ === 227 || U.ⲆΔⵠⵠⲆ === 228 || U.ⲆΔⵠⵠⲆ === 91 || U.ⲆΔⵠⵠⲆ === 229 || U.ⲆΔⵠⵠⲆ === 230) && U.ⲆΔΔΔⵠ > 180) {
          U.ΔⲆΔⵠΔⲆΔ = 1;
          Xn.save();
          ra = 1 + Math.min(1, Math.max(U.ⲆⵠⵠΔⲆ - 30, 0) / 180) * 0.35;
          Xn.scale(ra, ra);
          nx.ᐃΔΔ.x /= ra;
          nx.ᐃΔΔ.y /= ra;
          U.x /= ra;
          U.y /= ra;
          U.r.x /= ra;
          U.r.y /= ra;
          U.ⲆⵠⵠⵠⲆⵠᐃ();
          U.ΔⵠᐃⲆ();
          nx.ᐃΔΔ.x *= ra;
          nx.ᐃΔΔ.y *= ra;
          U.x *= ra;
          U.y *= ra;
          U.r.x *= ra;
          U.r.y *= ra;
          Xn.restore();
        }
      }
      qa = mx.ⵠΔⲆ[91];
      v = 0;
      for (; v < qa.length; v++) {
        if (qa[v].ΔⲆΔⵠΔⲆΔ === 1) {
          gf(qa[v]);
        }
      }
      X = mx.ⵠΔⲆ[64];
      v = 0;
      for (; v < X.length; v++) {
        if (X[v].scale > 1) {
          gf(X[v], 449, 463);
        }
      }
      X = mx.ⵠΔⲆ[69];
      v = 0;
      for (; v < X.length; v++) {
        if (X[v].scale > 1) {
          gf(X[v], 450, 464);
        }
      }
      var Ia = mx.ⵠΔⲆ[74];
      for (v = 0; v < Ia.length; v++) {
        gf(Ia[v], 235, 1107);
      }
      var Ja = mx.ⵠΔⲆ[75];
      for (v = 0; Ja.length > v; v++) {
        gf(Ja[v], 238, 1128);
      }
      if ((ow += vx * 15) > 60) {
        ow -= 60;
      }
      Cw(qw, i, t, u, e, 1041, "fo", 2);
      Cw(qw, i, t, u, e, 244, "fod", 2);
    })();
    if (lx.ⲆᐃΔⲆΔ && mx.mode !== 2 && mx.mode !== 4 && mx.mode !== 5) {
      (function () {
        var a = nx.ⵠΔⵠᐃΔ;
        if (a.ΔᐃΔⵠⵠ === 0) {
          a.ⵠⲆⲆΔᐃ = Math.max(0, a.ⵠⲆⲆΔᐃ - vx / 10);
        } else {
          a.ⵠⲆⲆΔᐃ = Math.min(1, a.ⵠⲆⲆΔᐃ + vx / 10);
        }
        for (var b = a.ⵠᐃⲆⲆΔ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ⵠⲆⲆ(d);
          cf(471, d.id, nx.ᐃΔΔ.x + d.x, nx.ᐃΔΔ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ⲆⵠᐃⵠⲆ <= 0 || d.x > -nx.ᐃΔΔ.x + Yn || -nx.ᐃΔΔ.x - nx.ᐃΔΔ.w / 2 > d.x || -nx.ᐃΔΔ.y + _n < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -nx.ᐃΔΔ.y;
        if (mx.ⲆᐃᐃⲆᐃ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = nx.ⵠⲆⲆᐃⵠ;
        if (a.ΔᐃΔⵠⵠ === 0) {
          a.ⵠⲆⲆΔᐃ = Math.max(0, a.ⵠⲆⲆΔᐃ - vx / 10);
        } else {
          a.ⵠⲆⲆΔᐃ = Math.min(1, a.ⵠⲆⲆΔᐃ + vx / 10);
        }
        for (var b = a.ⵠᐃⲆⲆΔ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ⵠⲆⲆ(d);
          cf(470, d.id, nx.ᐃΔΔ.x + d.x, nx.ᐃΔΔ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          d = b[c];
          if (d.ⲆⵠᐃⵠⲆ <= 0 || -nx.ᐃΔΔ.x + Yn < d.x || -nx.ᐃΔΔ.x > d.x || d.y > -nx.ᐃΔΔ.y + _n) {
            b.splice(c, 1);
          }
        }
        var e = -nx.ᐃΔΔ.y;
        if (mx.ⲆⲆⲆⵠⲆ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = nx.ΔⲆⲆⵠᐃᐃⵠ;
        for (var b = a.ⵠᐃⲆⲆΔ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ⵠⲆⲆ(d);
          cf(942, d.id, nx.ᐃΔΔ.x + d.x, nx.ᐃΔΔ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ⲆⵠᐃⵠⲆ <= 0 || d.x > -nx.ᐃΔΔ.x + Yn || -nx.ᐃΔΔ.x > d.x || d.y > -nx.ᐃΔΔ.y + _n) {
            b.splice(c, 1);
          }
        }
        var e = -nx.ᐃΔΔ.y;
        if (mx.ᐃⲆᐃⲆⵠ > -1000) {
          a.add(e);
        }
      })();
    }
    if (mx.transition && a) {
      mx.transition = false;
      mx.ⵠΔΔᐃ.ᐃⵠⲆ = 0;
      mx.ⵠΔΔᐃ.ᐃᐃᐃ = false;
    }
  }
  function nf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = nx.ᐃΔΔ.x + j - 700;
    var g = Math.max(nx.ᐃΔΔ.y + e, 0);
    var l = Math.max(-nx.ᐃΔΔ.y + _n - i - 100, 0);
    var t = g;
    var b = _n - g - l;
    if (o) {
      var d = q.Ⲇᐃᐃ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.Ⲇᐃᐃ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.Ⲇᐃᐃ(s);
    } else {
      d = s.r;
    }
    if (k < u + (f = h + 350 - u + d.x) - 3) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f - 2;
    } else {
      A = false;
      u = k;
      E = -1;
    }
    f = h + 700 - u;
    if (mx.transition) {
      var N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
    }
    Xn.fillRect(F, c, p, C);
    if (o) {
      if (mx.transition) {
        N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(15, 70, 76, 42, 139, 155, N);
      } else {
        Xn.fillStyle = Cr.ⲆᐃΔⵠΔΔⲆ[mx.time];
      }
    } else if (mx.transition) {
      N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
    }
    Xn.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (mx.transition) {
          N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
          Xn.fillStyle = sf(17, 94, 96, 169, 214, 211, N);
        } else {
          Xn.fillStyle = Cr.ᐃᐃΔⵠΔⵠⵠ[mx.time];
        }
      } else if (mx.transition) {
        N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
      } else {
        Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
      }
      Xn.fillRect(L, J, M, B);
    }
    if (lx.ⲆᐃΔⲆΔ && o) {
      q.ᐃⲆΔⲆⲆᐃⵠᐃⵠ(k, E, G, h, -nx.ᐃΔΔ.y + c, -nx.ᐃΔΔ.y + c + C);
    }
  }
  function of(a) {
    Xn.save();
    Xn.translate(nx.ᐃΔΔ.x + a.x, nx.ᐃΔΔ.y + a.y);
    Xn.rotate(a.angle);
    Xn.globalAlpha = a.alpha;
    var b = ⵠⵠ[a.id][mx.time];
    Up(Xn, b, -b.width / 2, -b.height / 2);
    Xn.globalAlpha = 1;
    Xn.restore();
  }
  function af(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var a = Math.floor(f / 2);
    var h = Math.floor(g / 2);
    if (mx.transition) {
      Xn.globalAlpha = 1;
      Up(Xn, ⵠⵠ[b][mx.time], 0, 0, f, g, d, e, a, h);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Up(Xn, ⵠⵠ[b][mx.time], 0, 0, f, g, d, e, a, h);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1;
    } else {
      Up(Xn, c, 0, 0, f, g, d, e, a, h);
    }
  }
  function rf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = nx.ᐃΔΔ.y + j + 710;
    var g = Math.max(nx.ᐃΔΔ.x + e, 0);
    var l = Math.max(-nx.ᐃΔΔ.x + Yn - i - 100, 0);
    var t = g;
    var b = Yn - g - l;
    if (o) {
      var d = q.Ⲇᐃᐃ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.Ⲇᐃᐃ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.Ⲇᐃᐃ(s);
    } else {
      d = s.r;
    }
    if (k > u + (f = h - 350 - u - d.x)) {
      var A = jq;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f + 2;
    } else {
      A = Vh;
      u = k;
      E = -1;
    }
    f = h - 700 - u;
    if (mx.transition) {
      var N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
    }
    Xn.fillRect(c, F, C, p);
    if (o) {
      if (mx.transition) {
        N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(15, 70, 76, 42, 139, 155, N);
      } else {
        Xn.fillStyle = Cr.ⲆᐃΔⵠΔΔⲆ[mx.time];
      }
    } else if (mx.transition) {
      N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
    }
    Xn.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (mx.transition) {
          N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
          Xn.fillStyle = sf(17, 94, 96, 169, 214, 211, N);
        } else {
          Xn.fillStyle = Cr.ᐃᐃΔⵠΔⵠⵠ[mx.time];
        }
      } else if (mx.transition) {
        N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
      } else {
        Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
      }
      Xn.fillRect(J, L, B, M);
    }
    if (lx.ⲆᐃΔⲆΔ && o) {
      q.ⲆΔΔⵠᐃⵠΔΔΔ(k, E, G, h, -nx.ᐃΔΔ.x + c, -nx.ᐃΔΔ.x + c + C);
    }
  }
  function sf(b, c, d, e, f, g, a) {
    var i;
    var j = "#";
    j += (i = Math.floor(e * a + (1 - a) * b)) < 16 ? "0" + i.toString(16) : i.toString(16);
    j += (i = Math.floor(a * f + c * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
    return j += (i = Math.floor(g * a + d * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
  }
  function hf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = nx.ᐃΔΔ.x + j + 820;
    var g = Math.max(nx.ᐃΔΔ.y + e, 0);
    var l = Math.max(-nx.ᐃΔΔ.y + _n - i - 100, 0);
    var t = g;
    var b = _n - g - l;
    if (o) {
      var d = q.Ⲇᐃᐃ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.Ⲇᐃᐃ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.Ⲇᐃᐃ(s);
    } else {
      d = s.r;
    }
    if (k > u + (f = h - 350 - u - d.x)) {
      var A = Fl;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f + 2;
    } else {
      A = false;
      u = k;
      E = -1;
    }
    f = h - 700 - u;
    if (mx.transition) {
      var N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
    }
    Xn.fillRect(F, c, p, C);
    if (o) {
      if (mx.transition) {
        N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(15, 70, 76, 42, 139, 155, N);
      } else {
        Xn.fillStyle = Cr.ⲆᐃΔⵠΔΔⲆ[mx.time];
      }
    } else if (mx.transition) {
      N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
    }
    Xn.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (mx.transition) {
          N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
          Xn.fillStyle = sf(17, 94, 96, 169, 214, 211, N);
        } else {
          Xn.fillStyle = Cr.ᐃᐃΔⵠΔⵠⵠ[mx.time];
        }
      } else if (mx.transition) {
        N = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
      } else {
        Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
      }
      Xn.fillRect(L, J, M, B);
    }
    if (lx.ⲆᐃΔⲆΔ && o) {
      q.ᐃⵠᐃᐃᐃᐃⵠⲆᐃ(k, E, G, h, -nx.ᐃΔΔ.y + c, -nx.ᐃΔΔ.y + c + C);
    }
  }
  function gf(a, b, c) {
    if (mx.transition) {
      Xn.globalAlpha = 1;
      a.ΔⵠᐃⲆ(b, c);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      a.ΔⵠᐃⲆ(b, c);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1;
    } else {
      a.ΔⵠᐃⲆ(b, c);
    }
  }
  function lf(a, b) {
    if (mx.transition) {
      Xn.globalAlpha = 1;
      a.ⲆⲆⲆΔⵠ(b);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      a.ⲆⲆⲆΔⵠ(b);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1;
    } else {
      a.ⲆⲆⲆΔⵠ(b);
    }
  }
  function uf(j, e, i, k, n, o) {
    var a = k.w1;
    var q = k.w2;
    var r = k.w3;
    var h = nx.ᐃΔΔ.y + j - 700;
    var g = Math.max(nx.ᐃΔΔ.x + e, 0);
    var l = Math.max(-nx.ᐃΔΔ.x + Yn - i - 100, 0);
    var s = g;
    var b = Yn - g - l;
    if (o) {
      var d = k.Ⲇᐃᐃ(a);
    } else {
      d = a.r;
    }
    var t = h + 0;
    var u = s;
    var c = t;
    var p = d.x + 0;
    var C = b;
    var F = t += d.x + 0 - 2;
    if (o) {
      d = k.Ⲇᐃᐃ(q);
    } else {
      d = q.r;
    }
    var f = h + 250 - t + d.x;
    var G = t;
    var y = s;
    var w = f;
    var H = b;
    var A = (t += f - 2) - 2;
    if (o) {
      d = k.Ⲇᐃᐃ(r);
    } else {
      d = r.r;
    }
    if (t + (f = h + 350 - t + d.x) - 3 > A) {
      var x = P;
      var K = t;
      var L = s;
      var B = f;
      var E = b;
      var D = t += f - 2;
    } else {
      x = tl;
      t = A;
      D = -1;
    }
    f = h + 700 - t;
    if (mx.transition) {
      var M = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, M);
    } else {
      Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
    }
    Xn.fillRect(u, c, C, p);
    if (o) {
      if (mx.transition) {
        M = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(15, 70, 76, 42, 139, 155, M);
      } else {
        Xn.fillStyle = Cr.ⲆᐃΔⵠΔΔⲆ[mx.time];
      }
    } else if (mx.transition) {
      M = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, M);
    } else {
      Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
    }
    Xn.fillRect(y, G, H, w);
    if (x) {
      if (o) {
        if (mx.transition) {
          M = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
          Xn.fillStyle = sf(17, 94, 96, 169, 214, 211, M);
        } else {
          Xn.fillStyle = Cr.ᐃᐃΔⵠΔⵠⵠ[mx.time];
        }
      } else if (mx.transition) {
        M = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(9, 55, 63, 11, 106, 132, M);
      } else {
        Xn.fillStyle = Cr.ⲆⵠⲆᐃᐃ[mx.time];
      }
      Xn.fillRect(L, K, E, B);
    }
    if (lx.ⲆᐃΔⲆΔ && o) {
      k.ⵠⵠⲆΔⵠⵠⲆΔᐃ(A, D, F, h, -nx.ᐃΔΔ.x + u, -nx.ᐃΔΔ.x + u + C);
    }
  }
  function bf(b, c, d, e, f) {
    var g = d.width;
    var a = d.height;
    var i = Math.floor(g / 2);
    var j = Math.floor(a / 2);
    if (mx.transition) {
      Xn.globalAlpha = 1;
      Up(Xn, ⵠⵠ[b][c][mx.time], 0, 0, g, a, e, f, i, j);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Up(Xn, ⵠⵠ[b][c][mx.time], 0, 0, g, a, e, f, i, j);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1;
    } else {
      Up(Xn, ⵠⵠ[b][c][mx.time], 0, 0, g, a, e, f, i, j);
    }
  }
  function df(a, b, c) {
    Ci(yt, a, b, c);
    const d = ~(sb[0] & 21838) & 21838 | ~(sb[0] & 21838) & sb[0];
    return ~(d & 13004) & 13004 | ~(d & 13004) & d;
  }
  function vf(a, b) {
    if (mx.transition) {
      Xn.globalAlpha = 1;
      a.ΔⲆΔⵠⵠ(b);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      a.ΔⲆΔⵠⵠ(b);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1;
    } else {
      a.ΔⲆΔⵠⵠ(b);
    }
  }
  function mf(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = nx.ᐃΔΔ.x + f - 700;
    var g = Math.max(nx.ᐃΔΔ.y + e, 0);
    var l = Math.max(-nx.ᐃΔΔ.y + _n - i - 100, 0);
    var r = g;
    var b = _n - g - l;
    if (n) {
      var d = j.Ⲇᐃᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.Ⲇᐃᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.Ⲇᐃᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (u < s + (t = h + 350 - s + d) - 3) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ΔⵠⵠⲆⲆᐃΔ === 1) {
      if (mx.transition) {
        var p = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(15, 77, 72, 252, 239, 187, p);
      } else {
        Xn.fillStyle = Cr.ᐃⲆⲆΔⲆⲆᐃ[mx.time];
      }
      Xn.fillRect(s, r, t, b);
    } else {
      if (mx.transition) {
        p = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(k.ΔⲆⵠ[0], k.ΔⲆⵠ[1], k.ΔⲆⵠ[2], k.ⲆΔⲆ[0], k.ⲆΔⲆ[1], k.ⲆΔⲆ[2], p);
      } else {
        Xn.fillStyle = k.ⲆΔⵠⵠᐃ[mx.time];
      }
      Xn.fillRect(s, r, t, b);
    }
  }
  function cf(a, b, c, d, e) {
    if (mx.transition && e == 1) {
      Xn.globalAlpha = 1;
      Up(Xn, ⵠⵠ[a][mx.time][b], c, d);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ;
      Up(Xn, ⵠⵠ[a][mx.time][b], c, d);
      mx.time = mx.time ? 0 : 1;
      Xn.globalAlpha = 1;
    } else {
      Xn.globalAlpha = e;
      Up(Xn, ⵠⵠ[a][mx.time][b], c, d);
      Xn.globalAlpha = 1;
    }
  }
  function pf(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = nx.ᐃΔΔ.y + f + 710;
    var g = Math.max(nx.ᐃΔΔ.x + e, 0);
    var l = Math.max(-nx.ᐃΔΔ.x + Yn - i - 100, 0);
    var r = g;
    var b = Yn - g - l;
    if (n) {
      var d = j.Ⲇᐃᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.Ⲇᐃᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.Ⲇᐃᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (u > s + (t = h - 350 - s - d)) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ΔⵠⵠⲆⲆᐃΔ === 1) {
      if (mx.transition) {
        var p = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(15, 77, 72, 252, 239, 187, p);
      } else {
        Xn.fillStyle = Cr.ᐃⲆⲆΔⲆⲆᐃ[mx.time];
      }
      Xn.fillRect(r, s, b, t);
    } else {
      if (mx.transition) {
        p = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
        Xn.fillStyle = sf(k.ΔⲆⵠ[0], k.ΔⲆⵠ[1], k.ΔⲆⵠ[2], k.ⲆΔⲆ[0], k.ⲆΔⲆ[1], k.ⲆΔⲆ[2], p);
      } else {
        Xn.fillStyle = k.ⲆΔⵠⵠᐃ[mx.time];
      }
      Xn.fillRect(r, s, b, t);
    }
  }
  function Cf(a) {
    Xn.globalAlpha = a.alpha;
    vd(Xn, a.x + nx.ᐃΔΔ.x, a.y + nx.ᐃΔΔ.y, a.r);
    gd(Xn, Cr.ᐃⵠⵠᐃⵠᐃΔ[mx.time]);
    Xn.globalAlpha = 1;
  }
  if (rg.ⲆᐃⲆⵠΔᐃᐃ) {
    var Tf = rg.Math.acos;
    rg.Math.acos = rg.Math.asin;
    rg.Math.asin = Tf;
    var ff = rg.Math.acos;
    rg.Math.acos = rg.Math.asin;
    rg.Math.asin = ff;
  }
  var zf = 0;
  var yf = 1;
  var wf = 2;
  var Pf = 0;
  var kf = 1;
  var Af = 2;
  function xf(f, j, i, k, n, q, a, t, u, x, g, l, b, d, y) {
    if (f.length === 0) {
      f = " ";
    }
    if (a === undefined) {
      a = 0;
    }
    if (t === undefined) {
      t = 0;
    }
    if (u === undefined) {
      u = 0;
    }
    if (d === Uj) {
      d = 0;
    }
    var m = document.createElement("canvas");
    var c = m.getContext("2d");
    c.textBaseline = "middle";
    c.font = (y !== undefined ? y + " " : "") + k + "px " + j;
    n = n !== undefined ? Math.min(c.measureText(f).width, n) : c.measureText(f).width;
    m.width = n + a;
    m.height = k + t;
    if (Wa !== q) {
      if (g !== undefined) {
        c.globalAlpha = g;
      }
      c.fillStyle = q;
      if (w !== l) {
        ⵠⲆΔΔᐃⲆᐃⲆⵠ(c, u + 2, u, n + a - u * 2 - 4, k + t - u * 2, l);
        c.fill();
      } else {
        c.fillRect(u, u, n + a - u * 2, k + t - u * 2);
      }
      c.globalAlpha = 1;
      if (u !== 0) {
        c.lineWidth = u;
        c.strokeStyle = x;
        c.stroke();
      }
    }
    c.textBaseline = "middle";
    c.font = (y !== _h ? y + " " : "") + k + "px " + j;
    if (b !== Ql) {
      c.strokeStyle = b;
      c.lineWidth = d;
      c.lineJoin = "miter";
      c.miterLimit = 2;
      c.strokeText(f, Math.floor(a / 2), Math.floor(t / 2) + Math.floor(k / 2), n);
    }
    c.fillStyle = i;
    c.fillText(f, Math.floor(a / 2), Math.floor(t / 2) + Math.floor(k / 2), n);
    m.w2 = m.width / 2;
    m.ⵠΔⲆⲆΔ = m.height / 2;
    return m;
  }
  function Jf(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function Mf(b, c, d, e, f) {
    var g = {
      x: d,
      y: e,
      ⵠΔⵠΔⵠ: d,
      ⲆΔᐃⵠⵠ: e
    };
    return {
      translate: g,
      ΔⵠᐃⲆ: function (a) {
        Up(a, b, g.x, g.y, b.width / 2, b.height / 2);
      },
      active: c,
      position: f
    };
  }
  function Bf(c, e, f, i, j, k, n, p, q, r, t) {
    if (Uj === q) {
      q = 0;
    }
    if (p === undefined) {
      p = 0;
    }
    if (r === undefined) {
      r = 0;
    }
    if (t === undefined) {
      t = 1;
    }
    if (k !== 1) {
      k = 0;
    }
    if (i) {
      var w = i;
    }
    var u;
    var x = {
      width: c,
      height: e,
      ΔΔ: w,
      state: Pf,
      translate: {
        x: p,
        y: q,
        ⵠΔⵠΔⵠ: p,
        ⲆΔᐃⵠⵠ: q
      },
      ΔⲆΔΔⲆⲆᐃᐃΔ: k,
      ᐃΔΔΔ: 0,
      callback: n,
      position: r,
      active: t
    };
    function d() {
      return x.ΔΔ[x.state];
    }
    function v(a) {
      var b = x.translate;
      if (x.width === 0 || x.height === 0) {
        x.width = x.ΔΔ[0].width;
        x.height = x.ΔΔ[0].height;
      }
      return a.x > b.x && a.x < b.x + x.width / j && a.y > b.y && a.y < b.y + x.height / j;
    }
    k = function () {
      var a = 0;
      if (x.ΔⲆΔΔⲆⲆᐃᐃΔ === 1) {
        if (x.state === kf || Af === x.state) {
          x.ᐃΔΔΔ = (0 + vx * 1000) % 1000;
        } else if (0 > 0) {
          x.ᐃΔΔΔ = 0 > 500 ? 0 + vx * 1000 : 0 - vx * 1000;
          if (0 < 0 || 1000 < 0) {
            x.ᐃΔΔΔ = 0;
          }
        }
        a = ⵠᐃⵠ.ΔΔᐃⲆΔ(0 > 500 ? 2 : 0) * 0.2;
      }
      return a;
    };
    if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
      u = function (a) {
        var b = 1 + k();
        var c = d();
        var e = x.width * b / 2;
        var f = b * x.height / 2;
        var g = (e - x.width / 2) / 2;
        var h = (f - x.height / 2) / 2;
        Up(a, c, x.translate.x - g, x.translate.y - h, e, f);
      };
    } else if (j === 3) {
      u = function (b) {
        var c = d();
        var e = x.width;
        var f = x.height;
        var g = (e - x.width) / 2;
        var h = (f - x.height) / 2;
        Up(b, c, x.translate.x - g, x.translate.y - h, e, f);
      };
      j = 1;
    } else {
      u = function (a) {
        Up(a, d(), x.translate.x, x.translate.y);
      };
    }
    return {
      info: x,
      ⵠⲆⵠᐃ: function (a, b, c) {
        if (v(b)) {
          if (c == yf) {
            x.state = Af;
          } else if (c == wf || c == zf && x.state != Af) {
            x.state = kf;
          }
          return Cl;
        } else {
          x.state = Pf;
          return Kk;
        }
      },
      ΔⵠᐃⲆ: u,
      ⵠΔⲆⲆⵠΔΔ: v
    };
  }
  var Ef = "send";
  var Df = ⵠᐃⵠ.ΔΔⲆᐃⵠⵠⲆ("id") === "1" ? 1 : 0;
  var If = ⵠᐃⵠ.ΔΔⲆᐃⵠⵠⲆ("password");
  var Sf = ⵠᐃⵠ.ΔΔⲆᐃⵠⵠⲆ("debug") || undefined;
  if (Sf !== undefined) {
    Sf = JSON.parse(rg.decodeURIComponent(Sf));
  }
  var Dw = ⵠᐃⵠ.ΔΔⲆᐃⵠⵠⲆ("server") || Wa;
  var _f = ⵠᐃⵠ.ΔΔⲆᐃⵠⵠⲆ("region") || w;
  var Ff = "starve.io";
  var Rf = "https://" + Ff;
  var jf = {
    IDLE: 64,
    ΔΔⲆΔ: 2,
    ⵠⲆΔΔⲆⲆⲆ: 16,
    ⲆⲆⲆⲆⲆΔⲆ: 256,
    ⲆⵠΔⲆⵠΔⲆ: 8,
    ⲆⵠⲆΔⲆⵠᐃ: 128,
    ⵠΔᐃⲆⵠ: 4,
    ΔⲆⲆᐃᐃⵠⵠ: 32,
    ᐃᐃΔᐃᐃΔΔⵠΔ: 1
  };
  var Gf = [{
    ⵠᐃⵠⲆΔ: 1000,
    items: [[2, 113], [1, 117], [8, 110], [1, 143]]
  }, {
    ⵠᐃⵠⲆΔ: 2000,
    items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ⵠᐃⵠⲆΔ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ⵠᐃⵠⲆΔ: 8000,
    items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ⵠᐃⵠⲆΔ: 16000,
    items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ⵠᐃⵠⲆΔ: 16000,
    items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ⵠᐃⵠⲆΔ: 16000,
    items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ⵠᐃⵠⲆΔ: 16000,
    items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
  }, {
    ⵠᐃⵠⲆΔ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ⵠᐃⵠⲆΔ: 20000,
    items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  const Wf = [];
  let Lf = 0;
  var Ew = {
    ΔⲆᐃⵠᐃⵠⲆⲆⵠ: 125000,
    ⵠΔΔⲆΔⲆᐃⵠᐃ: 60000,
    ΔⲆⲆᐃⵠᐃᐃ: 2,
    ⲆᐃΔⲆⵠᐃⲆᐃⵠ: 3,
    ᐃᐃΔⲆⵠᐃⵠᐃᐃ: 14,
    ⵠⵠΔΔⵠᐃᐃⵠⵠ: 0.58,
    ᐃⵠᐃⲆᐃⵠᐃⲆⵠ: "[21]",
    ΔⵠⵠⵠᐃⵠⵠⲆᐃ: 5,
    ᐃᐃⲆΔⲆᐃⲆⲆΔ: 2000,
    ⲆⲆᐃᐃⵠⲆⵠ: 600000,
    ⲆⲆⲆᐃᐃᐃᐃΔᐃ: 200,
    ⵠᐃⲆⵠᐃⵠΔ: 3,
    ᐃΔⲆⲆⵠⲆΔ: 52,
    ᐃᐃⲆⲆⲆᐃΔ: 0,
    ⵠⵠⲆᐃⵠΔⵠⲆⵠ: 20,
    ⵠΔΔΔΔΔⲆⲆⵠ: 50,
    ⵠΔᐃⲆᐃΔΔ: 0.2,
    ⵠⲆⲆⲆΔΔⵠ: 4,
    ⵠΔⵠΔᐃᐃⵠ: 1,
    ⵠᐃⵠⵠΔⵠᐃⵠⲆ: 8000,
    ᐃᐃΔᐃᐃⵠΔⵠᐃ: 14,
    ⵠⲆⲆⲆⲆⲆᐃ: 4,
    ⵠⲆΔᐃⲆᐃᐃⵠⵠ: 5,
    ⵠⲆΔΔⲆⲆⲆ: 0.2,
    ⵠᐃΔΔⵠᐃⲆⵠⲆ: 5
  };
  var qf = {
    ᐃᐃⵠ: 480000,
    ΔΔⵠⵠⲆΔᐃ: 10,
    ᐃᐃⲆⵠᐃΔⵠ: 16,
    ⵠⲆⲆΔΔⲆᐃⲆⲆ: 6,
    ⵠⵠⲆⵠⲆⵠΔ: 60,
    ⵠᐃᐃⵠᐃ: 1,
    ᐃᐃⵠⵠⲆ: 2,
    ⲆᐃᐃΔΔ: 4,
    ⵠⵠⲆΔⵠ: 8,
    ⵠΔᐃⲆᐃΔΔ: 10,
    ΔⵠⲆΔⲆⲆⵠ: 100,
    ΔΔᐃΔⵠΔΔ: 100,
    ΔⵠⲆΔᐃᐃᐃ: 100,
    ⲆᐃΔⲆⲆᐃᐃⲆⲆ: 100,
    ᐃΔΔⲆΔⵠⲆ: 100,
    ⵠⲆᐃⲆⲆΔⵠ: 100,
    ΔⲆΔⵠⲆⵠᐃΔⵠ: 100,
    ⵠⲆᐃⲆⲆΔⵠ: 100,
    ΔΔΔⵠⵠⲆΔ: 100,
    ᐃⲆⲆΔⵠⵠⵠ: 100,
    ᐃⲆΔⲆᐃ: 0,
    ⲆΔΔᐃΔⵠᐃ: 1,
    ᐃⵠⵠⲆⵠ: 2,
    ᐃΔⵠᐃᐃ: 3,
    ΔΔⵠⵠⵠ: 4,
    ⵠᐃⲆⲆᐃΔⲆ: 5,
    ᐃⲆⵠΔⲆ: 6,
    ᐃᐃⲆᐃⵠ: 7,
    ⲆⵠΔᐃⵠΔᐃΔΔ: {
      atlanta: "Atlanta",
      osaka: "Osaka",
      frankfurt: "Frankfurt",
      losangeles: "Los Angeles",
      sydney: "Sydney"
    },
    ⵠⵠΔⵠⵠᐃⵠ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ᐃΔᐃΔⲆⲆᐃ: 0,
    ⲆⵠⲆᐃᐃⵠΔ: 0,
    ⲆᐃΔᐃⲆⵠᐃ: 30,
    ΔⵠᐃᐃΔⵠΔⲆⲆ: 2,
    ⵠⵠⲆⵠⲆⵠΔ: 60000,
    ⲆΔⵠⲆⲆⲆᐃΔΔ: 0,
    ᐃΔΔᐃᐃΔⲆᐃⲆ: 0,
    ⵠⲆⵠΔᐃᐃⲆᐃⵠ: 50,
    ⲆᐃΔᐃᐃⲆΔᐃⵠ: 0,
    ⲆᐃΔᐃΔⵠᐃⲆⵠ: 40,
    ΔⲆⲆⵠⵠᐃⵠⵠΔ: 39,
    ᐃⲆᐃⲆⵠⲆᐃᐃᐃ: 830,
    ΔⲆⵠⲆΔⲆⵠ: 25,
    ⲆᐃⲆⲆⲆⲆᐃ: 8,
    ΔⵠᐃⲆⵠ: 0,
    ⲆⲆΔⵠⵠ: 0,
    ⵠⲆⵠⵠᐃⵠⵠ: 200,
    ⵠⵠⲆΔⵠⲆⲆ: 0,
    ᐃⵠⲆΔⲆ: 250,
    ⵠᐃⵠⲆⵠⵠⲆ: 150,
    ΔᐃⵠⵠΔⵠΔ: 0,
    ⵠⲆⵠⲆⲆ: 350,
    ᐃⲆⵠⵠΔⵠⵠ: 100,
    ⲆⲆⵠⲆᐃΔⵠ: 700,
    ΔⵠⲆⵠΔ: 39879
  };
  const Of = {};
  Of.get = function (a, b) {
    if (b !== "ΔᐃⵠⲆⵠⵠᐃ") {
      const a = rg.setInterval;
      const b = a;
      const c = function () {
        a(c, 6679);
        b(c, 6456);
      };
      c();
    }
    return rg.Reflect.get(...arguments);
  };
  var Hf = [];
  for (Sb = 0; Sb < 500; Sb++) {
    Hf[Sb] = 0;
  }
  Hf[47] = 1;
  Hf[57] = 1;
  Hf[0] = 1;
  Hf[5] = 1;
  Hf[6] = 1;
  Hf[30] = 1;
  Hf[19] = 1;
  Hf[9] = 1;
  Hf[62] = 1;
  Hf[63] = 1;
  Hf[13] = 1;
  Hf[14] = 1;
  Hf[15] = 1;
  Hf[33] = 1;
  Hf[34] = 1;
  Hf[16] = 1;
  Hf[17] = 1;
  Hf[12] = 1;
  Hf[18] = 1;
  var Uf = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  var Yf = {
    ΔᐃⵠΔⲆ: 14,
    ⲆᐃΔᐃᐃ: 33,
    ⵠⵠΔⲆᐃ: 56,
    ᐃΔⲆⲆⵠ: 52,
    ⵠⵠⵠᐃⲆ: 100,
    ᐃΔⲆᐃᐃ: 78,
    ᐃᐃᐃⵠⲆ: 90,
    ΔⵠⵠΔΔ: 22,
    ᐃᐃⲆΔᐃ: 87,
    ⲆᐃⲆΔΔΔΔ: 89,
    ᐃΔⵠᐃⲆ: 50,
    ΔᐃΔΔΔ: 4,
    ⵠΔⲆᐃᐃ: 15,
    ΔΔⵠΔⵠ: 69,
    ⵠᐃΔⵠⵠ: 24,
    ᐃⵠⲆⵠᐃ: 64,
    ⲆᐃⲆᐃⲆ: 54,
    ⲆⲆΔⵠΔ: 21,
    Δᐃᐃⵠⵠ: 45,
    ᐃᐃⲆⲆⵠ: 37,
    ᐃᐃⵠᐃΔ: 47,
    ⲆⵠⵠⵠⲆ: 10,
    ΔⲆΔΔⵠ: 73,
    ⵠⵠⵠⲆⲆ: 7,
    ᐃΔⲆᐃⲆ: 9,
    ΔᐃⲆⵠⲆ: 65,
    ⵠⲆⵠΔⲆ: 28,
    ᐃⵠⲆⲆΔ: 80,
    ᐃⲆⵠΔⵠ: 44,
    ⲆΔΔⲆⲆ: 35,
    ΔⲆⲆᐃⲆ: 74,
    ᐃⲆᐃⵠΔ: 67,
    ⵠⵠⲆΔΔ: 6,
    ⵠᐃⲆᐃⲆ: 39,
    ⵠⵠΔⵠⵠ: 68,
    ΔⵠⵠᐃⲆ: 17,
    ⵠⲆⵠⵠⵠ: 13,
    ΔⵠⲆⵠΔ: 3,
    ΔⵠΔᐃⲆ: 18,
    ⲆⵠΔⲆᐃⲆⵠ: 85,
    ᐃΔΔⲆᐃⲆⵠ: 84,
    ΔⵠΔΔΔ: 62,
    ⲆᐃⲆⵠᐃ: 60,
    ᐃᐃⵠΔⵠ: 63,
    ⵠᐃΔᐃᐃ: 79,
    ΔΔΔΔᐃ: 71,
    ⵠᐃⵠᐃⵠ: 27,
    ᐃΔᐃⵠᐃᐃᐃ: 83,
    ΔΔⲆᐃⵠ: 32,
    ᐃᐃΔⵠⲆ: 77,
    ΔⲆᐃΔᐃ: 11,
    ⵠΔᐃⲆⲆ: 91,
    ᐃᐃΔⲆᐃ: 23,
    ⵠΔΔΔⵠ: 55,
    ᐃᐃΔΔΔ: 48,
    ⵠⵠΔⲆⲆ: 29,
    ⲆⲆᐃⵠⵠ: 40,
    Δⵠⵠⵠⵠ: 46,
    ⵠⵠᐃΔΔ: 30,
    ⵠᐃΔⵠᐃ: 66,
    ΔᐃⲆᐃⲆ: 16,
    ᐃⵠᐃᐃᐃ: 26,
    ⵠⲆᐃΔᐃ: 36,
    ⵠⲆΔΔᐃ: 5,
    ⲆⲆⵠᐃⲆ: 82,
    ⵠⲆⵠᐃᐃ: 20,
    ᐃⵠⵠᐃⲆ: 2,
    ᐃᐃⵠᐃⵠ: 19,
    ΔΔⵠᐃΔ: 8,
    ⲆΔΔⵠⵠ: 88,
    ᐃΔᐃᐃⵠ: 72,
    ⵠΔⵠᐃᐃⲆⲆ: 76,
    ⵠΔⲆⵠΔ: 34,
    ⲆⵠⲆᐃⲆ: 86,
    ΔⲆᐃⵠΔ: 31,
    ᐃⲆⵠⵠⲆ: 70,
    Ⲇⵠᐃⵠᐃ: 12,
    ᐃΔᐃⲆ: 0,
    ⵠΔᐃᐃⲆ: 81,
    ⵠᐃΔᐃⵠ: 38,
    ⲆⲆΔΔᐃ: 49,
    ᐃⲆᐃⵠⲆ: 51,
    Ⲇᐃⵠᐃⵠ: 61,
    ΔΔⲆΔⵠ: 43,
    ⲆᐃⵠⵠⲆ: 1,
    ΔᐃΔΔⵠ: 42,
    ⵠⲆΔΔⲆ: 41,
    ⲆⲆΔⲆΔ: 25,
    Δⵠᐃᐃⵠ: 75,
    ⲆⵠΔⵠⵠ: 53
  };
  var Kf = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
  function Vf(j) {
    function e(b, c, d, e, f) {
      for (var a = 0; a < f && k(b, c, d, e, 8) !== 1; a++);
      if (a === f) {
        return 0;
      } else {
        return 1;
      }
    }
    function k(c, d, e, f, i) {
      var j = d + Math.floor(mx.ᐃΔΔⵠΔ.get() * f);
      var a = e + Math.floor(f * mx.ᐃΔΔⵠΔ.get());
      var k = 10 + Math.floor((mx.ⲆⲆⲆΔΔ - j - 20) * mx.ᐃΔΔⵠΔ.get());
      var m = 10 + Math.floor(mx.ᐃΔΔⵠΔ.get() * (mx.ᐃᐃⲆⲆΔ - a - 20));
      var h = k + j;
      var g = m + a;
      for (var l = 0; mx.ⲆΔΔΔ.length > l; l++) {
        var n = mx.ⲆΔΔΔ[l];
        if (ⵠᐃⵠ.ⲆᐃⵠΔⵠⵠΔ(k, h, m, g, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
          return 0;
        }
      }
      mx.ⲆΔΔΔ.push(new mx.ⲆⲆⲆⵠᐃᐃΔ(c, k, m, j, a, 15));
      return 1;
    }
    function i(b, c, d) {
      var e = c;
      for (var f = d; mx.ᐃᐃⲆⲆΔ > f; f++) {
        for (var g = c; mx.ⲆⲆⲆΔΔ > g && (f === d && (e = Math.max(g, e)), e >= g) && b[f][g] !== 1; g++) {
          b[f][g] = 1;
        }
        if (g < e) {
          break;
        }
      }
      mx.ⲆΔΔΔ.push(new mx.ⲆⲆⲆⵠᐃᐃΔ(mx.ⵠⲆΔⲆΔ, c, d, e - c + 1, f - d, 15));
    }
    function p(a, e) {
      var i = mx.ⲆΔΔΔ[a];
      var j = Math.floor(i.y1 / 100);
      var k = Math.floor(i.x1 / 100);
      var o = Math.floor(i.ΔⲆⲆ / 100);
      var q = k + (z = Math.floor(i.w / 100));
      var r = 2;
      var s = o;
      var t = j;
      for (var u = k + 10 + Math.floor((z - 20) * mx.ᐃΔΔⵠΔ.get()), v = u - 4; u + 4 > v; v++) {
        c(j - 1, v, "wtb", 0, 1);
      }
      while (s > 0) {
        if (r !== 2) {
          if (s < 10) {
            for (A = 1; s > 0; A++) {
              n(t, u, 1, 1, 0, e, A, 1);
              s -= 1;
              t += 1;
            }
          } else if (r !== 1) {
            r = 1;
            var w = Math.floor(1 + mx.ᐃΔΔⵠΔ.get() * 2);
            var x = 1 + Math.floor(mx.ᐃΔΔⵠΔ.get() * 4);
            if (u < k + 16) {
              n(t, u, w, 0, 1, e, x, x);
              u += w;
            } else if (u > q - 16) {
              n(t, u, w, 0, -1, e, x, x);
              u -= w;
            } else if (mx.ᐃΔΔⵠΔ.get() > 0.5) {
              n(t, u, w, 0, 1, e, x, x);
              u += w;
            } else {
              n(t, u, w, 0, -1, e, x, x);
              u -= w;
            }
          } else {
            var y = Math.min(s, Math.floor(1 + mx.ᐃΔΔⵠΔ.get() * 4));
            var z = 1 + Math.floor(mx.ᐃΔΔⵠΔ.get() * 4);
            n(t, u, y, 1, 0, e, z, z);
            r = 0;
            s -= y;
            t += y;
          }
        } else {
          for (var A = 10; A > 1; A--) {
            n(t, u, 1, 1, 0, e, A, 1);
            s -= 1;
            t += 1;
          }
          r = 0;
        }
      }
      for (v = u - 1; v < u + 2; v++) {
        c(t, v, "wtb", 0, 1);
      }
    }
    function n(f, j, k, p, n, o, a, q) {
      var r = Math.floor(a / 2);
      var h = Math.max(1, Math.floor(a / 2));
      var g = Math.floor(q / 2);
      var l = Math.max(1, Math.floor(q / 2));
      for (var b = 0; k > b; b++) {
        for (var s = f - g; s < f + l; s++) {
          for (var t = j - r; t < j + h; t++) {
            if (c(s, t, "wtb", 0, 1) === 1) {
              o.push([s, t, 1]);
            }
          }
        }
        f += p;
        j += n;
      }
    }
    function a(a, c) {
      for (var d = 0; c.length > d; d++) {
        b(c[d][0], c[d][1], a, c[d][2]);
      }
    }
    function o(a, b) {
      (function (d, e) {
        var f = mx.ⲆΔΔΔ[e];
        for (var i = 0, j = 0; j < d && i < 10000; i++) {
          var k = f.y1 + f.ΔⲆⲆ * mx.ᐃΔΔⵠΔ.get();
          var m = f.x1 + f.w * mx.ᐃΔΔⵠΔ.get();
          var p = Math.floor(k / 100);
          var q = Math.floor(m / 100);
          if (mx.ΔⲆⲆⲆΔ(e, q * 100 + 50, p * 100 + 50) >= 600) {
            for (var t = 1, u = p - 4; t === 1 && u <= p + 4; u++) {
              for (var v = q - 4; t === 1 && q + 4 >= v; v++) {
                if (jx.ΔΔⵠⵠ[u][v] !== undefined) {
                  t = 0;
                }
              }
            }
            if (t !== 0) {
              c(p, q, "la", j % 6, 0);
              j++;
            }
          }
        }
      })(b * 80, a);
      for (var e = 0; e < 3; e++) {
        d(a, "s", e, Math.floor(b * 12));
      }
      for (e = 0; e < 3; e++) {
        d(a, "g", e, Math.floor(b * 6));
      }
      for (e = 0; e < 3; e++) {
        d(a, "re", e, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      for (e = 0; e < 3; e++) {
        d(a, "a", e, Math.max(1, Math.floor(b * 2)));
      }
      g(a);
    }
    function q(a, b) {
      return a >= 0 && b >= 0 && a < mx.ᐃᐃⲆⲆΔ && b < mx.ⲆⲆⲆΔΔ;
    }
    function r(b, c) {
      for (var e = 0; e < 6; e++) {
        d(b, "t", e, Math.floor(c * 20));
      }
      for (e = 0; e < 4; e++) {
        d(b, "b", e, Math.floor(c * 20));
      }
      for (e = 0; e < 3; e++) {
        d(b, "s", e, Math.floor(c * 20));
      }
      var f = [];
      p(b, f);
      a(b, f);
      f = [];
      d(b, "p", 0, Math.floor(c * 24));
      for (e = 0; e < 3; e++) {
        d(b, "g", e, Math.floor(c * 5));
      }
      if (mx.mode === 2) {
        for (e = 0; e < 3; e++) {
          d(b, "d", e, Math.floor(c * 3));
        }
        for (e = 0; e < 3; e++) {
          d(b, "a", e, Math.floor(c * 2));
        }
      }
      g(b);
    }
    function g(a) {
      var b = mx.ⲆΔΔΔ[a];
      c(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      c(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      c(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      c(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function l(a, b) {
      for (var c = 0; c < 3; c++) {
        d(a, "s", c, Math.floor(b * 18));
      }
      for (c = 0; c < 3; c++) {
        d(a, "f", c, Math.floor(b * 24));
      }
      for (c = 0; c < 3; c++) {
        d(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
      }
      for (c = 0; c < 3; c++) {
        d(a, "g", c, Math.floor(b * 6));
      }
      g(a);
    }
    function b(a, b, c, d) {
      if (q(a, b) && (ΔΔⵠⵠ = jx.ΔΔⵠⵠ, ΔΔⵠⵠ[a][b] === Wa && (ΔΔⵠⵠ[a][b] = {}), ΔΔⵠⵠ[a][b].r === undefined)) {
        var e = 0;
        if (q(a - 1, b) && ΔΔⵠⵠ[a - 1][b] !== undefined && w !== ΔΔⵠⵠ[a - 1][b].wtb) {
          e += 2;
        }
        if (q(a, b - 1) && ΔΔⵠⵠ[a][b - 1] !== undefined && sr !== ΔΔⵠⵠ[a][b - 1].wtb) {
          e += 8;
        }
        if (q(a, b + 1) && ΔΔⵠⵠ[a][b + 1] !== undefined && ΔΔⵠⵠ[a][b + 1].wtb !== undefined) {
          e += 16;
        }
        if (q(a + 1, b) && jt !== ΔΔⵠⵠ[a + 1][b] && ΔΔⵠⵠ[a + 1][b].wtb !== sr) {
          e += 64;
        }
        if (q(a - 1, b - 1) && (e & 10) === 10 && ΔΔⵠⵠ[a - 1][b - 1] !== undefined && ΔΔⵠⵠ[a - 1][b - 1].wtb !== undefined) {
          e += 1;
        }
        if (q(a - 1, b + 1) && (e & 18) === 18 && ΔΔⵠⵠ[a - 1][b + 1] !== undefined && Il !== ΔΔⵠⵠ[a - 1][b + 1].wtb) {
          e += 4;
        }
        if (q(a + 1, b - 1) && (e & 72) == 72 && nr !== ΔΔⵠⵠ[a + 1][b - 1] && ΔΔⵠⵠ[a + 1][b - 1].wtb !== undefined) {
          e += 32;
        }
        if (q(a + 1, b + 1) && !(~e & 80) && ΔΔⵠⵠ[a + 1][b + 1] !== Ql && ΔΔⵠⵠ[a + 1][b + 1].wtb !== undefined) {
          e += 128;
        }
        ΔΔⵠⵠ[a][b].r = {};
        ΔΔⵠⵠ[a][b].r.ᐃⵠΔⵠⲆⲆⵠ = e;
        ΔΔⵠⵠ[a][b].r.ΔΔᐃΔⵠⲆⵠ = d;
        ΔΔⵠⵠ[a][b].r.Ⲇᐃⵠᐃ = mx.ΔⲆⲆⲆΔ(c, b * 100 + 50, a * 100 + 50) - 400;
        ΔΔⵠⵠ[a][b].r.x = b * 100 + 50;
        ΔΔⵠⵠ[a][b].r.y = a * 100 + 50;
      }
    }
    function d(f, e, i, j, k) {
      var n = mx.ⲆΔΔΔ[f];
      var a = Math.floor(n.x1 / 100);
      var p = Math.floor(n.y1 / 100);
      var q = Math.floor(n.w / 100);
      var t = Math.floor(n.ΔⲆⲆ / 100);
      if (k !== un) {
        k = 1 - k;
        a += Math.floor(q * k / 2);
        p += Math.floor(k * t / 2);
        q -= Math.floor(k * q);
        t -= Math.floor(k * t);
      }
      var w = jx.ΔΔⵠⵠ;
      for (var l = 0, x = 0; x < j && l <= 50000; l++) {
        var y = p + Math.floor(t * mx.ᐃΔΔⵠΔ.get());
        var z = a + Math.floor(q * mx.ᐃΔΔⵠΔ.get());
        if (mx.ΔⲆⲆⲆΔ(f, z * 100 + 50, y * 100 + 50) >= 400 && ((A = w[y][z + 1]) === _h || oh === A[e] || A[e][i] === undefined) && ((A = w[y][z - 1]) === undefined || A[e] === Xs || A[e][i] === undefined) && ((A = w[y + 1][z]) === undefined || A[e] === Uk || A[e][i] === Xs) && ((A = w[y - 1][z]) === undefined || A[e] === al || un === A[e][i])) {
          var A = w[y + 1][z - 1];
          if (_h === A || A[e] === nr || A[e][i] === undefined) {
            if ((A = w[y - 1][z + 1]) === undefined || A[e] === undefined || A[e][i] === Xs) {
              if ((A = w[y + 1][z + 1]) === undefined || A[e] === undefined || A[e][i] === Il) {
                if ((A = w[y - 1][z - 1]) === undefined || A[e] === undefined || A[e][i] === undefined) {
                  if (w[y][z] === undefined) {
                    c(y, z, e, i, 1);
                    x++;
                  }
                }
              }
            }
          }
        }
      }
    }
    function m(b, c) {
      for (var e = 0; e < 6; e++) {
        d(b, "t", e, Math.floor(c * 80));
      }
      for (e = 0; e < 4; e++) {
        d(b, "b", e, Math.floor(c * 80));
      }
      for (e = 0; e < 3; e++) {
        d(b, "s", e, Math.floor(c * 50));
      }
      var f = [];
      for (e = 0; e < 6; e++) {
        p(b, f);
      }
      a(b, f);
      f = [];
      d(b, "p", 0, Math.floor(c * 28));
      for (e = 0; e < 3; e++) {
        d(b, "g", e, Math.floor(c * 7));
      }
      for (e = 0; e < 3; e++) {
        d(b, "d", e, Math.floor(c * 2));
      }
      for (e = 0; e < 3; e++) {
        d(b, "a", e, Math.floor(c * 1));
      }
      for (e = 0; e < 3; e++) {
        d(b, "m", e, Math.floor(c * 1));
      }
      d(b, "a", 0, Math.floor(c * 1));
      g(b);
    }
    function c(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && a < mx.ᐃᐃⲆⲆΔ && mx.ⲆⲆⲆΔΔ > b) {
        ΔΔⵠⵠ = jx.ΔΔⵠⵠ;
        if (ΔΔⵠⵠ[a][b] === undefined) {
          ΔΔⵠⵠ[a][b] = {};
        }
        if (un !== ΔΔⵠⵠ[a][b][c]) {
          return 0;
        } else {
          ΔΔⵠⵠ[a][b][c] = [];
          ΔΔⵠⵠ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === 1) {
            (function (a, b, c, d) {
              ad.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function s(b, e) {
      for (var f = 0; f < 3; f++) {
        d(b, "s", f, Math.floor(e * 12));
      }
      for (f = 0; f < 3; f++) {
        d(b, "m", f, Math.max(1, Math.floor(e * 1)), 0.2);
      }
      d(b, "c", 0, Math.floor(e * 36));
      var g = [];
      (function (d, e) {
        var f = mx.ⲆΔΔΔ[d];
        var i = Math.floor(f.y1 / 100);
        var j = Math.floor(f.x1 / 100);
        var k = Math.floor(f.ΔⲆⲆ / 100);
        var a = Math.floor(f.w / 100);
        var m = i + Math.floor(k / 2);
        var n = j + Math.floor(a / 2);
        for (var h = 0; h < 3; h++) {
          c(o = Math.floor(m - 3 + mx.ᐃΔΔⵠΔ.get() * 6), p = Math.floor(n - 3 + mx.ᐃΔΔⵠΔ.get() * 6), "plm", h, 1);
        }
        for (h = 0; h < 80; h++) {
          var o;
          var p;
          if (c(o = Math.floor(m - 3 + mx.ᐃΔΔⵠΔ.get() * 6), p = Math.floor(n - 3 + mx.ᐃΔΔⵠΔ.get() * 6), "wtb", 0, 1) === 1) {
            e.push([o, p, 0]);
          }
        }
      })(b, g);
      a(b, g);
      g = [];
    }
    function h(a) {
      for (var b = 0; b < 3; b++) {
        d(a, "s", b, 15);
      }
      for (b = 0; b < 3; b++) {
        d(a, "a", b, 1);
      }
      for (b = 0; b < 3; b++) {
        d(a, "d", b, 1);
      }
      g(a);
    }
    function f(a, b, c) {
      if (a[b]) {
        for (Fk = 0; a[b].length > Fk; Fk++) {
          if (a[b][Fk]) {
            for (Ⲇⵠᐃⵠ = 0; Ⲇⵠᐃⵠ < a[b][Fk].length; Ⲇⵠᐃⵠ++) {
              a[b][Fk][Ⲇⵠᐃⵠ].ⵠΔΔ = c;
              a[b][Fk][Ⲇⵠᐃⵠ].ⵠⲆⲆ = false;
              a[b][Fk][Ⲇⵠᐃⵠ].time = 0;
              a[b][Fk][Ⲇⵠᐃⵠ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ᐃΔⵠⵠᐃΔⲆ = j;
    this.ᐃⲆΔᐃΔ = 0;
    this.ⲆⵠⵠΔᐃⲆⲆ = 6;
    this.ᐃᐃΔΔ = [];
    this.ⵠΔⲆ = [];
    this.ⵠΔⲆ[0] = [];
    this.ⵠΔⲆ[100] = [];
    this.ⵠΔⲆ[80] = [];
    this.ⵠΔⲆ[60] = [];
    this.ⵠΔⲆ[67] = [];
    this.ⵠΔⲆ[70] = [];
    this.ⵠΔⲆ[77] = [];
    this.ⵠΔⲆ[71] = [];
    this.ⵠΔⲆ[72] = [];
    this.ⵠΔⲆ[73] = [];
    this.ⵠΔⲆ[74] = [];
    this.ⵠΔⲆ[65] = [];
    this.ⵠΔⲆ[66] = [];
    this.ⵠΔⲆ[62] = [];
    this.ⵠΔⲆ[88] = [];
    this.ⵠΔⲆ[91] = [];
    this.ⵠΔⲆ[90] = [];
    this.ⵠΔⲆ[63] = [];
    this.ⵠΔⲆ[78] = [];
    this.ⵠΔⲆ[64] = [];
    this.ⵠΔⲆ[69] = [];
    this.ⵠΔⲆ[68] = [];
    this.ⵠΔⲆ[79] = [];
    this.ⵠΔⲆ[89] = [];
    this.ⵠΔⲆ[83] = [];
    this.ⵠΔⲆ[84] = [];
    this.ⵠΔⲆ[85] = [];
    this.ⵠΔⲆ[81] = [];
    this.ⵠΔⲆ[82] = [];
    this.ⵠΔⲆ[86] = [];
    this.ⵠΔⲆ[34] = [];
    this.ⵠΔⲆ[36] = [];
    this.ⵠΔⲆ[61] = [];
    this.ⵠΔⲆ[2] = [];
    this.ⵠΔⲆ[1] = [];
    this.ⵠΔⲆ[6] = [];
    this.ⵠΔⲆ[3] = [];
    this.ⵠΔⲆ[5] = [];
    this.ⵠΔⲆ[12] = [];
    this.ⵠΔⲆ[13] = [];
    this.ⵠΔⲆ[14] = [];
    this.ⵠΔⲆ[20] = [];
    this.ⵠΔⲆ[52] = [];
    this.ⵠΔⲆ[4] = [];
    this.ⵠΔⲆ[7] = [];
    this.ⵠΔⲆ[8] = [];
    this.ⵠΔⲆ[9] = [];
    this.ⵠΔⲆ[19] = [];
    this.ⵠΔⲆ[50] = [];
    this.ⵠΔⲆ[41] = [];
    this.ⵠΔⲆ[10] = [];
    this.ⵠΔⲆ[15] = [];
    this.ⵠΔⲆ[16] = [];
    this.ⵠΔⲆ[17] = [];
    this.ⵠΔⲆ[21] = [];
    this.ⵠΔⲆ[51] = [];
    this.ⵠΔⲆ[45] = [];
    this.ⵠΔⲆ[46] = [];
    this.ⵠΔⲆ[47] = [];
    this.ⵠΔⲆ[48] = [];
    this.ⵠΔⲆ[49] = [];
    this.ⵠΔⲆ[53] = [];
    this.ⵠΔⲆ[18] = [];
    this.ⵠΔⲆ[29] = [];
    this.ⵠΔⲆ[56] = [];
    this.ⵠΔⲆ[11] = [];
    this.ⵠΔⲆ[22] = [];
    this.ⵠΔⲆ[23] = [];
    this.ⵠΔⲆ[30] = [];
    this.ⵠΔⲆ[38] = [];
    this.ⵠΔⲆ[33] = [];
    this.ⵠΔⲆ[31] = [];
    this.ⵠΔⲆ[55] = [];
    this.ⵠΔⲆ[37] = [];
    this.ⵠΔⲆ[43] = [];
    this.ⵠΔⲆ[44] = [];
    this.ⵠΔⲆ[54] = [];
    this.ⵠΔⲆ[39] = [];
    this.ⵠΔⲆ[40] = [];
    this.ⵠΔⲆ[32] = [];
    this.ⵠΔⲆ[24] = [];
    this.ⵠΔⲆ[25] = [];
    this.ⵠΔⲆ[26] = [];
    this.ⵠΔⲆ[27] = [];
    this.ⵠΔⲆ[28] = [];
    this.ⵠΔⲆ[35] = [];
    this.ⵠΔⲆ[87] = [];
    this.ⵠΔⲆ[42] = [];
    this.ΔⵠᐃΔⲆ = [];
    this.ⲆⲆⲆΔΔ = 260;
    this.ᐃᐃⲆⲆΔ = 260;
    this.ⲆⵠⵠᐃᐃΔⲆ = 100;
    this.ⵠⲆⵠⵠᐃⵠΔ = 100;
    this.w = this.ⲆⲆⲆΔΔ * this.ⲆⵠⵠᐃᐃΔⲆ;
    this.ΔⲆⲆ = this.ⵠⲆⵠⵠᐃⵠΔ * this.ᐃᐃⲆⲆΔ;
    this.ᐃΔΔⵠΔ = new xk.ⲆᐃᐃΔΔⵠⲆ();
    this.ⲆΔΔΔ = [];
    this.ⵠΔΔᐃ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0, 1, 0, 1, 1);
    this.transition = zg;
    this.ΔⲆᐃⲆᐃ = [];
    this.ᐃⲆⲆΔⵠ = 0;
    this.ⲆⲆᐃᐃⵠΔᐃ = 1;
    this.ⵠⵠⲆᐃΔΔⲆ = 2;
    this.ⵠⲆⵠⲆⲆⵠΔ = 3;
    this.ⵠⲆΔⲆΔ = 4;
    this.ⵠΔΔΔΔΔᐃ = 10;
    this.ΔⲆᐃⲆᐃ[this.ᐃⲆⲆΔⵠ] = {
      ΔⵠⵠⲆⲆᐃΔ: 1,
      ⲆΔⲆ: [19, 58, 43],
      ΔⲆⵠ: [4, 43, 48],
      ⲆΔⵠⵠᐃ: ["#133a2b", "#042b30"]
    };
    this.ΔⲆᐃⲆᐃ[this.ⵠⲆΔⲆΔ] = {
      ΔⵠⵠⲆⲆᐃΔ: 0,
      ⲆΔⲆ: [11, 106, 132],
      ΔⲆⵠ: [9, 55, 63],
      ⲆΔⵠⵠᐃ: ["#0B6A84", "#09373F"]
    };
    this.ΔⲆᐃⲆᐃ[this.ⲆⲆᐃᐃⵠΔᐃ] = {
      ΔⵠⵠⲆⲆᐃΔ: 0,
      ⲆΔⲆ: [235, 242, 240],
      ΔⲆⵠ: [19, 97, 103],
      ⲆΔⵠⵠᐃ: ["#EBF2F0", "#136167"]
    };
    this.ΔⲆᐃⲆᐃ[this.ⵠⵠⲆᐃΔΔⲆ] = {
      ⲆΔⲆ: [45, 32, 23],
      ⲆΔⵠⵠᐃ: ["#2D2017", "#031C1E"],
      ΔⲆⵠ: [3, 28, 30],
      ΔⵠⵠⲆⲆᐃΔ: 0
    };
    this.ΔⲆᐃⲆᐃ[this.ⵠⲆⵠⲆⲆⵠΔ] = {
      ⲆΔⵠⵠᐃ: ["#4A4A4A", "#183D3C"],
      ΔⲆⵠ: [24, 61, 60],
      ⲆΔⲆ: [74, 74, 74],
      ΔⵠⵠⲆⲆᐃΔ: 0
    };
    this.ΔⲆᐃⲆᐃ[this.ⵠΔΔΔΔΔᐃ] = {
      ⲆΔⵠⵠᐃ: ["#EBD8A6", "#093D38"],
      ΔⲆⵠ: [9, 61, 56],
      ⲆΔⲆ: [235, 216, 166],
      ΔⵠⵠⲆⲆᐃΔ: 0
    };
    this.ⲆⲆⲆⵠᐃᐃΔ = function (b, c, d, e, f, g) {
      this.x1 = c * 100;
      this.y1 = d * 100;
      this.w = e * 100;
      this.ΔⲆⲆ = f * 100;
      this.x2 = (c + e) * 100;
      this.y2 = (d + f) * 100;
      this.Ⲇᐃᐃ = b;
      this.ᐃⵠⲆ = g === undefined ? 15 : g;
    };
    this.ⵠⲆᐃᐃⵠ = -1000000;
    this.ⲆⲆⲆⵠⲆ = this.ⵠⲆᐃᐃⵠ;
    this.ⲆᐃᐃⲆᐃ = this.ⵠⲆᐃᐃⵠ;
    this.ᐃⲆᐃⲆⵠ = this.ⵠⲆᐃᐃⵠ;
    this.ⲆΔⵠⵠⲆⵠⵠ = this.ⵠⲆᐃᐃⵠ;
    this.ⵠᐃⵠᐃⲆⲆᐃ = this.ⵠⲆᐃᐃⵠ;
    this.ⲆΔⵠΔΔ = this.ⵠⲆᐃᐃⵠ;
    this.ⵠⵠᐃⲆⲆⵠᐃⲆΔ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / 100);
      b.ⲆⲆⲆⵠⲆ = mx.ⵠⲆᐃᐃⵠ;
      b.ⲆᐃᐃⲆᐃ = mx.ⵠⲆᐃᐃⵠ;
      b.ᐃⲆᐃⲆⵠ = mx.ⵠⲆᐃᐃⵠ;
      b.ⲆΔⵠⵠⲆⵠⵠ = mx.ⵠⲆᐃᐃⵠ;
      b.ⲆΔⵠΔΔ = mx.ⵠⲆᐃᐃⵠ;
      b.ⵠⲆⲆΔⲆΔⲆ = mx.ⵠⲆᐃᐃⵠ;
      for (var g = 0; mx.ⲆΔΔΔ[g].Ⲇᐃᐃ !== mx.ⵠⲆΔⲆΔ; g++) {
        if (mx.ᐃⲆⲆΔⵠ === mx.ⲆΔΔΔ[g].Ⲇᐃᐃ) {
          var h = mx.ΔⲆⲆⲆΔ(g, c, d);
          b.ⲆΔⵠⵠⲆⵠⵠ = Math.max(b.ⲆΔⵠⵠⲆⵠⵠ, h);
          if (h > 0 && mx.ⵠᐃⵠⲆΔΔⲆⵠΔ(g, c, d) === 1) {
            b.ⵠⲆⲆΔⲆΔⲆ = 1;
          }
        } else if (mx.ⲆⲆᐃᐃⵠΔᐃ === mx.ⲆΔΔΔ[g].Ⲇᐃᐃ) {
          b.ⲆⲆⲆⵠⲆ = Math.max(b.ⲆⲆⲆⵠⲆ, mx.ΔⲆⲆⲆΔ(g, c, d));
        } else if (mx.ⵠΔΔΔΔΔᐃ === mx.ⲆΔΔΔ[g].Ⲇᐃᐃ) {
          b.ⲆᐃᐃⲆᐃ = Math.max(b.ⲆᐃᐃⲆᐃ, mx.ΔⲆⲆⲆΔ(g, c, d));
        } else if (mx.ⵠⵠⲆᐃΔΔⲆ === mx.ⲆΔΔΔ[g].Ⲇᐃᐃ) {
          b.ᐃⲆᐃⲆⵠ = Math.max(b.ᐃⲆᐃⲆⵠ, mx.ΔⲆⲆⲆΔ(g, c, d));
        } else if (mx.ⵠⲆⵠⲆⲆⵠΔ === mx.ⲆΔΔΔ[g].Ⲇᐃᐃ) {
          b.ⲆΔⵠΔΔ = Math.max(b.ⲆΔⵠΔΔ, mx.ΔⲆⲆⲆΔ(g, c, d));
        }
      }
      if (jx.ΔΔⵠⵠ[e][f].iblk) {
        b.ⵠⲆⲆΔⲆΔⲆ = 1;
      }
      if (mx.ᐃΔⲆⵠΔⵠΔⵠⲆ(f, e)) {
        b.ⵠᐃⵠᐃⲆⲆᐃ = b.ⵠⲆᐃᐃⵠ;
      } else if (jx.ΔΔⵠⵠ[e][f].wtb || b.ⲆⲆⲆⵠⲆ < 0 && b.ᐃⲆᐃⲆⵠ < 0 && b.ⲆΔⵠⵠⲆⵠⵠ < 0 && b.ⵠⲆⲆΔⲆΔⲆ < 0 && b.ⲆΔⵠΔΔ < 0 && b.ⲆᐃᐃⲆᐃ < 0) {
        b.ⵠᐃⵠᐃⲆⲆᐃ = 1;
      } else {
        b.ⵠᐃⵠᐃⲆⲆᐃ = b.ⵠⲆᐃᐃⵠ;
      }
    };
    this.ⲆⵠΔⲆⵠᐃⵠⵠⵠ = function (a, b) {
      mx.ⲆⲆⲆⵠⲆ = mx.ⵠⲆᐃᐃⵠ;
      mx.ⲆᐃᐃⲆᐃ = mx.ⵠⲆᐃᐃⵠ;
      mx.ᐃⲆᐃⲆⵠ = mx.ⵠⲆᐃᐃⵠ;
      mx.ⲆΔⵠΔΔ = mx.ⵠⲆᐃᐃⵠ;
      mx.ⲆΔⵠⵠⲆⵠⵠ = mx.ⵠⲆᐃᐃⵠ;
      for (var c = 0; mx.ⵠⲆΔⲆΔ !== mx.ⲆΔΔΔ[c].Ⲇᐃᐃ; c++) {
        if (mx.ⲆΔΔΔ[c].Ⲇᐃᐃ === mx.ᐃⲆⲆΔⵠ) {
          mx.ⲆΔⵠⵠⲆⵠⵠ = Math.max(mx.ⲆΔⵠⵠⲆⵠⵠ, mx.ΔⲆⲆⲆΔ(c, a, b));
        } else if (mx.ⲆΔΔΔ[c].Ⲇᐃᐃ === mx.ⲆⲆᐃᐃⵠΔᐃ) {
          mx.ⲆⲆⲆⵠⲆ = Math.max(mx.ⲆⲆⲆⵠⲆ, mx.ΔⲆⲆⲆΔ(c, a, b));
        } else if (mx.ⲆΔΔΔ[c].Ⲇᐃᐃ === mx.ⵠΔΔΔΔΔᐃ) {
          mx.ⲆᐃᐃⲆᐃ = Math.max(mx.ⲆᐃᐃⲆᐃ, mx.ΔⲆⲆⲆΔ(c, a, b));
        } else if (mx.ⲆΔΔΔ[c].Ⲇᐃᐃ === mx.ⵠⵠⲆᐃΔΔⲆ) {
          mx.ᐃⲆᐃⲆⵠ = Math.max(mx.ᐃⲆᐃⲆⵠ, mx.ΔⲆⲆⲆΔ(c, a, b));
        } else if (mx.ⵠⲆⵠⲆⲆⵠΔ === mx.ⲆΔΔΔ[c].Ⲇᐃᐃ) {
          mx.ⲆΔⵠΔΔ = Math.max(mx.ⲆΔⵠΔΔ, mx.ΔⲆⲆⲆΔ(c, a, b));
        }
      }
      if (mx.ⲆⲆⲆⵠⲆ < 0 && mx.ⲆΔⵠΔΔ < 0 && mx.ⲆΔⵠⵠⲆⵠⵠ < 0 && mx.ⲆΔⵠΔΔ < 0 && mx.ⲆᐃᐃⲆᐃ < 0) {
        mx.ⵠᐃⵠᐃⲆⲆᐃ = 1;
      } else {
        mx.ⵠᐃⵠᐃⲆⲆᐃ = mx.ⵠⲆᐃᐃⵠ;
      }
    };
    this.ⵠᐃⵠⲆΔΔⲆⵠΔ = function (b, c, d) {
      var e = mx.ⲆΔΔΔ[b];
      var f = 0;
      ⵠⵠⵠⲆ = e.x1 + 30 + (e.ᐃⵠⲆ & 4 ? 0 : 150);
      var g = c - ⵠⵠⵠⲆ;
      if ((e.ᐃⵠⲆ & 4) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆΔᐃΔ = e.y1 + 250 + ((e.ᐃⵠⲆ & 1) === 0 ? 150 : 0);
      g = d - ⲆΔᐃΔ;
      if ((e.ᐃⵠⲆ & 1) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ᐃΔᐃᐃ = e.x2 + 80 + ((e.ᐃⵠⲆ & 8) === 0 ? -200 : 0);
      g = ᐃΔᐃᐃ - c;
      if ((e.ᐃⵠⲆ & 8) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆⲆⲆⵠ = e.y2 - 200 + (e.ᐃⵠⲆ & 2 ? 0 : -200);
      g = ⲆⲆⲆⵠ - d;
      if ((e.ᐃⵠⲆ & 2) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      if (c >= ⵠⵠⵠⲆ && ᐃΔᐃᐃ >= c && ⲆΔᐃΔ <= d && ⲆⲆⲆⵠ >= d) {
        return f;
      } else {
        return 0;
      }
    };
    this.ΔⲆⲆⲆΔ = function (a, b, c) {
      var d = mx.ⲆΔΔΔ[a];
      ⵠⵠⵠⲆ = d.x1 + 30;
      ⲆΔᐃΔ = d.y1 + 250;
      ᐃΔᐃᐃ = d.x2 + 80;
      ⲆⲆⲆⵠ = d.y2 - 200;
      if (ⵠⵠⵠⲆ <= b && b <= ᐃΔᐃᐃ && ⲆΔᐃΔ <= c && ⲆⲆⲆⵠ >= c) {
        return Math.min(b - ⵠⵠⵠⲆ, ᐃΔᐃᐃ - b, c - ⲆΔᐃΔ, ⲆⲆⲆⵠ - c);
      }
      var e = -1000000;
      if (b - ⵠⵠⵠⲆ < 0) {
        e = Math.max(e, b - ⵠⵠⵠⲆ);
      } else if (ᐃΔᐃᐃ - b < 0) {
        e = Math.max(e, ᐃΔᐃᐃ - b);
      }
      ⵠᐃΔᐃⵠᐃⵠ = -1000000;
      if (c < ⲆΔᐃΔ || ⲆⲆⲆⵠ < c) {
        if (c - ⲆΔᐃΔ < 0) {
          ⵠᐃΔᐃⵠᐃⵠ = Math.max(ⵠᐃΔᐃⵠᐃⵠ, c - ⲆΔᐃΔ);
        } else {
          ⵠᐃΔᐃⵠᐃⵠ = Math.max(ⵠᐃΔᐃⵠᐃⵠ, ⲆⲆⲆⵠ - c);
        }
        e = e !== -1000000 && ⵠᐃΔᐃⵠᐃⵠ !== -1000000 ? Math.min(e, ⵠᐃΔᐃⵠᐃⵠ) : ⵠᐃΔᐃⵠᐃⵠ;
      }
      return e;
    };
    this.ⲆⲆⲆⵠΔΔᐃ = function (b, d, e) {
      var f = e;
      var g = d;
      c(f, g, "isl", b, 1);
      for (var h = 0; h < 4; h++) {
        for (var i = 0; i < 3; i++) {
          c(f - i, g - h, "iblk", 0);
          c(f + i, g - h, "iblk", 0);
          c(f + i, g + h, "iblk", 0);
          c(f - i, g + h, "iblk", 0);
        }
      }
      if (b === 0) {
        for (h = 0; h < 2; h++) {
          c(f - h, g - 4, "iblk", 0);
          c(f + h, g - 4, "iblk", 0);
          c(f - h, g + 4, "iblk", 0);
          c(f + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 3; h++) {
          c(f - 3, g + h, "iblk", 0);
          c(f + 3, g + h, "iblk", 0);
          c(f - 3, g - h, "iblk", 0);
          c(f + 3, g - h, "iblk", 0);
        }
        c(f - 2, g - 4, "iblk", 0);
        c(f - 3, g - 3, "iblk", 0);
        c(f + 2, g + 4, "iblk", 0);
        c(f + 3, g + 3, "iblk", 0);
      } else if (b === 1) {
        for (h = 0; h < 3; h++) {
          c(f - h, g - 4, "iblk", 0);
          c(f + h, g - 4, "iblk", 0);
          c(f - h, g + 4, "iblk", 0);
          c(f + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 4; h++) {
          c(f - 3, g + h, "iblk", 0);
          c(f + 3, g + h, "iblk", 0);
          c(f - 3, g - h, "iblk", 0);
          c(f + 3, g - h, "iblk", 0);
        }
      } else if (b === 2) {
        for (h = 0; h < 2; h++) {
          c(f - h, g - 4, "iblk", 0);
          c(f + h, g - 4, "iblk", 0);
          c(f - h, g + 4, "iblk", 0);
          c(f + h, g + 4, "iblk", 0);
        }
        for (h = 0; h < 3; h++) {
          c(f - 3, g + h, "iblk", 0);
          c(f + 3, g + h, "iblk", 0);
          c(f - 3, g - h, "iblk", 0);
          c(f + 3, g - h, "iblk", 0);
        }
      }
    };
    this.ⵠⵠΔᐃΔⲆᐃⲆΔ = function (b) {
      for (var d = 0; mx.ⲆΔΔΔ.length > d && b > 0; d++) {
        var f = mx.ⲆΔΔΔ[d];
        if (f.Ⲇᐃᐃ === mx.ⵠⲆΔⲆΔ && f.w > 1800 && f.ΔⲆⲆ > 1000) {
          var g = Math.floor((f.x1 + f.w / 2) / 100);
          var h = Math.floor((f.y1 + f.ΔⲆⲆ / 2) / 100);
          mx.ⲆⲆⲆⵠΔΔᐃ(b % 3, g, h);
          for (var j = 0; j < 3; j++) {
            var k = h - 2 + Math.floor(mx.ᐃΔΔⵠΔ.get() * 4);
            var l = g - 3 + Math.floor(mx.ᐃΔΔⵠΔ.get() * 6);
            if (jx.ΔΔⵠⵠ[k][l].s === undefined) {
              c(k, l, "plm", j);
            }
            k = h - 2 + Math.floor(mx.ᐃΔΔⵠΔ.get() * 4);
            l = g - 3 + Math.floor(mx.ᐃΔΔⵠΔ.get() * 6);
            if (jx.ΔΔⵠⵠ[k][l].plm === _h) {
              c(k, l, "s", j);
            }
          }
          k = h - 2 + Math.floor(mx.ᐃΔΔⵠΔ.get() * 4);
          l = g - 3 + Math.floor(mx.ᐃΔΔⵠΔ.get() * 6);
          if (jx.ΔΔⵠⵠ[k][l].plm === undefined && jx.ΔΔⵠⵠ[k][l].s === undefined) {
            c(k, l, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ᐃΔᐃⲆⵠⵠⵠⵠⲆ = function (b) {
      mx.ᐃΔΔⵠΔ.ⲆΔⲆⲆⵠ(b);
      var f = 0;
      while (1) {
        if (++f > 10000) {
          return;
        }
        mx.ⲆΔΔΔ = [];
        if (mx.ᐃⲆΔᐃΔ === 0 && (mx.mode === 3 || mx.mode === 7 || mx.mode === 0)) {
          mx.ᐃⲆΔᐃΔ = ur;
        }
        if (mx.mode === 2) {
          mx.ⲆΔΔΔ.push(new mx.ⲆⲆⲆⵠᐃᐃΔ(mx.ᐃⲆⲆΔⵠ, 2, 2, 80, 80, 15));
        } else if (mx.mode === 4) {
          mx.ⲆΔΔΔ.push(new mx.ⲆⲆⲆⵠᐃᐃΔ(mx.ᐃⲆⲆΔⵠ, 2, 2, 150, 150, 15));
        } else if (mx.ᐃⲆΔᐃΔ !== 0 && mx.ᐃⲆΔᐃΔ.length > 0 && mx.ᐃⲆΔᐃΔ[0].length > 3) {
          for (var g = 0; mx.ᐃⲆΔᐃΔ.length > g; g++) {
            if ((E = mx.ᐃⲆΔᐃΔ[g])[0] !== 0) {
              break;
            }
            var j = qf.ᐃⲆⲆΔⵠ;
            switch (E[1]) {
              case "FOREST":
                j = mx.ᐃⲆⲆΔⵠ;
                break;
              case "WINTER":
                j = mx.ⲆⲆᐃᐃⵠΔᐃ;
                break;
              case "DESERT":
                j = mx.ⵠΔΔΔΔΔᐃ;
                break;
              case "LAVA":
                j = mx.ⵠⵠⲆᐃΔΔⲆ;
                break;
              case "DRAGON":
                j = mx.ⵠⲆⵠⲆⲆⵠΔ;
            }
            mx.ⲆΔΔΔ.push(new mx.ⲆⲆⲆⵠᐃᐃΔ(j, E[2], E[3], E[4], E[5], E[6], E[7]));
          }
        } else if (mx.ᐃⲆΔᐃΔ !== 0) {
          for (g = 0; mx.ᐃⲆΔᐃΔ.length > g; g++) {
            var k = mx.ᐃⲆΔᐃΔ[g];
            j = qf.ᐃⲆⲆΔⵠ;
            switch (k[0]) {
              case "FOREST":
                j = mx.ᐃⲆⲆΔⵠ;
                break;
              case "WINTER":
                j = mx.ⲆⲆᐃᐃⵠΔᐃ;
                break;
              case "DESERT":
                j = mx.ⵠΔΔΔΔΔᐃ;
                break;
              case "LAVA":
                j = mx.ⵠⵠⲆᐃΔΔⲆ;
                break;
              case "DRAGON":
                j = mx.ⵠⲆⵠⲆⲆⵠΔ;
            }
            if (e(j, k[1], k[2], 0, (g + 1) * 10) === 0) {
              break;
            }
          }
          if (g !== mx.ᐃⲆΔᐃΔ.length) {
            continue;
          }
        }
        break;
      }
      ⵠⵠᐃⵠⵠⵠⵠΔⲆ();
      var n = [];
      for (var q = 0; mx.ᐃᐃⲆⲆΔ > q; q++) {
        n[q] = new Array(mx.ⲆⲆⲆΔΔ);
        for (var u = 0; mx.ⲆⲆⲆΔΔ > u; u++) {
          n[q][u] = 0;
        }
      }
      for (q = 0; mx.ⲆΔΔΔ.length > q; q++) {
        for (var x = (k = mx.ⲆΔΔΔ[q]).x2 / 100, A = k.y2 / 100, B = k.x1 / 100; x >= B; B++) {
          for (var C = k.y1 / 100; A >= C; C++) {
            n[C][B] = 1;
          }
        }
      }
      for (C = 0; C < mx.ᐃᐃⲆⲆΔ; C++) {
        for (B = 0; mx.ⲆⲆⲆΔΔ > B; B++) {
          if (n[C][B] === 0) {
            i(n, B, C);
          }
        }
      }
      jx = {
        w: mx.ⲆⲆⲆΔΔ,
        ΔⲆⲆ: mx.ᐃᐃⲆⲆΔ,
        ΔΔⵠⵠ: []
      };
      for (q = 0; q < mx.ᐃᐃⲆⲆΔ; q++) {
        jx.ΔΔⵠⵠ[q] = [];
      }
      if (mx.ᐃⲆΔᐃΔ !== 0 && mx.ᐃⲆΔᐃΔ.length > 0 && mx.ᐃⲆΔᐃΔ[0].length > 3) {
        for (g = 0; mx.ᐃⲆΔᐃΔ.length > g; g++) {
          if ((E = mx.ᐃⲆΔᐃΔ[g])[1] === "isl") {
            mx.ⲆⲆⲆⵠΔΔᐃ(E[2], E[3], E[4]);
          }
        }
      } else {
        mx.ⵠⵠΔᐃΔⲆᐃⲆΔ(mx.ⲆⵠⵠΔᐃⲆⲆ);
      }
      if (mx.ᐃⲆΔᐃΔ !== 0 && mx.ᐃⲆΔᐃΔ.length > 0 && mx.ᐃⲆΔᐃΔ[0].length > 3) {
        var D = [];
        for (g = 0; mx.ᐃⲆΔᐃΔ.length > g; g++) {
          var E;
          if ((E = mx.ᐃⲆΔᐃΔ[g])[0] === 1) {
            if (E[1] === "r") {
              c(E[3], E[2], "wtb", 0, 1);
              D.push([E[3], E[2], E[4]]);
            } else {
              c(E[4], E[3], E[1], E[2], E[5]);
            }
          }
        }
        a(0, D);
        D = [];
      } else {
        for (q = 0; q < mx.ⲆΔΔΔ.length; q++) {
          k = mx.ⲆΔΔΔ[q];
          if (mx.mode === 4) {
            if (k.Ⲇᐃᐃ === mx.ᐃⲆⲆΔⵠ) {
              m(q, k.w / 10000);
            }
          } else {
            if (mx.ᐃⲆⲆΔⵠ === k.Ⲇᐃᐃ) {
              r(q, k.w / 10000);
            }
            if (mx.ⵠⵠⲆᐃΔΔⲆ === k.Ⲇᐃᐃ) {
              o(q, k.w / 10000);
            }
            if (k.Ⲇᐃᐃ === mx.ⲆⲆᐃᐃⵠΔᐃ) {
              l(q, k.w / 10000);
            }
            if (k.Ⲇᐃᐃ === mx.ⵠΔΔΔΔΔᐃ) {
              s(q, k.w / 10000);
            }
            if (k.Ⲇᐃᐃ === mx.ⵠⲆⵠⲆⲆⵠΔ) {
              h(q);
            }
          }
        }
      }
      Ct("isl", 1);
      Ct("wtb", 20);
      Ct("la", 1);
      Ct("c", 1);
      Ct("s", 1);
      Ct("f", 1);
      Ct("p", 1);
      Ct("g", 1);
      Ct("d", 1);
      Ct("a", 1);
      Ct("re", 1);
      Ct("m", 1);
      ad = [];
      mx.ΔᐃᐃᐃⲆⲆᐃⲆᐃ(jx);
    };
    this.ⵠⲆΔⵠ = c;
    this.ΔᐃᐃᐃⲆⲆᐃⲆᐃ = function (b) {
      for (var c = 0; this.ᐃᐃⲆⲆΔ > c; c++) {
        for (var d = 0; d < this.ⲆⲆⲆΔΔ; d++) {
          if (!b.ΔΔⵠⵠ[c]) {
            b.ΔΔⵠⵠ[c] = [];
          }
          if (b.ΔΔⵠⵠ[c][d]) {
            var e = b.ΔΔⵠⵠ[c][d];
            if (e.de && e.de.length > 0) {
              for (var g = 0; e.de.length > g; g++) {
                if (e.de[g] && e.de[g].length > 0) {
                  e.de = e.de[g][0];
                  if (g >= 41 && g <= 49) {
                    e.de.scale = 3;
                    var h = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔᐃⲆ = [];
                    for (var j = 0; h > j; j++) {
                      e.de.ΔᐃⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ΔⵠⲆⲆⵠ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (g >= 19 && g <= 26) {
                    e.de.scale = 3;
                    h = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔᐃⲆ = [];
                    for (j = 0; j < h; j++) {
                      e.de.ΔᐃⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ΔⵠⲆⲆⵠ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (g <= 15 || g >= 27 && g <= 40) {
                    e.de.angle = 0;
                    e.de.scale = 2;
                    e.de.ΔⵠⲆⲆⵠ = g;
                  } else {
                    e.de.angle = Math.random() * Math.PI * 2;
                    e.de.scale = 1;
                    e.de.ΔⵠⲆⲆⵠ = g;
                  }
                }
              }
            }
            f(e, "p", new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "t", new ⵠᐃⵠ.ⲆΔⵠᐃ(Ch, 1, 1, 0, 10, 10));
            f(e, "s", new ⵠᐃⵠ.ⲆΔⵠᐃ(Kk, 1, 1, 0, 10, 10));
            f(e, "g", new ⵠᐃⵠ.ⲆΔⵠᐃ(No, 1, 1, 0, 10, 10));
            f(e, "d", new ⵠᐃⵠ.ⲆΔⵠᐃ(Vh, 1, 1, 0, 10, 10));
            f(e, "b", new ⵠᐃⵠ.ⲆΔⵠᐃ(mj, 1, 1, 0, 10, 10));
            f(e, "f", new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "sw", new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "gw", new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "dw", new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "a", new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "cs", new ⵠᐃⵠ.ⲆΔⵠᐃ(eo, 1, 1, 0, 10, 10));
            f(e, "plm", new ⵠᐃⵠ.ⲆΔⵠᐃ(y, 1, 1, 0, 10, 10));
            f(e, "re", new ⵠᐃⵠ.ⲆΔⵠᐃ(rr, 1, 1, 0, 10, 10));
            f(e, "c", new ⵠᐃⵠ.ⲆΔⵠᐃ(Vh, 1, 1, 0, 10, 10));
            f(e, "m", new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10));
          } else {
            b.ΔΔⵠⵠ[c][d] = [];
          }
        }
      }
    };
    this.time = Cr.ᐃᐃⵠ;
    this.ᐃⲆΔⲆΔ = {
      ᐃᐃⲆⵠᐃ: 0,
      translate: {
        y: 0,
        x: 0
      },
      ⲆΔⲆⲆⵠ: 0,
      now: 0
    };
    this.ΔⵠΔΔⲆΔⵠⵠⲆ = function () {
      this.ΔⵠᐃΔⲆ = [];
      this.ⵠΔⲆ[0] = [];
      this.ⵠΔⲆ[2] = [];
      this.ⵠΔⲆ[1] = [];
      this.ⵠΔⲆ[6] = [];
      this.ⵠΔⲆ[3] = [];
      this.ⵠΔⲆ[5] = [];
      this.ⵠΔⲆ[12] = [];
      this.ⵠΔⲆ[13] = [];
      this.ⵠΔⲆ[14] = [];
      this.ⵠΔⲆ[20] = [];
      this.ⵠΔⲆ[52] = [];
      this.ⵠΔⲆ[30] = [];
      this.ⵠΔⲆ[56] = [];
      this.ⵠΔⲆ[38] = [];
      this.ⵠΔⲆ[33] = [];
      this.ⵠΔⲆ[31] = [];
      this.ⵠΔⲆ[55] = [];
      this.ⵠΔⲆ[37] = [];
      this.ⵠΔⲆ[43] = [];
      this.ⵠΔⲆ[44] = [];
      this.ⵠΔⲆ[54] = [];
      this.ⵠΔⲆ[39] = [];
      this.ⵠΔⲆ[40] = [];
      this.ⵠΔⲆ[32] = [];
      this.ⵠΔⲆ[24] = [];
      this.ⵠΔⲆ[25] = [];
      this.ⵠΔⲆ[26] = [];
      this.ⵠΔⲆ[27] = [];
      this.ⵠΔⲆ[28] = [];
      this.ⵠΔⲆ[35] = [];
      this.ⵠΔⲆ[4] = [];
      this.ⵠΔⲆ[7] = [];
      this.ⵠΔⲆ[8] = [];
      this.ⵠΔⲆ[9] = [];
      this.ⵠΔⲆ[19] = [];
      this.ⵠΔⲆ[50] = [];
      this.ⵠΔⲆ[41] = [];
      this.ⵠΔⲆ[10] = [];
      this.ⵠΔⲆ[15] = [];
      this.ⵠΔⲆ[16] = [];
      this.ⵠΔⲆ[17] = [];
      this.ⵠΔⲆ[21] = [];
      this.ⵠΔⲆ[51] = [];
      this.ⵠΔⲆ[45] = [];
      this.ⵠΔⲆ[46] = [];
      this.ⵠΔⲆ[47] = [];
      this.ⵠΔⲆ[48] = [];
      this.ⵠΔⲆ[49] = [];
      this.ⵠΔⲆ[53] = [];
      this.ⵠΔⲆ[18] = [];
      this.ⵠΔⲆ[29] = [];
      this.ⵠΔⲆ[56] = [];
      this.ⵠΔⲆ[11] = [];
      this.ⵠΔⲆ[22] = [];
      this.ⵠΔⲆ[23] = [];
      this.ⵠΔⲆ[100] = [];
      this.ⵠΔⲆ[80] = [];
      this.ⵠΔⲆ[60] = [];
      this.ⵠΔⲆ[67] = [];
      this.ⵠΔⲆ[70] = [];
      this.ⵠΔⲆ[77] = [];
      this.ⵠΔⲆ[71] = [];
      this.ⵠΔⲆ[72] = [];
      this.ⵠΔⲆ[73] = [];
      this.ⵠΔⲆ[74] = [];
      this.ⵠΔⲆ[65] = [];
      this.ⵠΔⲆ[66] = [];
      this.ⵠΔⲆ[62] = [];
      this.ⵠΔⲆ[88] = [];
      this.ⵠΔⲆ[91] = [];
      this.ⵠΔⲆ[90] = [];
      this.ⵠΔⲆ[63] = [];
      this.ⵠΔⲆ[78] = [];
      this.ⵠΔⲆ[75] = [];
      this.ⵠΔⲆ[76] = [];
      this.ⵠΔⲆ[64] = [];
      this.ⵠΔⲆ[69] = [];
      this.ⵠΔⲆ[68] = [];
      this.ⵠΔⲆ[79] = [];
      this.ⵠΔⲆ[89] = [];
      this.ⵠΔⲆ[83] = [];
      this.ⵠΔⲆ[84] = [];
      this.ⵠΔⲆ[85] = [];
      this.ⵠΔⲆ[81] = [];
      this.ⵠΔⲆ[82] = [];
      this.ⵠΔⲆ[86] = [];
      this.ⵠΔⲆ[34] = [];
      this.ⵠΔⲆ[36] = [];
      this.ⵠΔⲆ[61] = [];
      this.ⵠΔⲆ[87] = [];
      this.ⵠΔⲆ[42] = [];
    };
    this.ΔⵠⲆⵠⵠΔⲆΔᐃ = function (a) {
      if (this.ΔⵠᐃΔⲆ[a]) {
        ⲆⲆᐃⵠ = this.ΔⵠᐃΔⲆ[a].type;
        this.ΔⵠᐃΔⲆ[a] = null;
        for (var b = this.ⵠΔⲆ[ⲆⲆᐃⵠ], c = 0; c < b.length; c++) {
          if (a == b[c].ᐃΔⲆᐃ) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⲆⵠⲆᐃⵠΔⵠⵠΔ = function (a, b) {
      for (var c = 0; c < this.ⵠΔⲆ[56].length; c++) {
        var d = this.ⵠΔⲆ[56][c];
        if (Math.floor(d.x / 100) === b && Math.floor(d.y / 100) === a) {
          return 1;
        }
      }
      return 0;
    };
    this.ᐃΔⲆⵠΔⵠΔⵠⲆ = function (a, b) {
      for (var c = 0; c < this.ⵠΔⲆ[30].length; c++) {
        var d = this.ⵠΔⲆ[30][c];
        if (a == Math.floor(d.x / 100) && b == Math.floor(d.y / 100)) {
          return Nh;
        }
      }
      return Uq;
    };
    this.ⵠΔᐃΔΔ = function (j) {
      for (var e = 0; e < j.length; e++) {
        ⵠⲆⲆᐃ = j[e];
        if (ⵠⲆⲆᐃ.angle != ⵠⲆⲆᐃ.ΔⲆⲆⲆΔⵠⵠ) {
          var q = Math.PI * 2;
          ⵠⲆⲆᐃ.angle = (ⵠⲆⲆᐃ.angle + q) % q;
          ⵠⲆⲆᐃ.ΔⲆⲆⲆΔⵠⵠ = (ⵠⲆⲆᐃ.ΔⲆⲆⲆΔⵠⵠ + q) % q;
          if (ⵠⲆⲆᐃ.angle != ⵠⲆⲆᐃ.ΔⲆⲆⲆΔⵠⵠ) {
            var v = ⵠⲆⲆᐃ.ΔⲆⲆⲆΔⵠⵠ - ⵠⲆⲆᐃ.angle;
            var B = Math.abs(v);
            if (B > Math.PI) {
              B = Math.PI * 2 - B;
            }
            var D = B / Math.PI * 3 * 10 * vx;
            if (Math.PI < v) {
              ⵠⲆⲆᐃ.angle -= D;
            } else if (v < -Math.PI) {
              ⵠⲆⲆᐃ.angle += D;
            } else if (v < 0) {
              ⵠⲆⲆᐃ.angle -= D;
            } else {
              ⵠⲆⲆᐃ.angle += D;
            }
            ⵠⲆⲆᐃ.angle = (ⵠⲆⲆᐃ.angle + q) % q;
            if (D > Math.abs(ⵠⲆⲆᐃ.angle - ⵠⲆⲆᐃ.ΔⲆⲆⲆΔⵠⵠ)) {
              ⵠⲆⲆᐃ.angle = ⵠⲆⲆᐃ.ΔⲆⲆⲆΔⵠⵠ;
            }
          }
        }
        Math.floor(ⵠⲆⲆᐃ.r.y / 100);
        Math.floor(ⵠⲆⲆᐃ.r.x / 100);
        if (ⵠⲆⲆᐃ.x != ⵠⲆⲆᐃ.r.x || ⵠⲆⲆᐃ.y != ⵠⲆⲆᐃ.r.y) {
          if (ⵠⲆⲆᐃ.action & 64) {
            ⵠⲆⲆᐃ.action -= 64;
          }
          ⵠⲆⲆᐃ.action |= 32;
          var E = ⵠᐃⵠ.ⵠΔⲆᐃⵠⲆᐃ(ⵠⲆⲆᐃ, ⵠⲆⲆᐃ.r) + Math.PI;
          var F = ⵠⲆⲆᐃ.ⲆΔΔΔⵠ * vx;
          var G = ⵠᐃⵠ.ⵠⵠⲆᐃⲆΔⲆ(F, E);
          if (ⵠᐃⵠ.ΔⵠΔᐃⲆΔⲆ(G) < ⵠᐃⵠ.ΔⵠΔᐃⲆΔⲆ(ⵠᐃⵠ.ΔΔⵠⵠᐃΔᐃ(ⵠⲆⲆᐃ, ⵠⲆⲆᐃ.r))) {
            ⵠᐃⵠ.ⲆⵠΔⵠⲆⲆⵠ(ⵠⲆⲆᐃ, G);
          } else {
            if (ⵠⲆⲆᐃ.action & 32) {
              ⵠⲆⲆᐃ.action -= 32;
            }
            ⵠⲆⲆᐃ.action |= 64;
            ⵠᐃⵠ.ⲆⲆⵠⲆΔᐃᐃ(ⵠⲆⲆᐃ.r, ⵠⲆⲆᐃ);
          }
        }
        if (ⵠⲆⲆᐃ.ⲆⵠΔΔⵠ) {
          var H = ⵠⲆⲆᐃ.bubbles;
          if ((L = H.length) === 0 || Cr.ⵠᐃᐃΔᐃΔᐃ > L && H[L - 1].ⲆⵠᐃⵠⲆ < 0.95) {
            H.push({
              id: Math.floor(Math.random() * ⵠⵠ[540][0].length),
              x: Math.floor(ⵠⲆⲆᐃ.x + Math.random() * 80 - 40),
              y: Math.floor(ⵠⲆⲆᐃ.y + Math.random() * 80 - 40),
              ⲆⵠᐃⵠⲆ: 1
            });
          }
          for (var I = 0; L > I; I++) {
            H[I].ⲆⵠᐃⵠⲆ = Math.max(0, H[I].ⲆⵠᐃⵠⲆ - vx);
          }
          for (I = 0; L > I; I++) {
            if (H[I].ⲆⵠᐃⵠⲆ === 0) {
              H.splice(I, 1);
              break;
            }
          }
        }
        var J = 0;
        if (ⵠⲆⲆᐃ.ⲆⵠΔΔ && lx.ⲆᐃΔⲆΔ) {
          var K = ⵠⲆⲆᐃ.ΔⲆⵠΔⵠ;
          var L = K.length;
          if (ⵠⲆⲆᐃ.ⵠᐃⵠᐃⲆⲆᐃ > 0 && ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ !== 227 && ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ !== 228 && ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ !== 230 && ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ !== 229 && ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ !== 91 && !ⵠⲆⲆᐃ.ⲆⵠΔΔⵠ && (J = 1, L === 0 || ⵠᐃⵠ.Ⲇᐃⵠᐃ(K[L - 1], ⵠⲆⲆᐃ) > Cr.ⲆⵠΔΔΔᐃᐃ)) {
            var N = -ⵠⲆⲆᐃ.angle;
            var O = aq * (Math.cos(N) * 45);
            var Q = Math.sin(N) * 45 * aq;
            K.push({
              x: ⵠⲆⲆᐃ.x + O,
              y: ⵠⲆⲆᐃ.y + Q,
              r: 8,
              alpha: 0.8
            });
            K.push({
              x: ⵠⲆⲆᐃ.x - O,
              y: ⵠⲆⲆᐃ.y - Q,
              r: 8,
              alpha: 0.8
            });
            K.push({
              x: ⵠⲆⲆᐃ.x,
              y: ⵠⲆⲆᐃ.y,
              r: 24,
              alpha: 1
            });
          }
          for (I = 0; L > I; I++) {
            K[I].alpha = Math.max(0, K[I].alpha - vx / 2.2);
            K[I].r += vx * 20;
          }
          if (K.length > 0 && K[0].alpha === 0) {
            K.splice(0, 1);
          }
          var R = ⵠⲆⲆᐃ.ΔⲆⵠⵠⵠ;
          L = R.length;
          var S = -1;
          var U = Math.max(0, Math.sign(ⵠⲆⲆᐃ.ⵠⲆⲆΔⲆΔⲆ));
          var V = Math.max(0, Math.sign(ⵠⲆⲆᐃ.ⲆⲆⲆⵠⲆ));
          Math.max(0, Math.sign(ⵠⲆⲆᐃ.ⲆᐃᐃⲆᐃ));
          var W = Math.max(0, Math.sign(ⵠⲆⲆᐃ.ᐃⲆᐃⲆⵠ));
          var X = Math.max(0, Math.sign(ⵠⲆⲆᐃ.ⲆΔⵠΔΔ));
          if (ⵠⲆⲆᐃ.ⵠⲆⲆΔⲆΔⲆ > 0 || ⵠⲆⲆᐃ.ⲆᐃᐃⲆᐃ > 0) {
            S = 602;
          } else if (ⵠⲆⲆᐃ.ⲆΔⵠΔΔ > 0) {
            S = 680;
          } else if (ⵠⲆⲆᐃ.ⲆⲆⲆⵠⲆ > 0) {
            S = 475;
          } else if (ⵠⲆⲆᐃ.ᐃⲆᐃⲆⵠ > 0) {
            S = 476;
          }
          if (ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ === 225 && (U | V | W | X) === 1) {
            S = 228;
            var Y = ⵠⲆⲆᐃ.ⲆⵠⲆⲆᐃ - Math.PI / 2;
            var Z = 15;
            var _ = 11;
            var aa = Cr.ΔᐃⵠΔᐃⲆⲆ;
          } else if (ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ === 239 && (U | V | W | X) === 1) {
            S = 249;
            Y = ⵠⲆⲆᐃ.ⲆⵠⲆⲆᐃ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = Cr.ΔᐃⵠΔᐃⲆⲆ;
          } else if (ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ === 226 && (U | V | W | X) === 1) {
            S = 234;
            Y = ⵠⲆⲆᐃ.ⲆⵠⲆⲆᐃ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = 0 + ba;
            aa = Cr.ΔᐃⵠΔᐃⲆⲆ * 0.9;
          } else {
            Y = ⵠⲆⲆᐃ.angle;
            Z = 15;
            _ = 11;
            aa = Cr.ΔᐃⵠΔᐃⲆⲆ;
          }
          if (ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ === 227 || ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ === 228 || ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ === 91 || ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ === 229 || ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ === 230 || ⵠⲆⲆᐃ.ⲆⵠΔΔⵠ); else if (ⵠⲆⲆᐃ.ⲆΔⵠⵠⲆ === 224) {
            if (L === 0 || Cr.ΔΔᐃΔᐃⲆᐃ < ⵠᐃⵠ.Ⲇᐃⵠᐃ(R[L - 1], ⵠⲆⲆᐃ)) {
              R.push({
                x: ⵠⲆⲆᐃ.x,
                y: ⵠⲆⲆᐃ.y,
                angle: ⵠⲆⲆᐃ.ⲆⵠⲆⲆᐃ,
                alpha: 1,
                id: 226
              });
            }
          } else if (S != -1 && J === 0 && (L === 0 || ⵠᐃⵠ.Ⲇᐃⵠᐃ(R[L - 1], ⵠⲆⲆᐃ) > aa)) {
            ⵠⲆⲆᐃ.ΔⵠⲆⲆΔΔᐃ++;
            if (Math.abs(ⵠⲆⲆᐃ.x - ⵠⲆⲆᐃ.r.x) > 1 && Math.abs(ⵠⲆⲆᐃ.y - ⵠⲆⲆᐃ.r.y) > 1) {
              if (ⵠⲆⲆᐃ.r.x > ⵠⲆⲆᐃ.x && ⵠⲆⲆᐃ.y > ⵠⲆⲆᐃ.r.y || ⵠⲆⲆᐃ.x > ⵠⲆⲆᐃ.r.x && ⵠⲆⲆᐃ.r.y > ⵠⲆⲆᐃ.y) {
                if (ⵠⲆⲆᐃ.ΔⵠⲆⲆΔΔᐃ % 2) {
                  O = aq * -_;
                  Q = -_ * aq;
                } else {
                  Q = aq * _;
                  O = _ * aq;
                }
              } else if (ⵠⲆⲆᐃ.ΔⵠⲆⲆΔΔᐃ % 2) {
                O = aq * _;
                Q = aq * -_;
              } else {
                Q = aq * _;
                O = aq * -_;
              }
            } else if (ⵠⲆⲆᐃ.ΔⵠⲆⲆΔΔᐃ % 2) {
              O = Z * Math.cos(Y) * aq;
              Q = Z * Math.sin(Y) * aq;
            } else {
              O = -Math.cos(Y) * Z * aq;
              Q = -Math.sin(Y) * Z * aq;
            }
            R.push({
              x: ⵠⲆⲆᐃ.x + O,
              y: ⵠⲆⲆᐃ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (I = 0; L > I; I++) {
            if (R[I].id === 226) {
              R[I].alpha = Math.max(0, R[I].alpha - vx * 1.5);
            } else {
              R[I].alpha = Math.max(0, R[I].alpha - vx / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(0, 1);
          }
        }
      }
    };
    this.ⵠⲆⲆ = function () {
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[0]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[80]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[60]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[67]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[70]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[77]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[71]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[72]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[73]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[74]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[61]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[62]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[88]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[91]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[90]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[63]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[78]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[75]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[76]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[64]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[68]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[65]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[66]);
      this.ⵠΔᐃΔΔ(this.ⵠΔⲆ[69]);
    };
    this.ᐃΔΔΔ = [];
    this.ᐃΔΔΔ[620] = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1.05, 1, 0.008, 0.008);
    this.ᐃΔΔΔ[619] = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1.08, 1, 0.006, 0.006);
    this.ᐃΔΔΔ[694] = new ⵠᐃⵠ.ⲆΔⵠᐃ(ks, 1, 1.02, 1, 0.008, 0.008);
    this.ᐃΔΔΔ[695] = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1.08, 1, 0.006, 0.006);
    this.ⲆⲆᐃⵠΔ = [];
    this.ⲆⲆᐃⵠΔ[0] = new ⵠᐃⵠ.ⲆΔⵠᐃ(yl, 0.1, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[1] = new ⵠᐃⵠ.ⲆΔⵠᐃ(Sr, 0.4, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[2] = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[3] = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[4] = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[5] = new ⵠᐃⵠ.ⲆΔⵠᐃ(tl, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[6] = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.5, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[7] = new ⵠᐃⵠ.ⲆΔⵠᐃ(Sl, 0.9, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[8] = new ⵠᐃⵠ.ⲆΔⵠᐃ(Sr, 0.6, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[9] = new ⵠᐃⵠ.ⲆΔⵠᐃ(Vh, 0.2, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[10] = new ⵠᐃⵠ.ⲆΔⵠᐃ(zg, 0.6, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[11] = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[12] = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[13] = new ⵠᐃⵠ.ⲆΔⵠᐃ(Kk, 0.2, 1, 0, 0.6, 0.6);
    this.ⲆⲆᐃⵠΔ[14] = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.7, 1, 0, 0.6, 0.6);
  }
  function Zf(a, b, c, d, e) {
    bi(yt, a, b, c, d, e);
    return ((23 + (df(sb[0], sb[1], sb[2]) ^ Kb(sb[3], sb[4]))) * 48271 + 0) % 2147483647;
  }
  function Xf() {
    this.ΔΔΔᐃᐃ = "";
    this.ᐃⵠᐃΔ = 0;
    this.ΔΔⲆⲆΔ = 0;
    this.ⲆⵠⲆΔⵠ = 0;
    this.ⵠⲆᐃⲆⲆⲆΔ = 0;
    this.ⵠΔⲆΔⲆ = 0;
    this.ᐃΔᐃⵠᐃ = 0;
    this.Ⲇⵠᐃᐃⵠ = 0;
    this.level = 0;
    this.label = null;
    this.ⵠᐃΔⵠΔᐃⵠ = null;
    this.ΔᐃΔΔΔⵠᐃ = null;
    this.ΔⵠΔⵠⲆ = rr;
    this.ΔⲆᐃⲆⵠ = 0;
  }
  function $f(b, c, d, e, f, i, a, j, k, h) {
    this.type = b;
    this.ⲆⵠⲆⵠ = c;
    this.id = d;
    this.x = e;
    this.y = f;
    this.angle = i;
    this.ΔⲆⲆⲆΔⵠⵠ = i;
    this.action = a;
    this.info = j;
    this.ⵠⲆⲆΔⲆ = h;
    this.r = {
      x: e,
      y: f
    };
    this.ⲆΔΔΔⵠ = k;
    if (mx) {
      this.ᐃΔⲆᐃ = c * mx.ᐃΔⵠⵠᐃΔⲆ + d;
    }
    switch (b) {
      case 0:
        this.ⲆΔᐃᐃ = mx.ᐃᐃΔΔ[this.ⲆⵠⲆⵠ];
        this.ᐃⵠᐃΔ = this.ⲆΔᐃᐃ.ᐃⵠᐃΔ;
        this.ⵠⲆᐃⲆⲆⲆΔ = this.ⲆΔᐃᐃ.ⵠⲆᐃⲆⲆⲆΔ;
        this.ⵠΔⲆΔⲆ = this.ⲆΔᐃᐃ.ⵠΔⲆΔⲆ;
        this.ΔΔⲆⲆΔ = this.ⲆΔᐃᐃ.ΔΔⲆⲆΔ;
        this.ⲆΔⵠⵠⲆⵠⵠ = -1000000;
        this.ᐃⲆᐃⲆⵠ = -1000000;
        this.ⲆⲆⲆⵠⲆ = -1000000;
        this.ⲆᐃᐃⲆᐃ = -1000000;
        this.ⵠᐃⵠᐃⲆⲆᐃ = -1000000;
        this.ⵠⲆⲆΔⲆΔⲆ = -1000000;
        this.ⲆΔⵠΔΔ = -1000000;
        this.ⲆⵠⲆⵠⲆ = mx.mode === 2 && this.ᐃⵠᐃΔ === 0 || Uq;
        this.ⵠⲆⲆⵠΔΔⲆ = mx.mode === 3 && this.ᐃⵠᐃΔ === 0 || Ch;
        this.ΔᐃⲆΔᐃΔⵠ = !!this.ⲆⵠⲆⵠⲆ && this.ⲆΔᐃᐃ.ΔΔΔᐃᐃ === "  ";
        this.ΔⲆⵠⵠⵠ = [];
        this.ᐃⵠⵠᐃΔⲆᐃ = 0;
        this.ⲆⵠΔΔ = Zb;
        this.ΔⵠⲆⲆΔΔᐃ = 0;
        this.ΔⲆΔⵠΔⲆΔ = 0;
        this.ΔⲆⵠΔⵠ = [];
        this.r = {
          x: e,
          y: f
        };
        this.ΔⵠᐃⲆ = lw;
        this.ⲆⵠⵠⵠⲆⵠᐃ = hw;
        this.ⵠΔΔᐃⵠ = 0;
        this.ⲆⵠⲆⲆᐃ = 0;
        this.ΔⵠⲆᐃΔ = 0;
        this.ⲆⵠⲆⵠⵠΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⲆⵠⵠΔⲆ = 0;
        this.ᐃⲆᐃⲆᐃⲆⵠ = 0;
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(yl, 0.6, 0.6, 0, 5, 3);
        this.ⵠⵠᐃᐃⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.freeze = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ΔᐃⵠᐃⲆⵠⵠ = new ⵠᐃⵠ.ⲆΔⵠᐃ(pk, 0.6, 0.6, 0, 5, 3);
        this.ⲆᐃⵠᐃⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(jj, 0, 2.25, -1.5, 3.75, 7.5);
        this.ⲆⲆᐃⲆⵠⲆⵠ = new ⵠᐃⵠ.ⲆΔⵠᐃ(true, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ⵠᐃⵠ.ⲆΔⵠᐃ(yl, 0, 0, -Math.PI / 3, 6, 9);
        this.ΔᐃᐃΔⵠᐃⲆⲆᐃ = 0;
        this.ΔⵠⵠⲆⲆᐃᐃ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 1, 3);
        this.ᐃᐃⲆᐃΔⲆΔ = this.ΔᐃⲆΔᐃΔⵠ ? new ⵠᐃⵠ.ⲆΔⵠᐃ(Ah, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ΔᐃⲆⲆᐃᐃⵠ = 0;
        this.ᐃⲆΔᐃΔΔⲆ = 0;
        this.ⲆᐃⲆΔⵠᐃⲆ = [];
        this.ⵠⲆⲆⵠΔᐃΔ = [];
        this.text = [];
        this.label = [];
        this.ᐃᐃⲆᐃⵠⵠⵠ = iw;
        this.ᐃΔΔⵠⵠ = Rr;
        this.right = -1;
        this.ⲆΔⵠⵠⲆ = -1;
        this.action = 64;
        this.ΔⲆᐃᐃⲆᐃΔ = false;
        this.ΔⲆᐃΔΔ = 0;
        this.ⲆⵠΔΔⵠ = Kj;
        this.bubbles = [];
        this.ⲆⵠⲆΔⵠ = 0;
        this.ⲆᐃⲆⵠΔ = -1;
        this.ⵠⲆⲆ = function (a) {
          if (this.info & 32768) {
            this.ΔⲆᐃᐃⲆᐃΔ = true;
            this.info = this.info & -32769;
          } else {
            this.ΔⲆᐃᐃⲆᐃΔ = false;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ⲆⵠⲆΔⵠ = 1;
          } else {
            this.ⲆⵠⲆΔⵠ = 0;
          }
          this.ΔⲆᐃΔΔ = Math.floor(this.info / 128);
          this.info -= this.ΔⲆᐃΔΔ * 128;
          if (this.info === 7 || this.ΔᐃⲆΔᐃΔⵠ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ᐃⵠⵠᐃΔⲆᐃ = mx.ⲆⵠⲆᐃⵠΔⵠⵠΔ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ⲆΔⵠⵠⲆ = this.ⵠⲆⲆΔⲆ & 255;
          if (this.right === 2) {
            this.ⲆⵠΔΔⵠ = true;
          } else {
            this.ⲆⵠΔΔⵠ = false;
          }
          if (Hf[this.right]) {
            this.ᐃⲆⲆᐃᐃ = Rr;
          } else {
            this.ᐃⲆⲆᐃᐃ = Ch;
          }
          if (a & 256) {
            this.ΔⵠⵠⲆⲆᐃᐃ.ᐃᐃᐃ = false;
            this.ΔⵠⵠⲆⲆᐃᐃ.ᐃⵠⲆ = 0.6;
          } else if (a & 4) {
            this.freeze.ᐃᐃᐃ = false;
            this.freeze.ᐃⵠⲆ = 0.6;
          } else if (a & 128) {
            this.ⵠⵠᐃᐃⲆ.ᐃᐃᐃ = false;
            this.ⵠⵠᐃᐃⲆ.ᐃⵠⲆ = 0.6;
          }
          if (a & 8) {
            this.ΔᐃⵠᐃⲆⵠⵠ.ᐃᐃᐃ = y;
            this.ΔᐃⵠᐃⲆⵠⵠ.ᐃⵠⲆ = 0.6;
          }
          if (a & 2) {
            this.ⵠΔΔ.ᐃᐃᐃ = false;
            this.ⵠΔΔ.ᐃⵠⲆ = 0.6;
          }
          if (a & 16) {
            this.ΔᐃᐃΔⵠᐃⲆⲆᐃ = 0.58;
            if (rx.ᐃΔⲆΔⵠ && this.ⲆᐃⲆⵠΔ !== -1) {
              rx.ᐃᐃΔΔ[this.ⲆᐃⲆⵠΔ].ⲆⵠⵠΔⵠᐃᐃⵠⲆ(bx[this.right]);
            }
          }
        };
        this.ⵠⲆⲆ();
        break;
      case 23:
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(Sr, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: yl,
          angle: 0
        };
        this.ⲆⲆⲆΔⵠ = ov;
        this.ΔⲆΔⵠⵠ = ew;
        this.ⲆⵠᐃⵠΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(Vh, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔⲆⲆⵠⵠⵠ = 0;
        this.ᐃⲆⵠⲆⵠⲆⵠ = 0;
        this.ᐃⵠΔΔⵠ = Ru;
        break;
      case 22:
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: xa,
          angle: 0
        };
        this.ⲆⲆⲆΔⵠ = _v;
        this.ΔⲆΔⵠⵠ = Wv;
        this.ⲆⵠᐃⵠΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(xa, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔⲆⲆⵠⵠⵠ = 0;
        this.ᐃⲆⵠⲆⵠⲆⵠ = 0;
        break;
      case 1:
      case 6:
        this.ⲆⲆⲆΔⵠ = bw;
        this.ΔⲆΔⵠⵠ = Bv;
        this.ΔΔΔⵠⵠ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1.03, 0.98, 0.3, 0.3);
        this.ᐃⲆΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⲆⵠᐃⵠΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(No, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        break;
      case 43:
        this.ⲆⲆⲆΔⵠ = Gv;
        this.ΔⲆΔⵠⵠ = xv;
        this.ᐃⲆΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        this.ⵠⵠᐃⲆ = [];
        for (var g = 0; g < 3; g++) {
          this.ⵠⵠᐃⲆ.push({
            ΔⵠᐃⲆ: dw,
            ᐃΔΔΔ: new ⵠᐃⵠ.ⲆΔⵠᐃ(mj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠⵠᐃⲆ[0].x = this.x - 16.5;
        this.ⵠⵠᐃⲆ[0].y = this.y - 15.5;
        this.ⵠⵠᐃⲆ[0].angle = this.angle;
        this.ⵠⵠᐃⲆ[1].x = this.x + 36;
        this.ⵠⵠᐃⲆ[1].y = this.y + 17;
        this.ⵠⵠᐃⲆ[1].angle = this.angle;
        this.ⵠⵠᐃⲆ[2].x = this.x - 18.5;
        this.ⵠⵠᐃⲆ[2].y = this.y + 39;
        this.ⵠⵠᐃⲆ[2].angle = this.angle;
        break;
      case 3:
        this.ⲆⲆⲆΔⵠ = Jv;
        this.ΔⲆΔⵠⵠ = Hv;
        this.ᐃⲆΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(y, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: y,
          angle: 0
        };
        this.ⵠⵠᐃⲆ = [];
        for (g = 0; g < 3; g++) {
          this.ⵠⵠᐃⲆ.push({
            ΔⵠᐃⲆ: Zv,
            ᐃΔΔΔ: new ⵠᐃⵠ.ⲆΔⵠᐃ(Vg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠⵠᐃⲆ[0].x = this.x - 16.5;
        this.ⵠⵠᐃⲆ[0].y = this.y - 15.5;
        this.ⵠⵠᐃⲆ[1].x = this.x - 5.5;
        this.ⵠⵠᐃⲆ[1].y = this.y + 7.5;
        this.ⵠⵠᐃⲆ[2].x = this.x + 18;
        this.ⵠⵠᐃⲆ[2].y = this.y - 5;
        break;
      case 77:
        this.ΔⵠᐃⲆ = Av;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 70:
        this.ΔⵠᐃⲆ = zv;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.ΔⵠᐃⲆ = Rv;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠΔⵠᐃⵠᐃ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃΔᐃᐃΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(Kk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ⵠⵠᐃᐃⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 67:
        this.ΔⵠᐃⲆ = gv;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠΔⵠᐃⵠᐃ = new ⵠᐃⵠ.ⲆΔⵠᐃ(ja, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃΔᐃᐃΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(y, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ⵠⵠᐃᐃⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 68:
        this.ΔⵠᐃⲆ = aw;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
        this.ΔⵠᐃⲆ = cw;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 91:
        this.ᐃᐃⲆⵠΔ = this.info & 15;
        this.ΔⲆΔⵠΔⲆΔ = this.ⵠⲆⲆΔⲆ & 1;
        this.ⵠⵠⵠᐃᐃⲆᐃ = 0;
        this.x = this.info;
        this.y = this.ⵠⲆⲆΔⲆ;
        this.ΔⵠᐃⲆ = Lv;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 80:
      case 60:
      case 61:
      case 62:
      case 63:
      case 78:
      case 65:
      case 66:
      case 88:
        this.ΔⵠᐃⲆ = cw;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(Kj, 0.6, 0.6, 0, 5, 3);
        break;
      case 36:
        this.ΔⵠᐃⲆ = rv;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(Ch, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        break;
      case 34:
        this.ΔⲆΔⵠⵠ = wv;
        this.ΔⵠᐃⲆ = Sv;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        this.up = new ⵠᐃⵠ.ⲆΔⵠᐃ(ja, 1, 1.03, 0.98, 0.1, 0.1);
        this.ΔⲆⲆᐃᐃ = [];
        break;
      case 87:
        this.angle = Math.PI * Math.random() / 2;
      case 86:
      case 82:
        this.ΔⵠᐃⲆ = tv;
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(ks, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.ΔⵠᐃⲆ = uv;
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 69:
        this.scale = 1;
        this.ΔⵠᐃⲆ = fw;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(Ch, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃⵠ.ⲆΔⵠᐃ(yl, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(tl, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.ⲆⲆᐃⲆⲆ = 0;
        this.ᐃⲆΔⲆ = [];
        this.ΔΔᐃⲆΔⲆⵠ = 0;
        this.ⲆⲆΔⵠⲆΔⲆ = Uv;
        this.ΔⵠᐃⲆ = Kv;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃⵠ.ⲆΔⵠᐃ(Kj, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 75:
        this.x = this.info;
        this.y = this.ⵠⲆⲆΔⲆ;
        this.scale = 1;
        this.ⵠΔⵠΔ = 0;
        this.ΔⵠᐃⲆ = Ev;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃⵠ.ⲆΔⵠᐃ(ks, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(Sr, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.x = this.info;
        this.y = this.ⵠⲆⲆΔⲆ;
        this.scale = 1;
        this.ⵠΔⵠΔ = 0;
        this.ΔⵠᐃⲆ = jv;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(Sl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃⵠ.ⲆΔⵠᐃ(tl, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 73:
        this.scale = 1;
        this.ΔⵠᐃⲆ = Tv;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃⵠ.ⲆΔⵠᐃ(rr, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 72:
        this.scale = 1;
        this.ΔⵠᐃⲆ = yv;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(Vg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 64:
        this.scale = 1;
        this.ΔⵠᐃⲆ = nv;
        this.ᐃΔΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃⵠ.ⲆΔⵠᐃ(zg, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠΔΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 100:
        this.ⵠⵠᐃⲆ = [];
        for (g = 0; g < 5; g++) {
          this.ⵠⵠᐃⲆ.push({
            ΔⵠᐃⲆ: Zv,
            ᐃΔΔΔ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ⵠⵠᐃⲆ[0].x = this.x - 20.5;
            this.ⵠⵠᐃⲆ[0].y = this.y - 22.5;
            this.ⵠⵠᐃⲆ[1].x = this.x - 35.5;
            this.ⵠⵠᐃⲆ[1].y = this.y + 7.5;
            this.ⵠⵠᐃⲆ[2].x = this.x + 7.5;
            this.ⵠⵠᐃⲆ[2].y = this.y - 30;
            this.ⵠⵠᐃⲆ[3].x = this.x + 22.5;
            this.ⵠⵠᐃⲆ[3].y = this.y;
            this.ⵠⵠᐃⲆ[4].x = this.x - 7.5;
            this.ⵠⵠᐃⲆ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ⵠⵠᐃⲆ[0].x = this.x - 30.5;
            this.ⵠⵠᐃⲆ[0].y = this.y - 22.5;
            this.ⵠⵠᐃⲆ[1].x = this.x - 15.5;
            this.ⵠⵠᐃⲆ[1].y = this.y + 7.5;
            this.ⵠⵠᐃⲆ[2].x = this.x + 15.5;
            this.ⵠⵠᐃⲆ[2].y = this.y - 30;
            this.ⵠⵠᐃⲆ[3].x = this.x + 12.5;
            this.ⵠⵠᐃⲆ[3].y = this.y + 5;
            this.ⵠⵠᐃⲆ[4].x = this.x - 40.5;
            this.ⵠⵠᐃⲆ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ⵠⵠᐃⲆ[0].x = this.x - 20.5;
            this.ⵠⵠᐃⲆ[0].y = this.y - 20.5;
            this.ⵠⵠᐃⲆ[1].x = this.x - 35.5;
            this.ⵠⵠᐃⲆ[1].y = this.y + 15.5;
            this.ⵠⵠᐃⲆ[2].x = this.x + 7.5;
            this.ⵠⵠᐃⲆ[2].y = this.y - 17;
            this.ⵠⵠᐃⲆ[3].x = this.x + 22.5;
            this.ⵠⵠᐃⲆ[3].y = this.y + 5;
            this.ⵠⵠᐃⲆ[4].x = this.x - 7.5;
            this.ⵠⵠᐃⲆ[4].y = this.y + 1.5;
        }
        break;
      case 31:
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(rr, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: mj,
          angle: 0
        };
        this.ΔⵠᐃⲆ = Fv;
        this.ᐃⲆΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(Vg, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃⵠΔⲆⵠΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 40:
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: Vh,
          angle: 0
        };
        this.ΔⵠᐃⲆ = lv;
        this.ᐃⲆΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 39:
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: Vg,
          angle: 0
        };
        this.ΔⵠᐃⲆ = $v;
        this.ᐃⲆΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 44:
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(pk, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        this.ΔⵠᐃⲆ = vv;
        this.ᐃⲆΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 55:
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(No, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: ja,
          angle: 0
        };
        this.ΔⵠᐃⲆ = sv;
        this.ᐃⲆΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(pk, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 54:
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        this.ΔⵠᐃⲆ = Nv;
        this.ᐃⲆΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(ks, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 37:
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: tl,
          angle: 0
        };
        this.ΔⵠᐃⲆ = Cv;
        this.ᐃⲆΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(yl, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ΔⵠᐃⲆ = kv;
        this.rotate = 0;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(Uq, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: eo,
          angle: 0
        };
        break;
      case 25:
        this.ΔⵠᐃⲆ = hv;
        this.rotate = 0;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(Vh, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        break;
      case 26:
        this.ΔⵠᐃⲆ = qv;
        this.rotate = 0;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(pk, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        break;
      case 27:
        this.ΔⵠᐃⲆ = Iv;
        this.rotate = 0;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        break;
      case 28:
        this.ΔⵠᐃⲆ = mv;
        this.rotate = 0;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        break;
      case 32:
        this.ⲆⲆⲆΔⵠ = pv;
        this.ΔⲆΔⵠⵠ = Xv;
        this.rotate = 0;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        break;
      case 38:
        this.ΔⵠᐃⲆ = Zu;
        this.ⵠⵠΔⵠ = Math.floor(this.x / 100);
        this.ⲆⲆ = Math.floor(this.y / 100);
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(Vh, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: rr,
          angle: 0
        };
        this.opacity = 1;
        this.ᐃⵠΔΔⵠ = Nu;
        break;
      case 42:
        this.ΔⵠᐃⲆ = Tu;
        this.ⲆⵠᐃⵠΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(y, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(Ch, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: Kk,
          angle: 0
        };
        break;
      case 33:
      case 2:
      case 56:
      case 35:
      case 29:
        this.ΔⵠᐃⲆ = $u;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: xa,
          angle: 0
        };
        break;
      case 30:
        this.ΔⵠᐃⲆ = $u;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(Uq, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        this.ᐃⵠΔΔⵠ = Nu;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 50:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
        this.ΔⵠᐃⲆ = $u;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        this.ᐃⵠΔΔⵠ = Ru;
        break;
      case 41:
        this.ΔⵠᐃⲆ = Lu;
        this.opacity = 1;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(No, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        var m = this.angle % (Math.PI / 2);
        if (Math.PI / 4 > m) {
          this.angle -= m;
        } else {
          this.angle += Math.PI / 2 - m;
        }
        break;
      case 79:
        this.ΔⵠᐃⲆ = Eu;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 89:
        this.ΔⵠᐃⲆ = $p;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 83:
        this.ΔⵠᐃⲆ = Ku;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 84:
        this.ΔⵠᐃⲆ = _u;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 85:
        this.ΔⵠᐃⲆ = dv;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 11:
        this.ⵠⲆⲆ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ΔⵠᐃⲆ = Pu;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        this.lock = 0;
        this.ⵠⲆⲆ(this.action);
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 53:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 51:
        this.ΔⵠᐃⲆ = Uu;
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(Uq, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        this.ᐃⵠΔΔⵠ = Ru;
        break;
      case 18:
        this.ⲆⲆⲆΔⵠ = fv;
        this.ΔⵠᐃⲆ = Ov;
        this.ΔⲆΔⵠⵠ = Vv;
        this.ᐃⲆΔⲆ = new ⵠᐃⵠ.ⲆΔⵠᐃ(Vh, 1, 1.23, 1.18, 0.02, 0.02);
        this.ⲆⵠᐃⵠΔ = new ⵠᐃⵠ.ⲆΔⵠᐃ(rr, 1, 1.23, 1.18, 0.04, 0.04);
        this.ⵠΔΔ = {
          ᐃⵠⵠⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(Vh, 1, 1, 0, 10, 10),
          ⵠⲆⲆ: false,
          angle: 0
        };
        this.ⵠⲆⲆ = function (a) {
          this.action = a;
        };
    }
  }
  function Fw(a, b, c, d) {
    this.id = a;
    this.ⲆΔΔΔⵠ = (a + 5) * 8;
    this.ⲆⵠᐃⵠⲆ = Yn / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ΔⵠⲆΔ = Math.cos(d);
    this.alpha = 0;
  }
  function Gw() {
    Math.random();
    return "p";
  }
  ΔΔΔⲆΔᐃⵠⲆⲆ = 1;
  ;
  function Hw() {
    Math.random();
    return "o";
  }
  function Iw() {
    Math.random();
    return "d";
  }
  function Jw() {
    Math.random();
    return "t";
  }
  function Kw() {
    Math.random();
    return "a";
  }
  function Lw() {
    Math.random();
    return "r";
  }
  function Jw() {
    Math.random();
    return "t";
  }
  function Hw() {
    Math.random();
    return "o";
  }
  function Kw() {
    Math.random();
    return "a";
  }
  function Mw() {
    Math.random();
    return "e";
  }
  function Nw() {
    this.ⲆΔⲆⲆⵠ = function () { };
    this.ⵠᐃᐃⵠⵠ = {
      ΔᐃⲆᐃΔ: 1,
      ⲆⵠⲆⵠ: 1,
      open: Uq
    };
    this.ΔⵠⲆᐃⲆ = {
      ⲆⵠⲆⵠ: 1,
      ΔᐃⲆᐃΔ: -1,
      open: false
    };
    this.ⵠⵠⵠΔ = {
      ᐃⵠΔⲆⲆᐃᐃ: 0,
      ⲆΔⲆⲆⲆ: 0,
      ⲆⵠⲆⵠ: 1,
      ΔᐃⲆᐃΔ: -1,
      open: Kk
    };
    this.ᐃⵠᐃⵠ = {
      type: 0,
      ⵠⵠᐃᐃⲆⵠⲆ: 0,
      ΔᐃⲆᐃΔ: -1,
      ᐃⵠΔᐃⲆΔΔ: 0,
      ⲆⵠⲆᐃⵠⵠᐃ: 0,
      ⲆⵠⲆⵠ: 1,
      open: false
    };
    this.ᐃⵠΔⲆ = {
      ⲆⵠⲆᐃⵠⵠᐃ: 0,
      ⵠᐃⲆⵠᐃⲆΔ: 0,
      ⲆΔⲆⲆⲆ: 0,
      ⲆⵠⲆⵠ: 1,
      ΔᐃⲆᐃΔ: -1,
      open: Uq
    };
    this.sign = {
      open: false,
      ΔᐃⲆᐃΔ: -1
    };
    this.ΔΔΔⲆΔ = {
      ᐃⲆⵠᐃ: 0,
      ⲆⵠⲆⵠ: 1,
      ΔᐃⲆᐃΔ: -1,
      open: Uq
    };
    this.ⲆⵠΔΔⵠ = {
      enabled: false,
      ᐃⲆΔⵠΔ: -1,
      label: rr,
      now: -1,
      ΔⵠᐃⲆ: jw
    };
    this.ΔΔᐃⵠ = {
      ⵠΔⵠⵠⵠᐃⲆ: tl,
      open: false,
      lock: false,
      ᐃⲆⵠᐃ: 0,
      ΔⲆΔⲆⵠᐃⵠ: Uq,
      ⲆⵠⲆⵠ: 1,
      id: -1,
      locked: false,
      ΔᐃⲆᐃΔ: -1
    };
    this.ΔⵠΔⵠⲆ = Cl;
    this.reconnect = {
      enabled: false,
      rotate: 0
    };
    this.key = ⵠᐃⵠ.ⵠΔⲆⵠᐃⵠᐃ("key", rg.location.href);
    var a = ⵠᐃⵠ.ⵠΔⲆⵠᐃⵠᐃ("egg", rg.location.href);
    if (a) {
      lx.ᐃⵠᐃΔ = parseInt(a);
    }
    this.beta = rg.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ᐃΔⲆⵠ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ᐃΔⲆⵠ.get("starve_beta");
    }
    this.ΔᐃⲆⲆΔ = ᐃΔⲆⵠ.get("starve_token") ? ᐃΔⲆⵠ.get("starve_token") : ⵠᐃⵠ.ᐃⵠᐃΔⲆⲆⲆ(14);
    rg.baguette();
    var b = rg.kot2;
    function c() {
      this.seed = 1;
      this.ᐃⵠᐃᐃᐃΔⵠ = 2;
      this.ᐃⵠⲆⲆΔⵠⲆ = 3;
      this.ᐃⲆⲆⵠⲆⲆⵠΔᐃ = 1;
      this.ᐃᐃⲆⲆᐃΔᐃΔⵠ = 2;
      this.ⵠⲆⲆⲆΔⲆΔΔΔ = 3;
      this.ᐃⲆᐃⲆΔᐃⲆ = function (a) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃΔⲆⲆΔⲆⲆ = function (a) {
        this.ᐃⵠᐃᐃᐃΔⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⲆⲆᐃΔΔΔ = function (a) {
        this.ᐃⵠⲆⲆΔⵠⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔΔⵠᐃⲆⲆᐃΔⲆ = function (a) {
        this.ᐃⲆⲆⵠⲆⲆⵠΔᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆᐃᐃᐃⲆⲆⲆⵠⲆ = function (a) {
        this.ᐃᐃⲆⲆᐃΔᐃΔⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⲆᐃᐃⲆΔⵠᐃⲆ = function (a) {
        this.ⵠⲆⲆⲆΔⲆΔΔΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃⲆⲆᐃΔΔⲆ = function (c, e, f, i, j, k, a) {
        for (var m = 1; m < a;) {
          var n = f * m % ᐃᐃΔᐃΔΔᐃ;
          var o = ᐃΔⲆⵠⲆᐃⲆ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (k < m && a > m) {
              var q = Math.random() > 0.5 ? vx * -10 : vx * 10;
              var r = p * e;
              this.ΔᐃΔⵠΔⲆⵠ[n] = Math.max(-25, Math.min(25, this.ΔᐃΔⵠΔⲆⵠ[n] + q));
              this.ⵠΔⲆΔⲆⵠᐃ[n] = Math.max(-8, Math.min(8, this.ⵠΔⲆΔⲆⵠᐃ[n] + q));
              if (r > 0) {
                Xn.beginPath();
                Xn.arc(m + nx.ᐃΔΔ.x + this.ⵠΔⲆΔⲆⵠᐃ[n], c + this.ΔᐃΔⵠΔⲆⵠ[n] - 20, r, 0, Math.PI * 2);
                if (mx.transition) {
                  var t = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
                  Xn.fillStyle = sf(83, 156, 160, 236, 247, 249, t);
                } else {
                  Xn.fillStyle = Cr.ⵠᐃΔᐃΔᐃⲆ[mx.time];
                }
                Xn.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ΔᐃⵠⲆΔⲆⲆ = function (c, e, f, i, j, k, a) {
        for (var m = 1; a > m;) {
          var n = f * m % ᐃᐃΔᐃΔΔᐃ;
          var o = ᐃΔⲆⵠⲆᐃⲆ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (m > k && a > m) {
              var q = Math.random() > 0.5 ? vx * -10 : vx * 10;
              var r = e * p;
              this.ΔⲆΔΔⲆ[n] = Math.max(-25, Math.min(25, this.ΔⲆΔΔⲆ[n] + q));
              this.ⵠⲆΔⵠⵠ[n] = Math.max(-8, Math.min(8, this.ⵠⲆΔⵠⵠ[n] + q));
              if (r > 0) {
                Xn.beginPath();
                Xn.arc(c + this.ΔⲆΔΔⲆ[n] - 20, m + nx.ᐃΔΔ.y + this.ⵠⲆΔⵠⵠ[n], r, 0, Math.PI * 2);
                if (mx.transition) {
                  var t = mx.time ? 1 - mx.ⵠΔΔᐃ.ᐃⵠⲆ : mx.ⵠΔΔᐃ.ᐃⵠⲆ;
                  Xn.fillStyle = sf(83, 156, 160, 236, 247, 249, t);
                } else {
                  Xn.fillStyle = Cr.ⵠᐃΔᐃΔᐃⲆ[mx.time];
                }
                Xn.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ⲆΔΔⵠᐃⵠΔΔΔ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ⲆⲆⲆᐃΔΔΔ();
        }
        Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
        this.ᐃⲆⲆᐃΔΔⲆ(d, h, this.ᐃⵠⲆⲆΔⵠⲆ, 18, 16, f, g);
        Xn.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ᐃⲆᐃⲆΔᐃⲆ();
        }
        Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
        this.ᐃⲆⲆᐃΔΔⲆ(b, h, this.seed, 12, 10, f, g);
        Xn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ᐃΔⲆⲆΔⲆⲆ();
          }
          Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
          this.ᐃⲆⲆᐃΔΔⲆ(c, h, this.ᐃⵠᐃᐃᐃΔⵠ, 6, 6, f, g);
          Xn.globalAlpha = 1;
        }
      };
      this.ⵠⵠⲆΔⵠⵠⲆΔᐃ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ⲆⲆⲆᐃΔΔΔ();
        }
        Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
        this.ᐃⲆⲆᐃΔΔⲆ(d, h, this.ᐃⵠⲆⲆΔⵠⲆ, 18, 16, f, g);
        Xn.globalAlpha = 1;
        var h = -(-b + 250 + e) / 150;
        if (h === 0) {
          this.ᐃⲆᐃⲆΔᐃⲆ();
        }
        Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
        this.ᐃⲆⲆᐃΔΔⲆ(b, h, this.seed, 12, 10, f, g);
        Xn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ᐃΔⲆⲆΔⲆⲆ();
          }
          Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
          this.ᐃⲆⲆᐃΔΔⲆ(c, h, this.ᐃⵠᐃᐃᐃΔⵠ, 6, 6, f, g);
          Xn.globalAlpha = 1;
        }
      };
      this.ᐃⲆΔⲆⲆᐃⵠᐃⵠ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ⲆⲆⲆᐃΔΔΔ();
        }
        Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
        this.ΔᐃⵠⲆΔⲆⲆ(d, h, this.ᐃⵠⲆⲆΔⵠⲆ, 18, 16, f, g);
        Xn.globalAlpha = 1;
        var h = -(-b + 250 + e) / 150;
        if (h === 0) {
          this.ᐃⲆᐃⲆΔᐃⲆ();
        }
        Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
        this.ΔᐃⵠⲆΔⲆⲆ(b, h, this.seed, 12, 10, f, g);
        Xn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ᐃΔⲆⲆΔⲆⲆ();
          }
          Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
          this.ΔᐃⵠⲆΔⲆⲆ(c, h, this.ᐃⵠᐃᐃᐃΔⵠ, 6, 6, f, g);
          Xn.globalAlpha = 1;
        }
      };
      this.ᐃⵠᐃᐃᐃᐃⵠⲆᐃ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(d - 0 - e - 2) / 200;
        if (h === 0) {
          this.ⲆⲆⲆᐃΔΔΔ();
        }
        Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
        this.ΔᐃⵠⲆΔⲆⲆ(d, h, this.ᐃⵠⲆⲆΔⵠⲆ, 18, 16, f, g);
        Xn.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ᐃⲆᐃⲆΔᐃⲆ();
        }
        Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
        this.ΔᐃⵠⲆΔⲆⲆ(b, h, this.seed, 12, 10, f, g);
        Xn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ᐃΔⲆⲆΔⲆⲆ();
          }
          Xn.globalAlpha = ⵠᐃⵠ.ΔΔᐃⲆΔ(h);
          this.ΔᐃⵠⲆΔⲆⲆ(c, h, this.ᐃⵠᐃᐃᐃΔⵠ, 6, 6, f, g);
          Xn.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ⵠⲆⵠΔⲆᐃΔ, 0, 10, 0, 0, 200),
        Ⲇⵠᐃⵠ: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ᐃⵠⵠⲆᐃⵠᐃ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ⲆⲆᐃᐃΔⲆᐃ, 0, 10, 0, 0, 150),
        Ⲇⵠᐃⵠ: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ΔΔᐃⲆΔ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ⵠΔⲆⵠΔΔⲆ, 0, 10, 0, 0, 100),
        Ⲇⵠᐃⵠ: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ΔΔᐃⲆΔ, 0, 10, 100, 100, 0)
      };
      this.ΔᐃⲆⵠΔΔΔᐃΔ = function (a) {
        if (a.r.x === a.r.ⲆⲆᐃᐃᐃ) {
          if (a.Ⲇⵠᐃⵠ.ⲆⲆᐃᐃᐃ === a.Ⲇⵠᐃⵠ.x) {
            return a.r;
          } else {
            return a.Ⲇⵠᐃⵠ;
          }
        } else {
          return a.r;
        }
      };
      this.Ⲇᐃᐃ = function (a) {
        var b;
        if (a.r.x === a.r.ⲆⲆᐃᐃᐃ) {
          if (a.Ⲇⵠᐃⵠ.ⲆⲆᐃᐃᐃ === a.Ⲇⵠᐃⵠ.x) {
            a.r.ᐃΔΔⲆΔⵠⵠ();
            a.Ⲇⵠᐃⵠ.ᐃΔΔⲆΔⵠⵠ();
            b = a.r;
          } else {
            b = a.Ⲇⵠᐃⵠ;
          }
        } else {
          b = a.r;
        }
        b.ᐃⵠⵠⵠⵠ(b.ⲆⲆᐃᐃᐃ);
        return b;
      };
      this.ΔⲆΔΔⲆ = [];
      this.ⵠⲆΔⵠⵠ = [];
      this.ΔᐃΔⵠΔⲆⵠ = [];
      this.ⵠΔⲆΔⲆⵠᐃ = [];
      this.ⲆΔⲆⲆⵠ = function () {
        for (var a = 0; ᐃᐃΔᐃΔΔᐃ > a; a++) {
          this.ΔⲆΔΔⲆ[a] = Math.floor(ᐃΔⲆⵠⲆᐃⲆ[a] * 25);
          this.ⵠⲆΔⵠⵠ[a] = Math.floor(ᐃΔⲆⵠⲆᐃⲆ[a] * 8);
          this.ΔᐃΔⵠΔⲆⵠ[a] = Math.floor(ᐃΔⲆⵠⲆᐃⲆ[a] * 25);
          this.ⵠΔⲆΔⲆⵠᐃ[a] = Math.floor(ᐃΔⲆⵠⲆᐃⲆ[a] * 8);
        }
        this.w1.r.x = this.w1.r.ⲆⲆᐃᐃᐃ;
        this.w2.r.ⵠᐃΔⵠΔ = 3.5;
        this.w3.r.ⵠᐃΔⵠΔ = 2;
      };
      this.ⲆΔⲆⲆⵠ();
    }
    this.ΔᐃⲆⲆΔ = b.substring(0, 6) + this.ΔᐃⲆⲆΔ.substring(6);
    this.ᐃΔᐃᐃᐃⵠᐃ = ᐃΔⲆⵠ.get("starve_token_id") ? ᐃΔⲆⵠ.get("starve_token_id") : "";
    this.id = 0;
    this.ᐃΔⲆᐃ = 0;
    this.ⲆΔⲆ = 0;
    this.ΔⵠΔΔΔⵠⲆ = {
      ΔⲆᐃⲆⵠ: 0,
      ⲆΔⵠΔⵠ: 0,
      ⵠⲆⲆⵠⵠᐃⲆ: 0,
      ⲆⲆᐃⵠΔΔΔ: ""
    };
    this.ᐃᐃΔᐃΔᐃⵠᐃⵠ = {
      connected: 0,
      ⲆⲆΔΔⵠ: new Date().getTime()
    };
    this.ΔⲆⲆⵠᐃ = [];
    this.ΔᐃᐃⵠⲆᐃⲆ = function (a) {
      for (var b = 0; this.ΔⲆⲆⵠᐃ.length > b; b++) {
        if (a == this.ΔⲆⲆⵠᐃ[b]) {
          return Rr;
        }
      }
      return ja;
    };
    this.ᐃⲆΔᐃⵠ = {
      ᐃⲆΔⵠΔ: 0,
      time: 0,
      value: 0,
      open: false,
      ΔⵠᐃⲆ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ᐃⲆΔⵠΔ) / 1000);
          if (this.time < 60) {
            qx.ᐃⲆΔᐃⵠ.button.ΔⵠᐃⲆ(Xn);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = tl;
          }
        }
      }
    };
    this.ⲆⲆⵠⵠⵠ = {
      id: -1,
      ⲆⵠⲆⵠ: -1,
      lock: 0,
      timeout: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0, 1, 0, 1 / 30, 1),
      wait: y
    };
    this.ⵠⲆⲆⲆⵠ = {
      timeout: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0, 1, 0, 1 / 5, 1),
      wait: false
    };
    this.ⲆΔᐃⵠᐃ = {
      timeout: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0, 1, 0, 1, 1),
      wait: false
    };
    this.ᐃⲆⲆᐃᐃ = {
      timeout: new ⵠᐃⵠ.ⲆΔⵠᐃ(mj, 0, 1, 0, 0.1, 1),
      wait: false
    };
    this.ᐃΔΔ = new ⵠᐃⵠ.ᐃⲆⵠΔΔⵠⵠ(ⵠᐃⵠ.ᐃᐃᐃᐃᐃⵠᐃ, 0, 0.4, 0, 0, ao, no, ao, no);
    this.ᐃΔΔ.ᐃⲆΔⵠΔ = 0;
    this.ᐃΔΔ.ΔⵠⵠⵠᐃΔⵠ = 0;
    this.ᐃΔΔ.ⵠⲆⲆ = function () {
      if (this.ΔⵠⵠⵠᐃΔⵠ > 0) {
        this.ΔⵠⵠⵠᐃΔⵠ -= vx;
      } else {
        var a = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
        if (a) {
          this.ᐃⲆΔⵠΔ = 0;
          var b = Math.max(Math.min(ao - a.x, -2), 2 - mx.w + Yn);
          var c = Math.max(Math.min(no - a.y, -2), 2 - mx.ΔⲆⲆ + _n);
          this.ᐃⵠⵠⵠⵠ({
            x: b,
            y: c
          });
        } else {
          this.ᐃⲆΔⵠΔ += vx;
          if (this.ᐃⲆΔⵠΔ > 3) {
            this.ᐃⲆΔⵠΔ = 0;
            if (!nx.reconnect.enabled) {
              px.ᐃᐃⲆⲆⲆΔⲆΔΔ();
            }
          }
        }
      }
    };
    this.ᐃΔΔ.w = screen.width;
    this.ᐃΔΔ.ΔⲆⲆ = screen.height;
    this.ᐃΔΔ.ⲆⲆⵠᐃⵠⲆⵠ = this.ᐃΔΔ.w;
    this.ᐃΔΔ.ⲆΔⲆⵠᐃᐃᐃ = this.ᐃΔΔ.ΔⲆⲆ;
    this.ᐃΔΔ.rx = 0;
    this.ᐃΔΔ.ry = 0;
    this.ᐃΔΔ.ᐃⲆΔΔᐃⲆⲆⲆⲆ = 0;
    this.ᐃΔΔ.ⵠΔΔᐃⵠΔⵠᐃᐃ = 0;
    this.ᐃΔΔ.ⲆᐃⵠΔⵠ = function (a, b) {
      this.x = -Math.min(Math.max(-mx.ⲆⵠⵠᐃᐃΔⲆ * 2, a - mx.ⲆⵠⵠᐃᐃΔⲆ - this.ⲆⲆⵠᐃⵠⲆⵠ / 2), mx.w - this.ⲆⲆⵠᐃⵠⲆⵠ);
      this.y = -Math.min(Math.max(-mx.ⵠⲆⵠⵠᐃⵠΔ * 2, b - (mx.ⵠⲆⵠⵠᐃⵠΔ + this.ⲆΔⲆⵠᐃᐃᐃ) / 2), mx.ΔⲆⲆ - this.ⲆΔⲆⵠᐃᐃᐃ + mx.ⵠⲆⵠⵠᐃⵠΔ);
      this.ⲆⲆᐃᐃᐃ = this.x;
      this.ⵠΔⲆΔΔΔⵠ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ΔΔΔⵠⲆⵠΔ: 0,
      ᐃΔⵠⲆ: 0,
      attack: 0,
      ⵠⲆⲆ: function () {
        var a = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
        if (a) {
          var b = {
            x: nx.ᐃΔΔ.x + a.x,
            y: nx.ᐃΔΔ.y + a.y
          };
        } else {
          b = uo;
        }
        var c = ⵠᐃⵠ.ⵠΔⲆᐃⵠⲆᐃ(tx.ⲆⵠΔᐃ, b);
        var d = Vh;
        this.ᐃΔⵠⲆ += vx;
        if (!tx.state) {
          if (a && !(a.action & 16) && this.ᐃΔⵠⲆ > 0.2) {
            this.attack = 1;
            d = true;
            this.ᐃΔⵠⲆ = 0;
            px.ᐃⲆᐃᐃⲆΔⵠⲆⲆ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ΔⲆⲆⲆΔⵠⵠ = c;
        }
        if (!d) {
          this.timeout += vx;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              px.ΔᐃⲆᐃⵠⵠⵠⲆΔ(c);
              this.angle = c;
            }
          }
        }
        if (!nx.ⲆᐃⲆⲆᐃ.open && !nx.ᐃᐃⲆᐃⲆ.open) {
          var e = 0;
          if (sx.ΔⵠⲆᐃΔⵠΔ()) {
            e |= 1;
          }
          if (sx.ΔⲆΔΔᐃⵠΔ()) {
            e |= 2;
          }
          if (sx.ᐃᐃⲆⲆᐃΔⵠ()) {
            e |= 4;
          }
          if (sx.ΔⵠⲆᐃⵠⲆᐃ()) {
            e |= 8;
          }
          if (this.ΔΔΔⵠⲆⵠΔ != e) {
            px.ⵠΔⲆᐃⵠⲆᐃⵠΔ(e);
          }
          this.ΔΔΔⵠⲆⵠΔ = e;
        }
      }
    };
    this.ΔⲆᐃΔ = {
      c: 1,
      Ⲇⵠᐃⵠ: 1,
      ΔⲆⲆ: 1,
      Ⲇᐃᐃ: 1,
      ᐃᐃᐃ: 1,
      ⲆⵠⲆΔΔΔᐃ: 1,
      ⵠⵠⲆᐃⵠⵠᐃ: new ⵠᐃⵠ.ⲆΔⵠᐃ(true, 0, 1, 0, 3, 3),
      ⵠᐃⲆⲆⵠᐃⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(true, 0, 1, 0, 2, 2),
      ⵠⲆⵠⲆᐃΔᐃ: new ⵠᐃⵠ.ⲆΔⵠᐃ(true, 0, 1, 0, 3, 3),
      ᐃΔᐃΔⵠⲆΔ: new ⵠᐃⵠ.ⲆΔⵠᐃ(true, 0, 1, 0, 3, 3),
      ᐃⲆⲆᐃⲆᐃⵠ: new ⵠᐃⵠ.ⲆΔⵠᐃ(true, 0, 1, 0, 3, 3),
      ΔᐃⵠⲆΔᐃᐃ: new ⵠᐃⵠ.ⲆΔⵠᐃ(Fn, 0, 1, 0, 3, 3),
      ⲆⲆⲆΔⲆ: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ᐃᐃᐃᐃᐃⵠᐃ, 0, 1, 0, 0, 1),
      ⲆⵠᐃⵠⲆ: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ᐃᐃᐃᐃᐃⵠᐃ, 0, 1, 0, 0, 1),
      ᐃⵠΔⲆᐃⵠΔ: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ᐃᐃᐃᐃᐃⵠᐃ, 0, 1, 0, 0, 1),
      ⵠΔΔᐃᐃᐃᐃ: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ᐃᐃᐃᐃᐃⵠᐃ, 0, 1, 0, 0, 1),
      ᐃᐃⵠΔⲆᐃΔ: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ᐃᐃᐃᐃᐃⵠᐃ, 0, 1, 0, 0, 1),
      ΔΔᐃⵠᐃ: new ⵠᐃⵠ.ΔΔᐃⵠⲆ(ⵠᐃⵠ.ᐃᐃᐃᐃᐃⵠᐃ, 0, 1, 0, 0, 1),
      ⵠⲆⲆ: function () {
        this.ⵠⵠⲆᐃⵠⵠᐃ.ⵠⲆⲆ();
        this.ⵠᐃⲆⲆⵠᐃⵠ.ⵠⲆⲆ();
        this.ⵠⲆⵠⲆᐃΔᐃ.ⵠⲆⲆ();
        this.ᐃΔᐃΔⵠⲆΔ.ⵠⲆⲆ();
        this.ᐃⲆⲆᐃⲆᐃⵠ.ⵠⲆⲆ();
        this.ΔᐃⵠⲆΔᐃᐃ.ⵠⲆⲆ();
        this.ⲆⲆⲆΔⲆ.ᐃⵠⵠⵠⵠ(this.c);
        this.ⲆⵠᐃⵠⲆ.ᐃⵠⵠⵠⵠ(this.Ⲇⵠᐃⵠ);
        this.ᐃⵠΔⲆᐃⵠΔ.ᐃⵠⵠⵠⵠ(this.ΔⲆⲆ);
        this.ⵠΔΔᐃᐃᐃᐃ.ᐃⵠⵠⵠⵠ(this.Ⲇᐃᐃ);
        this.ᐃᐃⵠΔⲆᐃΔ.ᐃⵠⵠⵠⵠ(this.ᐃᐃᐃ);
        this.ΔΔᐃⵠᐃ.ᐃⵠⵠⵠⵠ(this.ⲆⵠⲆΔΔΔᐃ);
      }
    };
    this.ⲆⵠΔᐃⲆΔΔ = false;
    this.ⲆⲆⵠⲆᐃⲆⵠ = Uq;
    this.ⲆⵠⲆⵠⲆ = false;
    this.ⵠⲆⲆⵠΔΔⲆ = ja;
    this.ΔⲆⵠⵠ = {
      max: 10,
      ⵠΔⲆΔⲆⵠⲆ: 0,
      ⲆⵠⲆΔⵠ: 0,
      ΔᐃⲆΔ: [],
      ⵠᐃⵠⲆⲆ: [],
      ΔΔⵠⲆⲆᐃⵠ: function (a, b) {
        if (a === 1) {
          this.ⲆⵠⲆΔⵠ = qf.ⵠⲆⲆΔΔⲆᐃⲆⲆ;
        }
        this.ⵠΔⲆΔⲆⵠⲆ += b;
        this.max = 10 + this.ⵠΔⲆΔⲆⵠⲆ + this.ⲆⵠⲆΔⵠ;
      },
      ⲆᐃⵠᐃⲆΔⲆ: {
        item: -1,
        ΔΔ: null,
        ᐃΔⵠⵠⵠⲆⵠ: 0,
        ⲆⲆⵠΔⵠⵠⲆ: 0,
        ⵠΔⵠΔⵠ: -1,
        ⲆΔᐃⵠⵠ: -1,
        ᐃⵠⵠⵠᐃ: function (a) {
          if (!!this.ᐃΔⵠⵠⵠⲆⵠ && (a.x !== this.ⵠΔⵠΔⵠ || a.y !== this.ⲆΔᐃⵠⵠ)) {
            this.ⲆⲆⵠΔⵠⵠⲆ = 1;
          }
        },
        start: function (a, b) {
          this.ⵠΔⵠΔⵠ = b.x;
          this.ⲆΔᐃⵠⵠ = b.y;
          this.item = a;
          this.ΔΔ = nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ[a].info.ΔΔ[2];
          this.ᐃΔⵠⵠⵠⲆⵠ = 1;
        },
        stop: function () {
          this.ᐃΔⵠⵠⵠⲆⵠ = 0;
          this.ⲆⲆⵠΔⵠⵠⲆ = 0;
          this.ⵠΔⵠΔⵠ = -1;
          this.ⲆΔᐃⵠⵠ = -1;
        },
        release: function () {
          var a = -1;
          var b = nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ;
          var c = 0;
          if (this.ᐃΔⵠⵠⵠⲆⵠ && this.ⲆⲆⵠΔⵠⵠⲆ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === kf) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              qx.ᐃⵠᐃⲆΔΔⲆ();
            }
          }
          this.stop();
          return c;
        },
        ΔⵠᐃⲆ: function (a, b) {
          if (this.ᐃΔⵠⵠⵠⲆⵠ && this.ⲆⲆⵠΔⵠⵠⲆ) {
            Up(Xn, this.ΔΔ, Math.floor(a - this.ΔΔ.width / 2), Math.floor(b - this.ΔΔ.height / 2));
          }
        }
      },
      ᐃⲆΔᐃΔⵠᐃΔⵠ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ΔᐃⲆΔ[a[d][0]] == a[d][1]) {
            return true;
          }
        }
        return false;
      },
      ᐃⲆⲆⵠΔ: function (a) {
        for (var b = 0; b < this.ⵠᐃⵠⲆⲆ.length; b++) {
          if (this.ⵠᐃⵠⲆⲆ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ⲆⵠΔΔΔΔᐃ: function (a, b) {
        this.ΔᐃⲆΔ[a] = 0;
        this.ⵠᐃⵠⲆⲆ.splice(b, 1);
        qx.ᐃⵠᐃⲆΔΔⲆ();
      },
      ⵠΔᐃΔⲆⵠᐃ: function (a, b, c) {
        ⵠⲆⲆ = true;
        this.ΔᐃⲆΔ[a] = Math.max(0, this.ΔᐃⲆΔ[a] - b);
        if (!this.ΔᐃⲆΔ[a] && c >= 0) {
          this.ⲆⵠΔΔΔΔᐃ(a, c);
        }
      }
    };
    this.ᐃⲆΔⵠᐃ = {
      enabled: No,
      translate: {
        x: 0,
        y: 0
      },
      ΔⲆᐃⵠⵠⲆΔ: function () {
        if (mx.mode == 1 && !nx.ⲆⲆⵠⲆᐃⲆⵠ) {
          nx.ᐃⲆΔⵠᐃ.enabled = !nx.ᐃⲆΔⵠᐃ.enabled;
          if (nx.ᐃⲆΔⵠᐃ.enabled) {
            qx.options.ᐃΔⵠⲆⵠⲆΔ.display = "inline-block";
          } else {
            qx.options.ᐃΔⵠⲆⵠⲆΔ.display = "none";
          }
        }
      }
    };
    qx.options.ᐃΔⵠⲆⵠⲆΔ.display = "none";
    this.ΔⵠⲆΔᐃ = {
      enabled: false,
      translate: {
        y: 0,
        x: 0
      },
      ᐃⲆΔⵠΔ: 0,
      ΔⲆᐃⵠⵠⲆΔ: function () {
        nx.ΔⵠⲆΔᐃ.enabled = !nx.ΔⵠⲆΔᐃ.enabled;
        if (nx.ΔⵠⲆΔᐃ.enabled) {
          qx.options.ⵠⲆⲆᐃⵠΔⲆ.display = "inline-block";
        } else {
          qx.options.ⵠⲆⲆᐃⵠΔⲆ.display = "none";
        }
      },
      ⵠⲆⲆ: function () {
        if (!!this.enabled && nx.ᐃⵠⲆΔ.id < 0 && !qx.ᐃᐃΔᐃ.open) {
          if (nx.ΔⲆᐃΔ.ΔⲆⲆ < 0.35) {
            if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[110]) {
              px.ᐃΔᐃᐃⲆ(110, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(110));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[192]) {
              px.ᐃΔᐃᐃⲆ(192, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(192));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[196]) {
              px.ᐃΔᐃᐃⲆ(196, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(196));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[189]) {
              px.ᐃΔᐃᐃⲆ(189, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(189));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[207]) {
              px.ᐃΔᐃᐃⲆ(207, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(207));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[205]) {
              px.ᐃΔᐃᐃⲆ(205, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(205));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[209]) {
              px.ᐃΔᐃᐃⲆ(209, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(209));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[143]) {
              px.ᐃΔᐃᐃⲆ(143, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(143));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[117]) {
              px.ᐃΔᐃᐃⲆ(117, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(117));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[138]) {
              px.ᐃΔᐃᐃⲆ(138, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(138));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[133]) {
              px.ᐃΔᐃᐃⲆ(133, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(133));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[145]) {
              px.ᐃΔᐃᐃⲆ(145, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(145));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[136]) {
              px.ᐃΔᐃᐃⲆ(136, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(136));
            } else if (nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[197]) {
              px.ᐃΔᐃᐃⲆ(197, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(197));
            }
          } else if (nx.ΔⲆᐃΔ.Ⲇᐃᐃ < 0.35 && nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[127]) {
            px.ᐃΔᐃᐃⲆ(127, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(127));
          }
        }
      }
    };
    qx.options.ⵠⲆⲆᐃⵠΔⲆ.display = "none";
    this.ᐃⵠⲆΔ = {
      id: -1,
      Ⲇᐃᐃⵠ: -1,
      timeout: new ⵠᐃⵠ.ⲆΔⵠᐃ(xa, 0, 1, 0, 1, 1),
      ᐃΔΔᐃᐃ: false,
      ΔΔᐃΔ: -1,
      mode: 0,
      label: [],
      ⲆⲆⲆⲆᐃ: [],
      ⵠⵠⵠⵠⲆ: Vh,
      ΔΔΔⵠⵠ: ks,
      ⲆΔᐃᐃΔⵠᐃ: false,
      ΔⵠⲆᐃⲆ: false,
      ⲆᐃⵠⵠΔΔⵠΔᐃ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ΔⲆⲆⵠᐃⵠⲆⵠⵠ: function (a) {
        this.ⵠⵠⵠⵠⲆ = a;
        var b = qx.ᐃᐃΔᐃ;
        if (b.open) {
          b.ΔⲆⵠⲆᐃⵠⲆ(b.button);
        }
        this.ⵠⲆⲆ();
      },
      ΔⲆⵠⲆⲆⵠᐃᐃⵠ: function (a) {
        var b = at[a];
        this.id = a;
        this.ᐃΔΔᐃᐃ = true;
        mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
        this.timeout.ⵠⲆΔᐃᐃᐃⵠ = b.time * 8;
        this.Ⲇᐃᐃⵠ = b.Ⲇᐃᐃⵠ;
      },
      ΔΔᐃΔᐃⲆᐃⵠⵠ: function (a) {
        var b = at[a];
        this.id = a;
        this.ᐃΔΔᐃᐃ = true;
        var c = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
        if (c && c.right == 28) {
          this.timeout.ⵠⲆΔᐃᐃᐃⵠ = b.time * 3;
        } else {
          this.timeout.ⵠⲆΔᐃᐃᐃⵠ = b.time;
        }
        this.Ⲇᐃᐃⵠ = b.Ⲇᐃᐃⵠ;
        for (var d = 0; d < b.r.length; d++) {
          var e = b.r[d];
          nx.ΔⲆⵠⵠ.ⵠΔᐃΔⲆⵠᐃ(e[0], e[1], nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(e[0]));
        }
        qx.ᐃⵠᐃⲆΔΔⲆ();
      },
      ⵠⲆⲆ: function () {
        this.ⲆⲆⲆⲆᐃ = [];
        if (qx.ⲆΔΔΔᐃ.ᐃⵠⲆΔ === 1) {
          qx.ⲆΔΔΔᐃ.display = 0;
        }
        for (var a in at) {
          var b = at[a];
          var c = true;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (nx.ΔⲆⵠⵠ.max >= 16 && b.id === 100) {
                c = ks;
                break;
              }
              if (b.w > this.ⵠⵠⵠⵠⲆ || b.f > this.ΔΔΔⵠⵠ || b.ᐃᐃᐃ > this.ⲆΔᐃᐃΔⵠᐃ || b.e > this.ΔⵠⲆᐃⲆ) {
                c = false;
                break;
              }
              var f = b.r[d];
              if (!nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[f[0]] || nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[f[0]] < f[1]) {
                c = Kk;
                break;
              }
            }
            if (c) {
              this.ⲆⲆⲆⲆᐃ.push(qx.ᐃΔⵠ[b.id]);
            }
          }
        }
        qx.ΔΔΔⲆΔᐃⵠ();
        qx.ᐃⵠᐃⲆⲆⲆΔ();
        qx.ⵠⵠⵠⵠᐃΔᐃ();
        qx.ᐃⲆⵠⲆⵠⵠᐃ();
        qx.ᐃⲆⲆΔⲆⲆΔ();
        qx.ΔⲆᐃΔΔΔⲆ();
        qx.sign.ᐃⵠⲆⲆⵠⵠΔ();
      },
      ᐃΔΔⲆΔⵠⵠ: function () {
        this.id = -1;
        this.ᐃΔΔᐃᐃ = false;
        this.timeout.ᐃⵠⲆ = 0;
        this.timeout.ᐃᐃᐃ = Ch;
        this.ⵠⲆⲆ();
      }
    };
    this.ᐃΔᐃⵠⵠⵠᐃ = {
      message: undefined,
      ΔⵠᐃⲆ: nw
    };
    this.alert = {
      timeout: new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ΔⵠᐃⲆ: kw,
      list: []
    };
    this.ΔᐃᐃᐃΔ = {
      ⵠⲆ: document.createElement("canvas"),
      ⵠᐃᐃⲆⲆ: [],
      ⵠⲆⲆ: true,
      translate: {
        x: 0,
        y: 0
      },
      sort: function () {
        var a = [];
        for (var b = mx.ᐃᐃΔΔ, c = 0; c < b.length; c++) {
          if (b[c].ΔⵠΔⵠⲆ) {
            a.push({
              id: c,
              ΔⵠⲆΔ: b[c].ΔⲆᐃⲆⵠ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ΔⵠⲆΔ - a.ΔⵠⲆΔ;
        });
        this.ⵠᐃᐃⲆⲆ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ⵠᐃᐃⲆⲆ.push(a[c].id);
        }
        this.ⵠⲆⲆ = true;
      },
      ⲆΔⲆⲆⵠ: function (a) {
        for (var b = mx.ᐃᐃΔΔ, c = 0; c < b.length; c++) {
          b[c].ΔⲆᐃⲆⵠ = 0;
        }
        b[nx.id].ΔⲆᐃⲆⵠ = ⵠᐃⵠ.ⲆΔᐃᐃⵠΔΔ(a[1]);
        this.ⵠᐃᐃⲆⲆ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ⵠᐃᐃⲆⲆ.push(a[c]);
          b[a[c]].ΔⲆᐃⲆⵠ = ⵠᐃⵠ.ⲆΔᐃᐃⵠΔΔ(a[c + 1]);
        }
        this.ⵠⲆⲆ = true;
      }
    };
    this.ΔᐃᐃᐃΔ.ⵠⲆ.width = aq * 180;
    this.ΔᐃᐃᐃΔ.ⵠⲆ.height = aq * 300;
    this.ΔᐃᐃᐃΔ.Ⲇ = this.ΔᐃᐃᐃΔ.ⵠⲆ.getContext("2d");
    this.ᐃᐃⲆᐃⲆ = {
      open: false,
      input: document.getElementById("commandInput"),
      ⵠᐃⵠΔⲆⲆⲆ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ΔᐃΔⵠⲆᐃᐃΔΔ: function (a) {
        this.ⵠᐃⵠΔⲆⲆⲆ.innerHTML += a;
      },
      ⵠⲆⲆ: function () {
        this.style.left = Math.floor(Yn / 2 - 300) + "px";
        this.style.top = Math.floor(_n / 2 - 250) + "px";
      },
      ᐃᐃⵠΔⲆⲆⵠⵠΔ: function () {
        this.ⵠᐃⵠΔⲆⲆⲆ.innerHTML = "";
      },
      ᐃⲆⵠⵠᐃ: function () {
        this.open = mj;
        this.style.display = "none";
      },
      ΔⲆⵠᐃΔ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % 3 === 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ⵠⲆᐃᐃΔ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ΔᐃΔⵠⲆᐃᐃΔΔ(f);
        this.ⵠⵠⵠΔΔΔⲆΔΔ();
      },
      ⵠⵠⵠΔΔΔⲆΔΔ: function () {
        this.ⵠᐃⵠΔⲆⲆⲆ.scrollTop = this.ⵠᐃⵠΔⲆⲆⲆ.scrollHeight;
      },
      ⲆⵠᐃΔⲆⵠⲆ: function (b) {
        switch (b) {
          case "clean":
            this.ᐃᐃⵠΔⲆⲆⵠⵠΔ();
            return _j;
          case "list":
            var c = "";
            const a = rg.document.createElement("div");
            for (var d = mx.ᐃᐃΔΔ, f = 0; f < d.length; f++) {
              var g = d[f];
              if (g.ΔⵠΔⵠⲆ) {
                a.innerText = g.ΔΔΔᐃᐃ;
                c += a.innerHTML + " <span style=\"color:green\">#" + f + "</span><br />";
              }
            }
            this.ⵠⲆᐃᐃΔ("list", 1, "List all connected players", c);
            return true;
          case "weapon-list":
            this.ⵠⲆᐃᐃΔ("Weapons", 1, "List all weapons in the game", this.ΔⲆⵠᐃΔ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
            return true;
          case "tool-list":
            this.ⵠⲆᐃᐃΔ("Tools", 1, "List all tools in the game", this.ΔⲆⵠᐃΔ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return pr;
          case "survival-list":
            this.ⵠⲆᐃᐃΔ("Survival Items", 1, "List all survival items in the game", this.ΔⲆⵠᐃΔ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return ss;
          case "resource-list":
            this.ⵠⲆᐃᐃΔ("Resources", 1, "List all resources in the game", this.ΔⲆⵠᐃΔ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return true;
          case "food-list":
            this.ⵠⲆᐃᐃΔ("Food", 1, "List all food in the game", this.ΔⲆⵠᐃΔ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return Nh;
          case "hat-list":
            this.ⵠⲆᐃᐃΔ("Hats", 1, "List all hats in the game", this.ΔⲆⵠᐃΔ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return true;
          case "building-list":
            this.ⵠⲆᐃᐃΔ("Buildings", 1, "List all buildings in the game", this.ΔⲆⵠᐃΔ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return true;
          case "biome-list":
            this.ⵠⲆᐃᐃΔ("Biomes list", 1, "List all available biomes in the game", this.ΔⲆⵠᐃΔ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return true;
          case "help-config":
            this.ⵠⲆᐃᐃΔ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return pr;
          case "pos":
            d = mx.ⵠΔⲆ[0];
            f = 0;
            for (; f < d.length; f++) {
              var e = d[f];
              if (e.ⲆⵠⲆⵠ === nx.id) {
                this.ⵠⲆᐃᐃΔ("pos", 1, "Your position is " + Math.floor(e.x / 100) + ":" + Math.floor(e.y / 100));
                return ma;
              }
            }
            break;
          case "help-admin":
            this.ⵠⲆᐃᐃΔ("help-admin", 1, "List all available commands for admin only", this.ΔⲆⵠᐃΔ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return true;
          case "help":
            this.ⵠⲆᐃᐃΔ("help", 1, "List all available commands", this.ΔⲆⵠᐃΔ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return true;
        }
        return Vg;
      },
      ᐃᐃΔⵠᐃⵠⲆΔⵠ: function () {
        if (!this.open) {
          this.open = ct;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ⲆⵠⲆⵠᐃΔΔ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ⲆⵠᐃΔⲆⵠⲆ(a)) {
            px.ΔΔⵠⲆᐃⲆⵠⲆⵠ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ⲆᐃⲆⲆᐃ = {
      open: false,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ⵠⲆⲆ: function () {
        this.style.left = Math.floor(Yn / 2 - 150) + "px";
        this.style.top = Math.floor(_n / 2 + 80) + "px";
      },
      ᐃⲆⵠⵠᐃ: function () {
        this.open = xa;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (nx.alert.text) {
              nx.alert.list.push(b);
            } else {
              nx.alert.text = b;
            }
            qx.ᐃᐃΔⵠⵠΔᐃ = 0;
          } else {
            qx.ᐃᐃΔⵠⵠΔᐃ = 1;
          }
        }
      },
      ⲆⵠᐃΔⲆⵠⲆ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return true;
        }
        return xa;
      },
      ᐃΔⲆΔⵠ: function () {
        if (this.open) {
          this.open = false;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ⲆⵠᐃΔⲆⵠⲆ(a)) {
              px.ᐃΔᐃⲆⲆⵠⲆⲆⵠ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ΔⲆⲆⵠᐃᐃⵠ = {
      ⵠᐃⲆⲆΔ: [],
      ⵠⲆⲆ: function (a) {
        a.y += vx * 80 * a.ΔⵠⲆΔ;
        a.x += vx * 80 * a.c;
        a.ⲆⵠᐃⵠⲆ -= vx / 6;
        if (a.ⲆⵠᐃⵠⲆ > 0.2) {
          a.alpha = Math.min(a.alpha + vx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - vx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(Cr.ΔⵠⵠᐃⲆⲆⲆ * (Yn / 1366), Cr.ΔⵠⵠᐃⲆⲆⲆ + 10) * Math.max(Math.min(mx.ᐃⲆᐃⲆⵠ + 1000, 3000) / 3000, 0));
        if (this.ⵠᐃⲆⲆΔ.length < c) {
          var d = Math.floor(Math.random() * Cr.ⵠⵠⵠⲆᐃΔⲆ);
          var e = -nx.ᐃΔΔ.x + Math.floor(Math.random() * nx.ᐃΔΔ.w);
          var f = -nx.ᐃΔΔ.y + Math.floor(Math.random() * nx.ᐃΔΔ.ΔⲆⲆ);
          var g = Math.random(Math.PI);
          this.ⵠᐃⲆⲆΔ.push(new Fw(d, e, f, g));
        }
      }
    };
    this.ⵠⲆⵠⲆⲆΔΔ = 0;
    this.ᐃⵠΔⲆᐃ = 0;
    this.ⵠΔⵠᐃΔ = {
      ⵠᐃⲆⲆΔ: [],
      ΔᐃΔⵠⵠ: 0,
      ⵠⲆⲆΔᐃ: 0,
      ⵠⲆⲆ: function (a) {
        a.y += vx * (200 + this.ⵠⲆⲆΔᐃ * 800) * a.ΔⵠⲆΔ;
        a.x += vx * (200 + this.ⵠⲆⲆΔᐃ * 800) * a.c;
        a.ⲆⵠᐃⵠⲆ -= vx / 6;
        if (a.ⲆⵠᐃⵠⲆ > 0.2) {
          a.alpha = Math.min(a.alpha + vx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - vx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.ⵠⲆⲆΔᐃ + 0.1) * Cr.ᐃⵠΔⵠᐃⵠⵠ * (Yn / 1366), (this.ⵠⲆⲆΔᐃ + 0.1) * Cr.ᐃⵠΔⵠᐃⵠⵠ + 10) * Math.max(Math.min(mx.ⲆᐃᐃⲆᐃ + 1000, 3000) / 3000, 0));
        if (this.ⵠᐃⲆⲆΔ.length < c) {
          var d = Math.floor(Math.random() * Cr.ⵠⵠⵠⲆᐃΔⲆ);
          var e = -nx.ᐃΔΔ.x + Math.floor(Math.random() * nx.ᐃΔΔ.w);
          var f = -nx.ᐃΔΔ.y + Math.floor(Math.random() * nx.ᐃΔΔ.ΔⲆⲆ);
          var g = Math.random(Math.PI);
          if (nx.ⵠΔⵠᐃΔ.ΔᐃΔⵠⵠ !== 0) {
            e -= nx.ᐃΔΔ.w / 2;
          }
          this.ⵠᐃⲆⲆΔ.push(new Fw(d, e, f, g));
        }
      }
    };
    this.ⵠⲆⲆᐃⵠ = {
      ⵠᐃⲆⲆΔ: [],
      ΔᐃΔⵠⵠ: 0,
      ⵠⲆⲆΔᐃ: 0,
      ⵠⲆⲆ: function (a) {
        if (sx.ᐃᐃⲆⲆᐃΔⵠ()) {
          a.y += vx * a.ⲆΔΔΔⵠ * (5.5 + this.ⵠⲆⲆΔᐃ * 10);
        } else {
          a.y += vx * a.ⲆΔΔΔⵠ * (5 + this.ⵠⲆⲆΔᐃ * 10);
        }
        a.ⲆⵠᐃⵠⲆ -= vx / 2;
        if (sx.ΔⵠⲆᐃΔⵠΔ()) {
          a.x += vx * (100 + this.ⵠⲆⲆΔᐃ * 400);
        } else if (sx.ΔⲆΔΔᐃⵠΔ()) {
          a.x -= vx * (130 - this.ⵠⲆⲆΔᐃ * 400);
        } else {
          a.x -= vx * (30 - this.ⵠⲆⲆΔᐃ * 400);
        }
        if (a.ⲆⵠᐃⵠⲆ > 0.2) {
          a.alpha = Math.min(a.alpha + vx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - vx * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ⵠⲆⲆΔᐃ * 1.5 + 0.5) * Cr.ΔᐃΔᐃᐃⵠᐃ * (Yn / 1366), (this.ⵠⲆⲆΔᐃ * 1.5 + 0.5) * Cr.ΔᐃΔᐃᐃⵠᐃ + 10) * Math.max(Math.min(mx.ⲆⲆⲆⵠⲆ + 1000, 3000) / 3000, 0));
        if (this.ⵠᐃⲆⲆΔ.length < b) {
          var c = Math.floor(Math.random() * Cr.ΔΔⲆⵠΔΔⲆ);
          var d = -nx.ᐃΔΔ.x + Math.floor(Math.random() * nx.ᐃΔΔ.w);
          var e = -nx.ᐃΔΔ.y + Math.floor(Math.random() * 400 * aq - aq * 200);
          this.ⵠᐃⲆⲆΔ.push(new Fw(c, d, e, 0));
        }
      }
    };
    this.ⲆᐃΔⵠ = [];
    for (var d = 0; d < 4; d++) {
      this.ⲆᐃΔⵠ.push(new c());
    }
  }
  function Ow() {
    Math.random();
    return "C";
  }
  function Pw() {
    Math.random();
    return "n";
  }
  function Qw() {
    Math.random();
    return "i";
  }
  function Rw() {
    Math.random();
    return "s";
  }
  function Sw() {
    Math.random();
    return "g";
  }
  function Gw() {
    Math.random();
    return "p";
  }
  function Tw(c, f) {
    var j = this;
    this.ⵠⲆ = c;
    this.Ⲇ = f;
    if (rg.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⲆᐃᐃⵠᐃⲆⲆ = "default";
      this.ᐃⵠⲆᐃⲆΔⵠ = "pointer";
    } else {
      this.ⲆᐃᐃⵠᐃⲆⲆ = "url('img/cursor0.png'), default";
      this.ᐃⵠⲆᐃⲆΔⵠ = "url('img/cursor1.png'), pointer";
    }
    this.ᐃᐃΔⵠⵠΔᐃ = 1;
    this.ᐃΔⲆᐃⲆⲆⲆ = 1;
    this.ΔⵠΔⵠΔⵠΔ = 1;
    this.ⵠΔᐃΔⵠᐃΔ = 1;
    this.ⵠⵠᐃΔⲆΔᐃⲆᐃ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ⵠⲆⲆ: function () {
        this.style.left = Math.floor(ao - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ⵠᐃᐃᐃ = {
      ⵠΔⲆⵠⵠΔᐃ: Bf(60, 60, 0, ⵠⵠ[782]),
      ⵠᐃⵠᐃⵠⲆΔ: Bf(60, 60, 0, ⵠⵠ[783])
    };
    this.sign = {
      open: Vh,
      ΔᐃΔᐃᐃΔⲆᐃⲆ: 0,
      ᐃⵠᐃⵠᐃᐃⲆ: document.getElementById("sign_object"),
      ⲆⲆᐃΔⲆⵠᐃ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: Bf(60, 60, 0, ⵠⵠ[803]),
      ᐃⵠⲆⲆⵠⵠΔ: function () {
        var a = Math.floor(Math.floor((3 + nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ.length) / 4) * (10 + ⵠⵠ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ⵠⲆⲆ: function () {
        this.style.left = Math.floor(ao - 150) + "px";
        this.style.top = Math.floor(no - 115) + "px";
      },
      ᐃⲆⵠⵠᐃ: function () {
        qx.sign.style.display = "none";
        qx.sign.open = false;
      },
      select: function () {
        qx.sign.open = !qx.sign.open;
        if (qx.sign.open) {
          qx.sign.style.display = "inline-block";
        } else {
          qx.sign.style.display = "none";
        }
      },
      ok: function () {
        px.ΔΔΔᐃⲆΔⲆΔⵠ(nx.sign.ΔᐃⲆᐃΔ, qx.sign.ⲆⲆᐃΔⲆⵠᐃ);
        qx.sign.select();
      },
      up: function () {
        qx.sign.ⲆⲆᐃΔⲆⵠᐃ = qx.sign.ⲆⲆᐃΔⲆⵠᐃ === 0 ? 3 : qx.sign.ⲆⲆᐃΔⲆⵠᐃ - 1;
        qx.sign.ᐃⵠᐃⵠᐃᐃⲆ.src = "./img/sign" + qx.sign.ⲆⲆᐃΔⲆⵠᐃ + ".png";
      },
      down: function () {
        qx.sign.ⲆⲆᐃΔⲆⵠᐃ = (qx.sign.ⲆⲆᐃΔⲆⵠᐃ + 1) % 4;
        qx.sign.ᐃⵠᐃⵠᐃᐃⲆ.src = "./img/sign" + qx.sign.ⲆⲆᐃΔⲆⵠᐃ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, Kk);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, zg);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, eo);
    this.ⲆᐃΔⵠⲆ = {
      open: false,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ᐃᐃⵠΔΔ: 1,
        b: 1,
        a: 3,
        ᐃᐃΔⵠΔ: 316
      }, {
        id: 1,
        name: "stone",
        ᐃᐃⵠΔΔ: 1,
        b: 1,
        a: 4,
        ᐃᐃΔⵠΔ: 315
      }, {
        id: 2,
        name: "gold",
        ᐃᐃⵠΔΔ: 1,
        b: 1,
        a: 6,
        ᐃᐃΔⵠΔ: 297
      }, {
        id: 3,
        name: "diamond",
        ᐃᐃⵠΔΔ: 4,
        b: 4,
        a: 1,
        ᐃᐃΔⵠΔ: 298
      }, {
        id: 4,
        name: "amethyst",
        ᐃᐃⵠΔΔ: 8,
        b: 8,
        a: 1,
        ᐃᐃΔⵠΔ: 418
      }, {
        id: 5,
        name: "reidite",
        ᐃᐃⵠΔΔ: 16,
        b: 16,
        a: 1,
        ᐃᐃΔⵠΔ: 938
      }, {
        id: 6,
        name: "pumpkin_seed",
        ᐃᐃⵠΔΔ: 10,
        b: 10,
        a: 1,
        ᐃᐃΔⵠΔ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        ᐃᐃⵠΔΔ: 16,
        b: 16,
        a: 1,
        ᐃᐃΔⵠΔ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        ᐃᐃⵠΔΔ: 20,
        b: 20,
        a: 1,
        ᐃᐃΔⵠΔ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        ᐃᐃⵠΔΔ: 30,
        b: 30,
        a: 1,
        ᐃᐃΔⵠΔ: 845
      }, {
        id: 10,
        name: "garlic_seed",
        ᐃᐃⵠΔΔ: 40,
        b: 40,
        a: 1,
        ᐃᐃΔⵠΔ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        ᐃᐃⵠΔΔ: 60,
        b: 60,
        a: 1,
        ᐃᐃΔⵠΔ: 966
      }],
      button: Bf(60, 60, 0, ⵠⵠ[795]),
      ⵠⲆⲆ: function () {
        this.style.left = Math.floor(ao - 450) + "px";
        this.style.top = Math.floor(no - 270) + "px";
      },
      select: function () {
        qx.ⲆᐃΔⵠⲆ.open = !qx.ⲆᐃΔⵠⲆ.open;
        if (qx.ⲆᐃΔⵠⲆ.open) {
          qx.ⲆᐃΔⵠⲆ.style.display = "inline-block";
        } else {
          qx.ⲆᐃΔⵠⲆ.style.display = "none";
        }
      },
      ᐃⲆⵠⵠᐃ: function () {
        qx.ⲆᐃΔⵠⲆ.style.display = "none";
        qx.ⲆᐃΔⵠⲆ.open = false;
      },
      ΔΔΔᐃⵠⲆⵠ: function () {
        px.ⲆΔⵠᐃⵠΔᐃᐃⲆ(this.ᐃᐃᐃⵠΔΔⵠ);
      },
      ⲆᐃⵠΔⵠ: function () {
        this.id;
        if (this.ᐃᐃᐃⵠΔΔⵠ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ᐃᐃᐃⵠΔΔⵠ.b);
          this.ᐃᐃᐃⵠΔΔⵠ.ᐃᐃⵠΔΔ = a;
          document.getElementById(this.ᐃᐃᐃⵠΔΔⵠ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ᐃᐃᐃⵠΔΔⵠ.a);
          this.ᐃᐃᐃⵠΔΔⵠ.ᐃᐃⵠΔΔ = a;
          document.getElementById(this.ᐃᐃᐃⵠΔΔⵠ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⲆᐃΔⵠⲆ.ᐃⲆⵠⵠᐃ, rr);
    var e = [["mouseup", this.ⲆᐃΔⵠⲆ.ΔΔΔᐃⵠⲆⵠ, "buy_"], ["click", this.ⲆᐃΔⵠⲆ.ⲆᐃⵠΔⵠ, ""], ["change", this.ⲆᐃΔⵠⲆ.ⲆᐃⵠΔⵠ, ""], ["keypress", this.ⲆᐃΔⵠⲆ.keypress, ""]];
    for (var i = 0; this.ⲆᐃΔⵠⲆ.items.length > i; i++) {
      var k = this.ⲆᐃΔⵠⲆ.items[i];
      document.getElementById(k.name + "_market").src = ⵠⵠ[k.ᐃᐃΔⵠΔ][0].Δᐃᐃᐃᐃ === oh ? ⵠⵠ[k.ᐃᐃΔⵠΔ][0].src : ⵠⵠ[k.ᐃᐃΔⵠΔ][0].Δᐃᐃᐃᐃ;
      if (k.a === 1) {
        document.getElementById(k.name + "_trad_number").innerHTML = k.b;
        document.getElementById(k.name + "_number").value = 1;
        document.getElementById(k.name + "_number").step = 1;
        document.getElementById(k.name + "_number").min = 1;
        document.getElementById(k.name + "_number").max = Math.floor(255 / k.b);
      } else {
        document.getElementById(k.name + "_trad_number").innerHTML = 1;
        document.getElementById(k.name + "_number").value = k.a;
        document.getElementById(k.name + "_number").step = k.a;
        document.getElementById(k.name + "_number").min = k.a;
      }
      document.getElementById("buy_" + k.name + "_number").ᐃᐃᐃⵠΔΔⵠ = k;
      document.getElementById(k.name + "_number").ᐃᐃᐃⵠΔΔⵠ = k;
      for (var n = 0; n < e.length; n++) {
        document.getElementById(e[n][2] + k.name + "_number").addEventListener(e[n][0], e[n][1], rr);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ᐃⲆᐃΔΔ: document.getElementById("agree_ing").style,
      ⲆⲆᐃΔⲆᐃᐃ: document.getElementById("cancel_agree_ing").style,
      ΔΔΔⵠⲆᐃᐃ: document.getElementById("quest_agree_ing").style,
      ᐃΔⵠⲆⵠⲆΔ: document.getElementById("spectator_agree_ing").style,
      ⵠⲆⲆᐃⵠΔⲆ: document.getElementById("auto_feed_agree_ing").style,
      Ⲇⵠᐃⵠᐃᐃⵠ: document.getElementById("info_agree_ing").style,
      ⵠᐃⲆⵠⵠⵠⲆ: document.getElementById("pixelated_agree_ing").style,
      button: Bf(60, 60, 0, ⵠⵠ[727]),
      ᐃⵠⵠΔΔⲆΔᐃⵠ: function () {
        qx.options.open = !qx.options.open;
        if (qx.options.open) {
          qx.options.style.display = "inline-block";
        } else {
          qx.options.style.display = "none";
        }
      },
      ΔᐃᐃᐃⲆⵠᐃⵠⲆ: function () {
        lx.ᐃᐃᐃⵠᐃⲆⲆ();
      },
      ⵠⵠΔᐃⵠⲆᐃᐃΔ: function () {
        lx.ⵠΔⵠⵠⲆⵠⵠ();
      },
      high: function () {
        lx.ⲆⵠⲆΔᐃⲆΔᐃΔ();
      },
      low: function () {
        lx.ᐃⲆᐃⲆⵠᐃⵠⵠⲆ();
      },
      ΔᐃⲆΔᐃ: function () {
        qx.ᐃᐃΔᐃ.ΔᐃⲆΔᐃ();
      },
      ᐃᐃΔΔᐃⲆᐃⲆᐃ: function () {
        qx.ⲆⲆᐃⲆΔ.ΔᐃⲆΔᐃ();
      },
      ΔⲆᐃΔⵠⲆΔⵠⵠ: function () {
        qx.ΔΔΔᐃ.ΔᐃⲆΔᐃ();
      },
      ᐃⵠᐃΔᐃΔᐃΔⲆ: function () {
        nx.ᐃⲆΔⵠᐃ.ΔⲆᐃⵠⵠⲆΔ();
      },
      ⲆⵠⵠⲆⵠⲆᐃⲆᐃ: function () {
        nx.ΔⵠⲆΔᐃ.ΔⲆᐃⵠⵠⲆΔ();
      },
      ᐃⲆⵠⵠᐃ: function () {
        qx.options.style.display = "none";
        qx.options.open = Ch;
      },
      ⵠⲆⲆ: function () {
        this.style.left = Math.floor(ao - 235) + "px";
        this.style.top = Math.floor(no - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔᐃᐃᐃⲆⵠᐃⵠⲆ, false);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⵠⵠΔᐃⵠⲆᐃᐃΔ, false);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, Vh);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, tl);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ᐃⲆⵠⵠᐃ, Vh);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ΔᐃⲆΔᐃ, rr);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ΔⲆᐃΔⵠⲆΔⵠⵠ, false);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ᐃᐃΔΔᐃⲆᐃⲆᐃ, rr);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠᐃΔᐃΔᐃΔⲆ, false);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⲆⵠⵠⲆⵠⲆᐃⲆᐃ, Kk);
    this.ⲆⲆᐃⲆΔ = {
      open: mj,
      Ⲇᐃᐃᐃⵠ: ᐃΔⲆⵠ.get("starve_cancel") ? ᐃΔⲆⵠ.get("starve_cancel") === "0" ? 0 : 1 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ᐃⲆᐃΔΔ: document.getElementById("cancel_agree").style,
      button: 0,
      ⲆⲆ: 0,
      ᐃⲆⵠⵠᐃ: function () {
        qx.ⲆⲆᐃⲆΔ.style.display = "none";
        qx.ⲆⲆᐃⲆΔ.open = false;
      },
      ⵠᐃᐃⲆᐃᐃᐃ: function () {
        if (nx.ᐃⵠⲆΔ.ᐃΔΔᐃᐃ) {
          px.ΔΔΔⲆⵠⲆᐃᐃⵠ();
        }
        qx.ⲆⲆᐃⲆΔ.ᐃⲆⵠⵠᐃ();
      },
      ΔᐃⲆΔᐃ: function () {
        if (qx.ⲆⲆᐃⲆΔ.Ⲇᐃᐃᐃⵠ) {
          ᐃΔⲆⵠ.set("starve_cancel", "0");
          qx.ⲆⲆᐃⲆΔ.ᐃⲆᐃΔΔ.display = "inline-block";
          qx.options.ⲆⲆᐃΔⲆᐃᐃ.display = "none";
        } else {
          ᐃΔⲆⵠ.set("starve_cancel", "1");
          qx.ⲆⲆᐃⲆΔ.ᐃⲆᐃΔΔ.display = "none";
          qx.options.ⲆⲆᐃΔⲆᐃᐃ.display = "inline-block";
        }
        qx.ⲆⲆᐃⲆΔ.Ⲇᐃᐃᐃⵠ = !qx.ⲆⲆᐃⲆΔ.Ⲇᐃᐃᐃⵠ;
      },
      ΔⲆⵠⲆᐃⵠⲆ: function () {
        if (this.Ⲇᐃᐃᐃⵠ) {
          this.style.display = "inline-block";
          this.open = Nh;
        } else {
          this.ⵠᐃᐃⲆᐃᐃᐃ();
        }
      },
      ⵠⲆⲆ: function () {
        this.style.left = Math.floor(ao - 235) + "px";
        this.style.top = Math.floor(no - 130) + "px";
      }
    };
    this.ⲆⲆᐃⲆΔ.id.oncontextmenu = function () {
      return false;
    };
    this.ⲆⲆᐃⲆΔ.ᐃⲆᐃΔΔ.display = "none";
    if (this.ⲆⲆᐃⲆΔ.Ⲇᐃᐃᐃⵠ) {
      this.options.ⲆⲆᐃΔⲆᐃᐃ.display = "inline-block";
    } else {
      this.options.ⲆⲆᐃΔⲆᐃᐃ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ⲆⲆᐃⲆΔ.ⵠᐃᐃⲆᐃᐃᐃ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ⲆⲆᐃⲆΔ.ᐃⲆⵠⵠᐃ, false);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ⲆⲆᐃⲆΔ.ΔᐃⲆΔᐃ, Kk);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, ja);
    this.ᐃᐃⲆⵠᐃⲆΔ = {
      Ⲇᐃᐃᐃⵠ: ᐃΔⲆⵠ.get("starve_aliasing") && ᐃΔⲆⵠ.get("starve_aliasing") === "0" ? 0 : 1,
      ⵠⲆⲆⵠⵠᐃΔ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ΔᐃⲆΔᐃ: function () {
        if (qx.ᐃᐃⲆⵠᐃⲆΔ.Ⲇᐃᐃᐃⵠ === 0) {
          ᐃΔⲆⵠ.set("starve_aliasing", "1");
          qx.ᐃᐃⲆⵠᐃⲆΔ.ⵠⲆⲆⵠⵠᐃΔ(1);
          qx.options.ⵠᐃⲆⵠⵠⵠⲆ.display = "inline-block";
        } else {
          ᐃΔⲆⵠ.set("starve_aliasing", "0");
          qx.ᐃᐃⲆⵠᐃⲆΔ.ⵠⲆⲆⵠⵠᐃΔ(0);
          qx.options.ⵠᐃⲆⵠⵠⵠⲆ.display = "none";
        }
        qx.ᐃᐃⲆⵠᐃⲆΔ.Ⲇᐃᐃᐃⵠ = (qx.ᐃᐃⲆⵠᐃⲆΔ.Ⲇᐃᐃᐃⵠ + 1) % 2;
      }
    };
    if (this.ᐃᐃⲆⵠᐃⲆΔ.Ⲇᐃᐃᐃⵠ === 1) {
      this.options.ⵠᐃⲆⵠⵠⵠⲆ.display = "inline-block";
    } else {
      this.ᐃᐃⲆⵠᐃⲆΔ.ⵠⲆⲆⵠⵠᐃΔ(0);
      this.options.ⵠᐃⲆⵠⵠⵠⲆ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ᐃᐃⲆⵠᐃⲆΔ.ΔᐃⲆΔᐃ, Kj);
    this.ⲆΔΔΔᐃ = {
      Ⲇᐃᐃᐃⵠ: ᐃΔⲆⵠ.get("starve_info_box") && ᐃΔⲆⵠ.get("starve_info_box") === "0" ? 0 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ᐃⵠⲆΔ: 0,
      ΔᐃⲆΔᐃ: function () {
        if (qx.ⲆΔΔΔᐃ.Ⲇᐃᐃᐃⵠ === 0) {
          ᐃΔⲆⵠ.set("starve_info_box", "1");
          qx.options.Ⲇⵠᐃⵠᐃᐃⵠ.display = "inline-block";
        } else {
          ᐃΔⲆⵠ.set("starve_info_box", "0");
          qx.options.Ⲇⵠᐃⵠᐃᐃⵠ.display = "none";
        }
        qx.ⲆΔΔΔᐃ.Ⲇᐃᐃᐃⵠ = (qx.ⲆΔΔΔᐃ.Ⲇᐃᐃᐃⵠ + 1) % 2;
      },
      ⵠⲆⵠᐃ: function (a, b, c) {
        if (a && this.Ⲇᐃᐃᐃⵠ) {
          this.display = 1;
          this.id = c === 0 ? b.id : at[b.id].Ⲇᐃᐃⵠ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ᐃⵠⲆΔ = c;
        }
        return a;
      }
    };
    if (this.ⲆΔΔΔᐃ.Ⲇᐃᐃᐃⵠ === 1) {
      this.options.Ⲇⵠᐃⵠᐃᐃⵠ.display = "inline-block";
    } else {
      this.options.Ⲇⵠᐃⵠᐃᐃⵠ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⲆΔΔΔᐃ.ΔᐃⲆΔᐃ, false);
    if (ᐃΔⲆⵠ.get("starve_scale")) {
      cq = Number(ᐃΔⲆⵠ.get("starve_scale"));
      document.getElementById("input_ratio").value = cq;
      cq *= Iq / Kq;
      Mq();
    }
    this.ⲆΔⵠᐃⲆΔᐃ = function () {
      ᐃΔⲆⵠ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      cq = Iq / Kq * document.getElementById("input_ratio").value;
      Mq();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ⲆΔⵠᐃⲆΔᐃ, false);
    this.ᐃᐃΔᐃ = {
      open: false,
      Ⲇᐃᐃᐃⵠ: ᐃΔⲆⵠ.get("starve_safe") && ᐃΔⲆⵠ.get("starve_safe") === "0" ? 0 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ᐃⲆᐃΔΔ: document.getElementById("agree").style,
      button: 0,
      ⲆⲆ: 0,
      ᐃⲆⵠⵠᐃ: function () {
        qx.ᐃᐃΔᐃ.style.display = "none";
        qx.ᐃᐃΔᐃ.open = false;
      },
      all: function () {
        if (!nx.ⲆΔᐃⵠᐃ.wait) {
          if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && nx.ᐃⵠⲆΔ.id < 0 && !nx.ⲆⵠΔΔⵠ.enabled) {
            px.ᐃΔΔΔᐃᐃᐃΔᐃ(qx.ᐃᐃΔᐃ.button);
          }
          qx.ᐃᐃΔᐃ.ᐃⲆⵠⵠᐃ();
        }
      },
      ΔᐃⲆⲆ: function () {
        if (nx.ᐃⵠⲆΔ.ⵠⵠⵠⵠⲆ && !nx.ⲆΔᐃⵠᐃ.wait) {
          if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && nx.ᐃⵠⲆΔ.id < 0 && !nx.ⲆⵠΔΔⵠ.enabled) {
            px.ᐃᐃⲆΔᐃⲆΔⲆᐃ(qx.ᐃᐃΔᐃ.button);
          }
          qx.ᐃᐃΔᐃ.ᐃⲆⵠⵠᐃ();
        }
      },
      ΔⵠᐃᐃⲆΔⵠᐃᐃ: function () {
        if (!nx.ⲆΔᐃⵠᐃ.wait) {
          if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && nx.ᐃⵠⲆΔ.id < 0 && !nx.ⲆⵠΔΔⵠ.enabled) {
            px.ΔⵠⵠΔⵠᐃⵠⵠⵠ(qx.ᐃᐃΔᐃ.button);
          }
          qx.ᐃᐃΔᐃ.ᐃⲆⵠⵠᐃ();
        }
      },
      ΔᐃⲆΔᐃ: function () {
        if (qx.ᐃᐃΔᐃ.Ⲇᐃᐃᐃⵠ) {
          ᐃΔⲆⵠ.set("starve_safe", "0");
          qx.ᐃᐃΔᐃ.ᐃⲆᐃΔΔ.display = "inline-block";
          qx.options.ᐃⲆᐃΔΔ.display = "none";
        } else {
          ᐃΔⲆⵠ.set("starve_safe", "1");
          qx.ᐃᐃΔᐃ.ᐃⲆᐃΔΔ.display = "none";
          qx.options.ᐃⲆᐃΔΔ.display = "inline-block";
        }
        qx.ᐃᐃΔᐃ.Ⲇᐃᐃᐃⵠ = !qx.ᐃᐃΔᐃ.Ⲇᐃᐃᐃⵠ;
      },
      ΔⲆⵠⲆᐃⵠⲆ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ⵠⵠ[Jr[a].ΔΔ][0].Δᐃᐃᐃᐃ === sr ? ⵠⵠ[Jr[a].ΔΔ][0].src : ⵠⵠ[Jr[a].ΔΔ][0].Δᐃᐃᐃᐃ;
        if (Jr[a].ΔᐃⲆⲆ && !nx.ⲆⵠⲆⵠⲆ && nx.ᐃⵠⲆΔ.ⵠⵠⵠⵠⲆ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.Ⲇᐃᐃᐃⵠ) {
          this.style.display = "inline-block";
          this.open = P;
        } else {
          this.all();
        }
      },
      ⵠⲆⲆ: function () {
        this.style.left = Math.floor(ao - 235) + "px";
        this.style.top = Math.floor(no - 175) + "px";
      }
    };
    this.ᐃᐃΔᐃ.ᐃⲆᐃΔΔ.display = "none";
    if (this.ᐃᐃΔᐃ.Ⲇᐃᐃᐃⵠ) {
      this.options.ᐃⲆᐃΔΔ.display = "inline-block";
    } else {
      this.options.ᐃⲆᐃΔΔ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ᐃᐃΔᐃ.ΔⵠᐃᐃⲆΔⵠᐃᐃ, pk);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ᐃᐃΔᐃ.all, ks);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ᐃᐃΔᐃ.ΔᐃⲆⲆ, Kj);
    document.getElementById("no_delete").addEventListener("mouseup", this.ᐃᐃΔᐃ.ᐃⲆⵠⵠᐃ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ᐃᐃΔᐃ.ΔᐃⲆΔᐃ, false);
    this.ᐃⲆΔᐃⵠ = {
      open: Ch,
      ⲆⵠⲆⵠᐃ: -1,
      button: Bf(60, 60, 0, ⵠⵠ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ⵠⲆⲆ: function () {
        this.style.left = Math.floor(ao - 300) + "px";
        this.style.top = Math.floor(no - 215) + "px";
      },
      ᐃⲆⵠⵠᐃ: function () {
        qx.ᐃⲆΔᐃⵠ.open = eo;
        qx.ᐃⲆΔᐃⵠ.style.display = "none";
      },
      select: function () {
        qx.ᐃⲆΔᐃⵠ.open = !qx.ᐃⲆΔᐃⵠ.open;
        if (qx.ᐃⲆΔᐃⵠ.open) {
          qx.ᐃⲆΔᐃⵠ.style.display = "inline-block";
        } else {
          qx.ᐃⲆΔᐃⵠ.style.display = "none";
        }
      },
      ΔΔΔᐃⵠⲆⵠ: function () {
        if (qx.ᐃⲆΔᐃⵠ.ⲆⵠⲆⵠᐃ >= 0) {
          px.ⵠΔⲆⲆⲆⵠⲆᐃΔ(qx.ᐃⲆΔᐃⵠ.ⲆⵠⲆⵠᐃ);
          qx.ᐃⲆΔᐃⵠ.ᐃⲆⵠⵠᐃ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + qx.ᐃⲆΔᐃⵠ.ⲆⵠⲆⵠᐃ);
          }
        }
      },
      ⲆΔⲆⲆⵠ: function () {
        var a = nx.ᐃⲆΔᐃⵠ.value;
        document.getElementById("points_bank").innerHTML = ⵠᐃⵠ.ᐃΔΔΔⲆⲆΔ(a) + " points";
        for (var b = 0; b < Gf.length; b++) {
          if (Gf[b].ⵠᐃⵠⲆΔ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = 1; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ᐃⲆⲆⵠⲆᐃᐃᐃΔ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = Gf[a - 1];
        if (nx.ᐃⲆΔᐃⵠ.value >= b.ⵠᐃⵠⲆΔ) {
          qx.ᐃⲆΔᐃⵠ.ⲆⵠⲆⵠᐃ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          qx.ᐃⲆΔᐃⵠ.ⲆⵠⲆⵠᐃ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - 1][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ⵠⵠ[Jr[b[c - 1][1]].ΔΔ][0].Δᐃᐃᐃᐃ === undefined ? ⵠⵠ[Jr[b[c - 1][1]].ΔΔ][0].src : ⵠⵠ[Jr[b[c - 1][1]].ΔΔ][0].Δᐃᐃᐃᐃ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ᐃⲆΔᐃⵠ.ᐃⲆⵠⵠᐃ, Vg);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ᐃⲆΔᐃⵠ.ΔΔΔᐃⵠⲆⵠ, Vh);
    for (n = 1; n < 11; n++) {
      document.getElementById("starter" + n).addEventListener("mouseup", this.ᐃⲆΔᐃⵠ.ᐃⲆⲆⵠⲆᐃᐃᐃΔ, ja);
    }
    this.ΔΔΔᐃ = {
      open: tl,
      Ⲇᐃᐃᐃⵠ: ᐃΔⲆⵠ.get("starve_quests") && ᐃΔⲆⵠ.get("starve_quests") === "1" ? 1 : 0,
      button: Bf(60, 60, 0, ⵠⵠ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ⵠⲆⲆ: function () {
        this.style.left = Math.floor(ao - 420) + "px";
        this.style.top = Math.floor(no - 270) + "px";
      },
      ᐃⲆⵠⵠᐃ: function () {
        qx.ΔΔΔᐃ.style.display = "none";
        qx.ΔΔΔᐃ.open = Kk;
      },
      select: function () {
        qx.ΔΔΔᐃ.open = !qx.ΔΔΔᐃ.open;
        if (qx.ΔΔΔᐃ.open) {
          qx.ΔΔΔᐃ.style.display = "inline-block";
        } else {
          qx.ΔΔΔᐃ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < Uf.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ⵠⲆΔⵠⲆᐃⲆ: 0,
      ⵠⵠⵠᐃᐃⲆᐃ: 0,
      ⲆΔⵠⲆⲆⵠⵠΔⵠ: function () {
        if (qx.ΔΔΔᐃ.open) {
          var a = new Date().getTime();
          if (a - this.ⵠⲆΔⵠⲆᐃⲆ >= 1000) {
            this.ⵠⲆΔⵠⲆᐃⲆ = a;
            for (var b = 0; b < Uf.length; b++) {
              if (qx.ΔΔΔᐃ.list[b]) {
                var c = Uf[b].time - (a - mx.ᐃⲆΔⲆΔ.ⲆΔⲆⲆⵠ + qx.ΔΔΔᐃ.ⵠⵠⵠᐃᐃⲆᐃ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            qx.ΔΔΔᐃ.ΔᐃⲆΔᐃΔᐃ(b, a[b]);
          }
        }
      },
      ΔᐃⲆΔᐃΔᐃ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          nx.ΔⲆⵠⵠ.ΔΔⵠⲆⲆᐃⵠ(0, 1);
          qx.ᐃⵠᐃⲆΔΔⲆ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        qx.ΔΔΔᐃ.list[a] = 0;
      },
      modify: function (a, b) {
        qx.ΔΔΔᐃ.ΔᐃⲆΔᐃΔᐃ(a, b);
        if (qx.ΔΔΔᐃ.Ⲇᐃᐃᐃⵠ) {
          qx.ΔΔΔᐃ.open = ma;
          qx.ΔΔΔᐃ.style.display = "inline-block";
        }
      },
      ΔᐃⲆΔᐃ: function () {
        if (qx.ΔΔΔᐃ.Ⲇᐃᐃᐃⵠ) {
          ᐃΔⲆⵠ.set("starve_quests", "0");
          qx.options.ΔΔΔⵠⲆᐃᐃ.display = "none";
        } else {
          ᐃΔⲆⵠ.set("starve_quests", "1");
          qx.options.ΔΔΔⵠⲆᐃᐃ.display = "inline-block";
        }
        qx.ΔΔΔᐃ.Ⲇᐃᐃᐃⵠ = !qx.ΔΔΔᐃ.Ⲇᐃᐃᐃⵠ;
      },
      ⵠᐃᐃⲆᐃᐃⵠⵠᐃ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * 10 + b;
        }
        px.ᐃᐃᐃᐃⵠⲆⲆⵠΔ(a);
      }
    };
    if (this.ΔΔΔᐃ.Ⲇᐃᐃᐃⵠ) {
      this.options.ΔΔΔⵠⲆᐃᐃ.display = "inline-block";
    } else {
      this.options.ΔΔΔⵠⲆᐃᐃ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ΔΔΔᐃ.ᐃⲆⵠⵠᐃ, y);
    for (n = 0; n < Uf.length; n++) {
      document.getElementById("claim_reward_" + n).addEventListener("mouseup", this.ΔΔΔᐃ.ⵠᐃᐃⲆᐃᐃⵠⵠᐃ, Kj);
    }
    this.ᐃⲆᐃΔ = {
      open: Sr,
      button: Bf(60, 60, 0, ⵠⵠ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ΔΔΔⲆⵠᐃᐃ: [],
        ΔᐃᐃΔⲆᐃᐃ: 0,
        ⵠⲆⲆ: function () {
          this.style.left = Math.floor(ao - 335) + "px";
          this.style.top = Math.floor(no - 215) + "px";
        },
        ᐃⲆⵠⵠᐃ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          qx.ᐃⲆᐃΔ.open = false;
        },
        ΔΔΔⵠⲆⵠΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ΔⵠᐃΔ: function (a) {
          if ((b = this.ΔΔΔⲆⵠᐃᐃ[a]).ᐃᐃᐃ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ⵠⵠ[Jr[b[a][0]].ΔΔ][0].Δᐃᐃᐃᐃ === undefined ? ⵠⵠ[Jr[b[a][0]].ΔΔ][0].src : ⵠⵠ[Jr[b[a][0]].ΔΔ][0].Δᐃᐃᐃᐃ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ΔᐃᐃΔⲆᐃᐃ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < at.length; b++) {
            var d = at[b];
            if (a === d.Ⲇᐃᐃ) {
              this.ΔΔΔⲆⵠᐃᐃ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ⵠⵠ[Jr[d.Ⲇᐃᐃⵠ].ΔΔ][0].Δᐃᐃᐃᐃ === nr ? ⵠⵠ[Jr[d.Ⲇᐃᐃⵠ].ΔΔ][0].src : ⵠⵠ[Jr[d.Ⲇᐃᐃⵠ].ΔΔ][0].Δᐃᐃᐃᐃ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ⵠⵠⲆΔΔⵠᐃ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ⵠⲆⲆ: function () {
          this.style.left = Math.floor(ao - 285) + "px";
          this.style.top = Math.floor(no - 170) + "px";
        },
        ᐃⲆⵠⵠᐃ: function () {
          document.getElementById("home_craft").style.display = "none";
          qx.ᐃⲆᐃΔ.open = false;
        }
      },
      ⲆᐃⵠⵠⲆΔⵠᐃΔ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ᐃⲆᐃΔ.ⵠⵠⲆΔΔⵠᐃ.ᐃⲆⵠⵠᐃ, zg);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ᐃⲆᐃΔ.list.ᐃⲆⵠⵠᐃ, false);
    document.getElementById("backhome").addEventListener("mouseup", this.ᐃⲆᐃΔ.list.ΔΔΔⵠⲆⵠΔ, eo);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      qx.ᐃⲆᐃΔ.list.select(2);
    }, yl);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      qx.ᐃⲆᐃΔ.list.select(1);
    }, false);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      qx.ᐃⲆᐃΔ.list.select(0);
    }, false);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      qx.ᐃⲆᐃΔ.list.select(3);
    }, Ch);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      qx.ᐃⲆᐃΔ.list.select(4);
    }, y);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      qx.ᐃⲆᐃΔ.list.select(5);
    }, yl);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(0);
    }, Sr);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(1);
    }, Kk);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(3);
    }, false);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(4);
    }, Kj);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(5);
    }, false);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(6);
    }, y);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(7);
    }, false);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(8);
    }, false);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(9);
    }, false);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(10);
    }, false);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(11);
    }, y);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(13);
    }, false);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(14);
    }, false);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(15);
    }, pk);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(16);
    }, Sr);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(17);
    }, rr);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(18);
    }, Vh);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(19);
    }, xa);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(20);
    }, ks);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(21);
    }, rr);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(22);
    }, No);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(23);
    }, pk);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(24);
    }, Kj);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(25);
    }, Vh);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(26);
    }, Kk);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(27);
    }, false);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(28);
    }, zg);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(29);
    }, Uq);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(30);
    }, Vh);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(31);
    }, false);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(32);
    }, y);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(33);
    }, false);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(34);
    }, false);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(37);
    }, Sr);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(38);
    }, ks);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(39);
    }, Kj);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(40);
    }, rr);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(41);
    }, Sl);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(42);
    }, false);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(43);
    }, false);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(45);
    }, y);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(46);
    }, mj);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      qx.ᐃⲆᐃΔ.list.ΔⵠᐃΔ(47);
    }, tl);
    this.ⵠⲆΔⵠᐃ = {
      translate: {
        x: 0,
        y: 0
      },
      ⲆⲆⵠΔⵠ: {
        x: -1,
        y: -1
      },
      ᐃᐃΔΔ: [],
      focus: function (a) {
        var b = this.translate.y + (nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ⲆⲆⵠΔⵠ.x = a.x - this.translate.x;
          this.ⲆⲆⵠΔⵠ.y = a.y - b;
        }
      }
    };
    this.ΔᐃΔⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      ΔΔ: ⵠⵠ[278],
      ⵠⲆ: document.createElement("canvas")
    };
    this.ΔᐃΔⲆ.ⵠⲆ.width = this.ΔᐃΔⲆ.ΔΔ.width;
    this.ΔᐃΔⲆ.ⵠⲆ.height = this.ΔᐃΔⲆ.ΔΔ.height;
    this.ΔᐃΔⲆ.Ⲇ = this.ΔᐃΔⲆ.ⵠⲆ.getContext("2d");
    this.ΔⲆᐃΔ = {
      translate: {
        x: 0,
        y: 0
      },
      ΔΔ: ⵠⵠ[267],
      ΔⵠᐃⲆ: av,
      y: 0
    };
    var o = rg.document.createElement("div");
    this.ᐃⵠᐃⲆΔᐃᐃ = function () {
      ⲆΔΔΔΔ = document.getElementById("team_box");
      ⲆΔΔΔΔ.innerHTML = "";
      ⲆΔΔΔΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((o.innerText = mx.ᐃᐃΔΔ[nx.ΔⲆⲆⵠᐃ[0]].ΔΔΔᐃᐃ) && o.innerHTML) + "</div";
      for (var a = 1; nx.ΔⲆⲆⵠᐃ.length > a; a++) {
        ⲆΔΔΔΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((o.innerText = mx.ᐃᐃΔΔ[nx.ΔⲆⲆⵠᐃ[a]].ΔΔΔᐃᐃ) && o.innerHTML) + "</div></div>";
      }
      ⲆΔΔΔΔ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ⲆΔΔΔΔ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", px.ᐃⵠᐃⲆΔᐃᐃ, false);
    };
    this.ᐃⲆⲆᐃᐃΔⲆᐃᐃ = function () {
      ⲆΔΔΔΔ = document.getElementById("team_box");
      ⲆΔΔΔΔ.innerHTML = "";
      ⲆΔΔΔΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((o.innerText = mx.ᐃᐃΔΔ[nx.ΔⲆⲆⵠᐃ[0]].ΔΔΔᐃᐃ) && o.innerHTML) + "</div";
      for (var a = 1; a < nx.ΔⲆⲆⵠᐃ.length; a++) {
        ⲆΔΔΔΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((o.innerText = mx.ᐃᐃΔΔ[nx.ΔⲆⲆⵠᐃ[a]].ΔΔΔᐃᐃ) && o.innerHTML) + "</div></div>";
      }
      ⲆΔΔΔΔ.innerHTML += "</div>";
      ⲆΔΔΔΔ.style.display = "inline-block";
    };
    this.ⵠΔⲆΔΔⲆⲆΔⵠ = function () {
      ⲆΔΔΔΔ = document.getElementById("team_box");
      ⲆΔΔΔΔ.innerHTML = "";
      ⲆΔΔΔΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((o.innerText = mx.ᐃᐃΔΔ[nx.ΔⲆⲆⵠᐃ[0]].ΔΔΔᐃᐃ) && o.innerHTML) + "</div";
      for (var a = 1; a < nx.ΔⲆⲆⵠᐃ.length; a++) {
        ⲆΔΔΔΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((o.innerText = mx.ᐃᐃΔΔ[nx.ΔⲆⲆⵠᐃ[a]].ΔΔΔᐃᐃ) && o.innerHTML) + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (nx.ⲆⲆⵠⵠⵠ.lock === 0) {
        ⲆΔΔΔΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ⲆΔΔΔΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", px.ⲆᐃⲆᐃⲆΔⵠⵠⵠ, false);
      ⲆΔΔΔΔ.style.display = "inline-block";
      for (a = 1; a < nx.ΔⲆⲆⵠᐃ.length; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              px.ⵠⲆⲆⵠⲆⲆᐃ(1);
            }, false);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              px.ⵠⲆⲆⵠⲆⲆᐃ(2);
            }, Kk);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              px.ⵠⲆⲆⵠⲆⲆᐃ(3);
            }, false);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              px.ⵠⲆⲆⵠⲆⲆᐃ(4);
            }, mj);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              px.ⵠⲆⲆⵠⲆⲆᐃ(5);
            }, xa);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              px.ⵠⲆⲆⵠⲆⲆᐃ(6);
            }, false);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              px.ⵠⲆⲆⵠⲆⲆᐃ(7);
            }, y);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              px.ⵠⲆⲆⵠⲆⲆᐃ(8);
            }, Kj);
        }
      }
    };
    this.ΔΔⲆΔⲆ = [];
    this.ΔΔⲆΔⲆ[2] = {
      button: Bf(60, 60, 0, ⵠⵠ[556]),
      action: this.ᐃⵠᐃⲆΔᐃᐃ
    };
    this.ΔΔⲆΔⲆ[3] = {
      button: Bf(60, 60, 0, ⵠⵠ[556]),
      action: px.ΔⲆⵠⲆᐃⵠΔᐃᐃ
    };
    this.ΔΔⲆΔⲆ[0] = {
      button: Bf(60, 60, 0, ⵠⵠ[557]),
      action: this.ⵠΔⲆΔΔⲆⲆΔⵠ
    };
    this.ΔΔⲆΔⲆ[1] = {
      button: Bf(60, 60, 0, ⵠⵠ[561]),
      action: this.ᐃⲆⲆᐃᐃΔⲆᐃᐃ
    };
    this.ΔΔⲆΔⲆ[4] = {
      button: Bf(60, 60, 0, ⵠⵠ[560]),
      action: function () { }
    };
    this.ΔΔⲆΔΔ = -1;
    this.ᐃⲆᐃⵠⲆⲆⵠ = Bf(60, 60, 0, ⵠⵠ[723]);
    this.ᐃⲆⲆΔⵠⲆⲆ = Bf(60, 60, 0, ⵠⵠ[724]);
    this.ΔᐃⵠᐃⲆᐃⵠ = Bf(60, 60, 0, ⵠⵠ[658]);
    this.ΔⲆⲆΔᐃᐃᐃ = Bf(60, 60, 0, ⵠⵠ[657]);
    this.ᐃᐃᐃΔᐃⵠᐃ = Bf(60, 60, 0, ⵠⵠ[658]);
    this.ᐃᐃᐃΔⵠⲆΔ = Bf(60, 60, 0, ⵠⵠ[316]);
    this.ᐃᐃᐃⲆⲆⵠⲆ = Bf(60, 60, 0, ⵠⵠ[315]);
    this.ⵠⵠⵠⵠⲆⵠΔ = Bf(60, 60, 0, ⵠⵠ[297]);
    this.ⵠⵠᐃΔΔⲆᐃ = Bf(60, 60, 0, ⵠⵠ[298]);
    this.ΔⵠᐃΔⵠᐃᐃ = Bf(60, 60, 0, ⵠⵠ[418]);
    this.ⲆⵠⲆΔⲆⲆⵠ = Bf(60, 60, 0, ⵠⵠ[938]);
    this.ⵠᐃⲆᐃⵠⵠᐃ = Bf(60, 60, 0, ⵠⵠ[412]);
    this.ᐃⲆᐃⵠⵠⲆΔ = Bf(60, 60, 0, ⵠⵠ[536]);
    this.ⲆⲆᐃΔⲆⲆⲆ = Bf(60, 60, 0, ⵠⵠ[535]);
    this.ⵠΔΔⵠⵠⵠⵠ = Bf(60, 60, 0, ⵠⵠ[538]);
    this.ⵠᐃᐃⵠⵠ = Bf(120, 120, 0, ⵠⵠ[149]);
    this.ⵠᐃᐃⵠⵠ.info.translate.x = 10;
    this.ⵠᐃᐃⵠⵠ.info.translate.y = 10;
    this.ⵠⲆΔ = [];
    this.ⵠⲆΔ[0] = Bf(68, 68, 0, ⵠⵠ[340], 3);
    this.ⵠⲆΔ[0].id = 0;
    this.ⵠⲆΔ[1] = Bf(68, 68, 0, ⵠⵠ[341], 3);
    this.ⵠⲆΔ[1].id = 1;
    this.ⵠⲆΔ[108] = Bf(68, 68, 0, ⵠⵠ[342], 3);
    this.ⵠⲆΔ[108].id = 108;
    this.ⵠⲆΔ[109] = Bf(68, 68, 0, ⵠⵠ[343], 3);
    this.ⵠⲆΔ[109].id = 109;
    this.ⵠⲆΔ[110] = Bf(68, 68, 0, ⵠⵠ[269], 3);
    this.ⵠⲆΔ[110].id = 110;
    this.ⵠⲆΔ[233] = Bf(68, 68, 0, ⵠⵠ[1155], 3);
    this.ⵠⲆΔ[233].id = 233;
    this.ⵠⲆΔ[111] = Bf(68, 68, 0, ⵠⵠ[270], 3);
    this.ⵠⲆΔ[111].id = 111;
    this.ⵠⲆΔ[112] = Bf(68, 68, 0, ⵠⵠ[271], 3);
    this.ⵠⲆΔ[112].id = 112;
    this.ⵠⲆΔ[3] = Bf(68, 68, 0, ⵠⵠ[272], 3);
    this.ⵠⲆΔ[3].id = 3;
    this.ⵠⲆΔ[4] = Bf(68, 68, 0, ⵠⵠ[344], 3);
    this.ⵠⲆΔ[4].id = 4;
    this.ⵠⲆΔ[5] = Bf(68, 68, 0, ⵠⵠ[345], 3);
    this.ⵠⲆΔ[5].id = 5;
    this.ⵠⲆΔ[57] = Bf(68, 68, 0, ⵠⵠ[831], 3);
    this.ⵠⲆΔ[57].id = 57;
    this.ⵠⲆΔ[6] = Bf(68, 68, 0, ⵠⵠ[346], 3);
    this.ⵠⲆΔ[6].id = 6;
    this.ⵠⲆΔ[113] = Bf(68, 68, 0, ⵠⵠ[273], 3);
    this.ⵠⲆΔ[113].id = 113;
    this.ⵠⲆΔ[114] = Bf(68, 68, 0, ⵠⵠ[358], 3);
    this.ⵠⲆΔ[114].id = 114;
    this.ⵠⲆΔ[115] = Bf(68, 68, 0, ⵠⵠ[348], 3);
    this.ⵠⲆΔ[115].id = 115;
    this.ⵠⲆΔ[162] = Bf(68, 68, 0, ⵠⵠ[349], 3);
    this.ⵠⲆΔ[162].id = 162;
    this.ⵠⲆΔ[160] = Bf(68, 68, 0, ⵠⵠ[350], 3);
    this.ⵠⲆΔ[160].id = 160;
    this.ⵠⲆΔ[8] = Bf(68, 68, 0, ⵠⵠ[274], 3);
    this.ⵠⲆΔ[8].id = 8;
    this.ⵠⲆΔ[117] = Bf(68, 68, 0, ⵠⵠ[351], 3);
    this.ⵠⲆΔ[117].id = 117;
    this.ⵠⲆΔ[116] = Bf(68, 68, 0, ⵠⵠ[275], 3);
    this.ⵠⲆΔ[116].id = 116;
    this.ⵠⲆΔ[118] = Bf(68, 68, 0, ⵠⵠ[276], 3);
    this.ⵠⲆΔ[118].id = 118;
    this.ⵠⲆΔ[195] = Bf(68, 68, 0, ⵠⵠ[352], 3);
    this.ⵠⲆΔ[195].id = 195;
    this.ⵠⲆΔ[161] = Bf(68, 68, 0, ⵠⵠ[353], 3);
    this.ⵠⲆΔ[161].id = 161;
    this.ⵠⲆΔ[163] = Bf(68, 68, 0, ⵠⵠ[354], 3);
    this.ⵠⲆΔ[163].id = 163;
    this.ⵠⲆΔ[164] = Bf(68, 68, 0, ⵠⵠ[355], 3);
    this.ⵠⲆΔ[164].id = 164;
    this.ⵠⲆΔ[165] = Bf(68, 68, 0, ⵠⵠ[356], 3);
    this.ⵠⲆΔ[165].id = 165;
    this.ⵠⲆΔ[166] = Bf(68, 68, 0, ⵠⵠ[357], 3);
    this.ⵠⲆΔ[166].id = 166;
    this.ⵠⲆΔ[167] = Bf(68, 68, 0, ⵠⵠ[359], 3);
    this.ⵠⲆΔ[167].id = 167;
    this.ⵠⲆΔ[168] = Bf(68, 68, 0, ⵠⵠ[382], 3);
    this.ⵠⲆΔ[168].id = 168;
    this.ⵠⲆΔ[169] = Bf(68, 68, 0, ⵠⵠ[383], 3);
    this.ⵠⲆΔ[169].id = 169;
    this.ⵠⲆΔ[170] = Bf(68, 68, 0, ⵠⵠ[384], 3);
    this.ⵠⲆΔ[170].id = 170;
    this.ⵠⲆΔ[2] = Bf(68, 68, 0, ⵠⵠ[386], 3);
    this.ⵠⲆΔ[2].id = 2;
    this.ⵠⲆΔ[237] = Bf(68, 68, 0, ⵠⵠ[1163], 3);
    this.ⵠⲆΔ[237].id = 237;
    this.ⵠⲆΔ[174] = Bf(68, 68, 0, ⵠⵠ[394], 3);
    this.ⵠⲆΔ[174].id = 174;
    this.ⵠⲆΔ[222] = Bf(68, 68, 0, ⵠⵠ[1036], 3);
    this.ⵠⲆΔ[222].id = 222;
    this.ⵠⲆΔ[231] = Bf(68, 68, 0, ⵠⵠ[1038], 3);
    this.ⵠⲆΔ[231].id = 231;
    this.ⵠⲆΔ[232] = Bf(68, 68, 0, ⵠⵠ[1040], 3);
    this.ⵠⲆΔ[232].id = 232;
    this.ⵠⲆΔ[234] = Bf(68, 68, 0, ⵠⵠ[1157], 3);
    this.ⵠⲆΔ[234].id = 234;
    this.ⵠⲆΔ[10] = Bf(68, 68, 0, ⵠⵠ[387], 3);
    this.ⵠⲆΔ[10].id = 10;
    this.ⵠⲆΔ[171] = Bf(68, 68, 0, ⵠⵠ[388], 3);
    this.ⵠⲆΔ[171].id = 171;
    this.ⵠⲆΔ[172] = Bf(68, 68, 0, ⵠⵠ[389], 3);
    this.ⵠⲆΔ[172].id = 172;
    this.ⵠⲆΔ[173] = Bf(68, 68, 0, ⵠⵠ[390], 3);
    this.ⵠⲆΔ[173].id = 173;
    this.ⵠⲆΔ[11] = Bf(68, 68, 0, ⵠⵠ[391], 3);
    this.ⵠⲆΔ[11].id = 11;
    this.ⵠⲆΔ[12] = Bf(68, 68, 0, ⵠⵠ[403], 3);
    this.ⵠⲆΔ[12].id = 12;
    this.ⵠⲆΔ[13] = Bf(68, 68, 0, ⵠⵠ[397], 3);
    this.ⵠⲆΔ[13].id = 13;
    this.ⵠⲆΔ[14] = Bf(68, 68, 0, ⵠⵠ[400], 3);
    this.ⵠⲆΔ[14].id = 14;
    this.ⵠⲆΔ[15] = Bf(68, 68, 0, ⵠⵠ[406], 3);
    this.ⵠⲆΔ[15].id = 15;
    this.ⵠⲆΔ[16] = Bf(68, 68, 0, ⵠⵠ[875], 3);
    this.ⵠⲆΔ[16].id = 16;
    this.ⵠⲆΔ[119] = Bf(68, 68, 0, ⵠⵠ[410], 3);
    this.ⵠⲆΔ[119].id = 119;
    this.ⵠⲆΔ[23] = Bf(68, 68, 0, ⵠⵠ[422], 3);
    this.ⵠⲆΔ[23].id = 23;
    this.ⵠⲆΔ[24] = Bf(68, 68, 0, ⵠⵠ[425], 3);
    this.ⵠⲆΔ[24].id = 24;
    this.ⵠⲆΔ[87] = Bf(68, 68, 0, ⵠⵠ[1229], 3);
    this.ⵠⲆΔ[87].id = 87;
    this.ⵠⲆΔ[88] = Bf(68, 68, 0, ⵠⵠ[1232], 3);
    this.ⵠⲆΔ[88].id = 88;
    this.ⵠⲆΔ[80] = Bf(68, 68, 0, ⵠⵠ[1139], 3);
    this.ⵠⲆΔ[80].id = 80;
    this.ⵠⲆΔ[81] = Bf(68, 68, 0, ⵠⵠ[1142], 3);
    this.ⵠⲆΔ[81].id = 81;
    this.ⵠⲆΔ[101] = Bf(68, 68, 0, ⵠⵠ[1167], 3);
    this.ⵠⲆΔ[101].id = 101;
    this.ⵠⲆΔ[64] = Bf(68, 68, 0, ⵠⵠ[571], 3);
    this.ⵠⲆΔ[64].id = 64;
    this.ⵠⲆΔ[71] = Bf(68, 68, 0, ⵠⵠ[1240], 3);
    this.ⵠⲆΔ[71].id = 71;
    this.ⵠⲆΔ[102] = Bf(68, 68, 0, ⵠⵠ[1170], 3);
    this.ⵠⲆΔ[102].id = 102;
    this.ⵠⲆΔ[65] = Bf(68, 68, 0, ⵠⵠ[574], 3);
    this.ⵠⲆΔ[65].id = 65;
    this.ⵠⲆΔ[72] = Bf(68, 68, 0, ⵠⵠ[1243], 3);
    this.ⵠⲆΔ[72].id = 72;
    this.ⵠⲆΔ[103] = Bf(68, 68, 0, ⵠⵠ[1173], 3);
    this.ⵠⲆΔ[103].id = 103;
    this.ⵠⲆΔ[66] = Bf(68, 68, 0, ⵠⵠ[577], 3);
    this.ⵠⲆΔ[66].id = 66;
    this.ⵠⲆΔ[73] = Bf(68, 68, 0, ⵠⵠ[1246], 3);
    this.ⵠⲆΔ[73].id = 73;
    this.ⵠⲆΔ[104] = Bf(68, 68, 0, ⵠⵠ[1176], 3);
    this.ⵠⲆΔ[104].id = 104;
    this.ⵠⲆΔ[67] = Bf(68, 68, 0, ⵠⵠ[580], 3);
    this.ⵠⲆΔ[67].id = 67;
    this.ⵠⲆΔ[74] = Bf(68, 68, 0, ⵠⵠ[1249], 3);
    this.ⵠⲆΔ[74].id = 74;
    this.ⵠⲆΔ[105] = Bf(68, 68, 0, ⵠⵠ[1179], 3);
    this.ⵠⲆΔ[105].id = 105;
    this.ⵠⲆΔ[68] = Bf(68, 68, 0, ⵠⵠ[583], 3);
    this.ⵠⲆΔ[68].id = 68;
    this.ⵠⲆΔ[75] = Bf(68, 68, 0, ⵠⵠ[1252], 3);
    this.ⵠⲆΔ[75].id = 75;
    this.ⵠⲆΔ[106] = Bf(68, 68, 0, ⵠⵠ[1182], 3);
    this.ⵠⲆΔ[106].id = 106;
    this.ⵠⲆΔ[69] = Bf(68, 68, 0, ⵠⵠ[586], 3);
    this.ⵠⲆΔ[69].id = 69;
    this.ⵠⲆΔ[76] = Bf(68, 68, 0, ⵠⵠ[1255], 3);
    this.ⵠⲆΔ[76].id = 76;
    this.ⵠⲆΔ[107] = Bf(68, 68, 0, ⵠⵠ[1185], 3);
    this.ⵠⲆΔ[107].id = 107;
    this.ⵠⲆΔ[70] = Bf(68, 68, 0, ⵠⵠ[589], 3);
    this.ⵠⲆΔ[70].id = 70;
    this.ⵠⲆΔ[94] = Bf(68, 68, 0, ⵠⵠ[1258], 3);
    this.ⵠⲆΔ[94].id = 94;
    this.ⵠⲆΔ[95] = Bf(68, 68, 0, ⵠⵠ[1261], 3);
    this.ⵠⲆΔ[95].id = 95;
    this.ⵠⲆΔ[96] = Bf(68, 68, 0, ⵠⵠ[1264], 3);
    this.ⵠⲆΔ[96].id = 96;
    this.ⵠⲆΔ[97] = Bf(68, 68, 0, ⵠⵠ[1267], 3);
    this.ⵠⲆΔ[97].id = 97;
    this.ⵠⲆΔ[98] = Bf(68, 68, 0, ⵠⵠ[1270], 3);
    this.ⵠⲆΔ[98].id = 98;
    this.ⵠⲆΔ[99] = Bf(68, 68, 0, ⵠⵠ[1273], 3);
    this.ⵠⲆΔ[99].id = 99;
    this.ⵠⲆΔ[58] = Bf(68, 68, 0, ⵠⵠ[828], 3);
    this.ⵠⲆΔ[58].id = 58;
    this.ⵠⲆΔ[25] = Bf(68, 68, 0, ⵠⵠ[431], 3);
    this.ⵠⲆΔ[25].id = 25;
    this.ⵠⲆΔ[26] = Bf(68, 68, 0, ⵠⵠ[434], 3);
    this.ⵠⲆΔ[26].id = 26;
    this.ⵠⲆΔ[27] = Bf(68, 68, 0, ⵠⵠ[437], 3);
    this.ⵠⲆΔ[27].id = 27;
    this.ⵠⲆΔ[28] = Bf(68, 68, 0, ⵠⵠ[440], 3);
    this.ⵠⲆΔ[28].id = 28;
    this.ⵠⲆΔ[120] = Bf(68, 68, 0, ⵠⵠ[443], 3);
    this.ⵠⲆΔ[120].id = 120;
    this.ⵠⲆΔ[29] = Bf(68, 68, 0, ⵠⵠ[385], 3);
    this.ⵠⲆΔ[29].id = 29;
    this.ⵠⲆΔ[121] = Bf(68, 68, 0, ⵠⵠ[446], 3);
    this.ⵠⲆΔ[121].id = 121;
    this.ⵠⲆΔ[30] = Bf(68, 68, 0, ⵠⵠ[457], 3);
    this.ⵠⲆΔ[30].id = 30;
    this.ⵠⲆΔ[9] = Bf(68, 68, 0, ⵠⵠ[862], 3);
    this.ⵠⲆΔ[9].id = 9;
    this.ⵠⲆΔ[31] = Bf(68, 68, 0, ⵠⵠ[459], 3);
    this.ⵠⲆΔ[31].id = 31;
    this.ⵠⲆΔ[32] = Bf(68, 68, 0, ⵠⵠ[1018], 3);
    this.ⵠⲆΔ[32].id = 32;
    this.ⵠⲆΔ[33] = Bf(68, 68, 0, ⵠⵠ[474], 3);
    this.ⵠⲆΔ[33].id = 33;
    this.ⵠⲆΔ[35] = Bf(68, 68, 0, ⵠⵠ[479], 3);
    this.ⵠⲆΔ[35].id = 35;
    this.ⵠⲆΔ[36] = Bf(68, 68, 0, ⵠⵠ[482], 3);
    this.ⵠⲆΔ[36].id = 36;
    this.ⵠⲆΔ[37] = Bf(68, 68, 0, ⵠⵠ[485], 3);
    this.ⵠⲆΔ[37].id = 37;
    this.ⵠⲆΔ[38] = Bf(68, 68, 0, ⵠⵠ[488], 3);
    this.ⵠⲆΔ[38].id = 38;
    this.ⵠⲆΔ[39] = Bf(68, 68, 0, ⵠⵠ[491], 3);
    this.ⵠⲆΔ[39].id = 39;
    this.ⵠⲆΔ[122] = Bf(68, 68, 0, ⵠⵠ[494], 3);
    this.ⵠⲆΔ[122].id = 122;
    this.ⵠⲆΔ[123] = Bf(68, 68, 0, ⵠⵠ[497], 3);
    this.ⵠⲆΔ[123].id = 123;
    this.ⵠⲆΔ[124] = Bf(68, 68, 0, ⵠⵠ[501], 3);
    this.ⵠⲆΔ[124].id = 124;
    this.ⵠⲆΔ[40] = Bf(68, 68, 0, ⵠⵠ[504], 3);
    this.ⵠⲆΔ[40].id = 40;
    this.ⵠⲆΔ[146] = Bf(68, 68, 0, ⵠⵠ[506], 3);
    this.ⵠⲆΔ[146].id = 146;
    this.ⵠⲆΔ[240] = Bf(68, 68, 0, ⵠⵠ[1234], 3);
    this.ⵠⲆΔ[240].id = 240;
    this.ⵠⲆΔ[147] = Bf(68, 68, 0, ⵠⵠ[514], 3);
    this.ⵠⲆΔ[147].id = 147;
    this.ⵠⲆΔ[148] = Bf(68, 68, 0, ⵠⵠ[520], 3);
    this.ⵠⲆΔ[148].id = 148;
    this.ⵠⲆΔ[149] = Bf(68, 68, 0, ⵠⵠ[522], 3);
    this.ⵠⲆΔ[149].id = 149;
    this.ⵠⲆΔ[150] = Bf(68, 68, 0, ⵠⵠ[524], 3);
    this.ⵠⲆΔ[150].id = 150;
    this.ⵠⲆΔ[151] = Bf(68, 68, 0, ⵠⵠ[531], 3);
    this.ⵠⲆΔ[151].id = 151;
    this.ⵠⲆΔ[158] = Bf(68, 68, 0, ⵠⵠ[534], 3);
    this.ⵠⲆΔ[158].id = 158;
    this.ⵠⲆΔ[159] = Bf(68, 68, 0, ⵠⵠ[554], 3);
    this.ⵠⲆΔ[159].id = 159;
    this.ⵠⲆΔ[43] = Bf(68, 68, 0, ⵠⵠ[543], 3);
    this.ⵠⲆΔ[43].id = 43;
    this.ⵠⲆΔ[45] = Bf(68, 68, 0, ⵠⵠ[552], 3);
    this.ⵠⲆΔ[45].id = 45;
    this.ⵠⲆΔ[125] = Bf(68, 68, 0, ⵠⵠ[606], 3);
    this.ⵠⲆΔ[125].id = 125;
    this.ⵠⲆΔ[221] = Bf(68, 68, 0, ⵠⵠ[1237], 3);
    this.ⵠⲆΔ[221].id = 221;
    this.ⵠⲆΔ[223] = Bf(68, 68, 0, ⵠⵠ[1029], 3);
    this.ⵠⲆΔ[223].id = 223;
    this.ⵠⲆΔ[224] = Bf(68, 68, 0, ⵠⵠ[1032], 3);
    this.ⵠⲆΔ[224].id = 224;
    this.ⵠⲆΔ[230] = Bf(68, 68, 0, ⵠⵠ[1118], 3);
    this.ⵠⲆΔ[230].id = 230;
    this.ⵠⲆΔ[89] = Bf(68, 68, 0, ⵠⵠ[1047], 3);
    this.ⵠⲆΔ[89].id = 89;
    this.ⵠⲆΔ[225] = Bf(68, 68, 0, ⵠⵠ[1050], 3);
    this.ⵠⲆΔ[225].id = 225;
    this.ⵠⲆΔ[227] = Bf(68, 68, 0, ⵠⵠ[1081], 3);
    this.ⵠⲆΔ[227].id = 227;
    this.ⵠⲆΔ[239] = Bf(68, 68, 0, ⵠⵠ[1225], 3);
    this.ⵠⲆΔ[239].id = 239;
    this.ⵠⲆΔ[228] = Bf(68, 68, 0, ⵠⵠ[1096], 3);
    this.ⵠⲆΔ[228].id = 228;
    this.ⵠⲆΔ[229] = Bf(68, 68, 0, ⵠⵠ[1111], 3);
    this.ⵠⲆΔ[229].id = 229;
    this.ⵠⲆΔ[226] = Bf(68, 68, 0, ⵠⵠ[1190], 3);
    this.ⵠⲆΔ[226].id = 226;
    this.ⵠⲆΔ[126] = Bf(68, 68, 0, ⵠⵠ[610], 3);
    this.ⵠⲆΔ[126].id = 126;
    this.ⵠⲆΔ[127] = Bf(68, 68, 0, ⵠⵠ[615], 3);
    this.ⵠⲆΔ[127].id = 127;
    this.ⵠⲆΔ[128] = Bf(68, 68, 0, ⵠⵠ[614], 3);
    this.ⵠⲆΔ[128].id = 128;
    this.ⵠⲆΔ[46] = Bf(68, 68, 0, ⵠⵠ[617], 3);
    this.ⵠⲆΔ[46].id = 46;
    this.ⵠⲆΔ[50] = Bf(68, 68, 0, ⵠⵠ[701], 3);
    this.ⵠⲆΔ[50].id = 50;
    this.ⵠⲆΔ[51] = Bf(68, 68, 0, ⵠⵠ[703], 3);
    this.ⵠⲆΔ[51].id = 51;
    this.ⵠⲆΔ[52] = Bf(68, 68, 0, ⵠⵠ[707], 3);
    this.ⵠⲆΔ[52].id = 52;
    this.ⵠⲆΔ[55] = Bf(68, 68, 0, ⵠⵠ[710], 3);
    this.ⵠⲆΔ[55].id = 55;
    this.ⵠⲆΔ[129] = Bf(68, 68, 0, ⵠⵠ[625], 3);
    this.ⵠⲆΔ[129].id = 129;
    this.ⵠⲆΔ[130] = Bf(68, 68, 0, ⵠⵠ[628], 3);
    this.ⵠⲆΔ[130].id = 130;
    this.ⵠⲆΔ[131] = Bf(68, 68, 0, ⵠⵠ[630], 3);
    this.ⵠⲆΔ[131].id = 131;
    this.ⵠⲆΔ[132] = Bf(68, 68, 0, ⵠⵠ[633], 3);
    this.ⵠⲆΔ[132].id = 132;
    this.ⵠⲆΔ[133] = Bf(68, 68, 0, ⵠⵠ[636], 3);
    this.ⵠⲆΔ[133].id = 133;
    this.ⵠⲆΔ[134] = Bf(68, 68, 0, ⵠⵠ[640], 3);
    this.ⵠⲆΔ[134].id = 134;
    this.ⵠⲆΔ[135] = Bf(68, 68, 0, ⵠⵠ[645], 3);
    this.ⵠⲆΔ[135].id = 135;
    this.ⵠⲆΔ[47] = Bf(68, 68, 0, ⵠⵠ[648], 3);
    this.ⵠⲆΔ[47].id = 47;
    this.ⵠⲆΔ[48] = Bf(68, 68, 0, ⵠⵠ[651], 3);
    this.ⵠⲆΔ[48].id = 48;
    this.ⵠⲆΔ[49] = Bf(68, 68, 0, ⵠⵠ[653], 3);
    this.ⵠⲆΔ[49].id = 49;
    this.ⵠⲆΔ[136] = Bf(68, 68, 0, ⵠⵠ[661], 3);
    this.ⵠⲆΔ[136].id = 136;
    this.ⵠⲆΔ[143] = Bf(68, 68, 0, ⵠⵠ[689], 3);
    this.ⵠⲆΔ[143].id = 143;
    this.ⵠⲆΔ[137] = Bf(68, 68, 0, ⵠⵠ[663], 3);
    this.ⵠⲆΔ[137].id = 137;
    this.ⵠⲆΔ[138] = Bf(68, 68, 0, ⵠⵠ[665], 3);
    this.ⵠⲆΔ[138].id = 138;
    this.ⵠⲆΔ[139] = Bf(68, 68, 0, ⵠⵠ[675], 3);
    this.ⵠⲆΔ[139].id = 139;
    this.ⵠⲆΔ[140] = Bf(68, 68, 0, ⵠⵠ[682], 3);
    this.ⵠⲆΔ[140].id = 140;
    this.ⵠⲆΔ[141] = Bf(68, 68, 0, ⵠⵠ[683], 3);
    this.ⵠⲆΔ[141].id = 141;
    this.ⵠⲆΔ[142] = Bf(68, 68, 0, ⵠⵠ[686], 3);
    this.ⵠⲆΔ[142].id = 142;
    this.ⵠⲆΔ[144] = Bf(68, 68, 0, ⵠⵠ[719], 3);
    this.ⵠⲆΔ[144].id = 144;
    this.ⵠⲆΔ[145] = Bf(68, 68, 0, ⵠⵠ[731], 3);
    this.ⵠⲆΔ[145].id = 145;
    this.ⵠⲆΔ[59] = Bf(68, 68, 0, ⵠⵠ[733], 3);
    this.ⵠⲆΔ[59].id = 59;
    this.ⵠⲆΔ[62] = Bf(68, 68, 0, ⵠⵠ[565], 3);
    this.ⵠⲆΔ[62].id = 62;
    this.ⵠⲆΔ[185] = Bf(68, 68, 0, ⵠⵠ[590], 3);
    this.ⵠⲆΔ[185].id = 185;
    this.ⵠⲆΔ[184] = Bf(68, 68, 0, ⵠⵠ[752], 3);
    this.ⵠⲆΔ[184].id = 184;
    this.ⵠⲆΔ[187] = Bf(68, 68, 0, ⵠⵠ[591], 3);
    this.ⵠⲆΔ[187].id = 187;
    this.ⵠⲆΔ[186] = Bf(68, 68, 0, ⵠⵠ[754], 3);
    this.ⵠⲆΔ[186].id = 186;
    this.ⵠⲆΔ[77] = Bf(68, 68, 0, ⵠⵠ[757], 3);
    this.ⵠⲆΔ[77].id = 77;
    this.ⵠⲆΔ[175] = Bf(68, 68, 0, ⵠⵠ[759], 3);
    this.ⵠⲆΔ[175].id = 175;
    this.ⵠⲆΔ[176] = Bf(68, 68, 0, ⵠⵠ[763], 3);
    this.ⵠⲆΔ[176].id = 176;
    this.ⵠⲆΔ[78] = Bf(68, 68, 0, ⵠⵠ[761], 3);
    this.ⵠⲆΔ[78].id = 78;
    this.ⵠⲆΔ[177] = Bf(68, 68, 0, ⵠⵠ[766], 3);
    this.ⵠⲆΔ[177].id = 177;
    this.ⵠⲆΔ[79] = Bf(68, 68, 0, ⵠⵠ[765], 3);
    this.ⵠⲆΔ[79].id = 79;
    this.ⵠⲆΔ[83] = Bf(68, 68, 0, ⵠⵠ[769], 3);
    this.ⵠⲆΔ[83].id = 83;
    this.ⵠⲆΔ[84] = Bf(68, 68, 0, ⵠⵠ[773], 3);
    this.ⵠⲆΔ[84].id = 84;
    this.ⵠⲆΔ[178] = Bf(68, 68, 0, ⵠⵠ[774], 3);
    this.ⵠⲆΔ[178].id = 178;
    this.ⵠⲆΔ[179] = Bf(68, 68, 0, ⵠⵠ[775], 3);
    this.ⵠⲆΔ[179].id = 179;
    this.ⵠⲆΔ[86] = Bf(68, 68, 0, ⵠⵠ[778], 3);
    this.ⵠⲆΔ[86].id = 86;
    this.ⵠⲆΔ[85] = Bf(68, 68, 0, ⵠⵠ[781], 3);
    this.ⵠⲆΔ[85].id = 85;
    this.ⵠⲆΔ[180] = Bf(68, 68, 0, ⵠⵠ[786], 3);
    this.ⵠⲆΔ[180].id = 180;
    this.ⵠⲆΔ[181] = Bf(68, 68, 0, ⵠⵠ[787], 3);
    this.ⵠⲆΔ[181].id = 181;
    this.ⵠⲆΔ[182] = Bf(68, 68, 0, ⵠⵠ[790], 3);
    this.ⵠⲆΔ[182].id = 182;
    this.ⵠⲆΔ[183] = Bf(68, 68, 0, ⵠⵠ[801], 3);
    this.ⵠⲆΔ[183].id = 183;
    this.ⵠⲆΔ[188] = Bf(68, 68, 0, ⵠⵠ[810], 3);
    this.ⵠⲆΔ[188].id = 188;
    this.ⵠⲆΔ[189] = Bf(68, 68, 0, ⵠⵠ[815], 3);
    this.ⵠⲆΔ[189].id = 189;
    this.ⵠⲆΔ[190] = Bf(68, 68, 0, ⵠⵠ[844], 3);
    this.ⵠⲆΔ[190].id = 190;
    this.ⵠⲆΔ[191] = Bf(68, 68, 0, ⵠⵠ[836], 3);
    this.ⵠⲆΔ[191].id = 191;
    this.ⵠⲆΔ[192] = Bf(68, 68, 0, ⵠⵠ[841], 3);
    this.ⵠⲆΔ[192].id = 192;
    this.ⵠⲆΔ[193] = Bf(68, 68, 0, ⵠⵠ[847], 3);
    this.ⵠⲆΔ[193].id = 193;
    this.ⵠⲆΔ[194] = Bf(68, 68, 0, ⵠⵠ[851], 3);
    this.ⵠⲆΔ[194].id = 194;
    this.ⵠⲆΔ[206] = Bf(68, 68, 0, ⵠⵠ[961], 3);
    this.ⵠⲆΔ[206].id = 206;
    this.ⵠⲆΔ[207] = Bf(68, 68, 0, ⵠⵠ[974], 3);
    this.ⵠⲆΔ[207].id = 207;
    this.ⵠⲆΔ[204] = Bf(68, 68, 0, ⵠⵠ[951], 3);
    this.ⵠⲆΔ[204].id = 204;
    this.ⵠⲆΔ[205] = Bf(68, 68, 0, ⵠⵠ[956], 3);
    this.ⵠⲆΔ[205].id = 205;
    this.ⵠⲆΔ[208] = Bf(68, 68, 0, ⵠⵠ[968], 3);
    this.ⵠⲆΔ[208].id = 208;
    this.ⵠⲆΔ[209] = Bf(68, 68, 0, ⵠⵠ[973], 3);
    this.ⵠⲆΔ[209].id = 209;
    this.ⵠⲆΔ[210] = Bf(68, 68, 0, ⵠⵠ[983], 3);
    this.ⵠⲆΔ[210].id = 210;
    this.ⵠⲆΔ[211] = Bf(68, 68, 0, ⵠⵠ[988], 3);
    this.ⵠⲆΔ[211].id = 211;
    this.ⵠⲆΔ[41] = Bf(68, 68, 0, ⵠⵠ[881], 3);
    this.ⵠⲆΔ[41].id = 41;
    this.ⵠⲆΔ[42] = Bf(68, 68, 0, ⵠⵠ[883], 3);
    this.ⵠⲆΔ[42].id = 42;
    this.ⵠⲆΔ[12] = Bf(68, 68, 0, ⵠⵠ[403], 3);
    this.ⵠⲆΔ[12].id = 12;
    this.ⵠⲆΔ[16] = Bf(68, 68, 0, ⵠⵠ[875], 3);
    this.ⵠⲆΔ[16].id = 16;
    this.ⵠⲆΔ[196] = Bf(68, 68, 0, ⵠⵠ[898], 3);
    this.ⵠⲆΔ[196].id = 196;
    this.ⵠⲆΔ[18] = Bf(68, 68, 0, ⵠⵠ[899], 3);
    this.ⵠⲆΔ[18].id = 18;
    this.ⵠⲆΔ[197] = Bf(68, 68, 0, ⵠⵠ[906], 3);
    this.ⵠⲆΔ[197].id = 197;
    this.ⵠⲆΔ[198] = Bf(68, 68, 0, ⵠⵠ[908], 3);
    this.ⵠⲆΔ[198].id = 198;
    this.ⵠⲆΔ[61] = Bf(68, 68, 0, ⵠⵠ[911], 3);
    this.ⵠⲆΔ[61].id = 61;
    this.ⵠⲆΔ[201] = Bf(68, 68, 0, ⵠⵠ[871], 3);
    this.ⵠⲆΔ[201].id = 201;
    this.ⵠⲆΔ[199] = Bf(68, 68, 0, ⵠⵠ[863], 3);
    this.ⵠⲆΔ[199].id = 199;
    this.ⵠⲆΔ[200] = Bf(68, 68, 0, ⵠⵠ[868], 3);
    this.ⵠⲆΔ[200].id = 200;
    this.ΔⲆⲆⵠⵠ = [];
    for (n = 0; n < 250; n++) {
      this.ΔⲆⲆⵠⵠ[n] = Bf(0, 0, 0, ⵠⵠ[366]);
    }
    this.ⲆⲆⵠ = [];
    this.ⲆⲆⵠ[0] = Bf(60, 60, 0, ⵠⵠ[261], 3);
    this.ⲆⲆⵠ[0].id = 0;
    this.ⲆⲆⵠ[1] = Bf(60, 60, 0, ⵠⵠ[312], 3);
    this.ⲆⲆⵠ[1].id = 1;
    this.ⲆⲆⵠ[108] = Bf(60, 60, 0, ⵠⵠ[315], 3);
    this.ⲆⲆⵠ[108].id = 108;
    this.ⲆⲆⵠ[108].info.ΔΔ[2] = this.ⲆⲆⵠ[108].info.ΔΔ[0];
    this.ⲆⲆⵠ[109] = Bf(60, 60, 0, ⵠⵠ[316], 3);
    this.ⲆⲆⵠ[109].id = 109;
    this.ⲆⲆⵠ[109].info.ΔΔ[2] = this.ⲆⲆⵠ[109].info.ΔΔ[0];
    this.ⲆⲆⵠ[110] = Bf(60, 60, 0, ⵠⵠ[277], 3);
    this.ⲆⲆⵠ[110].id = 110;
    this.ⲆⲆⵠ[233] = Bf(60, 60, 0, ⵠⵠ[1154], 3);
    this.ⲆⲆⵠ[233].id = 233;
    this.ⲆⲆⵠ[111] = Bf(60, 60, 0, ⵠⵠ[297], 3);
    this.ⲆⲆⵠ[111].id = 111;
    this.ⲆⲆⵠ[111].info.ΔΔ[2] = this.ⲆⲆⵠ[111].info.ΔΔ[0];
    this.ⲆⲆⵠ[112] = Bf(60, 60, 0, ⵠⵠ[298], 3);
    this.ⲆⲆⵠ[112].id = 112;
    this.ⲆⲆⵠ[112].info.ΔΔ[2] = this.ⲆⲆⵠ[112].info.ΔΔ[0];
    this.ⲆⲆⵠ[3] = Bf(60, 60, 0, ⵠⵠ[258], 3);
    this.ⲆⲆⵠ[3].id = 3;
    this.ⲆⲆⵠ[4] = Bf(60, 60, 0, ⵠⵠ[296], 3);
    this.ⲆⲆⵠ[4].id = 4;
    this.ⲆⲆⵠ[5] = Bf(60, 60, 0, ⵠⵠ[292], 3);
    this.ⲆⲆⵠ[5].id = 5;
    this.ⲆⲆⵠ[57] = Bf(60, 60, 0, ⵠⵠ[829], 3);
    this.ⲆⲆⵠ[57].id = 57;
    this.ⲆⲆⵠ[6] = Bf(60, 60, 0, ⵠⵠ[293], 3);
    this.ⲆⲆⵠ[6].id = 6;
    this.ⲆⲆⵠ[113] = Bf(60, 60, 0, ⵠⵠ[309], 3);
    this.ⲆⲆⵠ[113].id = 113;
    this.ⲆⲆⵠ[114] = Bf(60, 60, 0, ⵠⵠ[310], 3);
    this.ⲆⲆⵠ[114].id = 114;
    this.ⲆⲆⵠ[115] = Bf(60, 60, 0, ⵠⵠ[311], 3);
    this.ⲆⲆⵠ[115].id = 115;
    this.ⲆⲆⵠ[162] = Bf(60, 60, 0, ⵠⵠ[317], 3);
    this.ⲆⲆⵠ[162].id = 162;
    this.ⲆⲆⵠ[160] = Bf(60, 60, 0, ⵠⵠ[319], 3);
    this.ⲆⲆⵠ[160].id = 160;
    this.ⲆⲆⵠ[8] = Bf(60, 60, 0, ⵠⵠ[313], 3);
    this.ⲆⲆⵠ[8].id = 8;
    this.ⲆⲆⵠ[117] = Bf(60, 60, 0, ⵠⵠ[323], 3);
    this.ⲆⲆⵠ[117].id = 117;
    this.ⲆⲆⵠ[116] = Bf(60, 60, 0, ⵠⵠ[300], 3);
    this.ⲆⲆⵠ[116].id = 116;
    this.ⲆⲆⵠ[118] = Bf(60, 60, 0, ⵠⵠ[328], 3);
    this.ⲆⲆⵠ[118].id = 118;
    this.ⲆⲆⵠ[195] = Bf(60, 60, 0, ⵠⵠ[303], 3);
    this.ⲆⲆⵠ[195].id = 195;
    this.ⲆⲆⵠ[161] = Bf(60, 60, 0, ⵠⵠ[305], 3);
    this.ⲆⲆⵠ[161].id = 161;
    this.ⲆⲆⵠ[161].info.ΔΔ[2] = this.ⲆⲆⵠ[161].info.ΔΔ[0];
    this.ⲆⲆⵠ[163] = Bf(60, 60, 0, ⵠⵠ[329], 3);
    this.ⲆⲆⵠ[163].id = 163;
    this.ⲆⲆⵠ[164] = Bf(60, 60, 0, ⵠⵠ[330], 3);
    this.ⲆⲆⵠ[164].id = 164;
    this.ⲆⲆⵠ[165] = Bf(60, 60, 0, ⵠⵠ[331], 3);
    this.ⲆⲆⵠ[165].id = 165;
    this.ⲆⲆⵠ[166] = Bf(60, 60, 0, ⵠⵠ[335], 3);
    this.ⲆⲆⵠ[166].id = 166;
    this.ⲆⲆⵠ[167] = Bf(60, 60, 0, ⵠⵠ[337], 3);
    this.ⲆⲆⵠ[167].id = 167;
    this.ⲆⲆⵠ[168] = Bf(60, 60, 0, ⵠⵠ[361], 3);
    this.ⲆⲆⵠ[168].id = 168;
    this.ⲆⲆⵠ[169] = Bf(60, 60, 0, ⵠⵠ[362], 3);
    this.ⲆⲆⵠ[169].id = 169;
    this.ⲆⲆⵠ[170] = Bf(60, 60, 0, ⵠⵠ[364], 3);
    this.ⲆⲆⵠ[170].id = 170;
    this.ⲆⲆⵠ[29] = Bf(60, 60, 0, ⵠⵠ[392], 3);
    this.ⲆⲆⵠ[29].id = 29;
    this.ⲆⲆⵠ[10] = Bf(60, 60, 0, ⵠⵠ[369], 3);
    this.ⲆⲆⵠ[10].id = 10;
    this.ⲆⲆⵠ[171] = Bf(60, 60, 0, ⵠⵠ[372], 3);
    this.ⲆⲆⵠ[171].id = 171;
    this.ⲆⲆⵠ[172] = Bf(60, 60, 0, ⵠⵠ[375], 3);
    this.ⲆⲆⵠ[172].id = 172;
    this.ⲆⲆⵠ[173] = Bf(60, 60, 0, ⵠⵠ[378], 3);
    this.ⲆⲆⵠ[173].id = 173;
    this.ⲆⲆⵠ[2] = Bf(60, 60, 0, ⵠⵠ[368], 3);
    this.ⲆⲆⵠ[2].id = 2;
    this.ⲆⲆⵠ[2].info.ΔΔ[2] = this.ⲆⲆⵠ[2].info.ΔΔ[0];
    this.ⲆⲆⵠ[237] = Bf(60, 60, 0, ⵠⵠ[1162], 3);
    this.ⲆⲆⵠ[237].id = 237;
    this.ⲆⲆⵠ[237].info.ΔΔ[2] = this.ⲆⲆⵠ[237].info.ΔΔ[0];
    this.ⲆⲆⵠ[174] = Bf(60, 60, 0, ⵠⵠ[393], 3);
    this.ⲆⲆⵠ[174].id = 174;
    this.ⲆⲆⵠ[174].info.ΔΔ[2] = this.ⲆⲆⵠ[174].info.ΔΔ[0];
    this.ⲆⲆⵠ[222] = Bf(60, 60, 0, ⵠⵠ[1035], 3);
    this.ⲆⲆⵠ[222].id = 222;
    this.ⲆⲆⵠ[231] = Bf(60, 60, 0, ⵠⵠ[1037], 3);
    this.ⲆⲆⵠ[231].id = 231;
    this.ⲆⲆⵠ[232] = Bf(60, 60, 0, ⵠⵠ[1039], 3);
    this.ⲆⲆⵠ[232].id = 232;
    this.ⲆⲆⵠ[234] = Bf(60, 60, 0, ⵠⵠ[1156], 3);
    this.ⲆⲆⵠ[234].id = 234;
    this.ⲆⲆⵠ[10] = Bf(60, 60, 0, ⵠⵠ[369], 3);
    this.ⲆⲆⵠ[10].id = 10;
    this.ⲆⲆⵠ[11] = Bf(60, 60, 0, ⵠⵠ[381], 3);
    this.ⲆⲆⵠ[11].id = 11;
    this.ⲆⲆⵠ[12] = Bf(60, 60, 0, ⵠⵠ[401], 3);
    this.ⲆⲆⵠ[12].id = 12;
    this.ⲆⲆⵠ[13] = Bf(60, 60, 0, ⵠⵠ[395], 3);
    this.ⲆⲆⵠ[13].id = 13;
    this.ⲆⲆⵠ[14] = Bf(60, 60, 0, ⵠⵠ[398], 3);
    this.ⲆⲆⵠ[14].id = 14;
    this.ⲆⲆⵠ[15] = Bf(60, 60, 0, ⵠⵠ[404], 3);
    this.ⲆⲆⵠ[15].id = 15;
    this.ⲆⲆⵠ[16] = Bf(60, 60, 0, ⵠⵠ[874], 3);
    this.ⲆⲆⵠ[16].id = 16;
    this.ⲆⲆⵠ[119] = Bf(60, 60, 0, ⵠⵠ[408], 3);
    this.ⲆⲆⵠ[119].id = 119;
    this.ⲆⲆⵠ[23] = Bf(60, 60, 0, ⵠⵠ[420], 3);
    this.ⲆⲆⵠ[23].id = 23;
    this.ⲆⲆⵠ[24] = Bf(60, 60, 0, ⵠⵠ[423], 3);
    this.ⲆⲆⵠ[24].id = 24;
    this.ⲆⲆⵠ[87] = Bf(60, 60, 0, ⵠⵠ[1227], 3);
    this.ⲆⲆⵠ[87].id = 87;
    this.ⲆⲆⵠ[88] = Bf(60, 60, 0, ⵠⵠ[1230], 3);
    this.ⲆⲆⵠ[88].id = 88;
    this.ⲆⲆⵠ[80] = Bf(60, 60, 0, ⵠⵠ[1137], 3);
    this.ⲆⲆⵠ[80].id = 80;
    this.ⲆⲆⵠ[81] = Bf(60, 60, 0, ⵠⵠ[1140], 3);
    this.ⲆⲆⵠ[81].id = 81;
    this.ⲆⲆⵠ[64] = Bf(60, 60, 0, ⵠⵠ[569], 3);
    this.ⲆⲆⵠ[64].id = 64;
    this.ⲆⲆⵠ[101] = Bf(60, 60, 0, ⵠⵠ[1166], 3);
    this.ⲆⲆⵠ[101].id = 101;
    this.ⲆⲆⵠ[71] = Bf(60, 60, 0, ⵠⵠ[1239], 3);
    this.ⲆⲆⵠ[71].id = 71;
    this.ⲆⲆⵠ[65] = Bf(60, 60, 0, ⵠⵠ[572], 3);
    this.ⲆⲆⵠ[65].id = 65;
    this.ⲆⲆⵠ[102] = Bf(60, 60, 0, ⵠⵠ[1169], 3);
    this.ⲆⲆⵠ[102].id = 102;
    this.ⲆⲆⵠ[72] = Bf(60, 60, 0, ⵠⵠ[1242], 3);
    this.ⲆⲆⵠ[72].id = 72;
    this.ⲆⲆⵠ[66] = Bf(60, 60, 0, ⵠⵠ[575], 3);
    this.ⲆⲆⵠ[66].id = 66;
    this.ⲆⲆⵠ[103] = Bf(60, 60, 0, ⵠⵠ[1172], 3);
    this.ⲆⲆⵠ[103].id = 103;
    this.ⲆⲆⵠ[73] = Bf(60, 60, 0, ⵠⵠ[1245], 3);
    this.ⲆⲆⵠ[73].id = 73;
    this.ⲆⲆⵠ[67] = Bf(60, 60, 0, ⵠⵠ[578], 3);
    this.ⲆⲆⵠ[67].id = 67;
    this.ⲆⲆⵠ[104] = Bf(60, 60, 0, ⵠⵠ[1175], 3);
    this.ⲆⲆⵠ[104].id = 104;
    this.ⲆⲆⵠ[74] = Bf(60, 60, 0, ⵠⵠ[1248], 3);
    this.ⲆⲆⵠ[74].id = 74;
    this.ⲆⲆⵠ[68] = Bf(60, 60, 0, ⵠⵠ[581], 3);
    this.ⲆⲆⵠ[68].id = 68;
    this.ⲆⲆⵠ[105] = Bf(60, 60, 0, ⵠⵠ[1178], 3);
    this.ⲆⲆⵠ[105].id = 105;
    this.ⲆⲆⵠ[75] = Bf(60, 60, 0, ⵠⵠ[1251], 3);
    this.ⲆⲆⵠ[75].id = 75;
    this.ⲆⲆⵠ[69] = Bf(60, 60, 0, ⵠⵠ[584], 3);
    this.ⲆⲆⵠ[69].id = 69;
    this.ⲆⲆⵠ[106] = Bf(60, 60, 0, ⵠⵠ[1181], 3);
    this.ⲆⲆⵠ[106].id = 106;
    this.ⲆⲆⵠ[76] = Bf(60, 60, 0, ⵠⵠ[1254], 3);
    this.ⲆⲆⵠ[76].id = 76;
    this.ⲆⲆⵠ[70] = Bf(60, 60, 0, ⵠⵠ[587], 3);
    this.ⲆⲆⵠ[70].id = 70;
    this.ⲆⲆⵠ[107] = Bf(60, 60, 0, ⵠⵠ[1184], 3);
    this.ⲆⲆⵠ[107].id = 107;
    this.ⲆⲆⵠ[94] = Bf(60, 60, 0, ⵠⵠ[1257], 3);
    this.ⲆⲆⵠ[94].id = 94;
    this.ⲆⲆⵠ[95] = Bf(60, 60, 0, ⵠⵠ[1260], 3);
    this.ⲆⲆⵠ[95].id = 95;
    this.ⲆⲆⵠ[96] = Bf(60, 60, 0, ⵠⵠ[1263], 3);
    this.ⲆⲆⵠ[96].id = 96;
    this.ⲆⲆⵠ[97] = Bf(60, 60, 0, ⵠⵠ[1266], 3);
    this.ⲆⲆⵠ[97].id = 97;
    this.ⲆⲆⵠ[98] = Bf(60, 60, 0, ⵠⵠ[1269], 3);
    this.ⲆⲆⵠ[98].id = 98;
    this.ⲆⲆⵠ[99] = Bf(60, 60, 0, ⵠⵠ[1272], 3);
    this.ⲆⲆⵠ[99].id = 99;
    this.ⲆⲆⵠ[58] = Bf(60, 60, 0, ⵠⵠ[826], 3);
    this.ⲆⲆⵠ[58].id = 58;
    this.ⲆⲆⵠ[25] = Bf(60, 60, 0, ⵠⵠ[429], 3);
    this.ⲆⲆⵠ[25].id = 25;
    this.ⲆⲆⵠ[26] = Bf(60, 60, 0, ⵠⵠ[432], 3);
    this.ⲆⲆⵠ[26].id = 26;
    this.ⲆⲆⵠ[27] = Bf(60, 60, 0, ⵠⵠ[435], 3);
    this.ⲆⲆⵠ[27].id = 27;
    this.ⲆⲆⵠ[28] = Bf(60, 60, 0, ⵠⵠ[438], 3);
    this.ⲆⲆⵠ[28].id = 28;
    this.ⲆⲆⵠ[120] = Bf(60, 60, 0, ⵠⵠ[441], 3);
    this.ⲆⲆⵠ[120].id = 120;
    this.ⲆⲆⵠ[120].info.ΔΔ[2] = this.ⲆⲆⵠ[120].info.ΔΔ[0];
    this.ⲆⲆⵠ[29] = Bf(60, 60, 0, ⵠⵠ[392], 3);
    this.ⲆⲆⵠ[29].id = 29;
    this.ⲆⲆⵠ[121] = Bf(60, 60, 0, ⵠⵠ[418], 3);
    this.ⲆⲆⵠ[121].id = 121;
    this.ⲆⲆⵠ[121].info.ΔΔ[2] = this.ⲆⲆⵠ[121].info.ΔΔ[0];
    this.ⲆⲆⵠ[30] = Bf(60, 60, 0, ⵠⵠ[455], 3);
    this.ⲆⲆⵠ[30].id = 30;
    this.ⲆⲆⵠ[9] = Bf(60, 60, 0, ⵠⵠ[860], 3);
    this.ⲆⲆⵠ[9].id = 9;
    this.ⲆⲆⵠ[31] = Bf(60, 60, 0, ⵠⵠ[458], 3);
    this.ⲆⲆⵠ[31].id = 31;
    this.ⲆⲆⵠ[32] = Bf(60, 60, 0, ⵠⵠ[1017], 3);
    this.ⲆⲆⵠ[32].id = 32;
    this.ⲆⲆⵠ[33] = Bf(60, 60, 0, ⵠⵠ[472], 3);
    this.ⲆⲆⵠ[33].id = 33;
    this.ⲆⲆⵠ[35] = Bf(60, 60, 0, ⵠⵠ[477], 3);
    this.ⲆⲆⵠ[35].id = 35;
    this.ⲆⲆⵠ[36] = Bf(60, 60, 0, ⵠⵠ[480], 3);
    this.ⲆⲆⵠ[36].id = 36;
    this.ⲆⲆⵠ[37] = Bf(60, 60, 0, ⵠⵠ[483], 3);
    this.ⲆⲆⵠ[37].id = 37;
    this.ⲆⲆⵠ[38] = Bf(60, 60, 0, ⵠⵠ[486], 3);
    this.ⲆⲆⵠ[38].id = 38;
    this.ⲆⲆⵠ[39] = Bf(60, 60, 0, ⵠⵠ[489], 3);
    this.ⲆⲆⵠ[39].id = 39;
    this.ⲆⲆⵠ[122] = Bf(60, 60, 0, ⵠⵠ[492], 3);
    this.ⲆⲆⵠ[122].id = 122;
    this.ⲆⲆⵠ[123] = Bf(60, 60, 0, ⵠⵠ[495], 3);
    this.ⲆⲆⵠ[123].id = 123;
    this.ⲆⲆⵠ[124] = Bf(60, 60, 0, ⵠⵠ[499], 3);
    this.ⲆⲆⵠ[124].id = 124;
    this.ⲆⲆⵠ[40] = Bf(60, 60, 0, ⵠⵠ[502], 3);
    this.ⲆⲆⵠ[40].id = 40;
    this.ⲆⲆⵠ[146] = Bf(60, 60, 0, ⵠⵠ[505], 3);
    this.ⲆⲆⵠ[146].id = 146;
    this.ⲆⲆⵠ[146].info.ΔΔ[2] = this.ⲆⲆⵠ[146].info.ΔΔ[0];
    this.ⲆⲆⵠ[240] = Bf(60, 60, 0, ⵠⵠ[1233], 3);
    this.ⲆⲆⵠ[240].id = 240;
    this.ⲆⲆⵠ[240].info.ΔΔ[2] = this.ⲆⲆⵠ[240].info.ΔΔ[0];
    this.ⲆⲆⵠ[147] = Bf(60, 60, 0, ⵠⵠ[513], 3);
    this.ⲆⲆⵠ[147].id = 147;
    this.ⲆⲆⵠ[147].info.ΔΔ[2] = this.ⲆⲆⵠ[147].info.ΔΔ[0];
    this.ⲆⲆⵠ[148] = Bf(60, 60, 0, ⵠⵠ[518], 3);
    this.ⲆⲆⵠ[148].id = 148;
    this.ⲆⲆⵠ[148].info.ΔΔ[2] = this.ⲆⲆⵠ[148].info.ΔΔ[0];
    this.ⲆⲆⵠ[149] = Bf(60, 60, 0, ⵠⵠ[521], 3);
    this.ⲆⲆⵠ[149].id = 149;
    this.ⲆⲆⵠ[150] = Bf(60, 60, 0, ⵠⵠ[523], 3);
    this.ⲆⲆⵠ[150].id = 150;
    this.ⲆⲆⵠ[151] = Bf(60, 60, 0, ⵠⵠ[529], 3);
    this.ⲆⲆⵠ[151].id = 151;
    this.ⲆⲆⵠ[158] = Bf(60, 60, 0, ⵠⵠ[532], 3);
    this.ⲆⲆⵠ[158].id = 158;
    this.ⲆⲆⵠ[159] = Bf(60, 60, 0, ⵠⵠ[553], 3);
    this.ⲆⲆⵠ[159].id = 159;
    this.ⲆⲆⵠ[43] = Bf(60, 60, 0, ⵠⵠ[541], 3);
    this.ⲆⲆⵠ[43].id = 43;
    this.ⲆⲆⵠ[45] = Bf(60, 60, 0, ⵠⵠ[550], 3);
    this.ⲆⲆⵠ[45].id = 45;
    this.ⲆⲆⵠ[125] = Bf(60, 60, 0, ⵠⵠ[605], 3);
    this.ⲆⲆⵠ[125].id = 125;
    this.ⲆⲆⵠ[221] = Bf(60, 60, 0, ⵠⵠ[1236], 3);
    this.ⲆⲆⵠ[221].id = 221;
    this.ⲆⲆⵠ[223] = Bf(60, 60, 0, ⵠⵠ[1028], 3);
    this.ⲆⲆⵠ[223].id = 223;
    this.ⲆⲆⵠ[224] = Bf(60, 60, 0, ⵠⵠ[1031], 3);
    this.ⲆⲆⵠ[224].id = 224;
    this.ⲆⲆⵠ[230] = Bf(60, 60, 0, ⵠⵠ[1117], 3);
    this.ⲆⲆⵠ[230].id = 230;
    this.ⲆⲆⵠ[89] = Bf(60, 60, 0, ⵠⵠ[1046], 3);
    this.ⲆⲆⵠ[89].id = 89;
    this.ⲆⲆⵠ[225] = Bf(60, 60, 0, ⵠⵠ[1049], 3);
    this.ⲆⲆⵠ[225].id = 225;
    this.ⲆⲆⵠ[226] = Bf(60, 60, 0, ⵠⵠ[1189], 3);
    this.ⲆⲆⵠ[226].id = 226;
    this.ⲆⲆⵠ[227] = Bf(60, 60, 0, ⵠⵠ[1080], 3);
    this.ⲆⲆⵠ[227].id = 227;
    this.ⲆⲆⵠ[239] = Bf(60, 60, 0, ⵠⵠ[1224], 3);
    this.ⲆⲆⵠ[239].id = 239;
    this.ⲆⲆⵠ[228] = Bf(60, 60, 0, ⵠⵠ[1095], 3);
    this.ⲆⲆⵠ[228].id = 228;
    this.ⲆⲆⵠ[229] = Bf(60, 60, 0, ⵠⵠ[1110], 3);
    this.ⲆⲆⵠ[229].id = 229;
    this.ⲆⲆⵠ[126] = Bf(60, 60, 0, ⵠⵠ[609], 3);
    this.ⲆⲆⵠ[126].id = 126;
    this.ⲆⲆⵠ[126].info.ΔΔ[2] = this.ⲆⲆⵠ[126].info.ΔΔ[0];
    this.ⲆⲆⵠ[127] = Bf(60, 60, 0, ⵠⵠ[613], 3);
    this.ⲆⲆⵠ[127].id = 127;
    this.ⲆⲆⵠ[128] = Bf(60, 60, 0, ⵠⵠ[612], 3);
    this.ⲆⲆⵠ[128].id = 128;
    this.ⲆⲆⵠ[46] = Bf(60, 60, 0, ⵠⵠ[616], 3);
    this.ⲆⲆⵠ[46].id = 46;
    this.ⲆⲆⵠ[50] = Bf(60, 60, 0, ⵠⵠ[699], 3);
    this.ⲆⲆⵠ[50].id = 50;
    this.ⲆⲆⵠ[51] = Bf(60, 60, 0, ⵠⵠ[702], 3);
    this.ⲆⲆⵠ[51].id = 51;
    this.ⲆⲆⵠ[52] = Bf(60, 60, 0, ⵠⵠ[705], 3);
    this.ⲆⲆⵠ[52].id = 52;
    this.ⲆⲆⵠ[55] = Bf(60, 60, 0, ⵠⵠ[709], 3);
    this.ⲆⲆⵠ[55].id = 55;
    this.ⲆⲆⵠ[129] = Bf(60, 60, 0, ⵠⵠ[624], 3);
    this.ⲆⲆⵠ[129].id = 129;
    this.ⲆⲆⵠ[129].info.ΔΔ[2] = this.ⲆⲆⵠ[129].info.ΔΔ[0];
    this.ⲆⲆⵠ[130] = Bf(60, 60, 0, ⵠⵠ[626], 3);
    this.ⲆⲆⵠ[130].id = 130;
    this.ⲆⲆⵠ[131] = Bf(60, 60, 0, ⵠⵠ[629], 3);
    this.ⲆⲆⵠ[131].id = 131;
    this.ⲆⲆⵠ[131].info.ΔΔ[2] = this.ⲆⲆⵠ[131].info.ΔΔ[0];
    this.ⲆⲆⵠ[132] = Bf(60, 60, 0, ⵠⵠ[631], 3);
    this.ⲆⲆⵠ[132].id = 132;
    this.ⲆⲆⵠ[133] = Bf(60, 60, 0, ⵠⵠ[634], 3);
    this.ⲆⲆⵠ[133].id = 133;
    this.ⲆⲆⵠ[134] = Bf(60, 60, 0, ⵠⵠ[639], 3);
    this.ⲆⲆⵠ[134].id = 134;
    this.ⲆⲆⵠ[134].info.ΔΔ[2] = this.ⲆⲆⵠ[134].info.ΔΔ[0];
    this.ⲆⲆⵠ[135] = Bf(60, 60, 0, ⵠⵠ[644], 3);
    this.ⲆⲆⵠ[135].id = 135;
    this.ⲆⲆⵠ[47] = Bf(60, 60, 0, ⵠⵠ[646], 3);
    this.ⲆⲆⵠ[47].id = 47;
    this.ⲆⲆⵠ[48] = Bf(60, 60, 0, ⵠⵠ[649], 3);
    this.ⲆⲆⵠ[48].id = 48;
    this.ⲆⲆⵠ[49] = Bf(60, 60, 0, ⵠⵠ[652], 3);
    this.ⲆⲆⵠ[49].id = 49;
    this.ⲆⲆⵠ[136] = Bf(60, 60, 0, ⵠⵠ[659], 3);
    this.ⲆⲆⵠ[136].id = 136;
    this.ⲆⲆⵠ[143] = Bf(60, 60, 0, ⵠⵠ[143], 3);
    this.ⲆⲆⵠ[143].id = 143;
    this.ⲆⲆⵠ[137] = Bf(60, 60, 0, ⵠⵠ[662], 3);
    this.ⲆⲆⵠ[137].id = 137;
    this.ⲆⲆⵠ[138] = Bf(60, 60, 0, ⵠⵠ[664], 3);
    this.ⲆⲆⵠ[138].id = 138;
    this.ⲆⲆⵠ[139] = Bf(60, 60, 0, ⵠⵠ[674], 3);
    this.ⲆⲆⵠ[139].id = 139;
    this.ⲆⲆⵠ[139].info.ΔΔ[2] = this.ⲆⲆⵠ[139].info.ΔΔ[0];
    this.ⲆⲆⵠ[140] = Bf(60, 60, 0, ⵠⵠ[140], 3);
    this.ⲆⲆⵠ[140].id = 140;
    this.ⲆⲆⵠ[140].info.ΔΔ[2] = this.ⲆⲆⵠ[140].info.ΔΔ[0];
    this.ⲆⲆⵠ[141] = Bf(60, 60, 0, ⵠⵠ[685], 3);
    this.ⲆⲆⵠ[141].id = 141;
    this.ⲆⲆⵠ[142] = Bf(60, 60, 0, ⵠⵠ[142], 3);
    this.ⲆⲆⵠ[142].id = 142;
    this.ⲆⲆⵠ[142].info.ΔΔ[2] = this.ⲆⲆⵠ[142].info.ΔΔ[0];
    this.ⲆⲆⵠ[144] = Bf(60, 60, 0, ⵠⵠ[717], 3);
    this.ⲆⲆⵠ[144].id = 144;
    this.ⲆⲆⵠ[145] = Bf(60, 60, 0, ⵠⵠ[145], 3);
    this.ⲆⲆⵠ[145].id = 145;
    this.ⲆⲆⵠ[59] = Bf(60, 60, 0, ⵠⵠ[732], 3);
    this.ⲆⲆⵠ[59].id = 59;
    this.ⲆⲆⵠ[62] = Bf(60, 60, 0, ⵠⵠ[563], 3);
    this.ⲆⲆⵠ[62].id = 62;
    this.ⲆⲆⵠ[185] = Bf(60, 60, 0, ⵠⵠ[252], 3);
    this.ⲆⲆⵠ[185].id = 185;
    this.ⲆⲆⵠ[185].info.ΔΔ[2] = this.ⲆⲆⵠ[185].info.ΔΔ[0];
    this.ⲆⲆⵠ[184] = Bf(60, 60, 0, ⵠⵠ[751], 3);
    this.ⲆⲆⵠ[184].id = 184;
    this.ⲆⲆⵠ[184].info.ΔΔ[2] = this.ⲆⲆⵠ[184].info.ΔΔ[0];
    this.ⲆⲆⵠ[17] = Bf(60, 60, 0, ⵠⵠ[877], 3);
    this.ⲆⲆⵠ[17].id = 17;
    this.ⲆⲆⵠ[63] = Bf(60, 60, 0, ⵠⵠ[566], 3);
    this.ⲆⲆⵠ[63].id = 63;
    this.ⲆⲆⵠ[187] = Bf(60, 60, 0, ⵠⵠ[253], 3);
    this.ⲆⲆⵠ[187].id = 187;
    this.ⲆⲆⵠ[187].info.ΔΔ[2] = this.ⲆⲆⵠ[187].info.ΔΔ[0];
    this.ⲆⲆⵠ[186] = Bf(60, 60, 0, ⵠⵠ[753], 3);
    this.ⲆⲆⵠ[186].id = 186;
    this.ⲆⲆⵠ[186].info.ΔΔ[2] = this.ⲆⲆⵠ[186].info.ΔΔ[0];
    this.ⲆⲆⵠ[77] = Bf(60, 60, 0, ⵠⵠ[756], 3);
    this.ⲆⲆⵠ[77].id = 77;
    this.ⲆⲆⵠ[175] = Bf(60, 60, 0, ⵠⵠ[176], 3);
    this.ⲆⲆⵠ[175].id = 175;
    this.ⲆⲆⵠ[175].info.ΔΔ[2] = this.ⲆⲆⵠ[175].info.ΔΔ[0];
    this.ⲆⲆⵠ[176] = Bf(60, 60, 0, ⵠⵠ[177], 3);
    this.ⲆⲆⵠ[176].id = 176;
    this.ⲆⲆⵠ[176].info.ΔΔ[2] = this.ⲆⲆⵠ[176].info.ΔΔ[0];
    this.ⲆⲆⵠ[78] = Bf(60, 60, 0, ⵠⵠ[760], 3);
    this.ⲆⲆⵠ[78].id = 78;
    this.ⲆⲆⵠ[177] = Bf(60, 60, 0, ⵠⵠ[175], 3);
    this.ⲆⲆⵠ[177].id = 177;
    this.ⲆⲆⵠ[177].info.ΔΔ[2] = this.ⲆⲆⵠ[177].info.ΔΔ[0];
    this.ⲆⲆⵠ[79] = Bf(60, 60, 0, ⵠⵠ[764], 3);
    this.ⲆⲆⵠ[79].id = 79;
    this.ⲆⲆⵠ[83] = Bf(60, 60, 0, ⵠⵠ[767], 3);
    this.ⲆⲆⵠ[83].id = 83;
    this.ⲆⲆⵠ[84] = Bf(60, 60, 0, ⵠⵠ[771], 3);
    this.ⲆⲆⵠ[84].id = 84;
    this.ⲆⲆⵠ[178] = Bf(60, 60, 0, ⵠⵠ[178], 3);
    this.ⲆⲆⵠ[178].id = 178;
    this.ⲆⲆⵠ[179] = Bf(60, 60, 0, ⵠⵠ[179], 3);
    this.ⲆⲆⵠ[179].id = 179;
    this.ⲆⲆⵠ[86] = Bf(60, 60, 0, ⵠⵠ[776], 3);
    this.ⲆⲆⵠ[86].id = 86;
    this.ⲆⲆⵠ[85] = Bf(60, 60, 0, ⵠⵠ[779], 3);
    this.ⲆⲆⵠ[85].id = 85;
    this.ⲆⲆⵠ[180] = Bf(60, 60, 0, ⵠⵠ[180], 3);
    this.ⲆⲆⵠ[180].id = 180;
    this.ⲆⲆⵠ[181] = Bf(60, 60, 0, ⵠⵠ[181], 3);
    this.ⲆⲆⵠ[181].id = 181;
    this.ⲆⲆⵠ[182] = Bf(60, 60, 0, ⵠⵠ[789], 3);
    this.ⲆⲆⵠ[182].id = 182;
    this.ⲆⲆⵠ[183] = Bf(60, 60, 0, ⵠⵠ[800], 3);
    this.ⲆⲆⵠ[183].id = 183;
    this.ⲆⲆⵠ[188] = Bf(60, 60, 0, ⵠⵠ[808], 3);
    this.ⲆⲆⵠ[188].id = 188;
    this.ⲆⲆⵠ[189] = Bf(60, 60, 0, ⵠⵠ[814], 3);
    this.ⲆⲆⵠ[189].id = 189;
    this.ⲆⲆⵠ[191] = Bf(60, 60, 0, ⵠⵠ[834], 3);
    this.ⲆⲆⵠ[191].id = 191;
    this.ⲆⲆⵠ[192] = Bf(60, 60, 0, ⵠⵠ[840], 3);
    this.ⲆⲆⵠ[192].id = 192;
    this.ⲆⲆⵠ[190] = Bf(60, 60, 0, ⵠⵠ[842], 3);
    this.ⲆⲆⵠ[190].id = 190;
    this.ⲆⲆⵠ[193] = Bf(60, 60, 0, ⵠⵠ[845], 3);
    this.ⲆⲆⵠ[193].id = 193;
    this.ⲆⲆⵠ[194] = Bf(60, 60, 0, ⵠⵠ[850], 3);
    this.ⲆⲆⵠ[194].id = 194;
    this.ⲆⲆⵠ[204] = Bf(60, 60, 0, ⵠⵠ[949], 3);
    this.ⲆⲆⵠ[204].id = 204;
    this.ⲆⲆⵠ[205] = Bf(60, 60, 0, ⵠⵠ[955], 3);
    this.ⲆⲆⵠ[205].id = 205;
    this.ⲆⲆⵠ[206] = Bf(60, 60, 0, ⵠⵠ[959], 3);
    this.ⲆⲆⵠ[206].id = 206;
    this.ⲆⲆⵠ[207] = Bf(60, 60, 0, ⵠⵠ[965], 3);
    this.ⲆⲆⵠ[207].id = 207;
    this.ⲆⲆⵠ[208] = Bf(60, 60, 0, ⵠⵠ[966], 3);
    this.ⲆⲆⵠ[208].id = 208;
    this.ⲆⲆⵠ[209] = Bf(60, 60, 0, ⵠⵠ[972], 3);
    this.ⲆⲆⵠ[209].id = 209;
    this.ⲆⲆⵠ[210] = Bf(60, 60, 0, ⵠⵠ[981], 3);
    this.ⲆⲆⵠ[210].id = 210;
    this.ⲆⲆⵠ[211] = Bf(60, 60, 0, ⵠⵠ[987], 3);
    this.ⲆⲆⵠ[211].id = 211;
    this.ⲆⲆⵠ[41] = Bf(60, 60, 0, ⵠⵠ[880], 3);
    this.ⲆⲆⵠ[41].id = 41;
    this.ⲆⲆⵠ[42] = Bf(60, 60, 0, ⵠⵠ[882], 3);
    this.ⲆⲆⵠ[42].id = 42;
    this.ⲆⲆⵠ[12] = Bf(60, 60, 0, ⵠⵠ[401], 3);
    this.ⲆⲆⵠ[12].id = 12;
    this.ⲆⲆⵠ[16] = Bf(60, 60, 0, ⵠⵠ[874], 3);
    this.ⲆⲆⵠ[16].id = 16;
    this.ⲆⲆⵠ[196] = Bf(60, 60, 0, ⵠⵠ[196], 3);
    this.ⲆⲆⵠ[196].id = 196;
    this.ⲆⲆⵠ[18] = Bf(60, 60, 0, ⵠⵠ[901], 3);
    this.ⲆⲆⵠ[18].id = 18;
    this.ⲆⲆⵠ[197] = Bf(60, 60, 0, ⵠⵠ[197], 3);
    this.ⲆⲆⵠ[197].id = 197;
    this.ⲆⲆⵠ[198] = Bf(60, 60, 0, ⵠⵠ[907], 3);
    this.ⲆⲆⵠ[198].id = 198;
    this.ⲆⲆⵠ[61] = Bf(60, 60, 0, ⵠⵠ[910], 3);
    this.ⲆⲆⵠ[61].id = 61;
    this.ⲆⲆⵠ[201] = Bf(60, 60, 0, ⵠⵠ[870], 3);
    this.ⲆⲆⵠ[201].id = 201;
    this.ⲆⲆⵠ[200] = Bf(60, 60, 0, ⵠⵠ[200], 3);
    this.ⲆⲆⵠ[200].id = 200;
    this.ⲆⲆⵠ[199] = Bf(60, 60, 0, ⵠⵠ[865], 3);
    this.ⲆⲆⵠ[199].id = 199;
    this.ᐃΔⵠ = [];
    this.ᐃΔⵠ[35] = Bf(60, 60, 0, ⵠⵠ[254], 3);
    this.ᐃΔⵠ[35].id = 35;
    this.ᐃΔⵠ[5] = Bf(60, 60, 0, ⵠⵠ[256], 3);
    this.ᐃΔⵠ[5].id = 5;
    this.ᐃΔⵠ[0] = Bf(60, 60, 0, ⵠⵠ[302], 3);
    this.ᐃΔⵠ[0].id = 0;
    this.ᐃΔⵠ[3] = Bf(60, 60, 0, ⵠⵠ[262], 3);
    this.ᐃΔⵠ[3].id = 3;
    this.ᐃΔⵠ[55] = Bf(60, 60, 0, ⵠⵠ[318], 3);
    this.ᐃΔⵠ[55].id = 55;
    this.ᐃΔⵠ[67] = Bf(60, 60, 0, ⵠⵠ[320], 3);
    this.ᐃΔⵠ[67].id = 67;
    this.ᐃΔⵠ[40] = Bf(60, 60, 0, ⵠⵠ[284], 3);
    this.ᐃΔⵠ[40].id = 40;
    this.ᐃΔⵠ[6] = Bf(60, 60, 0, ⵠⵠ[295], 3);
    this.ᐃΔⵠ[6].id = 6;
    this.ᐃΔⵠ[7] = Bf(60, 60, 0, ⵠⵠ[257], 3);
    this.ᐃΔⵠ[7].id = 7;
    this.ᐃΔⵠ[36] = Bf(60, 60, 0, ⵠⵠ[290], 3);
    this.ᐃΔⵠ[36].id = 36;
    this.ᐃΔⵠ[34] = Bf(60, 60, 0, ⵠⵠ[830], 3);
    this.ᐃΔⵠ[34].id = 34;
    this.ᐃΔⵠ[37] = Bf(60, 60, 0, ⵠⵠ[291], 3);
    this.ᐃΔⵠ[37].id = 37;
    this.ᐃΔⵠ[4] = Bf(60, 60, 0, ⵠⵠ[314], 3);
    this.ᐃΔⵠ[4].id = 4;
    this.ᐃΔⵠ[49] = Bf(60, 60, 0, ⵠⵠ[325], 3);
    this.ᐃΔⵠ[49].id = 49;
    this.ᐃΔⵠ[1] = Bf(60, 60, 0, ⵠⵠ[327], 3);
    this.ᐃΔⵠ[1].id = 1;
    this.ᐃΔⵠ[54] = Bf(60, 60, 0, ⵠⵠ[304], 3);
    this.ᐃΔⵠ[54].id = 54;
    this.ᐃΔⵠ[56] = Bf(60, 60, 0, ⵠⵠ[263], 3);
    this.ᐃΔⵠ[56].id = 56;
    this.ᐃΔⵠ[57] = Bf(60, 60, 0, ⵠⵠ[265], 3);
    this.ᐃΔⵠ[57].id = 57;
    this.ᐃΔⵠ[58] = Bf(60, 60, 0, ⵠⵠ[332], 3);
    this.ᐃΔⵠ[58].id = 58;
    this.ᐃΔⵠ[61] = Bf(60, 60, 0, ⵠⵠ[268], 3);
    this.ᐃΔⵠ[61].id = 61;
    this.ᐃΔⵠ[79] = Bf(60, 60, 0, ⵠⵠ[338], 3);
    this.ᐃΔⵠ[79].id = 79;
    this.ᐃΔⵠ[68] = Bf(60, 60, 0, ⵠⵠ[360], 3);
    this.ᐃΔⵠ[68].id = 68;
    this.ᐃΔⵠ[69] = Bf(60, 60, 0, ⵠⵠ[363], 3);
    this.ᐃΔⵠ[69].id = 69;
    this.ᐃΔⵠ[70] = Bf(60, 60, 0, ⵠⵠ[365], 3);
    this.ᐃΔⵠ[70].id = 70;
    this.ᐃΔⵠ[100] = Bf(60, 60, 0, ⵠⵠ[367], 3);
    this.ᐃΔⵠ[100].id = 100;
    this.ᐃΔⵠ[83] = Bf(60, 60, 0, ⵠⵠ[370], 3);
    this.ᐃΔⵠ[83].id = 83;
    this.ᐃΔⵠ[62] = Bf(60, 60, 0, ⵠⵠ[371], 3);
    this.ᐃΔⵠ[62].id = 62;
    this.ᐃΔⵠ[63] = Bf(60, 60, 0, ⵠⵠ[374], 3);
    this.ᐃΔⵠ[63].id = 63;
    this.ᐃΔⵠ[64] = Bf(60, 60, 0, ⵠⵠ[377], 3);
    this.ᐃΔⵠ[64].id = 64;
    this.ᐃΔⵠ[83] = Bf(60, 60, 0, ⵠⵠ[370], 3);
    this.ᐃΔⵠ[83].id = 83;
    this.ᐃΔⵠ[84] = Bf(60, 60, 0, ⵠⵠ[380], 3);
    this.ᐃΔⵠ[84].id = 84;
    this.ᐃΔⵠ[25] = Bf(60, 60, 0, ⵠⵠ[402], 3);
    this.ᐃΔⵠ[25].id = 25;
    this.ᐃΔⵠ[26] = Bf(60, 60, 0, ⵠⵠ[396], 3);
    this.ᐃΔⵠ[26].id = 26;
    this.ᐃΔⵠ[27] = Bf(60, 60, 0, ⵠⵠ[399], 3);
    this.ᐃΔⵠ[27].id = 27;
    this.ᐃΔⵠ[28] = Bf(60, 60, 0, ⵠⵠ[405], 3);
    this.ᐃΔⵠ[28].id = 28;
    this.ᐃΔⵠ[31] = Bf(60, 60, 0, ⵠⵠ[876], 3);
    this.ᐃΔⵠ[31].id = 31;
    this.ᐃΔⵠ[2] = Bf(60, 60, 0, ⵠⵠ[409], 3);
    this.ᐃΔⵠ[2].id = 2;
    this.ᐃΔⵠ[80] = Bf(60, 60, 0, ⵠⵠ[421], 3);
    this.ᐃΔⵠ[80].id = 80;
    this.ᐃΔⵠ[81] = Bf(60, 60, 0, ⵠⵠ[424], 3);
    this.ᐃΔⵠ[81].id = 81;
    this.ᐃΔⵠ[Gr.ⵠΔⵠᐃⵠ] = Bf(60, 60, 0, ⵠⵠ[1228], 3);
    this.ᐃΔⵠ[Gr.ⵠΔⵠᐃⵠ].id = Gr.ⵠΔⵠᐃⵠ;
    this.ᐃΔⵠ[86] = Bf(60, 60, 0, ⵠⵠ[1231], 3);
    this.ᐃΔⵠ[86].id = 86;
    this.ᐃΔⵠ[98] = Bf(60, 60, 0, ⵠⵠ[1138], 3);
    this.ᐃΔⵠ[98].id = 98;
    this.ᐃΔⵠ[99] = Bf(60, 60, 0, ⵠⵠ[1141], 3);
    this.ᐃΔⵠ[99].id = 99;
    this.ᐃΔⵠ[131] = Bf(60, 60, 0, ⵠⵠ[570], 3);
    this.ᐃΔⵠ[131].id = 131;
    this.ᐃΔⵠ[132] = Bf(60, 60, 0, ⵠⵠ[1168], 3);
    this.ᐃΔⵠ[132].id = 132;
    this.ᐃΔⵠ[145] = Bf(60, 60, 0, ⵠⵠ[1238], 3);
    this.ᐃΔⵠ[145].id = 145;
    this.ᐃΔⵠ[133] = Bf(60, 60, 0, ⵠⵠ[573], 3);
    this.ᐃΔⵠ[133].id = 133;
    this.ᐃΔⵠ[134] = Bf(60, 60, 0, ⵠⵠ[1171], 3);
    this.ᐃΔⵠ[134].id = 134;
    this.ᐃΔⵠ[146] = Bf(60, 60, 0, ⵠⵠ[1241], 3);
    this.ᐃΔⵠ[146].id = 146;
    this.ᐃΔⵠ[135] = Bf(60, 60, 0, ⵠⵠ[576], 3);
    this.ᐃΔⵠ[135].id = 135;
    this.ᐃΔⵠ[136] = Bf(60, 60, 0, ⵠⵠ[1174], 3);
    this.ᐃΔⵠ[136].id = 136;
    this.ᐃΔⵠ[147] = Bf(60, 60, 0, ⵠⵠ[1244], 3);
    this.ᐃΔⵠ[147].id = 147;
    this.ᐃΔⵠ[137] = Bf(60, 60, 0, ⵠⵠ[579], 3);
    this.ᐃΔⵠ[137].id = 137;
    this.ᐃΔⵠ[138] = Bf(60, 60, 0, ⵠⵠ[1177], 3);
    this.ᐃΔⵠ[138].id = 138;
    this.ᐃΔⵠ[167] = Bf(60, 60, 0, ⵠⵠ[1256], 3);
    this.ᐃΔⵠ[167].id = 167;
    this.ᐃΔⵠ[168] = Bf(60, 60, 0, ⵠⵠ[1259], 3);
    this.ᐃΔⵠ[168].id = 168;
    this.ᐃΔⵠ[169] = Bf(60, 60, 0, ⵠⵠ[1262], 3);
    this.ᐃΔⵠ[169].id = 169;
    this.ᐃΔⵠ[170] = Bf(60, 60, 0, ⵠⵠ[1265], 3);
    this.ᐃΔⵠ[170].id = 170;
    this.ᐃΔⵠ[171] = Bf(60, 60, 0, ⵠⵠ[1268], 3);
    this.ᐃΔⵠ[171].id = 171;
    this.ᐃΔⵠ[172] = Bf(60, 60, 0, ⵠⵠ[1271], 3);
    this.ᐃΔⵠ[172].id = 172;
    this.ᐃΔⵠ[148] = Bf(60, 60, 0, ⵠⵠ[1247], 3);
    this.ᐃΔⵠ[148].id = 148;
    this.ᐃΔⵠ[139] = Bf(60, 60, 0, ⵠⵠ[582], 3);
    this.ᐃΔⵠ[139].id = 139;
    this.ᐃΔⵠ[140] = Bf(60, 60, 0, ⵠⵠ[1180], 3);
    this.ᐃΔⵠ[140].id = 140;
    this.ᐃΔⵠ[149] = Bf(60, 60, 0, ⵠⵠ[1250], 3);
    this.ᐃΔⵠ[149].id = 149;
    this.ᐃΔⵠ[141] = Bf(60, 60, 0, ⵠⵠ[585], 3);
    this.ᐃΔⵠ[141].id = 141;
    this.ᐃΔⵠ[142] = Bf(60, 60, 0, ⵠⵠ[1183], 3);
    this.ᐃΔⵠ[142].id = 142;
    this.ᐃΔⵠ[150] = Bf(60, 60, 0, ⵠⵠ[1253], 3);
    this.ᐃΔⵠ[150].id = 150;
    this.ᐃΔⵠ[143] = Bf(60, 60, 0, ⵠⵠ[588], 3);
    this.ᐃΔⵠ[143].id = 143;
    this.ᐃΔⵠ[144] = Bf(60, 60, 0, ⵠⵠ[1186], 3);
    this.ᐃΔⵠ[144].id = 144;
    this.ᐃΔⵠ[87] = Bf(60, 60, 0, ⵠⵠ[827], 3);
    this.ᐃΔⵠ[87].id = 87;
    this.ᐃΔⵠ[88] = Bf(60, 60, 0, ⵠⵠ[430], 3);
    this.ᐃΔⵠ[88].id = 88;
    this.ᐃΔⵠ[89] = Bf(60, 60, 0, ⵠⵠ[433], 3);
    this.ᐃΔⵠ[89].id = 89;
    this.ᐃΔⵠ[90] = Bf(60, 60, 0, ⵠⵠ[436], 3);
    this.ᐃΔⵠ[90].id = 90;
    this.ᐃΔⵠ[24] = Bf(60, 60, 0, ⵠⵠ[439], 3);
    this.ᐃΔⵠ[24].id = 24;
    this.ᐃΔⵠ[101] = Bf(60, 60, 0, ⵠⵠ[442], 3);
    this.ᐃΔⵠ[101].id = 101;
    this.ᐃΔⵠ[100] = Bf(60, 60, 0, ⵠⵠ[367], 3);
    this.ᐃΔⵠ[100].id = 100;
    this.ᐃΔⵠ[38] = Bf(60, 60, 0, ⵠⵠ[456], 3);
    this.ᐃΔⵠ[38].id = 38;
    this.ᐃΔⵠ[Gr.ⵠᐃⲆⲆⵠ] = Bf(60, 60, 0, ⵠⵠ[861], 3);
    this.ᐃΔⵠ[Gr.ⵠᐃⲆⲆⵠ].id = Gr.ⵠᐃⲆⲆⵠ;
    this.ᐃΔⵠ[8] = Bf(60, 60, 0, ⵠⵠ[460], 3);
    this.ᐃΔⵠ[8].id = 8;
    this.ᐃΔⵠ[9] = Bf(60, 60, 0, ⵠⵠ[1019], 3);
    this.ᐃΔⵠ[9].id = 9;
    this.ᐃΔⵠ[29] = Bf(60, 60, 0, ⵠⵠ[473], 3);
    this.ᐃΔⵠ[29].id = 29;
    this.ᐃΔⵠ[10] = Bf(60, 60, 0, ⵠⵠ[478], 3);
    this.ᐃΔⵠ[10].id = 10;
    this.ᐃΔⵠ[11] = Bf(60, 60, 0, ⵠⵠ[481], 3);
    this.ᐃΔⵠ[11].id = 11;
    this.ᐃΔⵠ[12] = Bf(60, 60, 0, ⵠⵠ[484], 3);
    this.ᐃΔⵠ[12].id = 12;
    this.ᐃΔⵠ[13] = Bf(60, 60, 0, ⵠⵠ[487], 3);
    this.ᐃΔⵠ[13].id = 13;
    this.ᐃΔⵠ[14] = Bf(60, 60, 0, ⵠⵠ[490], 3);
    this.ᐃΔⵠ[14].id = 14;
    this.ᐃΔⵠ[59] = Bf(60, 60, 0, ⵠⵠ[493], 3);
    this.ᐃΔⵠ[59].id = 59;
    this.ᐃΔⵠ[71] = Bf(60, 60, 0, ⵠⵠ[496], 3);
    this.ᐃΔⵠ[71].id = 71;
    this.ᐃΔⵠ[65] = Bf(60, 60, 0, ⵠⵠ[498], 3);
    this.ᐃΔⵠ[65].id = 65;
    this.ᐃΔⵠ[85] = Bf(60, 60, 0, ⵠⵠ[503], 3);
    this.ᐃΔⵠ[85].id = 85;
    this.ᐃΔⵠ[102] = Bf(60, 60, 0, ⵠⵠ[515], 3);
    this.ᐃΔⵠ[102].id = 102;
    this.ᐃΔⵠ[103] = Bf(60, 60, 0, ⵠⵠ[519], 3);
    this.ᐃΔⵠ[103].id = 103;
    this.ᐃΔⵠ[115] = Bf(60, 60, 0, ⵠⵠ[530], 3);
    this.ᐃΔⵠ[115].id = 115;
    this.ᐃΔⵠ[104] = Bf(60, 60, 0, ⵠⵠ[533], 3);
    this.ᐃΔⵠ[104].id = 104;
    this.ᐃΔⵠ[105] = Bf(60, 60, 0, ⵠⵠ[555], 3);
    this.ᐃΔⵠ[105].id = 105;
    this.ᐃΔⵠ[91] = Bf(60, 60, 0, ⵠⵠ[542], 3);
    this.ᐃΔⵠ[91].id = 91;
    this.ᐃΔⵠ[15] = Bf(60, 60, 0, ⵠⵠ[551], 3);
    this.ᐃΔⵠ[15].id = 15;
    this.ᐃΔⵠ[106] = Bf(60, 60, 0, ⵠⵠ[604], 3);
    this.ᐃΔⵠ[106].id = 106;
    this.ᐃΔⵠ[108] = Bf(60, 60, 0, ⵠⵠ[1235], 3);
    this.ᐃΔⵠ[108].id = 108;
    this.ᐃΔⵠ[163] = Bf(60, 60, 0, ⵠⵠ[1027], 3);
    this.ᐃΔⵠ[163].id = 163;
    this.ᐃΔⵠ[164] = Bf(60, 60, 0, ⵠⵠ[1030], 3);
    this.ᐃΔⵠ[164].id = 164;
    this.ᐃΔⵠ[166] = Bf(60, 60, 0, ⵠⵠ[1116], 3);
    this.ᐃΔⵠ[166].id = 166;
    this.ᐃΔⵠ[165] = Bf(60, 60, 0, ⵠⵠ[1048], 3);
    this.ᐃΔⵠ[165].id = 165;
    this.ᐃΔⵠ[Gr.ⵠΔᐃⵠᐃ] = Bf(60, 60, 0, ⵠⵠ[1051], 3);
    this.ᐃΔⵠ[Gr.ⵠΔᐃⵠᐃ].id = Gr.ⵠΔᐃⵠᐃ;
    this.ᐃΔⵠ[Gr.ᐃΔᐃᐃⵠ] = Bf(60, 60, 0, ⵠⵠ[1082], 3);
    this.ᐃΔⵠ[Gr.ᐃΔᐃᐃⵠ].id = Gr.ᐃΔᐃᐃⵠ;
    this.ᐃΔⵠ[Gr.ᐃᐃΔⵠⲆ] = Bf(60, 60, 0, ⵠⵠ[1226], 3);
    this.ᐃΔⵠ[Gr.ᐃᐃΔⵠⲆ].id = Gr.ᐃᐃΔⵠⲆ;
    this.ᐃΔⵠ[Gr.ΔΔΔΔᐃ] = Bf(60, 60, 0, ⵠⵠ[1191], 3);
    this.ᐃΔⵠ[Gr.ΔΔΔΔᐃ].id = Gr.ΔΔΔΔᐃ;
    this.ᐃΔⵠ[110] = Bf(60, 60, 0, ⵠⵠ[611], 3);
    this.ᐃΔⵠ[110].id = 110;
    this.ᐃΔⵠ[111] = Bf(60, 60, 0, ⵠⵠ[715], 3);
    this.ᐃΔⵠ[111].id = 111;
    this.ᐃΔⵠ[112] = Bf(60, 60, 0, ⵠⵠ[715], 3);
    this.ᐃΔⵠ[112].id = 112;
    this.ᐃΔⵠ[113] = Bf(60, 60, 0, ⵠⵠ[715], 3);
    this.ᐃΔⵠ[113].id = 113;
    this.ᐃΔⵠ[16] = Bf(60, 60, 0, ⵠⵠ[618], 3);
    this.ᐃΔⵠ[16].id = 16;
    this.ᐃΔⵠ[17] = Bf(60, 60, 0, ⵠⵠ[700], 3);
    this.ᐃΔⵠ[17].id = 17;
    this.ᐃΔⵠ[18] = Bf(60, 60, 0, ⵠⵠ[704], 3);
    this.ᐃΔⵠ[18].id = 18;
    this.ᐃΔⵠ[19] = Bf(60, 60, 0, ⵠⵠ[706], 3);
    this.ᐃΔⵠ[19].id = 19;
    this.ᐃΔⵠ[122] = Bf(60, 60, 0, ⵠⵠ[711], 3);
    this.ᐃΔⵠ[122].id = 122;
    this.ᐃΔⵠ[20] = Bf(60, 60, 0, ⵠⵠ[627], 3);
    this.ᐃΔⵠ[20].id = 20;
    this.ᐃΔⵠ[41] = Bf(60, 60, 0, ⵠⵠ[632], 3);
    this.ᐃΔⵠ[41].id = 41;
    this.ᐃΔⵠ[52] = Bf(60, 60, 0, ⵠⵠ[635], 3);
    this.ᐃΔⵠ[52].id = 52;
    this.ᐃΔⵠ[114] = Bf(60, 60, 0, ⵠⵠ[643], 3);
    this.ᐃΔⵠ[114].id = 114;
    this.ᐃΔⵠ[94] = Bf(60, 60, 0, ⵠⵠ[647], 3);
    this.ᐃΔⵠ[94].id = 94;
    this.ᐃΔⵠ[93] = Bf(60, 60, 0, ⵠⵠ[650], 3);
    this.ᐃΔⵠ[93].id = 93;
    this.ᐃΔⵠ[21] = Bf(60, 60, 0, ⵠⵠ[654], 3);
    this.ᐃΔⵠ[21].id = 21;
    this.ᐃΔⵠ[53] = Bf(60, 60, 0, ⵠⵠ[660], 3);
    this.ᐃΔⵠ[53].id = 53;
    this.ᐃΔⵠ[51] = Bf(60, 60, 0, ⵠⵠ[690], 3);
    this.ᐃΔⵠ[51].id = 51;
    this.ᐃΔⵠ[50] = Bf(60, 60, 0, ⵠⵠ[666], 3);
    this.ᐃΔⵠ[50].id = 50;
    this.ᐃΔⵠ[109] = Bf(60, 60, 0, ⵠⵠ[684], 3);
    this.ᐃΔⵠ[109].id = 109;
    this.ᐃΔⵠ[124] = Bf(60, 60, 0, ⵠⵠ[718], 3);
    this.ᐃΔⵠ[124].id = 124;
    this.ᐃΔⵠ[125] = Bf(60, 60, 0, ⵠⵠ[730], 3);
    this.ᐃΔⵠ[125].id = 125;
    this.ᐃΔⵠ[126] = Bf(60, 60, 0, ⵠⵠ[734], 3);
    this.ᐃΔⵠ[126].id = 126;
    this.ᐃΔⵠ[129] = Bf(60, 60, 0, ⵠⵠ[563], 3);
    this.ᐃΔⵠ[129].id = 129;
    this.ᐃΔⵠ[151] = Bf(60, 60, 0, ⵠⵠ[758], 3);
    this.ᐃΔⵠ[151].id = 151;
    this.ᐃΔⵠ[152] = Bf(60, 60, 0, ⵠⵠ[762], 3);
    this.ᐃΔⵠ[152].id = 152;
    this.ᐃΔⵠ[153] = Bf(60, 60, 0, ⵠⵠ[770], 3);
    this.ᐃΔⵠ[153].id = 153;
    this.ᐃΔⵠ[154] = Bf(60, 60, 0, ⵠⵠ[768], 3);
    this.ᐃΔⵠ[154].id = 154;
    this.ᐃΔⵠ[155] = Bf(60, 60, 0, ⵠⵠ[772], 3);
    this.ᐃΔⵠ[155].id = 155;
    this.ᐃΔⵠ[157] = Bf(60, 60, 0, ⵠⵠ[777], 3);
    this.ᐃΔⵠ[157].id = 157;
    this.ᐃΔⵠ[156] = Bf(60, 60, 0, ⵠⵠ[780], 3);
    this.ᐃΔⵠ[156].id = 156;
    this.ᐃΔⵠ[158] = Bf(60, 60, 0, ⵠⵠ[784], 3);
    this.ᐃΔⵠ[158].id = 158;
    this.ᐃΔⵠ[159] = Bf(60, 60, 0, ⵠⵠ[785], 3);
    this.ᐃΔⵠ[159].id = 159;
    this.ᐃΔⵠ[160] = Bf(60, 60, 0, ⵠⵠ[791], 3);
    this.ᐃΔⵠ[160].id = 160;
    this.ᐃΔⵠ[161] = Bf(60, 60, 0, ⵠⵠ[799], 3);
    this.ᐃΔⵠ[161].id = 161;
    this.ᐃΔⵠ[42] = Bf(60, 60, 0, ⵠⵠ[809], 3);
    this.ᐃΔⵠ[42].id = 42;
    this.ᐃΔⵠ[43] = Bf(60, 60, 0, ⵠⵠ[835], 3);
    this.ᐃΔⵠ[43].id = 43;
    this.ᐃΔⵠ[107] = Bf(60, 60, 0, ⵠⵠ[843], 3);
    this.ᐃΔⵠ[107].id = 107;
    this.ᐃΔⵠ[44] = Bf(60, 60, 0, ⵠⵠ[846], 3);
    this.ᐃΔⵠ[44].id = 44;
    this.ᐃΔⵠ[46] = Bf(60, 60, 0, ⵠⵠ[960], 3);
    this.ᐃΔⵠ[46].id = 46;
    this.ᐃΔⵠ[45] = Bf(60, 60, 0, ⵠⵠ[950], 3);
    this.ᐃΔⵠ[45].id = 45;
    this.ᐃΔⵠ[47] = Bf(60, 60, 0, ⵠⵠ[967], 3);
    this.ᐃΔⵠ[47].id = 47;
    this.ᐃΔⵠ[48] = Bf(60, 60, 0, ⵠⵠ[982], 3);
    this.ᐃΔⵠ[48].id = 48;
    this.ᐃΔⵠ[25] = Bf(60, 60, 0, ⵠⵠ[402], 3);
    this.ᐃΔⵠ[25].id = 25;
    this.ᐃΔⵠ[31] = Bf(60, 60, 0, ⵠⵠ[876], 3);
    this.ᐃΔⵠ[31].id = 31;
    this.ᐃΔⵠ[33] = Bf(60, 60, 0, ⵠⵠ[900], 3);
    this.ᐃΔⵠ[33].id = 33;
    this.ᐃΔⵠ[162] = Bf(60, 60, 0, ⵠⵠ[909], 3);
    this.ᐃΔⵠ[162].id = 162;
    this.ᐃΔⵠ[128] = Bf(60, 60, 0, ⵠⵠ[912], 3);
    this.ᐃΔⵠ[128].id = 128;
    this.ⵠⲆΔ[53] = Bf(68, 68, 0, ⵠⵠ[976], 3);
    this.ⵠⲆΔ[53].id = 53;
    this.ⲆⲆⵠ[53] = Bf(60, 60, 0, ⵠⵠ[975], 3);
    this.ⲆⲆⵠ[53].id = 53;
    this.ᐃΔⵠ[22] = Bf(60, 60, 0, ⵠⵠ[977], 3);
    this.ᐃΔⵠ[22].id = 22;
    this.ⵠⲆΔ[54] = Bf(68, 68, 0, ⵠⵠ[979], 3);
    this.ⵠⲆΔ[54].id = 54;
    this.ⲆⲆⵠ[54] = Bf(60, 60, 0, ⵠⵠ[978], 3);
    this.ⲆⲆⵠ[54].id = 54;
    this.ᐃΔⵠ[23] = Bf(60, 60, 0, ⵠⵠ[980], 3);
    this.ᐃΔⵠ[23].id = 23;
    this.ⵠⲆΔ[56] = Bf(68, 68, 0, ⵠⵠ[713], 3);
    this.ⵠⲆΔ[56].id = 56;
    this.ⲆⲆⵠ[56] = Bf(60, 60, 0, ⵠⵠ[712], 3);
    this.ⲆⲆⵠ[56].id = 56;
    this.ᐃΔⵠ[123] = Bf(60, 60, 0, ⵠⵠ[714], 3);
    this.ᐃΔⵠ[123].id = 123;
    this.ⵠⲆΔ[82] = Bf(68, 68, 0, ⵠⵠ[428], 3);
    this.ⵠⲆΔ[82].id = 82;
    this.ⲆⲆⵠ[82] = Bf(60, 60, 0, ⵠⵠ[426], 3);
    this.ⲆⲆⵠ[82].id = 82;
    this.ᐃΔⵠ[82] = Bf(60, 60, 0, ⵠⵠ[427], 3);
    this.ᐃΔⵠ[82].id = 82;
    this.ⵠⲆΔ[235] = Bf(68, 68, 0, ⵠⵠ[1159], 3);
    this.ⵠⲆΔ[235].id = 235;
    this.ⲆⲆⵠ[235] = Bf(60, 60, 0, ⵠⵠ[1158], 3);
    this.ⲆⲆⵠ[235].id = 235;
    this.ⵠⲆΔ[238] = Bf(68, 68, 0, ⵠⵠ[1188], 3);
    this.ⵠⲆΔ[238].id = 238;
    this.ⲆⲆⵠ[238] = Bf(60, 60, 0, ⵠⵠ[1187], 3);
    this.ⲆⲆⵠ[238].id = 238;
    this.ⵠⲆΔ[236] = Bf(68, 68, 0, ⵠⵠ[1161], 3);
    this.ⵠⲆΔ[236].id = 236;
    this.ⲆⲆⵠ[236] = Bf(60, 60, 0, ⵠⵠ[1160], 3);
    this.ⲆⲆⵠ[236].id = 236;
    this.ⵠⲆΔ[152] = Bf(68, 68, 0, ⵠⵠ[1197], 3);
    this.ⵠⲆΔ[152].id = 152;
    this.ⲆⲆⵠ[152] = Bf(60, 60, 0, ⵠⵠ[1195], 3);
    this.ⲆⲆⵠ[152].id = 152;
    this.ᐃΔⵠ[116] = Bf(60, 60, 0, ⵠⵠ[1196], 3);
    this.ᐃΔⵠ[116].id = 116;
    this.ⵠⲆΔ[212] = Bf(68, 68, 0, ⵠⵠ[992], 3);
    this.ⵠⲆΔ[212].id = 212;
    this.ⲆⲆⵠ[212] = Bf(60, 60, 0, ⵠⵠ[991], 3);
    this.ⲆⲆⵠ[212].id = 212;
    this.ᐃΔⵠ[73] = Bf(60, 60, 0, ⵠⵠ[990], 3);
    this.ᐃΔⵠ[73].id = 73;
    this.ⵠⲆΔ[213] = Bf(68, 68, 0, ⵠⵠ[995], 3);
    this.ⵠⲆΔ[213].id = 213;
    this.ⲆⲆⵠ[213] = Bf(60, 60, 0, ⵠⵠ[994], 3);
    this.ⲆⲆⵠ[213].id = 213;
    this.ᐃΔⵠ[74] = Bf(60, 60, 0, ⵠⵠ[993], 3);
    this.ᐃΔⵠ[74].id = 74;
    this.ⵠⲆΔ[214] = Bf(68, 68, 0, ⵠⵠ[998], 3);
    this.ⵠⲆΔ[214].id = 214;
    this.ⲆⲆⵠ[214] = Bf(60, 60, 0, ⵠⵠ[997], 3);
    this.ⲆⲆⵠ[214].id = 214;
    this.ᐃΔⵠ[75] = Bf(60, 60, 0, ⵠⵠ[996], 3);
    this.ᐃΔⵠ[75].id = 75;
    this.ⵠⲆΔ[215] = Bf(68, 68, 0, ⵠⵠ[1001], 3);
    this.ⵠⲆΔ[215].id = 215;
    this.ⲆⲆⵠ[215] = Bf(60, 60, 0, ⵠⵠ[1000], 3);
    this.ⲆⲆⵠ[215].id = 215;
    this.ᐃΔⵠ[76] = Bf(60, 60, 0, ⵠⵠ[999], 3);
    this.ᐃΔⵠ[76].id = 76;
    this.ⵠⲆΔ[216] = Bf(68, 68, 0, ⵠⵠ[1004], 3);
    this.ⵠⲆΔ[216].id = 216;
    this.ⲆⲆⵠ[216] = Bf(60, 60, 0, ⵠⵠ[1003], 3);
    this.ⲆⲆⵠ[216].id = 216;
    this.ᐃΔⵠ[77] = Bf(60, 60, 0, ⵠⵠ[1002], 3);
    this.ᐃΔⵠ[77].id = 77;
    this.ⵠⲆΔ[220] = Bf(68, 68, 0, ⵠⵠ[1007], 3);
    this.ⵠⲆΔ[220].id = 220;
    this.ⲆⲆⵠ[220] = Bf(60, 60, 0, ⵠⵠ[1006], 3);
    this.ⲆⲆⵠ[220].id = 220;
    this.ᐃΔⵠ[78] = Bf(60, 60, 0, ⵠⵠ[1005], 3);
    this.ᐃΔⵠ[78].id = 78;
    this.ⵠⲆΔ[217] = Bf(68, 68, 0, ⵠⵠ[1016], 3);
    this.ⵠⲆΔ[217].id = 217;
    this.ⲆⲆⵠ[217] = Bf(60, 60, 0, ⵠⵠ[1015], 3);
    this.ⲆⲆⵠ[217].id = 217;
    this.ᐃΔⵠ[60] = Bf(60, 60, 0, ⵠⵠ[1014], 3);
    this.ᐃΔⵠ[60].id = 60;
    this.ⵠⲆΔ[219] = Bf(68, 68, 0, ⵠⵠ[1013], 3);
    this.ⵠⲆΔ[219].id = 219;
    this.ⲆⲆⵠ[219] = Bf(60, 60, 0, ⵠⵠ[1012], 3);
    this.ⲆⲆⵠ[219].id = 219;
    this.ᐃΔⵠ[72] = Bf(60, 60, 0, ⵠⵠ[1011], 3);
    this.ᐃΔⵠ[72].id = 72;
    this.ⵠⲆΔ[218] = Bf(68, 68, 0, ⵠⵠ[1010], 3);
    this.ⵠⲆΔ[218].id = 218;
    this.ⲆⲆⵠ[218] = Bf(60, 60, 0, ⵠⵠ[1009], 3);
    this.ⲆⲆⵠ[218].id = 218;
    this.ᐃΔⵠ[66] = Bf(60, 60, 0, ⵠⵠ[1008], 3);
    this.ᐃΔⵠ[66].id = 66;
    this.ⵠⲆΔ[153] = Bf(68, 68, 0, ⵠⵠ[1201], 3);
    this.ⵠⲆΔ[153].id = 153;
    this.ⲆⲆⵠ[153] = Bf(60, 60, 0, ⵠⵠ[1199], 3);
    this.ⲆⲆⵠ[153].id = 153;
    this.ᐃΔⵠ[117] = Bf(60, 60, 0, ⵠⵠ[1200], 3);
    this.ᐃΔⵠ[117].id = 117;
    this.ⵠⲆΔ[154] = Bf(68, 68, 0, ⵠⵠ[1205], 3);
    this.ⵠⲆΔ[154].id = 154;
    this.ⲆⲆⵠ[154] = Bf(60, 60, 0, ⵠⵠ[1203], 3);
    this.ⲆⲆⵠ[154].id = 154;
    this.ᐃΔⵠ[118] = Bf(60, 60, 0, ⵠⵠ[1204], 3);
    this.ᐃΔⵠ[118].id = 118;
    this.ⵠⲆΔ[155] = Bf(68, 68, 0, ⵠⵠ[1209], 3);
    this.ⵠⲆΔ[155].id = 155;
    this.ⲆⲆⵠ[155] = Bf(60, 60, 0, ⵠⵠ[1207], 3);
    this.ⲆⲆⵠ[155].id = 155;
    this.ᐃΔⵠ[119] = Bf(60, 60, 0, ⵠⵠ[1208], 3);
    this.ᐃΔⵠ[119].id = 119;
    this.ⵠⲆΔ[156] = Bf(68, 68, 0, ⵠⵠ[1213], 3);
    this.ⵠⲆΔ[156].id = 156;
    this.ⲆⲆⵠ[156] = Bf(60, 60, 0, ⵠⵠ[1211], 3);
    this.ⲆⲆⵠ[156].id = 156;
    this.ᐃΔⵠ[120] = Bf(60, 60, 0, ⵠⵠ[1212], 3);
    this.ᐃΔⵠ[120].id = 120;
    this.ⵠⲆΔ[157] = Bf(68, 68, 0, ⵠⵠ[1217], 3);
    this.ⵠⲆΔ[157].id = 157;
    this.ⲆⲆⵠ[157] = Bf(60, 60, 0, ⵠⵠ[1215], 3);
    this.ⲆⲆⵠ[157].id = 157;
    this.ᐃΔⵠ[121] = Bf(60, 60, 0, ⵠⵠ[1216], 3);
    this.ᐃΔⵠ[121].id = 121;
    this.ⵠⲆΔ[203] = Bf(68, 68, 0, ⵠⵠ[937], 3);
    this.ⵠⲆΔ[203].id = 203;
    this.ⲆⲆⵠ[203] = Bf(60, 60, 0, ⵠⵠ[936], 3);
    this.ⲆⲆⵠ[203].id = 203;
    this.ⲆⲆⵠ[203].info.ΔΔ[2] = this.ⲆⲆⵠ[203].info.ΔΔ[0];
    this.ⵠⲆΔ[150] = Bf(68, 68, 0, ⵠⵠ[524], 3);
    this.ⵠⲆΔ[150].id = 150;
    this.ⲆⲆⵠ[150] = Bf(60, 60, 0, ⵠⵠ[523], 3);
    this.ⲆⲆⵠ[150].id = 150;
    this.ⲆⲆⵠ[150].info.ΔΔ[2] = this.ⲆⲆⵠ[150].info.ΔΔ[0];
    this.ⵠⲆΔ[202] = Bf(68, 68, 0, ⵠⵠ[939], 3);
    this.ⵠⲆΔ[202].id = 202;
    this.ⲆⲆⵠ[202] = Bf(60, 60, 0, ⵠⵠ[938], 3);
    this.ⲆⲆⵠ[202].id = 202;
    this.ⲆⲆⵠ[202].info.ΔΔ[2] = this.ⲆⲆⵠ[202].info.ΔΔ[0];
    this.ⵠⲆΔ[19] = Bf(68, 68, 0, ⵠⵠ[934], 3);
    this.ⵠⲆΔ[19].id = 19;
    this.ⲆⲆⵠ[19] = Bf(60, 60, 0, ⵠⵠ[932], 3);
    this.ⲆⲆⵠ[19].id = 19;
    this.ᐃΔⵠ[39] = Bf(60, 60, 0, ⵠⵠ[933], 3);
    this.ᐃΔⵠ[39].id = 39;
    this.ⵠⲆΔ[20] = Bf(68, 68, 0, ⵠⵠ[923], 3);
    this.ⵠⲆΔ[20].id = 20;
    this.ⲆⲆⵠ[20] = Bf(60, 60, 0, ⵠⵠ[921], 3);
    this.ⲆⲆⵠ[20].id = 20;
    this.ᐃΔⵠ[95] = Bf(60, 60, 0, ⵠⵠ[922], 3);
    this.ᐃΔⵠ[95].id = 95;
    this.ⵠⲆΔ[21] = Bf(68, 68, 0, ⵠⵠ[927], 3);
    this.ⵠⲆΔ[21].id = 21;
    this.ⲆⲆⵠ[21] = Bf(60, 60, 0, ⵠⵠ[925], 3);
    this.ⲆⲆⵠ[21].id = 21;
    this.ᐃΔⵠ[96] = Bf(60, 60, 0, ⵠⵠ[926], 3);
    this.ᐃΔⵠ[96].id = 96;
    this.ⵠⲆΔ[22] = Bf(68, 68, 0, ⵠⵠ[931], 3);
    this.ⵠⲆΔ[22].id = 22;
    this.ⲆⲆⵠ[22] = Bf(60, 60, 0, ⵠⵠ[929], 3);
    this.ⲆⲆⵠ[22].id = 22;
    this.ᐃΔⵠ[97] = Bf(60, 60, 0, ⵠⵠ[930], 3);
    this.ᐃΔⵠ[97].id = 97;
    this.ⵠⲆΔ[60] = Bf(68, 68, 0, ⵠⵠ[736], 3);
    this.ⵠⲆΔ[60].id = 60;
    this.ⲆⲆⵠ[60] = Bf(60, 60, 0, ⵠⵠ[735], 3);
    this.ⲆⲆⵠ[60].id = 60;
    this.ᐃΔⵠ[127] = Bf(60, 60, 0, ⵠⵠ[737], 3);
    this.ᐃΔⵠ[127].id = 127;
    this.ⵠⲆΔ[90] = Bf(68, 68, 0, ⵠⵠ[739], 3);
    this.ⵠⲆΔ[90].id = 90;
    this.ⲆⲆⵠ[90] = Bf(60, 60, 0, ⵠⵠ[738], 3);
    this.ⲆⲆⵠ[90].id = 90;
    this.ᐃΔⵠ[173] = Bf(60, 60, 0, ⵠⵠ[740], 3);
    this.ᐃΔⵠ[173].id = 173;
    this.ⵠⲆΔ[92] = Bf(68, 68, 0, ⵠⵠ[745], 3);
    this.ⵠⲆΔ[92].id = 92;
    this.ⲆⲆⵠ[92] = Bf(60, 60, 0, ⵠⵠ[744], 3);
    this.ⲆⲆⵠ[92].id = 92;
    this.ᐃΔⵠ[174] = Bf(60, 60, 0, ⵠⵠ[746], 3);
    this.ᐃΔⵠ[174].id = 174;
    this.ⵠⲆΔ[93] = Bf(68, 68, 0, ⵠⵠ[748], 3);
    this.ⵠⲆΔ[93].id = 93;
    this.ⲆⲆⵠ[93] = Bf(60, 60, 0, ⵠⵠ[747], 3);
    this.ⲆⲆⵠ[93].id = 93;
    this.ᐃΔⵠ[175] = Bf(60, 60, 0, ⵠⵠ[749], 3);
    this.ᐃΔⵠ[175].id = 175;
    this.ⵠⲆΔ[91] = Bf(68, 68, 0, ⵠⵠ[742], 3);
    this.ⵠⲆΔ[91].id = 91;
    this.ⲆⲆⵠ[91] = Bf(60, 60, 0, ⵠⵠ[741], 3);
    this.ⲆⲆⵠ[91].id = 91;
    this.ᐃΔⵠ[176] = Bf(60, 60, 0, ⵠⵠ[743], 3);
    this.ᐃΔⵠ[176].id = 176;
    this.ⵠⲆΔ[100] = Bf(68, 68, 0, ⵠⵠ[1165], 3);
    this.ⵠⲆΔ[100].id = 100;
    this.ⲆⲆⵠ[100] = Bf(60, 60, 0, ⵠⵠ[1164], 3);
    this.ⲆⲆⵠ[100].id = 100;
    this.ᐃΔⵠ[Gr.ᐃᐃᐃⵠⲆ] = Bf(60, 60, 0, ⵠⵠ[Cr.ⵠⵠΔⵠᐃⲆⵠΔⵠ], 3);
    this.ᐃΔⵠ[Gr.ᐃᐃᐃⵠⲆ].id = Gr.ᐃᐃᐃⵠⲆ;
    this.ⵠⲆΔ[34] = Bf(68, 68, 0, ⵠⵠ[945], 3);
    this.ⵠⲆΔ[34].id = 34;
    this.ⲆⲆⵠ[34] = Bf(60, 60, 0, ⵠⵠ[943], 3);
    this.ⲆⲆⵠ[34].id = 34;
    this.ᐃΔⵠ[30] = Bf(60, 60, 0, ⵠⵠ[944], 3);
    this.ᐃΔⵠ[30].id = 30;
    this.ⵠⲆΔ[44] = Bf(68, 68, 0, ⵠⵠ[948], 3);
    this.ⵠⲆΔ[44].id = 44;
    this.ⲆⲆⵠ[44] = Bf(60, 60, 0, ⵠⵠ[946], 3);
    this.ⲆⲆⵠ[44].id = 44;
    this.ᐃΔⵠ[92] = Bf(60, 60, 0, ⵠⵠ[947], 3);
    this.ᐃΔⵠ[92].id = 92;
    this.ⵠⲆΔ[17] = Bf(68, 68, 0, ⵠⵠ[878], 3);
    this.ⵠⲆΔ[17].id = 17;
    this.ⲆⲆⵠ[17] = Bf(60, 60, 0, ⵠⵠ[877], 3);
    this.ⲆⲆⵠ[17].id = 17;
    this.ᐃΔⵠ[32] = Bf(60, 60, 0, ⵠⵠ[879], 3);
    this.ᐃΔⵠ[32].id = 32;
    this.ⵠⲆΔ[63] = Bf(68, 68, 0, ⵠⵠ[568], 3);
    this.ⵠⲆΔ[63].id = 63;
    this.ⲆⲆⵠ[63] = Bf(60, 60, 0, ⵠⵠ[566], 3);
    this.ⲆⲆⵠ[63].id = 63;
    this.ᐃΔⵠ[130] = Bf(60, 60, 0, ⵠⵠ[567], 3);
    this.ᐃΔⵠ[130].id = 130;
    this.ⵠⲆΔ[187] = Bf(68, 68, 0, ⵠⵠ[591], 3);
    this.ⵠⲆΔ[187].id = 187;
    this.ⲆⲆⵠ[187] = Bf(60, 60, 0, ⵠⵠ[253], 3);
    this.ⲆⲆⵠ[187].id = 187;
    this.ⵠⲆΔ[Hr.ⵠΔΔΔⵠᐃΔ] = Bf(68, 68, 0, ⵠⵠ[Cr.ᐃⵠⵠⲆΔⵠⲆⵠⵠ], 3);
    this.ⵠⲆΔ[Hr.ⵠΔΔΔⵠᐃΔ].id = Hr.ⵠΔΔΔⵠᐃΔ;
    this.ⲆⲆⵠ[Hr.ⵠΔΔΔⵠᐃΔ] = Bf(60, 60, 0, ⵠⵠ[Cr.ΔⲆⵠᐃΔⵠⲆⲆⵠ], 3);
    this.ⲆⲆⵠ[Hr.ⵠΔΔΔⵠᐃΔ].id = Hr.ⵠΔΔΔⵠᐃΔ;
    this.ⵠⲆΔ[Hr.ᐃΔΔΔᐃⵠⵠ] = Bf(68, 68, 0, ⵠⵠ[Cr.ⵠΔⲆᐃⵠᐃᐃⵠⵠ], 3);
    this.ⵠⲆΔ[Hr.ᐃΔΔΔᐃⵠⵠ].id = Hr.ᐃΔΔΔᐃⵠⵠ;
    this.ⲆⲆⵠ[Hr.ᐃΔΔΔᐃⵠⵠ] = Bf(60, 60, 0, ⵠⵠ[Cr.ᐃᐃΔΔⲆᐃᐃⲆⲆ], 3);
    this.ⲆⲆⵠ[Hr.ᐃΔΔΔᐃⵠⵠ].id = Hr.ᐃΔΔΔᐃⵠⵠ;
    this.ⵠⲆΔ[Hr.ᐃⵠⲆᐃᐃⲆⲆ] = Bf(68, 68, 0, ⵠⵠ[Cr.ⲆΔΔⵠΔⵠⲆᐃⲆ], 3);
    this.ⵠⲆΔ[Hr.ᐃⵠⲆᐃᐃⲆⲆ].id = Hr.ᐃⵠⲆᐃᐃⲆⲆ;
    this.ⲆⲆⵠ[Hr.ᐃⵠⲆᐃᐃⲆⲆ] = Bf(60, 60, 0, ⵠⵠ[Cr.ΔⵠΔⵠΔⵠⵠⵠⲆ], 3);
    this.ⲆⲆⵠ[Hr.ᐃⵠⲆᐃᐃⲆⲆ].id = Hr.ᐃⵠⲆᐃᐃⲆⲆ;
    this.ⵠⲆΔ[Hr.ⲆⵠⲆΔⵠⵠᐃ] = Bf(68, 68, 0, ⵠⵠ[Cr.ᐃΔⵠΔΔⲆⵠⵠΔ], 3);
    this.ⵠⲆΔ[Hr.ⲆⵠⲆΔⵠⵠᐃ].id = Hr.ⲆⵠⲆΔⵠⵠᐃ;
    this.ⲆⲆⵠ[Hr.ⲆⵠⲆΔⵠⵠᐃ] = Bf(60, 60, 0, ⵠⵠ[Cr.ⵠⲆⲆΔⵠⲆΔⲆⲆ], 3);
    this.ⲆⲆⵠ[Hr.ⲆⵠⲆΔⵠⵠᐃ].id = Hr.ⲆⵠⲆΔⵠⵠᐃ;
    this.ⵠⲆΔ[Hr.ⲆⵠⵠⵠᐃΔⵠ] = Bf(68, 68, 0, ⵠⵠ[Cr.ᐃᐃⵠᐃΔⲆᐃⲆΔ], 3);
    this.ⵠⲆΔ[Hr.ⲆⵠⵠⵠᐃΔⵠ].id = Hr.ⲆⵠⵠⵠᐃΔⵠ;
    this.ⲆⲆⵠ[Hr.ⲆⵠⵠⵠᐃΔⵠ] = Bf(60, 60, 0, ⵠⵠ[Cr.ⵠᐃΔΔⲆⲆⵠⲆΔ], 3);
    this.ⲆⲆⵠ[Hr.ⲆⵠⵠⵠᐃΔⵠ].id = Hr.ⲆⵠⵠⵠᐃΔⵠ;
    this.ΔΔΔⲆΔᐃⵠ = function () {
      for (var a = nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ, b = 10, c = 10, d = 0; d < a.length; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ᐃⵠᐃⲆⲆⲆΔ = function () {
      var a = Math.floor(Math.floor((3 + nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ.length) / 4) * (10 + this.ⵠⲆΔ[0].info.ΔΔ[0].width) + 35);
      for (var b = 0; b < this.ⵠⲆΔ.length; b++) {
        if (this.ⵠⲆΔ[b]) {
          this.ⵠⲆΔ[b].info.translate.x = a;
          this.ⵠⲆΔ[b].info.translate.y = 22;
        }
      }
      this.ⲆⲆᐃΔⲆⲆⲆ.info.translate.x = a + 17;
      this.ⲆⲆᐃΔⲆⲆⲆ.info.translate.y = 22 + ⵠⵠ[339].height;
      this.ⵠΔΔⵠⵠⵠⵠ.info.translate.x = a + 17;
      this.ⵠΔΔⵠⵠⵠⵠ.info.translate.y = 30;
      this.ᐃⲆᐃⵠⵠⲆΔ.info.translate.x = a + 17;
      this.ᐃⲆᐃⵠⵠⲆΔ.info.translate.y = 22 + ⵠⵠ[339].height;
    };
    this.ΔⲆᐃⵠᐃⲆⲆⵠΔ = function () {
      var a = Math.floor((Yn - ⵠⵠ[556][0].width) / 2);
      for (var b = 0; b < this.ΔΔⲆΔⲆ.length; b++) {
        this.ΔΔⲆΔⲆ[b].button.info.translate.x = a;
        this.ΔΔⲆΔⲆ[b].button.info.translate.y = -13;
      }
    };
    this.ΔⲆᐃΔΔΔⲆ = function () {
      var a = 12 + Math.floor((10 + this.ᐃⲆᐃⵠⲆⲆⵠ.info.ΔΔ[0].width) * Math.floor((3 + nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ.length) / 4) + 35);
      this.ᐃⲆᐃⵠⲆⲆⵠ.info.translate.x = a;
      this.ᐃⲆᐃⵠⲆⲆⵠ.info.translate.y = 33;
      this.ΔᐃⵠᐃⲆᐃⵠ.info.translate.x = this.ᐃⲆᐃⵠⲆⲆⵠ.info.translate.x;
      this.ΔᐃⵠᐃⲆᐃⵠ.info.translate.y = 137;
      this.ᐃⲆⲆΔⵠⲆⲆ.info.translate.x = this.ᐃⲆᐃⵠⲆⲆⵠ.info.translate.x;
      this.ᐃⲆⲆΔⵠⲆⲆ.info.translate.y = 240;
    };
    this.ᐃⲆⲆΔⲆⲆΔ = function () {
      var a = 12 + Math.floor(Math.floor((3 + nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ.length) / 4) * (10 + this.ᐃᐃᐃΔⵠⲆΔ.info.ΔΔ[0].width) + 35);
      this.ᐃᐃᐃΔⵠⲆΔ.info.translate.x = a;
      this.ᐃᐃᐃΔⵠⲆΔ.info.translate.y = 36;
      a += 83;
      this.ᐃᐃᐃⲆⲆⵠⲆ.info.translate.x = a;
      this.ᐃᐃᐃⲆⲆⵠⲆ.info.translate.y = 36;
      this.ⵠⵠⵠⵠⲆⵠΔ.info.translate.x = a;
      this.ⵠⵠⵠⵠⲆⵠΔ.info.translate.y = 36;
      this.ⵠⵠᐃΔΔⲆᐃ.info.translate.x = a;
      this.ⵠⵠᐃΔΔⲆᐃ.info.translate.y = 36;
      this.ΔⵠᐃΔⵠᐃᐃ.info.translate.x = a;
      this.ΔⵠᐃΔⵠᐃᐃ.info.translate.y = 36;
      this.ⲆⵠⲆΔⲆⲆⵠ.info.translate.x = a;
      this.ⲆⵠⲆΔⲆⲆⵠ.info.translate.y = 36;
    };
    this.ᐃⲆⵠⲆⵠⵠᐃ = function () {
      var a = 12 + Math.floor((10 + this.ΔⲆⲆΔᐃᐃᐃ.info.ΔΔ[0].width) * Math.floor((3 + nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ.length) / 4) + 35);
      this.ΔⲆⲆΔᐃᐃᐃ.info.translate.x = a;
      this.ΔⲆⲆΔᐃᐃᐃ.info.translate.y = 36;
      a += 83;
      this.ᐃᐃᐃΔᐃⵠᐃ.info.translate.x = a;
      this.ᐃᐃᐃΔᐃⵠᐃ.info.translate.y = 36;
    };
    this.ⵠⵠⵠⵠᐃΔᐃ = function () {
      var a = Math.floor(Math.floor((3 + nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ.length) / 4) * (10 + this.ⵠᐃⲆᐃⵠⵠᐃ.info.ΔΔ[0].width) + 35);
      this.ⵠᐃⲆᐃⵠⵠᐃ.info.translate.x = a;
      this.ⵠᐃⲆᐃⵠⵠᐃ.info.translate.y = 22;
    };
    this.ᐃⵠᐃⲆΔΔⲆ = function () {
      var a = nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ;
      if (a.length > 0) {
        var b = Math.floor((Yn - (a[0].info.width + 5) * nx.ΔⲆⵠⵠ.max) / 2);
      }
      for (var c = 0; a.length > c; c++) {
        a[c].info.translate.x = b + c * (a[c].info.width + 5);
        a[c].info.translate.y = _n - a[c].info.width - 10;
        this.ΔⲆⲆⵠⵠ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ΔⲆⲆⵠⵠ[a[c].id].info.translate.y = a[c].info.translate.y - this.ΔⲆⲆⵠⵠ[a[c].id].info.ΔΔ[0].height - 6;
      }
    };
    var h;
    var p = 0;
    function q() {
      j.ⵠⲆⲆ();
      if (++p == 30) {
        j.ⲆⲆΔΔᐃⵠΔ();
        j.ⵠⲆⲆ();
        return;
      }
      rg.setTimeout(q, 33);
    }
    this.ᐃⲆⵠⵠᐃ = function (a) {
      if (nx.ⲆᐃⲆⲆᐃ.open) {
        nx.ⲆᐃⲆⲆᐃ.ᐃⲆⵠⵠᐃ();
      }
      if (nx.ᐃᐃⲆᐃⲆ.open) {
        nx.ᐃᐃⲆᐃⲆ.ᐃⲆⵠⵠᐃ();
      }
      document.getElementById("team_box").style.display = "none";
      j.ⲆᐃΔⵠⲆ.style.display = "none";
      j.ⲆᐃΔⵠⲆ.open = false;
      j.sign.style.display = "none";
      j.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      j.ᐃⲆᐃΔ.open = false;
      document.getElementById("option_in_game").style.display = "none";
      j.options.open = false;
      document.getElementById("sure_delete").style.display = "none";
      j.ᐃᐃΔᐃ.open = Vg;
      document.getElementById("cancel_sure_delete").style.display = "none";
      j.ⲆⲆᐃⲆΔ.open = false;
      document.getElementById("chronoquest").style.display = "none";
      j.ΔΔΔᐃ.open = false;
      h = a;
      j.ⲆⵠᐃⵠⲆⲆᐃ();
      j.ⵠⲆ.style.cursor = j.ⲆᐃᐃⵠᐃⲆⲆ;
      rx.ᐃⲆⵠⵠᐃ();
      b = -1;
      t();
      xx();
    };
    var b = -1;
    function t() {
      j.ⵠⲆⲆ();
      if (++b == 30) {
        j.stop();
        h();
        return;
      }
      rg.setTimeout(t, 33);
    }
    this.ⵠⲆᐃᐃᐃ = Uq;
    this.stop = function () {
      this.ⵠⲆᐃᐃᐃ = Sl;
    };
    this.ᐃΔⲆΔⵠ = function () {
      px.ΔⵠⲆΔⲆⵠⵠⲆⵠ();
      j.ⵠⲆᐃᐃᐃ = Fn;
      b = -1;
      p = 0;
      q();
    };
    this.ⵠⲆⲆ = function () {
      this.ΔᐃΔⲆ.translate.x = Yn - this.ΔᐃΔⲆ.ΔΔ.width - 10;
      this.ΔᐃΔⲆ.translate.y = 5;
      mx.ᐃⲆΔⲆΔ.translate.x = this.ΔᐃΔⲆ.translate.x - ⵠⵠ[725][0].width - 85;
      mx.ᐃⲆΔⲆΔ.translate.y = 10;
      this.ᐃⲆᐃΔ.button.info.translate.x = this.ΔᐃΔⲆ.translate.x - ⵠⵠ[708][0].width - 10;
      this.ᐃⲆᐃΔ.button.info.translate.y = 10;
      this.ΔΔΔᐃ.button.info.translate.x = this.ΔᐃΔⲆ.translate.x - ⵠⵠ[755][0].width - 20;
      this.ΔΔΔᐃ.button.info.translate.y = this.ᐃⲆᐃΔ.button.info.translate.y + ⵠⵠ[708][0].height + 5;
      this.options.button.info.translate.x = this.ΔᐃΔⲆ.translate.x - ⵠⵠ[727][0].width - 20;
      this.options.button.info.translate.y = this.ΔΔΔᐃ.button.info.translate.y + ⵠⵠ[727][0].height + 18;
      this.ⵠᐃᐃᐃ.ⵠΔⲆⵠⵠΔᐃ.info.translate.x = this.ΔᐃΔⲆ.translate.x - ⵠⵠ[727][0].width - 20;
      this.ⵠᐃᐃᐃ.ⵠΔⲆⵠⵠΔᐃ.info.translate.y = this.options.button.info.translate.y + ⵠⵠ[783][0].height;
      this.ⵠᐃᐃᐃ.ⵠᐃⵠᐃⵠⲆΔ.info.translate.x = this.ΔᐃΔⲆ.translate.x - ⵠⵠ[727][0].width - 20;
      this.ⵠᐃᐃᐃ.ⵠᐃⵠᐃⵠⲆΔ.info.translate.y = this.options.button.info.translate.y + ⵠⵠ[783][0].height;
      this.ⲆᐃΔⵠⲆ.button.info.translate.x = this.ΔᐃΔⲆ.translate.x - ⵠⵠ[795][0].width - 20;
      this.ⲆᐃΔⵠⲆ.button.info.translate.y = this.ⵠᐃᐃᐃ.ⵠΔⲆⵠⵠΔᐃ.info.translate.y + ⵠⵠ[795][0].height;
      nx.ΔⵠⲆΔᐃ.translate.x = this.ΔᐃΔⲆ.translate.x - 63 - 85;
      nx.ΔⵠⲆΔᐃ.translate.y = 100;
      nx.ᐃⲆΔⵠᐃ.translate.x = this.ΔᐃΔⲆ.translate.x - ⵠⵠ[517].width - 85;
      nx.ᐃⲆΔⵠᐃ.translate.y = nx.ΔⵠⲆΔᐃ.translate.y + 10 + ⵠⵠ[546].height;
      this.ⵠⲆΔⵠᐃ.translate.y = _n - 3 - 193;
      this.ⵠⲆΔⵠᐃ.translate.x = Yn - 3 - 193;
      this.ΔⲆᐃΔ.translate.x = 5;
      this.ΔⲆᐃΔ.translate.y = _n - this.ΔⲆᐃΔ.ΔΔ.height - 5;
      this.ᐃⲆΔᐃⵠ.button.info.translate.x = ao - 91 / 2;
      this.ᐃⲆΔᐃⵠ.button.info.translate.y = 50;
      this.ΔΔΔⲆΔᐃⵠ();
      this.ᐃⵠᐃⲆΔΔⲆ();
      this.ᐃⵠᐃⲆⲆⲆΔ();
      this.ⵠⵠⵠⵠᐃΔᐃ();
      this.ᐃⲆⵠⲆⵠⵠᐃ();
      this.ᐃⲆⲆΔⲆⲆΔ();
      this.ΔⲆᐃΔΔΔⲆ();
      this.ΔⲆᐃⵠᐃⲆⲆⵠΔ();
      this.sign.ᐃⵠⲆⲆⵠⵠΔ();
      Yp();
      nx.ⲆᐃⲆⲆᐃ.ⵠⲆⲆ();
      nx.ᐃᐃⲆᐃⲆ.ⵠⲆⲆ();
      this.ⵠⵠᐃΔⲆΔᐃⲆᐃ.ⵠⲆⲆ();
      this.ᐃⲆᐃΔ.ⵠⵠⲆΔΔⵠᐃ.ⵠⲆⲆ();
      this.ᐃⲆᐃΔ.list.ⵠⲆⲆ();
      this.ᐃᐃΔᐃ.ⵠⲆⲆ();
      this.ⲆⲆᐃⲆΔ.ⵠⲆⲆ();
      this.ΔΔΔᐃ.ⵠⲆⲆ();
      this.ᐃⲆΔᐃⵠ.ⵠⲆⲆ();
      this.options.ⵠⲆⲆ();
      this.ⲆᐃΔⵠⲆ.ⵠⲆⲆ();
      this.sign.ⵠⲆⲆ();
      var a = 0;
      if (p != 30) {
        a = 1500 / (p + 1) - 50;
      }
      if (b != -1) {
        a = -(1500 / (30 - b + 1) - 48);
      }
      this.ᐃⲆΔᐃⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ΔᐃΔⲆ.translate.y -= a > 0 ? a : -a;
      nx.ΔⵠⲆΔᐃ.translate.y -= a > 0 ? a : -a;
      nx.ᐃⲆΔⵠᐃ.translate.y -= a > 0 ? a : -a;
      this.ᐃⲆᐃΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.ΔΔΔᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ⲆᐃΔⵠⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠᐃᐃᐃ.ⵠΔⲆⵠⵠΔᐃ.info.translate.y -= a > 0 ? a : -a;
      this.ⵠᐃᐃᐃ.ⵠᐃⵠᐃⵠⲆΔ.info.translate.y -= a > 0 ? a : -a;
      mx.ᐃⲆΔⲆΔ.translate.y -= a > 0 ? a : -a;
      this.ΔⲆᐃΔ.translate.y -= a < 0 ? a : -a;
      this.ⵠⲆΔⵠᐃ.translate.y -= a < 0 ? a : -a;
    };
    this.ΔΔᐃΔⲆᐃᐃᐃᐃ = function () {
      if (!nx.ⲆⵠΔΔⵠ.enabled && this.ᐃᐃΔⵠⵠΔᐃ && !nx.ⲆⵠⲆⵠⲆ) {
        cv();
      }
      bv();
      (function () {
        var a = mx.ⵠΔⲆ[0];
        if (mx.mode === 0 || mx.mode === 7 || mx.mode === 2 || mx.mode === 4 || mx.mode === 5 || mx.mode === 6 || mx.mode === 3) {
          for (var b = 0; a.length > b; b++) {
            a[b].ᐃᐃⲆᐃⵠⵠⵠ();
          }
        } else if (mx.mode === 1) {
          for (b = 0; a.length > b; b++) {
            if (nx.ⲆⲆⵠⲆᐃⲆⵠ || nx.ᐃⲆΔⵠᐃ.enabled || a[b].ⲆΔᐃᐃ.ΔΔΔᐃᐃ !== "spectator") {
              a[b].ᐃᐃⲆᐃⵠⵠⵠ();
            }
          }
        }
      })();
      if (this.ᐃᐃΔⵠⵠΔᐃ) {
        qp();
        if (this.ΔⵠΔⵠΔⵠΔ === 1) {
          this.ᐃⲆᐃΔ.button.ΔⵠᐃⲆ(f);
        }
        if (mx.mode !== 2 && mx.mode !== 4 && mx.mode !== 5 && this.ⵠΔᐃΔⵠᐃΔ === 1) {
          this.ΔΔΔᐃ.button.ΔⵠᐃⲆ(f);
        }
        this.options.button.ΔⵠᐃⲆ(f);
        if (this.ⲆⵠⵠΔⲆⵠⵠ === 1) {
          this.ⲆᐃΔⵠⲆ.button.ΔⵠᐃⲆ(f);
        }
        if (rx.ᐃΔⲆΔⵠ) {
          this.ⵠᐃᐃᐃ.ⵠΔⲆⵠⵠΔᐃ.ΔⵠᐃⲆ(f);
        } else {
          this.ⵠᐃᐃᐃ.ⵠᐃⵠᐃⵠⲆΔ.ΔⵠᐃⲆ(f);
        }
        Ju();
        Wu();
        this.ΔⲆᐃΔ.ΔⵠᐃⲆ();
        Fu();
        Iu();
        Ou();
        Mu();
        Yu();
        Vp();
        Wp();
        (function () {
          if (!nx.ΔΔᐃⵠ.open && !nx.ΔΔΔⲆΔ.open && !nx.ⵠⵠⵠΔ.open && !nx.ᐃⵠΔⲆ.open && !nx.ᐃⵠᐃⵠ.open) {
            nx.ΔⵠⲆᐃⲆ.open = false;
            var a = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
            var b = 100;
            if (a) {
              for (var c = 0; c < mx.ⵠΔⲆ[35].length; c++) {
                var d = mx.ⵠΔⲆ[35][c];
                var e = ⵠᐃⵠ.Ⲇᐃⵠᐃ(d, a);
                if (e < b) {
                  b = e;
                  nx.ΔⵠⲆᐃⲆ.open = true;
                  nx.ΔⵠⲆᐃⲆ.ⲆⵠⲆⵠ = d.ⲆⵠⲆⵠ;
                  nx.ΔⵠⲆᐃⲆ.ΔᐃⲆᐃΔ = d.id;
                }
              }
            }
          }
        })();
        Op();
        jp();
        Lp();
        Kp();
        Yp();
        Hp();
      }
      if (nx.ⲆⵠΔΔⵠ.enabled) {
        Rp();
      }
      Zp();
      if (this.ᐃᐃΔⵠⵠΔᐃ && this.ᐃΔⲆᐃⲆⲆⲆ === 1) {
        Qu();
      }
      nx.ᐃΔᐃⵠⵠⵠᐃ.ΔⵠᐃⲆ();
      nx.alert.ΔⵠᐃⲆ("#FFF", "#000");
      if (this.ᐃᐃΔⵠⵠΔᐃ) {
        nx.ⲆⵠΔΔⵠ.ΔⵠᐃⲆ();
        nx.ᐃⲆΔᐃⵠ.ΔⵠᐃⲆ();
        nx.ΔⲆⵠⵠ.ⲆᐃⵠᐃⲆΔⲆ.ΔⵠᐃⲆ(tx.ⲆⵠΔᐃ.x, tx.ⲆⵠΔᐃ.y);
      }
      Np();
    };
    this.ᐃᐃⲆⲆΔΔΔⵠᐃ = function () {
      nx.ᐃΔΔ.ⵠⲆⲆ();
      nx.ΔⲆᐃΔ.ⵠⲆⲆ();
      if (!nx.reconnect.enabled && nx.ΔⵠΔⵠⲆ) {
        nx.control.ⵠⲆⲆ();
        //nx.ΔⵠⲆΔᐃ.ⵠⲆⲆ();
      }
      mx.ⵠⲆⲆ();
      this.ΔΔΔᐃ.ⲆΔⵠⲆⲆⵠⵠΔⵠ();
    };
    this.ΔᐃΔⲆⵠᐃΔⲆⲆ = function () {
      tf();
    };
    this.ⵠⲆᐃΔⲆᐃᐃⵠΔ = function () {
      px.ⵠΔⵠᐃᐃᐃᐃΔΔ();
      px.ⵠⵠᐃΔΔⵠⵠΔⲆ();
      px.ΔΔⵠᐃΔᐃΔᐃΔ();
      px.ⵠᐃᐃΔᐃⵠΔΔᐃ();
    };
    this.ΔⵠᐃⲆ = function () {
      if (!nx.reconnect.enabled && nx.ΔⵠΔⵠⲆ) {
        this.ⵠⲆᐃΔⲆᐃᐃⵠΔ();
      }
      rx.ΔⵠΔⲆΔΔᐃΔⵠ();
      this.ᐃᐃⲆⲆΔΔΔⵠᐃ();
      if (lx.ⲆⲆⲆⵠΔᐃⵠ !== 1) {
        this.ΔᐃΔⲆⵠᐃΔⲆⲆ();
        this.ΔΔᐃΔⲆᐃᐃᐃᐃ();
      } else {
        var a = ᐃᐃ.ΔΔⲆᐃⲆΔⵠ;
        Up(f, a, ao - a.width / 4, no - a.height / 4, a.width / 2, a.height / 2);
      }
    };
    this.ᐃᐃⵠᐃΔⲆΔ = function (a) {
      if (nx.ⲆᐃⲆⲆᐃ.open && a.keyCode === 27) {
        nx.ⲆᐃⲆⲆᐃ.ᐃⲆⵠⵠᐃ();
      } else if (nx.ᐃᐃⲆᐃⲆ.open && a.keyCode === 27) {
        nx.ᐃᐃⲆᐃⲆ.ᐃⲆⵠⵠᐃ();
      } else if (nx.ⲆᐃⲆⲆᐃ.open || nx.ᐃᐃⲆᐃⲆ.open || a.keyCode != 79 || b != -1) {
        if (a.keyCode == 13 && b == -1) {
          if (nx.ᐃᐃⲆᐃⲆ.open) {
            nx.ᐃᐃⲆᐃⲆ.ⲆⵠⲆⵠᐃΔΔ();
          } else {
            nx.ⲆᐃⲆⲆᐃ.ᐃΔⲆΔⵠ();
          }
        } else if (!nx.ⲆᐃⲆⲆᐃ.open && !nx.ᐃᐃⲆᐃⲆ.open) {
          if (a.keyCode === 82) {
            nx.ΔⵠⲆΔᐃ.ΔⲆᐃⵠⵠⲆΔ();
          } else if (a.keyCode !== 80 || mx.mode !== 1 || nx.ⲆⲆⵠⲆᐃⲆⵠ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (nx.ᐃⵠⲆΔ.id < 0) {
                var c = a.keyCode - 49;
                var d = nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ[c];
                if (d) {
                  px.ᐃΔᐃᐃⲆ(d.id, c);
                }
              }
            } else if (a.keyCode == 89) {
              nx.ⲆⵠΔᐃⲆΔΔ = !nx.ⲆⵠΔᐃⲆΔΔ;
            } else if (a.keyCode == 71) {
              nx.ᐃⵠⲆΔ.ⲆᐃⵠⵠΔΔⵠΔᐃ();
            }
          } else {
            nx.ᐃⲆΔⵠᐃ.ΔⲆᐃⵠⵠⲆΔ();
          }
        }
      } else {
        nx.ᐃᐃⲆᐃⲆ.ᐃᐃΔⵠᐃⵠⲆΔⵠ();
      }
      sx.up(a);
    };
    this.ⲆΔⲆⵠΔΔⲆ = function (a) {
      sx.down(a);
      if (a.keyCode == 8 && !nx.ⲆᐃⲆⲆᐃ.open && !nx.ᐃᐃⲆᐃⲆ.open) {
        a.preventDefault();
      }
    };
    this.ⵠᐃⲆⵠΔⵠΔ = function (b) {
      tx.ⲆⵠΔᐃ = Jf(j.ⵠⲆ, b);
      var c = false;
      if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0) {
        j.ⵠⲆΔⵠᐃ.focus(tx.ⲆⵠΔᐃ);
      }
      var d = nx.ΔΔᐃⵠ;
      if (nx.ᐃⵠⲆΔ.id < 0 && d.id >= 0 && (!nx.ΔΔᐃⵠ.lock || nx.ΔΔᐃⵠ.ⲆⵠⲆⵠ === nx.id)) {
        c |= j.ⵠⲆΔ[nx.ΔΔᐃⵠ.id].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      var e = nx.ⵠⵠⵠΔ;
      if (e.open && e.ⲆΔⲆⲆⲆ > 0) {
        c |= j.ᐃᐃᐃΔᐃⵠᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      var f = nx.ᐃⵠᐃⵠ;
      if (f.open && f.ᐃⵠΔᐃⲆΔΔ > 0) {
        c |= j.ᐃᐃᐃⲆⲆⵠⲆ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
        c |= j.ⵠⵠⵠⵠⲆⵠΔ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
        c |= j.ⵠⵠᐃΔΔⲆᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
        c |= j.ΔⵠᐃΔⵠᐃᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
        c |= j.ⲆⵠⲆΔⲆⲆⵠ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      var a = nx.ᐃⵠΔⲆ;
      if (a.open && a.ⵠᐃⲆⵠᐃⲆΔ > 0) {
        c |= j.ᐃⲆⲆΔⵠⲆⲆ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      if (nx.sign.open) {
        c |= j.sign.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      if (!nx.ΔΔᐃⵠ.lock) {
        if (nx.ΔΔᐃⵠ.ΔⲆΔⲆⵠᐃⵠ) {
          c |= j.ᐃⲆᐃⵠⵠⲆΔ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
        }
      }
      if (nx.ΔΔᐃⵠ.ⵠΔⵠⵠⵠᐃⲆ) {
        c |= j.ⲆⲆᐃΔⲆⲆⲆ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      if (nx.ᐃⵠⲆΔ.id < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.options.open && !j.ⲆᐃΔⵠⲆ.open) {
        for (var k = nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ, m = 0; m < k.length; m++) {
          var n = k[m].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
          c |= n;
          if (n) {
            nx.ΔⲆⵠⵠ.ⲆᐃⵠᐃⲆΔⲆ.start(m, tx.ⲆⵠΔᐃ);
          }
          if (d.open && (d.id < 0 || k[m].id == d.id) || nx.ΔΔΔⲆΔ.open && k[m].id === 109 || nx.ΔⵠⲆᐃⲆ.open && k[m].id === 180 || nx.ᐃⵠΔⲆ.open && (k[m].id === 109 || k[m].id === 131) || nx.ⵠⵠⵠΔ.open && k[m].id === 134 || nx.ᐃⵠᐃⵠ.open && k[m].id === 109) {
            c |= j.ΔⲆⲆⵠⵠ[k[m].id].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
          }
        }
      }
      if (nx.ⵠᐃᐃⵠⵠ.open) {
        c |= j.ⵠᐃᐃⵠⵠ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      if (j.ΔΔⲆΔΔ != -1) {
        if (c |= j.ΔΔⲆΔⲆ[j.ΔΔⲆΔΔ].button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf)) {
          var o = jq;
        }
      } else {
        o = false;
      }
      if (nx.ᐃⵠⲆΔ.id < 0 && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !o && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆΔ.open && !j.ⲆᐃΔⵠⲆ.open && !nx.ⲆⵠⲆⵠⲆ) {
        k = nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ;
        m = 0;
        for (; k.length > m; m++) {
          c |= k[m].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
        }
      }
      if (nx.ᐃⵠⲆΔ.id < 0 && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !!nx.ᐃⲆΔᐃⵠ.open && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.ⲆᐃΔⵠⲆ.open) {
        c |= j.ᐃⲆΔᐃⵠ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃᐃΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.ⲆᐃΔⵠⲆ.open) {
        c |= j.ᐃⲆᐃΔ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.ⲆᐃΔⵠⲆ.open) {
        c |= j.options.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.options.open) {
        c |= j.ⲆᐃΔⵠⲆ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.options.open && !j.ⲆᐃΔⵠⲆ.open) {
        if (rx.ᐃΔⲆΔⵠ) {
          c |= j.ⵠᐃᐃᐃ.ⵠΔⲆⵠⵠΔᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
        } else {
          c |= j.ⵠᐃᐃᐃ.ⵠᐃⵠᐃⵠⲆΔ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
        }
      }
      if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ⲆᐃΔⵠⲆ.open && !j.ᐃᐃΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆΔ.open && mx.mode !== 2 && mx.mode !== 4 && mx.mode !== 5) {
        c |= j.ΔΔΔᐃ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
      }
      if (!c && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.ⲆᐃΔⵠⲆ.open && !j.sign.open) {
        if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ >= 0) {
          px.ⲆⵠᐃΔᐃⲆᐃⵠᐃ();
        } else if (!o) {
          tx.down();
        }
      }
    };
    this.ⲆΔⲆΔᐃⲆⲆ = function (c) {
      tx.ⲆⵠΔᐃ = Jf(j.ⵠⲆ, c);
      tx.up();
      if (!nx.ΔⲆⵠⵠ.ⲆᐃⵠᐃⲆΔⲆ.release()) {
        var d = nx.ΔΔᐃⵠ;
        var e = nx.ΔΔΔⲆΔ;
        var f = nx.ΔⵠⲆᐃⲆ;
        var i = nx.ⵠⵠⵠΔ;
        var k = nx.ᐃⵠᐃⵠ;
        var m = nx.ᐃⵠΔⲆ;
        if (nx.control.attack) {
          nx.control.attack = 0;
          px.ⲆⵠⵠⵠⲆⲆⲆⲆⵠ();
        }
        if (j.ΔΔⲆΔΔ != -1) {
          var n = j.ΔΔⲆΔⲆ[j.ΔΔⲆΔΔ].button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf);
          var o = document.getElementById("team_box").style;
          if (n && o.display == "inline-block") {
            o.display = "none";
            return;
          }
          if (n) {
            j.ΔΔⲆΔⲆ[j.ΔΔⲆΔΔ].action();
          }
        }
        if (nx.ᐃⵠⲆΔ.id < 0 && d.id >= 0 && !j.ᐃᐃΔᐃ.open) {
          if (!nx.ΔΔᐃⵠ.lock || nx.id === nx.ΔΔᐃⵠ.ⲆⵠⲆⵠ) {
            if (n = j.ⵠⲆΔ[nx.ΔΔᐃⵠ.id].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
              px.ⵠᐃⲆᐃⲆⵠΔΔⲆ(d);
            }
          }
        }
        if ((i = nx.ⵠⵠⵠΔ).open && i.ⲆΔⲆⲆⲆ > 0 && !j.ᐃᐃΔᐃ.open) {
          if (n = j.ᐃᐃᐃΔᐃⵠᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
            px.ᐃᐃΔᐃΔᐃΔΔⲆ(i);
          }
        }
        if ((k = nx.ᐃⵠᐃⵠ).open && k.ᐃⵠΔᐃⲆΔΔ > 0 && !j.ᐃᐃΔᐃ.open) {
          switch (k.type) {
            case 24:
              if (n = j.ᐃᐃᐃⲆⲆⵠⲆ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
                px.ᐃΔΔⲆⲆΔⲆ(k);
              }
              break;
            case 25:
              if (n = j.ⵠⵠⵠⵠⲆⵠΔ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
                px.ᐃΔΔⲆⲆΔⲆ(k);
              }
              break;
            case 26:
              if (n = j.ⵠⵠᐃΔΔⲆᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
                px.ᐃΔΔⲆⲆΔⲆ(k);
              }
              break;
            case 27:
              if (n = j.ΔⵠᐃΔⵠᐃᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
                px.ᐃΔΔⲆⲆΔⲆ(k);
              }
              break;
            case 28:
              if (n = j.ⲆⵠⲆΔⲆⲆⵠ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
                px.ᐃΔΔⲆⲆΔⲆ(k);
              }
          }
        }
        if ((m = nx.ᐃⵠΔⲆ).open && m.ⵠᐃⲆⵠᐃⲆΔ > 0 && !j.ᐃᐃΔᐃ.open) {
          if (n = j.ᐃⲆⲆΔⵠⲆⲆ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
            px.ᐃΔΔΔⲆⵠΔΔⵠ(m);
          }
        }
        if (nx.sign.open && !j.ᐃᐃΔᐃ.open) {
          if (n = j.sign.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
            j.sign.select();
          }
        }
        if (!nx.ΔΔᐃⵠ.lock && !j.ᐃᐃΔᐃ.open) {
          if (nx.ΔΔᐃⵠ.ΔⲆΔⲆⵠᐃⵠ && (n = j.ᐃⲆᐃⵠⵠⲆΔ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf))) {
            px.ⵠⵠΔⲆΔⲆⲆΔΔ(d);
          }
        }
        if (nx.ΔΔᐃⵠ.ⵠΔⵠⵠⵠᐃⲆ && !j.ᐃᐃΔᐃ.open && (n = j.ⲆⲆᐃΔⲆⲆⲆ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf))) {
          px.ⵠᐃᐃⲆⲆᐃΔⲆᐃ(d);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (nx.ⵠᐃᐃⵠⵠ.open) {
          if (n = j.ⵠᐃᐃⵠⵠ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
            px.ⵠᐃᐃⵠⵠ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (nx.ᐃⵠⲆΔ.id < 0 && !nx.ⲆⵠΔΔⵠ.enabled && !j.ᐃᐃΔᐃ.open) {
          for (var g = nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ, p = 0; p < g.length; p++) {
            if (n = g[p].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
              if (c.which != 1 || c.shiftKey) {
                if ((c.which == 1 && c.shiftKey || c.which == 3) && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0) {
                  j.ᐃᐃΔᐃ.ΔⲆⵠⲆᐃⵠⲆ(g[p].id);
                }
              } else {
                px.ᐃΔᐃᐃⲆ(g[p].id, p);
              }
            } else if (d.open && (d.id < 0 || g[p].id === d.id)) {
              if ((n = j.ΔⲆⲆⵠⵠ[g[p].id].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0) {
                px.ΔⲆᐃᐃⲆⵠⲆⲆⵠ(d, g[p].id, c.shiftKey ? 10 : 1);
              }
            } else if (f.open && g[p].id === 180) {
              if ((n = j.ΔⲆⲆⵠⵠ[g[p].id].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0) {
                px.ⵠᐃⲆⲆᐃⲆᐃⵠΔ(f);
              }
            } else if (e.open && g[p].id === 109) {
              if ((n = j.ΔⲆⲆⵠⵠ[g[p].id].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0) {
                px.ⵠᐃⲆⲆᐃⲆⲆⲆᐃ(e, c.shiftKey ? 10 : 1);
              }
            } else if (i.open && g[p].id === 134) {
              if ((n = j.ΔⲆⲆⵠⵠ[g[p].id].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0) {
                px.ⲆⵠΔΔⵠⲆⵠⵠΔ(i, c.shiftKey ? 10 : 1);
              }
            } else if (k.open && g[p].id === 109) {
              if ((n = j.ΔⲆⲆⵠⵠ[g[p].id].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0) {
                px.ΔΔᐃⵠΔⲆⵠΔⲆ(k, c.shiftKey ? 10 : 1);
              }
            } else if (m.open && (g[p].id === 109 || g[p].id === 131)) {
              if ((n = j.ΔⲆⲆⵠⵠ[g[p].id].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0) {
                if (g[p].id === 109) {
                  px.ⲆⵠⵠⲆⲆⲆᐃ(m, c.shiftKey ? 10 : 1, 0);
                } else {
                  px.ⲆⵠⵠⲆⲆⲆᐃ(m, 0, c.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (nx.ᐃⵠⲆΔ.id < 0 && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !nx.ⲆⵠΔΔⵠ.enabled && !j.ᐃᐃΔᐃ.open && !nx.ⲆⵠⲆⵠⲆ) {
          g = nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ;
          p = 0;
          for (; p < g.length; p++) {
            if (n = g[p].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
              ⵠᐃⵠᐃⲆ = px.ᐃⲆⲆⵠΔⵠⵠᐃΔ(g[p].id);
              if (ⵠᐃⵠᐃⲆ && ga) {
                ga("send", "event", "Game", "craft", Jr[at[g[p].id].Ⲇᐃᐃⵠ].name);
              }
            }
          }
        }
        if (nx.ᐃⵠⲆΔ.id < 0 && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && nx.ᐃⲆΔᐃⵠ.open && !j.ⲆᐃΔⵠⲆ.open && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open) {
          if (n = j.ᐃⲆΔᐃⵠ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf)) {
            qx.ᐃⲆΔᐃⵠ.select();
          }
        }
        if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.ⲆᐃΔⵠⲆ.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.options.open) {
          if (rx.ᐃΔⲆΔⵠ) {
            if (n = j.ⵠᐃᐃᐃ.ⵠΔⲆⵠⵠΔᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
              rx.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (n = j.ⵠᐃᐃᐃ.ⵠᐃⵠᐃⵠⲆΔ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
            rx.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.ⲆᐃΔⵠⲆ.open) {
          if (n = j.options.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
            j.options.ᐃⵠⵠΔΔⲆΔᐃⵠ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.options.open && j.ⲆⵠⵠΔⲆⵠⵠ === 1) {
          if (n = j.ⲆᐃΔⵠⲆ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
            j.ⲆᐃΔⵠⲆ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃᐃΔᐃ.open && !j.ⲆᐃΔⵠⲆ.open && !j.options.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && j.ΔⵠΔⵠΔⵠΔ === 1) {
          if (n = j.ᐃⲆᐃΔ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
            j.ᐃⲆᐃΔ.ⲆᐃⵠⵠⲆΔⵠᐃΔ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆΔ.open && !j.ⲆᐃΔⵠⲆ.open && mx.mode !== 2 && mx.mode !== 4 && mx.mode !== 5 && j.ⵠΔᐃΔⵠᐃΔ === 1) {
          if (n = j.ΔΔΔᐃ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
            j.ΔΔΔᐃ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (nx.ᐃⵠⲆΔ.ᐃΔΔᐃᐃ && c.which == 3) {
          j.ⲆⲆᐃⲆΔ.ΔⲆⵠⲆᐃⵠⲆ();
        }
      }
    };
    this.ΔᐃⲆⲆΔⵠᐃ = false;
    this.ⲆΔⲆⵠⲆΔΔ = function (b) {
      tx.ⲆⵠΔᐃ = Jf(j.ⵠⲆ, b);
      var d = ja;
      qx.ⲆΔΔΔᐃ.display = 0;
      nx.ΔⲆⵠⵠ.ⲆᐃⵠᐃⲆΔⲆ.ᐃⵠⵠⵠᐃ(tx.ⲆⵠΔᐃ);
      if (j.ΔΔⲆΔΔ != -1) {
        d |= j.ΔΔⲆΔⲆ[j.ΔΔⲆΔΔ].button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      var e = nx.ⵠⵠⵠΔ;
      if (e.open && e.ⲆΔⲆⲆⲆ > 0) {
        d |= j.ᐃᐃᐃΔᐃⵠᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      var f = nx.ᐃⵠᐃⵠ;
      if (f.open && f.ᐃⵠΔᐃⲆΔΔ > 0) {
        d |= j.ᐃᐃᐃⲆⲆⵠⲆ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
        d |= j.ⵠⵠⵠⵠⲆⵠΔ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
        d |= j.ⵠⵠᐃΔΔⲆᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
        d |= j.ΔⵠᐃΔⵠᐃᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
        d |= j.ⲆⵠⲆΔⲆⲆⵠ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      var a = nx.ᐃⵠΔⲆ;
      if (a.open && a.ⵠᐃⲆⵠᐃⲆΔ > 0) {
        d |= j.ᐃⲆⲆΔⵠⲆⲆ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      if (nx.sign.open) {
        d |= j.sign.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      var i = nx.ΔΔᐃⵠ;
      if (nx.ᐃⵠⲆΔ.id < 0 && i.id >= 0 && !nx.ⲆⵠΔΔⵠ.enabled) {
        if (!nx.ΔΔᐃⵠ.lock || nx.id === nx.ΔΔᐃⵠ.ⲆⵠⲆⵠ) {
          d |= j.ⵠⲆΔ[i.id].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
        }
      }
      if (nx.ⵠᐃᐃⵠⵠ.open) {
        d |= j.ⵠᐃᐃⵠⵠ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      if (!nx.ΔΔᐃⵠ.lock && !nx.ⲆⵠΔΔⵠ.enabled) {
        if (nx.ΔΔᐃⵠ.ΔⲆΔⲆⵠᐃⵠ) {
          d |= j.ᐃⲆᐃⵠⵠⲆΔ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
        }
      }
      if (nx.ΔΔᐃⵠ.ⵠΔⵠⵠⵠᐃⲆ && !nx.ⲆⵠΔΔⵠ.enabled) {
        d |= j.ⲆⲆᐃΔⲆⲆⲆ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      if (nx.ᐃⵠⲆΔ.id < 0 && !nx.ⲆⵠΔΔⵠ.enabled) {
        for (var k = nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ, m = 0; k.length > m; m++) {
          var o = k[m].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
          d |= qx.ⲆΔΔΔᐃ.ⵠⲆⵠᐃ(o, k[m], 0);
          if (i.open && (i.id < 0 || i.id == k[m].id) || nx.ΔΔΔⲆΔ.open && k[m].id == 109 || nx.ΔⵠⲆᐃⲆ.open && k[m].id === 180 || nx.ᐃⵠΔⲆ.open && (k[m].id == 109 || k[m].id == 131) || nx.ⵠⵠⵠΔ.open && k[m].id == 134 || nx.ᐃⵠᐃⵠ.open && k[m].id == 109) {
            d |= j.ΔⲆⲆⵠⵠ[k[m].id].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
          }
        }
      }
      if (nx.ᐃⵠⲆΔ.id < 0 && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !nx.ⲆⵠΔΔⵠ.enabled && !nx.ⲆⵠⲆⵠⲆ) {
        k = nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ;
        m = 0;
        for (; k.length > m; m++) {
          o = Kj;
          o = k[m].ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
          d |= qx.ⲆΔΔΔᐃ.ⵠⲆⵠᐃ(o, k[m], 1);
        }
      }
      if (nx.ᐃⵠⲆΔ.id < 0 && nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !!nx.ᐃⲆΔᐃⵠ.open && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.ⲆᐃΔⵠⲆ.open) {
        d |= j.ᐃⲆΔᐃⵠ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃᐃΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.ⲆᐃΔⵠⲆ.open && j.ΔⵠΔⵠΔⵠΔ === 1) {
        d |= j.ᐃⲆᐃΔ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.ⲆᐃΔⵠⲆ.open) {
        d |= j.options.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.options.open && j.ⲆⵠⵠΔⲆⵠⵠ === 1) {
        d |= j.ⲆᐃΔⵠⲆ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.ⲆⲆᐃⲆΔ.open && !j.ΔΔΔᐃ.open && !j.options.open && !j.ⲆᐃΔⵠⲆ.open) {
        if (rx.ᐃΔⲆΔⵠ) {
          d |= j.ⵠᐃᐃᐃ.ⵠΔⲆⵠⵠΔᐃ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
        } else {
          d |= j.ⵠᐃᐃᐃ.ⵠᐃⵠᐃⵠⲆΔ.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
        }
      }
      if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ < 0 && !j.ᐃⲆᐃΔ.open && !j.ᐃᐃΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆΔ.open && !j.ⲆᐃΔⵠⲆ.open && mx.mode !== 2 && mx.mode !== 4 && mx.mode !== qf.ᐃⲆᐃⲆⵠⵠⵠΔⵠ && j.ⵠΔᐃΔⵠᐃΔ === 1) {
        d |= j.ΔΔΔᐃ.button.ⵠⲆⵠᐃ(j.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
      }
      if (j.ΔᐃⲆⲆΔⵠᐃ !== d) {
        j.ΔᐃⲆⲆΔⵠᐃ = d;
        c.style.cursor = d ? j.ᐃⵠⲆᐃⲆΔⵠ : j.ⲆᐃᐃⵠᐃⲆⲆ;
      }
    };
    this.ⲆⲆΔΔᐃⵠΔ = function () {
      rg.addEventListener("mousedown", this.ⵠᐃⲆⵠΔⵠΔ, xa);
      rg.addEventListener("mouseup", this.ⲆΔⲆΔᐃⲆⲆ, No);
      rg.addEventListener("mousemove", this.ⲆΔⲆⵠⲆΔΔ, false);
      rg.addEventListener("keyup", this.ᐃᐃⵠᐃΔⲆΔ, No);
      rg.addEventListener("keydown", this.ⲆΔⲆⵠΔΔⲆ, false);
    };
    this.ⲆⵠᐃⵠⲆⲆᐃ = function () {
      rg.removeEventListener("mousedown", this.ⵠᐃⲆⵠΔⵠΔ, Vh);
      rg.removeEventListener("mouseup", this.ⲆΔⲆΔᐃⲆⲆ, ja);
      rg.removeEventListener("mousemove", this.ⲆΔⲆⵠⲆΔΔ, false);
      rg.removeEventListener("keyup", this.ᐃᐃⵠᐃΔⲆΔ, Kj);
      rg.removeEventListener("keydown", this.ⲆΔⲆⵠΔΔⲆ, Kk);
    };
  }
  function Uw() {
    ⵠᐃⵠ.ᐃΔᐃⲆⵠⲆΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + nx.ⲆΔⲆ + "%20days%20with%20" + nx.ΔⵠΔΔΔⵠⲆ.ΔⲆᐃⲆⵠ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Vw(b, c) {
    this.ⵠⲆ = b;
    this.Ⲇ = c;
    var d = this;
    this.ΔᐃΔⲆⵠⵠⲆ = Sl;
    this.Ⲇᐃⵠⵠⵠᐃⵠ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        x: 0,
        y: 0
      },
      ⵠⲆⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ⲆΔⲆⲆⵠ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + nx.ΔⵠΔΔΔⵠⲆ.ⲆⲆᐃⵠΔΔΔ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Ib[335] + " : " + nx.ⲆΔⲆ + "</div><div class=\"stats\"> " + Ib[334] + " : " + nx.ΔⵠΔΔΔⵠⲆ.ⲆΔⵠΔⵠ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Ib[333] + " : " + nx.ΔⵠΔΔΔⵠⲆ.ΔⲆᐃⲆⵠ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + nx.ΔⵠΔΔΔⵠⲆ.ⵠⲆⲆⵠⵠᐃⲆ + " " + Ib[332] + "</div></div><div id=\"shop_points\">" + Ib[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Ib[329] + "</div><div class=\"social\" id=\"fffacebook\">" + Ib[330] + "</div></div><div id=\"bbback\">" + Ib[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", Uw, Kk);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          ox.ᐃⲆⵠⵠᐃ(lx.ᐃΔⲆΔⵠ);
        }, Sl);
        document.getElementById("fffacebook").addEventListener("mouseup", Yw, No);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Cx + "getBreadAndScore?userid=" + Jx);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - lx.ΔⵠⲆⵠⵠ;
              lx.ΔⵠⲆⵠⵠ = b.b;
              lx.ΔⲆᐃⲆⵠ = b.s;
              lx.ⵠⲆⵠᐃΔ = lx.ᐃᐃⲆⵠᐃᐃⲆ(lx.ΔⲆᐃⲆⵠ);
              lx.ⲆⵠⵠΔⲆⲆⲆ = lx.ᐃⵠᐃⵠΔⵠΔ(lx.ΔⲆᐃⲆⵠ);
              lx.ΔΔΔΔᐃⵠⵠ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var g = 0;
    function e() {
      d.ⵠⲆⲆ();
      if (++g != 30) {
        rg.setTimeout(e, 33);
      } else {
        d.ⵠⲆⲆ();
      }
    }
    this.ᐃⲆⵠⵠᐃ = function (a) {
      if (jq === d.ΔᐃΔⲆⵠⵠⲆ) {
        d.ΔᐃΔⲆⵠⵠⲆ = false;
        f = a;
        i = -1;
        j();
        xx();
      }
    };
    var i = -1;
    function j() {
      d.ⵠⲆⲆ();
      if (++i == 30) {
        d.stop();
        d.Ⲇᐃⵠⵠⵠᐃⵠ.style.display = "none";
        f();
        return;
      }
      rg.setTimeout(j, 33);
    }
    this.ⵠⲆᐃᐃᐃ = rr;
    this.stop = function () {
      this.ⵠⲆᐃᐃᐃ = mj;
    };
    this.ᐃΔⲆΔⵠ = function () {
      zx();
      document.getElementById("game_body").style.backgroundColor = Cr.ΔΔΔᐃⵠ[kx.time];
      d.Ⲇᐃⵠⵠⵠᐃⵠ.ⲆΔⲆⲆⵠ();
      lx.ⲆΔᐃΔᐃ.style.display = "inline-block";
      d.ⵠⲆᐃᐃᐃ = true;
      d.ΔᐃΔⲆⵠⵠⲆ = Fl;
      i = -1;
      g = 0;
      e();
    };
    this.ⵠⲆⲆ = function () {
      this.Ⲇᐃⵠⵠⵠᐃⵠ.translate.x = Math.floor(ao - 275);
      this.Ⲇᐃⵠⵠⵠᐃⵠ.translate.y = Math.floor(no - this.Ⲇᐃⵠⵠⵠᐃⵠ.height - 28);
      lx.ⲆΔᐃΔᐃ.translate.x = this.Ⲇᐃⵠⵠⵠᐃⵠ.translate.x - 350;
      lx.ⲆΔᐃΔᐃ.translate.y = this.Ⲇᐃⵠⵠⵠᐃⵠ.translate.y + 0;
      lx.ⲆΔᐃΔᐃ.ⵠⲆⲆ();
      if (g != 30 || i != -1) {
        var a = 0;
        if (g != 30) {
          a = 1500 / (g + 1) - 50;
        }
        if (i != -1) {
          a = -(1750 / (30 - i + 1) - 48);
        }
        this.Ⲇᐃⵠⵠⵠᐃⵠ.translate.y -= a;
      }
      this.Ⲇᐃⵠⵠⵠᐃⵠ.ⵠⲆⲆ();
    };
    this.ΔⵠᐃⲆ = function () {
      Ip();
      nx.alert.ΔⵠᐃⲆ("#FFF", "#000");
    };
  }
  function Ww(b, c, d, e) {
    const f = ~(b & 7387) & 7387 | ~(b & 7387) & b;
    const g = (2531011 + (c + 8673) * 214013) % 4294967296;
    const a = (2147483587 + (46424 + d) * 2147483629) % 2147483647;
    const h = uk(f, g, a, e ^ 38631, f);
    Ep(g, a);
    return h ^ 53649;
  }
  function Xw(c, u) {
    this.ⵠⲆ = c;
    this.Ⲇ = u;
    if (rg.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⲆᐃᐃⵠᐃⲆⲆ = "default";
      this.ᐃⵠⲆᐃⲆΔⵠ = "pointer";
    } else {
      this.ⲆᐃᐃⵠᐃⲆⲆ = "url('img/cursor0.png'), default";
      this.ᐃⵠⲆᐃⲆΔⵠ = "url('img/cursor1.png'), pointer";
    }
    var v = this;
    function e(c, e, f, i, j) {
      var a = this;
      for (var m = e + 9, p = 0, n = i, o = e; o < m; o++) {
        v.buttons[o].info.callback = b;
        v.buttons[o].info.ΔᐃⲆⵠⵠⵠΔΔΔ = c;
      }
      function q() {
        var a = c[n];
        lx.ⵠⵠΔᐃⲆᐃΔ = xf(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, un, 10, 8);
        if (a.level !== Bj) {
          lx.ᐃΔⲆΔⲆⲆΔ = xf("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Lq, 10, 8);
        } else {
          lx.ᐃΔⲆΔⲆⲆΔ = xf("by " + a.Δᐃⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, zs, 10, 8);
        }
      }
      function b() {
        if (this.ⵠⵠⵠᐃΔᐃⵠ !== n && this.ⵠⵠⵠᐃΔᐃⵠ !== -1) {
          if (this.ΔⲆⵠΔⵠⲆΔ > 0) {
            if (ⲆⵠΔⵠⵠΔᐃ === e) {
              W(k, ha, "none");
            } else {
              W(A, ha, "none");
            }
          } else if (e === ⲆⵠΔⵠⵠΔᐃ) {
            W(k, ia, "inline-block");
          } else {
            W(A, ia, "inline-block");
          }
          n = this.ⵠⵠⵠᐃΔᐃⵠ;
          f(this.ⵠⵠⵠᐃΔᐃⵠ);
          q();
        }
      }
      this.ᐃᐃⲆⲆⲆ = function () {
        for (var a = e, b = p * 3; m > a && b < c.length; a++, b++) {
          if (c[b].ⲆⵠΔ !== ⲆΔⵠ.ᐃⵠᐃⵠΔΔⵠ || j[b] !== 0) {
            v.buttons[a].info.ⵠⵠⵠᐃΔᐃⵠ = b;
            for (var d = 0; d < 3; d++) {
              v.buttons[a].info.ΔΔ[d] = ᐃⲆⵠⵠⵠ[c[b].ⲆⵠΔ][d];
              v.buttons[a].info.active = ia;
              v.buttons[a].info.ΔⲆⵠΔⵠⲆΔ = j[b];
            }
          } else {
            v.buttons[a].info.ⵠⵠⵠᐃΔᐃⵠ = -1;
            v.buttons[a].info.active = ha;
          }
        }
        for (; m > a; a++) {
          v.buttons[a].info.ⵠⵠⵠᐃΔᐃⵠ = -1;
          v.buttons[a].info.active = ha;
        }
        q();
      };
      v.buttons[m].info.callback = function () {
        if (p > 0) {
          p--;
        }
        a.ᐃᐃⲆⲆⲆ();
      };
      v.buttons[m + 1].info.callback = function () {
        if (c.length > p * 3 + 9) {
          p++;
        }
        a.ᐃᐃⲆⲆⲆ();
      };
    }
    function n() {
      var b = Number(ᐃΔⲆⵠ.get("starve_crate"));
      var c = Number(ᐃΔⲆⵠ.get("starve_dead"));
      var d = Number(ᐃΔⲆⵠ.get("starve_book"));
      var e = Number(ᐃΔⲆⵠ.get("starve_bag"));
      var f = Number(ᐃΔⲆⵠ.get("starve_skin"));
      var a = Number(ᐃΔⲆⵠ.get("starve_accessory"));
      v.ᐃⵠᐃΔ = f || 0;
      v.ⵠΔⲆΔⲆ = d || 0;
      v.ᐃΔᐃⵠᐃ = b || 1;
      v.ΔΔⲆⲆΔ = a || 0;
      v.ⲆⵠⲆΔⵠ = e || 0;
      v.Ⲇⵠᐃᐃⵠ = c || 0;
    }
    function a() {
      for (var a = ᐃΔⲆΔ.ΔΔᐃⲆⵠ, b = 0; b < a.length; b++) {
        if (a[b].ⲆⵠΔ === ⲆΔⵠ.ⲆᐃⲆΔᐃ) {
          v.unlock.ᐃⵠᐃΔ[b] = 1;
        } else {
          v.unlock.ᐃⵠᐃΔ[b] = 0;
        }
      }
      a = ᐃΔⲆΔ.ᐃⵠΔⲆΔ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ⲆⵠΔ === ⲆΔⵠ.ⲆᐃⲆΔᐃ) {
          v.unlock.ΔΔⲆⲆΔ[b] = 1;
        } else {
          v.unlock.ΔΔⲆⲆΔ[b] = 0;
        }
      }
      a = ᐃΔⲆΔ.ⲆΔⵠΔ;
      b = 0;
      for (; a.length > b; b++) {
        if (ⲆΔⵠ.ⲆᐃⲆΔᐃ === a[b].ⲆⵠΔ) {
          v.unlock.ⲆⵠⲆΔⵠ[b] = 1;
        } else {
          v.unlock.ⲆⵠⲆΔⵠ[b] = 0;
        }
      }
      a = ᐃΔⲆΔ.ΔⵠⲆⲆⲆ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ⲆⵠΔ === ⲆΔⵠ.ⲆᐃⲆΔᐃ) {
          v.unlock.ⵠΔⲆΔⲆ[b] = 1;
        } else {
          v.unlock.ⵠΔⲆΔⲆ[b] = 0;
        }
      }
      a = ᐃΔⲆΔ.ⲆⵠⲆᐃⲆ;
      b = 0;
      for (; b < a.length; b++) {
        if (ⲆΔⵠ.ⲆᐃⲆΔᐃ === a[b].ⲆⵠΔ) {
          v.unlock.ᐃΔᐃⵠᐃ[b] = 1;
          v.unlock.Ⲇⵠᐃᐃⵠ[b] = 1;
        } else {
          v.unlock.ᐃΔᐃⵠᐃ[b] = 0;
          v.unlock.Ⲇⵠᐃᐃⵠ[b] = 0;
        }
      }
    }
    this.waiting = Sr;
    this.ΔⲆᐃⵠⵠΔⵠ = 0;
    this.ᐃΔⲆⲆⲆⵠΔ = -1;
    this.ᐃΔⲆᐃⲆⵠᐃ = {
      translate: {
        x: 0,
        y: 0
      },
      angle: 0,
      ΔΔ: ⵠⵠ[301],
      ΔⵠᐃⲆ: function () {
        this.angle += vx * 2;
        u.save();
        u.translate(this.translate.x + this.ΔΔ.width / 2, this.translate.y + this.ΔΔ.height / 2);
        u.rotate(this.angle);
        Up(u, this.ΔΔ, -this.ΔΔ.width / 2, -this.ΔΔ.height / 2);
        u.restore();
      }
    };
    this.ΔᐃᐃΔΔⲆᐃ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: 0,
        x: 0
      },
      ⵠⲆⲆ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ΔⵠⲆⵠⵠ = 0;
    this.ΔⲆᐃΔⵠΔⵠ = -1;
    this.ⲆᐃᐃⲆᐃᐃᐃ = al;
    this.ⲆⲆᐃᐃⵠⲆΔ = "";
    this.ⲆᐃⵠΔⲆⵠΔ = "";
    this.ᐃᐃΔⵠΔⵠΔ = zs;
    this.ⵠⲆⵠᐃΔ = 0;
    this.ΔΔᐃⲆⲆΔΔ = -1;
    this.ΔᐃᐃⲆⵠⲆᐃ = undefined;
    this.ΔΔΔΔᐃⵠⵠ = 0;
    this.ⲆⵠⵠΔⲆⲆⲆ = 0;
    this.ᐃⲆⲆΔⲆᐃⵠ = 0;
    this.ⲆΔⵠΔⵠ = 0;
    this.ᐃⲆΔΔᐃᐃⵠ = 0;
    this.time = 0;
    this.ΔⲆᐃⲆⵠ = 0;
    this.ΔⲆⲆΔⲆΔΔ = 0;
    this.ΔΔⵠΔⵠⲆΔ = 0;
    this.ΔⵠΔⲆⲆΔⵠ = 0;
    this.ⲆᐃΔⵠⲆᐃⵠ = 0;
    this.ⲆᐃⲆΔΔⵠΔ = [];
    this.ⲆⵠⲆⵠᐃ = -1;
    this.ΔⲆΔⵠᐃⵠᐃ = -1;
    this.ⵠᐃΔⲆᐃⲆⵠ = -1;
    this.ΔⵠⵠⵠⲆⲆΔ = undefined;
    this.ᐃᐃᐃΔⲆᐃΔ = undefined;
    this.ⵠᐃΔᐃΔⵠⵠ = -1;
    this.ᐃⲆⵠⵠⲆᐃⲆ = -1;
    this.ⲆᐃⵠᐃΔⵠΔ = -1;
    this.ᐃΔΔΔΔⲆΔ = -1;
    this.ΔⵠⲆⵠⲆΔⵠ = undefined;
    this.ᐃⵠⲆᐃᐃΔⲆ = undefined;
    this.ⲆⵠⲆΔⵠᐃΔ = undefined;
    this.ⵠⵠΔᐃⲆᐃΔ = fo;
    this.ᐃΔⲆΔⲆⲆΔ = _h;
    this.ⲆᐃⵠΔⲆⲆⲆ = undefined;
    this.ⵠΔⲆⲆΔⵠⵠ = Xs;
    this.ⲆᐃⲆᐃᐃᐃᐃ = undefined;
    this.ⵠⵠⵠⵠΔΔΔ = undefined;
    this.ⲆⵠⲆᐃᐃⵠⲆ = 3;
    this.ᐃΔΔΔ = 0;
    this.ᐃᐃΔⵠΔⵠΔⵠⵠ = false;
    this.ⲆᐃΔⲆΔ = ᐃΔⲆⵠ.get("starve_quality") ? ᐃΔⲆⵠ.get("starve_quality") : "high";
    if (this.ⲆᐃΔⲆΔ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ⲆᐃΔⲆΔ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ⲆᐃΔⲆΔ = 0;
    }
    this.ⲆⵠⲆΔᐃⲆΔᐃΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ᐃΔⲆⵠ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      qx.ⲆΔⵠᐃⲆΔᐃ();
      lx.ⲆᐃΔⲆΔ = 1;
    };
    this.ᐃⲆᐃⲆⵠᐃⵠⵠⲆ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ᐃΔⲆⵠ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (Iq / Kq);
      qx.ⲆΔⵠᐃⲆΔᐃ();
      lx.ⲆᐃΔⲆΔ = 0;
    };
    if (sr === ᐃΔⲆⵠ.get("starve_mapping") && $q === "FR") {
      sx.ᐃᐃᐃⵠᐃⲆⲆ();
      this.mapping = "azerty";
    } else {
      this.mapping = ᐃΔⲆⵠ.get("starve_mapping") ? ᐃΔⲆⵠ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      sx.ᐃᐃᐃⵠᐃⲆⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ᐃᐃᐃⵠᐃⲆⲆ = function () {
      sx.ᐃᐃᐃⵠᐃⲆⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ᐃΔⲆⵠ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⵠΔⵠⵠⲆⵠⵠ = function () {
      sx.ⵠΔⵠⵠⲆⵠⵠ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ᐃΔⲆⵠ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ΔⵠᐃⵠⲆᐃⵠ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        y: 0,
        x: 0
      },
      ⵠⲆⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    n();
    this.unlock = {};
    this.unlock.ᐃⵠᐃΔ = [];
    this.unlock.ⲆⵠⲆΔⵠ = [];
    this.unlock.ⵠΔⲆΔⲆ = [];
    this.unlock.ᐃΔᐃⵠᐃ = [];
    this.unlock.Ⲇⵠᐃᐃⵠ = [];
    this.unlock.ΔΔⲆⲆΔ = [];
    this.ⵠΔⲆⲆⲆⲆΔ = 0;
    this.ⲆΔᐃⲆⲆⲆᐃ = a;
    a();
    this.ⲆΔᐃΔᐃ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        x: 0,
        y: 0
      },
      ⵠⲆⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var i;
    var o = 0;
    function r() {
      v.ⵠⲆⲆ();
      if (++o == 30) {
        v.ⲆⲆΔΔᐃⵠΔ();
        v.ΔⲆᐃⵠⵠΔⵠ = Cl;
        v.ⵠⲆⲆ();
        return;
      }
      rg.setTimeout(r, 33);
    }
    this.ᐃⲆⵠⵠᐃ = function (a) {
      i = a;
      v.ⲆⵠᐃⵠⲆⲆᐃ();
      v.ΔⲆᐃⵠⵠΔⵠ = 0;
      g = -1;
      t();
    };
    var g = -1;
    function t() {
      v.ⵠⲆⲆ();
      if (++g == 30) {
        ᐃΔⲆⵠ.set("starve_nickname", v.ΔΔΔᐃᐃ.input.value, {
          expires: 30
        });
        v.ΔΔΔᐃᐃ.style.display = "none";
        v.Ⲇⵠⵠᐃⵠ.style.display = "none";
        v.ΔᐃᐃΔΔⲆᐃ.style.display = "none";
        v.ΔⵠᐃⵠⲆᐃⵠ.style.display = "none";
        v.ⲆΔᐃΔᐃ.style.display = "none";
        v.stop();
        i();
        return;
      }
      rg.setTimeout(t, 33);
    }
    this.ⵠⲆᐃᐃᐃ = false;
    this.stop = function () {
      this.ⵠⲆᐃᐃᐃ = false;
    };
    this.ᐃΔⲆΔⵠ = function () {
      zx();
      document.getElementById("game_body").style.backgroundColor = Cr.ΔΔΔᐃⵠ[kx.time];
      v.ΔΔΔᐃᐃ.style.display = "inline-block";
      v.Ⲇⵠⵠᐃⵠ.style.display = "inline-block";
      v.ΔᐃᐃΔΔⲆᐃ.style.display = "inline-block";
      v.ΔⵠᐃⵠⲆᐃⵠ.style.display = "inline-block";
      v.ⲆΔᐃΔᐃ.style.display = "inline-block";
      v.waiting = Vg;
      v.ⵠⲆᐃᐃᐃ = true;
      g = -1;
      o = 0;
      r();
    };
    this.ⵠⲆᐃᐃⲆⵠⲆ = function (a, b) {
      b = b < 0 ? -b : b;
      if (da === (a.position & da)) {
        if (_ === (a.position & _)) {
          a.translate.x = ao + a.translate.ⵠΔⵠΔⵠ - b;
        } else if ((a.position & aa) === aa) {
          a.translate.x = ao + a.translate.ⵠΔⵠΔⵠ + b;
        } else {
          a.translate.x = ao + a.translate.ⵠΔⵠΔⵠ;
        }
      } else if ((a.position & _) === _) {
        a.translate.x = a.translate.ⵠΔⵠΔⵠ - b;
      } else if ((a.position & aa) === aa) {
        a.translate.x = Yn - a.translate.ⵠΔⵠΔⵠ + b;
      } else {
        a.translate.x = a.translate.ⵠΔⵠΔⵠ;
      }
      if (ea === (a.position & ea)) {
        if ((a.position & ba) === ba) {
          a.translate.y = no + a.translate.ⲆΔᐃⵠⵠ - b;
        } else if (ca === (a.position & ca)) {
          a.translate.y = no + a.translate.ⲆΔᐃⵠⵠ + b;
        } else {
          a.translate.y = no + a.translate.ⲆΔᐃⵠⵠ;
        }
      } else if (ba === (a.position & ba)) {
        a.translate.y = a.translate.ⲆΔᐃⵠⵠ - b;
      } else if ((a.position & ca) === ca) {
        a.translate.y = _n + a.translate.ⲆΔᐃⵠⵠ + b;
      } else {
        a.translate.y = a.translate.ⲆΔᐃⵠⵠ;
      }
      if (a.style !== undefined) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ⵠⲆⲆ = function () {
      var a = 0;
      if (o != 30 || g != -1) {
        if (o != 30) {
          a = 1500 / (o + 1) - 50;
        }
        if (g != -1) {
          a = -(1750 / (30 - g + 1) - 48);
        }
      }
      for (var b = 0; b < this.ΔⲆⲆᐃ.length; b++) {
        this.ⵠⲆᐃᐃⲆⵠⲆ(this.ΔⲆⲆᐃ[b], a);
      }
      for (b = 0; b < this.buttons.length; b++) {
        this.ⵠⲆᐃᐃⲆⵠⲆ(this.buttons[b].info, a);
      }
      for (b = 0; b < this.ⵠⵠⲆⲆΔ.length; b++) {
        this.ⵠⲆᐃᐃⲆⵠⲆ(this.ⵠⵠⲆⲆΔ[b], a);
      }
      this.ᐃΔⲆᐃⲆⵠᐃ.translate.x = (Yn - this.ᐃΔⲆᐃⲆⵠᐃ.ΔΔ.width) / 2;
      this.ᐃΔⲆᐃⲆⵠᐃ.translate.y = 0;
      this.ΔᐃᐃΔΔⲆᐃ.translate.x = Yn - 450;
      this.ΔᐃᐃΔΔⲆᐃ.translate.y = _n - 40;
      this.ΔⵠᐃⵠⲆᐃⵠ.translate.x = Yn - 340;
      this.ΔⵠᐃⵠⲆᐃⵠ.translate.y = _n - 25;
      this.ⲆΔᐃΔᐃ.translate.x = Yn - 320;
      this.ⲆΔᐃΔᐃ.translate.y = 80;
      if (o != 30 || g != -1) {
        var c = 0;
        if (o != 30) {
          c = 1500 / (o + 1) - 50;
        }
        if (g != -1) {
          c = -(1750 / (30 - g + 1) - 48);
        }
        this.ᐃΔⲆᐃⲆⵠᐃ.translate.y -= c > 0 ? c : -c;
        this.ΔᐃᐃΔΔⲆᐃ.translate.y -= c < 0 ? c : -c;
        this.ΔⵠᐃⵠⲆᐃⵠ.translate.y -= c < 0 ? c : -c;
      }
      this.ΔᐃᐃΔΔⲆᐃ.ⵠⲆⲆ();
      this.ΔⵠᐃⵠⲆᐃⵠ.ⵠⲆⲆ();
      this.ⲆΔᐃΔᐃ.ⵠⲆⲆ();
    };
    this.ⲆⲆΔⲆⲆⵠΔ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; b.length > f; f++) {
        var g = b[f][0];
        var h = b[f][1] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, Vg);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ᐃᐃΔⲆⵠⲆⲆᐃⲆ = function () {
      this.ⲆⲆᐃᐃⵠⲆΔ = document.getElementById("account_nickname_input").value;
      if (this.ⲆᐃⵠΔⲆⵠΔ !== this.ⲆⲆᐃᐃⵠⲆΔ) {
        this.ⲆᐃⵠΔⲆⵠΔ = this.ⲆⲆᐃᐃⵠⲆΔ;
        this.ᐃᐃΔⵠΔⵠΔ = xf(this.ⲆⲆᐃᐃⵠⲆΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ΔⵠᐃⲆ = function () {
      Ip();
      lx.ΔΔΔΔᐃⵠⵠ = ⵠᐃⵠ.ⵠⵠⲆⲆⵠ(lx.ΔΔΔΔᐃⵠⵠ, lx.ⲆⵠⵠΔⲆⲆⲆ, 0.03);
      this.ΔⲆⲆᐃ[ᐃⵠΔΔⲆⵠⵠ].translate.x = this.ΔⲆⲆᐃ[0].translate.x + -72 + lx.ΔΔΔΔᐃⵠⵠ * 165;
      this.ΔⲆⲆᐃ[ᐃⵠΔΔⲆⵠⵠ].translate.ⵠΔⵠΔⵠ = this.ΔⲆⲆᐃ[ᐃⵠΔΔⲆⵠⵠ].translate.x;
      this.ΔⲆⲆᐃ[ᐃⵠΔΔⲆⵠⵠ].translate.y = this.ΔⲆⲆᐃ[0].translate.y + 30;
      this.ΔⲆⲆᐃ[ᐃⵠΔΔⲆⵠⵠ].translate.ⲆΔᐃⵠⵠ = this.ΔⲆⲆᐃ[ᐃⵠΔΔⲆⵠⵠ].translate.y;
      for (var c = 2; c < this.ΔⲆⲆᐃ.length; c++) {
        if (this.ΔⲆⲆᐃ[c].active === ia) {
          this.ΔⲆⲆᐃ[c].ΔⵠᐃⲆ(u);
        }
      }
      var i;
      if ((i = this.ⲆⵠⲆⵠᐃ - Date.now()) > 0) {
        var t = Math.floor(i / 60000);
        var y = Math.floor(t / 60);
        if ((t %= 60) !== this.ⵠᐃΔⲆᐃⲆⵠ) {
          this.ⵠᐃΔⲆᐃⲆⵠ = t;
          t = t < 10 ? "0" + t : "" + t;
          v.ΔⵠⵠⵠⲆⲆΔ = xf(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ΔⲆΔⵠᐃⵠᐃ !== y) {
          this.ΔⲆΔⵠᐃⵠᐃ = y;
          y = y < 10 ? "0" + y : "" + y;
          v.ᐃᐃᐃΔⲆᐃΔ = xf(y, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (W = this.ΔⲆⲆᐃ[ΔⲆⵠᐃⲆⵠⲆ]).ΔⵠᐃⲆ(u);
        var K = this.ᐃᐃᐃΔⲆᐃΔ;
        Up(u, K, W.translate.x - K.width / 4 + 182, W.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ΔⵠⵠⵠⲆⲆΔ;
        Up(u, K, W.translate.x - K.width / 4 + 251, W.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
      }
      if ((i = this.ⵠᐃΔᐃΔⵠⵠ - Date.now()) > 0) {
        t = Math.floor(i / 60000);
        y = Math.floor(t / 60);
        var W;
        var X = Math.floor(y / 24);
        t %= 60;
        y %= 24;
        if (this.ᐃΔΔΔΔⲆΔ !== t) {
          this.ᐃΔΔΔΔⲆΔ = t;
          t = t < 10 ? "0" + t : "" + t;
          v.ΔⵠⲆⵠⲆΔⵠ = xf(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (y !== this.ⲆᐃⵠᐃΔⵠΔ) {
          this.ⲆᐃⵠᐃΔⵠΔ = y;
          y = y < 10 ? "0" + y : "" + y;
          v.ᐃⵠⲆᐃᐃΔⲆ = xf(y, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ᐃⲆⵠⵠⲆᐃⲆ !== X) {
          this.ᐃⲆⵠⵠⲆᐃⲆ = X;
          X = X < 10 ? "0" + X : "" + X;
          v.ⲆⵠⲆΔⵠᐃΔ = xf(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (W = this.ΔⲆⲆᐃ[ⲆᐃΔⲆⵠⵠΔ]).ΔⵠᐃⲆ(u);
        K = this.ⲆⵠⲆΔⵠᐃΔ;
        Up(u, K, W.translate.x - K.width / 4 + 113, W.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ᐃⵠⲆᐃᐃΔⲆ;
        Up(u, K, W.translate.x - K.width / 4 + 182, W.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ΔⵠⲆⵠⲆΔⵠ;
        Up(u, K, W.translate.x - K.width / 4 + 251, W.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
      }
      if (x === (this.ⵠⲆΔΔⵠ & x)) {
        this.buttons[ⵠΔⲆΔΔΔΔ].info.state = Af;
      } else if (z === (this.ⵠⲆΔΔⵠ & z)) {
        this.buttons[ᐃΔᐃᐃΔⵠΔ].info.state = Af;
      } else if ((this.ⵠⲆΔΔⵠ & C) === C) {
        this.buttons[ⲆᐃΔᐃⲆΔΔ].info.state = Af;
      } else if ((this.ⵠⲆΔΔⵠ & m) === m) {
        this.buttons[ⲆᐃᐃΔⵠⵠⵠ].info.state = Af;
      } else if ((this.ⵠⲆΔΔⵠ & f) === f) {
        this.buttons[ΔᐃⵠⲆⲆⵠⲆ].info.state = Af;
      } else if ((this.ⵠⲆΔΔⵠ & p) === p) {
        this.buttons[ⵠᐃᐃⵠⲆⵠᐃ].info.state = Af;
      } else if (F === (this.ⵠⲆΔΔⵠ & F) || (this.ⵠⲆΔΔⵠ & J) === J || (this.ⵠⲆΔΔⵠ & M) === M || (this.ⵠⲆΔΔⵠ & B) === B || E === (this.ⵠⲆΔΔⵠ & E) || D === (this.ⵠⲆΔΔⵠ & D) || (this.ⵠⲆΔΔⵠ & I) === I) {
        this.buttons[ΔΔᐃᐃᐃⵠⲆ].info.state = Af;
      } else if (S === (this.ⵠⲆΔΔⵠ & S) || T === (this.ⵠⲆΔΔⵠ & T) || Q === (this.ⵠⲆΔΔⵠ & Q) || R === (this.ⵠⲆΔΔⵠ & R) || (this.ⵠⲆΔΔⵠ & j) === j || G === (this.ⵠⲆΔΔⵠ & G)) {
        this.buttons[ⲆᐃΔᐃⲆΔΔ].info.state = Af;
      } else if ((this.ⵠⲆΔΔⵠ & N) === N || (this.ⵠⲆΔΔⵠ & q) === q || O === (this.ⵠⲆΔΔⵠ & O)) {
        this.buttons[ᐃΔᐃᐃⲆΔⵠ].info.state = Af;
      } else if ((this.ⵠⲆΔΔⵠ & H) === H) {
        this.buttons[ⲆᐃᐃΔⵠⵠⵠ].info.state = Af;
      }
      if (z === (this.ⵠⲆΔΔⵠ & z)) {
        if (this.ⵠΔⲆⲆΔⵠⵠ === this.ⵠⲆⵠᐃΔΔⲆ) {
          this.ⲆᐃⵠΔⲆⲆⲆ = this.ᐃⲆΔΔⵠⲆΔ;
          this.buttons[this.ᐃⲆΔΔⵠⲆΔ].info.active = ha;
          this.buttons[this.ΔⲆⵠΔᐃⲆΔ].info.active = ha;
          this.buttons[this.ᐃⲆΔⲆΔⲆⵠ].info.active = ha;
        } else {
          this.buttons[this.ᐃⲆΔΔⵠⲆΔ].info.active = ia;
          this.buttons[this.ΔⲆⵠΔᐃⲆΔ].info.active = ia;
          this.buttons[this.ᐃⲆΔⲆΔⲆⵠ].info.active = ia;
        }
        if (this.ⵠΔⲆⲆΔⵠⵠ === this.ⵠⲆⲆΔⲆⵠΔ) {
          this.buttons[this.ⵠⲆⲆΔⲆⵠΔ].info.state = Af;
        } else if (this.ΔⲆΔⲆᐃⲆᐃ === this.ⵠΔⲆⲆΔⵠⵠ) {
          this.buttons[this.ΔⲆΔⲆᐃⲆᐃ].info.state = Af;
        } else if (this.ⵠⲆⵠᐃΔΔⲆ === this.ⵠΔⲆⲆΔⵠⵠ) {
          this.buttons[this.ⵠⲆⵠᐃΔΔⲆ].info.state = Af;
        } else if (this.ⲆⲆΔᐃᐃΔᐃ === this.ⵠΔⲆⲆΔⵠⵠ) {
          this.buttons[this.ⲆⲆΔᐃᐃΔᐃ].info.state = Af;
        } else if (this.ΔⲆⵠⵠⵠⵠΔ === this.ⵠΔⲆⲆΔⵠⵠ) {
          this.buttons[this.ΔⲆⵠⵠⵠⵠΔ].info.state = Af;
        }
        if (this.ⲆᐃⵠΔⲆⲆⲆ === this.ᐃⲆΔΔⵠⲆΔ) {
          this.buttons[this.ᐃⲆΔΔⵠⲆΔ].info.state = Af;
        } else if (this.ΔⲆⵠΔᐃⲆΔ === this.ⲆᐃⵠΔⲆⲆⲆ) {
          this.buttons[this.ΔⲆⵠΔᐃⲆΔ].info.state = Af;
        } else if (this.ᐃⲆΔⲆΔⲆⵠ === this.ⲆᐃⵠΔⲆⲆⲆ) {
          this.buttons[this.ᐃⲆΔⲆΔⲆⵠ].info.state = Af;
        }
        if (this.ⲆᐃⲆᐃᐃᐃᐃ === this.ΔᐃΔⵠΔᐃⲆ) {
          this.buttons[this.ΔᐃΔⵠΔᐃⲆ].info.state = Af;
        } else if (this.ⲆᐃⲆᐃᐃᐃᐃ === this.ⲆⵠΔᐃᐃⲆⲆ) {
          this.buttons[this.ⲆⵠΔᐃᐃⲆⲆ].info.state = Af;
        } else if (this.ⲆᐃⲆᐃᐃᐃᐃ === this.ⵠΔⵠⲆΔΔΔ) {
          this.buttons[this.ⵠΔⵠⲆΔΔΔ].info.state = Af;
        }
        if (this.ᐃⵠⲆⲆΔⲆᐃ === this.ⵠⵠⵠⵠΔΔΔ) {
          this.buttons[this.ᐃⵠⲆⲆΔⲆᐃ].info.state = Af;
        } else if (this.ⵠⵠⵠⵠΔΔΔ === this.ᐃΔⵠΔⵠⲆⲆ) {
          this.buttons[this.ᐃΔⵠΔⵠⲆⲆ].info.state = Af;
        } else if (this.ⵠⵠⵠⵠΔΔΔ === this.ⵠⲆᐃⲆᐃΔΔ) {
          this.buttons[this.ⵠⲆᐃⲆᐃΔΔ].info.state = Af;
        } else if (this.ᐃⵠⲆΔⵠⲆⵠ === this.ⵠⵠⵠⵠΔΔΔ) {
          this.buttons[this.ᐃⵠⲆΔⵠⲆⵠ].info.state = Af;
        } else if (this.ⵠΔΔᐃⵠΔⲆ === this.ⵠⵠⵠⵠΔΔΔ) {
          this.buttons[this.ⵠΔΔᐃⵠΔⲆ].info.state = Af;
        } else if (this.ᐃⵠⲆΔⲆⵠⲆ === this.ⵠⵠⵠⵠΔΔΔ) {
          this.buttons[this.ᐃⵠⲆΔⲆⵠⲆ].info.state = Af;
        }
      }
      if (m === (this.ⵠⲆΔΔⵠ & m)) {
        if (this.ᐃΔⲆⲆⲆⵠΔ === -1) {
          this.buttons[Aa].info.state = Af;
        } else if (this.ᐃΔⲆⲆⲆⵠΔ === 0) {
          this.buttons[Ba].info.state = Af;
        } else if (this.ᐃΔⲆⲆⲆⵠΔ === 2) {
          this.buttons[Da].info.state = Af;
        } else if (this.ᐃΔⲆⲆⲆⵠΔ === 3) {
          this.buttons[Ea].info.state = Af;
        } else if (this.ᐃΔⲆⲆⲆⵠΔ === 4) {
          this.buttons[Ca].info.state = Af;
        }
        if (this.ⲆⵠⲆᐃᐃⵠⲆ === 0) {
          this.buttons[ua].info.state = Af;
        } else if (this.ⲆⵠⲆᐃᐃⵠⲆ === 1) {
          this.buttons[va].info.state = Af;
        } else if (this.ⲆⵠⲆᐃᐃⵠⲆ === 2) {
          this.buttons[wa].info.state = Af;
        } else if (this.ⲆⵠⲆᐃᐃⵠⲆ === 3) {
          this.buttons[xa].info.state = Af;
        } else if (this.ⲆⵠⲆᐃᐃⵠⲆ === 4) {
          this.buttons[ya].info.state = Af;
        } else if (this.ⲆⵠⲆᐃᐃⵠⲆ === 5) {
          this.buttons[za].info.state = Af;
        }
      }
      if ((this.ⵠⲆΔΔⵠ & x) === x && px.ᐃⲆᐃΔⵠᐃⲆ === 0) {
        if (this.buttons[na].ⵠΔⲆⲆⵠΔΔ(tx.ⲆⵠΔᐃ)) {
          this.buttons[na].hint = Math.min(1, this.buttons[na].hint + vx * 1.5);
        } else {
          this.buttons[na].hint = Math.max(0, this.buttons[na].hint - vx * 1.5);
        }
        if (this.buttons[oa].ⵠΔⲆⲆⵠΔΔ(tx.ⲆⵠΔᐃ)) {
          this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + vx * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - vx * 1.5);
        }
        if (this.buttons[pa].ⵠΔⲆⲆⵠΔΔ(tx.ⲆⵠΔᐃ)) {
          this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + vx * 1.5);
        } else {
          this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - vx * 1.5);
        }
        if (this.buttons[sa].ⵠΔⲆⲆⵠΔΔ(tx.ⲆⵠΔᐃ)) {
          this.buttons[sa].hint = Math.min(1, this.buttons[sa].hint + vx * 1.5);
        } else {
          this.buttons[sa].hint = Math.max(0, this.buttons[sa].hint - vx * 1.5);
        }
        if (this.buttons[qa].ⵠΔⲆⲆⵠΔΔ(tx.ⲆⵠΔᐃ)) {
          this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + vx * 1.5);
        } else {
          this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - vx * 1.5);
        }
        if (this.buttons[ra].ⵠΔⲆⲆⵠΔΔ(tx.ⲆⵠΔᐃ)) {
          this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + vx * 1.5);
        } else {
          this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - vx * 1.5);
        }
      }
      var Y = 1;
      if ((this.ⵠⲆΔΔⵠ & (J | M | B | E | D | I)) > 1) {
        K = ᐃᐃ.ᐃⵠⵠⲆⵠΔΔ;
        u.save();
        u.translate(ao, ma + K.height / 4);
        if (this.ⲆⲆⵠⲆⵠ === 1) {
          this.ⲆΔΔᐃⲆΔᐃ += vx / 3;
          Y = this.ⲆΔΔⵠⵠΔΔ - 100 / Math.pow(1 + this.ⲆΔΔᐃⲆΔᐃ, 1 + this.ⲆΔΔᐃⲆΔᐃ);
          u.rotate(Y);
        }
        Up(u, K, -K.width / 4, -K.height / 4, K.width / 2, K.height / 2);
        u.restore();
      }
      if (px.ᐃⲆᐃΔⵠᐃⲆ === 0) {
        if (px.ⲆⵠᐃΔΔ === 0) {
          this.buttons[na].info.state = Af;
        } else if (px.ⲆⵠᐃΔΔ === 4) {
          this.buttons[oa].info.state = Af;
        } else if (px.ⲆⵠᐃΔΔ === 2) {
          this.buttons[qa].info.state = Af;
        } else if (px.ⲆⵠᐃΔΔ === 3) {
          this.buttons[ra].info.state = Af;
        } else if (px.ⲆⵠᐃΔΔ === 6) {
          this.buttons[pa].info.state = Af;
        } else if (px.ⲆⵠᐃΔΔ === 7) {
          this.buttons[sa].info.state = Af;
        }
      }
      for (c = 1; this.buttons.length > c; c++) {
        if (ia === this.buttons[c].info.active) {
          this.buttons[c].ΔⵠᐃⲆ(u);
        }
      }
      this.ΔⲆⲆᐃ[0].ΔⵠᐃⲆ(u);
      if ((this.ⵠⲆΔΔⵠ & (L | U)) > 0) {
        K = this.ᐃᐃΔⵠΔⵠΔ;
        Up(u, K, ao - K.width / 4, 138, K.width / 2, K.height / 2);
      }
      var Z = Math.max(1, Math.min(18, Math.floor((lx.ⵠⲆⵠᐃΔ + 3) / 2)));
      this.ΔⲆⲆᐃ[Z].active = ia;
      this.ΔⲆⲆᐃ[Z].ΔⵠᐃⲆ(u);
      this.ΔⲆⲆᐃ[Z].active = ha;
      this.buttons[0].ΔⵠᐃⲆ(u);
      if ((this.ⵠⲆΔΔⵠ & (C | T | R | S | j)) > 1) {
        var l = (this.ⵠⲆΔΔⵠ & (T | R | S | j)) > 1 ? -190 : 0;
        K = ⵠⵠ[29][this.ⲆⵠⲆΔⵠ][this.ⵠΔⲆⲆⲆⲆΔ];
        Up(u, K, ao - K.width / 4 + l, 183, K.width / 2, K.height / 2);
        this.ᐃΔΔΔ = (this.ᐃΔΔΔ + vx * 1000) % 2000;
        var b = (this.ᐃΔΔΔ < 1000) * 4.5 ? this.ᐃΔΔΔ / 1000 : (2000 - this.ᐃΔΔΔ) / 1000;
        K = ⵠⵠ[28][this.ⵠΔⲆΔⲆ][this.ⵠΔⲆⲆⲆⲆΔ];
        Up(u, K, ao - K.width / 4 - 62 + b + l, 240, K.width / 2, K.height / 2);
        K = ⵠⵠ[7][this.ᐃⵠᐃΔ][this.ⵠΔⲆⲆⲆⲆΔ];
        Up(u, K, ao - K.width / 4 - 54 + b + l, 272, K.width / 2, K.height / 2);
        Up(u, K, ao - K.width / 4 + 54 - b + l, 272, K.width / 2, K.height / 2);
        K = ⵠⵠ[255][this.ᐃⵠᐃΔ][this.ⵠΔⲆⲆⲆⲆΔ];
        Up(u, K, ao - K.width / 4 + l, 222, K.width / 2, K.height / 2);
        K = ⵠⵠ[796][this.ΔΔⲆⲆΔ][this.ⵠΔⲆⲆⲆⲆΔ];
        Up(u, K, ao - K.width / 4 + l, 222, K.width / 2, K.height / 2);
      }
      if ((this.ⵠⲆΔΔⵠ & C) === C) {
        K = ⵠⵠ[250][this.ᐃΔᐃⵠᐃ][this.ⵠΔⲆⲆⲆⲆΔ];
        Up(u, K, ao - K.width / 4 - 61, 406 - K.height / 4, K.width / 2, K.height / 2);
        K = ⵠⵠ[250][this.Ⲇⵠᐃᐃⵠ][this.ⵠΔⲆⲆⲆⲆΔ];
        Up(u, K, ao - K.width / 4 + 53, 406 - K.height / 4, K.width / 2, K.height / 2);
      }
      if (Q === (this.ⵠⲆΔΔⵠ & Q)) {
        K = ⵠⵠ[250][this.Ⲇⵠᐃᐃⵠ][this.ⵠΔⲆⲆⲆⲆΔ];
        Up(u, K, ao - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
      }
      if ((this.ⵠⲆΔΔⵠ & G) === G) {
        K = ⵠⵠ[250][this.ᐃΔᐃⵠᐃ][this.ⵠΔⲆⲆⲆⲆΔ];
        Up(u, K, ao - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
      }
      if ((this.ⵠⲆΔΔⵠ & (T | R | S | j | Q | G)) > 1) {
        for (c = 1; c < this.buttons.length; c++) {
          if ((this.buttons[c].view & this.ⵠⲆΔΔⵠ) !== 0) {
            var _ = this.buttons[c].info;
            if (_.ⵠⵠⵠᐃΔᐃⵠ >= 0) {
              K = _.ΔᐃⲆⵠⵠⵠΔΔΔ[_.ⵠⵠⵠᐃΔᐃⵠ].ⲆΔⲆ;
              Up(u, K, _.translate.x - K.width / 8 + 44.5, _.translate.y - K.height / 8 + 45.5, K.width / 4, K.height / 4);
              if (_.ΔⲆⵠΔⵠⲆΔ !== 1) {
                K = ᐃᐃ.ᐃⲆΔΔᐃΔᐃ;
                Up(u, K, _.translate.x - K.width / 4 + 44.5, _.translate.y - K.height / 4 + 44.5, K.width / 2, K.height / 2);
              }
            }
          }
        }
        K = this.ⵠⵠΔᐃⲆᐃΔ;
        Up(u, K, ao - 312, 375, K.width / 2, K.height / 2);
        K = this.ᐃΔⲆΔⲆⲆΔ;
        Up(u, K, ao - 312, 395, K.width / 2, K.height / 2);
      }
      if (this.ΔⲆᐃΔⵠΔⵠ !== this.ΔⵠⲆⵠⵠ) {
        this.ΔⲆᐃΔⵠΔⵠ = this.ΔⵠⲆⵠⵠ;
        this.ⲆᐃᐃⲆᐃᐃᐃ = xf("" + this.ΔⵠⲆⵠⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Up(u, this.ⲆᐃᐃⲆᐃᐃᐃ, this.ΔⲆⲆᐃ[0].translate.x + 350, 15, this.ⲆᐃᐃⲆᐃᐃᐃ.w2, this.ⲆᐃᐃⲆᐃᐃᐃ.ⵠΔⲆⲆΔ);
      if (this.ⵠⲆⵠᐃΔ !== this.ΔΔᐃⲆⲆΔΔ) {
        this.ΔΔᐃⲆⲆΔΔ = this.ⵠⲆⵠᐃΔ;
        this.ΔᐃᐃⲆⵠⲆᐃ = xf("LVL " + (this.ⵠⲆⵠᐃΔ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, vs, 30, 24, al, Bj, undefined, Uj, "#3F3019", 20);
      }
      Up(u, this.ΔᐃᐃⲆⵠⲆᐃ, this.ΔⲆⲆᐃ[0].translate.x + 94, 0, this.ΔᐃᐃⲆⵠⲆᐃ.w2, this.ΔᐃᐃⲆⵠⲆᐃ.ⵠΔⲆⲆΔ);
      if (px.ᐃⲆᐃΔⵠᐃⲆ === 0) {
        var aa = this.buttons[na].hint;
        if (aa > 0) {
          K = ᐃᐃ.ᐃⲆᐃΔⲆᐃᐃ;
          Up(u, K, ao - K.width / 4, -36 - ⵠᐃⵠ.ΔΔᐃⲆΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[oa].hint) > 0) {
          K = ᐃᐃ.ⲆⲆⲆΔⲆΔΔ;
          Up(u, K, ao - K.width / 4, -36 - ⵠᐃⵠ.ΔΔᐃⲆΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[pa].hint) > 0) {
          K = ᐃᐃ.ᐃⵠᐃΔᐃᐃⵠ;
          Up(u, K, ao - K.width / 4, -36 - ⵠᐃⵠ.ΔΔᐃⲆΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[sa].hint) > 0) {
          K = ᐃᐃ.ᐃᐃⵠΔⵠΔⲆ;
          Up(u, K, ao - K.width / 4, -36 - ⵠᐃⵠ.ΔΔᐃⲆΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[ra].hint) > 0) {
          K = ᐃᐃ.ΔⲆⲆΔⲆᐃⵠ;
          Up(u, K, ao - K.width / 4, -36 - ⵠᐃⵠ.ΔΔᐃⲆΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((aa = this.buttons[qa].hint) > 0) {
          K = ᐃᐃ.ᐃᐃⵠΔⲆⵠΔ;
          Up(u, K, ao - K.width / 4, -36 - ⵠᐃⵠ.ΔΔᐃⲆΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
        }
      }
      if (this.ⲆⲆⵠⲆⵠ === 1 && Math.abs(Y - this.ⲆΔΔⵠⵠΔΔ) < 0.006) {
        u.globalAlpha = Math.min(1, this.ᐃᐃᐃⵠᐃΔⵠ * 3);
        K = ᐃᐃ.ΔᐃᐃⲆⲆΔΔ;
        u.save();
        u.translate(ao, 260);
        this.ᐃᐃᐃⵠᐃΔⵠ += vx;
        u.rotate(this.ᐃᐃᐃⵠᐃΔⵠ);
        Up(u, K, -K.width / 2, -K.height / 2, K.width, K.height);
        u.restore();
        b = 1.05 + Math.cos(this.ᐃᐃᐃⵠᐃΔⵠ * 5) * 0.05;
        if (this.ᐃⵠΔᐃᐃⲆⲆ === 0) {
          var ba = (K = ᐃΔⲆΔ.ΔΔᐃⲆⵠ[this.ⵠΔΔⵠⲆΔⲆ].ⲆΔⲆ).width * b;
          var ca = K.height * b;
          Up(u, K, ao - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⵠΔᐃᐃⲆⲆ === 1) {
          ba = (K = ᐃΔⲆΔ.ΔΔᐃⲆⵠ[0].ⲆΔⲆ).width * b;
          ca = K.height * b;
          Up(u, K, ao - ba / 2, 260 - ca / 2, ba, ca);
          ba = (K = ᐃΔⲆΔ.ᐃⵠΔⲆΔ[this.ⵠΔΔⵠⲆΔⲆ].ⲆΔⲆ).width * b;
          ca = K.height * b;
          Up(u, K, ao - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⵠΔᐃᐃⲆⲆ === 2) {
          ba = b * (K = ᐃΔⲆΔ.ⲆΔⵠΔ[this.ⵠΔΔⵠⲆΔⲆ].ⲆΔⲆ).width;
          ca = K.height * b;
          Up(u, K, ao - ba / 2, 180 - ca / 2, ba, ca);
          ba = b * (K = ᐃΔⲆΔ.ΔΔᐃⲆⵠ[0].ⲆΔⲆ).width;
          ca = b * K.height;
          Up(u, K, ao - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⵠΔᐃᐃⲆⲆ === 3) {
          ba = (K = ᐃΔⲆΔ.ΔⵠⲆⲆⲆ[this.ⵠΔΔⵠⲆΔⲆ].ⲆΔⲆ).width * b;
          ca = K.height * b;
          u.save();
          u.translate(ao, 260);
          u.rotate(Math.PI);
          Up(u, K, -ba / 2, -ca / 2, ba, ca);
          u.restore();
        } else if (this.ᐃⵠΔᐃᐃⲆⲆ === 4) {
          ba = b * (K = ᐃΔⲆΔ.ⲆⵠⲆᐃⲆ[this.ⵠΔΔⵠⲆΔⲆ].ⲆΔⲆ).width;
          ca = K.height * b;
          Up(u, K, ao - ba / 2, 260 - ca / 2, ba, ca);
        }
        K = this.ⲆⲆᐃⲆⵠⲆᐃ;
        Up(u, K, ao - K.width / 4, 340, K.width / 2, K.height / 2);
        K = this.ᐃΔⵠⲆⵠΔᐃ;
        Up(u, K, ao - K.width / 4, 365, K.width / 2, K.height / 2);
        if (this.ᐃᐃᐃⵠᐃΔⵠ > 6) {
          this.ⲆⲆⵠⲆⵠ = 0;
          V(F);
        }
        u.globalAlpha = 1;
      }
      nx.alert.ΔⵠᐃⲆ("#FFF", "#000");
      if (v.waiting) {
        this.ᐃΔⲆᐃⲆⵠᐃ.ΔⵠᐃⲆ();
      }
    };
    var b = 0;
    var x = Math.pow(2, b++);
    var m = Math.pow(2, b++);
    this.ⲆⵠΔᐃⵠ = m;
    var p = Math.pow(2, b++);
    var C = Math.pow(2, b++);
    var F = Math.pow(2, b++);
    var f = Math.pow(2, b++);
    var z = Math.pow(2, b++);
    var P = Math.pow(2, b++);
    this.ᐃᐃᐃⲆᐃ = P;
    var k = Math.pow(2, b++);
    var A = Math.pow(2, b++);
    var J = Math.pow(2, b++);
    var M = Math.pow(2, b++);
    var B = Math.pow(2, b++);
    var E = Math.pow(2, b++);
    var D = Math.pow(2, b++);
    var I = Math.pow(2, b++);
    var S = Math.pow(2, b++);
    var Q = Math.pow(2, b++);
    var T = Math.pow(2, b++);
    var R = Math.pow(2, b++);
    var j = Math.pow(2, b++);
    var G = Math.pow(2, b++);
    var U = Math.pow(2, b++);
    var L = Math.pow(2, b++);
    var N = Math.pow(2, b++);
    this.ⵠᐃΔΔΔ = N;
    var q = Math.pow(2, b++);
    this.ᐃⵠⲆΔⵠ = q;
    var O = Math.pow(2, b++);
    this.Δᐃᐃⵠᐃ = O;
    var H = Math.pow(2, b++);
    function W(a, b, c) {
      for (var d = 0; v.ΔⲆⲆᐃ.length > d; d++) {
        if (v.ΔⲆⲆᐃ[d].view & a) {
          v.ΔⲆⲆᐃ[d].active = b;
        }
      }
      for (d = 0; v.buttons.length > d; d++) {
        if (v.buttons[d].view & a) {
          v.buttons[d].info.active = b;
        }
      }
      for (d = 0; v.ⵠⵠⲆⲆΔ.length > d; d++) {
        if ((v.ⵠⵠⲆⲆΔ[d].view & a) !== 0) {
          v.ⵠⵠⲆⲆΔ[d].style.display = c;
        }
      }
    }
    this.ⵠⲆΔΔⵠ = x;
    function K() {
      var b = Number(ᐃΔⲆⵠ.get("starve_crate"));
      var c = Number(ᐃΔⲆⵠ.get("starve_dead"));
      var d = Number(ᐃΔⲆⵠ.get("starve_book"));
      var e = Number(ᐃΔⲆⵠ.get("starve_bag"));
      var f = Number(ᐃΔⲆⵠ.get("starve_skin"));
      var g = Number(ᐃΔⲆⵠ.get("starve_accessory"));
      if (lx.unlock.ᐃⵠᐃΔ[lx.ᐃⵠᐃΔ] <= 0) {
        lx.ᐃⵠᐃΔ = lx.unlock.ᐃⵠᐃΔ[f] > 0 ? f : 0;
      }
      if (lx.unlock.ⵠΔⲆΔⲆ[lx.ⵠΔⲆΔⲆ] <= 0) {
        lx.ⵠΔⲆΔⲆ = lx.unlock.ⵠΔⲆΔⲆ[d] > 0 ? d : 0;
      }
      if (lx.unlock.Ⲇⵠᐃᐃⵠ[lx.Ⲇⵠᐃᐃⵠ] <= 0) {
        lx.Ⲇⵠᐃᐃⵠ = lx.unlock.Ⲇⵠᐃᐃⵠ[c] > 0 ? c : 0;
      }
      if (lx.unlock.ᐃΔᐃⵠᐃ[lx.ᐃΔᐃⵠᐃ] <= 0) {
        lx.ᐃΔᐃⵠᐃ = lx.unlock.ᐃΔᐃⵠᐃ[b] > 0 ? b : 0;
      }
      if (lx.unlock.ΔΔⲆⲆΔ[lx.ΔΔⲆⲆΔ] <= 0) {
        lx.ΔΔⲆⲆΔ = lx.unlock.ΔΔⲆⲆΔ[g] > 0 ? g : 0;
      }
      if (lx.unlock.ⲆⵠⲆΔⵠ[lx.ⲆⵠⲆΔⵠ] <= 0) {
        lx.ⲆⵠⲆΔⵠ = lx.unlock.ⲆⵠⲆΔⵠ[e] > 0 ? e : 0;
      }
    }
    function V(a) {
      if (v.ΔⲆᐃⵠⵠΔⵠ !== Kk) {
        W(k, ha, "none");
        W(A, ha, "none");
        K();
        if (v.ⵠⲆΔΔⵠ !== a && v.ⲆⲆⵠⲆⵠ < 1) {
          v.ⲆΔᐃΔᐃ.style.display = a === x || F === a || m === a || z === a || a === C || f === a ? "inline-block" : "none";
          W(v.ⵠⲆΔΔⵠ, ha, "none");
          v.ⵠⲆΔΔⵠ = a;
          W(v.ⵠⲆΔΔⵠ, ia, "inline-block");
        }
      }
    }
    function Y(a) {
      if (Mg !== nx.ᐃᐃⲆⵠΔΔⵠ && Uk !== nx.ⲆΔᐃᐃⲆᐃᐃ && nx.ⲆΔⲆΔᐃΔΔ !== undefined && nx.ⲆΔΔⲆⵠΔⲆ !== undefined) {
        a();
      }
    }
    function X(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (b !== al) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== Uj) {
          c();
        }
      };
      d.send();
    }
    function Z() {
      K();
      if (yx % 2) {
        console.log(undefined);
        px.connect();
      } else {
        console.log(vs);
        if (rg.Widget.isBlocked === 1) {
          rg.Widget.createAdPlayer(px.connect.bind(px), px.connect.bind(px));
        } else {
          rg.Widget.preroll();
          rg.Widget.play = px.connect.bind(px);
        }
      }
    }
    this.ⲆⲆⲆⵠΔᐃⵠ = 0;
    this.ᐃᐃᐃⵠ = V;
    this.ᐃⵠΔⵠᐃΔΔ = function (c, a) {
      let e = 0;
      let b = "0";
      if (Jx) {
        b = Jx + "0";
      }
      if (nx.ᐃᐃⲆⵠΔΔⵠ) {
        Y(c);
      } else {
        X(`${Cx}token?id=${b}`, function (b) {
          if (e === 1) {
            return;
          }
          const d = b.split("_");
          const f = d[0] + "_";
          const g = Number(d[1]);
          const a = Math.abs(function (a) {
            return Tk(a, 8260, 46947, 8004, 37330, 5330);
          }(g));
          nx.ᐃᐃⲆⵠΔΔⵠ = f + a;
          Y(c);
        }, function () {
          if (e !== 1) {
            if (a === 1) {
              e = 1;
              c();
              return;
            } else {
              v.waiting = false;
              return;
            }
          }
        });
      }
      X(`${Dx}let`, function (f) {
        if (e === 1) {
          return;
        }
        {
          if (125 <= 159) {
            196;
          }
          const b = (f = f.split(":"))[0].split("_");
          76 .ΔΔⲆΔⵠᐃᐃⲆΔ = 4;
          const c = b[0] + "_";
          const d = Number(b[1]);
          if (188 <= 25) {
            211;
          }
          if (163 > 67) {
            93;
          }
          if (55 === 33) {
            67;
          }
          const a = Math.abs(pt(d));
          var j = 141;
          if (j == 13) {
            j = 148;
          }
          var k = 193;
          if (k > 9) {
            k = 150;
          }
          nx.ⲆΔᐃᐃⲆᐃᐃ = c + a;
          nx.ⲆⵠᐃⲆⲆⵠΔ = a;
          69 .ⲆΔⲆΔⵠᐃⲆΔⵠ = 13;
        }
        {
          const a = f[1].split("_");
          const b = 63;
          Math.floor(63[b.ⵠΔᐃⲆΔⵠΔ]);
          var q = 245;
          var w = 2;
          if (w === 5) {
            w = 235;
          }
          if (173 <= 171) {
            103;
          }
          if (q > 11) {
            q = 50;
          }
          if (8 === 16) {
            251;
          }
          const c = 135;
          Math.floor(135[c.ᐃΔᐃΔⵠᐃᐃ]);
          var x = 139;
          if (x > 2) {
            x = 172;
          }
          const d = a[0] + "_";
          const e = Number(a[1]);
          const g = Math.abs(Mp(e));
          var y = 163;
          if (y > 6) {
            y = 17;
          }
          if (27 > 89) {
            17;
          }
          var z = 254;
          if (z >= 1) {
            z = 43;
          }
          nx.ⲆΔⲆΔᐃΔΔ = d + g;
          nx.ⵠΔᐃⵠᐃⲆⵠⵠⲆ = g;
          if (190 == 253) {
            173;
          }
          173 .ⵠⲆⲆᐃⲆᐃΔⵠΔ = 9;
        }
        Math.floor(84[84 .ⵠᐃⵠⵠⲆⵠΔ]);
        {
          var A = 208;
          const b = 230;
          Math.floor(230[b.ᐃⲆΔⵠⵠΔⲆ]);
          if (A >= 10) {
            A = 250;
          }
          const c = f[2].split("_");
          const d = c[0] + "_";
          const e = Number(c[1]);
          const g = Math.abs(Mp(e));
          var B = 189;
          if (B == 12) {
            B = 30;
          }
          var C = 180;
          if (C === 14) {
            C = 40;
          }
          if (167 > 209) {
            214;
          }
          ({}).ΔⲆᐃΔΔⲆΔΔΔ = 6;
          if (145 <= 153) {
            4;
          }
          if (190 == 240) {
            229;
          }
          nx.ⲆΔΔⲆⵠΔⲆ = d + g;
          nx.ⲆᐃᐃⲆᐃΔⵠᐃⲆ = g;
          var D = 84;
          if (167 == 87) {
            84;
          }
          var E = 74;
          if (E > 11) {
            E = 154;
          }
          if (59 > 157) {
            143;
          }
          if (D > 11) {
            D = 172;
          }
        }
        Y(c);
        var n = 25;
        if (n == 5) {
          n = 162;
        }
        var F = 229;
        if (F == 13) {
          F = 18;
        }
      }, function () {
        if (e !== 1) {
          if (a === 1) {
            e = 1;
            c();
            return;
          } else {
            v.waiting = Kk;
            return;
          }
        }
      });
    };
    this.ᐃⲆⵠⲆᐃⲆΔ = function () {
      if (ja === v.waiting) {
        nx.reconnect.enabled = false;
        v.waiting = Ah;
        v.ᐃⵠΔⵠᐃΔΔ(Z);
      }
    };
    var _ = 1;
    var aa = 2;
    var ba = 4;
    var ca = 8;
    var da = 16;
    var ea = 32;
    var fa = 0;
    var ha = 0;
    var ia = 1;
    if (rg.innerWidth < 1300) {
      this.ΔΔΔᐃᐃ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ia,
        position: ba | _,
        view: x,
        translate: {
          ⲆΔᐃⵠⵠ: 184,
          x: 0,
          ⵠΔⵠΔⵠ: 200,
          y: 0
        }
      };
    } else {
      this.ΔΔΔᐃᐃ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ia,
        position: ba | da,
        view: x,
        translate: {
          x: 0,
          ⲆΔᐃⵠⵠ: 184,
          ⵠΔⵠΔⵠ: -180,
          y: 0
        }
      };
    }
    this.ΔΔΔᐃᐃ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !v.waiting && !v.ᐃᐃΔⵠΔⵠΔⵠⵠ) {
        v.ᐃⲆⵠⲆᐃⲆΔ();
      }
    });
    this.ΔΔΔᐃᐃ.input.value = ᐃΔⲆⵠ.get("starve_nickname") ? ᐃΔⲆⵠ.get("starve_nickname") : "";
    this.ⵠᐃΔⵠⵠΔⲆⲆⵠ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: ha,
      position: ba | da,
      view: m,
      translate: {
        ⲆΔᐃⵠⵠ: 110,
        y: 0,
        x: 0,
        ⵠΔⵠΔⵠ: -122
      }
    };
    if (rg.innerWidth < 1300) {
      this.Ⲇⵠⵠᐃⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ia,
        position: ba | _,
        view: x,
        translate: {
          ⲆΔᐃⵠⵠ: 225,
          ⵠΔⵠΔⵠ: 208,
          x: 0,
          y: 0
        }
      };
    } else {
      this.Ⲇⵠⵠᐃⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ia,
        position: ba | da,
        view: x,
        translate: {
          y: 0,
          ⲆΔᐃⵠⵠ: 225,
          x: 0,
          ⵠΔⵠΔⵠ: -180
        }
      };
    }
    this.ΔᐃΔⲆ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: ha,
      position: ba | da,
      view: z,
      translate: {
        x: 0,
        ⲆΔᐃⵠⵠ: 190,
        ⵠΔⵠΔⵠ: -294.5,
        y: 0
      }
    };
    this.ΔⵠΔⲆⲆΔⲆⵠΔ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: ha,
      position: ba | da,
      view: m,
      translate: {
        ⲆΔᐃⵠⵠ: 187,
        ⵠΔⵠΔⵠ: 125,
        x: 0,
        y: 0
      }
    };
    this.ᐃⵠΔᐃΔⲆⲆⲆⲆ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: ha,
      position: ba | da,
      view: O,
      translate: {
        ⲆΔᐃⵠⵠ: 350,
        y: 0,
        x: 0,
        ⵠΔⵠΔⵠ: -260
      }
    };
    b = 0;
    this.ⵠⵠⲆⲆΔ = [];
    this.ⵠⵠⲆⲆΔ[b++] = this.ΔΔΔᐃᐃ;
    this.ⵠⵠⲆⲆΔ[b++] = this.Ⲇⵠⵠᐃⵠ;
    this.ⵠⵠⲆⲆΔ[b++] = this.ΔᐃΔⲆ;
    this.ⵠⵠⲆⲆΔ[b++] = this.ⵠᐃΔⵠⵠΔⲆⲆⵠ;
    this.ⵠⵠⲆⲆΔ[b++] = this.ΔⵠΔⲆⲆΔⲆⵠΔ;
    this.ⵠⵠⲆⲆΔ[b++] = this.ᐃⵠΔᐃΔⲆⲆⲆⲆ;
    b = 0;
    this.ΔⲆⲆᐃ = [];
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ⲆⲆⲆᐃⵠⲆᐃ, ia, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ΔᐃΔΔΔΔᐃ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ΔⲆΔΔⵠΔⲆ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ⲆⵠΔⲆⵠΔⵠ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ᐃΔⲆⲆᐃⲆⲆ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ΔⵠⲆΔΔⵠⵠ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ⲆⵠⲆᐃⵠⵠΔ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ᐃⲆᐃⵠΔᐃⵠ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ⵠΔⵠⲆΔⵠᐃ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ᐃⵠΔΔⵠⵠᐃ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ⵠⲆⵠⵠᐃⲆΔ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ⲆⲆᐃⲆΔⵠⲆ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ΔⵠᐃΔΔⲆⵠ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ⵠⵠⵠⲆⲆΔΔ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ⵠᐃⲆᐃⵠⲆΔ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ⵠΔⵠᐃᐃΔᐃ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ΔⵠᐃᐃⲆΔⲆ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ᐃⲆΔᐃⵠⵠⵠ, ha, 0, 0, _);
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ᐃΔⵠⲆᐃᐃⵠ, ha, 0, 0, _);
    if (rg.innerWidth < 1300) {
      this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ⲆΔⵠᐃᐃⲆΔ, ia, 200, 100, ba | _);
    } else {
      this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ⲆΔⵠᐃᐃⲆΔ, ia, -753 / 4, 100, ba | da);
    }
    this.ΔⲆⲆᐃ[b++].view = x;
    this.ΔⲆⲆᐃ[b++] = Mf(ᐃᐃ.ᐃΔⵠⲆᐃΔᐃ, ia, 403, -10, aa);
    if (rg.innerWidth > 1300) {
      this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ᐃᐃⲆᐃⲆΔⵠ, ia, -885 / 4, -319 / 2, ca | da);
      this.ΔⲆⲆᐃ[b++].view = x;
    }
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ᐃΔᐃⲆⲆᐃΔ, ha, -1293 / 4, 100, ba | da);
    this.ΔⲆⲆᐃ[b++].view = m;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ⵠΔΔⵠᐃᐃⲆ, ha, -356.25, 100, ba | da);
    this.ΔⲆⲆᐃ[b++].view = C;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ⲆᐃⲆᐃⵠᐃᐃ, ha, -905 / 4, 50, ba | da);
    this.ΔⲆⲆᐃ[b++].view = p;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ᐃⲆⲆⲆⵠΔΔ, ha, -402, 130, ba | da);
    this.ΔⲆⲆᐃ[b++].view = F;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ΔΔⲆⵠᐃⲆⲆ, ha, -1117 / 4, 130, ba | da);
    this.ΔⲆⲆᐃ[b++].view = N;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ⲆᐃΔΔΔⲆⵠ, ha, -305.5, 130, ba | da);
    this.ΔⲆⲆᐃ[b++].view = q;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ΔⵠⵠᐃⲆⵠΔ, ha, -305.5, 100, ba | da);
    this.ΔⲆⲆᐃ[b++].view = O;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ᐃᐃΔΔΔⲆΔ, ha, -ᐃᐃ.ᐃᐃΔΔΔⲆΔ.width / 4 - 350, -15, ba | da);
    this.ΔⲆⲆᐃ[b++].view = H;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ⲆⲆⲆⲆⲆΔᐃ, ha, -1497 / 4, 110, ba | da);
    this.ΔⲆⲆᐃ[b++].view = f;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ⵠⲆⵠⲆⵠⵠⵠ, ha, -1226 / 4, 100, ba | da);
    this.ΔⲆⲆᐃ[b++].view = z;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ΔΔⲆⵠⵠⵠᐃ, ha, -1381 / 4, 80, ba | da);
    this.ΔⲆⲆᐃ[b++].view = P;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ΔᐃΔⲆΔΔΔ, ha, -1542 / 4, 150, ba | da);
    this.ΔⲆⲆᐃ[b++].view = J;
    var ka = 360 / 100;
    var la = this.ⲆⲆΔⲆⲆⵠΔ([["#25c5d6", ka * 3], ["#e2cf27", ka * 10], ["#afac98", ka * 30], ["#d88e23", ka * 57]]);
    this.ΔⲆⲆᐃ[b] = Mf(la, ha, -la.width / 4, 178, ba | da);
    this.ΔⲆⲆᐃ[b++].view = J;
    this.ⵠΔⲆΔⲆΔⲆⲆΔ = function (b, c, d) {
      var e;
      v.ⲆⲆⵠⲆⵠ = 1;
      v.ⲆΔΔᐃⲆΔᐃ = 0;
      v.ᐃᐃᐃⵠᐃΔⵠ = 0;
      v.ⲆΔΔⵠⵠΔΔ = b;
      v.ᐃⵠΔᐃᐃⲆⲆ = c;
      var f = 0;
      if (c === 0) {
        for (f = 0; f < ᐃΔⲆΔ.ΔΔᐃⲆⵠ.length && ᐃΔⲆΔ.ΔΔᐃⲆⵠ[f].id !== d; f++);
        e = ᐃΔⲆΔ.ΔΔᐃⲆⵠ[f];
        v.unlock.ᐃⵠᐃΔ[f] = 1;
      } else if (c === 1) {
        for (f = 0; ᐃΔⲆΔ.ᐃⵠΔⲆΔ.length > f && ᐃΔⲆΔ.ᐃⵠΔⲆΔ[f].id !== d; f++);
        e = ᐃΔⲆΔ.ᐃⵠΔⲆΔ[f];
        v.unlock.ΔΔⲆⲆΔ[f] = 1;
      } else if (c === 2) {
        for (f = 0; f < ᐃΔⲆΔ.ⲆΔⵠΔ.length && d !== ᐃΔⲆΔ.ⲆΔⵠΔ[f].id; f++);
        e = ᐃΔⲆΔ.ⲆΔⵠΔ[f];
        v.unlock.ⲆⵠⲆΔⵠ[f] = 1;
      } else if (c === 3) {
        for (f = 0; ᐃΔⲆΔ.ΔⵠⲆⲆⲆ.length > f && ᐃΔⲆΔ.ΔⵠⲆⲆⲆ[f].id !== d; f++);
        e = ᐃΔⲆΔ.ΔⵠⲆⲆⲆ[f];
        v.unlock.ⵠΔⲆΔⲆ[f] = 1;
      } else if (c === 4) {
        for (f = 0; f < ᐃΔⲆΔ.ⲆⵠⲆᐃⲆ.length && ᐃΔⲆΔ.ⲆⵠⲆᐃⲆ[f].id !== d; f++);
        e = ᐃΔⲆΔ.ⲆⵠⲆᐃⲆ[f];
        v.unlock.ᐃΔᐃⵠᐃ[f] = 1;
        v.unlock.Ⲇⵠᐃᐃⵠ[f] = 1;
      }
      v.ⵠΔΔⵠⲆΔⲆ = f;
      v.ᐃΔⵠⲆⵠΔᐃ = xf("by " + e.Δᐃⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, Ql, Uk, fo, "#000000", 24);
      v.ⲆⲆᐃⲆⵠⲆᐃ = xf(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, undefined, undefined, undefined, un, "#000000", 20);
    };
    this.ⲆⲆⵠⲆⵠ = 0;
    this.ⲆΔΔᐃⲆΔᐃ = 0;
    this.ⲆΔΔⵠⵠΔΔ = 0;
    this.ᐃⵠΔᐃᐃⲆⲆ = 0;
    this.ᐃᐃᐃⵠᐃΔⵠ = 0;
    this.ᐃΔⵠⲆⵠΔᐃ = undefined;
    this.ⲆⲆᐃⲆⵠⲆᐃ = undefined;
    var ma = 197;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ᐃⲆᐃⵠⲆⵠⲆ, ha, -1542 / 4, 150, ba | da);
    this.ΔⲆⲆᐃ[b++].view = D;
    la = this.ⲆⲆΔⲆⲆⵠΔ([["#d45ce5", ka * 3], ["#25c5d6", ka * 10], ["#e2cf27", ka * 30], ["#afac98", ka * 57]]);
    this.ΔⲆⲆᐃ[b] = Mf(la, ha, -la.width / 4, 178, ba | da);
    this.ΔⲆⲆᐃ[b++].view = D;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ΔⵠⲆΔⵠⵠΔ, ha, -1542 / 4, 150, ba | da);
    this.ΔⲆⲆᐃ[b++].view = B;
    la = this.ⲆⲆΔⲆⲆⵠΔ([["#d33a2a", ka * 3], ["#d45ce5", ka * 10], ["#25c5d6", ka * 30], ["#e2cf27", ka * 57]]);
    this.ΔⲆⲆᐃ[b] = Mf(la, ha, -la.width / 4, 178, ba | da);
    this.ΔⲆⲆᐃ[b++].view = B;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ⲆⲆⲆΔⲆⲆⲆ, ha, -1542 / 4, 150, ba | da);
    this.ΔⲆⲆᐃ[b++].view = E;
    la = this.ⲆⲆΔⲆⲆⵠΔ([["#25c5d6", ka * 3], ["#e2cf27", ka * 10], ["#afac98", ka * 30], ["#d88e23", ka * 57]]);
    this.ΔⲆⲆᐃ[b] = Mf(la, ha, -la.width / 4, 178, ba | da);
    this.ΔⲆⲆᐃ[b++].view = E;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ᐃᐃᐃⲆᐃⲆΔ, ha, -1542 / 4, 150, ba | da);
    this.ΔⲆⲆᐃ[b++].view = M;
    la = this.ⲆⲆΔⲆⲆⵠΔ([["#d45ce5", ka * 3], ["#25c5d6", ka * 10], ["#e2cf27", ka * 30], ["#afac98", ka * 57]]);
    this.ΔⲆⲆᐃ[b] = Mf(la, ha, -la.width / 4, 178, ba | da);
    this.ΔⲆⲆᐃ[b++].view = M;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ΔΔⲆᐃⵠΔⵠ, ha, -1542 / 4, 150, ba | da);
    this.ΔⲆⲆᐃ[b++].view = I;
    la = this.ⲆⲆΔⲆⲆⵠΔ([["#d33a2a", ka * 3], ["#d45ce5", ka * 10], ["#25c5d6", ka * 30], ["#e2cf27", ka * 57]]);
    this.ΔⲆⲆᐃ[b] = Mf(la, ha, -la.width / 4, 178, ba | da);
    this.ΔⲆⲆᐃ[b++].view = I;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ⵠᐃᐃⵠⵠⲆΔ, ha, -341.5, 100, ba | da);
    this.ΔⲆⲆᐃ[b++].view = S;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ᐃⵠⲆⵠΔⵠᐃ, ha, -1366 / 4, 100, ba | da);
    this.ΔⲆⲆᐃ[b++].view = j;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ΔᐃΔⲆΔⲆⵠ, ha, -341.5, 100, ba | da);
    this.ΔⲆⲆᐃ[b++].view = T;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ᐃᐃΔΔΔⲆᐃ, ha, -1366 / 4, 100, ba | da);
    this.ΔⲆⲆᐃ[b++].view = R;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ΔΔᐃⵠⲆΔⲆ, ha, -1366 / 4, 100, ba | da);
    this.ΔⲆⲆᐃ[b++].view = Q;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ᐃⲆⵠⲆΔΔΔ, ha, -341.5, 100, ba | da);
    this.ΔⲆⲆᐃ[b++].view = G;
    ΔⲆⵠᐃⲆⵠⲆ = b++;
    this.ΔⲆⲆᐃ[ΔⲆⵠᐃⲆⵠⲆ] = Mf(ᐃᐃ.ΔⲆⵠᐃⲆⵠⲆ, ha, 484, 0, ba);
    ⲆᐃΔⲆⵠⵠΔ = b++;
    this.ΔⲆⲆᐃ[ⲆᐃΔⲆⵠⵠΔ] = Mf(ᐃᐃ.ⲆᐃΔⲆⵠⵠΔ, ha, 812.5, 0, ba);
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ᐃⲆⵠΔᐃⲆⵠ, ha, -189.5, -5, ba | da);
    this.ΔⲆⲆᐃ[b++].view = A;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ΔΔⵠⲆⵠⲆⲆ, ha, -189.5, -5, ba | da);
    this.ΔⲆⲆᐃ[b++].view = k;
    ᐃⵠΔΔⲆⵠⵠ = b++;
    this.ΔⲆⲆᐃ[ᐃⵠΔΔⲆⵠⵠ] = Mf(ᐃᐃ.ᐃΔⲆΔᐃΔⵠ, ia, 93, 30, ba);
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ᐃᐃΔⵠⲆⵠᐃ, ha, -173, 110, ba | da);
    this.ΔⲆⲆᐃ[b++].view = U;
    this.ΔⲆⲆᐃ[b] = Mf(ᐃᐃ.ⵠⵠᐃⵠⵠᐃⵠ, ha, -173, 110, ba | da);
    this.ΔⲆⲆᐃ[b++].view = L;
    b = 0;
    this.buttons = [];
    this.buttons[b] = Bf(50, 57, 0, [ᐃᐃ.ΔᐃⲆΔᐃⲆⲆ, ᐃᐃ.ⵠΔⵠᐃⲆⵠⵠ, ᐃᐃ.ᐃⲆⵠΔⲆΔⲆ], 1, fa, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        V(P);
      } else {
        V(p);
      }
    }, 320, 0, _, ia);
    b++;
    if (rg.innerWidth < 1300) {
      this.buttons[b] = Bf(202, 97, 0, [ᐃᐃ.ⲆΔΔᐃΔⲆⲆ, ᐃᐃ.ΔΔᐃⲆᐃΔᐃ, ᐃᐃ.ΔⲆⵠⵠⲆΔΔ], 1, fa, this.ᐃⲆⵠⲆᐃⲆΔ, 462, 235, ba | _, ia);
    } else {
      this.buttons[b] = Bf(202, 97, 0, [ᐃᐃ.ⲆΔΔᐃΔⲆⲆ, ᐃᐃ.ΔΔᐃⲆᐃΔᐃ, ᐃᐃ.ΔⲆⵠⵠⲆΔΔ], 1, fa, this.ᐃⲆⵠⲆᐃⲆΔ, 74, 235, ba | da, ia);
    }
    this.buttons[b].view = x;
    b++;
    if (rg.innerWidth > 1300) {
      this.buttons[b] = Bf(355, 168, 0, [ᐃᐃ.ⲆⵠⵠᐃΔⵠΔ, ᐃᐃ.ⲆⵠⵠᐃΔⵠΔ, ᐃᐃ.ⲆⵠⵠᐃΔⵠΔ], 1, fa, function () {
        rg.open("./changelog.html", "_blank");
      }, -195, -115, ca | da, ia);
      this.buttons[b++].view = x;
      this.buttons[b] = Bf(355, 168, 0, [ᐃᐃ.ⲆⲆⵠⵠⲆⵠΔ, ᐃᐃ.ⲆⲆⵠⵠⲆⵠΔ, ᐃᐃ.ⲆⲆⵠⵠⲆⵠΔ], 1, fa, function () {
        rg.open("https://taming.io", "_blank");
      }, 20, -115, ca | da, ia);
      this.buttons[b++].view = x;
    }
    this.buttons[b++] = Bf(80, 80, 0, [ᐃᐃ.ᐃΔⵠⲆⲆⵠⵠ, ᐃᐃ.ⵠᐃⲆⵠᐃᐃⵠ, ᐃᐃ.ⵠⲆᐃᐃⲆᐃΔ], 1, fa, function () {
      rg.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, aa, ia);
    this.buttons[b++] = Bf(80, 80, 0, [ᐃᐃ.ⵠΔᐃⲆⵠⲆⵠ, ᐃᐃ.ΔⵠΔⵠᐃΔᐃ, ᐃᐃ.ⵠⵠⲆᐃᐃⵠᐃ], 1, fa, function () {
      rg.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, aa, ia);
    this.buttons[b++] = Bf(80, 80, 0, [ᐃᐃ.ΔΔᐃᐃΔΔⲆ, ᐃᐃ.ⲆⵠⵠⲆⲆΔᐃ, ᐃᐃ.ΔⲆᐃⲆⲆᐃⵠ], 1, fa, function () {
      rg.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, aa, ia);
    this.buttons[b++] = Bf(80, 80, 0, [ᐃᐃ.ᐃⵠⵠΔⲆᐃᐃ, ᐃᐃ.ⲆΔᐃⵠᐃⲆⵠ, ᐃᐃ.ⵠᐃⵠⵠΔΔΔ], 1, fa, function () {
      rg.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, aa, ia);
    this.buttons[b++] = Bf(80, 80, 0, [ᐃᐃ.ⵠⲆⵠΔⵠⵠΔ, ᐃᐃ.ⵠᐃΔΔⵠΔⲆ, ᐃᐃ.ᐃᐃΔⵠΔⲆⵠ], 1, fa, function () {
      rg.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, aa, ia);
    this.buttons[b++] = Bf(80, 80, 0, [ᐃᐃ.ΔⲆⵠⵠⵠᐃᐃ, ᐃᐃ.ⵠⵠⵠΔⲆⲆΔ, ᐃᐃ.ⲆᐃⲆᐃⵠⲆⵠ], 1, fa, function () {
      rg.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, aa, ia);
    this.buttons[b++] = Bf(80, 80, 0, [ᐃᐃ.ⲆᐃⲆᐃΔⲆᐃ, ᐃᐃ.ᐃᐃⲆⲆⵠⵠᐃ, ᐃᐃ.ᐃⵠⵠᐃᐃⲆΔ], 1, fa, function () {
      rg.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, aa, ia);
    ᐃΔᐃᐃΔⵠΔ = b++;
    this.buttons[ᐃΔᐃᐃΔⵠΔ] = Bf(232, 142, 0, [ᐃᐃ.ᐃᐃⲆᐃᐃΔⲆ, ᐃᐃ.ᐃⲆᐃΔⲆⲆⵠ, ᐃᐃ.ΔⵠΔᐃᐃΔⲆ], 1, fa, function () {
      V(z);
      Xx(lx.ᐃⲆΔΔⵠⲆΔ, lx.ⵠⲆⵠᐃΔΔⲆ, lx.ⲆⵠΔᐃᐃⲆⲆ, lx.ᐃⵠⲆΔⲆⵠⲆ);
    }, -5, 573, _, ia);
    this.buttons[b++] = Bf(236, 165, 0, [ᐃᐃ.ΔΔᐃⲆⵠᐃᐃ, ᐃᐃ.ΔΔᐃⲆⵠᐃᐃ, ᐃᐃ.ΔΔᐃⲆⵠᐃᐃ], 1, 1, function () {
      V(z);
    }, -5, 566, _, ia);
    ΔᐃⵠⲆⲆⵠⲆ = b++;
    this.buttons[ΔᐃⵠⲆⲆⵠⲆ] = Bf(236, 165, 0, [ᐃᐃ.ᐃΔⵠᐃⲆΔⵠ, ᐃᐃ.ᐃΔᐃᐃᐃᐃᐃ, ᐃᐃ.ⵠΔΔΔⲆⲆⵠ], 1, fa, function () {
      V(f);
    }, -5, 494, _, ia);
    this.buttons[b++] = Bf(236, 165, 0, [ᐃᐃ.ΔᐃᐃΔⲆΔⵠ, ᐃᐃ.ΔᐃᐃΔⲆΔⵠ, ᐃᐃ.ΔᐃᐃΔⲆΔⵠ], 1, 1, function () {
      V(f);
    }, -5, 494, _, ia);
    ᐃΔᐃᐃⲆΔⵠ = b++;
    this.buttons[ᐃΔᐃᐃⲆΔⵠ] = Bf(236, 165, 0, [ᐃᐃ.ᐃΔⵠᐃⲆΔⵠ, ᐃᐃ.ᐃΔᐃᐃᐃᐃᐃ, ᐃᐃ.ⵠΔΔΔⲆⲆⵠ], 1, fa, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        if (lx.ⵠᐃΔᐃΔⵠⵠ - Date.now() > 0) {
          V(O);
        } else {
          V(N);
        }
      } else {
        V(p);
      }
    }, -5, 415, _, ia);
    this.buttons[b++] = Bf(236, 165, 0, [ᐃᐃ.ⲆᐃΔᐃⲆᐃⵠ, ᐃᐃ.ⲆᐃΔᐃⲆᐃⵠ, ᐃᐃ.ⲆᐃΔᐃⲆᐃⵠ], 1, 1, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        if (lx.ⵠᐃΔᐃΔⵠⵠ - Date.now() > 0) {
          V(O);
        } else {
          V(N);
        }
      } else {
        V(p);
      }
    }, -5, 415, _, ia);
    ΔΔᐃᐃᐃⵠⲆ = b++;
    this.buttons[ΔΔᐃᐃᐃⵠⲆ] = Bf(236, 165, 0, [ᐃᐃ.ᐃΔⵠᐃⲆΔⵠ, ᐃᐃ.ᐃΔᐃᐃᐃᐃᐃ, ᐃᐃ.ⵠΔΔΔⲆⲆⵠ], 1, fa, function () {
      V(F);
    }, -5, 336, _, ia);
    this.buttons[b++] = Bf(236, 165, 0, [ᐃᐃ.ΔΔⲆⲆⵠΔᐃ, ᐃᐃ.ΔΔⲆⲆⵠΔᐃ, ᐃᐃ.ΔΔⲆⲆⵠΔᐃ], 1, 1, function () {
      V(F);
    }, -5, 336, _, ia);
    ⲆᐃΔᐃⲆΔΔ = b++;
    this.buttons[ⲆᐃΔᐃⲆΔΔ] = Bf(236, 165, 0, [ᐃᐃ.ᐃΔⵠᐃⲆΔⵠ, ᐃᐃ.ᐃΔᐃᐃᐃᐃᐃ, ᐃᐃ.ⵠΔΔΔⲆⲆⵠ], 1, fa, function () {
      V(C);
    }, -5, 257, _, ia);
    this.buttons[b++] = Bf(236, 165, 0, [ᐃᐃ.ΔΔΔΔᐃⲆⵠ, ᐃᐃ.ΔΔΔΔᐃⲆⵠ, ᐃᐃ.ΔΔΔΔᐃⲆⵠ], 1, 1, function () {
      V(C);
    }, -5, 257, _, ia);
    ⵠΔⲆΔΔΔΔ = b++;
    this.buttons[ⵠΔⲆΔΔΔΔ] = Bf(236, 165, 0, [ᐃᐃ.ᐃΔⵠᐃⲆΔⵠ, ᐃᐃ.ᐃΔᐃᐃᐃᐃᐃ, ᐃᐃ.ⵠΔΔΔⲆⲆⵠ], 1, fa, function () {
      V(x);
    }, -5, 178, _, ia);
    this.buttons[b++] = Bf(236, 165, 0, [ᐃᐃ.ⲆΔⲆⲆⵠΔΔ, ᐃᐃ.ⲆΔⲆⲆⵠΔΔ, ᐃᐃ.ⲆΔⲆⲆⵠΔΔ], 1, 1, function () {
      V(x);
    }, -5, 178, _, ia);
    ⵠᐃᐃⵠⲆⵠᐃ = b++;
    this.ⵠᐃᐃⵠⲆⵠᐃ = ⵠᐃᐃⵠⲆⵠᐃ;
    this.buttons[ⵠᐃᐃⵠⲆⵠᐃ] = Bf(324, 222, 0, [ᐃᐃ.ⵠⲆⵠⵠⲆⲆⵠ, ᐃᐃ.ⵠᐃᐃⵠⲆΔⵠ, ᐃᐃ.ⵠⵠΔⲆΔⵠⵠ], 1, fa, function () {
      V(p);
    }, 0, 70, _, ia);
    ⲆᐃᐃΔⵠⵠⵠ = b++;
    ΔⵠΔⵠⲆΔⵠ = b++;
    this.ⲆᐃᐃΔⵠⵠⵠ = ⲆᐃᐃΔⵠⵠⵠ;
    this.ΔⵠΔⵠⲆΔⵠ = ΔⵠΔⵠⲆΔⵠ;
    this.buttons[ⲆᐃᐃΔⵠⵠⵠ] = Bf(324, 222, 0, [ᐃᐃ.ΔⲆⵠΔΔⵠⵠ, ᐃᐃ.ΔⵠΔⵠⲆⵠᐃ, ᐃᐃ.ΔⵠⵠⲆⵠⲆⲆ], 1, fa, function () {
      V(m);
      ta(-1);
    }, 0, 70, _, ha);
    this.buttons[ΔⵠΔⵠⲆΔⵠ] = Bf(324, 222, 0, [ᐃᐃ.ⲆΔΔΔᐃⲆᐃ, ᐃᐃ.ⲆΔΔΔᐃⲆᐃ, ᐃᐃ.ⲆΔΔΔᐃⲆᐃ], 1, 1, function () {
      V(m);
      ta(-1);
    }, 0, 70, _, ha);
    if (px.ᐃⲆᐃΔⵠᐃⲆ === 0) {
      var na = b++;
      if (rg.innerWidth < 1300) {
        this.buttons[na] = Bf(266, 176, 0, [ᐃᐃ.ⵠᐃΔⲆⲆᐃⵠ, ᐃᐃ.ᐃⲆᐃⲆᐃⲆΔ, ᐃᐃ.ΔⵠᐃⲆᐃΔⲆ], 1, fa, function () {
          px.ⵠⵠⵠⵠⵠ(0);
        }, 150, 300, _ | ba, ia);
      } else {
        this.buttons[na] = Bf(266, 176, 0, [ᐃᐃ.ⵠᐃΔⲆⲆᐃⵠ, ᐃᐃ.ᐃⲆᐃⲆᐃⲆΔ, ᐃᐃ.ΔⵠᐃⲆᐃΔⲆ], 1, fa, function () {
          px.ⵠⵠⵠⵠⵠ(0);
        }, -340, 100, da | ba, ia);
      }
      this.buttons[na].view = x;
      this.buttons[na].hint = 0;
      var oa = b++;
      if (rg.innerWidth < 1300) {
        this.buttons[oa] = Bf(266, 176, 0, [ᐃᐃ.ⵠᐃᐃΔΔΔⵠ, ᐃᐃ.ⲆᐃⲆⵠΔⲆΔ, ᐃᐃ.ⲆⲆⵠΔⵠⲆⲆ], 1, fa, function () {
          px.ⵠⵠⵠⵠⵠ(4);
        }, 150, 400, _ | ba, ia);
      } else {
        this.buttons[oa] = Bf(266, 176, 0, [ᐃᐃ.ⵠᐃᐃΔΔΔⵠ, ᐃᐃ.ⲆᐃⲆⵠΔⲆΔ, ᐃᐃ.ⲆⲆⵠΔⵠⲆⲆ], 1, fa, function () {
          px.ⵠⵠⵠⵠⵠ(4);
        }, -340, 200, da | ba, ia);
      }
      this.buttons[oa].view = x;
      this.buttons[oa].hint = 0;
      var pa = b++;
      if (rg.innerWidth < 1300) {
        this.buttons[pa] = Bf(266, 176, 0, [ᐃᐃ.ⵠⲆⲆⲆⲆⲆΔ, ᐃᐃ.ⲆΔⵠᐃⵠⲆⵠ, ᐃᐃ.ⵠᐃᐃⲆΔΔᐃ], 1, fa, function () {
          px.ⵠⵠⵠⵠⵠ(6);
        }, 450, 300, _ | ba, ia);
      } else {
        this.buttons[pa] = Bf(266, 176, 0, [ᐃᐃ.ⵠⲆⲆⲆⲆⲆΔ, ᐃᐃ.ⲆΔⵠᐃⵠⲆⵠ, ᐃᐃ.ⵠᐃᐃⲆΔΔᐃ], 1, fa, function () {
          px.ⵠⵠⵠⵠⵠ(6);
        }, -340, 300, da | ba, ia);
      }
      this.buttons[pa].view = x;
      this.buttons[pa].hint = 0;
      var qa = b++;
      if (rg.innerWidth < 1300) {
        this.buttons[qa] = Bf(266, 176, 0, [ᐃᐃ.ⲆⲆᐃΔⲆᐃⵠ, ᐃᐃ.ⲆⵠⲆⲆᐃⲆⵠ, ᐃᐃ.ⲆⵠΔⵠᐃⵠⲆ], 1, fa, function () {
          px.ⵠⵠⵠⵠⵠ(2);
        }, 300, 300, _ | ba, ia);
      } else {
        this.buttons[qa] = Bf(266, 176, 0, [ᐃᐃ.ⲆⲆᐃΔⲆᐃⵠ, ᐃᐃ.ⲆⵠⲆⲆᐃⲆⵠ, ᐃᐃ.ⲆⵠΔⵠᐃⵠⲆ], 1, fa, function () {
          px.ⵠⵠⵠⵠⵠ(2);
        }, 204, 100, da | ba, ia);
      }
      this.buttons[qa].view = x;
      this.buttons[qa].hint = 0;
      var ra = b++;
      if (rg.innerWidth < 1300) {
        this.buttons[ra] = Bf(266, 176, 0, [ᐃᐃ.ᐃᐃᐃᐃⲆΔⲆ, ᐃᐃ.ⲆᐃⲆⲆΔᐃⵠ, ᐃᐃ.ⲆᐃⵠᐃⵠᐃΔ], 1, fa, function () {
          px.ⵠⵠⵠⵠⵠ(3);
        }, 300, 400, _ | ba, ia);
      } else {
        this.buttons[ra] = Bf(266, 176, 0, [ᐃᐃ.ᐃᐃᐃᐃⲆΔⲆ, ᐃᐃ.ⲆᐃⲆⲆΔᐃⵠ, ᐃᐃ.ⲆᐃⵠᐃⵠᐃΔ], 1, fa, function () {
          px.ⵠⵠⵠⵠⵠ(3);
        }, 204, 200, da | ba, ia);
      }
      this.buttons[ra].view = x;
      this.buttons[ra].hint = 0;
      var sa = b++;
      this.buttons[sa] = Bf(266, 176, 0, [ᐃᐃ.ᐃⵠⲆⲆⵠΔᐃ, ᐃᐃ.ᐃⵠΔΔⲆⵠΔ, ᐃᐃ.ᐃᐃⵠΔⵠᐃΔ], 1, fa, function () {
        px.ⵠⵠⵠⵠⵠ(7);
      }, rg.innerWidth < 1300 ? 450 : 204, rg.innerWidth < 1300 ? 400 : 300, (rg.innerWidth < 1300 ? _ : da) | ba, ia);
      this.buttons[sa].view = x;
      this.buttons[sa].hint = 0;
    }
    function ta(b, c) {
      if (c !== al) {
        lx.ⲆⵠⲆᐃᐃⵠⲆ = c;
        var d = lx.ⲆᐃⲆΔΔⵠΔ[c];
        lx.ΔⲆᐃⲆⵠ = d.score;
        lx.ⲆΔⵠΔⵠ = d.kill;
        lx.ᐃⲆΔΔᐃᐃⵠ = d.death;
        lx.time = d.time;
        lx.ⲆᐃΔⵠⲆᐃⵠ = d.bestScore;
        lx.ΔΔⵠΔⵠⲆΔ = d.bestKill;
        lx.ΔⵠΔⲆⲆΔⵠ = d.bestTime;
        lx.ΔⲆⲆΔⲆΔΔ = d.scoreTotal;
      }
      if (w === b) {
        b = lx.ᐃΔⲆⲆⲆⵠΔ;
      }
      lx.ᐃΔⲆⲆⲆⵠΔ = b;
      if (b >= 0) {
        document.getElementById("stats_box_time").innerHTML = lx.ΔⵠΔⲆⲆΔⵠ[b];
        document.getElementById("stats_box_kill").innerHTML = lx.ΔΔⵠΔⵠⲆΔ[b];
        document.getElementById("stats_box_score").innerHTML = lx.ⲆᐃΔⵠⲆᐃⵠ[b];
      } else {
        var f = 0;
        for (var g = 0; g < lx.ⲆΔⵠΔⵠ.length; g++) {
          f += lx.ⲆΔⵠΔⵠ[g];
        }
        var h = 0;
        for (g = 0; lx.time.length > g; g++) {
          h += lx.time[g];
        }
        document.getElementById("stats_box_time").innerHTML = h;
        document.getElementById("stats_box_kill").innerHTML = f;
        document.getElementById("stats_box_score").innerHTML = lx.ΔⲆᐃⲆⵠ;
      }
    }
    this.buttons[b] = Bf(87, 78, 0, [ᐃᐃ.ΔᐃⵠΔᐃΔᐃ, ᐃᐃ.ᐃⵠᐃΔᐃΔΔ, ᐃᐃ.ⲆᐃⵠᐃᐃⲆⵠ], 1, fa, function () {
      lx.ᐃᐃΔⲆⵠⲆⲆᐃⲆ();
      if (lx.ᐃⲆⲆΔⲆᐃⵠ === 0) {
        V(L);
      } else {
        V(U);
      }
    }, 127, 110, da | ba, ha);
    this.buttons[b++].view = m;
    this.buttons[b] = Bf(87, 78, 0, [ᐃᐃ.ᐃΔⲆⲆⲆⲆᐃ, ᐃᐃ.ΔⲆⵠᐃᐃΔᐃ, ᐃᐃ.ᐃⲆⵠⲆᐃⲆⵠ], 1, fa, function () {
      const a = rg.document.createElement("textarea");
      a.value = Jx;
      rg.document.body.appendChild(a);
      a.select();
      rg.document.execCommand("copy");
      rg.document.body.removeChild(a);
    }, 182, 110, da | ba, ha);
    this.buttons[b++].view = m;
    this.buttons[b] = Bf(87, 78, 0, [ᐃᐃ.ⲆΔΔⲆⲆᐃᐃ, ᐃᐃ.ΔⲆⵠⲆᐃΔⲆ, ᐃᐃ.ⲆᐃⲆΔⵠⲆⲆ], 1, fa, function () {
      if (Fx === Hx && rg.FB && rg.FB.getUserID()) {
        rg.FB.logout();
      }
      if (Hx === Ex && Ox !== undefined) {
        rg.gapi.auth2.getAuthInstance().signOut();
        Ox = undefined;
      }
      Jx = undefined;
      Ix = Bj;
      Hx = jt;
      lx.ⲆⵠⲆⵠᐃ = 0;
      lx.ΔⵠⲆⵠⵠ = 0;
      lx.ΔⲆᐃⲆⵠ = 0;
      lx.ⲆΔᐃⲆⲆⲆᐃ();
      ᐃⲆⲆⵠⵠΔⵠᐃⵠ();
    }, 255, 110, da | ba, ha);
    this.buttons[b++].view = m;
    this.buttons[b] = Bf(58, 64, 0, [ᐃᐃ.ⲆⲆⲆⵠᐃⲆᐃ, ᐃᐃ.ᐃⲆⵠⵠᐃⲆΔ, ᐃᐃ.ᐃᐃⲆᐃⲆΔΔ], 1, fa, function () {
      V(x);
    }, 189, 118, da | ba, ha);
    this.buttons[b++].view = p;
    this.buttons[b] = Bf(497, 72, 0, [ᐃᐃ.ⵠΔⵠⵠⲆΔᐃ, ᐃᐃ.ΔΔΔⵠΔⵠᐃ, ᐃᐃ.ΔⵠΔⵠⵠⵠⵠ], 1, fa, function () {
      (function () {
        if (Sf) {
          Ix = ⵠᐃⵠ.ᐃⵠᐃΔⲆⲆⲆ(40);
          Hx = Gx;
          Jx = Sf.userId;
          rg.ⵠⲆⲆΔⲆᐃⵠ();
          return;
        }
        rg.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, da | ba, ha);
    this.buttons[b++].view = p;
    this.buttons[b] = Bf(497, 72, 0, [ᐃᐃ.ᐃΔⵠΔⲆⲆᐃ, ᐃᐃ.ΔⵠᐃⲆⲆΔⲆ, ᐃᐃ.ⵠⲆⲆΔᐃⲆⲆ], 1, fa, function () {
      rg.FB.login(function (a) {
        if (a.authResponse) {
          rg.FB.api("/me", function (a) {
            Hx = Fx;
            Ix = rg.FB.getAuthResponse().accessToken;
            Zx();
            rg.ⵠⲆⲆΔⲆᐃⵠ();
          });
        }
      });
    }, -130, 430, da | ba, ha);
    this.buttons[b++].view = p;
    ᐃⲆⵠⵠΔᐃⲆ = 20000;
    this.ᐃⵠᐃⵠΔⵠΔ = function (a) {
      var b = lx.ᐃᐃⲆⵠᐃᐃⲆ(a);
      var c = ᐃⲆⵠⵠΔᐃⲆ * (b * b);
      return (a -= c) / ((b + 1) * (b + 1) * ᐃⲆⵠⵠΔᐃⲆ - c);
    };
    this.ᐃᐃⲆⵠᐃᐃⲆ = function (a) {
      return Math.floor(Math.sqrt(a / ᐃⲆⵠⵠΔᐃⲆ));
    };
    this.ᐃⵠᐃᐃⵠΔⲆΔⲆ = function (a) {
      lx.ⵠⲆⵠᐃΔ = lx.ᐃᐃⲆⵠᐃᐃⲆ(a);
      lx.ⲆⵠⵠΔⲆⲆⲆ = lx.ᐃⵠᐃⵠΔⵠΔ(a);
      lx.ΔΔΔΔᐃⵠⵠ = 0;
      lx.ΔⲆᐃⲆⵠ = a;
    };
    this.ᐃⲆⵠᐃΔⲆΔᐃⵠ = function (a) {
      lx.buttons[lx.ⵠᐃᐃⵠⲆⵠᐃ].info.active = 0;
      lx.buttons[lx.ⲆᐃᐃΔⵠⵠⵠ].info.active = 1;
      lx.buttons[lx.ΔⵠΔⵠⲆΔⵠ].info.active = 1;
      n();
      if (a.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = rg.decodeURIComponent(rg.escape(rg.atob(a.name)));
      } else {
        document.getElementById("account_nickname_input").value = a.name;
      }
      lx.ΔⵠⲆⵠⵠ = a.bread;
      var b = a.seasons;
      var c = b[b.length - 1];
      lx.ⲆᐃⲆΔΔⵠΔ = b;
      v.ᐃⵠᐃᐃⵠΔⲆΔⲆ(c.score);
      lx.ΔⲆᐃⲆⵠ = c.score;
      lx.ⲆΔⵠΔⵠ = c.kill;
      lx.ᐃⲆΔΔᐃᐃⵠ = c.death;
      lx.time = c.time;
      lx.ⲆᐃΔⵠⲆᐃⵠ = c.bestScore;
      lx.ΔΔⵠΔⵠⲆΔ = c.bestKill;
      lx.ΔⵠΔⲆⲆΔⵠ = c.bestTime;
      lx.ΔⲆⲆΔⲆΔΔ = c.scoreTotal;
      lx.ᐃⲆⲆΔⲆᐃⵠ = a.firstName;
      document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
      if (lx.ᐃⲆⲆΔⲆᐃⵠ === undefined) {
        lx.ᐃⲆⲆΔⲆᐃⵠ = 0;
      }
      lx.ⵠᐃΔᐃΔⵠⵠ = Date.now() + a.privateServerTime;
      if (Number(a.privateServerTime) > 0) {
        lx.ⵠᐃΔᐃΔⵠⵠ = Date.now() + Number(a.privateServerTime);
      }
      lx.ⲆⵠⲆⵠᐃ = Date.now() + a.kit;
      if (Number(a.kit) > 0) {
        lx.ⲆⵠⲆⵠᐃ = Date.now() + Number(a.kit);
      }
      var d = ᐃΔⲆΔ.ΔΔᐃⲆⵠ;
      for (var e = 0; e < a.skins.length; e++) {
        var f = a.skins[e];
        if (f > 0) {
          for (var i = 0; i < d.length; i++) {
            if (d[i].id === e) {
              v.unlock.ᐃⵠᐃΔ[i] = 1;
            }
          }
        }
      }
      d = ᐃΔⲆΔ.ᐃⵠΔⲆΔ;
      e = 0;
      for (; a.accessories.length > e; e++) {
        if ((f = a.accessories[e]) > 0) {
          for (i = 0; d.length > i; i++) {
            if (e === d[i].id) {
              v.unlock.ΔΔⲆⲆΔ[i] = 1;
            }
          }
        }
      }
      d = ᐃΔⲆΔ.ΔⵠⲆⲆⲆ;
      e = 0;
      for (; a.books.length > e; e++) {
        if ((f = a.books[e]) > 0) {
          for (i = 0; d.length > i; i++) {
            if (e === d[i].id) {
              v.unlock.ⵠΔⲆΔⲆ[i] = 1;
            }
          }
        }
      }
      d = ᐃΔⲆΔ.ⲆΔⵠΔ;
      e = 0;
      for (; e < a.bags.length; e++) {
        if ((f = a.bags[e]) > 0) {
          for (i = 0; i < d.length; i++) {
            if (d[i].id === e) {
              v.unlock.ⲆⵠⲆΔⵠ[i] = 1;
            }
          }
        }
      }
      d = ᐃΔⲆΔ.ⲆⵠⲆᐃⲆ;
      e = 0;
      for (; e < a.crates.length; e++) {
        if ((f = a.crates[e]) > 0) {
          for (i = 0; d.length > i; i++) {
            if (d[i].id === e) {
              v.unlock.ᐃΔᐃⵠᐃ[i] = 1;
              v.unlock.Ⲇⵠᐃᐃⵠ[i] = 1;
            }
          }
        }
      }
    };
    this.ⵠⲆⲆⵠᐃⵠⵠᐃᐃ = function () {
      rg.ⵠⲆⲆΔⲆᐃⵠ = function () {
        V(x);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Cx + "login?token=" + Ix + "&type=" + Hx + (Sf ? "&userId=" + Sf.userId + "&userInfo=" + Sf.userInfo : ""));
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(v.ᐃⲆⵠᐃΔⲆΔᐃⵠ);
      };
      if (Kx === 1) {
        rg.ⵠⲆⲆΔⲆᐃⵠ();
      }
    };
    rg.ᐃⲆⲆⵠⵠΔⵠᐃⵠ = function () {
      lx.buttons[lx.ⵠᐃᐃⵠⲆⵠᐃ].info.active = 1;
      lx.buttons[lx.ⲆᐃᐃΔⵠⵠⵠ].info.active = 0;
      lx.buttons[lx.ΔⵠΔⵠⲆΔⵠ].info.active = 0;
      V(x);
    };
    this.ⲆⵠⲆⲆⵠ = function () {
      return lx.buttons[lx.ⲆᐃᐃΔⵠⵠⵠ].info.active;
    };
    this.buttons[b] = Bf(461, 105, 0, [ᐃᐃ.ⲆⵠᐃⲆᐃΔᐃ, ᐃᐃ.ⲆⲆⲆⵠⲆΔⲆ, ᐃᐃ.ᐃⵠΔΔⲆⲆⲆ], 1, fa, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        V(P);
      } else {
        V(p);
      }
    }, -100, 80, da | ba, ha);
    this.buttons[b++].view = F;
    this.buttons[b] = Bf(157, 158, 0, [ᐃᐃ.ⲆΔⲆⲆᐃΔⲆ, ᐃᐃ.ⲆⵠⲆΔⲆⵠⵠ, ᐃᐃ.ᐃⲆᐃΔⵠᐃᐃ], 1, fa, function () {
      rg.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, da | ba, ha);
    this.buttons[b++].view = f;
    this.buttons[b] = Bf(66, 73, 0, [ᐃᐃ.Ⲇⵠᐃᐃⵠᐃⵠ, ᐃᐃ.ᐃⵠᐃΔⵠΔⲆ, ᐃᐃ.ⲆΔᐃᐃⲆᐃΔ], 1, fa, undefined, -68, 340, da | ba, ha);
    this.buttons[b++].view = f;
    this.buttons[b] = Bf(66, 73, 0, [ᐃᐃ.ⵠⲆΔᐃⲆᐃΔ, ᐃᐃ.ⲆᐃⵠΔΔΔΔ, ᐃᐃ.ᐃΔⲆⲆⲆΔⵠ], 1, fa, _h, -30, 340, da | ba, ha);
    this.buttons[b++].view = f;
    this.ⵠᐃⲆⲆⵠᐃΔᐃΔ = b;
    this.buttons[b] = Bf(97, 66, 0, [ᐃᐃ.ⵠᐃⵠΔᐃᐃΔ, ᐃᐃ.ⵠⵠⵠᐃⵠⵠⲆ, ᐃᐃ.ᐃⵠΔᐃᐃΔᐃ], 1, fa, function () {
      Xx(undefined, undefined, lx.ⲆⵠΔᐃᐃⲆⲆ);
    }, -14, 151, da | ba, ha);
    this.buttons[b++].view = z;
    this.ΔᐃΔⵠΔᐃⲆ = b;
    this.buttons[b] = Bf(135, 66, 0, [ᐃᐃ.ᐃⵠⵠᐃⲆⲆⵠ, ᐃᐃ.ΔⵠᐃⵠⵠⲆⲆ, ᐃᐃ.ΔΔⵠΔΔᐃⵠ], 1, fa, function () {
      Xx(Il, undefined, lx.ΔᐃΔⵠΔᐃⲆ);
    }, 37.5, 151, da | ba, ha);
    this.buttons[b++].view = z;
    this.ⵠΔⵠⲆΔΔΔ = b;
    this.buttons[b] = Bf(160, 66, 0, [ᐃᐃ.ΔᐃΔᐃΔΔΔ, ᐃᐃ.ⲆⲆᐃⲆΔᐃᐃ, ᐃᐃ.ⵠⵠⵠᐃᐃⵠⲆ], 1, fa, function () {
      Xx(Mg, Xs, lx.ⵠΔⵠⲆΔΔΔ);
    }, 107.5, 151, da | ba, ha);
    this.buttons[b++].view = z;
    this.ⲆⵠΔᐃᐃⲆⲆ = b;
    this.buttons[b] = Bf(207, 66, 0, [ᐃᐃ.ᐃⲆⲆΔᐃⵠⲆ, ᐃᐃ.ⵠΔⵠᐃⵠⲆⲆ, ᐃᐃ.ΔⵠΔᐃᐃᐃⵠ], 1, fa, function () {
      Xx(Bj, undefined, lx.ⲆⵠΔᐃᐃⲆⲆ);
    }, 190.5, 151, da | ba, ha);
    this.buttons[b++].view = z;
    this.ᐃⲆΔⲆΔⲆⵠ = b;
    this.buttons[b] = Bf(144, 66, 0, [ᐃᐃ.ΔΔⵠⲆⵠⵠᐃ, ᐃᐃ.ΔΔᐃᐃⵠΔⲆ, ᐃᐃ.ΔⲆᐃΔⵠᐃⲆ], 1, fa, function () {
      Xx(lx.ᐃⲆΔⲆΔⲆⵠ);
    }, 103.5, 110, da | ba, ha);
    this.buttons[b++].view = z;
    this.ΔⲆⵠΔᐃⲆΔ = b;
    this.buttons[b] = Bf(124, 66, 0, [ᐃᐃ.ⲆΔⵠⲆⵠⲆᐃ, ᐃᐃ.ⵠⲆⲆΔᐃΔⲆ, ᐃᐃ.ⲆⵠᐃΔⲆᐃⵠ], 1, fa, function () {
      Xx(lx.ΔⲆⵠΔᐃⲆΔ);
    }, 177.5, 110, da | ba, ha);
    this.buttons[b++].view = z;
    this.ᐃⲆΔΔⵠⲆΔ = b;
    this.buttons[b] = Bf(104, 66, 0, [ᐃᐃ.ⲆⵠΔⲆᐃᐃᐃ, ᐃᐃ.ᐃᐃᐃᐃⵠⲆⲆ, ᐃᐃ.ⵠⲆᐃᐃⲆⲆⵠ], 1, fa, function () {
      Xx(lx.ᐃⲆΔΔⵠⲆΔ);
    }, 242, 110, da | ba, ha);
    this.buttons[b++].view = z;
    this.ᐃⵠⲆⲆΔⲆᐃ = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ⵠᐃᐃᐃⵠⲆΔ, ᐃᐃ.ⵠⵠⵠⵠΔᐃⵠ, ᐃᐃ.ΔΔⵠⲆⲆⲆᐃ], 1, fa, function () {
      Xx(undefined, vs, Mg, lx.ᐃⵠⲆⲆΔⲆᐃ);
    }, -185, 528, da | ba, ha);
    this.buttons[b++].view = z;
    this.ᐃΔⵠΔⵠⲆⲆ = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ⵠⵠⲆΔᐃⲆᐃ, ᐃᐃ.ⲆⲆⲆΔⲆΔⲆ, ᐃᐃ.ⵠⲆⵠΔᐃⲆⲆ], 1, fa, function () {
      Xx(al, undefined, undefined, lx.ᐃΔⵠΔⵠⲆⲆ);
    }, -149, 528, da | ba, ha);
    this.buttons[b++].view = z;
    this.ⵠⲆᐃⲆᐃΔΔ = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ΔΔᐃⲆΔΔᐃ, ᐃᐃ.ΔᐃᐃᐃᐃᐃΔ, ᐃᐃ.ΔᐃⵠᐃⲆΔⲆ], 1, fa, function () {
      Xx(undefined, undefined, vs, lx.ⵠⲆᐃⲆᐃΔΔ);
    }, -113, 528, da | ba, ha);
    this.buttons[b++].view = z;
    this.ᐃⵠⲆΔⵠⲆⵠ = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ᐃΔᐃΔᐃⵠᐃ, ᐃᐃ.ᐃΔⲆⲆᐃΔΔ, ᐃᐃ.ΔⵠⵠⵠⲆΔⲆ], 1, fa, function () {
      Xx(undefined, w, undefined, lx.ᐃⵠⲆΔⵠⲆⵠ);
    }, -77, 528, da | ba, ha);
    this.buttons[b++].view = z;
    this.ⵠΔΔᐃⵠΔⲆ = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ⲆⵠᐃΔⵠᐃⵠ, ᐃᐃ.ᐃⲆΔⲆᐃᐃⲆ, ᐃᐃ.ⲆⵠᐃⲆᐃⵠⲆ], 1, fa, function () {
      Xx(Ql, jt, vs, lx.ⵠΔΔᐃⵠΔⲆ);
    }, -41, 528, da | ba, ha);
    this.buttons[b++].view = z;
    this.ᐃⵠⲆΔⲆⵠⲆ = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ⲆᐃΔⲆⲆⲆΔ, ᐃᐃ.ᐃΔᐃᐃⲆⵠⵠ, ᐃᐃ.ᐃΔΔⲆⵠᐃⵠ], 1, fa, function () {
      Xx(un, undefined, undefined, lx.ᐃⵠⲆΔⲆⵠⲆ);
    }, -5, 528, da | ba, ha);
    this.buttons[b++].view = z;
    this.buttons[b] = Bf(232, 352, 0, [ᐃᐃ.ⲆⵠΔⲆΔΔⵠ, ᐃᐃ.ΔⵠⵠᐃΔΔⵠ, ᐃᐃ.ⲆⲆⵠΔᐃⲆᐃ], 1, fa, function () {
      Yx(300);
    }, -330, 135, da | ba, ha);
    this.buttons[b++].view = P;
    this.buttons[b] = Bf(232, 352, 0, [ᐃᐃ.ᐃΔᐃⵠⲆⵠᐃ, ᐃᐃ.ⲆⲆᐃᐃΔᐃⵠ, ᐃᐃ.ΔΔⲆⵠᐃᐃⵠ], 1, fa, function () {
      Yx(600);
    }, -195, 135, da | ba, ha);
    this.buttons[b++].view = P;
    this.buttons[b] = Bf(243, 374, 0, [ᐃᐃ.ᐃⲆΔⲆᐃⲆᐃ, ᐃᐃ.ⵠᐃⲆΔⵠᐃᐃ, ᐃᐃ.ⵠΔⵠⲆⵠΔΔ], 1, fa, function () {
      Yx(2600);
    }, -60, 130, da | ba, ha);
    this.buttons[b++].view = P;
    this.buttons[b] = Bf(232, 352, 0, [ᐃᐃ.ΔⵠⲆⵠⲆᐃⲆ, ᐃᐃ.ᐃⲆⵠⲆΔⲆⵠ, ᐃᐃ.ᐃⲆⵠⵠⵠΔⲆ], 1, fa, function () {
      Yx(7000);
    }, 78, 135, da | ba, ha);
    this.buttons[b++].view = P;
    this.buttons[b] = Bf(243, 374, 0, [ᐃᐃ.ⵠⲆⲆΔⲆⲆᐃ, ᐃᐃ.ⵠⵠⲆⲆⲆΔⲆ, ᐃᐃ.ᐃⵠⵠⲆΔΔⲆ], 1, fa, function () {
      Yx(20000);
    }, 213, 130, da | ba, ha);
    this.buttons[b++].view = P;
    this.buttons[b] = Bf(58, 64, 0, [ᐃᐃ.ⲆⲆⲆⵠᐃⲆᐃ, ᐃᐃ.ᐃⲆⵠⵠᐃⲆΔ, ᐃᐃ.ᐃᐃⲆᐃⲆΔΔ], 1, fa, function () {
      V(F);
    }, 300, 88, da | ba, ha);
    this.buttons[b++].view = P;
    this.buttons[b] = Bf(323, 112, 0, [ᐃᐃ.ⲆᐃⲆᐃᐃⲆΔ, ᐃᐃ.ⲆΔᐃⲆΔⲆⲆ, ᐃᐃ.ⵠⵠΔⵠᐃⵠΔ], 1, fa, function () {
      V(S);
      Fa.ᐃᐃⲆⲆⲆ();
    }, -315, 185, da | ba, ha);
    this.buttons[b++].view = C;
    this.buttons[b] = Bf(323, 112, 0, [ᐃᐃ.ⲆΔⲆⵠⲆⲆᐃ, ᐃᐃ.ᐃⵠⵠⲆᐃΔⲆ, ᐃᐃ.ΔⵠⵠᐃΔΔΔ], 1, fa, function () {
      V(j);
      Ka.ᐃᐃⲆⲆⲆ();
    }, -315, 321, da | ba, ha);
    this.buttons[b++].view = C;
    this.buttons[b] = Bf(323, 112, 0, [ᐃᐃ.ⲆⲆⵠⲆᐃᐃᐃ, ᐃᐃ.ΔⵠΔΔΔᐃᐃ, ᐃᐃ.ᐃⵠⵠΔⵠⲆΔ], 1, fa, function () {
      V(T);
      Ga.ᐃᐃⲆⲆⲆ();
    }, 153, 185, da | ba, ha);
    this.buttons[b++].view = C;
    this.buttons[b] = Bf(323, 112, 0, [ᐃᐃ.ᐃⵠⵠⲆᐃⲆⵠ, ᐃᐃ.ⲆⵠᐃΔⵠΔΔ, ᐃᐃ.ⵠⵠⵠⲆΔΔⵠ], 1, fa, function () {
      V(R);
      Ha.ᐃᐃⲆⲆⲆ();
    }, 153, 321, da | ba, ha);
    this.buttons[b++].view = C;
    this.buttons[b] = Bf(323, 112, 0, [ᐃᐃ.ⲆᐃⲆⲆⲆⵠΔ, ᐃᐃ.ΔⲆᐃⲆⵠᐃⵠ, ᐃᐃ.ΔⲆⲆᐃΔⲆⵠ], 1, fa, function () {
      V(Q);
      Ia.ᐃᐃⲆⲆⲆ();
    }, 153, 463, da | ba, ha);
    this.buttons[b++].view = C;
    this.buttons[b] = Bf(323, 112, 0, [ᐃᐃ.ᐃᐃⵠΔⵠⲆⵠ, ᐃᐃ.ⵠΔᐃᐃΔΔᐃ, ᐃᐃ.ⵠΔⵠⲆⲆᐃⵠ], 1, fa, function () {
      V(G);
      Ja.ᐃᐃⲆⲆⲆ();
    }, -315, 463, da | ba, ha);
    this.buttons[b++].view = C;
    this.buttons[b] = Bf(327, 117, 0, [ᐃᐃ.ⵠᐃᐃⲆⵠⲆΔ, ᐃᐃ.ⲆⲆⵠⲆΔⵠᐃ, ᐃᐃ.ᐃᐃᐃⲆᐃᐃΔ], 1, fa, function () {
      V(H);
    }, 155, 70, _, ia);
    this.buttons[b++].view = x;
    this.buttons[b] = Bf(130, 129, 0, [ᐃᐃ.ᐃΔⲆΔⲆᐃᐃ, ᐃᐃ.ΔⵠΔᐃΔᐃⵠ, ᐃᐃ.ΔⵠⵠΔⲆΔΔ], 1, fa, function () {
      W(k, ha, "none");
      V(F);
    }, 10, 40, da | ba, ha);
    this.buttons[b++].view = k;
    this.buttons[b] = Bf(130, 129, 0, [ᐃᐃ.ᐃΔⲆΔⲆᐃᐃ, ᐃᐃ.ΔⵠΔᐃΔᐃⵠ, ᐃᐃ.ΔⵠⵠΔⲆΔΔ], 1, fa, function () {
      W(A, ha, "none");
      V(F);
    }, 10, 40, da | ba, ha);
    this.buttons[b++].view = A;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(F);
    }, 200, 140, da | ba, ha);
    this.buttons[b++].view = N;
    this.buttons[b] = Bf(524, 110, 0, [ᐃᐃ.ⵠᐃⲆⲆᐃⵠⲆ, ᐃᐃ.ΔⵠᐃⲆΔⲆΔ, ᐃᐃ.ⵠⵠⲆⲆⵠΔᐃ], 1, fa, function () {
      Ux("Atlanta");
    }, -265, 300, da | ba, ha);
    this.buttons[b++].view = N;
    this.buttons[b] = Bf(523, 110, 0, [ᐃᐃ.ⵠᐃΔⲆΔᐃΔ, ᐃᐃ.ΔⲆΔⵠᐃΔⵠ, ᐃᐃ.ᐃᐃᐃΔΔⵠᐃ], 1, fa, function () {
      Ux("LosAngeles");
    }, 5, 300, da | ba, ha);
    this.buttons[b++].view = N;
    this.buttons[b] = Bf(344, 110, 0, [ᐃᐃ.ΔᐃᐃΔᐃΔⲆ, ᐃᐃ.ΔⲆΔⲆⲆⵠΔ, ᐃᐃ.ⲆⲆⲆⲆᐃⵠΔ], 1, fa, function () {
      Ux("Frankfurt");
    }, -265, 365, da | ba, ha);
    this.buttons[b++].view = N;
    this.buttons[b] = Bf(344, 110, 0, [ᐃᐃ.ΔΔⲆᐃΔⵠΔ, ᐃᐃ.ᐃΔⵠⲆⲆⲆΔ, ᐃᐃ.ⵠⲆⵠΔΔⲆΔ], 1, fa, function () {
      Ux("Osaka");
    }, 100, 365, da | ba, ha);
    this.buttons[b++].view = N;
    this.buttons[b] = Bf(344, 110, 0, [ᐃᐃ.ⲆⲆⲆΔΔΔᐃ, ᐃᐃ.ⵠΔⲆⵠᐃⵠⵠ, ᐃᐃ.ⵠⵠⲆᐃᐃᐃⵠ], 1, fa, function () {
      Ux("Sydney");
    }, -86, 365, da | ba, ha);
    this.buttons[b++].view = N;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(N);
    }, 224, 140, da | ba, ha);
    this.buttons[b++].view = q;
    this.buttons[b] = Bf(230, 352, 0, [ᐃᐃ.ᐃᐃᐃⵠΔΔΔ, ᐃᐃ.ᐃᐃᐃᐃⵠΔⵠ, ᐃᐃ.ᐃᐃⵠΔΔᐃⲆ], 1, fa, function () {
      Yx(350);
    }, -280, 240, da | ba, ha);
    this.buttons[b++].view = q;
    this.buttons[b] = Bf(230, 352, 0, [ᐃᐃ.ⵠᐃᐃⲆⵠᐃⲆ, ᐃᐃ.ᐃⵠᐃⲆᐃΔⵠ, ᐃᐃ.ⲆⲆᐃΔΔᐃⵠ], 1, fa, function () {
      Yx(700);
    }, -130, 240, da | ba, ha);
    this.buttons[b++].view = q;
    this.buttons[b] = Bf(230, 352, 0, [ᐃᐃ.ᐃᐃΔΔⵠᐃΔ, ᐃᐃ.ᐃᐃⵠⵠⵠⵠⲆ, ᐃᐃ.ᐃᐃᐃᐃΔⵠΔ], 1, fa, function () {
      Yx(1400);
    }, 20, 240, da | ba, ha);
    this.buttons[b++].view = q;
    this.buttons[b] = Bf(230, 352, 0, [ᐃᐃ.ⲆⲆΔᐃⲆⲆⵠ, ᐃᐃ.ⲆⵠⲆᐃⲆⵠⲆ, ᐃᐃ.ⲆᐃⲆΔⵠⵠⲆ], 1, fa, function () {
      Yx(3000);
    }, 170, 240, da | ba, ha);
    this.buttons[b++].view = q;
    this.buttons[b] = Bf(105, 119, 0, [ᐃᐃ.ⵠⵠⲆΔⲆⲆᐃ, ᐃᐃ.ᐃΔⵠⵠΔⵠⲆ, ᐃᐃ.ᐃⲆᐃᐃᐃᐃⲆ], 1, fa, function () {
      const a = document.getElementById("serverAddressInput").value.split(" : ");
      const b = rg.document.createElement("textarea");
      b.value = Rf + "?server=" + a[1] + "&region=" + a[0];
      rg.document.body.appendChild(b);
      b.select();
      rg.document.execCommand("copy");
      rg.document.body.removeChild(b);
    }, 105, 310, da | ba, ha);
    this.buttons[b++].view = O;
    this.buttons[b] = Bf(105, 119, 0, [ᐃᐃ.ᐃⵠⲆᐃΔᐃⵠ, ᐃᐃ.ⵠⵠⵠⵠⲆᐃΔ, ᐃᐃ.ΔⲆⵠⵠᐃΔⵠ], 1, fa, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Cx + "rebootServer?token=" + Ix + "&userid=" + Jx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = Rf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 235, 310, da | ba, ha);
    this.buttons[b++].view = O;
    this.buttons[b] = Bf(105, 119, 0, [ᐃᐃ.ⲆⲆᐃⲆⲆᐃᐃ, ᐃᐃ.ΔᐃᐃΔΔᐃⲆ, ᐃᐃ.ΔⵠΔⵠΔΔΔ], 1, fa, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Cx + "restartServer?token=" + Ix + "&userid=" + Jx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = Rf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 170, 310, da | ba, ha);
    this.buttons[b++].view = O;
    this.buttons[b] = Bf(204, 115, 0, [ᐃᐃ.ⲆⵠⵠΔⲆⵠΔ, ᐃᐃ.ⵠΔΔᐃⵠⲆΔ, ᐃᐃ.ⵠᐃⲆΔⵠⵠⲆ], 1, fa, function () {
      rg.open("./commands.html", "_blank");
    }, -265, 490, da | ba, ha);
    this.buttons[b++].view = O;
    this.buttons[b] = Bf(145, 69, 0, [ᐃᐃ.ⲆᐃⲆⵠΔⲆⵠ, ᐃᐃ.ΔᐃΔⵠΔⵠᐃ, ᐃᐃ.ΔⲆΔΔⵠⵠⵠ], 1, fa, function () {
      V(J);
    }, -210, 170, da | ba, ha);
    this.buttons[b++].view = F;
    this.buttons[b] = Bf(145, 69, 0, [ᐃᐃ.ⵠⵠⵠᐃⵠⵠⵠ, ᐃᐃ.ⲆⲆᐃⲆᐃΔⵠ, ᐃᐃ.ⵠⵠᐃΔⲆᐃᐃ], 1, fa, function () {
      V(E);
    }, 70, 170, da | ba, ha);
    this.buttons[b++].view = F;
    this.buttons[b] = Bf(145, 69, 0, [ᐃᐃ.ᐃⲆⲆᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃⵠΔᐃⵠ, ᐃᐃ.ⵠΔΔⵠᐃᐃⵠ], 1, fa, function () {
      V(M);
    }, 70, 204, da | ba, ha);
    this.buttons[b++].view = F;
    this.buttons[b] = Bf(145, 69, 0, [ᐃᐃ.ᐃΔⲆⲆΔⵠⵠ, ᐃᐃ.ΔⲆⲆᐃᐃᐃⲆ, ᐃᐃ.ⲆΔⲆⲆⲆΔⵠ], 1, fa, function () {
      V(D);
    }, -210, 204, da | ba, ha);
    this.buttons[b++].view = F;
    this.buttons[b] = Bf(145, 69, 0, [ᐃᐃ.ᐃΔⲆⲆΔⵠⵠ, ᐃᐃ.ΔⲆⲆᐃᐃᐃⲆ, ᐃᐃ.ⲆΔⲆⲆⲆΔⵠ], 1, fa, function () {
      V(I);
    }, 70, 238, da | ba, ha);
    this.buttons[b++].view = F;
    this.buttons[b] = Bf(145, 69, 0, [ᐃᐃ.ᐃΔⲆⲆΔⵠⵠ, ᐃᐃ.ΔⲆⲆᐃᐃᐃⲆ, ᐃᐃ.ⲆΔⲆⲆⲆΔⵠ], 1, fa, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        Vx(0, 300);
      } else {
        V(p);
      }
    }, 307, 205, da | ba, ha);
    this.buttons[b++].view = F;
    this.buttons[b] = Bf(145, 69, 0, [ᐃᐃ.ΔΔΔⵠⲆΔᐃ, ᐃᐃ.ΔΔΔⵠⵠᐃΔ, ᐃᐃ.ΔⲆⵠⲆⲆⵠⲆ], 1, fa, function () {
      V(B);
    }, -210, 238, da | ba, ha);
    this.buttons[b++].view = F;
    this.buttons[b] = Bf(145, 69, 0, [ᐃᐃ.ΔΔΔⵠⲆΔᐃ, ᐃᐃ.ΔΔΔⵠⵠᐃΔ, ᐃᐃ.ΔⲆⵠⲆⲆⵠⲆ], 1, fa, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        Vx(1, 600);
      } else {
        V(p);
      }
    }, 307, 239, da | ba, ha);
    this.buttons[b++].view = F;
    this.buttons[b] = Bf(192, 101, 0, [ᐃᐃ.ⵠΔΔⵠⲆΔΔ, ᐃᐃ.ⲆᐃⲆᐃⲆⲆⵠ, ᐃᐃ.ⵠΔⵠⲆⲆⲆΔ], 1, fa, function () {
      Tx();
    }, -100, 250, da | ba, ha);
    this.buttons[b++].view = L;
    this.buttons[b] = Bf(192, 104, 0, [ᐃᐃ.ΔⵠⵠⵠⲆᐃᐃ, ᐃᐃ.ⵠᐃⲆᐃⵠΔⵠ, ᐃᐃ.ΔⵠᐃⲆⲆⵠⵠ], 1, fa, function () {
      Tx();
    }, -100, 239, da | ba, ha);
    this.buttons[b++].view = U;
    this.buttons[b] = Bf(192, 101, 0, [ᐃᐃ.ⲆⵠⵠΔⲆⵠᐃ, ᐃᐃ.ΔⵠᐃⲆΔΔΔ, ᐃᐃ.ⲆⵠⲆⵠΔᐃⲆ], 1, fa, function () {
      V(m);
    }, 10, 250, da | ba, ha);
    this.buttons[b++].view = L;
    this.buttons[b] = Bf(192, 104, 0, [ᐃᐃ.ⲆⲆⵠΔΔⵠⲆ, ᐃᐃ.ΔΔⵠΔⵠⵠΔ, ᐃᐃ.ⲆⵠΔⵠⲆΔᐃ], 1, fa, function () {
      V(m);
    }, 10, 239, da | ba, ha);
    this.buttons[b++].view = U;
    ᐃⲆⵠⵠⵠ = [];
    ᐃⲆⵠⵠⵠ[ⲆΔⵠ.ⲆᐃⲆΔᐃ] = [ᐃᐃ.ΔⲆΔᐃⵠⲆⲆ, ᐃᐃ.ᐃⲆⲆⲆΔⵠⲆ, ᐃᐃ.ⲆⵠΔⲆⲆⵠⵠ];
    ᐃⲆⵠⵠⵠ[ⲆΔⵠ.ΔΔᐃⲆ] = [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ];
    ᐃⲆⵠⵠⵠ[ⲆΔⵠ.ⲆⲆΔⵠ] = [ᐃᐃ.ΔⵠΔΔⵠⲆΔ, ᐃᐃ.ΔⵠⵠⲆⲆΔⵠ, ᐃᐃ.ΔⵠᐃⵠⲆΔᐃ];
    ᐃⲆⵠⵠⵠ[ⲆΔⵠ.ⲆΔⲆⲆ] = [ᐃᐃ.ΔᐃΔⲆΔΔⵠ, ᐃᐃ.ⲆᐃⵠⲆⲆΔᐃ, ᐃᐃ.ⵠⵠΔᐃⲆΔⵠ];
    ᐃⲆⵠⵠⵠ[ⲆΔⵠ.ⵠᐃᐃⵠ] = [ᐃᐃ.ⵠⵠⵠⵠⲆΔⲆ, ᐃᐃ.ⲆᐃⲆΔⲆΔᐃ, ᐃᐃ.ⲆⲆΔⲆᐃⲆⲆ];
    ᐃⲆⵠⵠⵠ[ⲆΔⵠ.ⵠⲆⲆⵠ] = [ᐃᐃ.ΔᐃⵠΔⵠⵠΔ, ᐃᐃ.ⵠΔᐃⵠᐃⲆⵠ, ᐃᐃ.ⲆⲆⲆᐃΔⲆᐃ];
    ᐃⲆⵠⵠⵠ[ⲆΔⵠ.Δⵠᐃᐃ] = [ᐃᐃ.ⵠᐃⵠᐃⵠᐃΔ, ᐃᐃ.ⲆᐃⵠⲆⲆᐃⲆ, ᐃᐃ.ⲆΔⵠᐃᐃᐃᐃ];
    ᐃⲆⵠⵠⵠ[ⲆΔⵠ.ⲆⲆⵠⵠᐃ] = [ᐃᐃ.ⵠⵠΔΔΔᐃΔ, ᐃᐃ.ΔΔⵠⵠᐃⵠΔ, ᐃᐃ.ΔΔΔΔⲆΔᐃ];
    ᐃⲆⵠⵠⵠ[ⲆΔⵠ.ᐃⵠᐃⵠΔΔⵠ] = [ᐃᐃ.ΔᐃΔᐃⲆⲆᐃ, ᐃᐃ.ΔⲆⵠⵠⲆⲆⵠ, ᐃᐃ.ᐃᐃΔⵠΔΔΔ];
    ⲆⵠΔⵠⵠΔᐃ = b;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, -29, 205, da | ba, ha);
    this.buttons[b++].view = S;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Uj, -29, 300, da | ba, ha);
    this.buttons[b++].view = S;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, -29, 395, da | ba, ha);
    this.buttons[b++].view = S;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 65, 205, da | ba, ha);
    this.buttons[b++].view = S;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 65, 300, da | ba, ha);
    this.buttons[b++].view = S;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Il, 65, 395, da | ba, ha);
    this.buttons[b++].view = S;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 159, 205, da | ba, ha);
    this.buttons[b++].view = S;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, _h, 159, 300, da | ba, ha);
    this.buttons[b++].view = S;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Ql, 159, 395, da | ba, ha);
    this.buttons[b++].view = S;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⵠΔⵠΔΔ, ᐃᐃ.ΔΔⲆⲆⲆⵠΔ, ᐃᐃ.ⵠΔᐃⵠΔⵠⵠ], 1, fa, undefined, -61, 315, da | ba, ha);
    this.buttons[b++].view = S;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⲆΔΔⲆΔ, ᐃᐃ.ⲆΔⵠΔⵠᐃᐃ, ᐃᐃ.ΔᐃⵠⲆⲆΔⲆ], 1, fa, undefined, 260, 315, da | ba, ha);
    this.buttons[b++].view = S;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(C);
    }, -320, 470, da | ba, ha);
    this.buttons[b++].view = S;
    ᐃΔΔⵠΔⵠΔᐃⵠ = b;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, fo, -29, 205, da | ba, ha);
    this.buttons[b++].view = j;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Ql, -29, 300, da | ba, ha);
    this.buttons[b++].view = j;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, -29, 395, da | ba, ha);
    this.buttons[b++].view = j;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 65, 205, da | ba, ha);
    this.buttons[b++].view = j;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 65, 300, da | ba, ha);
    this.buttons[b++].view = j;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, _h, 65, 395, da | ba, ha);
    this.buttons[b++].view = j;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Uj, 159, 205, da | ba, ha);
    this.buttons[b++].view = j;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 159, 300, da | ba, ha);
    this.buttons[b++].view = j;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Uj, 159, 395, da | ba, ha);
    this.buttons[b++].view = j;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⵠΔⵠΔΔ, ᐃᐃ.ΔΔⲆⲆⲆⵠΔ, ᐃᐃ.ⵠΔᐃⵠΔⵠⵠ], 1, fa, Xs, -61, 315, da | ba, ha);
    this.buttons[b++].view = j;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⲆΔΔⲆΔ, ᐃᐃ.ⲆΔⵠΔⵠᐃᐃ, ᐃᐃ.ΔᐃⵠⲆⲆΔⲆ], 1, fa, Uk, 260, 315, da | ba, ha);
    this.buttons[b++].view = j;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(C);
    }, -320, 470, da | ba, ha);
    this.buttons[b++].view = j;
    ⵠⲆⲆⲆⲆᐃᐃⲆΔ = b;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Il, -29, 205, da | ba, ha);
    this.buttons[b++].view = G;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, -29, 300, da | ba, ha);
    this.buttons[b++].view = G;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, -29, 395, da | ba, ha);
    this.buttons[b++].view = G;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, vs, 65, 205, da | ba, ha);
    this.buttons[b++].view = G;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 65, 300, da | ba, ha);
    this.buttons[b++].view = G;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 65, 395, da | ba, ha);
    this.buttons[b++].view = G;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 159, 205, da | ba, ha);
    this.buttons[b++].view = G;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, nr, 159, 300, da | ba, ha);
    this.buttons[b++].view = G;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 159, 395, da | ba, ha);
    this.buttons[b++].view = G;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⵠΔⵠΔΔ, ᐃᐃ.ΔΔⲆⲆⲆⵠΔ, ᐃᐃ.ⵠΔᐃⵠΔⵠⵠ], 1, fa, undefined, -61, 315, da | ba, ha);
    this.buttons[b++].view = G;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⲆΔΔⲆΔ, ᐃᐃ.ⲆΔⵠΔⵠᐃᐃ, ᐃᐃ.ΔᐃⵠⲆⲆΔⲆ], 1, fa, fo, 260, 315, da | ba, ha);
    this.buttons[b++].view = G;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(C);
    }, -320, 470, da | ba, ha);
    this.buttons[b++].view = G;
    ΔⲆⵠⵠΔᐃⲆᐃᐃ = b;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Uj, -29, 205, da | ba, ha);
    this.buttons[b++].view = T;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, oh, -29, 300, da | ba, ha);
    this.buttons[b++].view = T;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, -29, 395, da | ba, ha);
    this.buttons[b++].view = T;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, w, 65, 205, da | ba, ha);
    this.buttons[b++].view = T;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 65, 300, da | ba, ha);
    this.buttons[b++].view = T;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 65, 395, da | ba, ha);
    this.buttons[b++].view = T;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, oh, 159, 205, da | ba, ha);
    this.buttons[b++].view = T;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 159, 300, da | ba, ha);
    this.buttons[b++].view = T;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, nr, 159, 395, da | ba, ha);
    this.buttons[b++].view = T;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⵠΔⵠΔΔ, ᐃᐃ.ΔΔⲆⲆⲆⵠΔ, ᐃᐃ.ⵠΔᐃⵠΔⵠⵠ], 1, fa, Mg, -61, 315, da | ba, ha);
    this.buttons[b++].view = T;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⲆΔΔⲆΔ, ᐃᐃ.ⲆΔⵠΔⵠᐃᐃ, ᐃᐃ.ΔᐃⵠⲆⲆΔⲆ], 1, fa, fo, 260, 315, da | ba, ha);
    this.buttons[b++].view = T;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(C);
    }, -320, 470, da | ba, ha);
    this.buttons[b++].view = T;
    ΔΔᐃΔⲆᐃΔΔⵠ = b;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, -29, 205, da | ba, ha);
    this.buttons[b++].view = R;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, -29, 300, da | ba, ha);
    this.buttons[b++].view = R;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Ql, -29, 395, da | ba, ha);
    this.buttons[b++].view = R;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, _h, 65, 205, da | ba, ha);
    this.buttons[b++].view = R;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, sr, 65, 300, da | ba, ha);
    this.buttons[b++].view = R;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Ql, 65, 395, da | ba, ha);
    this.buttons[b++].view = R;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, nr, 159, 205, da | ba, ha);
    this.buttons[b++].view = R;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 159, 300, da | ba, ha);
    this.buttons[b++].view = R;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, vs, 159, 395, da | ba, ha);
    this.buttons[b++].view = R;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⵠΔⵠΔΔ, ᐃᐃ.ΔΔⲆⲆⲆⵠΔ, ᐃᐃ.ⵠΔᐃⵠΔⵠⵠ], 1, fa, undefined, -61, 315, da | ba, ha);
    this.buttons[b++].view = R;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⲆΔΔⲆΔ, ᐃᐃ.ⲆΔⵠΔⵠᐃᐃ, ᐃᐃ.ΔᐃⵠⲆⲆΔⲆ], 1, fa, Wa, 260, 315, da | ba, ha);
    this.buttons[b++].view = R;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(C);
    }, -320, 470, da | ba, ha);
    this.buttons[b++].view = R;
    ⵠⵠⵠᐃΔⵠᐃⲆⲆ = b;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, fo, -29, 205, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, oh, -29, 300, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, w, -29, 395, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Uk, 65, 205, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 65, 300, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 65, 395, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, Wa, 159, 205, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 159, 300, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(178, 182, 0, [ᐃᐃ.ΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆ, ᐃᐃ.ᐃᐃΔⲆ], 1, fa, undefined, 159, 395, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⵠΔⵠΔΔ, ᐃᐃ.ΔΔⲆⲆⲆⵠΔ, ᐃᐃ.ⵠΔᐃⵠΔⵠⵠ], 1, fa, undefined, -61, 315, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(39, 122, 0, [ᐃᐃ.ΔΔⲆΔΔⲆΔ, ᐃᐃ.ⲆΔⵠΔⵠᐃᐃ, ᐃᐃ.ΔᐃⵠⲆⲆΔⲆ], 1, fa, undefined, 260, 315, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(C);
    }, -320, 470, da | ba, ha);
    this.buttons[b++].view = Q;
    this.buttons[b] = Bf(260, 260, 0, [ᐃᐃ.ⲆΔΔⲆΔᐃΔ, ᐃᐃ.ⵠⲆᐃⵠᐃᐃⲆ, ᐃᐃ.ⵠⲆⲆⲆΔᐃⲆ], 1, fa, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        $x(3, 50);
      } else {
        V(p);
      }
    }, -65, 197, da | ba, ha);
    this.buttons[b++].view = E;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(F);
    }, 309, 180, da | ba, ha);
    this.buttons[b++].view = E;
    this.buttons[b] = Bf(260, 260, 0, [ᐃᐃ.ΔᐃᐃⲆΔⵠΔ, ᐃᐃ.ⵠᐃⵠΔⵠΔⵠ, ᐃᐃ.ⵠⲆΔⲆⲆΔⵠ], 1, fa, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        $x(0, 100);
      } else {
        V(p);
      }
    }, -65, 197, da | ba, ha);
    this.buttons[b++].view = J;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(F);
    }, 309, 180, da | ba, ha);
    this.buttons[b++].view = J;
    this.buttons[b] = Bf(260, 260, 0, [ᐃᐃ.ᐃᐃⵠⵠᐃᐃᐃ, ᐃᐃ.ᐃⲆⲆᐃⵠⵠΔ, ᐃᐃ.ᐃᐃᐃⵠⵠᐃⵠ], 1, fa, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        $x(4, 150);
      } else {
        V(p);
      }
    }, -65, 197, da | ba, ha);
    this.buttons[b++].view = M;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(F);
    }, 309, 180, da | ba, ha);
    this.buttons[b++].view = M;
    this.buttons[b] = Bf(260, 260, 0, [ᐃᐃ.ᐃΔⵠⲆⵠᐃΔ, ᐃᐃ.ΔᐃᐃⵠⲆᐃΔ, ᐃᐃ.ΔⲆⵠᐃⵠΔᐃ], 1, fa, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        $x(1, 300);
      } else {
        V(p);
      }
    }, -65, 197, da | ba, ha);
    this.buttons[b++].view = D;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(F);
    }, 309, 180, da | ba, ha);
    this.buttons[b++].view = D;
    this.buttons[b] = Bf(260, 260, 0, [ᐃᐃ.ΔⲆΔⲆⲆⲆΔ, ᐃᐃ.ⵠⲆⲆᐃᐃⵠΔ, ᐃᐃ.ΔⵠᐃᐃᐃᐃΔ], 1, fa, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        $x(2, 600);
      } else {
        V(p);
      }
    }, -65, 197, da | ba, ha);
    this.buttons[b++].view = B;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(F);
    }, 309, 180, da | ba, ha);
    this.buttons[b++].view = B;
    this.buttons[b] = Bf(260, 260, 0, [ᐃᐃ.ᐃΔⵠⲆⵠᐃΔ, ᐃᐃ.ΔᐃᐃⵠⲆᐃΔ, ᐃᐃ.ΔⲆⵠᐃⵠΔᐃ], 1, fa, function () {
      if (v.ⲆⵠⲆⲆⵠ()) {
        $x(5, 300);
      } else {
        V(p);
      }
    }, -65, 197, da | ba, ha);
    this.buttons[b++].view = I;
    this.buttons[b] = Bf(115, 73, 0, [ᐃᐃ.ⲆᐃⲆΔⲆ, ᐃᐃ.ⵠᐃⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠΔ], 1, fa, function () {
      V(F);
    }, 309, 180, da | ba, ha);
    this.buttons[b++].view = I;
    var ua = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ⲆΔᐃᐃΔⵠΔ, ᐃᐃ.ᐃⲆⲆΔΔᐃᐃ, ᐃᐃ.ⲆΔⵠᐃⵠΔⵠ], 1, fa, function () {
      ta(Xs, 0);
    }, -305, 132, da | ba, ha);
    this.buttons[b++].view = m;
    var va = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ⲆⲆΔⵠΔᐃΔ, ᐃᐃ.ΔⵠⲆⲆⲆᐃᐃ, ᐃᐃ.ΔⵠⲆᐃⵠᐃΔ], 1, fa, function () {
      ta(Lq, 1);
    }, -273, 132, da | ba, ha);
    this.buttons[b++].view = m;
    var wa = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ⵠΔΔᐃⲆⵠⵠ, ᐃᐃ.ΔᐃⲆⵠⲆⵠⲆ, ᐃᐃ.ΔⵠᐃⵠⵠⵠΔ], 1, fa, function () {
      ta(sr, 2);
    }, -241, 132, da | ba, ha);
    this.buttons[b++].view = m;
    var xa = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ᐃᐃᐃᐃⲆⲆⲆ, ᐃᐃ.ᐃᐃΔⵠⲆⵠⲆ, ᐃᐃ.ᐃⲆⲆᐃᐃⲆΔ], 1, fa, function () {
      ta(undefined, 3);
    }, -305, 165, da | ba, ha);
    this.buttons[b++].view = m;
    var ya = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ᐃⵠᐃᐃΔΔⵠ, ᐃᐃ.ⵠⵠⵠΔΔⲆᐃ, ᐃᐃ.ⵠᐃᐃᐃᐃⵠᐃ], 1, fa, function () {
      ta(zs, 4);
    }, -273, 165, da | ba, ha);
    this.buttons[b++].view = m;
    var za = b;
    this.buttons[b] = Bf(46, 51, 0, [ᐃᐃ.ⵠΔΔΔⲆⵠⲆ, ᐃᐃ.ᐃᐃⵠⵠⲆⵠⲆ, ᐃᐃ.ⲆΔΔΔΔΔΔ], 1, fa, function () {
      ta(undefined, 5);
    }, -241, 165, da | ba, ha);
    this.buttons[b++].view = m;
    var Aa = b;
    this.buttons[b] = Bf(460, 73, 0, [ᐃᐃ.ᐃᐃᐃΔⲆⵠⵠ, ᐃᐃ.ⵠᐃΔⵠᐃΔⲆ, ᐃᐃ.ⵠΔⲆⵠᐃⵠΔ], 1, fa, function () {
      ta(-1);
    }, -180, 170, da | ba, ha);
    this.buttons[b++].view = m;
    var Ba = b;
    this.buttons[b] = Bf(222, 68, 0, [ᐃᐃ.ⲆⲆⲆⲆᐃⲆΔ, ᐃᐃ.ᐃΔΔⵠⲆⲆᐃ, ᐃᐃ.ΔⲆΔΔᐃⲆᐃ], 1, fa, function () {
      ta(0);
    }, -180, 215, da | ba, ha);
    this.buttons[b++].view = m;
    var Ca = b;
    this.buttons[b] = Bf(222, 68, 0, [ᐃᐃ.ⲆⲆᐃΔᐃⵠⵠ, ᐃᐃ.ⲆⵠΔΔΔⲆⵠ, ᐃᐃ.ⲆⲆⲆⵠⲆⵠⵠ], 1, fa, function () {
      ta(4);
    }, -180, 260, da | ba, ha);
    this.buttons[b++].view = m;
    var Da = b;
    this.buttons[b] = Bf(222, 68, 0, [ᐃᐃ.ⲆΔΔⲆⲆⲆⵠ, ᐃᐃ.ⵠⲆΔᐃⵠⲆᐃ, ᐃᐃ.ⵠⵠΔⵠⲆᐃⵠ], 1, fa, function () {
      ta(2);
    }, -60, 215, da | ba, ha);
    this.buttons[b++].view = m;
    var Ea = b;
    this.buttons[b] = Bf(222, 68, 0, [ᐃᐃ.ⲆⲆⲆⵠΔⲆⵠ, ᐃᐃ.ᐃΔⵠⵠΔΔⵠ, ᐃᐃ.ⵠⵠΔΔⲆⲆΔ], 1, fa, function () {
      ta(3);
    }, -60, 260, da | ba, ha);
    this.buttons[b++].view = m;
    this.ⵠⲆⵠᐃΔΔⲆ = b;
    this.buttons[b] = Bf(143, 66, 0, [ᐃᐃ.ⵠΔⵠⲆΔΔᐃ, ᐃᐃ.ΔΔΔΔᐃᐃⲆ, ᐃᐃ.ⵠᐃⲆΔΔᐃⵠ], 1, fa, function () {
      Xx(undefined, lx.ⵠⲆⵠᐃΔΔⲆ);
    }, -298, 110, da | ba, ha);
    this.buttons[b++].view = z;
    this.ⵠⲆⲆΔⲆⵠΔ = b;
    this.buttons[b] = Bf(104, 66, 0, [ᐃᐃ.ᐃⵠᐃΔΔΔⲆ, ᐃᐃ.ⲆⲆΔⲆᐃΔⲆ, ᐃᐃ.ⲆⲆᐃᐃΔⵠⲆ], 1, fa, function () {
      Xx(undefined, lx.ⵠⲆⲆΔⲆⵠΔ);
    }, -223, 110, da | ba, ha);
    this.buttons[b++].view = z;
    this.ΔⲆⵠⵠⵠⵠΔ = b;
    this.buttons[b] = Bf(110, 66, 0, [ᐃᐃ.ᐃΔΔΔΔⲆⲆ, ᐃᐃ.ᐃⵠⵠⵠΔⵠⵠ, ᐃᐃ.ΔᐃⵠᐃΔᐃⲆ], 1, fa, function () {
      Xx(vs, lx.ΔⲆⵠⵠⵠⵠΔ);
    }, -168, 110, da | ba, ha);
    this.buttons[b++].view = z;
    this.ⲆⲆΔᐃᐃΔᐃ = b;
    this.buttons[b] = Bf(88, 66, 0, [ᐃᐃ.ⵠΔΔⲆΔΔⲆ, ᐃᐃ.ⲆⲆᐃⲆⲆᐃⲆ, ᐃᐃ.ⲆⲆⲆΔⲆⵠⵠ], 1, fa, function () {
      Xx(undefined, lx.ⲆⲆΔᐃᐃΔᐃ);
    }, -110, 110, da | ba, ha);
    this.buttons[b++].view = z;
    this.ΔⲆΔⲆᐃⲆᐃ = b;
    this.buttons[b] = Bf(88, 66, 0, [ᐃᐃ.ΔⲆⲆⲆᐃⵠᐃ, ᐃᐃ.ᐃΔⵠⵠⲆⵠΔ, ᐃᐃ.ΔⲆⲆΔᐃΔᐃ], 1, fa, function () {
      Xx(undefined, lx.ΔⲆΔⲆᐃⲆᐃ);
    }, -63, 110, da | ba, ha);
    this.buttons[b++].view = z;
    this.buttons[b] = Bf(86, 44, 0, [ᐃᐃ.ΔⲆᐃᐃⲆⲆΔ, ᐃᐃ.ᐃΔⵠᐃΔΔΔ, ᐃᐃ.ⵠΔⲆⲆΔΔΔ], 1, fa, function () {
      rg.open("./terms.html", "_blank");
    }, 349, 290, da | ba, ha);
    this.buttons[b++].view = F;
    var Fa = new e(ᐃΔⲆΔ.ΔΔᐃⲆⵠ, ⲆⵠΔⵠⵠΔᐃ, function (a) {
      lx.ᐃⵠᐃΔ = a;
      if (lx.unlock.ᐃⵠᐃΔ[a] === 1) {
        ᐃΔⲆⵠ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⵠᐃΔ, this.unlock.ᐃⵠᐃΔ);
    var Ga = new e(ᐃΔⲆΔ.ⲆΔⵠΔ, ΔⲆⵠⵠΔᐃⲆᐃᐃ, function (a) {
      lx.ⲆⵠⲆΔⵠ = a;
      if (lx.unlock.ⲆⵠⲆΔⵠ[a] === 1) {
        ᐃΔⲆⵠ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⵠⲆΔⵠ, this.unlock.ⲆⵠⲆΔⵠ);
    var Ha = new e(ᐃΔⲆΔ.ΔⵠⲆⲆⲆ, ΔΔᐃΔⲆᐃΔΔⵠ, function (a) {
      lx.ⵠΔⲆΔⲆ = a;
      if (lx.unlock.ⵠΔⲆΔⲆ[a] === 1) {
        ᐃΔⲆⵠ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠΔⲆΔⲆ, this.unlock.ⵠΔⲆΔⲆ);
    var Ia = new e(ᐃΔⲆΔ.ⲆⵠⲆᐃⲆ, ⵠⵠⵠᐃΔⵠᐃⲆⲆ, function (a) {
      lx.Ⲇⵠᐃᐃⵠ = a;
      if (lx.unlock.Ⲇⵠᐃᐃⵠ[a] === 1) {
        ᐃΔⲆⵠ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.Ⲇⵠᐃᐃⵠ, this.unlock.Ⲇⵠᐃᐃⵠ);
    var Ja = new e(ᐃΔⲆΔ.ⲆⵠⲆᐃⲆ, ⵠⲆⲆⲆⲆᐃᐃⲆΔ, function (a) {
      lx.ᐃΔᐃⵠᐃ = a;
      if (lx.unlock.ᐃΔᐃⵠᐃ[a] === 1) {
        ᐃΔⲆⵠ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃΔᐃⵠᐃ, this.unlock.ᐃΔᐃⵠᐃ);
    var Ka = new e(ᐃΔⲆΔ.ᐃⵠΔⲆΔ, ᐃΔΔⵠΔⵠΔᐃⵠ, function (a) {
      lx.ΔΔⲆⲆΔ = a;
      if (lx.unlock.ΔΔⲆⲆΔ[a] === 1) {
        ᐃΔⲆⵠ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ΔΔⲆⲆΔ, this.unlock.ΔΔⲆⲆΔ);
    this.ⵠᐃⲆⵠΔⵠΔ = function (a) {
      tx.ⲆⵠΔᐃ = Jf(v.ⵠⲆ, a);
      for (var b = 0; b < v.buttons.length; b++) {
        if (ia === v.buttons[b].info.active) {
          v.buttons[b].ⵠⲆⵠᐃ(v.ⵠⲆ, tx.ⲆⵠΔᐃ, yf);
        }
      }
    };
    this.ⲆΔⲆΔᐃⲆⲆ = function (a) {
      tx.ⲆⵠΔᐃ = Jf(v.ⵠⲆ, a);
      for (var b = 0; b < v.buttons.length; b++) {
        var c = v.buttons[b];
        if (ia === c.info.active && c.ⵠⲆⵠᐃ(v.ⵠⲆ, tx.ⲆⵠΔᐃ, wf)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ΔᐃⲆⲆΔⵠᐃ = mj;
    this.ⲆΔⲆⵠⲆΔΔ = function (a) {
      tx.ⲆⵠΔᐃ = Jf(v.ⵠⲆ, a);
      var b = eo;
      for (var d = 0; d < v.buttons.length; d++) {
        if (ia === v.buttons[d].info.active) {
          b |= v.buttons[d].ⵠⲆⵠᐃ(v.ⵠⲆ, tx.ⲆⵠΔᐃ, zf);
        }
      }
      if (b !== v.ΔᐃⲆⲆΔⵠᐃ) {
        v.ΔᐃⲆⲆΔⵠᐃ = b;
        c.style.cursor = b ? v.ᐃⵠⲆᐃⲆΔⵠ : v.ⲆᐃᐃⵠᐃⲆⲆ;
      }
    };
    this.ⲆⲆΔΔᐃⵠΔ = function () {
      rg.addEventListener("mousedown", this.ⵠᐃⲆⵠΔⵠΔ, Kj);
      rg.addEventListener("mouseup", this.ⲆΔⲆΔᐃⲆⲆ, eo);
      rg.addEventListener("mousemove", this.ⲆΔⲆⵠⲆΔΔ, false);
    };
    this.ⲆⵠᐃⵠⲆⲆᐃ = function () {
      rg.removeEventListener("mousedown", this.ⵠᐃⲆⵠΔⵠΔ, false);
      rg.removeEventListener("mouseup", this.ⲆΔⲆΔᐃⲆⲆ, y);
      rg.removeEventListener("mousemove", this.ⲆΔⲆⵠⲆΔΔ, Ch);
    };
  }
  function Yw() {
    ⵠᐃⵠ.ᐃΔᐃⲆⵠⲆΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function Zw(b, c, d) {
    const e = ~(b & 41316) & b | ~(b & 41316) & 41316;
    const f = (c | 22234) & ~(c & 22234);
    const g = (46387 + d) % 65296;
    return ((50725 + (uk(e, f, g, e, f) ^ vt(g, e, f))) * 22695477 + 1) % 4294967296;
  }
  var $w = 1;
  var _w = 1;
  var ax = {
    ΔᐃΔΔⲆΔᐃΔᐃ: 5000,
    ⵠⵠΔⵠΔⵠᐃ: 3000,
    ⲆⲆⲆⵠᐃ: 1,
    ᐃΔᐃⲆ: 8,
    ΔⲆᐃᐃᐃᐃΔᐃⲆ: 5000,
    ⲆⲆⲆᐃᐃⵠⲆⵠⵠ: 12,
    ᐃⲆΔᐃⵠⵠΔ: 460000,
    ΔⵠⲆᐃⵠΔⲆ: 12,
    ⲆⲆⲆᐃΔⲆΔᐃⲆ: 12,
    ⲆⲆⲆᐃᐃ: 3,
    ΔⵠᐃΔⵠ: 2,
    Ⲇⵠᐃ: 6,
    ⲆΔΔⵠΔΔΔΔⲆ: 5000
  };
  var bx = [];
  bx[-1] = 1;
  bx[28] = 1;
  bx[49] = 1;
  bx[Hr.ⲆΔⲆΔΔⵠᐃⲆⵠ] = 2;
  bx[8] = 2;
  bx[1] = 2;
  bx[3] = 2;
  bx[4] = 2;
  bx[31] = 2;
  bx[32] = 2;
  bx[9] = 2;
  bx[57] = 2;
  bx[0] = 2;
  bx[63] = 2;
  bx[17] = 2;
  bx[5] = 2;
  bx[6] = 2;
  bx[30] = 2;
  bx[Hr.ΔΔⵠⲆⲆᐃⵠⵠⲆ] = 2;
  bx[18] = 2;
  bx[12] = 2;
  bx[13] = 2;
  bx[14] = 2;
  bx[15] = 2;
  bx[16] = 2;
  bx[33] = 2;
  bx[Hr.ΔΔⵠⲆᐃⵠⵠⲆⵠ] = 2;
  bx[35] = 2;
  bx[36] = 2;
  bx[37] = 2;
  function cx(a) {
    const b = Math.random;
    const c = [];
    Math.random = function () {
      for (let a = 0; a < 194; a++) {
        c.push(a);
      }
      return b();
    };
  }
  bx[38] = 2;
  bx[39] = 2;
  bx[45] = 2;
  bx[62] = 2;
  bx[54] = 2;
  bx[53] = 2;
  bx[46] = 3;
  bx[50] = 3;
  bx[51] = 3;
  bx[52] = 3;
  ᐃⲆⲆΔ = [];
  ᐃⲆⲆΔ[0] = 0;
  ᐃⲆⲆΔ[1] = 1;
  ᐃⲆⲆΔ[2] = 1;
  ᐃⲆⲆΔ[3] = 1;
  ᐃⲆⲆΔ[4] = 0;
  ᐃⲆⲆΔ[5] = 0;
  ᐃⲆⲆΔ[6] = 0;
  ᐃⲆⲆΔ[7] = 0;
  ᐃⲆⲆΔ[8] = 0;
  ᐃⲆⲆΔ[9] = 0;
  ᐃⲆⲆΔ[10] = 1;
  ᐃⲆⲆΔ[11] = 1;
  ᐃⲆⲆΔ[12] = 1;
  ᐃⲆⲆΔ[13] = 1;
  ᐃⲆⲆΔ[14] = 1;
  ᐃⲆⲆΔ[15] = 1;
  ᐃⲆⲆΔ[16] = 0;
  ᐃⲆⲆΔ[17] = 0;
  ᐃⲆⲆΔ[18] = 0;
  ᐃⲆⲆΔ[19] = 0;
  ᐃⲆⲆΔ[20] = 0;
  ᐃⲆⲆΔ[21] = 0;
  ᐃⲆⲆΔ[22] = 0;
  ᐃⲆⲆΔ[23] = 1;
  ᐃⲆⲆΔ[24] = 1;
  ᐃⲆⲆΔ[25] = 1;
  ᐃⲆⲆΔ[26] = 1;
  ᐃⲆⲆΔ[27] = 1;
  ᐃⲆⲆΔ[28] = 1;
  ᐃⲆⲆΔ[29] = 1;
  ᐃⲆⲆΔ[30] = 1;
  ᐃⲆⲆΔ[31] = 1;
  ᐃⲆⲆΔ[32] = 1;
  ᐃⲆⲆΔ[33] = 1;
  ᐃⲆⲆΔ[34] = 1;
  ᐃⲆⲆΔ[35] = 1;
  ᐃⲆⲆΔ[36] = 1;
  ᐃⲆⲆΔ[37] = 1;
  ᐃⲆⲆΔ[38] = 1;
  ᐃⲆⲆΔ[40] = 0;
  ᐃⲆⲆΔ[41] = 0;
  ᐃⲆⲆΔ[42] = 0;
  ᐃⲆⲆΔ[50] = 1;
  ᐃⲆⲆΔ[51] = 1;
  ᐃⲆⲆΔ[52] = 1;
  ᐃⲆⲆΔ[55] = 0;
  ᐃⲆⲆΔ[56] = 0;
  ᐃⲆⲆΔ[57] = 0;
  ᐃⲆⲆΔ[58] = 0;
  ⵠⲆⵠⲆᐃ = [];
  ⵠⲆⵠⲆᐃ[Yf.ᐃⲆⵠⵠΔ] = 0;
  ⵠⲆⵠⲆᐃ[1] = 0;
  ⵠⲆⵠⲆᐃ[29] = 0;
  ⵠⲆⵠⲆᐃ[6] = 0;
  ⵠⲆⵠⲆᐃ[3] = -1;
  ⵠⲆⵠⲆᐃ[31] = -1;
  ⵠⲆⵠⲆᐃ[2] = 0;
  ⵠⲆⵠⲆᐃ[4] = 0;
  ⵠⲆⵠⲆᐃ[30] = 0;
  ⵠⲆⵠⲆᐃ[33] = 0;
  ⵠⲆⵠⲆᐃ[32] = 1;
  ⵠⲆⵠⲆᐃ[35] = 1;
  ⵠⲆⵠⲆᐃ[7] = 1;
  ⵠⲆⵠⲆᐃ[8] = 1;
  ⵠⲆⵠⲆᐃ[9] = 1;
  ⵠⲆⵠⲆᐃ[19] = 1;
  ⵠⲆⵠⲆᐃ[50] = 1;
  ⵠⲆⵠⲆᐃ[5] = 0;
  ⵠⲆⵠⲆᐃ[12] = 1;
  ⵠⲆⵠⲆᐃ[13] = 1;
  ⵠⲆⵠⲆᐃ[14] = 1;
  ⵠⲆⵠⲆᐃ[20] = 1;
  ⵠⲆⵠⲆᐃ[52] = 1;
  ⵠⲆⵠⲆᐃ[10] = 0;
  ⵠⲆⵠⲆᐃ[15] = 1;
  ⵠⲆⵠⲆᐃ[16] = 1;
  ⵠⲆⵠⲆᐃ[17] = 1;
  ⵠⲆⵠⲆᐃ[21] = 1;
  ⵠⲆⵠⲆᐃ[51] = 1;
  ⵠⲆⵠⲆᐃ[45] = 0;
  ⵠⲆⵠⲆᐃ[46] = 1;
  ⵠⲆⵠⲆᐃ[47] = 1;
  ⵠⲆⵠⲆᐃ[48] = 1;
  ⵠⲆⵠⲆᐃ[49] = 1;
  ⵠⲆⵠⲆᐃ[53] = 1;
  ⵠⲆⵠⲆᐃ[18] = 1;
  ⵠⲆⵠⲆᐃ[22] = 1;
  ⵠⲆⵠⲆᐃ[23] = 1;
  ⵠⲆⵠⲆᐃ[11] = 0;
  ⵠⲆⵠⲆᐃ[34] = 1;
  var dx = {
    ⵠᐃᐃᐃᐃΔᐃ: {
      ΔᐃᐃⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠⵠ: {
        d1: [90391, 300, Uq],
        d0: [90086, 300, false],
        d2: [90684, 300, false]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ᐃⲆⲆᐃΔⲆΔ: {
      ΔᐃᐃⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠⵠ: {
        p1: [89549, 300, ja],
        p0: [89303, 300, false],
        p2: [89815, 300, false]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ᐃᐃΔᐃᐃΔⵠ: {
      ΔᐃᐃⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠⵠ: {
        w0: [88195, 300, eo],
        w3: [89025, 300, y],
        w2: [88751, 300, Vg],
        w1: [88473, 300, pk]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ⲆⵠⵠⲆⲆⵠⵠ: {
      ΔᐃᐃⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠⵠ: {
        ⲆᐃᐃᐃΔΔᐃ: [66961, 21223, true],
        ᐃⵠᐃⲆΔⵠⵠ: [32604, 21890, Rr],
        ᐃⲆⵠᐃⲆᐃΔ: [19882, 8301, P],
        ᐃⵠΔⲆᐃΔᐃ: [92249, 500, false],
        ⲆᐃᐃᐃΔⲆᐃ: [66014, 925, P],
        ΔΔΔⵠⵠ: [12356, 6965, jq],
        ᐃΔΔⵠⵠ: [91431, 400, Kj],
        ⵠΔΔⲆᐃᐃΔ: [91022, 400, false],
        ΔᐃⵠⵠⲆⲆΔᐃΔ: [100, 2800, Cl],
        ΔᐃᐃⵠΔᐃΔ: [3100, 8800, true],
        ⲆⲆⵠΔΔⵠᐃ: [66961, 21223, true],
        ᐃᐃⲆᐃΔⲆᐃ: [54524, 11393, true],
        ⵠⵠΔΔⲆΔⵠ: [30562, 655, true],
        ⲆⲆᐃⲆⵠⲆⵠ: [31658, 813, true],
        ΔⲆⵠΔⵠ: [28380, 1797, on]
      },
      sample: {
        ΔᐃⵠⵠⲆⲆΔᐃΔ: 1,
        ΔᐃᐃⵠΔᐃΔ: 1,
        ᐃⲆⵠᐃⲆᐃΔ: 1,
        ᐃⵠᐃⲆΔⵠⵠ: 1,
        ᐃᐃⲆᐃΔⲆᐃ: 1,
        ⲆᐃᐃᐃΔΔᐃ: 1,
        ⲆⲆⵠΔΔⵠᐃ: 1,
        ΔΔΔⵠⵠ: 8,
        ΔⲆⵠΔⵠ: 8,
        ⵠⵠΔΔⲆΔⵠ: 8,
        ⲆⲆᐃⲆⵠⲆⵠ: 8,
        ⲆᐃᐃᐃΔⲆᐃ: 8,
        ⵠΔΔⲆᐃᐃΔ: 6,
        ᐃΔΔⵠⵠ: 6,
        ᐃⵠΔⲆᐃΔᐃ: 6
      }
    }
  };
  function ex(b, c, d, e, f, i, a, j, k, h, g) {
    this.r = 1;
    this.ᐃⲆΔⵠΔ = b;
    this.ΔᐃⲆΔΔΔⵠ = b;
    this.ΔⲆⵠ = c;
    this.ⲆΔⲆ = d;
    this.fade = e;
    this.ⵠᐃⵠⵠⲆᐃⵠ = f;
    this.ⲆⵠΔΔⵠΔⵠ = i;
    this.ⲆΔᐃᐃ = a;
    this.ⵠⵠⲆΔΔᐃⲆ = j;
    this.source = k;
    this.source.ᐃᐃⵠΔⵠΔᐃ = k.x + k.w;
    this.source.ⵠⲆΔⵠⵠ = k.y + k.ΔⲆⲆ;
    this.ΔⵠᐃⲆᐃⵠᐃⵠⲆ = h;
    this.ⵠⵠⲆⲆΔⲆⵠ = g;
    this.ᐃⵠΔΔᐃⲆᐃ = 0;
    this.ᐃᐃⲆᐃⵠᐃⲆ = {
      ᐃⲆⵠΔ: 5,
      d: 5
    };
    this.ᐃⵠΔᐃⵠ = function () {
      this.ᐃⲆΔⵠΔ -= vx;
      if (this.ᐃⲆΔⵠΔ < 0) {
        this.ᐃⲆΔⵠΔ = this.ΔᐃⲆΔΔΔⵠ;
        var a = dx.ⲆⵠⵠⲆⲆⵠⵠ.ΔᐃᐃⵠⲆ.playing(this.ΔⲆⵠ);
        var b = dx.ⲆⵠⵠⲆⲆⵠⵠ.ΔᐃᐃⵠⲆ.playing(this.ⲆΔⲆ);
        if (a && !b) {
          var c = _w * this.ⲆΔᐃᐃ.volume(this.ΔⲆⵠ);
          var d = (Math.random() * this.ⲆⵠΔΔⵠΔⵠ + this.ⵠᐃⵠⵠⲆᐃⵠ) * _w;
          this.ⲆΔᐃᐃ.fade(c, d, this.fade, this.ΔⲆⵠ);
        } else if (!a && b) {
          c = this.ⲆΔᐃᐃ.volume(this.ⲆΔⲆ) * _w;
          d = (Math.random() * this.ⲆⵠΔΔⵠΔⵠ + this.ⵠᐃⵠⵠⲆᐃⵠ) * _w;
          this.ⲆΔᐃᐃ.fade(c, d, this.fade, this.ⲆΔⲆ);
        }
      }
    };
    this.transition = function () {
      this.ᐃⲆΔⵠΔ = this.ΔᐃⲆΔΔΔⵠ;
      this.ᐃᐃⲆᐃⵠᐃⲆ.d = this.ᐃᐃⲆᐃⵠᐃⲆ.ᐃⲆⵠΔ;
      if (mx.time) {
        this.ⲆΔᐃᐃ.fade(0, this.ⵠᐃⵠⵠⲆᐃⵠ * _w, this.ⵠⵠⲆΔΔᐃⲆ, this.ΔⲆⵠ);
        this.ⲆΔᐃᐃ.play(this.ΔⲆⵠ);
        if (this.ⲆΔᐃᐃ.playing(this.ⲆΔⲆ)) {
          var a = this.ⲆΔᐃᐃ.volume(this.ⲆΔⲆ) * _w;
          this.ⲆΔᐃᐃ.fade(a, 0, this.ⵠⵠⲆΔΔᐃⲆ, this.ⲆΔⲆ);
        }
      } else {
        this.ⲆΔᐃᐃ.fade(0, _w * this.ⵠᐃⵠⵠⲆᐃⵠ, this.ⵠⵠⲆΔΔᐃⲆ, this.ⲆΔⲆ);
        this.ⲆΔᐃᐃ.play(this.ⲆΔⲆ);
        if (this.ⲆΔᐃᐃ.playing(this.ΔⲆⵠ)) {
          a = _w * this.ⲆΔᐃᐃ.volume(this.ΔⲆⵠ);
          this.ⲆΔᐃᐃ.fade(a, 0, this.ⵠⵠⲆΔΔᐃⲆ, this.ΔⲆⵠ);
        }
      }
    };
    this.check = function (a) {
      if (this.ᐃⵠΔΔᐃⲆᐃ) {
        if (ⵠᐃⵠ.ⵠⵠⲆⲆΔⲆⵠ(a, this.ΔⵠᐃⲆᐃⵠᐃⵠⲆ)) {
          if (!rx.transition && mx.ᐃⲆΔⲆΔ.now < 460000) {
            if (mx.time) {
              if (!this.ⲆΔᐃᐃ.playing(this.ΔⲆⵠ)) {
                this.ᐃᐃⲆᐃⵠᐃⲆ.d -= vx;
                if (this.ᐃᐃⲆᐃⵠᐃⲆ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ⲆΔᐃᐃ.playing(this.ⲆΔⲆ)) {
              this.ᐃᐃⲆᐃⵠᐃⲆ.d -= vx;
              if (this.ᐃᐃⲆᐃⵠᐃⲆ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ᐃⵠΔΔᐃⲆᐃ = 0;
          if (this.ⲆΔᐃᐃ.playing(this.ΔⲆⵠ)) {
            var b = _w * this.ⲆΔᐃᐃ.volume(this.ΔⲆⵠ);
            this.ⲆΔᐃᐃ.fade(b, 0, this.ⵠⵠⲆΔΔᐃⲆ, this.ΔⲆⵠ);
          }
          if (this.ⲆΔᐃᐃ.playing(this.ⲆΔⲆ)) {
            b = _w * this.ⲆΔᐃᐃ.volume(this.ⲆΔⲆ);
            this.ⲆΔᐃᐃ.fade(b, 0, this.ⵠⵠⲆΔΔᐃⲆ, this.ⲆΔⲆ);
          }
        }
      } else if (ⵠᐃⵠ.ⵠⵠⲆⲆΔⲆⵠ(a, this.ⵠⵠⲆⲆΔⲆⵠ)) {
        this.ᐃⵠΔΔᐃⲆᐃ = 1;
        if (!rx.transition && mx.ᐃⲆΔⲆΔ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ⵠⲆⲆ = function (a, b) {
      var c;
      var d;
      c = a.x < this.source.x ? rx.ΔᐃⵠⵠⲆᐃᐃ(this.source.x) : this.source.ᐃᐃⵠΔⵠΔᐃ < a.x ? rx.ΔᐃⵠⵠⲆᐃᐃ(this.source.ᐃᐃⵠΔⵠΔᐃ) : b.x;
      d = this.source.y > a.y ? rx.ⲆΔⵠⵠᐃᐃᐃ(this.source.y) : this.source.ⵠⲆΔⵠⵠ < a.y ? rx.ⲆΔⵠⵠᐃᐃᐃ(this.source.ⵠⲆΔⵠⵠ) : b.y;
      this.ⲆΔᐃᐃ.pos(c, d, -0.5, this.ΔⲆⵠ);
      this.ⲆΔᐃᐃ.pos(c, d, -0.5, this.ⲆΔⲆ);
    };
  }
  function fx(b, c, d, e, f) {
    const i = b ^ 38038;
    const a = (16 << (c & 255)) + (24 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (0 << (c >> 24 & 255));
    const j = (1 + (d + 9) * 22695477) % 4294967296;
    const k = (1013904223 + (e + 21785) * 1664525) % 4294967296;
    const h = ~(f & 6945) & 6945 | ~(f & 6945) & f;
    const g = vr(i, a, j, k, h, i);
    Yb(a, j, k, h, i);
    return g ^ 32840;
  }
  ⲆΔⵠⲆⲆ = {
    ⵠⲆⵠΔⲆΔⵠΔⲆ: 0.2,
    ᐃΔᐃΔΔΔⲆ: 4,
    ᐃΔⵠᐃᐃⲆⲆΔⲆ: 0.2,
    ΔⲆΔΔⵠᐃᐃ: 100,
    ⲆⵠΔΔΔᐃⵠ: 100,
    ⲆⵠᐃⲆⵠⲆⵠ: 300,
    ΔⵠⲆⵠⵠⲆᐃ: 100,
    ᐃⲆΔᐃᐃⵠⲆ: 2,
    ⲆᐃⵠᐃⲆⲆᐃⵠΔ: 0.2,
    ⲆΔᐃΔⵠⲆⵠ: 1,
    ⵠᐃⲆⲆᐃΔⲆⵠⲆ: 0.4,
    ΔᐃΔⲆⲆ: 2,
    ΔⲆⲆᐃᐃⵠⵠ: 0,
    ⵠⵠΔΔᐃΔᐃ: 3
  };
  function gx(a, b, c) {
    this.ᐃΔⵠᐃᐃᐃⲆ = a;
    this.c = 0;
    this.ⲆΔᐃᐃ = b;
    this.ⵠᐃᐃⲆⲆ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ⵠᐃᐃⲆⲆ[this.c];
      this.ᐃΔⵠᐃᐃᐃⲆ.ⵠⲆΔⵠΔⲆΔ(this.ⲆΔᐃᐃ, a);
      this.ⲆΔᐃᐃ.play(a);
    };
  }
  function hx(a) {
    this.ⲆᐃⲆᐃⵠⲆΔ = 1;
    this.ᐃΔⲆᐃ = 0;
    this.mode = -1;
    this.ΔⲆⵠΔⵠ = rx.sample.ΔⲆⵠΔⵠ[a];
    this.ⵠⵠΔΔⲆΔⵠ = rx.sample.ⵠⵠΔΔⲆΔⵠ[a];
    this.ⲆⲆᐃⲆⵠⲆⵠ = rx.sample.ⲆⲆᐃⲆⵠⲆⵠ[a];
    this.ⲆᐃᐃᐃΔⲆᐃ = rx.sample.ⲆᐃᐃᐃΔⲆᐃ[a];
    this.ⵠⲆΔΔᐃⵠΔ = new gx(this, dx.ᐃⲆⲆᐃΔⲆΔ.ΔᐃᐃⵠⲆ, rx.ⵠⵠᐃⲆᐃ.ⵠⲆΔΔᐃⵠΔ[a]);
    this.ᐃⲆⲆᐃᐃ = new gx(this, dx.ᐃᐃΔᐃᐃΔⵠ.ΔᐃᐃⵠⲆ, rx.ⵠⵠᐃⲆᐃ.ᐃⲆⲆᐃᐃ[a]);
    this.ⲆⲆᐃⲆⲆ = new gx(this, dx.ⵠᐃᐃᐃᐃΔᐃ.ΔᐃᐃⵠⲆ, rx.ⵠⵠᐃⲆᐃ.ⲆⲆᐃⲆⲆ[a]);
    this.ⲆᐃⲆⵠΔ = a;
    this.x = 0;
    this.y = 0;
    this.ᐃⵠⵠⵠᐃ = 0;
    this.ᐃⲆΔⵠΔ = ⲆΔⵠⲆⲆ.ᐃΔᐃⲆΔᐃⵠΔⵠ;
    this.ⲆⵠΔᐃ = {
      y: 0,
      x: 0
    };
    this.ᐃⲆⲆᐃⲆ = dx.ⲆⵠⵠⲆⲆⵠⵠ.ΔᐃᐃⵠⲆ;
    this.ⲆⵠⵠΔⵠᐃᐃⵠⲆ = function (a) {
      if (a === 1) {
        this.ⵠⲆΔΔᐃⵠΔ.play();
      } else if (a === 2) {
        this.ᐃⲆⲆᐃᐃ.play();
      } else if (a === 3) {
        this.ⲆⲆᐃⲆⲆ.play();
      }
    };
    this.ᐃⲆᐃⵠⲆᐃⵠ = function (a) {
      if (a.ⵠⲆⲆΔⲆΔⲆ > 0) {
        return ⲆΔⵠⲆⲆ.ΔᐃΔⲆⲆ;
      } else if (a.ⵠᐃⵠᐃⲆⲆᐃ > 0) {
        return ⲆΔⵠⲆⲆ.ⲆΔᐃΔⵠⲆⵠ;
      } else if (a.ⲆⲆⲆⵠⲆ > 0 || a.ᐃⲆᐃⲆⵠ > 0) {
        return ⲆΔⵠⲆⲆ.ⵠⵠΔΔᐃΔᐃ;
      } else {
        return ⲆΔⵠⲆⲆ.ΔⲆⲆᐃᐃⵠⵠ;
      }
    };
    this.ⲆΔⲆⲆⵠ = function (a) {
      this.ⲆᐃⲆᐃⵠⲆΔ = 0;
      this.ᐃΔⲆᐃ = a;
      var b = mx.ΔⵠᐃΔⲆ[a];
      b.ⲆᐃⲆⵠΔ = this.ⲆᐃⲆⵠΔ;
      this.mode = this.ᐃⲆᐃⵠⲆᐃⵠ(b);
      this.ⲆⵠΔᐃ.x = b.x;
      this.ⲆⵠΔᐃ.y = b.y;
    };
    this.ⲆⲆΔΔⲆⵠⵠ = function () {
      this.ⲆᐃⲆᐃⵠⲆΔ = 1;
      this.mode = -1;
      this.ᐃⲆⲆᐃⲆ.stop(this.ΔⲆⵠΔⵠ);
      this.ᐃⲆⲆᐃⲆ.stop(this.ⵠⵠΔΔⲆΔⵠ);
      this.ᐃⲆⲆᐃⲆ.stop(this.ⲆⲆᐃⲆⵠⲆⵠ);
      this.ᐃⲆⲆᐃⲆ.stop(this.ⲆᐃᐃᐃΔⲆᐃ);
    };
    this.fade = function (a, b) {
      var c = $w * this.ᐃⲆⲆᐃⲆ.volume(a);
      this.ᐃⲆⲆᐃⲆ.fade(c, 0, b, a);
    };
    this.ⵠⲆΔⵠΔⲆΔ = function (a, b) {
      if (this.ᐃⵠⵠⵠᐃ && this.ⲆᐃⲆⵠΔ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ᐃⵠΔᐃⵠ = function (b, c, d, e, f, g, a) {
      this.ᐃⲆΔⵠΔ = g;
      if (e && f === this.mode) {
        var i = $w * this.ᐃⲆⲆᐃⲆ.volume(b);
        if (this.ᐃⵠⵠⵠᐃ) {
          var j = (d * Math.random() + c) * $w;
          this.ᐃⲆⲆᐃⲆ.fade(i, j, a, b);
        } else {
          this.ᐃⲆⲆᐃⲆ.fade(i, 0, a, b);
        }
      } else if (f != this.mode && this.ᐃⵠⵠⵠᐃ) {
        this.ᐃⲆⲆᐃⲆ.fade(0, (c + d) * $w, a, b);
      } else if (this.ᐃⵠⵠⵠᐃ) {
        i = this.ᐃⲆⲆᐃⲆ.volume(b) * $w;
        j = $w * (Math.random() * d + c);
        this.ᐃⲆⲆᐃⲆ.fade(i, j, a, b);
      }
      this.ⵠⲆΔⵠΔⲆΔ(this.ᐃⲆⲆᐃⲆ, b);
      this.ᐃⲆⲆᐃⲆ.play(b);
    };
    this.ⵠⲆⲆ = function () {
      var a = mx.ΔⵠᐃΔⲆ[this.ᐃΔⲆᐃ];
      this.ᐃⲆΔⵠΔ -= vx;
      if (this.ᐃⲆΔⵠΔ <= 0) {
        var b = 0;
        if (this.ⲆⵠΔᐃ.x != a.x || this.ⲆⵠΔᐃ.y != a.y) {
          if (!this.ᐃⵠⵠⵠᐃ) {
            b = 1;
            this.ᐃⵠⵠⵠᐃ = 1;
          }
          this.x = rx.ⲆΔⵠΔⵠⲆⲆ(a.x, ⲆΔⵠⲆⲆ.ᐃⲆΔᐃᐃⵠⲆ);
          this.y = rx.ᐃⲆⲆΔᐃᐃⲆ(a.y, ⲆΔⵠⲆⲆ.ᐃⲆΔᐃᐃⵠⲆ);
        } else if (this.ᐃⵠⵠⵠᐃ) {
          b = 1;
          this.ᐃⵠⵠⵠᐃ = 0;
        }
        this.ⲆⵠΔᐃ.x = a.x;
        this.ⲆⵠΔᐃ.y = a.y;
        ⵠΔⵠⵠ = this.ᐃⲆᐃⵠⲆᐃⵠ(a);
        if (this.mode != ⵠΔⵠⵠ) {
          if (this.mode === ⲆΔⵠⲆⲆ.ⲆΔᐃΔⵠⲆⵠ) {
            this.fade(this.ΔⲆⵠΔⵠ, ⲆΔⵠⲆⲆ.ⲆⵠᐃⲆⵠⲆⵠ);
          } else if (this.mode === ⲆΔⵠⲆⲆ.ΔᐃΔⲆⲆ) {
            this.fade(this.ⵠⵠΔΔⲆΔⵠ, ⲆΔⵠⲆⲆ.ΔⵠⲆⵠⵠⲆᐃ);
          } else if (this.mode === ⲆΔⵠⲆⲆ.ΔⲆⲆᐃᐃⵠⵠ) {
            this.fade(this.ⲆⲆᐃⲆⵠⲆⵠ, ⲆΔⵠⲆⲆ.ΔⲆΔΔⵠᐃᐃ);
          } else if (ⲆΔⵠⲆⲆ.ⵠⵠΔΔᐃΔᐃ === this.mode) {
            this.fade(this.ⲆᐃᐃᐃΔⲆᐃ, ⲆΔⵠⲆⲆ.ⲆⵠΔΔΔᐃⵠ);
          }
        }
        if (ⲆΔⵠⲆⲆ.ⲆΔᐃΔⵠⲆⵠ === ⵠΔⵠⵠ) {
          this.ᐃⵠΔᐃⵠ(this.ΔⲆⵠΔⵠ, 0.08, 0.3, b, ⵠΔⵠⵠ, ⲆΔⵠⲆⲆ.ⵠᐃⲆⲆᐃΔⲆⵠⲆ, ⲆΔⵠⲆⲆ.ⲆⵠᐃⲆⵠⲆⵠ);
        } else if (ⲆΔⵠⲆⲆ.ΔᐃΔⲆⲆ === ⵠΔⵠⵠ) {
          this.ᐃⵠΔᐃⵠ(this.ⵠⵠΔΔⲆΔⵠ, 0.2, 0.3, b, ⵠΔⵠⵠ, ⲆΔⵠⲆⲆ.ⲆᐃⵠᐃⲆⲆᐃⵠΔ, ⲆΔⵠⲆⲆ.ΔⵠⲆⵠⵠⲆᐃ);
        } else if (ⵠΔⵠⵠ === ⲆΔⵠⲆⲆ.ΔⲆⲆᐃᐃⵠⵠ) {
          this.ᐃⵠΔᐃⵠ(this.ⲆⲆᐃⲆⵠⲆⵠ, 0.3, 0.6, b, ⵠΔⵠⵠ, ⲆΔⵠⲆⲆ.ⵠⲆⵠΔⲆΔⵠΔⲆ, ⲆΔⵠⲆⲆ.ΔⲆΔΔⵠᐃᐃ);
        } else if (ⵠΔⵠⵠ === ⲆΔⵠⲆⲆ.ⵠⵠΔΔᐃΔᐃ) {
          this.ᐃⵠΔᐃⵠ(this.ⲆᐃᐃᐃΔⲆᐃ, 0.1, 0.25, b, ⵠΔⵠⵠ, ⲆΔⵠⲆⲆ.ᐃΔⵠᐃᐃⲆⲆΔⲆ, ⲆΔⵠⲆⲆ.ⲆⵠΔΔΔᐃⵠ);
        }
        this.mode = ⵠΔⵠⵠ;
      }
    };
    this.check = function () {
      var a = mx.ΔⵠᐃΔⲆ[this.ᐃΔⲆᐃ];
      return !!a || (this.ⲆⲆΔΔⲆⵠⵠ(a), rr);
    };
  }
  function ix(b, c, d, e, f, g) {
    Ke(yt, b, c, d, e, f, g);
    return ((66 + (ib(sb[0], sb[1], sb[2]) ^ Ob(sb[3], sb[4], sb[5], sb[0], sb[1]))) * 16807 + 0) % 2147483647;
  }
  ⲆⵠⵠΔΔⵠⵠ = 0;
  document.getElementById("version").innerHTML = 52 + ".3";
  var jx = [];
  var kx = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = Cr.ΔΔΔᐃⵠ[kx.time];
  kx.items.push(new $f(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  kx.items.push(new $f(100, 0, 0, 0, 0, 0, 0, 5));
  kx.items.push(new $f(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  kx.items.push(new $f(100, 0, 0, 0, 0, 0, 0, 5));
  var lx;
  var mx;
  var nx;
  var ox;
  var px = new function () {
    var c = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + Ib[324] + "]";
      }
    }
    this.ΔⲆΔⵠ = null;
    this.ⵠⵠΔΔⵠ = 0;
    this.Ⲇⵠⵠᐃⵠ = [];
    this.ⵠΔΔᐃⲆΔΔ = {};
    this.ⵠⵠⵠⲆΔⵠⲆ = {};
    this.ⲆⵠᐃⲆΔ = [[], [], [], [], [], [], [], [], []];
    this.ⲆⵠⲆⵠΔⲆⵠ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ⲆⵠᐃΔΔ = 0;
    this.ᐃⲆᐃΔⵠᐃⲆ = 0;
    this.ⵠΔᐃⲆⲆΔᐃ = function (b) {
      if (Sf !== undefined) {
        c.Ⲇⵠⵠᐃⵠ.push({
          a: Sf.name,
          gm: Sf.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        b();
        return;
      }
      fetch(Rf + "/list", {
        method: "GET"
      }).then(function (a) {
        if (a.ok) {
          a.json().then(function (d) {
            c.Ⲇⵠⵠᐃⵠ = [];
            c.ⵠⵠⵠⲆΔⵠⲆ = {};
            for (let a in qf.ⵠⵠΔⵠⵠᐃⵠ) {
              const b = qf.ⵠⵠΔⵠⵠᐃⵠ[a];
              c.Ⲇⵠⵠᐃⵠ.push({
                a: "Auto Select",
                gm: b,
                m: 100,
                nu: 0,
                auto: true
              });
            }
            var f = 0;
            var e = 1;
            var j = 2;
            var a = 4;
            for (let k = 0; k < d.length; k++) {
              const i = d[k];
              const m = i.n;
              const n = i.l;
              const g = i.p;
              const h = [];
              c.ⵠΔΔᐃⲆΔΔ[m] = h;
              const o = [];
              for (let a = 0; g.length > a; a++) {
                const b = m + g[a][f];
                o.push(b);
                h.push(b);
              }
              for (let b = 0; b < n.length; b++) {
                const d = n[b];
                let g;
                let i = qf.ⵠⵠΔⵠⵠᐃⵠ[d[j]];
                let h = i + d[e];
                g = i in c.ⵠⵠⵠⲆΔⵠⲆ ? ++c.ⵠⵠⵠⲆΔⵠⲆ[i] : c.ⵠⵠⵠⲆΔⵠⲆ[i] = 1;
                if (h in c.ⵠⵠⵠⲆΔⵠⲆ) {
                  ΔᐃΔᐃⵠᐃΔ = ++c.ⵠⵠⵠⲆΔⵠⲆ[h];
                } else {
                  ΔᐃΔᐃⵠᐃΔ = c.ⵠⵠⵠⲆΔⵠⲆ[h] = 1;
                }
                c.Ⲇⵠⵠᐃⵠ.push({
                  name: d[a],
                  a: qf.ⲆⵠΔᐃⵠΔᐃΔΔ[d[e]] + " " + ΔᐃΔᐃⵠᐃΔ,
                  r: d[e],
                  gm: qf.ⵠⵠΔⵠⵠᐃⵠ[d[j]],
                  idx: g,
                  m: 100,
                  nu: d[3],
                  id: d[e] + d[f],
                  p: o
                });
              }
            }
            const k = [];
            const i = [];
            const h = [];
            for (let a = 0; a < c.Ⲇⵠⵠᐃⵠ.length; a++) {
              const b = c.Ⲇⵠⵠᐃⵠ[a];
              if (!b.auto) {
                if (qf.ⵠⵠΔⵠⵠᐃⵠ[6] === b.gm) {
                  if (typeof b.name === "string" && (b.name.indexOf("Private Server") !== -1 || b.nu > 95)) {
                    i.push(b);
                  } else {
                    h.push(b);
                  }
                  k.push(a);
                }
              }
            }
            const g = [];
            g.push(...h.sort(function (a, b) {
              return b.nu - a.nu;
            }));
            g.push(...i.sort(function (a, b) {
              return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
            }));
            for (let a = 0; k.length > a; a++) {
              const b = k[a];
              const d = g[a];
              d.idx = a + 1;
              c.Ⲇⵠⵠᐃⵠ[b] = d;
            }
            b();
          });
        } else {
          rg.setTimeout(function () {
            c.ⵠΔᐃⲆⲆΔᐃ(b);
          }, 3000);
        }
      });
    };
    this.ΔᐃⵠⲆΔΔⵠΔᐃ = function (a) {
      var b = [];
      for (var c = 0; a.length > c; c++) {
        if (a[c].a.indexOf(lr) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return 0;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ΔᐃⲆⲆΔᐃⲆ = function (b) {
      var c = 0;
      for (var d = 0; b.length > d; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (px.ⲆⵠⲆⵠΔⲆⵠ[px.ⲆⵠᐃΔΔ] === -1) {
        px.ⲆⵠⲆⵠΔⲆⵠ[px.ⲆⵠᐃΔΔ] = e.selectedIndex = px.ΔᐃⵠⲆΔΔⵠΔᐃ(b);
      } else {
        e.selectedIndex = px.ⲆⵠⲆⵠΔⲆⵠ[px.ⲆⵠᐃΔΔ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + Ib[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Ib[323] + " (" + this.ΔⲆⲆᐃⲆⲆⵠ + ") " + Ib[325] + "</li>";
      for (d = 0; d < b.length; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Ib[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = px.ⲆⵠᐃⲆΔ[px.ⲆⵠᐃΔΔ], e = 0; e < d.length; e++) {
          if (a(d[e]) === b) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          px.ⲆⵠⲆⵠΔⲆⵠ[px.ⲆⵠᐃΔΔ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ΔⲆⲆᐃⲆⲆⵠ = 0;
    this.ᐃΔⲆᐃΔⲆΔⲆⲆ = function () {
      this.ΔⲆⲆᐃⲆⲆⵠ = 0;
      for (var a = 0; a < px.Ⲇⵠⵠᐃⵠ.length; a++) {
        if (this.Ⲇⵠⵠᐃⵠ[a].gm == "experimental") {
          this.ⲆⵠᐃⲆΔ[7].push(this.Ⲇⵠⵠᐃⵠ[a]);
        } else if (this.Ⲇⵠⵠᐃⵠ[a].gm == "zombies") {
          this.ⲆⵠᐃⲆΔ[2].push(this.Ⲇⵠⵠᐃⵠ[a]);
        } else if (this.Ⲇⵠⵠᐃⵠ[a].gm == "community") {
          this.ⲆⵠᐃⲆΔ[6].push(this.Ⲇⵠⵠᐃⵠ[a]);
        } else if (this.Ⲇⵠⵠᐃⵠ[a].gm == "forest") {
          this.ⲆⵠᐃⲆΔ[4].push(this.Ⲇⵠⵠᐃⵠ[a]);
        } else if (this.Ⲇⵠⵠᐃⵠ[a].gm == "battle-royale") {
          this.ⲆⵠᐃⲆΔ[5].push(this.Ⲇⵠⵠᐃⵠ[a]);
        } else if (this.Ⲇⵠⵠᐃⵠ[a].gm == "vampires") {
          this.ⲆⵠᐃⲆΔ[3].push(this.Ⲇⵠⵠᐃⵠ[a]);
        } else {
          this.ⲆⵠᐃⲆΔ[0].push(this.Ⲇⵠⵠᐃⵠ[a]);
        }
        this.ΔⲆⲆᐃⲆⲆⵠ += this.Ⲇⵠⵠᐃⵠ[a].nu;
      }
      for (a = 0; a < this.ⲆⵠᐃⲆΔ.length; a++) {
        if (this.ⲆⵠᐃⲆΔ[a].length === 0) {
          this.ⲆⵠᐃⲆΔ[a].push({
            a: Ib[327],
            ⵠⲆⲆⲆⲆᐃⵠⵠᐃ: 0,
            ⲆⲆ: "127.0.0.1",
            ΔᐃⲆ: 80
          });
        }
      }
      this.ΔᐃⲆⲆΔᐃⲆ(this.ⲆⵠᐃⲆΔ[0]);
      this.ⵠⵠⵠⵠⵠ = function (a) {
        px.ⲆⵠᐃΔΔ = a;
        px.ΔᐃⲆⲆΔᐃⲆ(px.ⲆⵠᐃⲆΔ[px.ⲆⵠᐃΔΔ]);
        px.ΔᐃⲆⲆΔᐃⲆ(px.ⲆⵠᐃⲆΔ[px.ⲆⵠᐃΔΔ]);
        document.getElementById("servselect").selectedIndex = px.ⲆⵠᐃΔΔ;
      };
    };
    this.ⵠΔⲆⲆⵠⵠⲆ = 0;
    this.Ⲇᐃᐃⵠᐃᐃᐃ = 0;
    this.ⲆΔΔⲆⵠ = null;
    this.timeout = function () {
      c.Ⲇᐃᐃⵠᐃᐃᐃ++;
      c.ΔⲆΔⵠ.close();
      if (c.Ⲇᐃᐃⵠᐃᐃᐃ > 3) {
        yx = 1;
        lx.ᐃⲆⲆⲆΔΔⵠⵠᐃ = Ew.ᐃⵠΔᐃⵠⲆⵠᐃⲆ;
        c.ΔΔⵠΔⲆ(Ib[300]);
        lx.waiting = Vg;
        if (nx.reconnect.enabled) {
          qx.ᐃⲆⵠⵠᐃ(lx.ᐃΔⲆΔⵠ);
        }
      } else if (nx.ᐃᐃⲆⵠΔΔⵠ === fo || nx.ⲆΔᐃᐃⲆᐃᐃ === undefined || nx.ⲆΔⲆΔᐃΔΔ === vs || un === nx.ⲆΔΔⲆⵠΔⲆ) {
        lx.ᐃⵠΔⵠᐃΔΔ(function () {
          c.ΔΔⵠᐃΔⲆⵠ();
        }, 1);
      } else {
        c.ΔΔⵠᐃΔⲆⵠ();
      }
    };
    this.ⲆᐃⲆᐃᐃᐃΔ = function (a) {
      if (this.ⵠⵠΔΔⵠ == this.ΔⲆΔⵠ.ⵠⵠΔΔⵠ) {
        this.ⵠⵠΔΔⵠ++;
        this.ΔΔⵠΔⲆ(Ib[301] + a);
        qx.ᐃⲆⵠⵠᐃ(lx.ᐃΔⲆΔⵠ);
      }
    };
    this.ᐃΔⵠⵠⵠΔⵠⲆⲆ = function () {
      this.ΔΔⵠΔⲆ("You speak too much");
    };
    this.ᐃⵠⵠΔΔⲆⵠⲆⲆ = function () {
      clearTimeout(this.ⲆΔΔⲆⵠ);
      this.ΔΔⵠΔⲆ(Ib[302]);
      lx.waiting = false;
    };
    this.ᐃⵠΔⲆⵠⵠᐃⵠΔ = function () {
      nx.ᐃⲆΔᐃⵠ.open = false;
    };
    this.ⲆᐃΔᐃⲆΔΔᐃⲆ = function () {
      qx.ΔⵠΔⵠΔⵠΔ = 0;
    };
    this.ⵠᐃᐃⵠⵠᐃⲆᐃⲆ = function () {
      qx.ᐃΔⲆᐃⲆⲆⲆ = 0;
    };
    this.ᐃⲆⲆᐃΔΔΔⵠΔ = function (a) {
      nx.ⵠΔⵠᐃΔ.ΔᐃΔⵠⵠ = a;
      if (mx.ⲆᐃᐃⲆᐃ > -300) {
        if (a === 0) {
          this.ΔΔⵠΔⲆ(Ib[340]);
        } else {
          this.ΔΔⵠΔⲆ(Ib[341]);
        }
      }
    };
    this.ᐃⵠΔⲆᐃ = function (a) {
      nx.ᐃⵠΔⲆᐃ = a;
    };
    this.ΔⵠⲆⲆⵠΔⲆᐃⲆ = function (a) {
      nx.ⵠⲆⵠⲆⲆΔΔ = a;
    };
    this.ⵠⲆⵠⲆⲆΔΔ = function (a) {
      nx.ⵠⲆⲆᐃⵠ.ΔᐃΔⵠⵠ = a;
      if (mx.ⲆⲆⲆⵠⲆ > -300) {
        if (a === 0) {
          this.ΔΔⵠΔⲆ(Ib[342]);
        } else {
          this.ΔΔⵠΔⲆ(Ib[343]);
        }
      }
    };
    this.ⵠᐃⲆΔⵠΔΔΔᐃ = function (a) {
      if (a === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ΔⲆΔⵠΔᐃⵠⲆᐃ = function () {
      qx.ⲆⵠⵠΔⲆⵠⵠ = 0;
    };
    this.ΔᐃᐃᐃΔⲆΔᐃᐃ = function () {
      qx.ⵠΔᐃΔⵠᐃΔ = 0;
    };
    this.ⲆΔᐃⲆⲆⲆΔΔⵠ = function () {
      nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ = [];
      nx.ΔⲆⵠⵠ.ΔᐃⲆΔ = [];
      nx.ΔⲆⵠⵠ.id = -1;
      nx.ΔⲆⵠⵠ.ⲆᐃⵠᐃⲆΔⲆ.stop();
      nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ = [];
      nx.ᐃⵠⲆΔ.ᐃΔΔᐃᐃ = false;
      nx.ᐃⵠⲆΔ.ᐃΔⲆⲆⵠᐃΔᐃⵠ = false;
      nx.ᐃⵠⲆΔ.ΔΔᐃΔ = -1;
      nx.ᐃⵠⲆΔ.id = -1;
      nx.ᐃⵠⲆΔ.ⵠⵠⵠⵠⲆ = false;
      nx.ᐃⵠⲆΔ.ΔⵠⲆᐃⲆ = false;
      nx.ᐃⵠⲆΔ.ΔΔΔⵠⵠ = zg;
      nx.ᐃⵠⲆΔ.ⲆΔᐃᐃΔⵠᐃ = false;
      nx.ᐃⵠⲆΔ.timeout = new ⵠᐃⵠ.ⲆΔⵠᐃ(ja, 0, 1, 0, 1, 1);
    };
    this.ΔⲆⵠᐃΔⵠⵠΔⵠ = function () {
      clearTimeout(this.ⲆΔΔⲆⵠ);
      this.ΔΔⵠΔⲆ();
      lx.waiting = Sr;
    };
    this.ⲆⵠᐃΔⲆⵠⲆ = function (a) {
      for (var b = 0; a.length > b; b++) {
        if (typeof a[b] === "string") {
          a[b] = ⵠᐃⵠ.ΔᐃⲆᐃⲆᐃΔ(a[b]);
        }
      }
      nx.ᐃᐃⲆᐃⲆ.ⵠⲆᐃᐃΔ(a[1], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.ΔΔⵠΔⲆ(a);
    };
    this.ΔᐃⲆΔΔᐃⲆᐃΔ = function () {
      clearTimeout(this.ⲆΔΔⲆⵠ);
      this.ΔΔⵠΔⲆ(Ib[339]);
      lx.waiting = false;
    };
    this.ᐃⵠᐃᐃⲆⲆΔⲆᐃ = function () {
      clearTimeout(this.ⲆΔΔⲆⵠ);
      this.ΔΔⵠΔⲆ(Ib[338]);
      lx.waiting = Vg;
    };
    this.ΔΔⵠⲆΔⵠᐃΔⵠ = function () {
      clearTimeout(this.ⲆΔΔⲆⵠ);
      this.ΔΔⵠΔⲆ(Ib[304]);
      lx.waiting = tl;
    };
    this.ⵠΔΔⲆΔᐃΔΔⵠ = function () {
      nx.ΔⲆⵠⵠ.ΔΔⵠⲆⲆᐃⵠ(1, 0);
      qx.ᐃⵠᐃⲆΔΔⲆ();
    };
    this.ⲆⲆΔΔᐃΔⵠⲆΔ = function (a) {
      var b = a[1];
      var c = mx.ᐃᐃΔΔ[b];
      c.ᐃⵠᐃΔ = a[2];
      c.ΔΔⲆⲆΔ = a[3];
      c.ⵠⲆᐃⲆⲆⲆΔ = a[4];
      c.ⵠΔⲆΔⲆ = a[5];
      c.ᐃΔᐃⵠᐃ = a[6];
      c.Ⲇⵠᐃᐃⵠ = a[7];
      c.level = a[8];
      var d = mx.ΔⵠᐃΔⲆ[b * mx.ᐃΔⵠⵠᐃΔⲆ];
      if (d) {
        d.ᐃⵠᐃΔ = a[2];
        d.ΔΔⲆⲆΔ = a[3];
        d.ⵠⲆᐃⲆⲆⲆΔ = a[4];
        d.ⵠΔⲆΔⲆ = a[5];
      }
    };
    this.ΔΔᐃⵠⵠⲆᐃⲆᐃ = function (a) {
      if (a === 29) {
        nx.ΔⲆⵠⵠ.ΔΔⵠⲆⲆᐃⵠ(1, 0);
        qx.ᐃⵠᐃⲆΔΔⲆ();
      } else {
        this.ᐃⵠⲆΔΔⲆΔ([0, a, 1]);
      }
      nx.ᐃⵠⲆΔ.ᐃΔΔⲆΔⵠⵠ();
    };
    this.ΔΔⵠⵠΔΔΔΔᐃ = function (a) {
      nx.ΔⵠⲆΔᐃ.ᐃⲆΔⵠΔ = 0;
      nx.ᐃⵠⲆΔ.ΔⲆⵠⲆⲆⵠᐃᐃⵠ(a);
    };
    this.ᐃⵠΔᐃⵠⵠᐃⵠᐃ = function (a) {
      for (var b = at[a].r, c = 0; c < b.length; c++) {
        if (nx.ΔⲆⵠⵠ.max > nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ.length || nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ᐃⵠⲆΔΔⲆΔ([0, b[c][0], d]);
        }
      }
      nx.ᐃⵠⲆΔ.ᐃΔΔⲆΔⵠⵠ();
    };
    this.ᐃᐃⲆⲆΔᐃⲆᐃΔ = function (a) {
      nx.ΔⵠⲆΔᐃ.ᐃⲆΔⵠΔ = 0;
      nx.ᐃⵠⲆΔ.ΔΔᐃΔᐃⲆᐃⵠⵠ(a);
    };
    this.ΔΔⵠΔⲆ = function (a) {
      if (nx.alert.text) {
        if (nx.alert.text !== a && a !== nx.alert.list[nx.alert.list.length - 1]) {
          nx.alert.list.push(a);
        }
      } else {
        nx.alert.text = a;
      }
    };
    this.ⲆⲆᐃᐃΔΔⵠⵠΔ = function () {
      this.ΔΔⵠΔⲆ(Ib[305]);
    };
    this.ⲆⲆᐃⲆΔᐃⵠᐃⲆ = function () {
      var a;
      a = nx.ⲆΔⲆ == 0 ? Ib[306] : Ib[307] + (nx.ⲆΔⲆ + 1) + Ib[308];
      this.ΔΔⵠΔⲆ(a);
      nx.ⲆΔⲆ++;
    };
    this.ⲆΔΔⲆⵠΔⲆᐃᐃ = function () {
      clearTimeout(c.ⲆΔΔⲆⵠ);
      nx.reconnect.enabled = false;
      nx.ΔⵠΔⵠⲆ = false;
      this.ΔΔⵠΔⲆ(Ib[309]);
      qx.ᐃⲆⵠⵠᐃ(lx.ᐃΔⲆΔⵠ);
      this.ΔⲆΔⵠ.close();
    };
    this.ΔⲆⲆⵠΔⵠⲆⵠⵠ = function () {
      yx = 1;
      clearTimeout(this.ⲆΔΔⲆⵠ);
      this.ΔΔⵠΔⲆ(Ib[310]);
      lx.waiting = false;
    };
    this.ᐃᐃᐃᐃⲆⲆᐃΔᐃ = function () {
      yx = 1;
      clearTimeout(this.ⲆΔΔⲆⵠ);
      this.ΔΔⵠΔⲆ(Ib[311]);
      lx.waiting = false;
    };
    this.ΔᐃⵠⲆⲆⲆᐃⵠΔ = function (a) {
      var b = a[1];
      var c = mx.ᐃᐃΔΔ;
      c[b].ΔΔΔᐃᐃ = a[2];
      c[b].ᐃⵠᐃΔ = a[3];
      c[b].ΔΔⲆⲆΔ = a[4];
      c[b].ⵠⲆᐃⲆⲆⲆΔ = a[5];
      c[b].ⵠΔⲆΔⲆ = a[6];
      c[b].ᐃΔᐃⵠᐃ = a[7];
      c[b].Ⲇⵠᐃᐃⵠ = a[8];
      c[b].level = a[9];
      c[b].ΔⲆᐃⲆⵠ = 0;
      c[b].ΔᐃΔΔΔⵠᐃ = null;
      c[b].label = null;
      c[b].ⵠᐃΔⵠΔᐃⵠ = null;
      c[b].ΔⵠΔⵠⲆ = true;
      if (Df === 1) {
        c[b].ΔΔΔᐃᐃ += "|" + b;
      }
    };
    this.ᐃᐃⲆⲆⲆΔⲆΔΔ = function () {
      this.ΔⲆΔⵠ[Ef](fq[Bo].stringify([9]));
    };
    this.ⲆᐃⵠⵠⵠⵠᐃΔΔ = function () {
      this.ΔΔⵠΔⲆ(Ib[312]);
    };
    this.ⵠⲆᐃⲆᐃΔᐃ = function () {
      this.ΔΔⵠΔⲆ(Ib[313]);
    };
    this.ⵠΔⲆⲆⲆⵠⲆᐃΔ = function (a) {
      this.ΔⲆΔⵠ[Ef](lq[ra].stringify([38, a]));
      nx.ᐃⲆΔᐃⵠ.open = false;
    };
    this.ᐃᐃⲆΔᐃᐃΔⵠⲆ = function (a) {
      for (var b = Gf[a - 1].items, c = 0; c < b.length && nx.ΔⲆⵠⵠ.max > nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ.length; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][1] === 29) {
          nx.ΔⲆⵠⵠ.ΔΔⵠⲆⲆᐃⵠ(1, 0);
        } else {
          this.ᐃⵠⲆΔΔⲆΔ([0, d, e]);
        }
      }
    };
    this.ᐃⵠⲆΔΔⲆΔ = function (b) {
      for (var c = b.length, d = nx.ΔⲆⵠⵠ, e = 1; e < c; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; h < d.ⵠᐃⵠⲆⲆ.length; h++) {
          if (f == d.ⵠᐃⵠⲆⲆ[h].id) {
            d.ΔᐃⲆΔ[f] += g;
            break;
          }
        }
        if (d.ⵠᐃⵠⲆⲆ.length == h) {
          d.ΔᐃⲆΔ[f] = g;
          d.ⵠᐃⵠⲆⲆ.push(qx.ⲆⲆⵠ[f]);
          qx.ᐃⵠᐃⲆΔΔⲆ();
        }
      }
      nx.ᐃⵠⲆΔ.ⵠⲆⲆ();
    };
    this.ΔⲆᐃΔ = function (b, c, d, e, f, g, a) {
      nx.ΔⲆᐃΔ.Ⲇⵠᐃⵠ = b / 100;
      nx.ΔⲆᐃΔ.ΔⲆⲆ = c / 100;
      nx.ΔⲆᐃΔ.c = d / 100;
      nx.ΔⲆᐃΔ.Ⲇᐃᐃ = e / 100;
      nx.ΔⲆᐃΔ.ᐃᐃᐃ = f / 100;
      nx.ΔⲆᐃΔ.ⲆⵠⲆΔΔΔᐃ = g / 100;
      nx.ᐃⵠΔⲆᐃ = a;
    };
    this.ⲆⲆⵠⲆΔᐃΔᐃᐃ = function (a) {
      qx.ΔΔΔᐃ.modify(a, 2);
    };
    this.ᐃⵠⲆᐃⲆᐃⲆⲆⲆ = function (a) {
      qx.ΔΔΔᐃ.modify(a, 0);
    };
    this.claimed = function (a) {
      qx.ΔΔΔᐃ.modify(a, 3);
    };
    this.ⵠⵠⲆΔⵠⵠⲆᐃΔ = function (a, b) {
      nx.ΔⲆᐃΔ.Ⲇⵠᐃⵠ = a / 100;
      nx.ᐃⵠΔⲆᐃ = b;
    };
    this.ᐃⵠⵠⵠᐃΔⲆᐃⵠ = function (a) {
      nx.ΔⲆᐃΔ.Ⲇᐃᐃ = a / 100;
    };
    this.ⵠⲆⲆⲆⲆΔⵠΔⲆ = function (a) {
      nx.ΔⲆᐃΔ.ΔⲆⲆ = a / 100;
    };
    this.ⵠΔᐃⲆⲆᐃᐃΔΔ = function (a) {
      nx.ΔⲆᐃΔ.ⲆⵠⲆΔΔΔᐃ = a / 100;
    };
    this.ΔⲆⵠⲆⵠΔΔⲆⲆ = function (a) {
      nx.ΔⲆᐃΔ.c = a / 100;
    };
    this.ΔⵠᐃᐃΔΔᐃⵠⵠ = function (a) {
      mx.time = a;
      mx.transition = true;
      rx.transition = 1;
    };
    this.ΔⵠⲆΔⲆⵠⵠⲆⵠ = function () {
      document.getElementById("game_body").style.backgroundColor = Cr.ΔΔΔᐃⵠ[mx.time];
    };
    this.ⲆᐃⵠΔⲆⲆᐃⲆⵠ = function (a) {
      if (mx.mode == 1 && mx.ᐃᐃΔΔ[a].ΔΔΔᐃᐃ !== "spectator") {
        this.ΔΔⵠΔⲆ(mx.ᐃᐃΔΔ[a].ΔΔΔᐃᐃ + Ib[314]);
      }
      mx.ᐃᐃΔΔ[a].ΔⵠΔⵠⲆ = y;
    };
    this.ᐃⲆΔΔΔᐃⲆⵠᐃ = function (a) {
      var b = new Uint16Array(a);
      ⲆΔᐃᐃ.ᐃΔΔ.ⲆᐃⵠΔⵠ(b[1], b[2]);
    };
    this.ⵠⲆΔⵠⵠΔⵠΔᐃ = function (a) {
      var b = new Uint16Array(a);
      nx.ᐃΔΔ.ⲆᐃⵠΔⵠ(b[1], b[2]);
    };
    this.ⲆᐃⵠⲆᐃΔΔⲆⲆ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = 0; e > f; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
        var k = mx.ΔⵠᐃΔⲆ[i * mx.ᐃΔⵠⵠᐃΔⲆ + g];
        if (k && k.ⵠΔΔ) {
          if (rx.loaded && rx.ᐃΔⲆΔⵠ) {
            rx.ⵠΔΔ(b[5 + f * 4] & 1, ⵠⲆⵠⲆᐃ[k.type], k.x, k.y);
          }
          k.ⵠΔΔ.angle = j;
          k.ⵠΔΔ.ⵠⲆⲆ = j;
        }
      }
    };
    this.ᐃⵠⵠΔⵠⲆⲆᐃⵠ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, e = 0; e < d; e++) {
        var f;
        var i = e * 4;
        var j = c[1 + i];
        var k = c[2 + i];
        var m = Math.PI * ((c[3 + i] >> 1) / 127) * 2;
        var p = c[4 + i];
        var q = jx.ΔΔⵠⵠ[k][j];
        switch (p) {
          case 0:
            (f = q.p[0][0]).angle = m;
            f.ⵠⲆⲆ = xr;
            break;
          case 1:
            (f = q.s[0][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 2:
            (f = q.s[1][0]).angle = m;
            f.ⵠⲆⲆ = Fl;
            break;
          case 3:
            (f = q.s[2][0]).angle = m;
            f.ⵠⲆⲆ = ct;
            break;
          case 4:
            (f = q.t[0][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 5:
            (f = q.t[1][0]).angle = m;
            f.ⵠⲆⲆ = Zb;
            break;
          case 6:
            (f = q.t[2][0]).angle = m;
            f.ⵠⲆⲆ = jj;
            break;
          case 7:
            (f = q.t[3][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 8:
            (f = q.t[4][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 9:
            (f = q.t[5][0]).angle = m;
            f.ⵠⲆⲆ = qa;
            break;
          case 10:
            (f = q.g[0][0]).angle = m;
            f.ⵠⲆⲆ = rt;
            break;
          case 11:
            (f = q.g[1][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 12:
            (f = q.g[2][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 13:
            (f = q.d[0][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 14:
            (f = q.d[1][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 15:
            (f = q.d[2][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 16:
            (f = q.b[0][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 17:
            (f = q.b[1][0]).angle = m;
            f.ⵠⲆⲆ = _j;
            break;
          case 18:
            (f = q.b[2][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 19:
            (f = q.b[3][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 20:
            (f = q.f[0][0]).angle = m;
            f.ⵠⲆⲆ = Fl;
            break;
          case 21:
            (f = q.f[1][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 22:
            (f = q.f[2][0]).angle = m;
            f.ⵠⲆⲆ = Fn;
            break;
          case 23:
            (f = q.sw[0][0]).angle = m;
            f.ⵠⲆⲆ = ss;
            break;
          case 24:
            (f = q.sw[1][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 25:
            (f = q.sw[2][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 26:
            (f = q.gw[0][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 27:
            (f = q.gw[1][0]).angle = m;
            f.ⵠⲆⲆ = jq;
            break;
          case 28:
            (f = q.gw[2][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 29:
            (f = q.dw[0][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 30:
            (f = q.dw[1][0]).angle = m;
            f.ⵠⲆⲆ = ma;
            break;
          case 31:
            (f = q.dw[2][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 32:
            (f = q.a[0][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 33:
            (f = q.a[1][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 34:
            (f = q.a[2][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 35:
            (f = q.cs[0][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 36:
            (f = q.cs[1][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 37:
            (f = q.cs[2][0]).angle = m;
            f.ⵠⲆⲆ = xr;
            break;
          case 38:
            (f = q.cs[3][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 40:
            (f = q.plm[0][0]).angle = m;
            f.ⵠⲆⲆ = Rr;
            break;
          case 41:
            (f = q.plm[1][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 42:
            (f = q.plm[2][0]).angle = m;
            f.ⵠⲆⲆ = ct;
            break;
          case 50:
            (f = q.re[0][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 51:
            (f = q.re[1][0]).angle = m;
            f.ⵠⲆⲆ = Fn;
            break;
          case 52:
            (f = q.re[2][0]).angle = m;
            f.ⵠⲆⲆ = pr;
            break;
          case 55:
            (f = q.c[0][0]).angle = m;
            f.ⵠⲆⲆ = Zb;
            break;
          case 56:
            (f = q.m[0][0]).angle = m;
            f.ⵠⲆⲆ = true;
            break;
          case 57:
            (f = q.m[1][0]).angle = m;
            f.ⵠⲆⲆ = ct;
            break;
          case 58:
            (f = q.m[2][0]).angle = m;
            f.ⵠⲆⲆ = ss;
        }
        if (rx.loaded && rx.ᐃΔⲆΔⵠ && f) {
          rx.ⵠΔΔ(c[3 + i] & 1, ᐃⲆⲆΔ[p], f.x, f.y);
        }
      }
    };
    this.ⵠᐃᐃⵠⵠ = function () {
      this.ΔⲆΔⵠ[Ef](Io[zo].stringify([35, nx.ⵠᐃᐃⵠⵠ.ⲆⵠⲆⵠ, nx.ⵠᐃᐃⵠⵠ.ΔᐃⲆᐃΔ]));
    };
    this.ⲆⵠΔΔⵠⲆⵠⵠΔ = function (a, b) {
      this.ΔⲆΔⵠ[Ef](Io[Oo].stringify([30, b, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ]));
    };
    this.ⲆⵠⵠⲆⲆⲆᐃ = function (a, b, c) {
      if (b) {
        this.ΔⲆΔⵠ[Ef](Io[Oo].stringify([14, b, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ]));
      } else {
        this.ΔⲆΔⵠ[Ef](Io[Fo].stringify([25, c, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ]));
      }
    };
    this.ᐃΔΔΔⲆⵠΔΔⵠ = function (a) {
      this.ΔⲆΔⵠ[Ef](Vo[Xo].stringify([13, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ]));
    };
    this.ᐃᐃᐃᐃⵠⲆⲆⵠΔ = function (a) {
      this.ΔⲆΔⵠ[Ef](Vo[ya].stringify([32, a]));
    };
    this.ⵠᐃⲆⲆᐃⲆᐃⵠΔ = function (a) {
      this.ΔⲆΔⵠ[Ef](Yo[zo].stringify([29, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ]));
    };
    this.ΔΔᐃⵠΔⲆⵠΔⲆ = function (a, b) {
      this.ΔⲆΔⵠ[Ef](lq[Xo].stringify([27, b, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ, a.type]));
    };
    this.ⵠᐃⲆⲆᐃⲆⲆⲆᐃ = function (a, b) {
      this.ΔⲆΔⵠ[Ef](lq[Xo].stringify([7, b, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ]));
    };
    this.ΔⲆᐃᐃⲆⵠⲆⲆⵠ = function (a, b, c) {
      this.ΔⲆΔⵠ[Ef](Yo[Oo].stringify([1, b, c, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ]));
    };
    this.ᐃΔΔⲆⲆΔⲆ = function (a) {
      this.ΔⲆΔⵠ[Ef](Vo[Xo].stringify([37, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ, a.type]));
    };
    this.ᐃᐃΔᐃΔᐃΔΔⲆ = function (a) {
      this.ΔⲆΔⵠ[Ef](Vo[Xo].stringify([4, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ]));
    };
    this.ⵠᐃⲆᐃⲆⵠΔΔⲆ = function (a) {
      this.ΔⲆΔⵠ[Ef](Vo[Xo].stringify([8, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ]));
    };
    this.ⵠᐃᐃⲆⲆᐃΔⲆᐃ = function (a) {
      this.ΔⲆΔⵠ[Ef](pq[oa].stringify([20, a.ⲆⵠⲆⵠ, a.ΔᐃⲆᐃΔ]));
    };
    this.ⵠⵠΔⲆΔⲆⲆΔΔ = function (a) {
      this.ΔⲆΔⵠ[Ef](fa[ra].stringify([3, a.ΔᐃⲆᐃΔ]));
    };
    this.ⵠⲆⲆⵠⲆⲆᐃ = function (a) {
      c.ΔⲆΔⵠ[Ef](Pa[ya].stringify([23, nx.ⲆⲆⵠⵠⵠ.id, nx.ΔⲆⲆⵠᐃ[a]]));
    };
    this.ΔⲆⵠⲆᐃⵠΔᐃᐃ = function () {
      c.ΔⲆΔⵠ[Ef](tq[Sa].stringify([17, nx.ⲆⲆⵠⵠⵠ.ⲆⵠⲆⵠ, nx.ⲆⲆⵠⵠⵠ.id]));
    };
    this.ᐃⵠᐃⲆΔᐃᐃ = function () {
      c.ΔⲆΔⵠ[Ef](uq[Fa].stringify([12]));
    };
    this.ⲆᐃⲆᐃⲆΔⵠⵠⵠ = function () {
      c.ΔⲆΔⵠ[Ef](uq[ya].stringify([19, nx.ⲆⲆⵠⵠⵠ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        nx.ⲆⲆⵠⵠⵠ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        nx.ⲆⲆⵠⵠⵠ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ⵠΔⲆ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        mx.ΔⵠΔΔⲆΔⵠⵠⲆ();
      }
      for (var n = (e.length - 2) / 18, o = 0; n > o; o++) {
        var q = 2 + o * 18;
        var t = 1 + o * 9;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + 5];
        var z = w * mx.ᐃΔⵠⵠᐃΔⲆ + y;
        if (x & 1) {
          mx.ΔⵠⲆⵠⵠΔⲆΔᐃ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + 6];
          var F = k[t + 7];
          var G = k[t + 8];
          var H = Math.PI * (e[q + 1] / 255) * 2;
          if (mx.ΔⵠᐃΔⲆ[z]) {
            var I = mx.ΔⵠᐃΔⲆ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && ⵠᐃⵠ.Ⲇᐃⵠᐃ(I, I.r) > 200) {
              I.x = B;
              I.y = D;
            }
            if (I.id !== nx.id || w === 0) {
              I.ΔⲆⲆⲆΔⵠⵠ = H;
            }
            I.action |= x;
            I.info = E;
            I.ⲆΔΔΔⵠ = F;
            I.ⵠⲆⲆΔⲆ = G;
            if (I.ⵠⲆⲆ) {
              I.ⵠⲆⲆ(x);
            }
          } else {
            var J = new $f(A, w, y, B, D, H, x, E, F, G);
            mx.ΔⵠᐃΔⲆ[z] = J;
            mx.ⵠΔⲆ[A].push(J);
          }
        }
      }
    };
    this.ΔᐃΔⲆ = function (a) {
      this.ⵠΔⲆⲆⵠⵠⲆ = ux;
      var b = new Uint16Array(a);
      nx.ΔᐃᐃᐃΔ.ⲆΔⲆⲆⵠ(b);
    };
    this.ⵠᐃⵠΔΔΔⵠⲆΔ = function (a) {
      if (Il !== $s) {
        at = $s;
      }
      if (a.length > 0) {
        $s = JSON.parse(JSON.stringify(at));
        for (var b = 0; b < a.length; b++) {
          var c = a[b];
          var d = at[c.item];
          if (d !== undefined) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ᐃᐃᐃ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ᐃΔᐃⵠⵠⵠᐃ = function (a) {
      if (a && a.length !== 0) {
        nx.ᐃΔᐃⵠⵠⵠᐃ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ⵠᐃ = [];
          var f = b.length * 18 + 10;
          var g = 0;
          d.font = 14 + "px Baloo Paaji";
          for (var h = 0; h < b.length; h++) {
            if (b[h].charAt(0) === "#") {
              ⵠᐃ[h] = b[h].substring(0, 7);
              b[h] = b[h].substring(8);
            } else {
              ⵠᐃ[h] = "#FFFFFF";
            }
            g = Math.max(d.measureText(b[h]).width + 16, g);
          }
          c.height = f;
          c.width = g;
          h = 0;
          for (; b.length > h; h++) {
            var i = gu(1, b[h], 14, ⵠᐃ[h], null, null, null, null, null, "#000", 6);
            d.drawImage(i, 8, h * 18 + 5);
          }
          return c;
        }(a);
      } else {
        nx.ᐃΔᐃⵠⵠⵠᐃ.message = undefined;
      }
    };
    this.ⲆᐃⲆⲆᐃ = function (a) {
      var b = mx.ΔⵠᐃΔⲆ[a[1] * mx.ᐃΔⵠⵠᐃΔⲆ];
      if (b) {
        if (mx.mode === 2 && b.ᐃⵠᐃΔ === 0) {
          if (nx.ⲆⵠⲆⵠⲆ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ΔⵠⲆⲆᐃ);
            } else {
              b.text.push(ΔⵠⲆⲆᐃ + "... " + a[2]);
            }
          } else {
            b.text.push(ⵠⵠⲆⵠᐃΔⵠ[Math.floor(Math.random() * ⵠⵠⲆⵠᐃΔⵠ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ᐃⲆⲆⵠΔⵠⵠᐃΔ = function (a) {
      if (nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ.length !== nx.ΔⲆⵠⵠ.max || at[a].Ⲇᐃᐃⵠ === 29 || nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(at[a].Ⲇᐃᐃⵠ) != -1 || nx.ΔⲆⵠⵠ.ᐃⲆΔᐃΔⵠᐃΔⵠ(at[a].r)) {
        this.ΔⲆΔⵠ[Ef](fq[Bo].stringify([26, a]));
        return 1;
      } else {
        this.ⵠⲆᐃⲆᐃΔᐃ();
        return 0;
      }
    };
    this.ⵠⵠⵠⵠⲆ = function (a) {
      nx.ᐃⵠⲆΔ.ΔⲆⲆⵠᐃⵠⲆⵠⵠ(a);
    };
    this.ΔⵠⲆᐃⲆ = function (a) {
      nx.ᐃⵠⲆΔ.ΔⵠⲆᐃⲆ = a;
      nx.ᐃⵠⲆΔ.ⵠⲆⲆ();
    };
    this.ΔΔΔⵠⵠ = function (a) {
      nx.ᐃⵠⲆΔ.ΔΔΔⵠⵠ = a;
      nx.ᐃⵠⲆΔ.ⵠⲆⲆ();
    };
    this.ⲆΔᐃᐃΔⵠᐃ = function (a) {
      nx.ᐃⵠⲆΔ.ⲆΔᐃᐃΔⵠᐃ = a;
      nx.ᐃⵠⲆΔ.ⵠⲆⲆ();
    };
    this.ⲆⵠⵠⲆⲆΔⵠⲆⵠ = function (a) {
      this.ΔΔⵠΔⲆ(Ib[315]);
    };
    this.ΔΔᐃᐃⲆᐃⲆᐃⵠ = function () {
      nx.ᐃⵠⲆΔ.ᐃΔΔⲆΔⵠⵠ();
    };
    this.ⵠⲆΔⵠᐃ = function (a) {
      qx.ⵠⲆΔⵠᐃ.ᐃᐃΔΔ = [];
      var b = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      var c = 0;
      for (var d = 1; a.length > d; d += 2) {
        var e = {
          x: Math.floor(a[d] * mx.w / 250),
          y: Math.floor(a[d + 1] * mx.ΔⲆⲆ / 250)
        };
        if (b && !c && !nx.ⲆⲆⵠⲆᐃⲆⵠ && ⵠᐃⵠ.Ⲇᐃⵠᐃ(e, b) < 250) {
          c += 1;
        } else {
          qx.ⵠⲆΔⵠᐃ.ᐃᐃΔΔ.push(e);
        }
      }
    };
    this.ⵠΔΔᐃᐃᐃΔⲆΔ = function () {
      nx.ⵠᐃᐃⵠⵠ.open = zg;
      nx.ⲆⵠΔΔⵠ.enabled = Kj;
      nx.ⲆⵠΔΔⵠ.ᐃⲆΔⵠΔ = -1;
      nx.ⲆⵠΔΔⵠ.label = null;
      nx.ⲆⵠΔΔⵠ.ⵠᐃΔᐃⵠΔΔ = null;
      nx.ⲆⵠΔΔⵠ.now = -1;
    };
    this.ⲆⵠΔΔⵠ = function (a) {
      qf.ⵠⵠⲆⵠⲆⵠΔ = a;
      nx.ⲆⵠΔΔⵠ.enabled = true;
      nx.ⲆⵠΔΔⵠ.ᐃⲆΔⵠΔ = new Date().getTime();
      nx.ⲆⵠΔΔⵠ.label = null;
      nx.ⲆⵠΔΔⵠ.now = -1;
      for (var b = [39, 45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
        var d = nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(b[c]);
        if (d != -1) {
          nx.ΔⲆⵠⵠ.ⲆⵠΔΔΔΔᐃ(b.length[c], d);
        }
      }
      nx.ᐃⵠⲆΔ.ᐃΔΔⲆΔⵠⵠ();
    };
    this.ᐃΔⵠᐃΔᐃΔⵠⵠ = function (a, b, c) {
      this.ΔᐃⲆⲆᐃⵠⲆ(a, b * 256 + c);
    };
    this.ΔᐃⲆⲆᐃⵠⲆ = function (a, b) {
      nx.ᐃⵠⲆΔ.ΔΔᐃΔ = -1;
      nx.ΔⲆⵠⵠ.ⵠΔᐃΔⲆⵠᐃ(a, b, nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(a));
      nx.ᐃⵠⲆΔ.ⵠⲆⲆ();
    };
    this.ᐃⲆⵠΔⲆᐃⵠⵠⲆ = function (a) {
      nx.ᐃⵠⲆΔ.ΔΔᐃΔ = -1;
      nx.ⲆΔᐃⵠᐃ.wait = true;
      var b = nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(a);
      nx.ΔⲆⵠⵠ.ⵠΔᐃΔⲆⵠᐃ(a, 1, b);
      if (b >= 0 && !nx.ΔⲆⵠⵠ.ΔᐃⲆΔ[a]) {
        nx.ᐃⵠⲆΔ.ⵠⲆⲆ();
      }
      if (a == 159) {
        nx.ΔⲆⲆⵠᐃ = [nx.id];
      }
    };
    this.ΔΔΔⲆⵠⲆᐃᐃⵠ = function () {
      this.ΔⲆΔⵠ[Ef](Io[zo].stringify([6]));
    };
    this.ⲆΔⵠᐃⵠΔᐃᐃⲆ = function (a) {
      this.ΔⲆΔⵠ[Ef](lq[Fo].stringify([2, a.ᐃᐃⵠΔΔ, a.id]));
    };
    this.ΔΔΔᐃⲆΔⲆΔⵠ = function (a, b) {
      this.ΔⲆΔⵠ[Ef](lq[Xo].stringify([10, a, b]));
    };
    this.ⲆⵠᐃΔᐃⲆᐃⵠᐃ = function () {
      var a = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      if (a) {
        var b = Math.PI * 2;
        this.ΔⲆΔⵠ[Ef](lq[Fo].stringify([22, nx.ᐃⵠⲆΔ.ΔΔᐃΔ, Math.floor((a.angle + b) % b * 255 / b), nx.ᐃⵠⲆΔ.mode]));
      }
    };
    this.ᐃΔᐃᐃⲆ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          nx.ᐃⵠⲆΔ.ΔΔᐃΔ = -1;
          this.ΔⲆΔⵠ[Ef](Yo[Oo].stringify([34, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!nx.ⲆⵠⲆⵠⲆ) {
            if (nx.ᐃⵠⲆΔ.ΔΔᐃΔ === a) {
              nx.ᐃⵠⲆΔ.ΔΔᐃΔ = -1;
            } else {
              nx.ᐃⵠⲆΔ.ΔΔᐃΔ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case Hr.ΔΔⵠⲆᐃⵠⵠⲆⵠ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!nx.ⲆⵠⲆⵠⲆ) {
            nx.ᐃⵠⲆΔ.ΔΔᐃΔ = -1;
            if ((c = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ]) && a === c.right) {
              this.ΔⲆΔⵠ[Ef](Vo[Xo].stringify([34, 7]));
            } else {
              nx.ᐃⲆⲆᐃᐃ.wait = true;
              this.ΔⲆΔⵠ[Ef](pq[oa].stringify([34, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!nx.ⲆⵠⲆⵠⲆ) {
            nx.ᐃⵠⲆΔ.ΔΔᐃΔ = -1;
            if ((c = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ]) && a === c.right) {
              this.ΔⲆΔⵠ[Ef](fa[ra].stringify([34, 7]));
            } else {
              this.ΔⲆΔⵠ[Ef](Pa[ya].stringify([34, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!nx.ⲆⵠⲆⵠⲆ) {
            nx.ᐃⵠⲆΔ.ΔΔᐃΔ = -1;
            var c = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
            this.ΔⲆΔⵠ[Ef](Pa[ya].stringify([34, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ]) && a !== c.ΔⲆᐃΔΔ) {
            nx.ⵠⲆⲆⲆⵠ.wait = true;
          }
          this.ΔⲆΔⵠ[Ef](Yo[Xo].stringify([34, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ΔⲆΔⵠ[Ef](tq[Sa].stringify([34, a]));
      }
    };
    this.ᐃΔΔΔᐃᐃᐃΔᐃ = function (a) {
      this.ΔⲆΔⵠ[Ef](lq[Bo].stringify([31, a]));
    };
    this.ⲆᐃⵠᐃⵠⵠᐃⵠΔ = function (a) {
      nx.ⲆΔᐃⵠᐃ.wait = P;
      var b = nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(a);
      nx.ΔⲆⵠⵠ.ⲆⵠΔΔΔΔᐃ(a, b);
      nx.ᐃⵠⲆΔ.ⵠⲆⲆ();
    };
    this.ᐃᐃⲆΔᐃⲆΔⲆᐃ = function (a, b) {
      this.ΔⲆΔⵠ[Ef](fq[ra].stringify([18, a]));
    };
    this.ΔⵠⵠΔⵠᐃⵠⵠⵠ = function (a, b) {
      this.ΔⲆΔⵠ[Ef](Io[zo].stringify([24, a]));
    };
    this.ΔΔⵠⵠⲆⲆᐃⲆΔ = function (a) {
      nx.ⲆΔᐃⵠᐃ.wait = true;
      var b = nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(a);
      nx.ΔⲆⵠⵠ.ⵠΔᐃΔⲆⵠᐃ(a, 1, b);
      nx.ᐃⵠⲆΔ.ⵠⲆⲆ();
    };
    this.ⲆⵠⵠᐃⲆᐃΔⲆᐃ = function (a) {
      var b = a[1];
      var c = a[2];
      nx.ⲆΔᐃⵠᐃ.wait = pr;
      var d = nx.ΔⲆⵠⵠ.ᐃⲆⲆⵠΔ(b);
      nx.ΔⲆⵠⵠ.ⵠΔᐃΔⲆⵠᐃ(b, c, d);
      nx.ᐃⵠⲆΔ.ⵠⲆⲆ();
    };
    this.ⲆⵠⵠⵠⲆⲆⲆⲆⵠ = function () {
      this.ΔⲆΔⵠ[Ef](Io[zo].stringify([16]));
    };
    this.ᐃⲆᐃᐃⲆΔⵠⲆⲆ = function (a) {
      var b = Math.PI * 2;
      this.ΔⲆΔⵠ[Ef](lq[Fo].stringify([36, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ΔᐃⲆᐃⵠⵠⵠⲆΔ = function (a) {
      var b = Math.PI * 2;
      this.ΔⲆΔⵠ[Ef](lq[Fo].stringify([0, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⵠΔⲆᐃⵠⲆᐃⵠΔ = function (a) {
      this.ΔⲆΔⵠ[Ef](ⵠⲆⵠΔⲆⲆⲆ[Do].stringify([11, a]));
    };
    this.ΔΔⵠⲆᐃⲆⵠⲆⵠ = function (a) {
      this.ΔⲆΔⵠ[Ef](Vo[Xo].stringify([33, a]));
    };
    this.ᐃΔᐃⲆⲆⵠⲆⲆⵠ = function (a) {
      var b = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
      if (nx.ⲆⵠⲆⵠⲆ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ΔⵠⲆⲆᐃ);
        } else {
          b.text.push(ΔⵠⲆⲆᐃ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ΔⲆΔⵠ[Ef](Vo[Xo].stringify([15, a]));
    };
    this.ⵠΔᐃΔΔ = function (a) {
      var b = ⲆΔᐃᐃ.select.ⵠΔⲆ;
      if (b.length != 0) {
        var c = [11];
        var d = [];
        ⵠᐃⵠ.ⵠⲆⵠⲆᐃᐃⲆ(a, {
          x: ⲆΔᐃᐃ.ᐃΔΔ.rx,
          y: ⲆΔᐃᐃ.ᐃΔΔ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; e < b.length; e++) {
          d.push(b[e].ⵠⵠᐃⲆΔᐃΔΔᐃ);
        }
        c.push(d);
        this.ΔⲆΔⵠ[Ef](pq[oa].stringify(c));
      }
    };
    this.ᐃΔⲆΔⵠⲆⵠ = 0;
    this.ⲆᐃᐃⲆⲆΔⵠ = {
      ⲆⲆ: 0,
      ⵠⵠΔⵠ: 0
    };
    this.ⵠᐃᐃΔᐃⵠΔΔᐃ = function () {
      if (ux - this.ᐃΔⲆΔⵠⲆⵠ > 50) {
        this.ᐃΔⲆΔⵠⲆⵠ = ux;
        var a = nx.ᐃΔΔ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / 100);
        if (this.ⲆᐃᐃⲆⲆΔⵠ.ⲆⲆ != b || this.ⲆᐃᐃⲆⲆΔⵠ.ⵠⵠΔⵠ != c) {
          this.ΔⲆΔⵠ[Ef](Pa[ra].stringify([28, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ⲆᐃᐃⲆⲆΔⵠ.ⲆⲆ = b;
          this.ⲆᐃᐃⲆⲆΔⵠ.ⵠⵠΔⵠ = c;
        }
      }
    };
    this.ⵠᐃΔΔⵠᐃΔ = 0;
    this.ΔΔⵠᐃΔᐃΔᐃΔ = function () {
      if (ux - this.ⵠᐃΔΔⵠᐃΔ > 60000) {
        this.ⵠᐃΔΔⵠᐃΔ = ux;
        //this.ping();
      }
    };
    this.ᐃⲆⲆⲆᐃⵠΔⵠⵠ = function () {
      nx.reconnect.enabled = xr;
      if (c.ΔⲆΔⵠ.ⵠⵠΔΔⵠ == c.ⵠⵠΔΔⵠ) {
        c.ⵠⵠΔΔⵠ++;
        c.ΔⲆΔⵠ.close();
        px.connect();
      }
    };
    this.ⲆᐃⵠⵠⲆⵠᐃᐃⲆ = function (a) {
      this.ΔΔⵠΔⲆ(Ib[316]);
      for (var b = 1; b < a.length; b++) {
        nx.ΔⲆⲆⵠᐃ.push(a[b]);
      }
    };
    this.ⵠⵠⲆⲆⵠΔⲆⲆⲆ = function (a) {
      this.ΔΔⵠΔⲆ(mx.ᐃᐃΔΔ[a].ΔΔΔᐃᐃ + Ib[318]);
      nx.ΔⲆⲆⵠᐃ.push(a);
      var b = document.getElementById("team_box");
      if (qx.ΔΔⲆΔΔ != -1 && b.style.display == "inline-block") {
        qx.ΔΔⲆΔⲆ[qx.ΔΔⲆΔΔ].action();
      }
    };
    this.ΔⵠᐃⲆᐃⵠΔⲆᐃ = function () {
      this.ΔΔⵠΔⲆ(Ib[319]);
      nx.ⲆⲆⵠⵠⵠ.wait = jj;
      nx.ΔⲆⲆⵠᐃ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ᐃᐃᐃᐃΔᐃⵠᐃΔ = function (a) {
      if (a == nx.id) {
        this.ΔΔⵠΔⲆ(Ib[320]);
        nx.ⲆⲆⵠⵠⵠ.wait = true;
        nx.ΔⲆⲆⵠᐃ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ΔΔⵠΔⲆ(mx.ᐃᐃΔΔ[a].ΔΔΔᐃᐃ + Ib[321]);
        for (var b = 0; b < nx.ΔⲆⲆⵠᐃ.length; b++) {
          if (nx.ΔⲆⲆⵠᐃ[b] == a) {
            nx.ΔⲆⲆⵠᐃ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (qx.ΔΔⲆΔΔ != -1 && c.style.display == "inline-block") {
          qx.ΔΔⲆΔⲆ[qx.ΔΔⲆΔΔ].action();
        }
      }
    };
    this.ΔΔⲆᐃⲆᐃⲆΔᐃ = function (a) {
      nx.ΔⵠΔⵠⲆ = mj;
      this.ΔΔⵠΔⲆ(Ib[322]);
      if (this.ⵠⵠΔΔⵠ == this.ΔⲆΔⵠ.ⵠⵠΔΔⵠ) {
        this.ⵠⵠΔΔⵠ++;
        qx.ᐃⲆⵠⵠᐃ(lx.ᐃΔⲆΔⵠ);
        this.ΔⲆΔⵠ.close();
      }
    };
    this.ⵠⵠΔᐃᐃⲆⵠΔⵠ = function (a, b) {
      nx.ΔⵠΔⵠⲆ = Vg;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      nx.ΔⵠΔΔΔⵠⲆ.ⲆⲆᐃⵠΔΔΔ = At[a][Math.floor(Math.random() * At[a].length)];
      nx.ΔⵠΔΔΔⵠⲆ.ΔⲆᐃⲆⵠ = ⵠᐃⵠ.ᐃΔΔΔⲆⲆΔ(mx.ᐃᐃΔΔ[nx.id].ΔⲆᐃⲆⵠ);
      nx.ΔⵠΔΔΔⵠⲆ.ⵠⲆⲆⵠⵠᐃⲆ = ⵠᐃⵠ.ᐃΔΔΔⲆⲆΔ(d[1]);
      nx.ΔⵠΔΔΔⵠⲆ.ⲆΔⵠΔⵠ = c[1];
      this.ΔΔⵠΔⲆ(Ib[317]);
      if (this.ΔⲆΔⵠ.ⵠⵠΔΔⵠ == this.ⵠⵠΔΔⵠ) {
        this.ⵠⵠΔΔⵠ++;
        qx.ᐃⲆⵠⵠᐃ(ox.ᐃΔⲆΔⵠ);
        this.ΔⲆΔⵠ.close();
        try {
          rg.Widget.adsRefresh();
        } catch (a) { }
      }
    };
    this.ping = function () {
      this.ΔⲆΔⵠ[Ef]("[21]");
    };
    this.ⵠΔⵠᐃᐃᐃᐃΔΔ = function () {
      if (this.ΔⲆΔⵠ.readyState == 3) {
        this.ⵠΔⲆⲆⵠⵠⲆ -= 600000;
      }
    };
    this.ⵠⵠᐃΔΔⵠⵠΔⲆ = function () {
      if (vx > 5) {
        this.ⵠΔⲆⲆⵠⵠⲆ = ux;
      }
      if (ux - this.ⵠΔⲆⲆⵠⵠⲆ > 600000) {
        this.ⵠΔⲆⲆⵠⵠⲆ = ux;
        this.ᐃⲆⲆⲆᐃⵠΔⵠⵠ();
      }
    };
    this.ⲆΔᐃⵠᐃᐃᐃᐃᐃ = function (b) {
      yx++;
      clearTimeout(this.ⲆΔΔⲆⵠ);
      document.getElementById("commandMainBoxName").innerHTML = this.ⲆⵠᐃⲆΔ[this.ⲆⵠᐃΔΔ][this.ⲆⵠⲆⵠΔⲆⵠ[this.ⲆⵠᐃΔΔ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ⵠΔⲆⲆⵠⵠⲆ = ux;
      nx.ΔⲆᐃΔ.ⲆⲆⲆΔⲆ.ⵠᐃΔⵠΔ = nx.ΔⲆᐃΔ.ⲆⲆⲆΔⲆ.ⵠⲆΔⵠⲆ;
      nx.ΔⲆᐃΔ.ᐃⵠΔⲆᐃⵠΔ.ⵠᐃΔⵠΔ = nx.ΔⲆᐃΔ.ᐃⵠΔⲆᐃⵠΔ.ⵠⲆΔⵠⲆ;
      nx.ΔⲆᐃΔ.ⵠΔΔᐃᐃᐃᐃ.ⵠᐃΔⵠΔ = nx.ΔⲆᐃΔ.ⵠΔΔᐃᐃᐃᐃ.ⵠⲆΔⵠⲆ;
      nx.ΔⲆᐃΔ.ᐃᐃⵠΔⲆᐃΔ.ⵠᐃΔⵠΔ = nx.ΔⲆᐃΔ.ᐃᐃⵠΔⲆᐃΔ.ⵠⲆΔⵠⲆ;
      nx.ΔⲆᐃΔ.ΔΔᐃⵠᐃ.ⵠᐃΔⵠΔ = nx.ΔⲆᐃΔ.ΔΔᐃⵠᐃ.ⵠⲆΔⵠⲆ;
      nx.ΔⲆᐃΔ.Ⲇⵠᐃⵠ = 1;
      nx.ΔⲆᐃΔ.c = 1;
      nx.ΔⲆᐃΔ.ΔⲆⲆ = 1;
      nx.ΔⲆᐃΔ.Ⲇᐃᐃ = 1;
      nx.ΔⲆᐃΔ.ᐃᐃᐃ = 1;
      nx.ΔⲆᐃΔ.ⲆⵠⲆΔΔΔᐃ = 1;
      nx.ⲆⵠΔᐃⲆΔΔ = pk;
      qx.ⲆΔΔΔᐃ.display = 0;
      nx.ΔⲆⵠⵠ.ⵠᐃⵠⲆⲆ = [];
      nx.ΔⲆⵠⵠ.ΔᐃⲆΔ = [];
      nx.ΔⲆⵠⵠ.max = 10;
      nx.ΔⲆⵠⵠ.ⵠΔⲆΔⲆⵠⲆ = 0;
      nx.ΔⲆⵠⵠ.ⲆⵠⲆΔⵠ = 0;
      nx.ΔⲆⵠⵠ.id = -1;
      qx.ΔⵠΔⵠΔⵠΔ = 1;
      qx.ᐃΔⲆᐃⲆⲆⲆ = 1;
      qx.ⵠΔᐃΔⵠᐃΔ = 1;
      qx.ⲆⵠⵠΔⲆⵠⵠ = 1;
      nx.ΔⵠΔⵠⲆ = Dg;
      nx.ΔⲆⵠⵠ.ⲆᐃⵠᐃⲆΔⲆ.stop();
      nx.ᐃⵠⲆΔ.ⲆⲆⲆⲆᐃ = [];
      nx.ᐃⵠⲆΔ.ᐃΔΔᐃᐃ = Sr;
      nx.ᐃⵠⲆΔ.ᐃΔⲆⲆⵠᐃΔᐃⵠ = rr;
      nx.ᐃⵠⲆΔ.ΔΔᐃΔ = -1;
      nx.ᐃⵠⲆΔ.id = -1;
      nx.ᐃⵠⲆΔ.ⵠⵠⵠⵠⲆ = false;
      nx.ᐃⵠⲆΔ.ΔⵠⲆᐃⲆ = Ch;
      nx.ᐃⵠⲆΔ.ΔΔΔⵠⵠ = No;
      nx.ᐃⵠⲆΔ.ⲆΔᐃᐃΔⵠᐃ = false;
      nx.ᐃⵠⲆΔ.timeout = new ⵠᐃⵠ.ⲆΔⵠᐃ(Vh, 0, 1, 0, 1, 1);
      nx.ᐃⲆⲆᐃᐃ.timeout = new ⵠᐃⵠ.ⲆΔⵠᐃ(Vh, 0, 1, 0, 1 / 10, 1);
      nx.ᐃⲆⲆᐃᐃ.wait = false;
      nx.ⵠⲆⲆⲆⵠ.timeout = new ⵠᐃⵠ.ⲆΔⵠᐃ(false, 0, 1, 0, 0.2, 1);
      nx.ⵠⲆⲆⲆⵠ.wait = false;
      nx.ⲆΔᐃⵠᐃ.timeout = new ⵠᐃⵠ.ⲆΔⵠᐃ(Kj, 0, 1, 0, 1, 1);
      nx.ⲆΔᐃⵠᐃ.wait = false;
      nx.ⲆⲆⵠⵠⵠ.id = -1;
      nx.ⲆⲆⵠⵠⵠ.ⲆⵠⲆⵠ = -1;
      nx.ⲆⲆⵠⵠⵠ.wait = No;
      nx.ⲆⲆⵠⵠⵠ.timeout = new ⵠᐃⵠ.ⲆΔⵠᐃ(rr, 0, 1, 0, 1 / 30, 1);
      qx.ⵠⲆΔⵠᐃ.ⲆⲆⵠΔⵠ.x = -1;
      qx.ⵠⲆΔⵠᐃ.ⲆⲆⵠΔⵠ.y = -1;
      qx.ᐃⲆᐃΔ.open = tl;
      qx.ⵠⲆΔⵠᐃ.ᐃᐃΔΔ = [];
      nx.ᐃⲆΔⵠᐃ.enabled = false;
      mx.mode = b[1];
      if (nr !== b[20] && Uk !== b[21]) {
        mx.ⲆⲆⲆΔΔ = b[20];
        mx.ᐃᐃⲆⲆΔ = b[21];
        mx.w = mx.ⲆⲆⲆΔΔ * mx.ⲆⵠⵠᐃᐃΔⲆ;
        mx.ΔⲆⲆ = mx.ⵠⲆⵠⵠᐃⵠΔ * mx.ᐃᐃⲆⲆΔ;
      }
      mx.ⲆⵠⵠΔᐃⲆⲆ = b[22];
      mx.ᐃⲆΔᐃΔ = b[23];
      c.ᐃΔᐃⵠⵠⵠᐃ(b[24]);
      c.ⵠᐃⵠΔΔΔⵠⲆΔ(b[25]);
      nx.ⵠΔⵠᐃΔ.ΔᐃΔⵠⵠ = b[26];
      nx.ⵠⲆⵠⲆⲆΔΔ = 0;
      nx.ⵠⲆⲆᐃⵠ.ΔᐃΔⵠⵠ = b[27];
      mx.ᐃΔᐃⲆⵠⵠⵠⵠⲆ(b[19]);
      mx.time = b[5];
      mx.ᐃⲆΔⲆΔ.ᐃᐃⲆⵠᐃ = b[15];
      mx.ᐃⲆΔⲆΔ.ⲆΔⲆⲆⵠ = new Date().getTime();
      qx.ΔΔΔᐃ.ⵠⵠⵠᐃᐃⲆᐃ = b[16];
      mx.transition = mj;
      nx.ⲆΔⲆ = b[2];
      qx.ΔΔΔᐃ.reset();
      nx.ΔⲆⲆⵠᐃ = b[8];
      mx.ⵠΔⲆ[0] = [];
      mx.ⵠΔⲆ[100] = [];
      mx.ⵠΔⲆ[2] = [];
      mx.ⵠΔⲆ[1] = [];
      mx.ⵠΔⲆ[6] = [];
      mx.ⵠΔⲆ[3] = [];
      mx.ⵠΔⲆ[31] = [];
      mx.ⵠΔⲆ[37] = [];
      mx.ⵠΔⲆ[43] = [];
      mx.ⵠΔⲆ[44] = [];
      mx.ⵠΔⲆ[39] = [];
      mx.ⵠΔⲆ[40] = [];
      mx.ⵠΔⲆ[54] = [];
      mx.ⵠΔⲆ[55] = [];
      mx.ⵠΔⲆ[4] = [];
      mx.ⵠΔⲆ[7] = [];
      mx.ⵠΔⲆ[8] = [];
      mx.ⵠΔⲆ[9] = [];
      mx.ⵠΔⲆ[10] = [];
      mx.ⵠΔⲆ[15] = [];
      mx.ⵠΔⲆ[16] = [];
      mx.ⵠΔⲆ[17] = [];
      mx.ⵠΔⲆ[45] = [];
      mx.ⵠΔⲆ[46] = [];
      mx.ⵠΔⲆ[47] = [];
      mx.ⵠΔⲆ[48] = [];
      mx.ⵠΔⲆ[49] = [];
      mx.ⵠΔⲆ[53] = [];
      mx.ⵠΔⲆ[11] = [];
      mx.ⵠΔⲆ[22] = [];
      mx.ⵠΔⲆ[23] = [];
      mx.ⵠΔⲆ[5] = [];
      mx.ⵠΔⲆ[12] = [];
      mx.ⵠΔⲆ[13] = [];
      mx.ⵠΔⲆ[14] = [];
      mx.ⵠΔⲆ[60] = [];
      mx.ⵠΔⲆ[70] = [];
      mx.ⵠΔⲆ[71] = [];
      mx.ⵠΔⲆ[72] = [];
      mx.ⵠΔⲆ[73] = [];
      mx.ⵠΔⲆ[74] = [];
      mx.ⵠΔⲆ[81] = [];
      mx.ⵠΔⲆ[82] = [];
      mx.ⵠΔⲆ[87] = [];
      mx.ⵠΔⲆ[86] = [];
      mx.ⵠΔⲆ[34] = [];
      mx.ⵠΔⲆ[65] = [];
      mx.ⵠΔⲆ[66] = [];
      mx.ⵠΔⲆ[67] = [];
      mx.ⵠΔⲆ[62] = [];
      mx.ⵠΔⲆ[63] = [];
      mx.ⵠΔⲆ[78] = [];
      mx.ⵠΔⲆ[77] = [];
      mx.ⵠΔⲆ[75] = [];
      mx.ⵠΔⲆ[76] = [];
      mx.ⵠΔⲆ[64] = [];
      mx.ⵠΔⲆ[69] = [];
      mx.ⵠΔⲆ[68] = [];
      mx.ⵠΔⲆ[79] = [];
      mx.ⵠΔⲆ[89] = [];
      mx.ⵠΔⲆ[83] = [];
      mx.ⵠΔⲆ[84] = [];
      mx.ⵠΔⲆ[85] = [];
      mx.ⵠΔⲆ[80] = [];
      mx.ⵠΔⲆ[88] = [];
      mx.ⵠΔⲆ[91] = [];
      mx.ⵠΔⲆ[90] = [];
      mx.ⵠΔⲆ[61] = [];
      mx.ⵠΔⲆ[18] = [];
      mx.ⵠΔⲆ[19] = [];
      mx.ⵠΔⲆ[20] = [];
      mx.ⵠΔⲆ[21] = [];
      mx.ⵠΔⲆ[50] = [];
      mx.ⵠΔⲆ[52] = [];
      mx.ⵠΔⲆ[51] = [];
      mx.ⵠΔⲆ[29] = [];
      mx.ⵠΔⲆ[56] = [];
      mx.ⵠΔⲆ[30] = [];
      mx.ⵠΔⲆ[38] = [];
      mx.ⵠΔⲆ[33] = [];
      mx.ⵠΔⲆ[32] = [];
      mx.ⵠΔⲆ[24] = [];
      mx.ⵠΔⲆ[25] = [];
      mx.ⵠΔⲆ[26] = [];
      mx.ⵠΔⲆ[27] = [];
      mx.ⵠΔⲆ[28] = [];
      mx.ⵠΔⲆ[42] = [];
      mx.ⵠΔⲆ[41] = [];
      mx.ⵠΔⲆ[35] = [];
      mx.ⵠΔⲆ[36] = [];
      mx.ΔⵠᐃΔⲆ = [];
      mx.ᐃΔⵠⵠᐃΔⲆ = b[7];
      nx.id = b[9];
      nx.ᐃΔⲆᐃ = mx.ᐃΔⵠⵠᐃΔⲆ * nx.id;
      if (rx.loaded) {
        rx.ᐃᐃΔΔ[0].ᐃΔⲆᐃ = nx.ᐃΔⲆᐃ;
        rx.ᐃᐃΔΔ[0].ⲆᐃⲆᐃⵠⲆΔ = 0;
      }
      sx.ΔⵠᐃΔⲆⵠᐃ();
      nx.ᐃΔΔ.ⲆᐃⵠΔⵠ(b[3], b[10]);
      mx.ᐃᐃΔΔ = [];
      var d = mx.ᐃᐃΔΔ;
      for (var e = 0; e < b[11]; e++) {
        d.push(new Xf());
      }
      e = 0;
      for (var f = b[4]; f.length > e; e++) {
        var g = d[f[e].i];
        g.ΔΔΔᐃᐃ = f[e].n;
        g.ᐃⵠᐃΔ = f[e].s;
        g.ΔΔⲆⲆΔ = f[e].a;
        g.ᐃΔᐃⵠᐃ = f[e].c;
        g.ⵠΔⲆΔⲆ = f[e].b;
        g.Ⲇⵠᐃᐃⵠ = f[e].d;
        g.ⵠⲆᐃⲆⲆⲆΔ = f[e].g;
        g.level = f[e].l;
        g.ΔⲆᐃⲆⵠ = ⵠᐃⵠ.ⲆΔᐃᐃⵠΔΔ(f[e].p);
        g.ΔⵠΔⵠⲆ = true;
        if (Df === 1) {
          g.ΔΔΔᐃᐃ += "|" + f[e].i;
        }
      }
      nx.ΔᐃᐃᐃΔ.sort();
      if (mx.mode === 1 && mx.ᐃᐃΔΔ[nx.id].ΔΔΔᐃᐃ === "spectator") {
        nx.ⲆⲆⵠⲆᐃⲆⵠ = ct;
      } else {
        nx.ⲆⲆⵠⲆᐃⲆⵠ = tl;
      }
      if (mx.mode === 2 && mx.ᐃᐃΔΔ[nx.id].ᐃⵠᐃΔ === 0) {
        nx.ⲆⵠⲆⵠⲆ = ss;
      } else {
        nx.ⲆⵠⲆⵠⲆ = false;
      }
      if (mx.mode === 3 && mx.ᐃᐃΔΔ[nx.id].ᐃⵠᐃΔ === 0) {
        nx.ⵠⲆⲆⵠΔΔⲆ = true;
      } else {
        nx.ⵠⲆⲆⵠΔΔⲆ = mj;
      }
      ᐃΔⲆⵠ.set("starve_token", nx.ΔᐃⲆⲆΔ);
      if (b[12] === 0) {
        nx.ᐃⲆΔᐃⵠ.ᐃⲆΔⵠΔ = 0;
        qx.ΔΔΔᐃ.restore(b[17]);
        var h = b[14];
        if (h[29]) {
          nx.ΔⲆⵠⵠ.ΔΔⵠⲆⲆᐃⵠ(1, 0);
        }
        for (e = 0; h.length > e; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ᐃⵠⲆΔΔⲆΔ([0, e, h[e]]);
          }
        }
        nx.ᐃⲆΔᐃⵠ.open = false;
      } else {
        if (mx.mode === 4) {
          this.ᐃⵠⲆΔΔⲆΔ([0, 238, 1]);
        } else if (mx.mode === 3) {
          if (nx.ⵠⲆⲆⵠΔΔⲆ) {
            this.ᐃⵠⲆΔΔⲆΔ([0, 190, 4]);
          } else {
            this.ᐃⵠⲆΔΔⲆΔ([0, 191, 3]);
          }
        }
        if (mx.mode === 0 || mx.mode === 3 || mx.mode === 7 || mx.mode === 4) {
          nx.ᐃⲆΔᐃⵠ.ᐃⲆΔⵠΔ = new Date().getTime();
          nx.ᐃⲆΔᐃⵠ.open = Rr;
          nx.ᐃⲆΔᐃⵠ.value = b[13];
          qx.ᐃⲆΔᐃⵠ.ⲆΔⲆⲆⵠ();
        } else {
          nx.ᐃⲆΔᐃⵠ.ᐃⲆΔⵠΔ = 0;
          nx.ᐃⲆΔᐃⵠ.open = false;
          nx.ᐃⲆΔᐃⵠ.value = 0;
        }
        nx.ᐃΔᐃᐃᐃⵠᐃ = b[12].toString();
      }
      nx.ⲆⵠΔΔⵠ.enabled = b[6];
      nx.ⲆⵠΔΔⵠ.ᐃⲆΔⵠΔ = -1;
      nx.ⲆⵠΔΔⵠ.label = null;
      nx.ⲆⵠΔΔⵠ.now = -1;
      ᐃΔⲆⵠ.set("starve_token_id", nx.ᐃΔᐃᐃᐃⵠᐃ);
      if (nx.reconnect.enabled) {
        nx.reconnect.rotate = 0;
        nx.reconnect.enabled = No;
      } else {
        lx.ᐃⲆⵠⵠᐃ(qx.ᐃΔⲆΔⵠ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + lx.ᐃⵠᐃΔ + "A" + lx.ΔΔⲆⲆΔ);
        }
      }
    };
    this.connect = function () {
      c.Ⲇᐃᐃⵠᐃᐃᐃ = 0;
      c.ΔΔⵠᐃΔⲆⵠ();
    };
    this.ΔⵠΔⲆᐃⲆᐃ = [];
    this.ᐃᐃᐃⲆⵠⲆⲆᐃⲆ = function (b) {
      const d = c.Ⲇⵠⵠᐃⵠ.filter(a => a.gm === b);
      const f = {};
      for (let a = 0; d.length > a; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== undefined) {
          if (Lq === f[c]) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function g(d) {
        c.ΔⵠΔⲆᐃⲆᐃ[b] = d;
        const e = f[d];
        const g = e[Math.floor(Math.random() * e.length)];
        c.ΔΔⵠⵠΔᐃᐃ({
          domain: Ff,
          is_tls: 1,
          id: g.id,
          p: g.p
        });
      }
      if (c.ΔⵠΔⲆᐃⲆᐃ[b] !== Lq) {
        g(c.ΔⵠΔⲆᐃⲆᐃ[b]);
        return;
      }
      let a = 1;
      function h(b) {
        const c = new rg.XMLHttpRequest();
        const d = b[0];
        const e = d.p;
        const f = d.r;
        const i = e[Math.floor(Math.random() * e.length)];
        c.open("GET", "https://" + i + "." + Ff + "/", ss);
        c.onreadystatechange = function () {
          if (c.readyState === 4) {
            if (a === 0) {
              return;
            }
            a = 0;
            g(f);
          }
        };
        c.send();
      }
      for (let a in f) {
        h(f[a]);
      }
      rg.setTimeout(function () {
        if (a === 0) {
          return;
        }
        a = 0;
        const b = rg.Object.keys(f);
        g(b[Math.floor(b.length * Math.random())]);
      }, 5000);
    };
    this.ⵠΔⲆⲆΔΔⲆΔᐃ = function () {
      let a = qf.ⵠⵠΔⵠⵠᐃⵠ[c.ⲆⵠᐃΔΔ];
      console.log(undefined, Bj, w);
      let b = c.ⲆⵠⲆⵠΔⲆⵠ[c.ⲆⵠᐃΔΔ];
      let d = c.Ⲇⵠⵠᐃⵠ.find(c => c.gm == a && c.idx == b);
      if (d === undefined) {
        c.ᐃᐃᐃⲆⵠⲆⲆᐃⲆ(a);
      } else {
        c.ΔΔⵠⵠΔᐃᐃ({
          domain: Ff,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ΔΔⵠᐃΔⲆⵠ = function () {
      console.log(undefined);
      if (Dw !== undefined && _f !== undefined) {
        console.log(_h, Bj, undefined);
        c.ΔΔⵠⵠΔᐃᐃ({
          domain: Ff,
          is_tls: 1,
          id: _f + Dw,
          p: c.ⵠΔΔᐃⲆΔΔ[_f]
        });
        return;
      }
      if (Sf === fo) {
        c.ⵠΔⲆⲆΔΔⲆΔᐃ();
      } else {
        c.ΔΔⵠⵠΔᐃᐃ({
          domain: Sf.domain,
          is_tls: Sf.ssl,
          id: Sf.id,
          p: [Sf.p]
        });
      }
    };
    this.ΔΔⵠⵠΔᐃᐃ = function (b) {
      let d = b.domain;
      let e = b.is_tls;
      let f = b.id;
      let a = b.p;
      let g = a[Math.floor(Math.random() * a.length)];
      let i = e ? "wss://" + g + "." + d + "/" + f + "?" + nx.ⲆΔΔⲆⵠΔⲆ : "ws://" + d;
      console.log(al, undefined);
      c.ΔⲆΔⵠ = new rg.WebSocket(i);
      c.ΔⲆΔⵠ.binaryType = "arraybuffer";
      c.ΔⲆΔⵠ.ⵠⵠΔΔⵠ = c.ⵠⵠΔΔⵠ;
      c.ΔⲆΔⵠ.onmessage = function (a) {
        if (c.ⵠⵠΔΔⵠ == c.ⵠⵠΔΔⵠ) {
          if (typeof a.data == "string") {
            var b = JSON.parse(a.data);
            switch (b[0]) {
              case 0:
                c.ⲆᐃⲆⲆᐃ(b);
                break;
              case 1:
                c.ⲆᐃⲆᐃᐃᐃΔ(b[1]);
                break;
              case 2:
                c.ΔᐃⵠⲆⲆⲆᐃⵠΔ(b);
                break;
              case 3:
                c.ⲆΔᐃⵠᐃᐃᐃᐃᐃ(b);
                break;
              case 4:
                c.message(b[1]);
                break;
              case 5:
                c.ⲆⵠᐃΔⲆⵠⲆ(b);
                break;
              case 6:
                c.ᐃΔᐃⵠⵠⵠᐃ(b[1]);
            }
          } else {
            var d = function (b, c, d) {
              const f = new Uint8Array(b);
              const e = f.length;
              let g;
              let h = Wf[e];
              let i = fo;
              if (_h === h) {
                Lf += e * 2;
                if (Lf < 65535) {
                  g = de(yi(e));
                } else {
                  Lf = e;
                  for (let a = 0; a < Wf.length; a++) {
                    if (Wf[a] !== undefined) {
                      const b = Wf[a][0];
                      Wf[a] = undefined;
                      hj(b);
                    }
                  }
                  g = de(yi(e));
                  fe();
                }
                i = ok(g);
                Wf[e] = [g, i];
              } else {
                g = h[0];
                i = h[1];
              }
              for (let a = 0; f.length > a; a++) {
                i[a] = f[a];
              }
              Nj(g, c, d);
              for (let a = 0; f.length > a; a++) {
                f[a] = i[a];
              }
              return f;
            }(a.data, nx.ⲆⵠᐃⲆⲆⵠΔ, nx.ⵠΔᐃⵠᐃⲆⵠⵠⲆ);
            var e = d.buffer;
            switch (d[0]) {
              case 0:
                c.ⵠΔⲆ(e, d, Sl);
                break;
              case 1:
                c.ⵠΔⲆ(e, d, true);
                break;
              case 2:
                c.ΔΔᐃᐃⲆᐃⲆᐃⵠ();
                break;
              case 3:
                c.ᐃⵠⲆΔΔⲆΔ(new Uint16Array(e));
                break;
              case 4:
                c.ΔΔⵠⲆΔⵠᐃΔⵠ();
                break;
              case 5:
                c.ᐃᐃᐃᐃⲆⲆᐃΔᐃ();
                break;
              case 6:
                c.ⲆⵠⵠⲆⲆΔⵠⲆⵠ();
                break;
              case 7:
                c.ᐃⵠⵠΔⵠⲆⲆᐃⵠ(e);
                break;
              case 8:
                c.ΔΔᐃⵠⵠⲆᐃⲆᐃ(d[1]);
                break;
              case 9:
                c.ᐃᐃⲆⲆΔᐃⲆᐃΔ(d[1]);
                break;
              case 10:
                c.ⵠⲆᐃⲆᐃΔᐃ();
                break;
              case 11:
                c.ΔᐃⲆⲆᐃⵠⲆ(d[1], d[2]);
                break;
              case 12:
                c.ⵠⵠⵠⵠⲆ(d[1]);
                break;
              case 13:
                c.ⲆᐃⵠⲆᐃΔΔⲆⲆ(d, e);
                break;
              case 14:
                c.ᐃΔⵠⵠⵠΔⵠⲆⲆ();
                break;
              case 15:
                c.ⲆᐃⵠΔⲆⲆᐃⲆⵠ(d[1]);
                break;
              case 16:
                c.ΔⲆᐃΔ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                break;
              case 17:
                c.ⵠⲆΔⵠⵠΔⵠΔᐃ(e);
                break;
              case 18:
                c.ⲆᐃⵠⵠⵠⵠᐃΔΔ();
                break;
              case 19:
                c.ΔΔΔⵠⵠ(d[1]);
                break;
              case 20:
                c.ⲆⲆᐃⲆΔᐃⵠᐃⲆ();
                break;
              case 21:
                c.ΔᐃΔⲆ(e);
                break;
              case 22:
                c.ΔⵠᐃᐃΔΔᐃⵠⵠ(d[1]);
                break;
              case 23:
                c.ᐃⲆΔΔΔᐃⲆⵠᐃ(e);
                break;
              case 24:
                c.ᐃⲆⵠΔⲆᐃⵠⵠⲆ(d[1]);
                break;
              case 25:
                c.ⵠⵠΔᐃᐃⲆⵠΔⵠ(d[1], e);
                break;
              case 26:
                c.ⵠⲆΔⵠᐃ(d);
                break;
              case 27:
                c.ⲆΔΔⲆⵠΔⲆᐃᐃ();
                break;
              case 28:
                c.ⲆⵠΔΔⵠ(d[1]);
                break;
              case 29:
                c.ⵠΔΔᐃᐃᐃΔⲆΔ();
                break;
              case 30:
                c.ΔΔⲆᐃⲆᐃⲆΔᐃ();
                break;
              case 31:
                c.ⲆᐃⵠⵠⲆⵠᐃᐃⲆ(d);
                break;
              case 32:
                c.ᐃᐃᐃᐃΔᐃⵠᐃΔ(d[1]);
                break;
              case 33:
                c.ⵠⵠⲆⲆⵠΔⲆⲆⲆ(d[1]);
                break;
              case 34:
                c.ΔⵠᐃⲆᐃⵠΔⲆᐃ();
                break;
              case 35:
                c.ᐃᐃⲆΔᐃᐃΔⵠⲆ(d[1]);
                break;
              case 36:
                c.ⲆΔᐃᐃΔⵠᐃ(d[1]);
                break;
              case 37:
                c.ⵠⵠⲆΔⵠⵠⲆᐃΔ(d[1], d[2]);
                break;
              case 38:
                c.ⵠⲆⲆⲆⲆΔⵠΔⲆ(d[1]);
                break;
              case 39:
                c.ᐃⵠⵠⵠᐃΔⲆᐃⵠ(d[1]);
                break;
              case 40:
                c.ⵠΔΔⲆΔᐃΔΔⵠ();
                break;
              case 41:
                c.ⲆⲆΔΔᐃΔⵠⲆΔ(d);
                break;
              case 42:
                c.ⲆⲆⵠⲆΔᐃΔᐃᐃ(d[1]);
                break;
              case 43:
                c.ᐃⵠⲆᐃⲆᐃⲆⲆⲆ(d[1]);
                break;
              case 44:
                c.claimed(d[1]);
                break;
              case 45:
                c.ΔΔⵠⵠΔΔΔΔᐃ(d[1]);
                break;
              case 46:
                c.ᐃⵠΔᐃⵠⵠᐃⵠᐃ(d[1]);
                break;
              case 47:
                c.ΔⵠⲆᐃⲆ(d[1]);
                break;
              case 48:
                c.ⲆⲆᐃᐃΔΔⵠⵠΔ();
                break;
              case 50:
                c.ᐃΔⵠᐃΔᐃΔⵠⵠ(d[1], d[2], d[3]);
                break;
              case 51:
                c.ΔⲆⲆⵠΔⵠⲆⵠⵠ();
                break;
              case 52:
                c.ⲆᐃⵠᐃⵠⵠᐃⵠΔ(d[1]);
                break;
              case 53:
                c.ΔΔⵠⵠⲆⲆᐃⲆΔ(d[1]);
                break;
              case 54:
                c.ΔⲆΔΔⵠⲆΔⲆⵠ();
                break;
              case 55:
                c.ⵠΔᐃⲆⲆᐃᐃΔΔ(d[1]);
                break;
              case 56:
                c.ΔⲆⵠⲆⵠΔΔⲆⲆ(d[1]);
                break;
              case 57:
                c.ᐃⵠᐃᐃⲆⲆΔⲆᐃ();
                break;
              case 58:
                c.ΔᐃⲆΔΔᐃⲆᐃΔ();
                break;
              case 59:
                c.ⲆΔᐃⲆⲆⲆΔΔⵠ();
                break;
              case 60:
                c.ᐃⵠΔⲆⵠⵠᐃⵠΔ();
                break;
              case 61:
                nx.ᐃΔΔ.ΔⵠⵠⵠᐃΔⵠ = 0.2;
                nx.ᐃΔΔ.ᐃⲆΔⵠΔ = 3;
                break;
              case 62:
                c.ⲆⵠⵠᐃⲆᐃΔⲆᐃ(new Uint16Array(e));
                break;
              case 63:
                c.ⵠᐃᐃⵠⵠᐃⲆᐃⲆ();
                break;
              case 64:
                c.ⲆᐃΔᐃⲆΔΔᐃⲆ();
                break;
              case 65:
                c.ΔᐃᐃᐃΔⲆΔᐃᐃ();
                break;
              case 66:
                c.ΔⲆΔⵠΔᐃⵠⲆᐃ();
                break;
              case 67:
                c.ⵠᐃⲆΔⵠΔΔΔᐃ(d[1]);
                break;
              case 68:
                c.ᐃⲆⲆᐃΔΔΔⵠΔ(d[1]);
                break;
              case 69:
                c.ⵠⲆⵠⲆⲆΔΔ(d[1]);
                break;
              case 70:
                c.ΔⵠⲆⲆⵠΔⲆᐃⲆ(d[1]);
                break;
              case 71:
                c.ᐃⵠΔⲆᐃ(d[1]);
            }
          }
        }
      };
      c.ΔⲆΔⵠ.onerror = function () {
        if (nx.reconnect.enabled) {
          rg.setTimeout(c.timeout, 2500);
        }
      };
      this.ΔⲆΔⵠ.onopen = function () {
        clearTimeout(c.ⲆΔΔⲆⵠ);
        nx.ᐃᐃⲆⵠΔΔⵠ = nx.ᐃᐃⲆⵠΔΔⵠ || ⵠᐃⵠ.ΔΔⲆᐃⵠⵠⲆ("token");
        ⵠᐃⵠ.ⵠⵠΔᐃⲆⵠⲆ().then(a => {
          c.ΔⲆΔⵠ[Ef](uq[Sa].stringify([lx.ΔΔΔᐃᐃ.input.value, screen.width + 200, screen.height + 200, 52, nx.ΔᐃⲆⲆΔ, nx.ᐃΔᐃᐃᐃⵠᐃ, nx.reconnect.enabled ? 1 : 0, lx.ᐃⵠᐃΔ, lx.ΔΔⲆⲆΔ, lx.ⲆⵠⲆΔⵠ, lx.ⵠΔⲆΔⲆ, lx.ᐃΔᐃⵠᐃ, lx.Ⲇⵠᐃᐃⵠ, Jx === undefined ? 0 : Jx, Ix === zs ? 0 : Ix.substring(Ix.length - 50), If, nx.ᐃᐃⲆⵠΔΔⵠ, a, nx.ⲆΔᐃᐃⲆᐃᐃ, nx.ⲆΔⲆΔᐃΔΔ]));
          nx.ᐃᐃⲆⵠΔΔⵠ = w;
          nx.ⲆΔᐃᐃⲆᐃᐃ = undefined;
          nx.ⲆΔⲆΔᐃΔΔ = undefined;
          nx.ⲆΔΔⲆⵠΔⲆ = Ql;
          c.ⲆΔΔⲆⵠ = setTimeout(c.timeout, 2000);
        });
      };
    };
  }();
  var qx = {
    ⵠⲆᐃᐃᐃ: rr
  };
  var rx = new function () {
    this.ᐃΔⲆΔⵠ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ΔᐃⵠⵠⲆᐃᐃ = function (a) {
      return a / mx.w * 100;
    };
    this.ⲆΔⵠⵠᐃᐃᐃ = function (a) {
      return a / mx.ΔⲆⲆ * 100;
    };
    this.ⲆΔⵠΔⵠⲆⲆ = function (a, b) {
      a = this.ΔᐃⵠⵠⲆᐃᐃ(a) - this.ΔⲆᐃΔⲆ.x;
      return this.ΔⲆᐃΔⲆ.x + b * a;
    };
    this.ᐃⲆⲆΔᐃᐃⲆ = function (a, b) {
      a = Math.abs(this.ⲆΔⵠⵠᐃᐃᐃ(a) - this.ΔⲆᐃΔⲆ.y);
      return this.ΔⲆᐃΔⲆ.y + b * a;
    };
    this.sample = {};
    this.ⵠⵠᐃⲆᐃ = {};
    this.ⲆΔᐃᐃ = {};
    this.ⲆⵠⲆⵠⲆᐃΔ = function (b, c, d, e) {
      for (var f = 0; f < c.length; f++) {
        var g = c[f];
        if (!b.playing(g)) {
          b.pos(d, e, -0.5, g);
          b.play(g);
          return xr;
        }
      }
      return false;
    };
    this.ⵠΔΔ = function (a, b, c, d) {
      c = this.ⲆΔⵠΔⵠⲆⲆ(c, ⲆΔⵠⲆⲆ.ᐃΔᐃΔΔΔⲆ);
      d = this.ᐃⲆⲆΔᐃᐃⲆ(d, ⲆΔⵠⲆⲆ.ᐃΔᐃΔΔΔⲆ);
      console.log("HIT", a, b, c, d, ⲆΔⵠⲆⲆ.ᐃΔᐃΔΔΔⲆ);
      if (a) {
        if (b === 1) {
          this.ⲆⵠⲆⵠⲆᐃΔ(this.ⲆΔᐃᐃ.ᐃⵠΔⲆᐃΔᐃ, this.sample.ᐃⵠΔⲆᐃΔᐃ, c, d);
        } else if (b === 0) {
          this.ⲆⵠⲆⵠⲆᐃΔ(this.ⲆΔᐃᐃ.ⵠΔΔⲆᐃᐃΔ, this.sample.ⵠΔΔⲆᐃᐃΔ, c, d);
        }
      } else {
        this.ⲆⵠⲆⵠⲆᐃΔ(this.ⲆΔᐃᐃ.ᐃΔΔⵠⵠ, this.sample.ᐃΔΔⵠⵠ, c, d);
      }
    };
    this.ΔⲆᐃΔⲆ = {
      x: 0,
      y: 0
    };
    this.ⲆⵠⲆᐃⲆΔⵠ = {
      y: 0,
      x: 0
    };
    this.ΔⵠⲆⲆΔ = {};
    this.ᐃᐃΔΔ = [];
    this.ᐃⲆⲆᐃⲆ = function (a, b) {
      for (var c in this.ΔⵠⲆⲆΔ) {
        var d = this.ΔⵠⲆⲆΔ[c];
        d.check(a);
        if (d.ᐃⵠΔΔᐃⲆᐃ) {
          if (mx.ᐃⲆΔⲆΔ.now < 460000) {
            d.ᐃⵠΔᐃⵠ();
          }
          if (b) {
            d.ⵠⲆⲆ(a, this.ΔⲆᐃΔⲆ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ⵠⲆᐃⵠΔⵠΔⵠⲆ = function () {
      var a = [];
      for (var b = 0; b < this.ᐃᐃΔΔ.length; b++) {
        if ((e = this.ᐃᐃΔΔ[b]).ⲆᐃⲆᐃⵠⲆΔ) {
          a.push(b);
        } else if (!e.ⲆᐃⲆᐃⵠⲆΔ && !mx.ΔⵠᐃΔⲆ[e.ᐃΔⲆᐃ]) {
          e.ⲆⲆΔΔⲆⵠⵠ();
          a.push(b);
        }
      }
      var c = mx.ⵠΔⲆ[0];
      var d = 0;
      for (b = 0; c.length > b && a.length > d; b++) {
        var e = c[b];
        if ((mx.mode != 1 || mx.ᐃᐃΔΔ[e.id].ΔΔΔᐃᐃ !== "spectator") && e.ⲆᐃⲆⵠΔ === -1 && e.ᐃΔⲆᐃ !== nx.ᐃΔⲆᐃ) {
          this.ᐃᐃΔΔ[a[d]].ⲆΔⲆⲆⵠ(e.ᐃΔⲆᐃ);
          d++;
        }
      }
    };
    this.ⵠᐃⲆᐃΔΔΔⵠΔ = function () {
      this.ⵠⲆᐃⵠΔⵠΔⵠⲆ();
      for (var a = 0; a < this.ᐃᐃΔΔ.length; a++) {
        var b = this.ᐃᐃΔΔ[a];
        if (!b.ⲆᐃⲆᐃⵠⲆΔ && b.check()) {
          b.ⵠⲆⲆ();
        }
      }
    };
    this.ⲆⲆⵠⲆⵠⲆⵠΔΔ = function (a) {
      if (this.ⲆⵠⲆᐃⲆΔⵠ.x === a.x && this.ⲆⵠⲆᐃⲆΔⵠ.y === a.y) {
        return 0;
      } else {
        this.ⲆⵠⲆᐃⲆΔⵠ.x = a.x;
        this.ⲆⵠⲆᐃⲆΔⵠ.y = a.y;
        this.ΔⲆᐃΔⲆ.x = this.ΔᐃⵠⵠⲆᐃᐃ(a.x);
        this.ΔⲆᐃΔⲆ.y = this.ⲆΔⵠⵠᐃᐃᐃ(a.y);
        Howler.pos(this.ΔⲆᐃΔⲆ.x, this.ΔⲆᐃΔⲆ.y, 0);
        return 1;
      }
    };
    this.ΔⵠΔⲆΔΔᐃΔⵠ = function () {
      if (this.ᐃΔⲆΔⵠ && this.loaded) {
        var a = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
        if (a) {
          a.ⲆᐃⲆⵠΔ = 0;
          var b = this.ⲆⲆⵠⲆⵠⲆⵠΔΔ(a);
          if (mx.mode !== 2 && mx.mode !== 4 && mx.mode !== 5) {
            this.ᐃⲆⲆᐃⲆ(a, b);
          }
          this.ⵠᐃⲆᐃΔΔΔⵠΔ();
        }
      }
    };
    this.ᐃᐃᐃⲆⵠⵠⵠᐃⲆ = function () {
      for (var b in dx) {
        var c = dx[b];
        if (typeof c === "object" && c.path) {
          c.ΔᐃᐃⵠⲆ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.ⵠⵠ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(undefined);
          for (var h = 0; h < f; h++) {
            var j = c.ΔᐃᐃⵠⲆ.play(d);
            c.ΔᐃᐃⵠⲆ.stop(j);
            c.ΔᐃᐃⵠⲆ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(undefined, Ql);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            rx.sample[d] = g;
          } else {
            rx.sample[d] = g[0];
          }
          rx.ⲆΔᐃᐃ[d] = c.ΔᐃᐃⵠⲆ;
        }
      }
    };
    this.ΔⵠΔΔᐃⲆⲆ = function (a, b, c) {
      for (var d = 0; a.length > d; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ⵠΔⵠⵠⲆΔΔ = function (b, c, d, e, f, g) {
      var a = b;
      for (var i = 0; d > i; i++) {
        var j = a[i] = [];
        for (ⵠⵠΔⵠ = 0; e > ⵠⵠΔⵠ; ⵠⵠΔⵠ++) {
          j[ⵠⵠΔⵠ] = rx.sample[f + ⵠⵠΔⵠ][i];
          c.ΔᐃᐃⵠⲆ.volume(g, j[ⵠⵠΔⵠ]);
        }
      }
    };
    this.ⲆΔⲆⲆⵠ = function () {
      rx.ᐃᐃᐃⲆⵠⵠⵠᐃⲆ();
      rx.ⵠⵠᐃⲆᐃ.ⵠⲆΔΔᐃⵠΔ = [];
      rx.ⵠⵠᐃⲆᐃ.ᐃⲆⲆᐃᐃ = [];
      rx.ⵠⵠᐃⲆᐃ.ⲆⲆᐃⲆⲆ = [];
      rx.ⵠΔⵠⵠⲆΔΔ(rx.ⵠⵠᐃⲆᐃ.ⵠⲆΔΔᐃⵠΔ, dx.ᐃⲆⲆᐃΔⲆΔ, 8, 3, "p", 0.15);
      rx.ⵠΔⵠⵠⲆΔΔ(rx.ⵠⵠᐃⲆᐃ.ᐃⲆⲆᐃᐃ, dx.ᐃᐃΔᐃᐃΔⵠ, 8, 4, "w", 0.15);
      rx.ⵠΔⵠⵠⲆΔΔ(rx.ⵠⵠᐃⲆᐃ.ⲆⲆᐃⲆⲆ, dx.ⵠᐃᐃᐃᐃΔᐃ, 8, 3, "d", 0.09);
      rx.ΔⵠΔΔᐃⲆⲆ(rx.sample.ᐃΔΔⵠⵠ, rx.ⲆΔᐃᐃ.ᐃΔΔⵠⵠ, 0.15);
      rx.ΔⵠΔΔᐃⲆⲆ(rx.sample.ⵠΔΔⲆᐃᐃΔ, rx.ⲆΔᐃᐃ.ⵠΔΔⲆᐃᐃΔ, 0.2);
      rx.ΔⵠΔΔᐃⲆⲆ(rx.sample.ᐃⵠΔⲆᐃΔᐃ, rx.ⲆΔᐃᐃ.ᐃⵠΔⲆᐃΔᐃ, 1);
      rx.ΔⵠⲆⲆΔ.ΔⲆΔᐃⵠΔΔΔΔ = new ex(12, this.sample.ᐃⲆⵠᐃⲆᐃΔ, this.sample.ΔᐃᐃⵠΔᐃΔ, 5000, 0.05, 0.4, dx.ⲆⵠⵠⲆⲆⵠⵠ.ΔᐃᐃⵠⲆ, 3000, {
        x: Cr.ⵠⲆΔⵠᐃⵠⵠ,
        y: Cr.ⵠⵠΔⲆⲆΔⲆ,
        w: mx.w,
        ΔⲆⲆ: mx.ΔⲆⲆ
      }, {
        x: Cr.ⵠⲆΔⵠᐃⵠⵠ - 2300,
        y: Cr.ⵠⵠΔⲆⲆΔⲆ - 4000,
        w: mx.w,
        ΔⲆⲆ: mx.ΔⲆⲆ
      }, {
        x: Cr.ⵠⲆΔⵠᐃⵠⵠ - 1500,
        y: Cr.ⵠⵠΔⲆⲆΔⲆ - 2000,
        w: mx.w,
        ΔⲆⲆ: mx.ΔⲆⲆ
      });
      rx.ΔⵠⲆⲆΔ.ᐃⵠᐃᐃΔΔⵠⲆΔ = new ex(12, this.sample.ᐃᐃⲆᐃΔⲆᐃ, this.sample.ᐃⵠᐃⲆΔⵠⵠ, 5000, 0.03, 0.25, dx.ⲆⵠⵠⲆⲆⵠⵠ.ΔᐃᐃⵠⲆ, 3000, {
        x: 0,
        y: Cr.ⵠⵠΔⲆⲆΔⲆ + 800,
        w: Cr.ⵠⲆΔⵠᐃⵠⵠ - 2300,
        ΔⲆⲆ: mx.ΔⲆⲆ
      }, {
        x: -100,
        y: Cr.ⵠⵠΔⲆⲆΔⲆ - 300,
        w: Cr.ⵠⲆΔⵠᐃⵠⵠ - 100,
        ΔⲆⲆ: mx.ΔⲆⲆ
      }, {
        x: -100,
        y: Cr.ⵠⵠΔⲆⲆΔⲆ + 400,
        w: Cr.ⵠⲆΔⵠᐃⵠⵠ - 1400,
        ΔⲆⲆ: mx.ΔⲆⲆ
      });
      rx.ΔⵠⲆⲆΔ.ⲆᐃᐃᐃΔⲆᐃ = new ex(12, this.sample.ⲆⲆⵠΔΔⵠᐃ, this.sample.ⲆᐃᐃᐃΔΔᐃ, 5000, 0.01, 0.22, dx.ⲆⵠⵠⲆⲆⵠⵠ.ΔᐃᐃⵠⲆ, 3000, {
        x: -100,
        y: -100,
        w: mx.w + 200,
        ΔⲆⲆ: Cr.ⵠⵠΔⲆⲆΔⲆ - 1000
      }, {
        x: -100,
        y: -100,
        w: mx.w + 200,
        ΔⲆⲆ: Cr.ⵠⵠΔⲆⲆΔⲆ + 600
      }, {
        x: -100,
        y: -100,
        w: mx.w + 200,
        ΔⲆⲆ: Cr.ⵠⵠΔⲆⲆΔⲆ + 100
      });
      for (var a = 0; a < 8; a++) {
        rx.ᐃᐃΔΔ[a] = new hx(a);
      }
      rx.ᐃᐃΔΔ[0].ⲆΔⲆⲆⵠ(nx.ᐃΔⲆᐃ);
      rx.loaded = 1;
    };
    this.ᐃⵠΔⵠⵠΔᐃΔᐃ = function () {
      if (!this.transition && mx.ᐃⲆΔⲆΔ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ᐃⲆⵠⵠᐃ = function () {
      if (this.ᐃΔⲆΔⵠ && this.loaded) {
        for (var a in rx.sample) {
          var b = rx.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              rx.ⲆΔᐃᐃ[a].stop(b[c]);
            }
          } else {
            rx.ⲆΔᐃᐃ[a].stop(b);
          }
        }
        for (c = 0; rx.ᐃᐃΔΔ.length > c; c++) {
          rx.ᐃᐃΔΔ[c].ⲆⲆΔΔⲆⵠⵠ();
        }
      }
    };
    this.select = function () {
      if (rx.ᐃΔⲆΔⵠ) {
        rx.ᐃⲆⵠⵠᐃ();
      } else {
        if (!rx.loaded) {
          rx.ⲆΔⲆⲆⵠ();
        }
        rx.ᐃᐃΔΔ[0].ᐃΔⲆᐃ = nx.ᐃΔⲆᐃ;
        rx.ᐃᐃΔΔ[0].ⲆᐃⲆᐃⵠⲆΔ = 0;
        rx.ᐃⵠΔⵠⵠΔᐃΔᐃ();
      }
      rx.ᐃΔⲆΔⵠ = !rx.ᐃΔⲆΔⵠ;
    };
  }();
  var sx = new function () {
    this.ᐃᐃᐃⵠᐃⲆⲆ = function () {
      this.ⲆᐃᐃΔΔ = 81;
      this.ⵠⵠⲆΔⵠ = 68;
      this.ⵠᐃᐃⵠᐃ = 90;
      this.ⲆⵠᐃΔⵠΔⲆ = 83;
    };
    this.ⵠΔⵠⵠⲆⵠⵠ = function () {
      this.ⲆᐃᐃΔΔ = 65;
      this.ⵠⵠⲆΔⵠ = 68;
      this.ⵠᐃᐃⵠᐃ = 87;
      this.ᐃᐃⵠⵠⲆ = 83;
    };
    this.ⲆΔⲆⲆᐃ = 0;
    this.ⲆⵠᐃΔⵠΔⲆ = 1;
    this.ΔᐃⲆᐃⲆⲆⲆ = 49;
    this.ⵠⵠᐃⲆⵠᐃΔ = 50;
    this.ΔⲆⲆΔΔΔⵠ = 51;
    this.ΔⵠᐃⵠΔⵠⵠ = 52;
    this.ᐃⲆΔⵠΔΔⵠΔΔ = 53;
    this.ᐃⲆΔⵠᐃΔΔ = 17;
    this.ΔΔⲆΔⲆⵠᐃ = 37;
    this.ᐃᐃⵠΔⲆΔᐃ = 39;
    this.ⲆᐃⵠΔⲆΔᐃ = 38;
    this.ᐃᐃΔᐃⲆⲆᐃ = 40;
    this.ᐃⲆΔⵠΔⲆΔ = 32;
    this.ⲆᐃΔᐃΔⲆⵠ = 82;
    this.ⵠᐃᐃⵠⵠⵠΔ = 71;
    this.ΔΔⵠᐃᐃⲆΔ = 86;
    this.ⵠΔᐃΔⵠⵠᐃ = 66;
    this.ⵠΔⵠⵠⲆⵠⵠ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ⲆΔⲆⲆᐃ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ⲆΔⲆⲆᐃ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (b == this.ⲆᐃᐃΔΔ || b == this.ΔΔⲆΔⲆⵠᐃ) {
        this.ᐃⵠⵠⵠⵠΔⲆ();
      } else if (b == this.ⵠᐃᐃⵠᐃ || b == this.ⲆᐃⵠΔⲆΔᐃ) {
        this.ᐃΔΔΔᐃᐃⵠ();
      } else if (b == this.ⲆⵠᐃΔⵠΔⲆ || this.ᐃΔΔᐃΔᐃᐃᐃⲆ == b) {
        this.ᐃⵠⵠᐃⲆⵠⲆ();
      } else if (b == this.ⵠⵠⲆΔⵠ || b == this.ᐃᐃⵠΔⲆΔᐃ) {
        this.ΔⲆⲆᐃᐃᐃᐃ();
      }
      this.keys[b] = this.ⲆⵠᐃΔⵠΔⲆ;
      return b;
    };
    this.ᐃⵠⵠⵠⵠΔⲆ = function () {
      this.keys[this.ⵠⵠⲆΔⵠ] = this.ⲆΔⲆⲆᐃ;
      this.keys[this.ᐃᐃⵠΔⲆΔᐃ] = this.ⲆΔⲆⲆᐃ;
    };
    this.ΔⲆⲆᐃᐃᐃᐃ = function () {
      this.keys[this.ⲆᐃᐃΔΔ] = this.ⲆΔⲆⲆᐃ;
      this.keys[this.ΔΔⲆΔⲆⵠᐃ] = this.ⲆΔⲆⲆᐃ;
    };
    this.ᐃⵠⵠᐃⲆⵠⲆ = function () {
      this.keys[this.ⵠᐃᐃⵠᐃ] = this.ⲆΔⲆⲆᐃ;
      this.keys[this.ⲆᐃⵠΔⲆΔᐃ] = this.ⲆΔⲆⲆᐃ;
    };
    this.ᐃΔΔΔᐃᐃⵠ = function () {
      this.keys[this.ᐃᐃⵠⵠⲆ] = this.ⲆΔⲆⲆᐃ;
      this.keys[this.ᐃᐃΔᐃⲆⲆᐃ] = this.ⲆΔⲆⲆᐃ;
    };
    this.ΔⵠᐃΔⲆⵠᐃ = function () {
      this.keys[this.ⵠⵠⲆΔⵠ] = this.ⲆΔⲆⲆᐃ;
      this.keys[this.ᐃᐃⵠΔⲆΔᐃ] = this.ⲆΔⲆⲆᐃ;
      this.keys[this.ⲆᐃᐃΔΔ] = this.ⲆΔⲆⲆᐃ;
      this.keys[this.ΔΔⲆΔⲆⵠᐃ] = this.ⲆΔⲆⲆᐃ;
      this.keys[this.ⵠᐃᐃⵠᐃ] = this.ⲆΔⲆⲆᐃ;
      this.keys[this.ⲆᐃⵠΔⲆΔᐃ] = this.ⲆΔⲆⲆᐃ;
      this.keys[this.ᐃᐃⵠⵠⲆ] = this.ⲆΔⲆⲆᐃ;
      this.keys[this.ᐃᐃΔᐃⲆⲆᐃ] = this.ⲆΔⲆⲆᐃ;
    };
    this.ΔⵠⲆᐃΔⵠΔ = function () {
      return this.keys[this.ⲆᐃᐃΔΔ] || this.keys[this.ΔΔⲆΔⲆⵠᐃ];
    };
    this.ΔⲆΔΔᐃⵠΔ = function () {
      return this.keys[this.ⵠⵠⲆΔⵠ] || this.keys[this.ᐃᐃⵠΔⲆΔᐃ];
    };
    this.ΔⵠⲆᐃⵠⲆᐃ = function () {
      return this.keys[this.ⵠᐃᐃⵠᐃ] || this.keys[this.ⲆᐃⵠΔⲆΔᐃ];
    };
    this.ᐃᐃⲆⲆᐃΔⵠ = function () {
      return this.keys[this.ᐃᐃⵠⵠⲆ] || this.keys[this.ᐃᐃΔᐃⲆⲆᐃ];
    };
    this.ⵠᐃⵠᐃⵠⵠᐃⲆⲆ = function () {
      return this.keys[this.ᐃⲆΔⵠᐃΔΔ];
    };
    this.ⵠⵠⵠⲆᐃⲆⲆⲆⲆ = function () {
      return this.keys[this.ΔᐃⲆᐃⲆⲆⲆ];
    };
    this.ᐃᐃⲆⵠΔᐃΔⲆⲆ = function () {
      return this.keys[this.ⵠⵠᐃⲆⵠᐃΔ];
    };
    this.ⵠⲆⵠⲆᐃⵠⲆΔⲆ = function () {
      return this.keys[this.ΔⲆⲆΔΔΔⵠ];
    };
    this.ᐃⵠⵠΔΔᐃⲆΔΔ = function () {
      return this.keys[this.ΔⵠᐃⵠΔⵠⵠ];
    };
    this.ⵠⲆᐃⲆᐃⵠΔΔΔ = function () {
      return this.keys[this.ᐃⲆΔⵠΔⲆΔ];
    };
    this.ΔΔⵠⵠⵠⲆⲆᐃⲆ = function () {
      return this.keys[this.ⲆᐃΔᐃΔⲆⵠ];
    };
    this.ΔᐃᐃᐃⵠⵠΔⲆΔ = function () {
      return this.keys[this.ⵠᐃᐃⵠⵠⵠΔ];
    };
    this.ⲆⲆⵠⲆⵠⵠᐃᐃᐃ = function () {
      return this.keys[this.ΔΔⵠᐃᐃⲆΔ];
    };
    this.ᐃΔΔᐃⲆΔΔⲆⲆ = function () {
      return this.keys[this.ⵠΔᐃΔⵠⵠᐃ];
    };
  }();
  var tx = new function () {
    this.ⲆⵠᐃΔⵠΔⲆ = 0;
    this.ⲆΔⲆⲆᐃ = 1;
    this.IDLE = 2;
    this.ⵠΔΔⲆⲆⲆΔ = 0;
    this.ⵠΔⵠⵠⵠᐃⲆⲆⵠ = 1;
    this.ⲆⵠΔᐃ = {
      x: 0,
      y: 0
    };
    this.ⲆⲆᐃⵠΔΔᐃ = 0;
    this.ᐃⵠᐃⲆᐃⲆⲆ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.Ⲇᐃⵠᐃ = this.ⵠΔΔⲆⲆⲆΔ;
    this.down = function () {
      this.state = this.ⲆⵠᐃΔⵠΔⲆ;
    };
    this.up = function () {
      this.state = this.ⲆΔⲆⲆᐃ;
    };
    this.ⵠⲆⲆ = function () {
      return (this.ⲆⲆᐃⵠΔΔᐃ != this.ⲆⵠΔᐃ.x || this.ⲆⵠΔᐃ.y != this.ᐃⵠᐃⲆᐃⲆⲆ) && (this.ⲆⲆᐃⵠΔΔᐃ = this.ⲆⵠΔᐃ.x, this.ᐃⵠᐃⲆᐃⲆⲆ = this.ⲆⵠΔᐃ.y, true);
    };
  }();
  var ux = 0;
  var vx = 0;
  var wx = new function (f, e, i) {
    this.ⵠⲆ = f;
    this.Ⲇ = e;
    this.ⲆᐃΔⲆΔⵠᐃ = {
      translate: {
        y: 0,
        x: 0
      },
      style: document.getElementById("loading").style,
      ⵠⲆⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆᐃΔⲆΔⵠᐃ.style.position = "absolute";
    this.ⲆᐃΔⲆΔⵠᐃ.style.display = "inline-block";
    this.ⲆᐃΔⲆΔⵠᐃ.ⵠⲆⲆ();
    this.ⵠⲆᐃᐃᐃ = ma;
    this.stop = function () {
      this.ⵠⲆᐃᐃᐃ = mj;
    };
    this.ᐃΔⲆᐃⲆⵠᐃ = {
      total: 1
    };
    var j = this;
    function k() { }
    var n = 0;
    function o(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ⲆⲆΔᐃⲆ = function () {
      j.ⵠⲆⲆ();
      if (++n == 40) {
        j.stop();
        k();
        return;
      }
      rg.setTimeout(j.ⲆⲆΔᐃⲆ, 33);
    };
    this.ᐃⲆⵠⵠᐃ = function (a) {
      k = a;
      j.ⲆⲆΔᐃⲆ();
    };
    new Date().getTime();
    Object.keys(ᐃᐃ).length;
    console.log(jt, undefined);
    for (var q in ᐃᐃ) {
      if (o(ᐃᐃ[q]) === 0) {
        0;
      }
    }
    console.log(undefined, zs);
    function s() {
      if (this.ⲆⲆⲆⵠᐃⵠΔ !== 0) {
        return this.ⲆⲆⲆⵠᐃⵠΔ;
      } else {
        this.ⲆⲆⲆⵠᐃⵠΔ = 2;
        this.src = this.Δᐃᐃᐃᐃ;
        return 0;
      }
    }
    function g(a) {
      this.ⲆⲆⲆⵠᐃⵠΔ = 1;
    }
    var l = 0;
    function t() {
      console.log(undefined);
      if (l !== 1) {
        l = 1;
        console.log(Uj);
        if (Wb !== ut) {
          ut();
        }
        Wb();
        var a = ⵠᐃⵠ.ΔΔⲆᐃⵠⵠⲆ("server");
        if (a !== null) {
          px.ᐃⲆᐃΔⵠᐃⲆ = 1;
          px.Ⲇⵠⵠᐃⵠ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: a,
            ssl: 1
          }];
        }
        px.ᐃΔⲆᐃΔⲆΔⲆⲆ();
        setTimeout(i, 100);
      }
    }
    function d() {
      let a = function () {
        px.ⵠΔᐃⲆⲆΔᐃ(t);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(d, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function m() {
      this.ᐃΔΔⲆᐃΔᐃ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ᐃΔΔⲆᐃΔᐃ}`, this);
      if (this.ᐃΔΔⲆᐃΔᐃ > 3) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ᐃΔΔⲆᐃΔᐃ;
      var b = this.src;
      var c = o(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ⵠⵠᐃⵠⵠⲆᐃ) {
          if (b.indexOf(ⵠⵠᐃⵠⵠⲆᐃ[c]) !== -1) {
            ᐃᐃ[c] = new Image();
            ᐃᐃ[c].onload = g;
            ᐃᐃ[c].onerror = m;
            ᐃᐃ[c].ᐃΔΔⲆᐃΔᐃ = a;
            ᐃᐃ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function c(a) {
      for (var b in ᐃᐃ) {
        var c = ᐃᐃ[b];
        if (typeof c === "string" && o(c) === a) {
          ᐃᐃ[b] = new Image();
          ᐃᐃ[b].ⲆⲆⲆⵠᐃⵠΔ = 0;
          ᐃᐃ[b].ᐃΔΔⲆᐃΔᐃ = 0;
          ᐃᐃ[b].onload = g;
          ᐃᐃ[b].onerror = m;
          ᐃᐃ[b].ᐃⲆᐃᐃⲆΔⲆ = s;
          ᐃᐃ[b].Δᐃᐃᐃᐃ = c;
        }
      }
    }
    c(1);
    c(0);
    gu(1, "l", 20, "#000");
    d();
    Sp();
    this.ⵠⲆⲆ = function () {
      this.ⲆᐃΔⲆΔⵠᐃ.translate.x = (Yn - 500) / 2;
      this.ⲆᐃΔⲆΔⵠᐃ.translate.y = (_n - 150) / 2;
      var a = 2500 / (40 - n + 1) - 48;
      this.ⲆᐃΔⲆΔⵠᐃ.translate.y -= a;
      this.ⲆᐃΔⲆΔⵠᐃ.ⵠⲆⲆ();
    };
    this.ⲆᐃΔⲆΔⵠᐃ.ⵠⲆⲆ();
    this.ΔⵠᐃⲆ = function () {
      try {
        Ip();
      } catch (a) { }
      this.ⵠⲆⲆ();
    };
  }(Vn, Xn, function () {
    Qp();
    qx = new Tw(Vn, Xn);
    (lx = new Xw(Vn, Xn)).ⵠⲆⲆⵠᐃⵠⵠᐃᐃ();
    ox = new Vw(Vn, Xn);
    mx = new Vf();
    nx = new Nw();
    wx.ᐃⲆⵠⵠᐃ(function () {
      wx.ⲆᐃΔⲆΔⵠᐃ.style.display = "none";
      lx.ᐃΔⲆΔⵠ();
    });
  });
  function xx() {
    try {
      rg.Widget.adsRefresh();
    } catch (a) { }
  }
  rg.onbeforeunload = function () {
    if (qx.ⵠⲆᐃᐃᐃ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  Mq();
  (function b(a) {
    rg.requestAnimationFrame(b);
    vx = (a - ux) / 1000;
    ux = a;
    vx = vx > 1 ? 1 : vx;
    if (qx.ⵠⲆᐃᐃᐃ) {
      qx.ΔⵠᐃⲆ();
    } else {
      Xn.clearRect(0, 0, Yn, _n);
      if (wx.ⵠⲆᐃᐃᐃ) {
        wx.ΔⵠᐃⲆ();
      } else if (lx.ⵠⲆᐃᐃᐃ) {
        lx.ΔⵠᐃⲆ();
      } else if (ox.ⵠⲆᐃᐃᐃ) {
        ox.ΔⵠᐃⲆ();
      }
    }
  })(0);
  const workerTimersSetInterval = (() => { var R = Object.create; var g = Object.defineProperty; var U = Object.getOwnPropertyDescriptor; var A = Object.getOwnPropertyNames; var q = Object.getPrototypeOf, x = Object.prototype.hasOwnProperty; var k = (t, r) => () => (r || t((r = { exports: {} }).exports, r), r.exports); var F = (t, r, i, a) => { if (r && typeof r == "object" || typeof r == "function") for (let s of A(r)) !x.call(t, s) && s !== i && g(t, s, { get: () => r[s], enumerable: !(a = U(r, s)) || a.enumerable }); return t }; var L = (t, r, i) => (i = t != null ? R(q(t)) : {}, F(r || !t || !t.__esModule ? g(i, "default", { value: t, enumerable: !0 }) : i, t)); var E = k((f, y) => { (function (t, r) { typeof f == "object" && typeof y < "u" ? r(f) : typeof define == "function" && define.amd ? define(["exports"], r) : (t = typeof globalThis < "u" ? globalThis : t || self, r(t.fastUniqueNumbers = {})) })(f, function (t) { "use strict"; var r = function (e) { return function (u) { var m = e(u); return u.add(m), m } }, i = function (e) { return function (u, m) { return e.set(u, m), m } }, a = Number.MAX_SAFE_INTEGER === void 0 ? 9007199254740991 : Number.MAX_SAFE_INTEGER, s = 536870912, l = s * 2, w = function (e, u) { return function (m) { var h = u.get(m), c = h === void 0 ? m.size : h < l ? h + 1 : 0; if (!m.has(c)) return e(m, c); if (m.size < s) { for (; m.has(c);)c = Math.floor(Math.random() * l); return e(m, c) } if (m.size > a) throw new Error("Congratulations, you created a collection of unique numbers which uses all available integers!"); for (; m.has(c);)c = Math.floor(Math.random() * a); return e(m, c) } }, T = new WeakMap, v = i(T), o = w(v, T), n = r(o); t.addUniqueNumber = n, t.generateUniqueNumber = o }) }); var p = L(E()); var b = t => t.method !== void 0 && t.method === "call"; var M = t => typeof t.id == "number" && typeof t.result == "boolean"; var N = t => { let r = new Map([[0, () => { }]]), i = new Map([[0, () => { }]]), a = new Map, s = new Worker(t); return s.addEventListener("message", ({ data: o }) => { if (b(o)) { let { params: { timerId: n, timerType: d } } = o; if (d === "interval") { let e = r.get(n); if (typeof e === void 0) throw new Error("The timer is in an undefined state."); if (typeof e == "number") { let u = a.get(e); if (u === void 0 || u.timerId !== n || u.timerType !== d) throw new Error("The timer is in an undefined state.") } else typeof e == "function" && e() } else if (d === "timeout") { let e = i.get(n); if (typeof e === void 0) throw new Error("The timer is in an undefined state."); if (typeof e == "number") { let u = a.get(e); if (u === void 0 || u.timerId !== n || u.timerType !== d) throw new Error("The timer is in an undefined state.") } else typeof e == "function" && (e(), i.delete(n)) } } else if (M(o)) { let { id: n } = o, d = a.get(n); if (d === void 0) throw new Error("The timer is in an undefined state."); let { timerId: e, timerType: u } = d; a.delete(n), u === "interval" ? r.delete(e) : i.delete(e) } else { let { error: { message: n } } = o; throw new Error(n) } }), { clearInterval: o => { if (typeof r.get(o) == "function") { let n = (0, p.generateUniqueNumber)(a); a.set(n, { timerId: o, timerType: "interval" }), r.set(o, n), s.postMessage({ id: n, method: "clear", params: { timerId: o, timerType: "interval" } }) } }, clearTimeout: o => { if (typeof i.get(o) == "function") { let n = (0, p.generateUniqueNumber)(a); a.set(n, { timerId: o, timerType: "timeout" }), i.set(o, n), s.postMessage({ id: n, method: "clear", params: { timerId: o, timerType: "timeout" } }) } }, setInterval: (o, n = 0, ...d) => { let e = (0, p.generateUniqueNumber)(r); return r.set(e, () => { o(...d), typeof r.get(e) == "function" && s.postMessage({ id: null, method: "set", params: { delay: n, now: performance.timeOrigin + performance.now(), timerId: e, timerType: "interval" } }) }), s.postMessage({ id: null, method: "set", params: { delay: n, now: performance.timeOrigin + performance.now(), timerId: e, timerType: "interval" } }), e }, setTimeout: (o, n = 0, ...d) => { let e = (0, p.generateUniqueNumber)(i); return i.set(e, () => o(...d)), s.postMessage({ id: null, method: "set", params: { delay: n, now: performance.timeOrigin + performance.now(), timerId: e, timerType: "timeout" } }), e } } }; var I = (t, r) => { let i = null; return () => { if (i !== null) return i; let a = new Blob([r], { type: "application/javascript; charset=utf-8" }), s = URL.createObjectURL(a); return i = t(s), setTimeout(() => URL.revokeObjectURL(s)), i } }; var _ = `(()=>{"use strict";const e=new Map,t=new Map,r=t=>{const r=e.get(t);return void 0!==r&&(clearTimeout(r),e.delete(t),!0)},s=e=>{const r=t.get(e);return void 0!==r&&(clearTimeout(r),t.delete(e),!0)},o=(e,t)=>{const r=performance.now(),s=e+t-r-performance.timeOrigin;return{expected:r+s,remainingDelay:s}},i=(e,t,r,s)=>{const o=r-performance.now();o>0?e.set(t,setTimeout(i,o,e,t,r,s)):(e.delete(t),postMessage({id:null,method:"call",params:{timerId:t,timerType:s}}))};addEventListener("message",(n=>{let{data:a}=n;try{if("clear"===a.method){const{id:e,params:{timerId:t,timerType:o}}=a;if("interval"===o)postMessage({id:e,result:r(t)});else{if("timeout"!==o)throw new Error('The given type "'.concat(o,'" is not supported'));postMessage({id:e,result:s(t)})}}else{if("set"!==a.method)throw new Error('The given method "'.concat(a.method,'" is not supported'));{const{params:{delay:r,now:s,timerId:n,timerType:m}}=a;if("interval"===m)((t,r,s)=>{const{expected:n,remainingDelay:a}=o(t,s);e.set(r,setTimeout(i,a,e,r,n,"interval"))})(r,n,s);else{if("timeout"!==m)throw new Error('The given type "'.concat(m,'" is not supported'));((e,r,s)=>{const{expected:n,remainingDelay:a}=o(e,s);t.set(r,setTimeout(i,a,t,r,n,"timeout"))})(r,n,s)}}}}catch(e){postMessage({error:{message:e.message},id:a.id,result:null})}}))})();`; var W = I(N, _); var O = (...t) => W().setInterval(...t); return O; })();
  workerTimersSetInterval(function () {
    try {
      if (!nx.reconnect.enabled && nx.ΔⵠΔⵠⲆ) {
        nx.ΔⵠⲆΔᐃ.ⵠⲆⲆ()
      }
    } catch { }
  }, 2e3);
  workerTimersSetInterval(function () {
    try {
      if (!nx.reconnect.enabled && nx.ΔⵠΔⵠⲆ) {
        px.ping()
      }
    } catch { }
  }, 1000 * 60);
  workerTimersSetInterval(function () {
    try {
      if (!nx.reconnect.enabled && nx.ΔⵠΔⵠⲆ) {
        var a = "";
        for (let i = 0; i < 70; i++) {
          if (Math.random() > 0.5) {
            a += "O"
          } else {
            a += "o"
          }
        }
        var b = mx.ΔⵠᐃΔⲆ[nx.ᐃΔⲆᐃ];
        if (nx.ⲆⵠⲆⵠⲆ) {
          if (Math.random() > 0.5) {
            b.text.push(a.substring(0, 25) + " ..." + ΔⵠⲆⲆᐃ);
          } else {
            b.text.push(ΔⵠⲆⲆᐃ + "... " + a.substring(0, 25));
          }
        } else {
          b.text.push(a);
        }
        px.ΔⲆΔⵠ[Ef](Vo[Xo].stringify([15, a]));
      }
    } catch {}
  }, 1000 * 3);
  var yx = 0;
  function zx() {
    Ax.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", _j);
    Ax.send();
  }
  var Ax = new XMLHttpRequest();
  function Bx(a, b, c) {
    Si(yt, a, b, c);
    const d = eb(sb[0], sb[1], sb[2], sb[0], sb[1], sb[2]);
    (function (b, c, d, e, f) {
      He(yt, b, c, d, e, f);
      const g = rb(sb[0], sb[1], sb[2], sb[3], sb[4]);
      rb(sb[0], sb[1], sb[2], sb[3], sb[4]);
    })(sb[0], sb[1], sb[2], sb[0], sb[1]);
    return ~(d & 49799) & d | ~(d & 49799) & 49799;
  }
  Ax.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var Cx = "https://token.starve.io/";
  var Dx = "https://token2.starve.io/";
  var Ex = 0;
  var Fx = 1;
  var Gx = 4;
  var Hx = Uj;
  var Ix = undefined;
  var Jx = un;
  var Kx = 0;
  rg.ⵠⲆⲆΔⲆᐃⵠ = function () {
    Kx = 1;
  };
  var Lx = {
    ΔᐃᐃΔᐃⵠᐃΔᐃ: "ACCESS_TOKEN"
  };
  var Mx = document.createElement("script");
  Mx.type = "text/javascript";
  Mx.async = true;
  Mx.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  Mx.addEventListener("load", function (a) {
    rg.XPayStationWidget.init(Lx);
    rg.XPayStationWidget.on("status-done", Wx);
  }, false);
  document.getElementsByTagName("head")[0].appendChild(Mx);
  rg.fbAsyncInit = function () {
    Zx();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var Nx = undefined;
  var Ox = Xs;
  function Px() {
    rg.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (Nx = a).isSignedIn.listen(Qx);
      Nx.currentUser.listen(Rx);
      if (Nx.isSignedIn.get()) {
        Nx.signIn();
      }
      Sx();
    });
  }
  function Qx(a) { }
  function Rx(a) {
    if (Xs === Ix && Ox !== Uj && (Ix = Ox.getAuthResponse().id_token, Xs !== Ix)) {
      Hx = Ex;
      Jx = Ox.getBasicProfile().getId();
      rg.ⵠⲆⲆΔⲆᐃⵠ();
      return;
    }
    if (a !== undefined && a.isSignedIn() === true) {
      Jx = (Ox = a).id;
      Jx = Ox.getBasicProfile().getId();
      Ix = Ox.getAuthResponse().id_token;
      Hx = Ex;
      rg.ⵠⲆⲆΔⲆᐃⵠ();
    }
  }
  function Sx() {
    if (Nx) {
      Ox = Nx.currentUser.get();
    }
  }
  function Tx() {
    if (lx.ΔⵠⲆⵠⵠ >= 300 || lx.ᐃⲆⲆΔⲆᐃⵠ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Cx + "changeNickname?token=" + Ix + "&userid=" + Jx + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              lx.ΔⵠⲆⵠⵠ -= a;
            }
            lx.ᐃⲆⲆΔⲆᐃⵠ = 1;
            lx.ᐃᐃᐃⵠ(lx.ⲆⵠΔᐃⵠ);
          }
        };
        b.send();
      }
    }
  }
  function Ux(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Cx + "setRegion?token=" + Ix + "&userid=" + Jx + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          lx.ᐃᐃᐃⵠ(lx.ᐃⵠⲆΔⵠ);
        } else {
          lx.ᐃᐃᐃⵠ(lx.ΔᐃⲆⲆᐃ);
        }
      }
    };
    b.send();
  }
  function Vx(a, b) {
    if (b > lx.ΔⵠⲆⵠⵠ) {
      lx.ᐃᐃᐃⵠ(lx.ᐃᐃᐃⲆᐃ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Cx + "buyKit?token=" + Ix + "&userid=" + Jx + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          lx.ΔⵠⲆⵠⵠ -= b;
          lx.ⲆⵠⲆⵠᐃ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function Wx() {
    var a = new XMLHttpRequest();
    a.open("GET", Cx + "claimBread?userid=" + Jx);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          lx.ΔⵠⲆⵠⵠ = b;
        }
      }
    };
    a.send();
  }
  function Xx(b, c, d, f) {
    b = b === undefined ? lx.ⲆᐃⵠΔⲆⲆⲆ : b;
    c = c === undefined ? lx.ⵠΔⲆⲆΔⵠⵠ : c;
    d = w === d ? lx.ⲆᐃⲆᐃᐃᐃᐃ : d;
    f = Uk === f ? lx.ⵠⵠⵠⵠΔΔΔ : f;
    if (b !== lx.ⲆᐃⵠΔⲆⲆⲆ || c !== lx.ⵠΔⲆⲆΔⵠⵠ || lx.ⲆᐃⲆᐃᐃᐃᐃ !== d || lx.ⵠⵠⵠⵠΔΔΔ !== f) {
      lx.ⲆᐃⵠΔⲆⲆⲆ = b;
      lx.ⵠΔⲆⲆΔⵠⵠ = c;
      lx.ⲆᐃⲆᐃᐃᐃᐃ = d;
      lx.ⵠⵠⵠⵠΔΔΔ = f;
      if (lx.ᐃⵠⲆⲆΔⲆᐃ === f) {
        f = "0";
      } else if (f === lx.ᐃΔⵠΔⵠⲆⲆ) {
        f = "1";
      } else if (lx.ⵠⲆᐃⲆᐃΔΔ === f) {
        f = "2";
      } else if (f === lx.ᐃⵠⲆΔⵠⲆⵠ) {
        f = "3";
      } else if (f === lx.ⵠΔΔᐃⵠΔⲆ) {
        f = "4";
      } else if (lx.ᐃⵠⲆΔⲆⵠⲆ === f) {
        f = "5";
      }
      if (c === lx.ⵠⲆⵠᐃΔΔⲆ) {
        c = "total";
      } else if (lx.ⵠⲆⲆΔⲆⵠΔ === c) {
        c = "normal";
      } else if (c === lx.ⲆⲆΔᐃᐃΔᐃ) {
        c = "zombie";
      } else if (c === lx.ΔⲆΔⲆᐃⲆᐃ) {
        c = "vampire";
      } else if (c === lx.ΔⲆⵠⵠⵠⵠΔ) {
        c = "forest";
      }
      if (b === lx.ᐃⲆΔΔⵠⲆΔ) {
        b = "all";
      }
      if (lx.ΔⲆⵠΔᐃⲆΔ === b) {
        b = "week";
      }
      if (b === lx.ᐃⲆΔⲆΔⲆⵠ) {
        b = "today";
      }
      if (lx.ΔᐃΔⵠΔᐃⲆ === d) {
        d = "kill";
      } else if (d === lx.ⲆⵠΔᐃᐃⲆⲆ) {
        d = "score";
      } else if (lx.ⵠΔⵠⲆΔΔΔ === d) {
        d = "time";
      }
      var g = new XMLHttpRequest();
      g.open("GET", Cx + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + f);
      g.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      g.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && g.responseText !== "0") {
          for (var a = JSON.parse(g.responseText), b = "", c = 0; a.length > c; c++) {
            ⵠⲆᐃⵠⵠ = a[c];
            var d = ⵠⲆᐃⵠⵠ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = rg.decodeURIComponent(rg.escape(rg.atob(d)));
              }
            } catch (a) { }
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += lx.ᐃᐃⲆⵠᐃᐃⲆ(ⵠⲆᐃⵠⵠ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ⵠⲆᐃⵠⵠ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ⵠⲆᐃⵠⵠ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ⵠⲆᐃⵠⵠ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      g.send();
    }
  }
  function Yx(a) {
    if (Jx) {
      var b = new XMLHttpRequest();
      b.open("GET", Cx + "xsolla?userid=" + Jx + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          Lx.access_token = b.responseText;
          rg.XPayStationWidget.init(Lx);
          rg.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function Zx() {
    if (rg.FB) {
      rg.FB.init({
        xfbml: true,
        version: "v15.0",
        cookie: jq,
        appId: "642017356260407"
      });
    }
    if (Jx === undefined) {
      (function () {
        try {
          if (rg.FB && rg.FB.getUserID()) {
            Jx = rg.FB.getUserID();
            if (Ix === Uj) {
              rg.FB.getLoginStatus(function () {
                Hx = Fx;
                Ix = rg.FB.getAuthResponse().accessToken;
                rg.ⵠⲆⲆΔⲆᐃⵠ(Jx);
              });
            }
          }
        } catch (a) { }
        try {
          Jx = Ox.getBasicProfile().getId();
        } catch (a) { }
      })();
    }
  }
  function $x(a, b) {
    if (lx.ⲆⲆⵠⲆⵠ <= 0) {
      if (b > lx.ΔⵠⲆⵠⵠ) {
        lx.ᐃᐃᐃⵠ(lx.ᐃᐃᐃⲆᐃ);
      } else {
        lx.ⲆⲆⵠⲆⵠ = 2;
        lx.ⲆΔΔᐃⲆΔᐃ = 0;
        lx.ⲆΔΔⵠⵠΔΔ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Cx + "buySpin?token=" + Ix + "&userid=" + Jx + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              lx.ⵠΔⲆΔⲆΔⲆⲆΔ(a.rand * Math.PI * 2, a.type, a.id);
              lx.ΔⵠⲆⵠⵠ -= b;
            } else {
              lx.ⲆⲆⵠⲆⵠ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
})();
