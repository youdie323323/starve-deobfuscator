(function () {
  var aj = 144;
  var bj = 123;
  var cj = 194;
  if (cj > 10) {
    cj = 180;
  }
  if (bj === 8) {
    bj = 216;
  }
  if (aj === 8) {
    aj = 31;
  }
  const dj = window;
  var n = 91;
  var ej = 147;
  if (ej >= 10) {
    ej = 27;
  }
  if (n > 0) {
    n = 155;
  }
  let fj = 224;
  const gj = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += dj.String.fromCharCode(a[c] ^ fj++ % 255);
    }
    return b;
  };
  var s = 254;
  var hj = 0;
  if (hj == 3) {
    hj = 203;
  }
  if (s > 5) {
    s = 48;
  }
  var ij = 97;
  if (ij === 9) {
    ij = 239;
  }
  var jj = 22;
  if (jj == 5) {
    jj = 188;
  }
  const kj = -8;
  const b = 19;
  const v = 15;
  const d = 11;
  const c = -4;
  const m = 17;
  const p = 16;
  const lj = undefined;
  const C = false;
  const f = C;
  const z = 5;
  const y = true;
  const w = 9;
  const P = 18;
  const mj = 0;
  const k = 255;
  const x = 100;
  const A = 20;
  const J = 10;
  const B = 2;
  const D = 13;
  const I = 3;
  const T = lj;
  const E = 8;
  const M = z;
  const Q = 4;
  const F = 12;
  const R = w;
  const G = p;
  const j = T;
  const L = 4096;
  const S = 6;
  const O = 1 << d;
  const N = 7;
  const nj = 4;
  const q = z;
  const H = 2;
  const U = 6;
  const K = nj;
  const V = P;
  const W = P;
  const X = F;
  const Y = x;
  const ie = 1;
  const Z = D;
  let _;
  let ee = lj;
  let ne = T;
  const te = J;
  const se = w;
  let he;
  let oj;
  let pj;
  let qj = lj;
  let rj = T;
  const sj = v;
  let de;
  let tj = [];
  let me = "_";
  let uj = lj;
  const vj = f;
  const Te = ie;
  let fe;
  const wj = mj;
  const ye = y;
  const xj = H;
  let we = j;
  const Pe = nj;
  const ke = d;
  let xe;
  let yj = T;
  const zj = E;
  const Be = b;
  let De;
  let Aj = lj;
  let Bj = j;
  let Cj = T;
  let Dj;
  const Ej = m;
  const Fe = k;
  let Re = lj;
  let Fj = T;
  const Gj = y;
  let Le = lj;
  const Hj = xj;
  let Oe;
  let Ij = j;
  const Jj = b;
  const He = E;
  let Ue;
  const Kj = ye;
  let Ke;
  const Lj = lj;
  let Ze;
  let Mj;
  let Nj;
  const Oj = z;
  let ii;
  const Pj = P;
  let ni = Lj;
  const Qj = R;
  let ri;
  let Rj = j;
  const Sj = F;
  let hi = j;
  var Tj = dj.console;
  let gi;
  let Uj;
  Tj.log = Tj.info = Tj.error = Tj.warn = Tj.debug = Tj.ⲆⵠΔⵠΔᐃᐃⲆⵠ = Tj.trace = Tj.time = Tj.timeEnd = function () {};
  const Vj = P;
  const vi = A;
  const di = 14;
  const ci = I;
  let mi;
  let Wj = Lj;
  let Xj = T;
  let Yj = lj;
  const Zj = mj;
  const zi = v;
  let yi;
  let $j;
  const _j = Y;
  let Ai;
  let ak;
  let bk = Lj;
  const ck = p;
  const Mi = 14;
  const Bi = zj;
  let Di = lj;
  const dk = Mi;
  const Ei = C;
  const Si = 256;
  let Qi = j;
  let ek = lj;
  const fk = R;
  const Ri = m;
  const Gi = Pe;
  const ji = U;
  const Li = Fe;
  let Wi = lj;
  const gk = G;
  const Ni = N;
  const qi = A;
  const Hi = wj;
  let Ui = Zj;
  let hk = lj;
  const ik = Z;
  if (!dj.WebAssembly || !dj.WebAssembly.instantiate) {
    ΔΔⲆⵠΔⵠⲆΔⲆ();
  }
  const Vi = Z;
  const Zi = {
    Date: Date
  };
  dj.WebAssembly.instantiate(Uint8Array.from(dj.atob("AGFzbQEAAAABTw1gAX8Bf2ACf38AYAF/AGAFf39/f38AYAR/f39/AGAAAGADf39/AGAHf39/f39/fwBgAn9/AX9gBn9/f39/fwBgAAF8YAABf2ADf39/AX8CDAEERGF0ZQNub3cACgNAPwEBAAAABQEBAgYCAgABAQEGBQsICAgBAAYAAAoAAAAHAAAAAgUCAgUFDAMDAwcGBAkEBAkHAwMHBAYEBwQDCQUEAQEBAQZADH8BQQALfwFBAAt/AUEAC38BQQALfwFBAAt/AUEAC38BQQALfwFBAAt/AUEAC38BQQALfwBB4AgLfwFBvIkBCwfoASQDXzI4ABgDXzE4ABoCXzIAGwJfNwAcA18yNAAdA18xNAAeAl85AB8DXzEyACECXzMAIgVfX25ldwAWBV9fcGluACMHX191bnBpbgAkCV9fY29sbGVjdAAlC19fcnR0aV9iYXNlAwoGbWVtb3J5AgACXzgAKwNfMjIALANfMTYALQNfMTAALgNfMTkALwNfMjcAMAJfNQAxA18xMQAyA18yMAAzAl80ADQDXzI5ADUDXzIxADYDXzI2ADcDXzI1ADgCXzEAOQJfNgA6A18xNQA7Al8wADwDXzEzAD0DXzE3AD4DXzIzAD8IASgKyi4/CQAgACABNgIECwkAIAAgATYCCAsQACAAIAAQASAAIAAQAiAACwoAIAAoAgRBfHELCgAgACgCBEEDcQsxAQJ/IwQiARAEIQADQCAAIAFHBEAgABAFQQNHBEAACyAAQRRqECcgABAEIQAMAQsLCxEAIAAgASAAKAIEQXxxchABCxEAIAAgACgCBEEDcSABchABCzsBAX8gABAEIgFFBEBBACAAQbyJAUkgACgCCBtFBEAACw8LIAAoAggiAEUEQAALIAEgABACIAAgARAICyYBAX8gASgCCCEDIAAgASACchABIAAgAxACIAMgABAIIAEgABACC1gBAX8jBSAARgRAIAAoAggiAUUEQAALIAEkBQsgABAJIAAjBiMHRUECIAAoAgwiAEEBTQR/QQEFQeAIKAIAIABJBEAACyAAQQN0QeQIaigCAEEgcQsbEAoLIwAgAEUEQA8LIABBFGsiABAFIwdGBEAgABALIwNBAWokAwsLDQAgACgCAEF8cUEEagsJACAAIAE2AgAL7QEBBH8gASgCACICQQFxRQRAAAsgAkF8cSICQQxJBEAACyACQYACSQR/IAJBBHYFQR8gAkH8////AyACQfz///8DSRsiAmdrIgRBB2shAyACIARBBGt2QRBzCyICQRBJIANBF0lxRQRAAAsgASgCCCEFIAEoAgQiBARAIAQgBRACCyAFBEAgBSAEEAELIAIgA0EEdGpBAnQgAGooAmAgAUYEQCACIANBBHRqQQJ0IABqIAU2AmAgBUUEQCADQQJ0IABqIgEoAgRBfiACd3EhAiABIAI2AgQgAkUEQCAAIAAoAgBBfiADd3EQDgsLCwv3AgEFfyABRQRAAAsgASgCACIDQQFxRQRAAAsgAUEEaiABKAIAQXxxaiIEKAIAIgJBAXEEQAJ/IAAgBBAPIAEgA0EEaiACQXxxaiIDEA4gAUEEaiABKAIAQXxxaiIEKAIACyECCyADQQJxBEAgAUEEaygCACIBKAIAIgZBAXFFBEAACyAAIAEQDyABIAZBBGogA0F8cWoiAxAOCyAEIAJBAnIQDiADQXxxIgJBDEkEQAALIAIgAUEEamogBEcEQAALIARBBGsgATYCACACQYACSQR/IAJBBHYFQR8gAkH8////AyACQfz///8DSRsiAmdrIgNBB2shBSACIANBBGt2QRBzCyICQRBJIAVBF0lxRQRAAAsgAiAFQQR0akECdCAAaigCYCEDIAFBABABIAEgAxACIAMEQCADIAEQAQsgAiAFQQR0akECdCAAaiABNgJgIAAgACgCAEEBIAV0chAOIAVBAnQgAGoiACAAKAIEQQEgAnRyNgIEC6gBAQJ/IAEgAksEQAALIAFBE2pBcHFBBGshASAAKAKgDCIEBEAgASAEQQRqSQRAAAsgBCABQRBrRgRAAn8gBCgCACEDIAFBEGsLIQELBSABIABBpAxqSQRAAAsLIAJBcHEgAWsiAkEUSQRADwsgASADQQJxIAJBCGsiAkEBcnIQDiABQQAQASABQQAQAiACIAFBBGpqIgJBAhAOIAAgAjYCoAwgACABEBALlQEBAn8/ACIAQQBMBH9BASAAa0AAQQBIBUEACwRAAAtBwIkBQQAQDkHglQFBADYCAANAIAFBF0kEQCABQQJ0QcCJAWpBADYCBEEAIQADQCAAQRBJBEAgACABQQR0akECdEHAiQFqQQA2AmAgAEEBaiEADAELCyABQQFqIQEMAQsLQcCJAUHklQE/AEEQdBARQcCJASQJC4gDAQJ/AkACQAJAAkAjAg4DAAECAwtBASQCQQAkAxAGIwYkBSMDDwsjB0UhASMFEAQhAANAIwYgAEcEQCAAJAUgABAFIAFHBEAgACABEAdBACQDIABBFGoQJyMDDwsgABAEIQAMAQsLQQAkAxAGIwUQBCMGRgRAIwshAANAIABBvIkBSQRAIAAoAgAQDCAAQQRqIQAMAQsLIwUQBCEAA0AjBiAARwRAIAAQBSABRwRAIAAgARAHIABBFGoQJwsgABAEIQAMAQsLIwghACMGJAggACQGIAEkByAAEAQkBUECJAILIwMPCyMFIgAjBkcEQCAAEAQkBSAAEAUjB0VHBEAACyAAQbyJAUkEQCAAQQAQASAAQQAQAgUjACAAEA1rJAAgAEEEaiIAQbyJAU8EQCMJRQRAEBILIABBBGshASAAQQ9xQQEgABsEf0EBBSABKAIAQQFxCwRAAAsjCSEAIAEgASgCAEEBchAOIAAgARAQCwtBCg8LIwYjBhABIwYjBhACQQAkAgtBAAu8AQECfyABQYACSQR/IAFBBHYFQR9BAUEbIAFna3QgAWpBAWsgASABQf7///8BSRsiAWdrIgNBB2shAiABIANBBGt2QRBzCyIBQRBJIAJBF0lxRQRAAAsgAkECdCAAaigCBEF/IAF0cSIBBH8gAWggAkEEdGpBAnQgAGooAmAFIAAoAgBBfyACQQFqdHEiAQR/IAFoIgFBAnQgAGooAgQiAkUEQAALIAJoIAFBBHRqQQJ0IABqKAJgBUEACwsLqQIBA38gAUH8////A0sEQAALIABBDCABQRNqQXBxQQRrIAFBDE0bIgMQFCIBRQRAPwAiAUEEIAAoAqAMIAFBEHRBBGtHdEEBQRsgA2drdEEBayADaiADIANB/v///wFJG2pB//8DakGAgHxxQRB2IgIgASACShtAAEEASARAIAJAAEEASARAAAsLIAAgAUEQdD8AQRB0EBEgACADEBQiAUUEQAALCyABKAIAQXxxIANJBEAACyAAIAEQDyABKAIAIQQgA0EEakEPcQRAAAsgBEF8cSADayICQRBPBEAgASAEQQJxIANyEA4gAyABQQRqaiIDIAJBBGtBAXIQDiAAIAMQEAUgASAEQX5xEA4gAUEEaiABKAIAQXxxaiIAIAAoAgBBfXEQDgsgAQu9AQECfyAAQez///8DTwRAAAsjACMBTwRAAkBBgBAhAgNAIAIQE2shAiMCRQRAIwCtQsgBfkLkAICnQYAIaiQBDAILIAJBAEoNAAsjACMAIwFrQYAISUEKdGokAQsLIwlFBEAQEgsjCSAAQRBqEBUiAiABNgIMIAIgADYCECACIwgjBxAKIwAgAhANaiQAIAJBFGoiAyEBIAAhAgNAIAIEQCABIgBBAWohASAAQQA6AAAgAkEBayECDAELCyADC0sAIAAgATYCACABBEAgAEUEQAALIAFBFGsiARAFIwdGBEAgAEEUaxAFIgAjB0VGBEAgARALBSMCQQFGIABBA0ZxBEAgARALCwsLCws5AQF/IwtBBGskCxApIwtBADYCACMLQQxBAxAWIgE2AgAjCyABIABBARAqIgA2AgAjC0EEaiQLIAALIQAgACgCCEECdiABTQRAAAsgACgCBCABQQJ0aiACNgIACzkBAX8jC0EEayQLECkjC0EANgIAIwtBDEEFEBYiATYCACMLIAEgAEEDECoiADYCACMLQQRqJAsgAAs5AQF/IwtBBGskCxApIwtBADYCACMLQQxBBhAWIgE2AgAjCyABIABBARAqIgA2AgAjC0EEaiQLIAALBgAQALC5CzkBAX8jC0EEayQLECkjC0EANgIAIwtBDEEHEBYiATYCACMLIAEgAEEDECoiADYCACMLQQRqJAsgAAs5AQF/IwtBBGskCxApIwtBADYCACMLQQxBCBAWIgE2AgAjCyABIABBABAqIgA2AgAjC0EEaiQLIAALOQEBfyMLQQRrJAsQKSMLQQA2AgAjC0EMQQQQFiIBNgIAIwsgASAAQQIQKiIANgIAIwtBBGokCyAAC6gBACAAQQAgAUHLAGxBljtqQYGABG8QGSAAQQFBECACQQh1dEEYIAJ0akEIIAJBGHV0ahAZIABBAiADQeLbAHFBf3MiAUHi2wBxIAEgA3FyEBkgAEEDQRggBHRBCCAEQQh1dGpBECAEQRh1dGoQGSAAQQRBCCAFQRh1dEEQIAVBEHV0akEYIAV0ahAZIABBBSAGIAZB4/IDcUF/cyIAcSAAQePyA3FyEBkLOQEBfyMLQQRrJAsQKSMLQQA2AgAjC0EMQQkQFiIBNgIAIwsgASAAQQAQKiIANgIAIwtBBGokCyAACzkBAX8jC0EEayQLECkjC0EANgIAIwtBDEEKEBYiATYCACMLIAEgAEECECoiADYCACMLQQRqJAsgAAsnAQF/IAAEQCAAQRRrIgEQBUEDRgRAAAsgARAJIAEjBEEDEAoLIAALMgAgAEUEQA8LIABBFGsiABAFQQNHBEAACyMCQQFGBEAgABALBSAAEAkgACMIIwcQCgsLOQAjAkEASgRAA0AjAgRAEBMaDAELCwsQExoDQCMCBEAQExoMAQsLIwCtQsgBfkLkAICnQYAIaiQBCxAAIAAoAgAiAARAIAAQDAsLMwACQAJAAkACQAJAIABBCGsoAgAOCwABAgQEBAQEBAQEAwsPCw8LIAAQJg8LAAsgABAmCyYAPwBBEHRBvIkBa0EBdiQBQYAIEAMkBEGgCBADJAZBwAgQAyQICwwAIwtBvAlIBEAACwt0ACMLQQhrJAsQKSMLQgA3AwAgAEUEQCMLQQxBAhAWIgA2AgALIABBABAXIABBABABIABBABACQfz///8DIAJ2IAFJBEAACyMLIAEgAnQiAUEAEBYiAjYCBCAAIAIQFyAAIAIQASAAIAEQAiMLQQhqJAsgAAuFAQAjC0EEayQLECkjCyAANgIAIABBAEEYIAFBGHV0QQggAUEQdXRqQRAgAUEIdXRqEBkgAEEBIAJBqgFqQY/5AmxB/////wdvEBkgAEECIANBCmpBj/kCbEH/////B28QGSAAQQMgBEGT7wNxQX9zIgBBk+8DcSAAIARxchAZIwtBBGokCwuAAQAjC0EEayQLECkjCyAANgIAIABBAEEQIAF0QQggAUEIdXRqQRggAUEYdXRqEBkgAEEBIAIgAkH7sAFxQX9zIgFxIAFB+7ABcXIQGSAAQQIgA0Ht3QNyIANB7d0DcUF/c3EQGSAAQQMgBEHLAGxB+RpqQYGABG8QGSMLQQRqJAsLewAjC0EEayQLECkjCyAANgIAIABBACABQYvAAXMQGSAAQQFBGCACQQh1dEEIIAJ0akEQIAJBGHV0ahAZIABBAiADQYIBakGP+QJsQf////8HbxAZIABBA0EIIARBGHV0QRggBEEIdXRqQRAgBEEQdXRqEBkjC0EEaiQLC5sBACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFB8gFqQaeDAWxB/////wdvEBkgAEEBIAJByL0CcxAZIABBAiADQYLDAHIgA0GCwwBxQX9zcRAZIABBAyAEQdPAAnIgBEHTwAJxQX9zcRAZIABBBCAFQbk/bEH3qi9qQbiaCG8QGSAAQQUgBkExakGP+QJsQf////8HbxAZIwtBBGokCwtIACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFBuT9sQevY+ABqQbiaCG8QGSAAQQEgAkGk3gFyIAJBpN4BcUF/c3EQGSMLQQRqJAsLWgAjC0EEayQLECkjCyAANgIAIABBACABQfCHAXIgAUHwhwFxQX9zcRAZIABBASACQaOEAnFBf3MiAUGjhAJxIAEgAnFyEBkgAEECIANBiQ1zEBkjC0EEaiQLC4wBACMLQQRrJAsQKSMLIAA2AgAgAEEAQQggAUEIdXRBGCABQRB1dGpBECABdGoQGSAAQQEgAkGz9AJzEBkgAEECIANB+9oCakHH/gNvEBkgAEEDQQggBEEYdXRBGCAEQRB1dGpBECAEQQh1dGoQGSAAQQQgBUG5P2xBz9b6AGpBuJoIbxAZIwtBBGokCwteACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFB6ABqQaeDAWxB/////wdvEBkgAEEBIAJBuT9sQaXT/QBqQbiaCG8QGSAAQQIgA0HLAGxB/ewAakGBgARvEBkjC0EEaiQLC2QAIwtBBGskCxApIwsgADYCACAAQQAgAUHwKXIgAUHwKXFBf3NxEBkgAEEBIAJB7/0CciACQe/9AnFBf3NxEBkgAEECIANB6/QBcUF/cyIAQev0AXEgACADcXIQGSMLQQRqJAsLhQEAIwtBBGskCxApIwsgADYCACAAQQBBECABQRB1dEEYIAFBGHV0akEIIAF0ahAZIABBASACQZO0A3IgAkGTtANxQX9zcRAZIABBAiADQdviAXMQGSAAQQMgBEH08gBqQdX/A28QGSAAQQQgBUHBAWpBj/kCbEH/////B28QGSMLQQRqJAsLnwEAIwtBBGskCxApIwsgADYCACAAQQAgASABQYntA3FBf3MiAXEgAUGJ7QNxchAZIABBASACQY3rAXMQGSAAQQIgA0H6AGpBj/kCbEH/////B28QGSAAQQMgBEG5P2xB57MnakG4mghvEBkgAEEEIAVB6gFqQY/5AmxB/////wdvEBkgAEEFIAZBywBsQcbEAGpBgYAEbxAZIwtBBGokCwtxACMLQQRrJAsQKSMLIAA2AgAgAEEAQRAgAXRBGCABQRB1dGpBCCABQQh1dGoQGSAAQQEgAkGLzAJqQff+A28QGSAAQQIgAyADQc2MAXFBf3MiAXEgAUHNjAFxchAZIABBAyAEQfkmcxAZIwtBBGokCwuBAQAjC0EEayQLECkjCyAANgIAIABBACABQcsAbEGwjgFqQYGABG8QGSAAQQEgAkH+AWpBj/kCbEH/////B28QGSAAQQJBCCADdEEYIANBGHV0akEQIANBCHV0ahAZIABBAyAEIARBxf4CcUF/cyIAcSAAQcX+AnFyEBkjC0EEaiQLC60BACMLQQRrJAsQKSMLIAA2AgAgAEEAQQggAUEIdXRBECABQRB1dGpBGCABQRh1dGoQGSAAQQEgAkGI6ANyIAJBiOgDcUF/c3EQGSAAQQIgA0Hy2QFzEBkgAEEDQRggBEEIdXRBCCAEQRh1dGpBECAEQRB1dGoQGSAAQQQgBUHwAGpBj/kCbEH/////B28QGSAAQQUgBkEJakGP+QJsQf////8HbxAZIwtBBGokCwtrACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFB4P0AciABQeD9AHFBf3NxEBkgAEEBQRAgAkEIdXRBGCACdGpBCCACQRh1dGoQGSAAQQJBCCADdEEQIANBCHV0akEYIANBGHV0ahAZIwtBBGokCwtFACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFBJGpBj/kCbEH/////B28QGSAAQQEgAkHLAGxB3xJqQYGABG8QGSMLQQRqJAsLTwAjC0EEayQLECkjCyAANgIAIABBAEEQIAF0QRggAUEQdXRqQQggAUEYdXRqEBkgAEEBIAJB4S1zEBkgAEECIANB7sAAcxAZIwtBBGokCwspACMLQQRrJAsQKSMLIAA2AgAgACABIAIgAyAEIAUgBhAgIwtBBGokCwtQACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFBz+IDcxAZIABBASACQe3/AXMQGSAAQQJBECADQRB1dEEYIAN0akEIIANBGHV0ahAZIwtBBGokCwtxACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFB4rUDcxAZIABBASACQarkA3FBf3MiAUGq5ANxIAEgAnFyEBkgAEECIANBtrUDciADQba1A3FBf3NxEBkgAEEDIARBhzNyIARBhzNxQX9zcRAZIwtBBGokCwueAQAjC0EEayQLECkjCyAANgIAIABBACABQSZqQaeDAWxB/////wdvEBkgAEEBIAJBxq8DcUF/cyIBQcavA3EgASACcXIQGSAAQQIgA0G5P2xBnfvZAGpBuJoIbxAZIABBA0EIIAR0QRggBEEIdXRqQRAgBEEQdXRqEBkgAEEEQRAgBUEQdXRBCCAFQRh1dGpBGCAFdGoQGSMLQQRqJAsLC1cCAEHgCAsNCwAAACAAAAAAAAAAIABB/AgLPYEIAAACAAAAAQkAAAIAAAABCgAAAgAAAIEAAAACAAAAAQIAAAIAAABBCAAAAgAAAEEAAAACAAAAAQEAAAI="), function (a) {
    return a.charCodeAt(mj);
  }), Zi).then(function (a) {
    ee = a.instance;
    _ = ee.exports;
    ne = _.memory;
    qj = ne.buffer;
    he = _.__pin;
    oj = _.__unpin;
    pj = _.__new;
    rj = _.__collect;
    me = "_";
    for (let b = Zj; b < 30; b++) {
      tj[b] = _[me + b];
    }
    de = _.__rtti_base;
    uj = new Float32Array(qj);
    fe = new Float64Array(qj);
    we = new BigUint64Array(qj);
    xe = new Uint32Array(qj);
    yj = new Uint16Array(qj);
    Aj = new Uint8Array(qj);
    De = new BigInt64Array(qj);
    Bj = new Int32Array(qj);
    Cj = new Int16Array(qj);
    Dj = new Int8Array(qj);
    Wj = tj[qi];
    ri = tj[25];
    Fj = tj[V];
    yi = tj[14];
    Ij = tj[28];
    Yj = tj[sj];
    $j = tj[4];
    ni = tj[0];
    Rj = tj[29];
    mi = tj[19];
    Oe = tj[23];
    Ke = tj[13];
    Qi = tj[xj];
    Wi = tj[27];
    Le = tj[8];
    Xj = tj[Ni];
    Ze = tj[J];
    Uj = tj[21];
    gi = tj[26];
    Di = tj[6];
    Re = tj[d];
    ii = tj[Sj];
    ak = tj[ie];
    hi = tj[17];
    Nj = tj[22];
    Mj = tj[M];
    Ai = tj[24];
    ek = tj[9];
    bk = tj[3];
    Ue = tj[G];
    Ui = 1;
    if (hk) {
      hk();
    }
  });
  const Xi = F;
  const $i = nj;
  const jk = xj;
  const kk = J;
  const lk = function (a) {
    return xe[(de + 4 >>> H) + (a << ie)];
  };
  const mk = ie;
  const nk = ji;
  function ok(a) {
    return 31 - Math.clz32(a >>> S & 31);
  }
  const pk = d;
  const qk = He;
  const rk = lj;
  const sk = J;
  const tk = pk;
  function uk(a) {
    const b = xe[a + kj >>> jk];
    const d = lk(b);
    const e = ok(d);
    let f = d & Q ? a : xe[a + K >>> 2];
    const g = d & B ? xe[a + X >>> 2] : xe[f + c >>> 2] >>> e;
    return vk(e, d & O, d & L).subarray(f >>>= e, f + g);
  }
  function vk(a, b, c) {
    if (c) {
      switch (a) {
        case xj:
          return uj;
        case ci:
          return fe;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return Dj;
          } else {
            return Aj;
          }
        case 1:
          if (b) {
            return Cj;
          } else {
            return yj;
          }
        case Hj:
          if (b) {
            return Bj;
          } else {
            return xe;
          }
        case I:
          if (b) {
            return De;
          } else {
            return we;
          }
      }
    }
  }
  const wk = Ni;
  const xk = Kj;
  const yk = 256;
  function zk(b, c, d, e, f) {
    const i = ((15761 + b) * 2147483629 + 2147483587) % 2147483647;
    const j = (1 + (c + 7965) * 22695477) % 4294967296;
    const a = (2531011 + (d + 57477) * 214013) % 4294967296;
    const k = (8 << (e >> 16 & 255)) + (0 << (e & 255)) + (16 << (e >> E & 255)) + (24 << (e >> 24 & Li));
    const h = (2531011 + (f + 14526) * 214013) % 4294967296;
    const l = function (b, c, d, e) {
      const f = (0 << (b >> 8 & 255)) + (8 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (16 << (b & 255));
      const g = ~(c & 40808) & (c | 40808);
      const i = ~(d & 22660) & d | ~(d & 22660) & 22660;
      const a = (59111 + e) % 65436;
      const j = ot(f, g, i);
      Ma(a, f, g, i, a);
      return (j | 34960) & ~(j & 34960);
    }(i, j, a, k);
    no(h, i, j, a, k, h);
    return ~(l & 33202) & 33202 | ~(l & 33202) & l;
  }
  const Ak = x;
  const Bk = dk;
  const Ck = U;
  const Dk = b;
  function Ek(a, b) {
    const c = (2147483587 + (60014 + a) * 2147483629) % 2147483647;
    const d = ~(b & 18605) & b | ~(b & 18605) & 18605;
    return ((5354 + (Af(c, d, c, d, c) ^ gt(d, c, d, c, d, c))) * 22695477 + 1) % 4294967296;
  }
  const Fk = q;
  const Gk = Bi;
  const Hk = ci;
  const Ik = P;
  function Jk(a, b, c) {
    Wj(Lw, a, b, c);
    const d = Zs(Mw[0], Mw[1], Mw[Hj]);
    const e = function (b, c, d, e, f, g) {
      ri(Lw, b, c, d, e, f, g);
      const h = function (a, b, c, d) {
        Uj(Lw, a, b, c, d);
        const e = Ir(Mw[Qs], Mw[1]);
        (function (a, b, c) {
          ak(Lw, a, b, c);
          const d = Kn(Mw[0], Mw[1], Mw[2], Mw[0]);
          Ir(Mw[1], Mw[2]);
        })(Mw[2], Mw[3], Mw[0]);
        return e ^ 63745;
      }(Mw[0], Mw[1], Mw[2], Mw[3]);
      const a = Va(Mw[4], Mw[5], Mw[Hi], Mw[ie], Mw[xj]);
      return (8 << ((h ^ a) >> 8 & 255)) + (16 << ((h ^ a) & 255)) + (In << ((h ^ a) >> Mn & Fe)) + (24 << ((h ^ a) >> 24 & 255));
    }(Mw[wj], Mw[1], Mw[2], Mw[0], Mw[1], Mw[Hj]);
    return (8 << ((d ^ e) >> 24 & 255)) + (24 << ((d ^ e) & 255)) + (ck << ((d ^ e) >> 16 & 255)) + (0 << ((d ^ e) >> 8 & 255));
  }
  const Kk = yk;
  function Lk(b, c, d, e, f) {
    const i = (12345 + (56214 + b) * 1103515245) % 2147483648;
    const j = (31264 + c) % 65426;
    const a = (16 << (e >> 24 & 255)) + (24 << (e >> 8 & 255)) + (8 << (e & 255)) + (0 << (e >> 16 & 255));
    const k = (1013904223 + (13546 + f) * 1664525) % 4294967296;
    const h = function (b, c, d) {
      const e = (8 << (b >> 8 & 255)) + (0 << (b >> 16 & Ml)) + (16 << (b >> Zj & 255)) + (24 << (b >> 24 & 255));
      const f = (16 << (c >> 24 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c >> Qs & 255)) + (_a << (c >> 8 & Br));
      const g = (55188 + d) % 65322;
      const h = function (b, c, d, e, f, i) {
        const j = ~(e & 16217) & 16217 | ~(e & 16217) & e;
        const a = ((47059 + f) * 1103515245 + 12345) % 2147483648;
        const k = i ^ 63571;
        const h = Qw(((b + 63530) * 214013 + 2531011) % 4294967296, ~(c & 19757) & 19757 | ~(c & 19757) & c, (d | 33789) & ~(d & 33789));
        const l = lf(j, a, k);
        return (bt << ((h ^ l) >> Nh & 255)) + (8 << ((h ^ l) >> 24 & 255)) + (24 << ((h ^ l) & 255)) + (0 << ((h ^ l) >> 8 & 255));
      }(e, f, g, e, f, g);
      Qw(e, f, g);
      return (h | 27408) & ~(h & 27408);
    }(i, j, ((d + 43685) * 2147483629 + 2147483587) % 2147483647);
    const l = Sw(a, k, i, j);
    return (Gk << ((h ^ l) >> Zj & 255)) + (24 << ((h ^ l) >> 24 & 255)) + (16 << ((h ^ l) >> 8 & 255)) + (0 << ((h ^ l) >> 16 & 255));
  }
  const Mk = "development";
  const Nk = Fe;
  const Ok = qi;
  const Pk = "production";
  const Qk = Qj;
  const Rk = Ej;
  function Sk(a) {
    this.ⲆⲆᐃᐃ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ⲆⲆᐃᐃ - ie));
  }
  const Tk = C;
  Sk.prototype.random = function () {
    this.state = (this.state * this.a + this.c) % this.ⲆⲆᐃᐃ;
    return this.state / this.ⲆⲆᐃᐃ;
  };
  Sk.prototype.ⵠᐃᐃⲆΔⲆⵠ = function (a) {
    this.state = a;
  };
  ΔⵠΔⲆⵠⵠⵠ = 10000;
  const Uk = Xi;
  ᐃΔᐃⲆᐃⲆΔ = [];
  var Vk = new Sk();
  Vk.ⵠᐃᐃⲆΔⲆⵠ(new Date().getTime());
  for (var Wk = wj; Wk < ΔⵠΔⲆⵠⵠⵠ; Wk++) {
    ᐃΔᐃⲆᐃⲆΔ.push(Vk.random());
  }
  const Xk = Ck;
  const Yk = gk;
  const Zk = kk;
  const $k = wk;
  function _k(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const j = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const a = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & Fe)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const m = function (c, d, e, f, i, j) {
      const m = c ^ 10715;
      const a = (24 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & k)) + (8 << (d >> 24 & 255));
      const n = (8 << (e >> 16 & 255)) + (32 << (e >> 24 & 255)) + (16 << (e >> 8 & 255)) + (24 << (e >> 32 & 255));
      const h = f ^ 40782;
      const l = i ^ 41301;
      const g = ~(j & 12091) & (j | 12091);
      const o = sn(m, a, n, h, l, g);
      sn(m, a, n, h, l, g);
      xn(m, a, n, h, l);
      const b = (o | 3006) & ~(o & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, j, a, f, i);
    const h = Fn(j, a, f, i, j);
    sn(a, f, i, j, a, f);
    const l = (1013904223 + (26191 + (m ^ h)) * 1664525) % 4294967296;
    return (l | 38630) & ~(l & 38630);
  }
  function aq(c, e, f, i, j, m) {
    const n = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const a = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const o = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const l = (j + 3575) % 65503;
    const g = ~(m & 6932) & m | ~(m & 6932) & 6932;
    const p = Sn(n, a, o, h, l);
    const b = function (c, d, e, f, i, j) {
      const m = c ^ 30142;
      const a = (d + 63025) % 65493;
      const n = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const l = (8 << (i >> 16 & Nk)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & k)) + (16 << (i >> 8 & 255));
      const g = (j | 45652) & ~(j & 45652);
      const o = Sn(m, a, n, h, l);
      dq(g, m, a, n, h);
      An(l, g, m, a, n, h);
      return o ^ 60048;
    }(g, n, a, o, h, l);
    mn(g, n, a, o, h, l);
    const q = (1013904223 + (60709 + (p ^ b)) * 1664525) % 4294967296;
    return ~(q & 42138) & q | ~(q & 42138) & 42138;
  }
  const bq = Jj;
  const cq = Ni;
  function dq(b, c, d, e, f) {
    const i = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
    const j = c ^ 63080;
    const a = ((d + 60304) * 22695477 + 1) % 4294967296;
    const k = ~(e & 5467) & 5467 | ~(e & 5467) & e;
    const h = (f | 40165) & ~(f & 40165);
    const l = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const j = d ^ 62842;
      const a = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = en(f, i, j, a);
      const h = Bn(f, i, j, a);
      _k(f, i, j, a);
      const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & Nk)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> zj & 255));
      return ~(l & 63304) & (l | 63304);
    }(i, j, a, k);
    const g = Fn(h, i, j, a, k);
    return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ Ln(h, i, j, a, k, h))) * 1664525 + 1013904223) % 4294967296;
  }
  const eq = Si;
  function fq(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const m = d ^ 58614;
    const a = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const n = f ^ 40810;
    const h = (24 << (i >> 24 & Li)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & Fe)) + (16 << (i >> 16 & 255));
    const l = Gn(j, m);
    const g = _k(a, n, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const j = (16 << (d >> 8 & k)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const a = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const m = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = Rn(c, d, c);
        ln(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ iq(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = En(j, a, f, i, j);
      Gn(a, f);
      const l = (58498 + (m ^ h)) % 65531;
    })(m, a, n, h);
    const o = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> p & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
    return ~(o & 13644) & o | ~(o & 13644) & 13644;
  }
  const gq = Kk;
  const hq = ik;
  function iq(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (G << (b >> 8 & 255)) + (24 << (b >> ck & 255)) + (8 << (b >> 32 & 255));
    const j = (c + 39144) % 65406;
    const a = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const l = en(i, j, a, k);
    En(h, i, j, a, k);
    mn(h, i, j, a, k, h);
    return (l | 19326) & ~(l & 19326) ^ 36297;
  }
  function en(a, b, c, d) {
    const e = a ^ 11762;
    const f = ~(b & 19425) & 19425 | ~(b & 19425) & b;
    return ((55182 + (((17757 + ((32 << ((e ^ f) >> 32 & 255)) + (8 << ((e ^ f) >> Bi & 255)) + (24 << ((e ^ f) >> 24 & 255)) + (16 << ((e ^ f) >> 16 & 255)) ^ (32 << (c >> 16 & 255)) + (8 << (c >> 32 & Li)) + (24 << (c >> 24 & 255)) + (16 << (c >> 8 & k)))) * 1664525 + 1013904223) % 4294967296 ^ (~(d & 259) & 259 | ~(d & 259) & d))) * 1664525 + 1013904223) % 4294967296;
  }
  function tn(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> G & 255)) + (16 << (b >> 8 & k)) + (8 << (b >> 32 & 255));
    const j = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const a = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & k));
    const m = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const l = Qn(i, j);
    En(a, m, h, i, j);
    An(a, m, h, i, j, a);
    const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
    return ~(g & 46567) & (g | 46567);
  }
  const nn = ke;
  const on = v;
  function rn(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & Nk));
    const i = ~(d & 32053) & (d | 32053);
    const a = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> gk & 255)) + (24 << (b >> 24 & 255)) + (E << (b >> 8 & 255));
      const i = (mk + (50595 + c) * 22695477) % 4294967296;
      const j = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const a = e ^ 18768;
      const k = Sn(f, i, j, a, f);
      const h = fq(i, j, a, f, i);
      const l = yn(j, a);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, i, a);
    Bn(f, g, i, a);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ Sn(f, g, i, a, f))) * 214013) % 4294967296;
  }
  function an(c, d, e, f, i, j) {
    const m = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const a = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const n = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & Nk)) + (Yk << (f >> E & 255)) + (E << (f >> ck & Li)) + (32 << (f >> 32 & 255));
    const l = (1 + (39199 + i) * 22695477) % 4294967296;
    const g = j ^ 33037;
    const o = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & Nk)) + (32 << (d >> 8 & 255));
      const i = wn(e, f, g, e, f);
      const a = Ln(g, e, f, g, e, f);
      const j = function (a, b) {
        const c = (16 << (a >> 8 & zn)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & k)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = An(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const j = (2531011 + (c + 41768) * 214013) % 4294967296;
          const a = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const l = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const h = dq(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const m = (2531011 + (c + 16955) * 214013) % 4294967296;
                const a = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const l = ~(j & 24998) & (j | 24998);
                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = rn(m, a, n, h);
                const b = En(l, g, m, a, n);
                const p = rn(h, l, g, m);
              })(g, e, f, g, e, f);
              Bn(g, e, f, g);
              return ~(h & 43875) & (h | 43875) ^ 15116;
            }(c, d, c);
            xn(d, c, d, c, d);
            en(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, j);
          ln(a, k, h, i);
          const g = tn(j, a, k, h, i);
        })(c, d, c, d, c);
        Qn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(g, e);
      const h = (16 << ((i ^ a) >> 32 & 255)) + (24 << ((i ^ a) >> 24 & k)) + (32 << ((i ^ a) >> zj & 255)) + (8 << ((i ^ a) >> 16 & 255));
      return (8 << ((h ^ j) >> 32 & 255)) + (G << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
    }(m, a, n);
    Bn(h, l, g, m);
    return ((34159 + (o ^ 2959 ^ rn(a, n, h, l))) * 1103515245 + 12345) % 2147483648;
  }
  function sn(b, c, d, e, f, i) {
    const j = ~(b & 36133) & (b | 36133);
    const a = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const l = f ^ 7550;
    const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (_n(j, a, k, h, l) ^ Bn(g, j, a, k))) * 2147483629 + 2147483587) % 2147483647 ^ xn(h, l, g, j, a))) * 1103515245) % 2147483648;
  }
  const hn = Ok;
  function ln(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const i = d ^ 38714;
    const a = e ^ 58084;
    const j = aq(f, g, i, a, f, g);
    Bn(i, a, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ mn(i, a, f, g, i, a))) * 214013 + 2531011) % 4294967296;
  }
  const gn = sk;
  const un = xk;
  const bn = Jj;
  const vn = D;
  const dn = d;
  const cn = j;
  function mn(b, c, d, e, f, g) {
    const i = b ^ 23409;
    const a = c ^ 26380;
    const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = g ^ 42490;
    return ((19056 + (en(i, a, d ^ 53590, e ^ 36633) ^ en(j, h, i, a))) * 22695477 + 1) % 4294967296;
  }
  const pn = Qk;
  const Cn = Ak;
  const Tn = di;
  const fn = I;
  const zn = k;
  function yn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> G & 255));
    const f = mn(d, e, d, e, d, e);
    const g = mn(d, e, d, e, d, e);
    en(d, e, d, e);
    const h = (16 << ((f ^ g) >> 32 & k)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(h & 55949) & 55949 | ~(h & 55949) & h;
  }
  function wn(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const j = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const a = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const l = mn(i, j, a, k, h, i);
    const g = en(j, a, k, h);
    Rn(i, j, a);
    return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & Nk)) ^ 31710;
  }
  const Pn = H;
  function An(c, d, e, f, i, j) {
    const k = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const a = (d | 41551) & ~(d & 41551);
    const m = (24 << (e >> 24 & Nk)) + (16 << (e >> 32 & 255)) + (8 << (e >> 16 & Fe)) + (32 << (e >> 8 & 255));
    const h = ~(f & 32641) & (f | 32641);
    const l = ((i + 35582) * 214013 + 2531011) % 4294967296;
    const g = ~(j & 1090) & (j | 1090);
    const n = Ln(k, a, m, h, l, g);
    iq(k, a, m, h, l);
    en(g, k, a, m);
    const b = ~(n & 8077) & 8077 | ~(n & 8077) & n;
    return ~(b & 3708) & (b | 3708);
  }
  const kn = P;
  function xn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const j = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const a = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & Fe)) + (ck << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const l = mn(i, j, a, k, h, i);
    const g = An(j, a, k, h, i, j);
    en(a, k, h, i);
    return (He << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> p & zn)) + (24 << ((l ^ g) >> Bi & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
  }
  const Jn = Ei;
  const Mn = ck;
  function Bn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const g = c ^ 57623;
    const i = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const a = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const j = Qn(f, g);
    Qn(i, a);
    Fn(f, g, i, a, f);
    const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
    return (h | 8862) & ~(h & 8862);
  }
  const Dn = Kk;
  const In = Hi;
  function En(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const j = c ^ 50118;
    const a = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const l = Ln(i, j, a, k, h, i);
    Ln(j, a, k, h, i, j);
    return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ en(a, k, h, i))) * 214013) % 4294967296;
  }
  function Sn(b, c, d, e, f) {
    const i = b ^ 62008;
    const j = (24 << (c >> 32 & 255)) + (qk << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const a = ((d + 46531) * 22695477 + mk) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const l = dq(i, j, a, k, h);
    Ln(i, j, a, k, h, i);
    return ((3037 + (l ^ 57467 ^ Fn(j, a, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  function Qn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (_n(c, d, c, d, c) ^ En(d, c, d, c, d))) % 65357 ^ en(c, d, c, d))) * 22695477) % 4294967296;
  }
  function _n(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (zj << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const k = d ^ 55978;
    const a = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & Li)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const l = En(j, k, a, m, h);
    const g = xn(j, k, a, m, h);
    en(j, k, a, m);
    const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & Li));
    return ~(n & 23686) & (n | 23686);
  }
  function Fn(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const k = (d + 52922) % 65337;
    const a = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const l = iq(j, k, a, m, h);
    const g = Gn(j, k);
    iq(a, m, h, j, k);
    const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  function Rn(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const h = tn(e, f, g, e, f);
    const a = tn(g, e, f, g, e);
    tn(f, g, e, f, g);
    return (16 << ((h ^ a) >> 32 & 255)) + (8 << ((h ^ a) >> 8 & 255)) + (24 << ((h ^ a) >> 24 & 255)) + (32 << ((h ^ a) >> 16 & 255)) ^ 31181;
  }
  function Gn(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = tn(d, e, d, e, d);
    const g = _n(e, d, e, d, e);
    wn(d, e, d, e, d);
    const h = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(h & 40927) & 40927 | ~(h & 40927) & h;
  }
  const jn = Zk;
  function Ln(b, c, d, e, f, i) {
    const j = d ^ 8102;
    const a = (24 << (e >> Mn & 255)) + (32 << (e >> 32 & k)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & Li));
    const m = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (ie + (62237 + i) * 22695477) % 4294967296;
    const l = yn((b + 52483) % 65496, (ck << (c >> 16 & 255)) + (24 << (c >> 8 & zn)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const g = yn(j, a);
    yn(m, h);
    return (45290 + (l ^ g)) % 65334 ^ 55575;
  }
  function Wn(b, c, d, e, f) {
    const g = ~(b & 34987) & (b | 34987);
    const i = e ^ 33438;
    const a = (2147483587 + (f + 3159) * 2147483629) % 2147483647;
    const j = ot(g, (c | 32276) & ~(c & 32276), (24 << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (Hi << (d >> mj & 255)) + (8 << (d >> 24 & 255)));
    const h = lf(i, a, g);
    return (8 << ((j ^ h) >> 8 & zn)) + (0 << ((j ^ h) >> 16 & 255)) + (24 << ((j ^ h) & Fe)) + (16 << ((j ^ h) >> 24 & 255));
  }
  const On = zj;
  const Nn = x;
  const qn = Kj;
  const Hn = Nk;
  const Un = Ej;
  function Yn(a, b, c) {
    Yj(Lw, a, b, c);
    return ((172 + (rt(Mw[wj], Mw[mk], Mw[Hj], Mw[0]) ^ function (a, b, c) {
      Re(Lw, a, b, c);
      const d = Ys(Mw[0], Mw[1], Mw[2], Mw[0], Mw[Oq]);
      const e = function (b, c, d, e, f, g) {
        ni(Lw, b, c, d, e, f, g);
        const h = function (a, b, c, d) {
          Le(Lw, a, b, c, d);
          const e = Ys(Mw[Mg], Mw[1], Mw[vg], Mw[ci], Mw[0]);
          Va(Mw[ie], Mw[2], Mw[3], Mw[ya], Mw[1]);
          return ~(e & 46317) & (e | 46317);
        }(Mw[0], Mw[1], Mw[2], Mw[3]);
        const a = Ys(Mw[gl], Mw[5], Mw[0], Mw[1], Mw[H]);
        return ((90 + (h ^ a)) * 8121 + 28411) % 134456;
      }(Mw[2], Mw[os], Mw[1], Mw[rs], Mw[0], Mw[mk]);
      return (0 << ((d ^ e) >> Kg & 255)) + (24 << ((d ^ e) >> 24 & Hn)) + (8 << ((d ^ e) >> Bi & 255)) + (16 << ((d ^ e) & 255));
    }(Mw[mk], Mw[H], Mw[0]))) * 8121 + 28411) % 134456;
  }
  function Kn(a, b, c, d) {
    Ue(Lw, a, b, c, d);
    return ((63 + (Iw(Mw[Hi], Mw[1], Mw[2], Mw[3]) ^ Yn(Mw[wj], Mw[Te], Mw[2]))) * 48271 + 0) % 2147483647;
  }
  const Vn = $i;
  const Zn = vn;
  const Xn = ie;
  ᐃⵠΔⲆ = {
    ΔⲆΔⲆⵠⲆᐃ: () => new Promise((a, b) => {
      dj.grecaptcha.ready(function () {
        dj.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (ew) {
            a(mj);
          } else {
            console.log(undefined);
            b(c);
          }
        });
      });
    }),
    ⲆᐃⲆᐃⵠⵠΔⲆⲆ: function (a) {
      dj.open(a, "_blank").focus();
    },
    ⲆⲆⲆΔᐃᐃᐃ: function (a) {
      dj.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ΔΔⲆᐃⲆΔⲆ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return f;
        }
      }
      return xk;
    },
    ᐃⵠᐃΔᐃΔΔᐃΔ: function (a, b) {
      if (a.length != b.length) {
        return C;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ΔΔⲆᐃⲆΔⲆ(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return false;
        }
      }
      return ye;
    },
    ΔⵠᐃΔⵠⲆΔ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ⲆⲆΔⵠⲆΔⲆ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⵠᐃΔᐃⲆᐃᐃⲆΔ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ⵠⵠᐃⵠⲆᐃΔ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ⵠΔⵠᐃⵠⵠⵠ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return mk;
      }
    },
    ⲆΔⵠᐃⵠᐃⲆ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ΔⵠΔⵠⲆᐃⲆ: function (a, b, c, d) {
      var e = d - b;
      var f = c - a;
      return Math.atan2(e, f);
    },
    ΔⲆΔⵠΔΔΔ: function (a, b) {
      return Math.asin(this.ⵠⵠᐃⵠⲆᐃΔ(a, b) / (this.ⵠΔⵠᐃⵠⵠⵠ(a) * this.ⵠΔⵠᐃⵠⵠⵠ(b))) * this.sign(this.ⲆΔⵠᐃⵠᐃⲆ(a, b));
    },
    ΔⲆⵠᐃᐃΔΔ: function (a) {
      ᐃΔᐃᐃⲆΔⵠ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ᐃΔᐃᐃⲆΔⵠ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ⵠΔⵠΔΔᐃⲆ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ᐃᐃΔΔⲆⲆⲆ: function (a, b) {
      return this.ΔⲆΔⵠΔΔΔ({
        x: mk,
        y: 0
      }, this.ⲆⲆΔⵠⲆΔⲆ(a, b));
    },
    ΔΔⵠΔ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ΔⵠⵠΔΔΔⲆ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ⲆΔΔᐃⲆⲆⵠ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ⲆᐃⲆᐃⲆⵠⵠ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ΔⵠᐃΔⵠⵠⲆᐃⵠ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ᐃᐃⲆΔᐃΔⵠⲆΔ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ᐃⵠᐃᐃΔ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ᐃΔᐃⵠΔⵠⲆ: function (a, b) {
      return Math.floor((a - b) / Pn);
    },
    ᐃⵠΔᐃⲆⲆⵠ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ᐃⲆᐃⲆᐃⲆᐃ: function () {
      if (Math.random() > 0.5) {
        return mk;
      } else {
        return -ie;
      }
    },
    ⲆᐃⵠⲆⵠᐃⲆΔⲆ: function (a, b, c) {
      var d = this.ᐃⲆᐃⲆᐃⲆᐃ();
      var e = this.ᐃⲆᐃⲆᐃⲆᐃ();
      var f = Math.random() * Math.PI / H;
      return {
        x: Math.floor(a + Math.sin(f) * d * c),
        y: Math.floor(b + Math.cos(f) * e * c)
      };
    },
    ΔⲆⵠᐃᐃⲆⵠΔᐃ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ΔⵠⲆ = d;
    },
    ΔⵠⲆⲆᐃⵠⵠΔⵠ: function (a) {
      Ⲇⵠᐃ = [];
      Ⲇⵠᐃ.push.apply(Ⲇⵠᐃ, a);
      var b = [];
      while (Ⲇⵠᐃ.length > wj) {
        var c = Math.floor(Math.random() * Ⲇⵠᐃ.length);
        b.push(Ⲇⵠᐃ[c]);
        Ⲇⵠᐃ.splice(c, ie);
      }
      return b;
    },
    ⲆⲆᐃⲆⵠΔⲆ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ᐃΔⵠᐃᐃᐃᐃ: function (a) {
      if (typeof a !== "number") {
        return "0";
      }
      if (a >= 10000) {
        var b = Math.floor(Math.log10(a)) - Pn;
        var c = Math.max(wj, Hk - b);
        var d = Math.floor(a / 1000).toString();
        if (c) {
          for (var e = (d += "." + (a % 1000 / 1000).toString().substring(2).substring(0, c)).length - mk, f = wj; e > 0 && d[e] == "0"; e--) {
            f++;
          }
          if ((d = d.substring(0, d.length - f))[d.length - mk] == ".") {
            d = d.substring(Zj, d.length - 1);
          }
        }
        return d += "k";
      }
      return a.toString();
    },
    ᐃΔΔⲆᐃⵠⵠ: function (a) {
      return a * (jk - a);
    },
    ⵠⵠⲆⵠΔΔΔ: function (a) {
      return --a * a * a + 1;
    },
    ⲆⵠΔⲆⵠ: function (a) {
      if (a < 0.5) {
        return H * a * a;
      } else {
        return (Pe - Hj * a) * a - 1;
      }
    },
    ΔΔⵠᐃⵠⵠᐃ: function (a) {
      if (a < 0.5) {
        return Gi * a * a * a;
      } else {
        return (a - Te) * (jk * a - 2) * (jk * a - 2) + 1;
      }
    },
    ΔⵠΔᐃᐃᐃᐃΔⲆ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - On * --a * a * a * a;
      }
    },
    ⲆⵠⵠⵠⵠᐃΔ: function (a) {
      return Xn - --a * a * a * a;
    },
    ΔⵠΔⵠᐃΔⲆ: function (a) {
      return mk + --a * a * a * a * a;
    },
    ⵠᐃⲆᐃ: function (a, b, c, d, e, f) {
      this.ⵠᐃⵠ = a;
      this.ΔΔⲆ = b;
      this.max = c;
      this.min = d;
      this.ⵠΔᐃᐃᐃⲆⲆ = e;
      this.ⵠΔⵠᐃⲆⲆⲆ = f;
      this.ᐃᐃᐃΔᐃᐃᐃ = Zj;
      this.ᐃⲆΔ = function () {
        if (this.ⵠᐃⵠ) {
          if ((a = this.ΔΔⲆ + _w * this.ⵠΔᐃᐃᐃⲆⲆ) > this.max) {
            this.ΔΔⲆ = this.max;
            this.ⵠᐃⵠ = vj;
            return true;
          }
          this.ΔΔⲆ = a;
        } else {
          var a;
          if ((a = this.ΔΔⲆ - _w * this.ⵠΔⵠᐃⲆⲆⲆ) < this.min) {
            this.ΔΔⲆ = this.min;
            this.ⵠᐃⵠ = true;
          } else {
            this.ΔΔⲆ = a;
          }
        }
      };
      return Jn;
    },
    ΔⲆⲆΔΔ: function (a, b, c, d, e, f) {
      this.ⵠΔⵠΔᐃ = a;
      this.ⵠΔΔⲆⲆ = b;
      this.ⵠⲆⵠⲆⵠ = c;
      this.ᐃΔᐃΔᐃ = d;
      this.x = e;
      this.Ⲇⵠⵠᐃᐃ = f;
      this.ⵠΔⵠᐃⵠᐃᐃ = function () {
        this.x = this.ΔⵠⲆⲆⲆᐃⵠᐃΔ;
        this.ⵠΔΔⲆⲆ = 0;
      };
      this.ⵠⵠᐃⲆⵠⵠⵠ = function (a) {
        if (a !== this.Ⲇⵠⵠᐃᐃ) {
          this.Ⲇⵠⵠᐃᐃ = a;
          this.ᐃΔᐃΔᐃ = this.x;
          this.ⵠΔΔⲆⲆ = 0;
        }
        if (this.Ⲇⵠⵠᐃᐃ !== this.x) {
          this.ⵠΔΔⲆⲆ += _w;
          if (this.ⵠΔΔⲆⲆ > this.ⵠⲆⵠⲆⵠ) {
            this.x = this.Ⲇⵠⵠᐃᐃ;
          } else {
            var b = this.ⵠΔⵠΔᐃ(this.ⵠΔΔⲆⲆ / this.ⵠⲆⵠⲆⵠ);
            this.x = this.ᐃΔᐃΔᐃ + (this.Ⲇⵠⵠᐃᐃ - this.ᐃΔᐃΔᐃ) * b;
          }
        }
      };
    },
    ᐃΔⵠⵠᐃΔⲆ: function (b, c, d, e, f, g, i, a, j) {
      this.ⵠΔⵠΔᐃ = b;
      this.ⵠΔΔⲆⲆ = c;
      this.ⵠⲆⵠⲆⵠ = d;
      this.ᐃΔᐃΔᐃ = e;
      this.ᐃⵠᐃⵠΔ = f;
      this.x = g;
      this.y = i;
      this.Ⲇⵠⵠᐃᐃ = a;
      this.ᐃⲆⲆⲆΔᐃⵠ = j;
      this.ⵠⵠᐃⲆⵠⵠⵠ = function (a) {
        if (a.x != this.Ⲇⵠⵠᐃᐃ || a.y != this.ᐃⲆⲆⲆΔᐃⵠ) {
          this.Ⲇⵠⵠᐃᐃ = a.x;
          this.ᐃⲆⲆⲆΔᐃⵠ = a.y;
          this.ᐃΔᐃΔᐃ = this.x;
          this.ᐃⵠᐃⵠΔ = this.y;
          this.ⵠΔΔⲆⲆ = mj;
        }
        if (this.Ⲇⵠⵠᐃᐃ != this.x || this.ᐃⲆⲆⲆΔᐃⵠ != this.y) {
          this.ⵠΔΔⲆⲆ += _w;
          if (this.ⵠΔΔⲆⲆ > this.ⵠⲆⵠⲆⵠ) {
            this.x = this.Ⲇⵠⵠᐃᐃ;
            this.y = this.ᐃⲆⲆⲆΔᐃⵠ;
          } else {
            var b = this.ⵠΔⵠΔᐃ(this.ⵠΔΔⲆⲆ / this.ⵠⲆⵠⲆⵠ);
            this.x = this.ᐃΔᐃΔᐃ + (this.Ⲇⵠⵠᐃᐃ - this.ᐃΔᐃΔᐃ) * b;
            this.y = this.ᐃⵠᐃⵠΔ + (this.ᐃⲆⲆⲆΔᐃⵠ - this.ᐃⵠᐃⵠΔ) * b;
          }
        }
      };
    },
    ΔⲆⲆⲆⵠⵠⵠ: function (a) {
      var b = "";
      for (var c = mj; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ΔᐃΔⵠᐃᐃΔ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ⵠⵠᐃΔⵠ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ⵠⲆᐃⲆᐃⵠⵠ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ΔⵠⲆ;
    },
    ⵠⲆΔⵠᐃᐃⲆ: function (b, c, d, e, f, g, h, a) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, h) < Math.min(e, a)) {
        return mk;
      } else {
        return wj;
      }
    },
    ᐃⵠΔⵠᐃᐃᐃ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ⲆⲆΔⲆᐃⵠⲆ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return ie;
    } else {
      return -1;
    }
  };
  const $n = N;
  const eo = on;
  const io = Pj;
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ΔΔⲆΔⵠⲆⵠⲆⲆ;
  };
  const to = A;
  function no(b, c, d, e, f, i) {
    const j = b ^ 55047;
    const a = ((4671 + c) * 22695477 + 1) % 4294967296;
    const k = ~(d & 13622) & (d | 13622);
    const h = (11497 + e) % 65366;
    const l = ~(i & 29486) & 29486 | ~(i & 29486) & i;
    const g = Tw(j, a, k, h, (mk + (21477 + f) * 22695477) % 4294967296);
    Tw(l, j, a, k, h);
    return g ^ 49075;
  }
  function oo(b, c, d, e) {
    const f = (51241 + b) % 65499;
    const g = (24 << (c >> Yk & zn)) + (0 << (c >> 24 & 255)) + (16 << (c >> mj & 255)) + (8 << (c >> 8 & 255));
    const h = (d | 63027) & ~(d & 63027);
    const a = ((60253 + e) * 214013 + 2531011) % 4294967296;
    return ((32743 + (no(f, g, h, a, f, g) ^ Tw(h, a, f, g, h))) * 1664525 + 1013904223) % 4294967296;
  }
  (function (a) {
    var b = Tk;
    if (typeof ΔⵠᐃᐃⲆⵠΔ === "function" && ΔⵠᐃᐃⲆⵠΔ.ΔᐃᐃⲆΔᐃΔ) {
      ΔⵠᐃᐃⲆⵠΔ(a);
      b = un;
    }
    if (typeof ᐃᐃⲆⵠⵠⲆⲆ === "object") {
      ⵠⵠⲆᐃᐃΔⲆᐃⲆ.exports = a();
      b = y;
    }
    if (!b) {
      var c = dj.ⵠⵠΔΔ;
      var d = dj.ⵠⵠΔΔ = a();
      d.ⵠᐃᐃΔⲆⵠᐃⵠᐃ = function () {
        dj.ⵠⵠΔΔ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; arguments.length > a; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document !== "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ᐃᐃⵠⲆΔᐃⲆ, j)).expires === "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) {}
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⵠᐃⵠᐃᐃⵠΔⵠΔ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = Zj; n.length > l; l++) {
            var p = n[l].split("=");
            var q = p.slice(Te).join("=");
            if (q.charAt(Zj) === "\"") {
              q = q.slice(Te, -mk);
            }
            try {
              var s = p[Zj].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) {}
              }
              if (s === e) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) {}
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ⵠᐃⲆⲆΔΔΔⵠⵠ = function () {
        return d.apply({
          json: true
        }, [].slice.call(arguments));
      };
      d.ᐃᐃⵠⲆΔᐃⲆ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ᐃⲆΔⲆᐃᐃⵠᐃⲆ = a;
      return d;
    }(function () {});
  });
  const ro = V;
  var ao = document.getElementById("game_canvas");
  const so = b;
  var ho = ao.getContext("2d");
  var lo = ao.width;
  var jq = ao.height;
  const kq = M;
  var bo = ao.width / 2;
  var lq = ao.height / 2;
  var mq = {
    x: bo,
    y: lq
  };
  const nq = I;
  const po = dk;
  var Co = Te;
  const oq = F;
  var fo = 1;
  const pq = jk;
  var yo = -ie;
  const qq = nk;
  var Po = "J" + Wq;
  var rq = "S" + or;
  var sq = dj;
  const xo = Ei;
  const Jo = lj;
  const Mo = nn;
  const Bo = te;
  const Do = po;
  var Io;
  var tq;
  var uq = (Ko = "O") + "N";
  var vq = mj;
  const _o = v;
  const Fo = gk;
  const Ro = Ck;
  const Go = yk;
  var jo = sq;
  const Lo = w;
  var Wo;
  const wq = vi;
  const No = Nn;
  rq = "N";
  const qo = nq;
  var Ho = "J";
  const xq = H;
  const Yo = Ej;
  var Ko = "O" + Wq;
  const yq = d;
  const Zo = Fe;
  var Xo = jo;
  const $o = Qj;
  var zq;
  const Aq = $k;
  const Bq = U;
  const Cq = D;
  const Dq = Be;
  const Eq = M;
  var Fq = Xo;
  uq = "N" + undefined;
  const Gq = qn;
  const Hq = T;
  const Iq = E;
  const Jq = d;
  const Kq = dk;
  var Lq = Fq;
  const Mq = $i;
  var Nq;
  const Oq = Te;
  const Pq = Kq;
  var Qq;
  const Rq = Hi;
  const Sq = 14;
  var Tq;
  var Uq = Lq;
  const Vq = W;
  var Wq;
  var Xq = Uq;
  const Yq = Cn;
  var Zq;
  const $q = sj;
  var _q = Xq;
  Ho = "O";
  const ar = Nn;
  const br = On;
  const dr = Ei;
  const er = rk;
  var fr;
  const gr = Uk;
  const hr = W;
  var kr = _q = Xq;
  const lr = pq;
  var mr;
  const nr = Oj;
  var jr = kr;
  var or = "J" + (fr = "S");
  function pr(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⵠⲆⲆᐃⲆᐃⵠ = Te;
    return b;
  }
  ao.oncontextmenu = function () {
    return C;
  };
  Po = "J";
  const rr = Qj;
  const sr = Yk;
  const qr = Ok;
  const tr = Ri;
  const ur = wk;
  const vr = J;
  const wr = cn;
  const yr = I;
  const Ar = Aq;
  Ko = uq;
  uq = Wq;
  const Br = k;
  const Dr = vn;
  Wq = or;
  Ko = or;
  const ea = Hk;
  zq = Nq = or + (Ho += Po = rq);
  rq = Ho + Po;
  Qq = Io = tq = or + Ho;
  const ia = Aq;
  const ta = Fk;
  Ko = or + Ho;
  Tq = tq;
  const na = Kj;
  uq = or + Ho;
  Zq = Wo = Io;
  const oa = y;
  Ho = Wq = or;
  const ra = ke;
  const aa = br;
  fr = tq;
  const sa = x;
  const ha = bq;
  mr = Io;
  Po = Ko;
  const la = Mi;
  var ua = dj.devicePixelRatio || Oq;
  const ba = Vn;
  const va = Ck;
  const da = Sj;
  var ca = ho.ΔⵠⵠⵠᐃⵠⲆⲆᐃ || ho.ⵠᐃⵠΔΔⵠᐃⲆⲆ || ho.ⵠⲆᐃⲆⲆᐃⵠᐃⵠ || ho.ΔΔΔⲆΔΔⵠΔΔ || ho.ⵠᐃⵠᐃᐃΔⲆΔⲆ || 1;
  function ma() {
    if (ao.width != dj.innerWidth) {
      ao.width = dj.innerWidth;
      lo = ao.width;
      bo = ao.width / xj;
    }
    if (ao.height != dj.innerHeight) {
      ao.height = dj.innerHeight;
      jq = ao.height;
      lq = ao.height / pq;
    }
    mq = {
      x: bo,
      y: lq
    };
    var a = ao.width;
    var b = ao.height;
    fo = yo === -1 ? ua / ca : yo;
    ao.width = a * fo;
    ao.height = b * fo;
    ao.style.width = a + "px";
    ao.style.height = b + "px";
    ho.scale(fo, fo);
    if (Xw) {
      Xw.ⵠᐃⲆ.ⵠᐃⵠᐃᐃⲆⵠ = a;
      Xw.ⵠᐃⲆ.ᐃᐃᐃᐃᐃΔᐃ = b;
    }
    if (ax.ΔⵠᐃΔΔ) {
      ax.ᐃⲆΔ();
    } else if (bf.ΔⵠᐃΔΔ) {
      bf.ᐃⲆΔ();
    } else if (Zw.ΔⵠᐃΔΔ) {
      Zw.ᐃⲆΔ();
    } else if (Yw.ΔⵠᐃΔΔ) {
      Yw.ᐃⲆΔ();
    }
  }
  var pa = document.getElementById("game_body");
  const Ca = se;
  const Ta = Ei;
  const fa = zn;
  const za = Oq;
  pa.ondragstart = function () {
    return false;
  };
  pa.ondrop = function () {
    return Ei;
  };
  pa.onresize = ma;
  const ya = mj;
  const wa = gn;
  const Pa = sr;
  function Aa(b, c, d, e) {
    const f = ~(b & 32924) & (b | 32924);
    const g = c ^ 25669;
    const i = (Iq << (d & 255)) + (mj << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (24 << (d >> 24 & 255));
    const a = ~(e & 52849) & (e | 52849);
    const j = function (b, c, d, e) {
      const f = (12345 + (36970 + b) * 1103515245) % 2147483648;
      const g = (2531011 + (c + 45004) * 214013) % 4294967296;
      const i = d ^ 49735;
      const a = ~(e & 63410) & e | ~(e & 63410) & 63410;
      const j = Af(f, g, i, a, f);
      const h = function (b, c, d, e, f, i) {
        const j = ~(b & 46933) & b | ~(b & 46933) & 46933;
        const a = ((d + 22745) * 2147483629 + 2147483587) % 2147483647;
        const k = ((e + 58347) * 214013 + 2531011) % 4294967296;
        const h = ~(f & 52727) & f | ~(f & 52727) & 52727;
        const l = ~(i & 20032) & (i | 20032);
        const g = Ek(j, (8 << (c & 255)) + (16 << (c >> 16 & 255)) + (24 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)));
        Lk(a, k, h, l, j);
        return ~(g & 25886) & (g | 25886);
      }(g, i, a, f, g, i);
      return (24 << ((j ^ h) >> 8 & 255)) + (0 << ((j ^ h) >> 16 & 255)) + (8 << ((j ^ h) >> 24 & 255)) + (16 << ((j ^ h) & 255));
    }(f, g, i, a);
    const h = Sw(f, g, i, a);
    return (0 << ((j ^ h) >> p & 255)) + (24 << ((j ^ h) >> 24 & Li)) + (8 << ((j ^ h) >> 8 & 255)) + (16 << ((j ^ h) & 255));
  }
  (function () {
    var b = wj;
    for (var a = ["ms", "moz", "webkit", "o"], c = Rq; c < a.length && !dj.requestAnimationFrame; ++c) {
      dj.requestAnimationFrame = dj[a[c] + "RequestAnimationFrame"];
      dj.cancelAnimationFrame = dj[a[c] + "CancelAnimationFrame"] || dj[a[c] + "CancelRequestAnimationFrame"];
    }
    dj.requestAnimationFrame ||= function (c, d) {
      var e = new Date().getTime();
      var f = Math.max(mj, 16 - (e - b));
      var g = dj.setTimeout(function () {
        c(e + f);
      }, f);
      b = e + f;
      return g;
    };
    dj.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const ka = function () {
    let f = 0;
    let j = 0;
    let k = 0;
    const m = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([115, 116, 97, 99, 107]);
    const n = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
    const o = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
    const a = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([Nn, 114, 97, 119, 73, 109, 97, 103, 101]);
    ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
    const p = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
    const h = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([105, 110, 100, 101, 120, 79, 102]);
    const l = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([77, 97, 116, 104]);
    ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([99, 101, 105, 108]);
    const g = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([102, 108, 111, 111, 114]);
    const q = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
    const b = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([115, 101, 110, 100]);
    const r = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([115, 105, 103, 110]);
    function d(a) {
      try {
        a();
      } catch (a) {
        if (a[m][h](p) !== -1) {
          return 1;
        } else {
          return 0;
        }
      }
      return wj;
    }
    return {
      ΔⵠⲆᐃⵠΔⵠ: function () {
        j++;
        if (j > 1000) {
          j = wj;
          k = d(dj[n][o][a]) || k;
          k = d(dj[q][o][b]) || k;
          k = function (a) {
            try {
              new a();
            } catch (a) {
              if (a[m][h](p) !== -Xn) {
                return Oq;
              } else {
                return In;
              }
            }
            return In;
          }(dj[q]) || k;
        }
        if (Xn === k) {
          f++;
          if (f > 10000) {
            f = 0;
            dj[l][g] = dj[l][r];
          }
        }
      }
    };
  }();
  function xa(b, c, d) {
    const e = b ^ 32587;
    const f = ((19981 + c) * 1664525 + 1013904223) % 4294967296;
    const g = ((39766 + d) * 1664525 + 1013904223) % 4294967296;
    const h = Jr(e, f);
    (function (b, c, d, e, f, g) {
      const i = (2147483587 + (55915 + b) * 2147483629) % 2147483647;
      const a = (12345 + (15503 + g) * 1103515245) % 2147483648;
      const j = Wn(i, (12345 + (12846 + c) * 1103515245) % 2147483648, d ^ 65503, ~(e & 32611) & e | ~(e & 32611) & 32611, ~(f & 58450) & 58450 | ~(f & 58450) & f);
      Jr(a, i);
    })(g, e, f, g, e, f);
    return h ^ 54677;
  }
  const Ja = Kk;
  function Ma(b, c, d, e, f) {
    const i = (b + 139) % 65333;
    const j = (0 << (c & 255)) + (24 << (c >> 8 & 255)) + (16 << (c >> 24 & 255)) + (8 << (c >> 16 & 255));
    const a = (d + 32839) % 65339;
    const k = (0 << (e >> 8 & 255)) + (8 << (e >> 16 & 255)) + (24 << (e >> 24 & 255)) + (16 << (e & Li));
    const h = (8 << (f >> 8 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 24 & 255)) + (0 << (f & 255));
    const l = Wn(i, j, a, k, h);
    const g = no(i, j, a, k, h, i);
    return (24 << ((l ^ g) >> 24 & Br)) + (16 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) & Fe)) + (0 << ((l ^ g) >> 16 & 255));
  }
  function Ba(a) {
    return function (b, c, d, e) {
      const f = (8 << (b >> 8 & 255)) + (24 << (b >> fl & 255)) + (0 << (b >> 24 & 255)) + (16 << (b >> 16 & 255));
      const g = (1 + (c + 44589) * 22695477) % 4294967296;
      const i = (d | 55208) & ~(d & 55208);
      const a = ((e + 25543) * 1103515245 + 12345) % 2147483648;
      const j = Jr(f, g);
      (function (b, c, d, e, f) {
        const g = b ^ 57510;
        const h = ~(f & 11694) & f | ~(f & 11694) & 11694;
        const a = Aa(g, ~(c & 46360) & c | ~(c & 46360) & 46360, ~(d & 25146) & d | ~(d & 25146) & 25146, ~(e & 45890) & (e | 45890));
        Gw(h, g);
      })(i, a, f, g, i);
      return j ^ 44598;
    }(a, 13795, 19269, 47307);
  }
  const Da = mj;
  var Ia = navigator.language || navigator.userLanguage;
  var Er = -new Date().getTimezoneOffset() / 60;
  const Sa = Ik;
  const Qa = qq;
  const _a = Bi;
  var Fa = "Europe";
  const Ra = J;
  const Ga = $q;
  const ja = Zn;
  const La = Sj;
  const Wa = dk;
  var Oa = "South America";
  const Na = ji;
  const qa = Yo;
  var Ha = Fa;
  const Fr = Gi;
  if (Er >= -lr && Er <= 2) {
    Ha = Fa;
  } else if (Er > 2 && Er <= 5) {
    Ha = "Russia";
  } else if (nr < Er && Lo >= Er) {
    Ha = "Asia";
  } else if (Er > 9) {
    Ha = "Australia";
  } else if (Er >= -nr && Er < -Pn) {
    Ha = Ia === "pt-BR" || Ia === "pt-br" || Ia === "pt" || Ia === "pt-pt" ? Oa : "North America";
  } else if (Er < -5) {
    Ha = Ia === "pt-BR" || Ia === "pt-br" || Ia === "pt" || Ia === "pt-pt" ? Oa : "West America";
  }
  var Sk = {
    ⵠᐃⲆΔᐃⲆⵠ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor(Math.random() * (b - mk));
      this.ᐃΔΔΔᐃ = function (a) {
        c = a || Math.floor(Math.random() * (b - ie));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const Ya = Bq;
  const Ka = oq;
  function Va(b, c, d, e, f) {
    Mj(Lw, b, c, d, e, f);
    const g = Hw(Mw[0], Mw[1], Mw[2], Mw[3], Mw[Pe], Mw[mj]);
    const h = Hw(Mw[1], Mw[xq], Mw[Hk], Mw[4], Mw[ya], Mw[1]);
    return (16 << ((g ^ h) >> 16 & 255)) + (0 << ((g ^ h) >> 8 & 255)) + (24 << ((g ^ h) & Br)) + (He << ((g ^ h) >> 24 & 255));
  }
  const Za = rk;
  const Xa = to;
  const $a = Ka;
  const Hr = Bi;
  function Ir(a, b) {
    mi(Lw, a, b);
    const c = Zs(Mw[0], Mw[Xn], Mw[0]);
    Zs(Mw[1], Mw[0], Mw[Te]);
    return c ^ 54357;
  }
  function Jr(a, b) {
    const c = ~(a & 56758) & 56758 | ~(a & 56758) & a;
    const d = ~(b & 21953) & (b | 21953);
    const e = ht(c, d, c, d, c, d);
    const f = function (b, c, d) {
      const e = ~(b & 16347) & 16347 | ~(b & 16347) & b;
      const f = c ^ 30675;
      const g = ~(d & 33945) & (d | 33945);
      const h = hf(e, f, g, e, f, g);
      const a = function (c, d, e, f, i, j) {
        const k = ~(c & 51476) & 51476 | ~(c & 51476) & c;
        const a = ~(d & 65196) & (d | 65196);
        const m = ~(e & 1626) & e | ~(e & 1626) & 1626;
        const h = ~(f & 11312) & 11312 | ~(f & 11312) & f;
        const l = ((i + 51351) * 1103515245 + 12345) % 2147483648;
        const g = (24 << (j >> 16 & oh)) + (0 << (j >> 24 & 255)) + (8 << (j & 255)) + (16 << (j >> 8 & 255));
        const n = function (b, c, d) {
          const e = (b | 5301) & ~(b & 5301);
          const f = (c + 54951) % 65424;
          const g = (0 << (d >> 24 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (He << (d & 255));
          const h = function (b, c, d, e) {
            const f = ((46782 + b) * 2147483629 + 2147483587) % 2147483647;
            const g = (2531011 + (c + 12803) * 214013) % 4294967296;
            const i = (d + 43194) % 65347;
            const a = e ^ 48528;
            const j = ht(f, g, i, a, f, g);
            oo(i, a, f, g);
            return ~(j & 3771) & j | ~(j & 3771) & 3771;
          }(e, f, g, e);
          Wn(f, g, e, f, g);
          return h ^ 33185;
        }(k, a, m);
        const b = ht(h, l, g, k, a, m);
        return (24 << ((n ^ b) >> 24 & 255)) + (16 << ((n ^ b) & 255)) + (0 << ((n ^ b) >> 8 & 255)) + (8 << ((n ^ b) >> 16 & 255));
      }(e, f, g, e, f, g);
      return ((22941 + (h ^ a)) * 2147483629 + 2147483587) % 2147483647;
    }(c, d, c);
    return (Iq << ((e ^ f) >> He & 255)) + (16 << ((e ^ f) & 255)) + (0 << ((e ^ f) >> 16 & 255)) + (24 << ((e ^ f) >> 24 & 255));
  }
  var Kr = [[mj, "DRAGON", 18, 6, 66, 35, mj], [Da, "WINTER", 91, Ik, Oj, 40, He], [Zj, "DESERT", 135, 180, 89, 124, kq], [0, "LAVA", 142, 6, 82, 99, U], [Da, "FOREST", 6, 150, 90, 154, 8], [In, "WINTER", Xk, ji, 90, 150, Da], [1, "b", Hi, 5, 175, mj], [1, "t", 2, 5, 174, 0], [Xn, "t", Oj, nr, 173, In], [1, "b", I, 5, 176, 0], [za, "t", 0, 5, 177, ya], [Te, "t", 3, M, 178, 0], [Te, "t", 4, 5, 179, 0], [1, "b", 0, kq, 180, 0], [ie, "t", Fk, nr, 181, 0], [1, "b", xq, 5, 182, 0], [ie, "b", 1, nr, 183, Zj], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [Oq, "t", 2, 5, 186, Hi], [1, "t", Hi, ta, 187, Da], [mk, "t", 5, 5, 188, 0], [1, "t", Te, Fk, 189, wj], [mk, "b", H, q, 190, 0], [1, "t", 4, 5, 191, wj], [Te, "b", yr, 5, 192, ya], [1, "t", ta, 5, 193, mj], [1, "t", wj, 5, 194, 0], [1, "t", 3, q, 195, 0], [za, "b", ya, 5, 196, ya], [1, "t", kq, Eq, 197, Rq], [1, "t", 2, M, 198, 0], [ie, "b", lr, kq, 199, 0], [Te, "t", 4, 5, 200, 0], [ie, "t", 1, 5, 201, ya], [za, "b", Te, 5, 202, 0], [1, "t", Oj, kq, 203, 0], [1, "t", lr, nr, 204, 0], [1, "t", Vn, z, 205, 0], [1, "b", H, 5, 206, mj], [za, "t", za, 5, 207, 0], [1, "t", Vn, nr, 208, 0], [ie, "t", Hj, 5, 209, 0], [1, "b", Rq, ta, 210, 0], [Xn, "t", 5, z, 211, 0], [1, "t", za, 5, 212, Da], [1, "t", 2, M, 213, 0], [za, "b", ci, 5, 214, mj], [Xn, "t", Eq, 5, 215, Rq], [1, "b", wj, nr, 216, 0], [ie, "t", $i, Fk, 217, mj], [1, "t", Hj, 5, 218, 0], [1, "t", ie, 5, 219, Rq], [Xn, "t", 3, 5, 220, 0], [Oq, "t", 5, nr, 221, 0], [1, "t", jk, Oj, 222, 0], [mk, "t", 4, kq, 223, 0], [Oq, "b", 3, M, 224, ya], [Oq, "t", 1, Eq, 225, 0], [1, "t", 3, 5, 226, In], [1, "b", 0, 5, 227, 0], [Oq, "t", nq, Fk, 228, 0], [1, "t", ta, 5, 229, 0], [Xn, "t", 2, Oj, 230, 0], [1, "t", ya, ta, 231, 0], [Oq, "b", xq, 5, 232, Rq], [Te, "t", za, nr, 233, ya], [1, "t", 4, 5, 234, Rq], [1, "b", za, q, 235, 0], [Oq, "t", nj, 5, 236, 0], [Oq, "t", 2, 5, 237, wj], [1, "t", 0, M, 238, 0], [1, "t", 4, 5, 239, ya], [mk, "b", Hj, ta, 240, Rq], [1, "t", Oj, 5, 241, mj], [1, "b", mk, 5, 242, 0], [ie, "t", Pe, nr, 243, 0], [1, "t", Hj, Oj, 244, 0], [Xn, "t", Xn, 5, 245, Da], [1, "b", 1, 5, 246, wj], [ie, "t", nq, q, 247, Hi], [1, "b", 2, 5, 248, 0], [1, "t", M, 5, 249, ya], [1, "t", 2, q, 250, Zj], [1, "t", 4, ta, 251, mj], [Xn, "b", za, kq, 252, wj], [Oq, "t", 4, 5, 253, Zj], [1, "t", 1, z, 254, mj], [ie, "t", 3, nr, Zo, 0], [mk, "t", z, 5, Ja, mj], [za, "b", Pn, Fk, 257, 0], [1, "t", ba, Eq, 258, Hi], [mk, "b", 3, 5, 259, 0], [1, "t", ta, 5, 260, 0], [1, "b", ya, 5, 261, 0], [ie, "t", I, 5, 262, Rq], [ie, "t", 4, 5, 263, 0], [mk, "t", 2, Fk, 264, 0], [za, "b", 1, 5, 265, 0], [mk, "b", 2, Eq, 266, Da], [za, "t", qo, 5, 267, ya], [Te, "t", $i, 5, 268, In], [ie, "t", 0, 5, 269, Hi], [1, "t", 5, 5, 270, 0], [za, "t", qo, 5, 271, 0], [1, "t", Vn, 5, 272, 0], [Xn, "t", 1, nr, 273, Da], [1, "b", pq, 5, 274, In], [1, "t", Oq, 5, 275, wj], [Xn, "t", Pe, Fk, 276, 0], [1, "b", 1, nr, 277, Hi], [1, "b", 2, 5, 278, 0], [1, "t", za, 5, 279, Da], [za, "t", 4, 5, 280, 0], [Oq, "t", 2, q, 281, Hi], [1, "t", Oj, 5, 282, ya], [Xn, "b", 2, 5, 283, 0], [ie, "t", Oq, 5, 284, mj], [mk, "b", 3, 5, 285, Rq], [ie, "t", 4, 5, 286, 0], [Oq, "t", wj, 5, 287, ya], [1, "t", Fk, Eq, 288, 0], [1, "t", 2, 5, 289, Zj], [1, "b", Oq, 5, 290, Zj], [Oq, "t", Pe, 5, 292, 0], [1, "t", Pn, 5, 291, Hi], [mk, "b", 2, z, 293, 0], [za, "t", Xn, z, 294, 0], [ie, "t", 3, 5, 295, In], [ie, "t", Oj, 5, 296, 0], [za, "b", 0, ta, 297, Rq], [za, "b", 3, M, 298, wj], [1, "t", 4, 5, 299, Hi], [1, "t", xj, Eq, 300, Zj], [1, "t", $i, 5, 301, 0], [za, "b", 0, q, 302, mj], [za, "b", H, 5, 303, mj], [Te, "t", Xn, Na, 303, Hi], [Te, "t", Hj, ur, 303, Rq], [1, "t", 1, q, 304, 0], [1, "t", I, U, 304, Rq], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", mk, zj, 304, 0], [za, "b", 2, 9, 304, Da], [mk, "b", 3, 12, 303, 0], [1, "b", Hk, Rk, 304, 0], [1, "t", za, se, 303, wj], [za, "t", 1, Ga, 304, mj], [1, "t", mk, Vi, 303, Rq], [1, "t", 3, sk, 303, wj], [1, "t", 3, 14, 304, 0], [1, "t", ba, 10, 304, 0], [1, "t", 5, 11, 304, In], [mk, "t", 5, dk, 303, Rq], [1, "t", 5, 16, 304, Da], [1, "t", 5, D, 304, 0], [Xn, "t", jk, 12, 304, Rq], [ie, "t", 1, ke, 303, 0], [1, "b", 3, eo, 303, 0], [mk, "b", Da, G, 303, 0], [Xn, "t", I, 17, 303, 0], [mk, "t", 4, 18, 303, Hi], [1, "t", Pn, 19, 303, Zj], [Xn, "t", 1, vi, 303, In], [Te, "b", 1, 21, 303, 0], [1, "t", xq, 22, 303, ya], [ie, "t", 4, 23, 303, 0], [Xn, "b", Hk, 24, 303, 0], [Oq, "t", kq, 25, 303, 0], [1, "t", 1, 26, 303, Zj], [Oq, "t", lr, 27, 303, Zj], [1, "t", 4, 28, 303, Da], [1, "b", In, 18, 304, Da], [Te, "t", lr, b, 304, 0], [ie, "t", 5, 20, 304, 0], [ie, "b", 2, 21, 304, 0], [ie, "t", 4, 22, 304, 0], [za, "t", 2, 23, 304, In], [1, "t", 1, 24, 304, Zj], [1, "t", Hk, 25, 304, 0], [1, "t", wj, 27, 304, Rq], [Xn, "t", Eq, 26, 304, 0], [1, "b", H, 28, 304, 0], [mk, "t", mk, 29, 304, 0], [ie, "b", mk, 29, 303, Zj], [mk, "b", 2, 30, 303, 0], [Xn, "t", 4, 31, 303, ya], [ie, "t", Hi, 32, 303, 0], [za, "t", Oj, 33, 303, In], [1, "t", lr, 34, 303, 0], [1, "t", 4, 35, 303, wj], [1, "t", 1, 36, 303, 0], [ie, "b", yr, 37, 303, Rq], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", za, 31, 304, wj], [mk, "b", 1, 33, 304, 0], [ie, "t", 2, 35, 304, ya], [1, "t", 5, 34, 304, Da], [1, "b", 2, 36, 304, Rq], [1, "t", 5, 37, 304, Rq], [mk, "t", za, 38, 304, Rq], [ie, "b", 1, 40, 303, In], [mk, "t", ea, 39, 303, Rq], [Te, "t", 3, 42, 304, 0], [1, "t", ta, 38, 303, 0], [Xn, "t", Eq, 39, 304, 0], [1, "t", nr, 41, 303, wj], [1, "t", Mq, 41, 304, Rq], [1, "t", 4, 44, 303, 0], [Xn, "b", Pn, 40, 304, Rq], [1, "b", H, 43, 303, 0], [za, "t", mk, 42, 303, 0], [za, "t", Oq, 43, 304, 0], [Xn, "t", ta, 44, 304, 0], [Te, "b", 1, 45, 303, ya], [ie, "t", Hj, 45, 304, 0], [1, "t", 2, 46, 303, 0], [Oq, "t", Mq, 47, 303, 0], [1, "b", wj, 48, 303, 0], [1, "t", z, 49, 303, ya], [1, "t", pq, 50, 303, 0], [1, "t", ie, 51, 303, In], [1, "t", 4, 52, 303, mj], [1, "t", Oj, 46, 304, wj], [za, "t", xq, 47, 304, 0], [1, "t", kq, 48, 304, Hi], [za, "t", Te, 49, 304, 0], [1, "t", jk, 50, 304, 0], [1, "b", mk, 53, 303, wj], [1, "b", Pn, 51, 304, Hi], [ie, "t", 5, 52, 304, ya], [1, "t", 3, 53, 304, Rq], [Te, "b", 2, 54, 303, 0], [1, "t", Oj, 54, 304, 0], [mk, "t", kq, 55, 303, Rq], [1, "t", 3, 56, 303, Rq], [1, "t", Mq, 57, 303, 0], [1, "t", Oj, 58, 303, Hi], [Xn, "b", Oq, 55, 304, Da], [1, "t", H, 56, 304, mj], [mk, "t", Rq, 57, 304, 0], [Xn, "t", 3, 58, 304, wj], [1, "t", 3, 63, 304, wj], [1, "t", 3, 59, 303, 0], [Oq, "t", $i, 59, 304, 0], [za, "t", nr, 60, 303, Zj], [ie, "t", Zj, 60, 304, 0], [Te, "t", wj, 66, 303, Hi], [Xn, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, wj], [Oq, "t", qo, 67, 303, Hi], [1, "t", fn, 73, 304, Rq], [Te, "t", ci, 76, 303, 0], [1, "t", I, 78, 304, Zj], [1, "t", 1, 61, 303, 0], [Te, "t", 1, 73, 303, mj], [Te, "t", ie, 79, 303, 0], [1, "b", Hj, 62, 304, Da], [Oq, "b", Hj, 70, 303, 0], [za, "t", q, 62, 303, 0], [1, "t", 5, 68, 303, Zj], [za, "t", Oj, 71, 304, 0], [Oq, "t", 5, 77, 304, wj], [1, "t", 5, 75, 303, 0], [1, "t", kq, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, Hi], [za, "t", 3, 63, 303, mj], [1, "t", ta, 82, 304, 0], [1, "b", 2, 65, 304, 0], [Oq, "t", 1, 64, 303, 0], [Te, "t", Xn, 68, 304, 0], [1, "t", xq, 69, 304, 0], [Te, "t", 4, 69, 303, 0], [mk, "t", 5, 66, 304, In], [mk, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", Zj, 71, 303, Da], [1, "t", Pe, 72, 303, 0], [1, "t", 4, 74, 304, 0], [Oq, "t", xj, 74, 303, 0], [za, "t", fn, 75, 304, Rq], [1, "t", mk, 77, 303, wj], [ie, "t", Gi, 78, 303, Da], [za, "t", Mq, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", ie, 81, 304, 0], [Te, "t", Hj, 81, 303, Rq], [mk, "t", Eq, 82, 303, mj], [1, "t", mk, 83, 303, 0], [1, "b", 2, 83, 304, Zj], [1, "t", Te, 84, 304, Rq], [1, "t", Mq, 84, 303, ya], [Te, "t", Oj, 85, 304, Zj], [za, "t", 3, 85, 303, In], [za, "b", 2, 86, 304, ya], [Oq, "t", Oq, 86, 303, ya], [1, "b", 3, 87, 303, Da], [Te, "t", 4, 87, 304, Zj], [za, "t", Mq, 88, 303, 0], [ie, "t", 0, 88, 304, mj], [Oq, "b", Oq, 89, 303, 0], [1, "t", 3, 89, 304, mj], [za, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", Fr, 91, 303, Zj], [Te, "t", 0, 91, 304, 0], [Xn, "b", Hj, 92, 303, 0], [1, "t", ba, 92, 304, In], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, In], [1, "b", fn, 94, 303, 0], [za, "b", 0, 94, 304, Hi], [Oq, "b", 0, 95, 303, 0], [za, "t", Hj, 95, 304, 0], [1, "f", Oq, z, 151, Xn], [1, "f", Pn, ta, 153, ie], [Xn, "f", 0, Eq, 152, Te], [mk, "f", Rq, 5, 147, 1], [1, "f", 0, 5, 144, Te], [Te, "f", 0, M, 140, 1], [1, "f", 1, nr, 149, ie], [1, "f", 1, kq, 146, 1], [1, "f", Xn, 5, 143, 1], [Te, "f", 1, 5, 141, 1], [1, "f", jk, nr, 150, 1], [za, "f", Pn, 5, 148, 1], [1, "f", 2, nr, 145, 1], [Te, "f", Hj, ta, 142, 1], [1, "f", jk, z, 139, 1], [za, "f", pq, ta, 136, 1], [1, "f", pq, 5, 133, 1], [1, "f", lr, 5, 131, 1], [1, "f", 2, 5, 127, 1], [za, "f", pq, 5, 125, Xn], [ie, "f", 1, Fk, 138, 1], [ie, "f", 1, kq, 135, za], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, ie], [1, "f", Xn, q, 128, Xn], [Oq, "f", ie, ta, 126, za], [1, "f", ie, 5, 124, 1], [Te, "f", wj, 5, 129, mk], [1, "f", In, 5, 134, 1], [1, "f", 0, z, 137, 1], [Xn, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, Te], [mk, "f", mk, Eq, 120, 1], [Te, "f", ie, 5, 117, 1], [1, "f", Te, ta, 115, 1], [1, "f", 1, 5, 111, 1], [Oq, "f", 1, Eq, 108, 1], [1, "f", pq, M, 121, ie], [1, "f", xq, Eq, 118, za], [1, "f", xq, z, 116, za], [1, "f", 2, Fk, 113, 1], [Oq, "f", 2, 5, 110, ie], [Te, "f", 0, kq, 119, Oq], [1, "f", Zj, 5, 114, 1], [1, "f", 0, Eq, 112, Xn], [za, "f", 0, 5, 109, 1], [1, "f", Oq, 5, 106, ie], [Te, "f", 1, M, 103, 1], [1, "f", 1, 5, Cn, 1], [Te, "f", 1, ta, 97, mk], [Oq, "f", Xn, ta, 95, Xn], [1, "f", xj, 5, 107, mk], [Oq, "f", pq, q, 105, 1], [1, "f", 2, kq, 102, 1], [mk, "f", 2, 5, 99, mk], [1, "f", H, 5, 96, za], [ie, "f", 2, 5, 94, Oq], [1, "f", 0, Eq, 104, 1], [1, "f", Da, 5, 101, 1], [Oq, "f", Zj, z, 98, 1], [1, "f", 0, 5, 93, ie], [1, "f", Oq, 5, 92, 1], [Xn, "f", 1, 5, 89, mk], [1, "f", Oq, M, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [Te, "f", 1, Fk, 78, 1], [ie, "f", 2, kq, 90, 1], [ie, "f", pq, Fk, 88, Xn], [Oq, "f", pq, 5, 85, Xn], [1, "f", xj, 5, 82, Te], [1, "f", 2, z, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", lr, Oj, 75, za], [Oq, "f", 2, q, 72, 1], [1, "f", 0, Eq, 91, za], [za, "f", 0, Fk, 87, Xn], [1, "f", ya, 5, 84, Xn], [za, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, ie], [1, "f", Da, Fk, 74, 1], [1, "f", 1, nr, 73, 1], [1, "f", Xn, Fk, 71, 1], [1, "f", 1, 5, 68, za], [Xn, "f", 1, 5, 66, Xn], [1, "f", 1, 5, 62, za], [ie, "f", Te, q, 59, Te], [Xn, "f", 1, Fk, 56, za], [Te, "f", 1, Eq, 53, 1], [1, "f", za, 5, 50, 1], [1, "f", 2, nr, 70, Oq], [Xn, "f", lr, 5, 67, 1], [1, "f", 2, 5, 65, 1], [ie, "f", xq, 5, 63, 1], [ie, "f", Hj, 5, 60, 1], [Te, "f", 2, Eq, 57, za], [mk, "f", Pn, 5, 54, za], [1, "f", 2, ta, 51, Te], [1, "f", Da, ta, 69, 1], [mk, "f", Zj, Eq, 64, mk], [mk, "f", 0, 5, 61, 1], [1, "f", Zj, Oj, 58, 1], [ie, "f", 0, 5, 55, 1], [ie, "f", 0, 5, 52, ie], [mk, "f", mj, 5, 49, 1], [1, "f", 0, ta, 45, 1], [Oq, "f", Rq, q, 42, 1], [za, "f", 0, 5, 38, Te], [Xn, "f", 0, kq, 34, za], [1, "f", 0, 5, 31, za], [Xn, "f", ie, 5, 48, 1], [1, "f", Xn, 5, 44, Xn], [ie, "f", 1, 5, 41, mk], [Te, "f", 1, 5, 37, 1], [1, "f", Te, 5, 33, 1], [1, "f", 1, 5, 29, ie], [za, "f", 2, 5, 30, 1], [za, "f", H, ta, 32, Te], [Xn, "f", 2, 5, 35, za], [Te, "f", 2, 5, 39, 1], [1, "f", Hj, Eq, 46, za], [1, "f", pq, 5, 43, ie], [1, "f", Oq, M, 47, 1], [Te, "f", mj, 5, 40, za], [1, "f", 0, M, 36, Xn], [Te, "f", 0, 5, 28, Xn], [1, "f", Te, 5, 25, 1], [1, "f", 1, nr, 22, 1], [1, "f", 1, Oj, 20, ie], [ie, "f", 1, z, 16, mk], [Xn, "f", za, 5, ja, za], [za, "f", 1, ta, sk, 1], [1, "f", 2, 5, 27, Oq], [ie, "f", Hj, z, 24, 1], [mk, "f", 2, 5, 21, Xn], [Te, "f", xq, ta, 19, 1], [Xn, "f", pq, kq, Ga, 1], [1, "f", 2, 5, 12, za], [1, "f", jk, q, R, Xn], [1, "f", 0, 5, 26, za], [1, "f", 0, 5, 23, 1], [mk, "f", mj, 5, 14, Xn], [1, "f", ya, 5, 11, ie], [ie, "f", Da, ta, 17, mk], [za, "f", za, nr, 18, 1], [1, "f", 1, nr, He, mk], [Xn, "f", mj, 5, ia, 1], [1, "f", Xn, kq, Qa, Oq], [mk, "f", 0, Fk, 5, 1], [1, "f", 1, 6, M, 1], [1, "f", xj, 7, 5, Xn], [mk, "f", 0, Bi, 5, Te], [1, "f", Oq, 9, 5, 1], [ie, "f", 1, 12, q, ie], [1, "f", 1, 15, 5, 1], [ie, "f", Xn, Yo, 5, Xn], [1, "f", Oq, 22, 5, 1], [Xn, "f", 1, 26, 5, Xn], [ie, "f", 2, 10, Eq, ie], [1, "f", H, Cq, nr, 1], [mk, "f", jk, ck, 5, 1], [1, "f", 2, 18, 5, 1], [ie, "f", pq, 21, 5, 1], [1, "f", pq, 23, Eq, Oq], [1, "f", Pn, 25, 5, za], [1, "f", Hj, 27, z, 1], [za, "f", Zj, nn, ta, 1], [Oq, "f", 0, Do, 5, 1], [1, "f", Zj, 19, 5, Te], [1, "f", 0, 24, nr, Te], [Oq, "f", 0, 28, 5, Oq], [Oq, "f", ie, 20, Oj, 1], [1, "f", Xn, 29, ta, 1], [Xn, "f", Te, 32, 5, za], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, kq, 1], [1, "f", 1, 41, Oj, mk], [1, "f", Xn, 45, 5, 1], [1, "f", xj, 30, ta, 1], [1, "f", pq, 33, kq, ie], [za, "f", pq, 36, 5, Te], [Te, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, Oq], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, z, 1], [1, "f", ya, 43, 5, Oq], [Xn, "f", 0, 40, q, Oq], [Te, "f", 0, 37, 5, 1], [Xn, "f", 0, 34, 5, mk], [1, "f", mj, 31, 5, 1], [za, "f", 0, 47, 5, 1], [Xn, "f", 1, 48, 5, ie], [ie, "f", 1, 51, 5, Oq], [1, "f", ie, 53, 5, mk], [1, "f", ie, 57, Eq, 1], [1, "f", 1, 60, kq, 1], [Te, "f", 1, 63, q, mk], [1, "f", 1, 65, M, mk], [1, "f", xj, 64, 5, 1], [1, "f", Hj, 62, q, 1], [za, "f", 2, 59, 5, 1], [Xn, "f", 2, 56, q, Te], [Xn, "f", 2, 52, 5, 1], [Oq, "f", 2, 49, ta, mk], [Oq, "f", 2, 54, 5, Te], [1, "f", 0, 50, q, 1], [Xn, "f", In, 55, M, Oq], [1, "f", 0, 58, Fk, za], [1, "f", Hi, 61, Eq, ie], [1, "f", 0, 66, 5, Te], [1, "f", 1, 67, 5, Te], [Oq, "f", za, 70, 5, za], [za, "f", 1, 72, 5, Xn], [1, "f", 1, 75, z, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, ta, 1], [mk, "f", Hj, 71, 5, ie], [1, "f", 2, 74, Fk, Xn], [mk, "f", 2, 76, 5, 1], [za, "f", lr, 78, q, ie], [Oq, "f", ya, 69, 5, Te], [1, "f", 0, 73, ta, 1], [za, "f", 0, 77, nr, Oq], [za, "f", Rq, 80, 5, Oq], [Te, "f", Oq, 81, 5, za], [Te, "f", 1, 84, nr, 1], [1, "f", 1, 87, 5, ie], [1, "f", 1, 89, q, mk], [1, "f", 1, 92, kq, mk], [1, "f", 1, 94, 5, 1], [ie, "f", 0, 82, 5, 1], [1, "f", H, 83, Fk, 1], [Xn, "f", xq, 85, q, ie], [1, "f", 2, 88, kq, 1], [1, "f", 2, 90, 5, mk], [1, "f", xj, 93, Eq, za], [Te, "f", 2, 95, nr, 1], [za, "f", 0, 86, M, mk], [1, "f", mj, 91, Fk, za], [ie, "f", 2, 6, 153, 1], [Te, "f", mk, Ro, 152, za], [1, "t", za, 93, 301, 0], [1, "t", nq, 94, 302, In], [mk, "t", 5, 95, 302, 0], [1, "t", Oj, 93, 302, Rq], [Te, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, ya], [1, "t", Oj, 90, 302, Rq], [1, "b", 2, 92, 301, Zj], [Oq, "t", ie, 91, 301, wj], [ie, "t", 2, 90, 301, Rq], [Oq, "b", 2, 89, 302, Da], [Te, "t", 4, 89, 301, Zj], [za, "t", Oq, 88, 302, 0], [za, "t", xj, 88, 301, In], [mk, "t", ci, 87, 302, ya], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, mj], [Xn, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, mj], [Te, "b", 2, 84, 302, mj], [1, "t", Oj, 83, 302, 0], [Xn, "t", 1, 82, 302, 0], [1, "t", q, 81, 302, 0], [Te, "t", jk, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", lr, 78, 302, Rq], [1, "b", ie, 77, 302, 0], [1, "b", 2, 76, 302, 0], [za, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [Oq, "b", 1, 73, 302, wj], [za, "t", lr, 72, 302, 0], [1, "t", 4, 71, 302, ya], [1, "b", 3, 70, 302, mj], [1, "t", 1, 69, 302, Rq], [mk, "t", 2, 68, 302, wj], [1, "t", Fk, 67, 302, 0], [1, "b", Xn, 66, 302, Rq], [Xn, "t", 2, 65, 302, 0], [1, "t", Gi, 64, 302, 0], [1, "b", ci, 63, 302, wj], [1, "t", Fk, 62, 302, wj], [ie, "b", 1, 61, 302, Zj], [1, "t", qo, 60, 302, 0], [1, "t", 4, 59, 302, 0], [Te, "b", 2, 58, 302, In], [Te, "t", 5, 57, 302, 0], [mk, "t", ie, 56, 302, 0], [Xn, "t", 3, 55, 302, Rq], [Te, "t", $i, 54, 302, Hi], [ie, "t", 1, 53, 302, Rq], [1, "t", Eq, 52, 302, Rq], [Te, "t", 2, 51, 302, 0], [za, "t", Vn, 50, 302, 0], [1, "t", 2, 49, 302, Da], [1, "b", 1, 48, 302, 0], [ie, "t", 3, 47, 302, Da], [mk, "t", 4, 46, 302, In], [1, "t", mk, 45, 302, Rq], [Oq, "t", 2, 44, 302, Zj], [1, "t", q, 43, 302, wj], [1, "t", 2, 42, 302, 0], [ie, "t", Te, 41, 302, wj], [Oq, "t", Mq, 40, 302, 0], [za, "b", H, 39, 302, 0], [za, "t", 5, 38, 302, 0], [1, "t", ie, 37, 302, 0], [za, "t", 2, 36, 302, Da], [Oq, "t", 5, 35, 302, 0], [Oq, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", Fr, 32, 302, 0], [za, "b", 1, 31, 302, 0], [1, "t", lr, 30, 302, Da], [ie, "t", 4, 29, 302, Hi], [Xn, "t", 2, 28, 302, 0], [1, "t", Oj, 27, 302, mj], [1, "b", 3, 26, 302, 0], [Oq, "t", 1, 25, 302, Da], [Xn, "t", Fr, 24, 302, Hi], [za, "t", xq, 23, 302, ya], [1, "t", 1, 22, 302, mj], [1, "t", 5, 21, 302, 0], [1, "t", pq, 20, 302, Hi], [1, "t", 4, Dq, 302, Zj], [ie, "b", 1, W, 302, 0], [1, "t", nr, 17, 302, Rq], [1, "t", Hk, gk, 302, 0], [ie, "t", Xn, _o, 302, Hi], [1, "t", M, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [ie, "t", 1, 11, 302, Zj], [Xn, "t", 2, 10, 302, 0], [mk, "t", 4, fk, 302, 0], [mk, "b", 3, 8, 302, 0], [1, "t", Oj, zj, 302, wj], [1, "t", 5, cq, 302, wj], [ie, "b", 2, U, 302, Da], [1, "t", mk, qq, 301, Da], [1, "t", 4, 6, 300, Rq], [za, "t", xj, nk, 299, Hi], [ie, "b", mj, 6, 298, 0], [1, "t", kq, 6, 297, Zj], [mk, "t", jk, Ck, 296, 0], [1, "t", mj, 6, 295, 0], [1, "b", lr, Ro, 294, 0], [za, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, Zj], [za, "b", 0, Na, 291, 0], [1, "t", lr, 6, 290, 0], [1, "t", Fk, Na, 289, Rq], [1, "t", ie, 6, 288, 0], [ie, "t", nj, nk, 287, In], [mk, "t", xq, 6, 286, 0], [1, "t", q, U, 285, 0], [ie, "t", H, 6, 284, 0], [Oq, "b", Zj, U, 283, In], [1, "t", pq, 6, 282, Hi], [Oq, "t", Oj, ji, 281, 0], [1, "b", 2, Ro, 280, Hi], [za, "t", z, 6, 279, 0], [1, "t", ie, va, 278, 0], [1, "t", 4, Bq, 277, Hi], [mk, "t", 3, Ya, 276, 0], [Xn, "t", Oj, 6, 275, 0], [1, "b", Hi, 6, 274, 0], [1, "t", 5, U, 273, 0], [ie, "t", Xn, 6, 272, 0], [1, "t", 4, 6, 271, Rq], [1, "b", nq, Ro, 270, 0], [1, "t", M, Qa, 269, 0], [za, "t", 1, qq, 268, 0], [1, "t", Gi, ji, 267, 0], [1, "t", za, 6, 266, 0], [Xn, "t", 3, 6, 265, 0], [1, "t", 4, Na, 264, Zj], [Te, "b", pq, 6, 263, 0], [1, "t", 5, 6, 262, 0], [za, "t", I, Qa, 261, 0], [mk, "t", 0, 6, 260, 0], [Xn, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, mj], [1, "t", I, 6, 257, 0], [ie, "t", Gi, 6, 255, mj], [1, "t", 3, 6, 254, wj], [1, "t", Eq, 6, 253, mj], [1, "b", lr, 6, 252, 0], [mk, "t", ta, 6, 251, 0], [Xn, "t", 1, Bq, 250, 0], [Te, "t", 3, va, 249, 0], [1, "t", Vn, Bq, 248, 0], [mk, "b", ea, 6, 247, 0], [Oq, "t", 5, Ck, 246, mj], [1, "t", yr, 6, 245, 0], [1, "t", Oj, va, 244, 0], [ie, "t", mj, 6, 243, 0], [Xn, "t", 4, 6, 242, Zj], [1, "t", I, 6, 241, In], [1, "t", 5, qq, 240, 0], [1, "b", 0, 6, 239, mj], [ie, "t", 3, 6, 238, 0], [1, "t", Fr, 6, 237, 0], [Te, "t", 1, 6, 236, 0], [Te, "t", nr, qq, 235, 0], [Xn, "b", 2, ji, 234, Rq], [Oq, "t", xq, 6, 233, Rq], [Xn, "t", nj, Ya, 232, Da], [Oq, "b", Hk, Ya, 231, 0], [Oq, "t", 5, Na, 230, 0], [Xn, "t", za, 6, 229, 0], [1, "t", 2, U, 228, mj], [za, "t", 5, 6, 227, mj], [1, "b", 2, Ya, 226, mj], [ie, "t", 4, 6, 225, 0], [1, "t", 0, Bq, 224, 0], [1, "t", xq, 6, 223, 0], [Xn, "t", In, Bq, 222, Zj], [ie, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, Ya, 219, 0], [ie, "t", 5, va, 218, In], [1, "t", 0, Na, 217, 0], [1, "t", qo, 6, 216, 0], [1, "b", Rq, 6, 215, 0], [Te, "t", 4, 6, 214, Rq], [Oq, "t", H, Ya, 213, 0], [za, "t", mj, Ya, 212, In], [1, "t", pq, Ya, 211, ya], [mk, "b", 3, qq, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", kq, Bq, 207, wj], [Xn, "t", 2, 6, 208, 0], [1, "t", 0, Ck, 206, Hi], [1, "t", 2, ji, 205, Zj], [1, "t", jk, 6, 203, wj], [ie, "b", wj, Ya, 202, 0], [1, "t", yr, nk, 201, 0], [1, "t", 4, Na, 199, 0], [Te, "t", 0, Na, 198, 0], [za, "t", jk, Bq, 197, 0], [1, "t", 4, va, 196, 0], [Oq, "t", 1, 6, 195, ya], [za, "t", 3, va, 194, In], [ie, "t", 4, va, 192, Zj], [1, "t", 2, 6, 191, ya], [Xn, "b", Da, nk, 190, 0], [1, "t", 3, U, 189, Hi], [Te, "t", 4, va, 187, Rq], [1, "b", 0, U, 186, mj], [1, "t", H, 6, 185, 0], [Xn, "t", Pe, 6, 184, Hi], [Xn, "t", xj, Bq, 183, 0], [1, "t", 0, Ro, 182, 0], [ie, "b", 2, Xk, 181, 0], [1, "t", M, 6, 180, Da], [1, "t", 2, ji, 179, Rq], [1, "t", 0, nk, 178, 0], [Xn, "t", jk, nk, 177, 0], [1, "t", Gi, U, 176, 0], [1, "b", Hj, Bq, 175, 0], [1, "t", 1, U, 174, ya], [1, "t", 5, 6, 173, In], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, Da], [Te, "t", 4, 6, 200, ya], [Te, "t", Pn, 6, 193, Rq], [Oq, "t", Hj, nk, 188, Rq], [1, "f", 1, 6, 150, Oq], [1, "f", Pn, 6, 151, 1], [1, "f", 2, 6, 149, 1], [mk, "f", 1, 6, 148, 1], [ie, "f", jk, 6, 147, Oq], [za, "f", Pn, Xk, 145, ie], [1, "f", 2, 6, 143, 1], [za, "f", 1, 6, 146, Te], [Xn, "f", 1, Na, 144, ie], [1, "f", Oq, nk, 142, 1], [1, "f", 2, 6, 141, 1], [ie, "f", xj, 6, 139, 1], [ie, "f", 2, Ro, 137, mk], [Oq, "f", 2, 6, 135, 1], [1, "f", 2, Na, 133, za], [1, "f", 1, 6, 140, 1], [za, "f", 1, 6, 138, 1], [Oq, "f", 1, 6, 136, za], [mk, "f", 1, 6, 134, Xn], [1, "f", 1, 6, 132, 1], [Oq, "f", Pn, 6, 131, 1], [1, "f", 2, U, 129, za], [1, "f", Hj, va, 127, 1], [1, "f", Pn, Xk, 125, 1], [1, "f", 2, 6, 123, 1], [ie, "f", pq, Bq, 121, 1], [1, "f", 1, Ck, 130, 1], [ie, "f", mk, 6, 128, Oq], [Xn, "f", mk, qq, 126, Xn], [1, "f", Oq, 6, 124, 1], [1, "f", Xn, va, 122, Xn], [ie, "f", 1, 6, 120, mk], [1, "f", 2, Bq, 119, 1], [1, "f", 2, 6, 117, 1], [mk, "f", xj, U, 115, Xn], [1, "f", pq, 6, 113, mk], [1, "f", xq, 6, 111, ie], [Xn, "f", pq, 6, 109, Te], [Xn, "f", mk, 6, 118, Xn], [za, "f", Te, 6, 116, Te], [1, "f", 1, 6, 114, Oq], [1, "f", Oq, 6, 112, za], [1, "f", 1, 6, 110, 1], [1, "f", 1, qq, 108, za], [mk, "f", za, 6, 106, 1], [1, "f", 1, 6, 104, 1], [mk, "f", 2, Ck, 107, 1], [ie, "f", pq, 6, 105, ie], [Te, "f", pq, 6, 103, Te], [1, "f", 2, 6, 101, 1], [ie, "f", jk, Xk, 99, 1], [ie, "f", Pn, 6, 97, 1], [Oq, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, Oq], [1, "f", 2, 6, 91, 1], [Xn, "f", 1, 6, 102, Te], [Xn, "f", 1, 6, Yq, 1], [Oq, "f", Oq, 6, 98, 1], [1, "f", 1, 6, 96, mk], [Te, "f", Oq, 6, 94, ie], [mk, "f", Oq, 6, 92, 1], [1, "f", ie, Ya, 90, 1], [1, "f", 1, va, 88, mk], [1, "f", 1, 6, 86, za], [Oq, "f", Hj, 6, 89, Oq], [Xn, "f", 2, ji, 87, za], [1, "f", lr, nk, 85, Oq], [1, "f", Hj, va, 83, 1], [za, "f", Hj, 6, 81, 1], [1, "f", Hj, Ck, 79, 1], [Te, "f", jk, 6, 77, 1], [1, "f", 1, 6, 84, 1], [ie, "f", Te, Bq, 82, 1], [1, "f", 1, 6, 80, Te], [Te, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, Te], [1, "f", 2, 6, 75, Oq], [1, "f", 2, 6, 73, Oq], [1, "f", xq, 6, 71, za], [1, "f", Pn, 6, 69, za], [ie, "f", Hj, 6, 67, 1], [Oq, "f", pq, Na, 65, 1], [1, "f", za, 6, 74, mk], [Te, "f", 1, 6, 72, za], [1, "f", Oq, 6, 70, 1], [1, "f", za, 6, 68, 1], [mk, "f", 1, Ro, 66, za], [mk, "f", Oq, 6, 64, za], [ie, "f", 2, U, 63, ie], [Oq, "f", 2, 6, 61, Oq], [1, "f", jk, 6, 59, Xn], [Xn, "f", 2, 6, 57, Xn], [za, "f", H, Xk, 55, 1], [ie, "f", 2, 6, 53, 1], [za, "f", 2, va, 51, 1], [1, "f", Xn, Xk, 62, za], [1, "f", 1, U, 60, Xn], [za, "f", 1, 6, 58, mk], [ie, "f", 1, 6, 56, Oq], [1, "f", Oq, U, 54, 1], [Oq, "f", za, 6, 52, mk], [Te, "f", 1, 6, 50, 1], [za, "f", jk, 6, 49, 1], [1, "f", 2, 6, 47, Te], [Xn, "f", Hj, 6, 45, 1], [1, "f", 2, Na, 43, za], [Xn, "f", 2, qq, 41, za], [1, "f", lr, 6, 39, za], [Xn, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", Te, 6, 44, Te], [Oq, "f", 1, 6, 42, Xn], [Xn, "f", ie, 6, 40, Te], [za, "f", Oq, nk, 38, ie], [1, "f", 2, 6, 37, Oq], [mk, "f", 2, qq, 35, Xn], [Xn, "f", 2, 6, 33, mk], [1, "f", pq, U, 31, 1], [1, "f", 2, 6, 29, 1], [za, "f", 2, Bq, 27, Xn], [1, "f", 1, 6, 36, mk], [za, "f", 1, va, 34, Xn], [za, "f", Te, nk, 32, 1], [1, "f", 1, Qa, 30, 1], [mk, "f", Xn, 6, 28, Xn], [Te, "f", mk, 6, 26, Te], [1, "f", Pn, Ro, 25, mk], [Xn, "f", 2, Na, 23, Oq], [mk, "f", Hj, ji, 21, 1], [1, "f", 2, Na, so, Xn], [Xn, "f", Hj, 6, 17, ie], [1, "f", xj, 6, eo, 1], [1, "f", 1, Bq, 24, 1], [1, "f", 1, 6, 22, Xn], [za, "f", za, 6, qi, 1], [Xn, "f", 1, 6, P, 1], [Xn, "f", za, 6, 16, Te], [mk, "f", xj, 6, 13, Xn], [1, "f", pq, qq, nn, 1], [Xn, "f", Hj, 6, $o, mk], [1, "f", pq, 6, ur, 1], [1, "f", 1, Bq, di, Te], [Oq, "f", ie, Ro, 12, Te], [za, "f", 1, Ck, 10, ie], [1, "f", ie, Na, 8, 1], [Oq, "f", 1, 6, Xk, Te], [Xn, "f", 1, aa, 6, 1], [Oq, "f", 2, ur, 6, 1], [1, "f", 2, w, 6, 1], [za, "f", lr, 11, 6, Xn], [za, "f", xj, vn, qq, Oq], [1, "f", H, $q, 6, 1], [Oq, "f", ie, Bo, Qa, Xn], [Xn, "f", Xn, da, 6, 1], [Xn, "f", 1, po, 6, 1], [Oq, "f", ie, gk, nk, Oq], [1, "f", Te, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", Te, 22, nk, Xn], [mk, "f", 1, 24, va, 1], [1, "f", 1, 26, 6, ie], [1, "f", 2, 17, Ck, 1], [za, "f", pq, Dq, Na, 1], [1, "f", pq, 21, 6, mk], [Xn, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [Oq, "f", jk, 27, 6, Oq], [Xn, "f", 2, 29, Qa, Te], [Oq, "f", 2, 31, 6, 1], [mk, "f", lr, 33, 6, mk], [1, "f", 1, 28, Ro, 1], [1, "f", 1, 30, ji, ie], [mk, "f", za, 32, 6, Oq], [za, "f", Oq, 34, qq, ie], [1, "f", 2, 67, 6, 1], [Oq, "f", 2, 69, va, za], [1, "f", Pn, 71, 6, 1], [za, "f", lr, 73, 6, 1], [mk, "f", 2, 75, 6, ie], [1, "f", za, 68, 6, Xn], [za, "f", za, 70, va, Oq], [1, "f", 1, 72, 6, Oq], [za, "f", mk, 74, 6, mk], [1, "f", Oq, 76, 6, Oq], [za, "f", 2, 77, 6, za], [1, "f", 2, 79, Bq, ie], [ie, "f", H, 81, va, Xn], [za, "f", 2, 83, Ya, 1], [Xn, "f", Pn, 85, 6, 1], [ie, "f", 1, 78, 6, mk], [Oq, "f", 1, 80, 6, 1], [1, "f", 1, 82, va, 1], [Oq, "f", 1, 84, Na, 1], [1, "f", ie, 86, 6, mk], [1, "f", jk, 87, 6, 1], [za, "f", 2, 89, 6, Oq], [1, "f", lr, 91, Ck, 1], [1, "f", 2, 93, 6, mk], [mk, "f", za, 88, Na, Te], [Oq, "f", mk, 90, 6, Te], [za, "f", Xn, 92, ji, Te], [Te, "f", Xn, 94, 6, ie], [1, "f", H, 95, 6, 1], [ie, "f", 1, 95, ur, ie], [Xn, "f", 1, 83, 7, za], [mk, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, Oq], [za, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, ie], [ie, "f", Te, 73, 7, Xn], [1, "f", 1, 71, 7, 1], [Oq, "f", mk, 69, wk, 1], [1, "f", 1, 33, $k, ie], [za, "f", Te, 31, 7, 1], [1, "f", ie, 29, $k, mk], [ie, "f", mk, 27, 7, 1], [mk, "f", ie, 25, 7, Xn], [za, "f", mk, 23, Ar, Te], [mk, "f", mk, 21, $k, Xn], [ie, "f", 1, 19, 7, Xn], [Oq, "f", za, m, cq, 1], [1, "f", Xn, 15, Ni, ie], [1, "f", mk, 13, 7, 1], [mk, "f", Te, pk, 7, 1], [1, "f", 1, w, 7, 1], [za, "f", 1, 7, ia, Xn], [za, "s", 0, 7, Bi, ie], [Te, "t", 4, 7, 174, 0], [Oq, "t", Eq, $n, 175, 0], [1, "t", Mq, $n, 176, In], [Te, "b", Pn, Ni, 177, mj], [za, "t", 3, 94, 301, wj], [1, "b", 3, 95, 301, 0], [Oq, "t", 4, 96, 301, Zj], [Xn, "t", Te, 97, 301, mj], [Oq, "t", 2, 98, 301, Da], [mk, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, Da], [1, "t", 4, 96, 304, Hi], [1, "t", Hj, 96, 302, wj], [1, "t", 2, 97, 304, Zj], [mk, "t", lr, 96, 303, 0], [1, "t", ta, 97, 303, Hi], [1, "t", 5, 98, 304, 0], [ie, "b", H, 97, 302, 0], [mk, "b", 2, 99, 304, wj], [1, "t", 1, 98, 303, ya], [Xn, "t", 4, 98, 302, Hi], [1, "t", nj, 99, 303, Hi], [1, "t", 4, 100, 304, Rq], [1, "t", kq, 99, 302, 0], [za, "t", 5, 101, 303, Zj], [1, "t", 2, 100, 303, 0], [1, "t", 0, _j, 302, In], [1, "t", mj, 101, 304, 0], [Xn, "t", Fr, 102, 304, mj], [Te, "f", 0, 94, 7, Xn], [1, "f", 1, 93, ia, Xn], [1, "f", za, 92, 7, 1], [Te, "f", mj, 91, 7, Oq], [za, "f", 1, 90, Aq, 1], [Oq, "f", 1, 89, ur, za], [Oq, "f", ya, 88, Ni, mk], [Te, "f", Xn, 87, $n, ie], [1, "f", 1, 86, 7, Xn], [1, "f", Te, 85, Ar, Te], [1, "f", 0, 84, $n, 1], [1, "f", mk, 82, $k, 1], [Oq, "f", In, 80, 7, Oq], [Oq, "f", za, 78, 7, ie], [Te, "f", Hi, 76, wk, 1], [1, "f", Oq, 74, ia, 1], [za, "f", Zj, 72, cq, 1], [za, "f", Rq, 70, 7, 1], [za, "f", Xn, 68, Aq, Xn], [mk, "f", Te, 32, 7, 1], [1, "f", Zj, 30, $n, 1], [za, "f", 1, 28, wk, 1], [1, "f", 0, 26, 7, ie], [mk, "f", 1, 24, $n, 1], [Oq, "f", Da, 22, 7, ie], [Xn, "f", mk, wq, $n, Xn], [1, "f", 0, 18, 7, 1], [1, "f", mk, p, 7, 1], [za, "f", Rq, Wa, $k, ie], [1, "f", 1, 12, 7, Xn], [1, "f", wj, gn, wk, 1], [1, "f", 1, 8, 7, 1], [1, "s", za, $n, fk, 1], [1, "f", mj, 95, 152, 1], [1, "f", Xn, 95, 151, Oq], [ie, "f", Rq, 95, 11, Xn], [1, "f", Xn, 95, gr, Te], [za, "f", Oq, 95, 14, mk], [1, "f", 1, 95, 19, Xn], [Xn, "f", wj, 95, 15, ie], [Te, "f", In, 95, 20, Te], [1, "f", mk, 95, 21, 1], [1, "f", 1, 95, 26, Oq], [Oq, "f", 1, 95, 37, 1], [Oq, "f", Rq, 95, 44, ie], [1, "f", Oq, 95, 50, 1], [1, "f", Xn, 95, 52, 1], [ie, "f", ya, 95, 53, mk], [ie, "f", 1, 95, 54, ie], [mk, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, za], [za, "f", 1, 95, 64, Oq], [1, "f", 0, 95, 58, 1], [ie, "f", 0, 95, 61, Oq], [ie, "f", Hi, 95, 68, 1], [1, "f", ya, 95, 72, ie], [ie, "f", Zj, 95, 78, Oq], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [Oq, "f", ie, 95, 128, ie], [1, "f", Zj, 95, 85, 1], [Xn, "f", Hi, 95, 91, 1], [ie, "f", wj, 95, 95, 1], [Xn, "f", 0, 95, 114, ie], [1, "f", lr, 95, 113, 1], [1, "f", ie, 95, 119, Te], [Xn, "f", 0, 95, 120, Te], [1, "f", 1, 95, 121, Xn], [ie, "f", mj, 95, 127, 1], [mk, "f", Xn, 95, 130, Te], [Te, "f", 0, 95, 131, ie], [1, "f", Xn, 95, 132, 1], [za, "f", 1, 95, 136, mk], [1, "f", 0, 95, 137, 1], [ie, "f", Zj, 95, 143, Oq], [1, "f", In, 95, 147, Te], [1, "f", Xn, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, vr, mk], [1, "f", Hi, 95, 8, 1], [1, "f", 1, 95, Qj, 1], [ie, "f", 0, 95, 13, 1], [ie, "f", 1, 95, G, 1], [1, "f", za, 95, 17, za], [Oq, "f", wj, 95, Vj, 1], [1, "f", Te, 95, 45, Te], [za, "f", 0, 95, 51, Xn], [ie, "f", 1, 95, 56, 1], [1, "f", Te, 95, 57, za], [1, "f", ie, 95, 59, Oq], [Xn, "f", ie, 95, 60, mk], [1, "f", za, 95, 63, za], [Oq, "f", 0, 95, 65, Xn], [Oq, "f", ie, 95, 66, 1], [1, "f", ie, 95, 67, 1], [za, "f", mk, 95, 69, mk], [Te, "f", 1, 95, 70, 1], [Oq, "f", 0, 95, 71, Te], [Xn, "f", mk, 95, 73, 1], [mk, "f", mk, 95, 74, 1], [mk, "f", 0, 95, 75, za], [1, "f", za, 95, 76, Oq], [1, "f", 1, 95, 77, Xn], [1, "f", ie, 95, 79, 1], [ie, "f", za, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", Xn, 95, 82, Te], [Te, "f", In, 95, 83, 1], [1, "f", Oq, 95, 84, 1], [Xn, "f", 1, 95, 86, 1], [za, "f", Oq, 95, 88, 1], [Oq, "f", mj, 95, 87, Te], [1, "f", Oq, 95, 89, za], [za, "f", 1, 95, 90, Oq], [Te, "f", 1, 95, 92, Te], [1, "f", Te, 95, 93, Xn], [za, "f", 1, 95, 94, 1], [Te, "f", 1, 95, 96, za], [Oq, "f", Oq, 95, 97, 1], [1, "f", wj, 95, 98, ie], [1, "f", Te, 95, 99, za], [1, "f", 1, 95, 100, Xn], [Xn, "f", 0, 95, 101, 1], [Oq, "f", 1, 95, 102, 1], [Te, "f", 0, 95, 103, 1], [1, "f", Xn, 95, 104, Xn], [Te, "f", mk, 95, 105, Xn], [1, "f", wj, 95, 106, mk], [1, "f", 1, 95, 107, za], [1, "f", 1, 95, 108, za], [mk, "f", mk, 95, 109, Xn], [ie, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, ie], [1, "f", 0, 95, 112, 1], [ie, "f", Te, 95, 116, Te], [ie, "f", Rq, 95, 118, 1], [ie, "f", mj, 95, 122, Te], [1, "f", mk, 95, 123, 1], [1, "f", Te, 95, 124, za], [1, "f", wj, 95, 125, Oq], [za, "f", 1, 95, 126, 1], [Oq, "f", Oq, 95, 129, Xn], [1, "f", Xn, 95, 133, 1], [ie, "f", mj, 95, 134, Oq], [1, "f", 1, 95, 135, Te], [1, "f", ie, 95, 139, 1], [Oq, "f", Rq, 95, 140, za], [za, "f", 1, 95, 141, za], [ie, "f", mk, 95, 142, 1], [1, "f", Te, 95, 146, 1], [mk, "f", In, 95, 145, za], [1, "f", Te, 95, 148, za], [1, "f", ie, 95, 149, 1], [1, "f", Oq, 95, 150, 1], [1, "f", Oq, 95, 153, 1], [za, "cs", Rq, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, G, 1], [1, "cs", 2, 64, Dk, Te], [1, "cs", Hi, 64, hn, 1], [1, "cs", Oq, 64, 21, Xn], [Xn, "cs", jk, 64, 22, 1], [Te, "cs", 0, 64, 23, Xn], [za, "cs", 2, 64, 24, 1], [1, "cs", za, 64, 29, za], [1, "cs", lr, 64, 30, Te], [1, "cs", 3, 64, 31, za], [za, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, za], [Te, "cs", 0, 64, 35, Xn], [Te, "cs", Pn, 64, Gk, 1], [1, "cs", Hj, 65, 8, 1], [Oq, "cs", 1, 65, pn, Xn], [mk, "cs", lr, 65, J, 1], [mk, "cs", 3, 65, dn, za], [za, "cs", Xn, 65, Pa, 1], [1, "cs", Hi, 64, 17, 1], [za, "cs", Hk, 65, 17, 1], [za, "cs", 2, 64, hr, 1], [mk, "cs", lr, 65, 18, za], [mk, "cs", Hi, 65, Jj, ie], [Oq, "cs", 1, 65, vi, Te], [1, "cs", nq, 65, 21, 1], [1, "cs", 2, 65, 22, ie], [1, "cs", qo, 65, 23, ie], [za, "cs", Rq, 65, 24, Te], [1, "cs", xj, 65, 29, Oq], [1, "cs", ea, 65, 30, Xn], [Xn, "cs", Da, 65, 31, mk], [Xn, "cs", 1, 65, 32, 1], [Xn, "cs", 2, 65, 33, ie], [ie, "cs", 3, 65, 34, 1], [Xn, "cs", 2, 63, rr, 1], [1, "cs", Zj, 62, 9, 1], [ie, "cs", xq, 61, Qj, 1], [1, "cs", wj, 60, w, 1], [Xn, "cs", H, 59, 9, mk], [Xn, "cs", jk, 58, Qj, Oq], [1, "cs", 0, 57, R, 1], [Xn, "cs", jk, 56, se, Oq], [1, "cs", 2, 55, 9, Xn], [1, "cs", 2, 54, 9, 1], [Oq, "cs", 0, 53, 9, Xn], [Te, "cs", 0, 51, 9, 1], [Oq, "cs", Pn, 52, Qk, 1], [1, "cs", jk, 50, 9, 1], [Oq, "cs", pq, 48, $o, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, R, 1], [1, "cs", 0, 45, Ca, mk], [Oq, "cs", 0, 43, 9, 1], [ie, "cs", 2, 46, $o, 1], [1, "cs", lr, 44, se, 1], [Te, "cs", 2, 42, 9, Oq], [1, "cs", Hj, 41, 9, 1], [za, "cs", 0, 40, Lo, 1], [1, "cs", xq, 39, Qk, 1], [1, "cs", lr, 38, 9, 1], [mk, "cs", ya, 37, $o, 1], [1, "cs", Rq, 63, 8, 1], [Xn, "cs", 2, 65, N, Oq], [1, "cs", nq, 64, N, za], [Xn, "cs", Pn, 62, aa, Te], [za, "cs", 3, 61, aa, 1], [1, "cs", ie, 62, 7, ie], [mk, "cs", jk, 63, $k, 1], [za, "cs", Hi, 64, 6, 1], [mk, "cs", ea, 65, Qa, 1], [ie, "cs", 2, 63, Bq, Xn], [1, "cs", jk, 62, 6, Xn], [ie, "cs", 2, 61, U, ie], [Te, "cs", Pn, 60, 6, 1], [1, "cs", H, 59, 6, mk], [1, "cs", 2, 61, ia, 1], [Oq, "cs", Hi, 60, Ar, 1], [za, "cs", 2, 60, 8, 1], [ie, "cs", lr, 59, $n, za], [mk, "cs", 2, 59, Hr, mk], [mk, "cs", Te, 58, Gk, 1], [1, "cs", mk, 57, 6, 1], [Te, "cs", mk, 55, 7, Te], [1, "cs", mj, 56, 6, ie], [Te, "cs", H, 58, nk, Xn], [1, "cs", 2, 58, 7, Oq], [za, "cs", Pn, 57, N, Te], [1, "cs", H, 56, 7, 1], [1, "cs", xj, 55, 6, ie], [Te, "cs", Hj, 57, 8, za], [za, "cs", lr, 56, Bi, ie], [1, "cs", Pn, 55, 8, 1], [za, "cs", mj, 54, 8, 1], [Oq, "cs", Zj, 50, Aq, 1], [1, "cs", 0, 53, Bq, 1], [1, "cs", xj, 54, 6, mk], [Te, "cs", lr, 54, N, za], [za, "cs", 2, 53, 7, Oq], [mk, "cs", Pn, 52, Aq, 1], [Oq, "cs", 2, 52, ji, 1], [ie, "cs", 1, 52, 8, mk], [Oq, "cs", 2, 53, Hr, 1], [Te, "cs", pq, 51, 8, 1], [1, "cs", pq, 51, ur, 1], [1, "cs", H, 51, Qa, Oq], [Xn, "cs", Hj, 50, 6, Te], [1, "cs", lr, 50, E, 1], [Te, "cs", 2, 49, 8, Oq], [za, "cs", H, 49, Ni, 1], [Te, "cs", 2, 49, Xk, 1], [1, "cs", 0, 46, N, za], [Oq, "cs", 1, 48, 8, Xn], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, _a, Te], [1, "cs", Hj, 48, 7, Te], [ie, "cs", Pn, 48, U, 1], [mk, "cs", xj, 47, 6, ie], [mk, "cs", jk, 47, 7, mk], [Te, "cs", lr, 47, 8, ie], [1, "cs", jk, 46, Hr, 1], [1, "cs", Hj, 45, 8, ie], [1, "cs", 2, 45, $k, za], [1, "cs", 2, 45, 6, ie], [1, "cs", 2, 46, Ya, za], [1, "cs", jk, 44, 6, 1], [Xn, "cs", Hj, 44, 8, Oq], [ie, "cs", 2, 43, Bi, Xn], [1, "cs", 2, 43, $n, 1], [1, "cs", 2, 43, Ro, Te], [1, "cs", 2, 42, Qa, Xn], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, aa, 1], [1, "cs", H, 41, N, 1], [ie, "cs", 2, 41, 6, 1], [1, "cs", pq, 40, 6, Oq], [za, "cs", Pn, 40, Ni, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", jk, 39, Iq, ie], [1, "cs", 0, 39, 7, 1], [1, "cs", mk, 38, 8, ie], [Te, "cs", Pn, 39, Ck, Oq], [1, "cs", xq, 38, Ck, za], [1, "cs", 2, 37, 6, ie], [1, "cs", 2, 38, cq, 1], [mk, "cs", 2, 37, N, 1], [Oq, "cs", xj, 37, 8, 1], [1, "cs", jk, 37, 10, Xn], [Oq, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, ie], [mk, "cs", 0, 38, 17, 1], [Xn, "cs", ie, 37, Pj, Te], [Oq, "cs", 0, 38, 19, 1], [Oq, "cs", jk, 37, nn, za], [ie, "cs", 2, 37, Mn, Te], [mk, "cs", 2, 37, 17, 1], [mk, "cs", 2, 38, Pj, 1], [1, "cs", pq, 37, b, Xn], [1, "cs", 3, 38, gk, mk], [Oq, "cs", 0, 37, 21, ie], [za, "cs", Da, 38, 22, 1], [Te, "cs", 0, 38, 24, mk], [1, "cs", H, 37, 20, ie], [Te, "cs", 2, 38, Xa, mk], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, Te], [1, "cs", 3, 37, 22, Te], [Te, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, Oq], [mk, "cs", Hi, 38, 30, Oq], [Xn, "cs", ya, 38, 32, Xn], [1, "cs", mj, 37, 31, 1], [Xn, "cs", 1, 38, 34, 1], [Te, "cs", 1, 37, 29, 1], [ie, "cs", 2, 38, 29, 1], [Xn, "cs", 2, 37, 30, ie], [1, "cs", xq, 38, 31, mk], [Xn, "cs", pq, 37, 32, Oq], [za, "cs", Hk, 38, 33, 1], [1, "cs", I, 38, 35, 1], [1, "cs", xq, 37, 33, Oq], [mk, "cs", jk, 36, zj, 1], [1, "cs", Da, 36, 11, 1], [1, "cs", 0, 35, 9, mk], [ie, "cs", lr, 36, pn, 1], [1, "cs", xj, 36, sk, 1], [za, "cs", 2, 35, Bo, 1], [1, "cs", ie, 33, 8, 1], [1, "cs", I, 34, 9, za], [1, "cs", 3, 35, He, 1], [1, "cs", 2, 34, 8, ie], [1, "cs", Rq, 36, ia, za], [1, "cs", 1, 34, 7, 1], [1, "cs", Hj, 35, 7, ie], [Oq, "cs", 2, 35, Ck, 1], [1, "cs", lr, 36, 6, za], [1, "cs", 2, 68, fk, 1], [1, "cs", xj, 66, 10, 1], [Oq, "cs", Hk, 66, 9, 1], [1, "cs", Rq, 67, 9, 1], [mk, "cs", 0, 66, zj, mk], [1, "cs", 2, 67, zj, 1], [ie, "cs", 1, 68, br, 1], [1, "cs", za, 66, Jq, za], [1, "cs", jk, 67, kk, 1], [ie, "cs", Da, 66, Xk, 1], [Te, "cs", 2, 66, 7, mk], [1, "cs", xq, 67, Aq, Oq], [1, "cs", 2, 69, Iq, 1], [Te, "cs", 2, 63, 32, 1], [Xn, "cs", H, 62, 34, 1], [Te, "cs", lr, 60, 35, 1], [Oq, "cs", ci, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", Rq, 63, 34, Xn], [Xn, "cs", 2, 63, 33, 1], [mk, "cs", jk, 63, 35, 1], [za, "cs", pq, 62, 35, mk], [Oq, "cs", lr, 58, 36, ie], [1, "cs", Xn, 59, 36, mk], [Te, "cs", za, 62, 36, 1], [1, "cs", 2, 60, 36, za], [1, "cs", jk, 61, 34, 1], [Oq, "cs", 3, 62, 33, mk], [1, "cs", ea, 63, 36, Te], [Xn, "cs", 3, 61, 36, 1], [ie, "cs", In, 42, 36, Xn], [1, "cs", Xn, 39, 36, za], [1, "cs", pq, 41, 36, 1], [1, "cs", fn, 39, 35, 1], [ie, "cs", 3, 40, 36, 1], [1, "cs", nq, 43, 36, Xn], [1, "cs", 1, 40, 35, za], [mk, "cs", 2, 41, 35, za], [ie, "cs", jk, 40, 34, 1], [Oq, "cs", Pn, 39, 34, 1], [Xn, "cs", 2, 39, 33, za], [1, "cs", jk, 39, 32, Oq], [Te, "cs", 0, 40, 33, za], [Xn, "cs", 2, 41, 34, Oq], [Te, "cs", 1, 44, 36, 1], [Oq, "cs", Hk, 43, 35, Oq], [ie, "cs", xq, 42, 35, Oq], [1, "cs", Zj, 37, 34, 1], [Xn, "cs", 3, 59, 30, Te], [1, "cs", mj, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [ie, "cs", fn, 60, 27, za], [1, "cs", 0, 60, 26, za], [Xn, "cs", xq, 54, 25, mk], [1, "cs", 2, 48, 25, 1], [za, "cs", 2, 42, 26, 1], [Oq, "cs", Rq, 55, 25, 1], [mk, "cs", 2, 59, 26, mk], [1, "cs", Hi, 43, 26, Te], [1, "cs", mk, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [za, "cs", 2, 43, 30, ie], [Oq, "cs", In, 42, 29, Oq], [za, "cs", ya, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [mk, "cs", 2, 54, 23, 1], [za, "cs", 2, 48, 23, Oq], [mk, "cs", H, 63, 22, 1], [1, "cs", Pn, 63, 21, Oq], [Xn, "cs", 2, 39, 21, mk], [za, "cs", ci, 57, 18, Xn], [1, "cs", 2, 56, io, Te], [Xn, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, to, Te], [Oq, "cs", xj, 51, Be, 1], [ie, "cs", 3, 51, 18, za], [1, "cs", Pn, 63, Yk, mk], [1, "cs", lr, 63, 10, 1], [1, "cs", xq, 56, 13, 1], [Oq, "cs", 3, 57, vn, 1], [1, "cs", 1, 45, Vq, 1], [1, "cs", 2, 47, W, Te], [1, "cs", lr, 46, io, mk], [1, "cs", wj, 46, 13, Oq], [1, "cs", 2, 45, ik, 1], [Xn, "cs", Pn, 39, 10, Te], [1, "cs", 2, 39, 16, 1], [ie, "cs", 2, 47, tr, 1], [ie, "a", 0, 51, $q, za], [Xn, "a", Oq, 53, Kq, 1], [mk, "a", Te, 49, Pq, Oq], [1, "de", 8, 55, v, 0], [1, "de", fk, 48, 28, Da], [Oq, "de", gn, 58, 26, In], [1, "de", 11, 59, 29, 0], [1, "de", tk, 55, 34, Zj], [ie, "de", te, 48, 33, ya], [1, "de", Qk, 41, 32, 0], [Xn, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", se, 45, ra, mj], [ie, "de", 9, 44, 17, wj], [1, "de", te, 44, 13, 0], [Xn, "de", jn, 58, 13, wj], [1, "de", Zk, 63, 31, Hi], [1, "de", 8, 60, 30, mj], [za, "de", 8, 43, 26, wj], [Oq, "de", 10, 43, 29, Da], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, Rq], [1, "de", Qj, 53, 19, 0], [1, "de", 11, 49, 19, mj], [ie, "de", 10, 39, 26, Zj], [Oq, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [mk, "de", 8, 40, 14, 0], [Xn, "de", 32, 55, 35, 0], [mk, "de", 32, 60, 33, 0], [Te, "de", 32, 63, 28, wj], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, ya], [1, "de", 32, 59, Ej, 0], [1, "de", 32, 63, Cq, Hi], [ie, "de", 32, 59, kk, 0], [mk, "de", 32, 56, 12, 0], [Oq, "de", 32, 52, 17, 0], [1, "de", 32, 51, Sq, 0], [Oq, "de", 32, 39, da, Zj], [1, "de", 32, 39, 18, Hi], [1, "de", 32, 41, 25, Da], [1, "de", 32, 39, 30, ya], [ie, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, Zj], [1, "de", 32, 47, 34, wj], [1, "de", 31, 54, 33, Zj], [Oq, "de", 31, 59, 24, 0], [Te, "de", 31, 63, Dq, 0], [1, "de", 31, 47, 15, In], [1, "de", 31, 43, Un, 0], [Xn, "de", 31, 39, 27, wj], [Xn, "de", 31, 48, 27, wj], [Oq, "de", 31, 57, 27, mj], [1, "de", 32, 44, 27, 0], [ie, "d", 0, gr, 13, Xn], [ie, "d", mj, 89, ja, 1], [1, "d", Oq, 91, 21, 1], [mk, "d", Xn, 10, 22, Oq], [1, "f", 2, 89, 18, 1], [za, "f", 0, 88, Jj, 1], [ie, "g", mk, 85, 22, Xn], [1, "s", 1, 90, 29, mk], [ie, "s", 1, 92, 15, ie], [ie, "s", 0, 91, 31, Xn], [ie, "s", 2, 90, 38, 1], [Xn, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", ie, 86, 43, 1], [1, "f", Rq, 81, 45, Te], [mk, "f", jk, 66, 44, 1], [Te, "f", 2, 55, 49, 1], [1, "f", Xn, 54, 50, 1], [1, "f", xq, 43, 45, 1], [1, "f", xj, 31, 48, 1], [ie, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, ie], [ie, "f", Oq, 69, 48, 1], [ie, "g", 0, 80, 40, 1], [1, "g", jk, 81, 40, Oq], [1, "s", 2, 77, 39, 1], [Oq, "s", 0, 68, 43, 1], [Oq, "s", jk, 57, 41, 1], [1, "s", Oq, 56, 42, ie], [1, "s", 1, 40, 41, Xn], [za, "s", Hj, 48, 48, Xn], [1, "f", pq, 17, Ka, ie], [Xn, "f", 0, ja, 31, 1], [1, "f", 1, Wa, 32, 1], [Oq, "s", ya, 15, 27, ie], [mk, "s", mj, Cq, 39, 1], [1, "f", lr, d, 17, 1], [Xn, "f", mk, Sj, hr, 1], [Xn, "g", 2, da, 25, 1], [Te, "f", 0, p, 45, ie], [Te, "f", Oq, Un, 46, 1], [ie, "s", Te, 74, 48, 1], [mk, "s", ie, 20, 47, Xn], [1, "g", wj, 58, 59, ie], [mk, "g", Hi, 46, 72, 1], [Xn, "g", 0, 69, 79, 1], [1, "g", Rq, 72, 74, 1], [mk, "g", Zj, 26, 88, 1], [mk, "g", Rq, Ok, 74, 1], [Te, "g", Rq, 28, 67, Xn], [1, "g", Hi, 49, 86, 1], [Te, "g", 0, 77, 90, Oq], [1, "g", 0, 87, 72, Te], [1, "g", 0, po, 85, 1], [1, "g", Xn, 85, 97, Xn], [1, "g", 1, 68, 104, ie], [1, "g", Oq, 63, 91, 1], [Te, "g", 1, 39, 90, Oq], [1, "g", 1, 34, 99, 1], [ie, "g", ie, Yo, 103, 1], [1, "g", 2, 77, 60, mk], [ie, "g", 2, 19, 56, 1], [mk, "g", 2, 39, 60, Xn], [Te, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [mk, "f", ya, 26, 59, Te], [Oq, "f", 0, 35, 53, Te], [1, "f", Rq, 44, 58, mk], [1, "f", Da, 88, 62, 1], [ie, "f", 0, 91, 82, 1], [ie, "f", 0, 84, 85, za], [1, "f", 0, 79, 69, 1], [Te, "f", Da, 64, 71, Oq], [mk, "f", 0, 62, 83, 1], [ie, "f", 0, 34, 81, 1], [za, "f", 0, 39, 71, mk], [1, "f", mj, 54, 94, 1], [1, "f", 1, 81, 70, mk], [ie, "f", Oq, 91, 72, 1], [mk, "f", mk, 8, 91, 1], [mk, "f", Oq, Wa, 81, mk], [mk, "f", 1, 29, 79, 1], [1, "f", za, 13, 65, 1], [1, "f", Te, 46, 97, 1], [mk, "f", Oq, 43, 73, 1], [1, "f", mk, 60, 69, Xn], [1, "f", 1, 70, 96, mk], [Xn, "f", 1, 58, 84, 1], [za, "s", za, 56, 76, za], [1, "s", mk, 85, 74, 1], [1, "s", wj, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", wj, 60, 61, 1], [1, "s", Rq, to, 66, 1], [1, "s", Hi, 47, 83, 1], [Xn, "s", wj, 29, 86, mk], [1, "s", Da, 78, 92, Xn], [Te, "s", mj, 62, 102, ie], [Xn, "s", 0, 18, 95, Xn], [Te, "s", 2, 64, 101, ie], [za, "s", 2, 78, 84, Te], [1, "s", 2, 49, 83, 1], [1, "s", 2, $q, 76, za], [mk, "s", 2, 21, 84, Te], [1, "f", Te, 26, 94, mk], [1, "f", H, 23, 96, mk], [Te, "f", xj, 25, 72, 1], [1, "f", 2, 85, 77, za], [1, "f", Pn, 79, 95, 1], [1, "f", Pn, 51, 65, Te], [ie, "f", pq, 69, 60, Xn], [1, "f", ie, 25, 105, 1], [za, "s", za, io, 68, Oq], [1, "s", Hi, 55, 76, Xn], [1, "s", 0, 74, 59, Oq], [1, "f", Xn, 46, 142, 1], [Te, "f", Xn, 19, 140, Xn], [1, "f", Te, 77, 137, 1], [Xn, "f", 0, 75, 137, 1], [Xn, "f", 0, 55, 138, Te], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [Oq, "f", Zj, 55, 121, za], [za, "f", wj, 13, 123, za], [1, "f", In, 18, 141, za], [1, "f", ya, 40, 137, 1], [1, "f", 2, 76, 142, 1], [Te, "f", lr, 57, 140, 1], [1, "f", jk, 39, 138, 1], [ie, "f", 2, 16, 143, 1], [za, "f", 2, 29, 131, Xn], [Te, "f", Hi, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, La, 132, 1], [Xn, "f", mj, 90, 129, 1], [za, "f", mk, 87, 131, za], [1, "f", 0, 91, 143, mk], [Oq, "f", 2, 87, 145, 1], [1, "f", mk, 89, 141, 1], [Te, "f", 1, 63, 130, Te], [1, "f", 1, 75, 122, 1], [1, "f", ie, 52, 124, 1], [Xn, "f", 1, 34, 127, 1], [Te, "f", 1, 14, 123, 1], [mk, "f", Te, 24, 122, 1], [1, "f", Rq, 83, 108, Te], [Oq, "f", mj, 89, 118, 1], [Xn, "f", 0, 56, 107, za], [1, "f", 0, 38, 113, Oq], [za, "f", 0, 16, 110, 1], [za, "f", Oq, 80, 105, Xn], [ie, "f", ie, 82, 109, Xn], [ie, "f", za, 87, 118, 1], [Xn, "f", za, 59, 110, Te], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [Te, "f", xj, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", Da, 81, 158, ie], [1, "s", 0, 25, 172, Xn], [1, "s", In, 22, 161, za], [1, "s", Zj, 35, 152, 1], [1, "s", 0, 66, 144, Oq], [za, "s", Da, 87, 145, ie], [mk, "s", wj, 86, 145, 1], [Xn, "s", 0, 84, 135, Oq], [Xn, "s", 0, 69, 133, ie], [Oq, "s", 0, 84, 122, 1], [za, "s", wj, 68, 121, za], [1, "s", 0, 48, 124, ie], [Oq, "s", wj, 26, 129, za], [1, "s", ya, rr, 127, 1], [za, "s", mj, 11, 144, Oq], [1, "s", 0, 9, 109, ie], [1, "s", 0, 35, 101, Xn], [ie, "s", In, 47, 109, 1], [1, "s", In, 58, 111, Oq], [1, "s", 0, 84, 110, 1], [ie, "s", Rq, 28, 114, Xn], [1, "s", 1, 30, 116, 1], [1, "s", za, 46, 112, 1], [ie, "s", Xn, 81, 111, ie], [ie, "s", ie, 70, 123, mk], [1, "s", za, 49, 127, Te], [Xn, "s", Te, 66, 134, 1], [mk, "s", Xn, 67, 144, 1], [Xn, "s", 1, 38, 152, Oq], [1, "s", ie, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [za, "s", 1, 12, 125, Xn], [1, "s", 1, 65, 158, za], [Oq, "s", za, 83, 167, 1], [Te, "s", 1, 65, 167, mk], [1, "s", mk, 47, 164, 1], [1, "s", 1, 56, 168, 1], [Te, "s", 2, 54, 169, 1], [Oq, "s", 2, 88, 170, za], [Te, "s", 2, 91, 162, 1], [1, "s", H, 79, 149, mk], [1, "s", xj, 75, 144, 1], [Xn, "s", 2, 57, 150, 1], [ie, "s", H, 47, 143, Xn], [1, "s", jk, 31, 145, 1], [1, "s", 2, 36, 138, mk], [1, "s", pq, Bo, 163, 1], [1, "s", 2, 22, 142, Te], [Te, "g", 2, 78, 132, Oq], [1, "g", mk, 48, 135, ie], [Oq, "g", 2, gk, 136, 1], [ie, "g", 0, 62, 92, 1], [1, "g", Pn, 70, 80, 1], [za, "g", xj, eo, 86, mk], [mk, "g", 2, 47, 75, ie], [Oq, "g", xq, 36, 89, Xn], [Oq, "g", jk, 80, 90, Te], [mk, "f", Oq, 39, 118, 1], [1, "d", xq, 84, 54, 1], [1, "d", 2, p, 54, 1], [Xn, "de", Aq, Cq, 13, In], [1, "de", 5, 16, 28, 0], [Te, "de", Fk, 9, 25, 0], [1, "de", q, 34, 41, wj], [mk, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", qq, Sj, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, ya], [ie, "de", qq, Ni, 33, 0], [Oq, "de", U, 40, 42, 0], [ie, "de", 7, wq, 48, 0], [Xn, "de", 7, 29, 59, 0], [ie, "de", Ya, 27, 58, 0], [1, "de", Na, 15, 54, mj], [Oq, "de", q, 12, 66, 0], [Te, "de", q, 37, 53, 0], [Oq, "de", 4, 10, 63, Da], [1, "de", 7, 49, 48, In], [Xn, "de", cq, 37, 63, Zj], [mk, "de", qq, 33, 68, Rq], [1, "de", Xk, 56, 52, Da], [1, "de", kq, 59, 58, Zj], [Oq, "de", 6, 48, 58, 0], [Te, "de", 4, 53, 63, ya], [1, "de", 4, 67, 44, 0], [1, "de", ta, 70, 49, 0], [za, "de", 5, 82, 55, Hi], [za, "de", ta, 79, 41, Rq], [1, "de", 5, 91, 29, Rq], [ie, "de", 7, 91, 43, 0], [mk, "de", U, 85, 44, 0], [mk, "de", 6, 74, 60, 0], [1, "de", 6, 90, Bi, In], [mk, "de", kq, 91, 15, In], [1, "de", Mq, 87, 20, 0], [ie, "de", 7, 93, tk, Zj], [1, "de", U, 91, 21, mj], [1, "de", 6, 85, 35, 0], [ie, "de", z, 93, 58, 0], [Oq, "de", q, 87, 63, 0], [1, "de", ur, 77, 62, 0], [1, "de", Ro, 68, 61, 0], [za, "de", 5, 90, 73, 0], [za, "de", 4, 87, 71, 0], [Te, "de", 7, 80, 71, Hi], [1, "de", Ar, 83, 77, 0], [1, "de", N, 89, 83, Hi], [Xn, "de", 4, 71, 80, mj], [Xn, "de", 4, 71, 70, Rq], [mk, "de", 5, 63, 72, In], [Xn, "de", 4, 54, 75, ya], [Oq, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, In], [1, "de", 5, 15, 81, 0], [Oq, "de", ba, 29, 80, Da], [Xn, "de", 4, 37, 90, Zj], [za, "de", Vn, 7, 75, 0], [1, "de", Bq, 22, 74, 0], [1, "de", qq, 43, 95, 0], [Te, "de", nk, 57, 85, 0], [mk, "de", 6, bq, 94, Hi], [1, "de", 6, rr, 92, In], [Oq, "de", z, 26, 89, 0], [Xn, "de", q, 31, 112, mj], [1, "de", Fk, 54, 108, Hi], [1, "de", Oj, 55, 95, ya], [za, "de", ta, 35, 104, 0], [Oq, "de", Eq, 13, 110, Rq], [1, "de", 7, 27, 107, 0], [Te, "de", ia, 47, 99, 0], [mk, "de", cq, tk, 104, 0], [za, "de", Ar, R, 111, In], [ie, "de", 7, 40, 114, Zj], [mk, "de", $n, 28, 117, 0], [1, "de", $k, 47, 113, 0], [Xn, "de", 7, 63, 104, 0], [1, "de", nj, 64, 92, 0], [Te, "de", Qa, 86, 97, Hi], [mk, "de", nr, 76, 91, 0], [1, "de", q, 85, 86, 0], [1, "de", nk, 78, 83, mj], [1, "de", ji, 71, 97, In], [ie, "de", 4, 69, 105, 0], [Xn, "de", ba, 79, 104, 0], [Oq, "de", 4, 86, 109, 0], [1, "de", Fr, 86, 118, wj], [ie, "de", nr, 70, 113, 0], [1, "de", 6, 69, 121, 0], [za, "de", 6, 76, 122, 0], [1, "de", ia, 87, 130, 0], [1, "de", 4, 84, 123, Hi], [1, "de", Vn, 57, 121, In], [ie, "de", q, 53, 125, Hi], [Xn, "de", nr, 62, 131, 0], [1, "de", 6, 67, 143, ya], [1, "de", M, 77, 143, Hi], [Xn, "de", 5, 85, 136, 0], [ie, "de", 6, 87, 147, 0], [Xn, "de", 6, 92, 140, 0], [mk, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [za, "de", q, 45, 144, 0], [za, "de", Vn, 41, 139, 0], [Te, "de", 4, 54, 138, Zj], [1, "de", 6, 29, 145, 0], [1, "de", ji, 29, 132, 0], [1, "de", 6, 35, 127, mj], [mk, "de", va, 64, 142, Zj], [Te, "de", 5, 23, 131, ya], [ie, "de", 5, pn, 134, 0], [1, "de", 6, 11, 121, Da], [Xn, "de", 4, 26, 121, 0], [Oq, "de", 35, 58, 150, Rq], [ie, "de", 33, 48, 156, ya], [1, "de", 33, 25, 158, 0], [Te, "de", 33, 36, 154, Zj], [1, "de", 34, rr, 154, Da], [1, "de", 34, 13, 148, Rq], [Xn, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [ie, "de", 34, 47, 144, wj], [Te, "de", 34, 68, 142, Zj], [1, "de", 36, 70, 135, 0], [za, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [za, "de", 36, 90, 141, ya], [Oq, "de", 36, 93, 131, Rq], [mk, "de", 36, 91, 125, ya], [1, "de", 36, 76, 123, 0], [za, "de", 33, 82, 122, 0], [za, "de", 35, 56, 122, mj], [Xn, "de", 35, 40, 119, Zj], [1, "de", 35, 17, 112, wj], [1, "de", 35, 37, 102, 0], [Te, "de", 33, hr, 97, 0], [ie, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, ya], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, wj], [1, "de", 36, po, 45, 0], [1, "de", 36, 21, 42, 0], [mk, "de", 35, 8, 32, Hi], [za, "de", 33, $o, 24, 0], [1, "de", 35, 35, 27, wj], [1, "de", 33, 56, 35, 0], [Oq, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, Zj], [ie, "de", 35, 53, 39, Rq], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, mj], [za, "de", 33, 68, 112, In], [za, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [Xn, "de", 33, 90, 76, Da], [mk, "de", 36, 76, 83, Zj], [Oq, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, Hi], [1, "de", 36, 90, 64, Da], [1, "de", 36, 60, 70, wj], [Te, "de", 35, 75, 90, 0], [Xn, "de", 35, 81, 58, 0], [Oq, "de", 35, 91, 51, Hi], [ie, "de", 35, 93, 56, ya], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [za, "de", 34, 92, R, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, mj], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [za, "de", 33, 49, 50, mj], [Oq, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, Zj], [za, "de", 33, 64, 84, 0], [ie, "de", 33, 56, 94, 0], [Xn, "de", 33, 25, 90, Da], [Xn, "de", 33, 31, 69, Hi], [1, "de", 35, 34, 54, Hi], [ie, "de", 35, 29, 47, In], [mk, "de", 36, 42, 41, Rq], [za, "de", 36, 29, 34, Zj], [1, "de", 35, 20, 55, 0], [Oq, "de", 35, 14, 52, mj], [1, "s", 2, Uk, 171, 1], [Te, "r", 20, 188, In], [1, "r", 21, 188, mj], [1, "r", 22, 188, 0], [mk, "r", 23, 188, ya], [Te, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, In], [1, "r", 23, 189, 0], [mk, "r", 22, 189, Rq], [Xn, "r", 21, 189, 0], [Xn, "r", wq, 189, Rq], [1, "r", Dq, 189, Zj], [1, "r", 19, 190, Zj], [ie, "r", ha, 191, wj], [mk, "r", to, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [mk, "r", 24, 191, Rq], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [Oq, "r", 25, 190, mj], [1, "r", 24, 190, ya], [1, "r", 23, 190, Zj], [Xn, "r", 22, 190, 0], [1, "r", 21, 190, In], [ie, "r", vi, 190, Zj], [mk, "r", 26, 190, mj], [1, "r", 26, 191, Hi], [za, "r", 24, 193, ya], [Xn, "r", 23, 193, 0], [ie, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, Da], [mk, "r", 22, 192, 0], [1, "r", 23, 192, 0], [mk, "r", 24, 192, 0], [1, "r", 25, 192, ya], [za, "r", 53, 199, mj], [1, "r", 52, 200, 0], [1, "r", 54, 199, Zj], [1, "r", 55, 199, 0], [1, "r", 55, 200, Hi], [Oq, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [Te, "r", 55, 201, Rq], [1, "r", 54, 201, 0], [Te, "r", 55, 202, wj], [1, "r", 54, 203, 0], [Xn, "r", 54, 204, Hi], [1, "r", 54, 202, wj], [1, "r", 53, 202, Zj], [Oq, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, wj], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [Oq, "r", 50, 202, 0], [Te, "r", 50, 201, 0], [za, "r", 56, 201, ya], [za, "r", 53, 203, 0], [1, "r", 52, 203, Hi], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [mk, "r", 53, 204, 0], [1, "r", 52, 204, Da], [ie, "r", 55, 204, 0], [1, "r", 56, 203, wj], [mk, "r", 56, 244, In], [1, "r", 54, 246, In], [za, "r", 50, 248, In], [mk, "r", 48, 248, ya], [1, "r", 43, 248, In], [1, "r", 45, 238, 0], [1, "r", 44, 238, Hi], [1, "r", 43, 238, Hi], [mk, "r", 46, 238, 0], [1, "r", 47, 238, Rq], [Te, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, Rq], [1, "r", 51, 238, 0], [1, "r", 52, 238, ya], [Te, "r", 53, 238, Rq], [1, "r", 54, 239, 0], [Oq, "r", 53, 240, mj], [Xn, "r", 53, 239, Da], [Oq, "r", 52, 239, 0], [Oq, "r", 51, 239, 0], [ie, "r", 50, 239, Hi], [Xn, "r", 49, 239, 0], [Oq, "r", 48, 239, mj], [ie, "r", 47, 239, 0], [1, "r", 46, 239, 0], [ie, "r", 45, 239, Rq], [1, "r", 44, 239, Zj], [Oq, "r", 43, 239, Hi], [Xn, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [ie, "r", 43, 240, 0], [1, "r", 44, 240, 0], [za, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, Da], [Xn, "r", 48, 240, Hi], [1, "r", 49, 240, Zj], [mk, "r", 50, 240, Hi], [Oq, "r", 51, 240, Zj], [Te, "r", 52, 240, In], [ie, "r", 54, 240, Zj], [za, "r", 55, 240, In], [ie, "r", 56, 241, Hi], [Xn, "r", 55, 241, Da], [ie, "r", 54, 241, Hi], [1, "r", 53, 241, Rq], [Oq, "r", 52, 241, Hi], [Oq, "r", 51, 241, wj], [1, "r", 49, 241, Hi], [1, "r", 50, 241, In], [1, "r", 48, 241, ya], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [Te, "r", 45, 241, Da], [1, "r", 44, 241, 0], [Te, "r", 43, 241, 0], [Xn, "r", 42, 241, 0], [Oq, "r", 41, 241, 0], [Te, "r", 40, 242, Rq], [za, "r", 41, 242, 0], [ie, "r", 42, 242, 0], [Xn, "r", 43, 242, 0], [Xn, "r", 44, 242, 0], [1, "r", 45, 242, Hi], [1, "r", 46, 242, 0], [za, "r", 47, 242, 0], [za, "r", 48, 242, 0], [za, "r", 49, 242, 0], [1, "r", 50, 242, 0], [ie, "r", 51, 242, Zj], [mk, "r", 52, 242, Hi], [1, "r", 53, 242, 0], [za, "r", 54, 242, 0], [ie, "r", 55, 242, wj], [1, "r", 56, 242, wj], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [Xn, "r", 54, 243, mj], [1, "r", 53, 243, 0], [ie, "r", 52, 243, In], [1, "r", 51, 243, 0], [za, "r", 50, 243, 0], [Oq, "r", 49, 243, wj], [1, "r", 48, 243, mj], [1, "r", 47, 243, mj], [Te, "r", 46, 243, wj], [1, "r", 45, 243, Hi], [1, "r", 44, 243, ya], [Xn, "r", 43, 243, Da], [1, "r", 42, 243, In], [1, "r", 41, 243, 0], [1, "r", 40, 243, mj], [Oq, "r", 40, 244, mj], [Te, "r", 41, 244, 0], [mk, "r", 43, 244, 0], [Xn, "r", 44, 244, 0], [1, "r", 45, 244, mj], [1, "r", 46, 244, 0], [mk, "r", 47, 244, 0], [1, "r", 48, 244, 0], [Oq, "r", 49, 244, 0], [1, "r", 50, 244, Zj], [Oq, "r", 51, 244, 0], [1, "r", 52, 244, mj], [Xn, "r", 53, 244, mj], [ie, "r", 54, 244, 0], [ie, "r", 55, 244, Da], [Xn, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, In], [za, "r", 42, 245, 0], [1, "r", 43, 245, mj], [1, "r", 44, 245, 0], [1, "r", 45, 245, Hi], [za, "r", 46, 245, 0], [ie, "r", 47, 245, Da], [Te, "r", 48, 245, Zj], [za, "r", 49, 245, 0], [ie, "r", 50, 245, mj], [za, "r", 51, 245, Rq], [Xn, "r", 52, 246, mj], [za, "r", 52, 245, wj], [za, "r", 53, 245, Da], [Xn, "r", 54, 245, Da], [1, "r", 55, 245, Da], [1, "r", 53, 246, Rq], [1, "r", 51, 246, In], [1, "r", 50, 246, Hi], [1, "r", 49, 246, 0], [ie, "r", 48, 246, In], [Te, "r", 47, 246, mj], [za, "r", 45, 246, 0], [za, "r", 46, 246, mj], [Te, "r", 44, 246, mj], [1, "r", 43, 246, 0], [Xn, "r", 42, 246, Da], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [za, "r", 43, 247, 0], [Te, "r", 44, 247, 0], [1, "r", 45, 247, Da], [1, "r", 46, 247, In], [Oq, "r", 47, 247, 0], [Oq, "r", 48, 247, mj], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [za, "r", 52, 247, In], [za, "r", 53, 247, 0], [Te, "r", 54, 247, Rq], [mk, "r", 49, 247, 0], [1, "r", 49, 248, Hi], [mk, "r", 47, 248, 0], [1, "r", 46, 248, 0], [mk, "r", 45, 248, Rq], [1, "r", 51, 248, mj], [1, "r", 55, 246, 1], [Te, "r", 55, 247, 1], [Oq, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, ie], [za, "r", 93, 270, 1], [1, "r", 94, 270, za], [Xn, "r", 95, 271, 1], [1, "r", 94, 271, 1], [Xn, "r", 93, 271, 1], [za, "r", 94, 282, Oq], [1, "r", 93, 282, mk], [za, "r", 93, 281, 1], [1, "r", 92, 281, 1], [Te, "r", 92, 280, 1], [Oq, "r", 91, 280, ie], [1, "r", 90, 279, 1], [Oq, "r", 95, 275, 1], [Te, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [Oq, "r", 94, 274, Xn], [mk, "r", 94, 273, 1], [mk, "r", 94, 272, Oq], [mk, "r", 93, 272, 1], [ie, "r", 93, 273, mk], [1, "r", 93, 274, Xn], [mk, "r", 92, 273, ie], [za, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [Te, "r", 92, 269, ie], [1, "r", 90, 269, 1], [1, "r", 91, 269, Oq], [ie, "r", 91, 271, Xn], [1, "r", 91, 270, Oq], [Oq, "r", 95, 278, Te], [mk, "r", 95, 277, Te], [1, "r", 95, 276, 1], [1, "r", 94, 276, Xn], [za, "r", 94, 275, Xn], [Xn, "r", 93, 275, ie], [Te, "r", 92, 274, za], [1, "r", 92, 275, 1], [Oq, "r", 91, 275, Te], [1, "r", 90, 275, mk], [1, "r", 89, 274, 1], [Xn, "r", 90, 274, 1], [za, "r", 89, 275, 1], [1, "r", 88, 274, ie], [1, "r", 88, 273, 1], [Te, "r", 86, 272, 1], [mk, "r", 85, 271, 1], [Xn, "r", 86, 271, za], [mk, "r", 87, 272, Oq], [1, "r", 55, 248, za], [1, "r", 54, 248, za], [1, "r", 56, 249, za], [1, "r", 55, 249, Oq], [ie, "r", 55, 250, mk], [1, "r", 56, 250, ie], [1, "r", 57, 250, za], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [Oq, "r", 58, 250, 1], [1, "r", 60, 250, za], [Te, "r", 61, 251, za], [1, "r", 60, 251, 1], [ie, "r", 62, 251, 1], [za, "r", 62, 252, Te], [Oq, "r", 63, 252, 1], [Te, "r", 58, 251, Oq], [1, "r", 57, 251, Xn], [Oq, "r", 56, 251, ie], [1, "r", 58, 252, 1], [1, "r", 57, 252, Oq], [Xn, "r", 57, 253, Oq], [1, "r", 58, 253, Te], [mk, "r", 58, 254, za], [1, "r", 59, 255, ie], [Xn, "r", 58, 255, Oq], [1, "r", 57, 254, ie], [1, "r", 56, 252, Xn], [1, "r", 55, 251, 1], [Te, "r", 60, Br, 1], [Te, "r", 61, Li, 1], [Oq, "r", 61, 256, za], [1, "r", 60, Ja, ie], [1, "r", 62, eq, ie], [1, "r", 62, 257, 1], [1, "r", 61, 257, Xn], [Te, "r", 64, 253, Xn], [mk, "r", 64, 254, mk], [mk, "r", 65, 254, ie], [1, "r", 61, 250, mk], [1, "r", 64, 252, ie], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, Oq], [Te, "r", 64, zn, mk], [Te, "r", 64, Si, 1], [1, "r", 65, Kk, Oq], [mk, "r", 65, 257, 1], [Te, "r", 64, 257, ie], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [ie, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, k, 1], [1, "r", 66, gq, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [za, "r", 67, 259, za], [1, "r", 66, 259, ie], [1, "r", 65, 259, 1], [za, "r", 56, 246, 1], [1, "r", 56, 245, za], [Xn, "r", 68, 258, 1], [1, "r", 68, 259, mk], [Oq, "r", 68, 260, 1], [1, "r", 69, 260, 1], [Xn, "r", 69, 261, za], [1, "r", 70, 261, za], [Te, "r", 71, 261, 1], [1, "r", 67, 260, Xn], [1, "r", 89, 269, 1], [1, "r", 89, 268, za], [1, "r", 90, 268, 1], [mk, "r", 82, 267, 1], [Xn, "r", 83, 267, 1], [Xn, "r", 80, 266, 1], [Oq, "r", 81, 266, Xn], [1, "r", 81, 267, 1], [1, "r", 79, 266, Oq], [1, "r", 78, 265, 1], [Oq, "r", 77, 265, za], [Xn, "r", 76, 264, 1], [1, "r", 75, 264, 1], [Oq, "r", 75, 263, Te], [1, "r", 74, 263, 1], [Xn, "r", 74, 262, 1], [Xn, "r", 72, 262, za], [1, "r", 73, 262, 1], [ie, "r", 71, 262, 1], [1, "r", 85, 270, Oq], [Te, "r", 84, 270, 1], [1, "r", 84, 269, 1], [mk, "r", 83, 269, ie], [za, "r", 82, 269, za], [1, "r", 81, 269, mk], [1, "r", 81, 268, 1], [za, "r", 82, 268, Oq], [1, "r", 83, 268, Te], [1, "r", 80, 268, 1], [1, "r", 80, 267, Xn], [1, "r", 79, 267, 1], [za, "r", 78, 266, 1], [Oq, "r", 76, 265, 1], [Oq, "r", 75, 262, 1], [Oq, "r", 90, 280, 1], [Xn, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, ie], [za, "r", 88, 278, 1], [1, "r", 87, 277, ie], [1, "r", 86, 276, 1], [Oq, "r", 86, 275, 1], [za, "r", 86, 274, 1], [ie, "r", 86, 273, 1], [1, "r", 85, 273, Oq], [1, "r", 85, 272, mk], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [ie, "r", 87, 278, Xn], [mk, "r", 84, 271, za], [1, "r", 83, 270, 1], [1, "r", 87, 273, Te], [1, "r", 91, 274, 1], [mk, "r", 89, 273, za], [ie, "r", 88, 272, 1], [1, "r", 91, 281, 1], [ie, "r", 92, 282, mk], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [Te, "r", 85, 275, ie], [mk, "r", 84, 273, Xn], [1, "r", 84, 272, 1], [mk, "r", 83, 271, 1], [Oq, "r", 82, 270, za], [1, "r", 84, 267, 0], [Oq, "r", 85, 267, Zj], [Te, "r", 76, 262, wj], [mk, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [Xn, "r", 80, 262, wj], [1, "r", 80, 263, wj], [mk, "r", 81, 263, mj], [Te, "r", 82, 263, ya], [1, "r", 83, 263, Zj], [Te, "r", 84, 263, Hi], [1, "r", 85, 263, 0], [ie, "r", 88, 262, 0], [mk, "r", 89, 262, 0], [Oq, "r", 90, 262, 0], [1, "r", 87, 262, 0], [Xn, "r", 86, 262, mj], [Te, "r", 86, 263, 0], [1, "r", 87, 263, Da], [Te, "r", 91, 262, Hi], [1, "r", 95, 262, 0], [za, "r", 94, 262, 0], [1, "r", 86, 267, wj], [Te, "r", 87, 267, wj], [Oq, "r", 87, 268, Hi], [ie, "r", 86, 268, 0], [1, "r", 74, 189, Rq], [Xn, "r", 75, 189, Zj], [1, "r", 76, 189, Zj], [za, "r", 77, 189, wj], [1, "r", 78, 190, 0], [1, "r", 77, 190, mj], [Te, "r", 75, 190, wj], [Oq, "r", 76, 190, 0], [1, "r", 74, 190, wj], [1, "r", 73, 190, 0], [ie, "r", 78, 191, Rq], [mk, "r", 76, 191, 0], [1, "r", 77, 191, Zj], [1, "r", 75, 191, Zj], [1, "r", 74, 191, In], [ie, "r", 78, 192, Rq], [1, "r", 77, 192, Zj], [ie, "r", 76, 192, Rq], [1, "r", 75, 192, wj], [Oq, "r", 74, 192, In], [ie, "r", 73, 191, Da], [1, "f", ie, 96, 22, Te], [Oq, "s", Oq, 97, 22, Oq], [1, "f", 1, 98, 22, 1], [1, "s", mj, 99, 22, Te], [ie, "s", 1, sa, 21, ie], [ie, "s", Oq, 96, 49, 1], [1, "s", Te, Nn, 50, ie], [1, "s", 0, 99, 49, 1], [Xn, "s", 0, 97, 49, 1], [ie, "f", 1, 98, 49, Oq], [Te, "r", 70, 218, 0], [1, "r", 71, 218, 0], [Oq, "r", 72, 218, Hi], [1, "r", 73, 218, 0], [za, "r", 74, 219, 0], [1, "r", 73, 219, wj], [1, "r", 72, 219, Rq], [1, "r", 71, 219, In], [mk, "r", 70, 219, 0], [mk, "r", 73, 220, mj], [ie, "r", 72, 220, 0], [1, "r", 71, 220, 0], [Oq, "r", 72, 221, 0], [1, "r", 71, 221, In], [Oq, "r", 70, 221, 0], [1, "r", 69, 221, Hi], [mk, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [Te, "r", 69, 219, Hi], [za, "r", 68, 220, Da], [mk, "r", 73, 221, Da], [Xn, "r", 73, 222, Hi], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [Xn, "r", 74, 221, 0], [1, "r", 74, 220, 0], [Xn, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, In], [Xn, "r", 69, 222, Hi], [Xn, "r", 29, 217, 0], [1, "r", 30, 217, 0], [mk, "r", 31, 217, 0], [1, "r", 32, 217, mj], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, Da], [1, "r", 27, 218, Hi], [Oq, "r", 28, 218, wj], [1, "r", 29, 218, Hi], [Te, "r", 30, 218, 0], [Te, "r", 28, 217, 0], [Oq, "r", 26, 217, 0], [1, "r", 27, 217, 0], [ie, "r", 28, 216, 0], [Oq, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, mj], [1, "r", 32, 218, Rq], [1, "r", 31, 216, ya], [mk, "r", 31, 221, 0], [1, "r", 31, 220, Rq], [Xn, "r", 30, 220, In], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, In], [1, "r", 26, 220, Hi], [Oq, "r", 25, 218, mj], [1, "r", 27, 221, 0], [1, "r", 28, 221, Da], [1, "r", 29, 221, In], [Oq, "r", 30, 221, mj], [Te, "r", 32, 220, Hi], [Te, "r", 32, 219, Rq], [Oq, "r", 33, 218, Zj], [Te, "r", 33, 219, 0], [1, "r", 75, 238, 0], [Oq, "r", 76, 238, 0], [1, "r", 77, 239, 0], [Xn, "r", 76, 239, 0], [Oq, "r", 75, 239, wj], [1, "r", 74, 239, 0], [1, "r", 76, 240, mj], [1, "r", 77, 240, 0], [1, "r", 78, 240, Rq], [1, "r", 77, 241, 0], [za, "r", 76, 241, In], [Oq, "r", 75, 241, Zj], [1, "r", 75, 240, Zj], [1, "r", 74, 240, 0], [ie, "r", 78, 239, Rq], [mk, "r", 77, 238, ya], [Te, "r", 18, 253, 0], [Oq, "r", 19, 252, 0], [Oq, "r", 20, 252, Zj], [mk, "r", 21, 253, mj], [mk, "r", 23, 254, 0], [za, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, mj], [1, "r", 18, 254, 0], [Xn, "r", b, 253, 0], [za, "r", 20, 253, Da], [ie, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [mk, "r", hn, Li, 0], [1, "r", 19, Li, 0], [1, "r", 18, 255, 0], [1, "r", Ri, 255, In], [1, "r", 17, 254, Rq], [Xn, "r", 22, fa, 0], [Oq, "r", Dq, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, gq, 0], [Oq, "r", 39, 270, 0], [za, "r", 40, 270, wj], [ie, "r", 41, 270, Da], [1, "r", 43, 270, Rq], [ie, "r", 44, 270, 0], [Te, "r", 46, 270, 0], [Oq, "r", 42, 270, 0], [ie, "r", 45, 270, 0], [1, "r", 44, 269, In], [Te, "r", 43, 269, 0], [Oq, "r", 42, 269, In], [mk, "r", 40, 269, 0], [Xn, "r", 41, 269, 0], [1, "r", 45, 271, mj], [1, "r", 44, 271, Hi], [1, "r", 43, 271, In], [ie, "r", 42, 271, mj], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, Rq], [1, "r", 44, 272, mj], [1, "r", 43, 272, In], [mk, "r", 42, 272, Zj], [Te, "r", 19, 284, 0], [Te, "r", 20, 284, mj], [1, "r", 21, 285, 0], [1, "r", 22, 285, ya], [1, "r", 23, 286, 0], [1, "r", 22, 288, wj], [mk, "r", 20, 288, 0], [Xn, "r", 18, 288, 0], [Xn, "r", 17, 287, 0], [1, "r", 16, 287, 0], [Oq, "r", ck, 286, 0], [Te, "r", 17, 286, wj], [1, "r", Vq, 286, 0], [Xn, "r", so, 286, 0], [1, "r", qi, 286, Rq], [ie, "r", 21, 286, Hi], [1, "r", 22, 286, 0], [za, "r", hn, 285, Zj], [za, "r", 19, 285, Hi], [1, "r", 18, 285, 0], [1, "r", Rk, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [za, "r", 20, 287, wj], [Te, "r", 21, 287, mj], [1, "r", 22, 287, 0], [Oq, "r", 23, 287, 0], [za, "r", 21, 288, ya], [mk, "r", Dq, 288, mj], [ie, "r", Ri, 288, 0], [Xn, "r", b, 289, Hi], [1, "r", 21, 289, 0], [mk, "r", 22, 289, 0], [mk, "r", Ok, 289, Da], [1, "r", 23, 288, mj], [Xn, "r", 24, 287, mj], [Oq, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, Rq], [1, "r", 64, 287, 0], [Te, "r", 63, 287, In], [1, "r", 60, 287, Rq], [Xn, "r", 59, 285, 0], [Oq, "r", 58, 284, 0], [1, "r", 59, 283, Da], [Te, "r", 65, 283, mj], [mk, "r", 64, 283, Rq], [mk, "r", 63, 283, 0], [Oq, "r", 62, 283, 0], [1, "r", 61, 283, Hi], [Oq, "r", 60, 283, Rq], [Te, "r", 59, 284, In], [za, "r", 58, 285, 0], [1, "r", 60, 286, 0], [mk, "r", 59, 286, mj], [Xn, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [Oq, "r", 62, 286, ya], [Oq, "r", 63, 286, Zj], [Oq, "r", 64, 286, 0], [mk, "r", 65, 286, 0], [za, "r", 67, 285, In], [ie, "r", 66, 285, In], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [Oq, "r", 62, 285, 0], [Te, "r", 61, 285, In], [mk, "r", 60, 285, Zj], [1, "r", 60, 284, 0], [1, "r", 61, 284, Zj], [1, "r", 62, 284, Rq], [Xn, "r", 63, 284, 0], [1, "r", 64, 284, Rq], [1, "r", 65, 284, 0], [Te, "r", 66, 284, 0], [1, "r", 65, 287, 0], [Xn, "r", 67, 286, Hi], [1, "p", 0, ik, 189, 1], [ie, "p", 0, 32, 184, 1], [Oq, "p", 0, 47, 191, 1], [1, "p", Hi, 64, 184, 1], [1, "p", Hi, 84, 192, 1], [1, "p", Da, 78, 207, 1], [1, "p", Da, 58, 216, 1], [Te, "p", Hi, 41, 211, Oq], [1, "p", 0, 18, 211, 1], [1, "p", mj, la, 230, 1], [1, "p", Hi, 29, 237, 1], [ie, "p", 0, 50, 230, 1], [1, "p", mj, 78, 241, Oq], [1, "p", 0, 74, 256, ie], [Xn, "p", In, 68, 266, 1], [1, "p", 0, 48, 259, 1], [ie, "p", wj, 31, 263, Te], [Te, "p", ya, 18, 274, 1], [mk, "p", In, 33, 283, 1], [Te, "p", Rq, 66, 287, 1], [1, "p", In, 82, 291, Oq], [Te, "p", 0, 16, 295, mk], [1, "p", 0, 45, 294, 1], [Oq, "p", 0, kn, 252, 1], [mk, "p", 0, 79, 227, 1], [Oq, "p", 0, 32, 200, za], [Xn, "p", In, 64, 200, Te], [mk, "s", wj, 21, 193, 1], [1, "s", mk, hr, 189, 1], [Te, "s", 2, 26, 189, 1], [1, "b", Oq, 15, 181, 0], [Oq, "b", 2, 18, 190, 0], [Oq, "b", 2, 29, 193, Hi], [Oq, "t", ea, 16, 182, Hi], [ie, "t", 3, Z, 195, 0], [Te, "t", 4, p, 183, Hi], [1, "t", 5, sk, 184, 0], [1, "t", 5, 23, 182, 0], [Oq, "t", 4, 30, 187, ya], [za, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, In], [1, "s", za, 24, 181, ie], [1, "t", 3, 33, 183, Da], [za, "b", Te, 36, 189, 0], [1, "t", xj, 35, 190, Rq], [Oq, "b", 3, b, 200, 0], [1, "s", 0, 28, 194, 1], [Oq, "s", 1, 32, 196, 1], [Te, "s", mk, 36, 183, za], [Te, "s", Hj, 38, 184, 1], [1, "s", xq, Ra, 192, Xn], [Oq, "s", pq, 12, 183, 1], [mk, "s", 1, $q, 199, 1], [mk, "b", 0, F, 202, Rq], [Xn, "t", Hj, ja, 203, 0], [1, "t", Gi, wq, 200, 0], [1, "t", 4, 12, 194, 0], [Xn, "t", Eq, 15, 205, Rq], [1, "t", 5, 29, 200, Da], [1, "t", ea, 28, 201, 0], [Xn, "s", Hj, 25, 199, 1], [ie, "s", mk, 22, 204, mk], [ie, "g", pq, 25, 205, 1], [za, "b", Xn, 27, 216, In], [1, "s", mk, 25, 217, ie], [1, "s", 1, 33, 217, ie], [za, "s", 2, 35, 215, Te], [Xn, "s", 0, 32, 221, 1], [za, "t", xj, 31, 222, Da], [1, "t", Fr, 26, 221, 0], [mk, "b", fn, 27, 222, 0], [za, "b", ya, 17, 217, 0], [Te, "t", ea, 18, 216, 0], [ie, "t", 4, Zn, 215, 0], [za, "t", Fk, 30, 213, 0], [za, "t", 5, 24, 208, 0], [Xn, "s", Te, Sj, 216, Xn], [1, "s", 2, 11, 210, 1], [za, "s", H, 34, 223, mk], [mk, "b", 2, 36, 218, 0], [1, "t", Fr, 40, 206, 0], [1, "t", z, 35, 203, 0], [Xn, "t", 3, 39, 206, 0], [za, "b", 1, 34, 204, 0], [1, "s", Oq, 33, 206, 1], [1, "s", 1, 42, 203, Te], [1, "s", mj, 47, 196, Te], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, In], [1, "t", kq, 44, 187, 0], [1, "b", Te, 46, 181, Da], [1, "t", 2, 47, 182, Zj], [Xn, "b", wj, 57, 182, Hi], [1, "b", 3, 56, 183, ya], [1, "t", 4, 55, 184, 0], [1, "t", Oj, 62, 195, wj], [Te, "s", 1, 51, 185, ie], [ie, "s", 2, 62, 180, Oq], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, Te], [1, "s", pq, 48, 195, za], [1, "b", mk, 51, 199, 0], [1, "t", 2, 52, 199, mj], [1, "t", 3, 56, 204, In], [1, "t", $i, 57, 204, Rq], [Oq, "t", 4, 51, 204, Hi], [Te, "s", 1, 52, 205, 1], [mk, "s", Hj, 57, 200, 1], [1, "s", ie, 56, 199, 1], [ie, "b", 0, 55, 192, 0], [1, "t", fn, 56, 193, 0], [za, "t", Gi, 50, 190, 0], [za, "b", 1, 76, 188, 0], [Xn, "t", pq, 75, 188, 0], [1, "t", lr, 73, 192, 0], [mk, "t", 4, 72, 191, wj], [1, "t", 5, 78, 193, Da], [1, "b", Zj, 79, 192, Rq], [ie, "s", xq, 79, 190, 1], [ie, "s", mk, 74, 194, 1], [1, "s", 1, 72, 187, ie], [mk, "s", Zj, 74, 183, 1], [Oq, "s", 1, 75, 183, 1], [Xn, "t", 2, 69, 181, Zj], [Te, "t", 4, 70, 182, mj], [Te, "t", nr, 69, 180, mj], [1, "b", 1, 65, 189, 0], [Oq, "b", jk, 66, 189, Hi], [Te, "t", ci, 64, 188, 0], [1, "t", Vn, 67, 192, Hi], [1, "b", 2, 85, 183, 0], [ie, "t", Te, 84, 184, Hi], [1, "t", ba, 81, 180, 0], [za, "t", Eq, 89, 180, wj], [1, "t", 0, 90, 188, ya], [1, "t", nq, 89, 190, In], [ie, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", Xn, 84, 200, 0], [1, "t", 2, 83, 201, 0], [za, "t", 4, 87, 207, 0], [ie, "s", 2, 79, 202, 1], [ie, "s", za, 80, 203, 1], [1, "t", Zj, 71, 200, Da], [Xn, "b", Hj, 72, 201, mj], [1, "t", xq, 65, 205, 0], [1, "t", 1, 66, 206, 0], [mk, "t", ba, 63, 209, 0], [Te, "t", 5, 73, 203, mj], [1, "s", 0, 70, 207, Xn], [mk, "s", za, 71, 206, 1], [1, "s", xj, 68, 199, za], [za, "s", za, 64, 213, Te], [Xn, "t", 0, 85, 213, wj], [1, "b", 2, 84, 212, ya], [Oq, "t", Hk, 77, 209, 0], [mk, "t", $i, 83, 216, 0], [Te, "t", nj, 73, 209, Rq], [1, "b", 0, 86, 222, ya], [1, "b", nq, 87, 221, Da], [Xn, "s", mk, 80, 214, 1], [Te, "s", Pn, 87, 216, 1], [1, "s", Pn, 84, 224, 1], [1, "s", mk, 77, 227, Te], [Xn, "t", Oq, 74, 222, 0], [mk, "b", Xn, 69, 218, 0], [1, "b", 2, 75, 219, Zj], [1, "s", jk, 74, 218, 1], [1, "s", za, 69, 223, 1], [Oq, "s", Te, 77, 221, 1], [za, "b", 1, 72, 211, 0], [mk, "b", Xn, 85, 232, mj], [Xn, "t", xq, 84, 233, 0], [Xn, "t", Pn, 78, 238, 0], [1, "b", 1, 77, 237, 0], [ie, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, ya], [Xn, "b", 2, 74, 241, In], [1, "s", Zj, 73, 242, mk], [Te, "s", Da, 81, 238, 1], [1, "s", 1, 82, 237, Te], [1, "s", Hj, 72, 237, za], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, Zj], [1, "b", 2, 62, 229, mj], [ie, "t", 4, 67, 231, mj], [Te, "t", ba, 62, 228, 0], [Te, "t", q, 64, 233, Da], [za, "t", H, 65, 234, Hi], [1, "t", 2, 51, 220, wj], [Xn, "t", 1, 50, 218, 0], [Xn, "b", 1, 45, 223, Hi], [1, "b", 2, 46, 224, Rq], [1, "t", Mq, 49, 218, 0], [mk, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", Pn, 51, 213, 1], [ie, "s", H, 42, 227, za], [1, "s", Oq, 44, 227, Xn], [Oq, "s", 1, 60, 230, ie], [ie, "s", 2, 59, 231, mk], [ie, "b", 1, 85, 252, 0], [Te, "t", 2, 84, 251, In], [1, "t", 2, 74, 250, 0], [ie, "t", 0, 75, 251, 0], [ie, "b", Zj, 83, 246, wj], [1, "t", qo, 82, 247, 0], [Xn, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, Da], [1, "t", Oj, 75, 252, Hi], [Te, "s", 1, 79, 257, mk], [Te, "s", 2, 78, 249, Te], [1, "s", 2, 80, 258, ie], [za, "s", 1, 88, 254, 1], [1, "s", Te, 85, 264, 1], [1, "s", 2, 89, 263, Te], [Oq, "s", pq, 87, 269, 1], [Xn, "s", 0, 84, 268, Xn], [Te, "s", pq, 76, 267, Te], [1, "s", ie, 66, 261, mk], [1, "s", ie, 87, 274, Oq], [Oq, "s", 1, 76, 263, za], [mk, "s", za, 59, 251, Oq], [za, "s", Rq, 59, 252, Xn], [1, "t", 2, 86, 265, wj], [1, "t", Zj, 78, 270, 0], [Te, "t", 2, 79, 271, 0], [ie, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, Rq], [1, "b", 1, 71, 264, 0], [mk, "b", Te, 88, 269, 0], [1, "t", q, 84, 264, Rq], [1, "t", nr, 79, 261, In], [1, "t", q, 72, 265, 0], [1, "t", 5, 77, 270, 0], [mk, "t", 0, 87, 261, In], [Te, "t", pq, 86, 260, Rq], [1, "t", Pe, 84, 255, wj], [ie, "t", Gi, 68, fa, 0], [Xn, "t", mk, 67, 254, 0], [1, "t", jk, 65, 262, 0], [1, "t", 1, 57, 260, 0], [Te, "t", 2, 58, 259, 0], [1, "b", 1, 63, Ja, 0], [ie, "b", 1, 52, 248, 0], [mk, "t", pq, 53, 248, Rq], [1, "s", 1, 50, 253, ie], [ie, "s", Pn, 67, 263, 1], [Te, "s", 2, 52, 252, 1], [1, "s", Hj, 71, 244, Oq], [Xn, "b", Rq, 57, 245, Hi], [Te, "t", 2, 58, 244, Da], [mk, "b", 1, 53, 237, Da], [1, "t", H, 54, 237, Da], [Xn, "t", lr, 41, 238, 0], [Xn, "t", 1, 42, 237, 0], [mk, "t", M, 57, 235, 0], [Te, "t", z, 60, 246, 0], [1, "t", M, 50, 252, In], [mk, "t", Xn, 42, 248, 0], [za, "b", 1, 43, 249, Da], [mk, "b", 3, 37, 243, wj], [1, "s", In, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, ie], [1, "s", 2, 60, 243, 1], [1, "s", Hj, 36, 240, Te], [1, "s", 2, 43, 254, za], [Te, "s", 1, 42, 254, Oq], [za, "t", 1, 38, 233, 0], [Te, "t", 2, 35, 235, 0], [1, "t", ba, 33, 228, 0], [1, "t", Pe, 33, 245, ya], [za, "t", Pe, 43, 235, wj], [1, "t", q, 45, 249, 0], [Te, "t", 5, 41, 253, Rq], [ie, "b", Oq, 20, 227, 0], [1, "b", Oq, 14, 240, 0], [1, "t", 3, 21, 227, wj], [ie, "t", 3, 27, 234, 0], [1, "t", Hk, 15, 241, wj], [Xn, "t", nq, gr, 229, Hi], [1, "t", $i, 17, 224, Rq], [Xn, "t", nj, ra, 231, 0], [mk, "t", nj, 22, 238, wj], [1, "t", Mq, 11, 239, 0], [1, "t", Te, 22, 243, wj], [1, "b", xj, 23, 242, Hi], [mk, "s", 1, 23, 238, 1], [Xn, "s", 1, 22, 228, Xn], [za, "s", 2, 24, 228, 1], [1, "s", Hj, 21, 236, 1], [Xn, "s", ya, 13, 228, Xn], [1, "s", Da, 16, 242, 1], [ie, "s", mk, 15, 244, Oq], [1, "s", 1, 34, 236, 1], [za, "t", 1, 26, 249, wj], [Xn, "t", 1, 22, 256, Hi], [1, "t", xq, 23, 255, mj], [1, "b", 1, qa, 256, Rq], [1, "b", 2, 18, Go, Rq], [1, "s", 0, 21, 252, 1], [za, "s", 2, vi, 250, za], [1, "s", 2, 23, 259, mk], [mk, "s", 1, 13, 257, 1], [1, "t", Te, 31, 254, 0], [mk, "t", xj, 32, 254, 0], [Oq, "t", ba, 28, 254, 0], [1, "t", $i, 34, 258, ya], [1, "t", Da, 29, 260, 0], [Te, "b", 2, 30, 261, 0], [1, "t", mj, 43, 262, 0], [1, "t", 2, 42, 263, mj], [1, "t", 4, 46, 264, 0], [Te, "b", 1, 39, 265, Da], [1, "b", 1, 58, 267, 0], [mk, "t", 2, 57, 268, 0], [mk, "t", 4, 62, 270, Hi], [za, "t", 5, 52, 273, ya], [Oq, "s", mk, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", Hj, 41, 274, 1], [mk, "t", lr, 42, 268, mj], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [Oq, "b", 1, 14, 265, 0], [ie, "t", 2, zi, 266, 0], [Xn, "t", Vn, Be, 264, 0], [mk, "t", 4, 29, 263, wj], [1, "t", 4, Mo, 269, Hi], [1, "t", 1, 29, 271, mj], [1, "b", pq, 28, 272, 0], [1, "t", 2, 24, 267, 0], [Oq, "t", 2, A, 279, 0], [Xn, "t", Hi, 19, 278, Da], [1, "t", ci, Dr, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, hr, 289, 0], [Xn, "t", 2, wq, 283, 0], [1, "t", 2, 19, 290, Da], [ie, "t", 4, so, 283, wj], [1, "t", 4, 20, 290, Zj], [1, "s", 1, sr, 285, ie], [1, "s", ie, 24, 288, Oq], [ie, "s", 2, 26, 287, Te], [Oq, "s", H, 16, 278, za], [1, "s", 1, 21, 268, 1], [1, "s", xq, b, 268, Xn], [ie, "t", Da, 12, 294, 0], [mk, "b", Te, Dr, 295, 0], [ie, "t", I, 13, 291, 0], [1, "t", 3, Bo, 299, Hi], [Xn, "t", 4, yq, 287, Rq], [1, "t", Vn, qa, 298, wj], [1, "t", 1, 27, 294, 0], [1, "b", jk, 26, 295, Zj], [1, "t", fn, 33, 297, 0], [Te, "b", 1, 48, 278, mj], [za, "b", Rq, 46, 280, 0], [1, "b", jk, 50, 280, Zj], [1, "t", Da, 44, 282, 0], [1, "b", 1, 49, 283, Da], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, ya], [Oq, "b", 3, 44, 284, ya], [Xn, "b", mj, 47, 284, Zj], [1, "b", 2, 42, 283, 0], [1, "t", Fr, 51, 277, 0], [Te, "b", Xn, 44, 286, 0], [ie, "b", 2, 46, 286, wj], [Te, "b", 1, 42, 285, 0], [za, "b", Hk, 41, 286, 0], [mk, "t", z, 42, 287, 0], [1, "b", mk, 42, 278, ya], [mk, "b", Pn, 43, 279, mj], [1, "b", wj, 40, 280, 0], [1, "t", Gi, 39, 283, mj], [1, "t", $i, 39, 279, Rq], [Te, "t", 5, 43, 277, Rq], [mk, "t", 5, 47, 287, 0], [1, "t", ba, 46, 277, 0], [Oq, "t", Gi, 45, 290, ya], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", Xn, 29, 279, 0], [1, "b", 1, 32, 277, ya], [Te, "t", qo, 31, 278, 0], [1, "b", jk, 28, 280, ya], [za, "t", 4, 29, 286, 0], [Te, "t", z, 28, 275, Hi], [1, "t", ci, 37, 292, 0], [1, "b", mk, 36, 291, 0], [ie, "b", Zj, 34, 298, 0], [1, "t", Vn, 31, 292, mj], [1, "t", ba, 46, 295, Da], [mk, "t", Gi, 59, 287, 0], [ie, "b", ie, 58, 286, mj], [Oq, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, Oq], [1, "s", 0, 67, 284, mk], [Oq, "t", 3, 66, 283, 0], [mk, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [Oq, "b", 1, 76, 294, 0], [1, "t", Oj, 75, 295, 0], [Te, "t", q, 56, 293, ya], [Te, "t", nr, 59, 281, Da], [Te, "t", 5, 67, 291, In], [ie, "b", ya, 88, 293, 0], [Oq, "t", H, 89, 292, wj], [Xn, "t", jk, 85, 286, mj], [1, "t", Fr, 88, 289, 0], [1, "t", Vn, 79, 287, ya], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, Rq], [1, "b", 0, 75, 278, 0], [ie, "t", 3, 74, 277, Hi], [Oq, "t", 4, 81, 276, 0], [ie, "t", Pn, 65, 276, mj], [Oq, "b", Oq, 66, 275, wj], [Te, "g", Da, 45, 261, 1], [1, "g", 1, 39, 258, Te], [1, "g", 0, 35, 250, ie], [1, "g", pq, 22, 247, 1], [1, "g", xj, 27, 227, ie], [1, "g", 2, 63, 218, Xn], [1, "g", 1, 56, 224, 1], [Xn, "g", 0, 46, 231, 1], [Te, "g", mk, 65, 240, ie], [za, "g", pq, 67, 238, 1], [1, "g", lr, 79, 232, Oq], [mk, "g", pq, 72, 253, ie], [ie, "g", 2, 62, 264, 1], [Xn, "g", xq, 28, 267, 1], [1, "g", pq, 58, 274, za], [Te, "de", Hj, 14, 182, 0], [1, "de", 2, 24, 182, Da], [Xn, "de", 0, 11, 185, Rq], [mk, "de", 0, 14, 194, 0], [Te, "de", ie, 25, 196, 0], [Oq, "de", 3, 31, 183, mj], [Oq, "de", In, 38, 181, 0], [za, "de", pq, 45, 186, 0], [za, "de", 1, 38, 191, 0], [Oq, "de", Hi, 56, 181, Da], [ie, "de", Xn, 68, 182, Zj], [mk, "de", jk, 80, 181, 0], [mk, "de", qo, 86, 187, 0], [mk, "de", 0, 84, 193, ya], [Te, "de", ie, 82, 201, Hi], [1, "de", jk, 64, 191, wj], [1, "de", 2, 72, 200, ya], [1, "de", 3, 64, 201, In], [1, "de", xj, 76, 209, 0], [mk, "de", 3, 71, 212, Hi], [Oq, "de", 1, 86, 214, 0], [1, "de", Zj, 57, 208, Zj], [Te, "de", wj, 41, 203, Rq], [za, "de", Xn, 15, 206, mj], [1, "de", lr, 25, 209, Da], [1, "de", qo, sr, 218, wj], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", pq, 24, 238, mj], [1, "de", 3, 22, 246, Zj], [1, "de", qo, jn, 253, Zj], [1, "de", Te, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, Do, 267, 0], [Oq, "de", mj, 24, 268, mj], [1, "de", In, sj, 278, wj], [1, "de", 2, 21, 279, 0], [ie, "de", 2, 30, 272, 0], [Xn, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", ci, gr, 291, 0], [1, "de", I, 30, 287, ya], [ie, "de", 3, 27, 293, Da], [1, "de", 0, 25, 296, Zj], [1, "de", Rq, nn, 298, Da], [1, "de", 0, 8, 286, wj], [1, "de", Pn, 36, 299, Rq], [1, "de", xq, 37, 280, 0], [1, "de", yr, 38, 291, wj], [Xn, "de", 1, 48, 287, 0], [Xn, "de", Oq, 46, 277, 0], [za, "de", Oq, 53, 278, 0], [Xn, "de", I, 48, 295, 0], [1, "de", 0, 57, 294, 0], [mk, "de", Oq, 65, 290, In], [Te, "de", Te, 84, 292, 0], [za, "de", xq, 77, 295, Hi], [1, "de", 2, 84, 287, In], [1, "de", Rq, 74, 279, In], [1, "de", 3, 65, 274, 0], [Xn, "de", pq, 71, 267, wj], [1, "de", 2, 65, 261, 0], [Oq, "de", 2, 47, 264, 0], [ie, "de", 3, 47, 258, wj], [1, "de", nq, 53, 251, 0], [Oq, "de", jk, 40, 253, Rq], [Te, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, ya], [mk, "de", lr, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, wj], [mk, "de", 2, 65, 241, ya], [ie, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, In], [1, "de", xj, 86, 253, 0], [Oq, "de", Pn, 83, 245, Da], [za, "de", Te, 82, 238, ya], [ie, "de", fn, 76, 235, Hi], [mk, "de", jk, 86, 232, Da], [1, "de", wj, 86, 224, wj], [Te, "de", Pn, 76, 226, Rq], [Oq, "de", 2, 61, 228, wj], [1, "de", Pn, 58, 217, 0], [1, "de", Zj, 49, 217, 0], [1, "de", Dq, pk, 179, Da], [1, "de", 20, 17, 180, 0], [Te, "de", 22, 18, 181, 0], [1, "de", Dq, 30, 184, wj], [1, "de", 19, 27, 187, 0], [za, "de", bn, 30, 195, ya], [Xn, "de", Be, Sa, 192, 0], [1, "de", bn, 44, 182, Hi], [1, "de", Be, 49, 182, wj], [Oq, "de", 19, 54, 182, In], [ie, "de", 19, 59, 183, 0], [1, "de", bn, 56, 186, 0], [Te, "de", 19, 46, 188, Rq], [1, "de", so, 58, 193, 0], [1, "de", 19, 67, 187, 0], [ie, "de", bn, 65, 192, Da], [ie, "de", Jj, 71, 180, 0], [ie, "de", 19, 78, 187, 0], [1, "de", ha, 80, 194, Hi], [1, "de", 19, 72, 193, Hi], [mk, "de", ha, 82, 182, ya], [1, "de", 19, 88, 185, Da], [1, "de", 19, 87, 189, Da], [mk, "de", b, 86, 197, Zj], [za, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, mj], [za, "de", Dk, 70, 202, 0], [1, "de", b, 83, 199, 0], [mk, "de", b, 86, 208, 0], [Xn, "de", b, 84, 214, Da], [Te, "de", b, 83, 211, Zj], [1, "de", so, 84, 217, Zj], [Oq, "de", Be, 77, 210, 0], [Te, "de", 19, 71, 210, In], [1, "de", Dq, 73, 213, Hi], [1, "de", bq, 66, 207, wj], [1, "de", Be, 66, 204, In], [Xn, "de", 19, 62, 209, Zj], [za, "de", 19, 63, 201, 0], [Oq, "de", Jj, 56, 205, 0], [za, "de", Jj, 49, 199, In], [Xn, "de", ha, 50, 205, Hi], [1, "de", 19, 40, 197, Hi], [1, "de", 19, 38, 198, mj], [mk, "de", ha, 40, 208, 0], [1, "de", 19, 36, 204, 0], [ie, "de", 19, 33, 204, ya], [1, "de", Jj, 29, 202, ya], [Te, "de", 19, 27, 200, ya], [mk, "de", 19, 26, 193, ya], [Te, "de", Dk, Sa, 201, Hi], [ie, "de", 19, 20, 199, In], [1, "de", 19, Sj, 196, wj], [za, "de", 19, Xi, 204, Da], [mk, "de", Jj, 11, 201, 0], [1, "de", 19, 23, 208, Rq], [1, "de", Dk, 31, 214, 0], [1, "de", 19, 26, 215, Hi], [1, "de", 19, 36, 217, Zj], [1, "de", bq, 32, 223, 0], [Xn, "de", 19, 26, 223, mj], [1, "de", Dk, ro, 218, 0], [1, "de", b, _o, 215, 0], [Te, "de", Dk, 17, 212, 0], [Oq, "de", Dk, v, 224, Rq], [1, "de", Be, Be, 229, 0], [1, "de", Be, Ra, 230, mj], [1, "de", 19, 22, 240, Da], [Xn, "de", Dk, 13, 238, Hi], [ie, "de", bq, Z, 243, Da], [1, "de", b, 24, 244, In], [Te, "de", 19, 24, 250, 0], [ie, "de", Dk, 28, 253, In], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [mk, "de", 19, 31, 260, ya], [1, "de", 19, 38, 267, 0], [1, "de", Be, 44, 264, mj], [Xn, "de", ha, 43, 261, 0], [Xn, "de", bn, Fo, 257, 0], [mk, "de", 19, 22, 258, 0], [mk, "de", 19, gr, 253, Hi], [1, "de", bq, aa, 242, 0], [Oq, "de", b, Hr, 255, Hi], [Te, "de", 19, eo, 264, 0], [mk, "de", 19, 20, 265, Zj], [ie, "de", 19, 12, 271, Hi], [za, "de", ha, 8, 272, 0], [Oq, "de", Jj, 13, 277, ya], [1, "de", 19, 21, 277, 0], [Oq, "de", 19, 21, 281, 0], [za, "de", ha, 27, 282, 0], [1, "de", Jj, 29, 278, Zj], [mk, "de", Dq, 29, 273, mj], [1, "de", ha, 36, 271, 0], [Xn, "de", ha, E, 278, 0], [1, "de", 19, Jq, 286, mj], [1, "de", 19, 17, 291, 0], [za, "de", Dq, 14, 294, 0], [Oq, "de", 19, 8, 292, 0], [Te, "de", Be, Uk, 300, Zj], [za, "de", bq, hr, 298, wj], [1, "de", 19, Fo, 301, Hi], [1, "de", Dk, 27, 296, 0], [Te, "de", Dk, 25, 292, ya], [ie, "de", 19, 23, 301, 0], [Xn, "de", 19, 28, 301, ya], [za, "de", ha, 35, 297, 0], [za, "de", 19, 37, 301, 0], [ie, "de", b, 43, 301, 0], [Oq, "de", so, 46, 294, 0], [1, "de", 19, 46, 288, ya], [Xn, "de", 19, 40, 287, 0], [1, "de", so, 50, 301, 0], [1, "de", 19, 58, 301, Rq], [za, "de", ha, 64, 301, Hi], [Xn, "de", b, 71, 301, 0], [Oq, "de", ha, 80, 301, 0], [1, "de", 19, 87, 301, ya], [1, "de", 19, 86, 294, ya], [1, "de", bn, 87, 290, ya], [1, "de", Be, 82, 286, Hi], [Te, "de", 19, 75, 285, mj], [Xn, "de", Be, 66, 292, 0], [1, "de", 19, 66, 288, 0], [Oq, "de", Jj, 58, 288, 0], [Oq, "de", bq, 67, 282, mj], [Oq, "de", 19, 61, 281, Da], [ie, "de", 19, 60, 295, 0], [1, "de", ha, 50, 282, 0], [1, "de", b, 47, 283, Da], [1, "de", Jj, 48, 281, Zj], [ie, "de", 19, 44, 277, Da], [mk, "de", 19, 41, 282, Hi], [1, "de", bn, 38, 281, Da], [Xn, "de", 19, 42, 288, wj], [1, "de", 19, 52, 281, 0], [Xn, "de", 19, 50, 275, mj], [Te, "de", 19, 39, 277, Hi], [1, "de", 19, 38, 284, Rq], [1, "de", Dk, 51, 285, 0], [ie, "de", Dk, 38, 278, Hi], [ie, "de", Dq, 47, 272, Zj], [1, "de", ha, 44, 267, Hi], [1, "de", Be, 76, 280, mj], [1, "de", bn, 78, 272, wj], [Oq, "de", Dk, 68, 275, 0], [Oq, "de", Dk, 70, 265, Hi], [1, "de", Jj, 65, 263, Rq], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, wj], [1, "de", Dq, 56, 266, 0], [mk, "de", 19, 55, 260, 0], [1, "de", Dq, 59, 258, In], [1, "de", Be, 62, Nk, 0], [Oq, "de", bn, 67, 253, 0], [mk, "de", 19, 69, 256, mj], [1, "de", 19, 44, 253, ya], [Te, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, Hi], [Oq, "de", 19, 39, 239, 0], [1, "de", Be, 42, 234, Hi], [za, "de", 19, 37, 235, 0], [1, "de", Dk, 45, 226, wj], [ie, "de", Be, 46, 222, 0], [ie, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [Te, "de", 19, 74, 224, wj], [1, "de", 19, 76, 218, ya], [1, "de", 19, 84, 221, 0], [mk, "de", ha, 88, 223, mj], [za, "de", 19, 76, 230, mj], [1, "de", b, 86, 234, 0], [1, "de", 19, 79, 237, Rq], [Oq, "de", so, 75, 243, Hi], [1, "de", ha, 81, 245, In], [1, "de", 19, 83, 247, Da], [1, "de", 19, 88, 247, Rq], [mk, "de", 19, 84, 254, Zj], [1, "de", 19, 86, 251, 0], [1, "de", Jj, 85, 260, 0], [za, "de", 19, 79, 260, wj], [Oq, "de", 19, 76, 251, Rq], [ie, "de", 19, 72, 251, 0], [mk, "de", 19, 69, 251, 0], [1, "de", bn, 87, 266, 0], [1, "de", Jj, 89, 270, 0], [Te, "de", bn, 87, 271, Hi], [1, "de", 19, 82, 277, wj], [Oq, "de", b, 87, 284, 0], [Oq, "de", 19, 87, 237, Hi], [Oq, "de", bq, 88, 179, Rq], [1, "de", 19, 50, 191, mj], [1, "de", ha, 52, 221, Hi], [1, "de", 19, 34, 234, Hi], [mk, "de", 19, 27, 233, 0], [Oq, "de", 19, 37, 293, mj], [ie, "de", 29, 13, 181, 0], [Xn, "de", 29, 8, 180, mj], [za, "de", 30, Cq, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, Rq], [Te, "de", 32, 37, 182, In], [Xn, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [za, "de", 30, 58, 181, 0], [mk, "de", 30, 66, 188, In], [Oq, "de", 30, 66, 182, wj], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [ie, "de", 30, 87, 182, 0], [Oq, "de", 30, 83, 185, Rq], [Xn, "de", 29, 88, 189, 0], [za, "de", 29, 85, 202, Zj], [1, "de", 31, 82, 203, mj], [za, "de", 32, 80, 201, 0], [Oq, "de", 32, 87, 209, Rq], [1, "de", 32, 83, 214, mj], [za, "de", 30, 88, 220, Zj], [Xn, "de", 30, 78, 229, 0], [ie, "de", 30, 73, 223, wj], [1, "de", 29, 74, 217, 0], [ie, "de", 29, 67, 217, mj], [1, "de", 30, 72, 208, mj], [Oq, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, wj], [Xn, "de", 29, 63, 210, Zj], [1, "de", 29, 50, 204, Rq], [1, "de", 30, 41, 205, ya], [Te, "de", 29, 35, 205, 0], [ie, "de", 30, 27, 202, Hi], [1, "de", 30, 20, 201, 0], [1, "de", 29, Bo, 203, ya], [mk, "de", 29, Wa, 196, 0], [za, "de", 29, 24, 187, 0], [Xn, "de", 29, 28, 223, Da], [1, "de", 29, 32, 212, 0], [Oq, "de", 30, 28, 214, wj], [1, "de", 31, 24, 218, 0], [ie, "de", 29, 36, 219, 0], [Te, "de", 29, 37, 217, ya], [1, "de", 29, 52, 217, ya], [Te, "de", 29, 59, 217, 0], [Xn, "de", 29, 69, 231, Da], [1, "de", 29, 64, 242, 0], [Oq, "de", 30, 53, 253, ya], [Te, "de", 30, 45, 250, wj], [Te, "de", 30, 58, 261, wj], [Xn, "de", 30, 73, 276, mj], [mk, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, Rq], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, Hi], [1, "de", 30, 40, 288, Da], [Oq, "de", 30, 37, 283, Zj], [1, "de", 30, 53, 280, Zj], [Xn, "de", 30, 41, 277, Hi], [1, "de", 29, 28, 296, In], [ie, "de", 29, Pj, 292, Hi], [za, "de", 29, 24, 284, Hi], [mk, "de", 30, sk, 295, 0], [1, "de", 30, J, 286, mj], [1, "de", 30, 15, 279, In], [za, "de", 30, $q, 269, In], [Te, "de", 30, 21, 259, 0], [1, "de", 30, La, Kk, Hi], [Te, "de", 30, 31, 245, Zj], [ie, "de", 30, 12, 240, Da], [1, "de", 30, 28, 235, mj], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, Da], [1, "de", 30, 61, 226, Hi], [mk, "r", 96, 262, 0], [1, "r", 97, 262, mj], [1, "r", 98, 262, 0], [Xn, "r", 97, 270, In], [1, "r", 97, 271, 0], [1, "r", 97, 272, Hi], [mk, "r", 97, 273, Zj], [Te, "r", 97, 274, ya], [1, "r", 97, 275, 0], [ie, "r", 97, 276, Da], [1, "r", 97, 277, 0], [1, "r", 97, 278, ya], [za, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [mk, "r", 98, 273, 0], [mk, "r", 98, 274, In], [1, "r", 98, 275, 0], [Te, "r", 98, 276, 0], [1, "r", 98, 277, Zj], [1, "r", 98, 278, wj], [1, "r", 96, 283, 0], [ie, "r", 97, 283, 0], [Oq, "r", 97, 284, 0], [1, "r", 97, 285, 0], [Xn, "r", 98, 283, Hi], [ie, "r", 98, 284, 0], [1, "r", 98, 285, Zj], [1, "r", 96, 270, wj], [mk, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, Rq], [mk, "r", 96, 274, Zj], [mk, "r", 96, 275, Da], [Te, "r", 96, 276, 0], [Xn, "r", 96, 277, 0], [1, "r", 96, 278, Zj], [1, "r", 44, 248, 0], [1, "de", p, 94, 290, Hi], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [Te, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, za], [mk, "r", 94, 281, 1], [Oq, "r", 90, 281, za], [1, "r", 91, 282, mk], [Te, "r", 89, 281, Oq], [1, "r", 85, 276, 1], [mk, "r", 85, 277, mk], [Xn, "r", 86, 278, Xn], [1, "p", In, 85, 279, ie], [1, "r", 86, 279, 1], [ie, "r", 87, 280, 1], [1, "r", 96, 281, mj], [1, "r", 97, 281, Da], [ie, "r", 98, 281, 0], [1, "r", 98, 282, 0], [Xn, "r", 97, 282, 0], [Xn, "r", 96, 282, 0], [ie, "r", 68, 261, 1], [za, "fo", za, 94, 168, 0], [Te, "fo", 2, 94, 151, ya], [Oq, "fo", 1, 94, 138, wj], [1, "fo", 1, 93, 124, ya], [Te, "fo", 1, 94, 129, 0], [1, "fo", ie, 93, 113, 0], [Te, "fo", 1, 94, 102, ya], [Oq, "fo", Oq, 94, 93, wj], [1, "fo", 1, 93, 90, 0], [1, "fo", ie, 94, 79, 0], [ie, "fo", mk, 94, 76, mj], [Oq, "fo", 1, 93, 70, Da], [1, "fo", mk, 93, 63, wj], [1, "fo", ie, 94, 53, Da], [1, "fo", 1, 93, jn, wj], [1, "fo", ie, 85, 8, Zj], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, Vi, wj], [1, "fo", 1, 69, se, Zj], [1, "fo", Hj, 68, 14, 0], [mk, "fo", 2, 66, 25, Zj], [Oq, "fo", lr, 92, 9, 0], [1, "fo", pq, 94, 14, 0], [1, "fo", Pn, 87, 9, 0], [1, "fo", 2, 71, se, Zj], [Xn, "fo", lr, 90, 12, mj], [1, "fo", 2, 91, hq, In], [Te, "fo", 1, 74, 12, Da], [1, "fo", 2, 72, F, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, eo, 0], [1, "fo", 2, 84, 12, 0], [Xn, "fo", xj, 81, dk, 0], [1, "fo", Oq, 84, 13, 0], [za, "fo", Oq, 84, b, 0], [Oq, "fo", 1, pk, 9, Rq], [1, "fo", 1, 7, 14, 0], [Oq, "fo", mk, 8, 22, In], [ie, "fo", Xn, ur, 34, 0], [Oq, "fo", Te, 12, 24, 0], [1, "fo", jk, Iq, 24, 0], [1, "fo", xq, Qj, 21, Hi], [Oq, "fo", 2, 31, 10, 0], [ie, "fo", Hj, 33, 27, 0], [za, "fo", 2, 9, 34, Da], [1, "fo", 2, qk, 19, mj], [1, "fo", 1, dk, J, 0], [1, "fo", H, hq, R, mj], [Oq, "fo", 2, 15, 11, 0], [1, "fo", xj, 9, 9, 0], [1, "fo", lr, 9, 10, Rq], [ie, "fo", 2, Lo, 15, ya], [1, "fo", 2, 10, 23, Rq], [za, "fo", Hj, 34, 29, 0], [za, "fo", jk, 27, 18, wj], [Te, "fo", xq, 25, 21, 0], [za, "fo", 2, 20, P, 0], [1, "fo", xj, hr, 21, 0], [1, "fo", 2, 29, fk, Hi], [1, "fo", 2, 13, Sq, 0], [1, "fo", 2, rr, 38, 0], [za, "fo", H, 21, 39, 0], [Oq, "fo", xq, 84, 26, 0], [1, "fo", 2, 77, 25, In], [1, "fo", 2, 86, 35, Da], [mk, "fo", 1, 70, 35, Rq], [1, "fo", 2, 72, 36, ya], [za, "fo", 2, 73, 31, mj], [1, "fo", 2, 89, 39, 0], [1, "fo", Hj, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, ya], [1, "de", 22, 17, 206, 0], [ie, "de", Dq, 8, 184, Hi], [mk, "de", Be, 22, 183, 0], [Te, "de", bn, 35, 188, 0], [1, "de", Dq, 36, 192, Da], [za, "de", bq, 50, 277, ya], [ie, "de", ha, 35, 279, 0], [1, "t", nj, 7, 178, 0], [ie, "t", 1, 7, 179, wj], [1, "t", 3, cq, 180, 0], [1, "t", pq, 7, 181, In], [1, "t", 5, Ar, 182, 0], [1, "t", 4, 7, 183, 0], [Oq, "t", nq, 7, 184, mj], [1, "t", 4, 7, 185, In], [1, "t", xj, 7, 186, wj], [ie, "t", 1, 7, 187, 0], [ie, "t", $i, 7, 188, 0], [1, "t", fn, 7, 189, In], [Xn, "t", 5, $n, 190, Hi], [Te, "t", 1, Aq, 191, 0], [1, "t", 3, N, 192, 0], [1, "t", Fr, 7, 193, Da], [mk, "t", yr, 7, 194, 0], [ie, "t", 5, 7, 195, 0], [Oq, "t", 2, $k, 196, Zj], [Oq, "t", Pe, 7, 197, 0], [1, "b", 2, 7, 198, Hi], [1, "t", nj, N, 199, 0], [1, "t", Pn, 7, 200, Rq], [1, "t", kq, 7, 201, 0], [mk, "t", 2, 7, 202, 0], [1, "t", 4, $k, 203, Zj], [mk, "t", 2, Ar, 204, Zj], [1, "t", 5, 7, 205, mj], [1, "t", jk, Aq, 206, 0], [1, "t", 1, 7, 207, Da], [1, "t", 4, ur, 208, Da], [1, "t", yr, Ar, 209, 0], [Xn, "t", 1, 7, 210, 0], [za, "b", Rq, 7, 211, 0], [mk, "t", 3, $n, 212, wj], [1, "t", Mq, N, 213, Zj], [za, "t", qo, 7, 214, Hi], [1, "t", z, $k, 215, 0], [1, "t", 5, ia, 216, ya], [Oq, "t", 3, N, 217, In], [1, "t", 1, wk, 218, Rq], [Te, "t", Mq, Ar, 219, wj], [1, "b", 2, 7, 220, 0], [Xn, "t", 1, 7, 221, 0], [1, "t", jk, 7, 222, mj], [1, "t", Pe, cq, 223, Da], [1, "t", ci, 7, 224, Rq], [mk, "t", 1, $n, 225, 0], [Xn, "t", 4, wk, 226, Da], [1, "t", pq, wk, 227, 0], [1, "t", M, Ni, 228, 0], [1, "t", Hk, 7, 229, 0], [1, "t", za, 7, 230, 0], [Xn, "t", Fr, ur, 231, 0], [Oq, "b", 2, 7, 232, Zj], [1, "t", M, 7, 233, Hi], [Te, "t", Oq, 7, 234, 0], [1, "t", ea, Ni, 235, wj], [1, "t", ba, $n, 236, ya], [Xn, "t", jk, $n, 237, 0], [1, "t", kq, 7, 238, 0], [1, "b", I, 7, 239, 0], [1, "t", xj, cq, 240, 0], [Xn, "t", Xn, 7, 241, 0], [mk, "t", lr, $n, 242, 0], [1, "t", nj, 7, 243, 0], [ie, "t", qo, 7, 244, wj], [Xn, "t", 4, 7, 245, In], [1, "t", 1, 7, 246, ya], [mk, "b", Da, wk, 247, 0], [za, "t", 3, N, 248, 0], [Te, "t", nr, Ni, 249, ya], [1, "t", jk, $k, 250, ya], [1, "t", mk, $k, 251, ya], [Xn, "t", ba, 7, 252, 0], [Xn, "t", 3, wk, 253, wj], [1, "t", Oj, 7, 254, 0], [Xn, "t", 1, 7, Fe, 0], [mk, "t", 4, Aq, Kk, Rq], [ie, "t", mk, 7, 257, mj], [1, "t", 2, 7, 258, ya], [1, "t", 5, ur, 260, Da], [1, "t", 3, 7, 259, Hi], [1, "t", 1, Ar, 261, Zj], [ie, "t", ci, Ni, 262, 0], [1, "t", 4, 7, 263, wj], [Oq, "t", 1, 7, 264, mj], [mk, "t", 2, $k, 265, 0], [1, "t", 5, ia, 266, Rq], [1, "t", xj, 7, 267, Da], [Oq, "t", 2, 7, 269, wj], [1, "b", 2, 7, 268, Rq], [1, "t", Mq, 7, 270, 0], [ie, "t", 1, $n, 271, 0], [Xn, "t", 5, ia, 272, ya], [Xn, "b", 2, 7, 273, 0], [1, "t", 4, ia, 274, Da], [1, "t", 2, 7, 275, Hi], [1, "t", kq, Ni, 276, 0], [Te, "t", 5, Ar, 277, 0], [1, "t", H, Ni, 278, 0], [1, "t", 1, 7, 279, Zj], [1, "t", $i, Aq, 280, 0], [1, "b", 1, $k, 281, mj], [1, "t", Hk, $k, 282, 0], [1, "t", Fr, cq, 283, 0], [1, "t", mk, 7, 284, mj], [1, "t", yr, 7, 285, wj], [1, "t", 5, 7, 286, 0], [za, "t", 4, 7, 288, 0], [1, "t", H, wk, 287, 0], [mk, "b", Rq, 7, 289, Rq], [1, "t", 4, Aq, 290, In], [1, "t", 2, $n, 291, wj], [mk, "t", z, 7, 292, 0], [1, "t", fn, Ni, 293, 0], [za, "t", 1, 7, 294, 0], [1, "t", Mq, Aq, 295, Hi], [1, "t", yr, Ni, 296, 0], [1, "t", 1, cq, 297, Da], [1, "t", 4, Ni, 298, 0], [Oq, "t", H, ia, 299, Zj], [1, "b", 0, Aq, 300, 0], [ie, "t", 2, 7, 301, 0], [Oq, "r", 196, 271, 0], [mk, "r", 199, 274, 0], [za, "r", 167, 238, Da], [Te, "r", 171, 240, Zj], [ie, "r", 189, 207, Rq], [1, "r", 192, 209, wj], [mk, "r", 198, 271, Rq], [ie, "r", 197, 271, 0], [1, "r", 198, 272, wj], [Xn, "r", 197, 272, 0], [mk, "r", 196, 272, 0], [1, "r", 195, 272, Rq], [Xn, "r", 199, 272, 0], [1, "r", 199, 273, 0], [mk, "r", 198, 273, In], [Xn, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [mk, "r", 197, 274, Da], [Xn, "r", 195, 273, In], [Te, "r", 196, 274, 0], [Xn, "r", 198, 275, Zj], [1, "r", 197, 275, Hi], [1, "r", 200, 274, Zj], [1, "r", 200, 273, Hi], [1, "r", 199, 275, wj], [Xn, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, Zj], [Oq, "plm", 0, 199, 268, 0], [1, "plm", wj, 193, 277, Da], [1, "plm", Te, 199, 276, 0], [za, "s", 1, 200, 275, za], [1, "s", 1, 194, 272, Xn], [1, "s", jk, 193, 270, 1], [Xn, "g", 2, 193, 273, 1], [za, "g", 2, 201, 267, Te], [Xn, "m", 2, 220, 298, 1], [1, "m", Te, 219, 292, Xn], [1, "m", 1, 214, 297, Oq], [1, "r", 168, 238, In], [Xn, "r", 169, 238, In], [Oq, "r", 170, 238, 0], [mk, "r", 171, 239, Hi], [1, "r", 170, 239, ya], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, Hi], [1, "r", 166, 239, 0], [za, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, Hi], [1, "r", 169, 240, ya], [Xn, "r", 170, 240, In], [za, "r", 168, 241, Da], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, Rq], [Te, "plm", jk, 171, 238, Rq], [ie, "plm", Te, 166, 238, 0], [1, "plm", mj, 167, 237, 0], [mk, "plm", 0, 171, 242, 0], [1, "plm", wj, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, Zj], [za, "s", Xn, 165, 239, 1], [ie, "s", 1, 172, 241, Oq], [Oq, "s", 0, 170, 237, 1], [Oq, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", H, 162, 241, za], [mk, "s", 2, 170, 246, 1], [1, "s", lr, 167, 235, 1], [ie, "s", 2, 176, 243, mk], [mk, "r", 190, 207, Zj], [Xn, "r", 191, 207, wj], [Oq, "r", 192, 208, 0], [Te, "r", 191, 208, Zj], [1, "r", 190, 208, Zj], [1, "r", 189, 208, Hi], [1, "r", 188, 208, Rq], [za, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [Oq, "r", 188, 209, 0], [1, "r", 190, 210, 0], [za, "r", 191, 210, Rq], [1, "r", 192, 210, In], [Xn, "plm", lr, 189, 210, mj], [Te, "plm", xq, 192, 205, 0], [Xn, "plm", Xn, 192, 207, 0], [1, "plm", 0, 193, 210, ya], [1, "plm", Hi, 187, 208, 0], [Xn, "plm", 0, 197, 206, mj], [1, "plm", 0, 191, 213, Hi], [1, "plm", 0, 190, 204, Hi], [za, "s", Xn, 188, 207, mk], [1, "s", 1, 190, 211, 1], [Oq, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [Te, "s", Zj, 194, 210, mk], [1, "s", 0, 198, 207, 1], [mk, "s", 1, 193, 204, ie], [za, "s", 1, 193, 213, 1], [mk, "s", 2, 198, 212, ie], [1, "s", Pn, 182, 208, 1], [Oq, "s", mk, 204, 271, 1], [Oq, "s", mj, 203, 272, mk], [1, "s", 0, 189, 275, 1], [ie, "s", In, 195, 265, 1], [1, "s", 2, 196, 264, mk], [ie, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, za], [Oq, "s", 0, 217, 282, Te], [1, "s", za, 214, 285, 1], [1, "s", Xn, 214, 274, ie], [1, "s", mk, 203, 282, 1], [1, "s", ie, 205, 290, Oq], [Oq, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, Xn], [Xn, "s", 2, 213, 289, Oq], [1, "s", lr, 196, 294, 1], [1, "s", 2, 187, 286, mk], [Te, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", Hi, 213, 273, 1], [1, "g", 2, 212, 278, 1], [ie, "g", 1, 200, 288, mk], [1, "g", H, 215, 265, za], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, Oq], [1, "s", 0, 167, 281, mk], [1, "s", Hi, 175, 263, za], [1, "s", za, 176, 293, 1], [Xn, "s", 1, 163, 285, 1], [Xn, "s", 1, 177, 266, 1], [ie, "s", 1, 161, 272, Xn], [1, "s", pq, 185, 261, Xn], [1, "c", wj, 217, 270, 1], [1, "c", Hi, 220, 278, Xn], [1, "c", ya, 217, 283, 1], [1, "c", 0, 220, 287, ie], [za, "c", Da, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, Xn], [1, "c", mj, 208, 283, 1], [1, "c", mj, 197, 283, 1], [1, "c", 0, 190, 289, Te], [mk, "c", 0, 183, 296, ie], [1, "c", Rq, 189, 291, 1], [Xn, "c", mj, 178, 284, ie], [1, "c", wj, 208, 265, 1], [Xn, "c", 0, 169, 292, za], [Te, "s", Xn, 158, 294, 1], [mk, "s", In, 151, 297, Te], [Te, "s", 0, 147, 288, 1], [1, "c", Rq, 150, 289, Xn], [za, "c", mj, 160, 282, Xn], [mk, "c", 0, 146, 274, Oq], [1, "c", 0, 167, 264, Xn], [za, "c", 0, 165, 267, 1], [Oq, "g", 0, 189, 257, 1], [Xn, "g", Te, 197, 248, 1], [Oq, "g", Pn, 170, Li, Xn], [Xn, "g", pq, 212, 234, mk], [mk, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, Xn], [ie, "g", ie, 210, 214, 1], [Oq, "s", 1, 153, 257, za], [Xn, "s", In, 158, 255, 1], [ie, "s", Zj, 184, 248, Te], [Te, "s", ya, 212, 254, mk], [Oq, "s", ie, 203, 249, za], [1, "s", 2, 204, 252, Te], [Xn, "s", jk, 187, 248, mk], [za, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, za], [Oq, "s", mj, 181, 228, 1], [1, "s", 1, 199, 227, 1], [Xn, "s", 1, 208, 238, 1], [1, "s", za, 179, 222, ie], [ie, "s", Xn, 213, 223, Oq], [1, "s", 2, 182, 222, za], [za, "s", 2, 211, 226, Te], [Te, "s", xj, 214, 214, 1], [Te, "s", 2, 201, 216, 1], [1, "s", xq, 215, 192, Oq], [Oq, "s", 1, 210, 198, 1], [Te, "s", za, 198, 196, ie], [1, "s", 2, 208, 199, 1], [Te, "s", 2, 187, 192, 1], [Oq, "s", 1, 179, 198, 1], [1, "s", jk, 177, 197, 1], [ie, "s", ya, 164, 197, 1], [1, "s", ie, 159, 193, ie], [1, "s", za, 149, 206, ie], [mk, "s", 1, 164, 209, Xn], [1, "s", 2, 165, 210, mk], [1, "s", pq, 161, 191, ie], [1, "s", Xn, 162, 224, Xn], [za, "s", 0, 150, 236, 1], [Xn, "s", 1, 149, 239, Xn], [Te, "s", 2, 153, 236, za], [za, "s", xj, 160, 223, 1], [mk, "s", 2, 151, 207, 1], [Oq, "s", xq, 147, 220, Xn], [1, "s", jk, 145, 265, 1], [1, "s", jk, 145, 285, 1], [mk, "c", mj, 152, 266, 1], [Te, "c", ya, 185, 271, 1], [ie, "c", Da, 210, 254, 1], [Te, "c", Hi, 209, 256, Te], [za, "c", 0, 198, 254, 1], [Xn, "c", 0, 213, 246, Te], [1, "c", 0, 216, 237, 1], [za, "c", 0, 204, 240, 1], [Te, "c", 0, 196, 234, za], [1, "c", 0, 188, 238, za], [Oq, "c", 0, 182, 245, 1], [Te, "c", In, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", wj, 158, 233, Oq], [za, "c", 0, 147, 230, 1], [za, "c", mj, 151, 224, 1], [Oq, "c", 0, 157, 214, 1], [za, "c", In, 167, 219, za], [Xn, "c", 0, 171, 208, za], [1, "c", 0, 179, 219, 1], [Te, "c", Zj, 176, 229, 1], [1, "c", 0, 195, 221, ie], [Xn, "c", Hi, 207, 222, za], [1, "c", 0, 214, 207, 1], [mk, "c", Da, 205, 210, Oq], [Oq, "c", 0, 204, 196, 1], [Te, "c", In, 214, 196, 1], [1, "c", 0, 190, 199, ie], [1, "c", Da, 184, 194, Te], [1, "c", 0, 172, 199, 1], [ie, "c", 0, 161, 204, mk], [Xn, "c", 0, 157, 196, Oq], [Oq, "c", 0, 149, 194, za], [mk, "c", 0, 147, 208, Oq], [Oq, "c", 0, 207, 274, 1], [1, "c", Zj, 217, 258, 1], [1, "c", 0, 201, 260, za], [1, "c", 0, 178, 276, ie], [mk, "c", Da, 187, 265, ie], [1, "s", Te, 204, 260, 1], [1, "s", Te, 216, 260, Xn], [Oq, "s", za, 187, 255, Te], [mk, "s", Pn, 189, 254, ie], [za, "s", jk, 212, 257, 1], [1, "s", 2, 182, 286, 1], [Oq, "s", H, 169, 280, 1], [za, "s", xj, 217, 273, za], [Xn, "s", 2, 215, 282, Oq], [1, "s", xq, 172, 263, 1], [ie, "s", 2, 176, 267, Oq], [1, "s", pq, 215, 251, ie], [Xn, "fod", mk, 221, 282, In], [mk, "fod", ie, 222, 284, 0], [ie, "fod", mk, 221, 290, In], [1, "fod", 1, 222, 294, 0], [1, "fod", Xn, 221, 297, 0], [Xn, "fod", 1, 223, 298, 0], [Oq, "fod", 1, 222, 300, ya], [Oq, "fod", 1, 218, 301, 0], [1, "fod", za, 217, 299, ya], [Oq, "fod", 1, 215, 301, 0], [Te, "fod", Te, 212, 300, In], [za, "fod", 1, 206, 300, 0], [za, "fod", za, 209, 301, Zj], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [Xn, "fod", 1, 199, 301, mj], [Te, "fod", Oq, 222, 282, wj], [1, "fod", 1, 207, 301, 0], [1, "fod", Xn, 197, 301, 0], [1, "fod", Xn, 215, 291, 0], [Oq, "fod", ie, 216, 286, 0], [1, "fod", ie, 214, 292, Zj], [1, "fod", Xn, 210, 289, Hi], [za, "fod", 1, 208, 294, Zj], [1, "fod", 1, 210, 298, Rq], [Te, "fod", ie, 212, 281, Da], [ie, "fod", 1, 219, 278, Hi], [ie, "fod", 1, 219, 282, 0], [Te, "fod", Te, 205, 286, 0], [1, "fod", Xn, 202, 293, 0], [za, "fod", ie, 198, 295, wj], [mk, "fod", 2, 213, 282, 0], [Oq, "fod", 2, 213, 291, Hi], [1, "fod", 2, 216, 289, mj], [za, "fod", xq, 219, 289, 0], [za, "fod", xj, 218, 285, Hi], [Te, "fod", 2, 220, 283, ya], [1, "fod", pq, 211, 283, Zj], [1, "fod", 2, 215, 281, 0], [ie, "fod", pq, 217, 279, 0], [1, "fod", Pn, 208, 290, Rq], [1, "fod", Pn, 211, 296, 0], [Xn, "fod", 2, 215, 294, mj], [Xn, "fod", pq, 212, 298, 0], [Xn, "fod", 2, 203, 294, Hi], [1, "fod", 2, 204, 288, Hi], [1, "fod", pq, 200, 294, 0], [za, "fod", 2, 198, 297, Zj], [1, "fod", xj, 202, 299, wj], [Oq, "fod", jk, 200, 299, wj], [1, "fod", 2, 220, 300, 0], [ie, "fod", H, 220, 295, wj], [1, "fod", pq, 220, 292, wj], [Oq, "fod", 2, 219, 287, Da], [1, "fod", 2, 211, 288, 0], [Xn, "fod", 2, 213, 287, ya], [Oq, "fod", xq, 211, 289, Da], [Te, "fod", 2, 212, 290, 0], [1, "fod", xj, 195, 296, Zj], [1, "fod", H, 196, 299, Da], [Xn, "fod", Hj, 194, 300, 0], [Te, "fod", 2, 195, 300, ya], [1, "fod", lr, 213, 279, Hi], [ie, "fod", xq, 211, 279, Rq], [1, "fod", Da, 218, 290, mj], [1, "fod", Zj, 212, 294, 0], [mk, "fod", 1, 213, 295, mj], [za, "fod", Oq, 217, 292, 0], [mk, "fod", Te, 218, 288, 0], [Xn, "fod", Te, 210, 295, 0], [1, "fod", Te, 213, 292, 0], [Xn, "fod", 1, 212, 289, 0], [1, "fod", mk, 205, 295, 0], [Te, "fod", 2, 206, 296, 0], [mk, "fod", xq, 208, 296, 0], [Te, "fod", 2, 221, 288, mj], [ie, "fod", xj, 209, 299, Hi], [za, "fod", lr, 211, 291, In], [Xn, "fod", za, 203, 275, 0], [1, "fod", 1, 204, 272, In], [1, "fod", xj, 205, 273, 0], [1, "fod", xq, 204, 276, mj], [mk, "fod", Pn, 202, 276, 0], [Te, "fod", 2, 199, 277, wj], [ie, "fod", 2, 202, 273, Hi], [ie, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [za, "fod", Xn, 192, 274, Da], [1, "fod", 1, 194, 267, 0], [Xn, "fod", 2, 194, 265, Zj], [Oq, "fod", xj, 190, 272, ya], [1, "fod", 2, 191, 275, Hi], [Oq, "fod", lr, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, Da], [1, "fod", za, 175, 240, mj], [Xn, "fod", 1, 169, 234, mj], [Oq, "fod", 1, 162, 235, ya], [ie, "fod", 2, 169, 236, ya], [1, "fod", Hj, 171, 234, 0], [1, "fod", Hj, 165, 238, Rq], [za, "fod", Hj, 173, 241, In], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, ya], [1, "fod", Pn, 169, 244, 0], [1, "fod", 2, 166, 243, In], [Xn, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, mj], [1, "fod", xq, 162, 233, 0], [1, "fod", pq, 163, 236, 0], [za, "fod", Pn, 174, 242, In], [1, "fod", xj, 171, 243, 0], [za, "fod", 1, 194, 206, In], [1, "fod", za, 190, 214, 0], [Xn, "fod", 1, 186, 206, 0], [1, "fod", mk, 197, 207, Zj], [1, "fod", H, 196, 208, 0], [1, "fod", 2, 198, 206, Zj], [za, "fod", pq, 198, 208, Rq], [1, "fod", 2, 194, 204, 0], [1, "fod", pq, 187, 206, Da], [Xn, "fod", Pn, 186, 204, In], [ie, "fod", 2, 189, 214, mj], [1, "fod", 2, 189, 213, Rq], [1, "fod", 2, 193, 215, 0], [ie, "fod", H, 194, 214, mj], [1, "fod", jk, 187, 215, Da], [1, "fod", Pn, 193, 209, Da], [1, "fod", H, 189, 211, 0], [Te, "fod", Pn, 187, 209, Da], [Te, "fod", 2, 187, 207, Hi], [Xn, "fod", 2, 191, 205, In], [Te, "fod", lr, 189, 203, 0], [1, "cs", 2, 224, 176, mk], [1, "cs", 0, 224, 177, Oq], [Oq, "cs", 3, 224, 178, mk], [Xn, "cs", 2, 224, 179, 1], [Te, "cs", Te, 224, 180, 1], [ie, "cs", H, 224, 181, Te], [1, "cs", Da, 224, 182, Oq], [1, "cs", 2, 224, 183, Oq], [1, "cs", In, 224, 184, Xn], [1, "cs", ea, 224, 185, 1], [Xn, "cs", pq, 224, 186, 1], [1, "cs", wj, 224, 187, 1], [Te, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, Xn], [1, "cs", 1, 224, 190, 1], [1, "cs", lr, 224, 191, mk], [1, "cs", 0, 224, 192, za], [Xn, "cs", jk, 224, 193, 1], [Oq, "cs", Hj, 224, 194, 1], [1, "cs", 1, 224, 195, mk], [ie, "cs", xq, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [ie, "cs", xq, 224, 199, 1], [za, "cs", 1, 224, 200, 1], [za, "cs", 2, 224, 201, 1], [1, "cs", nq, 224, 202, 1], [1, "cs", wj, 224, 203, 1], [mk, "cs", Te, 224, 204, 1], [Xn, "cs", pq, 224, 205, 1], [1, "cs", In, 224, 206, Te], [mk, "cs", mk, 224, 207, 1], [za, "cs", 3, 224, 208, ie], [za, "cs", Pn, 224, 209, Xn], [ie, "cs", H, 224, 210, Te], [1, "cs", 0, 223, 211, 1], [Te, "cs", 1, 224, 211, 1], [Xn, "cs", 2, 224, 212, 1], [1, "cs", xq, 224, 213, ie], [1, "cs", Te, 224, 214, 1], [za, "cs", 3, 224, 215, 1], [ie, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, ie], [1, "cs", 2, 224, 218, Xn], [1, "cs", yr, 224, 219, 1], [1, "cs", ya, 223, 215, Xn], [za, "cs", H, 223, 214, 1], [mk, "cs", xj, 223, 212, 1], [mk, "cs", Pn, 223, 216, 1], [1, "cs", 3, 223, 217, mk], [ie, "cs", 0, 223, 218, za], [1, "cs", In, 224, 220, za], [1, "cs", mj, 224, 222, 1], [Xn, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, za], [Te, "cs", xj, 224, 221, 1], [za, "cs", xj, 223, 219, za], [1, "cs", lr, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", xj, 223, 210, 1], [1, "cs", 1, 223, 178, ie], [Xn, "cs", 3, 223, 179, Xn], [mk, "cs", ea, 223, 181, Oq], [1, "cs", I, 223, 182, 1], [mk, "cs", 1, 223, 185, 1], [Xn, "cs", H, 223, 184, 1], [Oq, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, Xn], [1, "cs", mj, 223, 183, 1], [1, "cs", lr, 223, 187, 1], [mk, "cs", ie, 223, 188, ie], [1, "cs", 2, 223, 189, Oq], [mk, "cs", 2, 223, 190, mk], [Xn, "cs", Hk, 223, 191, 1], [Xn, "cs", 1, 223, 192, ie], [1, "cs", 2, 223, 193, Te], [1, "cs", jk, 223, 194, 1], [ie, "cs", Hk, 223, 195, 1], [ie, "cs", Te, 223, 196, 1], [za, "cs", 2, 223, 197, mk], [1, "cs", pq, 223, 199, mk], [1, "cs", 2, 223, 198, Te], [1, "cs", 0, 223, 200, 1], [1, "cs", H, 223, 201, 1], [Te, "cs", Da, 223, 202, 1], [Te, "cs", Hk, 223, 203, Te], [1, "cs", ci, 223, 204, za], [Xn, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, mk], [za, "cs", qo, 223, 208, Xn], [Xn, "cs", 2, 223, 221, Oq], [Oq, "cs", jk, 223, 222, 1], [Te, "cs", 0, 223, 224, Oq], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, za], [Oq, "cs", 0, 223, 234, Te], [1, "cs", 2, 223, 223, 1], [mk, "cs", 2, 224, 223, 1], [1, "cs", xq, 224, 224, Xn], [mk, "cs", xq, 224, 225, Oq], [Te, "cs", za, 223, 226, za], [Oq, "cs", 1, 224, 231, Xn], [za, "cs", 1, 223, 232, ie], [1, "cs", qo, 223, 225, 1], [1, "cs", yr, 224, 226, Te], [Oq, "cs", 3, 223, 227, Te], [Xn, "cs", 3, 224, 227, ie], [mk, "cs", 3, 223, 229, za], [1, "cs", yr, 223, 228, mk], [mk, "cs", yr, 224, 229, 1], [1, "cs", ea, 223, 230, 1], [1, "cs", 3, 223, 231, ie], [ie, "cs", Hk, 224, 232, 1], [1, "cs", nq, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", Hk, 224, 234, za], [1, "cs", 3, 224, 235, Oq], [1, "cs", 3, 223, 235, 1], [za, "cs", Oq, 224, 236, 1], [Oq, "cs", jk, 223, 236, za], [Oq, "cs", jk, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [Te, "cs", ea, 224, 238, za], [za, "cs", 0, 224, 239, 1], [za, "cs", 1, 223, 241, 1], [Te, "cs", 0, 224, 243, Te], [1, "cs", Da, 223, 245, ie], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, Xn], [Oq, "cs", xj, 223, 239, mk], [za, "cs", xq, 224, 240, Xn], [Te, "cs", xq, 224, 241, ie], [1, "cs", jk, 224, 242, Xn], [Xn, "cs", H, 223, 242, za], [mk, "cs", 2, 223, 243, mk], [Oq, "cs", lr, 223, 244, Oq], [1, "cs", 2, 224, 244, za], [1, "cs", 2, 224, 245, Oq], [1, "cs", 2, 224, 246, mk], [ie, "cs", qo, 223, 238, Xn], [1, "cs", 3, 223, 246, za], [1, "cs", 2, 223, 247, Oq], [ie, "cs", Te, 223, 249, Te], [mk, "cs", Oq, 224, 253, Xn], [Te, "cs", Xn, 223, 256, 1], [Te, "cs", 0, 223, 254, Oq], [1, "cs", wj, 224, 250, Oq], [1, "cs", 3, 223, 248, za], [1, "cs", 3, 223, 250, Xn], [1, "cs", 3, 223, 252, za], [ie, "cs", fn, 223, 255, Oq], [Xn, "cs", Hk, 223, 257, 1], [Oq, "cs", 2, 224, 248, ie], [Xn, "cs", xq, 224, 249, 1], [1, "cs", 2, 223, 251, mk], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, Oq], [1, "cs", 2, 223, 253, Xn], [1, "cs", jk, 224, 254, 1], [1, "cs", 2, 224, fa, 1], [1, "cs", 2, 224, Dn, Te], [mk, "cs", H, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [za, "cs", 0, 223, 261, 1], [mk, "cs", In, 224, 263, Oq], [1, "cs", 0, 224, 266, za], [Xn, "cs", 0, 224, 272, 1], [za, "cs", In, 223, 270, Oq], [1, "cs", In, 223, 275, Xn], [Xn, "cs", Te, 223, 259, Oq], [Xn, "cs", 1, 223, 264, 1], [Xn, "cs", 1, 223, 268, Te], [1, "cs", 1, 224, 274, mk], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, mk], [mk, "cs", 2, 223, 265, 1], [Te, "cs", Pn, 223, 267, ie], [Te, "cs", xq, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", ci, 223, 262, ie], [Xn, "cs", Hk, 223, 266, 1], [Xn, "cs", Hk, 223, 269, Oq], [1, "cs", qo, 223, 272, mk], [mk, "cs", Hk, 223, 274, Xn], [1, "cs", I, 224, 275, Oq], [Oq, "cs", 3, 224, 273, Oq], [Oq, "cs", I, 224, 271, Te], [1, "cs", ea, 224, 270, 1], [1, "cs", nq, 224, 269, za], [1, "cs", ea, 224, 268, za], [1, "cs", Hk, 224, 267, ie], [mk, "cs", nq, 224, 265, 1], [za, "cs", I, 224, 264, Xn], [1, "cs", Hk, 224, 262, za], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [za, "cs", nq, 224, 259, ie], [1, "cs", 2, 223, 276, Te], [1, "cs", 1, 224, 276, mk], [Te, "cs", 1, 224, 280, za], [1, "cs", 1, 223, 281, Te], [1, "cs", Oq, 224, 286, za], [1, "cs", 0, 223, 280, mk], [1, "cs", mj, 223, 284, 1], [Xn, "cs", mj, 224, 288, Te], [mk, "cs", 0, 224, 279, Oq], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, Xn], [ie, "cs", jk, 224, 281, 1], [1, "cs", 2, 224, 283, za], [Oq, "cs", xj, 224, 282, 1], [za, "cs", 2, 224, 284, Xn], [1, "cs", 2, 224, 285, Oq], [1, "cs", H, 224, 287, mk], [1, "cs", pq, 223, 287, 1], [Te, "cs", 2, 223, 285, 1], [mk, "cs", 2, 223, 283, 1], [ie, "cs", jk, 223, 279, ie], [Oq, "cs", fn, 223, 278, Oq], [1, "cs", 3, 223, 282, 1], [1, "cs", ci, 223, 286, ie], [mk, "cs", 3, 223, 289, Oq], [1, "cs", Hk, 224, 289, za], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [za, "cs", ie, 223, 290, za], [Te, "cs", ya, 224, 292, 1], [Te, "cs", 0, 223, 294, Xn], [1, "cs", Hi, 224, 297, Te], [1, "cs", 0, 223, 299, Xn], [1, "cs", H, 223, 291, Xn], [1, "cs", xj, 224, 291, Oq], [1, "cs", xq, 223, 292, 1], [Te, "cs", 2, 223, 293, za], [Xn, "cs", pq, 224, 293, 1], [1, "cs", 2, 224, 294, ie], [1, "cs", 1, 224, 295, Oq], [1, "cs", H, 223, 295, 1], [1, "cs", xj, 223, 296, 1], [ie, "cs", xq, 224, 296, Oq], [1, "cs", Pn, 223, 297, ie], [1, "cs", 2, 223, 298, za], [za, "cs", lr, 224, 298, 1], [1, "cs", 2, 224, 299, Oq], [1, "cs", lr, 223, 300, Te], [Te, "cs", mk, 224, 300, za], [1, "cs", 0, 223, 301, ie], [Xn, "cs", Hi, 224, 302, mk], [1, "cs", 0, 224, 304, za], [Oq, "cs", qo, 224, 301, 1], [Oq, "cs", 3, 224, 303, 1], [Te, "cs", Hi, 221, 303, Xn], [1, "cs", 0, 219, 304, Xn], [1, "cs", Oq, 222, 304, 1], [1, "cs", ie, 222, 302, Oq], [Xn, "cs", Pn, 223, 302, za], [1, "cs", 2, 223, 303, mk], [za, "cs", 2, 222, 303, Te], [Xn, "cs", Pn, 223, 304, Oq], [Xn, "cs", pq, 221, 304, mk], [1, "cs", xj, 220, 304, 1], [za, "cs", 2, 220, 303, 1], [Oq, "cs", 2, 220, 302, 1], [mk, "cs", Hj, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", ya, 217, 302, 1], [mk, "cs", 0, 215, 304, za], [ie, "cs", In, 214, 302, Te], [za, "cs", ie, 218, 302, 1], [1, "cs", 1, 217, 304, za], [Oq, "cs", 1, 215, 302, mk], [za, "cs", 2, 219, 302, 1], [mk, "cs", xj, 218, 303, Xn], [Te, "cs", 2, 218, 304, Oq], [1, "cs", 2, 217, 303, Oq], [1, "cs", Hj, 216, 304, Te], [Oq, "cs", Hj, 215, 303, 1], [Te, "cs", xj, 216, 303, 1], [ie, "cs", xj, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [ie, "cs", 2, 214, 304, Oq], [za, "cs", Zj, 212, 302, ie], [ie, "cs", Hi, 210, 303, Oq], [1, "cs", Zj, 212, 304, 1], [1, "cs", Zj, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [Te, "cs", 1, 208, 303, Oq], [1, "cs", jk, 213, 302, 1], [Oq, "cs", lr, 213, 303, Xn], [1, "cs", xj, 213, 304, za], [1, "cs", Hj, 212, 303, ie], [mk, "cs", lr, 211, 304, ie], [1, "cs", 2, 211, 303, za], [ie, "cs", jk, 211, 302, 1], [1, "cs", Hj, 209, 302, 1], [1, "cs", 2, 209, 303, mk], [1, "cs", Hj, 209, 304, za], [mk, "cs", lr, 210, 304, Te], [mk, "cs", 2, 208, 302, ie], [Xn, "cs", 0, 206, 303, mk], [Xn, "cs", In, 203, 304, 1], [1, "cs", Hi, 200, 303, ie], [1, "cs", wj, 199, 304, ie], [1, "cs", Rq, 195, 304, 1], [mk, "cs", ya, 191, 303, 1], [1, "cs", ya, 193, 304, 1], [mk, "cs", In, 189, 304, Te], [Te, "cs", Xn, 204, 303, 1], [1, "cs", Zj, 197, 302, Oq], [Xn, "cs", mj, 202, 302, mk], [Xn, "cs", Hi, 188, 302, mk], [1, "cs", 0, 194, 302, za], [1, "cs", Oq, 197, 303, Te], [1, "cs", mk, 201, 304, 1], [Oq, "cs", 1, 192, 302, Oq], [1, "cs", ie, 189, 303, Oq], [1, "cs", mk, 205, 302, 1], [za, "cs", 1, 188, 304, Oq], [1, "cs", H, 207, 302, ie], [Oq, "cs", 2, 207, 303, Xn], [Oq, "cs", jk, 207, 304, Xn], [mk, "cs", Pn, 206, 304, 1], [1, "cs", H, 206, 302, 1], [1, "cs", jk, 205, 303, Xn], [Xn, "cs", xq, 204, 304, 1], [1, "cs", lr, 205, 304, 1], [Oq, "cs", 2, 204, 302, mk], [1, "cs", 2, 203, 302, Oq], [1, "cs", 2, 203, 303, ie], [1, "cs", H, 202, 303, 1], [Oq, "cs", Pn, 201, 303, Oq], [1, "cs", xj, 201, 302, za], [1, "cs", lr, 200, 302, 1], [ie, "cs", 2, 199, 302, 1], [mk, "cs", 2, 198, 303, 1], [1, "cs", lr, 198, 302, Xn], [Oq, "cs", 2, 199, 303, mk], [1, "cs", xq, 200, 304, Oq], [mk, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", xj, 198, 304, ie], [1, "cs", xj, 196, 304, 1], [za, "cs", H, 196, 303, 1], [Oq, "cs", 2, 196, 302, ie], [Xn, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", jk, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [mk, "cs", H, 193, 303, mk], [ie, "cs", lr, 193, 302, 1], [mk, "cs", jk, 192, 303, 1], [Xn, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, Xn], [za, "cs", Pn, 190, 304, 1], [1, "cs", Hj, 190, 303, Oq], [Xn, "cs", xj, 189, 302, mk], [mk, "cs", 2, 190, 302, za], [za, "cs", 2, 191, 302, ie], [mk, "cs", H, 188, 303, Te], [mk, "cs", 0, 186, 303, ie], [1, "cs", mj, 183, 304, 1], [ie, "cs", 0, 184, 302, Oq], [1, "cs", ya, 181, 302, 1], [ie, "cs", In, 176, 302, 1], [1, "cs", Rq, 178, 303, Te], [1, "cs", 0, 173, 304, Oq], [Xn, "cs", mj, 170, 303, 1], [Oq, "cs", Da, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", za, 178, 304, 1], [1, "cs", Te, 175, 304, Xn], [1, "cs", Te, 173, 302, mk], [1, "cs", Oq, 185, 304, za], [ie, "cs", 1, 169, 304, Xn], [1, "cs", ea, 187, 304, Oq], [1, "cs", 3, 186, 304, za], [Te, "cs", fn, 187, 303, ie], [ie, "cs", fn, 187, 302, Te], [za, "cs", ea, 186, 302, Te], [1, "cs", yr, 185, 302, za], [1, "cs", Hk, 185, 303, mk], [ie, "cs", 3, 184, 303, Xn], [1, "cs", 3, 183, 303, ie], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [za, "cs", 3, 184, 304, 1], [1, "cs", I, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [mk, "cs", I, 179, 304, Te], [ie, "cs", Hk, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, ie], [1, "cs", yr, 179, 303, za], [mk, "cs", 3, 180, 302, Oq], [1, "cs", 3, 179, 302, 1], [1, "cs", I, 178, 302, mk], [ie, "cs", ea, 177, 302, za], [1, "cs", ci, 177, 304, 1], [ie, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, Te], [ie, "cs", 3, 175, 303, 1], [1, "cs", qo, 174, 303, ie], [Te, "cs", 3, 173, 303, mk], [ie, "cs", 3, 172, 303, 1], [ie, "cs", Hk, 171, 303, ie], [Oq, "cs", 3, 170, 304, za], [Oq, "cs", nq, 171, 304, 1], [1, "cs", qo, 172, 304, 1], [1, "cs", 3, 174, 302, Te], [za, "cs", nq, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", qo, 169, 302, Te], [ie, "cs", I, 169, 303, mk], [1, "cs", 0, 168, 302, Oq], [1, "cs", In, 166, 303, za], [1, "cs", Da, 163, 304, 1], [Xn, "cs", ya, 161, 302, 1], [Te, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [mk, "cs", 0, 155, 303, 1], [mk, "cs", za, 164, 303, ie], [1, "cs", Te, 162, 303, 1], [Oq, "cs", 1, 158, 304, Xn], [1, "cs", 1, 156, 302, Te], [1, "cs", mk, 153, 302, 1], [1, "cs", 1, 154, 304, Te], [mk, "cs", 2, 168, 304, Xn], [Xn, "cs", 2, 168, 303, 1], [za, "cs", 2, 167, 303, 1], [Te, "cs", 2, 167, 304, Te], [Te, "cs", Pn, 166, 304, 1], [1, "cs", 2, 165, 304, Te], [1, "cs", xj, 164, 304, Te], [1, "cs", Pn, 165, 303, Te], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, Xn], [ie, "cs", xq, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", H, 163, 302, ie], [1, "cs", Hj, 162, 302, ie], [1, "cs", H, 163, 303, Oq], [ie, "cs", xq, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", Pn, 159, 304, 1], [Te, "cs", pq, 161, 304, Xn], [1, "cs", 2, 161, 303, Te], [1, "cs", 2, 160, 303, 1], [Te, "cs", H, 160, 302, Oq], [1, "cs", 2, 158, 302, 1], [ie, "cs", pq, 159, 302, 1], [Te, "cs", xj, 157, 302, ie], [1, "cs", 2, 156, 303, 1], [za, "cs", 2, 157, 303, 1], [Oq, "cs", 2, 158, 303, 1], [za, "cs", 2, 157, 304, mk], [1, "cs", 2, 156, 304, 1], [mk, "cs", Hj, 155, 304, za], [1, "cs", 2, 153, 304, 1], [za, "cs", 2, 153, 303, 1], [ie, "cs", 2, 154, 303, ie], [1, "cs", 2, 154, 302, 1], [mk, "cs", 2, 155, 302, Oq], [mk, "cs", jk, 152, 303, 1], [1, "cs", lr, 152, 302, Oq], [ie, "cs", In, 151, 302, 1], [1, "cs", Hi, 149, 303, mk], [Oq, "cs", ya, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [mk, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", Oq, 147, 304, Oq], [1, "cs", Te, 145, 302, 1], [Te, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, Te], [Oq, "cs", 2, 151, 304, 1], [1, "cs", xq, 151, 303, 1], [1, "cs", jk, 150, 303, Te], [za, "cs", 2, 150, 302, za], [Te, "cs", 2, 148, 302, mk], [1, "cs", xj, 146, 302, 1], [ie, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", xq, 142, 304, 1], [1, "cs", 2, 142, 303, mk], [1, "cs", 2, 143, 304, Te], [1, "cs", 2, 144, 304, Xn], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [ie, "cs", 2, 148, 303, Te], [1, "cs", jk, 146, 303, za], [1, "cs", 2, 145, 303, Oq], [1, "cs", pq, 147, 303, 1], [1, "cs", Pn, 146, 304, Te], [Oq, "cs", jk, 149, 304, Oq], [1, "cs", ci, 149, 302, 1], [1, "cs", Hk, 143, 302, 1], [Oq, "cs", Da, 139, 304, 1], [1, "cs", 0, 138, 302, mk], [Xn, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, Te], [1, "cs", Hj, 140, 303, 1], [Te, "cs", 2, 139, 303, Oq], [1, "cs", xq, 138, 303, 1], [1, "cs", H, 138, 304, Te], [ie, "cs", 2, 140, 304, Te], [ie, "cs", 0, 137, 304, 1], [mk, "cs", In, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", mk, 135, 304, Te], [ie, "cs", Oq, 136, 302, 1], [za, "cs", 2, 137, 302, Oq], [Xn, "cs", H, 136, 303, Xn], [ie, "cs", 2, 137, 303, 1], [1, "cs", lr, 136, 304, Oq], [Te, "cs", 2, 134, 304, Oq], [1, "cs", 2, 134, 303, Oq], [1, "cs", pq, 133, 303, 1], [1, "cs", 2, 132, 304, Oq], [1, "cs", 0, 131, 302, 1], [mk, "cs", 0, 134, 302, 1], [1, "cs", ya, 129, 304, 1], [1, "cs", mk, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", Pn, 135, 302, Te], [ie, "cs", 2, 133, 302, Xn], [1, "cs", lr, 132, 303, Xn], [za, "cs", 2, 131, 303, 1], [1, "cs", pq, 130, 304, 1], [1, "cs", Hj, 131, 304, 1], [mk, "cs", 2, 128, 304, 1], [1, "cs", Hj, 129, 303, ie], [1, "cs", 2, 130, 302, 1], [za, "cs", 3, 127, 304, Te], [1, "cs", pq, 132, 301, Oq], [1, "cs", Hj, 133, 301, Xn], [Xn, "cs", xq, 134, 301, 1], [1, "cs", Hj, 135, 301, 1], [1, "cs", 3, 131, 301, Xn], [1, "cs", Hk, 136, 301, 1], [1, "cs", 3, 136, 178, ie], [mk, "cs", 0, 136, 183, 1], [Xn, "cs", 2, 136, 182, mk], [1, "cs", 1, 136, 181, Te], [1, "cs", 0, 136, 179, Te], [Oq, "cs", 3, 136, 180, ie], [Oq, "cs", 2, 135, 183, Oq], [za, "cs", 1, 135, 182, 1], [za, "cs", 3, 135, 180, 1], [1, "cs", wj, 134, 183, ie], [1, "cs", 2, 133, 183, Xn], [Oq, "cs", qo, 133, 182, mk], [1, "cs", Oq, 132, 183, 1], [mk, "cs", 3, 131, 183, Te], [Te, "cs", 2, 135, 181, 1], [Xn, "cs", 2, 134, 182, 1], [mk, "cs", ci, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [ie, "fod", 0, 204, 301, mj], [1, "fod", za, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", Oq, 190, 288, 0], [1, "fod", 1, 189, 296, Hi], [1, "fod", Te, 193, 293, 0], [1, "fod", ie, 183, 292, 0], [1, "fod", Xn, 186, 287, mj], [za, "fod", za, 190, 290, 0], [1, "fod", ie, 218, 271, ya], [1, "fod", za, 220, 266, Rq], [1, "fod", mk, 211, 268, 0], [1, "fod", Oq, 210, 274, wj], [1, "fod", mk, 205, 263, 0], [1, "fod", ie, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, wj], [1, "fod", 2, 188, 299, 0], [za, "fod", 2, 186, 297, Zj], [1, "fod", 2, 188, 296, 0], [mk, "fod", H, 189, 291, 0], [za, "fod", H, 189, 286, mj], [Te, "fod", 2, 191, 286, 0], [1, "fod", pq, 197, 286, 0], [1, "fod", Hj, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [za, "fod", 2, 183, 293, 0], [ie, "fod", pq, 198, 286, ya], [Oq, "fod", 2, 196, 283, wj], [1, "fod", Hj, 196, 281, 0], [ie, "fod", pq, 201, 280, Hi], [1, "fod", jk, 205, 287, 0], [Xn, "fod", jk, 209, 283, Zj], [Te, "fod", 2, 212, 280, Zj], [1, "fod", 2, 209, 277, 0], [ie, "fod", pq, 217, 278, mj], [1, "fod", 2, 219, 275, Hi], [Oq, "fod", H, 220, 271, 0], [za, "fod", xj, 220, 267, 0], [1, "fod", xj, 217, 265, Hi], [Xn, "fod", 2, 213, 267, 0], [Te, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [Xn, "fod", xj, 204, 270, Da], [1, "fod", jk, 196, 267, 0], [mk, "fod", pq, 214, 261, 0], [Oq, "fod", lr, 211, 260, 0], [mk, "fod", Pn, 218, 256, 0], [1, "fod", H, 219, 262, 0], [za, "fod", xj, 220, 253, 0], [za, "fod", jk, 211, 257, ya], [Te, "la", yr, 198, 27, za], [1, "la", qo, 201, 30, Te], [Xn, "la", ea, 200, 32, mk], [ie, "la", qo, 198, 33, ie], [Xn, "la", I, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, Te], [1, "la", 0, 200, 28, Xn], [1, "la", wj, 193, 30, Xn], [za, "la", Hk, 196, 27, ie], [1, "la", qo, 199, 30, 1], [za, "la", 3, 197, 29, Oq], [1, "la", 3, 195, 30, mk], [1, "la", 3, 197, 31, mk], [1, "la", H, 201, 33, za], [1, "la", Vn, 202, 34, ie], [1, "la", 4, 202, 35, Te], [Oq, "la", ba, 203, 36, 1], [mk, "la", $i, 204, 37, 1], [1, "la", xq, 205, 38, 1], [1, "la", z, 205, 39, 1], [1, "la", 5, 205, 40, mk], [mk, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, Xn], [1, "la", 1, 205, 41, 1], [za, "la", nj, 208, 43, 1], [1, "la", $i, 209, 43, Oq], [Te, "la", 1, 210, 43, Xn], [za, "la", 2, 211, 43, 1], [1, "la", nr, 212, 43, ie], [mk, "la", Vn, 213, 44, Xn], [ie, "la", 3, 223, 54, 1], [za, "la", nq, 221, 53, 1], [mk, "la", 3, 219, 53, 1], [za, "la", 4, 218, 52, 1], [Te, "la", Gi, 217, 51, Xn], [1, "la", 4, 216, 51, ie], [Xn, "la", za, 215, 50, Oq], [Xn, "la", Vn, 212, 46, za], [mk, "la", 1, 210, 44, 1], [Xn, "la", ci, 206, 50, ie], [Te, "re", Da, 217, 24, Te], [za, "re", 0, 207, 16, 1], [Oq, "de", 44, 54, 14, ya], [Te, "de", 44, 53, 13, Da], [1, "de", 44, 51, Fo, Zj], [Xn, "de", 44, 49, Z, 0], [Xn, "de", 44, 48, Sq, Zj], [Xn, "de", 21, 78, 293, Zj], [1, "cs", 0, 221, 8, ie], [1, "cs", In, 224, Qj, Te], [Te, "cs", Oq, 223, Bi, 1], [Xn, "cs", Pn, 224, 8, 1], [1, "cs", H, 222, 8, Te], [1, "cs", 0, 224, Na, ie], [Oq, "cs", 0, 222, 5, 1], [Xn, "cs", 0, 219, wk, 1], [Te, "cs", 1, 220, Eq, 1], [1, "cs", ie, 217, 7, Te], [za, "cs", 2, 224, 5, Xn], [1, "cs", xj, 223, M, 1], [za, "cs", 2, 224, 7, Oq], [Te, "cs", 2, 223, 7, Xn], [Oq, "cs", Hj, 223, 6, ie], [za, "cs", 2, 222, 6, 1], [mk, "cs", 2, 222, Ar, Te], [Te, "cs", Pn, 221, 7, Xn], [mk, "cs", Hj, 221, Bq, za], [Te, "cs", 2, 221, 5, za], [1, "cs", 2, 220, 6, 1], [Xn, "cs", jk, 220, Ar, Oq], [ie, "cs", 2, 220, 8, Oq], [Oq, "cs", 2, 219, 8, ie], [Te, "cs", 2, 219, Ro, ie], [ie, "cs", 2, 219, 5, 1], [za, "cs", Hi, 218, nr, za], [1, "cs", mj, 216, 8, 1], [Oq, "cs", Pn, 218, 8, 1], [za, "cs", lr, 217, 8, 1], [1, "cs", jk, 218, 7, 1], [za, "cs", 2, 218, 6, Te], [1, "cs", Hj, 217, 6, mk], [1, "cs", 2, 217, 5, 1], [mk, "cs", 1, 215, 6, za], [1, "cs", 1, 213, 5, za], [Oq, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, Oj, 1], [1, "cs", 0, 213, 8, Te], [1, "cs", Hi, 211, Ar, 1], [ie, "cs", 0, 209, Eq, Oq], [Oq, "cs", 0, 208, Ni, mk], [1, "cs", ya, 207, aa, Te], [1, "cs", pq, 216, 6, 1], [1, "cs", 2, 216, Ar, Te], [1, "cs", 2, 215, 7, mk], [1, "cs", lr, 215, Bi, 1], [1, "cs", 2, 214, Bi, 1], [ie, "cs", Hj, 214, 7, ie], [1, "cs", jk, 215, 5, 1], [za, "cs", 2, 214, Eq, Te], [Te, "cs", 2, 213, 6, 1], [Xn, "cs", 2, 213, ia, Xn], [1, "cs", 2, 212, $k, ie], [za, "cs", 1, 211, 5, Oq], [1, "cs", za, 209, 8, ie], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, E, 1], [1, "cs", xj, 210, zj, 1], [1, "cs", 2, 209, $n, Oq], [1, "cs", 2, 210, ia, Xn], [Oq, "cs", 2, 210, qq, Oq], [za, "cs", pq, 212, Qa, mk], [1, "cs", 2, 212, 5, 1], [Xn, "cs", 2, 211, ji, Te], [1, "cs", 2, 210, 5, Te], [Xn, "cs", xj, 209, 6, za], [1, "cs", 2, 208, 6, 1], [Xn, "cs", 2, 208, ta, Te], [1, "cs", 2, 207, 7, 1], [1, "cs", pq, 207, ji, mk], [1, "cs", 2, 207, 5, ie], [Oq, "cs", 2, 206, Eq, Xn], [ie, "cs", 2, 208, aa, 1], [mk, "cs", 2, 206, 6, 1], [Oq, "cs", 0, 204, zj, Xn], [1, "cs", Zj, 205, 6, 1], [1, "cs", ya, 203, z, 1], [1, "cs", Zj, 202, 7, 1], [Te, "cs", 0, 199, E, Te], [Oq, "cs", 0, 200, 6, 1], [1, "cs", In, 197, 6, Te], [Oq, "cs", mj, 195, 8, 1], [1, "cs", wj, 194, 6, mk], [Te, "cs", 1, 202, 8, 1], [Xn, "cs", 1, 206, wk, Te], [1, "cs", 1, 201, 5, 1], [1, "cs", Xn, 197, 8, 1], [ie, "cs", ie, 192, 7, ie], [1, "cs", Te, 195, 5, 1], [1, "cs", Hj, 205, ur, 1], [1, "cs", Pn, 205, Hr, Oq], [1, "cs", H, 206, Bi, 1], [Oq, "cs", xj, 204, N, 1], [1, "cs", xj, 204, 6, 1], [Oq, "cs", pq, 204, 5, Oq], [Xn, "cs", 2, 205, 5, 1], [za, "cs", Pn, 203, Qa, Xn], [1, "cs", 2, 203, ia, za], [za, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [Xn, "cs", H, 200, Iq, Xn], [1, "cs", 2, 200, 7, 1], [1, "cs", xj, 201, N, 1], [1, "cs", 2, 201, 6, 1], [Te, "cs", 2, 202, Oj, 1], [Oq, "cs", H, 202, Qa, 1], [1, "cs", 2, 200, 5, ie], [ie, "cs", 2, 199, Fk, 1], [Oq, "cs", 2, 197, M, mk], [mk, "cs", 2, 196, 5, 1], [ie, "cs", xq, 198, 5, Oq], [mk, "cs", 2, 198, ji, 1], [Te, "cs", Pn, 199, 6, Te], [za, "cs", H, 199, $k, 1], [1, "cs", H, 198, 7, za], [za, "cs", 2, 198, 8, Oq], [1, "cs", pq, 197, ia, ie], [Te, "cs", 2, 196, 7, 1], [Te, "cs", 2, 196, Bi, 1], [Xn, "cs", pq, 196, ji, Te], [za, "cs", H, 195, Xk, 1], [1, "cs", 2, 195, Ni, 1], [1, "cs", pq, 194, N, za], [mk, "cs", 2, 193, Bi, 1], [1, "cs", Pn, 194, 8, mk], [za, "cs", H, 193, 7, mk], [Xn, "cs", xq, 193, 6, 1], [1, "cs", 2, 193, 5, mk], [1, "cs", 2, 194, 5, Xn], [1, "cs", 0, 192, Eq, ie], [1, "cs", 0, 191, 8, 1], [Xn, "cs", 0, 190, 6, ie], [1, "cs", 0, 188, ur, 1], [Te, "cs", Rq, 186, Iq, 1], [1, "cs", 0, 186, ta, Te], [1, "cs", Zj, 184, 7, Oq], [1, "cs", Da, 182, Hr, 1], [1, "cs", 0, 181, Ya, Te], [1, "cs", Te, 189, He, Xn], [1, "cs", 1, 183, E, Oq], [mk, "cs", 1, 188, 5, 1], [1, "cs", mk, 185, 6, 1], [Xn, "cs", Xn, 180, $k, 1], [Te, "cs", 1, 183, 5, za], [ie, "cs", mk, 178, 8, 1], [Oq, "cs", za, 177, Qa, 1], [1, "cs", za, 173, $n, 1], [ie, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, za], [ie, "cs", 0, 179, 5, 1], [Xn, "cs", Zj, 174, ta, ie], [1, "cs", mj, 176, Fk, Xn], [1, "cs", 0, 172, E, Te], [Xn, "cs", 0, 170, Gk, 1], [ie, "cs", mj, 169, qq, Xn], [Xn, "cs", 2, 192, 6, mk], [ie, "cs", pq, 192, Bi, 1], [mk, "cs", 2, 191, wk, Xn], [za, "cs", jk, 191, 6, 1], [ie, "cs", xq, 191, Eq, 1], [Oq, "cs", 2, 190, 5, 1], [Te, "cs", lr, 189, 5, 1], [1, "cs", 2, 189, Na, Xn], [1, "cs", 2, 189, Aq, 1], [Oq, "cs", 2, 190, 7, 1], [Te, "cs", xq, 190, 8, 1], [1, "cs", lr, 188, 8, ie], [Xn, "cs", xj, 187, 8, za], [1, "cs", 2, 187, Ni, Oq], [1, "cs", lr, 187, Na, Oq], [1, "cs", H, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", lr, 186, Qa, mk], [1, "cs", 2, 186, $n, Oq], [za, "cs", 2, 185, 7, 1], [1, "cs", Hj, 185, On, Oq], [mk, "cs", lr, 184, 8, 1], [mk, "cs", 2, 183, 7, za], [1, "cs", Hj, 183, U, Te], [Xn, "cs", 2, 184, Ro, 1], [ie, "cs", Hj, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, U, 1], [Oq, "cs", H, 182, Ni, Te], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, E, 1], [1, "cs", Pn, 180, 8, Oq], [ie, "cs", 2, 179, 8, 1], [Oq, "cs", 2, 182, ta, 1], [Te, "cs", xj, 181, M, Xn], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", jk, 179, va, 1], [1, "cs", Hj, 179, 7, Te], [1, "cs", 2, 178, cq, Oq], [1, "cs", 2, 178, 6, 1], [1, "cs", xq, 178, q, ie], [1, "cs", Pn, 177, 5, za], [1, "cs", lr, 177, N, mk], [1, "cs", pq, 176, $n, 1], [Te, "cs", 2, 176, Na, 1], [1, "cs", 2, 175, 6, 1], [Te, "cs", 2, 175, Fk, Te], [1, "cs", Hj, 176, 8, ie], [za, "cs", pq, 174, 8, 1], [1, "cs", 2, 175, Hr, 1], [Te, "cs", xq, 173, 8, Te], [1, "cs", jk, 174, 7, 1], [Te, "cs", 2, 173, 6, za], [1, "cs", 2, 174, 6, mk], [1, "cs", 2, 172, 5, 1], [1, "cs", xj, 173, 5, 1], [mk, "cs", 2, 172, 6, 1], [Oq, "cs", H, 172, 7, Xn], [ie, "cs", 2, 171, 8, Oq], [1, "cs", 2, 170, 7, za], [1, "cs", 2, 170, 6, 1], [Xn, "cs", 2, 170, kq, mk], [mk, "cs", jk, 171, nr, ie], [ie, "cs", 2, 171, Na, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", H, 169, Aq, 1], [1, "cs", 2, 169, 8, Oq], [1, "cs", 1, 168, 7, Oq], [Te, "cs", Te, 166, 5, ie], [1, "cs", Xn, 164, $n, ie], [1, "cs", za, 160, 7, 1], [1, "cs", 1, 156, He, Te], [1, "cs", 0, 166, Hr, Oq], [1, "cs", 0, 168, Fk, Te], [mk, "cs", ya, 164, 6, 1], [Te, "cs", ya, 162, Ar, mk], [Te, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, Ck, Oq], [Te, "cs", 0, 161, 5, 1], [mk, "cs", In, 159, 5, Te], [Xn, "cs", 0, 155, $k, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, Ni, za], [1, "cs", Xn, 153, Bi, 1], [Xn, "cs", 1, 151, 5, Xn], [1, "cs", pq, 168, 6, 1], [Te, "cs", Hj, 168, 8, 1], [Oq, "cs", lr, 167, 8, Te], [1, "cs", lr, 167, Aq, 1], [Oq, "cs", xq, 167, 6, za], [1, "cs", xq, 167, 5, Oq], [1, "cs", 2, 166, 6, Oq], [Xn, "cs", 2, 166, 7, Te], [1, "cs", 2, 165, 7, mk], [Te, "cs", xq, 165, Xk, za], [1, "cs", jk, 165, M, 1], [ie, "cs", 2, 164, 5, ie], [mk, "cs", 2, 163, q, 1], [Xn, "cs", lr, 162, 5, mk], [1, "cs", 2, 162, ji, 1], [ie, "cs", 2, 163, 6, Oq], [1, "cs", 2, 163, 7, Xn], [1, "cs", H, 163, 8, za], [mk, "cs", 2, 164, He, 1], [1, "cs", 2, 165, zj, 1], [1, "cs", xq, 161, 8, 1], [Oq, "cs", 2, 162, 8, Oq], [1, "cs", H, 160, zj, Te], [ie, "cs", H, 159, zj, ie], [Oq, "cs", H, 159, 7, za], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, Oq], [1, "cs", H, 160, 6, mk], [1, "cs", jk, 161, 6, 1], [za, "cs", 2, 161, $n, 1], [1, "cs", jk, 157, 7, 1], [1, "cs", jk, 158, 7, 1], [ie, "cs", Hj, 158, va, ie], [Te, "cs", 2, 158, nr, ie], [1, "cs", 2, 155, M, 1], [1, "cs", 2, 155, Xk, 1], [Oq, "cs", xj, 156, Bq, 1], [1, "cs", 2, 156, $k, ie], [Xn, "cs", 2, 157, qk, 1], [1, "cs", lr, 155, 8, 1], [1, "cs", Hj, 154, _a, ie], [1, "cs", pq, 154, N, 1], [1, "cs", 2, 154, 6, 1], [ie, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, ie], [1, "cs", xj, 153, U, 1], [1, "cs", xq, 153, z, Xn], [ie, "cs", lr, 152, 5, 1], [Oq, "cs", 2, 152, 6, Xn], [mk, "cs", xj, 152, 7, 1], [1, "cs", 2, 151, Ck, Oq], [mk, "cs", xj, 157, 5, 1], [1, "cs", 1, 156, ta, 1], [mk, "cs", mj, 150, 5, 1], [1, "cs", 0, 149, N, 1], [1, "cs", 0, 147, 8, Te], [ie, "cs", wj, 146, q, Xn], [1, "cs", ya, 144, Aq, za], [1, "cs", Da, 142, 5, Xn], [Te, "cs", 1, 147, va, mk], [1, "cs", ie, 145, 8, 1], [1, "cs", 1, 144, 5, Xn], [1, "cs", 2, 148, Fk, mk], [Oq, "cs", 2, 149, z, Te], [1, "cs", jk, 150, Na, 1], [1, "cs", lr, 150, 8, Oq], [1, "cs", jk, 151, 8, ie], [Oq, "cs", jk, 150, ur, 1], [Xn, "cs", 2, 149, br, mk], [za, "cs", 2, 148, He, za], [za, "cs", 2, 149, 6, 1], [Te, "cs", Hj, 148, 6, 1], [Te, "cs", 2, 148, 7, 1], [ie, "cs", Pn, 147, Ar, Oq], [1, "cs", 2, 147, 5, 1], [1, "cs", xj, 146, 6, 1], [1, "cs", 2, 146, ia, 1], [Te, "cs", H, 146, 8, Oq], [1, "cs", 2, 145, wk, Xn], [1, "cs", 2, 145, Ro, 1], [1, "cs", 2, 145, M, 1], [mk, "cs", 2, 144, 6, 1], [za, "cs", H, 143, 5, Xn], [za, "cs", 2, 143, va, Te], [ie, "cs", lr, 142, U, 1], [za, "cs", 2, 141, 5, za], [Xn, "cs", Hj, 224, 10, 1], [1, "cs", mj, 224, ra, 1], [Xn, "cs", Hi, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", Da, 224, Jj, 1], [1, "cs", 0, 224, 22, 1], [ie, "cs", ya, 224, 24, 1], [Oq, "cs", 0, 224, 29, 1], [Xn, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, Te], [za, "cs", Da, 224, 38, Oq], [1, "cs", 1, 224, 14, ie], [mk, "cs", 1, 224, 20, 1], [Xn, "cs", ie, 224, 27, 1], [Xn, "cs", mk, 224, 31, 1], [1, "cs", Oq, 224, 36, 1], [za, "cs", 2, 224, La, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [ie, "cs", 2, 224, W, za], [1, "cs", xj, 224, 21, ie], [za, "cs", pq, 224, 23, Xn], [Oq, "cs", lr, 224, 25, mk], [za, "cs", 2, 224, 26, Xn], [1, "cs", Pn, 224, 28, 1], [1, "cs", Pn, 224, 30, 1], [1, "cs", 2, 224, 32, za], [1, "cs", Pn, 224, 34, Xn], [1, "cs", 2, 224, 37, 1], [mk, "cs", 2, 224, 39, Oq], [1, "cs", 0, 224, 41, Oq], [Xn, "cs", Da, 224, 44, 1], [1, "cs", Hi, 224, 46, mk], [1, "cs", 0, 224, 52, 1], [Te, "cs", Hi, 224, 57, 1], [1, "cs", 1, 224, 47, Te], [1, "cs", lr, 224, 40, 1], [1, "cs", pq, 224, 42, 1], [1, "cs", 2, 224, 43, Te], [1, "cs", xj, 224, 45, Xn], [mk, "cs", 2, 224, 49, 1], [Te, "cs", Xn, 224, 50, Oq], [ie, "cs", pq, 224, 51, 1], [za, "la", I, 224, 54, 1], [Xn, "cs", jk, 224, 56, Xn], [mk, "cs", H, 224, 58, 1], [za, "cs", 2, 224, 61, 1], [Oq, "cs", Hi, 224, 60, 1], [Te, "cs", Da, 224, 64, Te], [Te, "cs", 0, 224, 66, 1], [1, "cs", ya, 224, 70, Xn], [1, "cs", In, 224, 74, 1], [1, "cs", 0, 224, 77, Xn], [Te, "cs", 1, 224, 62, mk], [Te, "cs", 1, 224, 68, 1], [mk, "cs", 1, 224, 72, 1], [1, "cs", Te, 224, 76, 1], [1, "cs", Oq, 224, 80, 1], [za, "cs", mk, 224, 83, Oq], [1, "cs", 1, 224, 91, 1], [za, "cs", 1, 224, 95, 1], [Xn, "cs", 1, 224, 97, 1], [mk, "cs", In, 224, 85, 1], [Oq, "cs", In, 224, 88, 1], [1, "cs", Da, 224, 93, Oq], [Xn, "cs", 0, 224, 98, Xn], [Xn, "cs", 2, 224, 59, ie], [mk, "cs", H, 224, 63, ie], [Oq, "cs", 2, 224, 65, 1], [Xn, "cs", jk, 224, 67, Xn], [Oq, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, Oq], [ie, "cs", lr, 224, 73, Oq], [1, "cs", jk, 224, 75, ie], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, ie], [1, "cs", xq, 224, 81, 1], [Te, "cs", xq, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, mk], [1, "cs", 2, 224, 87, Xn], [1, "cs", 2, 224, 89, 1], [za, "cs", xq, 224, 90, ie], [1, "cs", Pn, 224, 92, Te], [1, "cs", 2, 224, 94, ie], [Oq, "cs", 2, 224, 96, Te], [Te, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [mk, "cs", Rq, 224, 101, mk], [ie, "cs", za, 224, 103, 1], [ie, "cs", 2, 224, 102, 1], [1, "cs", Da, 222, 10, 1], [Te, "cs", xq, 223, w, 1], [1, "cs", 2, 222, 9, 1], [Xn, "cs", 2, 221, 9, Xn], [Oq, "cs", Hj, 223, 10, 1], [za, "cs", pq, 223, 11, Xn], [1, "cs", 2, 223, 12, ie], [1, "cs", 3, 223, 13, 1], [1, "cs", Hk, 222, 11, 1], [1, "cs", 3, 220, Qj, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, te, ie], [1, "re", lr, 219, 13, 1], [Oq, "re", ie, 218, Vj, 1], [Xn, "re", 1, 214, Zn, 1], [1, "cs", 0, 221, Ok, 1], [1, "cs", 1, 223, hr, mk], [mk, "cs", lr, 222, 19, mk], [1, "cs", 2, 223, 19, Te], [za, "cs", xq, 223, vi, mk], [1, "cs", xj, 222, 20, mk], [1, "cs", lr, 220, 21, ie], [mk, "cs", Rq, 219, 21, 1], [za, "cs", qo, 221, 21, 1], [ie, "cs", nq, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [Xn, "cs", 3, 220, 22, 1], [Te, "cs", 3, 219, 22, Oq], [1, "cs", Hk, 221, 22, 1], [Xn, "cs", 0, 211, 9, 1], [1, "cs", Oq, 211, 10, 1], [mk, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, Oq], [1, "cs", Pn, 210, 9, za], [1, "cs", 2, 210, Zk, 1], [mk, "cs", 2, 210, tk, ie], [Oq, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, Vi, Te], [1, "cs", pq, 211, 12, mk], [1, "cs", Pn, 211, ra, Te], [ie, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, sj, 1], [Te, "cs", lr, 210, 14, 1], [Xn, "cs", 3, 211, 15, 1], [Te, "cs", yr, 213, 9, 1], [Oq, "cs", ea, 212, vr, Te], [Te, "cs", qo, 223, 21, Xn], [Te, "cs", I, 209, R, Oq], [Oq, "la", 3, 223, 22, Te], [Te, "la", Hk, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", fn, 209, 10, Te], [1, "la", 0, 209, 12, ie], [Te, "la", Fr, 209, 14, 1], [Oq, "la", 4, 219, 23, za], [1, "la", Hk, 210, 15, za], [1, "la", Hk, 217, 22, 1], [ie, "la", 4, 212, 16, Te], [Xn, "la", pq, 214, 19, 1], [1, "la", 4, 213, vi, 1], [Te, "la", Te, 212, 21, Te], [Te, "la", 4, 215, V, 1], [1, "la", jk, 216, 17, za], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, zi, 1], [Xn, "la", 1, 217, 16, 1], [1, "la", 2, 218, G, 1], [za, "la", 2, 216, 14, 1], [mk, "la", H, 219, 16, 1], [1, "la", q, 220, 16, 1], [Xn, "la", z, 216, Z, 1], [za, "la", Vn, 217, 15, ie], [Xn, "cs", Da, 211, 44, 1], [Xn, "cs", 1, 212, 45, 1], [1, "cs", pq, 213, 45, Oq], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, za], [Xn, "cs", 3, 213, 46, 1], [Xn, "cs", 3, 214, 47, mk], [za, "cs", 3, 214, 48, Te], [ie, "cs", qo, 216, 46, Oq], [mk, "cs", Rq, 208, qi, Te], [1, "cs", Hi, 210, 21, Te], [Te, "cs", 0, 212, 23, 1], [Oq, "cs", 0, 213, 25, 1], [ie, "cs", 2, 213, 24, za], [Te, "cs", 2, 211, 22, Oq], [za, "cs", 2, 210, hn, mk], [Xn, "cs", 2, 209, 21, Xn], [Te, "cs", Pn, 209, Xa, 1], [Te, "cs", 2, 211, 21, Te], [ie, "cs", 2, 212, 22, 1], [1, "cs", Hj, 213, 23, Xn], [Te, "cs", Hk, 213, 26, 1], [1, "cs", 3, 207, Ok, 1], [Xn, "la", $i, 192, 33, Te], [1, "la", Mq, 191, 34, 1], [1, "la", 4, 190, 35, za], [1, "la", fn, 189, 37, Oq], [mk, "la", yr, 188, 39, 1], [1, "la", $i, 186, 40, Te], [Xn, "la", 4, 185, 39, ie], [1, "la", Vn, 184, 39, 1], [1, "la", lr, 183, 39, 1], [ie, "la", Te, 182, 40, za], [1, "la", 2, 181, 41, 1], [Te, "la", 5, 180, 41, 1], [1, "la", Eq, 179, 41, 1], [Oq, "la", 4, 192, 28, 1], [za, "la", Fr, 191, 28, Te], [Xn, "la", 4, 190, 27, Xn], [1, "la", yr, 188, 27, 1], [1, "la", 4, 187, 26, ie], [1, "la", 4, 186, 25, Te], [1, "la", 4, 185, 25, za], [Xn, "la", Vn, 184, 24, 1], [Te, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", Oq, 183, Xa, 1], [1, "la", 5, 182, 20, ie], [1, "la", 2, 181, 20, Xn], [1, "la", nr, 180, 20, Xn], [Xn, "la", lr, 179, Ok, Te], [1, "la", 4, 178, 19, 1], [Oq, "la", 3, 178, 17, Xn], [1, "la", 3, 176, 18, Te], [Oq, "cs", 0, 177, zi, 1], [1, "cs", 0, 175, 17, 1], [Te, "cs", 0, 180, G, 1], [1, "cs", 0, 174, 19, Xn], [Oq, "cs", Da, 172, 20, za], [za, "cs", 1, 175, Ga, za], [ie, "cs", mk, 172, V, 1], [Xn, "cs", 1, 181, sj, za], [1, "cs", 2, 179, _o, Xn], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, Pa, 1], [Xn, "cs", 2, 174, 18, 1], [ie, "cs", 2, 173, bq, 1], [1, "cs", xq, 172, Be, 1], [1, "cs", 2, 173, Vq, za], [ie, "cs", 2, 173, 17, za], [mk, "cs", 2, 174, Rk, 1], [1, "cs", 2, 174, Mn, 1], [Te, "cs", 2, 175, Yk, mk], [za, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [Xn, "cs", lr, 178, G, Xn], [1, "cs", jk, 179, G, Xn], [1, "cs", xj, 180, 15, mk], [mk, "cs", pq, 181, 16, Xn], [1, "cs", fn, 182, Pa, Te], [1, "cs", qo, 172, 21, 1], [za, "la", za, 175, 19, 1], [1, "la", jk, 174, 20, Xn], [1, "la", 2, 173, vi, 1], [1, "la", 1, 180, Un, Xn], [za, "la", xj, 181, qa, 1], [1, "la", qo, 191, wq, ie], [1, "s", Zj, 217, 30, 1], [mk, "s", Da, 208, 35, 1], [Te, "s", Da, 204, 24, 1], [1, "s", mk, 218, 32, 1], [Oq, "s", za, 207, 34, Xn], [Xn, "s", 1, 202, 23, za], [Xn, "s", ie, 195, 16, 1], [1, "s", Pn, 222, 28, za], [1, "s", Hj, 212, 38, Oq], [Oq, "s", H, 207, 23, za], [1, "s", xq, 202, Uk, Te], [Oq, "s", H, 195, io, za], [1, "s", 1, 191, 12, 1], [Xn, "s", 0, 187, 16, Xn], [mk, "s", Hj, 188, 16, 1], [Oq, "s", 1, 186, 14, 1], [Te, "s", Oq, 201, sr, 1], [1, "g", 1, 216, 31, 1], [1, "g", Hi, 200, eo, Te], [1, "g", ya, 202, 40, mk], [1, "g", 0, 189, 32, Oq], [Oq, "g", In, 204, 28, ie], [1, "g", Rq, 196, 24, ie], [1, "g", lr, 198, 37, 1], [za, "s", 0, 193, 39, 1], [Te, "s", ya, 201, 45, 1], [mk, "a", Rq, 210, 29, 1], [za, "a", Da, 200, 20, za], [1, "cs", 0, 200, 34, Oq], [1, "cs", ya, 193, 27, 1], [ie, "cs", Xn, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [za, "cs", xj, 202, 32, 1], [ie, "cs", 2, 194, 26, 1], [Oq, "cs", Hj, 192, 27, 1], [1, "cs", 2, 192, 32, Xn], [1, "cs", jk, 203, 31, 1], [Oq, "cs", 2, 202, 31, Te], [Xn, "cs", 2, 202, 30, Oq], [1, "cs", 3, 202, 29, 1], [1, "cs", ci, 201, 32, 1], [1, "cs", qo, 199, 35, 1], [Xn, "cs", 0, 193, 34, 1], [1, "cs", H, 194, 34, 1], [mk, "cs", jk, 198, 35, Oq], [1, "cs", 3, 199, 34, 1], [1, "cs", ci, 191, 29, 1], [1, "cs", Da, 191, 30, Oq], [Oq, "cs", 3, 190, 29, za], [1, "la", 3, 180, 69, 1], [ie, "la", 3, 182, 68, Xn], [ie, "la", 3, 184, 68, Xn], [Te, "la", ci, 186, 70, 1], [mk, "la", 3, 184, 72, Te], [1, "la", 3, 182, 72, 1], [Te, "la", qo, 180, 71, ie], [1, "cs", Hi, 186, 68, 1], [1, "cs", Da, 187, 70, ie], [ie, "cs", Rq, 183, 74, Oq], [Te, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, mk], [1, "cs", Pn, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", Pn, 180, 74, 1], [za, "cs", 2, 181, 74, ie], [Te, "la", mj, 184, 70, 1], [Xn, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [za, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, za], [mk, "la", $i, 187, 69, za], [ie, "la", Te, 188, 68, 1], [1, "la", 4, 189, 68, 1], [za, "la", 2, 190, 68, Oq], [1, "la", 1, 191, 68, Xn], [ie, "la", 4, 192, 68, Te], [1, "la", jk, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", Pn, 194, 70, 1], [1, "la", Eq, 195, 71, 1], [1, "la", za, 194, 71, 1], [1, "la", H, 196, 72, Xn], [ie, "la", Gi, 196, 71, 1], [1, "la", za, 197, 73, ie], [1, "la", 5, 196, 73, 1], [za, "la", 5, 198, 73, Xn], [1, "la", 3, 201, 73, Oq], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", Te, 205, 72, 1], [1, "la", jk, 206, 72, 1], [za, "la", 5, 207, 72, Te], [1, "la", 1, 208, 72, Xn], [1, "la", 1, 209, 73, ie], [ie, "la", jk, 209, 74, 1], [ie, "la", ta, 211, 76, 1], [1, "la", Pe, 210, 75, 1], [Oq, "la", 5, 212, 76, 1], [1, "la", Fr, 202, 75, 1], [Te, "la", 2, 203, 76, mk], [za, "la", Mq, 204, 77, mk], [1, "la", 2, 204, 78, Te], [ie, "la", 2, 204, 79, 1], [1, "la", q, 204, 80, 1], [za, "cs", Rq, 202, 74, mk], [1, "cs", za, 203, 74, za], [Oq, "cs", 2, 204, 73, Te], [Te, "cs", xq, 203, 75, Xn], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", In, 205, 74, 1], [Oq, "cs", Hj, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, za], [mk, "cs", yr, 207, 73, 1], [1, "cs", lr, 205, 76, 1], [za, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, ie], [1, "la", 4, 184, 64, 1], [Te, "la", 4, 185, 63, 1], [mk, "la", 1, 185, 62, Xn], [za, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, Te], [1, "la", Gi, 186, 59, ie], [1, "la", 1, 187, 58, 1], [Xn, "la", xq, 187, 57, 1], [1, "la", pq, 187, 56, 1], [ie, "s", Hi, 191, 60, Te], [ie, "s", 1, 195, 58, Te], [ie, "s", Te, 199, 46, 1], [ie, "s", xq, 202, 49, 1], [1, "g", 2, 197, 55, 1], [Oq, "g", 1, 213, 55, Oq], [1, "g", 0, 192, 45, 1], [1, "g", In, 210, 61, 1], [mk, "g", In, 182, 52, mk], [Oq, "g", Hi, 180, 35, za], [1, "g", In, 175, 25, 1], [mk, "g", Da, 168, 32, 1], [Xn, "g", Oq, 179, 28, Xn], [1, "g", 1, 161, 16, za], [mk, "g", jk, 172, 12, 1], [Te, "g", lr, 160, 25, za], [Oq, "g", 2, 157, 39, 1], [1, "g", pq, 170, 43, Oq], [Xn, "g", 2, 202, 67, 1], [Te, "g", 2, 217, 72, ie], [1, "g", jk, 214, 82, za], [1, "g", xj, 193, 86, Te], [1, "g", jk, 168, 60, 1], [1, "g", lr, 165, 78, 1], [Oq, "g", 2, 173, 88, ie], [1, "s", ya, 185, 51, 1], [Te, "s", 0, 175, 44, ie], [Te, "s", 0, 165, 50, mk], [ie, "s", 0, 160, 32, 1], [1, "s", Oq, 162, 30, 1], [Xn, "s", 1, 176, 28, Te], [mk, "s", Te, 154, Ri, Oq], [Te, "s", 1, 184, 49, ie], [Oq, "s", za, 192, 62, 1], [Xn, "s", 1, 216, 62, 1], [Te, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, za], [1, "s", 1, 206, 86, Xn], [Te, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", ta, 201, 81, 1], [Oq, "la", 1, 207, 83, 1], [1, "la", fn, 173, 32, Xn], [1, "la", xq, 181, 45, 1], [mk, "la", za, 178, 38, Oq], [mk, "la", 1, 213, 69, Oq], [Oq, "la", 5, 214, 69, Oq], [za, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, za], [1, "la", qo, 191, 80, ie], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", Pn, 154, 67, mk], [1, "g", xq, 202, 94, mk], [Te, "g", xq, 155, 90, za], [1, "s", 2, 215, 80, Te], [1, "s", 2, 204, 62, Xn], [1, "s", 2, 218, 60, 1], [mk, "s", 2, 194, 62, mk], [1, "s", 0, 216, 86, 1], [ie, "s", Zj, 211, 93, Oq], [Te, "la", In, 216, 92, 1], [1, "la", 0, 151, 96, 1], [Oq, "la", ie, 155, 95, 1], [1, "la", Pe, 214, 88, ie], [1, "s", 0, 205, 99, za], [1, "s", za, 217, 88, 1], [Te, "s", 1, 213, 94, 1], [za, "s", 1, 202, 97, ie], [za, "s", 0, 199, 85, za], [1, "s", Da, 190, 93, Oq], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, Te], [1, "la", ci, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [Te, "la", mj, 219, 77, 1], [1, "la", Da, 200, 59, 1], [1, "la", 3, 188, 87, za], [Oq, "la", Zj, 183, 94, 1], [Xn, "la", ie, 187, 83, mk], [Xn, "la", 1, 175, 82, Te], [1, "la", ie, 172, 94, za], [1, "la", 2, 179, 78, za], [za, "la", Hi, 166, 87, 1], [1, "la", 3, 159, 80, Te], [Te, "la", 3, 167, 15, mk], [ie, "la", 1, 164, qa, 1], [1, "la", 1, 172, 28, 1], [1, "la", Hk, 153, 24, 1], [1, "la", 4, 164, 91, Xn], [za, "la", 4, 156, 82, 1], [mk, "la", 4, 149, 90, za], [mk, "s", mj, 178, 85, Xn], [1, "s", 1, 180, 85, ie], [ie, "s", 0, 163, 96, 1], [1, "s", ya, 159, 86, 1], [za, "s", 0, 185, 78, mk], [Xn, "s", za, 194, 75, Xn], [Te, "s", lr, 195, 76, ie], [1, "s", 2, 181, 78, mk], [1, "s", lr, 161, 87, Oq], [Xn, "s", xq, 166, 97, ie], [1, "s", Pn, 177, 97, Te], [Oq, "s", In, 149, 85, 1], [1, "s", Te, 151, 83, 1], [Oq, "s", Te, 175, 74, 1], [1, "s", ya, 174, 72, 1], [mk, "la", ea, 168, 71, ie], [za, "la", 3, 180, 60, 1], [1, "s", Rq, 156, 63, 1], [za, "s", 0, 151, 47, Xn], [ie, "s", Te, 158, 64, 1], [1, "s", 1, 161, 75, 1], [Te, "s", 1, 162, 51, 1], [Te, "s", 1, 175, 45, 1], [Xn, "s", za, 152, 47, 1], [za, "s", mk, 159, 33, za], [1, "s", 1, 152, Pj, mk], [1, "s", Zj, 151, 13, 1], [1, "s", In, 166, 22, mk], [Oq, "s", 0, 170, 63, Oq], [Xn, "s", 2, 172, 62, Te], [za, "s", pq, 155, 61, 1], [mk, "s", xj, 167, 51, ie], [Te, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, Oq], [ie, "la", Mq, 177, 68, Oq], [1, "la", qo, 176, 67, 1], [ie, "la", 0, 174, 67, Te], [1, "la", ie, 172, 67, ie], [Te, "la", 4, 171, 67, Oq], [mk, "la", Vn, 170, 66, ie], [1, "la", Mq, 169, 66, ie], [1, "la", ie, 168, 66, 1], [1, "la", 4, 167, 67, 1], [ie, "la", 1, 166, 67, mk], [1, "la", Vn, 165, 68, Oq], [za, "la", 5, 164, 68, Te], [1, "la", jk, 163, 68, Xn], [za, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, mk], [Oq, "la", ci, 153, 72, 1], [1, "la", I, 163, 60, 1], [Te, "la", 3, 164, 42, Xn], [Oq, "la", 0, 155, 51, 1], [ie, "la", Oq, 168, 42, za], [1, "la", Fr, 158, 48, Oq], [1, "la", Vn, 178, 57, ie], [1, "la", Vn, 151, 69, Te], [1, "la", 2, 170, 74, za], [za, "la", 2, 160, 84, Xn], [1, "la", Pn, 174, 92, mk], [ie, "la", jk, 188, 90, za], [1, "la", 2, 209, 84, 1], [ie, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", z, 165, 57, 1], [1, "la", 5, 182, 58, za], [mk, "la", Fk, 166, 44, 1], [Oq, "la", 1, 163, 39, Oq], [1, "la", 1, 152, 53, Xn], [mk, "la", 1, 152, 37, ie], [1, "la", 2, 163, Cq, mk], [Te, "de", da, 219, Xi, 0], [Xn, "de", Do, 203, ik, 0], [1, "de", 15, 220, 19, 0], [1, "de", F, 223, sj, ya], [1, "de", 12, 213, sk, 0], [mk, "de", 37, 217, ha, 0], [1, "de", 38, 220, 14, ya], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, Tn, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, hr, Zj], [1, "de", 37, 212, 18, 0], [ie, "de", 38, 215, 26, ya], [Te, "de", 37, 222, 25, mj], [za, "de", 40, 221, 29, Zj], [1, "de", Xi, 220, 27, 0], [Xn, "de", 13, 213, 27, 0], [za, "de", dk, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, Zj], [Te, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, Rq], [1, "de", 39, 215, 32, Zj], [1, "de", 37, 211, 35, 0], [Xn, "de", Uk, 223, 38, 0], [1, "de", Z, 213, 38, 0], [Te, "de", Wa, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", zi, 206, 23, 0], [Xn, "de", ik, 205, 28, Rq], [Te, "de", Kq, 211, 23, mj], [1, "de", dk, 201, 20, 0], [1, "de", 15, 198, se, 0], [ie, "de", 15, 199, 16, ya], [1, "de", Sj, 194, 15, ya], [1, "de", 12, 197, 23, In], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, Qj, 0], [za, "de", 40, 196, 12, Hi], [1, "de", 40, 198, Ik, mj], [Oq, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [Oq, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [mk, "de", 39, 204, 31, Hi], [Te, "de", 39, 192, 24, Rq], [Xn, "de", 40, 187, 23, 0], [ie, "de", 38, 187, kn, 0], [Xn, "de", 39, 192, Pj, Zj], [1, "de", 37, 185, 15, Da], [Xn, "de", 12, 188, _o, 0], [Oq, "de", hq, 185, 13, 0], [mk, "de", 14, 189, se, 0], [1, "de", on, 187, 22, Rq], [Oq, "de", 15, 180, 9, Hi], [1, "de", Xi, 177, 14, 0], [1, "de", 14, 173, Qj, 0], [1, "de", Sq, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, Cq, 0], [Te, "de", 39, 175, 9, Da], [ie, "de", 40, 173, 14, Rq], [Xn, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, mj], [1, "de", 38, 164, 15, Da], [1, "de", 39, 170, 20, 0], [Oq, "de", 40, 160, 17, Hi], [1, "de", 40, 154, 10, Da], [za, "de", 40, 165, 23, Zj], [1, "de", 40, 150, so, 0], [Te, "de", 37, 155, 16, 0], [ie, "de", 39, 146, Zk, wj], [1, "de", 12, 159, 12, wj], [Oq, "de", 13, 151, pn, ya], [1, "de", 14, 150, 14, In], [Xn, "de", Ga, 153, so, 0], [za, "de", 13, 161, 25, Zj], [Xn, "de", Tn, 169, 25, wj], [Te, "de", 15, 176, 25, Hi], [1, "de", 12, 180, 29, Rq], [1, "de", 12, 188, 31, Hi], [mk, "de", po, 181, 36, Hi], [Oq, "de", 37, 186, 33, 0], [Xn, "de", 38, 183, 26, 0], [Xn, "de", 39, 177, 21, Hi], [ie, "de", 40, 175, 31, mj], [1, "de", 37, 176, 39, 0], [za, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [Oq, "de", 38, 168, 45, Da], [Xn, "de", 38, 173, 45, ya], [ie, "de", 39, 160, 35, 0], [za, "de", 40, 161, 42, 0], [Xn, "de", 40, 170, 39, 0], [mk, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [Xn, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [ie, "de", 40, 150, 50, ya], [Te, "de", 40, 160, 52, 0], [mk, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [Te, "de", 12, 167, 32, ya], [1, "de", Zn, 158, 32, Da], [1, "de", 14, 149, 28, wj], [za, "de", Ga, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", oq, 171, 43, mj], [Te, "de", Uk, 174, 36, ya], [1, "de", 12, 151, 43, Hi], [1, "de", vn, 152, 48, 0], [1, "de", dk, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, Rq], [1, "de", ik, 183, 51, 0], [ie, "de", dk, 186, 48, 0], [1, "de", 37, 182, 48, Hi], [Te, "de", 38, 187, 52, wj], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [Oq, "de", 40, 194, 37, Da], [mk, "de", 39, 199, 44, Hi], [mk, "de", 38, 200, 49, In], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, wj], [1, "de", po, 198, 47, mj], [1, "de", 15, 198, 55, Hi], [1, "de", 15, 212, 54, ya], [1, "de", 15, 216, 63, wj], [1, "de", 14, 209, 62, Zj], [Xn, "de", 12, 219, 60, 0], [ie, "de", 12, 206, 56, Da], [za, "de", Sj, 218, 72, Zj], [za, "de", $a, 223, 67, wj], [ie, "de", Uk, 205, 64, 0], [1, "de", 12, 193, 63, Zj], [ie, "de", 14, 216, 80, 0], [Te, "de", 14, 222, 87, wj], [mk, "de", 38, 210, 53, Rq], [Xn, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [Oq, "de", 37, 222, 60, mj], [ie, "de", 37, 207, 70, 0], [Xn, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [Oq, "de", 38, 218, 55, 0], [Xn, "de", 38, 212, 61, ya], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, Rq], [1, "de", 40, 222, 81, 0], [Xn, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, wj], [1, "de", 39, 208, 86, 0], [za, "de", 39, 218, 87, Rq], [Te, "de", 39, 222, 93, In], [ie, "de", 39, 216, 96, Hi], [ie, "de", 39, 209, 94, Rq], [Xn, "de", 39, 201, 87, Da], [1, "de", 39, 198, 82, Rq], [Xn, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, Zj], [Oq, "de", 39, 202, 92, wj], [Te, "de", 37, 194, 97, mj], [ie, "de", 39, 204, 88, 0], [ie, "de", 39, 189, 90, wj], [mk, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [ie, "de", 37, 183, 91, wj], [Oq, "de", 37, 186, 80, ya], [Te, "de", 37, 191, 72, ya], [1, "de", 38, 184, 77, 0], [Te, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, Rq], [mk, "de", 40, 178, 87, Zj], [Xn, "de", 40, 174, 94, 0], [za, "de", 40, 192, 93, Hi], [Te, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, Da], [mk, "de", 38, 161, 85, wj], [1, "de", 38, 164, 98, Hi], [Te, "de", 38, 151, 99, Da], [1, "de", 38, 151, 85, In], [Xn, "de", 40, 148, 83, 0], [Oq, "de", 40, 160, 77, 0], [za, "de", 40, 167, 77, Da], [Te, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, Hi], [1, "de", 37, 161, 64, 0], [mk, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, Da], [1, "de", 39, 174, 64, Rq], [1, "de", 39, 175, 56, 0], [mk, "de", 39, 149, 67, Da], [1, "de", 12, 218, 96, Da], [Xn, "de", 13, 212, 95, Rq], [Oq, "de", 14, 204, 85, 0], [mk, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", $a, 198, 87, 0], [Xn, "de", 14, 196, 77, 0], [1, "de", vn, 194, 86, 0], [1, "de", _o, 181, 84, mj], [Oq, "de", 14, 184, 79, 0], [1, "de", Kq, 188, 93, Hi], [1, "de", Dr, 180, 87, 0], [za, "de", Zn, 178, 96, 0], [1, "de", 13, 163, 95, Zj], [mk, "de", v, 172, 88, Da], [Oq, "de", Ga, 176, 75, Da], [Xn, "de", 14, 172, 72, Da], [Te, "de", 14, 169, 82, Zj], [Oq, "de", ja, 164, 78, Hi], [Xn, "de", 13, 158, 87, Zj], [ie, "de", 13, 149, 86, wj], [ie, "de", 15, 154, 91, 0], [1, "de", v, 160, 74, Hi], [Oq, "de", la, 152, 76, Zj], [1, "de", 14, 158, 63, ya], [za, "de", dk, 150, 60, Hi], [Te, "de", oq, 169, 59, Hi], [1, "de", 13, 173, 61, 0], [1, "cs", mk, 143, 104, Oq], [1, "cs", In, 141, 102, za], [1, "cs", I, 138, 102, Oq], [1, "cs", jk, 139, 102, za], [mk, "cs", 2, 140, 102, za], [mk, "cs", nq, 143, 107, 1], [Te, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, Xn], [1, "cs", 2, 142, 103, 1], [1, "cs", ya, 142, 104, Oq], [1, "cs", 2, 141, 103, ie], [1, "cs", ci, 142, 105, Xn], [1, "cs", 3, 140, 103, 1], [1, "cs", yr, 141, 104, 1], [1, "la", 4, 151, 23, Te], [Xn, "la", $i, 150, 22, 1], [mk, "la", 1, 149, 21, Oq], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, qr, mk], [za, "la", 4, 147, bn, 1], [1, "la", Oj, 147, 18, mk], [1, "la", Oq, 147, 17, Oq], [Oq, "la", Hk, 144, rr, 1], [Xn, "la", ta, 147, 16, za], [mk, "la", pq, 147, Ga, Xn], [1, "la", 4, 147, 14, 1], [1, "la", Gi, 145, 11, za], [mk, "la", M, 145, Sj, 1], [1, "la", mk, 146, D, 1], [1, "la", 2, 145, 13, 1], [mk, "la", 3, 155, 25, 1], [Te, "la", Da, 155, 24, 1], [Te, "la", Hk, 153, 26, Te], [1, "cs", mj, 151, 24, Oq], [Te, "cs", 0, 153, 22, Xn], [za, "cs", ci, 152, 22, 1], [1, "cs", I, 154, 22, 1], [Xn, "cs", mk, 157, 26, Oq], [za, "cs", lr, 157, 24, Te], [Oq, "cs", pq, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", Hj, 151, 26, Xn], [Xn, "cs", 2, 152, 25, Te], [Oq, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, ie], [1, "cs", 2, 157, 23, Xn], [Oq, "cs", 2, 157, 22, 1], [Xn, "cs", ea, 150, 24, mk], [1, "cs", ea, 150, 23, Xn], [1, "de", 38, 155, 29, 0], [Te, "de", 12, 157, 27, wj], [Oq, "de", Do, 153, 29, mj], [1, "de", Ga, 158, 23, 0], [Oq, "de", hq, 156, 21, 0], [1, "de", 13, 147, 36, Rq], [1, "de", Zn, 161, 56, 0], [1, "de", Dr, 147, 79, 0], [Te, "de", da, 157, 99, In], [1, "de", Uk, 172, 99, In], [ie, "la", Hk, 143, 102, ie], [Te, "la", Vn, 149, 96, 1], [1, "la", $i, 145, 102, 1], [Xn, "la", 1, 148, 97, 1], [1, "la", Oj, 148, 98, 1], [za, "cs", ea, 144, 104, 1], [Oq, "cs", 3, 144, 103, ie], [1, "cs", I, 145, 103, Xn], [1, "cs", nq, 145, 104, 1], [Oq, "cs", fn, 142, 101, 1], [Oq, "cs", nq, 143, 100, Te], [1, "cs", 3, 141, 101, Te], [Oq, "cs", 3, 142, Cn, 1], [1, "cs", 0, 141, 100, 1], [za, "cs", 2, 140, 101, 1], [1, "cs", pq, 144, 105, 1], [ie, "cs", yr, 146, 103, 1], [1, "cs", I, 146, 102, za], [1, "cs", ea, 150, 95, Oq], [Te, "cs", ya, 150, 97, ie], [1, "cs", 2, 151, 98, Te], [1, "cs", wj, 153, 97, za], [1, "cs", Hk, 153, 96, 1], [1, "cs", jk, 149, 95, 1], [Xn, "s", 0, 213, 127, 1], [za, "plm", Oq, 214, 131, mj], [1, "plm", ie, 207, 128, Rq], [1, "plm", Zj, 208, 127, 0], [1, "s", Xn, 207, 132, 1], [1, "s", 2, 208, 133, Oq], [1, "plm", wj, 217, 132, Rq], [Oq, "plm", pq, 186, 158, 0], [1, "plm", In, 184, 160, In], [1, "s", za, 183, 156, Xn], [1, "s", 2, 186, 159, Te], [Xn, "p", 0, 182, 157, 1], [Oq, "p", In, 114, 205, ie], [za, "plm", Te, 117, 204, ya], [1, "plm", 0, 117, 205, 0], [ie, "plm", 2, 112, 204, 0], [Xn, "s", pq, 114, 207, 1], [ie, "s", 2, 115, 204, Xn], [Oq, "plm", 2, 122, 151, 0], [1, "plm", Xn, 123, 150, 0], [1, "plm", Xn, 117, 151, mj], [1, "s", Hi, 118, 150, 1], [Xn, "s", 1, 122, 152, ie], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, Zj], [1, "s", 0, 153, 128, 1], [za, "s", 2, 152, 130, 1], [Xn, "p", 0, 123, 65, 1], [Oq, "plm", Hj, 125, 62, 0], [Oq, "plm", 1, 124, 62, Da], [mk, "plm", Zj, 120, 65, Zj], [1, "s", 1, 125, 63, ie], [Xn, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [Te, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", xj, 145, 105, za], [1, "cs", Pn, 144, 107, Te], [1, "cs", 2, 141, 106, 1], [mk, "cs", 2, 141, 105, 1], [1, "cs", Pn, 140, 105, Oq], [1, "cs", H, 140, 104, ie], [Te, "cs", 1, 138, 103, ie], [1, "cs", mj, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", Hj, 139, 105, 1], [1, "cs", 2, 142, 106, ie], [Te, "cs", 2, 142, 107, 1], [1, "cs", Pn, 139, 101, 1], [1, "de", 19, 27, 264, ya], [Oq, "la", Pe, 147, 99, Oq], [1, "la", Te, 146, Cn, 1], [1, "la", 4, 145, 101, ie], [1, "cs", mk, 215, 47, 1], [1, "cs", 2, 216, 47, mk], [Oq, "cs", 2, 215, 48, 1], [1, "la", Mq, 214, 45, mk], [Oq, "la", Gi, 215, 45, za], [ie, "la", 0, 216, 46, mk], [Xn, "la", $i, 216, 48, Te], [1, "la", Pe, 216, 49, 1], [ie, "la", Vn, 217, 50, 1], [ie, "la", 3, 214, 49, za], [1, "la", Pe, 211, 45, mk], [1, "la", nq, 213, 47, 1], [1, "cs", Pn, 224, 48, 1], [za, "plm", 2, 111, 243, Da], [mk, "plm", 1, 108, 246, 0], [Oq, "s", Te, 110, 243, Oq], [Xn, "s", 0, 108, 245, Oq], [1, "s", 0, 121, 276, Oq], [mk, "plm", pq, 122, 277, Da], [1, "plm", pq, 117, 276, Zj], [Te, "plm", 1, 118, 277, Rq], [1, "s", Te, 118, 278, 1], [Xn, "cs", Hj, 66, sr, Te], [ie, "cs", I, 67, 16, Xn], [1, "cs", In, 67, tr, Te], [1, "cs", 2, 66, Ri, za], [Te, "cs", fn, 66, 18, Xn], [1, "cs", 3, 68, Un, 1], [1, "cs", mj, 36, Fo, 1], [Xn, "cs", 2, 36, 17, 1], [Oq, "cs", 2, 36, 18, 1], [mk, "cs", nq, 35, tr, Xn], [ie, "cs", Hk, 36, Dq, Te], [ie, "cs", 3, 35, 18, 1], [Xn, "cs", 2, 66, 30, mk], [mk, "cs", Pn, 66, 23, Xn], [1, "cs", nq, 66, 22, Xn], [1, "cs", ea, 66, 31, 1], [za, "cs", 2, 36, 30, mk], [ie, "cs", Pn, 36, 23, Xn], [1, "cs", 1, 36, 22, Te], [1, "cs", xq, 36, 31, mk], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, hq, 1], [1, "cs", xj, 44, 13, 1], [mk, "cs", Hk, 42, Yk, 1], [1, "cs", nq, 41, 16, 1], [1, "cs", 3, 40, 16, Te], [1, "cs", 0, 42, 19, 1], [mk, "cs", 3, 43, 19, 1], [ie, "cs", 3, 44, 19, 1], [ie, "cs", 3, 45, 19, 1], [ie, "cs", Pn, 46, 19, Te], [Te, "cs", 0, 43, 22, 1], [mk, "cs", xq, 42, 22, 1], [1, "cs", Te, 41, 22, Xn], [1, "cs", Rq, 40, 22, 1], [1, "cs", 3, 39, 17, ie], [1, "cs", 1, 44, 26, 1], [za, "cs", 2, 45, 26, 1], [1, "cs", qo, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", pq, 48, 26, Xn], [Oq, "cs", yr, 47, 25, 1], [1, "cs", 3, 43, 27, Oq], [1, "cs", 1, 49, 32, mk], [Te, "cs", 2, 50, 32, ie], [Te, "cs", xj, 51, 32, Te], [1, "cs", H, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", Oq, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", yr, 55, 31, mk], [Oq, "cs", nq, 54, 32, Xn], [1, "cs", fn, 47, 31, za], [ie, "cs", 3, 48, 32, Xn], [za, "cs", 0, 51, 33, 1], [ie, "cs", lr, 52, 33, 1], [Te, "cs", 2, 50, 33, Oq], [Oq, "cs", ea, 56, 30, ie], [1, "cs", ci, 56, 31, ie], [ie, "cs", 3, 46, 30, 1], [ie, "cs", Hk, 46, 31, 1], [1, "cs", Xn, 53, 33, za], [za, "cs", H, 49, 33, Xn], [1, "cs", xq, 53, 32, za], [ie, "cs", wj, 55, 32, 1], [za, "cs", 0, 47, 32, ie], [Oq, "d", 1, 54, 35, 1], [mk, "fo", 2, 35, 15, wj], [1, "fo", H, 36, 12, In], [1, "fo", Pn, 67, eo, Hi], [1, "cs", 3, 60, 13, 1], [Xn, "cs", xq, 59, Z, ie], [Te, "cs", 1, 58, 13, 1], [Xn, "cs", nq, 62, 16, 1], [1, "cs", ya, 61, p, Xn], [Oq, "cs", 3, 60, G, 1], [1, "cs", qo, 63, Rk, 1], [ie, "cs", Pn, 60, so, mk], [Oq, "cs", Xn, 59, b, 1], [za, "cs", nq, 58, 19, 1], [mk, "cs", jk, 57, b, 1], [ie, "cs", pq, 56, Dk, 1], [1, "cs", In, 55, 18, 1], [1, "cs", 2, 55, m, 1], [1, "cs", 2, 63, 23, Xn], [Xn, "cs", In, 62, 22, Oq], [Te, "cs", Hj, 61, 22, 1], [mk, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, Xn], [1, "cs", 2, 54, 26, Te], [mk, "cs", Hj, 55, 26, ie], [1, "cs", xj, 56, 26, 1], [1, "cs", ie, 57, 26, Te], [mk, "cs", 2, 58, 26, Te], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", xq, 68, 15, ie], [Oq, "cs", 3, 69, 15, Xn], [Oq, "cs", 3, 70, eo, mk], [1, "cs", 3, 70, 14, ie], [ie, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, Mn, 1], [1, "cs", Pn, 71, 13, za], [1, "cs", 2, 71, Kq, 1], [Te, "cs", I, 72, 13, 1], [Xn, "cs", 3, 70, 8, Xn], [za, "cs", fn, 71, 8, mk], [1, "cs", lr, 72, zj, Te], [1, "cs", 0, 73, 8, 1], [1, "cs", nq, 74, fk, Oq], [1, "cs", 3, 74, Bi, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [Te, "cs", 3, 75, 10, za], [mk, "cs", mj, 76, 10, ie], [mk, "cs", Da, 76, 16, mk], [mk, "cs", 3, 76, $q, Te], [Te, "cs", Hk, 75, gk, 1], [1, "cs", 2, 77, Mo, 1], [1, "cs", 2, 77, 14, mk], [1, "cs", Hk, 77, F, 1], [Xn, "cs", 3, 77, 13, 1], [1, "cs", nq, 77, $q, 1], [1, "cs", 0, 74, 18, mk], [Xn, "cs", mk, 75, Yo, 1], [1, "cs", xq, 74, qa, 1], [1, "cs", 3, 73, Be, 1], [1, "cs", ea, 67, 23, Oq], [za, "cs", 0, 68, 23, za], [mk, "cs", 0, 72, Ok, ie], [Xn, "cs", 2, 73, 20, Xn], [Xn, "cs", xj, 74, Jj, 1], [1, "cs", 2, 74, 36, 1], [mk, "cs", Hj, 77, 27, mk], [1, "cs", Pn, 76, 26, Xn], [1, "cs", 2, 75, 26, Xn], [1, "cs", 0, 74, 26, 1], [Oq, "cs", 2, 75, 25, 1], [1, "cs", mj, 76, 25, 1], [ie, "cs", 1, 77, 23, Xn], [1, "cs", 2, 77, 16, mk], [Te, "cs", 2, 76, 17, Xn], [za, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [Te, "cs", 2, 77, 25, mk], [Oq, "cs", 2, 77, 26, 1], [ie, "cs", Te, 75, 27, Te], [Te, "cs", 3, 76, 27, Xn], [ie, "cs", lr, 67, 24, Te], [ie, "cs", pq, 66, 24, Te], [1, "cs", Pn, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, Xn], [Oq, "cs", Hj, 66, Dk, 1], [1, "cs", Pn, 66, 20, Xn], [za, "cs", jk, 66, 21, 1], [Oq, "cs", xj, 67, Sa, 1], [za, "cs", 2, 67, 22, ie], [1, "cs", 0, 77, 36, 1], [ie, "cs", 0, 77, 32, 1], [1, "cs", Oq, 75, 35, za], [Oq, "cs", 2, 75, 36, ie], [1, "cs", xj, 76, 36, 1], [Te, "cs", Pn, 77, 35, mk], [Te, "cs", 2, 77, 34, 1], [1, "cs", lr, 76, 35, Oq], [1, "cs", 2, 77, 33, 1], [1, "cs", lr, 77, 31, Xn], [Oq, "cs", Rq, 77, 29, 1], [1, "cs", Zj, 71, 32, 1], [Te, "cs", Rq, 76, 34, za], [mk, "cs", xq, 77, 30, 1], [Oq, "cs", lr, 77, 28, 1], [za, "cs", jk, 76, 28, 1], [1, "cs", Pn, 75, 28, Xn], [ie, "cs", 2, 76, 29, 1], [1, "cs", xq, 76, 33, 1], [1, "cs", jk, 70, 32, ie], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [Te, "cs", 2, 67, 31, 1], [ie, "cs", Hj, 67, 30, ie], [Te, "cs", 2, 69, 32, za], [Xn, "cs", 1, 67, 32, ie], [ie, "cs", 2, 68, 32, 1], [za, "cs", H, 66, 32, 1], [1, "cs", 2, 66, 33, ie], [Xn, "cs", 2, 67, 33, 1], [mk, "cs", jk, 70, 33, Te], [1, "cs", 2, 69, 33, Te], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [mk, "cs", 1, 66, 35, za], [Xn, "cs", Hj, 67, 34, 1], [Te, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [Oq, "cs", 2, 64, 36, 1], [za, "cs", 2, 65, 36, 1], [mk, "cs", 2, 67, 35, ie], [1, "cs", Pn, 66, 36, mk], [1, "cs", xj, 69, 34, 1], [mk, "cs", xj, 68, 35, Oq], [ie, "cs", xj, 76, Qj, 1], [Te, "cs", lr, 77, Qk, Oq], [1, "cs", 2, 77, _a, za], [1, "cs", lr, 77, 10, za], [ie, "cs", xq, 78, 8, ie], [ie, "cs", 2, 78, 9, za], [mk, "cs", pq, 78, 10, Oq], [Oq, "cs", Hj, 78, 11, mk], [Te, "cs", 2, 78, da, ie], [1, "cs", xq, 78, 13, Xn], [1, "cs", 0, 79, 9, 1], [za, "cs", ie, 79, nn, mk], [1, "cs", 3, 79, _a, 1], [Oq, "cs", qo, 79, 10, Te], [Xn, "cs", 3, 79, Uk, mk], [mk, "cs", 3, 80, 8, ie], [Oq, "cs", Oq, 80, 10, Te], [1, "cs", xj, 80, Qk, 1], [1, "cs", Pn, 80, pk, 1], [1, "cs", 2, 81, 8, za], [1, "cs", H, 81, 9, Te], [1, "cs", 2, 81, 10, Te], [ie, "cs", H, 78, Bk, Oq], [Oq, "cs", xj, 79, 13, Te], [1, "cs", xj, 78, $q, 1], [1, "cs", 2, 80, $a, 1], [ie, "cs", 0, 79, 14, Te], [1, "cs", 0, 82, $o, Oq], [ie, "cs", Hj, 82, 8, 1], [Te, "cs", Hj, 82, gn, 1], [Oq, "cs", 2, 81, tk, 1], [Xn, "cs", I, 80, Zn, mk], [1, "cs", za, 78, 30, 1], [1, "cs", 1, 78, 34, Xn], [1, "cs", 1, 78, 27, 1], [ie, "cs", 0, 78, 25, 1], [1, "cs", Da, 79, 29, 1], [1, "cs", wj, 79, 32, 1], [za, "cs", 0, 79, 35, 1], [1, "cs", Hj, 78, 35, 1], [Te, "cs", xq, 78, 36, Te], [ie, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, Oq], [1, "cs", xq, 79, 33, Oq], [1, "cs", Hj, 78, 32, 1], [mk, "cs", Hj, 78, 31, Te], [1, "cs", Pn, 79, 31, 1], [1, "cs", jk, 79, 30, 1], [1, "cs", Hj, 78, 29, 1], [za, "cs", Hj, 78, 28, 1], [1, "cs", 2, 79, 28, za], [Xn, "cs", 2, 79, 27, ie], [Xn, "cs", 2, 78, 26, Xn], [1, "cs", pq, 79, 26, mk], [1, "cs", 2, 78, 24, Oq], [za, "cs", jk, 80, 34, Xn], [1, "cs", 2, 80, 33, za], [1, "cs", 2, 80, 31, Te], [1, "cs", 2, 80, 30, 1], [za, "cs", 2, 80, 32, za], [za, "cs", pq, 80, 29, Xn], [Oq, "cs", lr, 80, 28, za], [1, "cs", 2, 80, 27, 1], [1, "cs", mj, 81, 30, Xn], [Te, "cs", ie, 81, 32, 1], [1, "cs", mk, 81, 28, 1], [ie, "cs", Pn, 81, 29, mk], [1, "cs", Pn, 81, 31, ie], [za, "cs", xj, 81, 33, 1], [1, "cs", pq, 82, 30, 1], [Oq, "cs", 2, 82, 31, za], [1, "cs", xq, 82, 32, 1], [za, "cs", 0, 37, 36, mk], [1, "cs", 2, 38, 36, 1], [za, "cs", Pn, 37, 35, Oq], [mk, "cs", jk, 36, 36, 1], [Xn, "cs", 2, 34, 35, Oq], [1, "cs", 2, 35, 35, 1], [Te, "cs", 2, 36, 35, za], [1, "cs", Hi, 33, 34, 1], [Xn, "cs", 1, 35, 34, 1], [Oq, "cs", 2, 36, 34, za], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [Xn, "cs", 2, 35, 33, Xn], [1, "cs", Hj, 34, 33, Xn], [Te, "cs", 2, 33, 33, 1], [1, "cs", Pn, 31, 32, 1], [Te, "cs", mk, 36, 32, Oq], [Oq, "cs", 1, 32, 32, Te], [1, "cs", 2, 35, 32, 1], [mk, "cs", 2, 33, 32, 1], [mk, "cs", lr, 32, 33, 1], [mk, "cs", 2, 33, 31, mk], [1, "cs", Hj, 34, 31, Xn], [Te, "cs", 2, 35, 31, 1], [1, "cs", wj, 34, 32, mk], [Xn, "cs", 2, 35, 30, ie], [1, "cs", za, 39, 23, 1], [1, "cs", 3, 39, 22, ie], [1, "cs", ea, 36, 24, 1], [Xn, "cs", qo, 35, 24, Xn], [1, "cs", jk, 34, 23, ie], [Xn, "cs", 2, 35, 23, mk], [Te, "cs", 2, 36, wq, Oq], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [Te, "cs", xq, 35, 16, 1], [ie, "cs", 2, 34, Fo, 1], [1, "cs", xq, 33, 16, 1], [1, "cs", ya, 34, 17, za], [mk, "cs", Zj, 32, 15, mk], [za, "cs", 2, 31, la, 1], [mk, "cs", ci, 30, 13, 1], [ie, "cs", Te, 33, zi, 1], [1, "cs", za, 31, hq, Oq], [1, "cs", 2, 32, Sq, 1], [1, "cs", 0, 31, On, ie], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [Xn, "cs", 0, 25, F, Te], [Te, "cs", 2, 25, 11, Oq], [Xn, "cs", 3, 25, 10, ie], [Xn, "cs", ya, 25, 9, Te], [mk, "cs", H, 25, 8, Xn], [ie, "cs", 2, 26, He, mk], [1, "cs", pq, 27, 8, 1], [1, "cs", 2, 28, He, 1], [Xn, "cs", 2, 29, qk, 1], [1, "cs", xj, 30, 8, Xn], [1, "cs", jk, 26, fk, za], [1, "cs", lr, 27, 9, Te], [Xn, "cs", lr, 26, 10, 1], [1, "cs", 1, 27, vr, mk], [1, "cs", 3, 28, Qk, 1], [1, "cs", 3, 25, Kq, za], [1, "cs", 0, 25, $q, Xn], [Te, "cs", 2, 26, on, 1], [1, "cs", 3, 27, 16, ie], [1, "cs", wj, 28, 17, Xn], [Te, "cs", Oq, 29, Vq, Oq], [1, "cs", xj, 26, 16, Te], [Te, "cs", 2, 25, 16, 1], [za, "cs", 2, 27, 17, Oq], [1, "cs", 2, 26, qa, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, ro, mk], [1, "cs", H, 30, 19, Te], [za, "cs", 2, 29, 19, Oq], [1, "cs", 2, 24, Tn, Te], [Oq, "cs", H, 24, 15, 1], [1, "cs", Zj, 23, 14, ie], [Xn, "cs", pq, 24, te, Xn], [1, "cs", lr, 24, 11, 1], [Xn, "cs", Pn, 24, 12, 1], [Xn, "cs", pq, 24, D, Oq], [1, "cs", Oq, 23, wa, Xn], [1, "cs", Hi, 22, 8, 1], [1, "cs", Hi, 22, oq, 1], [Xn, "cs", 1, 23, Hr, 1], [Oq, "cs", 2, 24, Bi, 1], [Xn, "cs", 2, 24, Qj, ie], [za, "cs", 2, 23, 9, ie], [1, "cs", 2, 22, 9, 1], [1, "cs", H, 22, 10, 1], [za, "cs", lr, 22, nn, 1], [1, "cs", 2, 23, 11, mk], [1, "cs", pq, 23, 12, za], [mk, "cs", lr, 23, hq, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, Ca, 1], [za, "cs", Pn, 21, qk, 1], [1, "cs", 2, 29, 25, Te], [Oq, "cs", 2, 25, 24, 1], [Oq, "cs", 2, 26, 25, 1], [1, "cs", H, 27, 25, ie], [Te, "cs", 0, 28, 25, Oq], [1, "cs", 1, 25, 23, Te], [1, "cs", Pn, 26, 24, 1], [za, "cs", mj, 24, 25, mk], [1, "cs", 3, 23, 24, 1], [1, "cs", I, 24, 24, Te], [mk, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [Xn, "cs", Oq, 26, 26, 1], [Oq, "cs", mk, 29, 26, mk], [za, "cs", H, 23, 26, 1], [mk, "cs", 2, 24, 26, mk], [1, "cs", 2, 25, 26, 1], [1, "cs", xq, 27, 26, za], [mk, "cs", Hj, 28, 26, ie], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, za], [1, "cs", mk, 26, 29, 1], [Oq, "cs", ya, 28, 27, za], [1, "cs", H, 27, 28, 1], [1, "cs", H, 27, 27, 1], [1, "cs", jk, 26, 28, ie], [1, "cs", 2, 26, 27, Te], [za, "cs", 2, 25, 28, Xn], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, ie], [Oq, "cs", 2, 24, 27, Oq], [1, "cs", 0, 24, 28, Te], [Oq, "cs", ya, 25, 32, 1], [1, "cs", Oq, 24, 30, 1], [Xn, "cs", 2, 25, 31, 1], [mk, "cs", Pn, 25, 30, za], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, za], [ie, "cs", 2, 26, 33, 1], [mk, "cs", 0, 26, 34, 1], [Te, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, Xn], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, Oq], [Te, "cs", jk, 24, 32, 1], [1, "cs", pq, 25, 33, 1], [1, "cs", 2, 26, 35, za], [1, "cs", 2, 24, 33, Te], [1, "cs", 2, 25, 34, mk], [1, "cs", ie, 22, 29, Oq], [Xn, "cs", Te, 24, 34, 1], [Oq, "cs", 0, 23, 35, za], [1, "cs", xq, 25, 35, 1], [1, "cs", pq, 24, 35, ie], [1, "cs", 2, 23, 34, mk], [Xn, "cs", 2, 23, 33, 1], [Xn, "cs", wj, 22, 33, mk], [Oq, "cs", ie, 23, 32, 1], [1, "cs", 2, 22, 32, Oq], [za, "cs", xj, 23, 31, Te], [1, "cs", H, 23, 30, 1], [1, "cs", lr, 22, 30, 1], [mk, "cs", H, 22, 31, Oq], [1, "cs", Xn, 21, 31, za], [ie, "cs", 0, 21, 29, mk], [1, "cs", Hj, 21, 30, 1], [mk, "cs", 2, 24, 36, 1], [mk, "cs", 2, 26, 36, za], [1, "cs", jk, 25, 36, Oq], [Oq, "cs", 2, 27, 36, ie], [Te, "cs", 2, 28, 36, 1], [Te, "d", 2, 83, 65, 1], [1, "d", jk, gk, 67, 1], [1, "g", In, eo, 17, ie], [Oq, "s", ya, Ik, 13, 1], [1, "s", wj, 85, 11, mk], [Oq, "f", 0, 41, 102, 1], [Oq, "f", 0, 42, 124, Te], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [Te, "f", 0, 70, 87, 1], [1, "f", In, 27, 96, Te], [Te, "f", 0, 22, 79, 1], [Te, "f", ya, to, 117, Oq], [Te, "f", 0, 30, 137, za], [Xn, "f", Rq, 59, 146, Xn], [Te, "f", Rq, 52, 147, 1], [mk, "f", 0, 20, 149, ie], [Xn, "f", 0, 36, 146, 1], [mk, "f", 0, 62, 124, 1], [Te, "g", 1, 34, 121, Oq], [1, "g", 1, 52, 116, 1], [1, "g", Xn, 78, 116, Oq], [Xn, "g", za, 71, 129, 1], [ie, "s", mj, 53, 100, 1], [1, "s", Hi, 73, 111, Xn], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, mk], [1, "s", In, bn, 102, 1], [1, "s", wj, V, 127, ie], [za, "s", 0, 35, 159, Oq], [1, "s", 0, 65, 54, Oq], [1, "s", mj, 44, 52, Te], [Oq, "s", In, 26, 51, za], [1, "f", ie, 56, 136, Xn], [Te, "f", 1, 41, 133, 1], [1, "f", za, 80, 120, 1], [1, "f", Xn, 16, 117, 1], [ie, "f", Xn, 13, 99, 1], [ie, "f", 1, Ri, 89, 1], [Xn, "f", 1, 90, 98, za], [Te, "f", 1, 84, 95, 1], [Xn, "f", 1, 16, 57, 1], [1, "f", mk, 77, 53, Xn], [Oq, "d", 1, 48, 35, 1], [1, "de", _a, 33, Zn, Hi], [1, "de", 8, 30, fk, 0], [Oq, "de", 9, 32, 30, mj], [Oq, "de", J, 30, 25, 0], [za, "de", Zk, 33, 21, Rq], [ie, "de", 8, 31, 34, 0], [1, "de", Hr, 67, 29, Da], [za, "de", 9, 70, 22, Rq], [mk, "de", Ra, 70, 16, wj], [Xn, "de", gn, 75, 11, 0], [mk, "de", 8, 68, jn, 0], [1, "de", He, 75, 30, 0], [ie, "de", 11, 71, 33, 0], [1, "de", dn, 72, 25, Da], [Te, "de", 11, 64, 25, 0], [1, "de", 11, 52, kk, 0], [1, "de", 11, 31, v, wj], [1, "de", 30, 29, Wa, Hi], [mk, "de", 30, 36, 15, In], [mk, "de", 30, 34, 29, Rq], [Te, "de", 30, 30, 29, wj], [1, "de", 30, 71, 29, 0], [Xn, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, bn, wj], [1, "de", 29, 72, 10, Rq], [Oq, "de", 29, 75, 32, 0], [za, "de", 29, 32, vi, 0], [Oq, "fo", 1, 39, 12, 0], [1, "fo", Xn, 34, 14, 0], [1, "fo", Oq, 74, 28, Da], [Xn, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [Oq, "fo", 2, 77, 22, In], [1, "fo", xj, 74, 21, ya], [Te, "fo", lr, 76, io, Hi], [1, "fo", Oq, 78, 17, 0], [Te, "fo", mk, 28, 19, 0], [ie, "fo", lr, 27, 24, mj], [ie, "fo", Hj, 24, Yo, 0], [1, "fo", jk, 29, 21, ya], [Te, "fo", mk, 27, 32, mj], [1, "fo", 2, 30, 33, 0], [Oq, "fo", Xn, 29, 28, mj], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, wq, 24, ya], [1, "fo", 2, to, 26, 0], [Xn, "fo", xj, 23, 16, Da], [mk, "fo", pq, nn, 25, 0], [ie, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [za, "de", 34, 30, V, Hi], [za, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, In], [1, "de", 36, 72, 23, 0], [Oq, "de", 35, 25, Vq, 0], [Oq, "d", mk, 83, 41, Xn], [Xn, "d", 1, 17, 40, 1], [mk, "cs", 2, 224, 104, 1], [1, "cs", Hi, 224, 105, 1], [1, "cs", yr, 224, 106, Te], [mk, "la", I, 216, 128, ie], [1, "la", 0, 215, 126, Xn], [ie, "s", 0, 216, 130, za], [ie, "s", za, 217, 129, 1], [Te, "s", wj, 218, 128, 1], [ie, "s", ie, 217, 127, za], [1, "s", 0, 217, 126, mk], [1, "s", 1, 217, 125, 1], [1, "s", Da, 216, 124, 1], [1, "s", 1, 215, 124, za], [Te, "s", Da, 214, 124, 1], [za, "s", 1, 213, 125, mk], [1, "s", ya, 213, 126, za], [1, "plm", 2, 217, 130, 0], [za, "plm", 2, 212, 125, 0], [1, "p", wj, 214, 134, ie], [Xn, "s", za, 211, 126, Te], [za, "b", ie, 45, 277, mj], [Te, "b", 1, 50, 286, 0], [1, "b", jk, 51, 284, wj], [1, "b", 1, 47, 287, ya], [Te, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [mk, "b", Rq, 52, 283, Rq], [mk, "b", mk, 51, 280, 0], [1, "g", Rq, 45, 269, 1], [Xn, "p", 0, 55, 281, 1], [Te, "b", za, M, 172, Da], [Te, "b", 2, Ck, 172, 0], [ie, "t", nr, 6, 171, mj], [Oq, "t", ie, 5, 170, Rq], [1, "t", Oq, 5, 164, ya], [mk, "t", 3, U, 164, 0], [Xn, "b", ya, Bq, 165, Zj], [Oq, "t", 3, ta, 165, mj], [1, "b", pq, Na, 166, 0], [Oq, "t", 4, 5, 166, 0], [Oq, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, In], [Xn, "t", 0, va, 169, 0], [1, "t", 4, 6, 170, In], [za, "t", 0, 5, 167, 0], [za, "t", xj, Eq, 169, mj], [1, "b", wj, 5, 168, 0], [1, "s", 1, $k, 153, 1], [Oq, "s", pq, 7, 151, 1], [Xn, "de", Oj, Aq, 152, mj], [1, "t", mk, nr, 154, Da], [1, "b", Zj, ji, 154, In], [za, "t", lr, 6, 155, 0], [Xn, "b", xq, qq, 156, In], [1, "t", 2, 5, 157, 0], [mk, "t", ba, 5, 155, 0], [Xn, "b", In, U, 157, wj], [mk, "t", Xn, z, 156, mj], [1, "t", 5, Bq, 158, Hi], [Oq, "b", 2, U, 159, 0], [1, "b", In, ji, 162, 0], [za, "t", 4, va, 163, Da], [1, "t", 4, Na, 161, Rq], [1, "b", 1, 6, 160, 0], [Te, "b", 2, 5, 163, ya], [Te, "b", Hj, 5, 158, 0], [1, "b", 2, Fk, 161, ya], [za, "t", ie, 5, 162, In], [1, "t", Te, M, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", Hj, 83, 178, In], [Oq, "s", 1, 82, 177, Xn], [Xn, "b", mj, 76, 172, Da], [Te, "b", I, 76, 174, 0], [Oq, "t", fn, 73, 174, ya], [Oq, "t", z, 72, 175, ya], [1, "t", 5, 87, 173, 0], [za, "de", H, 76, 175, 0], [1, "de", ea, 77, 171, ya], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", Te, 70, 174, Te], [mk, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, In], [mk, "r", 50, 174, 0], [1, "r", 49, 174, Da], [za, "r", 52, 175, Da], [Te, "r", 52, 176, Da], [Xn, "r", 51, 176, 0], [1, "r", 50, 176, Zj], [mk, "r", 49, 176, Rq], [1, "r", 48, 175, 0], [1, "r", 47, 175, ya], [Xn, "r", 48, 176, Rq], [1, "r", 69, 163, Rq], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [ie, "r", 73, 163, 0], [Xn, "r", 72, 163, 0], [Oq, "r", 73, 164, ya], [Te, "r", 72, 164, 0], [za, "r", 71, 164, mj], [1, "r", 70, 164, Da], [Te, "r", 69, 164, 0], [1, "r", 68, 164, ya], [1, "r", 68, 165, mj], [Oq, "r", 69, 165, Hi], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [Oq, "r", 74, 164, ya], [1, "r", 73, 165, mj], [ie, "r", 72, 166, Rq], [Te, "r", 71, 166, Rq], [mk, "r", 70, 166, 0], [ie, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, Rq], [Xn, "r", 26, 165, mj], [Oq, "r", 27, 165, Da], [mk, "r", 25, 165, wj], [1, "r", 24, 165, 0], [ie, "r", 23, 165, In], [1, "r", 22, 165, 0], [ie, "r", 21, 165, 0], [Xn, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [mk, "r", 24, 166, wj], [1, "r", 25, 166, Da], [1, "r", 26, 166, ya], [1, "r", 27, 166, In], [za, "r", 28, 166, wj], [Te, "r", 28, 167, 0], [1, "r", 26, 167, wj], [za, "r", 25, 167, ya], [1, "r", 24, 167, mj], [Te, "r", 23, 167, 0], [1, "r", 22, 167, 0], [mk, "r", 27, 167, mj], [ie, "r", 29, 166, Da], [za, "r", 29, 167, Rq], [1, "r", 28, 168, Zj], [ie, "r", 27, 168, 0], [za, "r", 26, 168, Hi], [1, "r", 25, 168, wj], [1, "r", 24, 168, mj], [1, "r", 23, 168, 0], [1, "r", 27, 169, Hi], [za, "r", 26, 169, 0], [za, "r", 25, 169, Zj], [Te, "r", 24, 169, Da], [Xn, "r", 23, 169, ya], [1, "r", 22, 168, wj], [Oq, "r", 21, 167, Rq], [1, "s", 1, 52, 174, 1], [1, "t", ci, 50, 177, Rq], [ie, "t", 4, 49, 177, Hi], [ie, "b", 0, 47, 174, 0], [Te, "b", 0, 69, 166, 0], [Te, "t", 2, 68, 166, 0], [1, "t", q, 74, 163, 0], [Oq, "t", Te, 73, 162, Rq], [1, "s", Da, 73, 166, 1], [Oq, "s", Pn, 76, 165, mk], [Oq, "g", 2, 59, 175, Xn], [mk, "p", Hi, 78, 168, 1], [1, "p", ya, 61, 162, Oq], [za, "p", Rq, 42, 170, Xn], [1, "p", Rq, 20, 174, 1], [Xn, "p", In, 16, 160, 1], [1, "b", 1, 23, 164, 0], [Oq, "b", Oq, 28, 169, 0], [ie, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, wj], [1, "t", 1, 15, 171, Da], [za, "t", nr, Zn, 175, ya], [1, "t", 5, Dq, 166, Zj], [ie, "t", q, 26, 163, Rq], [ie, "s", 1, 29, 165, 1], [Xn, "t", 5, pk, 167, Da], [1, "t", In, 29, 176, mj], [1, "b", Pn, 30, 175, 0], [1, "t", 2, 24, 177, 0], [Xn, "b", ie, 37, 174, 0], [1, "b", ya, 35, 172, 0], [1, "b", nq, 37, 170, Rq], [ie, "t", ba, 38, 169, 0], [za, "t", 4, 34, 173, 0], [Xn, "t", M, 38, 175, 0], [Oq, "b", 2, 39, 173, ya], [za, "t", 3, 37, 176, 0], [Xn, "t", Fr, 30, 168, 0], [ie, "s", jk, 35, 176, za], [Xn, "s", 1, 41, 175, ie], [ie, "b", pq, 53, 176, ya], [1, "t", Fk, 55, 173, 0], [ie, "t", Eq, 45, 170, 0], [Oq, "b", 1, 53, 162, Da], [1, "b", In, 50, 164, Da], [1, "t", 2, 54, 163, Rq], [ie, "t", 3, 49, 165, In], [Xn, "t", 4, 48, 160, Zj], [1, "t", $i, 57, 164, wj], [1, "t", ba, 66, 162, Zj], [Oq, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, In], [mk, "t", 3, 85, 162, 0], [Te, "t", ta, 81, 162, Hi], [mk, "t", kq, 88, 163, 0], [ie, "t", ie, 84, 166, In], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, Zj], [1, "s", 1, 57, 162, Te], [Te, "b", mk, 39, 161, Zj], [za, "b", Hi, 34, 164, ya], [Oq, "b", jk, 54, 164, 0], [mk, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, Zj], [ie, "t", Vn, 63, 169, 0], [1, "t", Gi, 63, 174, 0], [mk, "t", Xn, 62, 175, 0], [mk, "t", Fk, 40, 162, 0], [Xn, "t", 1, 63, 180, Rq], [Oq, "t", 2, 64, 179, Da], [1, "t", H, 35, 165, 0], [1, "s", 1, 63, 173, ie], [1, "s", 2, 40, 165, 1], [1, "b", In, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, wj], [Xn, "de", 22, 83, 175, wj], [Oq, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, wj], [Oq, "de", 19, 68, 168, 0], [Xn, "de", bq, 65, 163, 0], [1, "de", bq, 75, 162, 0], [1, "de", bn, 80, 162, 0], [1, "de", Dq, 88, 159, mj], [Te, "de", 19, 87, 164, Da], [1, "de", Be, 61, 177, 0], [1, "de", 19, 59, 172, 0], [ie, "de", 19, 59, 167, 0], [Xn, "de", b, 53, 165, 0], [1, "de", b, 56, 163, Rq], [ie, "de", 19, 51, 161, Zj], [1, "de", bn, 48, 167, 0], [1, "de", Be, 47, 170, wj], [Oq, "de", bn, 41, 163, In], [mk, "de", ha, 37, 161, Hi], [Xn, "de", 19, 36, 166, 0], [1, "de", b, 36, 171, mj], [1, "de", 19, 34, 174, Hi], [za, "de", Jj, 40, 172, mj], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, wj], [Oq, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [ie, "de", 19, 64, 181, Hi], [ie, "de", Dk, 64, 175, Hi], [Te, "de", Dk, 79, 172, Zj], [1, "de", 19, 30, 170, 0], [1, "de", Dk, 17, 168, 0], [za, "de", b, Wa, 173, 0], [1, "de", Dk, F, 162, 0], [1, "de", Dq, $o, 167, 0], [mk, "de", bq, qi, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", bq, 83, 195, wj], [1, "de", 2, 85, 163, 0], [1, "de", xj, 80, 164, mj], [Te, "de", Hj, 84, 169, wj], [1, "de", 2, 55, 165, 0], [mk, "de", ci, 46, 163, 0], [za, "de", 2, 66, 169, In], [za, "de", wj, 63, 175, Rq], [1, "de", ya, 34, 164, Zj], [za, "de", 0, ro, 160, Da], [1, "de", 2, 40, 160, Rq], [1, "de", 2, 53, 160, In], [1, "de", xq, 14, 170, ya], [ie, "de", H, Dk, 175, 0], [1, "de", 2, 23, 176, In], [mk, "de", 5, 60, 147, wj], [Oq, "de", 33, 59, 160, Hi], [Xn, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [ie, "de", 33, 62, 140, mj], [1, "de", 33, 43, 127, 0], [Te, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [Te, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", Te, 44, 156, 0], [1, "t", Hj, 45, 157, 0], [ie, "b", 0, 75, 156, Rq], [1, "t", nq, 76, 157, Rq], [1, "t", 5, 62, 157, 0], [Oq, "t", z, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, ya], [Oq, "t", Hj, 27, 157, mj], [1, "t", 4, 21, 156, 0], [mk, "t", 4, 56, 159, In], [Xn, "f", 1, 94, 153, 1], [za, "f", 2, 93, 153, 1], [1, "f", H, 99, 153, Te], [ie, "f", 1, 98, 153, Oq], [mk, "f", mj, 97, 153, 1], [1, "f", Te, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, Hi], [Oq, "b", 3, 43, 281, 0], [Te, "de", 50, 24, 39, mj], [1, "de", 50, 21, 39, wj], [mk, "de", 50, 22, 43, 0], [ie, "de", 50, Ga, 34, ya], [1, "de", 50, 18, 26, Hi], [za, "de", 50, 44, 42, mj], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, Rq], [za, "de", 50, 77, 44, Zj], [ie, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [ie, "de", 50, 20, 41, 0], [1, "de", 50, hr, 21, ya], [mk, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, Da], [ie, "de", 50, 17, 17, 0], [Te, "de", 50, 18, vr, Rq], [mk, "de", 50, hr, 9, 0], [mk, "de", 50, 52, 41, ya], [1, "de", 50, 82, 39, Da], [1, "de", 50, 86, 38, Da], [Xn, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [Oq, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, Hi], [za, "de", 50, 86, Pq, 0], [1, "de", 50, 29, 42, Hi], [Oq, "de", $o, 74, 37, wj], [Oq, "de", 9, 76, 22, 0], [Te, "de", Bo, 79, 24, wj], [1, "de", ra, 77, Un, Hi], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [Te, "de", 36, 21, 36, 0], [Oq, "de", 28, 23, 22, wj], [1, "de", 28, 27, 31, 0], [za, "de", 28, 69, 36, 0], [mk, "de", 28, 80, 20, 0], [za, "de", 51, 24, 155, Hi], [Xn, "de", 51, ia, 154, In], [1, "de", 51, Jq, 154, 0], [1, "de", 51, gr, 156, Rq], [1, "de", 51, 16, 154, Hi], [1, "de", 51, wq, 154, 0], [1, "de", 51, 23, 154, 0], [ie, "de", 51, Pj, 157, wj], [Xn, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, mj], [1, "de", 51, 86, 154, In], [1, "de", 51, 88, 156, mj], [1, "de", 51, 82, 154, 0], [mk, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [Oq, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [ie, "de", 51, 67, 154, 0], [Oq, "de", 51, 60, 154, wj], [mk, "de", 51, 57, 154, wj], [1, "de", 51, 65, 154, Rq], [Oq, "de", 51, 68, 156, 0], [za, "de", 51, 59, 156, 0], [Xn, "de", 51, 55, 154, Da], [za, "de", 51, 54, 154, 0], [za, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, ya], [Te, "de", 51, 49, 154, wj], [Xn, "de", 51, 46, 154, Da], [za, "de", 51, 44, 154, 0], [ie, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, Da], [1, "de", 51, 38, 154, Zj], [1, "de", 51, 39, 156, Da], [1, "de", 51, 34, 154, 0], [1, "de", 5, ha, 142, Da], [1, "de", 5, 37, 147, ya], [Te, "de", Ni, 53, 147, 0], [1, "de", 6, 69, 150, 0], [mk, "de", $i, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", nj, 28, 137, Rq], [Te, "de", 4, 15, 137, Da], [mk, "de", $i, 48, 134, 0], [1, "de", 5, 67, 135, 0], [Te, "de", 34, 84, 155, 0], [Te, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, wj], [Xn, "de", 35, 56, 157, Hi], [Oq, "de", 35, 65, 159, Da], [ie, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, Zj], [Xn, "de", 35, 8, 155, 0], [1, "de", 33, ja, 155, 0], [ie, "de", 33, 33, 158, 0], [za, "de", 36, 78, 155, ya], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, Hi], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [Te, "fo", 2, 45, 36, Zj], [ie, "fo", lr, 53, 34, 0], [Oq, "fo", ie, 51, 35, wj], [1, "fo", 1, 58, 35, 0], [1, "fo", mk, 33, 35, Da], [1, "fo", Oq, 31, 33, wj], [1, "fo", 2, 29, 36, Zj], [za, "fo", xj, 56, 36, 0], [ie, "fo", 2, 60, 37, 0], [mk, "fo", 2, 45, 32, 0], [1, "fo", Hj, 22, 25, Da], [1, "fo", 2, 21, 35, wj], [1, "de", 52, 90, 208, 0], [ie, "de", W, 94, 250, wj], [1, "de", Ri, 95, 253, Rq], [1, "cs", 0, 140, Fk, 1], [1, "cs", Pn, 139, Oj, Te], [za, "cs", pq, 138, 5, 1], [1, "cs", 2, 138, 6, za], [1, "cs", pq, 139, 6, Xn], [1, "cs", xq, 141, nk, 1], [mk, "cs", 2, 140, U, za], [1, "la", 3, 143, 7, Xn], [1, "la", 3, 139, wk, Xn], [1, "cs", Hi, 137, 7, 1], [1, "cs", 1, 138, 8, Xn], [za, "cs", xj, 137, 6, za], [ie, "cs", 2, 137, br, Oq], [1, "cs", 2, 136, 7, Xn], [1, "cs", lr, 138, 9, mk], [Te, "cs", fn, 139, Ca, 1], [za, "cs", 3, 136, Hr, ie], [Te, "cs", nq, 137, 9, ie], [Te, "de", 53, 92, 165, Hi], [Oq, "de", 53, 92, 180, ya], [1, "de", 53, 92, 188, 0], [za, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [Xn, "de", 54, 90, 153, ya], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, Da], [Te, "de", 54, 87, 153, wj], [1, "de", 54, 86, 153, 0], [ie, "de", 54, 85, 153, mj], [Oq, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, Rq], [1, "de", 54, 82, 153, Da], [Oq, "de", 54, 81, 153, mj], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, mj], [1, "de", 54, 78, 153, ya], [Oq, "de", 54, 77, 153, Zj], [Xn, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [za, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [za, "de", 54, 72, 153, Rq], [za, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, Zj], [Xn, "de", 54, 68, 153, In], [mk, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, Da], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, Hi], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, mj], [1, "de", 54, 62, 153, 0], [za, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, wj], [Oq, "de", 54, 57, 153, In], [Oq, "de", 54, 58, 153, 0], [Xn, "de", 54, 56, 153, ya], [za, "de", 54, 55, 153, Da], [Te, "de", 54, 54, 153, 0], [mk, "de", 54, 53, 153, Da], [mk, "de", 54, 52, 153, Zj], [Te, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, Rq], [1, "de", 54, 49, 153, 0], [ie, "de", 54, 48, 153, 0], [Oq, "de", 54, 47, 153, 0], [za, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, Hi], [Te, "de", 54, 44, 153, In], [ie, "de", 54, 43, 153, 0], [mk, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, mj], [Xn, "de", 54, 40, 153, wj], [1, "de", 54, 39, 153, 0], [ie, "de", 54, 37, 153, Rq], [1, "de", 54, 38, 153, In], [Oq, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, ya], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, Da], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [mk, "de", 54, 30, 153, In], [Te, "de", 54, 29, 153, Zj], [Xn, "de", 54, 28, 153, mj], [za, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [Oq, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, In], [za, "de", 54, 21, 153, mj], [Te, "de", 54, 20, 153, Da], [1, "de", 54, Dk, 153, 0], [1, "de", 54, io, 153, 0], [1, "de", 54, 17, 153, Rq], [1, "de", 54, 16, 153, Da], [1, "de", 54, _o, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, hq, 153, 0], [1, "de", 54, 12, 153, In], [za, "de", 54, ke, 153, 0], [Oq, "de", 54, jn, 153, 0], [mk, "de", 54, 8, 153, Da], [1, "de", 54, 9, 153, 0], [za, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [mk, "de", 55, 83, 10, ya], [Oq, "de", 55, 83, 11, Hi], [1, "de", 55, 83, 12, 0], [Xn, "de", 55, 83, 13, 0], [1, "de", 55, 83, Mi, 0], [1, "de", 55, 83, 15, mj], [za, "de", 55, 83, p, 0], [Xn, "de", 55, 83, 17, mj], [Oq, "de", 55, 83, so, 0], [1, "de", 55, 83, 18, 0], [ie, "de", 55, 83, 20, 0], [Oq, "de", 55, 83, 21, 0], [Te, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [za, "de", 55, 83, 24, Da], [Te, "de", 55, 83, 25, Hi], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, wj], [1, "de", 55, 83, 28, Rq], [1, "de", 55, 83, 29, Rq], [Oq, "de", 55, 83, 30, wj], [1, "de", 55, 83, 31, Zj], [mk, "de", 55, 83, 32, 0], [Te, "de", 55, 83, 33, mj], [1, "de", 55, 83, 34, wj], [mk, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, mj], [1, "de", 55, 83, 37, wj], [mk, "de", 55, 83, 38, wj], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, In], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, In], [Oq, "de", 55, 77, 38, 0], [Oq, "de", 55, 76, 38, 0], [Oq, "de", 55, 75, 38, 0], [Xn, "de", 55, 73, 38, Zj], [za, "de", 55, 74, 38, 0], [ie, "de", 55, 72, 38, Da], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, wj], [mk, "de", 55, 69, 38, wj], [1, "de", 55, 67, 38, Rq], [1, "de", 55, 66, 38, In], [Xn, "de", 55, 65, 38, 0], [Oq, "de", 55, 64, 38, Rq], [1, "de", 55, 63, 38, Hi], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [ie, "de", 55, 61, 38, Da], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, Rq], [Xn, "de", 55, 58, 38, 0], [ie, "de", 55, 56, 38, wj], [za, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, Zj], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [Xn, "de", 55, 49, 38, ya], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, Da], [mk, "de", 55, 46, 38, 0], [Oq, "de", 55, 45, 38, 0], [Te, "de", 55, 44, 38, 0], [za, "de", 55, 43, 38, Rq], [Xn, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, In], [1, "de", 55, 39, 38, 0], [za, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, Da], [Te, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, wj], [za, "de", 55, 35, 38, Zj], [1, "de", 55, 33, 38, ya], [Xn, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [za, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [Oq, "de", 55, 28, 38, 0], [mk, "de", 55, 27, 38, mj], [Xn, "de", 55, 26, 38, Da], [ie, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, Zj], [1, "de", 55, 23, 38, In], [1, "de", 55, 21, 38, Da], [za, "de", 55, 22, 38, Hi], [1, "de", 55, 20, 38, 0], [za, "de", 55, Be, 38, 0], [1, "de", 55, ha, 37, Da], [1, "de", 55, bn, 36, Rq], [ie, "de", 55, Dq, 35, mj], [ie, "de", 55, 19, 34, 0], [1, "de", 55, b, 33, 0], [za, "de", 55, 19, 32, ya], [Te, "de", 55, ha, 31, 0], [1, "de", 55, 19, 30, 0], [za, "de", 55, so, 28, Hi], [1, "de", 55, Be, 29, 0], [za, "de", 55, 19, 27, ya], [1, "de", 55, 19, 26, 0], [Xn, "de", 55, 19, 25, 0], [mk, "de", 55, bq, 24, Hi], [Te, "de", 55, Jj, 23, Hi], [1, "de", 55, Jj, 22, wj], [mk, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, b, 18, 0], [1, "de", 55, b, Dk, 0], [mk, "de", 55, 19, 16, mj], [ie, "de", 55, Dk, 17, Hi], [1, "de", 55, ha, Ga, 0], [mk, "de", 55, 19, 14, In], [ie, "de", 55, 19, 13, Zj], [1, "de", 55, Dk, F, wj], [1, "de", 55, 19, yq, ya], [1, "de", 55, so, wa, In], [1, "de", 55, bq, 9, mj], [1, "de", 55, 19, On, 0], [Te, "de", 55, 84, 35, Zj], [ie, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [za, "de", 50, 84, 24, 0], [mk, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, Hi], [Xn, "de", 55, 84, G, 0], [1, "de", 50, 84, 15, In], [1, "de", 55, 84, 8, Rq], [Xn, "de", 55, 84, Lo, 0], [1, "de", 50, 85, d, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, Rq], [1, "de", 55, 72, 39, Rq], [1, "de", 55, 74, 39, 0], [ie, "de", 55, 66, 39, Zj], [1, "de", 55, 65, 39, 0], [ie, "de", 50, 67, 41, In], [Te, "de", 55, 56, 39, mj], [Te, "de", 55, 58, 39, Da], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, mj], [1, "de", 55, 42, 39, Rq], [Te, "de", 50, 43, 39, wj], [1, "de", 50, 41, 39, wj], [ie, "de", 50, 37, 39, 0], [Xn, "de", 55, 36, 39, Rq], [Te, "de", 55, 32, 39, wj], [Oq, "de", 50, 31, 39, mj], [ie, "de", 55, 23, 39, 0], [Te, "de", 55, 18, 37, mj], [1, "de", 50, 18, 36, wj], [Te, "de", 55, hr, 35, Zj], [1, "de", 50, V, 34, mj], [mk, "de", 55, 18, 31, 0], [Xn, "de", 50, hr, 30, Rq], [1, "de", 55, W, 25, 0], [mk, "de", 50, hr, 24, Hi], [1, "de", 55, Pj, qr, 0], [1, "de", 55, 18, Sq, Zj], [1, "de", 50, V, Ga, wj], [Oq, "de", 55, 18, _a, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, wj], [ie, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, mj], [Te, "de", 54, 76, 154, 0], [za, "de", 54, 70, 154, Da], [Xn, "de", 54, 66, 154, mj], [za, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [ie, "de", 54, 53, 154, 0], [mk, "de", 54, 45, 154, 0], [mk, "de", 54, 42, 154, Hi], [za, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [Oq, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [mk, "de", 54, kk, 154, wj], [1, "de", 54, qk, 154, Hi], [ie, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [Xn, "de", 53, 93, 156, Zj], [1, "de", 53, 93, 158, 0], [za, "de", 52, 91, 157, Da], [1, "de", 53, 93, 159, Hi], [Xn, "de", 53, 93, 161, 0], [Oq, "de", 53, 93, 162, 0], [Xn, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, Hi], [1, "de", 53, 93, 165, 0], [Xn, "de", 53, 93, 166, 0], [mk, "de", 53, 93, 167, 0], [Oq, "de", 52, 91, 167, Hi], [1, "de", 53, 93, 169, 0], [ie, "de", 53, 93, 168, 0], [Te, "de", 53, 93, 170, Da], [1, "de", 53, 93, 171, In], [1, "de", 53, 93, 173, wj], [Oq, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, Hi], [1, "de", 53, 92, 169, wj], [mk, "de", 53, 93, 178, Da], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, Zj], [1, "de", 53, 93, 181, wj], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, ya], [1, "de", 53, 93, 186, 0], [1, "de", hr, 95, 185, ya], [1, "de", 53, 93, 187, mj], [Te, "de", 53, 93, 188, mj], [1, "de", 52, 91, 186, Da], [1, "de", 53, 93, 190, ya], [1, "de", 53, 93, 192, Hi], [1, "de", 53, 93, 195, Da], [1, "de", 53, 93, 194, Hi], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, wj], [1, "de", 53, 93, 198, Hi], [Oq, "de", 53, 93, 201, ya], [Te, "de", 53, 93, 202, ya], [mk, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, wj], [ie, "de", 53, 93, 206, 0], [mk, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, wj], [za, "de", 53, 93, 209, 0], [ie, "de", 53, 93, 210, Rq], [Xn, "de", 53, 93, 212, 0], [ie, "de", 52, 91, 204, wj], [ie, "de", 53, 93, 213, Rq], [Te, "de", 53, 93, 214, In], [1, "de", 53, 93, 215, 0], [mk, "de", 53, 93, 216, Rq], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [Te, "de", 53, 93, 219, 0], [Oq, "de", 53, 93, 220, In], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, wj], [mk, "de", 52, 92, 202, 0], [ie, "de", 53, 92, 201, mj], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [mk, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, In], [za, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, Zj], [za, "de", 53, 93, 228, Da], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, Rq], [1, "de", 52, 92, 221, 0], [Oq, "de", 52, 92, 225, 0], [Xn, "de", 52, 93, 226, Da], [1, "de", 52, 93, 224, Da], [1, "de", 52, 93, 208, In], [za, "de", 52, 93, 211, 0], [Oq, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, In], [Oq, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, In], [mk, "de", 52, 93, 193, Hi], [1, "de", 52, 93, 182, Hi], [ie, "de", 52, 93, 185, In], [za, "de", 52, 93, 172, Zj], [1, "de", 52, 93, 174, 0], [Xn, "de", 52, 93, 177, Rq], [za, "de", 52, 93, 155, ya], [mk, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [Te, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [Te, "de", 53, 93, 231, Zj], [Oq, "de", 53, 93, 232, Hi], [1, "de", 53, 93, 234, Da], [Xn, "de", 52, 93, 230, 0], [Oq, "de", 52, 92, 228, Da], [mk, "de", 53, 93, 235, Hi], [1, "de", 53, 93, 236, Da], [ie, "de", 53, 93, 237, 0], [za, "de", 53, 93, 239, 0], [Oq, "de", 53, 93, 240, Da], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [Te, "de", 52, 93, 242, Zj], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, ya], [Xn, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, wj], [1, "de", 53, 93, 248, 0], [mk, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [ie, "de", 53, 93, 251, wj], [1, "de", 53, 93, 252, Da], [1, "de", 53, 93, 254, wj], [1, "de", 52, 93, 253, ya], [Xn, "de", 52, 93, zn, 0], [za, "de", 53, 93, 257, mj], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [Te, "de", 53, 93, 259, Da], [Te, "de", 52, 93, 260, Zj], [mk, "de", 53, 93, 263, Zj], [mk, "de", 53, 93, 264, Zj], [1, "de", 53, 93, 265, Hi], [Te, "de", 52, 93, 266, Zj], [ie, "de", 53, 93, 267, Da], [Oq, "de", 52, 93, 268, 0], [mk, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [za, "de", 53, 93, 277, wj], [Te, "de", 52, 93, 278, Da], [1, "de", 53, 93, 279, 0], [za, "de", 52, 93, 280, Da], [1, "de", 52, 93, 283, 0], [Xn, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, ya], [Xn, "de", 53, 93, 286, ya], [Te, "de", 52, 93, 287, 0], [Oq, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [Oq, "de", 52, 93, 290, Rq], [1, "de", 52, 93, 291, Hi], [1, "de", 53, 93, 292, 0], [ie, "de", 52, 93, 293, Da], [1, "de", 53, 93, 294, mj], [mk, "de", 52, 93, 295, Hi], [1, "de", 52, 93, 296, 0], [Oq, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, Rq], [za, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, Zj], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, Da], [za, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, ie], [za, "cs", pq, 223, 105, 1], [mk, "cs", Pn, 223, 102, za], [Xn, "cs", pq, 223, 103, 1], [1, "la", qo, 141, 8, 1], [1, "cs", 2, 140, Lo, 1], [mk, "la", Fr, 142, Qk, 1], [mk, "de", Pe, 81, 149, ya], [za, "f", In, 83, 148, 1], [za, "f", 1, 82, 149, ie], [Te, "de", 34, 81, 156, 0], [mk, "de", 51, 17, 9, In], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, fk, 0], [Te, "cs", nq, 223, 106, 1], [Te, "p", 0, 119, 279, ie], [mk, "p", mj, 109, 242, za], [1, "cs", 1, 29, 9, za], [1, "cs", 2, 30, 9, mk], [Te, "cs", 2, 31, 9, 1], [mk, "cs", jk, 32, pn, mk], [mk, "cs", Pn, 33, 9, za], [1, "cs", lr, 69, 9, 1], [ie, "cs", 2, 71, 9, mk], [1, "cs", 2, 70, w, za], [ie, "cs", ie, 72, 9, Xn], [1, "cs", Pn, 73, Qk, za], [Oq, "de", gn, 31, 10, Rq], [1, "de", te, 29, Ra, ya], [Te, "de", 10, 44, 10, Zj], [mk, "de", 4, 87, 10, 0], [1, "de", 4, 86, sk, 0], [1, "de", 5, 87, 9, Da], [1, "de", z, hq, Ra, Hi], [1, "de", Mq, la, Jq, 0], [1, "de", Pe, 16, 10, 0], [za, "de", 4, m, 10, mj], [Oq, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, se, 1], [Oq, "cs", lr, 150, 9, Te], [1, "cs", Pn, 153, 9, mk], [mk, "cs", H, 155, 9, Xn], [1, "cs", mk, 149, Qk, mk], [1, "cs", 1, 154, rr, Te], [1, "cs", Hk, 147, Qj, za], [1, "cs", 3, 151, rr, 1], [mk, "cs", 3, 152, pn, mk], [1, "cs", qo, 156, 9, 1], [Oq, "cs", yr, 157, 9, Te], [1, "cs", I, 158, $o, 1], [1, "cs", 3, 159, $o, ie], [Te, "cs", 3, 160, se, Te], [Oq, "cs", wj, 161, 9, 1], [ie, "cs", 2, 162, Lo, 1], [1, "cs", 2, 163, 9, Te], [1, "cs", 1, 164, $o, 1], [Xn, "cs", 2, 165, 9, Oq], [1, "cs", 3, 166, $o, 1], [Te, "cs", 3, 168, 9, 1], [za, "cs", 3, 170, 9, Xn], [ie, "cs", ie, 169, pn, 1], [1, "cs", lr, 167, pn, mk], [mk, "cs", lr, 171, 9, 1], [Xn, "cs", Hj, 173, pn, 1], [1, "cs", 2, 172, 9, Te], [1, "cs", 2, 174, Qk, 1], [1, "cs", Xn, 175, R, za], [1, "cs", qo, 176, pn, Te], [Oq, "cs", 3, 178, R, mk], [1, "cs", 3, 179, se, 1], [Oq, "cs", 0, 180, 9, za], [za, "cs", pq, 177, se, 1], [1, "cs", Pn, 182, Qj, Te], [1, "cs", lr, 181, 9, 1], [mk, "cs", 2, 183, se, 1], [mk, "cs", jk, 184, Qk, 1], [1, "cs", 2, 185, 9, Xn], [mk, "cs", 2, 186, 9, Oq], [za, "cs", 1, 187, 9, Oq], [Oq, "cs", 2, 188, Lo, 1], [za, "cs", I, 189, fk, za], [1, "cs", yr, 190, Qk, mk], [ie, "cs", Hk, 191, 9, 1], [Xn, "cs", lr, 192, Qj, 1], [Xn, "cs", Hi, 193, 9, Oq], [1, "cs", H, 194, Qj, 1], [za, "cs", pq, 196, Qk, ie], [Te, "cs", 2, 198, 9, Oq], [ie, "cs", Pn, 200, 9, 1], [ie, "cs", qo, 195, 9, 1], [1, "cs", yr, 197, 9, Te], [1, "cs", nq, 199, 9, za], [1, "cs", 0, 201, R, Oq], [1, "cs", 2, 202, Ca, ie], [1, "cs", H, 203, fk, za], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, $o, 1], [1, "cs", 3, 206, R, 1], [1, "cs", yr, 205, Qk, 1], [1, "cs", 3, 204, rr, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", qo, 215, 9, Xn], [Xn, "cs", 3, 216, 9, Xn], [Te, "cs", 3, 217, R, 1], [1, "cs", 3, 218, Qk, 1], [mk, "b", Da, z, 159, 0], [za, "b", Hi, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [xq, "isl", 2, 119, 277, 0], [pq, "isl", xj, 109, 244, Hi], [lr, "isl", 2, 114, 205, wj], [jk, "isl", za, 120, 150, 0], [xq, "isl", 2, 154, 129, Rq], [xq, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, Rq], [2, "isl", 1, 214, 128, 0], [2, "isl", Oq, 209, 132, 0], [Xn, "la", I, 217, hn, 1], [1, "la", 1, 215, 19, ie], [1, "la", mj, 212, 18, 1], [1, "la", Pe, 214, 18, Oq], [mk, "la", nj, 216, 19, 1], [mk, "la", ba, 211, 20, za], [Oq, "la", 3, 210, Be, 1], [mk, "la", fn, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", fn, 214, 22, Oq], [Te, "la", fn, 214, 24, Xn], [1, "la", 4, 214, 26, 1], [Oq, "la", 4, 213, 27, 1], [Te, "la", 1, 212, 28, 1], [Te, "la", 2, 212, 29, Xn], [1, "la", Fk, 212, 30, za], [za, "la", 4, 208, 19, 1], [za, "la", 4, 207, 19, Te], [1, "la", 1, 206, Be, Xn], [1, "la", 1, 205, 19, mk], [1, "la", 2, 204, bq, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, tr, 1]];
  const Lr = mj;
  var Nr = 0;
  const Qr = z;
  const Rr = Ni;
  const Tr = ea;
  const Ur = Nk;
  const Vr = br;
  const Wr = Wa;
  var Xr = {
    ᐃᐃΔΔⵠ: ["#133A2B", "#042b30"],
    ⲆⲆᐃΔΔΔⲆⵠⲆ: ["#EBF2F0", "#136167"],
    ⲆᐃΔΔⲆΔⲆ: ["#4EB687", "#187484"],
    ΔⵠΔⲆᐃΔⵠ: ["#664516", "#13474C"],
    ᐃⲆᐃⵠⵠΔⲆ: ["#FCEFBB", "#0F4D48"],
    ⵠⵠⵠⲆⲆΔΔ: ["#C1AA7E", "#0F423D"],
    ᐃⲆⵠⲆⵠⲆⵠ: ["#594837", "#163A3A"],
    ᐃⲆⵠⲆᐃⲆΔ: ["#A5D6D6", "#539CA0"],
    ᐃⵠΔⲆⲆ: ["#0B6A84", "#09373F"],
    ⵠᐃⲆΔⲆᐃᐃ: ["#2A8B9B", "#0F464C"],
    ⵠᐃⵠⲆᐃⵠⲆ: ["#A9D6D3", "#115E60"],
    ⵠᐃΔⵠᐃᐃⵠ: ["#ECF7F9", "#539CA0"],
    ᐃⵠΔⲆⲆᐃΔ: ["#FFF", "#FFF"],
    ΔΔΔΔΔΔᐃ: ["#FFF", "#FFF"],
    ΔᐃⲆⲆΔⲆⵠ: ["#1C9BA4", "#00272F"],
    ΔᐃΔΔⲆ: ["#2D2017", "#031C1E"],
    ⲆᐃΔ: 0,
    ΔⲆⵠ: ie,
    ᐃⵠⲆⲆΔⵠⲆᐃⲆ: 2300,
    ⵠΔⵠⵠΔⵠΔⲆⲆ: 2290,
    ⵠⵠᐃⲆⵠⵠᐃ: 34,
    ⵠᐃⵠⵠΔᐃⲆ: M,
    ᐃⲆⵠᐃⲆᐃⵠ: 68,
    ΔⵠΔⲆⵠᐃⵠ: 34,
    ᐃᐃⲆⲆⵠᐃΔ: 5,
    ⲆⵠⲆΔⵠΔᐃ: za,
    ⵠΔᐃᐃΔⵠᐃ: 0.6,
    ⵠⵠΔⲆΔᐃⵠ: 0.25,
    ⲆᐃⲆⵠⲆⵠⵠ: 50,
    ⲆᐃᐃᐃⲆⲆⵠ: 10,
    ⵠⵠᐃⲆⲆⵠⵠ: 75,
    ᐃΔᐃᐃᐃⵠᐃ: 20,
    ⲆⵠᐃᐃᐃⲆᐃ: 5,
    ᐃᐃⲆΔⲆ: 0,
    ⲆⵠⵠⲆⲆ: 1,
    ⵠⵠΔⵠΔ: 2,
    ⵠᐃⲆΔΔ: 3,
    ᐃⲆⵠΔⲆ: 4,
    ⵠΔΔΔΔ: 5,
    ᐃΔⲆᐃΔ: 6,
    ΔᐃΔΔΔ: 7,
    ⲆΔⲆⲆⵠ: 8,
    ⵠΔᐃᐃⵠ: 9,
    ᐃⲆᐃⲆᐃ: 10,
    ᐃⵠⵠⵠΔ: 11,
    ᐃᐃΔⲆⲆ: 12,
    ⵠΔᐃⵠᐃ: 13,
    ⵠᐃᐃⵠΔ: 14,
    ᐃᐃᐃᐃⲆ: 15,
    ⲆⲆΔᐃᐃ: 16,
    ΔⲆᐃΔⵠ: 17,
    Ⲇᐃᐃᐃᐃ: 18,
    ⵠⵠΔΔⵠ: 19,
    Δⵠⵠⵠᐃ: 20,
    ᐃΔᐃⲆⲆ: 21,
    ⲆΔᐃΔᐃ: 22,
    ⲆᐃᐃΔᐃ: 23,
    ⵠᐃᐃΔᐃ: 24,
    Δᐃᐃⵠᐃ: 25,
    ΔᐃΔⲆⲆ: 26,
    ᐃⲆⲆⵠᐃ: 27,
    ᐃⵠΔΔⲆ: 28,
    ⵠⲆᐃᐃ: 29,
    ΔⲆᐃⵠΔ: 30,
    ΔⲆⲆⵠⲆ: 31,
    ⲆⵠΔⵠΔ: 32,
    ᐃΔⵠⲆᐃ: 33,
    ᐃΔⲆⵠΔ: 34,
    ⲆᐃΔⲆΔ: 35,
    ⲆⲆⵠⲆⲆ: 36,
    ⵠΔΔΔⵠ: 37,
    ᐃⵠⵠⵠᐃ: 38,
    ᐃⵠⲆⵠΔ: 39,
    ᐃⲆⲆΔΔ: 40,
    ᐃᐃⵠⲆⲆ: 41,
    ΔⲆΔⲆⲆ: 42,
    ⵠⲆⲆⵠⵠ: 43,
    ⲆᐃⵠΔᐃ: 44,
    ⵠⵠᐃᐃⲆ: 45,
    ᐃΔΔΔΔ: 46,
    ᐃⵠⵠⲆΔ: 47,
    ᐃⲆⵠⲆⲆ: 48,
    ᐃᐃΔⵠΔ: 49,
    ⲆΔΔⵠⵠ: 50,
    ⵠᐃⵠᐃΔ: 51,
    ⵠᐃⲆⲆⵠ: 52,
    ⲆⵠⲆᐃΔ: 53,
    ᐃΔΔᐃΔ: 54,
    ᐃⵠᐃΔⵠ: 55,
    Ⲇᐃⵠⵠᐃ: 56,
    ΔⵠᐃΔᐃ: 57,
    ᐃᐃⲆⵠⵠ: 58,
    ᐃⵠΔᐃΔ: 59,
    ⵠᐃΔΔⵠ: 60,
    ⲆⲆΔΔⵠ: 61,
    ⵠᐃᐃΔⵠ: 62,
    ⲆⲆᐃᐃⲆ: 63,
    ΔΔΔⲆΔ: 64,
    ⲆΔᐃΔⵠ: 65,
    ᐃᐃⲆᐃᐃ: 66,
    Δᐃᐃⵠⵠ: 67,
    ⵠΔΔᐃᐃ: 68,
    ΔᐃⵠⵠΔ: 69,
    ⵠΔⲆΔⲆ: 70,
    ⲆΔⵠΔΔ: 71,
    ᐃΔᐃΔⲆ: 72,
    ᐃᐃΔᐃⲆ: 73,
    ΔⲆΔΔΔ: 74,
    ᐃΔⵠᐃⵠ: 75,
    Δⵠᐃᐃᐃ: 76,
    ᐃⲆΔⵠⵠ: 77,
    ⵠᐃⵠⵠΔ: 78,
    ⲆⲆᐃᐃΔ: 79,
    ⵠᐃΔΔᐃ: 80,
    ⵠⵠΔᐃᐃ: 81,
    ΔᐃᐃᐃΔ: 82,
    ⲆΔⵠⵠᐃ: 83,
    ΔᐃⲆⵠⵠ: 84,
    ΔΔᐃⲆΔ: 85,
    ΔᐃⵠⲆΔ: 86,
    ⲆⵠΔᐃⲆ: 87,
    ⵠⲆⵠΔᐃ: 88,
    ᐃⵠⲆⵠⲆ: 89,
    ᐃⵠᐃⵠⵠ: 90,
    ⲆⵠΔΔΔ: 91,
    ᐃΔⵠⵠᐃ: 92,
    ⵠⵠᐃᐃΔ: 93,
    ΔᐃⲆᐃᐃ: 94,
    ᐃⲆΔⲆⵠ: 95,
    ⲆᐃᐃⲆᐃ: 96,
    ⲆⲆⲆⵠⵠ: 97,
    ΔΔⲆᐃᐃ: 98,
    ⲆⲆⲆᐃΔ: 99,
    ⲆΔΔᐃΔⲆΔᐃⵠ: 100,
    ΔᐃⲆⵠⲆ: 101,
    ᐃᐃΔᐃΔ: 102,
    ⲆΔⲆᐃⲆ: 103,
    ΔΔⲆⵠⲆ: 104,
    ⲆⵠΔⵠⵠ: 105,
    ⲆⵠΔⲆⲆ: 106,
    ΔⵠΔⵠⵠ: 107,
    ⵠⵠⲆΔΔ: 108,
    ΔΔⵠⲆ: 109,
    ⵠᐃⲆⲆⲆ: 110,
    ᐃⲆⵠᐃ: 111,
    ᐃⲆΔⵠ: 112,
    ⲆⲆᐃⵠΔⲆⵠ: 113,
    ⵠⲆΔⵠᐃ: 114,
    ΔⵠⵠᐃⲆᐃΔ: 115,
    ⵠⵠᐃᐃⵠ: 116,
    ΔΔⵠⵠⲆ: 117,
    ⵠᐃΔᐃⵠᐃⵠ: 118,
    ⲆⲆᐃⵠᐃⲆⵠ: 119,
    ⵠΔΔΔⲆ: 120,
    Ⲇⵠⵠⵠ: 121,
    ᐃΔⵠⵠΔ: 122,
    ᐃⲆⵠᐃᐃ: 123,
    ⵠᐃⲆᐃⲆⲆᐃ: 124,
    ⲆᐃⲆᐃⵠ: 125,
    ⲆⲆΔⲆᐃ: 126,
    ΔᐃᐃⵠΔ: 127,
    ᐃⲆⵠΔᐃ: 128,
    ΔᐃΔⲆᐃ: 129,
    ⲆΔᐃΔⲆ: 130,
    ᐃⵠᐃⵠᐃ: 131,
    ⲆΔᐃΔΔ: 132,
    ⲆᐃᐃⵠΔ: 133,
    ⲆΔΔᐃⵠ: 134,
    ⵠΔⲆⲆΔ: 135,
    ⵠᐃⲆⲆᐃ: 136,
    ΔΔᐃⵠⲆ: 137,
    ⵠⲆΔⲆᐃ: 138,
    ⵠᐃΔⲆⵠ: 139,
    ⲆΔⲆΔΔΔⲆ: 140,
    ΔΔΔⵠⵠ: 141,
    ΔᐃΔᐃΔΔⵠ: 142,
    ⲆᐃᐃΔᐃᐃⲆ: 143,
    ⲆᐃΔᐃⲆⵠⵠ: 144,
    ⵠⵠⲆⵠⵠⵠⵠ: 145,
    ⲆΔΔᐃᐃ: 146,
    ⲆⲆⲆᐃⵠ: 147,
    ⵠⵠⲆⵠᐃ: 148,
    ⵠⵠⲆⵠⲆ: 149,
    ᐃⲆᐃⵠΔ: 150,
    ⲆⲆⵠⵠᐃ: 151,
    ΔⲆΔΔⲆ: 152,
    ⲆᐃΔⲆⵠ: 153,
    ⲆΔᐃⵠⲆ: 154,
    ΔⵠᐃⲆⵠ: 155,
    ΔⲆⵠⵠⵠ: 156,
    ⲆⲆⵠⵠΔ: 157,
    ᐃⵠᐃⲆⵠ: 158,
    ⲆⵠᐃᐃΔ: 159,
    ⵠⵠΔⵠⲆ: 160,
    ᐃΔⵠᐃⲆ: 161,
    ⲆⲆⲆⲆⵠ: 162,
    ΔᐃⵠⲆⲆ: 163,
    ᐃᐃᐃᐃᐃ: 164,
    ⵠᐃⲆᐃⵠ: 165,
    ⵠⲆΔᐃⵠⲆⲆ: 166,
    ᐃⲆⲆⲆⲆ: 167,
    ⲆᐃⲆΔΔ: 168,
    Ⲇᐃⵠᐃⵠ: 169,
    ⲆⵠᐃΔΔ: 170,
    ΔⵠΔⲆᐃⵠᐃ: 171,
    ΔⲆⲆⲆⵠⲆⲆ: 172,
    ᐃⲆⲆΔⵠⵠⵠ: 173,
    ⲆⵠⵠΔᐃ: 174,
    ⲆⵠⲆⵠⲆⲆᐃ: 175,
    ᐃⵠⵠⲆΔΔⲆ: 176,
    ⵠΔᐃⲆᐃΔΔ: 177,
    ⵠΔⵠⵠΔⵠⵠ: 178,
    ᐃⵠⲆⲆⵠΔΔ: 179,
    ΔⵠΔⲆⲆⵠⵠ: 180,
    ΔΔΔΔⲆᐃᐃ: 181,
    ᐃⲆΔⲆᐃᐃΔ: 182,
    ⵠΔᐃᐃᐃ: 183,
    ⵠᐃΔⵠΔ: 184,
    ᐃⲆΔᐃᐃ: 185,
    ⲆⲆΔⲆΔ: 186,
    ΔⲆᐃᐃⲆ: 187,
    ⲆⲆⲆⵠⲆΔᐃ: 188,
    ⵠᐃⵠΔⵠ: 189,
    ⲆᐃⵠΔΔ: 190,
    ⲆᐃⵠΔⵠⲆⵠ: 191,
    ⲆᐃΔᐃΔ: 192,
    ⵠᐃΔⲆⵠⲆⲆ: 193,
    ᐃⲆᐃᐃΔ: 194,
    ᐃΔᐃⲆᐃ: 195,
    ⲆⲆⵠⵠⲆⲆΔ: 196,
    ᐃΔᐃΔⵠⵠΔ: 197,
    ΔⲆⵠΔΔ: 198,
    ᐃΔᐃⵠⵠ: 199,
    ⲆⲆⲆΔᐃⵠΔ: 200,
    ⵠᐃΔⲆⲆ: 201,
    ᐃⵠᐃΔ: 202,
    ΔⲆⲆⵠΔ: 203,
    ⵠⲆᐃⲆᐃⵠᐃ: 204,
    ⲆᐃΔⵠᐃ: 205,
    ᐃᐃⲆᐃΔΔᐃ: 206,
    ⲆᐃΔΔⵠ: 207,
    ᐃᐃⲆⲆⲆΔΔ: 208,
    ⲆᐃⵠΔⲆ: 209,
    ᐃⲆⵠᐃᐃⵠᐃ: 210,
    ᐃᐃΔΔᐃᐃΔ: 211,
    ᐃⲆΔᐃⲆ: 212,
    ΔⵠⵠΔΔ: 213,
    ΔΔⲆᐃⲆ: 214,
    ΔⵠΔⲆΔ: 215,
    ⵠΔⲆⵠᐃ: 216,
    ᐃⵠⵠⲆᐃ: 217,
    Ⲇᐃⵠⵠⵠ: 218,
    ⵠⲆᐃᐃⲆ: 219,
    ᐃΔΔⵠᐃ: 220,
    ⵠᐃⵠᐃⵠ: 221,
    ᐃⲆⲆⲆᐃ: 222,
    ⵠⵠⲆΔⲆ: 223,
    ⵠᐃᐃⲆᐃ: 224,
    ΔⵠᐃⵠⵠΔΔ: 225,
    ᐃⵠⵠⲆᐃⵠᐃ: 226,
    ⵠⲆᐃⲆΔ: 227,
    ΔᐃΔΔΔᐃⲆ: 228,
    ⲆⵠᐃΔᐃ: 229,
    ⵠⲆⵠᐃᐃ: 230,
    ᐃⵠⵠᐃⵠ: 231,
    ⲆⵠΔᐃⵠ: 232,
    ⲆⲆΔⵠⲆ: 233,
    ⵠⵠⵠᐃⲆΔΔ: 234,
    ⵠᐃⲆⲆΔ: 235,
    ΔⵠΔΔⵠ: 236,
    ⵠⵠΔⲆⵠ: 237,
    ⵠΔⵠᐃⵠ: 238,
    ⵠΔᐃⵠⲆ: 239,
    ΔⵠΔΔⲆ: 240,
    ᐃⵠⵠΔⵠ: 241,
    ⵠΔⵠⵠⲆ: 242,
    ⲆᐃΔⲆᐃⵠΔ: 243,
    ΔⵠΔⲆⲆ: 244,
    ᐃⲆⵠᐃΔ: 245,
    ᐃΔᐃΔΔⵠᐃ: 246,
    ⵠⵠⲆᐃΔ: 247,
    ΔΔⵠⲆⲆ: 248,
    ΔᐃᐃⵠΔΔⵠ: 249,
    Δⵠᐃᐃⵠ: 250,
    ⵠᐃΔⲆᐃ: 251,
    ᐃᐃᐃΔⵠΔᐃ: 252,
    ᐃᐃᐃⲆⲆᐃΔ: 253,
    ᐃⲆΔⲆⵠⲆᐃ: 254,
    ᐃⲆΔᐃΔᐃⲆ: 255,
    ᐃⵠᐃⲆⵠΔⲆ: 256,
    ᐃΔᐃᐃᐃᐃᐃ: 257,
    ᐃΔΔΔⲆⵠᐃ: 258,
    ⲆⲆⵠⵠⵠⲆΔ: 259,
    ⵠΔᐃΔⵠ: 260,
    ⲆᐃⲆᐃᐃΔΔ: 261,
    ᐃΔΔⲆⵠᐃᐃ: 262,
    ᐃⲆᐃⵠⲆΔᐃ: 263,
    ⵠⵠⲆⵠΔ: 264,
    ΔΔⲆΔⵠⵠⵠ: 265,
    ⲆΔⵠΔᐃΔⲆ: 266,
    ΔᐃⲆⲆᐃⲆᐃ: 267,
    ΔⵠΔΔᐃⲆᐃ: 268,
    ΔⵠΔⵠᐃⵠᐃ: 269,
    ⵠΔⲆΔᐃⲆⵠ: 270,
    ᐃᐃᐃᐃⲆΔΔ: 271,
    ΔΔⵠᐃⵠⵠⵠ: 272,
    ΔΔⲆⲆⵠⵠᐃ: 273,
    ⵠⲆΔΔⲆΔᐃ: 274,
    ⵠᐃΔΔΔⲆᐃ: 275,
    ⵠⵠΔΔⲆⵠΔ: 276,
    ⵠᐃΔⲆⲆⲆᐃ: 277,
    ⲆᐃΔΔⲆⵠⵠ: 278,
    ⲆᐃⲆⵠ: 279,
    ᐃᐃⵠⵠᐃ: 280,
    ᐃᐃⲆΔⲆⵠⲆ: 281,
    ⲆΔᐃΔⵠⲆⵠ: 282,
    ᐃⲆ: 283,
    ᐃᐃⲆᐃⲆΔⵠ: 284,
    ⵠⲆⲆᐃᐃ: 285,
    ᐃᐃⵠᐃⲆ: 286,
    ΔΔᐃⵠΔᐃⲆ: 287,
    ΔᐃᐃⲆⲆ: 288,
    ⲆᐃΔⵠⲆᐃΔ: 289,
    ᐃⵠⵠⵠΔⵠΔ: 290,
    ᐃᐃⲆᐃⲆᐃⲆ: 291,
    ΔΔᐃΔⲆΔⲆ: 292,
    ᐃⵠⵠᐃᐃⵠᐃ: 293,
    ⵠⵠⵠⲆΔ: 294,
    ⲆΔΔΔᐃⲆΔ: 295,
    ⲆⲆⲆⲆⲆⲆᐃ: 296,
    ᐃⲆΔΔⵠⲆΔ: 297,
    ⲆⲆΔⵠᐃΔⲆ: 298,
    ΔⵠΔⵠⲆ: 299,
    ⵠⲆⲆΔΔΔⵠ: 300,
    ⵠᐃⲆΔⲆΔⲆ: 301,
    ΔᐃΔᐃⵠⲆᐃ: 302,
    ΔⲆΔⲆΔᐃΔ: 303,
    ⲆⵠⵠⲆᐃⵠⲆ: 304,
    ΔⵠΔΔΔᐃᐃ: 305,
    ᐃΔⵠᐃᐃⲆΔ: 306,
    ΔⵠᐃⲆΔ: 307,
    ⲆᐃᐃⲆΔΔΔ: 308,
    ⵠⲆⵠⲆⵠΔⲆ: 309,
    ⵠⲆᐃⵠᐃⵠᐃ: 310,
    ᐃΔⵠⲆᐃⲆᐃ: 311,
    ᐃⲆᐃΔᐃᐃΔ: 312,
    ⵠᐃΔⲆᐃᐃⵠ: 313,
    ⲆᐃⵠⲆᐃⵠⲆ: 314,
    ⲆⵠⵠⲆⲆⲆᐃ: 315,
    ⵠⵠⵠΔΔᐃⵠ: 316,
    ⵠᐃⲆⲆᐃᐃΔ: 317,
    ᐃᐃⵠΔⲆᐃⲆ: 318,
    ⲆΔᐃᐃⲆⲆΔ: 319,
    ΔΔΔΔⵠΔᐃ: 320,
    ᐃⲆᐃⲆΔ: 321,
    ⵠᐃⵠᐃⵠⵠᐃ: 322,
    ᐃⲆⲆⲆⲆΔᐃ: 323,
    ΔⵠⲆⵠⲆᐃΔ: 324,
    ⵠΔⲆⲆΔⵠΔ: 325,
    ΔⵠΔᐃⲆΔⵠ: 326,
    ΔᐃⵠᐃᐃⲆⵠ: 327,
    ⲆΔⵠⲆⲆⵠΔ: 328,
    ⵠᐃΔΔⵠⲆⲆ: 329,
    Δⵠᐃⵠⵠᐃᐃ: 330,
    ⵠΔⵠⵠⵠⵠᐃ: 331,
    ⵠⲆⵠⵠⵠⲆⵠ: 332,
    ⲆⵠⵠⲆᐃΔΔ: 333,
    ΔᐃⵠⲆᐃΔΔ: 334,
    ᐃᐃⵠⵠⲆΔⵠ: 335,
    ⵠᐃⵠΔⵠΔⲆ: 336,
    ⵠⲆⲆⲆᐃⵠᐃ: 337,
    ΔⲆΔᐃᐃΔΔ: 338,
    ΔⲆᐃΔᐃᐃⲆ: 339,
    ⲆⵠⲆᐃⲆⲆⵠ: 340,
    ⵠⵠⵠⵠⵠⲆᐃ: 341,
    ᐃⵠᐃⵠⵠΔΔ: 342,
    ⵠΔⵠⲆⵠᐃⵠ: 343,
    ⵠΔΔΔⵠΔⵠ: 344,
    ᐃΔⲆⲆⵠⵠΔ: 345,
    ᐃΔⵠΔΔᐃΔ: 346,
    ΔⲆᐃΔᐃᐃⲆⲆΔ: 347,
    ΔᐃΔΔⲆᐃⲆ: 348,
    ⵠᐃΔⵠᐃᐃΔ: 349,
    ⵠΔⵠⲆᐃⲆⲆ: 350,
    ᐃⵠᐃⵠᐃⲆΔ: 351,
    ΔⲆⵠΔⲆⵠⵠ: 352,
    ⲆᐃⵠᐃⲆⲆΔ: 353,
    ⵠⵠⲆⲆⵠⲆᐃ: 354,
    ⲆⲆᐃΔⵠΔⵠ: 355,
    ᐃΔΔᐃⵠᐃᐃ: 356,
    ⵠᐃᐃᐃᐃΔΔ: 357,
    ΔⲆⲆⲆⲆᐃⲆ: 358,
    ⲆᐃⲆⲆΔⲆΔ: 359,
    ⵠⵠⲆⵠΔⵠⲆ: 360,
    ᐃΔᐃⲆᐃΔⵠ: 361,
    ᐃΔⲆᐃⲆⲆΔ: 362,
    ⵠⵠᐃΔⵠⵠⲆ: 363,
    ⲆⲆⵠⵠΔⵠΔ: 364,
    ⲆⲆΔⲆΔⵠⲆ: 365,
    ΔᐃⲆΔⲆΔⲆ: 366,
    ⵠⲆⵠᐃⲆⲆΔ: 367,
    ΔⲆᐃΔΔᐃᐃ: 368,
    ᐃⵠⵠⲆⵠᐃⲆ: 369,
    ᐃⲆⲆⲆΔΔᐃ: 370,
    ΔᐃⲆⲆⵠⲆΔ: 371,
    ΔᐃⵠⵠᐃⲆⵠ: 372,
    ⵠΔⲆᐃᐃⲆᐃ: 373,
    ⲆⵠⵠΔΔΔᐃ: 374,
    ΔⲆᐃΔⲆⵠᐃ: 375,
    ΔⲆⲆᐃᐃΔΔ: 376,
    ᐃΔΔΔⲆⵠⲆ: 377,
    ⲆΔΔⵠΔⵠⲆ: 378,
    ᐃᐃᐃΔᐃΔⵠ: 379,
    ⲆΔⲆⵠⲆⵠΔ: 380,
    ΔⲆⵠᐃΔⵠⵠ: 381,
    ΔⵠⲆⲆⲆⲆΔ: 382,
    ⵠⲆᐃᐃΔⵠΔ: 383,
    ⲆΔᐃΔⲆΔΔ: 384,
    ᐃⵠᐃⵠΔⲆΔ: 385,
    ⲆⵠⵠⲆⵠᐃⵠ: 386,
    ⲆⵠᐃΔⲆᐃⵠ: 387,
    ΔⲆⲆᐃᐃΔⲆ: 388,
    ⲆⲆΔᐃⲆⲆⵠ: 389,
    ⲆⲆΔᐃⲆΔΔ: 390,
    ΔΔΔΔΔⲆⵠ: 391,
    ⲆᐃⵠⵠⵠⵠΔ: 392,
    ⵠⲆᐃⵠⲆᐃⵠ: 393,
    ⲆⵠⵠⵠⵠΔΔ: 394,
    ⵠⵠΔΔΔΔⲆ: 395,
    ΔⵠⵠᐃᐃΔᐃ: 396,
    ⲆⲆᐃΔⵠⵠⲆ: 397,
    ⵠⲆⵠΔⲆⵠᐃ: 398,
    ᐃⲆⲆᐃⲆΔⲆ: 399,
    ⵠᐃⲆΔⲆⵠⲆ: 400,
    ΔⲆΔᐃⲆⵠΔ: 401,
    ᐃᐃⵠⵠⲆΔΔ: 402,
    ⵠΔΔᐃⲆⵠᐃ: 403,
    ᐃᐃᐃⵠΔᐃΔ: 404,
    ΔⵠᐃΔⲆⵠⵠ: 405,
    ᐃⲆⲆΔΔⵠⵠ: 406,
    ⲆⲆⵠΔᐃᐃⲆ: 407,
    ᐃⵠⲆΔᐃᐃⵠ: 408,
    ⲆⲆⵠᐃΔⲆᐃ: 409,
    ⲆᐃⲆⵠᐃⵠᐃ: 410,
    ⵠⲆᐃΔᐃΔⲆ: 411,
    ᐃⲆⲆⵠΔⲆᐃ: 412,
    ᐃⵠᐃᐃᐃ: 413,
    ⵠⵠⵠΔΔⵠⵠⵠᐃ: 414,
    ⵠΔⵠᐃᐃ: 415,
    ⲆⵠⲆΔᐃ: 416,
    ⵠⵠᐃΔΔⵠⵠΔⲆ: 417,
    ⵠⲆΔᐃΔᐃⲆ: 418,
    ⲆⵠⲆᐃⵠ: 419,
    ⲆⵠΔΔⵠⵠΔ: 420,
    ⲆⲆⵠⵠⲆⲆᐃ: 421,
    ΔⲆⲆΔⵠⵠᐃ: 422,
    ⲆᐃⵠⲆΔⵠⲆ: 423,
    ⵠⵠΔⵠᐃΔⵠ: 424,
    ⲆⵠⵠΔᐃᐃⲆ: 425,
    ⲆΔⵠⲆⵠⲆⵠ: 426,
    ΔᐃⵠᐃᐃⲆᐃ: 427,
    ᐃⵠᐃⲆᐃⵠⲆ: 428,
    ΔⲆⵠⵠⲆⲆΔ: 429,
    ⲆⲆⵠⵠᐃⵠᐃ: 430,
    ⲆΔΔΔⲆᐃΔ: 431,
    ᐃΔⲆΔᐃᐃⲆ: 432,
    ⲆᐃⲆⵠⲆᐃⵠ: 433,
    ΔⵠᐃᐃⵠⲆⲆ: 434,
    ΔⲆⵠΔᐃⲆⲆ: 435,
    ⵠᐃⵠΔⵠⵠⵠ: 436,
    ⲆᐃⲆⲆⲆᐃⲆ: 437,
    ⲆᐃΔⵠⵠⵠΔ: 438,
    ᐃⵠⵠᐃⲆΔⵠ: 439,
    ΔⵠⵠΔⲆⵠΔ: 440,
    ⵠΔⲆᐃⵠᐃΔ: 441,
    ⲆⲆΔΔⵠⵠⵠ: 442,
    ΔⵠᐃΔΔⵠᐃ: 443,
    ΔᐃⵠⵠⲆΔΔΔΔ: 444,
    ⵠⲆⲆᐃΔ: 445,
    ⵠᐃⵠⵠⵠⵠΔ: 446,
    ᐃᐃᐃⵠΔⲆΔ: 447,
    ᐃⲆⵠⵠᐃⵠΔΔΔ: 448,
    ᐃⵠΔⵠⵠ: 449,
    ᐃΔⲆⲆΔ: 450,
    ᐃⵠⵠⲆΔⵠΔ: 451,
    ᐃᐃΔⵠΔᐃⵠ: 452,
    ΔᐃΔΔᐃᐃⲆ: 453,
    ⵠⵠⵠᐃⲆΔⵠ: 454,
    ⵠᐃⵠⲆΔᐃΔ: 455,
    ⲆΔⲆᐃⲆⵠᐃ: 456,
    ⲆᐃΔΔΔΔⵠ: 457,
    ΔⲆᐃⲆΔᐃⲆ: 458,
    ⵠⵠΔΔΔⲆΔ: 459,
    ᐃⵠᐃⵠΔΔᐃ: 460,
    ⲆᐃⲆⵠᐃᐃΔ: 461,
    ⲆΔΔⲆᐃⲆⵠ: 462,
    ⵠⲆⵠᐃⲆⵠᐃ: 463,
    ᐃᐃⵠᐃⲆΔΔ: 464,
    ΔΔΔᐃⵠΔⵠ: 465,
    ΔᐃΔΔΔΔᐃ: 466,
    ⲆⵠΔⲆΔᐃΔ: 467,
    ⵠΔⲆⲆⵠΔΔ: 468,
    ⵠᐃᐃⲆΔᐃΔ: 469,
    ⲆⵠⲆΔⵠΔⲆ: 470,
    ΔⲆⲆⵠΔⵠᐃ: 471,
    ⵠΔⵠⲆᐃⲆᐃ: 472,
    ⲆΔⵠΔⲆᐃⵠ: 473,
    ⵠⵠⵠᐃⵠⵠⵠ: 474,
    ᐃᐃⵠᐃᐃᐃΔ: 475,
    ΔΔᐃΔᐃⲆᐃ: 476,
    ΔᐃᐃᐃΔⵠΔ: 477,
    ᐃΔᐃΔⵠᐃΔ: 478,
    ᐃⲆⲆⵠⵠⲆᐃ: 479,
    ΔᐃⵠⵠΔⲆΔ: 480,
    ΔⵠΔⵠᐃΔΔ: 481,
    ᐃΔⵠⲆⲆⲆᐃ: 482,
    ᐃⲆⲆⵠᐃᐃⲆ: 483,
    ᐃⵠΔᐃⵠⵠΔ: 484,
    ⵠⵠᐃᐃⵠⲆΔ: 485,
    ⲆᐃⵠⵠΔⵠΔ: 486,
    ⲆⲆⵠᐃΔⲆΔ: 487,
    ᐃⲆᐃⲆᐃΔΔ: 488,
    ᐃΔΔⲆᐃᐃⵠ: 489,
    ⵠⵠᐃⵠΔᐃⲆ: 490,
    ⲆᐃⵠⲆΔΔⵠ: 491,
    ΔᐃⲆⲆⵠᐃⲆ: 492,
    ᐃⵠᐃΔᐃⵠⵠ: 493,
    ⵠⵠⲆⲆⵠᐃⵠ: 494,
    ⲆᐃⵠᐃᐃⲆᐃ: 495,
    ΔᐃⲆⵠⲆⲆⵠ: 496,
    ᐃⵠᐃⲆΔⵠⵠ: 497,
    ⲆⵠᐃⲆⲆⵠⵠ: 498,
    ΔⵠΔΔΔᐃⲆ: 499,
    ΔⲆⲆᐃΔⵠⲆ: 500,
    ᐃᐃᐃΔⵠⵠᐃ: 501,
    ᐃⵠⲆᐃΔᐃΔ: 502,
    ⲆⵠⵠᐃᐃΔΔ: 503,
    ⲆⵠⲆᐃⵠⵠΔ: 504,
    ⵠᐃΔΔⵠⲆᐃ: 505,
    ⵠⲆⲆΔⲆⲆⲆ: 506,
    ΔΔΔᐃⵠΔⵠ: 507,
    ⲆⲆⵠⲆΔᐃᐃ: 508,
    ΔⲆⵠⵠⲆⵠᐃ: 509,
    ΔⵠⲆΔⲆΔⲆ: 510,
    ΔⲆⵠΔΔⵠᐃ: 511,
    ᐃΔᐃΔᐃΔΔ: 512,
    ⲆⲆᐃⲆᐃΔᐃ: 513,
    ΔⲆⲆΔΔⵠⲆ: 514,
    ΔⲆⲆⵠᐃⲆᐃ: 515,
    ⲆⵠᐃΔⲆΔⲆ: 516,
    ᐃⵠΔⵠᐃⲆⲆ: 517,
    ΔᐃⲆⵠΔΔⵠ: 518,
    ⲆΔᐃΔⵠΔⲆ: 519,
    ⵠⵠᐃΔΔᐃᐃ: 520,
    ᐃᐃᐃⲆᐃⲆⲆ: 521,
    ⵠⲆⵠᐃΔᐃⵠ: 522,
    ΔΔΔΔⵠⲆⲆ: 523,
    ᐃᐃⵠⵠᐃⲆΔ: 524,
    ⵠⵠᐃⵠⲆⲆⲆ: 525,
    ᐃᐃΔⲆᐃᐃᐃ: 526,
    ΔᐃⵠⵠᐃⲆⲆ: 527,
    ᐃⵠΔⵠⲆⲆᐃ: 528,
    ⵠⵠⵠΔⵠⲆⲆ: 529,
    ⵠΔΔΔⵠᐃⵠ: 530,
    ᐃΔΔᐃⲆᐃᐃ: 531,
    ⵠⲆΔΔⵠᐃΔ: 532,
    ⵠⵠⵠΔΔⵠⲆ: 533,
    ⲆΔᐃⲆᐃⵠⲆ: 534,
    ⲆⲆⵠⲆΔΔⲆ: 535,
    ⲆΔᐃⵠⲆᐃΔ: 536,
    ᐃⵠᐃⵠᐃⵠΔ: 537,
    ⵠⲆⲆⲆⵠᐃⲆ: 538,
    ΔⵠᐃⵠᐃᐃⲆΔⲆ: 539,
    ⵠⲆᐃᐃⵠΔᐃ: 540,
    ⵠⲆⵠᐃΔⲆΔ: 541,
    Ⲇⵠᐃᐃᐃᐃⵠ: 542,
    ᐃᐃⵠⵠᐃΔᐃ: 543,
    ⲆΔⲆᐃⵠΔᐃΔⲆ: 544,
    POINTS: 545,
    ΔᐃⵠⵠᐃⲆᐃ: 546,
    ΔⵠⵠⲆΔᐃΔ: 547,
    ΔⲆᐃΔΔᐃⵠ: 548,
    ⵠᐃᐃⵠⵠⵠᐃ: 549,
    ᐃⲆⲆΔᐃΔⵠ: 550,
    ⵠⲆᐃⲆΔⲆⲆ: 551,
    ⵠᐃΔᐃⲆΔⲆ: 552,
    ᐃΔΔᐃΔΔΔ: 553,
    ⵠᐃΔΔᐃⲆᐃ: 554,
    ⲆᐃΔⲆⵠⵠᐃ: 555,
    ⲆᐃΔᐃⵠⲆⲆ: 556,
    ΔᐃΔᐃⵠᐃΔ: 557,
    ⲆΔⵠΔᐃⲆΔ: 558,
    ΔⲆΔΔⵠᐃⵠ: 559,
    ⵠᐃΔΔᐃᐃⵠ: 560,
    ΔᐃᐃᐃⲆⵠᐃ: 561,
    ⲆⲆⵠᐃΔⵠᐃ: 562,
    ⵠⲆⵠᐃⵠΔⵠ: 563,
    ⵠΔⲆⵠΔⵠⲆ: 564,
    ᐃⵠⵠⵠᐃᐃⵠ: 565,
    ⵠⵠΔⵠᐃᐃⵠ: 566,
    ΔⵠΔΔΔΔᐃ: 567,
    ᐃΔⵠᐃⵠᐃⲆ: 568,
    ⲆⲆΔⲆⵠⲆΔ: 569,
    ⵠⵠᐃⵠⵠⵠᐃ: 570,
    ΔⵠⲆⲆΔⲆⲆ: 571,
    ΔΔⲆⵠΔⵠⵠ: 572,
    ΔᐃⵠΔᐃⵠⲆ: 573,
    ᐃᐃⵠΔⲆⲆⲆ: 574,
    ΔᐃⲆⵠᐃⲆⲆ: 575,
    ⵠⲆⵠⵠΔⵠⵠ: 576,
    ⲆⲆⵠⵠΔⲆⵠ: 577,
    ΔᐃⲆᐃᐃΔᐃ: 578,
    ᐃᐃᐃⵠΔᐃᐃ: 579,
    ΔΔⲆΔⲆⵠⲆ: 580,
    ᐃⵠⲆⲆⲆᐃⵠ: 581,
    ⵠⵠⲆΔΔᐃⲆ: 582,
    ᐃⵠⲆΔΔⵠΔ: 583,
    ⲆⵠⵠⲆΔⵠᐃ: 584,
    ⵠⵠᐃΔⲆΔⵠ: 585,
    ⵠⲆⲆΔⲆⲆΔ: 586,
    ⲆᐃΔⲆᐃᐃⵠ: 587,
    ᐃⲆᐃΔⲆⵠᐃ: 588,
    ΔᐃᐃΔΔΔᐃ: 589,
    ⵠᐃΔⵠⲆΔΔ: 590,
    ⵠⵠᐃⲆᐃᐃⵠ: 591,
    ⵠᐃⵠΔⵠⲆⲆ: 592,
    ΔⵠⲆⲆᐃΔⲆᐃᐃ: 593,
    ᐃⵠⲆⲆᐃⵠⵠ: 594,
    ⲆⲆᐃⵠΔΔΔⵠᐃ: 595,
    ΔᐃᐃᐃᐃΔᐃ: 596,
    ΔᐃᐃⵠⵠⲆΔⲆⵠ: 597,
    ⲆΔⵠⵠⲆⵠⵠⵠⲆ: 598,
    ⲆᐃΔΔⵠⲆΔⵠΔ: 599,
    ΔⵠΔⵠΔΔⵠΔⲆ: 600,
    ᐃΔΔΔΔⲆΔⵠⲆ: 601,
    ⵠΔⲆⲆⲆⵠⲆ: 602,
    ᐃᐃⲆΔΔ: 603,
    ΔⲆⲆΔΔⵠᐃ: 604,
    ⵠⵠⵠᐃᐃΔⲆ: 605,
    ⲆⵠⵠΔᐃᐃᐃ: 606,
    ΔⵠᐃΔΔΔⵠᐃΔ: 607,
    ΔΔΔΔⵠΔΔ: 608,
    ⵠᐃⲆⲆΔΔᐃ: 609,
    ΔΔⵠⵠⲆΔⵠ: 610,
    ΔᐃⲆⲆⵠΔᐃ: 611,
    ΔⲆⵠⵠᐃᐃⲆ: 612,
    ΔⵠᐃΔⲆᐃⵠ: 613,
    ΔᐃⵠⲆΔⵠᐃ: 614,
    ᐃΔᐃⵠⵠᐃⲆ: 615,
    ᐃΔΔⵠΔᐃⲆ: 616,
    ᐃⵠⲆᐃΔⵠᐃ: 617,
    ᐃⵠⲆΔᐃⲆᐃ: 618,
    ΔⲆᐃⵠᐃ: 619,
    ⵠᐃᐃⵠᐃ: 620,
    ΔΔΔᐃⲆ: 621,
    ΔⵠⵠⲆΔⵠᐃΔᐃ: 622,
    ⵠΔΔⲆⵠⵠⵠ: 623,
    ΔᐃᐃⲆΔΔᐃ: 624,
    ⵠⲆᐃⲆⲆⵠⲆ: 625,
    ⲆᐃΔᐃᐃᐃⵠ: 626,
    ΔᐃᐃⵠⲆⲆⵠ: 627,
    ⲆᐃⵠᐃⲆⵠⵠ: 628,
    ΔⲆⵠᐃⵠᐃᐃ: 629,
    ᐃⲆⵠⵠⵠΔⵠ: 630,
    ⵠⲆⵠⲆΔⲆⲆ: 631,
    ΔΔⲆᐃᐃΔΔ: 632,
    ⵠΔᐃᐃᐃⲆⵠ: 633,
    ΔⲆΔⲆᐃᐃⵠ: 634,
    ΔΔΔᐃᐃᐃⵠ: 635,
    ΔⲆⵠΔᐃⵠᐃ: 636,
    ⲆⲆᐃⲆᐃ: 637,
    ΔΔⵠⲆⲆΔⲆ: 638,
    ΔΔΔΔᐃⲆⲆ: 639,
    ⵠΔᐃⵠⲆⵠΔ: 640,
    ⵠⲆᐃⵠⲆⲆⲆ: 641,
    ⲆⲆⲆᐃᐃΔᐃ: 642,
    ΔᐃΔⵠⲆΔⵠ: 643,
    ⵠᐃΔΔᐃⲆⲆ: 644,
    ᐃΔΔΔΔⵠΔ: 645,
    ⵠΔΔⵠΔⲆⲆ: 646,
    ⲆᐃⲆⵠⲆⲆΔ: 647,
    ΔᐃΔᐃΔᐃΔ: 648,
    ⲆΔᐃⲆΔᐃΔ: 649,
    ⲆⲆⲆⵠΔΔΔ: 650,
    ⵠᐃΔⵠΔⵠᐃ: 651,
    ⵠⵠᐃΔⲆⲆⵠ: 652,
    ⵠΔⵠΔᐃⵠⲆ: 653,
    ⲆⲆΔᐃⵠⲆⲆ: 654,
    ᐃᐃⲆᐃⵠⲆⵠ: 655,
    ΔⵠᐃΔⲆⵠⲆ: 656,
    ᐃⲆⲆᐃⵠᐃΔ: 657,
    ΔᐃᐃΔᐃⲆΔ: 658,
    ⲆᐃΔⵠⵠᐃⵠ: 659,
    ᐃᐃⲆΔᐃⲆᐃ: 660,
    ΔΔᐃᐃⲆᐃΔ: 661,
    ⵠΔⲆⲆⵠⵠⵠ: 662,
    ⲆΔΔⵠⵠⵠΔ: 663,
    ΔᐃΔΔΔⵠⲆ: 664,
    ⵠⵠᐃⵠⵠΔⲆ: 665,
    ⲆⲆΔⲆΔⲆⵠ: 666,
    ᐃⵠⲆⵠΔⵠⲆ: 667,
    ⲆᐃⲆⵠⵠΔⵠ: 668,
    ᐃⲆⲆΔⵠⲆᐃ: 669,
    ⵠᐃⲆⲆᐃⵠⲆ: 670,
    ΔᐃⲆⲆⲆΔⵠ: 671,
    ΔᐃᐃⵠⲆᐃΔ: 672,
    ⲆⲆᐃⲆⵠ: 673,
    ⵠⵠΔᐃᐃⵠᐃ: 674,
    ⲆⵠᐃⵠⲆⵠᐃ: 675,
    ⵠⲆᐃᐃⵠ: 676,
    ΔⲆΔⲆⵠⵠᐃⵠᐃ: 677,
    ᐃΔⲆΔΔⲆⲆ: 678,
    ⵠᐃⵠⵠⵠ: 679,
    ᐃΔⵠᐃⵠⵠⵠ: 680,
    ⵠⵠⵠⲆᐃΔⲆ: 681,
    ⲆᐃⵠⲆⵠⲆΔ: 682,
    ⵠΔⵠᐃᐃⵠᐃ: 683,
    ⵠⲆⵠΔⵠΔⲆ: 684,
    ⲆᐃΔⵠΔΔΔ: 685,
    ΔⵠⵠᐃᐃⲆⵠ: 686,
    ΔⲆᐃᐃⲆⲆⵠ: 687,
    ᐃⲆⲆⵠⵠᐃᐃ: 688,
    ΔΔΔΔᐃⵠⵠ: 689,
    ΔΔᐃⲆᐃⲆⵠ: 690,
    ⵠΔΔⲆᐃ: 691,
    ⲆⲆⵠⲆᐃ: 692,
    ΔᐃᐃΔⵠ: 693,
    ⵠΔⵠⲆⵠ: 694,
    ⵠⵠⵠᐃⲆ: 695,
    ⵠᐃΔᐃΔΔΔ: 696,
    ᐃⵠⵠⵠᐃⵠⵠ: 697,
    ⵠᐃⵠᐃᐃⵠᐃ: 698,
    ⲆΔΔᐃᐃᐃⵠ: 699,
    ΔᐃᐃⵠⲆΔⵠ: 700,
    ⲆⵠᐃᐃᐃΔᐃ: 701,
    ⲆΔⵠΔⵠⲆⲆ: 702,
    ᐃⲆΔⲆΔᐃΔ: 703,
    ⲆᐃⵠᐃΔⲆⵠ: 704,
    ⲆΔⵠⲆΔΔⵠ: 705,
    ⲆᐃⵠⲆΔᐃᐃ: 706,
    ᐃᐃⵠΔΔΔⲆ: 707,
    ⲆᐃⵠᐃⵠⲆᐃ: 708,
    ⲆΔᐃⵠΔᐃᐃ: 709,
    ⵠᐃⵠΔΔⵠΔ: 710,
    ⵠⵠⲆΔΔᐃᐃ: 711,
    ⵠᐃⲆⵠⵠⵠΔ: 712,
    ⵠᐃⲆᐃΔⵠᐃ: 713,
    ⲆΔΔᐃⵠⲆⲆ: 714,
    ⵠⲆᐃᐃᐃᐃⵠ: 715,
    ⲆᐃⲆΔᐃⵠⲆ: 716,
    ⵠⵠᐃⵠⲆⲆᐃ: 717,
    ᐃΔΔΔⵠⵠᐃ: 718,
    ⲆᐃᐃⵠⲆⵠⲆ: 719,
    ΔⲆᐃⵠⵠⵠⵠ: 720,
    ⵠᐃΔΔⵠⵠΔΔⵠ: 721,
    ᐃⵠⲆⵠⲆⲆⵠ: 722,
    ᐃⵠΔⲆᐃⲆⵠ: 723,
    ⲆⲆᐃⵠⵠᐃⲆ: 724,
    ⲆⲆⵠΔΔⲆΔ: 725,
    ᐃᐃΔᐃᐃΔΔ: 726,
    ⵠⵠⵠᐃⵠΔⲆ: 727,
    ⵠΔΔⵠΔᐃΔ: 728,
    ⵠΔΔᐃⵠΔᐃ: 729,
    ᐃᐃⲆⲆᐃΔΔ: 730,
    ᐃᐃⲆΔᐃᐃⵠ: 731,
    ᐃⲆⵠΔΔⵠⵠ: 732,
    ᐃⲆⵠᐃᐃⵠⲆ: 733,
    ⵠᐃⲆΔΔΔⲆ: 734,
    ⲆᐃⵠⲆⲆᐃⲆ: 735,
    ᐃᐃⲆᐃⵠΔⵠ: 736,
    ⵠⵠⵠⵠΔⲆⲆ: 737,
    ⵠⵠⵠⲆⵠΔᐃ: 738,
    ⲆᐃⲆᐃᐃᐃⲆ: 739,
    ΔⲆⵠΔⲆⲆⲆ: 740,
    ⵠⵠᐃⵠᐃⵠᐃ: 741,
    ⵠΔᐃᐃⵠᐃΔ: 742,
    ΔΔⲆᐃᐃᐃⵠ: 743,
    ΔᐃⲆΔΔᐃⵠ: 744,
    ΔᐃᐃⲆⲆⵠⲆ: 745,
    ⲆⲆΔΔⲆᐃⲆ: 746,
    ΔⲆⵠⲆΔⲆⵠ: 747,
    ⵠⲆᐃΔⵠΔⲆ: 748,
    ⲆⵠⵠΔⲆⵠⲆ: 749,
    ᐃⲆⲆΔΔΔΔ: 750,
    ᐃᐃⵠᐃⲆΔⲆ: 751,
    ᐃⲆΔⲆⵠΔᐃ: 752,
    ΔⵠᐃᐃⲆᐃⵠ: 753,
    ⵠΔⲆⲆᐃⲆⲆ: 754,
    ⵠᐃⲆᐃⵠᐃΔ: 755,
    ⲆΔΔΔΔⵠᐃ: 756,
    ⵠΔⵠⵠᐃΔᐃ: 757,
    ⵠⵠᐃⲆΔⲆᐃ: 758,
    ⵠΔⲆΔΔᐃΔ: 759,
    ⵠⵠΔᐃᐃⲆⵠ: 760,
    ΔⵠⲆᐃⲆⵠΔ: 761,
    ⲆⲆⲆᐃΔΔⵠ: 762,
    ⲆΔᐃⵠᐃᐃΔ: 763,
    ΔᐃⵠᐃⲆⵠⲆ: 764,
    ⲆⲆⵠᐃΔᐃᐃ: 765,
    ΔⲆᐃⲆᐃⵠΔ: 766,
    ᐃᐃΔᐃⲆⵠⲆ: 767,
    ΔΔᐃᐃⵠⲆΔ: 768,
    ⲆⲆⵠⲆᐃΔΔ: 769,
    ᐃⵠⲆΔⵠⲆⲆ: 770,
    ⵠᐃᐃⵠⵠΔⲆ: 771,
    ⵠᐃΔᐃᐃᐃΔ: 772,
    ⲆΔΔⲆⲆΔΔ: 773,
    ᐃⲆⲆΔΔⲆΔ: 774,
    ᐃᐃᐃⲆᐃΔᐃ: 775,
    ᐃⲆⲆᐃⲆᐃᐃ: 776,
    ⲆᐃⲆᐃΔⲆⵠ: 777,
    ΔⵠⲆⵠᐃᐃⲆ: 778,
    ΔⵠΔⵠⵠⵠΔ: 779,
    ΔⲆⵠⵠᐃΔᐃ: 780,
    ⲆᐃΔᐃⵠΔⲆ: 781,
    ᐃΔⲆᐃΔΔⲆ: 782,
    ⵠᐃᐃᐃΔΔᐃ: 783,
    ᐃⵠΔⵠⲆΔⵠ: 784,
    ⲆᐃᐃⵠⵠΔᐃ: 785,
    ΔⲆᐃᐃΔⵠⲆ: 786,
    ⲆΔᐃᐃᐃᐃⵠ: 787,
    ᐃⵠΔⲆᐃᐃΔ: 788,
    ⲆⵠΔⲆⵠΔΔ: 789,
    ᐃΔⵠΔⲆᐃΔ: 790,
    ᐃᐃⵠⵠⲆⵠΔ: 791,
    ᐃΔⲆⲆⲆΔΔ: 792,
    ⲆⵠⵠⲆΔ: 793,
    ᐃᐃⲆⵠⵠΔᐃ: 794,
    ⵠⲆΔΔΔΔⲆ: 795,
    ΔⲆⵠⲆⵠ: 796,
    ⵠⲆⲆⲆⲆΔⲆ: 797,
    ᐃⵠΔᐃΔⲆⲆ: 798,
    ⵠⲆΔⵠⵠΔⲆ: 799,
    ᐃΔᐃⲆΔᐃⲆ: 800,
    ΔΔᐃΔΔΔⲆ: 801,
    ᐃᐃᐃⲆΔ: 802,
    ᐃⵠΔⵠⵠᐃΔ: 803,
    ⲆⵠⲆⲆⵠⲆⲆᐃⲆ: 804,
    ⲆⲆⲆᐃⲆⲆⵠΔᐃ: 805,
    ᐃᐃⵠΔⵠᐃⵠΔⵠ: 806,
    ⲆⵠⲆⵠⲆⲆⲆⲆᐃ: 807,
    ⵠᐃⲆΔⵠΔΔ: 808,
    ⲆᐃⲆⲆΔᐃΔ: 809,
    ⲆΔⲆⵠΔⲆΔ: 810,
    ⵠᐃⵠⵠΔΔᐃ: 811,
    ΔⵠⲆΔᐃᐃⲆ: 812,
    ⵠᐃᐃⵠᐃⲆⵠ: 813,
    ⵠⵠⵠⵠΔⲆΔ: 814,
    ⲆⵠΔⲆΔⲆⵠ: 815,
    ᐃⵠⲆΔⲆⵠⵠ: 816,
    ᐃΔᐃⲆΔᐃΔ: 817,
    ΔⵠⲆⵠΔ: 818,
    ΔΔⵠᐃⵠ: 819,
    ΔⵠΔᐃΔᐃᐃ: 820,
    ⲆⲆⵠⲆⵠᐃⵠ: 821,
    ⲆⵠᐃⲆⲆᐃΔ: 822,
    ᐃΔⲆᐃⵠⲆⵠ: 823,
    ᐃⵠΔΔᐃΔΔ: 824,
    ᐃᐃᐃᐃⵠΔᐃ: 825,
    ᐃⲆᐃΔⵠⵠⵠ: 826,
    ⵠⲆΔᐃⲆⲆⲆ: 827,
    ⲆΔⲆⲆᐃΔⲆ: 828,
    ᐃΔΔΔⵠⲆⲆ: 829,
    ᐃΔⲆᐃΔΔᐃ: 830,
    ΔⲆⲆⵠΔⵠⲆ: 831,
    ⵠⲆⵠΔⵠᐃⵠⲆᐃ: 832,
    ⵠΔᐃⵠᐃⵠΔΔΔ: 833,
    ⲆⵠⲆⵠⲆᐃΔ: 834,
    ⲆΔⲆⲆⲆⵠⲆ: 835,
    ΔΔⵠΔᐃΔΔ: 836,
    ᐃΔⵠΔᐃⵠⲆ: 837,
    ᐃⵠⲆⵠΔΔΔ: 838,
    ⲆᐃΔΔᐃΔⵠ: 839,
    ᐃⵠᐃᐃⲆⵠΔ: 840,
    ⵠⵠⵠΔⲆΔⲆ: 841,
    ⵠⲆⵠⵠᐃᐃΔ: 842,
    ΔᐃΔᐃᐃⲆΔ: 843,
    ΔⲆⲆⲆΔᐃᐃ: 844,
    ⵠⵠΔᐃⲆⲆᐃ: 845,
    ΔⲆΔᐃΔⲆⵠ: 846,
    ΔⲆᐃᐃⲆⵠⵠ: 847,
    ⲆᐃⲆᐃᐃᐃᐃ: 848,
    ⲆⲆΔᐃᐃᐃᐃ: 849,
    ⵠⲆⲆⵠⲆⲆⵠ: 850,
    ΔⲆΔⲆⵠⲆⵠ: 851,
    ⵠⵠΔⲆΔⵠⵠᐃΔ: 852,
    ᐃⲆΔΔᐃⵠᐃ: 853,
    ΔΔΔΔΔ: 854,
    ⲆⵠⵠⲆⵠᐃΔⵠΔ: 855,
    ⵠᐃⲆΔⵠᐃΔⲆᐃ: 856,
    ΔⲆⲆⲆᐃⵠⲆⵠⵠ: 857,
    ⲆⲆⵠᐃᐃⲆⲆⵠⵠ: 858,
    ⲆⵠΔᐃⲆΔᐃ: 859,
    ΔᐃⵠΔΔⵠⲆ: 860,
    ⲆΔⲆᐃᐃΔⵠ: 861,
    ΔΔΔⲆΔⵠΔ: 862,
    ΔᐃⲆⵠⲆΔⲆ: 863,
    ΔⲆⲆⵠᐃᐃΔΔⵠ: 864,
    ᐃΔⲆΔⵠⲆΔ: 865,
    ⲆⲆⲆΔΔⲆⵠ: 866,
    ᐃⵠⲆⲆΔⲆΔ: 867,
    ΔⲆᐃᐃⵠⲆⲆ: 868,
    ΔⵠⲆΔᐃⲆⵠ: 869,
    ⲆᐃⵠᐃⲆΔⲆ: 870,
    ΔⵠᐃⵠΔⵠᐃ: 871,
    ᐃⵠᐃⵠⲆ: 872,
    ΔⲆⵠⵠΔⲆᐃᐃⲆ: 873,
    ⵠⲆΔⵠⲆⲆᐃ: 874,
    ⵠᐃᐃⲆⵠⲆⲆ: 875,
    ⵠΔⲆⲆΔᐃⲆ: 876,
    ᐃΔΔᐃⲆᐃⲆ: 877,
    ⲆᐃⵠᐃⵠᐃⲆ: 878,
    ⵠᐃⲆⲆⲆⲆᐃ: 879,
    ΔⵠᐃᐃⵠⵠⲆ: 880,
    ⵠⲆⵠⲆΔᐃⲆ: 881,
    ⲆΔᐃΔᐃᐃᐃ: 882,
    ⵠΔⲆⲆⲆⲆⲆ: 883,
    ⵠΔΔⲆᐃⲆᐃ: 884,
    ᐃⲆⲆⲆⵠᐃᐃ: 885,
    ΔΔⲆⲆⲆΔᐃ: 886,
    ⵠⵠⵠⵠⲆ: 887,
    ΔⲆΔⵠᐃᐃⲆ: 888,
    ᐃⲆⵠᐃᐃΔⲆ: 889,
    ⲆΔⲆⲆᐃⵠΔ: 890,
    ⵠΔⵠⵠⲆⲆⲆ: 891,
    ΔᐃⵠΔΔⲆⵠ: 892,
    ᐃⲆⵠᐃᐃᐃⲆ: 893,
    ᐃⲆⲆᐃΔⵠᐃ: 894,
    ΔⲆᐃⲆΔᐃΔ: 895,
    ⵠⵠᐃᐃⵠⲆᐃ: 896,
    ΔⵠᐃⵠᐃⲆⲆ: 897,
    ᐃⲆᐃᐃΔᐃⵠ: 898,
    ᐃⲆⵠΔΔⲆⵠ: 899,
    ⲆⲆᐃΔⲆⵠΔ: 900,
    ΔⲆⵠᐃᐃᐃⵠ: 901,
    ᐃⲆΔⵠⲆᐃⲆ: 902,
    ⵠⲆⵠⲆΔᐃᐃ: 903,
    ⵠᐃΔΔΔΔΔ: 904,
    ⵠᐃᐃΔᐃΔΔ: 905,
    ΔᐃⵠⵠⲆⵠⲆ: 906,
    ᐃΔⲆⵠⲆᐃⲆ: 907,
    ⵠⵠΔᐃⲆΔΔ: 908,
    ᐃᐃⵠΔⵠΔᐃ: 909,
    ⵠⲆⵠΔⵠⲆⲆ: 910,
    ⲆⵠᐃⲆΔΔⵠ: 911,
    ⲆᐃᐃᐃΔΔⲆ: 912,
    ⲆᐃⲆⵠᐃⵠⵠ: 913,
    ⲆΔⲆⵠⲆᐃᐃᐃⵠ: 914,
    ⲆᐃΔⵠΔᐃΔΔⵠ: 915,
    ᐃⲆⵠⲆΔΔⲆⲆΔ: 916,
    ⵠⵠᐃΔᐃΔⲆⵠⲆ: 917,
    ΔΔⲆᐃᐃⲆΔ: 918,
    ᐃⲆᐃΔⵠⲆⵠ: 919,
    ΔⲆᐃΔᐃ: 920,
    ΔᐃᐃΔᐃΔⵠ: 921,
    ᐃⵠΔⵠⵠⵠᐃ: 922,
    ⲆᐃΔⲆΔⲆⵠ: 923,
    ᐃⲆΔΔΔΔⲆ: 924,
    ᐃᐃⵠᐃᐃΔΔ: 925,
    ⲆᐃΔⲆⵠΔⵠ: 926,
    ⵠΔⵠⲆΔᐃⲆ: 927,
    ΔᐃΔᐃΔΔᐃ: 928,
    ᐃΔΔᐃⵠᐃⵠ: 929,
    ⲆⲆᐃΔⲆᐃᐃ: 930,
    ΔⲆⵠⵠⲆⵠⲆ: 931,
    ⵠᐃΔᐃⵠⵠᐃ: 932,
    ᐃᐃᐃᐃⵠⲆⲆ: 933,
    ⵠⵠⵠⵠᐃⲆⵠ: 934,
    ᐃΔΔΔⲆⵠΔ: 935,
    ⲆⲆⵠⵠᐃΔᐃ: 936,
    ⲆⲆⵠᐃᐃⵠᐃ: 937,
    ᐃⵠⵠⵠΔᐃⵠ: 938,
    ⲆⵠΔᐃΔⲆⵠ: 939,
    ⲆΔΔᐃΔΔⵠΔᐃ: 940,
    ⲆΔⵠⲆᐃ: 941,
    ᐃⲆⵠᐃⲆⵠⲆ: 942,
    ⲆᐃᐃⵠᐃΔΔ: 943,
    ⵠΔΔΔΔⲆⲆ: 944,
    ᐃⵠΔⵠⲆⲆⲆ: 945,
    ⵠⵠΔΔⵠᐃᐃ: 946,
    ⵠΔⲆⲆⲆⲆᐃ: 947,
    ⵠΔΔΔΔᐃⲆ: 948,
    ᐃᐃᐃᐃΔⲆⲆ: 949,
    ᐃᐃᐃΔᐃⲆⲆ: 950,
    ᐃⲆⲆΔⲆΔⵠ: 951,
    ⲆⲆᐃΔΔⵠΔ: 952,
    ΔⵠΔⵠⲆΔᐃ: 953,
    ᐃᐃᐃⲆⲆⲆΔ: 954,
    ⵠⵠᐃⵠᐃᐃⵠ: 955,
    ᐃΔⵠᐃⲆⵠⲆ: 956,
    ⲆⵠᐃᐃⲆⲆⲆ: 957,
    ⵠⲆⲆᐃΔᐃᐃ: 958,
    ᐃᐃⵠΔΔΔⵠ: 959,
    ᐃΔΔⲆⵠᐃⵠ: 960,
    ⲆⵠᐃᐃⲆΔΔ: 961,
    ⲆᐃᐃⲆΔᐃΔ: 962,
    ᐃⵠⵠΔᐃⵠⲆ: 963,
    ᐃᐃⵠⲆΔⲆⵠⲆⲆ: 964,
    ⲆΔᐃΔⵠΔⵠ: 965,
    ΔΔᐃᐃΔⵠΔ: 966,
    ⲆⲆΔⵠⲆΔⵠ: 967,
    ΔⵠⵠⲆⵠᐃⵠ: 968,
    ⵠⵠⵠΔⲆⲆᐃ: 969,
    ⲆΔⵠⵠⲆΔΔ: 970,
    ⵠᐃⵠᐃⲆᐃΔ: 971,
    ⵠᐃⲆᐃΔᐃᐃ: 972,
    ⵠΔⵠᐃΔⲆⲆ: 973,
    ΔⵠΔΔΔΔⵠ: 974,
    ΔᐃᐃⵠΔⵠⵠ: 975,
    ⲆΔᐃΔΔⲆᐃ: 976,
    ⲆᐃⵠΔΔΔⲆ: 977,
    ΔⵠΔΔⲆⵠᐃ: 978,
    ᐃᐃⵠᐃⲆᐃⵠ: 979,
    ᐃⲆⲆⵠⲆᐃⲆ: 980,
    ᐃⵠⲆᐃⵠΔⲆ: 981,
    ⲆΔⲆⵠᐃΔΔ: 982,
    ⵠΔᐃᐃⵠⵠⵠ: 983,
    ᐃΔᐃᐃᐃΔⵠ: 984,
    ΔᐃΔᐃᐃⲆⵠ: 985,
    ΔⵠⲆΔΔᐃᐃ: 986,
    ΔᐃΔΔⲆⵠᐃ: 987,
    ΔᐃΔⲆⲆⵠⲆ: 988,
    ⵠⵠⵠΔⲆ: 989,
    ⵠᐃΔᐃᐃᐃⲆ: 990,
    ΔΔΔᐃΔⵠΔ: 991,
    ⲆⵠΔΔᐃᐃΔ: 992,
    ᐃⵠᐃⲆⲆⵠⲆ: 993,
    ⵠᐃⲆⵠᐃΔΔ: 994,
    ⲆᐃΔⵠΔᐃⵠ: 995,
    ⲆᐃΔⲆᐃᐃΔ: 996,
    ᐃᐃΔΔᐃΔⵠ: 997,
    ΔⲆΔᐃⲆᐃΔ: 998,
    ⵠⲆᐃⵠⲆᐃᐃ: 999,
    ⵠᐃΔⵠᐃᐃᐃ: 1000,
    ⵠⲆⲆⲆⲆⲆᐃ: 1001,
    ΔΔⲆᐃᐃᐃᐃ: 1002,
    ΔⲆᐃⲆᐃⵠᐃ: 1003,
    ⵠΔⲆᐃⵠⵠᐃ: 1004,
    ⲆᐃΔⵠᐃᐃⲆ: 1005,
    ᐃⵠⲆΔⲆⲆⵠ: 1006,
    ⵠⵠΔⲆΔΔᐃ: 1007,
    ⵠᐃⲆⵠⵠⲆⵠ: 1008,
    ᐃⵠⵠⵠᐃΔΔ: 1009,
    ᐃᐃⵠⲆⵠΔⵠ: 1010,
    ⲆΔⵠⲆⲆⵠⲆ: 1011,
    ᐃⵠΔⲆⵠⵠᐃ: 1012,
    ΔⵠᐃⲆⲆⵠΔ: 1013,
    ΔⲆⲆⲆⲆΔΔ: 1014,
    ΔᐃⵠΔⵠΔΔ: 1015,
    ΔᐃⲆᐃⲆⲆⵠ: 1016,
    ⵠΔΔᐃᐃΔᐃ: 1017,
    ⲆΔⵠⵠΔⵠⲆ: 1018,
    ᐃⲆᐃⵠᐃΔΔ: 1019,
    ᐃⲆⵠⲆⵠΔⵠ: 1020,
    ⲆᐃΔᐃᐃⲆΔ: 1021,
    ⲆᐃⲆⲆⲆⵠⲆ: 1022,
    ᐃᐃⵠᐃᐃᐃᐃ: 1023,
    ΔΔⲆⲆ: 1024,
    ᐃⲆᐃⲆ: 1025,
    ⲆⵠⵠⲆⵠᐃⲆ: 1026,
    ΔⲆΔⲆⵠⵠᐃ: 1027,
    ΔⲆᐃⲆⲆⲆⲆ: 1028,
    ΔⲆⲆᐃᐃᐃⵠ: 1029,
    ⵠⲆⲆᐃⵠΔᐃ: 1030,
    ΔΔᐃΔⲆΔⵠ: 1031,
    ⲆᐃⵠᐃᐃΔΔ: 1032,
    ⲆᐃᐃⲆⵠ: 1033,
    ΔⵠΔⲆⲆᐃΔ: 1034,
    ⲆⲆⵠᐃⵠ: 1035,
    ΔΔᐃⵠⲆⵠᐃ: 1036,
    ΔⲆΔⵠᐃ: 1037,
    ⲆⵠⲆᐃⵠΔⵠ: 1038,
    ΔⲆΔⵠⲆ: 1039,
    ᐃⲆⲆⵠᐃᐃΔ: 1040,
    ᐃⲆᐃⵠᐃ: 1041,
    ᐃΔᐃⵠΔ: 1042,
    ᐃΔⲆⵠᐃⲆⵠ: 1043,
    ⲆⵠⲆᐃⵠⲆⵠ: 1044,
    ᐃᐃᐃΔΔⲆᐃ: 1045,
    ⲆⵠΔⵠⵠⵠⵠ: 1046,
    ⵠⵠΔΔᐃⵠⵠ: 1047,
    ⵠΔΔⲆΔᐃΔ: 1048,
    ⵠⵠⵠᐃⵠᐃΔ: 1049,
    ΔⵠΔⵠⵠⲆⵠ: 1050,
    ΔΔⵠᐃⲆΔΔ: 1051,
    ⲆΔᐃⲆᐃ: 1052,
    ⵠⲆᐃⵠⲆⵠᐃ: 1053,
    ᐃⵠⵠᐃⵠ: 1054,
    ᐃᐃᐃⵠⵠⵠΔ: 1055,
    ΔⲆⲆᐃⵠΔⵠ: 1056,
    ⵠᐃΔᐃᐃⵠᐃ: 1057,
    ⵠⲆⲆⵠᐃᐃᐃ: 1058,
    ΔⲆΔⵠᐃⵠⲆ: 1059,
    ᐃΔⵠΔᐃᐃⵠ: 1060,
    ᐃⲆΔᐃⵠᐃᐃⲆΔ: 1061,
    ΔᐃᐃⵠⲆⵠⵠ: 1062,
    ᐃᐃᐃⵠⲆΔᐃ: 1063,
    ⲆΔⵠⵠⵠᐃⵠⵠᐃ: 1064,
    ⲆᐃΔⵠⲆⲆⲆ: 1065,
    ⵠΔᐃΔΔΔⲆ: 1066,
    ⲆΔⵠᐃΔΔⵠ: 1067,
    ⵠⲆⲆⵠᐃᐃⲆ: 1068,
    ⲆⵠΔᐃⵠ: 1069,
    ᐃᐃΔⵠⲆⵠΔ: 1070,
    ΔⲆⲆⵠΔⲆΔ: 1071,
    ᐃⵠΔᐃᐃᐃⵠ: 1072,
    ⲆΔΔⲆⲆⵠⵠ: 1073,
    ⵠⵠⲆᐃⵠⵠⵠ: 1074,
    ᐃⲆⵠⵠᐃⲆΔ: 1075,
    ⵠⵠⵠⵠⲆᐃⵠ: 1076,
    ΔⲆⵠⲆⲆΔᐃ: 1077,
    ΔⲆᐃⵠᐃᐃⵠ: 1078,
    ⲆⲆᐃⲆΔΔΔ: 1079,
    ΔΔᐃⲆᐃⵠⲆ: 1080,
    ⵠⲆⵠᐃⵠᐃⵠ: 1081,
    ⲆⵠⵠΔᐃⵠᐃ: 1082,
    ⲆᐃⵠΔᐃᐃΔ: 1083,
    ⲆⲆΔⵠⲆ: 1084,
    ᐃᐃΔⵠⵠⵠⲆ: 1085,
    ΔΔⵠΔᐃΔᐃ: 1086,
    ⵠΔΔⵠΔⵠᐃ: 1087,
    ⵠⲆⵠⲆⵠⵠΔ: 1088,
    ᐃᐃⵠⲆⵠΔΔ: 1089,
    ⵠΔⲆⲆᐃΔⵠ: 1090,
    ⵠⲆⲆΔΔᐃΔ: 1091,
    ⵠΔΔⲆⵠⲆᐃ: 1092,
    ⲆⵠᐃᐃⲆᐃⲆ: 1093,
    ⲆΔⵠΔⵠⲆΔ: 1094,
    ᐃⵠⵠᐃᐃⵠⲆ: 1095,
    ⵠᐃΔⵠᐃⲆΔ: 1096,
    ⵠᐃᐃⲆᐃⲆⵠ: 1097,
    ⵠⵠⲆΔᐃⵠⲆ: 1098,
    ⵠᐃⲆⲆΔ: 1099,
    ⵠᐃⲆΔΔᐃᐃ: 1100,
    ⲆⲆᐃΔⵠΔᐃ: 1101,
    ᐃⲆᐃΔⲆᐃΔ: 1102,
    ⵠⵠᐃΔⵠⲆⵠ: 1103,
    ᐃΔΔΔⵠⲆᐃ: 1104,
    ⲆⲆⵠΔᐃⲆⲆ: 1105,
    ⵠⲆᐃⵠⵠᐃⲆ: 1106,
    ᐃⲆⲆⵠⲆⵠⲆ: 1107,
    ⲆⲆⵠᐃᐃᐃⲆ: 1108,
    ΔⵠⵠᐃⵠΔᐃ: 1109,
    ᐃⲆⲆᐃⲆΔⵠ: 1110,
    ⵠΔⵠⵠⵠᐃⵠ: 1111,
    ΔᐃⲆᐃⲆⵠΔ: 1112,
    ⲆᐃⲆⲆΔⵠΔ: 1113,
    ⲆᐃᐃᐃΔⵠᐃ: 1114,
    ⲆⲆⲆⲆⲆᐃᐃ: 1115,
    ᐃΔⵠᐃᐃΔᐃ: 1116,
    ⵠⲆⵠΔΔΔⲆ: 1117,
    ΔΔΔᐃΔⲆⲆ: 1118,
    ΔᐃⵠⵠΔΔᐃ: 1119,
    ⵠΔⵠᐃⵠ: 1120,
    ⵠᐃⵠᐃΔΔⵠ: 1121,
    ΔᐃΔᐃⲆᐃᐃ: 1122,
    ΔΔᐃΔⲆⵠΔ: 1123,
    ᐃⲆⵠⵠᐃⲆᐃ: 1124,
    ⵠⵠΔΔⲆᐃⲆ: 1125,
    ΔΔᐃᐃᐃΔΔ: 1126,
    ΔⲆⵠⵠΔᐃΔ: 1127,
    ⲆⵠⵠᐃΔᐃᐃ: 1128,
    ᐃᐃⵠⲆᐃᐃⲆ: 1129,
    ⲆⵠⵠΔᐃⲆⵠ: 1130,
    ⲆⵠΔᐃⵠᐃΔ: 1131,
    ΔⵠⵠᐃⲆΔΔ: 1132,
    ᐃΔⲆⲆⵠΔΔ: 1133,
    ΔᐃⵠⲆⲆⵠⲆ: 1134,
    ⲆᐃⲆᐃⲆⲆⲆ: 1135,
    ⵠⵠΔΔⲆᐃⵠ: 1136,
    ⵠⲆⲆᐃⵠⵠⵠ: 1137,
    ⵠⵠᐃΔⵠᐃΔ: 1138,
    ⲆⲆⵠΔⲆⵠⵠ: 1139,
    ΔΔⵠΔⲆⲆΔ: 1140,
    ⵠΔᐃᐃⵠΔⵠ: 1141,
    ⲆΔⲆΔΔⲆⵠ: 1142,
    ⵠᐃⲆΔⵠⵠᐃ: 1143,
    ΔᐃΔᐃⲆᐃⵠ: 1144,
    ⵠΔᐃⵠⵠⵠΔ: 1145,
    ⲆᐃⵠᐃⵠⲆⲆ: 1146,
    ΔⵠᐃΔΔΔᐃ: 1147,
    ⵠᐃΔᐃᐃΔᐃ: 1148,
    ΔⲆⲆΔⲆΔⵠ: ["#E9CF96", "#144940"],
    ΔⲆⲆᐃᐃΔᐃ: 1149,
    ⵠᐃⵠⵠᐃⲆⲆ: 1150,
    ᐃⲆᐃⲆᐃⵠⲆ: 1151,
    ᐃⵠⲆᐃⵠΔΔ: 1152,
    ⲆⵠⲆΔΔⲆⵠ: 1153,
    ⲆⲆΔΔΔΔᐃ: 1154,
    ᐃⵠⲆΔΔⵠⵠ: 1155,
    ΔΔⵠⵠⵠ: 1156,
    ΔᐃⵠᐃᐃΔⲆ: 1157,
    ΔⵠᐃⲆᐃⲆΔ: 1158,
    ⲆᐃΔΔⲆΔᐃ: 1159,
    ⲆΔⲆⵠΔⵠΔ: 1160,
    ΔⲆⲆᐃⲆⲆⵠ: 1161,
    ⵠΔᐃΔⵠⲆΔ: 1162,
    ΔᐃⵠⲆⵠᐃΔ: 1163,
    ΔⵠΔΔⲆᐃⵠ: 1164,
    ΔΔⵠᐃⲆⲆⲆ: 1165,
    ⵠᐃΔΔⲆⲆⵠ: 1166,
    ᐃⲆⵠⵠΔΔᐃ: 1167,
    ⲆⵠΔΔΔΔΔ: 1168,
    ⲆᐃΔⵠΔΔⲆ: 1169,
    ᐃⵠⵠⲆᐃⵠΔ: 1170,
    ⲆⲆΔⵠΔΔⵠ: 1171,
    ᐃΔᐃᐃΔⲆⲆ: 1172,
    ᐃⵠᐃᐃⲆΔⵠ: 1173,
    ΔⲆⲆΔⵠⲆⲆ: 1174,
    ΔᐃⵠΔᐃⲆΔ: 1175,
    ⲆΔⲆⲆⵠⵠΔ: 1176,
    ⵠᐃᐃⲆⲆⵠⲆ: 1177,
    ⲆΔΔⲆⵠⲆⲆ: 1178,
    ΔⲆᐃⲆⲆⵠΔ: 1179,
    ᐃᐃᐃᐃⲆⵠᐃ: 1180,
    ⵠΔᐃᐃⲆᐃᐃ: 1181,
    ΔⲆᐃΔᐃΔⲆ: 1182,
    ⲆᐃⵠΔⵠΔⵠ: 1183,
    ᐃᐃᐃⵠⲆⲆᐃ: 1184,
    ᐃⵠⵠᐃⲆᐃΔ: 1185,
    ⵠⲆΔⲆΔᐃⵠ: 1186,
    ΔⵠᐃⲆΔⵠⲆ: 1187,
    ᐃΔⵠⵠⲆᐃΔ: 1188,
    ⲆⵠⲆⲆᐃⲆᐃ: 1189,
    ⵠⵠⵠᐃΔⲆΔ: 1190,
    ⲆⵠᐃᐃⲆΔᐃ: 1191,
    ΔⲆΔΔΔⲆΔ: 1192,
    ⵠΔⲆⵠⲆⲆⲆ: 1193,
    ⲆΔⲆⵠⲆᐃⲆ: 1194,
    ᐃⵠᐃⵠⲆⵠⵠ: 1195,
    ⵠⲆΔⲆⲆΔⵠ: 1196,
    ⵠΔⵠᐃⵠⲆᐃ: 1197,
    ΔΔⵠⵠⲆⵠΔ: 1198,
    ᐃⵠΔⵠⵠΔⲆ: 1199,
    ⵠᐃΔⲆΔⲆⵠ: 1200,
    ⵠⵠⲆΔΔᐃⵠ: 1201,
    ΔⲆΔⵠᐃᐃⵠ: 1202,
    ⵠⵠⲆᐃⵠᐃⲆ: 1203,
    ᐃⵠⲆⵠⲆᐃΔ: 1204,
    ᐃᐃⵠᐃᐃΔᐃ: 1205,
    ᐃᐃΔΔᐃᐃᐃ: 1206,
    ⵠⵠᐃΔⲆⵠᐃ: 1207,
    ᐃᐃΔⵠΔⵠᐃ: 1208,
    ᐃᐃΔⲆᐃᐃⲆ: 1209,
    ⲆⵠⵠⲆᐃᐃΔ: 1210,
    ᐃΔⲆᐃΔⲆᐃ: 1211,
    ⵠΔⲆΔⲆⲆᐃ: 1212,
    ⲆⲆⵠᐃΔΔᐃ: 1213,
    ⵠⵠΔΔⵠⲆⲆ: 1214,
    ⵠΔⲆᐃⵠⵠΔ: 1215,
    ᐃⵠⲆⲆΔⲆⲆ: 1216,
    ΔᐃᐃᐃᐃⲆⲆ: 1217,
    ᐃΔⲆⲆⲆ: 1218,
    ᐃⲆΔΔᐃⵠⵠ: 1219,
    ΔΔⵠⲆⲆ: 1220,
    ⲆΔⵠΔⲆⵠⲆ: 1221,
    ⵠⲆΔΔⲆⵠΔ: 1222,
    ⵠΔΔⵠⲆΔⲆ: 1223,
    ⵠᐃⲆⵠⵠΔⵠ: 1224,
    Ⲇᐃᐃⵠᐃᐃⵠ: 1225,
    ⵠⲆⲆⵠⵠⵠᐃ: 1226,
    ΔΔΔΔⲆᐃⵠ: 1227,
    ⵠⵠᐃⲆᐃᐃⲆ: 1228,
    ᐃⵠⵠⲆᐃᐃᐃ: 1229,
    ᐃΔᐃⵠⵠΔⲆ: 1230,
    ᐃⵠᐃⲆᐃΔⵠ: 1231,
    ᐃΔΔᐃΔᐃᐃ: 1232,
    ⲆΔᐃⲆΔΔᐃ: 1233,
    ⲆᐃΔⲆΔΔᐃ: 1234,
    ⵠᐃⲆⵠᐃΔⲆ: 1235,
    ⲆⲆᐃⵠᐃΔⲆ: 1236,
    ΔᐃᐃᐃⲆⵠⲆ: 1237,
    ⵠᐃⵠⵠΔΔⵠ: 1238,
    ⵠᐃΔΔΔᐃⵠ: 1239,
    ᐃⵠⲆⲆᐃⵠΔ: 1240,
    ΔⵠᐃΔⲆⲆΔ: 1241,
    ⵠⲆᐃᐃΔΔⵠ: 1242,
    ΔᐃⵠᐃΔΔⲆ: 1243,
    ⲆⲆⵠⵠⲆᐃⵠ: 1244,
    ⲆⲆⲆⵠᐃᐃᐃ: 1245,
    ΔⲆⵠΔᐃⵠⵠ: 1246,
    ⵠⵠᐃⲆᐃⲆᐃ: 1247,
    ⲆⵠΔΔΔΔᐃ: 1248,
    ΔⵠⲆⲆᐃᐃΔ: 1249,
    ΔΔᐃᐃΔᐃⲆ: 1250,
    ⵠⵠⲆⵠⵠᐃⵠ: 1251,
    ⲆᐃᐃΔΔᐃⲆ: 1252,
    ΔⲆⲆΔΔᐃⵠ: 1253,
    ᐃᐃᐃⲆᐃᐃⲆ: 1254,
    ⵠⲆᐃⲆⲆΔⲆ: 1255,
    ⲆᐃⵠⲆᐃᐃⵠ: 1256,
    ΔⲆΔᐃΔⲆΔ: 1257,
    ⵠⵠⵠⲆΔⲆΔ: 1258,
    ⲆᐃⲆⲆⲆᐃᐃ: 1259,
    ᐃΔⵠⲆⲆⵠⲆ: 1260,
    ⲆᐃᐃᐃⵠᐃⲆ: 1261,
    ᐃΔᐃΔΔᐃᐃ: 1262,
    ⲆⵠⵠᐃᐃⲆⲆ: 1263,
    ⲆⵠᐃᐃΔⵠΔ: 1264,
    ⵠΔⲆᐃⲆⵠΔ: 1265,
    ΔⲆⵠᐃᐃⲆΔ: 1266,
    ⲆⲆⵠⵠΔⵠᐃ: 1267,
    ΔⲆΔⵠⵠᐃⵠ: 1268,
    ΔⵠΔⵠΔΔⲆ: 1269,
    ⵠΔᐃᐃΔΔᐃ: 1270,
    ⵠⵠⲆᐃΔᐃᐃ: 1271,
    ⵠᐃⲆⵠΔⵠⵠ: 1272,
    ⵠΔⲆⲆⵠⲆⵠ: 1273
  };
  const Yr = Sj;
  Nr = Lr;
  const Zr = $a;
  var $r = {
    ΔᐃᐃⲆⲆ: 0,
    ᐃΔΔⵠΔ: 1,
    ⲆᐃΔᐃⵠ: 2,
    ⵠⲆΔⵠᐃ: 3,
    ⲆΔⲆⲆⵠ: 4,
    ⲆⵠⵠⲆⲆ: 5,
    ⵠᐃⲆΔΔ: 6,
    ᐃⲆⵠΔⲆ: 7,
    ΔⲆⲆⵠⲆ: 8,
    ⲆⵠΔⵠΔ: 9,
    ⲆᐃΔⲆΔ: 10,
    ⲆⲆⵠⲆⲆ: 11,
    ⵠΔΔΔⵠ: 12,
    ᐃⵠⵠⵠᐃ: 13,
    ᐃⵠⲆⵠΔ: 14,
    ⵠⵠᐃᐃⲆ: 15,
    ᐃΔΔΔΔ: 16,
    ⲆΔΔⵠⵠ: 17,
    ⵠᐃⵠᐃΔ: 18,
    ⵠᐃⲆⲆⵠ: 19,
    ⲆΔᐃΔⲆ: 20,
    ᐃᐃΔⵠΔ: 21,
    ⲆⵠⲆᐃΔ: 22,
    ᐃΔΔᐃΔ: 23,
    ᐃⵠΔΔⲆ: 24,
    ᐃᐃΔⲆⲆ: 25,
    ⵠΔᐃⵠᐃ: 26,
    ⵠᐃᐃⵠΔ: 27,
    ᐃᐃᐃᐃⲆ: 28,
    ᐃΔⵠⲆᐃ: 29,
    ᐃΔⲆⵠΔ: 30,
    ⲆⲆΔᐃᐃ: 31,
    ΔⲆᐃΔⵠ: 32,
    Ⲇᐃᐃᐃᐃ: 33,
    ΔⵠᐃΔᐃ: 34,
    ᐃᐃⲆΔⲆ: 35,
    ⵠΔΔΔΔ: 36,
    ᐃΔⲆᐃΔ: 37,
    ΔⲆᐃⵠΔ: 38,
    ⵠⵠΔΔⵠ: 39,
    ⵠᐃΔⲆᐃ: 40,
    ⲆΔᐃΔΔ: 41,
    ᐃⵠᐃᐃⵠ: 42,
    ⲆⲆΔⲆⵠ: 43,
    ᐃⲆⲆᐃΔ: 44,
    ⲆⵠΔᐃᐃ: 45,
    ᐃⵠΔΔΔ: 46,
    ⲆΔⲆⵠΔ: 47,
    ΔⵠⵠΔⲆ: 48,
    ΔΔⵠⵠⲆ: 49,
    ⵠⲆΔⲆᐃ: 50,
    ⲆⵠΔⲆΔ: 51,
    ⲆᐃᐃⵠΔ: 52,
    ⵠᐃⲆⲆᐃ: 53,
    ᐃΔᐃⲆᐃ: 54,
    ⲆⲆⲆⲆⵠ: 55,
    ΔᐃⵠⲆⲆ: 56,
    ᐃᐃᐃᐃᐃ: 57,
    ⵠᐃⲆᐃⵠ: 58,
    ᐃΔⵠⵠΔ: 59,
    ᐃⵠⵠⲆᐃ: 60,
    ΔⵠⵠⲆᐃ: 61,
    ⵠΔᐃⲆΔ: 62,
    ᐃΔⵠⵠⵠ: 63,
    ⵠΔᐃΔΔ: 64,
    Δⵠᐃⵠᐃ: 65,
    Ⲇᐃⵠⵠⵠ: 66,
    ⵠⵠΔⵠⲆ: 67,
    ⲆᐃⲆΔΔ: 68,
    Ⲇᐃⵠᐃⵠ: 69,
    ⲆⵠᐃΔΔ: 70,
    ᐃⲆⵠᐃᐃ: 71,
    ⵠⲆᐃᐃⲆ: 72,
    ᐃⲆΔᐃⲆ: 73,
    ΔⵠⵠΔΔ: 74,
    ΔΔⲆᐃⲆ: 75,
    ΔⵠΔⲆΔ: 76,
    ⵠΔⲆⵠᐃ: 77,
    ᐃΔΔⵠᐃ: 78,
    ᐃⲆⲆⲆⲆ: 79,
    ⲆᐃᐃΔᐃ: 80,
    ⵠᐃᐃΔᐃ: 81,
    ΔᐃᐃᐃΔ: 82,
    ᐃⲆᐃⲆᐃ: 83,
    ᐃⵠⵠⵠΔ: 84,
    ᐃⲆⲆΔΔ: 85,
    ⵠⲆⵠΔᐃ: 86,
    ᐃᐃⲆⵠⵠ: 87,
    Δᐃᐃⵠᐃ: 88,
    ΔᐃΔⲆⲆ: 89,
    ᐃⲆⲆⵠᐃ: 90,
    ⵠⲆⲆⵠⵠ: 91,
    ⲆᐃⵠΔᐃ: 92,
    ᐃⲆⵠⲆⲆ: 93,
    ᐃⵠⵠⲆΔ: 94,
    Δⵠⵠⵠᐃ: 95,
    ᐃΔᐃⲆⲆ: 96,
    ⲆΔᐃΔᐃ: 97,
    ⵠᐃΔΔᐃ: 98,
    ⵠⵠΔᐃᐃ: 99,
    ⵠⲆᐃᐃ: 100,
    ⵠΔΔΔⲆ: 101,
    ⲆⲆⲆᐃⵠ: 102,
    ⵠⵠⲆⵠᐃ: 103,
    ᐃⵠᐃⲆⵠ: 104,
    ⲆⵠᐃᐃΔ: 105,
    ⲆᐃⲆᐃⵠ: 106,
    ⲆᐃⵠΔΔ: 107,
    ⵠᐃⵠᐃⵠ: 108,
    ΔΔΔⵠⵠ: 109,
    ᐃⲆⵠΔᐃ: 110,
    ΔᐃᐃⵠΔ: 111,
    ᐃᐃⲆⲆΔⵠᐃ: 112,
    ⲆⲆᐃΔⲆⲆΔ: 113,
    ⵠΔⲆⲆΔ: 114,
    ⲆⲆⵠⵠᐃ: 115,
    ΔⲆΔΔⲆ: 116,
    ⲆᐃΔⲆⵠ: 117,
    ⲆΔᐃⵠⲆ: 118,
    ΔⵠᐃⲆⵠ: 119,
    ΔⲆⵠⵠⵠ: 120,
    ⲆⲆⵠⵠΔ: 121,
    ᐃⵠᐃΔⵠ: 122,
    Ⲇᐃⵠⵠᐃ: 123,
    Δᐃᐃᐃᐃ: 124,
    ⲆⲆΔⵠⵠ: 125,
    ᐃⵠΔᐃΔ: 126,
    ⵠᐃΔΔⵠ: 127,
    ⲆⲆΔΔⵠ: 128,
    ⵠᐃᐃΔⵠ: 129,
    ⲆⲆᐃᐃⲆ: 130,
    ΔΔΔⲆΔ: 131,
    ΔᐃⲆⵠⲆ: 132,
    ⲆΔᐃΔⵠ: 133,
    ᐃᐃΔᐃΔ: 134,
    ᐃᐃⲆᐃᐃ: 135,
    ⲆΔⲆᐃⲆ: 136,
    Δᐃᐃⵠⵠ: 137,
    ΔΔⲆⵠⲆ: 138,
    ⵠΔΔᐃᐃ: 139,
    ⲆⵠΔⵠⵠ: 140,
    ΔᐃⵠⵠΔ: 141,
    ⲆⵠΔⲆⲆ: 142,
    ⵠΔⲆΔⲆ: 143,
    ΔⵠΔⵠⵠ: 144,
    ⲆΔⵠΔΔ: 145,
    ᐃΔᐃΔⲆ: 146,
    ᐃᐃΔᐃⲆ: 147,
    ΔⲆΔΔΔ: 148,
    ᐃΔⵠᐃⵠ: 149,
    Δⵠᐃᐃᐃ: 150,
    ᐃⲆΔⵠⵠ: 151,
    ⵠᐃⵠⵠΔ: 152,
    ⲆⲆᐃᐃΔ: 153,
    ⲆΔⵠⵠᐃ: 154,
    ΔᐃⲆⵠⵠ: 155,
    ΔΔᐃⲆΔ: 156,
    ΔᐃⵠⲆΔ: 157,
    ΔΔᐃΔΔ: 158,
    ⲆΔⵠΔᐃ: 159,
    ⲆⵠⲆⵠⵠ: 160,
    ⵠΔᐃᐃᐃ: 161,
    ΔⲆⵠΔΔ: 162,
    ⵠⵠⲆΔⲆ: 163,
    ⵠᐃᐃⲆᐃ: 164,
    ᐃⵠⲆⵠⲆ: 165,
    ΔⵠΔΔⵠ: 166,
    ΔᐃⲆᐃᐃ: 167,
    ᐃⲆΔⲆⵠ: 168,
    ⲆᐃᐃⲆᐃ: 169,
    ⲆⲆⲆⵠⵠ: 170,
    ΔΔⲆᐃᐃ: 171,
    ⲆⲆⲆᐃΔ: 172,
    ᐃⵠᐃⵠⵠ: 173,
    ᐃΔⵠⵠᐃ: 174,
    ⵠⵠᐃᐃΔ: 175,
    ⲆⵠΔΔΔ: 176
  };
  Nr = 0;
  var _r = {
    ᐃᐃⲆΔⲆ: 0,
    ⲆⵠⵠⲆⲆ: 1,
    ⵠⵠΔⵠΔ: 2,
    ⵠᐃⲆΔΔ: 3,
    ᐃⲆⵠΔⲆ: 4,
    ⵠΔΔΔΔ: 5,
    ᐃΔⲆᐃΔ: 6,
    ΔᐃΔΔΔ: 7,
    ⲆΔⲆⲆⵠ: 8,
    ⵠΔᐃᐃⵠ: 9,
    ᐃⲆᐃⲆᐃ: 10,
    ᐃⵠⵠⵠΔ: 11,
    ᐃᐃΔⲆⲆ: 12,
    ⵠΔᐃⵠᐃ: 13,
    ⵠᐃᐃⵠΔ: 14,
    ᐃᐃᐃᐃⲆ: 15,
    ⲆⲆΔᐃᐃ: 16,
    ΔⲆᐃΔⵠ: 17,
    Ⲇᐃᐃᐃᐃ: 18,
    ⵠⵠΔΔⵠ: 19,
    Δⵠⵠⵠᐃ: 20,
    ᐃΔᐃⲆⲆ: 21,
    ⲆΔᐃΔᐃ: 22,
    ⲆᐃᐃΔᐃ: 23,
    ⵠᐃᐃΔᐃ: 24,
    Δᐃᐃⵠᐃ: 25,
    ΔᐃΔⲆⲆ: 26,
    ᐃⲆⲆⵠᐃ: 27,
    ᐃⵠΔΔⲆ: 28,
    ⵠⲆᐃᐃ: 29,
    ΔⲆᐃⵠΔ: 30,
    ΔⲆⲆⵠⲆ: 31,
    ⲆⵠΔⵠΔ: 32,
    ᐃΔⵠⲆᐃ: 33,
    ᐃΔⲆⵠΔ: 34,
    ⲆᐃΔⲆΔ: 35,
    ⲆⲆⵠⲆⲆ: 36,
    ⵠΔΔΔⵠ: 37,
    ᐃⵠⵠⵠᐃ: 38,
    ᐃⵠⲆⵠΔ: 39,
    ᐃⲆⲆΔΔ: 40,
    ᐃᐃⵠⲆⲆ: 41,
    ΔⲆΔⲆⲆ: 42,
    ⵠⲆⲆⵠⵠ: 43,
    ⲆᐃⵠΔᐃ: 44,
    ⵠⵠᐃᐃⲆ: 45,
    ᐃΔΔΔΔ: 46,
    ᐃⵠⵠⲆΔ: 47,
    ᐃⲆⵠⲆⲆ: 48,
    ᐃᐃΔⵠΔ: 49,
    ⲆΔΔⵠⵠ: 50,
    ⵠᐃⵠᐃΔ: 51,
    ⵠᐃⲆⲆⵠ: 52,
    ⲆⵠⲆᐃΔ: 53,
    ᐃΔΔᐃΔ: 54,
    ᐃⵠᐃΔⵠ: 55,
    Ⲇᐃⵠⵠᐃ: 56,
    ΔⵠᐃΔᐃ: 57,
    ᐃᐃⲆⵠⵠ: 58,
    ᐃⵠΔᐃΔ: 59,
    ⵠᐃΔΔⵠ: 60,
    ⲆⲆΔΔⵠ: 61,
    ⵠᐃᐃΔⵠ: 62,
    ⲆⲆᐃᐃⲆ: 63,
    ΔΔΔⲆΔ: 64,
    ⲆΔᐃΔⵠ: 65,
    ᐃᐃⲆᐃᐃ: 66,
    Δᐃᐃⵠⵠ: 67,
    ⵠΔΔᐃᐃ: 68,
    ΔᐃⵠⵠΔ: 69,
    ⵠΔⲆΔⲆ: 70,
    ⲆΔⵠΔΔ: 71,
    ᐃΔᐃΔⲆ: 72,
    ᐃᐃΔᐃⲆ: 73,
    ΔⲆΔΔΔ: 74,
    ᐃΔⵠᐃⵠ: 75,
    Δⵠᐃᐃᐃ: 76,
    ᐃⲆΔⵠⵠ: 77,
    ⵠᐃⵠⵠΔ: 78,
    ⲆⲆᐃᐃΔ: 79,
    ⵠᐃΔΔᐃ: 80,
    ⵠⵠΔᐃᐃ: 81,
    ΔᐃᐃᐃΔ: 82,
    ⲆΔⵠⵠᐃ: 83,
    ΔᐃⲆⵠⵠ: 84,
    ΔΔᐃⲆΔ: 85,
    ΔᐃⵠⲆΔ: 86,
    ⲆⵠΔᐃⲆ: 87,
    ⵠⲆⵠΔᐃ: 88,
    ᐃⵠⲆⵠⲆ: 89,
    ᐃⵠᐃⵠⵠ: 90,
    ⲆⵠΔΔΔ: 91,
    ᐃΔⵠⵠᐃ: 92,
    ⵠⵠᐃᐃΔ: 93,
    ΔᐃⲆᐃᐃ: 94,
    ᐃⲆΔⲆⵠ: 95,
    ⲆᐃᐃⲆᐃ: 96,
    ⲆⲆⲆⵠⵠ: 97,
    ΔΔⲆᐃᐃ: 98,
    ⲆⲆⲆᐃΔ: 99,
    ᐃⲆⵠᐃΔ: 100,
    ΔᐃⲆⵠⲆ: 101,
    ᐃᐃΔᐃΔ: 102,
    ⲆΔⲆᐃⲆ: 103,
    ΔΔⲆⵠⲆ: 104,
    ⲆⵠΔⵠⵠ: 105,
    ⲆⵠΔⲆⲆ: 106,
    ΔⵠΔⵠⵠ: 107,
    ᐃΔⵠⲆ: 108,
    ⵠᐃⵠⵠ: 109,
    ⵠᐃⲆⲆⲆ: 110,
    ᐃⲆⵠᐃ: 111,
    ᐃⲆΔⵠ: 112,
    ΔᐃᐃⲆⲆ: 113,
    ⵠⲆΔⵠᐃ: 114,
    ⵠᐃΔⲆᐃ: 115,
    ⵠⵠᐃᐃⵠ: 116,
    ΔΔⵠⵠⲆ: 117,
    ᐃΔΔⵠΔ: 118,
    ⲆᐃΔᐃⵠ: 119,
    ⵠΔΔΔⲆ: 120,
    Ⲇⵠⵠⵠ: 121,
    ᐃΔⵠⵠΔ: 122,
    ᐃⲆⵠᐃᐃ: 123,
    Δⵠᐃⵠᐃ: 124,
    ⲆᐃⲆᐃⵠ: 125,
    ⲆⲆΔⲆᐃ: 126,
    ΔᐃᐃⵠΔ: 127,
    ᐃⲆⵠΔᐃ: 128,
    ΔᐃΔⲆᐃ: 129,
    ⲆΔᐃΔⲆ: 130,
    ᐃⵠᐃⵠᐃ: 131,
    ⲆΔᐃΔΔ: 132,
    ⲆᐃᐃⵠΔ: 133,
    ⲆΔΔᐃⵠ: 134,
    ⵠΔⲆⲆΔ: 135,
    ⵠᐃⲆⲆᐃ: 136,
    ΔΔᐃⵠⲆ: 137,
    ⵠⲆΔⲆᐃ: 138,
    ⵠᐃΔⲆⵠ: 139,
    ᐃᐃΔΔⵠ: 140,
    ΔΔΔⵠⵠ: 141,
    ᐃΔΔΔⲆ: 142,
    ⲆⵠΔⲆΔ: 143,
    Δᐃᐃᐃᐃ: 144,
    ⲆⲆΔⵠⵠ: 145,
    ⲆΔΔᐃᐃ: 146,
    ⲆⲆⲆᐃⵠ: 147,
    ⵠⵠⲆⵠᐃ: 148,
    ⵠⵠⲆⵠⲆ: 149,
    ᐃⲆᐃⵠΔ: 150,
    ⲆⲆⵠⵠᐃ: 151,
    ΔⲆΔΔⲆ: 152,
    ⲆᐃΔⲆⵠ: 153,
    ⲆΔᐃⵠⲆ: 154,
    ΔⵠᐃⲆⵠ: 155,
    ΔⲆⵠⵠⵠ: 156,
    ⲆⲆⵠⵠΔ: 157,
    ᐃⵠᐃⲆⵠ: 158,
    ⲆⵠᐃᐃΔ: 159,
    ⵠⵠΔⵠⲆ: 160,
    ᐃΔⵠᐃⲆ: 161,
    ⲆⲆⲆⲆⵠ: 162,
    ΔᐃⵠⲆⲆ: 163,
    ᐃᐃᐃᐃᐃ: 164,
    ⵠᐃⲆᐃⵠ: 165,
    ΔⵠⵠⲆᐃ: 166,
    ᐃⲆⲆⲆⲆ: 167,
    ⲆᐃⲆΔΔ: 168,
    Ⲇᐃⵠᐃⵠ: 169,
    ⲆⵠᐃΔΔ: 170,
    ⵠΔᐃⲆΔ: 171,
    ᐃΔⵠⵠⵠ: 172,
    ⵠΔᐃΔΔ: 173,
    ⲆⵠⵠΔᐃ: 174,
    ΔᐃΔᐃⵠ: 175,
    ⵠⲆⲆΔᐃ: 176,
    ΔΔⲆⲆᐃ: 177,
    ᐃΔΔⲆΔ: 178,
    ⵠⲆΔᐃᐃ: 179,
    ΔΔᐃΔΔ: 180,
    ⲆΔⵠΔᐃ: 181,
    ⲆⵠⲆⵠⵠ: 182,
    ⵠΔᐃᐃᐃ: 183,
    ⵠᐃΔⵠΔ: 184,
    ᐃⲆΔᐃᐃ: 185,
    ⲆⲆΔⲆΔ: 186,
    ΔⲆᐃᐃⲆ: 187,
    ᐃⵠᐃᐃⵠ: 188,
    ⵠᐃⵠΔⵠ: 189,
    ⲆᐃⵠΔΔ: 190,
    ⲆⲆΔⲆⵠ: 191,
    ⲆᐃΔᐃΔ: 192,
    ᐃⲆⲆᐃΔ: 193,
    ᐃⲆᐃᐃΔ: 194,
    ᐃΔᐃⲆᐃ: 195,
    ⲆⵠᐃΔᐃ: 196,
    ⵠⲆⵠᐃᐃ: 197,
    ΔⲆⵠΔΔ: 198,
    ᐃΔᐃⵠⵠ: 199,
    ⲆⵠⲆⲆΔ: 200,
    ⵠᐃΔⲆⲆ: 201,
    ᐃⵠᐃΔ: 202,
    ⲆⵠⵠΔⲆ: 203,
    ⲆⵠΔᐃᐃ: 204,
    ⲆᐃΔⵠᐃ: 205,
    ᐃⵠΔΔΔ: 206,
    ⲆᐃΔΔⵠ: 207,
    ⲆΔⲆⵠΔ: 208,
    ⲆᐃⵠΔⲆ: 209,
    ΔⵠⵠΔⲆ: 210,
    ⵠΔᐃⵠⲆ: 211,
    ᐃⲆΔᐃⲆ: 212,
    ΔⵠⵠΔΔ: 213,
    ΔΔⲆᐃⲆ: 214,
    ΔⵠΔⲆΔ: 215,
    ⵠΔⲆⵠᐃ: 216,
    ᐃⵠⵠⲆᐃ: 217,
    Ⲇᐃⵠⵠⵠ: 218,
    ⵠⲆᐃᐃⲆ: 219,
    ᐃΔΔⵠᐃ: 220,
    ⵠᐃⵠᐃⵠ: 221,
    ᐃⲆⲆⲆᐃ: 222,
    ⵠⵠⲆΔⲆ: 223,
    ⵠᐃᐃⲆᐃ: 224,
    ⵠⲆᐃⲆΔ: 225,
    ᐃⵠⵠᐃⵠ: 226,
    ⲆⵠΔᐃⵠ: 227,
    ⲆⲆΔⵠⲆ: 228,
    ⵠᐃⲆⲆΔ: 229,
    ΔⵠΔΔⵠ: 230,
    ⵠⵠΔⲆⵠ: 231,
    ΔⵠΔΔⲆ: 232,
    ⵠⵠⵠΔⲆ: 233,
    ᐃⵠⵠΔⵠ: 234,
    ΔᐃΔΔⲆⲆⵠ: 235,
    ᐃⲆᐃⵠᐃΔⵠ: 236,
    ⵠΔⵠⵠⲆ: 237,
    ⵠⲆᐃΔⵠ: 238,
    ΔΔⵠⲆⲆ: 239,
    ᐃⲆΔⲆⲆ: 240
  };
  const as = H;
  var bs = {
    ⵠⲆⵠⲆΔ: qo,
    ⲆᐃⵠᐃΔ: 0,
    ⵠᐃⲆᐃᐃ: pq,
    ΔⲆⵠⵠⲆ: 4,
    ΔⲆΔⵠ: Te,
    Ⲇⵠⵠⵠᐃ: 5
  };
  const cs = Kk;
  var ds = [];
  const es = nj;
  ds[109] = {
    name: "Wood",
    ⵠⵠ: 316,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 0
  };
  const fs = ye;
  const gs = Xn;
  const hs = Ri;
  ds[108] = {
    name: "Stone",
    ⵠⵠ: 315,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: ya
  };
  ds[111] = {
    name: "Gold",
    ⵠⵠ: 297,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: In
  };
  const is = b;
  ds[112] = {
    name: "Diamond",
    ⵠⵠ: 298,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: mj
  };
  const ls = Gi;
  const ks = U;
  const ms = pn;
  const ns = _j;
  ds[121] = {
    name: "Amethyst",
    ⵠⵠ: 418,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Rq
  };
  const os = Lr;
  ds[2] = {
    name: "Rabbit fur",
    ⵠⵠ: 368,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: Da
  };
  const ps = ra;
  const rs = as;
  ds[174] = {
    name: "Wolf fur",
    ⵠⵠ: 393,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: os
  };
  ds[237] = {
    name: "Boar fur",
    ⵠⵠ: 1162,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: os
  };
  const ss = dr;
  ds[100] = {
    name: "Firefly",
    ⵠⵠ: 1164,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: 0
  };
  ds[101] = {
    name: "Wood arrow",
    ⵠⵠ: 1166,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Xn
  };
  ds[102] = {
    name: "Stone arrow",
    ⵠⵠ: 1169,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  ds[103] = {
    name: "Gold arrow",
    ⵠⵠ: 1172,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  const ts = Ri;
  ds[104] = {
    name: "Diamond arrow",
    ⵠⵠ: 1175,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[105] = {
    name: "Amethyst arrow",
    ⵠⵠ: 1178,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[106] = {
    name: "Reidite arrow",
    ⵠⵠ: 1181,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  ds[107] = {
    name: "Dragon arrow",
    ⵠⵠ: 1184,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: In
  };
  const us = xk;
  const vs = Ik;
  ds[146] = {
    name: "Winter fur",
    ⵠⵠ: 505,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 0
  };
  ds[240] = {
    name: "Fur mammoth",
    ⵠⵠ: 1233,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Rq
  };
  ds[161] = {
    name: "Web",
    ⵠⵠ: 305,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const ws = A;
  ds[116] = {
    name: "Meat",
    ⵠⵠ: 300,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: ya
  };
  ds[137] = {
    name: "Fish",
    ⵠⵠ: 662,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[129] = {
    name: "Kraken skin",
    ⵠⵠ: 624,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[139] = {
    name: "Piranha scales",
    ⵠⵠ: 674,
    ⵠⲆᐃⲆ: Rq,
    ⲆΔⲆⲆ: 0
  };
  const xs = sr;
  const ys = D;
  const zs = mk;
  ds[142] = {
    name: "Ice",
    ⵠⵠ: 142,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mj
  };
  ds[126] = {
    name: "Sand",
    ⵠⵠ: 609,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: wj
  };
  ds[140] = {
    name: "Dirt",
    ⵠⵠ: 140,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 0
  };
  ds[110] = {
    name: "Berrie",
    ⵠⵠ: 277,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[131] = {
    name: "Flour",
    ⵠⵠ: 629,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Lr
  };
  ds[134] = {
    name: "Flour",
    ⵠⵠ: 639,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: Da
  };
  const js = E;
  const As = U;
  ds[178] = {
    name: "Special fur peasant",
    ⵠⵠ: 178,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: wj
  };
  ds[179] = {
    name: "Special fur hood",
    ⵠⵠ: 179,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: wj
  };
  ds[189] = {
    name: "Pumpkin",
    ⵠⵠ: 814,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Da
  };
  const Bs = Ok;
  ds[192] = {
    name: "Garlic",
    ⵠⵠ: 840,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Zj
  };
  const Cs = Ra;
  const Ds = _o;
  const qs = da;
  ds[194] = {
    name: "Thornbush",
    ⵠⵠ: 850,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Rq
  };
  ds[205] = {
    name: "Carrot",
    ⵠⵠ: 955,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: ya
  };
  const Es = On;
  ds[207] = {
    name: "Tomato",
    ⵠⵠ: 965,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: In
  };
  const Fs = q;
  const Gs = Lj;
  ds[209] = {
    name: "Watermelon",
    ⵠⵠ: 972,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: Da
  };
  ds[211] = {
    name: "Aloe Vera",
    ⵠⵠ: 987,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[222] = {
    name: "Penguin Feather",
    ⵠⵠ: 1035,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: Rq
  };
  const Hs = Br;
  ds[231] = {
    name: "Hawk Feather",
    ⵠⵠ: 1037,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: Rq
  };
  const Is = $n;
  ds[232] = {
    name: "Vulture Feather",
    ⵠⵠ: 1039,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: Zj
  };
  ds[233] = {
    name: "Cactus",
    ⵠⵠ: 1154,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 0
  };
  const Js = nq;
  const Ks = _j;
  ds[236] = {
    name: "Cactus",
    ⵠⵠ: 1160,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: Rq
  };
  ds[235] = {
    name: "Pitchfork Part",
    ⵠⵠ: 1158,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: 0
  };
  const Ls = Gi;
  const eh = H;
  ds[238] = {
    name: "Emerald Machine",
    ⵠⵠ: 1187,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 0
  };
  const ih = ja;
  ds[234] = {
    name: "Emerald",
    ⵠⵠ: 1156,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 0
  };
  const th = gr;
  ds[41] = {
    name: "Christmas Hat",
    ⵠⵠ: 880,
    ⲆΔⲆⲆ: Lr
  };
  ds[42] = {
    name: "Elf Hat",
    ⵠⵠ: 882,
    ⲆΔⲆⲆ: Zj
  };
  const nh = Xa;
  ds[201] = {
    name: "Garland",
    ⵠⵠ: 870,
    ⲆΔⲆⲆ: 0,
    ⵠⲆᐃⲆ: os
  };
  ds[200] = {
    name: "Candy",
    ⵠⵠ: 200,
    ⲆΔⲆⲆ: 0
  };
  const oh = Nk;
  ds[199] = {
    name: "Sugar Cane",
    ⵠⵠ: 865,
    ⲆΔⲆⲆ: 0
  };
  const rh = 14;
  const ah = Yq;
  const sh = so;
  ds[9] = {
    name: "Pirate Sword",
    ⵠⵠ: 860,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Rq
  };
  ds[196] = {
    name: "Crab Stick",
    ⵠⵠ: 196,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: 0
  };
  const hh = Wa;
  ds[202] = {
    name: "Reidite",
    ⵠⵠ: 938,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: os
  };
  ds[203] = {
    name: "Flame",
    ⵠⵠ: 936,
    ⵠⲆᐃⲆ: Rq,
    ⲆΔⲆⲆ: In
  };
  ds[113] = {
    name: "Campfire",
    ⵠⵠ: 302,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const lh = x;
  const gh = C;
  const uh = $k;
  const bh = Jq;
  ds[198] = {
    name: "Bed",
    ⵠⵠ: 909,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: 1
  };
  const vh = _j;
  const dh = Lo;
  ds[114] = {
    name: "Workbench",
    ⵠⵠ: 262,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 1
  };
  ds[0] = {
    name: "Stone sword",
    ⵠⵠ: 254,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: Xn
  };
  const ch = vi;
  const mh = fs;
  ds[1] = {
    name: "Stone pick",
    ⵠⵠ: 256,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 1
  };
  const ph = $o;
  ds[115] = {
    name: "Berries bush",
    ⵠⵠ: 284,
    ⵠⲆᐃⲆ: os,
    ⲆΔⲆⲆ: 0
  };
  ds[3] = {
    name: "Gold pick",
    ⵠⵠ: 295,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: zs
  };
  const Ch = te;
  const Th = Bq;
  const fh = Ur;
  ds[4] = {
    name: "Diamond pick",
    ⵠⵠ: 257,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: za
  };
  ds[57] = {
    name: "Wood sword",
    ⵠⵠ: 830,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  ds[5] = {
    name: "Gold sword",
    ⵠⵠ: 290,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: ie
  };
  ds[6] = {
    name: "Diamond sword",
    ⵠⵠ: 291,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: 1
  };
  const zh = Gk;
  ds[8] = {
    name: "Wood pick",
    ⵠⵠ: 314,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const yh = Bi;
  const wh = ro;
  ds[162] = {
    name: "Wood wall",
    ⵠⵠ: 318,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: 1
  };
  const Ph = Y;
  const Ah = Vj;
  ds[160] = {
    name: "Wood spike",
    ⵠⵠ: 320,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 1
  };
  ds[117] = {
    name: "Cooked meat",
    ⵠⵠ: 325,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: In
  };
  ds[118] = {
    name: "Big campfire",
    ⵠⵠ: 327,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const kh = ye;
  const xh = Nn;
  const Jh = Un;
  ds[195] = {
    name: "Bandage",
    ⵠⵠ: 304,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: gs
  };
  const Mh = dr;
  const Bh = us;
  const Dh = vs;
  const Ih = ya;
  ds[163] = {
    name: "Stone wall",
    ⵠⵠ: 263,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  ds[164] = {
    name: "Gold wall",
    ⵠⵠ: 265,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[165] = {
    name: "Diamond wall",
    ⵠⵠ: 332,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  const Eh = Gj;
  ds[166] = {
    name: "Wood door",
    ⵠⵠ: 268,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: ie
  };
  ds[167] = {
    name: "Chest",
    ⵠⵠ: 338,
    ⵠⲆᐃⲆ: os,
    ⲆΔⲆⲆ: gs
  };
  ds[168] = {
    name: "Stone spike",
    ⵠⵠ: 360,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Sh = sr;
  ds[169] = {
    name: "Gold spike",
    ⵠⵠ: 363,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Qh = on;
  ds[170] = {
    name: "Diamond spike",
    ⵠⵠ: 365,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[171] = {
    name: "Stone door",
    ⵠⵠ: 371,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: zs
  };
  ds[172] = {
    name: "Gold door",
    ⵠⵠ: 374,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  ds[173] = {
    name: "Diamond door",
    ⵠⵠ: 377,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: gs
  };
  ds[10] = {
    name: "Chapka",
    ⵠⵠ: 370,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: Te
  };
  ds[11] = {
    name: "Big Chapka",
    ⵠⵠ: 380,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const _h = dr;
  ds[12] = {
    name: "Wood spear",
    ⵠⵠ: 402,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Fh = gh;
  const Rh = cs;
  const Gh = ie;
  ds[13] = {
    name: "Stone spear",
    ⵠⵠ: 396,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: mk
  };
  ds[14] = {
    name: "Gold spear",
    ⵠⵠ: 399,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Te
  };
  const jh = uh;
  const Lh = di;
  const Wh = er;
  ds[15] = {
    name: "Diamond spear",
    ⵠⵠ: 405,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Oh = Kq;
  ds[16] = {
    name: "Dragon spear",
    ⵠⵠ: 876,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[17] = {
    name: "Dragon spear",
    ⵠⵠ: 879,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mj
  };
  const Nh = p;
  const qh = vi;
  ds[18] = {
    name: "Crab spear",
    ⵠⵠ: 900,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: zs
  };
  const Hh = Qr;
  ds[197] = {
    name: "Crab loot",
    ⵠⵠ: 197,
    ⵠⲆᐃⲆ: os,
    ⲆΔⲆⲆ: mj
  };
  const Uh = sa;
  const Yh = Rq;
  ds[119] = {
    name: "Furnace",
    ⵠⵠ: 409,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Oq
  };
  const Kh = La;
  const Vh = jk;
  ds[23] = {
    name: "Explorer hat",
    ⵠⵠ: 421,
    ⵠⲆᐃⲆ: os,
    ⲆΔⲆⲆ: 1
  };
  ds[24] = {
    name: "Pirate hat",
    ⵠⵠ: 424,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  ds[87] = {
    name: "Flower hat",
    ⵠⵠ: 1228,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Zh = m;
  const Xh = Hs;
  ds[88] = {
    name: "Fur hat",
    ⵠⵠ: 1231,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: zs
  };
  ds[58] = {
    name: "Wood helmet",
    ⵠⵠ: 827,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: zs
  };
  ds[25] = {
    name: "Stone helmet",
    ⵠⵠ: 430,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Te
  };
  const $h = fh;
  const el = ar;
  ds[26] = {
    name: "Gold helmet",
    ⵠⵠ: 433,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const il = qa;
  ds[27] = {
    name: "Diamond helmet",
    ⵠⵠ: 436,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: Gh
  };
  const tl = vn;
  ds[28] = {
    name: "Book",
    ⵠⵠ: 439,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  ds[120] = {
    name: "Paper",
    ⵠⵠ: 442,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[29] = {
    name: "Bag",
    ⵠⵠ: 367,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Oq
  };
  ds[30] = {
    name: "Amethyst sword",
    ⵠⵠ: 456,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const nl = Vn;
  const ol = b;
  const rl = ch;
  ds[31] = {
    name: "Amethyst pick",
    ⵠⵠ: 460,
    ⵠⲆᐃⲆ: os,
    ⲆΔⲆⲆ: 1
  };
  const al = C;
  ds[33] = {
    name: "Amethyst spear",
    ⵠⵠ: 473,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: gs
  };
  const sl = ci;
  ds[35] = {
    name: "Stone hammer",
    ⵠⵠ: 478,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: 1
  };
  ds[36] = {
    name: "Gold hammer",
    ⵠⵠ: 481,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  const hl = z;
  const ll = ea;
  const gl = Gi;
  ds[37] = {
    name: "Diamond hammer",
    ⵠⵠ: 484,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const ul = v;
  const bl = b;
  const vl = yq;
  ds[38] = {
    name: "Amethyst hammer",
    ⵠⵠ: 487,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Te
  };
  ds[39] = {
    name: "Reidite hammer",
    ⵠⵠ: 490,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  const dl = rr;
  ds[122] = {
    name: "Amethyst wall",
    ⵠⵠ: 493,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Te
  };
  const cl = kh;
  const ml = qh;
  const pl = As;
  const Cl = da;
  const Tl = Oq;
  const fl = Hi;
  ds[123] = {
    name: "Amethyst spike",
    ⵠⵠ: 496,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const zl = Bo;
  const yl = po;
  ds[124] = {
    name: "Amethyst door",
    ⵠⵠ: 498,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  ds[40] = {
    name: "Cap & scarf",
    ⵠⵠ: 503,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  ds[147] = {
    name: "Blue cord",
    ⵠⵠ: 515,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 0
  };
  const wl = hs;
  const Pl = Pe;
  const Al = D;
  const kl = Fo;
  ds[148] = {
    name: "Lock",
    ⵠⵠ: 519,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: 1
  };
  const xl = Al;
  ds[151] = {
    name: "Resurrection",
    ⵠⵠ: 530,
    ⵠⲆᐃⲆ: Ih,
    ⲆΔⲆⲆ: Tl
  };
  ds[158] = {
    name: "Lockpick",
    ⵠⵠ: 533,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: Te
  };
  ds[159] = {
    name: "Totem",
    ⵠⵠ: 555,
    ⵠⲆᐃⲆ: os,
    ⲆΔⲆⲆ: zs
  };
  ds[43] = {
    name: "Amethyst helmet",
    ⵠⵠ: 542,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[45] = {
    name: "Super hammer",
    ⵠⵠ: 551,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  ds[125] = {
    name: "Bridge",
    ⵠⵠ: 604,
    ⵠⲆᐃⲆ: Te,
    ⲆΔⲆⲆ: 1
  };
  const Jl = aa;
  const Ml = Zo;
  const Bl = Sa;
  const Dl = wq;
  ds[221] = {
    name: "Wood Tower",
    ⵠⵠ: 1235,
    ⵠⲆᐃⲆ: mk,
    ⲆΔⲆⲆ: Oq
  };
  ds[127] = {
    name: "Bottle full",
    ⵠⵠ: 715,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[128] = {
    name: "Bottle empty",
    ⵠⵠ: 611,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[46] = {
    name: "Stone shovel",
    ⵠⵠ: 618,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[130] = {
    name: "Watering can",
    ⵠⵠ: 627,
    ⵠⲆᐃⲆ: Yh,
    ⲆΔⲆⲆ: 0
  };
  ds[132] = {
    name: "Wheat",
    ⵠⵠ: 632,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mj
  };
  ds[133] = {
    name: "Cookie",
    ⵠⵠ: 635,
    ⵠⲆᐃⲆ: Yh,
    ⲆΔⲆⲆ: Lr
  };
  const Il = hs;
  ds[135] = {
    name: "Windmill",
    ⵠⵠ: 643,
    ⵠⲆᐃⲆ: Ih,
    ⲆΔⲆⲆ: 1
  };
  ds[47] = {
    name: "Super diving suit",
    ⵠⵠ: 647,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 1
  };
  const El = Hq;
  const Sl = $a;
  ds[48] = {
    name: "Diving mask",
    ⵠⵠ: 650,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Gh
  };
  ds[49] = {
    name: "Watering can full",
    ⵠⵠ: 654,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: fl
  };
  const Ql = nk;
  const _l = xs;
  ds[136] = {
    name: "Cake",
    ⵠⵠ: 660,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 0
  };
  ds[138] = {
    name: "Foodfish cooked",
    ⵠⵠ: 666,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: Hi
  };
  const Fl = b;
  ds[141] = {
    name: "Plot",
    ⵠⵠ: 684,
    ⵠⲆᐃⲆ: zs,
    ⲆΔⲆⲆ: 1
  };
  ds[143] = {
    name: "Bread",
    ⵠⵠ: 690,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: ya
  };
  ds[_r.ᐃᐃⲆⲆΔⵠᐃ] = {
    name: "Bottle full (with ice)",
    ⵠⵠ: Xr.ΔᐃⲆⵠⵠᐃⵠⵠⲆ,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: mk
  };
  ds[_r.ⲆⲆᐃΔⲆⲆΔ] = {
    name: "Bottle full (with well)",
    ⵠⵠ: Xr.ⵠⲆΔⵠⲆⵠᐃᐃⲆ,
    ⵠⲆᐃⲆ: Rq,
    ⲆΔⲆⲆ: 1
  };
  ds[50] = {
    name: "Gold shovel",
    ⵠⵠ: 700,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: Tl
  };
  const Rl = jk;
  const Gl = Zn;
  ds[51] = {
    name: "Diamond shovel",
    ⵠⵠ: 704,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 1
  };
  const jl = Tk;
  const Ll = ta;
  ds[52] = {
    name: "Amethyst shovel",
    ⵠⵠ: 706,
    ⵠⲆᐃⲆ: Ih,
    ⲆΔⲆⲆ: 1
  };
  ds[55] = {
    name: "Spanner",
    ⵠⵠ: 711,
    ⵠⲆᐃⲆ: fl,
    ⲆΔⲆⲆ: 1
  };
  const Wl = Gh;
  const Ol = bh;
  const Nl = Rr;
  const ql = Ak;
  const Hl = rk;
  const Ul = jk;
  ds[56] = {
    name: "Machete",
    ⵠⵠ: 714,
    ⵠⲆᐃⲆ: fl,
    ⲆΔⲆⲆ: 1
  };
  ds[144] = {
    name: "Bread oven",
    ⵠⵠ: 718,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[145] = {
    name: "Sandwich",
    ⵠⵠ: 730,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const Yl = y;
  const Kl = Dl;
  const Vl = qq;
  ds[59] = {
    name: "Dragon helmet",
    ⵠⵠ: 734,
    ⵠⲆᐃⲆ: fl,
    ⲆΔⲆⲆ: 0
  };
  const Zl = Z;
  ds[60] = {
    name: "Dragon helmet",
    ⵠⵠ: 737,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const Xl = yh;
  ds[90] = {
    name: "Witch",
    ⵠⵠ: 740,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: In
  };
  const $l = Pl;
  ds[91] = {
    name: "Nimbus",
    ⵠⵠ: 743,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[92] = {
    name: "Wand1",
    ⵠⵠ: 746,
    ⵠⲆᐃⲆ: os,
    ⲆΔⲆⲆ: Da
  };
  ds[93] = {
    name: "Wand2",
    ⵠⵠ: 749,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Ih
  };
  ds[62] = {
    name: "Dragon sword",
    ⵠⵠ: 564,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[63] = {
    name: "Dragon sword",
    ⵠⵠ: 567,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[71] = {
    name: "Wood shield",
    ⵠⵠ: 1238,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  const eg = ea;
  const ig = ya;
  ds[72] = {
    name: "Stone shield",
    ⵠⵠ: 1241,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Te
  };
  const tg = $k;
  const ng = zi;
  const og = Tl;
  const rg = Sa;
  ds[73] = {
    name: "Gold shield",
    ⵠⵠ: 1244,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: gs
  };
  ds[74] = {
    name: "Diamond shield",
    ⵠⵠ: 1247,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: za
  };
  ds[75] = {
    name: "Amethyst shield",
    ⵠⵠ: 1250,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[76] = {
    name: "Reidite shield",
    ⵠⵠ: 1253,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: 1
  };
  ds[94] = {
    name: "Wood axe",
    ⵠⵠ: 1256,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const ag = zi;
  ds[95] = {
    name: "Stone axe",
    ⵠⵠ: 1259,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  const sg = Il;
  ds[96] = {
    name: "Gold axe",
    ⵠⵠ: 1262,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: 1
  };
  ds[97] = {
    name: "Diamond axe",
    ⵠⵠ: 1265,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: gs
  };
  ds[98] = {
    name: "Amethyst axe",
    ⵠⵠ: 1268,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[99] = {
    name: "Reidite axe",
    ⵠⵠ: 1271,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const hg = Zo;
  const lg = Ra;
  const gg = R;
  ds[64] = {
    name: "Wood bow",
    ⵠⵠ: 570,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: za
  };
  ds[65] = {
    name: "Stone bow",
    ⵠⵠ: 573,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: zs
  };
  ds[66] = {
    name: "Gold bow",
    ⵠⵠ: 576,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const ug = ik;
  ds[67] = {
    name: "Diamond bow",
    ⵠⵠ: 579,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: Te
  };
  ds[68] = {
    name: "Amethyst bow",
    ⵠⵠ: 582,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  const bg = m;
  ds[69] = {
    name: "Reidite bow",
    ⵠⵠ: 585,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Wl
  };
  ds[70] = {
    name: "Dragon bow",
    ⵠⵠ: 588,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const vg = pq;
  ds[77] = {
    name: "Crown of life",
    ⵠⵠ: 758,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Hi
  };
  const dg = p;
  ds[175] = {
    name: "Gem of life",
    ⵠⵠ: 176,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: Hi
  };
  ds[185] = {
    name: "Orb of the dragon",
    ⵠⵠ: 252,
    ⵠⲆᐃⲆ: fl,
    ⲆΔⲆⲆ: 0
  };
  ds[187] = {
    name: "Orb of the dragon",
    ⵠⵠ: 253,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[184] = {
    name: "Cube of the dragon",
    ⵠⵠ: 751,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 0
  };
  ds[186] = {
    name: "Cube of the dragon",
    ⵠⵠ: 753,
    ⵠⲆᐃⲆ: fl,
    ⲆΔⲆⲆ: 0
  };
  const cg = lj;
  ds[78] = {
    name: "Crown of luck",
    ⵠⵠ: 762,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[176] = {
    name: "Gem of luck",
    ⵠⵠ: 177,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Ih
  };
  ds[79] = {
    name: "Crown of the angel",
    ⵠⵠ: 770,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const mg = Dk;
  const pg = Qh;
  ds[177] = {
    name: "Gem of the angel",
    ⵠⵠ: 175,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: 0
  };
  ds[149] = {
    name: "Dragon heart",
    ⵠⵠ: 521,
    ⵠⲆᐃⲆ: fl,
    ⲆΔⲆⲆ: 0
  };
  ds[150] = {
    name: "Lava heart",
    ⵠⵠ: 523,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: In
  };
  const Cg = ur;
  ds[83] = {
    name: "Hood",
    ⵠⵠ: 768,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  ds[84] = {
    name: "Peasant",
    ⵠⵠ: 772,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[86] = {
    name: "Winter peasant",
    ⵠⵠ: 777,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Da
  };
  ds[85] = {
    name: "Winter hood",
    ⵠⵠ: 780,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: Da
  };
  const Tg = qn;
  ds[180] = {
    name: "Bucket full",
    ⵠⵠ: 784,
    ⵠⲆᐃⲆ: Ih,
    ⲆΔⲆⲆ: fl
  };
  ds[181] = {
    name: "Bucket empty",
    ⵠⵠ: 785,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const fg = Ni;
  const zg = Oq;
  ds[182] = {
    name: "Well",
    ⵠⵠ: 791,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Wl
  };
  const yg = Yr;
  ds[183] = {
    name: "Sign",
    ⵠⵠ: 799,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const wg = os;
  const Pg = Lo;
  const Ag = Fh;
  ds[188] = {
    name: "Pumpkin Seed",
    ⵠⵠ: 809,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: 0
  };
  ds[191] = {
    name: "Garlic Seed",
    ⵠⵠ: 835,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[193] = {
    name: "Thorbushes Seed",
    ⵠⵠ: 846,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[190] = {
    name: "Roof",
    ⵠⵠ: 843,
    ⵠⲆᐃⲆ: Xn,
    ⲆΔⲆⲆ: 1
  };
  const kg = d;
  ds[61] = {
    name: "Crab Crown",
    ⵠⵠ: 912,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: 1
  };
  const xg = Jo;
  const Jg = hn;
  const Mg = mj;
  ds[204] = {
    name: "Carrot Seed",
    ⵠⵠ: 950,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[206] = {
    name: "Tomato Seed",
    ⵠⵠ: 960,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[208] = {
    name: "Watermelon Seed",
    ⵠⵠ: 967,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 0
  };
  const Bg = $h;
  ds[210] = {
    name: "Aloe Vera Seed",
    ⵠⵠ: 982,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 0
  };
  const Dg = js;
  const Ig = Oj;
  const Eg = Zh;
  ds[80] = {
    name: "Cap",
    ⵠⵠ: 1138,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Sg = $h;
  ds[81] = {
    name: "Turban",
    ⵠⵠ: 1141,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  ds[82] = {
    name: "Pilot Helmet",
    ⵠⵠ: 427,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[152] = {
    name: "Emerald Machine",
    ⵠⵠ: 1196,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 0
  };
  const Qg = _h;
  ds[153] = {
    name: "Emerald Machine",
    ⵠⵠ: 1200,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: zs
  };
  const _g = Eh;
  ds[154] = {
    name: "Emerald Machine",
    ⵠⵠ: 1204,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: ie
  };
  const Fg = Vl;
  const Rg = V;
  ds[155] = {
    name: "Emerald Machine",
    ⵠⵠ: 1208,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: 1
  };
  ds[156] = {
    name: "Emerald Machine",
    ⵠⵠ: 1212,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Gg = Jj;
  ds[157] = {
    name: "Emerald Machine",
    ⵠⵠ: 1216,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  const jg = tl;
  ds[53] = {
    name: "Pitchfork",
    ⵠⵠ: 977,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Wl
  };
  const Lg = ea;
  const Wg = gl;
  ds[212] = {
    name: "Wood Door Spike",
    ⵠⵠ: 990,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Tl
  };
  ds[213] = {
    name: "Stone Door Spike",
    ⵠⵠ: 993,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  const Og = rk;
  const Ng = Vn;
  ds[214] = {
    name: "Gold Door Spike",
    ⵠⵠ: 996,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  ds[215] = {
    name: "Diamond Door Spike",
    ⵠⵠ: 999,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[216] = {
    name: "Amethyst Door Spike",
    ⵠⵠ: 1002,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: 1
  };
  ds[20] = {
    name: "Diamond Fire Protection ",
    ⵠⵠ: 922,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[21] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: 926,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Xn
  };
  ds[22] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: 930,
    ⵠⲆᐃⲆ: Rq,
    ⲆΔⲆⲆ: Tl
  };
  const qg = ke;
  ds[19] = {
    name: "Reidite Sword",
    ⵠⵠ: 933,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Xn
  };
  const Hg = ie;
  ds[34] = {
    name: "Reidite Spear",
    ⵠⵠ: 944,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  const Ug = rs;
  ds[44] = {
    name: "Reidite Helmet",
    ⵠⵠ: 947,
    ⵠⲆᐃⲆ: Ih,
    ⲆΔⲆⲆ: Te
  };
  ds[220] = {
    name: "Reidite Door Spike",
    ⵠⵠ: 1005,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: gs
  };
  const Yg = J;
  ds[218] = {
    name: "Reidite Door",
    ⵠⵠ: 1008,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[219] = {
    name: "Reidite Spike",
    ⵠⵠ: 1011,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: zs
  };
  const Kg = p;
  const Vg = Ul;
  ds[217] = {
    name: "Reidite Wall",
    ⵠⵠ: 1014,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Oq
  };
  const Zg = kq;
  const Xg = Xa;
  ds[32] = {
    name: "Reidite pick",
    ⵠⵠ: 1019,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const $g = da;
  const Ms = hg;
  ds[223] = {
    name: "Boat",
    ⵠⵠ: 1027,
    ⵠⲆᐃⲆ: Mg,
    ⲆΔⲆⲆ: 1
  };
  ds[224] = {
    name: "Sled",
    ⵠⵠ: 1030,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[89] = {
    name: "Saddle",
    ⵠⵠ: 1048,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  ds[225] = {
    name: "Mount Boar",
    ⵠⵠ: 1051,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 0
  };
  const Ns = pn;
  const Os = Fr;
  const Ps = so;
  ds[226] = {
    name: "Mount King Crab",
    ⵠⵠ: 1191,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: ya
  };
  ds[227] = {
    name: "Mount Baby Dragon",
    ⵠⵠ: 1082,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Mg
  };
  const Qs = Rq;
  ds[228] = {
    name: "Mount Baby Lava",
    ⵠⵠ: 1097,
    ⵠⲆᐃⲆ: ig,
    ⲆΔⲆⲆ: 0
  };
  const Rs = qq;
  const Ss = zi;
  ds[229] = {
    name: "Mount Hawk",
    ⵠⵠ: 1112,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[230] = {
    name: "Plane",
    ⵠⵠ: 1116,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const Ts = ug;
  const Us = V;
  ds[54] = {
    name: "Pitchfork 2",
    ⵠⵠ: 980,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  ds[239] = {
    name: "Baby Mammoth",
    ⵠⵠ: 1226,
    ⵠⲆᐃⲆ: wg,
    ⲆΔⲆⲆ: Hi
  };
  var Vs = undefined;
  var Ws = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    ⵠᐃⵠ: Ih,
    e: 0,
    id: 0,
    Δⵠⵠⵠ: 113,
    time: 1 / Zg,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[113, 1], [109, 35], [108, kk]],
    w: 0,
    f: Zj,
    ⵠᐃⵠ: 0,
    e: In,
    id: 1,
    Δⵠⵠⵠ: 118,
    time: 1 / Hh,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: Wl,
    f: Mg,
    ⵠᐃⵠ: fl,
    e: 0,
    id: 2,
    Δⵠⵠⵠ: 119,
    time: Hg / 20,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 20], [108, Zk]],
    w: In,
    f: Hi,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 3,
    Δⵠⵠⵠ: 114,
    time: 0.16666666666666666,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, Ra]],
    w: wj,
    f: ya,
    ⵠᐃⵠ: 0,
    e: In,
    id: 4,
    Δⵠⵠⵠ: 8,
    time: 1 / yr,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[8, zs], [109, 50], [108, Qh]],
    w: 1,
    f: fl,
    ⵠᐃⵠ: In,
    e: In,
    id: 5,
    Δⵠⵠⵠ: 1,
    time: Gh / Vr,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, zg]],
    w: mk,
    f: Yh,
    ⵠᐃⵠ: In,
    e: 0,
    id: 6,
    Δⵠⵠⵠ: 3,
    time: gs / F,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, Hg]],
    w: Hg,
    f: 0,
    ⵠᐃⵠ: 0,
    e: ya,
    id: 7,
    Δⵠⵠⵠ: 4,
    time: Oq / Bs,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, za]],
    w: gs,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 8,
    Δⵠⵠⵠ: 31,
    time: 0.016666666666666666,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, Gh]],
    w: Hg,
    f: Rq,
    ⵠᐃⵠ: Zj,
    e: 0,
    id: 9,
    Δⵠⵠⵠ: 32,
    time: 0.011111111111111112,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 10,
    Δⵠⵠⵠ: 35,
    time: 0.1,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: ya,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 11,
    Δⵠⵠⵠ: 36,
    time: za / 15,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, ie]],
    w: 1,
    f: In,
    ⵠᐃⵠ: Da,
    e: wg,
    id: 12,
    Δⵠⵠⵠ: 37,
    time: 1 / qi,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, Gh]],
    w: 1,
    f: In,
    ⵠᐃⵠ: 0,
    e: Zj,
    id: 13,
    Δⵠⵠⵠ: 38,
    time: Wl / 60,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: Te,
    f: 0,
    ⵠᐃⵠ: In,
    e: 0,
    id: 14,
    Δⵠⵠⵠ: 39,
    time: Oq / 90,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[39, 1], [127, 1], [129, Tl], [139, zl], [121, 20]],
    w: 1,
    f: og,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 15,
    Δⵠⵠⵠ: 45,
    time: za / 120,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: Rq,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 16,
    Δⵠⵠⵠ: 46,
    time: Oq / 5,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[46, za], [111, Dl], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Qs,
    e: 0,
    id: 17,
    Δⵠⵠⵠ: 50,
    time: 1 / gn,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: og,
    f: ya,
    ⵠᐃⵠ: 0,
    e: Rq,
    id: 18,
    Δⵠⵠⵠ: 51,
    time: 1 / ml,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: Lr,
    ⵠᐃⵠ: 0,
    e: Rq,
    id: 19,
    Δⵠⵠⵠ: 52,
    time: ie / 40,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[109, 50]],
    w: 1,
    f: os,
    ⵠᐃⵠ: Hi,
    e: 0,
    id: 20,
    Δⵠⵠⵠ: 130,
    time: 1 / q,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[130, zs]],
    w: wg,
    f: Rq,
    ⵠᐃⵠ: Wl,
    e: ig,
    id: 21,
    Δⵠⵠⵠ: 49,
    time: 0.2,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: In,
    ⵠᐃⵠ: 0,
    e: ig,
    id: 22,
    Δⵠⵠⵠ: 53,
    time: Te / 10,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[53, 1], [235, zg]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 23,
    Δⵠⵠⵠ: 54,
    time: 0.016666666666666666,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[120, 4], [161, ba], [174, ls]],
    w: Oq,
    f: fl,
    ⵠᐃⵠ: wg,
    e: Da,
    id: 24,
    Δⵠⵠⵠ: 28,
    time: Xn / 15,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[109, 40]],
    w: Zj,
    f: Rq,
    ⵠᐃⵠ: 0,
    e: wj,
    id: 25,
    Δⵠⵠⵠ: 12,
    time: 1 / Qr,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[12, og], [109, 60], [108, kk]],
    w: Oq,
    f: 0,
    ⵠᐃⵠ: ya,
    e: mj,
    id: 26,
    Δⵠⵠⵠ: 13,
    time: Hg / sk,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: Hi,
    ⵠᐃⵠ: 0,
    e: Zj,
    id: 27,
    Δⵠⵠⵠ: 14,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ,
    time: 1 / qh
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, zg]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 28,
    Δⵠⵠⵠ: 15,
    time: 0.03333333333333333,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, ie]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Hi,
    id: 29,
    Δⵠⵠⵠ: 33,
    time: 0.016666666666666666,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Mg,
    e: 0,
    id: 30,
    Δⵠⵠⵠ: 34,
    time: za / 90,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[147, ws], [185, 1], [121, 100], [149, nq]],
    w: Tl,
    f: ie,
    ⵠᐃⵠ: zg,
    e: wg,
    id: 31,
    Δⵠⵠⵠ: 16,
    time: 0.008333333333333333,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[16, mk], [187, Tl], [202, 100], [150, H]],
    w: Hg,
    f: Oq,
    ⵠᐃⵠ: 1,
    e: Ih,
    id: 32,
    Δⵠⵠⵠ: 17,
    time: Xn / 200,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[12, ie], [197, 5], [161, Th]],
    w: Gh,
    f: 0,
    ⵠᐃⵠ: Ih,
    e: ig,
    id: 33,
    Δⵠⵠⵠ: 18,
    time: ie / 30,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[109, 30]],
    w: fl,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Qs,
    id: 34,
    Δⵠⵠⵠ: 57,
    time: 0.2,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: og,
    f: 0,
    ⵠᐃⵠ: 0,
    e: mj,
    id: 35,
    Δⵠⵠⵠ: 0,
    time: og / 10,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: zg,
    f: Ih,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 36,
    Δⵠⵠⵠ: 5,
    time: Oq / 20,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: zg,
    f: Lr,
    ⵠᐃⵠ: Mg,
    e: wj,
    id: 37,
    Δⵠⵠⵠ: 6,
    time: 0.03333333333333333,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, gs]],
    w: og,
    f: Yh,
    ⵠᐃⵠ: Yh,
    e: Hi,
    id: 38,
    Δⵠⵠⵠ: 30,
    time: 0.016666666666666666,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, og]],
    w: za,
    f: Zj,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 39,
    Δⵠⵠⵠ: 19,
    time: mk / 90,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[110, 3]],
    w: 0,
    f: Xn,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 40,
    Δⵠⵠⵠ: 115,
    time: 1 / Zg,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[134, qo]],
    w: Lr,
    f: mk,
    ⵠᐃⵠ: Hi,
    e: 0,
    id: 41,
    Δⵠⵠⵠ: 132,
    time: 0.2,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[189, _a]],
    w: In,
    f: 1,
    ⵠᐃⵠ: 0,
    e: Lr,
    id: 42,
    Δⵠⵠⵠ: 188,
    time: Hg / 5,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[192, yh]],
    w: 0,
    f: 1,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 43,
    Δⵠⵠⵠ: 191,
    time: 0.2,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[194, 8]],
    w: wg,
    f: 1,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 44,
    Δⵠⵠⵠ: 193,
    time: 0.2,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[205, 8]],
    w: Da,
    f: Wl,
    ⵠᐃⵠ: Ih,
    e: fl,
    id: 45,
    Δⵠⵠⵠ: 204,
    time: Oq / Ig,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[207, zj]],
    w: ig,
    f: zs,
    ⵠᐃⵠ: ig,
    e: 0,
    id: 46,
    Δⵠⵠⵠ: 206,
    time: Gh / kq,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[209, Fo]],
    w: Rq,
    f: 1,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 47,
    Δⵠⵠⵠ: 208,
    time: 1 / Ig,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[211, 16]],
    w: 0,
    f: og,
    ⵠᐃⵠ: 0,
    e: Qs,
    id: 48,
    Δⵠⵠⵠ: 210,
    time: zg / ta,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[116, Wl]],
    w: 0,
    f: 1,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 49,
    Δⵠⵠⵠ: 117,
    time: zg / ta,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[137, za]],
    w: Rq,
    f: ie,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 50,
    Δⵠⵠⵠ: 138,
    time: za / 3,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[131, 3]],
    w: Hi,
    f: 1,
    ⵠᐃⵠ: Mg,
    e: 0,
    id: 51,
    Δⵠⵠⵠ: 143,
    time: Gh / 3,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[131, yr], [110, mk]],
    w: 0,
    f: gs,
    ⵠᐃⵠ: Da,
    e: ya,
    id: 52,
    Δⵠⵠⵠ: 133,
    time: 0.3333333333333333,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[131, hl], [110, 2], [142, Vh]],
    w: 0,
    f: Tl,
    ⵠᐃⵠ: ya,
    e: Qs,
    id: 53,
    Δⵠⵠⵠ: 136,
    time: zs / Fs,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[161, 2]],
    w: Oq,
    f: ya,
    ⵠᐃⵠ: 0,
    e: Hi,
    id: 54,
    Δⵠⵠⵠ: 195,
    time: 1 / ta,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 20]],
    w: mk,
    f: 0,
    ⵠᐃⵠ: wj,
    e: ya,
    id: 55,
    Δⵠⵠⵠ: 162,
    time: Gh / Fs,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[162, 1], [108, Ej]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: ig,
    e: 0,
    id: 56,
    Δⵠⵠⵠ: 163,
    time: 1 / Fs,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[163, ie], [111, 14]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: In,
    e: Lr,
    id: 57,
    Δⵠⵠⵠ: 164,
    time: 0.2,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[164, Gh], [112, 11]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 58,
    Δⵠⵠⵠ: 165,
    time: Hg / 5,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: Mg,
    ⵠᐃⵠ: 0,
    e: Yh,
    id: 59,
    Δⵠⵠⵠ: 122,
    time: Wl / kq,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[122, 1], [202, Zg]],
    w: 1,
    f: Yh,
    ⵠᐃⵠ: ig,
    e: 0,
    id: 60,
    Δⵠⵠⵠ: 217,
    time: ie / Fs,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[109, 30]],
    w: Hg,
    f: 0,
    ⵠᐃⵠ: Hi,
    e: 0,
    id: 61,
    Δⵠⵠⵠ: 166,
    time: 1 / Iq,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: wj,
    e: Lr,
    id: 62,
    Δⵠⵠⵠ: 171,
    time: 1 / js,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[171, Tl], [111, 24]],
    w: Hg,
    f: wg,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 63,
    Δⵠⵠⵠ: 172,
    time: 1 / He,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: fl,
    e: 0,
    id: 64,
    Δⵠⵠⵠ: 173,
    time: og / 8,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[173, za], [121, Pj]],
    w: Xn,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 65,
    Δⵠⵠⵠ: 124,
    time: zs / 8,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[124, 1], [202, 15]],
    w: Hg,
    f: Mg,
    ⵠᐃⵠ: fl,
    e: 0,
    id: 66,
    Δⵠⵠⵠ: 218,
    time: 1 / E,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: Qs,
    ⵠᐃⵠ: 0,
    e: ig,
    id: 67,
    Δⵠⵠⵠ: 160,
    time: 1 / Ok,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[163, zg], [108, 70]],
    w: 1,
    f: Mg,
    ⵠᐃⵠ: 0,
    e: Yh,
    id: 68,
    Δⵠⵠⵠ: 168,
    time: 1 / ch,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[164, Te], [111, 40], [108, 30]],
    w: 1,
    f: Qs,
    ⵠᐃⵠ: os,
    e: 0,
    id: 69,
    Δⵠⵠⵠ: 169,
    time: Te / 20,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[165, zg], [112, 40], [108, 30]],
    w: zs,
    f: 0,
    ⵠᐃⵠ: Lr,
    e: 0,
    id: 70,
    Δⵠⵠⵠ: 170,
    time: Tl / 20,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 71,
    Δⵠⵠⵠ: 123,
    time: 0.05,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[217, Xn], [202, 40], [111, 30]],
    w: ie,
    f: 0,
    ⵠᐃⵠ: In,
    e: ig,
    id: 72,
    Δⵠⵠⵠ: 219,
    time: Tl / 20,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[166, zs], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Rq,
    e: 0,
    id: 73,
    Δⵠⵠⵠ: 212,
    time: Hg / 20,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[171, 1], [108, 140]],
    w: Gh,
    f: Yh,
    ⵠᐃⵠ: 0,
    e: In,
    id: 74,
    Δⵠⵠⵠ: 213,
    time: og / 20,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[172, Gh], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 75,
    Δⵠⵠⵠ: 214,
    time: Tl / 20,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: Hg,
    f: ya,
    ⵠᐃⵠ: 0,
    e: Lr,
    id: 76,
    Δⵠⵠⵠ: 215,
    time: 1 / ml,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[124, Tl], [121, 80], [108, 60]],
    w: 1,
    f: Da,
    ⵠᐃⵠ: Hi,
    e: Lr,
    id: 77,
    Δⵠⵠⵠ: 216,
    time: 1 / Dl,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: os,
    e: 0,
    id: 78,
    Δⵠⵠⵠ: 220,
    time: mk / Bs,
    ⵠⵠⵠ: bs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[109, 25], [111, eh]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Mg,
    e: 0,
    id: 79,
    Δⵠⵠⵠ: 167,
    time: zg / kq,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[120, ie], [2, 1], [161, 2]],
    w: zg,
    f: Yh,
    ⵠᐃⵠ: Zj,
    e: Lr,
    id: 80,
    Δⵠⵠⵠ: 23,
    time: 1 / Ig,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[120, hl], [222, 20], [147, 5], [2, Qr]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 81,
    Δⵠⵠⵠ: 24,
    time: zs / 30,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[236, zs], [231, 8], [232, zh], [222, 8], [161, 6]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: Mg,
    e: Yh,
    id: 82,
    Δⵠⵠⵠ: 82,
    time: Xn / 60,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[2, mk], [161, 2]],
    w: Wl,
    f: Ih,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 83,
    Δⵠⵠⵠ: 10,
    time: 0.2,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[10, 1], [174, 5], [161, nl]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 84,
    Δⵠⵠⵠ: 11,
    time: mk / 12,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[11, ie], [146, M], [147, 4]],
    w: Gh,
    f: In,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 85,
    Δⵠⵠⵠ: 40,
    time: za / 30,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[40, 1], [146, 5], [240, Ra], [147, 4]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: wg,
    e: Da,
    id: 86,
    Δⵠⵠⵠ: 88,
    time: Xn / 50,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[109, 50]],
    w: 0,
    f: ya,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 87,
    Δⵠⵠⵠ: 58,
    time: Te / 5,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: ie,
    f: Rq,
    ⵠᐃⵠ: ya,
    e: 0,
    id: 88,
    Δⵠⵠⵠ: 25,
    time: zs / lg,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, Oq]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: os,
    id: 89,
    Δⵠⵠⵠ: 26,
    time: 1 / Xa,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[108, Cn], [111, 100], [112, _j], [26, 1]],
    w: Oq,
    f: mj,
    ⵠᐃⵠ: 0,
    e: Lr,
    id: 90,
    Δⵠⵠⵠ: 27,
    time: 1 / 30,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: Gh,
    f: 0,
    ⵠᐃⵠ: ig,
    e: 0,
    id: 91,
    Δⵠⵠⵠ: 43,
    time: Gh / 60,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, gs]],
    w: Xn,
    f: 1,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 92,
    Δⵠⵠⵠ: 44,
    time: Tl / 90,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[139, Vh], [112, 40], [161, ls]],
    w: 1,
    f: fl,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 93,
    Δⵠⵠⵠ: 48,
    time: Tl / ch,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[48, gs], [111, 80], [129, 1], [121, 20]],
    w: Wl,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 94,
    Δⵠⵠⵠ: 47,
    time: 0.011111111111111112,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    ⵠᐃⵠ: In,
    e: Zj,
    id: 95,
    Δⵠⵠⵠ: 20,
    time: Tl / 20,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[20, Xn], [203, 10], [121, 50]],
    w: Hg,
    f: 1,
    ⵠᐃⵠ: wj,
    e: 0,
    id: 96,
    Δⵠⵠⵠ: 21,
    time: za / 60,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[21, Oq], [203, ul], [121, 50], [202, 50]],
    w: 1,
    f: Te,
    ⵠᐃⵠ: Lr,
    e: 0,
    id: 97,
    Δⵠⵠⵠ: 22,
    time: 1 / 90,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[161, Pl], [237, 2]],
    w: Te,
    f: Hi,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 98,
    Δⵠⵠⵠ: 80,
    time: Te / sj,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[80, og], [161, ji], [237, 4], [232, 12], [222, nl]],
    w: 1,
    f: In,
    ⵠᐃⵠ: wg,
    e: fl,
    id: 99,
    Δⵠⵠⵠ: 81,
    time: 0.006666666666666667,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[161, ks], [174, 5]],
    w: Te,
    f: Hi,
    ⵠᐃⵠ: os,
    e: wg,
    id: 100,
    Δⵠⵠⵠ: 29,
    time: Xn / 15,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[109, ch]],
    w: In,
    f: 1,
    ⵠᐃⵠ: wg,
    e: Lr,
    id: 101,
    Δⵠⵠⵠ: 120,
    time: za / 3,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[112, Xn], [161, Gh]],
    w: og,
    f: 0,
    ⵠᐃⵠ: Zj,
    e: fl,
    id: 102,
    Δⵠⵠⵠ: 147,
    time: Tl / 3,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Rq,
    id: 103,
    Δⵠⵠⵠ: 148,
    time: zs / 5,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[111, 250]],
    w: Tl,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Ih,
    id: 104,
    Δⵠⵠⵠ: 158,
    time: Hg / 60,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: In,
    e: 0,
    id: 105,
    Δⵠⵠⵠ: 159,
    time: za / 10,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Hi,
    e: 0,
    id: 106,
    Δⵠⵠⵠ: 125,
    time: 1 / M,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: wj,
    e: Zj,
    id: 107,
    Δⵠⵠⵠ: 190,
    time: Wl / ta,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Mg,
    e: wj,
    id: 108,
    Δⵠⵠⵠ: 221,
    time: 1 / _o,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, vi], [140, sj]],
    w: Wl,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 109,
    Δⵠⵠⵠ: 141,
    time: 0.2,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    ⵠᐃⵠ: Hi,
    e: os,
    id: 110,
    Δⵠⵠⵠ: 128,
    time: 1 / Hh,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[128, mk]],
    w: 0,
    f: wg,
    ⵠᐃⵠ: mk,
    e: Qs,
    id: 111,
    Δⵠⵠⵠ: 127,
    time: ie / 5,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[142, qi], [128, Gh]],
    w: Zj,
    f: Gh,
    ⵠᐃⵠ: Zj,
    e: Qs,
    id: 112,
    Δⵠⵠⵠ: 127,
    time: ie / 10,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⵠᐃⵠ: 0,
    e: og,
    id: 113,
    Δⵠⵠⵠ: 127,
    time: 0.3333333333333333,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[109, 60], [108, vi], [161, xq]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: ig,
    id: 114,
    Δⵠⵠⵠ: 135,
    time: og / Bo,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: In,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 115,
    Δⵠⵠⵠ: 151,
    time: za / rl,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[151, Oq], [234, 40], [238, 1]],
    w: za,
    f: Wl,
    ⵠᐃⵠ: og,
    e: 0,
    id: 116,
    Δⵠⵠⵠ: 152,
    time: 0.005,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 50], [108, 100]],
    w: mk,
    f: 0,
    ⵠᐃⵠ: Lr,
    e: Ih,
    id: 117,
    Δⵠⵠⵠ: 153,
    time: 1 / 90,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 118,
    Δⵠⵠⵠ: 154,
    time: Oq / 90,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: wg,
    e: 0,
    id: 119,
    Δⵠⵠⵠ: 155,
    time: 0.011111111111111112,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Qs,
    e: 0,
    id: 120,
    Δⵠⵠⵠ: 156,
    time: mk / 90,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[121, 90], [202, 180]],
    w: Xn,
    f: fl,
    ⵠᐃⵠ: 0,
    e: Qs,
    id: 121,
    Δⵠⵠⵠ: 157,
    time: og / 90,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[108, 70]],
    w: 1,
    f: wg,
    ⵠᐃⵠ: 0,
    e: Yh,
    id: 122,
    Δⵠⵠⵠ: 55,
    time: 0.1,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: os,
    e: Zj,
    id: 123,
    Δⵠⵠⵠ: 56,
    time: Te / 10,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[109, 40], [108, 40]],
    w: Hg,
    f: Mg,
    ⵠᐃⵠ: 0,
    e: Ih,
    id: 124,
    Δⵠⵠⵠ: 144,
    time: 0.1,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[143, 1], [117, zs]],
    w: Hi,
    f: Qs,
    ⵠᐃⵠ: Lr,
    e: ig,
    id: 125,
    Δⵠⵠⵠ: 145,
    time: 1 / Tr,
    ⵠⵠⵠ: bs.ⵠⲆⵠⲆΔ
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, ci]],
    w: 1,
    f: gs,
    ⵠᐃⵠ: Te,
    e: 0,
    id: 126,
    Δⵠⵠⵠ: 59,
    time: Hg / 120,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[59, ie], [186, 1], [202, 150], [150, xj]],
    w: 1,
    f: 1,
    ⵠᐃⵠ: Hg,
    e: 0,
    id: 127,
    Δⵠⵠⵠ: 60,
    time: 0.005555555555555556,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[26, Tl], [197, 10], [196, 10], [161, 10]],
    w: Wl,
    f: Qs,
    ⵠᐃⵠ: Qs,
    e: ya,
    id: 128,
    Δⵠⵠⵠ: 61,
    time: 0.016666666666666666,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[147, vi], [185, ie], [121, 150], [149, 3]],
    w: 1,
    f: Hg,
    ⵠᐃⵠ: zs,
    e: 0,
    id: 129,
    Δⵠⵠⵠ: 62,
    time: zs / 120,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[62, Gh], [187, 1], [202, 150], [150, 2]],
    w: zs,
    f: 1,
    ⵠᐃⵠ: 1,
    e: Qs,
    id: 130,
    Δⵠⵠⵠ: 63,
    time: 1 / 180,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[109, Ks], [161, Os]],
    w: mk,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Qs,
    id: 131,
    Δⵠⵠⵠ: 64,
    time: 1 / vi,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[109, 30]],
    w: Hg,
    f: Hi,
    ⵠᐃⵠ: 0,
    e: wj,
    id: 132,
    Δⵠⵠⵠ: 101,
    time: 1 / Hh,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[108, 200], [161, aa], [222, Vn], [64, 1]],
    w: ie,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Hi,
    id: 133,
    Δⵠⵠⵠ: 65,
    time: Wl / 25,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[108, Xa], [231, za]],
    w: za,
    f: Lr,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 134,
    Δⵠⵠⵠ: 102,
    time: ie / 5,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, Vn], [65, Hg]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Da,
    e: Lr,
    id: 135,
    Δⵠⵠⵠ: 66,
    time: 1 / 30,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Zj,
    id: 136,
    Δⵠⵠⵠ: 103,
    time: 1 / Bo,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[112, 200], [147, 10], [231, Dg], [222, 8], [66, zs]],
    w: Tl,
    f: Hi,
    ⵠᐃⵠ: Qs,
    e: Mg,
    id: 137,
    Δⵠⵠⵠ: 67,
    time: 0.02857142857142857,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[112, 10], [222, Te]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: In,
    e: fl,
    id: 138,
    Δⵠⵠⵠ: 104,
    time: 1 / sk,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[121, 200], [147, Bo], [222, 8], [232, Hr], [67, 1]],
    w: 1,
    f: Qs,
    ⵠᐃⵠ: Ih,
    e: 0,
    id: 139,
    Δⵠⵠⵠ: 68,
    time: Xn / 40,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[121, Zk], [232, 1]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Da,
    e: Mg,
    id: 140,
    Δⵠⵠⵠ: 105,
    time: 1 / $q,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[202, 200], [147, lg], [129, 1], [68, 1]],
    w: 1,
    f: os,
    ⵠᐃⵠ: fl,
    e: 0,
    id: 141,
    Δⵠⵠⵠ: 69,
    time: Oq / 45,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[202, 10], [232, 1], [203, gs]],
    w: 1,
    f: os,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 142,
    Δⵠⵠⵠ: 106,
    time: Hg / ul,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[234, 200], [147, Yg], [185, mk], [69, zg]],
    w: 1,
    f: Zj,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 143,
    Δⵠⵠⵠ: 70,
    time: Hg / 50,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[234, 10], [238, 1]],
    w: og,
    f: Yh,
    ⵠᐃⵠ: In,
    e: 0,
    id: 144,
    Δⵠⵠⵠ: 107,
    time: 1 / hn,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[109, 100]],
    w: mk,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 145,
    Δⵠⵠⵠ: 71,
    time: zs / 25,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: os,
    e: wj,
    id: 146,
    Δⵠⵠⵠ: 72,
    time: mk / 40,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: In,
    ⵠᐃⵠ: Da,
    e: wg,
    id: 147,
    Δⵠⵠⵠ: 73,
    time: 0.02,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[73, zs], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: fl,
    ⵠᐃⵠ: 0,
    e: Da,
    id: 148,
    Δⵠⵠⵠ: 74,
    time: 0.014285714285714285,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: Oq,
    f: Zj,
    ⵠᐃⵠ: wg,
    e: 0,
    id: 149,
    Δⵠⵠⵠ: 75,
    time: 0.011111111111111112,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[75, Oq], [202, 50], [121, 50], [112, 50]],
    w: Te,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 150,
    Δⵠⵠⵠ: 76,
    time: mk / 120,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: Te,
    ⵠᐃⵠ: za,
    e: Ih,
    id: 151,
    Δⵠⵠⵠ: 77,
    time: 0.016666666666666666,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[176, Gh], [111, 200]],
    w: Te,
    f: 1,
    ⵠᐃⵠ: 1,
    e: ya,
    id: 152,
    Δⵠⵠⵠ: 78,
    time: Hg / 60,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: og,
    f: Tl,
    ⵠᐃⵠ: 1,
    e: 0,
    id: 153,
    Δⵠⵠⵠ: 79,
    time: og / 60,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[174, 10], [2, 5], [161, va]],
    w: 1,
    f: Lr,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 154,
    Δⵠⵠⵠ: 83,
    time: Oq / 10,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[2, 3], [161, 2]],
    w: Hg,
    f: Qs,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 155,
    Δⵠⵠⵠ: 84,
    time: 1 / Yg,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[83, 1], [179, Wl], [146, 15], [147, Fs], [222, _a]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: wj,
    id: 156,
    Δⵠⵠⵠ: 85,
    time: Oq / 60,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[84, 1], [178, zs], [146, zl], [147, 5], [222, Iq]],
    w: Xn,
    f: Yh,
    ⵠᐃⵠ: Zj,
    e: 0,
    id: 157,
    Δⵠⵠⵠ: 86,
    time: Tl / 60,
    ⵠⵠⵠ: bs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[181, ie]],
    w: 0,
    f: 0,
    ⵠᐃⵠ: 1,
    e: Da,
    id: 158,
    Δⵠⵠⵠ: 180,
    time: 0.2,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[109, qr], [161, 1]],
    w: 1,
    f: Mg,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 159,
    Δⵠⵠⵠ: 181,
    time: Wl / Hh,
    ⵠⵠⵠ: bs.ⲆᐃⵠᐃΔ
  }, {
    r: [[108, 100], [140, 30]],
    w: Wl,
    f: mk,
    ⵠᐃⵠ: mj,
    e: ya,
    id: 160,
    Δⵠⵠⵠ: 182,
    time: 1 / Ra,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, Dl]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: Zj,
    e: In,
    id: 161,
    Δⵠⵠⵠ: 183,
    time: zg / 5,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, ah], [108, 50], [2, kq], [174, Qr], [161, 6]],
    w: Tl,
    f: 0,
    ⵠᐃⵠ: Ih,
    e: Ih,
    id: 162,
    Δⵠⵠⵠ: 198,
    time: Tl / Jg,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 250], [147, Ch], [146, 2], [139, vg]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: wj,
    id: 163,
    Δⵠⵠⵠ: 223,
    time: zs / 50,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 250], [161, gn], [146, 2], [222, 8]],
    w: zs,
    f: In,
    ⵠᐃⵠ: 0,
    e: ig,
    id: 164,
    Δⵠⵠⵠ: 224,
    time: zs / 50,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: og,
    f: wj,
    ⵠᐃⵠ: ya,
    e: 0,
    id: 165,
    Δⵠⵠⵠ: 89,
    time: mk / Ok,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 250], [161, te], [120, 10], [231, 8]],
    w: Hg,
    f: Mg,
    ⵠᐃⵠ: 0,
    e: Rq,
    id: 166,
    Δⵠⵠⵠ: 230,
    time: 0.02,
    ⵠⵠⵠ: bs.ΔⲆⵠⵠⲆ
  }, {
    r: [[109, 40]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: 0,
    e: Hi,
    id: 167,
    Δⵠⵠⵠ: 94,
    time: 1 / Oj,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[94, Wl], [108, 40], [109, 50]],
    w: 1,
    f: ig,
    ⵠᐃⵠ: 0,
    e: wg,
    id: 168,
    Δⵠⵠⵠ: 95,
    time: 0.1,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: 0,
    e: 0,
    id: 169,
    Δⵠⵠⵠ: 96,
    time: og / nh,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: Gh,
    f: Lr,
    ⵠᐃⵠ: 0,
    e: Hi,
    id: 170,
    Δⵠⵠⵠ: 97,
    time: 0.03333333333333333,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[97, mk], [121, 40], [112, 70], [111, 110]],
    w: Xn,
    f: 0,
    ⵠᐃⵠ: Mg,
    e: Hi,
    id: 171,
    Δⵠⵠⵠ: 98,
    time: Wl / 60,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }, {
    r: [[98, og], [202, 50], [121, 80], [112, 110]],
    w: gs,
    f: 0,
    ⵠᐃⵠ: fl,
    e: ig,
    id: 172,
    Δⵠⵠⵠ: 99,
    time: 1 / 90,
    ⵠⵠⵠ: bs.ΔⲆΔⵠ
  }];
  const Xs = Nl;
  Nr = 300;
  function Ys(a, b, c, d, e) {
    $j(Lw, a, b, c, d, e);
    return ((83 + (et(Mw[0], Mw[1]) ^ rt(Mw[Vh], Mw[3], Mw[4], Mw[0]))) * 75 + 74) % 65537;
  }
  function Zs(a, b, c) {
    Wi(Lw, a, b, c);
    const d = Iw(Mw[Ih], Mw[Wl], Mw[2], Mw[fl]);
    Iw(Mw[1], Mw[Vg], Mw[ig], Mw[za]);
    return ~(d & 40115) & d | ~(d & 40115) & 40115;
  }
  function $s(a, b, c) {
    const d = ~(a & 21621) & (a | 21621);
    const e = b ^ 64260;
    const f = (0 << (c >> Mg & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (24 << (c >> 24 & hg));
    return ((39717 + (oo(d, e, f, d) ^ function (b, c, d, e) {
      const f = (2147483587 + (17040 + b) * 2147483629) % 2147483647;
      const g = ~(c & 30717) & c | ~(c & 30717) & 30717;
      const i = ~(d & 23873) & (d | 23873);
      const a = (0 << (e & 255)) + (16 << (e >> 24 & 255)) + (8 << (e >> 8 & 255)) + (24 << (e >> 16 & 255));
      const j = Sw(f, g, i, a);
      eb(f, g, i, a);
      return ~(j & 57141) & j | ~(j & 57141) & 57141;
    }(e, f, d, e))) * 22695477 + 1) % 4294967296;
  }
  ΔΔᐃ = {
    ⵠⵠΔⵠΔⲆᐃ: 300,
    ⵠⵠᐃⲆⲆᐃⲆ: 301,
    ⵠᐃΔⲆⲆⲆⲆ: 302,
    ⲆᐃΔⲆⲆᐃⲆ: 303,
    ⵠᐃᐃⲆᐃᐃᐃ: 304,
    ΔⲆᐃΔΔΔⵠ: 305,
    ⲆΔⲆᐃᐃⵠᐃ: 306,
    ⵠΔᐃΔᐃⵠΔ: 307,
    ᐃⵠⲆⲆᐃΔⵠ: 308,
    ⲆᐃΔⲆᐃᐃᐃ: 309,
    ⲆΔΔⵠᐃⲆΔ: 310,
    ⵠⵠⲆᐃᐃΔΔ: 311,
    EMPTY: 312,
    ⵠⲆᐃⲆⵠᐃⵠ: 313,
    ⲆᐃᐃⲆᐃᐃⲆ: 314,
    ⲆᐃⲆⵠⲆᐃⲆ: 315,
    ΔⵠⵠⲆᐃᐃⵠ: 316,
    ᐃⵠᐃᐃᐃⲆΔ: 317,
    ⲆᐃⵠΔᐃᐃⲆ: 318,
    ⲆΔΔΔⵠⲆᐃ: 319,
    ⵠⲆⲆΔᐃᐃΔ: 320,
    ᐃⵠⲆᐃᐃᐃᐃ: 321,
    ΔᐃⵠΔⵠ: 322,
    ᐃⵠⵠⲆᐃᐃΔ: 323,
    ᐃᐃⲆⲆⲆ: 324,
    ⵠᐃΔⲆᐃⲆᐃ: 325,
    ᐃᐃⵠⵠⵠᐃΔ: 326,
    ⲆⲆⵠᐃⵠⵠⵠ: 327,
    ⲆΔⵠⵠⲆⲆΔ: 328,
    ⵠⲆⵠⵠⵠᐃⲆ: 329,
    ⵠᐃᐃⲆΔᐃᐃ: 330,
    ΔΔⲆⲆⵠⲆΔ: 331,
    POINTS: 332,
    ⵠΔΔᐃᐃⲆⲆ: 333,
    ⲆⵠⲆΔⲆⲆᐃ: 334,
    ⵠⲆΔⵠΔⵠⲆ: 335,
    ⵠⲆΔᐃⵠΔⲆ: 336,
    ⵠⲆᐃᐃᐃΔⵠ: 337,
    ᐃⵠᐃⵠⲆⵠⲆ: 338,
    ᐃⲆΔΔΔⵠⵠ: 339,
    ΔΔᐃΔᐃΔⵠ: 340,
    ⵠᐃⵠⲆᐃⲆⵠ: 341,
    ΔᐃⲆΔⵠᐃⵠ: 342,
    ᐃⵠΔᐃⲆⵠΔ: 343
  };
  const _s = wk;
  function at(a, b, c, d, e, f) {
    Rj(Lw, a, b, c, d, e, f);
    return ((234 + (Hw(Mw[0], Mw[mk], Mw[Vg], Mw[3], Mw[4], Mw[Oj]) ^ function (a, b, c) {
      Ke(Lw, a, b, c);
      const d = Jk(Mw[0], Mw[1], Mw[Vg]);
      const e = Kn(Mw[0], Mw[1], Mw[2], Mw[Da]);
      return ((233 + (d ^ e)) * 75 + 74) % 65537;
    }(Mw[Hi], Mw[1], Mw[xq]))) * 16807 + 0) % 2147483647;
  }
  const bt = _l;
  function ct() {
    Et[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    Et[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    Et[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    Et[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    Et[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    Et[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    Et[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    Et[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    Et[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    Et[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    Et[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    Et[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    Et[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    Et[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    Et[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    Et[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    Et[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    Et[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    Et[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    Et[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    Et[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    Et[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    Et[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    Et[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    Et[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    Et[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    Et[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    Et[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    Et[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    Et[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    Et[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    Et[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    Et[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    Et[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    Et[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    Et[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    Et[232] = ["Vulture Feather", "From a deadly vulture"];
    Et[234] = ["Emerald", "How many golden breads can you get from it?"];
    Et[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    Et[80] = ["Turban", "Useful to survive in the desert."];
    Et[81] = ["Ninja outfit", "Essential to survive in the desert"];
    Et[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    Et[236] = ["Pilot Glasses"];
    Et[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    Et[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    Et[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    Et[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    Et[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    Et[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    Et[89] = ["Saddle", "Hit a boar with it to tame it."];
    Et[90] = ["Witch Hat", "You're a wizard Starvy!"];
    Et[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    Et[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    Et[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    Et[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    Et[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    Et[224] = ["Sled", "You are faster with it in the snow"];
    Et[223] = ["Boat", "You are faster with it in the water"];
    Et[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    Et[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
    Et[222] = ["Penguin Feather", "From a deadly cute penguin."];
    Et[231] = ["Hawk Feather", "From a deadly hawk."];
    Et[233] = ["Cactus", "Food : 20", "Water : 10"];
    Et[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    Et[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    Et[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    Et[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    Et[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    Et[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    Et[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    Et[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    Et[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    Et[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    Et[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    Et[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    Et[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    Et[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    Et[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    Et[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    Et[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Et[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Et[53] = ["Pitchfork", "Perfect for gathering"];
    Et[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    Et[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    Et[_r.ᐃᐃΔΔᐃⲆᐃ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    Et[_r.ΔⲆⲆⲆⵠⵠᐃ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    Et[_r.ΔⵠΔᐃᐃΔⲆ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    Et[_r.ᐃᐃⵠⲆᐃⵠⲆ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    Et[_r.ⲆⲆᐃΔΔᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    Et[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    Et[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    Et[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    Et[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    Et[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    Et[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    Et[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    Et[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    Et[203] = ["Flame", "It's hot!"];
    Et[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    Et[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    Et[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    Et[202] = ["Reidite", "The ultimate ore"];
    Et[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    Gt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Gt[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    Gt[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    Gt[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    Gt[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    Gt[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    Gt[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    Gt[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    Gt[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    Gt[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    Gt[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    Gt[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    Gt[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    Gt[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    Gt[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    Gt[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    Gt[38] = ["You died crushed by an angry baby mammoth."];
    Gt[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    Gt[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    Et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Et[341] = "A sandstorm is approaching in a few seconds.";
    Et[340] = "The sandstorm will soon stop.";
    Et[343] = "A blizzard is approaching in a few seconds.";
    Et[342] = "The blizzard will soon stop.";
    Et[328] = " BACK TO THE GAME";
    Et[329] = " Share on Twitter";
    Et[330] = " Share on Facebook";
    Et[331] = "You can buy items on the shop in the next game with your points";
    Et[332] = "points";
    Et[333] = "Score";
    Et[334] = "Kill";
    Et[335] = "Days survived";
    Et[336] = "Building method: Free. Press G to change";
    Et[337] = "Building method: Grid. Press G to change";
    Et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    Et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    Et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = ya; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Et[7] = ["Hand"];
    Et[140] = ["Dirt", "Dirty!"];
    Et[126] = ["Sand", "I got it in my eyes!"];
    Et[109] = ["Wood", "You can't get enough of it!"];
    Et[108] = ["Stone", "Also called a rock"];
    Et[111] = ["Gold", "Be generous, give it to others"];
    Et[112] = ["Diamond", "What will you make with it?"];
    Et[121] = ["Amethyst", "It's Mauve like Lapa"];
    Et[131] = ["Flour", "Used in cooking"];
    Et[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    Et[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    Et[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    Et[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    Et[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    Et[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    Et[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    Et[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    Et[200] = ["Candies", "Only for children!", "Food: 20"];
    Et[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    Et[201] = ["Garland", "Perfect decoration for roofs"];
    Et[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    Et[110] = ["Berry", "Berry tasty!", "Food: 10"];
    Et[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Et[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    Et[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Et[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    Et[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Et[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    Et[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    Et[194] = ["Thorn bush", "It stings!"];
    Et[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    Et[142] = ["Ice", "Useful for making cakes and water"];
    Et[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    Et[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    Et[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    Et[178] = ["Pure Fur", "You're a bread factory"];
    Et[179] = ["Dark Fur", "You get ready to do something wrong"];
    Et[146] = ["Winter Fur", "These animals just wanted a hug..."];
    Et[139] = ["Scales", "It smells like fish!"];
    Et[129] = ["Kraken Skin", "Weren't you too scared?"];
    Et[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    Et[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    Et[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    Et[161] = ["Cord", "Used in crafting Hats and Bag"];
    Et[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    Et[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    Et[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    Et[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    Et[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    Et[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    Et[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    Et[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    Et[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    Et[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    Et[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    Et[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    Et[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    Et[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    Et[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    Et[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    Et[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    Et[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    Et[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    Et[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
    Et[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    Et[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    Et[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    Et[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    Et[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    Et[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    Et[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    Et[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    Et[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    Et[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    Et[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    Et[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    Et[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    Et[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    Et[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    Et[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    Et[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    Et[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    Et[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    Et[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    Et[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    Et[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    Et[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    Et[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    Et[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Et[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    Et[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Et[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    Et[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    Et[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    Et[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    Et[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    Et[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    Et[177] = ["Blue Gemstone", "For too kind people"];
    Et[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    Et[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    Et[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    Et[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    Et[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    Et[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    Et[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    Et[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    Et[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    Et[29] = ["Bag", "More space for your items!"];
    Et[120] = ["Paper", "Used in book-crafting"];
    Et[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    Et[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    Et[148] = ["Lock", "Allow you to lock your chest"];
    Et[158] = ["Lock-pick", "Allows you to unlock one chest"];
    Et[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    Et[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    Et[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    Et[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    Et[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    Et[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    Et[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    Et[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    Et[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    Et[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    Et[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    Et[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    Et[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    Et[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    Et[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    Et[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    Et[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    Et[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    Et[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    Et[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    Et[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    Et[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    Et[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    Et[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    Et[300] = "You cannot join this server";
    Et[301] = "Kicked: ";
    Et[302] = "Your key is already used by someone else";
    Et[303] = "Your key is wrong";
    Et[304] = "You have an old version, you need to clear your cache";
    Et[338] = "Your client version is too recent for this server. The server is being updated";
    Et[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    Et[305] = "There are no more new resources";
    Et[306] = "You survived 1 day";
    Et[307] = "You survived ";
    Et[308] = " days";
    Et[309] = "You are dead ;-;";
    Et[310] = "Server cannot find spawn location! Spam the play button!";
    Et[311] = "Server is full! Spam the play button!";
    Et[312] = "Resource is empty";
    Et[313] = "Inventory is full (right-click to empty items)";
    Et[314] = " is dead";
    Et[315] = "This is not the right tool";
    Et[316] = "You joined a team";
    Et[317] = "You are dead";
    Et[318] = " joined the team";
    Et[319] = "Your team was destroyed";
    Et[320] = "You left the team";
    Et[321] = " left the team";
    Et[322] = "Someone stole your token :>";
    Et[323] = "Choose a server";
    Et[324] = "players";
    Et[325] = "total players";
    Et[326] = "players on this mode";
    Et[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    Gt[Ih] = ["You were killed for no reason"];
    Gt[1] = ["You starved to death, as the name of the game implies"];
    Gt[eh] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    Gt[Hk] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    Gt[Ng] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    Gt[hl] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    Gt[qq] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    Gt[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    Gt[Iq] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    Gt[ms] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    Gt[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    Gt[bh] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    Gt[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    Gt[jg] = ["You died of thirst. Better drink your own piss."];
    Gt[Sq] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    Gt[ng] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    Gt[bt] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    Gt[17] = ["Your skin's falling apart, the sun killed you."];
    Gt[18] = ["Garlic stored in your pockets boiled your brain."];
    Gt[Ps] = ["As a vampire, don't stand near the garlic cloves."];
    Gt[20] = ["You ate garlic as a vampire, what did you expect?"];
    Gt[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const dt = il;
  function et(a, b) {
    Di(Lw, a, b);
    return ~(Mw[0] & 35256) & Mw[Hi] | ~(Mw[0] & 35256) & 35256;
  }
  function ft() {
    Et[184] = ["You feel a great power emanating from this orb"];
    Gt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Et[328] = " BACK TO THE GAME";
    Et[329] = " Share on Twitter";
    Et[330] = " Share on Facebook";
    Et[331] = "You can buy items on the shop in the next game with your points";
    Et[332] = "points";
    Et[333] = "Score";
    Et[334] = "Kill";
    Et[335] = "Days survived";
    Et[336] = "Building method: Free. Press G to change";
    Et[337] = "Building method: Grid. Press G to change";
    Et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = Yh; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Et[7] = ["Рука"];
    Et[140] = ["Земля", "Грязно!"];
    Et[126] = ["Песок", "Он в моих глазах!"];
    Et[109] = ["Дерево", "Постоянно нужно больше!"];
    Et[108] = ["Камень", "Твердый"];
    Et[111] = ["Золото", "Будьте щедры, давайте его другим"];
    Et[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    Et[121] = ["Аметист", "Он сиреневый, как Lapa"];
    Et[131] = ["Мука", "Используется в готовке"];
    Et[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    Et[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    Et[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    Et[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    Et[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    Et[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    Et[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    Et[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    Et[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    Et[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    Et[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    Et[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Et[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    Et[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Et[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    Et[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Et[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    Et[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Et[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    Et[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    Et[194] = ["Колючий Куст", "Это больно!"];
    Et[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    Et[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    Et[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    Et[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    Et[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    Et[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    Et[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    Et[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    Et[139] = ["Чешуя", "Она пахнет рыбой!"];
    Et[129] = ["Шкура Кракена", "Вы не испугались?"];
    Et[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    Et[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    Et[114] = ["Верстак", "Необходим для создания многих предметов"];
    Et[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    Et[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    Et[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    Et[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    Et[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    Et[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    Et[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    Et[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    Et[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    Et[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    Et[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    Et[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    Et[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    Et[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    Et[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    Et[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    Et[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    Et[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    Et[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    Et[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    Et[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    Et[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    Et[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    Et[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    Et[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    Et[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    Et[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    Et[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    Et[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    Et[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    Et[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    Et[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    Et[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    Et[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    Et[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    Et[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    Et[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    Et[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    Et[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    Et[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Et[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    Et[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    Et[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    Et[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Et[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Et[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Et[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    Et[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    Et[185] = ["Шар Дракона", "Даётся за квест"];
    Et[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    Et[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    Et[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    Et[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    Et[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    Et[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    Et[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    Et[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    Et[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    Et[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    Et[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    Et[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    Et[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    Et[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    Et[120] = ["Бумага", "Используется при создании книги"];
    Et[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    Et[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    Et[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    Et[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    Et[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    Et[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    Et[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    Et[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    Et[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    Et[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    Et[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    Et[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    Et[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    Et[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    Et[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    Et[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    Et[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    Et[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    Et[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    Et[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    Et[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    Et[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    Et[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    Et[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    Et[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    Et[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    Et[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    Et[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    Et[300] = "Вы не можете зайти на этот сервер";
    Et[301] = "Выгнаны: ";
    Et[302] = "Ваш ключ уже используется кем-то";
    Et[303] = "Ваш ключ неправильный";
    Et[304] = "У вас старая версия, вам нужно очистить кеш";
    Et[305] = "Ресурсов больше нет";
    Et[306] = "Вы выжили 1 день";
    Et[307] = "Вы выжили ";
    Et[308] = " дней";
    Et[309] = "Вы умерли ;-;";
    Et[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    Et[311] = "Сервер заполнен! Спамьте кнопку играть!";
    Et[312] = "Ресурсы закончились";
    Et[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    Et[314] = " умер";
    Et[315] = "Это не тот инструмент";
    Et[316] = "Вы вошли в команду";
    Et[317] = "Вы умерли";
    Et[318] = " вошёл в команду";
    Et[319] = "Ваша команда была разрушена";
    Et[320] = "Вы покинули команду";
    Et[321] = " покинул команду";
    Et[322] = "Кто-то использует ваш токен :>";
    Et[323] = "Выберите сервер";
    Et[324] = "игроков";
    Et[325] = "игроков всего";
    Et[326] = "игроков в этом режиме";
    Et[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    Gt[0] = ["Вы были убиты без причины"];
    Gt[gs] = ["Вы умерли от голода, как название игры подразумевает это"];
    Gt[rs] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    Gt[Tr] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    Gt[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    Gt[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    Gt[Ck] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    Gt[ia] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    Gt[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    Gt[Pg] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    Gt[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    Gt[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    Gt[gr] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    Gt[ja] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    Gt[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    Gt[ul] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    Gt[_l] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    Gt[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    Gt[vs] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    Gt[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    Gt[Ok] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    Gt[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function gt(b, c, d, e, f, i) {
    const j = ~(b & 23002) & b | ~(b & 23002) & 23002;
    const a = f ^ 35943;
    const k = i ^ 36773;
    const h = oo(j, c ^ 21973, (1013904223 + (63691 + d) * 1664525) % 4294967296, ~(e & 16720) & 16720 | ~(e & 16720) & e);
    const l = xa(a, k, j);
    return (16 << ((h ^ l) >> 8 & 255)) + (24 << ((h ^ l) >> 16 & 255)) + (0 << ((h ^ l) >> Yh & 255)) + (8 << ((h ^ l) >> 24 & 255));
  }
  function ht(b, c, d, e, f, i) {
    const j = (8 << (b >> 16 & 255)) + (0 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (24 << (b & fa));
    const a = (16 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (8 << (c & 255)) + (24 << (c >> 24 & 255));
    const k = (1013904223 + (63114 + d) * 1664525) % 4294967296;
    const h = function (b, c, d, e, f, i) {
      const j = ((63022 + b) * 1103515245 + 12345) % 2147483648;
      const a = (c | 47370) & ~(c & 47370);
      const k = (e | 22154) & ~(e & 22154);
      const h = ~(f & 26219) & f | ~(f & 26219) & 26219;
      const l = i ^ 52709;
      const g = $s(j, a, ~(d & 56031) & d | ~(d & 56031) & 56031);
      Ma(k, h, l, j, a);
      return ~(g & 56525) & 56525 | ~(g & 56525) & g;
    }(j, a, k, ~(e & 25711) & (e | 25711), ~(f & 26417) & f | ~(f & 26417) & 26417, (i + 38278) % 65476);
    const l = ot(j, a, k);
    return (mk + (32726 + (h ^ l)) * 22695477) % 4294967296;
  }
  const it = Dq;
  function kt() {
    Et[184] = ["You feel a great power emanating from this orb"];
    Gt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Et[328] = " BACK TO THE GAME";
    Et[329] = " Share on Twitter";
    Et[330] = " Share on Facebook";
    Et[331] = "You can buy items on the shop in the next game with your points";
    Et[332] = "points";
    Et[333] = "Score";
    Et[334] = "Kill";
    Et[335] = "Days survived";
    Et[336] = "Building method: Free. Press G to change";
    Et[337] = "Building method: Grid. Press G to change";
    Et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; Is > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Et[7] = ["mão"];
    Et[140] = ["terra", "está sujo!"];
    Et[126] = ["areia", "entrou nos meus olhos!"];
    Et[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    Et[108] = ["pedra", "também chamado rocha"];
    Et[111] = ["ouro", "seja generoso, dê para outros"];
    Et[112] = ["diamante", "o que você irá fazer com isso?"];
    Et[121] = ["ametista", "é mauve como lapa"];
    Et[131] = ["farinha", "usada na cozinha"];
    Et[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    Et[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    Et[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    Et[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    Et[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    Et[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    Et[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    Et[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    Et[200] = ["doces", "apenas para crianças!", "comida: 100"];
    Et[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    Et[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    Et[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Et[110] = ["berry", "Berry saborosa!", "comida: 10"];
    Et[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    Et[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    Et[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    Et[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    Et[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Et[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    Et[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    Et[194] = ["mato de espinhos", "pica!"];
    Et[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    Et[142] = ["gelo", "útil para fazer bolo e água"];
    Et[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    Et[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    Et[2] = ["pele de coelho", "o coelho era tão fofo..."];
    Et[178] = ["pele pura", "você é uma fábrica de pão"];
    Et[179] = ["pele negra", "você está pronto para fazer algo errado"];
    Et[146] = ["pele de inverno", "ele só queria um abraço"];
    Et[139] = ["escala", "é pequeno como peixe!"];
    Et[129] = ["pele do kraken", "você não está com medo?"];
    Et[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    Et[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    Et[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    Et[161] = ["linha", "usada para fazer chapéus e mochila"];
    Et[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    Et[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    Et[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    Et[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    Et[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    Et[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    Et[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    Et[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    Et[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    Et[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    Et[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    Et[_r.ⲆᐃΔⵠΔΔᐃⲆⲆ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    Et[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    Et[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    Et[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    Et[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    Et[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    Et[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    Et[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    Et[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    Et[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    Et[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    Et[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    Et[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    Et[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    Et[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    Et[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    Et[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    Et[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    Et[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    Et[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    Et[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    Et[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    Et[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    Et[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    Et[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    Et[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    Et[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    Et[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    Et[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    Et[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    Et[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    Et[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Et[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    Et[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Et[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    Et[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    Et[185] = ["esfera do dragão", "dado na questt"];
    Et[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    Et[175] = ["pedra verde", "você não vai trapacear, promete?"];
    Et[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    Et[177] = ["pedra azul", "para pessoas muito gentis"];
    Et[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    Et[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    Et[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    Et[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    Et[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    Et[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    Et[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    Et[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    Et[49] = ["regador", "permite regar as plantas", "dano: 1"];
    Et[29] = ["mochila", "mais espaço para seus itens!"];
    Et[120] = ["papel", "usado para fazer o livro"];
    Et[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    Et[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    Et[148] = ["fechadura", "permite você trancar seu baú"];
    Et[158] = ["chave", "permite destrancar um baú"];
    Et[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    Et[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    Et[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    Et[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    Et[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    Et[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    Et[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    Et[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    Et[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    Et[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    Et[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    Et[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    Et[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    Et[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    Et[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    Et[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    Et[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    Et[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    Et[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    Et[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    Et[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    Et[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Et[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Et[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    Et[300] = "você não pode entrar no servidor";
    Et[301] = "kickado: ";
    Et[302] = "sua chave está em uso por outra pessoa";
    Et[303] = "sua chave está errada";
    Et[304] = "você tem uma versão velha, limpe seu cache";
    Et[305] = "não tem mais recursos";
    Et[306] = "você sobreviveu 1 dia";
    Et[307] = "você sobreviveu ";
    Et[308] = " dias";
    Et[309] = "você está morto ;-;";
    Et[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    Et[311] = "servidor está cheio! spam o botão de play!";
    Et[312] = "não tem recursos";
    Et[313] = "inventário está cheio (botão direito para deletar itens)";
    Et[314] = " está morto";
    Et[315] = "essa não é a ferramenta certa";
    Et[316] = "você entrou no time";
    Et[317] = "você está morto";
    Et[318] = "entrou no time";
    Et[319] = "seu time foi destruido";
    Et[320] = "você saiu do time";
    Et[321] = " saiu do time";
    Et[322] = "alguém roubou sua ficha :>";
    Et[323] = "escolha um servidor";
    Et[324] = "jogadores";
    Et[325] = "jogadores totais";
    Et[326] = "jogadores nesse modo";
    Et[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    Gt[wj] = ["você morreu sem motivo"];
    Gt[1] = ["você morreu de fome, como o jogo diz"];
    Gt[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    Gt[ea] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    Gt[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    Gt[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    Gt[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    Gt[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    Gt[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    Gt[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    Gt[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    Gt[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    Gt[Sj] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    Gt[ug] = ["você morreu de sede. melhor beber sua própria urina."];
    Gt[Tn] = ["você sabia que você morre afogado? agora você sabe."];
    Gt[Ss] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    Gt[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    Gt[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    Gt[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    Gt[19] = ["como vampiro, não chegue perto do alho."];
    Gt[20] = ["você comeu alho como vampiro, o que você esperava?"];
    Gt[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  function lt(a, b, c, d, e) {
    Oe(Lw, a, b, c, d, e);
    return ((205 + (Iw(Mw[Lr], Mw[ie], Mw[2], Mw[3]) ^ function (a, b, c, d) {
      Nj(Lw, a, b, c, d);
      const e = Zs(Mw[Yh], Mw[1], Mw[Ug]);
      const f = at(Mw[3], Mw[wj], Mw[og], Mw[2], Mw[ea], Mw[wg]);
      return ((108 + (e ^ f)) * 48271 + Qs) % 2147483647;
    }(Mw[4], Mw[fl], Mw[Wl], Mw[Rl]))) * 75 + 74) % 65537;
  }
  const mt = ul;
  const nt = Ag;
  function ot(a, b, c) {
    const d = (a | 46973) & ~(a & 46973);
    const e = ~(b & 23097) & b | ~(b & 23097) & 23097;
    const f = c ^ 61143;
    return (41038 + (hf(d, e, f, d, e, f) ^ hf(d, e, f, d, e, f))) % 65297;
  }
  const pt = kg;
  function qt() {
    Et[184] = ["You feel a great power emanating from this orb"];
    Gt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Et[328] = " BACK TO THE GAME";
    Et[329] = " Share on Twitter";
    Et[330] = " Share on Facebook";
    Et[331] = "You can buy items on the shop in the next game with your points";
    Et[332] = "points";
    Et[333] = "Score";
    Et[334] = "Kill";
    Et[335] = "Days survived";
    Et[336] = "Building method: Free. Press G to change";
    Et[337] = "Building method: Grid. Press G to change";
    Et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = mj; wk > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Et[7] = ["Mano"];
    Et[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    Et[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    Et[109] = ["Madera", "¡Nunca hay suficiente!"];
    Et[108] = ["Piedra", "También llamada roca."];
    Et[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    Et[112] = ["Diamante", "¿Que vas a hacer con él?"];
    Et[121] = ["Amatista", "Es Mauve como Lapa"];
    Et[131] = ["Harina", "Usada para cocinar."];
    Et[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    Et[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    Et[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    Et[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    Et[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    Et[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    Et[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    Et[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    Et[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    Et[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    Et[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    Et[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Et[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    Et[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Et[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    Et[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Et[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    Et[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    Et[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    Et[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    Et[194] = ["Planta de Espinas", "¡Te daña!"];
    Et[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    Et[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    Et[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    Et[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    Et[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    Et[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    Et[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    Et[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    Et[139] = ["Escamas", "¡Huele a pescado!"];
    Et[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    Et[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    Et[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    Et[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    Et[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    Et[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    Et[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    Et[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    Et[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    Et[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    Et[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    Et[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    Et[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    Et[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    Et[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    Et[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    Et[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    Et[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    Et[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    Et[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    Et[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    Et[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    Et[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    Et[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    Et[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    Et[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    Et[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    Et[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    Et[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    Et[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    Et[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    Et[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    Et[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    Et[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    Et[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    Et[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    Et[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    Et[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    Et[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    Et[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    Et[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    Et[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    Et[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    Et[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    Et[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    Et[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    Et[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    Et[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    Et[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    Et[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    Et[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    Et[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    Et[185] = ["Esfera del Dragón", "Dada en la misión"];
    Et[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    Et[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    Et[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    Et[177] = ["Gema Azul", "Para gente muy amable"];
    Et[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Et[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Et[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    Et[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    Et[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    Et[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    Et[128] = ["Botella Vacia", "La puedes llenar de agua"];
    Et[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    Et[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    Et[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    Et[120] = ["Hoja", "Usada para hacer un libro"];
    Et[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    Et[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    Et[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    Et[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    Et[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    Et[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    Et[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    Et[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    Et[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    Et[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    Et[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    Et[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    Et[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    Et[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    Et[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    Et[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    Et[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    Et[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    Et[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    Et[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    Et[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    Et[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    Et[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    Et[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    Et[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    Et[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Et[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Et[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    Et[300] = "No puedes unirte a este servidor";
    Et[301] = "Expulsado: ";
    Et[302] = "Tu llave ya está usada";
    Et[303] = "Tu llave está mal";
    Et[304] = "Tienes una versión antigua, limpia tu cache";
    Et[305] = "No hay mas recursos";
    Et[306] = "Has sobrevivido 1 día";
    Et[307] = "Has sobrevivido ";
    Et[308] = " días";
    Et[309] = "Estás muerto ;-;";
    Et[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    Et[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    Et[312] = "Recurso vacio";
    Et[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    Et[314] = " está muerto";
    Et[315] = "Esta no es la herramienta correcta";
    Et[316] = "Te has unido a un equipo";
    Et[317] = "Estás muerto";
    Et[318] = " se unió al equipo";
    Et[319] = "Tu equipo ha sido destruido";
    Et[320] = "Has dejado el equipo";
    Et[321] = " dejo el equipo ";
    Et[322] = "Alguien te robó tu token :>";
    Et[323] = "Elige un servidor";
    Et[324] = "jugadores";
    Et[325] = "total de jugadores";
    Et[326] = "Jugadores en este modo de juego";
    Et[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    Gt[ig] = ["Has muerto por ninguna razón"];
    Gt[mk] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    Gt[Vh] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    Gt[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    Gt[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    Gt[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    Gt[Fg] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    Gt[Is] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    Gt[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    Gt[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    Gt[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    Gt[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    Gt[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    Gt[ik] = ["Has muerto de sed, mejor bebe tu propia orina."];
    Gt[Tn] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    Gt[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    Gt[ck] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    Gt[17] = ["Tu piel se cayó, el sol te quemó."];
    Gt[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    Gt[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    Gt[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    Gt[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  function rt(a, b, c, d) {
    hi(Lw, a, b, c, d);
    const e = Ir(Mw[0], Mw[zg]);
    Iw(Mw[as], Mw[Lg], Mw[0], Mw[1]);
    return e ^ 57202;
  }
  const st = fl;
  const tt = Og;
  const ut = eg;
  const vt = dr;
  const wt = Tl;
  const xt = vr;
  function yt(b, c, d, e, f) {
    const g = b ^ 39736;
    const i = (16 << (e & 255)) + (24 << (e >> 24 & 255)) + (0 << (e >> 8 & 255)) + (Es << (e >> ck & 255));
    const a = (~(g & 8435) & 8435 | ~(g & 8435) & g) ^ 39346;
    const j = (0 << ((a ^ i) & 255)) + (24 << ((a ^ i) >> 8 & 255)) + (16 << ((a ^ i) >> 16 & fa)) + (8 << ((a ^ i) >> 24 & Nk));
    return ~(j & 26964) & 26964 | ~(j & 26964) & j;
  }
  function zt() {
    Et[184] = ["You feel a great power emanating from this orb"];
    Gt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Et[328] = " BACK TO THE GAME";
    Et[329] = " Share on Twitter";
    Et[330] = " Share on Facebook";
    Et[331] = "You can buy items on the shop in the next game with your points";
    Et[332] = "points";
    Et[333] = "Score";
    Et[334] = "Kill";
    Et[335] = "Days survived";
    Et[336] = "Building method: Free. Press G to change";
    Et[337] = "Building method: Grid. Press G to change";
    Et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = Qs; ia > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Et[7] = ["Hand"];
    Et[140] = ["Boden", "Dreckig!"];
    Et[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    Et[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    Et[108] = ["Stein", "Auch Fels gennant"];
    Et[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    Et[112] = ["Diamant", "Was wirst du daraus machen?"];
    Et[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    Et[131] = ["Mehl", "wird fürs Backen gebraucht"];
    Et[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    Et[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    Et[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    Et[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    Et[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    Et[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    Et[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    Et[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    Et[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    Et[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    Et[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    Et[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Et[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    Et[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Et[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    Et[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Et[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    Et[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Et[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    Et[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    Et[194] = ["Dornenbusch", "Es sticht!"];
    Et[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    Et[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    Et[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    Et[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    Et[2] = ["Hasenfell", "Der Hase war so süß..."];
    Et[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    Et[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    Et[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    Et[139] = ["Schuppen", "Es riecht wie Fisch!"];
    Et[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    Et[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    Et[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    Et[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    Et[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    Et[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    Et[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    Et[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    Et[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    Et[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    Et[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Et[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Et[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    Et[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    Et[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    Et[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    Et[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    Et[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Et[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Et[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Et[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    Et[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    Et[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    Et[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    Et[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    Et[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    Et[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    Et[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    Et[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    Et[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    Et[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    Et[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Et[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Et[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Et[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    Et[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    Et[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    Et[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    Et[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    Et[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    Et[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    Et[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    Et[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    Et[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Et[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    Et[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    Et[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    Et[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Et[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Et[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Et[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    Et[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Et[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    Et[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    Et[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    Et[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    Et[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    Et[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Et[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Et[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Et[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    Et[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    Et[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    Et[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    Et[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    Et[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    Et[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    Et[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    Et[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    Et[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    Et[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    Et[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    Et[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    Et[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    Et[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    Et[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    Et[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    Et[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    Et[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    Et[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    Et[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    Et[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    Et[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    Et[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    Et[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    Et[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    Et[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    Et[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    Et[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    Et[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    Et[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    Et[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    Et[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    Et[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Et[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Et[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    Et[300] = "Du kannst diesem Server nicht beitreten";
    Et[301] = "Gekickt: ";
    Et[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    Et[303] = "Dein Schlüssel ist falsch";
    Et[304] = "Deine Version ist veraltet, säubere dein Cache";
    Et[305] = "Es gibt keine neuen Ressourcen";
    Et[306] = "Du hast einen Tag überlebt";
    Et[307] = "Du hast überlebt ";
    Et[308] = " Tage";
    Et[309] = "Du bist gestorben ;-;";
    Et[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    Et[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    Et[312] = "Ressource ist leer";
    Et[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    Et[314] = " ist gestorben";
    Et[315] = "Das ist nicht das richtige Werkzeug";
    Et[316] = "Du bist einem Team beigetreten";
    Et[317] = "Du bist gestorben";
    Et[318] = " ist dem Team beigetreten";
    Et[319] = "Dein Team wurde zerstört";
    Et[320] = "Du hast das Team verlassen";
    Et[321] = " hat das Team verlassen";
    Et[322] = "Jemand hat dein Token gestohlen :>";
    Et[323] = "Suche dir ein Server aus";
    Et[324] = "Spieler";
    Et[325] = "alle Spieler";
    Et[326] = "Spieler in diesem Modus";
    Et[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    Gt[ig] = ["Du wurdest ohne Grund getötet"];
    Gt[og] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    Gt[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    Gt[eg] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    Gt[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    Gt[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    Gt[Vl] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    Gt[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    Gt[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    Gt[se] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    Gt[Zk] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    Gt[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    Gt[$g] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    Gt[xl] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    Gt[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    Gt[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    Gt[_l] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    Gt[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    Gt[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    Gt[Gg] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    Gt[nh] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    Gt[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const At = tk;
  function Bt() {
    Et[184] = ["You feel a great power emanating from this orb"];
    Gt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Et[328] = " BACK TO THE GAME";
    Et[329] = " Share on Twitter";
    Et[330] = " Share on Facebook";
    Et[331] = "You can buy items on the shop in the next game with your points";
    Et[332] = "points";
    Et[333] = "Score";
    Et[334] = "Kill";
    Et[335] = "Days survived";
    Et[336] = "Building method: Free. Press G to change";
    Et[337] = "Building method: Grid. Press G to change";
    Et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = Hi; Nl > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Et[7] = ["Ręka"];
    Et[140] = ["Ziemia", "Brudna!"];
    Et[126] = ["Piasek", "Mam go w oczach!"];
    Et[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    Et[108] = ["Kamień", "Także nazywany skałą"];
    Et[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    Et[112] = ["Diament", "Co z nim zrobisz?"];
    Et[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    Et[131] = ["Mąka", "Używana w gotowaniu"];
    Et[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    Et[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    Et[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    Et[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    Et[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    Et[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    Et[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    Et[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    Et[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    Et[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    Et[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    Et[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Et[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    Et[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Et[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    Et[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Et[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    Et[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Et[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    Et[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    Et[194] = ["Kolczasty krzew", "Kłuje!"];
    Et[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    Et[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    Et[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    Et[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    Et[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    Et[178] = ["Skóra", "Jesteś fabryką chleba"];
    Et[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    Et[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    Et[139] = ["Łuski", "Pachnie jak ryba!"];
    Et[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    Et[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    Et[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    Et[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    Et[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    Et[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    Et[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    Et[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    Et[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    Et[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    Et[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Et[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Et[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    Et[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    Et[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    Et[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    Et[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    Et[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Et[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Et[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Et[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    Et[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    Et[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    Et[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    Et[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    Et[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    Et[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    Et[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    Et[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    Et[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    Et[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    Et[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Et[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Et[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Et[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    Et[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    Et[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    Et[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    Et[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    Et[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    Et[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    Et[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    Et[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    Et[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    Et[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    Et[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    Et[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    Et[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    Et[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    Et[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    Et[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    Et[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Et[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    Et[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    Et[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    Et[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    Et[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    Et[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Et[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Et[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Et[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    Et[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    Et[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    Et[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    Et[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    Et[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    Et[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    Et[120] = ["Papier", "Używany w tworzeniu książki"];
    Et[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    Et[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    Et[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    Et[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    Et[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    Et[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    Et[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    Et[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    Et[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    Et[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    Et[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    Et[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    Et[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    Et[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    Et[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    Et[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    Et[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    Et[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    Et[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    Et[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    Et[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    Et[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    Et[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    Et[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    Et[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    Et[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Et[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Et[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    Et[300] = "Nie możesz dołączyć do tego serwera";
    Et[301] = "Wyrzucony: ";
    Et[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    Et[303] = "Twój klucz jest nieprawidłowy";
    Et[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    Et[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    Et[306] = "Przeżyłeś 1 dzień";
    Et[307] = "Przeżyłeś ";
    Et[308] = " dni";
    Et[309] = "Jesteś martwy ;-;";
    Et[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    Et[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    Et[312] = "Źródło jest puste";
    Et[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    Et[314] = " jest martwy";
    Et[315] = "To nie jest właściwe narzędzie";
    Et[316] = "Dołączyłeś do drużyny";
    Et[317] = "Jesteś martwy";
    Et[318] = " dołączył do drużyny";
    Et[319] = "Twoja drużyna została zniszczona";
    Et[320] = " Opuściłeś drużynę";
    Et[321] = " opuścił drużynę";
    Et[322] = "Ktoś ukradł twój żeton :>";
    Et[323] = "Wybierz serwer";
    Et[324] = "graczy";
    Et[325] = "wszystkich graczy";
    Et[326] = "graczy w tym trybie";
    Et[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    Gt[Mg] = ["Zostałeś zabity bez powodu"];
    Gt[mk] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    Gt[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    Gt[Js] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    Gt[ba] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    Gt[Eq] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    Gt[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    Gt[$n] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    Gt[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    Gt[pn] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    Gt[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    Gt[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    Gt[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    Gt[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    Gt[di] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    Gt[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    Gt[G] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    Gt[Un] = ["Twoja skóra odpada, słońce cię zabija."];
    Gt[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    Gt[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    Gt[A] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    Gt[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  const Ct = Pl;
  var Dt = function () {
    Et[184] = ["You feel a great power emanating from this orb"];
    Gt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Et[328] = " RETOUR AU JEU";
    Et[329] = " Partage sur Twitter";
    Et[330] = " Partage sur Facebook";
    Et[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    Et[332] = "points";
    Et[333] = "Score";
    Et[334] = "Tués";
    Et[335] = "Jours survécus";
    Et[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    Et[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    Et[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    Et[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    Et[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    Et[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < _s; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    Et[7] = ["Main"];
    Et[140] = ["Terre", "C'est sale!"];
    Et[126] = ["Sable", "J'en ai dans les yeux"];
    Et[109] = ["Bois", "Tu n'en auras jamais trop!"];
    Et[108] = ["Pierre", "Aussi appelée roche"];
    Et[111] = ["Or", "Sois généreux, donne en aux autres"];
    Et[112] = ["Diamant", "Comme tes yeux! wesh"];
    Et[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    Et[131] = ["Farine", "Utile pour la cuisine"];
    Et[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    Et[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    Et[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    Et[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    Et[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    Et[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    Et[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    Et[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    Et[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    Et[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    Et[201] = ["Guirlandes", "Utilisable sur les toits"];
    Et[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Et[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    Et[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Et[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    Et[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Et[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    Et[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Et[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    Et[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    Et[194] = ["Ronces", "Ça pique!"];
    Et[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    Et[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    Et[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    Et[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    Et[2] = ["Peau de lapin", "Vous êtes un monstre"];
    Et[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    Et[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    Et[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    Et[139] = ["Écailles", "Ça sent le poisson!"];
    Et[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    Et[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    Et[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    Et[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    Et[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    Et[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    Et[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    Et[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    Et[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    Et[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    Et[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    Et[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    Et[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    Et[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    Et[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    Et[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    Et[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    Et[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    Et[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    Et[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    Et[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    Et[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    Et[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    Et[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    Et[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    Et[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    Et[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    Et[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    Et[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    Et[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    Et[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    Et[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    Et[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    Et[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    Et[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    Et[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    Et[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    Et[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    Et[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    Et[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    Et[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Et[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Et[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Et[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Et[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Et[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Et[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    Et[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Et[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Et[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Et[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    Et[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    Et[185] = ["Orbe du Dragon", "Donné en Quête"];
    Et[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    Et[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    Et[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    Et[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    Et[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    Et[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    Et[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    Et[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    Et[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    Et[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    Et[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    Et[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    Et[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    Et[29] = ["Sac", "Plus de place dans ton inventaire!"];
    Et[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    Et[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    Et[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    Et[148] = ["Cadenas", "Pour verrouiller un coffre"];
    Et[158] = ["Clé", "Pour déverrouiller un coffre"];
    Et[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    Et[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    Et[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    Et[190] = ["Toit", "Te cache un peu et te réchauffe"];
    Et[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    Et[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    Et[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    Et[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    Et[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    Et[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    Et[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    Et[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    Et[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    Et[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    Et[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    Et[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    Et[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    Et[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    Et[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    Et[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    Et[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    Et[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Et[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Et[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    Et[300] = "Tu ne peux pas rejoindre le serveur";
    Et[301] = "Expulsé: ";
    Et[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    Et[303] = "Ta clé est fausse";
    Et[304] = "Tu as une vieille version, rafraichis tes caches";
    Et[305] = "Il n'y a plus de nouvelles ressources";
    Et[306] = "Tu as survécu 1 jour";
    Et[307] = "Tu as survécu ";
    Et[308] = " jours";
    Et[309] = "Tu es mort ;-;";
    Et[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    Et[311] = "Le serveur est complet! Spam le bouton jouer";
    Et[312] = "Cette ressource est vide";
    Et[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    Et[314] = " est mort";
    Et[315] = "Ce n'est pas le bon outil";
    Et[316] = "Tu as rejoins une équipe";
    Et[317] = "Tu es mort";
    Et[318] = " a rejoint l'équipe";
    Et[319] = "Ton équipe a été détruite";
    Et[320] = "Tu as quitté l'équipe";
    Et[321] = " a quitté l'équipe";
    Et[322] = "Quelqu'un a volé ton token :>";
    Et[323] = "Choisis un serveur";
    Et[324] = "joueurs";
    Et[325] = "joueurs";
    Et[326] = "joueurs dans ce mode";
    Et[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    Gt[Rq] = ["Tu as été tué sans raison particulière, juste comme ça"];
    Gt[Xn] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    Gt[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    Gt[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    Gt[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    Gt[nr] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    Gt[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    Gt[Xs] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    Gt[8] = ["Cet ours voulait juste un câlin."];
    Gt[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    Gt[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    Gt[Jq] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    Gt[da] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    Gt[ug] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    Gt[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    Gt[$q] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    Gt[16] = ["Un kraken a 'kraké' tes os."];
    Gt[Eg] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    Gt[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    Gt[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    Gt[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    Gt[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  };
  var Et = [];
  for (var Ft = 0; Ft < 344; Ft++) {
    Et[Ft] = "";
  }
  var Gt = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  const Ht = lg;
  const It = rs;
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      ct();
    } else if (a === "Français") {
      Dt();
    } else if (a === "Deutsch") {
      zt();
    } else if (a === "Español") {
      qt();
    } else if (a === "Português") {
      kt();
    } else if (a === "Русский") {
      ft();
    } else if (a === "Polski") {
      Bt();
    }
    ⵠⲆᐃᐃΔ = [];
    Xw.ΔᐃⲆⵠ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  var Jt;
  Ia = "EN";
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      Ia = "RU";
      break;
    case "en":
      Ia = "EN";
      break;
    case "es":
      Ia = "SP";
      break;
    case "fr":
      Ia = "FR";
      break;
    case "pl":
      Ia = "PL";
      break;
    case "de":
      Ia = "DE";
      break;
    case "pt":
      Ia = "PT";
  }
  const Kt = ms;
  if (Ia === "FR") {
    $(".md-languages label button").text("Français");
    Jt = Dt;
  } else if (Ia === "PL") {
    $(".md-languages label button").text("Polski");
    Jt = Bt;
  } else if (Ia === "PT") {
    $(".md-languages label button").text("Português");
    Jt = kt;
  } else if (Ia === "SP") {
    $(".md-languages label button").text("Español");
    Jt = qt;
  } else if (Ia === "RU") {
    $(".md-languages label button").text("Русский");
    Jt = ft;
  } else if (Ia === "DE") {
    $(".md-languages label button").text("Deutsch");
    Jt = zt;
  } else {
    $(".md-languages label button").text("English");
    Jt = ct;
  }
  const Lt = jk;
  const Mt = F;
  function eb(b, c, d, e) {
    const f = b ^ 49890;
    const g = (24 << (c >> 24 & 255)) + (8 << (c >> js & 255)) + (0 << (c >> 16 & 255)) + (16 << (c & Br));
    const i = ((2373 + d) * 2147483629 + 2147483587) % 2147483647;
    const a = ~(e & 15908) & (e | 15908);
    const j = zk(f, g, i, a, f);
    const h = zk(g, i, a, f, g);
    return (0 << ((j ^ h) & 255)) + (24 << ((j ^ h) >> 16 & 255)) + (bt << ((j ^ h) >> 24 & 255)) + (8 << ((j ^ h) >> 8 & 255));
  }
  Ⲇⵠ = {
    ΔⲆⵠⲆⲆⲆΔⵠΔ: "img/logo.png",
    ⲆᐃᐃⲆⲆⲆⵠ: "img/mapday.png",
    ᐃΔᐃΔⵠΔΔ: "img/mapnight.png",
    ᐃⲆᐃⲆᐃΔᐃᐃΔ: "img/bigzday.png",
    ᐃⲆⲆⵠⲆᐃᐃᐃⲆ: "img/bigznight.png",
    ⲆⲆⵠᐃⲆΔⲆ: "img/bigday-river1.png",
    ΔᐃⲆⵠⵠΔⵠΔⵠ: "img/bigday-lake.png",
    ⲆΔΔⲆΔᐃᐃ: "img/bigday-berry.png",
    ΔⲆᐃΔᐃᐃᐃ: "img/bigday-stone1.png",
    ⵠⵠⲆⲆΔᐃⵠ: "img/bigday-stone2.png",
    ⲆΔⵠⵠⵠⵠΔ: "img/bigday-gold1.png",
    ᐃⵠΔΔⵠⵠⲆ: "img/bigday-gold2.png",
    ΔⲆΔᐃᐃᐃᐃ: "img/bigday-emerald1.png",
    ΔΔⵠΔᐃᐃᐃ: "img/bigday-emerald2.png",
    ΔⲆΔΔⵠⵠⲆ: "img/bigday-amethyst.png",
    ΔⵠⲆⵠᐃⵠⵠ: "img/bigday-bear.png",
    ⲆᐃᐃⵠΔⲆᐃ: "img/bigday-cave.png",
    ᐃΔⵠᐃⲆᐃⵠ: "img/bigday-diamond.png",
    ΔΔΔⲆᐃΔΔ: "img/bigday-island.png",
    ᐃⵠᐃᐃΔⵠᐃ: "img/bigday-reidite.png",
    ⵠΔⲆⵠᐃΔⲆ: "img/bigday-spider.png",
    ⲆᐃⲆᐃᐃᐃⵠ: "img/bigday-wolf.png",
    ΔᐃⵠᐃΔᐃᐃ: "img/bigday-fir-tree.png",
    ᐃⵠⲆΔᐃⲆⵠ: "img/bigday-fox.png",
    ⵠⲆⲆⲆⲆⵠⲆ: "img/bigday-kraken.png",
    ΔΔΔⲆⲆⲆᐃ: "img/bigday-piranha.png",
    ΔᐃⵠΔⲆⵠᐃ: "img/bigday-cactus.png",
    ΔᐃⵠΔⲆΔᐃ: "img/bigday-magma.png",
    ⲆᐃⲆⲆΔᐃⲆ: "img/bigday-river1.png",
    ⲆᐃⲆΔⵠⲆⵠᐃⲆ: "img/bignight-lake.png",
    ᐃⵠⵠᐃⲆᐃΔᐃΔ: "img/bignight-berry.png",
    ⵠⵠⲆⲆᐃⵠⲆ: "img/bignight-stone1.png",
    ⲆᐃⵠΔᐃⲆⵠ: "img/bignight-stone2.png",
    ΔΔᐃΔⵠⵠᐃ: "img/bignight-gold1.png",
    ΔΔᐃⲆⲆⲆᐃ: "img/bignight-gold2.png",
    ΔΔᐃⵠᐃⵠΔ: "img/bignight-emerald1.png",
    ᐃᐃΔⵠⲆⲆⵠ: "img/bignight-emerald2.png",
    ⵠᐃⵠΔⵠⲆΔ: "img/bignight-amethyst.png",
    ⲆΔΔⲆΔᐃⵠ: "img/bignight-bear.png",
    ΔⲆᐃⲆⵠⲆⲆ: "img/bignight-cave.png",
    ⵠᐃᐃᐃⲆⲆᐃ: "img/bignight-diamond.png",
    ᐃⲆⵠΔᐃᐃⵠ: "img/bignight-island.png",
    ⵠΔⲆΔⲆᐃΔ: "img/bignight-reidite.png",
    ᐃⵠᐃΔᐃΔᐃ: "img/bignight-spider.png",
    ⵠⲆⵠⵠΔᐃⵠ: "img/bignight-wolf.png",
    ⵠΔΔⵠⲆᐃᐃ: "img/bignight-fir-tree.png",
    ⲆⵠΔᐃΔⲆᐃ: "img/bignight-fox.png",
    ⵠⲆΔΔⲆⵠⲆ: "img/bignight-kraken.png",
    ⵠⲆⵠⲆⲆⵠΔ: "img/bignight-piranha.png",
    ΔᐃⵠⲆⲆᐃⵠ: "img/bignight-cactus.png",
    ΔΔΔⵠΔⵠⲆ: "img/bignight-magma.png",
    ⲆⵠᐃΔⵠⵠⵠ: "img/bigday-desert.png",
    ⵠΔΔᐃΔᐃⵠ: "img/bigday-winter.png",
    ᐃᐃᐃΔᐃΔΔ: "img/bigday-lava.png",
    ⵠⲆⲆⵠᐃⲆΔ: "img/bigday-forest.png",
    ᐃⲆⵠΔⵠᐃᐃ: "img/bignight-desert.png",
    ΔΔⲆᐃᐃΔⵠ: "img/bignight-winter.png",
    ⲆⲆⲆΔⲆⲆᐃ: "img/bignight-lava.png",
    ⲆΔⲆΔⲆⲆⲆ: "img/bignight-forest.png",
    ⲆΔΔΔΔⵠΔ: "img/day-river-wave.png",
    ⵠⲆΔⲆⵠΔⵠ: "img/night-river-wave.png",
    ΔᐃⵠΔⲆᐃⲆ: "img/day-fog0.png",
    ⵠⲆΔᐃΔⵠⲆ: "img/day-fog1.png",
    ΔⲆΔΔⲆⵠⲆ: "img/day-fog2.png",
    ᐃⵠⲆⲆⲆⵠⵠ: "img/night-fog0.png",
    ⵠᐃᐃⵠⵠᐃᐃ: "img/night-fog1.png",
    Ⲇⵠᐃᐃⵠᐃᐃ: "img/night-fog2.png",
    ᐃΔΔⵠᐃΔⲆ: "img/day-fogdesert0.png",
    ᐃΔⲆⵠΔᐃⵠ: "img/day-fogdesert1.png",
    ᐃⲆⲆⵠΔᐃᐃ: "img/day-fogdesert2.png",
    ⲆᐃΔⵠⵠⲆΔ: "img/night-fogdesert0.png",
    ᐃⲆⵠⵠΔⲆΔ: "img/night-fogdesert1.png",
    ⵠⵠⵠᐃⵠΔⵠ: "img/night-fogdesert2.png",
    ⲆᐃⲆᐃᐃⲆⲆ: "img/day-cross-server.png",
    ⲆᐃⲆᐃⵠΔⵠ: "img/day-here-server.png",
    ⲆᐃⲆⲆⵠᐃΔ: "img/day-finish-server.png",
    ⵠᐃΔΔᐃΔⵠ: "img/day-item-server.png",
    ⲆᐃᐃᐃⲆΔⵠ: "img/day-skull-server.png",
    ᐃᐃᐃⵠⲆΔⵠ: "img/night-cross-server.png",
    ᐃᐃΔΔΔⵠⵠ: "img/night-here-server.png",
    ⲆⵠⲆⵠᐃᐃᐃ: "img/night-finish-server.png",
    ⲆΔⵠΔᐃᐃΔ: "img/night-item-server.png",
    ⲆⲆᐃⵠⲆⲆᐃ: "img/night-skull-server.png",
    ⵠᐃⵠΔΔⲆⵠ: "img/day-reidite0.png",
    ⵠᐃⲆⵠΔⲆⵠ: "img/night-reidite0.png",
    ᐃᐃᐃΔⵠΔⵠ: "img/day-reidite1.png",
    ΔᐃⲆⵠⵠⲆΔ: "img/night-reidite1.png",
    ᐃΔΔΔᐃⲆⵠ: "img/day-reidite2.png",
    ⲆⲆⲆᐃⲆⲆΔ: "img/night-reidite2.png",
    ᐃᐃⲆᐃΔⲆⵠ: "img/day-lava1.png",
    ΔⵠᐃⵠⲆᐃⵠ: "img/night-lava1.png",
    ᐃΔΔᐃⵠⲆⲆ: "img/day-lava2.png",
    ᐃⲆⵠⵠΔⲆⵠ: "img/night-lava2.png",
    ⵠⵠᐃⵠⵠΔⵠ: "img/day-lava3.png",
    Ⲇⵠᐃᐃᐃⵠᐃ: "img/night-lava3.png",
    ΔΔⲆⲆᐃⵠᐃ: "img/day-lava4.png",
    ⲆᐃⲆⲆⵠⵠΔ: "img/night-lava4.png",
    ⲆⵠⲆᐃⵠᐃΔ: "img/day-lava5.png",
    ⲆΔᐃᐃᐃΔⵠ: "img/night-lava5.png",
    ⲆᐃⵠᐃⵠⲆΔ: "img/day-lava6.png",
    ᐃⵠᐃᐃⵠⵠⲆ: "img/night-lava6.png",
    ⵠⵠᐃᐃⲆⲆΔ: "img/day-lava-ground1.png",
    ΔᐃⵠΔᐃⵠⵠ: "img/night-lava-ground1.png",
    ᐃⵠᐃⵠΔⲆⲆ: "img/day-lava-ground2.png",
    ΔⲆΔᐃⲆⲆΔ: "img/night-lava-ground2.png",
    ⵠᐃⲆⲆᐃᐃⵠ: "img/day-lava-ground3.png",
    ᐃᐃⵠⵠⲆⲆΔ: "img/night-lava-ground3.png",
    ᐃΔΔⲆΔⵠⵠ: "img/day-lava-ground4.png",
    ᐃⵠⲆᐃᐃⵠⵠ: "img/night-lava-ground4.png",
    ⵠΔⵠΔⲆᐃᐃ: "img/day-lava-ground5.png",
    ΔⵠᐃⵠᐃⲆᐃ: "img/night-lava-ground5.png",
    ΔᐃΔΔⵠⲆⵠ: "img/day-lava-ground6.png",
    ⲆᐃΔᐃᐃΔⲆ: "img/night-lava-ground6.png",
    ᐃⲆΔΔᐃⲆⲆ: "img/day-fire-mob.png",
    ᐃⲆⵠᐃⲆⵠⵠ: "img/night-fire-mob.png",
    ΔⵠⲆⵠⲆᐃⵠ: "img/hurt-fire-mob.png",
    ⲆⲆΔᐃΔΔᐃ: "img/day-diamond-protection.png",
    ⵠᐃᐃⵠᐃᐃⲆ: "img/night-diamond-protection.png",
    ⲆⲆᐃᐃⵠⵠΔ: "img/day-hand-diamond-protection.png",
    ⲆⵠⲆⲆᐃᐃⲆ: "img/night-hand-diamond-protection.png",
    ⵠⵠⵠᐃⲆⲆΔ: "img/inv-diamond-protection-out.png",
    ⲆⲆᐃΔᐃⲆⲆ: "img/inv-diamond-protection-in.png",
    ⵠΔᐃⵠⲆⵠⵠ: "img/inv-diamond-protection-click.png",
    ᐃΔΔⵠⲆᐃΔ: "img/day-amethyst-protection.png",
    ΔⵠΔⲆⵠΔᐃ: "img/night-amethyst-protection.png",
    ΔⵠᐃᐃⲆᐃⲆΔΔ: "img/day-hand-amethyst-protection.png",
    ⲆⵠⲆᐃⵠⲆΔⵠⲆ: "img/night-hand-amethyst-protection.png",
    ᐃᐃᐃⵠⵠⲆⵠ: "img/inv-amethyst-protection-out.png",
    ⲆᐃⵠⲆⵠΔⵠ: "img/inv-amethyst-protection-in.png",
    ⲆᐃⲆΔⲆΔⲆ: "img/inv-amethyst-protection-click.png",
    ΔᐃⲆᐃΔⲆΔ: "img/day-reidite-sword.png",
    ⲆⵠᐃⲆⲆⲆᐃ: "img/night-reidite-sword.png",
    ⵠΔⵠⲆⵠᐃΔ: "img/inv-reidite-sword-out.png",
    ⲆΔⵠⲆⵠⲆΔ: "img/inv-reidite-sword-in.png",
    ⲆⵠΔᐃⲆⲆⲆ: "img/inv-reidite-sword-click.png",
    ᐃΔᐃᐃⲆᐃᐃ: "img/inv-reidite-out.png",
    ⵠⵠⲆᐃᐃᐃᐃ: "img/inv-reidite-in.png",
    ᐃᐃΔⵠⵠⲆΔ: "img/inv-reidite-click.png",
    ⵠⲆᐃΔⵠⲆⲆ: "img/inv-flame-out.png",
    ᐃΔⵠⵠⲆⵠⲆ: "img/inv-flame-in.png",
    ᐃᐃᐃⲆⵠᐃΔ: "img/inv-flame-click.png",
    ΔⵠⵠΔⲆΔⵠ: "img/day-magma-buble0.png",
    ⵠΔⲆΔᐃⲆΔ: "img/night-magma-buble0.png",
    ⵠᐃᐃΔⲆⲆᐃ: "img/day-magma-buble1.png",
    ⲆⲆΔⲆᐃΔⵠ: "img/night-magma-buble1.png",
    ΔⵠΔⲆΔᐃⲆ: "img/day-magma-buble2.png",
    ᐃᐃⵠΔΔⲆⲆ: "img/night-magma-buble2.png",
    ᐃⵠᐃⲆⲆⲆᐃ: "img/day-lava-dragon.png",
    ᐃΔᐃⲆⲆᐃΔ: "img/night-lava-dragon.png",
    ⲆⵠᐃΔΔΔᐃⵠⲆ: "img/day-fire-dragon.png",
    ᐃⵠⲆⵠΔΔⵠⲆⲆ: "img/night-fire-dragon.png",
    ᐃᐃⵠᐃⲆΔΔ: "img/hurt-lava-dragon.png",
    ⲆⲆᐃⵠΔⵠΔ: "img/day-lava-wing-left.png",
    ⵠΔⲆⲆⲆᐃⵠ: "img/night-lava-wing-left.png",
    ᐃΔᐃⵠΔΔΔ: "img/day-lava-wing-right.png",
    ⵠΔⲆᐃᐃⵠᐃ: "img/night-lava-wing-right.png",
    ⵠΔⲆⲆⵠΔΔ: "img/hurt-lava-wing-left.png",
    ⵠᐃᐃⲆΔᐃΔ: "img/hurt-lava-wing-right.png",
    ⵠᐃᐃᐃᐃⲆⵠ: "img/day-reidite-spear.png",
    ᐃⵠᐃⲆⲆⲆⵠ: "img/night-reidite-spear.png",
    ᐃⲆᐃⵠᐃⵠⵠ: "img/inv-reidite-spear-out.png",
    ΔΔⲆⲆⲆΔΔ: "img/inv-reidite-spear-in.png",
    ᐃᐃⵠΔⵠⵠΔ: "img/inv-reidite-spear-click.png",
    ᐃᐃⵠⲆᐃⲆᐃ: "img/day-reidite-helmet.png",
    ᐃⵠⲆᐃᐃΔᐃ: "img/night-reidite-helmet.png",
    ⵠΔⵠⲆⲆⵠⲆ: "img/inv-reidite-helmet-out.png",
    ⲆⵠᐃⵠΔⵠᐃ: "img/inv-reidite-helmet-in.png",
    ᐃᐃΔΔⲆΔᐃ: "img/inv-reidite-helmet-click.png",
    ΔⵠⵠᐃᐃⵠΔ: "img/day-hand-reidite-protection.png",
    ᐃⲆΔⲆᐃᐃⵠ: "img/night-hand-reidite-protection.png",
    ᐃⵠⲆⵠΔΔⵠ: "img/day-reidite-protection.png",
    ⲆᐃⲆⲆⲆⲆⲆ: "img/night-reidite-protection.png",
    ΔⲆⵠⵠΔⲆΔ: "img/inv-reidite-protection-out.png",
    ⵠΔⵠⵠⲆᐃⵠ: "img/inv-reidite-protection-in.png",
    ⲆⵠⵠⵠΔΔΔ: "img/inv-reidite-protection-click.png",
    ΔΔⵠⲆⵠΔⵠ: "img/day-lava-dragon-sword.png",
    ΔⵠΔΔⲆᐃΔ: "img/night-lava-dragon-sword.png",
    ⲆᐃᐃᐃΔᐃⵠ: "img/inv-lava-dragon-sword-out.png",
    ΔᐃⲆⲆⵠⵠᐃ: "img/inv-lava-dragon-sword-in.png",
    ΔⲆⲆᐃΔⵠⵠ: "img/inv-lava-dragon-sword-click.png",
    ᐃⲆⵠᐃᐃΔⵠ: "img/day-lava-spear.png",
    ΔΔᐃΔⵠⲆⵠ: "img/night-lava-spear.png",
    ⲆⵠΔⵠⲆⲆⲆ: "img/inv-lava-spear-out.png",
    ⲆⲆⲆⵠⲆⲆⲆ: "img/inv-lava-spear-in.png",
    ΔⲆⵠΔⵠⲆⵠ: "img/inv-lava-spear-click.png",
    ΔⲆⲆᐃᐃᐃΔ: "img/day-lava-helmet.png",
    ⵠⲆᐃᐃⵠⲆΔ: "img/night-lava-helmet.png",
    ⲆΔⵠᐃᐃⲆᐃ: "img/inv-lava-helmet-out.png",
    ⵠΔᐃⵠΔⵠⵠ: "img/inv-lava-helmet-in.png",
    ᐃᐃⵠᐃⲆⲆⲆ: "img/inv-lava-helmet-click.png",
    ΔᐃⵠΔⲆⲆⲆ: "img/day-witch-hat.png",
    ᐃⲆΔΔⲆΔⵠ: "img/night-witch-hat.png",
    ΔⵠᐃⲆⵠᐃᐃ: "img/inv-witch-hat-out.png",
    ⲆⵠΔΔⵠΔΔ: "img/inv-witch-hat-in.png",
    ⵠᐃⲆⲆⲆⲆⲆ: "img/inv-witch-hat-click.png",
    ᐃⵠⵠᐃᐃⵠⵠ: "img/day-nimbus2000.png",
    ΔⲆⵠⲆⲆⲆᐃ: "img/night-nimbus2000.png",
    ΔᐃⵠⵠⵠⵠΔ: "img/inv-nimbus2000-out.png",
    ⲆᐃΔᐃⵠᐃΔ: "img/inv-nimbus2000-in.png",
    ΔΔᐃΔΔⲆⵠ: "img/inv-nimbus2000-click.png",
    ⲆⵠΔᐃᐃⲆᐃ: "img/day-accessory1-pacques.png",
    ᐃⵠᐃⲆΔⲆΔ: "img/night-accessory1-pacques.png",
    ⲆⵠᐃᐃⵠⲆⲆ: "img/day-accessory2-pacques.png",
    ΔᐃᐃⵠⵠⲆᐃ: "img/night-accessory2-pacques.png",
    ⲆⲆᐃⵠΔⲆΔ: "img/day-accessory3-pacques.png",
    ⵠⵠᐃᐃⲆᐃⲆ: "img/night-accessory3-pacques.png",
    ᐃⵠⵠⲆΔΔⵠ: "img/day-accessory5-pacques.png",
    ⲆΔⵠΔⲆⲆᐃ: "img/night-accessory5-pacques.png",
    ΔⵠⵠⲆⲆⲆⵠ: "img/day-accessory6-pacques.png",
    ᐃⵠᐃⵠⵠⵠᐃ: "img/night-accessory6-pacques.png",
    ΔΔⲆⲆᐃⵠⵠ: "img/day-accessory7-pacques.png",
    ⵠⲆΔᐃⵠᐃⵠ: "img/night-accessory7-pacques.png",
    ΔⲆᐃⵠΔΔⲆ: "img/day-accessory8-pacques.png",
    ⲆⲆⲆΔᐃⵠᐃ: "img/night-accessory8-pacques.png",
    ᐃᐃⲆⵠᐃΔᐃ: "img/day-bag-pacques.png",
    ⵠⵠⵠⵠⲆᐃΔ: "img/night-bag-pacques.png",
    ⵠᐃⲆⵠᐃᐃⵠ: "img/day-carrot.png",
    Ⲇⵠᐃᐃⵠⵠⵠ: "img/night-carrot.png",
    ⲆⲆⵠΔᐃⵠᐃ: "img/day-carrot-dried.png",
    ᐃⲆᐃᐃⲆᐃᐃ: "img/night-carrot-dried.png",
    ⵠᐃΔⲆⵠⵠⵠ: "img/day-tomato-herb.png",
    ᐃΔⵠⵠⲆⲆⲆ: "img/night-tomato-herb.png",
    ⵠΔᐃⲆᐃᐃⵠ: "img/day-tomato-herb-dried.png",
    ⲆⵠⲆΔⵠᐃΔ: "img/night-tomato-herb-dried.png",
    ⲆⲆⲆΔⵠⲆⵠ: "img/day-tomato.png",
    ΔᐃⲆⵠⲆⵠⵠ: "img/night-tomato.png",
    ⲆᐃⵠⲆΔΔΔ: "img/inv-carrot-out.png",
    ⲆΔᐃⲆⵠΔⲆ: "img/inv-carrot-in.png",
    ᐃᐃⵠΔᐃⲆΔ: "img/inv-carrot-click.png",
    ΔΔⵠⵠΔᐃⲆ: "img/inv-tomato-out.png",
    ᐃΔᐃΔⵠⲆΔ: "img/inv-tomato-in.png",
    ΔⵠⵠⲆⲆᐃΔ: "img/inv-tomato-click.png",
    ᐃⵠⲆⲆⵠⵠⲆ: "img/day-player0.png",
    ⵠΔᐃᐃⲆⵠⲆ: "img/night-player0.png",
    ΔⲆⲆⲆⵠΔΔ: "img/day-player1.png",
    ⵠᐃⲆᐃΔᐃⲆ: "img/night-player1.png",
    ᐃⲆΔⲆᐃⲆΔ: "img/day-player2.png",
    ᐃᐃΔᐃΔᐃΔ: "img/night-player22.png",
    ⲆᐃⲆΔΔΔⵠ: "img/day-player3.png",
    ⵠⵠΔⵠⲆⲆⲆ: "img/night-player33.png",
    ⲆᐃᐃᐃΔΔᐃ: "img/day-player4.png",
    ᐃΔⲆⲆⲆⲆΔ: "img/night-player4.png",
    ⲆΔΔⵠⲆⲆⵠ: "img/day-player5.png",
    ΔⵠⵠᐃⲆΔᐃ: "img/night-player5.png",
    ΔⲆⵠΔΔᐃⵠ: "img/day-player6.png",
    ⲆⵠΔⵠⲆΔⲆ: "img/night-player6.png",
    ⲆⵠᐃΔⲆⵠⲆ: "img/day-player7.png",
    ᐃⲆⲆⲆⵠⵠⲆ: "img/night-player7.png",
    ᐃΔⵠΔᐃᐃⲆ: "img/day-player8.png",
    ᐃΔᐃⲆΔⲆⵠ: "img/night-player8.png",
    ⵠⲆᐃΔⲆⲆⵠ: "img/day-player9.png",
    ΔΔⵠⵠΔⵠⵠ: "img/night-player9.png",
    ᐃⵠΔⲆᐃᐃⲆ: "img/day-player10.png",
    ᐃⲆⲆΔΔᐃⵠ: "img/night-player10.png",
    ⵠⲆⵠΔᐃᐃⵠ: "img/day-player11.png",
    ⵠⵠΔΔⲆⲆⲆ: "img/night-player11.png",
    ⵠΔΔΔⵠⲆᐃ: "img/day-player12.png",
    ⲆΔΔᐃⵠᐃΔ: "img/night-player12.png",
    ΔⲆⵠΔᐃⵠⲆ: "img/day-player13.png",
    ΔⲆⲆⵠⲆᐃⲆ: "img/night-player13.png",
    ΔⵠΔⲆⵠⵠⲆ: "img/day-player14.png",
    ᐃΔⲆᐃⵠⵠⵠ: "img/night-player14.png",
    ⲆΔᐃᐃΔⲆⲆ: "img/day-player15.png",
    ⵠᐃᐃⵠΔᐃⲆ: "img/night-player15.png",
    ⵠᐃⵠⵠⵠⲆⵠ: "img/day-player16.png",
    ⲆΔⲆΔⲆᐃⲆ: "img/night-player16.png",
    ΔⵠΔᐃΔⵠΔ: "img/day-player17.png",
    ⵠⵠΔⲆΔⵠⲆ: "img/night-player17.png",
    ᐃⵠΔⲆⲆⲆᐃ: "img/day-player18.png",
    ⵠⲆⵠᐃΔΔⵠ: "img/night-player18.png",
    ΔⲆᐃΔⵠⲆΔ: "img/day-player19.png",
    ᐃⵠΔᐃᐃΔΔ: "img/night-player19.png",
    ⲆΔᐃΔᐃⵠΔ: "img/day-hand-player0.png",
    ⵠΔᐃΔⵠⵠⲆ: "img/night-hand-player0.png",
    ᐃᐃΔⲆᐃⵠⲆ: "img/day-hand-player1.png",
    ⲆⲆΔⲆᐃⵠΔ: "img/night-hand-player1.png",
    ⲆⲆΔᐃᐃⲆΔ: "img/day-hand-player2.png",
    ΔⵠᐃⲆΔΔᐃ: "img/night-hand-player22.png",
    ⵠⵠΔⲆⵠᐃⲆ: "img/day-hand-player3.png",
    ⲆⲆΔⵠⵠᐃⲆ: "img/night-hand-player33.png",
    ⵠΔΔⲆⵠΔΔ: "img/day-hand-player4.png",
    ΔΔΔⲆΔΔᐃ: "img/night-hand-player4.png",
    ⵠⵠᐃᐃᐃΔΔ: "img/day-hand-player5.png",
    ⲆΔⵠΔΔⲆⵠ: "img/night-hand-player5.png",
    ⲆⵠΔⵠⵠⲆⲆ: "img/day-hand-player6.png",
    ⲆΔΔᐃᐃΔΔ: "img/night-hand-player6.png",
    ᐃⵠᐃᐃⲆⲆⵠ: "img/day-hand-player7.png",
    ⲆᐃⵠⲆⲆΔΔ: "img/night-hand-player7.png",
    ΔᐃΔᐃᐃⵠⵠ: "img/day-hand-player8.png",
    ΔΔⵠᐃΔᐃΔ: "img/night-hand-player8.png",
    ⲆᐃⲆᐃᐃΔᐃ: "img/day-hand-player9.png",
    ⲆΔⲆⲆᐃΔᐃ: "img/night-hand-player9.png",
    ⵠⲆᐃⲆΔⵠΔ: "img/day-hand-player10.png",
    ⵠⵠᐃᐃΔⲆⵠ: "img/night-hand-player10.png",
    ᐃⲆⲆⲆⵠΔⵠ: "img/day-hand-player11.png",
    ΔⵠᐃⲆᐃⵠΔ: "img/night-hand-player11.png",
    ΔΔⵠᐃΔⵠΔ: "img/day-hand-player12.png",
    ⵠⲆΔⲆⵠⵠᐃ: "img/night-hand-player12.png",
    ⲆΔⵠⲆⲆΔⵠ: "img/day-hand-player13.png",
    ᐃⵠⲆΔⲆⵠⲆ: "img/night-hand-player13.png",
    ᐃᐃΔᐃⵠⵠⵠ: "img/day-hand-player14.png",
    ΔΔⵠΔᐃⲆΔ: "img/night-hand-player14.png",
    ⵠⵠᐃⵠⵠᐃⵠ: "img/day-hand-player15.png",
    ᐃⲆⲆⲆⵠᐃΔ: "img/night-hand-player15.png",
    ⲆΔΔᐃⵠΔⲆ: "img/day-hand-player16.png",
    ⵠΔⲆⲆⵠᐃᐃ: "img/night-hand-player16.png",
    ⲆᐃⲆⵠΔⲆⵠ: "img/day-hand-player17.png",
    ⵠⲆΔⵠᐃⲆᐃ: "img/night-hand-player17.png",
    ⵠᐃᐃⵠⲆⲆⲆ: "img/day-hand-player18.png",
    ⵠⲆⲆⲆΔΔΔ: "img/night-hand-player18.png",
    ⲆᐃⵠⲆᐃᐃᐃ: "img/day-hand-player19.png",
    ΔⵠᐃⲆⲆⲆⲆ: "img/night-hand-player19.png",
    ΔΔΔᐃⵠΔᐃ: "img/day-accessory4.png",
    ΔⲆⲆΔΔΔⲆ: "img/night-accessory4.png",
    ⵠᐃΔⲆᐃⲆΔ: "img/day-accessory9.png",
    ⲆᐃΔᐃⲆⵠⲆ: "img/night-accessory9.png",
    ᐃⵠᐃⲆᐃⲆᐃ: "img/day-accessory10.png",
    ⲆΔⵠⵠⲆΔⵠ: "img/night-accessory10.png",
    ⲆⵠᐃⲆᐃΔⲆ: "img/day-accessory11.png",
    ⵠΔⲆΔᐃᐃΔ: "img/night-accessory11.png",
    ⲆⲆᐃΔⵠᐃΔ: "img/day-accessory12.png",
    ΔⵠᐃⲆⵠⲆΔ: "img/night-accessory12.png",
    ⵠΔΔⲆⵠⲆⲆ: "img/day-bag.png",
    ᐃⵠᐃⵠᐃⲆᐃ: "img/night-bag.png",
    ΔⵠᐃᐃΔⲆᐃ: "img/inv-bag-out.png",
    ⵠⵠⲆΔⲆⵠⲆ: "img/inv-bag-in.png",
    ⲆᐃⵠⵠⲆᐃΔ: "img/inv-bag-click.png",
    ᐃⲆⵠΔⲆⵠⵠ: "img/day-pitchfork.png",
    ΔΔᐃΔᐃⵠⲆ: "img/night-pitchfork.png",
    ΔᐃⵠᐃⲆΔⵠ: "img/inv-pitchfork-out.png",
    Ⲇⵠⵠᐃᐃᐃⵠ: "img/inv-pitchfork-in.png",
    ⲆᐃΔΔⵠΔΔ: "img/inv-pitchfork-click.png",
    ⵠⲆⵠⵠΔⲆⵠ: "img/inv-wood-spike-door-out.png",
    ΔⲆⲆᐃⵠᐃⲆ: "img/inv-wood-spike-door-in.png",
    ᐃⲆᐃⲆΔᐃΔ: "img/inv-wood-spike-door-click.png",
    ΔΔⵠΔΔⵠⵠ: "img/inv-stone-spike-door-out.png",
    ΔⵠⵠΔⵠⵠᐃ: "img/inv-stone-spike-door-in.png",
    ⵠΔᐃΔᐃΔⲆ: "img/inv-stone-spike-door-click.png",
    ⲆⲆᐃᐃⵠⵠⲆ: "img/inv-gold-spike-door-out.png",
    ⵠΔᐃᐃΔᐃⲆ: "img/inv-gold-spike-door-in.png",
    ΔⵠΔᐃΔⲆⵠ: "img/inv-gold-spike-door-click.png",
    ⵠⲆⵠΔⵠⲆⵠ: "img/inv-diamond-spike-door-out.png",
    ΔⲆᐃᐃⲆⵠⲆ: "img/inv-diamond-spike-door-in.png",
    ⵠⲆᐃⲆⵠᐃΔ: "img/inv-diamond-spike-door-click.png",
    ᐃⵠⲆᐃⲆⲆⵠ: "img/inv-amethyst-spike-door-out.png",
    ᐃⵠΔΔⵠᐃⵠ: "img/inv-amethyst-spike-door-in.png",
    ⲆⲆᐃⵠⵠⵠᐃ: "img/inv-amethyst-spike-door-click.png",
    ᐃᐃⲆΔⲆᐃΔ: "img/day-wood-spike-door.png",
    ᐃᐃⲆⵠΔΔᐃ: "img/night-wood-spike-door.png",
    ⲆᐃⲆᐃᐃⲆⵠ: "img/day-stone-spike-door.png",
    ⵠΔⵠⵠᐃᐃⲆ: "img/night-stone-spike-door.png",
    ᐃⵠⵠᐃⵠⵠⲆ: "img/day-gold-spike-door.png",
    ⲆΔⲆⲆⵠⵠⵠ: "img/night-gold-spike-door.png",
    ᐃⲆⲆΔᐃᐃᐃ: "img/day-diamond-spike-door.png",
    ᐃᐃⵠⵠⵠⵠⵠ: "img/night-diamond-spike-door.png",
    ΔΔⲆⵠⵠⵠᐃ: "img/day-amethyst-spike-door.png",
    ᐃᐃⵠΔⲆⵠⵠ: "img/night-amethyst-spike-door.png",
    ΔⲆΔⲆᐃⲆⵠ: "img/inv-reidite-spike-door-out.png",
    ⲆⲆⵠΔⵠⵠⵠ: "img/inv-reidite-spike-door-in.png",
    ⲆⵠⲆᐃᐃⵠⵠ: "img/inv-reidite-spike-door-click.png",
    ⵠⵠⵠΔΔⵠᐃ: "img/inv-reidite-door-out.png",
    ᐃΔⵠⲆΔΔⲆ: "img/inv-reidite-door-in.png",
    ⵠΔΔⲆΔΔΔ: "img/inv-reidite-door-click.png",
    ⲆⵠᐃⲆᐃⵠⵠ: "img/inv-reidite-spike-out.png",
    ⵠΔⲆᐃⵠⵠⲆ: "img/inv-reidite-spike-in.png",
    ⵠᐃΔⲆΔⲆᐃ: "img/inv-reidite-spike-click.png",
    ⵠΔⲆⵠᐃⲆᐃ: "img/inv-reidite-wall-out.png",
    ᐃᐃΔⵠⵠⵠΔ: "img/inv-reidite-wall-in.png",
    ΔΔⵠΔΔⲆΔ: "img/inv-reidite-wall-click.png",
    ᐃⵠⵠⲆⲆΔΔ: "img/day-reidite-wall.png",
    ᐃᐃⲆⵠΔⵠⵠ: "img/night-reidite-wall.png",
    ΔⵠⲆΔᐃⵠⵠ: "img/day-reidite-door.png",
    ⲆⵠᐃᐃⵠⲆᐃ: "img/night-reidite-door.png",
    ᐃⵠΔⲆⲆⵠᐃ: "img/day-reidite-spike.png",
    ⲆΔⲆΔⵠⲆⲆ: "img/night-reidite-spike.png",
    ᐃᐃⲆⵠᐃⵠᐃ: "img/day-reidite-spike-door.png",
    ΔⵠΔΔⵠⲆⵠ: "img/night-reidite-spike-door.png",
    ⵠⲆⲆΔᐃⵠⲆ: "img/inv-reidite-pickaxe-out.png",
    ⲆΔⵠᐃᐃᐃⲆ: "img/inv-reidite-pickaxe-in.png",
    ΔⲆⵠΔⲆᐃⵠ: "img/inv-reidite-pickaxe-click.png",
    ΔⲆΔΔⲆⲆᐃ: "img/day-reidite-pickaxe.png",
    ᐃⲆΔΔⲆᐃⵠ: "img/night-reidite-pickaxe.png",
    ΔⲆⵠⲆΔᐃΔ: "img/inv-reidite-hammer-out.png",
    ⵠⲆᐃΔᐃᐃΔ: "img/inv-reidite-hammer-in.png",
    ᐃⲆⵠⵠⲆⲆΔ: "img/inv-reidite-hammer-click.png",
    ⲆΔⵠⵠᐃᐃΔ: "img/day-reidite-hammer.png",
    ⵠⲆΔⵠᐃⲆⵠ: "img/night-reidite-hammer.png",
    ⲆⲆΔⲆΔΔᐃ: "img/day-watermelon1.png",
    ⲆᐃⵠⲆⵠⲆᐃ: "img/night-watermelon1.png",
    ⲆᐃᐃⵠⲆΔᐃ: "img/day-watermelon-dried1.png",
    ⵠᐃΔᐃⵠⲆᐃ: "img/night-watermelon-dried1.png",
    ⲆΔᐃᐃᐃⵠΔ: "img/inv-watermelon-out.png",
    ᐃⵠΔΔΔⵠⵠ: "img/inv-watermelon-in.png",
    ⲆᐃⲆᐃⵠⵠᐃ: "img/inv-watermelon-click.png",
    ⲆⲆⵠⵠⵠⵠⲆ: "img/day-boat.png",
    ⲆⲆⵠᐃᐃΔᐃ: "img/night-boat.png",
    ⵠᐃⲆⲆⵠⵠⲆ: "img/day-boat-wave.png",
    ΔⵠⵠⲆⵠᐃᐃ: "img/night-boat-wave.png",
    ᐃⲆΔⵠᐃᐃⵠ: "img/inv-boat-out.png",
    ᐃΔΔᐃᐃΔᐃ: "img/inv-boat-in.png",
    ⵠΔᐃΔⲆᐃΔ: "img/inv-boat-click.png",
    ⵠⵠᐃᐃᐃΔᐃ: "img/day-plane.png",
    ⲆΔⵠΔΔᐃⲆ: "img/night-plane.png",
    ⲆⲆᐃⲆⲆⵠᐃ: "img/inv-plane-out.png",
    ΔⲆᐃΔΔΔⲆ: "img/inv-plane-in.png",
    ΔⵠᐃⲆΔⲆⲆ: "img/inv-plane-click.png",
    ⵠⵠᐃᐃⲆΔΔ: "img/day-sled.png",
    ΔᐃⵠᐃⵠⵠΔ: "img/night-sled.png",
    ΔⲆⲆᐃⲆΔΔ: "img/day-sled-wave.png",
    ⲆᐃΔⵠΔⵠⵠ: "img/night-sled-wave.png",
    ΔᐃⵠΔΔⲆΔ: "img/inv-sled-out.png",
    ᐃⲆᐃᐃᐃⲆⵠ: "img/inv-sled-in.png",
    ⲆⵠᐃⲆΔⵠⵠ: "img/inv-sled-click.png",
    ᐃΔᐃᐃΔΔⵠ: "img/day-pirate-hat.png",
    ⲆⵠⲆⵠⲆΔᐃ: "img/night-pirate-hat.png",
    ⲆⲆⲆᐃΔⵠΔ: "img/inv-pirate-hat-out.png",
    ΔΔΔⵠᐃΔⲆ: "img/inv-pirate-hat-in.png",
    ᐃⵠⲆᐃⲆᐃᐃ: "img/inv-pirate-hat-click.png",
    ΔⵠⵠΔⲆⲆᐃ: "img/day-penguin.png",
    ⲆᐃΔⲆⲆΔΔ: "img/night-penguin.png",
    ΔⵠΔⲆⲆᐃΔ: "img/hurt-penguin.png",
    ⲆⲆⵠᐃⵠ: "img/inv-penguin-feather-click.png",
    ΔⲆΔⵠᐃ: "img/inv-hawk-feather-click.png",
    ⲆⲆΔᐃⲆⵠⲆ: "img/day-boar1.png",
    ⲆⲆⵠᐃΔᐃⲆ: "img/day-boar1-tamed.png",
    ⵠᐃΔᐃⵠⲆⵠ: "img/day-boar1-angry.png",
    ⵠⲆᐃⵠⵠΔⲆ: "img/night-boar1.png",
    ᐃᐃΔΔⵠΔⲆ: "img/night-boar1-tamed.png",
    ⲆᐃⲆΔⵠᐃⲆ: "img/night-boar1-angry.png",
    ⵠΔᐃᐃΔᐃⵠ: "img/inv-mount-boar-out.png",
    ⵠⲆⵠᐃⲆΔᐃ: "img/inv-mount-boar-in.png",
    ΔΔⲆᐃⵠΔᐃ: "img/inv-mount-boar-click.png",
    ᐃᐃᐃΔΔⲆᐃ: "img/day-hurt-boar1.png",
    ΔᐃΔΔΔᐃⲆ: "img/boar1-step.png",
    ⲆΔⲆᐃᐃᐃΔ: "img/day-saddle1.png",
    ᐃⲆⲆᐃⵠᐃⲆ: "img/night-saddle1.png",
    ΔⵠᐃᐃⲆΔΔ: "img/inv-saddle-out.png",
    ⵠⵠΔⲆᐃⲆⲆ: "img/inv-saddle-in.png",
    ᐃⵠΔΔᐃΔⵠ: "img/inv-saddle-click.png",
    ⵠⵠⲆⵠᐃⲆⵠ: "img/day-magic-wand0.png",
    ᐃΔΔᐃᐃΔⵠ: "img/night-magic-wand0.png",
    ⵠΔᐃⵠΔᐃΔ: "img/day-light-wand1.png",
    ⵠΔΔⲆΔΔⲆ: "img/night-light-wand1.png",
    ⲆᐃⲆⲆⵠΔΔ: "img/inv-magic-wand0-out.png",
    ⲆⲆⲆⵠⵠᐃⲆ: "img/inv-magic-wand0-in.png",
    ⲆᐃⵠᐃⲆⵠⲆ: "img/inv-magic-wand0-click.png",
    ᐃΔᐃⲆⲆΔΔ: "img/day-magic-wand1.png",
    ᐃⲆΔⲆΔⲆΔ: "img/night-magic-wand1.png",
    ⲆᐃᐃⵠⲆᐃⵠ: "img/day-light-wand0.png",
    ⲆᐃΔᐃΔⵠᐃ: "img/night-light-wand0.png",
    ⵠᐃⲆⵠⵠⲆΔ: "img/inv-magic-wand1-out.png",
    ᐃⵠᐃⵠⲆΔⲆ: "img/inv-magic-wand1-in.png",
    ΔΔⲆⵠΔᐃⵠ: "img/inv-magic-wand1-click.png",
    ⵠᐃᐃᐃⵠᐃⵠ: "img/day-firefly.png",
    ⲆᐃΔᐃⲆⲆᐃ: "img/night-firefly.png",
    ᐃΔᐃΔΔⵠᐃ: "img/hurt-firefly.png",
    ⵠΔΔⵠᐃⵠΔ: "img/inv-firefly-out.png",
    ⵠⲆΔΔΔⵠⵠ: "img/inv-firefly-in.png",
    ⵠⵠΔΔⲆᐃΔ: "img/inv-firefly-click.png",
    ΔᐃΔⲆⵠΔⵠ: "img/day-baby-dragon.png",
    ⲆⵠᐃⲆᐃⲆΔ: "img/night-baby-dragon.png",
    ᐃᐃⵠΔΔⵠⵠ: "img/day-baby-dragon-angry.png",
    ᐃⵠⵠⵠⲆΔⲆ: "img/night-baby-dragon-angry.png",
    ⵠΔᐃⵠᐃⲆⵠ: "img/day-baby-dragon-tamed.png",
    ΔⲆⵠⲆᐃⲆᐃ: "img/night-baby-dragon-tamed.png",
    ⵠΔΔⵠⲆⲆⲆ: "img/day-wing-dragon-left-angry.png",
    ⲆⵠⲆΔᐃΔⵠ: "img/night-dragon-wing-left-angry.png",
    ⵠΔⵠΔⲆⲆⲆ: "img/day-wing-dragon-right-angry.png",
    ⵠⵠᐃᐃⵠΔⲆ: "img/night-dragon-wing-right-angry.png",
    ⲆΔΔⵠⵠΔⲆ: "img/day-wing-dragon-left-tamed.png",
    ⵠᐃΔⵠⵠᐃⲆ: "img/night-dragon-wing-left-tamed.png",
    ⵠⲆⵠΔᐃⵠⵠ: "img/day-wing-dragon-right-tamed.png",
    ᐃᐃᐃᐃΔΔⵠ: "img/night-wing-dragon-right-tamed.png",
    ᐃⵠΔⲆΔⵠΔ: "img/day-wing-dragon-left.png",
    ⲆΔⵠⲆᐃᐃᐃ: "img/night-dragon-wing-left.png",
    ΔⵠⲆΔᐃⵠΔ: "img/day-wing-dragon-right.png",
    ⲆᐃⵠΔⲆⲆᐃ: "img/night-wing-dragon-right.png",
    ΔⲆⵠⲆⲆΔᐃ: "img/hurt-baby-dragon.png",
    ΔⲆᐃⵠᐃᐃⵠ: "img/hurt-baby-dragon-wing-left.png",
    ⲆⲆᐃⲆΔΔΔ: "img/hurt-baby-dragon-wing-right.png",
    ΔⲆΔΔⲆⵠⵠ: "img/inv-baby-dragon-out.png",
    ΔΔⲆⵠᐃⲆⵠ: "img/inv-baby-dragon-in.png",
    ΔⵠⲆΔⲆⵠΔ: "img/inv-baby-dragon-click.png",
    ⲆⲆᐃᐃⵠⵠᐃ: "img/day-baby-lava.png",
    ⲆᐃᐃⵠᐃⲆΔ: "img/night-baby-lava.png",
    ᐃᐃᐃΔⵠⲆⵠ: "img/day-baby-lava-angry.png",
    ΔⲆᐃΔⵠⵠⵠ: "img/night-baby-lava-angry.png",
    ⲆᐃⵠⵠᐃⲆⵠ: "img/day-baby-lava-tamed.png",
    ⵠⲆⲆⲆⵠⲆᐃ: "img/night-baby-lava-tamed.png",
    ᐃⲆᐃᐃᐃᐃⲆ: "img/day-wing-lava-left-angry.png",
    ⲆΔⲆⵠᐃᐃⲆ: "img/night-wing-lava-left-angry.png",
    ΔΔⲆⲆⲆᐃⲆ: "img/day-wing-lava-right-angry.png",
    ⲆᐃΔΔᐃⵠᐃ: "img/night-wing-lava-right-angry.png",
    ⵠⲆᐃⲆⲆᐃᐃ: "img/day-wing-lava-left-tamed.png",
    ⲆΔⲆⲆΔⲆΔ: "img/night-wing-lava-left-tamed.png",
    ΔᐃⵠⵠⵠᐃⲆ: "img/day-wing-lava-right-tamed.png",
    ⲆᐃΔⵠⵠⵠᐃ: "img/night-wing-lava-right-tamed.png",
    ⲆᐃᐃⲆⲆΔΔ: "img/day-wing-lava-left.png",
    ⲆⵠΔⲆⲆⵠⵠ: "img/night-wing-lava-left.png",
    ᐃᐃΔΔⵠⲆᐃ: "img/day-wing-lava-right.png",
    ΔⵠΔⲆⲆⲆⵠ: "img/night-wing-lava-right.png",
    ⵠΔΔⲆⵠⲆᐃ: "img/hurt-baby-lava.png",
    ⲆⵠᐃᐃⲆᐃⲆ: "img/hurt-baby-lava-wing-left.png",
    ⲆΔⵠΔⵠⲆΔ: "img/hurt-baby-lava-wing-right.png",
    ΔⵠᐃΔᐃⲆⵠ: "img/inv-baby-lava-out.png",
    ⲆⵠΔⵠⲆⲆΔ: "img/inv-baby-lava-in.png",
    ⲆⲆΔⵠΔⲆⵠ: "img/inv-baby-lava-click.png",
    ⲆⵠΔᐃⵠⵠΔ: "img/day-falcon.png",
    ⵠᐃⵠᐃᐃΔⵠ: "img/night-falcon.png",
    ⵠⵠⲆᐃⵠΔⲆ: "img/day-falcon-angry.png",
    ΔⲆᐃΔᐃΔᐃ: "img/night-falcon-angry.png",
    ᐃᐃⵠⵠⵠⵠᐃ: "img/day-falcon-ground.png",
    ⲆⵠⲆⲆⵠⵠⵠ: "img/night-falcon-ground.png",
    ΔⵠᐃᐃᐃΔⵠ: "img/day-falcon-ground-angry.png",
    ᐃⲆᐃⵠΔΔᐃ: "img/night-falcon-ground-angry.png",
    ⲆΔᐃⵠΔΔⲆ: "img/day-falcon-wings-left.png",
    ΔⵠᐃΔᐃΔⵠ: "img/night-falcon-wings-left.png",
    ᐃⲆⲆⵠⵠⲆⲆ: "img/day-falcon-wings-right.png",
    ᐃᐃⵠⲆⲆⲆⵠ: "img/night-falcon-wings-right.png",
    ⵠⲆⵠⵠᐃⵠⲆ: "img/day-falcon-angry-wings-left.png",
    ⵠᐃⵠⲆΔⲆⲆ: "img/night-falcon-angry-wings-left.png",
    ⲆⲆᐃⵠΔΔΔ: "img/day-falcon-angry-wings-right.png",
    ΔΔᐃΔⵠΔⲆ: "img/night-falcon-angry-wings-right.png",
    ᐃΔᐃᐃΔΔΔ: "img/day-falcon-wings-left-tamed.png",
    ᐃΔⲆⲆᐃⵠⲆ: "img/night-falcon-wings-left-tamed.png",
    ⲆⵠⲆᐃΔΔᐃ: "img/day-falcon-wings-right-tamed.png",
    ᐃⲆⲆⲆⲆΔⵠ: "img/night-falcon-wings-right-tamed.png",
    ⲆⲆⵠΔΔΔⲆ: "img/day-falcon-tamed.png",
    ᐃⵠⲆᐃΔΔΔ: "img/night-falcon-tamed.png",
    ⲆⲆⲆⲆⲆᐃᐃ: "img/hurt-falcon-ground.png",
    ᐃⲆⲆⵠⲆⵠⲆ: "img/hurt-falcon.png",
    ⲆⲆⵠᐃᐃᐃⲆ: "img/hurt-falcon-wings-left.png",
    ΔⵠⵠᐃⵠΔᐃ: "img/hurt-falcon-wings-right.png",
    ⲆΔⵠᐃⵠⲆⲆ: "img/inv-falcon-out.png",
    ⵠⵠΔⵠⵠΔΔ: "img/inv-falcon-in.png",
    ⲆⲆⵠΔᐃⵠΔ: "img/inv-falcon-click.png",
    ⲆⲆᐃⵠᐃⵠⵠ: "img/day-crab-boss.png",
    ⵠⵠⲆΔⲆⲆⵠ: "img/night-crab-boss.png",
    ΔⲆᐃⵠΔᐃⲆ: "img/day-crab-boss-angry.png",
    ⲆᐃⲆᐃⲆⵠⲆ: "img/night-crab-boss-angry.png",
    ΔΔⵠᐃⵠΔᐃ: "img/day-crab-boss-tamed.png",
    ΔⲆΔⵠⲆΔᐃ: "img/night-crab-boss-tamed.png",
    ᐃⵠΔⵠᐃᐃⵠ: "img/day-crab-boss-claw-left-attack.png",
    ᐃᐃᐃΔΔΔΔ: "img/night-crab-boss-claw-left-attack.png",
    ⵠⲆΔⵠⲆΔⵠ: "img/day-crab-boss-claw-right-attack.png",
    ᐃΔⲆᐃⵠΔⵠ: "img/night-crab-boss-claw-right-attack.png",
    ⲆᐃⲆⵠΔᐃΔᐃⲆ: "img/day-crab-boss-claw-left-tamed.png",
    ⲆⵠΔᐃⲆⵠⵠⲆΔ: "img/night-crab-boss-claw-left-tamed.png",
    ΔⲆⵠᐃΔΔᐃⵠᐃ: "img/day-crab-boss-claw-right-tamed.png",
    ΔⵠᐃᐃᐃⲆⵠⵠΔ: "img/night-crab-boss-claw-right-tamed.png",
    ⵠⲆⲆⵠⲆΔⲆ: "img/day-crab-boss-claw-left.png",
    ΔⲆⲆΔⲆⲆⲆ: "img/night-crab-boss-claw-left.png",
    ⵠᐃⵠΔⲆΔΔ: "img/day-crab-boss-claw-right.png",
    ⲆⵠᐃᐃⲆⵠⲆ: "img/night-crab-boss-claw-right.png",
    ΔⲆⲆᐃⵠΔⵠ: "img/hurt-crab-boss.png",
    ⵠᐃΔᐃᐃⵠᐃ: "img/hurt-crab-boss-claw-left.png",
    ⵠⲆⲆⵠᐃᐃᐃ: "img/hurt-crab-boss-claw-right.png",
    ⲆᐃΔⵠⲆⲆⲆ: "img/heal-crab-boss.png",
    ⵠΔᐃΔΔΔⲆ: "img/heal-crab-boss-claw-left.png",
    ⲆΔⵠᐃΔΔⵠ: "img/heal-crab-boss-claw-right.png",
    ⵠⵠⵠᐃⲆΔΔ: "img/crab-step.png",
    ᐃⲆⵠΔΔⵠᐃ: "img/inv-crab-boss-out.png",
    ΔⵠᐃΔⵠⲆⲆ: "img/inv-crab-boss-in.png",
    ⲆⵠΔⵠᐃᐃⵠ: "img/inv-crab-boss-click.png",
    ΔᐃΔⵠΔᐃᐃ: "img/day-cactus10.png",
    ⲆⲆⵠⲆΔᐃⲆ: "img/night-cactus10.png",
    ⲆᐃᐃⲆᐃⲆᐃ: "img/inv-cactus-out.png",
    ⵠᐃⲆⵠΔΔⵠ: "img/inv-cactus-in.png",
    ᐃΔⲆΔᐃⲆΔ: "img/inv-cactus-click.png",
    ᐃⲆΔⵠⵠⵠⵠ: "img/day-scorpion.png",
    ΔⵠⵠⲆᐃⲆᐃ: "img/night-scorpion.png",
    ⲆⲆΔΔⲆⲆⲆ: "img/day-scorpion-hand-left.png",
    ⵠΔΔⲆᐃᐃΔ: "img/night-scorpion-hand-left.png",
    ΔΔⲆⲆⵠⲆⵠ: "img/day-scorpion-hand-right.png",
    Δᐃᐃⵠⵠᐃᐃ: "img/night-scorpion-hand-right.png",
    ΔᐃΔᐃⲆᐃⵠ: "img/hurt-scorpion.png",
    ΔⵠᐃΔΔΔᐃ: "img/hurt-scorpion-hand-left.png",
    ⵠᐃΔᐃᐃΔᐃ: "img/hurt-scorpion-hand-right.png",
    ΔΔⵠⵠΔΔⵠ: "img/day-vulture.png",
    ᐃⵠΔᐃⵠᐃᐃ: "img/night-vulture.png",
    ΔⵠᐃᐃΔⲆⲆ: "img/day-vulture-angry.png",
    ΔᐃᐃⵠΔⲆᐃ: "img/night-vulture-angry.png",
    ΔΔⲆⵠΔⲆΔ: "img/day-vulture-ground.png",
    ᐃⵠⲆⲆΔⲆᐃ: "img/night-vulture-ground.png",
    ⲆⲆⵠⵠΔⲆⲆ: "img/day-vulture-ground-angry.png",
    ᐃⲆⵠⵠⲆⲆⵠ: "img/night-vulture-ground-angry.png",
    ᐃΔᐃⵠΔⲆΔ: "img/day-vulture-wings-left.png",
    ᐃᐃᐃᐃⵠᐃⵠ: "img/night-vulture-wings-left.png",
    ΔΔⵠᐃᐃᐃΔ: "img/day-vulture-wings-right.png",
    ⲆⵠᐃⲆΔΔΔ: "img/night-vulture-wings-right.png",
    ⲆⵠΔⵠⲆⵠⵠ: "img/day-vulture-angry-wings-left.png",
    ⲆΔᐃⵠⲆⵠⵠ: "img/night-vulture-angry-wings-left.png",
    ᐃΔⲆⵠᐃⵠⵠ: "img/day-vulture-angry-wings-right.png",
    ⵠΔⲆᐃⵠᐃⲆ: "img/night-vulture-angry-wings-right.png",
    ⵠΔⵠΔⵠⲆⲆ: "img/day-vulture-wings-left-tamed.png",
    ΔⲆⲆⵠΔᐃΔ: "img/night-vulture-wings-left-tamed.png",
    ᐃᐃⲆΔⲆⲆⲆ: "img/day-vulture-wings-right-tamed.png",
    ᐃΔⵠⵠᐃΔⵠ: "img/night-vulture-wings-right-tamed.png",
    ΔⵠΔᐃⲆⲆⵠ: "img/day-vulture-tamed.png",
    ᐃⲆⲆⵠΔⲆⵠ: "img/night-vulture-tamed.png",
    ⵠⵠΔΔⲆᐃⵠ: "img/hurt-vulture-ground.png",
    ⲆⵠⵠᐃΔᐃᐃ: "img/hurt-vulture.png",
    ᐃᐃⵠⲆᐃᐃⲆ: "img/hurt-vulture-wings-left.png",
    ⲆⵠⵠΔᐃⲆⵠ: "img/hurt-vulture-wings-right.png",
    ᐃⵠⲆⵠⵠⵠΔ: "img/day-aloe-vera.png",
    ΔᐃᐃΔⲆⲆⲆ: "img/night-aloe-vera.png",
    ⲆΔᐃΔⲆⲆᐃ: "img/inv-aloe-vera-out.png",
    ⵠⵠⲆᐃᐃⵠⲆ: "img/inv-aloe-vera-in.png",
    ᐃⲆᐃⲆⲆⲆᐃ: "img/inv-aloe-vera-click.png",
    ᐃΔᐃⵠⵠΔᐃ: "img/day-aloe-vera-grown.png",
    ᐃᐃΔⵠⲆⲆⲆ: "img/night-aloe-vera-grown.png",
    ΔᐃᐃⵠᐃⲆⵠ: "img/day-aloe-vera-dried.png",
    ⵠᐃΔᐃΔⲆⲆ: "img/night-aloe-vera-dried.png",
    ΔⵠⵠΔᐃΔⵠ: "img/day-turban1.png",
    ΔⵠⲆⵠⵠᐃⲆ: "img/night-turban1.png",
    ⲆᐃᐃⲆΔΔⵠ: "img/day-turban2.png",
    ᐃΔᐃⵠⵠⵠⲆ: "img/night-turban2.png",
    ⲆⲆΔⵠᐃⲆⵠ: "img/inv-turban2-out.png",
    ⵠⵠⲆⵠⵠᐃⲆ: "img/inv-turban2-in.png",
    ΔΔⵠΔⵠⲆΔ: "img/inv-turban2-click.png",
    ⵠΔⵠᐃⵠΔⵠ: "img/inv-turban1-out.png",
    ⵠⵠⵠⵠⵠⵠΔ: "img/inv-turban1-in.png",
    ⵠⲆⲆⲆᐃⲆᐃ: "img/inv-turban1-click.png",
    ᐃΔⵠⲆⲆΔⵠ: "img/day-pitchfork2.png",
    ΔⵠⵠᐃᐃΔⲆ: "img/night-pitchfork2.png",
    ΔⵠⵠᐃΔⵠⲆ: "img/inv-pitchfork2-out.png",
    ΔᐃᐃⵠⲆᐃᐃ: "img/inv-pitchfork2-in.png",
    ⲆΔⵠⵠΔΔⵠ: "img/inv-pitchfork2-click.png",
    ⲆⲆⵠⵠⵠⲆⲆ: "img/inv-gold-fork-click.png",
    ⲆΔΔⵠⵠⲆⲆ: "img/inv-pilot-glasses-click.png",
    ⲆⲆΔᐃᐃᐃⲆ: "img/day-pilot-helmet.png",
    Ⲇᐃᐃᐃⵠⵠᐃ: "img/night-pilot-helmet.png",
    ΔᐃᐃᐃΔᐃⵠ: "img/inv-pilot-helmet-out.png",
    ⲆΔᐃⲆⵠⵠⵠ: "img/inv-pilot-helmet-in.png",
    ΔⲆⲆΔⲆΔΔ: "img/inv-pilot-helmet-click.png",
    ⵠᐃⵠⲆᐃᐃⵠΔⵠ: "img/day-sandworm0.png",
    ⲆΔⲆⵠΔᐃⵠ: "img/day-sandworm1.png",
    ᐃᐃΔΔⲆⵠΔ: "img/day-sandworm2.png",
    ⲆⵠⲆⲆᐃⵠⵠᐃⵠ: "img/night-sandworm0.png",
    ᐃᐃΔᐃᐃΔᐃ: "img/night-sandworm1.png",
    ⲆⵠⲆᐃⲆⲆᐃ: "img/night-sandworm2.png",
    ΔⲆⲆᐃᐃΔᐃ: "img/hurt-sandworm0.png",
    ᐃⲆᐃⲆᐃⵠⲆ: "img/hurt-sandworm1.png",
    ⲆⵠⲆΔΔⲆⵠ: "img/hurt-sandworm2.png",
    ΔⲆΔⵠⲆ: "img/inv-vulture-feather-click.png",
    ⵠΔᐃᐃΔⲆΔ: "img/day-emerald0.png",
    ΔⵠΔⲆᐃⵠⵠ: "img/night-emerald0.png",
    ΔⵠⲆᐃΔΔⲆ: "img/day-emerald1.png",
    ΔⲆⲆⲆΔⵠᐃ: "img/night-emerald1.png",
    ⵠⲆⵠⵠΔⲆΔ: "img/day-emerald2.png",
    ΔΔᐃᐃΔΔᐃ: "img/night-emerald2.png",
    ΔΔⵠⵠⵠ: "img/inv-emerald-click.png",
    ⲆᐃⲆⵠⲆⵠΔ: "img/inv-sworm-juice-out.png",
    ᐃᐃⵠΔⵠⲆᐃ: "img/inv-sworm-juice-in.png",
    ΔⵠΔⵠⲆⵠⵠ: "img/inv-sworm-juice-click.png",
    ⵠΔᐃΔⲆᐃⲆ: "img/day-point-machine.png",
    ᐃⵠΔⵠⲆⵠᐃ: "img/night-point-machine.png",
    ⵠⲆᐃᐃⲆᐃᐃ: "img/day-point-machine-hole.png",
    ⵠⵠⵠⵠΔⵠⲆ: "img/night-point-machine-hole.png",
    ⵠⲆΔⲆᐃᐃᐃ: "img/day-point-machine-ground.png",
    ⵠⵠⵠⵠᐃΔⵠ: "img/night-point-machine-ground.png",
    ⲆⵠᐃᐃΔΔⲆ: "img/day-point-machine-rotate.png",
    ⲆΔⲆΔⵠᐃᐃ: "img/night-point-machine-rotate.png",
    ΔΔᐃⵠᐃⲆΔ: "img/inv-point-machine-out.png",
    ⲆΔᐃⲆΔΔⲆ: "img/inv-point-machine-in.png",
    Ⲇⵠᐃᐃᐃᐃᐃ: "img/inv-point-machine-click.png",
    ᐃΔΔⵠΔⲆᐃ: "img/day-extractor-machine0-stone.png",
    ⵠΔΔⲆΔΔᐃ: "img/night-extractor-machine0-stone.png",
    ⲆᐃΔᐃᐃⲆⲆ: "img/day-extractor-machine-stone.png",
    ⵠⲆΔΔᐃᐃΔ: "img/night-extractor-machine-stone.png",
    ΔᐃᐃΔⵠᐃΔ: "img/inv-extractor-machine-stone-out.png",
    ⵠΔΔⵠΔΔᐃ: "img/inv-extractor-machine-stone-in.png",
    ⵠᐃⲆⵠΔⵠⲆ: "img/inv-extractor-machine-stone-click.png",
    ⲆⲆⵠᐃⲆΔⵠ: "img/day-extractor-machine0-gold.png",
    ᐃⵠᐃⲆᐃⵠΔ: "img/night-extractor-machine0-gold.png",
    ᐃΔΔΔⲆΔᐃ: "img/day-extractor-machine-gold.png",
    ⲆⲆΔΔⵠⲆⵠ: "img/night-extractor-machine-gold.png",
    ᐃⵠΔΔⵠᐃⲆ: "img/inv-extractor-machine-gold-out.png",
    ⵠⵠᐃⲆⵠᐃⲆ: "img/inv-extractor-machine-gold-in.png",
    ⲆΔⵠᐃᐃⵠᐃ: "img/inv-extractor-machine-gold-click.png",
    ⲆᐃⲆΔⵠΔⲆ: "img/day-extractor-machine0-diamond.png",
    ⲆᐃᐃᐃⲆⲆΔ: "img/night-extractor-machine0-diamond.png",
    ⵠᐃᐃⵠⵠⲆᐃ: "img/day-extractor-machine-diamond.png",
    ᐃⵠΔⵠⲆΔᐃ: "img/night-extractor-machine-diamond.png",
    ΔⵠΔᐃᐃⲆᐃ: "img/inv-extractor-machine-diamond-out.png",
    ᐃⵠΔⲆⲆⲆⲆ: "img/inv-extractor-machine-diamond-in.png",
    ᐃⵠᐃᐃᐃΔⵠ: "img/inv-extractor-machine-diamond-click.png",
    ᐃⵠΔⲆΔᐃᐃ: "img/day-extractor-machine0-amethyst.png",
    ΔᐃᐃΔⲆᐃᐃ: "img/night-extractor-machine0-amethyst.png",
    ⵠⵠⵠΔⲆⵠⲆ: "img/day-extractor-machine-amethyst.png",
    ᐃⲆⲆⵠⲆᐃΔ: "img/night-extractor-machine-amethyst.png",
    ⵠΔᐃⲆᐃΔᐃ: "img/inv-extractor-machine-amethyst-out.png",
    ΔΔΔⵠⲆΔᐃ: "img/inv-extractor-machine-amethyst-in.png",
    ᐃⲆⲆᐃᐃᐃᐃ: "img/inv-extractor-machine-amethyst-click.png",
    ⲆᐃⵠⲆⲆᐃᐃ: "img/day-extractor-machine0-reidite.png",
    ᐃᐃᐃΔⵠⲆᐃ: "img/night-extractor-machine0-reidite.png",
    ΔΔⲆⵠⲆⵠᐃ: "img/day-extractor-machine-reidite.png",
    ΔⵠΔⵠⵠΔΔ: "img/night-extractor-machine-reidite.png",
    ⵠᐃⲆᐃᐃΔⲆ: "img/inv-extractor-machine-reidite-out.png",
    ΔⲆΔΔᐃΔⵠ: "img/inv-extractor-machine-reidite-in.png",
    ᐃᐃᐃⵠⵠⲆΔ: "img/inv-extractor-machine-reidite-click.png",
    ΔⵠᐃΔⲆⵠⲆ: "img/extractor-cases.png",
    ᐃⲆᐃΔΔⵠⲆ: "img/day-golden-hen.png",
    ᐃΔⵠᐃⲆᐃᐃ: "img/night-golden-hen.png",
    ᐃᐃᐃⵠⲆⵠᐃ: "img/day-golden-chicken.png",
    ⲆⲆᐃᐃᐃⲆⲆ: "img/night-golden-chicken.png",
    ⲆᐃⲆⲆⲆⵠⲆ: "img/hurt-golden-hen.png",
    ᐃᐃⵠᐃᐃᐃᐃ: "img/hurt-golden-chicken.png",
    ᐃΔᐃΔⲆΔⵠ: "img/logo-interface.png",
    ΔΔᐃⵠΔᐃⵠ: "img/forest-mode-hover.png",
    ⵠⲆⲆᐃᐃⲆⵠ: "img/normal-mode-hover.png",
    ΔΔᐃᐃⲆᐃⵠ: "img/vampire-mode-hover.png",
    ᐃᐃᐃᐃᐃⵠΔ: "img/zombie-mode-hover.png",
    ᐃⲆⲆⵠΔΔⵠ: "img/community-mode-hover2.png",
    ⵠⵠⵠΔΔⲆΔ: "img/experimental-mode-hover.png",
    ⵠⵠⵠᐃΔΔΔ: "img/zombie-mode-out.png",
    ⵠⲆⵠΔᐃΔⲆ: "img/zombie-mode-in.png",
    ᐃⲆᐃΔΔⵠᐃ: "img/zombie-mode-click.png",
    ᐃⵠⵠΔⵠΔᐃ: "img/vampire-mode-out.png",
    ΔⲆⵠⵠⲆⲆⵠ: "img/vampire-mode-in.png",
    ⲆΔⵠᐃⵠΔⵠ: "img/vampire-mode-click.png",
    ΔΔⵠⵠⵠⵠᐃ: "img/normal-mode-out.png",
    ⵠΔᐃΔⲆΔⲆ: "img/normal-mode-in.png",
    ⲆΔᐃᐃⲆΔⵠ: "img/normal-mode-click.png",
    ΔΔⵠᐃᐃΔΔ: "img/forest-mode-out.png",
    ⲆⵠⲆⲆⵠΔΔ: "img/forest-mode-in.png",
    ᐃΔΔΔⲆᐃⵠ: "img/forest-mode-click.png",
    ⵠΔΔΔⵠᐃⲆ: "img/community-mode-out.png",
    ᐃⵠΔⵠⵠΔⵠ: "img/community-mode-in.png",
    ᐃⲆⵠᐃⵠⵠΔ: "img/community-mode-click.png",
    ⵠⲆⵠⵠⲆᐃΔ: "img/experimental-modes-out.png",
    ⵠᐃΔΔⵠᐃᐃ: "img/experimental-modes-in.png",
    ⵠⲆᐃᐃⵠΔⲆ: "img/experimental-modes-click.png",
    ⵠⵠᐃⲆΔᐃᐃ: "img/youtube-button-out.png",
    ᐃᐃⲆΔΔⵠⲆ: "img/youtube-button-in.png",
    ⲆᐃⲆΔⲆΔⵠ: "img/youtube-button-click.png",
    ⵠⲆΔⵠⵠᐃᐃ: "img/wiki-button-out.png",
    ⲆΔⵠΔⵠⲆⵠ: "img/wiki-button-in.png",
    ⵠⲆΔⵠᐃᐃΔ: "img/wiki-button-click.png",
    ᐃΔΔΔᐃᐃᐃ: "img/twitter-button-out.png",
    ΔⵠⲆᐃⵠⲆⲆ: "img/twitter-button-in.png",
    ΔΔⲆⲆΔᐃⵠ: "img/twitter-button-click.png",
    Δⵠⵠᐃⵠᐃⵠ: "img/facebook-button-out.png",
    ᐃⲆΔΔΔΔⵠ: "img/facebook-button-in.png",
    ⵠᐃⵠⲆΔⵠᐃ: "img/facebook-button-click.png",
    ᐃᐃⵠᐃΔᐃⵠ: "img/reddit-button-out.png",
    ΔⵠᐃᐃᐃΔΔ: "img/reddit-button-in.png",
    ⲆΔⲆᐃⲆΔⵠ: "img/reddit-button-click.png",
    ᐃΔᐃᐃⲆⵠᐃ: "img/discord-button-out.png",
    ΔΔⵠⵠⵠⲆⲆ: "img/discord-button-in.png",
    ΔᐃⵠᐃⵠᐃΔ: "img/discord-button-click.png",
    ⵠᐃᐃΔᐃⲆΔ: "img/merch-button-out.png",
    ⲆᐃⲆᐃⲆΔΔ: "img/merch-button-in.png",
    ΔᐃΔΔΔΔⲆ: "img/merch-button-click.png",
    ⵠⵠⵠⵠΔⲆᐃⲆΔ: "img/terminal-button-out.png",
    ⵠΔΔⵠᐃΔΔΔᐃ: "img/terminal-button-in.png",
    ⵠⵠᐃⵠᐃᐃⲆⲆᐃ: "img/terminal-button-click.png",
    ⵠΔᐃᐃΔⵠⵠ: "img/restart-out.png",
    ᐃΔⲆΔⲆⵠᐃ: "img/restart-in.png",
    ⲆᐃΔΔᐃᐃⲆ: "img/restart-click.png",
    ⲆⲆᐃΔᐃΔⲆ: "img/guide-out.png",
    ᐃⵠⵠⵠΔΔⵠ: "img/guide-in.png",
    ΔⲆⵠᐃΔΔⵠ: "img/guide-click.png",
    ΔⲆΔⲆΔⵠΔ: "img/copy-paste-out.png",
    ᐃᐃⲆΔⲆᐃⲆ: "img/copy-paste-in.png",
    ᐃᐃΔⵠᐃᐃⲆ: "img/copy-paste-click.png",
    ⲆΔΔⲆⵠΔⵠ: "img/link-buttons-bg.png",
    ⵠΔᐃⲆⵠᐃⵠ: "img/changelog-box2.png",
    ⲆⵠΔⵠᐃΔΔ: "img/changelog_30.png",
    ⵠⲆᐃΔᐃᐃⵠ: "img/banner-taming.png",
    ΔΔΔᐃⲆΔᐃ: "img/profile-button-out.png",
    ⲆⲆᐃᐃΔᐃΔ: "img/profile-button-in.png",
    ⲆᐃΔΔᐃⲆᐃ: "img/profile-button-click.png",
    ⲆⵠⵠⵠᐃΔᐃ: "img/login-button-out.png",
    ΔⲆΔᐃᐃⵠᐃ: "img/login-button-in.png",
    ᐃⵠᐃΔⲆΔΔ: "img/login-button-click.png",
    ⲆΔΔⵠΔᐃⵠ: "img/login-google-out.png",
    ⲆⲆⵠΔⲆⵠΔ: "img/login-google-in.png",
    ΔᐃⲆΔᐃⲆⵠ: "img/login-google-click.png",
    ⵠⵠΔⵠΔⲆⲆ: "img/login-facebook-out.png",
    ᐃᐃΔΔⵠᐃΔ: "img/login-facebook-in.png",
    ⵠΔⲆⵠⲆΔⵠ: "img/login-facebook-click.png",
    ᐃⲆⵠⲆⵠΔⲆ: "img/account-box.png",
    ΔⲆΔᐃⵠⲆⲆⵠⵠ: "img/account-under-maintenance.png",
    ΔⲆⵠΔⵠⵠᐃ: "img/close-button-account-out.png",
    ΔⵠΔᐃᐃΔᐃ: "img/close-button-account-in.png",
    ⲆΔⲆΔΔⵠⵠ: "img/close-button-account-click.png",
    ᐃⲆΔΔΔⲆⵠ: "img/play-button-out.png",
    ⵠᐃⵠⲆⵠΔᐃ: "img/play-button-in.png",
    ⵠⲆⲆⲆⵠΔⵠ: "img/play-button-click.png",
    ⵠᐃΔᐃⲆΔᐃᐃΔ: "img/app-store-badge.png",
    ⲆⲆΔⵠⵠⲆΔⲆΔ: "img/play-store-badge.png",
    ΔⲆΔᐃⵠᐃΔⲆΔ: "img/mobile-boxad.png",
    ⲆⵠΔⲆⵠⲆΔ: "img/modify-name-out.png",
    ⵠⲆᐃⵠΔΔⵠ: "img/modify-name-in.png",
    ⲆΔⲆΔᐃᐃᐃ: "img/modify-name-click.png",
    ΔⵠⲆⲆⵠΔΔ: "img/yes-button-out.png",
    ΔᐃΔⲆⲆᐃⵠ: "img/yes-button-in.png",
    ⵠᐃΔᐃΔΔⲆ: "img/yes-button-click.png",
    ᐃΔⵠⵠⵠΔᐃ: "img/yes-300-button-out.png",
    ⲆΔᐃᐃΔⲆᐃ: "img/yes-300-button-in.png",
    ⲆΔΔⲆⵠⲆᐃ: "img/yes-300-button-click.png",
    ΔΔⲆΔⵠᐃΔ: "img/no-button-out.png",
    ΔⵠᐃᐃⲆᐃᐃ: "img/no-button-in.png",
    ⲆⵠΔⲆᐃᐃΔ: "img/no-button-click.png",
    ΔΔⲆᐃⵠᐃⵠ: "img/no-thanks-button-out.png",
    ⵠᐃⲆⲆⲆⵠᐃ: "img/no-thanks-button-in.png",
    ΔᐃᐃⵠΔΔⲆ: "img/no-thanks-button-click.png",
    ᐃⲆᐃΔᐃⵠᐃ: "img/shop-button-out.png",
    ᐃᐃⲆⵠⵠⲆⵠ: "img/shop-button-in.png",
    ᐃΔⵠΔⵠⲆⵠ: "img/shop-button-click.png",
    ⲆᐃᐃΔⵠᐃⲆ: "img/logout-out.png",
    ⵠᐃⲆⵠⲆⲆⵠ: "img/logout-in.png",
    ⲆᐃΔⲆᐃⵠⲆ: "img/logout-click.png",
    ⵠⲆΔᐃⲆΔⵠ: "img/terms-button-out.png",
    ΔΔΔᐃΔⵠⲆ: "img/terms-button-in.png",
    ⵠΔⵠⲆᐃΔⲆ: "img/terms-button-click.png",
    ⲆΔᐃΔΔⵠᐃ: "img/tutorial-icon.png",
    ᐃⵠⲆΔᐃΔⵠ: "img/skins-icon.png",
    ⲆᐃⲆⵠᐃΔΔ: "img/shop-icon.png",
    ᐃᐃⵠⲆⲆΔⲆᐃΔ: "img/paint-icon.png",
    ⵠⵠΔⵠⲆΔⵠ: "img/leaderboard-icon.png",
    ᐃⵠᐃΔᐃᐃᐃ: "img/start-icon.png",
    ⲆⲆΔΔᐃⵠᐃ: "img/profile-icon.png",
    ΔᐃᐃⲆⵠⵠᐃ: "img/server-access-icon2.png",
    ⵠΔᐃΔⵠΔⲆ: "img/button-homepage-bg-out.png",
    Δⵠᐃᐃⵠⵠⵠ: "img/button-homepage-bg-in.png",
    ᐃᐃⲆⲆⲆⵠᐃ: "img/button-homepage-bg-click.png",
    ᐃⵠⲆⲆⲆᐃΔ: "img/button-bottom-homepage-bg-out.png",
    ⵠΔᐃⵠᐃⵠⲆ: "img/button-bottom-homepage-bg-in.png",
    ⵠⵠᐃΔⵠⲆᐃ: "img/button-bottom-homepage-bg-click.png",
    ⵠᐃᐃᐃᐃⵠΔ: "img/lvl-player.png",
    ⲆᐃⲆΔᐃⵠᐃ: "img/avatar-player.png",
    ᐃᐃⲆⲆΔⵠⵠ: "img/avatar-player1.png",
    ⲆᐃΔⵠⲆⵠⲆ: "img/avatar-player2.png",
    ⲆⵠᐃⲆⲆⲆΔ: "img/avatar-player3.png",
    ΔⲆΔΔⵠᐃⲆ: "img/avatar-player4.png",
    ⲆⵠⵠⲆᐃⵠΔ: "img/avatar-player5.png",
    ⵠᐃⵠΔᐃⲆⵠ: "img/avatar-player6.png",
    ᐃᐃⵠⵠⵠΔⲆ: "img/avatar-player7.png",
    Δᐃᐃᐃᐃᐃⵠ: "img/avatar-player8.png",
    ΔΔⲆᐃΔⲆⲆ: "img/avatar-player9.png",
    ⵠⲆⲆⵠⵠᐃΔ: "img/avatar-player10.png",
    ᐃΔⲆΔⵠᐃΔ: "img/avatar-player11.png",
    ⵠᐃᐃⲆΔⲆᐃ: "img/avatar-player12.png",
    ᐃᐃⲆᐃⵠⲆⲆ: "img/avatar-player13.png",
    ΔΔⵠⵠΔⲆᐃ: "img/avatar-player14.png",
    ΔⵠⵠⲆΔΔⵠ: "img/avatar-player14.png",
    ΔᐃⵠⲆᐃΔⲆ: "img/avatar-player14.png",
    ᐃⲆⵠᐃⵠⵠⲆ: "img/avatar-player14.png",
    ΔᐃⵠⲆᐃⵠⵠⵠⲆ: "img/golden-bread.png",
    ᐃᐃⵠᐃⵠⵠⲆ: "img/buy-bread-out.png",
    ⵠⵠⲆᐃᐃΔⲆ: "img/buy-bread-in.png",
    ⲆⲆᐃᐃΔⵠⲆ: "img/buy-bread-click.png",
    ⵠⲆⲆⲆΔᐃⲆ: "img/gauge.png",
    ΔᐃᐃⵠΔΔⵠⵠᐃ: "img/season-4-out.png",
    ⲆⵠᐃᐃᐃⵠⲆᐃᐃ: "img/season-4-in.png",
    ΔΔⵠΔⲆⲆⵠⲆⲆ: "img/season-4-click.png",
    ⵠⲆᐃⵠⲆᐃᐃⵠᐃ: "img/season4-box.png",
    ⲆⲆᐃᐃⵠⵠⵠΔᐃ: "img/season-5-out.png",
    ᐃᐃΔᐃⵠΔⲆⲆᐃ: "img/season-5-in.png",
    ᐃⵠᐃΔᐃᐃΔᐃⲆ: "img/season-5-click.png",
    ΔΔⲆᐃⲆΔᐃⵠΔ: "img/season5-box.png",
    ⲆⵠΔΔᐃⲆᐃ: "img/season-6-out.png",
    ⲆᐃᐃⵠᐃⵠⲆ: "img/season-6-in.png",
    ᐃⲆⵠⲆΔⲆᐃ: "img/season-6-click.png",
    ⲆⵠⲆΔⵠᐃᐃ: "img/season6-box.png",
    ΔΔᐃⵠΔⵠᐃ: "img/profile3-box.png",
    ⲆⵠᐃᐃⲆΔⵠ: "img/skins-box.png",
    ᐃΔⵠⵠⲆⵠⵠ: "img/shop-box.png",
    ⵠΔⵠᐃⵠᐃⲆⲆΔ: "img/private-server-box.png",
    ᐃⲆΔᐃΔⵠΔ: "img/location-box.png",
    ΔᐃⲆᐃⵠⲆᐃ: "img/server-duration-box.png",
    ᐃΔⲆⲆⲆᐃᐃ: "img/tutorial-box.png",
    ᐃΔⲆⲆⲆⲆᐃ: "img/leaderboard2-box.png",
    ⲆⵠΔⵠⵠΔΔ: "img/buy-breads-box.png",
    ⵠⵠⲆⵠΔᐃⲆ: "img/bag-box.png",
    ⵠΔᐃⲆΔⲆΔ: "img/deadbox-box.png",
    ⵠⲆⵠᐃΔΔᐃ: "img/book-box.png",
    ᐃᐃⵠⲆΔⵠⲆ: "img/accessories-box.png",
    ⵠⲆΔⲆⲆᐃᐃ: "img/customskin-box.png",
    ⲆⵠⵠΔΔⵠΔ: "img/bag-lasts.png",
    ΔᐃᐃᐃΔⵠⵠ: "img/server-lasts.png",
    ⲆⵠΔΔΔⲆᐃ: "img/server-access-box2.png",
    ΔΔⵠᐃᐃⵠⲆ: "img/lootbox-box.png",
    ᐃⲆⵠⵠⵠⲆΔ: "img/change-nickname0.png",
    ΔᐃⲆᐃᐃⵠⵠ: "img/change-nickname1.png",
    ⵠⵠⵠᐃⵠΔΔ: "img/cheating-box.png",
    ⲆⲆⲆᐃⲆᐃΔᐃΔ: "img/daily-quest-box.png",
    ⲆΔΔⲆΔΔⵠⵠᐃ: "img/daily-5-bread.png",
    ⵠᐃΔΔΔᐃΔΔᐃ: "img/daily-10-bread.png",
    ᐃⵠᐃΔᐃΔΔⵠΔ: "img/daily-valid.png",
    ᐃⵠΔⲆⵠⵠⵠ: "img/normal-profile-out.png",
    ᐃᐃΔⵠⵠⲆⵠ: "img/normal-profile-in.png",
    ΔⵠⵠⵠⵠⲆⵠ: "img/normal-profile-click.png",
    ΔⵠⵠⲆⲆⲆᐃ: "img/forest-profile-out.png",
    ᐃⲆⲆⵠᐃⲆⲆ: "img/forest-profile-in.png",
    ᐃᐃⲆⵠⵠΔΔ: "img/forest-profile-click.png",
    ᐃⲆΔⵠⲆᐃᐃ: "img/zombie-profile-out.png",
    ⲆᐃⵠⵠΔᐃᐃ: "img/zombie-profile-in.png",
    ᐃΔⲆᐃᐃⵠΔ: "img/zombie-profile-click.png",
    ΔⵠᐃΔᐃᐃᐃ: "img/vampire-profile-out.png",
    ᐃΔᐃΔⲆΔⲆ: "img/vampire-profile-in.png",
    ΔᐃⵠΔᐃᐃᐃ: "img/vampire-profile-click.png",
    ⵠⵠⵠⲆⲆᐃΔ: "img/total-profile-out.png",
    ΔⵠⵠΔᐃᐃⵠ: "img/total-profile-in.png",
    ΔΔⵠⵠⲆᐃⲆ: "img/total-profile-click.png",
    ΔᐃᐃΔᐃⵠⲆ: "img/season1-out.png",
    ⲆᐃᐃⵠⵠⵠⲆ: "img/season1-in.png",
    ⵠⵠᐃⵠᐃᐃΔ: "img/season1-click.png",
    ΔΔΔᐃⲆᐃᐃ: "img/season2-out.png",
    ΔⵠⲆᐃⵠᐃⵠ: "img/season2-in.png",
    ᐃᐃᐃⲆⲆⵠⵠ: "img/season2-click.png",
    ⵠᐃⲆⲆΔⲆᐃ: "img/season3-out.png",
    ⲆⵠᐃⵠΔᐃᐃ: "img/season3-in.png",
    ᐃᐃⲆⲆΔⲆⲆ: "img/season3-click.png",
    ᐃΔⲆⵠⵠⲆⵠ: "img/season4-out.png",
    ΔⵠΔⵠⲆⵠΔ: "img/season4-in.png",
    ⲆΔⵠᐃⵠⲆΔ: "img/season4-click.png",
    ᐃⵠΔⵠⲆⲆΔ: "img/season5-out.png",
    ⵠⵠΔᐃⲆⵠⵠ: "img/season5-in.png",
    ⲆⲆⵠΔᐃⲆⵠ: "img/season5-click.png",
    ⵠᐃᐃᐃᐃⵠᐃ: "img/season6-out.png",
    ⵠᐃⲆΔⲆⵠᐃ: "img/season6-in.png",
    ΔⵠⲆⲆⵠΔᐃ: "img/season6-click.png",
    ᐃⵠᐃΔⵠⲆⲆ: "img/locked-skin-alert.png",
    ΔⲆᐃⲆᐃᐃΔ: "img/locked-custom-alert.png",
    ⵠΔΔⵠᐃⵠⵠ: "img/bg-red-locked.png",
    ⵠΔⵠᐃⲆⵠΔ: "img/skin-button-out.png",
    ᐃⲆᐃⵠⵠᐃΔ: "img/skin-button-in.png",
    ΔⵠᐃᐃⵠⲆᐃ: "img/skin-button-click.png",
    ΔⵠᐃⵠΔᐃᐃ: "img/accessory-button-out.png",
    ⵠᐃⲆⲆⵠⲆⵠ: "img/accessory-button-in.png",
    ᐃⵠⲆⵠΔⵠⵠ: "img/accessory-button-click.png",
    ⲆⵠⵠΔᐃⲆⲆ: "img/bag-button-out.png",
    ⵠᐃΔⵠⵠᐃᐃ: "img/bag-button-in.png",
    ᐃⲆᐃⲆΔⵠⲆ: "img/bag-button-click.png",
    ⲆΔᐃΔⲆᐃⵠ: "img/book-button-out.png",
    ⵠⲆⵠⲆⵠᐃⵠ: "img/book-button-in.png",
    ΔΔⵠΔⵠⵠⵠ: "img/book-button-click.png",
    ᐃⲆⵠⵠⲆΔⵠ: "img/deadbox-button-out.png",
    ⵠⵠⲆᐃⲆᐃⲆ: "img/deadbox-button-in.png",
    ⵠΔΔᐃⲆⲆΔ: "img/deadbox-button-click.png",
    ⲆⵠᐃΔⲆᐃᐃ: "img/loot-button-out.png",
    ⵠΔⲆⵠⲆᐃⲆ: "img/loot-button-in.png",
    ᐃᐃⲆⲆΔⲆᐃ: "img/loot-button-click.png",
    ⲆΔⵠᐃΔᐃΔ: "img/free-item-out.png",
    ΔᐃⵠⵠⲆⵠⵠ: "img/free-item-in.png",
    ⵠΔⲆΔΔᐃᐃ: "img/free-item-click.png",
    ⵠΔᐃⲆ: "img/wood-item-out.png",
    ᐃΔⵠΔ: "img/wood-item-in.png",
    ᐃⲆⵠⵠ: "img/wood-item-click.png",
    ⵠΔᐃΔΔᐃΔ: "img/stone-item.png",
    ᐃᐃᐃⲆⲆΔⲆ: "img/stone-item-in.png",
    ᐃⲆᐃᐃⵠⵠⲆ: "img/stone-item-click.png",
    ᐃⵠᐃᐃΔⲆⲆ: "img/gold-item.png",
    ΔⲆΔⲆΔΔⵠ: "img/gold-item-in.png",
    ΔⲆΔⵠⲆᐃᐃ: "img/gold-item-click.png",
    ΔᐃΔⵠΔⲆⵠ: "img/diamond-item.png",
    ⵠΔᐃᐃⲆⲆⵠ: "img/diamond-item-in.png",
    ᐃΔΔⵠᐃᐃⵠ: "img/diamond-item-click.png",
    ΔⵠΔⵠⲆⵠⲆ: "img/amethyst-item.png",
    ΔⵠⵠⵠᐃⵠΔ: "img/amethyst-item-in.png",
    ᐃⲆⵠΔᐃΔΔ: "img/amethyst-item-click.png",
    ⵠⵠΔᐃᐃⵠΔ: "img/reidite-item.png",
    ⲆⲆΔΔⲆⲆⵠ: "img/reidite-item-in.png",
    ΔΔⲆⵠΔΔⵠ: "img/reidite-item-click.png",
    ᐃⲆᐃⲆⵠⵠᐃ: "img/special-item-out.png",
    ⵠᐃⲆΔΔⵠΔ: "img/special-item-in.png",
    ⲆⵠΔΔⵠΔⵠ: "img/special-item-click.png",
    ⲆΔΔⵠⲆᐃⲆ: "img/level-item-out.png",
    ᐃⲆⲆΔⲆⵠⲆ: "img/level-item-in.png",
    ᐃⵠⲆⵠᐃᐃⲆ: "img/level-item-click.png",
    ⲆⵠᐃⲆⲆΔΔ: "img/skin-previous-out.png",
    ΔᐃⵠΔΔⲆⲆ: "img/skin-previous-in.png",
    ΔᐃⵠᐃⵠⲆᐃ: "img/skin-previous-click.png",
    ΔΔᐃⲆΔᐃᐃ: "img/skin-next-out.png",
    ᐃΔⵠᐃᐃᐃⲆ: "img/skin-next-in.png",
    ⲆΔⲆᐃᐃⲆⵠ: "img/skin-next-click.png",
    ΔᐃΔⲆΔ: "img/back-button-out.png",
    ᐃᐃᐃⵠᐃ: "img/back-button-in.png",
    ⵠⲆⲆⵠᐃ: "img/back-button-click.png",
    ᐃⲆΔⲆⲆⵠΔ: "img/get-more-button-out.png",
    ⲆⵠΔⲆⵠⵠⵠ: "img/get-more-button-in.png",
    ΔΔⵠⵠⵠᐃⵠ: "img/get-more-button-click.png",
    ᐃⵠᐃᐃⵠⵠᐃ: "img/currency1-out.png",
    ᐃⵠΔⲆⵠᐃⲆ: "img/currency1-in.png",
    ⲆΔΔΔᐃᐃⵠ: "img/currency1-click.png",
    ΔᐃⲆΔⵠⲆⵠ: "img/currency2-out.png",
    ⲆΔᐃᐃⲆⲆⲆ: "img/currency2-in.png",
    ΔᐃⵠᐃⵠⲆΔ: "img/currency2-click.png",
    ΔⲆΔⵠⵠΔΔ: "img/currency3-out.png",
    ⵠⵠⵠⲆΔⲆⵠ: "img/currency3-in.png",
    ᐃⲆΔⲆⵠΔⲆ: "img/currency3-click.png",
    ⲆⲆⵠⵠᐃⲆΔ: "img/currency4-out.png",
    ⲆΔᐃΔⵠⲆⲆ: "img/currency4-in.png",
    ΔᐃⵠᐃⲆΔᐃ: "img/currency4-click.png",
    ΔⲆⲆⵠⲆΔⲆ: "img/currency5-out.png",
    ⵠⵠᐃᐃⵠⲆⵠ: "img/currency5-in.png",
    ⲆⲆᐃⲆⵠⵠΔ: "img/currency5-click.png",
    ΔⲆΔⵠΔⵠΔ: "img/price1-out.png",
    Δᐃⵠⵠᐃⵠⵠ: "img/price1-in.png",
    ⵠᐃΔⵠⵠΔⵠ: "img/price1-click.png",
    ⵠΔⲆᐃᐃⲆⲆ: "img/price2-out.png",
    ⲆΔᐃⲆᐃᐃⲆ: "img/price2-in.png",
    ⲆΔⲆᐃⲆⵠΔ: "img/price2-click.png",
    ᐃⵠΔⵠⲆᐃⲆ: "img/price3-out.png",
    ⲆⲆⵠⲆⵠⵠᐃ: "img/price3-in.png",
    ᐃᐃᐃⵠⵠΔⲆ: "img/price3-click.png",
    ᐃᐃᐃΔΔΔⵠ: "img/price4-out.png",
    ΔΔᐃΔᐃᐃΔ: "img/price4-in.png",
    ⵠⲆΔⲆᐃⲆⵠ: "img/price4-click.png",
    ᐃᐃΔⲆᐃⵠΔ: "img/price5-out.png",
    ᐃᐃⲆᐃᐃΔⲆ: "img/price5-in.png",
    ⲆΔᐃⲆⲆΔᐃ: "img/price5-click.png",
    ᐃⲆⵠᐃⵠⲆΔⵠΔ: "img/buy-private-server-out.png",
    ⵠᐃΔΔⲆᐃΔΔⲆ: "img/buy-private-server-in.png",
    ΔΔᐃⵠⵠΔᐃⵠΔ: "img/buy-private-server-click.png",
    ΔⵠⲆΔΔᐃΔ: "img/atlanta-out.png",
    ⵠᐃⵠΔⲆⲆΔ: "img/atlanta-in.png",
    ⵠⲆΔⲆΔᐃᐃ: "img/atlanta-click.png",
    ⵠⲆⵠΔΔᐃᐃ: "img/dallas-out.png",
    ⵠⲆⲆⵠⲆᐃᐃ: "img/dallas-in.png",
    ΔⵠᐃᐃⵠⵠΔ: "img/dallas-click.png",
    ᐃⲆⲆⵠⵠⵠᐃ: "img/fremont-out.png",
    ⲆΔⵠⲆΔⲆΔ: "img/fremont-in.png",
    ⵠᐃⲆᐃΔⲆᐃ: "img/fremont-click.png",
    ⵠⵠΔΔⲆⲆⵠ: "img/newark-out.png",
    ⵠⲆⲆᐃⵠⲆⲆ: "img/newark-in.png",
    ⲆⲆⵠΔΔⲆᐃ: "img/newark-click.png",
    ⵠⲆⲆᐃᐃΔⲆ: "img/toronto-out.png",
    ΔⲆⲆⵠⵠⲆᐃ: "img/toronto-in.png",
    ⲆⲆΔⲆⲆΔⵠ: "img/toronto-click.png",
    ᐃⲆΔⲆΔΔⵠ: "img/singapore-out.png",
    ⵠᐃⲆΔᐃΔᐃ: "img/singapore-in.png",
    ⵠⵠΔᐃⵠΔⵠ: "img/singapore-click.png",
    ᐃⲆᐃⵠⲆⲆⲆ: "img/frankfurt-out.png",
    ΔⲆⵠⵠⵠᐃᐃ: "img/frankfurt-in.png",
    ᐃⲆⵠⲆⲆΔΔ: "img/frankfurt-click.png",
    ᐃᐃΔᐃᐃᐃΔ: "img/london-out.png",
    ⲆΔᐃᐃⲆᐃⲆ: "img/london-in.png",
    ΔᐃⵠⲆΔΔᐃ: "img/london-click.png",
    ᐃᐃⲆⵠⵠⵠΔ: "img/mumbai-out.png",
    ᐃⲆᐃΔΔⲆⲆ: "img/mumbai-in.png",
    ᐃᐃⵠΔᐃⲆⵠ: "img/mumbai-click.png",
    ⲆΔⲆᐃⲆⵠⲆ: "img/tokyo-out.png",
    ΔⵠᐃⲆⵠⲆⲆ: "img/tokyo-in.png",
    ⲆⲆⵠⵠΔΔΔ: "img/tokyo-click.png",
    ΔΔΔⵠᐃᐃⲆᐃᐃ: "img/yes-location-out.png",
    ΔΔⵠᐃⵠᐃⲆᐃⵠ: "img/yes-location-in.png",
    ᐃⵠⵠⵠⵠΔⲆΔⲆ: "img/yes-location-click.png",
    ᐃⲆᐃⵠⲆᐃΔ: "img/3days-out.png",
    ⲆⲆᐃⲆⲆΔⵠ: "img/3days-in.png",
    ⲆᐃⵠᐃΔΔΔ: "img/3days-click.png",
    ᐃΔⵠⲆⲆΔΔ: "img/7days-out.png",
    ⲆⵠΔΔⵠᐃΔ: "img/7days-in.png",
    ⵠΔΔⲆΔⵠⵠ: "img/7days-click.png",
    ΔᐃⵠᐃᐃᐃⲆ: "img/30days-out.png",
    ⵠΔⲆᐃᐃᐃΔ: "img/30days-in.png",
    ⲆⲆⵠᐃΔⵠⲆ: "img/30days-click.png",
    ⲆΔⵠᐃⲆⲆΔ: "img/90days-out.png",
    ΔΔᐃᐃΔⲆⵠ: "img/90days-in.png",
    ⲆⲆᐃΔΔΔⲆ: "img/90days-click.png",
    ⲆⲆΔⲆⵠᐃᐃ: "img/spin1.png",
    ⲆⵠᐃⵠⲆⲆᐃ: "img/spin2.png",
    ᐃᐃᐃΔⵠⵠⵠ: "img/spin3.png",
    ᐃΔⲆⲆᐃⵠᐃ: "img/spin4.png",
    ΔⲆᐃⵠᐃⵠⲆ: "img/spin5.png",
    ΔᐃΔⵠΔΔⵠ: "img/spin6.png",
    ⲆⵠⲆⲆᐃΔᐃ: "img/arrow-spin.png",
    ⲆΔΔⲆⲆΔⵠ: "img/spin-button-1-out.png",
    ⲆⵠᐃΔΔⵠᐃ: "img/spin-button-1-in.png",
    ΔΔΔⲆⵠᐃᐃ: "img/spin-button-1-click.png",
    ⲆⵠⵠᐃΔᐃⵠ: "img/spin-button-2-out.png",
    ᐃΔΔΔⲆΔⵠ: "img/spin-button-2-in.png",
    ΔⲆᐃᐃⲆⲆⲆ: "img/spin-button-2-click.png",
    ᐃΔⲆᐃᐃⵠⵠ: "img/spin-button-3-out.png",
    ⲆⲆᐃΔⲆΔΔ: "img/spin-button-3-in.png",
    ⵠᐃΔΔⲆΔⵠ: "img/spin-button-3-click.png",
    ⲆⵠⲆⵠᐃⵠⲆ: "img/spin-button-4-out.png",
    ΔᐃᐃⲆⵠᐃⲆ: "img/spin-button-4-in.png",
    ⵠⵠⵠⲆⵠⲆΔ: "img/spin-button-4-click.png",
    ⵠΔΔΔᐃⵠⲆ: "img/spin-button-5-out.png",
    ⲆⲆⵠⲆⲆⵠΔ: "img/spin-button-5-in.png",
    ⵠᐃⲆⲆᐃΔⲆ: "img/spin-button-5-click.png",
    ᐃΔᐃⵠⲆⲆⲆ: "img/spin-light.png",
    ⵠⵠⵠⲆᐃΔᐃ: "img/tuto-wiki-out.png",
    ΔΔΔⵠᐃⵠᐃ: "img/tuto-wiki-in.png",
    ᐃⲆⲆⵠΔᐃⲆ: "img/tuto-wiki-click.png",
    ⵠⵠΔⵠΔᐃⵠ: "img/tuto-previous-out.png",
    ⵠΔΔⵠᐃᐃⵠ: "img/tuto-previous-in.png",
    ᐃᐃΔΔⲆⲆᐃ: "img/tuto-previous-click.png",
    ⲆⵠᐃⵠΔⲆᐃ: "img/tuto-next-out.png",
    ⲆΔⲆΔⵠⲆⵠ: "img/tuto-next-in.png",
    ᐃⵠⲆᐃⲆΔⲆ: "img/tuto-next-click.png",
    ⲆΔΔⲆᐃΔΔ: "img/time-leaderboard-out.png",
    ⲆⲆᐃⲆΔᐃᐃ: "img/time-leaderboard-in.png",
    ΔⵠΔⵠΔⵠΔ: "img/time-leaderboard-click.png",
    ᐃⲆᐃⵠⵠⵠᐃ: "img/score-leaderboard-out.png",
    ⲆᐃΔᐃⲆⲆΔ: "img/score-leaderboard-in.png",
    ⵠⲆᐃᐃⵠΔΔ: "img/score-leaderboard-click.png",
    ΔⵠⲆᐃΔᐃᐃ: "img/lvl-leaderboard-out.png",
    ⵠΔⲆⵠΔⲆⲆ: "img/lvl-leaderboard-in.png",
    ΔⲆᐃⵠΔΔΔ: "img/lvl-leaderboard-click.png",
    Δᐃⵠᐃⵠⵠⵠ: "img/kill-leaderboard-out.png",
    ΔΔⲆᐃⲆᐃᐃ: "img/kill-leaderboard-in.png",
    ᐃⵠⵠᐃᐃⲆΔ: "img/kill-leaderboard-click.png",
    ⵠᐃΔᐃΔᐃᐃ: "img/all-leaderboard-out.png",
    ᐃᐃᐃⲆΔⲆΔ: "img/all-leaderboard-in.png",
    ΔⵠⲆⲆᐃⲆⵠ: "img/all-leaderboard-click.png",
    ⲆᐃΔΔⲆᐃᐃ: "img/today-leaderboard-out.png",
    ΔⵠΔᐃⵠᐃΔ: "img/today-leaderboard-in.png",
    ⵠⲆᐃᐃⵠᐃᐃ: "img/today-leaderboard-click.png",
    ⵠⵠⵠⵠⲆⵠΔ: "img/week-leaderboard-out.png",
    ⲆᐃᐃᐃⲆⲆᐃ: "img/week-leaderboard-in.png",
    ⲆⲆᐃΔᐃΔΔ: "img/week-leaderboard-click.png",
    ᐃᐃⲆⵠᐃⲆΔ: "img/season1-out.png",
    ⵠᐃΔΔΔᐃⲆ: "img/season1-in.png",
    ΔᐃᐃΔⵠⵠⵠ: "img/season1-click.png",
    ⵠᐃⵠᐃⵠΔⵠ: "img/season2-out.png",
    ᐃᐃΔᐃⲆΔⲆ: "img/season2-in.png",
    ⲆΔᐃᐃⵠⲆᐃ: "img/season2-click.png",
    ΔⲆᐃⵠⵠΔⲆ: "img/season3-out.png",
    ᐃᐃⲆΔᐃⵠⵠ: "img/season3-in.png",
    ⲆᐃⲆΔⲆⵠⲆ: "img/season3-click.png",
    ᐃⵠⵠΔΔⵠⵠ: "img/season4-out.png",
    ᐃᐃⵠⵠⲆᐃⵠ: "img/season4-in.png",
    ⲆᐃⵠΔⵠⵠⵠ: "img/season4-click.png",
    ᐃΔⲆΔΔᐃⲆ: "img/season5-out.png",
    ΔΔΔⵠᐃΔᐃ: "img/season5-in.png",
    ⲆⵠᐃᐃⵠΔᐃ: "img/season5-click.png",
    ΔⲆⵠⲆᐃΔΔ: "img/season6-out.png",
    ΔⵠⲆᐃᐃⵠⲆ: "img/season6-in.png",
    ᐃΔⲆⲆΔⲆⵠ: "img/season6-click.png",
    ⵠⲆΔⲆⵠⲆΔ: "img/total-lead-out.png",
    ᐃⲆᐃᐃⵠⵠⵠ: "img/total-lead-in.png",
    ΔⲆᐃⵠΔᐃⵠ: "img/total-lead-click.png",
    ᐃΔΔᐃΔᐃⲆ: "img/normal-lead-out.png",
    ⲆᐃⵠⵠΔⵠⲆ: "img/normal-lead-in.png",
    ΔᐃᐃΔΔᐃⲆ: "img/normal-lead-click.png",
    ⵠᐃᐃΔΔᐃⵠ: "img/forest-lead-out.png",
    ⲆΔΔΔⲆΔΔ: "img/forest-lead-in.png",
    ⵠⵠᐃΔᐃⵠⲆ: "img/forest-lead-click.png",
    ⵠⵠⵠΔⲆⵠᐃ: "img/vampire-lead-out.png",
    ⲆⵠΔΔᐃⲆⵠ: "img/vampire-lead-in.png",
    ᐃⵠⲆⵠⵠΔⲆ: "img/vampire-lead-click.png",
    ⵠΔⲆⲆΔⲆᐃ: "img/zombie-lead-out.png",
    ΔⵠⲆⲆⲆΔᐃ: "img/zombie-lead-in.png",
    ᐃⲆⲆⵠⲆΔⲆ: "img/zombie-lead-click.png",
    ᐃΔΔⵠⲆᐃᐃ: "img/day-level5.png",
    ⵠⵠⲆᐃᐃΔⵠ: "img/night-level5.png",
    ⵠΔⵠⵠⲆⲆⵠ: "img/day-level10.png",
    ΔⲆΔⵠΔⵠⲆ: "img/night-level10.png",
    ⵠⲆΔⵠⵠⵠΔ: "img/day-level15.png",
    ᐃΔΔⵠΔᐃΔ: "img/night-level15.png",
    ⲆⵠⵠⲆΔⲆᐃ: "img/day-level20.png",
    ⲆΔΔᐃⵠΔⵠ: "img/night-level20.png",
    ⵠΔⵠⵠᐃⵠΔ: "img/day-level25.png",
    ⵠⲆᐃᐃᐃⵠᐃ: "img/night-level25.png",
    ⲆⵠⲆᐃᐃᐃΔ: "img/day-level30.png",
    ΔΔⵠΔⵠΔⲆ: "img/night-level30.png",
    ᐃⵠⵠⵠΔΔⲆ: "img/day-level35.png",
    ⵠⵠⲆᐃⵠΔΔ: "img/night-level35.png",
    ᐃⲆΔⵠⲆΔΔ: "img/day-level40.png",
    ⲆⵠΔΔᐃΔⵠ: "img/night-level40.png",
    ⵠⲆᐃΔᐃⲆⲆ: "img/day-level45.png",
    ⲆⲆⵠⲆΔⲆᐃ: "img/night-level45.png",
    ΔᐃᐃΔΔⲆⲆ: "img/day-level50.png",
    ⲆⵠⵠⵠⲆⲆⵠ: "img/night-level50.png",
    ⲆⵠᐃΔⵠⵠⲆ: "img/day-level55.png",
    ᐃᐃΔᐃᐃⲆⵠ: "img/night-level55.png",
    ᐃᐃⲆΔᐃⲆΔ: "img/day-level60.png",
    ⵠΔᐃⵠΔⲆⵠ: "img/night-level60.png",
    ΔⵠΔΔᐃⵠⲆ: "img/day-skin-devast0.png",
    ΔⵠⵠⵠΔΔᐃ: "img/night-skin-devast0.png",
    ΔⵠⵠⵠⲆⵠᐃ: "img/day-hand-devaster.png",
    ⵠⵠⵠⵠΔⵠΔ: "img/night-hand-devaster.png",
    ⵠⵠⲆΔᐃⲆⲆ: "img/day-skin-star0.png",
    ⲆΔⵠⲆΔⲆⲆ: "img/night-skin-star0.png",
    ΔΔᐃⲆⲆⵠΔ: "img/day-hand-star0.png",
    ᐃⵠⲆΔⵠⲆΔ: "img/night-hand-star0.png",
    ⵠΔΔᐃᐃᐃᐃ: "img/day-vampire.png",
    ⲆⲆⲆᐃⵠⲆⲆ: "img/night-vampire.png",
    ᐃᐃⵠᐃⵠᐃΔ: "img/day-hand-vampire.png",
    ΔΔΔΔᐃⲆᐃ: "img/night-hand-vampire.png",
    ⲆⲆᐃᐃⲆΔⲆ: "img/day-zombie.png",
    ⵠᐃᐃⲆᐃⵠΔ: "img/night-zombie.png",
    ᐃᐃᐃⵠⵠⵠⵠ: "img/day-hand-zombie.png",
    ⵠᐃΔᐃⵠΔΔ: "img/night-hand-zombie.png",
    ⲆⲆⲆⵠⵠᐃΔ: "img/day-skin113.png",
    ⵠⲆⵠΔᐃΔᐃ: "img/night-skin113.png",
    ΔⲆⵠᐃΔΔⲆ: "img/day-hand-skin113.png",
    ⲆᐃⵠⵠᐃⲆᐃ: "img/night-hand-skin113.png",
    ᐃⵠΔΔᐃᐃΔ: "img/day-skin0.png",
    ⲆᐃⲆΔᐃⲆᐃ: "img/night-skin0.png",
    ⵠⵠⲆΔᐃΔⲆ: "img/day-skin1.png",
    ⵠⵠⵠᐃΔⲆᐃ: "img/night-skin1.png",
    ᐃΔᐃᐃⵠⲆⲆ: "img/day-skin2.png",
    ᐃⵠⵠΔΔⲆⲆ: "img/night-skin2.png",
    ⵠⵠⲆᐃⲆⲆᐃ: "img/day-skin3.png",
    ⵠᐃⲆᐃⲆᐃΔ: "img/night-skin3.png",
    ᐃⲆΔΔⲆⵠᐃ: "img/day-skin4.png",
    ΔᐃΔⵠⵠⵠΔ: "img/night-skin4.png",
    ⲆᐃⵠᐃⲆⲆⲆ: "img/day-skin5.png",
    ⲆᐃΔΔⲆᐃⲆ: "img/night-skin5.png",
    ΔⵠᐃⵠΔⲆⲆ: "img/day-skin6.png",
    ΔⲆΔⵠⲆΔΔ: "img/night-skin6.png",
    ᐃΔⲆⲆᐃⵠⵠ: "img/day-skin7.png",
    ⵠᐃΔΔⲆΔᐃ: "img/night-skin7.png",
    ⵠⲆⵠⵠⵠΔⲆ: "img/day-skin8.png",
    ⲆⵠᐃΔᐃⵠⲆ: "img/night-skin8.png",
    ΔΔᐃᐃᐃᐃᐃ: "img/day-skin9.png",
    ΔⵠⲆⵠⲆΔⲆ: "img/night-skin9.png",
    ΔⲆⵠⲆΔᐃⵠ: "img/day-skin10.png",
    ᐃΔⲆᐃΔᐃⲆ: "img/night-skin10.png",
    ⵠΔⵠᐃⲆΔⲆ: "img/day-skin11.png",
    ΔΔΔᐃΔⲆⵠ: "img/night-skin11.png",
    ⵠᐃΔΔᐃⵠⵠ: "img/day-skin12.png",
    ⵠⵠᐃⵠΔΔᐃ: "img/night-skin12.png",
    ⵠΔΔⲆⲆⵠᐃ: "img/day-skin13.png",
    ⵠΔᐃⲆⵠⲆⵠ: "img/night-skin13.png",
    ⲆΔⵠᐃᐃⲆΔ: "img/day-skin14.png",
    ΔⲆΔΔⵠⵠⵠ: "img/night-skin14.png",
    ΔΔΔⲆⵠⲆⲆ: "img/day-skin15.png",
    ᐃΔⲆⲆⵠᐃⲆ: "img/night-skin15.png",
    ᐃⲆⲆⵠΔⵠΔ: "img/day-skin16.png",
    ᐃⵠΔⵠΔᐃⲆ: "img/night-skin16.png",
    ⵠΔⲆⲆᐃᐃⵠ: "img/day-skin17.png",
    ⲆⵠⲆᐃΔᐃΔ: "img/night-skin17.png",
    ΔΔⵠⵠᐃᐃΔ: "img/day-skin18.png",
    ⵠⵠⲆᐃⵠⲆⲆ: "img/night-skin18.png",
    ⲆⵠⵠⵠⲆⵠⲆ: "img/day-skin19.png",
    ΔⲆᐃⲆΔⵠⲆ: "img/night-skin19.png",
    ᐃᐃⵠᐃᐃⵠᐃ: "img/day-skin20.png",
    ⲆᐃᐃΔⲆⵠᐃ: "img/night-skin20.png",
    ⲆⲆⲆⵠᐃΔΔ: "img/day-skin21.png",
    ΔⵠⲆᐃΔⲆΔ: "img/night-skin21.png",
    ⵠᐃⵠᐃᐃᐃΔ: "img/day-skin22.png",
    ⲆΔΔᐃᐃᐃΔ: "img/night-skin22.png",
    ⵠΔⲆΔⲆⲆⵠ: "img/day-skin23.png",
    ⵠⵠΔᐃⵠⵠᐃ: "img/night-skin23.png",
    ΔᐃΔⲆᐃΔΔ: "img/day-skin24.png",
    ΔⵠⲆΔⵠⲆⵠ: "img/night-skin24.png",
    ᐃⵠⲆⵠⲆⵠⵠ: "img/day-skin25.png",
    ⲆᐃⲆⵠΔⵠΔ: "img/night-skin25.png",
    ΔΔⵠⲆⲆⲆⵠ: "img/day-skin26.png",
    ᐃΔᐃᐃⲆᐃⲆ: "img/night-skin26.png",
    ΔΔⵠΔᐃⲆⲆ: "img/day-skin27.png",
    ᐃΔᐃⲆᐃⵠΔ: "img/night-skin27.png",
    ⵠᐃΔⵠΔΔΔ: "img/day-skin28.png",
    ΔᐃΔⲆΔⵠⲆ: "img/night-skin28.png",
    ⵠΔΔᐃΔⵠᐃ: "img/day-skin29.png",
    ΔΔⲆⲆⲆⲆⵠ: "img/night-skin29.png",
    ᐃΔᐃⵠⵠᐃⵠ: "img/day-skin30.png",
    ΔⲆΔⵠᐃⲆᐃ: "img/night-skin30.png",
    ⲆⲆⵠⵠΔΔᐃ: "img/day-skin31.png",
    ᐃΔⵠⲆⵠⲆΔ: "img/night-skin31.png",
    ᐃⵠᐃᐃᐃⵠᐃ: "img/day-skin32.png",
    ⲆⲆⵠⲆᐃⵠᐃ: "img/night-skin32.png",
    ⵠⵠᐃᐃⵠⵠⲆ: "img/day-skin33.png",
    ΔᐃΔⲆΔΔⵠ: "img/night-skin33.png",
    ⵠⵠⲆⵠⵠⲆⵠ: "img/day-skin34.png",
    ΔⵠⲆΔⲆⲆᐃ: "img/night-skin34.png",
    ⵠΔⵠⲆΔΔⲆ: "img/day-skin35.png",
    ⲆⵠⵠⵠⲆⵠᐃ: "img/night-skin35.png",
    ⵠⵠΔⵠⲆⵠⲆ: "img/day-skin36.png",
    ΔᐃⲆΔᐃᐃⵠ: "img/night-skin36.png",
    ᐃⲆⲆⵠᐃⵠⵠ: "img/day-skin37.png",
    ⵠⲆⲆΔΔⲆᐃ: "img/night-skin37.png",
    ΔⵠⵠⵠⲆᐃᐃ: "img/day-skin38.png",
    ΔⵠⲆᐃΔᐃΔ: "img/night-skin38.png",
    ⲆΔⲆⵠᐃΔᐃ: "img/day-skin39.png",
    ΔΔΔΔⲆⵠΔ: "img/night-skin39.png",
    ΔᐃⲆⲆⲆⲆᐃ: "img/day-skin40.png",
    ⵠᐃΔᐃᐃⲆⵠ: "img/night-skin40.png",
    ΔⲆⲆⵠᐃⵠᐃ: "img/day-skin41.png",
    ⵠΔⵠᐃᐃⵠⵠ: "img/night-skin41.png",
    ᐃⲆᐃᐃᐃΔⵠ: "img/day-skin42.png",
    ΔᐃⲆᐃᐃⲆΔ: "img/night-skin42.png",
    ΔΔⲆⲆⵠΔⵠ: "img/day-skin43.png",
    ⵠⵠⵠᐃᐃΔΔ: "img/night-skin43.png",
    ᐃᐃᐃⲆⵠΔᐃ: "img/day-skin44.png",
    ᐃᐃᐃΔⲆⲆΔ: "img/night-skin44.png",
    ⲆΔΔⲆᐃⵠⵠ: "img/day-skin45.png",
    ᐃⲆⵠΔⲆⵠⲆ: "img/night-skin45.png",
    ⲆᐃΔⵠⵠⲆⵠ: "img/day-skin46.png",
    ⵠⵠΔᐃⵠᐃΔ: "img/night-skin46.png",
    ᐃΔⵠⵠⵠᐃΔ: "img/day-skin47.png",
    ⵠΔᐃⲆΔᐃᐃ: "img/night-skin47.png",
    ⲆⲆⲆᐃΔΔᐃ: "img/day-skin48.png",
    ⲆΔⲆᐃᐃᐃⲆ: "img/night-skin48.png",
    ΔⲆᐃⵠΔⲆⵠ: "img/day-skin49.png",
    ⲆⲆΔᐃⵠᐃⲆ: "img/night-skin49.png",
    ⵠᐃᐃΔᐃⲆⲆ: "img/day-skin50.png",
    ΔⲆᐃⵠⲆⵠᐃ: "img/night-skin50.png",
    ΔⲆⲆⲆΔⲆΔ: "img/day-skin51.png",
    ⵠᐃⲆᐃⵠΔⲆ: "img/night-skin51.png",
    ⲆΔⲆⲆΔΔᐃ: "img/day-skin52.png",
    ᐃΔΔⲆⵠΔΔ: "img/night-skin52.png",
    ΔᐃⵠⲆᐃᐃⵠ: "img/day-skin53.png",
    ⲆⵠᐃⵠⲆⵠⲆ: "img/night-skin53.png",
    ⵠΔⲆᐃⲆΔΔ: "img/day-skin54.png",
    ΔΔⲆΔⵠΔΔ: "img/night-skin54.png",
    ⵠⲆⲆᐃⲆⵠΔ: "img/day-skin55.png",
    ⲆᐃⵠᐃΔΔⵠ: "img/night-skin55.png",
    ⵠᐃᐃᐃᐃⲆⲆ: "img/day-skin56.png",
    ⲆⵠᐃᐃⵠᐃΔ: "img/night-skin56.png",
    ⲆⲆⲆΔⲆᐃᐃ: "img/day-skin57.png",
    ⲆⲆⵠⵠᐃᐃⲆ: "img/night-skin57.png",
    ᐃⲆΔⵠΔⵠⵠ: "img/day-skin58.png",
    ⲆⲆⲆⲆΔᐃⲆ: "img/night-skin58.png",
    ΔΔᐃⲆᐃᐃⵠ: "img/day-skin59.png",
    ΔⵠᐃᐃΔΔᐃ: "img/night-skin59.png",
    ⵠᐃΔⲆΔΔᐃ: "img/day-skin60.png",
    ᐃΔᐃⲆᐃⵠᐃ: "img/night-skin60.png",
    ΔΔᐃⲆᐃΔᐃ: "img/day-skin61.png",
    ΔᐃΔᐃᐃΔΔ: "img/night-skin61.png",
    ⲆⵠᐃΔΔᐃᐃ: "img/day-skin62.png",
    ΔᐃᐃᐃⵠⲆⲆ: "img/night-skin62.png",
    ⵠΔⲆᐃⲆᐃⲆ: "img/day-skin63.png",
    ⵠΔⲆΔⲆΔⲆ: "img/night-skin63.png",
    ⲆⵠᐃⵠⲆΔⵠ: "img/day-skin64.png",
    ΔⲆᐃⲆⵠⵠΔ: "img/night-skin64.png",
    ᐃᐃⲆⵠⲆⵠⵠ: "img/day-skin65.png",
    ΔⲆᐃⵠΔⵠⵠ: "img/night-skin65.png",
    ΔᐃΔⵠⵠⵠⵠ: "img/day-skin66.png",
    ⲆⲆⵠΔⵠᐃⵠ: "img/night-skin66.png",
    ᐃᐃⲆΔΔⲆΔ: "img/day-skin67.png",
    ΔΔΔⵠⵠⲆΔ: "img/night-skin67.png",
    ᐃⲆᐃᐃᐃⵠⵠ: "img/day-skin68.png",
    ΔⵠΔᐃⲆᐃΔ: "img/night-skin68.png",
    ⵠᐃⵠⵠⲆᐃᐃ: "img/day-skin69.png",
    ᐃΔΔⲆⵠⲆΔ: "img/night-skin69.png",
    ᐃΔΔⲆᐃᐃⲆ: "img/day-skin70.png",
    ⲆⲆᐃⲆⲆⲆⵠ: "img/night-skin70.png",
    ⵠΔⵠᐃⲆᐃᐃ: "img/day-skin71.png",
    ⵠᐃⵠⵠΔⲆⲆ: "img/night-skin71.png",
    ΔⲆⲆᐃΔⵠᐃ: "img/day-skin72.png",
    ⵠⲆᐃΔⲆΔᐃ: "img/night-skin72.png",
    ΔᐃΔⵠⲆΔⲆ: "img/day-skin73.png",
    ⵠⵠΔⲆⲆⲆΔ: "img/night-skin73.png",
    ᐃᐃΔᐃⲆⵠᐃ: "img/day-skin74.png",
    ΔᐃⵠΔⲆΔⲆ: "img/night-skin74.png",
    ᐃᐃⲆⲆᐃⵠⲆ: "img/day-skin75.png",
    ᐃᐃᐃΔΔⵠᐃ: "img/night-skin75.png",
    ΔΔⵠᐃΔⲆΔ: "img/day-skin76.png",
    ⵠⲆⲆᐃΔᐃⵠ: "img/night-skin76.png",
    ΔⵠᐃⲆⲆⵠᐃ: "img/day-skin77.png",
    ΔⲆⲆΔΔⵠⵠ: "img/night-skin77.png",
    ΔⵠⵠⵠᐃⲆⵠ: "img/day-skin78.png",
    ⵠᐃⲆⵠⵠΔⲆ: "img/night-skin78.png",
    ΔⲆⲆⵠᐃΔΔ: "img/day-skin79.png",
    ⵠⲆⲆⲆΔⲆΔ: "img/night-skin79.png",
    ⵠⵠᐃⵠΔᐃᐃ: "img/day-skin80.png",
    ⵠᐃⲆᐃΔᐃⵠ: "img/night-skin80.png",
    ⵠⵠⵠΔⵠᐃΔ: "img/day-skin81.png",
    ᐃⲆⵠⵠⵠⵠⲆ: "img/night-skin81.png",
    ⵠᐃᐃΔⵠⲆΔ: "img/day-skin82.png",
    ΔΔᐃΔᐃᐃᐃ: "img/night-skin82.png",
    ⲆΔΔΔᐃΔᐃ: "img/day-skin83.png",
    ⵠⵠⲆⲆᐃⲆⲆ: "img/night-skin83.png",
    ᐃⲆⵠⲆΔᐃᐃ: "img/day-skin84.png",
    ⲆⲆᐃΔⲆⲆⵠ: "img/night-skin84.png",
    ΔΔⲆⲆᐃΔᐃ: "img/day-skin85.png",
    ᐃⵠᐃΔⵠⲆᐃ: "img/night-skin85.png",
    ⵠᐃⲆⵠⵠΔᐃ: "img/day-skin86.png",
    ΔⲆⵠᐃᐃⲆᐃ: "img/night-skin86.png",
    ΔᐃΔⵠⲆᐃΔ: "img/day-skin87.png",
    ⲆΔⵠⵠΔⲆⵠ: "img/night-skin87.png",
    ⲆⵠⵠⲆΔⲆΔ: "img/day-skin88.png",
    ⵠⲆⵠⵠⲆΔⲆ: "img/night-skin88.png",
    ⲆΔⲆⲆⵠᐃⲆ: "img/day-skin89.png",
    ΔᐃⲆᐃⵠΔⲆ: "img/night-skin89.png",
    ᐃᐃᐃⲆⵠᐃᐃ: "img/day-skin90.png",
    ⵠᐃⲆⵠⲆⲆᐃ: "img/night-skin90.png",
    ⲆᐃⵠⲆᐃΔᐃ: "img/day-skin91.png",
    ⲆΔᐃⲆΔⲆⲆ: "img/night-skin91.png",
    ᐃᐃᐃⵠⵠⵠᐃ: "img/day-skin92.png",
    ΔⵠⲆⵠⲆⵠⲆ: "img/night-skin92.png",
    ᐃⲆΔΔⵠⵠΔ: "img/day-skin93.png",
    ΔⲆΔΔⵠⵠΔ: "img/night-skin93.png",
    ⲆⲆⵠᐃᐃΔⵠ: "img/day-skin94.png",
    ⵠⵠᐃΔᐃΔΔ: "img/night-skin94.png",
    ⵠΔⲆⲆΔⲆⲆ: "img/day-skin95.png",
    ⲆⵠⲆΔⲆⵠⲆ: "img/night-skin95.png",
    ΔⲆⵠⵠᐃⵠΔ: "img/day-skin96.png",
    ⵠΔⲆⵠᐃᐃΔ: "img/night-skin96.png",
    ⲆΔΔΔᐃⵠᐃ: "img/day-skin97.png",
    ΔᐃΔⵠΔΔᐃ: "img/night-skin97.png",
    ⵠΔⵠᐃᐃᐃᐃ: "img/day-skin98.png",
    ⵠⵠΔⲆΔⵠⵠ: "img/night-skin98.png",
    ᐃΔⵠⲆΔⲆᐃ: "img/day-skin99.png",
    ᐃΔΔᐃΔⵠⵠ: "img/night-skin99.png",
    ΔⲆⲆⲆᐃⲆⵠ: "img/day-skin100.png",
    ΔⵠⵠΔⲆⲆⵠ: "img/night-skin100.png",
    ⵠⵠᐃΔᐃΔᐃ: "img/day-skin101.png",
    ᐃⲆᐃⵠΔⵠⲆ: "img/night-skin101.png",
    ᐃⵠⲆⵠⵠΔᐃ: "img/day-skin102.png",
    ΔᐃΔⲆⵠⲆⲆ: "img/night-skin102.png",
    ᐃᐃΔⵠᐃⲆⵠ: "img/day-skin103.png",
    ᐃⲆⵠⵠᐃⵠⲆ: "img/night-skin103.png",
    ⲆΔⲆⵠⲆⵠⵠ: "img/day-skin104.png",
    ⵠⲆⲆΔⵠΔΔ: "img/night-skin104.png",
    ΔΔⲆΔⲆΔᐃ: "img/day-skin105.png",
    ᐃΔⵠⲆⲆᐃⲆ: "img/night-skin105.png",
    ⲆᐃΔΔᐃⵠⵠ: "img/day-skin106.png",
    ᐃΔΔⲆⲆᐃⵠ: "img/night-skin106.png",
    ΔⲆΔⵠΔⲆⵠ: "img/day-skin107.png",
    ΔⲆΔΔⲆⵠΔ: "img/night-skin107.png",
    ΔⲆΔΔⲆⲆⲆ: "img/day-skin108.png",
    ⵠΔᐃΔⲆΔΔ: "img/night-skin108.png",
    ⵠΔᐃⲆⲆⵠΔ: "img/day-skin109.png",
    ᐃᐃⲆᐃᐃᐃⲆ: "img/night-skin109.png",
    ⵠⲆΔΔⲆⲆⵠ: "img/day-skin110.png",
    ⲆΔⵠΔⵠᐃᐃ: "img/night-skin110.png",
    ΔᐃⵠⲆᐃⲆᐃ: "img/day-skin111.png",
    ᐃᐃⵠⲆⲆⵠᐃ: "img/night-skin111.png",
    ⲆΔᐃⲆⲆⲆⵠ: "img/day-skin112.png",
    ⵠⵠᐃᐃᐃΔⲆ: "img/night-skin112.png",
    ᐃⵠⲆⲆΔⲆᐃΔΔ: "img/day-skin113.png",
    ⲆᐃⵠᐃΔⲆⲆΔΔ: "img/night-skin113.png",
    ΔⲆᐃΔⲆⵠⵠ: "img/day-skin114.png",
    ⲆᐃΔᐃΔⲆⲆ: "img/night-skin114.png",
    ⵠᐃΔⵠⵠⲆⵠ: "img/day-skin115.png",
    ⵠⵠᐃⵠΔᐃⵠ: "img/night-skin115.png",
    ⵠᐃᐃΔⵠΔⵠ: "img/day-skin116.png",
    ⲆΔΔΔᐃⵠⲆ: "img/night-skin116.png",
    ᐃⵠⵠΔⲆΔⵠ: "img/day-skin117.png",
    ⲆᐃⲆᐃⲆⵠΔ: "img/night-skin117.png",
    ΔⲆᐃⵠΔᐃΔ: "img/day-skin118.png",
    ᐃΔⲆⵠΔⲆᐃ: "img/night-skin118.png",
    ΔⵠⵠᐃᐃⲆΔ: "img/day-skin119.png",
    ΔΔⲆᐃⲆⵠΔ: "img/night-skin119.png",
    ᐃⵠⵠΔᐃⲆᐃ: "img/day-skin120.png",
    ⵠᐃⲆⵠⲆΔⲆ: "img/night-skin120.png",
    ⲆᐃᐃⵠⲆᐃΔ: "img/day-skin121.png",
    ᐃⵠᐃⲆΔᐃᐃ: "img/night-skin121.png",
    ⵠⵠⲆᐃⵠΔᐃ: "img/day-skin122.png",
    ᐃⵠᐃΔⲆⲆⲆ: "img/night-skin122.png",
    ⲆᐃⲆΔⵠⲆᐃ: "img/day-skin123.png",
    ⵠΔⲆᐃⵠΔΔ: "img/night-skin123.png",
    ᐃΔⵠΔⲆⲆⵠ: "img/day-skin124.png",
    ᐃᐃᐃᐃᐃΔΔ: "img/night-skin124.png",
    ⲆⲆΔⵠⵠⲆΔ: "img/day-skin125.png",
    ᐃᐃΔΔⵠᐃᐃ: "img/night-skin125.png",
    ᐃⲆⲆΔⲆⲆΔ: "img/day-skin126.png",
    ᐃΔΔⲆᐃᐃΔ: "img/night-skin126.png",
    ⵠΔᐃᐃⲆⲆΔ: "img/day-skin127.png",
    ⲆᐃᐃΔΔΔᐃ: "img/night-skin127.png",
    ΔΔᐃᐃΔΔⵠ: "img/day-skin128.png",
    ⲆᐃⲆΔΔᐃⲆ: "img/night-skin128.png",
    ⲆⵠⵠΔⵠΔᐃ: "img/day-skin129.png",
    ⵠⵠⲆⵠⵠΔⲆ: "img/night-skin129.png",
    ᐃᐃᐃᐃᐃᐃⵠ: "img/day-skin130-1.png",
    ⵠⵠⲆΔⲆᐃΔ: "img/night-skin130-1.png",
    ⲆᐃⵠⵠᐃΔⵠ: "img/day-skin131.png",
    ᐃⲆⵠⲆΔΔⲆ: "img/night-skin131.png",
    ⲆⵠⵠᐃⵠⵠⲆ: "img/day-skin132.png",
    ᐃⵠⵠᐃΔⲆⵠ: "img/night-skin132.png",
    ᐃⵠᐃΔΔⲆΔ: "img/day-skin133.png",
    ⲆⲆⲆⵠΔΔⵠ: "img/night-skin133.png",
    ΔΔⲆⵠΔⵠΔ: "img/day-skin134.png",
    ⲆᐃᐃⲆΔⲆⲆ: "img/night-skin134.png",
    ᐃⲆⲆΔΔΔᐃ: "img/day-skin135.png",
    ᐃΔᐃΔΔⲆΔ: "img/night-skin135.png",
    ΔⲆᐃⲆⲆⲆⵠ: "img/day-skin136.png",
    ΔⵠΔᐃⲆⲆΔ: "img/night-skin136.png",
    ⵠΔΔΔᐃᐃⵠ: "img/day-skin137.png",
    ΔⲆΔΔΔΔⲆ: "img/night-skin137.png",
    ᐃⲆⵠⵠΔᐃΔ: "img/day-skin138.png",
    ΔᐃⵠᐃΔᐃΔ: "img/night-skin138.png",
    Ⲇᐃⵠᐃⵠᐃⵠ: "img/day-skin139.png",
    ᐃΔⵠΔᐃⲆᐃ: "img/night-skin139.png",
    ⵠⵠⵠⲆΔⵠᐃ: "img/day-skin140.png",
    ⵠⵠΔⲆΔⲆⵠ: "img/night-skin140.png",
    ᐃⲆᐃΔⲆᐃⲆ: "img/day-skin141.png",
    ⲆΔΔⵠⵠΔᐃ: "img/night-skin141.png",
    ᐃᐃⲆⲆⵠⲆⵠ: "img/day-skin142.png",
    ⲆΔⵠⵠⵠⵠⵠ: "img/night-skin142.png",
    ᐃᐃⲆⲆΔΔΔ: "img/day-skin143.png",
    ⲆΔⵠⵠΔᐃᐃ: "img/night-skin143.png",
    ⲆᐃⲆⵠΔΔᐃ: "img/day-skin144.png",
    ⵠΔΔᐃΔⵠⵠ: "img/night-skin144.png",
    ᐃΔΔⲆΔΔΔ: "img/day-skin145.png",
    ⲆⵠᐃⲆᐃⵠᐃ: "img/night-skin145.png",
    ⵠᐃⵠᐃⵠΔᐃ: "img/day-skin146.png",
    ⵠⲆⲆᐃΔⲆᐃ: "img/night-skin146.png",
    ᐃᐃᐃΔⲆᐃᐃ: "img/day-skin147.png",
    ΔΔᐃᐃⲆⲆⵠ: "img/night-skin147.png",
    ⲆΔⲆⵠᐃⵠⵠ: "img/day-skin148.png",
    ᐃⵠⵠᐃⵠᐃᐃ: "img/night-skin148.png",
    ΔΔᐃⲆΔΔⲆ: "img/day-skin149.png",
    ⲆⵠⵠⵠᐃᐃⲆ: "img/night-skin149.png",
    ⲆᐃⲆᐃΔⵠⵠ: "img/day-skin150.png",
    ΔΔᐃⲆⲆΔⵠ: "img/night-skin150.png",
    ᐃᐃΔⲆΔᐃⲆ: "img/day-hand-skin0.png",
    Ⲇᐃⵠⵠⵠⵠᐃ: "img/night-hand-skin0.png",
    ⵠⵠⲆᐃᐃⲆⵠ: "img/day-hand-skin1.png",
    ΔᐃⵠⵠⵠΔΔ: "img/night-hand-skin1.png",
    ⵠᐃⵠΔⵠᐃⵠ: "img/day-hand-skin2.png",
    ᐃᐃᐃⲆⵠᐃⲆ: "img/night-hand-skin2.png",
    ᐃⵠΔⵠᐃᐃΔ: "img/day-hand-skin3.png",
    ⲆᐃⵠⵠᐃΔᐃ: "img/night-hand-skin3.png",
    ᐃⲆⵠⵠⲆΔᐃ: "img/day-hand-skin4.png",
    ⲆᐃᐃⲆⲆⲆⲆ: "img/night-hand-skin4.png",
    ΔΔΔⵠᐃⲆⵠ: "img/day-hand-skin5.png",
    ⲆΔⲆⵠⵠᐃΔ: "img/night-hand-skin5.png",
    ᐃⵠⲆᐃᐃΔΔ: "img/day-hand-skin6.png",
    ΔᐃⲆΔΔⲆᐃΔᐃ: "img/night-hand-skin6.png",
    ᐃⵠΔⵠᐃΔⲆ: "img/day-hand-skin6.png",
    ᐃΔᐃⵠᐃᐃᐃ: "img/night-hand-skin6.png",
    ⲆᐃΔⵠΔⲆΔ: "img/day-hand-skin8.png",
    ⵠᐃⵠⵠΔΔΔ: "img/night-hand-skin8.png",
    ᐃⵠᐃΔΔᐃΔ: "img/day-hand-skin9.png",
    ⲆⵠⲆⵠΔⲆⲆ: "img/night-hand-skin9.png",
    ᐃᐃΔⵠⵠΔΔ: "img/day-hand-skin10.png",
    ΔᐃᐃⵠⲆΔᐃ: "img/night-hand-skin10.png",
    ᐃⲆⲆⲆⲆΔⲆ: "img/day-hand-skin11.png",
    ⵠᐃⲆᐃᐃⵠⵠ: "img/night-hand-skin11.png",
    ΔΔⲆΔΔᐃⲆ: "img/day-hand-skin12.png",
    ⲆⲆⵠᐃᐃⵠⲆ: "img/night-hand-skin12.png",
    ⵠⲆⲆΔⲆᐃΔ: "img/day-hand-skin13.png",
    ⵠⲆΔΔⲆΔΔ: "img/night-hand-skin13.png",
    ᐃⵠΔⵠⲆᐃΔ: "img/day-hand-skin14.png",
    ⲆᐃΔᐃⵠᐃⲆ: "img/night-hand-skin14.png",
    ΔⲆⲆΔⲆⵠᐃ: "img/day-hand-skin15.png",
    ΔⵠⵠΔΔⲆᐃ: "img/night-hand-skin15.png",
    ΔⲆⲆⲆᐃᐃΔ: "img/day-hand-skin16.png",
    ᐃΔⵠΔΔⵠⵠ: "img/night-hand-skin16.png",
    ᐃᐃⵠᐃⲆⵠⲆ: "img/day-hand-skin17.png",
    ⲆΔᐃᐃⵠᐃⵠ: "img/night-hand-skin17.png",
    ⵠΔⲆⵠΔᐃΔ: "img/day-hand-skin18.png",
    ⵠⲆᐃΔΔⲆⵠ: "img/night-hand-skin18.png",
    ⵠΔᐃΔΔⵠⲆ: "img/day-hand-skin19.png",
    ΔΔⵠᐃΔΔⲆ: "img/night-hand-skin19.png",
    ⵠᐃΔⲆᐃⵠᐃ: "img/day-hand-skin20.png",
    ᐃᐃⲆⲆⲆΔᐃ: "img/night-hand-skin20.png",
    ᐃⵠⲆⵠᐃⲆⵠ: "img/day-hand-skin21.png",
    ΔⲆΔⲆᐃⵠⵠ: "img/night-hand-skin21.png",
    ΔⲆΔΔΔᐃⲆ: "img/day-hand-skin22.png",
    ⵠⲆᐃΔΔΔⵠ: "img/night-hand-skin22.png",
    ⲆⲆᐃⵠᐃⲆΔ: "img/day-hand-skin23.png",
    ΔⲆΔⵠᐃΔⵠ: "img/night-hand-skin23.png",
    ΔⲆⵠⲆΔⲆΔ: "img/day-hand-skin24.png",
    ΔΔΔᐃⵠⵠΔ: "img/night-hand-skin24.png",
    ⵠΔᐃⵠᐃΔⵠ: "img/day-hand-skin25.png",
    ΔᐃΔⵠⵠⵠᐃ: "img/night-hand-skin25.png",
    ᐃᐃΔΔⵠΔΔ: "img/day-hand-skin26.png",
    ⵠⲆⵠᐃᐃΔΔ: "img/night-hand-skin26.png",
    ᐃΔΔⵠΔᐃⵠ: "img/day-hand-skin27.png",
    ⵠΔⵠⲆⲆⵠΔ: "img/night-hand-skin27.png",
    ΔⲆΔⵠᐃⵠⵠ: "img/day-hand-skin28.png",
    ⲆⲆᐃⵠⲆⵠⵠ: "img/night-hand-skin28.png",
    Δⵠⵠᐃᐃⵠᐃ: "img/day-hand-skin29.png",
    ᐃᐃⲆⵠⲆⲆⵠ: "img/night-hand-skin29.png",
    ΔⲆⲆᐃⵠᐃΔ: "img/day-hand-skin30.png",
    ΔΔΔᐃⵠⲆΔ: "img/night-hand-skin30.png",
    ⲆⵠᐃⲆΔⲆⲆ: "img/day-hand-skin31.png",
    ᐃⲆⵠΔⲆⵠᐃ: "img/night-hand-skin31.png",
    ⲆΔⵠⵠⵠᐃⲆ: "img/day-hand-skin32.png",
    ΔⵠᐃⲆᐃΔΔ: "img/night-hand-skin32.png",
    ⲆⵠᐃⵠΔⲆⲆ: "img/day-hand-skin33.png",
    ⵠⵠⲆⵠᐃΔΔ: "img/night-hand-skin33.png",
    ⲆⲆⵠᐃᐃᐃΔ: "img/day-hand-skin34.png",
    ᐃΔⲆⵠⵠΔΔ: "img/night-hand-skin34.png",
    ΔᐃⵠᐃⲆᐃⵠ: "img/day-hand-skin35.png",
    ΔΔⵠᐃⵠᐃⵠ: "img/night-hand-skin35.png",
    ⲆⲆΔⲆⵠⲆⲆ: "img/day-hand-skin36.png",
    ⲆⲆΔⲆⵠⵠΔ: "img/night-hand-skin36.png",
    ⲆⲆⲆᐃᐃΔⵠ: "img/day-hand-skin37.png",
    ΔⵠⵠΔΔᐃᐃ: "img/night-hand-skin37.png",
    ⵠᐃⲆⲆⵠⵠⵠ: "img/day-hand-skin38.png",
    ΔᐃⵠⲆⲆΔΔ: "img/night-hand-skin38.png",
    ⲆΔᐃⲆⲆⲆᐃ: "img/day-hand-skin39.png",
    ⲆⲆΔⵠⵠᐃᐃ: "img/night-hand-skin39.png",
    ⵠⵠᐃⵠᐃᐃᐃ: "img/day-hand-skin40.png",
    ⲆᐃᐃΔⲆᐃᐃ: "img/night-hand-skin40.png",
    ⲆⵠⲆᐃⵠⵠᐃ: "img/day-hand-skin41.png",
    ΔⲆⲆᐃΔⲆⵠ: "img/night-hand-skin41.png",
    ⵠᐃⵠⵠᐃΔⲆ: "img/day-hand-skin42.png",
    ᐃⲆΔᐃΔⲆⵠ: "img/night-hand-skin42.png",
    ᐃᐃᐃⵠΔⵠⲆ: "img/day-hand-skin43.png",
    ⵠⵠⲆᐃᐃΔᐃ: "img/night-hand-skin43.png",
    ᐃⲆⲆΔⵠᐃᐃ: "img/day-hand-skin16.png",
    ᐃΔΔⲆⵠᐃⲆ: "img/night-hand-skin16.png",
    ΔⵠⲆⲆᐃᐃᐃ: "img/day-hand-skin45.png",
    ⵠⵠΔⵠⵠΔⵠ: "img/night-hand-skin45.png",
    ⵠΔᐃᐃᐃⵠⲆ: "img/day-hand-skin46.png",
    ⲆⲆᐃⵠⲆⵠᐃ: "img/night-hand-skin46.png",
    ᐃᐃⵠΔⵠⲆⲆ: "img/day-hand-skin47.png",
    ⵠⵠⵠᐃΔΔⲆ: "img/night-hand-skin47.png",
    ΔⵠᐃⵠᐃΔᐃ: "img/day-hand-skin48.png",
    ⵠⲆΔⵠⵠⵠⲆ: "img/night-hand-skin48.png",
    ᐃᐃⵠⲆΔⲆⲆ: "img/day-hand-skin49.png",
    ΔⲆⲆᐃⲆᐃⲆ: "img/night-hand-skin49.png",
    ⵠⵠⲆⵠΔⵠᐃ: "img/day-hand-skin49.png",
    ΔⵠⲆΔⵠᐃᐃ: "img/night-hand-skin49.png",
    ⵠᐃΔᐃᐃΔⲆ: "img/day-hand-skin51.png",
    ⵠⲆⲆᐃᐃᐃΔ: "img/night-hand-skin51.png",
    ᐃᐃⵠⲆⲆⵠⲆ: "img/day-hand-skin52.png",
    ⵠᐃⲆⲆᐃΔᐃ: "img/night-hand-skin52.png",
    ⵠⵠΔᐃΔᐃⲆ: "img/day-hand-skin53.png",
    ΔⵠⵠⵠⲆΔᐃ: "img/night-hand-skin53.png",
    ⵠⲆⵠΔᐃⲆΔ: "img/day-hand-skin53.png",
    ⲆⲆⲆΔⲆΔⵠ: "img/night-hand-skin53.png",
    ⲆⵠᐃᐃⵠᐃⲆ: "img/day-hand-skin55.png",
    ΔⵠⲆⵠⵠΔΔ: "img/night-hand-skin55.png",
    ⵠΔᐃⲆΔⲆᐃ: "img/day-hand-skin56.png",
    ᐃΔΔΔⲆᐃᐃ: "img/night-hand-skin56.png",
    ᐃⲆᐃⵠⵠΔⵠ: "img/day-hand-skin57.png",
    ⵠᐃΔᐃⵠⵠⲆ: "img/night-hand-skin57.png",
    ΔⵠΔΔΔΔⲆ: "img/day-hand-skin58.png",
    ⵠᐃⲆⵠⲆⵠΔ: "img/night-hand-skin58.png",
    ⲆΔⲆΔΔⲆΔ: "img/day-hand-skin59.png",
    ΔᐃⵠΔΔⵠⵠ: "img/night-hand-skin59.png",
    ⵠⲆⵠⵠⵠⲆΔ: "img/day-hand-skin61.png",
    ΔⲆⵠᐃⵠⵠⲆ: "img/night-hand-skin61.png",
    ⵠΔᐃⵠⵠⲆⲆ: "img/day-hand-skin61.png",
    ⵠᐃᐃⵠᐃⵠⲆ: "img/night-hand-skin61.png",
    ᐃⲆΔᐃΔᐃᐃ: "img/day-hand-skin62.png",
    ᐃΔᐃⲆᐃⵠⲆ: "img/night-hand-skin62.png",
    ᐃΔⵠⲆᐃᐃⵠ: "img/day-hand-skin63.png",
    ᐃᐃⵠⲆⲆⵠⵠ: "img/night-hand-skin63.png",
    ⲆⵠᐃΔΔⲆⵠ: "img/day-hand-skin64.png",
    ⲆΔΔⲆᐃⵠΔ: "img/night-hand-skin64.png",
    ΔᐃⲆΔⵠΔⵠ: "img/day-hand-skin65.png",
    ΔΔⲆⵠⵠΔⵠ: "img/night-hand-skin65.png",
    ᐃⵠⵠᐃΔⲆⲆ: "img/day-hand-skin66.png",
    ⲆⵠⲆᐃΔⲆⵠ: "img/night-hand-skin66.png",
    ⵠⵠᐃⲆⲆΔᐃ: "img/day-hand-skin67.png",
    ⵠⲆⵠⵠᐃⵠⵠ: "img/night-hand-skin67.png",
    ⲆᐃΔΔΔⵠᐃ: "img/day-hand-skin68.png",
    ⲆⲆⲆⲆⵠⲆᐃ: "img/night-hand-skin68.png",
    ΔΔᐃⲆⵠᐃⵠ: "img/day-hand-skin69.png",
    ᐃⵠⲆᐃΔⲆⲆ: "img/night-hand-skin69.png",
    ⲆⵠⵠⵠⲆᐃⲆ: "img/day-hand-skin70.png",
    ᐃᐃΔⲆΔᐃⵠ: "img/night-hand-skin70.png",
    ⵠⵠᐃᐃΔⵠⲆ: "img/day-hand-skin71.png",
    ΔΔⲆΔⵠⵠᐃ: "img/night-hand-skin71.png",
    ᐃᐃΔᐃᐃᐃᐃ: "img/day-hand-skin72.png",
    ⲆⲆΔΔᐃΔⵠ: "img/night-hand-skin72.png",
    ΔⲆⵠⲆⲆᐃᐃ: "img/day-hand-skin73.png",
    ΔⵠⵠΔⲆᐃⵠ: "img/night-hand-skin73.png",
    ⲆΔΔⵠΔΔᐃ: "img/day-hand-skin74.png",
    ⵠⵠⲆⲆΔⲆΔ: "img/night-hand-skin74.png",
    ᐃᐃᐃⲆΔⲆⲆ: "img/day-hand-skin75.png",
    ⲆᐃᐃⲆΔᐃⵠ: "img/night-hand-skin75.png",
    ⵠⲆᐃⲆΔⲆΔ: "img/day-hand-skin76.png",
    ᐃᐃⵠⵠΔⵠⵠ: "img/night-hand-skin76.png",
    ᐃⲆⲆΔⵠΔΔ: "img/day-hand-skin77.png",
    ΔᐃⲆⵠⵠⵠⲆ: "img/night-hand-skin77.png",
    ᐃⲆᐃᐃⵠⲆᐃ: "img/day-hand-skin78.png",
    ⲆⲆΔᐃⲆΔᐃ: "img/night-hand-skin78.png",
    ΔⲆⵠΔᐃᐃⵠ: "img/day-hand-skin79.png",
    ΔᐃᐃᐃΔⲆΔ: "img/night-hand-skin79.png",
    ⲆⲆᐃᐃⵠᐃᐃ: "img/day-hand-skin80.png",
    ⲆᐃΔⵠᐃⵠⲆ: "img/night-hand-skin80.png",
    ⵠⲆᐃΔΔⵠΔ: "img/day-hand-skin81.png",
    ⲆᐃΔΔΔⲆΔ: "img/night-hand-skin81.png",
    ⵠᐃⵠⵠⵠᐃΔ: "img/day-hand-skin82.png",
    ΔΔⲆΔΔⲆⵠ: "img/night-hand-skin82.png",
    ⵠΔⵠᐃⲆΔΔ: "img/day-hand-skin83.png",
    ⵠΔΔⵠⵠⵠⲆ: "img/night-hand-skin83.png",
    ΔⲆΔᐃⵠΔⲆ: "img/day-hand-skin84.png",
    ⵠⵠΔᐃΔΔⲆ: "img/night-hand-skin84.png",
    ΔⵠⲆⵠΔⵠᐃ: "img/day-hand-skin85.png",
    ΔⲆᐃⲆᐃΔΔ: "img/night-hand-skin85.png",
    ΔᐃΔⵠⲆᐃᐃ: "img/day-hand-skin86.png",
    ΔΔΔΔⵠⲆΔ: "img/night-hand-skin86.png",
    ᐃⲆΔⵠΔΔᐃ: "img/day-hand-skin87.png",
    ⲆΔⲆⲆⵠⲆⲆ: "img/night-hand-skin87.png",
    ⵠᐃᐃⵠᐃⵠΔ: "img/day-hand-skin88.png",
    ⲆⲆⲆⵠⲆΔⵠ: "img/night-hand-skin88.png",
    ⵠⲆᐃΔⲆᐃΔ: "img/day-hand-skin89.png",
    ⲆⲆΔᐃΔⲆᐃ: "img/night-hand-skin89.png",
    ⵠΔⵠΔΔⵠⵠ: "img/day-hand-skin90.png",
    ⲆΔΔⲆΔⵠⵠ: "img/night-hand-skin90.png",
    ΔⲆⵠⲆⵠⵠᐃ: "img/day-hand-skin91.png",
    ⵠⵠⲆΔⲆⲆⲆ: "img/night-hand-skin91.png",
    ⲆⵠⵠⲆᐃΔⲆ: "img/day-hand-skin92.png",
    ⵠΔⵠᐃᐃᐃΔ: "img/night-hand-skin92.png",
    ᐃΔⲆΔⲆᐃⲆ: "img/day-hand-skin93.png",
    ᐃⲆᐃⵠΔᐃⵠ: "img/night-hand-skin93.png",
    ⲆᐃΔⲆΔⵠᐃ: "img/day-hand-skin94.png",
    ᐃΔᐃⵠⵠⵠᐃ: "img/night-hand-skin94.png",
    ᐃᐃⵠⲆᐃΔⵠ: "img/day-hand-skin95.png",
    ⵠⵠⵠΔⵠⲆᐃ: "img/night-hand-skin95.png",
    ᐃⲆⵠⲆⲆΔⲆ: "img/day-hand-skin96.png",
    ᐃᐃᐃⲆΔΔⵠ: "img/night-hand-skin96.png",
    ⲆᐃⲆΔΔΔΔ: "img/day-hand-skin97.png",
    ⲆᐃΔᐃⲆⵠΔ: "img/night-hand-skin97.png",
    ⲆΔⵠᐃΔΔΔ: "img/day-hand-skin98.png",
    ⲆΔΔΔΔⵠⲆ: "img/night-hand-skin98.png",
    ⲆⲆᐃⵠᐃΔᐃ: "img/day-hand-skin99.png",
    ᐃᐃΔⲆⵠΔΔ: "img/night-hand-skin99.png",
    ᐃΔΔΔⲆΔⲆ: "img/day-hand-skin100.png",
    ᐃΔᐃⵠⵠΔⵠ: "img/night-hand-skin100.png",
    ᐃΔⲆᐃⲆⲆⲆ: "img/day-hand-skin101.png",
    ΔⵠΔⵠⲆᐃΔ: "img/night-hand-skin101.png",
    ΔⵠⲆⲆⲆΔΔ: "img/day-hand-skin102.png",
    ΔⵠⵠᐃΔⵠⵠ: "img/night-hand-skin102.png",
    ΔⲆⲆΔⵠⵠΔ: "img/day-hand-skin103.png",
    ⲆⵠⲆⲆⲆΔᐃ: "img/night-hand-skin103.png",
    ⲆᐃⵠᐃⵠΔⵠ: "img/day-hand-skin104.png",
    ᐃᐃΔⵠΔⵠⲆ: "img/night-hand-skin104.png",
    ⵠⵠᐃΔΔⲆⲆ: "img/day-hand-skin105.png",
    ΔΔⵠⲆᐃΔⵠ: "img/night-hand-skin105.png",
    ᐃⵠΔⲆᐃⵠᐃ: "img/day-hand-skin106.png",
    ⵠΔⵠⵠⵠⵠΔ: "img/night-hand-skin106.png",
    ᐃⵠⲆⲆΔΔΔ: "img/day-hand-skin107.png",
    ᐃΔΔᐃᐃⵠΔ: "img/night-hand-skin107.png",
    ⵠᐃⵠⲆΔᐃⲆ: "img/day-hand-skin108.png",
    ⲆⲆᐃᐃⵠⲆᐃ: "img/night-hand-skin108.png",
    ᐃΔΔᐃⲆⵠΔ: "img/day-hand-skin109.png",
    ⲆⵠⲆᐃΔᐃⵠ: "img/night-hand-skin109.png",
    ⵠᐃⲆᐃⵠⲆΔ: "img/day-hand-skin110.png",
    ⲆᐃⵠⵠⲆΔⵠ: "img/night-hand-skin110.png",
    ⵠΔΔⲆⲆⲆᐃ: "img/day-hand-skin111.png",
    ᐃⵠΔᐃⲆᐃΔ: "img/night-hand-skin111.png",
    ΔᐃⵠⲆΔⵠⲆ: "img/day-hand-skin112.png",
    ⲆⵠⲆⲆⲆᐃΔ: "img/night-hand-skin112.png",
    ᐃΔᐃⲆⲆⲆⵠⵠΔ: "img/day-hand-skin113.png",
    ᐃⵠᐃΔⲆΔᐃΔᐃ: "img/night-hand-skin113.png",
    ⵠⲆⵠⵠⵠⵠⲆ: "img/day-hand-skin114.png",
    ᐃΔᐃΔᐃΔⲆ: "img/night-hand-skin114.png",
    ⲆΔΔΔⲆⵠΔ: "img/day-hand-skin115.png",
    ΔⵠⲆⵠᐃΔⵠ: "img/night-hand-skin115.png",
    ⲆᐃⲆⵠⲆⲆᐃ: "img/day-hand-skin116.png",
    ᐃⲆⵠⵠΔΔΔ: "img/night-hand-skin116.png",
    ΔᐃΔΔΔΔⵠ: "img/day-hand-skin117.png",
    ᐃⲆΔⵠΔᐃⵠ: "img/night-hand-skin117.png",
    ⲆⵠᐃⵠⲆᐃΔ: "img/day-hand-skin118.png",
    ΔΔᐃⵠΔⲆⵠ: "img/night-hand-skin118.png",
    ᐃᐃᐃⲆⵠⵠΔ: "img/day-hand-skin119.png",
    ᐃⵠΔᐃⲆⲆⲆ: "img/night-hand-skin119.png",
    ⵠⲆⵠⲆᐃᐃⲆ: "img/day-hand-skin120.png",
    ⵠⲆΔᐃⵠⲆⵠ: "img/night-hand-skin120.png",
    ΔᐃⲆⲆᐃⵠⲆ: "img/day-hand-skin122.png",
    ΔⲆⵠⲆⵠⵠΔ: "img/night-hand-skin122.png",
    ᐃΔⲆΔⵠⲆᐃ: "img/day-hand-skin122.png",
    ⲆⵠΔⵠⵠⲆΔ: "img/night-hand-skin122.png",
    ⲆⲆΔⲆⲆⵠΔ: "img/day-hand-skin122.png",
    ᐃᐃⵠᐃⵠᐃⲆ: "img/night-hand-skin122.png",
    ΔⲆΔⲆⲆΔⲆ: "img/day-hand-skin124.png",
    ⲆⵠⲆⲆᐃᐃᐃ: "img/night-hand-skin124.png",
    ΔΔᐃᐃⵠⵠⲆ: "img/day-hand-skin125.png",
    ᐃⵠⲆᐃᐃⵠᐃ: "img/night-hand-skin125.png",
    ⲆΔⵠᐃⵠⵠᐃ: "img/day-hand-skin126.png",
    ΔᐃᐃⲆⵠᐃᐃ: "img/night-hand-skin126.png",
    ⵠΔⲆᐃⲆⲆΔ: "img/day-hand-skin127.png",
    ΔⵠⲆⵠⲆΔⵠ: "img/night-hand-skin127.png",
    ⲆⵠᐃᐃⲆⵠΔ: "img/day-hand-skin128.png",
    ΔⲆⲆⵠᐃΔⲆ: "img/night-hand-skin128.png",
    ΔⲆⲆⵠⲆⲆⲆ: "img/day-hand-skin129.png",
    ⲆⵠΔΔⵠⵠᐃ: "img/night-hand-skin129.png",
    ΔⲆⵠⵠⵠΔⲆ: "img/day-hand-skin130.png",
    ⲆⵠΔᐃⲆᐃᐃ: "img/night-hand-skin130.png",
    ᐃⵠⲆᐃⵠⲆⵠ: "img/day-hand-skin131.png",
    ⲆᐃⵠᐃⲆΔᐃ: "img/night-hand-skin131.png",
    ⵠᐃⵠⵠⲆⲆⵠ: "img/day-hand-skin130.png",
    ΔᐃⵠⵠⲆᐃᐃ: "img/night-hand-skin130.png",
    ΔⲆᐃΔⲆⲆⲆ: "img/day-hand-skin133.png",
    ⲆⵠΔᐃⲆᐃⵠ: "img/night-hand-skin133.png",
    ᐃⵠᐃΔΔⵠⲆ: "img/day-hand-skin134.png",
    ⲆⲆᐃΔᐃⲆᐃ: "img/night-hand-skin134.png",
    ⵠᐃⲆⵠⵠΔΔ: "img/day-hand-skin135.png",
    ⵠⲆΔⵠⵠᐃⵠ: "img/night-hand-skin135.png",
    ᐃⵠⲆⵠⵠᐃΔ: "img/day-hand-skin136.png",
    ΔΔⵠΔΔⵠᐃ: "img/night-hand-skin136.png",
    ⵠⲆΔΔᐃⵠⵠ: "img/day-hand-skin137.png",
    ᐃⲆᐃⲆⵠΔΔ: "img/night-hand-skin137.png",
    ᐃⵠⲆΔΔΔⵠ: "img/day-hand-skin138.png",
    ΔⵠΔᐃᐃᐃᐃ: "img/night-hand-skin138.png",
    ⵠⵠⲆⵠⵠⲆΔ: "img/day-hand-skin139.png",
    ⲆΔⲆΔᐃⵠⵠ: "img/night-hand-skin139.png",
    ᐃⲆΔᐃⵠΔⲆ: "img/day-hand-skin140.png",
    ΔᐃⲆⵠΔᐃⵠ: "img/night-hand-skin140.png",
    ⲆⵠⲆⲆⲆⲆⲆ: "img/day-hand-skin141.png",
    ᐃΔⲆⲆΔΔΔ: "img/night-hand-skin141.png",
    ᐃⵠΔⵠΔᐃⵠ: "img/day-hand-skin142.png",
    ⲆΔΔᐃⵠᐃⵠ: "img/night-hand-skin142.png",
    ΔᐃΔⲆΔⲆΔ: "img/day-hand-skin143.png",
    ⵠᐃⲆΔᐃⵠᐃ: "img/night-hand-skin143.png",
    ⲆⲆᐃᐃΔᐃⵠ: "img/day-hand-skin144.png",
    ⲆᐃᐃⵠⲆⲆᐃ: "img/night-hand-skin144.png",
    ᐃᐃⵠⵠΔⲆΔ: "img/day-hand-skin145.png",
    ⵠⵠΔΔⵠⵠᐃ: "img/night-hand-skin145.png",
    ⵠΔΔΔᐃΔᐃ: "img/day-hand-skin146.png",
    ⲆΔⵠⵠᐃᐃⲆ: "img/night-hand-skin146.png",
    ⵠΔⵠⲆᐃΔᐃ: "img/day-hand-skin147.png",
    ⵠⵠⵠⵠⲆⵠᐃ: "img/night-hand-skin147.png",
    ⲆᐃΔⵠΔⵠᐃ: "img/day-hand-skin148.png",
    ᐃⲆᐃⵠⲆⲆⵠ: "img/night-hand-skin148.png",
    ⲆⵠΔᐃΔᐃⵠ: "img/day-hand-skin149.png",
    ΔᐃᐃΔⵠΔⲆ: "img/night-hand-skin149.png",
    ᐃΔⵠΔⵠᐃⵠ: "img/day-hand-skin150.png",
    ΔⵠⲆᐃΔΔᐃ: "img/night-hand-skin150.png",
    ΔΔⵠΔΔΔᐃ: "img/day-bag-star0.png",
    ΔᐃⲆᐃⵠⵠⲆ: "img/night-bag-star0.png",
    ΔᐃᐃΔⵠⵠΔ: "img/day-bag0.png",
    ᐃⵠⲆⵠᐃⲆΔ: "img/night-bag0.png",
    ⵠΔⵠⵠⵠⵠⲆ: "img/day-bag1.png",
    ᐃⵠᐃᐃⵠⲆⲆ: "img/night-bag1.png",
    ⲆⲆᐃᐃⲆΔΔ: "img/day-bag2.png",
    ⵠᐃᐃⵠⵠⲆΔ: "img/night-bag2.png",
    ΔᐃᐃⲆⲆᐃⵠ: "img/day-bag3.png",
    ΔΔᐃᐃⵠΔᐃ: "img/night-bag3.png",
    ΔᐃⲆⲆⲆⲆⲆ: "img/day-bag4.png",
    ᐃⲆⲆᐃᐃᐃΔ: "img/night-bag4.png",
    ΔΔᐃᐃᐃᐃⲆ: "img/day-bag5.png",
    ⵠⵠᐃᐃΔⵠᐃ: "img/night-bag5.png",
    ᐃⵠᐃⵠⵠⲆⵠ: "img/day-bag6.png",
    ⲆⵠΔⵠᐃⲆᐃ: "img/night-bag6.png",
    ΔΔᐃᐃⲆΔΔ: "img/day-bag7.png",
    ΔᐃΔᐃΔⲆΔ: "img/night-bag7.png",
    ⵠⲆᐃⵠⲆᐃⲆ: "img/day-bag8.png",
    ΔᐃⵠΔΔⵠᐃ: "img/night-bag8.png",
    ᐃᐃⵠΔⵠᐃΔ: "img/day-bag9.png",
    ΔⵠⵠⵠⵠⲆⲆ: "img/night-bag9.png",
    ᐃⵠⵠⲆΔᐃⵠ: "img/day-bag10.png",
    ΔᐃⲆⵠᐃᐃΔ: "img/night-bag10.png",
    ᐃⲆΔΔΔⵠⲆ: "img/day-bag11.png",
    ⵠᐃᐃⵠᐃⲆᐃ: "img/night-bag11.png",
    ᐃⲆΔⵠⵠᐃΔ: "img/day-bag13.png",
    ΔⲆⵠᐃⵠᐃⵠ: "img/night-bag13.png",
    ⵠᐃⵠⲆⲆΔᐃ: "img/day-bag14.png",
    ᐃⲆΔⵠⲆⵠᐃ: "img/night-bag14.png",
    ᐃᐃⲆᐃΔᐃⵠ: "img/day-bag16.png",
    ᐃᐃⲆΔⲆⵠΔ: "img/night-bag16.png",
    ᐃᐃᐃⵠΔΔΔ: "img/day-bag17.png",
    ⵠᐃΔᐃΔⲆⵠ: "img/night-bag17.png",
    ΔⲆΔᐃΔΔᐃ: "img/day-bag18.png",
    ΔΔⵠΔⲆᐃⵠ: "img/night-bag18.png",
    ᐃᐃⵠΔⵠᐃᐃ: "img/day-bag19.png",
    ⲆⲆⲆⵠᐃⲆᐃ: "img/night-bag19.png",
    ᐃⲆⵠⲆⲆⲆⲆ: "img/day-bag20.png",
    ⲆⲆᐃⲆⵠΔᐃ: "img/night-bag20.png",
    ⵠᐃⲆᐃᐃᐃⲆ: "img/day-bag21.png",
    ⲆΔⵠᐃᐃⵠⲆ: "img/night-bag21.png",
    ⲆΔΔᐃᐃΔⲆ: "img/day-bag22.png",
    ΔᐃΔⵠⵠᐃⲆ: "img/night-bag22.png",
    ΔⵠⲆᐃΔⵠΔ: "img/day-bag23.png",
    ⵠᐃΔᐃⵠⲆⲆ: "img/night-bag23.png",
    ᐃᐃⵠΔᐃⵠⵠ: "img/day-bag24.png",
    ⲆΔⵠⲆⲆᐃΔ: "img/night-bag24.png",
    ⲆⵠⲆΔⲆⲆⵠ: "img/day-bag25.png",
    ⵠⲆΔⵠⲆΔΔ: "img/night-bag25.png",
    ⵠⵠⵠᐃᐃⵠΔ: "img/day-bag26.png",
    ΔΔΔⵠᐃᐃⲆ: "img/night-bag26.png",
    ΔᐃⲆᐃⵠⲆⵠ: "img/day-bag27.png",
    ⲆΔⲆΔΔΔᐃ: "img/night-bag27.png",
    ⵠᐃⵠᐃΔⲆΔ: "img/day-bag28.png",
    ⲆᐃⵠΔᐃΔⲆ: "img/night-bag28.png",
    ⵠᐃⲆΔⲆⲆⲆ: "img/day-bag29.png",
    ᐃⲆΔⵠⵠΔᐃ: "img/night-bag29.png",
    ᐃⲆⵠⵠΔⲆᐃ: "img/day-bag30.png",
    ᐃΔΔᐃᐃⵠⲆ: "img/night-bag30.png",
    ΔᐃᐃⵠΔΔΔ: "img/day-bag31.png",
    ⵠᐃΔⲆⲆΔΔ: "img/night-bag31.png",
    ⵠᐃⵠΔⲆΔⵠ: "img/day-bag32.png",
    ⲆᐃⵠⵠⵠΔⵠ: "img/night-bag32.png",
    ᐃⲆΔⵠⲆⲆᐃ: "img/day-bag33.png",
    ᐃⲆᐃᐃᐃⵠᐃ: "img/night-bag33.png",
    ⵠⵠⲆⵠⵠⵠᐃ: "img/day-bag34.png",
    ᐃΔΔⵠⲆⲆᐃ: "img/night-bag34.png",
    ⲆⵠⲆⵠⵠⲆΔ: "img/day-bag35.png",
    ᐃⲆᐃⲆⲆᐃΔ: "img/night-bag35.png",
    ⲆᐃⲆᐃΔΔⲆ: "img/day-bag36.png",
    ⵠΔⵠΔΔΔᐃ: "img/night-bag36.png",
    ⵠᐃⵠⵠᐃᐃⵠ: "img/day-bag37.png",
    ᐃᐃΔΔⲆᐃⵠ: "img/night-bag37.png",
    ⵠⲆⵠᐃⵠᐃᐃ: "img/day-bag38.png",
    ΔⵠⲆⲆΔᐃⲆ: "img/night-bag38.png",
    ΔᐃΔⵠⲆᐃⲆ: "img/day-bag39.png",
    ⲆᐃᐃⵠⲆΔⵠ: "img/night-bag39.png",
    ⵠⲆⵠⲆᐃΔⵠ: "img/day-bag40.png",
    ⵠⲆⲆᐃΔΔⵠ: "img/night-bag40.png",
    ᐃᐃⲆⲆΔΔⵠ: "img/day-bag41.png",
    ⵠⵠΔΔⵠⲆΔ: "img/night-bag41.png",
    ⲆᐃⵠΔⲆⲆⵠ: "img/day-bag42.png",
    ⲆⲆΔⵠᐃⲆΔ: "img/night-bag42.png",
    ΔᐃⲆⵠΔΔΔ: "img/day-bag43.png",
    ⵠᐃᐃᐃⲆΔⲆ: "img/night-bag43.png",
    ⵠᐃⵠΔᐃᐃΔ: "img/day-bag44.png",
    ᐃΔⲆΔᐃΔᐃ: "img/night-bag44.png",
    ⵠᐃⵠΔᐃΔⲆ: "img/day-bag45.png",
    ᐃΔΔΔⵠΔⵠ: "img/night-bag45.png",
    ᐃⲆⵠᐃΔΔⲆ: "img/day-bag46.png",
    ΔⵠⲆᐃⵠΔⲆ: "img/night-bag46.png",
    ⲆⲆᐃⲆⵠΔⵠ: "img/day-bag47.png",
    ⵠᐃⵠⵠᐃᐃᐃ: "img/night-bag47.png",
    ΔⲆᐃΔⵠᐃᐃ: "img/day-bag48.png",
    ⲆⵠΔᐃⵠⵠⵠ: "img/night-bag48.png",
    ΔᐃⵠⲆᐃⲆⲆ: "img/day-bag49.png",
    ⲆⵠⵠⲆᐃⲆΔ: "img/night-bag49.png",
    ᐃⵠⲆΔΔⲆΔ: "img/day-bag50.png",
    ⵠⵠⵠⲆᐃΔΔ: "img/night-bag50.png",
    ᐃⵠⵠⵠᐃⲆⲆ: "img/day-bag51.png",
    ΔⲆᐃΔᐃⲆᐃ: "img/night-bag51.png",
    ΔΔΔΔⵠⵠᐃ: "img/day-bag52.png",
    ⲆⲆⲆⲆⵠΔΔ: "img/night-bag52.png",
    ⲆⲆᐃΔⲆΔⲆ: "img/day-bag53.png",
    ᐃᐃᐃΔΔⵠⲆ: "img/night-bag53.png",
    ΔⵠⵠⵠⲆⵠΔ: "img/day-bag54.png",
    ΔⵠΔⵠᐃΔⵠ: "img/night-bag54.png",
    ΔᐃⵠΔΔΔᐃ: "img/day-bag55.png",
    ⵠΔⲆΔᐃΔⵠ: "img/night-bag55.png",
    ⵠⵠΔᐃⵠⵠⵠ: "img/day-bag56.png",
    ⲆᐃⲆⵠΔⲆᐃ: "img/night-bag56.png",
    ΔⵠⵠⲆᐃΔⲆ: "img/day-bag57.png",
    ⵠᐃⵠⵠⵠΔᐃ: "img/night-bag57.png",
    ⵠᐃⵠⵠᐃⵠΔ: "img/day-bag58.png",
    ΔⵠᐃⲆⲆΔΔ: "img/night-bag58.png",
    ⵠⵠᐃΔⵠΔᐃ: "img/day-bag59.png",
    ⲆΔⲆᐃᐃΔΔ: "img/night-bag59.png",
    ᐃᐃᐃΔᐃⲆΔ: "img/day-bag60.png",
    ΔⵠΔᐃΔΔⵠ: "img/night-bag60.png",
    ΔᐃⲆⲆⲆΔⲆ: "img/day-bag61.png",
    ᐃᐃΔⲆⲆᐃᐃ: "img/night-bag61.png",
    ᐃⵠⵠⵠⲆΔᐃ: "img/day-bag62.png",
    ΔⲆΔⲆⲆⲆΔ: "img/night-bag62.png",
    ⵠⲆᐃⲆᐃⵠΔ: "img/day-bag63.png",
    ᐃᐃⲆΔⵠᐃⲆ: "img/night-bag63.png",
    ⲆᐃΔⲆᐃⲆⵠ: "img/day-bag64.png",
    ⵠⲆⵠⲆⲆΔΔ: "img/night-bag64.png",
    ΔⲆⵠΔΔⵠΔ: "img/day-bag65.png",
    ΔᐃⵠΔᐃᐃΔ: "img/night-bag65.png",
    ⲆᐃΔⲆᐃΔΔ: "img/day-bag66.png",
    ΔᐃΔⲆΔⲆⲆ: "img/night-bag66.png",
    ⲆⵠᐃΔΔⲆⲆ: "img/day-bag67.png",
    ⵠᐃΔⲆᐃᐃⲆ: "img/night-bag67.png",
    ⵠΔᐃⲆⵠⵠΔ: "img/day-bag68.png",
    ΔΔΔΔⲆⲆⲆ: "img/night-bag68.png",
    ⵠᐃⵠⵠⵠⵠᐃ: "img/day-accessory0.png",
    ᐃⵠⵠⲆⲆⵠΔ: "img/day-accessory0-pacques.png",
    ΔΔⵠΔⵠΔᐃ: "img/night-accessory0-pacques.png",
    ΔⲆⲆᐃΔᐃΔ: "img/day-accessory13.png",
    ΔΔⵠᐃⵠᐃΔ: "img/night-accessory13.png",
    ᐃⵠᐃⲆΔⵠⲆ: "img/day-accessory14.png",
    ᐃⵠⵠΔᐃⵠᐃ: "img/night-accessory14.png",
    ΔᐃΔⲆᐃᐃⲆ: "img/day-accessory15.png",
    ⲆΔⵠᐃⵠᐃᐃ: "img/night-accessory15.png",
    ⵠᐃΔⲆⲆⲆⵠ: "img/day-accessory16.png",
    ᐃⵠⵠᐃⲆᐃⲆ: "img/night-accessory16.png",
    ⲆΔᐃᐃΔΔᐃ: "img/day-accessory17.png",
    ΔⲆᐃΔⲆᐃⲆ: "img/day-accessory17.png",
    ⲆΔΔΔⲆΔᐃ: "img/day-accessory19.png",
    ⵠⵠⲆᐃΔⲆⵠ: "img/night-accessory19.png",
    ⲆΔΔⵠⵠᐃⵠ: "img/day-accessory20.png",
    ᐃΔᐃⵠΔⵠⵠ: "img/night-accessory20.png",
    ᐃⵠⵠᐃᐃΔΔ: "img/day-accessory21.png",
    ⵠᐃⲆⵠⲆⵠⲆ: "img/night-accessory21.png",
    ΔΔΔⲆⵠⲆΔ: "img/day-accessory22.png",
    ⵠᐃⵠⲆᐃⲆᐃ: "img/night-accessory22.png",
    ΔΔᐃⵠⵠⵠΔ: "img/day-accessory23.png",
    ΔᐃⵠⲆᐃⲆⵠ: "img/night-accessory23.png",
    ΔⵠⲆⵠΔᐃᐃ: "img/day-accessory24.png",
    ΔΔⲆⲆᐃⲆΔ: "img/night-accessory24.png",
    ΔⲆᐃᐃΔⲆᐃ: "img/day-accessory25.png",
    ⵠᐃΔΔᐃⲆⵠ: "img/night-accessory25.png",
    ᐃⵠΔᐃΔⵠΔ: "img/day-accessory26.png",
    ⵠΔⲆΔⵠⵠΔ: "img/night-accessory26.png",
    ⵠᐃⵠᐃⲆᐃⲆ: "img/day-accessory27.png",
    ⵠⵠΔΔΔΔⵠ: "img/night-accessory27.png",
    ⵠⲆᐃⵠⲆΔⵠ: "img/day-accessory18.png",
    ⵠΔᐃⲆⲆⲆⵠ: "img/night-accessory18.png",
    ⵠΔᐃΔⲆᐃᐃ: "img/day-accessory29.png",
    ⵠΔⵠⵠⲆᐃⲆ: "img/night-accessory29.png",
    ⲆⲆᐃΔᐃⵠΔ: "img/day-accessory30.png",
    ⵠⵠΔⵠⵠᐃⲆ: "img/night-accessory30.png",
    ⲆⵠⵠᐃⲆⵠΔ: "img/day-accessory31.png",
    ⲆⵠⲆᐃⲆᐃⵠ: "img/night-accessory31.png",
    ⵠᐃΔΔΔⲆⵠ: "img/day-accessory32.png",
    ⵠᐃᐃⲆⲆⵠᐃ: "img/night-accessory32.png",
    ⲆᐃⲆⵠⲆΔⲆ: "img/day-accessory33.png",
    ⲆᐃⲆⲆᐃΔⲆ: "img/night-accessory33.png",
    ᐃᐃⵠᐃⵠⵠⵠ: "img/day-accessory34.png",
    ⲆⵠⵠⵠᐃΔⲆ: "img/night-accessory34.png",
    ⵠⵠᐃᐃΔΔⵠ: "img/day-accessory35.png",
    ᐃΔⲆⵠΔΔᐃ: "img/night-accessory35.png",
    ⵠᐃⲆⵠΔⲆΔ: "img/day-accessory28.png",
    ᐃⲆⵠᐃᐃⵠⵠ: "img/night-accessory28.png",
    ΔⲆΔⵠᐃᐃᐃ: "img/day-accessory36.png",
    ⲆΔⵠΔΔΔΔ: "img/night-accessory36.png",
    ᐃᐃᐃⵠΔⲆⵠ: "img/day-accessory37.png",
    ᐃⵠⵠⲆΔⲆᐃ: "img/night-accessory37.png",
    ᐃΔⵠᐃⵠΔᐃ: "img/day-accessory39.png",
    ⵠᐃᐃⲆΔⵠⵠ: "img/night-accessory39.png",
    ⵠⵠⵠᐃⲆᐃⵠ: "img/day-accessory40.png",
    ΔΔΔΔᐃᐃⵠ: "img/night-accessory40.png",
    ᐃⵠΔⵠⵠΔΔ: "img/day-accessory41.png",
    ΔᐃⲆᐃⲆᐃⵠ: "img/night-accessory41.png",
    ΔᐃⲆΔⵠΔⲆ: "img/day-accessory42.png",
    ⵠΔΔΔᐃⲆⵠ: "img/night-accessory42.png",
    ΔⵠⵠΔᐃᐃᐃ: "img/day-accessory43.png",
    ⲆΔΔⲆΔΔΔ: "img/night-accessory43.png",
    ΔᐃΔΔᐃⵠⵠ: "img/day-accessory44.png",
    ᐃΔⲆⵠᐃⵠᐃ: "img/night-accessory44.png",
    ⲆᐃⵠΔⲆᐃⲆ: "img/day-accessory38.png",
    ᐃᐃⲆⲆΔⵠⲆ: "img/night-accessory38.png",
    ΔΔⵠⵠⵠᐃⲆ: "img/day-accessory46.png",
    ΔΔⲆⲆⵠⵠΔ: "img/night-accessory46.png",
    ⵠⵠⲆⵠΔᐃΔ: "img/day-accessory47.png",
    ⵠⲆⵠΔΔᐃⲆ: "img/night-accessory47.png",
    ΔΔᐃⵠᐃᐃⲆ: "img/day-accessory48.png",
    ⲆΔᐃⵠⵠⲆⵠ: "img/night-accessory48.png",
    ΔⲆⵠΔⲆⵠᐃ: "img/day-accessory49.png",
    ⲆᐃⲆⵠⵠⵠⵠ: "img/night-accessory49.png",
    ⵠⲆΔⵠᐃⵠⵠ: "img/day-accessory45.png",
    ᐃᐃᐃᐃⲆᐃᐃ: "img/night-accessory45.png",
    ⵠᐃΔⲆⵠⵠΔ: "img/day-accessory50.png",
    ᐃⵠᐃⵠⲆⲆᐃ: "img/night-accessory50.png",
    ᐃΔΔΔᐃⵠⵠ: "img/day-accessory51.png",
    ⵠᐃΔᐃΔⵠⲆ: "img/night-accessory51.png",
    ⲆΔⲆⵠⲆᐃⵠ: "img/day-accessory52.png",
    ΔΔΔⵠΔⵠᐃ: "img/night-accessory52.png",
    ΔΔΔΔⵠᐃⵠ: "img/day-accessory53.png",
    ⲆⵠΔⵠᐃⲆⲆ: "img/night-accessory53.png",
    ⲆΔᐃᐃᐃᐃΔ: "img/day-accessory54.png",
    ⵠⲆΔⵠΔⲆΔ: "img/night-accessory54.png",
    ΔᐃᐃᐃᐃⲆΔ: "img/day-accessory55.png",
    ᐃⲆᐃᐃΔⲆᐃ: "img/night-accessory55.png",
    ⵠⲆΔΔΔⲆⵠ: "img/day-accessory56.png",
    ΔⵠⲆΔⵠⵠⲆ: "img/night-accessory56.png",
    ⲆⵠⵠⲆΔᐃΔ: "img/day-accessory57.png",
    ⲆⵠΔᐃᐃⵠΔ: "img/night-accessory57.png",
    ⲆΔⵠᐃΔⵠΔ: "img/day-accessory58.png",
    ΔᐃΔⵠⵠΔⵠ: "img/night-accessory58.png",
    ΔᐃⵠⵠⵠΔᐃ: "img/day-accessory59.png",
    ᐃᐃⵠⵠᐃⵠᐃ: "img/night-accessory59.png",
    ⵠⲆⵠΔⵠⵠΔ: "img/day-accessory60.png",
    ΔᐃⲆΔⲆᐃᐃ: "img/night-accessory60.png",
    ΔⵠᐃΔⲆⵠᐃ: "img/day-accessory61.png",
    ᐃΔΔΔⲆᐃΔ: "img/night-accessory61.png",
    ᐃᐃᐃᐃⵠⲆⵠ: "img/day-accessory62.png",
    ⵠⲆⵠΔⲆⲆΔ: "img/night-accessory62.png",
    ⵠΔΔᐃΔⲆⵠ: "img/day-accessory63.png",
    ᐃⲆⲆᐃⵠⲆΔ: "img/night-accessory63.png",
    ⵠⲆΔΔⲆⵠᐃ: "img/day-accessory64.png",
    ⵠⲆⲆᐃⵠᐃΔ: "img/night-accessory64.png",
    ΔᐃⵠⲆⵠⵠⲆ: "img/day-accessory65.png",
    ⵠΔΔΔⵠⵠⵠ: "img/night-accessory65.png",
    ⲆⵠΔⲆᐃⲆⵠ: "img/day-accessory66.png",
    ⲆⲆᐃⲆᐃΔⵠ: "img/night-accessory66.png",
    ΔΔᐃⲆⲆᐃⵠ: "img/day-accessory67.png",
    ⵠΔⵠΔⵠⲆⵠ: "img/night-accessory67.png",
    ᐃΔΔΔΔᐃΔ: "img/day-accessory68.png",
    ᐃⵠᐃᐃⲆⲆΔ: "img/night-accessory68.png",
    ⲆᐃᐃΔᐃΔᐃ: "img/day-accessory69.png",
    ΔⲆⲆⲆΔⲆⵠ: "img/night-accessory69.png",
    ⲆⵠΔΔᐃⵠⵠ: "img/day-accessory70.png",
    ᐃᐃΔⵠⲆⵠⲆ: "img/night-accessory70.png",
    ᐃⲆᐃΔⲆⲆⲆ: "img/day-accessory71.png",
    ⵠⵠΔᐃΔΔΔ: "img/night-accessory71.png",
    ⲆᐃΔᐃΔⲆⵠ: "img/day-accessory72.png",
    ⵠΔΔᐃΔⵠΔ: "img/night-accessory72.png",
    ᐃⵠⵠᐃᐃⲆⵠ: "img/day-accessory73.png",
    ᐃⵠⵠⲆⵠⵠᐃ: "img/night-accessory73.png",
    ⲆⵠⲆⲆᐃⵠⲆ: "img/day-accessory74.png",
    ΔᐃⵠⵠⲆⲆⵠ: "img/night-accessory74.png",
    ⲆⲆⵠᐃΔᐃⵠ: "img/day-accessory75.png",
    ⲆⲆᐃᐃᐃⲆΔ: "img/night-accessory75.png",
    ⲆⵠⵠⵠⲆⵠⵠ: "img/day-accessory76.png",
    ΔⲆⲆⵠΔⲆᐃ: "img/night-accessory76.png",
    ΔⲆⵠⵠⵠᐃΔ: "img/day-accessory77.png",
    ⵠⲆΔⵠΔⵠᐃ: "img/night-accessory77.png",
    ⵠⵠΔⵠⵠⵠⲆ: "img/day-accessory78.png",
    ⵠⵠΔⵠⵠⲆⲆ: "img/night-accessory78.png",
    ΔᐃΔᐃᐃᐃⲆ: "img/day-accessory79.png",
    ⵠᐃᐃᐃΔⲆᐃ: "img/night-accessory79.png",
    ΔᐃⵠΔᐃΔΔ: "img/day-accessory80.png",
    ⲆᐃᐃⵠⵠᐃΔ: "img/night-accessory80.png",
    ΔⲆⲆⵠⵠᐃΔ: "img/day-accessory81.png",
    ⲆⵠΔⵠⵠⲆᐃ: "img/night-accessory81.png",
    ⵠⲆⲆⵠᐃΔΔ: "img/day-book0.png",
    ᐃⵠⵠⲆΔⲆⲆ: "img/night-book0.png",
    ΔΔᐃⵠⵠᐃⲆ: "img/day-book1.png",
    ΔᐃΔⲆΔᐃΔ: "img/night-book1.png",
    ⲆⵠΔⵠΔᐃΔ: "img/day-book2.png",
    ᐃΔⵠⲆᐃⵠᐃ: "img/night-book2.png",
    ⵠΔⲆΔⵠΔΔ: "img/day-book3.png",
    ⵠⲆⲆΔⲆΔⲆ: "img/night-book3.png",
    ΔᐃⲆᐃΔⵠⵠ: "img/day-book4.png",
    ⲆⵠᐃΔⲆΔΔ: "img/night-book4.png",
    ⵠΔᐃᐃᐃΔᐃ: "img/day-book5.png",
    ⵠⲆᐃᐃᐃⵠⵠ: "img/night-book5.png",
    ⵠᐃᐃΔⵠⵠᐃ: "img/day-book6.png",
    ΔⵠΔⵠΔᐃⵠ: "img/night-book6.png",
    ⵠᐃⵠᐃⵠⵠⵠ: "img/day-book7.png",
    ΔᐃᐃᐃΔΔᐃ: "img/night-book7.png",
    ⲆᐃᐃΔⲆᐃΔ: "img/day-book8.png",
    ⵠⲆΔΔⲆᐃⲆ: "img/night-book8.png",
    ⲆΔⲆⲆⵠΔΔ: "img/day-book9.png",
    ΔⲆⲆⲆⲆⵠⵠ: "img/night-book9.png",
    ⲆΔΔᐃΔᐃΔ: "img/day-book10.png",
    ᐃΔᐃⲆⵠᐃⵠ: "img/night-book10.png",
    ⵠᐃⲆΔΔΔΔ: "img/day-book11.png",
    ᐃᐃⵠⵠⵠⲆΔ: "img/night-book11.png",
    ⲆⵠⵠᐃᐃⲆⵠ: "img/day-book12.png",
    ⲆⲆᐃⲆⲆᐃⲆ: "img/night-book12.png",
    ᐃⵠᐃⲆⲆⵠΔ: "img/day-book13.png",
    ⵠⵠΔⲆⲆΔⲆ: "img/night-book13.png",
    ᐃᐃᐃⵠⲆᐃⵠ: "img/day-book14.png",
    ᐃⵠΔⲆⵠⲆᐃ: "img/night-book14.png",
    ⵠⵠᐃⲆⵠⲆⲆ: "img/day-book15.png",
    ⲆΔᐃΔⲆᐃᐃ: "img/night-book15.png",
    ᐃⵠⲆⲆⵠΔⵠ: "img/day-book16.png",
    ᐃᐃⲆᐃᐃⲆⲆ: "img/night-book16.png",
    ᐃⵠΔⲆΔᐃⵠ: "img/day-book17.png",
    ⲆᐃⵠᐃⲆΔⵠ: "img/night-book17.png",
    ⵠΔᐃᐃᐃΔⵠ: "img/day-book18.png",
    ⲆⵠΔᐃⲆⲆᐃ: "img/night-book18.png",
    ΔⲆᐃᐃᐃᐃᐃ: "img/day-book19.png",
    ΔᐃᐃⲆⵠΔᐃ: "img/night-book19.png",
    ⵠⵠΔᐃⲆΔⲆ: "img/day-book20.png",
    ΔⲆⵠΔⵠⵠΔ: "img/night-book20.png",
    ᐃΔⵠΔΔⲆⲆ: "img/day-book21.png",
    ᐃΔᐃⲆⵠⵠⲆ: "img/night-book21.png",
    ⲆⲆᐃⲆⵠⵠⵠ: "img/day-book22.png",
    ΔⵠᐃⲆⲆᐃᐃ: "img/night-book22.png",
    ΔⲆⲆⲆΔᐃΔ: "img/day-book23.png",
    ⵠᐃᐃᐃⵠⲆⵠ: "img/night-book23.png",
    ΔⵠⲆΔᐃᐃᐃ: "img/day-book24.png",
    ᐃΔΔᐃᐃᐃΔ: "img/night-book24.png",
    ⵠᐃᐃⲆΔⵠⲆ: "img/day-book25.png",
    ⵠⵠΔΔⲆⵠⵠ: "img/night-book25.png",
    ΔΔⵠᐃΔΔⵠ: "img/day-book26.png",
    ᐃⲆΔᐃΔΔⵠ: "img/night-book26.png",
    ⵠΔΔᐃⲆΔⵠ: "img/day-book27.png",
    ᐃᐃᐃΔⲆᐃⲆ: "img/night-book27.png",
    ᐃΔⲆⵠᐃᐃᐃ: "img/day-book28.png",
    ΔⲆᐃⵠⵠⲆΔ: "img/night-book28.png",
    ΔᐃΔⲆⵠⵠⲆ: "img/day-book29.png",
    ⲆΔⵠⵠⲆⲆᐃ: "img/night-book29.png",
    ᐃⲆΔᐃᐃᐃⵠ: "img/day-book30.png",
    ⵠΔΔΔⵠΔΔ: "img/night-book30.png",
    ΔⲆᐃΔΔⵠᐃ: "img/day-book31.png",
    ⲆΔΔΔᐃⵠΔ: "img/night-book31.png",
    ΔⵠⵠⲆⵠⲆΔ: "img/day-book32.png",
    ΔᐃⲆΔⲆⵠⲆ: "img/night-book32.png",
    ⲆᐃΔⲆΔΔⲆ: "img/day-book33.png",
    ⲆΔⵠⲆᐃΔΔ: "img/night-book33.png",
    ΔΔΔⲆΔⵠⵠ: "img/day-book34.png",
    ⲆⵠⲆᐃⲆᐃⲆ: "img/night-book34.png",
    ᐃΔᐃⵠᐃΔⲆ: "img/day-book35.png",
    ⵠΔⵠⲆΔⲆΔ: "img/night-book35.png",
    ⲆΔᐃΔΔⲆⵠ: "img/day-book36.png",
    ᐃΔᐃⲆΔⵠᐃ: "img/night-book36.png",
    ΔΔΔΔⲆᐃᐃⲆⵠ: "img/day-book37.png",
    ᐃᐃⵠⲆⲆΔᐃⵠΔ: "img/night-book37.png",
    ⵠΔⵠᐃΔⵠΔ: "img/day-book38.png",
    ᐃⵠⲆⵠⲆⲆΔ: "img/night-book38.png",
    ᐃⵠΔⵠΔⵠΔ: "img/day-book39.png",
    ᐃᐃⲆⲆⲆΔⲆ: "img/night-book39.png",
    ᐃⵠⵠΔⲆⵠⵠ: "img/day-book40.png",
    ΔⲆⲆⲆⵠΔᐃ: "img/night-book40.png",
    ⲆⲆΔⲆᐃᐃⲆ: "img/day-book41.png",
    ᐃᐃⵠΔⲆΔⲆ: "img/night-book41.png",
    ⲆᐃΔᐃᐃᐃⲆ: "img/day-book42.png",
    ⲆⲆΔᐃᐃΔᐃ: "img/night-book42.png",
    ΔΔⲆΔΔⲆⲆ: "img/day-book43.png",
    ⲆⵠᐃᐃΔⲆΔ: "img/night-book43.png",
    ⲆⵠⵠⲆΔⵠΔ: "img/day-book44.png",
    ⲆΔᐃⵠᐃᐃᐃ: "img/night-book44.png",
    ⲆᐃᐃⲆΔᐃⲆ: "img/day-book45.png",
    ⵠⵠΔⵠⵠᐃᐃ: "img/night-book45.png",
    ⵠΔΔⲆᐃⲆⲆ: "img/day-crate1.png",
    ⲆΔⲆΔⵠᐃⲆ: "img/night-crate1.png",
    ᐃΔⲆⵠⵠⲆⲆ: "img/day-crate2.png",
    ΔᐃΔᐃΔⲆᐃ: "img/night-crate2.png",
    ᐃⲆⵠⲆΔΔⵠ: "img/day-crate3.png",
    ᐃΔⲆΔΔΔΔ: "img/night-crate3.png",
    ᐃΔᐃⲆΔΔⵠ: "img/day-crate4.png",
    ᐃᐃⵠΔⲆΔⵠ: "img/night-crate4.png",
    ΔⲆⵠⲆΔΔΔ: "img/day-crate5.png",
    ⵠᐃⵠⲆⲆⵠΔ: "img/night-crate5.png",
    ΔⵠⲆΔⵠᐃΔ: "img/day-crate6.png",
    ⲆᐃⲆᐃⵠⵠⲆ: "img/night-crate6.png",
    ᐃΔᐃⲆⲆⵠⲆ: "img/day-crate7.png",
    ⲆᐃⲆⵠᐃⲆΔ: "img/night-crate7.png",
    ΔⲆⲆᐃⲆⲆⲆ: "img/day-crate8.png",
    ⵠᐃᐃᐃⲆⵠⲆ: "img/night-crate8.png",
    ⲆΔⲆΔⲆΔⲆ: "img/day-crate9.png",
    ΔⲆⵠⵠⵠΔⵠ: "img/night-crate9.png",
    ᐃⲆΔΔᐃΔⵠ: "img/day-crate10.png",
    ⵠΔⵠΔⲆⵠⵠ: "img/night-crate10.png",
    ⲆᐃⲆⲆⲆⵠⵠ: "img/day-crate11.png",
    ⲆᐃᐃⲆⵠⲆΔ: "img/night-crate11.png",
    ΔⲆⲆᐃᐃⵠⵠ: "img/day-crate12.png",
    ΔⲆⲆⵠⲆⵠⲆ: "img/night-crate12.png",
    ⲆⵠⵠᐃⵠⲆᐃ: "img/day-crate13.png",
    ⵠΔᐃⲆᐃᐃⲆ: "img/night-crate13.png",
    ΔΔⵠΔᐃᐃⵠ: "img/day-crate14.png",
    ⲆⲆΔᐃⵠᐃΔ: "img/night-crate14.png",
    ⵠΔⲆΔⵠΔⵠ: "img/day-crate15.png",
    ⲆⵠⲆⵠⵠΔᐃ: "img/night-crate15.png",
    ⲆᐃⲆⲆⵠΔⵠ: "img/day-crate16.png",
    ΔᐃⲆᐃᐃⵠⲆ: "img/night-crate16.png",
    ⵠΔΔᐃᐃΔⵠ: "img/day-crate17.png",
    ⲆⵠⵠⲆΔⵠⵠ: "img/night-crate17.png",
    ᐃⲆΔᐃⲆⵠⲆ: "img/day-crate18.png",
    ᐃⵠΔⲆⲆⲆⵠ: "img/night-crate18.png",
    ᐃⵠⲆⲆⵠᐃⵠ: "img/day-crate19.png",
    ⲆᐃΔⵠⲆΔᐃ: "img/night-crate19.png",
    ⵠᐃⵠᐃᐃᐃⵠ: "img/day-crate20.png",
    ΔΔⲆⲆᐃᐃᐃ: "img/night-crate20.png",
    ΔⲆⲆⲆⵠⲆΔ: "img/day-crate21.png",
    ΔΔⲆⵠⵠᐃᐃ: "img/night-crate21.png",
    ⲆᐃᐃⵠⲆⵠⵠ: "img/day-crate22.png",
    ⵠᐃⵠⲆⵠᐃᐃ: "img/night-crate22.png",
    ᐃⵠⵠⲆⲆΔⲆ: "img/day-crate23.png",
    ⲆΔΔⵠᐃΔΔ: "img/night-crate23.png",
    ΔΔⲆⲆΔⲆⵠ: "img/day-crate24.png",
    ⵠⵠΔⵠⲆⵠⵠ: "img/night-crate24.png",
    ᐃᐃΔⲆⲆⲆᐃ: "img/day-crate25.png",
    ⲆⵠⵠⵠⲆΔⵠ: "img/night-crate25.png",
    ΔΔᐃⲆⵠΔΔ: "img/day-crate26.png",
    ⵠⲆᐃΔⲆⵠⵠ: "img/night-crate26.png",
    ⵠⵠⵠΔⲆΔᐃ: "img/day-crate27.png",
    ⲆⵠⲆΔⲆΔᐃ: "img/night-crate27.png",
    ᐃΔⲆᐃᐃⲆⲆ: "img/day-crate28.png",
    ΔⵠⲆᐃⵠⲆⵠ: "img/night-crate28.png",
    ⵠⲆⲆΔⲆⵠΔ: "img/day-crate29.png",
    ᐃΔⲆᐃᐃᐃⲆ: "img/night-crate29.png",
    ⲆΔᐃⲆⲆⵠⵠ: "img/day-crate30.png",
    ᐃᐃᐃⲆⵠⵠᐃ: "img/night-crate30.png",
    ⲆⲆⲆⵠΔⵠᐃ: "img/day-crate31.png",
    ⲆᐃᐃᐃⵠⵠⲆ: "img/night-crate31.png",
    ΔⵠⵠⲆΔΔΔ: "img/day-crate32.png",
    ⲆᐃⲆⲆᐃⲆⵠ: "img/night-crate32.png",
    ᐃΔᐃⲆⲆⲆΔ: "img/day-crate33.png",
    ⵠΔⵠΔⵠΔⲆ: "img/night-crate33.png",
    ⲆᐃⵠⵠΔⲆᐃ: "img/day-crate34.png",
    ΔⲆᐃᐃΔⲆΔ: "img/night-crate34.png",
    ΔⵠⵠⲆᐃⲆⲆ: "img/day-crate35.png",
    ᐃⲆΔⲆΔⲆⲆ: "img/night-crate35.png",
    ᐃⵠⵠⲆᐃΔⲆ: "img/day-crate36.png",
    ⲆⲆⵠⵠᐃⲆⲆ: "img/night-crate36.png",
    ⵠⲆᐃⲆⵠⲆⲆ: "img/day-crate37.png",
    ⲆᐃⵠᐃᐃⲆΔ: "img/night-crate37.png",
    ⲆᐃᐃΔⵠⲆΔ: "img/day-crate38.png",
    ⲆΔΔᐃⲆΔⲆ: "img/night-crate38.png",
    ⲆᐃⵠᐃΔᐃⵠ: "img/day-crate39.png",
    ΔᐃⲆⵠΔΔⲆ: "img/night-crate39.png",
    ᐃⲆᐃⵠⵠⵠⲆ: "img/day-crate40.png",
    ⲆⲆⲆⵠⵠⵠⲆ: "img/night-crate40.png",
    ᐃⵠⲆᐃⲆΔⵠ: "img/day-crate41.png",
    ΔⲆΔΔᐃⲆⲆ: "img/night-crate41.png",
    ᐃⲆᐃΔⵠⲆΔ: "img/day-crate42.png",
    ᐃⲆⲆⵠⲆⲆᐃ: "img/night-crate42.png",
    ⵠⲆⲆⵠᐃᐃΔ: "img/day-crate43.png",
    ⵠⲆᐃⲆⵠⵠᐃ: "img/night-crate43.png",
    ⵠᐃⲆΔⵠⲆᐃ: "img/day-crate44.png",
    ᐃⲆᐃᐃΔⵠⵠ: "img/night-crate44.png",
    ⲆᐃⲆᐃΔᐃⲆ: "img/day-crate45.png",
    ΔᐃΔⵠᐃΔᐃ: "img/night-crate45.png",
    ᐃΔΔᐃⵠΔⲆ: "img/day-crate46.png",
    ΔⵠⵠᐃᐃΔΔ: "img/night-crate46.png",
    ᐃΔⵠⵠⵠⲆᐃ: "img/day-crate47.png",
    ᐃⵠᐃΔᐃᐃⲆ: "img/night-crate47.png",
    ⵠⵠᐃⵠΔⵠⲆ: "img/day-crate48.png",
    ΔⲆⵠᐃᐃᐃⲆ: "img/night-crate48.png",
    ᐃᐃΔΔⲆΔⲆ: "img/day-crate49.png",
    ⵠΔⲆⲆⵠⵠΔ: "img/night-crate49.png",
    ⲆᐃⲆⲆΔᐃᐃ: "img/day-crate50.png",
    ⲆᐃⵠⵠⵠⲆΔ: "img/night-crate50.png",
    ⵠⲆⲆⲆⲆᐃᐃ: "img/day-crate51.png",
    ΔΔΔᐃⲆΔⲆ: "img/night-crate51.png",
    ᐃᐃΔⲆⵠⲆᐃ: "img/day-crate52.png",
    ᐃΔⵠᐃⲆΔᐃ: "img/night-crate52.png",
    ΔᐃᐃᐃᐃⵠⲆ: "img/day-crate53.png",
    ᐃⵠⲆᐃⵠΔⵠ: "img/night-crate53.png",
    ⲆⲆΔΔΔΔⲆ: "img/day-crate54.png",
    ΔⵠΔᐃΔΔⲆ: "img/night-crate54.png",
    ΔΔⲆᐃⵠΔⲆ: "img/day-crate55.png",
    ΔⵠᐃⵠⲆⵠᐃ: "img/night-crate55.png",
    ΔΔⲆᐃᐃⵠᐃ: "img/day-crate56.png",
    ΔⲆᐃΔᐃⵠⵠ: "img/night-crate56.png",
    ᐃΔᐃⲆⵠⵠᐃ: "img/day-crate57.png",
    ⵠⲆⵠⵠⲆΔΔ: "img/night-crate57.png",
    ᐃΔΔⵠΔⵠΔ: "img/day-crate58.png",
    ΔⵠⲆⵠⵠⵠᐃ: "img/night-crate58.png",
    ⵠⲆⲆᐃΔⵠᐃ: "img/day-crate59.png",
    ᐃⵠᐃⲆΔⵠΔ: "img/night-crate59.png",
    ΔⵠᐃᐃΔⲆΔ: "img/day-crate60.png",
    ᐃⵠⵠᐃᐃᐃΔ: "img/night-crate60.png",
    ΔⲆΔⵠΔΔᐃ: "img/day-crate61.png",
    ⲆⲆᐃⲆΔᐃⵠ: "img/night-crate61.png",
    ⲆⲆΔⲆΔΔⵠ: "img/day-crate62.png",
    ⲆⵠᐃΔΔⵠΔ: "img/night-crate62.png",
    ᐃⲆⵠᐃΔⲆⵠ: "img/day-crate63.png",
    ⲆΔΔᐃⵠⲆΔ: "img/night-crate63.png",
    ΔΔΔⲆⲆⲆⵠ: "img/day-crate64.png",
    ⲆⵠⵠⲆⵠᐃΔ: "img/night-crate64.png",
    ΔΔⵠⲆⵠⲆⵠ: "img/day-crate65.png",
    ⲆᐃΔᐃⲆⵠᐃ: "img/night-crate65.png",
    ΔⵠΔⵠΔⲆΔ: "img/day-crate66.png",
    ᐃⲆⵠⲆᐃΔᐃ: "img/night-crate66.png",
    ΔⵠⲆⲆᐃΔΔ: "img/day-crate67.png",
    ⲆⵠⵠⵠΔⵠΔ: "img/night-crate67.png",
    ᐃᐃΔΔᐃⲆⲆ: "img/day-crate68.png",
    ⵠᐃⲆⵠⲆᐃⲆ: "img/night-crate68.png",
    ⲆⵠᐃᐃΔⵠⲆ: "img/day-crate69.png",
    ᐃΔⲆᐃⵠᐃⵠ: "img/night-crate69.png",
    ⵠⵠⵠⵠΔΔⲆ: "img/day-crate70.png",
    ΔⵠᐃⲆⲆΔᐃ: "img/night-crate70.png",
    ᐃⵠⲆⲆᐃᐃⲆ: "img/day-crate71.png",
    ⲆᐃⵠⲆΔⲆΔ: "img/night-crate71.png",
    ⲆⵠⵠⵠᐃⵠΔ: "img/day-crate72.png",
    ᐃⲆⵠᐃⲆᐃΔ: "img/night-crate72.png",
    ⲆΔⲆᐃⲆⲆⲆ: "img/day-herb0.png",
    ᐃⵠⲆⵠᐃᐃΔ: "img/day-herb1.png",
    ᐃΔᐃⵠΔⲆᐃ: "img/day-herb2.png",
    ⵠⵠⵠⵠᐃⵠΔ: "img/day-herb3.png",
    ΔⲆᐃᐃΔⲆⲆ: "img/day-herb4.png",
    ΔⲆⵠᐃⵠⵠⵠ: "img/day-herb5.png",
    ΔⲆᐃⲆΔⲆⲆ: "img/day-herb6.png",
    ⲆΔᐃⵠⵠΔᐃ: "img/day-herb7.png",
    ΔΔⵠⵠⲆⵠⵠ: "img/day-herb8.png",
    ⲆΔⵠⵠⵠᐃᐃ: "img/day-herb9.png",
    ᐃᐃⲆⲆΔᐃⵠ: "img/day-herb10.png",
    ΔΔΔᐃᐃᐃΔ: "img/day-herb11.png",
    ᐃΔΔⵠⵠᐃᐃ: "img/day-herb12.png",
    ᐃᐃᐃΔᐃⵠⵠ: "img/day-herb13.png",
    ⲆⲆⲆⵠᐃⵠΔ: "img/day-herb14.png",
    ᐃᐃⵠΔⵠᐃⵠ: "img/day-herb15.png",
    ⵠΔᐃᐃⵠⵠΔ: "img/day-shell0.png",
    ΔᐃᐃΔⵠΔⵠ: "img/day-shell1.png",
    ⵠⲆⲆⲆᐃⲆΔ: "img/day-shell2.png",
    ΔⵠⵠΔΔᐃΔ: "img/day-leaf1.png",
    ⲆⵠᐃⲆⵠΔᐃ: "img/day-leaf2.png",
    ᐃⵠΔᐃⵠⵠᐃ: "img/day-leaf3.png",
    ⵠᐃⲆᐃᐃⵠᐃ: "img/day-leaf4.png",
    ΔⲆⵠΔΔⲆⵠ: "img/day-leaf5.png",
    ᐃΔΔᐃᐃⲆⵠ: "img/day-leaf6.png",
    ᐃΔⵠΔⵠᐃΔ: "img/day-leaf7.png",
    ΔΔⲆΔⵠΔⵠ: "img/day-leaf8.png",
    ΔᐃⵠⲆⵠⲆΔ: "img/day-rock0.png",
    ᐃΔⲆᐃᐃⲆᐃ: "img/day-rock1.png",
    ⵠⵠᐃⵠᐃΔᐃ: "img/day-rock2.png",
    ⲆⵠⵠΔⵠⵠΔ: "img/day-rock3.png",
    ᐃᐃⲆⵠⲆⵠΔ: "img/day-rock4.png",
    ᐃⲆᐃΔⵠΔᐃ: "img/day-rock5.png",
    ΔΔⲆⵠⵠⵠΔ: "img/day-rock6.png",
    ΔⲆⵠᐃⲆᐃᐃ: "img/day-rock7.png",
    ⲆΔⲆΔⵠⵠⲆ: "img/day-rock8.png",
    ᐃᐃⲆⲆᐃⲆΔ: "img/day-rock9.png",
    ΔⲆΔΔⲆΔⲆ: "img/day-rock10.png",
    ⲆⵠⵠⲆⵠⵠΔ: "img/day-rock11.png",
    ⲆⵠⲆᐃΔⵠⵠ: "img/day-rock12.png",
    ᐃΔᐃⲆⲆᐃᐃ: "img/day-rock13.png",
    ⵠΔⵠⵠΔᐃⲆ: "img/day-flower1.png",
    ΔⵠΔΔⵠᐃⵠ: "img/day-flower2.png",
    ΔᐃⵠⵠΔⲆᐃ: "img/day-flower3.png",
    ᐃΔᐃⵠⵠᐃΔ: "img/day-flower4.png",
    ᐃⵠΔᐃΔⵠⲆ: "img/day-flower5.png",
    ⵠⵠⲆⵠᐃⲆⲆ: "img/day-flower6.png",
    ⲆⲆᐃᐃᐃⵠᐃ: "img/day-flower7.png",
    ᐃΔⲆⲆΔᐃⵠ: "img/day-flower8.png",
    ⵠΔⵠⵠⲆⵠⲆ: "img/day-flower9.png",
    ⲆⲆᐃⲆΔΔᐃ: "img/day-herb16.png",
    ΔⲆⲆⲆⵠΔⵠ: "img/day-herb17.png",
    ⵠⲆⵠᐃⵠᐃⲆ: "img/day-herb18.png",
    ⲆⲆⲆⲆⲆᐃⲆ: "img/day-herb19.png",
    ᐃⲆⵠᐃⲆⵠᐃ: "img/day-herb20.png",
    ΔⲆᐃᐃΔⵠⵠ: "img/day-herb21.png",
    ᐃⵠⵠⵠΔⲆᐃ: "img/night-herb0.png",
    ⵠⲆΔⵠⲆⲆⵠ: "img/night-herb1.png",
    ΔⵠⲆⲆΔΔⵠ: "img/night-herb2.png",
    ᐃⵠⵠΔᐃᐃᐃ: "img/night-herb3.png",
    ⵠΔᐃⵠᐃⵠΔ: "img/night-herb4.png",
    ΔΔᐃΔΔⵠΔ: "img/night-herb5.png",
    ΔᐃΔⲆᐃΔⵠ: "img/night-herb6.png",
    ⲆᐃⵠᐃᐃⵠⲆ: "img/night-herb7.png",
    ᐃΔⲆⲆⵠⲆⵠ: "img/night-herb8.png",
    ⲆⲆᐃΔⲆⲆⲆ: "img/night-herb9.png",
    ⵠΔᐃΔΔᐃᐃ: "img/night-herb10.png",
    ⲆⲆΔᐃⲆᐃᐃ: "img/night-herb11.png",
    ⲆⵠᐃⵠⵠⲆᐃ: "img/night-herb12.png",
    ᐃΔᐃⵠⲆΔⲆ: "img/night-herb13.png",
    ΔᐃᐃᐃⲆⵠⵠ: "img/night-herb14.png",
    ΔΔⲆⵠⵠΔᐃ: "img/night-herb15.png",
    ΔΔᐃⲆᐃᐃⲆ: "img/night-shell0.png",
    ᐃⲆⵠⵠⲆΔⲆ: "img/night-shell1.png",
    ΔⵠᐃΔⵠⲆⵠ: "img/night-shell2.png",
    ΔⲆⲆⵠⵠⲆⲆ: "img/night-leaf1.png",
    ΔⵠΔⲆΔⵠⵠ: "img/night-leaf2.png",
    ⵠᐃᐃⵠⵠⲆⲆ: "img/night-leaf3.png",
    ⲆΔΔⵠΔⲆⲆ: "img/night-leaf4.png",
    ⲆⵠⲆᐃⵠⲆΔ: "img/night-leaf5.png",
    ΔᐃⵠΔⵠⵠⵠ: "img/night-leaf6.png",
    ΔⲆᐃⵠⵠΔᐃ: "img/night-leaf7.png",
    ⵠᐃⵠᐃᐃⵠⵠ: "img/night-leaf8.png",
    ΔᐃᐃᐃᐃⲆᐃ: "img/night-rock0.png",
    ΔⵠΔⲆΔⲆΔ: "img/night-rock1.png",
    ΔⲆⲆΔᐃⲆΔ: "img/night-rock2.png",
    ⵠⲆⵠⲆⲆⲆᐃ: "img/night-rock3.png",
    ΔⲆⵠⵠⵠⵠΔ: "img/night-rock4.png",
    ⵠⵠⵠΔΔⵠΔ: "img/night-rock5.png",
    ΔΔⵠⵠΔⲆⲆ: "img/night-rock6.png",
    ⵠᐃⲆΔΔⲆᐃ: "img/night-rock7.png",
    ⲆⵠⲆΔⲆⵠⵠ: "img/night-rock8.png",
    ⵠᐃΔᐃⲆᐃⵠ: "img/night-rock9.png",
    ⵠⵠⲆΔᐃΔᐃ: "img/night-rock10.png",
    ⲆΔⲆΔᐃΔΔ: "img/night-rock11.png",
    ⲆⲆⵠⲆΔΔⵠ: "img/night-rock12.png",
    ⲆⲆⲆᐃΔᐃⵠ: "img/night-rock13.png",
    ᐃⲆⵠⵠⵠⲆᐃ: "img/night-flower1.png",
    ᐃⲆΔᐃⵠᐃΔ: "img/night-flower2.png",
    ⵠᐃᐃⲆᐃᐃΔ: "img/night-flower3.png",
    ⵠⲆΔΔⵠⵠⵠ: "img/night-flower4.png",
    ᐃΔᐃΔᐃⵠΔ: "img/night-flower5.png",
    ΔⵠΔΔⲆᐃⲆ: "img/night-flower6.png",
    ᐃⲆΔⵠᐃΔΔ: "img/night-flower7.png",
    ⵠⵠⵠᐃΔᐃⲆ: "img/night-flower8.png",
    ᐃᐃⲆⵠΔᐃᐃ: "img/night-flower9.png",
    ᐃⲆⲆᐃΔᐃⵠ: "img/night-herb16.png",
    ⵠⲆΔⲆᐃΔⲆ: "img/night-herb17.png",
    ⲆⲆΔⵠΔΔΔ: "img/night-herb18.png",
    ᐃᐃᐃⵠᐃΔⵠ: "img/night-herb19.png",
    ΔⵠⵠΔⵠΔⲆ: "img/night-herb20.png",
    ΔⲆⲆⵠᐃΔᐃ: "img/night-herb21.png",
    ⲆⲆⲆⲆᐃⵠᐃ: "img/day-river000-010-000.png",
    ⲆⲆⲆⵠⲆⵠⲆ: "img/day-river000-010-010.png",
    ᐃⵠᐃΔΔⵠΔ: "img/day-river000-011-000.png",
    ᐃⲆⵠⲆⲆⲆⵠ: "img/day-river000-011-010.png",
    ⲆΔⲆⵠⲆⲆᐃ: "img/day-river000-011-011.png",
    ⲆⵠⲆᐃⵠⲆᐃ: "img/day-river000-110-000.png",
    ᐃΔΔᐃⲆⵠⵠ: "img/day-river000-110-010.png",
    ΔΔΔⲆⵠᐃΔ: "img/day-river000-110-110.png",
    ᐃⲆᐃⲆⵠᐃⲆ: "img/day-river000-111-000.png",
    ⵠⵠⲆⵠⲆⲆⲆ: "img/day-river000-111-010.png",
    ⲆⲆᐃΔᐃᐃΔ: "img/day-river000-111-011.png",
    ᐃⵠⵠⵠⲆⲆⵠ: "img/day-river000-111-110.png",
    ⵠⵠᐃΔᐃⲆΔ: "img/day-river000-111-111.png",
    ΔᐃΔⲆⲆᐃⲆ: "img/day-river010-010-000.png",
    ΔⲆⵠⵠⵠⲆⲆ: "img/day-river010-010-010.png",
    ΔⲆΔⲆᐃᐃᐃ: "img/day-river010-011-000.png",
    ⲆΔΔΔⵠΔᐃ: "img/day-river010-011-010.png",
    ᐃⵠⲆΔⵠⵠᐃ: "img/day-river010-011-011.png",
    ᐃΔⲆⵠⵠᐃⲆ: "img/day-river010-110-000.png",
    ⵠⵠΔⲆΔⲆᐃ: "img/day-river010-110-010.png",
    ΔΔⵠⵠᐃⵠᐃ: "img/day-river010-110-110.png",
    ΔᐃᐃΔΔⵠΔ: "img/day-river010-111-000.png",
    ⵠⵠΔΔΔⲆⵠ: "img/day-river010-111-010.png",
    ⵠⵠⵠⲆⲆⵠᐃ: "img/day-river010-111-011.png",
    ᐃΔⲆΔⲆΔⵠ: "img/day-river010-111-110.png",
    ⲆⲆⲆᐃΔⵠⵠ: "img/day-river010-111-111.png",
    ⵠⵠᐃⲆΔⲆⲆ: "img/day-river011-011-000.png",
    ΔΔΔⵠΔᐃⵠ: "img/day-river011-011-010.png",
    ᐃⲆΔⲆⵠᐃⲆ: "img/day-river011-011-011.png",
    ᐃᐃᐃΔⵠᐃᐃ: "img/day-river011-111-000.png",
    ΔⲆᐃᐃΔΔⵠ: "img/day-river011-111-010.png",
    ΔⵠᐃΔⵠΔⲆ: "img/day-river011-111-011.png",
    ᐃⲆᐃΔⲆⵠΔ: "img/day-river011-111-110.png",
    ᐃⲆⵠⲆⲆΔᐃ: "img/day-river011-111-111.png",
    ⲆⵠⵠⲆᐃⵠᐃ: "img/day-river110-110-000.png",
    ᐃΔⵠⲆⵠⵠⵠ: "img/day-river110-110-010.png",
    ⵠΔⵠᐃΔⲆΔ: "img/day-river110-110-110.png",
    ΔΔⲆᐃⲆᐃΔ: "img/day-river110-111-000.png",
    ΔΔⵠᐃΔⵠⲆ: "img/day-river110-111-010.png",
    ⵠᐃⲆᐃΔΔⲆ: "img/day-river110-111-011.png",
    ⵠⵠⵠⲆᐃⲆⵠ: "img/day-river110-111-110.png",
    ⲆΔⵠⵠᐃΔᐃ: "img/day-river110-111-111.png",
    ⲆᐃΔⵠΔⲆⲆ: "img/day-river111-111-011.png",
    ⲆⲆᐃᐃⲆⲆᐃ: "img/day-river111-111-110.png",
    ⲆᐃΔⵠΔⲆⲆ: "img/day-river111-111-011.png",
    ΔᐃⵠⲆᐃⵠⲆ: "img/day-river111-111-000.png",
    ΔᐃⵠⵠΔΔΔ: "img/day-river111-111-111.png",
    ᐃⵠᐃⵠΔᐃΔ: "img/day-river111-111-010.png",
    ᐃⲆⲆᐃᐃΔΔ: "img/night-river000-010-000.png",
    ᐃⲆᐃΔΔⲆⵠ: "img/night-river000-010-010.png",
    ΔⵠⲆⵠⲆΔΔ: "img/night-river000-011-000.png",
    ΔΔⵠⵠᐃⵠΔ: "img/night-river000-011-010.png",
    ⲆⲆΔⵠᐃⵠⲆ: "img/night-river000-011-011.png",
    ᐃⲆⲆᐃⲆᐃⵠ: "img/night-river000-110-000.png",
    ⲆᐃⵠΔᐃΔᐃ: "img/night-river000-110-010.png",
    ΔⵠⵠΔΔⲆⲆ: "img/night-river000-110-110.png",
    ΔⲆⲆⲆᐃⵠⲆ: "img/night-river000-111-000.png",
    ΔⲆⵠⲆⲆⵠΔ: "img/night-river000-111-010.png",
    ᐃΔⲆΔⲆᐃⵠ: "img/night-river000-111-011.png",
    ΔΔᐃⲆⲆⵠⵠ: "img/night-river000-111-110.png",
    ⵠⵠΔⲆⲆⲆⲆ: "img/night-river000-111-111.png",
    ᐃⵠΔⲆᐃΔᐃ: "img/night-river010-010-000.png",
    ᐃⲆⵠΔΔᐃⵠ: "img/night-river010-010-010.png",
    ⲆⲆⲆᐃᐃⲆᐃ: "img/night-river010-011-000.png",
    ᐃⵠᐃΔᐃΔⵠ: "img/night-river010-011-010.png",
    ⲆᐃⵠᐃⲆᐃΔ: "img/night-river010-011-011.png",
    ⵠΔⵠⲆⵠⲆᐃ: "img/night-river010-110-000.png",
    ⵠⵠⵠⵠⵠⵠⲆ: "img/night-river010-110-010.png",
    ᐃᐃⲆΔⵠⵠⲆ: "img/night-river010-110-110.png",
    ᐃᐃⲆⲆⵠⲆᐃ: "img/night-river010-111-000.png",
    ⵠᐃⲆⵠⵠⵠᐃ: "img/night-river010-111-010.png",
    ᐃⲆᐃΔⲆΔΔ: "img/night-river010-111-011.png",
    ΔⲆⲆᐃⵠᐃⵠ: "img/night-river010-111-110.png",
    ⵠᐃⲆⲆᐃⵠΔ: "img/night-river010-111-111.png",
    ΔⲆⲆΔⲆᐃⲆ: "img/night-river011-011-000.png",
    ᐃᐃⵠⵠᐃⲆᐃ: "img/night-river011-011-010.png",
    ⵠⲆᐃᐃⲆⲆⵠ: "img/night-river011-011-011.png",
    ΔⵠᐃᐃᐃⲆⲆ: "img/night-river011-111-000.png",
    ⲆⲆᐃᐃΔΔⵠ: "img/night-river011-111-010.png",
    ΔⵠⲆⲆⵠᐃⲆ: "img/night-river011-111-011.png",
    ⵠΔΔⵠᐃⲆⵠ: "img/night-river011-111-110.png",
    ⵠⵠⵠᐃᐃⵠᐃ: "img/night-river011-111-111.png",
    ΔⵠΔᐃⵠΔⲆ: "img/night-river110-110-000.png",
    ⵠⵠⵠⵠⵠⲆΔ: "img/night-river110-110-010.png",
    ᐃᐃⲆⲆⲆⲆⲆ: "img/night-river110-110-110.png",
    ⲆⲆᐃⲆΔⲆᐃ: "img/night-river110-111-000.png",
    ⲆⲆⵠΔᐃΔⲆ: "img/night-river110-111-010.png",
    ΔΔᐃⲆᐃⵠᐃ: "img/night-river110-111-011.png",
    ⵠᐃⲆᐃⵠᐃⲆ: "img/night-river110-111-110.png",
    ⲆⲆᐃΔⵠⲆΔ: "img/night-river110-111-111.png",
    ᐃⲆΔΔⵠΔⲆ: "img/night-river111-111-011.png",
    ΔⵠⵠⲆⲆᐃᐃ: "img/night-river111-111-110.png",
    ᐃⲆΔΔⵠΔⲆ: "img/night-river111-111-011.png",
    ⲆⵠⲆΔᐃⵠⲆ: "img/night-river111-111-000.png",
    ⵠᐃΔᐃᐃⲆⲆ: "img/night-river111-111-111.png",
    ᐃⲆΔᐃⲆⵠᐃ: "img/night-river111-111-010.png",
    ᐃᐃΔΔⲆⵠⵠ: "img/day-pebblecompo1.png",
    ᐃⵠⵠᐃᐃ: "img/day-pebblecompo2.png",
    ⲆⵠⵠⵠΔ: "img/day-pebblecompo3.png",
    ⵠᐃⵠⵠᐃⵠⵠ: "img/day-pebblecompo4.png",
    ⵠΔⵠᐃⲆ: "img/day-pebblecompo5.png",
    ⵠΔᐃⵠΔ: "img/day-pebblecompo6.png",
    ⵠᐃⲆⵠΔ: "img/day-pebblecompo7.png",
    ΔᐃⲆⵠⲆΔᐃ: "img/day-pebblecompo8.png",
    ⲆⵠⵠⵠᐃⲆᐃ: "img/day-pebblecompo9.png",
    ⵠΔᐃᐃⵠⵠᐃ: "img/day-pebblecompo10.png",
    ⵠᐃᐃⵠⲆ: "img/day-pebblecompo11.png",
    ᐃⵠΔⲆᐃⵠⲆ: "img/day-pebblecompo12.png",
    ΔΔΔⲆⲆⵠⲆ: "img/day-pebblecompo13.png",
    ᐃᐃΔᐃⲆΔⵠ: "img/day-pebblecompo14.png",
    ᐃⲆᐃⵠⵠΔΔ: "img/day-pebblecompo15.png",
    ᐃⵠⵠᐃⲆᐃⵠ: "img/day-pebblecompo16.png",
    ΔⲆⲆᐃᐃ: "img/day-pebblecompo17.png",
    ⲆⵠᐃΔⵠⲆΔ: "img/day-pebblecompo18.png",
    ᐃΔⵠⲆΔΔΔ: "img/day-pebblecompo19.png",
    ΔⵠⵠᐃΔ: "img/day-pebblecompo20.png",
    ⲆΔᐃⲆⲆ: "img/day-pebblecompo21.png",
    ⲆΔᐃⲆᐃⵠᐃ: "img/day-pebblecompo22.png",
    ΔᐃⲆⵠᐃⲆᐃ: "img/day-pebblecompo23.png",
    ⲆⲆΔΔⵠΔⵠ: "img/day-pebblecompo24.png",
    ⵠⵠⵠΔⵠ: "img/day-pebblecompo25.png",
    ⵠΔΔᐃΔ: "img/day-pebblecompo26.png",
    ΔⲆΔⵠΔᐃⵠ: "img/day-pebblecompo27.png",
    ᐃⲆΔⵠΔ: "img/day-pebblecompo28.png",
    ΔⲆΔΔⲆΔᐃ: "img/night-pebblecompo1.png",
    ΔᐃⲆⲆᐃ: "img/night-pebblecompo2.png",
    ⵠⵠᐃⲆⲆ: "img/night-pebblecompo3.png",
    ⵠΔΔᐃⲆⲆⲆ: "img/night-pebblecompo4.png",
    ⵠᐃⵠⵠᐃ: "img/night-pebblecompo5.png",
    ⲆⲆⵠΔᐃ: "img/night-pebblecompo6.png",
    ⵠⵠᐃⲆⵠ: "img/night-pebblecompo7.png",
    ⵠⵠⵠⲆⲆΔⵠ: "img/night-pebblecompo8.png",
    ⵠΔⲆⵠⲆⵠⲆ: "img/night-pebblecompo9.png",
    ⵠΔⲆΔⵠⲆΔ: "img/night-pebblecompo10.png",
    ⵠⲆⵠⲆᐃ: "img/night-pebblecompo11.png",
    ⲆᐃΔᐃᐃΔΔ: "img/night-pebblecompo12.png",
    ᐃⲆᐃⵠⲆⵠᐃ: "img/night-pebblecompo13.png",
    ⵠⲆⵠⲆⲆⵠᐃ: "img/night-pebblecompo14.png",
    ΔΔᐃΔⵠⵠΔ: "img/night-pebblecompo15.png",
    ⵠᐃΔᐃⵠΔⵠ: "img/night-pebblecompo16.png",
    ⲆⵠⵠᐃⲆ: "img/night-pebblecompo17.png",
    ΔΔⵠⵠᐃᐃⵠ: "img/night-pebblecompo18.png",
    ᐃΔᐃΔⵠΔⲆ: "img/night-pebblecompo19.png",
    ⵠⲆᐃⵠⵠ: "img/night-pebblecompo20.png",
    ᐃᐃⵠΔⲆ: "img/night-pebblecompo21.png",
    ⲆᐃᐃΔⵠΔΔ: "img/night-pebblecompo22.png",
    ᐃΔⲆⲆΔᐃᐃ: "img/night-pebblecompo23.png",
    ⲆᐃⲆΔⲆᐃᐃ: "img/night-pebblecompo24.png",
    ⲆᐃⲆΔⵠ: "img/night-pebblecompo25.png",
    ᐃⵠᐃⲆⲆ: "img/night-pebblecompo26.png",
    ᐃⲆⲆⵠⲆΔΔ: "img/night-pebblecompo27.png",
    ⲆⲆⲆΔⵠ: "img/night-pebblecompo28.png",
    ⲆⵠΔΔⲆⲆⵠ: "img/day-baby-mammoth.png",
    ΔΔⲆⲆⲆⵠⲆ: "img/day-baby-mammoth-tamed.png",
    ⵠΔⵠΔⲆΔᐃ: "img/day-baby-mammoth-angry.png",
    ⵠΔⲆⲆΔΔⲆ: "img/night-baby-mammoth.png",
    ⲆᐃⵠΔⵠᐃᐃ: "img/night-baby-mammoth-tamed.png",
    ⵠᐃⵠΔⵠⵠⲆ: "img/night-baby-mammoth-angry.png",
    ΔⵠⵠⲆΔⵠᐃ: "img/inv-mammoth-out.png",
    ΔⲆΔⵠⵠᐃΔ: "img/inv-mammoth-in.png",
    ⲆΔⲆⲆⲆⵠᐃ: "img/inv-mammoth-click.png",
    ⵠΔΔⵠⲆΔⲆ: "img/hurt-baby-mammoth.png",
    ΔᐃᐃⵠΔΔⵠ: "img/baby-mammoth-step.png",
    ⲆⵠⲆᐃΔΔⲆ: "img/day-flower-hat.png",
    ᐃᐃⲆⲆᐃᐃⵠ: "img/night-flower-hat.png",
    ⲆⵠⲆⵠⵠΔⲆ: "img/inv-flower-hat-out.png",
    ⵠⲆⲆΔᐃⵠᐃ: "img/inv-flower-hat-in.png",
    ᐃⲆⲆⲆΔⲆⲆ: "img/inv-flower-hat-click.png",
    ᐃⲆⵠⲆᐃᐃΔ: "img/day-fur-hat.png",
    ⵠⵠΔΔΔΔΔ: "img/night-fur-hat.png",
    ⵠⲆⲆⵠΔᐃⲆ: "img/inv-fur-hat-out.png",
    ⵠⵠᐃⵠⲆⵠᐃ: "img/inv-fur-hat-in.png",
    ΔⵠΔⵠᐃᐃᐃ: "img/inv-fur-hat-click.png",
    ⵠᐃΔΔᐃⲆΔ: "img/day-mammoth.png",
    ᐃΔⵠᐃΔᐃΔ: "img/night-mammoth.png",
    ᐃⲆΔΔᐃⵠⵠ: "img/hurt-mammoth.png",
    ΔⵠᐃⲆⵠⲆᐃ: "img/inv-mammoth-fur-out.png",
    ⲆΔΔᐃⵠΔΔ: "img/inv-mammoth-fur-in.png",
    ⲆᐃΔⲆⲆⵠᐃ: "img/inv-mammoth-fur-click.png",
    ᐃⵠⵠΔΔⲆⵠ: "img/inv-wood-bow-out.png",
    ⲆΔⲆᐃⵠΔΔ: "img/inv-wood-bow-in.png",
    ᐃⵠΔᐃⵠᐃⵠ: "img/inv-wood-bow-click.png",
    ΔⲆⵠⲆᐃᐃⵠ: "img/inv-wood-arrow-out.png",
    ⲆᐃΔⲆⲆᐃΔ: "img/inv-wood-arrow-in.png",
    ᐃⵠᐃⵠⲆⲆⵠ: "img/inv-wood-arrow-click.png",
    ᐃΔᐃᐃΔⵠⲆ: "img/day-wood-bow2.png",
    ⲆⵠⵠΔⲆⲆᐃ: "img/night-wood-bow2.png",
    ΔᐃⲆΔⵠᐃⲆ: "img/day-wood-arrow.png",
    ᐃⲆⵠᐃᐃᐃΔ: "img/night-wood-arrow.png",
    ⲆᐃⵠΔⲆΔΔ: "img/inv-stone-bow-out.png",
    ⲆⵠⲆΔᐃⵠⵠ: "img/inv-stone-bow-in.png",
    ⲆⵠⲆⲆⵠⲆΔ: "img/inv-stone-bow-click.png",
    ᐃⵠᐃⵠⵠᐃⲆ: "img/inv-stone-arrow-out.png",
    ᐃΔⲆⵠᐃⲆⲆ: "img/inv-stone-arrow-in.png",
    ᐃⲆΔⵠⲆⲆⵠ: "img/inv-stone-arrow-click.png",
    ᐃⵠΔΔⲆᐃᐃ: "img/day-stone-bow.png",
    ᐃᐃⲆΔᐃⵠᐃ: "img/night-stone-bow.png",
    ⵠᐃΔᐃΔᐃⲆ: "img/day-stone-arrow.png",
    ΔᐃⵠᐃΔᐃⵠ: "img/night-stone-arrow.png",
    ⲆᐃⲆΔⵠᐃⵠ: "img/inv-gold-bow-out.png",
    ⲆΔⲆᐃⵠⲆΔ: "img/inv-gold-bow-in.png",
    ΔⲆⵠⵠⵠⲆⵠ: "img/inv-gold-bow-click.png",
    ⵠΔⲆΔⲆⵠᐃ: "img/inv-gold-arrow-out.png",
    ⵠⲆΔⵠΔΔⵠ: "img/inv-gold-arrow-in.png",
    ⲆⲆⲆΔΔΔΔ: "img/inv-gold-arrow-click.png",
    ᐃΔⲆΔΔⵠⲆ: "img/day-gold-bow.png",
    ΔⵠⲆᐃⲆΔΔ: "img/night-gold-bow.png",
    ΔⵠⵠⲆᐃᐃΔ: "img/day-gold-arrow.png",
    ⵠᐃⵠⲆⲆᐃⲆ: "img/night-gold-arrow.png",
    ΔΔⲆΔᐃΔᐃ: "img/inv-diamond-bow-out.png",
    ᐃⲆⲆΔⲆⲆⵠ: "img/inv-diamond-bow-in.png",
    ᐃᐃᐃᐃΔᐃⲆ: "img/inv-diamond-bow-click.png",
    ⲆⲆᐃᐃⲆⵠΔ: "img/inv-diamond-arrow-out.png",
    ⵠᐃⲆΔᐃⲆΔ: "img/inv-diamond-arrow-in.png",
    ΔᐃⲆⲆᐃⵠΔ: "img/inv-diamond-arrow-click.png",
    ΔⵠⲆᐃᐃⲆⵠ: "img/day-diamond-bow.png",
    ⵠⵠᐃᐃᐃᐃΔ: "img/night-diamond-bow.png",
    ΔⵠᐃΔᐃⵠⲆ: "img/day-diamond-arrow.png",
    ᐃΔⵠⲆᐃΔⵠ: "img/night-diamond-arrow.png",
    ⵠⵠⵠΔᐃⲆⲆ: "img/inv-amethyst-bow-out.png",
    ᐃΔⲆᐃⲆᐃⵠᐃⲆ: "img/inv-amethyst-bow-in.png",
    ⲆⵠᐃΔᐃΔᐃᐃᐃ: "img/inv-amethyst-bow-click.png",
    ᐃΔᐃⲆᐃΔⵠΔΔ: "img/inv-amethyst-arrow-out.png",
    ᐃᐃⲆΔᐃⲆⵠⲆⵠ: "img/inv-amethyst-arrow-in.png",
    ΔⲆⲆᐃⲆΔⵠⵠΔ: "img/inv-amethyst-arrow-click.png",
    ⲆΔⵠᐃⲆΔⵠᐃΔ: "img/day-amethyst-bow.png",
    ᐃⲆⲆᐃⲆⲆⵠⲆᐃ: "img/night-amethyst-bow.png",
    ᐃⵠᐃᐃΔⲆⵠ: "img/day-amethyst-arrow.png",
    ΔΔᐃⲆΔⲆⲆ: "img/night-amethyst-arrow.png",
    ΔΔΔΔⵠⵠⵠᐃΔ: "img/inv-dragon-bow-out.png",
    ΔⲆΔⲆᐃⲆⵠΔⲆ: "img/inv-dragon-bow-in.png",
    ΔⲆᐃⲆᐃᐃⲆΔᐃ: "img/inv-dragon-bow-click.png",
    ⵠᐃⵠΔΔΔΔⵠᐃ: "img/inv-dragon-arrow-out.png",
    ⲆᐃⵠΔΔⲆᐃⲆᐃ: "img/inv-dragon-arrow-in.png",
    ⲆΔⲆⵠⵠᐃⲆⲆᐃ: "img/inv-dragon-arrow-click.png",
    ᐃⵠⲆⵠⲆⲆⲆᐃⲆ: "img/day-dragon-bow.png",
    ᐃⲆᐃⵠⲆΔⲆⵠⵠ: "img/night-dragon-bow.png",
    ⵠᐃⵠⲆⵠⵠⲆ: "img/day-dragon-arrow.png",
    ⵠⵠᐃⲆⲆᐃΔ: "img/night-dragon-arrow.png",
    ᐃᐃᐃᐃᐃᐃᐃⵠᐃ: "img/inv-reidite-bow-out.png",
    ⲆⵠΔᐃᐃⵠⲆᐃᐃ: "img/inv-reidite-bow-in.png",
    ⵠⵠΔⵠⵠᐃⵠⲆⲆ: "img/inv-reidite-bow-click.png",
    ⲆᐃⲆᐃᐃᐃⲆΔΔ: "img/inv-reidite-arrow-out.png",
    ⲆᐃⲆⲆᐃⵠᐃᐃΔ: "img/inv-reidite-arrow-in.png",
    ΔᐃⵠΔΔΔΔⲆΔ: "img/inv-reidite-arrow-click.png",
    ⲆΔⲆⵠᐃΔᐃΔⵠ: "img/day-reidite-bow.png",
    ⵠⲆᐃⵠⲆⵠΔⵠⲆ: "img/night-reidite-bow.png",
    ΔᐃᐃⲆⲆΔᐃ: "img/day-reidite-arrow.png",
    ΔⲆΔΔΔΔⵠΔⵠ: "img/night-reidite-arrow.png",
    ᐃⲆⲆⵠᐃΔᐃⵠⵠ: "img/inv-wooden-axe-out.png",
    ΔⲆᐃⲆᐃᐃⲆΔΔ: "img/inv-wooden-axe-in.png",
    ᐃΔⲆⲆⲆⵠⲆΔⵠ: "img/inv-wooden-axe-click.png",
    ⵠⲆΔᐃⲆⲆᐃᐃΔ: "img/day-wooden-axe.png",
    ΔΔⵠⲆⲆⲆⲆΔⲆ: "img/night-wooden-axe.png",
    ⲆⵠⲆΔⵠⵠᐃⵠⲆ: "img/inv-stone-axe-out.png",
    ᐃΔᐃᐃⲆⵠⵠᐃΔ: "img/inv-stone-axe-in.png",
    ᐃⲆΔⲆⲆᐃⵠᐃᐃ: "img/inv-stone-axe-click.png",
    ⵠⵠΔⵠᐃⵠⵠᐃⵠ: "img/day-stone-axe.png",
    ᐃⵠᐃⲆΔᐃᐃⵠΔ: "img/night-stone-axe.png",
    ᐃᐃⵠⲆⲆⵠᐃⵠⵠ: "img/inv-golden-axe-out.png",
    ΔᐃΔᐃⵠΔᐃᐃΔ: "img/inv-golden-axe-in.png",
    ⵠⵠⲆΔⵠⵠΔᐃⵠ: "img/inv-golden-axe-click.png",
    ᐃΔⵠᐃⲆⵠⵠΔΔ: "img/day-golden-axe.png",
    ᐃⵠⵠⵠΔᐃⲆⲆⲆ: "img/night-golden-axe.png",
    ΔᐃᐃⵠᐃᐃΔᐃΔ: "img/inv-diamond-axe-out.png",
    ⲆᐃᐃΔᐃΔⲆⵠᐃ: "img/inv-diamond-axe-in.png",
    ΔⵠⲆⲆⵠⵠΔΔⲆ: "img/inv-diamond-axe-click.png",
    ⲆΔΔᐃᐃⲆΔⲆΔ: "img/day-diamond-axe.png",
    ΔⵠⲆⲆΔΔᐃⲆΔ: "img/night-diamond-axe.png",
    ΔΔⵠⵠΔⲆΔⵠⵠ: "img/inv-amethyst-axe-out.png",
    ⵠᐃΔΔᐃᐃᐃΔᐃ: "img/inv-amethyst-axe-in.png",
    ᐃⲆΔⲆᐃⵠⲆⲆΔ: "img/inv-amethyst-axe-click.png",
    ⵠΔᐃΔᐃᐃᐃΔΔ: "img/day-amethyst-axe.png",
    ⲆⲆᐃᐃⵠΔⲆⲆⲆ: "img/night-amethyst-axe.png",
    ⲆᐃᐃⲆΔⲆⵠⲆⵠ: "img/inv-reidite-axe-out.png",
    ᐃⲆⵠⵠΔΔⵠⲆΔ: "img/inv-reidite-axe-in.png",
    ⵠᐃᐃⵠⲆⲆⲆΔᐃ: "img/inv-reidite-axe-click.png",
    ⵠⵠⵠⵠⵠᐃⲆΔᐃ: "img/day-reidite-axe.png",
    ⲆΔⲆⵠΔΔⲆⵠΔ: "img/night-reidite-axe.png",
    ΔⵠⵠⲆΔᐃΔ: "img/bandage-activated.png",
    ΔᐃⵠⵠᐃⲆᐃ: "img/auto-feed.png",
    ⵠᐃᐃⵠⵠⵠᐃ: "img/stop-regeneration.png",
    ΔⲆᐃΔΔᐃⵠ: "img/stop-regeneration2.png",
    ⲆⵠⵠΔΔᐃⲆᐃᐃ: "img/day-wood-platform.png",
    ⵠᐃⲆΔⵠΔᐃᐃᐃ: "img/night-wood-platform.png",
    ᐃΔᐃⵠⵠⲆⲆⲆΔ: "img/inv-wood-platform-in.png",
    ⵠⵠⵠⲆᐃⵠᐃⲆᐃ: "img/inv-wood-platform-out.png",
    ⵠⵠⵠΔⲆⵠᐃᐃΔ: "img/inv-wood-platform-click.png",
    ΔΔⵠⲆΔⲆⲆΔᐃ: "img/day-wood-shield.png",
    ⲆⵠᐃⲆⵠΔⲆⲆⵠ: "img/night-wood-shield.png",
    ᐃⵠⵠΔⵠΔⲆᐃᐃ: "img/day-stone-shield.png",
    ⲆⲆⲆⲆΔⵠⲆⵠⲆ: "img/night-stone-shield.png",
    ΔⲆᐃᐃΔⵠΔᐃΔ: "img/day-gold-shield.png",
    ΔΔⵠⲆΔⵠⲆᐃⵠ: "img/night-gold-shield.png",
    ΔΔΔΔⲆΔⵠⲆⵠ: "img/day-diamond-shield.png",
    ⵠⲆⵠΔⵠΔⵠⵠⲆ: "img/night-diamond-shield.png",
    ᐃΔⵠΔΔΔⵠᐃΔ: "img/day-amethyst-shield.png",
    ᐃΔΔⵠⲆⵠᐃᐃᐃ: "img/night-amethyst-shield.png",
    ⵠᐃⵠⲆΔᐃⲆᐃⲆ: "img/day-reidite-shield.png",
    ⵠᐃΔⵠᐃΔᐃΔᐃ: "img/night-reidite-shield.png",
    ΔⲆᐃⲆΔⲆⲆΔᐃ: "img/inv-wood-shield-in.png",
    ᐃⲆⵠᐃΔΔⵠᐃⲆ: "img/inv-wood-shield-out.png",
    ΔᐃⲆⵠᐃⲆⲆⲆΔ: "img/inv-wood-shield-click.png",
    ᐃⵠΔΔᐃᐃⵠᐃᐃ: "img/inv-stone-shield-in.png",
    ᐃᐃᐃⲆⵠⵠᐃⵠⲆ: "img/inv-stone-shield-out.png",
    ⵠᐃΔⲆΔᐃⵠᐃⵠ: "img/inv-stone-shield-click.png",
    ΔᐃΔΔΔᐃᐃⲆᐃ: "img/inv-gold-shield-in.png",
    ⲆΔⲆⲆⲆᐃΔⵠⵠ: "img/inv-gold-shield-out.png",
    ΔΔΔᐃⲆⵠⲆΔⵠ: "img/inv-gold-shield-click.png",
    ΔᐃⲆⲆᐃᐃⵠⲆⲆ: "img/inv-diamond-shield-in.png",
    ΔΔⵠᐃⵠⵠΔⵠⵠ: "img/inv-diamond-shield-out.png",
    ᐃΔᐃⵠⲆⲆⲆⵠⵠ: "img/inv-diamond-shield-click.png",
    ΔⵠΔᐃᐃᐃⵠΔⲆ: "img/inv-amethyst-shield-in.png",
    ⵠⲆΔᐃΔᐃΔΔⲆ: "img/inv-amethyst-shield-out.png",
    ᐃⵠⲆᐃΔⲆⵠⲆⵠ: "img/inv-amethyst-shield-click.png",
    ⲆⲆⲆΔⲆⲆΔⵠⵠ: "img/inv-reidite-shield-in.png",
    ⵠⵠⵠⵠⲆΔᐃΔⵠ: "img/inv-reidite-shield-out.png",
    ᐃᐃⲆᐃᐃⵠⲆᐃΔ: "img/inv-reidite-shield-click.png",
    ΔⵠⵠⵠⲆⵠΔⲆⵠ: "img/day-machete.png",
    ⲆᐃⲆⲆⵠⲆᐃⵠⲆ: "img/night-machete.png",
    ⵠⵠΔⵠⲆⲆᐃⵠᐃ: "img/inv-machete-in.png",
    ⲆⵠᐃᐃᐃΔⵠᐃᐃ: "img/inv-machete-out.png",
    ⵠⵠᐃⲆΔΔᐃⲆΔ: "img/inv-machete-click.png"
  };
  ᐃᐃⵠⲆΔΔⲆ = [{}];
  const ib = Hh;
  ᐃᐃⵠⲆΔΔⲆ[In].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = os; c < a.length; c++) {
      b[c] = a[c];
    }
    return b;
  };
  const tb = Mq;
  ᐃⵠΔᐃⲆᐃᐃ = {};
  ΔⵠΔΔΔⲆᐃᐃⲆ = {};
  for (var Ft in Ⲇⵠ) {
    ᐃⵠΔᐃⲆᐃᐃ[Ft] = Ⲇⵠ[Ft];
  }
  function nb(a, b) {
    const c = ~(a & 19540) & 19540 | ~(a & 19540) & a;
    const d = b ^ 852;
    const e = gt(c, d, c, d, c, d);
    Gw(c, d);
    return e ^ 11563;
  }
  ΔΔ = [];
  const ob = gg;
  ᐃΔⵠ = {};
  ᐃΔⵠ.ⵠᐃⵠⲆᐃ = 0;
  ᐃΔⵠ.ⵠᐃⵠⵠ = og;
  ᐃΔⵠ.ᐃΔⵠⲆ = 2;
  ᐃΔⵠ.ᐃⲆⵠᐃ = 3;
  const rb = so;
  ᐃΔⵠ.ᐃⲆΔⵠ = Os;
  ᐃΔⵠ.Ⲇⵠⵠⵠ = Qr;
  const ab = Ej;
  ᐃΔⵠ.ᐃⵠᐃΔ = Ql;
  ᐃΔⵠ.ΔΔⲆΔΔⲆΔ = ur;
  ᐃΔⵠ.ᐃΔⵠᐃΔ = Xl;
  ΔⲆⵠⲆ = {};
  ⵠᐃΔⲆ = [];
  ⲆⵠⵠΔΔᐃⲆ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (b === a[c].id) {
        return c;
      }
    }
    return -Wl;
  };
  const sb = ng;
  const hb = Te;
  var lb = [];
  function Nt(a, b) {
    for (var c = 0; lb.length > c; c += b) {
      var d = lb[c];
      if (a === d[fl]) {
        vb(d[Lr], d[1], d[eh], d[ll]);
      }
    }
  }
  const ub = I;
  const bb = G;
  function vb(b, c, d, e) {
    var f = ⵠᐃΔⲆ[b];
    if (xg !== f) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / cf.ⵠⲆᐃⲆᐃ;
        var m = d * 193 / cf.ⲆⵠⲆⵠᐃ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ΔΔ[818][i].drawImage(j, k - n / Ug, m - o / as, n, o);
        k = e * 600 / cf.ⵠⲆᐃⲆᐃ;
        m = d * 600 / cf.ⲆⵠⲆⵠᐃ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ΔΔ[819][i].drawImage(j, k - n / 2, m - o / Vh, n, o);
      }
    }
  }
  function db(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  ⵠⵠⲆΔⵠΔⲆᐃΔ = function () {
    for (var b = 0; b < 2; b++) {
      ΔΔ[818][b].clearRect(Hi, 0, 193, 193);
      ΔΔ[818][b].drawImage(ⵠᐃΔⲆ.MAP[b], 0, 0, 193, 193);
      ΔΔ[819][b].clearRect(0, Qs, 600, 600);
      ΔΔ[819][b].drawImage(ⵠᐃΔⲆ.MAP[b], 0, 0, 600, 600);
      for (var c = cf.Ⲇᐃᐃᐃ.length - 1; c >= 0; c--) {
        var d = cf.Ⲇᐃᐃᐃ[c];
        var f = d.x1 * 193 / (ql * cf.ⵠⲆᐃⲆᐃ);
        var j = d.y1 * 193 / (cf.ⲆⵠⲆⵠᐃ * 100);
        var k = d.w * 193 / (Uh * cf.ⵠⲆᐃⲆᐃ);
        var m = d.ΔⵠⲆ * 193 / (_j * cf.ⲆⵠⲆⵠᐃ);
        var p = d.x1 * 600 / (cf.ⵠⲆᐃⲆᐃ * 100);
        var q = d.y1 * 600 / (cf.ⲆⵠⲆⵠᐃ * 100);
        var u = d.w * 600 / (Ph * cf.ⵠⲆᐃⲆᐃ);
        var v = d.ΔⵠⲆ * 600 / (xh * cf.ⲆⵠⲆⵠᐃ);
        if (cf.ⵠΔΔⵠⲆ === d.ⵠⵠⵠ) {
          ΔΔ[818][b].drawImage(ⵠᐃΔⲆ.FOREST[b], f, j, k, m);
          ΔΔ[819][b].drawImage(ⵠᐃΔⲆ.FOREST[b], p, q, u, v);
        }
        if (d.ⵠⵠⵠ === cf.ᐃΔΔΔⵠⵠΔ) {
          ΔΔ[818][b].drawImage(ⵠᐃΔⲆ.WINTER[b], f, j, k, m);
          ΔΔ[819][b].drawImage(ⵠᐃΔⲆ.WINTER[b], p, q, u, v);
        }
        if (d.ⵠⵠⵠ === cf.ⵠⵠⲆΔⵠΔΔ) {
          ΔΔ[818][b].drawImage(ⵠᐃΔⲆ.LAVA[b], f, j, k, m);
          ΔΔ[819][b].drawImage(ⵠᐃΔⲆ.LAVA[b], p, q, u, v);
        }
        if (cf.ΔᐃΔΔⲆⲆⲆ === d.ⵠⵠⵠ) {
          ΔΔ[818][b].drawImage(ⵠᐃΔⲆ.CAVE[b], f, j, k, m);
          ΔΔ[819][b].drawImage(ⵠᐃΔⲆ.CAVE[b], p, q, u, v);
        }
        if (cf.ᐃⵠⵠᐃΔᐃΔ === d.ⵠⵠⵠ) {
          ΔΔ[818][b].drawImage(ⵠᐃΔⲆ.DESERT[b], f, j, k, m);
          ΔΔ[819][b].drawImage(ⵠᐃΔⲆ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ᐃⵠᐃᐃⲆⲆᐃᐃᐃ = function () {
    ΔⲆⵠⲆ = {
      ᐃⵠΔᐃⲆ: [{
        id: wj,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⲆⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃᐃⲆⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔᐃΔᐃⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔᐃΔⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆΔΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⵠⲆⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠΔⲆⵠᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔⵠⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔⲆᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔᐃΔᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆΔᐃᐃⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠᐃⲆΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⵠⵠΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⲆᐃᐃΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⲆⲆᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⲆⵠΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆᐃΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔⲆᐃⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔⲆᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "What?"
      }, {
        id: ba,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃᐃΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆⲆⲆⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔΔⲆⵠΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔΔⲆΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔⵠⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⵠᐃⲆΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃᐃᐃΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⵠΔΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Scar"
      }, {
        id: As,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠΔΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔⵠⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠΔⵠⵠⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔΔᐃᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "In Trouble"
      }, {
        id: fg,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃΔⲆⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⲆⲆⵠⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠᐃᐃⲆⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃⵠⲆⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠΔᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆΔⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃΔᐃᐃⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠᐃΔᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔⲆᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⲆΔΔᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆᐃⲆΔⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠᐃᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Happy 2"
      }, {
        id: tk,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⵠΔᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔΔⲆⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⲆⲆⵠΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠᐃⲆᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Crazy"
      }, {
        id: Kh,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔΔⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔᐃⵠᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔⵠᐃΔⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔⲆⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠΔᐃⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⵠⲆᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔⵠⲆⲆΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠⲆΔⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠΔⲆⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆᐃⵠⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔᐃⵠⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠΔᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Curious"
      }, {
        id: v,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃᐃΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⵠΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃⵠⵠᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆⲆⲆⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⵠⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⲆΔⲆᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔΔᐃⵠΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔⲆⲆⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠΔᐃΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⲆΔⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⲆⵠΔⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Scar 2"
      }, {
        id: ro,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔⲆⲆⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠᐃΔΔⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃᐃⵠⲆⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆⲆⲆΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Sick"
      }, {
        id: sh,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃΔⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠΔᐃᐃΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⵠⲆᐃᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠᐃⲆⲆⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⲆⲆᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔΔⲆΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠΔⵠᐃΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔᐃⵠᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔΔᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆΔᐃⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔⲆΔᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.Ⲇᐃⵠⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⵠᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆⵠⵠΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆᐃᐃⵠⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔᐃⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃⵠΔᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆᐃΔᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆᐃᐃⵠᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃΔⵠᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠΔⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠⵠⵠⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆᐃΔΔⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃΔΔΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 104,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⵠᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆⲆΔⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠΔᐃᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃᐃᐃΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔᐃᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆᐃⵠⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠᐃⵠᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔΔΔᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃᐃⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⲆᐃⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃᐃⵠⵠⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃΔᐃⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠΔΔᐃⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⵠⵠΔΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠⵠⵠⲆⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⵠⵠΔⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠⲆᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔᐃⲆΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠⲆⵠⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⲆΔⲆⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⵠⲆⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃⲆΔⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔᐃΔΔⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠᐃΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⵠᐃᐃⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃΔⲆⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃΔⲆᐃⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃⲆⲆⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⲆᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆΔⵠⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠⲆΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔΔᐃⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆⵠⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆΔⲆⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆⵠᐃᐃᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔⲆⵠⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃᐃⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⲆΔΔⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃⵠΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⲆⵠᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⵠⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⲆⵠⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔᐃⲆⵠᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠⲆᐃΔⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠⲆΔᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃΔⲆⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆΔᐃⵠΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠΔᐃΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⲆⵠᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆᐃⵠΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆᐃΔⲆᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔᐃΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆⲆΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆΔⲆⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠⲆᐃΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⵠΔⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃⲆⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆᐃᐃᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔΔᐃⲆⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆᐃΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆΔΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠΔⵠᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⲆᐃⵠⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃⵠⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠⲆᐃⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⵠⲆⲆⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔΔⲆⲆⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠΔᐃⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃᐃᐃΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃⵠⲆΔⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆⲆⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃΔⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃΔᐃΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆⵠⵠⵠⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔᐃΔᐃΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⵠⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃⵠΔᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔΔΔⲆⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⲆⵠᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃΔⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔΔᐃⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⲆⵠⲆⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆⵠⵠΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠΔⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆᐃⲆⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃΔΔΔΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆΔⵠΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃⵠΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆⵠΔⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃⵠⲆᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔᐃⵠΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃᐃᐃΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆΔⲆⲆΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆⲆᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆΔⵠⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔΔⵠᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔᐃᐃⵠⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠⲆᐃᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⲆΔⲆⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⲆᐃᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔⵠᐃⵠⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃᐃⲆⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃᐃⲆⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃΔΔΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔⲆᐃⲆⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⲆⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃᐃΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆΔΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃᐃⲆⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆⲆⵠᐃΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠΔⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆⵠⵠΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⲆⵠⲆⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠΔΔⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃᐃᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆΔⲆᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠⵠⵠΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠΔᐃⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠⵠᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠⲆΔΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆᐃⵠⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃⵠᐃⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠᐃⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠᐃΔⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⵠⵠⲆⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⵠⵠⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⲆΔΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃΔΔⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⲆⵠⵠΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔⵠⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⲆΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⵠΔᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃΔⲆΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃⲆΔᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆᐃΔⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔΔΔᐃΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⵠⵠᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃΔⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔᐃᐃⲆⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔⵠⲆᐃΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⵠⵠⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⲆΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠᐃᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠΔᐃΔᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃᐃΔⵠΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "aloner",
        name: "Machine Mask"
      }, {
        id: 29,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃᐃⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠΔΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⵠΔⵠᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃᐃⲆⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆᐃⲆⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆᐃⲆᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠΔⵠᐃᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃⵠⵠᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔΔⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⵠⵠⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⵠⵠⲆΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃᐃⲆⲆⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠᐃⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃΔΔⲆᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔΔⵠᐃⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⲆⵠⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⵠⵠⵠΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃΔᐃⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃΔⵠΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃⵠⵠΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃᐃᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆⵠⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠᐃΔΔᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆⵠΔⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠⲆΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆᐃΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔⵠⵠΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃᐃⵠⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆⲆᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆᐃΔᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠᐃⲆⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔᐃᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠΔᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆᐃⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔΔⵠΔᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔⵠⲆⲆⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⵠΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⲆΔⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆΔⵠᐃⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆᐃⵠⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃⵠΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆΔᐃⵠᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠⲆΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆⲆᐃⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃΔᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃⵠⲆⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠⲆⵠΔⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⲆΔⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠⲆΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠⲆⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃⵠᐃⲆᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠΔⵠⲆⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆΔᐃᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆΔⲆⵠⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔⲆⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔⲆᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠΔⲆⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠⲆⲆᐃᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠΔⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔⵠⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔᐃⵠᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔᐃᐃᐃⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆᐃⵠⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⲆΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⲆⵠΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠⲆⲆⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃⲆⲆᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃΔΔᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃᐃᐃⵠⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆΔᐃΔᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔᐃⲆᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠⲆᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃⵠⲆⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠΔᐃΔᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⵠⵠⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆᐃⲆΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆΔⵠΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆⵠΔᐃⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆⲆΔⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠᐃⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⵠΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃᐃΔⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⲆΔⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠᐃⲆⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆΔΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⲆΔⵠΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⲆⵠⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃΔⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔᐃΔᐃᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⵠⵠⵠᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⲆΔΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆΔⵠΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔΔⲆⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆⲆΔΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔΔᐃᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆⵠⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⵠᐃᐃⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃΔⵠⲆᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔΔΔⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⲆΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠⵠⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃᐃⵠᐃⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆⲆⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⵠⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆⵠⲆⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠⵠⲆᐃΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔⵠᐃᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔΔⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔΔⵠⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔⲆΔⲆᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆᐃⵠΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⵠᐃᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃΔᐃΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃΔⲆΔⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔᐃⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔΔᐃⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⵠΔΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⲆΔΔΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃΔᐃⲆⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⵠⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⲆⵠⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠⲆⲆⲆΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⵠᐃΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔᐃⲆⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆⵠⵠᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠΔΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠⵠΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠᐃΔᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆΔΔΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠΔᐃᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⲆⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⵠⵠⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠΔⵠΔᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔΔᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔⲆΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃⲆᐃⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠⵠΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠΔΔⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⵠᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠᐃⵠᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃΔⵠΔⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆᐃⵠⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "aloner",
        name: "Axolotl"
      }, {
        id: 25,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠᐃⵠΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔⵠⲆΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆᐃᐃΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.Ⲇᐃⵠⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆΔᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⲆΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔᐃⲆⲆⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠⲆΔⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠᐃⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔᐃΔⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⲆⲆⲆΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃⲆᐃᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆᐃⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆΔⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔⵠⲆᐃᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃⵠⲆⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠⵠᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆⵠᐃᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⵠⲆⲆΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃᐃⲆΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔᐃᐃᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆΔΔΔᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆᐃΔΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔᐃⵠⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆᐃⵠᐃⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆΔⵠᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⲆⵠΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠΔⵠΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⲆⲆᐃᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔⵠΔΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⲆⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃΔⲆⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⲆΔⵠᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔΔⲆⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃᐃⲆᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔΔⵠΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆⵠᐃᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆΔΔⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃΔⲆΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⵠⲆΔᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆᐃᐃⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⵠⵠᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔⵠᐃⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⲆᐃⵠᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔΔᐃⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆⲆⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⵠᐃᐃΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃᐃⵠΔⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⲆᐃᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⲆⵠᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆΔΔⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆⲆᐃᐃΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⵠΔΔᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⵠⵠΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⵠⲆⵠⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃⲆΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆⵠΔⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠⵠⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃⲆΔᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠΔⵠⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⵠᐃΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⲆᐃΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⲆᐃᐃᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠᐃⵠᐃΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔⵠⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃᐃᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔᐃⲆᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃΔΔΔⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆⲆⲆⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⲆΔⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⵠⵠᐃᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆᐃⵠⵠΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃΔᐃⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔⵠΔⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆⲆΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠΔΔΔΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃⲆⵠⲆⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⲆᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃᐃΔΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔⲆΔΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⵠΔΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⲆΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆᐃⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆⵠⵠⵠⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆⵠᐃⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⲆᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔᐃᐃΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔᐃⵠⵠⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃᐃⵠᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆᐃΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆᐃΔⲆΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔᐃᐃᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔΔᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⵠⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⲆⲆⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠⲆⲆᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⵠΔⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃΔᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆᐃⵠΔⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔⲆᐃⲆⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠΔⵠⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃⵠⲆᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⲆΔᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃⲆⲆᐃⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆⵠⲆⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆᐃⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃΔⲆⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔⲆΔⵠⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠΔⵠⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆΔⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆᐃⵠΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆΔⲆⲆⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃⵠᐃⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆⵠΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃⲆΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠᐃΔΔⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆᐃΔᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ⵠΔⲆ: Ⲇⵠ.Ⲇᐃⵠᐃⵠᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⵠΔᐃⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠⲆⵠⵠⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⲆΔᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠⲆΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⲆΔⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆΔᐃⵠΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⲆⵠΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔΔᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔΔΔΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆΔΔᐃⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆᐃⲆⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆⵠΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔΔᐃΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆᐃᐃΔᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃᐃⵠⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆᐃΔⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔᐃⲆⲆΔⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔⵠΔⵠᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⲆᐃΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Water skin"
      }, {
        id: 42,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⵠᐃᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔΔⵠⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠΔⵠⲆᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃΔᐃⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⵠⵠⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⵠΔⵠᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⵠᐃΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔⲆⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆⲆⵠᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⲆΔⲆⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⵠΔΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠⵠᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆᐃⵠⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔⲆⵠΔᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆᐃΔΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⵠⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⵠΔⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔᐃⵠᐃΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃΔⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔᐃΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆⲆⲆⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.Δⵠⵠᐃᐃⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃⲆⵠⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃᐃᐃⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⵠⲆᐃⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔⵠⵠⵠᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠᐃⲆᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⵠᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔΔⲆⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔᐃⲆⲆⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔⵠⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆⲆⲆⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔᐃᐃⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃⵠᐃᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃᐃΔⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆΔΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔⵠⵠⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃⲆⲆΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆⵠⵠᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⵠᐃⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠᐃᐃⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠⲆᐃⵠⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆⲆᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆᐃⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠᐃΔΔⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃᐃⵠᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⲆⵠⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃᐃᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃᐃⵠᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔᐃⲆΔⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔΔΔⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔᐃⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠΔⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔΔⵠΔΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⲆⲆΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⲆᐃⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃΔΔⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃᐃⲆΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃᐃⲆΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⲆⵠᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆⵠⲆⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔⵠΔΔⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔΔⲆΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠᐃΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆᐃΔᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆᐃⲆΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃⵠⵠΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⲆⲆᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠΔⲆᐃⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔⵠⵠⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠᐃᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆᐃⲆⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃᐃⲆⵠⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠΔᐃⲆⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠΔᐃⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆⵠⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆⵠⲆᐃᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔᐃⵠⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Momo"
      }, {
        id: 95,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔⲆᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃⲆⲆⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠⵠⵠⲆᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃΔⲆΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⲆΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆᐃⵠΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃΔᐃᐃΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆⲆᐃᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆΔᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⵠᐃΔⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠⲆᐃᐃⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⵠⵠⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⵠⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃⵠΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃⲆΔⵠΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⲆⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠⲆΔⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔᐃΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆᐃⵠᐃΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃΔⲆⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃⵠΔΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔⲆΔΔᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆⵠᐃᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔⲆⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃⲆⵠⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆⲆΔⲆᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔΔⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔΔᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆⲆᐃⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔⵠᐃⲆΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔΔⵠⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠᐃᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⲆΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔⵠᐃΔΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔΔΔΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔⵠᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠⵠᐃⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⲆΔⵠⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆⲆⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⲆᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⵠΔⲆⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔΔΔⲆΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔᐃⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⲆⵠᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆᐃΔⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆⵠᐃⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆΔⲆᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⵠⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆΔⵠΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⵠᐃⵠΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃΔⵠΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⵠⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆᐃΔᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⲆⲆⵠⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⵠⲆⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃᐃᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆᐃᐃⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⵠⵠᐃΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆΔᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆΔⲆΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⵠⲆⲆᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃΔΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠⲆᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃⵠⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃⲆⵠⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃΔΔⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔΔⲆᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⵠⲆᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⵠΔⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆΔⵠΔΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⲆⲆⵠⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Lava Starver"
      }, {
        id: 48,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⲆⵠⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠΔᐃΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠᐃΔΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃⵠⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ΔΔⲆΔΔⲆΔ,
        ᐃΔᐃ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆⲆᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃΔⵠⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠⲆⵠΔⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆᐃⲆᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ΔΔⲆΔΔⲆΔ,
        ᐃΔᐃ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃΔΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆⵠΔΔⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆᐃΔⲆⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠΔᐃⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ΔΔⲆΔΔⲆΔ,
        ᐃΔᐃ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃΔⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔⵠⵠΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠⲆⲆⲆⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔⲆⲆΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ΔΔⲆΔΔⲆΔ,
        ᐃΔᐃ: "OmarJr13",
        name: "Blob Skin"
      }],
      ⵠⲆᐃᐃ: [{
        id: 0,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔⲆⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Bag 1"
      }, {
        id: Oq,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃΔⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⲆⵠᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆⲆⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⲆᐃᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bag 2"
      }, {
        id: yr,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃᐃᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃᐃΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃⵠⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bag 4"
      }, {
        id: Fk,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃᐃⲆΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔᐃΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⲆᐃΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔᐃⵠⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: sh,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆᐃΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆΔⲆⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆᐃΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠΔΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⵠᐃⵠᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆⲆΔᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆⵠΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃᐃⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⲆⲆΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆΔⵠⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⵠᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⵠⵠⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠΔΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆᐃⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⵠΔⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⵠⵠⵠⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Winter Bag"
      }, {
        id: Bs,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⵠΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⵠΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⲆⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔⵠⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⵠᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⵠᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔΔⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃΔⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃΔΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⵠᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃⲆⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆⲆⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔⲆⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 13,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⲆΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆⵠᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆΔᐃΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⵠΔⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⲆΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆΔⵠⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃⵠΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔⲆⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⵠⲆᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆᐃΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠᐃΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆᐃⵠΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆΔΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⵠⲆᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔΔⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆⲆⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⲆᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⵠⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃΔⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔᐃΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃΔᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⲆᐃᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃⲆᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆΔⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃⲆⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔΔⲆⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 14,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠⵠⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃᐃⵠⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: ag,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃᐃⲆΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⵠⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: gk,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃⲆⲆᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔᐃᐃⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: bg,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃⵠⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠΔΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⵠΔⵠᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔᐃᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⵠⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠᐃᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔⵠᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⵠⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠΔᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆΔᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠΔᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔΔⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⵠᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃΔᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔⲆᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠⲆⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔⲆᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⲆΔⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 48,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃⲆⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⵠᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠⲆⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃⲆⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆᐃⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⲆΔΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠⵠΔⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔᐃᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠΔⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆΔⵠᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆⵠⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⵠⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠⲆᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⲆᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠΔΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆΔᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠΔᐃⵠⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⵠΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠΔΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠΔᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃΔΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔⲆᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 31,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆᐃᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠᐃᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: vs,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔΔΔⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃΔⵠᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔᐃⵠⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⲆⵠⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆᐃⲆⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⵠⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔⵠᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠΔᐃΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆΔⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆΔⵠⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔⵠⲆⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆᐃᐃᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⲆΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔΔⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⵠⲆΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔⲆⲆⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Engineer Bag"
      }],
      Δⵠᐃᐃⵠ: [{
        id: fl,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⲆⲆⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⵠᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⲆΔⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆᐃⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔⲆᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⲆΔⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: eg,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⲆⵠⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔᐃΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: $i,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠⲆΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆΔΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: Qr,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⲆΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⵠΔⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: Xk,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠⲆΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⲆⲆⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box"
      }, {
        id: _s,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆᐃⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃᐃⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆΔⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⵠⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔΔᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠΔⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆⲆⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃⲆⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆᐃᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⵠⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠᐃΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆⵠΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠᐃⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃⲆᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⲆⵠᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃΔⵠⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆⲆᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆΔⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆᐃᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠⵠⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃΔᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 19,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⲆⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆⵠⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Beehive"
      }, {
        id: ih,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠΔᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆΔᐃⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃⵠⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⲆⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⲆⵠΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆᐃΔⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃⲆⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃⲆⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⲆᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆΔⲆΔⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⲆᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⵠⵠᐃⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Communist",
        name: "Glass Crate"
      }, {
        id: 16,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆΔⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆⵠⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔᐃⲆⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠΔⲆⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠΔⲆΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆΔⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⲆΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⲆᐃⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⲆⲆⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠΔⵠΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠⵠΔⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃᐃΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃⲆⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠᐃᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆⵠᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆᐃⲆⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 22,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⲆⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔⵠᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: il,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆⲆⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆᐃᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔⲆⲆⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⲆᐃᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆᐃⵠⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆᐃⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔΔᐃⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃΔⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⲆⵠⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃⵠⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆⵠⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆΔⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆᐃᐃΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃⵠΔⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⵠᐃᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔΔⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆⲆⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 45,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔᐃⵠΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⵠᐃᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆᐃΔᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⵠᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Winter Box"
      }, {
        id: qh,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔᐃᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⲆΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆⲆΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⵠⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⲆⵠΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃᐃⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃΔⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔᐃⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆⲆΔᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠⵠⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆⲆⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔᐃⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔⲆⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⵠᐃⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃᐃᐃⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⲆᐃⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆΔΔΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔᐃΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆᐃⵠΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃⵠⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆᐃᐃⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃΔᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⲆⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠⵠⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔⵠΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆᐃΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⲆΔⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠᐃᐃΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠᐃᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆΔⵠΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃⲆΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆΔⲆΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃΔΔⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠᐃΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔᐃⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⲆⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠⲆⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃΔᐃⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠΔⵠΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠⲆᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⲆⲆᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠΔⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔΔᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆⵠⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃᐃΔⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠⵠΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃⲆⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 70,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⲆᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠⲆΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 71,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⵠᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠᐃⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Dragon Box"
      }],
      ᐃⵠΔΔⲆ: [{
        id: 0,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆⵠᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠⲆΔⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆΔⵠΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆΔⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Book 2"
      }, {
        id: lr,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆᐃΔⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃΔⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃᐃᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆᐃᐃᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Book 4"
      }, {
        id: $l,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃΔⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔⵠΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃᐃᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔᐃⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: Ig,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⵠⵠᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⲆΔᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠΔⵠΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⵠⲆᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: Xs,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃⵠⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃᐃᐃΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠΔᐃⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⵠΔⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⲆΔᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔᐃᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Communist",
        name: "Stone Tablet"
      }, {
        id: Ch,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃⲆⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⲆⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⲆⵠΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⲆⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Gold Book"
      }, {
        id: _o,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃⲆⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔᐃΔⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: Zh,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔⲆΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠᐃⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃⲆΔⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔΔⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⲆⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆΔⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔⵠΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆⲆⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠᐃΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⲆⵠⲆⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠΔⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⲆⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: dn,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔᐃΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Diamond Book"
      }, {
        id: Kt,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃΔⲆᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆΔΔⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⲆⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆᐃᐃⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃⲆⵠⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃⲆⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⲆΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃᐃⵠⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔᐃᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔΔΔⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃΔΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔΔᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: Ts,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆΔΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⵠⵠⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⲆⵠᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃⵠⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⲆⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⵠⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔᐃⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃΔⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⵠᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠⲆΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃΔΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆΔⲆᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⵠΔⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔᐃᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆΔᐃᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 33,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔⲆΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⲆᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔⲆΔⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆᐃⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Autumn Book"
      }, {
        id: Lh,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠᐃᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃⲆⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⵠⲆᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠΔⲆⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠᐃΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆΔᐃΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Lava Book 2"
      }, {
        id: so,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃᐃᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃᐃⲆⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠΔΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆΔΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃᐃΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⲆΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔᐃⵠᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃⲆΔᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⵠⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "aloner",
        name: "Mystery Book"
      }],
      ΔⲆⵠⲆⵠ: [{
        id: 0,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⵠⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔᐃⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆΔΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⲆΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠΔⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Heart"
      }, {
        id: Oq,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃⵠΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃᐃⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Flower 1"
      }, {
        id: Fs,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃⵠΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆΔᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bow 1"
      }, {
        id: qq,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⲆᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃΔᐃⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bandage 2"
      }, {
        id: Ar,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⲆᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠᐃⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃⲆᐃⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆⵠΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠᐃᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆⵠΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠΔΔᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃᐃᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆΔⵠΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃᐃᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆᐃᐃΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆΔΔΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆΔⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: Ej,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⲆⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⵠΔⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: Ra,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆⲆᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆΔᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Bow 2"
      }, {
        id: nn,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆᐃΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⵠᐃⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃⲆᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆΔᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆⵠᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⵠⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠⲆᐃⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Clown nose"
      }, {
        id: _l,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃᐃⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃᐃⵠⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃΔᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⵠⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⵠΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠⲆΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠᐃΔⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔΔⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃᐃⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠΔⲆⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠΔⲆᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃⲆᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⵠⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⵠΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠⵠⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆΔⵠΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Ant",
        name: "Hero Mask"
      }, {
        id: $q,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠᐃᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆⵠⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⲆⵠΔᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆⲆᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔⲆⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⲆᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: Ts,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃⲆΔⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠΔᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃΔⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠⵠⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠᐃⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆᐃⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠᐃⲆᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔΔᐃᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆΔⵠᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃᐃⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠⵠⵠᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆⲆⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔᐃᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃᐃΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠΔᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃⵠⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⵠⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔⵠⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 9,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠΔᐃᐃⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⲆΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃᐃΔⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔΔᐃⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃΔⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃⲆⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: rb,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔΔⲆΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃⵠⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃⲆⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆΔⵠᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠΔΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠᐃⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⲆΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠΔᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔⲆΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠΔⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⵠⵠⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⲆⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⵠⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⵠⲆᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔⵠΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔΔⵠᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔⵠᐃⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⲆΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔᐃᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⵠᐃΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠⵠⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⵠⵠᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⵠΔⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆΔⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔᐃΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⲆᐃⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆΔΔⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆᐃⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠⲆⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔΔΔⵠⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⲆⲆᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠΔⵠⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔΔΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃᐃⲆⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃΔᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⲆΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠΔΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔⵠⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃΔⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔᐃΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠΔⵠⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⵠⵠⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "aloner",
        name: "Blood"
      }, {
        id: 27,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔΔΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔⵠⵠᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⵠΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔΔΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⲆⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆⵠⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⲆᐃΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⵠᐃⵠⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠᐃΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔⵠⵠΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆᐃⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆΔⵠΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔΔΔᐃⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔᐃΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔΔᐃΔⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 60,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⵠᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔᐃⵠⵠⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔᐃΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆΔⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃᐃΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃΔⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃᐃΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆⵠΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔᐃΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠΔⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆⲆΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠᐃᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠⲆⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⲆⲆᐃⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠⵠⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⵠᐃΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃᐃᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 45,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔⵠⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆᐃᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 5",
        level: q
      }, {
        id: 46,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠⵠⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔⵠΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆΔⵠⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⵠΔᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 15",
        level: $q
      }, {
        id: 48,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⲆΔⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔᐃⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 20",
        level: vi
      }, {
        id: 49,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠⵠᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆᐃᐃᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⲆᐃᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⵠΔⵠΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⵠΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆᐃⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔⵠⲆΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔΔᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃΔᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⵠⲆΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃΔΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃΔⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔᐃᐃⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆΔᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃⵠΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    kw.ΔⵠⲆΔⵠᐃⲆ = ⲆⵠⵠΔΔᐃⲆ(ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ, 21);
    kw.ⵠⲆⵠⲆⵠⲆᐃ = ⲆⵠⵠΔΔᐃⲆ(ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ, 20);
    ΔΔ[255] = [];
    ΔΔ[7] = [];
    ΔΔ[250] = [];
    ΔΔ[28] = [];
    ΔΔ[29] = [];
    ΔΔ[796] = [];
    for (var a = 0; a < ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ.length; a++) {
      ΔΔ[255][a] = [ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[a].ⵠΔⲆ, ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[a].ⵠᐃᐃ];
      ΔΔ[7][a] = [ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[a].ⵠⲆᐃⵠ, ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[a].ⵠⵠΔᐃ];
    }
    for (a = 0; a < ΔⲆⵠⲆ.ᐃⵠΔΔⲆ.length; a++) {
      ΔΔ[28][a] = [ΔⲆⵠⲆ.ᐃⵠΔΔⲆ[a].ⵠΔⲆ, ΔⲆⵠⲆ.ᐃⵠΔΔⲆ[a].ⵠᐃᐃ];
    }
    for (a = 0; ΔⲆⵠⲆ.Δⵠᐃᐃⵠ.length > a; a++) {
      ΔΔ[250][a] = [ΔⲆⵠⲆ.Δⵠᐃᐃⵠ[a].ⵠΔⲆ, ΔⲆⵠⲆ.Δⵠᐃᐃⵠ[a].ⵠᐃᐃ];
    }
    for (a = Da; ΔⲆⵠⲆ.ⵠⲆᐃᐃ.length > a; a++) {
      ΔΔ[29][a] = [ΔⲆⵠⲆ.ⵠⲆᐃᐃ[a].ⵠΔⲆ, ΔⲆⵠⲆ.ⵠⲆᐃᐃ[a].ⵠᐃᐃ];
    }
    for (a = os; ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ.length > a; a++) {
      ΔΔ[796][a] = [ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ[a].ⵠΔⲆ, ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ[a].ⵠᐃᐃ];
    }
  };
  const cb = wr;
  const mb = ta;
  function pb(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var h = Jl * b;
    var a = e.measureText(c).width + h * rs;
    d.width = a;
    d.height = f;
    yb(e, 0, 0, a, f, b * 10);
    e.globalAlpha = 0.5;
    db(e, "#000");
    e.globalAlpha = Wl;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, h, f / as);
    return d;
  }
  function Cb(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var g = [{
      x: d,
      y: wg
    }];
    var i = [];
    for (var a = 1; a < c; a++) {
      g.push({
        x: d * Math.sin(a * f),
        y: Math.cos(a * f) * d
      });
      var j = g.length;
      i.push(ᐃⵠΔⲆ.ᐃⵠΔᐃⲆⲆⵠ(g[j - 2], g[j - Tl]));
    }
    i.push(ᐃⵠΔⲆ.ᐃⵠΔᐃⲆⲆⵠ(g[g.length - zg], g[0]));
    var k = i[i.length - Wl];
    b.moveTo(k.x, k.y);
    for (a = 0; c > a; a++) {
      b.arcTo(g[a].x, g[a].y, i[a].x, i[a].y, e);
    }
    b.closePath();
  }
  function Tb(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * jk);
  }
  function fb(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, os, e * (Math.PI * pq));
  }
  function zb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 120;
    var j = c * 110;
    var k = i / 2;
    var a = j / 2;
    var m = Jg * c;
    var h = c * 112;
    var l = c * 82;
    var g = h / eh;
    var n = l / Vg;
    var b = c * 4;
    e.width = i;
    e.height = j;
    f.globalAlpha = Wl;
    f.translate(k, a);
    yb(f, -g, -n, h, l, m);
    db(f, d, d, b);
    return e;
  }
  function yb(a, b, c, d, e, f) {
    if (rs * f > d) {
      f = d / xj;
    }
    if (f * 2 > e) {
      f = e / as;
    }
    if (f < In) {
      f = 0;
    }
    a.beginPath();
    a.moveTo(b + f, c);
    a.arcTo(b + d, c, b + d, c + e, f);
    a.arcTo(b + d, c + e, b, c + e, f);
    a.arcTo(b, c + e, b, c, f);
    a.arcTo(b, c, b + d, c, f);
    a.closePath();
  }
  function wb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / Ul, -b.height / rs);
    return c;
  }
  const Pb = zl;
  const Ab = Ds;
  const kb = nn;
  const xb = fn;
  function Jb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(Lr, a * 10);
    e.globalAlpha = b ? 0.5 : ie;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, tl * a, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * Ol, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    db(e, c[0]);
    e.translate(Mg, -Bo * a);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, jg * a, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(ps * a, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    db(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    db(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    db(e, c[3], c[4], a * 4);
    return d;
  }
  function Mb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    Tb(e, a * 26, a * 26, a * 9);
    db(e, c[Lr]);
    Tb(e, a * 56, a * 36, a * 9);
    db(e, c[Xn]);
    Tb(e, a * 40, a * 50, a * se);
    db(e, c[Lt]);
    e.globalAlpha = zs;
    Tb(e, a * 26, a * 26, a * 5);
    db(e, c[0]);
    Tb(e, a * 56, a * 36, a * 5);
    db(e, c[1]);
    Tb(e, a * 40, a * 50, a * Ll);
    db(e, c[lr]);
    return d;
  }
  const Bb = wj;
  function Db(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    yb(e, a * -8.5, a * -63, a * Eg, a * 127, a * hb);
    e.restore();
    db(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    yb(e, a * -8, a * -63, a * ck, a * 126, zg * a);
    e.restore();
    db(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    yb(e, a * -84.5, a * -25.5, a * 169, a * 51, Fs * a);
    e.restore();
    db(e, c[2], c[Hg], nk * a);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    yb(e, a * -85.5, a * -24, a * 169, a * 48, a * Ll);
    e.restore();
    db(e, c[Lg], c[za], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    yb(e, a * -84, a * -23.5, a * 169, a * 47, a * q);
    e.restore();
    db(e, c[It], c[1], a * Rs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    db(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    db(e, c[Wl]);
    return d;
  }
  function Ib(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    yb(e, a * -8, a * -67, a * 16, a * 134, Xn * a);
    e.restore();
    db(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    yb(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    db(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    yb(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    db(e, c[xq], c[1], pl * a);
    e.save();
    e.translate(a * 123, a * 179.5);
    yb(e, a * -83, a * -24.5, a * 166, a * 49, ls * a);
    e.restore();
    db(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    yb(e, a * -82.5, a * -24.5, a * 165, a * 49, a * Os);
    e.restore();
    db(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    db(e, c[1]);
    return d;
  }
  function Eb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    yb(e, -He * a, a * -70.5, a * xs, a * 141, a * 1);
    e.restore();
    db(e, c[Bb]);
    e.save();
    e.translate(a * 69.5, a * 110);
    yb(e, a * -8.5, a * -71, a * Un, a * 143, zs * a);
    e.restore();
    db(e, c[Rq]);
    e.save();
    e.translate(a * 123.5, a * 181);
    yb(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    db(e, c[Vg], c[zg], Vl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, Uh * a, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    db(e, c[lr], c[za], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    db(e, c[3], c[1], Ro * a);
    return d;
  }
  function Sb(a, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = a * 185;
    f.height = a * 240;
    g.globalAlpha = 0.5;
    g.translate(0, a * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 44, a * 137);
    g.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    g.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    g.closePath();
    db(g, d[Bb]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 53, a * 181);
    g.bezierCurveTo(a * 30, a * 164, a * b, a * 150, a * qg, a * 136);
    g.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    g.closePath();
    db(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 63, a * 208);
    g.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    g.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    g.closePath();
    db(g, d[ya]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 130, a * 170);
    g.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    g.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    g.closePath();
    db(g, d[fl]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 39, a * 140);
    g.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    g.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    g.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    g.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    g.closePath();
    db(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, -jn * a);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 44, a * 137);
    g.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    g.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    g.closePath();
    db(g, d[gs], d[2], a * Fr);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 53, a * 181);
    g.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    g.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    g.closePath();
    db(g, d[zg], d[2], a * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 63, a * 208);
    g.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    g.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    g.closePath();
    db(g, d[1], d[lr], Ls * a);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 130, a * 170);
    g.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    g.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    g.closePath();
    db(g, d[zs], d[2], a * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 39, a * 140);
    g.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    g.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    g.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    g.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    g.closePath();
    db(g, d[1], d[2], Ct * a);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 59, a * 99);
    g.bezierCurveTo(a * 71, a * 68, a * 81, a * 68, a * 94, a * 67);
    g.bezierCurveTo(a * 105, a * 66, a * 119, a * 75, a * 123, a * 96);
    g.bezierCurveTo(a * 104, a * 91, a * 101, a * 94, a * 94, a * 97);
    g.bezierCurveTo(a * 76, a * 92, a * 73, a * 93, a * 60, a * 99);
    g.closePath();
    db(g, d[ll], d[2], a * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(a * 47, a * 149);
      g.bezierCurveTo(a * 43, a * 140, a * 48, a * 130, a * 59, a * 127);
      g.bezierCurveTo(a * 77, a * 126, a * 90, a * 131, a * 131, a * 127);
      g.bezierCurveTo(a * 143, a * 130, a * 144, a * 143, a * 132, a * 154);
      g.bezierCurveTo(a * 90, a * 152, a * 90, a * 152, a * 48, a * 150);
      g.closePath();
      db(g, d[zs]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(a * 40, a * 139);
      g.bezierCurveTo(a * 48, a * 113, a * 76, a * 119, a * 91, a * 126);
      g.bezierCurveTo(a * 117, a * 113, a * 135, a * 117, a * 144, a * 134);
      g.bezierCurveTo(a * 144, a * 138, a * 144, a * 138, a * 144, a * 142);
      g.bezierCurveTo(a * 128, a * 124, a * 108, a * 124, a * 91, a * 136);
      g.bezierCurveTo(a * 59, a * 124, a * 50, a * 137, a * 42, a * 148);
      g.closePath();
      db(g, d[sl], d[2], a * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(a * 41, a * 139);
      g.bezierCurveTo(a * 53, a * 117, a * 69, a * 118, a * 92, a * 127);
      g.bezierCurveTo(a * 124, a * 111, a * 136, a * 121, a * 143, a * 136);
      g.bezierCurveTo(a * 142, a * 144, a * 142, a * 144, a * 141, a * 152);
      g.bezierCurveTo(a * 128, a * 131, a * 113, a * 138, a * 92, a * 145);
      g.bezierCurveTo(a * 57, a * 133, a * 57, a * 147, a * 44, a * 154);
      g.closePath();
      db(g, d[3], d[2], tb * a);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 90, a * 95);
    g.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    g.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    g.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    g.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    g.closePath();
    db(g, d[Oq], d[Rl], a * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 90, a * 86);
    g.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    g.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * dg);
    g.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    g.closePath();
    db(g, d[1], d[3], a * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 92, a * 117);
    g.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    g.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    g.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    g.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    g.closePath();
    db(g, d[Tl], d[3], Os * a);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 92, a * 175);
    g.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    g.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    g.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    g.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    g.closePath();
    db(g, d[1], d[nq], a * Vn);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 48, a * 169);
    g.bezierCurveTo(a * 42, a * 187, a * 50, a * 193, a * 59, a * 198);
    g.closePath();
    db(g, undefined, d[2], a * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 136, a * 171);
    g.bezierCurveTo(a * 139, a * 186, a * 138, a * 191, a * 124, a * 199);
    g.closePath();
    db(g, undefined, d[2], a * ba);
    Tb(g, a * 63, a * 180, a * 15.231546211727817);
    db(g, d[4]);
    Tb(g, a * 121, a * 181, a * 15.652475842498529);
    db(g, d[Ng]);
    Tb(g, a * 58, a * 175, a * 5.656854249492381);
    db(g, d[as]);
    Tb(g, a * 116, a * 175, a * 5.656854249492381);
    db(g, d[xj]);
    return f;
  }
  function Qb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    db(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * kb, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    db(d, b[In]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    db(d, b[Da]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    db(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    db(d, b[fl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, Pa * a, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    db(d, b[Zj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * kl);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    db(d, b[wj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * vh, a * 92, a * 117);
    d.closePath();
    db(d, b[Yh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    db(d, b[0]);
    return c;
  }
  function _b(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    Tb(e, a * At, a * 11, a * J);
    db(e, c[In]);
    e.globalAlpha = 0.7;
    Tb(e, Ol * a, a * pk, a * Ar);
    db(e, c[Hi]);
    e.globalAlpha = 1;
    Tb(e, a * 11, a * qg, a * 4);
    db(e, c[In]);
    return d;
  }
  function Fb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * zl);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    yb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * A);
    e.restore();
    db(e, c[Hi], c[Qs], a * Wg);
    e.globalAlpha = Oq;
    e.translate(Hi, a * -vr);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    yb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * ws);
    e.restore();
    db(e, c[mk], c[It], a * nl);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    db(e, c[It], c[3], a * $i);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    db(e, c[3], c[ls], nl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    db(e, c[ta], c[Ya], a * 4);
    Tb(e, a * 68, a * 111.29513549804688, a * 15);
    db(e, c[cq], c[8], Pe * a);
    Tb(e, a * 123, a * 111.29510498046875, a * 15);
    db(e, c[7], c[8], a * 4);
    Tb(e, a * 63, a * 106, a * 5);
    db(e, c[gg]);
    Tb(e, a * 118, a * 106, a * 5);
    db(e, c[rr]);
    return d;
  }
  function Rb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * Ht);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    yb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    db(e, c[wg], c[Lr], a * Ls);
    e.globalAlpha = 1;
    e.translate(0, a * -vr);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    yb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    db(e, c[1], c[2], a * 4);
    e.translate(a * as, Lr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, to * a, a * 122, a * Mn);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * bg, a * 103, a * ml, a * 86, a * 23, a * 72);
    e.bezierCurveTo(ng * a, a * 74, a * 14, a * 78, a * Uk, a * 83);
    e.bezierCurveTo(F * a, a * 65, Mt * a, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * rh, a * 39, rh * a, a * 39, a * Uk, a * 36);
    e.bezierCurveTo(a * 16, a * 33, Kg * a, a * 33, a * ol, a * 30);
    e.bezierCurveTo(Ah * a, a * 27, Us * a, a * 27, Eg * a, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * so);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, Sh * a, a * 74, a * 16, a * 106, Kg * a);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    db(e, c[3], c[$i], Ct * a);
    return d;
  }
  function Gb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    yb(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    db(d, b[In], b[os], a * ls);
    d.translate(a * vg, mj);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * Jg, a * 122, kl * a);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * on, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, oq * a, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * Tn, a * 39, Mi * a, a * 39, Kh * a, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, sh * a, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, gk * a);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    db(d, b[0], b[0], a * $i);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    yb(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    db(d, b[0], b[0], a * 4);
    return c;
  }
  function jb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 40;
    var i = b * 40;
    e.width = g;
    e.height = i;
    var a = g * b / 2;
    var j = i * b / 2;
    var k = b * 15;
    f.save();
    f.translate(a, j);
    f.globalAlpha = Gh;
    Tb(f, wg, 0, k);
    db(f, d[0]);
    k = Zg * b;
    a = b * 2;
    j = b * zs;
    f.translate(a, j);
    f.globalAlpha = zs;
    Tb(f, os, 0, k);
    db(f, d[zg]);
    f.restore();
    return e;
  }
  const Lb = Yg;
  const Wb = I;
  const Ob = vg;
  const Nb = is;
  function qb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 100;
    var j = c * x;
    var k = i / Ob;
    var a = j / 2;
    e.width = i;
    e.height = j;
    var m = c * 5;
    var h = c * 28;
    var l = m / rs;
    var g = h / Rl;
    f.translate(k, a);
    for (var n = Da; n < 4; n++) {
      yb(f, -l, -g, m, h, c * 2);
      f.rotate(Math.PI / gl);
      db(f, d);
    }
    f.arc(Rq, Ih, c * kk, 0, Math.PI * Rl);
    db(f, d);
    f.globalCompositeOperation = "destination-out";
    Tb(f, 0, st, c * 4);
    f.fill();
    return e;
  }
  function Hb(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 32;
    var k = c * 32;
    var a = j / 2;
    var m = k / 2;
    f.width = j;
    f.height = k;
    var h = Fk * c;
    var l = c * 28;
    var g = h / 2;
    var n = l / 2;
    i.translate(c * 0, Lr * c);
    i.translate(a, m);
    if (Tl == e) {
      Tb(i, 0, Ih, kk * c);
      db(i, d[2], d[2], c * ea);
      for (var b = Rq; gl > b; b++) {
        yb(i, -g, -n, h, l, c * 2);
        i.rotate(Math.PI / Vn);
        db(i, d[xq], d[2], c * 4);
      }
    }
    Tb(i, ig, Yh, c * 10);
    db(i, d[0], d[1], c * 1.5);
    for (b = 0; b < 4; b++) {
      yb(i, -g, -n, h, l, c * Vg);
      i.rotate(Math.PI / gl);
      db(i, d[Da], d[wt], c * 1.5);
    }
    Tb(i, Hi, 0, c * gn);
    db(i, d[0]);
    Tb(i, Zj, Zj, c * 4);
    db(i, d[2], d[1], c * 1.5);
    i.globalCompositeOperation = "destination-out";
    Tb(i, wj, 0, ls * c);
    db(i, d[Zj], d[Xn], c * 2);
    i.globalCompositeOperation = "source-over";
    Tb(i, ig, Yh, Pe * c);
    db(i, undefined, d[Xn], c * vg);
    return f;
  }
  function Ub(a) {
    var b = document.createElement("canvas");
    var c = b.getContext("2d");
    var d = a * 200;
    var e = a * 200;
    b.width = d;
    b.height = e;
    var f = ad(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
    c.drawImage(f, wa, Pb);
    f = td(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 21, ws);
    f = td(0.9, _h, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 38, 28);
    f = td(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, v, 37);
    f = td(0.9, Qg, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 32, 45);
    return b;
  }
  const Yb = Mn;
  function Kb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * Fs);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    db(d, b[Yh], b[Hi], a * nj);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    db(d, b[Ih], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    db(d, b[0], b[Da], as * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    db(d, b[Bb], b[Rq], a * Vg);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    db(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    db(d, b[fn]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    db(d, Jo, b[rs], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    db(d, b[mk], b[Vg], xb * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    db(d, b[1], b[Ul], ci * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    db(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    db(d, b[Lg]);
    Tb(d, a * 77, a * 107, a * 6);
    db(d, b[Ob]);
    Tb(d, a * 110, a * 107, a * Rs);
    db(d, b[Vh]);
    Tb(d, a * 75, a * 105, a * 3);
    db(d, b[4]);
    Tb(d, a * 108, a * 105, a * 3);
    db(d, b[tb]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    db(d, b[og]);
    return c;
  }
  function Vb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var k = c * 6;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + k);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    db(f, d[Bb]);
    f.translate(0, -k);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    db(f, d[Wl], d[Ul], Ls);
    var a = c * 155;
    var m = c * 133;
    var h = gn * c;
    var l = c * qo;
    var g = a + -xb * c;
    var n = m + c * -5;
    f.save();
    f.translate(a, m);
    f.globalAlpha = 1;
    Tb(f, ig, 0, h);
    db(f, d[ut]);
    f.restore();
    f.save();
    f.translate(g, n);
    f.globalAlpha = Hg;
    Tb(f, wg, In, l);
    db(f, d[4]);
    f.restore();
    f.save();
    f.translate(a + c * 27, m);
    f.globalAlpha = zs;
    Tb(f, Ih, Rq, h);
    db(f, d[3]);
    f.restore();
    f.save();
    f.translate(c * 27 + g, n);
    f.globalAlpha = za;
    Tb(f, 0, Mg, l);
    db(f, d[Gi]);
    return e;
  }
  function Zb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var h = b * 55;
    var a = b * br;
    e.width = g;
    e.height = h;
    f.translate(b * -65, b * -55 + a);
    f.globalAlpha = gs;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    db(f, d[Yh], d[og], 3);
    f.globalAlpha = zg;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * Uh, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    db(f, d[2], d[yr], 3);
    return e;
  }
  function Xb(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var n = (r = f * 125) / Vh;
    var o = (t = f * 95) / Pn;
    var a = Ch * f;
    var p = f * qk;
    var h = f * 112;
    var l = f * 82;
    var g = h / It;
    var q = l / 2;
    var b = f * Fr;
    j.width = r;
    j.height = t;
    k.translate(n - f * Pl, o + f * 4);
    k.globalAlpha = e ? 0.5 : Gh;
    yb(k, -g, -q, h, l, a);
    db(k, i[0]);
    k.globalAlpha = 1;
    k.translate(0, -p);
    yb(k, -g, -q, h, l, a);
    db(k, i[wt], i[eh], b);
    var r = f * 55;
    var t = f * 45;
    a = nr;
    k.translate(f * -40, f * -30);
    yb(k, Ih, 0, r, t, a);
    db(k, i[ll]);
    var u = qb(f * 0.7, i[Hk]);
    k.drawImage(u, f * 45, f * -25);
    u = qb(f * 0.7, i[Hk]);
    k.drawImage(u, f * 45, f * 15);
    u = qb(f * 1.2, i[3]);
    k.drawImage(u, f * 28, f * -30);
    r = f * 15;
    t = f * 70;
    a = f * hl;
    k.translate(f * 78, -Zg * f);
    yb(k, 0, 0, r, t, a);
    db(k, i[Ct]);
    r = f * 9;
    t = f * 50;
    a = f * 3;
    k.translate(f * -hn, f * Dl);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    yb(k, Da, Qs, r, t, a);
    db(k, i[Eq]);
    k.translate(f * -20, f * 29);
    k.rotate(Math.PI / Fk);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(Lr, 0);
    k.lineTo(0, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    db(k, null, i[Fs], f * 8);
    return j;
  }
  const $b = hb;
  const Ot = Eq;
  function Pt(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + mb * a);
    d.globalAlpha = 0.3;
    Tb(d, a * 213.5, a * 256.75, a * 75);
    db(d, b[5]);
    Tb(d, a * 213.5, a * 175.75, a * 25);
    db(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = wl * a;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[nr];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Ig];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * sg;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * Zh;
    d.strokeStyle = b[Fs];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * bg;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[ib];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -Ll);
    d.globalAlpha = 1;
    Tb(d, a * 213.5, a * 256.75, a * 75);
    db(d, b[3]);
    Tb(d, a * 213.5, a * 175.75, a * 25);
    db(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = Rk * a;
    d.strokeStyle = b[ci];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = Il * a;
    d.strokeStyle = b[I];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * sg;
    d.strokeStyle = b[Hk];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * Ri;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[ut];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = ab * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[mj];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[Mg];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = Xl * a;
    d.strokeStyle = b[Da];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * zh;
    d.strokeStyle = b[Bb];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * Jl;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    Tb(d, a * 213.5, a * 256.75, a * 70);
    db(d, b[0]);
    Tb(d, a * 213.5, a * 175.75, a * Kl);
    db(d, b[Rq]);
    Tb(d, a * 222, a * 166, a * Qr);
    d.fillStyle = b[2];
    d.fill();
    Tb(d, a * 205, a * 166, a * M);
    d.fillStyle = b[2];
    d.fill();
    Tb(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    Tb(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[Wg];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    yb(d, a * -22, a * -21, a * 44, a * 42, a * pl);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    yb(d, a * -15, a * -14.5, a * 30, a * 29, ks * a);
    d.restore();
    d.fillStyle = b[Hg];
    d.fill();
    return c;
  }
  const Qt = bh;
  const Rt = Ga;
  function St(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    yb(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    db(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    yb(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    db(e, b[2], b[og], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    yb(e, a * -96.5, a * -20.5, a * 193, a * 41, Da * a);
    e.restore();
    db(e, b[I], b[Tl], a * Zr);
    e.save();
    e.translate(a * 202.5, a * 275);
    yb(e, a * 96.5, a * -21, a * -193, a * 42, a * Rq);
    e.restore();
    db(e, b[Bb], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    yb(e, a * -116, a * -22, a * 232, a * 44, Bo * a);
    e.restore();
    db(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    yb(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    db(e, b[Tr], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    yb(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    db(e, b[sl], b[ie], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    yb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    db(e, b[3], b[Te], La * a);
    e.save();
    e.translate(a * 108.5, a * 210);
    yb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    db(e, b[ll], b[1], Mt * a);
    e.save();
    e.translate(a * 204, a * 121.5);
    yb(e, a * -92, a * -9.5, a * 184, bl * a, a * 10);
    e.restore();
    db(e, b[3], b[Tr], lg * a);
    e.save();
    e.translate(a * 197, a * 299);
    yb(e, a * 85, a * -rr, a * -170, a * 18, sk * a);
    e.restore();
    db(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    db(e, undefined, b[1], Mt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    db(e, undefined, b[za], a * $a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    db(e, undefined, b[Oq], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    db(e, undefined, b[1], a * 12);
    if (Yh == c) {
      e.scale(Ug, xq);
      e.translate(a * -_s, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      db(e, b[4], b[4], a * mb);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      db(e, b[Js]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      db(e, b[qo]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      db(e, b[4], b[$l], a * ml);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      db(e, undefined, b[0], tl * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      db(e, undefined, b[Lr], a * 20);
      Tb(e, a * 142, a * 221, a * 16.1245154965971);
      db(e, b[0]);
    }
    return d;
  }
  const Tt = yr;
  function Ut(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    Cb(e, ks, a * 54.585977194239184, wt * a);
    e.restore();
    db(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    Cb(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    db(e, c[zg], c[2], a * Sj);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    Cb(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    db(e, c[$b], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    Cb(e, Fg, a * 52.53573932334064, a * zg);
    e.restore();
    db(e, c[zs], c[2], a * Mt);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    Cb(e, Na, a * 57.63465889766331, a * 1);
    e.restore();
    db(e, c[1], c[2], Xi * a);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    Cb(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    db(e, c[1], c[as], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    Cb(e, Rs, a * 52.009614495783374, a * 1);
    e.restore();
    db(e, c[zg], c[as], Xi * a);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    Cb(e, 6, a * 53.16013544000805, a * ie);
    e.restore();
    db(e, c[1], c[as], Sj * a);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Cb(e, 6, a * 50, a * za);
    e.restore();
    db(e, c[1], c[2], Yr * a);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    Cb(e, 6, a * 54, a * 1);
    e.restore();
    db(e, c[$b], c[2], $a * a);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    Cb(e, Ql, a * 55.08175741568164, a * 1);
    e.restore();
    db(e, c[1], c[2], a * Yr);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Cb(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    db(e, c[1], c[Pn], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    Cb(e, 6, a * 49.49747468305833, Hg * a);
    e.restore();
    db(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    db(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    db(e, Za, c[Rl], yg * a);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Cb(e, 6, a * 30, Qh * a);
    e.restore();
    db(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Cb(e, 6, a * 30, a * zi);
    e.restore();
    db(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    Cb(e, Ya, a * 30, a * 15);
    e.restore();
    db(e, c[ut]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    Cb(e, 6, a * 30, a * 15);
    e.restore();
    db(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    Cb(e, Rs, a * 30, a * 15);
    e.restore();
    db(e, c[Lg]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    Cb(e, Ql, a * 30, a * 15);
    e.restore();
    db(e, c[eg]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    Cb(e, 6, a * 30, pg * a);
    e.restore();
    db(e, c[xb]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    Cb(e, 6, a * 30, on * a);
    e.restore();
    db(e, c[nq]);
    return d;
  }
  function Vt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, Ur * a);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    db(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    db(e, c[2], c[1], Wr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    db(e, Jo, c[1], a * di);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    db(e, c[sl], c[es], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    db(e, c[0], c[ie], a * Bk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, Rh * a, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    db(e, c[rs], c[1], a * Kq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    db(e, undefined, c[$b], Kq * a);
    Tb(e, a * 161, a * 201, Dr * a);
    db(e, c[Fs]);
    Tb(e, a * 216, a * 205, a * 8.06225774829855);
    db(e, c[5]);
    Tb(e, a * 216, a * 175, a * 6.708203932499369);
    db(e, c[Ot]);
    Tb(e, a * 271, a * 191, a * 5.0990195135927845);
    db(e, c[nr]);
    Tb(e, a * 206, a * 180, a * 11.180339887498949);
    db(e, c[Ot]);
    return d;
  }
  function Wt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(z * a, a * q);
    e.globalAlpha = b ? 0.5 : mk;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Cb(e, Ar, a * 42.15447781671598, a * Cs);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = ie;
    e.translate(a * -ta, a * -Zg);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Cb(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    db(e, c[1], c[2], es * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Ll, a * Hh);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Cb(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    db(e, c[Rq]);
    e.globalAlpha = 1;
    e.translate(a * -Ot, a * -mb);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Cb(e, Ar, a * 30.463092423455635, a * te);
    e.restore();
    db(e, c[3], c[Pl], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Tb(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -M, -ib * a);
    Tb(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    db(e, c[Ot], c[6], nj * a);
    return d;
  }
  function Xt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    db(e, undefined, c[1], a * rs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    db(e, undefined, c[og], a * pq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    db(e, c[Rq], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    db(e, c[0], c[Tl], a * Lt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    db(e, c[fl], c[og], jk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    db(e, c[Yh], c[ie], a * pq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    db(e, undefined, c[Gh], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    db(e, Hl, c[1], xq * a);
    return d;
  }
  function Yt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : zg;
    e.translate(a * 5, a * Ot);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    db(e, undefined, c[Yh], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    db(e, c[Ih]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    db(e, c[$n]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    db(e, undefined, c[Bq], Vn * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * Hh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    db(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-mb * a, -Fs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    db(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    db(e, El, c[Bq], a * Vn);
    e.globalAlpha = b ? 0.5 : hb;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    db(e, Gs, c[0], a * Os);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = Te;
    e.translate(a * -5, -q * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    db(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    db(e, Hq, c[nk], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * mb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    db(e, undefined, c[0], a * Wg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    db(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    db(e, undefined, c[U], es * a);
    return d;
  }
  const Zt = Rt;
  function $t(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Cb(e, 7, a * 9.848857801796104, a * hl);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = Tl;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Cb(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    db(e, c[8], c[9], Gi * a);
    return d;
  }
  const au = Gh;
  function bu(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var o = n.getContext("2d");
    var a = f * 70;
    var p = f * 70;
    var h = f * 10;
    var l = f * 5;
    n.width = a;
    n.height = p + l;
    for (var g = ig; g < e.length; g++) {
      var q = e[g];
      o.globalAlpha = q.a;
      var r = q.f(i, Ei, q.c);
      o.save();
      o.translate(a / 2 + q.x * f, p / H + q.y * f);
      o.rotate(q.r);
      o.drawImage(r, -r.width / 2, -r.height / 2);
      o.restore();
    }
    var s = [];
    for (g = wg; g < j.length; g++) {
      var d = document.createElement("canvas");
      var t = d.getContext("2d");
      d.width = a;
      d.height = p + l;
      t.globalAlpha = k / 2;
      if (pq == g) {
        yb(t, 0, l, a, p, h);
      } else {
        yb(t, 0, Zj, a, p + l, h);
      }
      db(t, "#081a19");
      t.globalAlpha = k;
      if (Rl == g) {
        yb(t, 0, l, a, p, h);
      } else {
        yb(t, Da, 0, a, p, h);
      }
      db(t, j[g]);
      t.globalAlpha = 1;
      if (g == Lt) {
        t.drawImage(n, wg, l);
      } else {
        t.drawImage(n, 0, 0);
      }
      s.push(pr(d));
    }
    return s;
  }
  function cu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var m = c * 190;
    var a = k / xq;
    var n = m / Hj;
    i.width = k;
    i.height = m;
    var h = c * 10;
    var l = c * 35;
    var g = c * 150;
    var o = l / Vg;
    var b = g / Vg;
    var p = c * 4;
    j.translate(a - c * 5, n - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    yb(j, -o, -b, l, g, h);
    db(j, f[Zj], f[Wl], p);
    j.translate(Ih, 0);
    j.rotate(Math.PI / Wb);
    j.globalAlpha = wt;
    yb(j, -o, -b, l, g, h);
    db(j, f[0], f[Gh], p);
    j.translate(Lr, Ll);
    yb(j, -o / 2, -b / lr, l / 2, g / 3, h - 2);
    db(j, f[1]);
    return i;
  }
  function du(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var h = b * 55;
    e.width = g;
    e.height = h;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    db(f, d[Qs]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    db(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    db(f, false, d[mk], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    db(f, d[2]);
    return e;
  }
  const eu = wj;
  function fu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 370;
    var i = b * 370;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    var h = b * 180;
    f.globalAlpha = 0.2;
    Tb(f, a, j, h);
    db(f, d[os]);
    return e;
  }
  function hu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 145;
    var i = b * 145;
    var a = g / xq;
    var j = i / It;
    e.width = g;
    e.height = i;
    var h = b * 70;
    f.translate(a, j);
    f.globalAlpha = 0.4;
    Tb(f, 0, Bb, h);
    db(f, d[Da]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    Tb(f, Zj, wg, h);
    db(f, d[Rq]);
    h = b * 35;
    f.translate(fl, mj);
    f.globalAlpha = 0.8;
    Tb(f, 0, 0, h);
    db(f, d[hb]);
    h = nh * b;
    f.translate(mj, fl);
    f.globalAlpha = 0.8;
    Tb(f, ig, 0, h);
    db(f, d[2]);
    return e;
  }
  function iu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(-fg * a, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * Ps, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -Gk);
    e.translate(ur * a, vi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, qh * a, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * os, a * 73, qo * a);
    e.bezierCurveTo(a * 51, a * 5, a * 36, Ok * a, a * 25, a * 28);
    e.closePath();
    db(e, c[Gh], c[lr], Fr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * $q, a * 84, a * Cl, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * Qt, a * 96, Vl * a, a * 85, as * a);
    e.bezierCurveTo(a * 59, yr * a, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, da * a, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * Zg, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    db(e, Og, c[Ul], a * 4);
    Tb(e, a * 18, a * 38, a * 14.866068747318506);
    db(e, c[Ng], c[kq], Pl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    db(e, c[1], c[as], ba * a);
    e.translate(a * -$n, a * -Bs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    db(e, c[6], c[Ar], a * va);
    return d;
  }
  function ju(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 205;
    var i = b * 205;
    var a = g / xj;
    var j = i / Ug;
    e.width = g;
    e.height = i;
    var h = b * 100;
    f.translate(a, j);
    f.globalAlpha = 1;
    Tb(f, 0, Rq, h);
    db(f, d[Bb]);
    return e;
  }
  function ku(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var m = c * 190;
    var a = k / 2;
    var n = m / 2;
    i.width = k;
    i.height = m;
    var h = c * 10;
    var l = c * 25;
    var g = c * 180;
    var o = l / Ug;
    var b = g / 2;
    var p = c * 4;
    j.translate(a, n);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = og;
    yb(j, -o, -b, l, g, h);
    db(j, f[Rq], f[1], p);
    j.translate(fl, Bb);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    yb(j, -o, -b, l, g, h);
    db(j, f[0], f[1], p);
    return i;
  }
  function lu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var h = b * 16;
    var a = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / jk, g / 2);
    e.globalAlpha = 1;
    Tb(e, 0, ig, h);
    db(e, c[0], c[Hg], a);
    return d;
  }
  function mu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = b * 32;
    var a = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / Hj, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    Tb(e, 0, Yh, h);
    db(e, c[Mg], c[0]);
    e.translate(wg, -Bi * b);
    e.globalAlpha = 1;
    Tb(e, 0, Qs, h);
    db(e, c[zs], c[2], a);
    return d;
  }
  function nu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -Nl, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, -Iq * a);
    e.translate(ia * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * Yk);
    e.bezierCurveTo(a * 106, a * oq, a * 89, a * Yh, a * 73, qo * a);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * qh, a * 25, a * 28);
    e.closePath();
    db(e, c[Oq], c[pq], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, Nh * a);
    e.bezierCurveTo(a * 107, a * Ol, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * sl, a * 54, a * 7, a * 40, a * m);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    db(e, c[qo]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * Bs, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, fl * a, a * 73, a * 3);
    e.bezierCurveTo(a * 51, z * a, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    db(e, Jo, c[2], ba * a);
    Tb(e, a * Dh, a * 38, a * 14.866068747318506);
    db(e, c[$l], c[ib], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    db(e, c[gs], c[Ul], a * $i);
    e.translate(a * -Nl, a * -rl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    db(e, c[4], c[Zg], a * 4);
    return d;
  }
  function ou(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var m = c * 198;
    var a = c * 140;
    var n = c * 90;
    i.width = k;
    i.height = m;
    var h = c * J;
    var l = c * 25;
    var g = c * 180;
    var o = l / Vg;
    var b = g / 2;
    var p = c * 4;
    j.translate(c * -25, c * 1);
    j.translate(a, n);
    j.rotate(-Math.PI / 5);
    yb(j, -o, -b, l, g, h);
    db(j, f[Da], f[mk], p);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / Tr);
    yb(j, -o, -b, l, g, h);
    db(j, f[ya], f[1], p);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    yb(j, -o, -b, l, g, h);
    db(j, f[0], f[1], p);
    return i;
  }
  const pu = au;
  const qu = Wb;
  function ru(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 283;
    e.height = a * 224;
    f.translate(0, a * 15);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    db(f, c[fl]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    f.closePath();
    db(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    db(f, c[Rq]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    db(f, c[os]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    db(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    db(f, c[eu]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    db(f, c[0]);
    f.translate(ig, a * -15);
    f.globalAlpha = Gh;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(sa * a, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    db(f, er, c[It], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    db(f, Og, c[vg], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    db(f, undefined, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    db(f, Wh, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    db(f, xg, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    db(f, undefined, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    db(f, c[1], c[Rl], zl * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    db(f, undefined, c[1], a * nh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    db(f, undefined, c[1], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    db(f, undefined, c[Xn], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    db(f, undefined, c[zg], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    db(f, T, c[Tl], Bs * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    db(f, undefined, c[zg], a * 20);
    Tb(f, a * 101, a * 155, a * 20.591260281974);
    db(f, c[3]);
    Tb(f, a * 180, a * 155, a * 20.591260281974);
    db(f, c[3]);
    Tb(f, a * 95, a * 148, a * 7.211102550927978);
    db(f, c[4]);
    Tb(f, a * 173, a * 148, a * 7.211102550927978);
    db(f, c[Os]);
    if (d === 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 191, a * 107);
      f.bezierCurveTo(a * 180, a * 104, a * 175, a * 101, a * 180, a * 95);
      f.bezierCurveTo(a * 180, a * 95, a * 181, a * 99, a * 188, a * 103);
      f.bezierCurveTo(a * 191, a * 101, a * 191, a * 95, a * 190, a * 91);
      f.bezierCurveTo(a * 190, a * 91, a * 196, a * 89, a * 195, a * 99);
      f.closePath();
      db(f, c[2]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 206, a * 98);
      f.bezierCurveTo(a * 203, a * 95, a * 200, a * 93, a * 198, a * 101);
      f.bezierCurveTo(a * 194, a * 109, a * 193, a * 109, a * 196, a * 110);
      f.bezierCurveTo(a * 206, a * 115, a * 209, a * 114, a * 211, a * 111);
      f.bezierCurveTo(a * 211, a * 106, a * 208, a * 108, a * 203, a * 108);
      f.bezierCurveTo(a * 193, a * 107, a * 204, a * 101, a * 206, a * 99);
      f.closePath();
      db(f, c[jk]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 172, a * 111);
      f.bezierCurveTo(a * 172, a * 106, a * 174, a * 105, a * 185, a * 109);
      f.bezierCurveTo(a * 190, a * 109, a * 189, a * 114, a * 185, a * 120);
      f.bezierCurveTo(a * 181, a * 125, a * 180, a * 126, a * 176, a * 122);
      f.bezierCurveTo(a * 182, a * 119, a * 187, a * 110, a * 182, a * 112);
      f.closePath();
      db(f, c[lr]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 202, a * 125);
      f.bezierCurveTo(a * 197, a * 117, a * 193, a * 116, a * 193, a * 120);
      f.bezierCurveTo(a * 192.5, a * 124.5, a * 192.5, a * 124.5, a * 192, a * 129);
      f.bezierCurveTo(a * 188, a * 129, a * 187, a * 124, a * 189, a * 120);
      f.bezierCurveTo(a * 191, a * 110, a * 192, a * 110, a * 200, a * 116);
      f.bezierCurveTo(a * 208, a * 120, a * 207, a * 123, a * 202, a * 125);
      f.closePath();
      db(f, c[2]);
    }
    return e;
  }
  function su(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(Bb, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * v, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    db(e, c[mj]);
    e.globalAlpha = gs;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(bg * a, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * sj, a * 83, io * a, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    db(e, c[ie], c[Pn], a * 10);
    return d;
  }
  function tu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : hb;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    yb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    db(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    db(e, c[0]);
    Tb(e, a * 204, a * 693, a * 36.013886210738214);
    db(e, c[0]);
    Tb(e, a * 105, a * 518, a * 30);
    db(e, c[ig]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    db(e, c[mj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    db(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    yb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    db(e, c[ie], c[Ug], a * bb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    db(e, c[3], c[Mq], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    db(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    db(e, c[ji], c[4], bb * a);
    Tb(e, a * 204, a * 693, a * 36.013886210738214);
    db(e, c[U], c[Mq], a * 16);
    Tb(e, a * 105, a * 518, a * 30);
    db(e, c[Ya], c[4], Yb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    db(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    db(e, c[6]);
    Tb(e, a * 204, a * 693, a * 17.029386365926403);
    db(e, c[7]);
    Tb(e, a * 106, a * 518, a * 12);
    db(e, c[7]);
    return d;
  }
  function vu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.max(b.width, a.width);
    var f = Math.max(b.height, a.height);
    c.width = e;
    c.height = f;
    d.drawImage(a, (e - a.width) / xj, (f - a.height) / as);
    d.drawImage(b, (e - b.width) / 2, (f - b.height) / 2);
    return c;
  }
  function wu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    db(d, Hl, b[Da], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    db(d, wr, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    db(d, El, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    db(d, undefined, b[eu], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    db(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    db(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    db(d, b[wg]);
    return c;
  }
  function xu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : og;
    e.translate(qh * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    db(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    yb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    db(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Cb(e, 4, a * 26.476404589747453, xt * a);
    e.restore();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    db(e, c[Qs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = zg;
    e.translate(a * -wq, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    db(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    yb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    db(e, c[4], c[ta], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Cb(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    db(e, c[Tl], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    db(e, c[pu], c[Rl], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    db(e, c[fn]);
    return d;
  }
  function yu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(wj, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, Yb * a, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * ck, a * 39, gk * a, a * 44);
    e.closePath();
    db(e, c[Lr]);
    e.globalAlpha = Hg;
    e.translate(mj, a * -mt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * sr, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, kl * a, a * 39, kl * a, a * 44);
    e.closePath();
    db(e, c[hb], c[2], a * 8);
    return d;
  }
  function zu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(mb * a, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(pg * a, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    db(e, c[st]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * $q, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    db(e, c[1], c[Hj], J * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    db(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    db(e, xg, c[4], a * Ls);
    e.translate(-Y * a, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * Ll, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(Ga * a, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    db(e, c[Hi]);
    e.globalAlpha = Te;
    e.translate(a * -Fk, -Bo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * mt, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    db(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    db(e, c[Js]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    db(e, c[Pn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    db(e, undefined, c[4], a * 4);
    e.translate(Jg * a, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : og;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * ng, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-Fs * a, a * -Ch);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    db(e, c[1], c[vg], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    db(e, c[Ul]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    db(e, undefined, c[Mq], a * 4);
    return d;
  }
  function Au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    db(e, c[0]);
    Tb(e, a * 160.5, a * 243.03125, a * 7);
    db(e, c[Hi]);
    Tb(e, a * 227.5, a * 242.03125, a * Is);
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    db(e, c[In], c[Yh], a * 5);
    Tb(e, a * 194, a * 298, Ns * a);
    db(e, c[Yh], c[Da], q * a);
    e.globalAlpha = 1;
    e.translate(a * -Cs, Cs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    db(e, c[3], c[nl], a * mb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    db(e, c[Gh], c[2], a * 5);
    Tb(e, a * 160.5, a * 243.03125, a * N);
    db(e, c[1], c[2], a * Ot);
    Tb(e, a * 227.5, a * 242.03125, a * Ni);
    db(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    db(e, c[au], c[2], a * 7);
    Tb(e, a * 194, a * 298, se * a);
    db(e, c[Oq], c[2], a * 7);
    return d;
  }
  function Bu(c, d, e, f) {
    var i = document.createElement("canvas");
    var k = i.getContext("2d");
    var m = c * 210;
    var a = c * 205;
    var n = c * 30;
    var h = Ok * c;
    var l = c * 200;
    var g = c * 180;
    var o = l / 2;
    var b = g / 2;
    i.width = m;
    i.height = a;
    i.width = c * 419;
    i.height = c * 412;
    if (f == 1) {
      k.save();
      k.translate(c * jn, c * 0);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      db(k, lj, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      db(k, undefined, d[Pe], c * ci);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      db(k, undefined, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      db(k, tt, d[ba], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      db(k, j, d[Wg], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      db(k, lj, d[es], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      db(k, j, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      db(k, Gs, d[4], c * 3);
      k.restore();
    } else if (Ul == f) {
      k.save();
      k.translate(c * 130, c * 35);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      db(k, Jo, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      db(k, rk, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      db(k, undefined, d[Pl], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      db(k, cg, d[nl], c * Tt);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      db(k, undefined, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      db(k, undefined, d[4], c * sl);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      db(k, undefined, d[4], Wb * c);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      db(k, tt, d[4], c * 3);
      k.restore();
    }
    k.translate(i.width / 2, i.height / Ul);
    if (!f) {
      k.globalAlpha = 0.5;
      yb(k, -o, -b, l, g + h, n);
      db(k, d[fl]);
      if (e) {
        k.rotate(Math.PI);
      }
      k.globalAlpha = 1;
      yb(k, -o, -b, l, g, n);
      db(k, d[zg], d[2], 4);
      k.globalAlpha = 1;
      yb(k, c * 35 - o, c * ws - b, l - c * 50, g - c * 50, n - Ht * c);
      db(k, d[3]);
    }
    if (f == 3) {
      k.translate(-i.width / 2, -i.height / Ul);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      db(k, d[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      db(k, d[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      db(k, d[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      db(k, d[ta]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      db(k, d[5]);
      k.translate(c * M, c * -55);
      k.translate(-ta * c, c * Ds);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      db(k, d[5]);
    } else if (Ct == f) {
      k.translate(-i.width / xj, -i.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 30, c * 167);
      k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, Uh * c, c * 179);
      k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      k.closePath();
      db(k, d[$l]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 26, c * 145);
      k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      k.closePath();
      db(k, d[tb]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 13, c * 193);
      k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * rl, c * 202);
      k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, hq * c, c * 193);
      k.closePath();
      db(k, d[Pe]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      db(k, d[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 335, c * 196);
      k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      k.closePath();
      db(k, d[ls]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 349, c * 212);
      k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      k.closePath();
      db(k, d[nj]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 46, c * 165);
      k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      k.closePath();
      db(k, d[Pl]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      db(k, d[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      db(k, d[Fs]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      db(k, d[Fs]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      db(k, d[ta]);
      k.translate(Ll * c, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      db(k, d[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 367, c * 164);
      k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      k.closePath();
      db(k, d[ba]);
    }
    return i;
  }
  function Cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * to, hn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    db(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    yb(e, a * -14, a * -56.5, a * 28, a * 113, Hr * a);
    e.restore();
    db(e, c[0]);
    Tb(e, a * 122, a * 480, a * 18.439088914585774);
    db(e, c[mj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = zg;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    db(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    yb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    db(e, c[Mq], c[5], a * 12.5);
    Tb(e, a * 122, a * 480, a * 18.439088914585774);
    db(e, c[4], c[Fs], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    db(e, c[4], c[Qr], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * x);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    db(e, c[ub]);
    return d;
  }
  function Du(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = (n = c * 450) / 2;
    var k = (o = c * 145) / 2;
    var a = c * Ht;
    var m = c * 300;
    var h = c * 30;
    var l = m / 2;
    var g = h / 2;
    if (e) {
      var n = c * 145;
      var o = c * 450;
      f.width = n;
      f.height = o;
      i.rotate(Math.PI / as);
      i.save();
      i.globalAlpha = 0.5;
      yb(i, c * 100, c * -110, m, h, a);
      db(i, d[0]);
      i.translate(c * 178, c * -98);
      yb(i, -l, -g - c * 6, c * 100, c * 100, a);
      db(i, d[0]);
      i.translate(c * -50, c * Fs);
      yb(i, c * 220, c * -15, c * 90, c * 90, a);
      db(i, d[In]);
      i.restore();
      i.save();
      i.globalAlpha = zg;
      i.translate(c * 250, c * -63);
      yb(i, -l - Xg * c, -g, m, h, a);
      db(i, d[1], d[as], 4);
      i.translate(c * -70, c * -40);
      yb(i, -l - c * 20, -g, c * 100, c * Nn, a);
      db(i, d[qo], d[gl], 4);
      i.translate(c * -70, c * 15);
      yb(i, c * 220, c * -22, c * 90, c * 90, a);
      db(i, d[yr], d[4], 4);
      yb(i, c * 230, c * -12, c * 55, c * 55, a);
      db(i, d[Hh]);
      i.translate(c * -70, os);
      yb(i, c * -15, -rs * c, c * 60, c * 60, a);
      db(i, d[5]);
      i.restore();
    } else {
      f.width = n;
      f.height = o;
      i.save();
      i.globalAlpha = 0.5;
      i.translate(j, k + c * 10);
      yb(i, -l, -g, m, h, a);
      db(i, d[0]);
      i.translate(c * -65, c * -25);
      yb(i, -l, -g - c * 6, Y * c, c * 100, c * pg);
      db(i, d[0]);
      i.translate(c * -35, -Ot * c);
      yb(i, c * 220, c * -15, c * 90, c * 90, c * 15);
      db(i, d[0]);
      i.restore();
      i.save();
      i.globalAlpha = 1;
      i.translate(c * 240, c * 70);
      yb(i, -l, -g, m, h, a);
      db(i, d[1], d[Ul], 4);
      i.translate(c * -60, c * -40);
      yb(i, -l - c * 20, -g, c * 100, c * x, c * 15);
      db(i, d[qo], d[4], 4);
      i.translate(c * -55, Zk * c);
      yb(i, c * 220, c * -22, c * 90, c * 90, c * 15);
      db(i, d[qu], d[4], 4);
      yb(i, c * 240, c * -oq, c * 55, c * 55, c * 12);
      db(i, d[nr]);
      i.translate(c * 45, c * os);
      yb(i, c * -145, c * -2, c * 60, c * 60, Zr * c);
      db(i, d[Eq]);
      i.restore();
    }
    return f;
  }
  function Eu(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 105;
    var k = c * 125;
    var a = c * 4;
    var m = c * 10;
    var h = c * Ig;
    var l = c * 10;
    var g = c * 110;
    var n = l / lr;
    var b = g / Ug;
    f.width = j;
    f.height = k;
    i.save();
    i.globalAlpha = d ? 0.5 : 1;
    i.translate(j / Rl + c * Es, k / lr + h);
    yb(i, -n, -b, l, g, m);
    db(i, d ? e[0] : e[gs]);
    i.translate(c * -130 + h, c * -128 + h);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    db(i, e[eh]);
    i.restore();
    i.translate(j / lr + 8, k / Vg);
    i.globalAlpha = 1;
    yb(i, -n, -b, l, g, m);
    db(i, e[ub], e[ls], a);
    i.translate(c * -130, c * -125);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    db(i, e[q], e[Ck], a);
    return f;
  }
  function Fu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = bb * b;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / pq);
    e.globalAlpha = 0.5;
    Tb(e, 0, fl, h);
    db(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  function Gu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : zs;
    e.translate(to * a, wq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    db(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    yb(e, a * -15.5, a * -63, a * 31, a * 126, kk * a);
    e.restore();
    db(e, c[0]);
    Tb(e, a * 121, a * 480, a * 20.396078054371138);
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * sa, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = Te;
    e.translate(a * -qh, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    db(e, c[Xn], c[xq], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    yb(e, a * -15.5, a * -63, a * 31, a * 126, xt * a);
    e.restore();
    db(e, c[4], c[5], a * 12.5);
    Tb(e, a * 121, a * 480, a * 20.396078054371138);
    db(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * _j, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    db(e, c[1], c[Hj], a * 12.5);
    return d;
  }
  function Hu(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 121;
    e.height = a * 130;
    f.translate(Rq, vi * a);
    if (c == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 6, a * 23);
      f.bezierCurveTo(a * 6, a * 46, qq * a, a * 46, a * pl, a * 69);
      f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
      f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
      f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, Hk * a);
      f.bezierCurveTo(a * 47, Bk * a, a * 47, po * a, a * 38, a * 25);
      f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, a * 6, a * 23);
      f.closePath();
      db(f, undefined, b[3], ja * a);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 6, a * 23);
    f.bezierCurveTo(Vl * a, a * 46, a * 6, a * 46, ji * a, a * 69);
    f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
    f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
    f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, ll * a);
    f.bezierCurveTo(a * 47, a * 14, a * 47, a * yl, a * 38, a * 25);
    f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, Rs * a, a * 23);
    f.closePath();
    db(f, b[1], b[2], a * 4);
    if (d == 1) {
      f.translate(0, Ll * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      db(f, undefined, b[0], a * 10);
      f.translate(ea, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, a * 17);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      db(f, Jo, b[0], a * 10);
      f.translate(Tt, Qs * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, Jl * a);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      db(f, undefined, b[Ih], a * Ht);
      if (c == 1) {
        f.translate(a * -6, a * -q);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 67, a * 30);
        f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
        db(f, undefined, b[3], Pj * a);
        f.translate(3, Ih * a);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 70, a * 17);
        f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
        db(f, undefined, b[3], a * W);
        f.translate(Hk, Hi * a);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 76, aa * a);
        f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
        db(f, undefined, b[3], a * rg);
        f.translate(-Fg, a * Lr);
      } else {
        f.translate(a * -6, a * -Hh);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      db(f, cg, b[2], a * Cs);
      f.translate(sl, a * ya);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, a * qa);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      db(f, T, b[xj], xt * a);
      f.translate(3, Lr * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, a * 8);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      db(f, cb, b[2], J * a);
    } else {
      if (zs == c) {
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        db(f, undefined, b[ub], a * Ik);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        db(f, Wh, b[3], a * Ik);
      } else {
        f.translate(Hi, a * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        db(f, undefined, b[ya], a * 7);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        db(f, undefined, b[0], a * 7);
        f.translate(0, a * 5);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 108, a * 27);
      f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
      f.closePath();
      db(f, undefined, b[eh], a * Ni);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 79, a * 30);
      f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
      f.closePath();
      db(f, undefined, b[2], a * Xs);
    }
    return e;
  }
  function Iu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : hb;
    e.translate(a * rl, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * Lh);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * z);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    db(e, c[Hi]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    db(e, c[ig]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * yh, a * 323, a * Hr, a * 323, a * 9, a * 313);
    e.closePath();
    db(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    yb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * kk);
    e.restore();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    db(e, c[Qs]);
    e.globalAlpha = 1;
    e.translate(a * -20, -qr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * Lh);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, ta * a);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    db(e, c[1], c[as], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    db(e, c[I]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * Mi);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    db(e, cn, c[2], a * ia);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    db(e, c[4], c[5], fg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(Iq * a, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    db(e, c[Pe], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    yb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    db(e, c[Ng], c[Zg], tg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    db(e, c[Qa]);
    return d;
  }
  const Ju = Mn;
  function Ku(a, b, c) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 217;
    e.height = a * 215;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 79, a * 113);
    f.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    f.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    f.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    f.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    f.closePath();
    db(f, c[Te], c[2], a * nl);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 154, a * 103);
    f.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    f.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    f.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    f.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    f.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    f.closePath();
    db(f, c[1], c[2], a * Os);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60, a * 46);
    f.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    f.bezierCurveTo(a * 52, a * 12, a * 52, _l * a, a * 49, a * 24);
    f.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    f.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    f.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    f.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    f.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    f.closePath();
    db(f, c[ba], c[5], a * Ct);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 50);
    f.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    f.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    f.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    f.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    f.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    f.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    f.closePath();
    db(f, c[4], c[M], tb * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 51, a * 40);
    f.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    f.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    f.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    f.closePath();
    db(f, c[Rr]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 29, a * 48);
    f.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    f.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    f.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    f.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    f.closePath();
    db(f, c[$n]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 89, a * 61);
    f.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    f.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    f.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    f.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    f.closePath();
    db(f, c[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 99, a * 59);
    f.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    f.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    f.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    f.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    f.closePath();
    db(f, c[$n]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 62);
    f.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    f.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    f.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    f.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    f.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    f.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    f.closePath();
    db(f, c[nj], c[hl], Ls * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 130);
    f.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    f.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    f.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    f.closePath();
    db(f, c[Dg]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 119);
    f.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    f.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    f.bezierCurveTo(a * 36, ar * a, a * 49, a * 102, a * 53, a * 95);
    f.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    f.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    f.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    f.closePath();
    db(f, c[$o], c[sk], Ct * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 64);
    f.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    f.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    f.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    f.closePath();
    db(f, c[aa]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 65);
    f.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    f.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    f.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    f.closePath();
    db(f, c[Dg]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 51, a * 112);
    f.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    f.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    f.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    f.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    f.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    f.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    f.closePath();
    db(f, c[fk], c[Lb], a * $i);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 50, a * 114);
    f.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    f.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    f.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    f.closePath();
    db(f, c[11], c[pt], a * es);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 85, a * 152);
    f.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    f.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    f.closePath();
    f.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    db(f, c[11], c[Ol], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 104, a * 166);
    f.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    f.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    f.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    f.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    f.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    f.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    f.closePath();
    db(f, c[Pg], c[Bo], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105, a * 168);
    f.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    f.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    f.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    f.closePath();
    db(f, c[10]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 102, a * 169);
    f.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    f.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    f.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    f.closePath();
    db(f, c[Lo], c[9], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 64, a * 107);
    f.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    f.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    f.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    f.closePath();
    db(f, c[tk], c[kg], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 40, a * 108);
    f.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    f.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    f.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    f.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    f.closePath();
    db(f, c[d], c[bh], ba * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 189, a * 106);
    f.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    f.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    f.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    f.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    f.closePath();
    db(f, c[8]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 69, a * 178);
    f.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    f.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    db(f, undefined, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 161);
    f.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    f.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    db(f, tt, c[Js], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 91, a * 29);
    f.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    f.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    db(f, undefined, c[6], Fr * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107, a * 33);
    f.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    f.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    db(f, Wh, c[Ya], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 98);
    f.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    f.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    f.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    f.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    f.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    f.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    f.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    f.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    f.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    db(f, tt, c[3], es * a);
    return e;
  }
  function Lu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(Rq, Bo * a);
    Tb(e, a * 42, a * 43, a * 24.758836806279895);
    db(e, c[Da]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, _j * a, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    db(e, c[0]);
    e.translate(0, a * -J);
    Tb(e, a * 42, a * 43, a * 24.758836806279895);
    db(e, c[wt], c[rs], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    db(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    db(e, c[hb], c[Ul], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, Fl * a, a * 48, a * Pa, a * 52, a * 16);
    e.closePath();
    db(e, c[3], c[4], kq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    db(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    db(e, c[3], c[4], a * Ot);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * Ka, a * 39, _o * a, a * 38, a * 18, a * 37);
    e.closePath();
    db(e, c[Wb], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    db(e, c[Hk], c[Mq], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    db(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    db(e, c[ub], c[Ng], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    db(e, c[3], c[gl], a * Hh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    db(e, c[3], c[nl], a * Ig);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * vi, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * Dl, a * 53);
    e.closePath();
    db(e, c[fn], c[ba], Hh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    db(e, c[3], c[es], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    db(e, c[3], c[Os], Ll * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    db(e, c[ut], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    db(e, c[Hk], c[4], a * Fs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    db(e, c[Js], c[4], mb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    db(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    db(e, c[3], c[Ls], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    db(e, c[5], c[Vl], a * mb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    db(e, c[7], c[Jl], a * 5);
    return d;
  }
  function Mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : hb;
    e.translate(Bb, a * Yg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(ih * a, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, wl * a, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = mk;
    e.translate(Lr, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * Zl, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    db(e, c[1], c[2], a * Vn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, A * a, a * 76, a * 23, a * 62);
    e.closePath();
    db(e, c[Lg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, nh * a);
    e.bezierCurveTo(a * 59, a * m, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    db(e, c[eg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    db(e, c[qo]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    db(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(Ak * a, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * Uh, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    db(e, c[Os], c[5], a * 4);
    Tb(e, a * 107, a * 152, a * 9);
    db(e, c[6]);
    Tb(e, a * 105, a * 173, a * Lo);
    db(e, c[Na]);
    Tb(e, a * 87, a * 161, a * 9);
    db(e, c[6]);
    Tb(e, a * 106, a * 147, a * ls);
    db(e, c[7]);
    Tb(e, a * 104, a * 167, Mq * a);
    db(e, c[7]);
    Tb(e, a * 86, a * 154, a * Ng);
    db(e, c[Cg]);
    return d;
  }
  function Nu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var i = b * 90;
    var a = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, sa * b, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    db(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    db(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    db(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    db(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    db(f, d[0], d[zs], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * ar, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    db(f, d[fl], d[1], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, Uh * b, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    db(f, d[0], d[Hg], a);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / M);
    f.globalAlpha = Oq;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    db(f, d[0], d[og], a);
    f.restore();
    return e;
  }
  function Ou(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Ok, a * Jg);
    e.translate(a * -wq, -Jg * a);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    yb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Ak, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    db(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    yb(e, a * -14, a * -61, a * 28, a * 122, gn * a);
    e.restore();
    db(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    db(e, c[Wl], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    db(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    db(e, c[1], c[as], a * 12.5);
    e.globalAlpha = Gh;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    db(e, c[Hk]);
    return d;
  }
  function Pu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    db(e, c[wj], c[za], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    db(e, c[Lr], c[Te], a * qk);
    Tb(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    db(e, c[2]);
    Tb(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    db(e, c[rs]);
    Tb(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    db(e, c[2]);
    Tb(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    db(e, c[as]);
    Tb(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    db(e, c[2]);
    Tb(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    db(e, c[rs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    db(e, c[ci], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    db(e, c[fn], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    db(e, c[eg], c[$i], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    db(e, c[3], c[4], nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    db(e, c[3], c[nj], $i * a);
    return d;
  }
  const Qu = Oj;
  function ed(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 220;
    var i = b * 230;
    var a = b * 100;
    var j = a / es;
    var h = b * 20;
    e.width = g;
    e.height = i;
    f.translate(g / eh, i / 2 + h);
    f.globalAlpha = 0.5;
    Cb(f, ia, a, j);
    db(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    Cb(f, ia, a, j);
    db(f, d[$b]);
    Cb(f, ji, a * 0.65, j * 0.65);
    db(f, d[Vg]);
    return e;
  }
  function id(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 220;
    var a = b * 220;
    var j = b * Ph;
    var h = j / 4;
    f.width = i;
    f.height = a;
    g.translate(i / xj, a / Vg);
    g.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      g.translate(In * b, b * -8);
    }
    Cb(g, 7, j, h);
    db(g, c ? d[Da] : d[gs]);
    g.globalAlpha = za;
    if (st == e) {
      Cb(g, Th, j * 0.65, h * 0.65);
      db(g, d[2]);
    } else if (e == pu) {
      g.translate(b * 20, b * 20);
      Cb(g, 6, j * 0.45, h * 0.4);
      db(g, d[Lt]);
    }
    return f;
  }
  function td(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = Sa * b;
    var i = b * Ik;
    e.width = g;
    e.height = i;
    var a = b * 9;
    var j = b * 9;
    var k = b * 8;
    f.save();
    f.translate(a, j);
    f.globalAlpha = Wl;
    Tb(f, 0, 0, k);
    db(f, d[0]);
    k = b * 3;
    a = Lr;
    j = b * -fn;
    f.translate(a, j);
    f.globalAlpha = zg;
    Tb(f, Mg, 0, k);
    db(f, d[1]);
    f.restore();
    return e;
  }
  function nd(f, e, i, j, k, m, n, a, o, h, l) {
    if (l === Og) {
      l = 0;
    }
    var p = document.createElement("canvas");
    var q = p.getContext("2d");
    m = m ? f * m : 0;
    var b = Math.floor(f * i);
    q.font = b + "px Baloo Paaji";
    q.lineJoin = "round";
    a *= f;
    var t = n ? a * 2 : 0;
    if (o) {
      var d = Math.min(q.measureText(e).width + Ob * f + t, o);
    } else {
      d = q.measureText(e).width + f * 2 + t + l * f * 2;
    }
    b = f * (b + m + l) + t;
    p.width = d;
    p.height = b;
    if (n) {
      q.fillStyle = n;
      yb(q, mj, 0, d, b, Hj * a);
      q.fill();
      q.translate(a, a);
    }
    q.textBaseline = "middle";
    q.font = i + "px Baloo Paaji";
    q.lineJoin = "round";
    if (k) {
      q.beginPath();
      q.fillStyle = k;
      q.fillText(e, 0, b / 2 + m - t / Hj, d);
    }
    q.beginPath();
    if (h) {
      q.strokeStyle = h;
      q.lineWidth = l;
      q.strokeText(e, l, (b - t) / 2, d);
    }
    q.fillStyle = j;
    q.fillText(e, l, (b - t) / 2, d);
    return p;
  }
  function od(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 180;
    var i = b * 210;
    var a = (h = b * 60) / Ls;
    var j = b * 20;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(g / Ob - b * Hi, i / 2 - b * 35 + j);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * Mg, -rl * b);
    Cb(f, 5, h, a);
    db(f, d[Lr]);
    f.restore();
    f.save();
    f.translate(g / xj + b * 10, i / 2 + b * 15 + j);
    f.rotate(Math.PI / Vh);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -Xa);
    Cb(f, kq, h, a);
    db(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 50, i / It + b * 40 + j);
    f.rotate(Math.PI / yr);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    Cb(f, 5, h, a);
    db(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - Zj * b, i / Vg - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = zg;
    f.translate(wj * b, -qr * b);
    Cb(f, Oj, h, a);
    db(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 + kk * b, i / 2 + b * Qh);
    f.rotate(Math.PI / pq);
    f.globalAlpha = 1;
    f.translate(ig, b * -20);
    Cb(f, q, h, a);
    db(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 50, i / 2 + b * 40);
    f.rotate(Math.PI / Hk);
    f.globalAlpha = 1;
    f.translate(Da, b * -20);
    Cb(f, Ll, h, a);
    db(f, d[pu]);
    f.restore();
    var h;
    a = (h = b * 30) / tb;
    f.save();
    f.translate(g / as + b * 5, i / Ug - qi * b);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -wq);
    Cb(f, q, h, a);
    db(f, d[H]);
    f.restore();
    f.save();
    f.translate(g / Hj + b * 0, i / lr + b * zl);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(ig, b * -20);
    Cb(f, 5, h, a);
    db(f, d[Lt]);
    f.restore();
    f.save();
    f.translate(g / vg - b * 45, i / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(wg, b * -Ok);
    Cb(f, Oj, h, a);
    db(f, d[2]);
    f.restore();
    Tb(f, g / 2 - b * 7, i / 2 + Is * b, Eq);
    db(f, d[2]);
    return e;
  }
  function rd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 120;
    var i = b * 150;
    var a = b * 60;
    var j = a / 4;
    var h = b * 15;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(g / 2 + b * 0, i / It + Hi * b + h);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    Cb(f, 8, a, j);
    db(f, d[mj]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 11, i / 2 + oq * b);
    f.globalAlpha = 1;
    f.rotate(Math.PI / ea);
    f.translate(0, -h);
    Cb(f, 8, a, j);
    db(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 9, i / 2 - b * Yr);
    f.rotate(Math.PI / 2.8);
    Cb(f, 5, a * 0.5, j * 0.4);
    db(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 + bn * b, i / Hj + b * z);
    f.rotate(Math.PI / pu);
    Cb(f, 5, a * 0.5, j * 0.4);
    db(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / Vg - b * 8, i / vg + b * 20);
    f.rotate(Math.PI / 2.25);
    Cb(f, 5, a * 0.5, j * 0.4);
    db(f, d[lr]);
    f.restore();
    return e;
  }
  function ad(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var i = b * 150;
    var a = Ra * b;
    var j = b * 4;
    e.width = g;
    e.height = i;
    f.translate(b * -50, b * -38 + a);
    f.globalAlpha = c ? 0.5 : pu;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    db(f, d[Mg]);
    f.translate(Mg, 0 - a);
    f.globalAlpha = zs;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    db(f, d[1], d[2], j);
    return e;
  }
  const sd = ie;
  function hd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, Bo * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    yb(e, 0, 0, a * 400, a * 220, a * 30);
    db(e, c[0]);
    e.globalAlpha = wt;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Ns, a * 5);
    e.bezierCurveTo(a * 381, a * jk, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, Mq * a, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * xq, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * Ls, a * 30.5, a * 4, a * 30.5, es * a, Us * a);
    e.bezierCurveTo(a * 16, a * 18.5, _l * a, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, fk * a, a * hl);
    e.closePath();
    db(e, c[pq], c[1], a * $g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Oj * a, a * 70);
    e.bezierCurveTo(a * kq, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * Ds, a * 108);
    e.bezierCurveTo(wt * a, a * 106, a * 5, a * 106, a * Qr, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, Na * a, a * 71);
    e.closePath();
    db(e, c[3], c[1], a * $g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * Zg, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * qq, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    db(e, c[lr], c[1], da * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(ie * a, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * Vq, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * tb, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    db(e, c[Tt], c[hb], a * 12);
    Tb(e, a * 41, a * 30, a * 14.7648230602334);
    db(e, c[3], c[1], a * 12);
    Tb(e, a * 369, a * 30, a * 15.556349186104045);
    db(e, c[ut], c[Oq], a * 12);
    Tb(e, a * 364, a * 190, a * 15.620499351813308);
    db(e, c[3], c[hb], a * 12);
    Tb(e, a * 41, a * 186, a * 15.556349186104045);
    db(e, c[3], c[1], $a * a);
    return d;
  }
  function ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Cb(e, Vl, a * 146, a * 30);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Cb(e, U, a * 146, a * 30);
    e.restore();
    db(e, c[Hg], c[2], E * a);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Cb(e, Rs, a * 105, a * 30);
    e.restore();
    db(e, c[ll], c[ci], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(Ih);
    Cb(e, Na, a * 66, a * 30);
    e.restore();
    db(e, c[Os], c[Vg], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    Cb(e, $k, Zh * a, a * Hr);
    e.restore();
    db(e, c[As]);
    e.save();
    e.translate(a * 163, a * 168);
    Cb(e, 7, a * 25, a * 8);
    e.restore();
    db(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    Cb(e, 7, a * 11, zj * a);
    e.restore();
    db(e, c[Th]);
    e.save();
    e.translate(a * 167, a * 122);
    Cb(e, 7, a * 12, a * Vr);
    e.restore();
    db(e, c[U]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    db(e, Gs, c[Ul], a * Bi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    db(e, undefined, c[2], zj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * ar);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    db(e, xg, c[2], a * 8);
    return d;
  }
  function gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(Ar * a, a * mt);
      e.scale(0.9, 0.9);
      e.save();
      yb(e, a * fl, a * ta, a * 90, a * 60, 10);
      db(e, b[Bb]);
      e.globalCompositeOperation = "destination-out";
      Tb(e, a * 25, a * 40, a * 10);
      e.fill();
      Tb(e, a * 65, a * 40, Yg * a);
      e.fill();
      e.restore();
      e.save();
      yb(e, 0, 0, a * 90, a * 60, a * 10);
      db(e, b[ie]);
      e.globalCompositeOperation = "destination-out";
      Tb(e, a * 25, a * 40, J * a);
      e.fill();
      Tb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(_o * a, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      db(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      db(e, b[$b]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      db(e, b[Hg]);
      e.restore();
      e.save();
      yb(e, 0, a * 15, a * 90, a * 50, a * te);
      db(e, b[Da]);
      yb(e, 0, te * a, a * 90, a * 50, a * 10);
      db(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      Tb(e, a * 25, a * 40, a * 10);
      e.fill();
      Tb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function ud(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    db(e, c[0], c[st], a * xt);
    e.translate(Hi * a, -wa * a);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    db(e, c[Ug], c[3], gn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    db(e, c[2], c[Hk], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    db(e, c[Ob], c[Wb], Ht * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    db(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    db(e, c[1], c[1], Ht * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    db(e, c[1], c[1], Ht * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    db(e, c[Rl], c[3], a * vr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    db(e, c[Hg], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    db(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    db(e, c[2], c[ea], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    db(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    db(e, c[2], c[3], a * Pb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    db(e, c[gs], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    db(e, c[2], c[3], lg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    db(e, c[2], c[3], a * Ht);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    db(e, c[1], c[1], au * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    db(e, c[sl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    db(e, c[2], c[Js], a * vr);
    Tb(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    db(e, c[4], c[ib], a * 1);
    Tb(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    db(e, c[4], c[5], a * 1);
    Tb(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    db(e, c[nj], c[5], pu * a);
    Tb(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    db(e, c[Ls], c[5], au * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    db(e, c[Ng], c[5], a * J);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    db(e, c[6]);
    return d;
  }
  function bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    db(e, c[On], c[yh], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    db(e, c[Hr], c[8], a * wa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    db(e, c[Jl], c[zh], a * Lb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    db(e, c[8], c[Xl], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    db(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    db(e, c[Dg], c[8], Yg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    db(e, c[Gk], c[8], js * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    db(e, c[8], c[Dg], a * Ht);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    db(e, c[br], c[8], a * sk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    db(e, c[Tl], c[Ob], a * nj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    db(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    db(e, c[og], c[It], a * ba);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    db(e, c[ie], c[2], a * nl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    db(e, c[3], c[jk], Os * a);
    Tb(e, a * 108.5, a * 148.421875, fk * a);
    db(e, c[Fk]);
    Tb(e, a * 106.5, a * 144.421875, ci * a);
    db(e, c[Qa]);
    Tb(e, a * 46.5, a * 148.421875, a * pn);
    db(e, c[Oj]);
    Tb(e, a * 44.5, a * 144.421875, a * Js);
    db(e, c[ji]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    db(e, c[3], c[xj], tb * a);
    e.beginPath();
    e.translate(mj, -Vh * a);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    db(e, c[sl], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    db(e, c[Pe]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    db(e, c[qo], c[2], a * Fr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    db(e, c[Tr], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    db(e, c[Vl], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    db(e, c[Qa], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    db(e, c[6], c[jh], a * H);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    db(e, c[Ya], c[fg], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    db(e, c[3], c[xq], a * Mq);
    return d;
  }
  function vd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, Kl * a);
    e.globalAlpha = b ? 0.5 : au;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    yb(e, a * -11.5, a * -226, a * 23, a * 452, te * a);
    e.restore();
    db(e, c[Mg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    db(e, c[wj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    db(e, c[In]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    db(e, c[Hi]);
    e.translate(a * -Jg, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(st);
    yb(e, a * -11.5, a * -226, a * 23, a * 452, a * xt);
    e.restore();
    db(e, c[1], c[2], aa * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    db(e, c[Lg], c[nl], br * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    db(e, c[3], c[4], a * br);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    db(e, c[Fs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    db(e, c[6], c[$n], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    db(e, c[E]);
    return d;
  }
  function dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, Js);
    yb(e, a * 24, a * 26, a * 70, a * Ca, lg * a);
    db(e, c[0]);
    yb(e, a * 26, a * 70, a * 70, a * Lo, a * vr);
    db(e, c[0]);
    yb(e, a * Fk, a * Wb, a * 22, a * 94, a * 5);
    db(e, c[0]);
    yb(e, a * 40, a * fn, a * 22, a * 94, a * 5);
    db(e, c[wg]);
    yb(e, a * 75, ub * a, a * 22, a * 94, a * 5);
    db(e, c[0]);
    e.globalAlpha = Hg;
    e.translate(-yr, -qu);
    yb(e, a * 24, a * 26, a * 70, a * 9, Ht * a);
    db(e, c[au]);
    yb(e, a * 26, a * 70, a * 70, Lo * a, a * 10);
    db(e, c[Gh]);
    yb(e, a * hl, a * 3, a * 22, a * 94, a * 5);
    db(e, c[xj], c[3], Ct * a);
    yb(e, a * 40, a * 3, a * 22, a * 94, a * z);
    db(e, c[2], c[3], a * tb);
    yb(e, a * 75, a * 3, a * 22, a * 94, Eq * a);
    db(e, c[Pn], c[Tr], a * 4);
    return d;
  }
  function cd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * Gl, a * 127.13540649414062, a * vi, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    db(e, c[Ih], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    db(e, c[1]);
    return d;
  }
  function md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(Zj, a * 10);
    e.globalAlpha = Te;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    db(e, c[Lr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    db(e, c[0]);
    e.translate(Mg, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    db(e, c[1], c[2], He * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    db(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    db(e, Gs, c[2], a * Es);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    db(e, undefined, c[2], tb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    db(e, undefined, c[Ug], a * Ng);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    db(e, c[1], c[pq], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    db(e, c[nq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    db(e, c[3]);
    return d;
  }
  function pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * Ch, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(nr * a, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    db(e, c[os]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    db(e, c[og], c[2], pg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, ws * a, a * 239, th * a, a * 159);
    e.bezierCurveTo(Eq * a, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    db(e, c[3], c[ba], a * 15);
    return d;
  }
  function Cd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : zs;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    db(e, rk, c[0], dn * a);
    e.translate(0, a * -5);
    e.globalAlpha = Gh;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    db(e, c[nq], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    db(e, c[wt], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    db(e, lj, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    db(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    db(e, c[hb], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    db(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    db(e, c[$l], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    db(e, El, c[2], a * ke);
    return d;
  }
  function Td(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    Tb(d, a * 55, a * 55, a * 55);
    db(d, b[0]);
    return c;
  }
  function fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * te);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    db(e, c[Bb]);
    e.globalAlpha = Wl;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    db(e, c[1], c[2], a * 10);
    return d;
  }
  function zd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    Tb(d, a * 86.5, a * 98, a * 80);
    db(d, b[Da]);
    d.globalAlpha = za;
    Tb(d, a * 86.5, a * 89, a * 81);
    db(d, b[Wl], b[Lt], a * nl);
    Tb(d, a * 86.5, a * 86, a * 59);
    db(d, b[Lg], b[4], Fr * a);
    d.globalAlpha = 0.5;
    Tb(d, a * 86.5, a * 95, a * 34);
    db(d, b[fl]);
    d.globalAlpha = 1;
    Tb(d, a * 86.5, a * 89, a * 34);
    db(d, b[hl]);
    return c;
  }
  function yd() {
    var b = Ww.time;
    if (ΔΔ[285]) {
      ho.drawImage(ΔΔ[285][b][1], bo + 480, lq + 190);
      ho.drawImage(ΔΔ[285][b][2], bo + 180, lq - 430);
      ho.drawImage(ΔΔ[285][b][og], bo - 855, lq + 100);
      ho.drawImage(ΔΔ[285][b][0], bo - 550, lq - 300);
      ho.drawImage(ΔΔ[285][b][st], bo - 1020, lq - 520);
    }
    if (ΔΔ[108]) {
      ho.drawImage(ΔΔ[108][b][sd], bo - 80, lq - 640);
      ho.drawImage(ΔΔ[108][b][Te], bo + 80, lq + 490);
      ho.drawImage(ΔΔ[108][b][2], bo - 180, lq - 700);
      ho.drawImage(ΔΔ[108][b][wj], bo + 550, lq + 100);
      ho.drawImage(ΔΔ[108][b][1], bo + 450, lq + 300);
      ho.drawImage(ΔΔ[108][b][gs], bo + 780, lq + 300);
      ho.drawImage(ΔΔ[108][b][2], bo + 980, lq + 200);
      ho.drawImage(ΔΔ[108][b][eh], bo + 680, lq + 600);
      ho.drawImage(ΔΔ[108][b][H], bo - 380, lq + ql);
      ho.drawImage(ΔΔ[108][b][2], bo + 280, lq + 250);
    }
    if (ΔΔ[110]) {
      ho.drawImage(ΔΔ[110][b][Mg], bo - 590, lq);
      ho.drawImage(ΔΔ[110][b][0], bo + 120, lq - 390);
      ho.drawImage(ΔΔ[110][b][0], bo - 270, lq + 340);
    }
    if (ΔΔ[109]) {
      ho.drawImage(ΔΔ[109][b][4], bo - 700, lq - 600);
      ho.drawImage(ΔΔ[109][b][Ob], bo - 970, lq - 250);
      ho.drawImage(ΔΔ[109][b][5], bo - 720, lq - 200);
      ho.drawImage(ΔΔ[109][b][2], bo - 1020, lq + 340);
      ho.drawImage(ΔΔ[109][b][Hi], bo - 1120, lq - 0);
      ho.drawImage(ΔΔ[109][b][za], bo - 650, lq - 330);
      ho.drawImage(ΔΔ[109][b][Ng], bo - 495, lq - 90);
      ho.drawImage(ΔΔ[109][b][3], bo - 520, lq + 340);
      ho.drawImage(ΔΔ[109][b][Ul], bo + 830, lq - 520);
    }
    ΔΔ[413];
    if (Xw && cf) {
      var c = Xw.ⵠᐃⲆ.x;
      var d = Xw.ⵠᐃⲆ.y;
      Xw.ⵠᐃⲆ.x = bo;
      Xw.ⵠᐃⲆ.y = lq;
      var e = cf.time;
      cf.time = Ww.time;
      var f;
      var g = Ww.items;
      g[rs].x = 400;
      g[2].y = 100;
      g[2].ᐃⵠᐃⵠ(114);
      (f = g[au]).x = -500;
      f.y = 100;
      f.Δᐃⵠⵠ[0].x = f.x - 20.5;
      f.Δᐃⵠⵠ[mj].y = f.y - 22.5;
      f.Δᐃⵠⵠ[Oq].x = f.x - 35.5;
      f.Δᐃⵠⵠ[au].y = f.y + 7.5;
      f.Δᐃⵠⵠ[xq].x = f.x + 7.5;
      f.Δᐃⵠⵠ[2].y = f.y - 30;
      f.Δᐃⵠⵠ[3].x = f.x + 22.5;
      f.Δᐃⵠⵠ[Js].y = f.y;
      f.Δᐃⵠⵠ[Vn].x = f.x - 7.5;
      f.Δᐃⵠⵠ[4].y = f.y + 14.5;
      for (var h = 0; f.info > h; h++) {
        f.Δᐃⵠⵠ[h].ᐃⵠᐃⵠ(294);
      }
      (f = g[Js]).x = 210;
      f.y = -290;
      f.Δᐃⵠⵠ[Yh].x = f.x - 20.5;
      f.Δᐃⵠⵠ[0].y = f.y - 22.5;
      f.Δᐃⵠⵠ[Tl].x = f.x - 35.5;
      f.Δᐃⵠⵠ[1].y = f.y + 7.5;
      f.Δᐃⵠⵠ[eh].x = f.x + 7.5;
      f.Δᐃⵠⵠ[2].y = f.y - 30;
      f.Δᐃⵠⵠ[3].x = f.x + 22.5;
      f.Δᐃⵠⵠ[3].y = f.y;
      f.Δᐃⵠⵠ[Mq].x = f.x - 7.5;
      f.Δᐃⵠⵠ[nl].y = f.y + 14.5;
      for (h = 0; h < f.info; h++) {
        f.Δᐃⵠⵠ[h].ᐃⵠᐃⵠ(294);
      }
      g[0].x = 450;
      g[0].y = -_j;
      g[0].ⲆᐃⲆⲆᐃ(113);
      g[ya].ᐃΔᐃⵠᐃ();
      Xw.ⵠᐃⲆ.x = c;
      Xw.ⵠᐃⲆ.y = d;
      cf.time = e;
    }
  }
  function wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    yb(e, a * -78, a * -54.5, a * 156, a * 109, a * nh);
    e.restore();
    db(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    yb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    db(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    yb(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    db(e, c[3], c[4], Wg);
    e.save();
    e.translate(a * 79, a * 54);
    yb(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    db(e, undefined, c[Oj], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    db(e, Hq, c[U], tb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    db(e, xg, c[Bq], Ls);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    db(e, tt, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    db(e, cg, c[Xs], Ct);
    e.save();
    e.translate(a * 79, a * 113);
    yb(e, a * -18, a * -Ob, a * 36, a * 4, a * 20);
    e.restore();
    db(e, undefined, c[zj], $i);
    e.save();
    e.translate(a * 75, a * 118);
    yb(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    db(e, c[Iq]);
    return d;
  }
  function Pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    yb(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    db(e, c[ie]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * hl, kq * a);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    yb(e, a * -64, a * -4.5, a * 129, Lo * a, a * q);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-Hh * a, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    yb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    db(e, c[2], c[Tr], eg * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Qu * a, Fs * a);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    yb(e, a * -4.5, a * -61, a * 9, a * 129, a * mb);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = Wl;
    e.translate(a * -Eq, a * -Qu);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    yb(e, a * -4.5, a * -61, a * 9, a * 129, ib * a);
    e.restore();
    db(e, c[Vh], c[eg], a * qo);
    e.globalAlpha = b ? 0.5 : $b;
    e.translate(a * ib, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    yb(e, a * -4.5, a * -65, a * 9, a * 129, a * mb);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -M);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    yb(e, a * -4.5, a * -65, $o * a, a * 129, a * 5);
    e.restore();
    db(e, c[2], c[3], Js * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(z * a, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    yb(e, a * -65.5, a * -Ng, a * 129, a * 9, a * 5);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = Wl;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    yb(e, a * -65.5, a * -nj, a * 129, a * 9, a * 5);
    e.restore();
    db(e, c[2], c[nq], a * ea);
    e.globalAlpha = b ? 0.5 : Te;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    yb(e, -tk * a, a * -11.5, a * 22, a * 22, a * Eq);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -kq, a * -z);
    e.save();
    e.translate(a * tr, a * 18.1015625);
    yb(e, a * -11, a * -11.5, a * 22, a * 22, a * ib);
    e.restore();
    db(e, c[Rl], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, Eq * a);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    yb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    db(e, c[Rq]);
    e.globalAlpha = za;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    yb(e, a * -10.5, a * -11.5, a * 21, a * 22, Oj * a);
    e.restore();
    db(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : zg;
    e.translate(a * M, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    yb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -kq, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    yb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    db(e, c[Vh], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : ie;
    e.translate(Zg * a, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    yb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    db(e, c[Zj]);
    e.globalAlpha = 1;
    e.translate(a * -z, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    yb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    db(e, c[jk], c[Lg], a * 3);
    return d;
  }
  function Ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * Nl);
    e.bezierCurveTo(a * 169, a * la, a * 212, a * 9, a * 241, a * mb);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * Vr);
    e.closePath();
    db(e, c[Yh], c[1], a * Mi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    db(e, c[Ul], c[3], og * a);
    return d;
  }
  function kd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    db(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    db(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    db(d, b[2]);
    return c;
  }
  function xd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * Ug, wt * a);
    e.globalAlpha = 0.3;
    Tb(e, a * 98, a * 99, a * Yq);
    db(e, c[0]);
    e.globalAlpha = 0.5;
    Tb(e, a * 98, a * 99, a * 90);
    db(e, c[1]);
    return d;
  }
  function Jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, ji * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    db(e, c[Lr]);
    e.globalAlpha = ie;
    e.translate(os, a * -U);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, U * a);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    db(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    db(e, c[Tt], c[as], sk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    db(e, c[nq], c[2], a * Cs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    db(e, c[4], c[2], a * Ra);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    db(e, c[4], c[2], a * gn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    db(e, c[Ct], c[xq], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    db(e, c[ll], c[2], a * sk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    db(e, c[3], c[as], a * 10);
    return d;
  }
  function Md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Ft === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      Cb(e, Ar, a * 41, a * Ch);
      e.restore();
      db(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    Cb(e, tg, a * 41, a * 10);
    db(e, c[1], c[2], Os * a);
    Cb(e, ur, a * 35, a * J);
    db(e, c[3], c[Ng], a * 4);
    Cb(e, Ni, a * 23, z * a);
    e.restore();
    db(e, c[hl]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    yb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    db(e, c[Ls], c[Mq], a * Rl);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(ig);
    yb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    db(e, c[Os], c[nl], a * 2);
    Tb(e, a * 45, a * 29, a * 7);
    db(e, c[Ig]);
    Tb(e, a * 45, a * 61, a * Is);
    db(e, c[nr]);
    Tb(e, a * 28, a * 45, a * 7);
    db(e, c[kq]);
    Tb(e, a * 62, a * 45, Nl * a);
    db(e, c[Oj]);
    return d;
  }
  function Bd() {
    new Date().getTime();
    rm();
    (function () {
      ΔΔ[814] = bu(za, [{
        f: Sd,
        x: 0,
        y: wj,
        a: 1,
        r: mj,
        c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[815] = ΔΔ[814];
      ΔΔ[955] = [];
      ΔΔ[955][Rq] = Ⲇⵠ.ⲆᐃⵠⲆΔΔΔ;
      ΔΔ[955][1] = Ⲇⵠ.ⲆΔᐃⲆⵠΔⲆ;
      ΔΔ[955][2] = Ⲇⵠ.ᐃᐃⵠΔᐃⲆΔ;
      ΔΔ[956] = ΔΔ[955];
      ΔΔ[972] = [];
      ΔΔ[972][eu] = Ⲇⵠ.ⲆΔᐃᐃᐃⵠΔ;
      ΔΔ[972][1] = Ⲇⵠ.ᐃⵠΔΔΔⵠⵠ;
      ΔΔ[972][2] = Ⲇⵠ.ⲆᐃⲆᐃⵠⵠᐃ;
      ΔΔ[973] = ΔΔ[972];
      ΔΔ[987] = [];
      ΔΔ[987][Rq] = Ⲇⵠ.ⲆΔᐃΔⲆⲆᐃ;
      ΔΔ[987][1] = Ⲇⵠ.ⵠⵠⲆᐃᐃⵠⲆ;
      ΔΔ[987][Hj] = Ⲇⵠ.ᐃⲆᐃⲆⲆⲆᐃ;
      ΔΔ[988] = ΔΔ[987];
      ΔΔ[1154] = [];
      ΔΔ[1154][Rq] = Ⲇⵠ.ⲆᐃᐃⲆᐃⲆᐃ;
      ΔΔ[1154][wt] = Ⲇⵠ.ⵠᐃⲆⵠΔΔⵠ;
      ΔΔ[1154][Pn] = Ⲇⵠ.ᐃΔⲆΔᐃⲆΔ;
      ΔΔ[1155] = ΔΔ[1154];
      ΔΔ[965] = [];
      ΔΔ[965][0] = Ⲇⵠ.ΔΔⵠⵠΔᐃⲆ;
      ΔΔ[965][og] = Ⲇⵠ.ᐃΔᐃΔⵠⲆΔ;
      ΔΔ[965][Vg] = Ⲇⵠ.ΔⵠⵠⲆⲆᐃΔ;
      ΔΔ[974] = ΔΔ[965];
      ΔΔ[1028] = [];
      ΔΔ[1028][In] = Ⲇⵠ.ᐃⲆΔⵠᐃᐃⵠ;
      ΔΔ[1028][1] = Ⲇⵠ.ᐃΔΔᐃᐃΔᐃ;
      ΔΔ[1028][2] = Ⲇⵠ.ⵠΔᐃΔⲆᐃΔ;
      ΔΔ[1029] = ΔΔ[1028];
      ΔΔ[1027] = ΔΔ[1028];
      ΔΔ[712] = [];
      ΔΔ[712][Lr] = Ⲇⵠ.ⲆⵠᐃᐃᐃΔⵠᐃᐃ;
      ΔΔ[712][Oq] = Ⲇⵠ.ⵠⵠΔⵠⲆⲆᐃⵠᐃ;
      ΔΔ[712][2] = Ⲇⵠ.ⵠⵠᐃⲆΔΔᐃⲆΔ;
      ΔΔ[713] = ΔΔ[712];
      ΔΔ[714] = ΔΔ[712];
      ΔΔ[1031] = [];
      ΔΔ[1031][fl] = Ⲇⵠ.ΔᐃⵠΔΔⲆΔ;
      ΔΔ[1031][1] = Ⲇⵠ.ᐃⲆᐃᐃᐃⲆⵠ;
      ΔΔ[1031][2] = Ⲇⵠ.ⲆⵠᐃⲆΔⵠⵠ;
      ΔΔ[1032] = ΔΔ[1031];
      ΔΔ[1030] = ΔΔ[1031];
      ΔΔ[423] = [];
      ΔΔ[423][0] = Ⲇⵠ.ⲆⲆⲆᐃΔⵠΔ;
      ΔΔ[423][zg] = Ⲇⵠ.ΔΔΔⵠᐃΔⲆ;
      ΔΔ[423][2] = Ⲇⵠ.ᐃⵠⲆᐃⲆᐃᐃ;
      ΔΔ[425] = ΔΔ[423];
      ΔΔ[424] = ΔΔ[423];
      ΔΔ[1233] = [];
      ΔΔ[1233][ig] = Ⲇⵠ.ΔⵠᐃⲆⵠⲆᐃ;
      ΔΔ[1233][hb] = Ⲇⵠ.ⲆΔΔᐃⵠΔΔ;
      ΔΔ[1233][2] = Ⲇⵠ.ⲆᐃΔⲆⲆⵠᐃ;
      ΔΔ[1234] = ΔΔ[1233];
      ΔΔ[1230] = [];
      ΔΔ[1230][ya] = Ⲇⵠ.ⵠⲆⲆⵠΔᐃⲆ;
      ΔΔ[1230][mk] = Ⲇⵠ.ⵠⵠᐃⵠⲆⵠᐃ;
      ΔΔ[1230][It] = Ⲇⵠ.ΔⵠΔⵠᐃᐃᐃ;
      ΔΔ[1232] = ΔΔ[1230];
      ΔΔ[1231] = ΔΔ[1230];
      ΔΔ[569] = [];
      ΔΔ[569][0] = Ⲇⵠ.ᐃⵠⵠΔΔⲆⵠ;
      ΔΔ[569][wt] = Ⲇⵠ.ⲆΔⲆᐃⵠΔΔ;
      ΔΔ[569][2] = Ⲇⵠ.ᐃⵠΔᐃⵠᐃⵠ;
      ΔΔ[571] = ΔΔ[569];
      ΔΔ[570] = ΔΔ[569];
      ΔΔ[1166] = [];
      ΔΔ[1166][Bb] = Ⲇⵠ.ΔⲆⵠⲆᐃᐃⵠ;
      ΔΔ[1166][1] = Ⲇⵠ.ⲆᐃΔⲆⲆᐃΔ;
      ΔΔ[1166][2] = Ⲇⵠ.ᐃⵠᐃⵠⲆⲆⵠ;
      ΔΔ[1167] = ΔΔ[1166];
      ΔΔ[1168] = ΔΔ[1166];
      ΔΔ[572] = [];
      ΔΔ[572][Ih] = Ⲇⵠ.ⲆᐃⵠΔⲆΔΔ;
      ΔΔ[572][1] = Ⲇⵠ.ⲆⵠⲆΔᐃⵠⵠ;
      ΔΔ[572][2] = Ⲇⵠ.ⲆⵠⲆⲆⵠⲆΔ;
      ΔΔ[574] = ΔΔ[572];
      ΔΔ[573] = ΔΔ[572];
      ΔΔ[1169] = [];
      ΔΔ[1169][0] = Ⲇⵠ.ᐃⵠᐃⵠⵠᐃⲆ;
      ΔΔ[1169][mk] = Ⲇⵠ.ᐃΔⲆⵠᐃⲆⲆ;
      ΔΔ[1169][2] = Ⲇⵠ.ᐃⲆΔⵠⲆⲆⵠ;
      ΔΔ[1170] = ΔΔ[1169];
      ΔΔ[1171] = ΔΔ[1169];
      ΔΔ[575] = [];
      ΔΔ[575][Hi] = Ⲇⵠ.ⲆᐃⲆΔⵠᐃⵠ;
      ΔΔ[575][sd] = Ⲇⵠ.ⲆΔⲆᐃⵠⲆΔ;
      ΔΔ[575][rs] = Ⲇⵠ.ΔⲆⵠⵠⵠⲆⵠ;
      ΔΔ[577] = ΔΔ[575];
      ΔΔ[576] = ΔΔ[575];
      ΔΔ[1172] = [];
      ΔΔ[1172][Bb] = Ⲇⵠ.ⵠΔⲆΔⲆⵠᐃ;
      ΔΔ[1172][Xn] = Ⲇⵠ.ⵠⲆΔⵠΔΔⵠ;
      ΔΔ[1172][Ul] = Ⲇⵠ.ⲆⲆⲆΔΔΔΔ;
      ΔΔ[1173] = ΔΔ[1172];
      ΔΔ[1174] = ΔΔ[1172];
      ΔΔ[578] = [];
      ΔΔ[578][0] = Ⲇⵠ.ΔΔⲆΔᐃΔᐃ;
      ΔΔ[578][og] = Ⲇⵠ.ᐃⲆⲆΔⲆⲆⵠ;
      ΔΔ[578][lr] = Ⲇⵠ.ᐃᐃᐃᐃΔᐃⲆ;
      ΔΔ[580] = ΔΔ[578];
      ΔΔ[579] = ΔΔ[578];
      ΔΔ[1175] = [];
      ΔΔ[1175][Hi] = Ⲇⵠ.ⲆⲆᐃᐃⲆⵠΔ;
      ΔΔ[1175][1] = Ⲇⵠ.ⵠᐃⲆΔᐃⲆΔ;
      ΔΔ[1175][xj] = Ⲇⵠ.ΔᐃⲆⲆᐃⵠΔ;
      ΔΔ[1176] = ΔΔ[1175];
      ΔΔ[1177] = ΔΔ[1175];
      ΔΔ[581] = [];
      ΔΔ[581][0] = Ⲇⵠ.ⵠⵠⵠΔᐃⲆⲆ;
      ΔΔ[581][zg] = Ⲇⵠ.ᐃΔⲆᐃⲆᐃⵠᐃⲆ;
      ΔΔ[581][2] = Ⲇⵠ.ⲆⵠᐃΔᐃΔᐃᐃᐃ;
      ΔΔ[583] = ΔΔ[581];
      ΔΔ[582] = ΔΔ[581];
      ΔΔ[1178] = [];
      ΔΔ[1178][ig] = Ⲇⵠ.ᐃΔᐃⲆᐃΔⵠΔΔ;
      ΔΔ[1178][1] = Ⲇⵠ.ᐃᐃⲆΔᐃⲆⵠⲆⵠ;
      ΔΔ[1178][Pn] = Ⲇⵠ.ΔⲆⲆᐃⲆΔⵠⵠΔ;
      ΔΔ[1179] = ΔΔ[1178];
      ΔΔ[1180] = ΔΔ[1178];
      ΔΔ[584] = [];
      ΔΔ[584][0] = Ⲇⵠ.ᐃᐃᐃᐃᐃᐃᐃⵠᐃ;
      ΔΔ[584][Te] = Ⲇⵠ.ⲆⵠΔᐃᐃⵠⲆᐃᐃ;
      ΔΔ[584][Ob] = Ⲇⵠ.ⵠⵠΔⵠⵠᐃⵠⲆⲆ;
      ΔΔ[586] = ΔΔ[584];
      ΔΔ[585] = ΔΔ[584];
      ΔΔ[1181] = [];
      ΔΔ[1181][0] = Ⲇⵠ.ⲆᐃⲆᐃᐃᐃⲆΔΔ;
      ΔΔ[1181][1] = Ⲇⵠ.ⲆᐃⲆⲆᐃⵠᐃᐃΔ;
      ΔΔ[1181][Ob] = Ⲇⵠ.ΔᐃⵠΔΔΔΔⲆΔ;
      ΔΔ[1182] = ΔΔ[1181];
      ΔΔ[1183] = ΔΔ[1181];
      ΔΔ[587] = [];
      ΔΔ[587][ya] = Ⲇⵠ.ΔΔΔΔⵠⵠⵠᐃΔ;
      ΔΔ[587][1] = Ⲇⵠ.ΔⲆΔⲆᐃⲆⵠΔⲆ;
      ΔΔ[587][Lt] = Ⲇⵠ.ΔⲆᐃⲆᐃᐃⲆΔᐃ;
      ΔΔ[589] = ΔΔ[587];
      ΔΔ[588] = ΔΔ[587];
      ΔΔ[1184] = [];
      ΔΔ[1184][eu] = Ⲇⵠ.ⵠᐃⵠΔΔΔΔⵠᐃ;
      ΔΔ[1184][zg] = Ⲇⵠ.ⲆᐃⵠΔΔⲆᐃⲆᐃ;
      ΔΔ[1184][2] = Ⲇⵠ.ⲆΔⲆⵠⵠᐃⲆⲆᐃ;
      ΔΔ[1185] = ΔΔ[1184];
      ΔΔ[1186] = ΔΔ[1184];
      ΔΔ[1257] = [];
      ΔΔ[1257][0] = Ⲇⵠ.ᐃⲆⲆⵠᐃΔᐃⵠⵠ;
      ΔΔ[1257][1] = Ⲇⵠ.ΔⲆᐃⲆᐃᐃⲆΔΔ;
      ΔΔ[1257][2] = Ⲇⵠ.ᐃΔⲆⲆⲆⵠⲆΔⵠ;
      ΔΔ[1258] = ΔΔ[1257];
      ΔΔ[1256] = ΔΔ[1257];
      ΔΔ[1260] = [];
      ΔΔ[1260][0] = Ⲇⵠ.ⲆⵠⲆΔⵠⵠᐃⵠⲆ;
      ΔΔ[1260][zg] = Ⲇⵠ.ᐃΔᐃᐃⲆⵠⵠᐃΔ;
      ΔΔ[1260][2] = Ⲇⵠ.ᐃⲆΔⲆⲆᐃⵠᐃᐃ;
      ΔΔ[1261] = ΔΔ[1260];
      ΔΔ[1259] = ΔΔ[1260];
      ΔΔ[1263] = [];
      ΔΔ[1263][wj] = Ⲇⵠ.ᐃᐃⵠⲆⲆⵠᐃⵠⵠ;
      ΔΔ[1263][1] = Ⲇⵠ.ΔᐃΔᐃⵠΔᐃᐃΔ;
      ΔΔ[1263][2] = Ⲇⵠ.ⵠⵠⲆΔⵠⵠΔᐃⵠ;
      ΔΔ[1264] = ΔΔ[1263];
      ΔΔ[1262] = ΔΔ[1263];
      ΔΔ[1266] = [];
      ΔΔ[1266][Ih] = Ⲇⵠ.ΔᐃᐃⵠᐃᐃΔᐃΔ;
      ΔΔ[1266][1] = Ⲇⵠ.ⲆᐃᐃΔᐃΔⲆⵠᐃ;
      ΔΔ[1266][2] = Ⲇⵠ.ΔⵠⲆⲆⵠⵠΔΔⲆ;
      ΔΔ[1267] = ΔΔ[1266];
      ΔΔ[1265] = ΔΔ[1266];
      ΔΔ[1269] = [];
      ΔΔ[1269][wj] = Ⲇⵠ.ΔΔⵠⵠΔⲆΔⵠⵠ;
      ΔΔ[1269][pu] = Ⲇⵠ.ⵠᐃΔΔᐃᐃᐃΔᐃ;
      ΔΔ[1269][2] = Ⲇⵠ.ᐃⲆΔⲆᐃⵠⲆⲆΔ;
      ΔΔ[1270] = ΔΔ[1269];
      ΔΔ[1268] = ΔΔ[1269];
      ΔΔ[1272] = [];
      ΔΔ[1272][Hi] = Ⲇⵠ.ⲆᐃᐃⲆΔⲆⵠⲆⵠ;
      ΔΔ[1272][au] = Ⲇⵠ.ᐃⲆⵠⵠΔΔⵠⲆΔ;
      ΔΔ[1272][2] = Ⲇⵠ.ⵠᐃᐃⵠⲆⲆⲆΔᐃ;
      ΔΔ[1273] = ΔΔ[1272];
      ΔΔ[1271] = ΔΔ[1272];
      ΔΔ[1239] = [];
      ΔΔ[1239][os] = Ⲇⵠ.ᐃⲆⵠᐃΔΔⵠᐃⲆ;
      ΔΔ[1239][1] = Ⲇⵠ.ΔⲆᐃⲆΔⲆⲆΔᐃ;
      ΔΔ[1239][Ob] = Ⲇⵠ.ΔᐃⲆⵠᐃⲆⲆⲆΔ;
      ΔΔ[1240] = ΔΔ[1239];
      ΔΔ[1238] = ΔΔ[1239];
      ΔΔ[1242] = [];
      ΔΔ[1242][Rq] = Ⲇⵠ.ᐃᐃᐃⲆⵠⵠᐃⵠⲆ;
      ΔΔ[1242][hb] = Ⲇⵠ.ᐃⵠΔΔᐃᐃⵠᐃᐃ;
      ΔΔ[1242][pq] = Ⲇⵠ.ⵠᐃΔⲆΔᐃⵠᐃⵠ;
      ΔΔ[1243] = ΔΔ[1242];
      ΔΔ[1241] = ΔΔ[1242];
      ΔΔ[1245] = [];
      ΔΔ[1245][0] = Ⲇⵠ.ⲆΔⲆⲆⲆᐃΔⵠⵠ;
      ΔΔ[1245][1] = Ⲇⵠ.ΔᐃΔΔΔᐃᐃⲆᐃ;
      ΔΔ[1245][2] = Ⲇⵠ.ΔΔΔᐃⲆⵠⲆΔⵠ;
      ΔΔ[1246] = ΔΔ[1245];
      ΔΔ[1244] = ΔΔ[1245];
      ΔΔ[1248] = [];
      ΔΔ[1248][0] = Ⲇⵠ.ΔΔⵠᐃⵠⵠΔⵠⵠ;
      ΔΔ[1248][Tl] = Ⲇⵠ.ΔᐃⲆⲆᐃᐃⵠⲆⲆ;
      ΔΔ[1248][2] = Ⲇⵠ.ᐃΔᐃⵠⲆⲆⲆⵠⵠ;
      ΔΔ[1249] = ΔΔ[1248];
      ΔΔ[1247] = ΔΔ[1248];
      ΔΔ[1251] = [];
      ΔΔ[1251][0] = Ⲇⵠ.ⵠⲆΔᐃΔᐃΔΔⲆ;
      ΔΔ[1251][1] = Ⲇⵠ.ΔⵠΔᐃᐃᐃⵠΔⲆ;
      ΔΔ[1251][Vh] = Ⲇⵠ.ᐃⵠⲆᐃΔⲆⵠⲆⵠ;
      ΔΔ[1252] = ΔΔ[1251];
      ΔΔ[1250] = ΔΔ[1251];
      ΔΔ[1254] = [];
      ΔΔ[1254][wg] = Ⲇⵠ.ⵠⵠⵠⵠⲆΔᐃΔⵠ;
      ΔΔ[1254][Hg] = Ⲇⵠ.ⲆⲆⲆΔⲆⲆΔⵠⵠ;
      ΔΔ[1254][xq] = Ⲇⵠ.ᐃᐃⲆᐃᐃⵠⲆᐃΔ;
      ΔΔ[1255] = ΔΔ[1254];
      ΔΔ[1253] = ΔΔ[1254];
      ΔΔ[1227] = [];
      ΔΔ[1227][os] = Ⲇⵠ.ⲆⵠⲆⵠⵠΔⲆ;
      ΔΔ[1227][og] = Ⲇⵠ.ⵠⲆⲆΔᐃⵠᐃ;
      ΔΔ[1227][2] = Ⲇⵠ.ᐃⲆⲆⲆΔⲆⲆ;
      ΔΔ[1229] = ΔΔ[1227];
      ΔΔ[1228] = ΔΔ[1227];
      ΔΔ[1187] = [];
      ΔΔ[1187][Ih] = Ⲇⵠ.ⲆᐃⲆⵠⲆⵠΔ;
      ΔΔ[1187][1] = Ⲇⵠ.ᐃᐃⵠΔⵠⲆᐃ;
      ΔΔ[1187][2] = Ⲇⵠ.ΔⵠΔⵠⲆⵠⵠ;
      ΔΔ[1188] = ΔΔ[1187];
      ΔΔ[Xr.ᐃⵠⵠᐃⵠᐃᐃⲆⲆ] = ΔΔ[1187];
      ΔΔ[840] = bu(hb, [{
        f: Jb,
        x: fl,
        y: Zj,
        a: Oq,
        r: 0,
        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
      }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[841] = ΔΔ[840];
      ΔΔ[850] = bu(pu, [{
        f: bc,
        x: wg,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[851] = ΔΔ[850];
      ΔΔ[644] = bu(1, [{
        f: Wt,
        x: -Tl,
        y: Hi,
        a: zg,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Yt,
        x: -wt,
        y: 0,
        a: pu,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: $t,
        x: -1,
        y: 0,
        a: 1,
        r: os,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[643] = ΔΔ[644];
      ΔΔ[639] = bu(Xn, [{
        f: Xt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[800] = bu(hb, [{
        f: hd,
        x: ya,
        y: Lr,
        a: og,
        r: 0,
        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[799] = ΔΔ[800];
      ΔΔ[631] = bu(za, [{
        f: Nu,
        x: 0,
        y: 0,
        a: Tl,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[632] = ΔΔ[631];
      ΔΔ[311] = bu(zs, [{
        f: Nu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"]
      }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[284] = ΔΔ[311];
      ΔΔ[808] = bu(Tl, [{
        f: Nu,
        x: 0,
        y: fl,
        a: 1,
        r: 0,
        c: ["#c67933", "#b17238"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[809] = ΔΔ[808];
      ΔΔ[834] = bu(1, [{
        f: Nu,
        x: mj,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e8e8e8", "#bbbbbb"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[835] = ΔΔ[834];
      ΔΔ[845] = bu(1, [{
        f: Nu,
        x: Lr,
        y: Mg,
        a: 1,
        r: 0,
        c: ["#328a56", "#449573"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[846] = ΔΔ[845];
      ΔΔ[949] = bu(sd, [{
        f: Nu,
        x: Bb,
        y: st,
        a: za,
        r: 0,
        c: ["#c98e2f", "#a36b11"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[950] = ΔΔ[949];
      ΔΔ[951] = ΔΔ[949];
      ΔΔ[966] = bu(Tl, [{
        f: Nu,
        x: Yh,
        y: Hi,
        a: Te,
        r: Bb,
        c: ["#13a56d", "#098a58"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[967] = ΔΔ[966];
      ΔΔ[968] = ΔΔ[966];
      ΔΔ[981] = bu(1, [{
        f: Nu,
        x: Yh,
        y: wg,
        a: ie,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[982] = ΔΔ[981];
      ΔΔ[983] = ΔΔ[981];
      ΔΔ[959] = bu(1, [{
        f: Nu,
        x: Da,
        y: wj,
        a: pu,
        r: 0,
        c: ["#b22419", "#99110e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[960] = ΔΔ[959];
      ΔΔ[961] = ΔΔ[959];
      ΔΔ[309] = bu(gs, [{
        f: ku,
        x: -2,
        y: -2,
        a: sd,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"]
      }, {
        f: hu,
        x: -2,
        y: -2,
        a: pu,
        r: -Math.PI / ia,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[302] = ΔΔ[309];
      ΔΔ[328] = bu(1, [{
        f: ou,
        x: -Vh,
        y: -1,
        a: au,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
      }, {
        f: hu,
        x: -xj,
        y: -1,
        a: Gh,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[327] = ΔΔ[328];
      ΔΔ[860] = bu(1, [{
        f: tu,
        x: vg,
        y: Yh,
        a: 1,
        r: Math.PI / nr,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
      }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[865] = bu(1, [{
        f: Mu,
        x: Ob,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[829] = bu(pu, [{
        f: Iu,
        x: 2,
        y: os,
        a: za,
        r: Math.PI / Ll,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[261] = bu(ie, [{
        f: Cu,
        x: xq,
        y: 0,
        a: sd,
        r: Math.PI / ta,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[292] = bu(1, [{
        f: Gu,
        x: 2,
        y: os,
        a: 1,
        r: Math.PI / ib,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[293] = bu(1, [{
        f: xu,
        x: 2,
        y: ya,
        a: ie,
        r: Math.PI / hl,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[455] = bu(pu, [{
        f: Ou,
        x: 2,
        y: Qs,
        a: $b,
        r: Math.PI / ib,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[313] = bu(1, [{
        f: Eu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / z,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[312] = bu(sd, [{
        f: Eu,
        x: -Ul,
        y: q,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[258] = bu(Oq, [{
        f: Eu,
        x: -Vg,
        y: 5,
        a: 1,
        r: -Math.PI / Eq,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[296] = bu(Hg, [{
        f: Eu,
        x: -Ug,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[458] = bu(zg, [{
        f: Eu,
        x: -Vh,
        y: 5,
        a: 1,
        r: -Math.PI / Eq,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[1017] = [];
      ΔΔ[1017][Qs] = Ⲇⵠ.ⵠⲆⲆΔᐃⵠⲆ;
      ΔΔ[1017][$b] = Ⲇⵠ.ⲆΔⵠᐃᐃᐃⲆ;
      ΔΔ[1017][2] = Ⲇⵠ.ΔⲆⵠΔⲆᐃⵠ;
      ΔΔ[1019] = ΔΔ[1017];
      ΔΔ[1018] = ΔΔ[1017];
      ΔΔ[315] = bu(zg, [{
        f: ed,
        x: -nr,
        y: -5,
        a: 1,
        r: wj,
        c: ["#252B28", "#58645F", "#75827D"]
      }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[297] = bu(Hg, [{
        f: rd,
        x: -q,
        y: -5,
        a: au,
        r: 0,
        c: ["#282823", "#877c2d", "#c4bc51"]
      }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[298] = bu(1, [{
        f: od,
        x: -5,
        y: -Qu,
        a: og,
        r: 0,
        c: ["#232828", "#3fc9c9", "#74ede6"]
      }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[316] = bu(Gh, [{
        f: ku,
        x: 0,
        y: -5,
        a: pu,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[830] = ΔΔ[829];
      ΔΔ[254] = ΔΔ[261];
      ΔΔ[290] = ΔΔ[292];
      ΔΔ[291] = ΔΔ[293];
      ΔΔ[456] = ΔΔ[455];
      ΔΔ[314] = ΔΔ[313];
      ΔΔ[256] = ΔΔ[312];
      ΔΔ[295] = ΔΔ[258];
      ΔΔ[257] = ΔΔ[296];
      ΔΔ[460] = ΔΔ[458];
      ΔΔ[277] = bu(Tl, [{
        f: Ub,
        x: 0,
        y: 0,
        a: 1,
        r: os
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[310] = bu(za, [{
        f: Xb,
        x: 0,
        y: 0,
        a: Te,
        r: ig,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[262] = ΔΔ[310];
      ΔΔ[329] = bu(Xn, [{
        f: Vc,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[263] = ΔΔ[329];
      ΔΔ[331] = bu(Xn, [{
        f: Kc,
        x: Lr,
        y: 0,
        a: Tl,
        r: wg,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[332] = ΔΔ[331];
      ΔΔ[492] = bu(1, [{
        f: Vc,
        x: Rq,
        y: In,
        a: Tl,
        r: Rq,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[493] = ΔΔ[492];
      ΔΔ[330] = bu(1, [{
        f: nc,
        x: Hi,
        y: 0,
        a: za,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[265] = ΔΔ[330];
      ΔΔ[317] = bu(1, [{
        f: um,
        x: 0,
        y: 0,
        a: ie,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[318] = ΔΔ[317];
      ΔΔ[319] = bu(1, [{
        f: Oc,
        x: 0,
        y: 0,
        a: Tl,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[320] = ΔΔ[319];
      ΔΔ[362] = bu(gs, [{
        f: Tc,
        x: In,
        y: 0,
        a: 1,
        r: In,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[363] = ΔΔ[362];
      ΔΔ[364] = bu(Xn, [{
        f: Tc,
        x: 0,
        y: Ih,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[365] = ΔΔ[364];
      ΔΔ[361] = bu(1, [{
        f: Rd,
        x: 0,
        y: 0,
        a: og,
        r: ya,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[360] = ΔΔ[361];
      ΔΔ[495] = bu(Te, [{
        f: Rd,
        x: 0,
        y: 0,
        a: ie,
        r: ya,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[496] = ΔΔ[495];
      ΔΔ[335] = bu(Gh, [{
        f: Kd,
        x: 0,
        y: Bb,
        a: zg,
        r: 0,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[268] = ΔΔ[335];
      ΔΔ[372] = bu(pu, [{
        f: Md,
        x: 0,
        y: wg,
        a: mk,
        r: Zj,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[371] = ΔΔ[372];
      ΔΔ[499] = bu(ie, [{
        f: Md,
        x: 0,
        y: 0,
        a: 1,
        r: Ih,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[498] = ΔΔ[499];
      ΔΔ[375] = bu(1, [{
        f: ym,
        x: Yh,
        y: 0,
        a: wt,
        r: Zj,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[374] = ΔΔ[375];
      ΔΔ[378] = bu(1, [{
        f: Ec,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[377] = ΔΔ[378];
      ΔΔ[337] = bu(zg, [{
        f: wd,
        x: Da,
        y: 2,
        a: 1,
        r: 0,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[338] = ΔΔ[337];
      ΔΔ[300] = bu(1, [{
        f: Zb,
        x: 0,
        y: -yr,
        a: Hg,
        r: 0,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[323] = bu(za, [{
        f: Zb,
        x: ya,
        y: -3,
        a: Hg,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[325] = ΔΔ[323];
      ΔΔ[305] = bu(1, [{
        f: du,
        x: -ci,
        y: -Tt,
        a: 1,
        r: 0,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[513] = bu(1, [{
        f: du,
        x: -3,
        y: -ea,
        a: 1,
        r: mj,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[515] = ΔΔ[513];
      ΔΔ[368] = bu(mk, [{
        f: Ru,
        x: -I,
        y: -nq,
        a: 1,
        r: 0,
        c: ["#ef96be", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[1162] = bu($b, [{
        f: Ru,
        x: -3,
        y: -sl,
        a: mk,
        r: Da,
        c: ["#55423e", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[178] = bu(Gh, [{
        f: Ad,
        x: Rq,
        y: Mg,
        a: 1,
        r: wj,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[179] = bu(1, [{
        f: Ad,
        x: 0,
        y: 0,
        a: zg,
        r: 0,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[624] = bu(Te, [{
        f: Ru,
        x: Bb,
        y: Yh,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[393] = bu(zs, [{
        f: Ru,
        x: -ut,
        y: -ea,
        a: $b,
        r: 0,
        c: ["#231f20", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[505] = bu(Oq, [{
        f: Ru,
        x: -qu,
        y: -ut,
        a: 1,
        r: 0,
        c: ["#ffffff", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[369] = bu(1, [{
        f: pm,
        x: 0,
        y: Bb,
        a: Te,
        r: fl,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[370] = ΔΔ[369];
      ΔΔ[381] = bu(ie, [{
        f: Cc,
        x: wg,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[380] = ΔΔ[381];
      ΔΔ[502] = bu(Xn, [{
        f: em,
        x: Da,
        y: Da,
        a: Oq,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[503] = ΔΔ[502];
      ΔΔ[880] = bu(1, [{
        f: nu,
        x: os,
        y: Ig,
        a: 1,
        r: 0,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[881] = ΔΔ[880];
      ΔΔ[882] = bu(hb, [{
        f: iu,
        x: In,
        y: ta,
        a: au,
        r: 0,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[883] = ΔΔ[882];
      ΔΔ[303] = bu(hb, [{
        f: cu,
        x: -H,
        y: -H,
        a: 1,
        r: Qs,
        c: ["#ffffff", "#cec0c4"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[304] = ΔΔ[303];
      ΔΔ[392] = [];
      ΔΔ[392][Zj] = Ⲇⵠ.ΔⵠᐃᐃΔⲆᐃ;
      ΔΔ[392][mk] = Ⲇⵠ.ⵠⵠⲆΔⲆⵠⲆ;
      ΔΔ[392][Hj] = Ⲇⵠ.ⲆᐃⵠⵠⲆᐃΔ;
      ΔΔ[367] = ΔΔ[392];
      ΔΔ[975] = [];
      ΔΔ[975][0] = Ⲇⵠ.ΔᐃⵠᐃⲆΔⵠ;
      ΔΔ[975][1] = Ⲇⵠ.Ⲇⵠⵠᐃᐃᐃⵠ;
      ΔΔ[975][xj] = Ⲇⵠ.ⲆᐃΔΔⵠΔΔ;
      ΔΔ[977] = ΔΔ[975];
      ΔΔ[976] = ΔΔ[975];
      ΔΔ[978] = [];
      ΔΔ[978][mj] = Ⲇⵠ.ΔⵠⵠᐃΔⵠⲆ;
      ΔΔ[978][gs] = Ⲇⵠ.ΔᐃᐃⵠⲆᐃᐃ;
      ΔΔ[978][2] = Ⲇⵠ.ⲆΔⵠⵠΔΔⵠ;
      ΔΔ[980] = ΔΔ[978];
      ΔΔ[979] = ΔΔ[978];
      ΔΔ[1158] = [];
      ΔΔ[1158][0] = Ⲇⵠ.ⲆⲆⵠⵠⵠⲆⲆ;
      ΔΔ[1158][1] = Ⲇⵠ.ⲆⲆⵠⵠⵠⲆⲆ;
      ΔΔ[1158][2] = Ⲇⵠ.ⲆⲆⵠⵠⵠⲆⲆ;
      ΔΔ[1159] = ΔΔ[1158];
      ΔΔ[426] = [];
      ΔΔ[426][0] = Ⲇⵠ.ΔᐃᐃᐃΔᐃⵠ;
      ΔΔ[426][1] = Ⲇⵠ.ⲆΔᐃⲆⵠⵠⵠ;
      ΔΔ[426][2] = Ⲇⵠ.ΔⲆⲆΔⲆΔΔ;
      ΔΔ[427] = ΔΔ[426];
      ΔΔ[428] = ΔΔ[426];
      ΔΔ[1160] = [];
      ΔΔ[1160][Yh] = Ⲇⵠ.ⲆΔΔⵠⵠⲆⲆ;
      ΔΔ[1160][1] = Ⲇⵠ.ⲆΔΔⵠⵠⲆⲆ;
      ΔΔ[1160][Hj] = Ⲇⵠ.ⲆΔΔⵠⵠⲆⲆ;
      ΔΔ[1161] = ΔΔ[1160];
      ΔΔ[1236] = [];
      ΔΔ[1236][0] = Ⲇⵠ.ⵠⵠⵠⲆᐃⵠᐃⲆᐃ;
      ΔΔ[1236][gs] = Ⲇⵠ.ᐃΔᐃⵠⵠⲆⲆⲆΔ;
      ΔΔ[1236][2] = Ⲇⵠ.ⵠⵠⵠΔⲆⵠᐃᐃΔ;
      ΔΔ[1235] = ΔΔ[1236];
      ΔΔ[1237] = ΔΔ[1236];
      ΔΔ[991] = [];
      ΔΔ[991][ig] = Ⲇⵠ.ⵠⲆⵠⵠΔⲆⵠ;
      ΔΔ[991][Oq] = Ⲇⵠ.ΔⲆⲆᐃⵠᐃⲆ;
      ΔΔ[991][Ug] = Ⲇⵠ.ᐃⲆᐃⲆΔᐃΔ;
      ΔΔ[990] = ΔΔ[991];
      ΔΔ[992] = ΔΔ[991];
      ΔΔ[994] = [];
      ΔΔ[994][0] = Ⲇⵠ.ΔΔⵠΔΔⵠⵠ;
      ΔΔ[994][1] = Ⲇⵠ.ΔⵠⵠΔⵠⵠᐃ;
      ΔΔ[994][It] = Ⲇⵠ.ⵠΔᐃΔᐃΔⲆ;
      ΔΔ[993] = ΔΔ[994];
      ΔΔ[995] = ΔΔ[994];
      ΔΔ[997] = [];
      ΔΔ[997][0] = Ⲇⵠ.ⲆⲆᐃᐃⵠⵠⲆ;
      ΔΔ[997][1] = Ⲇⵠ.ⵠΔᐃᐃΔᐃⲆ;
      ΔΔ[997][It] = Ⲇⵠ.ΔⵠΔᐃΔⲆⵠ;
      ΔΔ[996] = ΔΔ[997];
      ΔΔ[998] = ΔΔ[997];
      ΔΔ[1000] = [];
      ΔΔ[1000][0] = Ⲇⵠ.ⵠⲆⵠΔⵠⲆⵠ;
      ΔΔ[1000][1] = Ⲇⵠ.ΔⲆᐃᐃⲆⵠⲆ;
      ΔΔ[1000][Vg] = Ⲇⵠ.ⵠⲆᐃⲆⵠᐃΔ;
      ΔΔ[999] = ΔΔ[1000];
      ΔΔ[1001] = ΔΔ[1000];
      ΔΔ[1003] = [];
      ΔΔ[1003][0] = Ⲇⵠ.ᐃⵠⲆᐃⲆⲆⵠ;
      ΔΔ[1003][1] = Ⲇⵠ.ᐃⵠΔΔⵠᐃⵠ;
      ΔΔ[1003][Vg] = Ⲇⵠ.ⲆⲆᐃⵠⵠⵠᐃ;
      ΔΔ[1002] = ΔΔ[1003];
      ΔΔ[1004] = ΔΔ[1003];
      ΔΔ[1006] = [];
      ΔΔ[1006][Hi] = Ⲇⵠ.ΔⲆΔⲆᐃⲆⵠ;
      ΔΔ[1006][ie] = Ⲇⵠ.ⲆⲆⵠΔⵠⵠⵠ;
      ΔΔ[1006][2] = Ⲇⵠ.ⲆⵠⲆᐃᐃⵠⵠ;
      ΔΔ[1005] = ΔΔ[1006];
      ΔΔ[1007] = ΔΔ[1006];
      ΔΔ[1009] = [];
      ΔΔ[1009][In] = Ⲇⵠ.ⵠⵠⵠΔΔⵠᐃ;
      ΔΔ[1009][Gh] = Ⲇⵠ.ᐃΔⵠⲆΔΔⲆ;
      ΔΔ[1009][2] = Ⲇⵠ.ⵠΔΔⲆΔΔΔ;
      ΔΔ[1008] = ΔΔ[1009];
      ΔΔ[1010] = ΔΔ[1009];
      ΔΔ[1012] = [];
      ΔΔ[1012][0] = Ⲇⵠ.ⲆⵠᐃⲆᐃⵠⵠ;
      ΔΔ[1012][1] = Ⲇⵠ.ⵠΔⲆᐃⵠⵠⲆ;
      ΔΔ[1012][H] = Ⲇⵠ.ⵠᐃΔⲆΔⲆᐃ;
      ΔΔ[1011] = ΔΔ[1012];
      ΔΔ[1013] = ΔΔ[1012];
      ΔΔ[1015] = [];
      ΔΔ[1015][0] = Ⲇⵠ.ⵠΔⲆⵠᐃⲆᐃ;
      ΔΔ[1015][1] = Ⲇⵠ.ᐃᐃΔⵠⵠⵠΔ;
      ΔΔ[1015][2] = Ⲇⵠ.ΔΔⵠΔΔⲆΔ;
      ΔΔ[1014] = ΔΔ[1015];
      ΔΔ[1016] = ΔΔ[1015];
      ΔΔ[1035] = [];
      ΔΔ[1035][0] = Ⲇⵠ.ⲆⲆⵠᐃⵠ;
      ΔΔ[1035][1] = Ⲇⵠ.ⲆⲆⵠᐃⵠ;
      ΔΔ[1035][2] = Ⲇⵠ.ⲆⲆⵠᐃⵠ;
      ΔΔ[Xr.ΔⵠᐃⲆΔΔⲆⵠΔ] = ΔΔ[1035];
      ΔΔ[1036] = ΔΔ[1035];
      ΔΔ[1037] = [];
      ΔΔ[1037][0] = Ⲇⵠ.ΔⲆΔⵠᐃ;
      ΔΔ[1037][wt] = Ⲇⵠ.ΔⲆΔⵠᐃ;
      ΔΔ[1037][2] = Ⲇⵠ.ΔⲆΔⵠᐃ;
      ΔΔ[Xr.ⲆΔⲆᐃΔΔⵠⲆᐃ] = ΔΔ[1037];
      ΔΔ[1038] = ΔΔ[1037];
      ΔΔ[1039] = [];
      ΔΔ[1039][eu] = Ⲇⵠ.ΔⲆΔⵠⲆ;
      ΔΔ[1039][za] = Ⲇⵠ.ΔⲆΔⵠⲆ;
      ΔΔ[1039][2] = Ⲇⵠ.ΔⲆΔⵠⲆ;
      ΔΔ[Xr.ⵠΔᐃΔᐃⵠⲆⵠⵠ] = ΔΔ[1039];
      ΔΔ[1040] = ΔΔ[1039];
      ΔΔ[1156] = [];
      ΔΔ[1156][Zj] = Ⲇⵠ.ΔΔⵠⵠⵠ;
      ΔΔ[1156][Te] = Ⲇⵠ.ΔΔⵠⵠⵠ;
      ΔΔ[1156][2] = Ⲇⵠ.ΔΔⵠⵠⵠ;
      ΔΔ[1157] = ΔΔ[1156];
      ΔΔ[1046] = [];
      ΔΔ[1046][Lr] = Ⲇⵠ.ΔⵠᐃᐃⲆΔΔ;
      ΔΔ[1046][zg] = Ⲇⵠ.ⵠⵠΔⲆᐃⲆⲆ;
      ΔΔ[1046][Lt] = Ⲇⵠ.ᐃⵠΔΔᐃΔⵠ;
      ΔΔ[1048] = ΔΔ[1046];
      ΔΔ[1047] = ΔΔ[1046];
      ΔΔ[744] = [];
      ΔΔ[744][0] = Ⲇⵠ.ⲆᐃⲆⲆⵠΔΔ;
      ΔΔ[744][Wl] = Ⲇⵠ.ⲆⲆⲆⵠⵠᐃⲆ;
      ΔΔ[744][2] = Ⲇⵠ.ⲆᐃⵠᐃⲆⵠⲆ;
      ΔΔ[746] = ΔΔ[744];
      ΔΔ[745] = ΔΔ[744];
      ΔΔ[747] = [];
      ΔΔ[747][os] = Ⲇⵠ.ⵠᐃⲆⵠⵠⲆΔ;
      ΔΔ[747][Oq] = Ⲇⵠ.ᐃⵠᐃⵠⲆΔⲆ;
      ΔΔ[747][Hj] = Ⲇⵠ.ΔΔⲆⵠΔᐃⵠ;
      ΔΔ[749] = ΔΔ[747];
      ΔΔ[748] = ΔΔ[747];
      ΔΔ[1049] = [];
      ΔΔ[1049][0] = Ⲇⵠ.ⵠΔᐃᐃΔᐃⵠ;
      ΔΔ[1049][1] = Ⲇⵠ.ⵠⲆⵠᐃⲆΔᐃ;
      ΔΔ[1049][vg] = Ⲇⵠ.ΔΔⲆᐃⵠΔᐃ;
      ΔΔ[1051] = ΔΔ[1049];
      ΔΔ[1050] = ΔΔ[1049];
      ΔΔ[1189] = [];
      ΔΔ[1189][0] = Ⲇⵠ.ᐃⲆⵠΔΔⵠᐃ;
      ΔΔ[1189][Gh] = Ⲇⵠ.ΔⵠᐃΔⵠⲆⲆ;
      ΔΔ[1189][2] = Ⲇⵠ.ⲆⵠΔⵠᐃᐃⵠ;
      ΔΔ[1191] = ΔΔ[1189];
      ΔΔ[1190] = ΔΔ[1189];
      ΔΔ[1110] = [];
      ΔΔ[1110][ya] = Ⲇⵠ.ⲆΔⵠᐃⵠⲆⲆ;
      ΔΔ[1110][Xn] = Ⲇⵠ.ⵠⵠΔⵠⵠΔΔ;
      ΔΔ[1110][H] = Ⲇⵠ.ⲆⲆⵠΔᐃⵠΔ;
      ΔΔ[1112] = ΔΔ[1110];
      ΔΔ[1111] = ΔΔ[1110];
      ΔΔ[1131] = [];
      ΔΔ[1131][Hi] = Ⲇⵠ.ⵠΔⵠⵠΔⵠᐃⲆΔ;
      ΔΔ[1131][au] = Ⲇⵠ.ᐃⵠⵠⵠᐃⲆⵠᐃΔ;
      ΔΔ[1131][Hj] = Ⲇⵠ.ᐃⲆᐃᐃⵠⵠⲆⵠⲆ;
      ΔΔ[1133] = ΔΔ[1131];
      ΔΔ[1132] = ΔΔ[1131];
      ΔΔ[1137] = [];
      ΔΔ[1137][0] = Ⲇⵠ.ⵠΔⵠᐃⵠΔⵠ;
      ΔΔ[1137][1] = Ⲇⵠ.ⵠⵠⵠⵠⵠⵠΔ;
      ΔΔ[1137][xj] = Ⲇⵠ.ⵠⲆⲆⲆᐃⲆᐃ;
      ΔΔ[1138] = ΔΔ[1137];
      ΔΔ[1139] = ΔΔ[1137];
      ΔΔ[1140] = [];
      ΔΔ[1140][Rq] = Ⲇⵠ.ⲆⲆΔⵠᐃⲆⵠ;
      ΔΔ[1140][pu] = Ⲇⵠ.ⵠⵠⲆⵠⵠᐃⲆ;
      ΔΔ[1140][Lt] = Ⲇⵠ.ΔΔⵠΔⵠⲆΔ;
      ΔΔ[1141] = ΔΔ[1140];
      ΔΔ[1142] = ΔΔ[1140];
      ΔΔ[1117] = [];
      ΔΔ[1117][Hi] = Ⲇⵠ.ⲆⲆᐃⲆⲆⵠᐃ;
      ΔΔ[1117][zg] = Ⲇⵠ.ΔⲆᐃΔΔΔⲆ;
      ΔΔ[1117][2] = Ⲇⵠ.ΔⵠᐃⲆΔⲆⲆ;
      ΔΔ[1116] = ΔΔ[1117];
      ΔΔ[1118] = ΔΔ[1117];
      ΔΔ[1080] = [];
      ΔΔ[1080][eu] = Ⲇⵠ.ΔⲆΔΔⲆⵠⵠ;
      ΔΔ[1080][1] = Ⲇⵠ.ΔΔⲆⵠᐃⲆⵠ;
      ΔΔ[1080][2] = Ⲇⵠ.ΔⵠⲆΔⲆⵠΔ;
      ΔΔ[1082] = ΔΔ[1080];
      ΔΔ[1081] = ΔΔ[1080];
      ΔΔ[1224] = [];
      ΔΔ[1224][Ih] = Ⲇⵠ.ΔⵠⵠⲆΔⵠᐃ;
      ΔΔ[1224][pu] = Ⲇⵠ.ΔⲆΔⵠⵠᐃΔ;
      ΔΔ[1224][2] = Ⲇⵠ.ⲆΔⲆⲆⲆⵠᐃ;
      ΔΔ[1226] = ΔΔ[1224];
      ΔΔ[1225] = ΔΔ[1224];
      ΔΔ[1095] = [];
      ΔΔ[1095][ya] = Ⲇⵠ.ΔⵠᐃΔᐃⲆⵠ;
      ΔΔ[1095][1] = Ⲇⵠ.ⲆⵠΔⵠⲆⲆΔ;
      ΔΔ[1095][2] = Ⲇⵠ.ⲆⲆΔⵠΔⲆⵠ;
      ΔΔ[1097] = ΔΔ[1095];
      ΔΔ[1096] = ΔΔ[1095];
      ΔΔ[717] = bu(Xn, [{
        f: Hc,
        x: 0,
        y: 0,
        a: 1,
        r: Ih,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
      }, {
        f: Td,
        x: 0,
        y: 0,
        a: 1,
        r: Ih,
        c: ["#e4c027"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[718] = ΔΔ[717];
      ΔΔ[408] = bu(Tl, [{
        f: Nc,
        x: eu,
        y: 0,
        a: ie,
        r: Ih,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[409] = ΔΔ[408];
      ΔΔ[907] = bu(1, [{
        f: Pc,
        x: 0,
        y: mj,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
      }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[909] = ΔΔ[907];
      ΔΔ[908] = ΔΔ[907];
      ΔΔ[197] = bu(1, [{
        f: pd,
        x: os,
        y: Lr,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[906] = ΔΔ[197];
      ΔΔ[901] = bu(1, [{
        f: dm,
        x: 2,
        y: Bb,
        a: zs,
        r: Math.PI / kq,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[900] = ΔΔ[901];
      ΔΔ[899] = ΔΔ[901];
      ΔΔ[401] = bu(Xn, [{
        f: gc,
        x: eh,
        y: 0,
        a: sd,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[402] = ΔΔ[401];
      ΔΔ[395] = bu(Wl, [{
        f: uc,
        x: xj,
        y: 0,
        a: Oq,
        r: Math.PI / Qu,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[396] = ΔΔ[395];
      ΔΔ[398] = bu(pu, [{
        f: Lc,
        x: as,
        y: 0,
        a: 1,
        r: Math.PI / Hh,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[399] = ΔΔ[398];
      ΔΔ[404] = bu(zg, [{
        f: vd,
        x: 2,
        y: Bb,
        a: za,
        r: Math.PI / ib,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[405] = ΔΔ[404];
      ΔΔ[472] = bu(sd, [{
        f: Gd,
        x: Pn,
        y: st,
        a: pu,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[473] = ΔΔ[472];
      ΔΔ[874] = bu(sd, [{
        f: Gc,
        x: rs,
        y: mj,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
      }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[876] = ΔΔ[874];
      ΔΔ[875] = ΔΔ[874];
      ΔΔ[477] = bu(1, [{
        f: oc,
        x: H,
        y: mj,
        a: 1,
        r: Math.PI / ta,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[478] = ΔΔ[477];
      ΔΔ[709] = bu(pu, [{
        f: hm,
        x: Mg,
        y: Lr,
        a: Tl,
        r: Math.PI / mb,
        c: ["#0d1b1c", "#939393", "#5f6061"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[711] = ΔΔ[709];
      ΔΔ[550] = bu(pu, [{
        f: hc,
        x: 2,
        y: wg,
        a: au,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[551] = ΔΔ[550];
      ΔΔ[480] = bu(mk, [{
        f: oc,
        x: rs,
        y: 0,
        a: og,
        r: Math.PI / Oj,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[481] = ΔΔ[480];
      ΔΔ[483] = bu(1, [{
        f: oc,
        x: Lt,
        y: 0,
        a: 1,
        r: Math.PI / z,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[484] = ΔΔ[483];
      ΔΔ[486] = bu(zs, [{
        f: oc,
        x: Hj,
        y: fl,
        a: 1,
        r: Math.PI / hl,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[487] = ΔΔ[486];
      ΔΔ[489] = [];
      ΔΔ[489][Mg] = Ⲇⵠ.ΔⲆⵠⲆΔᐃΔ;
      ΔΔ[489][ie] = Ⲇⵠ.ⵠⲆᐃΔᐃᐃΔ;
      ΔΔ[489][2] = Ⲇⵠ.ᐃⲆⵠⵠⲆⲆΔ;
      ΔΔ[491] = ΔΔ[489];
      ΔΔ[490] = ΔΔ[489];
      ΔΔ[1195] = [];
      ΔΔ[1195][Yh] = Ⲇⵠ.ΔΔᐃⵠᐃⲆΔ;
      ΔΔ[1195][Oq] = Ⲇⵠ.ⲆΔᐃⲆΔΔⲆ;
      ΔΔ[1195][Rl] = Ⲇⵠ.Ⲇⵠᐃᐃᐃᐃᐃ;
      ΔΔ[1197] = ΔΔ[1195];
      ΔΔ[1196] = ΔΔ[1195];
      ΔΔ[1199] = [];
      ΔΔ[1199][0] = Ⲇⵠ.ΔᐃᐃΔⵠᐃΔ;
      ΔΔ[1199][1] = Ⲇⵠ.ⵠΔΔⵠΔΔᐃ;
      ΔΔ[1199][2] = Ⲇⵠ.ⵠᐃⲆⵠΔⵠⲆ;
      ΔΔ[1201] = ΔΔ[1199];
      ΔΔ[1200] = ΔΔ[1199];
      ΔΔ[1203] = [];
      ΔΔ[1203][Bb] = Ⲇⵠ.ᐃⵠΔΔⵠᐃⲆ;
      ΔΔ[1203][mk] = Ⲇⵠ.ⵠⵠᐃⲆⵠᐃⲆ;
      ΔΔ[1203][2] = Ⲇⵠ.ⲆΔⵠᐃᐃⵠᐃ;
      ΔΔ[1205] = ΔΔ[1203];
      ΔΔ[1204] = ΔΔ[1203];
      ΔΔ[1207] = [];
      ΔΔ[1207][Zj] = Ⲇⵠ.ΔⵠΔᐃᐃⲆᐃ;
      ΔΔ[1207][1] = Ⲇⵠ.ᐃⵠΔⲆⲆⲆⲆ;
      ΔΔ[1207][2] = Ⲇⵠ.ᐃⵠᐃᐃᐃΔⵠ;
      ΔΔ[1209] = ΔΔ[1207];
      ΔΔ[1208] = ΔΔ[1207];
      ΔΔ[1211] = [];
      ΔΔ[1211][Lr] = Ⲇⵠ.ⵠΔᐃⲆᐃΔᐃ;
      ΔΔ[1211][sd] = Ⲇⵠ.ΔΔΔⵠⲆΔᐃ;
      ΔΔ[1211][Rl] = Ⲇⵠ.ᐃⲆⲆᐃᐃᐃᐃ;
      ΔΔ[1213] = ΔΔ[1211];
      ΔΔ[1212] = ΔΔ[1211];
      ΔΔ[1215] = [];
      ΔΔ[1215][wj] = Ⲇⵠ.ⵠᐃⲆᐃᐃΔⲆ;
      ΔΔ[1215][Hg] = Ⲇⵠ.ΔⲆΔΔᐃΔⵠ;
      ΔΔ[1215][Ug] = Ⲇⵠ.ᐃᐃᐃⵠⵠⲆΔ;
      ΔΔ[1217] = ΔΔ[1215];
      ΔΔ[1216] = ΔΔ[1215];
      ΔΔ[518] = bu(Tl, [{
        f: Zc,
        x: -2,
        y: -2,
        a: Wl,
        r: 0,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
      }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[519] = ΔΔ[518];
      ΔΔ[532] = bu(zg, [{
        f: zm,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / q,
        c: ["#141414", "#c4a23a", "#816511"]
      }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[533] = ΔΔ[532];
      ΔΔ[521] = bu(pu, [{
        f: md,
        x: -2,
        y: -lr,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ΔΔ[523] = bu(Tl, [{
        f: md,
        x: -2,
        y: -2,
        a: Oq,
        r: Lr,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ΔΔ[529] = bu(hb, [{
        f: xd,
        x: os,
        y: 0,
        a: Gh,
        r: 0,
        c: ["#347f93", "#54a4ba"]
      }, {
        f: bm,
        x: 0,
        y: Ih,
        a: 1,
        r: wj,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
      }, {
        f: lc,
        x: 0,
        y: Zj,
        a: 1,
        r: Rq,
        c: ["#a9e4ed", "#86d4e0"]
      }, {
        f: lm,
        x: mj,
        y: 0,
        a: 1,
        r: In,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[530] = ΔΔ[529];
      ΔΔ[553] = bu(1, [{
        f: Ld,
        x: 45,
        y: 70,
        a: $b,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[555] = ΔΔ[553];
      ΔΔ[541] = bu(za, [{
        f: om,
        x: 0,
        y: eu,
        a: Wl,
        r: Yh,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[542] = ΔΔ[541];
      ΔΔ[779] = bu(Te, [{
        f: Xd,
        x: eu,
        y: 0,
        a: Hg,
        r: mj,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[780] = ΔΔ[779];
      ΔΔ[767] = bu(Hg, [{
        f: pc,
        x: Bb,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041"]
      }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[768] = ΔΔ[767];
      ΔΔ[776] = bu(1, [{
        f: Wc,
        x: ya,
        y: 3,
        a: Hg,
        r: eu,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[777] = ΔΔ[776];
      ΔΔ[771] = bu(1, [{
        f: Wc,
        x: 0,
        y: 3,
        a: og,
        r: 0,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[772] = ΔΔ[771];
      ΔΔ[756] = bu(1, [{
        f: ud,
        x: 0,
        y: lg,
        a: zg,
        r: ya,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[758] = ΔΔ[756];
      ΔΔ[760] = bu(1, [{
        f: ud,
        x: Qs,
        y: 10,
        a: 1,
        r: st,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[762] = ΔΔ[760];
      ΔΔ[764] = bu(sd, [{
        f: ud,
        x: In,
        y: 10,
        a: zg,
        r: ya,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[770] = ΔΔ[764];
      ΔΔ[910] = bu(Gh, [{
        f: Jd,
        x: -1,
        y: mj,
        a: 1,
        r: Mg,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[912] = ΔΔ[910];
      ΔΔ[911] = ΔΔ[910];
      ΔΔ[732] = bu(Gh, [{
        f: wc,
        x: 0,
        y: Lr,
        a: zs,
        r: 0,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[734] = ΔΔ[732];
      ΔΔ[563] = bu(1, [{
        f: Uc,
        x: 0,
        y: Hi,
        a: za,
        r: Math.PI / Zg,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
      }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[564] = ΔΔ[563];
      ΔΔ[751] = bu(Te, [{
        f: gm,
        x: st,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[252] = bu(wt, [{
        f: Ic,
        x: Hi,
        y: wg,
        a: 1,
        r: Mg,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[753] = bu(1, [{
        f: gm,
        x: 0,
        y: 0,
        a: og,
        r: st,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[253] = bu(Xn, [{
        f: Ic,
        x: 0,
        y: 0,
        a: Te,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[176] = bu(1, [{
        f: vm,
        x: 0,
        y: wj,
        a: og,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[177] = bu($b, [{
        f: vm,
        x: Yh,
        y: ya,
        a: 1,
        r: 0,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[175] = bu(zs, [{
        f: vm,
        x: os,
        y: Hi,
        a: 1,
        r: 0,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[616] = bu(1, [{
        f: nm,
        x: os,
        y: 0,
        a: Hg,
        r: Math.PI / Eq,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[618] = ΔΔ[616];
      ΔΔ[699] = bu(1, [{
        f: nm,
        x: Yh,
        y: 0,
        a: gs,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[700] = ΔΔ[699];
      ΔΔ[702] = bu(wt, [{
        f: nm,
        x: mj,
        y: ya,
        a: Xn,
        r: Math.PI / Qu,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[704] = ΔΔ[702];
      ΔΔ[705] = bu(1, [{
        f: nm,
        x: ya,
        y: ig,
        a: gs,
        r: Math.PI / M,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[706] = ΔΔ[705];
      ΔΔ[420] = bu(Tl, [{
        f: vc,
        x: 0,
        y: mj,
        a: wt,
        r: eu,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[421] = ΔΔ[420];
      ΔΔ[826] = bu(1, [{
        f: Bc,
        x: 0,
        y: 0,
        a: Oq,
        r: mj,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[827] = ΔΔ[826];
      ΔΔ[429] = bu(Oq, [{
        f: Nd,
        x: 0,
        y: -2,
        a: 1,
        r: Zj,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[430] = ΔΔ[429];
      ΔΔ[432] = bu(1, [{
        f: Ed,
        x: Rq,
        y: Ih,
        a: hb,
        r: 0,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[433] = ΔΔ[432];
      ΔΔ[435] = bu(1, [{
        f: cm,
        x: eu,
        y: 0,
        a: 1,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[436] = ΔΔ[435];
      ΔΔ[438] = bu(ie, [{
        f: Qd,
        x: 0,
        y: wj,
        a: 1,
        r: 0,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[439] = ΔΔ[438];
      ΔΔ[441] = bu(1, [{
        f: fd,
        x: ya,
        y: wj,
        a: gs,
        r: st,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[442] = ΔΔ[441];
      ΔΔ[418] = bu(1, [{
        f: Jc,
        x: -5,
        y: -hl,
        a: sd,
        r: fl,
        c: ["#1d051e", "#c27add", "#cd98e5"]
      }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[609] = bu(Wl, [{
        f: cd,
        x: 0,
        y: st,
        a: 1,
        r: 0,
        c: ["#D7C393", "#a48c6c"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[142] = bu(og, [{
        f: tm,
        x: 0,
        y: Mg,
        a: zg,
        r: In,
        c: ["#93CBCE", "#E9F6F6"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[140] = bu(1, [{
        f: cd,
        x: ig,
        y: mj,
        a: 1,
        r: 0,
        c: ["#866432", "#6b4f25"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[180] = bu(1, [{
        f: wm,
        x: nq,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[181] = bu(1, [{
        f: Cd,
        x: 3,
        y: Hj,
        a: 1,
        r: In,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[784] = ΔΔ[180];
      ΔΔ[785] = ΔΔ[181];
      ΔΔ[789] = bu(1, [{
        f: Mc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
      }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[791] = ΔΔ[789];
      ΔΔ[613] = bu(1, [{
        f: Ac,
        x: 0,
        y: os,
        a: 1,
        r: Math.PI / hl,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[612] = bu(1, [{
        f: ic,
        x: Zj,
        y: 0,
        a: 1,
        r: Math.PI / z,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[715] = ΔΔ[613];
      ΔΔ[611] = ΔΔ[612];
      ΔΔ[634] = bu(1, [{
        f: Pu,
        x: Da,
        y: os,
        a: ie,
        r: ig,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[635] = ΔΔ[634];
      ΔΔ[200] = bu(1, [{
        f: Ku,
        x: mj,
        y: Qs,
        a: za,
        r: 0,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[866] = bu(ie, [{
        f: Lu,
        x: Ih,
        y: st,
        a: $b,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[143] = bu(gs, [{
        f: am,
        x: Da,
        y: -2,
        a: Tl,
        r: os,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[690] = ΔΔ[143];
      ΔΔ[662] = bu(gs, [{
        f: Fc,
        x: -ub,
        y: -5,
        a: Te,
        r: Hi,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[664] = bu(Te, [{
        f: Dd,
        x: In,
        y: Bb,
        a: 1,
        r: Yh,
        c: ["#1d051e", "#42261A", "#281818"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[666] = ΔΔ[664];
      ΔΔ[649] = bu(za, [{
        f: Xc,
        x: -3,
        y: ig,
        a: 1,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[650] = ΔΔ[649];
      ΔΔ[674] = bu(Tl, [{
        f: Ut,
        x: wg,
        y: wj,
        a: 1,
        r: 0,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
      }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[646] = bu(1, [{
        f: Yd,
        x: ig,
        y: wg,
        a: 1,
        r: 0,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[647] = ΔΔ[646];
      ΔΔ[685] = bu(1, [{
        f: Pd,
        x: st,
        y: In,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[684] = ΔΔ[685];
      ΔΔ[870] = bu(1, [{
        f: Mb,
        x: -5,
        y: -kq,
        a: 1,
        r: Rq,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
      }], $b, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[871] = ΔΔ[870];
      ΔΔ[605] = bu(za, [{
        f: dd,
        x: 0,
        y: 0,
        a: 1,
        r: Da,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
      }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[604] = ΔΔ[605];
      ΔΔ[842] = bu(1, [{
        f: Db,
        x: 0,
        y: 0,
        a: Hg,
        r: 0,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[843] = ΔΔ[842];
      ΔΔ[652] = bu(1, [{
        f: sc,
        x: -mk,
        y: Da,
        a: Oq,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
      ΔΔ[654] = ΔΔ[652];
      ΔΔ[626] = bu(Oq, [{
        f: sc,
        x: -zs,
        y: 0,
        a: Xn,
        r: -Math.PI / Ll,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
      }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[627] = ΔΔ[626];
      ΔΔ[629] = bu(1, [{
        f: Sc,
        x: fl,
        y: Zj,
        a: Oq,
        r: wg,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[196] = bu(mk, [{
        f: zu,
        x: 0,
        y: 0,
        a: Tl,
        r: Rq,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[898] = ΔΔ[196];
      ΔΔ[659] = bu(1, [{
        f: Vd,
        x: 0,
        y: 0,
        a: Xn,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[660] = ΔΔ[659];
      ΔΔ[145] = bu(wt, [{
        f: Vt,
        x: -pq,
        y: -8,
        a: 1,
        r: Bb,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[730] = ΔΔ[145];
      ΔΔ[566] = [];
      ΔΔ[566][0] = Ⲇⵠ.ⲆᐃᐃᐃΔᐃⵠ;
      ΔΔ[566][1] = Ⲇⵠ.ΔᐃⲆⲆⵠⵠᐃ;
      ΔΔ[566][2] = Ⲇⵠ.ΔⲆⲆᐃΔⵠⵠ;
      ΔΔ[567] = ΔΔ[566];
      ΔΔ[568] = ΔΔ[566];
      ΔΔ[877] = [];
      ΔΔ[877][Bb] = Ⲇⵠ.ⲆⵠΔⵠⲆⲆⲆ;
      ΔΔ[877][1] = Ⲇⵠ.ⲆⲆⲆⵠⲆⲆⲆ;
      ΔΔ[877][2] = Ⲇⵠ.ΔⲆⵠΔⵠⲆⵠ;
      ΔΔ[879] = ΔΔ[877];
      ΔΔ[878] = ΔΔ[877];
      ΔΔ[933] = ΔΔ[932];
      ΔΔ[934] = ΔΔ[932];
      ΔΔ[932] = [];
      ΔΔ[932][0] = Ⲇⵠ.ⵠΔⵠⲆⵠᐃΔ;
      ΔΔ[932][1] = Ⲇⵠ.ⲆΔⵠⲆⵠⲆΔ;
      ΔΔ[932][2] = Ⲇⵠ.ⲆⵠΔᐃⲆⲆⲆ;
      ΔΔ[933] = ΔΔ[932];
      ΔΔ[934] = ΔΔ[932];
      ΔΔ[943] = [];
      ΔΔ[943][In] = Ⲇⵠ.ᐃⲆᐃⵠᐃⵠⵠ;
      ΔΔ[943][au] = Ⲇⵠ.ΔΔⲆⲆⲆΔΔ;
      ΔΔ[943][2] = Ⲇⵠ.ᐃᐃⵠΔⵠⵠΔ;
      ΔΔ[944] = ΔΔ[943];
      ΔΔ[945] = ΔΔ[943];
      ΔΔ[921] = [];
      ΔΔ[921][Qs] = Ⲇⵠ.ⵠⵠⵠᐃⲆⲆΔ;
      ΔΔ[921][Oq] = Ⲇⵠ.ⲆⲆᐃΔᐃⲆⲆ;
      ΔΔ[921][2] = Ⲇⵠ.ⵠΔᐃⵠⲆⵠⵠ;
      ΔΔ[922] = ΔΔ[921];
      ΔΔ[923] = ΔΔ[921];
      ΔΔ[925] = [];
      ΔΔ[925][Ih] = Ⲇⵠ.ᐃᐃᐃⵠⵠⲆⵠ;
      ΔΔ[925][1] = Ⲇⵠ.ⲆᐃⵠⲆⵠΔⵠ;
      ΔΔ[925][2] = Ⲇⵠ.ⲆᐃⲆΔⲆΔⲆ;
      ΔΔ[926] = ΔΔ[925];
      ΔΔ[927] = ΔΔ[925];
      ΔΔ[929] = [];
      ΔΔ[929][ya] = Ⲇⵠ.ΔⲆⵠⵠΔⲆΔ;
      ΔΔ[929][au] = Ⲇⵠ.ⵠΔⵠⵠⲆᐃⵠ;
      ΔΔ[929][It] = Ⲇⵠ.ⲆⵠⵠⵠΔΔΔ;
      ΔΔ[930] = ΔΔ[929];
      ΔΔ[931] = ΔΔ[929];
      ΔΔ[946] = [];
      ΔΔ[946][0] = Ⲇⵠ.ⵠΔⵠⲆⲆⵠⲆ;
      ΔΔ[946][Tl] = Ⲇⵠ.ⲆⵠᐃⵠΔⵠᐃ;
      ΔΔ[946][Vh] = Ⲇⵠ.ᐃᐃΔΔⲆΔᐃ;
      ΔΔ[947] = ΔΔ[946];
      ΔΔ[948] = ΔΔ[946];
      ΔΔ[735] = [];
      ΔΔ[735][Hi] = Ⲇⵠ.ⲆΔⵠᐃᐃⲆᐃ;
      ΔΔ[735][1] = Ⲇⵠ.ⵠΔᐃⵠΔⵠⵠ;
      ΔΔ[735][2] = Ⲇⵠ.ᐃᐃⵠᐃⲆⲆⲆ;
      ΔΔ[737] = ΔΔ[735];
      ΔΔ[736] = ΔΔ[735];
      ΔΔ[1164] = [];
      ΔΔ[1164][0] = Ⲇⵠ.ⵠΔΔⵠᐃⵠΔ;
      ΔΔ[1164][1] = Ⲇⵠ.ⵠⲆΔΔΔⵠⵠ;
      ΔΔ[1164][H] = Ⲇⵠ.ⵠⵠΔΔⲆᐃΔ;
      ΔΔ[Xr.ⵠⲆⲆⵠΔⲆᐃᐃΔ] = ΔΔ[1164];
      ΔΔ[1165] = ΔΔ[1164];
      ΔΔ[738] = [];
      ΔΔ[738][Da] = Ⲇⵠ.ΔⵠᐃⲆⵠᐃᐃ;
      ΔΔ[738][1] = Ⲇⵠ.ⲆⵠΔΔⵠΔΔ;
      ΔΔ[738][Rl] = Ⲇⵠ.ⵠᐃⲆⲆⲆⲆⲆ;
      ΔΔ[740] = ΔΔ[738];
      ΔΔ[739] = ΔΔ[738];
      ΔΔ[741] = [];
      ΔΔ[741][Yh] = Ⲇⵠ.ΔᐃⵠⵠⵠⵠΔ;
      ΔΔ[741][1] = Ⲇⵠ.ⲆᐃΔᐃⵠᐃΔ;
      ΔΔ[741][lr] = Ⲇⵠ.ΔΔᐃΔΔⲆⵠ;
      ΔΔ[743] = ΔΔ[741];
      ΔΔ[742] = ΔΔ[741];
      ΔΔ[938] = [];
      ΔΔ[938][0] = Ⲇⵠ.ᐃΔᐃᐃⲆᐃᐃ;
      ΔΔ[938][au] = Ⲇⵠ.ⵠⵠⲆᐃᐃᐃᐃ;
      ΔΔ[938][Vg] = Ⲇⵠ.ᐃᐃΔⵠⵠⲆΔ;
      ΔΔ[939] = ΔΔ[938];
      ΔΔ[936] = [];
      ΔΔ[936][wj] = Ⲇⵠ.ⵠⲆᐃΔⵠⲆⲆ;
      ΔΔ[936][1] = Ⲇⵠ.ᐃΔⵠⵠⲆⵠⲆ;
      ΔΔ[936][H] = Ⲇⵠ.ᐃᐃᐃⲆⵠᐃΔ;
      ΔΔ[937] = ΔΔ[936];
      ΔΔ[617] = ΔΔ[616];
      ΔΔ[701] = ΔΔ[699];
      ΔΔ[703] = ΔΔ[702];
      ΔΔ[707] = ΔΔ[705];
      ΔΔ[348] = ΔΔ[311];
      ΔΔ[633] = ΔΔ[631];
      ΔΔ[645] = ΔΔ[644];
      ΔΔ[640] = ΔΔ[639];
      ΔΔ[273] = ΔΔ[309];
      ΔΔ[590] = ΔΔ[252];
      ΔΔ[752] = ΔΔ[751];
      ΔΔ[591] = ΔΔ[253];
      ΔΔ[754] = ΔΔ[753];
      ΔΔ[276] = ΔΔ[328];
      ΔΔ[863] = ΔΔ[865];
      ΔΔ[862] = ΔΔ[860];
      ΔΔ[831] = ΔΔ[829];
      ΔΔ[340] = ΔΔ[261];
      ΔΔ[596] = ΔΔ[594];
      ΔΔ[345] = ΔΔ[292];
      ΔΔ[346] = ΔΔ[293];
      ΔΔ[457] = ΔΔ[455];
      ΔΔ[274] = ΔΔ[313];
      ΔΔ[341] = ΔΔ[312];
      ΔΔ[272] = ΔΔ[258];
      ΔΔ[344] = ΔΔ[296];
      ΔΔ[459] = ΔΔ[458];
      ΔΔ[342] = ΔΔ[315];
      ΔΔ[270] = ΔΔ[297];
      ΔΔ[271] = ΔΔ[298];
      ΔΔ[343] = ΔΔ[316];
      ΔΔ[269] = ΔΔ[277];
      ΔΔ[358] = ΔΔ[310];
      ΔΔ[354] = ΔΔ[329];
      ΔΔ[356] = ΔΔ[331];
      ΔΔ[355] = ΔΔ[330];
      ΔΔ[494] = ΔΔ[492];
      ΔΔ[349] = ΔΔ[317];
      ΔΔ[350] = ΔΔ[319];
      ΔΔ[275] = ΔΔ[300];
      ΔΔ[351] = ΔΔ[323];
      ΔΔ[353] = ΔΔ[305];
      ΔΔ[514] = ΔΔ[513];
      ΔΔ[352] = ΔΔ[303];
      ΔΔ[520] = ΔΔ[518];
      ΔΔ[534] = ΔΔ[532];
      ΔΔ[531] = ΔΔ[529];
      ΔΔ[522] = ΔΔ[521];
      ΔΔ[524] = ΔΔ[523];
      ΔΔ[565] = ΔΔ[563];
      ΔΔ[554] = ΔΔ[553];
      ΔΔ[357] = ΔΔ[335];
      ΔΔ[359] = ΔΔ[337];
      ΔΔ[339] = pr(function (a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 129;
        e.save();
        e.translate(a * 90, a * 90);
        yb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
        e.restore();
        db(e, c[Rq], c[1], Gi);
        e.save();
        yb(e, a * 30, a * 115, a * 60, a * Ot, a * 15);
        e.restore();
        db(e, c[2], c[sl], Ct);
        e.save();
        yb(e, a * 50, a * 117, a * 20, a * vr, a * 15);
        e.restore();
        db(e, c[pq]);
        return d;
      }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
      ΔΔ[366] = bu(0.5, [{
        f: Od,
        x: 0,
        y: 2,
        a: za,
        r: Ih,
        c: ["#ffffff"]
      }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
      ΔΔ[382] = ΔΔ[361];
      ΔΔ[383] = ΔΔ[362];
      ΔΔ[384] = ΔΔ[364];
      ΔΔ[497] = ΔΔ[495];
      ΔΔ[385] = ΔΔ[392];
      ΔΔ[774] = ΔΔ[178];
      ΔΔ[775] = ΔΔ[179];
      ΔΔ[386] = ΔΔ[368];
      ΔΔ[625] = ΔΔ[624];
      ΔΔ[394] = ΔΔ[393];
      ΔΔ[1163] = ΔΔ[1162];
      ΔΔ[506] = ΔΔ[505];
      ΔΔ[387] = ΔΔ[369];
      ΔΔ[504] = ΔΔ[502];
      ΔΔ[388] = ΔΔ[372];
      ΔΔ[389] = ΔΔ[375];
      ΔΔ[390] = ΔΔ[378];
      ΔΔ[501] = ΔΔ[499];
      ΔΔ[391] = ΔΔ[381];
      ΔΔ[403] = ΔΔ[401];
      ΔΔ[397] = ΔΔ[395];
      ΔΔ[400] = ΔΔ[398];
      ΔΔ[406] = ΔΔ[404];
      ΔΔ[474] = ΔΔ[472];
      ΔΔ[875] = ΔΔ[874];
      ΔΔ[552] = ΔΔ[550];
      ΔΔ[710] = ΔΔ[709];
      ΔΔ[479] = ΔΔ[477];
      ΔΔ[482] = ΔΔ[480];
      ΔΔ[485] = ΔΔ[483];
      ΔΔ[488] = ΔΔ[486];
      ΔΔ[410] = ΔΔ[408];
      ΔΔ[719] = ΔΔ[717];
      ΔΔ[422] = ΔΔ[420];
      ΔΔ[431] = ΔΔ[429];
      ΔΔ[434] = ΔΔ[432];
      ΔΔ[437] = ΔΔ[435];
      ΔΔ[543] = ΔΔ[541];
      ΔΔ[733] = ΔΔ[732];
      ΔΔ[440] = ΔΔ[438];
      ΔΔ[443] = ΔΔ[441];
      ΔΔ[446] = ΔΔ[418];
      ΔΔ[606] = ΔΔ[605];
      ΔΔ[844] = ΔΔ[842];
      ΔΔ[683] = ΔΔ[685];
      ΔΔ[610] = ΔΔ[609];
      ΔΔ[689] = ΔΔ[143];
      ΔΔ[686] = ΔΔ[142];
      ΔΔ[682] = ΔΔ[140];
      ΔΔ[615] = ΔΔ[613];
      ΔΔ[614] = ΔΔ[612];
      ΔΔ[628] = ΔΔ[626];
      ΔΔ[630] = ΔΔ[629];
      ΔΔ[636] = ΔΔ[634];
      ΔΔ[868] = ΔΔ[200];
      ΔΔ[867] = ΔΔ[866];
      ΔΔ[648] = ΔΔ[646];
      ΔΔ[651] = ΔΔ[649];
      ΔΔ[653] = ΔΔ[652];
      ΔΔ[661] = ΔΔ[659];
      ΔΔ[898] = ΔΔ[196];
      ΔΔ[663] = ΔΔ[662];
      ΔΔ[665] = ΔΔ[664];
      ΔΔ[675] = ΔΔ[674];
      ΔΔ[731] = ΔΔ[145];
      ΔΔ[757] = ΔΔ[756];
      ΔΔ[759] = ΔΔ[176];
      ΔΔ[761] = ΔΔ[760];
      ΔΔ[763] = ΔΔ[177];
      ΔΔ[765] = ΔΔ[764];
      ΔΔ[766] = ΔΔ[175];
      ΔΔ[769] = ΔΔ[767];
      ΔΔ[773] = ΔΔ[771];
      ΔΔ[778] = ΔΔ[776];
      ΔΔ[781] = ΔΔ[779];
      ΔΔ[787] = ΔΔ[181];
      ΔΔ[786] = ΔΔ[180];
      ΔΔ[790] = ΔΔ[789];
      ΔΔ[801] = ΔΔ[800];
      ΔΔ[810] = ΔΔ[808];
      ΔΔ[836] = ΔΔ[834];
      ΔΔ[847] = ΔΔ[845];
      ΔΔ[828] = ΔΔ[826];
    })();
    ΔΔ[540] = [];
    ΔΔ[540][Xr.ⲆᐃΔ] = [];
    ΔΔ[540][Xr.ΔⲆⵠ] = [];
    for (var a = fl; a < Xr.ⲆⵠᐃᐃᐃⲆᐃ; a++) {
      ΔΔ[540][Xr.ⲆᐃΔ].push(pr(tc(1, 4 + a, "#59B8CE")));
      ΔΔ[540][Xr.ΔⲆⵠ].push(pr(tc(1, Ct + a, "#90DDD9")));
    }
    ΔΔ[470] = [];
    ΔΔ[470][Xr.ⲆᐃΔ] = [];
    ΔΔ[470][Xr.ΔⲆⵠ] = [];
    for (a = 0; a < Xr.ⵠᐃⵠⵠΔᐃⲆ; a++) {
      ΔΔ[470][Xr.ⲆᐃΔ].push(pr(tc(1, 4 + a, "#fff")));
      ΔΔ[470][Xr.ΔⲆⵠ].push(pr(tc(1, 4 + a, "#fff")));
    }
    ΔΔ[471] = [];
    ΔΔ[471][Xr.ⲆᐃΔ] = [];
    ΔΔ[471][Xr.ΔⲆⵠ] = [];
    for (a = 0; Xr.ⵠᐃⵠⵠΔᐃⲆ > a; a++) {
      ΔΔ[471][Xr.ⲆᐃΔ].push(pr(tc(1, Na + a, "#DDCD8A")));
      ΔΔ[471][Xr.ΔⲆⵠ].push(pr(tc(1, 6 + a, "#155E57")));
    }
    ΔΔ[942] = [];
    ΔΔ[942][Xr.ⲆᐃΔ] = [];
    ΔΔ[942][Xr.ΔⲆⵠ] = [];
    for (a = Hi; a < Xr.ᐃᐃⲆⲆⵠᐃΔ; a++) {
      ΔΔ[942][Xr.ⲆᐃΔ].push(pr(tc(1, Vn + a, "#353326")));
      ΔΔ[942][Xr.ΔⲆⵠ].push(pr(tc(1, Wg + a, "#1D2526")));
    }
    ΔΔ[201] = [];
    ΔΔ[201][Xr.ⲆᐃΔ] = pr(_b(1.5, 0, ["#ee71a9"]));
    ΔΔ[201][Xr.ΔⲆⵠ] = pr(_b(1.5, 0, ["#ee71a9"]));
    ΔΔ[872] = [ΔΔ[201]];
    ΔΔ[872][$b] = [];
    ΔΔ[872][2] = [];
    ΔΔ[872][3] = [];
    ΔΔ[872][4] = [];
    ΔΔ[872][1][Xr.ⲆᐃΔ] = pr(_b(1.5, 0, ["#e2d63b"]));
    ΔΔ[872][$b][Xr.ΔⲆⵠ] = pr(_b(1.5, 0, ["#e2d63b"]));
    ΔΔ[872][2][Xr.ⲆᐃΔ] = pr(_b(1.5, 0, ["#309cbd"]));
    ΔΔ[872][2][Xr.ΔⲆⵠ] = pr(_b(1.5, 0, ["#309cbd"]));
    ΔΔ[872][ut][Xr.ⲆᐃΔ] = pr(_b(1.5, 0, ["#cd232d"]));
    ΔΔ[872][3][Xr.ΔⲆⵠ] = pr(_b(1.5, 0, ["#cd232d"]));
    ΔΔ[872][ls][Xr.ⲆᐃΔ] = pr(_b(1.5, 0, ["#42b672"]));
    ΔΔ[872][4][Xr.ΔⲆⵠ] = pr(_b(1.5, 0, ["#42b672"]));
    if (ᐃⵠΔⲆ.ΔᐃΔⵠᐃᐃΔ("cti", dj.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      pr = function (a) {
        a.loaded = Oq;
        return a;
      };
    }
    ΔΔ[797] = pr(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(wg, 0, a.width, a.height);
      b.lineWidth = Ls;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ΔΔ[108] = [];
    ΔΔ[108][Xr.ⲆᐃΔ] = [];
    ΔΔ[108][Xr.ΔⲆⵠ] = [];
    ΔΔ[108][Xr.ⲆᐃΔ].push(pr(ed(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[108][Xr.ⲆᐃΔ].push(pr(ed(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[108][Xr.ⲆᐃΔ].push(pr(ed(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[108][Xr.ΔⲆⵠ].push(pr(ed(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[108][Xr.ΔⲆⵠ].push(pr(ed(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[108][Xr.ΔⲆⵠ].push(pr(ed(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[111] = [];
    ΔΔ[111][Xr.ⲆᐃΔ] = [];
    ΔΔ[111][Xr.ΔⲆⵠ] = [];
    ΔΔ[111][Xr.ⲆᐃΔ].push(pr(rd(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[111][Xr.ⲆᐃΔ].push(pr(rd(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[111][Xr.ⲆᐃΔ].push(pr(rd(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[111][Xr.ΔⲆⵠ].push(pr(rd(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[111][Xr.ΔⲆⵠ].push(pr(rd(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[111][Xr.ΔⲆⵠ].push(pr(rd(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[112] = [];
    ΔΔ[112][Xr.ⲆᐃΔ] = [];
    ΔΔ[112][Xr.ΔⲆⵠ] = [];
    ΔΔ[112][Xr.ⲆᐃΔ].push(pr(od(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[112][Xr.ⲆᐃΔ].push(pr(od(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[112][Xr.ⲆᐃΔ].push(pr(od(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[112][Xr.ΔⲆⵠ].push(pr(od(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ΔΔ[112][Xr.ΔⲆⵠ].push(pr(od(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ΔΔ[112][Xr.ΔⲆⵠ].push(pr(od(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ΔΔ[239] = [];
    ΔΔ[239][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⲆⵠⵠⵠΔ;
    ΔΔ[239][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃᐃΔⲆⲆⲆ;
    ΔΔ[286] = [];
    ΔΔ[286][Xr.ⲆᐃΔ] = pr(Fu(0.6, ["#0d1b1c"]));
    ΔΔ[286][Xr.ΔⲆⵠ] = pr(Fu(0.6, ["#030d14"]));
    ΔΔ[793] = [];
    ΔΔ[793][Xr.ⲆᐃΔ] = pr(lu(0.6, ["#2a2938", "#242330"]));
    ΔΔ[793][Xr.ΔⲆⵠ] = pr(lu(0.6, ["#1b1e30", "#161921"]));
    ΔΔ[820] = [];
    ΔΔ[820][Xr.ⲆᐃΔ] = pr(Rb(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ΔΔ[820][Xr.ΔⲆⵠ] = pr(Rb(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ΔΔ[821] = [];
    ΔΔ[821][Xr.ⲆᐃΔ] = pr(Fb(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ΔΔ[821][Xr.ΔⲆⵠ] = pr(Fb(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ΔΔ[822] = [];
    ΔΔ[822][Xr.ⲆᐃΔ] = pr(mu(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ΔΔ[822][Xr.ΔⲆⵠ] = pr(mu(0.4, ["#030d14", "#11635e", "#02373e"]));
    ΔΔ[823] = pr(Gb(0.6, ["#BB0000"]));
    ΔΔ[824] = pr(Gb(0.6, ["#DBE71C"]));
    ΔΔ[825] = pr(Gb(0.6, ["#00BB00"]));
    ΔΔ[109] = [];
    ΔΔ[109][Xr.ⲆᐃΔ] = [];
    ΔΔ[109][Xr.ΔⲆⵠ] = [];
    ΔΔ[109][Xr.ⲆᐃΔ].push(Bu(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], false, 0));
    ΔΔ[109][Xr.ⲆᐃΔ].push(Bu(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], true, Bb));
    ΔΔ[109][Xr.ⲆᐃΔ].push(Bu(0.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], false, ya));
    ΔΔ[109][Xr.ⲆᐃΔ].push(Bu(0.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], kh, ig));
    ΔΔ[109][Xr.ⲆᐃΔ].push(Bu(0.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], false, Yh));
    ΔΔ[109][Xr.ⲆᐃΔ].push(Bu(0.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], us, Mg));
    ΔΔ[109][Xr.ΔⲆⵠ].push(Bu(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], false, 0));
    ΔΔ[109][Xr.ΔⲆⵠ].push(Bu(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], true, wg));
    ΔΔ[109][Xr.ΔⲆⵠ].push(Bu(0.9, ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], Ta, 0));
    ΔΔ[109][Xr.ΔⲆⵠ].push(Bu(0.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, Lr));
    ΔΔ[109][Xr.ΔⲆⵠ].push(Bu(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, wg));
    ΔΔ[109][Xr.ΔⲆⵠ].push(Bu(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
    ΔΔ[307] = [];
    ΔΔ[307][Xr.ⲆᐃΔ] = [];
    ΔΔ[307][Xr.ΔⲆⵠ] = [];
    ΔΔ[307][Xr.ⲆᐃΔ].push(pr(vu(Du(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], false), ΔΔ[109][Xr.ⲆᐃΔ][0])));
    ΔΔ[307][Xr.ⲆᐃΔ].push(pr(vu(Du(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], true), ΔΔ[109][Xr.ⲆᐃΔ][Te])));
    ΔΔ[307][Xr.ΔⲆⵠ].push(pr(vu(Du(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], jl), ΔΔ[109][Xr.ΔⲆⵠ][Qs])));
    ΔΔ[307][Xr.ΔⲆⵠ].push(pr(vu(Du(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], true), ΔΔ[109][Xr.ΔⲆⵠ][1])));
    ΔΔ[307][Xr.ⲆᐃΔ].push(pr(vu(Du(0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], false), ΔΔ[109][Xr.ⲆᐃΔ][Ug])));
    ΔΔ[307][Xr.ⲆᐃΔ].push(pr(vu(Du(0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], mh), ΔΔ[109][Xr.ⲆᐃΔ][2])));
    ΔΔ[307][Xr.ΔⲆⵠ].push(pr(vu(Du(0.9, ["#030d14", "#031619", "#041c21", "#0d2522", "#0c2821", "#0d2a28"], Qg), ΔΔ[109][Xr.ΔⲆⵠ][xj])));
    ΔΔ[307][Xr.ΔⲆⵠ].push(pr(vu(Du(0.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], Gq), ΔΔ[109][Xr.ΔⲆⵠ][Tt])));
    ΔΔ[109][Xr.ⲆᐃΔ][5] = pr(ΔΔ[109][Xr.ⲆᐃΔ][5]);
    ΔΔ[109][Xr.ⲆᐃΔ][4] = pr(ΔΔ[109][Xr.ⲆᐃΔ][4]);
    ΔΔ[109][Xr.ⲆᐃΔ][ea] = pr(ΔΔ[109][Xr.ⲆᐃΔ][ut]);
    ΔΔ[109][Xr.ⲆᐃΔ][2] = pr(ΔΔ[109][Xr.ⲆᐃΔ][2]);
    ΔΔ[109][Xr.ⲆᐃΔ][pu] = pr(ΔΔ[109][Xr.ⲆᐃΔ][1]);
    ΔΔ[109][Xr.ⲆᐃΔ][0] = pr(ΔΔ[109][Xr.ⲆᐃΔ][0]);
    ΔΔ[109][Xr.ΔⲆⵠ][5] = pr(ΔΔ[109][Xr.ΔⲆⵠ][Oj]);
    ΔΔ[109][Xr.ΔⲆⵠ][$i] = pr(ΔΔ[109][Xr.ΔⲆⵠ][ba]);
    ΔΔ[109][Xr.ΔⲆⵠ][3] = pr(ΔΔ[109][Xr.ΔⲆⵠ][yr]);
    ΔΔ[109][Xr.ΔⲆⵠ][Rl] = pr(ΔΔ[109][Xr.ΔⲆⵠ][2]);
    ΔΔ[109][Xr.ΔⲆⵠ][Te] = pr(ΔΔ[109][Xr.ΔⲆⵠ][1]);
    ΔΔ[109][Xr.ΔⲆⵠ][Lr] = pr(ΔΔ[109][Xr.ΔⲆⵠ][0]);
    ΔΔ[8] = [];
    ΔΔ[8][Xr.ⲆᐃΔ] = pr(wb(Ct, Eu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ΔΔ[8][Xr.ΔⲆⵠ] = pr(wb(Wg, Eu(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ΔΔ[1] = [];
    ΔΔ[1][Xr.ⲆᐃΔ] = pr(wb($i, Eu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ΔΔ[1][Xr.ΔⲆⵠ] = pr(wb(4, Eu(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ΔΔ[3] = [];
    ΔΔ[3][Xr.ⲆᐃΔ] = pr(wb(4, Eu(0.75, xk, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ΔΔ[3][Xr.ΔⲆⵠ] = pr(wb(Mq, Eu(0.75, oa, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ΔΔ[4] = [];
    ΔΔ[4][Xr.ⲆᐃΔ] = pr(wb(ls, Eu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ΔΔ[4][Xr.ΔⲆⵠ] = pr(wb(4, Eu(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ΔΔ[31] = [];
    ΔΔ[31][Xr.ⲆᐃΔ] = pr(wb(4, Eu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ΔΔ[31][Xr.ΔⲆⵠ] = pr(wb(es, Eu(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ΔΔ[9] = [];
    ΔΔ[9][Xr.ⲆᐃΔ] = pr(wb(3, tu(0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ΔΔ[9][Xr.ΔⲆⵠ] = pr(wb(I, tu(0.17, us, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ΔΔ[199] = [];
    ΔΔ[199][Xr.ⲆᐃΔ] = pr(wb(I, Mu(0.32, xk, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ΔΔ[199][Xr.ΔⲆⵠ] = pr(wb(Tt, Mu(0.42, Gj, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ΔΔ[57] = [];
    ΔΔ[57][Xr.ⲆᐃΔ] = pr(wb(xb, Iu(0.4, fs, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ΔΔ[57][Xr.ΔⲆⵠ] = pr(wb(fn, Iu(0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ΔΔ[0] = [];
    ΔΔ[0][Xr.ⲆᐃΔ] = pr(wb(3, Cu(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ΔΔ[0][Xr.ΔⲆⵠ] = pr(wb(3, Cu(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ΔΔ[5] = [];
    ΔΔ[5][Xr.ⲆᐃΔ] = pr(wb(3, Gu(0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ΔΔ[5][Xr.ΔⲆⵠ] = pr(wb(3, Gu(0.4, un, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ΔΔ[6] = [];
    ΔΔ[6][Xr.ⲆᐃΔ] = pr(wb(3, xu(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ΔΔ[6][Xr.ΔⲆⵠ] = pr(wb(ci, xu(0.4, Tg, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ΔΔ[30] = [];
    ΔΔ[30][Xr.ⲆᐃΔ] = pr(wb(ll, Ou(0.4, us, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ΔΔ[30][Xr.ΔⲆⵠ] = pr(wb(3, Ou(0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ΔΔ[285] = [];
    ΔΔ[285][Xr.ⲆᐃΔ] = [];
    ΔΔ[285][Xr.ΔⲆⵠ] = [];
    ΔΔ[285][Xr.ⲆᐃΔ].push(pr(Pm(0.9, false, ["#0d4f35"], 0)));
    ΔΔ[285][Xr.ⲆᐃΔ].push(pr(Pm(0.9, false, ["#0d4f35"], 1)));
    ΔΔ[285][Xr.ⲆᐃΔ].push(pr(Pm(0.9, C, ["#0d4f35"], 2)));
    ΔΔ[285][Xr.ΔⲆⵠ].push(pr(Pm(0.9, false, ["#053339"], Bb)));
    ΔΔ[285][Xr.ΔⲆⵠ].push(pr(Pm(0.9, false, ["#053339"], Oq)));
    ΔΔ[285][Xr.ΔⲆⵠ].push(pr(Pm(0.9, al, ["#053339"], 2)));
    ΔΔ[285][Xr.ⲆᐃΔ].push(pr(cc(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ΔΔ[285][Xr.ⲆᐃΔ].push(pr(cc(0.8, ["#292002", "#ba930e", "#6d5704"])));
    ΔΔ[285][Xr.ΔⲆⵠ].push(pr(cc(0.9, ["#052919", "#0a4738", "#06321f"])));
    ΔΔ[285][Xr.ΔⲆⵠ].push(pr(cc(0.8, ["#052918", "#08491c", "#063417"])));
    ΔΔ[183] = [];
    ΔΔ[183][Xr.ⲆᐃΔ] = pr(wb(Math.PI / xj, hd(0.25, fs, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ΔΔ[183][Xr.ΔⲆⵠ] = pr(wb(Math.PI / 2, hd(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ΔΔ[803] = [];
    ΔΔ[803].push(pr(ec(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ΔΔ[803].push(pr(ec(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ΔΔ[803].push(pr(ec(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ΔΔ[802] = [];
    ΔΔ[802][Xr.ⲆᐃΔ] = [];
    ΔΔ[802][Xr.ΔⲆⵠ] = [];
    ΔΔ[802][Xr.ⲆᐃΔ].push(pr(wb(Math.PI / It, Fd(0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ΔΔ[802][Xr.ΔⲆⵠ].push(pr(wb(Math.PI / 2, Fd(0.25, Ei, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], Gh))));
    ΔΔ[802][Xr.ⲆᐃΔ].push(pr(wb(Math.PI / Hj, Fd(0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ΔΔ[802][Xr.ΔⲆⵠ].push(pr(wb(Math.PI / 2, Fd(0.25, Tk, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], rs))));
    ΔΔ[802][Xr.ⲆᐃΔ].push(pr(wb(Math.PI / Lt, Fd(0.25, xo, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ΔΔ[802][Xr.ΔⲆⵠ].push(pr(wb(Math.PI / 2, Fd(0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], nq))));
    ΔΔ[802][Xr.ⲆᐃΔ].push(pr(wb(Math.PI / 2, Fd(0.25, Fh, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ΔΔ[802][Xr.ΔⲆⵠ].push(pr(wb(Math.PI / 2, Fd(0.25, vt, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ΔΔ[110] = [];
    ΔΔ[110][Xr.ⲆᐃΔ] = [pr(ad(1.2, un, ["#352b10", "#80500b", "#7c4908"]))];
    ΔΔ[110][Xr.ΔⲆⵠ] = [pr(ad(1.2, true, ["#030d14", "#0a3429", "#0a2f2b"]))];
    ΔΔ[623] = [];
    ΔΔ[623][Xr.ⲆᐃΔ] = pr(ad(0.8, true, ["#0e3022", "#68622D", "#665329"]));
    ΔΔ[623][Xr.ΔⲆⵠ] = pr(ad(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ΔΔ[189] = [];
    ΔΔ[189][Xr.ⲆᐃΔ] = pr(Sd(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ΔΔ[189][Xr.ΔⲆⵠ] = pr(Sd(0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ΔΔ[192] = [];
    ΔΔ[192][Xr.ⲆᐃΔ] = pr(Jb(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ΔΔ[192][Xr.ΔⲆⵠ] = pr(Jb(0.5, Gq, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ΔΔ[194] = [];
    ΔΔ[194][Xr.ⲆᐃΔ] = pr(bc(0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ΔΔ[194][Xr.ΔⲆⵠ] = pr(bc(0.5, Yl, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ΔΔ[287] = [];
    ΔΔ[287][Xr.ⲆᐃΔ] = pr(ad(0.8, Gq, ["#1b170c", "#0b8052", "#077b49"]));
    ΔΔ[287][Xr.ΔⲆⵠ] = pr(ad(0.8, ye, ["#030d14", "#084442", "#0a4049"]));
    ΔΔ[813] = [];
    ΔΔ[813][Xr.ⲆᐃΔ] = pr(Sd(0.5, na, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ΔΔ[813][Xr.ΔⲆⵠ] = pr(Sd(0.5, na, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ΔΔ[839] = [];
    ΔΔ[839][Xr.ⲆᐃΔ] = pr(Jb(0.5, qn, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ΔΔ[839][Xr.ΔⲆⵠ] = pr(Jb(0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ΔΔ[869] = [];
    ΔΔ[869][Xr.ⲆᐃΔ] = pr(bc(0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ΔΔ[869][Xr.ΔⲆⵠ] = pr(bc(0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ΔΔ[854] = [];
    ΔΔ[854][Xr.ⲆᐃΔ] = pr(Hd(0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ΔΔ[854][Xr.ΔⲆⵠ] = pr(Hd(0.45, ye, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ΔΔ[859] = pr(Hd(0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ΔΔ[294] = [];
    ΔΔ[294][Xr.ⲆᐃΔ] = pr(td(1.4, 0, ["#3d2a6e", "#8255b5"]));
    ΔΔ[294][Xr.ΔⲆⵠ] = pr(td(1.4, 0, ["#26124f", "#524082"]));
    ΔΔ[288] = [];
    ΔΔ[288][Xr.ⲆᐃΔ] = pr(hu(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ΔΔ[288][Xr.ΔⲆⵠ] = pr(hu(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ΔΔ[118] = [];
    ΔΔ[118][Xr.ⲆᐃΔ] = pr(ou(0.9, 0, ["#4d2d14", "#432516"]));
    ΔΔ[118][Xr.ΔⲆⵠ] = pr(ou(0.9, 0, ["#282404", "#0a0a01"]));
    ΔΔ[113] = [];
    ΔΔ[113][Xr.ⲆᐃΔ] = pr(ku(0.9, 0, ["#4d2d14", "#432516"]));
    ΔΔ[113][Xr.ΔⲆⵠ] = pr(ku(0.9, 0, ["#282404", "#0a0a01"]));
    ΔΔ[289] = [];
    ΔΔ[289][Xr.ⲆᐃΔ] = pr(fu(0.9, 0, ["#efd435"]));
    ΔΔ[289][Xr.ΔⲆⵠ] = pr(fu(0.9, 0, ["#fffabb"]));
    ΔΔ[282] = [];
    ΔΔ[282][Xr.ⲆᐃΔ] = pr(ju(0.9, 0, ["#efd435"]));
    ΔΔ[282][Xr.ΔⲆⵠ] = pr(ju(0.9, 0, ["#fffabb"]));
    ΔΔ[816] = [];
    ΔΔ[816][Xr.ⲆᐃΔ] = pr(fu(0.9, 0, ["#efd435"]));
    ΔΔ[816][Xr.ΔⲆⵠ] = pr(fu(0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ΔΔ[817] = [];
    ΔΔ[817][Xr.ⲆᐃΔ] = pr(ju(0.9, 0, ["#efd435"]));
    ΔΔ[817][Xr.ΔⲆⵠ] = pr(ju(0.9, 0, ["#ff5704"]));
    ΔΔ[324] = pr(qb(1, "#ffffff"));
    ΔΔ[301] = pr(qb(1.5, "#ffffff"));
    ΔΔ[306] = pr(nd(1, "Your score:", ul * 1, "#FFF"));
    ΔΔ[655] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      Tb(d, a * 119.5, a * 140.125, a * 19);
      db(d, undefined, b[sd], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      db(d, b[Hi], b[1], Pl * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      db(d, cn, b[Rl], a * xt);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      db(d, wr, b[3], a * Bo);
      Tb(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      db(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      db(d, b[6], b[cq], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      db(d, er, b[8], Ll * a);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      yb(d, a * -39, a * -40, a * 78, a * 78, Lb * a);
      d.restore();
      db(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      yb(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      db(d, b[gg]);
      return c;
    }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ΔΔ[656] = Ⲇⵠ.ΔⵠᐃΔⲆⵠⲆ;
    ΔΔ[135] = [];
    ΔΔ[135][Xr.ⲆᐃΔ] = pr(Wt(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[135][Xr.ΔⲆⵠ] = pr(Wt(1.5, Gq, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[641] = [];
    ΔΔ[641][Xr.ⲆᐃΔ] = pr(Yt(2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[641][Xr.ΔⲆⵠ] = pr(Yt(as * 1, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[642] = [];
    ΔΔ[642][Xr.ⲆᐃΔ] = pr($t(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[642][Xr.ΔⲆⵠ] = pr($t(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[134] = [];
    ΔΔ[134][Xr.ⲆᐃΔ] = pr(Xt(2.2, 0, ["#A89F67", "#9E8456"]));
    ΔΔ[134][Xr.ΔⲆⵠ] = pr(Xt(2.2, 0, ["#0B4049", "#08383D"]));
    ΔΔ[638] = [];
    ΔΔ[638][Xr.ⲆᐃΔ] = pr(Xt(2.2, 0, ["#68622D", "#665329"]));
    ΔΔ[638][Xr.ΔⲆⵠ] = pr(Xt(2.2, 0, ["#0F3A24", "#083326"]));
    ΔΔ[321] = [];
    ΔΔ[321][Xr.ⲆᐃΔ] = pr(Nu(0.8, 0, ["#A89F67", "#9E8456"]));
    ΔΔ[321][Xr.ΔⲆⵠ] = pr(Nu(0.8, 0, ["#15514F", "#0F3F3D"]));
    ΔΔ[811] = [];
    ΔΔ[811][Xr.ⲆᐃΔ] = pr(Nu(0.8, 0, ["#c67933", "#b17238"]));
    ΔΔ[811][Xr.ΔⲆⵠ] = pr(Nu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[984] = [];
    ΔΔ[984][Xr.ⲆᐃΔ] = pr(Nu(0.8, 0, ["#3a8214", "#4a9c1e"]));
    ΔΔ[984][Xr.ΔⲆⵠ] = pr(Nu(0.8, 0, ["#032d29", "#044640"]));
    ΔΔ[837] = [];
    ΔΔ[837][Xr.ⲆᐃΔ] = pr(Nu(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ΔΔ[837][Xr.ΔⲆⵠ] = pr(Nu(0.8, 0, ["#1c6161", "#07413f"]));
    ΔΔ[848] = [];
    ΔΔ[848][Xr.ⲆᐃΔ] = pr(Nu(0.8, 0, ["#328a56", "#449573"]));
    ΔΔ[848][Xr.ΔⲆⵠ] = pr(Nu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[952] = [];
    ΔΔ[952][Xr.ⲆᐃΔ] = pr(Nu(0.8, 0, ["#c98e2f", "#a36b11"]));
    ΔΔ[952][Xr.ΔⲆⵠ] = pr(Nu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[962] = [];
    ΔΔ[962][Xr.ⲆᐃΔ] = pr(Nu(0.8, 0, ["#b22419", "#99110e"]));
    ΔΔ[962][Xr.ΔⲆⵠ] = pr(Nu(0.8, 0, ["#04323c", "#03222b"]));
    ΔΔ[969] = [];
    ΔΔ[969][Xr.ⲆᐃΔ] = pr(Nu(0.8, 0, ["#13a56d", "#098a58"]));
    ΔΔ[969][Xr.ΔⲆⵠ] = pr(Nu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[657] = bu(1, [{
      f: Xt,
      x: wg,
      y: Zj,
      a: 1,
      r: Rq,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[723] = bu(zs, [{
      f: ku,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / Zg,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[724] = bu(pu, [{
      f: am,
      x: Rq,
      y: -Fk,
      a: Oq,
      r: Ih,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[334] = bu(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[115] = [];
    ΔΔ[115][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#7d613e", "#9e7e5a"]));
    ΔΔ[115][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#084442", "#125e5a"]));
    ΔΔ[132] = [];
    ΔΔ[132][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#9E8456", "#A89F67"]));
    ΔΔ[132][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ΔΔ[668] = [];
    ΔΔ[668][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#665329", "#68622D"]));
    ΔΔ[668][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#083326", "#0F3A24"]));
    ΔΔ[188] = [];
    ΔΔ[188][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#c67933", "#ec952d"]));
    ΔΔ[188][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[210] = [];
    ΔΔ[210][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#375809", "#4b770e"]));
    ΔΔ[210][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#09542d", "#0d5d2f"]));
    ΔΔ[985] = [];
    ΔΔ[985][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#585809", "#72770e"]));
    ΔΔ[985][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#295209", "#305d0d"]));
    ΔΔ[191] = [];
    ΔΔ[191][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#b9b094", "#e2d2c0"]));
    ΔΔ[191][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#126366", "#0d484b"]));
    ΔΔ[193] = [];
    ΔΔ[193][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#3f8662", "#30915d"]));
    ΔΔ[193][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[812] = [];
    ΔΔ[812][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#c79153", "#dfa868"]));
    ΔΔ[812][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#073927", "#075040"]));
    ΔΔ[838] = [];
    ΔΔ[838][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#768b5b", "#819984"]));
    ΔΔ[838][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#0c4540", "#0e5153"]));
    ΔΔ[849] = [];
    ΔΔ[849][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#567465", "#627c6e"]));
    ΔΔ[849][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#073927", "#075040"]));
    ΔΔ[204] = [];
    ΔΔ[204][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#996b3a", "#bf956b"]));
    ΔΔ[204][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[953] = [];
    ΔΔ[953][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#7a634a", "#a68f77"]));
    ΔΔ[953][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#1e4d43", "#113c32"]));
    ΔΔ[206] = [];
    ΔΔ[206][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#99403c", "#bc796c"]));
    ΔΔ[206][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#1e434d", "#11303c"]));
    ΔΔ[963] = [];
    ΔΔ[963][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#88504e", "#b3857c"]));
    ΔΔ[963][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#253b41", "#162930"]));
    ΔΔ[208] = [];
    ΔΔ[208][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#0f8870", "#23af93"]));
    ΔΔ[208][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#032829", "#083233"]));
    ΔΔ[970] = [];
    ΔΔ[970][Xr.ⲆᐃΔ] = pr(jb(0.9, 0, ["#618a20", "#84a74e"]));
    ΔΔ[970][Xr.ΔⲆⵠ] = pr(jb(0.9, 0, ["#1f4632", "#335d47"]));
    ΔΔ[114] = [];
    ΔΔ[114][Xr.ⲆᐃΔ] = pr(Xb(1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ΔΔ[114][Xr.ΔⲆⵠ] = pr(Xb(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ΔΔ[162] = [];
    ΔΔ[162][Xr.ⲆᐃΔ] = pr(um(Oq * 1, qn, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ΔΔ[162][Xr.ΔⲆⵠ] = pr(um(1, Gq, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[165] = [];
    ΔΔ[165][Xr.ⲆᐃΔ] = pr(Kc(1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[165][Xr.ΔⲆⵠ] = pr(Kc(1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[122] = [];
    ΔΔ[122][Xr.ⲆᐃΔ] = pr(Vc(1, _g, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ΔΔ[122][Xr.ΔⲆⵠ] = pr(Vc(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[163] = [];
    ΔΔ[163][Xr.ⲆᐃΔ] = pr(Vc(1, Eh, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ΔΔ[163][Xr.ΔⲆⵠ] = pr(Vc(au * 1, ye, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ΔΔ[164] = [];
    ΔΔ[164][Xr.ⲆᐃΔ] = pr(nc(og * 1, y, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ΔΔ[164][Xr.ΔⲆⵠ] = pr(nc(1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ΔΔ[160] = [];
    ΔΔ[160][Xr.ⲆᐃΔ] = pr(Oc(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ΔΔ[160][Xr.ΔⲆⵠ] = pr(Oc(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[169] = [];
    ΔΔ[169][Xr.ⲆᐃΔ] = pr(Tc(0.8, un, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ΔΔ[169][Xr.ΔⲆⵠ] = pr(Tc(0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ΔΔ[170] = [];
    ΔΔ[170][Xr.ⲆᐃΔ] = pr(fc(0.8, Gq, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[170][Xr.ΔⲆⵠ] = pr(fc(0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[168] = [];
    ΔΔ[168][Xr.ⲆᐃΔ] = pr(Rd(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ΔΔ[168][Xr.ΔⲆⵠ] = pr(Rd(0.8, _g, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ΔΔ[123] = [];
    ΔΔ[123][Xr.ⲆᐃΔ] = pr(Rd(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ΔΔ[123][Xr.ΔⲆⵠ] = pr(Rd(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[166] = [];
    ΔΔ[166][Xr.ⲆᐃΔ] = pr(Kd(1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ΔΔ[166][Xr.ΔⲆⵠ] = pr(Kd(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[336] = [];
    ΔΔ[336][Xr.ⲆᐃΔ] = pr(Kd(hb * 1, Ei, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[336][Xr.ΔⲆⵠ] = pr(Kd(1, Fh, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ΔΔ[171] = [];
    ΔΔ[171][Xr.ⲆᐃΔ] = pr(Md(1.5, Yl, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ΔΔ[171][Xr.ΔⲆⵠ] = pr(Md(1.5, Gq, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ΔΔ[373] = [];
    ΔΔ[373][Xr.ⲆᐃΔ] = pr(Md(zs * 1, Fh, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[373][Xr.ΔⲆⵠ] = pr(Md(1, gh, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[124] = [];
    ΔΔ[124][Xr.ⲆᐃΔ] = pr(Md(1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ΔΔ[124][Xr.ΔⲆⵠ] = pr(Md(1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[500] = [];
    ΔΔ[500][Xr.ⲆᐃΔ] = pr(Md(og * 1, jl, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[500][Xr.ΔⲆⵠ] = pr(Md(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[172] = [];
    ΔΔ[172][Xr.ⲆᐃΔ] = pr(ym(1.5, fs, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ΔΔ[172][Xr.ΔⲆⵠ] = pr(ym(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ΔΔ[376] = [];
    ΔΔ[376][Xr.ⲆᐃΔ] = pr(ym(za * 1, Mh, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[376][Xr.ΔⲆⵠ] = pr(ym(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[173] = [];
    ΔΔ[173][Xr.ⲆᐃΔ] = pr(Ec(1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[173][Xr.ΔⲆⵠ] = pr(Ec(1.5, kh, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[379] = [];
    ΔΔ[379][Xr.ⲆᐃΔ] = pr(Ec(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[379][Xr.ΔⲆⵠ] = pr(Ec(za * 1, Qg, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[167] = [];
    ΔΔ[167][Xr.ⲆᐃΔ] = pr(wd(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ΔΔ[167][Xr.ΔⲆⵠ] = pr(wd(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ΔΔ[691] = [];
    ΔΔ[691][Xr.ⲆᐃΔ] = pr(Qc(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ΔΔ[691][Xr.ΔⲆⵠ] = pr(Qc(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ΔΔ[264] = [];
    ΔΔ[264][Xr.ⲆᐃΔ] = pr(Vb(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ΔΔ[264][Xr.ΔⲆⵠ] = pr(Vb(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ΔΔ[260] = [];
    ΔΔ[260][Xr.ⲆᐃΔ] = pr(wb(Math.PI, Pt(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ΔΔ[260][Xr.ΔⲆⵠ] = pr(wb(Math.PI, Pt(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ΔΔ[266] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      db(d, rk, b[Ih], ls);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      db(d, xg, b[0], nl);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      db(d, er, b[wg], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      db(d, undefined, b[0], Os);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      db(d, wr, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      db(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      db(d, undefined, b[os], Vn);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      db(d, cb, b[Rq], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      db(d, undefined, b[0], ba);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      db(d, Hq, b[0], 4);
      return c;
    }(0.6, ["#FFFFFF"]));
    ΔΔ[299] = [];
    ΔΔ[299][Xr.ⲆᐃΔ] = pr(Kb(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ΔΔ[299][Xr.ΔⲆⵠ] = pr(Kb(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ΔΔ[10] = [];
    ΔΔ[10][Xr.ⲆᐃΔ] = pr(pm(0.6, true, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ΔΔ[10][Xr.ΔⲆⵠ] = pr(pm(0.6, oa, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ΔΔ[11] = [];
    ΔΔ[11][Xr.ⲆᐃΔ] = pr(Cc(0.6, true, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ΔΔ[11][Xr.ΔⲆⵠ] = pr(Cc(0.6, true, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ΔΔ[40] = [];
    ΔΔ[40][Xr.ⲆᐃΔ] = pr(em(0.63, xk, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ΔΔ[40][Xr.ΔⲆⵠ] = pr(em(0.63, mh, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ΔΔ[41] = [];
    ΔΔ[41][Xr.ⲆᐃΔ] = pr(nu(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ΔΔ[41][Xr.ΔⲆⵠ] = pr(nu(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ΔΔ[42] = [];
    ΔΔ[42][Xr.ⲆᐃΔ] = pr(iu(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ΔΔ[42][Xr.ΔⲆⵠ] = pr(iu(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ΔΔ[716] = [];
    ΔΔ[716][Xr.ⲆᐃΔ] = pr(Hc(0.42, Gj, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ΔΔ[716][Xr.ΔⲆⵠ] = pr(Hc(0.42, mh, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ΔΔ[720] = [];
    ΔΔ[720][Xr.ⲆᐃΔ] = pr(Td(0.9, ["#e4c027"]));
    ΔΔ[720][Xr.ΔⲆⵠ] = pr(Td(0.9, ["#D8E57F"]));
    ΔΔ[144] = [];
    ΔΔ[144][Xr.ⲆᐃΔ] = pr(Ud(0.42, y, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ΔΔ[144][Xr.ΔⲆⵠ] = pr(Ud(0.42, xk, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ΔΔ[722] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      yb(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      db(d, b[0], b[1], Ls * a);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      yb(d, a * -57.5, a * 50.5, a * sa, a * 105, a * 10);
      d.restore();
      db(d, b[Ro], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      db(d, b[lr], b[H], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * Yb, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      db(d, b[sl], b[3], a * wa);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      db(d, b[2], b[Rl], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      db(d, b[ll], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      yb(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      db(d, b[Ct]);
      d.save();
      d.translate(a * 72, a * 175.5);
      yb(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      db(d, b[nl]);
      d.save();
      d.translate(a * 72, a * 279.5);
      yb(d, a * -41.5, a * -40.5, a * 73, a * 73, Dr * a);
      d.restore();
      db(d, b[Pl]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      db(d, b[Vh], b[as], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Mn * a, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      db(d, b[fn], b[3], a * 10);
      return c;
    }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ΔΔ[407] = [];
    ΔΔ[407][Xr.ⲆᐃΔ] = pr(Nc(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ΔΔ[407][Xr.ΔⲆⵠ] = pr(Nc(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ΔΔ[119] = [];
    ΔΔ[119][Xr.ⲆᐃΔ] = pr(ld(0.5, Yl, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ΔΔ[119][Xr.ΔⲆⵠ] = pr(ld(0.5, _g, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ΔΔ[411] = pr(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      yb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      db(e, c[Zj], c[1], 4);
      return d;
    }(0.8, 0, ["#5f6061", "#939393"]));
    ΔΔ[412] = bu(1, [{
      f: ku,
      x: 0,
      y: ig,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ΔΔ[198] = [];
    ΔΔ[198][Xr.ⲆᐃΔ] = pr(Pc(1, true, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ΔΔ[198][Xr.ΔⲆⵠ] = pr(Pc(1, Yl, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ΔΔ[913] = [];
    ΔΔ[913][Xr.ⲆᐃΔ] = pr(ac(1, true, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ΔΔ[913][Xr.ΔⲆⵠ] = pr(ac(1, na, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ΔΔ[18] = [];
    ΔΔ[18][Xr.ⲆᐃΔ] = pr(wb(3, dm(0.7, Yl, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ΔΔ[18][Xr.ΔⲆⵠ] = pr(wb(Tr, dm(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ΔΔ[12] = [];
    ΔΔ[12][Xr.ⲆᐃΔ] = pr(wb(qo, gc(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ΔΔ[12][Xr.ΔⲆⵠ] = pr(wb(3, gc(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ΔΔ[13] = [];
    ΔΔ[13][Xr.ⲆᐃΔ] = pr(wb(3, uc(0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ΔΔ[13][Xr.ΔⲆⵠ] = pr(wb(3, uc(0.65, fs, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ΔΔ[14] = [];
    ΔΔ[14][Xr.ⲆᐃΔ] = pr(wb(nq, Lc(0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ΔΔ[14][Xr.ΔⲆⵠ] = pr(wb(3, Lc(0.67, kh, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ΔΔ[15] = [];
    ΔΔ[15][Xr.ⲆᐃΔ] = pr(wb(Hk, vd(0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ΔΔ[15][Xr.ΔⲆⵠ] = pr(wb(3, vd(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ΔΔ[33] = [];
    ΔΔ[33][Xr.ⲆᐃΔ] = pr(wb(fn, Gd(0.67, Tg, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ΔΔ[33][Xr.ΔⲆⵠ] = pr(wb(3, Gd(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ΔΔ[16] = [];
    ΔΔ[16][Xr.ⲆᐃΔ] = pr(wb(3, Gc(sd * 1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ΔΔ[16][Xr.ΔⲆⵠ] = pr(wb(3, Gc(hb * 1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ΔΔ[35] = [];
    ΔΔ[35][Xr.ⲆᐃΔ] = pr(wb(3, oc(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ΔΔ[35][Xr.ΔⲆⵠ] = pr(wb(ll, oc(Xn * 1, cl, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ΔΔ[55] = [];
    ΔΔ[55][Xr.ⲆᐃΔ] = pr(wb(3, hm(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
    ΔΔ[55][Xr.ΔⲆⵠ] = pr(wb(Tr, hm(0.5, true, ["#030d14", "#485e66", "#1f343f"])));
    ΔΔ[45] = [];
    ΔΔ[45][Xr.ⲆᐃΔ] = pr(wb(3, hc($b * 1, cl, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ΔΔ[45][Xr.ΔⲆⵠ] = pr(wb(3, hc(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ΔΔ[36] = [];
    ΔΔ[36][Xr.ⲆᐃΔ] = pr(wb(Lg, oc(1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ΔΔ[36][Xr.ΔⲆⵠ] = pr(wb(nq, oc(1, us, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ΔΔ[37] = [];
    ΔΔ[37][Xr.ⲆᐃΔ] = pr(wb(3, oc(Hg * 1, cl, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ΔΔ[37][Xr.ΔⲆⵠ] = pr(wb(sl, oc(og * 1, na, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ΔΔ[38] = [];
    ΔΔ[38][Xr.ⲆᐃΔ] = pr(wb(3, oc(og * 1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ΔΔ[38][Xr.ΔⲆⵠ] = pr(wb(ci, oc(hb * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ΔΔ[148] = [];
    ΔΔ[148][Xr.ⲆᐃΔ] = pr(Zc(0.55, al, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ΔΔ[148][Xr.ΔⲆⵠ] = pr(Zc(0.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ΔΔ[536] = [];
    ΔΔ[536].push(pr(Zc(0.8, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ΔΔ[536].push(pr(Zc(0.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ΔΔ[536].push(pr(Zc(0.8, vt, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ΔΔ[538] = [];
    ΔΔ[538].push(ΔΔ[536][mj]);
    ΔΔ[538].push(ΔΔ[536][Bb]);
    ΔΔ[538].push(ΔΔ[536][Qs]);
    ΔΔ[158] = [];
    ΔΔ[158][Xr.ⲆᐃΔ] = pr(zm(0.06, false, ["#141414", "#c4a23a", "#816511"]));
    ΔΔ[158][Xr.ΔⲆⵠ] = pr(zm(0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
    ΔΔ[535] = [];
    ΔΔ[535].push(pr(zm(0.08, false, ["#141414", "#c4a23a", "#816511"])));
    ΔΔ[535].push(pr(zm(0.08, Tk, ["#141414", "#e2bd4e", "#a38018"])));
    ΔΔ[535].push(pr(zm(0.08, vt, ["#141414", "#b0902e", "#634d09"])));
    ΔΔ[149] = bu(1.5, [{
      f: md,
      x: Lr,
      y: 0,
      a: ie,
      r: wg,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ΔΔ[526] = [];
    ΔΔ[526][Xr.ⲆᐃΔ] = pr(xd(0.8, 0, ["#347f93", "#54a4ba"]));
    ΔΔ[526][Xr.ΔⲆⵠ] = pr(xd(0.8, 0, ["#98ede3", "#94f2e7"]));
    ΔΔ[527] = [];
    ΔΔ[527][Xr.ⲆᐃΔ] = pr(lm(0.8, Gq, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ΔΔ[527][Xr.ΔⲆⵠ] = pr(lm(0.8, true, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ΔΔ[528] = [];
    ΔΔ[528][Xr.ⲆᐃΔ] = pr(lc(0.8, true, ["#a9e4ed", "#86d4e0"]));
    ΔΔ[528][Xr.ΔⲆⵠ] = pr(lc(0.8, Tg, ["#83ddd4", "#485e66"]));
    ΔΔ[151] = [];
    ΔΔ[151][Xr.ⲆᐃΔ] = pr(bm(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ΔΔ[151][Xr.ΔⲆⵠ] = pr(bm(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ΔΔ[1192] = [];
    ΔΔ[1192][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆΔⲆᐃᐃᐃ;
    ΔΔ[1192][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠⵠⵠᐃΔⵠ;
    ΔΔ[1193] = [];
    ΔΔ[1193][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆᐃᐃⲆᐃᐃ;
    ΔΔ[1193][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠⵠⵠΔⵠⲆ;
    ΔΔ[1194] = [];
    ΔΔ[1194][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠᐃᐃΔΔⲆ;
    ΔΔ[1194][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆΔⵠᐃᐃ;
    ΔΔ[152] = [];
    ΔΔ[152][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔᐃΔⲆᐃⲆ;
    ΔΔ[152][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠΔⵠⲆⵠᐃ;
    ΔΔ[1198] = [];
    ΔΔ[1198][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔΔⵠΔⲆᐃ;
    ΔΔ[1198][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔΔⲆΔΔᐃ;
    ΔΔ[153] = [];
    ΔΔ[153][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃΔᐃᐃⲆⲆ;
    ΔΔ[153][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆΔΔᐃᐃΔ;
    ΔΔ[1202] = [];
    ΔΔ[1202][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠᐃⲆΔⵠ;
    ΔΔ[1202][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠᐃⲆᐃⵠΔ;
    ΔΔ[154] = [];
    ΔΔ[154][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔΔΔⲆΔᐃ;
    ΔΔ[154][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⲆΔΔⵠⲆⵠ;
    ΔΔ[1206] = [];
    ΔΔ[1206][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃⲆΔⵠΔⲆ;
    ΔΔ[1206][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃᐃᐃⲆⲆΔ;
    ΔΔ[155] = [];
    ΔΔ[155][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃᐃⵠⵠⲆᐃ;
    ΔΔ[155][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠΔⵠⲆΔᐃ;
    ΔΔ[1210] = [];
    ΔΔ[1210][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠΔⲆΔᐃᐃ;
    ΔΔ[1210][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃᐃΔⲆᐃᐃ;
    ΔΔ[156] = [];
    ΔΔ[156][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠⵠΔⲆⵠⲆ;
    ΔΔ[156][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⲆⵠⲆᐃΔ;
    ΔΔ[1214] = [];
    ΔΔ[1214][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃⵠⲆⲆᐃᐃ;
    ΔΔ[1214][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃᐃΔⵠⲆᐃ;
    ΔΔ[157] = [];
    ΔΔ[157][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⵠⲆⵠᐃ;
    ΔΔ[157][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠΔⵠⵠΔΔ;
    ΔΔ[245] = [];
    ΔΔ[245][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃᐃᐃⵠᐃⵠ;
    ΔΔ[245][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃΔᐃⲆⲆᐃ;
    ΔΔ[246] = Ⲇⵠ.ᐃΔᐃΔΔⵠᐃ;
    ΔΔ[159] = [];
    ΔΔ[159][Xr.ⲆᐃΔ] = pr(dc(0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ΔΔ[159][Xr.ΔⲆⵠ] = pr(dc(0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ΔΔ[558] = pr(gd(0.3, ["#092813", "#1f773d"], 0));
    ΔΔ[559] = pr(gd(0.3, ["#092813", "#1f773d"], 1));
    ΔΔ[885] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      db(d, b[0]);
      d.translate(os, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      db(d, b[1]);
      return c;
    }(0.6, ["#092813", "#1f773d"]));
    ΔΔ[556] = [];
    ΔΔ[556].push(pr(Yc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], fl)));
    ΔΔ[556].push(pr(Yc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], wg)));
    ΔΔ[556].push(pr(Yc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], st)));
    ΔΔ[560] = [];
    var b = pr(Yc(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], In));
    ΔΔ[560].push(b);
    ΔΔ[560].push(b);
    ΔΔ[560].push(b);
    ΔΔ[557] = [];
    ΔΔ[557].push(pr(Yc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ΔΔ[557].push(pr(Yc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], zs)));
    ΔΔ[557].push(pr(Yc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ΔΔ[681] = pr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var i = f / Pn;
      var a = g / vg;
      d.width = f;
      d.height = g;
      e.translate(i, a);
      e.save();
      for (var j = mj; j < Ra; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, wg);
        Cb(e, 3, hr * b, Vn * b);
        db(e, c[Zj]);
        e.restore();
      }
      e.restore();
      Tb(e, 0, Lr, b * 40);
      db(e, undefined, c[0], b * 6);
      Tb(e, ig, fl, b * 20);
      db(e, c[mj]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ΔΔ[794] = pr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var h = f / 2;
      var a = g / 2;
      d.width = f;
      d.height = g;
      Tb(e, h, a, b * 40);
      db(e, undefined, c[0], b * Nl);
      Tb(e, h, a, b * 30);
      db(e, cg, c[Bb], wk * b);
      Tb(e, h, a, b * 20);
      db(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ΔΔ[562] = pr(gd(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], Rq));
    ΔΔ[667] = pr(wb(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      yb(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      db(d, b[0], b[Hi], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      db(d, b[0], b[0], a * mt);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      db(d, b[wg], b[wj], a * 15);
      return c;
    }(0.2, ["#FFFFFF"])));
    ΔΔ[43] = [];
    ΔΔ[43][Xr.ⲆᐃΔ] = pr(om(0.85, Eh, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ΔΔ[43][Xr.ΔⲆⵠ] = pr(om(0.85, true, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ΔΔ[561] = [];
    ΔΔ[561].push(pr(Yc(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ΔΔ[561].push(pr(Yc(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], zg)));
    ΔΔ[561].push(pr(Yc(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], Hg)));
    ΔΔ[83] = [];
    ΔΔ[83][Xr.ⲆᐃΔ] = pr(pc(0.37, xk, ["#2a2938", "#242330", "#313041"]));
    ΔΔ[83][Xr.ΔⲆⵠ] = pr(pc(0.37, true, ["#1b1e30", "#161921", "#252f3e"]));
    ΔΔ[85] = [];
    ΔΔ[85][Xr.ⲆᐃΔ] = pr(Xd(0.17, qn, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ΔΔ[85][Xr.ΔⲆⵠ] = pr(Xd(0.17, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ΔΔ[86] = [];
    ΔΔ[86][Xr.ⲆᐃΔ] = pr(Wc(0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ΔΔ[86][Xr.ΔⲆⵠ] = pr(Wc(0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ΔΔ[84] = [];
    ΔΔ[84][Xr.ⲆᐃΔ] = pr(Wc(0.55, na, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ΔΔ[84][Xr.ΔⲆⵠ] = pr(Wc(0.55, Gq, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], ig));
    ΔΔ[77] = [];
    ΔΔ[77][Xr.ⲆᐃΔ] = pr(ud(0.2, Kj, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ΔΔ[77][Xr.ΔⲆⵠ] = pr(ud(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ΔΔ[78] = [];
    ΔΔ[78][Xr.ⲆᐃΔ] = pr(ud(0.2, oa, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ΔΔ[78][Xr.ΔⲆⵠ] = pr(ud(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ΔΔ[79] = [];
    ΔΔ[79][Xr.ⲆᐃΔ] = pr(ud(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ΔΔ[79][Xr.ΔⲆⵠ] = pr(ud(0.2, un, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ΔΔ[61] = [];
    ΔΔ[61][Xr.ⲆᐃΔ] = pr(Jd(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ΔΔ[61][Xr.ΔⲆⵠ] = pr(Jd(0.24, us, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ΔΔ[59] = [];
    ΔΔ[59][Xr.ⲆᐃΔ] = pr(wc(0.32, fs, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ΔΔ[59][Xr.ΔⲆⵠ] = pr(wc(0.32, _g, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ΔΔ[62] = [];
    ΔΔ[62][Xr.ⲆᐃΔ] = pr(wb(3, Uc(0.9, Bh, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ΔΔ[62][Xr.ΔⲆⵠ] = pr(wb(3, Uc(0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ΔΔ[750] = [];
    ΔΔ[750][Xr.ⲆᐃΔ] = pr(wb(3, Uc(zg * 1, us, [Gs, cn, undefined, "#c8efef", "#c8efef"])));
    ΔΔ[750][Xr.ΔⲆⵠ] = pr(wb(3, Uc(1, Kj, [j, tt, Hq, "#87d2e6", "#87d2e6"])));
    ΔΔ[755] = [];
    ΔΔ[755].push(pr(Dc(0.3, mh, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], Bb)));
    ΔΔ[755].push(pr(Dc(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], pu)));
    ΔΔ[755].push(pr(Dc(0.3, xk, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], $b)));
    ΔΔ[795] = [];
    ΔΔ[795].push(pr(Rc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], Bb)));
    ΔΔ[795].push(pr(Rc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ΔΔ[795].push(pr(Rc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ΔΔ[782] = [];
    ΔΔ[782].push(pr(Hu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Mg, Gh)));
    ΔΔ[782].push(pr(Hu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Wl, 1)));
    ΔΔ[782].push(pr(Hu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ΔΔ[783] = [];
    ΔΔ[783].push(pr(Hu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], fl, 0)));
    ΔΔ[783].push(pr(Hu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, ya)));
    ΔΔ[783].push(pr(Hu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, Zj)));
    ΔΔ[46] = [];
    ΔΔ[46][Xr.ⲆᐃΔ] = pr(wb(3, nm(0.7, Eh, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ΔΔ[46][Xr.ΔⲆⵠ] = pr(wb(3, nm(0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ΔΔ[50] = [];
    ΔΔ[50][Xr.ⲆᐃΔ] = pr(wb(3, nm(0.7, Eh, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ΔΔ[50][Xr.ΔⲆⵠ] = pr(wb(ll, nm(0.7, us, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ΔΔ[51] = [];
    ΔΔ[51][Xr.ⲆᐃΔ] = pr(wb(3, nm(0.7, Eh, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ΔΔ[51][Xr.ΔⲆⵠ] = pr(wb(3, nm(0.7, mh, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ΔΔ[52] = [];
    ΔΔ[52][Xr.ⲆᐃΔ] = pr(wb(3, nm(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ΔΔ[52][Xr.ΔⲆⵠ] = pr(wb(Wb, nm(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ΔΔ[592] = [];
    ΔΔ[592].push(pr(_c(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ΔΔ[592].push(pr(_c(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ΔΔ[592].push(pr(_c(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ΔΔ[326] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      db(d, b[ig], b[wg], a * Fr);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      db(d, b[0], b[ya], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      db(d, b[Yh], b[Lr], a * 2);
      return c;
    }(1.1, ["#BB0000"]));
    ΔΔ[333] = pr(wb(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      Tb(d, a * 213.5, a * 256.75, a * 75);
      db(d, b);
      Tb(d, a * 213.5, a * 175.75, a * 25);
      db(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * m;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = hs * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * ts;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = Jh * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = J * a;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(0.9, "#BB0000")));
    ΔΔ[23] = [];
    ΔΔ[23][Xr.ⲆᐃΔ] = pr(vc(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ΔΔ[23][Xr.ΔⲆⵠ] = pr(vc(0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ΔΔ[58] = [];
    ΔΔ[58][Xr.ⲆᐃΔ] = pr(Bc(0.55, kh, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ΔΔ[58][Xr.ΔⲆⵠ] = pr(Bc(0.55, Bh, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ΔΔ[25] = [];
    ΔΔ[25][Xr.ⲆᐃΔ] = pr(Nd(0.6, cl, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ΔΔ[25][Xr.ΔⲆⵠ] = pr(Nd(0.6, qn, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ΔΔ[26] = [];
    ΔΔ[26][Xr.ⲆᐃΔ] = pr(Ed(0.58, Gj, ["#dbce71", "#b29c32", "#c4bc51"]));
    ΔΔ[26][Xr.ΔⲆⵠ] = pr(Ed(0.58, Kj, ["#2b7c57", "#15543c", "#1a7961"]));
    ΔΔ[27] = [];
    ΔΔ[27][Xr.ⲆᐃΔ] = pr(cm(0.69, true, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ΔΔ[27][Xr.ΔⲆⵠ] = pr(cm(0.69, un, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ΔΔ[413] = [];
    ΔΔ[413][Xr.ⲆᐃΔ] = [];
    ΔΔ[413][Xr.ΔⲆⵠ] = [];
    ΔΔ[413][Xr.ⲆᐃΔ].push(pr(Tm(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ΔΔ[413][Xr.ⲆᐃΔ].push(pr(zd(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ΔΔ[413][Xr.ⲆᐃΔ].push(pr(Zd(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ΔΔ[413][Xr.ΔⲆⵠ].push(pr(Tm(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ΔΔ[413][Xr.ΔⲆⵠ].push(pr(zd(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ΔΔ[413][Xr.ΔⲆⵠ].push(pr(Zd(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ΔΔ[449] = [];
    ΔΔ[449][Xr.ⲆᐃΔ] = pr(qd(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ΔΔ[449][Xr.ΔⲆⵠ] = pr(qd(Te * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ΔΔ[451] = [];
    ΔΔ[451][Xr.ⲆᐃΔ] = pr(fm(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ΔΔ[451][Xr.ΔⲆⵠ] = pr(fm(zs * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ΔΔ[452] = [];
    ΔΔ[452][Xr.ⲆᐃΔ] = pr(kd(sd * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ΔΔ[452][Xr.ΔⲆⵠ] = pr(kd(hb * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ΔΔ[243] = [];
    ΔΔ[243][Xr.ⲆᐃΔ] = [];
    ΔΔ[243][Xr.ΔⲆⵠ] = [];
    ΔΔ[243][Xr.ⲆᐃΔ] = [Ⲇⵠ.ⲆΔⲆᐃⲆⲆⲆ, Ⲇⵠ.ᐃⵠⲆⵠᐃᐃΔ, Ⲇⵠ.ᐃΔᐃⵠΔⲆᐃ, Ⲇⵠ.ⵠⵠⵠⵠᐃⵠΔ, Ⲇⵠ.ΔⲆᐃᐃΔⲆⲆ, Ⲇⵠ.ΔⲆⵠᐃⵠⵠⵠ, Ⲇⵠ.ΔⲆᐃⲆΔⲆⲆ, Ⲇⵠ.ⲆΔᐃⵠⵠΔᐃ, Ⲇⵠ.ΔΔⵠⵠⲆⵠⵠ, Ⲇⵠ.ⲆΔⵠⵠⵠᐃᐃ, Ⲇⵠ.ᐃᐃⲆⲆΔᐃⵠ, Ⲇⵠ.ΔΔΔᐃᐃᐃΔ, Ⲇⵠ.ᐃΔΔⵠⵠᐃᐃ, Ⲇⵠ.ᐃᐃᐃΔᐃⵠⵠ, Ⲇⵠ.ⲆⲆⲆⵠᐃⵠΔ, Ⲇⵠ.ᐃᐃⵠΔⵠᐃⵠ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠΔ, Ⲇⵠ.ΔᐃᐃΔⵠΔⵠ, Ⲇⵠ.ⵠⲆⲆⲆᐃⲆΔ, Ⲇⵠ.ΔⵠⵠΔΔᐃΔ, Ⲇⵠ.ⲆⵠᐃⲆⵠΔᐃ, Ⲇⵠ.ᐃⵠΔᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃⲆᐃᐃⵠᐃ, Ⲇⵠ.ΔⲆⵠΔΔⲆⵠ, Ⲇⵠ.ᐃΔΔᐃᐃⲆⵠ, Ⲇⵠ.ᐃΔⵠΔⵠᐃΔ, Ⲇⵠ.ΔΔⲆΔⵠΔⵠ, Ⲇⵠ.ΔᐃⵠⲆⵠⲆΔ, Ⲇⵠ.ᐃΔⲆᐃᐃⲆᐃ, Ⲇⵠ.ⵠⵠᐃⵠᐃΔᐃ, Ⲇⵠ.ⲆⵠⵠΔⵠⵠΔ, Ⲇⵠ.ᐃᐃⲆⵠⲆⵠΔ, Ⲇⵠ.ᐃⲆᐃΔⵠΔᐃ, Ⲇⵠ.ΔΔⲆⵠⵠⵠΔ, Ⲇⵠ.ΔⲆⵠᐃⲆᐃᐃ, Ⲇⵠ.ⲆΔⲆΔⵠⵠⲆ, Ⲇⵠ.ᐃᐃⲆⲆᐃⲆΔ, Ⲇⵠ.ΔⲆΔΔⲆΔⲆ, Ⲇⵠ.ⲆⵠⵠⲆⵠⵠΔ, Ⲇⵠ.ⲆⵠⲆᐃΔⵠⵠ, Ⲇⵠ.ᐃΔᐃⲆⲆᐃᐃ, Ⲇⵠ.ⵠΔⵠⵠΔᐃⲆ, Ⲇⵠ.ΔⵠΔΔⵠᐃⵠ, Ⲇⵠ.ΔᐃⵠⵠΔⲆᐃ, Ⲇⵠ.ᐃΔᐃⵠⵠᐃΔ, Ⲇⵠ.ᐃⵠΔᐃΔⵠⲆ, Ⲇⵠ.ⵠⵠⲆⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆᐃᐃᐃⵠᐃ, Ⲇⵠ.ᐃΔⲆⲆΔᐃⵠ, Ⲇⵠ.ⵠΔⵠⵠⲆⵠⲆ, Ⲇⵠ.ⲆⲆᐃⲆΔΔᐃ, Ⲇⵠ.ΔⲆⲆⲆⵠΔⵠ, Ⲇⵠ.ⵠⲆⵠᐃⵠᐃⲆ, Ⲇⵠ.ⲆⲆⲆⲆⲆᐃⲆ, Ⲇⵠ.ᐃⲆⵠᐃⲆⵠᐃ, Ⲇⵠ.ΔⲆᐃᐃΔⵠⵠ];
    ΔΔ[243][Xr.ΔⲆⵠ] = [Ⲇⵠ.ᐃⵠⵠⵠΔⲆᐃ, Ⲇⵠ.ⵠⲆΔⵠⲆⲆⵠ, Ⲇⵠ.ΔⵠⲆⲆΔΔⵠ, Ⲇⵠ.ᐃⵠⵠΔᐃᐃᐃ, Ⲇⵠ.ⵠΔᐃⵠᐃⵠΔ, Ⲇⵠ.ΔΔᐃΔΔⵠΔ, Ⲇⵠ.ΔᐃΔⲆᐃΔⵠ, Ⲇⵠ.ⲆᐃⵠᐃᐃⵠⲆ, Ⲇⵠ.ᐃΔⲆⲆⵠⲆⵠ, Ⲇⵠ.ⲆⲆᐃΔⲆⲆⲆ, Ⲇⵠ.ⵠΔᐃΔΔᐃᐃ, Ⲇⵠ.ⲆⲆΔᐃⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃⵠⵠⲆᐃ, Ⲇⵠ.ᐃΔᐃⵠⲆΔⲆ, Ⲇⵠ.ΔᐃᐃᐃⲆⵠⵠ, Ⲇⵠ.ΔΔⲆⵠⵠΔᐃ, Ⲇⵠ.ΔΔᐃⲆᐃᐃⲆ, Ⲇⵠ.ᐃⲆⵠⵠⲆΔⲆ, Ⲇⵠ.ΔⵠᐃΔⵠⲆⵠ, Ⲇⵠ.ΔⲆⲆⵠⵠⲆⲆ, Ⲇⵠ.ΔⵠΔⲆΔⵠⵠ, Ⲇⵠ.ⵠᐃᐃⵠⵠⲆⲆ, Ⲇⵠ.ⲆΔΔⵠΔⲆⲆ, Ⲇⵠ.ⲆⵠⲆᐃⵠⲆΔ, Ⲇⵠ.ΔᐃⵠΔⵠⵠⵠ, Ⲇⵠ.ΔⲆᐃⵠⵠΔᐃ, Ⲇⵠ.ⵠᐃⵠᐃᐃⵠⵠ, Ⲇⵠ.ΔᐃᐃᐃᐃⲆᐃ, Ⲇⵠ.ΔⵠΔⲆΔⲆΔ, Ⲇⵠ.ΔⲆⲆΔᐃⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆⲆⲆᐃ, Ⲇⵠ.ΔⲆⵠⵠⵠⵠΔ, Ⲇⵠ.ⵠⵠⵠΔΔⵠΔ, Ⲇⵠ.ΔΔⵠⵠΔⲆⲆ, Ⲇⵠ.ⵠᐃⲆΔΔⲆᐃ, Ⲇⵠ.ⲆⵠⲆΔⲆⵠⵠ, Ⲇⵠ.ⵠᐃΔᐃⲆᐃⵠ, Ⲇⵠ.ⵠⵠⲆΔᐃΔᐃ, Ⲇⵠ.ⲆΔⲆΔᐃΔΔ, Ⲇⵠ.ⲆⲆⵠⲆΔΔⵠ, Ⲇⵠ.ⲆⲆⲆᐃΔᐃⵠ, Ⲇⵠ.ᐃⲆⵠⵠⵠⲆᐃ, Ⲇⵠ.ᐃⲆΔᐃⵠᐃΔ, Ⲇⵠ.ⵠᐃᐃⲆᐃᐃΔ, Ⲇⵠ.ⵠⲆΔΔⵠⵠⵠ, Ⲇⵠ.ᐃΔᐃΔᐃⵠΔ, Ⲇⵠ.ΔⵠΔΔⲆᐃⲆ, Ⲇⵠ.ᐃⲆΔⵠᐃΔΔ, Ⲇⵠ.ⵠⵠⵠᐃΔᐃⲆ, Ⲇⵠ.ᐃᐃⲆⵠΔᐃᐃ, Ⲇⵠ.ᐃⲆⲆᐃΔᐃⵠ, Ⲇⵠ.ⵠⲆΔⲆᐃΔⲆ, Ⲇⵠ.ⲆⲆΔⵠΔΔΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃΔⵠ, Ⲇⵠ.ΔⵠⵠΔⵠΔⲆ, Ⲇⵠ.ΔⲆⲆⵠᐃΔᐃ];
    ΔΔ[676] = [];
    ΔΔ[676][Xr.ⲆᐃΔ] = [];
    ΔΔ[676][Xr.ΔⲆⵠ] = [];
    ΔΔ[676][Xr.ⲆᐃΔ].push(pr(id(1.1, ss, ["#252B28", "#747471", "#83827e"], wg)));
    ΔΔ[676][Xr.ⲆᐃΔ].push(pr(id(0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
    ΔΔ[676][Xr.ⲆᐃΔ].push(pr(id(za * 1, Ta, ["#252B28", "#747471", "#83827e"], pq)));
    ΔΔ[676][Xr.ⲆᐃΔ].push(pr(id(0.9, Ag, ["#252B28", "#747471", "#83827e"], Vh)));
    ΔΔ[676][Xr.ΔⲆⵠ].push(pr(id(1.1, false, ["#030d14", "#123335", "#183f3f"], Rq)));
    ΔΔ[676][Xr.ΔⲆⵠ].push(pr(id(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
    ΔΔ[676][Xr.ΔⲆⵠ].push(pr(id(1, Ag, ["#030d14", "#123335", "#183f3f"], Ob)));
    ΔΔ[676][Xr.ΔⲆⵠ].push(pr(id(0.9, false, ["#030d14", "#123335", "#183f3f"], rs)));
    ΔΔ[679] = [];
    ΔΔ[679][Xr.ⲆᐃΔ] = [];
    ΔΔ[679][Xr.ΔⲆⵠ] = [];
    ΔΔ[679][Xr.ⲆᐃΔ].push(pr(id(1.1, us, ["#252B28", "#58645F", "#75827D"], 2)));
    ΔΔ[679][Xr.ⲆᐃΔ].push(pr(id(0.9, Tg, ["#252B28", "#58645F", "#75827D"], vg)));
    ΔΔ[679][Xr.ⲆᐃΔ].push(pr(id($b * 1, Gq, ["#252B28", "#58645F", "#75827D"], 2)));
    ΔΔ[679][Xr.ⲆᐃΔ].push(pr(id(0.9, kh, ["#252B28", "#58645F", "#75827D"], Hj)));
    ΔΔ[679][Xr.ΔⲆⵠ].push(pr(id(1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ΔΔ[679][Xr.ΔⲆⵠ].push(pr(id(0.9, true, ["#030d14", "#123335", "#183f3f"], Pn)));
    ΔΔ[679][Xr.ΔⲆⵠ].push(pr(id(au * 1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ΔΔ[679][Xr.ΔⲆⵠ].push(pr(id(0.9, xk, ["#030d14", "#123335", "#183f3f"], 2)));
    ΔΔ[415] = [];
    ΔΔ[415][Xr.ⲆᐃΔ] = [];
    ΔΔ[415][Xr.ΔⲆⵠ] = [];
    ΔΔ[415][Xr.ⲆᐃΔ].push(pr(rd(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[415][Xr.ⲆᐃΔ].push(pr(rd(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[415][Xr.ⲆᐃΔ].push(pr(rd(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[415][Xr.ΔⲆⵠ].push(pr(rd(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[415][Xr.ΔⲆⵠ].push(pr(rd(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[415][Xr.ΔⲆⵠ].push(pr(rd(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[416] = [];
    ΔΔ[416][Xr.ⲆᐃΔ] = [];
    ΔΔ[416][Xr.ΔⲆⵠ] = [];
    ΔΔ[416][Xr.ⲆᐃΔ].push(pr(od(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[416][Xr.ⲆᐃΔ].push(pr(od(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[416][Xr.ⲆᐃΔ].push(pr(od(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[416][Xr.ΔⲆⵠ].push(pr(od(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[416][Xr.ΔⲆⵠ].push(pr(od(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[416][Xr.ΔⲆⵠ].push(pr(od(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[121] = [];
    ΔΔ[121][Xr.ⲆᐃΔ] = [];
    ΔΔ[121][Xr.ΔⲆⵠ] = [];
    ΔΔ[121][Xr.ⲆᐃΔ].push(pr(Jc(1.7, y, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[121][Xr.ⲆᐃΔ].push(pr(Jc(1.5, un, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[121][Xr.ⲆᐃΔ].push(pr(Jc(1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[121][Xr.ΔⲆⵠ].push(pr(Jc(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[121][Xr.ΔⲆⵠ].push(pr(Jc(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[121][Xr.ΔⲆⵠ].push(pr(Jc(1.3, _g, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[678] = [];
    ΔΔ[678][Xr.ⲆᐃΔ] = [];
    ΔΔ[678][Xr.ΔⲆⵠ] = [];
    ΔΔ[678][Xr.ⲆᐃΔ].push(pr($d(1, ["#2d53c4"])));
    ΔΔ[678][Xr.ΔⲆⵠ].push(pr($d(1, ["#2d53c4"])));
    ΔΔ[696] = [];
    ΔΔ[696][Xr.ⲆᐃΔ] = [];
    ΔΔ[696][Xr.ΔⲆⵠ] = [];
    ΔΔ[696][Xr.ⲆᐃΔ].push(pr($d(1, ["#c4912d"])));
    ΔΔ[696][Xr.ΔⲆⵠ].push(pr($d(1, ["#c4912d"])));
    ΔΔ[680] = [];
    ΔΔ[680][Xr.ⲆᐃΔ] = pr(Cm(1, ["#414040"]));
    ΔΔ[680][Xr.ΔⲆⵠ] = pr(Cm(1, ["#153635"]));
    ΔΔ[508] = [];
    ΔΔ[508][Xr.ⲆᐃΔ] = pr(Kd(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[508][Xr.ΔⲆⵠ] = pr(Kd(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[509] = [];
    ΔΔ[509][Xr.ⲆᐃΔ] = pr(Md(Te * 1, Jn, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[509][Xr.ΔⲆⵠ] = pr(Md(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[512] = [];
    ΔΔ[512][Xr.ⲆᐃΔ] = pr(Md(1, Qg, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[512][Xr.ΔⲆⵠ] = pr(Md(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[511] = [];
    ΔΔ[511][Xr.ⲆᐃΔ] = pr(Ec(1, Tk, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[511][Xr.ΔⲆⵠ] = pr(Ec(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[510] = [];
    ΔΔ[510][Xr.ⲆᐃΔ] = pr(ym(pu * 1, xo, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[510][Xr.ΔⲆⵠ] = pr(ym(au * 1, Ag, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[419] = [];
    ΔΔ[419][Xr.ⲆᐃΔ] = pr(Id(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ΔΔ[419][Xr.ΔⲆⵠ] = pr(Id(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ΔΔ[445] = [];
    ΔΔ[445][Xr.ⲆᐃΔ] = pr($c(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ΔΔ[445][Xr.ΔⲆⵠ] = pr($c(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ΔΔ[259] = [];
    ΔΔ[818] = [];
    ΔΔ[516] = [];
    ΔΔ[819] = [];
    for (a = os; xq > a; a++) {
      ΔΔ[259][a] = document.createElement("canvas");
      ΔΔ[259][a].width = 193;
      ΔΔ[259][a].height = 193;
      ΔΔ[818][a] = ΔΔ[259][a].getContext("2d");
      ΔΔ[516][a] = document.createElement("canvas");
      ΔΔ[516][a].width = 600;
      ΔΔ[516][a].height = 600;
      ΔΔ[819][a] = ΔΔ[516][a].getContext("2d");
    }
    ΔΔ[475] = [];
    ΔΔ[475][Xr.ⲆᐃΔ] = pr(Cm(1, ["#c8e0de"]));
    ΔΔ[475][Xr.ΔⲆⵠ] = pr(Cm(1, ["#147071"]));
    ΔΔ[476] = [];
    ΔΔ[476][Xr.ⲆᐃΔ] = pr(Cm(1, ["#231912"]));
    ΔΔ[476][Xr.ΔⲆⵠ] = pr(Cm(1, ["#021719"]));
    ΔΔ[697] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      yb(d, a * -$n, a * -hn, a * 14, a * 37, a * qi);
      d.restore();
      db(d, b[Qs]);
      d.save();
      d.translate(a * 131, a * 94);
      yb(d, a * -84, a * -67, a * 168, a * 134, vi * a);
      d.restore();
      db(d, b[eu], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      yb(d, a * -5, a * -18.5, a * Ht, a * 37, a * ch);
      d.restore();
      db(d, b[os]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      yb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * Xa);
      d.restore();
      db(d, b[0]);
      return c;
    }(0.5, ["#BB0000"]));
    ΔΔ[461] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var e = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * Qj, a * 93);
      e.bezierCurveTo(a * wl, a * 95, it * a, a * 95, a * 21, a * 95);
      e.bezierCurveTo(dl * a, a * 83, a * 17, a * 93, Ls * a, a * 76);
      e.bezierCurveTo(kb * a, a * 75, a * 11, a * 75, a * Ik, a * 75);
      e.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * tg, a * 59);
      e.bezierCurveTo(Wr * a, a * 59, a * 14, a * 59, a * 21, a * 59);
      e.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      e.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, Kg * a);
      e.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      e.bezierCurveTo(a * 76, a * tg, a * 75, a * d, a * 76, ks * a);
      e.bezierCurveTo(a * 81, a * 12, a * 84, Bl * a, a * 89, a * 27);
      e.bezierCurveTo(a * 95, a * 25, a * Cn, a * 16, a * 105, a * Wr);
      e.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      e.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      e.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      e.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      e.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      e.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      e.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      e.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      e.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      e.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      e.bezierCurveTo(Us * a, a * 95, a * 13, a * 99, a * aa, a * 93);
      e.closePath();
      db(e, b, b, a * Pe);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 25, a * 63);
      e.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * bg, a * 33);
      e.bezierCurveTo(a * sh, a * 12, a * 21, a * gr, a * 32, a * 17);
      e.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      db(e, b, b, gl * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 91, a * 53);
      e.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, ml * a);
      e.bezierCurveTo(a * 137, a * 12, a * 137, a * kl, a * 139, a * 27);
      e.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      db(e, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ΔΔ[462] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Gk * a, a * 50);
      d.bezierCurveTo(Rt * a, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, Dg * a, a * 50);
      d.closePath();
      db(d, b, b, a * Ls);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * M, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      db(d, b, b, $l * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, Kl * a);
      d.bezierCurveTo(a * 144, a * tr, a * 146, a * 52, a * 133, a * 58);
      db(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ΔΔ[463] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      db(d, b[In]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * vh, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      db(d, b[Mg]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * eq);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      db(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, ah * a, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      db(d, b[Ih]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      db(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      db(d, b[mj]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      db(d, b[wg]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      db(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      db(d, b[Lr]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      db(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      db(d, b[0]);
      return c;
    }(Tl * 1, ["#BB0000"]));
    ΔΔ[466] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -qr, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      db(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      db(d, b, b, a * Os);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      db(d, b);
      return c;
    }(0.8, "#BB0000"));
    ΔΔ[467] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      db(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      db(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      db(d, b);
      return c;
    }(0.8, "#BB0000"));
    ΔΔ[322] = pr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var h = Gi * b;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = Gh;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      db(e, c, c, h);
      return d;
    }(0.9, "#BB0000"));
    ΔΔ[279] = pr(zb(0.6, "#BB0000"));
    ΔΔ[280] = pr(zb(0.6, "#1CE7E0"));
    ΔΔ[281] = pr(zb(0.6, "#DBE71C"));
    ΔΔ[308] = pr(zb(0.6, "#00BB00"));
    ΔΔ[602] = [];
    ΔΔ[602][Xr.ⲆᐃΔ] = pr(Cm(1, ["#dac291"]));
    ΔΔ[602][Xr.ΔⲆⵠ] = pr(Cm(1, ["#0D423D"]));
    ΔΔ[698] = [];
    ΔΔ[698][Xr.ⲆᐃΔ] = pr(Cm(1, ["#dac291"]));
    ΔΔ[698][Xr.ΔⲆⵠ] = pr(Cm(1, ["#0D423D"]));
    ΔΔ[788] = [];
    ΔΔ[788][Xr.ⲆᐃΔ] = pr(Mc(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ΔΔ[788][Xr.ΔⲆⵠ] = pr(Mc(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ΔΔ[182] = [];
    ΔΔ[182][Xr.ⲆᐃΔ] = pr(Mc(0.3, xk, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ΔΔ[182][Xr.ΔⲆⵠ] = pr(Mc(0.3, _g, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ΔΔ[127] = [pr(Ac(1, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ΔΔ[128] = [pr(Ac(1, Tg, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ΔΔ[603] = [];
    ΔΔ[603][Xr.ⲆᐃΔ] = [];
    ΔΔ[603][Xr.ΔⲆⵠ] = [];
    ΔΔ[603][Xr.ⲆᐃΔ].push(pr(_d(1, ["#0B6A84"])));
    ΔΔ[603][Xr.ⲆᐃΔ].push(pr(kc(Te * 1, ["#0B6A84"])));
    ΔΔ[603][Xr.ⲆᐃΔ].push(pr(rc(wt * 1, ["#0B6A84"])));
    ΔΔ[603][Xr.ⲆᐃΔ].push(pr(mm(gs * 1, ["#0B6A84"])));
    ΔΔ[603][Xr.ⲆᐃΔ].push(pr(sm(pu * 1, ["#0B6A84"])));
    ΔΔ[603][Xr.ⲆᐃΔ].push(pr(jc(Tl * 1, ["#0B6A84"])));
    ΔΔ[603][Xr.ⲆᐃΔ].push(pr(yc(Xn * 1, ["#0B6A84"])));
    ΔΔ[603][Xr.ΔⲆⵠ].push(pr(_d(1, ["#09373F"])));
    ΔΔ[603][Xr.ΔⲆⵠ].push(pr(kc(1, ["#09373F"])));
    ΔΔ[603][Xr.ΔⲆⵠ].push(pr(rc(mk * 1, ["#09373F"])));
    ΔΔ[603][Xr.ΔⲆⵠ].push(pr(mm(1, ["#09373F"])));
    ΔΔ[603][Xr.ΔⲆⵠ].push(pr(sm(Te * 1, ["#09373F"])));
    ΔΔ[603][Xr.ΔⲆⵠ].push(pr(jc(1, ["#09373F"])));
    ΔΔ[603][Xr.ΔⲆⵠ].push(pr(yc(Oq * 1, ["#09373F"])));
    ΔΔ[692] = [];
    ΔΔ[692][Xr.ⲆᐃΔ] = [];
    ΔΔ[692][Xr.ΔⲆⵠ] = [];
    ΔΔ[692][Xr.ⲆᐃΔ].push(pr(im(1.7, ["#FBEFBC"], 0)));
    ΔΔ[692][Xr.ⲆᐃΔ].push(pr(im(1.9, ["#FBEFBC"], 1)));
    ΔΔ[692][Xr.ⲆᐃΔ].push(pr(im(1.7, ["#FBEFBC"], 2)));
    ΔΔ[692][Xr.ΔⲆⵠ].push(pr(im(1.7, ["#0F4C48"], Ih)));
    ΔΔ[692][Xr.ΔⲆⵠ].push(pr(im(1.9, ["#0F4C48"], zg)));
    ΔΔ[692][Xr.ΔⲆⵠ].push(pr(im(1.7, ["#0F4C48"], 2)));
    ΔΔ[694] = [];
    ΔΔ[694][Xr.ⲆᐃΔ] = [];
    ΔΔ[694][Xr.ΔⲆⵠ] = [];
    ΔΔ[694][Xr.ⲆᐃΔ].push(pr(im(1.8, ["#A9D6D3"], 0)));
    ΔΔ[694][Xr.ⲆᐃΔ].push(pr(im(2, ["#A9D6D3"], Oq)));
    ΔΔ[694][Xr.ⲆᐃΔ].push(pr(im(1.8, ["#A9D6D3"], xj)));
    ΔΔ[694][Xr.ΔⲆⵠ].push(pr(im(1.8, ["#115E60"], 0)));
    ΔΔ[694][Xr.ΔⲆⵠ].push(pr(im(2, ["#115E60"], 1)));
    ΔΔ[694][Xr.ΔⲆⵠ].push(pr(im(1.8, ["#115E60"], pq)));
    ΔΔ[695] = [];
    ΔΔ[695][Xr.ⲆᐃΔ] = [];
    ΔΔ[695][Xr.ΔⲆⵠ] = [];
    ΔΔ[695][Xr.ⲆᐃΔ].push(pr(im(1.9, ["#2A8B9B"], Bb)));
    ΔΔ[695][Xr.ⲆᐃΔ].push(pr(im(2.1, ["#2A8B9B"], $b)));
    ΔΔ[695][Xr.ⲆᐃΔ].push(pr(im(1.9, ["#2A8B9B"], 2)));
    ΔΔ[695][Xr.ΔⲆⵠ].push(pr(im(1.9, ["#0F464C"], st)));
    ΔΔ[695][Xr.ΔⲆⵠ].push(pr(im(2.1, ["#0F464C"], 1)));
    ΔΔ[695][Xr.ΔⲆⵠ].push(pr(im(1.9, ["#0F464C"], Rl)));
    ΔΔ[693] = [];
    ΔΔ[693][Xr.ⲆᐃΔ] = [];
    ΔΔ[693][Xr.ΔⲆⵠ] = [];
    ΔΔ[693][Xr.ⲆᐃΔ].push(pr(xc(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[693][Xr.ⲆᐃΔ].push(pr(xc($b * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[693][Xr.ⲆᐃΔ].push(pr(xc(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[693][Xr.ΔⲆⵠ].push(pr(xc(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[693][Xr.ΔⲆⵠ].push(pr(xc(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[693][Xr.ΔⲆⵠ].push(pr(xc(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[637] = [];
    ΔΔ[637][Xr.ⲆᐃΔ] = pr(zc(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ΔΔ[637][Xr.ΔⲆⵠ] = pr(zc(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ΔΔ[687] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = Te;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      db(d, b[eu], b[0], a * 12);
      return c;
    }(0.8, ["#B6222A"]));
    ΔΔ[673] = [];
    ΔΔ[673][Xr.ⲆᐃΔ] = pr(bd(0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ΔΔ[673][Xr.ΔⲆⵠ] = pr(bd(0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ΔΔ[688] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      db(d, b[0], b[Rq], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      db(d, b[0], b[st], a * Zk);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      db(d, b[0], b[wg], a * Pb);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      db(d, b[0], b[Hi], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      db(d, b[ig], b[0], a * Ch);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      db(d, b[Yh], b[Lr], a * gn);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      db(d, b[Lr], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      db(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      db(d, b[Zj], b[0], a * Lb);
      return c;
    }(0.8, ["#B6222A"]));
    ΔΔ[902] = [];
    ΔΔ[902][Xr.ⲆᐃΔ] = pr(Sb(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ΔΔ[902][Xr.ΔⲆⵠ] = pr(Sb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], wj));
    ΔΔ[903] = [];
    ΔΔ[903][Xr.ⲆᐃΔ] = pr(Sb(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], zg));
    ΔΔ[903][Xr.ΔⲆⵠ] = pr(Sb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], gs));
    ΔΔ[Xr.ⲆⵠᐃΔⵠⲆⲆ] = [];
    ΔΔ[Xr.ⲆⵠᐃΔⵠⲆⲆ][Xr.ⲆᐃΔ] = pr(Sb(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ΔΔ[Xr.ⲆⵠᐃΔⵠⲆⲆ][Xr.ΔⲆⵠ] = pr(Sb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], Mg));
    ΔΔ[904] = pr(Qb(0.4, ["#B6222A"]));
    ΔΔ[905] = pr(Qb(0.4, ["#B6222A"]));
    ΔΔ[Xr.ᐃⲆᐃⲆⲆΔⵠᐃᐃ] = pr(Qb(0.4, ["#B6222A"]));
    ΔΔ[230] = pr(pd(0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ΔΔ[229] = pr(zu(0.35, oa, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ΔΔ[886] = [];
    ΔΔ[886][Xr.ⲆᐃΔ] = pr(ru(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ΔΔ[886][Xr.ΔⲆⵠ] = pr(ru(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ΔΔ[887] = [];
    ΔΔ[887][Xr.ⲆᐃΔ] = pr(ru(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ΔΔ[887][Xr.ΔⲆⵠ] = pr(ru(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ΔΔ[894] = [];
    ΔΔ[894][Xr.ⲆᐃΔ] = pr(su(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ΔΔ[894][Xr.ΔⲆⵠ] = pr(su(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ΔΔ[895] = [];
    ΔΔ[895][Xr.ⲆᐃΔ] = pr(yu(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ΔΔ[895][Xr.ΔⲆⵠ] = pr(yu(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ΔΔ[896] = [];
    ΔΔ[896][Xr.ⲆᐃΔ] = pr(su(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ΔΔ[896][Xr.ΔⲆⵠ] = pr(su(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ΔΔ[897] = [];
    ΔΔ[897][Xr.ⲆᐃΔ] = pr(yu(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ΔΔ[897][Xr.ΔⲆⵠ] = pr(yu(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ΔΔ[888] = pr(wu(0.35, ["#B6222A"]));
    ΔΔ[889] = pr(su(0.35, 0, [undefined, "#B6222A"]));
    ΔΔ[890] = pr(yu(0.35, 0, [cg, "#B6222A"]));
    ΔΔ[891] = pr(wu(0.35, ["#22E066"]));
    ΔΔ[892] = pr(su(0.35, 0, [cn, "#22E066"]));
    ΔΔ[893] = pr(yu(0.35, 0, [undefined, "#22E066"]));
    ΔΔ[48] = [];
    ΔΔ[48][Xr.ⲆᐃΔ] = pr(Xc(0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ΔΔ[48][Xr.ΔⲆⵠ] = pr(Xc(0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ΔΔ[47] = [];
    ΔΔ[47][Xr.ⲆᐃΔ] = pr(Yd(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ΔΔ[47][Xr.ΔⲆⵠ] = pr(Yd(0.45, _g, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ΔΔ[141] = [];
    ΔΔ[141][Xr.ⲆᐃΔ] = pr(Pd(0.63, oa, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ΔΔ[141][Xr.ΔⲆⵠ] = pr(Pd(0.63, Gj, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ΔΔ[125] = [];
    ΔΔ[125][Xr.ⲆᐃΔ] = pr(dd(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ΔΔ[125][Xr.ΔⲆⵠ] = pr(dd(1, ye, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ΔΔ[221] = [];
    ΔΔ[221][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠⵠΔΔᐃⲆᐃᐃ;
    ΔΔ[221][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃⲆΔⵠΔᐃᐃᐃ;
    ΔΔ[190] = [];
    ΔΔ[190][Xr.ⲆᐃΔ] = pr(Db(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[190][Xr.ΔⲆⵠ] = pr(Db(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[853] = [ΔΔ[190]];
    ΔΔ[853][hb] = [];
    ΔΔ[853][Ul] = [];
    ΔΔ[853][1][Xr.ⲆᐃΔ] = pr(Ib(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[853][1][Xr.ΔⲆⵠ] = pr(Ib(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[853][2][Xr.ⲆᐃΔ] = pr(Eb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[853][H][Xr.ΔⲆⵠ] = pr(Eb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[49] = [];
    ΔΔ[49][Xr.ⲆᐃΔ] = pr(wb(3 - Math.PI / H, sc(0.6, _g, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ΔΔ[49][Xr.ΔⲆⵠ] = pr(wb(Wb - Math.PI / rs, sc(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ΔΔ[728] = [];
    ΔΔ[728][Xr.ⲆᐃΔ] = pr(St(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ΔΔ[728][Xr.ΔⲆⵠ] = pr(St(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], st));
    ΔΔ[798] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      yb(d, a * -96.5, a * -21.5, a * 193, a * 193, st * a);
      d.restore();
      db(d, b[Os], b[Hg], La * a);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      yb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      db(d, b[3], b[wt], a * Kh);
      d.save();
      d.translate(a * 203.5, a * 299);
      yb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      db(d, b[eg], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      yb(d, a * -20.5, a * -109, a * 41, a * 218, Yg * a);
      d.restore();
      db(d, b[3], b[zs], da * a);
      d.save();
      d.translate(a * 108.5, a * 210);
      yb(d, a * -20.5, a * -109, a * 41, a * 218, a * zl);
      d.restore();
      db(d, b[ut], b[og], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      yb(d, a * -92, a * -9.5, a * 184, a * Be, Ch * a);
      d.restore();
      db(d, b[fn], b[I], Bo * a);
      d.save();
      d.translate(a * 197, a * 299);
      yb(d, a * 85, a * -9, a * -170, a * Rg, a * 10);
      d.restore();
      db(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      db(d, undefined, b[Xn], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      db(d, xg, b[1], Kh * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      db(d, undefined, b[Hg], a * Uk);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      db(d, j, b[1], a * $a);
      return c;
    }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ΔΔ[729] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      yb(d, a * -96.5, a * -21.5, a * 193, a * 43, Rq * a);
      d.restore();
      db(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      yb(d, a * 96.5, a * -21.5, a * -193, a * 43, os * a);
      d.restore();
      db(d, b[0], b[os], $a * a);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      yb(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      db(d, b[0], b[wg], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      yb(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      db(d, b[0], b[In], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      yb(d, a * -115.5, a * -20.5, a * 231, a * 41, J * a);
      d.restore();
      db(d, b[0], b[Bb], qs * a);
      d.save();
      d.translate(a * 203.5, a * 299);
      yb(d, a * -115.5, -rl * a, a * 231, a * 40, a * 10);
      d.restore();
      db(d, b[0], b[0], Uk * a);
      d.save();
      d.translate(a * 298.5, a * 210);
      yb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      db(d, b[fl], b[wg], a * F);
      d.save();
      d.translate(a * 108.5, a * 210);
      yb(d, a * -20.5, a * -109, a * 41, a * 218, Yg * a);
      d.restore();
      db(d, b[0], b[Ih], a * 12);
      return c;
    }(0.3, ["#BB0000"]));
    ΔΔ[658] = bu(sd, [{
      f: Sc,
      x: Qs,
      y: 0,
      a: 1,
      r: Rq,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[150] = bu(1.5, [{
      f: md,
      x: 0,
      y: Ih,
      a: au,
      r: Rq,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ΔΔ[669] = Wd(0.35, ["#072428", "#67A242", "#67A242"], 0);
    ΔΔ[670] = Wd(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ΔΔ[671] = Wd(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ΔΔ[672] = Wd(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], I);
    if (ΔΔⵠΔᐃᐃΔ) {
      ΔΔ[278] = pr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        yb(d, Lr, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        db(d, "#1D6055");
        d.globalAlpha = Tl;
        var h = nd(b, "Leaderboard", 25, "#FFF");
        d.drawImage(h, (e - h.width) / 2, b * 5);
        return c;
      }(1));
    } else {
      ΔΔ[278] = pr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = E * b;
        c.width = e;
        c.height = f + qi;
        d.beginPath();
        yb(d, ya, Zj, e, f - g, g);
        d.globalAlpha = 0.5;
        db(d, "#1D6055");
        d.globalAlpha = au;
        var h = nd(b, "Leaderboard", 25, "#FFF");
        d.drawImage(h, (e - h.width) / 2, b * Fs);
        return c;
      }(1));
    }
    if (ΔΔⵠΔᐃᐃΔ) {
      ΔΔ[267] = pr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var j = b * Ok;
        var a = b * 35;
        var k = b * 65;
        var h = b * 2;
        var l = b * tb;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, ul * b);
        yb(d, k, os, f, j, h);
        db(d, null, "#69A148", l);
        d.translate(Yh, a);
        yb(d, k, os, f, j, h);
        db(d, null, "#AF352A", l);
        d.translate(0, a);
        yb(d, k, eu, f, j, h);
        db(d, null, "#669BB1", l);
        return c;
      }(0.75));
    } else {
      ΔΔ[267] = pr(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var k = c * ml;
        var a = c * 240;
        var m = c * 35;
        var h = c * 1;
        var l = c * 4;
        var g = c * 4;
        d.width = f;
        d.height = j;
        e.translate(Mg, c * 15);
        yb(e, m, h, i, k, l);
        db(e, null, "#69A148", g);
        var n = ΔΔ[669];
        e.drawImage(n, Ej, -8);
        e.translate(a, 0);
        yb(e, m, h, i, k, l);
        db(e, null, "#AF352A", g);
        n = ΔΔ[671];
        e.drawImage(n, 17, -9);
        e.translate(a, Qs);
        yb(e, m, h, i, k, l);
        db(e, null, "#669BB1", g);
        n = ΔΔ[670];
        e.drawImage(n, 17, -8);
        e.translate(a, Da);
        yb(e, m, h, i, k, l);
        db(e, null, "#074A87", g);
        n = ΔΔ[672];
        e.drawImage(n, wl, -8);
        return d;
      }(1));
    }
    if (ΔΔⵠΔᐃᐃΔ) {
      ΔΔ[608] = pr(jd(0.75));
    } else {
      ΔΔ[608] = pr(jd(1));
    }
    ΔΔ[792] = pr(Nd(0.16, oa, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ΔΔ[537] = pr(wb(5.8, Au(0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ΔΔ[283] = [];
    ΔΔ[465] = [];
    for (a = Zj; a < kw.ⲆᐃΔᐃΔᐃΔ + xj; a++) {
      ΔΔ[465][a] = nd(1, "" + (a + 1), $g, "#FFF");
    }
    ΔΔ[708] = [];
    ΔΔ[708].push(pr(qc(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ΔΔ[708].push(pr(qc(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ΔΔ[708].push(pr(qc(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ΔΔ[725] = [];
    ΔΔ[725].push(pr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(In, a * 5);
      c.translate(Qs, a * 20);
      Tb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      db(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      Tb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      db(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      db(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      db(c, "#3A2A0D");
      Tb(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      db(c, j, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      db(c, undefined, "#5E3E1A", Sj * a);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      db(c, Gs, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      db(c, undefined, "#c7a726", F * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      db(c, lj, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      db(c, undefined, "#c7a726", Uk * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      db(c, lj, "#c7a726", Sj * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      db(c, Gs, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      db(c, xg, "#c7a726", $g * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      db(c, El, "#c7a726", a * gr);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      db(c, cg, "#c7a726", a * da);
      c.translate(0, a * -zh);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      db(c, Hq, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      db(c, Jo, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      db(c, cn, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      db(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      db(c, cg, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      db(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      db(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      db(c, undefined, "#EDCE4F", qs * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      db(c, Og, "#EDCE4F", oq * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      db(c, "#704618", "#5D3D1A", zh * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      db(c, "#ECBE35", "#EDCE4F", a * 8);
      Tb(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      db(c, "#392C16", "#5E3E1A", jn * a);
      return b;
    }(0.22)));
    ΔΔ[725].push(pr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * Ok);
      Tb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      db(c, "#322413", "#322413", a * 4);
      c.translate(Da, a * -20);
      Tb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      db(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      db(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      db(c, "#071A1B");
      Tb(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      db(c, undefined, "#5E3E1A", zl * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      db(c, wr, "#5E3E1A", yg * a);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      db(c, Gs, "#281C08", a * da);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      db(c, undefined, "#281C08", gr * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      db(c, Za, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      db(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      db(c, T, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      db(c, Lj, "#281C08", Kh * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      db(c, undefined, "#281C08", a * La);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      db(c, xg, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      db(c, undefined, "#281C08", a * 12);
      c.translate(0, a * -_a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      db(c, cn, "#5E3C10", a * oq);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      db(c, undefined, "#5E3C10", Cl * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      db(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      db(c, cn, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      db(c, undefined, "#5E3C10", qs * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      db(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      db(c, undefined, "#5E3C10", a * Cl);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      db(c, Za, "#5E3C10", a * Kh);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      db(c, cb, "#5E3C10", a * da);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      db(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      db(c, "#E1DDD5", "#EAE7E4", a * Dg);
      Tb(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      db(c, "#392C16", "#5E3E1A", a * zl);
      return b;
    }(0.22)));
    ΔΔ[726] = pr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(Zj, a * 5);
      Tb(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      db(c, "#C09D6F", "#A37943", gn * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      db(c, "#C09D6F", "#A37943", a * Cs);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      yb(c, a * -5.5, a * -37.5, pk * a, a * 75, a * zl);
      c.restore();
      db(c, "#C09D6F", "#A37943", Pb * a);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      yb(c, a * -10, a * -5.5, a * 20, a * ps, a * mk);
      c.restore();
      db(c, "#C09D6F");
      Tb(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      db(c, "#C09D6F");
      return b;
    }(0.22));
    ΔΔ[727] = [];
    ΔΔ[727].push(pr(Hb(1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ΔΔ[727].push(pr(Hb(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ΔΔ[727].push(pr(Hb(1.5, ["#67441f", "#573819", "#9c6e08"], au)));
    ΔΔ[546] = Ⲇⵠ.ΔᐃⵠⵠᐃⲆᐃ;
    ΔΔ[547] = Ⲇⵠ.ΔⵠⵠⲆΔᐃΔ;
    ΔΔ[548] = Ⲇⵠ.ΔⲆᐃΔΔᐃⵠ;
    ΔΔ[549] = Ⲇⵠ.ⵠᐃᐃⵠⵠⵠᐃ;
    ΔΔ[517] = nd(1, "Show spectators", 25, "#FFF", Gs, Za, "#000", kq, 220);
    ΔΔ[525] = nd(1, "Reconnecting...", 30, "#FFF");
    console.log(cn, xg);
  }
  function Dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * zl, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    db(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    db(e, c[os], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    db(e, c[Qs], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    db(e, c[eu], c[0], xt * a);
    e.globalAlpha = 1;
    e.translate(-Yg * a, a * -nr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    db(e, c[Tl], c[xj], vr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    db(e, c[1], c[vg], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    db(e, c[1], c[It], a * J);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    db(e, c[hb], c[2], lg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    db(e, c[1], c[xq], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    db(e, c[zs], c[Rl], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    db(e, c[1], c[vg], a * Rr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    db(e, c[1], c[Hj], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    db(e, c[1], c[It], _s * a);
    return d;
  }
  function Id(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(Bb, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(Il * a, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * se, a * 83, tr * a, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(vn * a, a * 67, a * Zn, a * 67, a * Aq, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, tg * a, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * Mt, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * hh);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    db(d, b[0]);
    d.globalAlpha = zs;
    d.translate(Qs, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(wl * a, a * 95, Gg * a, a * 95, a * 21, a * 95);
    d.bezierCurveTo(dl * a, a * 83, a * hs, a * 93, Pe * a, a * 76);
    d.bezierCurveTo(yq * a, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * jg, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * Do, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * kl);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, $n * a, a * 75, a * 11, a * 76, ks * a);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * ar, ck * a, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, hq * a, a * 99, a * On, a * 93);
    d.closePath();
    db(d, b[Oq]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    db(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    db(d, b[3]);
    Tb(d, a * 103, a * 110, a * 11);
    db(d, b[4]);
    Tb(d, a * 55, a * 111, a * 11);
    db(d, b[tb]);
    Tb(d, a * 99, a * 107, mb * a);
    db(d, b[1]);
    Tb(d, a * 51, a * 108, Ig * a);
    db(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    db(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, ya);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    db(d, b[qu]);
    d.translate(2, Qs);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(Eg * a, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * ab, a * 93, Ls * a, a * 76);
    d.bezierCurveTo(a * vl, a * 75, a * 11, a * 75, a * Pj, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, ia * a, a * 59);
    d.bezierCurveTo(a * Pq, a * 59, a * dk, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * pk, a * 76, a * 6);
    d.bezierCurveTo(a * 81, Sl * a, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * Kg, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(Rg * a, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    db(d, undefined, b[2], nj * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * Rk, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * Yr, a * 32, a * Yo);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    db(d, b[Tl], b[Lt], a * Pl);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * Kl);
    d.bezierCurveTo(a * 137, a * Cl, a * 137, Yb * a, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    db(d, b[1], b[H], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    db(d, b[Tr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    db(d, b[3]);
    return c;
  }
  function Ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    yb(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    db(e, c[st], c[1], a * Wg);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    yb(e, a * -61, a * -Xg, a * 122, a * 40, Jg * a);
    e.restore();
    db(e, c[Lt], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    db(e, c[2], c[1], a * Pl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * dh, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(sr * a, a * 68.375, sg * a, a * 69.375, Eg * a, a * 68.375);
    e.closePath();
    db(e, c[lr], c[1], a * es);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * Nl, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    db(e, c[2], c[pu], a * 4);
    Tb(e, a * 71, a * 44.375, a * 16.55294535724685);
    db(e, c[Hj], c[1], a * 4);
    Tb(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    db(e, c[2], c[ie], a * Pe);
    return d;
  }
  function Sd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, Kl * a);
    e.globalAlpha = b ? 0.5 : Gh;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    db(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    db(e, c[1], c[eh], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    db(e, c[yr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    db(e, c[tb], c[Zg], ks * a);
    return d;
  }
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    yb(e, a * -97.5, a * -134.5, a * 195, a * 269, Ht * a);
    e.restore();
    db(e, c[Hi], c[ie], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    db(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    yb(e, a * -93.5, a * -126.5, a * 187, a * 253, a * vr);
    e.restore();
    db(e, c[4], c[pu], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    db(e, undefined, c[mk], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    db(e, c[$l], c[1], yh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    db(e, c[4], c[wt], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    db(e, c[Gi], c[1], a * zj);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    yb(e, a * -58.5, a * -32, a * 117, a * 64, a * wa);
    e.restore();
    db(e, c[5]);
    return d;
  }
  function _d(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    db(d, b[0]);
    return c;
  }
  function Fd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var h = hd(b * Hg, kh, d);
    g.drawImage(h, b * 0, b * 0);
    if (Tl == e) {
      g.translate(b * 100, b * 0);
      Tb(g, b * 113, b * 120, b * 66);
      db(g, undefined, d[4], b * 13);
      h = Au(b * 0.65, us, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(h, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      db(g, undefined, d[Pl], Cq * b);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      Tb(g, b * 113, b * 120, b * 66);
      db(g, tt, d[4], ys * b);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      yb(g, b * -40.5, b * -29.5, b * 81, b * 59, b * sb);
      g.restore();
      db(g, "#dff2f7", "#187484", b * $n);
      Tb(g, b * 22, b * 82, Zr * b);
      db(g, "#dff2f7", "#187484", b * 7);
      Tb(g, b * 145, b * 82, Kh * b);
      db(g, "#dff2f7", "#187484", $n * b);
      h = ad(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * jn, b * 85);
      h = ad(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * 50, b * 85);
      h = ad(b * 0.5, un, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * 90, b * 85);
      h = td(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = td(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = td(Xn * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, b * 125);
      h = td(Wl * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 50, b * 115);
      h = td(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, b * 100);
      h = td(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 80, b * 120);
      h = td(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 110, b * 125);
      h = td(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 120, b * 105);
    } else if (e == ub) {
      g.translate(b * 100, b * 0);
      Tb(g, b * 113, b * 120, b * 66);
      db(g, undefined, d[Os], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      yb(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      db(g, undefined, d[nr], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      db(g, d[Hh], d[Ot], Ls * b);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      db(g, undefined, d[Ng], b * Vi);
    } else if (e == Gi) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      db(g, cg, d[Hh], b * hh);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      db(g, Lj, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * $n, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      db(g, Hq, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * bt);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, sg * b);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      db(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      db(g, j, d[ta], Wa * b);
      g.translate(b * sk, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      db(g, undefined, d[ta], b * hh);
      g.translate(Ra * b, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, dk * b);
      g.bezierCurveTo(b * 239, b * _o, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      db(g, lj, d[M], Wa * b);
    }
    return f;
  }
  function Rd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Ih, a * 5);
    e.save();
    e.translate(a * 85, a * 88);
    e.rotate(1.4);
    Cb(e, 7, a * 60, Ch * a);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = Hg;
    e.translate(a * 85, a * 80);
    for (var f = Mg; f < 10; f++) {
      e.rotate(Math.PI / 5);
      e.save();
      e.translate(a * 65, Qs);
      Cb(e, Lg, a * 21, a * 4);
      db(e, c[Tl], c[2], a * 4);
      e.restore();
    }
    e.save();
    e.translate(a * 0, a * Yh);
    e.rotate(1.4);
    Cb(e, 7, a * 60, a * 10);
    db(e, c[3], c[4], a * 4);
    e.rotate(0.64);
    Cb(e, 7, a * 40, a * 10);
    db(e, c[Eq], c[6], a * 4);
    e.rotate(0.12);
    Cb(e, wk, a * 23, a * Eq);
    e.restore();
    db(e, c[7]);
    return d;
  }
  function Gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(nh * a, a * 20);
    e.globalAlpha = b ? 0.5 : $b;
    e.save();
    e.translate(a * 54, a * 389.5);
    yb(e, -mt * a, a * -228.5, a * 30, a * 457, Ra * a);
    e.restore();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    db(e, c[Rq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    db(e, c[In]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    db(e, c[Lr]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = hb;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(Yh);
    yb(e, a * -15, a * -228.5, a * 30, a * 457, a * jn);
    e.restore();
    db(e, c[Hg], c[Pn], a * On);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    db(e, c[Js], c[4], a * br);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    db(e, c[3], c[nj], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    db(e, c[Oj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    db(e, c[Th], c[7], a * qk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    db(e, c[8]);
    return d;
  }
  function jd(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var h = b * 4;
    c.width = e;
    c.height = f;
    yb(d, b * 5, b * 5, e - b * Pb, f - b * 10, g);
    db(d, null, "#BBE8EF", h);
    return c;
  }
  function Ld(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 501;
    e.height = a * 564;
    f.scale(0.5, 0.5);
    f.translate(a * 240, Li * a);
    f.rotate(d);
    f.globalAlpha = b ? 0.5 : 0.2;
    Tb(f, a * 174, a * 87.984375, a * 20.8806130178211);
    db(f, c[0], c[Ih], zh * a);
    Tb(f, a * 174, a * 87.984375, a * 12.165525060596439);
    db(f, c[ya], c[0], a * 8);
    Tb(f, a * 174, a * 87.484375, Ro * a);
    db(f, c[0]);
    Tb(f, a * 30, a * 87.984375, a * 20.8806130178211);
    db(f, c[eu], c[eu], Vn * a);
    Tb(f, a * 30, a * 87.984375, a * 12.165525060596439);
    db(f, c[ig], c[Bb], a * Ct);
    Tb(f, a * 30, a * 87.484375, a * nk);
    db(f, c[0]);
    Tb(f, a * Ak, a * 30, a * 20.8806130178211);
    db(f, c[0], c[0], a * Os);
    Tb(f, Uh * a, a * 30, a * 12.165525060596439);
    db(f, c[0], c[0], a * 4);
    Tb(f, a * Cn, a * 30, a * 6);
    db(f, c[0]);
    Tb(f, a * 100, a * 130, a * 20.8806130178211);
    db(f, c[st], c[fl], Os * a);
    Tb(f, a * 100, a * 130, a * 12.165525060596439);
    db(f, c[0], c[Yh], a * 4);
    Tb(f, a * 100, a * 130, a * 6);
    db(f, c[os]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    f.rotate(0);
    yb(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    db(f, c[os], c[0], a * Ng);
    f.save();
    f.translate(a * 101, a * 64.984375);
    f.rotate(0);
    yb(f, a * -33, a * -vr, a * 66, rl * a, a * 15);
    f.restore();
    db(f, c[st], c[Qs], a * gl);
    f.save();
    f.translate(a * 102, a * 63.484375);
    f.rotate(wj);
    yb(f, -dl * a, a * -27.5, a * Rg, a * 55, Rt * a);
    f.restore();
    f.translate(z, -5);
    f.globalAlpha = $b;
    Tb(f, a * 174, a * 87.984375, a * 20.8806130178211);
    db(f, c[1], c[xb], a * Jl);
    Tb(f, a * 174, a * 87.984375, a * 12.165525060596439);
    db(f, c[1], c[ub], a * 8);
    Tb(f, a * 174, a * 87.484375, Ya * a);
    db(f, c[H]);
    Tb(f, a * 30, a * 87.984375, a * 20.8806130178211);
    db(f, c[1], c[ll], a * 8);
    Tb(f, a * 30, a * 87.984375, a * 12.165525060596439);
    db(f, c[hb], c[nq], a * 8);
    Tb(f, a * 30, a * 87.484375, Ck * a);
    db(f, c[pq]);
    Tb(f, a * 102, a * 30, a * 20.8806130178211);
    db(f, c[1], c[Js], a * 8);
    Tb(f, a * 102, a * 30, a * 12.165525060596439);
    db(f, c[Tl], c[3], a * 8);
    Tb(f, a * 102, a * 30, nk * a);
    db(f, c[1]);
    Tb(f, a * 102, a * 130, a * 20.8806130178211);
    db(f, c[zs], c[qu], a * 8);
    Tb(f, a * 102, a * 130, a * 12.165525060596439);
    db(f, c[1], c[Hk], a * 8);
    Tb(f, a * 102, a * 130, a * 6);
    db(f, c[au]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    yb(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    db(f, c[mk], c[Hk], a * Xl);
    f.save();
    f.translate(a * 101, a * 64.984375);
    yb(f, a * -33, a * -10, a * 66, a * 20, a * mt);
    f.restore();
    db(f, c[2], c[1], a * 8);
    f.save();
    f.translate(a * 102, a * 63.484375);
    yb(f, a * -9, a * -27.5, W * a, a * 55, a * 15);
    f.restore();
    db(f, c[Lt], c[1], Es * a);
    Tb(f, a * 135, a * 107.36605834960938, a * 21.095023109728988);
    db(f, c[au], c[ea], On * a);
    Tb(f, a * 135, a * 107.36605834960938, a * 13);
    db(f, c[Wl], c[3], a * Vr);
    Tb(f, a * 135, a * 107.36605834960938, a * 6.082762530298219);
    db(f, c[2]);
    Tb(f, a * 70, a * 107.36605834960938, a * 21.095023109728988);
    db(f, c[1], c[ut], qk * a);
    Tb(f, a * 70, a * 107.36605834960938, a * 13);
    db(f, c[1], c[Hk], a * 8);
    Tb(f, a * 70, a * 107.36605834960938, a * 6.082762530298219);
    db(f, c[xq]);
    return e;
  }
  function Wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    Tb(e, a * 54.5, a * 55, a * 48.038209575038294);
    db(e, b[Da], b[Hg], zh * a);
    if (fl == c) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      db(e, b[Hj]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      yb(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      db(e, b[2], b[qu], a * 4);
      Tb(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      db(e, b[ls], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      yb(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      db(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      db(e, undefined, b[hl], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      db(e, undefined, b[nr], Ct * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      db(e, xg, b[5], Pl * a);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      db(e, b[H]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      db(e, b[qu], b[Pl], a * nk);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      db(e, b[qo], b[4], Vl * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      db(e, b[Pn]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      db(e, b[It], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      db(e, b[fn]);
    }
    return d;
  }
  function Od(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    yb(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    db(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    yb(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    db(e, c[fl]);
    return d;
  }
  function Nd(a, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 175;
    e.height = a * 106;
    f.globalAlpha = c ? 0.5 : sd;
    f.translate(Lr, a * Bi);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 67);
    f.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    f.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    f.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    f.closePath();
    db(f, d[mj]);
    f.globalAlpha = og;
    f.translate(0, -zh * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 75);
    f.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, vh * a, a * 27);
    f.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    f.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    f.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    f.closePath();
    db(f, d[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 38, a * 46);
    f.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    f.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    f.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    f.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    f.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    f.closePath();
    db(f, d[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 75);
    f.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, Ak * a, a * 27);
    f.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    f.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    f.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    f.closePath();
    db(f, rk, d[vg], a * 4);
    f.translate(Mg, a * -ut);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 67);
    f.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    f.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    f.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    f.closePath();
    db(f, d[10], d[kk], a * es);
    f.translate(os, a * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131, a * 43);
    f.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, qa * a);
    f.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    f.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    f.closePath();
    db(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 43);
    f.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * sg);
    f.bezierCurveTo(a * 7, a * 34, wl * a, a * 63, a * 33, a * 66);
    f.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    f.closePath();
    db(f, d[ut]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 24, b * a);
    f.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    f.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    f.bezierCurveTo(a * 25, a * 47, m * a, a * 36, a * 23, a * Bs);
    f.closePath();
    db(f, d[Na]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 148, a * 18);
    f.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    f.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    f.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * W);
    f.closePath();
    db(f, d[Rs]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131, a * 43);
    f.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, tr * a);
    f.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    f.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    f.closePath();
    db(f, undefined, d[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 43);
    f.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    f.bezierCurveTo(a * $n, a * 34, a * 17, a * 63, a * 33, a * 66);
    f.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    f.closePath();
    db(f, Za, d[4], a * 4);
    f.save();
    f.translate(a * 87, a * 34.5);
    f.rotate(Da);
    yb(f, -Hr * a, a * -10.5, Nh * a, a * 21, a * 10);
    f.restore();
    db(f, d[cq], d[Lt], a * 4);
    f.save();
    f.translate(a * 87, a * 57);
    f.rotate(Yh);
    yb(f, -Dg * a, a * -23, a * xs, a * 46, a * lg);
    f.restore();
    db(f, d[8], d[2], a * 4);
    Tb(f, a * 87, a * 39, a * 4.123105625617661);
    db(f, d[dh], d[2], a * 4);
    Tb(f, a * 87, a * 60, a * 4.242640687119285);
    db(f, d[9], d[2], ba * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 67);
    f.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    f.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    f.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    f.closePath();
    db(f, d[8], d[lr], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 27, a * 69);
    f.bezierCurveTo(a * ik, a * 77, bb * a, a * 74, a * 27, a * 80);
    f.closePath();
    db(f, d[Lo], d[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 70);
    f.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    f.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    f.closePath();
    db(f, d[w], d[Vg], es * a);
    Tb(f, a * 50, a * 80, a * 5);
    db(f, d[9], d[Pn], Wg * a);
    Tb(f, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    db(f, d[dh], d[Rl], a * Fr);
    Tb(f, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    db(f, d[9], d[2], nj * a);
    return e;
  }
  function qd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    db(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    db(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, yk * a);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    db(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, Ph * a, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    db(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    db(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    db(d, b[wj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    db(d, b[ya]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    db(d, b[Mg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    db(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    db(d, b[ig]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    db(d, b[mj]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    db(d, b[ub], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * Ph, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    db(d, b[xb], b[Tt], a * E);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    db(d, b[yr], b[Tt], a * Es);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, ah * a, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    db(d, b[3], b[ub], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    db(d, b[3], b[3], a * Iq);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    db(d, b[3], b[ut], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    db(d, b[qu], b[Js], a * aa);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    db(d, b[3], b[yr], Gk * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    db(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    db(d, b[Lg], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    db(d, b[I], b[3], br * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    db(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, lh * a, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    db(d, b[nr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    db(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    db(d, b[1]);
    Tb(d, a * 102, a * 269, a * 11);
    db(d, b[Wb]);
    Tb(d, a * 98, a * 266, a * 5);
    db(d, b[6]);
    Tb(d, a * 168, a * 269, a * 11);
    db(d, b[nq]);
    Tb(d, a * 164, a * 266, a * 5);
    db(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    db(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    db(d, b[Gi]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    db(d, b[yh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    db(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    db(d, b[br]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    db(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    db(d, b[zj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    db(d, b[Gk]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    db(d, b[_a]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    db(d, b[aa]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    db(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    db(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    db(d, b[On]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    db(d, b[E]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    db(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    db(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    db(d, b[N]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    db(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    db(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    db(d, b[tg]);
    return c;
  }
  function Hd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Lr, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    yb(e, a * -71.5, a * -71, a * 143, a * 143, te * a);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = Xn;
    e.translate(Hi, a * -Ch);
    e.save();
    e.translate(a * 80.5, a * 78);
    yb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    db(e, c[Hg], c[lr], a * nk);
    e.save();
    e.translate(a * 80, a * 78.5);
    yb(e, a * -17, a * -72.5, a * 34, a * 145, Ht * a);
    e.restore();
    db(e, c[Hk], c[es], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Bb, a * zl);
    e.save();
    e.translate(a * 80, a * 79.5);
    yb(e, a * -73, a * -16.5, a * 145, a * 34, Ra * a);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    yb(e, a * -73, a * -16.5, a * 145, a * 34, a * zl);
    e.restore();
    db(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(wj, a * Lb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    db(e, c[Rq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    db(e, c[3], c[4], As * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    db(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    db(e, c[ut], c[4], a * Xk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    db(e, c[3], c[Pl], a * U);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Zj, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    yb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(Da, a * -xt);
    e.save();
    e.translate(a * 78.5, a * 78);
    yb(e, a * -13.5, -yl * a, a * 27, a * 27, a * qq);
    e.restore();
    db(e, c[Wb], c[tb], a * nk);
    return d;
  }
  function Ud(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : zg;
    e.translate(a * z, a * ta);
    Tb(e, a * 220, a * 201, a * 170.41713528867922);
    db(e, c[0], c[wg], Xk * a);
    e.globalAlpha = pu;
    e.translate(a * -5, a * -5);
    Tb(e, a * 220, a * 201, a * 170.41713528867922);
    db(e, c[1], c[2], a * 6);
    Tb(e, a * 220, a * 201, a * 130);
    db(e, c[11], c[rs], a * 6);
    Tb(e, a * 222, a * 199, a * 120.74767078498864);
    db(e, Wh, c[3], a * 40);
    Tb(e, a * 220, a * 200, a * 95.44108130150245);
    db(e, undefined, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : zg;
    e.translate(a * 5, a * 5);
    Tb(e, a * 63, a * 136, a * 49.193495504995376);
    db(e, c[0], c[st], a * 4);
    e.globalAlpha = mk;
    e.translate(a * -5, -ta * a);
    Tb(e, a * 63, a * 136, a * 49.193495504995376);
    db(e, c[8], c[Ul], a * 4);
    Tb(e, a * 63, a * 137, a * 25.632011235952593);
    db(e, c[7], c[Lt], nl * a);
    return d;
  }
  function Yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : ie;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    db(e, c[Qr], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    db(e, c[Ll], c[Zg], a * Ul);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    db(e, c[$i], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    db(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    db(e, c[$i], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    db(e, c[$l], c[4], pq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    db(e, c[4], c[4], a * Ug);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * Nk, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    db(e, c[4], c[4], a * Vg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, Fe * a, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    db(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    db(e, c[Ct], c[$i], Vg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    db(e, c[Ct], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    db(e, c[4], c[Os], a * It);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    db(e, Hq, c[Pl], Ql * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    db(e, undefined, c[Wg], pl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    db(e, c[ls], c[4], a * Hj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    db(e, undefined, c[4], a * Ck);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    db(e, undefined, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(wt, gs);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    db(e, c[5], c[5], tb * a);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    db(e, c[Yh], c[$b], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    db(e, c[0], c[Hg], Rl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    db(e, c[0], c[og], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    db(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    db(e, c[os], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    db(e, c[0], c[zs], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(Hs * a, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    db(e, c[Ih], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    db(e, c[Ug], c[as], nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    db(e, Gs, c[Tt], a * pl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    db(e, c[0], c[pu], It * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    db(e, c[0], c[zs], vg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    db(e, c[0], c[gs], jk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    db(e, undefined, c[sd], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    db(e, Wh, c[Tl], Pn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    db(e, c[0], c[0], Vg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    db(e, undefined, c[og], a * 2);
    return d;
  }
  function Kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, Fk * a);
    if (Ft === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      Tb(e, a * 44, a * 55, a * 41);
      db(e, c[mj]);
    }
    e.globalAlpha = 1;
    Tb(e, a * 44, a * 45, a * 41);
    db(e, c[1], c[2], a * Wg);
    Tb(e, a * 44, a * 45, a * 31);
    db(e, c[ll]);
    e.save();
    e.translate(a * 45, a * 45);
    yb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    db(e, c[Ng], c[ba], a * Pn);
    e.save();
    e.translate(a * 45, a * 45);
    yb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    db(e, c[4], c[ls], a * 2);
    Tb(e, a * 45, a * 29, a * 7);
    db(e, c[Fk]);
    Tb(e, a * 45, a * 61, _s * a);
    db(e, c[5]);
    Tb(e, a * 28, a * 45, a * 7);
    db(e, c[Ot]);
    Tb(e, a * 62, a * 45, a * 7);
    db(e, c[M]);
    return d;
  }
  function Vd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    db(e, c[1], c[2], a * th);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    db(e, undefined, c[2], da * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    db(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    db(e, c[3], c[4], Sj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    db(e, c[5], c[Bq], a * 12);
    Tb(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    db(e, c[7]);
    Tb(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    db(e, c[Iq]);
    return d;
  }
  function Zd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    Tb(d, a * 74.5, a * 85, a * 66);
    db(d, b[fl]);
    d.globalAlpha = pu;
    Tb(d, a * 75.5, a * 72.5, a * 67);
    db(d, b[gs], b[2], es * a);
    Tb(d, a * 75.5, a * 73.5, a * 54);
    db(d, b[ll]);
    d.globalAlpha = 0.5;
    Tb(d, a * 74.5, a * 80.5, a * 39);
    db(d, b[$i]);
    d.globalAlpha = og;
    Tb(d, a * 74.5, a * 74.5, a * 37);
    db(d, b[5]);
    return c;
  }
  function Xd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(nk * a, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    db(e, c[nq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    db(e, c[ya], c[au], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    db(e, c[It]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    db(e, tt, c[1], Nh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    db(e, c[ya], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    db(e, c[0], c[au], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    db(e, c[Rl], c[sd], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    db(e, c[0], c[pu], a * nh);
    return d;
  }
  function $d(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = Uh * a;
    d.globalAlpha = 0.5;
    d.fillStyle = b[st];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, vr * a);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * Ig);
      e.bezierCurveTo(a * 381, vg * a, a * 197, a * 4.5, a * 385, Vn * a);
      e.bezierCurveTo(a * 397, tb * a, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * mt, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * Wg, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, Pl * a, a * 30.5, a * 4, V * a);
      e.bezierCurveTo(sr * a, a * 18.5, a * 16, a * 18.5, a * 28, so * a);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, Qk * a, a * 5);
      e.closePath();
      db(e, b[3], b[sl], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, nr * a, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      db(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * Mq, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * pl, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      db(e, b[Hk], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * Ng, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * Ng, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * hr, a * 213);
      e.bezierCurveTo(a * fn, a * 213, a * Pn, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      db(e, b[3], b[ut], a * 32);
      Tb(e, a * 41, a * 30, a * 14.7648230602334);
      db(e, b[ci], b[nq], a * 32);
      Tb(e, a * 369, a * 30, a * 15.556349186104045);
      db(e, b[3], b[qu], a * 32);
      Tb(e, a * 364, a * 190, a * 15.620499351813308);
      db(e, b[3], b[xb], a * 32);
      Tb(e, a * 41, a * 186, a * 15.556349186104045);
      db(e, b[ub], b[Js], a * 32);
    } else if (Hj == c) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, Qu * a);
      e.bezierCurveTo(a * 381, a * Vg, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, ls * a, a * 43);
      e.bezierCurveTo(nl * a, a * 30.5, a * 4, a * 30.5, a * 4, Rg * a);
      e.bezierCurveTo(a * bt, a * 18.5, a * Yb, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, $a * a, a * 18.5, a * $a, a * Qj, Ig * a);
      e.closePath();
      db(e, b[eg], b[ci], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * Ll, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * Ll, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, Oj * a, a * 106, a * Ot, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      db(e, b[ut], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(Vn * a, a * 110, Bq * a, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      db(e, b[3], b[ea], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * Te, a * 163, a * Os, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, H * a, a * 213, ba * a, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      db(e, b[ub], b[ub], a * 32);
      Tb(e, a * 41, a * 30, a * 14.7648230602334);
      db(e, b[Hk], b[Hk], a * 32);
      Tb(e, a * 369, a * 30, a * 15.556349186104045);
      db(e, b[3], b[3], a * 32);
      Tb(e, a * 364, a * 190, a * 15.620499351813308);
      db(e, b[Js], b[3], a * 32);
      Tb(e, a * 41, a * 186, a * 15.556349186104045);
      db(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Pg, a * 5);
    e.bezierCurveTo(a * 381, a * Lt, a * 197, a * 4.5, a * 385, gl * a);
    e.bezierCurveTo(a * 397, a * 4, a * 401, tb * a, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(Ob * a, a * 55, Mq * a, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * $i, a * 30.5, a * 4, a * 30.5, a * 4, V * a);
    e.bezierCurveTo(Ju * a, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * gg, Ot * a);
    e.closePath();
    db(e, b[1], b[Ih], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(Eq * a, a * 58, a * mb, a * 55, Yo * a, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * ie, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * As, a * 71);
    e.closePath();
    db(e, b[It], b[0], a * th);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, Fk * a, a * 118);
    e.bezierCurveTo(a * 4, a * 110, Th * a, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    db(e, b[1], b[0], a * $g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo($l * a, a * 183);
    e.bezierCurveTo(a * gs, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * W, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    db(e, b[It], b[0], a * 12);
    Tb(e, a * 41, a * 30, a * 14.7648230602334);
    db(e, b[2], b[mj], Cl * a);
    Tb(e, a * 369, a * 30, a * 15.556349186104045);
    db(e, b[2], b[0], a * 12);
    Tb(e, a * 364, a * 190, a * 15.620499351813308);
    db(e, b[Ug], b[0], th * a);
    Tb(e, a * 41, a * 186, a * 15.556349186104045);
    db(e, b[Pn], b[st], a * Mt);
    return d;
  }
  function ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    yb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    db(e, c[1], c[rs], sb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    db(e, Og, c[Zg], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    db(e, xg, c[Bq], a * ng);
    return d;
  }
  function tc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = Vg * (b * c);
    var i = c * b * 2;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    f.translate(a, j);
    Tb(f, ig, st, c * b);
    db(f, d);
    return e;
  }
  function nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : sd;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    Cb(e, 8, a * 60, a * 10);
    db(e, c[In]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    Cb(e, 8, a * 60, a * 10);
    db(e, c[1], c[2], 4);
    e.rotate(0.56);
    Cb(e, qk, a * 40, Cs * a);
    db(e, c[3], c[4], tb);
    e.rotate(0.28);
    Cb(e, Hr, a * 28, a * 8);
    db(e, c[Qr]);
    e.restore();
    return d;
  }
  function oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    yb(e, a * -Th, a * -66.5, a * 8, No * a, a * sk);
    e.restore();
    db(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    yb(e, a * -9.5, a * -6.5, a * 16, a * Cq, vr * a);
    e.restore();
    db(e, c[ig]);
    e.save();
    e.translate(a * 30, sg * a);
    yb(e, a * -7.5, a * -5.5, Yr * a, dn * a, a * Ra);
    e.restore();
    db(e, c[Rq]);
    e.save();
    e.translate(a * 30, a * 31);
    yb(e, a * -26, a * -14.5, a * 52, a * 29, nr * a);
    e.restore();
    db(e, c[Ih]);
    e.globalAlpha = mk;
    e.save();
    e.translate(a * 36, a * 79.140625);
    yb(e, -Ro * a, a * -66.5, a * On, el * a, a * 10);
    e.restore();
    db(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    yb(e, a * -9.5, a * -6.5, a * Kg, a * Ts, a * Zk);
    e.restore();
    db(e, c[Tt], c[4], fn * a);
    e.save();
    e.translate(a * 35, a * 12.140625);
    yb(e, a * -7.5, a * -5.5, a * 12, a * 11, gn * a);
    e.restore();
    db(e, c[fn], c[4], fn * a);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    yb(e, a * -26, a * -14.5, a * 52, a * 29, a * Ll);
    e.restore();
    db(e, c[Wb], c[4], a * 3);
    return d;
  }
  function rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, -Ss * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    db(d, b[0]);
    return c;
  }
  function ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * Wr, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    db(e, c[On], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    db(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(Mg, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Ga * a, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = $b;
    e.translate(st, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * dk, a * 127);
    e.bezierCurveTo(vn * a, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, Dl * a, a * 120, Ju * a, a * 127);
    e.closePath();
    db(e, c[4], c[M], a * q);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    yb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    db(e, c[1], c[2], mb * a);
    e.save();
    e.translate(a * 143.5, a * 137);
    yb(e, a * -13.5, a * -14, a * 27, a * 28, es * a);
    e.restore();
    db(e, c[1], c[pq], a * 5);
    return d;
  }
  function sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Pb * a, a * Hh);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    yb(e, a * -19.5, a * -8.5, a * 39, Zh * a, a * 10);
    e.restore();
    db(e, c[Rq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    db(e, c[0]);
    Tb(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    db(e, c[Qs]);
    e.globalAlpha = 1;
    e.translate(-Lb * a, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    yb(e, a * -19.5, a * -8.5, a * 39, a * Ej, Lb * a);
    e.restore();
    db(e, xg, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    db(e, undefined, c[3], ks * a);
    Tb(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    db(e, j, c[3], a * Xk);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    yb(e, a * -19.5, a * -8.5, a * 39, Jh * a, a * 10);
    e.restore();
    db(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    db(e, c[og]);
    Tb(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    db(e, c[2], c[1], a * 4);
    Tb(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    db(e, c[fn], c[wt], a * 4);
    Tb(e, a * 78, a * 44, a * 20);
    db(e, c[4]);
    return d;
  }
  function hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, Hi * a);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    yb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    db(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    yb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    db(e, c[0], c[eu], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    yb(e, a * -26.5, -$q * a, a * 53, a * 30, a * 5);
    e.restore();
    db(e, c[Bb], c[ig], a * 4);
    e.translate(a * Qu, a * ig);
    e.globalAlpha = og;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    yb(e, a * -4.5, a * -39, a * 9, a * 78, nr * a);
    e.restore();
    db(e, c[ie], c[2], a * sl);
    e.save();
    e.translate(a * 53, a * 36);
    yb(e, a * -29, a * -17.5, a * 58, a * 35, a * kq);
    e.restore();
    db(e, c[3], c[Ls], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    yb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    db(e, c[Oj], c[Fg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    db(e, c[7], c[6], I * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    db(e, c[Ar], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    db(e, c[9], c[Iq], a * Tt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    db(e, c[At], c[kk], yr * a);
    return d;
  }
  function lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    Cb(e, Xk, a * 43, a * Ra);
    e.restore();
    db(e, c[0], c[sd], a * 3);
    return d;
  }
  function gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, A * a);
    e.globalAlpha = b ? 0.5 : ie;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    db(e, c[0]);
    e.translate(a * -Kl, a * -ml);
    e.globalAlpha = za;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * eo);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    db(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * pg);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    db(e, cg, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    db(e, c[4], c[Eq], On * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    db(e, undefined, c[ta], a * He);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    db(e, Gs, c[5], a * 8);
    return d;
  }
  function uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * ns;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : au;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    yb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    db(e, c[Lr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    db(e, c[Mg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    db(e, c[Zj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    db(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * Xa, a * 98);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    db(e, c[Zj]);
    e.translate(a * -20, a * -wq);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    yb(e, a * -13.5, a * -249.5, a * 27, a * 499, kk * a);
    e.restore();
    db(e, c[1], c[rs], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    db(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    db(e, er, c[4], a * Jl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    db(e, c[5], c[Vl], aa * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    db(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    db(e, c[5], c[6], a * Dg);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(Ul, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    db(e, c[qk]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * Dl, a * 98);
    e.closePath();
    db(e, c[8], c[9], a * js);
    e.scale(Pn, 2);
    e.translate(a * -23, a * -Jg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    db(e, c[10]);
    return d;
  }
  function bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, Zk * a);
    e.globalAlpha = b ? 0.5 : Xn;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    db(e, c[Qs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * Dr, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    db(e, c[Hi]);
    e.translate(eu, a * -10);
    e.globalAlpha = Gh;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    db(e, c[Ig]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    db(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    db(e, c[1], c[jk], Fk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    db(e, cb, c[vg], a * Oj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    db(e, c[es], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    db(e, c[4], c[M], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    db(e, c[es], c[Ig], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    db(e, c[es], c[5], a * Qu);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * xh, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    db(e, c[4], c[5], ib * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    db(e, c[4], c[5], a * Ig);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    db(e, c[$i], c[5], a * z);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    db(e, c[4], c[mb], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    db(e, c[4], c[Ig], a * hl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    db(e, c[Ls], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    db(e, c[Gi], c[Qr], q * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    db(e, c[4], c[5], a * Qr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    db(e, c[ls], c[z], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    db(e, c[Os], c[5], a * z);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    db(e, c[4], c[mb], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    db(e, c[4], c[5], a * Ig);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    db(e, c[4], c[Fs], a * ta);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, Fl * a, a * 96, xs * a, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    db(e, c[4], c[ta], a * 5);
    return d;
  }
  function vc(a, b, c) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 187;
    e.height = a * 119;
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(ig, 3);
    f.moveTo(a * 53, a * 45);
    f.bezierCurveTo(a * fn, a * 60, d * a, a * 72, a * 19, a * 81);
    f.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    f.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    f.bezierCurveTo(a * 63, a * 101, a * 92, a * No, a * 138, a * 93);
    f.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    f.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    f.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    f.closePath();
    db(f, c[Ot]);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(0, -3);
    f.moveTo(a * 53, a * 45);
    f.bezierCurveTo(a * Hk, a * 60, a * 11, a * 72, Jj * a, a * 81);
    f.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    f.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    f.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    f.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    f.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    f.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    f.closePath();
    db(f, c[In], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 151, a * 60);
    f.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    f.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    f.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    f.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    f.closePath();
    db(f, c[Da], c[mk], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 37, a * 53);
    f.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    f.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    f.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    f.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    f.closePath();
    db(f, c[2], c[ut], Ng * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(Yq * a, a * 36);
    f.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    f.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    f.closePath();
    db(f, c[0], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80, a * 43);
    f.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    db(f, rk, c[1], a * 4);
    Tb(f, a * 58, a * 50, Qr * a);
    db(f, c[4]);
    Tb(f, a * 43, a * 65, a * 5);
    db(f, c[4]);
    Tb(f, a * 58, a * 73, Eq * a);
    db(f, c[4]);
    Tb(f, a * 58, a * 50, a * 2);
    db(f, c[5]);
    Tb(f, a * 43, a * 65, Ul * a);
    db(f, c[5]);
    Tb(f, a * 58, a * 73, a * 2);
    db(f, c[Ig]);
    return e;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 185;
    d.height = a * 164;
    e.translate(Zj, 0);
    var f = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * Zg);
      e.globalAlpha = b ? 0.5 : sd;
      Tb(e, a * 100.5, a * 82, a * 74.92746655359852);
      db(e, c[Yh], c[0], a * 4);
      Tb(e, a * 100.5, a * 82, a * 65.9417374971317);
      db(e, c[Lr], c[0], Gi * a);
      e.translate(Mg, -Fk);
      e.globalAlpha = 1;
      Tb(e, a * 100.5, a * 82, a * 74.92746655359852);
      db(e, c[1], c[ci], a * 4);
      Tb(e, a * 100.5, a * 82, a * 65.9417374971317);
      db(e, c[Hg], c[Hj], a * Os);
      Tb(e, a * 100.5, a * 82, a * 35.9417374971317);
      db(e, c[wt], c[2], Jg * a);
      Tb(e, a * 100.5, a * 82, a * 15.9417374971317);
      db(e, c[Hg], c[Ul], a * 6);
      return d;
    }(a, b, c);
    e.drawImage(f, -jn * a, a * 0);
    f = Ld(a, b, c, 0);
    e.drawImage(f, a * -83, a * -40);
    f = Ld(a, b, c, Math.PI / 1.4);
    e.drawImage(f, a * -15, a * -88);
    f = Ld(a, b, c, Math.PI / -1.4);
    e.drawImage(f, a * on, -He * a);
    return d;
  }
  function cc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * 19, a * 148, Rs * a, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    db(d, b[0], b[wj], Pe * a);
    return c;
  }
  function Ru(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * Yh, a * 61, on * a);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, hs * a, a * 89, Ar * a, a * 84);
    e.bezierCurveTo(a * og, a * 77, a * Os, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * bh, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, wa * a);
    e.closePath();
    db(e, c[ya], c[1], Vn);
    return d;
  }
  function pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    db(e, c[0], c[Xn], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    db(e, c[ig], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, Cn * a, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    db(e, Og, c[1], gl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    db(e, tt, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    db(e, undefined, c[1], Pl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    db(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    db(e, c[Ul]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    db(e, c[2]);
    return d;
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    db(e, c[0], c[Gh], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    db(e, c[0], c[ie], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    db(e, c[0], c[wt], a * jh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, ta * a, a * 93.5, Do * a, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    db(e, c[Vg], c[fn], a * N);
    return d;
  }
  function Tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 3);
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    Cb(e, fg, a * 60, a * 10);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 85, a * 82);
    for (var f = In; f < J; f++) {
      e.rotate(Math.PI / Qr);
      e.save();
      e.translate(a * 65, Da);
      Cb(e, sl, a * 21, a * $i);
      db(e, c[za], c[2], nl * a);
      e.restore();
    }
    e.save();
    e.translate(a * wj, a * 0);
    e.rotate(1);
    Cb(e, Hr, a * 60, a * Ht);
    db(e, c[qo], c[Pl], Pe * a);
    e.rotate(0.56);
    Cb(e, js, a * 40, kk * a);
    db(e, c[5], c[6], a * 4);
    e.rotate(0.28);
    Cb(e, Iq, a * 28, a * 8);
    db(e, c[7]);
    e.restore();
    return d;
  }
  function fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.translate(Yh, a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    Cb(e, 7, a * 60, a * xt);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 85, a * 82);
    for (var f = Mg; f < Ra; f++) {
      e.rotate(Math.PI / 5);
      e.save();
      e.translate(a * 65, Ih);
      Cb(e, 3, a * 21, a * 4);
      db(e, c[Hg], c[2], a * Pl);
      e.restore();
    }
    e.save();
    e.translate(a * Qs, a * ig);
    e.rotate(0.2);
    Cb(e, 9, a * 60, Cs * a);
    db(e, c[qo], c[4], a * 4);
    e.rotate(-0.32);
    Cb(e, dl, a * 38, Lb * a);
    db(e, c[5], c[va], a * 4);
    e.rotate(0.68);
    Cb(e, Lo, a * to, a * js);
    db(e, c[jh], c[Jl], Qa * a);
    e.restore();
    return d;
  }
  function zc(a, b) {
    var c = document.createElement("canvas");
    var e = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    e.globalAlpha = 0.5;
    e.translate(a * 5, Qr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 191.633544921875, a * 123.98580932617188);
    e.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    e.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    e.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    e.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    e.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    e.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    e.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    e.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    e.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    e.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    e.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    e.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    e.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    e.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    e.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    e.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    e.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    e.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    e.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    e.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    e.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    e.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    e.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    e.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    e.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    e.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    e.closePath();
    db(e, b[0]);
    e.globalAlpha = 1;
    e.translate(-Gi * a, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 191.633544921875, a * 123.98580932617188);
    e.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    e.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    e.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    e.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    e.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    e.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    e.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    e.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    e.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    e.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    e.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    e.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    e.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    e.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    e.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    e.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    e.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    e.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    e.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    e.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    e.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    e.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    e.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    e.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    e.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    e.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    e.closePath();
    db(e, Hl, b[pu], th * a);
    e.translate(a * -1, a * wj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.633544921875, a * 88.98580932617188);
    e.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    e.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    e.closePath();
    db(e, b[es], b[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 275.633544921875, a * 281.9858093261719);
    e.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    e.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    e.closePath();
    db(e, b[4], b[5], a * ba);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 124.633544921875, a * 291.9858093261719);
    e.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    e.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    e.closePath();
    db(e, b[4], b[5], a * Os);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113.633544921875, a * 80.98580932617188);
    e.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    e.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    e.closePath();
    db(e, b[ls], b[5], Mq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 202.633544921875, a * 20.985809326171875);
    e.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    e.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    e.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    e.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    e.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    e.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    e.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    e.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    e.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    e.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    e.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    e.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    e.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    e.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    e.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    e.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    e.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    e.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    e.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    e.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    e.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    e.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    e.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    e.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    e.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    e.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    e.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    e.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    e.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    e.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    e.closePath();
    db(e, b[vg], b[3], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203.633544921875, a * 21.985809326171875);
    e.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    e.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    e.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    e.closePath();
    db(e, b[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175.633544921875, a * 25.985809326171875);
    e.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    e.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    e.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    e.closePath();
    db(e, b[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.633544921875, a * 96.98580932617188);
    e.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    e.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    e.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    e.closePath();
    db(e, b[sl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 351.633544921875, a * 99.98580932617188);
    e.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    e.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    e.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    e.closePath();
    db(e, b[Hk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 350.633544921875, a * 302.9858093261719);
    e.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    e.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    e.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    e.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    e.closePath();
    db(e, b[xb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95.633544921875, a * 224.98580932617188);
    e.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    e.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    e.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    e.closePath();
    db(e, b[nq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 195.633544921875, a * 253.98580932617188);
    e.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    e.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    e.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    e.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    e.closePath();
    db(e, b[Js]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 195.633544921875, a * 251.98580932617188);
    e.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    e.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    e.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    e.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    e.closePath();
    db(e, b[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 316, a * 186.8020782470703);
    e.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    e.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    e.closePath();
    db(e, b[pl], b[7], es * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 340, a * 157.8020782470703);
    e.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    e.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    e.closePath();
    db(e, b[6], b[Rr], Fr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349, a * 136.8020782470703);
    e.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    e.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    e.closePath();
    db(e, b[Qa], b[7], a * Mq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 278.75, a * 246.4375);
    e.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    e.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    e.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    e.closePath();
    db(e, b[va], b[jh], nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.75, a * 277.4375);
    e.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    e.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    e.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    e.closePath();
    db(e, b[6], b[7], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 217.75, a * 257.4375);
    e.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    e.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    e.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    e.closePath();
    db(e, b[pl], b[Ar], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 211.75, a * 289.4375);
    e.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    e.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    e.closePath();
    db(e, b[6], b[7], a * Mq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171.75, a * 256.4375);
    e.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    e.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    e.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    e.closePath();
    db(e, b[Na], b[ia], $l * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175.75, a * 289.9375);
    e.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    e.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    e.closePath();
    db(e, b[6], b[Xs], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205.75, a * 314.4375);
    e.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    e.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    e.closePath();
    db(e, b[6], b[7], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 186.75, a * 313.4375);
    e.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    e.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    e.closePath();
    db(e, b[U], b[ur], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.75, a * 244.4375);
    e.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    e.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    e.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    e.closePath();
    db(e, b[Fg], b[N], nl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.75, a * 182.4375);
    e.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    e.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    e.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    e.closePath();
    db(e, b[6], b[7], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44.75, a * 152.4375);
    e.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    e.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    e.closePath();
    db(e, b[Fg], b[7], a * es);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31.75, a * 130.4375);
    e.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    e.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    e.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    e.closePath();
    db(e, b[6], b[7], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69.75, a * 274.4375);
    e.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    e.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    e.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    e.closePath();
    db(e, b[6], b[7], Os * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 165.75, a * 95.4375);
    e.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    e.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    e.closePath();
    db(e, b[6], b[7], Pe * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.75, a * 94.4375);
    e.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    e.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    e.closePath();
    db(e, b[6], b[uh], nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 211.75, a * 68.4375);
    e.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    e.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    e.closePath();
    db(e, b[pl], b[ia], a * Vn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169.75, a * 71.4375);
    e.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    e.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    e.closePath();
    db(e, b[6], b[7], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.75, a * 160.4375);
    e.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    e.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    e.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    e.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    e.closePath();
    db(e, b[8], b[rr], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    e.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    e.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    e.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    e.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    e.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    e.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    e.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    e.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    e.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    e.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    e.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    e.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    e.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    e.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    e.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    e.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    e.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    e.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    e.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    e.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    e.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    e.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    e.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    e.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    e.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    e.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    e.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    e.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    e.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    e.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    e.closePath();
    db(e, b[kk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.1999969482422, a * 173.8125);
    e.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    e.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    e.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    e.closePath();
    db(e, b[ps]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    e.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    e.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    e.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    e.closePath();
    db(e, b[11]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    e.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    e.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    e.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    e.closePath();
    db(e, b[11]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    e.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    e.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    e.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    e.closePath();
    db(e, b[11]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204.1999969482422, a * 201.8125);
    e.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    e.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    e.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    e.closePath();
    db(e, b[d]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    e.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    e.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    e.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    e.closePath();
    db(e, b[At]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    e.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    e.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    e.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    e.closePath();
    db(e, b[11]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    e.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    e.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    e.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    e.closePath();
    db(e, b[ps]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.1999969482422, a * 196.8125);
    e.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    e.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    e.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    e.closePath();
    db(e, b[pt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    e.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    e.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    e.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    e.closePath();
    db(e, b[ps]);
    Tb(e, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    db(e, b[12]);
    Tb(e, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    db(e, b[13]);
    Tb(e, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    db(e, b[F]);
    Tb(e, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    db(e, b[13]);
    return c;
  }
  function yc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    db(d, b[0]);
    return c;
  }
  function wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    db(e, c[Te], c[as], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    db(e, c[3], c[4], Hr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    db(e, c[ll], c[ba], a * yh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    db(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    db(e, c[au], c[Lt], Es * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    db(e, c[1], c[2], Xl * a);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    db(e, c[7], c[He], E * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    db(e, c[Rr], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    db(e, undefined, c[8], Bi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    db(e, cg, c[8], a * br);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    db(e, c[tg], c[zh], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    db(e, c[3], c[4], a * Es);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    db(e, c[Tr], c[4], zj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    db(e, c[Wb], c[4], _a * a);
    return d;
  }
  function Pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    db(e, c[st]);
    e.globalAlpha = Xn;
    e.translate(0, a * -ea);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    yb(e, a * -66.5, a * -65.5, a * 133, a * 131, wa * a);
    e.restore();
    db(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    yb(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    db(e, c[qu], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    db(e, c[4], c[Ll], Qr * a);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    yb(e, -di * a, a * -Lh, a * 28, a * 28, a * 4);
    e.restore();
    db(e, c[1], c[Pn], a * q);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(Hi);
    yb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    db(e, c[Hg], c[Pn], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, ah * a, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    db(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    db(e, c[yh], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    db(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Zt, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * ng, a * 122, a * 18, a * 129);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(Lr, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * Zl, a * 117, a * Yr, a * 109, a * $q, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    db(e, c[4], c[Qu], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    yb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    db(e, c[1], c[2], a * z);
    e.save();
    e.translate(a * 143.5, a * 137);
    yb(e, a * -13.5, a * -14, a * 27, a * 28, a * Pe);
    e.restore();
    db(e, c[1], c[xj], a * 5);
    return d;
  }
  function Ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    yb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    db(e, c[sd], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    db(e, c[yr], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    db(e, undefined, c[5], a * Ds);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    db(e, cg, c[qq], a * eo);
    return d;
  }
  function kc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    db(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    db(d, b[ya]);
    return c;
  }
  function xc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    db(d, b[0]);
    d.globalAlpha = Wl;
    d.translate(a * -15, a * -ng);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    db(d, b[wt], b[Ul], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    db(d, b[qu], b[Tr], a * Hj);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    db(d, b[3], b[3], a * xq);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    db(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    db(d, b[3], b[ut], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    db(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    db(d, b[ll], b[qu], a * eh);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    db(d, undefined, b[lr], ls * a);
    return c;
  }
  function Jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(Da, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * Fg, a * 41, a * 6, a * 33, a * oq, a * 27);
    e.bezierCurveTo(a * 27, a * Xk, a * 28, Bq * a, a * 37, a * Ro);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * Qu, a * 67, jg * a);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    db(e, c[Zj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    db(e, c[Rq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, zh * a, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    db(e, c[eu]);
    e.translate(mj, -sk * a);
    e.globalAlpha = zg;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * pl, a * 41, a * As, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * Fg, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * kq, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    db(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * ar, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    db(e, c[Oq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, Bi * a, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    db(e, c[zs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, Vn * a, a * 57, a * 4, a * 64, wa * a);
    e.closePath();
    db(e, c[lr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    db(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(Eq * a, a * 98, kg * a, a * 89, a * 26, a * 70);
    e.closePath();
    db(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    db(e, c[rs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    db(e, c[2]);
    return d;
  }
  function Mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 496;
    d.height = a * 520;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, Pb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.000030517578125, a * 256.67613983154297);
    e.bezierCurveTo(a * 1.000030517578125, a * 332.67613983154297, a * 23.000030517578125, a * 404.67613983154297, a * 95.00003051757812, a * 463.67613983154297);
    e.bezierCurveTo(a * 128.00003051757812, a * 491.67613983154297, a * 165.00003051757812, a * 507.67613983154297, a * 194.00003051757812, a * 512.676139831543);
    e.bezierCurveTo(a * 280.0000305175781, a * 517.676139831543, a * 291.0000305175781, a * 516.676139831543, a * 342.0000305175781, a * 497.67613983154297);
    e.bezierCurveTo(a * 425.0000305175781, a * 454.67613983154297, a * 469.0000305175781, a * 392.67613983154297, a * 468.0000305175781, a * 300.67613983154297);
    e.bezierCurveTo(a * 408.5000305175781, a * 365.17613983154297, a * 408.5000305175781, a * 365.17613983154297, a * 349.0000305175781, a * 429.67613983154297);
    e.bezierCurveTo(a * 256.0000305175781, a * 473.67613983154297, a * 167.00003051757812, a * 459.67613983154297, a * 78.00003051757812, a * 384.67613983154297);
    e.closePath();
    db(e, c[ig]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    Tb(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    db(e, c[Hh], Gs, a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, gn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.00003051757812, a * 263.4034118652344);
    e.bezierCurveTo(a * 109.00003051757812, a * 160.40341186523438, a * 185.00003051757812, a * 128.40341186523438, a * 222.00003051757812, a * 124.40341186523438);
    e.bezierCurveTo(a * 277.0000305175781, a * 116.40341186523438, a * 339.0000305175781, a * 134.40341186523438, a * 379.0000305175781, a * 195.40341186523438);
    e.bezierCurveTo(a * 409.0000305175781, a * 242.40341186523438, a * 416.0000305175781, a * 256.4034118652344, a * 428.0000305175781, a * 304.4034118652344);
    e.bezierCurveTo(a * 457.0000305175781, a * 203.40341186523438, a * 449.0000305175781, a * 183.40341186523438, a * 438.0000305175781, a * 162.40341186523438);
    e.bezierCurveTo(a * 381.0000305175781, a * 73.40341186523438, a * 360.0000305175781, a * 66.40341186523438, a * 257.0000305175781, a * 46.403411865234375);
    e.bezierCurveTo(a * 191.00003051757812, a * 45.403411865234375, a * 142.00003051757812, a * 65.40341186523438, a * 101.00003051757812, a * 115.40341186523438);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = 1;
    var f = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = $b;
      d.translate(0, a * -Ht);
      Tb(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      db(d, b[Hg], b[Ob], Oh * a);
      d.globalCompositeOperation = "destination-out";
      Tb(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      db(d, b[fl], b[Bb], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(a, c);
    e.drawImage(f, Yh, Da);
    e.translate(0, a * -te);
    Tb(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    db(e, undefined, c[2], a * $g);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    db(e, c[0], c[0], a * Uk);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    db(e, c[qo], c[2], a * $g);
    e.globalAlpha = b ? 0.5 : Te;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    db(e, c[wj], c[Mg], Zr * a);
    e.globalAlpha = 1;
    e.translate(Zj, a * -Zg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    db(e, c[4], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : za;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    db(e, c[0], c[0], a * qs);
    e.globalAlpha = 1;
    e.translate(wg, a * -Fk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    db(e, c[Pe], c[2], Mt * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    db(e, c[Bb], c[0], a * gr);
    e.globalAlpha = 1;
    e.translate(Rq, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    db(e, c[gl], c[2], F * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Lr, hl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    db(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    db(e, c[tb], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Ih, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    db(e, c[ya], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(ya, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    db(e, c[xb], c[It], a * 12);
    e.globalAlpha = b ? 0.5 : gs;
    e.translate(Rq, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    db(e, c[0], c[0], a * 12);
    e.globalAlpha = au;
    e.translate(0, a * -z);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    db(e, c[4], c[xq], a * 12);
    e.globalAlpha = b ? 0.5 : gs;
    e.translate(Lr, a * Qr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    db(e, c[0], c[Qs], $a * a);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    db(e, c[4], c[lr], a * Cl);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(st, Ll * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    db(e, c[0], c[Zj], a * yg);
    e.globalAlpha = 1;
    e.translate(0, -Ll * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    db(e, c[Ng], c[pq], a * Zr);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Rq, a * Ig);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    db(e, c[0], c[wg], Mt * a);
    e.globalAlpha = 1;
    e.translate(ya, -Ll * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    db(e, c[4], c[eh], a * F);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, Ll * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    db(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(Hi, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    db(e, c[ut], c[2], Zr * a);
    e.globalAlpha = b ? 0.5 : Te;
    e.translate(eu, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    db(e, c[Ih], c[0], a * qs);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    db(e, c[4], c[xj], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Mg, ib * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    db(e, c[0], c[wg], a * Sj);
    e.globalAlpha = 1;
    e.translate(Mg, a * -M);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    db(e, c[4], c[2], da * a);
    e.globalAlpha = b ? 0.5 : Xn;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    db(e, c[Lr], c[0], La * a);
    e.globalAlpha = 1;
    e.translate(mj, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    db(e, c[ls], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    db(e, c[0], c[0], a * 12);
    e.globalAlpha = Xn;
    e.translate(In, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    db(e, c[qo], c[2], Sj * a);
    e.globalAlpha = b ? 0.5 : og;
    e.translate(Bb, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    db(e, c[0], c[0], a * F);
    e.globalAlpha = 1;
    e.translate(0, -mb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    db(e, c[Wg], c[Ul], a * da);
    return d;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : zg;
    e.translate(Yh, a * Pb);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    yb(e, a * -67, a * -16.5, a * 134, a * 33, Ot * a);
    e.restore();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    db(e, c[st]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    db(e, c[Bb]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    yb(e, a * -73, a * -20.5, a * 146, a * 41, a * mb);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(os, -zl * a);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    yb(e, a * -67, a * -16.5, a * 134, a * 33, a * hl);
    e.restore();
    db(e, c[gs], c[Vh], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    db(e, c[1], c[Ul], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    db(e, c[1], c[lr], a * Gi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    db(e, c[mk], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    yb(e, a * -73, a * -20.5, a * 146, a * 41, a * Oj);
    e.restore();
    db(e, c[1], c[Ug], Wg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    db(e, c[Wb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    db(e, c[I]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    db(e, c[Hk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    db(e, c[Tt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    db(e, c[Hk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    db(e, c[xj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    db(e, c[eh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    db(e, c[Hj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    db(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    db(e, c[Ug]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    db(e, c[2]);
    return d;
  }
  function Dc(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 170;
    e.height = a * 200;
    f.translate(a * 5, a * Ga);
    if (d == 1) {
      f.translate(Lr, a * -Hh);
      Tb(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
      db(f, c[1], c[ta], a * qr);
      Tb(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
      db(f, c[hb], c[Qr], a * qr);
      f.save();
      f.translate(a * 77.00003051757812, a * 31.267044067382812);
      yb(f, -Bq * a, a * -12.5, Uk * a, a * 25, Zk * a);
      f.restore();
      db(f, c[Oq], c[5], a * qr);
      f.save();
      f.translate(a * 77.00003051757812, a * 13.267044067382812);
      yb(f, -Qh * a, a * -10.5, a * 30, a * 21, a * 10);
      f.restore();
      db(f, c[gs], c[5], A * a);
    }
    Tb(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
    db(f, c[zs], c[2], a * wk);
    Tb(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
    db(f, c[1], c[2], a * Rr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 18.000030517578125, a * 105.85795593261719);
    f.bezierCurveTo(a * 134.00003051757812, a * 104.85795593261719, a * 77.00003051757812, a * 104.85795593261719, a * 136.00003051757812, a * 103.85795593261719);
    f.closePath();
    db(f, c[1], c[xj], a * qk);
    Tb(f, a * 77.00003051757812, a * 104.6761474609375, a * 32.55764119219941);
    db(f, c[$b], c[rs], a * Gk);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 112.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 62.03977966308594);
    f.closePath();
    db(f, c[3], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 48.03977966308594);
    f.bezierCurveTo(a * 82.00003051757812, a * 55.53977966308594, a * 82.00003051757812, a * 55.53977966308594, a * 86.00003051757812, a * 63.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 63.03977966308594, a * 78.00003051757812, a * 63.03977966308594, a * 70.00003051757812, a * 63.03977966308594);
    f.closePath();
    db(f, c[ci], c[Ul], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80.00003051757812, a * 111.6761474609375);
    f.bezierCurveTo(a * 95.00003051757812, a * 97.1761474609375, a * 95.00003051757812, a * 97.1761474609375, a * 110.00003051757812, a * 82.6761474609375);
    f.closePath();
    db(f, c[ci], c[H], On * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107.00003051757812, a * 76.6761474609375);
    f.bezierCurveTo(a * 111.50003051757812, a * 82.6761474609375, a * 111.50003051757812, a * 82.6761474609375, a * 116.00003051757812, a * 88.6761474609375);
    f.bezierCurveTo(a * 118.50003051757812, a * 81.6761474609375, a * 118.50003051757812, a * 81.6761474609375, a * 121.00003051757812, a * 74.6761474609375);
    f.closePath();
    db(f, c[qo], c[vg], Os * a);
    Tb(f, a * 77.00003051757812, a * 105.03977966308594, a * 15.556349186104045);
    db(f, c[3], c[Ob], a * Mq);
    f.save();
    f.translate(a * 77.00003051757812, a * 31.267044067382812);
    f.rotate(0);
    yb(f, -As * a, a * -12.5, a * Mt, a * 25, a * 10);
    f.restore();
    db(f, c[1], c[2], Aq * a);
    f.save();
    f.translate(a * 77.00003051757812, a * 13.267044067382812);
    f.rotate(0);
    yb(f, a * -15, a * -10.5, a * 30, a * 21, a * 10);
    f.restore();
    db(f, c[hb], c[xj], jh * a);
    return e;
  }
  function Ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    Tb(e, a * 69, a * 64, a * 48.16637831516918);
    db(e, c[1]);
    e.globalAlpha = 0.7;
    Tb(e, a * 69, a * 64, a * 38.23105625617661);
    db(e, c[2]);
    e.globalAlpha = 0.7;
    Tb(e, a * 69, a * 64, a * 32.01562118716424);
    db(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    db(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    db(e, c[ub]);
    return d;
  }
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, Mq * a);
    if (os === Ft) {
      e.globalAlpha = b ? 0.5 : og;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      Cb(e, $o, a * 41, Zk * a);
      e.restore();
      db(e, c[Yh]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    Cb(e, dl, a * 41, zl * a);
    db(e, c[og], c[Pn], a * 4);
    e.rotate(-0.32);
    Cb(e, Lo, a * 32, sk * a);
    db(e, c[ci], c[4], a * 4);
    e.rotate(0.68);
    Cb(e, 9, a * 23, a * 8);
    db(e, c[5], c[6], Bq * a);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(wg);
    yb(e, a * -gg, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    db(e, c[$i], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    yb(e, a * -26, -Ns * a, a * 52, a * 18, a * 30);
    e.restore();
    db(e, c[4], c[4], a * jk);
    Tb(e, a * 45, a * 29, a * 7);
    db(e, c[z]);
    Tb(e, a * 45, a * 61, a * uh);
    db(e, c[5]);
    Tb(e, a * 28, a * 45, a * Ar);
    db(e, c[5]);
    Tb(e, a * 62, a * 45, a * 7);
    db(e, c[5]);
    return d;
  }
  function Sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    db(e, c[Yh], c[Oq], a * gr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    db(e, j, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    db(e, c[2], c[Tt], da * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    db(e, c[Ul], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    db(e, c[lr], c[yr], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    db(e, c[2], c[3], a * 12);
    return d;
  }
  function Qc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    yb(d, -fg * a, a * -20, a * Lh, a * 39, ws * a);
    d.restore();
    db(d, b[0]);
    d.globalAlpha = sd;
    d.save();
    d.translate(a * 37, a * 94);
    yb(d, a * -7, a * -20, a * po, a * 37, Dl * a);
    d.restore();
    db(d, b[xq]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    yb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    db(d, b[os], b[0], a * Dr);
    d.globalAlpha = ie;
    d.save();
    d.translate(a * 131, a * 94);
    yb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    db(d, b[as], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    yb(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    db(d, b[3], b[1], a * Hr);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    yb(d, a * -30.5, a * -58.5, a * 61, a * 117, qr * a);
    d.restore();
    db(d, b[3], b[gl], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    yb(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    db(d, b[3], b[4], a * ji);
    d.save();
    d.translate(a * 130.5, a * 94);
    yb(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    db(d, b[3], b[Vh], a * Jl);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    yb(d, a * -83, a * -gr, a * 160, a * 24, a * In);
    d.restore();
    db(d, b[wg]);
    d.globalAlpha = sd;
    d.save();
    d.translate(a * 133, a * 92);
    yb(d, a * -83, -Xi * a, a * 160, a * 24, a * 0);
    d.restore();
    db(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    yb(d, a * -5, a * -18.5, a * vr, a * 37, a * A);
    d.restore();
    db(d, b[Ih]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    yb(d, a * -5, a * -18.5, a * 10, a * 37, a * nh);
    d.restore();
    db(d, b[pq]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    yb(d, a * -22.5, a * -6.5, a * 45, D * a, Ok * a);
    d.restore();
    db(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    yb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    db(d, b[Lt]);
    return c;
  }
  function _c(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    yb(e, Ra * b, b * Yr, b * 110, b * 90, b * 10);
    db(e, c[0]);
    yb(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    db(e, c[1], c[2], b * 4);
    var h = wb(-Math.PI / Zg, Eu(b * 0.5, Gj, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(h, b * 12, b * Pj);
    h = wb(Math.PI / 4, oc(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(h, b * 36, b * 16);
    return d;
  }
  function Fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : Gh;
    e.translate(a * J, Fk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    db(e, c[0], c[Ih], oq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    db(e, c[In], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    db(e, c[Hi], c[0], a * Yr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    db(e, c[Mg], c[In], qs * a);
    e.globalAlpha = 1;
    e.translate(-kk * a, a * -Ll);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    db(e, c[sd], c[jk], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    db(e, c[xb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    db(e, c[Mq]);
    Tb(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    db(e, c[Fs]);
    Tb(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    db(e, c[Ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    db(e, c[7], c[Jl], a * gr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    db(e, c[tg], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    db(e, c[7], c[8], a * Sj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    db(e, cn, c[9], a * Ro);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    db(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    db(e, lj, c[se], pl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    db(e, undefined, c[9], a * $l);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    db(e, cb, c[9], a * sl);
    return d;
  }
  function Rc(a, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 81;
    e.height = a * 77;
    f.translate(Bb, a * Ht);
    f.scale(0.2, 0.2);
    f.translate(mj, a * -30);
    if (d == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 36.5, a * 278.0625);
      f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      f.closePath();
      db(f, c[0], c[3], a * 50);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36.5, a * 278.0625);
    f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    f.closePath();
    db(f, c[0], c[1], a * Jj);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 214.5, a * 124.0625);
    f.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    f.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    f.closePath();
    db(f, c[0], c[pu], bn * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157.5, a * 145.0625);
    f.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    f.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    f.closePath();
    db(f, c[ig], c[1], a * Nb);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 103.5, a * 169.0625);
    f.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    f.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    f.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    f.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    f.closePath();
    db(f, c[jk], c[1], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 194.5, a * 313.0625);
    f.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    f.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    f.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    f.closePath();
    db(f, c[Hg]);
    f.scale(3, eg);
    f.translate(15, a * 10);
    if (mk == d) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 4, a * 32);
      f.bezierCurveTo(a * 19, a * 25, b * a, a * 25, a * 34, a * 18);
      f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      f.bezierCurveTo(a * 59.5, a * 20, a * 59.5, Xa * a, a * 70, ra * a);
      db(f, T, c[yr], a * 28);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 56, a * pl);
      f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      f.closePath();
      db(f, c[3], c[eg], a * 28);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(Mq * a, a * 32);
    f.bezierCurveTo(Be * a, a * 25, a * rb, a * 25, a * 34, a * 18);
    f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    f.bezierCurveTo(a * 59.5, a * ws, a * 59.5, Xa * a, a * 70, a * 11);
    db(f, undefined, c[1], a * Eg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * Rs);
    f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    f.closePath();
    db(f, c[pu], c[ie], a * 17);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 4, a * 32);
    f.bezierCurveTo(a * rb, a * 25, ha * a, a * 25, a * 34, a * Rg);
    f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    f.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, kb * a);
    db(f, undefined, c[Hj], a * wa);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 6);
    f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * Hj);
    f.closePath();
    db(f, c[Lt], c[2], a * 10);
    return e;
  }
  function Gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : pu;
    e.translate(0, a * jn);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    yb(e, a * -4, a * -76.5, zh * a, a * 163, a * 10);
    e.restore();
    db(e, c[0]);
    e.translate(Da, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, lg * a);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * p, a * 38.5, a * 16, a * 38.5, a * ra, a * 41);
    e.closePath();
    db(e, c[Lr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * Rg, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, ur * a, a * 36);
    e.closePath();
    db(e, c[Zj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(hh * a, a * 171.5, rh * a, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * Zt, a * 160.5, a * 15, a * 149);
    e.closePath();
    db(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, Ro * a);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    db(e, c[wj]);
    e.translate(0, -ml * a);
    e.globalAlpha = 1;
    e.translate(eu, a * 10);
    e.translate(-ib * a, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    yb(e, -ba * a, a * -76.5, a * 8, a * 163, a * Cs);
    e.restore();
    db(e, c[$b], c[2], a * 4);
    e.translate(0, Ra * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(sr * a, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    db(e, c[3], c[nl], Ls * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * Wl);
    e.bezierCurveTo(a * 28, a * io, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    db(e, c[5], c[As], a * 4);
    e.translate(st, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * Ds, a * 160.5, a * zi, a * 149);
    e.closePath();
    db(e, c[sd], c[pq], a * Ng);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, Qa * a);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    db(e, c[8]);
    return d;
  }
  function jc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    db(d, b[0]);
    return c;
  }
  function Lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    yb(e, a * -ng, a * -216.5, a * 30, a * 433, Pb * a);
    e.restore();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    db(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    db(e, c[Da]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    db(e, c[0]);
    e.translate(a * -20, a * -ml);
    e.globalAlpha = pu;
    e.save();
    e.translate(a * 45, a * 384.5);
    yb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    db(e, c[Te], c[Pn], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * mg, a * 607, a * 27, a * 573);
    e.closePath();
    db(e, c[3], c[Ct], a * aa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    db(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * hr, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    db(e, c[fn], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    db(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    db(e, c[Vl], c[ia], a * On);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    db(e, c[8]);
    return d;
  }
  function Wc(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 198;
    e.height = a * 147;
    f.globalAlpha = b ? 0.5 : Oq;
    f.translate(0, a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 76);
    f.bezierCurveTo(a * 50, a * 82, a * 50, a * 82, a * 56, a * 88);
    f.bezierCurveTo(a * 59, a * 82, a * 59, a * 82, a * 62, a * 76);
    f.bezierCurveTo(a * 59, a * 71, a * 59, a * 71, a * 56, a * 66);
    f.bezierCurveTo(a * 59, a * 69, a * 59, a * 69, a * 62, a * 72);
    f.bezierCurveTo(a * 80, a * 48, a * 102, a * 50, a * 120, a * 62);
    f.bezierCurveTo(a * 127, a * 58, a * 127, a * 58, a * 134, a * 54);
    f.bezierCurveTo(a * 129, a * 60, a * 129, a * 60, a * 124, a * 66);
    f.bezierCurveTo(a * 129, a * 73, a * 129, a * 73, a * 134, a * 80);
    f.bezierCurveTo(a * 140, a * 74, a * 140, a * 74, a * 146, a * 68);
    f.bezierCurveTo(a * 142, a * 76, a * 142, a * 76, a * 138, a * 84);
    f.bezierCurveTo(a * 144, a * 90, a * 142, a * 90, a * 144, a * 90);
    f.bezierCurveTo(a * 136, a * 97, a * 136, a * 97, a * 128, a * 104);
    f.bezierCurveTo(a * 154, a * 110, a * 164, a * 90, a * 160, a * 80);
    f.bezierCurveTo(a * 138, a * 22, a * 148, a * 51, a * 136, a * 22);
    f.bezierCurveTo(a * 97, a * 24, a * 97, a * 24, a * 58, a * 26);
    f.bezierCurveTo(a * 47, a * 54, a * 36, a * 80, a * 36, a * 82);
    f.bezierCurveTo(a * 40, a * 108, a * 54, a * 104, a * 62, a * 104);
    f.bezierCurveTo(a * 46, a * 92, a * 54, a * 97, a * 46, a * 90);
    f.closePath();
    db(f, c[Lr]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, a * 100);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, a * 100, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, a * Nn);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    db(f, c[0]);
    f.globalAlpha = Hg;
    f.translate(mj, a * -6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, a * Nn);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, a * 100, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, a * Ph);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    db(f, c[mk], c[2], a * tb);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 98);
    f.bezierCurveTo(a * 96.5, a * 98, a * 96.5, a * 98, a * 144, a * 98);
    f.bezierCurveTo(a * 136.5, a * 102, a * 136.5, a * 102, a * 129, a * 106);
    f.bezierCurveTo(a * 103, a * 105.5, a * 103, a * 105.5, a * 77, a * 105);
    f.bezierCurveTo(a * 65, a * 105, a * 65, a * 105, a * 53, a * 105);
    f.closePath();
    db(f, c[1]);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 54, a * 98);
    f.bezierCurveTo(a * 97, a * 98, a * 97, a * 98, a * 140, a * 98);
    f.bezierCurveTo(a * 134, a * 101, a * 134, a * 101, a * 128, a * 104);
    f.bezierCurveTo(a * 92, a * 104, a * 92, a * 104, a * 56, a * 104);
    f.closePath();
    db(f, c[0]);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 47);
    f.bezierCurveTo(a * 124.5, a * 43.5, a * 124.5, a * 43.5, a * 131, a * 40);
    f.bezierCurveTo(a * 128, a * 46, a * 128, a * 46, a * 125, a * 52);
    f.bezierCurveTo(a * 131, a * 57, a * 135, a * 64, a * 139, a * 73);
    f.bezierCurveTo(a * 142.5, a * 69.5, a * 142.5, a * 69.5, a * 146, a * 66);
    f.bezierCurveTo(a * 143.5, a * 72.5, a * 143.5, a * 72.5, a * 141, a * 79);
    f.bezierCurveTo(a * 142, a * 91, a * 141, a * 94, a * 132, a * 98);
    f.bezierCurveTo(a * 117, a * 102, a * 126, a * 108, a * 142, a * 102);
    f.bezierCurveTo(a * 159, a * 98, a * 164, a * 80, a * 162, a * 47);
    f.bezierCurveTo(a * 160, Ps * a, a * 150, a * Th, a * 117, a * 4);
    f.bezierCurveTo(a * 44, eu * a, a * 35, a * 20, a * 33, a * 37);
    f.bezierCurveTo(a * 29, a * 69, a * 33, a * 88, a * 44, a * 96);
    f.bezierCurveTo(a * 64, a * 107, a * 70, a * 102, a * 54, a * 93);
    f.bezierCurveTo(a * 49, a * 88, a * 50, a * 82, a * 53, a * 77);
    f.bezierCurveTo(a * 51.5, a * 71, a * 51.5, a * 71, a * 50, a * 65);
    f.bezierCurveTo(a * 53, a * 68.5, a * 53, a * 68.5, a * 56, a * 72);
    f.bezierCurveTo(a * 59, a * 67.5, a * 59, a * 67.5, a * 62, a * 63);
    f.bezierCurveTo(a * 60.5, a * 59.5, a * 60.5, a * 59.5, a * 59, a * 56);
    f.bezierCurveTo(a * 62, a * 57, a * 62, a * 57, a * 65, a * 58);
    f.bezierCurveTo(a * 78, a * 35, a * 103, a * 36, a * 117, a * 47);
    f.closePath();
    db(f, c[hb], c[pq], a * ji);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 62, a * 21);
    f.bezierCurveTo(a * 63, a * 34, a * 64, a * 37, a * 66, a * 40);
    f.bezierCurveTo(a * 54, a * 49, a * 53, a * 51, a * 48, a * 58);
    f.bezierCurveTo(a * 44, a * 51, a * 42, a * 43, a * 40, a * 36);
    f.bezierCurveTo(a * 47, a * 28, a * 52, a * 25, a * 61, a * 21);
    f.closePath();
    db(f, c[4]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60, a * 29);
    f.bezierCurveTo(a * 62, a * 25, a * 65, a * 24, a * 70, a * 23);
    db(f, undefined, c[Wb], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 61, a * 37);
    f.bezierCurveTo(a * 63, a * 32, a * 66, a * 32, a * 71, a * 32);
    db(f, undefined, c[3], a * Ct);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 31);
    f.bezierCurveTo(a * 50, a * 26, a * 50, a * 25, a * 51, a * 23);
    db(f, undefined, c[nq], a * nl);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 35);
    f.bezierCurveTo(a * 44, a * 31, a * 43, a * 29, a * 45, a * 26);
    db(f, Og, c[Js], Os * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 44);
    f.bezierCurveTo(a * 57, a * 48, a * 57, a * 50, a * 60, a * 52);
    db(f, Hq, c[ut], a * Fr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 48);
    f.bezierCurveTo(a * 52, a * 52, a * 52, a * 54, a * 55, a * 57);
    db(f, undefined, c[yr], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 41);
    f.bezierCurveTo(a * 41, a * 42, a * 39, a * 45, a * 38, a * 48);
    db(f, undefined, c[fn], Gi * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 48, a * 48);
    f.bezierCurveTo(a * 42, a * 51, a * 42, a * 53, a * 40, a * 55);
    db(f, undefined, c[3], Vn * a);
    if (d == 0) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 99, a * 101);
      f.bezierCurveTo(a * 118.6666259765625, a * 104.33331298828125, a * 124.6666259765625, a * 116.33331298828125, a * 112.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 104.6666259765625, a * 112.33331298828125, a * 100.6666259765625, a * 105.33331298828125, a * 99.6666259765625, a * 101.33331298828125);
      db(f, undefined, c[kq], va * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 97.6666259765625, a * 101.33331298828125);
      f.bezierCurveTo(a * 81.6666259765625, a * 106.33331298828125, a * 79.6666259765625, a * 114.33331298828125, a * 89.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 95.6666259765625, a * 111.33331298828125, a * 95.6666259765625, a * 109.33331298828125, a * 98.6666259765625, a * 102.33331298828125);
      db(f, lj, c[5], a * Th);
    } else {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 120, a * 106.39999389648438, a * 118, a * 107.39999389648438, a * 120, a * 111.39999389648438);
      db(f, Gs, c[ta], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 90, a * 103.39999389648438, a * 89, a * 106.39999389648438, a * 87, a * 112.39999389648438);
      db(f, lj, c[Fk], a * 6);
      Tb(f, a * 86, a * 114.39999389648438, a * 4.5);
      db(f, c[zg], c[5], a * 6);
      Tb(f, a * 121, a * 114.39999389648438, a * 4.5);
      db(f, c[ie], c[nr], a * Bq);
    }
    return e;
  }
  function Oc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 170;
    var i = b * 172;
    var a = g / lr;
    var j = i / 2;
    e.width = g;
    e.height = i;
    f.translate(a, j + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    Tb(f, Mg, 0, b * 60);
    db(f, d[Mg]);
    f.globalAlpha = 1;
    f.translate(ya, b * -7);
    f.save();
    for (var h = 0; J > h; h++) {
      f.rotate(Math.PI / hl);
      f.save();
      f.translate(b * 65, ya);
      Cb(f, 3, A * b, Os * b);
      db(f, d[Te], d[2], b * 4);
      f.restore();
    }
    f.restore();
    Tb(f, Zj, 0, b * 60);
    db(f, d[ub], d[4], b * Ng);
    Tb(f, In, st, b * 40);
    db(f, d[Zg]);
    Tb(f, 0, Da, b * 25);
    db(f, d[ji], d[7], b * Xl);
    return e;
  }
  function Nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : Te;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Cb(e, 6, a * 146, a * 30);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = zg;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Cb(e, 6, a * 146, a * 30);
    e.restore();
    db(e, c[1], c[pq], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Cb(e, 6, a * 105, a * 30);
    e.restore();
    db(e, c[fn], c[3], Es * a);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(Mg);
    Cb(e, Ro, a * 66, a * 30);
    e.restore();
    db(e, c[nj], c[jk], a * E);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Cb(e, 6, a * 31, a * 30);
    e.restore();
    db(e, c[Zg], c[Ya], a * Bi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    db(e, undefined, c[Lt], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, _j * a);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    db(e, undefined, c[2], Iq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * sa);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    db(e, Og, c[eh], a * He);
    return d;
  }
  function qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, _o * a, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, vn * a, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      db(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * Sg, a * 60, Sg * a, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    db(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * $q, a * 325, Ik * a, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    db(e, b[2], b[Hk], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, br * a, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, Hs * a, a * 188, a * 308);
    e.closePath();
    db(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    db(e, b[Tr], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    db(e, b[Lt], b[ub], gr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    db(e, b[3], b[3], Ka * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    db(e, b[2], b[3], Sl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    db(e, b[2], b[Tt], a * $a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    db(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    db(e, b[2], b[3], qs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    db(e, b[H], b[3], a * Yr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    db(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    db(e, b[3], b[xb], a * 12);
    return d;
  }
  function Hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(z * a, q * a);
    Tb(e, a * 220, a * 201, a * 170.41713528867922);
    db(e, c[0], c[st], a * Qa);
    e.globalAlpha = zs;
    e.translate(-Hh * a, -ib * a);
    Tb(e, a * 220, a * 201, a * 170.41713528867922);
    db(e, c[Tl], c[H], a * 6);
    Tb(e, a * 220, a * 201, a * 130);
    db(e, c[ra], c[pq], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    db(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    db(e, c[5], c[6], a * Wg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    db(e, c[ib], c[As], a * $i);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    db(e, c[5], c[6], tb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    db(e, c[M], c[Fg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    db(e, c[Ig], c[Ql], nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    db(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    db(e, c[Lb], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    db(e, c[Ra], c[10], tb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    db(e, c[Zk], c[jn], a * Fr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    db(e, undefined, c[Ro], a * nk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    db(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    db(e, wr, c[ks], ks * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    db(e, Jo, c[6], Ya * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    db(e, undefined, c[6], ji * a);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    db(e, xg, c[Xk], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    db(e, cg, c[pl], Ro * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    db(e, Gs, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    db(e, j, c[6], qq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * eq, a * 216, a * 307);
    e.closePath();
    db(e, undefined, c[Ya], a * U);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    db(e, cg, c[6], a * Ro);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    db(e, T, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    db(e, xg, c[6], a * Bq);
    Tb(e, a * 222, a * 199, a * 120.74767078498864);
    db(e, undefined, c[3], a * 40);
    Tb(e, a * 220, a * 200, a * 95.44108130150245);
    db(e, undefined, c[2], a * 15);
    Tb(e, a * 220, a * 201, a * 85);
    db(e, undefined, c[4], wa * a);
    e.globalAlpha = 0.5;
    Tb(e, a * 220, a * 201, a * 82);
    db(e, c[Lo]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(M * a, a * 5);
    Tb(e, a * 63, a * 136, a * 49.193495504995376);
    db(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -nr, -hl * a);
    Tb(e, a * 63, a * 136, a * 49.193495504995376);
    db(e, c[8], c[2], a * ls);
    Tb(e, a * 63, a * 137, a * 25.632011235952593);
    db(e, c[Aq], c[Ug], a * Fr);
    return d;
  }
  function Uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, os);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    db(e, c[Yh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -za, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(ie * a, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    db(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    yb(e, -Ar * a, -tb * a, a * 14, a * 8, a * Pb);
    e.restore();
    db(e, c[Zj]);
    e.translate(a * 0, mj);
    e.globalAlpha = 1;
    e.translate(Yg * a, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    db(e, c[qo], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -ie, Yh);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    db(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * Wl, ig);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    db(e, c[gs], c[2], fn * a);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(fl);
    yb(e, a * -Cg, a * -4, a * 14, a * zj, a * 10);
    e.restore();
    db(e, c[Oq], c[2], a * 3);
    return d;
  }
  function Yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 120;
    d.height = a * 100;
    yb(e, a * 10, a * 10, a * 95, a * 80, a * 10);
    db(e, b[2]);
    yb(e, a * 10, Hh * a, a * 95, a * 80, jn * a);
    db(e, b[Tr], b[$i], a * 4);
    if (Ih == c) {
      var f = gd(a * 0.75, b, 0);
      e.drawImage(f, a * 22, a * 18);
    } else if (c == ie) {
      f = gd(a * 0.75, b, 1);
      e.drawImage(f, a * 22, a * 18);
    }
    return d;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : Tl;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    Cb(e, gg, a * 60, a * 10);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    Cb(e, dl, a * 60, a * Pb);
    db(e, c[1], c[eh], Ng);
    e.rotate(-0.32);
    Cb(e, 9, a * 38, a * Cs);
    db(e, c[3], c[$i], 4);
    e.rotate(0.68);
    Cb(e, 9, wq * a, Iq * a);
    db(e, c[Zg], c[Ql], 6);
    e.restore();
    return d;
  }
  function cc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = Nn * a;
    d.scale(0.5, 0.5);
    d.translate(10, zi);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, Cl * a, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    db(d, b[Hi]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * gn, a * 83, nl * a, a * 87);
    db(d, cg, b[eu], a * Yg);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, kq * a);
    d.bezierCurveTo(so * a, a * 30, a * Ka, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * ks);
    d.closePath();
    db(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, Bo * a, a * 83, tb * a, a * 87);
    db(d, Hq, b[xq], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    db(d, undefined, b[Rl], Jl * a);
    return c;
  }
  function Vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : pu;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    Cb(e, Cg, a * 60, a * 10);
    e.restore();
    db(e, c[In]);
    e.globalAlpha = gs;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    Cb(e, Ni, a * 60, Cs * a);
    db(e, c[sd], c[as], 4);
    e.rotate(0.64);
    Cb(e, Ar, a * 40, a * wa);
    db(e, c[3], c[4], 4);
    e.rotate(0.12);
    Cb(e, Ni, a * 23, a * 5);
    e.restore();
    db(e, c[5]);
    return d;
  }
  function Zc(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    Tb(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    db(d, El, c[2], tb * a);
    Tb(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    db(d, Jo, c[ie], a * 4);
    Tb(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    db(d, rk, c[1], Ng * a);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(Yh);
    yb(d, a * -21.5, a * -19, a * 43, a * 38, Ch * a);
    d.restore();
    db(d, c[Hj], c[zs], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    Cb(d, Tr, a * 8.06225774829855, a * 0);
    d.restore();
    db(d, c[I]);
    Tb(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    db(d, c[Js]);
    return e;
  }
  function Xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : Tl;
    e.translate(a * 5, a * Eq);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    yb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    db(e, c[Xn], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    db(e, c[0], c[0], a * As);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    db(e, c[Lr], c[0], a * Qa);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    yb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    db(e, c[0], c[Da], U * a);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    yb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    db(e, c[In], c[0], a * Bq);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    yb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    db(e, c[Mg], c[os], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    yb(e, a * -x, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    db(e, c[Ih], c[0], Ya * a);
    Tb(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    db(e, c[Hi], c[fl], ji * a);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    db(e, c[3], c[4], Xk * a);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    yb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    db(e, c[sd], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    db(e, c[1], c[2], a * ji);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    yb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    db(e, c[5], c[ba], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    yb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    db(e, c[xb], c[Ct], a * Ro);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    yb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    db(e, c[6], c[Ct], va * a);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    yb(e, -sa * a, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    db(e, c[Nl], c[E], a * pl);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    yb(e, a * -_j, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    db(e, c[Aq], c[js], a * 6);
    e.globalAlpha = ie;
    e.save();
    Tb(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    db(e, c[fn], c[Os], a * 6);
    e.restore();
    return d;
  }
  function $c(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * aa);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * On, a * 50);
    d.bezierCurveTo(a * 15, a * Fo, a * 49, Vl * a, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, Dg * a, a * 50);
    d.closePath();
    db(d, b[Qs]);
    d.translate(0, a * -br);
    d.globalAlpha = Te;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(br * a, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * Ya, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * ut, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(Ul * a, a * 127, a * fn, a * 87, aa * a, a * 50);
    d.closePath();
    db(d, b[Gh], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    db(d, b[1], b[Vh], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    db(d, b[Hg], b[Ob], Ct * a);
    Tb(d, a * 51, a * 91, a * 9);
    db(d, b[Tr]);
    Tb(d, a * 95, a * 91, a * ob);
    db(d, b[Tr]);
    Tb(d, a * 91, a * 89, a * Vn);
    db(d, b[4]);
    Tb(d, a * 47, a * 89, Ls * a);
    db(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    db(d, b[ib]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    db(d, b[ks]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    db(d, undefined, b[6], Ul * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(Jj * a, a * 58);
    d.bezierCurveTo(jn * a, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    db(d, b[Na]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * Ak, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    db(d, b[ks]);
    return c;
  }
  function em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : $b;
    e.translate(0, a * Ll);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * Zl, a * 84.640625, R * a, a * 86.640625, Aq * a, a * 78.640625);
    e.bezierCurveTo(Ck * a, a * 69.640625, zi * a, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    db(e, c[Lr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * Es, a * 83.640625, a * Cs, a * 84.640625);
    e.closePath();
    db(e, c[Bb]);
    e.globalAlpha = 1;
    e.translate(0, -Oj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Iq * a, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * Vr, a * 73.640625);
    e.closePath();
    db(e, c[1], c[Ul], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    db(e, c[sl], c[xq], $i * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    db(e, xg, c[H], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(Ph * a, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    db(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, dl * a, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * Xk, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    db(e, c[3], c[4], a * tb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * zj, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, wa * a, a * 84.640625);
    e.closePath();
    db(e, c[xb], c[Pe], a * 4);
    return d;
  }
  function im(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      db(d, b[0]);
    } else if (c == ie) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      db(d, b[Zj]);
    } else if (c == xq) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      db(d, b[0]);
    }
    return e;
  }
  function tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    yb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    db(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    yb(e, a * -57.5, a * -54.5, a * 115, a * 109, ul * a);
    e.restore();
    db(e, undefined, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    yb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    db(e, c[wg]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    yb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    db(e, undefined, c[wt], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    db(e, Og, c[1], a * 10);
    return d;
  }
  function nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : ie;
    e.translate(a * 5, Fs * a);
    e.save();
    yb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    db(e, c[eu]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -Yq);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    db(e, c[Zj]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    yb(e, a * 33, a * 53, Ra * a, a * 98, a * 10);
    db(e, c[za], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -lh);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    db(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(wg * a, a * og);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    db(e, c[Hh]);
    e.restore();
    return d;
  }
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * V, a * -zj);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * Ph, a * 93, a * Ph, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    db(e, c[Os], c[M], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, Ct * a);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, sa * a, a * 93, sa * a, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    db(e, c[4], c[Eq], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * Ls);
    e.save();
    e.translate(a * Nn, a * 73.06874084472656);
    e.rotate(Rq);
    yb(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    db(e, c[Xn], c[2], a * 4);
    e.save();
    e.translate(ns * a, a * 71.36874389648438);
    e.rotate(wg);
    yb(e, a * -60.5, -Vq * a, a * 121, a * 30, a * 20);
    e.restore();
    db(e, c[3], c[jk], $i * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * Ph, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * vh, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    db(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    db(e, c[vg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, Ak * a, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    db(e, c[Ls], c[Zg], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    db(e, c[3], c[H], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    db(e, c[3], c[2], nl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    db(e, c[3], c[2], nl * a);
    e.scale(0.5, 0.5);
    e.translate(Ak * a, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    db(e, c[Na], c[lr], a * 4);
    return d;
  }
  function rm() {
    new Date().getTime();
    function a(a) {
      var b = 0;
      var c = ya;
      for (var d = 0; a.length > d; d++) {
        var e = a.charAt(d);
        if (e !== "_" && d !== Eq) {
          if (e === "1") {
            b += Math.pow(2, c);
          }
          c++;
        }
      }
      return b;
    }
    ᐃⵠᐃᐃⲆⲆᐃᐃᐃ();
    ΔΔ[1026] = [Ⲇⵠ.ⲆΔΔΔΔⵠΔ, Ⲇⵠ.ⵠⲆΔⲆⵠΔⵠ];
    ΔΔ[1025] = [];
    ΔΔ[1025][Xr.ⲆᐃΔ] = [];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_010_000")] = [Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ΔⵠⵠᐃΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_010_010")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("000_010_000")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_011_000")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("000_010_000")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_011_010")] = [Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_011_011")] = [Ⲇⵠ.ⵠᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_110_000")] = [Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⵠⵠᐃΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_110_010")] = [Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ΔⲆΔⵠΔᐃⵠ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_110_110")] = [Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ΔᐃⲆⵠⲆΔᐃ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ΔⲆΔⵠΔᐃⵠ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_111_000")] = [Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_111_111")] = [Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_010_000")] = [Ⲇⵠ.ΔⵠⵠᐃΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_010_010")] = [Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_011_000")] = [Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_000")] = [Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")] = [Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_011_010")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_011_011")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_111_011")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_010")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_111_000")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_111_010")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_111_011")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_111_110")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("010_111_111")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_111_110")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("000_111_010")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("011_011_000")] = [Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("011_011_010")] = [Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("011_011_011")] = [Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("011_111_000")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("011_011_010")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("011_111_010")] = [Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("011_111_011")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("011_111_010")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("011_111_110")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("011_111_010")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("011_111_111")] = [Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("110_110_000")] = [Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ᐃⵠΔⲆᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("110_110_010")] = [Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("110_110_110")] = [Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("110_111_000")] = [Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ᐃⵠΔⲆᐃⵠⲆ, Ⲇⵠ.ᐃᐃΔᐃⲆΔⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("110_111_110")] = [Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ᐃᐃΔᐃⲆΔⵠ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("110_111_111")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("110_111_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("110_111_011")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("110_111_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("110_111_010")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("110_111_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("111_111_110")] = [Ⲇⵠ.ᐃⲆΔⵠΔ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃᐃΔᐃⲆΔⵠ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("111_111_011")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("111_111_110")];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("111_111_000")] = [Ⲇⵠ.ᐃⵠΔⲆᐃⵠⲆ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃᐃΔᐃⲆΔⵠ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("111_111_111")] = [Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[1025][Xr.ⲆᐃΔ][a("111_111_010")] = ΔΔ[1025][Xr.ⲆᐃΔ][a("111_111_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ] = [];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_010_000")] = [Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_010_010")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("000_010_000")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_011_000")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("000_010_000")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_011_010")] = [Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_011_011")] = [Ⲇⵠ.ⵠΔΔᐃⲆⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_110_000")] = [Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠⲆᐃⵠⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_110_010")] = [Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ᐃⲆⲆⵠⲆΔΔ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_110_110")] = [Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠⵠⵠⲆⲆΔⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ᐃⲆⲆⵠⲆΔΔ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_111_000")] = [Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_111_111")] = [Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⵠΔΔᐃⲆⲆⲆ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_010_000")] = [Ⲇⵠ.ⵠⲆᐃⵠⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_010_010")] = [Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_011_000")] = [Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ᐃⵠᐃⲆⲆ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_000")] = [Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")] = [Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_011_010")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_011_011")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_111_011")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_010")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_111_000")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_111_010")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_111_011")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_111_110")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("010_111_111")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_111_110")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("000_111_010")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("011_011_000")] = [Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ᐃⵠᐃⲆⲆ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("011_011_010")] = [Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("011_011_011")] = [Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⵠΔΔᐃⲆⲆⲆ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("011_111_000")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("011_011_010")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("011_111_010")] = [Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("011_111_011")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("011_111_010")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("011_111_110")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("011_111_010")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("011_111_111")] = [Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃⲆⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("110_110_000")] = [Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆᐃΔᐃᐃΔΔ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("110_110_010")] = [Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("110_110_110")] = [Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("110_111_000")] = [Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆᐃΔᐃᐃΔΔ, Ⲇⵠ.ⵠⲆⵠⲆⲆⵠᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("110_111_110")] = [Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ⵠⲆⵠⲆⲆⵠᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("110_111_111")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("110_111_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("110_111_011")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("110_111_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("110_111_010")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("110_111_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("111_111_110")] = [Ⲇⵠ.ⲆⲆⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠⲆⵠⲆⲆⵠᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ΔⲆΔΔⲆΔᐃ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("111_111_011")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("111_111_110")];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("111_111_000")] = [Ⲇⵠ.ⲆᐃΔᐃᐃΔΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ⵠⲆⵠⲆⲆⵠᐃ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("111_111_111")] = [Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃⲆⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[1025][Xr.ΔⲆⵠ][a("111_111_010")] = ΔΔ[1025][Xr.ΔⲆⵠ][a("111_111_110")];
    ΔΔ[1024] = [];
    ΔΔ[1024][Xr.ⲆᐃΔ] = [];
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_010_000")] = Ⲇⵠ.ⲆⲆⲆⲆᐃⵠᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_010_010")] = Ⲇⵠ.ⲆⲆⲆⵠⲆⵠⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_011_000")] = Ⲇⵠ.ᐃⵠᐃΔΔⵠΔ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_011_010")] = Ⲇⵠ.ᐃⲆⵠⲆⲆⲆⵠ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_011_011")] = Ⲇⵠ.ⲆΔⲆⵠⲆⲆᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_110_000")] = Ⲇⵠ.ⲆⵠⲆᐃⵠⲆᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_110_010")] = Ⲇⵠ.ᐃΔΔᐃⲆⵠⵠ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_110_110")] = Ⲇⵠ.ΔΔΔⲆⵠᐃΔ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_111_000")] = Ⲇⵠ.ᐃⲆᐃⲆⵠᐃⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_111_010")] = Ⲇⵠ.ⵠⵠⲆⵠⲆⲆⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_111_011")] = Ⲇⵠ.ⲆⲆᐃΔᐃᐃΔ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_111_110")] = Ⲇⵠ.ᐃⵠⵠⵠⲆⲆⵠ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("000_111_111")] = Ⲇⵠ.ⵠⵠᐃΔᐃⲆΔ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_010_000")] = Ⲇⵠ.ΔᐃΔⲆⲆᐃⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_010_010")] = Ⲇⵠ.ΔⲆⵠⵠⵠⲆⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_011_000")] = Ⲇⵠ.ΔⲆΔⲆᐃᐃᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_011_010")] = Ⲇⵠ.ⲆΔΔΔⵠΔᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_011_011")] = Ⲇⵠ.ᐃⵠⲆΔⵠⵠᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_110_000")] = Ⲇⵠ.ᐃΔⲆⵠⵠᐃⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_110_010")] = Ⲇⵠ.ⵠⵠΔⲆΔⲆᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_110_110")] = Ⲇⵠ.ΔΔⵠⵠᐃⵠᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_111_000")] = Ⲇⵠ.ΔᐃᐃΔΔⵠΔ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_111_010")] = Ⲇⵠ.ⵠⵠΔΔΔⲆⵠ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_111_011")] = Ⲇⵠ.ⵠⵠⵠⲆⲆⵠᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_111_110")] = Ⲇⵠ.ᐃΔⲆΔⲆΔⵠ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("010_111_111")] = Ⲇⵠ.ⲆⲆⲆᐃΔⵠⵠ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("011_011_000")] = Ⲇⵠ.ⵠⵠᐃⲆΔⲆⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("011_011_010")] = Ⲇⵠ.ΔΔΔⵠΔᐃⵠ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("011_011_011")] = Ⲇⵠ.ᐃⲆΔⲆⵠᐃⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("011_111_000")] = Ⲇⵠ.ᐃᐃᐃΔⵠᐃᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("011_111_010")] = Ⲇⵠ.ΔⲆᐃᐃΔΔⵠ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("011_111_011")] = Ⲇⵠ.ΔⵠᐃΔⵠΔⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("011_111_110")] = Ⲇⵠ.ᐃⲆᐃΔⲆⵠΔ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("011_111_111")] = Ⲇⵠ.ᐃⲆⵠⲆⲆΔᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("110_110_000")] = Ⲇⵠ.ⲆⵠⵠⲆᐃⵠᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("110_110_010")] = Ⲇⵠ.ᐃΔⵠⲆⵠⵠⵠ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("110_110_110")] = Ⲇⵠ.ⵠΔⵠᐃΔⲆΔ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("110_111_000")] = Ⲇⵠ.ΔΔⲆᐃⲆᐃΔ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("110_111_010")] = Ⲇⵠ.ΔΔⵠᐃΔⵠⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("110_111_011")] = Ⲇⵠ.ⵠᐃⲆᐃΔΔⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("110_111_110")] = Ⲇⵠ.ⵠⵠⵠⲆᐃⲆⵠ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("110_111_111")] = Ⲇⵠ.ⲆΔⵠⵠᐃΔᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("111_111_011")] = Ⲇⵠ.ⲆᐃΔⵠΔⲆⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("111_111_110")] = Ⲇⵠ.ⲆⲆᐃᐃⲆⲆᐃ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("111_111_011")] = Ⲇⵠ.ⲆᐃΔⵠΔⲆⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("111_111_000")] = Ⲇⵠ.ΔᐃⵠⲆᐃⵠⲆ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("111_111_111")] = Ⲇⵠ.ΔᐃⵠⵠΔΔΔ;
    ΔΔ[1024][Xr.ⲆᐃΔ][a("111_111_010")] = Ⲇⵠ.ᐃⵠᐃⵠΔᐃΔ;
    ΔΔ[1024][Xr.ΔⲆⵠ] = [];
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_010_000")] = Ⲇⵠ.ᐃⲆⲆᐃᐃΔΔ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_010_010")] = Ⲇⵠ.ᐃⲆᐃΔΔⲆⵠ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_011_000")] = Ⲇⵠ.ΔⵠⲆⵠⲆΔΔ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_011_010")] = Ⲇⵠ.ΔΔⵠⵠᐃⵠΔ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_011_011")] = Ⲇⵠ.ⲆⲆΔⵠᐃⵠⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_110_000")] = Ⲇⵠ.ᐃⲆⲆᐃⲆᐃⵠ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_110_010")] = Ⲇⵠ.ⲆᐃⵠΔᐃΔᐃ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_110_110")] = Ⲇⵠ.ΔⵠⵠΔΔⲆⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_111_000")] = Ⲇⵠ.ΔⲆⲆⲆᐃⵠⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_111_010")] = Ⲇⵠ.ΔⲆⵠⲆⲆⵠΔ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_111_011")] = Ⲇⵠ.ᐃΔⲆΔⲆᐃⵠ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_111_110")] = Ⲇⵠ.ΔΔᐃⲆⲆⵠⵠ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("000_111_111")] = Ⲇⵠ.ⵠⵠΔⲆⲆⲆⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_010_000")] = Ⲇⵠ.ᐃⵠΔⲆᐃΔᐃ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_010_010")] = Ⲇⵠ.ᐃⲆⵠΔΔᐃⵠ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_011_000")] = Ⲇⵠ.ⲆⲆⲆᐃᐃⲆᐃ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_011_010")] = Ⲇⵠ.ᐃⵠᐃΔᐃΔⵠ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_011_011")] = Ⲇⵠ.ⲆᐃⵠᐃⲆᐃΔ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_110_000")] = Ⲇⵠ.ⵠΔⵠⲆⵠⲆᐃ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_110_010")] = Ⲇⵠ.ⵠⵠⵠⵠⵠⵠⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_110_110")] = Ⲇⵠ.ᐃᐃⲆΔⵠⵠⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_111_000")] = Ⲇⵠ.ᐃᐃⲆⲆⵠⲆᐃ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_111_010")] = Ⲇⵠ.ⵠᐃⲆⵠⵠⵠᐃ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_111_011")] = Ⲇⵠ.ᐃⲆᐃΔⲆΔΔ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_111_110")] = Ⲇⵠ.ΔⲆⲆᐃⵠᐃⵠ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("010_111_111")] = Ⲇⵠ.ⵠᐃⲆⲆᐃⵠΔ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("011_011_000")] = Ⲇⵠ.ΔⲆⲆΔⲆᐃⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("011_011_010")] = Ⲇⵠ.ᐃᐃⵠⵠᐃⲆᐃ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("011_011_011")] = Ⲇⵠ.ⵠⲆᐃᐃⲆⲆⵠ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("011_111_000")] = Ⲇⵠ.ΔⵠᐃᐃᐃⲆⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("011_111_010")] = Ⲇⵠ.ⲆⲆᐃᐃΔΔⵠ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("011_111_011")] = Ⲇⵠ.ΔⵠⲆⲆⵠᐃⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("011_111_110")] = Ⲇⵠ.ⵠΔΔⵠᐃⲆⵠ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("011_111_111")] = Ⲇⵠ.ⵠⵠⵠᐃᐃⵠᐃ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("110_110_000")] = Ⲇⵠ.ΔⵠΔᐃⵠΔⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("110_110_010")] = Ⲇⵠ.ⵠⵠⵠⵠⵠⲆΔ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("110_110_110")] = Ⲇⵠ.ᐃᐃⲆⲆⲆⲆⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("110_111_000")] = Ⲇⵠ.ⲆⲆᐃⲆΔⲆᐃ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("110_111_010")] = Ⲇⵠ.ⲆⲆⵠΔᐃΔⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("110_111_011")] = Ⲇⵠ.ΔΔᐃⲆᐃⵠᐃ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("110_111_110")] = Ⲇⵠ.ⵠᐃⲆᐃⵠᐃⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("110_111_111")] = Ⲇⵠ.ⲆⲆᐃΔⵠⲆΔ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("111_111_011")] = Ⲇⵠ.ᐃⲆΔΔⵠΔⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("111_111_110")] = Ⲇⵠ.ΔⵠⵠⲆⲆᐃᐃ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("111_111_011")] = Ⲇⵠ.ᐃⲆΔΔⵠΔⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("111_111_000")] = Ⲇⵠ.ⲆⵠⲆΔᐃⵠⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("111_111_111")] = Ⲇⵠ.ⵠᐃΔᐃᐃⲆⲆ;
    ΔΔ[1024][Xr.ΔⲆⵠ][a("111_111_010")] = Ⲇⵠ.ᐃⲆΔᐃⲆⵠᐃ;
    ΔΔ[32] = [];
    ΔΔ[32][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⲆΔΔⲆⲆᐃ;
    ΔΔ[32][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆΔΔⲆᐃⵠ;
    ΔΔ[205] = [];
    ΔΔ[205][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃⲆⵠᐃᐃⵠ;
    ΔΔ[205][Xr.ΔⲆⵠ] = Ⲇⵠ.Ⲇⵠᐃᐃⵠⵠⵠ;
    ΔΔ[957] = [];
    ΔΔ[957][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃΔⲆⵠⵠⵠ;
    ΔΔ[957][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⵠⵠⲆⲆⲆ;
    ΔΔ[207] = [];
    ΔΔ[207][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⲆΔⵠⲆⵠ;
    ΔΔ[207][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃⲆⵠⲆⵠⵠ;
    ΔΔ[954] = [];
    ΔΔ[954][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠΔᐃⵠᐃ;
    ΔΔ[954][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆᐃᐃⲆᐃᐃ;
    ΔΔ[958] = [];
    ΔΔ[958][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔᐃⲆᐃᐃⵠ;
    ΔΔ[958][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆΔⵠᐃΔ;
    ΔΔ[209] = [];
    ΔΔ[209][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆΔⲆΔΔᐃ;
    ΔΔ[209][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⵠⲆⵠⲆᐃ;
    ΔΔ[971] = [];
    ΔΔ[971][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃᐃⵠⲆΔᐃ;
    ΔΔ[971][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃΔᐃⵠⲆᐃ;
    ΔΔ[211] = [];
    ΔΔ[211][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃⵠⵠΔᐃ;
    ΔΔ[211][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃΔⵠⲆⲆⲆ;
    ΔΔ[986] = [];
    ΔΔ[986][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃᐃⵠᐃⲆⵠ;
    ΔΔ[986][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃΔᐃΔⲆⲆ;
    ΔΔ[989] = [];
    ΔΔ[989][Xr.ⲆᐃΔ] = [Ⲇⵠ.ΔᐃΔⵠΔᐃᐃ];
    ΔΔ[989][Xr.ΔⲆⵠ] = [Ⲇⵠ.ⲆⲆⵠⲆΔᐃⲆ];
    ΔΔ[217] = [];
    ΔΔ[217][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⵠⲆⲆΔΔ;
    ΔΔ[217][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⲆⵠΔⵠⵠ;
    ΔΔ[219] = [];
    ΔΔ[219][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠΔⲆⲆⵠᐃ;
    ΔΔ[219][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆΔⵠⲆⲆ;
    ΔΔ[218] = [];
    ΔΔ[218][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⲆΔᐃⵠⵠ;
    ΔΔ[218][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃᐃⵠⲆᐃ;
    ΔΔ[212] = [];
    ΔΔ[212][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⲆΔⲆᐃΔ;
    ΔΔ[212][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⲆⵠΔΔᐃ;
    ΔΔ[213] = [];
    ΔΔ[213][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃⲆᐃᐃⲆⵠ;
    ΔΔ[213][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔⵠⵠᐃᐃⲆ;
    ΔΔ[214] = [];
    ΔΔ[214][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⵠᐃⵠⵠⲆ;
    ΔΔ[214][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆⲆⵠⵠⵠ;
    ΔΔ[215] = [];
    ΔΔ[215][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆⲆΔᐃᐃᐃ;
    ΔΔ[215][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⵠⵠⵠⵠⵠ;
    ΔΔ[216] = [];
    ΔΔ[216][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⵠⵠⵠᐃ;
    ΔΔ[216][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⵠΔⲆⵠⵠ;
    ΔΔ[220] = [];
    ΔΔ[220][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⲆⵠᐃⵠᐃ;
    ΔΔ[220][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠΔΔⵠⲆⵠ;
    ΔΔ[1020] = [];
    ΔΔ[1020][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆᐃΔΔⵠⲆ;
    ΔΔ[1020][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⵠᐃⲆᐃᐃ;
    ΔΔ[1021] = [];
    ΔΔ[1021][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃᐃⵠⲆⵠᐃ;
    ΔΔ[1021][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⲆᐃᐃᐃⲆⲆ;
    ΔΔ[39] = [];
    ΔΔ[39][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔⵠⵠᐃᐃΔ;
    ΔΔ[39][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆΔⵠᐃⲆⵠ;
    ΔΔ[1022] = Ⲇⵠ.ⲆᐃⲆⲆⲆⵠⲆ;
    ΔΔ[1023] = Ⲇⵠ.ᐃᐃⵠᐃᐃᐃᐃ;
    ΔΔ[1041] = [];
    ΔΔ[1041][Xr.ⲆᐃΔ] = [];
    ΔΔ[1041][Xr.ΔⲆⵠ] = [];
    ΔΔ[1041][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔᐃⵠΔⲆᐃⲆ);
    ΔΔ[1041][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⲆΔᐃΔⵠⲆ);
    ΔΔ[1041][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⲆΔΔⲆⵠⲆ);
    ΔΔ[1041][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⵠⲆⲆⲆⵠⵠ);
    ΔΔ[1041][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠᐃᐃⵠⵠᐃᐃ);
    ΔΔ[1041][Xr.ΔⲆⵠ].push(Ⲇⵠ.Ⲇⵠᐃᐃⵠᐃᐃ);
    ΔΔ[244] = [];
    ΔΔ[244][Xr.ⲆᐃΔ] = [];
    ΔΔ[244][Xr.ΔⲆⵠ] = [];
    ΔΔ[244][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃΔΔⵠᐃΔⲆ);
    ΔΔ[244][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃΔⲆⵠΔᐃⵠ);
    ΔΔ[244][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃⲆⲆⵠΔᐃᐃ);
    ΔΔ[244][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆᐃΔⵠⵠⲆΔ);
    ΔΔ[244][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⲆⵠⵠΔⲆΔ);
    ΔΔ[244][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠⵠⵠᐃⵠΔⵠ);
    ΔΔ[1052] = [];
    ΔΔ[1052][Xr.ⲆᐃΔ] = [];
    ΔΔ[1052][Xr.ΔⲆⵠ] = [];
    ΔΔ[1052][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆᐃⲆᐃᐃⲆⲆ);
    ΔΔ[1052][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆᐃⲆᐃⵠΔⵠ);
    ΔΔ[1052][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆᐃⲆⲆⵠᐃΔ);
    ΔΔ[1052][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠᐃΔΔᐃΔⵠ);
    ΔΔ[1052][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆᐃᐃᐃⲆΔⵠ);
    ΔΔ[1052][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃᐃⵠⲆΔⵠ);
    ΔΔ[1052][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃΔΔΔⵠⵠ);
    ΔΔ[1052][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⵠⲆⵠᐃᐃᐃ);
    ΔΔ[1052][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆΔⵠΔᐃᐃΔ);
    ΔΔ[1052][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⲆᐃⵠⲆⲆᐃ);
    ΔΔ[450] = [];
    ΔΔ[450][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠᐃⲆⲆⲆᐃ;
    ΔΔ[450][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔᐃⲆⲆᐃΔ;
    ΔΔ[453] = [];
    ΔΔ[453][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃⵠΔⵠΔ;
    ΔΔ[453][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔⲆⲆⲆᐃⵠ;
    ΔΔ[454] = [];
    ΔΔ[454][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃⵠΔΔΔ;
    ΔΔ[454][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔⲆᐃᐃⵠᐃ;
    ΔΔ[464] = Ⲇⵠ.ᐃᐃⵠᐃⲆΔΔ;
    ΔΔ[468] = Ⲇⵠ.ⵠΔⲆⲆⵠΔΔ;
    ΔΔ[469] = Ⲇⵠ.ⵠᐃᐃⲆΔᐃΔ;
    ΔΔ[20] = [];
    ΔΔ[20][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆΔᐃΔΔᐃ;
    ΔΔ[20][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃᐃⵠᐃᐃⲆ;
    ΔΔ[920] = [];
    ΔΔ[920][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃᐃⵠⵠΔ;
    ΔΔ[920][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆⲆᐃᐃⲆ;
    ΔΔ[21] = [];
    ΔΔ[21][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔΔⵠⲆᐃΔ;
    ΔΔ[21][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠΔⲆⵠΔᐃ;
    ΔΔ[924] = [];
    ΔΔ[924][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃᐃⵠⵠΔ;
    ΔΔ[924][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆⲆᐃᐃⲆ;
    ΔΔ[44] = [];
    ΔΔ[44][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⵠⲆᐃⲆᐃ;
    ΔΔ[44][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠⲆᐃᐃΔᐃ;
    ΔΔ[19] = [];
    ΔΔ[19][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃⲆᐃΔⲆΔ;
    ΔΔ[19][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃⲆⲆⲆᐃ;
    ΔΔ[34] = [];
    ΔΔ[34][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃᐃᐃᐃⲆⵠ;
    ΔΔ[34][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠᐃⲆⲆⲆⵠ;
    ΔΔ[17] = [];
    ΔΔ[17][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆⵠᐃᐃΔⵠ;
    ΔΔ[17][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔᐃΔⵠⲆⵠ;
    ΔΔ[63] = [];
    ΔΔ[63][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⵠⲆⵠΔⵠ;
    ΔΔ[63][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠΔΔⲆᐃΔ;
    ΔΔ[60] = [];
    ΔΔ[60][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⲆⲆᐃᐃᐃΔ;
    ΔΔ[60][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆᐃᐃⵠⲆΔ;
    ΔΔ[94] = [];
    ΔΔ[94][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆΔᐃⲆⲆᐃᐃΔ;
    ΔΔ[94][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔⵠⲆⲆⲆⲆΔⲆ;
    ΔΔ[95] = [];
    ΔΔ[95][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠΔⵠᐃⵠⵠᐃⵠ;
    ΔΔ[95][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠᐃⲆΔᐃᐃⵠΔ;
    ΔΔ[96] = [];
    ΔΔ[96][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔⵠᐃⲆⵠⵠΔΔ;
    ΔΔ[96][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠⵠⵠΔᐃⲆⲆⲆ;
    ΔΔ[97] = [];
    ΔΔ[97][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔΔᐃᐃⲆΔⲆΔ;
    ΔΔ[97][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⲆⲆΔΔᐃⲆΔ;
    ΔΔ[98] = [];
    ΔΔ[98][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔᐃΔᐃᐃᐃΔΔ;
    ΔΔ[98][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⲆᐃᐃⵠΔⲆⲆⲆ;
    ΔΔ[99] = [];
    ΔΔ[99][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠⵠⵠⵠᐃⲆΔᐃ;
    ΔΔ[99][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆⵠΔΔⲆⵠΔ;
    ΔΔ[90] = [];
    ΔΔ[90][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃⵠΔⲆⲆⲆ;
    ΔΔ[90][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆΔΔⲆΔⵠ;
    ΔΔ[91] = [];
    ΔΔ[91][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⵠᐃᐃⵠⵠ;
    ΔΔ[91][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆⵠⲆⲆⲆᐃ;
    ΔΔ[71] = [];
    ΔΔ[71][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⵠⲆΔⲆⲆΔᐃ;
    ΔΔ[71][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃⲆⵠΔⲆⲆⵠ;
    ΔΔ[72] = [];
    ΔΔ[72][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⵠΔⵠΔⲆᐃᐃ;
    ΔΔ[72][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⲆⲆⲆΔⵠⲆⵠⲆ;
    ΔΔ[73] = [];
    ΔΔ[73][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⲆᐃᐃΔⵠΔᐃΔ;
    ΔΔ[73][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔⵠⲆΔⵠⲆᐃⵠ;
    ΔΔ[74] = [];
    ΔΔ[74][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔΔΔⲆΔⵠⲆⵠ;
    ΔΔ[74][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆⵠΔⵠΔⵠⵠⲆ;
    ΔΔ[75] = [];
    ΔΔ[75][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔⵠΔΔΔⵠᐃΔ;
    ΔΔ[75][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔΔⵠⲆⵠᐃᐃᐃ;
    ΔΔ[76] = [];
    ΔΔ[76][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃⵠⲆΔᐃⲆᐃⲆ;
    ΔΔ[76][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃΔⵠᐃΔᐃΔᐃ;
    ΔΔ[101] = [];
    ΔΔ[101][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃⲆΔⵠᐃⲆ;
    ΔΔ[101][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⵠᐃᐃᐃΔ;
    ΔΔ[64] = [];
    ΔΔ[64][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃᐃΔⵠⲆ;
    ΔΔ[64][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⵠΔⲆⲆᐃ;
    ΔΔ[102] = [];
    ΔΔ[102][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃΔᐃΔᐃⲆ;
    ΔΔ[102][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃⵠᐃΔᐃⵠ;
    ΔΔ[65] = [];
    ΔΔ[65][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠΔΔⲆᐃᐃ;
    ΔΔ[65][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⲆΔᐃⵠᐃ;
    ΔΔ[103] = [];
    ΔΔ[103][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⵠⲆᐃᐃΔ;
    ΔΔ[103][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃⵠⲆⲆᐃⲆ;
    ΔΔ[66] = [];
    ΔΔ[66][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔⲆΔΔⵠⲆ;
    ΔΔ[66][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⲆᐃⲆΔΔ;
    ΔΔ[104] = [];
    ΔΔ[104][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠᐃΔᐃⵠⲆ;
    ΔΔ[104][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⵠⲆᐃΔⵠ;
    ΔΔ[67] = [];
    ΔΔ[67][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⲆᐃᐃⲆⵠ;
    ΔΔ[67][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠᐃᐃᐃᐃΔ;
    ΔΔ[105] = [];
    ΔΔ[105][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠᐃᐃΔⲆⵠ;
    ΔΔ[105][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔᐃⲆΔⲆⲆ;
    ΔΔ[68] = [];
    ΔΔ[68][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔⵠᐃⲆΔⵠᐃΔ;
    ΔΔ[68][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⲆᐃⲆⲆⵠⲆᐃ;
    ΔΔ[106] = [];
    ΔΔ[106][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃᐃⲆⲆΔᐃ;
    ΔΔ[106][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆΔΔΔΔⵠΔⵠ;
    ΔΔ[69] = [];
    ΔΔ[69][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔⲆⵠᐃΔᐃΔⵠ;
    ΔΔ[69][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆᐃⵠⲆⵠΔⵠⲆ;
    ΔΔ[107] = [];
    ΔΔ[107][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃⵠⲆⵠⵠⲆ;
    ΔΔ[107][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠᐃⲆⲆᐃΔ;
    ΔΔ[70] = [];
    ΔΔ[70][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⲆⵠⲆⲆⲆᐃⲆ;
    ΔΔ[70][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆᐃⵠⲆΔⲆⵠⵠ;
    ΔΔ[80] = [];
    ΔΔ[80][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⵠΔᐃΔⵠ;
    ΔΔ[80][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⲆⵠⵠᐃⲆ;
    ΔΔ[81] = [];
    ΔΔ[81][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃᐃⲆΔΔⵠ;
    ΔΔ[81][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔᐃⵠⵠⵠⲆ;
    ΔΔ[22] = [];
    ΔΔ[22][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⲆⵠΔΔⵠ;
    ΔΔ[22][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⲆⲆⲆⲆⲆ;
    ΔΔ[928] = [];
    ΔΔ[928][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⵠᐃᐃⵠΔ;
    ΔΔ[928][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆΔⲆᐃᐃⵠ;
    ΔΔ[935] = [];
    ΔΔ[935][Xr.ⲆᐃΔ] = [];
    ΔΔ[935][Xr.ΔⲆⵠ] = [];
    ΔΔ[935][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⵠᐃⵠᐃⵠΔᐃΔ);
    ΔΔ[935][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃᐃᐃⵠᐃⲆⵠᐃⲆ);
    ΔΔ[935][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃᐃⵠᐃⲆⵠᐃⲆ);
    ΔΔ[935][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⵠΔᐃⲆΔⵠᐃⵠ);
    ΔΔ[941] = [];
    ΔΔ[941][Xr.ⲆᐃΔ] = [];
    ΔΔ[941][Xr.ΔⲆⵠ] = [];
    ΔΔ[941][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⵠⵠΔⲆΔⵠ);
    ΔΔ[941][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠᐃᐃΔⲆⲆᐃ);
    ΔΔ[941][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⵠΔⲆΔᐃⲆ);
    ΔΔ[941][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠΔⲆΔᐃⲆΔ);
    ΔΔ[941][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⲆΔⲆᐃΔⵠ);
    ΔΔ[941][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃⵠΔΔⲆⲆ);
    ΔΔ[53] = [];
    ΔΔ[53][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆⵠΔⲆⵠⵠ;
    ΔΔ[53][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔᐃΔᐃⵠⲆ;
    ΔΔ[54] = [];
    ΔΔ[54][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔⵠⲆⲆΔⵠ;
    ΔΔ[54][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⵠᐃᐃΔⲆ;
    ΔΔ[241] = [];
    ΔΔ[241][Xr.ⲆᐃΔ] = [];
    ΔΔ[241][Xr.ΔⲆⵠ] = [];
    ΔΔ[241][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠΔᐃᐃΔⲆΔ);
    ΔΔ[241][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⵠⲆᐃΔΔⲆ);
    ΔΔ[241][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⲆⵠⵠΔⲆΔ);
    ΔΔ[241][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔⵠΔⲆᐃⵠⵠ);
    ΔΔ[241][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔⲆⲆⲆΔⵠᐃ);
    ΔΔ[241][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔΔᐃᐃΔΔᐃ);
    ΔΔ[202] = [];
    ΔΔ[202][Xr.ⲆᐃΔ] = [];
    ΔΔ[202][Xr.ΔⲆⵠ] = [];
    ΔΔ[202][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠᐃⵠΔΔⲆⵠ);
    ΔΔ[202][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃᐃᐃΔⵠΔⵠ);
    ΔΔ[202][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃΔΔΔᐃⲆⵠ);
    ΔΔ[202][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠᐃⲆⵠΔⲆⵠ);
    ΔΔ[202][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔᐃⲆⵠⵠⲆΔ);
    ΔΔ[202][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⲆⲆᐃⲆⲆΔ);
    ΔΔ[203] = [];
    ΔΔ[203][Xr.ⲆᐃΔ] = [];
    ΔΔ[203][Xr.ΔⲆⵠ] = [];
    ΔΔ[203][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃᐃⲆᐃΔⲆⵠ);
    ΔΔ[203][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃΔΔᐃⵠⲆⲆ);
    ΔΔ[203][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⵠᐃⵠⵠΔⵠ);
    ΔΔ[203][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔΔⲆⲆᐃⵠᐃ);
    ΔΔ[203][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆⵠⲆᐃⵠᐃΔ);
    ΔΔ[203][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆᐃⵠᐃⵠⲆΔ);
    ΔΔ[203][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔⵠᐃⵠⲆᐃⵠ);
    ΔΔ[203][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⲆⵠⵠΔⲆⵠ);
    ΔΔ[203][Xr.ΔⲆⵠ].push(Ⲇⵠ.Ⲇⵠᐃᐃᐃⵠᐃ);
    ΔΔ[203][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆᐃⲆⲆⵠⵠΔ);
    ΔΔ[203][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆΔᐃᐃᐃΔⵠ);
    ΔΔ[203][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⵠᐃᐃⵠⵠⲆ);
    ΔΔ[Xr.ΔᐃΔΔⲆ] = [];
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⵠᐃᐃⲆⲆΔ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃⵠᐃⵠΔⲆⲆ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠᐃⲆⲆᐃᐃⵠ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃΔΔⲆΔⵠⵠ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠΔⵠΔⲆᐃᐃ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔᐃΔΔⵠⲆⵠ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔᐃⵠΔᐃⵠⵠ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔⲆΔᐃⲆⲆΔ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃⵠⵠⲆⲆΔ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⵠⲆᐃᐃⵠⵠ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔⵠᐃⵠᐃⲆᐃ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆᐃΔᐃᐃΔⲆ);
    ΔΔ[918] = [];
    ΔΔ[918][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆΔΔᐃⲆⲆ;
    ΔΔ[918][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⵠᐃⲆⵠⵠ;
    ΔΔ[919] = Ⲇⵠ.ΔⵠⲆⵠⲆᐃⵠ;
    ΔΔ[56] = [];
    ΔΔ[56][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⵠⵠⲆⵠΔⲆⵠ;
    ΔΔ[56][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⲆⲆⵠⲆᐃⵠⲆ;
    ΔΔ[223] = [];
    ΔΔ[223][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠⵠⵠⵠⲆ;
    ΔΔ[223][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⲆⵠᐃᐃΔᐃ;
    ΔΔ[224] = [];
    ΔΔ[224][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠᐃᐃⲆΔΔ;
    ΔΔ[224][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃⵠᐃⵠⵠΔ;
    ΔΔ[236] = [];
    ΔΔ[236][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠᐃᐃᐃΔᐃ;
    ΔΔ[236][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⵠΔΔᐃⲆ;
    ΔΔ[1033] = [];
    ΔΔ[1033][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⵠΔⲆⲆᐃ;
    ΔΔ[1033][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃΔⲆⲆΔΔ;
    ΔΔ[1034] = Ⲇⵠ.ΔⵠΔⲆⲆᐃΔ;
    ΔΔ[1150] = [];
    ΔΔ[1150][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔⲆⵠΔᐃⵠ;
    ΔΔ[1150][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃΔᐃᐃΔᐃ;
    ΔΔ[1152] = [];
    ΔΔ[1152][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃΔΔⲆⵠΔ;
    ΔΔ[1152][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆᐃⲆⲆᐃ;
    ΔΔ[1149] = Ⲇⵠ.ΔⲆⲆᐃᐃΔᐃ;
    ΔΔ[1151] = Ⲇⵠ.ᐃⲆᐃⲆᐃⵠⲆ;
    ΔΔ[1153] = Ⲇⵠ.ⲆⵠⲆΔΔⲆⵠ;
    ΔΔ[1143] = [];
    ΔΔ[1143][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆΔⵠⵠⵠⵠ;
    ΔΔ[1143][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⵠⲆᐃⲆᐃ;
    ΔΔ[1145] = [];
    ΔΔ[1145][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆΔΔⲆⲆⲆ;
    ΔΔ[1145][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔΔⲆᐃᐃΔ;
    ΔΔ[1146] = [];
    ΔΔ[1146][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⲆⵠⲆⵠ;
    ΔΔ[1146][Xr.ΔⲆⵠ] = Ⲇⵠ.Δᐃᐃⵠⵠᐃᐃ;
    ΔΔ[1144] = Ⲇⵠ.ΔᐃΔᐃⲆᐃⵠ;
    ΔΔ[1148] = Ⲇⵠ.ⵠᐃΔᐃᐃΔᐃ;
    ΔΔ[1147] = Ⲇⵠ.ΔⵠᐃΔΔΔᐃ;
    ΔΔ[1053] = [];
    ΔΔ[1053][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⲆᐃⵠΔᐃⲆ;
    ΔΔ[1053][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⲆᐃⲆⵠⲆ;
    ΔΔ[1055] = [];
    ΔΔ[1055][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⵠᐃⵠΔᐃ;
    ΔΔ[1055][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆΔⵠⲆΔᐃ;
    ΔΔ[231] = [];
    ΔΔ[231][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃⵠᐃⵠⵠ;
    ΔΔ[231][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠⲆΔⲆⲆⵠ;
    ΔΔ[1060] = [];
    ΔΔ[1060][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆⲆⵠⲆΔⲆ;
    ΔΔ[1060][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆⲆΔⲆⲆⲆ;
    ΔΔ[1063] = [];
    ΔΔ[1063][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃⵠΔⲆΔΔ;
    ΔΔ[1063][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃᐃⲆⵠⲆ;
    ΔΔ[1059] = [];
    ΔΔ[1059][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠΔⵠᐃᐃⵠ;
    ΔΔ[1059][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃᐃΔΔΔΔ;
    ΔΔ[1062] = [];
    ΔΔ[1062][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆΔⵠⲆΔⵠ;
    ΔΔ[1062][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⲆᐃⵠΔⵠ;
    ΔΔ[1056] = Ⲇⵠ.ΔⲆⲆᐃⵠΔⵠ;
    ΔΔ[1057] = Ⲇⵠ.ⵠᐃΔᐃᐃⵠᐃ;
    ΔΔ[1058] = Ⲇⵠ.ⵠⲆⲆⵠᐃᐃᐃ;
    ΔΔ[1065] = Ⲇⵠ.ⲆᐃΔⵠⲆⲆⲆ;
    ΔΔ[1066] = Ⲇⵠ.ⵠΔᐃΔΔΔⲆ;
    ΔΔ[1067] = Ⲇⵠ.ⲆΔⵠᐃΔΔⵠ;
    ΔΔ[1222] = [];
    ΔΔ[1222][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔⵠΔⲆΔᐃ;
    ΔΔ[1222][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃⵠΔⵠⵠⲆ;
    ΔΔ[248] = [];
    ΔΔ[248][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠΔΔⲆⲆⵠ;
    ΔΔ[248][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔⲆⲆΔΔⲆ;
    ΔΔ[1218] = [];
    ΔΔ[1218][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃΔΔᐃⲆΔ;
    ΔΔ[1218][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⵠᐃΔᐃΔ;
    ΔΔ[1221] = [];
    ΔΔ[1221][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⲆⲆⵠⲆ;
    ΔΔ[1221][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⵠΔⵠᐃᐃ;
    ΔΔ[1223] = Ⲇⵠ.ⵠΔΔⵠⲆΔⲆ;
    ΔΔ[1219] = Ⲇⵠ.ᐃⲆΔΔᐃⵠⵠ;
    ΔΔ[1068] = [];
    ΔΔ[1068][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⵠΔΔⵠⵠ;
    ΔΔ[1068][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠⵠⵠⲆΔⲆ;
    ΔΔ[232] = [];
    ΔΔ[232][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃΔⲆⵠΔⵠ;
    ΔΔ[232][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃⲆᐃⲆΔ;
    ΔΔ[1070] = [];
    ΔΔ[1070][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔᐃⵠᐃⲆⵠ;
    ΔΔ[1070][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆⵠⲆᐃⲆᐃ;
    ΔΔ[1072] = [];
    ΔΔ[1072][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠΔⲆΔⵠΔ;
    ΔΔ[1072][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⵠⲆᐃᐃᐃ;
    ΔΔ[1075] = [];
    ΔΔ[1075][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⲆΔᐃⵠΔ;
    ΔΔ[1075][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⵠΔⲆⲆᐃ;
    ΔΔ[1071] = [];
    ΔΔ[1071][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔΔⵠⲆⲆⲆ;
    ΔΔ[1071][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆΔᐃΔⵠ;
    ΔΔ[1074] = [];
    ΔΔ[1074][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔⵠΔⲆⲆⲆ;
    ΔΔ[1074][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠᐃᐃⵠΔⲆ;
    ΔΔ[1073] = [];
    ΔΔ[1073][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔΔⵠⵠΔⲆ;
    ΔΔ[1073][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃΔⵠⵠᐃⲆ;
    ΔΔ[1076] = [];
    ΔΔ[1076][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆⵠΔᐃⵠⵠ;
    ΔΔ[1076][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃᐃᐃΔΔⵠ;
    ΔΔ[1077] = Ⲇⵠ.ΔⲆⵠⲆⲆΔᐃ;
    ΔΔ[1078] = Ⲇⵠ.ΔⲆᐃⵠᐃᐃⵠ;
    ΔΔ[1079] = Ⲇⵠ.ⲆⲆᐃⲆΔΔΔ;
    ΔΔ[1083] = [];
    ΔΔ[1083][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃᐃΔⵠⲆⵠ;
    ΔΔ[1083][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆᐃΔⵠⵠⵠ;
    ΔΔ[233] = [];
    ΔΔ[233][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃᐃⵠⵠᐃ;
    ΔΔ[233][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃᐃⵠᐃⲆΔ;
    ΔΔ[1085] = [];
    ΔΔ[1085][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃⵠⵠᐃⲆⵠ;
    ΔΔ[1085][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆⲆⲆⵠⲆᐃ;
    ΔΔ[1087] = [];
    ΔΔ[1087][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃᐃⲆⲆΔΔ;
    ΔΔ[1087][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠΔⲆⲆⵠⵠ;
    ΔΔ[1090] = [];
    ΔΔ[1090][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃΔΔⵠⲆᐃ;
    ΔΔ[1090][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠΔⲆⲆⲆⵠ;
    ΔΔ[1086] = [];
    ΔΔ[1086][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆᐃᐃᐃᐃⲆ;
    ΔΔ[1086][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆⵠᐃᐃⲆ;
    ΔΔ[1089] = [];
    ΔΔ[1089][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⲆⲆᐃⲆ;
    ΔΔ[1089][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃΔΔᐃⵠᐃ;
    ΔΔ[1088] = [];
    ΔΔ[1088][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆᐃⲆⲆᐃᐃ;
    ΔΔ[1088][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆⲆΔⲆΔ;
    ΔΔ[1091] = [];
    ΔΔ[1091][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃⵠⵠⵠᐃⲆ;
    ΔΔ[1091][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃΔⵠⵠⵠᐃ;
    ΔΔ[1092] = Ⲇⵠ.ⵠΔΔⲆⵠⲆᐃ;
    ΔΔ[1093] = Ⲇⵠ.ⲆⵠᐃᐃⲆᐃⲆ;
    ΔΔ[1094] = Ⲇⵠ.ⲆΔⵠΔⵠⲆΔ;
    ΔΔ[1098] = [];
    ΔΔ[1098][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠⲆᐃⵠΔⲆ;
    ΔΔ[1098][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆᐃΔᐃΔᐃ;
    ΔΔ[235] = [];
    ΔΔ[235][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠΔᐃⵠⵠΔ;
    ΔΔ[235][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃⵠᐃᐃΔⵠ;
    ΔΔ[1115] = Ⲇⵠ.ⲆⲆⲆⲆⲆᐃᐃ;
    ΔΔ[1113] = [];
    ΔΔ[1113][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⵠⵠⵠⵠᐃ;
    ΔΔ[1113][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆⲆⵠⵠⵠ;
    ΔΔ[1114] = [];
    ΔΔ[1114][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠᐃᐃᐃΔⵠ;
    ΔΔ[1114][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆᐃⵠΔΔᐃ;
    ΔΔ[1100] = [];
    ΔΔ[1100][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠΔΔΔⲆ;
    ΔΔ[1100][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠⲆᐃΔΔΔ;
    ΔΔ[1102] = [];
    ΔΔ[1102][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔᐃⵠΔΔⲆ;
    ΔΔ[1102][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠᐃΔᐃΔⵠ;
    ΔΔ[1105] = [];
    ΔΔ[1105][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆⲆⵠⵠⲆⲆ;
    ΔΔ[1105][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⵠⲆⲆⲆⵠ;
    ΔΔ[1101] = [];
    ΔΔ[1101][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆⵠⵠᐃⵠⲆ;
    ΔΔ[1101][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃⵠⲆΔⲆⲆ;
    ΔΔ[1104] = [];
    ΔΔ[1104][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃⵠΔΔΔ;
    ΔΔ[1104][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔᐃΔⵠΔⲆ;
    ΔΔ[1103] = [];
    ΔΔ[1103][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃᐃΔΔΔ;
    ΔΔ[1103][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⲆⲆᐃⵠⲆ;
    ΔΔ[1106] = [];
    ΔΔ[1106][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠⲆᐃΔΔᐃ;
    ΔΔ[1106][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⲆⲆⲆΔⵠ;
    ΔΔ[1107] = Ⲇⵠ.ᐃⲆⲆⵠⲆⵠⲆ;
    ΔΔ[1108] = Ⲇⵠ.ⲆⲆⵠᐃᐃᐃⲆ;
    ΔΔ[1109] = Ⲇⵠ.ΔⵠⵠᐃⵠΔᐃ;
    ΔΔ[1119] = [];
    ΔΔ[1119][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠᐃᐃΔⲆⲆ;
    ΔΔ[1119][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃᐃⵠΔⲆᐃ;
    ΔΔ[238] = [];
    ΔΔ[238][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⵠⵠΔΔⵠ;
    ΔΔ[238][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠΔᐃⵠᐃᐃ;
    ΔΔ[1136] = Ⲇⵠ.ⵠⵠΔΔⲆᐃⵠ;
    ΔΔ[1134] = [];
    ΔΔ[1134][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⵠΔⲆΔ;
    ΔΔ[1134][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠⲆⲆΔⲆᐃ;
    ΔΔ[1135] = [];
    ΔΔ[1135][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠⵠΔⲆⲆ;
    ΔΔ[1135][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⵠⵠⲆⲆⵠ;
    ΔΔ[1121] = [];
    ΔΔ[1121][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠΔᐃⲆⲆⵠ;
    ΔΔ[1121][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⲆⵠΔⲆⵠ;
    ΔΔ[1123] = [];
    ΔΔ[1123][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃⵠΔⲆΔ;
    ΔΔ[1123][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃᐃᐃⵠᐃⵠ;
    ΔΔ[1126] = [];
    ΔΔ[1126][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⵠᐃᐃᐃΔ;
    ΔΔ[1126][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃⲆΔΔΔ;
    ΔΔ[1122] = [];
    ΔΔ[1122][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠΔⵠⲆⵠⵠ;
    ΔΔ[1122][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔᐃⵠⲆⵠⵠ;
    ΔΔ[1125] = [];
    ΔΔ[1125][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔⲆⵠᐃⵠⵠ;
    ΔΔ[1125][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔⲆᐃⵠᐃⲆ;
    ΔΔ[1124] = [];
    ΔΔ[1124][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔⵠΔⵠⲆⲆ;
    ΔΔ[1124][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆⲆⵠΔᐃΔ;
    ΔΔ[1127] = [];
    ΔΔ[1127][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⲆΔⲆⲆⲆ;
    ΔΔ[1127][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⵠⵠᐃΔⵠ;
    ΔΔ[1128] = Ⲇⵠ.ⲆⵠⵠᐃΔᐃᐃ;
    ΔΔ[1129] = Ⲇⵠ.ᐃᐃⵠⲆᐃᐃⲆ;
    ΔΔ[1130] = Ⲇⵠ.ⲆⵠⵠΔᐃⲆⵠ;
    ΔΔ[1042] = [];
    ΔΔ[1042][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆΔᐃⲆⵠⲆ;
    ΔΔ[1042][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆᐃⵠⵠΔⲆ;
    ΔΔ[1043] = [];
    ΔΔ[1043][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠᐃΔᐃⲆ;
    ΔΔ[1043][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃΔΔⵠΔⲆ;
    ΔΔ[1044] = [];
    ΔΔ[1044][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃΔᐃⵠⲆⵠ;
    ΔΔ[1044][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⲆΔⵠᐃⲆ;
    ΔΔ[228] = [];
    ΔΔ[228][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃΔΔΔᐃⲆ;
    ΔΔ[228][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃΔΔΔᐃⲆ;
    ΔΔ[234] = [];
    ΔΔ[234][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠⵠᐃⲆΔΔ;
    ΔΔ[234][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠⵠᐃⲆΔΔ;
    ΔΔ[249] = [];
    ΔΔ[249][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃᐃⵠΔΔⵠ;
    ΔΔ[249][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃᐃⵠΔΔⵠ;
    ΔΔ[1045] = Ⲇⵠ.ᐃᐃᐃΔΔⲆᐃ;
    ΔΔ[89] = [];
    ΔΔ[89][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔⲆᐃᐃᐃΔ;
    ΔΔ[89][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⲆᐃⵠᐃⲆ;
    ΔΔ[92] = [];
    ΔΔ[92][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠⲆⵠᐃⲆⵠ;
    ΔΔ[92][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔΔᐃᐃΔⵠ;
    ΔΔ[247] = [];
    ΔΔ[247][Xr.ⲆᐃΔ] = [Ⲇⵠ.ⲆᐃᐃⵠⲆᐃⵠ, Ⲇⵠ.ⵠΔᐃⵠΔᐃΔ, Ⲇⵠ.ΔᐃⲆΔⵠᐃⲆ, Ⲇⵠ.ⵠᐃΔᐃΔᐃⲆ, Ⲇⵠ.ΔⵠⵠⲆᐃᐃΔ, Ⲇⵠ.ΔⵠᐃΔᐃⵠⲆ, Ⲇⵠ.ᐃⵠᐃᐃΔⲆⵠ, Ⲇⵠ.ΔᐃᐃⲆⲆΔᐃ, Ⲇⵠ.ⵠᐃⵠⲆⵠⵠⲆ];
    ΔΔ[247][Xr.ΔⲆⵠ] = [Ⲇⵠ.ⲆᐃΔᐃΔⵠᐃ, Ⲇⵠ.ⵠΔΔⲆΔΔⲆ, Ⲇⵠ.ᐃⲆⵠᐃᐃᐃΔ, Ⲇⵠ.ΔᐃⵠᐃΔᐃⵠ, Ⲇⵠ.ⵠᐃⵠⲆⲆᐃⲆ, Ⲇⵠ.ᐃΔⵠⲆᐃΔⵠ, Ⲇⵠ.ΔΔᐃⲆΔⲆⲆ, Ⲇⵠ.ΔᐃᐃⲆⲆΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆᐃΔ];
    ΔΔ[93] = [];
    ΔΔ[93][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃⲆⲆΔΔ;
    ΔΔ[93][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆΔⲆΔⲆΔ;
    ΔΔ[225] = [];
    ΔΔ[225][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃⲆⲆⵠⵠⲆ;
    ΔΔ[225][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⵠⲆⵠᐃᐃ;
    ΔΔ[226] = [];
    ΔΔ[226][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⲆⲆᐃⲆΔΔ;
    ΔΔ[226][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃΔⵠΔⵠⵠ;
    ΔΔ[24] = [];
    ΔΔ[24][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃᐃΔΔⵠ;
    ΔΔ[24][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆⵠⲆΔᐃ;
    ΔΔ[88] = [];
    ΔΔ[88][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆⵠⲆᐃᐃΔ;
    ΔΔ[88][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠΔΔΔΔΔ;
    ΔΔ[87] = [];
    ΔΔ[87][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠⲆᐃΔΔⲆ;
    ΔΔ[87][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⲆⲆᐃᐃⵠ;
    ΔΔ[82] = [];
    ΔΔ[82][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆΔᐃᐃᐃⲆ;
    ΔΔ[82][Xr.ΔⲆⵠ] = Ⲇⵠ.Ⲇᐃᐃᐃⵠⵠᐃ;
    ΔΔ[621] = [];
    ΔΔ[621][Xr.ⲆᐃΔ] = [];
    ΔΔ[621][Xr.ΔⲆⵠ] = [];
    ΔΔ[621][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⲆΔⵠⲆΔᐃᐃΔ);
    ΔΔ[621][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃⲆΔᐃⵠⲆΔᐃᐃ);
    ΔΔ[621][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆΔᐃᐃⵠⵠᐃⵠⵠ);
    ΔΔ[621][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⵠⵠᐃΔᐃΔⵠΔ);
    ΔΔ[621][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⵠⵠΔᐃⵠⲆΔⲆ);
    ΔΔ[621][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠⵠⵠⵠᐃΔΔᐃⵠ);
    ΔΔ[619] = [];
    ΔΔ[619][Xr.ⲆᐃΔ] = [];
    ΔΔ[619][Xr.ΔⲆⵠ] = [];
    ΔΔ[619][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃⲆΔΔⵠⲆⵠⵠⵠ);
    ΔΔ[619][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⲆΔᐃⲆᐃᐃᐃⵠ);
    ΔΔ[619][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠᐃⲆⲆⵠⵠⲆΔᐃ);
    ΔΔ[619][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⵠⲆⲆⲆⲆΔΔᐃ);
    ΔΔ[619][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃⲆᐃⵠΔⲆΔⲆ);
    ΔΔ[619][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠⲆⲆⲆⲆⲆⲆⵠΔ);
    ΔΔ[620] = [];
    ΔΔ[620][Xr.ⲆᐃΔ] = [];
    ΔΔ[620][Xr.ΔⲆⵠ] = [];
    ΔΔ[620][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔᐃⲆⵠΔΔΔᐃⲆ);
    ΔΔ[620][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⲆΔⵠΔⲆⵠΔΔ);
    ΔΔ[620][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⲆⲆΔΔⵠᐃΔΔ);
    ΔΔ[620][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠⲆΔᐃΔΔⵠⵠⲆ);
    ΔΔ[620][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⵠⵠⲆΔⲆⲆⵠᐃ);
    ΔΔ[620][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠΔΔΔΔⲆΔΔᐃ);
    ⵠᐃΔⲆ.g = [];
    ⵠᐃΔⲆ.g[0] = [Ⲇⵠ.ⲆΔⵠⵠⵠⵠΔ, Ⲇⵠ.ΔΔᐃΔⵠⵠᐃ];
    ⵠᐃΔⲆ.g[1] = ⵠᐃΔⲆ.g[ya];
    ⵠᐃΔⲆ.g[xj] = [Ⲇⵠ.ᐃⵠΔΔⵠⵠⲆ, Ⲇⵠ.ΔΔᐃⲆⲆⲆᐃ];
    ⵠᐃΔⲆ.m = [];
    ⵠᐃΔⲆ.m[0] = [Ⲇⵠ.ΔⲆΔᐃᐃᐃᐃ, Ⲇⵠ.ΔΔᐃⵠᐃⵠΔ];
    ⵠᐃΔⲆ.m[1] = ⵠᐃΔⲆ.m[ya];
    ⵠᐃΔⲆ.m[Vh] = [Ⲇⵠ.ΔΔⵠΔᐃᐃᐃ, Ⲇⵠ.ᐃᐃΔⵠⲆⲆⵠ];
    ⵠᐃΔⲆ.la = [];
    ⵠᐃΔⲆ.la[os] = [Ⲇⵠ.ΔᐃⵠΔⲆΔᐃ, Ⲇⵠ.ΔΔΔⵠΔⵠⲆ];
    ⵠᐃΔⲆ.la[Te] = ⵠᐃΔⲆ.la[fl];
    ⵠᐃΔⲆ.la[2] = ⵠᐃΔⲆ.la[0];
    ⵠᐃΔⲆ.la[fn] = ⵠᐃΔⲆ.la[ya];
    ⵠᐃΔⲆ.la[nl] = ⵠᐃΔⲆ.la[Rq];
    ⵠᐃΔⲆ.la[5] = ⵠᐃΔⲆ.la[0];
    ⵠᐃΔⲆ.s = [];
    ⵠᐃΔⲆ.s[Da] = [Ⲇⵠ.ΔⲆᐃΔᐃᐃᐃ, Ⲇⵠ.ⵠⵠⲆⲆᐃⵠⲆ];
    ⵠᐃΔⲆ.s[mk] = ⵠᐃΔⲆ.s[Lr];
    ⵠᐃΔⲆ.s[jk] = [Ⲇⵠ.ⵠⵠⲆⲆΔᐃⵠ, Ⲇⵠ.ⲆᐃⵠΔᐃⲆⵠ];
    ⵠᐃΔⲆ.p = [];
    ⵠᐃΔⲆ.p[ya] = [Ⲇⵠ.ⲆΔΔⲆΔᐃᐃ, Ⲇⵠ.ⲆΔΔⲆΔᐃᐃ];
    ⵠᐃΔⲆ.a = [];
    ⵠᐃΔⲆ.a[Hi] = [Ⲇⵠ.ΔⲆΔΔⵠⵠⲆ, Ⲇⵠ.ⵠᐃⵠΔⵠⲆΔ];
    ⵠᐃΔⲆ.a[1] = ⵠᐃΔⲆ.a[Yh];
    ⵠᐃΔⲆ.a[Ug] = ⵠᐃΔⲆ.a[mj];
    ⵠᐃΔⲆ.d = [];
    ⵠᐃΔⲆ.d[0] = [Ⲇⵠ.ᐃΔⵠᐃⲆᐃⵠ, Ⲇⵠ.ⵠᐃᐃᐃⲆⲆᐃ];
    ⵠᐃΔⲆ.d[1] = ⵠᐃΔⲆ.d[0];
    ⵠᐃΔⲆ.d[It] = ⵠᐃΔⲆ.d[0];
    ⵠᐃΔⲆ.re = [];
    ⵠᐃΔⲆ.re[Yh] = [Ⲇⵠ.ᐃⵠᐃᐃΔⵠᐃ, Ⲇⵠ.ⵠΔⲆΔⲆᐃΔ];
    ⵠᐃΔⲆ.re[pu] = ⵠᐃΔⲆ.re[Ih];
    ⵠᐃΔⲆ.re[Lt] = ⵠᐃΔⲆ.re[ig];
    ⵠᐃΔⲆ.f = [];
    ⵠᐃΔⲆ.f[os] = [Ⲇⵠ.ΔᐃⵠᐃΔᐃᐃ, Ⲇⵠ.ⵠΔΔⵠⲆᐃᐃ];
    ⵠᐃΔⲆ.f[1] = ⵠᐃΔⲆ.f[0];
    ⵠᐃΔⲆ.f[2] = ⵠᐃΔⲆ.f[0];
    ⵠᐃΔⲆ.isl = [];
    ⵠᐃΔⲆ.isl[0] = [Ⲇⵠ.ΔΔΔⲆᐃΔΔ, Ⲇⵠ.ᐃⲆⵠΔᐃᐃⵠ];
    ⵠᐃΔⲆ.isl[Hg] = ⵠᐃΔⲆ.isl[0];
    ⵠᐃΔⲆ.isl[Ul] = ⵠᐃΔⲆ.isl[0];
    ⵠᐃΔⲆ.c = [];
    ⵠᐃΔⲆ.c[eu] = [Ⲇⵠ.ΔᐃⵠΔⲆⵠᐃ, Ⲇⵠ.ΔᐃⵠⲆⲆᐃⵠ];
    ⵠᐃΔⲆ.c[Gh] = ⵠᐃΔⲆ.c[wg];
    ⵠᐃΔⲆ.c[2] = ⵠᐃΔⲆ.c[ig];
    ⵠᐃΔⲆ.wtb = [];
    ⵠᐃΔⲆ.wtb[Ih] = [Ⲇⵠ.ⲆⲆⵠᐃⲆΔⲆ, Ⲇⵠ.ⲆᐃⲆⲆΔᐃⲆ];
    ⵠᐃΔⲆ.PIRANHA = [Ⲇⵠ.ΔΔΔⲆⲆⲆᐃ, Ⲇⵠ.ⵠⲆⵠⲆⲆⵠΔ];
    ⵠᐃΔⲆ.KRAKEN = [Ⲇⵠ.ⵠⲆⲆⲆⲆⵠⲆ, Ⲇⵠ.ⵠⲆΔΔⲆⵠⲆ];
    ⵠᐃΔⲆ.FOX = [Ⲇⵠ.ᐃⵠⲆΔᐃⲆⵠ, Ⲇⵠ.ⲆⵠΔᐃΔⲆᐃ];
    ⵠᐃΔⲆ.WOLF = [Ⲇⵠ.ⲆᐃⲆᐃᐃᐃⵠ, Ⲇⵠ.ⵠⲆⵠⵠΔᐃⵠ];
    ⵠᐃΔⲆ.SPIDER = [Ⲇⵠ.ⵠΔⲆⵠᐃΔⲆ, Ⲇⵠ.ᐃⵠᐃΔᐃΔᐃ];
    ⵠᐃΔⲆ.BEAR = [Ⲇⵠ.ΔⵠⲆⵠᐃⵠⵠ, Ⲇⵠ.ⲆΔΔⲆΔᐃⵠ];
    ⵠᐃΔⲆ.CAVE = [Ⲇⵠ.ⲆᐃᐃⵠΔⲆᐃ, Ⲇⵠ.ΔⲆᐃⲆⵠⲆⲆ];
    ⵠᐃΔⲆ.MAP = [Ⲇⵠ.ⲆᐃᐃⲆⲆⲆⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔΔ];
    ⵠᐃΔⲆ.FOREST = [Ⲇⵠ.ⵠⲆⲆⵠᐃⲆΔ, Ⲇⵠ.ⲆΔⲆΔⲆⲆⲆ];
    ⵠᐃΔⲆ.WINTER = [Ⲇⵠ.ⵠΔΔᐃΔᐃⵠ, Ⲇⵠ.ΔΔⲆᐃᐃΔⵠ];
    ⵠᐃΔⲆ.DESERT = [Ⲇⵠ.ⲆⵠᐃΔⵠⵠⵠ, Ⲇⵠ.ᐃⲆⵠΔⵠᐃᐃ];
    ⵠᐃΔⲆ.LAVA = [Ⲇⵠ.ᐃᐃᐃΔᐃΔΔ, Ⲇⵠ.ⲆⲆⲆΔⲆⲆᐃ];
    for (var b in ⵠᐃΔⲆ) {
      for (var c = ⵠᐃΔⲆ[b], d = Lr; d < c.length; d++) {
        var e = c[d];
        if (e.ⲆⲆⲆⵠᐃᐃⲆ !== Lj) {
          e.ⲆⲆⲆⵠᐃᐃⲆ();
        } else if (e.length > 0) {
          for (var f = 0; f < e.length; f++) {
            if (e[f].ⲆⲆⲆⵠᐃᐃⲆ !== wr) {
              e[f].ⲆⲆⲆⵠᐃᐃⲆ();
            }
          }
        }
      }
    }
    console.log(undefined, undefined);
  }
  function am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = sd;
    e.translate(qh * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    db(e, c[0]);
    e.translate(a * -20, -nh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    db(e, c[Wl], c[2], mg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    db(e, undefined, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    db(e, undefined, c[It], a * ha);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    db(e, c[Lg], c[Ul], a * ol);
    Tb(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    db(e, c[4]);
    Tb(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    db(e, c[Gi]);
    Tb(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    db(e, c[nl]);
    Tb(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    db(e, c[Pl]);
    Tb(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    db(e, c[4]);
    Tb(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    db(e, c[tb]);
    Tb(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    db(e, c[Ng]);
    Tb(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    db(e, c[4]);
    Tb(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    db(e, c[Vn]);
    Tb(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    db(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    db(e, c[kq]);
    return d;
  }
  function sm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    db(d, b[0]);
    return c;
  }
  function hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * rl, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    db(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -Oj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, ar * a, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * Sq, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    db(e, c[1], c[2], a * 6);
    return d;
  }
  function lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Cb(e, Qa, a * 40, a * 10);
    e.restore();
    db(e, c[0], c[1], a * Hh);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Cb(e, As, a * 25.11521001172521, a * 10);
    e.restore();
    db(e, c[Rl], c[3], a * 5);
    return d;
  }
  function gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    db(e, cb, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    db(e, xg, c[au], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    db(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    db(e, c[Tl], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    db(e, c[1], c[eh], Mq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    db(e, c[1], c[3], a * tb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    db(e, c[wt], c[3], nl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    db(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    db(e, tt, c[sl], Ct * a);
    return d;
  }
  function um(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var i = b * 142;
    var a = g / 2;
    var j = i / rs;
    e.width = g;
    e.height = i;
    f.translate(a, j + b * 7);
    f.globalAlpha = c ? 0.5 : Tl;
    Tb(f, Zj, Yh, b * 60);
    db(f, d[0]);
    f.translate(Yh, b * -7);
    f.globalAlpha = 1;
    Tb(f, Zj, st, b * 60);
    db(f, d[Hg], d[Lt], Pe * b);
    Tb(f, Lr, wg, b * 40);
    db(f, d[3]);
    Tb(f, 0, 0, b * 25);
    db(f, d[Wg], d[5], b * Bi);
    return e;
  }
  function bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * eh, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    yb(e, a * -16, a * -16.5, a * 32, a * 33, Rr * a);
    e.restore();
    db(e, c[Rl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    db(e, c[pq]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    yb(e, a * -15.5, a * -16, a * 31, a * 32, jh * a);
    e.restore();
    db(e, c[pq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    db(e, c[Vg]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    yb(e, a * -16.5, a * -17.5, a * 33, a * 35, uh * a);
    e.restore();
    db(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    db(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    yb(e, a * -io, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    db(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    db(e, c[pq]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    yb(e, a * -18, a * -Gg, a * 36, a * 38, N * a);
    e.restore();
    db(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    db(e, c[as]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    yb(e, a * -A, a * -17.5, a * 40, a * 35, a * Xs);
    e.restore();
    db(e, c[pq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    db(e, c[as]);
    e.globalAlpha = 1;
    e.translate(0, a * -Zk);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    yb(e, a * -G, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    db(e, c[3], c[ba], M * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    db(e, xg, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    yb(e, a * -15.5, a * -16, a * 31, a * 32, a * jh);
    e.restore();
    db(e, c[ll], c[4], Ig * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    db(e, Hl, c[4], Ig * a);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    yb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    db(e, c[nq], c[Ct], q * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    db(e, undefined, c[Gi], a * Oj);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    yb(e, a * -18, -Vq * a, a * 36, a * 36, Is * a);
    e.restore();
    db(e, c[Tr], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    db(e, Hl, c[Mq], a * Qu);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    yb(e, a * -18, a * -19, a * 36, a * 38, a * Ar);
    e.restore();
    db(e, c[ci], c[Wg], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    db(e, j, c[Wg], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    yb(e, a * -20, a * -17.5, a * 40, a * 35, a * _s);
    e.restore();
    db(e, c[3], c[4], Ot * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    db(e, cn, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    Cb(e, Rs, a * 70.28669492273468, a * 10);
    e.restore();
    db(e, c[lr]);
    e.save();
    e.translate(a * 98, a * 99);
    Cb(e, Qa, a * 56.455940020351264, xt * a);
    e.restore();
    db(e, c[2]);
    e.globalAlpha = au;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    Cb(e, 6, a * 70.28669492273468, a * te);
    e.restore();
    db(e, c[5], c[Rs], a * Ig);
    e.save();
    e.translate(a * 98, a * 99);
    Cb(e, Ro, a * 56.455940020351264, Yg * a);
    e.restore();
    db(e, c[Aq], c[Jl], Is * a);
    return d;
  }
  function vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, Pe * a);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, Cq * a, a * 16);
    e.closePath();
    db(e, c[In]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    db(e, c[Xn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    db(e, c[Oq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    db(e, c[Pn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * Dh, ah * a, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(el * a, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * W, a * 106.5, a * pu, a * 97);
    e.closePath();
    db(e, c[Js]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, E * a, a * 53, a * Vn, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    db(e, El, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    db(e, Gs, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * vi, a * 73, a * 12.5, a * 80.5, a * rl, a * 72);
    e.closePath();
    db(e, undefined, c[ba], Rs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    db(e, lj, c[4], Th * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    db(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    db(e, wr, c[Wg], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    db(e, undefined, c[4], a * ji);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * dt, a * 55, a * 6);
    e.closePath();
    db(e, Lj, c[es], a * 6);
    return d;
  }
  function dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, zs);
    e.translate(a * -110, 0);
    e.translate(Bo * a, gn * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    yb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    db(e, c[Yh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, U * a);
    e.bezierCurveTo(a * 34, a * 10, Xk * a, a * 43, Oj * a, a * 76);
    e.bezierCurveTo(Ls * a, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * xs, a * 164, $n * a, a * 156);
    e.bezierCurveTo(a * In, a * 186, a * Ht, a * 201, a * 43, a * 220);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    db(e, c[Yh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    db(e, c[Yh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    db(e, c[Mg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    db(e, c[wj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    db(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    db(e, c[0]);
    e.translate(-Ra * a, a * -10);
    e.globalAlpha = au;
    e.save();
    e.translate(a * 51.5, a * 342);
    yb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    db(e, c[$b], c[2], Eq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    db(e, c[sl], c[4], qq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * Ck);
    e.bezierCurveTo(a * 34, a * 10, Ro * a, a * 43, a * Eq, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    db(e, c[Zg], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    db(e, c[$n], c[8], a * va);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    db(e, Gs, c[He], As * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    db(e, Jo, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    db(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    db(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * wh, a * 117, qg * a, a * 110);
    e.bezierCurveTo(At * a, a * 115, Zt * a, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    db(e, c[7], c[8], nk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    db(e, c[7], c[8], Na * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    db(e, c[jh], c[E], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    db(e, c[7], c[He], a * Xk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    db(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    db(e, c[Nl], c[8], a * nk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    db(e, c[3], c[gl], a * 6);
    return d;
  }
  function cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    db(e, c[3], c[4], Mq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, ck * a, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, qi * a, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    db(e, c[3], c[4], a * Vn);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(ig);
    yb(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    db(e, c[fl], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    yb(e, a * -49, a * -12.5, a * 98, a * 25, eo * a);
    e.restore();
    db(e, c[xj], c[mk], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    db(e, c[xj], c[1], Pe * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    db(e, c[Pn], c[au], $i * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    db(e, c[3], c[Ct], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    db(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Bl * a, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * Pl, a * 14.3671875, a * Cg, a * 18.3671875, a * zh, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, bg * a, a * 56.3671875);
    e.closePath();
    db(e, c[fn], c[es], Fr * a);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    yb(e, a * -20.5, a * -20.5, a * 41, a * 41, a * te);
    e.restore();
    db(e, undefined, c[5], es * a);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    yb(e, a * -21, a * -20.5, a * 42, a * 41, a * lg);
    e.restore();
    db(e, c[Tt], c[4], a * ls);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    yb(e, a * -10, -Lb * a, a * 20, a * 20, a * 5);
    e.restore();
    db(e, c[6], c[Nl], a * $l);
    return d;
  }
  function mm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, -sk * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    db(d, b[Hi]);
    return c;
  }
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * Ah, a * 129, a * 18, a * 114, ih * a);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, Sh * a);
    e.bezierCurveTo(On * a, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    db(e, c[Rl], c[3], Pe);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    db(e, c[eu], c[mk], $l);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Xa, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(sh * a, a * 49, a * 19, a * 49, a * ul, a * 54);
    e.bezierCurveTo(a * 4, a * 43, Bo * a, a * 35, a * 20, a * 32);
    e.closePath();
    db(e, c[Yh], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Us * a, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * ro, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    db(e, c[0], c[1], 4);
    return d;
  }
  function Cm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * nh;
    c.height = a * 35;
    yb(d, 0, eu, vi, 35, 7);
    db(d, b[ig]);
    return c;
  }
  function Tm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    Tb(d, a * 126.5, a * 134, a * 119);
    db(d, b[ya]);
    d.globalAlpha = 1;
    Tb(d, a * 126.5, a * 124, a * 119);
    db(d, b[Tl], b[2], a * ls);
    Tb(d, a * 126.5, a * 127, a * ns);
    db(d, b[3]);
    d.globalAlpha = 0.5;
    Tb(d, a * 126.5, a * 135, a * 81);
    db(d, b[0]);
    d.globalAlpha = 1;
    Tb(d, a * 126.5, a * 125, a * 84);
    db(d, b[4], b[Zg], a * 4);
    Tb(d, a * 126.5, a * 125, a * 61);
    db(d, b[Th], b[7], a * 4);
    d.globalAlpha = 0.5;
    Tb(d, a * 126.5, a * 134, a * 40);
    db(d, b[Dg]);
    d.globalAlpha = 1;
    Tb(d, a * 126.5, a * 125, a * 40);
    db(d, b[9]);
    return c;
  }
  function fm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    db(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    db(d, b[2], b[ea], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    db(d, b[2]);
    return c;
  }
  function zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(mb * a, a * 5);
    e.globalAlpha = b ? ya : Lr;
    Tb(e, a * 178.5, a * 172.828125, a * 150);
    db(e, undefined, c[ig], a * 65);
    Tb(e, a * 178.5, a * 172.828125, a * 150);
    db(e, Lj, c[Zj], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    yb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    db(e, c[ya]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    yb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    db(e, c[Mg]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    yb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    db(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(os, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    db(e, c[0]);
    e.translate(Wb, a * -z);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    db(e, c[Yh]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    db(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = og;
    e.translate(a * on, a * 35);
    Tb(e, a * 178.5, a * 172.828125, a * 150);
    db(e, T, c[2], a * 95);
    Tb(e, a * 178.5, a * 172.828125, a * 150);
    db(e, undefined, c[hb], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    yb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    db(e, c[wt], c[Lt], a * nh);
    e.save();
    e.translate(a * 136, a * 581.828125);
    yb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    db(e, c[Xn], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    yb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    db(e, c[ie], c[2], Dl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    db(e, c[za]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, Hh * a);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    db(e, c[gs]);
    e.translate(Hi, -Hh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    db(e, c[Tl]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    db(e, c[mk], c[1], a * 7);
    e.restore();
    return d;
  }
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(In, es * a);
    if (Ft === Ih) {
      e.globalAlpha = b ? 0.5 : gs;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(Tl);
      Cb(e, 8, a * 41, a * J);
      db(e, c[Mg]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    Cb(e, 8, a * 41, a * 10);
    db(e, c[Xn], c[2], a * Pe);
    e.rotate(0.56);
    Cb(e, _a, a * 33, a * Bo);
    db(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    Cb(e, 8, a * 24, aa * a);
    db(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    yb(e, a * -9, a * -25.5, a * Vq, a * 51, a * 30);
    e.restore();
    db(e, c[Ng], c[$i], vg * a);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(ya);
    yb(e, a * -26, a * -9, a * 52, a * kn, a * 30);
    e.restore();
    db(e, c[4], c[4], a * 2);
    Tb(e, a * 45, a * 29, a * Cg);
    db(e, c[5]);
    Tb(e, a * 45, a * 61, a * 7);
    db(e, c[5]);
    Tb(e, a * 28, a * 45, a * 7);
    db(e, c[5]);
    Tb(e, a * 62, a * 45, a * Rr);
    db(e, c[hl]);
    return d;
  }
  function wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(Qs, ag * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    db(e, c[ig]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, zn * a, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    db(e, undefined, c[Qs], a * 11);
    e.translate(0, a * -q);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    db(e, c[qu], c[Rl], a * 12);
    e.translate(Yh, a * 25);
    e.globalAlpha = Oq;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    db(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    db(e, c[1], c[xj], Ka * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    db(e, undefined, c[2], a * Zr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    db(e, Gs, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    db(e, c[za], c[Vg], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    db(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    db(e, c[Ng], c[lr], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    db(e, j, c[2], a * Ol);
    return d;
  }
  function Pm(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var i = g.getContext("2d");
    if (e == Da) {
      var a = b * 270;
      var j = b * 250;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 140, b * 3);
      i.translate(b * -25, b * -to);
      i.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      i.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      i.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      i.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      i.bezierCurveTo(nh * b, b * 158, b * 35, b * 78, b * 59, b * 56);
      i.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      i.closePath();
      db(i, d[mj]);
    } else if (e == Tl) {
      a = b * 430;
      j = b * 350;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 180, b * 5);
      i.translate(b * -30, b * -60);
      i.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      i.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      i.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * Ms, b * 386);
      i.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      i.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      i.closePath();
      db(i, d[Yh]);
    } else if (e == Rl) {
      a = b * 400;
      j = b * 300;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 80, b * 52);
      i.translate(b * -40, b * -30);
      i.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      i.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      i.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      i.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      i.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      i.closePath();
      db(i, d[0]);
    }
    return g;
  }
  function Am() {
    if (!Xw.ΔⲆΔΔ.open && !Xw.ᐃⲆⵠⲆΔ.open) {
      Xw.ΔΔᐃⵠ.open = Qg;
      var b = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = kw.ⲆⲆⲆᐃⵠΔΔ;
      if (b) {
        for (var d = 0; d < ow.length; d++) {
          for (var e = ow[d][0], f = ow[d][Tl], j = Hi; j < cf.ⲆΔⲆ[e].length; j++) {
            var k = cf.ⲆΔⲆ[e][j];
            var m = ᐃⵠΔⲆ.ΔΔⵠΔ(k, b);
            if (m < c) {
              c = m;
              Xw.ΔΔᐃⵠ.ΔΔΔⵠΔⲆΔ = f;
              Xw.ΔΔᐃⵠ.type = e;
              Xw.ΔΔᐃⵠ.open = true;
              Xw.ΔΔᐃⵠ.ⲆⲆᐃΔⵠⲆᐃ = k.info & 255;
              Xw.ΔΔᐃⵠ.ΔⲆⲆᐃΔᐃᐃ = (k.info & 65280) >> On;
              Xw.ΔΔᐃⵠ.Ⲇⵠⵠᐃ = k.Ⲇⵠⵠᐃ;
              Xw.ΔΔᐃⵠ.ⵠΔᐃⲆⲆ = k.id;
            }
          }
        }
        if (kw.ⲆⲆⲆᐃⵠΔΔ > c) {
          var p = ΔΔ[656];
          var h = (q = Zw.ΔᐃⵠⲆⵠⵠΔ).info.translate.x - 33;
          Jm(ho, p, h, Mg);
          if (Xw.ΔΔᐃⵠ.ⲆⲆᐃΔⵠⲆᐃ > 0) {
            q.ᐃⵠᐃⵠ(ho);
            var l = Xw.ΔΔᐃⵠ.ⲆⲆᐃΔⵠⲆᐃ;
            if (Tl < l) {
              Rm(l, q);
            }
          }
          switch (Xw.ΔΔᐃⵠ.ΔΔΔⵠΔⲆΔ) {
            case 108:
              var q = Zw.ⲆΔΔⲆΔⲆᐃ;
              break;
            case 111:
              q = Zw.ΔⲆΔᐃΔΔⲆ;
              break;
            case 112:
              q = Zw.ᐃⵠᐃⵠᐃᐃΔ;
              break;
            case 121:
              q = Zw.ⵠᐃᐃΔⲆΔᐃ;
              break;
            case 202:
              q = Zw.ⲆⵠⲆΔΔⲆⲆ;
          }
          if (wj < Xw.ΔΔᐃⵠ.ΔⲆⲆᐃΔᐃᐃ) {
            q.ᐃⵠᐃⵠ(ho);
            if ((l = Xw.ΔΔᐃⵠ.ΔⲆⲆᐃΔᐃᐃ) > 1) {
              Rm(l, q);
            }
          }
        }
      }
    }
  }
  function km() {
    Xw.ΔⲆΔΔ.id = -$b;
    Xw.ΔⲆΔΔ.lock = false;
    Xw.ΔⲆΔΔ.locked = false;
    Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ = f;
    Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ = false;
    Xw.ΔⲆΔΔ.open = Jn;
    var b = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
    var c = kw.ᐃᐃΔᐃⵠΔⲆ;
    if (b) {
      for (var d = Rq; d < cf.ⲆΔⲆ[nw.ᐃⲆⲆⲆⲆ].length; d++) {
        var e = cf.ⲆΔⲆ[nw.ᐃⲆⲆⲆⲆ][d];
        var g = ᐃⵠΔⲆ.ΔΔⵠΔ(e, b);
        if (g < c) {
          c = g;
          Xw.ΔⲆΔΔ.open = true;
          Xw.ΔⲆΔΔ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          Xw.ΔⲆΔΔ.ⵠᐃⵠⲆ = e.info;
          Xw.ΔⲆΔΔ.Ⲇⵠⵠᐃ = e.Ⲇⵠⵠᐃ;
          Xw.ΔⲆΔΔ.ⵠΔᐃⲆⲆ = e.id;
          Xw.ΔⲆΔΔ.locked = e.lock;
          Xw.ΔⲆΔΔ.lock = e.lock && e.Ⲇⵠⵠᐃ != Xw.id && !Xw.ᐃⲆⵠⲆⵠⵠᐃ(e.Ⲇⵠⵠᐃ) ? Tg : vt;
          Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ = e.Ⲇⵠⵠᐃ === Xw.id && !Xw.ΔⲆΔΔ.locked && Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(148) != -1;
          if (Xw.ΔⲆΔΔ.locked && -pu != Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(158)) {
            Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ = true;
          }
        }
      }
      if (kw.ᐃᐃΔᐃⵠΔⲆ > c) {
        var j = ΔΔ[339];
        var k = Zw.ⲆⵠΔ[eu];
        var m = Math.floor(k.info.translate.x + (k.info.ⵠⵠ[0].width - j.width) / xj);
        var p = Math.floor(k.info.translate.y + (k.info.ⵠⵠ[ig].height - j.height) / H) + Tt;
        Jm(ho, j, m, p);
        if ((!Xw.ΔⲆΔΔ.lock || Xw.id === Xw.ΔⲆΔΔ.Ⲇⵠⵠᐃ) && Xw.ΔⲆΔΔ.id >= In) {
          (k = Zw.ⲆⵠΔ[Xw.ΔⲆΔΔ.id]).ᐃⵠᐃⵠ(ho);
          var h = Xw.ΔⲆΔΔ.ⵠᐃⵠⲆ;
          if (h > 1) {
            Rm(h, k);
          }
        }
        if (Xw.ΔⲆΔΔ.lock) {
          Zw.ΔΔᐃⵠⵠⵠⵠ.ᐃⵠᐃⵠ(ho);
        } else if (Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ) {
          Zw.ⲆΔⵠᐃⲆⵠⲆ.ᐃⵠᐃⵠ(ho);
        }
        if (Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ) {
          Zw.ⵠᐃⲆΔΔⲆΔ.ᐃⵠᐃⵠ(ho);
        }
      }
    }
  }
  function xm() {
    var a = Zw.Ⲇⵠᐃⵠⵠ;
    var b = a.id;
    if (a.ⵠⲆⲆᐃⲆ === sd && a.display === Wl) {
      if (ⵠⲆᐃᐃΔ[b] === undefined) {
        ⵠⲆᐃᐃΔ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = Et[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[ya]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          Ft = xq;
          for (; e.length > Ft; Ft++) {
            f = Math.max(f, d.measureText(e[Ft]).width);
          }
          var g = f + 35;
          var h = ya;
          h = e.length === 1 ? 55 : H === e.length ? 85 : (e.length - lr) * 26 + 85;
          c.width = g;
          c.height = h;
          yb(d, 0, 0, g, h, Zk);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (ie <= e.length) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[Qs], Qh, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], v, 55);
            h = 55;
          }
          if (e.length >= Tt) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            Ft = Vg;
            for (; Ft < e.length; Ft++) {
              d.fillText(e[Ft], mt, h + 28);
              h += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ΔᐃⲆⵠ === og) {
        Jm(ho, ⵠⲆᐃᐃΔ[b], a.x, a.y);
      } else if (lo < a.x - 80 + ⵠⲆᐃᐃΔ[b].width) {
        Jm(ho, ⵠⲆᐃᐃΔ[b], lo - ⵠⲆᐃᐃΔ[b].width - Yg, a.y - ⵠⲆᐃᐃΔ[b].height - Cs);
      } else {
        Jm(ho, ⵠⲆᐃᐃΔ[b], a.x - 80, a.y - ⵠⲆᐃᐃΔ[b].height - Lb);
      }
    }
  }
  function Jm(b, c, d, e, f, g, i, a, j, h) {
    if (c.ⲆⲆⲆⵠᐃᐃⲆ === undefined || c.ⲆⲆⲆⵠᐃᐃⲆ() === 1) {
      if (Jo !== h) {
        b.drawImage(c, d, e, Math.max(mk, f), Math.max(1, g), i, a, j, h);
      } else if (g !== wr) {
        b.drawImage(c, d, e, f, g);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function Mm() {
    Xw.ⲆᐃⵠᐃⲆ.open = _h;
    var a = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
    var b = kw.ⲆⵠᐃⲆⲆΔⲆ;
    if (a) {
      for (var c = eu; c < cf.ⲆΔⲆ[nw.ⲆⲆⵠⵠᐃ].length; c++) {
        var d = cf.ⲆΔⲆ[nw.ⲆⲆⵠⵠᐃ][c];
        var e = ᐃⵠΔⲆ.ΔΔⵠΔ(d, a);
        if (e < b) {
          b = e;
          Xw.ⲆᐃⵠᐃⲆ.open = Yl;
          Xw.ⲆᐃⵠᐃⲆ.Ⲇⵠⵠᐃ = d.Ⲇⵠⵠᐃ;
          Xw.ⲆᐃⵠᐃⲆ.ⵠΔᐃⲆⲆ = d.id;
        }
      }
      if (kw.ⲆⵠᐃⲆⲆΔⲆ > b) {
        Zw.ⲆᐃⵠᐃⲆ.ᐃⵠᐃⵠ(ho);
      }
    }
  }
  function Bm() {
    if (Bb < Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length) {
      var b = {
        x: Zw.ΔΔΔⲆⵠ.translate.x,
        y: Zw.ΔΔΔⲆⵠ.translate.y - Co * 120
      };
    } else {
      b = {
        x: Zw.ΔΔΔⲆⵠ.translate.x,
        y: Zw.ΔΔΔⲆⵠ.translate.y - Co * 50
      };
    }
    ho.globalAlpha = 0.8;
    var c = ΔΔ[259][cf.time];
    Jm(ho, c, b.x, b.y);
    ho.globalAlpha = 1;
    if (-pu < Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.x) {
      ho.fillStyle = "#660000";
      Tb(ho, b.x + Co * Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.x, b.y + Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.y * Co, Co * Qu);
      ho.fill();
    }
    var d = Co;
    for (var f = Zw.ΔΔΔⲆⵠ.ⵠΔΔⲆ, g = mj; g < f.length; g++) {
      var h = f[g];
      cf.time;
      ho.fillStyle = "#ff0000";
      Tb(ho, b.x + Co * (h.x / (cf.ⵠⲆᐃⲆᐃ * 100) * 193), b.y + Co * (h.y / (cf.ⲆⵠⲆⵠᐃ * 100) * 193), Co * 2);
      ho.fill();
    }
    var i = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
    if (i) {
      ho.fillStyle = cf.time ? "#fff" : "#e39716";
      Tb(ho, b.x + Co * (i.x / (cf.ⵠⲆᐃⲆᐃ * Nn) * 193), b.y + Co * (i.y / (cf.ⲆⵠⲆⵠᐃ * 100) * 193), Ls * Co);
      ho.fill();
    }
    Co = d;
  }
  function Dm() {
    if (!Xw.ΔⲆΔΔ.open && !Xw.ᐃⲆⵠⲆΔ.open) {
      Xw.ᐃⵠᐃᐃ.open = false;
      var b = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = kw.ⵠᐃⲆᐃⲆᐃᐃ;
      if (b) {
        for (var d = 0; d < cf.ⲆΔⲆ[nw.ⵠΔⲆⲆΔ].length; d++) {
          var e = cf.ⲆΔⲆ[nw.ⵠΔⲆⲆΔ][d];
          var f = ᐃⵠΔⲆ.ΔΔⵠΔ(e, b);
          if (c > f) {
            c = f;
            Xw.ᐃⵠᐃᐃ.open = true;
            Xw.ᐃⵠᐃᐃ.ΔⲆΔⲆᐃΔⵠ = e.info & 255;
            Xw.ᐃⵠᐃᐃ.ΔⲆⵠⵠΔ = (e.info & 65280) >> Hr;
            Xw.ᐃⵠᐃᐃ.Ⲇⵠⵠᐃ = e.Ⲇⵠⵠᐃ;
            Xw.ᐃⵠᐃᐃ.ⵠΔᐃⲆⲆ = e.id;
          }
        }
        if (kw.ⵠᐃⲆᐃⲆᐃᐃ > c) {
          var g = ΔΔ[655];
          var j = (k = Zw.ⵠⵠⲆⵠΔⵠΔ).info.translate.x - 33;
          Jm(ho, g, j, In);
          if (Xw.ᐃⵠᐃᐃ.ΔⲆΔⲆᐃΔⵠ > 0) {
            k.ᐃⵠᐃⵠ(ho);
            if ((a = Xw.ᐃⵠᐃᐃ.ΔⲆΔⲆᐃΔⵠ) > 1) {
              Rm(a, k);
            }
          }
          var a;
          var k = Zw.ΔᐃΔⲆᐃΔᐃ;
          if (Xw.ᐃⵠᐃᐃ.ΔⲆⵠⵠΔ > 0) {
            k.ᐃⵠᐃⵠ(ho);
            if ((a = Xw.ᐃⵠᐃᐃ.ΔⲆⵠⵠΔ) > 1) {
              Rm(a, k);
            }
          }
        }
      }
    }
  }
  function Im(a, b, c) {
    var d = ΔΔ[465][a];
    var e = b.info.translate.x + Co * Ll;
    var f = b.info.translate.y + Co * ta;
    if (b.info.state == Yv || c) {
      f += Hh * Co;
    }
    Jm(ho, d, e, f);
  }
  function Em() {
    Xw.ΔⵠⲆᐃᐃ.id = -Xn;
    Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ = -mk;
    if (!Xw.ᐃⲆⲆΔΔᐃᐃ && !Xw.ΔⵠⲆᐃᐃ.wait && !Xw.ⲆᐃⲆⵠᐃ) {
      var b = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = kw.ⵠΔΔⵠΔΔⵠⲆⵠ;
      if (b) {
        for (var d = st; d < cf.ⲆΔⲆ[nw.ⲆⵠᐃᐃΔ].length; d++) {
          var e = cf.ⲆΔⲆ[nw.ⲆⵠᐃᐃΔ][d];
          var f = ᐃⵠΔⲆ.ΔΔⵠΔ(e, b);
          if (f < c) {
            c = f;
            Xw.ΔⵠⲆᐃᐃ.id = e.id;
            Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ = e.Ⲇⵠⵠᐃ;
            Xw.ΔⵠⲆᐃᐃ.info = e.info;
            Xw.ΔⵠⲆᐃᐃ.lock = (e.info & 16) >> Ct;
          }
        }
      }
      var g = Zw.ᐃⵠᐃᐃⲆ;
      Zw.ᐃⵠᐃᐃⲆ = -1;
      if (Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ == -za || Xw.ᐃΔⲆⲆⵠ.length != 0 && Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ != Xw.id) {
        if (Xw.ᐃΔⲆⲆⵠ.length != 0 && Xw.ᐃΔⲆⲆⵠ[0] != Xw.id) {
          Zw.ᐃⵠᐃᐃⲆ = jw.ᐃⵠᐃⲆΔΔⵠ;
        } else if (Xw.ᐃΔⲆⲆⵠ.length != 0 && Xw.id == Xw.ᐃΔⲆⲆⵠ[os]) {
          Zw.ᐃⵠᐃᐃⲆ = jw.ⵠᐃᐃⵠᐃΔΔ;
        } else if (Xw.ᐃΔⲆⲆⵠ.length != 0) {
          Zw.ᐃⵠᐃᐃⲆ = jw.ΔᐃΔΔΔⲆⲆ;
        }
      } else if (wj == Xw.ᐃΔⲆⲆⵠ.length && E <= Xw.ΔⵠⲆᐃᐃ.info) {
        Zw.ᐃⵠᐃᐃⲆ = jw.ᐃⲆΔⵠᐃⵠⵠ;
      } else if (Xw.ᐃΔⲆⲆⵠ.length == 0) {
        Zw.ᐃⵠᐃᐃⲆ = jw.ΔᐃΔΔΔⲆⲆ;
      } else {
        Zw.ᐃⵠᐃᐃⲆ = jw.ᐃⲆᐃⲆⵠⵠΔ;
      }
      if (Zw.ᐃⵠᐃᐃⲆ != -1) {
        Zw.ⲆΔⵠᐃᐃ[Zw.ᐃⵠᐃᐃⲆ].button.ᐃⵠᐃⵠ(ho);
      }
      var h = document.getElementById("team_box").style;
      if (Zw.ᐃⵠᐃᐃⲆ != -sd && Zw.ᐃⵠᐃᐃⲆ != g && h.display == "inline-block") {
        Zw.ⲆΔⵠᐃᐃ[Zw.ᐃⵠᐃᐃⲆ].action();
      }
    }
  }
  function Sm() {
    if (Xw.reconnect.enabled) {
      ho.globalAlpha = 0.9;
      ho.fillStyle = "#000";
      yb(ho, bo - 150, lq - 90, 300, 180, _o);
      ho.fill();
      ho.globalAlpha = au;
      var a = ΔΔ[301];
      ho.save();
      Xw.reconnect.rotate = (Xw.reconnect.rotate + _w * 2) % (Rl * Math.PI);
      ho.translate(lo / Ug, jq / 2 - 25);
      ho.rotate(Xw.reconnect.rotate);
      Jm(ho, a, -a.width / Pn, -a.height / eh);
      ho.restore();
      a = ΔΔ[525];
      Jm(ho, a, (lo - a.width) / 2, (jq - a.height) / vg + 25);
    }
  }
  function Qm() {
    if (Xw.ⲆⲆΔΔΔᐃᐃ) {
      ho.globalAlpha = 0.5;
      ho.fillStyle = "#000";
      ho.fillRect(0, st, lo, jq);
      ho.globalAlpha = 0.8;
      var b = ΔΔ[516][cf.time];
      var c = bo - b.width / pq;
      var d = lq - b.height / Rl;
      Jm(ho, b, c, d);
      ho.globalAlpha = za;
      if (Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.x > -1) {
        ho.fillStyle = "#660000";
        Tb(ho, c + Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.x * 3 * Co, d + Co * (Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.y * Wb), Wr * Co);
        ho.fill();
      }
      for (var e = Zw.ΔΔΔⲆⵠ.ⵠΔΔⲆ, f = 0; f < e.length; f++) {
        var g = e[f];
        cf.time;
        ho.fillStyle = "#ff0000";
        Tb(ho, c + Co * (g.x / (cf.ⵠⲆᐃⲆᐃ * 100) * 600), d + g.y / (ar * cf.ⲆⵠⲆⵠᐃ) * 600 * Co, Co * Rs);
        ho.fill();
      }
      var h = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      if (h) {
        ho.fillStyle = cf.time ? "#fff" : "#e39716";
        Tb(ho, c + Co * (h.x / (cf.ⵠⲆᐃⲆᐃ * 100) * 600), d + Co * (h.y / (cf.ⲆⵠⲆⵠᐃ * 100) * 600), Mt * Co);
        ho.fill();
      }
    }
  }
  function _m() {
    if (!Xw.ΔⲆΔΔ.open && !Xw.ᐃⲆⵠⲆΔ.open && !Xw.ᐃⵠᐃᐃ.open && !Xw.ⲆᐃⵠΔ.open && !Xw.ΔΔᐃⵠ.open) {
      Xw.sign.open = dr;
      var a = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var b = kw.ᐃᐃΔⵠᐃᐃᐃ;
      if (a) {
        for (var c = 0; c < cf.ⲆΔⲆ[nw.ⵠΔᐃᐃᐃ].length; c++) {
          var d = cf.ⲆΔⲆ[nw.ⵠΔᐃᐃᐃ][c];
          var e = ᐃⵠΔⲆ.ΔΔⵠΔ(d, a);
          if (b > e && d.info === 0 && d.Ⲇⵠⵠᐃ === Xw.id) {
            Xw.sign.open = true;
            b = e;
            Xw.sign.ⵠΔᐃⲆⲆ = d.id;
          }
        }
        if (kw.ᐃᐃΔⵠᐃᐃᐃ > b) {
          Zw.sign.button.ᐃⵠᐃⵠ(ho);
        }
      }
    }
  }
  function Fm() {
    if (!Xw.ΔⲆΔΔ.open && !Xw.ᐃⲆⵠⲆΔ.open && !Xw.ᐃⵠᐃᐃ.open && !Xw.ΔΔᐃⵠ.open) {
      Xw.ⲆᐃⵠΔ.open = ss;
      var b = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = kw.ΔⵠⵠⵠᐃΔᐃ;
      if (b) {
        for (var d = eu; d < cf.ⲆΔⲆ[nw.Δᐃᐃᐃᐃ].length; d++) {
          var e = cf.ⲆΔⲆ[nw.Δᐃᐃᐃᐃ][d];
          var f = ᐃⵠΔⲆ.ΔΔⵠΔ(e, b);
          if (c > f) {
            c = f;
            Xw.ⲆᐃⵠΔ.open = kh;
            Xw.ⲆᐃⵠΔ.ⲆⲆᐃΔⵠⲆᐃ = e.info & 31;
            Xw.ⲆᐃⵠΔ.ΔⲆⵠⵠΔ = (e.info & 992) >> 5;
            Xw.ⲆᐃⵠΔ.ⲆⲆⲆᐃΔⲆΔ = (e.info & 31744) >> 10;
            Xw.ⲆᐃⵠΔ.Ⲇⵠⵠᐃ = e.Ⲇⵠⵠᐃ;
            Xw.ⲆᐃⵠΔ.ⵠΔᐃⲆⲆ = e.id;
          }
        }
        if (c < kw.ΔⵠⵠⵠᐃΔᐃ) {
          var g = ΔΔ[722];
          var j = (a = Zw.ᐃᐃᐃᐃⵠΔⲆ).info.translate.x - 32;
          Jm(ho, g, j, 0);
          if (Xw.ⲆᐃⵠΔ.ⲆⲆᐃΔⵠⲆᐃ > Bb) {
            a.ᐃⵠᐃⵠ(ho);
            if ((k = Xw.ⲆᐃⵠΔ.ⲆⲆᐃΔⵠⲆᐃ) > 1) {
              Rm(k, a);
            }
          }
          var a = Zw.ᐃⲆΔⵠᐃⲆⲆ;
          if (Xw.ⲆᐃⵠΔ.ⲆⲆⲆᐃΔⲆΔ > 0) {
            a.ᐃⵠᐃⵠ(ho);
            if ((k = Xw.ⲆᐃⵠΔ.ⲆⲆⲆᐃΔⲆΔ) > 1) {
              Rm(k, a);
            }
          }
          a = Zw.ΔⵠⲆⵠΔⵠⲆ;
          if (Xw.ⲆᐃⵠΔ.ΔⲆⵠⵠΔ > 0) {
            a.ᐃⵠᐃⵠ(ho);
            var k = Xw.ⲆᐃⵠΔ.ΔⲆⵠⵠΔ;
            if (hb < k) {
              Rm(k, a);
            }
          }
        }
      }
    }
  }
  function Rm(a, b) {
    ΔΔ[283][a] ||= nd(Co, "x" + a, m, "#FFF");
    var c = ΔΔ[283][a];
    var d = b.info.translate.x + b.info.ⵠⵠ[0].width - c.width - Sq * Co;
    var e = b.info.translate.y + b.info.ⵠⵠ[Bb].height - c.height - Co * mg;
    if (Yv == b.info.state) {
      e += nr * Co;
    }
    Jm(ho, c, d, e);
  }
  function Gm() {
    if (!Xw.ΔⲆΔΔ.open) {
      Xw.ᐃⲆⵠⲆΔ.ⵠᐃⵠⲆ = wj;
      Xw.ᐃⲆⵠⲆΔ.open = false;
      var b = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = kw.ΔΔⵠᐃΔⵠᐃ;
      if (b) {
        for (var d = 0; cf.ⲆΔⲆ[nw.ⲆᐃΔᐃⵠ].length > d; d++) {
          var e = cf.ⲆΔⲆ[nw.ⲆᐃΔᐃⵠ][d];
          var f = ᐃⵠΔⲆ.ΔΔⵠΔ(e, b);
          if (f < c) {
            c = f;
            Xw.ᐃⲆⵠⲆΔ.open = true;
            Xw.ᐃⲆⵠⲆΔ.ⵠᐃⵠⲆ = e.info;
            Xw.ᐃⲆⵠⲆΔ.Ⲇⵠⵠᐃ = e.Ⲇⵠⵠᐃ;
            Xw.ᐃⲆⵠⲆΔ.ⵠΔᐃⲆⲆ = e.id;
          }
        }
        if (c < kw.ΔΔⵠᐃΔⵠᐃ) {
          var g = ΔΔ[411];
          var j = Zw.ⲆΔⲆᐃⵠⵠᐃ;
          var a = Math.floor(j.info.translate.x + (j.info.ⵠⵠ[os].width - g.width) / 2);
          var k = Math.floor(j.info.translate.y + (j.info.ⵠⵠ[0].height - g.height) / pq) + Lg;
          Jm(ho, g, a, k);
          if (eu < Xw.ᐃⲆⵠⲆΔ.ⵠᐃⵠⲆ) {
            j.ᐃⵠᐃⵠ(ho);
            var h = Xw.ᐃⲆⵠⲆΔ.ⵠᐃⵠⲆ;
            if (h > wt) {
              Rm(h, j);
            }
          }
        }
      }
    }
  }
  ⵠⲆᐃᐃΔ = [];
  ᐃᐃⵠⵠᐃᐃᐃ = [];
  var jm = [];
  function Lm() {
    ho.save();
    var a = Co;
    if (Xw.ⲆΔᐃΔ.ΔΔᐃΔᐃ.x < 0.25) {
      ho.globalAlpha = Xw.ⲆΔᐃΔ.ᐃⵠᐃⵠⲆᐃⵠ.ΔΔⲆ;
    }
    var b = fl < Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length ? -70 : Yh;
    if (Xw.ΔⲆΔΔ.open || Xw.ᐃⲆⵠⲆΔ.open && Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(109) != -1 || Xw.ᐃⵠᐃᐃ.open && Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(134) != -zs || Xw.ΔΔᐃⵠ.open && Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(109) != -1 || Xw.ᐃⵠⵠΔⲆ.open && Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(180) != -1 || Xw.ⲆᐃⵠΔ.open && (-hb != Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(109) || -gs != Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(131))) {
      b -= Co * 50;
    }
    ho.translate((lo - Co * 950) / 2, b);
    ho.fillStyle = "#69A148";
    ho.fillRect(this.translate.x + Co * 37, this.translate.y + Jh * Co, Co * (Xw.ⲆΔᐃΔ.ΔΔᐃΔᐃ.x * 178), Co * 18);
    ho.globalAlpha = 1;
    if (Xw.ⲆΔᐃΔ.ⵠⲆΔΔΔᐃΔ.x < 0.35) {
      ho.fillStyle = "#8F050A";
      ho.globalAlpha = Xw.ⲆΔᐃΔ.ⲆⲆᐃⵠᐃⵠⲆ.ΔΔⲆ;
      ho.fillRect(this.translate.x + Co * 277, this.translate.y + Ri * Co, Co * 178, Co * 18);
      ho.globalAlpha = 1;
    }
    ho.fillStyle = "#AF352A";
    ho.fillRect(this.translate.x + Co * 277, this.translate.y + Co * sg, Xw.ⲆΔᐃΔ.ⵠⲆΔΔΔᐃΔ.x * 178 * Co, Co * 18);
    if (Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.x < 0.35) {
      ho.fillStyle = "#366B91";
      ho.globalAlpha = Xw.ⲆΔᐃΔ.ᐃⲆⵠΔⲆΔΔ.ΔΔⲆ;
      ho.fillRect(this.translate.x + Co * 517, this.translate.y + Un * Co, Co * 178, Co * 18);
      ho.globalAlpha = 1;
    }
    ho.fillStyle = "#669BB1";
    ho.fillRect(this.translate.x + Co * 517, this.translate.y + Co * 17, Co * (Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.x * 178), Co * W);
    if (Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.x > 0.99) {
      if (Xw.ⲆΔᐃΔ.ΔⲆⲆΔⵠ.x < 0.35) {
        ho.fillStyle = "#6C4036";
        ho.globalAlpha = Xw.ⲆΔᐃΔ.ⲆᐃᐃᐃⲆⵠᐃ.ΔΔⲆ;
        ho.fillRect(this.translate.x + Co * 517, this.translate.y + Co * 17, Co * 178, Co * Rg);
        ho.globalAlpha = Oq;
      }
      ho.fillStyle = "#9C4036";
      ho.fillRect(this.translate.x + Co * 517, this.translate.y + Yo * Co, (1 - Xw.ⲆΔᐃΔ.ΔⲆⲆΔⵠ.x) * 178 * Co, Ik * Co);
    }
    if (Xw.ⲆΔᐃΔ.ⲆᐃⵠΔΔⲆΔ.x < 0.35) {
      ho.fillStyle = "#001A57";
      ho.globalAlpha = Xw.ⲆΔᐃΔ.ΔΔᐃⲆᐃⲆⲆ.ΔΔⲆ;
      ho.fillRect(this.translate.x + Co * 757, this.translate.y + sg * Co, Co * 178, Co * 18);
      ho.globalAlpha = 1;
    }
    ho.fillStyle = "#074A87";
    ho.fillRect(this.translate.x + Co * 757, this.translate.y + dt * Co, Co * (Xw.ⲆΔᐃΔ.ⲆᐃⵠΔΔⲆΔ.x * 178), Co * 18);
    Co = a;
    Jm(ho, this.ⵠⵠ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    ho.restore();
    if (Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.x < 0.99) {
      var c = Math.floor(bo - ΔΔ[608].width / Vg);
      b += this.translate.y - ΔΔ[608].height - Co * 5;
      ho.fillStyle = "#BBE8EF";
      ho.fillRect(c + 5, b + Co * Oj, Co * 588 * Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.x, Co * 10);
      if (Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.x < 0.35) {
        ho.fillStyle = "#9BA8AF";
        ho.globalAlpha = Xw.ⲆΔᐃΔ.ⲆⲆⲆΔⲆⵠⵠ.ΔΔⲆ;
        ho.fillRect(c + Ll, b + 5, Co * 588, Co * 10);
        ho.globalAlpha = gs;
      }
      Jm(ho, ΔΔ[608], c, b);
      this.y = b;
    }
  }
  function Wm() {
    for (var b = Xw.ᐃΔᐃⵠ, c = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ], d = Yh; d < b.ⲆᐃⲆⲆΔ.length; d++) {
      var e = b.ⲆᐃⲆⲆΔ[d];
      var f = false;
      if ((c = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ]) && (e.id == c.right || e.id == c.ⵠΔⵠⲆᐃ && st < c.ⵠΔⵠⲆᐃ)) {
        f = true;
        Jm(ho, e.info.ⵠⵠ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ᐃⵠᐃⵠ(ho);
      }
      var g = Xw.ᐃΔᐃⵠ.ⲆΔΔ[e.id];
      if (g > 1) {
        Rm(g, e);
      }
      if (g > Qs) {
        Im(d, e, f);
      }
      var h = Xw.ΔⲆΔΔ;
      if (!!h.open && (h.id < wj || h.id == e.id) && (!h.lock || Xw.id == h.Ⲇⵠⵠᐃ)) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
      if (Xw.ᐃⲆⵠⲆΔ.open && e.id == 109) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
      if (Xw.ᐃⵠⵠΔⲆ.open && e.id == 180) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
      if (Xw.ᐃⵠᐃᐃ.open && e.id == 134) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
      if (Xw.ΔΔᐃⵠ.open && e.id == 109) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
      if (!!Xw.ⲆᐃⵠΔ.open && (e.id == 109 || e.id == 131)) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
    }
    if (e && d < b.max) {
      var j = ΔΔ[334][rs];
      ᐃᐃ = e.info.translate.x;
      ⵠⲆⵠ = e.info.translate.y;
      ⵠΔⲆᐃ = Tl;
      for (; d < b.max; d++, ⵠΔⲆᐃ++) {
        Jm(ho, j, ᐃᐃ + ⵠΔⲆᐃ * (j.width + 5), ⵠⲆⵠ);
      }
    }
  }
  function Om() {
    var a = Xw.ΔⵠⲆᐃᐃ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      ho.save();
      var c = ΔΔ[562];
      var d = ΔΔ[537].height + Co * 25;
      ho.translate(c.width, Zw.ⲆΔᐃΔ.translate.y - Co * 188 - d);
      var e = -c.width / 2 - Pn;
      var f = -c.height / Hj - 4;
      Jm(ho, c, e + 2, f);
      ho.beginPath();
      ho.lineWidth = Co * 5;
      ho.strokeStyle = Xr.ᐃⵠΔⲆⲆᐃΔ[cf.time];
      ho.lineCap = "round";
      ho.arc(Ih, f + c.height / 2, Co * 25, 0, xq * Math.PI * a.timeout.ΔΔⲆ);
      ho.stroke();
      ho.restore();
      if (b) {
        a.wait = false;
        a.timeout.ΔΔⲆ = Ih;
        a.timeout.ⵠᐃⵠ = Ei;
      }
    }
  }
  function Nm(b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == Mh) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var c = Co * ((1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var d = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * c;
      var e = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * c;
    } else {
      d = 0;
      e = Mg;
    }
    var f = ΔΔ[853].length;
    ⵠⵠ = ΔΔ[853][(this.ⵠΔⲆᐃ + this.ⵠΔ % 2) % f][cf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    var g = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
    if (g && (this.Ⲇⵠⵠᐃ === Xw.id || Xw.ᐃⲆⵠⲆⵠⵠᐃ(this.Ⲇⵠⵠᐃ))) {
      if (ᐃⵠΔⲆ.ΔΔⵠΔ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - _w, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + _w, 1);
      }
    } else if (g && ᐃⵠΔⲆ.ΔΔⵠΔ(this, cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ]) < 150) {
      this.opacity = Math.max(this.opacity - _w, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + _w, pu);
    }
    var h = ho.globalAlpha;
    ho.globalAlpha *= this.opacity;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / 2 + d, -ΔⵠⲆ / 2 + e, ⲆⲆᐃ, ΔⵠⲆ);
    ho.globalAlpha = h;
    ho.restore();
  }
  function qm() {
    var b = Xw.ΔⲆⵠᐃⲆ;
    var c = Zw.ⵠⵠⵠⵠ;
    if (b.ᐃⲆΔ) {
      b.ᐃⲆΔ = false;
      var d = b.ⵠⲆΔᐃⲆ;
      var e = c.ⲆΔ.width;
      var f = c.ⲆΔ.height;
      var g = c.ᐃ;
      var i = cf.ⵠΔΔⲆ;
      var a = false;
      g.clearRect(0, 0, e, f);
      g.drawImage(c.ⵠⵠ, Zj, 0);
      for (var k = 0; d.length > k; k++) {
        var m = i[d[k]];
        if ((cf.mode !== kw.ⲆⵠⲆⵠⲆⲆⵠ || m.ⲆⲆΔⵠᐃ !== "spectator") && (cf.mode !== kw.ΔΔΔΔᐃ || m.ΔⵠΔᐃ !== kw.ΔⵠⲆΔⵠᐃⲆ)) {
          if (Xw.id == d[k]) {
            a = ye;
            if (kw.ᐃᐃⲆΔⵠ === cf.mode && m.ΔⵠΔᐃ === kw.ⵠⲆⵠⲆⵠⲆᐃ) {
              ⵠᐃ = "#FF0000";
            } else {
              ⵠᐃ = "#FFF";
            }
          } else if (cf.mode === kw.ᐃᐃⲆΔⵠ && m.ΔⵠΔᐃ === kw.ⵠⲆⵠⲆⵠⲆᐃ) {
            ⵠᐃ = "#990000";
          } else {
            ⵠᐃ = "#A1BDCD";
          }
          g.drawImage(nd(Co, "" + (k + wt), Co * Ds, ⵠᐃ), Co * Bs, (40 + k * 22) * Co);
          if (!m.ⲆΔⵠⵠⵠⵠᐃ) {
            m.ⲆΔⵠⵠⵠⵠᐃ = nd(Co, m.ⲆⲆΔⵠᐃ, Ga * Co, ⵠᐃ, undefined, undefined, rk, j, Co * 110);
          }
          g.drawImage(m.ⲆΔⵠⵠⵠⵠᐃ, Co * 39, Co * (40 + k * 22));
          g.drawImage(nd(Co, ᐃⵠΔⲆ.ᐃΔⵠᐃᐃᐃᐃ(m.ⲆΔΔᐃⲆ), Co * 15, ⵠᐃ), Co * 156, (40 + k * 22) * Co);
        }
      }
      if (!a) {
        if (cf.mode === kw.ⵠᐃᐃⲆⲆ || kw.ᐃᐃⲆΔⵠ === cf.mode || kw.ⲆⲆⲆⲆᐃ === cf.mode || kw.ᐃⲆⵠⲆΔΔᐃ === cf.mode || kw.ⵠΔᐃᐃⲆ === cf.mode || cf.mode === kw.ⲆⵠⲆⵠⲆⲆⵠ && !Xw.ᐃⲆⲆΔΔᐃᐃ || cf.mode === kw.ΔΔΔΔᐃ && !Xw.ⲆᐃⲆⵠᐃ) {
          g.drawImage(ΔΔ[306], Co * 15, Co * (46 + k * 22));
          g.drawImage(nd(Co, ᐃⵠΔⲆ.ᐃΔⵠᐃᐃᐃᐃ(cf.ⵠΔΔⲆ[Xw.id].ⲆΔΔᐃⲆ), v * Co, "#FFF"), Y * Co, Co * (46 + k * 22));
        }
      }
    }
    Jm(ho, c.ⲆΔ, c.translate.x, c.translate.y);
  }
  function Hm() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var a = Co * (_w * (og - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
    } else {
      b = st;
      c = 0;
    }
    ⵠⵠ = ΔΔ[167][cf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / 2 + b, -ΔⵠⲆ / Lt + c, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.lock) {
      ⵠⵠ = ΔΔ[148][cf.time];
      ⲆⲆᐃ = -ⵠⵠ.width;
      ΔⵠⲆ = -ⵠⵠ.height;
      Jm(ho, ⵠⵠ, -ⲆⲆᐃ / H + b - za * Co, -ΔⵠⲆ / 2 + c, ⲆⲆᐃ, ΔⵠⲆ);
    }
    ho.restore();
  }
  function Um(a) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = vt;
      }
      var b = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = Zj;
    }
    var e = ΔΔ[a][cf.time];
    ⲆⲆᐃ = -e.width;
    ΔⵠⲆ = -e.height;
    Jm(ho, e, -ⲆⲆᐃ / 2 + c, -ΔⵠⲆ / Vh + d, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function Ym(a) {
    if ((a = a / ah) <= 0.8) {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && Ta == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
          this.ᐃⲆⲆ.ᐃⲆΔ = nt;
        }
        var b = Co * ((1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
        var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
        var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      ho.globalAlpha = 0.5;
      fb(ho, c, d, Co * 18, a);
      db(ho, null, "#000000", Co * 18);
      ho.globalAlpha = Hg;
      fb(ho, c, d, Co * W, a);
      db(ho, null, Xr.ΔⵠΔⲆᐃΔⵠ[cf.time], Co * 6);
      ho.restore();
    }
  }
  function Km() {
    var b = Xw.ΔᐃⲆⵠ;
    if (!b.ΔⲆⵠΔᐃ && b.ΔᐃΔⵠ > 0) {
      var c = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      if (!c) {
        return;
      }
      ho.save();
      if (ds[b.ΔᐃΔⵠ].ⵠⲆᐃⲆ === eu && mj === b.mode) {
        ho.translate(Xw.ⵠᐃⲆ.x + c.x, Xw.ⵠᐃⲆ.y + c.y);
        ho.rotate(c.angle);
        ho.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = Xw.ⵠᐃⲆ.x + (d - d % Nn + 50);
        e = Xw.ⵠᐃⲆ.y + (e - e % 100 + 50);
        ho.translate(d, e);
      }
      var f = ΔΔ[b.ΔᐃΔⵠ][cf.time];
      ho.globalAlpha = 0.5;
      Jm(ho, f, -f.width / Lt, -f.height / 2);
      ho.globalAlpha = 1;
      ho.restore();
      if (ds[b.ΔᐃΔⵠ].ⵠⲆᐃⲆ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[Ih] = nd(Co, Et[336], 20, "#e2c340");
          } else {
            b.label[1] = nd(Co, Et[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Jm(ho, f, bo + -f.width / xq, Zw.ⲆΔᐃΔ.y - 26);
      }
    }
    if (b.ΔⲆⵠΔᐃ) {
      var g = b.timeout.ᐃⲆΔ();
      for (var i = 0; i < b.ⲆΔⵠⵠΔ.length; i++) {
        var j = b.ⲆΔⵠⵠΔ[i];
        if (b.id == j.id) {
          var k = Co * 42;
          var m = dt * Co;
          yb(ho, j.info.translate.x, j.info.translate.y + (Tl - b.timeout.ΔΔⲆ) * k, j.info.width, k * b.timeout.ΔΔⲆ + m, Co * Cs);
          ho.fillStyle = "#55B973";
          ho.fill();
          ho.globalAlpha = 0.8;
          j.ᐃⵠᐃⵠ(ho);
        } else {
          ho.globalAlpha = 0.5;
          j.ᐃⵠᐃⵠ(ho);
        }
        ho.globalAlpha = 1;
      }
      if (g) {
        b.ΔⲆⵠΔᐃ = false;
        b.timeout.ΔΔⲆ = Da;
        b.timeout.ⵠᐃⵠ = false;
      }
      return Kj;
    }
    for (i = mj; b.ⲆΔⵠⵠΔ.length > i; i++) {
      b.ⲆΔⵠⵠΔ[i].ᐃⵠᐃⵠ(ho);
    }
    return dr;
  }
  function Vm() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[321][cf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / Ul, -ΔⵠⲆ / pq, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function Zm() {
    var a = Xw.ⲆᐃᐃⲆΔ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      ho.save();
      var c = ΔΔ[792];
      ho.translate(c.width - Co * 2, Zw.ⲆΔᐃΔ.translate.y - Co * 125);
      var d = -c.width / 2 + xt;
      var e = -c.height / Pn - 4;
      Jm(ho, c, d, e);
      ho.beginPath();
      ho.lineWidth = Co * 5;
      ho.strokeStyle = Xr.ΔΔΔΔΔΔᐃ[cf.time];
      ho.lineCap = "round";
      ho.arc(9, e + c.height / 2, Co * 25, 0, a.timeout.ΔΔⲆ * (jk * Math.PI));
      ho.stroke();
      ho.restore();
      if (b) {
        a.wait = false;
        a.timeout.ΔΔⲆ = 0;
        a.timeout.ⵠᐃⵠ = jl;
      }
    }
  }
  function Xm() {
    var a = Xw.ᐃΔᐃⲆⵠ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      ho.save();
      var c = ΔΔ[794];
      ho.translate(c.width - Co * gr, Zw.ⲆΔᐃΔ.translate.y - Co * 190);
      var d = -c.width / xj + dh;
      var e = -c.height / xq - ba;
      Jm(ho, c, d, e);
      ho.beginPath();
      ho.lineWidth = Co * 5;
      ho.strokeStyle = Xr.ΔΔΔΔΔΔᐃ[cf.time];
      ho.lineCap = "round";
      ho.arc(9, e + c.height / xj, Co * 25, wg, a.timeout.ΔΔⲆ * (vg * Math.PI));
      ho.stroke();
      ho.restore();
      if (b) {
        a.wait = gh;
        a.timeout.ΔΔⲆ = 0;
        a.timeout.ⵠᐃⵠ = f;
      }
    }
  }
  function $m() {
    var a = cf.ΔᐃᐃΔⲆ;
    var b = ΔΔ[725][cf.time];
    Jm(ho, b, a.translate.x, a.translate.y);
    ho.save();
    ho.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    cf.ΔᐃᐃΔⲆ.now = (new Date().getTime() - a.ᐃΔΔΔᐃ + a.ᐃⵠᐃⲆΔ) % kw.ⲆᐃΔ;
    var c = Math.PI * 2 * cf.ΔᐃᐃΔⲆ.now / kw.ⲆᐃΔ - Math.PI / 2;
    ho.rotate(c);
    Jm(ho, ΔΔ[726], -b.width / 2, -b.height / vg);
    ho.restore();
  }
  function ep() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[811][cf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / as, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function ip(b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && Tk == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var c = Co * ((Gh - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var d = c * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var e = c * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      d = mj;
      e = ig;
    }
    if (b === 913 && !cf.transition) {
      var f = 0;
      for (var g = cf.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ], h = 0; g.length > h; h++) {
        var i = ᐃⵠΔⲆ.ΔΔⵠΔ(g[h], this);
        if (i < 140 && i > 35) {
          f = Lr;
          break;
        }
        if (i <= 35) {
          f = ie;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - _w / 1.5) : Math.min(1, this.opacity + _w / 1.5);
      ho.globalAlpha = this.opacity;
    }
    ⵠⵠ = ΔΔ[b][cf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / Ul + d, -ΔⵠⲆ / 2 + e, ⲆⲆᐃ, ΔⵠⲆ);
    ho.globalAlpha = og;
    ho.restore();
  }
  function tp() {
    var a = -8;
    if (Xw.ᐃΔᐃᐃⲆ.enabled) {
      var b = ΔΔ[546];
      Jm(ho, b, Xw.ᐃΔᐃᐃⲆ.translate.x, Xw.ᐃΔᐃᐃⲆ.translate.y + a);
      a += 70;
    }
    if (Xw.ⲆΔᐃᐃᐃᐃᐃ === 1) {
      b = ΔΔ[549];
      Jm(ho, b, Xw.ᐃΔᐃᐃⲆ.translate.x, Xw.ᐃΔᐃᐃⲆ.translate.y + a);
      a += 70;
    } else if (Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.x < 0.25 || Xw.ⲆΔᐃΔ.ⵠⲆΔΔΔᐃΔ.x < 0.25 || Xw.ⲆΔᐃΔ.ⲆᐃⵠΔΔⲆΔ.x < 0.25 || Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.x < 0.25 || Xw.ⲆΔᐃΔ.ΔⲆⲆΔⵠ.x < 0.25) {
      b = ΔΔ[548];
      Jm(ho, b, Xw.ᐃΔᐃᐃⲆ.translate.x, Xw.ᐃΔᐃᐃⲆ.translate.y + a);
      a += 70;
    }
    if (Xw.ⵠᐃⵠᐃᐃ > 0) {
      b = ΔΔ[547];
      Jm(ho, b, Xw.ᐃΔᐃᐃⲆ.translate.x, Xw.ᐃΔᐃᐃⲆ.translate.y + a);
      var c = jm[Xw.ⵠᐃⵠᐃᐃ];
      if (c === Og) {
        c = nd(Co, Xw.ⵠᐃⵠᐃᐃ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", Fg);
        jm[Xw.ⵠᐃⵠᐃᐃ] = c;
      }
      if (Xw.ⵠᐃⵠᐃᐃ < 9) {
        Jm(ho, c, Xw.ᐃΔᐃᐃⲆ.translate.x - 39, Xw.ᐃΔᐃᐃⲆ.translate.y + a + qh);
      } else {
        Jm(ho, c, Xw.ᐃΔᐃᐃⲆ.translate.x - 46, Xw.ᐃΔᐃᐃⲆ.translate.y + a + Ok);
      }
    }
  }
  function np(a) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && nt == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = Co * (_w * (sd - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = Bb;
      d = 0;
    }
    if (this.ᐃᐃⵠᐃᐃ.ᐃⲆΔ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ⵠⵠ = ΔΔ[872][Math.floor(this.id + this.color) % Fs][cf.time];
    ⲆⲆᐃ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / Hj + c, -ΔⵠⲆ / 2 + d, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function op() {
    var a = Xw.ΔᐃⲆⵠ;
    if (a.ΔⲆⵠΔᐃ) {
      var b = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + b.x, Xw.ⵠᐃⲆ.y + b.y);
      var c = ΔΔ[324];
      var d = -c.width / rs;
      var e = -c.height / Rl - Co * 125;
      Jm(ho, c, d, e);
      ho.beginPath();
      ho.lineWidth = Co * 5;
      ho.strokeStyle = Xr.ⲆᐃΔΔⲆΔⲆ[cf.time];
      ho.lineCap = "round";
      ho.arc(st, e + c.height / Ob, Co * 25, wj, Vh * Math.PI * a.timeout.ΔΔⲆ);
      ho.stroke();
      ho.restore();
    }
  }
  function rp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[848][cf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / jk, -ΔⵠⲆ / Lt, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function ap() {
    var a = Xw.ⲆᐃᐃᐃⲆ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      ho.save();
      var c = ΔΔ[537];
      ho.translate(c.width - eh * Co, Zw.ⲆΔᐃΔ.translate.y - Co * 60);
      var d = -c.width / jk - 2;
      var e = -c.height / lr - 4;
      Jm(ho, c, d, e);
      ho.beginPath();
      ho.lineWidth = Co * 5;
      ho.strokeStyle = Xr.ᐃⵠΔⲆⲆᐃΔ[cf.time];
      ho.lineCap = "round";
      ho.arc(0, e + c.height / 2, Co * 25, Qs, a.timeout.ΔΔⲆ * (eh * Math.PI));
      ho.stroke();
      ho.restore();
      if (b) {
        a.wait = C;
        a.timeout.ΔΔⲆ = eu;
        a.timeout.ⵠᐃⵠ = false;
      }
    }
  }
  function sp(a) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
      var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
    } else {
      c = Mg;
      d = wj;
    }
    ⵠⵠ = ΔΔ[a][cf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / as + c, -ΔⵠⲆ / 2 + d, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function hp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[837][cf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / Ug, -ΔⵠⲆ / jk, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  var lp = dj.Math.acos;
  dj.Math.acos = dj.Math.asin;
  dj.Math.asin = lp;
  var gp = dj.Math.cos;
  function up() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[239][cf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function bp(a) {
    if ((a = a / x) <= 0.95) {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
          this.ᐃⲆⲆ.ᐃⲆΔ = false;
        }
        var b = Co * ((za - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
        var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
        var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
      } else {
        c = 0;
        d = Zj;
      }
      ho.globalAlpha = 0.5;
      fb(ho, c, d, Co * 28, a);
      db(ho, null, "#000000", Pj * Co);
      ho.globalAlpha = pu;
      fb(ho, c, d, Co * 28, a);
      db(ho, null, Xr.ⲆᐃΔΔⲆΔⲆ[cf.time], Co * Bq);
      ho.restore();
    }
  }
  dj.Math.cos = dj.Math.sin;
  dj.Math.sin = gp;
  var vp = Ih;
  function Su() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
    } else {
      c = eu;
      d = 0;
    }
    var e = this.info & 15;
    if (wa === this.info || fl === e) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[970][cf.time];
      } else {
        f = ΔΔ[208][cf.time];
      }
      var g = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.width;
      var h = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.height;
      Jm(ho, f, -g / rs + c, -h / Lt + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[971][cf.time];
      } else {
        f = ΔΔ[209][cf.time];
      }
      ho.translate(0, f.height / 2);
      Jm(ho, f, c - f.width / Rl, -f.height + d);
    }
    ho.restore();
  }
  function cp() {
    if (te <= this.info) {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
          this.ᐃⲆⲆ.ᐃⲆΔ = C;
        }
        var a = Co * ((Te - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
        var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
        var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
      } else {
        b = 0;
        c = 0;
      }
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      var d = ΔΔ[206][cf.time];
      var e = this.ᐃᐃᐃᐃ.ΔΔⲆ * -d.width;
      var f = -d.height * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      Jm(ho, d, -e / 2 + b, -f / H + c, e, f);
      ho.restore();
    }
  }
  function mp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var a = Co * ((Gh - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      d = ΔΔ[716][cf.time];
      Jm(ho, d, -d.width / 2 + b, -d.height / Ob + c);
      this.up.ᐃⲆΔ();
      var d = ΔΔ[720][cf.time];
      var e = this.up.ΔΔⲆ * -d.width;
      var f = this.up.ΔΔⲆ * -d.height;
      Jm(ho, d, -e / 2 + gs * Co, -f / Lt + Co * 3, e, f);
    } else {
      d = ΔΔ[144][cf.time];
      Jm(ho, d, -d.width / 2 + b, -d.height / 2 + c);
    }
    ho.restore();
  }
  function pp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃᐃᐃᐃ.ᐃⲆΔ();
    ho.globalAlpha = 0.3;
    var a = ΔΔ[282][cf.time];
    var b = this.ᐃᐃᐃᐃ.ΔΔⲆ * -a.width;
    var c = this.ᐃᐃᐃᐃ.ΔΔⲆ * -a.height;
    Jm(ho, a, -b / Ul, -c / 2, b, c);
    ho.globalAlpha = 1;
    ho.restore();
  }
  function Cp() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == Ta) {
        this.ᐃⲆⲆ.ᐃⲆΔ = jl;
      }
      var a = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = ig;
    }
    ho.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * eh - 1;
    }
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[157][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / Ob, -ⵠⵠ.height / H);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + _w * I) % (Math.PI * vg);
    }
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[1214][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / It, -ⵠⵠ.height / Vg);
    ho.restore();
  }
  function Tp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = mj;
      d = Lr;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[812][cf.time];
      } else {
        f = ΔΔ[188][cf.time];
      }
      var g = -f.width * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      var h = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.height;
      Jm(ho, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[813][cf.time];
      } else {
        f = ΔΔ[189][cf.time];
      }
      ho.translate(0, f.height / 2);
      Jm(ho, f, c - f.width / xj, -f.height + d);
    }
    ho.restore();
  }
  function fp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + _w / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - _w, sd);
    }
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = this.info === 0 ? ΔΔ[233][cf.time] : ΔΔ[1083][cf.time];
    ⲆⲆᐃ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width);
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height * this.scale;
    Jm(ho, a, -ⲆⲆᐃ / 4, -ΔⵠⲆ / 4, ⲆⲆᐃ / Vh, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[1092];
      Jm(ho, a, -ⲆⲆᐃ / 4, -ΔⵠⲆ / nj, ⲆⲆᐃ / jk, ΔⵠⲆ / 2);
      ho.globalAlpha = sd;
    }
    a = this.info === 0 ? ΔΔ[1087][cf.time] : ΔΔ[1086][cf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width * this.scale;
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height);
    ho.save();
    ho.translate(Co * -40, Co * Yg);
    ho.rotate(this.rotate.ΔΔⲆ);
    Jm(ho, a, Co * -ⲆⲆᐃ / 4, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[1093];
      Jm(ho, a, Co * -ⲆⲆᐃ / ls, -ΔⵠⲆ * Co / $l, ⲆⲆᐃ / 2, ΔⵠⲆ / xj);
      ho.globalAlpha = 1;
    }
    ho.restore();
    a = os === this.info ? ΔΔ[1090][cf.time] : ΔΔ[1089][cf.time];
    ho.save();
    ho.translate(Co * 40, Co * gn);
    ho.rotate(-this.rotate.ΔΔⲆ);
    Jm(ho, a, -ⲆⲆᐃ * Co / Fr, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / vg, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[1094];
      Jm(ho, a, -ⲆⲆᐃ * Co / nj, -ΔⵠⲆ * Co / tb, ⲆⲆᐃ / H, ΔⵠⲆ / pq);
      ho.globalAlpha = Hg;
    }
    ho.restore();
    ho.restore();
  }
  function zp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃⲆΔΔᐃ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[288][cf.time];
    ⲆⲆᐃ = this.ᐃⲆΔΔᐃ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = this.ᐃⲆΔΔᐃ.ΔΔⲆ * -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / pq, -ΔⵠⲆ / rs, ⲆⲆᐃ, ΔⵠⲆ);
    this.ᐃᐃⵠᐃᐃ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[289][cf.time];
    ⲆⲆᐃ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / xj, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function yp() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == C) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var a = Co * (_w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = In;
    }
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[135][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / vg, -ⵠⵠ.height / as);
    ho.restore();
  }
  function wp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + _w / eh, 1.8);
    } else {
      this.scale = Math.max(this.scale - _w, 1);
    }
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = ΔΔ[450][cf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width * this.scale;
    ΔⵠⲆ = this.scale * (-a.height * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    Jm(ho, a, -ⲆⲆᐃ / ls, -ΔⵠⲆ / ls, ⲆⲆᐃ / eh, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && Qg == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[464];
      Jm(ho, a, -ⲆⲆᐃ / Ct, -ΔⵠⲆ / Ng, ⲆⲆᐃ / 2, ΔⵠⲆ / jk);
      ho.globalAlpha = 1;
    }
    a = ΔΔ[453][cf.time];
    ⲆⲆᐃ = -a.width * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height);
    ho.save();
    ho.translate(Co * -60, rl * Co);
    ho.rotate(this.rotate.ΔΔⲆ);
    Jm(ho, a, -ⲆⲆᐃ * Co / 4, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / Rl, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[468];
      Jm(ho, a, -ⲆⲆᐃ * Co / 4, Co * -ΔⵠⲆ / Os, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
      ho.globalAlpha = 1;
    }
    ho.restore();
    a = ΔΔ[454][cf.time];
    ho.save();
    ho.translate(Co * 60, qh * Co);
    ho.rotate(-this.rotate.ΔΔⲆ);
    Jm(ho, a, Co * -ⲆⲆᐃ / gl, Co * -ΔⵠⲆ / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[469];
      Jm(ho, a, Co * -ⲆⲆᐃ / ls, Co * -ΔⵠⲆ / 4, ⲆⲆᐃ / Rl, ΔⵠⲆ / 2);
      ho.globalAlpha = zg;
    }
    ho.restore();
    ho.restore();
  }
  function Pp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + _w / Ob, 1.8);
    } else {
      this.scale = Math.max(this.scale - _w, gs);
    }
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = this.info === 0 ? ΔΔ[232][cf.time] : ΔΔ[1068][cf.time];
    ⲆⲆᐃ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width);
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height);
    Jm(ho, a, -ⲆⲆᐃ / nl, -ΔⵠⲆ / 4, ⲆⲆᐃ / xj, ΔⵠⲆ / Lt);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && f == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[1077];
      Jm(ho, a, -ⲆⲆᐃ / nl, -ΔⵠⲆ / nl, ⲆⲆᐃ / 2, ΔⵠⲆ / It);
      ho.globalAlpha = 1;
    }
    a = this.info === 0 ? ΔΔ[1072][cf.time] : ΔΔ[1071][cf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width * this.scale;
    ΔⵠⲆ = this.scale * (-a.height * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ho.save();
    ho.translate(Co * -40, Co * 10);
    ho.rotate(this.rotate.ΔΔⲆ);
    Jm(ho, a, Co * -ⲆⲆᐃ / 4, Co * -ΔⵠⲆ / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[1078];
      Jm(ho, a, Co * -ⲆⲆᐃ / Vn, -ΔⵠⲆ * Co / Ct, ⲆⲆᐃ / 2, ΔⵠⲆ / H);
      ho.globalAlpha = 1;
    }
    ho.restore();
    a = mj === this.info ? ΔΔ[1075][cf.time] : ΔΔ[1074][cf.time];
    ho.save();
    ho.translate(Co * 40, Co * 10);
    ho.rotate(-this.rotate.ΔΔⲆ);
    Jm(ho, a, -ⲆⲆᐃ * Co / 4, Co * -ΔⵠⲆ / Gi, ⲆⲆᐃ / Hj, ΔⵠⲆ / Ul);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[1079];
      Jm(ho, a, -ⲆⲆᐃ * Co / 4, -ΔⵠⲆ * Co / Ls, ⲆⲆᐃ / 2, ΔⵠⲆ / Vg);
      ho.globalAlpha = Hg;
    }
    ho.restore();
    ho.restore();
  }
  function Ap(a, b, c) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + b, Xw.ⵠᐃⲆ.y + c);
    ho.rotate(this.angle);
    ho.translate(this.x - b, this.y - c);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[a][cf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Ob, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function kp() {
    var a = Math.PI / Pn;
    var b = Math.PI / Pe;
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.ᐃⲆⲆΔⲆⲆᐃ.ᐃⲆΔ();
    this.ΔᐃⲆΔⵠΔᐃ.ᐃⲆΔ();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    c = Mg === this.info ? ΔΔ[887][cf.time] : ΔΔ[886][cf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -c.width;
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -c.height;
    Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Hj, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = ΔΔ[888];
      Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = Tl;
    }
    if (this.action & hw.ᐃᐃⵠⵠᐃ) {
      if (this.ⵠᐃᐃᐃⵠ.ᐃⲆΔ() && this.ⵠᐃᐃᐃⵠ.ⵠᐃⵠ == jl) {
        this.action -= hw.ᐃᐃⵠⵠᐃ;
      }
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[891];
      Jm(ho, c, -ⲆⲆᐃ / Ul, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = pu;
    }
    ho.restore();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle + b);
    ho.translate(55, 0);
    ho.rotate(a);
    c = this.info === os ? ΔΔ[894][cf.time] : ΔΔ[896][cf.time];
    ⲆⲆᐃ = -c.width * this.ᐃⲆⲆΔⲆⲆᐃ.ΔΔⲆ;
    ΔⵠⲆ = -c.height * this.ᐃⲆⲆΔⲆⲆᐃ.ΔΔⲆ;
    Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / jk, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      c = ΔΔ[889];
      Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Pn, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    if (this.action & hw.ᐃᐃⵠⵠᐃ) {
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[892];
      Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = au;
    }
    ho.restore();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle + a + b);
    ho.translate(55, Yh);
    ho.rotate(a);
    c = this.info === 0 ? ΔΔ[895][cf.time] : ΔΔ[897][cf.time];
    ⲆⲆᐃ = -c.width * this.ΔᐃⲆΔⵠΔᐃ.ΔΔⲆ;
    ΔⵠⲆ = this.ΔᐃⲆΔⵠΔᐃ.ΔΔⲆ * -c.height;
    Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      c = ΔΔ[890];
      Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / xj, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    if (this.action & hw.ᐃᐃⵠⵠᐃ) {
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[893];
      Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function xp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = Ta;
      }
      var a = (Hg - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
    } else {
      b = ya;
      c = Zj;
    }
    if (this.action == 2) {
      ⵠⵠ = ΔΔ[407][cf.time];
    } else {
      ⵠⵠ = ΔΔ[119][cf.time];
    }
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / Vg + b, -ⵠⵠ.height / 2 + c);
    ho.restore();
  }
  function Jp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && Qg == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = Co * ((1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = wj;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[985][cf.time];
      } else {
        f = ΔΔ[210][cf.time];
      }
      var g = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.width;
      var h = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.height;
      Jm(ho, f, -g / Lt + c, -h / Lt + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[986][cf.time];
      } else {
        f = ΔΔ[211][cf.time];
      }
      ho.translate(0, f.height / 2);
      Jm(ho, f, c - f.width / 2, -f.height + d);
    }
    ho.restore();
  }
  function Mp() {
    if (Xn === (this.info & 1)) {
      this.ⵠⲆΔⲆⲆ = Math.min(this.ⵠⲆΔⲆⲆ + _w, 2.2);
    } else {
      this.ⵠⲆΔⲆⲆ = Math.max(this.ⵠⲆΔⲆⲆ - _w, ig);
      this.ⵠΔⲆΔᐃᐃⵠ += _w;
      if (this.ⵠΔⲆΔᐃᐃⵠ > 0.1) {
        this.ⵠΔⲆΔᐃᐃⵠ = wj;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: Hi,
          r: Math.random() * 30 + 30
        };
        this.ᐃᐃᐃᐃ.push(a);
      }
    }
    for (var b = In; this.ᐃᐃᐃᐃ.length > b; b++) {
      a = this.ᐃᐃᐃᐃ[b];
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + a.x, Xw.ⵠᐃⲆ.y + a.y);
      a.a = Math.min(1, a.a + _w / 2);
      var c = a.a;
      if (c < 0.2) {
        c *= kq;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      ho.globalAlpha = c * 0.8;
      Tb(ho, Yh, 0, a.r);
      db(ho, Xr.ΔⲆⲆΔⲆΔⵠ[cf.time]);
      ho.restore();
      if (a.a === $b) {
        this.ᐃᐃᐃᐃ.splice(b, Gh);
        b--;
      }
    }
  }
  function Bp() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = Qg;
      }
      var a = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
    } else {
      b = ig;
      c = 0;
    }
    ho.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - sd;
    }
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[155][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + _w * 3) % (Math.PI * xj);
    }
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[1206][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / xj, -ⵠⵠ.height / rs);
    ho.restore();
  }
  function Dp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == vt) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = Co * (_w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = Da;
    }
    var e = this.info & 15;
    if (lg === this.info || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[668][cf.time];
      } else {
        f = ΔΔ[132][cf.time];
      }
      var g = -f.width * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      var h = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.height;
      Jm(ho, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      this.ΔᐃⲆᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        f = ΔΔ[638][cf.time];
      } else {
        f = ΔΔ[134][cf.time];
      }
      ho.translate(mj, f.height / 2);
      ho.rotate(this.ΔᐃⲆᐃᐃᐃᐃ.ΔΔⲆ);
      Jm(ho, f, c - f.width / 2, -f.height + d);
    }
    ho.restore();
  }
  function Ip() {
    if (this.info !== 10) {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == Ta) {
          this.ᐃⲆⲆ.ᐃⲆΔ = false;
        }
        var a = Co * (_w * (za - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
        var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
        var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
      } else {
        b = 0;
        c = In;
      }
      if (this.info & 16) {
        var d = ΔΔ[623][cf.time];
      } else {
        d = ΔΔ[287][cf.time];
      }
      Jm(ho, d, -d.width / 2 + b, -d.width / 2 + c);
      ho.restore();
      for (var e = this.info & 15, f = ig; e > f; f++) {
        this.Δᐃⵠⵠ[f].ᐃⵠᐃⵠ(294);
      }
    }
  }
  function Ep() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃᐃⵠᐃᐃ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[526][cf.time];
    ⲆⲆᐃ = -ⵠⵠ.width * this.ᐃᐃⵠᐃᐃ.ΔΔⲆ;
    ΔⵠⲆ = -ⵠⵠ.height * this.ᐃᐃⵠᐃᐃ.ΔΔⲆ;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / Rl, -ΔⵠⲆ / Ul, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function Sp(f, e, i, j, k, n, o, a = undefined, p) {
    if (a === undefined) a = Ih;
    for (var h = f; h <= e; h++) {
      for (var q = i; q <= j; q++) {
        var r = Vw.ᐃᐃⲆⲆ[h][q];
        if (r !== undefined && wr !== r[n]) {
          var t = r[n];
          var w = ΔΔ[k][cf.time][t.ΔᐃⲆⵠⵠΔⲆ];
          Jm(ho, w, Xw.ⵠᐃⲆ.x + t.x - w.width / (ΔⵠⲆⵠⲆ * 4), Xw.ⵠᐃⲆ.y + t.y - w.height / (ΔⵠⲆⵠⲆ * gl), w.width / (ΔⵠⲆⵠⲆ * 2), w.height / (ΔⵠⲆⵠⲆ * vg));
          if (bf.ⵠⵠᐃⲆᐃ) {
            var x = 2147483648;
            var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(y * Fs * ΔΔ[1025][cf.time][t.ΔᐃⲆⵠⵠΔⲆ].length);
              w = ΔΔ[1025][cf.time][t.ΔᐃⲆⵠⵠΔⲆ][y];
              Jm(ho, w, Xw.ⵠᐃⲆ.x + t.x - w.width / (nj * ΔⵠⲆⵠⲆ), Xw.ⵠᐃⲆ.y + t.y - w.height / (ΔⵠⲆⵠⲆ * 4), w.width / (Pn * ΔⵠⲆⵠⲆ), w.height / (xq * ΔⵠⲆⵠⲆ));
            } else if (fl !== t.ᐃᐃⲆⲆⵠⵠΔ) {
              w = ΔΔ[1026][cf.time];
              var z = (vp + h % 2 * 30) % 60;
              ho.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
              Jm(ho, w, Xw.ⵠᐃⲆ.x + t.x - w.width / (ΔⵠⲆⵠⲆ * 4), Xw.ⵠᐃⲆ.y + t.y - w.height / (ΔⵠⲆⵠⲆ * 4) - 30 + z, w.width / (ΔⵠⲆⵠⲆ * 2), w.height / (Ug * ΔⵠⲆⵠⲆ));
              ho.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function Qp() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var a = Co * (_w * (og - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = os;
    }
    ho.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * Rl - 1;
    }
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[154][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / Lt);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + I * _w) % (Math.PI * rs);
    }
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[1202][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / vg, -ⵠⵠ.height / 2);
    ho.restore();
  }
  function _p(a, b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ⵠⵠ = ΔΔ[a][this.info][cf.time];
    ⲆⲆᐃ = -ⵠⵠ.width / Ul;
    ΔⵠⲆ = -ⵠⵠ.height / lr;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / It, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = mv(this.info, ⵠⵠ, ⲆⲆⵠΔᐃⵠⲆⲆⵠ);
      Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Vg, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function Fp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃⵠΔΔΔᐃⲆ = Math.min(1, this.ᐃⵠΔΔΔᐃⲆ + _w * 2);
    ho.globalAlpha = this.ᐃⵠΔΔΔᐃⲆ * Math.min(ie, Math.max(wj, ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r) / 80));
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[247][cf.time][this.ⲆⵠⵠΔⵠ];
    if (this.ⲆⵠⵠΔⵠ < 2) {
      ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -ⵠⵠ.width;
      ΔⵠⲆ = -ⵠⵠ.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    } else if (this.ⲆⵠᐃⲆΔⲆΔ === Zj) {
      ⲆⲆᐃ = -ⵠⵠ.width;
      ΔⵠⲆ = -ⵠⵠ.height;
    } else {
      ⲆⲆᐃ = -ⵠⵠ.width * 1.35;
      ΔⵠⲆ = -ⵠⵠ.height * 1.35;
    }
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / Ug, -ΔⵠⲆ / pq, ⲆⲆᐃ, ΔⵠⲆ);
    ho.globalAlpha = 1;
    ho.restore();
  }
  function Rp() {
    if (this.info >= 10) {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && jl == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
          this.ᐃⲆⲆ.ᐃⲆΔ = false;
        }
        var a = Co * ((1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
        var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
        var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
      } else {
        b = os;
        c = Bb;
      }
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      var d = ΔΔ[115][cf.time];
      var e = -d.width * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      var f = -d.height * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      Jm(ho, d, -e / 2 + b, -f / 2 + c, e, f);
      ho.restore();
    }
  }
  function Gp() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var a = Co * ((og - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ᐃⲆᐃΔᐃⲆᐃ = (this.ᐃⲆᐃΔᐃⲆᐃ + ll * _w) % (Math.PI * H);
    this.ⵠΔⵠᐃΔΔΔ = (this.ⵠΔⵠᐃΔΔΔ - _w * qu) % (Math.PI * 2);
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.save();
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[151][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    ho.restore();
    ho.save();
    ho.rotate(this.ᐃⲆᐃΔᐃⲆᐃ);
    ⵠⵠ = ΔΔ[528][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / Lt, -ⵠⵠ.height / lr);
    ho.restore();
    ho.save();
    ho.rotate(this.ⵠΔⵠᐃΔΔΔ);
    ⵠⵠ = ΔΔ[527][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / rs, -ⵠⵠ.height / 2);
    ho.restore();
    ho.restore();
  }
  function jp(a, b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    c = ΔΔ[a][cf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -c.width;
    ΔⵠⲆ = -c.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    Jm(ho, c, -ⲆⲆᐃ / Ul, -ΔⵠⲆ / Rl, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && dr == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = ΔΔ[b];
      Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function Lp() {
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    a = Bb === this.info ? ΔΔ[1042][cf.time] : ΔΔ[1044][cf.time];
    ⲆⲆᐃ = -a.width * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height;
    Jm(ho, a, -ⲆⲆᐃ / Vh, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && al == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[1045];
      Jm(ho, a, -ⲆⲆᐃ / jk, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function Wp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = vt;
      }
      var b = Co * (_w * (Hg - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = Qs;
    }
    var e = this.info & 15;
    if (jn === this.info || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[953][cf.time];
      } else {
        f = ΔΔ[204][cf.time];
      }
      var g = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.width;
      var h = -f.height * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      Jm(ho, f, -g / Vh + c, -h / as + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[954][cf.time];
      } else {
        f = ΔΔ[205][cf.time];
      }
      ho.translate(0, f.height / vg);
      Jm(ho, f, c - f.width / xj, -f.height + d);
    }
    ho.restore();
  }
  function Op() {
    if (this.info !== 10) {
      for (var a = this.info & 15, b = 0; b < a; b++) {
        this.Δᐃⵠⵠ[b].ᐃⵠᐃⵠ(207, this.x, this.y);
      }
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
          this.ᐃⲆⲆ.ᐃⲆΔ = false;
        }
        var c = (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
        var d = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * c;
        var e = c * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
      } else {
        d = Qs;
        e = 0;
      }
      if (this.info & 16) {
        var f = ΔΔ[958][cf.time];
      } else {
        f = ΔΔ[957][cf.time];
      }
      Jm(ho, f, -f.width / 2 + d, -f.width / It + e);
      ho.restore();
    }
  }
  function Np() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == Ta) {
        this.ᐃⲆⲆ.ᐃⲆΔ = Fh;
      }
      var b = Co * ((wt - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
    } else {
      c = ya;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[838][cf.time];
      } else {
        f = ΔΔ[191][cf.time];
      }
      var g = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.width;
      var h = -f.height * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      Jm(ho, f, -g / It + c, -h / Ul + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[839][cf.time];
      } else {
        f = ΔΔ[192][cf.time];
      }
      ho.translate(0, f.height / 2);
      Jm(ho, f, c - f.width / H, -f.height + d);
    }
    ho.restore();
  }
  function qp() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = gh;
      }
      var a = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
    } else {
      b = Zj;
      c = 0;
    }
    ho.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += as * Math.random() - au;
      c += Math.random() * pq - 1;
    }
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[156][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + _w * 3) % (Math.PI * 2);
    }
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[1210][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / jk, -ⵠⵠ.height / 2);
    ho.restore();
  }
  function Hp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + _w / vg, 1.8);
    } else {
      this.scale = Math.max(this.scale - _w, Oq);
    }
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = ΔΔ[449][cf.time];
    ⲆⲆᐃ = this.scale * (-a.width * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ΔⵠⲆ = this.scale * (-a.height * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    Jm(ho, a, -ⲆⲆᐃ / Ul, -ΔⵠⲆ / Ul, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && xo == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[463];
      Jm(ho, a, -ⲆⲆᐃ / as, -ΔⵠⲆ / jk, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = wt;
    }
    a = ΔΔ[451][cf.time];
    ⲆⲆᐃ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width);
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height);
    ho.save();
    ho.translate(Co * -30, Co * 70);
    ho.rotate(this.rotate.ΔΔⲆ);
    Jm(ho, a, Co * -Yg, Co * -40, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[466];
      Jm(ho, a, Co * -10, Co * -40, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = gs;
    }
    ho.restore();
    a = ΔΔ[452][cf.time];
    ho.save();
    ho.translate(Co * 30, Co * 70);
    ho.rotate(-this.rotate.ΔΔⲆ);
    Jm(ho, a, Co * Ch - ⲆⲆᐃ, Co * -40, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[467];
      Jm(ho, a, J * Co - ⲆⲆᐃ, Co * -40, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = Te;
    }
    ho.restore();
    ho.restore();
  }
  function Up() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    var a = ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + _w / Vh, 1.8) : Math.max(this.scale - _w, wt);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    this.ⲆⲆⵠᐃ = a < 350 ? Math.max(0, this.ⲆⲆⵠᐃ - _w * 2.2) : Math.min(og, this.ⲆⲆⵠᐃ + _w * 2.2);
    b = this.info & 1 ? ΔΔ[1114][cf.time] : ΔΔ[1113][cf.time];
    ⲆⲆᐃ = this.scale * (-b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height);
    ho.globalAlpha = 1 - this.ⲆⲆⵠᐃ;
    Jm(ho, b, -ⲆⲆᐃ / 4, -ΔⵠⲆ / 4, ⲆⲆᐃ / Rl, ΔⵠⲆ / 2);
    b = (this.info & 1) === ya ? ΔΔ[235][cf.time] : ΔΔ[1098][cf.time];
    ⲆⲆᐃ = this.scale * (-b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height * this.scale;
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Jm(ho, b, -ⲆⲆᐃ / $i, -ΔⵠⲆ / Mq, ⲆⲆᐃ / eh, ΔⵠⲆ / Hj);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = (Hg - this.ⲆⲆⵠᐃ) * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      var b = ΔΔ[1115];
      ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.width * this.scale;
      ΔⵠⲆ = -b.height * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
      Jm(ho, b, -ⲆⲆᐃ / Ct, -ΔⵠⲆ / Ls, ⲆⲆᐃ / 2, ΔⵠⲆ / Ob);
      ho.globalAlpha = (0.6 - this.ᐃⲆⲆ.ΔΔⲆ) * this.ⲆⲆⵠᐃ;
      b = ΔΔ[1107];
      ⲆⲆᐃ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.width);
      ΔⵠⲆ = -b.height * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
      Jm(ho, b, -ⲆⲆᐃ / Pe, -ΔⵠⲆ / Fr, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
      ho.globalAlpha = 1;
    }
    b = Da === (this.info & 1) ? ΔΔ[1102][cf.time] : ΔΔ[1101][cf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.width * this.scale;
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height);
    ho.save();
    ho.translate(Co * -20, Co * 0);
    ho.rotate(this.rotate.ΔΔⲆ);
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Jm(ho, b, Co * -ⲆⲆᐃ / ba, Co * -ΔⵠⲆ / Pl, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = (0.6 - this.ᐃⲆⲆ.ΔΔⲆ) * this.ⲆⲆⵠᐃ;
      b = ΔΔ[1108];
      Jm(ho, b, Co * -ⲆⲆᐃ / 4, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / Ug, ΔⵠⲆ / as);
      ho.globalAlpha = 1;
    }
    ho.restore();
    b = this.info & 1 ? ΔΔ[1104][cf.time] : ΔΔ[1105][cf.time];
    ho.save();
    ho.translate(Co * 20, Co * eu);
    ho.rotate(-this.rotate.ΔΔⲆ);
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Jm(ho, b, -ⲆⲆᐃ * Co / $i, Co * -ΔⵠⲆ / Pe, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      b = ΔΔ[1109];
      Jm(ho, b, -ⲆⲆᐃ * Co / gl, Co * -ΔⵠⲆ / 4, ⲆⲆᐃ / lr, ΔⵠⲆ / 2);
      ho.globalAlpha = wt;
    }
    ho.globalAlpha = Tl;
    ho.restore();
    ho.restore();
  }
  function Yp() {
    var a = undefined;
    var b = Wh;
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    if (this.ⵠⲆΔⲆⲆ >= 0.1 && this.ⵠⲆΔⲆⲆ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ⵠⲆΔⲆⲆ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : Hg;
      }
      a = ΔΔ[1150][cf.time];
      ⲆⲆᐃ = -a.width * this.ⲆᐃᐃⲆ.ΔΔⲆ;
      ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height;
      ho.globalAlpha = c;
      Jm(ho, a, -ⲆⲆᐃ / nj, -ΔⵠⲆ / es, ⲆⲆᐃ / Rl, ΔⵠⲆ / eh);
      b = ΔΔ[1151];
    }
    if (this.ⵠⲆΔⲆⲆ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min($b, this.ⵠⲆΔⲆⲆ - 0.9))) < 0.2) {
        c *= kq;
      } else {
        c = Xn;
      }
      a = ΔΔ[1152][cf.time];
      ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width;
      ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height;
      ho.globalAlpha = c;
      Jm(ho, a, -ⲆⲆᐃ / es, -ΔⵠⲆ / Ng, ⲆⲆᐃ / xq, ΔⵠⲆ / It);
      b = ΔΔ[1153];
    }
    if (this.action & hw.ⲆᐃⲆⵠ && b !== undefined) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == C) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = c * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.width;
      ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height;
      Jm(ho, b, -ⲆⲆᐃ / tb, -ΔⵠⲆ / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / as);
    }
    ho.globalAlpha = 1;
    ho.restore();
  }
  function Kp(a) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[a][cf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / pq, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function Vp(a, b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    c = ΔΔ[a][cf.time];
    ⲆⲆᐃ = -c.width * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    ΔⵠⲆ = -c.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    Jm(ho, c, -ⲆⲆᐃ / 4, -ΔⵠⲆ / 4, ⲆⲆᐃ / pq, ΔⵠⲆ / vg);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && vj == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = ΔΔ[b];
      Jm(ho, c, -ⲆⲆᐃ / nl, -ΔⵠⲆ / Ls, ⲆⲆᐃ / rs, ΔⵠⲆ / Rl);
      ho.globalAlpha = hb;
    }
    ho.restore();
  }
  function Zp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && ss == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = Co * ((Gh - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = mj;
      d = fl;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[849][cf.time];
      } else {
        f = ΔΔ[193][cf.time];
      }
      var g = -f.width * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      var h = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.height;
      Jm(ho, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[869][cf.time];
      } else {
        f = ΔΔ[194][cf.time];
      }
      ho.translate(0, f.height / Ul);
      Jm(ho, f, c - f.width / Ob, -f.height + d);
    }
    ho.restore();
  }
  function Xp(a, b, c) {
    if (st <= a) {
      ⵠⵠ = ΔΔ[a][cf.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (Qs + b) * Co, -ⵠⵠ.height / ls + Co * (c + 35));
          break;
        case 74:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (Wl + b) * Co, -ⵠⵠ.height / Mq + (c + 45) * Co);
          break;
        case 75:
        case 76:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (1 + b) * Co, -ⵠⵠ.height / es + (c + 40) * Co);
      }
    }
  }
  function $p() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = dr;
      }
      var a = (Hg - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
    } else {
      b = Qs;
      c = 0;
    }
    this.ᐃⲆᐃΔᐃⲆᐃ = (this.ᐃⲆᐃΔᐃⲆᐃ + Tt * _w) % (Hj * Math.PI);
    this.ⵠΔⵠᐃΔΔΔ = (this.ⵠΔⵠᐃΔΔΔ - Tr * _w) % (Math.PI * xj);
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.save();
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[152][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    ho.restore();
    ho.save();
    ho.rotate(this.ᐃⲆᐃΔᐃⲆᐃ);
    ⵠⵠ = ΔΔ[1194][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / Ug, -ⵠⵠ.height / It);
    ho.restore();
    ho.save();
    ho.rotate(this.ⵠΔⵠᐃΔΔΔ);
    ⵠⵠ = ΔΔ[1193][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / Pn);
    ho.restore();
    ho.restore();
  }
  function Tu() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && xo == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = f;
      }
      var a = (Oq - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
      var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = ig;
    }
    if (this.info === st) {
      ⵠⵠ = ΔΔ[183][cf.time];
    } else {
      ⵠⵠ = ΔΔ[802][cf.time][this.info - 1];
    }
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / 2 + b, -ⵠⵠ.height / xj + c);
    ho.restore();
  }
  function Vu() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃᐃⵠᐃᐃ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[1192][cf.time];
    ⲆⲆᐃ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / xj, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function Wu(a, b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    c = ΔΔ[a][cf.time];
    ⲆⲆᐃ = -c.width;
    ΔⵠⲆ = -c.height;
    Jm(ho, c, -ⲆⲆᐃ / eh, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && Jn == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = ΔΔ[b];
      Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / lr, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = ie;
    }
    ho.restore();
  }
  function Xu() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      var a = (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = Lr;
      c = Yh;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + _w * 0.5) % (Math.PI * 2);
    }
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.save();
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[641][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    ho.restore();
    ho.save();
    ho.rotate(this.ᐃⲆⲆⲆΔⵠⲆⲆⲆ);
    ⵠⵠ = ΔΔ[642][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / rs, -ⵠⵠ.height / xq);
    ho.restore();
    ho.restore();
  }
  function Yu() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃᐃⵠᐃᐃ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[289][cf.time];
    ⲆⲆᐃ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.height;
    Jm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Ug, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function $u() {
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    a = this.info === 0 ? ΔΔ[248][cf.time] : ΔΔ[1222][cf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width;
    ΔⵠⲆ = -a.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    Jm(ho, a, -ⲆⲆᐃ / Pn, -ΔⵠⲆ / Rl, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[1223];
      Jm(ho, a, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Ul, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function _u() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ⲆⲆⵠᐃⲆ.length == Mg || Xr.ⵠΔᐃᐃΔⵠᐃ >= this.ⲆⲆⵠᐃⲆ[this.ⲆⲆⵠᐃⲆ.length - Te])) {
      this.ⲆⲆⵠᐃⲆ.push(Xr.ⲆⵠⲆΔⵠΔᐃ);
    }
    for (var a = 0; this.ⲆⲆⵠᐃⲆ.length > a; a++) {
      this.ⲆⲆⵠᐃⲆ[a] = Math.max(0, this.ⲆⲆⵠᐃⲆ[a] - _w * Xr.ⵠⵠΔⲆΔᐃⵠ);
      ho.globalAlpha = this.ⲆⲆⵠᐃⲆ[a] / 1.3;
      var b = (Wl - this.ⲆⲆⵠᐃⲆ[a]) * 40;
      var c = (za - this.ⲆⲆⵠᐃⲆ[a]) * 35 + Ch;
      Tb(ho, Co * -68 + b * Math.sin(-this.angle - Math.PI / 2), Co * -to + b * Math.cos(-this.angle - Math.PI / Ob), c);
      db(ho, "#333333");
    }
    ho.globalAlpha = mk;
    if (this.ⲆⲆⵠᐃⲆ.length > 0 && this.ⲆⲆⵠᐃⲆ[0] === wj) {
      this.ⲆⲆⵠᐃⲆ.shift();
    }
    ho.restore();
  }
  function av(b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃᐃᐃᐃ.ᐃⲆΔ();
    ho.globalAlpha = 0.3;
    var c = ΔΔ[282][cf.time];
    var d = -c.width * this.ᐃᐃᐃᐃ.ΔΔⲆ;
    var e = this.ᐃᐃᐃᐃ.ΔΔⲆ * -c.height;
    Jm(ho, c, -d / 2, -e / 2, d, e);
    ho.globalAlpha = sd;
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && Ta == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = gh;
      }
      var f = Co * (_w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var g = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * f;
      var h = f * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      g = ya;
      h = 0;
    }
    c = ΔΔ[b][cf.time];
    Jm(ho, c, -c.width / Vh + g, -c.height / It + h);
    ho.restore();
  }
  function bv() {
    var a = Math.PI / H;
    var b = Math.PI / Wg;
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.ᐃⲆⲆΔⲆⲆᐃ.ᐃⲆΔ();
    this.ΔᐃⲆΔⵠΔᐃ.ᐃⲆΔ();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    c = this.info === 0 ? ΔΔ[231][cf.time] : ΔΔ[1053][cf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -c.width;
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -c.height;
    Jm(ho, c, -ⲆⲆᐃ / eh, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && Fh == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = ΔΔ[1056];
      Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = sd;
    }
    if (this.action & hw.ᐃᐃⵠⵠᐃ) {
      if (this.ⵠᐃᐃᐃⵠ.ᐃⲆΔ() && this.ⵠᐃᐃᐃⵠ.ⵠᐃⵠ == ss) {
        this.action -= hw.ᐃᐃⵠⵠᐃ;
      }
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[1065];
      Jm(ho, c, -ⲆⲆᐃ / vg, -ΔⵠⲆ / xj, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle + b);
    ho.translate(100, st);
    ho.rotate(a);
    c = this.info === st ? ΔΔ[1060][cf.time] : ΔΔ[1059][cf.time];
    ⲆⲆᐃ = this.ᐃⲆⲆΔⲆⲆᐃ.ΔΔⲆ * -c.width;
    ΔⵠⲆ = -c.height * this.ᐃⲆⲆΔⲆⲆᐃ.ΔΔⲆ;
    Jm(ho, c, -ⲆⲆᐃ / pq, -ΔⵠⲆ / Ul, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      c = ΔΔ[1057];
      Jm(ho, c, -ⲆⲆᐃ / Vh, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = og;
    }
    if (this.action & hw.ᐃᐃⵠⵠᐃ) {
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[1066];
      Jm(ho, c, -ⲆⲆᐃ / Rl, -ΔⵠⲆ / pq, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle + a + b);
    ho.translate(100, Yh);
    ho.rotate(a);
    c = this.info === 0 ? ΔΔ[1063][cf.time] : ΔΔ[1062][cf.time];
    ⲆⲆᐃ = -c.width * this.ΔᐃⲆΔⵠΔᐃ.ΔΔⲆ;
    ΔⵠⲆ = -c.height * this.ΔᐃⲆΔⵠΔᐃ.ΔΔⲆ;
    Jm(ho, c, -ⲆⲆᐃ / Rl, -ΔⵠⲆ / Hj, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      c = ΔΔ[1058];
      Jm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    if (this.action & hw.ᐃᐃⵠⵠᐃ) {
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[1067];
      Jm(ho, c, -ⲆⲆᐃ / xq, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function cv() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == al) {
        this.ᐃⲆⲆ.ᐃⲆΔ = Jn;
      }
      var a = Co * ((1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = Lr;
    }
    ho.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * Ug - 1;
      c += Math.random() * Lt - Te;
    }
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[153][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / as, -ⵠⵠ.height / H);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + _w * 3) % (Math.PI * 2);
    }
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[1198][cf.time];
    Jm(ho, ⵠⵠ, -ⵠⵠ.width / xj, -ⵠⵠ.height / 2);
    ho.restore();
  }
  function dv() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    var a = ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + _w / eh, 1.8) : Math.max(this.scale - _w, 1);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    this.ⲆⲆⵠᐃ = a < 350 ? Math.max(0, this.ⲆⲆⵠᐃ - _w * 2.2) : Math.min(au, this.ⲆⲆⵠᐃ + _w * 2.2);
    b = ΔΔ[1135][cf.time];
    ⲆⲆᐃ = -b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height * this.scale;
    ho.globalAlpha = wt - this.ⲆⲆⵠᐃ;
    Jm(ho, b, -ⲆⲆᐃ / Vn, -ΔⵠⲆ / 4, ⲆⲆᐃ / Pn, ΔⵠⲆ / pq);
    b = ΔΔ[1119][cf.time];
    ⲆⲆᐃ = this.scale * (-b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ΔⵠⲆ = this.scale * (-b.height * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Jm(ho, b, -ⲆⲆᐃ / 4, -ΔⵠⲆ / 4, ⲆⲆᐃ / vg, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && f == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= hw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = (0.6 - this.ᐃⲆⲆ.ΔΔⲆ) * (1 - this.ⲆⲆⵠᐃ);
      var b = ΔΔ[1136];
      ⲆⲆᐃ = this.scale * (-b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ);
      ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height * this.scale;
      Jm(ho, b, -ⲆⲆᐃ / Ng, -ΔⵠⲆ / es, ⲆⲆᐃ / Ug, ΔⵠⲆ / vg);
      ho.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      b = ΔΔ[1128];
      ⲆⲆᐃ = -b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
      ΔⵠⲆ = this.scale * (-b.height * this.ⲆᐃᐃⲆ.ΔΔⲆ);
      Jm(ho, b, -ⲆⲆᐃ / 4, -ΔⵠⲆ / gl, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
      ho.globalAlpha = 1;
    }
    b = ΔΔ[1122][cf.time];
    ⲆⲆᐃ = -b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
    ΔⵠⲆ = -b.height * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
    ho.save();
    ho.translate(Co * -40, Co * 80);
    ho.rotate(this.rotate.ΔΔⲆ);
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Jm(ho, b, -ⲆⲆᐃ * Co / 4, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / Ul, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      b = ΔΔ[1129];
      Jm(ho, b, -ⲆⲆᐃ * Co / 4, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / Ob);
      ho.globalAlpha = pu;
    }
    ho.restore();
    b = ΔΔ[1125][cf.time];
    ho.save();
    ho.translate(Co * 40, Co * 80);
    ho.rotate(-this.rotate.ΔΔⲆ);
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Jm(ho, b, Co * -ⲆⲆᐃ / 4, -ΔⵠⲆ * Co / Pe, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & hw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      b = ΔΔ[1130];
      Jm(ho, b, -ⲆⲆᐃ * Co / 4, Co * -ΔⵠⲆ / 4, ⲆⲆᐃ / rs, ΔⵠⲆ / as);
      ho.globalAlpha = 1;
    }
    ho.globalAlpha = 1;
    ho.restore();
    ho.restore();
  }
  function ev(a, b, c) {
    if (a >= 0) {
      ⵠⵠ = ΔΔ[a][cf.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          Mv(a, ⵠⵠ, -ⵠⵠ.width / 2 - Co * (45 + b), -ⵠⵠ.height / 2 + (c + 22) * Co);
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / Fr - Co * (52 + b), -ⵠⵠ.height / Ls + (c + 20) * Co);
          break;
        case 98:
        case 99:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / Pl - Co * (57 + b), -ⵠⵠ.height / 4 + (c + Bs) * Co);
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * Co, -ⵠⵠ.height / Fr + Co * (c + 45));
          break;
        case 30:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (52 + b), -ⵠⵠ.height / 4 + (c + 45) * Co);
          break;
        case 19:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (47 + b), -ⵠⵠ.height / 4 + Co * (c + 44));
          break;
        case 9:
          Mv(a, ⵠⵠ, -ⵠⵠ.width / 2 - (47 + b) * Co, -ⵠⵠ.height / vg + (c + 44) * Co);
          break;
        case 62:
          Mv(a, ⵠⵠ, -ⵠⵠ.width / 2 - (40 + b) * Co, -ⵠⵠ.height / jk + (c + 65) * Co);
          break;
        case 12:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (37 + b), -ⵠⵠ.height / 4 + (c + 85) * Co);
          break;
        case 34:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / gl - (37 + b) * Co, -ⵠⵠ.height / ls + (c + 85) * Co);
          break;
        case 54:
        case 53:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (26 + b) * Co, -ⵠⵠ.height / 4 + (c + 77) * Co);
          break;
        case 17:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / Ct - Co * (37 + b), -ⵠⵠ.height / 4 + (c + 85) * Co);
          break;
        case 63:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / Vn - Co * (47 + b), -ⵠⵠ.height / 4 + (c + 44) * Co);
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (37 + b), -ⵠⵠ.height / 4 + (c + 30) * Co);
          break;
        case 56:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * Co, -ⵠⵠ.height / nl + Co * (c + 35));
          break;
        case 92:
        case 93:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (47 + b), -ⵠⵠ.height / 4 + Co * (c + 40));
          break;
        case 89:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / Mq - Co * (47 + b), -ⵠⵠ.height / nj + (c + 34) * Co);
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (37 + b), -ⵠⵠ.height / ls + (c + 90) * Co);
          break;
        case 18:
          Dv(a, ⵠⵠ, -ⵠⵠ.width / 4 - (40 + b) * Co, -ⵠⵠ.height / 4 + (c + 85) * Co);
          break;
        case 16:
          Mv(a, ⵠⵠ, -ⵠⵠ.width / 2 - Co * (39 + b), -ⵠⵠ.height / 2 + Co * (c + 90));
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          Mv(a, ⵠⵠ, -ⵠⵠ.width / 2 - (46 + b) * Co, -ⵠⵠ.height / 2 + (c + 35) * Co);
          break;
        case 49:
          Mv(a, ⵠⵠ, -ⵠⵠ.width / 2 - (47 + b) * Co, -ⵠⵠ.height / Hj + Co * (c + 54));
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          Mv(a, ⵠⵠ, -ⵠⵠ.width / 2 - Co * (46 + b), -ⵠⵠ.height / 2 + (c + 35) * Co);
          break;
        case 55:
          Mv(a, ⵠⵠ, -ⵠⵠ.width / 2 - Co * (47 + b), -ⵠⵠ.height / It + Co * (c + 20));
      }
    }
  }
  function fv(a) {
    if (a > Mg) {
      var b = ΔΔ[a][cf.time];
      switch (a) {
        case 58:
          Mv(a, b, -b.width / It + Hj * Co, -b.height / Rl - Co * 5);
          break;
        case 10:
          Mv(a, b, -b.width / as, -b.height / Hj - Co * 18);
          break;
        case 11:
          Mv(a, b, -b.width / 2, -b.height / 2 - Co * 10);
          break;
        case 23:
          Mv(a, b, -b.width / Ug, -b.height / 2 - Co * Fl);
          break;
        case 24:
          Dv(a, b, -b.width / 4, -b.height / 4 - Co * Jg);
          break;
        case 25:
          Mv(a, b, -b.width / 2 - Co * $b, -b.height / Ug - Co * 23);
          break;
        case 26:
          Mv(a, b, -b.width / 2, -b.height / Rl - Fk * Co);
          break;
        case 27:
          Mv(a, b, -b.width / 2, -b.height / Vg - Co * 2);
          break;
        case 43:
          Mv(a, b, -b.width / pq + Co * 1.5, -b.height / Vh - zs * Co);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          Dv(a, b, -b.width / ls, -b.height / $l + Co * Lt);
          break;
        case 41:
        case 42:
          Mv(a, b, -b.width / 2 - Co * 5, -b.height / Rl - Co * eh);
          break;
        case 40:
          Mv(a, b, -b.width / 2, -b.height / pq - Co * 2);
          break;
        case 85:
          Mv(a, b, -b.width / 2, -b.height / Ul - Co * 2);
          break;
        case 48:
          Mv(a, b, -b.width / 2, -b.height / Hj - Co * 2);
          break;
        case 47:
          Mv(a, b, -b.width / Vh + xq * Co, -b.height / 2);
          break;
        case 59:
          Mv(a, b, -b.width / 2, -b.height / 2 - Co * 5);
          break;
        case 77:
        case 78:
        case 79:
          Mv(a, b, -b.width / 2 - Co * 1, -b.height / 2);
          break;
        case 83:
          Mv(a, b, -b.width / Rl, -b.height / 2 + Co * 2);
          break;
        case 84:
        case 86:
          Mv(a, b, -b.width / 2, -b.height / eh + Co * 8);
          break;
        case 61:
          Mv(a, b, -b.width / Vg, -b.height / as - Co * 4);
      }
    }
  }
  function gv() {
    if (!this.ᐃⲆᐃⲆⵠ && this.ΔⲆᐃΔΔ !== Lr) {
      if (this.x != this.r.x || this.y != this.r.y) {
        var a = (ᐃⵠΔⲆ.ΔⵠΔⵠⲆᐃⲆ(this.x, this.y, this.r.x, this.r.y) + Math.PI / lr) % (rs * Math.PI);
        this.ⲆΔΔΔⵠ = ᐃⵠΔⲆ.ⵠΔⵠΔΔᐃⲆ(a, this.ⲆΔΔΔⵠ);
        this.ⲆΔΔΔⵠ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⲆΔΔΔⵠ, a, 0.018);
      }
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.ⲆΔΔΔⵠ);
      if (this.ΔⲆᐃΔΔ === 223) {
        if (this.ᐃⵠⵠⵠⲆ > 50 || this.ⵠᐃᐃᐃⲆ > 0) {
          if (this.ᐃⵠⵠⵠⲆ > 50) {
            this.ⵠᐃᐃᐃⲆ = Math.min(gs, this.ⵠᐃᐃᐃⲆ + _w);
          } else {
            this.ⵠᐃᐃᐃⲆ = Math.max(0, this.ⵠᐃᐃᐃⲆ - _w);
          }
          ho.globalAlpha = this.ⵠᐃᐃᐃⲆ;
          var b = ΔΔ[225][cf.time];
          Dv(225, b, -b.width / 4, -b.height / Mq);
          ho.globalAlpha = Wl;
        }
        b = ΔΔ[223][cf.time];
        Dv(223, b, -b.width / Gi, -b.height / 4);
      } else if (this.ΔⲆᐃΔΔ === 229) {
        this.ⵠⵠⲆⲆᐃ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⵠⵠⲆⲆᐃ, this.ᐃⵠⵠⵠⲆ, 0.018);
        this.ᐃⲆⵠᐃⵠᐃⲆ.ᐃⲆΔ();
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min(1, this.ⵠᐃᐃᐃⲆ + _w / 4);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0.1, this.ⵠᐃᐃᐃⲆ - _w);
        }
        b = ΔΔ[1100][cf.time];
        Dv(1100, b, -b.width / gl, -b.height / nj);
        b = ΔΔ[1103][cf.time];
        ⲆⲆᐃ = -b.width;
        ΔⵠⲆ = -b.height;
        ho.save();
        ho.translate(Co * -rl, -ws * Co);
        ho.rotate(this.ⵠᐃᐃᐃⲆ * this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ);
        Jm(ho, b, -ⲆⲆᐃ / Pl, -ΔⵠⲆ / 4, ⲆⲆᐃ / Ug, ΔⵠⲆ / jk);
        ho.restore();
        b = ΔΔ[1106][cf.time];
        ho.save();
        ho.translate(Co * 20, Co * -qr);
        ho.rotate(this.ⵠᐃᐃᐃⲆ * -this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ);
        Jm(ho, b, -ⲆⲆᐃ / Ng, -ΔⵠⲆ / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / pq);
        ho.restore();
      } else if (this.ΔⲆᐃΔΔ === 228) {
        this.ⵠⵠⲆⲆᐃ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⵠⵠⲆⲆᐃ, this.ᐃⵠⵠⵠⲆ, 0.018);
        this.ᐃⲆⵠᐃⵠᐃⲆ.ᐃⲆΔ();
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min(gs, this.ⵠᐃᐃᐃⲆ + _w / 4);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0.1, this.ⵠᐃᐃᐃⲆ - _w);
        }
        b = ΔΔ[1085][cf.time];
        Dv(1085, b, -b.width / 4, -b.height / Ct);
        b = ΔΔ[1088][cf.time];
        ⲆⲆᐃ = -b.width;
        ΔⵠⲆ = -b.height;
        ho.save();
        ho.translate(Co * -40, Co * -45);
        ho.rotate(this.ⵠᐃᐃᐃⲆ * this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ);
        Jm(ho, b, -ⲆⲆᐃ / ls, -ΔⵠⲆ / ls, ⲆⲆᐃ / Lt, ΔⵠⲆ / 2);
        ho.restore();
        b = ΔΔ[1091][cf.time];
        ho.save();
        ho.translate(Co * 40, Co * -45);
        ho.rotate(-this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ * this.ⵠᐃᐃᐃⲆ);
        Jm(ho, b, -ⲆⲆᐃ / 4, -ΔⵠⲆ / Fr, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
        ho.restore();
      } else if (this.ΔⲆᐃΔΔ === 227) {
        this.ⵠⵠⲆⲆᐃ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⵠⵠⲆⲆᐃ, this.ᐃⵠⵠⵠⲆ, 0.018);
        this.ᐃⲆⵠᐃⵠᐃⲆ.ᐃⲆΔ();
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min($b, this.ⵠᐃᐃᐃⲆ + _w / 4);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0.1, this.ⵠᐃᐃᐃⲆ - _w);
        }
        b = ΔΔ[1070][cf.time];
        Dv(1070, b, -b.width / Ct, -b.height / 4);
        b = ΔΔ[1073][cf.time];
        ⲆⲆᐃ = -b.width;
        ΔⵠⲆ = -b.height;
        ho.save();
        ho.translate(Co * -40, Co * -45);
        ho.rotate(this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ * this.ⵠᐃᐃᐃⲆ);
        Jm(ho, b, -ⲆⲆᐃ / ls, -ΔⵠⲆ / 4, ⲆⲆᐃ / Ob, ΔⵠⲆ / 2);
        ho.restore();
        b = ΔΔ[1076][cf.time];
        ho.save();
        ho.translate(Co * 40, Co * -45);
        ho.rotate(this.ⵠᐃᐃᐃⲆ * -this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ);
        Jm(ho, b, -ⲆⲆᐃ / ba, -ΔⵠⲆ / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
        ho.restore();
      } else if (this.ΔⲆᐃΔΔ === 91) {
        this.ⵠⵠⲆⲆᐃ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⵠⵠⲆⲆᐃ, this.ᐃⵠⵠⵠⲆ, 0.018);
        b = ΔΔ[91][cf.time];
        Dv(91, b, -b.width / 4, -b.height / Gi);
      } else if (this.ΔⲆᐃΔΔ === 230) {
        this.ⵠⵠⲆⲆᐃ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⵠⵠⲆⲆᐃ, this.ᐃⵠⵠⵠⲆ, 0.018);
        b = ΔΔ[236][cf.time];
        Dv(236, b, -b.width / ba, -b.height / 4);
      } else if (this.ΔⲆᐃΔΔ === 224) {
        b = ΔΔ[224][cf.time];
        Dv(224, b, -b.width / Gi, -b.height / Pe);
      } else if (this.ΔⲆᐃΔΔ === 239) {
        b = ΔΔ[1221][cf.time];
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min(pu, this.ⵠᐃᐃᐃⲆ + _w / 4);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0, this.ⵠᐃᐃᐃⲆ - _w);
        }
        this.ⵠΔᐃⵠⵠ += _w * 60;
        if (this.ⵠΔᐃⵠⵠ > 60) {
          this.ⵠΔᐃⵠⵠ -= 60;
        }
        var c = (La * (this.ⵠΔᐃⵠⵠ < 30 ? this.ⵠΔᐃⵠⵠ / 30 : Tl - (this.ⵠΔᐃⵠⵠ - 30) / 30) - 6) * this.ⵠᐃᐃᐃⲆ;
        Dv(1221, b, -b.width / 4, -b.height / Pl + c);
      } else if (this.ΔⲆᐃΔΔ === 225) {
        b = ΔΔ[1043][cf.time];
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min(Wl, this.ⵠᐃᐃᐃⲆ + _w / 4);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0, this.ⵠᐃᐃᐃⲆ - _w);
        }
        this.ⵠΔᐃⵠⵠ += _w * 60;
        if (this.ⵠΔᐃⵠⵠ > 60) {
          this.ⵠΔᐃⵠⵠ -= 60;
        }
        c = this.ⵠᐃᐃᐃⲆ * (-qq + (this.ⵠΔᐃⵠⵠ < 30 ? this.ⵠΔᐃⵠⵠ / 30 : 1 - (this.ⵠΔᐃⵠⵠ - 30) / 30) * 12);
        Dv(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ΔⲆᐃΔΔ === 226) {
        var d = Math.PI / vg;
        var e = Math.PI / tb;
        b = ΔΔ[1055][cf.time];
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min(sd, this.ⵠᐃᐃᐃⲆ + _w / Wg);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0, this.ⵠᐃᐃᐃⲆ - _w);
        }
        this.ⵠΔᐃⵠⵠ += _w * 60;
        if (this.ⵠΔᐃⵠⵠ > 60) {
          this.ⵠΔᐃⵠⵠ -= 60;
        }
        c = this.ⵠᐃᐃᐃⲆ * ($a * (this.ⵠΔᐃⵠⵠ < 30 ? this.ⵠΔᐃⵠⵠ / 30 : sd - (this.ⵠΔᐃⵠⵠ - 30) / 30) - 6);
        Dv(1055, b, -b.width / 4 + c, -b.height / Pe);
        ho.restore();
        ho.save();
        ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
        ho.rotate(Math.PI + this.ⲆΔΔΔⵠ + e);
        ho.translate(120, c);
        ho.rotate(d);
        b = ΔΔ[1060][cf.time];
        ⲆⲆᐃ = -b.width;
        ΔⵠⲆ = -b.height;
        Jm(ho, b, -ⲆⲆᐃ / jk, -ΔⵠⲆ / jk, ⲆⲆᐃ, ΔⵠⲆ);
        ho.restore();
        ho.save();
        ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
        ho.rotate(Math.PI + this.ⲆΔΔΔⵠ + d + e);
        ho.translate(120, c);
        ho.rotate(d);
        b = ΔΔ[1063][cf.time];
        ⲆⲆᐃ = -b.width;
        ΔⵠⲆ = -b.height;
        Jm(ho, b, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Pn, ⲆⲆᐃ, ΔⵠⲆ);
      }
      ho.restore();
    }
  }
  function hv() {
    if (this.enabled && this.ΔᐃⲆΔᐃ >= ig) {
      var a = new Date().getTime() - this.ΔᐃⲆΔᐃ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = Te - (b - 0.5) * H;
      } else {
        b *= 2;
      }
      if ((a = Math.floor(a / 1000)) < kw.ᐃⲆᐃⲆᐃᐃⵠ) {
        a = kw.ᐃⲆᐃⲆᐃᐃⵠ - a;
        this.label ||= nd(Co, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (this.now != a || !this.ⵠⵠᐃΔⵠΔⵠ) {
          this.now = a;
          this.ⵠⵠᐃΔⵠΔⵠ = nd(Co, "" + a, 40, "#660000", null, null, null, null, null, "#000", Cs);
        }
        Jm(ho, this.label, (lo - this.label.width) / Ug, Co * 100);
        ho.globalAlpha = b;
        Jm(ho, this.ⵠⵠᐃΔⵠΔⵠ, (lo - this.label.width) / 2 - this.ⵠⵠᐃΔⵠΔⵠ.width + Rt * Co, Co * 100);
        ho.globalAlpha = 1;
      }
    }
  }
  function iv() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; this.text.length > a && a < as; a++) {
        if (!this.label[a]) {
          this.label[a] = pb(Co, this.text[a]);
          this.ΔⲆⲆⲆΔΔⵠ[a] = 0;
          this.ᐃⲆⲆⲆΔΔⵠ[a] = mj;
        }
        if (a === ie) {
          this.ᐃⲆⲆⲆΔΔⵠ[Rq] = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(this.ⵠΔᐃᐃᐃⵠΔ) * 30;
        }
      }
      this.ΔⲆⲆⲆΔΔⵠ[Yh] += _w;
      if (this.text.length > 1) {
        this.ⵠΔᐃᐃᐃⵠΔ = Math.min(this.ⵠΔᐃᐃᐃⵠΔ + _w, $b);
        if (Te < this.ΔⲆⲆⲆΔΔⵠ[0] && this.ⵠΔᐃᐃᐃⵠΔ > 0.5) {
          this.ΔⲆⲆⲆΔΔⵠ[1] += _w;
        }
      }
      for (a = wg; this.text.length > a && Vh > a; a++) {
        var b = this.ΔⲆⲆⲆΔΔⵠ[a];
        if (b > wg) {
          ho.globalAlpha = b < 0.25 ? b * es : b > 3.75 ? Math.max(($i - b) * tb, 0) : 1;
          Jm(ho, this.label[a], -this.label[a].width / 2, -this.ᐃⲆⲆⲆΔΔⵠ[a] + -this.label[a].height / Pn - Co * 110);
        }
      }
      if (this.ΔⲆⲆⲆΔΔⵠ[0] > 4) {
        this.ΔⲆⲆⲆΔΔⵠ.shift();
        this.text.shift();
        this.ᐃⲆⲆⲆΔΔⵠ.shift();
        this.label.shift();
        this.ⵠΔᐃᐃᐃⵠΔ = Yh;
      }
    }
    ho.restore();
  }
  function jv() {
    var c = Lr;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        c = 1;
    }
    if (this.ᐃⲆᐃⲆⵠ) {
      for (var f = 0; this.bubbles.length > f; f++) {
        var j = this.bubbles[f];
        if (j.ΔΔᐃΔᐃ > 0.5) {
          var k = $b - (j.ΔΔᐃΔᐃ - 0.5) * pq;
        } else {
          k = j.ΔΔᐃΔᐃ * 2;
        }
        ho.globalAlpha = k;
        var m = ΔΔ[540][cf.time][j.id];
        Jm(ho, m, Xw.ⵠᐃⲆ.x + j.x - m.width / 2, Xw.ⵠᐃⲆ.y + j.y - m.height / 2);
        ho.globalAlpha = 1;
      }
    } else {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      cf.ᐃⲆΔᐃΔᐃΔⲆΔ(this);
      if (this.action & hw.ⲆⵠⵠΔⲆᐃⲆ) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                ho.save();
                var b = a.attack.ΔΔⲆ * -3 / Math.PI;
                if (a.attack.ⵠᐃⵠ) {
                  var c = -Math.PI / 3 - (Math.PI / ut + a.attack.ΔΔⲆ) / 3;
                } else {
                  c = a.attack.ΔΔⲆ;
                }
                ho.rotate(a.angle - Math.PI / Ug + c);
                ho.globalAlpha = b / 1.2;
                Tb(ho, Co * -40, Co * 90, Co * 5);
                db(ho, "#0B6A84");
                ho.globalAlpha = b / 1.2;
                Tb(ho, Co * -52, Co * 100, Co * 8);
                db(ho, "#0B6A84");
                ho.globalAlpha = b / 1.2;
                Tb(ho, Co * -30, Co * 95, Co * 4);
                db(ho, "#0B6A84");
                ho.globalAlpha = 1;
                ho.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (pu === a.ⲆⵠᐃⲆΔⲆΔ) {
                  break;
                }
                if (a.ⲆΔΔΔᐃ > 0) {
                  var d = Xr.ᐃⲆⵠⲆᐃⲆΔ[cf.time];
                } else {
                  d = eu < a.ⲆᐃⵠⵠⵠΔΔ || Lr < a.ΔΔⲆΔⲆ ? Xr.ⵠⵠⵠⲆⲆΔΔ[cf.time] : Xr.ᐃⲆⵠⲆⵠⲆⵠ[cf.time];
                }
                b = -sl * a.attack.ΔΔⲆ / Math.PI;
                if ((c = a.attack.ⵠᐃⵠ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ⵠᐃᐃⲆⵠᐃΔ = a.angle;
                }
                ho.save();
                ho.rotate(a.ⵠᐃᐃⲆⵠᐃΔ - Math.PI / 2);
                ho.globalAlpha = b;
                var e = Co * 25 + c * 25;
                Tb(ho, e, Co * 80, Co * 15);
                db(ho, d);
                Tb(ho, -e, Co * 80, Ab * Co);
                db(ho, d);
                ho.globalAlpha = Oq;
                ho.restore();
            }
          }
        })(this);
      }
      ho.save();
      ho.rotate(this.angle - Math.PI / jk);
      if (!(this.action & hw.ⲆⵠⵠΔⲆᐃⲆ)) {
        if (this.action & hw.IDLE || ig !== this.ΔⲆᐃΔΔ) {
          this.ᐃᐃⵠⲆⵠⵠⲆ.ᐃⲆΔ();
        } else if (this.action & hw.ⵠⵠⵠᐃΔΔⵠ) {
          this.ΔⲆΔⵠⲆᐃⲆ.ᐃⲆΔ();
        }
      }
      var p;
      var q = this.ᐃᐃⵠⲆⵠⵠⲆ.ΔΔⲆ;
      var w = this.ΔⲆΔⵠⲆᐃⲆ.ΔΔⲆ;
      if (this.ⵠΔⵠⲆᐃ === 85) {
        m = ΔΔ[793][cf.time];
        p = 793;
      } else if (this.ⵠΔⵠⲆᐃ === 20) {
        m = ΔΔ[920][cf.time];
        p = 920;
      } else if (this.ⵠΔⵠⲆᐃ === 21) {
        m = ΔΔ[924][cf.time];
        p = 924;
      } else if (this.ⵠΔⵠⲆᐃ === 22) {
        m = ΔΔ[928][cf.time];
        p = 928;
      } else if (this.ⲆΔⲆⵠⵠⲆᐃ) {
        m = ΔΔ[822][cf.time];
        p = 822;
      } else {
        m = ΔΔ[7][this.ΔⵠΔᐃ][cf.time];
        p = 7;
      }
      ΔΔⲆᐃ = ΔΔ[286][cf.time];
      var x = m;
      var h = p;
      if (this.action & hw.ⲆⵠⵠΔⲆᐃⲆ) {
        if (this.attack.ᐃⲆΔ() && _h == this.attack.ⵠᐃⵠ) {
          this.ⵠⲆᐃΔⲆ = !this.ⵠⲆᐃΔⲆ;
          this.action -= hw.ⲆⵠⵠΔⲆᐃⲆ;
          if (Xw.ᐃⲆᐃᐃ == this.ᐃⲆᐃᐃ) {
            Xw.control.ΔᐃⵠΔ = 0;
          }
        }
        if (this.right >= 0) {
          this.ⵠⲆᐃΔⲆ = true;
        }
        var l = this.ⵠⲆᐃΔⲆ ? this.attack.ΔΔⲆ : -this.attack.ΔΔⲆ / 3;
        var y = this.ⵠⲆᐃΔⲆ ? this.attack.ΔΔⲆ / 3 : -this.attack.ΔΔⲆ;
        if (this.ⲆΔⲆⵠⵠⲆᐃ) {
          ho.save();
          ho.rotate(l);
          Mv(p, m, -m.width / 2 - Co * (66 + q), -m.height / H + (5 + w) * Co);
          ho.restore();
          ho.save();
          ho.rotate(y);
          Mv(p, m, -m.width / 2 + (66 + q) * Co, -m.height / Ug + (5 + w) * Co);
          ho.restore();
        } else if (c === wg) {
          if (this.right === 64) {
            l = -ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ(-l);
          }
          ho.save();
          ho.rotate(l);
          Mv(286, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / Pn - (49 + q) * Co, -ΔΔⲆᐃ.height / 2 + Co * (Qh + w));
          if (this.right === 28) {
            var u = ΔΔ[this.right][this.ᐃΔⲆⵠⲆ][cf.time];
            Rv(this.right, this.ᐃΔⲆⵠⲆ, u, -u.width / 4 - Co * (62 + q), -u.height / 4 + (w + 18) * Co);
          } else {
            ev(this.right, q, w);
          }
          if (p >= 920) {
            Dv(p, m, -m.width / 4 - (49 + q) * Co, -m.height / Wg + (d + w) * Co);
          } else if (p !== 793) {
            Rv(p, this.ΔⵠΔᐃ, m, -m.width / $i - (49 + q) * Co, -m.height / 4 + (ps + w) * Co);
          } else {
            Mv(p, m, -m.width / 2 - (49 + q) * Co, -m.height / 2 + (nn + w) * Co);
          }
          ho.restore();
          ho.save();
          ho.rotate(y);
          Mv(286, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / 2 + (49 + q) * Co, -ΔΔⲆᐃ.height / 2 + Co * (sj + w));
          if (p >= 920) {
            Dv(p, m, -m.width / Vn + (49 + q) * Co, -m.height / Fr + (11 + w) * Co);
          } else if (p !== 793) {
            Rv(p, this.ΔⵠΔᐃ, m, -m.width / 4 + Co * (49 + q), -m.height / 4 + Co * (At + w));
          } else {
            Mv(p, m, -m.width / 2 + (49 + q) * Co, -m.height / 2 + (Qt + w) * Co);
          }
          ho.restore();
        }
      } else if (this.ⲆΔⲆⵠⵠⲆᐃ) {
        Mv(p, m, -m.width / 2 - Co * (66 + q), -m.height / 2 + (5 + w) * Co);
        Mv(p, m, -m.width / 2 + Co * (66 + q), -m.height / 2 + Co * (Fk + w));
      } else if (c === 0) {
        Mv(286, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / rs - Co * (49 + q), -ΔΔⲆᐃ.height / 2 + Co * (15 + w));
        if (this.right === 28) {
          u = ΔΔ[this.right][this.ᐃΔⲆⵠⲆ][cf.time];
          Rv(this.right, this.ᐃΔⲆⵠⲆ, u, -u.width / 4 - (62 + q) * Co, -u.height / 4 + Co * (w + 18));
        } else {
          ev(this.right, q, w);
        }
        if (p >= 920) {
          Dv(p, m, -m.width / 4 - (49 + q) * Co, -m.height / Ct + (11 + w) * Co);
        } else if (p !== 793) {
          Rv(p, this.ΔⵠΔᐃ, m, -m.width / 4 - (49 + q) * Co, -m.height / Ct + Co * (11 + w));
        } else {
          Mv(p, m, -m.width / 2 - Co * (49 + q), -m.height / 2 + Co * (11 + w));
        }
        Mv(286, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / 2 + (49 + q) * Co, -ΔΔⲆᐃ.height / Vh + Co * (15 + w));
        if (p >= 920) {
          Dv(p, m, -m.width / tb + (49 + q) * Co, -m.height / 4 + (nn + w) * Co);
        } else if (p !== 793) {
          Rv(p, this.ΔⵠΔᐃ, m, -m.width / 4 + Co * (49 + q), -m.height / ba + (Ol + w) * Co);
        } else {
          Mv(p, m, -m.width / 2 + Co * (49 + q), -m.height / 2 + (11 + w) * Co);
        }
      }
      if (this.ᐃⵠΔⲆᐃ && this.ⵠΔⵠⲆᐃ < 1) {
        m = ΔΔ[29][this.ⲆⵠᐃΔⲆⲆⲆ][cf.time];
        Rv(29, this.ⲆⵠᐃΔⲆⲆⲆ, m, -m.width / gl, -m.height / 4 - Co * 39);
      }
      if (this.ⲆΔⲆⵠⵠⲆᐃ) {
        m = ΔΔ[820][cf.time];
        Mv(820, m, -m.width / 2, -m.height / Pn);
        this.ΔΔⲆⵠⲆᐃΔ.ᐃⲆΔ();
        m = ΔΔ[821][cf.time];
        Mv(821, m, -m.width / xq, -m.height / lr + this.ΔΔⲆⵠⲆᐃΔ.ΔΔⲆ);
      } else {
        m = ΔΔ[255][this.ΔⵠΔᐃ][cf.time];
        if (this.ⵠΔⵠⲆᐃ !== 85 && (Rv(255, this.ΔⵠΔᐃ, m, -m.width / 4, -m.height / Ct), Lr < this.ΔⵠΔᐃᐃ)) {
          m = ΔΔ[796][this.ΔⵠΔᐃᐃ][cf.time];
          Rv(796, this.ΔⵠΔᐃᐃ, m, -m.width / 4, -m.height / Os);
        }
      }
      if (this.action & hw.ⲆᐃᐃⲆΔΔΔ) {
        if (this.ⵠᐃᐃᐃⵠ.ᐃⲆΔ() && vt == this.ⵠᐃᐃᐃⵠ.ⵠᐃⵠ) {
          this.action -= hw.ⲆᐃᐃⲆΔΔΔ;
        }
        ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
        if (this.ⲆΔⲆⵠⵠⲆᐃ) {
          m = ΔΔ[825];
          Jm(ho, m, -m.width / 2, -m.height / lr);
        } else {
          m = mv(this.ΔⵠΔᐃ, ΔΔ[255][this.ΔⵠΔᐃ][Zj], ⵠⲆⲆⲆⵠⲆⲆⲆᐃ);
          Jm(ho, m, m.width / 4, m.height / Mq, -m.width / It, -m.height / xj);
        }
        ho.globalAlpha = 1;
      }
      if (this.action & hw.ⲆΔⵠΔᐃΔⲆ) {
        if (this.ΔΔⵠᐃⵠⲆⲆ.ᐃⲆΔ() && this.ΔΔⵠᐃⵠⲆⲆ.ⵠᐃⵠ == Tk) {
          this.action -= hw.ⲆΔⵠΔᐃΔⲆ;
        }
        ho.globalAlpha = 0.6 - this.ΔΔⵠᐃⵠⲆⲆ.ΔΔⲆ;
        m = ΔΔ[266];
        Jm(ho, m, -m.width / 2, -m.height / 2);
        ho.globalAlpha = 1;
      }
      if (this.action & hw.ⲆᐃⲆⵠ) {
        if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == Tk) {
          this.action -= hw.ⲆᐃⲆⵠ;
        }
        ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
        if (this.ⲆΔⲆⵠⵠⲆᐃ) {
          m = ΔΔ[823];
          Jm(ho, m, -m.width / xq, -m.height / Vg);
        } else {
          m = mv(this.ΔⵠΔᐃ, ΔΔ[255][this.ΔⵠΔᐃ][0], ⵠᐃΔⲆΔᐃⵠⵠⲆ);
          Jm(ho, m, m.width / Pe, m.height / Ct, -m.width / 2, -m.height / Pn);
        }
        ho.globalAlpha = Hg;
      }
      if (this.action & hw.ᐃᐃⵠⵠᐃ) {
        if (this.freeze.ᐃⲆΔ() && this.freeze.ⵠᐃⵠ == Jn) {
          this.action -= hw.ᐃᐃⵠⵠᐃ;
        }
        ho.globalAlpha = 0.6 - this.freeze.ΔΔⲆ;
        m = mv(this.ΔⵠΔᐃ, ΔΔ[255][this.ΔⵠΔᐃ][0], ΔⵠᐃⵠᐃᐃⵠᐃΔ);
        Jm(ho, m, m.width / 4, m.height / Wg, -m.width / 2, -m.height / 2);
        ho.globalAlpha = wt;
      }
      if (this.action & hw.ᐃᐃⲆΔⲆⵠⲆ) {
        if (this.ᐃⵠⲆⲆᐃⲆᐃ.ᐃⲆΔ() && this.ᐃⵠⲆⲆᐃⲆᐃ.ⵠᐃⵠ == 0) {
          this.action -= hw.ᐃᐃⲆΔⲆⵠⲆ;
        }
        ho.globalAlpha = 0.6 - this.ᐃⵠⲆⲆᐃⲆᐃ.ΔΔⲆ;
        if (this.ⲆΔⲆⵠⵠⲆᐃ) {
          m = ΔΔ[824];
          Jm(ho, m, -m.width / 2, -m.height / 2);
        } else {
          m = mv(this.ΔⵠΔᐃ, ΔΔ[255][this.ΔⵠΔᐃ][mj], ΔᐃⲆⲆⲆΔⵠᐃΔ);
          Jm(ho, m, m.width / Gi, m.height / 4, -m.width / 2, -m.height / xq);
        }
        ho.globalAlpha = 1;
      }
      fv(this.ⵠΔⵠⲆᐃ);
      if (c === mk) {
        if (this.action & hw.ⲆⵠⵠΔⲆᐃⲆ) {
          q += this.attack.ΔΔⲆ * Ga;
        }
        Mv(286, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / lr - Co * 26, -ΔΔⲆᐃ.height / Vh + (31 + w + q) * Co);
        if (h >= 920) {
          Dv(h, x, -x.width / 4 - Co * 26, -x.height / 4 + Co * (27 + w + q));
        } else if (h !== 793) {
          Rv(h, this.ΔⵠΔᐃ, x, -x.width / Ct - Co * 26, -x.height / $l + (27 + w + q) * Co);
        } else {
          Mv(h, x, -x.width / Ul - Co * 26, -x.height / 2 + Co * (27 + w + q));
        }
        Mv(286, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / 2 + Co * 26, -ΔΔⲆᐃ.height / 2 + (31 + w + q) * Co);
        if (h >= 920) {
          Dv(h, x, -x.width / Ls + Co * 26, -x.height / 4 + Co * (27 + w + q));
        } else if (h !== 793) {
          Rv(h, this.ΔⵠΔᐃ, x, -x.width / $l + Co * 26, -x.height / 4 + (27 + w + q) * Co);
        } else {
          Mv(h, x, -x.width / 2 + Co * 26, -x.height / Hj + Co * (27 + w + q));
        }
        Xp(this.right, 0, w + q);
      }
      ho.restore();
      if (this.ⵠΔⵠⲆᐃ !== 83 && this.ⵠΔⵠⲆᐃ !== 85) {
        if (this.ⲆΔΔΔᐃ > 0) {
          if (!this.ⲆᐃΔⲆ.ᐃΔⲆⵠⲆΔⵠ) {
            this.ⲆᐃΔⲆ.ᐃΔⲆⵠⲆΔⵠ = nd(Co, this.ⲆᐃΔⲆ.ⲆⲆΔⵠᐃ, Jg, "#187484", "#000", 2, null, null, Co * 300);
          }
          m = this.ⲆᐃΔⲆ.ᐃΔⲆⵠⲆΔⵠ;
        } else {
          this.ⲆᐃΔⲆ.label ||= nd(Co, this.ⲆᐃΔⲆ.ⲆⲆΔⵠᐃ, qr, "#FFF", "#000", 2, null, null, Co * 300);
          m = this.ⲆᐃΔⲆ.label;
        }
        if (Xr.ΔⲆⵠ == cf.ⵠΔⲆ) {
          ho.globalAlpha = 0.5;
        }
        q = Math.floor(-m.width / 2);
        w = Math.floor(-m.height / 2 - Co * 70);
        Jm(ho, m, q, w);
        if (wj < this.ⲆᐃΔⲆ.level) {
          var z = q + m.width + 5;
          m = ΔΔ[885];
          if (ᐃᐃⵠⵠᐃᐃᐃ[this.ⲆᐃΔⲆ.level] === undefined) {
            ᐃᐃⵠⵠᐃᐃᐃ[this.ⲆᐃΔⲆ.level] = nd(Co, "[" + this.ⲆᐃΔⲆ.level + "]", Kl, "#F9E8A2", "#000", 2, null, null, Co * 50);
          }
          Jm(ho, ᐃᐃⵠⵠᐃᐃᐃ[this.ⲆᐃΔⲆ.level], z, w);
        }
        ho.globalAlpha = hb;
      } else {
        w = Math.floor(Co * -70);
        q = Math.floor(ΔΔ[558].width / 1.5);
      }
      if (Xw.ᐃⲆⵠⲆⵠⵠᐃ(this.Ⲇⵠⵠᐃ)) {
        if (this.Ⲇⵠⵠᐃ == Xw.ᐃΔⲆⲆⵠ[0]) {
          m = ΔΔ[559];
        } else {
          m = ΔΔ[558];
        }
        Jm(ho, m, q - m.width - mb, w - 6);
      }
      ho.restore();
    }
  }
  function kv() {
    if (Lj !== this.message) {
      var a = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length > 0 ? -95 : Zj;
      Jm(ho, this.message, ig, jq - this.message.height + a);
    }
  }
  function lv(a, b) {
    if (this.text) {
      if (this.timeout.ⵠᐃⵠ) {
        ho.globalAlpha = 1 - this.timeout.ΔΔⲆ;
      } else {
        ho.globalAlpha = au;
      }
      this.label ||= nd(Co, this.text, 40, a, null, null, null, null, null, b, lg);
      Jm(ho, this.label, (lo - this.label.width) / Ob, Co * 50);
      ho.globalAlpha = Gh;
      if (this.timeout.ᐃⲆΔ() && al == this.timeout.ⵠᐃⵠ) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function mv(b, c, d) {
    if (c.ⲆⲆⲆⵠᐃᐃⲆ() !== 1) {
      return c;
    }
    var e = ΔⲆⲆΔΔⲆΔ[d][b];
    if (e === undefined) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var h = c.height;
      e.width = g;
      e.height = h;
      f.drawImage(c, Yh, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ⵠᐃΔⵠⲆᐃᐃΔⵠ[d];
      f.fillRect(0, 0, g, h);
      ΔⲆⲆΔΔⲆΔ[d][b] = e;
    }
    return e;
  }
  ⵠᐃΔⲆΔᐃⵠⵠⲆ = 0;
  ⵠⲆⲆⲆⵠⲆⲆⲆᐃ = og;
  ΔⵠᐃⵠᐃᐃⵠᐃΔ = Vg;
  ΔᐃⲆⲆⲆΔⵠᐃΔ = 3;
  ⲆⲆⵠΔᐃⵠⲆⲆⵠ = Os;
  ΔⲆⲆΔΔⲆΔ = [[], [], [], [], []];
  ⵠᐃΔⵠⲆᐃᐃΔⵠ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var nv = 0;
  function ov(j, e, i, k, n, o, q, a = 0) {
    for (var r = q; a <= r; r--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; t <= k; t++) {
          var w = Vw.ᐃᐃⲆⲆ[s][t];
          if (w && w[o]) {
            var x = w[o][r];
            if (x !== er) {
              for (var y = 0; y < x.length; y++) {
                var z = x[y];
                var A = ΔΔ[n][cf.time][r];
                var B = (nv + (s + t) * Hk) % 60;
                var D = B < 30 ? B / 30 : sd - (B - 30) / 30;
                var E = (Te + D * 0.9 / 30) * -A.width;
                var F = (1 + D * 0.9 / 30) * -A.height;
                D = (B = (nv + (s + t) * 7) % 60) < 30 ? B / 30 : 1 - (B - 30) / 30;
                var G = ho.globalAlpha;
                ho.globalAlpha = G * (0.9 + D * 0.1);
                Jm(ho, A, Xw.ⵠᐃⲆ.x + z.x - E / 2, Xw.ⵠᐃⲆ.y + z.y - F / 2, E, F);
                ho.globalAlpha = G;
              }
            }
          }
        }
      }
    }
  }
  function pv(j, e, i, k, n, o, q, a = undefined) {
    if (a === undefined) a = In;
    cf.ⲆᐃᐃⲆ[n].ᐃⲆΔ();
    for (var r = q; r >= a; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; w <= k; w++) {
          var x = Vw.ᐃᐃⲆⲆ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== xg) {
              for (var z = 0; y.length > z; z++) {
                var A = y[z];
                if (A.ᐃⲆΔ) {
                  if (A.ᐃⲆⲆ.ᐃⲆΔ() && A.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
                    A.ᐃⲆΔ = Jn;
                  }
                  var B = (1 - A.ᐃⲆⲆ.ΔΔⲆ) * _w * 600 * Co;
                  var D = B * Math.sin(A.angle);
                  var E = Math.cos(A.angle) * B;
                } else {
                  D = 0;
                  E = Lr;
                }
                var F = ΔΔ[n][cf.time][r];
                var G = cf.ⲆᐃᐃⲆ[n].ΔΔⲆ * -F.width;
                var H = -F.height * cf.ⲆᐃᐃⲆ[n].ΔΔⲆ;
                Jm(ho, F, Xw.ⵠᐃⲆ.x + A.x - G / xq + D, Xw.ⵠᐃⲆ.y + A.y - H / 2 + E, G, H);
              }
            }
          }
        }
      }
    }
  }
  var qv = [];
  for (Ft = Yh; Ft < Ph; Ft++) {
    var rv = wt;
    if (Math.random() < 0.25) {
      rv = 0;
    }
    qv.push(rv);
  }
  function sv(j, e, i, k, n, o, q, a, r) {
    if (a === Og) {
      a = Mg;
    }
    for (var h = q; a <= h; h--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; w <= k; w++) {
          var x = Vw.ᐃᐃⲆⲆ[t][w];
          if (x !== undefined && x[o] !== undefined) {
            var A = x[o][h];
            if (Gs !== A) {
              for (var B = Yh; A.length > B; B++) {
                var D = A[B];
                if (D.ᐃⲆΔ) {
                  if (D.ᐃⲆⲆ.ᐃⲆΔ() && D.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
                    D.ᐃⲆΔ = false;
                  }
                  var E = Co * ((Hg - D.ᐃⲆⲆ.ΔΔⲆ) * _w * 600);
                  var F = Math.sin(D.angle) * E;
                  var G = E * Math.cos(D.angle);
                } else {
                  F = fl;
                  G = ig;
                }
                for (var H = wg; ΔΔΔⵠᐃᐃⵠ[h].ⵠᐃⵠⲆ > H; H++) {
                  if (cf.ⵠᐃᐃⲆΔ[H].ᐃᐃᐃΔᐃᐃᐃ !== yf) {
                    cf.ⵠᐃᐃⲆΔ[H].ᐃⲆΔ();
                    cf.ⵠᐃᐃⲆΔ[H].ᐃᐃᐃΔᐃᐃᐃ = yf;
                  }
                  var I = ΔΔ[941][cf.time][ΔΔΔⵠᐃᐃⵠ[h].ⲆⲆΔⲆ[H].ⵠⵠⵠ];
                  var J = -I.width * cf.ⵠᐃᐃⲆΔ[H].ΔΔⲆ;
                  var K = -I.height * cf.ⵠᐃᐃⲆΔ[H].ΔΔⲆ;
                  Jm(ho, I, Xw.ⵠᐃⲆ.x + D.x - J / 4 + F + ΔΔΔⵠᐃᐃⵠ[h].ⲆⲆΔⲆ[H].x, Xw.ⵠᐃⲆ.y + D.y - K / 4 + G + ΔΔΔⵠᐃᐃⵠ[h].ⲆⲆΔⲆ[H].y, J / 2, K / Lt);
                }
              }
            }
          }
        }
      }
    }
  }
  function tv(j, e, i, k, n, o, q, a, r) {
    if (lj === a) {
      a = 0;
    }
    for (var h = q; h >= a; h--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; k >= w; w++) {
          if (wj >= r || qv[(t + w * r) % qv.length] !== $b) {
            var x = Vw.ᐃᐃⲆⲆ[t][w];
            if (er !== x && x[o] !== undefined) {
              var y = x[o][h];
              if (El !== y) {
                for (var z = 0; z < y.length; z++) {
                  var A = y[z];
                  if (A.ᐃⲆΔ) {
                    if (A.ᐃⲆⲆ.ᐃⲆΔ() && A.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
                      A.ᐃⲆΔ = Jn;
                    }
                    var B = _w * (zs - A.ᐃⲆⲆ.ΔΔⲆ) * 600 * Co;
                    var D = Math.sin(A.angle) * B;
                    var E = B * Math.cos(A.angle);
                  } else {
                    D = 0;
                    E = ig;
                  }
                  var F = ΔΔ[n][cf.time][h];
                  Jm(ho, F, Xw.ⵠᐃⲆ.x + A.x - F.width / (ΔⵠⲆⵠⲆ * xj) + D, Xw.ⵠᐃⲆ.y + A.y - F.height / (ΔⵠⲆⵠⲆ * Pn) + E, F.width / ΔⵠⲆⵠⲆ, F.height / ΔⵠⲆⵠⲆ);
                }
              }
            }
          }
        }
      }
    }
  }
  function uv(c, e, f, i, j, k, m, a = undefined, n) {
    if (a === undefined) a = os;
    for (var h = c; h <= e; h++) {
      for (var o = f; i >= o; o++) {
        var p = Vw.ᐃᐃⲆⲆ[h][o];
        if (p !== cg && p[k] !== undefined) {
          var q = p[k];
          if (q !== undefined) {
            if (ie === q.scale) {
              var r = ΔΔ[j][cf.time][q.ⵠⲆⲆⲆ];
              ho.save();
              ho.translate(Xw.ⵠᐃⲆ.x + q.x, Xw.ⵠᐃⲆ.y + q.y);
              ho.rotate(q.angle);
              Jm(ho, r, -r.width / 4, -r.height / Ls, r.width / 2, r.height / eh);
              ho.restore();
            } else if (eg === q.scale) {
              for (var t = 0; t < q.ⲆⲆⵠ.length; t++) {
                ho.save();
                ho.translate(Xw.ⵠᐃⲆ.x + q.x, Xw.ⵠᐃⲆ.y + q.y);
                ho.rotate(q.ⲆⲆⵠ[t].angle);
                r = ΔΔ[j][cf.time][q.ⲆⲆⵠ[t].ⵠⲆⲆⲆ];
                Jm(ho, r, -r.width / ub + q.ⲆⲆⵠ[t].x, -r.height / 3 + q.ⲆⲆⵠ[t].y, r.width / 1.5, r.height / 1.5);
                ho.restore();
              }
            } else {
              r = ΔΔ[j][cf.time][q.ⵠⲆⲆⲆ];
              ho.save();
              ho.translate(Xw.ⵠᐃⲆ.x + q.x, Xw.ⵠᐃⲆ.y + q.y);
              ho.rotate(q.angle);
              Jm(ho, r, -r.width / Lt, -r.height / vg, r.width, r.height);
              ho.restore();
            }
          }
        }
      }
    }
  }
  ΔⵠⲆⵠⲆ = 1;
  ΔΔΔⵠᐃᐃⵠ = [{
    ⵠᐃⵠⲆ: xt,
    ⲆⲆΔⲆ: [{
      y: -20,
      ⵠⵠⵠ: 0,
      x: -128
    }, {
      x: -86,
      y: -Fr,
      ⵠⵠⵠ: Hg
    }, {
      y: -74,
      x: -60,
      ⵠⵠⵠ: 2
    }, {
      y: -144,
      x: -22,
      ⵠⵠⵠ: os
    }, {
      ⵠⵠⵠ: 0,
      x: -58,
      y: 86
    }, {
      x: 3,
      ⵠⵠⵠ: os,
      y: -30
    }, {
      x: 65,
      ⵠⵠⵠ: 1,
      y: -115
    }, {
      x: 118,
      ⵠⵠⵠ: 0,
      y: -50
    }, {
      y: sb,
      x: 73,
      ⵠⵠⵠ: Tl
    }, {
      ⵠⵠⵠ: 0,
      x: 67,
      y: 79
    }]
  }, {
    ⵠᐃⵠⲆ: Fs,
    ⲆⲆΔⲆ: [{
      ⵠⵠⵠ: 0,
      y: -26,
      x: -45
    }, {
      ⵠⵠⵠ: H,
      x: -45,
      y: 20
    }, {
      ⵠⵠⵠ: 1,
      x: 10,
      y: -60
    }, {
      x: 52,
      y: -Jh,
      ⵠⵠⵠ: 1
    }, {
      y: 45,
      x: 14,
      ⵠⵠⵠ: 0
    }]
  }, {
    ⵠᐃⵠⲆ: 3,
    ⲆⲆΔⲆ: [{
      y: ub,
      ⵠⵠⵠ: 2,
      x: -30
    }, {
      x: 7,
      ⵠⵠⵠ: 2,
      y: -38
    }, {
      ⵠⵠⵠ: Ul,
      y: ta,
      x: 37
    }]
  }, {
    ⲆⲆΔⲆ: [{
      x: -74,
      ⵠⵠⵠ: Ob,
      y: -87
    }, {
      x: -11,
      ⵠⵠⵠ: hb,
      y: -10
    }, {
      x: -99,
      ⵠⵠⵠ: $b,
      y: 17
    }, {
      y: 84,
      ⵠⵠⵠ: os,
      x: -66
    }, {
      ⵠⵠⵠ: 1,
      y: 123,
      x: -55
    }, {
      ⵠⵠⵠ: 2,
      x: lg,
      y: 81
    }, {
      ⵠⵠⵠ: Zj,
      y: 50,
      x: 52
    }, {
      ⵠⵠⵠ: 1,
      y: 9,
      x: 138
    }, {
      y: -28,
      x: 104,
      ⵠⵠⵠ: wg
    }, {
      ⵠⵠⵠ: Vh,
      x: 67,
      y: -56
    }, {
      ⵠⵠⵠ: 0,
      y: -112,
      x: 5
    }],
    ⵠᐃⵠⲆ: yq
  }, {
    ⲆⲆΔⲆ: [{
      x: -33,
      ⵠⵠⵠ: Ob,
      y: -66
    }, {
      x: -58,
      y: Pb,
      ⵠⵠⵠ: os
    }, {
      y: 44,
      ⵠⵠⵠ: 1,
      x: -19
    }, {
      y: 20,
      x: 44,
      ⵠⵠⵠ: wg
    }, {
      ⵠⵠⵠ: 2,
      y: -36,
      x: 53
    }, {
      x: uh,
      ⵠⵠⵠ: 0,
      y: -62
    }],
    ⵠᐃⵠⲆ: Rs
  }, {
    ⵠᐃⵠⲆ: 3,
    ⲆⲆΔⲆ: [{
      x: -Gg,
      y: -25,
      ⵠⵠⵠ: og
    }, {
      ⵠⵠⵠ: 2,
      x: -29,
      y: Cq
    }, {
      ⵠⵠⵠ: Zj,
      x: 12,
      y: Sj
    }]
  }];
  var vv = ya;
  var wv = 0;
  var xv = ya;
  var yv = st;
  function zv(a, b, c) {
    if (cf.transition) {
      ho.globalAlpha = wt;
      a.ᐃⵠᐃⵠ(b, c);
      cf.time = cf.time ? wj : Oq;
      ho.globalAlpha = mk - cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      a.ᐃⵠᐃⵠ(b, c);
      cf.time = cf.time ? wj : sd;
      ho.globalAlpha = 1;
    } else {
      a.ᐃⵠᐃⵠ(b, c);
    }
  }
  function Av(a) {
    ho.globalAlpha = a.alpha;
    Tb(ho, a.x + Xw.ⵠᐃⲆ.x, a.y + Xw.ⵠᐃⲆ.y, a.r);
    db(ho, Xr.ΔᐃⲆⲆΔⲆⵠ[cf.time]);
    ho.globalAlpha = za;
  }
  function Bv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Xw.ⵠᐃⲆ.y + f + 710;
    var l = Math.max(Xw.ⵠᐃⲆ.x + e, 0);
    var g = Math.max(-Xw.ⵠᐃⲆ.x + lo - i - 100, Rq);
    var r = l;
    var b = lo - l - g;
    if (n) {
      var s = j.ⵠⵠⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + kw.ⲆⲆⵠⲆΔ;
    kw.ΔᐃⲆᐃⲆ;
    t += -s + kw.ΔᐃⲆᐃⲆ + 2;
    if (n) {
      s = j.ⵠⵠⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h - kw.ⲆᐃⵠⲆΔ - t - s;
    var v = (t += u + xq) - Ul;
    if (n) {
      s = j.ⵠⵠⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (v > t + (u = h - kw.ⲆᐃᐃⵠⲆ - t - s)) {
      t += u + 2;
    } else {
      t = v;
    }
    u = h - kw.ᐃΔΔᐃᐃⵠᐃ - t;
    if (n > 0 && k.ᐃⲆΔⲆⵠⲆΔ === sd) {
      if (cf.transition) {
        var p = cf.time ? Xn - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(15, 77, 72, 252, 239, 187, p);
      } else {
        ho.fillStyle = Xr.ᐃⲆᐃⵠⵠΔⲆ[cf.time];
      }
      ho.fillRect(r, t, b, u);
    } else {
      if (cf.transition) {
        p = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(k.ⵠᐃᐃ[ig], k.ⵠᐃᐃ[1], k.ⵠᐃᐃ[Ob], k.ⵠΔⲆ[0], k.ⵠΔⲆ[hb], k.ⵠΔⲆ[2], p);
      } else {
        ho.fillStyle = k.ᐃΔⵠΔⵠ[cf.time];
      }
      ho.fillRect(r, t, b, u);
    }
  }
  function Cv(b, c, d, e, f, g, i, a, j, h) {
    if (cf.transition) {
      ho.globalAlpha = 1;
      b(c, d, e, f, g, i, a, j, h);
      cf.time = cf.time ? Rq : sd;
      ho.globalAlpha = Oq - cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      b(c, d, e, f, g, i, a, j, h);
      cf.time = cf.time ? Ih : Te;
      ho.globalAlpha = wt;
    } else {
      b(c, d, e, f, g, i, a, j, h);
    }
  }
  function Dv(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var h = Math.floor(f / 2);
    var a = Math.floor(g / lr);
    if (cf.transition) {
      ho.globalAlpha = 1;
      Jm(ho, ΔΔ[b][cf.time], 0, 0, f, g, d, e, h, a);
      cf.time = cf.time ? ya : 1;
      ho.globalAlpha = 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      Jm(ho, ΔΔ[b][cf.time], 0, wg, f, g, d, e, h, a);
      cf.time = cf.time ? os : 1;
      ho.globalAlpha = sd;
    } else {
      Jm(ho, c, Bb, Da, f, g, d, e, h, a);
    }
  }
  function Ev(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Xw.ⵠᐃⲆ.y + f - 700;
    var l = Math.max(Xw.ⵠᐃⲆ.x + e, Qs);
    var g = Math.max(-Xw.ⵠᐃⲆ.x + lo - i - 100, 0);
    var r = l;
    var b = lo - l - g;
    if (n) {
      var s = j.ⵠⵠⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + kw.ⲆⲆⵠⲆΔ;
    kw.ΔᐃⲆᐃⲆ;
    t += s + kw.ΔᐃⲆᐃⲆ - 2;
    if (n) {
      s = j.ⵠⵠⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + kw.ⲆᐃⵠⲆΔ - t + s;
    var v = (t += u - jk) - 2;
    if (n) {
      s = j.ⵠⵠⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (v < t + (u = h + kw.ⲆᐃᐃⵠⲆ - t + s) - 3) {
      t += u - Ob;
    } else {
      t = v;
    }
    u = h + kw.ᐃΔΔᐃᐃⵠᐃ - t;
    if (n > 0 && k.ᐃⲆΔⲆⵠⲆΔ === 1) {
      if (cf.transition) {
        var p = cf.time ? og - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(15, 77, 72, 252, 239, 187, p);
      } else {
        ho.fillStyle = Xr.ᐃⲆᐃⵠⵠΔⲆ[cf.time];
      }
      ho.fillRect(r, t, b, u);
    } else {
      if (cf.transition) {
        p = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(k.ⵠᐃᐃ[0], k.ⵠᐃᐃ[1], k.ⵠᐃᐃ[Vh], k.ⵠΔⲆ[0], k.ⵠΔⲆ[za], k.ⵠΔⲆ[2], p);
      } else {
        ho.fillStyle = k.ᐃΔⵠΔⵠ[cf.time];
      }
      ho.fillRect(r, t, b, u);
    }
  }
  function Fv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Xw.ⵠᐃⲆ.y + j - 700;
    var l = Math.max(Xw.ⵠᐃⲆ.x + e, Ih);
    var g = Math.max(-Xw.ⵠᐃⲆ.x + lo - i - 100, wj);
    var t = l;
    var b = lo - l - g;
    if (o) {
      var u = q.ⵠⵠⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + kw.ⲆⲆⵠⲆΔ;
    var F = t;
    var m = v;
    var p = u.x + kw.ΔᐃⲆᐃⲆ;
    var C = b;
    var G = v += u.x + kw.ΔᐃⲆᐃⲆ - 2;
    if (o) {
      u = q.ⵠⵠⵠ(a);
    } else {
      u = a.r;
    }
    var f = h + kw.ⲆᐃⵠⲆΔ - v + u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f - 2) - 2;
    if (o) {
      u = q.ⵠⵠⵠ(s);
    } else {
      u = s.r;
    }
    if (A < v + (f = h + kw.ⲆᐃᐃⵠⲆ - v + u.x) - Tr) {
      var k = cl;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f - Vh;
    } else {
      k = false;
      v = A;
      D = -1;
    }
    f = h + kw.ᐃΔΔᐃᐃⵠᐃ - v;
    if (cf.transition) {
      var N = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
    }
    ho.fillRect(F, m, C, p);
    if (o) {
      if (cf.transition) {
        N = cf.time ? Xn - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(15, 70, 76, 42, 139, 155, N);
      } else {
        ho.fillStyle = Xr.ⵠᐃⲆΔⲆᐃᐃ[cf.time];
      }
    } else if (cf.transition) {
      N = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
    }
    ho.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (cf.transition) {
          N = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
          ho.fillStyle = Pv(17, 94, 96, 169, 214, 211, N);
        } else {
          ho.fillStyle = Xr.ⵠᐃⵠⲆᐃⵠⲆ[cf.time];
        }
      } else if (cf.transition) {
        N = cf.time ? Te - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
      } else {
        ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
      }
      ho.fillRect(J, L, B, M);
    }
    if (bf.ⵠⵠᐃⲆᐃ && o) {
      q.ⲆⵠⲆⲆΔⲆᐃⵠⲆ(A, D, G, h, -Xw.ⵠᐃⲆ.x + F, -Xw.ⵠᐃⲆ.x + F + C);
    }
  }
  function Gv(a, b) {
    if (cf.transition) {
      ho.globalAlpha = za;
      a.ⲆᐃⲆⲆᐃ(b);
      cf.time = cf.time ? 0 : 1;
      ho.globalAlpha = sd - cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      a.ⲆᐃⲆⲆᐃ(b);
      cf.time = cf.time ? Ih : 1;
      ho.globalAlpha = au;
    } else {
      a.ⲆᐃⲆⲆᐃ(b);
    }
  }
  function Hv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Xw.ⵠᐃⲆ.x + f - 700;
    var l = Math.max(Xw.ⵠᐃⲆ.y + e, 0);
    var g = Math.max(-Xw.ⵠᐃⲆ.y + jq - i - Uh, ig);
    var r = l;
    var b = jq - l - g;
    if (n) {
      var s = j.ⵠⵠⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + kw.ⲆⲆⵠⲆΔ;
    kw.ΔᐃⲆᐃⲆ;
    t += s + kw.ΔᐃⲆᐃⲆ - Rl;
    if (n) {
      s = j.ⵠⵠⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + kw.ⲆᐃⵠⲆΔ - t + s;
    var v = (t += u - 2) - vg;
    if (n) {
      s = j.ⵠⵠⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (t + (u = h + kw.ⲆᐃᐃⵠⲆ - t + s) - I > v) {
      t += u - 2;
    } else {
      t = v;
    }
    u = h + kw.ᐃΔΔᐃᐃⵠᐃ - t;
    if (n > 0 && k.ᐃⲆΔⲆⵠⲆΔ === 1) {
      if (cf.transition) {
        var p = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(15, 77, 72, 252, 239, 187, p);
      } else {
        ho.fillStyle = Xr.ᐃⲆᐃⵠⵠΔⲆ[cf.time];
      }
      ho.fillRect(t, r, u, b);
    } else {
      if (cf.transition) {
        p = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(k.ⵠᐃᐃ[wg], k.ⵠᐃᐃ[1], k.ⵠᐃᐃ[2], k.ⵠΔⲆ[fl], k.ⵠΔⲆ[1], k.ⵠΔⲆ[2], p);
      } else {
        ho.fillStyle = k.ᐃΔⵠΔⵠ[cf.time];
      }
      ho.fillRect(t, r, u, b);
    }
  }
  function Iv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Xw.ⵠᐃⲆ.x + j + 820;
    var l = Math.max(Xw.ⵠᐃⲆ.y + e, 0);
    var g = Math.max(-Xw.ⵠᐃⲆ.y + jq - i - 100, wj);
    var t = l;
    var b = jq - l - g;
    if (o) {
      var u = q.ⵠⵠⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + kw.ⲆⲆⵠⲆΔ;
    var F = v;
    var m = t;
    var p = -u.x + kw.ΔᐃⲆᐃⲆ;
    var C = b;
    var G = v += -u.x + kw.ΔᐃⲆᐃⲆ + 2;
    if (o) {
      u = q.ⵠⵠⵠ(a);
    } else {
      u = a.r;
    }
    var f = h - kw.ⲆᐃⵠⲆΔ - v - u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f + Rl) - 2;
    if (o) {
      u = q.ⵠⵠⵠ(s);
    } else {
      u = s.r;
    }
    if (v + (f = h - kw.ⲆᐃᐃⵠⲆ - v - u.x) < A) {
      var k = true;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f + 2;
    } else {
      k = false;
      v = A;
      D = -au;
    }
    f = h - kw.ᐃΔΔᐃᐃⵠᐃ - v;
    if (cf.transition) {
      var N = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
    }
    ho.fillRect(F, m, p, C);
    if (o) {
      if (cf.transition) {
        N = cf.time ? Hg - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(15, 70, 76, 42, 139, 155, N);
      } else {
        ho.fillStyle = Xr.ⵠᐃⲆΔⲆᐃᐃ[cf.time];
      }
    } else if (cf.transition) {
      N = cf.time ? $b - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
    }
    ho.fillRect(H, y, w, K);
    if (k) {
      if (o) {
        if (cf.transition) {
          N = cf.time ? za - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
          ho.fillStyle = Pv(17, 94, 96, 169, 214, 211, N);
        } else {
          ho.fillStyle = Xr.ⵠᐃⵠⲆᐃⵠⲆ[cf.time];
        }
      } else if (cf.transition) {
        N = cf.time ? Xn - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
      } else {
        ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
      }
      ho.fillRect(L, J, M, B);
    }
    if (bf.ⵠⵠᐃⲆᐃ && o) {
      q.ΔᐃⲆⵠⲆⲆⵠⵠΔ(A, D, G, h, -Xw.ⵠᐃⲆ.y + m, -Xw.ⵠᐃⲆ.y + m + C);
    }
  }
  function Jv(a, b, c, d, e) {
    if (cf.transition && e == 1) {
      ho.globalAlpha = Tl;
      Jm(ho, ΔΔ[a][cf.time][b], c, d);
      cf.time = cf.time ? Hi : 1;
      ho.globalAlpha = za - cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      Jm(ho, ΔΔ[a][cf.time][b], c, d);
      cf.time = cf.time ? mj : mk;
      ho.globalAlpha = ie;
    } else {
      ho.globalAlpha = e;
      Jm(ho, ΔΔ[a][cf.time][b], c, d);
      ho.globalAlpha = 1;
    }
  }
  function Kv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Xw.ⵠᐃⲆ.x + j - 700;
    var l = Math.max(Xw.ⵠᐃⲆ.y + e, 0);
    var g = Math.max(-Xw.ⵠᐃⲆ.y + jq - i - Ph, 0);
    var t = l;
    var b = jq - l - g;
    if (o) {
      var u = q.ⵠⵠⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + kw.ⲆⲆⵠⲆΔ;
    var F = v;
    var m = t;
    var p = u.x + kw.ΔᐃⲆᐃⲆ;
    var C = b;
    var G = v += u.x + kw.ΔᐃⲆᐃⲆ - 2;
    if (o) {
      u = q.ⵠⵠⵠ(a);
    } else {
      u = a.r;
    }
    var f = h + kw.ⲆᐃⵠⲆΔ - v + u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f - Vh) - 2;
    if (o) {
      u = q.ⵠⵠⵠ(s);
    } else {
      u = s.r;
    }
    if (A < v + (f = h + kw.ⲆᐃᐃⵠⲆ - v + u.x) - ut) {
      var k = kh;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f - 2;
    } else {
      k = gh;
      v = A;
      D = -Wl;
    }
    f = h + kw.ᐃΔΔᐃᐃⵠᐃ - v;
    if (cf.transition) {
      var N = cf.time ? og - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
    }
    ho.fillRect(F, m, p, C);
    if (o) {
      if (cf.transition) {
        N = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(15, 70, 76, 42, 139, 155, N);
      } else {
        ho.fillStyle = Xr.ⵠᐃⲆΔⲆᐃᐃ[cf.time];
      }
    } else if (cf.transition) {
      N = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
    }
    ho.fillRect(H, y, w, K);
    if (k) {
      if (o) {
        if (cf.transition) {
          N = cf.time ? Gh - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
          ho.fillStyle = Pv(17, 94, 96, 169, 214, 211, N);
        } else {
          ho.fillStyle = Xr.ⵠᐃⵠⲆᐃⵠⲆ[cf.time];
        }
      } else if (cf.transition) {
        N = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
      } else {
        ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
      }
      ho.fillRect(L, J, M, B);
    }
    if (bf.ⵠⵠᐃⲆᐃ && o) {
      q.ⲆΔⵠΔΔΔⵠΔⲆ(A, D, G, h, -Xw.ⵠᐃⲆ.y + m, -Xw.ⵠᐃⲆ.y + m + C);
    }
  }
  function Lv(a) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + a.x, Xw.ⵠᐃⲆ.y + a.y);
    ho.rotate(a.angle);
    ho.globalAlpha = a.alpha;
    var b = ΔΔ[a.id][cf.time];
    Jm(ho, b, -b.width / 2, -b.height / eh);
    ho.globalAlpha = Gh;
    ho.restore();
  }
  function Mv(a, b, c, d) {
    if (cf.transition) {
      ho.globalAlpha = za;
      Jm(ho, ΔΔ[a][cf.time], c, d);
      cf.time = cf.time ? Qs : 1;
      ho.globalAlpha = 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      Jm(ho, ΔΔ[a][cf.time], c, d);
      cf.time = cf.time ? 0 : wt;
      ho.globalAlpha = 1;
    } else {
      Jm(ho, b, c, d);
    }
  }
  function Nv() {
    ho.globalAlpha = 1;
    if (cf.transition) {
      var a = cf.ᐃⵠⵠⵠ.ᐃⲆΔ();
    }
    cf.ⲆᐃⵠⲆΔᐃΔⲆⲆ(-Xw.ⵠᐃⲆ.x, -Xw.ⵠᐃⲆ.y);
    vv = Math.max(Math.floor(-Xw.ⵠᐃⲆ.x / cf.ᐃⲆⲆⲆⲆᐃᐃ) - hl, 0);
    wv = Math.min(Math.floor((-Xw.ⵠᐃⲆ.x + Xw.ⵠᐃⲆ.w) / cf.ᐃⲆⲆⲆⲆᐃᐃ) + 4, cf.ⵠⲆᐃⲆᐃ - 1);
    xv = Math.max(Math.floor(-Xw.ⵠᐃⲆ.y / cf.ᐃᐃᐃⵠⵠᐃΔ) - Hk, 0);
    yv = Math.min(Math.floor((-Xw.ⵠᐃⲆ.y + Xw.ⵠᐃⲆ.ΔⵠⲆ) / cf.ᐃᐃᐃⵠⵠᐃΔ) + sl, cf.ⲆⵠⲆⵠᐃ - ie);
    (function () {
      for (var c = cf.Ⲇᐃᐃᐃ.length - 1; c >= 0; c--) {
        var f = cf.Ⲇᐃᐃᐃ[c];
        if (cf.ΔⲆΔⵠΔ === f.ⵠⵠⵠ) {
          var j = cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ];
          if (f.x1 - 230 - lo <= -Xw.ⵠᐃⲆ.x && f.x2 + 330 >= -Xw.ⵠᐃⲆ.x && f.y1 - jq <= -Xw.ⵠᐃⲆ.y && -Xw.ⵠᐃⲆ.y <= f.y2 + 100) {
            var k = f.x2;
            if (cf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
              k -= 610;
            }
            var m = f.x1;
            if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
              m += 610;
            }
            var p = f.y2;
            if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
              p -= 610;
            }
            var q = f.y1;
            if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
              q += 610;
            }
            if (cf.transition) {
              var w = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
              ho.fillStyle = Pv(j.ⵠᐃᐃ[Ih], j.ⵠᐃᐃ[og], j.ⵠᐃᐃ[Lt], j.ⵠΔⲆ[fl], j.ⵠΔⲆ[1], j.ⵠΔⲆ[1], w);
            } else {
              ho.fillStyle = j.ᐃΔⵠΔⵠ[cf.time];
            }
            var x = Math.max(Xw.ⵠᐃⲆ.x + m - vg - 230, 0);
            var y = Math.max(-Xw.ⵠᐃⲆ.x + lo - k - 330 - Vg, 0);
            var z = Math.max(Xw.ⵠᐃⲆ.y + q - 2, wj);
            var A = Math.max(-Xw.ⵠᐃⲆ.y + jq - p - vh - eh, 0);
            ho.beginPath();
            ho.fillRect(x, z, lo - y - x, jq - z - A);
          }
        }
      }
      for (c = cf.Ⲇᐃᐃᐃ.length - 1; c >= 0; c--) {
        if ((f = cf.Ⲇᐃᐃᐃ[c]).ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
          k = f.x2;
          if (cf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
            k -= 400;
          }
          m = f.x1;
          if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
            m += 400;
          }
          p = f.y2;
          if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
            p -= 300;
          }
          q = f.y1;
          if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
            q += 300;
          }
          if ((f.ΔΔⲆ & kw.ⲆΔΔⵠΔ) === ya && k - lo + 120 <= -Xw.ⵠᐃⲆ.x && k + 820 >= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.y >= q + 88 - jq && -Xw.ⵠᐃⲆ.y <= p + 50) {
            Qv(k, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[0], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ⲆΔΔⵠΔ);
            Iv(k, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[Da], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ⲆΔΔⵠΔ);
          }
          if (!(f.ΔΔⲆ & kw.ᐃᐃⲆᐃΔ) && m - lo - 700 <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= m - ch && -Xw.ⵠᐃⲆ.y >= q + 88 - jq && p + 50 >= -Xw.ⵠᐃⲆ.y) {
            Hv(m, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[za], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ᐃᐃⲆᐃΔ);
            Kv(m, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[zs], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ᐃᐃⲆᐃΔ);
          }
          if (mj === (f.ΔΔⲆ & kw.ΔᐃᐃⲆΔ) && m - 235 - lo <= -Xw.ⵠᐃⲆ.x && k + 350 >= -Xw.ⵠᐃⲆ.x && p - jq - 275 <= -Xw.ⵠᐃⲆ.y && -Xw.ⵠᐃⲆ.y <= p + 490) {
            Bv(p - 230, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[2], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ΔᐃᐃⲆΔ);
            Ov(p - 230, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[Lt], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ΔᐃᐃⲆΔ);
          }
          if (!(f.ΔΔⲆ & kw.ⵠᐃⵠⵠⲆ) && -Xw.ⵠᐃⲆ.x >= m - 235 - lo && k + 350 >= -Xw.ⵠᐃⲆ.x && q - jq - 390 <= -Xw.ⵠᐃⲆ.y && -Xw.ⵠᐃⲆ.y <= q + 315) {
            Ev(q + 310, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[sl], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ⵠᐃⵠⵠⲆ);
            Fv(q + 310, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[Hk], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ⵠᐃⵠⵠⲆ);
          }
        }
      }
      for (c = cf.Ⲇᐃᐃᐃ.length - 1; c >= 0; c--) {
        f = cf.Ⲇᐃᐃᐃ[c];
        if (cf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
          k = f.x2;
          if (cf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
            k -= 400;
          }
          m = f.x1;
          if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
            m += 400;
          }
          p = f.y2;
          if (cf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
            p -= 300;
          }
          q = f.y1;
          if (cf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
            q += 300;
          }
          if (Yh !== (f.ΔΔⲆ & kw.ⲆΔΔⵠΔ) && k - lo + 120 <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= k + 820 && -Xw.ⵠᐃⲆ.y >= q + 88 - jq && -Xw.ⵠᐃⲆ.y <= p + 50) {
            Qv(k, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[0], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ⲆΔΔⵠΔ);
          }
          if ((f.ΔΔⲆ & kw.ᐃᐃⲆᐃΔ) !== eu && m - lo - 700 <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= m - 20 && -Xw.ⵠᐃⲆ.y >= q + 88 - jq && -Xw.ⵠᐃⲆ.y <= p + 50) {
            Hv(m, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[Wl], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ᐃᐃⲆᐃΔ);
          }
          if ((f.ΔΔⲆ & kw.ΔᐃᐃⲆΔ) !== st && -Xw.ⵠᐃⲆ.x >= m - 235 - lo && k + 350 >= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.y >= p - jq - 275 && p + 490 >= -Xw.ⵠᐃⲆ.y) {
            Bv(p - 230, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[2], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ΔᐃᐃⲆΔ);
          }
          if (f.ΔΔⲆ & kw.ⵠᐃⵠⵠⲆ && m - 235 - lo <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= k + 350 && -Xw.ⵠᐃⲆ.y >= q - jq - 390 && -Xw.ⵠᐃⲆ.y <= q + 315) {
            Ev(q + 310, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[eg], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ⵠᐃⵠⵠⲆ);
          }
        }
      }
      for (c = cf.Ⲇᐃᐃᐃ.length - au; c >= 0; c--) {
        if ((f = cf.Ⲇᐃᐃᐃ[c]).ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
          j = cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ];
          if (f.x1 - 230 - lo <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= f.x2 + 330 && -Xw.ⵠᐃⲆ.y >= f.y1 - jq && -Xw.ⵠᐃⲆ.y <= f.y2 + ah) {
            k = f.x2;
            if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
              if (ya === (f.ΔΔⲆ & kw.ⲆΔΔⵠΔ)) {
                k -= 414;
              } else {
                k -= 610;
              }
            }
            m = f.x1;
            if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
              if (f.ΔΔⲆ & kw.ᐃᐃⲆᐃΔ) {
                m += 610;
              } else {
                m += 414;
              }
            }
            p = f.y2;
            if (cf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
              if ((f.ΔΔⲆ & kw.ΔᐃᐃⲆΔ) === st) {
                p -= 414;
              } else {
                p -= 610;
              }
            }
            q = f.y1;
            if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
              if (f.ΔΔⲆ & kw.ⵠᐃⵠⵠⲆ) {
                q += 610;
              } else {
                q += 414;
              }
            }
            if (cf.transition) {
              w = cf.time ? Tl - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
              ho.fillStyle = Pv(j.ⵠᐃᐃ[0], j.ⵠᐃᐃ[1], j.ⵠᐃᐃ[2], j.ⵠΔⲆ[0], j.ⵠΔⲆ[Hg], j.ⵠΔⲆ[Ug], w);
            } else {
              ho.fillStyle = j.ᐃΔⵠΔⵠ[cf.time];
            }
            x = Math.max(Xw.ⵠᐃⲆ.x + m - jk - 230, Bb);
            y = Math.max(-Xw.ⵠᐃⲆ.x + lo - k - 330 - Ug, 0);
            z = Math.max(Xw.ⵠᐃⲆ.y + q - Ob, Ih);
            A = Math.max(-Xw.ⵠᐃⲆ.y + jq - p - 100 - Rl, Zj);
            ho.beginPath();
            ho.fillRect(x, z, lo - y - x, jq - z - A);
          }
        }
      }
      if (bf.ⵠⵠᐃⲆᐃ) {
        Cv(pv, xv, yv, vv, wv, 695, "isl", vg);
        Cv(pv, xv, yv, vv, wv, 694, "isl", Rl);
      }
      Cv(tv, xv, yv, vv, wv, 692, "isl", 2);
      if (bf.ⵠⵠᐃⲆᐃ) {
        Cv(uv, xv, yv, vv, wv, 243, "de");
      }
      var B = cf.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ];
      for (c = 0; c < B.length; c++) {
        for (var b = B[c], C = os; C < b.ΔⵠⵠΔᐃ.length; C++) {
          Lv(b.ΔⵠⵠΔᐃ[C]);
        }
      }
      if ((vp += _w * 40) > 60) {
        vp -= 60;
      }
      Cv(Sp, xv, yv, vv, wv, 1024, "r", wj);
      for (c = 0; c < cf.Ⲇᐃᐃᐃ.length; c++) {
        if ((f = cf.Ⲇᐃᐃᐃ[c]).ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
          k = f.x2;
          if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
            k -= 400;
          }
          m = f.x1;
          if (cf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
            m += 400;
          }
          p = f.y2;
          if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
            p -= 300;
          }
          q = f.y1;
          if (f.ⵠⵠⵠ !== cf.ΔⲆΔⵠΔ) {
            q += 300;
          }
          if ((f.ΔΔⲆ & kw.ⲆΔΔⵠΔ) > 0 && -Xw.ⵠᐃⲆ.x >= k - lo + 120 && -Xw.ⵠᐃⲆ.x <= k + 820 && q + 88 - jq <= -Xw.ⵠᐃⲆ.y && -Xw.ⵠᐃⲆ.y <= p + 50) {
            Iv(k, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[0], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ⲆΔΔⵠΔ);
          }
          if ((f.ΔΔⲆ & kw.ᐃᐃⲆᐃΔ) > 0 && -Xw.ⵠᐃⲆ.x >= m - lo - 700 && -Xw.ⵠᐃⲆ.x <= m - 20 && q + 88 - jq <= -Xw.ⵠᐃⲆ.y && p + 50 >= -Xw.ⵠᐃⲆ.y) {
            Kv(m, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[1], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ᐃᐃⲆᐃΔ);
          }
          if ((f.ΔΔⲆ & kw.ΔᐃᐃⲆΔ) > 0 && -Xw.ⵠᐃⲆ.x >= m - 235 - lo && k + 350 >= -Xw.ⵠᐃⲆ.x && p - jq - 275 <= -Xw.ⵠᐃⲆ.y && p + 490 >= -Xw.ⵠᐃⲆ.y) {
            Ov(p - 230, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[Vg], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ΔᐃᐃⲆΔ);
          }
          if ((f.ΔΔⲆ & kw.ⵠᐃⵠⵠⲆ) > 0 && m - 235 - lo <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= k + 350 && -Xw.ⵠᐃⲆ.y >= q - jq - 390 && q + 315 >= -Xw.ⵠᐃⲆ.y) {
            Fv(q + 310, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[3], cf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & kw.ⵠᐃⵠⵠⲆ);
          }
        }
      }
    })();
    (function () {
      var k = vv;
      var e = wv;
      var i = xv;
      var t = yv;
      if (bf.ⵠⵠᐃⲆᐃ) {
        Cv(tv, i, t, k, e, 621, "l", 2);
      }
      if (bf.ⵠⵠᐃⲆᐃ) {
        Cv(tv, i, t, k, e, Xr.ΔᐃΔΔⲆ, "la", Qr);
      }
      Cv(tv, i, t, k, e, 203, "la", Oj);
      Cv(pv, i, t, k, e, 620, "l", 2);
      if (bf.ⵠⵠᐃⲆᐃ) {
        Cv(sv, i, t, k, e, 203, "la", Ig);
        Cv(pv, i, t, k, e, 619, "l", as);
      }
      Cv(tv, i, t, k, e, 1052, "ma", Ng);
      for (var n = cf.ⲆΔⲆ[nw.ⵠⵠᐃΔⲆᐃΔ], aa = 0; n.length > aa; aa++) {
        n[aa].ΔⲆⵠⲆⲆⵠⲆ();
      }
      var ba = cf.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ];
      for (aa = Zj; ba.length > aa; aa++) {
        for (var ca = ba[aa], da = Zj; ca.ᐃΔᐃⵠⲆ.length > da; da++) {
          Av(ca.ᐃΔᐃⵠⲆ[da]);
        }
      }
      var ea = cf.ⲆΔⲆ[nw.ⲆᐃⲆᐃⵠ];
      for (aa = ig; aa < ea.length; aa++) {
        zv(ea[aa], 125);
        ea[aa].ΔⵠⲆⵠᐃ(ea[aa].info);
      }
      var l = cf.ⲆΔⲆ[nw.ⲆᐃΔᐃⵠ];
      for (aa = Qs; l.length > aa; aa++) {
        if (l[aa].action == 2) {
          Gv(l[aa]);
        }
      }
      var fa = cf.ⲆΔⲆ[nw.ΔᐃᐃⲆⲆ];
      for (aa = wg; fa.length > aa; aa++) {
        Gv(fa[aa], 113);
      }
      var ha = cf.ⲆΔⲆ[nw.ⲆⲆⵠⵠᐃ];
      for (aa = 0; ha.length > aa; aa++) {
        Gv(ha[aa]);
      }
      var ia = cf.ⲆΔⲆ[nw.ΔⲆΔΔⲆ];
      for (aa = In; ia.length > aa; aa++) {
        Gv(ia[aa]);
      }
      var ja = cf.ⲆΔⲆ[nw.ᐃΔΔⵠΔ];
      for (aa = st; ja.length > aa; aa++) {
        Gv(ja[aa], 118);
      }
      var d = cf.ⲆΔⲆ[nw.ⵠΔᐃᐃᐃ];
      for (aa = 0; aa < d.length; aa++) {
        zv(d[aa]);
      }
      var c = cf.ⲆΔⲆ[nw.ΔΔΔⵠⵠ];
      for (aa = 0; c.length > aa; aa++) {
        zv(c[aa], 141);
      }
      var m = cf.ⲆΔⲆ[nw.ⵠᐃΔⲆᐃ];
      for (aa = Yh; m.length > aa; aa++) {
        Gv(m[aa]);
      }
      m = cf.ⲆΔⲆ[nw.ᐃⵠΔΔΔ];
      aa = 0;
      for (; aa < m.length; aa++) {
        Gv(m[aa]);
      }
      m = cf.ⲆΔⲆ[nw.ⵠᐃΔⲆᐃ];
      aa = eu;
      for (; aa < m.length; aa++) {
        Sv(m[aa]);
      }
      var ka = cf.ⲆΔⲆ[nw.ⲆⵠΔᐃᐃ];
      for (aa = 0; ka.length > aa; aa++) {
        if (Bb === (ka[aa].info & 15) || jn === ka[aa].info) {
          zv(ka[aa]);
        }
      }
      var la = cf.ⲆΔⲆ[nw.ⲆΔⲆⵠΔ];
      for (aa = 0; la.length > aa; aa++) {
        if (wj === (la[aa].info & 15) || la[aa].info === 10) {
          zv(la[aa]);
        }
      }
      var ma = cf.ⲆΔⲆ[nw.ΔⵠⵠΔⲆ];
      for (aa = 0; aa < ma.length; aa++) {
        if (In === (ma[aa].info & 15) || xt === ma[aa].info) {
          zv(ma[aa]);
        }
      }
      var na = cf.ⲆΔⲆ[nw.ᐃⲆᐃⲆΔ];
      for (aa = In; na.length > aa; aa++) {
        zv(na[aa], 132);
      }
      var oa = cf.ⲆΔⲆ[nw.ⲆⲆΔⲆⵠ];
      for (aa = 0; aa < oa.length; aa++) {
        if (!(oa[aa].info & 15) || Ra === oa[aa].info) {
          zv(oa[aa]);
        }
      }
      var pa = cf.ⲆΔⲆ[nw.ᐃⲆⲆᐃΔ];
      for (aa = Yh; pa.length > aa; aa++) {
        if (!(pa[aa].info & 15) || pa[aa].info === Bo) {
          zv(pa[aa]);
        }
      }
      var qa = cf.ⲆΔⲆ[nw.ᐃⵠᐃᐃⵠ];
      for (aa = 0; aa < qa.length; aa++) {
        if (!(qa[aa].info & 15) || qa[aa].info === 10) {
          zv(qa[aa]);
        }
      }
      na = cf.ⲆΔⲆ[nw.ⲆΔᐃΔΔ];
      aa = 0;
      for (; na.length > aa; aa++) {
        zv(na[aa]);
      }
      var ra = cf.ⲆΔⲆ[nw.Δⵠᐃᐃⵠ];
      for (aa = Da; ra.length > aa; aa++) {
        zv(ra[aa], 250, 729);
      }
      var A = cf.ⲆΔⲆ[nw.ⵠΔΔⵠΔᐃΔ];
      for (aa = 0; aa < A.length; aa++) {
        zv(A[aa], 250, 729);
      }
      var x = cf.ⲆΔⲆ[nw.ΔΔΔΔΔ];
      for (aa = 0; aa < x.length; aa++) {
        zv(x[aa], 854, 859);
      }
      var J = cf.ⲆΔⲆ[nw.ᐃⲆΔᐃⲆ];
      for (aa = ya; J.length > aa; aa++) {
        if (J[aa].info & mk) {
          zv(J[aa], 336);
        }
      }
      J = cf.ⲆΔⲆ[nw.ΔⵠⵠΔΔ];
      aa = ig;
      for (; J.length > aa; aa++) {
        if (J[aa].info & 1) {
          zv(J[aa], 373);
        }
      }
      J = cf.ⲆΔⲆ[nw.ΔΔⲆᐃⲆ];
      aa = Da;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          zv(J[aa], 376);
        }
      }
      J = cf.ⲆΔⲆ[nw.ΔⵠΔⲆΔ];
      aa = Ih;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          zv(J[aa], 379);
        }
      }
      J = cf.ⲆΔⲆ[nw.ⵠΔⲆⵠᐃ];
      aa = mj;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          zv(J[aa], 500);
        }
      }
      J = cf.ⲆΔⲆ[nw.ᐃΔΔⵠᐃ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          zv(J[aa], 376);
        }
      }
      J = cf.ⲆΔⲆ[nw.ΔⵠⵠⲆᐃ];
      aa = ig;
      for (; aa < J.length; aa++) {
        if (J[aa].info & 1) {
          zv(J[aa], 336);
        }
      }
      J = cf.ⲆΔⲆ[nw.ⵠΔᐃⲆΔ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info & 1) {
          zv(J[aa], 373);
        }
      }
      J = cf.ⲆΔⲆ[nw.ᐃΔⵠⵠⵠ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          zv(J[aa], 376);
        }
      }
      J = cf.ⲆΔⲆ[nw.ⵠΔᐃΔΔ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          zv(J[aa], 379);
        }
      }
      J = cf.ⲆΔⲆ[nw.Δⵠᐃⵠᐃ];
      aa = st;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          zv(J[aa], 500);
        }
      }
      J = cf.ⲆΔⲆ[nw.Ⲇᐃⵠⵠⵠ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          zv(J[aa], 376);
        }
      }
      var sa = cf.ⲆΔⲆ[nw.ⵠⵠⲆⵠΔ];
      for (aa = 0; aa < sa.length; aa++) {
        zv(sa[aa], 264, 322);
      }
      var B = cf.ⲆΔⲆ[nw.ΔⲆⵠΔΔ];
      for (aa = Hi; aa < B.length; aa++) {
        zv(B[aa], 198);
      }
      n = cf.ⲆΔⲆ[nw.ⵠⵠᐃΔⲆᐃΔ];
      aa = 0;
      for (; aa < n.length; aa++) {
        zv(n[aa], Xr.ⵠⵠᐃΔⲆᐃΔ, Xr.ᐃⲆᐃⵠⵠᐃΔⵠΔ);
      }
      var ta = cf.ⲆΔⲆ[nw.ⵠⵠⲆᐃΔ];
      for (aa = Zj; ta.length > aa; aa++) {
        if (ta[aa].ⲆⵠᐃⲆΔⲆΔ === st) {
          zv(ta[aa]);
        }
      }
      ba = cf.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ];
      aa = 0;
      for (; ba.length > aa; aa++) {
        ca = ba[aa];
        if (ba[aa].ΔⲆᐃΔΔ !== 227 && ba[aa].ΔⲆᐃΔΔ !== 228 && ba[aa].ΔⲆᐃΔΔ !== 229 && ba[aa].ΔⲆᐃΔΔ !== 230 && ba[aa].ΔⲆᐃΔΔ !== 91) {
          if (ca.ⵠᐃᐃᐃΔⵠΔ === 0) {
            if (ca.ᐃⵠⵠⵠⵠⵠⵠ > 0.001) {
              ca.ᐃⵠⵠⵠⵠⵠⵠ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(ca.ᐃⵠⵠⵠⵠⵠⵠ, 0, 0.018);
              var ua = 1 + Math.min(1, Math.max(ca.ᐃⵠⵠⵠⵠⵠⵠ, os) / 100) * 0.18;
              ho.save();
              ho.scale(ua, ua);
              Xw.ⵠᐃⲆ.x /= ua;
              Xw.ⵠᐃⲆ.y /= ua;
              ca.x /= ua;
              ca.y /= ua;
              ca.r.x /= ua;
              ca.r.y /= ua;
              ca.ⲆⲆΔⲆΔⲆⲆ();
              ca.ᐃⵠᐃⵠ();
              Xw.ⵠᐃⲆ.x *= ua;
              Xw.ⵠᐃⲆ.y *= ua;
              ca.x *= ua;
              ca.y *= ua;
              ca.r.x *= ua;
              ca.r.y *= ua;
              ho.restore();
            } else {
              ca.ⲆⵠᐃⲆΔⲆΔ = 0;
              ca.ⲆⲆΔⲆΔⲆⲆ();
              ca.ᐃⵠᐃⵠ();
            }
          }
        } else if (ca.ᐃⵠⵠⵠⲆ <= 180) {
          ho.save();
          ua = 1 + Math.min(1, Math.max(ca.ⵠⵠⲆⲆᐃ - 30, Zj) / 180) * 0.35;
          ho.scale(ua, ua);
          Xw.ⵠᐃⲆ.x /= ua;
          Xw.ⵠᐃⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ⲆⵠᐃⲆΔⲆΔ = Hi;
          ca.ⲆⲆΔⲆΔⲆⲆ();
          ca.ᐃⵠᐃⵠ();
          Xw.ⵠᐃⲆ.x *= ua;
          Xw.ⵠᐃⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          ho.restore();
        }
      }
      B = cf.ⲆΔⲆ[nw.ΔⲆⵠΔΔ];
      aa = Yh;
      for (; B.length > aa; aa++) {
        zv(B[aa], 913);
      }
      var va = cf.ⲆΔⲆ[nw.ⵠⵠⵠⵠⲆ];
      for (aa = Lr; aa < va.length; aa++) {
        zv(va[aa]);
      }
      var S = cf.ⲆΔⲆ[nw.ⲆⵠⲆᐃⵠ];
      for (aa = ig; aa < S.length; aa++) {
        zv(S[aa], 419, 461);
      }
      var Q = cf.ⲆΔⲆ[nw.ᐃΔᐃⵠΔ];
      for (aa = 0; Q.length > aa; aa++) {
        zv(Q[aa]);
      }
      var _ = cf.ⲆΔⲆ[nw.ΔⵠΔⵠⲆ];
      for (aa = wg; _.length > aa; aa++) {
        zv(_[aa], 299, 326);
      }
      var F = cf.ⲆΔⲆ[nw.ⲆⵠΔᐃⵠ];
      for (aa = 0; aa < F.length; aa++) {
        zv(F[aa], 232, 1077);
      }
      var R = cf.ⲆΔⲆ[nw.ⲆⲆΔⵠⲆ];
      for (aa = 0; R.length > aa; aa++) {
        zv(R[aa], 233, 1092);
      }
      ka = cf.ⲆΔⲆ[nw.ⲆⵠΔᐃᐃ];
      aa = fl;
      for (; aa < ka.length; aa++) {
        if ((ka[aa].info & 15) !== Qs && ka[aa].info !== Ch) {
          zv(ka[aa]);
        }
      }
      la = cf.ⲆΔⲆ[nw.ⲆΔⲆⵠΔ];
      aa = In;
      for (; aa < la.length; aa++) {
        if (Bb !== (la[aa].info & 15) && Pb !== la[aa].info) {
          zv(la[aa]);
        }
      }
      ma = cf.ⲆΔⲆ[nw.ⵠᐃΔΔΔⵠΔ];
      aa = Qs;
      for (; ma.length > aa; aa++) {
        zv(ma[aa], 239);
      }
      ma = cf.ⲆΔⲆ[nw.ΔⵠⵠΔⲆ];
      aa = 0;
      for (; ma.length > aa; aa++) {
        if ((ma[aa].info & 15) !== Mg && ma[aa].info !== 10) {
          zv(ma[aa]);
        }
      }
      m = cf.ⲆΔⲆ[nw.ᐃⵠΔΔΔ];
      aa = 0;
      for (; m.length > aa; aa++) {
        Sv(m[aa]);
      }
      oa = cf.ⲆΔⲆ[nw.ⲆⲆΔⲆⵠ];
      aa = Bb;
      for (; oa.length > aa; aa++) {
        if (oa[aa].info & 15 && oa[aa].info !== 10) {
          zv(oa[aa]);
        }
      }
      pa = cf.ⲆΔⲆ[nw.ᐃⲆⲆᐃΔ];
      aa = Rq;
      for (; aa < pa.length; aa++) {
        if (pa[aa].info & 15 && pa[aa].info !== 10) {
          zv(pa[aa]);
        }
      }
      qa = cf.ⲆΔⲆ[nw.ᐃⵠᐃᐃⵠ];
      aa = 0;
      for (; aa < qa.length; aa++) {
        if (qa[aa].info & 15 && qa[aa].info !== 10) {
          zv(qa[aa]);
        }
      }
      var G = cf.ⲆΔⲆ[nw.ⵠΔΔⲆᐃ];
      for (aa = Rq; aa < G.length; aa++) {
        zv(G[aa], 691, 697);
      }
      var j = cf.ⲆΔⲆ[nw.ⲆⲆᐃⲆᐃ];
      for (aa = 0; aa < j.length; aa++) {
        zv(j[aa], 637, 687);
      }
      var L = cf.ⲆΔⲆ[nw.ⲆⲆᐃⲆⵠ];
      for (aa = Yh; L.length > aa; aa++) {
        zv(L[aa], 673, 688);
      }
      var W = cf.ⲆΔⲆ[nw.ⵠΔᐃΔⵠ];
      for (aa = Yh; W.length > aa; aa++) {
        zv(W[aa], 260, 333);
      }
      var O = cf.ⲆΔⲆ[nw.ⲆᐃᐃⲆⵠ];
      for (aa = Mg; aa < O.length; aa++) {
        zv(O[aa], 1033, 1034);
      }
      var N = cf.ⲆΔⲆ[nw.ⵠⲆⲆᐃΔ];
      for (aa = 0; N.length > aa; aa++) {
        zv(N[aa], 445, 462);
      }
      var q = cf.ⲆΔⲆ[nw.ΔΔⵠⲆⲆ];
      for (aa = 0; aa < q.length; aa++) {
        zv(q[aa]);
      }
      var H = cf.ⲆΔⲆ[nw.ⲆⵠⵠΔⲆ];
      for (aa = ig; H.length > aa; aa++) {
        zv(H[aa], 918, 919);
      }
      var U = cf.ⲆΔⲆ[nw.ᐃⵠⵠᐃⵠ];
      for (aa = Da; U.length > aa; aa++) {
        zv(U[aa]);
      }
      var Y = cf.ⲆΔⲆ[nw.ᐃΔⲆⲆⲆ];
      for (aa = 0; aa < Y.length; aa++) {
        zv(Y[aa], 1218, 1219);
      }
      var K = cf.ⲆΔⲆ[nw.ᐃⵠΔⵠⵠ];
      for (aa = 0; aa < K.length; aa++) {
        if (K[aa].scale === ie) {
          zv(K[aa], 449, 463);
        }
      }
      K = cf.ⲆΔⲆ[nw.ᐃΔⲆⲆΔ];
      aa = Da;
      for (; K.length > aa; aa++) {
        if (K[aa].scale === 1) {
          zv(K[aa], 450, 464);
        }
      }
      var wa = cf.ⲆΔⲆ[nw.ᐃⲆⲆⲆⲆ];
      for (aa = 0; wa.length > aa; aa++) {
        zv(wa[aa]);
      }
      var Z = cf.ⲆΔⲆ[nw.ⵠⲆΔⵠᐃ];
      for (aa = wg; aa < Z.length; aa++) {
        zv(Z[aa], 114);
      }
      l = cf.ⲆΔⲆ[nw.ⲆᐃΔᐃⵠ];
      aa = 0;
      for (; l.length > aa; aa++) {
        zv(l[aa]);
      }
      var X = cf.ⲆΔⲆ[nw.Δᐃᐃᐃᐃ];
      for (aa = wj; X.length > aa; aa++) {
        zv(X[aa]);
      }
      J = cf.ⲆΔⲆ[nw.ΔⵠⵠⲆᐃ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & Gh)) {
          zv(J[aa], 166);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> Wl);
      }
      J = cf.ⲆΔⲆ[nw.ⵠΔᐃⲆΔ];
      aa = Zj;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          zv(J[aa], 171);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> zs);
      }
      J = cf.ⲆΔⲆ[nw.ᐃΔⵠⵠⵠ];
      aa = Yh;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & Oq)) {
          zv(J[aa], 172);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> ie);
      }
      J = cf.ⲆΔⲆ[nw.ⵠΔᐃΔΔ];
      aa = mj;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          zv(J[aa], 173);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> Tl);
      }
      J = cf.ⲆΔⲆ[nw.Δⵠᐃⵠᐃ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & zg)) {
          zv(J[aa], 124);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> pu);
      }
      J = cf.ⲆΔⲆ[nw.Ⲇᐃⵠⵠⵠ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          zv(J[aa], 218);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> Hg);
      }
      J = cf.ⲆΔⲆ[nw.ᐃⲆΔᐃⲆ];
      aa = In;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & zg)) {
          zv(J[aa], 212);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> 1);
      }
      J = cf.ⲆΔⲆ[nw.ΔⵠⵠΔΔ];
      aa = st;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          zv(J[aa], 213);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> Hg);
      }
      J = cf.ⲆΔⲆ[nw.ΔΔⲆᐃⲆ];
      aa = Rq;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          zv(J[aa], 214);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> 1);
      }
      J = cf.ⲆΔⲆ[nw.ΔⵠΔⲆΔ];
      aa = ig;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & mk)) {
          zv(J[aa], 215);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> 1);
      }
      J = cf.ⲆΔⲆ[nw.ⵠΔⲆⵠᐃ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          zv(J[aa], 216);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> 1);
      }
      J = cf.ⲆΔⲆ[nw.ᐃΔΔⵠᐃ];
      aa = mj;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & zg)) {
          zv(J[aa], 220);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> Wl);
      }
      var xa = cf.ⲆΔⲆ[nw.ⲆⲆⲆⲆⵠ];
      for (aa = Rq; xa.length > aa; aa++) {
        zv(xa[aa], 162);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      xa = cf.ⲆΔⲆ[nw.ΔᐃⵠⲆⲆ];
      aa = 0;
      for (; aa < xa.length; aa++) {
        zv(xa[aa], 163);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      xa = cf.ⲆΔⲆ[nw.ᐃᐃᐃᐃᐃ];
      aa = ya;
      for (; xa.length > aa; aa++) {
        zv(xa[aa], 164);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      xa = cf.ⲆΔⲆ[nw.ⵠᐃⲆᐃⵠ];
      aa = Qs;
      for (; xa.length > aa; aa++) {
        zv(xa[aa], 165);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      xa = cf.ⲆΔⲆ[nw.ᐃΔⵠⵠΔ];
      aa = 0;
      for (; aa < xa.length; aa++) {
        zv(xa[aa], 122);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      xa = cf.ⲆΔⲆ[nw.ᐃⵠⵠⲆᐃ];
      aa = 0;
      for (; aa < xa.length; aa++) {
        zv(xa[aa], 217);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      var Aa = cf.ⲆΔⲆ[nw.ⵠⵠΔⵠⲆ];
      for (aa = Hi; aa < Aa.length; aa++) {
        zv(Aa[aa], 160);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      Aa = cf.ⲆΔⲆ[nw.ⲆᐃⲆΔΔ];
      aa = 0;
      for (; Aa.length > aa; aa++) {
        zv(Aa[aa], 168);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      Aa = cf.ⲆΔⲆ[nw.Ⲇᐃⵠᐃⵠ];
      aa = 0;
      for (; Aa.length > aa; aa++) {
        zv(Aa[aa], 169);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      Aa = cf.ⲆΔⲆ[nw.ⲆⵠᐃΔΔ];
      aa = 0;
      for (; aa < Aa.length; aa++) {
        zv(Aa[aa], 170);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      Aa = cf.ⲆΔⲆ[nw.ᐃⲆⵠᐃᐃ];
      aa = ya;
      for (; aa < Aa.length; aa++) {
        zv(Aa[aa], 123);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      Aa = cf.ⲆΔⲆ[nw.ⵠⲆᐃᐃⲆ];
      aa = Rq;
      for (; Aa.length > aa; aa++) {
        zv(Aa[aa], 219);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      var Ba = cf.ⲆΔⲆ[nw.ⲆⵠⲆⵠⵠ];
      for (aa = eu; Ba.length > aa; aa++) {
        var Ca = Ba[aa];
        if (Ca.info > fl) {
          zv(Ca, 788);
        } else {
          zv(Ca, 182);
        }
      }
      var Ea = cf.ⲆΔⲆ[nw.ⲆⵠᐃᐃΔ];
      for (aa = 0; aa < Ea.length; aa++) {
        zv(Ea[aa], 159);
      }
      Cv(tv, i, t, k, e, 111, "g", rs);
      Cv(tv, i, t, k, e, 415, "gw", 2);
      Cv(tv, i, t, k, e, 112, "d", 2);
      Cv(tv, i, t, k, e, 416, "dw", Vh);
      Cv(tv, i, t, k, e, 110, "p", 0);
      Cv(tv, i, t, k, e, 241, "m", xq);
      Cv(tv, i, t, k, e, 121, "a", Rl);
      Cv(tv, i, t, k, e, 202, "re", 2);
      Cv(tv, i, t, k, e, 679, "cs", Tr, ut);
      Cv(tv, i, t, k, e, 679, "cs", Vh, Ug);
      Cv(tv, i, t, k, e, 679, "cs", Oq, og);
      Cv(tv, i, t, k, e, 679, "cs", 0, Da);
      Cv(tv, i, t, k, e, 676, "cs", ll, Wb);
      Cv(tv, i, t, k, e, 676, "cs", Vh, Vh);
      Cv(tv, i, t, k, e, 676, "cs", Hg, 1);
      Cv(tv, i, t, k, e, 676, "cs", 0, os);
      var Fa = cf.ⲆΔⲆ[nw.ⵠⵠⵠⲆΔ];
      for (aa = 0; Fa.length > aa; aa++) {
        for (da = Hi; da < Fa[aa].info; da++) {
          zv(Fa[aa].Δᐃⵠⵠ[da], 294);
        }
      }
      Cv(tv, i, t, k, e, 108, "s", pq);
      var Ga = cf.ⲆΔⲆ[nw.ⲆᐃΔⲆⵠ];
      for (aa = Mg; aa < Ga.length; aa++) {
        zv(Ga[aa]);
      }
      Ga = cf.ⲆΔⲆ[nw.ⲆΔᐃⵠⲆ];
      aa = Rq;
      for (; Ga.length > aa; aa++) {
        zv(Ga[aa]);
      }
      Ga = cf.ⲆΔⲆ[nw.ΔⵠᐃⲆⵠ];
      aa = 0;
      for (; aa < Ga.length; aa++) {
        zv(Ga[aa]);
      }
      Ga = cf.ⲆΔⲆ[nw.ΔⲆⵠⵠⵠ];
      aa = Bb;
      for (; Ga.length > aa; aa++) {
        zv(Ga[aa]);
      }
      Ga = cf.ⲆΔⲆ[nw.ⲆⲆⵠⵠΔ];
      aa = 0;
      for (; Ga.length > aa; aa++) {
        zv(Ga[aa]);
      }
      var Ha = cf.ⲆΔⲆ[nw.ⵠΔⲆⲆΔ];
      for (aa = os; aa < Ha.length; aa++) {
        Gv(Ha[aa]);
      }
      fa = cf.ⲆΔⲆ[nw.ΔᐃᐃⲆⲆ];
      aa = Zj;
      for (; fa.length > aa; aa++) {
        Sv(fa[aa]);
      }
      fa = cf.ⲆΔⲆ[nw.ᐃΔΔⵠΔ];
      aa = Rq;
      for (; fa.length > aa; aa++) {
        Sv(fa[aa]);
      }
      l = cf.ⲆΔⲆ[nw.ⲆᐃΔᐃⵠ];
      aa = 0;
      for (; l.length > aa; aa++) {
        if (l[aa].action == 2) {
          Sv(l[aa]);
        }
      }
      X = cf.ⲆΔⲆ[nw.Δᐃᐃᐃᐃ];
      aa = 0;
      for (; aa < X.length; aa++) {
        Sv(X[aa]);
      }
      ha = cf.ⲆΔⲆ[nw.ⲆⲆⵠⵠᐃ];
      aa = In;
      for (; aa < ha.length; aa++) {
        Sv(ha[aa]);
      }
      ia = cf.ⲆΔⲆ[nw.ΔⲆΔΔⲆ];
      aa = 0;
      for (; ia.length > aa; aa++) {
        Sv(ia[aa]);
        ia[aa].ΔⵠⲆⵠᐃ(ia[aa].info);
      }
      Cv(tv, i, t, k, e, 989, "c", ya);
      Cv(tv, i, t, k, e, 109, "t", 5, 4);
      Cv(tv, i, t, k, e, 413, "f", 2, 2);
      Cv(tv, i, t, k, e, 693, "plm", Ih, 0);
      Cv(tv, i, t, k, e, 307, "b", Tr, 2);
      Cv(tv, i, t, k, e, 109, "t", 3, lr);
      Cv(tv, i, t, k, e, 307, "b", og, 0);
      Cv(tv, i, t, k, e, 413, "f", 1, 1);
      Cv(tv, i, t, k, e, 693, "plm", hb, 1);
      Cv(tv, i, t, k, e, 109, "t", za, Qs);
      Cv(tv, i, t, k, e, 413, "f", Qs, 0);
      Cv(tv, i, t, k, e, 693, "plm", 2, 2);
      Ha = cf.ⲆΔⲆ[nw.ⵠΔⲆⲆΔ];
      aa = 0;
      for (; Ha.length > aa; aa++) {
        Sv(Ha[aa]);
      }
      var Ia = cf.ⲆΔⲆ[nw.ⵠᐃⵠᐃⵠ];
      for (aa = wg; aa < Ia.length; aa++) {
        zv(Ia[aa], 221);
      }
      ba = cf.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ];
      aa = 0;
      for (; ba.length > aa; aa++) {
        if ((ca = ba[aa]).ⵠᐃᐃᐃΔⵠΔ === 1 && (ca.ᐃⵠⵠⵠⲆ < 180 || ca.ΔⲆᐃΔΔ !== 227 && ca.ΔⲆᐃΔΔ !== 228 && ca.ΔⲆᐃΔΔ !== 91 && ca.ΔⲆᐃΔΔ !== 229 && ca.ΔⲆᐃΔΔ !== 230)) {
          ca.ᐃⵠⵠⵠⵠⵠⵠ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(ca.ᐃⵠⵠⵠⵠⵠⵠ, 100, 0.018);
          ua = Wl + Math.min(1, Math.max(ca.ᐃⵠⵠⵠⵠⵠⵠ, 0) / Ph) * 0.18;
          ho.save();
          ho.scale(ua, ua);
          Xw.ⵠᐃⲆ.x /= ua;
          Xw.ⵠᐃⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ⲆⲆΔⲆΔⲆⲆ();
          ca.ᐃⵠᐃⵠ();
          Xw.ⵠᐃⲆ.x *= ua;
          Xw.ⵠᐃⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          ho.restore();
        }
      }
      var Ja = cf.ⲆΔⲆ[nw.ⲆᐃⵠΔΔ];
      for (aa = 0; Ja.length > aa; aa++) {
        zv(Ja[aa], 190);
        Ja[aa].ΔⵠⲆⵠᐃ(Ja[aa].info);
      }
      var Ka = cf.ⲆΔⲆ[nw.ᐃⲆⵠᐃΔ];
      for (aa = 0; aa < Ka.length; aa++) {
        zv(Ka[aa], 245, 246);
      }
      var La = cf.ⲆΔⲆ[nw.ⵠᐃΔⲆⲆ];
      for (aa = Qs; aa < La.length; aa++) {
        zv(La[aa], 201);
      }
      ba = cf.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ];
      aa = os;
      for (; aa < ba.length; aa++) {
        if (((ca = ba[aa]).ΔⲆᐃΔΔ === 227 || ca.ΔⲆᐃΔΔ === 228 || ca.ΔⲆᐃΔΔ === 91 || ca.ΔⲆᐃΔΔ === 229 || ca.ΔⲆᐃΔΔ === 230) && ca.ᐃⵠⵠⵠⲆ > 180) {
          ca.ⲆⵠᐃⲆΔⲆΔ = Te;
          ho.save();
          ua = 1 + Math.min(1, Math.max(ca.ⵠⵠⲆⲆᐃ - 30, ig) / 180) * 0.35;
          ho.scale(ua, ua);
          Xw.ⵠᐃⲆ.x /= ua;
          Xw.ⵠᐃⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ⲆⲆΔⲆΔⲆⲆ();
          ca.ᐃⵠᐃⵠ();
          Xw.ⵠᐃⲆ.x *= ua;
          Xw.ⵠᐃⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          ho.restore();
        }
      }
      ta = cf.ⲆΔⲆ[nw.ⵠⵠⲆᐃΔ];
      aa = ya;
      for (; aa < ta.length; aa++) {
        if (ta[aa].ⲆⵠᐃⲆΔⲆΔ === 1) {
          zv(ta[aa]);
        }
      }
      K = cf.ⲆΔⲆ[nw.ᐃⵠΔⵠⵠ];
      aa = wg;
      for (; aa < K.length; aa++) {
        if (K[aa].scale > 1) {
          zv(K[aa], 449, 463);
        }
      }
      K = cf.ⲆΔⲆ[nw.ᐃΔⲆⲆΔ];
      aa = 0;
      for (; K.length > aa; aa++) {
        if (K[aa].scale > 1) {
          zv(K[aa], 450, 464);
        }
      }
      var Ma = cf.ⲆΔⲆ[nw.ⵠᐃⲆⲆΔ];
      for (aa = 0; Ma.length > aa; aa++) {
        zv(Ma[aa], 235, 1107);
      }
      var Na = cf.ⲆΔⲆ[nw.ⵠΔⵠᐃⵠ];
      for (aa = Rq; aa < Na.length; aa++) {
        zv(Na[aa], 238, 1128);
      }
      if ((nv += Ss * _w) > 60) {
        nv -= 60;
      }
      Cv(ov, i, t, k, e, 1041, "fo", 2);
      Cv(ov, i, t, k, e, 244, "fod", 2);
    })();
    if (bf.ⵠⵠᐃⲆᐃ && kw.ΔΔΔΔᐃ !== cf.mode && kw.ⲆⲆⲆⲆᐃ !== cf.mode && cf.mode !== kw.ᐃⲆⵠⲆΔΔᐃ) {
      (function () {
        var a = Xw.ⵠΔⲆᐃⲆ;
        if (a.ᐃⲆⲆΔⵠ === wj) {
          a.ΔⲆⵠᐃΔ = Math.max(eu, a.ΔⲆⵠᐃΔ - _w / kk);
        } else {
          a.ΔⲆⵠᐃΔ = Math.min(wt, a.ΔⲆⵠᐃΔ + _w / Ch);
        }
        for (var b = a.ᐃᐃΔΔⲆ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ᐃⲆΔ(d);
          Jv(471, d.id, Xw.ⵠᐃⲆ.x + d.x, Xw.ⵠᐃⲆ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ΔΔᐃΔᐃ <= 0 || -Xw.ⵠᐃⲆ.x + lo < d.x || -Xw.ⵠᐃⲆ.x - Xw.ⵠᐃⲆ.w / vg > d.x || d.y > -Xw.ⵠᐃⲆ.y + jq) {
            b.splice(c, wt);
          }
        }
        var e = -Xw.ⵠᐃⲆ.y;
        if (cf.ΔΔⲆΔⲆ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Xw.ⲆⵠᐃⵠΔ;
        if (a.ᐃⲆⲆΔⵠ === 0) {
          a.ΔⲆⵠᐃΔ = Math.max(0, a.ΔⲆⵠᐃΔ - _w / wa);
        } else {
          a.ΔⲆⵠᐃΔ = Math.min(zs, a.ΔⲆⵠᐃΔ + _w / Ht);
        }
        for (var b = a.ᐃᐃΔΔⲆ, c = Qs; c < b.length; c++) {
          var d = b[c];
          a.ᐃⲆΔ(d);
          Jv(470, d.id, Xw.ⵠᐃⲆ.x + d.x, Xw.ⵠᐃⲆ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ΔΔᐃΔᐃ <= 0 || -Xw.ⵠᐃⲆ.x + lo < d.x || -Xw.ⵠᐃⲆ.x > d.x || d.y > -Xw.ⵠᐃⲆ.y + jq) {
            b.splice(c, 1);
          }
        }
        var e = -Xw.ⵠᐃⲆ.y;
        if (cf.ⲆΔΔΔᐃ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Xw.ⲆᐃⲆΔⵠΔⵠ;
        for (var b = a.ᐃᐃΔΔⲆ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ᐃⲆΔ(d);
          Jv(942, d.id, Xw.ⵠᐃⲆ.x + d.x, Xw.ⵠᐃⲆ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ΔΔᐃΔᐃ <= 0 || -Xw.ⵠᐃⲆ.x + lo < d.x || d.x < -Xw.ⵠᐃⲆ.x || -Xw.ⵠᐃⲆ.y + jq < d.y) {
            b.splice(c, zs);
          }
        }
        var e = -Xw.ⵠᐃⲆ.y;
        if (cf.ⵠⲆΔᐃⵠ > -1000) {
          a.add(e);
        }
      })();
    }
    if (cf.transition && a) {
      cf.transition = xo;
      cf.ᐃⵠⵠⵠ.ΔΔⲆ = 0;
      cf.ᐃⵠⵠⵠ.ⵠᐃⵠ = vt;
    }
  }
  function Ov(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Xw.ⵠᐃⲆ.y + j + 710;
    var l = Math.max(Xw.ⵠᐃⲆ.x + e, 0);
    var g = Math.max(-Xw.ⵠᐃⲆ.x + lo - i - Cn, Da);
    var t = l;
    var b = lo - l - g;
    if (o) {
      var u = q.ⵠⵠⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + kw.ⲆⲆⵠⲆΔ;
    var F = v;
    var m = t;
    var p = -u.x + kw.ΔᐃⲆᐃⲆ;
    var C = b;
    var G = v += -u.x + kw.ΔᐃⲆᐃⲆ + 2;
    if (o) {
      u = q.ⵠⵠⵠ(a);
    } else {
      u = a.r;
    }
    var f = h - kw.ⲆᐃⵠⲆΔ - v - u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f + Ul) - jk;
    if (o) {
      u = q.ⵠⵠⵠ(s);
    } else {
      u = s.r;
    }
    if (v + (f = h - kw.ⲆᐃᐃⵠⲆ - v - u.x) < A) {
      var k = true;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f + 2;
    } else {
      k = false;
      v = A;
      D = -1;
    }
    f = h - kw.ᐃΔΔᐃᐃⵠᐃ - v;
    if (cf.transition) {
      var N = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
    }
    ho.fillRect(m, F, C, p);
    if (o) {
      if (cf.transition) {
        N = cf.time ? zg - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(15, 70, 76, 42, 139, 155, N);
      } else {
        ho.fillStyle = Xr.ⵠᐃⲆΔⲆᐃᐃ[cf.time];
      }
    } else if (cf.transition) {
      N = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
    }
    ho.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (cf.transition) {
          N = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
          ho.fillStyle = Pv(17, 94, 96, 169, 214, 211, N);
        } else {
          ho.fillStyle = Xr.ⵠᐃⵠⲆᐃⵠⲆ[cf.time];
        }
      } else if (cf.transition) {
        N = cf.time ? Hg - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
      } else {
        ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[cf.time];
      }
      ho.fillRect(J, L, B, M);
    }
    if (bf.ⵠⵠᐃⲆᐃ && o) {
      q.ⵠΔⵠΔⵠᐃᐃⲆΔ(A, D, G, h, -Xw.ⵠᐃⲆ.x + m, -Xw.ⵠᐃⲆ.x + m + C);
    }
  }
  function Pv(b, c, d, e, f, g, i) {
    var a;
    var j = "#";
    j += (a = Math.floor(i * e + b * (1 - i))) < 16 ? "0" + a.toString(16) : a.toString(_l);
    j += (a = Math.floor(i * f + c * (pu - i))) < 16 ? "0" + a.toString(Sh) : a.toString(kl);
    return j += (a = Math.floor(g * i + (au - i) * d)) < 16 ? "0" + a.toString(16) : a.toString(Fo);
  }
  function Qv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Xw.ⵠᐃⲆ.x + f + 820;
    var l = Math.max(Xw.ⵠᐃⲆ.y + e, Mg);
    var g = Math.max(-Xw.ⵠᐃⲆ.y + jq - i - 100, mj);
    var r = l;
    var b = jq - l - g;
    if (n) {
      var s = j.ⵠⵠⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + kw.ⲆⲆⵠⲆΔ;
    kw.ΔᐃⲆᐃⲆ;
    t += -s + kw.ΔᐃⲆᐃⲆ + 2;
    if (n) {
      s = j.ⵠⵠⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h - kw.ⲆᐃⵠⲆΔ - t - s;
    var v = (t += u + 2) - 2;
    if (n) {
      s = j.ⵠⵠⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (v > t + (u = h - kw.ⲆᐃᐃⵠⲆ - t - s)) {
      t += u + 2;
    } else {
      t = v;
    }
    u = h - kw.ᐃΔΔᐃᐃⵠᐃ - t;
    if (n > 0 && k.ᐃⲆΔⲆⵠⲆΔ === 1) {
      if (cf.transition) {
        var p = cf.time ? Oq - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(15, 77, 72, 252, 239, 187, p);
      } else {
        ho.fillStyle = Xr.ᐃⲆᐃⵠⵠΔⲆ[cf.time];
      }
      ho.fillRect(t, r, u, b);
    } else {
      if (cf.transition) {
        p = cf.time ? $b - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Pv(k.ⵠᐃᐃ[Bb], k.ⵠᐃᐃ[Tl], k.ⵠᐃᐃ[Vg], k.ⵠΔⲆ[ya], k.ⵠΔⲆ[$b], k.ⵠΔⲆ[jk], p);
      } else {
        ho.fillStyle = k.ᐃΔⵠΔⵠ[cf.time];
      }
      ho.fillRect(t, r, u, b);
    }
  }
  function Rv(b, c, d, e, f) {
    var g = d.width;
    var i = d.height;
    var a = Math.floor(g / Rl);
    var j = Math.floor(i / Hj);
    if (cf.transition) {
      ho.globalAlpha = og;
      Jm(ho, ΔΔ[b][c][cf.time], 0, 0, g, i, e, f, a, j);
      cf.time = cf.time ? 0 : 1;
      ho.globalAlpha = zs - cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      Jm(ho, ΔΔ[b][c][cf.time], Da, Lr, g, i, e, f, a, j);
      cf.time = cf.time ? Mg : $b;
      ho.globalAlpha = Oq;
    } else {
      Jm(ho, ΔΔ[b][c][cf.time], 0, Bb, g, i, e, f, a, j);
    }
  }
  function Sv(a, b) {
    if (cf.transition) {
      ho.globalAlpha = wt;
      a.ᐃΔᐃⵠᐃ(b);
      cf.time = cf.time ? Qs : 1;
      ho.globalAlpha = 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ;
      a.ᐃΔᐃⵠᐃ(b);
      cf.time = cf.time ? Qs : 1;
      ho.globalAlpha = Tl;
    } else {
      a.ᐃΔᐃⵠᐃ(b);
    }
  }
  var Tv = Bb;
  var Uv = og;
  var Vv = 2;
  var Wv = Hi;
  var Xv = 1;
  var Yv = It;
  function Zv(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function $v(f, j, i, k, n, p, q, r, t, w, l, g, u, b, x) {
    if (f.length === Mg) {
      f = " ";
    }
    if (q === undefined) {
      q = Zj;
    }
    if (Og === r) {
      r = 0;
    }
    if (t === xg) {
      t = 0;
    }
    if (b === cg) {
      b = Yh;
    }
    var d = document.createElement("canvas");
    var c = d.getContext("2d");
    c.textBaseline = "middle";
    c.font = (x !== El ? x + " " : "") + k + "px " + j;
    n = n !== Za ? Math.min(c.measureText(f).width, n) : c.measureText(f).width;
    d.width = n + q;
    d.height = k + r;
    if (p !== cn) {
      if (l !== undefined) {
        c.globalAlpha = l;
      }
      c.fillStyle = p;
      if (rk !== g) {
        ⵠᐃⵠΔⲆΔΔΔΔ(c, t + eh, t, n + q - t * 2 - nj, k + r - t * 2, g);
        c.fill();
      } else {
        c.fillRect(t, t, n + q - t * Lt, k + r - It * t);
      }
      c.globalAlpha = $b;
      if (t !== Qs) {
        c.lineWidth = t;
        c.strokeStyle = w;
        c.stroke();
      }
    }
    c.textBaseline = "middle";
    c.font = (x !== Gs ? x + " " : "") + k + "px " + j;
    if (u !== undefined) {
      c.strokeStyle = u;
      c.lineWidth = b;
      c.lineJoin = "miter";
      c.miterLimit = Vg;
      c.strokeText(f, Math.floor(q / 2), Math.floor(r / H) + Math.floor(k / Vh), n);
    }
    c.fillStyle = i;
    c.fillText(f, Math.floor(q / 2), Math.floor(r / Vg) + Math.floor(k / rs), n);
    d.w2 = d.width / It;
    d.ΔΔᐃᐃᐃ = d.height / 2;
    return d;
  }
  function _v(f, e, i, j, k, m, n, a, p, q, t) {
    if (p === lj) {
      p = 0;
    }
    if (rk === a) {
      a = wg;
    }
    if (q === undefined) {
      q = 0;
    }
    if (t === undefined) {
      t = 1;
    }
    if (m !== hb) {
      m = Mg;
    }
    if (j) {
      var w = j;
    }
    var u;
    var x = {
      width: f,
      height: e,
      ⵠⵠ: w,
      state: Wv,
      translate: {
        x: a,
        y: p,
        ⲆᐃⲆⲆⵠ: a,
        ⲆΔⲆⵠⲆ: p
      },
      ⵠᐃⵠΔΔΔⵠⲆΔ: m,
      ⲆᐃᐃⲆ: os,
      callback: n,
      position: q,
      active: t
    };
    function v() {
      return x.ⵠⵠ[x.state];
    }
    function d(a) {
      var b = x.translate;
      if (wj === x.width || x.height === 0) {
        x.width = x.ⵠⵠ[0].width;
        x.height = x.ⵠⵠ[0].height;
      }
      return a.x > b.x && a.x < b.x + x.width / k && a.y > b.y && a.y < b.y + x.height / k;
    }
    m = function () {
      var a = Qs;
      if (x.ⵠᐃⵠΔΔΔⵠⲆΔ === 1) {
        if (x.state === Xv || Yv === x.state) {
          x.ⲆᐃᐃⲆ = (x.ⲆᐃᐃⲆ + _w * 1000) % 1000;
        } else if (x.ⲆᐃᐃⲆ > 0) {
          x.ⲆᐃᐃⲆ = x.ⲆᐃᐃⲆ > 500 ? x.ⲆᐃᐃⲆ + _w * 1000 : x.ⲆᐃᐃⲆ - _w * 1000;
          if (x.ⲆᐃᐃⲆ < 0 || x.ⲆᐃᐃⲆ > 1000) {
            x.ⲆᐃᐃⲆ = st;
          }
        }
        a = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(x.ⲆᐃᐃⲆ > 500 ? (1000 - x.ⲆᐃᐃⲆ) / 500 : x.ⲆᐃᐃⲆ / 500) * 0.2;
      }
      return a;
    };
    if (Ob === (k = k === xb ? sl : k === 1 ? 2 : 1)) {
      u = function (b) {
        var c = og + m();
        var d = v();
        var e = x.width * c / Ug;
        var f = x.height * c / 2;
        var g = (e - x.width / xq) / xj;
        var a = (f - x.height / 2) / 2;
        Jm(b, d, x.translate.x - g, x.translate.y - a, e, f);
      };
    } else if (k === qo) {
      u = function (a) {
        var b = v();
        var c = x.width;
        var d = x.height;
        var e = (c - x.width) / It;
        var f = (d - x.height) / eh;
        Jm(a, b, x.translate.x - e, x.translate.y - f, c, d);
      };
      k = 1;
    } else {
      u = function (a) {
        Jm(a, v(), x.translate.x, x.translate.y);
      };
    }
    return {
      info: x,
      ⲆⵠᐃΔ: function (a, b, c) {
        if (d(b)) {
          if (c == Uv) {
            x.state = Yv;
          } else if (Vv == c || c == Tv && Yv != x.state) {
            x.state = Xv;
          }
          return true;
        } else {
          x.state = Wv;
          return false;
        }
      },
      ᐃⵠᐃⵠ: u,
      ⲆⵠᐃⲆᐃⵠⲆ: d
    };
  }
  function aw(a, b, c, d, e) {
    var f = {
      x: c,
      y: d,
      ⲆᐃⲆⲆⵠ: c,
      ⲆΔⲆⵠⲆ: d
    };
    return {
      translate: f,
      ᐃⵠᐃⵠ: function (b) {
        Jm(b, a, f.x, f.y, a.width / Ul, a.height / pq);
      },
      active: b,
      position: e
    };
  }
  var bw = "send";
  var cw = ᐃⵠΔⲆ.ΔⲆⵠᐃᐃΔΔ("id") === "1" ? ie : Yh;
  var dw = ᐃⵠΔⲆ.ΔⲆⵠᐃᐃΔΔ("password");
  var ew = ᐃⵠΔⲆ.ΔⲆⵠᐃᐃΔΔ("debug") || Wh;
  if (ew !== undefined) {
    ew = JSON.parse(dj.decodeURIComponent(ew));
  }
  var fw = "starve.io";
  var gw = "https://" + fw;
  var hw = {
    ⵠⵠⵠᐃΔΔⵠ: 32,
    ᐃᐃⵠⵠᐃ: 4,
    IDLE: 64,
    ⲆΔⵠΔᐃΔⲆ: 256,
    ⲆᐃᐃⲆΔΔΔ: 128,
    ⲆⵠⵠΔⲆᐃⲆ: 16,
    ⲆᐃⲆⵠ: 2,
    ⲆΔⲆⵠⵠⵠⲆΔⵠ: 1,
    ᐃᐃⲆΔⲆⵠⲆ: E
  };
  var iw = [{
    ⲆⵠΔΔⲆ: 1000,
    items: [[jk, 113], [Gh, 117], [Gk, 110], [1, 143]]
  }, {
    ⲆⵠΔΔⲆ: 2000,
    items: [[2, 118], [og, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ⲆⵠΔΔⲆ: 4000,
    items: [[3, 118], [og, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ⲆⵠΔΔⲆ: 8000,
    items: [[wt, 29], [4, 118], [1, 3], [6, 117], [30, 110], [Ql, 143], [1, 114], [150, 108], [200, 109], [60, 111], [jk, 127]]
  }, {
    ⲆⵠΔΔⲆ: 16000,
    items: [[1, 29], [Xn, 4], [au, 198], [7, 136], [2, 127], [2, 118], [zg, 119], [v, 163], [It, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ⲆⵠΔΔⲆ: 16000,
    items: [[Te, 29], [au, 11], [au, 50], [1, 3], [kk, 136], [Wg, 127], [Na, 118], [3, 195], [mk, 28], [200, 108], [300, 109]]
  }, {
    ⲆⵠΔΔⲆ: 16000,
    items: [[1, 29], [zs, 83], [1, 36], [3, 195], [1, wj], [og, 3], [ur, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ⲆⵠΔΔⲆ: 16000,
    items: [[1, 29], [1, 84], [au, 3], [fg, 136], [Hj, 127], [4, 118], [2, 135], [ba, 144], [Lb, 141], [6, 132], [$i, 115], [1, 49], [500, 109]]
  }, {
    ⲆⵠΔΔⲆ: 16000,
    items: [[1, 29], [mk, 3], [dg, 138], [1, 127], [ji, 118], [yr, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ⲆⵠΔΔⲆ: 20000,
    items: [[Hg, 29], [1, 3], [$b, 136], [au, 127], [Hk, 118], [xb, 195], [Xn, 26], [Oq, 5], [mk, 15], [Ul, 169], [50, 108], [Y, 109]]
  }];
  var jw = {
    ΔᐃΔΔΔⲆⲆ: ci,
    ⲆᐃⲆⲆΔⲆⵠᐃᐃ: 14,
    ᐃⲆΔⵠᐃⵠⵠ: 4,
    ΔⵠⵠⵠᐃΔⵠⵠΔ: 200,
    ⵠΔΔΔⲆⵠⲆᐃⲆ: 2000,
    ⵠⵠⵠⲆᐃΔⲆⲆΔ: 0.58,
    ΔⲆᐃⵠⵠΔⵠᐃᐃ: "[" + Th + "]",
    ΔᐃΔᐃⲆΔᐃⲆᐃ: 26,
    ΔᐃᐃᐃⲆⵠᐃᐃΔ: 50,
    ᐃᐃΔΔΔΔᐃⵠᐃ: sl,
    ⲆᐃⲆΔΔΔΔⵠΔ: 15,
    ⲆⵠⵠΔⲆᐃⲆ: 0.2,
    ᐃⵠᐃⲆΔΔⵠ: pq,
    ᐃⲆᐃⲆⵠⵠΔ: Bb,
    ΔⵠΔⲆⲆᐃΔΔⲆ: 8000,
    ⲆⵠⲆⲆⲆΔΔⵠΔ: 60000,
    ᐃⲆⲆᐃⵠⵠΔᐃᐃ: 5,
    ΔΔΔⲆⲆᐃᐃΔⵠ: 14,
    ⲆᐃⲆⵠⲆΔΔ: 0.2,
    ⲆᐃⵠᐃⲆᐃⵠ: 600000,
    ᐃⵠⵠΔⵠⲆΔ: 52,
    ⵠᐃᐃⲆΔᐃⵠΔΔ: 125000,
    ⵠᐃᐃⵠᐃΔΔ: 1,
    ⵠΔᐃⵠΔΔΔᐃⵠ: 20,
    ⲆΔⲆΔⵠⵠᐃ: es
  };
  var kw = {
    ⲆᐃΔ: 480000,
    ⲆᐃΔᐃⵠⲆⵠ: 10,
    ⲆᐃΔᐃΔᐃΔ: 16,
    ᐃⲆΔⲆᐃⵠⵠⲆΔ: 16 - lg,
    ᐃⲆᐃⲆᐃᐃⵠ: 60,
    ⵠᐃⵠⵠⲆ: Wl,
    ΔᐃᐃⲆΔ: pq,
    ᐃᐃⲆᐃΔ: 4,
    ⲆΔΔⵠΔ: yh,
    ⲆᐃⲆⵠⲆΔΔ: Zk,
    ᐃᐃΔᐃⵠΔⲆ: Ak,
    ΔΔⵠᐃΔⵠᐃ: ns,
    ⵠᐃⲆᐃⲆᐃᐃ: vh,
    ᐃΔⵠⵠⲆΔΔⵠⵠ: 100,
    ΔⵠⵠⵠᐃΔᐃ: Ph,
    ᐃᐃΔⵠᐃᐃᐃ: 100,
    ⵠΔΔⵠΔΔⵠⲆⵠ: 100,
    ᐃᐃΔⵠᐃᐃᐃ: 100,
    ⲆⵠᐃⲆⲆΔⲆ: Nn,
    ⲆⲆⲆᐃⵠΔΔ: vh,
    ⵠᐃᐃⲆⲆ: Qs,
    ⲆⵠⲆⵠⲆⲆⵠ: Hg,
    ΔΔΔΔᐃ: Ug,
    ᐃᐃⲆΔⵠ: xb,
    ⲆⲆⲆⲆᐃ: Wg,
    ᐃⲆⵠⲆΔΔᐃ: 5,
    ⵠΔⲆᐃⵠ: 6,
    ⵠΔᐃᐃⲆ: 7,
    ΔΔⲆΔᐃⵠⵠⵠΔ: {
      sydney: "Sydney",
      frankfurt: "Frankfurt",
      osaka: "Osaka",
      atlanta: "Atlanta",
      losangeles: "Los Angeles"
    },
    ΔᐃⲆᐃⵠⵠᐃ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ΔⵠⲆΔⵠᐃⲆ: 0,
    ⵠⲆⵠⲆⵠⲆᐃ: Bb,
    ⵠΔΔⲆᐃⲆᐃ: 30,
    ᐃᐃⲆⵠΔⵠⵠⲆⲆ: xj,
    ᐃⲆᐃⲆᐃᐃⵠ: 60000,
    ΔᐃΔⵠⲆⲆᐃᐃⲆ: 0,
    ⵠⲆⲆᐃΔⲆᐃⵠΔ: wg,
    ᐃᐃᐃⵠⲆⵠᐃⵠᐃ: 50,
    ⵠΔΔⲆᐃⲆΔⵠⵠ: In,
    ⲆⲆⲆⵠⲆⲆΔⵠⲆ: 40,
    ⲆⵠⲆᐃΔᐃⵠⲆΔ: 39,
    ᐃᐃⲆⲆΔⲆΔⵠᐃ: 830,
    ⵠⲆⵠⵠᐃΔᐃ: 25,
    ΔⲆΔΔⵠΔᐃ: Jl,
    ΔᐃⲆᐃⲆ: 0,
    ⲆⲆⵠⲆΔ: fl,
    ΔⵠΔΔᐃΔⵠ: 200,
    ⲆⵠΔᐃⲆⲆΔ: 0,
    ⲆᐃⵠⲆΔ: 250,
    ⵠⵠⲆᐃΔΔᐃ: 150,
    ⵠⵠΔⲆⵠΔΔ: 0,
    ⲆᐃᐃⵠⲆ: 350,
    ⲆⵠⵠΔᐃᐃⵠ: 100,
    ᐃΔΔᐃᐃⵠᐃ: 700,
    ⵠᐃΔⲆᐃ: 39879
  };
  var lw = [];
  for (Ft = Lr; Ft < 500; Ft++) {
    lw[Ft] = 0;
  }
  lw[47] = zs;
  lw[57] = 1;
  lw[0] = hb;
  lw[5] = 1;
  lw[6] = sd;
  lw[30] = 1;
  lw[19] = 1;
  lw[9] = 1;
  lw[62] = Tl;
  lw[63] = Te;
  lw[13] = mk;
  lw[14] = $b;
  lw[15] = za;
  lw[33] = Tl;
  lw[34] = 1;
  lw[16] = 1;
  lw[17] = 1;
  lw[12] = Tl;
  lw[18] = 1;
  var mw = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: Ct * 480000
  }, {
    time: 1440000
  }, {
    time: zj * 60000 * Na
  }, {
    time: Bi * 60000 * Ig
  }, {
    time: 2400000
  }, {
    time: Bi * 60000 * 10
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: Iq * 60000 * 6
  }, {
    time: 3840000
  }, {
    time: ur * 480000
  }];
  var nw = {
    ⵠᐃⵠᐃⵠ: 56,
    ΔⵠⵠΔΔ: 46,
    ΔⲆⵠΔΔ: 41,
    ᐃⲆΔᐃⲆ: 45,
    ⵠⲆⲆⵠΔⲆⵠ: 83,
    ΔΔⵠⲆⲆ: 77,
    ⲆⵠⲆⵠⵠ: 35,
    ⵠⵠΔⵠⲆ: Qr,
    ᐃᐃⲆⲆⲆ: os,
    ⲆⲆΔⲆⵠ: 39,
    ᐃⵠⵠⲆᐃ: 50,
    ⵠΔⵠΔⵠᐃⵠ: 85,
    ⲆⲆᐃⲆᐃ: 66,
    ⲆᐃΔᐃⵠ: hr,
    ⲆΔᐃΔΔ: 31,
    ᐃⵠᐃᐃⵠ: 37,
    ⲆⵠⲆᐃⵠ: 62,
    ΔⵠⵠⲆᐃ: 10,
    ⲆΔᐃⵠⲆ: 25,
    ⲆⲆⵠⵠᐃ: 22,
    ⵠⵠᐃΔⲆᐃΔ: 76,
    ⲆⵠᐃΔΔ: Do,
    ᐃⵠⵠᐃⵠ: 71,
    ⵠⵠⲆᐃΔ: 91,
    ⵠΔᐃⲆΔ: Ds,
    ⲆⲆⵠⵠΔ: 28,
    ⵠᐃΔΔΔⵠΔ: 89,
    ᐃΔᐃⵠΔ: 70,
    ⲆᐃⲆᐃⵠ: 30,
    Δⵠᐃⵠᐃ: 21,
    ΔΔⲆᐃⲆ: 47,
    ⵠΔΔⵠΔᐃΔ: 82,
    ⵠᐃΔⲆᐃ: qo,
    ⲆᐃΔⲆⵠ: 24,
    ⵠᐃΔⲆⲆ: 42,
    Ⲇᐃⵠᐃⵠ: 13,
    ᐃⲆⵠᐃΔ: 90,
    ᐃΔΔⵠΔ: pl,
    ⵠⵠⵠⲆΔ: Ak,
    ⲆⲆᐃⲆⵠ: 65,
    ⲆⲆⲆⲆⵠ: Pl,
    ΔⵠΔⲆΔ: 48,
    ΔᐃᐃⲆⲆ: 1,
    ⵠΔᐃΔΔ: 17,
    ΔⵠᐃⲆⵠ: 26,
    ⵠΔⲆⵠᐃ: 49,
    ᐃⲆⲆᐃΔ: 40,
    Δⵠᐃᐃⵠ: 86,
    ⲆⲆΔⵠⲆ: 73,
    Δᐃᐃᐃᐃ: 34,
    ⵠⵠⲆⵠΔ: 80,
    ⵠⲆⲆᐃΔ: 63,
    ⵠⲆᐃᐃⲆ: 52,
    ᐃⵠΔⵠⵠ: 64,
    ᐃⲆⵠᐃᐃ: 20,
    ⵠⵠⵠⵠⲆ: 67,
    ΔⵠⵠΔⲆ: 55,
    ᐃΔⵠⵠⵠ: 16,
    ΔΔΔΔΔ: 87,
    ⵠᐃⲆᐃⵠ: Kt,
    ΔⲆΔΔⲆ: 23,
    ⲆⵠⵠΔⲆ: 68,
    ⵠΔΔⲆᐃ: 81,
    Ⲇᐃⵠⵠⵠ: 51,
    ⵠⲆΔⵠᐃ: lr,
    ⵠⲆⵠΔⲆⵠⵠ: 84,
    ᐃⲆⲆⲆⲆ: At,
    ⵠᐃⲆⲆΔ: 74,
    ᐃⵠΔΔΔ: 43,
    ΔᐃⵠⲆⲆ: 7,
    ᐃΔΔⵠᐃ: 53,
    ⵠΔⲆⲆΔ: 32,
    ᐃΔⲆⲆⲆ: 78,
    ⵠΔⵠᐃⵠ: 75,
    ᐃΔⲆⲆΔ: 69,
    ΔⲆⵠⵠⵠ: 27,
    ⲆⵠᐃᐃΔ: 29,
    ᐃΔⵠⵠΔ: 19,
    ⲆᐃᐃⲆⵠ: 88,
    ⲆᐃⵠΔΔ: 38,
    ΔΔΔⵠⵠ: 33,
    ⲆΔⲆⵠΔ: 54,
    ⲆⵠΔᐃⵠ: 72,
    ⵠΔᐃᐃᐃ: 36,
    ⵠΔᐃΔⵠ: 61,
    ⲆᐃⲆΔΔ: Ka,
    ᐃⲆᐃⲆΔ: 79,
    ΔⵠΔⵠⲆ: 60,
    ⲆⵠΔᐃᐃ: 44,
    ᐃᐃᐃᐃᐃ: aa
  };
  var ow = [[nw.ⲆᐃΔⲆⵠ, 108], [nw.ⲆΔᐃⵠⲆ, 111], [nw.ΔⵠᐃⲆⵠ, 112], [nw.ΔⲆⵠⵠⵠ, 121], [nw.ⲆⲆⵠⵠΔ, 202]];
  function pw(a, b, c, d) {
    this.id = a;
    this.ᐃⵠⵠⵠⲆ = (a + 5) * aa;
    this.ΔΔᐃΔᐃ = lo / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ⵠⵠΔⵠ = Math.cos(d);
    this.alpha = eu;
  }
  function qw(b, c, d, e, i, j, k, a, m, h) {
    this.type = b;
    this.Ⲇⵠⵠᐃ = c;
    this.id = d;
    this.x = e;
    this.y = i;
    this.angle = j;
    this.ᐃⲆΔⵠⵠΔⵠ = j;
    this.action = k;
    this.info = a;
    this.ⵠᐃᐃⵠⵠ = h;
    this.r = {
      x: e,
      y: i
    };
    this.ᐃⵠⵠⵠⲆ = m;
    if (cf) {
      this.ᐃⲆᐃᐃ = cf.ΔᐃⵠᐃⲆΔΔ * c + d;
    }
    switch (b) {
      case nw.ᐃᐃⲆⲆⲆ:
        this.ⲆᐃΔⲆ = cf.ⵠΔΔⲆ[this.Ⲇⵠⵠᐃ];
        this.ΔⵠΔᐃ = this.ⲆᐃΔⲆ.ΔⵠΔᐃ;
        this.ⲆⵠᐃΔⲆⲆⲆ = this.ⲆᐃΔⲆ.ⲆⵠᐃΔⲆⲆⲆ;
        this.ᐃΔⲆⵠⲆ = this.ⲆᐃΔⲆ.ᐃΔⲆⵠⲆ;
        this.ΔⵠΔᐃᐃ = this.ⲆᐃΔⲆ.ΔⵠΔᐃᐃ;
        this.ΔΔᐃᐃΔⵠᐃ = -1000000;
        this.ⵠⲆΔᐃⵠ = -1000000;
        this.ⲆΔΔΔᐃ = -1000000;
        this.ΔΔⲆΔⲆ = -1000000;
        this.ΔⵠᐃⲆᐃⲆⵠ = -1000000;
        this.ⲆᐃⵠⵠⵠΔΔ = -1000000;
        this.ΔΔᐃΔⵠ = -1000000;
        this.ⲆᐃⲆⵠᐃ = cf.mode === kw.ΔΔΔΔᐃ && kw.ΔⵠⲆΔⵠᐃⲆ === this.ΔⵠΔᐃ && ye;
        this.ΔΔⵠⵠⲆᐃᐃ = cf.mode === kw.ᐃᐃⲆΔⵠ && this.ΔⵠΔᐃ === kw.ⵠⲆⵠⲆⵠⲆᐃ ? qn : Ta;
        this.ⲆΔⲆⵠⵠⲆᐃ = this.ⲆᐃⲆⵠᐃ && this.ⲆᐃΔⲆ.ⲆⲆΔⵠᐃ === "  " ? Kj : gh;
        this.ΔⵠⵠΔᐃ = [];
        this.ⵠᐃᐃᐃΔⵠΔ = st;
        this.ⵠⲆΔΔ = kh;
        this.ᐃΔΔᐃⵠⵠⲆ = 0;
        this.ⲆⵠᐃⲆΔⲆΔ = Qs;
        this.ᐃΔᐃⵠⲆ = [];
        this.r = {
          x: e,
          y: i
        };
        this.ᐃⵠᐃⵠ = jv;
        this.ⲆⲆΔⲆΔⲆⲆ = gv;
        this.ⵠᐃᐃᐃⲆ = 0;
        this.ⲆΔΔΔⵠ = In;
        this.ⵠΔᐃⵠⵠ = eu;
        this.ᐃⲆⵠᐃⵠᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 0, -Math.PI / pl, 0.5, 1);
        this.ⵠⵠⲆⲆᐃ = Lr;
        this.ᐃⵠⵠⵠⵠⵠⵠ = fl;
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, 0.6, 0.6, ig, 5, 3);
        this.ⵠᐃᐃᐃⵠ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 0.6, 0.6, wj, ib, 3);
        this.freeze = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, Rq, hl, 3);
        this.ᐃⵠⲆⲆᐃⲆᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, z, nq);
        this.ᐃᐃⵠⲆⵠⵠⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(true, Yh, 2.25, -1.5, 3.75, 7.5);
        this.ΔⲆΔⵠⲆᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(true, 0, 7.5, -Tr, 22.5, 33.75);
        this.attack = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, In, 0, -Math.PI / xb, 6, 9);
        this.ⲆⵠΔⲆⵠΔⲆᐃⲆ = Rq;
        this.ΔΔⵠᐃⵠⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, Mg, 1, 3);
        this.ΔΔⲆⵠⲆᐃΔ = this.ⲆΔⲆⵠⵠⲆᐃ ? new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(true, 0, 2.25, -1.5, 2.75, 5.5) : Yh;
        this.ⵠᐃᐃⲆⵠᐃΔ = 0;
        this.ⵠΔᐃᐃᐃⵠΔ = 0;
        this.ΔⲆⲆⲆΔΔⵠ = [];
        this.ᐃⲆⲆⲆΔΔⵠ = [];
        this.text = [];
        this.label = [];
        this.Ⲇⵠᐃⵠᐃⵠᐃ = iv;
        this.ⵠⲆᐃΔⲆ = true;
        this.right = -$b;
        this.ΔⲆᐃΔΔ = -zs;
        this.action = hw.IDLE;
        this.ΔΔⲆⵠⵠΔΔ = al;
        this.ⵠΔⵠⲆᐃ = 0;
        this.ᐃⲆᐃⲆⵠ = nt;
        this.bubbles = [];
        this.ᐃⵠΔⲆᐃ = 0;
        this.ᐃⵠΔᐃⵠ = -zg;
        this.ᐃⲆΔ = function (a) {
          if (this.info & 32768) {
            this.ΔΔⲆⵠⵠΔΔ = ye;
            this.info = this.info & -32769;
          } else {
            this.ΔΔⲆⵠⵠΔΔ = Fh;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ᐃⵠΔⲆᐃ = 1;
          } else {
            this.ᐃⵠΔⲆᐃ = In;
          }
          this.ⵠΔⵠⲆᐃ = Math.floor(this.info / 128);
          this.info -= this.ⵠΔⵠⲆᐃ * 128;
          if (this.info === 7 || this.ⲆΔⲆⵠⵠⲆᐃ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ⵠᐃᐃᐃΔⵠΔ = cf.ⲆⲆⲆΔⵠⵠΔΔᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / el));
          this.ΔⲆᐃΔΔ = this.ⵠᐃᐃⵠⵠ & 255;
          if (kw.ᐃᐃⲆⵠΔⵠⵠⲆⲆ === this.right) {
            this.ᐃⲆᐃⲆⵠ = y;
          } else {
            this.ᐃⲆᐃⲆⵠ = false;
          }
          if (lw[this.right]) {
            this.ⲆᐃᐃᐃⲆ = kh;
          } else {
            this.ⲆᐃᐃᐃⲆ = ss;
          }
          if (a & hw.ⲆΔⵠΔᐃΔⲆ) {
            this.ΔΔⵠᐃⵠⲆⲆ.ⵠᐃⵠ = false;
            this.ΔΔⵠᐃⵠⲆⲆ.ΔΔⲆ = 0.6;
          } else if (a & hw.ᐃᐃⵠⵠᐃ) {
            this.freeze.ⵠᐃⵠ = al;
            this.freeze.ΔΔⲆ = 0.6;
          } else if (a & hw.ⲆᐃᐃⲆΔΔΔ) {
            this.ⵠᐃᐃᐃⵠ.ⵠᐃⵠ = _h;
            this.ⵠᐃᐃᐃⵠ.ΔΔⲆ = 0.6;
          }
          if (a & hw.ᐃᐃⲆΔⲆⵠⲆ) {
            this.ᐃⵠⲆⲆᐃⲆᐃ.ⵠᐃⵠ = false;
            this.ᐃⵠⲆⲆᐃⲆᐃ.ΔΔⲆ = 0.6;
          }
          if (a & hw.ⲆᐃⲆⵠ) {
            this.ᐃⲆⲆ.ⵠᐃⵠ = Fh;
            this.ᐃⲆⲆ.ΔΔⲆ = 0.6;
          }
          if (a & hw.ⲆⵠⵠΔⲆᐃⲆ) {
            this.ⲆⵠΔⲆⵠΔⲆᐃⲆ = jw.ⵠⵠⵠⲆᐃΔⲆⲆΔ;
            if ($w.ⲆᐃⵠⲆⵠ && this.ᐃⵠΔᐃⵠ !== -gs) {
              $w.ⵠΔΔⲆ[this.ᐃⵠΔᐃⵠ].ΔⲆΔⵠᐃⲆⵠⵠᐃ(nf[this.right]);
            }
          }
        };
        this.ᐃⲆΔ();
        break;
      case nw.ΔⲆΔΔⲆ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
          ᐃⲆΔ: false,
          angle: eu
        };
        this.ⲆᐃⲆⲆᐃ = Vu;
        this.ᐃΔᐃⵠᐃ = $p;
        this.ᐃᐃⵠᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Qg, ie, 1.23, 1.18, 0.01, 0.01);
        this.ᐃⲆᐃΔᐃⲆᐃ = Da;
        this.ⵠΔⵠᐃΔΔΔ = 0;
        this.ΔⵠⲆⵠᐃ = bp;
        break;
      case nw.ⲆⲆⵠⵠᐃ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(f, $b, 1, os, Lb, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ⲆᐃⲆⲆᐃ = Ep;
        this.ᐃΔᐃⵠᐃ = Gp;
        this.ᐃᐃⵠᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(jl, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃⲆᐃΔᐃⲆᐃ = 0;
        this.ⵠΔⵠᐃΔΔΔ = 0;
        break;
      case nw.ΔᐃᐃⲆⲆ:
      case nw.ᐃΔΔⵠΔ:
        this.ⲆᐃⲆⲆᐃ = av;
        this.ᐃΔᐃⵠᐃ = zp;
        this.ᐃⲆΔΔᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, hb, 1.03, 0.98, 0.3, 0.3);
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃᐃⵠᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, Hg, 1, Lr, 10, Bo),
          ᐃⲆΔ: al,
          angle: 0
        };
        break;
      case nw.ᐃⵠΔΔΔ:
        this.ⲆᐃⲆⲆᐃ = cp;
        this.ᐃΔᐃⵠᐃ = Op;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ei, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Jn, 1, 1, Bb, zl, 10),
          ᐃⲆΔ: false,
          angle: Rq
        };
        this.Δᐃⵠⵠ = [];
        for (var l = Ih; l < 3; l++) {
          this.Δᐃⵠⵠ.push({
            ᐃⵠᐃⵠ: Ap,
            ⲆᐃᐃⲆ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(_h, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.Δᐃⵠⵠ[0].x = this.x - 16.5;
        this.Δᐃⵠⵠ[0].y = this.y - 15.5;
        this.Δᐃⵠⵠ[Hi].angle = this.angle;
        this.Δᐃⵠⵠ[1].x = this.x + 36;
        this.Δᐃⵠⵠ[1].y = this.y + 17;
        this.Δᐃⵠⵠ[1].angle = this.angle;
        this.Δᐃⵠⵠ[Ob].x = this.x - 18.5;
        this.Δᐃⵠⵠ[2].y = this.y + 39;
        this.Δᐃⵠⵠ[Vg].angle = this.angle;
        break;
      case nw.ⵠᐃΔⲆᐃ:
        this.ⲆᐃⲆⲆᐃ = Rp;
        this.ᐃΔᐃⵠᐃ = Ip;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, Wl, 0, 10, lg),
          ᐃⲆΔ: false,
          angle: Zj
        };
        this.Δᐃⵠⵠ = [];
        for (l = 0; l < 3; l++) {
          this.Δᐃⵠⵠ.push({
            ᐃⵠᐃⵠ: Kp,
            ⲆᐃᐃⲆ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(C, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.Δᐃⵠⵠ[0].x = this.x - 16.5;
        this.Δᐃⵠⵠ[0].y = this.y - 15.5;
        this.Δᐃⵠⵠ[au].x = this.x - 5.5;
        this.Δᐃⵠⵠ[zs].y = this.y + 7.5;
        this.Δᐃⵠⵠ[2].x = this.x + Pj;
        this.Δᐃⵠⵠ[2].y = this.y - Ll;
        break;
      case nw.ΔΔⵠⲆⲆ:
        this.ᐃⵠᐃⵠ = $u;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(C, 0.6, 0.6, Yh, 5, 3);
        break;
      case nw.ᐃΔᐃⵠΔ:
        this.ᐃⵠᐃⵠ = Lp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Jn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, In, mb, 3);
        break;
      case nw.ᐃⵠⵠᐃⵠ:
        this.ᐃⵠᐃⵠ = bv;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vt, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆΔⲆⲆᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⲆΔⵠΔᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ag, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, Wb);
        this.ⵠᐃᐃᐃⵠ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, ci);
        break;
      case nw.ⵠⵠⵠⵠⲆ:
        this.ᐃⵠᐃⵠ = kp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆΔⲆⲆᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(xo, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⲆΔⵠΔᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ss, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, Ig, 3);
        this.ⵠᐃᐃᐃⵠ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, st, 5, Lg);
        break;
      case nw.ⲆⵠⵠΔⲆ:
        this.ᐃⵠᐃⵠ = Vp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, M, 3);
        break;
      case nw.ᐃⲆⵠᐃΔ:
        this.ᐃⵠᐃⵠ = jp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vt, 0.6, 0.6, Bb, Qr, fn);
        break;
      case nw.ⵠⵠⲆᐃΔ:
        this.ⲆⵠⵠΔⵠ = this.info & 15;
        this.ⲆⵠᐃⲆΔⲆΔ = this.ⵠᐃᐃⵠⵠ & ie;
        this.ᐃⵠΔΔΔᐃⲆ = 0;
        this.x = this.info;
        this.y = this.ⵠᐃᐃⵠⵠ;
        this.ᐃⵠᐃⵠ = Fp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case nw.ⵠⵠⲆⵠΔ:
      case nw.ΔⵠΔⵠⲆ:
      case nw.ⵠΔᐃΔⵠ:
      case nw.ⲆⵠⲆᐃⵠ:
      case nw.ⵠⲆⲆᐃΔ:
      case nw.ᐃΔⲆⲆⲆ:
      case nw.ⲆⲆᐃⲆⵠ:
      case nw.ⲆⲆᐃⲆᐃ:
      case nw.ⲆᐃᐃⲆⵠ:
        this.ᐃⵠᐃⵠ = jp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ss, 0.6, 0.6, 0, 5, 3);
        break;
      case nw.ⵠΔᐃᐃᐃ:
        this.ᐃⵠᐃⵠ = Tu;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, $b, 1, 0, lg, 10),
          ᐃⲆΔ: dr,
          angle: 0
        };
        break;
      case nw.Δᐃᐃᐃᐃ:
        this.ᐃΔᐃⵠᐃ = _u;
        this.ᐃⵠᐃⵠ = mp;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, Cs),
          ᐃⲆΔ: f,
          angle: 0
        };
        this.up = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1.03, 0.98, 0.1, 0.1);
        this.ⲆⲆⵠᐃⲆ = [];
        break;
      case nw.ΔΔΔΔΔ:
        this.angle = Math.random() * Math.PI / Hj;
      case nw.Δⵠᐃᐃⵠ:
      case nw.ⵠΔΔⵠΔᐃΔ:
        this.ᐃⵠᐃⵠ = _p;
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, 0.6, 0.6, 0, 5, 3);
        break;
      case nw.ⵠΔΔⲆᐃ:
        this.ᐃⵠᐃⵠ = Wu;
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ta, 0.6, 0.6, 0, 5, qo);
        break;
      case nw.ᐃΔⲆⲆΔ:
        this.scale = 1;
        this.ᐃⵠᐃⵠ = wp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vt, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 0, Lr, -Math.PI / Na, 0.5, mk);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, fl, 5, 3);
        break;
      case nw.ⵠⵠᐃΔⲆᐃΔ:
        this.ⵠⲆΔⲆⲆ = 0;
        this.ᐃᐃᐃᐃ = [];
        this.ⵠΔⲆΔᐃᐃⵠ = Bb;
        this.ΔⲆⵠⲆⲆⵠⲆ = Mp;
        this.ᐃⵠᐃⵠ = Yp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 0, -Math.PI / Th, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, Hi, 5, 3);
        break;
      case nw.ⵠΔⵠᐃⵠ:
        this.x = this.info;
        this.y = this.ⵠᐃᐃⵠⵠ;
        this.scale = au;
        this.ⲆⲆⵠᐃ = 0;
        this.ᐃⵠᐃⵠ = dv;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Qg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Qg, 0, Mg, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, 0.6, 0.6, ya, hl, Tt);
        break;
      case nw.ⵠᐃⲆⲆΔ:
        this.x = this.info;
        this.y = this.ⵠᐃᐃⵠⵠ;
        this.scale = 1;
        this.ⲆⲆⵠᐃ = 0;
        this.ᐃⵠᐃⵠ = Up;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ta, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ei, Bb, Da, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case nw.ⲆⲆΔⵠⲆ:
        this.scale = 1;
        this.ᐃⵠᐃⵠ = fp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ta, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, hl, Tt);
        break;
      case nw.ⲆⵠΔᐃⵠ:
        this.scale = pu;
        this.ᐃⵠᐃⵠ = Pp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, Fs, ut);
        break;
      case nw.ᐃⵠΔⵠⵠ:
        this.scale = za;
        this.ᐃⵠᐃⵠ = Hp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(gh, 0.6, 0.6, wj, 5, Js);
        break;
      case nw.ⵠⵠⵠⲆΔ:
        this.Δᐃⵠⵠ = [];
        for (l = Bb; l < hl; l++) {
          this.Δᐃⵠⵠ.push({
            ᐃⵠᐃⵠ: Kp,
            ⲆᐃᐃⲆ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % Js) {
          case 0:
            this.Δᐃⵠⵠ[Mg].x = this.x - 20.5;
            this.Δᐃⵠⵠ[0].y = this.y - 22.5;
            this.Δᐃⵠⵠ[Te].x = this.x - 35.5;
            this.Δᐃⵠⵠ[1].y = this.y + 7.5;
            this.Δᐃⵠⵠ[2].x = this.x + 7.5;
            this.Δᐃⵠⵠ[2].y = this.y - 30;
            this.Δᐃⵠⵠ[Wb].x = this.x + 22.5;
            this.Δᐃⵠⵠ[3].y = this.y;
            this.Δᐃⵠⵠ[4].x = this.x - 7.5;
            this.Δᐃⵠⵠ[4].y = this.y + 14.5;
            break;
          case Te:
            this.Δᐃⵠⵠ[Bb].x = this.x - 30.5;
            this.Δᐃⵠⵠ[Da].y = this.y - 22.5;
            this.Δᐃⵠⵠ[1].x = this.x - 15.5;
            this.Δᐃⵠⵠ[1].y = this.y + 7.5;
            this.Δᐃⵠⵠ[2].x = this.x + 15.5;
            this.Δᐃⵠⵠ[2].y = this.y - 30;
            this.Δᐃⵠⵠ[I].x = this.x + 12.5;
            this.Δᐃⵠⵠ[eg].y = this.y + Fs;
            this.Δᐃⵠⵠ[Mq].x = this.x - 40.5;
            this.Δᐃⵠⵠ[4].y = this.y + 14.5;
            break;
          case as:
            this.Δᐃⵠⵠ[0].x = this.x - 20.5;
            this.Δᐃⵠⵠ[In].y = this.y - 20.5;
            this.Δᐃⵠⵠ[1].x = this.x - 35.5;
            this.Δᐃⵠⵠ[ie].y = this.y + 15.5;
            this.Δᐃⵠⵠ[2].x = this.x + 7.5;
            this.Δᐃⵠⵠ[2].y = this.y - 17;
            this.Δᐃⵠⵠ[3].x = this.x + 22.5;
            this.Δᐃⵠⵠ[3].y = this.y + kq;
            this.Δᐃⵠⵠ[4].x = this.x - 7.5;
            this.Δᐃⵠⵠ[4].y = this.y + 1.5;
        }
        break;
      case nw.ⲆΔᐃΔΔ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ei, ie, sd, 0, zl, 10),
          ᐃⲆΔ: vj,
          angle: fl
        };
        this.ᐃⵠᐃⵠ = Dp;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⲆᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, ig, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case nw.ᐃⲆⲆᐃΔ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, wg, lg, 10),
          ᐃⲆΔ: ss,
          angle: 0
        };
        this.ᐃⵠᐃⵠ = Zp;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case nw.ⲆⲆΔⲆⵠ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, 0, kk, Zk),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ᐃⵠᐃⵠ = Np;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case nw.ⲆⵠΔᐃᐃ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Jn, 1, zs, Qs, te, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ᐃⵠᐃⵠ = Wp;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(nt, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case nw.ΔⵠⵠΔⲆ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, zg, 1, Lr, 10, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ᐃⵠᐃⵠ = Jp;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case nw.ⲆΔⲆⵠΔ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ss, 1, Tl, Hi, 10, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ᐃⵠᐃⵠ = Su;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(nt, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case nw.ᐃⵠᐃᐃⵠ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ss, gs, 1, st, gn, 10),
          ᐃⲆΔ: Fh,
          angle: wg
        };
        this.ᐃⵠᐃⵠ = Tp;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ta, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case nw.ⲆᐃΔⲆⵠ:
        this.ᐃⵠᐃⵠ = cv;
        this.rotate = Yh;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, og, Xn, 0, Ch, 10),
          ᐃⲆΔ: Ag,
          angle: Yh
        };
        break;
      case nw.ⲆΔᐃⵠⲆ:
        this.ᐃⵠᐃⵠ = Qp;
        this.rotate = 0;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, gs, 0, lg, xt),
          ᐃⲆΔ: dr,
          angle: 0
        };
        break;
      case nw.ΔⵠᐃⲆⵠ:
        this.ᐃⵠᐃⵠ = Bp;
        this.rotate = 0;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(_h, Wl, $b, eu, J, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        break;
      case nw.ΔⲆⵠⵠⵠ:
        this.ᐃⵠᐃⵠ = qp;
        this.rotate = Zj;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 1, 1, 0, zl, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        break;
      case nw.ⲆⲆⵠⵠΔ:
        this.ᐃⵠᐃⵠ = Cp;
        this.rotate = Da;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, Bb, 10, 10),
          ᐃⲆΔ: _h,
          angle: 0
        };
        break;
      case nw.ⵠΔⲆⲆΔ:
        this.ⲆᐃⲆⲆᐃ = yp;
        this.ᐃΔᐃⵠᐃ = Xu;
        this.rotate = Yh;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, pu, 1, Rq, Zk, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        break;
      case nw.ⲆᐃⵠΔΔ:
        this.ᐃⵠᐃⵠ = Nm;
        this.ⵠΔⲆᐃ = Math.floor(this.x / 100);
        this.ⵠΔ = Math.floor(this.y / ql);
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Qg, wt, 1, os, Zk, Ht),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.opacity = 1;
        this.ΔⵠⲆⵠᐃ = Ym;
        break;
      case nw.ⵠᐃΔⲆⲆ:
        this.ᐃⵠᐃⵠ = np;
        this.ᐃᐃⵠᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(nt, gs, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, Wl, 0, lg, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        break;
      case nw.ΔΔΔⵠⵠ:
      case nw.ⵠⲆΔⵠᐃ:
      case nw.ⵠᐃⵠᐃⵠ:
      case nw.ⲆⵠⲆⵠⵠ:
      case nw.ⲆⵠᐃᐃΔ:
        this.ᐃⵠᐃⵠ = sp;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(al, 1, Wl, 0, J, te),
          ᐃⲆΔ: false,
          angle: mj
        };
        break;
      case nw.ⲆᐃⲆᐃⵠ:
        this.ᐃⵠᐃⵠ = sp;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, Te, 0, 10, Zk),
          ᐃⲆΔ: Mh,
          angle: os
        };
        this.ΔⵠⲆⵠᐃ = Ym;
        break;
      case nw.ⲆⲆⲆⲆⵠ:
      case nw.ΔᐃⵠⲆⲆ:
      case nw.ᐃᐃᐃᐃᐃ:
      case nw.ⵠᐃⲆᐃⵠ:
      case nw.ᐃΔⵠⵠΔ:
      case nw.ᐃⵠⵠⲆᐃ:
      case nw.ⵠⵠΔⵠⲆ:
      case nw.ⲆᐃⲆΔΔ:
      case nw.Ⲇᐃⵠᐃⵠ:
      case nw.ⲆⵠᐃΔΔ:
      case nw.ᐃⲆⵠᐃᐃ:
      case nw.ⵠⲆᐃᐃⲆ:
        this.ᐃⵠᐃⵠ = sp;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(C, 1, 1, ya, 10, 10),
          ᐃⲆΔ: dr,
          angle: Hi
        };
        this.ΔⵠⲆⵠᐃ = bp;
        break;
      case nw.ΔⲆⵠΔΔ:
        this.ᐃⵠᐃⵠ = ip;
        this.opacity = 1;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, gs, 1, 0, Ch, 10),
          ᐃⲆΔ: Ag,
          angle: 0
        };
        var n = this.angle % (Math.PI / 2);
        if (n < Math.PI / 4) {
          this.angle -= n;
        } else {
          this.angle += Math.PI / 2 - n;
        }
        break;
      case nw.ᐃⲆᐃⲆΔ:
        this.ᐃⵠᐃⵠ = Vm;
        this.angle = Hj * (Math.PI * Math.random());
        break;
      case nw.ⵠᐃΔΔΔⵠΔ:
        this.ᐃⵠᐃⵠ = up;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case nw.ⵠⲆⲆⵠΔⲆⵠ:
        this.ᐃⵠᐃⵠ = ep;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case nw.ⵠⲆⵠΔⲆⵠⵠ:
        this.ᐃⵠᐃⵠ = hp;
        this.angle = pq * (Math.PI * Math.random());
        break;
      case nw.ⵠΔⵠΔⵠᐃⵠ:
        this.ᐃⵠᐃⵠ = rp;
        this.angle = Ug * (Math.PI * Math.random());
        break;
      case nw.ᐃⲆⲆⲆⲆ:
        this.ᐃⲆΔ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ᐃⵠᐃⵠ = Hm;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, sd, sd, 0, 10, Bo),
          ᐃⲆΔ: Mh,
          angle: Yh
        };
        this.lock = os;
        this.ᐃⲆΔ(this.action);
        break;
      case nw.ᐃⲆΔᐃⲆ:
      case nw.ΔⵠⵠΔΔ:
      case nw.ΔΔⲆᐃⲆ:
      case nw.ΔⵠΔⲆΔ:
      case nw.ⵠΔⲆⵠᐃ:
      case nw.ᐃΔΔⵠᐃ:
      case nw.ΔⵠⵠⲆᐃ:
      case nw.ⵠΔᐃⲆΔ:
      case nw.ᐃΔⵠⵠⵠ:
      case nw.ⵠΔᐃΔΔ:
      case nw.Δⵠᐃⵠᐃ:
      case nw.Ⲇᐃⵠⵠⵠ:
        this.ᐃⵠᐃⵠ = Um;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, Hi, J, Lb),
          ᐃⲆΔ: false,
          angle: Ih
        };
        this.ΔⵠⲆⵠᐃ = bp;
        break;
      case nw.ⲆᐃΔᐃⵠ:
        this.ⲆᐃⲆⲆᐃ = pp;
        this.ᐃⵠᐃⵠ = xp;
        this.ᐃΔᐃⵠᐃ = Yu;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1.23, 1.18, 0.02, 0.02);
        this.ᐃᐃⵠᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, Hg, 1.23, 1.18, 0.04, 0.04);
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, Oq, ie, 0, 10, 10),
          ᐃⲆΔ: false,
          angle: In
        };
        this.ᐃⲆΔ = function (a) {
          this.action = a;
        };
    }
  }
  function rw(d) {
    function e(a, b, c) {
      var d = b;
      for (var e = c; cf.ⲆⵠⲆⵠᐃ > e; e++) {
        for (var f = b; f < cf.ⵠⲆᐃⲆᐃ && (e === c && (d = Math.max(f, d)), f <= d) && a[e][f] !== 1; f++) {
          a[e][f] = 1;
        }
        if (d > f) {
          break;
        }
      }
      cf.Ⲇᐃᐃᐃ.push(new cf.ΔⵠΔᐃᐃⲆⵠ(cf.ΔⲆΔⵠΔ, b, c, d - b + 1, e - c, 15));
    }
    function f(b, c, d, e, f) {
      for (var g = Zj; g < f && k(b, c, d, e, aa) !== 1; g++);
      if (f === g) {
        return Zj;
      } else {
        return Wl;
      }
    }
    function k(c, d, e, f, i) {
      var j = d + Math.floor(f * cf.ΔΔΔⵠⲆ.get());
      var k = e + Math.floor(cf.ΔΔΔⵠⲆ.get() * f);
      var a = Ch + Math.floor((cf.ⵠⲆᐃⲆᐃ - j - Kl) * cf.ΔΔΔⵠⲆ.get());
      var m = 10 + Math.floor((cf.ⲆⵠⲆⵠᐃ - k - ml) * cf.ΔΔΔⵠⲆ.get());
      var h = a + j;
      var l = m + k;
      for (var g = Bb; cf.Ⲇᐃᐃᐃ.length > g; g++) {
        var n = cf.Ⲇᐃᐃᐃ[g];
        if (za === ᐃⵠΔⲆ.ⵠⲆΔⵠᐃᐃⲆ(a, h, m, l, n.x1 / _j - i, n.x2 / 100 + i, n.y1 / lh - i, n.y2 / Ak + i)) {
          return 0;
        }
      }
      cf.Ⲇᐃᐃᐃ.push(new cf.ΔⵠΔᐃᐃⲆⵠ(c, a, m, j, k, 15));
      return 1;
    }
    function q(b, c) {
      for (var d = 0; d < c.length; d++) {
        a(c[d][Yh], c[d][1], b, c[d][2]);
      }
    }
    function o(a, e) {
      var f = cf.Ⲇᐃᐃᐃ[a];
      var i = Math.floor(f.y1 / el);
      var j = Math.floor(f.x1 / ql);
      var k = Math.floor(f.ΔⵠⲆ / 100);
      var o = j + (A = Math.floor(f.w / lh));
      var q = rs;
      var r = k;
      var s = i;
      for (var t = j + Cs + Math.floor((A - 20) * cf.ΔΔΔⵠⲆ.get()), v = t - nj; v < t + Gi; v++) {
        x(i - 1, v, "wtb", eu, Wl);
      }
      while (Lr < r) {
        if (as !== q) {
          if (r < 10) {
            for (B = zg; r > 0; B++) {
              n(s, t, 1, Xn, 0, e, B, 1);
              r -= Gh;
              s += ie;
            }
          } else if (Hg !== q) {
            q = 1;
            var w = Math.floor(1 + cf.ΔΔΔⵠⲆ.get() * vg);
            var y = sd + Math.floor(cf.ΔΔΔⵠⲆ.get() * $i);
            if (j + 16 > t) {
              n(s, t, w, 0, 1, e, y, y);
              t += w;
            } else if (t > o - gk) {
              n(s, t, w, 0, -1, e, y, y);
              t -= w;
            } else if (cf.ΔΔΔⵠⲆ.get() > 0.5) {
              n(s, t, w, ya, Tl, e, y, y);
              t += w;
            } else {
              n(s, t, w, Bb, -zg, e, y, y);
              t -= w;
            }
          } else {
            var z = Math.min(r, Math.floor(Oq + cf.ΔΔΔⵠⲆ.get() * 4));
            var A = 1 + Math.floor(Wg * cf.ΔΔΔⵠⲆ.get());
            n(s, t, z, mk, 0, e, A, A);
            q = 0;
            r -= z;
            s += z;
          }
        } else {
          for (var B = 10; B > 1; B--) {
            n(s, t, 1, Wl, 0, e, B, 1);
            r -= pu;
            s += 1;
          }
          q = 0;
        }
      }
      for (v = t - 1; v < t + Ug; v++) {
        x(s, v, "wtb", In, Oq);
      }
    }
    function n(f, j, k, m, n, o, p, a) {
      var q = Math.floor(p / xq);
      var h = Math.max(Hg, Math.floor(p / Ug));
      var l = Math.floor(a / Vh);
      var g = Math.max(au, Math.floor(a / Hj));
      for (var r = 0; r < k; r++) {
        for (var s = f - l; f + g > s; s++) {
          for (var t = j - q; t < j + h; t++) {
            if (x(s, t, "wtb", 0, 1) === sd) {
              o.push([s, t, 1]);
            }
          }
        }
        f += m;
        j += n;
      }
    }
    function a(a, b, c, d) {
      if (h(a, b) && (ᐃᐃⲆⲆ = Vw.ᐃᐃⲆⲆ, ᐃᐃⲆⲆ[a][b] === undefined && (ᐃᐃⲆⲆ[a][b] = {}), ᐃᐃⲆⲆ[a][b].r === undefined)) {
        var e = Hi;
        if (h(a - 1, b) && ᐃᐃⲆⲆ[a - au][b] !== undefined && Za !== ᐃᐃⲆⲆ[a - Oq][b].wtb) {
          e += 2;
        }
        if (h(a, b - 1) && ᐃᐃⲆⲆ[a][b - 1] !== Hl && j !== ᐃᐃⲆⲆ[a][b - zs].wtb) {
          e += Xl;
        }
        if (h(a, b + 1) && ᐃᐃⲆⲆ[a][b + pu] !== Jo && ᐃᐃⲆⲆ[a][b + pu].wtb !== Og) {
          e += 16;
        }
        if (h(a + 1, b) && cn !== ᐃᐃⲆⲆ[a + 1][b] && ᐃᐃⲆⲆ[a + 1][b].wtb !== cn) {
          e += 64;
        }
        if (h(a - 1, b - pu) && 8 + eh === (e & 8 + Vh) && ᐃᐃⲆⲆ[a - og][b - wt] !== undefined && ᐃᐃⲆⲆ[a - Xn][b - Oq].wtb !== undefined) {
          e += 1;
        }
        if (h(a - ie, b + ie) && 16 + Pn === (e & 18) && ᐃᐃⲆⲆ[a - pu][b + 1] !== rk && ᐃᐃⲆⲆ[a - 1][b + 1].wtb !== undefined) {
          e += 4;
        }
        if (h(a + $b, b - wt) && Xl + 64 === (e & 72) && ᐃᐃⲆⲆ[a + hb][b - Tl] !== Gs && ᐃᐃⲆⲆ[a + 1][b - 1].wtb !== undefined) {
          e += 32;
        }
        if (h(a + Wl, b + Te) && (e & 80) === dg + 64 && ᐃᐃⲆⲆ[a + Oq][b + 1] !== cg && Jo !== ᐃᐃⲆⲆ[a + 1][b + 1].wtb) {
          e += 128;
        }
        ᐃᐃⲆⲆ[a][b].r = {};
        ᐃᐃⲆⲆ[a][b].r.ΔᐃⲆⵠⵠΔⲆ = e;
        ᐃᐃⲆⲆ[a][b].r.ᐃᐃⲆⲆⵠⵠΔ = d;
        ᐃᐃⲆⲆ[a][b].r.ΔΔⵠΔ = cf.ⵠⲆⲆΔⵠ(c, b * Yq + 50, a * 100 + 50) - 400;
        ᐃᐃⲆⲆ[a][b].r.x = b * 100 + 50;
        ᐃᐃⲆⲆ[a][b].r.y = a * 100 + 50;
      }
    }
    function r(a) {
      var b = cf.Ⲇᐃᐃᐃ[a];
      x(-yr + Math.floor(b.y2 / Y), -mk + Math.floor(b.x2 / 100), "s", Ih, 0);
      x(fn + Math.floor(b.y1 / 100), -zg + Math.floor(b.x2 / 100), "s", 0, Lr);
      x(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", fl, eu);
      x(ll + Math.floor(b.y1 / 100), Gh + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function h(a, b) {
      return a >= 0 && b >= Yh && a < cf.ⲆⵠⲆⵠᐃ && b < cf.ⵠⲆᐃⲆᐃ;
    }
    function i(a, b) {
      (function (b, c) {
        var d = cf.Ⲇᐃᐃᐃ[c];
        for (var e = wj, f = Qs; b > e && f < 10000; f++) {
          var i = d.y1 + d.ΔⵠⲆ * cf.ΔΔΔⵠⲆ.get();
          var j = d.x1 + d.w * cf.ΔΔΔⵠⲆ.get();
          var k = Math.floor(i / No);
          var m = Math.floor(j / lh);
          if (cf.ⵠⲆⲆΔⵠ(c, m * 100 + 50, Yq * k + 50) >= 600) {
            for (var p = 1, q = k - 4; p === 1 && k + 4 >= q; q++) {
              for (var t = m - 4; Xn === p && t <= m + 4; t++) {
                if (cg !== Vw.ᐃᐃⲆⲆ[q][t]) {
                  p = Lr;
                }
              }
            }
            if (p !== Bb) {
              x(k, m, "la", e % 6, 0);
              e++;
            }
          }
        }
      })(b * 80, a);
      for (var c = 0; c < Tt; c++) {
        g(a, "s", c, Math.floor(b * yg));
      }
      for (c = 0; xb > c; c++) {
        g(a, "g", c, Math.floor(va * b));
      }
      for (c = 0; c < 3; c++) {
        g(a, "re", c, Math.max(pu, Math.floor(Te * b)), 0.2);
      }
      for (c = 0; c < fn; c++) {
        g(a, "a", c, Math.max(zg, Math.floor(b * Ob)));
      }
      r(a);
    }
    function g(f, e, i, k, n) {
      var p = cf.Ⲇᐃᐃᐃ[f];
      var q = Math.floor(p.x1 / _j);
      var r = Math.floor(p.y1 / 100);
      var t = Math.floor(p.w / Yq);
      var v = Math.floor(p.ΔⵠⲆ / lh);
      if (n !== j) {
        n = 1 - n;
        q += Math.floor(t * n / 2);
        r += Math.floor(n * v / It);
        t -= Math.floor(n * t);
        v -= Math.floor(n * v);
      }
      var w = Vw.ᐃᐃⲆⲆ;
      for (var g = 0, y = Lr; k > g && y <= 50000; y++) {
        var z = r + Math.floor(v * cf.ΔΔΔⵠⲆ.get());
        var A = q + Math.floor(cf.ΔΔΔⵠⲆ.get() * t);
        if (cf.ⵠⲆⲆΔⵠ(f, _j * A + 50, z * 100 + 50) >= 400 && ((B = w[z][A + wt]) === undefined || B[e] === T || B[e][i] === undefined) && ((B = w[z][A - 1]) === undefined || B[e] === undefined || B[e][i] === undefined) && ((B = w[z + 1][A]) === undefined || Lj === B[e] || B[e][i] === j) && ((B = w[z - 1][A]) === undefined || B[e] === undefined || er === B[e][i]) && ((B = w[z + ie][A - Wl]) === undefined || B[e] === Lj || B[e][i] === undefined) && ((B = w[z - 1][A + za]) === undefined || Gs === B[e] || B[e][i] === Hq)) {
          var B = w[z + 1][A + gs];
          if (lj === B || B[e] === undefined || B[e][i] === undefined) {
            B = w[z - 1][A - 1];
            if (Hq === B || B[e] === undefined || B[e][i] === undefined) {
              if (Og === w[z][A]) {
                x(z, A, e, i, pu);
                g++;
              }
            }
          }
        }
      }
    }
    function s(a) {
      for (var b = Rq; Wb > b; b++) {
        g(a, "s", b, v);
      }
      for (b = ig; ut > b; b++) {
        g(a, "a", b, 1);
      }
      for (b = 0; b < ub; b++) {
        g(a, "d", b, Gh);
      }
      r(a);
    }
    function x(a, b, c, d, e) {
      if (a >= Hi && Qs <= b && cf.ⲆⵠⲆⵠᐃ > a && b < cf.ⵠⲆᐃⲆᐃ) {
        ᐃᐃⲆⲆ = Vw.ᐃᐃⲆⲆ;
        if (ᐃᐃⲆⲆ[a][b] === Gs) {
          ᐃᐃⲆⲆ[a][b] = {};
        }
        if (ᐃᐃⲆⲆ[a][b][c] !== undefined) {
          return 0;
        } else {
          ᐃᐃⲆⲆ[a][b][c] = [];
          ᐃᐃⲆⲆ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === pu) {
            (function (a, b, c, d) {
              lb.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return zg;
        }
      }
    }
    function b(a, b) {
      for (var c = 0; As > c; c++) {
        g(a, "t", c, Math.floor(b * 80));
      }
      for (c = wj; c < 4; c++) {
        g(a, "b", c, Math.floor(b * 80));
      }
      for (c = wj; Hk > c; c++) {
        g(a, "s", c, Math.floor(b * 50));
      }
      var d = [];
      for (c = 0; Ql > c; c++) {
        o(a, d);
      }
      q(a, d);
      d = [];
      g(a, "p", Ih, Math.floor(b * 28));
      for (c = Bb; c < 3; c++) {
        g(a, "g", c, Math.floor(b * 7));
      }
      for (c = 0; c < 3; c++) {
        g(a, "d", c, Math.floor(rs * b));
      }
      for (c = 0; c < 3; c++) {
        g(a, "a", c, Math.floor(b * $b));
      }
      for (c = 0; c < 3; c++) {
        g(a, "m", c, Math.floor(b * 1));
      }
      g(a, "a", 0, Math.floor(b * zs));
      r(a);
    }
    function c(a, b) {
      for (var c = 0; c < 6; c++) {
        g(a, "t", c, Math.floor(ml * b));
      }
      for (c = 0; c < ba; c++) {
        g(a, "b", c, Math.floor(b * 20));
      }
      for (c = 0; ut > c; c++) {
        g(a, "s", c, Math.floor(b * 20));
      }
      var d = [];
      o(a, d);
      q(a, d);
      d = [];
      g(a, "p", 0, Math.floor(b * 24));
      for (c = 0; c < 3; c++) {
        g(a, "g", c, Math.floor(kq * b));
      }
      if (cf.mode === kw.ΔΔΔΔᐃ) {
        for (c = In; c < 3; c++) {
          g(a, "d", c, Math.floor(b * fn));
        }
        for (c = wg; c < 3; c++) {
          g(a, "a", c, Math.floor(H * b));
        }
      }
      r(a);
    }
    function m(a, b) {
      for (var c = ya; c < 3; c++) {
        g(a, "s", c, Math.floor(Pj * b));
      }
      for (c = mj; c < 3; c++) {
        g(a, "f", c, Math.floor(b * 24));
      }
      for (c = fl; c < 3; c++) {
        g(a, "d", c, Math.max($b, Math.floor(H * b)), 0.3);
      }
      for (c = Qs; c < I; c++) {
        g(a, "g", c, Math.floor(b * ji));
      }
      r(a);
    }
    function p(a, b) {
      for (var c = 0; c < 3; c++) {
        g(a, "s", c, Math.floor(b * yg));
      }
      for (c = wg; c < xb; c++) {
        g(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      g(a, "c", 0, Math.floor(b * 36));
      var d = [];
      (function (b, c) {
        var d = cf.Ⲇᐃᐃᐃ[b];
        var e = Math.floor(d.y1 / ah);
        var f = Math.floor(d.x1 / 100);
        var i = Math.floor(d.ΔⵠⲆ / Ks);
        var j = Math.floor(d.w / Ak);
        var a = e + Math.floor(i / 2);
        var k = f + Math.floor(j / 2);
        for (var h = 0; h < 3; h++) {
          x(m = Math.floor(a - 3 + U * cf.ΔΔΔⵠⲆ.get()), n = Math.floor(k - 3 + cf.ΔΔΔⵠⲆ.get() * 6), "plm", h, sd);
        }
        for (h = mj; h < 80; h++) {
          var m = Math.floor(a - 3 + cf.ΔΔΔⵠⲆ.get() * 6);
          var n = Math.floor(k - Tt + cf.ΔΔΔⵠⲆ.get() * 6);
          if (au === x(m, n, "wtb", In, 1)) {
            c.push([m, n, Da]);
          }
        }
      })(a, d);
      q(a, d);
      d = [];
    }
    function l(a, b, c) {
      if (a[b]) {
        for (Wk = 0; Wk < a[b].length; Wk++) {
          if (a[b][Wk]) {
            for (ⵠᐃΔΔ = 0; ⵠᐃΔΔ < a[b][Wk].length; ⵠᐃΔΔ++) {
              a[b][Wk][ⵠᐃΔΔ].ᐃⲆⲆ = c;
              a[b][Wk][ⵠᐃΔΔ].ᐃⲆΔ = false;
              a[b][Wk][ⵠᐃΔΔ].time = Qs;
              a[b][Wk][ⵠᐃΔΔ].angle = st;
            }
          }
        }
      }
    }
    this.mode = kw.ⵠᐃᐃⲆⲆ;
    this.ΔᐃⵠᐃⲆΔΔ = d;
    this.ⵠⵠΔⲆᐃ = 0;
    this.ⲆΔᐃⲆⵠⵠⲆ = Ck;
    this.ⵠΔΔⲆ = [];
    this.ⲆΔⲆ = [];
    this.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ] = [];
    this.ⲆΔⲆ[nw.ⵠⵠⵠⲆΔ] = [];
    this.ⲆΔⲆ[nw.ⵠⵠⲆⵠΔ] = [];
    this.ⲆΔⲆ[nw.ΔⵠΔⵠⲆ] = [];
    this.ⲆΔⲆ[nw.ⵠⵠⵠⵠⲆ] = [];
    this.ⲆΔⲆ[nw.ᐃΔᐃⵠΔ] = [];
    this.ⲆΔⲆ[nw.ΔΔⵠⲆⲆ] = [];
    this.ⲆΔⲆ[nw.ᐃⵠⵠᐃⵠ] = [];
    this.ⲆΔⲆ[nw.ⲆⵠΔᐃⵠ] = [];
    this.ⲆΔⲆ[nw.ⲆⲆΔⵠⲆ] = [];
    this.ⲆΔⲆ[nw.ⵠᐃⲆⲆΔ] = [];
    this.ⲆΔⲆ[nw.ⲆⲆᐃⲆⵠ] = [];
    this.ⲆΔⲆ[nw.ⲆⲆᐃⲆᐃ] = [];
    this.ⲆΔⲆ[nw.ⲆⵠⲆᐃⵠ] = [];
    this.ⲆΔⲆ[nw.ⲆᐃᐃⲆⵠ] = [];
    this.ⲆΔⲆ[nw.ⵠⵠⲆᐃΔ] = [];
    this.ⲆΔⲆ[nw.ᐃⲆⵠᐃΔ] = [];
    this.ⲆΔⲆ[nw.ⵠⲆⲆᐃΔ] = [];
    this.ⲆΔⲆ[nw.ᐃΔⲆⲆⲆ] = [];
    this.ⲆΔⲆ[nw.ᐃⵠΔⵠⵠ] = [];
    this.ⲆΔⲆ[nw.ᐃΔⲆⲆΔ] = [];
    this.ⲆΔⲆ[nw.ⲆⵠⵠΔⲆ] = [];
    this.ⲆΔⲆ[nw.ᐃⲆᐃⲆΔ] = [];
    this.ⲆΔⲆ[nw.ⵠᐃΔΔΔⵠΔ] = [];
    this.ⲆΔⲆ[nw.ⵠⲆⲆⵠΔⲆⵠ] = [];
    this.ⲆΔⲆ[nw.ⵠⲆⵠΔⲆⵠⵠ] = [];
    this.ⲆΔⲆ[nw.ⵠΔⵠΔⵠᐃⵠ] = [];
    this.ⲆΔⲆ[nw.ⵠΔΔⲆᐃ] = [];
    this.ⲆΔⲆ[nw.ⵠΔΔⵠΔᐃΔ] = [];
    this.ⲆΔⲆ[nw.Δⵠᐃᐃⵠ] = [];
    this.ⲆΔⲆ[nw.Δᐃᐃᐃᐃ] = [];
    this.ⲆΔⲆ[nw.ⵠΔᐃᐃᐃ] = [];
    this.ⲆΔⲆ[nw.ⵠΔᐃΔⵠ] = [];
    this.ⲆΔⲆ[nw.ⵠⲆΔⵠᐃ] = [];
    this.ⲆΔⲆ[nw.ΔᐃᐃⲆⲆ] = [];
    this.ⲆΔⲆ[nw.ᐃΔΔⵠΔ] = [];
    this.ⲆΔⲆ[nw.ⵠᐃΔⲆᐃ] = [];
    this.ⲆΔⲆ[nw.ⵠⵠΔⵠⲆ] = [];
    this.ⲆΔⲆ[nw.ⲆᐃⲆΔΔ] = [];
    this.ⲆΔⲆ[nw.Ⲇᐃⵠᐃⵠ] = [];
    this.ⲆΔⲆ[nw.ⲆⵠᐃΔΔ] = [];
    this.ⲆΔⲆ[nw.ᐃⲆⵠᐃᐃ] = [];
    this.ⲆΔⲆ[nw.ⵠⲆᐃᐃⲆ] = [];
    this.ⲆΔⲆ[nw.ⲆⲆⲆⲆⵠ] = [];
    this.ⲆΔⲆ[nw.ΔᐃⵠⲆⲆ] = [];
    this.ⲆΔⲆ[nw.ᐃᐃᐃᐃᐃ] = [];
    this.ⲆΔⲆ[nw.ⵠᐃⲆᐃⵠ] = [];
    this.ⲆΔⲆ[nw.ᐃΔⵠⵠΔ] = [];
    this.ⲆΔⲆ[nw.ᐃⵠⵠⲆᐃ] = [];
    this.ⲆΔⲆ[nw.ΔⲆⵠΔΔ] = [];
    this.ⲆΔⲆ[nw.ΔⵠⵠⲆᐃ] = [];
    this.ⲆΔⲆ[nw.ⵠΔᐃⲆΔ] = [];
    this.ⲆΔⲆ[nw.ᐃΔⵠⵠⵠ] = [];
    this.ⲆΔⲆ[nw.ⵠΔᐃΔΔ] = [];
    this.ⲆΔⲆ[nw.Δⵠᐃⵠᐃ] = [];
    this.ⲆΔⲆ[nw.Ⲇᐃⵠⵠⵠ] = [];
    this.ⲆΔⲆ[nw.ᐃⲆΔᐃⲆ] = [];
    this.ⲆΔⲆ[nw.ΔⵠⵠΔΔ] = [];
    this.ⲆΔⲆ[nw.ΔΔⲆᐃⲆ] = [];
    this.ⲆΔⲆ[nw.ΔⵠΔⲆΔ] = [];
    this.ⲆΔⲆ[nw.ⵠΔⲆⵠᐃ] = [];
    this.ⲆΔⲆ[nw.ᐃΔΔⵠᐃ] = [];
    this.ⲆΔⲆ[nw.ⲆᐃΔᐃⵠ] = [];
    this.ⲆΔⲆ[nw.ⲆⵠᐃᐃΔ] = [];
    this.ⲆΔⲆ[nw.ⵠᐃⵠᐃⵠ] = [];
    this.ⲆΔⲆ[nw.ᐃⲆⲆⲆⲆ] = [];
    this.ⲆΔⲆ[nw.ⲆⲆⵠⵠᐃ] = [];
    this.ⲆΔⲆ[nw.ΔⲆΔΔⲆ] = [];
    this.ⲆΔⲆ[nw.ⲆᐃⲆᐃⵠ] = [];
    this.ⲆΔⲆ[nw.ⲆᐃⵠΔΔ] = [];
    this.ⲆΔⲆ[nw.ΔΔΔⵠⵠ] = [];
    this.ⲆΔⲆ[nw.ⲆΔᐃΔΔ] = [];
    this.ⲆΔⲆ[nw.ΔⵠⵠΔⲆ] = [];
    this.ⲆΔⲆ[nw.ᐃⵠᐃᐃⵠ] = [];
    this.ⲆΔⲆ[nw.ᐃⵠΔΔΔ] = [];
    this.ⲆΔⲆ[nw.ⲆⵠΔᐃᐃ] = [];
    this.ⲆΔⲆ[nw.ⲆΔⲆⵠΔ] = [];
    this.ⲆΔⲆ[nw.ⲆⲆΔⲆⵠ] = [];
    this.ⲆΔⲆ[nw.ᐃⲆⲆᐃΔ] = [];
    this.ⲆΔⲆ[nw.ⵠΔⲆⲆΔ] = [];
    this.ⲆΔⲆ[nw.ⲆᐃΔⲆⵠ] = [];
    this.ⲆΔⲆ[nw.ⲆΔᐃⵠⲆ] = [];
    this.ⲆΔⲆ[nw.ΔⵠᐃⲆⵠ] = [];
    this.ⲆΔⲆ[nw.ΔⲆⵠⵠⵠ] = [];
    this.ⲆΔⲆ[nw.ⲆⲆⵠⵠΔ] = [];
    this.ⲆΔⲆ[nw.ⲆⵠⲆⵠⵠ] = [];
    this.ⲆΔⲆ[nw.ΔΔΔΔΔ] = [];
    this.ⲆΔⲆ[nw.ⵠᐃΔⲆⲆ] = [];
    this.Δⵠⵠᐃᐃ = [];
    this.ⵠⲆᐃⲆᐃ = 260;
    this.ⲆⵠⲆⵠᐃ = 260;
    this.ᐃⲆⲆⲆⲆᐃᐃ = Ph;
    this.ᐃᐃᐃⵠⵠᐃΔ = 100;
    this.w = this.ⵠⲆᐃⲆᐃ * this.ᐃⲆⲆⲆⲆᐃᐃ;
    this.ΔⵠⲆ = this.ᐃᐃᐃⵠⵠᐃΔ * this.ⲆⵠⲆⵠᐃ;
    this.ΔΔΔⵠⲆ = new Sk.ⵠᐃⲆΔᐃⲆⵠ();
    this.Ⲇᐃᐃᐃ = [];
    this.ᐃⵠⵠⵠ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, Oq, 0, 1, 1);
    this.transition = al;
    this.ⵠⲆⲆΔⲆ = [];
    this.ⵠΔΔⵠⲆ = ig;
    this.ᐃΔΔΔⵠⵠΔ = 1;
    this.ⵠⵠⲆΔⵠΔΔ = 2;
    this.ΔᐃΔΔⲆⲆⲆ = 3;
    this.ΔⲆΔⵠΔ = 4;
    this.ᐃⵠⵠᐃΔᐃΔ = 10;
    this.ⵠⲆⲆΔⲆ[this.ⵠΔΔⵠⲆ] = {
      ᐃⲆΔⲆⵠⲆΔ: 1,
      ⵠΔⲆ: [19, 58, 43],
      ⵠᐃᐃ: [4, 43, 48],
      ᐃΔⵠΔⵠ: ["#133a2b", "#042b30"]
    };
    this.ⵠⲆⲆΔⲆ[this.ΔⲆΔⵠΔ] = {
      ᐃⲆΔⲆⵠⲆΔ: 0,
      ⵠΔⲆ: [11, 106, 132],
      ⵠᐃᐃ: [9, 55, 63],
      ᐃΔⵠΔⵠ: ["#0B6A84", "#09373F"]
    };
    this.ⵠⲆⲆΔⲆ[this.ᐃΔΔΔⵠⵠΔ] = {
      ᐃⲆΔⲆⵠⲆΔ: wg,
      ⵠΔⲆ: [235, 242, 240],
      ⵠᐃᐃ: [19, 97, 103],
      ᐃΔⵠΔⵠ: ["#EBF2F0", "#136167"]
    };
    this.ⵠⲆⲆΔⲆ[this.ⵠⵠⲆΔⵠΔΔ] = {
      ⵠΔⲆ: [45, 32, 23],
      ᐃΔⵠΔⵠ: ["#2D2017", "#031C1E"],
      ᐃⲆΔⲆⵠⲆΔ: 0,
      ⵠᐃᐃ: [3, 28, 30]
    };
    this.ⵠⲆⲆΔⲆ[this.ΔᐃΔΔⲆⲆⲆ] = {
      ᐃⲆΔⲆⵠⲆΔ: wj,
      ⵠᐃᐃ: [24, 61, 60],
      ᐃΔⵠΔⵠ: ["#4A4A4A", "#183D3C"],
      ⵠΔⲆ: [74, 74, 74]
    };
    this.ⵠⲆⲆΔⲆ[this.ᐃⵠⵠᐃΔᐃΔ] = {
      ⵠᐃᐃ: [9, 61, 56],
      ᐃⲆΔⲆⵠⲆΔ: 0,
      ᐃΔⵠΔⵠ: ["#EBD8A6", "#093D38"],
      ⵠΔⲆ: [235, 216, 166]
    };
    this.ΔⵠΔᐃᐃⲆⵠ = function (a, b, c, d, e, f) {
      this.x1 = b * 100;
      this.y1 = c * No;
      this.w = d * Y;
      this.ΔⵠⲆ = Yq * e;
      this.x2 = (b + d) * 100;
      this.y2 = (c + e) * 100;
      this.ⵠⵠⵠ = a;
      this.ΔΔⲆ = f === Za ? 15 : f;
    };
    this.ⵠΔΔⲆΔ = -1000000;
    this.ⲆΔΔΔᐃ = this.ⵠΔΔⲆΔ;
    this.ΔΔⲆΔⲆ = this.ⵠΔΔⲆΔ;
    this.ⵠⲆΔᐃⵠ = this.ⵠΔΔⲆΔ;
    this.ΔΔᐃᐃΔⵠᐃ = this.ⵠΔΔⲆΔ;
    this.ΔⵠᐃⲆᐃⲆⵠ = this.ⵠΔΔⲆΔ;
    this.ΔΔᐃΔⵠ = this.ⵠΔΔⲆΔ;
    this.ᐃⲆΔᐃΔᐃΔⲆΔ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / sa);
      var f = Math.floor(c / Ph);
      b.ⲆΔΔΔᐃ = cf.ⵠΔΔⲆΔ;
      b.ΔΔⲆΔⲆ = cf.ⵠΔΔⲆΔ;
      b.ⵠⲆΔᐃⵠ = cf.ⵠΔΔⲆΔ;
      b.ΔΔᐃᐃΔⵠᐃ = cf.ⵠΔΔⲆΔ;
      b.ΔΔᐃΔⵠ = cf.ⵠΔΔⲆΔ;
      b.ⲆᐃⵠⵠⵠΔΔ = cf.ⵠΔΔⲆΔ;
      for (var g = 0; cf.ΔⲆΔⵠΔ !== cf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ; g++) {
        if (cf.ⵠΔΔⵠⲆ === cf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ) {
          var h = cf.ⵠⲆⲆΔⵠ(g, c, d);
          b.ΔΔᐃᐃΔⵠᐃ = Math.max(b.ΔΔᐃᐃΔⵠᐃ, h);
          if (h > 0 && mk === cf.ⲆⵠⵠᐃⵠⵠΔΔΔ(g, c, d)) {
            b.ⲆᐃⵠⵠⵠΔΔ = 1;
          }
        } else if (cf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ === cf.ᐃΔΔΔⵠⵠΔ) {
          b.ⲆΔΔΔᐃ = Math.max(b.ⲆΔΔΔᐃ, cf.ⵠⲆⲆΔⵠ(g, c, d));
        } else if (cf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ === cf.ᐃⵠⵠᐃΔᐃΔ) {
          b.ΔΔⲆΔⲆ = Math.max(b.ΔΔⲆΔⲆ, cf.ⵠⲆⲆΔⵠ(g, c, d));
        } else if (cf.ⵠⵠⲆΔⵠΔΔ === cf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ) {
          b.ⵠⲆΔᐃⵠ = Math.max(b.ⵠⲆΔᐃⵠ, cf.ⵠⲆⲆΔⵠ(g, c, d));
        } else if (cf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ === cf.ΔᐃΔΔⲆⲆⲆ) {
          b.ΔΔᐃΔⵠ = Math.max(b.ΔΔᐃΔⵠ, cf.ⵠⲆⲆΔⵠ(g, c, d));
        }
      }
      if (Vw.ᐃᐃⲆⲆ[e][f].iblk) {
        b.ⲆᐃⵠⵠⵠΔΔ = 1;
      }
      if (cf.ⲆΔΔⲆⵠⲆⲆᐃⵠ(f, e)) {
        b.ΔⵠᐃⲆᐃⲆⵠ = b.ⵠΔΔⲆΔ;
      } else if (Vw.ᐃᐃⲆⲆ[e][f].wtb || b.ⲆΔΔΔᐃ < 0 && Ih > b.ⵠⲆΔᐃⵠ && b.ΔΔᐃᐃΔⵠᐃ < 0 && In > b.ⲆᐃⵠⵠⵠΔΔ && mj > b.ΔΔᐃΔⵠ && b.ΔΔⲆΔⲆ < 0) {
        b.ΔⵠᐃⲆᐃⲆⵠ = Gh;
      } else {
        b.ΔⵠᐃⲆᐃⲆⵠ = b.ⵠΔΔⲆΔ;
      }
    };
    this.ⲆᐃⵠⲆΔᐃΔⲆⲆ = function (a, b) {
      cf.ⲆΔΔΔᐃ = cf.ⵠΔΔⲆΔ;
      cf.ΔΔⲆΔⲆ = cf.ⵠΔΔⲆΔ;
      cf.ⵠⲆΔᐃⵠ = cf.ⵠΔΔⲆΔ;
      cf.ΔΔᐃΔⵠ = cf.ⵠΔΔⲆΔ;
      cf.ΔΔᐃᐃΔⵠᐃ = cf.ⵠΔΔⲆΔ;
      for (var c = 0; cf.ΔⲆΔⵠΔ !== cf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ; c++) {
        if (cf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ === cf.ⵠΔΔⵠⲆ) {
          cf.ΔΔᐃᐃΔⵠᐃ = Math.max(cf.ΔΔᐃᐃΔⵠᐃ, cf.ⵠⲆⲆΔⵠ(c, a, b));
        } else if (cf.ᐃΔΔΔⵠⵠΔ === cf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ) {
          cf.ⲆΔΔΔᐃ = Math.max(cf.ⲆΔΔΔᐃ, cf.ⵠⲆⲆΔⵠ(c, a, b));
        } else if (cf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ === cf.ᐃⵠⵠᐃΔᐃΔ) {
          cf.ΔΔⲆΔⲆ = Math.max(cf.ΔΔⲆΔⲆ, cf.ⵠⲆⲆΔⵠ(c, a, b));
        } else if (cf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ === cf.ⵠⵠⲆΔⵠΔΔ) {
          cf.ⵠⲆΔᐃⵠ = Math.max(cf.ⵠⲆΔᐃⵠ, cf.ⵠⲆⲆΔⵠ(c, a, b));
        } else if (cf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ === cf.ΔᐃΔΔⲆⲆⲆ) {
          cf.ΔΔᐃΔⵠ = Math.max(cf.ΔΔᐃΔⵠ, cf.ⵠⲆⲆΔⵠ(c, a, b));
        }
      }
      if (cf.ⲆΔΔΔᐃ < 0 && cf.ΔΔᐃΔⵠ < 0 && cf.ΔΔᐃᐃΔⵠᐃ < 0 && cf.ΔΔᐃΔⵠ < 0 && cf.ΔΔⲆΔⲆ < 0) {
        cf.ΔⵠᐃⲆᐃⲆⵠ = Gh;
      } else {
        cf.ΔⵠᐃⲆᐃⲆⵠ = cf.ⵠΔΔⲆΔ;
      }
    };
    this.ⲆⵠⵠᐃⵠⵠΔΔΔ = function (a, b, c) {
      var d = cf.Ⲇᐃᐃᐃ[a];
      var e = Lr;
      ΔⵠⵠⲆ = d.x1 + 30 + (d.ΔΔⲆ & kw.ᐃᐃⲆᐃΔ ? 0 : 150);
      var f = b - ΔⵠⵠⲆ;
      if ((d.ΔΔⲆ & kw.ᐃᐃⲆᐃΔ) > 0 && f > ig && f < 320) {
        e = mk;
      }
      ΔᐃⲆⲆ = d.y1 + 250 + (d.ΔΔⲆ & kw.ⵠᐃⵠⵠⲆ ? ya : 150);
      f = c - ΔᐃⲆⲆ;
      if ((d.ΔΔⲆ & kw.ⵠᐃⵠⵠⲆ) > 0 && f > 0 && f < 320) {
        e = $b;
      }
      ⲆᐃᐃΔ = d.x2 + 80 + (d.ΔΔⲆ & kw.ⲆΔΔⵠΔ ? 0 : -200);
      f = ⲆᐃᐃΔ - b;
      if ((d.ΔΔⲆ & kw.ⲆΔΔⵠΔ) > wj && f > Bb && f < 320) {
        e = Hg;
      }
      ᐃⲆⲆⲆ = d.y2 - 200 + (ya === (d.ΔΔⲆ & kw.ΔᐃᐃⲆΔ) ? -200 : 0);
      f = ᐃⲆⲆⲆ - c;
      if ((d.ΔΔⲆ & kw.ΔᐃᐃⲆΔ) > 0 && f > 0 && f < 320) {
        e = Hg;
      }
      if (b >= ΔⵠⵠⲆ && ⲆᐃᐃΔ >= b && c >= ΔᐃⲆⲆ && c <= ᐃⲆⲆⲆ) {
        return e;
      } else {
        return Da;
      }
    };
    this.ⵠⲆⲆΔⵠ = function (a, b, c) {
      var d = cf.Ⲇᐃᐃᐃ[a];
      ΔⵠⵠⲆ = d.x1 + 30;
      ΔᐃⲆⲆ = d.y1 + 250;
      ⲆᐃᐃΔ = d.x2 + 80;
      ᐃⲆⲆⲆ = d.y2 - 200;
      if (ΔⵠⵠⲆ <= b && b <= ⲆᐃᐃΔ && ΔᐃⲆⲆ <= c && ᐃⲆⲆⲆ >= c) {
        return Math.min(b - ΔⵠⵠⲆ, ⲆᐃᐃΔ - b, c - ΔᐃⲆⲆ, ᐃⲆⲆⲆ - c);
      }
      var e = -1000000;
      if (b - ΔⵠⵠⲆ < 0) {
        e = Math.max(e, b - ΔⵠⵠⲆ);
      } else if (ⲆᐃᐃΔ - b < fl) {
        e = Math.max(e, ⲆᐃᐃΔ - b);
      }
      ⲆⵠⵠⵠᐃΔⵠ = -1000000;
      if (ΔᐃⲆⲆ > c || c > ᐃⲆⲆⲆ) {
        if (c - ΔᐃⲆⲆ < wg) {
          ⲆⵠⵠⵠᐃΔⵠ = Math.max(ⲆⵠⵠⵠᐃΔⵠ, c - ΔᐃⲆⲆ);
        } else {
          ⲆⵠⵠⵠᐃΔⵠ = Math.max(ⲆⵠⵠⵠᐃΔⵠ, ᐃⲆⲆⲆ - c);
        }
        e = e !== -1000000 && ⲆⵠⵠⵠᐃΔⵠ !== -1000000 ? Math.min(e, ⲆⵠⵠⵠᐃΔⵠ) : ⲆⵠⵠⵠᐃΔⵠ;
      }
      return e;
    };
    this.ⲆⲆᐃⲆᐃⲆⲆ = function (b, c, d) {
      var e = d;
      var f = c;
      x(e, f, "isl", b, gs);
      for (var g = 0; g < Mq; g++) {
        for (var h = fl; h < 3; h++) {
          x(e - h, f - g, "iblk", 0);
          x(e + h, f - g, "iblk", wj);
          x(e + h, f + g, "iblk", Mg);
          x(e - h, f + g, "iblk", 0);
        }
      }
      if (b === 0) {
        for (g = Bb; g < jk; g++) {
          x(e - g, f - nj, "iblk", Rq);
          x(e + g, f - Ls, "iblk", 0);
          x(e - g, f + ls, "iblk", os);
          x(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          x(e - nq, f + g, "iblk", eu);
          x(e + 3, f + g, "iblk", 0);
          x(e - eg, f - g, "iblk", 0);
          x(e + 3, f - g, "iblk", 0);
        }
        x(e - Ob, f - Ct, "iblk", Hi);
        x(e - ea, f - ll, "iblk", Qs);
        x(e + Hj, f + 4, "iblk", mj);
        x(e + 3, f + xb, "iblk", 0);
      } else if (b === og) {
        for (g = 0; g < 3; g++) {
          x(e - g, f - $l, "iblk", 0);
          x(e + g, f - ba, "iblk", Bb);
          x(e - g, f + 4, "iblk", 0);
          x(e + g, f + 4, "iblk", ig);
        }
        for (g = 0; Wg > g; g++) {
          x(e - 3, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", Mg);
          x(e - 3, f - g, "iblk", os);
          x(e + ci, f - g, "iblk", Hi);
        }
      } else if (b === eh) {
        for (g = Qs; g < Ug; g++) {
          x(e - g, f - ls, "iblk", Zj);
          x(e + g, f - ls, "iblk", 0);
          x(e - g, f + 4, "iblk", 0);
          x(e + g, f + ls, "iblk", st);
        }
        for (g = eu; sl > g; g++) {
          x(e - 3, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", ya);
          x(e - 3, f - g, "iblk", Zj);
          x(e + Lg, f - g, "iblk", fl);
        }
      }
    };
    this.ⵠᐃⲆΔᐃⵠᐃᐃⵠ = function (b) {
      for (var c = fl; cf.Ⲇᐃᐃᐃ.length > c && b > wg; c++) {
        var d = cf.Ⲇᐃᐃᐃ[c];
        if (d.ⵠⵠⵠ === cf.ΔⲆΔⵠΔ && d.w > 1800 && d.ΔⵠⲆ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / sa);
          var g = Math.floor((d.y1 + d.ΔⵠⲆ / Ul) / 100);
          cf.ⲆⲆᐃⲆᐃⲆⲆ(b % fn, f, g);
          for (var h = eu; h < ll; h++) {
            var j = g - 2 + Math.floor(cf.ΔΔΔⵠⲆ.get() * gl);
            var k = f - 3 + Math.floor(cf.ΔΔΔⵠⲆ.get() * 6);
            if (Vw.ᐃᐃⲆⲆ[j][k].s === undefined) {
              x(j, k, "plm", h);
            }
            j = g - Ob + Math.floor(Ls * cf.ΔΔΔⵠⲆ.get());
            k = f - ea + Math.floor(cf.ΔΔΔⵠⲆ.get() * 6);
            if (Vw.ᐃᐃⲆⲆ[j][k].plm === undefined) {
              x(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(cf.ΔΔΔⵠⲆ.get() * 4);
          k = f - Wb + Math.floor(cf.ΔΔΔⵠⲆ.get() * 6);
          if (Vw.ᐃᐃⲆⲆ[j][k].plm === undefined && Vw.ᐃᐃⲆⲆ[j][k].s === undefined) {
            x(j, k, "p", 0, Xn);
          }
          b--;
        }
      }
    };
    this.ⵠⵠⵠΔⵠⵠⲆΔⵠ = function (g) {
      cf.ΔΔΔⵠⲆ.ᐃΔΔΔᐃ(g);
      var j = Hi;
      while (mk) {
        if (++j > 10000) {
          return;
        }
        cf.Ⲇᐃᐃᐃ = [];
        if (In === cf.ⵠⵠΔⲆᐃ && (kw.ᐃᐃⲆΔⵠ === cf.mode || kw.ⵠΔᐃᐃⲆ === cf.mode || cf.mode === kw.ⵠᐃᐃⲆⲆ)) {
          cf.ⵠⵠΔⲆᐃ = Kr;
        }
        if (cf.mode === kw.ΔΔΔΔᐃ) {
          cf.Ⲇᐃᐃᐃ.push(new cf.ΔⵠΔᐃᐃⲆⵠ(cf.ⵠΔΔⵠⲆ, Rl, 2, 80, 80, 15));
        } else if (cf.mode === kw.ⲆⲆⲆⲆᐃ) {
          cf.Ⲇᐃᐃᐃ.push(new cf.ΔⵠΔᐃᐃⲆⵠ(cf.ⵠΔΔⵠⲆ, Ob, vg, 150, 150, 15));
        } else if (cf.ⵠⵠΔⲆᐃ !== os && Qs < cf.ⵠⵠΔⲆᐃ.length && Tr < cf.ⵠⵠΔⲆᐃ[eu].length) {
          for (var k = 0; k < cf.ⵠⵠΔⲆᐃ.length; k++) {
            if ((G = cf.ⵠⵠΔⲆᐃ[k])[wj] !== Qs) {
              break;
            }
            var o = kw.ⵠΔΔⵠⲆ;
            switch (G[1]) {
              case "FOREST":
                o = cf.ⵠΔΔⵠⲆ;
                break;
              case "WINTER":
                o = cf.ᐃΔΔΔⵠⵠΔ;
                break;
              case "DESERT":
                o = cf.ᐃⵠⵠᐃΔᐃΔ;
                break;
              case "LAVA":
                o = cf.ⵠⵠⲆΔⵠΔΔ;
                break;
              case "DRAGON":
                o = cf.ΔᐃΔΔⲆⲆⲆ;
            }
            cf.Ⲇᐃᐃᐃ.push(new cf.ΔⵠΔᐃᐃⲆⵠ(o, G[vg], G[Wb], G[tb], G[5], G[6], G[7]));
          }
        } else if (Mg !== cf.ⵠⵠΔⲆᐃ) {
          for (k = st; cf.ⵠⵠΔⲆᐃ.length > k; k++) {
            var t = cf.ⵠⵠΔⲆᐃ[k];
            o = kw.ⵠΔΔⵠⲆ;
            switch (t[ig]) {
              case "FOREST":
                o = cf.ⵠΔΔⵠⲆ;
                break;
              case "WINTER":
                o = cf.ᐃΔΔΔⵠⵠΔ;
                break;
              case "DESERT":
                o = cf.ᐃⵠⵠᐃΔᐃΔ;
                break;
              case "LAVA":
                o = cf.ⵠⵠⲆΔⵠΔΔ;
                break;
              case "DRAGON":
                o = cf.ΔᐃΔΔⲆⲆⲆ;
            }
            if (f(o, t[1], t[Vh], 0, (k + wt) * 10) === 0) {
              break;
            }
          }
          if (cf.ⵠⵠΔⲆᐃ.length !== k) {
            continue;
          }
        }
        break;
      }
      ⵠⵠⲆΔⵠΔⲆᐃΔ();
      var v = [];
      for (var h = 0; cf.ⲆⵠⲆⵠᐃ > h; h++) {
        v[h] = new Array(cf.ⵠⲆᐃⲆᐃ);
        for (var A = 0; A < cf.ⵠⲆᐃⲆᐃ; A++) {
          v[h][A] = Lr;
        }
      }
      for (h = 0; h < cf.Ⲇᐃᐃᐃ.length; h++) {
        for (var B = (t = cf.Ⲇᐃᐃᐃ[h]).x2 / 100, C = t.y2 / Y, D = t.x1 / 100; B >= D; D++) {
          for (var E = t.y1 / 100; E <= C; E++) {
            v[E][D] = gs;
          }
        }
      }
      for (E = 0; E < cf.ⲆⵠⲆⵠᐃ; E++) {
        for (D = os; cf.ⵠⲆᐃⲆᐃ > D; D++) {
          if (v[E][D] === 0) {
            e(v, D, E);
          }
        }
      }
      Vw = {
        w: cf.ⵠⲆᐃⲆᐃ,
        ΔⵠⲆ: cf.ⲆⵠⲆⵠᐃ,
        ᐃᐃⲆⲆ: []
      };
      for (h = 0; h < cf.ⲆⵠⲆⵠᐃ; h++) {
        Vw.ᐃᐃⲆⲆ[h] = [];
      }
      if (Mg !== cf.ⵠⵠΔⲆᐃ && cf.ⵠⵠΔⲆᐃ.length > 0 && cf.ⵠⵠΔⲆᐃ[0].length > ea) {
        for (k = ig; k < cf.ⵠⵠΔⲆᐃ.length; k++) {
          if ((G = cf.ⵠⵠΔⲆᐃ[k])[mk] === "isl") {
            cf.ⲆⲆᐃⲆᐃⲆⲆ(G[It], G[fn], G[4]);
          }
        }
      } else {
        cf.ⵠᐃⲆΔᐃⵠᐃᐃⵠ(cf.ⲆΔᐃⲆⵠⵠⲆ);
      }
      if (cf.ⵠⵠΔⲆᐃ !== 0 && cf.ⵠⵠΔⲆᐃ.length > 0 && cf.ⵠⵠΔⲆᐃ[0].length > 3) {
        var F = [];
        for (k = 0; cf.ⵠⵠΔⲆᐃ.length > k; k++) {
          var G;
          if ((G = cf.ⵠⵠΔⲆᐃ[k])[0] === 1) {
            if (G[1] === "r") {
              x(G[Js], G[It], "wtb", mj, Oq);
              F.push([G[3], G[2], G[Wg]]);
            } else {
              x(G[4], G[Lg], G[1], G[pq], G[5]);
            }
          }
        }
        q(fl, F);
        F = [];
      } else {
        for (h = 0; h < cf.Ⲇᐃᐃᐃ.length; h++) {
          t = cf.Ⲇᐃᐃᐃ[h];
          if (cf.mode === kw.ⲆⲆⲆⲆᐃ) {
            if (cf.ⵠΔΔⵠⲆ === t.ⵠⵠⵠ) {
              b(h, t.w / (Uh * Cn));
            }
          } else {
            if (cf.ⵠΔΔⵠⲆ === t.ⵠⵠⵠ) {
              c(h, t.w / 10000);
            }
            if (cf.ⵠⵠⲆΔⵠΔΔ === t.ⵠⵠⵠ) {
              i(h, t.w / (Ks * 100));
            }
            if (t.ⵠⵠⵠ === cf.ᐃΔΔΔⵠⵠΔ) {
              m(h, t.w / (No * 100));
            }
            if (cf.ᐃⵠⵠᐃΔᐃΔ === t.ⵠⵠⵠ) {
              p(h, t.w / (el * Uh));
            }
            if (t.ⵠⵠⵠ === cf.ΔᐃΔΔⲆⲆⲆ) {
              s(h);
            }
          }
        }
      }
      Nt("isl", 1);
      Nt("wtb", Dl);
      Nt("la", ie);
      Nt("c", mk);
      Nt("s", Xn);
      Nt("f", zg);
      Nt("p", zg);
      Nt("g", Xn);
      Nt("d", Gh);
      Nt("a", zs);
      Nt("re", 1);
      Nt("m", 1);
      lb = [];
      cf.ᐃⲆⲆᐃⵠᐃⵠⲆⵠ(Vw);
    };
    this.ⲆΔⵠⲆ = x;
    this.ᐃⲆⲆᐃⵠᐃⵠⲆⵠ = function (b) {
      for (var c = 0; c < this.ⲆⵠⲆⵠᐃ; c++) {
        for (var d = Qs; this.ⵠⲆᐃⲆᐃ > d; d++) {
          if (!b.ᐃᐃⲆⲆ[c]) {
            b.ᐃᐃⲆⲆ[c] = [];
          }
          if (b.ᐃᐃⲆⲆ[c][d]) {
            var e = b.ᐃᐃⲆⲆ[c][d];
            if (e.de && e.de.length > Bb) {
              for (var f = os; e.de.length > f; f++) {
                if (e.de[f] && e.de[f].length > 0) {
                  e.de = e.de[f][mj];
                  if (f >= 41 && f <= 49) {
                    e.de.scale = sl;
                    var g = Math.floor(Math.random() * 3 + 1);
                    e.de.ⲆⲆⵠ = [];
                    for (var h = Zj; g > h; h++) {
                      e.de.ⲆⲆⵠ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Vh * (Math.PI * Math.random()),
                        ⵠⲆⲆⲆ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (f >= 19 && f <= 26) {
                    e.de.scale = 3;
                    g = Math.floor(Math.random() * Wb + 1);
                    e.de.ⲆⲆⵠ = [];
                    for (h = mj; h < g; h++) {
                      e.de.ⲆⲆⵠ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ⵠⲆⲆⲆ: 19 + Math.floor(Math.random() * Hr)
                      });
                    }
                  } else if (f <= Qh || f >= 27 && f <= 40) {
                    e.de.angle = In;
                    e.de.scale = 2;
                    e.de.ⵠⲆⲆⲆ = f;
                  } else {
                    e.de.angle = Math.random() * Math.PI * Vg;
                    e.de.scale = Gh;
                    e.de.ⵠⲆⲆⲆ = f;
                  }
                }
              }
            }
            l(e, "p", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(C, hb, 1, 0, Ra, gn));
            l(e, "t", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, Te, Wl, 0, Ht, 10));
            l(e, "s", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(xo, ie, 1, 0, Ra, 10));
            l(e, "g", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(al, wt, 1, 0, jn, 10));
            l(e, "d", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, sd, 1, Zj, gn, 10));
            l(e, "b", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ei, za, 1, 0, gn, 10));
            l(e, "f", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ss, 1, 1, fl, 10, J));
            l(e, "sw", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10));
            l(e, "gw", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(al, 1, Tl, 0, jn, xt));
            l(e, "dw", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 1, 1, 0, Ch, 10));
            l(e, "a", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, Gh, 1, 0, Ra, kk));
            l(e, "cs", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Qg, Oq, 1, 0, 10, vr));
            l(e, "plm", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 1, 1, st, Yg, Yg));
            l(e, "re", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Jn, au, 1, Da, 10, 10));
            l(e, "c", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 1, za, st, Bo, Yg));
            l(e, "m", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, gs, 1, os, 10, te));
          } else {
            b.ᐃᐃⲆⲆ[c][d] = [];
          }
        }
      }
    };
    this.time = Xr.ⲆᐃΔ;
    this.ΔᐃᐃΔⲆ = {
      ᐃΔΔΔᐃ: 0,
      ᐃⵠᐃⲆΔ: Ih,
      now: ya,
      translate: {
        y: Zj,
        x: os
      }
    };
    this.ᐃⲆΔΔᐃⲆΔⲆⲆ = function () {
      this.Δⵠⵠᐃᐃ = [];
      this.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ] = [];
      this.ⲆΔⲆ[nw.ⵠⲆΔⵠᐃ] = [];
      this.ⲆΔⲆ[nw.ΔᐃᐃⲆⲆ] = [];
      this.ⲆΔⲆ[nw.ᐃΔΔⵠΔ] = [];
      this.ⲆΔⲆ[nw.ⵠᐃΔⲆᐃ] = [];
      this.ⲆΔⲆ[nw.ⵠⵠΔⵠⲆ] = [];
      this.ⲆΔⲆ[nw.ⲆᐃⲆΔΔ] = [];
      this.ⲆΔⲆ[nw.Ⲇᐃⵠᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ⲆⵠᐃΔΔ] = [];
      this.ⲆΔⲆ[nw.ᐃⲆⵠᐃᐃ] = [];
      this.ⲆΔⲆ[nw.ⵠⲆᐃᐃⲆ] = [];
      this.ⲆΔⲆ[nw.ⲆᐃⲆᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ⵠᐃⵠᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ⲆᐃⵠΔΔ] = [];
      this.ⲆΔⲆ[nw.ΔΔΔⵠⵠ] = [];
      this.ⲆΔⲆ[nw.ⲆΔᐃΔΔ] = [];
      this.ⲆΔⲆ[nw.ΔⵠⵠΔⲆ] = [];
      this.ⲆΔⲆ[nw.ᐃⵠᐃᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ᐃⵠΔΔΔ] = [];
      this.ⲆΔⲆ[nw.ⲆⵠΔᐃᐃ] = [];
      this.ⲆΔⲆ[nw.ⲆΔⲆⵠΔ] = [];
      this.ⲆΔⲆ[nw.ⲆⲆΔⲆⵠ] = [];
      this.ⲆΔⲆ[nw.ᐃⲆⲆᐃΔ] = [];
      this.ⲆΔⲆ[nw.ⵠΔⲆⲆΔ] = [];
      this.ⲆΔⲆ[nw.ⲆᐃΔⲆⵠ] = [];
      this.ⲆΔⲆ[nw.ⲆΔᐃⵠⲆ] = [];
      this.ⲆΔⲆ[nw.ΔⵠᐃⲆⵠ] = [];
      this.ⲆΔⲆ[nw.ΔⲆⵠⵠⵠ] = [];
      this.ⲆΔⲆ[nw.ⲆⲆⵠⵠΔ] = [];
      this.ⲆΔⲆ[nw.ⲆⵠⲆⵠⵠ] = [];
      this.ⲆΔⲆ[nw.ⲆⲆⲆⲆⵠ] = [];
      this.ⲆΔⲆ[nw.ΔᐃⵠⲆⲆ] = [];
      this.ⲆΔⲆ[nw.ᐃᐃᐃᐃᐃ] = [];
      this.ⲆΔⲆ[nw.ⵠᐃⲆᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ᐃΔⵠⵠΔ] = [];
      this.ⲆΔⲆ[nw.ᐃⵠⵠⲆᐃ] = [];
      this.ⲆΔⲆ[nw.ΔⲆⵠΔΔ] = [];
      this.ⲆΔⲆ[nw.ΔⵠⵠⲆᐃ] = [];
      this.ⲆΔⲆ[nw.ⵠΔᐃⲆΔ] = [];
      this.ⲆΔⲆ[nw.ᐃΔⵠⵠⵠ] = [];
      this.ⲆΔⲆ[nw.ⵠΔᐃΔΔ] = [];
      this.ⲆΔⲆ[nw.Δⵠᐃⵠᐃ] = [];
      this.ⲆΔⲆ[nw.Ⲇᐃⵠⵠⵠ] = [];
      this.ⲆΔⲆ[nw.ᐃⲆΔᐃⲆ] = [];
      this.ⲆΔⲆ[nw.ΔⵠⵠΔΔ] = [];
      this.ⲆΔⲆ[nw.ΔΔⲆᐃⲆ] = [];
      this.ⲆΔⲆ[nw.ΔⵠΔⲆΔ] = [];
      this.ⲆΔⲆ[nw.ⵠΔⲆⵠᐃ] = [];
      this.ⲆΔⲆ[nw.ᐃΔΔⵠᐃ] = [];
      this.ⲆΔⲆ[nw.ⲆᐃΔᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ⲆⵠᐃᐃΔ] = [];
      this.ⲆΔⲆ[nw.ⵠᐃⵠᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ᐃⲆⲆⲆⲆ] = [];
      this.ⲆΔⲆ[nw.ⲆⲆⵠⵠᐃ] = [];
      this.ⲆΔⲆ[nw.ΔⲆΔΔⲆ] = [];
      this.ⲆΔⲆ[nw.ⵠⵠⵠⲆΔ] = [];
      this.ⲆΔⲆ[nw.ⵠⵠⲆⵠΔ] = [];
      this.ⲆΔⲆ[nw.ΔⵠΔⵠⲆ] = [];
      this.ⲆΔⲆ[nw.ⵠⵠⵠⵠⲆ] = [];
      this.ⲆΔⲆ[nw.ᐃΔᐃⵠΔ] = [];
      this.ⲆΔⲆ[nw.ΔΔⵠⲆⲆ] = [];
      this.ⲆΔⲆ[nw.ᐃⵠⵠᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ⲆⵠΔᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ⲆⲆΔⵠⲆ] = [];
      this.ⲆΔⲆ[nw.ⵠᐃⲆⲆΔ] = [];
      this.ⲆΔⲆ[nw.ⲆⲆᐃⲆⵠ] = [];
      this.ⲆΔⲆ[nw.ⲆⲆᐃⲆᐃ] = [];
      this.ⲆΔⲆ[nw.ⲆⵠⲆᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ⲆᐃᐃⲆⵠ] = [];
      this.ⲆΔⲆ[nw.ⵠⵠⲆᐃΔ] = [];
      this.ⲆΔⲆ[nw.ᐃⲆⵠᐃΔ] = [];
      this.ⲆΔⲆ[nw.ⵠⲆⲆᐃΔ] = [];
      this.ⲆΔⲆ[nw.ᐃΔⲆⲆⲆ] = [];
      this.ⲆΔⲆ[nw.ⵠΔⵠᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ⵠⵠᐃΔⲆᐃΔ] = [];
      this.ⲆΔⲆ[nw.ᐃⵠΔⵠⵠ] = [];
      this.ⲆΔⲆ[nw.ᐃΔⲆⲆΔ] = [];
      this.ⲆΔⲆ[nw.ⲆⵠⵠΔⲆ] = [];
      this.ⲆΔⲆ[nw.ᐃⲆᐃⲆΔ] = [];
      this.ⲆΔⲆ[nw.ⵠᐃΔΔΔⵠΔ] = [];
      this.ⲆΔⲆ[nw.ⵠⲆⲆⵠΔⲆⵠ] = [];
      this.ⲆΔⲆ[nw.ⵠⲆⵠΔⲆⵠⵠ] = [];
      this.ⲆΔⲆ[nw.ⵠΔⵠΔⵠᐃⵠ] = [];
      this.ⲆΔⲆ[nw.ⵠΔΔⲆᐃ] = [];
      this.ⲆΔⲆ[nw.ⵠΔΔⵠΔᐃΔ] = [];
      this.ⲆΔⲆ[nw.Δⵠᐃᐃⵠ] = [];
      this.ⲆΔⲆ[nw.Δᐃᐃᐃᐃ] = [];
      this.ⲆΔⲆ[nw.ⵠΔᐃᐃᐃ] = [];
      this.ⲆΔⲆ[nw.ⵠΔᐃΔⵠ] = [];
      this.ⲆΔⲆ[nw.ΔΔΔΔΔ] = [];
      this.ⲆΔⲆ[nw.ⵠᐃΔⲆⲆ] = [];
    };
    this.ⵠᐃᐃⲆⵠⲆⵠⵠⲆ = function (a) {
      if (this.Δⵠⵠᐃᐃ[a]) {
        ΔΔΔΔ = this.Δⵠⵠᐃᐃ[a].type;
        this.Δⵠⵠᐃᐃ[a] = null;
        for (var b = this.ⲆΔⲆ[ΔΔΔΔ], c = Bb; b.length > c; c++) {
          if (a == b[c].ᐃⲆᐃᐃ) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⲆⲆⲆΔⵠⵠΔΔᐃ = function (a, b) {
      for (var c = Yh; this.ⲆΔⲆ[nw.ⵠᐃⵠᐃⵠ].length > c; c++) {
        var d = this.ⲆΔⲆ[nw.ⵠᐃⵠᐃⵠ][c];
        if (b === Math.floor(d.x / Ak) && a === Math.floor(d.y / ah)) {
          return zs;
        }
      }
      return Rq;
    };
    this.ⲆΔΔⲆⵠⲆⲆᐃⵠ = function (a, b) {
      for (var c = ig; this.ⲆΔⲆ[nw.ⲆᐃⲆᐃⵠ].length > c; c++) {
        var d = this.ⲆΔⲆ[nw.ⲆᐃⲆᐃⵠ][c];
        if (Math.floor(d.x / 100) == a && b == Math.floor(d.y / 100)) {
          return kh;
        }
      }
      return false;
    };
    this.Δᐃⵠⵠⵠ = function (j) {
      for (var e = 0; j.length > e; e++) {
        ᐃⵠⲆΔ = j[e];
        if (ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ != ᐃⵠⲆΔ.angle) {
          var k = Math.PI * Rl;
          ᐃⵠⲆΔ.angle = (ᐃⵠⲆΔ.angle + k) % k;
          ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ = (ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ + k) % k;
          if (ᐃⵠⲆΔ.angle != ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ) {
            var q = ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ - ᐃⵠⲆΔ.angle;
            var B = Math.abs(q);
            if (Math.PI < B) {
              B = Math.PI * 2 - B;
            }
            var D = _w * (B / Math.PI * 3 * kw.ⲆᐃⲆⵠⲆΔΔ);
            if (q > Math.PI) {
              ᐃⵠⲆΔ.angle -= D;
            } else if (-Math.PI > q) {
              ᐃⵠⲆΔ.angle += D;
            } else if (q < 0) {
              ᐃⵠⲆΔ.angle -= D;
            } else {
              ᐃⵠⲆΔ.angle += D;
            }
            ᐃⵠⲆΔ.angle = (ᐃⵠⲆΔ.angle + k) % k;
            if (Math.abs(ᐃⵠⲆΔ.angle - ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ) < D) {
              ᐃⵠⲆΔ.angle = ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ;
            }
          }
        }
        Math.floor(ᐃⵠⲆΔ.r.y / xh);
        Math.floor(ᐃⵠⲆΔ.r.x / _j);
        if (ᐃⵠⲆΔ.r.x != ᐃⵠⲆΔ.x || ᐃⵠⲆΔ.y != ᐃⵠⲆΔ.r.y) {
          if (ᐃⵠⲆΔ.action & hw.IDLE) {
            ᐃⵠⲆΔ.action -= hw.IDLE;
          }
          ᐃⵠⲆΔ.action |= hw.ⵠⵠⵠᐃΔΔⵠ;
          var E = ᐃⵠΔⲆ.ᐃᐃΔΔⲆⲆⲆ(ᐃⵠⲆΔ, ᐃⵠⲆΔ.r) + Math.PI;
          var F = _w * ᐃⵠⲆΔ.ᐃⵠⵠⵠⲆ;
          var G = ᐃⵠΔⲆ.ΔⵠⵠΔΔΔⲆ(F, E);
          if (ᐃⵠΔⲆ.ⵠΔⵠᐃⵠⵠⵠ(ᐃⵠΔⲆ.ⲆⲆΔⵠⲆΔⲆ(ᐃⵠⲆΔ, ᐃⵠⲆΔ.r)) > ᐃⵠΔⲆ.ⵠΔⵠᐃⵠⵠⵠ(G)) {
            ᐃⵠΔⲆ.ⲆΔΔᐃⲆⲆⵠ(ᐃⵠⲆΔ, G);
          } else {
            if (ᐃⵠⲆΔ.action & hw.ⵠⵠⵠᐃΔΔⵠ) {
              ᐃⵠⲆΔ.action -= hw.ⵠⵠⵠᐃΔΔⵠ;
            }
            ᐃⵠⲆΔ.action |= hw.IDLE;
            ᐃⵠΔⲆ.ΔⵠᐃΔⵠⲆΔ(ᐃⵠⲆΔ.r, ᐃⵠⲆΔ);
          }
        }
        if (ᐃⵠⲆΔ.ᐃⲆᐃⲆⵠ) {
          var H = ᐃⵠⲆΔ.bubbles;
          var I = H.length;
          if (Da === I || Xr.ᐃΔᐃᐃᐃⵠᐃ > I && H[I - Hg].ΔΔᐃΔᐃ < 0.95) {
            H.push({
              id: Math.floor(Math.random() * ΔΔ[540][fl].length),
              x: Math.floor(ᐃⵠⲆΔ.x + Math.random() * 80 - 40),
              y: Math.floor(ᐃⵠⲆΔ.y + Math.random() * 80 - 40),
              ΔΔᐃΔᐃ: 1
            });
          }
          for (var K = 0; K < I; K++) {
            H[K].ΔΔᐃΔᐃ = Math.max(st, H[K].ΔΔᐃΔᐃ - _w);
          }
          for (K = eu; K < I; K++) {
            if (H[K].ΔΔᐃΔᐃ === Lr) {
              H.splice(K, 1);
              break;
            }
          }
        }
        var L = In;
        if (ᐃⵠⲆΔ.ⵠⲆΔΔ && bf.ⵠⵠᐃⲆᐃ) {
          var M = ᐃⵠⲆΔ.ᐃΔᐃⵠⲆ;
          I = M.length;
          if (ᐃⵠⲆΔ.ΔⵠᐃⲆᐃⲆⵠ > 0 && ᐃⵠⲆΔ.ΔⲆᐃΔΔ !== 227 && ᐃⵠⲆΔ.ΔⲆᐃΔΔ !== 228 && ᐃⵠⲆΔ.ΔⲆᐃΔΔ !== 230 && ᐃⵠⲆΔ.ΔⲆᐃΔΔ !== 229 && ᐃⵠⲆΔ.ΔⲆᐃΔΔ !== 91 && !ᐃⵠⲆΔ.ᐃⲆᐃⲆⵠ && (L = sd, I === 0 || Xr.ⵠⵠᐃⲆⲆⵠⵠ < ᐃⵠΔⲆ.ΔΔⵠΔ(M[I - zs], ᐃⵠⲆΔ))) {
            var N = -ᐃⵠⲆΔ.angle;
            var O = Co * (Math.cos(N) * 45);
            var Q = Co * (Math.sin(N) * 45);
            M.push({
              x: ᐃⵠⲆΔ.x + O,
              y: ᐃⵠⲆΔ.y + Q,
              r: 8,
              alpha: 0.8
            });
            M.push({
              x: ᐃⵠⲆΔ.x - O,
              y: ᐃⵠⲆΔ.y - Q,
              r: Hr,
              alpha: 0.8
            });
            M.push({
              x: ᐃⵠⲆΔ.x,
              y: ᐃⵠⲆΔ.y,
              r: 24,
              alpha: $b
            });
          }
          for (K = fl; I > K; K++) {
            M[K].alpha = Math.max(0, M[K].alpha - _w / 2.2);
            M[K].r += Bs * _w;
          }
          if (M.length > 0 && M[0].alpha === 0) {
            M.splice(Qs, zg);
          }
          var R = ᐃⵠⲆΔ.ΔⵠⵠΔᐃ;
          I = R.length;
          var S = -1;
          var U = Math.max(Rq, Math.sign(ᐃⵠⲆΔ.ⲆᐃⵠⵠⵠΔΔ));
          var V = Math.max(0, Math.sign(ᐃⵠⲆΔ.ⲆΔΔΔᐃ));
          Math.max(0, Math.sign(ᐃⵠⲆΔ.ΔΔⲆΔⲆ));
          var W = Math.max(0, Math.sign(ᐃⵠⲆΔ.ⵠⲆΔᐃⵠ));
          var X = Math.max(0, Math.sign(ᐃⵠⲆΔ.ΔΔᐃΔⵠ));
          if (ᐃⵠⲆΔ.ⲆᐃⵠⵠⵠΔΔ > 0 || ᐃⵠⲆΔ.ΔΔⲆΔⲆ > 0) {
            S = 602;
          } else if (Bb < ᐃⵠⲆΔ.ΔΔᐃΔⵠ) {
            S = 680;
          } else if (mj < ᐃⵠⲆΔ.ⲆΔΔΔᐃ) {
            S = 475;
          } else if (ᐃⵠⲆΔ.ⵠⲆΔᐃⵠ > 0) {
            S = 476;
          }
          if (ᐃⵠⲆΔ.ΔⲆᐃΔΔ === 225 && (U | V | W | X) === ie) {
            S = 228;
            var Y = ᐃⵠⲆΔ.ⲆΔΔΔⵠ - Math.PI / Pn;
            var Z = Ab;
            var _ = 11;
            var aa = Xr.ⲆᐃⲆⵠⲆⵠⵠ;
          } else if (ᐃⵠⲆΔ.ΔⲆᐃΔΔ === 239 && (U | V | W | X) == 1) {
            S = 249;
            Y = ᐃⵠⲆΔ.ⲆΔΔΔⵠ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = Xr.ⲆᐃⲆⵠⲆⵠⵠ;
          } else if (ᐃⵠⲆΔ.ΔⲆᐃΔΔ === 226 && (U | V | W | X) == 1) {
            S = 234;
            Y = ᐃⵠⲆΔ.ⲆΔΔΔⵠ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = Ih + ba;
            aa = Xr.ⲆᐃⲆⵠⲆⵠⵠ * 0.9;
          } else {
            Y = ᐃⵠⲆΔ.angle;
            Z = sj;
            _ = 11;
            aa = Xr.ⲆᐃⲆⵠⲆⵠⵠ;
          }
          if (ᐃⵠⲆΔ.ΔⲆᐃΔΔ === 227 || ᐃⵠⲆΔ.ΔⲆᐃΔΔ === 228 || ᐃⵠⲆΔ.ΔⲆᐃΔΔ === 91 || ᐃⵠⲆΔ.ΔⲆᐃΔΔ === 229 || ᐃⵠⲆΔ.ΔⲆᐃΔΔ === 230 || ᐃⵠⲆΔ.ᐃⲆᐃⲆⵠ) ;else if (ᐃⵠⲆΔ.ΔⲆᐃΔΔ === 224) {
            if (I === 0 || ᐃⵠΔⲆ.ΔΔⵠΔ(R[I - 1], ᐃⵠⲆΔ) > Xr.ⲆᐃᐃᐃⲆⲆⵠ) {
              R.push({
                x: ᐃⵠⲆΔ.x,
                y: ᐃⵠⲆΔ.y,
                angle: ᐃⵠⲆΔ.ⲆΔΔΔⵠ,
                alpha: sd,
                id: 226
              });
            }
          } else if (S != -au && L === 0 && (I === 0 || ᐃⵠΔⲆ.ΔΔⵠΔ(R[I - 1], ᐃⵠⲆΔ) > aa)) {
            ᐃⵠⲆΔ.ᐃΔΔᐃⵠⵠⲆ++;
            if (Math.abs(ᐃⵠⲆΔ.x - ᐃⵠⲆΔ.r.x) > og && Math.abs(ᐃⵠⲆΔ.y - ᐃⵠⲆΔ.r.y) > 1) {
              if (ᐃⵠⲆΔ.x < ᐃⵠⲆΔ.r.x && ᐃⵠⲆΔ.y > ᐃⵠⲆΔ.r.y || ᐃⵠⲆΔ.r.x < ᐃⵠⲆΔ.x && ᐃⵠⲆΔ.r.y > ᐃⵠⲆΔ.y) {
                if (ᐃⵠⲆΔ.ᐃΔΔᐃⵠⵠⲆ % rs) {
                  O = -_ * Co;
                  Q = -_ * Co;
                } else {
                  Q = _ * Co;
                  O = Co * _;
                }
              } else if (ᐃⵠⲆΔ.ᐃΔΔᐃⵠⵠⲆ % Ob) {
                O = Co * _;
                Q = Co * -_;
              } else {
                Q = _ * Co;
                O = Co * -_;
              }
            } else if (ᐃⵠⲆΔ.ᐃΔΔᐃⵠⵠⲆ % Ob) {
              O = Co * (Z * Math.cos(Y));
              Q = Co * (Math.sin(Y) * Z);
            } else {
              O = Z * -Math.cos(Y) * Co;
              Q = -Math.sin(Y) * Z * Co;
            }
            R.push({
              x: ᐃⵠⲆΔ.x + O,
              y: ᐃⵠⲆΔ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (K = ig; I > K; K++) {
            if (R[K].id === 226) {
              R[K].alpha = Math.max(Hi, R[K].alpha - _w * 1.5);
            } else {
              R[K].alpha = Math.max(0, R[K].alpha - _w / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(eu, za);
          }
        }
      }
    };
    this.ᐃⲆΔ = function () {
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⵠⵠⲆⵠΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ΔⵠΔⵠⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⵠⵠⵠⵠⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ᐃΔᐃⵠΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ΔΔⵠⲆⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ᐃⵠⵠᐃⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⲆⵠΔᐃⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⲆⲆΔⵠⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⵠᐃⲆⲆΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⵠΔᐃΔⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⲆⵠⲆᐃⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⲆᐃᐃⲆⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⵠⵠⲆᐃΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ᐃⲆⵠᐃΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⵠⲆⲆᐃΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ᐃΔⲆⲆⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⵠΔⵠᐃⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⵠⵠᐃΔⲆᐃΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ᐃⵠΔⵠⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⲆⵠⵠΔⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⲆⲆᐃⲆⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ⲆⲆᐃⲆᐃ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[nw.ᐃΔⲆⲆΔ]);
    };
    this.ⲆᐃᐃⲆ = [];
    this.ⲆᐃᐃⲆ[620] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, Gh, 1.05, za, 0.008, 0.008);
    this.ⲆᐃᐃⲆ[619] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(gh, 1, 1.08, ie, 0.006, 0.006);
    this.ⲆᐃᐃⲆ[694] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Mh, Te, 1.02, 1, 0.008, 0.008);
    this.ⲆᐃᐃⲆ[695] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vt, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠᐃᐃⲆΔ = [];
    this.ⵠᐃᐃⲆΔ[0] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.1, Hg, 0, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[og] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Fh, 0.4, Xn, ig, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[eh] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(al, 0.3, Tl, Mg, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[Lg] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, 0.8, hb, Lr, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[4] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.3, 1, wg, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[5] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Mh, 0.8, $b, Rq, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[6] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ag, 0.5, 1, Qs, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[7] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9, hb, wg, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[On] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 0.6, 1, 0, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[Kt] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[10] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ag, 0.6, Wl, 0, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[11] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 0.4, 1, Rq, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[qs] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.8, zg, ig, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[13] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Jn, 0.2, 1, Da, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[14] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.7, 1, eu, 0.6, 0.6);
  }
  function sw() {
    this.ⲆⲆΔⵠᐃ = "";
    this.ΔⵠΔᐃ = Zj;
    this.ΔⵠΔᐃᐃ = Zj;
    this.ᐃⵠΔⲆᐃ = Ih;
    this.ⲆⵠᐃΔⲆⲆⲆ = Lr;
    this.ᐃΔⲆⵠⲆ = Lr;
    this.ⲆⲆⲆⵠΔ = 0;
    this.ᐃᐃⵠΔΔ = 0;
    this.level = 0;
    this.label = null;
    this.ᐃΔⲆⵠⲆΔⵠ = null;
    this.ⲆΔⵠⵠⵠⵠᐃ = null;
    this.ⲆᐃΔⵠⲆ = false;
    this.ⲆΔΔᐃⲆ = 0;
  }
  function tw() {
    Math.random();
    return "o";
  }
  function uw() {
    Math.random();
    return "t";
  }
  function vw() {
    Math.random();
    return "p";
  }
  function uw() {
    Math.random();
    return "t";
  }
  function ww() {
    Math.random();
    return "n";
  }
  function xw() {
    Math.random();
    return "a";
  }
  function yw() {
    Math.random();
    return "i";
  }
  function zw() {
    Math.random();
    return "g";
  }
  function xw() {
    Math.random();
    return "a";
  }
  function Aw() {
    Math.random();
    return "d";
  }
  function vw() {
    Math.random();
    return "p";
  }
  function Bw() {
    this.ᐃΔΔΔᐃ = function () {};
    this.ⲆᐃⵠᐃⲆ = {
      Ⲇⵠⵠᐃ: za,
      ⵠΔᐃⲆⲆ: Wl,
      open: Ag
    };
    this.ᐃⵠⵠΔⲆ = {
      Ⲇⵠⵠᐃ: 1,
      ⵠΔᐃⲆⲆ: -og,
      open: false
    };
    this.ᐃⵠᐃᐃ = {
      Ⲇⵠⵠᐃ: Hg,
      ΔⲆΔⲆᐃΔⵠ: 0,
      open: f,
      ΔⲆⵠⵠΔ: 0,
      ⵠΔᐃⲆⲆ: -1
    };
    this.ΔΔᐃⵠ = {
      ⲆⲆᐃΔⵠⲆᐃ: Yh,
      ΔⲆⲆᐃΔᐃᐃ: os,
      type: mj,
      ΔΔΔⵠΔⲆΔ: Ih,
      Ⲇⵠⵠᐃ: 1,
      ⵠΔᐃⲆⲆ: -Tl,
      open: false
    };
    this.ⲆᐃⵠΔ = {
      ⲆⲆᐃΔⵠⲆᐃ: 0,
      ⲆⲆⲆᐃΔⲆΔ: mj,
      ΔⲆⵠⵠΔ: Da,
      Ⲇⵠⵠᐃ: ie,
      ⵠΔᐃⲆⲆ: -za,
      open: false
    };
    this.sign = {
      ⵠΔᐃⲆⲆ: -og,
      open: Fh
    };
    this.ᐃⲆⵠⲆΔ = {
      open: C,
      Ⲇⵠⵠᐃ: 1,
      ⵠᐃⵠⲆ: eu,
      ⵠΔᐃⲆⲆ: -1
    };
    this.ᐃⲆᐃⲆⵠ = {
      enabled: false,
      ΔᐃⲆΔᐃ: -Xn,
      label: Jn,
      now: -Hg,
      ᐃⵠᐃⵠ: hv
    };
    this.ΔⲆΔΔ = {
      id: -Gh,
      ⵠᐃⵠⲆ: Zj,
      Ⲇⵠⵠᐃ: 1,
      ⵠΔᐃⲆⲆ: -zs,
      open: false,
      lock: false,
      locked: false,
      ΔⵠᐃΔⲆΔⵠ: false,
      ⵠⵠᐃᐃᐃⵠⵠ: false
    };
    this.ⲆᐃΔⵠⲆ = na;
    this.reconnect = {
      enabled: false,
      rotate: 0
    };
    this.key = ᐃⵠΔⲆ.ΔᐃΔⵠᐃᐃΔ("key", dj.location.href);
    var a = ᐃⵠΔⲆ.ΔᐃΔⵠᐃᐃΔ("egg", dj.location.href);
    if (a) {
      bf.ΔⵠΔᐃ = parseInt(a);
    }
    this.beta = dj.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : Lr;
    if (this.key && this.beta) {
      ⵠⵠΔΔ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ⵠⵠΔΔ.get("starve_beta");
    }
    this.Δⵠⵠⵠⵠ = ⵠⵠΔΔ.get("starve_token") ? ⵠⵠΔΔ.get("starve_token") : ᐃⵠΔⲆ.ΔⲆⲆⲆⵠⵠⵠ(jw.ΔΔΔⲆⲆᐃᐃΔⵠ);
    dj.baguette();
    var b = dj.kot2;
    function c() {
      this.seed = 1;
      this.ᐃⲆΔᐃⲆΔΔ = xj;
      this.ⵠΔΔⵠⵠⵠΔ = yr;
      this.ⲆⲆⵠᐃᐃᐃⵠᐃⵠ = 1;
      this.ⲆⲆⲆΔᐃᐃΔΔΔ = Vg;
      this.ⲆⵠⵠⲆΔⲆᐃᐃᐃ = 3;
      this.ⲆⵠⲆⲆᐃⵠᐃ = function (a) {
        this.seed = jk + Math.floor(Math.random() * kw.ⵠᐃΔⲆᐃ);
      };
      this.ᐃΔⵠΔⵠΔΔ = function (a) {
        this.ᐃⲆΔᐃⲆΔΔ = 2 + Math.floor(Math.random() * kw.ⵠᐃΔⲆᐃ);
      };
      this.ᐃᐃⲆⲆᐃⲆᐃ = function (a) {
        this.ⵠΔΔⵠⵠⵠΔ = Pn + Math.floor(kw.ⵠᐃΔⲆᐃ * Math.random());
      };
      this.ᐃΔΔⵠᐃⵠᐃᐃᐃ = function (a) {
        this.ⲆⲆⵠᐃᐃᐃⵠᐃⵠ = Rl + Math.floor(Math.random() * kw.ⵠᐃΔⲆᐃ);
      };
      this.ⲆᐃⵠⵠⲆΔΔⲆⵠ = function (a) {
        this.ⲆⲆⲆΔᐃᐃΔΔΔ = 2 + Math.floor(kw.ⵠᐃΔⲆᐃ * Math.random());
      };
      this.ⲆᐃΔⵠᐃᐃⵠⵠᐃ = function (a) {
        this.ⲆⵠⵠⲆΔⲆᐃᐃᐃ = 2 + Math.floor(kw.ⵠᐃΔⲆᐃ * Math.random());
      };
      this.ΔⲆⲆⵠⲆⵠΔ = function (c, d, e, f, i, j, k) {
        for (var a = ie; k > a;) {
          var m = e * a % ΔⵠΔⲆⵠⵠⵠ;
          var n = ᐃΔᐃⲆᐃⲆΔ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(f * n + i);
            if (a > j && a < k) {
              var p = Math.random() > 0.5 ? _w * -Pb : _w * 10;
              var q = d * o;
              this.ⲆᐃⲆⲆΔⵠᐃ[m] = Math.max(-kw.ⵠⲆⵠⵠᐃΔᐃ, Math.min(kw.ⵠⲆⵠⵠᐃΔᐃ, this.ⲆᐃⲆⲆΔⵠᐃ[m] + p));
              this.ᐃᐃΔⵠΔΔᐃ[m] = Math.max(-kw.ΔⲆΔΔⵠΔᐃ, Math.min(kw.ΔⲆΔΔⵠΔᐃ, this.ᐃᐃΔⵠΔΔᐃ[m] + p));
              if (q > 0) {
                ho.beginPath();
                ho.arc(a + Xw.ⵠᐃⲆ.x + this.ᐃᐃΔⵠΔΔᐃ[m], c + this.ⲆᐃⲆⲆΔⵠᐃ[m] - kw.ⵠⲆⵠⵠᐃΔᐃ * 0.8, q, In, It * Math.PI);
                if (cf.transition) {
                  var r = cf.time ? Tl - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
                  ho.fillStyle = Pv(83, 156, 160, 236, 247, 249, r);
                } else {
                  ho.fillStyle = Xr.ⵠᐃΔⵠᐃᐃⵠ[cf.time];
                }
                ho.fill();
              }
            }
            a += o * xj;
          }
        }
      };
      this.ΔᐃΔⲆⵠᐃΔ = function (c, d, e, f, i, j, k) {
        for (var a = zg; k > a;) {
          var m = a * e % ΔⵠΔⲆⵠⵠⵠ;
          var n = ᐃΔᐃⲆᐃⲆΔ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(f * n + i);
            if (a > j && a < k) {
              var p = Math.random() > 0.5 ? _w * -10 : xt * _w;
              var q = o * d;
              this.ᐃᐃΔΔΔ[m] = Math.max(-kw.ⵠⲆⵠⵠᐃΔᐃ, Math.min(kw.ⵠⲆⵠⵠᐃΔᐃ, this.ᐃᐃΔΔΔ[m] + p));
              this.ⵠⲆᐃⲆⵠ[m] = Math.max(-kw.ΔⲆΔΔⵠΔᐃ, Math.min(kw.ΔⲆΔΔⵠΔᐃ, this.ⵠⲆᐃⲆⵠ[m] + p));
              if (q > 0) {
                ho.beginPath();
                ho.arc(c + this.ᐃᐃΔΔΔ[m] - kw.ⵠⲆⵠⵠᐃΔᐃ * 0.8, a + Xw.ⵠᐃⲆ.y + this.ⵠⲆᐃⲆⵠ[m], q, 0, Math.PI * 2);
                if (cf.transition) {
                  var r = cf.time ? 1 - cf.ᐃⵠⵠⵠ.ΔΔⲆ : cf.ᐃⵠⵠⵠ.ΔΔⲆ;
                  ho.fillStyle = Pv(83, 156, 160, 236, 247, 249, r);
                } else {
                  ho.fillStyle = Xr.ⵠᐃΔⵠᐃᐃⵠ[cf.time];
                }
                ho.fill();
              }
            }
            a += o * xj;
          }
        }
      };
      this.ⵠΔⵠΔⵠᐃᐃⲆΔ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - kw.ⲆⲆⵠⲆΔ - e - 2) / kw.ΔⵠΔΔᐃΔⵠ) === 0) {
          this.ᐃᐃⲆⲆᐃⲆᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔⲆⲆⵠⲆⵠΔ(d, h, this.ⵠΔΔⵠⵠⵠΔ, Vq, bb, f, g);
        ho.globalAlpha = 1;
        if ((h = -(b - kw.ⲆᐃⵠⲆΔ - e + 500) / kw.ⵠⵠⲆᐃΔΔᐃ) === ig) {
          this.ⲆⵠⲆⲆᐃⵠᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔⲆⲆⵠⲆⵠΔ(b, h, this.seed, th, Lb, f, g);
        ho.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - kw.ⲆᐃᐃⵠⲆ - e + 698) / kw.ⲆⵠⵠΔᐃᐃⵠ) <= 0.01) {
            this.ᐃΔⵠΔⵠΔΔ();
          }
          ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
          this.ΔⲆⲆⵠⲆⵠΔ(c, h, this.ᐃⲆΔᐃⲆΔΔ, 6, Qa, f, g);
          ho.globalAlpha = Gh;
        }
      };
      this.ⲆⵠⲆⲆΔⲆᐃⵠⲆ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(-d + kw.ⲆⲆⵠⲆΔ + e + Ul) / kw.ΔⵠΔΔᐃΔⵠ;
        if (Qs === h) {
          this.ᐃᐃⲆⲆᐃⲆᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔⲆⲆⵠⲆⵠΔ(d, h, this.ⵠΔΔⵠⵠⵠΔ, 18, 16, f, g);
        ho.globalAlpha = Hg;
        if ((h = -(-b + kw.ⲆᐃⵠⲆΔ + e) / kw.ⵠⵠⲆᐃΔΔᐃ) === ya) {
          this.ⲆⵠⲆⲆᐃⵠᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔⲆⲆⵠⲆⵠΔ(b, h, this.seed, Kh, 10, f, g);
        ho.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + kw.ⲆᐃᐃⵠⲆ + e) / kw.ⲆⵠⵠΔᐃᐃⵠ) <= 0.01) {
            this.ᐃΔⵠΔⵠΔΔ();
          }
          ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
          this.ΔⲆⲆⵠⲆⵠΔ(c, h, this.ᐃⲆΔᐃⲆΔΔ, Rs, 6, f, g);
          ho.globalAlpha = zg;
        }
      };
      this.ⲆΔⵠΔΔΔⵠΔⲆ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + kw.ⲆⲆⵠⲆΔ + e + xj) / kw.ΔⵠΔΔᐃΔⵠ) === 0) {
          this.ᐃᐃⲆⲆᐃⲆᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔᐃΔⲆⵠᐃΔ(d, h, this.ⵠΔΔⵠⵠⵠΔ, 18, G, f, g);
        ho.globalAlpha = ie;
        if ((h = -(-b + kw.ⲆᐃⵠⲆΔ + e) / kw.ⵠⵠⲆᐃΔΔᐃ) === 0) {
          this.ⲆⵠⲆⲆᐃⵠᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔᐃΔⲆⵠᐃΔ(b, h, this.seed, La, 10, f, g);
        ho.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + kw.ⲆᐃᐃⵠⲆ + e) / kw.ⲆⵠⵠΔᐃᐃⵠ) <= 0.01) {
            this.ᐃΔⵠΔⵠΔΔ();
          }
          ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
          this.ΔᐃΔⲆⵠᐃΔ(c, h, this.ᐃⲆΔᐃⲆΔΔ, 6, Ro, f, g);
          ho.globalAlpha = Hg;
        }
      };
      this.ΔᐃⲆⵠⲆⲆⵠⵠΔ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - kw.ⲆⲆⵠⲆΔ - e - pq) / kw.ΔⵠΔΔᐃΔⵠ) === 0) {
          this.ᐃᐃⲆⲆᐃⲆᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔᐃΔⲆⵠᐃΔ(d, h, this.ⵠΔΔⵠⵠⵠΔ, Bl, 16, f, g);
        ho.globalAlpha = $b;
        if ((h = -(b - kw.ⲆᐃⵠⲆΔ - e + 500) / kw.ⵠⵠⲆᐃΔΔᐃ) === ya) {
          this.ⲆⵠⲆⲆᐃⵠᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔᐃΔⲆⵠᐃΔ(b, h, this.seed, qs, Ch, f, g);
        ho.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - kw.ⲆᐃᐃⵠⲆ - e + 698) / kw.ⲆⵠⵠΔᐃᐃⵠ) <= 0.01) {
            this.ᐃΔⵠΔⵠΔΔ();
          }
          ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
          this.ΔᐃΔⲆⵠᐃΔ(c, h, this.ᐃⲆΔᐃⲆΔΔ, Qa, ji, f, g);
          ho.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ⵠⵠⲆⵠΔΔΔ, 0, 10, kw.ΔᐃⲆᐃⲆ, kw.ΔᐃⲆᐃⲆ, kw.ΔⵠΔΔᐃΔⵠ),
        ⵠᐃΔΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ΔΔⵠᐃⵠⵠᐃ, Bb, 10, kw.ΔⵠΔΔᐃΔⵠ, kw.ΔⵠΔΔᐃΔⵠ, kw.ΔᐃⲆᐃⲆ)
      };
      this.w2 = {
        r: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ⲆⵠⵠⵠⵠᐃΔ, mj, J, kw.ⲆⵠΔᐃⲆⲆΔ, kw.ⲆⵠΔᐃⲆⲆΔ, kw.ⵠⵠⲆᐃΔΔᐃ),
        ⵠᐃΔΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ, 0, xt, kw.ⵠⵠⲆᐃΔΔᐃ, kw.ⵠⵠⲆᐃΔΔᐃ, kw.ⲆⵠΔᐃⲆⲆΔ)
      };
      this.w3 = {
        r: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ΔⵠΔⵠᐃΔⲆ, Hi, Ht, kw.ⵠⵠΔⲆⵠΔΔ, kw.ⵠⵠΔⲆⵠΔΔ, kw.ⲆⵠⵠΔᐃᐃⵠ),
        ⵠᐃΔΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ, 0, 10, kw.ⲆⵠⵠΔᐃᐃⵠ, kw.ⲆⵠⵠΔᐃᐃⵠ, kw.ⵠⵠΔⲆⵠΔΔ)
      };
      this.ⲆᐃᐃⲆᐃⲆᐃⲆΔ = function (a) {
        if (a.r.Ⲇⵠⵠᐃᐃ === a.r.x) {
          if (a.ⵠᐃΔΔ.Ⲇⵠⵠᐃᐃ === a.ⵠᐃΔΔ.x) {
            return a.r;
          } else {
            return a.ⵠᐃΔΔ;
          }
        } else {
          return a.r;
        }
      };
      this.ⵠⵠⵠ = function (a) {
        var b;
        if (a.r.x === a.r.Ⲇⵠⵠᐃᐃ) {
          if (a.ⵠᐃΔΔ.Ⲇⵠⵠᐃᐃ === a.ⵠᐃΔΔ.x) {
            a.r.ⵠΔⵠᐃⵠᐃᐃ();
            a.ⵠᐃΔΔ.ⵠΔⵠᐃⵠᐃᐃ();
            b = a.r;
          } else {
            b = a.ⵠᐃΔΔ;
          }
        } else {
          b = a.r;
        }
        b.ⵠⵠᐃⲆⵠⵠⵠ(b.Ⲇⵠⵠᐃᐃ);
        return b;
      };
      this.ᐃᐃΔΔΔ = [];
      this.ⵠⲆᐃⲆⵠ = [];
      this.ⲆᐃⲆⲆΔⵠᐃ = [];
      this.ᐃᐃΔⵠΔΔᐃ = [];
      this.ᐃΔΔΔᐃ = function () {
        for (var a = mj; ΔⵠΔⲆⵠⵠⵠ > a; a++) {
          this.ᐃᐃΔΔΔ[a] = Math.floor(ᐃΔᐃⲆᐃⲆΔ[a] * kw.ⵠⲆⵠⵠᐃΔᐃ);
          this.ⵠⲆᐃⲆⵠ[a] = Math.floor(kw.ΔⲆΔΔⵠΔᐃ * ᐃΔᐃⲆᐃⲆΔ[a]);
          this.ⲆᐃⲆⲆΔⵠᐃ[a] = Math.floor(ᐃΔᐃⲆᐃⲆΔ[a] * kw.ⵠⲆⵠⵠᐃΔᐃ);
          this.ᐃᐃΔⵠΔΔᐃ[a] = Math.floor(kw.ΔⲆΔΔⵠΔᐃ * ᐃΔᐃⲆᐃⲆΔ[a]);
        }
        this.w1.r.x = this.w1.r.Ⲇⵠⵠᐃᐃ;
        this.w2.r.ⵠΔΔⲆⲆ = 3.5;
        this.w3.r.ⵠΔΔⲆⲆ = xj;
      };
      this.ᐃΔΔΔᐃ();
    }
    this.Δⵠⵠⵠⵠ = b.substring(Lr, 6) + this.Δⵠⵠⵠⵠ.substring(6);
    this.ᐃᐃᐃΔⵠⵠΔ = ⵠⵠΔΔ.get("starve_token_id") ? ⵠⵠΔΔ.get("starve_token_id") : "";
    this.id = Lr;
    this.ᐃⲆᐃᐃ = 0;
    this.ⵠΔⲆ = 0;
    this.ⵠⲆⵠⲆⲆⲆⲆ = {
      ⲆᐃⲆΔᐃⲆⲆ: mj,
      ⵠᐃⵠΔᐃ: Yh,
      ⲆΔΔᐃⲆ: 0,
      ⵠⵠⲆᐃⲆⵠⲆ: ""
    };
    this.ⵠⲆⵠⵠⲆΔⲆⵠⵠ = {
      connected: st,
      ᐃᐃᐃΔᐃᐃᐃ: new Date().getTime()
    };
    this.ᐃΔⲆⲆⵠ = [];
    this.ᐃⲆⵠⲆⵠⵠᐃ = function (a) {
      for (var b = wg; this.ᐃΔⲆⲆⵠ.length > b; b++) {
        if (a == this.ᐃΔⲆⲆⵠ[b]) {
          return Kj;
        }
      }
      return _h;
    };
    this.ⵠΔⲆⵠΔ = {
      ΔᐃⲆΔᐃ: 0,
      time: 0,
      value: st,
      open: vj,
      ᐃⵠᐃⵠ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ΔᐃⲆΔᐃ) / 1000);
          if (this.time < 60) {
            Zw.ⵠΔⲆⵠΔ.button.ᐃⵠᐃⵠ(ho);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = Ag;
          }
        }
      }
    };
    this.ΔⵠⲆᐃᐃ = {
      id: -1,
      Ⲇⵠⵠᐃ: -hb,
      lock: Mg,
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, Wl, 0, 1 / 30, 1),
      wait: Jn
    };
    this.ⲆᐃᐃⲆΔ = {
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ei, Lr, au, 0, wt / Zg, 1),
      wait: false
    };
    this.ᐃΔᐃⲆⵠ = {
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 0, wt, 0, 1, gs),
      wait: false
    };
    this.ⲆᐃᐃᐃⲆ = {
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vt, Qs, hb, 0, Oq / lg, zs),
      wait: false
    };
    this.ⵠᐃⲆ = new ᐃⵠΔⲆ.ᐃΔⵠⵠᐃΔⲆ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, 0, 0.4, 0, 0, bo, lq, bo, lq);
    this.ⵠᐃⲆ.ΔᐃⲆΔᐃ = wg;
    this.ⵠᐃⲆ.ⵠΔΔΔΔⲆⵠ = 0;
    this.ⵠᐃⲆ.ᐃⲆΔ = function () {
      if (Lr < this.ⵠΔΔΔΔⲆⵠ) {
        this.ⵠΔΔΔΔⲆⵠ -= _w;
      } else {
        var a = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
        if (a) {
          this.ΔᐃⲆΔᐃ = Qs;
          var b = Math.max(Math.min(bo - a.x, -xq), -cf.w + pq + lo);
          var c = Math.max(Math.min(lq - a.y, -Lt), -cf.ΔⵠⲆ + eh + jq);
          this.ⵠⵠᐃⲆⵠⵠⵠ({
            x: b,
            y: c
          });
        } else {
          this.ΔᐃⲆΔᐃ += _w;
          if (this.ΔᐃⲆΔᐃ > 3) {
            this.ΔᐃⲆΔᐃ = 0;
            if (!Xw.reconnect.enabled) {
              Ⲇⵠᐃⵠ.ⵠⵠΔΔΔᐃΔΔᐃ();
            }
          }
        }
      }
    };
    this.ⵠᐃⲆ.w = screen.width;
    this.ⵠᐃⲆ.ΔⵠⲆ = screen.height;
    this.ⵠᐃⲆ.ⵠᐃⵠᐃᐃⲆⵠ = this.ⵠᐃⲆ.w;
    this.ⵠᐃⲆ.ᐃᐃᐃᐃᐃΔᐃ = this.ⵠᐃⲆ.ΔⵠⲆ;
    this.ⵠᐃⲆ.rx = Lr;
    this.ⵠᐃⲆ.ry = 0;
    this.ⵠᐃⲆ.ΔᐃⵠᐃΔⵠᐃⲆⵠ = ya;
    this.ⵠᐃⲆ.ΔⲆᐃⲆⵠⵠⵠⵠⲆ = ig;
    this.ⵠᐃⲆ.ⲆⲆΔᐃⵠ = function (a, b) {
      this.x = -Math.min(Math.max(-cf.ᐃⲆⲆⲆⲆᐃᐃ * pq, a - cf.ᐃⲆⲆⲆⲆᐃᐃ - this.ⵠᐃⵠᐃᐃⲆⵠ / 2), cf.w - this.ⵠᐃⵠᐃᐃⲆⵠ);
      this.y = -Math.min(Math.max(-cf.ᐃᐃᐃⵠⵠᐃΔ * rs, b - (cf.ᐃᐃᐃⵠⵠᐃΔ + this.ᐃᐃᐃᐃᐃΔᐃ) / 2), cf.ΔⵠⲆ - this.ᐃᐃᐃᐃᐃΔᐃ + cf.ᐃᐃᐃⵠⵠᐃΔ);
      this.Ⲇⵠⵠᐃᐃ = this.x;
      this.ᐃⲆⲆⲆΔᐃⵠ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ⲆⲆᐃⲆΔᐃΔ: mj,
      ΔᐃⵠΔ: Bb,
      attack: os,
      ᐃⲆΔ: function () {
        var a = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
        if (a) {
          var b = {
            x: Xw.ⵠᐃⲆ.x + a.x,
            y: Xw.ⵠᐃⲆ.y + a.y
          };
        } else {
          b = mq;
        }
        var c = ᐃⵠΔⲆ.ᐃᐃΔΔⲆⲆⲆ(zf.ⲆⲆΔⲆ, b);
        var d = nt;
        this.ΔᐃⵠΔ += _w;
        if (!zf.state) {
          if (a && !(a.action & hw.ⲆⵠⵠΔⲆᐃⲆ) && this.ΔᐃⵠΔ > jw.ⲆⵠⵠΔⲆᐃⲆ) {
            this.attack = 1;
            d = true;
            this.ΔᐃⵠΔ = 0;
            Ⲇⵠᐃⵠ.ⲆⵠⵠᐃᐃΔᐃⲆΔ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ᐃⲆΔⵠⵠΔⵠ = c;
        }
        if (!d) {
          this.timeout += _w;
          if (this.timeout > jw.ⲆᐃⲆⵠⲆΔΔ) {
            this.timeout = ya;
            if (Math.abs(this.angle - c) > 0.005) {
              Ⲇⵠᐃⵠ.ΔⵠᐃΔⵠᐃⵠⵠⲆ(c);
              this.angle = c;
            }
          }
        }
        if (!Xw.Ⲇᐃᐃᐃⵠ.open && !Xw.ⲆΔⵠⲆⵠ.open) {
          var e = 0;
          if (ff.ⵠᐃⵠⲆⲆⵠᐃ()) {
            e |= zg;
          }
          if (ff.ᐃΔⲆᐃᐃⲆΔ()) {
            e |= 2;
          }
          if (ff.ΔΔΔⵠΔⲆⲆ()) {
            e |= tb;
          }
          if (ff.ⲆᐃΔΔⲆΔⵠ()) {
            e |= zh;
          }
          if (this.ⲆⲆᐃⲆΔᐃΔ != e) {
            Ⲇⵠᐃⵠ.ᐃᐃⲆᐃⲆⵠᐃᐃⵠ(e);
          }
          this.ⲆⲆᐃⲆΔᐃΔ = e;
        }
      }
    };
    this.ⲆΔᐃΔ = {
      c: 1,
      ⵠᐃΔΔ: zs,
      ΔⵠⲆ: 1,
      ⵠⵠⵠ: za,
      ⵠᐃⵠ: au,
      ΔⵠⲆΔᐃⲆΔ: 1,
      ᐃⲆⵠΔⲆΔΔ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Yl, 0, 1, 0, 3, Lg),
      ᐃⵠᐃⵠⲆᐃⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(kh, 0, Oq, wj, Lt, Ob),
      ⲆⲆᐃⵠᐃⵠⲆ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Kj, Bb, za, 0, ci, Lg),
      ΔΔᐃⲆᐃⲆⲆ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(true, 0, 1, Zj, Wb, qu),
      ⲆⲆⲆΔⲆⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(y, Hi, Hg, 0, 3, 3),
      ⲆᐃᐃᐃⲆⵠᐃ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(true, 0, 1, 0, 3, qo),
      ⲆⲆⵠⲆⵠ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, 0, Tl, Mg, st, pu),
      ΔΔᐃΔᐃ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, eu, sd, 0, wg, 1),
      ⵠⲆΔΔΔᐃΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, 0, 1, ya, 0, ie),
      ⲆᐃⵠΔΔⲆΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, 0, zg, 0, fl, Hg),
      ⲆᐃΔⵠΔⵠΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, Yh, Tl, Hi, Bb, 1),
      ΔⲆⲆΔⵠ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, 0, Oq, 0, 0, sd),
      ᐃⲆΔ: function () {
        this.ᐃⲆⵠΔⲆΔΔ.ᐃⲆΔ();
        this.ᐃⵠᐃⵠⲆᐃⵠ.ᐃⲆΔ();
        this.ⲆⲆᐃⵠᐃⵠⲆ.ᐃⲆΔ();
        this.ΔΔᐃⲆᐃⲆⲆ.ᐃⲆΔ();
        this.ⲆⲆⲆΔⲆⵠⵠ.ᐃⲆΔ();
        this.ⲆᐃᐃᐃⲆⵠᐃ.ᐃⲆΔ();
        this.ⲆⲆⵠⲆⵠ.ⵠⵠᐃⲆⵠⵠⵠ(this.c);
        this.ΔΔᐃΔᐃ.ⵠⵠᐃⲆⵠⵠⵠ(this.ⵠᐃΔΔ);
        this.ⵠⲆΔΔΔᐃΔ.ⵠⵠᐃⲆⵠⵠⵠ(this.ΔⵠⲆ);
        this.ⲆᐃⵠΔΔⲆΔ.ⵠⵠᐃⲆⵠⵠⵠ(this.ⵠⵠⵠ);
        this.ⲆᐃΔⵠΔⵠΔ.ⵠⵠᐃⲆⵠⵠⵠ(this.ⵠᐃⵠ);
        this.ΔⲆⲆΔⵠ.ⵠⵠᐃⲆⵠⵠⵠ(this.ΔⵠⲆΔᐃⲆΔ);
      }
    };
    this.ⲆⲆΔΔΔᐃᐃ = Fh;
    this.ᐃⲆⲆΔΔᐃᐃ = false;
    this.ⲆᐃⲆⵠᐃ = Mh;
    this.ΔΔⵠⵠⲆᐃᐃ = false;
    this.ᐃΔᐃⵠ = {
      max: kw.ⲆᐃΔᐃⵠⲆⵠ,
      ᐃᐃΔⲆⲆΔΔ: Da,
      ᐃⵠΔⲆᐃ: In,
      ⲆΔΔ: [],
      ⲆᐃⲆⲆΔ: [],
      ΔΔᐃⵠⲆⵠⵠ: function (a, b) {
        if (a === Gh) {
          this.ᐃⵠΔⲆᐃ = kw.ᐃⲆΔⲆᐃⵠⵠⲆΔ;
        }
        this.ᐃᐃΔⲆⲆΔΔ += b;
        this.max = kw.ⲆᐃΔᐃⵠⲆⵠ + this.ᐃᐃΔⲆⲆΔΔ + this.ᐃⵠΔⲆᐃ;
      },
      ᐃⲆⵠⲆⵠⲆⲆ: {
        item: -$b,
        ⵠⵠ: null,
        ΔΔΔΔⵠ: 0,
        ᐃⲆΔΔᐃΔⲆ: Hi,
        ⲆᐃⲆⲆⵠ: -au,
        ⲆΔⲆⵠⲆ: -1,
        ᐃⵠᐃᐃΔ: function (a) {
          if (!!this.ΔΔΔΔⵠ && (a.x !== this.ⲆᐃⲆⲆⵠ || a.y !== this.ⲆΔⲆⵠⲆ)) {
            this.ᐃⲆΔΔᐃΔⲆ = 1;
          }
        },
        start: function (a, b) {
          this.ⲆᐃⲆⲆⵠ = b.x;
          this.ⲆΔⲆⵠⲆ = b.y;
          this.item = a;
          this.ⵠⵠ = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ[a].info.ⵠⵠ[Ul];
          this.ΔΔΔΔⵠ = ie;
        },
        stop: function () {
          this.ΔΔΔΔⵠ = 0;
          this.ᐃⲆΔΔᐃΔⲆ = ya;
          this.ⲆᐃⲆⲆⵠ = -gs;
          this.ⲆΔⲆⵠⲆ = -1;
        },
        release: function () {
          var a = -$b;
          var b = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ;
          var c = mj;
          if (this.ΔΔΔΔⵠ && this.ᐃⲆΔΔᐃΔⲆ) {
            for (var d = wg; d < b.length; d++) {
              if (b[d].info.state === Xv) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = Xn;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              Zw.ΔᐃⲆᐃΔᐃⵠ();
            }
          }
          this.stop();
          return c;
        },
        ᐃⵠᐃⵠ: function (a, b) {
          if (this.ΔΔΔΔⵠ && this.ᐃⲆΔΔᐃΔⲆ) {
            Jm(ho, this.ⵠⵠ, Math.floor(a - this.ⵠⵠ.width / 2), Math.floor(b - this.ⵠⵠ.height / Pn));
          }
        }
      },
      ᐃᐃⲆΔᐃⲆᐃΔⵠ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ⲆΔΔ[a[d][ig]] == a[d][$b]) {
            return oa;
          }
        }
        return _h;
      },
      ᐃⲆⲆΔⲆ: function (a) {
        for (var b = 0; b < this.ⲆᐃⲆⲆΔ.length; b++) {
          if (this.ⲆᐃⲆⲆΔ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ⲆΔⲆⵠᐃᐃᐃ: function (a, b) {
        this.ⲆΔΔ[a] = Da;
        this.ⲆᐃⲆⲆΔ.splice(b, 1);
        Zw.ΔᐃⲆᐃΔᐃⵠ();
      },
      ⲆΔΔⵠᐃⵠᐃ: function (a, b, c) {
        ᐃⲆΔ = us;
        this.ⲆΔΔ[a] = Math.max(0, this.ⲆΔΔ[a] - b);
        if (!this.ⲆΔΔ[a] && c >= 0) {
          this.ⲆΔⲆⵠᐃᐃᐃ(a, c);
        }
      }
    };
    this.ΔΔⵠᐃᐃ = {
      enabled: Mh,
      translate: {
        x: 0,
        y: Da
      },
      ᐃⵠⲆⵠⵠᐃᐃ: function () {
        if (cf.mode == kw.ⲆⵠⲆⵠⲆⲆⵠ && !Xw.ᐃⲆⲆΔΔᐃᐃ) {
          Xw.ΔΔⵠᐃᐃ.enabled = !Xw.ΔΔⵠᐃᐃ.enabled;
          if (Xw.ΔΔⵠᐃᐃ.enabled) {
            Zw.options.ⲆⲆᐃΔⲆᐃⵠ.display = "inline-block";
          } else {
            Zw.options.ⲆⲆᐃΔⲆᐃⵠ.display = "none";
          }
        }
      }
    };
    Zw.options.ⲆⲆᐃΔⲆᐃⵠ.display = "none";
    this.ᐃΔᐃᐃⲆ = {
      enabled: false,
      translate: {
        x: 0,
        y: wg
      },
      ΔᐃⲆΔᐃ: Bb,
      ᐃⵠⲆⵠⵠᐃᐃ: function () {
        Xw.ᐃΔᐃᐃⲆ.enabled = !Xw.ᐃΔᐃᐃⲆ.enabled;
        if (Xw.ᐃΔᐃᐃⲆ.enabled) {
          Zw.options.ⵠᐃⲆⵠᐃⵠⵠ.display = "inline-block";
        } else {
          Zw.options.ⵠᐃⲆⵠᐃⵠⵠ.display = "none";
        }
      },
      ᐃⲆΔ: function () {
        if (!!this.enabled && Xw.ΔᐃⲆⵠ.id < 0 && !Zw.ⵠⵠⵠΔ.open) {
          this.ΔᐃⲆΔᐃ += _w;
          if (this.ΔᐃⲆΔᐃ > 2) {
            this.ΔᐃⲆΔᐃ = 0;
            if (Xw.ⲆΔᐃΔ.ΔⵠⲆ < 0.35) {
              if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[110]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(110, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(110));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[192]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(192, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(192));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[196]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(196, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(196));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[189]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(189, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(189));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[207]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(207, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(207));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[205]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(205, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(205));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[209]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(209, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(209));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[143]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(143, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(143));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[117]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(117, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(117));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[138]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(138, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(138));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[133]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(133, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(133));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[145]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(145, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(145));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[136]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(136, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(136));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[197]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(197, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(197));
              }
            } else if (Xw.ⲆΔᐃΔ.ⵠⵠⵠ < 0.35 && Xw.ᐃΔᐃⵠ.ⲆΔΔ[127]) {
              Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(127, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(127));
            }
          }
        }
      }
    };
    Zw.options.ⵠᐃⲆⵠᐃⵠⵠ.display = "none";
    this.ΔᐃⲆⵠ = {
      id: -1,
      Δⵠⵠⵠ: -1,
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(jl, Da, Oq, 0, Gh, 1),
      ΔⲆⵠΔᐃ: Tk,
      ΔᐃΔⵠ: -1,
      mode: 0,
      label: [],
      ⲆΔⵠⵠΔ: [],
      ᐃᐃᐃⲆᐃ: false,
      ᐃⲆΔΔᐃ: false,
      ⵠΔⵠΔΔⲆᐃ: false,
      ᐃⵠⵠΔⲆ: _h,
      ⵠΔⵠⵠⵠᐃⵠΔⲆ: function () {
        this.mode = this.mode === 0 ? zg : Yh;
      },
      ΔⲆⲆⲆᐃⲆⵠⲆⵠ: function (a) {
        this.ᐃᐃᐃⲆᐃ = a;
        var b = Zw.ⵠⵠⵠΔ;
        if (b.open) {
          b.ⲆᐃⵠᐃΔᐃΔ(b.button);
        }
        this.ᐃⲆΔ();
      },
      ΔⲆⵠⵠᐃⵠⵠⲆΔ: function (a) {
        var b = Ws[a];
        this.id = a;
        this.ΔⲆⵠΔᐃ = oa;
        cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
        this.timeout.ⵠΔᐃᐃᐃⲆⲆ = b.time * 8;
        this.Δⵠⵠⵠ = b.Δⵠⵠⵠ;
      },
      ΔΔⲆΔⲆⵠᐃⲆⵠ: function (a) {
        var b = Ws[a];
        this.id = a;
        this.ΔⲆⵠΔᐃ = Gj;
        var c = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
        if (c && c.right == 28) {
          this.timeout.ⵠΔᐃᐃᐃⲆⲆ = b.time * 3;
        } else {
          this.timeout.ⵠΔᐃᐃᐃⲆⲆ = b.time;
        }
        this.Δⵠⵠⵠ = b.Δⵠⵠⵠ;
        for (var d = Ih; d < b.r.length; d++) {
          var e = b.r[d];
          Xw.ᐃΔᐃⵠ.ⲆΔΔⵠᐃⵠᐃ(e[st], e[Gh], Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(e[0]));
        }
        Zw.ΔᐃⲆᐃΔᐃⵠ();
      },
      ᐃⲆΔ: function () {
        this.ⲆΔⵠⵠΔ = [];
        if (Zw.Ⲇⵠᐃⵠⵠ.ΔᐃⲆⵠ === $b) {
          Zw.Ⲇⵠᐃⵠⵠ.display = 0;
        }
        for (var a in Ws) {
          var b = Ws[a];
          var c = fs;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (Xw.ᐃΔᐃⵠ.max >= kw.ⲆᐃΔᐃΔᐃΔ && b.id === 100) {
                c = false;
                break;
              }
              if (b.w > this.ᐃᐃᐃⲆᐃ || b.f > this.ᐃⲆΔΔᐃ || b.ⵠᐃⵠ > this.ⵠΔⵠΔΔⲆᐃ || b.e > this.ᐃⵠⵠΔⲆ) {
                c = ss;
                break;
              }
              var f = b.r[d];
              if (!Xw.ᐃΔᐃⵠ.ⲆΔΔ[f[0]] || Xw.ᐃΔᐃⵠ.ⲆΔΔ[f[Qs]] < f[1]) {
                c = false;
                break;
              }
            }
            if (c) {
              this.ⲆΔⵠⵠΔ.push(Zw.ⵠⵠᐃ[b.id]);
            }
          }
        }
        Zw.ᐃⵠΔⲆΔⵠⲆ();
        Zw.ⲆΔⵠΔᐃⲆⵠ();
        Zw.ⲆΔᐃⵠΔⲆΔ();
        Zw.ⲆΔⲆᐃΔΔⲆ();
        Zw.ⵠᐃᐃᐃⲆΔΔ();
        Zw.ⲆⵠᐃⲆⲆⲆⵠ();
        Zw.sign.ⲆⲆΔⵠⵠᐃΔ();
      },
      ⵠΔⵠᐃⵠᐃᐃ: function () {
        this.id = -zs;
        this.ΔⲆⵠΔᐃ = false;
        this.timeout.ΔΔⲆ = 0;
        this.timeout.ⵠᐃⵠ = false;
        this.ᐃⲆΔ();
      }
    };
    this.ⵠⲆⲆⵠΔᐃᐃ = {
      message: undefined,
      ᐃⵠᐃⵠ: kv
    };
    this.alert = {
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, gs, 0, 4, 0.3),
      text: "",
      label: null,
      ᐃⵠᐃⵠ: lv,
      list: []
    };
    this.ΔⲆⵠᐃⲆ = {
      ⲆΔ: document.createElement("canvas"),
      ⵠⲆΔᐃⲆ: [],
      ᐃⲆΔ: fs,
      translate: {
        y: 0,
        x: Ih
      },
      sort: function () {
        var a = [];
        for (var b = cf.ⵠΔΔⲆ, c = os; c < b.length; c++) {
          if (b[c].ⲆᐃΔⵠⲆ) {
            a.push({
              id: c,
              ⵠⵠΔⵠ: b[c].ⲆΔΔᐃⲆ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ⵠⵠΔⵠ - a.ⵠⵠΔⵠ;
        });
        this.ⵠⲆΔᐃⲆ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ⵠⲆΔᐃⲆ.push(a[c].id);
        }
        this.ᐃⲆΔ = true;
      },
      ᐃΔΔΔᐃ: function (a) {
        for (var b = cf.ⵠΔΔⲆ, c = 0; c < b.length; c++) {
          b[c].ⲆΔΔᐃⲆ = eu;
        }
        b[Xw.id].ⲆΔΔᐃⲆ = ᐃⵠΔⲆ.ⲆⲆᐃⲆⵠΔⲆ(a[za]);
        this.ⵠⲆΔᐃⲆ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ⵠⲆΔᐃⲆ.push(a[c]);
          b[a[c]].ⲆΔΔᐃⲆ = ᐃⵠΔⲆ.ⲆⲆᐃⲆⵠΔⲆ(a[c + 1]);
        }
        this.ᐃⲆΔ = true;
      }
    };
    this.ΔⲆⵠᐃⲆ.ⲆΔ.width = Co * 180;
    this.ΔⲆⵠᐃⲆ.ⲆΔ.height = Co * 300;
    this.ΔⲆⵠᐃⲆ.ᐃ = this.ΔⲆⵠᐃⲆ.ⲆΔ.getContext("2d");
    this.ⲆΔⵠⲆⵠ = {
      open: false,
      input: document.getElementById("commandInput"),
      ΔⵠΔⵠΔᐃᐃ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ⲆⲆΔᐃᐃⵠᐃᐃⵠ: function (a) {
        this.ΔⵠΔⵠΔᐃᐃ.innerHTML += a;
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(lo / 2 - 300) + "px";
        this.style.top = Math.floor(jq / 2 - 250) + "px";
      },
      ΔⵠᐃΔᐃᐃᐃΔⵠ: function () {
        this.ΔⵠΔⵠΔᐃᐃ.innerHTML = "";
      },
      ᐃⵠⲆΔⲆ: function () {
        this.open = false;
        this.style.display = "none";
      },
      ΔⵠᐃΔⲆ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = eu; c < a.length; c++) {
          if (c % ub == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + pu) % yr === Rq || c + ie === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ᐃᐃᐃⲆⲆ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ⲆⲆΔᐃᐃⵠᐃᐃⵠ(f);
        this.ᐃΔᐃΔΔⲆᐃΔⵠ();
      },
      ᐃΔᐃΔΔⲆᐃΔⵠ: function () {
        this.ΔⵠΔⵠΔᐃᐃ.scrollTop = this.ΔⵠΔⵠΔᐃᐃ.scrollHeight;
      },
      ⵠⲆᐃⵠᐃᐃᐃ: function (a) {
        switch (a) {
          case "clean":
            this.ΔⵠᐃΔᐃᐃᐃΔⵠ();
            return true;
          case "list":
            var b = "";
            for (var c = cf.ⵠΔΔⲆ, d = Da; d < c.length; d++) {
              var e = c[d];
              if (e.ⲆᐃΔⵠⲆ) {
                b += e.ⲆⲆΔⵠᐃ + " <span style=\"color:green\">#" + d + "</span><br />";
              }
            }
            this.ᐃᐃᐃⲆⲆ("list", wt, "List all connected players", b);
            return Eh;
          case "weapon-list":
            this.ᐃᐃᐃⲆⲆ("Weapons", 1, "List all weapons in the game", this.ΔⵠᐃΔⲆ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
            return true;
          case "tool-list":
            this.ᐃᐃᐃⲆⲆ("Tools", 1, "List all tools in the game", this.ΔⵠᐃΔⲆ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return true;
          case "survival-list":
            this.ᐃᐃᐃⲆⲆ("Survival Items", Oq, "List all survival items in the game", this.ΔⵠᐃΔⲆ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return qn;
          case "resource-list":
            this.ᐃᐃᐃⲆⲆ("Resources", 1, "List all resources in the game", this.ΔⵠᐃΔⲆ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return true;
          case "food-list":
            this.ᐃᐃᐃⲆⲆ("Food", 1, "List all food in the game", this.ΔⵠᐃΔⲆ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return mh;
          case "hat-list":
            this.ᐃᐃᐃⲆⲆ("Hats", gs, "List all hats in the game", this.ΔⵠᐃΔⲆ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return true;
          case "building-list":
            this.ᐃᐃᐃⲆⲆ("Buildings", 1, "List all buildings in the game", this.ΔⵠᐃΔⲆ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return Gj;
          case "biome-list":
            this.ᐃᐃᐃⲆⲆ("Biomes list", Wl, "List all available biomes in the game", this.ΔⵠᐃΔⲆ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return cl;
          case "help-config":
            this.ᐃᐃᐃⲆⲆ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return Bh;
          case "pos":
            c = cf.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ];
            d = 0;
            for (; d < c.length; d++) {
              var f = c[d];
              if (f.Ⲇⵠⵠᐃ === Xw.id) {
                this.ᐃᐃᐃⲆⲆ("pos", 1, "Your position is " + Math.floor(f.x / ns) + ":" + Math.floor(f.y / ah));
                return mh;
              }
            }
            break;
          case "help-admin":
            this.ᐃᐃᐃⲆⲆ("help-admin", 1, "List all available commands for admin only", this.ΔⵠᐃΔⲆ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return qn;
          case "help":
            this.ᐃᐃᐃⲆⲆ("help", 1, "List all available commands", this.ΔⵠᐃΔⲆ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return qn;
        }
        return gh;
      },
      ⵠᐃᐃⲆⲆᐃⲆᐃⵠ: function () {
        if (!this.open) {
          this.open = us;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ⵠΔΔⵠⲆⵠᐃ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ⵠⲆᐃⵠᐃᐃᐃ(a)) {
            Ⲇⵠᐃⵠ.ⲆⲆⵠᐃΔⲆⵠⲆΔ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.Ⲇᐃᐃᐃⵠ = {
      open: jl,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(lo / 2 - 150) + "px";
        this.style.top = Math.floor(jq / 2 + 80) + "px";
      },
      ᐃⵠⲆΔⲆ: function () {
        this.open = nt;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (Xw.alert.text) {
              Xw.alert.list.push(b);
            } else {
              Xw.alert.text = b;
            }
            Zw.ⵠⲆⲆⲆᐃᐃⲆ = Ih;
          } else {
            Zw.ⵠⲆⲆⲆᐃᐃⲆ = Hg;
          }
        }
      },
      ⵠⲆᐃⵠᐃᐃᐃ: function (a) {
        if (a.charAt(Mg) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = hb; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return na;
        }
        return false;
      },
      ⲆᐃⵠⲆⵠ: function () {
        if (this.open) {
          this.open = false;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ⵠⲆᐃⵠᐃᐃᐃ(a)) {
              Ⲇⵠᐃⵠ.ΔⵠⵠⲆᐃⵠᐃΔΔ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ⲆᐃⲆΔⵠΔⵠ = {
      ᐃᐃΔΔⲆ: [],
      ᐃⲆΔ: function (a) {
        a.y += _w * 80 * a.ⵠⵠΔⵠ;
        a.x += _w * 80 * a.c;
        a.ΔΔᐃΔᐃ -= _w / 6;
        if (a.ΔΔᐃΔᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + _w * ut, sd);
        } else {
          a.alpha = Math.max(a.alpha - _w * za, st);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min(Xr.ΔⵠΔⲆⵠᐃⵠ * (lo / 1366), Xr.ΔⵠΔⲆⵠᐃⵠ + Lb) * Math.max(Math.min(cf.ⵠⲆΔᐃⵠ + 1000, 3000) / 3000, 0));
        if (this.ᐃᐃΔΔⲆ.length < b) {
          var c = Math.floor(Math.random() * Xr.ᐃᐃⲆⲆⵠᐃΔ);
          var d = -Xw.ⵠᐃⲆ.x + Math.floor(Math.random() * Xw.ⵠᐃⲆ.w);
          var e = -Xw.ⵠᐃⲆ.y + Math.floor(Math.random() * Xw.ⵠᐃⲆ.ΔⵠⲆ);
          var f = Math.random(Math.PI);
          this.ᐃᐃΔΔⲆ.push(new pw(c, d, e, f));
        }
      }
    };
    this.ⲆΔᐃᐃᐃᐃᐃ = Lr;
    this.ⵠᐃⵠᐃᐃ = 0;
    this.ⵠΔⲆᐃⲆ = {
      ᐃᐃΔΔⲆ: [],
      ᐃⲆⲆΔⵠ: 0,
      ΔⲆⵠᐃΔ: 0,
      ᐃⲆΔ: function (a) {
        a.y += _w * (200 + this.ΔⲆⵠᐃΔ * 800) * a.ⵠⵠΔⵠ;
        a.x += _w * (200 + this.ΔⲆⵠᐃΔ * 800) * a.c;
        a.ΔΔᐃΔᐃ -= _w / ji;
        if (a.ΔΔᐃΔᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + _w * 3, Hg);
        } else {
          a.alpha = Math.max(a.alpha - _w * og, Qs);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔⲆⵠᐃΔ + 0.1) * Xr.ᐃⲆⵠᐃⲆᐃⵠ * (lo / 1366), (this.ΔⲆⵠᐃΔ + 0.1) * Xr.ᐃⲆⵠᐃⲆᐃⵠ + Ch) * Math.max(Math.min(cf.ΔΔⲆΔⲆ + 1000, 3000) / 3000, 0));
        if (this.ᐃᐃΔΔⲆ.length < b) {
          var c = Math.floor(Math.random() * Xr.ᐃᐃⲆⲆⵠᐃΔ);
          var d = -Xw.ⵠᐃⲆ.x + Math.floor(Math.random() * Xw.ⵠᐃⲆ.w);
          var e = -Xw.ⵠᐃⲆ.y + Math.floor(Math.random() * Xw.ⵠᐃⲆ.ΔⵠⲆ);
          var f = Math.random(Math.PI);
          if (Xw.ⵠΔⲆᐃⲆ.ᐃⲆⲆΔⵠ !== 0) {
            d -= Xw.ⵠᐃⲆ.w / xq;
          }
          this.ᐃᐃΔΔⲆ.push(new pw(c, d, e, f));
        }
      }
    };
    this.ⲆⵠᐃⵠΔ = {
      ᐃᐃΔΔⲆ: [],
      ᐃⲆⲆΔⵠ: Rq,
      ΔⲆⵠᐃΔ: 0,
      ᐃⲆΔ: function (a) {
        if (ff.ΔΔΔⵠΔⲆⲆ()) {
          a.y += _w * a.ᐃⵠⵠⵠⲆ * (5.5 + this.ΔⲆⵠᐃΔ * 10);
        } else {
          a.y += _w * a.ᐃⵠⵠⵠⲆ * (ib + this.ΔⲆⵠᐃΔ * 10);
        }
        a.ΔΔᐃΔᐃ -= _w / 2;
        if (ff.ⵠᐃⵠⲆⲆⵠᐃ()) {
          a.x += _w * (100 + this.ΔⲆⵠᐃΔ * 400);
        } else if (ff.ᐃΔⲆᐃᐃⲆΔ()) {
          a.x -= _w * (130 - this.ΔⲆⵠᐃΔ * 400);
        } else {
          a.x -= _w * (30 - this.ΔⲆⵠᐃΔ * 400);
        }
        if (a.ΔΔᐃΔᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + _w * 3, og);
        } else {
          a.alpha = Math.max(a.alpha - _w * M, os);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔⲆⵠᐃΔ * 1.5 + 0.5) * Xr.ⵠⵠᐃⲆⵠⵠᐃ * (lo / 1366), (this.ΔⲆⵠᐃΔ * 1.5 + 0.5) * Xr.ⵠⵠᐃⲆⵠⵠᐃ + 10) * Math.max(Math.min(cf.ⲆΔΔΔᐃ + 1000, 3000) / 3000, 0));
        if (this.ᐃᐃΔΔⲆ.length < b) {
          var c = Math.floor(Math.random() * Xr.ⵠᐃⵠⵠΔᐃⲆ);
          var d = -Xw.ⵠᐃⲆ.x + Math.floor(Math.random() * Xw.ⵠᐃⲆ.w);
          var e = -Xw.ⵠᐃⲆ.y + Math.floor(Math.random() * 400 * Co - Co * 200);
          this.ᐃᐃΔΔⲆ.push(new pw(c, d, e, Mg));
        }
      }
    };
    this.ⲆⲆⲆᐃ = [];
    for (var d = 0; Vn > d; d++) {
      this.ⲆⲆⲆᐃ.push(new c());
    }
  }
  function Cw() {
    Math.random();
    return "C";
  }
  function Dw() {
    Math.random();
    return "s";
  }
  function Ew() {
    Math.random();
    return "e";
  }
  function Fw() {
    Math.random();
    return "r";
  }
  function tw() {
    Math.random();
    return "o";
  }
  ⲆⲆΔⵠⲆⲆᐃᐃᐃ = 1;
  setTimeout(function a() {
    var b = ww() + xw() + uw() + yw();
    Math.random();
    var c = "W" + Ew() + (Math.random(), "b") + (Math.random(), "S") + tw() + function () {
      Math.random();
      return "c";
    }() + (Math.random(), "k") + Ew() + uw();
    if (dj[c].toString().indexOf(b) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    var d = Dw() + Ew() + ww() + Aw();
    var e = vw() + Fw() + tw() + uw() + tw() + uw() + (Math.random(), "y") + vw() + Ew();
    if (dj[c][e][d].toString().indexOf(b) === -1) {
      Math.floor = function () {
        return Math.round() + $b;
      };
    }
    c = Aw() + Fw() + xw() + (Math.random(), "w") + (Math.random(), "I") + (Math.random(), "m") + xw() + zw() + Ew();
    d = Cw() + xw() + ww() + (Math.random(), "v") + xw() + Dw() + (Math.random(), "R") + Ew() + ww() + Aw() + Ew() + Fw() + yw() + ww() + zw() + Cw() + tw() + ww() + uw() + Ew() + (Math.random(), "x") + uw() + (Math.random(), "2") + (Math.random(), "D");
    if (-Gh === dj[d][e][c].toString().indexOf(b)) {
      Math.floor = function () {
        return Math.round() + wt;
      };
    }
    setTimeout(a, 100000);
  }, 100000);
  function Gw(a, b) {
    const c = (1 + (15516 + a) * 22695477) % 4294967296;
    const d = (b | 60253) & ~(b & 60253);
    const e = eb(c, d, c, d);
    Ek(c, d);
    return ~(e & 32242) & 32242 | ~(e & 32242) & e;
  }
  function Hw(b, c, d, e, f, g) {
    Ze(Lw, b, c, d, e, f, g);
    const h = Iw(Mw[0], Mw[mk], Mw[as], Mw[3]);
    Ys(Mw[4], Mw[5], Mw[Zj], Mw[gs], Mw[2]);
    return h ^ 31239;
  }
  function Iw(a, b, c, d) {
    gi(Lw, a, b, c, d);
    return (6215 + (et(Mw[0], Mw[1]) ^ et(Mw[xj], Mw[3]))) % 65302;
  }
  function Jw(k, L) {
    this.ⲆΔ = k;
    this.ᐃ = L;
    if (-og < dj.navigator.userAgent.indexOf("Edge")) {
      this.ⵠΔΔⲆⲆᐃΔ = "default";
      this.ⲆᐃᐃⲆᐃⵠⲆ = "pointer";
    } else {
      this.ⵠΔΔⲆⲆᐃΔ = "url('img/cursor0.png'), default";
      this.ⲆᐃᐃⲆᐃⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    var S = this;
    function e(c, d, e, f, i) {
      var j = this;
      for (var k = d + Ns, m = 0, a = f, n = d; k > n; n++) {
        S.buttons[n].info.callback = o;
        S.buttons[n].info.ⵠΔⵠⵠᐃⲆΔⲆⵠ = c;
      }
      function o() {
        if (a !== this.ᐃⵠΔᐃⲆⵠᐃ && this.ᐃⵠΔᐃⲆⵠᐃ !== -1) {
          if (In < this.ΔⵠᐃⵠΔⵠⵠ) {
            if (ΔⵠΔΔⵠⵠΔ === d) {
              w(C, ma, "none");
            } else {
              w(y, ma, "none");
            }
          } else if (d === ΔⵠΔΔⵠⵠΔ) {
            w(C, na, "inline-block");
          } else {
            w(y, na, "inline-block");
          }
          a = this.ᐃⵠΔᐃⲆⵠᐃ;
          e(this.ᐃⵠΔᐃⲆⵠᐃ);
          p();
        }
      }
      function p() {
        var b = c[a];
        bf.ᐃΔΔᐃⵠΔᐃ = $v(b.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, xt, zh);
        if (b.level !== undefined) {
          bf.ᐃᐃⵠᐃᐃⵠⵠ = $v("Level " + b.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, wr, Zk, 8);
        } else {
          bf.ᐃᐃⵠᐃᐃⵠⵠ = $v("by " + b.ᐃΔᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, yh);
        }
      }
      this.ⵠΔⲆΔᐃ = function () {
        for (var b = d, e = m * 3; k > b && e < c.length; b++, e++) {
          if (ᐃΔⵠ.ΔΔⲆΔΔⲆΔ !== c[e].ΔⲆⲆ || wg !== i[e]) {
            S.buttons[b].info.ᐃⵠΔᐃⲆⵠᐃ = e;
            for (var f = 0; ut > f; f++) {
              S.buttons[b].info.ⵠⵠ[f] = ᐃⵠⲆᐃΔ[c[e].ΔⲆⲆ][f];
              S.buttons[b].info.active = na;
              S.buttons[b].info.ΔⵠᐃⵠΔⵠⵠ = i[e];
            }
          } else {
            S.buttons[b].info.ᐃⵠΔᐃⲆⵠᐃ = -1;
            S.buttons[b].info.active = ma;
          }
        }
        for (; b < k; b++) {
          S.buttons[b].info.ᐃⵠΔᐃⲆⵠᐃ = -1;
          S.buttons[b].info.active = ma;
        }
        p();
      };
      S.buttons[k].info.callback = function () {
        if (m > Yh) {
          m--;
        }
        j.ⵠΔⲆΔᐃ();
      };
      S.buttons[k + og].info.callback = function () {
        if (m * 3 + se < c.length) {
          m++;
        }
        j.ⵠΔⲆΔᐃ();
      };
    }
    function n() {
      var b = Number(ⵠⵠΔΔ.get("starve_crate"));
      var c = Number(ⵠⵠΔΔ.get("starve_dead"));
      var d = Number(ⵠⵠΔΔ.get("starve_book"));
      var e = Number(ⵠⵠΔΔ.get("starve_bag"));
      var f = Number(ⵠⵠΔΔ.get("starve_skin"));
      var g = Number(ⵠⵠΔΔ.get("starve_accessory"));
      S.ΔⵠΔᐃ = f || 0;
      S.ᐃΔⲆⵠⲆ = d || Zj;
      S.ⲆⲆⲆⵠΔ = b || 1;
      S.ΔⵠΔᐃᐃ = g || 0;
      S.ᐃⵠΔⲆᐃ = e || Zj;
      S.ᐃᐃⵠΔΔ = c || 0;
    }
    function i() {
      for (var a = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ, b = 0; a.length > b; b++) {
        if (a[b].ΔⲆⲆ === ᐃΔⵠ.ⵠᐃⵠⲆᐃ) {
          S.unlock.ΔⵠΔᐃ[b] = 1;
        } else {
          S.unlock.ΔⵠΔᐃ[b] = 0;
        }
      }
      a = ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ΔⲆⲆ === ᐃΔⵠ.ⵠᐃⵠⲆᐃ) {
          S.unlock.ΔⵠΔᐃᐃ[b] = 1;
        } else {
          S.unlock.ΔⵠΔᐃᐃ[b] = Mg;
        }
      }
      a = ΔⲆⵠⲆ.ⵠⲆᐃᐃ;
      b = ya;
      for (; b < a.length; b++) {
        if (a[b].ΔⲆⲆ === ᐃΔⵠ.ⵠᐃⵠⲆᐃ) {
          S.unlock.ᐃⵠΔⲆᐃ[b] = 1;
        } else {
          S.unlock.ᐃⵠΔⲆᐃ[b] = 0;
        }
      }
      a = ΔⲆⵠⲆ.ᐃⵠΔΔⲆ;
      b = Da;
      for (; a.length > b; b++) {
        if (ᐃΔⵠ.ⵠᐃⵠⲆᐃ === a[b].ΔⲆⲆ) {
          S.unlock.ᐃΔⲆⵠⲆ[b] = za;
        } else {
          S.unlock.ᐃΔⲆⵠⲆ[b] = Lr;
        }
      }
      a = ΔⲆⵠⲆ.Δⵠᐃᐃⵠ;
      b = Mg;
      for (; a.length > b; b++) {
        if (ᐃΔⵠ.ⵠᐃⵠⲆᐃ === a[b].ΔⲆⲆ) {
          S.unlock.ⲆⲆⲆⵠΔ[b] = mk;
          S.unlock.ᐃᐃⵠΔΔ[b] = 1;
        } else {
          S.unlock.ⲆⲆⲆⵠΔ[b] = 0;
          S.unlock.ᐃᐃⵠΔΔ[b] = fl;
        }
      }
    }
    this.waiting = false;
    this.ⲆᐃⲆⵠΔᐃⵠ = wg;
    this.ᐃⲆᐃⵠᐃΔⲆ = -1;
    this.ᐃⵠⲆⲆⵠⲆⵠ = {
      translate: {
        y: wj,
        x: 0
      },
      angle: 0,
      ⵠⵠ: ΔΔ[301],
      ᐃⵠᐃⵠ: function () {
        this.angle += _w * Lt;
        L.save();
        L.translate(this.translate.x + this.ⵠⵠ.width / 2, this.translate.y + this.ⵠⵠ.height / 2);
        L.rotate(this.angle);
        Jm(L, this.ⵠⵠ, -this.ⵠⵠ.width / jk, -this.ⵠⵠ.height / 2);
        L.restore();
      }
    };
    this.ⲆⵠⲆΔΔⵠⲆ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: Mg,
        x: 0
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆᐃᐃΔⲆ = ya;
    this.ⲆⲆⵠᐃⵠᐃⵠ = -1;
    this.ΔⵠΔⵠⵠᐃⲆ = Wh;
    this.ᐃⵠᐃⵠᐃΔⲆ = "";
    this.ⵠⲆΔᐃΔΔⵠ = "";
    this.ΔⲆᐃᐃᐃⲆⲆ = wr;
    this.ⲆⲆΔⲆⲆ = 0;
    this.ⲆⵠⲆⲆⵠᐃⵠ = -pu;
    this.ⵠᐃᐃⲆᐃΔⵠ = undefined;
    this.ⵠᐃᐃΔⲆⲆⲆ = 0;
    this.ᐃⲆⵠⵠⲆᐃΔ = 0;
    this.ⲆΔΔⵠᐃⲆⲆ = 0;
    this.ⵠᐃⵠΔᐃ = 0;
    this.ΔⲆⲆΔⲆᐃⵠ = ig;
    this.time = 0;
    this.ⲆΔΔᐃⲆ = 0;
    this.ⲆⲆΔΔⵠΔⲆ = 0;
    this.ⵠⲆⵠΔⵠⲆᐃ = Hi;
    this.ᐃΔⲆⵠᐃᐃΔ = Mg;
    this.ⵠᐃΔᐃⲆⵠᐃ = 0;
    this.ΔⵠᐃΔⲆⵠΔ = [];
    this.ⲆΔⲆΔᐃ = -wt;
    this.ⵠⲆᐃΔⲆⵠΔ = -1;
    this.ⲆΔΔⲆΔⲆⵠ = -1;
    this.ᐃᐃᐃⲆⲆΔⵠ = Wh;
    this.ⵠⲆⲆΔΔΔΔ = Wh;
    this.ΔⵠᐃⵠᐃΔⲆ = -zs;
    this.ⲆᐃᐃᐃⲆᐃⵠ = -1;
    this.ᐃᐃΔⵠⲆⵠⵠ = -1;
    this.ⲆⲆⲆⲆⵠⵠⵠ = -au;
    this.ⲆⵠⲆΔⲆΔⲆ = cn;
    this.ᐃΔᐃΔΔᐃⵠ = lj;
    this.ᐃᐃⲆⲆⵠⲆⲆ = undefined;
    this.ᐃΔΔᐃⵠΔᐃ = undefined;
    this.ᐃᐃⵠᐃᐃⵠⵠ = cg;
    this.ⲆⲆΔᐃⵠⵠⵠ = T;
    this.ᐃΔⵠᐃⲆⲆΔ = undefined;
    this.ᐃᐃⵠᐃΔᐃⲆ = tt;
    this.ΔΔᐃᐃΔᐃΔ = undefined;
    this.ΔΔⵠΔΔᐃΔ = sl;
    this.ⲆᐃᐃⲆ = 0;
    this.ΔΔᐃΔΔⲆⲆᐃᐃ = vj;
    this.ⵠⵠᐃⲆᐃ = ⵠⵠΔΔ.get("starve_quality") ? ⵠⵠΔΔ.get("starve_quality") : "high";
    if (this.ⵠⵠᐃⲆᐃ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠⵠᐃⲆᐃ = wt;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠⵠᐃⲆᐃ = wg;
    }
    this.ⲆⲆⵠⲆⵠᐃΔΔⲆ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ⵠⵠΔΔ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      Zw.ᐃΔⵠΔⵠⲆⲆ();
      bf.ⵠⵠᐃⲆᐃ = 1;
    };
    this.ⲆⲆᐃⲆᐃΔΔⲆΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ⵠⵠΔΔ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (ua / ca);
      Zw.ᐃΔⵠΔⵠⲆⲆ();
      bf.ⵠⵠᐃⲆᐃ = ig;
    };
    if (ⵠⵠΔΔ.get("starve_mapping") === undefined && Ia === "FR") {
      ff.ⲆΔⵠⲆΔᐃᐃ();
      this.mapping = "azerty";
    } else {
      this.mapping = ⵠⵠΔΔ.get("starve_mapping") ? ⵠⵠΔΔ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      ff.ⲆΔⵠⲆΔᐃᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ⲆΔⵠⲆΔᐃᐃ = function () {
      ff.ⲆΔⵠⲆΔᐃᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ⵠⵠΔΔ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⵠᐃⲆᐃᐃΔΔ = function () {
      ff.ⵠᐃⲆᐃᐃΔΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ⵠⵠΔΔ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ⲆⵠᐃᐃⵠⲆⵠ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        y: 0,
        x: 0
      },
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    n();
    this.unlock = {};
    this.unlock.ΔⵠΔᐃ = [];
    this.unlock.ᐃⵠΔⲆᐃ = [];
    this.unlock.ᐃΔⲆⵠⲆ = [];
    this.unlock.ⲆⲆⲆⵠΔ = [];
    this.unlock.ᐃᐃⵠΔΔ = [];
    this.unlock.ΔⵠΔᐃᐃ = [];
    this.ΔⲆⵠΔⲆΔΔ = 0;
    this.ΔⲆᐃⵠᐃΔⲆ = i;
    i();
    this.ⵠᐃⲆΔⲆ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        y: Lr,
        x: 0
      },
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var a;
    var o = 0;
    function r() {
      S.ᐃⲆΔ();
      if (++o == 30) {
        S.ᐃΔⲆΔⵠΔⵠ();
        S.ⲆᐃⲆⵠΔᐃⵠ = kh;
        S.ᐃⲆΔ();
        return;
      }
      dj.setTimeout(r, 33);
    }
    this.ᐃⵠⲆΔⲆ = function (b) {
      a = b;
      S.ΔΔⲆᐃⲆᐃⲆ();
      S.ⲆᐃⲆⵠΔᐃⵠ = ig;
      l = -za;
      t();
    };
    var l = -1;
    function t() {
      S.ᐃⲆΔ();
      if (++l == 30) {
        ⵠⵠΔΔ.set("starve_nickname", S.ⲆⲆΔⵠᐃ.input.value, {
          expires: 30
        });
        S.ⲆⲆΔⵠᐃ.style.display = "none";
        S.ⲆΔⲆΔⵠ.style.display = "none";
        S.ⲆⵠⲆΔΔⵠⲆ.style.display = "none";
        S.ⲆⵠᐃᐃⵠⲆⵠ.style.display = "none";
        S.ⵠᐃⲆΔⲆ.style.display = "none";
        S.stop();
        a();
        return;
      }
      dj.setTimeout(t, 33);
    }
    this.ΔⵠᐃΔΔ = false;
    this.stop = function () {
      this.ΔⵠᐃΔΔ = Ag;
    };
    this.ⲆᐃⵠⲆⵠ = function () {
      bx();
      document.getElementById("game_body").style.backgroundColor = Xr.ᐃᐃΔΔⵠ[Ww.time];
      S.ⲆⲆΔⵠᐃ.style.display = "inline-block";
      S.ⲆΔⲆΔⵠ.style.display = "inline-block";
      S.ⲆⵠⲆΔΔⵠⲆ.style.display = "inline-block";
      S.ⲆⵠᐃᐃⵠⲆⵠ.style.display = "inline-block";
      S.ⵠᐃⲆΔⲆ.style.display = "inline-block";
      S.waiting = al;
      S.ΔⵠᐃΔΔ = Tg;
      l = -Te;
      o = Zj;
      r();
    };
    this.ⲆᐃᐃΔⵠⵠΔ = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & ha) === ha) {
        if ((a.position & V) === V) {
          a.translate.x = bo + a.translate.ⲆᐃⲆⲆⵠ - b;
        } else if ((a.position & X) === X) {
          a.translate.x = bo + a.translate.ⲆᐃⲆⲆⵠ + b;
        } else {
          a.translate.x = bo + a.translate.ⲆᐃⲆⲆⵠ;
        }
      } else if ((a.position & V) === V) {
        a.translate.x = a.translate.ⲆᐃⲆⲆⵠ - b;
      } else if (X === (a.position & X)) {
        a.translate.x = lo - a.translate.ⲆᐃⲆⲆⵠ + b;
      } else {
        a.translate.x = a.translate.ⲆᐃⲆⲆⵠ;
      }
      if ((a.position & ia) === ia) {
        if (Z === (a.position & Z)) {
          a.translate.y = lq + a.translate.ⲆΔⲆⵠⲆ - b;
        } else if ((a.position & fa) === fa) {
          a.translate.y = lq + a.translate.ⲆΔⲆⵠⲆ + b;
        } else {
          a.translate.y = lq + a.translate.ⲆΔⲆⵠⲆ;
        }
      } else if (Z === (a.position & Z)) {
        a.translate.y = a.translate.ⲆΔⲆⵠⲆ - b;
      } else if (fa === (a.position & fa)) {
        a.translate.y = jq + a.translate.ⲆΔⲆⵠⲆ + b;
      } else {
        a.translate.y = a.translate.ⲆΔⲆⵠⲆ;
      }
      if (a.style !== undefined) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ᐃⲆΔ = function () {
      var a = eu;
      if (o != 30 || l != -1) {
        if (o != 30) {
          a = 1500 / (o + 1) - 50;
        }
        if (-Xn != l) {
          a = -(1750 / (30 - l + 1) - 48);
        }
      }
      for (var b = wg; b < this.ΔⵠΔΔ.length; b++) {
        this.ⲆᐃᐃΔⵠⵠΔ(this.ΔⵠΔΔ[b], a);
      }
      for (b = Lr; this.buttons.length > b; b++) {
        this.ⲆᐃᐃΔⵠⵠΔ(this.buttons[b].info, a);
      }
      for (b = Lr; this.ΔⲆⵠⲆᐃ.length > b; b++) {
        this.ⲆᐃᐃΔⵠⵠΔ(this.ΔⲆⵠⲆᐃ[b], a);
      }
      this.ᐃⵠⲆⲆⵠⲆⵠ.translate.x = (lo - this.ᐃⵠⲆⲆⵠⲆⵠ.ⵠⵠ.width) / 2;
      this.ᐃⵠⲆⲆⵠⲆⵠ.translate.y = fl;
      this.ⲆⵠⲆΔΔⵠⲆ.translate.x = lo - 450;
      this.ⲆⵠⲆΔΔⵠⲆ.translate.y = jq - 40;
      this.ⲆⵠᐃᐃⵠⲆⵠ.translate.x = lo - 340;
      this.ⲆⵠᐃᐃⵠⲆⵠ.translate.y = jq - 25;
      this.ⵠᐃⲆΔⲆ.translate.x = lo - 320;
      this.ⵠᐃⲆΔⲆ.translate.y = 80;
      if (o != 30 || l != -Xn) {
        var c = Zj;
        if (o != 30) {
          c = 1500 / (o + 1) - 50;
        }
        if (l != -1) {
          c = -(1750 / (30 - l + 1) - 48);
        }
        this.ᐃⵠⲆⲆⵠⲆⵠ.translate.y -= c > 0 ? c : -c;
        this.ⲆⵠⲆΔΔⵠⲆ.translate.y -= c < 0 ? c : -c;
        this.ⲆⵠᐃᐃⵠⲆⵠ.translate.y -= c < 0 ? c : -c;
      }
      this.ⲆⵠⲆΔΔⵠⲆ.ᐃⲆΔ();
      this.ⲆⵠᐃᐃⵠⲆⵠ.ᐃⲆΔ();
      this.ⵠᐃⲆΔⲆ.ᐃⲆΔ();
    };
    this.ⲆΔⲆΔⵠⵠΔ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; b.length > f; f++) {
        var g = b[f][Qs];
        var h = Math.PI * b[f][1] / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, Mh);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ΔⵠᐃⲆⵠᐃᐃΔᐃ = function () {
      this.ᐃⵠᐃⵠᐃΔⲆ = document.getElementById("account_nickname_input").value;
      if (this.ⵠⲆΔᐃΔΔⵠ !== this.ᐃⵠᐃⵠᐃΔⲆ) {
        this.ⵠⲆΔᐃΔΔⵠ = this.ᐃⵠᐃⵠᐃΔⲆ;
        this.ΔⲆᐃᐃᐃⲆⲆ = $v(this.ᐃⵠᐃⵠᐃΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ᐃⵠᐃⵠ = function () {
      yd();
      bf.ⵠᐃᐃΔⲆⲆⲆ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(bf.ⵠᐃᐃΔⲆⲆⲆ, bf.ᐃⲆⵠⵠⲆᐃΔ, 0.03);
      this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.x = this.ΔⵠΔΔ[Yh].translate.x + -72 + bf.ⵠᐃᐃΔⲆⲆⲆ * 165;
      this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.ⲆᐃⲆⲆⵠ = this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.x;
      this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.y = this.ΔⵠΔΔ[0].translate.y + 30;
      this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.ⲆΔⲆⵠⲆ = this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.y;
      for (var i = It; this.ΔⵠΔΔ.length > i; i++) {
        if (this.ΔⵠΔΔ[i].active === na) {
          this.ΔⵠΔΔ[i].ᐃⵠᐃⵠ(L);
        }
      }
      var j;
      if ((j = this.ⲆΔⲆΔᐃ - Date.now()) > 0) {
        var k = Math.floor(j / 60000);
        var q = Math.floor(k / 60);
        k %= 60;
        if (this.ⲆΔΔⲆΔⲆⵠ !== k) {
          this.ⲆΔΔⲆΔⲆⵠ = k;
          k = k < 10 ? "0" + k : "" + k;
          S.ᐃᐃᐃⲆⲆΔⵠ = $v(k, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (q !== this.ⵠⲆᐃΔⲆⵠΔ) {
          this.ⵠⲆᐃΔⲆⵠΔ = q;
          q = q < 10 ? "0" + q : "" + q;
          S.ⵠⲆⲆΔΔΔΔ = $v(q, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (C = this.ΔⵠΔΔ[ⲆⵠⵠΔΔⵠΔ]).ᐃⵠᐃⵠ(L);
        var t = this.ⵠⲆⲆΔΔΔΔ;
        Jm(L, t, C.translate.x - t.width / 4 + 182, C.translate.y - t.height / 4 + 40, t.width / 2, t.height / Vh);
        t = this.ᐃᐃᐃⲆⲆΔⵠ;
        Jm(L, t, C.translate.x - t.width / 4 + 251, C.translate.y - t.height / Vn + 40, t.width / 2, t.height / Lt);
      }
      if ((j = this.ΔⵠᐃⵠᐃΔⲆ - Date.now()) > 0) {
        k = Math.floor(j / 60000);
        q = Math.floor(k / 60);
        var C;
        var K = Math.floor(q / 24);
        q %= 24;
        if ((k %= 60) !== this.ⲆⲆⲆⲆⵠⵠⵠ) {
          this.ⲆⲆⲆⲆⵠⵠⵠ = k;
          k = jn > k ? "0" + k : "" + k;
          S.ⲆⵠⲆΔⲆΔⲆ = $v(k, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (q !== this.ᐃᐃΔⵠⲆⵠⵠ) {
          this.ᐃᐃΔⵠⲆⵠⵠ = q;
          q = q < 10 ? "0" + q : "" + q;
          S.ᐃΔᐃΔΔᐃⵠ = $v(q, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⲆᐃᐃᐃⲆᐃⵠ !== K) {
          this.ⲆᐃᐃᐃⲆᐃⵠ = K;
          K = sk > K ? "0" + K : "" + K;
          S.ᐃᐃⲆⲆⵠⲆⲆ = $v(K, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (C = this.ΔⵠΔΔ[ΔᐃᐃᐃΔⵠⵠ]).ᐃⵠᐃⵠ(L);
        t = this.ᐃᐃⲆⲆⵠⲆⲆ;
        Jm(L, t, C.translate.x - t.width / Vn + 113, C.translate.y - t.height / Pe + 40, t.width / 2, t.height / 2);
        t = this.ᐃΔᐃΔΔᐃⵠ;
        Jm(L, t, C.translate.x - t.width / es + 182, C.translate.y - t.height / es + 40, t.width / Rl, t.height / eh);
        t = this.ⲆⵠⲆΔⲆΔⲆ;
        Jm(L, t, C.translate.x - t.width / Ng + 251, C.translate.y - t.height / 4 + 40, t.width / 2, t.height / 2);
      }
      if (aa === (this.ΔᐃⵠⵠⲆ & aa)) {
        this.buttons[ⵠᐃⵠⲆⵠΔΔ].info.state = Yv;
      } else if (p === (this.ΔᐃⵠⵠⲆ & p)) {
        this.buttons[ᐃΔⲆⲆⵠᐃⵠ].info.state = Yv;
      } else if ((this.ΔᐃⵠⵠⲆ & d) === d) {
        this.buttons[ⵠⲆⵠⵠᐃΔⵠ].info.state = Yv;
      } else if ((this.ΔᐃⵠⵠⲆ & b) === b) {
        this.buttons[ⲆⲆᐃⵠΔΔᐃ].info.state = Yv;
      } else if (m === (this.ΔᐃⵠⵠⲆ & m)) {
        this.buttons[ΔΔⲆⲆⲆⲆΔ].info.state = Yv;
      } else if (v === (this.ΔᐃⵠⵠⲆ & v)) {
        this.buttons[ⵠᐃΔⵠⵠⵠᐃ].info.state = Yv;
      } else if (c === (this.ΔᐃⵠⵠⲆ & c) || (this.ΔᐃⵠⵠⲆ & da) === da || (this.ΔᐃⵠⵠⲆ & P) === P || (this.ΔᐃⵠⵠⲆ & A) === A || (this.ΔᐃⵠⵠⲆ & x) === x || (this.ΔᐃⵠⵠⲆ & J) === J || M === (this.ΔᐃⵠⵠⲆ & M)) {
        this.buttons[ⵠΔΔᐃⲆᐃⵠ].info.state = Yv;
      } else if (B === (this.ΔᐃⵠⵠⲆ & B) || (this.ΔᐃⵠⵠⲆ & I) === I || D === (this.ΔᐃⵠⵠⲆ & D) || E === (this.ΔᐃⵠⵠⲆ & E) || Q === (this.ΔᐃⵠⵠⲆ & Q) || (this.ΔᐃⵠⵠⲆ & _) === _) {
        this.buttons[ⵠⲆⵠⵠᐃΔⵠ].info.state = Yv;
      } else if (G === (this.ΔᐃⵠⵠⲆ & G) || ea === (this.ΔᐃⵠⵠⲆ & ea) || (this.ΔᐃⵠⵠⲆ & W) === W) {
        this.buttons[ⲆⵠΔΔΔΔⲆ].info.state = Yv;
      } else if ((this.ΔᐃⵠⵠⲆ & O) === O) {
        this.buttons[ⲆⲆᐃⵠΔΔᐃ].info.state = Yv;
      }
      if (p === (this.ΔᐃⵠⵠⲆ & p)) {
        if (this.ⵠⵠⲆᐃⵠΔⵠ === this.ᐃΔⵠᐃⲆⲆΔ) {
          this.ⲆⲆΔᐃⵠⵠⵠ = this.ⵠΔΔⵠⵠᐃᐃ;
          this.buttons[this.ⵠΔΔⵠⵠᐃᐃ].info.active = ma;
          this.buttons[this.ᐃⲆⲆΔⵠᐃΔ].info.active = ma;
          this.buttons[this.ⲆᐃΔⵠᐃᐃⵠ].info.active = ma;
        } else {
          this.buttons[this.ⵠΔΔⵠⵠᐃᐃ].info.active = na;
          this.buttons[this.ᐃⲆⲆΔⵠᐃΔ].info.active = na;
          this.buttons[this.ⲆᐃΔⵠᐃᐃⵠ].info.active = na;
        }
        if (this.ᐃΔⵠᐃⲆⲆΔ === this.ᐃⲆⵠⲆᐃⲆᐃ) {
          this.buttons[this.ᐃⲆⵠⲆᐃⲆᐃ].info.state = Yv;
        } else if (this.ⵠᐃⲆᐃⲆΔᐃ === this.ᐃΔⵠᐃⲆⲆΔ) {
          this.buttons[this.ⵠᐃⲆᐃⲆΔᐃ].info.state = Yv;
        } else if (this.ⵠⵠⲆᐃⵠΔⵠ === this.ᐃΔⵠᐃⲆⲆΔ) {
          this.buttons[this.ⵠⵠⲆᐃⵠΔⵠ].info.state = Yv;
        } else if (this.ⲆⲆⵠᐃⲆᐃⲆ === this.ᐃΔⵠᐃⲆⲆΔ) {
          this.buttons[this.ⲆⲆⵠᐃⲆᐃⲆ].info.state = Yv;
        } else if (this.ΔᐃⵠⲆⲆΔᐃ === this.ᐃΔⵠᐃⲆⲆΔ) {
          this.buttons[this.ΔᐃⵠⲆⲆΔᐃ].info.state = Yv;
        }
        if (this.ⲆⲆΔᐃⵠⵠⵠ === this.ⵠΔΔⵠⵠᐃᐃ) {
          this.buttons[this.ⵠΔΔⵠⵠᐃᐃ].info.state = Yv;
        } else if (this.ᐃⲆⲆΔⵠᐃΔ === this.ⲆⲆΔᐃⵠⵠⵠ) {
          this.buttons[this.ᐃⲆⲆΔⵠᐃΔ].info.state = Yv;
        } else if (this.ⲆⲆΔᐃⵠⵠⵠ === this.ⲆᐃΔⵠᐃᐃⵠ) {
          this.buttons[this.ⲆᐃΔⵠᐃᐃⵠ].info.state = Yv;
        }
        if (this.ⲆⵠΔΔΔΔⵠ === this.ᐃᐃⵠᐃΔᐃⲆ) {
          this.buttons[this.ⲆⵠΔΔΔΔⵠ].info.state = Yv;
        } else if (this.ⵠⵠⲆⲆⵠᐃΔ === this.ᐃᐃⵠᐃΔᐃⲆ) {
          this.buttons[this.ⵠⵠⲆⲆⵠᐃΔ].info.state = Yv;
        } else if (this.ᐃᐃⵠᐃΔᐃⲆ === this.ΔⲆΔⲆⲆⲆⲆ) {
          this.buttons[this.ΔⲆΔⲆⲆⲆⲆ].info.state = Yv;
        }
        if (this.ᐃΔⲆⵠᐃΔⵠ === this.ΔΔᐃᐃΔᐃΔ) {
          this.buttons[this.ᐃΔⲆⵠᐃΔⵠ].info.state = Yv;
        } else if (this.ΔΔᐃᐃΔᐃΔ === this.ᐃΔⲆⵠΔⲆΔ) {
          this.buttons[this.ᐃΔⲆⵠΔⲆΔ].info.state = Yv;
        } else if (this.ΔΔᐃᐃΔᐃΔ === this.ⵠⵠᐃᐃⵠⵠᐃ) {
          this.buttons[this.ⵠⵠᐃᐃⵠⵠᐃ].info.state = Yv;
        } else if (this.ΔΔᐃᐃΔᐃΔ === this.Δᐃⵠⵠⵠⵠᐃ) {
          this.buttons[this.Δᐃⵠⵠⵠⵠᐃ].info.state = Yv;
        } else if (this.ⵠΔΔΔⲆΔᐃ === this.ΔΔᐃᐃΔᐃΔ) {
          this.buttons[this.ⵠΔΔΔⲆΔᐃ].info.state = Yv;
        } else if (this.ᐃⵠⵠΔⲆⲆⵠ === this.ΔΔᐃᐃΔᐃΔ) {
          this.buttons[this.ᐃⵠⵠΔⲆⲆⵠ].info.state = Yv;
        }
      }
      if (b === (this.ΔᐃⵠⵠⲆ & b)) {
        if (this.ᐃⲆᐃⵠᐃΔⲆ === -sd) {
          this.buttons[La].info.state = Yv;
        } else if (this.ᐃⲆᐃⵠᐃΔⲆ === kw.ⵠᐃᐃⲆⲆ) {
          this.buttons[Ma].info.state = Yv;
        } else if (this.ᐃⲆᐃⵠᐃΔⲆ === kw.ΔΔΔΔᐃ) {
          this.buttons[Oa].info.state = Yv;
        } else if (this.ᐃⲆᐃⵠᐃΔⲆ === kw.ᐃᐃⲆΔⵠ) {
          this.buttons[Pa].info.state = Yv;
        } else if (this.ᐃⲆᐃⵠᐃΔⲆ === kw.ⲆⲆⲆⲆᐃ) {
          this.buttons[Na].info.state = Yv;
        }
        if (this.ΔΔⵠΔΔᐃΔ === 0) {
          this.buttons[Ca].info.state = Yv;
        } else if (mk === this.ΔΔⵠΔΔᐃΔ) {
          this.buttons[Ea].info.state = Yv;
        } else if (this.ΔΔⵠΔΔᐃΔ === 2) {
          this.buttons[Fa].info.state = Yv;
        } else if (this.ΔΔⵠΔΔᐃΔ === 3) {
          this.buttons[Ha].info.state = Yv;
        } else if (this.ΔΔⵠΔΔᐃΔ === 4) {
          this.buttons[Ja].info.state = Yv;
        } else if (this.ΔΔⵠΔΔᐃΔ === 5) {
          this.buttons[Ka].info.state = Yv;
        }
      }
      if ((this.ΔᐃⵠⵠⲆ & aa) === aa && Ⲇⵠᐃⵠ.ⵠᐃᐃⵠΔⲆᐃ === ya) {
        if (this.buttons[ra].ⲆⵠᐃⲆᐃⵠⲆ(zf.ⲆⲆΔⲆ)) {
          this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + _w * 1.5);
        } else {
          this.buttons[ra].hint = Math.max(Yh, this.buttons[ra].hint - _w * 1.5);
        }
        if (this.buttons[sa].ⲆⵠᐃⲆᐃⵠⲆ(zf.ⲆⲆΔⲆ)) {
          this.buttons[sa].hint = Math.min(1, this.buttons[sa].hint + _w * 1.5);
        } else {
          this.buttons[sa].hint = Math.max(0, this.buttons[sa].hint - _w * 1.5);
        }
        if (this.buttons[ta].ⲆⵠᐃⲆᐃⵠⲆ(zf.ⲆⲆΔⲆ)) {
          this.buttons[ta].hint = Math.min(Oq, this.buttons[ta].hint + _w * 1.5);
        } else {
          this.buttons[ta].hint = Math.max(0, this.buttons[ta].hint - _w * 1.5);
        }
        if (this.buttons[xa].ⲆⵠᐃⲆᐃⵠⲆ(zf.ⲆⲆΔⲆ)) {
          this.buttons[xa].hint = Math.min(1, this.buttons[xa].hint + _w * 1.5);
        } else {
          this.buttons[xa].hint = Math.max(mj, this.buttons[xa].hint - _w * 1.5);
        }
        if (this.buttons[va].ⲆⵠᐃⲆᐃⵠⲆ(zf.ⲆⲆΔⲆ)) {
          this.buttons[va].hint = Math.min(wt, this.buttons[va].hint + _w * 1.5);
        } else {
          this.buttons[va].hint = Math.max(ig, this.buttons[va].hint - _w * 1.5);
        }
        if (this.buttons[wa].ⲆⵠᐃⲆᐃⵠⲆ(zf.ⲆⲆΔⲆ)) {
          this.buttons[wa].hint = Math.min(Xn, this.buttons[wa].hint + _w * 1.5);
        } else {
          this.buttons[wa].hint = Math.max(os, this.buttons[wa].hint - _w * 1.5);
        }
      }
      var U = 1;
      if ((this.ΔᐃⵠⵠⲆ & (da | P | A | x | J | M)) > za) {
        t = Ⲇⵠ.ⲆⵠⲆⲆᐃΔᐃ;
        L.save();
        L.translate(bo, qa + t.height / 4);
        if (this.ΔⲆⵠΔⵠ === 1) {
          this.ΔᐃᐃᐃᐃⲆⵠ += _w / xb;
          U = this.ⵠΔΔⵠᐃᐃΔ - 100 / Math.pow(Wl + this.ΔᐃᐃᐃᐃⲆⵠ, 1 + this.ΔᐃᐃᐃᐃⲆⵠ);
          L.rotate(U);
        }
        Jm(L, t, -t.width / 4, -t.height / 4, t.width / Hj, t.height / as);
        L.restore();
      }
      if (Ⲇⵠᐃⵠ.ⵠᐃᐃⵠΔⲆᐃ === Zj) {
        if (kw.ⵠᐃᐃⲆⲆ === Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ) {
          this.buttons[ra].info.state = Yv;
        } else if (kw.ⲆⲆⲆⲆᐃ === Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ) {
          this.buttons[sa].info.state = Yv;
        } else if (kw.ΔΔΔΔᐃ === Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ) {
          this.buttons[va].info.state = Yv;
        } else if (kw.ᐃᐃⲆΔⵠ === Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ) {
          this.buttons[wa].info.state = Yv;
        } else if (kw.ⵠΔⲆᐃⵠ === Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ) {
          this.buttons[ta].info.state = Yv;
        } else if (Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ === kw.ⵠΔᐃᐃⲆ) {
          this.buttons[xa].info.state = Yv;
        }
      }
      for (i = zs; i < this.buttons.length; i++) {
        if (na === this.buttons[i].info.active) {
          this.buttons[i].ᐃⵠᐃⵠ(L);
        }
      }
      this.ΔⵠΔΔ[Bb].ᐃⵠᐃⵠ(L);
      if (ig < (this.ΔᐃⵠⵠⲆ & (R | F))) {
        t = this.ΔⲆᐃᐃᐃⲆⲆ;
        Jm(L, t, bo - t.width / ls, 138, t.width / 2, t.height / Ob);
      }
      var V = Math.max(Tl, Math.min(18, Math.floor((bf.ⲆⲆΔⲆⲆ + eg) / Pn)));
      this.ΔⵠΔΔ[V].active = na;
      this.ΔⵠΔΔ[V].ᐃⵠᐃⵠ(L);
      this.ΔⵠΔΔ[V].active = ma;
      this.buttons[0].ᐃⵠᐃⵠ(L);
      if ((this.ΔᐃⵠⵠⲆ & (d | I | E | B | Q)) > 1) {
        var g = (this.ΔᐃⵠⵠⲆ & (I | E | B | Q)) > 1 ? -190 : Hi;
        t = ΔΔ[29][this.ᐃⵠΔⲆᐃ][this.ΔⲆⵠΔⲆΔΔ];
        Jm(L, t, bo - t.width / 4 + g, 183, t.width / lr, t.height / 2);
        this.ⲆᐃᐃⲆ = (this.ⲆᐃᐃⲆ + _w * 1000) % 2000;
        var u = (this.ⲆᐃᐃⲆ < 1000) * 4.5 ? this.ⲆᐃᐃⲆ / 1000 : (2000 - this.ⲆᐃᐃⲆ) / 1000;
        t = ΔΔ[28][this.ᐃΔⲆⵠⲆ][this.ΔⲆⵠΔⲆΔΔ];
        Jm(L, t, bo - t.width / Ng - 62 + u + g, 240, t.width / Rl, t.height / 2);
        t = ΔΔ[7][this.ΔⵠΔᐃ][this.ΔⲆⵠΔⲆΔΔ];
        Jm(L, t, bo - t.width / 4 - 54 + u + g, 272, t.width / pq, t.height / vg);
        Jm(L, t, bo - t.width / Fr + 54 - u + g, 272, t.width / 2, t.height / Vh);
        t = ΔΔ[255][this.ΔⵠΔᐃ][this.ΔⲆⵠΔⲆΔΔ];
        Jm(L, t, bo - t.width / Pl + g, 222, t.width / 2, t.height / Ul);
        t = ΔΔ[796][this.ΔⵠΔᐃᐃ][this.ΔⲆⵠΔⲆΔΔ];
        Jm(L, t, bo - t.width / Fr + g, 222, t.width / Pn, t.height / vg);
      }
      if ((this.ΔᐃⵠⵠⲆ & d) === d) {
        t = ΔΔ[250][this.ⲆⲆⲆⵠΔ][this.ΔⲆⵠΔⲆΔΔ];
        Jm(L, t, bo - t.width / Ng - 61, 406 - t.height / Fr, t.width / 2, t.height / 2);
        t = ΔΔ[250][this.ᐃᐃⵠΔΔ][this.ΔⲆⵠΔⲆΔΔ];
        Jm(L, t, bo - t.width / 4 + 53, 406 - t.height / ls, t.width / 2, t.height / eh);
      }
      if (D === (this.ΔᐃⵠⵠⲆ & D)) {
        t = ΔΔ[250][this.ᐃᐃⵠΔΔ][this.ΔⲆⵠΔⲆΔΔ];
        Jm(L, t, bo - t.width / 4 - 200, 268 - t.height / 4, t.width / 2, t.height / Hj);
      }
      if (_ === (this.ΔᐃⵠⵠⲆ & _)) {
        t = ΔΔ[250][this.ⲆⲆⲆⵠΔ][this.ΔⲆⵠΔⲆΔΔ];
        Jm(L, t, bo - t.width / 4 - 200, 268 - t.height / 4, t.width / 2, t.height / 2);
      }
      if ((this.ΔᐃⵠⵠⲆ & (I | E | B | Q | D | _)) > 1) {
        for (i = 1; i < this.buttons.length; i++) {
          if (this.buttons[i].view & this.ΔᐃⵠⵠⲆ) {
            var X = this.buttons[i].info;
            if (wg <= X.ᐃⵠΔᐃⲆⵠᐃ) {
              t = X.ⵠΔⵠⵠᐃⲆΔⲆⵠ[X.ᐃⵠΔᐃⲆⵠᐃ].ⵠΔⲆ;
              Jm(L, t, X.translate.x - t.width / 8 + 44.5, X.translate.y - t.height / Iq + 45.5, t.width / 4, t.height / 4);
              if (X.ΔⵠᐃⵠΔⵠⵠ !== 1) {
                t = Ⲇⵠ.ⵠΔΔⵠᐃⵠⵠ;
                Jm(L, t, X.translate.x - t.width / 4 + 44.5, X.translate.y - t.height / nl + 44.5, t.width / 2, t.height / pq);
              }
            }
          }
        }
        t = this.ᐃΔΔᐃⵠΔᐃ;
        Jm(L, t, bo - 312, 375, t.width / 2, t.height / 2);
        t = this.ᐃᐃⵠᐃᐃⵠⵠ;
        Jm(L, t, bo - 312, 395, t.width / xq, t.height / 2);
      }
      if (this.ⲆᐃᐃΔⲆ !== this.ⲆⲆⵠᐃⵠᐃⵠ) {
        this.ⲆⲆⵠᐃⵠᐃⵠ = this.ⲆᐃᐃΔⲆ;
        this.ΔⵠΔⵠⵠᐃⲆ = $v("" + this.ⲆᐃᐃΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Jm(L, this.ΔⵠΔⵠⵠᐃⲆ, this.ΔⵠΔΔ[Da].translate.x + 350, Ga, this.ΔⵠΔⵠⵠᐃⲆ.w2, this.ΔⵠΔⵠⵠᐃⲆ.ΔΔᐃᐃᐃ);
      if (this.ⲆⵠⲆⲆⵠᐃⵠ !== this.ⲆⲆΔⲆⲆ) {
        this.ⲆⵠⲆⲆⵠᐃⵠ = this.ⲆⲆΔⲆⲆ;
        this.ⵠᐃᐃⲆᐃΔⵠ = $v("LVL " + (this.ⲆⲆΔⲆⲆ + pu), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, Za, 30, 24, undefined, undefined, rk, Jo, "#3F3019", Xg);
      }
      Jm(L, this.ⵠᐃᐃⲆᐃΔⵠ, this.ΔⵠΔΔ[0].translate.x + 94, 0, this.ⵠᐃᐃⲆᐃΔⵠ.w2, this.ⵠᐃᐃⲆᐃΔⵠ.ΔΔᐃᐃᐃ);
      if (Ⲇⵠᐃⵠ.ⵠᐃᐃⵠΔⲆᐃ === 0) {
        var Y = this.buttons[ra].hint;
        if (Ih < Y) {
          t = Ⲇⵠ.ⵠⲆⲆᐃᐃⲆⵠ;
          Jm(L, t, bo - t.width / 4, -36 - ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(1 - Y) * t.height / H, t.width / Rl, t.height / 2);
        }
        if ((Y = this.buttons[sa].hint) > 0) {
          t = Ⲇⵠ.ΔΔᐃⵠΔᐃⵠ;
          Jm(L, t, bo - t.width / 4, -36 - t.height * ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(1 - Y) / 2, t.width / xq, t.height / 2);
        }
        if ((Y = this.buttons[ta].hint) > 0) {
          t = Ⲇⵠ.ᐃⲆⲆⵠΔΔⵠ;
          Jm(L, t, bo - t.width / 4, -36 - t.height * ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ($b - Y) / 2, t.width / 2, t.height / 2);
        }
        if ((Y = this.buttons[xa].hint) > 0) {
          t = Ⲇⵠ.ⵠⵠⵠΔΔⲆΔ;
          Jm(L, t, bo - t.width / Pe, -36 - ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(1 - Y) * t.height / 2, t.width / 2, t.height / lr);
        }
        if ((Y = this.buttons[wa].hint) > 0) {
          t = Ⲇⵠ.ΔΔᐃᐃⲆᐃⵠ;
          Jm(L, t, bo - t.width / 4, -36 - ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(Tl - Y) * t.height / 2, t.width / 2, t.height / as);
        }
        Y = this.buttons[va].hint;
        if (ig < Y) {
          t = Ⲇⵠ.ᐃᐃᐃᐃᐃⵠΔ;
          Jm(L, t, bo - t.width / 4, -36 - t.height * ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(gs - Y) / H, t.width / pq, t.height / 2);
        }
      }
      if (this.ΔⲆⵠΔⵠ === 1 && Math.abs(U - this.ⵠΔΔⵠᐃᐃΔ) < 0.006) {
        L.globalAlpha = Math.min(zg, this.ΔⲆᐃᐃⲆᐃΔ * 3);
        t = Ⲇⵠ.ᐃΔᐃⵠⲆⲆⲆ;
        L.save();
        L.translate(bo, 260);
        this.ΔⲆᐃᐃⲆᐃΔ += _w;
        L.rotate(this.ΔⲆᐃᐃⲆᐃΔ);
        Jm(L, t, -t.width / 2, -t.height / 2, t.width, t.height);
        L.restore();
        u = 1.05 + Math.cos(this.ΔⲆᐃᐃⲆᐃΔ * 5) * 0.05;
        if (this.ⲆᐃⵠⲆⵠᐃⵠ === wj) {
          var Z = u * (t = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[this.ᐃⵠⲆⲆⵠⲆⲆ].ⵠΔⲆ).width;
          var ba = t.height * u;
          Jm(L, t, bo - Z / 2, 260 - ba / rs, Z, ba);
        } else if (this.ⲆᐃⵠⲆⵠᐃⵠ === hb) {
          Z = u * (t = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[0].ⵠΔⲆ).width;
          ba = u * t.height;
          Jm(L, t, bo - Z / rs, 260 - ba / pq, Z, ba);
          Z = (t = ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ[this.ᐃⵠⲆⲆⵠⲆⲆ].ⵠΔⲆ).width * u;
          ba = t.height * u;
          Jm(L, t, bo - Z / 2, 260 - ba / 2, Z, ba);
        } else if (this.ⲆᐃⵠⲆⵠᐃⵠ === Vg) {
          Z = (t = ΔⲆⵠⲆ.ⵠⲆᐃᐃ[this.ᐃⵠⲆⲆⵠⲆⲆ].ⵠΔⲆ).width * u;
          ba = u * t.height;
          Jm(L, t, bo - Z / 2, 180 - ba / pq, Z, ba);
          Z = u * (t = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[0].ⵠΔⲆ).width;
          ba = t.height * u;
          Jm(L, t, bo - Z / Ug, 260 - ba / Ul, Z, ba);
        } else if (qo === this.ⲆᐃⵠⲆⵠᐃⵠ) {
          Z = u * (t = ΔⲆⵠⲆ.ᐃⵠΔΔⲆ[this.ᐃⵠⲆⲆⵠⲆⲆ].ⵠΔⲆ).width;
          ba = t.height * u;
          L.save();
          L.translate(bo, 260);
          L.rotate(Math.PI);
          Jm(L, t, -Z / 2, -ba / 2, Z, ba);
          L.restore();
        } else if (this.ⲆᐃⵠⲆⵠᐃⵠ === 4) {
          Z = u * (t = ΔⲆⵠⲆ.Δⵠᐃᐃⵠ[this.ᐃⵠⲆⲆⵠⲆⲆ].ⵠΔⲆ).width;
          ba = u * t.height;
          Jm(L, t, bo - Z / Vg, 260 - ba / xq, Z, ba);
        }
        t = this.ⵠⲆⲆⲆΔᐃΔ;
        Jm(L, t, bo - t.width / 4, 340, t.width / 2, t.height / 2);
        t = this.ⵠΔⲆⵠᐃᐃⵠ;
        Jm(L, t, bo - t.width / 4, 365, t.width / 2, t.height / 2);
        if (this.ΔⲆᐃᐃⲆᐃΔ > 6) {
          this.ΔⲆⵠΔⵠ = Mg;
          N(c);
        }
        L.globalAlpha = wt;
      }
      Xw.alert.ᐃⵠᐃⵠ("#FFF", "#000");
      if (S.waiting) {
        this.ᐃⵠⲆⲆⵠⲆⵠ.ᐃⵠᐃⵠ();
      }
    };
    var u = 0;
    var aa = Math.pow(as, u++);
    var b = Math.pow(2, u++);
    this.ᐃⵠⵠᐃⲆ = b;
    var v = Math.pow(2, u++);
    var d = Math.pow(2, u++);
    var c = Math.pow(2, u++);
    var m = Math.pow(Ul, u++);
    var p = Math.pow(2, u++);
    var z = Math.pow(2, u++);
    this.ⵠⵠⵠΔΔ = z;
    var C = Math.pow(It, u++);
    var y = Math.pow(xj, u++);
    var da = Math.pow(rs, u++);
    var P = Math.pow(2, u++);
    var A = Math.pow(eh, u++);
    var x = Math.pow(It, u++);
    var J = Math.pow(2, u++);
    var M = Math.pow(2, u++);
    var B = Math.pow(2, u++);
    var D = Math.pow(2, u++);
    var I = Math.pow(2, u++);
    var E = Math.pow(lr, u++);
    var Q = Math.pow(2, u++);
    var _ = Math.pow(lr, u++);
    var F = Math.pow(rs, u++);
    var R = Math.pow(vg, u++);
    var G = Math.pow(lr, u++);
    this.ΔⲆΔΔⵠ = G;
    var ea = Math.pow(2, u++);
    this.ΔᐃΔΔⵠ = ea;
    var W = Math.pow(2, u++);
    this.ΔΔᐃᐃⲆ = W;
    var O = Math.pow(2, u++);
    function w(a, b, c) {
      for (var d = Bb; d < S.ΔⵠΔΔ.length; d++) {
        if (S.ΔⵠΔΔ[d].view & a) {
          S.ΔⵠΔΔ[d].active = b;
        }
      }
      for (d = 0; d < S.buttons.length; d++) {
        if ((S.buttons[d].view & a) !== In) {
          S.buttons[d].info.active = b;
        }
      }
      for (d = 0; d < S.ΔⲆⵠⲆᐃ.length; d++) {
        if ((S.ΔⲆⵠⲆᐃ[d].view & a) !== Lr) {
          S.ΔⲆⵠⲆᐃ[d].style.display = c;
        }
      }
    }
    this.ΔᐃⵠⵠⲆ = aa;
    function q() {
      var a = Number(ⵠⵠΔΔ.get("starve_crate"));
      var b = Number(ⵠⵠΔΔ.get("starve_dead"));
      var c = Number(ⵠⵠΔΔ.get("starve_book"));
      var d = Number(ⵠⵠΔΔ.get("starve_bag"));
      var e = Number(ⵠⵠΔΔ.get("starve_skin"));
      var f = Number(ⵠⵠΔΔ.get("starve_accessory"));
      if (bf.unlock.ΔⵠΔᐃ[bf.ΔⵠΔᐃ] <= wj) {
        bf.ΔⵠΔᐃ = bf.unlock.ΔⵠΔᐃ[e] > Ih ? e : Ih;
      }
      if (bf.unlock.ᐃΔⲆⵠⲆ[bf.ᐃΔⲆⵠⲆ] <= os) {
        bf.ᐃΔⲆⵠⲆ = bf.unlock.ᐃΔⲆⵠⲆ[c] > Zj ? c : ya;
      }
      if (bf.unlock.ᐃᐃⵠΔΔ[bf.ᐃᐃⵠΔΔ] <= fl) {
        bf.ᐃᐃⵠΔΔ = bf.unlock.ᐃᐃⵠΔΔ[b] > 0 ? b : 0;
      }
      if (bf.unlock.ⲆⲆⲆⵠΔ[bf.ⲆⲆⲆⵠΔ] <= Da) {
        bf.ⲆⲆⲆⵠΔ = bf.unlock.ⲆⲆⲆⵠΔ[a] > ya ? a : 0;
      }
      if (bf.unlock.ΔⵠΔᐃᐃ[bf.ΔⵠΔᐃᐃ] <= Qs) {
        bf.ΔⵠΔᐃᐃ = bf.unlock.ΔⵠΔᐃᐃ[f] > 0 ? f : 0;
      }
      if (bf.unlock.ᐃⵠΔⲆᐃ[bf.ᐃⵠΔⲆᐃ] <= fl) {
        bf.ᐃⵠΔⲆᐃ = bf.unlock.ᐃⵠΔⲆᐃ[d] > Yh ? d : 0;
      }
    }
    function N(a) {
      if (S.ⲆᐃⲆⵠΔᐃⵠ !== vt) {
        w(C, ma, "none");
        w(y, ma, "none");
        q();
        if (a !== S.ΔᐃⵠⵠⲆ && S.ΔⲆⵠΔⵠ < za) {
          S.ⵠᐃⲆΔⲆ.style.display = a === aa || a === c || a === b || a === p || a === d || m === a ? "inline-block" : "none";
          w(S.ΔᐃⵠⵠⲆ, ma, "none");
          S.ΔᐃⵠⵠⲆ = a;
          w(S.ΔᐃⵠⵠⲆ, na, "inline-block");
        }
      }
    }
    function K(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (b !== cg) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== lj) {
          c();
        }
      };
      d.send();
    }
    function U() {
      if (Xw.ⲆΔΔᐃⵠᐃⲆ !== undefined && Xw.ⵠᐃⵠⲆΔᐃᐃ !== cn && Hl !== Xw.ΔⵠᐃΔⵠⵠⲆ) {
        q();
        if (xf % xq) {
          console.log(undefined);
          Ⲇⵠᐃⵠ.connect();
        } else {
          console.log(Hq);
          if (dj.Widget.isBlocked === 1) {
            dj.Widget.createAdPlayer(Ⲇⵠᐃⵠ.connect.bind(Ⲇⵠᐃⵠ), Ⲇⵠᐃⵠ.connect.bind(Ⲇⵠᐃⵠ));
          } else {
            dj.Widget.preroll();
            dj.Widget.play = Ⲇⵠᐃⵠ.connect.bind(Ⲇⵠᐃⵠ);
          }
        }
      }
    }
    this.ᐃⲆΔⵠᐃΔᐃ = Yh;
    this.ⵠᐃⵠΔ = N;
    this.ᐃⵠᐃΔΔⵠᐃ = function () {
      if (S.waiting === false) {
        Xw.reconnect.enabled = false;
        S.waiting = _g;
        if (Xw.ⲆΔΔᐃⵠᐃⲆ) {
          U();
        } else {
          K(`${Bf}token`, function (a) {
            const b = a.split("_");
            const c = b[Rq] + "_";
            const d = Number(b[gs]);
            const e = Math.abs(function (a) {
              return an(a, 8260, 46947, 8004, 37330, 5330);
            }(d));
            Xw.ⲆΔΔᐃⵠᐃⲆ = c + e;
            U();
          }, function () {
            S.waiting = false;
          });
        }
        K(`${Df}get`, function (a) {
          const b = a.split("_");
          const c = b[0] + "_";
          const d = Number(b[1]);
          const e = Math.abs(Ba(d));
          Xw.ⵠᐃⵠⲆΔᐃᐃ = c + e;
          U();
        }, function () {
          S.waiting = f;
        });
        K(`${Df}set`, function (a) {
          const b = a.split("_");
          const c = b[fl] + "_";
          const d = Number(b[1]);
          const e = Math.abs(function (a) {
            return lt(a, 19490, 6203, 53487, 30585);
          }(d));
          Xw.ΔⵠᐃΔⵠⵠⲆ = c + e;
          U();
        }, function () {
          S.waiting = Fh;
        });
      }
    };
    var V = ie;
    var X = pq;
    var Z = $l;
    var fa = br;
    var ha = bb;
    var ia = 32;
    var ja = mk;
    var ka = Ih;
    var la = ie;
    var ma = 0;
    var na = 1;
    if (dj.innerWidth < 1300) {
      this.ⲆⲆΔⵠᐃ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: na,
        position: Z | V,
        view: aa,
        translate: {
          x: 0,
          ⲆᐃⲆⲆⵠ: 200,
          y: 0,
          ⲆΔⲆⵠⲆ: 184
        }
      };
    } else {
      this.ⲆⲆΔⵠᐃ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: na,
        position: Z | ha,
        view: aa,
        translate: {
          ⲆᐃⲆⲆⵠ: -180,
          ⲆΔⲆⵠⲆ: 184,
          x: wj,
          y: 0
        }
      };
    }
    this.ⲆⲆΔⵠᐃ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !S.waiting && !S.ΔΔᐃΔΔⲆⲆᐃᐃ) {
        S.ᐃⵠᐃΔΔⵠᐃ();
      }
    });
    this.ⲆⲆΔⵠᐃ.input.value = ⵠⵠΔΔ.get("starve_nickname") ? ⵠⵠΔΔ.get("starve_nickname") : "";
    this.ᐃᐃⵠΔᐃⲆⲆⵠⵠ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: ma,
      position: Z | ha,
      view: b,
      translate: {
        ⲆΔⲆⵠⲆ: 110,
        x: 0,
        y: 0,
        ⲆᐃⲆⲆⵠ: -122
      }
    };
    if (dj.innerWidth < 1300) {
      this.ⲆΔⲆΔⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: na,
        position: Z | V,
        view: aa,
        translate: {
          y: 0,
          ⲆΔⲆⵠⲆ: 225,
          x: 0,
          ⲆᐃⲆⲆⵠ: 208
        }
      };
    } else {
      this.ⲆΔⲆΔⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: na,
        position: Z | ha,
        view: aa,
        translate: {
          ⲆᐃⲆⲆⵠ: -180,
          y: 0,
          x: wg,
          ⲆΔⲆⵠⲆ: 225
        }
      };
    }
    this.ⵠⵠⵠⵠ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: ma,
      position: Z | ha,
      view: p,
      translate: {
        ⲆΔⲆⵠⲆ: 190,
        x: 0,
        y: ig,
        ⲆᐃⲆⲆⵠ: -294.5
      }
    };
    this.ⲆⲆᐃⲆⲆΔΔⵠᐃ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: ma,
      position: Z | ha,
      view: b,
      translate: {
        ⲆΔⲆⵠⲆ: 187,
        ⲆᐃⲆⲆⵠ: 125,
        y: In,
        x: st
      }
    };
    this.ΔΔⵠⲆⵠⵠⵠⲆⵠ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: ma,
      position: Z | ha,
      view: W,
      translate: {
        ⲆΔⲆⵠⲆ: 350,
        ⲆᐃⲆⲆⵠ: -220,
        x: Yh,
        y: 0
      }
    };
    u = 0;
    this.ΔⲆⵠⲆᐃ = [];
    this.ΔⲆⵠⲆᐃ[u++] = this.ⲆⲆΔⵠᐃ;
    this.ΔⲆⵠⲆᐃ[u++] = this.ⲆΔⲆΔⵠ;
    this.ΔⲆⵠⲆᐃ[u++] = this.ⵠⵠⵠⵠ;
    this.ΔⲆⵠⲆᐃ[u++] = this.ᐃᐃⵠΔᐃⲆⲆⵠⵠ;
    this.ΔⲆⵠⲆᐃ[u++] = this.ⲆⲆᐃⲆⲆΔΔⵠᐃ;
    this.ΔⲆⵠⲆᐃ[u++] = this.ΔΔⵠⲆⵠⵠⵠⲆⵠ;
    u = Bb;
    this.ΔⵠΔΔ = [];
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ⵠᐃᐃᐃᐃⵠΔ, na, Lr, 0, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ⲆᐃⲆΔᐃⵠᐃ, ma, 0, ya, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ᐃᐃⲆⲆΔⵠⵠ, ma, Bb, 0, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ⲆᐃΔⵠⲆⵠⲆ, ma, 0, fl, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ⲆⵠᐃⲆⲆⲆΔ, ma, os, wj, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ΔⲆΔΔⵠᐃⲆ, ma, Da, Zj, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ⲆⵠⵠⲆᐃⵠΔ, ma, 0, 0, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ⵠᐃⵠΔᐃⲆⵠ, ma, In, 0, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ᐃᐃⵠⵠⵠΔⲆ, ma, 0, wj, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.Δᐃᐃᐃᐃᐃⵠ, ma, os, Rq, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ΔΔⲆᐃΔⲆⲆ, ma, 0, os, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ⵠⲆⲆⵠⵠᐃΔ, ma, Mg, 0, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ᐃΔⲆΔⵠᐃΔ, ma, 0, Qs, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ⵠᐃᐃⲆΔⲆᐃ, ma, 0, Lr, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ᐃᐃⲆᐃⵠⲆⲆ, ma, mj, 0, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ΔΔⵠⵠΔⲆᐃ, ma, 0, In, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ΔⵠⵠⲆΔΔⵠ, ma, 0, 0, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ΔᐃⵠⲆᐃΔⲆ, ma, 0, 0, V);
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ᐃⲆⵠᐃⵠⵠⲆ, ma, In, Zj, V);
    if (dj.innerWidth < 1300) {
      this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃΔᐃΔⲆΔⵠ, na, 200, 100, Z | V);
    } else {
      this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃΔᐃΔⲆΔⵠ, na, -753 / 4, el, Z | ha);
    }
    this.ΔⵠΔΔ[u++].view = aa;
    this.ΔⵠΔΔ[u++] = aw(Ⲇⵠ.ⲆΔΔⲆⵠΔⵠ, na, 403, -10, X);
    if (dj.innerWidth > 1300) {
      this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ⵠΔᐃⲆⵠᐃⵠ, na, -885 / 4, -159.5, fa | ha);
      this.ΔⵠΔΔ[u++].view = aa;
    }
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ΔΔᐃⵠΔⵠᐃ, ma, -1293 / ba, el, Z | ha);
    this.ΔⵠΔΔ[u++].view = b;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ⲆⵠᐃᐃⲆΔⵠ, ma, -356.25, ar, Z | ha);
    this.ΔⵠΔΔ[u++].view = d;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃⲆⵠⲆⵠΔⲆ, ma, -905 / 4, 50, Z | ha);
    this.ΔⵠΔΔ[u++].view = v;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃΔⵠⵠⲆⵠⵠ, ma, -1608 / Mq, 130, Z | ha);
    this.ΔⵠΔΔ[u++].view = c;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃⲆΔᐃΔⵠΔ, ma, -1117 / Ct, 130, Z | ha);
    this.ΔⵠΔΔ[u++].view = G;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ΔᐃⲆᐃⵠⲆᐃ, ma, -1222 / Pl, 130, Z | ha);
    this.ΔⵠΔΔ[u++].view = ea;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ⲆⵠΔΔΔⲆᐃ, ma, -1222 / Pl, 100, Z | ha);
    this.ΔⵠΔΔ[u++].view = W;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ⲆⵠⲆΔⵠᐃᐃ, ma, -Ⲇⵠ.ⲆⵠⲆΔⵠᐃᐃ.width / Gi - 350, -Ab, Z | ha);
    this.ΔⵠΔΔ[u++].view = O;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃΔⲆⲆⲆᐃᐃ, ma, -374.25, 110, Z | ha);
    this.ΔⵠΔΔ[u++].view = m;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃΔⲆⲆⲆⲆᐃ, ma, -306.5, Y, Z | ha);
    this.ΔⵠΔΔ[u++].view = p;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ⲆⵠΔⵠⵠΔΔ, ma, -1381 / Wg, 80, Z | ha);
    this.ΔⵠΔΔ[u++].view = z;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ⲆⲆΔⲆⵠᐃᐃ, ma, -1542 / Gi, 150, Z | ha);
    this.ΔⵠΔΔ[u++].view = da;
    var oa = 3.6;
    var pa = this.ⲆΔⲆΔⵠⵠΔ([["#25c5d6", nq * oa], ["#e2cf27", oa * sk], ["#afac98", 108], ["#d88e23", oa * 57]]);
    this.ΔⵠΔΔ[u] = aw(pa, ma, -pa.width / 4, 178, Z | ha);
    this.ΔⵠΔΔ[u++].view = da;
    this.ⵠᐃⲆΔᐃⲆⲆⲆⲆ = function (a, b, c) {
      var d;
      S.ΔⲆⵠΔⵠ = 1;
      S.ΔᐃᐃᐃᐃⲆⵠ = os;
      S.ΔⲆᐃᐃⲆᐃΔ = Da;
      S.ⵠΔΔⵠᐃᐃΔ = a;
      S.ⲆᐃⵠⲆⵠᐃⵠ = b;
      var e = wg;
      if (os === b) {
        for (e = 0; e < ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ.length && ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[e].id !== c; e++);
        d = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[e];
        S.unlock.ΔⵠΔᐃ[e] = Xn;
      } else if (b === 1) {
        for (e = 0; e < ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ.length && c !== ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ[e].id; e++);
        d = ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ[e];
        S.unlock.ΔⵠΔᐃᐃ[e] = 1;
      } else if (b === 2) {
        for (e = ig; e < ΔⲆⵠⲆ.ⵠⲆᐃᐃ.length && ΔⲆⵠⲆ.ⵠⲆᐃᐃ[e].id !== c; e++);
        d = ΔⲆⵠⲆ.ⵠⲆᐃᐃ[e];
        S.unlock.ᐃⵠΔⲆᐃ[e] = wt;
      } else if (b === 3) {
        for (e = 0; e < ΔⲆⵠⲆ.ᐃⵠΔΔⲆ.length && c !== ΔⲆⵠⲆ.ᐃⵠΔΔⲆ[e].id; e++);
        d = ΔⲆⵠⲆ.ᐃⵠΔΔⲆ[e];
        S.unlock.ᐃΔⲆⵠⲆ[e] = $b;
      } else if (tb === b) {
        for (e = ig; ΔⲆⵠⲆ.Δⵠᐃᐃⵠ.length > e && ΔⲆⵠⲆ.Δⵠᐃᐃⵠ[e].id !== c; e++);
        d = ΔⲆⵠⲆ.Δⵠᐃᐃⵠ[e];
        S.unlock.ⲆⲆⲆⵠΔ[e] = pu;
        S.unlock.ᐃᐃⵠΔΔ[e] = hb;
      }
      S.ᐃⵠⲆⲆⵠⲆⲆ = e;
      S.ⵠΔⲆⵠᐃᐃⵠ = $v("by " + d.ᐃΔᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, T, 30, 24, undefined, cn, undefined, cb, "#000000", 24);
      S.ⵠⲆⲆⲆΔᐃΔ = $v(d.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, xg, undefined, cb, undefined, "#000000", 20);
    };
    this.ΔⲆⵠΔⵠ = 0;
    this.ΔᐃᐃᐃᐃⲆⵠ = Da;
    this.ⵠΔΔⵠᐃᐃΔ = 0;
    this.ⲆᐃⵠⲆⵠᐃⵠ = 0;
    this.ΔⲆᐃᐃⲆᐃΔ = Rq;
    this.ⵠΔⲆⵠᐃᐃⵠ = undefined;
    this.ⵠⲆⲆⲆΔᐃΔ = undefined;
    var qa = 262 - 260 / nl;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ⲆⵠᐃⵠⲆⲆᐃ, ma, -1542 / Pl, 150, Z | ha);
    this.ΔⵠΔΔ[u++].view = J;
    pa = this.ⲆΔⲆΔⵠⵠΔ([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", oa * 57]]);
    this.ΔⵠΔΔ[u] = aw(pa, ma, -pa.width / 4, 178, Z | ha);
    this.ΔⵠΔΔ[u++].view = J;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃᐃᐃΔⵠⵠⵠ, ma, -1542 / nj, 150, Z | ha);
    this.ΔⵠΔΔ[u++].view = A;
    pa = this.ⲆΔⲆΔⵠⵠΔ([["#d33a2a", oa * Lg], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", oa * 57]]);
    this.ΔⵠΔΔ[u] = aw(pa, ma, -pa.width / Ng, 178, Z | ha);
    this.ΔⵠΔΔ[u++].view = A;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃΔⲆⲆᐃⵠᐃ, ma, -385.5, 150, Z | ha);
    this.ΔⵠΔΔ[u++].view = x;
    pa = this.ⲆΔⲆΔⵠⵠΔ([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", oa * 57]]);
    this.ΔⵠΔΔ[u] = aw(pa, ma, -pa.width / 4, 178, Z | ha);
    this.ΔⵠΔΔ[u++].view = x;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ΔⲆᐃⵠᐃⵠⲆ, ma, -385.5, 150, Z | ha);
    this.ΔⵠΔΔ[u++].view = P;
    pa = this.ⲆΔⲆΔⵠⵠΔ([["#d45ce5", 10.8], ["#25c5d6", oa * Zk], ["#e2cf27", 108], ["#afac98", oa * 57]]);
    this.ΔⵠΔΔ[u] = aw(pa, ma, -pa.width / Ls, 178, Z | ha);
    this.ΔⵠΔΔ[u++].view = P;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ΔᐃΔⵠΔΔⵠ, ma, -1542 / Os, 150, Z | ha);
    this.ΔⵠΔΔ[u++].view = M;
    pa = this.ⲆΔⲆΔⵠⵠΔ([["#d33a2a", ub * oa], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", oa * 57]]);
    this.ΔⵠΔΔ[u] = aw(pa, ma, -pa.width / Ls, 178, Z | ha);
    this.ΔⵠΔΔ[u++].view = M;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ⵠⲆΔⲆⲆᐃᐃ, ma, -341.5, 100, Z | ha);
    this.ΔⵠΔΔ[u++].view = B;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃᐃⵠⲆΔⵠⲆ, ma, -1366 / tb, 100, Z | ha);
    this.ΔⵠΔΔ[u++].view = Q;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ⵠⵠⲆⵠΔᐃⲆ, ma, -1366 / $i, 100, Z | ha);
    this.ΔⵠΔΔ[u++].view = I;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ⵠⲆⵠᐃΔΔᐃ, ma, -341.5, Uh, Z | ha);
    this.ΔⵠΔΔ[u++].view = E;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ⵠΔᐃⲆΔⲆΔ, ma, -341.5, 100, Z | ha);
    this.ΔⵠΔΔ[u++].view = D;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ΔΔⵠᐃᐃⵠⲆ, ma, -1366 / $i, ql, Z | ha);
    this.ΔⵠΔΔ[u++].view = _;
    ⲆⵠⵠΔΔⵠΔ = u++;
    this.ΔⵠΔΔ[ⲆⵠⵠΔΔⵠΔ] = aw(Ⲇⵠ.ⲆⵠⵠΔΔⵠΔ, ma, 908 / Ul + 30, 0, Z);
    ΔᐃᐃᐃΔⵠⵠ = u++;
    this.ΔⵠΔΔ[ΔᐃᐃᐃΔⵠⵠ] = aw(Ⲇⵠ.ΔᐃᐃᐃΔⵠⵠ, ma, 908 / vg + 597 / Ug + 60, Ih, Z);
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ΔⲆᐃⲆᐃᐃΔ, ma, -189.5, -nr, Z | ha);
    this.ΔⵠΔΔ[u++].view = y;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃⵠᐃΔⵠⲆⲆ, ma, -189.5, -Ll, Z | ha);
    this.ΔⵠΔΔ[u++].view = C;
    ΔⵠⲆⵠᐃᐃⵠ = u++;
    this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ] = aw(Ⲇⵠ.ⵠⲆⲆⲆΔᐃⲆ, na, 93, 30, Z);
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ᐃⲆⵠⵠⵠⲆΔ, ma, -692 / es, 110, Z | ha);
    this.ΔⵠΔΔ[u++].view = F;
    this.ΔⵠΔΔ[u] = aw(Ⲇⵠ.ΔᐃⲆᐃᐃⵠⵠ, ma, -692 / nj, 110, Z | ha);
    this.ΔⵠΔΔ[u++].view = R;
    u = Hi;
    this.buttons = [];
    this.buttons[u] = _v(50, 57, 0, [Ⲇⵠ.ᐃᐃⵠᐃⵠⵠⲆ, Ⲇⵠ.ⵠⵠⲆᐃᐃΔⲆ, Ⲇⵠ.ⲆⲆᐃᐃΔⵠⲆ], ja, ka, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        N(z);
      } else {
        N(v);
      }
    }, 320, 0, V, na);
    u++;
    if (dj.innerWidth < 1300) {
      this.buttons[u] = _v(202, 97, 0, [Ⲇⵠ.ᐃⲆΔΔΔⲆⵠ, Ⲇⵠ.ⵠᐃⵠⲆⵠΔᐃ, Ⲇⵠ.ⵠⲆⲆⲆⵠΔⵠ], ja, ka, this.ᐃⵠᐃΔΔⵠᐃ, 462, 235, Z | V, na);
    } else {
      this.buttons[u] = _v(202, 97, 0, [Ⲇⵠ.ᐃⲆΔΔΔⲆⵠ, Ⲇⵠ.ⵠᐃⵠⲆⵠΔᐃ, Ⲇⵠ.ⵠⲆⲆⲆⵠΔⵠ], ja, ka, this.ᐃⵠᐃΔΔⵠᐃ, 74, 235, Z | ha, na);
    }
    this.buttons[u].view = aa;
    u++;
    if (dj.innerWidth > 1300) {
      this.buttons[u] = _v(355, 168, 0, [Ⲇⵠ.ⲆⵠΔⵠᐃΔΔ, Ⲇⵠ.ⲆⵠΔⵠᐃΔΔ, Ⲇⵠ.ⲆⵠΔⵠᐃΔΔ], ja, ka, function () {
        dj.open("./changelog.html", "_blank");
      }, -195, -115, fa | ha, na);
      this.buttons[u++].view = aa;
      this.buttons[u] = _v(355, 168, 0, [Ⲇⵠ.ⵠⲆᐃΔᐃᐃⵠ, Ⲇⵠ.ⵠⲆᐃΔᐃᐃⵠ, Ⲇⵠ.ⵠⲆᐃΔᐃᐃⵠ], ja, ka, function () {
        dj.open("https://taming.io", "_blank");
      }, 20, -115, fa | ha, na);
      this.buttons[u++].view = aa;
    }
    this.buttons[u++] = _v(80, 80, 0, [Ⲇⵠ.ⵠᐃᐃΔᐃⲆΔ, Ⲇⵠ.ⲆᐃⲆᐃⲆΔΔ, Ⲇⵠ.ΔᐃΔΔΔΔⲆ], ja, ka, function () {
      dj.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, te, X, na);
    this.buttons[u++] = _v(80, 80, 0, [Ⲇⵠ.ᐃΔᐃᐃⲆⵠᐃ, Ⲇⵠ.ΔΔⵠⵠⵠⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠᐃΔ], ja, ka, function () {
      dj.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, X, na);
    this.buttons[u++] = _v(80, 80, 0, [Ⲇⵠ.ᐃᐃⵠᐃΔᐃⵠ, Ⲇⵠ.ΔⵠᐃᐃᐃΔΔ, Ⲇⵠ.ⲆΔⲆᐃⲆΔⵠ], ja, ka, function () {
      dj.open("https://reddit.com/r/starveio", "_blank");
    }, 280, jn, X, na);
    this.buttons[u++] = _v(80, 80, 0, [Ⲇⵠ.ⵠⲆΔⵠⵠᐃᐃ, Ⲇⵠ.ⲆΔⵠΔⵠⲆⵠ, Ⲇⵠ.ⵠⲆΔⵠᐃᐃΔ], ja, ka, function () {
      dj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, X, na);
    this.buttons[u++] = _v(80, 80, 0, [Ⲇⵠ.Δⵠⵠᐃⵠᐃⵠ, Ⲇⵠ.ᐃⲆΔΔΔΔⵠ, Ⲇⵠ.ⵠᐃⵠⲆΔⵠᐃ], ja, ka, function () {
      dj.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, X, na);
    this.buttons[u++] = _v(80, 80, 0, [Ⲇⵠ.ᐃΔΔΔᐃᐃᐃ, Ⲇⵠ.ΔⵠⲆᐃⵠⲆⲆ, Ⲇⵠ.ΔΔⲆⲆΔᐃⵠ], ja, ka, function () {
      dj.open("https://twitter.com/lapamauve", "_blank");
    }, 105, vr, X, na);
    this.buttons[u++] = _v(80, 80, 0, [Ⲇⵠ.ⵠⵠᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃᐃⲆΔΔⵠⲆ, Ⲇⵠ.ⲆᐃⲆΔⲆΔⵠ], ja, ka, function () {
      dj.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, X, na);
    ᐃΔⲆⲆⵠᐃⵠ = u++;
    this.buttons[ᐃΔⲆⲆⵠᐃⵠ] = _v(232, 142, 0, [Ⲇⵠ.ᐃⵠⲆⲆⲆᐃΔ, Ⲇⵠ.ⵠΔᐃⵠᐃⵠⲆ, Ⲇⵠ.ⵠⵠᐃΔⵠⲆᐃ], ja, ka, function () {
      N(p);
      Yf(bf.ⵠΔΔⵠⵠᐃᐃ, bf.ⵠⵠⲆᐃⵠΔⵠ, bf.ⵠⵠⲆⲆⵠᐃΔ, bf.ᐃⵠⵠΔⲆⲆⵠ);
    }, -5, 573, V, na);
    this.buttons[u++] = _v(236, 165, 0, [Ⲇⵠ.ⵠⵠΔⵠⲆΔⵠ, Ⲇⵠ.ⵠⵠΔⵠⲆΔⵠ, Ⲇⵠ.ⵠⵠΔⵠⲆΔⵠ], ja, la, function () {
      N(p);
    }, -5, 566, V, na);
    ΔΔⲆⲆⲆⲆΔ = u++;
    this.buttons[ΔΔⲆⲆⲆⲆΔ] = _v(236, 165, 0, [Ⲇⵠ.ⵠΔᐃΔⵠΔⲆ, Ⲇⵠ.Δⵠᐃᐃⵠⵠⵠ, Ⲇⵠ.ᐃᐃⲆⲆⲆⵠᐃ], ja, ka, function () {
      N(m);
    }, -kq, 494, V, na);
    this.buttons[u++] = _v(236, 165, 0, [Ⲇⵠ.ⲆΔᐃΔΔⵠᐃ, Ⲇⵠ.ⲆΔᐃΔΔⵠᐃ, Ⲇⵠ.ⲆΔᐃΔΔⵠᐃ], ja, la, function () {
      N(m);
    }, -5, 494, V, na);
    ⲆⵠΔΔΔΔⲆ = u++;
    this.buttons[ⲆⵠΔΔΔΔⲆ] = _v(236, 165, 0, [Ⲇⵠ.ⵠΔᐃΔⵠΔⲆ, Ⲇⵠ.Δⵠᐃᐃⵠⵠⵠ, Ⲇⵠ.ᐃᐃⲆⲆⲆⵠᐃ], ja, ka, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        if (st < bf.ΔⵠᐃⵠᐃΔⲆ - Date.now()) {
          N(W);
        }
      } else {
        N(v);
      }
    }, -5, 415, V, na);
    this.buttons[u++] = _v(236, 165, 0, [Ⲇⵠ.ΔᐃᐃⲆⵠⵠᐃ, Ⲇⵠ.ΔᐃᐃⲆⵠⵠᐃ, Ⲇⵠ.ΔᐃᐃⲆⵠⵠᐃ], ja, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        if (bf.ΔⵠᐃⵠᐃΔⲆ - Date.now() > 0) {
          N(W);
        }
      } else {
        N(v);
      }
    }, -5, 415, V, na);
    ⵠΔΔᐃⲆᐃⵠ = u++;
    this.buttons[ⵠΔΔᐃⲆᐃⵠ] = _v(236, 165, 0, [Ⲇⵠ.ⵠΔᐃΔⵠΔⲆ, Ⲇⵠ.Δⵠᐃᐃⵠⵠⵠ, Ⲇⵠ.ᐃᐃⲆⲆⲆⵠᐃ], ja, ka, function () {
      N(c);
    }, -5, 336, V, na);
    this.buttons[u++] = _v(236, 165, 0, [Ⲇⵠ.ⲆᐃⲆⵠᐃΔΔ, Ⲇⵠ.ⲆᐃⲆⵠᐃΔΔ, Ⲇⵠ.ⲆᐃⲆⵠᐃΔΔ], ja, la, function () {
      N(c);
    }, -5, 336, V, na);
    ⵠⲆⵠⵠᐃΔⵠ = u++;
    this.buttons[ⵠⲆⵠⵠᐃΔⵠ] = _v(236, 165, 0, [Ⲇⵠ.ⵠΔᐃΔⵠΔⲆ, Ⲇⵠ.Δⵠᐃᐃⵠⵠⵠ, Ⲇⵠ.ᐃᐃⲆⲆⲆⵠᐃ], ja, ka, function () {
      N(d);
    }, -5, 257, V, na);
    this.buttons[u++] = _v(236, 165, 0, [Ⲇⵠ.ᐃⵠⲆΔᐃΔⵠ, Ⲇⵠ.ᐃⵠⲆΔᐃΔⵠ, Ⲇⵠ.ᐃⵠⲆΔᐃΔⵠ], ja, la, function () {
      N(d);
    }, -Qu, 257, V, na);
    ⵠᐃⵠⲆⵠΔΔ = u++;
    this.buttons[ⵠᐃⵠⲆⵠΔΔ] = _v(236, 165, 0, [Ⲇⵠ.ⵠΔᐃΔⵠΔⲆ, Ⲇⵠ.Δⵠᐃᐃⵠⵠⵠ, Ⲇⵠ.ᐃᐃⲆⲆⲆⵠᐃ], ja, ka, function () {
      N(aa);
    }, -5, 178, V, na);
    this.buttons[u++] = _v(236, 165, 0, [Ⲇⵠ.ᐃⵠᐃΔᐃᐃᐃ, Ⲇⵠ.ᐃⵠᐃΔᐃᐃᐃ, Ⲇⵠ.ᐃⵠᐃΔᐃᐃᐃ], ja, la, function () {
      N(aa);
    }, -5, 178, V, na);
    ⵠᐃΔⵠⵠⵠᐃ = u++;
    this.ⵠᐃΔⵠⵠⵠᐃ = ⵠᐃΔⵠⵠⵠᐃ;
    this.buttons[ⵠᐃΔⵠⵠⵠᐃ] = _v(324, 222, 0, [Ⲇⵠ.ⲆⵠⵠⵠᐃΔᐃ, Ⲇⵠ.ΔⲆΔᐃᐃⵠᐃ, Ⲇⵠ.ᐃⵠᐃΔⲆΔΔ], ja, ka, function () {
      N(v);
    }, 0, 70, V, na);
    ⲆⲆᐃⵠΔΔᐃ = u++;
    ⲆΔᐃⵠⲆⲆⲆ = u++;
    this.ⲆⲆᐃⵠΔΔᐃ = ⲆⲆᐃⵠΔΔᐃ;
    this.ⲆΔᐃⵠⲆⲆⲆ = ⲆΔᐃⵠⲆⲆⲆ;
    this.buttons[ⲆⲆᐃⵠΔΔᐃ] = _v(324, 222, 0, [Ⲇⵠ.ΔΔΔᐃⲆΔᐃ, Ⲇⵠ.ⲆⲆᐃᐃΔᐃΔ, Ⲇⵠ.ⲆᐃΔΔᐃⲆᐃ], ja, ka, function () {
      N(b);
      Aa(-1);
    }, wj, 70, V, ma);
    this.buttons[ⲆΔᐃⵠⲆⲆⲆ] = _v(324, 222, 0, [Ⲇⵠ.ⲆⲆΔΔᐃⵠᐃ, Ⲇⵠ.ⲆⲆΔΔᐃⵠᐃ, Ⲇⵠ.ⲆⲆΔΔᐃⵠᐃ], ja, la, function () {
      N(b);
      Aa(-zg);
    }, ya, 70, V, ma);
    if (Ⲇⵠᐃⵠ.ⵠᐃᐃⵠΔⲆᐃ === 0) {
      var ra = u++;
      if (dj.innerWidth < 1300) {
        this.buttons[ra] = _v(266, 176, 0, [Ⲇⵠ.ΔΔⵠⵠⵠⵠᐃ, Ⲇⵠ.ⵠΔᐃΔⲆΔⲆ, Ⲇⵠ.ⲆΔᐃᐃⲆΔⵠ], ja, ka, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(kw.ⵠᐃᐃⲆⲆ);
        }, 150, 300, V | Z, na);
      } else {
        this.buttons[ra] = _v(266, 176, 0, [Ⲇⵠ.ΔΔⵠⵠⵠⵠᐃ, Ⲇⵠ.ⵠΔᐃΔⲆΔⲆ, Ⲇⵠ.ⲆΔᐃᐃⲆΔⵠ], ja, ka, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(kw.ⵠᐃᐃⲆⲆ);
        }, -340, 100, ha | Z, na);
      }
      this.buttons[ra].view = aa;
      this.buttons[ra].hint = 0;
      var sa = u++;
      if (dj.innerWidth < 1300) {
        this.buttons[sa] = _v(266, 176, 0, [Ⲇⵠ.ΔΔⵠᐃᐃΔΔ, Ⲇⵠ.ⲆⵠⲆⲆⵠΔΔ, Ⲇⵠ.ᐃΔΔΔⲆᐃⵠ], ja, ka, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(kw.ⲆⲆⲆⲆᐃ);
        }, 150, 400, V | Z, na);
      } else {
        this.buttons[sa] = _v(266, 176, 0, [Ⲇⵠ.ΔΔⵠᐃᐃΔΔ, Ⲇⵠ.ⲆⵠⲆⲆⵠΔΔ, Ⲇⵠ.ᐃΔΔΔⲆᐃⵠ], ja, ka, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(kw.ⲆⲆⲆⲆᐃ);
        }, -340, 200, ha | Z, na);
      }
      this.buttons[sa].view = aa;
      this.buttons[sa].hint = Da;
      var ta = u++;
      if (dj.innerWidth < 1300) {
        this.buttons[ta] = _v(266, 176, 0, [Ⲇⵠ.ⵠΔΔΔⵠᐃⲆ, Ⲇⵠ.ᐃⵠΔⵠⵠΔⵠ, Ⲇⵠ.ᐃⲆⵠᐃⵠⵠΔ], ja, ka, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(kw.ⵠΔⲆᐃⵠ);
        }, 450, 300, V | Z, na);
      } else {
        this.buttons[ta] = _v(266, 176, 0, [Ⲇⵠ.ⵠΔΔΔⵠᐃⲆ, Ⲇⵠ.ᐃⵠΔⵠⵠΔⵠ, Ⲇⵠ.ᐃⲆⵠᐃⵠⵠΔ], ja, ka, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(kw.ⵠΔⲆᐃⵠ);
        }, -340, 300, ha | Z, na);
      }
      this.buttons[ta].view = aa;
      this.buttons[ta].hint = 0;
      var va = u++;
      if (dj.innerWidth < 1300) {
        this.buttons[va] = _v(266, 176, 0, [Ⲇⵠ.ⵠⵠⵠᐃΔΔΔ, Ⲇⵠ.ⵠⲆⵠΔᐃΔⲆ, Ⲇⵠ.ᐃⲆᐃΔΔⵠᐃ], ja, ka, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(kw.ΔΔΔΔᐃ);
        }, 300, 300, V | Z, na);
      } else {
        this.buttons[va] = _v(266, 176, 0, [Ⲇⵠ.ⵠⵠⵠᐃΔΔΔ, Ⲇⵠ.ⵠⲆⵠΔᐃΔⲆ, Ⲇⵠ.ᐃⲆᐃΔΔⵠᐃ], ja, ka, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(kw.ΔΔΔΔᐃ);
        }, 204, Nn, ha | Z, na);
      }
      this.buttons[va].view = aa;
      this.buttons[va].hint = 0;
      var wa = u++;
      if (dj.innerWidth < 1300) {
        this.buttons[wa] = _v(266, 176, 0, [Ⲇⵠ.ᐃⵠⵠΔⵠΔᐃ, Ⲇⵠ.ΔⲆⵠⵠⲆⲆⵠ, Ⲇⵠ.ⲆΔⵠᐃⵠΔⵠ], ja, ka, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(kw.ᐃᐃⲆΔⵠ);
        }, 300, 400, V | Z, na);
      } else {
        this.buttons[wa] = _v(266, 176, 0, [Ⲇⵠ.ᐃⵠⵠΔⵠΔᐃ, Ⲇⵠ.ΔⲆⵠⵠⲆⲆⵠ, Ⲇⵠ.ⲆΔⵠᐃⵠΔⵠ], ja, ka, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(kw.ᐃᐃⲆΔⵠ);
        }, 204, 200, ha | Z, na);
      }
      this.buttons[wa].view = aa;
      this.buttons[wa].hint = Mg;
      var xa = u++;
      this.buttons[xa] = _v(266, 176, 0, [Ⲇⵠ.ⵠⲆⵠⵠⲆᐃΔ, Ⲇⵠ.ⵠᐃΔΔⵠᐃᐃ, Ⲇⵠ.ⵠⲆᐃᐃⵠΔⲆ], ja, ka, function () {
        Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(kw.ⵠΔᐃᐃⲆ);
      }, dj.innerWidth < 1300 ? 450 : 204, dj.innerWidth < 1300 ? 400 : 300, (dj.innerWidth < 1300 ? V : ha) | Z, na);
      this.buttons[xa].view = aa;
      this.buttons[xa].hint = 0;
    }
    function Aa(a, b) {
      if (b !== undefined) {
        bf.ΔΔⵠΔΔᐃΔ = b;
        var c = bf.ΔⵠᐃΔⲆⵠΔ[b];
        bf.ⲆΔΔᐃⲆ = c.score;
        bf.ⵠᐃⵠΔᐃ = c.kill;
        bf.ΔⲆⲆΔⲆᐃⵠ = c.death;
        bf.time = c.time;
        bf.ⵠᐃΔᐃⲆⵠᐃ = c.bestScore;
        bf.ⵠⲆⵠΔⵠⲆᐃ = c.bestKill;
        bf.ᐃΔⲆⵠᐃᐃΔ = c.bestTime;
        bf.ⲆⲆΔΔⵠΔⲆ = c.scoreTotal;
      }
      if (a === undefined) {
        a = bf.ᐃⲆᐃⵠᐃΔⲆ;
      }
      bf.ᐃⲆᐃⵠᐃΔⲆ = a;
      if (a >= wj) {
        document.getElementById("stats_box_time").innerHTML = bf.ᐃΔⲆⵠᐃᐃΔ[a];
        document.getElementById("stats_box_kill").innerHTML = bf.ⵠⲆⵠΔⵠⲆᐃ[a];
        document.getElementById("stats_box_score").innerHTML = bf.ⵠᐃΔᐃⲆⵠᐃ[a];
      } else {
        var d = 0;
        for (var f = st; f < bf.ⵠᐃⵠΔᐃ.length; f++) {
          d += bf.ⵠᐃⵠΔᐃ[f];
        }
        var g = os;
        for (f = 0; bf.time.length > f; f++) {
          g += bf.time[f];
        }
        document.getElementById("stats_box_time").innerHTML = g;
        document.getElementById("stats_box_kill").innerHTML = d;
        document.getElementById("stats_box_score").innerHTML = bf.ⲆΔΔᐃⲆ;
      }
    }
    this.buttons[u] = _v(87, 78, 0, [Ⲇⵠ.ⲆⵠΔⲆⵠⲆΔ, Ⲇⵠ.ⵠⲆᐃⵠΔΔⵠ, Ⲇⵠ.ⲆΔⲆΔᐃᐃᐃ], ja, ka, function () {
      bf.ΔⵠᐃⲆⵠᐃᐃΔᐃ();
      if (bf.ⲆΔΔⵠᐃⲆⲆ === 0) {
        N(R);
      } else {
        N(F);
      }
    }, 127, 110, ha | Z, ma);
    this.buttons[u++].view = b;
    this.buttons[u] = _v(87, 78, 0, [Ⲇⵠ.ⲆᐃᐃΔⵠᐃⲆ, Ⲇⵠ.ⵠᐃⲆⵠⲆⲆⵠ, Ⲇⵠ.ⲆᐃΔⲆᐃⵠⲆ], ja, ka, function () {
      if (Ef === Sf && dj.FB && dj.FB.getUserID()) {
        dj.FB.logout();
      }
      if (If === Sf && gx !== cb) {
        dj.gapi.auth2.getAuthInstance().signOut();
        gx = Hl;
      }
      dx = undefined;
      cx = Hl;
      Sf = undefined;
      ex = 0;
      bf.ⲆΔⲆΔᐃ = 0;
      bf.ⲆᐃᐃΔⲆ = 0;
      bf.ⲆΔΔᐃⲆ = Zj;
      bf.ΔⲆᐃⵠᐃΔⲆ();
      ⲆⲆᐃⲆΔΔⵠⲆᐃ();
    }, Hs, 110, ha | Z, ma);
    this.buttons[u++].view = b;
    this.buttons[u] = _v(58, 64, 0, [Ⲇⵠ.ΔⲆⵠΔⵠⵠᐃ, Ⲇⵠ.ΔⵠΔᐃᐃΔᐃ, Ⲇⵠ.ⲆΔⲆΔΔⵠⵠ], ja, ka, function () {
      N(aa);
    }, 189, 118, ha | Z, ma);
    this.buttons[u++].view = v;
    this.buttons[u] = _v(497, 72, 0, [Ⲇⵠ.ⲆΔΔⵠΔᐃⵠ, Ⲇⵠ.ⲆⲆⵠΔⲆⵠΔ, Ⲇⵠ.ΔᐃⲆΔᐃⲆⵠ], ja, ka, function () {
      dj.gapi.auth2.getAuthInstance().signIn();
    }, -130, 390, ha | Z, ma);
    this.buttons[u++].view = v;
    this.buttons[u] = _v(497, 72, 0, [Ⲇⵠ.ⵠⵠΔⵠΔⲆⲆ, Ⲇⵠ.ᐃᐃΔΔⵠᐃΔ, Ⲇⵠ.ⵠΔⲆⵠⲆΔⵠ], ja, ka, function () {
      dj.FB.login(function (a) {
        if (a.authResponse) {
          dj.FB.api("/me", function (a) {
            Sf = Ef;
            cx = dj.FB.getAuthResponse().accessToken;
            Zf();
            dj.ᐃΔⲆΔᐃᐃⵠ(dx);
          });
        }
      });
    }, -130, 430, ha | Z, ma);
    this.buttons[u++].view = v;
    ΔΔΔᐃⲆⵠΔ = 20000;
    this.ᐃⵠⲆⵠⵠⵠⲆ = function (a) {
      var b = bf.ΔΔⵠΔᐃⵠⵠ(a);
      var c = ΔΔΔᐃⲆⵠΔ * (b * b);
      return (a -= c) / (ΔΔΔᐃⲆⵠΔ * ((b + gs) * (b + 1)) - c);
    };
    this.ΔΔⵠΔᐃⵠⵠ = function (a) {
      return Math.floor(Math.sqrt(a / ΔΔΔᐃⲆⵠΔ));
    };
    this.ΔⵠⵠⲆⲆⲆΔᐃΔ = function (a) {
      bf.ⲆⲆΔⲆⲆ = bf.ΔΔⵠΔᐃⵠⵠ(a);
      bf.ᐃⲆⵠⵠⲆᐃΔ = bf.ᐃⵠⲆⵠⵠⵠⲆ(a);
      bf.ⵠᐃᐃΔⲆⲆⲆ = Mg;
      bf.ⲆΔΔᐃⲆ = a;
    };
    this.ⵠⵠⵠⵠᐃⲆΔΔΔ = function (b) {
      bf.buttons[bf.ⵠᐃΔⵠⵠⵠᐃ].info.active = Da;
      bf.buttons[bf.ⲆⲆᐃⵠΔΔᐃ].info.active = 1;
      bf.buttons[bf.ⲆΔᐃⵠⲆⲆⲆ].info.active = Oq;
      n();
      if (-za === b.name.indexOf("Starver#")) {
        document.getElementById("account_nickname_input").value = dj.decodeURIComponent(dj.escape(dj.atob(b.name)));
      } else {
        document.getElementById("account_nickname_input").value = b.name;
      }
      bf.ⲆᐃᐃΔⲆ = b.bread;
      var c = b.seasons;
      var d = c[c.length - 1];
      bf.ΔⵠᐃΔⲆⵠΔ = c;
      S.ΔⵠⵠⲆⲆⲆΔᐃΔ(d.score);
      bf.ⲆΔΔᐃⲆ = d.score;
      bf.ⵠᐃⵠΔᐃ = d.kill;
      bf.ΔⲆⲆΔⲆᐃⵠ = d.death;
      bf.time = d.time;
      bf.ⵠᐃΔᐃⲆⵠᐃ = d.bestScore;
      bf.ⵠⲆⵠΔⵠⲆᐃ = d.bestKill;
      bf.ᐃΔⲆⵠᐃᐃΔ = d.bestTime;
      bf.ⲆⲆΔΔⵠΔⲆ = d.scoreTotal;
      bf.ⲆΔΔⵠᐃⲆⲆ = b.firstName;
      document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + b.privateServer;
      if (bf.ⲆΔΔⵠᐃⲆⲆ === undefined) {
        bf.ⲆΔΔⵠᐃⲆⲆ = fl;
      }
      bf.ΔⵠᐃⵠᐃΔⲆ = Date.now() + b.privateServerTime;
      if (In < Number(b.privateServerTime)) {
        bf.ΔⵠᐃⵠᐃΔⲆ = Date.now() + Number(b.privateServerTime);
      }
      bf.ⲆΔⲆΔᐃ = Date.now() + b.kit;
      if (Number(b.kit) > 0) {
        bf.ⲆΔⲆΔᐃ = Date.now() + Number(b.kit);
      }
      var e = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ;
      for (var f = st; b.skins.length > f; f++) {
        var g = b.skins[f];
        if (wg < g) {
          for (var i = Lr; e.length > i; i++) {
            if (e[i].id === f) {
              S.unlock.ΔⵠΔᐃ[i] = Tl;
            }
          }
        }
      }
      e = ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ;
      f = Mg;
      for (; f < b.accessories.length; f++) {
        if ((g = b.accessories[f]) > 0) {
          for (i = 0; i < e.length; i++) {
            if (f === e[i].id) {
              S.unlock.ΔⵠΔᐃᐃ[i] = 1;
            }
          }
        }
      }
      e = ΔⲆⵠⲆ.ᐃⵠΔΔⲆ;
      f = 0;
      for (; b.books.length > f; f++) {
        g = b.books[f];
        if (Ih < g) {
          for (i = wj; i < e.length; i++) {
            if (f === e[i].id) {
              S.unlock.ᐃΔⲆⵠⲆ[i] = 1;
            }
          }
        }
      }
      e = ΔⲆⵠⲆ.ⵠⲆᐃᐃ;
      f = In;
      for (; b.bags.length > f; f++) {
        if ((g = b.bags[f]) > Bb) {
          for (i = Rq; e.length > i; i++) {
            if (e[i].id === f) {
              S.unlock.ᐃⵠΔⲆᐃ[i] = 1;
            }
          }
        }
      }
      e = ΔⲆⵠⲆ.Δⵠᐃᐃⵠ;
      f = 0;
      for (; b.crates.length > f; f++) {
        g = b.crates[f];
        if (Mg < g) {
          for (i = 0; i < e.length; i++) {
            if (f === e[i].id) {
              S.unlock.ⲆⲆⲆⵠΔ[i] = og;
              S.unlock.ᐃᐃⵠΔΔ[i] = 1;
            }
          }
        }
      }
    };
    this.ᐃᐃⲆⲆᐃⲆⲆΔⲆ = function () {
      dj.ᐃΔⲆΔᐃᐃⵠ = function () {
        N(aa);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Bf + "login?token=" + cx + "&type=" + Sf);
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if ($l === this.readyState && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(S.ⵠⵠⵠⵠᐃⲆΔΔΔ);
      };
      if (ex === 1) {
        dj.ᐃΔⲆΔᐃᐃⵠ();
      }
    };
    dj.ⲆⲆᐃⲆΔΔⵠⲆᐃ = function () {
      bf.buttons[bf.ⵠᐃΔⵠⵠⵠᐃ].info.active = zg;
      bf.buttons[bf.ⲆⲆᐃⵠΔΔᐃ].info.active = 0;
      bf.buttons[bf.ⲆΔᐃⵠⲆⲆⲆ].info.active = 0;
      N(aa);
    };
    this.ᐃΔⵠⲆⲆ = function () {
      return bf.buttons[bf.ⲆⲆᐃⵠΔΔᐃ].info.active;
    };
    this.buttons[u] = _v(461, 105, 0, [Ⲇⵠ.ᐃⲆΔⲆⲆⵠΔ, Ⲇⵠ.ⲆⵠΔⲆⵠⵠⵠ, Ⲇⵠ.ΔΔⵠⵠⵠᐃⵠ], ja, ka, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        N(z);
      } else {
        N(v);
      }
    }, -100, 80, ha | Z, ma);
    this.buttons[u++].view = c;
    this.buttons[u] = _v(157, 158, 0, [Ⲇⵠ.ⵠⵠⵠⲆᐃΔᐃ, Ⲇⵠ.ΔΔΔⵠᐃⵠᐃ, Ⲇⵠ.ᐃⲆⲆⵠΔᐃⲆ], ja, ka, function () {
      dj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, ha | Z, ma);
    this.buttons[u++].view = m;
    this.buttons[u] = _v(66, 73, 0, [Ⲇⵠ.ⵠⵠΔⵠΔᐃⵠ, Ⲇⵠ.ⵠΔΔⵠᐃᐃⵠ, Ⲇⵠ.ᐃᐃΔΔⲆⲆᐃ], ja, ka, undefined, -68, 340, ha | Z, ma);
    this.buttons[u++].view = m;
    this.buttons[u] = _v(66, 73, 0, [Ⲇⵠ.ⲆⵠᐃⵠΔⲆᐃ, Ⲇⵠ.ⲆΔⲆΔⵠⲆⵠ, Ⲇⵠ.ᐃⵠⲆᐃⲆΔⲆ], ja, ka, undefined, -30, 340, ha | Z, ma);
    this.buttons[u++].view = m;
    this.ⵠΔᐃΔᐃⵠᐃⵠᐃ = u;
    this.buttons[u] = _v(97, 66, 0, [Ⲇⵠ.ΔⵠⲆᐃΔᐃᐃ, Ⲇⵠ.ⵠΔⲆⵠΔⲆⲆ, Ⲇⵠ.ΔⲆᐃⵠΔΔΔ], ja, ka, function () {
      Yf(undefined, undefined, bf.ⵠⵠⲆⲆⵠᐃΔ);
    }, -14, 151, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ⲆⵠΔΔΔΔⵠ = u;
    this.buttons[u] = _v(135, 66, 0, [Ⲇⵠ.Δᐃⵠᐃⵠⵠⵠ, Ⲇⵠ.ΔΔⲆᐃⲆᐃᐃ, Ⲇⵠ.ᐃⵠⵠᐃᐃⲆΔ], ja, ka, function () {
      Yf(undefined, er, bf.ⲆⵠΔΔΔΔⵠ);
    }, 37.5, 151, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ΔⲆΔⲆⲆⲆⲆ = u;
    this.buttons[u] = _v(160, 66, 0, [Ⲇⵠ.ⲆΔΔⲆᐃΔΔ, Ⲇⵠ.ⲆⲆᐃⲆΔᐃᐃ, Ⲇⵠ.ΔⵠΔⵠΔⵠΔ], ja, ka, function () {
      Yf(undefined, undefined, bf.ΔⲆΔⲆⲆⲆⲆ);
    }, 107.5, 151, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ⵠⵠⲆⲆⵠᐃΔ = u;
    this.buttons[u] = _v(207, 66, 0, [Ⲇⵠ.ᐃⲆᐃⵠⵠⵠᐃ, Ⲇⵠ.ⲆᐃΔᐃⲆⲆΔ, Ⲇⵠ.ⵠⲆᐃᐃⵠΔΔ], ja, ka, function () {
      Yf(undefined, er, bf.ⵠⵠⲆⲆⵠᐃΔ);
    }, 190.5, 151, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ⲆᐃΔⵠᐃᐃⵠ = u;
    this.buttons[u] = _v(144, 66, 0, [Ⲇⵠ.ⲆᐃΔΔⲆᐃᐃ, Ⲇⵠ.ΔⵠΔᐃⵠᐃΔ, Ⲇⵠ.ⵠⲆᐃᐃⵠᐃᐃ], ja, ka, function () {
      Yf(bf.ⲆᐃΔⵠᐃᐃⵠ);
    }, 103.5, 110, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ᐃⲆⲆΔⵠᐃΔ = u;
    this.buttons[u] = _v(124, 66, 0, [Ⲇⵠ.ⵠⵠⵠⵠⲆⵠΔ, Ⲇⵠ.ⲆᐃᐃᐃⲆⲆᐃ, Ⲇⵠ.ⲆⲆᐃΔᐃΔΔ], ja, ka, function () {
      Yf(bf.ᐃⲆⲆΔⵠᐃΔ);
    }, 177.5, 110, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ⵠΔΔⵠⵠᐃᐃ = u;
    this.buttons[u] = _v(104, 66, 0, [Ⲇⵠ.ⵠᐃΔᐃΔᐃᐃ, Ⲇⵠ.ᐃᐃᐃⲆΔⲆΔ, Ⲇⵠ.ΔⵠⲆⲆᐃⲆⵠ], ja, ka, function () {
      Yf(bf.ⵠΔΔⵠⵠᐃᐃ);
    }, 242, 110, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ᐃΔⲆⵠᐃΔⵠ = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ᐃᐃⲆⵠᐃⲆΔ, Ⲇⵠ.ⵠᐃΔΔΔᐃⲆ, Ⲇⵠ.ΔᐃᐃΔⵠⵠⵠ], ja, ka, function () {
      Yf(undefined, undefined, undefined, bf.ᐃΔⲆⵠᐃΔⵠ);
    }, -185, 528, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ᐃΔⲆⵠΔⲆΔ = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ⵠᐃⵠᐃⵠΔⵠ, Ⲇⵠ.ᐃᐃΔᐃⲆΔⲆ, Ⲇⵠ.ⲆΔᐃᐃⵠⲆᐃ], ja, ka, function () {
      Yf(undefined, Hl, undefined, bf.ᐃΔⲆⵠΔⲆΔ);
    }, -149, 528, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ⵠⵠᐃᐃⵠⵠᐃ = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ΔⲆᐃⵠⵠΔⲆ, Ⲇⵠ.ᐃᐃⲆΔᐃⵠⵠ, Ⲇⵠ.ⲆᐃⲆΔⲆⵠⲆ], ja, ka, function () {
      Yf(Wh, undefined, undefined, bf.ⵠⵠᐃᐃⵠⵠᐃ);
    }, -113, 528, ha | Z, ma);
    this.buttons[u++].view = p;
    this.Δᐃⵠⵠⵠⵠᐃ = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ᐃⵠⵠΔΔⵠⵠ, Ⲇⵠ.ᐃᐃⵠⵠⲆᐃⵠ, Ⲇⵠ.ⲆᐃⵠΔⵠⵠⵠ], ja, ka, function () {
      Yf(El, Gs, T, bf.Δᐃⵠⵠⵠⵠᐃ);
    }, -77, 528, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ⵠΔΔΔⲆΔᐃ = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ᐃΔⲆΔΔᐃⲆ, Ⲇⵠ.ΔΔΔⵠᐃΔᐃ, Ⲇⵠ.ⲆⵠᐃᐃⵠΔᐃ], ja, ka, function () {
      Yf(undefined, undefined, undefined, bf.ⵠΔΔΔⲆΔᐃ);
    }, -41, 528, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ᐃⵠⵠΔⲆⲆⵠ = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ΔⲆⵠⲆᐃΔΔ, Ⲇⵠ.ΔⵠⲆᐃᐃⵠⲆ, Ⲇⵠ.ᐃΔⲆⲆΔⲆⵠ], ja, ka, function () {
      Yf(undefined, undefined, undefined, bf.ᐃⵠⵠΔⲆⲆⵠ);
    }, -Fs, 528, ha | Z, ma);
    this.buttons[u++].view = p;
    this.buttons[u] = _v(232, 352, 0, [Ⲇⵠ.ᐃⵠᐃᐃⵠⵠᐃ, Ⲇⵠ.ᐃⵠΔⲆⵠᐃⲆ, Ⲇⵠ.ⲆΔΔΔᐃᐃⵠ], ja, ka, function () {
      Uf(300);
    }, -330, 135, ha | Z, ma);
    this.buttons[u++].view = z;
    this.buttons[u] = _v(232, 352, 0, [Ⲇⵠ.ΔᐃⲆΔⵠⲆⵠ, Ⲇⵠ.ⲆΔᐃᐃⲆⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆΔ], ja, ka, function () {
      Uf(600);
    }, -195, 135, ha | Z, ma);
    this.buttons[u++].view = z;
    this.buttons[u] = _v(243, 374, 0, [Ⲇⵠ.ΔⲆΔⵠⵠΔΔ, Ⲇⵠ.ⵠⵠⵠⲆΔⲆⵠ, Ⲇⵠ.ᐃⲆΔⲆⵠΔⲆ], ja, ka, function () {
      Uf(2600);
    }, -60, 130, ha | Z, ma);
    this.buttons[u++].view = z;
    this.buttons[u] = _v(232, 352, 0, [Ⲇⵠ.ⲆⲆⵠⵠᐃⲆΔ, Ⲇⵠ.ⲆΔᐃΔⵠⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⲆΔᐃ], ja, ka, function () {
      Uf(7000);
    }, 78, 135, ha | Z, ma);
    this.buttons[u++].view = z;
    this.buttons[u] = _v(243, 374, 0, [Ⲇⵠ.ΔⲆⲆⵠⲆΔⲆ, Ⲇⵠ.ⵠⵠᐃᐃⵠⲆⵠ, Ⲇⵠ.ⲆⲆᐃⲆⵠⵠΔ], ja, ka, function () {
      Uf(20000);
    }, 213, 130, ha | Z, ma);
    this.buttons[u++].view = z;
    this.buttons[u] = _v(58, 64, 0, [Ⲇⵠ.ΔⲆⵠΔⵠⵠᐃ, Ⲇⵠ.ΔⵠΔᐃᐃΔᐃ, Ⲇⵠ.ⲆΔⲆΔΔⵠⵠ], ja, ka, function () {
      N(c);
    }, 300, 88, ha | Z, ma);
    this.buttons[u++].view = z;
    this.buttons[u] = _v(323, 112, 0, [Ⲇⵠ.ⵠΔⵠᐃⲆⵠΔ, Ⲇⵠ.ᐃⲆᐃⵠⵠᐃΔ, Ⲇⵠ.ΔⵠᐃᐃⵠⲆᐃ], ja, ka, function () {
      N(B);
      Qa.ⵠΔⲆΔᐃ();
    }, -315, 185, ha | Z, ma);
    this.buttons[u++].view = d;
    this.buttons[u] = _v(323, 112, 0, [Ⲇⵠ.ΔⵠᐃⵠΔᐃᐃ, Ⲇⵠ.ⵠᐃⲆⲆⵠⲆⵠ, Ⲇⵠ.ᐃⵠⲆⵠΔⵠⵠ], ja, ka, function () {
      N(Q);
      Wa.ⵠΔⲆΔᐃ();
    }, -315, 321, ha | Z, ma);
    this.buttons[u++].view = d;
    this.buttons[u] = _v(323, 112, 0, [Ⲇⵠ.ⲆⵠⵠΔᐃⲆⲆ, Ⲇⵠ.ⵠᐃΔⵠⵠᐃᐃ, Ⲇⵠ.ᐃⲆᐃⲆΔⵠⲆ], ja, ka, function () {
      N(I);
      Sa.ⵠΔⲆΔᐃ();
    }, 153, 185, ha | Z, ma);
    this.buttons[u++].view = d;
    this.buttons[u] = _v(323, 112, 0, [Ⲇⵠ.ⲆΔᐃΔⲆᐃⵠ, Ⲇⵠ.ⵠⲆⵠⲆⵠᐃⵠ, Ⲇⵠ.ΔΔⵠΔⵠⵠⵠ], ja, ka, function () {
      N(E);
      Ta.ⵠΔⲆΔᐃ();
    }, 153, 321, ha | Z, ma);
    this.buttons[u++].view = d;
    this.buttons[u] = _v(323, 112, 0, [Ⲇⵠ.ᐃⲆⵠⵠⲆΔⵠ, Ⲇⵠ.ⵠⵠⲆᐃⲆᐃⲆ, Ⲇⵠ.ⵠΔΔᐃⲆⲆΔ], ja, ka, function () {
      N(D);
      Ua.ⵠΔⲆΔᐃ();
    }, 153, 463, ha | Z, ma);
    this.buttons[u++].view = d;
    this.buttons[u] = _v(323, 112, 0, [Ⲇⵠ.ⲆⵠᐃΔⲆᐃᐃ, Ⲇⵠ.ⵠΔⲆⵠⲆᐃⲆ, Ⲇⵠ.ᐃᐃⲆⲆΔⲆᐃ], ja, ka, function () {
      N(_);
      Va.ⵠΔⲆΔᐃ();
    }, -315, 463, ha | Z, ma);
    this.buttons[u++].view = d;
    this.buttons[u] = _v(327, 117, 0, [Ⲇⵠ.ⲆⵠΔΔᐃⲆᐃ, Ⲇⵠ.ⲆᐃᐃⵠᐃⵠⲆ, Ⲇⵠ.ᐃⲆⵠⲆΔⲆᐃ], ja, ka, function () {
      N(O);
    }, 155, 70, V, na);
    this.buttons[u++].view = aa;
    this.buttons[u] = _v(130, 129, 0, [Ⲇⵠ.ᐃⲆᐃΔᐃⵠᐃ, Ⲇⵠ.ᐃᐃⲆⵠⵠⲆⵠ, Ⲇⵠ.ᐃΔⵠΔⵠⲆⵠ], ja, ka, function () {
      w(C, ma, "none");
      N(c);
    }, Ch, 40, ha | Z, ma);
    this.buttons[u++].view = C;
    this.buttons[u] = _v(130, 129, 0, [Ⲇⵠ.ᐃⲆᐃΔᐃⵠᐃ, Ⲇⵠ.ᐃᐃⲆⵠⵠⲆⵠ, Ⲇⵠ.ᐃΔⵠΔⵠⲆⵠ], ja, ka, function () {
      w(y, ma, "none");
      N(c);
    }, Ra, 40, ha | Z, ma);
    this.buttons[u++].view = y;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(c);
    }, 200, 140, ha | Z, ma);
    this.buttons[u++].view = G;
    this.buttons[u] = _v(253, 110, 0, [Ⲇⵠ.ΔⵠⲆΔΔᐃΔ, Ⲇⵠ.ⵠᐃⵠΔⲆⲆΔ, Ⲇⵠ.ⵠⲆΔⲆΔᐃᐃ], ja, ka, function () {
      Xf("Atlanta");
    }, -265, 300, ha | Z, ma);
    this.buttons[u++].view = G;
    this.buttons[u] = _v(253, 110, 0, [Ⲇⵠ.ⵠⲆⵠΔΔᐃᐃ, Ⲇⵠ.ⵠⲆⲆⵠⲆᐃᐃ, Ⲇⵠ.ΔⵠᐃᐃⵠⵠΔ], ja, ka, function () {
      Xf("Dallas");
    }, -130, 300, ha | Z, ma);
    this.buttons[u++].view = G;
    this.buttons[u] = _v(253, 110, 0, [Ⲇⵠ.ᐃⲆⲆⵠⵠⵠᐃ, Ⲇⵠ.ⲆΔⵠⲆΔⲆΔ, Ⲇⵠ.ⵠᐃⲆᐃΔⲆᐃ], ja, ka, function () {
      Xf("Fremont");
    }, 5, 300, ha | Z, ma);
    this.buttons[u++].view = G;
    this.buttons[u] = _v(253, 110, 0, [Ⲇⵠ.ⵠⵠΔΔⲆⲆⵠ, Ⲇⵠ.ⵠⲆⲆᐃⵠⲆⲆ, Ⲇⵠ.ⲆⲆⵠΔΔⲆᐃ], ja, ka, function () {
      Xf("Newark");
    }, 140, 300, ha | Z, ma);
    this.buttons[u++].view = G;
    this.buttons[u] = _v(253, 110, 0, [Ⲇⵠ.ᐃᐃΔᐃᐃᐃΔ, Ⲇⵠ.ⲆΔᐃᐃⲆᐃⲆ, Ⲇⵠ.ΔᐃⵠⲆΔΔᐃ], ja, ka, function () {
      Xf("London");
    }, -265, 365, ha | Z, ma);
    this.buttons[u++].view = G;
    this.buttons[u] = _v(253, 110, 0, [Ⲇⵠ.ᐃⲆᐃⵠⲆⲆⲆ, Ⲇⵠ.ΔⲆⵠⵠⵠᐃᐃ, Ⲇⵠ.ᐃⲆⵠⲆⲆΔΔ], ja, ka, function () {
      Xf("Frankfurt");
    }, -130, 365, ha | Z, ma);
    this.buttons[u++].view = G;
    this.buttons[u] = _v(253, 110, 0, [Ⲇⵠ.ᐃⲆΔⲆΔΔⵠ, Ⲇⵠ.ⵠᐃⲆΔᐃΔᐃ, Ⲇⵠ.ⵠⵠΔᐃⵠΔⵠ], ja, ka, function () {
      Xf("Singapore");
    }, 5, 365, ha | Z, ma);
    this.buttons[u++].view = G;
    this.buttons[u] = _v(253, 110, 0, [Ⲇⵠ.ⲆΔⲆᐃⲆⵠⲆ, Ⲇⵠ.ΔⵠᐃⲆⵠⲆⲆ, Ⲇⵠ.ⲆⲆⵠⵠΔΔΔ], ja, ka, function () {
      Xf("Tokyo");
    }, 140, 365, ha | Z, ma);
    this.buttons[u++].view = G;
    this.buttons[u] = _v(253, 110, 0, [Ⲇⵠ.ⵠⲆⲆᐃᐃΔⲆ, Ⲇⵠ.ΔⲆⲆⵠⵠⲆᐃ, Ⲇⵠ.ⲆⲆΔⲆⲆΔⵠ], ja, ka, function () {
      Xf("Toronto");
    }, -265, 430, ha | Z, ma);
    this.buttons[u++].view = G;
    this.buttons[u] = _v(253, 110, 0, [Ⲇⵠ.ᐃᐃⲆⵠⵠⵠΔ, Ⲇⵠ.ᐃⲆᐃΔΔⲆⲆ, Ⲇⵠ.ᐃᐃⵠΔᐃⲆⵠ], ja, ka, function () {
      Xf("Mumbai");
    }, -130, 430, ha | Z, ma);
    this.buttons[u++].view = G;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(G);
    }, 230, 140, ha | Z, ma);
    this.buttons[u++].view = ea;
    this.buttons[u] = _v(230, 352, 0, [Ⲇⵠ.ᐃⲆᐃⵠⲆᐃΔ, Ⲇⵠ.ⲆⲆᐃⲆⲆΔⵠ, Ⲇⵠ.ⲆᐃⵠᐃΔΔΔ], ja, ka, function () {
      Uf(350);
    }, -280, 240, ha | Z, ma);
    this.buttons[u++].view = ea;
    this.buttons[u] = _v(230, 352, 0, [Ⲇⵠ.ᐃΔⵠⲆⲆΔΔ, Ⲇⵠ.ⲆⵠΔΔⵠᐃΔ, Ⲇⵠ.ⵠΔΔⲆΔⵠⵠ], ja, ka, function () {
      Uf(700);
    }, -130, 240, ha | Z, ma);
    this.buttons[u++].view = ea;
    this.buttons[u] = _v(230, 352, 0, [Ⲇⵠ.ΔᐃⵠᐃᐃᐃⲆ, Ⲇⵠ.ⵠΔⲆᐃᐃᐃΔ, Ⲇⵠ.ⲆⲆⵠᐃΔⵠⲆ], ja, ka, function () {
      Uf(1400);
    }, 20, 240, ha | Z, ma);
    this.buttons[u++].view = ea;
    this.buttons[u] = _v(230, 352, 0, [Ⲇⵠ.ⲆΔⵠᐃⲆⲆΔ, Ⲇⵠ.ΔΔᐃᐃΔⲆⵠ, Ⲇⵠ.ⲆⲆᐃΔΔΔⲆ], ja, ka, function () {
      Uf(3000);
    }, 170, 240, ha | Z, ma);
    this.buttons[u++].view = ea;
    this.buttons[u] = _v(105, 119, 0, [Ⲇⵠ.ΔⲆΔⲆΔⵠΔ, Ⲇⵠ.ᐃᐃⲆΔⲆᐃⲆ, Ⲇⵠ.ᐃᐃΔⵠᐃᐃⲆ], ja, ka, function () {
      document.getElementById("serverAddressInput").select();
      document.execCommand("copy");
    }, 170, 310, ha | Z, ma);
    this.buttons[u++].view = W;
    this.buttons[u] = _v(105, 119, 0, [Ⲇⵠ.ⵠΔᐃᐃΔⵠⵠ, Ⲇⵠ.ᐃΔⲆΔⲆⵠᐃ, Ⲇⵠ.ⲆᐃΔΔᐃᐃⲆ], ja, ka, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Bf + "rebootServer?token=" + cx + "&userid=" + dx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            location.href = document.getElementById("serverAddressInput").value;
          }
        };
        a.send();
      })();
    }, 235, 310, ha | Z, ma);
    this.buttons[u++].view = W;
    this.buttons[u] = _v(204, 115, 0, [Ⲇⵠ.ⲆⲆᐃΔᐃΔⲆ, Ⲇⵠ.ᐃⵠⵠⵠΔΔⵠ, Ⲇⵠ.ΔⲆⵠᐃΔΔⵠ], ja, ka, function () {
      dj.open("./commands.html", "_blank");
    }, -265, 490, ha | Z, ma);
    this.buttons[u++].view = W;
    this.buttons[u] = _v(145, 69, 0, [Ⲇⵠ.ᐃᐃΔⲆᐃⵠΔ, Ⲇⵠ.ᐃᐃⲆᐃᐃΔⲆ, Ⲇⵠ.ⲆΔᐃⲆⲆΔᐃ], ja, ka, function () {
      N(da);
    }, -210, 170, ha | Z, ma);
    this.buttons[u++].view = c;
    this.buttons[u] = _v(145, 69, 0, [Ⲇⵠ.ΔⲆΔⵠΔⵠΔ, Ⲇⵠ.Δᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ⵠᐃΔⵠⵠΔⵠ], ja, ka, function () {
      N(x);
    }, 70, 170, ha | Z, ma);
    this.buttons[u++].view = c;
    this.buttons[u] = _v(145, 69, 0, [Ⲇⵠ.ⵠΔⲆᐃᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃⲆⵠΔ], ja, ka, function () {
      N(P);
    }, 70, 204, ha | Z, ma);
    this.buttons[u++].view = c;
    this.buttons[u] = _v(145, 69, 0, [Ⲇⵠ.ᐃⵠΔⵠⲆᐃⲆ, Ⲇⵠ.ⲆⲆⵠⲆⵠⵠᐃ, Ⲇⵠ.ᐃᐃᐃⵠⵠΔⲆ], ja, ka, function () {
      N(J);
    }, -210, 204, ha | Z, ma);
    this.buttons[u++].view = c;
    this.buttons[u] = _v(145, 69, 0, [Ⲇⵠ.ᐃⵠΔⵠⲆᐃⲆ, Ⲇⵠ.ⲆⲆⵠⲆⵠⵠᐃ, Ⲇⵠ.ᐃᐃᐃⵠⵠΔⲆ], ja, ka, function () {
      N(M);
    }, 70, 238, ha | Z, ma);
    this.buttons[u++].view = c;
    this.buttons[u] = _v(145, 69, 0, [Ⲇⵠ.ᐃⵠΔⵠⲆᐃⲆ, Ⲇⵠ.ⲆⲆⵠⲆⵠⵠᐃ, Ⲇⵠ.ᐃᐃᐃⵠⵠΔⲆ], ja, ka, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Hf(Lr, 300);
      } else {
        N(v);
      }
    }, 307, 205, ha | Z, ma);
    this.buttons[u++].view = c;
    this.buttons[u] = _v(145, 69, 0, [Ⲇⵠ.ᐃᐃᐃΔΔΔⵠ, Ⲇⵠ.ΔΔᐃΔᐃᐃΔ, Ⲇⵠ.ⵠⲆΔⲆᐃⲆⵠ], ja, ka, function () {
      N(A);
    }, -210, 238, ha | Z, ma);
    this.buttons[u++].view = c;
    this.buttons[u] = _v(145, 69, 0, [Ⲇⵠ.ᐃᐃᐃΔΔΔⵠ, Ⲇⵠ.ΔΔᐃΔᐃᐃΔ, Ⲇⵠ.ⵠⲆΔⲆᐃⲆⵠ], ja, ka, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Hf(za, 600);
      } else {
        N(v);
      }
    }, 307, 239, ha | Z, ma);
    this.buttons[u++].view = c;
    this.buttons[u] = _v(192, 101, 0, [Ⲇⵠ.ΔⵠⲆⲆⵠΔΔ, Ⲇⵠ.ΔᐃΔⲆⲆᐃⵠ, Ⲇⵠ.ⵠᐃΔᐃΔΔⲆ], ja, ka, function () {
      Vf();
    }, -100, 250, ha | Z, ma);
    this.buttons[u++].view = R;
    this.buttons[u] = _v(192, 104, 0, [Ⲇⵠ.ᐃΔⵠⵠⵠΔᐃ, Ⲇⵠ.ⲆΔᐃᐃΔⲆᐃ, Ⲇⵠ.ⲆΔΔⲆⵠⲆᐃ], ja, ka, function () {
      Vf();
    }, -vh, 239, ha | Z, ma);
    this.buttons[u++].view = F;
    this.buttons[u] = _v(192, 101, 0, [Ⲇⵠ.ΔΔⲆΔⵠᐃΔ, Ⲇⵠ.ΔⵠᐃᐃⲆᐃᐃ, Ⲇⵠ.ⲆⵠΔⲆᐃᐃΔ], ja, ka, function () {
      N(b);
    }, 10, 250, ha | Z, ma);
    this.buttons[u++].view = R;
    this.buttons[u] = _v(192, 104, 0, [Ⲇⵠ.ΔΔⲆᐃⵠᐃⵠ, Ⲇⵠ.ⵠᐃⲆⲆⲆⵠᐃ, Ⲇⵠ.ΔᐃᐃⵠΔΔⲆ], ja, ka, function () {
      N(b);
    }, 10, 239, ha | Z, ma);
    this.buttons[u++].view = F;
    ᐃⵠⲆᐃΔ = [];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ⵠᐃⵠⲆᐃ] = [Ⲇⵠ.ⲆΔⵠᐃΔᐃΔ, Ⲇⵠ.ΔᐃⵠⵠⲆⵠⵠ, Ⲇⵠ.ⵠΔⲆΔΔᐃᐃ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ⵠᐃⵠⵠ] = [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ᐃΔⵠⲆ] = [Ⲇⵠ.ⵠΔᐃΔΔᐃΔ, Ⲇⵠ.ᐃᐃᐃⲆⲆΔⲆ, Ⲇⵠ.ᐃⲆᐃᐃⵠⵠⲆ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ᐃⲆⵠᐃ] = [Ⲇⵠ.ᐃⵠᐃᐃΔⲆⲆ, Ⲇⵠ.ΔⲆΔⲆΔΔⵠ, Ⲇⵠ.ΔⲆΔⵠⲆᐃᐃ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ᐃⲆΔⵠ] = [Ⲇⵠ.ΔᐃΔⵠΔⲆⵠ, Ⲇⵠ.ⵠΔᐃᐃⲆⲆⵠ, Ⲇⵠ.ᐃΔΔⵠᐃᐃⵠ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.Ⲇⵠⵠⵠ] = [Ⲇⵠ.ΔⵠΔⵠⲆⵠⲆ, Ⲇⵠ.ΔⵠⵠⵠᐃⵠΔ, Ⲇⵠ.ᐃⲆⵠΔᐃΔΔ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ᐃⵠᐃΔ] = [Ⲇⵠ.ⵠⵠΔᐃᐃⵠΔ, Ⲇⵠ.ⲆⲆΔΔⲆⲆⵠ, Ⲇⵠ.ΔΔⲆⵠΔΔⵠ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ᐃΔⵠᐃΔ] = [Ⲇⵠ.ⲆΔΔⵠⲆᐃⲆ, Ⲇⵠ.ᐃⲆⲆΔⲆⵠⲆ, Ⲇⵠ.ᐃⵠⲆⵠᐃᐃⲆ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ΔΔⲆΔΔⲆΔ] = [Ⲇⵠ.ᐃⲆᐃⲆⵠⵠᐃ, Ⲇⵠ.ⵠᐃⲆΔΔⵠΔ, Ⲇⵠ.ⲆⵠΔΔⵠΔⵠ];
    ΔⵠΔΔⵠⵠΔ = u;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, wr, -29, 205, ha | Z, ma);
    this.buttons[u++].view = B;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, -29, 300, ha | Z, ma);
    this.buttons[u++].view = B;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, -29, 395, ha | Z, ma);
    this.buttons[u++].view = B;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 205, ha | Z, ma);
    this.buttons[u++].view = B;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, Wh, 65, 300, ha | Z, ma);
    this.buttons[u++].view = B;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, er, 65, 395, ha | Z, ma);
    this.buttons[u++].view = B;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, tt, 159, 205, ha | Z, ma);
    this.buttons[u++].view = B;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 159, 300, ha | Z, ma);
    this.buttons[u++].view = B;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 159, 395, ha | Z, ma);
    this.buttons[u++].view = B;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ja, ka, Og, -61, 315, ha | Z, ma);
    this.buttons[u++].view = B;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ja, ka, undefined, 260, 315, ha | Z, ma);
    this.buttons[u++].view = B;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(d);
    }, -320, 470, ha | Z, ma);
    this.buttons[u++].view = B;
    ᐃᐃΔΔⵠⲆᐃⲆⵠ = u;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, -29, 205, ha | Z, ma);
    this.buttons[u++].view = Q;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, cg, -29, 300, ha | Z, ma);
    this.buttons[u++].view = Q;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, Hl, -29, 395, ha | Z, ma);
    this.buttons[u++].view = Q;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, Og, 65, 205, ha | Z, ma);
    this.buttons[u++].view = Q;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 300, ha | Z, ma);
    this.buttons[u++].view = Q;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, wr, 65, 395, ha | Z, ma);
    this.buttons[u++].view = Q;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, Wh, 159, 205, ha | Z, ma);
    this.buttons[u++].view = Q;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, cg, 159, 300, ha | Z, ma);
    this.buttons[u++].view = Q;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, cg, 159, 395, ha | Z, ma);
    this.buttons[u++].view = Q;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ja, ka, undefined, -61, 315, ha | Z, ma);
    this.buttons[u++].view = Q;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ja, ka, T, 260, 315, ha | Z, ma);
    this.buttons[u++].view = Q;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(d);
    }, -320, 470, ha | Z, ma);
    this.buttons[u++].view = Q;
    ⵠⲆΔⲆⵠᐃⲆΔⵠ = u;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, tt, -29, 205, ha | Z, ma);
    this.buttons[u++].view = _;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, xg, -29, 300, ha | Z, ma);
    this.buttons[u++].view = _;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, -29, 395, ha | Z, ma);
    this.buttons[u++].view = _;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 205, ha | Z, ma);
    this.buttons[u++].view = _;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 300, ha | Z, ma);
    this.buttons[u++].view = _;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 395, ha | Z, ma);
    this.buttons[u++].view = _;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, Og, 159, 205, ha | Z, ma);
    this.buttons[u++].view = _;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, rk, 159, 300, ha | Z, ma);
    this.buttons[u++].view = _;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 159, 395, ha | Z, ma);
    this.buttons[u++].view = _;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ja, ka, undefined, -61, 315, ha | Z, ma);
    this.buttons[u++].view = _;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ja, ka, undefined, 260, 315, ha | Z, ma);
    this.buttons[u++].view = _;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(d);
    }, -320, 470, ha | Z, ma);
    this.buttons[u++].view = _;
    ᐃᐃᐃᐃⲆⲆΔⲆᐃ = u;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, Gs, -29, 205, ha | Z, ma);
    this.buttons[u++].view = I;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, er, -29, 300, ha | Z, ma);
    this.buttons[u++].view = I;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, -29, 395, ha | Z, ma);
    this.buttons[u++].view = I;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 205, ha | Z, ma);
    this.buttons[u++].view = I;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 300, ha | Z, ma);
    this.buttons[u++].view = I;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 395, ha | Z, ma);
    this.buttons[u++].view = I;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 159, 205, ha | Z, ma);
    this.buttons[u++].view = I;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 159, 300, ha | Z, ma);
    this.buttons[u++].view = I;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 159, 395, ha | Z, ma);
    this.buttons[u++].view = I;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ja, ka, Hl, -61, 315, ha | Z, ma);
    this.buttons[u++].view = I;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ja, ka, rk, 260, 315, ha | Z, ma);
    this.buttons[u++].view = I;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(d);
    }, -320, 470, ha | Z, ma);
    this.buttons[u++].view = I;
    ΔⵠΔᐃⲆᐃᐃⵠᐃ = u;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, -29, 205, ha | Z, ma);
    this.buttons[u++].view = E;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, -29, 300, ha | Z, ma);
    this.buttons[u++].view = E;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, xg, -29, 395, ha | Z, ma);
    this.buttons[u++].view = E;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 205, ha | Z, ma);
    this.buttons[u++].view = E;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 300, ha | Z, ma);
    this.buttons[u++].view = E;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, cb, 65, 395, ha | Z, ma);
    this.buttons[u++].view = E;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, Za, 159, 205, ha | Z, ma);
    this.buttons[u++].view = E;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 159, 300, ha | Z, ma);
    this.buttons[u++].view = E;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 159, 395, ha | Z, ma);
    this.buttons[u++].view = E;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ja, ka, T, -61, 315, ha | Z, ma);
    this.buttons[u++].view = E;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ja, ka, xg, 260, 315, ha | Z, ma);
    this.buttons[u++].view = E;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(d);
    }, -320, 470, ha | Z, ma);
    this.buttons[u++].view = E;
    ΔΔⵠⵠⵠΔⵠⵠⲆ = u;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, -29, 205, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, -29, 300, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, -29, 395, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 205, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, cb, 65, 300, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 65, 395, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, Hq, 159, 205, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 159, 300, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ja, ka, undefined, 159, 395, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ja, ka, Jo, -61, 315, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ja, ka, lj, 260, 315, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(d);
    }, -320, 470, ha | Z, ma);
    this.buttons[u++].view = D;
    this.buttons[u] = _v(260, 260, 0, [Ⲇⵠ.ⲆΔΔⲆⲆΔⵠ, Ⲇⵠ.ⲆⵠᐃΔΔⵠᐃ, Ⲇⵠ.ΔΔΔⲆⵠᐃᐃ], ja, ka, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Kf(3, 50);
      } else {
        N(v);
      }
    }, -260 / Gi, 150 + 448 / nl - 65, ha | Z, ma);
    this.buttons[u++].view = x;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(c);
    }, 309, 180, ha | Z, ma);
    this.buttons[u++].view = x;
    this.buttons[u] = _v(260, 260, 0, [Ⲇⵠ.ⲆⵠⵠᐃΔᐃⵠ, Ⲇⵠ.ᐃΔΔΔⲆΔⵠ, Ⲇⵠ.ΔⲆᐃᐃⲆⲆⲆ], ja, ka, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Kf(Zj, 100);
      } else {
        N(v);
      }
    }, -260 / nj, 197, ha | Z, ma);
    this.buttons[u++].view = da;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(c);
    }, 309, 180, ha | Z, ma);
    this.buttons[u++].view = da;
    this.buttons[u] = _v(260, 260, 0, [Ⲇⵠ.ᐃΔⲆᐃᐃⵠⵠ, Ⲇⵠ.ⲆⲆᐃΔⲆΔΔ, Ⲇⵠ.ⵠᐃΔΔⲆΔⵠ], ja, ka, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Kf($i, 150);
      } else {
        N(v);
      }
    }, -260 / nl, 197, ha | Z, ma);
    this.buttons[u++].view = P;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(c);
    }, 309, 180, ha | Z, ma);
    this.buttons[u++].view = P;
    this.buttons[u] = _v(260, 260, 0, [Ⲇⵠ.ⲆⵠⲆⵠᐃⵠⲆ, Ⲇⵠ.ΔᐃᐃⲆⵠᐃⲆ, Ⲇⵠ.ⵠⵠⵠⲆⵠⲆΔ], ja, ka, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Kf(pu, 300);
      } else {
        N(v);
      }
    }, -65, 150 + 448 / Mq - 260 / Os, ha | Z, ma);
    this.buttons[u++].view = J;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(c);
    }, 309, 180, ha | Z, ma);
    this.buttons[u++].view = J;
    this.buttons[u] = _v(260, 260, 0, [Ⲇⵠ.ⵠΔΔΔᐃⵠⲆ, Ⲇⵠ.ⲆⲆⵠⲆⲆⵠΔ, Ⲇⵠ.ⵠᐃⲆⲆᐃΔⲆ], ja, ka, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Kf(It, 600);
      } else {
        N(v);
      }
    }, -65, 262 - 260 / nj, ha | Z, ma);
    this.buttons[u++].view = A;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(c);
    }, 309, 180, ha | Z, ma);
    this.buttons[u++].view = A;
    this.buttons[u] = _v(260, 260, 0, [Ⲇⵠ.ⲆⵠⲆⵠᐃⵠⲆ, Ⲇⵠ.ΔᐃᐃⲆⵠᐃⲆ, Ⲇⵠ.ⵠⵠⵠⲆⵠⲆΔ], ja, ka, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Kf(5, 300);
      } else {
        N(v);
      }
    }, -65, 150 + 448 / Ct - 65, ha | Z, ma);
    this.buttons[u++].view = M;
    this.buttons[u] = _v(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ja, ka, function () {
      N(c);
    }, 309, 180, ha | Z, ma);
    this.buttons[u++].view = M;
    var Ca = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ΔᐃᐃΔᐃⵠⲆ, Ⲇⵠ.ⲆᐃᐃⵠⵠⵠⲆ, Ⲇⵠ.ⵠⵠᐃⵠᐃᐃΔ], ja, ka, function () {
      Aa(j, 0);
    }, -305, 132, ha | Z, ma);
    this.buttons[u++].view = b;
    var Ea = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ΔΔΔᐃⲆᐃᐃ, Ⲇⵠ.ΔⵠⲆᐃⵠᐃⵠ, Ⲇⵠ.ᐃᐃᐃⲆⲆⵠⵠ], ja, ka, function () {
      Aa(undefined, 1);
    }, -273, 132, ha | Z, ma);
    this.buttons[u++].view = b;
    var Fa = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ⵠᐃⲆⲆΔⲆᐃ, Ⲇⵠ.ⲆⵠᐃⵠΔᐃᐃ, Ⲇⵠ.ᐃᐃⲆⲆΔⲆⲆ], ja, ka, function () {
      Aa(Jo, 2);
    }, -241, 132, ha | Z, ma);
    this.buttons[u++].view = b;
    var Ha = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ᐃΔⲆⵠⵠⲆⵠ, Ⲇⵠ.ΔⵠΔⵠⲆⵠΔ, Ⲇⵠ.ⲆΔⵠᐃⵠⲆΔ], ja, ka, function () {
      Aa(Hq, 3);
    }, -305, 165, ha | Z, ma);
    this.buttons[u++].view = b;
    var Ja = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ᐃⵠΔⵠⲆⲆΔ, Ⲇⵠ.ⵠⵠΔᐃⲆⵠⵠ, Ⲇⵠ.ⲆⲆⵠΔᐃⲆⵠ], ja, ka, function () {
      Aa(undefined, Lg);
    }, -273, 165, ha | Z, ma);
    this.buttons[u++].view = b;
    var Ka = u;
    this.buttons[u] = _v(46, 51, 0, [Ⲇⵠ.ⵠᐃᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠᐃⲆΔⲆⵠᐃ, Ⲇⵠ.ΔⵠⲆⲆⵠΔᐃ], ja, ka, function () {
      Aa(undefined, ll);
    }, -241, 165, ha | Z, ma);
    this.buttons[u++].view = b;
    var La = u;
    this.buttons[u] = _v(460, 73, 0, [Ⲇⵠ.ⵠⵠⵠⲆⲆᐃΔ, Ⲇⵠ.ΔⵠⵠΔᐃᐃⵠ, Ⲇⵠ.ΔΔⵠⵠⲆᐃⲆ], ja, ka, function () {
      Aa(-1);
    }, -180, 170, ha | Z, ma);
    this.buttons[u++].view = b;
    var Ma = u;
    this.buttons[u] = _v(222, 68, 0, [Ⲇⵠ.ᐃⵠΔⲆⵠⵠⵠ, Ⲇⵠ.ᐃᐃΔⵠⵠⲆⵠ, Ⲇⵠ.ΔⵠⵠⵠⵠⲆⵠ], ja, ka, function () {
      Aa(kw.ⵠᐃᐃⲆⲆ);
    }, -180, 215, ha | Z, ma);
    this.buttons[u++].view = b;
    var Na = u;
    this.buttons[u] = _v(222, 68, 0, [Ⲇⵠ.ΔⵠⵠⲆⲆⲆᐃ, Ⲇⵠ.ᐃⲆⲆⵠᐃⲆⲆ, Ⲇⵠ.ᐃᐃⲆⵠⵠΔΔ], ja, ka, function () {
      Aa(kw.ⲆⲆⲆⲆᐃ);
    }, -180, 260, ha | Z, ma);
    this.buttons[u++].view = b;
    var Oa = u;
    this.buttons[u] = _v(222, 68, 0, [Ⲇⵠ.ᐃⲆΔⵠⲆᐃᐃ, Ⲇⵠ.ⲆᐃⵠⵠΔᐃᐃ, Ⲇⵠ.ᐃΔⲆᐃᐃⵠΔ], ja, ka, function () {
      Aa(kw.ΔΔΔΔᐃ);
    }, -60, 215, ha | Z, ma);
    this.buttons[u++].view = b;
    var Pa = u;
    this.buttons[u] = _v(222, 68, 0, [Ⲇⵠ.ΔⵠᐃΔᐃᐃᐃ, Ⲇⵠ.ᐃΔᐃΔⲆΔⲆ, Ⲇⵠ.ΔᐃⵠΔᐃᐃᐃ], ja, ka, function () {
      Aa(kw.ᐃᐃⲆΔⵠ);
    }, -60, 260, ha | Z, ma);
    this.buttons[u++].view = b;
    this.ⵠⵠⲆᐃⵠΔⵠ = u;
    this.buttons[u] = _v(143, 66, 0, [Ⲇⵠ.ⵠⲆΔⲆⵠⲆΔ, Ⲇⵠ.ᐃⲆᐃᐃⵠⵠⵠ, Ⲇⵠ.ΔⲆᐃⵠΔᐃⵠ], ja, ka, function () {
      Yf(undefined, bf.ⵠⵠⲆᐃⵠΔⵠ);
    }, -298, 110, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ᐃⲆⵠⲆᐃⲆᐃ = u;
    this.buttons[u] = _v(104, 66, 0, [Ⲇⵠ.ᐃΔΔᐃΔᐃⲆ, Ⲇⵠ.ⲆᐃⵠⵠΔⵠⲆ, Ⲇⵠ.ΔᐃᐃΔΔᐃⲆ], ja, ka, function () {
      Yf(j, bf.ᐃⲆⵠⲆᐃⲆᐃ);
    }, -223, 110, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ΔᐃⵠⲆⲆΔᐃ = u;
    this.buttons[u] = _v(110, 66, 0, [Ⲇⵠ.ⵠᐃᐃΔΔᐃⵠ, Ⲇⵠ.ⲆΔΔΔⲆΔΔ, Ⲇⵠ.ⵠⵠᐃΔᐃⵠⲆ], ja, ka, function () {
      Yf(rk, bf.ΔᐃⵠⲆⲆΔᐃ);
    }, -168, 110, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ⲆⲆⵠᐃⲆᐃⲆ = u;
    this.buttons[u] = _v(88, 66, 0, [Ⲇⵠ.ⵠΔⲆⲆΔⲆᐃ, Ⲇⵠ.ΔⵠⲆⲆⲆΔᐃ, Ⲇⵠ.ᐃⲆⲆⵠⲆΔⲆ], ja, ka, function () {
      Yf(undefined, bf.ⲆⲆⵠᐃⲆᐃⲆ);
    }, -110, 110, ha | Z, ma);
    this.buttons[u++].view = p;
    this.ⵠᐃⲆᐃⲆΔᐃ = u;
    this.buttons[u] = _v(88, 66, 0, [Ⲇⵠ.ⵠⵠⵠΔⲆⵠᐃ, Ⲇⵠ.ⲆⵠΔΔᐃⲆⵠ, Ⲇⵠ.ᐃⵠⲆⵠⵠΔⲆ], ja, ka, function () {
      Yf(cb, bf.ⵠᐃⲆᐃⲆΔᐃ);
    }, -63, 110, ha | Z, ma);
    this.buttons[u++].view = p;
    this.buttons[u] = _v(86, 44, 0, [Ⲇⵠ.ⵠⲆΔᐃⲆΔⵠ, Ⲇⵠ.ΔΔΔᐃΔⵠⲆ, Ⲇⵠ.ⵠΔⵠⲆᐃΔⲆ], ja, ka, function () {
      dj.open("./terms.html", "_blank");
    }, 349, 290, ha | Z, ma);
    this.buttons[u++].view = c;
    var Qa = new e(ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ, ΔⵠΔΔⵠⵠΔ, function (a) {
      bf.ΔⵠΔᐃ = a;
      if (bf.unlock.ΔⵠΔᐃ[a] === gs) {
        ⵠⵠΔΔ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⵠΔᐃ, this.unlock.ΔⵠΔᐃ);
    var Sa = new e(ΔⲆⵠⲆ.ⵠⲆᐃᐃ, ᐃᐃᐃᐃⲆⲆΔⲆᐃ, function (a) {
      bf.ᐃⵠΔⲆᐃ = a;
      if (bf.unlock.ᐃⵠΔⲆᐃ[a] === 1) {
        ⵠⵠΔΔ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⵠΔⲆᐃ, this.unlock.ᐃⵠΔⲆᐃ);
    var Ta = new e(ΔⲆⵠⲆ.ᐃⵠΔΔⲆ, ΔⵠΔᐃⲆᐃᐃⵠᐃ, function (a) {
      bf.ᐃΔⲆⵠⲆ = a;
      if (bf.unlock.ᐃΔⲆⵠⲆ[a] === 1) {
        ⵠⵠΔΔ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃΔⲆⵠⲆ, this.unlock.ᐃΔⲆⵠⲆ);
    var Ua = new e(ΔⲆⵠⲆ.Δⵠᐃᐃⵠ, ΔΔⵠⵠⵠΔⵠⵠⲆ, function (a) {
      bf.ᐃᐃⵠΔΔ = a;
      if (bf.unlock.ᐃᐃⵠΔΔ[a] === Oq) {
        ⵠⵠΔΔ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃᐃⵠΔΔ, this.unlock.ᐃᐃⵠΔΔ);
    var Va = new e(ΔⲆⵠⲆ.Δⵠᐃᐃⵠ, ⵠⲆΔⲆⵠᐃⲆΔⵠ, function (a) {
      bf.ⲆⲆⲆⵠΔ = a;
      if (bf.unlock.ⲆⲆⲆⵠΔ[a] === pu) {
        ⵠⵠΔΔ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⲆⲆⵠΔ, this.unlock.ⲆⲆⲆⵠΔ);
    var Wa = new e(ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ, ᐃᐃΔΔⵠⲆᐃⲆⵠ, function (a) {
      bf.ΔⵠΔᐃᐃ = a;
      if (bf.unlock.ΔⵠΔᐃᐃ[a] === 1) {
        ⵠⵠΔΔ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⵠΔᐃᐃ, this.unlock.ΔⵠΔᐃᐃ);
    this.ⲆⵠΔᐃⵠΔⲆ = function (a) {
      zf.ⲆⲆΔⲆ = Zv(S.ⲆΔ, a);
      for (var b = os; b < S.buttons.length; b++) {
        if (S.buttons[b].info.active === na) {
          S.buttons[b].ⲆⵠᐃΔ(S.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
        }
      }
    };
    this.ΔᐃᐃⲆⵠⲆᐃ = function (a) {
      zf.ⲆⲆΔⲆ = Zv(S.ⲆΔ, a);
      for (var b = Lr; S.buttons.length > b; b++) {
        var c = S.buttons[b];
        if (c.info.active === na && c.ⲆⵠᐃΔ(S.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ⲆᐃⵠⵠⲆⲆⲆ = Qg;
    this.ⵠᐃᐃᐃⵠⲆᐃ = function (a) {
      zf.ⲆⲆΔⲆ = Zv(S.ⲆΔ, a);
      var b = false;
      for (var c = 0; c < S.buttons.length; c++) {
        if (S.buttons[c].info.active === na) {
          b |= S.buttons[c].ⲆⵠᐃΔ(S.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
        }
      }
      if (b !== S.ⲆᐃⵠⵠⲆⲆⲆ) {
        S.ⲆᐃⵠⵠⲆⲆⲆ = b;
        k.style.cursor = b ? S.ⲆᐃᐃⲆᐃⵠⲆ : S.ⵠΔΔⲆⲆᐃΔ;
      }
    };
    this.ᐃΔⲆΔⵠΔⵠ = function () {
      dj.addEventListener("mousedown", this.ⲆⵠΔᐃⵠΔⲆ, vj);
      dj.addEventListener("mouseup", this.ΔᐃᐃⲆⵠⲆᐃ, false);
      dj.addEventListener("mousemove", this.ⵠᐃᐃᐃⵠⲆᐃ, jl);
    };
    this.ΔΔⲆᐃⲆᐃⲆ = function () {
      dj.removeEventListener("mousedown", this.ⲆⵠΔᐃⵠΔⲆ, false);
      dj.removeEventListener("mouseup", this.ΔᐃᐃⲆⵠⲆᐃ, false);
      dj.removeEventListener("mousemove", this.ⵠᐃᐃᐃⵠⲆᐃ, false);
    };
  }
  function Kw(c, d) {
    var j = this;
    this.ⲆΔ = c;
    this.ᐃ = d;
    if (dj.navigator.userAgent.indexOf("Edge") > -hb) {
      this.ⵠΔΔⲆⲆᐃΔ = "default";
      this.ⲆᐃᐃⲆᐃⵠⲆ = "pointer";
    } else {
      this.ⵠΔΔⲆⲆᐃΔ = "url('img/cursor0.png'), default";
      this.ⲆᐃᐃⲆᐃⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    this.ⵠⲆⲆⲆᐃᐃⲆ = za;
    this.ᐃⲆⲆᐃⲆΔᐃ = au;
    this.ⵠΔΔⵠⵠΔᐃ = 1;
    this.ⵠⵠⵠᐃᐃᐃΔ = zg;
    this.ΔΔᐃⲆⵠᐃᐃΔΔ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ⲆΔᐃⲆ = {
      ⲆΔΔⲆΔⲆⲆ: _v(60, 60, 0, ΔΔ[782]),
      ⵠᐃⵠⵠⲆΔᐃ: _v(60, 60, 0, ΔΔ[783])
    };
    this.sign = {
      open: f,
      ⵠᐃᐃᐃᐃⲆΔⵠⲆ: 0,
      ᐃΔⵠⲆⵠΔⲆ: document.getElementById("sign_object"),
      ᐃⲆᐃΔᐃᐃⵠ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: _v(60, 60, 0, ΔΔ[803]),
      ⲆⲆΔⵠⵠᐃΔ: function () {
        var a = Math.floor(Math.floor((3 + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / nj) * (10 + ΔΔ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 150) + "px";
        this.style.top = Math.floor(lq - 115) + "px";
      },
      ᐃⵠⲆΔⲆ: function () {
        Zw.sign.style.display = "none";
        Zw.sign.open = f;
      },
      select: function () {
        Zw.sign.open = !Zw.sign.open;
        if (Zw.sign.open) {
          Zw.sign.style.display = "inline-block";
        } else {
          Zw.sign.style.display = "none";
        }
      },
      ok: function () {
        Ⲇⵠᐃⵠ.ΔⵠᐃΔΔΔⵠⵠⵠ(Xw.sign.ⵠΔᐃⲆⲆ, Zw.sign.ᐃⲆᐃΔᐃᐃⵠ);
        Zw.sign.select();
      },
      up: function () {
        Zw.sign.ᐃⲆᐃΔᐃᐃⵠ = Zw.sign.ᐃⲆᐃΔᐃᐃⵠ === fl ? jw.ⲆΔⲆΔⵠⵠᐃ - zs : Zw.sign.ᐃⲆᐃΔᐃᐃⵠ - $b;
        Zw.sign.ᐃΔⵠⲆⵠΔⲆ.src = "./img/sign" + Zw.sign.ᐃⲆᐃΔᐃᐃⵠ + ".png";
      },
      down: function () {
        Zw.sign.ᐃⲆᐃΔᐃᐃⵠ = (Zw.sign.ᐃⲆᐃΔᐃᐃⵠ + 1) % jw.ⲆΔⲆΔⵠⵠᐃ;
        Zw.sign.ᐃΔⵠⲆⵠΔⲆ.src = "./img/sign" + Zw.sign.ᐃⲆᐃΔᐃᐃⵠ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, Ag);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, Ag);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
    this.ⲆΔⵠΔⲆ = {
      open: Fh,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: Rq,
        name: "wood",
        ΔᐃⲆⲆⲆ: zs,
        b: zs,
        a: 3,
        ΔΔⲆΔᐃ: 316
      }, {
        id: 1,
        name: "stone",
        ΔᐃⲆⲆⲆ: wt,
        b: 1,
        a: $i,
        ΔΔⲆΔᐃ: 315
      }, {
        id: rs,
        name: "gold",
        ΔᐃⲆⲆⲆ: gs,
        b: mk,
        a: 6,
        ΔΔⲆΔᐃ: 297
      }, {
        id: 3,
        name: "diamond",
        ΔᐃⲆⲆⲆ: 4,
        b: Pl,
        a: za,
        ΔΔⲆΔᐃ: 298
      }, {
        id: 4,
        name: "amethyst",
        ΔᐃⲆⲆⲆ: 8,
        b: 8,
        a: Tl,
        ΔΔⲆΔᐃ: 418
      }, {
        id: ib,
        name: "reidite",
        ΔᐃⲆⲆⲆ: 16,
        b: 16,
        a: Gh,
        ΔΔⲆΔᐃ: 938
      }, {
        id: Ck,
        name: "pumpkin_seed",
        ΔᐃⲆⲆⲆ: kk,
        b: lg,
        a: Hg,
        ΔΔⲆΔᐃ: 808
      }, {
        id: fg,
        name: "carrot_seed",
        ΔᐃⲆⲆⲆ: ck,
        b: 16,
        a: gs,
        ΔΔⲆΔᐃ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        ΔᐃⲆⲆⲆ: rl,
        b: 20,
        a: 1,
        ΔΔⲆΔᐃ: 959
      }, {
        id: Qj,
        name: "thornbush_seed",
        ΔᐃⲆⲆⲆ: 30,
        b: 30,
        a: 1,
        ΔΔⲆΔᐃ: 845
      }, {
        id: jn,
        name: "garlic_seed",
        ΔᐃⲆⲆⲆ: 40,
        b: 40,
        a: 1,
        ΔΔⲆΔᐃ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        ΔᐃⲆⲆⲆ: 60,
        b: 60,
        a: wt,
        ΔΔⲆΔᐃ: 966
      }],
      button: _v(60, 60, 0, ΔΔ[795]),
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 450) + "px";
        this.style.top = Math.floor(lq - 270) + "px";
      },
      select: function () {
        Zw.ⲆΔⵠΔⲆ.open = !Zw.ⲆΔⵠΔⲆ.open;
        if (Zw.ⲆΔⵠΔⲆ.open) {
          Zw.ⲆΔⵠΔⲆ.style.display = "inline-block";
        } else {
          Zw.ⲆΔⵠΔⲆ.style.display = "none";
        }
      },
      ᐃⵠⲆΔⲆ: function () {
        Zw.ⲆΔⵠΔⲆ.style.display = "none";
        Zw.ⲆΔⵠΔⲆ.open = false;
      },
      ᐃⵠⵠᐃΔΔⵠ: function () {
        Ⲇⵠᐃⵠ.ⲆΔᐃΔΔΔⵠΔΔ(this.ᐃΔΔⲆΔⲆⵠ);
      },
      ⲆⲆΔᐃⵠ: function () {
        this.id;
        if (this.ᐃΔΔⲆΔⲆⵠ.a === wt) {
          var a = Math.floor(Number(this.value) * this.ᐃΔΔⲆΔⲆⵠ.b);
          this.ᐃΔΔⲆΔⲆⵠ.ΔᐃⲆⲆⲆ = a;
          document.getElementById(this.ᐃΔΔⲆΔⲆⵠ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ᐃΔΔⲆΔⲆⵠ.a);
          this.ᐃΔΔⲆΔⲆⵠ.ΔᐃⲆⲆⲆ = a;
          document.getElementById(this.ᐃΔΔⲆΔⲆⵠ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⲆΔⵠΔⲆ.ᐃⵠⲆΔⲆ, C);
    var e = [["mouseup", this.ⲆΔⵠΔⲆ.ᐃⵠⵠᐃΔΔⵠ, "buy_"], ["click", this.ⲆΔⵠΔⲆ.ⲆⲆΔᐃⵠ, ""], ["change", this.ⲆΔⵠΔⲆ.ⲆⲆΔᐃⵠ, ""], ["keypress", this.ⲆΔⵠΔⲆ.keypress, ""]];
    for (var i = Rq; this.ⲆΔⵠΔⲆ.items.length > i; i++) {
      var k = this.ⲆΔⵠΔⲆ.items[i];
      document.getElementById(k.name + "_market").src = ΔΔ[k.ΔΔⲆΔᐃ][0].ΔⵠⲆⲆⵠ === undefined ? ΔΔ[k.ΔΔⲆΔᐃ][0].src : ΔΔ[k.ΔΔⲆΔᐃ][0].ΔⵠⲆⲆⵠ;
      if (gs === k.a) {
        document.getElementById(k.name + "_trad_number").innerHTML = k.b;
        document.getElementById(k.name + "_number").value = za;
        document.getElementById(k.name + "_number").step = 1;
        document.getElementById(k.name + "_number").min = zs;
        document.getElementById(k.name + "_number").max = Math.floor(Hs / k.b);
      } else {
        document.getElementById(k.name + "_trad_number").innerHTML = pu;
        document.getElementById(k.name + "_number").value = k.a;
        document.getElementById(k.name + "_number").step = k.a;
        document.getElementById(k.name + "_number").min = k.a;
      }
      document.getElementById("buy_" + k.name + "_number").ᐃΔΔⲆΔⲆⵠ = k;
      document.getElementById(k.name + "_number").ᐃΔΔⲆΔⲆⵠ = k;
      for (var n = 0; e.length > n; n++) {
        document.getElementById(e[n][2] + k.name + "_number").addEventListener(e[n][0], e[n][1], false);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ᐃᐃⲆⲆᐃ: document.getElementById("agree_ing").style,
      ⵠⲆⵠᐃᐃⵠᐃ: document.getElementById("cancel_agree_ing").style,
      ᐃⲆⵠⵠΔΔⲆ: document.getElementById("quest_agree_ing").style,
      ⲆⲆᐃΔⲆᐃⵠ: document.getElementById("spectator_agree_ing").style,
      ⵠᐃⲆⵠᐃⵠⵠ: document.getElementById("auto_feed_agree_ing").style,
      ΔⵠΔᐃΔⵠⵠ: document.getElementById("info_agree_ing").style,
      ΔᐃᐃⲆΔΔⲆ: document.getElementById("pixelated_agree_ing").style,
      button: _v(60, 60, 0, ΔΔ[727]),
      ΔᐃⵠΔᐃⲆΔⲆⵠ: function () {
        Zw.options.open = !Zw.options.open;
        if (Zw.options.open) {
          Zw.options.style.display = "inline-block";
        } else {
          Zw.options.style.display = "none";
        }
      },
      ΔᐃⲆⵠⲆⵠⵠΔⲆ: function () {
        bf.ⲆΔⵠⲆΔᐃᐃ();
      },
      ΔⵠⵠᐃᐃᐃⲆΔⵠ: function () {
        bf.ⵠᐃⲆᐃᐃΔΔ();
      },
      high: function () {
        bf.ⲆⲆⵠⲆⵠᐃΔΔⲆ();
      },
      low: function () {
        bf.ⲆⲆᐃⲆᐃΔΔⲆΔ();
      },
      ᐃⲆⵠⵠⵠ: function () {
        Zw.ⵠⵠⵠΔ.ᐃⲆⵠⵠⵠ();
      },
      ᐃⲆⵠᐃⵠⵠⵠⲆᐃ: function () {
        Zw.ΔⲆⲆᐃⵠ.ᐃⲆⵠⵠⵠ();
      },
      ΔᐃΔⲆⲆⲆⵠΔΔ: function () {
        Zw.Δⵠᐃᐃ.ᐃⲆⵠⵠⵠ();
      },
      ⵠⲆⲆᐃΔⵠⲆⵠᐃ: function () {
        Xw.ΔΔⵠᐃᐃ.ᐃⵠⲆⵠⵠᐃᐃ();
      },
      ⵠΔⵠⲆⲆⲆᐃᐃᐃ: function () {
        Xw.ᐃΔᐃᐃⲆ.ᐃⵠⲆⵠⵠᐃᐃ();
      },
      ᐃⵠⲆΔⲆ: function () {
        Zw.options.style.display = "none";
        Zw.options.open = false;
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 235) + "px";
        this.style.top = Math.floor(lq - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔᐃⲆⵠⲆⵠⵠΔⲆ, ss);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ΔⵠⵠᐃᐃᐃⲆΔⵠ, _h);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, nt);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, nt);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ᐃⵠⲆΔⲆ, false);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ᐃⲆⵠⵠⵠ, C);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ΔᐃΔⲆⲆⲆⵠΔΔ, false);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ᐃⲆⵠᐃⵠⵠⵠⲆᐃ, xo);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⵠⲆⲆᐃΔⵠⲆⵠᐃ, f);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⵠΔⵠⲆⲆⲆᐃᐃᐃ, false);
    this.ΔⲆⲆᐃⵠ = {
      open: dr,
      ⵠⲆⲆᐃⲆ: ⵠⵠΔΔ.get("starve_cancel") ? ⵠⵠΔΔ.get("starve_cancel") === "0" ? 0 : 1 : og,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ᐃᐃⲆⲆᐃ: document.getElementById("cancel_agree").style,
      button: 0,
      ⵠΔ: ya,
      ᐃⵠⲆΔⲆ: function () {
        Zw.ΔⲆⲆᐃⵠ.style.display = "none";
        Zw.ΔⲆⲆᐃⵠ.open = false;
      },
      ⵠᐃΔⵠⲆΔᐃ: function () {
        if (Xw.ΔᐃⲆⵠ.ΔⲆⵠΔᐃ) {
          Ⲇⵠᐃⵠ.ⲆⲆΔⲆⲆᐃⵠⲆᐃ();
        }
        Zw.ΔⲆⲆᐃⵠ.ᐃⵠⲆΔⲆ();
      },
      ᐃⲆⵠⵠⵠ: function () {
        if (Zw.ΔⲆⲆᐃⵠ.ⵠⲆⲆᐃⲆ) {
          ⵠⵠΔΔ.set("starve_cancel", "0");
          Zw.ΔⲆⲆᐃⵠ.ᐃᐃⲆⲆᐃ.display = "inline-block";
          Zw.options.ⵠⲆⵠᐃᐃⵠᐃ.display = "none";
        } else {
          ⵠⵠΔΔ.set("starve_cancel", "1");
          Zw.ΔⲆⲆᐃⵠ.ᐃᐃⲆⲆᐃ.display = "none";
          Zw.options.ⵠⲆⵠᐃᐃⵠᐃ.display = "inline-block";
        }
        Zw.ΔⲆⲆᐃⵠ.ⵠⲆⲆᐃⲆ = !Zw.ΔⲆⲆᐃⵠ.ⵠⲆⲆᐃⲆ;
      },
      ⲆᐃⵠᐃΔᐃΔ: function () {
        if (this.ⵠⲆⲆᐃⲆ) {
          this.style.display = "inline-block";
          this.open = ye;
        } else {
          this.ⵠᐃΔⵠⲆΔᐃ();
        }
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 235) + "px";
        this.style.top = Math.floor(lq - 130) + "px";
      }
    };
    this.ΔⲆⲆᐃⵠ.id.oncontextmenu = function () {
      return false;
    };
    this.ΔⲆⲆᐃⵠ.ᐃᐃⲆⲆᐃ.display = "none";
    if (this.ΔⲆⲆᐃⵠ.ⵠⲆⲆᐃⲆ) {
      this.options.ⵠⲆⵠᐃᐃⵠᐃ.display = "inline-block";
    } else {
      this.options.ⵠⲆⵠᐃᐃⵠᐃ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ΔⲆⲆᐃⵠ.ⵠᐃΔⵠⲆΔᐃ, xo);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ΔⲆⲆᐃⵠ.ᐃⵠⲆΔⲆ, vt);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ΔⲆⲆᐃⵠ.ᐃⲆⵠⵠⵠ, dr);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, Tk);
    this.ᐃᐃⲆⲆΔⲆΔ = {
      ⵠⲆⲆᐃⲆ: ⵠⵠΔΔ.get("starve_aliasing") ? ⵠⵠΔΔ.get("starve_aliasing") === "0" ? Rq : hb : Gh,
      ⵠᐃᐃΔⵠᐃᐃ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ᐃⲆⵠⵠⵠ: function () {
        if (Zw.ᐃᐃⲆⲆΔⲆΔ.ⵠⲆⲆᐃⲆ === Lr) {
          ⵠⵠΔΔ.set("starve_aliasing", "1");
          Zw.ᐃᐃⲆⲆΔⲆΔ.ⵠᐃᐃΔⵠᐃᐃ(Tl);
          Zw.options.ΔᐃᐃⲆΔΔⲆ.display = "inline-block";
        } else {
          ⵠⵠΔΔ.set("starve_aliasing", "0");
          Zw.ᐃᐃⲆⲆΔⲆΔ.ⵠᐃᐃΔⵠᐃᐃ(0);
          Zw.options.ΔᐃᐃⲆΔΔⲆ.display = "none";
        }
        Zw.ᐃᐃⲆⲆΔⲆΔ.ⵠⲆⲆᐃⲆ = (Zw.ᐃᐃⲆⲆΔⲆΔ.ⵠⲆⲆᐃⲆ + 1) % 2;
      }
    };
    if (gs === this.ᐃᐃⲆⲆΔⲆΔ.ⵠⲆⲆᐃⲆ) {
      this.options.ΔᐃᐃⲆΔΔⲆ.display = "inline-block";
    } else {
      this.ᐃᐃⲆⲆΔⲆΔ.ⵠᐃᐃΔⵠᐃᐃ(0);
      this.options.ΔᐃᐃⲆΔΔⲆ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ᐃᐃⲆⲆΔⲆΔ.ᐃⲆⵠⵠⵠ, Ta);
    this.Ⲇⵠᐃⵠⵠ = {
      ⵠⲆⲆᐃⲆ: ⵠⵠΔΔ.get("starve_info_box") ? ⵠⵠΔΔ.get("starve_info_box") === "0" ? 0 : 1 : zs,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ΔᐃⲆⵠ: ya,
      ᐃⲆⵠⵠⵠ: function () {
        if (Zw.Ⲇⵠᐃⵠⵠ.ⵠⲆⲆᐃⲆ === 0) {
          ⵠⵠΔΔ.set("starve_info_box", "1");
          Zw.options.ΔⵠΔᐃΔⵠⵠ.display = "inline-block";
        } else {
          ⵠⵠΔΔ.set("starve_info_box", "0");
          Zw.options.ΔⵠΔᐃΔⵠⵠ.display = "none";
        }
        Zw.Ⲇⵠᐃⵠⵠ.ⵠⲆⲆᐃⲆ = (Zw.Ⲇⵠᐃⵠⵠ.ⵠⲆⲆᐃⲆ + mk) % 2;
      },
      ⲆⵠᐃΔ: function (a, b, c) {
        if (a && this.ⵠⲆⲆᐃⲆ) {
          this.display = mk;
          this.id = c === Mg ? b.id : Ws[b.id].Δⵠⵠⵠ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ΔᐃⲆⵠ = c;
        }
        return a;
      }
    };
    if (this.Ⲇⵠᐃⵠⵠ.ⵠⲆⲆᐃⲆ === 1) {
      this.options.ΔⵠΔᐃΔⵠⵠ.display = "inline-block";
    } else {
      this.options.ΔⵠΔᐃΔⵠⵠ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.Ⲇⵠᐃⵠⵠ.ᐃⲆⵠⵠⵠ, false);
    if (ⵠⵠΔΔ.get("starve_scale")) {
      yo = Number(ⵠⵠΔΔ.get("starve_scale"));
      document.getElementById("input_ratio").value = yo;
      yo *= ua / ca;
      ma();
    }
    this.ᐃΔⵠΔⵠⲆⲆ = function () {
      ⵠⵠΔΔ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      yo = ua / ca * document.getElementById("input_ratio").value;
      ma();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ᐃΔⵠΔⵠⲆⲆ, f);
    this.ⵠⵠⵠΔ = {
      open: false,
      ⵠⲆⲆᐃⲆ: ⵠⵠΔΔ.get("starve_safe") && ⵠⵠΔΔ.get("starve_safe") === "0" ? 0 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ᐃᐃⲆⲆᐃ: document.getElementById("agree").style,
      button: wg,
      ⵠΔ: 0,
      ᐃⵠⲆΔⲆ: function () {
        Zw.ⵠⵠⵠΔ.style.display = "none";
        Zw.ⵠⵠⵠΔ.open = nt;
      },
      all: function () {
        if (!Xw.ᐃΔᐃⲆⵠ.wait) {
          if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && Xw.ΔᐃⲆⵠ.id < wj && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
            Ⲇⵠᐃⵠ.ΔΔⵠΔⲆΔΔⲆⵠ(Zw.ⵠⵠⵠΔ.button);
          }
          Zw.ⵠⵠⵠΔ.ᐃⵠⲆΔⲆ();
        }
      },
      ⲆΔⲆⲆ: function () {
        if (Xw.ΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ && !Xw.ᐃΔᐃⲆⵠ.wait) {
          if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && Xw.ΔᐃⲆⵠ.id < 0 && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
            Ⲇⵠᐃⵠ.ⲆⵠⵠⵠᐃⲆⲆⲆⵠ(Zw.ⵠⵠⵠΔ.button);
          }
          Zw.ⵠⵠⵠΔ.ᐃⵠⲆΔⲆ();
        }
      },
      ᐃⵠⲆⵠⵠᐃⲆⲆΔ: function () {
        if (!Xw.ᐃΔᐃⲆⵠ.wait) {
          if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < Hi && Xw.ΔᐃⲆⵠ.id < 0 && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
            Ⲇⵠᐃⵠ.ⲆⵠᐃⵠⵠΔⲆΔⵠ(Zw.ⵠⵠⵠΔ.button);
          }
          Zw.ⵠⵠⵠΔ.ᐃⵠⲆΔⲆ();
        }
      },
      ᐃⲆⵠⵠⵠ: function () {
        if (Zw.ⵠⵠⵠΔ.ⵠⲆⲆᐃⲆ) {
          ⵠⵠΔΔ.set("starve_safe", "0");
          Zw.ⵠⵠⵠΔ.ᐃᐃⲆⲆᐃ.display = "inline-block";
          Zw.options.ᐃᐃⲆⲆᐃ.display = "none";
        } else {
          ⵠⵠΔΔ.set("starve_safe", "1");
          Zw.ⵠⵠⵠΔ.ᐃᐃⲆⲆᐃ.display = "none";
          Zw.options.ᐃᐃⲆⲆᐃ.display = "inline-block";
        }
        Zw.ⵠⵠⵠΔ.ⵠⲆⲆᐃⲆ = !Zw.ⵠⵠⵠΔ.ⵠⲆⲆᐃⲆ;
      },
      ⲆᐃⵠᐃΔᐃΔ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ΔΔ[ds[a].ⵠⵠ][0].ΔⵠⲆⲆⵠ === tt ? ΔΔ[ds[a].ⵠⵠ][Mg].src : ΔΔ[ds[a].ⵠⵠ][0].ΔⵠⲆⲆⵠ;
        if (ds[a].ⲆΔⲆⲆ && !Xw.ⲆᐃⲆⵠᐃ && Xw.ΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ⵠⲆⲆᐃⲆ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 235) + "px";
        this.style.top = Math.floor(lq - 175) + "px";
      }
    };
    this.ⵠⵠⵠΔ.ᐃᐃⲆⲆᐃ.display = "none";
    if (this.ⵠⵠⵠΔ.ⵠⲆⲆᐃⲆ) {
      this.options.ᐃᐃⲆⲆᐃ.display = "inline-block";
    } else {
      this.options.ᐃᐃⲆⲆᐃ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ⵠⵠⵠΔ.ᐃⵠⲆⵠⵠᐃⲆⲆΔ, f);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ⵠⵠⵠΔ.all, false);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ⵠⵠⵠΔ.ⲆΔⲆⲆ, false);
    document.getElementById("no_delete").addEventListener("mouseup", this.ⵠⵠⵠΔ.ᐃⵠⲆΔⲆ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ⵠⵠⵠΔ.ᐃⲆⵠⵠⵠ, false);
    this.ⵠΔⲆⵠΔ = {
      open: false,
      ⲆΔⲆΔᐃ: -Te,
      button: _v(60, 60, 0, ΔΔ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 300) + "px";
        this.style.top = Math.floor(lq - 215) + "px";
      },
      ᐃⵠⲆΔⲆ: function () {
        Zw.ⵠΔⲆⵠΔ.open = xo;
        Zw.ⵠΔⲆⵠΔ.style.display = "none";
      },
      select: function () {
        Zw.ⵠΔⲆⵠΔ.open = !Zw.ⵠΔⲆⵠΔ.open;
        if (Zw.ⵠΔⲆⵠΔ.open) {
          Zw.ⵠΔⲆⵠΔ.style.display = "inline-block";
        } else {
          Zw.ⵠΔⲆⵠΔ.style.display = "none";
        }
      },
      ᐃⵠⵠᐃΔΔⵠ: function () {
        if (Zw.ⵠΔⲆⵠΔ.ⲆΔⲆΔᐃ >= 0) {
          Ⲇⵠᐃⵠ.ⵠΔΔᐃⲆᐃⵠΔΔ(Zw.ⵠΔⲆⵠΔ.ⲆΔⲆΔᐃ);
          Zw.ⵠΔⲆⵠΔ.ᐃⵠⲆΔⲆ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + Zw.ⵠΔⲆⵠΔ.ⲆΔⲆΔᐃ);
          }
        }
      },
      ᐃΔΔΔᐃ: function () {
        var a = Xw.ⵠΔⲆⵠΔ.value;
        document.getElementById("points_bank").innerHTML = ᐃⵠΔⲆ.ᐃΔⵠᐃᐃᐃᐃ(a) + " points";
        for (var b = 0; b < iw.length; b++) {
          if (iw[b].ⲆⵠΔΔⲆ > a) {
            document.getElementById("starter" + (b + Xn)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = wt; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ⵠⲆⵠΔᐃᐃᐃⲆⵠ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(Rr) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(uh));
        }
        var b = iw[a - Tl];
        if (Xw.ⵠΔⲆⵠΔ.value >= b.ⲆⵠΔΔⲆ) {
          Zw.ⵠΔⲆⵠΔ.ⲆΔⲆΔᐃ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          Zw.ⵠΔⲆⵠΔ.ⲆΔⲆΔᐃ = -Oq;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = ie, d = Hg; c < b.length + 1; c++) {
          if (b[c - gs][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ΔΔ[ds[b[c - 1][$b]].ⵠⵠ][Qs].ΔⵠⲆⲆⵠ === Hq ? ΔΔ[ds[b[c - 1][og]].ⵠⵠ][Hi].src : ΔΔ[ds[b[c - Hg][1]].ⵠⵠ][0].ΔⵠⲆⲆⵠ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - ie][eu];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ⵠΔⲆⵠΔ.ᐃⵠⲆΔⲆ, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ⵠΔⲆⵠΔ.ᐃⵠⵠᐃΔΔⵠ, Ta);
    for (n = Hg; n < 11; n++) {
      document.getElementById("starter" + n).addEventListener("mouseup", this.ⵠΔⲆⵠΔ.ⵠⲆⵠΔᐃᐃᐃⲆⵠ, _h);
    }
    this.Δⵠᐃᐃ = {
      open: Ag,
      ⵠⲆⲆᐃⲆ: ⵠⵠΔΔ.get("starve_quests") ? ⵠⵠΔΔ.get("starve_quests") === "1" ? 1 : 0 : os,
      button: _v(60, 60, 0, ΔΔ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 420) + "px";
        this.style.top = Math.floor(lq - 270) + "px";
      },
      ᐃⵠⲆΔⲆ: function () {
        Zw.Δⵠᐃᐃ.style.display = "none";
        Zw.Δⵠᐃᐃ.open = Jn;
      },
      select: function () {
        Zw.Δⵠᐃᐃ.open = !Zw.Δⵠᐃᐃ.open;
        if (Zw.Δⵠᐃᐃ.open) {
          Zw.Δⵠᐃᐃ.style.display = "inline-block";
        } else {
          Zw.Δⵠᐃᐃ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = Hi; a < mw.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ΔⵠⵠΔΔΔᐃ: Zj,
      ᐃⵠΔΔΔᐃⲆ: 0,
      ⲆⵠΔΔΔⵠⵠΔᐃ: function () {
        if (Zw.Δⵠᐃᐃ.open) {
          var a = new Date().getTime();
          if (a - this.ΔⵠⵠΔΔΔᐃ >= 1000) {
            this.ΔⵠⵠΔΔΔᐃ = a;
            for (var b = 0; b < mw.length; b++) {
              if (Zw.Δⵠᐃᐃ.list[b]) {
                var c = mw[b].time - (a - cf.ΔᐃᐃΔⲆ.ᐃΔΔΔᐃ + Zw.Δⵠᐃᐃ.ᐃⵠΔΔΔᐃⲆ);
                if (c > 960000) {
                  document.getElementById("timeremain_" + b).innerHTML = Math.floor(c / 480000) + " days";
                } else if (c > 480000) {
                  document.getElementById("timeremain_" + b).innerHTML = Math.floor(c / 480000) + " day";
                } else if (c > 60000) {
                  document.getElementById("timeremain_" + b).innerHTML = Math.floor(c / 60000) + " min";
                } else {
                  document.getElementById("timeremain_" + b).innerHTML = Math.floor(c / 1000) + " sec";
                }
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = Da; b < a.length; b++) {
          if (a[b] != 1) {
            Zw.Δⵠᐃᐃ.ᐃⵠⵠⵠⲆᐃⲆ(b, a[b]);
          }
        }
      },
      ᐃⵠⵠⵠⲆᐃⲆ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          Xw.ᐃΔᐃⵠ.ΔΔᐃⵠⲆⵠⵠ(wj, za);
          Zw.ΔᐃⲆᐃΔᐃⵠ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > Oq) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === In) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === Pn ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        Zw.Δⵠᐃᐃ.list[a] = mj;
      },
      modify: function (a, b) {
        Zw.Δⵠᐃᐃ.ᐃⵠⵠⵠⲆᐃⲆ(a, b);
        if (Zw.Δⵠᐃᐃ.ⵠⲆⲆᐃⲆ) {
          Zw.Δⵠᐃᐃ.open = true;
          Zw.Δⵠᐃᐃ.style.display = "inline-block";
        }
      },
      ᐃⲆⵠⵠⵠ: function () {
        if (Zw.Δⵠᐃᐃ.ⵠⲆⲆᐃⲆ) {
          ⵠⵠΔΔ.set("starve_quests", "0");
          Zw.options.ᐃⲆⵠⵠΔΔⲆ.display = "none";
        } else {
          ⵠⵠΔΔ.set("starve_quests", "1");
          Zw.options.ᐃⲆⵠⵠΔΔⲆ.display = "inline-block";
        }
        Zw.Δⵠᐃᐃ.ⵠⲆⲆᐃⲆ = !Zw.Δⵠᐃᐃ.ⵠⲆⲆᐃⲆ;
      },
      ⵠΔⲆᐃΔⵠΔΔⵠ: function () {
        var a = Number(this.id.charAt(Cq));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= R) {
          a = a * J + b;
        }
        Ⲇⵠᐃⵠ.ⲆᐃΔΔΔᐃⵠⵠᐃ(a);
      }
    };
    if (this.Δⵠᐃᐃ.ⵠⲆⲆᐃⲆ) {
      this.options.ᐃⲆⵠⵠΔΔⲆ.display = "inline-block";
    } else {
      this.options.ᐃⲆⵠⵠΔΔⲆ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.Δⵠᐃᐃ.ᐃⵠⲆΔⲆ, Mh);
    for (n = 0; n < mw.length; n++) {
      document.getElementById("claim_reward_" + n).addEventListener("mouseup", this.Δⵠᐃᐃ.ⵠΔⲆᐃΔⵠΔΔⵠ, false);
    }
    this.ⲆⵠⲆⵠ = {
      open: Ei,
      button: _v(60, 60, 0, ΔΔ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ΔΔΔΔⵠᐃᐃ: [],
        ⲆⲆΔᐃᐃⲆⵠ: 0,
        ᐃⲆΔ: function () {
          this.style.left = Math.floor(bo - 335) + "px";
          this.style.top = Math.floor(lq - 215) + "px";
        },
        ᐃⵠⲆΔⲆ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          Zw.ⲆⵠⲆⵠ.open = false;
        },
        ⲆⲆᐃⲆΔᐃΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ⲆⵠΔΔ: function (a) {
          if ((b = this.ΔΔΔΔⵠᐃᐃ[a]).ⵠᐃⵠ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ΔΔ[ds[b[a][ig]].ⵠⵠ][Ih].ΔⵠⲆⲆⵠ === undefined ? ΔΔ[ds[b[a][ya]].ⵠⵠ][0].src : ΔΔ[ds[b[a][In]].ⵠⵠ][0].ΔⵠⲆⲆⵠ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ⲆⲆΔᐃᐃⲆⵠ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = wj; b < Ws.length; b++) {
            var d = Ws[b];
            if (a === d.ⵠⵠⵠ) {
              this.ΔΔΔΔⵠᐃᐃ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ΔΔ[ds[d.Δⵠⵠⵠ].ⵠⵠ][0].ΔⵠⲆⲆⵠ === undefined ? ΔΔ[ds[d.Δⵠⵠⵠ].ⵠⵠ][Bb].src : ΔΔ[ds[d.Δⵠⵠⵠ].ⵠⵠ][0].ΔⵠⲆⲆⵠ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ⵠⲆΔΔⲆᐃΔ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ᐃⲆΔ: function () {
          this.style.left = Math.floor(bo - 285) + "px";
          this.style.top = Math.floor(lq - 170) + "px";
        },
        ᐃⵠⲆΔⲆ: function () {
          document.getElementById("home_craft").style.display = "none";
          Zw.ⲆⵠⲆⵠ.open = false;
        }
      },
      ⵠⵠⲆⲆᐃΔΔᐃⵠ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ⲆⵠⲆⵠ.ⵠⲆΔΔⲆᐃΔ.ᐃⵠⲆΔⲆ, Qg);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ⲆⵠⲆⵠ.list.ᐃⵠⲆΔⲆ, _h);
    document.getElementById("backhome").addEventListener("mouseup", this.ⲆⵠⲆⵠ.list.ⲆⲆᐃⲆΔᐃΔ, Ta);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(bs.ⵠᐃⲆᐃᐃ);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(bs.ΔⲆΔⵠ);
    }, vt);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(bs.ⲆᐃⵠᐃΔ);
    }, Ag);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(bs.ⵠⲆⵠⲆΔ);
    }, false);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(bs.ΔⲆⵠⵠⲆ);
    }, false);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(bs.Ⲇⵠⵠⵠᐃ);
    }, f);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(0);
    }, Mh);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(1);
    }, gh);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(qo);
    }, false);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(4);
    }, false);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(5);
    }, jl);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(6);
    }, vj);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(7);
    }, _h);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(Es);
    }, dr);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(Ca);
    }, Ei);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(xt);
    }, xo);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(11);
    }, Tk);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(13);
    }, false);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(dk);
    }, Jn);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(Ds);
    }, Ei);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(16);
    }, _h);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(17);
    }, ss);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(Vq);
    }, ss);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(so);
    }, false);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(20);
    }, false);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(21);
    }, Qg);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(22);
    }, jl);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(23);
    }, xo);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(24);
    }, false);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(25);
    }, jl);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(26);
    }, vt);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(27);
    }, C);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(28);
    }, false);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(29);
    }, false);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(30);
    }, vt);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(31);
    }, dr);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(32);
    }, false);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(33);
    }, false);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(34);
    }, gh);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(37);
    }, false);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(38);
    }, false);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(39);
    }, Tk);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(40);
    }, _h);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(41);
    }, f);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(42);
    }, Ag);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(43);
    }, false);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(45);
    }, false);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(46);
    }, false);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(47);
    }, false);
    this.ΔΔΔⲆⵠ = {
      translate: {
        y: wg,
        x: 0
      },
      ⵠΔᐃᐃΔ: {
        y: -1,
        x: -1
      },
      ⵠΔΔⲆ: [],
      focus: function (a) {
        var b = this.translate.y + (Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ⵠΔᐃᐃΔ.x = a.x - this.translate.x;
          this.ⵠΔᐃᐃΔ.y = a.y - b;
        }
      }
    };
    this.ⵠⵠⵠⵠ = {
      translate: {
        y: wj,
        x: 0
      },
      ⵠⵠ: ΔΔ[278],
      ⲆΔ: document.createElement("canvas")
    };
    this.ⵠⵠⵠⵠ.ⲆΔ.width = this.ⵠⵠⵠⵠ.ⵠⵠ.width;
    this.ⵠⵠⵠⵠ.ⲆΔ.height = this.ⵠⵠⵠⵠ.ⵠⵠ.height;
    this.ⵠⵠⵠⵠ.ᐃ = this.ⵠⵠⵠⵠ.ⲆΔ.getContext("2d");
    this.ⲆΔᐃΔ = {
      translate: {
        y: Rq,
        x: 0
      },
      ⵠⵠ: ΔΔ[267],
      ᐃⵠᐃⵠ: Lm,
      y: Hi
    };
    this.ΔⵠⵠΔΔⵠΔ = function () {
      ᐃⲆⵠⵠⲆ = document.getElementById("team_box");
      ᐃⲆⵠⵠⲆ.innerHTML = "";
      ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + cf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[os]].ⲆⲆΔⵠᐃ + "</div";
      for (var a = 1; a < Xw.ᐃΔⲆⲆⵠ.length; a++) {
        ᐃⲆⵠⵠⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + cf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[a]].ⲆⲆΔⵠᐃ + "</div></div>";
      }
      ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ᐃⲆⵠⵠⲆ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", Ⲇⵠᐃⵠ.ΔⵠⵠΔΔⵠΔ, false);
    };
    this.ⲆⵠⵠΔΔᐃⵠᐃᐃ = function () {
      ᐃⲆⵠⵠⲆ = document.getElementById("team_box");
      ᐃⲆⵠⵠⲆ.innerHTML = "";
      ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + cf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[ya]].ⲆⲆΔⵠᐃ + "</div";
      for (var a = Wl; Xw.ᐃΔⲆⲆⵠ.length > a; a++) {
        ᐃⲆⵠⵠⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + cf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[a]].ⲆⲆΔⵠᐃ + "</div></div>";
      }
      ᐃⲆⵠⵠⲆ.innerHTML += "</div>";
      ᐃⲆⵠⵠⲆ.style.display = "inline-block";
    };
    this.ΔⲆᐃⵠΔᐃⵠⲆⲆ = function () {
      ᐃⲆⵠⵠⲆ = document.getElementById("team_box");
      ᐃⲆⵠⵠⲆ.innerHTML = "";
      ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + cf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[mj]].ⲆⲆΔⵠᐃ + "</div";
      for (var a = 1; Xw.ᐃΔⲆⲆⵠ.length > a; a++) {
        ᐃⲆⵠⵠⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + cf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[a]].ⲆⲆΔⵠᐃ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (Xw.ΔⵠⲆᐃᐃ.lock === 0) {
        ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", Ⲇⵠᐃⵠ.ⵠᐃᐃΔⲆⵠⵠⲆΔ, false);
      ᐃⲆⵠⵠⲆ.style.display = "inline-block";
      for (a = Xn; Xw.ᐃΔⲆⲆⵠ.length > a; a++) {
        switch (a) {
          case Gh:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(au);
            }, false);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(2);
            }, false);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(xb);
            }, ss);
            break;
          case $l:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(Mq);
            }, C);
            break;
          case mb:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(nr);
            }, al);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(Th);
            }, vt);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(7);
            }, false);
            break;
          case Dg:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(8);
            }, false);
        }
      }
    };
    this.ⲆΔⵠᐃᐃ = [];
    this.ⲆΔⵠᐃᐃ[jw.ᐃⵠᐃⲆΔΔⵠ] = {
      button: _v(60, 60, 0, ΔΔ[556]),
      action: this.ΔⵠⵠΔΔⵠΔ
    };
    this.ⲆΔⵠᐃᐃ[jw.ΔᐃΔΔΔⲆⲆ] = {
      button: _v(60, 60, 0, ΔΔ[556]),
      action: Ⲇⵠᐃⵠ.ⲆᐃΔⵠΔⵠⲆⵠΔ
    };
    this.ⲆΔⵠᐃᐃ[jw.ᐃⲆᐃⲆⵠⵠΔ] = {
      button: _v(60, 60, 0, ΔΔ[557]),
      action: this.ΔⲆᐃⵠΔᐃⵠⲆⲆ
    };
    this.ⲆΔⵠᐃᐃ[jw.ⵠᐃᐃⵠᐃΔΔ] = {
      button: _v(60, 60, 0, ΔΔ[561]),
      action: this.ⲆⵠⵠΔΔᐃⵠᐃᐃ
    };
    this.ⲆΔⵠᐃᐃ[jw.ᐃⲆΔⵠᐃⵠⵠ] = {
      button: _v(60, 60, 0, ΔΔ[560]),
      action: function () {}
    };
    this.ᐃⵠᐃᐃⲆ = -1;
    this.ᐃᐃᐃᐃⵠΔⲆ = _v(60, 60, 0, ΔΔ[723]);
    this.ᐃⲆΔⵠᐃⲆⲆ = _v(60, 60, 0, ΔΔ[724]);
    this.ΔⵠⲆⵠΔⵠⲆ = _v(60, 60, 0, ΔΔ[658]);
    this.ⵠⵠⲆⵠΔⵠΔ = _v(60, 60, 0, ΔΔ[657]);
    this.ΔᐃΔⲆᐃΔᐃ = _v(60, 60, 0, ΔΔ[658]);
    this.ΔᐃⵠⲆⵠⵠΔ = _v(60, 60, 0, ΔΔ[316]);
    this.ⲆΔΔⲆΔⲆᐃ = _v(60, 60, 0, ΔΔ[315]);
    this.ΔⲆΔᐃΔΔⲆ = _v(60, 60, 0, ΔΔ[297]);
    this.ᐃⵠᐃⵠᐃᐃΔ = _v(60, 60, 0, ΔΔ[298]);
    this.ⵠᐃᐃΔⲆΔᐃ = _v(60, 60, 0, ΔΔ[418]);
    this.ⲆⵠⲆΔΔⲆⲆ = _v(60, 60, 0, ΔΔ[938]);
    this.ⲆΔⲆᐃⵠⵠᐃ = _v(60, 60, 0, ΔΔ[412]);
    this.ⲆΔⵠᐃⲆⵠⲆ = _v(60, 60, 0, ΔΔ[536]);
    this.ⵠᐃⲆΔΔⲆΔ = _v(60, 60, 0, ΔΔ[535]);
    this.ΔΔᐃⵠⵠⵠⵠ = _v(60, 60, 0, ΔΔ[538]);
    this.ⲆᐃⵠᐃⲆ = _v(120, 120, 0, ΔΔ[149]);
    this.ⲆᐃⵠᐃⲆ.info.translate.x = xt;
    this.ⲆᐃⵠᐃⲆ.info.translate.y = 10;
    this.ⲆⵠΔ = [];
    this.ⲆⵠΔ[0] = _v(68, 68, 0, ΔΔ[340], 3);
    this.ⲆⵠΔ[0].id = 0;
    this.ⲆⵠΔ[1] = _v(68, 68, 0, ΔΔ[341], 3);
    this.ⲆⵠΔ[1].id = 1;
    this.ⲆⵠΔ[108] = _v(68, 68, 0, ΔΔ[342], ut);
    this.ⲆⵠΔ[108].id = 108;
    this.ⲆⵠΔ[109] = _v(68, 68, 0, ΔΔ[343], 3);
    this.ⲆⵠΔ[109].id = 109;
    this.ⲆⵠΔ[110] = _v(68, 68, 0, ΔΔ[269], 3);
    this.ⲆⵠΔ[110].id = 110;
    this.ⲆⵠΔ[233] = _v(68, 68, 0, ΔΔ[1155], 3);
    this.ⲆⵠΔ[233].id = 233;
    this.ⲆⵠΔ[111] = _v(68, 68, 0, ΔΔ[270], Hk);
    this.ⲆⵠΔ[111].id = 111;
    this.ⲆⵠΔ[112] = _v(68, 68, 0, ΔΔ[271], ub);
    this.ⲆⵠΔ[112].id = 112;
    this.ⲆⵠΔ[3] = _v(68, 68, 0, ΔΔ[272], 3);
    this.ⲆⵠΔ[3].id = 3;
    this.ⲆⵠΔ[4] = _v(68, 68, 0, ΔΔ[344], fn);
    this.ⲆⵠΔ[4].id = 4;
    this.ⲆⵠΔ[5] = _v(68, 68, 0, ΔΔ[345], 3);
    this.ⲆⵠΔ[5].id = 5;
    this.ⲆⵠΔ[57] = _v(68, 68, 0, ΔΔ[831], Tr);
    this.ⲆⵠΔ[57].id = 57;
    this.ⲆⵠΔ[6] = _v(68, 68, 0, ΔΔ[346], Hk);
    this.ⲆⵠΔ[6].id = 6;
    this.ⲆⵠΔ[113] = _v(68, 68, 0, ΔΔ[273], eg);
    this.ⲆⵠΔ[113].id = 113;
    this.ⲆⵠΔ[114] = _v(68, 68, 0, ΔΔ[358], 3);
    this.ⲆⵠΔ[114].id = 114;
    this.ⲆⵠΔ[115] = _v(68, 68, 0, ΔΔ[348], nq);
    this.ⲆⵠΔ[115].id = 115;
    this.ⲆⵠΔ[162] = _v(68, 68, 0, ΔΔ[349], qo);
    this.ⲆⵠΔ[162].id = 162;
    this.ⲆⵠΔ[160] = _v(68, 68, 0, ΔΔ[350], 3);
    this.ⲆⵠΔ[160].id = 160;
    this.ⲆⵠΔ[8] = _v(68, 68, 0, ΔΔ[274], 3);
    this.ⲆⵠΔ[8].id = 8;
    this.ⲆⵠΔ[117] = _v(68, 68, 0, ΔΔ[351], Tt);
    this.ⲆⵠΔ[117].id = 117;
    this.ⲆⵠΔ[116] = _v(68, 68, 0, ΔΔ[275], 3);
    this.ⲆⵠΔ[116].id = 116;
    this.ⲆⵠΔ[118] = _v(68, 68, 0, ΔΔ[276], ea);
    this.ⲆⵠΔ[118].id = 118;
    this.ⲆⵠΔ[195] = _v(68, 68, 0, ΔΔ[352], 3);
    this.ⲆⵠΔ[195].id = 195;
    this.ⲆⵠΔ[161] = _v(68, 68, 0, ΔΔ[353], 3);
    this.ⲆⵠΔ[161].id = 161;
    this.ⲆⵠΔ[163] = _v(68, 68, 0, ΔΔ[354], qo);
    this.ⲆⵠΔ[163].id = 163;
    this.ⲆⵠΔ[164] = _v(68, 68, 0, ΔΔ[355], eg);
    this.ⲆⵠΔ[164].id = 164;
    this.ⲆⵠΔ[165] = _v(68, 68, 0, ΔΔ[356], ci);
    this.ⲆⵠΔ[165].id = 165;
    this.ⲆⵠΔ[166] = _v(68, 68, 0, ΔΔ[357], I);
    this.ⲆⵠΔ[166].id = 166;
    this.ⲆⵠΔ[167] = _v(68, 68, 0, ΔΔ[359], nq);
    this.ⲆⵠΔ[167].id = 167;
    this.ⲆⵠΔ[168] = _v(68, 68, 0, ΔΔ[382], 3);
    this.ⲆⵠΔ[168].id = 168;
    this.ⲆⵠΔ[169] = _v(68, 68, 0, ΔΔ[383], 3);
    this.ⲆⵠΔ[169].id = 169;
    this.ⲆⵠΔ[170] = _v(68, 68, 0, ΔΔ[384], 3);
    this.ⲆⵠΔ[170].id = 170;
    this.ⲆⵠΔ[2] = _v(68, 68, 0, ΔΔ[386], sl);
    this.ⲆⵠΔ[2].id = 2;
    this.ⲆⵠΔ[237] = _v(68, 68, 0, ΔΔ[1163], 3);
    this.ⲆⵠΔ[237].id = 237;
    this.ⲆⵠΔ[174] = _v(68, 68, 0, ΔΔ[394], yr);
    this.ⲆⵠΔ[174].id = 174;
    this.ⲆⵠΔ[222] = _v(68, 68, 0, ΔΔ[1036], 3);
    this.ⲆⵠΔ[222].id = 222;
    this.ⲆⵠΔ[231] = _v(68, 68, 0, ΔΔ[1038], 3);
    this.ⲆⵠΔ[231].id = 231;
    this.ⲆⵠΔ[232] = _v(68, 68, 0, ΔΔ[1040], Wb);
    this.ⲆⵠΔ[232].id = 232;
    this.ⲆⵠΔ[234] = _v(68, 68, 0, ΔΔ[1157], 3);
    this.ⲆⵠΔ[234].id = 234;
    this.ⲆⵠΔ[10] = _v(68, 68, 0, ΔΔ[387], 3);
    this.ⲆⵠΔ[10].id = 10;
    this.ⲆⵠΔ[171] = _v(68, 68, 0, ΔΔ[388], 3);
    this.ⲆⵠΔ[171].id = 171;
    this.ⲆⵠΔ[172] = _v(68, 68, 0, ΔΔ[389], 3);
    this.ⲆⵠΔ[172].id = 172;
    this.ⲆⵠΔ[173] = _v(68, 68, 0, ΔΔ[390], qo);
    this.ⲆⵠΔ[173].id = 173;
    this.ⲆⵠΔ[11] = _v(68, 68, 0, ΔΔ[391], eg);
    this.ⲆⵠΔ[11].id = 11;
    this.ⲆⵠΔ[12] = _v(68, 68, 0, ΔΔ[403], 3);
    this.ⲆⵠΔ[12].id = 12;
    this.ⲆⵠΔ[13] = _v(68, 68, 0, ΔΔ[397], 3);
    this.ⲆⵠΔ[13].id = 13;
    this.ⲆⵠΔ[14] = _v(68, 68, 0, ΔΔ[400], xb);
    this.ⲆⵠΔ[14].id = 14;
    this.ⲆⵠΔ[15] = _v(68, 68, 0, ΔΔ[406], Tr);
    this.ⲆⵠΔ[15].id = 15;
    this.ⲆⵠΔ[16] = _v(68, 68, 0, ΔΔ[875], xb);
    this.ⲆⵠΔ[16].id = 16;
    this.ⲆⵠΔ[119] = _v(68, 68, 0, ΔΔ[410], 3);
    this.ⲆⵠΔ[119].id = 119;
    this.ⲆⵠΔ[23] = _v(68, 68, 0, ΔΔ[422], ea);
    this.ⲆⵠΔ[23].id = 23;
    this.ⲆⵠΔ[24] = _v(68, 68, 0, ΔΔ[425], 3);
    this.ⲆⵠΔ[24].id = 24;
    this.ⲆⵠΔ[87] = _v(68, 68, 0, ΔΔ[1229], 3);
    this.ⲆⵠΔ[87].id = 87;
    this.ⲆⵠΔ[88] = _v(68, 68, 0, ΔΔ[1232], qu);
    this.ⲆⵠΔ[88].id = 88;
    this.ⲆⵠΔ[80] = _v(68, 68, 0, ΔΔ[1139], ci);
    this.ⲆⵠΔ[80].id = 80;
    this.ⲆⵠΔ[81] = _v(68, 68, 0, ΔΔ[1142], 3);
    this.ⲆⵠΔ[81].id = 81;
    this.ⲆⵠΔ[101] = _v(68, 68, 0, ΔΔ[1167], sl);
    this.ⲆⵠΔ[101].id = 101;
    this.ⲆⵠΔ[64] = _v(68, 68, 0, ΔΔ[571], Hk);
    this.ⲆⵠΔ[64].id = 64;
    this.ⲆⵠΔ[71] = _v(68, 68, 0, ΔΔ[1240], yr);
    this.ⲆⵠΔ[71].id = 71;
    this.ⲆⵠΔ[102] = _v(68, 68, 0, ΔΔ[1170], qu);
    this.ⲆⵠΔ[102].id = 102;
    this.ⲆⵠΔ[65] = _v(68, 68, 0, ΔΔ[574], ub);
    this.ⲆⵠΔ[65].id = 65;
    this.ⲆⵠΔ[72] = _v(68, 68, 0, ΔΔ[1243], yr);
    this.ⲆⵠΔ[72].id = 72;
    this.ⲆⵠΔ[103] = _v(68, 68, 0, ΔΔ[1173], 3);
    this.ⲆⵠΔ[103].id = 103;
    this.ⲆⵠΔ[66] = _v(68, 68, 0, ΔΔ[577], Hk);
    this.ⲆⵠΔ[66].id = 66;
    this.ⲆⵠΔ[73] = _v(68, 68, 0, ΔΔ[1246], 3);
    this.ⲆⵠΔ[73].id = 73;
    this.ⲆⵠΔ[104] = _v(68, 68, 0, ΔΔ[1176], yr);
    this.ⲆⵠΔ[104].id = 104;
    this.ⲆⵠΔ[67] = _v(68, 68, 0, ΔΔ[580], 3);
    this.ⲆⵠΔ[67].id = 67;
    this.ⲆⵠΔ[74] = _v(68, 68, 0, ΔΔ[1249], 3);
    this.ⲆⵠΔ[74].id = 74;
    this.ⲆⵠΔ[105] = _v(68, 68, 0, ΔΔ[1179], Wb);
    this.ⲆⵠΔ[105].id = 105;
    this.ⲆⵠΔ[68] = _v(68, 68, 0, ΔΔ[583], 3);
    this.ⲆⵠΔ[68].id = 68;
    this.ⲆⵠΔ[75] = _v(68, 68, 0, ΔΔ[1252], ub);
    this.ⲆⵠΔ[75].id = 75;
    this.ⲆⵠΔ[106] = _v(68, 68, 0, ΔΔ[1182], 3);
    this.ⲆⵠΔ[106].id = 106;
    this.ⲆⵠΔ[69] = _v(68, 68, 0, ΔΔ[586], 3);
    this.ⲆⵠΔ[69].id = 69;
    this.ⲆⵠΔ[76] = _v(68, 68, 0, ΔΔ[1255], eg);
    this.ⲆⵠΔ[76].id = 76;
    this.ⲆⵠΔ[107] = _v(68, 68, 0, ΔΔ[1185], eg);
    this.ⲆⵠΔ[107].id = 107;
    this.ⲆⵠΔ[70] = _v(68, 68, 0, ΔΔ[589], Hk);
    this.ⲆⵠΔ[70].id = 70;
    this.ⲆⵠΔ[94] = _v(68, 68, 0, ΔΔ[1258], fn);
    this.ⲆⵠΔ[94].id = 94;
    this.ⲆⵠΔ[95] = _v(68, 68, 0, ΔΔ[1261], I);
    this.ⲆⵠΔ[95].id = 95;
    this.ⲆⵠΔ[96] = _v(68, 68, 0, ΔΔ[1264], 3);
    this.ⲆⵠΔ[96].id = 96;
    this.ⲆⵠΔ[97] = _v(68, 68, 0, ΔΔ[1267], ll);
    this.ⲆⵠΔ[97].id = 97;
    this.ⲆⵠΔ[98] = _v(68, 68, 0, ΔΔ[1270], Hk);
    this.ⲆⵠΔ[98].id = 98;
    this.ⲆⵠΔ[99] = _v(68, 68, 0, ΔΔ[1273], 3);
    this.ⲆⵠΔ[99].id = 99;
    this.ⲆⵠΔ[58] = _v(68, 68, 0, ΔΔ[828], 3);
    this.ⲆⵠΔ[58].id = 58;
    this.ⲆⵠΔ[25] = _v(68, 68, 0, ΔΔ[431], 3);
    this.ⲆⵠΔ[25].id = 25;
    this.ⲆⵠΔ[26] = _v(68, 68, 0, ΔΔ[434], ut);
    this.ⲆⵠΔ[26].id = 26;
    this.ⲆⵠΔ[27] = _v(68, 68, 0, ΔΔ[437], 3);
    this.ⲆⵠΔ[27].id = 27;
    this.ⲆⵠΔ[28] = _v(68, 68, 0, ΔΔ[440], fn);
    this.ⲆⵠΔ[28].id = 28;
    this.ⲆⵠΔ[120] = _v(68, 68, 0, ΔΔ[443], fn);
    this.ⲆⵠΔ[120].id = 120;
    this.ⲆⵠΔ[29] = _v(68, 68, 0, ΔΔ[385], 3);
    this.ⲆⵠΔ[29].id = 29;
    this.ⲆⵠΔ[121] = _v(68, 68, 0, ΔΔ[446], 3);
    this.ⲆⵠΔ[121].id = 121;
    this.ⲆⵠΔ[30] = _v(68, 68, 0, ΔΔ[457], Hk);
    this.ⲆⵠΔ[30].id = 30;
    this.ⲆⵠΔ[9] = _v(68, 68, 0, ΔΔ[862], Tr);
    this.ⲆⵠΔ[9].id = 9;
    this.ⲆⵠΔ[31] = _v(68, 68, 0, ΔΔ[459], yr);
    this.ⲆⵠΔ[31].id = 31;
    this.ⲆⵠΔ[32] = _v(68, 68, 0, ΔΔ[1018], 3);
    this.ⲆⵠΔ[32].id = 32;
    this.ⲆⵠΔ[33] = _v(68, 68, 0, ΔΔ[474], 3);
    this.ⲆⵠΔ[33].id = 33;
    this.ⲆⵠΔ[35] = _v(68, 68, 0, ΔΔ[479], 3);
    this.ⲆⵠΔ[35].id = 35;
    this.ⲆⵠΔ[36] = _v(68, 68, 0, ΔΔ[482], ll);
    this.ⲆⵠΔ[36].id = 36;
    this.ⲆⵠΔ[37] = _v(68, 68, 0, ΔΔ[485], Lg);
    this.ⲆⵠΔ[37].id = 37;
    this.ⲆⵠΔ[38] = _v(68, 68, 0, ΔΔ[488], fn);
    this.ⲆⵠΔ[38].id = 38;
    this.ⲆⵠΔ[39] = _v(68, 68, 0, ΔΔ[491], Tt);
    this.ⲆⵠΔ[39].id = 39;
    this.ⲆⵠΔ[122] = _v(68, 68, 0, ΔΔ[494], fn);
    this.ⲆⵠΔ[122].id = 122;
    this.ⲆⵠΔ[123] = _v(68, 68, 0, ΔΔ[497], 3);
    this.ⲆⵠΔ[123].id = 123;
    this.ⲆⵠΔ[124] = _v(68, 68, 0, ΔΔ[501], yr);
    this.ⲆⵠΔ[124].id = 124;
    this.ⲆⵠΔ[40] = _v(68, 68, 0, ΔΔ[504], ci);
    this.ⲆⵠΔ[40].id = 40;
    this.ⲆⵠΔ[146] = _v(68, 68, 0, ΔΔ[506], 3);
    this.ⲆⵠΔ[146].id = 146;
    this.ⲆⵠΔ[240] = _v(68, 68, 0, ΔΔ[1234], 3);
    this.ⲆⵠΔ[240].id = 240;
    this.ⲆⵠΔ[147] = _v(68, 68, 0, ΔΔ[514], 3);
    this.ⲆⵠΔ[147].id = 147;
    this.ⲆⵠΔ[148] = _v(68, 68, 0, ΔΔ[520], ll);
    this.ⲆⵠΔ[148].id = 148;
    this.ⲆⵠΔ[149] = _v(68, 68, 0, ΔΔ[522], sl);
    this.ⲆⵠΔ[149].id = 149;
    this.ⲆⵠΔ[150] = _v(68, 68, 0, ΔΔ[524], 3);
    this.ⲆⵠΔ[150].id = 150;
    this.ⲆⵠΔ[151] = _v(68, 68, 0, ΔΔ[531], Wb);
    this.ⲆⵠΔ[151].id = 151;
    this.ⲆⵠΔ[158] = _v(68, 68, 0, ΔΔ[534], 3);
    this.ⲆⵠΔ[158].id = 158;
    this.ⲆⵠΔ[159] = _v(68, 68, 0, ΔΔ[554], 3);
    this.ⲆⵠΔ[159].id = 159;
    this.ⲆⵠΔ[43] = _v(68, 68, 0, ΔΔ[543], I);
    this.ⲆⵠΔ[43].id = 43;
    this.ⲆⵠΔ[45] = _v(68, 68, 0, ΔΔ[552], eg);
    this.ⲆⵠΔ[45].id = 45;
    this.ⲆⵠΔ[125] = _v(68, 68, 0, ΔΔ[606], 3);
    this.ⲆⵠΔ[125].id = 125;
    this.ⲆⵠΔ[221] = _v(68, 68, 0, ΔΔ[1237], eg);
    this.ⲆⵠΔ[221].id = 221;
    this.ⲆⵠΔ[223] = _v(68, 68, 0, ΔΔ[1029], ll);
    this.ⲆⵠΔ[223].id = 223;
    this.ⲆⵠΔ[224] = _v(68, 68, 0, ΔΔ[1032], yr);
    this.ⲆⵠΔ[224].id = 224;
    this.ⲆⵠΔ[230] = _v(68, 68, 0, ΔΔ[1118], 3);
    this.ⲆⵠΔ[230].id = 230;
    this.ⲆⵠΔ[89] = _v(68, 68, 0, ΔΔ[1047], ub);
    this.ⲆⵠΔ[89].id = 89;
    this.ⲆⵠΔ[225] = _v(68, 68, 0, ΔΔ[1050], 3);
    this.ⲆⵠΔ[225].id = 225;
    this.ⲆⵠΔ[227] = _v(68, 68, 0, ΔΔ[1081], Tr);
    this.ⲆⵠΔ[227].id = 227;
    this.ⲆⵠΔ[239] = _v(68, 68, 0, ΔΔ[1225], Js);
    this.ⲆⵠΔ[239].id = 239;
    this.ⲆⵠΔ[228] = _v(68, 68, 0, ΔΔ[1096], fn);
    this.ⲆⵠΔ[228].id = 228;
    this.ⲆⵠΔ[229] = _v(68, 68, 0, ΔΔ[1111], ll);
    this.ⲆⵠΔ[229].id = 229;
    this.ⲆⵠΔ[226] = _v(68, 68, 0, ΔΔ[1190], 3);
    this.ⲆⵠΔ[226].id = 226;
    this.ⲆⵠΔ[126] = _v(68, 68, 0, ΔΔ[610], 3);
    this.ⲆⵠΔ[126].id = 126;
    this.ⲆⵠΔ[127] = _v(68, 68, 0, ΔΔ[615], I);
    this.ⲆⵠΔ[127].id = 127;
    this.ⲆⵠΔ[128] = _v(68, 68, 0, ΔΔ[614], 3);
    this.ⲆⵠΔ[128].id = 128;
    this.ⲆⵠΔ[46] = _v(68, 68, 0, ΔΔ[617], 3);
    this.ⲆⵠΔ[46].id = 46;
    this.ⲆⵠΔ[50] = _v(68, 68, 0, ΔΔ[701], ub);
    this.ⲆⵠΔ[50].id = 50;
    this.ⲆⵠΔ[51] = _v(68, 68, 0, ΔΔ[703], xb);
    this.ⲆⵠΔ[51].id = 51;
    this.ⲆⵠΔ[52] = _v(68, 68, 0, ΔΔ[707], Hk);
    this.ⲆⵠΔ[52].id = 52;
    this.ⲆⵠΔ[55] = _v(68, 68, 0, ΔΔ[710], Lg);
    this.ⲆⵠΔ[55].id = 55;
    this.ⲆⵠΔ[129] = _v(68, 68, 0, ΔΔ[625], nq);
    this.ⲆⵠΔ[129].id = 129;
    this.ⲆⵠΔ[130] = _v(68, 68, 0, ΔΔ[628], 3);
    this.ⲆⵠΔ[130].id = 130;
    this.ⲆⵠΔ[131] = _v(68, 68, 0, ΔΔ[630], ub);
    this.ⲆⵠΔ[131].id = 131;
    this.ⲆⵠΔ[132] = _v(68, 68, 0, ΔΔ[633], 3);
    this.ⲆⵠΔ[132].id = 132;
    this.ⲆⵠΔ[133] = _v(68, 68, 0, ΔΔ[636], ll);
    this.ⲆⵠΔ[133].id = 133;
    this.ⲆⵠΔ[134] = _v(68, 68, 0, ΔΔ[640], ci);
    this.ⲆⵠΔ[134].id = 134;
    this.ⲆⵠΔ[135] = _v(68, 68, 0, ΔΔ[645], 3);
    this.ⲆⵠΔ[135].id = 135;
    this.ⲆⵠΔ[47] = _v(68, 68, 0, ΔΔ[648], 3);
    this.ⲆⵠΔ[47].id = 47;
    this.ⲆⵠΔ[48] = _v(68, 68, 0, ΔΔ[651], 3);
    this.ⲆⵠΔ[48].id = 48;
    this.ⲆⵠΔ[49] = _v(68, 68, 0, ΔΔ[653], ea);
    this.ⲆⵠΔ[49].id = 49;
    this.ⲆⵠΔ[136] = _v(68, 68, 0, ΔΔ[661], 3);
    this.ⲆⵠΔ[136].id = 136;
    this.ⲆⵠΔ[143] = _v(68, 68, 0, ΔΔ[689], eg);
    this.ⲆⵠΔ[143].id = 143;
    this.ⲆⵠΔ[137] = _v(68, 68, 0, ΔΔ[663], 3);
    this.ⲆⵠΔ[137].id = 137;
    this.ⲆⵠΔ[138] = _v(68, 68, 0, ΔΔ[665], 3);
    this.ⲆⵠΔ[138].id = 138;
    this.ⲆⵠΔ[139] = _v(68, 68, 0, ΔΔ[675], 3);
    this.ⲆⵠΔ[139].id = 139;
    this.ⲆⵠΔ[140] = _v(68, 68, 0, ΔΔ[682], ea);
    this.ⲆⵠΔ[140].id = 140;
    this.ⲆⵠΔ[141] = _v(68, 68, 0, ΔΔ[683], ub);
    this.ⲆⵠΔ[141].id = 141;
    this.ⲆⵠΔ[142] = _v(68, 68, 0, ΔΔ[686], 3);
    this.ⲆⵠΔ[142].id = 142;
    this.ⲆⵠΔ[144] = _v(68, 68, 0, ΔΔ[719], xb);
    this.ⲆⵠΔ[144].id = 144;
    this.ⲆⵠΔ[145] = _v(68, 68, 0, ΔΔ[731], qo);
    this.ⲆⵠΔ[145].id = 145;
    this.ⲆⵠΔ[59] = _v(68, 68, 0, ΔΔ[733], 3);
    this.ⲆⵠΔ[59].id = 59;
    this.ⲆⵠΔ[62] = _v(68, 68, 0, ΔΔ[565], eg);
    this.ⲆⵠΔ[62].id = 62;
    this.ⲆⵠΔ[185] = _v(68, 68, 0, ΔΔ[590], 3);
    this.ⲆⵠΔ[185].id = 185;
    this.ⲆⵠΔ[184] = _v(68, 68, 0, ΔΔ[752], I);
    this.ⲆⵠΔ[184].id = 184;
    this.ⲆⵠΔ[187] = _v(68, 68, 0, ΔΔ[591], Wb);
    this.ⲆⵠΔ[187].id = 187;
    this.ⲆⵠΔ[186] = _v(68, 68, 0, ΔΔ[754], qo);
    this.ⲆⵠΔ[186].id = 186;
    this.ⲆⵠΔ[77] = _v(68, 68, 0, ΔΔ[757], 3);
    this.ⲆⵠΔ[77].id = 77;
    this.ⲆⵠΔ[175] = _v(68, 68, 0, ΔΔ[759], Js);
    this.ⲆⵠΔ[175].id = 175;
    this.ⲆⵠΔ[176] = _v(68, 68, 0, ΔΔ[763], 3);
    this.ⲆⵠΔ[176].id = 176;
    this.ⲆⵠΔ[78] = _v(68, 68, 0, ΔΔ[761], 3);
    this.ⲆⵠΔ[78].id = 78;
    this.ⲆⵠΔ[177] = _v(68, 68, 0, ΔΔ[766], nq);
    this.ⲆⵠΔ[177].id = 177;
    this.ⲆⵠΔ[79] = _v(68, 68, 0, ΔΔ[765], 3);
    this.ⲆⵠΔ[79].id = 79;
    this.ⲆⵠΔ[83] = _v(68, 68, 0, ΔΔ[769], Js);
    this.ⲆⵠΔ[83].id = 83;
    this.ⲆⵠΔ[84] = _v(68, 68, 0, ΔΔ[773], 3);
    this.ⲆⵠΔ[84].id = 84;
    this.ⲆⵠΔ[178] = _v(68, 68, 0, ΔΔ[774], qo);
    this.ⲆⵠΔ[178].id = 178;
    this.ⲆⵠΔ[179] = _v(68, 68, 0, ΔΔ[775], Tr);
    this.ⲆⵠΔ[179].id = 179;
    this.ⲆⵠΔ[86] = _v(68, 68, 0, ΔΔ[778], eg);
    this.ⲆⵠΔ[86].id = 86;
    this.ⲆⵠΔ[85] = _v(68, 68, 0, ΔΔ[781], 3);
    this.ⲆⵠΔ[85].id = 85;
    this.ⲆⵠΔ[180] = _v(68, 68, 0, ΔΔ[786], Tr);
    this.ⲆⵠΔ[180].id = 180;
    this.ⲆⵠΔ[181] = _v(68, 68, 0, ΔΔ[787], 3);
    this.ⲆⵠΔ[181].id = 181;
    this.ⲆⵠΔ[182] = _v(68, 68, 0, ΔΔ[790], Tt);
    this.ⲆⵠΔ[182].id = 182;
    this.ⲆⵠΔ[183] = _v(68, 68, 0, ΔΔ[801], 3);
    this.ⲆⵠΔ[183].id = 183;
    this.ⲆⵠΔ[188] = _v(68, 68, 0, ΔΔ[810], 3);
    this.ⲆⵠΔ[188].id = 188;
    this.ⲆⵠΔ[189] = _v(68, 68, 0, ΔΔ[815], 3);
    this.ⲆⵠΔ[189].id = 189;
    this.ⲆⵠΔ[190] = _v(68, 68, 0, ΔΔ[844], eg);
    this.ⲆⵠΔ[190].id = 190;
    this.ⲆⵠΔ[191] = _v(68, 68, 0, ΔΔ[836], 3);
    this.ⲆⵠΔ[191].id = 191;
    this.ⲆⵠΔ[192] = _v(68, 68, 0, ΔΔ[841], Hk);
    this.ⲆⵠΔ[192].id = 192;
    this.ⲆⵠΔ[193] = _v(68, 68, 0, ΔΔ[847], ut);
    this.ⲆⵠΔ[193].id = 193;
    this.ⲆⵠΔ[194] = _v(68, 68, 0, ΔΔ[851], nq);
    this.ⲆⵠΔ[194].id = 194;
    this.ⲆⵠΔ[206] = _v(68, 68, 0, ΔΔ[961], Tt);
    this.ⲆⵠΔ[206].id = 206;
    this.ⲆⵠΔ[207] = _v(68, 68, 0, ΔΔ[974], Wb);
    this.ⲆⵠΔ[207].id = 207;
    this.ⲆⵠΔ[204] = _v(68, 68, 0, ΔΔ[951], 3);
    this.ⲆⵠΔ[204].id = 204;
    this.ⲆⵠΔ[205] = _v(68, 68, 0, ΔΔ[956], qo);
    this.ⲆⵠΔ[205].id = 205;
    this.ⲆⵠΔ[208] = _v(68, 68, 0, ΔΔ[968], ll);
    this.ⲆⵠΔ[208].id = 208;
    this.ⲆⵠΔ[209] = _v(68, 68, 0, ΔΔ[973], ci);
    this.ⲆⵠΔ[209].id = 209;
    this.ⲆⵠΔ[210] = _v(68, 68, 0, ΔΔ[983], 3);
    this.ⲆⵠΔ[210].id = 210;
    this.ⲆⵠΔ[211] = _v(68, 68, 0, ΔΔ[988], 3);
    this.ⲆⵠΔ[211].id = 211;
    this.ⲆⵠΔ[41] = _v(68, 68, 0, ΔΔ[881], 3);
    this.ⲆⵠΔ[41].id = 41;
    this.ⲆⵠΔ[42] = _v(68, 68, 0, ΔΔ[883], qu);
    this.ⲆⵠΔ[42].id = 42;
    this.ⲆⵠΔ[12] = _v(68, 68, 0, ΔΔ[403], Js);
    this.ⲆⵠΔ[12].id = 12;
    this.ⲆⵠΔ[16] = _v(68, 68, 0, ΔΔ[875], 3);
    this.ⲆⵠΔ[16].id = 16;
    this.ⲆⵠΔ[196] = _v(68, 68, 0, ΔΔ[898], yr);
    this.ⲆⵠΔ[196].id = 196;
    this.ⲆⵠΔ[18] = _v(68, 68, 0, ΔΔ[899], 3);
    this.ⲆⵠΔ[18].id = 18;
    this.ⲆⵠΔ[197] = _v(68, 68, 0, ΔΔ[906], eg);
    this.ⲆⵠΔ[197].id = 197;
    this.ⲆⵠΔ[198] = _v(68, 68, 0, ΔΔ[908], 3);
    this.ⲆⵠΔ[198].id = 198;
    this.ⲆⵠΔ[61] = _v(68, 68, 0, ΔΔ[911], xb);
    this.ⲆⵠΔ[61].id = 61;
    this.ⲆⵠΔ[201] = _v(68, 68, 0, ΔΔ[871], Wb);
    this.ⲆⵠΔ[201].id = 201;
    this.ⲆⵠΔ[199] = _v(68, 68, 0, ΔΔ[863], ea);
    this.ⲆⵠΔ[199].id = 199;
    this.ⲆⵠΔ[200] = _v(68, 68, 0, ΔΔ[868], qu);
    this.ⲆⵠΔ[200].id = 200;
    this.ⲆⵠᐃΔⲆ = [];
    for (n = 0; n < 250; n++) {
      this.ⲆⵠᐃΔⲆ[n] = _v(0, Da, 0, ΔΔ[366]);
    }
    this.ᐃᐃᐃ = [];
    this.ᐃᐃᐃ[0] = _v(60, 60, 0, ΔΔ[261], Wb);
    this.ᐃᐃᐃ[0].id = 0;
    this.ᐃᐃᐃ[1] = _v(60, 60, 0, ΔΔ[312], 3);
    this.ᐃᐃᐃ[1].id = 1;
    this.ᐃᐃᐃ[108] = _v(60, 60, 0, ΔΔ[315], ub);
    this.ᐃᐃᐃ[108].id = 108;
    this.ᐃᐃᐃ[108].info.ⵠⵠ[as] = this.ᐃᐃᐃ[108].info.ⵠⵠ[Lr];
    this.ᐃᐃᐃ[109] = _v(60, 60, 0, ΔΔ[316], 3);
    this.ᐃᐃᐃ[109].id = 109;
    this.ᐃᐃᐃ[109].info.ⵠⵠ[Vg] = this.ᐃᐃᐃ[109].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[110] = _v(60, 60, 0, ΔΔ[277], Hk);
    this.ᐃᐃᐃ[110].id = 110;
    this.ᐃᐃᐃ[233] = _v(60, 60, 0, ΔΔ[1154], 3);
    this.ᐃᐃᐃ[233].id = 233;
    this.ᐃᐃᐃ[111] = _v(60, 60, 0, ΔΔ[297], 3);
    this.ᐃᐃᐃ[111].id = 111;
    this.ᐃᐃᐃ[111].info.ⵠⵠ[vg] = this.ᐃᐃᐃ[111].info.ⵠⵠ[ig];
    this.ᐃᐃᐃ[112] = _v(60, 60, 0, ΔΔ[298], Tt);
    this.ᐃᐃᐃ[112].id = 112;
    this.ᐃᐃᐃ[112].info.ⵠⵠ[Hj] = this.ᐃᐃᐃ[112].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[3] = _v(60, 60, 0, ΔΔ[258], 3);
    this.ᐃᐃᐃ[3].id = 3;
    this.ᐃᐃᐃ[4] = _v(60, 60, 0, ΔΔ[296], fn);
    this.ᐃᐃᐃ[4].id = 4;
    this.ᐃᐃᐃ[5] = _v(60, 60, 0, ΔΔ[292], 3);
    this.ᐃᐃᐃ[5].id = 5;
    this.ᐃᐃᐃ[57] = _v(60, 60, 0, ΔΔ[829], qu);
    this.ᐃᐃᐃ[57].id = 57;
    this.ᐃᐃᐃ[6] = _v(60, 60, 0, ΔΔ[293], yr);
    this.ᐃᐃᐃ[6].id = 6;
    this.ᐃᐃᐃ[113] = _v(60, 60, 0, ΔΔ[309], ut);
    this.ᐃᐃᐃ[113].id = 113;
    this.ᐃᐃᐃ[114] = _v(60, 60, 0, ΔΔ[310], 3);
    this.ᐃᐃᐃ[114].id = 114;
    this.ᐃᐃᐃ[115] = _v(60, 60, 0, ΔΔ[311], 3);
    this.ᐃᐃᐃ[115].id = 115;
    this.ᐃᐃᐃ[162] = _v(60, 60, 0, ΔΔ[317], Js);
    this.ᐃᐃᐃ[162].id = 162;
    this.ᐃᐃᐃ[160] = _v(60, 60, 0, ΔΔ[319], 3);
    this.ᐃᐃᐃ[160].id = 160;
    this.ᐃᐃᐃ[8] = _v(60, 60, 0, ΔΔ[313], Lg);
    this.ᐃᐃᐃ[8].id = 8;
    this.ᐃᐃᐃ[117] = _v(60, 60, 0, ΔΔ[323], nq);
    this.ᐃᐃᐃ[117].id = 117;
    this.ᐃᐃᐃ[116] = _v(60, 60, 0, ΔΔ[300], qo);
    this.ᐃᐃᐃ[116].id = 116;
    this.ᐃᐃᐃ[118] = _v(60, 60, 0, ΔΔ[328], ub);
    this.ᐃᐃᐃ[118].id = 118;
    this.ᐃᐃᐃ[195] = _v(60, 60, 0, ΔΔ[303], 3);
    this.ᐃᐃᐃ[195].id = 195;
    this.ᐃᐃᐃ[161] = _v(60, 60, 0, ΔΔ[305], I);
    this.ᐃᐃᐃ[161].id = 161;
    this.ᐃᐃᐃ[161].info.ⵠⵠ[2] = this.ᐃᐃᐃ[161].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[163] = _v(60, 60, 0, ΔΔ[329], Hk);
    this.ᐃᐃᐃ[163].id = 163;
    this.ᐃᐃᐃ[164] = _v(60, 60, 0, ΔΔ[330], ea);
    this.ᐃᐃᐃ[164].id = 164;
    this.ᐃᐃᐃ[165] = _v(60, 60, 0, ΔΔ[331], 3);
    this.ᐃᐃᐃ[165].id = 165;
    this.ᐃᐃᐃ[166] = _v(60, 60, 0, ΔΔ[335], fn);
    this.ᐃᐃᐃ[166].id = 166;
    this.ᐃᐃᐃ[167] = _v(60, 60, 0, ΔΔ[337], ea);
    this.ᐃᐃᐃ[167].id = 167;
    this.ᐃᐃᐃ[168] = _v(60, 60, 0, ΔΔ[361], 3);
    this.ᐃᐃᐃ[168].id = 168;
    this.ᐃᐃᐃ[169] = _v(60, 60, 0, ΔΔ[362], 3);
    this.ᐃᐃᐃ[169].id = 169;
    this.ᐃᐃᐃ[170] = _v(60, 60, 0, ΔΔ[364], 3);
    this.ᐃᐃᐃ[170].id = 170;
    this.ᐃᐃᐃ[29] = _v(60, 60, 0, ΔΔ[392], eg);
    this.ᐃᐃᐃ[29].id = 29;
    this.ᐃᐃᐃ[10] = _v(60, 60, 0, ΔΔ[369], ll);
    this.ᐃᐃᐃ[10].id = 10;
    this.ᐃᐃᐃ[171] = _v(60, 60, 0, ΔΔ[372], 3);
    this.ᐃᐃᐃ[171].id = 171;
    this.ᐃᐃᐃ[172] = _v(60, 60, 0, ΔΔ[375], 3);
    this.ᐃᐃᐃ[172].id = 172;
    this.ᐃᐃᐃ[173] = _v(60, 60, 0, ΔΔ[378], 3);
    this.ᐃᐃᐃ[173].id = 173;
    this.ᐃᐃᐃ[2] = _v(60, 60, 0, ΔΔ[368], 3);
    this.ᐃᐃᐃ[2].id = 2;
    this.ᐃᐃᐃ[2].info.ⵠⵠ[2] = this.ᐃᐃᐃ[2].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[237] = _v(60, 60, 0, ΔΔ[1162], Js);
    this.ᐃᐃᐃ[237].id = 237;
    this.ᐃᐃᐃ[237].info.ⵠⵠ[2] = this.ᐃᐃᐃ[237].info.ⵠⵠ[fl];
    this.ᐃᐃᐃ[174] = _v(60, 60, 0, ΔΔ[393], 3);
    this.ᐃᐃᐃ[174].id = 174;
    this.ᐃᐃᐃ[174].info.ⵠⵠ[H] = this.ᐃᐃᐃ[174].info.ⵠⵠ[wg];
    this.ᐃᐃᐃ[222] = _v(60, 60, 0, ΔΔ[1035], 3);
    this.ᐃᐃᐃ[222].id = 222;
    this.ᐃᐃᐃ[231] = _v(60, 60, 0, ΔΔ[1037], fn);
    this.ᐃᐃᐃ[231].id = 231;
    this.ᐃᐃᐃ[232] = _v(60, 60, 0, ΔΔ[1039], Js);
    this.ᐃᐃᐃ[232].id = 232;
    this.ᐃᐃᐃ[234] = _v(60, 60, 0, ΔΔ[1156], 3);
    this.ᐃᐃᐃ[234].id = 234;
    this.ᐃᐃᐃ[10] = _v(60, 60, 0, ΔΔ[369], 3);
    this.ᐃᐃᐃ[10].id = 10;
    this.ᐃᐃᐃ[11] = _v(60, 60, 0, ΔΔ[381], ea);
    this.ᐃᐃᐃ[11].id = 11;
    this.ᐃᐃᐃ[12] = _v(60, 60, 0, ΔΔ[401], fn);
    this.ᐃᐃᐃ[12].id = 12;
    this.ᐃᐃᐃ[13] = _v(60, 60, 0, ΔΔ[395], 3);
    this.ᐃᐃᐃ[13].id = 13;
    this.ᐃᐃᐃ[14] = _v(60, 60, 0, ΔΔ[398], ub);
    this.ᐃᐃᐃ[14].id = 14;
    this.ᐃᐃᐃ[15] = _v(60, 60, 0, ΔΔ[404], 3);
    this.ᐃᐃᐃ[15].id = 15;
    this.ᐃᐃᐃ[16] = _v(60, 60, 0, ΔΔ[874], Tr);
    this.ᐃᐃᐃ[16].id = 16;
    this.ᐃᐃᐃ[119] = _v(60, 60, 0, ΔΔ[408], 3);
    this.ᐃᐃᐃ[119].id = 119;
    this.ᐃᐃᐃ[23] = _v(60, 60, 0, ΔΔ[420], Tr);
    this.ᐃᐃᐃ[23].id = 23;
    this.ᐃᐃᐃ[24] = _v(60, 60, 0, ΔΔ[423], 3);
    this.ᐃᐃᐃ[24].id = 24;
    this.ᐃᐃᐃ[87] = _v(60, 60, 0, ΔΔ[1227], 3);
    this.ᐃᐃᐃ[87].id = 87;
    this.ᐃᐃᐃ[88] = _v(60, 60, 0, ΔΔ[1230], qu);
    this.ᐃᐃᐃ[88].id = 88;
    this.ᐃᐃᐃ[80] = _v(60, 60, 0, ΔΔ[1137], Js);
    this.ᐃᐃᐃ[80].id = 80;
    this.ᐃᐃᐃ[81] = _v(60, 60, 0, ΔΔ[1140], 3);
    this.ᐃᐃᐃ[81].id = 81;
    this.ᐃᐃᐃ[64] = _v(60, 60, 0, ΔΔ[569], 3);
    this.ᐃᐃᐃ[64].id = 64;
    this.ᐃᐃᐃ[101] = _v(60, 60, 0, ΔΔ[1166], ea);
    this.ᐃᐃᐃ[101].id = 101;
    this.ᐃᐃᐃ[71] = _v(60, 60, 0, ΔΔ[1239], 3);
    this.ᐃᐃᐃ[71].id = 71;
    this.ᐃᐃᐃ[65] = _v(60, 60, 0, ΔΔ[572], 3);
    this.ᐃᐃᐃ[65].id = 65;
    this.ᐃᐃᐃ[102] = _v(60, 60, 0, ΔΔ[1169], 3);
    this.ᐃᐃᐃ[102].id = 102;
    this.ᐃᐃᐃ[72] = _v(60, 60, 0, ΔΔ[1242], 3);
    this.ᐃᐃᐃ[72].id = 72;
    this.ᐃᐃᐃ[66] = _v(60, 60, 0, ΔΔ[575], 3);
    this.ᐃᐃᐃ[66].id = 66;
    this.ᐃᐃᐃ[103] = _v(60, 60, 0, ΔΔ[1172], xb);
    this.ᐃᐃᐃ[103].id = 103;
    this.ᐃᐃᐃ[73] = _v(60, 60, 0, ΔΔ[1245], 3);
    this.ᐃᐃᐃ[73].id = 73;
    this.ᐃᐃᐃ[67] = _v(60, 60, 0, ΔΔ[578], ll);
    this.ᐃᐃᐃ[67].id = 67;
    this.ᐃᐃᐃ[104] = _v(60, 60, 0, ΔΔ[1175], ll);
    this.ᐃᐃᐃ[104].id = 104;
    this.ᐃᐃᐃ[74] = _v(60, 60, 0, ΔΔ[1248], qu);
    this.ᐃᐃᐃ[74].id = 74;
    this.ᐃᐃᐃ[68] = _v(60, 60, 0, ΔΔ[581], Hk);
    this.ᐃᐃᐃ[68].id = 68;
    this.ᐃᐃᐃ[105] = _v(60, 60, 0, ΔΔ[1178], 3);
    this.ᐃᐃᐃ[105].id = 105;
    this.ᐃᐃᐃ[75] = _v(60, 60, 0, ΔΔ[1251], 3);
    this.ᐃᐃᐃ[75].id = 75;
    this.ᐃᐃᐃ[69] = _v(60, 60, 0, ΔΔ[584], 3);
    this.ᐃᐃᐃ[69].id = 69;
    this.ᐃᐃᐃ[106] = _v(60, 60, 0, ΔΔ[1181], 3);
    this.ᐃᐃᐃ[106].id = 106;
    this.ᐃᐃᐃ[76] = _v(60, 60, 0, ΔΔ[1254], 3);
    this.ᐃᐃᐃ[76].id = 76;
    this.ᐃᐃᐃ[70] = _v(60, 60, 0, ΔΔ[587], fn);
    this.ᐃᐃᐃ[70].id = 70;
    this.ᐃᐃᐃ[107] = _v(60, 60, 0, ΔΔ[1184], 3);
    this.ᐃᐃᐃ[107].id = 107;
    this.ᐃᐃᐃ[94] = _v(60, 60, 0, ΔΔ[1257], 3);
    this.ᐃᐃᐃ[94].id = 94;
    this.ᐃᐃᐃ[95] = _v(60, 60, 0, ΔΔ[1260], ea);
    this.ᐃᐃᐃ[95].id = 95;
    this.ᐃᐃᐃ[96] = _v(60, 60, 0, ΔΔ[1263], 3);
    this.ᐃᐃᐃ[96].id = 96;
    this.ᐃᐃᐃ[97] = _v(60, 60, 0, ΔΔ[1266], 3);
    this.ᐃᐃᐃ[97].id = 97;
    this.ᐃᐃᐃ[98] = _v(60, 60, 0, ΔΔ[1269], eg);
    this.ᐃᐃᐃ[98].id = 98;
    this.ᐃᐃᐃ[99] = _v(60, 60, 0, ΔΔ[1272], Tt);
    this.ᐃᐃᐃ[99].id = 99;
    this.ᐃᐃᐃ[58] = _v(60, 60, 0, ΔΔ[826], 3);
    this.ᐃᐃᐃ[58].id = 58;
    this.ᐃᐃᐃ[25] = _v(60, 60, 0, ΔΔ[429], 3);
    this.ᐃᐃᐃ[25].id = 25;
    this.ᐃᐃᐃ[26] = _v(60, 60, 0, ΔΔ[432], Hk);
    this.ᐃᐃᐃ[26].id = 26;
    this.ᐃᐃᐃ[27] = _v(60, 60, 0, ΔΔ[435], 3);
    this.ᐃᐃᐃ[27].id = 27;
    this.ᐃᐃᐃ[28] = _v(60, 60, 0, ΔΔ[438], 3);
    this.ᐃᐃᐃ[28].id = 28;
    this.ᐃᐃᐃ[120] = _v(60, 60, 0, ΔΔ[441], 3);
    this.ᐃᐃᐃ[120].id = 120;
    this.ᐃᐃᐃ[120].info.ⵠⵠ[2] = this.ᐃᐃᐃ[120].info.ⵠⵠ[Hi];
    this.ᐃᐃᐃ[29] = _v(60, 60, 0, ΔΔ[392], 3);
    this.ᐃᐃᐃ[29].id = 29;
    this.ᐃᐃᐃ[121] = _v(60, 60, 0, ΔΔ[418], 3);
    this.ᐃᐃᐃ[121].id = 121;
    this.ᐃᐃᐃ[121].info.ⵠⵠ[2] = this.ᐃᐃᐃ[121].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[30] = _v(60, 60, 0, ΔΔ[455], Wb);
    this.ᐃᐃᐃ[30].id = 30;
    this.ᐃᐃᐃ[9] = _v(60, 60, 0, ΔΔ[860], 3);
    this.ᐃᐃᐃ[9].id = 9;
    this.ᐃᐃᐃ[31] = _v(60, 60, 0, ΔΔ[458], 3);
    this.ᐃᐃᐃ[31].id = 31;
    this.ᐃᐃᐃ[32] = _v(60, 60, 0, ΔΔ[1017], Js);
    this.ᐃᐃᐃ[32].id = 32;
    this.ᐃᐃᐃ[33] = _v(60, 60, 0, ΔΔ[472], ea);
    this.ᐃᐃᐃ[33].id = 33;
    this.ᐃᐃᐃ[35] = _v(60, 60, 0, ΔΔ[477], 3);
    this.ᐃᐃᐃ[35].id = 35;
    this.ᐃᐃᐃ[36] = _v(60, 60, 0, ΔΔ[480], 3);
    this.ᐃᐃᐃ[36].id = 36;
    this.ᐃᐃᐃ[37] = _v(60, 60, 0, ΔΔ[483], 3);
    this.ᐃᐃᐃ[37].id = 37;
    this.ᐃᐃᐃ[38] = _v(60, 60, 0, ΔΔ[486], 3);
    this.ᐃᐃᐃ[38].id = 38;
    this.ᐃᐃᐃ[39] = _v(60, 60, 0, ΔΔ[489], 3);
    this.ᐃᐃᐃ[39].id = 39;
    this.ᐃᐃᐃ[122] = _v(60, 60, 0, ΔΔ[492], 3);
    this.ᐃᐃᐃ[122].id = 122;
    this.ᐃᐃᐃ[123] = _v(60, 60, 0, ΔΔ[495], 3);
    this.ᐃᐃᐃ[123].id = 123;
    this.ᐃᐃᐃ[124] = _v(60, 60, 0, ΔΔ[499], qo);
    this.ᐃᐃᐃ[124].id = 124;
    this.ᐃᐃᐃ[40] = _v(60, 60, 0, ΔΔ[502], sl);
    this.ᐃᐃᐃ[40].id = 40;
    this.ᐃᐃᐃ[146] = _v(60, 60, 0, ΔΔ[505], qu);
    this.ᐃᐃᐃ[146].id = 146;
    this.ᐃᐃᐃ[146].info.ⵠⵠ[2] = this.ᐃᐃᐃ[146].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[240] = _v(60, 60, 0, ΔΔ[1233], fn);
    this.ᐃᐃᐃ[240].id = 240;
    this.ᐃᐃᐃ[240].info.ⵠⵠ[2] = this.ᐃᐃᐃ[240].info.ⵠⵠ[Mg];
    this.ᐃᐃᐃ[147] = _v(60, 60, 0, ΔΔ[513], qu);
    this.ᐃᐃᐃ[147].id = 147;
    this.ᐃᐃᐃ[147].info.ⵠⵠ[2] = this.ᐃᐃᐃ[147].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[148] = _v(60, 60, 0, ΔΔ[518], 3);
    this.ᐃᐃᐃ[148].id = 148;
    this.ᐃᐃᐃ[148].info.ⵠⵠ[Rl] = this.ᐃᐃᐃ[148].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[149] = _v(60, 60, 0, ΔΔ[521], 3);
    this.ᐃᐃᐃ[149].id = 149;
    this.ᐃᐃᐃ[150] = _v(60, 60, 0, ΔΔ[523], qo);
    this.ᐃᐃᐃ[150].id = 150;
    this.ᐃᐃᐃ[151] = _v(60, 60, 0, ΔΔ[529], 3);
    this.ᐃᐃᐃ[151].id = 151;
    this.ᐃᐃᐃ[158] = _v(60, 60, 0, ΔΔ[532], 3);
    this.ᐃᐃᐃ[158].id = 158;
    this.ᐃᐃᐃ[159] = _v(60, 60, 0, ΔΔ[553], Js);
    this.ᐃᐃᐃ[159].id = 159;
    this.ᐃᐃᐃ[43] = _v(60, 60, 0, ΔΔ[541], nq);
    this.ᐃᐃᐃ[43].id = 43;
    this.ᐃᐃᐃ[45] = _v(60, 60, 0, ΔΔ[550], 3);
    this.ᐃᐃᐃ[45].id = 45;
    this.ᐃᐃᐃ[125] = _v(60, 60, 0, ΔΔ[605], 3);
    this.ᐃᐃᐃ[125].id = 125;
    this.ᐃᐃᐃ[221] = _v(60, 60, 0, ΔΔ[1236], 3);
    this.ᐃᐃᐃ[221].id = 221;
    this.ᐃᐃᐃ[223] = _v(60, 60, 0, ΔΔ[1028], Tr);
    this.ᐃᐃᐃ[223].id = 223;
    this.ᐃᐃᐃ[224] = _v(60, 60, 0, ΔΔ[1031], 3);
    this.ᐃᐃᐃ[224].id = 224;
    this.ᐃᐃᐃ[230] = _v(60, 60, 0, ΔΔ[1117], 3);
    this.ᐃᐃᐃ[230].id = 230;
    this.ᐃᐃᐃ[89] = _v(60, 60, 0, ΔΔ[1046], qu);
    this.ᐃᐃᐃ[89].id = 89;
    this.ᐃᐃᐃ[225] = _v(60, 60, 0, ΔΔ[1049], qo);
    this.ᐃᐃᐃ[225].id = 225;
    this.ᐃᐃᐃ[226] = _v(60, 60, 0, ΔΔ[1189], 3);
    this.ᐃᐃᐃ[226].id = 226;
    this.ᐃᐃᐃ[227] = _v(60, 60, 0, ΔΔ[1080], qo);
    this.ᐃᐃᐃ[227].id = 227;
    this.ᐃᐃᐃ[239] = _v(60, 60, 0, ΔΔ[1224], eg);
    this.ᐃᐃᐃ[239].id = 239;
    this.ᐃᐃᐃ[228] = _v(60, 60, 0, ΔΔ[1095], Wb);
    this.ᐃᐃᐃ[228].id = 228;
    this.ᐃᐃᐃ[229] = _v(60, 60, 0, ΔΔ[1110], eg);
    this.ᐃᐃᐃ[229].id = 229;
    this.ᐃᐃᐃ[126] = _v(60, 60, 0, ΔΔ[609], ea);
    this.ᐃᐃᐃ[126].id = 126;
    this.ᐃᐃᐃ[126].info.ⵠⵠ[2] = this.ᐃᐃᐃ[126].info.ⵠⵠ[Zj];
    this.ᐃᐃᐃ[127] = _v(60, 60, 0, ΔΔ[613], ub);
    this.ᐃᐃᐃ[127].id = 127;
    this.ᐃᐃᐃ[128] = _v(60, 60, 0, ΔΔ[612], Hk);
    this.ᐃᐃᐃ[128].id = 128;
    this.ᐃᐃᐃ[46] = _v(60, 60, 0, ΔΔ[616], 3);
    this.ᐃᐃᐃ[46].id = 46;
    this.ᐃᐃᐃ[50] = _v(60, 60, 0, ΔΔ[699], eg);
    this.ᐃᐃᐃ[50].id = 50;
    this.ᐃᐃᐃ[51] = _v(60, 60, 0, ΔΔ[702], Js);
    this.ᐃᐃᐃ[51].id = 51;
    this.ᐃᐃᐃ[52] = _v(60, 60, 0, ΔΔ[705], 3);
    this.ᐃᐃᐃ[52].id = 52;
    this.ᐃᐃᐃ[55] = _v(60, 60, 0, ΔΔ[709], 3);
    this.ᐃᐃᐃ[55].id = 55;
    this.ᐃᐃᐃ[129] = _v(60, 60, 0, ΔΔ[624], xb);
    this.ᐃᐃᐃ[129].id = 129;
    this.ᐃᐃᐃ[129].info.ⵠⵠ[2] = this.ᐃᐃᐃ[129].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[130] = _v(60, 60, 0, ΔΔ[626], Hk);
    this.ᐃᐃᐃ[130].id = 130;
    this.ᐃᐃᐃ[131] = _v(60, 60, 0, ΔΔ[629], ci);
    this.ᐃᐃᐃ[131].id = 131;
    this.ᐃᐃᐃ[131].info.ⵠⵠ[Pn] = this.ᐃᐃᐃ[131].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[132] = _v(60, 60, 0, ΔΔ[631], 3);
    this.ᐃᐃᐃ[132].id = 132;
    this.ᐃᐃᐃ[133] = _v(60, 60, 0, ΔΔ[634], 3);
    this.ᐃᐃᐃ[133].id = 133;
    this.ᐃᐃᐃ[134] = _v(60, 60, 0, ΔΔ[639], 3);
    this.ᐃᐃᐃ[134].id = 134;
    this.ᐃᐃᐃ[134].info.ⵠⵠ[Pn] = this.ᐃᐃᐃ[134].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[135] = _v(60, 60, 0, ΔΔ[644], qu);
    this.ᐃᐃᐃ[135].id = 135;
    this.ᐃᐃᐃ[47] = _v(60, 60, 0, ΔΔ[646], Wb);
    this.ᐃᐃᐃ[47].id = 47;
    this.ᐃᐃᐃ[48] = _v(60, 60, 0, ΔΔ[649], 3);
    this.ᐃᐃᐃ[48].id = 48;
    this.ᐃᐃᐃ[49] = _v(60, 60, 0, ΔΔ[652], Wb);
    this.ᐃᐃᐃ[49].id = 49;
    this.ᐃᐃᐃ[136] = _v(60, 60, 0, ΔΔ[659], 3);
    this.ᐃᐃᐃ[136].id = 136;
    this.ᐃᐃᐃ[143] = _v(60, 60, 0, ΔΔ[143], 3);
    this.ᐃᐃᐃ[143].id = 143;
    this.ᐃᐃᐃ[137] = _v(60, 60, 0, ΔΔ[662], 3);
    this.ᐃᐃᐃ[137].id = 137;
    this.ᐃᐃᐃ[138] = _v(60, 60, 0, ΔΔ[664], 3);
    this.ᐃᐃᐃ[138].id = 138;
    this.ᐃᐃᐃ[139] = _v(60, 60, 0, ΔΔ[674], 3);
    this.ᐃᐃᐃ[139].id = 139;
    this.ᐃᐃᐃ[139].info.ⵠⵠ[2] = this.ᐃᐃᐃ[139].info.ⵠⵠ[Rq];
    this.ᐃᐃᐃ[140] = _v(60, 60, 0, ΔΔ[140], 3);
    this.ᐃᐃᐃ[140].id = 140;
    this.ᐃᐃᐃ[140].info.ⵠⵠ[Vh] = this.ᐃᐃᐃ[140].info.ⵠⵠ[Ih];
    this.ᐃᐃᐃ[141] = _v(60, 60, 0, ΔΔ[685], 3);
    this.ᐃᐃᐃ[141].id = 141;
    this.ᐃᐃᐃ[142] = _v(60, 60, 0, ΔΔ[142], 3);
    this.ᐃᐃᐃ[142].id = 142;
    this.ᐃᐃᐃ[142].info.ⵠⵠ[2] = this.ᐃᐃᐃ[142].info.ⵠⵠ[eu];
    this.ᐃᐃᐃ[144] = _v(60, 60, 0, ΔΔ[717], I);
    this.ᐃᐃᐃ[144].id = 144;
    this.ᐃᐃᐃ[145] = _v(60, 60, 0, ΔΔ[145], 3);
    this.ᐃᐃᐃ[145].id = 145;
    this.ᐃᐃᐃ[59] = _v(60, 60, 0, ΔΔ[732], 3);
    this.ᐃᐃᐃ[59].id = 59;
    this.ᐃᐃᐃ[62] = _v(60, 60, 0, ΔΔ[563], ub);
    this.ᐃᐃᐃ[62].id = 62;
    this.ᐃᐃᐃ[185] = _v(60, 60, 0, ΔΔ[252], sl);
    this.ᐃᐃᐃ[185].id = 185;
    this.ᐃᐃᐃ[185].info.ⵠⵠ[Vg] = this.ᐃᐃᐃ[185].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[184] = _v(60, 60, 0, ΔΔ[751], 3);
    this.ᐃᐃᐃ[184].id = 184;
    this.ᐃᐃᐃ[184].info.ⵠⵠ[2] = this.ᐃᐃᐃ[184].info.ⵠⵠ[wg];
    this.ᐃᐃᐃ[17] = _v(60, 60, 0, ΔΔ[877], 3);
    this.ᐃᐃᐃ[17].id = 17;
    this.ᐃᐃᐃ[63] = _v(60, 60, 0, ΔΔ[566], Hk);
    this.ᐃᐃᐃ[63].id = 63;
    this.ᐃᐃᐃ[187] = _v(60, 60, 0, ΔΔ[253], yr);
    this.ᐃᐃᐃ[187].id = 187;
    this.ᐃᐃᐃ[187].info.ⵠⵠ[vg] = this.ᐃᐃᐃ[187].info.ⵠⵠ[Qs];
    this.ᐃᐃᐃ[186] = _v(60, 60, 0, ΔΔ[753], 3);
    this.ᐃᐃᐃ[186].id = 186;
    this.ᐃᐃᐃ[186].info.ⵠⵠ[2] = this.ᐃᐃᐃ[186].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[77] = _v(60, 60, 0, ΔΔ[756], yr);
    this.ᐃᐃᐃ[77].id = 77;
    this.ᐃᐃᐃ[175] = _v(60, 60, 0, ΔΔ[176], 3);
    this.ᐃᐃᐃ[175].id = 175;
    this.ᐃᐃᐃ[175].info.ⵠⵠ[Hj] = this.ᐃᐃᐃ[175].info.ⵠⵠ[wg];
    this.ᐃᐃᐃ[176] = _v(60, 60, 0, ΔΔ[177], Tr);
    this.ᐃᐃᐃ[176].id = 176;
    this.ᐃᐃᐃ[176].info.ⵠⵠ[2] = this.ᐃᐃᐃ[176].info.ⵠⵠ[st];
    this.ᐃᐃᐃ[78] = _v(60, 60, 0, ΔΔ[760], 3);
    this.ᐃᐃᐃ[78].id = 78;
    this.ᐃᐃᐃ[177] = _v(60, 60, 0, ΔΔ[175], fn);
    this.ᐃᐃᐃ[177].id = 177;
    this.ᐃᐃᐃ[177].info.ⵠⵠ[eh] = this.ᐃᐃᐃ[177].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[79] = _v(60, 60, 0, ΔΔ[764], Wb);
    this.ᐃᐃᐃ[79].id = 79;
    this.ᐃᐃᐃ[83] = _v(60, 60, 0, ΔΔ[767], 3);
    this.ᐃᐃᐃ[83].id = 83;
    this.ᐃᐃᐃ[84] = _v(60, 60, 0, ΔΔ[771], 3);
    this.ᐃᐃᐃ[84].id = 84;
    this.ᐃᐃᐃ[178] = _v(60, 60, 0, ΔΔ[178], 3);
    this.ᐃᐃᐃ[178].id = 178;
    this.ᐃᐃᐃ[179] = _v(60, 60, 0, ΔΔ[179], Tr);
    this.ᐃᐃᐃ[179].id = 179;
    this.ᐃᐃᐃ[86] = _v(60, 60, 0, ΔΔ[776], qo);
    this.ᐃᐃᐃ[86].id = 86;
    this.ᐃᐃᐃ[85] = _v(60, 60, 0, ΔΔ[779], I);
    this.ᐃᐃᐃ[85].id = 85;
    this.ᐃᐃᐃ[180] = _v(60, 60, 0, ΔΔ[180], nq);
    this.ᐃᐃᐃ[180].id = 180;
    this.ᐃᐃᐃ[181] = _v(60, 60, 0, ΔΔ[181], 3);
    this.ᐃᐃᐃ[181].id = 181;
    this.ᐃᐃᐃ[182] = _v(60, 60, 0, ΔΔ[789], Tr);
    this.ᐃᐃᐃ[182].id = 182;
    this.ᐃᐃᐃ[183] = _v(60, 60, 0, ΔΔ[800], ea);
    this.ᐃᐃᐃ[183].id = 183;
    this.ᐃᐃᐃ[188] = _v(60, 60, 0, ΔΔ[808], 3);
    this.ᐃᐃᐃ[188].id = 188;
    this.ᐃᐃᐃ[189] = _v(60, 60, 0, ΔΔ[814], ci);
    this.ᐃᐃᐃ[189].id = 189;
    this.ᐃᐃᐃ[191] = _v(60, 60, 0, ΔΔ[834], Js);
    this.ᐃᐃᐃ[191].id = 191;
    this.ᐃᐃᐃ[192] = _v(60, 60, 0, ΔΔ[840], I);
    this.ᐃᐃᐃ[192].id = 192;
    this.ᐃᐃᐃ[190] = _v(60, 60, 0, ΔΔ[842], 3);
    this.ᐃᐃᐃ[190].id = 190;
    this.ᐃᐃᐃ[193] = _v(60, 60, 0, ΔΔ[845], ub);
    this.ᐃᐃᐃ[193].id = 193;
    this.ᐃᐃᐃ[194] = _v(60, 60, 0, ΔΔ[850], ea);
    this.ᐃᐃᐃ[194].id = 194;
    this.ᐃᐃᐃ[204] = _v(60, 60, 0, ΔΔ[949], Tr);
    this.ᐃᐃᐃ[204].id = 204;
    this.ᐃᐃᐃ[205] = _v(60, 60, 0, ΔΔ[955], 3);
    this.ᐃᐃᐃ[205].id = 205;
    this.ᐃᐃᐃ[206] = _v(60, 60, 0, ΔΔ[959], 3);
    this.ᐃᐃᐃ[206].id = 206;
    this.ᐃᐃᐃ[207] = _v(60, 60, 0, ΔΔ[965], 3);
    this.ᐃᐃᐃ[207].id = 207;
    this.ᐃᐃᐃ[208] = _v(60, 60, 0, ΔΔ[966], ll);
    this.ᐃᐃᐃ[208].id = 208;
    this.ᐃᐃᐃ[209] = _v(60, 60, 0, ΔΔ[972], fn);
    this.ᐃᐃᐃ[209].id = 209;
    this.ᐃᐃᐃ[210] = _v(60, 60, 0, ΔΔ[981], 3);
    this.ᐃᐃᐃ[210].id = 210;
    this.ᐃᐃᐃ[211] = _v(60, 60, 0, ΔΔ[987], 3);
    this.ᐃᐃᐃ[211].id = 211;
    this.ᐃᐃᐃ[41] = _v(60, 60, 0, ΔΔ[880], sl);
    this.ᐃᐃᐃ[41].id = 41;
    this.ᐃᐃᐃ[42] = _v(60, 60, 0, ΔΔ[882], 3);
    this.ᐃᐃᐃ[42].id = 42;
    this.ᐃᐃᐃ[12] = _v(60, 60, 0, ΔΔ[401], 3);
    this.ᐃᐃᐃ[12].id = 12;
    this.ᐃᐃᐃ[16] = _v(60, 60, 0, ΔΔ[874], 3);
    this.ᐃᐃᐃ[16].id = 16;
    this.ᐃᐃᐃ[196] = _v(60, 60, 0, ΔΔ[196], 3);
    this.ᐃᐃᐃ[196].id = 196;
    this.ᐃᐃᐃ[18] = _v(60, 60, 0, ΔΔ[901], 3);
    this.ᐃᐃᐃ[18].id = 18;
    this.ᐃᐃᐃ[197] = _v(60, 60, 0, ΔΔ[197], 3);
    this.ᐃᐃᐃ[197].id = 197;
    this.ᐃᐃᐃ[198] = _v(60, 60, 0, ΔΔ[907], nq);
    this.ᐃᐃᐃ[198].id = 198;
    this.ᐃᐃᐃ[61] = _v(60, 60, 0, ΔΔ[910], 3);
    this.ᐃᐃᐃ[61].id = 61;
    this.ᐃᐃᐃ[201] = _v(60, 60, 0, ΔΔ[870], 3);
    this.ᐃᐃᐃ[201].id = 201;
    this.ᐃᐃᐃ[200] = _v(60, 60, 0, ΔΔ[200], xb);
    this.ᐃᐃᐃ[200].id = 200;
    this.ᐃᐃᐃ[199] = _v(60, 60, 0, ΔΔ[865], 3);
    this.ᐃᐃᐃ[199].id = 199;
    this.ⵠⵠᐃ = [];
    this.ⵠⵠᐃ[35] = _v(60, 60, 0, ΔΔ[254], qu);
    this.ⵠⵠᐃ[35].id = 35;
    this.ⵠⵠᐃ[5] = _v(60, 60, 0, ΔΔ[256], Wb);
    this.ⵠⵠᐃ[5].id = 5;
    this.ⵠⵠᐃ[0] = _v(60, 60, 0, ΔΔ[302], 3);
    this.ⵠⵠᐃ[0].id = 0;
    this.ⵠⵠᐃ[3] = _v(60, 60, 0, ΔΔ[262], ea);
    this.ⵠⵠᐃ[3].id = 3;
    this.ⵠⵠᐃ[55] = _v(60, 60, 0, ΔΔ[318], sl);
    this.ⵠⵠᐃ[55].id = 55;
    this.ⵠⵠᐃ[67] = _v(60, 60, 0, ΔΔ[320], sl);
    this.ⵠⵠᐃ[67].id = 67;
    this.ⵠⵠᐃ[40] = _v(60, 60, 0, ΔΔ[284], 3);
    this.ⵠⵠᐃ[40].id = 40;
    this.ⵠⵠᐃ[6] = _v(60, 60, 0, ΔΔ[295], 3);
    this.ⵠⵠᐃ[6].id = 6;
    this.ⵠⵠᐃ[7] = _v(60, 60, 0, ΔΔ[257], 3);
    this.ⵠⵠᐃ[7].id = 7;
    this.ⵠⵠᐃ[36] = _v(60, 60, 0, ΔΔ[290], ci);
    this.ⵠⵠᐃ[36].id = 36;
    this.ⵠⵠᐃ[34] = _v(60, 60, 0, ΔΔ[830], 3);
    this.ⵠⵠᐃ[34].id = 34;
    this.ⵠⵠᐃ[37] = _v(60, 60, 0, ΔΔ[291], Wb);
    this.ⵠⵠᐃ[37].id = 37;
    this.ⵠⵠᐃ[4] = _v(60, 60, 0, ΔΔ[314], 3);
    this.ⵠⵠᐃ[4].id = 4;
    this.ⵠⵠᐃ[49] = _v(60, 60, 0, ΔΔ[325], 3);
    this.ⵠⵠᐃ[49].id = 49;
    this.ⵠⵠᐃ[1] = _v(60, 60, 0, ΔΔ[327], ut);
    this.ⵠⵠᐃ[1].id = 1;
    this.ⵠⵠᐃ[54] = _v(60, 60, 0, ΔΔ[304], 3);
    this.ⵠⵠᐃ[54].id = 54;
    this.ⵠⵠᐃ[56] = _v(60, 60, 0, ΔΔ[263], Js);
    this.ⵠⵠᐃ[56].id = 56;
    this.ⵠⵠᐃ[57] = _v(60, 60, 0, ΔΔ[265], 3);
    this.ⵠⵠᐃ[57].id = 57;
    this.ⵠⵠᐃ[58] = _v(60, 60, 0, ΔΔ[332], I);
    this.ⵠⵠᐃ[58].id = 58;
    this.ⵠⵠᐃ[61] = _v(60, 60, 0, ΔΔ[268], 3);
    this.ⵠⵠᐃ[61].id = 61;
    this.ⵠⵠᐃ[79] = _v(60, 60, 0, ΔΔ[338], nq);
    this.ⵠⵠᐃ[79].id = 79;
    this.ⵠⵠᐃ[68] = _v(60, 60, 0, ΔΔ[360], nq);
    this.ⵠⵠᐃ[68].id = 68;
    this.ⵠⵠᐃ[69] = _v(60, 60, 0, ΔΔ[363], ll);
    this.ⵠⵠᐃ[69].id = 69;
    this.ⵠⵠᐃ[70] = _v(60, 60, 0, ΔΔ[365], eg);
    this.ⵠⵠᐃ[70].id = 70;
    this.ⵠⵠᐃ[100] = _v(60, 60, 0, ΔΔ[367], 3);
    this.ⵠⵠᐃ[100].id = 100;
    this.ⵠⵠᐃ[83] = _v(60, 60, 0, ΔΔ[370], 3);
    this.ⵠⵠᐃ[83].id = 83;
    this.ⵠⵠᐃ[62] = _v(60, 60, 0, ΔΔ[371], 3);
    this.ⵠⵠᐃ[62].id = 62;
    this.ⵠⵠᐃ[63] = _v(60, 60, 0, ΔΔ[374], Tt);
    this.ⵠⵠᐃ[63].id = 63;
    this.ⵠⵠᐃ[64] = _v(60, 60, 0, ΔΔ[377], 3);
    this.ⵠⵠᐃ[64].id = 64;
    this.ⵠⵠᐃ[83] = _v(60, 60, 0, ΔΔ[370], Lg);
    this.ⵠⵠᐃ[83].id = 83;
    this.ⵠⵠᐃ[84] = _v(60, 60, 0, ΔΔ[380], 3);
    this.ⵠⵠᐃ[84].id = 84;
    this.ⵠⵠᐃ[25] = _v(60, 60, 0, ΔΔ[402], 3);
    this.ⵠⵠᐃ[25].id = 25;
    this.ⵠⵠᐃ[26] = _v(60, 60, 0, ΔΔ[396], 3);
    this.ⵠⵠᐃ[26].id = 26;
    this.ⵠⵠᐃ[27] = _v(60, 60, 0, ΔΔ[399], Tt);
    this.ⵠⵠᐃ[27].id = 27;
    this.ⵠⵠᐃ[28] = _v(60, 60, 0, ΔΔ[405], ut);
    this.ⵠⵠᐃ[28].id = 28;
    this.ⵠⵠᐃ[31] = _v(60, 60, 0, ΔΔ[876], 3);
    this.ⵠⵠᐃ[31].id = 31;
    this.ⵠⵠᐃ[2] = _v(60, 60, 0, ΔΔ[409], nq);
    this.ⵠⵠᐃ[2].id = 2;
    this.ⵠⵠᐃ[80] = _v(60, 60, 0, ΔΔ[421], qu);
    this.ⵠⵠᐃ[80].id = 80;
    this.ⵠⵠᐃ[81] = _v(60, 60, 0, ΔΔ[424], Js);
    this.ⵠⵠᐃ[81].id = 81;
    this.ⵠⵠᐃ[$r.ⲆⵠΔᐃⲆ] = _v(60, 60, 0, ΔΔ[1228], 3);
    this.ⵠⵠᐃ[$r.ⲆⵠΔᐃⲆ].id = $r.ⲆⵠΔᐃⲆ;
    this.ⵠⵠᐃ[86] = _v(60, 60, 0, ΔΔ[1231], Wb);
    this.ⵠⵠᐃ[86].id = 86;
    this.ⵠⵠᐃ[98] = _v(60, 60, 0, ΔΔ[1138], ea);
    this.ⵠⵠᐃ[98].id = 98;
    this.ⵠⵠᐃ[99] = _v(60, 60, 0, ΔΔ[1141], 3);
    this.ⵠⵠᐃ[99].id = 99;
    this.ⵠⵠᐃ[131] = _v(60, 60, 0, ΔΔ[570], qo);
    this.ⵠⵠᐃ[131].id = 131;
    this.ⵠⵠᐃ[132] = _v(60, 60, 0, ΔΔ[1168], nq);
    this.ⵠⵠᐃ[132].id = 132;
    this.ⵠⵠᐃ[145] = _v(60, 60, 0, ΔΔ[1238], xb);
    this.ⵠⵠᐃ[145].id = 145;
    this.ⵠⵠᐃ[133] = _v(60, 60, 0, ΔΔ[573], ci);
    this.ⵠⵠᐃ[133].id = 133;
    this.ⵠⵠᐃ[134] = _v(60, 60, 0, ΔΔ[1171], Wb);
    this.ⵠⵠᐃ[134].id = 134;
    this.ⵠⵠᐃ[146] = _v(60, 60, 0, ΔΔ[1241], 3);
    this.ⵠⵠᐃ[146].id = 146;
    this.ⵠⵠᐃ[135] = _v(60, 60, 0, ΔΔ[576], 3);
    this.ⵠⵠᐃ[135].id = 135;
    this.ⵠⵠᐃ[136] = _v(60, 60, 0, ΔΔ[1174], fn);
    this.ⵠⵠᐃ[136].id = 136;
    this.ⵠⵠᐃ[147] = _v(60, 60, 0, ΔΔ[1244], ll);
    this.ⵠⵠᐃ[147].id = 147;
    this.ⵠⵠᐃ[137] = _v(60, 60, 0, ΔΔ[579], ub);
    this.ⵠⵠᐃ[137].id = 137;
    this.ⵠⵠᐃ[138] = _v(60, 60, 0, ΔΔ[1177], 3);
    this.ⵠⵠᐃ[138].id = 138;
    this.ⵠⵠᐃ[167] = _v(60, 60, 0, ΔΔ[1256], ci);
    this.ⵠⵠᐃ[167].id = 167;
    this.ⵠⵠᐃ[168] = _v(60, 60, 0, ΔΔ[1259], 3);
    this.ⵠⵠᐃ[168].id = 168;
    this.ⵠⵠᐃ[169] = _v(60, 60, 0, ΔΔ[1262], Tt);
    this.ⵠⵠᐃ[169].id = 169;
    this.ⵠⵠᐃ[170] = _v(60, 60, 0, ΔΔ[1265], 3);
    this.ⵠⵠᐃ[170].id = 170;
    this.ⵠⵠᐃ[171] = _v(60, 60, 0, ΔΔ[1268], 3);
    this.ⵠⵠᐃ[171].id = 171;
    this.ⵠⵠᐃ[172] = _v(60, 60, 0, ΔΔ[1271], 3);
    this.ⵠⵠᐃ[172].id = 172;
    this.ⵠⵠᐃ[148] = _v(60, 60, 0, ΔΔ[1247], Lg);
    this.ⵠⵠᐃ[148].id = 148;
    this.ⵠⵠᐃ[139] = _v(60, 60, 0, ΔΔ[582], 3);
    this.ⵠⵠᐃ[139].id = 139;
    this.ⵠⵠᐃ[140] = _v(60, 60, 0, ΔΔ[1180], ci);
    this.ⵠⵠᐃ[140].id = 140;
    this.ⵠⵠᐃ[149] = _v(60, 60, 0, ΔΔ[1250], fn);
    this.ⵠⵠᐃ[149].id = 149;
    this.ⵠⵠᐃ[141] = _v(60, 60, 0, ΔΔ[585], sl);
    this.ⵠⵠᐃ[141].id = 141;
    this.ⵠⵠᐃ[142] = _v(60, 60, 0, ΔΔ[1183], 3);
    this.ⵠⵠᐃ[142].id = 142;
    this.ⵠⵠᐃ[150] = _v(60, 60, 0, ΔΔ[1253], 3);
    this.ⵠⵠᐃ[150].id = 150;
    this.ⵠⵠᐃ[143] = _v(60, 60, 0, ΔΔ[588], xb);
    this.ⵠⵠᐃ[143].id = 143;
    this.ⵠⵠᐃ[144] = _v(60, 60, 0, ΔΔ[1186], sl);
    this.ⵠⵠᐃ[144].id = 144;
    this.ⵠⵠᐃ[87] = _v(60, 60, 0, ΔΔ[827], 3);
    this.ⵠⵠᐃ[87].id = 87;
    this.ⵠⵠᐃ[88] = _v(60, 60, 0, ΔΔ[430], Hk);
    this.ⵠⵠᐃ[88].id = 88;
    this.ⵠⵠᐃ[89] = _v(60, 60, 0, ΔΔ[433], 3);
    this.ⵠⵠᐃ[89].id = 89;
    this.ⵠⵠᐃ[90] = _v(60, 60, 0, ΔΔ[436], nq);
    this.ⵠⵠᐃ[90].id = 90;
    this.ⵠⵠᐃ[24] = _v(60, 60, 0, ΔΔ[439], ll);
    this.ⵠⵠᐃ[24].id = 24;
    this.ⵠⵠᐃ[101] = _v(60, 60, 0, ΔΔ[442], 3);
    this.ⵠⵠᐃ[101].id = 101;
    this.ⵠⵠᐃ[100] = _v(60, 60, 0, ΔΔ[367], nq);
    this.ⵠⵠᐃ[100].id = 100;
    this.ⵠⵠᐃ[38] = _v(60, 60, 0, ΔΔ[456], 3);
    this.ⵠⵠᐃ[38].id = 38;
    this.ⵠⵠᐃ[$r.ⵠΔᐃᐃⵠ] = _v(60, 60, 0, ΔΔ[861], 3);
    this.ⵠⵠᐃ[$r.ⵠΔᐃᐃⵠ].id = $r.ⵠΔᐃᐃⵠ;
    this.ⵠⵠᐃ[8] = _v(60, 60, 0, ΔΔ[460], eg);
    this.ⵠⵠᐃ[8].id = 8;
    this.ⵠⵠᐃ[9] = _v(60, 60, 0, ΔΔ[1019], 3);
    this.ⵠⵠᐃ[9].id = 9;
    this.ⵠⵠᐃ[29] = _v(60, 60, 0, ΔΔ[473], 3);
    this.ⵠⵠᐃ[29].id = 29;
    this.ⵠⵠᐃ[10] = _v(60, 60, 0, ΔΔ[478], yr);
    this.ⵠⵠᐃ[10].id = 10;
    this.ⵠⵠᐃ[11] = _v(60, 60, 0, ΔΔ[481], yr);
    this.ⵠⵠᐃ[11].id = 11;
    this.ⵠⵠᐃ[12] = _v(60, 60, 0, ΔΔ[484], 3);
    this.ⵠⵠᐃ[12].id = 12;
    this.ⵠⵠᐃ[13] = _v(60, 60, 0, ΔΔ[487], Lg);
    this.ⵠⵠᐃ[13].id = 13;
    this.ⵠⵠᐃ[14] = _v(60, 60, 0, ΔΔ[490], 3);
    this.ⵠⵠᐃ[14].id = 14;
    this.ⵠⵠᐃ[59] = _v(60, 60, 0, ΔΔ[493], qo);
    this.ⵠⵠᐃ[59].id = 59;
    this.ⵠⵠᐃ[71] = _v(60, 60, 0, ΔΔ[496], I);
    this.ⵠⵠᐃ[71].id = 71;
    this.ⵠⵠᐃ[65] = _v(60, 60, 0, ΔΔ[498], 3);
    this.ⵠⵠᐃ[65].id = 65;
    this.ⵠⵠᐃ[85] = _v(60, 60, 0, ΔΔ[503], qu);
    this.ⵠⵠᐃ[85].id = 85;
    this.ⵠⵠᐃ[102] = _v(60, 60, 0, ΔΔ[515], 3);
    this.ⵠⵠᐃ[102].id = 102;
    this.ⵠⵠᐃ[103] = _v(60, 60, 0, ΔΔ[519], 3);
    this.ⵠⵠᐃ[103].id = 103;
    this.ⵠⵠᐃ[115] = _v(60, 60, 0, ΔΔ[530], 3);
    this.ⵠⵠᐃ[115].id = 115;
    this.ⵠⵠᐃ[104] = _v(60, 60, 0, ΔΔ[533], ll);
    this.ⵠⵠᐃ[104].id = 104;
    this.ⵠⵠᐃ[105] = _v(60, 60, 0, ΔΔ[555], 3);
    this.ⵠⵠᐃ[105].id = 105;
    this.ⵠⵠᐃ[91] = _v(60, 60, 0, ΔΔ[542], ub);
    this.ⵠⵠᐃ[91].id = 91;
    this.ⵠⵠᐃ[15] = _v(60, 60, 0, ΔΔ[551], sl);
    this.ⵠⵠᐃ[15].id = 15;
    this.ⵠⵠᐃ[106] = _v(60, 60, 0, ΔΔ[604], ci);
    this.ⵠⵠᐃ[106].id = 106;
    this.ⵠⵠᐃ[108] = _v(60, 60, 0, ΔΔ[1235], Tt);
    this.ⵠⵠᐃ[108].id = 108;
    this.ⵠⵠᐃ[163] = _v(60, 60, 0, ΔΔ[1027], 3);
    this.ⵠⵠᐃ[163].id = 163;
    this.ⵠⵠᐃ[164] = _v(60, 60, 0, ΔΔ[1030], Tt);
    this.ⵠⵠᐃ[164].id = 164;
    this.ⵠⵠᐃ[166] = _v(60, 60, 0, ΔΔ[1116], 3);
    this.ⵠⵠᐃ[166].id = 166;
    this.ⵠⵠᐃ[165] = _v(60, 60, 0, ΔΔ[1048], qo);
    this.ⵠⵠᐃ[165].id = 165;
    this.ⵠⵠᐃ[$r.ⵠⲆᐃⲆΔ] = _v(60, 60, 0, ΔΔ[1051], Wb);
    this.ⵠⵠᐃ[$r.ⵠⲆᐃⲆΔ].id = $r.ⵠⲆᐃⲆΔ;
    this.ⵠⵠᐃ[$r.ⲆⵠΔᐃⵠ] = _v(60, 60, 0, ΔΔ[1082], 3);
    this.ⵠⵠᐃ[$r.ⲆⵠΔᐃⵠ].id = $r.ⲆⵠΔᐃⵠ;
    this.ⵠⵠᐃ[$r.ΔΔⵠⲆⲆ] = _v(60, 60, 0, ΔΔ[1226], I);
    this.ⵠⵠᐃ[$r.ΔΔⵠⲆⲆ].id = $r.ΔΔⵠⲆⲆ;
    this.ⵠⵠᐃ[$r.ᐃⵠⵠᐃⵠ] = _v(60, 60, 0, ΔΔ[1191], xb);
    this.ⵠⵠᐃ[$r.ᐃⵠⵠᐃⵠ].id = $r.ᐃⵠⵠᐃⵠ;
    this.ⵠⵠᐃ[110] = _v(60, 60, 0, ΔΔ[611], 3);
    this.ⵠⵠᐃ[110].id = 110;
    this.ⵠⵠᐃ[111] = _v(60, 60, 0, ΔΔ[715], 3);
    this.ⵠⵠᐃ[111].id = 111;
    this.ⵠⵠᐃ[112] = _v(60, 60, 0, ΔΔ[715], 3);
    this.ⵠⵠᐃ[112].id = 112;
    this.ⵠⵠᐃ[113] = _v(60, 60, 0, ΔΔ[715], eg);
    this.ⵠⵠᐃ[113].id = 113;
    this.ⵠⵠᐃ[16] = _v(60, 60, 0, ΔΔ[618], Hk);
    this.ⵠⵠᐃ[16].id = 16;
    this.ⵠⵠᐃ[17] = _v(60, 60, 0, ΔΔ[700], 3);
    this.ⵠⵠᐃ[17].id = 17;
    this.ⵠⵠᐃ[18] = _v(60, 60, 0, ΔΔ[704], nq);
    this.ⵠⵠᐃ[18].id = 18;
    this.ⵠⵠᐃ[19] = _v(60, 60, 0, ΔΔ[706], 3);
    this.ⵠⵠᐃ[19].id = 19;
    this.ⵠⵠᐃ[122] = _v(60, 60, 0, ΔΔ[711], qo);
    this.ⵠⵠᐃ[122].id = 122;
    this.ⵠⵠᐃ[20] = _v(60, 60, 0, ΔΔ[627], ut);
    this.ⵠⵠᐃ[20].id = 20;
    this.ⵠⵠᐃ[41] = _v(60, 60, 0, ΔΔ[632], 3);
    this.ⵠⵠᐃ[41].id = 41;
    this.ⵠⵠᐃ[52] = _v(60, 60, 0, ΔΔ[635], 3);
    this.ⵠⵠᐃ[52].id = 52;
    this.ⵠⵠᐃ[114] = _v(60, 60, 0, ΔΔ[643], ci);
    this.ⵠⵠᐃ[114].id = 114;
    this.ⵠⵠᐃ[94] = _v(60, 60, 0, ΔΔ[647], ub);
    this.ⵠⵠᐃ[94].id = 94;
    this.ⵠⵠᐃ[93] = _v(60, 60, 0, ΔΔ[650], 3);
    this.ⵠⵠᐃ[93].id = 93;
    this.ⵠⵠᐃ[21] = _v(60, 60, 0, ΔΔ[654], 3);
    this.ⵠⵠᐃ[21].id = 21;
    this.ⵠⵠᐃ[53] = _v(60, 60, 0, ΔΔ[660], 3);
    this.ⵠⵠᐃ[53].id = 53;
    this.ⵠⵠᐃ[51] = _v(60, 60, 0, ΔΔ[690], Tt);
    this.ⵠⵠᐃ[51].id = 51;
    this.ⵠⵠᐃ[50] = _v(60, 60, 0, ΔΔ[666], yr);
    this.ⵠⵠᐃ[50].id = 50;
    this.ⵠⵠᐃ[109] = _v(60, 60, 0, ΔΔ[684], 3);
    this.ⵠⵠᐃ[109].id = 109;
    this.ⵠⵠᐃ[124] = _v(60, 60, 0, ΔΔ[718], qu);
    this.ⵠⵠᐃ[124].id = 124;
    this.ⵠⵠᐃ[125] = _v(60, 60, 0, ΔΔ[730], xb);
    this.ⵠⵠᐃ[125].id = 125;
    this.ⵠⵠᐃ[126] = _v(60, 60, 0, ΔΔ[734], 3);
    this.ⵠⵠᐃ[126].id = 126;
    this.ⵠⵠᐃ[129] = _v(60, 60, 0, ΔΔ[563], 3);
    this.ⵠⵠᐃ[129].id = 129;
    this.ⵠⵠᐃ[151] = _v(60, 60, 0, ΔΔ[758], sl);
    this.ⵠⵠᐃ[151].id = 151;
    this.ⵠⵠᐃ[152] = _v(60, 60, 0, ΔΔ[762], 3);
    this.ⵠⵠᐃ[152].id = 152;
    this.ⵠⵠᐃ[153] = _v(60, 60, 0, ΔΔ[770], ci);
    this.ⵠⵠᐃ[153].id = 153;
    this.ⵠⵠᐃ[154] = _v(60, 60, 0, ΔΔ[768], ea);
    this.ⵠⵠᐃ[154].id = 154;
    this.ⵠⵠᐃ[155] = _v(60, 60, 0, ΔΔ[772], Js);
    this.ⵠⵠᐃ[155].id = 155;
    this.ⵠⵠᐃ[157] = _v(60, 60, 0, ΔΔ[777], eg);
    this.ⵠⵠᐃ[157].id = 157;
    this.ⵠⵠᐃ[156] = _v(60, 60, 0, ΔΔ[780], Tt);
    this.ⵠⵠᐃ[156].id = 156;
    this.ⵠⵠᐃ[158] = _v(60, 60, 0, ΔΔ[784], Wb);
    this.ⵠⵠᐃ[158].id = 158;
    this.ⵠⵠᐃ[159] = _v(60, 60, 0, ΔΔ[785], ub);
    this.ⵠⵠᐃ[159].id = 159;
    this.ⵠⵠᐃ[160] = _v(60, 60, 0, ΔΔ[791], I);
    this.ⵠⵠᐃ[160].id = 160;
    this.ⵠⵠᐃ[161] = _v(60, 60, 0, ΔΔ[799], 3);
    this.ⵠⵠᐃ[161].id = 161;
    this.ⵠⵠᐃ[42] = _v(60, 60, 0, ΔΔ[809], 3);
    this.ⵠⵠᐃ[42].id = 42;
    this.ⵠⵠᐃ[43] = _v(60, 60, 0, ΔΔ[835], 3);
    this.ⵠⵠᐃ[43].id = 43;
    this.ⵠⵠᐃ[107] = _v(60, 60, 0, ΔΔ[843], ea);
    this.ⵠⵠᐃ[107].id = 107;
    this.ⵠⵠᐃ[44] = _v(60, 60, 0, ΔΔ[846], 3);
    this.ⵠⵠᐃ[44].id = 44;
    this.ⵠⵠᐃ[46] = _v(60, 60, 0, ΔΔ[960], ea);
    this.ⵠⵠᐃ[46].id = 46;
    this.ⵠⵠᐃ[45] = _v(60, 60, 0, ΔΔ[950], qo);
    this.ⵠⵠᐃ[45].id = 45;
    this.ⵠⵠᐃ[47] = _v(60, 60, 0, ΔΔ[967], Lg);
    this.ⵠⵠᐃ[47].id = 47;
    this.ⵠⵠᐃ[48] = _v(60, 60, 0, ΔΔ[982], 3);
    this.ⵠⵠᐃ[48].id = 48;
    this.ⵠⵠᐃ[25] = _v(60, 60, 0, ΔΔ[402], 3);
    this.ⵠⵠᐃ[25].id = 25;
    this.ⵠⵠᐃ[31] = _v(60, 60, 0, ΔΔ[876], fn);
    this.ⵠⵠᐃ[31].id = 31;
    this.ⵠⵠᐃ[33] = _v(60, 60, 0, ΔΔ[900], Wb);
    this.ⵠⵠᐃ[33].id = 33;
    this.ⵠⵠᐃ[162] = _v(60, 60, 0, ΔΔ[909], ub);
    this.ⵠⵠᐃ[162].id = 162;
    this.ⵠⵠᐃ[128] = _v(60, 60, 0, ΔΔ[912], fn);
    this.ⵠⵠᐃ[128].id = 128;
    this.ⲆⵠΔ[53] = _v(68, 68, 0, ΔΔ[976], 3);
    this.ⲆⵠΔ[53].id = 53;
    this.ᐃᐃᐃ[53] = _v(60, 60, 0, ΔΔ[975], 3);
    this.ᐃᐃᐃ[53].id = 53;
    this.ⵠⵠᐃ[22] = _v(60, 60, 0, ΔΔ[977], nq);
    this.ⵠⵠᐃ[22].id = 22;
    this.ⲆⵠΔ[54] = _v(68, 68, 0, ΔΔ[979], 3);
    this.ⲆⵠΔ[54].id = 54;
    this.ᐃᐃᐃ[54] = _v(60, 60, 0, ΔΔ[978], 3);
    this.ᐃᐃᐃ[54].id = 54;
    this.ⵠⵠᐃ[23] = _v(60, 60, 0, ΔΔ[980], ll);
    this.ⵠⵠᐃ[23].id = 23;
    this.ⲆⵠΔ[56] = _v(68, 68, 0, ΔΔ[713], 3);
    this.ⲆⵠΔ[56].id = 56;
    this.ᐃᐃᐃ[56] = _v(60, 60, 0, ΔΔ[712], Js);
    this.ᐃᐃᐃ[56].id = 56;
    this.ⵠⵠᐃ[123] = _v(60, 60, 0, ΔΔ[714], ll);
    this.ⵠⵠᐃ[123].id = 123;
    this.ⲆⵠΔ[82] = _v(68, 68, 0, ΔΔ[428], ub);
    this.ⲆⵠΔ[82].id = 82;
    this.ᐃᐃᐃ[82] = _v(60, 60, 0, ΔΔ[426], 3);
    this.ᐃᐃᐃ[82].id = 82;
    this.ⵠⵠᐃ[82] = _v(60, 60, 0, ΔΔ[427], 3);
    this.ⵠⵠᐃ[82].id = 82;
    this.ⲆⵠΔ[235] = _v(68, 68, 0, ΔΔ[1159], 3);
    this.ⲆⵠΔ[235].id = 235;
    this.ᐃᐃᐃ[235] = _v(60, 60, 0, ΔΔ[1158], I);
    this.ᐃᐃᐃ[235].id = 235;
    this.ⲆⵠΔ[238] = _v(68, 68, 0, ΔΔ[1188], Lg);
    this.ⲆⵠΔ[238].id = 238;
    this.ᐃᐃᐃ[238] = _v(60, 60, 0, ΔΔ[1187], eg);
    this.ᐃᐃᐃ[238].id = 238;
    this.ⲆⵠΔ[236] = _v(68, 68, 0, ΔΔ[1161], xb);
    this.ⲆⵠΔ[236].id = 236;
    this.ᐃᐃᐃ[236] = _v(60, 60, 0, ΔΔ[1160], nq);
    this.ᐃᐃᐃ[236].id = 236;
    this.ⲆⵠΔ[152] = _v(68, 68, 0, ΔΔ[1197], qo);
    this.ⲆⵠΔ[152].id = 152;
    this.ᐃᐃᐃ[152] = _v(60, 60, 0, ΔΔ[1195], 3);
    this.ᐃᐃᐃ[152].id = 152;
    this.ⵠⵠᐃ[116] = _v(60, 60, 0, ΔΔ[1196], eg);
    this.ⵠⵠᐃ[116].id = 116;
    this.ⲆⵠΔ[212] = _v(68, 68, 0, ΔΔ[992], 3);
    this.ⲆⵠΔ[212].id = 212;
    this.ᐃᐃᐃ[212] = _v(60, 60, 0, ΔΔ[991], 3);
    this.ᐃᐃᐃ[212].id = 212;
    this.ⵠⵠᐃ[73] = _v(60, 60, 0, ΔΔ[990], 3);
    this.ⵠⵠᐃ[73].id = 73;
    this.ⲆⵠΔ[213] = _v(68, 68, 0, ΔΔ[995], yr);
    this.ⲆⵠΔ[213].id = 213;
    this.ᐃᐃᐃ[213] = _v(60, 60, 0, ΔΔ[994], I);
    this.ᐃᐃᐃ[213].id = 213;
    this.ⵠⵠᐃ[74] = _v(60, 60, 0, ΔΔ[993], qo);
    this.ⵠⵠᐃ[74].id = 74;
    this.ⲆⵠΔ[214] = _v(68, 68, 0, ΔΔ[998], fn);
    this.ⲆⵠΔ[214].id = 214;
    this.ᐃᐃᐃ[214] = _v(60, 60, 0, ΔΔ[997], yr);
    this.ᐃᐃᐃ[214].id = 214;
    this.ⵠⵠᐃ[75] = _v(60, 60, 0, ΔΔ[996], 3);
    this.ⵠⵠᐃ[75].id = 75;
    this.ⲆⵠΔ[215] = _v(68, 68, 0, ΔΔ[1001], 3);
    this.ⲆⵠΔ[215].id = 215;
    this.ᐃᐃᐃ[215] = _v(60, 60, 0, ΔΔ[1000], ub);
    this.ᐃᐃᐃ[215].id = 215;
    this.ⵠⵠᐃ[76] = _v(60, 60, 0, ΔΔ[999], 3);
    this.ⵠⵠᐃ[76].id = 76;
    this.ⲆⵠΔ[216] = _v(68, 68, 0, ΔΔ[1004], ci);
    this.ⲆⵠΔ[216].id = 216;
    this.ᐃᐃᐃ[216] = _v(60, 60, 0, ΔΔ[1003], nq);
    this.ᐃᐃᐃ[216].id = 216;
    this.ⵠⵠᐃ[77] = _v(60, 60, 0, ΔΔ[1002], Js);
    this.ⵠⵠᐃ[77].id = 77;
    this.ⲆⵠΔ[220] = _v(68, 68, 0, ΔΔ[1007], 3);
    this.ⲆⵠΔ[220].id = 220;
    this.ᐃᐃᐃ[220] = _v(60, 60, 0, ΔΔ[1006], 3);
    this.ᐃᐃᐃ[220].id = 220;
    this.ⵠⵠᐃ[78] = _v(60, 60, 0, ΔΔ[1005], ut);
    this.ⵠⵠᐃ[78].id = 78;
    this.ⲆⵠΔ[217] = _v(68, 68, 0, ΔΔ[1016], eg);
    this.ⲆⵠΔ[217].id = 217;
    this.ᐃᐃᐃ[217] = _v(60, 60, 0, ΔΔ[1015], ub);
    this.ᐃᐃᐃ[217].id = 217;
    this.ⵠⵠᐃ[60] = _v(60, 60, 0, ΔΔ[1014], eg);
    this.ⵠⵠᐃ[60].id = 60;
    this.ⲆⵠΔ[219] = _v(68, 68, 0, ΔΔ[1013], ci);
    this.ⲆⵠΔ[219].id = 219;
    this.ᐃᐃᐃ[219] = _v(60, 60, 0, ΔΔ[1012], qo);
    this.ᐃᐃᐃ[219].id = 219;
    this.ⵠⵠᐃ[72] = _v(60, 60, 0, ΔΔ[1011], Tr);
    this.ⵠⵠᐃ[72].id = 72;
    this.ⲆⵠΔ[218] = _v(68, 68, 0, ΔΔ[1010], Lg);
    this.ⲆⵠΔ[218].id = 218;
    this.ᐃᐃᐃ[218] = _v(60, 60, 0, ΔΔ[1009], 3);
    this.ᐃᐃᐃ[218].id = 218;
    this.ⵠⵠᐃ[66] = _v(60, 60, 0, ΔΔ[1008], 3);
    this.ⵠⵠᐃ[66].id = 66;
    this.ⲆⵠΔ[153] = _v(68, 68, 0, ΔΔ[1201], Js);
    this.ⲆⵠΔ[153].id = 153;
    this.ᐃᐃᐃ[153] = _v(60, 60, 0, ΔΔ[1199], 3);
    this.ᐃᐃᐃ[153].id = 153;
    this.ⵠⵠᐃ[117] = _v(60, 60, 0, ΔΔ[1200], Wb);
    this.ⵠⵠᐃ[117].id = 117;
    this.ⲆⵠΔ[154] = _v(68, 68, 0, ΔΔ[1205], ci);
    this.ⲆⵠΔ[154].id = 154;
    this.ᐃᐃᐃ[154] = _v(60, 60, 0, ΔΔ[1203], Js);
    this.ᐃᐃᐃ[154].id = 154;
    this.ⵠⵠᐃ[118] = _v(60, 60, 0, ΔΔ[1204], 3);
    this.ⵠⵠᐃ[118].id = 118;
    this.ⲆⵠΔ[155] = _v(68, 68, 0, ΔΔ[1209], 3);
    this.ⲆⵠΔ[155].id = 155;
    this.ᐃᐃᐃ[155] = _v(60, 60, 0, ΔΔ[1207], Lg);
    this.ᐃᐃᐃ[155].id = 155;
    this.ⵠⵠᐃ[119] = _v(60, 60, 0, ΔΔ[1208], ut);
    this.ⵠⵠᐃ[119].id = 119;
    this.ⲆⵠΔ[156] = _v(68, 68, 0, ΔΔ[1213], 3);
    this.ⲆⵠΔ[156].id = 156;
    this.ᐃᐃᐃ[156] = _v(60, 60, 0, ΔΔ[1211], 3);
    this.ᐃᐃᐃ[156].id = 156;
    this.ⵠⵠᐃ[120] = _v(60, 60, 0, ΔΔ[1212], xb);
    this.ⵠⵠᐃ[120].id = 120;
    this.ⲆⵠΔ[157] = _v(68, 68, 0, ΔΔ[1217], 3);
    this.ⲆⵠΔ[157].id = 157;
    this.ᐃᐃᐃ[157] = _v(60, 60, 0, ΔΔ[1215], fn);
    this.ᐃᐃᐃ[157].id = 157;
    this.ⵠⵠᐃ[121] = _v(60, 60, 0, ΔΔ[1216], Wb);
    this.ⵠⵠᐃ[121].id = 121;
    this.ⲆⵠΔ[203] = _v(68, 68, 0, ΔΔ[937], 3);
    this.ⲆⵠΔ[203].id = 203;
    this.ᐃᐃᐃ[203] = _v(60, 60, 0, ΔΔ[936], 3);
    this.ᐃᐃᐃ[203].id = 203;
    this.ᐃᐃᐃ[203].info.ⵠⵠ[2] = this.ᐃᐃᐃ[203].info.ⵠⵠ[Bb];
    this.ⲆⵠΔ[150] = _v(68, 68, 0, ΔΔ[524], 3);
    this.ⲆⵠΔ[150].id = 150;
    this.ᐃᐃᐃ[150] = _v(60, 60, 0, ΔΔ[523], 3);
    this.ᐃᐃᐃ[150].id = 150;
    this.ᐃᐃᐃ[150].info.ⵠⵠ[pq] = this.ᐃᐃᐃ[150].info.ⵠⵠ[0];
    this.ⲆⵠΔ[202] = _v(68, 68, 0, ΔΔ[939], Tr);
    this.ⲆⵠΔ[202].id = 202;
    this.ᐃᐃᐃ[202] = _v(60, 60, 0, ΔΔ[938], 3);
    this.ᐃᐃᐃ[202].id = 202;
    this.ᐃᐃᐃ[202].info.ⵠⵠ[Vg] = this.ᐃᐃᐃ[202].info.ⵠⵠ[In];
    this.ⲆⵠΔ[19] = _v(68, 68, 0, ΔΔ[934], qo);
    this.ⲆⵠΔ[19].id = 19;
    this.ᐃᐃᐃ[19] = _v(60, 60, 0, ΔΔ[932], 3);
    this.ᐃᐃᐃ[19].id = 19;
    this.ⵠⵠᐃ[39] = _v(60, 60, 0, ΔΔ[933], yr);
    this.ⵠⵠᐃ[39].id = 39;
    this.ⲆⵠΔ[20] = _v(68, 68, 0, ΔΔ[923], xb);
    this.ⲆⵠΔ[20].id = 20;
    this.ᐃᐃᐃ[20] = _v(60, 60, 0, ΔΔ[921], eg);
    this.ᐃᐃᐃ[20].id = 20;
    this.ⵠⵠᐃ[95] = _v(60, 60, 0, ΔΔ[922], ub);
    this.ⵠⵠᐃ[95].id = 95;
    this.ⲆⵠΔ[21] = _v(68, 68, 0, ΔΔ[927], 3);
    this.ⲆⵠΔ[21].id = 21;
    this.ᐃᐃᐃ[21] = _v(60, 60, 0, ΔΔ[925], ut);
    this.ᐃᐃᐃ[21].id = 21;
    this.ⵠⵠᐃ[96] = _v(60, 60, 0, ΔΔ[926], Hk);
    this.ⵠⵠᐃ[96].id = 96;
    this.ⲆⵠΔ[22] = _v(68, 68, 0, ΔΔ[931], eg);
    this.ⲆⵠΔ[22].id = 22;
    this.ᐃᐃᐃ[22] = _v(60, 60, 0, ΔΔ[929], qo);
    this.ᐃᐃᐃ[22].id = 22;
    this.ⵠⵠᐃ[97] = _v(60, 60, 0, ΔΔ[930], 3);
    this.ⵠⵠᐃ[97].id = 97;
    this.ⲆⵠΔ[60] = _v(68, 68, 0, ΔΔ[736], 3);
    this.ⲆⵠΔ[60].id = 60;
    this.ᐃᐃᐃ[60] = _v(60, 60, 0, ΔΔ[735], Lg);
    this.ᐃᐃᐃ[60].id = 60;
    this.ⵠⵠᐃ[127] = _v(60, 60, 0, ΔΔ[737], 3);
    this.ⵠⵠᐃ[127].id = 127;
    this.ⲆⵠΔ[90] = _v(68, 68, 0, ΔΔ[739], ut);
    this.ⲆⵠΔ[90].id = 90;
    this.ᐃᐃᐃ[90] = _v(60, 60, 0, ΔΔ[738], 3);
    this.ᐃᐃᐃ[90].id = 90;
    this.ⵠⵠᐃ[173] = _v(60, 60, 0, ΔΔ[740], 3);
    this.ⵠⵠᐃ[173].id = 173;
    this.ⲆⵠΔ[92] = _v(68, 68, 0, ΔΔ[745], ea);
    this.ⲆⵠΔ[92].id = 92;
    this.ᐃᐃᐃ[92] = _v(60, 60, 0, ΔΔ[744], 3);
    this.ᐃᐃᐃ[92].id = 92;
    this.ⵠⵠᐃ[174] = _v(60, 60, 0, ΔΔ[746], I);
    this.ⵠⵠᐃ[174].id = 174;
    this.ⲆⵠΔ[93] = _v(68, 68, 0, ΔΔ[748], sl);
    this.ⲆⵠΔ[93].id = 93;
    this.ᐃᐃᐃ[93] = _v(60, 60, 0, ΔΔ[747], 3);
    this.ᐃᐃᐃ[93].id = 93;
    this.ⵠⵠᐃ[175] = _v(60, 60, 0, ΔΔ[749], 3);
    this.ⵠⵠᐃ[175].id = 175;
    this.ⲆⵠΔ[91] = _v(68, 68, 0, ΔΔ[742], Wb);
    this.ⲆⵠΔ[91].id = 91;
    this.ᐃᐃᐃ[91] = _v(60, 60, 0, ΔΔ[741], ll);
    this.ᐃᐃᐃ[91].id = 91;
    this.ⵠⵠᐃ[176] = _v(60, 60, 0, ΔΔ[743], ll);
    this.ⵠⵠᐃ[176].id = 176;
    this.ⲆⵠΔ[100] = _v(68, 68, 0, ΔΔ[1165], 3);
    this.ⲆⵠΔ[100].id = 100;
    this.ᐃᐃᐃ[100] = _v(60, 60, 0, ΔΔ[1164], sl);
    this.ᐃᐃᐃ[100].id = 100;
    this.ⵠⵠᐃ[$r.ᐃⲆⵠᐃΔ] = _v(60, 60, 0, ΔΔ[Xr.ⵠⲆⲆⵠΔⲆᐃᐃΔ], ll);
    this.ⵠⵠᐃ[$r.ᐃⲆⵠᐃΔ].id = $r.ᐃⲆⵠᐃΔ;
    this.ⲆⵠΔ[34] = _v(68, 68, 0, ΔΔ[945], Tr);
    this.ⲆⵠΔ[34].id = 34;
    this.ᐃᐃᐃ[34] = _v(60, 60, 0, ΔΔ[943], 3);
    this.ᐃᐃᐃ[34].id = 34;
    this.ⵠⵠᐃ[30] = _v(60, 60, 0, ΔΔ[944], nq);
    this.ⵠⵠᐃ[30].id = 30;
    this.ⲆⵠΔ[44] = _v(68, 68, 0, ΔΔ[948], 3);
    this.ⲆⵠΔ[44].id = 44;
    this.ᐃᐃᐃ[44] = _v(60, 60, 0, ΔΔ[946], 3);
    this.ᐃᐃᐃ[44].id = 44;
    this.ⵠⵠᐃ[92] = _v(60, 60, 0, ΔΔ[947], 3);
    this.ⵠⵠᐃ[92].id = 92;
    this.ⲆⵠΔ[17] = _v(68, 68, 0, ΔΔ[878], 3);
    this.ⲆⵠΔ[17].id = 17;
    this.ᐃᐃᐃ[17] = _v(60, 60, 0, ΔΔ[877], ea);
    this.ᐃᐃᐃ[17].id = 17;
    this.ⵠⵠᐃ[32] = _v(60, 60, 0, ΔΔ[879], qu);
    this.ⵠⵠᐃ[32].id = 32;
    this.ⲆⵠΔ[63] = _v(68, 68, 0, ΔΔ[568], I);
    this.ⲆⵠΔ[63].id = 63;
    this.ᐃᐃᐃ[63] = _v(60, 60, 0, ΔΔ[566], ci);
    this.ᐃᐃᐃ[63].id = 63;
    this.ⵠⵠᐃ[130] = _v(60, 60, 0, ΔΔ[567], 3);
    this.ⵠⵠᐃ[130].id = 130;
    this.ⲆⵠΔ[187] = _v(68, 68, 0, ΔΔ[591], 3);
    this.ⲆⵠΔ[187].id = 187;
    this.ᐃᐃᐃ[187] = _v(60, 60, 0, ΔΔ[253], 3);
    this.ᐃᐃᐃ[187].id = 187;
    this.ⲆⵠΔ[_r.ᐃᐃΔΔᐃⲆᐃ] = _v(68, 68, 0, ΔΔ[Xr.ⵠⲆΔΔΔᐃᐃᐃᐃ], ub);
    this.ⲆⵠΔ[_r.ᐃᐃΔΔᐃⲆᐃ].id = _r.ᐃᐃΔΔᐃⲆᐃ;
    this.ᐃᐃᐃ[_r.ᐃᐃΔΔᐃⲆᐃ] = _v(60, 60, 0, ΔΔ[Xr.ᐃΔⵠᐃᐃᐃⲆΔᐃ], 3);
    this.ᐃᐃᐃ[_r.ᐃᐃΔΔᐃⲆᐃ].id = _r.ᐃᐃΔΔᐃⲆᐃ;
    this.ⲆⵠΔ[_r.ΔⲆⲆⲆⵠⵠᐃ] = _v(68, 68, 0, ΔΔ[Xr.ⵠⵠΔⵠⵠᐃⵠΔⲆ], 3);
    this.ⲆⵠΔ[_r.ΔⲆⲆⲆⵠⵠᐃ].id = _r.ΔⲆⲆⲆⵠⵠᐃ;
    this.ᐃᐃᐃ[_r.ΔⲆⲆⲆⵠⵠᐃ] = _v(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆⵠᐃⲆⲆⵠⵠ], Lg);
    this.ᐃᐃᐃ[_r.ΔⲆⲆⲆⵠⵠᐃ].id = _r.ΔⲆⲆⲆⵠⵠᐃ;
    this.ⲆⵠΔ[_r.ΔⵠΔᐃᐃΔⲆ] = _v(68, 68, 0, ΔΔ[Xr.ᐃᐃⵠⵠᐃᐃΔⲆⵠ], I);
    this.ⲆⵠΔ[_r.ΔⵠΔᐃᐃΔⲆ].id = _r.ΔⵠΔᐃᐃΔⲆ;
    this.ᐃᐃᐃ[_r.ΔⵠΔᐃᐃΔⲆ] = _v(60, 60, 0, ΔΔ[Xr.ⲆᐃᐃΔⲆᐃⲆᐃⵠ], I);
    this.ᐃᐃᐃ[_r.ΔⵠΔᐃᐃΔⲆ].id = _r.ΔⵠΔᐃᐃΔⲆ;
    this.ⲆⵠΔ[_r.ᐃᐃⵠⲆᐃⵠⲆ] = _v(68, 68, 0, ΔΔ[Xr.ⵠΔⲆⲆΔⵠⵠⲆΔ], yr);
    this.ⲆⵠΔ[_r.ᐃᐃⵠⲆᐃⵠⲆ].id = _r.ᐃᐃⵠⲆᐃⵠⲆ;
    this.ᐃᐃᐃ[_r.ᐃᐃⵠⲆᐃⵠⲆ] = _v(60, 60, 0, ΔΔ[Xr.ΔΔΔᐃⲆⵠΔⵠⵠ], ub);
    this.ᐃᐃᐃ[_r.ᐃᐃⵠⲆᐃⵠⲆ].id = _r.ᐃᐃⵠⲆᐃⵠⲆ;
    this.ⲆⵠΔ[_r.ⲆⲆᐃΔΔᐃΔ] = _v(68, 68, 0, ΔΔ[Xr.ⵠⵠᐃⵠΔⲆᐃΔᐃ], Js);
    this.ⲆⵠΔ[_r.ⲆⲆᐃΔΔᐃΔ].id = _r.ⲆⲆᐃΔΔᐃΔ;
    this.ᐃᐃᐃ[_r.ⲆⲆᐃΔΔᐃΔ] = _v(60, 60, 0, ΔΔ[Xr.ΔᐃᐃⵠⵠᐃΔᐃⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆⲆᐃΔΔᐃΔ].id = _r.ⲆⲆᐃΔΔᐃΔ;
    this.ᐃⵠΔⲆΔⵠⲆ = function () {
      for (var a = Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ, b = 10, c = Ch, d = 0; a.length > d; d++) {
        if (d > 0 && !(d % Vn)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += Zk + a[d].info.height;
      }
    };
    this.ⲆΔⵠΔᐃⲆⵠ = function () {
      var a = Math.floor((J + this.ⲆⵠΔ[0].info.ⵠⵠ[0].width) * Math.floor((3 + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / Ng) + 35);
      for (var b = 0; this.ⲆⵠΔ.length > b; b++) {
        if (this.ⲆⵠΔ[b]) {
          this.ⲆⵠΔ[b].info.translate.x = a;
          this.ⲆⵠΔ[b].info.translate.y = 22;
        }
      }
      this.ⵠᐃⲆΔΔⲆΔ.info.translate.x = a + 17;
      this.ⵠᐃⲆΔΔⲆΔ.info.translate.y = 22 + ΔΔ[339].height;
      this.ΔΔᐃⵠⵠⵠⵠ.info.translate.x = a + m;
      this.ΔΔᐃⵠⵠⵠⵠ.info.translate.y = 30;
      this.ⲆΔⵠᐃⲆⵠⲆ.info.translate.x = a + Eg;
      this.ⲆΔⵠᐃⲆⵠⲆ.info.translate.y = 22 + ΔΔ[339].height;
    };
    this.ᐃᐃᐃⲆᐃⵠⲆⲆⲆ = function () {
      var a = Math.floor((lo - ΔΔ[556][0].width) / Rl);
      for (var b = 0; this.ⲆΔⵠᐃᐃ.length > b; b++) {
        this.ⲆΔⵠᐃᐃ[b].button.info.translate.x = a;
        this.ⲆΔⵠᐃᐃ[b].button.info.translate.y = -13;
      }
    };
    this.ⲆⵠᐃⲆⲆⲆⵠ = function () {
      var a = 12 + Math.floor(Math.floor((3 + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / 4) * (xt + this.ᐃᐃᐃᐃⵠΔⲆ.info.ⵠⵠ[0].width) + 35);
      this.ᐃᐃᐃᐃⵠΔⲆ.info.translate.x = a;
      this.ᐃᐃᐃᐃⵠΔⲆ.info.translate.y = 33;
      this.ΔⵠⲆⵠΔⵠⲆ.info.translate.x = this.ᐃᐃᐃᐃⵠΔⲆ.info.translate.x;
      this.ΔⵠⲆⵠΔⵠⲆ.info.translate.y = 137;
      this.ᐃⲆΔⵠᐃⲆⲆ.info.translate.x = this.ᐃᐃᐃᐃⵠΔⲆ.info.translate.x;
      this.ᐃⲆΔⵠᐃⲆⲆ.info.translate.y = 240;
    };
    this.ⵠᐃᐃᐃⲆΔΔ = function () {
      var a = oq + Math.floor((10 + this.ΔᐃⵠⲆⵠⵠΔ.info.ⵠⵠ[0].width) * Math.floor((3 + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / nl) + 35);
      this.ΔᐃⵠⲆⵠⵠΔ.info.translate.x = a;
      this.ΔᐃⵠⲆⵠⵠΔ.info.translate.y = 36;
      a += 83;
      this.ⲆΔΔⲆΔⲆᐃ.info.translate.x = a;
      this.ⲆΔΔⲆΔⲆᐃ.info.translate.y = 36;
      this.ΔⲆΔᐃΔΔⲆ.info.translate.x = a;
      this.ΔⲆΔᐃΔΔⲆ.info.translate.y = 36;
      this.ᐃⵠᐃⵠᐃᐃΔ.info.translate.x = a;
      this.ᐃⵠᐃⵠᐃᐃΔ.info.translate.y = 36;
      this.ⵠᐃᐃΔⲆΔᐃ.info.translate.x = a;
      this.ⵠᐃᐃΔⲆΔᐃ.info.translate.y = 36;
      this.ⲆⵠⲆΔΔⲆⲆ.info.translate.x = a;
      this.ⲆⵠⲆΔΔⲆⲆ.info.translate.y = 36;
    };
    this.ⲆΔⲆᐃΔΔⲆ = function () {
      var a = Kh + Math.floor(Math.floor((sl + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / ls) * (te + this.ⵠⵠⲆⵠΔⵠΔ.info.ⵠⵠ[0].width) + 35);
      this.ⵠⵠⲆⵠΔⵠΔ.info.translate.x = a;
      this.ⵠⵠⲆⵠΔⵠΔ.info.translate.y = 36;
      a += 83;
      this.ΔᐃΔⲆᐃΔᐃ.info.translate.x = a;
      this.ΔᐃΔⲆᐃΔᐃ.info.translate.y = 36;
    };
    this.ⲆΔᐃⵠΔⲆΔ = function () {
      var a = Math.floor((Bo + this.ⲆΔⲆᐃⵠⵠᐃ.info.ⵠⵠ[0].width) * Math.floor((xb + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / 4) + 35);
      this.ⲆΔⲆᐃⵠⵠᐃ.info.translate.x = a;
      this.ⲆΔⲆᐃⵠⵠᐃ.info.translate.y = 22;
    };
    this.ΔᐃⲆᐃΔᐃⵠ = function () {
      var a = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ;
      if (Yh < a.length) {
        var b = Math.floor((lo - Xw.ᐃΔᐃⵠ.max * (a[0].info.width + 5)) / It);
      }
      for (var c = 0; c < a.length; c++) {
        a[c].info.translate.x = b + (a[c].info.width + Oj) * c;
        a[c].info.translate.y = jq - a[c].info.width - Bo;
        this.ⲆⵠᐃΔⲆ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ⲆⵠᐃΔⲆ[a[c].id].info.translate.y = a[c].info.translate.y - this.ⲆⵠᐃΔⲆ[a[c].id].info.ⵠⵠ[0].height - 6;
      }
    };
    var o;
    var p = 0;
    function q() {
      j.ᐃⲆΔ();
      if (++p == 30) {
        j.ᐃΔⲆΔⵠΔⵠ();
        j.ᐃⲆΔ();
        return;
      }
      dj.setTimeout(q, 33);
    }
    this.ᐃⵠⲆΔⲆ = function (a) {
      if (Xw.Ⲇᐃᐃᐃⵠ.open) {
        Xw.Ⲇᐃᐃᐃⵠ.ᐃⵠⲆΔⲆ();
      }
      if (Xw.ⲆΔⵠⲆⵠ.open) {
        Xw.ⲆΔⵠⲆⵠ.ᐃⵠⲆΔⲆ();
      }
      document.getElementById("team_box").style.display = "none";
      j.ⲆΔⵠΔⲆ.style.display = "none";
      j.ⲆΔⵠΔⲆ.open = false;
      j.sign.style.display = "none";
      j.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      j.ⲆⵠⲆⵠ.open = gh;
      document.getElementById("option_in_game").style.display = "none";
      j.options.open = Qg;
      document.getElementById("sure_delete").style.display = "none";
      j.ⵠⵠⵠΔ.open = false;
      document.getElementById("cancel_sure_delete").style.display = "none";
      j.ΔⲆⲆᐃⵠ.open = Mh;
      document.getElementById("chronoquest").style.display = "none";
      j.Δⵠᐃᐃ.open = false;
      o = a;
      j.ΔΔⲆᐃⲆᐃⲆ();
      j.ⲆΔ.style.cursor = j.ⵠΔΔⲆⲆᐃΔ;
      $w.ᐃⵠⲆΔⲆ();
      g = -sd;
      t();
      kf();
    };
    var g = -Hg;
    function t() {
      j.ᐃⲆΔ();
      if (++g == 30) {
        j.stop();
        o();
        return;
      }
      dj.setTimeout(t, 33);
    }
    this.ΔⵠᐃΔΔ = false;
    this.stop = function () {
      this.ΔⵠᐃΔΔ = gh;
    };
    this.ⲆᐃⵠⲆⵠ = function () {
      Ⲇⵠᐃⵠ.ΔᐃᐃⵠᐃΔΔΔⵠ();
      j.ΔⵠᐃΔΔ = _g;
      g = -ie;
      p = 0;
      q();
    };
    this.ᐃⲆΔ = function () {
      this.ⵠⵠⵠⵠ.translate.x = lo - this.ⵠⵠⵠⵠ.ⵠⵠ.width - 10;
      this.ⵠⵠⵠⵠ.translate.y = 5;
      cf.ΔᐃᐃΔⲆ.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[725][Zj].width - 85;
      cf.ΔᐃᐃΔⲆ.translate.y = 10;
      this.ⲆⵠⲆⵠ.button.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[708][Mg].width - 10;
      this.ⲆⵠⲆⵠ.button.info.translate.y = Ra;
      this.Δⵠᐃᐃ.button.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[755][Ih].width - 20;
      this.Δⵠᐃᐃ.button.info.translate.y = this.ⲆⵠⲆⵠ.button.info.translate.y + ΔΔ[708][Mg].height + 5;
      this.options.button.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[727][0].width - Jg;
      this.options.button.info.translate.y = this.Δⵠᐃᐃ.button.info.translate.y + ΔΔ[727][0].height + 18;
      this.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[727][0].width - A;
      this.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.info.translate.y = this.options.button.info.translate.y + ΔΔ[783][0].height;
      this.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[727][ig].width - 20;
      this.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.info.translate.y = this.options.button.info.translate.y + ΔΔ[783][fl].height;
      this.ⲆΔⵠΔⲆ.button.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[795][Mg].width - vi;
      this.ⲆΔⵠΔⲆ.button.info.translate.y = this.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.info.translate.y + ΔΔ[795][Mg].height;
      Xw.ᐃΔᐃᐃⲆ.translate.x = this.ⵠⵠⵠⵠ.translate.x - 63 - 85;
      Xw.ᐃΔᐃᐃⲆ.translate.y = 100;
      Xw.ΔΔⵠᐃᐃ.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[517].width - 85;
      Xw.ΔΔⵠᐃᐃ.translate.y = Xw.ᐃΔᐃᐃⲆ.translate.y + jn + ΔΔ[546].height;
      this.ΔΔΔⲆⵠ.translate.y = jq - 3 - 193;
      this.ΔΔΔⲆⵠ.translate.x = lo - 3 - 193;
      this.ⲆΔᐃΔ.translate.x = 5;
      this.ⲆΔᐃΔ.translate.y = jq - this.ⲆΔᐃΔ.ⵠⵠ.height - 5;
      this.ⵠΔⲆⵠΔ.button.info.translate.x = bo - 91 / pq;
      this.ⵠΔⲆⵠΔ.button.info.translate.y = 50;
      this.ᐃⵠΔⲆΔⵠⲆ();
      this.ΔᐃⲆᐃΔᐃⵠ();
      this.ⲆΔⵠΔᐃⲆⵠ();
      this.ⲆΔᐃⵠΔⲆΔ();
      this.ⲆΔⲆᐃΔΔⲆ();
      this.ⵠᐃᐃᐃⲆΔΔ();
      this.ⲆⵠᐃⲆⲆⲆⵠ();
      this.ᐃᐃᐃⲆᐃⵠⲆⲆⲆ();
      this.sign.ⲆⲆΔⵠⵠᐃΔ();
      Em();
      Xw.Ⲇᐃᐃᐃⵠ.ᐃⲆΔ();
      Xw.ⲆΔⵠⲆⵠ.ᐃⲆΔ();
      this.ΔΔᐃⲆⵠᐃᐃΔΔ.ᐃⲆΔ();
      this.ⲆⵠⲆⵠ.ⵠⲆΔΔⲆᐃΔ.ᐃⲆΔ();
      this.ⲆⵠⲆⵠ.list.ᐃⲆΔ();
      this.ⵠⵠⵠΔ.ᐃⲆΔ();
      this.ΔⲆⲆᐃⵠ.ᐃⲆΔ();
      this.Δⵠᐃᐃ.ᐃⲆΔ();
      this.ⵠΔⲆⵠΔ.ᐃⲆΔ();
      this.options.ᐃⲆΔ();
      this.ⲆΔⵠΔⲆ.ᐃⲆΔ();
      this.sign.ᐃⲆΔ();
      var a = Hi;
      if (p != 30) {
        a = 1500 / (p + 1) - 50;
      }
      if (g != -1) {
        a = -(1500 / (30 - g + 1) - 48);
      }
      this.ⵠΔⲆⵠΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠⵠⵠⵠ.translate.y -= a > 0 ? a : -a;
      Xw.ᐃΔᐃᐃⲆ.translate.y -= a > Qs ? a : -a;
      Xw.ΔΔⵠᐃᐃ.translate.y -= a > 0 ? a : -a;
      this.ⲆⵠⲆⵠ.button.info.translate.y -= wg < a ? a : -a;
      this.Δⵠᐃᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ⲆΔⵠΔⲆ.button.info.translate.y -= a > Da ? a : -a;
      this.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.info.translate.y -= a > os ? a : -a;
      this.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.info.translate.y -= a > 0 ? a : -a;
      cf.ΔᐃᐃΔⲆ.translate.y -= a > 0 ? a : -a;
      this.ⲆΔᐃΔ.translate.y -= a < Ih ? a : -a;
      this.ΔΔΔⲆⵠ.translate.y -= Lr > a ? a : -a;
    };
    this.ᐃΔⵠΔΔᐃΔΔΔ = function () {
      if (!Xw.ᐃⲆᐃⲆⵠ.enabled && this.ⵠⲆⲆⲆᐃᐃⲆ && !Xw.ⲆᐃⲆⵠᐃ) {
        Km();
      }
      op();
      (function () {
        var a = cf.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ];
        if (cf.mode === kw.ⵠᐃᐃⲆⲆ || kw.ⵠΔᐃᐃⲆ === cf.mode || kw.ΔΔΔΔᐃ === cf.mode || cf.mode === kw.ⲆⲆⲆⲆᐃ || kw.ᐃⲆⵠⲆΔΔᐃ === cf.mode || kw.ᐃᐃⲆΔⵠ === cf.mode) {
          for (var b = Lr; b < a.length; b++) {
            a[b].Ⲇⵠᐃⵠᐃⵠᐃ();
          }
        } else if (cf.mode === kw.ⲆⵠⲆⵠⲆⲆⵠ) {
          for (b = wj; b < a.length; b++) {
            if (Xw.ᐃⲆⲆΔΔᐃᐃ || Xw.ΔΔⵠᐃᐃ.enabled || a[b].ⲆᐃΔⲆ.ⲆⲆΔⵠᐃ !== "spectator") {
              a[b].Ⲇⵠᐃⵠᐃⵠᐃ();
            }
          }
        }
      })();
      ka.ΔⵠⲆᐃⵠΔⵠ();
      if (this.ⵠⲆⲆⲆᐃᐃⲆ) {
        Bm();
        if (Oq === this.ⵠΔΔⵠⵠΔᐃ) {
          this.ⲆⵠⲆⵠ.button.ᐃⵠᐃⵠ(d);
        }
        if (cf.mode !== kw.ΔΔΔΔᐃ && cf.mode !== kw.ⲆⲆⲆⲆᐃ && kw.ᐃⲆⵠⲆΔΔᐃ !== cf.mode && wt === this.ⵠⵠⵠᐃᐃᐃΔ) {
          this.Δⵠᐃᐃ.button.ᐃⵠᐃⵠ(d);
        }
        this.options.button.ᐃⵠᐃⵠ(d);
        if (this.ⲆⲆⲆᐃΔⵠᐃ === 1) {
          this.ⲆΔⵠΔⲆ.button.ᐃⵠᐃⵠ(d);
        }
        if ($w.ⲆᐃⵠⲆⵠ) {
          this.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.ᐃⵠᐃⵠ(d);
        } else {
          this.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.ᐃⵠᐃⵠ(d);
        }
        qm();
        tp();
        this.ⲆΔᐃΔ.ᐃⵠᐃⵠ();
        ap();
        Zm();
        Xm();
        Om();
        Wm();
        km();
        Gm();
        (function () {
          if (!Xw.ΔⲆΔΔ.open && !Xw.ᐃⲆⵠⲆΔ.open && !Xw.ᐃⵠᐃᐃ.open && !Xw.ⲆᐃⵠΔ.open && !Xw.ΔΔᐃⵠ.open) {
            Xw.ᐃⵠⵠΔⲆ.open = false;
            var a = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
            var b = kw.ᐃΔⵠⵠⲆΔΔⵠⵠ;
            if (a) {
              for (var c = Hi; cf.ⲆΔⲆ[nw.ⲆⵠⲆⵠⵠ].length > c; c++) {
                var d = cf.ⲆΔⲆ[nw.ⲆⵠⲆⵠⵠ][c];
                var e = ᐃⵠΔⲆ.ΔΔⵠΔ(d, a);
                if (b > e) {
                  b = e;
                  Xw.ᐃⵠⵠΔⲆ.open = true;
                  Xw.ᐃⵠⵠΔⲆ.Ⲇⵠⵠᐃ = d.Ⲇⵠⵠᐃ;
                  Xw.ᐃⵠⵠΔⲆ.ⵠΔᐃⲆⲆ = d.id;
                }
              }
            }
          }
        })();
        Dm();
        Am();
        Fm();
        _m();
        Em();
        xm();
      }
      if (Xw.ᐃⲆᐃⲆⵠ.enabled) {
        Mm();
      }
      Qm();
      if (this.ⵠⲆⲆⲆᐃᐃⲆ && this.ᐃⲆⲆᐃⲆΔᐃ === Oq) {
        $m();
      }
      Xw.ⵠⲆⲆⵠΔᐃᐃ.ᐃⵠᐃⵠ();
      Xw.alert.ᐃⵠᐃⵠ("#FFF", "#000");
      if (this.ⵠⲆⲆⲆᐃᐃⲆ) {
        Xw.ᐃⲆᐃⲆⵠ.ᐃⵠᐃⵠ();
        Xw.ⵠΔⲆⵠΔ.ᐃⵠᐃⵠ();
        Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.ᐃⵠᐃⵠ(zf.ⲆⲆΔⲆ.x, zf.ⲆⲆΔⲆ.y);
      }
      Sm();
    };
    this.ⲆⲆΔᐃΔΔⵠⲆᐃ = function () {
      Xw.ⵠᐃⲆ.ᐃⲆΔ();
      Xw.ⲆΔᐃΔ.ᐃⲆΔ();
      if (!Xw.reconnect.enabled && Xw.ⲆᐃΔⵠⲆ) {
        Xw.control.ᐃⲆΔ();
        Xw.ᐃΔᐃᐃⲆ.ᐃⲆΔ();
      }
      cf.ᐃⲆΔ();
      this.Δⵠᐃᐃ.ⲆⵠΔΔΔⵠⵠΔᐃ();
    };
    this.ⲆΔᐃⵠⵠⲆⵠⲆⲆ = function () {
      Nv();
    };
    this.ⵠⲆΔΔΔⲆΔΔΔ = function () {
      Ⲇⵠᐃⵠ.ΔⲆᐃⵠΔⵠᐃᐃᐃ();
      Ⲇⵠᐃⵠ.ᐃⵠⲆⲆⲆⵠᐃⵠⵠ();
      Ⲇⵠᐃⵠ.ⵠᐃⵠⲆⲆⵠᐃᐃΔ();
      Ⲇⵠᐃⵠ.ᐃΔΔⵠΔⵠΔᐃᐃ();
    };
    this.ᐃⵠᐃⵠ = function () {
      if (!Xw.reconnect.enabled && Xw.ⲆᐃΔⵠⲆ) {
        this.ⵠⲆΔΔΔⲆΔΔΔ();
      }
      $w.ᐃᐃⵠᐃᐃⲆᐃΔΔ();
      this.ⲆⲆΔᐃΔΔⵠⲆᐃ();
      if (bf.ᐃⲆΔⵠᐃΔᐃ !== sd) {
        this.ⲆΔᐃⵠⵠⲆⵠⲆⲆ();
        this.ᐃΔⵠΔΔᐃΔΔΔ();
      } else {
        var a = Ⲇⵠ.ⵠⵠⵠᐃⵠΔΔ;
        Jm(d, a, bo - a.width / es, lq - a.height / Ls, a.width / xj, a.height / 2);
      }
    };
    this.ΔⲆΔΔⵠⲆⲆ = function (a) {
      if (Xw.Ⲇᐃᐃᐃⵠ.open && a.keyCode === 27) {
        Xw.Ⲇᐃᐃᐃⵠ.ᐃⵠⲆΔⲆ();
      } else if (Xw.ⲆΔⵠⲆⵠ.open && a.keyCode === 27) {
        Xw.ⲆΔⵠⲆⵠ.ᐃⵠⲆΔⲆ();
      } else if (Xw.Ⲇᐃᐃᐃⵠ.open || Xw.ⲆΔⵠⲆⵠ.open || a.keyCode != 79 || g != -1) {
        if (a.keyCode == 13 && g == -1) {
          if (Xw.ⲆΔⵠⲆⵠ.open) {
            Xw.ⲆΔⵠⲆⵠ.ⵠΔΔⵠⲆⵠᐃ();
          } else {
            Xw.Ⲇᐃᐃᐃⵠ.ⲆᐃⵠⲆⵠ();
          }
        } else if (!Xw.Ⲇᐃᐃᐃⵠ.open && !Xw.ⲆΔⵠⲆⵠ.open) {
          if (a.keyCode === 82) {
            Xw.ᐃΔᐃᐃⲆ.ᐃⵠⲆⵠⵠᐃᐃ();
          } else if (a.keyCode !== 80 || cf.mode !== kw.ⲆⵠⲆⵠⲆⲆⵠ || Xw.ᐃⲆⲆΔΔᐃᐃ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (Xw.ΔᐃⲆⵠ.id < 0) {
                var b = a.keyCode - 49;
                var c = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ[b];
                if (c) {
                  Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              Xw.ⲆⲆΔΔΔᐃᐃ = !Xw.ⲆⲆΔΔΔᐃᐃ;
            } else if (a.keyCode == 71) {
              Xw.ΔᐃⲆⵠ.ⵠΔⵠⵠⵠᐃⵠΔⲆ();
            }
          } else {
            Xw.ΔΔⵠᐃᐃ.ᐃⵠⲆⵠⵠᐃᐃ();
          }
        }
      } else {
        Xw.ⲆΔⵠⲆⵠ.ⵠᐃᐃⲆⲆᐃⲆᐃⵠ();
      }
      ff.up(a);
    };
    this.ᐃΔΔᐃⲆᐃΔ = function (a) {
      ff.down(a);
      if (a.keyCode == 8 && !Xw.Ⲇᐃᐃᐃⵠ.open && !Xw.ⲆΔⵠⲆⵠ.open) {
        a.preventDefault();
      }
    };
    this.ⲆⵠΔᐃⵠΔⲆ = function (b) {
      zf.ⲆⲆΔⲆ = Zv(j.ⲆΔ, b);
      var c = false;
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0) {
        j.ΔΔΔⲆⵠ.focus(zf.ⲆⲆΔⲆ);
      }
      var d = Xw.ΔⲆΔΔ;
      if (ig > Xw.ΔᐃⲆⵠ.id && d.id >= 0 && (!Xw.ΔⲆΔΔ.lock || Xw.ΔⲆΔΔ.Ⲇⵠⵠᐃ === Xw.id)) {
        c |= j.ⲆⵠΔ[Xw.ΔⲆΔΔ.id].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      var e = Xw.ᐃⵠᐃᐃ;
      if (e.open && e.ΔⲆⵠⵠΔ > 0) {
        c |= j.ΔᐃΔⲆᐃΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      var f = Xw.ΔΔᐃⵠ;
      if (f.open && f.ΔⲆⲆᐃΔᐃᐃ > Bb) {
        c |= j.ⲆΔΔⲆΔⲆᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
        c |= j.ΔⲆΔᐃΔΔⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
        c |= j.ᐃⵠᐃⵠᐃᐃΔ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
        c |= j.ⵠᐃᐃΔⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
        c |= j.ⲆⵠⲆΔΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      var k = Xw.ⲆᐃⵠΔ;
      if (k.open && k.ⲆⲆⲆᐃΔⲆΔ > Ih) {
        c |= j.ᐃⲆΔⵠᐃⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      if (Xw.sign.open) {
        c |= j.sign.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      if (!Xw.ΔⲆΔΔ.lock) {
        if (Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ) {
          c |= j.ⲆΔⵠᐃⲆⵠⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
        }
      }
      if (Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ) {
        c |= j.ⵠᐃⲆΔΔⲆΔ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      if (Xw.ΔᐃⲆⵠ.id < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open && !j.ⲆΔⵠΔⲆ.open) {
        for (var a = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ, m = ya; a.length > m; m++) {
          var n = a[m].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
          c |= n;
          if (n) {
            Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.start(m, zf.ⲆⲆΔⲆ);
          }
          if (d.open && (d.id < 0 || d.id == a[m].id) || Xw.ᐃⲆⵠⲆΔ.open && a[m].id === 109 || Xw.ᐃⵠⵠΔⲆ.open && a[m].id === 180 || Xw.ⲆᐃⵠΔ.open && (a[m].id === 109 || a[m].id === 131) || Xw.ᐃⵠᐃᐃ.open && a[m].id === 134 || Xw.ΔΔᐃⵠ.open && a[m].id === 109) {
            c |= j.ⲆⵠᐃΔⲆ[a[m].id].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
          }
        }
      }
      if (Xw.ⲆᐃⵠᐃⲆ.open) {
        c |= j.ⲆᐃⵠᐃⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      if (-Xn != j.ᐃⵠᐃᐃⲆ) {
        if (c |= j.ⲆΔⵠᐃᐃ[j.ᐃⵠᐃᐃⲆ].button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv)) {
          var o = true;
        }
      } else {
        o = dr;
      }
      if (Xw.ΔᐃⲆⵠ.id < 0 && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !o && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.ⲆΔⵠΔⲆ.open && !Xw.ⲆᐃⲆⵠᐃ) {
        a = Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ;
        m = 0;
        for (; a.length > m; m++) {
          c |= a[m].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
        }
      }
      if (Xw.ΔᐃⲆⵠ.id < 0 && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && Xw.ⵠΔⲆⵠΔ.open && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
        c |= j.ⵠΔⲆⵠΔ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < Bb && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
        c |= j.ⲆⵠⲆⵠ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
        c |= j.options.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open) {
        c |= j.ⲆΔⵠΔⲆ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < Yh && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open && !j.ⲆΔⵠΔⲆ.open) {
        if ($w.ⲆᐃⵠⲆⵠ) {
          c |= j.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
        } else {
          c |= j.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
        }
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < Ih && !j.ⲆⵠⲆⵠ.open && !j.ⲆΔⵠΔⲆ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && cf.mode !== kw.ΔΔΔΔᐃ && cf.mode !== kw.ⲆⲆⲆⲆᐃ && cf.mode !== kw.ᐃⲆⵠⲆΔΔᐃ) {
        c |= j.Δⵠᐃᐃ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Uv);
      }
      if (!c && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open && !j.sign.open) {
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ >= eu) {
          Ⲇⵠᐃⵠ.ΔᐃⲆⵠⲆⵠᐃⵠΔ();
        } else if (!o) {
          zf.down();
        }
      }
    };
    this.ΔᐃᐃⲆⵠⲆᐃ = function (b) {
      zf.ⲆⲆΔⲆ = Zv(j.ⲆΔ, b);
      zf.up();
      if (!Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.release()) {
        var c = Xw.ΔⲆΔΔ;
        var d = Xw.ᐃⲆⵠⲆΔ;
        var e = Xw.ᐃⵠⵠΔⲆ;
        var f = Xw.ᐃⵠᐃᐃ;
        var i = Xw.ΔΔᐃⵠ;
        var k = Xw.ⲆᐃⵠΔ;
        if (Xw.control.attack) {
          Xw.control.attack = In;
          Ⲇⵠᐃⵠ.ΔⲆⲆΔⵠⵠⲆΔⲆ();
        }
        if (-mk != j.ᐃⵠᐃᐃⲆ) {
          var m = j.ⲆΔⵠᐃᐃ[j.ᐃⵠᐃᐃⲆ].button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            j.ⲆΔⵠᐃᐃ[j.ᐃⵠᐃᐃⲆ].action();
          }
        }
        if (st > Xw.ΔᐃⲆⵠ.id && ig <= c.id && !j.ⵠⵠⵠΔ.open) {
          if (!Xw.ΔⲆΔΔ.lock || Xw.ΔⲆΔΔ.Ⲇⵠⵠᐃ === Xw.id) {
            if (m = j.ⲆⵠΔ[Xw.ΔⲆΔΔ.id].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
              Ⲇⵠᐃⵠ.ⲆⲆΔⲆΔⵠΔΔⵠ(c);
            }
          }
        }
        if ((f = Xw.ᐃⵠᐃᐃ).open && f.ΔⲆⵠⵠΔ > 0 && !j.ⵠⵠⵠΔ.open) {
          if (m = j.ΔᐃΔⲆᐃΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
            Ⲇⵠᐃⵠ.ΔᐃᐃΔᐃⲆⲆᐃⲆ(f);
          }
        }
        if ((i = Xw.ΔΔᐃⵠ).open && i.ΔⲆⲆᐃΔᐃᐃ > 0 && !j.ⵠⵠⵠΔ.open) {
          switch (i.type) {
            case nw.ⲆᐃΔⲆⵠ:
              if (m = j.ⲆΔΔⲆΔⲆᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
                Ⲇⵠᐃⵠ.ΔⲆⵠΔΔΔⵠ(i);
              }
              break;
            case nw.ⲆΔᐃⵠⲆ:
              if (m = j.ΔⲆΔᐃΔΔⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
                Ⲇⵠᐃⵠ.ΔⲆⵠΔΔΔⵠ(i);
              }
              break;
            case nw.ΔⵠᐃⲆⵠ:
              if (m = j.ᐃⵠᐃⵠᐃᐃΔ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
                Ⲇⵠᐃⵠ.ΔⲆⵠΔΔΔⵠ(i);
              }
              break;
            case nw.ΔⲆⵠⵠⵠ:
              if (m = j.ⵠᐃᐃΔⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
                Ⲇⵠᐃⵠ.ΔⲆⵠΔΔΔⵠ(i);
              }
              break;
            case nw.ⲆⲆⵠⵠΔ:
              if (m = j.ⲆⵠⲆΔΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
                Ⲇⵠᐃⵠ.ΔⲆⵠΔΔΔⵠ(i);
              }
          }
        }
        if ((k = Xw.ⲆᐃⵠΔ).open && k.ⲆⲆⲆᐃΔⲆΔ > 0 && !j.ⵠⵠⵠΔ.open) {
          if (m = j.ᐃⲆΔⵠᐃⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
            Ⲇⵠᐃⵠ.ⲆⵠⵠᐃⵠΔⲆΔⲆ(k);
          }
        }
        if (Xw.sign.open && !j.ⵠⵠⵠΔ.open) {
          if (m = j.sign.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
            j.sign.select();
          }
        }
        if (!Xw.ΔⲆΔΔ.lock && !j.ⵠⵠⵠΔ.open) {
          if (Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ && (m = j.ⲆΔⵠᐃⲆⵠⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv))) {
            Ⲇⵠᐃⵠ.ⵠⲆⲆⲆⲆᐃⵠΔⲆ(c);
          }
        }
        if (Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ && !j.ⵠⵠⵠΔ.open && (m = j.ⵠᐃⲆΔΔⲆΔ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv))) {
          Ⲇⵠᐃⵠ.ⲆⵠᐃⲆΔⵠⲆⵠⲆ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (Xw.ⲆᐃⵠᐃⲆ.open) {
          if (m = j.ⲆᐃⵠᐃⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
            Ⲇⵠᐃⵠ.ⲆᐃⵠᐃⲆ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.id < 0 && !Xw.ᐃⲆᐃⲆⵠ.enabled && !j.ⵠⵠⵠΔ.open) {
          for (var l = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ, o = 0; o < l.length; o++) {
            if (m = l[o].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
              if (b.which != wt || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == 3) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0) {
                  j.ⵠⵠⵠΔ.ⲆᐃⵠᐃΔᐃΔ(l[o].id);
                }
              } else {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(l[o].id, o);
              }
            } else if (c.open && (fl > c.id || c.id === l[o].id)) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0) {
                Ⲇⵠᐃⵠ.ᐃΔΔⲆⲆΔⲆᐃᐃ(c, l[o].id, b.shiftKey ? Ra : 1);
              }
            } else if (e.open && l[o].id === 180) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < wg) {
                Ⲇⵠᐃⵠ.ⵠⲆⲆΔⲆⲆⲆΔΔ(e);
              }
            } else if (d.open && l[o].id === 109) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < eu) {
                Ⲇⵠᐃⵠ.ᐃᐃⲆᐃⵠⵠΔⵠΔ(d, b.shiftKey ? 10 : 1);
              }
            } else if (f.open && l[o].id === 134) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) && Yh > Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ) {
                Ⲇⵠᐃⵠ.ⲆΔⵠⲆⵠᐃΔΔⲆ(f, b.shiftKey ? Ch : Gh);
              }
            } else if (i.open && l[o].id === 109) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0) {
                Ⲇⵠᐃⵠ.ᐃⵠΔᐃΔᐃᐃⵠⲆ(i, b.shiftKey ? jn : 1);
              }
            } else if (k.open && (l[o].id === 109 || l[o].id === 131)) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0) {
                if (l[o].id === 109) {
                  Ⲇⵠᐃⵠ.ΔᐃⲆᐃⵠⲆⲆ(k, b.shiftKey ? zl : Xn, 0);
                } else {
                  Ⲇⵠᐃⵠ.ΔᐃⲆᐃⵠⲆⲆ(k, 0, b.shiftKey ? Lb : 1);
                }
              }
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.id < 0 && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !Xw.ᐃⲆᐃⲆⵠ.enabled && !j.ⵠⵠⵠΔ.open && !Xw.ⲆᐃⲆⵠᐃ) {
          l = Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ;
          o = st;
          for (; o < l.length; o++) {
            if (m = l[o].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
              ⵠⵠⲆΔᐃ = Ⲇⵠᐃⵠ.ⲆᐃΔᐃᐃⵠᐃᐃᐃ(l[o].id);
              if (ⵠⵠⲆΔᐃ && ga) {
                ga("send", "event", "Game", "craft", ds[Ws[l[o].id].Δⵠⵠⵠ].name);
              }
            }
          }
        }
        if (In > Xw.ΔᐃⲆⵠ.id && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && Xw.ⵠΔⲆⵠΔ.open && !j.ⲆΔⵠΔⲆ.open && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open) {
          if (m = j.ⵠΔⲆⵠΔ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv)) {
            Zw.ⵠΔⲆⵠΔ.select();
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ⲆΔⵠΔⲆ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open) {
          if ($w.ⲆᐃⵠⲆⵠ) {
            if (m = j.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
              $w.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = j.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
            $w.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
          if (m = j.options.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
            j.options.ΔᐃⵠΔᐃⲆΔⲆⵠ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open && j.ⲆⲆⲆᐃΔⵠᐃ === mk) {
          if (m = j.ⲆΔⵠΔⲆ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
            j.ⲆΔⵠΔⲆ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < Rq && !j.ⵠⵠⵠΔ.open && !j.ⲆΔⵠΔⲆ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && au === j.ⵠΔΔⵠⵠΔᐃ) {
          if (m = j.ⲆⵠⲆⵠ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
            j.ⲆⵠⲆⵠ.ⵠⵠⲆⲆᐃΔΔᐃⵠ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.ⲆΔⵠΔⲆ.open && kw.ΔΔΔΔᐃ !== cf.mode && kw.ⲆⲆⲆⲆᐃ !== cf.mode && kw.ᐃⲆⵠⲆΔΔᐃ !== cf.mode && j.ⵠⵠⵠᐃᐃᐃΔ === 1) {
          if (m = j.Δⵠᐃᐃ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Vv)) {
            j.Δⵠᐃᐃ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔⲆⵠΔᐃ && ll == b.which) {
          j.ΔⲆⲆᐃⵠ.ⲆᐃⵠᐃΔᐃΔ();
        }
      }
    };
    this.ⲆᐃⵠⵠⲆⲆⲆ = false;
    this.ⵠᐃᐃᐃⵠⲆᐃ = function (b) {
      zf.ⲆⲆΔⲆ = Zv(j.ⲆΔ, b);
      var d = false;
      Zw.Ⲇⵠᐃⵠⵠ.display = Mg;
      Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.ᐃⵠᐃᐃΔ(zf.ⲆⲆΔⲆ);
      if (j.ᐃⵠᐃᐃⲆ != -1) {
        d |= j.ⲆΔⵠᐃᐃ[j.ᐃⵠᐃᐃⲆ].button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      var e = Xw.ᐃⵠᐃᐃ;
      if (e.open && e.ΔⲆⵠⵠΔ > 0) {
        d |= j.ΔᐃΔⲆᐃΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      var f = Xw.ΔΔᐃⵠ;
      if (f.open && f.ΔⲆⲆᐃΔᐃᐃ > 0) {
        d |= j.ⲆΔΔⲆΔⲆᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
        d |= j.ΔⲆΔᐃΔΔⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
        d |= j.ᐃⵠᐃⵠᐃᐃΔ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
        d |= j.ⵠᐃᐃΔⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
        d |= j.ⲆⵠⲆΔΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      var i = Xw.ⲆᐃⵠΔ;
      if (i.open && mj < i.ⲆⲆⲆᐃΔⲆΔ) {
        d |= j.ᐃⲆΔⵠᐃⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      if (Xw.sign.open) {
        d |= j.sign.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      var a = Xw.ΔⲆΔΔ;
      if (Ih > Xw.ΔᐃⲆⵠ.id && a.id >= 0 && !Xw.ᐃⲆᐃⲆⵠ.enabled && (!Xw.ΔⲆΔΔ.lock || Xw.id === Xw.ΔⲆΔΔ.Ⲇⵠⵠᐃ)) {
        d |= j.ⲆⵠΔ[a.id].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      if (Xw.ⲆᐃⵠᐃⲆ.open) {
        d |= j.ⲆᐃⵠᐃⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      if (!Xw.ΔⲆΔΔ.lock && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
        if (Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ) {
          d |= j.ⲆΔⵠᐃⲆⵠⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
        }
      }
      if (Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
        d |= j.ⵠᐃⲆΔΔⲆΔ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      if (Ih > Xw.ΔᐃⲆⵠ.id && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
        for (var k = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ, m = eu; k.length > m; m++) {
          var o = k[m].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
          d |= Zw.Ⲇⵠᐃⵠⵠ.ⲆⵠᐃΔ(o, k[m], fl);
          if (a.open && (a.id < 0 || a.id == k[m].id) || Xw.ᐃⲆⵠⲆΔ.open && k[m].id == 109 || Xw.ᐃⵠⵠΔⲆ.open && k[m].id === 180 || Xw.ⲆᐃⵠΔ.open && (k[m].id == 109 || k[m].id == 131) || Xw.ᐃⵠᐃᐃ.open && k[m].id == 134 || Xw.ΔΔᐃⵠ.open && k[m].id == 109) {
            d |= j.ⲆⵠᐃΔⲆ[k[m].id].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
          }
        }
      }
      if (Xw.ΔᐃⲆⵠ.id < 0 && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < wj && !Xw.ᐃⲆᐃⲆⵠ.enabled && !Xw.ⲆᐃⲆⵠᐃ) {
        k = Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ;
        m = 0;
        for (; m < k.length; m++) {
          o = false;
          o = k[m].ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
          d |= Zw.Ⲇⵠᐃⵠⵠ.ⲆⵠᐃΔ(o, k[m], 1);
        }
      }
      if (Xw.ΔᐃⲆⵠ.id < 0 && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !!Xw.ⵠΔⲆⵠΔ.open && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
        d |= j.ⵠΔⲆⵠΔ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      if (fl > Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open && j.ⵠΔΔⵠⵠΔᐃ === 1) {
        d |= j.ⲆⵠⲆⵠ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      if (ig > Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
        d |= j.options.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open && j.ⲆⲆⲆᐃΔⵠᐃ === 1) {
        d |= j.ⲆΔⵠΔⲆ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      if (Rq > Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open && !j.ⲆΔⵠΔⲆ.open) {
        if ($w.ⲆᐃⵠⲆⵠ) {
          d |= j.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
        } else {
          d |= j.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
        }
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.ⲆΔⵠΔⲆ.open && kw.ΔΔΔΔᐃ !== cf.mode && kw.ⲆⲆⲆⲆᐃ !== cf.mode && cf.mode !== kw.ⲆⲆⲆΔΔⲆⲆᐃⲆ && j.ⵠⵠⵠᐃᐃᐃΔ === 1) {
        d |= j.Δⵠᐃᐃ.button.ⲆⵠᐃΔ(j.ⲆΔ, zf.ⲆⲆΔⲆ, Tv);
      }
      if (d !== j.ⲆᐃⵠⵠⲆⲆⲆ) {
        j.ⲆᐃⵠⵠⲆⲆⲆ = d;
        c.style.cursor = d ? j.ⲆᐃᐃⲆᐃⵠⲆ : j.ⵠΔΔⲆⲆᐃΔ;
      }
    };
    this.ᐃΔⲆΔⵠΔⵠ = function () {
      dj.addEventListener("mousedown", this.ⲆⵠΔᐃⵠΔⲆ, Mh);
      dj.addEventListener("mouseup", this.ΔᐃᐃⲆⵠⲆᐃ, al);
      dj.addEventListener("mousemove", this.ⵠᐃᐃᐃⵠⲆᐃ, false);
      dj.addEventListener("keyup", this.ΔⲆΔΔⵠⲆⲆ, false);
      dj.addEventListener("keydown", this.ᐃΔΔᐃⲆᐃΔ, false);
    };
    this.ΔΔⲆᐃⲆᐃⲆ = function () {
      dj.removeEventListener("mousedown", this.ⲆⵠΔᐃⵠΔⲆ, false);
      dj.removeEventListener("mouseup", this.ΔᐃᐃⲆⵠⲆᐃ, Ta);
      dj.removeEventListener("mousemove", this.ⵠᐃᐃᐃⵠⲆᐃ, xo);
      dj.removeEventListener("keyup", this.ΔⲆΔΔⵠⲆⲆ, false);
      dj.removeEventListener("keydown", this.ᐃΔΔᐃⲆᐃΔ, vt);
    };
  }
  let Lw;
  let Mw;
  const Nw = hk;
  function Ow() {
    ᐃⵠΔⲆ.ⲆⲆⲆΔᐃᐃᐃ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function Pw() {
    ᐃⵠΔⲆ.ⲆⲆⲆΔᐃᐃᐃ("https://twitter.com/intent/tweet?text=I%20survived%20" + Xw.ⵠΔⲆ + "%20days%20with%20" + Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⲆΔΔᐃⲆ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Qw(a, b, c) {
    const d = (a | 40411) & ~(a & 40411);
    const e = (0 << (b & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & fh)) + (Yk << (b >> 16 & 255));
    const f = (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (24 << (c & 255));
    return (2147483587 + (55497 + (nb(d, e) ^ function (b, c, d, e, f, g) {
      const i = (8 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (24 << (e >> 24 & 255)) + (0 << (e & 255));
      const a = f ^ 8570;
      const j = $s((1013904223 + (b + 183) * 1664525) % 4294967296, (24 << (c & 255)) + (8 << (c >> js & 255)) + (16 << (c >> 24 & 255)) + (mj << (c >> 16 & 255)), (d | 58528) & ~(d & 58528));
      nb(i, a);
      return ~(j & 42875) & j | ~(j & 42875) & 42875;
    }(f, d, e, f, d))) * 2147483629) % 2147483647;
  }
  function Rw(b, c) {
    this.ⲆΔ = b;
    this.ᐃ = c;
    var d = this;
    this.ⵠⲆΔΔΔΔΔ = f;
    this.ⵠΔⲆΔΔⲆΔ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: fl,
      translate: {
        x: 0,
        y: Hi
      },
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ᐃΔΔΔᐃ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⵠⵠⲆᐃⲆⵠⲆ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Et[335] + " : " + Xw.ⵠΔⲆ + "</div><div class=\"stats\"> " + Et[334] + " : " + Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⵠᐃⵠΔᐃ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Et[333] + " : " + Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⲆΔΔᐃⲆ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⲆᐃⲆΔᐃⲆⲆ + " " + Et[332] + "</div></div><div id=\"shop_points\">" + Et[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Et[329] + "</div><div class=\"social\" id=\"fffacebook\">" + Et[330] + "</div></div><div id=\"bbback\">" + Et[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", Pw, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          Yw.ᐃⵠⲆΔⲆ(bf.ⲆᐃⵠⲆⵠ);
        }, al);
        document.getElementById("fffacebook").addEventListener("mouseup", Ow, false);
        this.height = Math.floor(this.id.clientHeight / vg);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Bf + "getBreadAndScore?userid=" + dx);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (Vn == this.readyState && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - bf.ⲆᐃᐃΔⲆ;
              bf.ⲆᐃᐃΔⲆ = b.b;
              bf.ⲆΔΔᐃⲆ = b.s;
              bf.ⲆⲆΔⲆⲆ = bf.ΔΔⵠΔᐃⵠⵠ(bf.ⲆΔΔᐃⲆ);
              bf.ᐃⲆⵠⵠⲆᐃΔ = bf.ᐃⵠⲆⵠⵠⵠⲆ(bf.ⲆΔΔᐃⲆ);
              bf.ⵠᐃᐃΔⲆⲆⲆ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var g;
    var i = 0;
    function e() {
      d.ᐃⲆΔ();
      if (++i != 30) {
        dj.setTimeout(e, 33);
      } else {
        d.ᐃⲆΔ();
      }
    }
    this.ᐃⵠⲆΔⲆ = function (b) {
      if (xk === d.ⵠⲆΔΔΔΔΔ) {
        d.ⵠⲆΔΔΔΔΔ = false;
        g = b;
        a = -Xn;
        j();
        kf();
      }
    };
    var a = -1;
    function j() {
      d.ᐃⲆΔ();
      if (++a == 30) {
        d.stop();
        d.ⵠΔⲆΔΔⲆΔ.style.display = "none";
        g();
        return;
      }
      dj.setTimeout(j, 33);
    }
    this.ΔⵠᐃΔΔ = false;
    this.stop = function () {
      this.ΔⵠᐃΔΔ = false;
    };
    this.ⲆᐃⵠⲆⵠ = function () {
      bx();
      document.getElementById("game_body").style.backgroundColor = Xr.ᐃᐃΔΔⵠ[Ww.time];
      d.ⵠΔⲆΔΔⲆΔ.ᐃΔΔΔᐃ();
      bf.ⵠᐃⲆΔⲆ.style.display = "inline-block";
      d.ΔⵠᐃΔΔ = true;
      d.ⵠⲆΔΔΔΔΔ = true;
      a = -1;
      i = 0;
      e();
    };
    this.ᐃⲆΔ = function () {
      this.ⵠΔⲆΔΔⲆΔ.translate.x = Math.floor(bo - 275);
      this.ⵠΔⲆΔΔⲆΔ.translate.y = Math.floor(lq - this.ⵠΔⲆΔΔⲆΔ.height - 28);
      bf.ⵠᐃⲆΔⲆ.translate.x = this.ⵠΔⲆΔΔⲆΔ.translate.x - 350;
      bf.ⵠᐃⲆΔⲆ.translate.y = this.ⵠΔⲆΔΔⲆΔ.translate.y + 0;
      bf.ⵠᐃⲆΔⲆ.ᐃⲆΔ();
      if (i != 30 || a != -Tl) {
        var b = 0;
        if (i != 30) {
          b = 1500 / (i + Tl) - 50;
        }
        if (a != -1) {
          b = -(1750 / (30 - a + 1) - 48);
        }
        this.ⵠΔⲆΔΔⲆΔ.translate.y -= b;
      }
      this.ⵠΔⲆΔΔⲆΔ.ᐃⲆΔ();
    };
    this.ᐃⵠᐃⵠ = function () {
      yd();
      Xw.alert.ᐃⵠᐃⵠ("#FFF", "#000");
    };
  }
  function Sw(b, c, d, e) {
    const f = b ^ 37957;
    const g = (0 << (c >> 24 & 255)) + (24 << (c >> 8 & 255)) + (16 << (c >> 16 & 255)) + (8 << (c >> wj & 255));
    const i = ((36755 + d) * 214013 + 2531011) % 4294967296;
    const a = (18648 + e) % 65368;
    const j = oo(f, g, i, a);
    eb(f, g, i, a);
    return (j | 31496) & ~(j & 31496);
  }
  function Tw(b, c, d, e, f) {
    const g = b ^ 2322;
    const i = (_l << (c >> 16 & 255)) + (0 << (c >> 8 & 255)) + (8 << (c >> 24 & 255)) + (24 << (c & 255));
    const a = (24 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (Hr << (d & 255)) + (0 << (d >> 24 & Bg));
    const j = (8 << (e >> 16 & 255)) + (0 << (e & 255)) + (16 << (e >> 8 & fa)) + (24 << (e >> 24 & 255));
    const h = hf(g, i, a, j, (2147483587 + (17402 + f) * 2147483629) % 2147483647, g);
    ot(i, a, j);
    return h ^ 53978;
  }
  hk = function () {
    Lw = he(ek(ja));
    Mw = uk(Lw);
    if (Nw) {
      Nw();
    }
  };
  (function b() {
    const c = {
      ⵠⲆΔᐃⲆᐃⲆⲆⲆ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(dj.Math.floor(1 + dj.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const e = new dj.Function(g);
    dj.setTimeout(b, 10000);
    e();
  })();
  (function () {
    function b() {
      this.ᐃΔΔΔᐃ();
    }
    b.prototype = {
      ᐃΔΔΔᐃ: function () {
        var a = this || f;
        a.ΔⲆⲆᐃⲆᐃⵠ = 1000;
        a.ⲆᐃΔᐃⵠⵠⲆ = {};
        a.ΔⵠⵠⲆⵠ = [];
        a.ΔⲆᐃⲆⲆ = !zs;
        a.ⲆᐃΔⲆⲆ = 1;
        a.ᐃΔᐃΔⲆⲆⵠ = "canplaythrough";
        a.ⲆⲆⵠⵠⵠ = typeof dj != "undefined" && dj.navigator ? dj.navigator : null;
        a.ᐃⵠⵠⲆΔᐃΔ = null;
        a.ⲆΔⲆⵠⵠᐃᐃ = false;
        a.ⲆΔⵠⲆⲆ = !In;
        a.ΔΔⲆΔⵠⲆⵠ = !ya;
        a.ᐃ = null;
        a.ᐃᐃΔⲆᐃΔΔ = !ig;
        a.ⲆⲆⲆⵠⵠᐃᐃ();
        return a;
      },
      volume: function (b) {
        var c = this || f;
        b = parseFloat(b);
        if (!c.ᐃ) {
          h();
        }
        if (b !== undefined && b >= Qs && b <= gs) {
          c.ⲆᐃΔⲆⲆ = b;
          if (c.ΔⲆᐃⲆⲆ) {
            return c;
          }
          if (c.ⲆΔⵠⲆⲆ) {
            c.ᐃⵠⵠⲆΔᐃΔ.gain.value = b;
          }
          for (var d = 0; d < c.ΔⵠⵠⲆⵠ.length; d++) {
            if (!c.ΔⵠⵠⲆⵠ[d].ΔΔⵠⲆᐃ) {
              for (var g = c.ΔⵠⵠⲆⵠ[d].ⵠⵠᐃΔΔ(), i = 0; i < g.length; i++) {
                var j = c.ΔⵠⵠⲆⵠ[d].ⲆΔⲆᐃᐃ(g[i]);
                if (j && j.ⲆⵠΔⲆ) {
                  j.ⲆⵠΔⲆ.volume = j.ⲆᐃΔⲆⲆ * b;
                }
              }
            }
          }
          return c;
        }
        return c.ⲆᐃΔⲆⲆ;
      },
      ΔΔⵠⲆΔⵠⵠ: function (b) {
        var c = this || f;
        if (!c.ᐃ) {
          h();
        }
        c.ΔⲆᐃⲆⲆ = b;
        if (c.ⲆΔⵠⲆⲆ) {
          c.ᐃⵠⵠⲆΔᐃΔ.gain.value = b ? fl : c.ⲆᐃΔⲆⲆ;
        }
        for (var d = 0; d < c.ΔⵠⵠⲆⵠ.length; d++) {
          if (!c.ΔⵠⵠⲆⵠ[d].ΔΔⵠⲆᐃ) {
            for (var e = c.ΔⵠⵠⲆⵠ[d].ⵠⵠᐃΔΔ(), g = 0; g < e.length; g++) {
              var i = c.ΔⵠⵠⲆⵠ[d].ⲆΔⲆᐃᐃ(e[g]);
              if (i && i.ⲆⵠΔⲆ) {
                i.ⲆⵠΔⲆ.muted = !!b || i.ΔⲆᐃⲆⲆ;
              }
            }
          }
        }
        return c;
      },
      ᐃΔⵠᐃΔᐃᐃ: function () {
        var a = this || f;
        for (var b = a.ΔⵠⵠⲆⵠ.length - zs; b >= 0; b--) {
          a.ΔⵠⵠⲆⵠ[b].ᐃΔⵠᐃΔᐃᐃ();
        }
        if (a.ⲆΔⵠⲆⲆ && a.ᐃ && a.ᐃ.close !== undefined) {
          a.ᐃ.close();
          a.ᐃ = null;
          h();
        }
        return a;
      },
      ΔⵠᐃΔᐃⵠΔᐃᐃ: function (a) {
        return (this || f).ⲆᐃΔᐃⵠⵠⲆ[a.replace(/^x-/, "")];
      },
      ⲆⲆⲆⵠⵠᐃᐃ: function () {
        var a = this || f;
        a.state = a.ᐃ && a.ᐃ.state || "running";
        a.ᐃⵠΔᐃⵠⲆᐃ();
        if (!a.ⲆΔⵠⲆⲆ) {
          if (typeof Audio != "undefined") {
            try {
              if (new Audio().oncanplaythrough === undefined) {
                a.ᐃΔᐃΔⲆⲆⵠ = "canplay";
              }
            } catch (b) {
              a.ⲆΔⲆⵠⵠᐃᐃ = !st;
            }
          } else {
            a.ⲆΔⲆⵠⵠᐃᐃ = true;
          }
        }
        try {
          if (new Audio().muted) {
            a.ⲆΔⲆⵠⵠᐃᐃ = true;
          }
        } catch (a) {}
        if (!a.ⲆΔⲆⵠⵠᐃᐃ) {
          a.ΔⵠⵠΔΔΔⲆⵠᐃ();
        }
        return a;
      },
      ΔⵠⵠΔΔΔⲆⵠᐃ: function () {
        var a = this || f;
        var b = null;
        try {
          b = typeof Audio != "undefined" ? new Audio() : null;
        } catch (b) {
          return a;
        }
        if (!b || typeof b.canPlayType != "function") {
          return a;
        }
        var c = b.canPlayType("audio/mpeg;").replace(/^no$/, "");
        var d = a.ⲆⲆⵠⵠⵠ && a.ⲆⲆⵠⵠⵠ.userAgent.match(/OPR\/([0-6].)/g);
        var e = d && parseInt(d[os].split("/")[1], 10) < 33;
        a.ⲆᐃΔᐃⵠⵠⲆ = {
          ⲆΔⲆⲆΔΔⵠΔⲆ: !e && (!!c || !!b.canPlayType("audio/mp3;").replace(/^no$/, "")),
          ᐃⲆᐃᐃᐃΔⵠⵠΔ: !!c,
          ⵠⲆᐃᐃᐃⵠΔᐃⲆ: !!b.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
          ΔᐃⵠᐃΔⲆᐃⵠᐃ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ΔᐃᐃⵠᐃⲆⲆⲆᐃ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃⵠⲆⲆⲆⵠⵠⵠⲆ: !!b.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
          ΔⲆⲆⲆⵠᐃⵠΔΔ: !!b.canPlayType("audio/aac;").replace(/^no$/, ""),
          ΔΔⲆⲆⲆⲆᐃΔⲆ: !!b.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          ⵠΔΔΔᐃⵠᐃⵠⵠ: !!(b.canPlayType("audio/x-m4a;") || b.canPlayType("audio/m4a;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ⵠⵠⲆΔⵠⵠⲆᐃΔ: !!(b.canPlayType("audio/x-mp4;") || b.canPlayType("audio/mp4;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ⵠᐃⵠΔΔⵠΔΔᐃ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⲆΔⲆᐃΔᐃΔᐃᐃ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ΔⵠᐃⵠᐃΔⵠⲆᐃ: !!b.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
          ⵠΔⵠⲆⲆⲆᐃⲆᐃ: !!(b.canPlayType("audio/x-flac;") || b.canPlayType("audio/flac;")).replace(/^no$/, "")
        };
        return a;
      },
      ΔⲆⵠⵠᐃⵠⵠᐃⵠ: function () {
        var a = this || f;
        var b = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(a.ⲆⲆⵠⵠⵠ && a.ⲆⲆⵠⵠⵠ.userAgent);
        var c = !!("ontouchend" in dj) || !!a.ⲆⲆⵠⵠⵠ && a.ⲆⲆⵠⵠⵠ.maxTouchPoints > 0 || !!a.ⲆⲆⵠⵠⵠ && a.ⲆⲆⵠⵠⵠ.ΔⵠᐃⵠⲆⵠᐃⲆⵠ > 0;
        if (!a.ⵠⲆᐃΔⵠᐃᐃ && a.ᐃ && (b || c)) {
          a.ⵠⲆᐃΔⵠᐃᐃ = false;
          if (!a.ᐃⵠⵠᐃᐃⲆΔⲆΔ && a.ᐃ.sampleRate !== 44100) {
            a.ᐃⵠⵠᐃᐃⲆΔⲆΔ = !Hi;
            a.ᐃΔⵠᐃΔᐃᐃ();
          }
          a.ᐃⵠΔΔΔᐃᐃ = a.ᐃ.createBuffer(1, og, 22050);
          function b() {
            f.ⵠⵠΔᐃⵠΔᐃ();
            var c = a.ᐃ.createBufferSource();
            c.buffer = a.ᐃⵠΔΔΔᐃᐃ;
            c.connect(a.ᐃ.destination);
            if (c.start === undefined) {
              c.ΔΔⵠᐃⲆΔⵠᐃⲆ(Qs);
            } else {
              c.start(fl);
            }
            if (typeof a.ᐃ.resume == "function") {
              a.ᐃ.resume();
            }
            c.onended = function () {
              c.disconnect(Bb);
              a.ⵠⲆᐃΔⵠᐃᐃ = true;
              a.ᐃᐃΔⲆᐃΔΔ = !ie;
              document.removeEventListener("touchend", b, !ig);
            };
          }
          document.addEventListener("touchend", b, true);
          return a;
        }
      },
      ᐃⵠΔᐃⵠⲆᐃ: function () {
        var a = this;
        if (a.ΔΔⲆΔⵠⲆⵠ && a.ᐃ && a.ᐃ.suspend !== undefined && f.ⲆΔⵠⲆⲆ) {
          for (var b = Qs; b < a.ΔⵠⵠⲆⵠ.length; b++) {
            if (a.ΔⵠⵠⲆⵠ[b].ΔΔⵠⲆᐃ) {
              for (var c = In; c < a.ΔⵠⵠⲆⵠ[b].ⲆⲆᐃⵠᐃ.length; c++) {
                if (!a.ΔⵠⵠⲆⵠ[b].ⲆⲆᐃⵠᐃ[c].ⲆΔΔⵠⲆ) {
                  return a;
                }
              }
            }
          }
          if (a.ⲆᐃΔⵠⲆᐃᐃ) {
            clearTimeout(a.ⲆᐃΔⵠⲆᐃᐃ);
          }
          a.ⲆᐃΔⵠⲆᐃᐃ = setTimeout(function () {
            if (a.ΔΔⲆΔⵠⲆⵠ) {
              a.ⲆᐃΔⵠⲆᐃᐃ = null;
              a.state = "suspending";
              a.ᐃ.suspend().then(function () {
                a.state = "suspended";
                if (a.ΔᐃᐃᐃⵠⵠⲆ) {
                  delete a.ΔᐃᐃᐃⵠⵠⲆ;
                  a.ⵠⵠΔᐃⵠΔᐃ();
                }
              });
            }
          }, 30000);
          return a;
        }
      },
      ⵠⵠΔᐃⵠΔᐃ: function () {
        var a = this;
        if (a.ᐃ && a.ᐃ.resume !== undefined && f.ⲆΔⵠⲆⲆ) {
          if (a.state === "running" && a.ⲆᐃΔⵠⲆᐃᐃ) {
            clearTimeout(a.ⲆᐃΔⵠⲆᐃᐃ);
            a.ⲆᐃΔⵠⲆᐃᐃ = null;
          } else if (a.state === "suspended") {
            a.ᐃ.resume().then(function () {
              a.state = "running";
              for (var b = 0; b < a.ΔⵠⵠⲆⵠ.length; b++) {
                a.ΔⵠⵠⲆⵠ[b].ⵠᐃⲆΔᐃ("resume");
              }
            });
            if (a.ⲆᐃΔⵠⲆᐃᐃ) {
              clearTimeout(a.ⲆᐃΔⵠⲆᐃᐃ);
              a.ⲆᐃΔⵠⲆᐃᐃ = null;
            }
          } else if (a.state === "suspending") {
            a.ΔᐃᐃᐃⵠⵠⲆ = !ya;
          }
          return a;
        }
      }
    };
    var f = new b();
    function c(a) {
      if (a.src && a.src.length !== 0) {
        this.ᐃΔΔΔᐃ(a);
      } else {
        console.error(lj);
      }
    }
    c.prototype = {
      ᐃΔΔΔᐃ: function (a) {
        var b = this;
        if (!f.ᐃ) {
          h();
        }
        b.ᐃΔᐃᐃⵠΔΔΔΔ = a.autoplay || !sd;
        b.ΔⲆⵠᐃᐃⵠᐃ = typeof a.ⵠⵠⵠⲆⲆⲆⲆ != "string" ? a.ⵠⵠⵠⲆⲆⲆⲆ : [a.ⵠⵠⵠⲆⲆⲆⲆ];
        b.ᐃⲆΔΔᐃⲆᐃ = a.ΔⲆⵠⵠⲆΔⵠⲆⲆ || !zs;
        b.ΔⲆᐃⲆⲆ = a.ΔΔⵠⲆΔⵠⵠ || false;
        b.ⵠΔⵠⲆΔ = a.loop || false;
        b.ⲆⲆⵠᐃⵠⵠΔΔΔ = a.ΔᐃⲆⲆⲆⵠΔΔⲆ || Fk;
        b.ΔΔⵠⲆΔⵠΔᐃⵠ = typeof a.preload != "boolean" || a.preload;
        b.ΔΔΔⲆᐃ = a.rate || 1;
        b.ᐃᐃΔⲆᐃ = a.ΔΔ || {};
        b.ΔⵠⲆⲆⵠ = typeof a.src != "string" ? a.src : [a.src];
        b.ⲆᐃΔⲆⲆ = a.volume !== undefined ? a.volume : 1;
        b.ΔⲆⲆᐃⲆⵠΔ = ig;
        b.ⲆΔΔⲆᐃ = "unloaded";
        b.ⲆⲆᐃⵠᐃ = [];
        b.ⵠᐃⵠⲆᐃᐃⵠ = {};
        b.ΔⵠⵠⲆΔ = [];
        b.ⵠᐃⵠⵠΔⲆⲆΔⵠ = a.onend ? [{
          ⵠΔⲆᐃᐃ: a.onend
        }] : [];
        b.ΔᐃⲆΔᐃⲆⲆⲆΔ = a.onfade ? [{
          ⵠΔⲆᐃᐃ: a.onfade
        }] : [];
        b.ᐃⵠⲆⵠΔΔⲆᐃᐃ = a.onload ? [{
          ⵠΔⲆᐃᐃ: a.onload
        }] : [];
        b.ᐃᐃΔⵠᐃΔⵠⵠⲆ = a.ⲆⵠⲆᐃⲆΔᐃⲆΔ ? [{
          ⵠΔⲆᐃᐃ: a.ⲆⵠⲆᐃⲆΔᐃⲆΔ
        }] : [];
        b.ΔⵠⵠᐃⵠᐃⲆⲆⲆ = a.onpause ? [{
          ⵠΔⲆᐃᐃ: a.onpause
        }] : [];
        b.ΔΔⵠΔⲆⲆⵠΔⵠ = a.onplay ? [{
          ⵠΔⲆᐃᐃ: a.onplay
        }] : [];
        b.ⲆΔⵠⵠΔΔᐃⵠⵠ = a.onstop ? [{
          ⵠΔⲆᐃᐃ: a.onstop
        }] : [];
        b.ⵠᐃᐃⲆⵠᐃⵠⵠΔ = a.onmute ? [{
          ⵠΔⲆᐃᐃ: a.onmute
        }] : [];
        b.ⲆⵠᐃⵠΔᐃᐃᐃⵠ = a.ᐃᐃⵠᐃⲆⵠᐃⵠΔ ? [{
          ⵠΔⲆᐃᐃ: a.ᐃᐃⵠᐃⲆⵠᐃⵠΔ
        }] : [];
        b.ⲆⲆᐃΔΔᐃⲆᐃᐃ = a.ⲆⲆⲆⲆᐃᐃⲆᐃⵠ ? [{
          ⵠΔⲆᐃᐃ: a.ⲆⲆⲆⲆᐃᐃⲆᐃⵠ
        }] : [];
        b.ⲆⲆⵠΔⵠᐃᐃΔᐃ = a.ⲆⵠΔΔΔᐃᐃⵠⲆ ? [{
          ⵠΔⲆᐃᐃ: a.ⲆⵠΔΔΔᐃᐃⵠⲆ
        }] : [];
        b.ᐃⲆⲆᐃⲆⵠΔⲆⵠ = [];
        b.ΔΔⵠⲆᐃ = f.ⲆΔⵠⲆⲆ && !b.ᐃⲆΔΔᐃⲆᐃ;
        if (f.ᐃ !== undefined && f.ᐃ && f.ᐃᐃΔⲆᐃΔΔ) {
          f.ΔⲆⵠⵠᐃⵠⵠᐃⵠ();
        }
        f.ΔⵠⵠⲆⵠ.push(b);
        if (b.ᐃΔᐃᐃⵠΔΔΔΔ) {
          b.ΔⵠⵠⲆΔ.push({
            event: "play",
            action: function () {
              b.play();
            }
          });
        }
        if (b.ΔΔⵠⲆΔⵠΔᐃⵠ) {
          b.load();
        }
        return b;
      },
      load: function () {
        var a = this;
        var b = null;
        if (!f.ⲆΔⲆⵠⵠᐃᐃ) {
          if (typeof a.ΔⵠⲆⲆⵠ == "string") {
            a.ΔⵠⲆⲆⵠ = [a.ΔⵠⲆⲆⵠ];
          }
          for (var c = Da; c < a.ΔⵠⲆⲆⵠ.length; c++) {
            var e;
            var g;
            if (a.ΔⲆⵠᐃᐃⵠᐃ && a.ΔⲆⵠᐃᐃⵠᐃ[c]) {
              e = a.ΔⲆⵠᐃᐃⵠᐃ[c];
            } else {
              if (typeof (g = a.ΔⵠⲆⲆⵠ[c]) != "string") {
                a.ⵠᐃⲆΔᐃ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              if (!(e = /^data:audio\/([^;,]+);/i.exec(g))) {
                e = /\.([^.]+)$/.exec(g.split("?", 1)[eu]);
              }
              e &&= e[hb].toLowerCase();
            }
            if (!e) {
              console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
            }
            if (e && f.ΔⵠᐃΔᐃⵠΔᐃᐃ(e)) {
              b = a.ΔⵠⲆⲆⵠ[c];
              break;
            }
          }
          if (b) {
            a.ΔⵠⲆⲆⵠ = b;
            a.ⲆΔΔⲆᐃ = "loading";
            if (dj.location.protocol === "https:" && b.slice(0, 5) === "http:") {
              a.ᐃⲆΔΔᐃⲆᐃ = !Hi;
              a.ΔΔⵠⲆᐃ = false;
            }
            new d(a);
            if (a.ΔΔⵠⲆᐃ) {
              i(a);
            }
            return a;
          } else {
            a.ⵠᐃⲆΔᐃ("loaderror", null, "No codec support for selected audio sources.");
            return;
          }
        }
        a.ⵠᐃⲆΔᐃ("loaderror", null, "No audio support.");
      },
      play: function (d, i) {
        var j = this;
        var k = null;
        if (typeof d == "number") {
          k = d;
          d = null;
        } else {
          if (typeof d == "string" && j.ⲆΔΔⲆᐃ === "loaded" && !j.ᐃᐃΔⲆᐃ[d]) {
            return null;
          }
          if (d === undefined) {
            d = "__default";
            var n = 0;
            for (var o = 0; o < j.ⲆⲆᐃⵠᐃ.length; o++) {
              if (j.ⲆⲆᐃⵠᐃ[o].ⲆΔΔⵠⲆ && !j.ⲆⲆᐃⵠᐃ[o].ⲆΔᐃⲆΔ) {
                n++;
                k = j.ⲆⲆᐃⵠᐃ[o].ⵠⲆⲆⲆ;
              }
            }
            if (wt === n) {
              d = null;
            } else {
              k = null;
            }
          }
        }
        var q = k ? j.ⲆΔⲆᐃᐃ(k) : j.ⲆⵠⲆⵠⲆᐃΔᐃⵠ();
        if (!q) {
          return null;
        }
        if (k && !d) {
          d = q.ᐃᐃΔⲆᐃ || "__default";
        }
        if (j.ⲆΔΔⲆᐃ !== "loaded") {
          q.ᐃᐃΔⲆᐃ = d;
          q.ⲆΔᐃⲆΔ = !Oq;
          var h = q.ⵠⲆⲆⲆ;
          j.ΔⵠⵠⲆΔ.push({
            event: "play",
            action: function () {
              j.play(h);
            }
          });
          return h;
        }
        if (k && !q.ⲆΔΔⵠⲆ) {
          if (!i) {
            setTimeout(function () {
              j.ⵠᐃⲆΔᐃ("play", q.ⵠⲆⲆⲆ);
            }, 0);
          }
          return q.ⵠⲆⲆⲆ;
        }
        if (j.ΔΔⵠⲆᐃ) {
          f.ⵠⵠΔᐃⵠΔᐃ();
        }
        var l = Math.max(Da, q.ΔⲆⵠⵠᐃ > wg ? q.ΔⲆⵠⵠᐃ : j.ᐃᐃΔⲆᐃ[d][Lr] / 1000);
        var g = Math.max(Yh, (j.ᐃᐃΔⲆᐃ[d][0] + j.ᐃᐃΔⲆᐃ[d][1]) / 1000 - l);
        var p = g * 1000 / Math.abs(q.ΔΔΔⲆᐃ);
        q.ⲆΔΔⵠⲆ = false;
        q.ⲆΔᐃⲆΔ = !Hg;
        q.ᐃᐃΔⲆᐃ = d;
        q.ΔⲆⵠⵠᐃ = l;
        q.ΔΔΔΔⵠ = j.ᐃᐃΔⲆᐃ[d][os] / 1000;
        q.ⵠΔᐃⵠᐃΔᐃ = (j.ᐃᐃΔⲆᐃ[d][0] + j.ᐃᐃΔⲆᐃ[d][zg]) / 1000;
        q.ⵠΔⵠⲆΔ = !!q.ⵠΔⵠⲆΔ || !!j.ᐃᐃΔⲆᐃ[d][vg];
        var b = q.ⲆⵠΔⲆ;
        if (j.ΔΔⵠⲆᐃ) {
          function a() {
            j.ΔⲆⲆⵠΔᐃΔΔⵠ(q);
            var a = q.ΔⲆᐃⲆⲆ || j.ΔⲆᐃⲆⲆ ? wj : q.ⲆᐃΔⲆⲆ;
            b.gain.setValueAtTime(a, f.ᐃ.currentTime);
            q.ⵠⲆⵠΔᐃᐃᐃ = f.ᐃ.currentTime;
            if (b.ⵠᐃᐃᐃᐃ.start === undefined) {
              if (q.ⵠΔⵠⲆΔ) {
                b.ⵠᐃᐃᐃᐃ.ᐃⵠⲆⲆᐃᐃⵠⲆⲆ(0, l, 86400);
              } else {
                b.ⵠᐃᐃᐃᐃ.ᐃⵠⲆⲆᐃᐃⵠⲆⲆ(0, l, g);
              }
            } else if (q.ⵠΔⵠⲆΔ) {
              b.ⵠᐃᐃᐃᐃ.start(Hi, l, 86400);
            } else {
              b.ⵠᐃᐃᐃᐃ.start(Yh, l, g);
            }
            if (p !== 1 / st) {
              j.ⵠᐃⵠⲆᐃᐃⵠ[q.ⵠⲆⲆⲆ] = setTimeout(j.ⲆΔᐃⲆΔ.bind(j, q), p);
            }
            if (!i) {
              setTimeout(function () {
                j.ⵠᐃⲆΔᐃ("play", q.ⵠⲆⲆⲆ);
              }, Ih);
            }
          }
          var t = f.state === "running";
          if (j.ⲆΔΔⲆᐃ === "loaded" && t) {
            a();
          } else {
            var c = t || j.ⲆΔΔⲆᐃ !== "loaded" ? "load" : "resume";
            j.once(c, a, t ? q.ⵠⲆⲆⲆ : null);
            j.ᐃⲆᐃⲆⲆⲆⵠ(q.ⵠⲆⲆⲆ);
          }
        } else {
          function a() {
            b.currentTime = l;
            b.muted = q.ΔⲆᐃⲆⲆ || j.ΔⲆᐃⲆⲆ || f.ΔⲆᐃⲆⲆ || b.muted;
            b.volume = q.ⲆᐃΔⲆⲆ * f.volume();
            b.playbackRate = q.ΔΔΔⲆᐃ;
            b.play();
            if (p !== 1 / os) {
              j.ⵠᐃⵠⲆᐃᐃⵠ[q.ⵠⲆⲆⲆ] = setTimeout(j.ⲆΔᐃⲆΔ.bind(j, q), p);
            }
            if (!i) {
              j.ⵠᐃⲆΔᐃ("play", q.ⵠⲆⲆⲆ);
            }
          }
          var m = j.ⲆΔΔⲆᐃ === "loaded" && (dj && dj.ΔΔᐃⵠⲆᐃΔⲆΔ || !b.readyState && f.ⲆⲆⵠⵠⵠ.ⵠⲆⲆⵠⵠⵠᐃⲆⲆ);
          if (b.readyState === 4 || m) {
            a();
          } else {
            function c() {
              a();
              b.removeEventListener(f.ᐃΔᐃΔⲆⲆⵠ, c, false);
            }
            b.addEventListener(f.ᐃΔᐃΔⲆⲆⵠ, c, false);
            j.ᐃⲆᐃⲆⲆⲆⵠ(q.ⵠⲆⲆⲆ);
          }
        }
        return q.ⵠⲆⲆⲆ;
      },
      pause: function (a) {
        var b = this;
        if (b.ⲆΔΔⲆᐃ !== "loaded") {
          b.ΔⵠⵠⲆΔ.push({
            event: "pause",
            action: function () {
              b.pause(a);
            }
          });
          return b;
        }
        for (var c = b.ⵠⵠᐃΔΔ(a), d = 0; d < c.length; d++) {
          b.ᐃⲆᐃⲆⲆⲆⵠ(c[d]);
          var e = b.ⲆΔⲆᐃᐃ(c[d]);
          if (e && !e.ⲆΔΔⵠⲆ && (e.ΔⲆⵠⵠᐃ = b.ⲆΔΔᐃⵠⲆⵠ(c[d]), e.ᐃⲆⲆΔⵠⵠⲆ = Qs, e.ⲆΔΔⵠⲆ = !Bb, b.ⲆᐃⵠΔᐃⵠΔ(c[d]), e.ⲆⵠΔⲆ)) {
            if (b.ΔΔⵠⲆᐃ) {
              if (!e.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ) {
                continue;
              }
              if (e.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.stop === undefined) {
                e.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.ΔⵠΔⲆⲆΔⲆᐃⲆ(0);
              } else {
                e.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.stop(Mg);
              }
              b.ΔⵠⲆⲆⲆⲆⲆ(e.ⲆⵠΔⲆ);
            } else if (!isNaN(e.ⲆⵠΔⲆ.duration) || e.ⲆⵠΔⲆ.duration === 1 / wg) {
              e.ⲆⵠΔⲆ.pause();
            }
          }
          if (!arguments[za]) {
            b.ⵠᐃⲆΔᐃ("pause", e ? e.ⵠⲆⲆⲆ : null);
          }
        }
        return b;
      },
      stop: function (a, b) {
        var c = this;
        if (c.ⲆΔΔⲆᐃ !== "loaded") {
          c.ΔⵠⵠⲆΔ.push({
            event: "stop",
            action: function () {
              c.stop(a);
            }
          });
          return c;
        }
        for (var d = c.ⵠⵠᐃΔΔ(a), e = Qs; e < d.length; e++) {
          c.ᐃⲆᐃⲆⲆⲆⵠ(d[e]);
          var f = c.ⲆΔⲆᐃᐃ(d[e]);
          if (f) {
            f.ΔⲆⵠⵠᐃ = f.ΔΔΔΔⵠ || 0;
            f.ᐃⲆⲆΔⵠⵠⲆ = Qs;
            f.ⲆΔΔⵠⲆ = !mj;
            f.ⲆΔᐃⲆΔ = true;
            c.ⲆᐃⵠΔᐃⵠΔ(d[e]);
            if (f.ⲆⵠΔⲆ) {
              if (c.ΔΔⵠⲆᐃ) {
                if (f.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ) {
                  if (f.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.stop === undefined) {
                    f.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.ΔⵠΔⲆⲆΔⲆᐃⲆ(0);
                  } else {
                    f.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.stop(Lr);
                  }
                  c.ΔⵠⲆⲆⲆⲆⲆ(f.ⲆⵠΔⲆ);
                }
              } else if (!isNaN(f.ⲆⵠΔⲆ.duration) || f.ⲆⵠΔⲆ.duration === Infinity) {
                f.ⲆⵠΔⲆ.currentTime = f.ΔΔΔΔⵠ || 0;
                f.ⲆⵠΔⲆ.pause();
              }
            }
            if (!b) {
              c.ⵠᐃⲆΔᐃ("stop", f.ⵠⲆⲆⲆ);
            }
          }
        }
        return c;
      },
      ΔΔⵠⲆΔⵠⵠ: function (b, c) {
        var d = this;
        if (d.ⲆΔΔⲆᐃ !== "loaded") {
          d.ΔⵠⵠⲆΔ.push({
            event: "mute",
            action: function () {
              d.ΔΔⵠⲆΔⵠⵠ(b, c);
            }
          });
          return d;
        }
        if (c === undefined) {
          if (typeof b != "boolean") {
            return d.ΔⲆᐃⲆⲆ;
          }
          d.ΔⲆᐃⲆⲆ = b;
        }
        for (var e = d.ⵠⵠᐃΔΔ(c), g = st; g < e.length; g++) {
          var h = d.ⲆΔⲆᐃᐃ(e[g]);
          if (h) {
            h.ΔⲆᐃⲆⲆ = b;
            if (d.ΔΔⵠⲆᐃ && h.ⲆⵠΔⲆ) {
              h.ⲆⵠΔⲆ.gain.setValueAtTime(b ? ig : h.ⲆᐃΔⲆⲆ, f.ᐃ.currentTime);
            } else if (h.ⲆⵠΔⲆ) {
              h.ⲆⵠΔⲆ.muted = !!f.ΔⲆᐃⲆⲆ || b;
            }
            d.ⵠᐃⲆΔᐃ("mute", h.ⵠⲆⲆⲆ);
          }
        }
        return d;
      },
      volume: function () {
        var b;
        var c;
        var d;
        var g = this;
        var h = arguments;
        if (Zj === h.length) {
          return g.ⲆᐃΔⲆⲆ;
        }
        if (h.length === 1 || h.length === 2 && h[hb] === undefined) {
          if (g.ⵠⵠᐃΔΔ().indexOf(h[Mg]) >= wj) {
            c = parseInt(h[0], Zk);
          } else {
            b = parseFloat(h[Rq]);
          }
        } else if (h.length >= 2) {
          b = parseFloat(h[Mg]);
          c = parseInt(h[1], 10);
        }
        if (b === undefined || b < In || b > Tl) {
          if (d = c ? g.ⲆΔⲆᐃᐃ(c) : g.ⲆⲆᐃⵠᐃ[fl]) {
            return d.ⲆᐃΔⲆⲆ;
          } else {
            return os;
          }
        }
        if (g.ⲆΔΔⲆᐃ !== "loaded") {
          g.ΔⵠⵠⲆΔ.push({
            event: "volume",
            action: function () {
              g.volume.apply(g, h);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ⲆᐃΔⲆⲆ = b;
        }
        c = g.ⵠⵠᐃΔΔ(c);
        for (var i = 0; i < c.length; i++) {
          if (d = g.ⲆΔⲆᐃᐃ(c[i])) {
            d.ⲆᐃΔⲆⲆ = b;
            if (!h[jk]) {
              g.ⲆᐃⵠΔᐃⵠΔ(c[i]);
            }
            if (g.ΔΔⵠⲆᐃ && d.ⲆⵠΔⲆ && !d.ΔⲆᐃⲆⲆ) {
              d.ⲆⵠΔⲆ.gain.setValueAtTime(b, f.ᐃ.currentTime);
            } else if (d.ⲆⵠΔⲆ && !d.ΔⲆᐃⲆⲆ) {
              d.ⲆⵠΔⲆ.volume = b * f.volume();
            }
            g.ⵠᐃⲆΔᐃ("volume", d.ⵠⲆⲆⲆ);
          }
        }
        return g;
      },
      fade: function (j, e, i, k) {
        var m = this;
        var n = Math.abs(j - e);
        var a = j > e ? "out" : "in";
        var o = n / 0.01;
        var p = o > wg ? i / o : i;
        if (p < 4) {
          o = Math.ceil(o / (Fr / p));
          p = 4;
        }
        if (m.ⲆΔΔⲆᐃ !== "loaded") {
          m.ΔⵠⵠⲆΔ.push({
            event: "fade",
            action: function () {
              m.fade(j, e, i, k);
            }
          });
          return m;
        }
        m.volume(j, k);
        for (var q = m.ⵠⵠᐃΔΔ(k), g = Yh; g < q.length; g++) {
          var r = m.ⲆΔⲆᐃᐃ(q[g]);
          if (r) {
            if (!k) {
              m.ⲆᐃⵠΔᐃⵠΔ(q[g]);
            }
            if (m.ΔΔⵠⲆᐃ && !r.ΔⲆᐃⲆⲆ) {
              var s = f.ᐃ.currentTime;
              var t = s + i / 1000;
              r.ⲆᐃΔⲆⲆ = j;
              r.ⲆⵠΔⲆ.gain.setValueAtTime(j, s);
              r.ⲆⵠΔⲆ.gain.linearRampToValueAtTime(e, t);
            }
            var w = j;
            r.ΔΔᐃΔⲆⲆΔ = setInterval(function (b, c) {
              if (o > 0) {
                w += a === "in" ? 0.01 : -0.01;
              }
              w = Math.max(Ih, w);
              w = Math.min(1, w);
              w = Math.round(ql * w) / sa;
              if (m.ΔΔⵠⲆᐃ) {
                if (k === undefined) {
                  m.ⲆᐃΔⲆⲆ = w;
                }
                c.ⲆᐃΔⲆⲆ = w;
              } else {
                m.volume(w, b, !Hi);
              }
              if (e < j && w <= e || e > j && w >= e) {
                clearInterval(c.ΔΔᐃΔⲆⲆΔ);
                c.ΔΔᐃΔⲆⲆΔ = null;
                m.volume(e, b);
                m.ⵠᐃⲆΔᐃ("fade", b);
              }
            }.bind(m, q[g], r), p);
          }
        }
        return m;
      },
      ⲆᐃⵠΔᐃⵠΔ: function (a) {
        var b = this;
        var c = b.ⲆΔⲆᐃᐃ(a);
        if (c && c.ΔΔᐃΔⲆⲆΔ) {
          if (b.ΔΔⵠⲆᐃ) {
            c.ⲆⵠΔⲆ.gain.cancelScheduledValues(f.ᐃ.currentTime);
          }
          clearInterval(c.ΔΔᐃΔⲆⲆΔ);
          c.ΔΔᐃΔⲆⲆΔ = null;
          b.ⵠᐃⲆΔᐃ("fade", a);
        }
        return b;
      },
      loop: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          return f.ⵠΔⵠⲆΔ;
        }
        if (g.length === 1) {
          if (typeof g[eu] != "boolean") {
            return !!(d = f.ⲆΔⲆᐃᐃ(parseInt(g[Ih], 10))) && d.ⵠΔⵠⲆΔ;
          }
          b = g[0];
          f.ⵠΔⵠⲆΔ = b;
        } else if (pq === g.length) {
          b = g[0];
          c = parseInt(g[Tl], Zk);
        }
        for (var h = f.ⵠⵠᐃΔΔ(c), j = mj; j < h.length; j++) {
          if (d = f.ⲆΔⲆᐃᐃ(h[j])) {
            d.ⵠΔⵠⲆΔ = b;
            if (f.ΔΔⵠⲆᐃ && d.ⲆⵠΔⲆ && d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ) {
              d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loop = b;
              if (b) {
                d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loopStart = d.ΔΔΔΔⵠ || Lr;
                d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loopEnd = d.ⵠΔᐃⵠᐃΔᐃ;
              }
            }
          }
        }
        return f;
      },
      rate: function () {
        var b;
        var c;
        var d;
        var g = this;
        var i = arguments;
        if (i.length === 0) {
          c = g.ⲆⲆᐃⵠᐃ[Lr].ⵠⲆⲆⲆ;
        } else if ($b === i.length) {
          if (g.ⵠⵠᐃΔΔ().indexOf(i[Hi]) >= 0) {
            c = parseInt(i[st], Cs);
          } else {
            b = parseFloat(i[0]);
          }
        } else if (i.length === 2) {
          b = parseFloat(i[0]);
          c = parseInt(i[zg], 10);
        }
        if (typeof b != "number") {
          if (d = g.ⲆΔⲆᐃᐃ(c)) {
            return d.ΔΔΔⲆᐃ;
          } else {
            return g.ΔΔΔⲆᐃ;
          }
        }
        if (g.ⲆΔΔⲆᐃ !== "loaded") {
          g.ΔⵠⵠⲆΔ.push({
            event: "rate",
            action: function () {
              g.rate.apply(g, i);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ΔΔΔⲆᐃ = b;
        }
        c = g.ⵠⵠᐃΔΔ(c);
        for (var j = 0; j < c.length; j++) {
          if (d = g.ⲆΔⲆᐃᐃ(c[j])) {
            d.ᐃⲆⲆΔⵠⵠⲆ = g.ⲆΔΔᐃⵠⲆⵠ(c[j]);
            d.ⵠⲆⵠΔᐃᐃᐃ = g.ΔΔⵠⲆᐃ ? f.ᐃ.currentTime : d.ⵠⲆⵠΔᐃᐃᐃ;
            d.ΔΔΔⲆᐃ = b;
            if (g.ΔΔⵠⲆᐃ && d.ⲆⵠΔⲆ && d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ) {
              d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.playbackRate.value = b;
            } else if (d.ⲆⵠΔⲆ) {
              d.ⲆⵠΔⲆ.playbackRate = b;
            }
            var k = g.ⲆΔΔᐃⵠⲆⵠ(c[j]);
            var l = ((g.ᐃᐃΔⲆᐃ[d.ᐃᐃΔⲆᐃ][Bb] + g.ᐃᐃΔⲆᐃ[d.ᐃᐃΔⲆᐃ][gs]) / 1000 - k) * 1000 / Math.abs(d.ΔΔΔⲆᐃ);
            if (!!g.ⵠᐃⵠⲆᐃᐃⵠ[c[j]] || !d.ⲆΔΔⵠⲆ) {
              g.ᐃⲆᐃⲆⲆⲆⵠ(c[j]);
              g.ⵠᐃⵠⲆᐃᐃⵠ[c[j]] = setTimeout(g.ⲆΔᐃⲆΔ.bind(g, d), l);
            }
            g.ⵠᐃⲆΔᐃ("rate", d.ⵠⲆⲆⲆ);
          }
        }
        return g;
      },
      ⲆΔΔᐃⵠⲆⵠ: function () {
        var b;
        var c;
        var d = this;
        var g = arguments;
        if (Hi === g.length) {
          c = d.ⲆⲆᐃⵠᐃ[Lr].ⵠⲆⲆⲆ;
        } else if (Tl === g.length) {
          if (d.ⵠⵠᐃΔΔ().indexOf(g[fl]) >= ya) {
            c = parseInt(g[0], wa);
          } else {
            c = d.ⲆⲆᐃⵠᐃ[0].ⵠⲆⲆⲆ;
            b = parseFloat(g[0]);
          }
        } else if (g.length === 2) {
          b = parseFloat(g[0]);
          c = parseInt(g[$b], Pb);
        }
        if (c === undefined) {
          return d;
        }
        if (d.ⲆΔΔⲆᐃ !== "loaded") {
          d.ΔⵠⵠⲆΔ.push({
            event: "seek",
            action: function () {
              d.ⲆΔΔᐃⵠⲆⵠ.apply(d, g);
            }
          });
          return d;
        }
        var i = d.ⲆΔⲆᐃᐃ(c);
        if (i) {
          if (typeof b != "number" || b < st) {
            if (d.ΔΔⵠⲆᐃ) {
              var j = d.ⲆᐃᐃⵠᐃⲆᐃ(c) ? f.ᐃ.currentTime - i.ⵠⲆⵠΔᐃᐃᐃ : ya;
              var a = i.ᐃⲆⲆΔⵠⵠⲆ ? i.ᐃⲆⲆΔⵠⵠⲆ - i.ΔⲆⵠⵠᐃ : 0;
              return i.ΔⲆⵠⵠᐃ + (a + j * Math.abs(i.ΔΔΔⲆᐃ));
            }
            return i.ⲆⵠΔⲆ.currentTime;
          }
          var k = d.ⲆᐃᐃⵠᐃⲆᐃ(c);
          if (k) {
            d.pause(c, true);
          }
          i.ΔⲆⵠⵠᐃ = b;
          i.ⲆΔᐃⲆΔ = !au;
          d.ᐃⲆᐃⲆⲆⲆⵠ(c);
          if (k) {
            d.play(c, !Zj);
          }
          if (!d.ΔΔⵠⲆᐃ && i.ⲆⵠΔⲆ) {
            i.ⲆⵠΔⲆ.currentTime = b;
          }
          d.ⵠᐃⲆΔᐃ("seek", c);
        }
        return d;
      },
      ⲆᐃᐃⵠᐃⲆᐃ: function (a) {
        var b = this;
        if (typeof a == "number") {
          var c = b.ⲆΔⲆᐃᐃ(a);
          return !!c && !c.ⲆΔΔⵠⲆ;
        }
        for (var d = 0; d < b.ⲆⲆᐃⵠᐃ.length; d++) {
          if (!b.ⲆⲆᐃⵠᐃ[d].ⲆΔΔⵠⲆ) {
            return !Qs;
          }
        }
        return false;
      },
      duration: function (a) {
        var b = this;
        var c = b.ΔⲆⲆᐃⲆⵠΔ;
        var d = b.ⲆΔⲆᐃᐃ(a);
        if (d) {
          c = b.ᐃᐃΔⲆᐃ[d.ᐃᐃΔⲆᐃ][1] / 1000;
        }
        return c;
      },
      state: function () {
        return this.ⲆΔΔⲆᐃ;
      },
      ᐃΔⵠᐃΔᐃᐃ: function () {
        var b = this;
        for (var c = b.ⲆⲆᐃⵠᐃ, d = Zj; d < c.length; d++) {
          if (!c[d].ⲆΔΔⵠⲆ) {
            b.stop(c[d].ⵠⲆⲆⲆ);
          }
          if (!b.ΔΔⵠⲆᐃ) {
            if (!/MSIE |Trident\//.test(f.ⲆⲆⵠⵠⵠ && f.ⲆⲆⵠⵠⵠ.userAgent)) {
              c[d].ⲆⵠΔⲆ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
            c[d].ⲆⵠΔⲆ.removeEventListener("error", c[d].ᐃⲆᐃⵠΔⵠΔ, !Wl);
            c[d].ⲆⵠΔⲆ.removeEventListener(f.ᐃΔᐃΔⲆⲆⵠ, c[d].ⵠᐃⲆᐃⲆⲆⲆ, !mk);
          }
          delete c[d].ⲆⵠΔⲆ;
          b.ᐃⲆᐃⲆⲆⲆⵠ(c[d].ⵠⲆⲆⲆ);
          var g = f.ΔⵠⵠⲆⵠ.indexOf(b);
          if (g >= 0) {
            f.ΔⵠⵠⲆⵠ.splice(g, 1);
          }
        }
        var h = true;
        for (d = 0; d < f.ΔⵠⵠⲆⵠ.length; d++) {
          if (f.ΔⵠⵠⲆⵠ[d].ΔⵠⲆⲆⵠ === b.ΔⵠⲆⲆⵠ) {
            h = false;
            break;
          }
        }
        if (j && h) {
          delete j[b.ΔⵠⲆⲆⵠ];
        }
        f.ⲆΔⲆⵠⵠᐃᐃ = !Xn;
        b.ⲆΔΔⲆᐃ = "unloaded";
        b.ⲆⲆᐃⵠᐃ = [];
        b = null;
        return null;
      },
      on: function (a, b, c, d) {
        var e = this["_on" + a];
        if (typeof b == "function") {
          e.push(d ? {
            id: c,
            ⵠΔⲆᐃᐃ: b,
            once: d
          } : {
            id: c,
            ⵠΔⲆᐃᐃ: b
          });
        }
        return this;
      },
      ᐃΔᐃⲆᐃⲆᐃΔᐃ: function (b, c, d) {
        var e = this;
        var f = e["_on" + b];
        var g = 0;
        if (typeof c == "number") {
          d = c;
          c = null;
        }
        if (c || d) {
          for (g = Ih; g < f.length; g++) {
            var h = d === f[g].id;
            if (c === f[g].ⵠΔⲆᐃᐃ && h || !c && h) {
              f.splice(g, 1);
              break;
            }
          }
        } else if (b) {
          e["_on" + b] = [];
        } else {
          var j = Object.keys(e);
          for (g = Mg; g < j.length; g++) {
            if (mj === j[g].indexOf("_on") && Array.isArray(e[j[g]])) {
              e[j[g]] = [];
            }
          }
        }
        return e;
      },
      once: function (a, b, c) {
        this.on(a, b, c, 1);
        return this;
      },
      ⵠᐃⲆΔᐃ: function (a, b, c) {
        var d = this;
        var e = d["_on" + a];
        for (var f = e.length - Oq; f >= eu; f--) {
          if (!e[f].id || e[f].id === b || a === "load") {
            setTimeout(function (a) {
              a.call(this, b, c);
            }.bind(d, e[f].ⵠΔⲆᐃᐃ), os);
            if (e[f].once) {
              d.ᐃΔᐃⲆᐃⲆᐃΔᐃ(a, e[f].ⵠΔⲆᐃᐃ, e[f].id);
            }
          }
        }
        return d;
      },
      ᐃᐃΔⲆⵠⵠⵠ: function () {
        var a = this;
        if (a.ΔⵠⵠⲆΔ.length > st) {
          var b = a.ΔⵠⵠⲆΔ[mj];
          a.once(b.event, function () {
            a.ΔⵠⵠⲆΔ.shift();
            a.ᐃᐃΔⲆⵠⵠⵠ();
          });
          b.action();
        }
        return a;
      },
      ⲆΔᐃⲆΔ: function (a) {
        var b = this;
        var c = a.ᐃᐃΔⲆᐃ;
        if (!b.ΔΔⵠⲆᐃ && b.ⲆⵠΔⲆ && !b.ⲆⵠΔⲆ.ended) {
          setTimeout(b.ⲆΔᐃⲆΔ.bind(b, a), 100);
          return b;
        }
        var d = !!a.ⵠΔⵠⲆΔ || !!b.ᐃᐃΔⲆᐃ[c][2];
        b.ⵠᐃⲆΔᐃ("end", a.ⵠⲆⲆⲆ);
        if (!b.ΔΔⵠⲆᐃ && d) {
          b.stop(a.ⵠⲆⲆⲆ, true).play(a.ⵠⲆⲆⲆ);
        }
        if (b.ΔΔⵠⲆᐃ && d) {
          b.ⵠᐃⲆΔᐃ("play", a.ⵠⲆⲆⲆ);
          a.ΔⲆⵠⵠᐃ = a.ΔΔΔΔⵠ || fl;
          a.ᐃⲆⲆΔⵠⵠⲆ = Mg;
          a.ⵠⲆⵠΔᐃᐃᐃ = f.ᐃ.currentTime;
          var e = (a.ⵠΔᐃⵠᐃΔᐃ - a.ΔΔΔΔⵠ) * 1000 / Math.abs(a.ΔΔΔⲆᐃ);
          b.ⵠᐃⵠⲆᐃᐃⵠ[a.ⵠⲆⲆⲆ] = setTimeout(b.ⲆΔᐃⲆΔ.bind(b, a), e);
        }
        if (b.ΔΔⵠⲆᐃ && !d) {
          a.ⲆΔΔⵠⲆ = true;
          a.ⲆΔᐃⲆΔ = !fl;
          a.ΔⲆⵠⵠᐃ = a.ΔΔΔΔⵠ || ya;
          a.ᐃⲆⲆΔⵠⵠⲆ = wj;
          b.ᐃⲆᐃⲆⲆⲆⵠ(a.ⵠⲆⲆⲆ);
          b.ΔⵠⲆⲆⲆⲆⲆ(a.ⲆⵠΔⲆ);
          f.ᐃⵠΔᐃⵠⲆᐃ();
        }
        if (!b.ΔΔⵠⲆᐃ && !d) {
          b.stop(a.ⵠⲆⲆⲆ);
        }
        return b;
      },
      ᐃⲆᐃⲆⲆⲆⵠ: function (a) {
        var b = this;
        if (b.ⵠᐃⵠⲆᐃᐃⵠ[a]) {
          clearTimeout(b.ⵠᐃⵠⲆᐃᐃⵠ[a]);
          delete b.ⵠᐃⵠⲆᐃᐃⵠ[a];
        }
        return b;
      },
      ⲆΔⲆᐃᐃ: function (a) {
        for (var b = this, c = os; c < b.ⲆⲆᐃⵠᐃ.length; c++) {
          if (a === b.ⲆⲆᐃⵠᐃ[c].ⵠⲆⲆⲆ) {
            return b.ⲆⲆᐃⵠᐃ[c];
          }
        }
        return null;
      },
      ⲆⵠⲆⵠⲆᐃΔᐃⵠ: function () {
        var a = this;
        a.ⵠᐃⲆⵠᐃⵠⵠᐃⲆ();
        for (var b = 0; b < a.ⲆⲆᐃⵠᐃ.length; b++) {
          if (a.ⲆⲆᐃⵠᐃ[b].ⲆΔᐃⲆΔ) {
            return a.ⲆⲆᐃⵠᐃ[b].reset();
          }
        }
        return new d(a);
      },
      ⵠᐃⲆⵠᐃⵠⵠᐃⲆ: function () {
        var a = this;
        var b = a.ⲆⲆⵠᐃⵠⵠΔΔΔ;
        var c = st;
        var d = eu;
        if (a.ⲆⲆᐃⵠᐃ.length >= b) {
          for (d = 0; d < a.ⲆⲆᐃⵠᐃ.length; d++) {
            if (a.ⲆⲆᐃⵠᐃ[d].ⲆΔᐃⲆΔ) {
              c++;
            }
          }
          for (d = a.ⲆⲆᐃⵠᐃ.length - 1; d >= st; d--) {
            if (c <= b) {
              return;
            }
            if (a.ⲆⲆᐃⵠᐃ[d].ⲆΔᐃⲆΔ) {
              if (a.ΔΔⵠⲆᐃ && a.ⲆⲆᐃⵠᐃ[d].ⲆⵠΔⲆ) {
                a.ⲆⲆᐃⵠᐃ[d].ⲆⵠΔⲆ.disconnect(Hi);
              }
              a.ⲆⲆᐃⵠᐃ.splice(d, Xn);
              c--;
            }
          }
        }
      },
      ⵠⵠᐃΔΔ: function (a) {
        if (a === undefined) {
          var b = [];
          for (var c = 0; c < this.ⲆⲆᐃⵠᐃ.length; c++) {
            b.push(this.ⲆⲆᐃⵠᐃ[c].ⵠⲆⲆⲆ);
          }
          return b;
        }
        return [a];
      },
      ΔⲆⲆⵠΔᐃΔΔⵠ: function (a) {
        a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ = f.ᐃ.createBufferSource();
        a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.buffer = j[this.ΔⵠⲆⲆⵠ];
        if (a.ᐃⲆΔΔⵠ) {
          a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.connect(a.ᐃⲆΔΔⵠ);
        } else {
          a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.connect(a.ⲆⵠΔⲆ);
        }
        a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loop = a.ⵠΔⵠⲆΔ;
        if (a.ⵠΔⵠⲆΔ) {
          a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loopStart = a.ΔΔΔΔⵠ || wg;
          a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loopEnd = a.ⵠΔᐃⵠᐃΔᐃ;
        }
        a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.playbackRate.value = a.ΔΔΔⲆᐃ;
        return this;
      },
      ΔⵠⲆⲆⲆⲆⲆ: function (a) {
        var b = this;
        if (b.ᐃⵠΔΔΔᐃᐃ) {
          a.ⵠᐃᐃᐃᐃ.onended = null;
          a.ⵠᐃᐃᐃᐃ.disconnect(wj);
          try {
            a.ⵠᐃᐃᐃᐃ.buffer = b.ᐃⵠΔΔΔᐃᐃ;
          } catch (a) {}
        }
        a.ⵠᐃᐃᐃᐃ = null;
        return b;
      }
    };
    function d(a) {
      this.ΔⵠⵠΔΔⵠᐃ = a;
      this.ᐃΔΔΔᐃ();
    }
    d.prototype = {
      ᐃΔΔΔᐃ: function () {
        var a = this;
        var b = a.ΔⵠⵠΔΔⵠᐃ;
        a.ΔⲆᐃⲆⲆ = b.ΔⲆᐃⲆⲆ;
        a.ⵠΔⵠⲆΔ = b.ⵠΔⵠⲆΔ;
        a.ⲆᐃΔⲆⲆ = b.ⲆᐃΔⲆⲆ;
        a.ΔΔΔⲆᐃ = b.ΔΔΔⲆᐃ;
        a.ΔⲆⵠⵠᐃ = wj;
        a.ⲆΔΔⵠⲆ = true;
        a.ⲆΔᐃⲆΔ = !Bb;
        a.ᐃᐃΔⲆᐃ = "__default";
        a.ⵠⲆⲆⲆ = ++f.ΔⲆⲆᐃⲆᐃⵠ;
        b.ⲆⲆᐃⵠᐃ.push(a);
        a.create();
        return a;
      },
      create: function () {
        var a = this;
        var b = a.ΔⵠⵠΔΔⵠᐃ;
        var c = f.ΔⲆᐃⲆⲆ || a.ΔⲆᐃⲆⲆ || a.ΔⵠⵠΔΔⵠᐃ.ΔⲆᐃⲆⲆ ? 0 : a.ⲆᐃΔⲆⲆ;
        if (b.ΔΔⵠⲆᐃ) {
          a.ⲆⵠΔⲆ = f.ᐃ.createGain === undefined ? f.ᐃ.ⵠΔᐃΔⵠᐃⵠᐃᐃ() : f.ᐃ.createGain();
          a.ⲆⵠΔⲆ.gain.setValueAtTime(c, f.ᐃ.currentTime);
          a.ⲆⵠΔⲆ.paused = !mj;
          a.ⲆⵠΔⲆ.connect(f.ᐃⵠⵠⲆΔᐃΔ);
        } else {
          a.ⲆⵠΔⲆ = new Audio();
          a.ᐃⲆᐃⵠΔⵠΔ = a.ΔᐃΔⵠᐃⵠⲆΔⵠ.bind(a);
          a.ⲆⵠΔⲆ.addEventListener("error", a.ᐃⲆᐃⵠΔⵠΔ, false);
          a.ⵠᐃⲆᐃⲆⲆⲆ = a.ΔⲆⲆΔⲆⲆⵠⵠᐃ.bind(a);
          a.ⲆⵠΔⲆ.addEventListener(f.ᐃΔᐃΔⲆⲆⵠ, a.ⵠᐃⲆᐃⲆⲆⲆ, false);
          a.ⲆⵠΔⲆ.src = b.ΔⵠⲆⲆⵠ;
          a.ⲆⵠΔⲆ.preload = "auto";
          a.ⲆⵠΔⲆ.volume = c * f.volume();
          a.ⲆⵠΔⲆ.load();
        }
        return a;
      },
      reset: function () {
        var a = this;
        var b = a.ΔⵠⵠΔΔⵠᐃ;
        a.ΔⲆᐃⲆⲆ = b.ΔⲆᐃⲆⲆ;
        a.ⵠΔⵠⲆΔ = b.ⵠΔⵠⲆΔ;
        a.ⲆᐃΔⲆⲆ = b.ⲆᐃΔⲆⲆ;
        a.ΔΔΔⲆᐃ = b.ΔΔΔⲆᐃ;
        a.ΔⲆⵠⵠᐃ = 0;
        a.ᐃⲆⲆΔⵠⵠⲆ = 0;
        a.ⲆΔΔⵠⲆ = true;
        a.ⲆΔᐃⲆΔ = !wj;
        a.ᐃᐃΔⲆᐃ = "__default";
        a.ⵠⲆⲆⲆ = ++f.ΔⲆⲆᐃⲆᐃⵠ;
        return a;
      },
      ΔᐃΔⵠᐃⵠⲆΔⵠ: function () {
        var a = this;
        a.ΔⵠⵠΔΔⵠᐃ.ⵠᐃⲆΔᐃ("loaderror", a.ⵠⲆⲆⲆ, a.ⲆⵠΔⲆ.error ? a.ⲆⵠΔⲆ.error.code : 0);
        a.ⲆⵠΔⲆ.removeEventListener("error", a.ᐃⲆᐃⵠΔⵠΔ, !Wl);
      },
      ΔⲆⲆΔⲆⲆⵠⵠᐃ: function () {
        var a = this;
        var b = a.ΔⵠⵠΔΔⵠᐃ;
        b.ΔⲆⲆᐃⲆⵠΔ = Math.ceil(a.ⲆⵠΔⲆ.duration * 10) / zl;
        if (Object.keys(b.ᐃᐃΔⲆᐃ).length === 0) {
          b.ᐃᐃΔⲆᐃ = {
            ⲆᐃΔⵠΔⵠΔⲆⵠ: [Ih, b.ΔⲆⲆᐃⲆⵠΔ * 1000]
          };
        }
        if (b.ⲆΔΔⲆᐃ !== "loaded") {
          b.ⲆΔΔⲆᐃ = "loaded";
          b.ⵠᐃⲆΔᐃ("load");
          b.ᐃᐃΔⲆⵠⵠⵠ();
        }
        a.ⲆⵠΔⲆ.removeEventListener(f.ᐃΔᐃΔⲆⲆⵠ, a.ⵠᐃⲆᐃⲆⲆⲆ, false);
      }
    };
    var j = {};
    function i(b) {
      var c = b.ΔⵠⲆⲆⵠ;
      if (j[c]) {
        b.ΔⲆⲆᐃⲆⵠΔ = j[c].duration;
        a(b);
        return;
      }
      if (/^data:[^;]+;base64,/.test(c)) {
        for (var d = atob(c.split(",")[1]), e = new Uint8Array(d.length), f = 0; f < d.length; ++f) {
          e[f] = d.charCodeAt(f);
        }
        m(e.buffer, b);
      } else {
        var g = new XMLHttpRequest();
        g.open("GET", c, !Bb);
        g.responseType = "arraybuffer";
        g.onload = function () {
          var a = (g.status + "")[0];
          if (a === "0" || a === "2" || a === "3") {
            m(g.response, b);
          } else {
            b.ⵠᐃⲆΔᐃ("loaderror", null, "Failed loading audio file with status: " + g.status + ".");
          }
        };
        g.onerror = function () {
          if (b.ΔΔⵠⲆᐃ) {
            b.ᐃⲆΔΔᐃⲆᐃ = true;
            b.ΔΔⵠⲆᐃ = !zs;
            b.ⲆⲆᐃⵠᐃ = [];
            delete j[c];
            b.load();
          }
        };
        k(g);
      }
    }
    function k(a) {
      try {
        a.send();
      } catch (b) {
        a.onerror();
      }
    }
    function m(b, c) {
      f.ᐃ.decodeAudioData(b, function (b) {
        if (b && c.ⲆⲆᐃⵠᐃ.length > Da) {
          j[c.ΔⵠⲆⲆⵠ] = b;
          a(c, b);
        }
      }, function () {
        c.ⵠᐃⲆΔᐃ("loaderror", null, "Decoding audio data failed.");
      });
    }
    function a(a, b) {
      if (b && !a.ΔⲆⲆᐃⲆⵠΔ) {
        a.ΔⲆⲆᐃⲆⵠΔ = b.duration;
      }
      if (fl === Object.keys(a.ᐃᐃΔⲆᐃ).length) {
        a.ᐃᐃΔⲆᐃ = {
          ⲆᐃΔⵠΔⵠΔⲆⵠ: [fl, a.ΔⲆⲆᐃⲆⵠΔ * 1000]
        };
      }
      if (a.ⲆΔΔⲆᐃ !== "loaded") {
        a.ⲆΔΔⲆᐃ = "loaded";
        a.ⵠᐃⲆΔᐃ("load");
        a.ᐃᐃΔⲆⵠⵠⵠ();
      }
    }
    function h() {
      try {
        if (typeof AudioContext != "undefined") {
          f.ᐃ = new AudioContext();
        } else if (typeof ⵠΔⵠⵠᐃⲆⵠΔⵠ != "undefined") {
          f.ᐃ = new ⵠΔⵠⵠᐃⲆⵠΔⵠ();
        } else {
          f.ⲆΔⵠⲆⲆ = !au;
        }
      } catch (a) {
        f.ⲆΔⵠⲆⲆ = false;
      }
      var a = /iP(hone|od|ad)/.test(f.ⲆⲆⵠⵠⵠ && f.ⲆⲆⵠⵠⵠ.platform);
      var b = f.ⲆⲆⵠⵠⵠ && f.ⲆⲆⵠⵠⵠ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
      var c = b ? parseInt(b[za], Ra) : null;
      if (a && c && c < 9) {
        var d = /safari/.test(f.ⲆⲆⵠⵠⵠ && f.ⲆⲆⵠⵠⵠ.userAgent.toLowerCase());
        if (f.ⲆⲆⵠⵠⵠ && f.ⲆⲆⵠⵠⵠ.ⲆⲆⵠⵠⵠⵠᐃⵠⵠ && !d || f.ⲆⲆⵠⵠⵠ && !f.ⲆⲆⵠⵠⵠ.ⲆⲆⵠⵠⵠⵠᐃⵠⵠ && !d) {
          f.ⲆΔⵠⲆⲆ = !Gh;
        }
      }
      if (f.ⲆΔⵠⲆⲆ) {
        f.ᐃⵠⵠⲆΔᐃΔ = f.ᐃ.createGain === undefined ? f.ᐃ.ⵠΔᐃΔⵠᐃⵠᐃᐃ() : f.ᐃ.createGain();
        f.ᐃⵠⵠⲆΔᐃΔ.gain.value = f.ΔⲆᐃⲆⲆ ? 0 : mk;
        f.ᐃⵠⵠⲆΔᐃΔ.connect(f.ᐃ.destination);
      }
      f.ⲆⲆⲆⵠⵠᐃᐃ();
    }
    if (typeof ΔⵠᐃᐃⲆⵠΔ == "function" && ΔⵠᐃᐃⲆⵠΔ.ΔᐃᐃⲆΔᐃΔ) {
      ΔⵠᐃᐃⲆⵠΔ([], function () {
        return {
          Howler: f,
          Howl: c
        };
      });
    }
    if (typeof ᐃᐃⲆⵠⵠⲆⲆ != "undefined") {
      ᐃᐃⲆⵠⵠⲆⲆ.Howler = f;
      ᐃᐃⲆⵠⵠⲆⲆ.Howl = c;
    }
    if (typeof dj != "undefined") {
      dj.ⵠⵠⲆᐃᐃⲆΔ = b;
      dj.Howler = f;
      dj.Howl = c;
      dj.ᐃⵠⵠⵠΔᐃᐃ = d;
    } else if (typeof ᐃᐃΔᐃⲆᐃⲆ != "undefined") {
      ᐃᐃΔᐃⲆᐃⲆ.ⵠⵠⲆᐃᐃⲆΔ = b;
      ᐃᐃΔᐃⲆᐃⲆ.Howler = f;
      ᐃᐃΔᐃⲆᐃⲆ.Howl = c;
      ᐃᐃΔᐃⲆᐃⲆ.ᐃⵠⵠⵠΔᐃᐃ = d;
    }
  })();
  (function () {
    ⵠⵠⲆᐃᐃⲆΔ.prototype.ⲆⵠⲆΔΔ = [0, In, 0];
    ⵠⵠⲆᐃᐃⲆΔ.prototype.ⲆᐃΔᐃᐃ = [0, os, -1, In, 1, mj];
    ⵠⵠⲆᐃᐃⲆΔ.prototype.ⵠΔⵠⲆᐃⵠᐃ = function (a) {
      var b = this;
      if (!b.ᐃ || !b.ᐃ.listener) {
        return b;
      }
      for (var c = b.ΔⵠⵠⲆⵠ.length - 1; c >= 0; c--) {
        b.ΔⵠⵠⲆⵠ[c].ⵠΔⵠⲆᐃⵠᐃ(a);
      }
      return b;
    };
    ⵠⵠⲆᐃᐃⲆΔ.prototype.ⲆⲆΔⲆ = function (a, b, c) {
      var d = this;
      if (d.ᐃ && d.ᐃ.listener) {
        b = typeof b != "number" ? d.ⲆⵠⲆΔΔ[1] : b;
        c = typeof c != "number" ? d.ⲆⵠⲆΔΔ[2] : c;
        if (typeof a != "number") {
          return d.ⲆⵠⲆΔΔ;
        } else {
          d.ⲆⵠⲆΔΔ = [a, b, c];
          d.ᐃ.listener.setPosition(d.ⲆⵠⲆΔΔ[Yh], d.ⲆⵠⲆΔΔ[1], d.ⲆⵠⲆΔΔ[Vh]);
          return d;
        }
      } else {
        return d;
      }
    };
    ⵠⵠⲆᐃᐃⲆΔ.prototype.orientation = function (b, c, d, e, f, g) {
      var h = this;
      if (!h.ᐃ || !h.ᐃ.listener) {
        return h;
      }
      var a = h.ⲆᐃΔᐃᐃ;
      c = typeof c != "number" ? a[Hg] : c;
      d = typeof d != "number" ? a[H] : d;
      e = typeof e != "number" ? a[3] : e;
      f = typeof f != "number" ? a[nj] : f;
      g = typeof g != "number" ? a[5] : g;
      if (typeof b != "number") {
        return a;
      } else {
        h.ⲆᐃΔᐃᐃ = [b, c, d, e, f, g];
        h.ᐃ.listener.setOrientation(b, c, d, e, f, g);
        return h;
      }
    };
    Howl.prototype.ᐃΔΔΔᐃ = function (a) {
      return function (b) {
        var c = this;
        c.ⲆᐃΔᐃᐃ = b.orientation || [1, 0, 0];
        c.ΔΔⲆᐃⲆⲆᐃ = b.ⵠΔⵠⲆᐃⵠᐃ || null;
        c.ⲆⵠⲆΔΔ = b.ⲆⲆΔⲆ || null;
        c.ΔΔⵠΔᐃ = {
          coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
          coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
          coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
          distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
          maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
          panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
          refDistance: b.refDistance !== undefined ? b.refDistance : Gh,
          rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : za
        };
        c.ΔᐃⵠᐃΔⲆΔΔΔ = b.ΔⵠⲆⲆΔⵠⵠⵠᐃ ? [{
          ⵠΔⲆᐃᐃ: b.ΔⵠⲆⲆΔⵠⵠⵠᐃ
        }] : [];
        c.ⲆⵠⵠⲆᐃⵠΔⵠᐃ = b.ⲆⵠᐃⲆΔⵠⵠΔⵠ ? [{
          ⵠΔⲆᐃᐃ: b.ⲆⵠᐃⲆΔⵠⵠΔⵠ
        }] : [];
        c.ⲆᐃⲆⵠΔΔᐃⵠΔ = b.ⲆᐃⵠᐃᐃⵠᐃᐃΔ ? [{
          ⵠΔⲆᐃᐃ: b.ⲆᐃⵠᐃᐃⵠᐃᐃΔ
        }] : [];
        return a.call(this, b);
      };
    }(Howl.prototype.ᐃΔΔΔᐃ);
    Howl.prototype.ⵠΔⵠⲆᐃⵠᐃ = function (b, c) {
      var d = this;
      if (!d.ΔΔⵠⲆᐃ) {
        return d;
      }
      if (d.ⲆΔΔⲆᐃ !== "loaded") {
        d.ΔⵠⵠⲆΔ.push({
          event: "stereo",
          action: function () {
            d.ⵠΔⵠⲆᐃⵠᐃ(b, c);
          }
        });
        return d;
      }
      var e = Howler.ᐃ.createStereoPanner === undefined ? "spatial" : "stereo";
      if (c === undefined) {
        if (typeof b != "number") {
          return d.ΔΔⲆᐃⲆⲆᐃ;
        }
        d.ΔΔⲆᐃⲆⲆᐃ = b;
        d.ⲆⵠⲆΔΔ = [b, 0, wg];
      }
      for (var f = d.ⵠⵠᐃΔΔ(c), g = wg; g < f.length; g++) {
        var h = d.ⲆΔⲆᐃᐃ(f[g]);
        if (h) {
          if (typeof b != "number") {
            return h.ΔΔⲆᐃⲆⲆᐃ;
          }
          h.ΔΔⲆᐃⲆⲆᐃ = b;
          h.ⲆⵠⲆΔΔ = [b, 0, Zj];
          if (h.ⲆⵠΔⲆ) {
            h.ΔΔⵠΔᐃ.panningModel = "equalpower";
            if (!h.ᐃⲆΔΔⵠ || !h.ᐃⲆΔΔⵠ.pan) {
              a(h, e);
            }
            if (e === "spatial") {
              h.ᐃⲆΔΔⵠ.setPosition(b, 0, 0);
            } else {
              h.ᐃⲆΔΔⵠ.pan.value = b;
            }
          }
          d.ⵠᐃⲆΔᐃ("stereo", h.ⵠⲆⲆⲆ);
        }
      }
      return d;
    };
    Howl.prototype.ⲆⲆΔⲆ = function (b, c, d, e) {
      var f = this;
      if (!f.ΔΔⵠⲆᐃ) {
        return f;
      }
      if (f.ⲆΔΔⲆᐃ !== "loaded") {
        f.ΔⵠⵠⲆΔ.push({
          event: "pos",
          action: function () {
            f.ⲆⲆΔⲆ(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? 0 : c;
      d = typeof d != "number" ? -0.5 : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ⲆⵠⲆΔΔ;
        }
        f.ⲆⵠⲆΔΔ = [b, c, d];
      }
      for (var g = f.ⵠⵠᐃΔΔ(e), i = 0; i < g.length; i++) {
        var j = f.ⲆΔⲆᐃᐃ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ⲆⵠⲆΔΔ;
          }
          j.ⲆⵠⲆΔΔ = [b, c, d];
          if (j.ⲆⵠΔⲆ) {
            if (!j.ᐃⲆΔΔⵠ || !!j.ᐃⲆΔΔⵠ.pan) {
              a(j, "spatial");
            }
            j.ᐃⲆΔΔⵠ.setPosition(b, c, d);
          }
          f.ⵠᐃⲆΔᐃ("pos", j.ⵠⲆⲆⲆ);
        }
      }
      return f;
    };
    Howl.prototype.orientation = function (b, c, d, e) {
      var f = this;
      if (!f.ΔΔⵠⲆᐃ) {
        return f;
      }
      if (f.ⲆΔΔⲆᐃ !== "loaded") {
        f.ΔⵠⵠⲆΔ.push({
          event: "orientation",
          action: function () {
            f.orientation(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? f.ⲆᐃΔᐃᐃ[1] : c;
      d = typeof d != "number" ? f.ⲆᐃΔᐃᐃ[pq] : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ⲆᐃΔᐃᐃ;
        }
        f.ⲆᐃΔᐃᐃ = [b, c, d];
      }
      for (var g = f.ⵠⵠᐃΔΔ(e), i = 0; i < g.length; i++) {
        var j = f.ⲆΔⲆᐃᐃ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ⲆᐃΔᐃᐃ;
          }
          j.ⲆᐃΔᐃᐃ = [b, c, d];
          if (j.ⲆⵠΔⲆ) {
            if (!j.ᐃⲆΔΔⵠ) {
              j.ⲆⵠⲆΔΔ ||= f.ⲆⵠⲆΔΔ || [fl, os, -0.5];
              a(j, "spatial");
            }
            j.ᐃⲆΔΔⵠ.setOrientation(b, c, d);
          }
          f.ⵠᐃⲆΔᐃ("orientation", j.ⵠⲆⲆⲆ);
        }
      }
      return f;
    };
    Howl.prototype.ⲆⵠΔᐃΔⵠⵠᐃⲆ = function () {
      var b;
      var c;
      var d;
      var e = this;
      var f = arguments;
      if (!e.ΔΔⵠⲆᐃ) {
        return e;
      }
      if (Rq === f.length) {
        return e.ΔΔⵠΔᐃ;
      }
      if (Xn === f.length) {
        if (typeof f[0] != "object") {
          if (d = e.ⲆΔⲆᐃᐃ(parseInt(f[Mg], 10))) {
            return d.ΔΔⵠΔᐃ;
          } else {
            return e.ΔΔⵠΔᐃ;
          }
        }
        b = f[0];
        if (c === undefined) {
          e.ΔΔⵠΔᐃ = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : e.ᐃΔⵠⲆΔⵠΔᐃⲆ,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : e.ⵠⲆⲆΔⲆⵠᐃᐃⵠ,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : e.ΔΔΔⵠΔΔⲆⵠⵠ,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : e.ᐃⵠⲆΔⲆⵠᐃΔⵠ,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : e.ⵠⵠⵠΔⲆⲆⵠⵠΔ,
            panningModel: b.panningModel !== undefined ? b.panningModel : e.ⵠΔΔⵠΔΔᐃᐃⵠ,
            refDistance: b.refDistance !== undefined ? b.refDistance : e.ⲆᐃⵠᐃᐃΔᐃᐃᐃ,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : e.ⵠᐃⲆΔΔΔΔⲆᐃ
          };
        }
      } else if (f.length === 2) {
        b = f[Bb];
        c = parseInt(f[1], kk);
      }
      for (var g = e.ⵠⵠᐃΔΔ(c), j = 0; j < g.length; j++) {
        if (d = e.ⲆΔⲆᐃᐃ(g[j])) {
          var k = d.ΔΔⵠΔᐃ;
          k = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : k.coneInnerAngle,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : k.coneOuterAngle,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : k.coneOuterGain,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : k.distanceModel,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : k.maxDistance,
            panningModel: b.panningModel !== undefined ? b.panningModel : k.panningModel,
            refDistance: b.refDistance !== undefined ? b.refDistance : k.refDistance,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : k.rolloffFactor
          };
          var m = d.ᐃⲆΔΔⵠ;
          if (m) {
            m.coneInnerAngle = k.coneInnerAngle;
            m.coneOuterAngle = k.coneOuterAngle;
            m.coneOuterGain = k.coneOuterGain;
            m.distanceModel = k.distanceModel;
            m.maxDistance = k.maxDistance;
            m.panningModel = k.panningModel;
            m.refDistance = k.refDistance;
            m.rolloffFactor = k.rolloffFactor;
          } else {
            d.ⲆⵠⲆΔΔ ||= e.ⲆⵠⲆΔΔ || [0, Hi, -0.5];
            a(d, "spatial");
          }
        }
      }
      return e;
    };
    ᐃⵠⵠⵠΔᐃᐃ.prototype.ᐃΔΔΔᐃ = function (a) {
      return function () {
        var b = this;
        var c = b.ΔⵠⵠΔΔⵠᐃ;
        b.ⲆᐃΔᐃᐃ = c.ⲆᐃΔᐃᐃ;
        b.ΔΔⲆᐃⲆⲆᐃ = c.ΔΔⲆᐃⲆⲆᐃ;
        b.ⲆⵠⲆΔΔ = c.ⲆⵠⲆΔΔ;
        b.ΔΔⵠΔᐃ = c.ΔΔⵠΔᐃ;
        a.call(this);
        if (b.ΔΔⲆᐃⲆⲆᐃ) {
          c.ⵠΔⵠⲆᐃⵠᐃ(b.ΔΔⲆᐃⲆⲆᐃ);
        } else if (b.ⲆⵠⲆΔΔ) {
          c.ⲆⲆΔⲆ(b.ⲆⵠⲆΔΔ[0], b.ⲆⵠⲆΔΔ[Oq], b.ⲆⵠⲆΔΔ[2], b.ⵠⲆⲆⲆ);
        }
      };
    }(ᐃⵠⵠⵠΔᐃᐃ.prototype.ᐃΔΔΔᐃ);
    ᐃⵠⵠⵠΔᐃᐃ.prototype.reset = function (a) {
      return function () {
        var b = this;
        var c = b.ΔⵠⵠΔΔⵠᐃ;
        b.ⲆᐃΔᐃᐃ = c.ⲆᐃΔᐃᐃ;
        b.ⲆⵠⲆΔΔ = c.ⲆⵠⲆΔΔ;
        b.ΔΔⵠΔᐃ = c.ΔΔⵠΔᐃ;
        return a.call(this);
      };
    }(ᐃⵠⵠⵠΔᐃᐃ.prototype.reset);
    function a(a, b) {
      b = b || "spatial";
      if (b === "spatial") {
        a.ᐃⲆΔΔⵠ = Howler.ᐃ.createPanner();
        a.ᐃⲆΔΔⵠ.coneInnerAngle = a.ΔΔⵠΔᐃ.coneInnerAngle;
        a.ᐃⲆΔΔⵠ.coneOuterAngle = a.ΔΔⵠΔᐃ.coneOuterAngle;
        a.ᐃⲆΔΔⵠ.coneOuterGain = a.ΔΔⵠΔᐃ.coneOuterGain;
        a.ᐃⲆΔΔⵠ.distanceModel = a.ΔΔⵠΔᐃ.distanceModel;
        a.ᐃⲆΔΔⵠ.maxDistance = a.ΔΔⵠΔᐃ.maxDistance;
        a.ᐃⲆΔΔⵠ.panningModel = a.ΔΔⵠΔᐃ.panningModel;
        a.ᐃⲆΔΔⵠ.refDistance = a.ΔΔⵠΔᐃ.refDistance;
        a.ᐃⲆΔΔⵠ.rolloffFactor = a.ΔΔⵠΔᐃ.rolloffFactor;
        a.ᐃⲆΔΔⵠ.setPosition(a.ⲆⵠⲆΔΔ[0], a.ⲆⵠⲆΔΔ[1], a.ⲆⵠⲆΔΔ[2]);
        a.ᐃⲆΔΔⵠ.setOrientation(a.ⲆᐃΔᐃᐃ[0], a.ⲆᐃΔᐃᐃ[1], a.ⲆᐃΔᐃᐃ[2]);
      } else {
        a.ᐃⲆΔΔⵠ = Howler.ᐃ.createStereoPanner();
        a.ᐃⲆΔΔⵠ.pan.value = a.ΔΔⲆᐃⲆⲆᐃ;
      }
      a.ᐃⲆΔΔⵠ.connect(a.ⲆⵠΔⲆ);
      if (!a.ⲆΔΔⵠⲆ) {
        a.ΔⵠⵠΔΔⵠᐃ.pause(a.ⵠⲆⲆⲆ, true).play(a.ⵠⲆⲆⲆ);
      }
    }
  })();
  var Uw = 1;
  var ef = 1;
  var tf = {
    ⲆⵠⵠΔⲆΔᐃ: 460000,
    ⵠᐃΔΔΔ: Vh,
    ⵠᐃΔⲆⲆᐃⵠΔᐃ: yg,
    ΔᐃΔᐃⵠⲆᐃⲆⵠ: 5000,
    ᐃᐃᐃⲆⵠⵠᐃⲆⲆ: 5000,
    ⵠΔΔᐃⵠᐃΔᐃᐃ: 5000,
    ΔⵠΔ: va,
    ᐃᐃⲆⲆⲆ: He,
    ᐃⲆⲆΔⵠΔᐃ: 12,
    ⵠᐃΔⲆⵠΔᐃ: 3000,
    ᐃΔΔΔΔ: Wb,
    ΔᐃΔΔΔ: pu,
    ⵠΔⲆⵠΔΔⵠⵠⲆ: $g
  };
  var nf = [];
  nf[-1] = tf.ΔᐃΔΔΔ;
  nf[28] = tf.ΔᐃΔΔΔ;
  nf[49] = tf.ΔᐃΔΔΔ;
  nf[_r.ᐃΔΔΔᐃΔⵠⲆᐃ] = tf.ⵠᐃΔΔΔ;
  nf[8] = tf.ⵠᐃΔΔΔ;
  nf[1] = tf.ⵠᐃΔΔΔ;
  nf[3] = tf.ⵠᐃΔΔΔ;
  nf[4] = tf.ⵠᐃΔΔΔ;
  nf[31] = tf.ⵠᐃΔΔΔ;
  nf[32] = tf.ⵠᐃΔΔΔ;
  nf[9] = tf.ⵠᐃΔΔΔ;
  nf[57] = tf.ⵠᐃΔΔΔ;
  nf[0] = tf.ⵠᐃΔΔΔ;
  nf[63] = tf.ⵠᐃΔΔΔ;
  nf[17] = tf.ⵠᐃΔΔΔ;
  nf[5] = tf.ⵠᐃΔΔΔ;
  nf[6] = tf.ⵠᐃΔΔΔ;
  nf[30] = tf.ⵠᐃΔΔΔ;
  nf[_r.ⵠᐃⲆΔᐃᐃᐃⲆᐃ] = tf.ⵠᐃΔΔΔ;
  nf[18] = tf.ⵠᐃΔΔΔ;
  nf[12] = tf.ⵠᐃΔΔΔ;
  nf[13] = tf.ⵠᐃΔΔΔ;
  nf[14] = tf.ⵠᐃΔΔΔ;
  nf[15] = tf.ⵠᐃΔΔΔ;
  nf[16] = tf.ⵠᐃΔΔΔ;
  nf[33] = tf.ⵠᐃΔΔΔ;
  nf[_r.ⲆᐃⲆⲆᐃⲆᐃⲆᐃ] = tf.ⵠᐃΔΔΔ;
  nf[35] = tf.ⵠᐃΔΔΔ;
  nf[36] = tf.ⵠᐃΔΔΔ;
  nf[37] = tf.ⵠᐃΔΔΔ;
  nf[38] = tf.ⵠᐃΔΔΔ;
  nf[39] = tf.ⵠᐃΔΔΔ;
  nf[45] = tf.ⵠᐃΔΔΔ;
  nf[62] = tf.ⵠᐃΔΔΔ;
  nf[54] = tf.ⵠᐃΔΔΔ;
  nf[53] = tf.ⵠᐃΔΔΔ;
  nf[46] = tf.ᐃΔΔΔΔ;
  nf[50] = tf.ᐃΔΔΔΔ;
  nf[51] = tf.ᐃΔΔΔΔ;
  nf[52] = tf.ᐃΔΔΔΔ;
  ⵠΔⵠⵠ = [];
  ⵠΔⵠⵠ[0] = ya;
  ⵠΔⵠⵠ[zs] = hb;
  ⵠΔⵠⵠ[2] = Hg;
  ⵠΔⵠⵠ[eg] = 1;
  ⵠΔⵠⵠ[4] = mj;
  ⵠΔⵠⵠ[5] = 0;
  ⵠΔⵠⵠ[ks] = Qs;
  ⵠΔⵠⵠ[cq] = 0;
  ⵠΔⵠⵠ[Xl] = Hi;
  ⵠΔⵠⵠ[dl] = Bb;
  ⵠΔⵠⵠ[10] = 1;
  ⵠΔⵠⵠ[tk] = 1;
  ⵠΔⵠⵠ[12] = Gh;
  ⵠΔⵠⵠ[13] = 1;
  ⵠΔⵠⵠ[Tn] = 1;
  if (dj.ᐃⲆᐃⲆⵠΔᐃⵠⲆ) {
    var of = dj.Math.acos;
    dj.Math.acos = dj.Math.asin;
    dj.Math.asin = of;
    var rf = dj.Math.acos;
    dj.Math.acos = dj.Math.asin;
    dj.Math.asin = rf;
  }
  ⵠΔⵠⵠ[15] = 1;
  ⵠΔⵠⵠ[16] = 0;
  ⵠΔⵠⵠ[ts] = 0;
  ⵠΔⵠⵠ[18] = wj;
  ⵠΔⵠⵠ[bl] = Ih;
  ⵠΔⵠⵠ[20] = 0;
  ⵠΔⵠⵠ[21] = ig;
  ⵠΔⵠⵠ[22] = 0;
  ⵠΔⵠⵠ[23] = 1;
  ⵠΔⵠⵠ[24] = mk;
  ⵠΔⵠⵠ[25] = zg;
  ⵠΔⵠⵠ[26] = 1;
  ⵠΔⵠⵠ[27] = og;
  ⵠΔⵠⵠ[28] = 1;
  ⵠΔⵠⵠ[29] = gs;
  ⵠΔⵠⵠ[30] = 1;
  ⵠΔⵠⵠ[31] = 1;
  ⵠΔⵠⵠ[32] = 1;
  ⵠΔⵠⵠ[33] = 1;
  ⵠΔⵠⵠ[34] = Xn;
  ⵠΔⵠⵠ[35] = Tl;
  ⵠΔⵠⵠ[36] = ie;
  ⵠΔⵠⵠ[37] = 1;
  ⵠΔⵠⵠ[38] = ie;
  ⵠΔⵠⵠ[40] = 0;
  ⵠΔⵠⵠ[41] = 0;
  ⵠΔⵠⵠ[42] = 0;
  ⵠΔⵠⵠ[50] = pu;
  ⵠΔⵠⵠ[51] = Tl;
  ⵠΔⵠⵠ[52] = Gh;
  ⵠΔⵠⵠ[55] = Zj;
  ⵠΔⵠⵠ[56] = 0;
  ⵠΔⵠⵠ[57] = 0;
  ⵠΔⵠⵠ[58] = eu;
  ΔⲆᐃⲆⵠ = [];
  ΔⲆᐃⲆⵠ[nw.ⵠᐃⲆⲆⲆ] = 0;
  ΔⲆᐃⲆⵠ[nw.ΔᐃᐃⲆⲆ] = Yh;
  ΔⲆᐃⲆⵠ[nw.ⲆⵠᐃᐃΔ] = Hi;
  ΔⲆᐃⲆⵠ[nw.ᐃΔΔⵠΔ] = 0;
  ΔⲆᐃⲆⵠ[nw.ⵠᐃΔⲆᐃ] = -zg;
  ΔⲆᐃⲆⵠ[nw.ⲆΔᐃΔΔ] = -$b;
  ΔⲆᐃⲆⵠ[nw.ⵠⲆΔⵠᐃ] = Zj;
  ΔⲆᐃⲆⵠ[nw.ⲆⲆⲆⲆⵠ] = 0;
  ΔⲆᐃⲆⵠ[nw.ⲆᐃⲆᐃⵠ] = 0;
  ΔⲆᐃⲆⵠ[nw.ΔΔΔⵠⵠ] = Ih;
  ΔⲆᐃⲆⵠ[nw.ⵠΔⲆⲆΔ] = 1;
  ΔⲆᐃⲆⵠ[nw.ⲆⵠⲆⵠⵠ] = og;
  ΔⲆᐃⲆⵠ[nw.ΔᐃⵠⲆⲆ] = 1;
  ΔⲆᐃⲆⵠ[nw.ᐃᐃᐃᐃᐃ] = sd;
  ΔⲆᐃⲆⵠ[nw.ⵠᐃⲆᐃⵠ] = 1;
  ΔⲆᐃⲆⵠ[nw.ᐃΔⵠⵠΔ] = au;
  ΔⲆᐃⲆⵠ[nw.ᐃⵠⵠⲆᐃ] = 1;
  ΔⲆᐃⲆⵠ[nw.ⵠⵠΔⵠⲆ] = Yh;
  ΔⲆᐃⲆⵠ[nw.ⲆᐃⲆΔΔ] = 1;
  ΔⲆᐃⲆⵠ[nw.Ⲇᐃⵠᐃⵠ] = 1;
  ΔⲆᐃⲆⵠ[nw.ⲆⵠᐃΔΔ] = 1;
  ΔⲆᐃⲆⵠ[nw.ᐃⲆⵠᐃᐃ] = 1;
  ΔⲆᐃⲆⵠ[nw.ⵠⲆᐃᐃⲆ] = Wl;
  ΔⲆᐃⲆⵠ[nw.ΔⵠⵠⲆᐃ] = ig;
  ΔⲆᐃⲆⵠ[nw.ⵠΔᐃⲆΔ] = wt;
  ΔⲆᐃⲆⵠ[nw.ᐃΔⵠⵠⵠ] = $b;
  ΔⲆᐃⲆⵠ[nw.ⵠΔᐃΔΔ] = gs;
  ΔⲆᐃⲆⵠ[nw.Δⵠᐃⵠᐃ] = 1;
  ΔⲆᐃⲆⵠ[nw.Ⲇᐃⵠⵠⵠ] = Te;
  ΔⲆᐃⲆⵠ[nw.ᐃⲆΔᐃⲆ] = Mg;
  ΔⲆᐃⲆⵠ[nw.ΔⵠⵠΔΔ] = mk;
  ΔⲆᐃⲆⵠ[nw.ΔΔⲆᐃⲆ] = 1;
  ΔⲆᐃⲆⵠ[nw.ΔⵠΔⲆΔ] = au;
  ΔⲆᐃⲆⵠ[nw.ⵠΔⲆⵠᐃ] = gs;
  ΔⲆᐃⲆⵠ[nw.ᐃΔΔⵠᐃ] = Wl;
  ΔⲆᐃⲆⵠ[nw.ⲆᐃΔᐃⵠ] = pu;
  ΔⲆᐃⲆⵠ[nw.ⲆⲆⵠⵠᐃ] = au;
  ΔⲆᐃⲆⵠ[nw.ΔⲆΔΔⲆ] = 1;
  ΔⲆᐃⲆⵠ[nw.ᐃⲆⲆⲆⲆ] = mj;
  ΔⲆᐃⲆⵠ[nw.Δᐃᐃᐃᐃ] = 1;
  var af = {
    ⲆⲆⲆⵠⵠⵠⵠ: {
      ⵠⵠᐃΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        d2: [90684, 300, false],
        d1: [90391, 300, gh],
        d0: [90086, 300, al]
      },
      sample: {
        d0: tf.ᐃᐃⲆⲆⲆ,
        d1: tf.ᐃᐃⲆⲆⲆ,
        d2: tf.ᐃᐃⲆⲆⲆ
      }
    },
    ⲆΔᐃⵠᐃⵠᐃ: {
      ⵠⵠᐃΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        p0: [89303, 300, false],
        p2: [89815, 300, false],
        p1: [89549, 300, false]
      },
      sample: {
        p0: tf.ᐃᐃⲆⲆⲆ,
        p1: tf.ᐃᐃⲆⲆⲆ,
        p2: tf.ᐃᐃⲆⲆⲆ
      }
    },
    ⲆⲆΔⲆᐃⵠᐃ: {
      ⵠⵠᐃΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        w3: [89025, 300, false],
        w0: [88195, 300, false],
        w2: [88751, 300, xo],
        w1: [88473, 300, false]
      },
      sample: {
        w0: tf.ᐃᐃⲆⲆⲆ,
        w1: tf.ᐃᐃⲆⲆⲆ,
        w2: tf.ᐃᐃⲆⲆⲆ,
        w3: tf.ᐃᐃⲆⲆⲆ
      }
    },
    ⲆⵠᐃⵠᐃΔⲆ: {
      ⵠⵠᐃΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        ΔⵠᐃᐃΔᐃⲆ: [92249, 500, false],
        ⵠⲆΔⵠⲆΔᐃ: [54524, 11393, true],
        ΔⲆΔⲆⵠⲆⲆ: [91022, 400, false],
        ΔⲆΔⵠⲆᐃⲆ: [31658, 813, true],
        ᐃⲆΔΔᐃ: [12356, 6965, oa],
        ⲆᐃⲆⵠⵠⵠΔ: [66961, 21223, true],
        ΔⲆⲆⵠᐃⲆⵠ: [32604, 21890, Gq],
        ⲆΔⲆⵠⲆΔᐃ: [19882, 8301, Gj],
        ⲆᐃΔᐃᐃⵠⵠ: [66961, 21223, true],
        ⲆᐃᐃⲆⵠⲆⲆ: [66014, 925, true],
        ⵠⲆᐃΔⲆ: [91431, 400, false],
        ᐃΔᐃⵠⲆ: [28380, 1797, xk],
        ⲆⲆⵠᐃΔⲆⵠ: [30562, 655, xk],
        ⵠᐃⲆⵠᐃⲆᐃᐃⲆ: [ar, 2800, true],
        ⵠᐃⵠⲆᐃⲆⲆ: [3100, 8800, true]
      },
      sample: {
        ⵠᐃⲆⵠᐃⲆᐃᐃⲆ: Tl,
        ⵠᐃⵠⲆᐃⲆⲆ: 1,
        ⲆΔⲆⵠⲆΔᐃ: 1,
        ΔⲆⲆⵠᐃⲆⵠ: 1,
        ⵠⲆΔⵠⲆΔᐃ: 1,
        ⲆᐃⲆⵠⵠⵠΔ: Xn,
        ⲆᐃΔᐃᐃⵠⵠ: 1,
        ᐃⲆΔΔᐃ: tf.ᐃᐃⲆⲆⲆ,
        ᐃΔᐃⵠⲆ: tf.ᐃᐃⲆⲆⲆ,
        ⲆⲆⵠᐃΔⲆⵠ: tf.ᐃᐃⲆⲆⲆ,
        ΔⲆΔⵠⲆᐃⲆ: tf.ᐃᐃⲆⲆⲆ,
        ⲆᐃᐃⲆⵠⲆⲆ: tf.ᐃᐃⲆⲆⲆ,
        ΔⲆΔⲆⵠⲆⲆ: tf.ΔⵠΔ,
        ⵠⲆᐃΔⲆ: tf.ΔⵠΔ,
        ΔⵠᐃᐃΔᐃⲆ: tf.ΔⵠΔ
      }
    }
  };
  function sf(b, c, d, e, f, i, j, a, k, h, l) {
    this.r = Wl;
    this.ΔᐃⲆΔᐃ = b;
    this.ᐃⵠΔᐃΔⵠⵠ = b;
    this.ⵠᐃᐃ = c;
    this.ⵠΔⲆ = d;
    this.fade = e;
    this.ⵠⲆⲆⵠⲆⵠᐃ = f;
    this.ⲆΔΔⲆⲆΔᐃ = i;
    this.ⲆᐃΔⲆ = j;
    this.ΔΔᐃⵠΔΔΔ = a;
    this.source = k;
    this.source.ⲆΔⵠΔⵠⵠⵠ = k.x + k.w;
    this.source.ⵠⲆᐃⲆⵠ = k.y + k.ΔⵠⲆ;
    this.ΔᐃⵠΔⲆⲆᐃⵠⲆ = h;
    this.ⵠⲆᐃⲆᐃⵠⵠ = l;
    this.ᐃⵠᐃⲆᐃᐃᐃ = 0;
    this.ᐃᐃⲆⵠᐃᐃᐃ = {
      ⲆⲆᐃᐃ: ta,
      d: 5
    };
    this.ⵠΔΔⵠⵠ = function () {
      this.ΔᐃⲆΔᐃ -= _w;
      if (this.ΔᐃⲆΔᐃ < 0) {
        this.ΔᐃⲆΔᐃ = this.ᐃⵠΔᐃΔⵠⵠ;
        var a = af.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ.playing(this.ⵠᐃᐃ);
        var b = af.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ.playing(this.ⵠΔⲆ);
        if (a && !b) {
          var c = this.ⲆᐃΔⲆ.volume(this.ⵠᐃᐃ) * Uw;
          var d = (Math.random() * this.ⲆΔΔⲆⲆΔᐃ + this.ⵠⲆⲆⵠⲆⵠᐃ) * Uw;
          this.ⲆᐃΔⲆ.fade(c, d, this.fade, this.ⵠᐃᐃ);
        } else if (!a && b) {
          c = this.ⲆᐃΔⲆ.volume(this.ⵠΔⲆ) * Uw;
          d = (Math.random() * this.ⲆΔΔⲆⲆΔᐃ + this.ⵠⲆⲆⵠⲆⵠᐃ) * Uw;
          this.ⲆᐃΔⲆ.fade(c, d, this.fade, this.ⵠΔⲆ);
        }
      }
    };
    this.transition = function () {
      this.ΔᐃⲆΔᐃ = this.ᐃⵠΔᐃΔⵠⵠ;
      this.ᐃᐃⲆⵠᐃᐃᐃ.d = this.ᐃᐃⲆⵠᐃᐃᐃ.ⲆⲆᐃᐃ;
      if (cf.time) {
        this.ⲆᐃΔⲆ.fade(0, this.ⵠⲆⲆⵠⲆⵠᐃ * Uw, this.ΔΔᐃⵠΔΔΔ, this.ⵠᐃᐃ);
        this.ⲆᐃΔⲆ.play(this.ⵠᐃᐃ);
        if (this.ⲆᐃΔⲆ.playing(this.ⵠΔⲆ)) {
          var a = this.ⲆᐃΔⲆ.volume(this.ⵠΔⲆ) * Uw;
          this.ⲆᐃΔⲆ.fade(a, 0, this.ΔΔᐃⵠΔΔΔ, this.ⵠΔⲆ);
        }
      } else {
        this.ⲆᐃΔⲆ.fade(Hi, this.ⵠⲆⲆⵠⲆⵠᐃ * Uw, this.ΔΔᐃⵠΔΔΔ, this.ⵠΔⲆ);
        this.ⲆᐃΔⲆ.play(this.ⵠΔⲆ);
        if (this.ⲆᐃΔⲆ.playing(this.ⵠᐃᐃ)) {
          a = this.ⲆᐃΔⲆ.volume(this.ⵠᐃᐃ) * Uw;
          this.ⲆᐃΔⲆ.fade(a, wj, this.ΔΔᐃⵠΔΔΔ, this.ⵠᐃᐃ);
        }
      }
    };
    this.check = function (a) {
      if (this.ᐃⵠᐃⲆᐃᐃᐃ) {
        if (ᐃⵠΔⲆ.ⵠⲆᐃⲆᐃⵠⵠ(a, this.ΔᐃⵠΔⲆⲆᐃⵠⲆ)) {
          if (!$w.transition && tf.ⲆⵠⵠΔⲆΔᐃ > cf.ΔᐃᐃΔⲆ.now) {
            if (cf.time) {
              if (!this.ⲆᐃΔⲆ.playing(this.ⵠᐃᐃ)) {
                this.ᐃᐃⲆⵠᐃᐃᐃ.d -= _w;
                if (this.ᐃᐃⲆⵠᐃᐃᐃ.d < mj) {
                  this.transition();
                }
              }
            } else if (!this.ⲆᐃΔⲆ.playing(this.ⵠΔⲆ)) {
              this.ᐃᐃⲆⵠᐃᐃᐃ.d -= _w;
              if (Rq > this.ᐃᐃⲆⵠᐃᐃᐃ.d) {
                this.transition();
              }
            }
          }
        } else {
          this.ᐃⵠᐃⲆᐃᐃᐃ = st;
          if (this.ⲆᐃΔⲆ.playing(this.ⵠᐃᐃ)) {
            var b = this.ⲆᐃΔⲆ.volume(this.ⵠᐃᐃ) * Uw;
            this.ⲆᐃΔⲆ.fade(b, Bb, this.ΔΔᐃⵠΔΔΔ, this.ⵠᐃᐃ);
          }
          if (this.ⲆᐃΔⲆ.playing(this.ⵠΔⲆ)) {
            b = Uw * this.ⲆᐃΔⲆ.volume(this.ⵠΔⲆ);
            this.ⲆᐃΔⲆ.fade(b, Ih, this.ΔΔᐃⵠΔΔΔ, this.ⵠΔⲆ);
          }
        }
      } else if (ᐃⵠΔⲆ.ⵠⲆᐃⲆᐃⵠⵠ(a, this.ⵠⲆᐃⲆᐃⵠⵠ)) {
        this.ᐃⵠᐃⲆᐃᐃᐃ = $b;
        if (!$w.transition && cf.ΔᐃᐃΔⲆ.now < tf.ⲆⵠⵠΔⲆΔᐃ) {
          this.transition();
        }
      }
    };
    this.ᐃⲆΔ = function (a, b) {
      var c;
      var d;
      c = this.source.x > a.x ? $w.ΔⵠΔᐃᐃⲆΔ(this.source.x) : a.x > this.source.ⲆΔⵠΔⵠⵠⵠ ? $w.ΔⵠΔᐃᐃⲆΔ(this.source.ⲆΔⵠΔⵠⵠⵠ) : b.x;
      d = a.y < this.source.y ? $w.ⲆᐃᐃᐃΔᐃΔ(this.source.y) : this.source.ⵠⲆᐃⲆⵠ < a.y ? $w.ⲆᐃᐃᐃΔᐃΔ(this.source.ⵠⲆᐃⲆⵠ) : b.y;
      this.ⲆᐃΔⲆ.pos(c, d, -0.5, this.ⵠᐃᐃ);
      this.ⲆᐃΔⲆ.pos(c, d, -0.5, this.ⵠΔⲆ);
    };
  }
  function hf(b, c, d, e, f, g) {
    const i = (8 << (b >> 24 & 255)) + (16 << (b & 255)) + (0 << (b >> 8 & 255)) + (24 << (b >> Yb & 255));
    const a = (24 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (16 << (c & 255)) + (8 << (c >> 24 & 255));
    const j = ~(f & 14288) & f | ~(f & 14288) & 14288;
    const h = function (b, c, d, e) {
      const f = (16 << (b >> 8 & 255)) + (24 << (b & 255)) + (8 << (b >> 16 & 255)) + (0 << (b >> 24 & hg));
      const g = ~(c & 58389) & 58389 | ~(c & 58389) & c;
      const h = yt(f, 0, 0, (Dg << (e & 255)) + (24 << (e >> 8 & 255)) + (0 << (e >> 16 & 255)) + (16 << (e >> 24 & 255)));
      const a = yt(g, 0, 0, f);
      return (0 << ((h ^ a) >> 16 & 255)) + (16 << ((h ^ a) >> 24 & 255)) + (24 << ((h ^ a) & 255)) + (8 << ((h ^ a) >> 8 & 255));
    }(i, a, 0, ~(e & 31976) & 31976 | ~(e & 31976) & e);
    yt(j, 0, 0, a);
    return (h | 55350) & ~(h & 55350);
  }
  function lf(b, c, d) {
    const e = ~(b & 9014) & (b | 9014);
    const f = (8 << (c >> 8 & $h)) + (16 << (c & 255)) + (24 << (c >> 16 & 255)) + (0 << (c >> 24 & 255));
    const g = d ^ 14636;
    const h = hf(e, f, 0, e, f);
    (function (b, c, d) {
      const e = ~(b & 35461) & 35461 | ~(b & 35461) & b;
      const f = ~(c & 543) & (c | 543);
      const g = (0 << (d >> 24 & 255)) + (24 << (d >> 8 & 255)) + (16 << (d & 255)) + (8 << (d >> 16 & 255));
      const h = Tw(e, f, g, e, f);
      const a = Af(g, e, f, g, e);
    })(e, f, g);
    return h ^ 39930;
  }
  ᐃᐃΔⵠⲆ = {
    ᐃⲆⵠᐃⲆΔⵠ: 300,
    ᐃᐃᐃⵠΔⲆΔ: qo,
    ΔⲆΔⵠⲆΔᐃⵠᐃ: 0.2,
    ⵠΔᐃⲆⵠΔΔ: 100,
    ΔⵠⵠΔᐃⲆⵠ: lh,
    ⲆⵠΔΔⵠΔⵠⲆⲆ: 0.2,
    ΔⲆΔᐃⲆⲆΔⲆⲆ: 0.4,
    ⲆΔⵠⲆⲆΔΔⲆᐃ: 0.2,
    ⲆΔⲆᐃⲆΔΔ: 2,
    ⵠⵠⵠᐃΔΔⵠ: 0,
    ⲆⲆΔⲆᐃ: 2,
    ᐃᐃⵠᐃΔⲆᐃ: Y,
    ᐃⲆΔᐃᐃⵠᐃ: 1,
    ⲆᐃᐃⵠⵠⲆᐃ: 4
  };
  function gf(a, b, c) {
    this.ⲆΔⵠⲆᐃᐃΔ = a;
    this.c = 0;
    this.ⲆᐃΔⲆ = b;
    this.ⵠⲆΔᐃⲆ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + sd) % this.max;
      var a = this.ⵠⲆΔᐃⲆ[this.c];
      this.ⲆΔⵠⲆᐃᐃΔ.ΔⲆⲆΔⲆⵠⵠ(this.ⲆᐃΔⲆ, a);
      this.ⲆᐃΔⲆ.play(a);
    };
  }
  function uf(a) {
    this.ᐃᐃΔᐃⵠΔᐃ = zs;
    this.ᐃⲆᐃᐃ = 0;
    this.mode = -Te;
    this.ᐃΔᐃⵠⲆ = $w.sample.ᐃΔᐃⵠⲆ[a];
    this.ⲆⲆⵠᐃΔⲆⵠ = $w.sample.ⲆⲆⵠᐃΔⲆⵠ[a];
    this.ΔⲆΔⵠⲆᐃⲆ = $w.sample.ΔⲆΔⵠⲆᐃⲆ[a];
    this.ⲆᐃᐃⲆⵠⲆⲆ = $w.sample.ⲆᐃᐃⲆⵠⲆⲆ[a];
    this.ΔᐃⲆΔᐃⲆΔ = new gf(this, af.ⲆΔᐃⵠᐃⵠᐃ.ⵠⵠᐃΔᐃ, $w.ⲆⲆⵠΔⲆ.ΔᐃⲆΔᐃⲆΔ[a]);
    this.ⲆᐃᐃᐃⲆ = new gf(this, af.ⲆⲆΔⲆᐃⵠᐃ.ⵠⵠᐃΔᐃ, $w.ⲆⲆⵠΔⲆ.ⲆᐃᐃᐃⲆ[a]);
    this.ⵠⲆΔⲆⲆ = new gf(this, af.ⲆⲆⲆⵠⵠⵠⵠ.ⵠⵠᐃΔᐃ, $w.ⲆⲆⵠΔⲆ.ⵠⲆΔⲆⲆ[a]);
    this.ᐃⵠΔᐃⵠ = a;
    this.x = Yh;
    this.y = 0;
    this.ᐃⵠᐃᐃΔ = fl;
    this.ΔᐃⲆΔᐃ = ᐃᐃΔⵠⲆ.ⲆⲆⵠΔⲆⲆⵠⲆᐃ;
    this.ⲆⲆΔⲆ = {
      y: os,
      x: 0
    };
    this.ᐃΔⵠⲆⵠ = af.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ;
    this.ΔⲆΔⵠᐃⲆⵠⵠᐃ = function (a) {
      if (a === tf.ΔᐃΔΔΔ) {
        this.ΔᐃⲆΔᐃⲆΔ.play();
      } else if (a === tf.ⵠᐃΔΔΔ) {
        this.ⲆᐃᐃᐃⲆ.play();
      } else if (a === tf.ᐃΔΔΔΔ) {
        this.ⵠⲆΔⲆⲆ.play();
      }
    };
    this.ⵠⵠᐃᐃⲆᐃΔ = function (a) {
      if (a.ⲆᐃⵠⵠⵠΔΔ > Rq) {
        return ᐃᐃΔⵠⲆ.ⲆⲆΔⲆᐃ;
      } else if (a.ΔⵠᐃⲆᐃⲆⵠ > ya) {
        return ᐃᐃΔⵠⲆ.ᐃⲆΔᐃᐃⵠᐃ;
      } else if (wg < a.ⲆΔΔΔᐃ || a.ⵠⲆΔᐃⵠ > 0) {
        return ᐃᐃΔⵠⲆ.ᐃᐃᐃⵠΔⲆΔ;
      } else {
        return ᐃᐃΔⵠⲆ.ⵠⵠⵠᐃΔΔⵠ;
      }
    };
    this.ᐃΔΔΔᐃ = function (a) {
      this.ᐃᐃΔᐃⵠΔᐃ = mj;
      this.ᐃⲆᐃᐃ = a;
      var b = cf.Δⵠⵠᐃᐃ[a];
      b.ᐃⵠΔᐃⵠ = this.ᐃⵠΔᐃⵠ;
      this.mode = this.ⵠⵠᐃᐃⲆᐃΔ(b);
      this.ⲆⲆΔⲆ.x = b.x;
      this.ⲆⲆΔⲆ.y = b.y;
    };
    this.ᐃΔΔⲆⲆΔⲆ = function () {
      this.ᐃᐃΔᐃⵠΔᐃ = 1;
      this.mode = -1;
      this.ᐃΔⵠⲆⵠ.stop(this.ᐃΔᐃⵠⲆ);
      this.ᐃΔⵠⲆⵠ.stop(this.ⲆⲆⵠᐃΔⲆⵠ);
      this.ᐃΔⵠⲆⵠ.stop(this.ΔⲆΔⵠⲆᐃⲆ);
      this.ᐃΔⵠⲆⵠ.stop(this.ⲆᐃᐃⲆⵠⲆⲆ);
    };
    this.fade = function (a, b) {
      var c = this.ᐃΔⵠⲆⵠ.volume(a) * ef;
      this.ᐃΔⵠⲆⵠ.fade(c, 0, b, a);
    };
    this.ΔⲆⲆΔⲆⵠⵠ = function (a, b) {
      if (this.ᐃⵠᐃᐃΔ && this.ᐃⵠΔᐃⵠ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⵠΔΔⵠⵠ = function (b, c, d, e, f, g, i) {
      this.ΔᐃⲆΔᐃ = g;
      if (e && f === this.mode) {
        var a = ef * this.ᐃΔⵠⲆⵠ.volume(b);
        if (this.ᐃⵠᐃᐃΔ) {
          var j = (Math.random() * d + c) * ef;
          this.ᐃΔⵠⲆⵠ.fade(a, j, i, b);
        } else {
          this.ᐃΔⵠⲆⵠ.fade(a, Hi, i, b);
        }
      } else if (f != this.mode && this.ᐃⵠᐃᐃΔ) {
        this.ᐃΔⵠⲆⵠ.fade(Lr, (c + d) * ef, i, b);
      } else if (this.ᐃⵠᐃᐃΔ) {
        a = ef * this.ᐃΔⵠⲆⵠ.volume(b);
        j = (Math.random() * d + c) * ef;
        this.ᐃΔⵠⲆⵠ.fade(a, j, i, b);
      }
      this.ΔⲆⲆΔⲆⵠⵠ(this.ᐃΔⵠⲆⵠ, b);
      this.ᐃΔⵠⲆⵠ.play(b);
    };
    this.ᐃⲆΔ = function () {
      var a = cf.Δⵠⵠᐃᐃ[this.ᐃⲆᐃᐃ];
      this.ΔᐃⲆΔᐃ -= _w;
      if (this.ΔᐃⲆΔᐃ <= 0) {
        var b = 0;
        if (a.x != this.ⲆⲆΔⲆ.x || a.y != this.ⲆⲆΔⲆ.y) {
          if (!this.ᐃⵠᐃᐃΔ) {
            b = 1;
            this.ᐃⵠᐃᐃΔ = 1;
          }
          this.x = $w.ΔⵠΔΔⲆⵠⵠ(a.x, ᐃᐃΔⵠⲆ.ⲆΔⲆᐃⲆΔΔ);
          this.y = $w.ⵠⵠΔⲆΔΔⲆ(a.y, ᐃᐃΔⵠⲆ.ⲆΔⲆᐃⲆΔΔ);
        } else if (this.ᐃⵠᐃᐃΔ) {
          b = 1;
          this.ᐃⵠᐃᐃΔ = Hi;
        }
        this.ⲆⲆΔⲆ.x = a.x;
        this.ⲆⲆΔⲆ.y = a.y;
        Ⲇᐃⵠᐃ = this.ⵠⵠᐃᐃⲆᐃΔ(a);
        if (this.mode != Ⲇᐃⵠᐃ) {
          if (ᐃᐃΔⵠⲆ.ᐃⲆΔᐃᐃⵠᐃ === this.mode) {
            this.fade(this.ᐃΔᐃⵠⲆ, ᐃᐃΔⵠⲆ.ᐃⲆⵠᐃⲆΔⵠ);
          } else if (this.mode === ᐃᐃΔⵠⲆ.ⲆⲆΔⲆᐃ) {
            this.fade(this.ⲆⲆⵠᐃΔⲆⵠ, ᐃᐃΔⵠⲆ.ⵠΔᐃⲆⵠΔΔ);
          } else if (ᐃᐃΔⵠⲆ.ⵠⵠⵠᐃΔΔⵠ === this.mode) {
            this.fade(this.ΔⲆΔⵠⲆᐃⲆ, ᐃᐃΔⵠⲆ.ΔⵠⵠΔᐃⲆⵠ);
          } else if (ᐃᐃΔⵠⲆ.ᐃᐃᐃⵠΔⲆΔ === this.mode) {
            this.fade(this.ⲆᐃᐃⲆⵠⲆⲆ, ᐃᐃΔⵠⲆ.ᐃᐃⵠᐃΔⲆᐃ);
          }
        }
        if (Ⲇᐃⵠᐃ === ᐃᐃΔⵠⲆ.ᐃⲆΔᐃᐃⵠᐃ) {
          this.ⵠΔΔⵠⵠ(this.ᐃΔᐃⵠⲆ, 0.08, 0.3, b, Ⲇᐃⵠᐃ, ᐃᐃΔⵠⲆ.ΔⲆΔᐃⲆⲆΔⲆⲆ, ᐃᐃΔⵠⲆ.ᐃⲆⵠᐃⲆΔⵠ);
        } else if (Ⲇᐃⵠᐃ === ᐃᐃΔⵠⲆ.ⲆⲆΔⲆᐃ) {
          this.ⵠΔΔⵠⵠ(this.ⲆⲆⵠᐃΔⲆⵠ, 0.2, 0.3, b, Ⲇᐃⵠᐃ, ᐃᐃΔⵠⲆ.ΔⲆΔⵠⲆΔᐃⵠᐃ, ᐃᐃΔⵠⲆ.ⵠΔᐃⲆⵠΔΔ);
        } else if (Ⲇᐃⵠᐃ === ᐃᐃΔⵠⲆ.ⵠⵠⵠᐃΔΔⵠ) {
          this.ⵠΔΔⵠⵠ(this.ΔⲆΔⵠⲆᐃⲆ, 0.3, 0.6, b, Ⲇᐃⵠᐃ, ᐃᐃΔⵠⲆ.ⲆΔⵠⲆⲆΔΔⲆᐃ, ᐃᐃΔⵠⲆ.ΔⵠⵠΔᐃⲆⵠ);
        } else if (ᐃᐃΔⵠⲆ.ᐃᐃᐃⵠΔⲆΔ === Ⲇᐃⵠᐃ) {
          this.ⵠΔΔⵠⵠ(this.ⲆᐃᐃⲆⵠⲆⲆ, 0.1, 0.25, b, Ⲇᐃⵠᐃ, ᐃᐃΔⵠⲆ.ⲆⵠΔΔⵠΔⵠⲆⲆ, ᐃᐃΔⵠⲆ.ᐃᐃⵠᐃΔⲆᐃ);
        }
        this.mode = Ⲇᐃⵠᐃ;
      }
    };
    this.check = function () {
      var a = cf.Δⵠⵠᐃᐃ[this.ᐃⲆᐃᐃ];
      if (a) {
        return Bh;
      } else {
        this.ᐃΔΔⲆⲆΔⲆ(a);
        return false;
      }
    };
  }
  ΔΔⵠΔᐃᐃΔ = 0;
  document.getElementById("version").innerHTML = jw.ᐃⵠⵠΔⵠⲆΔ + ".3";
  var bf;
  var Vw = [];
  var Ww = {
    time: Math.floor(Math.random() * Ob),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = Xr.ᐃᐃΔΔⵠ[Ww.time];
  Ww.items.push(new qw(nw.ΔᐃᐃⲆⲆ, 0, 0, 0, 0, Math.random() * Math.PI * xq, Vh, 1));
  Ww.items.push(new qw(nw.ⵠⵠⵠⲆΔ, Da, ig, 0, 0, Lr, 0, mb));
  Ww.items.push(new qw(nw.ⵠⲆΔⵠᐃ, 0, st, 0, mj, Math.PI / 4, os, 0));
  Ww.items.push(new qw(nw.ⵠⵠⵠⲆΔ, 0, Bb, 0, fl, fl, 0, 5));
  Ⲇⵠᐃⵠ = new function () {
    var c = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + Et[324] + "]";
      }
    }
    this.ᐃᐃᐃⲆ = null;
    this.ᐃⲆᐃᐃⵠ = st;
    this.ⲆΔⲆΔⵠ = [];
    this.ⲆΔⵠᐃⲆⲆⵠ = {};
    this.ⲆⲆᐃΔᐃ = [[], [], [], [], [], [], [], [], []];
    this.ᐃΔⲆΔⲆΔᐃ = [-wt, -Gh, -Gh, -Gh, -ie, -og, -zg, -1, -1];
    this.ᐃᐃΔⲆⵠ = 0;
    this.ⵠᐃᐃⵠΔⲆᐃ = fl;
    this.ⲆⲆⵠⲆᐃΔⲆ = function (a) {
      if (ew !== xg) {
        c.ⲆΔⲆΔⵠ.push({
          a: ew.name,
          gm: ew.mode,
          idx: Zj,
          m: Ak,
          nu: 0,
          id: Ih
        });
        a();
        return;
      }
      fetch(gw + "/list", {
        method: "GET"
      }).then(function (b) {
        if (b.ok) {
          b.json().then(function (b) {
            c.ⲆΔⲆΔⵠ = [];
            c.ⲆΔⵠᐃⲆⲆⵠ = {};
            for (let a in kw.ΔᐃⲆᐃⵠⵠᐃ) {
              const b = kw.ΔᐃⲆᐃⵠⵠᐃ[a];
              c.ⲆΔⲆΔⵠ.push({
                a: "Auto Select",
                gm: b,
                m: 100,
                nu: Mg,
                auto: Tg
              });
            }
            var d = zg;
            var e = Hj;
            var f = nl;
            for (let j = wg; b.length > j; j++) {
              const i = b[j];
              const a = i.n;
              const k = i.l;
              const h = i.p;
              const m = [];
              for (let b = fl; h.length > b; b++) {
                const c = h[b];
                m.push(a + c[0]);
              }
              for (let b = 0; b < k.length; b++) {
                const g = k[b];
                let h;
                let a = kw.ΔᐃⲆᐃⵠⵠᐃ[g[e]];
                let i = a + g[d];
                h = a in c.ⲆΔⵠᐃⲆⲆⵠ ? ++c.ⲆΔⵠᐃⲆⲆⵠ[a] : c.ⲆΔⵠᐃⲆⲆⵠ[a] = 1;
                if (i in c.ⲆΔⵠᐃⲆⲆⵠ) {
                  ᐃⲆΔⲆⲆᐃⲆ = ++c.ⲆΔⵠᐃⲆⲆⵠ[i];
                } else {
                  ᐃⲆΔⲆⲆᐃⲆ = c.ⲆΔⵠᐃⲆⲆⵠ[i] = 1;
                }
                c.ⲆΔⲆΔⵠ.push({
                  name: g[f],
                  a: kw.ΔΔⲆΔᐃⵠⵠⵠΔ[g[d]] + " " + ᐃⲆΔⲆⲆᐃⲆ,
                  r: g[d],
                  gm: kw.ΔᐃⲆᐃⵠⵠᐃ[g[e]],
                  idx: h,
                  m: 100,
                  nu: g[3],
                  id: g[d] + g[0],
                  p: m
                });
              }
            }
            a();
          });
        } else {
          dj.setTimeout(function () {
            c.ⲆⲆⵠⲆᐃΔⲆ(a);
          }, 3000);
        }
      });
    };
    this.ⲆΔᐃᐃΔⲆⲆⵠⵠ = function (a) {
      var b = [];
      for (var c = Mg; a.length > c; c++) {
        if (a[c].a.indexOf(Ha) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return Hi;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ᐃⲆⵠᐃᐃΔΔ = function (b) {
      var c = Ih;
      for (var d = Da; d < b.length; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (Ⲇⵠᐃⵠ.ᐃΔⲆΔⲆΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ] === -1) {
        Ⲇⵠᐃⵠ.ᐃΔⲆΔⲆΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ] = e.selectedIndex = Ⲇⵠᐃⵠ.ⲆΔᐃᐃΔⲆⲆⵠⵠ(b);
      } else {
        e.selectedIndex = Ⲇⵠᐃⵠ.ᐃΔⲆΔⲆΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + Et[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Et[323] + " (" + this.ⵠΔᐃⲆⲆⵠⵠ + ") " + Et[325] + "</li>";
      for (d = 0; d < b.length; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Et[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -og;
        for (var d = Ⲇⵠᐃⵠ.ⲆⲆᐃΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ], e = 0; e < d.length; e++) {
          if (b === a(d[e])) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          Ⲇⵠᐃⵠ.ᐃΔⲆΔⲆΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ⵠΔᐃⲆⲆⵠⵠ = 0;
    this.ᐃⲆᐃⵠⲆⲆⵠΔⲆ = function () {
      this.ⵠΔᐃⲆⲆⵠⵠ = In;
      for (var a = 0; Ⲇⵠᐃⵠ.ⲆΔⲆΔⵠ.length > a; a++) {
        if (this.ⲆΔⲆΔⵠ[a].gm == "experimental") {
          this.ⲆⲆᐃΔᐃ[kw.ⵠΔᐃᐃⲆ].push(this.ⲆΔⲆΔⵠ[a]);
        } else if (this.ⲆΔⲆΔⵠ[a].gm == "zombies") {
          this.ⲆⲆᐃΔᐃ[kw.ΔΔΔΔᐃ].push(this.ⲆΔⲆΔⵠ[a]);
        } else if (this.ⲆΔⲆΔⵠ[a].gm == "community") {
          this.ⲆⲆᐃΔᐃ[kw.ⵠΔⲆᐃⵠ].push(this.ⲆΔⲆΔⵠ[a]);
        } else if (this.ⲆΔⲆΔⵠ[a].gm == "forest") {
          this.ⲆⲆᐃΔᐃ[kw.ⲆⲆⲆⲆᐃ].push(this.ⲆΔⲆΔⵠ[a]);
        } else if (this.ⲆΔⲆΔⵠ[a].gm == "battle-royale") {
          this.ⲆⲆᐃΔᐃ[kw.ᐃⲆⵠⲆΔΔᐃ].push(this.ⲆΔⲆΔⵠ[a]);
        } else if (this.ⲆΔⲆΔⵠ[a].gm == "vampires") {
          this.ⲆⲆᐃΔᐃ[kw.ᐃᐃⲆΔⵠ].push(this.ⲆΔⲆΔⵠ[a]);
        } else {
          this.ⲆⲆᐃΔᐃ[kw.ⵠᐃᐃⲆⲆ].push(this.ⲆΔⲆΔⵠ[a]);
        }
        this.ⵠΔᐃⲆⲆⵠⵠ += this.ⲆΔⲆΔⵠ[a].nu;
      }
      for (a = 0; this.ⲆⲆᐃΔᐃ.length > a; a++) {
        if (this.ⲆⲆᐃΔᐃ[a].length === 0) {
          this.ⲆⲆᐃΔᐃ[a].push({
            a: Et[327],
            ⲆᐃⲆⲆᐃΔⵠⲆᐃ: Zj,
            ⵠΔ: "127.0.0.1",
            ⲆⲆⵠ: 80
          });
        }
      }
      this.ᐃⲆⵠᐃᐃΔΔ(this.ⲆⲆᐃΔᐃ[0]);
      this.ⵠΔΔⲆⵠ = function (a) {
        Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ = a;
        Ⲇⵠᐃⵠ.ᐃⲆⵠᐃᐃΔΔ(Ⲇⵠᐃⵠ.ⲆⲆᐃΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ]);
        Ⲇⵠᐃⵠ.ᐃⲆⵠᐃᐃΔΔ(Ⲇⵠᐃⵠ.ⲆⲆᐃΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ]);
        document.getElementById("servselect").selectedIndex = Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ;
      };
    };
    this.ΔⲆⵠᐃᐃⵠΔ = 0;
    this.Ⲇⵠᐃⵠᐃⵠⵠ = 0;
    this.ΔΔⲆⵠΔ = null;
    this.timeout = function () {
      c.Ⲇⵠᐃⵠᐃⵠⵠ++;
      c.ᐃᐃᐃⲆ.close();
      if (jw.ᐃᐃΔΔΔΔᐃⵠᐃ < c.Ⲇⵠᐃⵠᐃⵠⵠ) {
        xf = Xn;
        bf.ᐃΔⵠΔᐃΔᐃΔᐃ = jw.ΔⵠⲆⵠⲆⲆΔΔⲆ;
        c.ⲆⲆⵠⵠⲆ(Et[300]);
        bf.waiting = false;
        if (Xw.reconnect.enabled) {
          Zw.ᐃⵠⲆΔⲆ(bf.ⲆᐃⵠⲆⵠ);
        }
      } else {
        c.ᐃᐃⵠⲆⲆᐃᐃ();
      }
    };
    this.Δᐃᐃⵠⵠⵠᐃ = function (a) {
      if (this.ᐃⲆᐃᐃⵠ == this.ᐃᐃᐃⲆ.ᐃⲆᐃᐃⵠ) {
        this.ᐃⲆᐃᐃⵠ++;
        this.ⲆⲆⵠⵠⲆ(Et[301] + a);
        Zw.ᐃⵠⲆΔⲆ(bf.ⲆᐃⵠⲆⵠ);
      }
    };
    this.ΔΔⵠⲆΔⵠⵠ = function () {
      this.ⲆⲆⵠⵠⲆ("You speak too much");
    };
    this.ⲆΔΔΔⵠᐃΔᐃΔ = function () {
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Et[302]);
      bf.waiting = false;
    };
    this.ⲆⲆⲆΔⵠⲆⵠΔⵠ = function () {
      Xw.ⵠΔⲆⵠΔ.open = false;
    };
    this.ⲆⲆⵠⵠⲆⵠⲆΔⵠ = function () {
      Zw.ⵠΔΔⵠⵠΔᐃ = os;
    };
    this.ᐃⲆᐃᐃᐃᐃΔΔⵠ = function () {
      Zw.ᐃⲆⲆᐃⲆΔᐃ = 0;
    };
    this.ⲆᐃⵠΔⲆΔⲆⵠᐃ = function (a) {
      Xw.ⵠΔⲆᐃⲆ.ᐃⲆⲆΔⵠ = a;
      if (cf.ΔΔⲆΔⲆ > -300) {
        if (a === Qs) {
          this.ⲆⲆⵠⵠⲆ(Et[340]);
        } else {
          this.ⲆⲆⵠⵠⲆ(Et[341]);
        }
      }
    };
    this.ⵠᐃⵠᐃᐃ = function (a) {
      Xw.ⵠᐃⵠᐃᐃ = a;
    };
    this.ⲆᐃⲆⲆⵠΔⵠΔΔ = function (a) {
      Xw.ⲆΔᐃᐃᐃᐃᐃ = a;
    };
    this.ⲆΔᐃᐃᐃᐃᐃ = function (a) {
      Xw.ⲆⵠᐃⵠΔ.ᐃⲆⲆΔⵠ = a;
      if (cf.ⲆΔΔΔᐃ > -300) {
        if (a === 0) {
          this.ⲆⲆⵠⵠⲆ(Et[342]);
        } else {
          this.ⲆⲆⵠⵠⲆ(Et[343]);
        }
      }
    };
    this.ᐃⵠΔᐃΔᐃΔⵠᐃ = function (a) {
      if (Bb === a) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (Pn === a) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (ea === a) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ΔΔⲆΔⵠΔⵠΔⵠ = function () {
      Zw.ⲆⲆⲆᐃΔⵠᐃ = Yh;
    };
    this.ⵠΔΔⲆΔᐃᐃⵠⲆ = function () {
      Zw.ⵠⵠⵠᐃᐃᐃΔ = 0;
    };
    this.ᐃⲆᐃΔΔΔⵠⲆⵠ = function () {
      Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ = [];
      Xw.ᐃΔᐃⵠ.ⲆΔΔ = [];
      Xw.ᐃΔᐃⵠ.id = -1;
      Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.stop();
      Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ = [];
      Xw.ΔᐃⲆⵠ.ΔⲆⵠΔᐃ = false;
      Xw.ΔᐃⲆⵠ.ΔⲆⵠⵠᐃΔⵠⲆⲆ = vt;
      Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
      Xw.ΔᐃⲆⵠ.id = -Tl;
      Xw.ΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ = false;
      Xw.ΔᐃⲆⵠ.ᐃⵠⵠΔⲆ = Ta;
      Xw.ΔᐃⲆⵠ.ᐃⲆΔΔᐃ = false;
      Xw.ΔᐃⲆⵠ.ⵠΔⵠΔΔⲆᐃ = Ag;
      Xw.ΔᐃⲆⵠ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Fh, mj, pu, Lr, 1, zg);
    };
    this.ⵠⲆᐃⵠⵠⵠΔᐃⲆ = function () {
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ();
      bf.waiting = false;
    };
    this.ⵠⲆᐃⵠᐃᐃᐃ = function (a) {
      for (var b = os; b < a.length; b++) {
        if (typeof a[b] === "string") {
          a[b] = ᐃⵠΔⲆ.ⲆⲆΔⲆᐃⵠⲆ(a[b]);
        }
      }
      Xw.ⲆΔⵠⲆⵠ.ᐃᐃᐃⲆⲆ(a[1], a[jk], a[ci], a[4]);
    };
    this.message = function (a) {
      this.ⲆⲆⵠⵠⲆ(a);
    };
    this.ⲆⲆᐃᐃⵠⵠⲆⲆⲆ = function () {
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Et[339]);
      bf.waiting = false;
    };
    this.ⵠΔⲆⵠⵠΔⵠⲆⵠ = function () {
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Et[338]);
      bf.waiting = Fh;
    };
    this.ᐃⵠⲆⲆⲆⵠᐃΔΔ = function () {
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Et[304]);
      bf.waiting = Mh;
    };
    this.ᐃⵠΔᐃⲆⵠⵠᐃⲆ = function () {
      Xw.ᐃΔᐃⵠ.ΔΔᐃⵠⲆⵠⵠ(1, 0);
      Zw.ΔᐃⲆᐃΔᐃⵠ();
    };
    this.ⲆⲆⵠⵠⵠᐃΔⲆⵠ = function (a) {
      var b = a[Hg];
      var c = cf.ⵠΔΔⲆ[b];
      c.ΔⵠΔᐃ = a[Lt];
      c.ΔⵠΔᐃᐃ = a[3];
      c.ⲆⵠᐃΔⲆⲆⲆ = a[Pe];
      c.ᐃΔⲆⵠⲆ = a[hl];
      c.ⲆⲆⲆⵠΔ = a[6];
      c.ᐃᐃⵠΔΔ = a[wk];
      c.level = a[8];
      var d = cf.Δⵠⵠᐃᐃ[b * cf.ΔᐃⵠᐃⲆΔΔ];
      if (d) {
        d.ΔⵠΔᐃ = a[Pn];
        d.ΔⵠΔᐃᐃ = a[3];
        d.ⲆⵠᐃΔⲆⲆⲆ = a[4];
        d.ᐃΔⲆⵠⲆ = a[z];
      }
    };
    this.ΔⵠⵠᐃⵠΔⲆᐃΔ = function (a) {
      if (a === 29) {
        Xw.ᐃΔᐃⵠ.ΔΔᐃⵠⲆⵠⵠ(1, Hi);
        Zw.ΔᐃⲆᐃΔᐃⵠ();
      } else {
        this.ΔΔᐃᐃⵠⵠΔ([wj, a, 1]);
      }
      Xw.ΔᐃⲆⵠ.ⵠΔⵠᐃⵠᐃᐃ();
    };
    this.ⲆᐃⵠⵠⲆⲆΔⵠⵠ = function (a) {
      Xw.ᐃΔᐃᐃⲆ.ΔᐃⲆΔᐃ = 0;
      Xw.ΔᐃⲆⵠ.ΔⲆⵠⵠᐃⵠⵠⲆΔ(a);
    };
    this.ΔⲆᐃⲆΔⵠⲆⵠᐃ = function (a) {
      for (var b = Ws[a].r, c = os; c < b.length; c++) {
        if (Xw.ᐃΔᐃⵠ.max > Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length || Ih < Xw.ᐃΔᐃⵠ.ⲆΔΔ[b[c][0]]) {
          var d = Math.floor(b[c][ie] * 0.8);
          if (!d) {
            continue;
          }
          this.ΔΔᐃᐃⵠⵠΔ([wg, b[c][0], d]);
        }
      }
      Xw.ΔᐃⲆⵠ.ⵠΔⵠᐃⵠᐃᐃ();
    };
    this.ⵠᐃⵠΔΔⵠⲆᐃᐃ = function (a) {
      Xw.ᐃΔᐃᐃⲆ.ΔᐃⲆΔᐃ = Mg;
      Xw.ΔᐃⲆⵠ.ΔΔⲆΔⲆⵠᐃⲆⵠ(a);
    };
    this.ⲆⲆⵠⵠⲆ = function (a) {
      if (Xw.alert.text) {
        if (a !== Xw.alert.text && Xw.alert.list[Xw.alert.list.length - sd] !== a) {
          Xw.alert.list.push(a);
        }
      } else {
        Xw.alert.text = a;
      }
    };
    this.ᐃΔⵠᐃΔⵠᐃⵠᐃ = function () {
      this.ⲆⲆⵠⵠⲆ(Et[305]);
    };
    this.ᐃⲆⵠΔⲆᐃⵠⲆΔ = function () {
      var a;
      a = Xw.ⵠΔⲆ == 0 ? Et[306] : Et[307] + (Xw.ⵠΔⲆ + 1) + Et[308];
      this.ⲆⲆⵠⵠⲆ(a);
      Xw.ⵠΔⲆ++;
    };
    this.ⵠⵠᐃⲆⵠΔΔⲆΔ = function () {
      clearTimeout(c.ΔΔⲆⵠΔ);
      Xw.reconnect.enabled = C;
      Xw.ⲆᐃΔⵠⲆ = nt;
      this.ⲆⲆⵠⵠⲆ(Et[309]);
      Zw.ᐃⵠⲆΔⲆ(bf.ⲆᐃⵠⲆⵠ);
      this.ᐃᐃᐃⲆ.close();
    };
    this.ᐃΔⲆΔⲆⵠⲆᐃⵠ = function () {
      xf = 1;
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Et[310]);
      bf.waiting = C;
    };
    this.ⵠΔᐃⲆᐃⲆᐃⲆᐃ = function () {
      xf = au;
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Et[311]);
      bf.waiting = false;
    };
    this.ᐃⲆΔⲆⵠⲆⲆⲆᐃ = function (a) {
      var b = a[Xn];
      var c = cf.ⵠΔΔⲆ;
      c[b].ⲆⲆΔⵠᐃ = a[vg];
      c[b].ΔⵠΔᐃ = a[sl];
      c[b].ΔⵠΔᐃᐃ = a[Pl];
      c[b].ⲆⵠᐃΔⲆⲆⲆ = a[Fk];
      c[b].ᐃΔⲆⵠⲆ = a[Qa];
      c[b].ⲆⲆⲆⵠΔ = a[7];
      c[b].ᐃᐃⵠΔΔ = a[8];
      c[b].level = a[Ns];
      c[b].ⲆΔΔᐃⲆ = Hi;
      c[b].ⲆΔⵠⵠⵠⵠᐃ = null;
      c[b].label = null;
      c[b].ᐃΔⲆⵠⲆΔⵠ = null;
      c[b].ⲆᐃΔⵠⲆ = true;
      if (cw === 1) {
        c[b].ⲆⲆΔⵠᐃ += "|" + b;
      }
    };
    this.ⵠⵠΔΔΔᐃΔΔᐃ = function () {
      this.ᐃᐃᐃⲆ[bw](sq[tq].stringify([32]));
    };
    this.ΔᐃⵠⵠΔΔΔΔᐃ = function () {
      this.ⲆⲆⵠⵠⲆ(Et[312]);
    };
    this.ⵠΔⵠΔⲆᐃⵠ = function () {
      this.ⲆⲆⵠⵠⲆ(Et[313]);
    };
    this.ⵠΔΔᐃⲆᐃⵠΔΔ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Xo[Tq].stringify([yl, a]));
      Xw.ⵠΔⲆⵠΔ.open = gh;
    };
    this.ⵠΔⵠᐃᐃⵠΔᐃᐃ = function (a) {
      for (var b = iw[a - 1].items, c = 0; b.length > c && Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length < Xw.ᐃΔᐃⵠ.max; c++) {
        var d = b[c][za];
        var e = b[c][ig];
        if (b[c][1] === 29) {
          Xw.ᐃΔᐃⵠ.ΔΔᐃⵠⲆⵠⵠ(wt, mj);
        } else {
          this.ΔΔᐃᐃⵠⵠΔ([0, d, e]);
        }
      }
    };
    this.ΔΔᐃᐃⵠⵠΔ = function (b) {
      for (var c = b.length, d = Xw.ᐃΔᐃⵠ, e = 1; e < c; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; h < d.ⲆᐃⲆⲆΔ.length; h++) {
          if (f == d.ⲆᐃⲆⲆΔ[h].id) {
            d.ⲆΔΔ[f] += g;
            break;
          }
        }
        if (d.ⲆᐃⲆⲆΔ.length == h) {
          d.ⲆΔΔ[f] = g;
          d.ⲆᐃⲆⲆΔ.push(Zw.ᐃᐃᐃ[f]);
          Zw.ΔᐃⲆᐃΔᐃⵠ();
        }
      }
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ⲆΔᐃΔ = function (b, c, d, e, f, g, h) {
      Xw.ⲆΔᐃΔ.ⵠᐃΔΔ = b / ar;
      Xw.ⲆΔᐃΔ.ΔⵠⲆ = c / Yq;
      Xw.ⲆΔᐃΔ.c = d / sa;
      Xw.ⲆΔᐃΔ.ⵠⵠⵠ = e / Uh;
      Xw.ⲆΔᐃΔ.ⵠᐃⵠ = f / Uh;
      Xw.ⲆΔᐃΔ.ΔⵠⲆΔᐃⲆΔ = g / Yq;
      Xw.ⵠᐃⵠᐃᐃ = h;
    };
    this.ΔⵠⲆᐃΔΔᐃⲆᐃ = function (a) {
      Zw.Δⵠᐃᐃ.modify(a, 2);
    };
    this.ⵠⵠⲆᐃᐃⵠΔⲆΔ = function (a) {
      Zw.Δⵠᐃᐃ.modify(a, Yh);
    };
    this.claimed = function (a) {
      Zw.Δⵠᐃᐃ.modify(a, 3);
    };
    this.ᐃⲆⵠᐃⲆᐃⵠΔΔ = function (a, b) {
      Xw.ⲆΔᐃΔ.ⵠᐃΔΔ = a / ar;
      Xw.ⵠᐃⵠᐃᐃ = b;
    };
    this.ⵠΔΔΔΔᐃᐃⵠᐃ = function (a) {
      Xw.ⲆΔᐃΔ.ⵠⵠⵠ = a / 100;
    };
    this.ⵠᐃΔⵠⵠⲆΔⵠⵠ = function (a) {
      Xw.ⲆΔᐃΔ.ΔⵠⲆ = a / 100;
    };
    this.ᐃᐃᐃᐃⲆⲆⲆΔⲆ = function (a) {
      Xw.ⲆΔᐃΔ.ΔⵠⲆΔᐃⲆΔ = a / Cn;
    };
    this.ⵠⲆⲆᐃⲆⲆⵠᐃⵠ = function (a) {
      Xw.ⲆΔᐃΔ.c = a / 100;
    };
    this.ΔᐃⵠⵠᐃᐃΔΔΔ = function (a) {
      cf.time = a;
      cf.transition = true;
      $w.transition = gs;
    };
    this.ΔᐃᐃⵠᐃΔΔΔⵠ = function () {
      document.getElementById("game_body").style.backgroundColor = Xr.ᐃᐃΔΔⵠ[cf.time];
    };
    this.ᐃⲆᐃⵠⲆᐃⲆΔΔ = function (a) {
      if (kw.ⲆⵠⲆⵠⲆⲆⵠ == cf.mode && cf.ⵠΔΔⲆ[a].ⲆⲆΔⵠᐃ !== "spectator") {
        this.ⲆⲆⵠⵠⲆ(cf.ⵠΔΔⲆ[a].ⲆⲆΔⵠᐃ + Et[314]);
      }
      cf.ⵠΔΔⲆ[a].ⲆᐃΔⵠⲆ = al;
    };
    this.ⲆⲆᐃᐃⵠⵠΔΔΔ = function (a) {
      var b = new Uint16Array(a);
      ⲆᐃΔⲆ.ⵠᐃⲆ.ⲆⲆΔᐃⵠ(b[Tl], b[2]);
    };
    this.ⵠΔᐃᐃΔⲆⲆΔⵠ = function (a) {
      var b = new Uint16Array(a);
      Xw.ⵠᐃⲆ.ⲆⲆΔᐃⵠ(b[1], b[2]);
    };
    this.ⲆⲆⲆΔⵠᐃΔΔΔ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - Vh) / 4, f = Lr; f < e; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = Math.PI * ((b[5 + Ct * f] >> 1) / 127) * 2;
        var k = cf.Δⵠⵠᐃᐃ[i * cf.ΔᐃⵠᐃⲆΔΔ + g];
        if (k && k.ᐃⲆⲆ) {
          if ($w.loaded && $w.ⲆᐃⵠⲆⵠ) {
            $w.ᐃⲆⲆ(b[Hh + f * 4] & Wl, ΔⲆᐃⲆⵠ[k.type], k.x, k.y);
          }
          k.ᐃⲆⲆ.angle = j;
          k.ᐃⲆⲆ.ᐃⲆΔ = j;
        }
      }
    };
    this.ⲆΔⵠⲆΔⲆⵠΔΔ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / Mq, e = 0; e < d; e++) {
        var f;
        var i = e * Os;
        var j = c[1 + i];
        var k = c[2 + i];
        var m = Math.PI * ((c[3 + i] >> zs) / 127) * 2;
        var p = c[ba + i];
        var q = Vw.ᐃᐃⲆⲆ[k][j];
        switch (p) {
          case 0:
            (f = q.p[fl][eu]).angle = m;
            f.ᐃⲆΔ = Yl;
            break;
          case Te:
            (f = q.s[0][Hi]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case Vg:
            (f = q.s[ie][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 3:
            (f = q.s[Rl][0]).angle = m;
            f.ᐃⲆΔ = Eh;
            break;
          case Wg:
            (f = q.t[wj][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 5:
            (f = q.t[1][Zj]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 6:
            (f = q.t[2][0]).angle = m;
            f.ᐃⲆΔ = cl;
            break;
          case cq:
            (f = q.t[3][Ih]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 8:
            (f = q.t[4][0]).angle = m;
            f.ᐃⲆΔ = Tg;
            break;
          case 9:
            (f = q.t[5][0]).angle = m;
            f.ᐃⲆΔ = ye;
            break;
          case Lb:
            (f = q.g[0][Ih]).angle = m;
            f.ᐃⲆΔ = oa;
            break;
          case 11:
            (f = q.g[pu][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 12:
            (f = q.g[2][Bb]).angle = m;
            f.ᐃⲆΔ = un;
            break;
          case Cq:
            (f = q.d[0][st]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 14:
            (f = q.d[Hg][Hi]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 15:
            (f = q.d[2][0]).angle = m;
            f.ᐃⲆΔ = Tg;
            break;
          case Kg:
            (f = q.b[0][0]).angle = m;
            f.ᐃⲆΔ = na;
            break;
          case 17:
            (f = q.b[Oq][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case Sa:
            (f = q.b[2][0]).angle = m;
            f.ᐃⲆΔ = y;
            break;
          case 19:
            (f = q.b[3][wj]).angle = m;
            f.ᐃⲆΔ = _g;
            break;
          case wq:
            (f = q.f[Yh][Rq]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 21:
            (f = q.f[1][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 22:
            (f = q.f[rs][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 23:
            (f = q.sw[0][Bb]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 24:
            (f = q.sw[zs][0]).angle = m;
            f.ᐃⲆΔ = na;
            break;
          case 25:
            (f = q.sw[lr][Bb]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 26:
            (f = q.gw[Rq][0]).angle = m;
            f.ᐃⲆΔ = mh;
            break;
          case 27:
            (f = q.gw[og][0]).angle = m;
            f.ᐃⲆΔ = xk;
            break;
          case 28:
            (f = q.gw[2][os]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 29:
            (f = q.dw[os][Ih]).angle = m;
            f.ᐃⲆΔ = na;
            break;
          case 30:
            (f = q.dw[Oq][0]).angle = m;
            f.ᐃⲆΔ = y;
            break;
          case 31:
            (f = q.dw[2][st]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 32:
            (f = q.a[wj][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 33:
            (f = q.a[$b][0]).angle = m;
            f.ᐃⲆΔ = kh;
            break;
          case 34:
            (f = q.a[Vg][0]).angle = m;
            f.ᐃⲆΔ = ye;
            break;
          case 35:
            (f = q.cs[0][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 36:
            (f = q.cs[1][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 37:
            (f = q.cs[2][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 38:
            (f = q.cs[Js][eu]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 40:
            (f = q.plm[fl][0]).angle = m;
            f.ᐃⲆΔ = Gq;
            break;
          case 41:
            (f = q.plm[gs][st]).angle = m;
            f.ᐃⲆΔ = Yl;
            break;
          case 42:
            (f = q.plm[2][wj]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 50:
            (f = q.re[mj][0]).angle = m;
            f.ᐃⲆΔ = Gq;
            break;
          case 51:
            (f = q.re[hb][0]).angle = m;
            f.ᐃⲆΔ = Kj;
            break;
          case 52:
            (f = q.re[H][Mg]).angle = m;
            f.ᐃⲆΔ = ye;
            break;
          case 55:
            (f = q.c[0][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 56:
            (f = q.m[0][0]).angle = m;
            f.ᐃⲆΔ = cl;
            break;
          case 57:
            (f = q.m[au][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 58:
            (f = q.m[Hj][wg]).angle = m;
            f.ᐃⲆΔ = true;
        }
        if ($w.loaded && $w.ⲆᐃⵠⲆⵠ && f) {
          $w.ᐃⲆⲆ(c[Hk + i] & Oq, ⵠΔⵠⵠ[p], f.x, f.y);
        }
      }
    };
    this.ⲆᐃⵠᐃⲆ = function () {
      this.ᐃᐃᐃⲆ[bw](jo[Io].stringify([36, Xw.ⲆᐃⵠᐃⲆ.Ⲇⵠⵠᐃ, Xw.ⲆᐃⵠᐃⲆ.ⵠΔᐃⲆⲆ]));
    };
    this.ⲆΔⵠⲆⵠᐃΔΔⲆ = function (a, b) {
      this.ᐃᐃᐃⲆ[bw](jo[zq].stringify([30, b, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ΔᐃⲆᐃⵠⲆⲆ = function (a, b, c) {
      if (b) {
        this.ᐃᐃᐃⲆ[bw](jo[zq].stringify([29, b, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
      } else {
        this.ᐃᐃᐃⲆ[bw](jo[Wo].stringify([31, c, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
      }
    };
    this.ⲆⵠⵠᐃⵠΔⲆΔⲆ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Lq[Nq].stringify([28, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ⲆᐃΔΔΔᐃⵠⵠᐃ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Lq[Zq].stringify([Wl, a]));
    };
    this.ⵠⲆⲆΔⲆⲆⲆΔΔ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Fq[Io].stringify([13, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ᐃⵠΔᐃΔᐃᐃⵠⲆ = function (a, b) {
      this.ᐃᐃᐃⲆ[bw](Xo[Nq].stringify([37, b, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ, a.type]));
    };
    this.ᐃᐃⲆᐃⵠⵠΔⵠΔ = function (a, b) {
      this.ᐃᐃᐃⲆ[bw](Xo[Nq].stringify([Ol, b, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ᐃΔΔⲆⲆΔⲆᐃᐃ = function (a, b, c) {
      this.ᐃᐃᐃⲆ[bw](Fq[zq].stringify([34, b, c, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ΔⲆⵠΔΔΔⵠ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Lq[Nq].stringify([3, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ, a.type]));
    };
    this.ΔᐃᐃΔᐃⲆⲆᐃⲆ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Lq[Nq].stringify([15, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ⲆⲆΔⲆΔⵠΔΔⵠ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Lq[Nq].stringify([24, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ⲆⵠᐃⲆΔⵠⲆⵠⲆ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Uq[Qq].stringify([ts, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ⵠⲆⲆⲆⲆᐃⵠΔⲆ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Xq[Tq].stringify([Zj, a.ⵠΔᐃⲆⲆ]));
    };
    this.ⵠⲆᐃᐃⲆΔᐃ = function (a) {
      c.ᐃᐃᐃⲆ[bw](_q[Zq].stringify([33, Xw.ΔⵠⲆᐃᐃ.id, Xw.ᐃΔⲆⲆⵠ[a]]));
    };
    this.ⲆᐃΔⵠΔⵠⲆⵠΔ = function () {
      c.ᐃᐃᐃⲆ[bw](kr[fr].stringify([35, Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ, Xw.ΔⵠⲆᐃᐃ.id]));
    };
    this.ΔⵠⵠΔΔⵠΔ = function () {
      c.ᐃᐃᐃⲆ[bw](jr[mr].stringify([23]));
    };
    this.ⵠᐃᐃΔⲆⵠⵠⲆΔ = function () {
      c.ᐃᐃᐃⲆ[bw](jr[Zq].stringify([21, Xw.ΔⵠⲆᐃᐃ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        Xw.ΔⵠⲆᐃᐃ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        Xw.ΔⵠⲆᐃᐃ.lock = Yh;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ⲆΔⲆ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        cf.ᐃⲆΔΔᐃⲆΔⲆⲆ();
      }
      for (var n = (e.length - Pn) / hr, o = Hi; n > o; o++) {
        var q = 2 + o * 18;
        var t = 1 + pn * o;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + Fk];
        var z = w * cf.ΔᐃⵠᐃⲆΔΔ + y;
        if (x & hw.ⲆΔⲆⵠⵠⵠⲆΔⵠ) {
          cf.ⵠᐃᐃⲆⵠⲆⵠⵠⲆ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + qq];
          var F = k[t + N];
          var G = k[t + 8];
          var H = Ul * (e[q + 1] / Li * Math.PI);
          if (cf.Δⵠⵠᐃᐃ[z]) {
            var I = cf.Δⵠⵠᐃᐃ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && ᐃⵠΔⲆ.ΔΔⵠΔ(I, I.r) > jw.ΔⵠⵠⵠᐃΔⵠⵠΔ) {
              I.x = B;
              I.y = D;
            }
            if (I.id !== Xw.id || w === 0) {
              I.ᐃⲆΔⵠⵠΔⵠ = H;
            }
            I.action |= x;
            I.info = E;
            I.ᐃⵠⵠⵠⲆ = F;
            I.ⵠᐃᐃⵠⵠ = G;
            if (I.ᐃⲆΔ) {
              I.ᐃⲆΔ(x);
            }
          } else {
            var J = new qw(A, w, y, B, D, H, x, E, F, G);
            cf.Δⵠⵠᐃᐃ[z] = J;
            cf.ⲆΔⲆ[A].push(J);
          }
        }
      }
    };
    this.ⵠⵠⵠⵠ = function (a) {
      this.ΔⲆⵠᐃᐃⵠΔ = yf;
      var b = new Uint16Array(a);
      Xw.ΔⲆⵠᐃⲆ.ᐃΔΔΔᐃ(b);
    };
    this.ⲆΔⲆΔⵠⵠᐃⵠⲆ = function (a) {
      if (Vs !== undefined) {
        Ws = Vs;
      }
      if (a.length > 0) {
        Vs = JSON.parse(JSON.stringify(Ws));
        for (var b = Bb; a.length > b; b++) {
          var c = a[b];
          var d = Ws[c.item];
          if (El !== d) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ⵠᐃⵠ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ⵠⲆⲆⵠΔᐃᐃ = function (a) {
      if (a && a.length !== Rq) {
        Xw.ⵠⲆⲆⵠΔᐃᐃ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ⵠᐃ = [];
          var f = Lh;
          var g = b.length * (f + Wg) + jn;
          var h = Zj;
          d.font = f + "px Baloo Paaji";
          for (var i = 0; i < b.length; i++) {
            if (b[i].charAt(0) === "#") {
              ⵠᐃ[i] = b[i].substring(eu, Xs);
              b[i] = b[i].substring(8);
            } else {
              ⵠᐃ[i] = "#FFFFFF";
            }
            h = Math.max(d.measureText(b[i]).width + Yb, h);
          }
          c.height = g;
          c.width = h;
          i = 0;
          for (; b.length > i; i++) {
            var j = nd(Tl, b[i], f, ⵠᐃ[i], null, null, null, null, null, "#000", 6);
            d.drawImage(j, js, (f + 4) * i + 5);
          }
          return c;
        }(a);
      } else {
        Xw.ⵠⲆⲆⵠΔᐃᐃ.message = lj;
      }
    };
    this.Ⲇᐃᐃᐃⵠ = function (a) {
      var b = cf.Δⵠⵠᐃᐃ[a[1] * cf.ΔᐃⵠᐃⲆΔΔ];
      if (b) {
        if (cf.mode === kw.ΔΔΔΔᐃ && kw.ΔⵠⲆΔⵠᐃⲆ === b.ΔⵠΔᐃ) {
          if (Xw.ⲆᐃⲆⵠᐃ) {
            if (Math.random() > 0.5) {
              b.text.push(a[Pn] + " ..." + ᐃⲆⵠⵠΔ);
            } else {
              b.text.push(ᐃⲆⵠⵠΔ + "... " + a[2]);
            }
          } else {
            b.text.push(ΔᐃᐃᐃⲆⵠΔ[Math.floor(Math.random() * ΔᐃᐃᐃⲆⵠΔ.length)]);
          }
        } else {
          b.text.push(a[Rl]);
        }
      }
    };
    this.ⲆᐃΔᐃᐃⵠᐃᐃᐃ = function (a) {
      if (Xw.ᐃΔᐃⵠ.max !== Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length || Ws[a].Δⵠⵠⵠ === 29 || Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(Ws[a].Δⵠⵠⵠ) != -1 || Xw.ᐃΔᐃⵠ.ᐃᐃⲆΔᐃⲆᐃΔⵠ(Ws[a].r)) {
        this.ᐃᐃᐃⲆ[bw](sq[tq].stringify([ib, a]));
        return 1;
      } else {
        this.ⵠΔⵠΔⲆᐃⵠ();
        return 0;
      }
    };
    this.ᐃᐃᐃⲆᐃ = function (a) {
      Xw.ΔᐃⲆⵠ.ΔⲆⲆⲆᐃⲆⵠⲆⵠ(a);
    };
    this.ᐃⵠⵠΔⲆ = function (a) {
      Xw.ΔᐃⲆⵠ.ᐃⵠⵠΔⲆ = a;
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ᐃⲆΔΔᐃ = function (a) {
      Xw.ΔᐃⲆⵠ.ᐃⲆΔΔᐃ = a;
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ⵠΔⵠΔΔⲆᐃ = function (a) {
      Xw.ΔᐃⲆⵠ.ⵠΔⵠΔΔⲆᐃ = a;
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ΔᐃⵠᐃⲆⵠΔⲆΔ = function (a) {
      this.ⲆⲆⵠⵠⲆ(Et[315]);
    };
    this.ΔᐃᐃΔⵠᐃᐃⵠⵠ = function () {
      Xw.ΔᐃⲆⵠ.ⵠΔⵠᐃⵠᐃᐃ();
    };
    this.ΔΔΔⲆⵠ = function (a) {
      Zw.ΔΔΔⲆⵠ.ⵠΔΔⲆ = [];
      var b = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = wj;
      for (var d = 1; d < a.length; d += Hj) {
        var e = {
          x: Math.floor(a[d] * cf.w / 250),
          y: Math.floor(a[d + 1] * cf.ΔⵠⲆ / 250)
        };
        if (b && !c && !Xw.ᐃⲆⲆΔΔᐃᐃ && ᐃⵠΔⲆ.ΔΔⵠΔ(e, b) < 250) {
          c += 1;
        } else {
          Zw.ΔΔΔⲆⵠ.ⵠΔΔⲆ.push(e);
        }
      }
    };
    this.ΔⵠⵠΔᐃᐃⵠⲆⲆ = function () {
      Xw.ⲆᐃⵠᐃⲆ.open = false;
      Xw.ᐃⲆᐃⲆⵠ.enabled = Ta;
      Xw.ᐃⲆᐃⲆⵠ.ΔᐃⲆΔᐃ = -1;
      Xw.ᐃⲆᐃⲆⵠ.label = null;
      Xw.ᐃⲆᐃⲆⵠ.ⵠⵠᐃΔⵠΔⵠ = null;
      Xw.ᐃⲆᐃⲆⵠ.now = -1;
    };
    this.ᐃⲆᐃⲆⵠ = function (a) {
      kw.ᐃⲆᐃⲆᐃᐃⵠ = a;
      Xw.ᐃⲆᐃⲆⵠ.enabled = cl;
      Xw.ᐃⲆᐃⲆⵠ.ΔᐃⲆΔᐃ = new Date().getTime();
      Xw.ᐃⲆᐃⲆⵠ.label = null;
      Xw.ᐃⲆᐃⲆⵠ.now = -1;
      for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = Da; c < b.length; c++) {
        var d = Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(b[c]);
        if (d != -1) {
          Xw.ᐃΔᐃⵠ.ⲆΔⲆⵠᐃᐃᐃ(b.length[c], d);
        }
      }
      Xw.ΔᐃⲆⵠ.ⵠΔⵠᐃⵠᐃᐃ();
    };
    this.ⵠⵠⲆᐃⵠᐃⵠⲆΔ = function (a, b, c) {
      this.ⵠⵠⲆⵠⵠᐃΔ(a, b * 256 + c);
    };
    this.ⵠⵠⲆⵠⵠᐃΔ = function (a, b) {
      Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
      Xw.ᐃΔᐃⵠ.ⲆΔΔⵠᐃⵠᐃ(a, b, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(a));
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ⵠⲆΔⵠᐃΔⵠⵠᐃ = function (a) {
      Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -mk;
      Xw.ᐃΔᐃⲆⵠ.wait = true;
      var b = Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(a);
      Xw.ᐃΔᐃⵠ.ⲆΔΔⵠᐃⵠᐃ(a, 1, b);
      if (b >= 0 && !Xw.ᐃΔᐃⵠ.ⲆΔΔ[a]) {
        Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
      }
      if (a == 159) {
        Xw.ᐃΔⲆⲆⵠ = [Xw.id];
      }
    };
    this.ⲆⲆΔⲆⲆᐃⵠⲆᐃ = function () {
      this.ᐃᐃᐃⲆ[bw](jo[Io].stringify([Hj]));
    };
    this.ⲆΔᐃΔΔΔⵠΔΔ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Xo[Wo].stringify([22, a.ΔᐃⲆⲆⲆ, a.id]));
    };
    this.ΔⵠᐃΔΔΔⵠⵠⵠ = function (a, b) {
      this.ᐃᐃᐃⲆ[bw](Xo[Nq].stringify([8, a, b]));
    };
    this.ΔᐃⲆⵠⲆⵠᐃⵠΔ = function () {
      var a = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      if (a) {
        var b = Math.PI * 2;
        this.ᐃᐃᐃⲆ[bw](Xo[Wo].stringify([9, Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ, Math.floor(k * ((a.angle + b) % b) / b), Xw.ΔᐃⲆⵠ.mode]));
      }
    };
    this.ΔᐃΔᐃΔ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -za;
          this.ᐃᐃᐃⲆ[bw](Fq[zq].stringify([25, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!Xw.ⲆᐃⲆⵠᐃ) {
            if (a === Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ) {
              Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -za;
            } else {
              Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case _r.ⲆᐃⲆⲆᐃⲆᐃⲆᐃ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!Xw.ⲆᐃⲆⵠᐃ) {
            Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
            if ((c = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ]) && a === c.right) {
              this.ᐃᐃᐃⲆ[bw](Lq[Nq].stringify([25, 7]));
            } else {
              Xw.ⲆᐃᐃᐃⲆ.wait = true;
              this.ᐃᐃᐃⲆ[bw](Uq[Qq].stringify([25, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!Xw.ⲆᐃⲆⵠᐃ) {
            Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
            if ((c = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ]) && a === c.right) {
              this.ᐃᐃᐃⲆ[bw](Xq[Tq].stringify([25, 7]));
            } else {
              this.ᐃᐃᐃⲆ[bw](_q[Zq].stringify([25, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!Xw.ⲆᐃⲆⵠᐃ) {
            Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
            var c = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
            this.ᐃᐃᐃⲆ[bw](_q[Zq].stringify([25, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ]) && c.ⵠΔⵠⲆᐃ !== a) {
            Xw.ⲆᐃᐃⲆΔ.wait = y;
          }
          this.ᐃᐃᐃⲆ[bw](Fq[Nq].stringify([25, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ᐃᐃᐃⲆ[bw](kr[fr].stringify([25, a]));
      }
    };
    this.ΔΔⵠΔⲆΔΔⲆⵠ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Xo[tq].stringify([7, a]));
    };
    this.ΔⲆΔΔⵠΔⵠⵠⵠ = function (a) {
      Xw.ᐃΔᐃⲆⵠ.wait = oa;
      var b = Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(a);
      Xw.ᐃΔᐃⵠ.ⲆΔⲆⵠᐃᐃᐃ(a, b);
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ⲆⵠⵠⵠᐃⲆⲆⲆⵠ = function (a, b) {
      this.ᐃᐃᐃⲆ[bw](sq[Tq].stringify([qh, a]));
    };
    this.ⲆⵠᐃⵠⵠΔⲆΔⵠ = function (a, c) {
      this.ᐃᐃᐃⲆ[bw](jo[Io].stringify([b, a]));
    };
    this.ⵠⵠᐃΔⲆⲆΔΔⵠ = function (a) {
      Xw.ᐃΔᐃⲆⵠ.wait = true;
      var b = Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(a);
      Xw.ᐃΔᐃⵠ.ⲆΔΔⵠᐃⵠᐃ(a, 1, b);
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ΔⵠΔΔⵠⵠᐃΔΔ = function (a) {
      var b = a[zs];
      var c = a[Rl];
      Xw.ᐃΔᐃⲆⵠ.wait = true;
      var d = Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(b);
      Xw.ᐃΔᐃⵠ.ⲆΔΔⵠᐃⵠᐃ(b, c, d);
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ΔⲆⲆΔⵠⵠⲆΔⲆ = function () {
      this.ᐃᐃᐃⲆ[bw](jo[Io].stringify([38]));
    };
    this.ⲆⵠⵠᐃᐃΔᐃⲆΔ = function (a) {
      var b = Math.PI * 2;
      this.ᐃᐃᐃⲆ[bw](Xo[Wo].stringify([gk, Math.floor($h * ((a + b) % b) / b)]));
    };
    this.ΔⵠᐃΔⵠᐃⵠⵠⲆ = function (a) {
      var b = Math.PI * 2;
      this.ᐃᐃᐃⲆ[bw](Xo[Wo].stringify([27, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ᐃᐃⲆᐃⲆⵠᐃᐃⵠ = function (a) {
      this.ᐃᐃᐃⲆ[bw](ᐃᐃⵠⲆΔΔⲆ[vq].stringify([Fr, a]));
    };
    this.ⲆⲆⵠᐃΔⲆⵠⲆΔ = function (a) {
      this.ᐃᐃᐃⲆ[bw](Lq[Nq].stringify([Ht, a]));
    };
    this.ΔⵠⵠⲆᐃⵠᐃΔΔ = function (a) {
      var b = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      if (Xw.ⲆᐃⲆⵠᐃ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ᐃⲆⵠⵠΔ);
        } else {
          b.text.push(ᐃⲆⵠⵠΔ + "... " + a.substring(st, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ᐃᐃᐃⲆ[bw](Lq[Nq].stringify([18, a]));
    };
    this.Δᐃⵠⵠⵠ = function (a) {
      var b = ⲆᐃΔⲆ.select.ⲆΔⲆ;
      if (mj != b.length) {
        var c = [4];
        var d = [];
        ᐃⵠΔⲆ.ⲆᐃⲆᐃⲆⵠⵠ(a, {
          x: ⲆᐃΔⲆ.ⵠᐃⲆ.rx,
          y: ⲆᐃΔⲆ.ⵠᐃⲆ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = Rq; b.length > e; e++) {
          d.push(b[e].ΔⲆᐃΔΔᐃΔᐃⵠ);
        }
        c.push(d);
        this.ᐃᐃᐃⲆ[bw](Uq[Qq].stringify(c));
      }
    };
    this.ⵠⵠᐃΔᐃⲆⵠ = 0;
    this.ⲆᐃΔΔⵠⵠΔ = {
      ⵠΔ: wg,
      ⵠΔⲆᐃ: Hi
    };
    this.ᐃΔΔⵠΔⵠΔᐃᐃ = function () {
      if (yf - this.ⵠⵠᐃΔᐃⲆⵠ > jw.ΔᐃᐃᐃⲆⵠᐃᐃΔ) {
        this.ⵠⵠᐃΔᐃⲆⵠ = yf;
        var a = Xw.ⵠᐃⲆ;
        var b = Math.floor(a.x / ah);
        var c = Math.floor(a.y / 100);
        if (b != this.ⲆᐃΔΔⵠⵠΔ.ⵠΔ || c != this.ⲆᐃΔΔⵠⵠΔ.ⵠΔⲆᐃ) {
          this.ᐃᐃᐃⲆ[bw](_q[Tq].stringify([Xi, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ⲆᐃΔΔⵠⵠΔ.ⵠΔ = b;
          this.ⲆᐃΔΔⵠⵠΔ.ⵠΔⲆᐃ = c;
        }
      }
    };
    this.ⵠᐃⵠⵠΔⵠⵠ = In;
    this.ⵠᐃⵠⲆⲆⵠᐃᐃΔ = function () {
      if (yf - this.ⵠᐃⵠⵠΔⵠⵠ > jw.ⲆⵠⲆⲆⲆΔΔⵠΔ) {
        this.ⵠᐃⵠⵠΔⵠⵠ = yf;
        this.ping();
      }
    };
    this.ΔΔᐃⲆⲆΔᐃᐃⲆ = function () {
      Xw.reconnect.enabled = true;
      if (this.ᐃⲆᐃᐃⵠ == this.ᐃᐃᐃⲆ.ᐃⲆᐃᐃⵠ) {
        this.ᐃⲆᐃᐃⵠ++;
        this.ᐃᐃᐃⲆ.close();
        Ⲇⵠᐃⵠ.connect();
      }
    };
    this.ⵠΔⲆⵠⲆᐃᐃᐃⵠ = function (a) {
      this.ⲆⲆⵠⵠⲆ(Et[316]);
      for (var b = 1; b < a.length; b++) {
        Xw.ᐃΔⲆⲆⵠ.push(a[b]);
      }
    };
    this.ΔⵠⵠⵠΔᐃᐃⵠⵠ = function (a) {
      this.ⲆⲆⵠⵠⲆ(cf.ⵠΔΔⲆ[a].ⲆⲆΔⵠᐃ + Et[318]);
      Xw.ᐃΔⲆⲆⵠ.push(a);
      var b = document.getElementById("team_box");
      if (Zw.ᐃⵠᐃᐃⲆ != -1 && b.style.display == "inline-block") {
        Zw.ⲆΔⵠᐃᐃ[Zw.ᐃⵠᐃᐃⲆ].action();
      }
    };
    this.ΔΔᐃΔΔⵠΔⵠᐃ = function () {
      this.ⲆⲆⵠⵠⲆ(Et[319]);
      Xw.ΔⵠⲆᐃᐃ.wait = Eh;
      Xw.ᐃΔⲆⲆⵠ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ᐃⲆⲆᐃᐃⵠⲆⵠⵠ = function (a) {
      if (a == Xw.id) {
        this.ⲆⲆⵠⵠⲆ(Et[320]);
        Xw.ΔⵠⲆᐃᐃ.wait = _g;
        Xw.ᐃΔⲆⲆⵠ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ⲆⲆⵠⵠⲆ(cf.ⵠΔΔⲆ[a].ⲆⲆΔⵠᐃ + Et[321]);
        for (var b = 0; b < Xw.ᐃΔⲆⲆⵠ.length; b++) {
          if (Xw.ᐃΔⲆⲆⵠ[b] == a) {
            Xw.ᐃΔⲆⲆⵠ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (Zw.ᐃⵠᐃᐃⲆ != -1 && c.style.display == "inline-block") {
          Zw.ⲆΔⵠᐃᐃ[Zw.ᐃⵠᐃᐃⲆ].action();
        }
      }
    };
    this.ⵠⲆᐃΔᐃⵠᐃΔᐃ = function (a) {
      Xw.ⲆᐃΔⵠⲆ = Mh;
      this.ⲆⲆⵠⵠⲆ(Et[322]);
      if (this.ᐃⲆᐃᐃⵠ == this.ᐃᐃᐃⲆ.ᐃⲆᐃᐃⵠ) {
        this.ᐃⲆᐃᐃⵠ++;
        Zw.ᐃⵠⲆΔⲆ(bf.ⲆᐃⵠⲆⵠ);
        this.ᐃᐃᐃⲆ.close();
      }
    };
    this.ⲆΔⲆᐃⵠΔᐃⲆⲆ = function (a, b) {
      Xw.ⲆᐃΔⵠⲆ = Fh;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⵠⵠⲆᐃⲆⵠⲆ = Gt[a][Math.floor(Math.random() * Gt[a].length)];
      Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⲆΔΔᐃⲆ = ᐃⵠΔⲆ.ᐃΔⵠᐃᐃᐃᐃ(cf.ⵠΔΔⲆ[Xw.id].ⲆΔΔᐃⲆ);
      Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⲆᐃⲆΔᐃⲆⲆ = ᐃⵠΔⲆ.ᐃΔⵠᐃᐃᐃᐃ(d[wt]);
      Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⵠᐃⵠΔᐃ = c[pu];
      this.ⲆⲆⵠⵠⲆ(Et[317]);
      if (this.ᐃᐃᐃⲆ.ᐃⲆᐃᐃⵠ == this.ᐃⲆᐃᐃⵠ) {
        this.ᐃⲆᐃᐃⵠ++;
        Zw.ᐃⵠⲆΔⲆ(Yw.ⲆᐃⵠⲆⵠ);
        this.ᐃᐃᐃⲆ.close();
        try {
          dj.Widget.adsRefresh();
        } catch (a) {}
      }
    };
    this.ping = function () {
      this.ᐃᐃᐃⲆ[bw](jw.ΔⲆᐃⵠⵠΔⵠᐃᐃ);
    };
    this.ΔⲆᐃⵠΔⵠᐃᐃᐃ = function () {
      if (this.ᐃᐃᐃⲆ.readyState == ea) {
        this.ΔⲆⵠᐃᐃⵠΔ -= jw.ⲆᐃⵠᐃⲆᐃⵠ;
      }
    };
    this.ᐃⵠⲆⲆⲆⵠᐃⵠⵠ = function () {
      if (jw.ⲆᐃⲆΔΔΔΔⵠΔ < _w) {
        this.ΔⲆⵠᐃᐃⵠΔ = yf;
      }
      if (jw.ⲆᐃⵠᐃⲆᐃⵠ < yf - this.ΔⲆⵠᐃᐃⵠΔ) {
        this.ΔⲆⵠᐃᐃⵠΔ = yf;
        this.ΔΔᐃⲆⲆΔᐃᐃⲆ();
      }
    };
    this.ᐃⲆⵠⲆⵠⵠⲆΔΔ = function (b) {
      xf++;
      clearTimeout(this.ΔΔⲆⵠΔ);
      document.getElementById("commandMainBoxName").innerHTML = this.ⲆⲆᐃΔᐃ[this.ᐃᐃΔⲆⵠ][this.ᐃΔⲆΔⲆΔᐃ[this.ᐃᐃΔⲆⵠ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ΔⲆⵠᐃᐃⵠΔ = yf;
      Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.ⵠΔΔⲆⲆ = Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.ⵠⲆⵠⲆⵠ;
      Xw.ⲆΔᐃΔ.ⵠⲆΔΔΔᐃΔ.ⵠΔΔⲆⲆ = Xw.ⲆΔᐃΔ.ⵠⲆΔΔΔᐃΔ.ⵠⲆⵠⲆⵠ;
      Xw.ⲆΔᐃΔ.ⲆᐃⵠΔΔⲆΔ.ⵠΔΔⲆⲆ = Xw.ⲆΔᐃΔ.ⲆᐃⵠΔΔⲆΔ.ⵠⲆⵠⲆⵠ;
      Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.ⵠΔΔⲆⲆ = Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.ⵠⲆⵠⲆⵠ;
      Xw.ⲆΔᐃΔ.ΔⲆⲆΔⵠ.ⵠΔΔⲆⲆ = Xw.ⲆΔᐃΔ.ΔⲆⲆΔⵠ.ⵠⲆⵠⲆⵠ;
      Xw.ⲆΔᐃΔ.ⵠᐃΔΔ = Wl;
      Xw.ⲆΔᐃΔ.c = ie;
      Xw.ⲆΔᐃΔ.ΔⵠⲆ = wt;
      Xw.ⲆΔᐃΔ.ⵠⵠⵠ = gs;
      Xw.ⲆΔᐃΔ.ⵠᐃⵠ = 1;
      Xw.ⲆΔᐃΔ.ΔⵠⲆΔᐃⲆΔ = 1;
      Xw.ⲆⲆΔΔΔᐃᐃ = _h;
      Zw.Ⲇⵠᐃⵠⵠ.display = 0;
      Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ = [];
      Xw.ᐃΔᐃⵠ.ⲆΔΔ = [];
      Xw.ᐃΔᐃⵠ.max = kw.ⲆᐃΔᐃⵠⲆⵠ;
      Xw.ᐃΔᐃⵠ.ᐃᐃΔⲆⲆΔΔ = 0;
      Xw.ᐃΔᐃⵠ.ᐃⵠΔⲆᐃ = In;
      Xw.ᐃΔᐃⵠ.id = -zg;
      Zw.ⵠΔΔⵠⵠΔᐃ = 1;
      Zw.ᐃⲆⲆᐃⲆΔᐃ = hb;
      Zw.ⵠⵠⵠᐃᐃᐃΔ = 1;
      Zw.ⲆⲆⲆᐃΔⵠᐃ = wt;
      Xw.ⲆᐃΔⵠⲆ = Gq;
      Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.stop();
      Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ = [];
      Xw.ΔᐃⲆⵠ.ΔⲆⵠΔᐃ = false;
      Xw.ΔᐃⲆⵠ.ΔⲆⵠⵠᐃΔⵠⲆⲆ = vj;
      Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
      Xw.ΔᐃⲆⵠ.id = -gs;
      Xw.ΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ = al;
      Xw.ΔᐃⲆⵠ.ᐃⵠⵠΔⲆ = Ei;
      Xw.ΔᐃⲆⵠ.ᐃⲆΔΔᐃ = false;
      Xw.ΔᐃⲆⵠ.ⵠΔⵠΔΔⲆᐃ = Ei;
      Xw.ΔᐃⲆⵠ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Qg, Hi, Hg, os, Xn, 1);
      Xw.ⲆᐃᐃᐃⲆ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 1, 0, 1 / Cs, 1);
      Xw.ⲆᐃᐃᐃⲆ.wait = Mh;
      Xw.ⲆᐃᐃⲆΔ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, gs, 0, 1 / z, za);
      Xw.ⲆᐃᐃⲆΔ.wait = false;
      Xw.ᐃΔᐃⲆⵠ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, Bb, 1, In, pu, 1);
      Xw.ᐃΔᐃⲆⵠ.wait = Jn;
      Xw.ΔⵠⲆᐃᐃ.id = -hb;
      Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ = -1;
      Xw.ΔⵠⲆᐃᐃ.wait = vt;
      Xw.ΔⵠⲆᐃᐃ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 1, Qs, 1 / 30, sd);
      Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.x = -1;
      Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.y = -au;
      Zw.ⲆⵠⲆⵠ.open = Ta;
      Zw.ΔΔΔⲆⵠ.ⵠΔΔⲆ = [];
      Xw.ΔΔⵠᐃᐃ.enabled = false;
      cf.mode = b[$b];
      if (b[20] !== undefined && b[21] !== cn) {
        cf.ⵠⲆᐃⲆᐃ = b[20];
        cf.ⲆⵠⲆⵠᐃ = b[21];
        cf.w = cf.ⵠⲆᐃⲆᐃ * cf.ᐃⲆⲆⲆⲆᐃᐃ;
        cf.ΔⵠⲆ = cf.ᐃᐃᐃⵠⵠᐃΔ * cf.ⲆⵠⲆⵠᐃ;
      }
      cf.ⲆΔᐃⲆⵠⵠⲆ = b[22];
      cf.ⵠⵠΔⲆᐃ = b[23];
      c.ⵠⲆⲆⵠΔᐃᐃ(b[24]);
      c.ⲆΔⲆΔⵠⵠᐃⵠⲆ(b[25]);
      Xw.ⵠΔⲆᐃⲆ.ᐃⲆⲆΔⵠ = b[26];
      Xw.ⲆΔᐃᐃᐃᐃᐃ = 0;
      Xw.ⲆⵠᐃⵠΔ.ᐃⲆⲆΔⵠ = b[27];
      cf.ⵠⵠⵠΔⵠⵠⲆΔⵠ(b[19]);
      cf.time = b[5];
      cf.ΔᐃᐃΔⲆ.ᐃⵠᐃⲆΔ = b[15];
      cf.ΔᐃᐃΔⲆ.ᐃΔΔΔᐃ = new Date().getTime();
      Zw.Δⵠᐃᐃ.ᐃⵠΔΔΔᐃⲆ = b[Ju];
      cf.transition = false;
      Xw.ⵠΔⲆ = b[Pn];
      Zw.Δⵠᐃᐃ.reset();
      Xw.ᐃΔⲆⲆⵠ = b[8];
      cf.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ] = [];
      cf.ⲆΔⲆ[nw.ⵠⵠⵠⲆΔ] = [];
      cf.ⲆΔⲆ[nw.ⵠⲆΔⵠᐃ] = [];
      cf.ⲆΔⲆ[nw.ΔᐃᐃⲆⲆ] = [];
      cf.ⲆΔⲆ[nw.ᐃΔΔⵠΔ] = [];
      cf.ⲆΔⲆ[nw.ⵠᐃΔⲆᐃ] = [];
      cf.ⲆΔⲆ[nw.ⲆΔᐃΔΔ] = [];
      cf.ⲆΔⲆ[nw.ᐃⵠᐃᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.ᐃⵠΔΔΔ] = [];
      cf.ⲆΔⲆ[nw.ⲆⵠΔᐃᐃ] = [];
      cf.ⲆΔⲆ[nw.ⲆⲆΔⲆⵠ] = [];
      cf.ⲆΔⲆ[nw.ᐃⲆⲆᐃΔ] = [];
      cf.ⲆΔⲆ[nw.ⲆΔⲆⵠΔ] = [];
      cf.ⲆΔⲆ[nw.ΔⵠⵠΔⲆ] = [];
      cf.ⲆΔⲆ[nw.ⲆⲆⲆⲆⵠ] = [];
      cf.ⲆΔⲆ[nw.ΔᐃⵠⲆⲆ] = [];
      cf.ⲆΔⲆ[nw.ᐃᐃᐃᐃᐃ] = [];
      cf.ⲆΔⲆ[nw.ⵠᐃⲆᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.ΔⵠⵠⲆᐃ] = [];
      cf.ⲆΔⲆ[nw.ⵠΔᐃⲆΔ] = [];
      cf.ⲆΔⲆ[nw.ᐃΔⵠⵠⵠ] = [];
      cf.ⲆΔⲆ[nw.ⵠΔᐃΔΔ] = [];
      cf.ⲆΔⲆ[nw.ᐃⲆΔᐃⲆ] = [];
      cf.ⲆΔⲆ[nw.ΔⵠⵠΔΔ] = [];
      cf.ⲆΔⲆ[nw.ΔΔⲆᐃⲆ] = [];
      cf.ⲆΔⲆ[nw.ΔⵠΔⲆΔ] = [];
      cf.ⲆΔⲆ[nw.ⵠΔⲆⵠᐃ] = [];
      cf.ⲆΔⲆ[nw.ᐃΔΔⵠᐃ] = [];
      cf.ⲆΔⲆ[nw.ᐃⲆⲆⲆⲆ] = [];
      cf.ⲆΔⲆ[nw.ⲆⲆⵠⵠᐃ] = [];
      cf.ⲆΔⲆ[nw.ΔⲆΔΔⲆ] = [];
      cf.ⲆΔⲆ[nw.ⵠⵠΔⵠⲆ] = [];
      cf.ⲆΔⲆ[nw.ⲆᐃⲆΔΔ] = [];
      cf.ⲆΔⲆ[nw.Ⲇᐃⵠᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.ⲆⵠᐃΔΔ] = [];
      cf.ⲆΔⲆ[nw.ΔⵠΔⵠⲆ] = [];
      cf.ⲆΔⲆ[nw.ᐃΔᐃⵠΔ] = [];
      cf.ⲆΔⲆ[nw.ᐃⵠⵠᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.ⲆⵠΔᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.ⲆⲆΔⵠⲆ] = [];
      cf.ⲆΔⲆ[nw.ⵠᐃⲆⲆΔ] = [];
      cf.ⲆΔⲆ[nw.ⵠΔΔⲆᐃ] = [];
      cf.ⲆΔⲆ[nw.ⵠΔΔⵠΔᐃΔ] = [];
      cf.ⲆΔⲆ[nw.ΔΔΔΔΔ] = [];
      cf.ⲆΔⲆ[nw.Δⵠᐃᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.Δᐃᐃᐃᐃ] = [];
      cf.ⲆΔⲆ[nw.ⲆⲆᐃⲆⵠ] = [];
      cf.ⲆΔⲆ[nw.ⲆⲆᐃⲆᐃ] = [];
      cf.ⲆΔⲆ[nw.ⵠⵠⵠⵠⲆ] = [];
      cf.ⲆΔⲆ[nw.ⲆⵠⲆᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.ⵠⲆⲆᐃΔ] = [];
      cf.ⲆΔⲆ[nw.ᐃΔⲆⲆⲆ] = [];
      cf.ⲆΔⲆ[nw.ΔΔⵠⲆⲆ] = [];
      cf.ⲆΔⲆ[nw.ⵠΔⵠᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.ⵠⵠᐃΔⲆᐃΔ] = [];
      cf.ⲆΔⲆ[nw.ᐃⵠΔⵠⵠ] = [];
      cf.ⲆΔⲆ[nw.ᐃΔⲆⲆΔ] = [];
      cf.ⲆΔⲆ[nw.ⲆⵠⵠΔⲆ] = [];
      cf.ⲆΔⲆ[nw.ᐃⲆᐃⲆΔ] = [];
      cf.ⲆΔⲆ[nw.ⵠᐃΔΔΔⵠΔ] = [];
      cf.ⲆΔⲆ[nw.ⵠⲆⲆⵠΔⲆⵠ] = [];
      cf.ⲆΔⲆ[nw.ⵠⲆⵠΔⲆⵠⵠ] = [];
      cf.ⲆΔⲆ[nw.ⵠΔⵠΔⵠᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.ⵠⵠⲆⵠΔ] = [];
      cf.ⲆΔⲆ[nw.ⲆᐃᐃⲆⵠ] = [];
      cf.ⲆΔⲆ[nw.ⵠⵠⲆᐃΔ] = [];
      cf.ⲆΔⲆ[nw.ᐃⲆⵠᐃΔ] = [];
      cf.ⲆΔⲆ[nw.ⵠΔᐃΔⵠ] = [];
      cf.ⲆΔⲆ[nw.ⲆᐃΔᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.ᐃΔⵠⵠΔ] = [];
      cf.ⲆΔⲆ[nw.ᐃⲆⵠᐃᐃ] = [];
      cf.ⲆΔⲆ[nw.Δⵠᐃⵠᐃ] = [];
      cf.ⲆΔⲆ[nw.ᐃⵠⵠⲆᐃ] = [];
      cf.ⲆΔⲆ[nw.ⵠⲆᐃᐃⲆ] = [];
      cf.ⲆΔⲆ[nw.Ⲇᐃⵠⵠⵠ] = [];
      cf.ⲆΔⲆ[nw.ⲆⵠᐃᐃΔ] = [];
      cf.ⲆΔⲆ[nw.ⵠᐃⵠᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.ⲆᐃⲆᐃⵠ] = [];
      cf.ⲆΔⲆ[nw.ⲆᐃⵠΔΔ] = [];
      cf.ⲆΔⲆ[nw.ΔΔΔⵠⵠ] = [];
      cf.ⲆΔⲆ[nw.ⵠΔⲆⲆΔ] = [];
      cf.ⲆΔⲆ[nw.ⲆᐃΔⲆⵠ] = [];
      cf.ⲆΔⲆ[nw.ⲆΔᐃⵠⲆ] = [];
      cf.ⲆΔⲆ[nw.ΔⵠᐃⲆⵠ] = [];
      cf.ⲆΔⲆ[nw.ΔⲆⵠⵠⵠ] = [];
      cf.ⲆΔⲆ[nw.ⲆⲆⵠⵠΔ] = [];
      cf.ⲆΔⲆ[nw.ⵠᐃΔⲆⲆ] = [];
      cf.ⲆΔⲆ[nw.ΔⲆⵠΔΔ] = [];
      cf.ⲆΔⲆ[nw.ⲆⵠⲆⵠⵠ] = [];
      cf.ⲆΔⲆ[nw.ⵠΔᐃᐃᐃ] = [];
      cf.Δⵠⵠᐃᐃ = [];
      cf.ΔᐃⵠᐃⲆΔΔ = b[7];
      Xw.id = b[9];
      Xw.ᐃⲆᐃᐃ = cf.ΔᐃⵠᐃⲆΔΔ * Xw.id;
      if ($w.loaded) {
        $w.ⵠΔΔⲆ[Lr].ᐃⲆᐃᐃ = Xw.ᐃⲆᐃᐃ;
        $w.ⵠΔΔⲆ[0].ᐃᐃΔᐃⵠΔᐃ = ya;
      }
      ff.ᐃΔᐃΔⵠΔᐃ();
      Xw.ⵠᐃⲆ.ⲆⲆΔᐃⵠ(b[qo], b[10]);
      cf.ⵠΔΔⲆ = [];
      var d = cf.ⵠΔΔⲆ;
      for (var e = 0; b[11] > e; e++) {
        d.push(new sw());
      }
      e = fl;
      for (var f = b[4]; f.length > e; e++) {
        var g = d[f[e].i];
        g.ⲆⲆΔⵠᐃ = f[e].n;
        g.ΔⵠΔᐃ = f[e].s;
        g.ΔⵠΔᐃᐃ = f[e].a;
        g.ⲆⲆⲆⵠΔ = f[e].c;
        g.ᐃΔⲆⵠⲆ = f[e].b;
        g.ᐃᐃⵠΔΔ = f[e].d;
        g.ⲆⵠᐃΔⲆⲆⲆ = f[e].g;
        g.level = f[e].l;
        g.ⲆΔΔᐃⲆ = ᐃⵠΔⲆ.ⲆⲆᐃⲆⵠΔⲆ(f[e].p);
        g.ⲆᐃΔⵠⲆ = true;
        if (Oq === cw) {
          g.ⲆⲆΔⵠᐃ += "|" + f[e].i;
        }
      }
      Xw.ΔⲆⵠᐃⲆ.sort();
      if (kw.ⲆⵠⲆⵠⲆⲆⵠ === cf.mode && cf.ⵠΔΔⲆ[Xw.id].ⲆⲆΔⵠᐃ === "spectator") {
        Xw.ᐃⲆⲆΔΔᐃᐃ = Eh;
      } else {
        Xw.ᐃⲆⲆΔΔᐃᐃ = false;
      }
      if (kw.ΔΔΔΔᐃ === cf.mode && kw.ΔⵠⲆΔⵠᐃⲆ === cf.ⵠΔΔⲆ[Xw.id].ΔⵠΔᐃ) {
        Xw.ⲆᐃⲆⵠᐃ = Yl;
      } else {
        Xw.ⲆᐃⲆⵠᐃ = false;
      }
      if (kw.ᐃᐃⲆΔⵠ === cf.mode && kw.ⵠⲆⵠⲆⵠⲆᐃ === cf.ⵠΔΔⲆ[Xw.id].ΔⵠΔᐃ) {
        Xw.ΔΔⵠⵠⲆᐃᐃ = true;
      } else {
        Xw.ΔΔⵠⵠⲆᐃᐃ = Ei;
      }
      ⵠⵠΔΔ.set("starve_token", Xw.Δⵠⵠⵠⵠ);
      if (b[12] === 0) {
        Xw.ⵠΔⲆⵠΔ.ΔᐃⲆΔᐃ = ig;
        Zw.Δⵠᐃᐃ.restore(b[Zh]);
        var h = b[Sq];
        if (h[29]) {
          Xw.ᐃΔᐃⵠ.ΔΔᐃⵠⲆⵠⵠ(au, os);
        }
        for (e = Lr; e < h.length; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ΔΔᐃᐃⵠⵠΔ([0, e, h[e]]);
          }
        }
        Xw.ⵠΔⲆⵠΔ.open = false;
      } else {
        if (cf.mode === kw.ⲆⲆⲆⲆᐃ) {
          this.ΔΔᐃᐃⵠⵠΔ([wg, 238, 1]);
        } else if (kw.ᐃᐃⲆΔⵠ === cf.mode) {
          if (Xw.ΔΔⵠⵠⲆᐃᐃ) {
            this.ΔΔᐃᐃⵠⵠΔ([wg, 190, 4]);
          } else {
            this.ΔΔᐃᐃⵠⵠΔ([0, 191, 3]);
          }
        }
        if (kw.ⵠᐃᐃⲆⲆ === cf.mode || cf.mode === kw.ᐃᐃⲆΔⵠ || cf.mode === kw.ⵠΔᐃᐃⲆ || cf.mode === kw.ⲆⲆⲆⲆᐃ) {
          Xw.ⵠΔⲆⵠΔ.ΔᐃⲆΔᐃ = new Date().getTime();
          Xw.ⵠΔⲆⵠΔ.open = true;
          Xw.ⵠΔⲆⵠΔ.value = b[13];
          Zw.ⵠΔⲆⵠΔ.ᐃΔΔΔᐃ();
        } else {
          Xw.ⵠΔⲆⵠΔ.ΔᐃⲆΔᐃ = Bb;
          Xw.ⵠΔⲆⵠΔ.open = false;
          Xw.ⵠΔⲆⵠΔ.value = Ih;
        }
        Xw.ᐃᐃᐃΔⵠⵠΔ = b[da].toString();
      }
      Xw.ᐃⲆᐃⲆⵠ.enabled = b[ks];
      Xw.ᐃⲆᐃⲆⵠ.ΔᐃⲆΔᐃ = -hb;
      Xw.ᐃⲆᐃⲆⵠ.label = null;
      Xw.ᐃⲆᐃⲆⵠ.now = -Xn;
      ⵠⵠΔΔ.set("starve_token_id", Xw.ᐃᐃᐃΔⵠⵠΔ);
      if (Xw.reconnect.enabled) {
        Xw.reconnect.rotate = 0;
        Xw.reconnect.enabled = vt;
      } else {
        bf.ᐃⵠⲆΔⲆ(Zw.ⲆᐃⵠⲆⵠ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + bf.ΔⵠΔᐃ + "A" + bf.ΔⵠΔᐃᐃ);
        }
      }
    };
    this.connect = function () {
      c.Ⲇⵠᐃⵠᐃⵠⵠ = Lr;
      c.ᐃᐃⵠⲆⲆᐃᐃ();
    };
    this.ᐃᐃⵠᐃⵠᐃⵠ = Gs;
    this.ⲆⵠⵠⵠΔⲆΔΔᐃ = function (b) {
      const d = c.ⲆΔⲆΔⵠ.filter(a => a.gm === b);
      const f = {};
      for (let a = eu; d.length > a; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== El) {
          if (f[c] === Za) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function g(a) {
        c.ᐃᐃⵠᐃⵠᐃⵠ = a;
        const b = f[a];
        const d = b[Math.floor(Math.random() * b.length)];
        c.ⲆⲆⲆᐃⵠᐃⵠ({
          domain: fw,
          is_tls: Gh,
          id: d.id,
          p: d.p
        });
      }
      if (c.ᐃᐃⵠᐃⵠᐃⵠ !== El) {
        g(c.ᐃᐃⵠᐃⵠᐃⵠ);
        return;
      }
      let h = 1;
      function i(a) {
        const b = new dj.XMLHttpRequest();
        const c = a[0];
        const d = c.p;
        const e = c.r;
        const f = d[Math.floor(Math.random() * d.length)];
        b.open("GET", "https://" + f + "." + fw + "/", true);
        b.onreadystatechange = function () {
          if (b.readyState === 4) {
            if (h === 0) {
              return;
            }
            h = 0;
            g(e);
          }
        };
        b.send();
      }
      for (let a in f) {
        i(f[a]);
      }
      dj.setTimeout(function () {
        if (h === 0) {
          return;
        }
        h = Lr;
        const a = dj.Object.keys(f);
        g(a[Math.floor(Math.random() * a.length)]);
      }, 5000);
    };
    this.ΔΔᐃⲆⵠⵠΔΔΔ = function () {
      let a = kw.ΔᐃⲆᐃⵠⵠᐃ[c.ᐃᐃΔⲆⵠ];
      console.log(cb, Hq, undefined);
      let b = c.ᐃΔⲆΔⲆΔᐃ[c.ᐃᐃΔⲆⵠ];
      let d = c.ⲆΔⲆΔⵠ.find(c => c.gm == a && c.idx == b);
      if (d === undefined) {
        c.ⲆⵠⵠⵠΔⲆΔΔᐃ(a);
      } else {
        c.ⲆⲆⲆᐃⵠᐃⵠ({
          domain: fw,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ᐃᐃⵠⲆⲆᐃᐃ = function () {
      console.log(Wh);
      if (ew === El) {
        c.ΔΔᐃⲆⵠⵠΔΔΔ();
      } else {
        c.ⲆⲆⲆᐃⵠᐃⵠ({
          domain: ew.domain,
          is_tls: ew.ssl,
          id: ew.id,
          p: [ew.p]
        });
      }
    };
    this.ⲆⲆⲆᐃⵠᐃⵠ = function (b) {
      let d = b.domain;
      let e = b.is_tls;
      let f = b.id;
      let g = b.p;
      let a = g[Math.floor(Math.random() * g.length)];
      let i = e ? "wss://" + a + "." + d + "/" + f : "ws://" + d;
      console.log(undefined, cn);
      c.ᐃᐃᐃⲆ = new dj.WebSocket(i);
      c.ᐃᐃᐃⲆ.binaryType = "arraybuffer";
      c.ᐃᐃᐃⲆ.ᐃⲆᐃᐃⵠ = c.ᐃⲆᐃᐃⵠ;
      c.ᐃᐃᐃⲆ.onmessage = function (a) {
        if (c.ᐃⲆᐃᐃⵠ == c.ᐃⲆᐃᐃⵠ) {
          if (typeof a.data == "string") {
            var b = JSON.parse(a.data);
            switch (b[0]) {
              case 0:
                c.Ⲇᐃᐃᐃⵠ(b);
                break;
              case 1:
                c.Δᐃᐃⵠⵠⵠᐃ(b[1]);
                break;
              case vg:
                c.ᐃⲆΔⲆⵠⲆⲆⲆᐃ(b);
                break;
              case Tr:
                c.ᐃⲆⵠⲆⵠⵠⲆΔΔ(b);
                break;
              case Pe:
                c.message(b[Te]);
                break;
              case 5:
                c.ⵠⲆᐃⵠᐃᐃᐃ(b);
                break;
              case pl:
                c.ⵠⲆⲆⵠΔᐃᐃ(b[1]);
            }
          } else {
            var d = new Uint8Array(a.data);
            switch (d[Qs]) {
              case 0:
                c.ⲆΔⲆ(a.data, d, ss);
                break;
              case Tl:
                c.ⲆΔⲆ(a.data, d, Kj);
                break;
              case 2:
                c.ΔᐃᐃΔⵠᐃᐃⵠⵠ();
                break;
              case 3:
                c.ΔΔᐃᐃⵠⵠΔ(new Uint16Array(a.data));
                break;
              case 4:
                c.ᐃⵠⲆⲆⲆⵠᐃΔΔ();
                break;
              case M:
                c.ⵠΔᐃⲆᐃⲆᐃⲆᐃ();
                break;
              case Ql:
                c.ΔᐃⵠᐃⲆⵠΔⲆΔ();
                break;
              case 7:
                c.ⲆΔⵠⲆΔⲆⵠΔΔ(a.data);
                break;
              case Xl:
                c.ΔⵠⵠᐃⵠΔⲆᐃΔ(d[Xn]);
                break;
              case ph:
                c.ⵠᐃⵠΔΔⵠⲆᐃᐃ(d[mk]);
                break;
              case J:
                c.ⵠΔⵠΔⲆᐃⵠ();
                break;
              case 11:
                c.ⵠⵠⲆⵠⵠᐃΔ(d[og], d[2]);
                break;
              case Uk:
                c.ᐃᐃᐃⲆᐃ(d[1]);
                break;
              case ys:
                c.ⲆⲆⲆΔⵠᐃΔΔΔ(d, a.data);
                break;
              case 14:
                c.ΔΔⵠⲆΔⵠⵠ();
                break;
              case 15:
                c.ᐃⲆᐃⵠⲆᐃⲆΔΔ(d[1]);
                break;
              case sr:
                c.ⲆΔᐃΔ(d[zg], d[2], d[3], d[Gi], d[5], d[6], d[wk]);
                break;
              case 17:
                c.ⵠΔᐃᐃΔⲆⲆΔⵠ(a.data);
                break;
              case hr:
                c.ΔᐃⵠⵠΔΔΔΔᐃ();
                break;
              case 19:
                c.ᐃⲆΔΔᐃ(d[Tl]);
                break;
              case Xa:
                c.ᐃⲆⵠΔⲆᐃⵠⲆΔ();
                break;
              case 21:
                c.ⵠⵠⵠⵠ(a.data);
                break;
              case 22:
                c.ΔᐃⵠⵠᐃᐃΔΔΔ(d[$b]);
                break;
              case 23:
                c.ⲆⲆᐃᐃⵠⵠΔΔΔ(a.data);
                break;
              case 24:
                c.ⵠⲆΔⵠᐃΔⵠⵠᐃ(d[Wl]);
                break;
              case 25:
                c.ⲆΔⲆᐃⵠΔᐃⲆⲆ(d[pu], a.data);
                break;
              case 26:
                c.ΔΔΔⲆⵠ(d);
                break;
              case 27:
                c.ⵠⵠᐃⲆⵠΔΔⲆΔ();
                break;
              case 28:
                c.ᐃⲆᐃⲆⵠ(d[gs]);
                break;
              case 29:
                c.ΔⵠⵠΔᐃᐃⵠⲆⲆ();
                break;
              case 30:
                c.ⵠⲆᐃΔᐃⵠᐃΔᐃ();
                break;
              case 31:
                c.ⵠΔⲆⵠⲆᐃᐃᐃⵠ(d);
                break;
              case 32:
                c.ᐃⲆⲆᐃᐃⵠⲆⵠⵠ(d[zg]);
                break;
              case 33:
                c.ΔⵠⵠⵠΔᐃᐃⵠⵠ(d[Gh]);
                break;
              case 34:
                c.ΔΔᐃΔΔⵠΔⵠᐃ();
                break;
              case 35:
                c.ⵠΔⵠᐃᐃⵠΔᐃᐃ(d[1]);
                break;
              case 36:
                c.ⵠΔⵠΔΔⲆᐃ(d[Gh]);
                break;
              case 37:
                c.ᐃⲆⵠᐃⲆᐃⵠΔΔ(d[wt], d[2]);
                break;
              case 38:
                c.ⵠᐃΔⵠⵠⲆΔⵠⵠ(d[$b]);
                break;
              case 39:
                c.ⵠΔΔΔΔᐃᐃⵠᐃ(d[1]);
                break;
              case 40:
                c.ᐃⵠΔᐃⲆⵠⵠᐃⲆ();
                break;
              case 41:
                c.ⲆⲆⵠⵠⵠᐃΔⲆⵠ(d);
                break;
              case 42:
                c.ΔⵠⲆᐃΔΔᐃⲆᐃ(d[wt]);
                break;
              case 43:
                c.ⵠⵠⲆᐃᐃⵠΔⲆΔ(d[hb]);
                break;
              case 44:
                c.claimed(d[1]);
                break;
              case 45:
                c.ⲆᐃⵠⵠⲆⲆΔⵠⵠ(d[1]);
                break;
              case 46:
                c.ΔⲆᐃⲆΔⵠⲆⵠᐃ(d[Wl]);
                break;
              case 47:
                c.ᐃⵠⵠΔⲆ(d[zs]);
                break;
              case 48:
                c.ᐃΔⵠᐃΔⵠᐃⵠᐃ();
                break;
              case 50:
                c.ⵠⵠⲆᐃⵠᐃⵠⲆΔ(d[1], d[2], d[3]);
                break;
              case 51:
                c.ᐃΔⲆΔⲆⵠⲆᐃⵠ();
                break;
              case 52:
                c.ΔⲆΔΔⵠΔⵠⵠⵠ(d[1]);
                break;
              case 53:
                c.ⵠⵠᐃΔⲆⲆΔΔⵠ(d[au]);
                break;
              case 54:
                c.ⲆⵠᐃⲆⲆΔⵠᐃⵠ();
                break;
              case 55:
                c.ᐃᐃᐃᐃⲆⲆⲆΔⲆ(d[1]);
                break;
              case 56:
                c.ⵠⲆⲆᐃⲆⲆⵠᐃⵠ(d[Wl]);
                break;
              case 57:
                c.ⵠΔⲆⵠⵠΔⵠⲆⵠ();
                break;
              case 58:
                c.ⲆⲆᐃᐃⵠⵠⲆⲆⲆ();
                break;
              case 59:
                c.ᐃⲆᐃΔΔΔⵠⲆⵠ();
                break;
              case 60:
                c.ⲆⲆⲆΔⵠⲆⵠΔⵠ();
                break;
              case 61:
                Xw.ⵠᐃⲆ.ⵠΔΔΔΔⲆⵠ = 0.2;
                Xw.ⵠᐃⲆ.ΔᐃⲆΔᐃ = ll;
                break;
              case 62:
                c.ΔⵠΔΔⵠⵠᐃΔΔ(new Uint16Array(a.data));
                break;
              case 63:
                c.ᐃⲆᐃᐃᐃᐃΔΔⵠ();
                break;
              case 64:
                c.ⲆⲆⵠⵠⲆⵠⲆΔⵠ();
                break;
              case 65:
                c.ⵠΔΔⲆΔᐃᐃⵠⲆ();
                break;
              case 66:
                c.ΔΔⲆΔⵠΔⵠΔⵠ();
                break;
              case 67:
                c.ᐃⵠΔᐃΔᐃΔⵠᐃ(d[Te]);
                break;
              case 68:
                c.ⲆᐃⵠΔⲆΔⲆⵠᐃ(d[1]);
                break;
              case 69:
                c.ⲆΔᐃᐃᐃᐃᐃ(d[1]);
                break;
              case 70:
                c.ⲆᐃⲆⲆⵠΔⵠΔΔ(d[1]);
                break;
              case 71:
                c.ⵠᐃⵠᐃᐃ(d[sd]);
            }
          }
        }
      };
      this.ᐃᐃᐃⲆ.onopen = function () {
        clearTimeout(c.ΔΔⲆⵠΔ);
        Xw.ⲆΔΔᐃⵠᐃⲆ = Xw.ⲆΔΔᐃⵠᐃⲆ || ᐃⵠΔⲆ.ΔⲆⵠᐃᐃΔΔ("token");
        ᐃⵠΔⲆ.ΔⲆΔⲆⵠⲆᐃ().then(a => {
          c.ᐃᐃᐃⲆ[bw](jr[fr].stringify([bf.ⲆⲆΔⵠᐃ.input.value, screen.width + 200, screen.height + 200, jw.ᐃⵠⵠΔⵠⲆΔ, Xw.Δⵠⵠⵠⵠ, Xw.ᐃᐃᐃΔⵠⵠΔ, Xw.reconnect.enabled ? 1 : Qs, bf.ΔⵠΔᐃ, bf.ΔⵠΔᐃᐃ, bf.ᐃⵠΔⲆᐃ, bf.ᐃΔⲆⵠⲆ, bf.ⲆⲆⲆⵠΔ, bf.ᐃᐃⵠΔΔ, dx === undefined ? 0 : dx, cx === undefined ? Mg : cx.substring(cx.length - 50), dw, Xw.ⲆΔΔᐃⵠᐃⲆ, a, Xw.ⵠᐃⵠⲆΔᐃᐃ, Xw.ΔⵠᐃΔⵠⵠⲆ]));
          Xw.ⲆΔΔᐃⵠᐃⲆ = undefined;
          Xw.ⵠᐃⵠⲆΔᐃᐃ = undefined;
          Xw.ΔⵠᐃΔⵠⵠⲆ = undefined;
          c.ΔΔⲆⵠΔ = setTimeout(c.timeout, jw.ⵠΔΔΔⲆⵠⲆᐃⲆ);
        });
      };
    };
  }();
  var cf;
  var Xw;
  var Yw;
  var Zw = {
    ΔⵠᐃΔΔ: C
  };
  var $w = new function () {
    this.ⲆᐃⵠⲆⵠ = 0;
    this.loaded = mj;
    this.transition = mj;
    this.ΔⵠΔᐃᐃⲆΔ = function (a) {
      return a / cf.w * 100;
    };
    this.ⲆᐃᐃᐃΔᐃΔ = function (a) {
      return sa * (a / cf.ΔⵠⲆ);
    };
    this.ΔⵠΔΔⲆⵠⵠ = function (a, b) {
      a = this.ΔⵠΔᐃᐃⲆΔ(a) - this.Ⲇⵠⵠⵠⵠ.x;
      return this.Ⲇⵠⵠⵠⵠ.x + b * a;
    };
    this.ⵠⵠΔⲆΔΔⲆ = function (a, b) {
      a = Math.abs(this.ⲆᐃᐃᐃΔᐃΔ(a) - this.Ⲇⵠⵠⵠⵠ.y);
      return this.Ⲇⵠⵠⵠⵠ.y + b * a;
    };
    this.sample = {};
    this.ⲆⲆⵠΔⲆ = {};
    this.ⲆᐃΔⲆ = {};
    this.ᐃⲆⵠᐃᐃⵠΔ = function (a, b, c, d) {
      for (var e = Hi; e < b.length; e++) {
        var f = b[e];
        if (!a.playing(f)) {
          a.pos(c, d, -0.5, f);
          a.play(f);
          return true;
        }
      }
      return false;
    };
    this.ᐃⲆⲆ = function (a, b, c, d) {
      c = this.ΔⵠΔΔⲆⵠⵠ(c, ᐃᐃΔⵠⲆ.ⲆᐃᐃⵠⵠⲆᐃ);
      d = this.ⵠⵠΔⲆΔΔⲆ(d, ᐃᐃΔⵠⲆ.ⲆᐃᐃⵠⵠⲆᐃ);
      console.log("HIT", a, b, c, d, ᐃᐃΔⵠⲆ.ⲆᐃᐃⵠⵠⲆᐃ);
      if (a) {
        if (b === 1) {
          this.ᐃⲆⵠᐃᐃⵠΔ(this.ⲆᐃΔⲆ.ΔⵠᐃᐃΔᐃⲆ, this.sample.ΔⵠᐃᐃΔᐃⲆ, c, d);
        } else if (b === Bb) {
          this.ᐃⲆⵠᐃᐃⵠΔ(this.ⲆᐃΔⲆ.ΔⲆΔⲆⵠⲆⲆ, this.sample.ΔⲆΔⲆⵠⲆⲆ, c, d);
        }
      } else {
        this.ᐃⲆⵠᐃᐃⵠΔ(this.ⲆᐃΔⲆ.ⵠⲆᐃΔⲆ, this.sample.ⵠⲆᐃΔⲆ, c, d);
      }
    };
    this.Ⲇⵠⵠⵠⵠ = {
      y: mj,
      x: ya
    };
    this.ⵠⵠⵠᐃⲆⲆⲆ = {
      x: ig,
      y: 0
    };
    this.ΔᐃΔⵠⵠ = {};
    this.ⵠΔΔⲆ = [];
    this.ᐃΔⵠⲆⵠ = function (a, b) {
      for (var c in this.ΔᐃΔⵠⵠ) {
        var d = this.ΔᐃΔⵠⵠ[c];
        d.check(a);
        if (d.ᐃⵠᐃⲆᐃᐃᐃ) {
          if (cf.ΔᐃᐃΔⲆ.now < tf.ⲆⵠⵠΔⲆΔᐃ) {
            d.ⵠΔΔⵠⵠ();
          }
          if (b) {
            d.ᐃⲆΔ(a, this.Ⲇⵠⵠⵠⵠ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= os;
    };
    this.ᐃΔΔᐃΔᐃᐃΔᐃ = function () {
      var a = [];
      for (var b = Qs; this.ⵠΔΔⲆ.length > b; b++) {
        if ((e = this.ⵠΔΔⲆ[b]).ᐃᐃΔᐃⵠΔᐃ) {
          a.push(b);
        } else if (!e.ᐃᐃΔᐃⵠΔᐃ && !cf.Δⵠⵠᐃᐃ[e.ᐃⲆᐃᐃ]) {
          e.ᐃΔΔⲆⲆΔⲆ();
          a.push(b);
        }
      }
      var c = cf.ⲆΔⲆ[nw.ᐃᐃⲆⲆⲆ];
      var d = st;
      for (b = Ih; b < c.length && a.length > d; b++) {
        var e = c[b];
        if ((kw.ⲆⵠⲆⵠⲆⲆⵠ != cf.mode || cf.ⵠΔΔⲆ[e.id].ⲆⲆΔⵠᐃ !== "spectator") && e.ᐃⵠΔᐃⵠ === -1 && Xw.ᐃⲆᐃᐃ !== e.ᐃⲆᐃᐃ) {
          this.ⵠΔΔⲆ[a[d]].ᐃΔΔΔᐃ(e.ᐃⲆᐃᐃ);
          d++;
        }
      }
    };
    this.ΔΔⲆᐃᐃᐃᐃⵠΔ = function () {
      this.ᐃΔΔᐃΔᐃᐃΔᐃ();
      for (var a = In; this.ⵠΔΔⲆ.length > a; a++) {
        var b = this.ⵠΔΔⲆ[a];
        if (!b.ᐃᐃΔᐃⵠΔᐃ && b.check()) {
          b.ᐃⲆΔ();
        }
      }
    };
    this.ⲆⲆⵠᐃΔⲆΔᐃΔ = function (a) {
      if (a.x === this.ⵠⵠⵠᐃⲆⲆⲆ.x && a.y === this.ⵠⵠⵠᐃⲆⲆⲆ.y) {
        return Ih;
      } else {
        this.ⵠⵠⵠᐃⲆⲆⲆ.x = a.x;
        this.ⵠⵠⵠᐃⲆⲆⲆ.y = a.y;
        this.Ⲇⵠⵠⵠⵠ.x = this.ΔⵠΔᐃᐃⲆΔ(a.x);
        this.Ⲇⵠⵠⵠⵠ.y = this.ⲆᐃᐃᐃΔᐃΔ(a.y);
        Howler.pos(this.Ⲇⵠⵠⵠⵠ.x, this.Ⲇⵠⵠⵠⵠ.y, Lr);
        return wt;
      }
    };
    this.ᐃᐃⵠᐃᐃⲆᐃΔΔ = function () {
      if (this.ⲆᐃⵠⲆⵠ && this.loaded) {
        var a = cf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
        if (a) {
          a.ᐃⵠΔᐃⵠ = Rq;
          var b = this.ⲆⲆⵠᐃΔⲆΔᐃΔ(a);
          if (kw.ΔΔΔΔᐃ !== cf.mode && kw.ⲆⲆⲆⲆᐃ !== cf.mode && cf.mode !== kw.ᐃⲆⵠⲆΔΔᐃ) {
            this.ᐃΔⵠⲆⵠ(a, b);
          }
          this.ΔΔⲆᐃᐃᐃᐃⵠΔ();
        }
      }
    };
    this.ᐃⲆⲆⵠⲆΔΔᐃΔ = function () {
      for (var b in af) {
        var c = af[b];
        if (typeof c === "object" && c.path) {
          c.ⵠⵠᐃΔᐃ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.ΔΔ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(undefined);
          for (var h = fl; h < f; h++) {
            var j = c.ⵠⵠᐃΔᐃ.play(d);
            c.ⵠⵠᐃΔᐃ.stop(j);
            c.ⵠⵠᐃΔᐃ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(El, undefined);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            $w.sample[d] = g;
          } else {
            $w.sample[d] = g[0];
          }
          $w.ⲆᐃΔⲆ[d] = c.ⵠⵠᐃΔᐃ;
        }
      }
    };
    this.ⵠⲆᐃⵠΔᐃΔ = function (a, b, c) {
      for (var d = 0; a.length > d; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ⵠⲆΔⵠⲆⵠⵠ = function (b, c, d, e, f, g) {
      var i = b;
      for (var a = 0; d > a; a++) {
        var j = i[a] = [];
        for (ⵠΔⲆᐃ = 0; ⵠΔⲆᐃ < e; ⵠΔⲆᐃ++) {
          j[ⵠΔⲆᐃ] = $w.sample[f + ⵠΔⲆᐃ][a];
          c.ⵠⵠᐃΔᐃ.volume(g, j[ⵠΔⲆᐃ]);
        }
      }
    };
    this.ᐃΔΔΔᐃ = function () {
      $w.ᐃⲆⲆⵠⲆΔΔᐃΔ();
      $w.ⲆⲆⵠΔⲆ.ΔᐃⲆΔᐃⲆΔ = [];
      $w.ⲆⲆⵠΔⲆ.ⲆᐃᐃᐃⲆ = [];
      $w.ⲆⲆⵠΔⲆ.ⵠⲆΔⲆⲆ = [];
      $w.ⵠⲆΔⵠⲆⵠⵠ($w.ⲆⲆⵠΔⲆ.ΔᐃⲆΔᐃⲆΔ, af.ⲆΔᐃⵠᐃⵠᐃ, tf.ᐃᐃⲆⲆⲆ, yr, "p", 0.15);
      $w.ⵠⲆΔⵠⲆⵠⵠ($w.ⲆⲆⵠΔⲆ.ⲆᐃᐃᐃⲆ, af.ⲆⲆΔⲆᐃⵠᐃ, tf.ᐃᐃⲆⲆⲆ, 4, "w", 0.15);
      $w.ⵠⲆΔⵠⲆⵠⵠ($w.ⲆⲆⵠΔⲆ.ⵠⲆΔⲆⲆ, af.ⲆⲆⲆⵠⵠⵠⵠ, tf.ᐃᐃⲆⲆⲆ, fn, "d", 0.09);
      $w.ⵠⲆᐃⵠΔᐃΔ($w.sample.ⵠⲆᐃΔⲆ, $w.ⲆᐃΔⲆ.ⵠⲆᐃΔⲆ, 0.15);
      $w.ⵠⲆᐃⵠΔᐃΔ($w.sample.ΔⲆΔⲆⵠⲆⲆ, $w.ⲆᐃΔⲆ.ΔⲆΔⲆⵠⲆⲆ, 0.2);
      $w.ⵠⲆᐃⵠΔᐃΔ($w.sample.ΔⵠᐃᐃΔᐃⲆ, $w.ⲆᐃΔⲆ.ΔⵠᐃᐃΔᐃⲆ, 1);
      $w.ΔᐃΔⵠⵠ.ΔΔᐃΔⲆᐃΔⲆⵠ = new sf(tf.ⵠΔⲆⵠΔΔⵠⵠⲆ, this.sample.ⲆΔⲆⵠⲆΔᐃ, this.sample.ⵠᐃⵠⲆᐃⲆⲆ, tf.ΔᐃΔᐃⵠⲆᐃⲆⵠ, 0.05, 0.4, af.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ, tf.ⵠᐃΔⲆⵠΔᐃ, {
        x: Xr.ⵠⲆⲆᐃⲆⲆⲆ,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ,
        w: cf.w,
        ΔⵠⲆ: cf.ΔⵠⲆ
      }, {
        x: Xr.ⵠⲆⲆᐃⲆⲆⲆ - 2300,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ - 4000,
        w: cf.w,
        ΔⵠⲆ: cf.ΔⵠⲆ
      }, {
        x: Xr.ⵠⲆⲆᐃⲆⲆⲆ - 1500,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ - 2000,
        w: cf.w,
        ΔⵠⲆ: cf.ΔⵠⲆ
      });
      $w.ΔᐃΔⵠⵠ.ⲆⵠⵠⵠⵠᐃⲆⲆᐃ = new sf(tf.ᐃⲆⲆΔⵠΔᐃ, this.sample.ⵠⲆΔⵠⲆΔᐃ, this.sample.ΔⲆⲆⵠᐃⲆⵠ, tf.ᐃᐃᐃⲆⵠⵠᐃⲆⲆ, 0.03, 0.25, af.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ, tf.ⵠᐃΔⲆⵠΔᐃ, {
        x: In,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ + 800,
        w: Xr.ⵠⲆⲆᐃⲆⲆⲆ - 2300,
        ΔⵠⲆ: cf.ΔⵠⲆ
      }, {
        x: -100,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ - 300,
        w: Xr.ⵠⲆⲆᐃⲆⲆⲆ - 100,
        ΔⵠⲆ: cf.ΔⵠⲆ
      }, {
        x: -Ks,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ + 400,
        w: Xr.ⵠⲆⲆᐃⲆⲆⲆ - 1400,
        ΔⵠⲆ: cf.ΔⵠⲆ
      });
      $w.ΔᐃΔⵠⵠ.ⲆᐃᐃⲆⵠⲆⲆ = new sf(tf.ᐃⲆⲆΔⵠΔᐃ, this.sample.ⲆᐃΔᐃᐃⵠⵠ, this.sample.ⲆᐃⲆⵠⵠⵠΔ, tf.ⵠΔΔᐃⵠᐃΔᐃᐃ, 0.01, 0.22, af.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ, tf.ⵠᐃΔⲆⵠΔᐃ, {
        x: -_j,
        y: -100,
        w: cf.w + 200,
        ΔⵠⲆ: Xr.ᐃᐃⲆⲆⵠⲆΔ - 1000
      }, {
        x: -ql,
        y: -100,
        w: cf.w + 200,
        ΔⵠⲆ: Xr.ᐃᐃⲆⲆⵠⲆΔ + 600
      }, {
        x: -100,
        y: -100,
        w: cf.w + 200,
        ΔⵠⲆ: Xr.ᐃᐃⲆⲆⵠⲆΔ + 100
      });
      for (var a = wg; a < tf.ᐃᐃⲆⲆⲆ; a++) {
        $w.ⵠΔΔⲆ[a] = new uf(a);
      }
      $w.ⵠΔΔⲆ[0].ᐃΔΔΔᐃ(Xw.ᐃⲆᐃᐃ);
      $w.loaded = 1;
    };
    this.ΔⵠᐃᐃΔⵠᐃⵠⵠ = function () {
      if (!this.transition && tf.ⲆⵠⵠΔⲆΔᐃ > cf.ΔᐃᐃΔⲆ.now) {
        this.transition = ie;
      }
    };
    this.ᐃⵠⲆΔⲆ = function () {
      if (this.ⲆᐃⵠⲆⵠ && this.loaded) {
        for (var a in $w.sample) {
          var b = $w.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              $w.ⲆᐃΔⲆ[a].stop(b[c]);
            }
          } else {
            $w.ⲆᐃΔⲆ[a].stop(b);
          }
        }
        for (c = ya; $w.ⵠΔΔⲆ.length > c; c++) {
          $w.ⵠΔΔⲆ[c].ᐃΔΔⲆⲆΔⲆ();
        }
      }
    };
    this.select = function () {
      if ($w.ⲆᐃⵠⲆⵠ) {
        $w.ᐃⵠⲆΔⲆ();
      } else {
        if (!$w.loaded) {
          $w.ᐃΔΔΔᐃ();
        }
        $w.ⵠΔΔⲆ[0].ᐃⲆᐃᐃ = Xw.ᐃⲆᐃᐃ;
        $w.ⵠΔΔⲆ[0].ᐃᐃΔᐃⵠΔᐃ = 0;
        $w.ΔⵠᐃᐃΔⵠᐃⵠⵠ();
      }
      $w.ⲆᐃⵠⲆⵠ = !$w.ⲆᐃⵠⲆⵠ;
    };
  }();
  var ff = new function () {
    this.ⲆΔⵠⲆΔᐃᐃ = function () {
      this.ᐃᐃⲆᐃΔ = 81;
      this.ⲆΔΔⵠΔ = 68;
      this.ⵠᐃⵠⵠⲆ = 90;
      this.ΔⵠⲆⵠΔⲆΔ = 83;
    };
    this.ⵠᐃⲆᐃᐃΔΔ = function () {
      this.ᐃᐃⲆᐃΔ = 65;
      this.ⲆΔΔⵠΔ = 68;
      this.ⵠᐃⵠⵠⲆ = 87;
      this.ΔᐃᐃⲆΔ = 83;
    };
    this.ⵠᐃⵠⲆΔ = wj;
    this.ΔⵠⲆⵠΔⲆΔ = ie;
    this.ⵠΔΔⵠᐃⵠⲆ = 49;
    this.ᐃᐃⲆⲆᐃⲆⵠ = 50;
    this.ⵠⲆᐃᐃᐃⲆᐃ = 51;
    this.Ⲇⵠⵠᐃⵠᐃⵠ = 52;
    this.ΔⲆᐃⵠⲆⲆᐃᐃΔ = 53;
    this.ΔᐃⲆΔᐃⲆᐃ = Ri;
    this.ⵠᐃⵠᐃΔᐃΔ = 37;
    this.ⲆⲆᐃᐃⵠⲆΔ = 39;
    this.ⵠΔⲆΔΔⵠⲆ = 38;
    this.ᐃᐃⲆⵠΔⵠᐃ = 40;
    this.ⲆⵠⲆⲆᐃᐃΔ = 32;
    this.ⲆⵠⲆⵠⵠⵠⲆ = 82;
    this.ⵠⲆΔΔΔᐃᐃ = 71;
    this.ΔᐃᐃⲆⲆⲆᐃ = 86;
    this.ⲆΔΔⵠᐃᐃΔ = 66;
    this.ⵠᐃⲆᐃᐃΔΔ();
    this.keys = new Array(Nk);
    for (var a = 0; a < Fe; a++) {
      this.keys[a] = this.ⵠᐃⵠⲆΔ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ⵠᐃⵠⲆΔ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, Hn);
      if (b == this.ᐃᐃⲆᐃΔ || this.ⵠᐃⵠᐃΔᐃΔ == b) {
        this.ᐃᐃᐃᐃⲆΔᐃ();
      } else if (this.ⵠᐃⵠⵠⲆ == b || b == this.ⵠΔⲆΔΔⵠⲆ) {
        this.ⲆᐃⵠⲆⵠⵠⲆ();
      } else if (this.ΔⵠⲆⵠΔⲆΔ == b || this.ᐃⲆΔΔⲆΔⲆΔⲆ == b) {
        this.ΔΔΔᐃΔΔᐃ();
      } else if (b == this.ⲆΔΔⵠΔ || this.ⲆⲆᐃᐃⵠⲆΔ == b) {
        this.ⵠⲆΔᐃΔⵠᐃ();
      }
      this.keys[b] = this.ΔⵠⲆⵠΔⲆΔ;
      return b;
    };
    this.ᐃᐃᐃᐃⲆΔᐃ = function () {
      this.keys[this.ⲆΔΔⵠΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⲆⲆᐃᐃⵠⲆΔ] = this.ⵠᐃⵠⲆΔ;
    };
    this.ⵠⲆΔᐃΔⵠᐃ = function () {
      this.keys[this.ᐃᐃⲆᐃΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⵠᐃⵠᐃΔᐃΔ] = this.ⵠᐃⵠⲆΔ;
    };
    this.ΔΔΔᐃΔΔᐃ = function () {
      this.keys[this.ⵠᐃⵠⵠⲆ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⵠΔⲆΔΔⵠⲆ] = this.ⵠᐃⵠⲆΔ;
    };
    this.ⲆᐃⵠⲆⵠⵠⲆ = function () {
      this.keys[this.ΔᐃᐃⲆΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ᐃᐃⲆⵠΔⵠᐃ] = this.ⵠᐃⵠⲆΔ;
    };
    this.ᐃΔᐃΔⵠΔᐃ = function () {
      this.keys[this.ⲆΔΔⵠΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⲆⲆᐃᐃⵠⲆΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ᐃᐃⲆᐃΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⵠᐃⵠᐃΔᐃΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⵠᐃⵠⵠⲆ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⵠΔⲆΔΔⵠⲆ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ΔᐃᐃⲆΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ᐃᐃⲆⵠΔⵠᐃ] = this.ⵠᐃⵠⲆΔ;
    };
    this.ⵠᐃⵠⲆⲆⵠᐃ = function () {
      return this.keys[this.ᐃᐃⲆᐃΔ] || this.keys[this.ⵠᐃⵠᐃΔᐃΔ];
    };
    this.ᐃΔⲆᐃᐃⲆΔ = function () {
      return this.keys[this.ⲆΔΔⵠΔ] || this.keys[this.ⲆⲆᐃᐃⵠⲆΔ];
    };
    this.ⲆᐃΔΔⲆΔⵠ = function () {
      return this.keys[this.ⵠᐃⵠⵠⲆ] || this.keys[this.ⵠΔⲆΔΔⵠⲆ];
    };
    this.ΔΔΔⵠΔⲆⲆ = function () {
      return this.keys[this.ΔᐃᐃⲆΔ] || this.keys[this.ᐃᐃⲆⵠΔⵠᐃ];
    };
    this.ᐃᐃΔΔⵠⵠΔⲆᐃ = function () {
      return this.keys[this.ΔᐃⲆΔᐃⲆᐃ];
    };
    this.ΔⵠⲆⲆⲆⲆⵠⲆⵠ = function () {
      return this.keys[this.ⵠΔΔⵠᐃⵠⲆ];
    };
    this.ΔᐃⲆΔⲆⲆΔᐃΔ = function () {
      return this.keys[this.ᐃᐃⲆⲆᐃⲆⵠ];
    };
    this.ⲆⵠⵠᐃⲆᐃΔΔᐃ = function () {
      return this.keys[this.ⵠⲆᐃᐃᐃⲆᐃ];
    };
    this.ΔᐃⵠΔᐃΔⵠᐃⲆ = function () {
      return this.keys[this.Ⲇⵠⵠᐃⵠᐃⵠ];
    };
    this.ⵠⵠΔᐃᐃΔΔⲆᐃ = function () {
      return this.keys[this.ⲆⵠⲆⲆᐃᐃΔ];
    };
    this.ⲆⵠΔΔⲆΔΔⵠΔ = function () {
      return this.keys[this.ⲆⵠⲆⵠⵠⵠⲆ];
    };
    this.ⵠⵠᐃⵠΔⵠᐃⵠΔ = function () {
      return this.keys[this.ⵠⲆΔΔΔᐃᐃ];
    };
    this.ᐃᐃᐃᐃⵠⵠΔⲆᐃ = function () {
      return this.keys[this.ΔᐃᐃⲆⲆⲆᐃ];
    };
    this.ᐃΔΔⲆᐃΔᐃⵠᐃ = function () {
      return this.keys[this.ⲆΔΔⵠᐃᐃΔ];
    };
  }();
  var zf = new function () {
    this.ΔⵠⲆⵠΔⲆΔ = wj;
    this.ⵠᐃⵠⲆΔ = 1;
    this.IDLE = 2;
    this.ᐃΔⲆⲆᐃᐃΔ = wj;
    this.ΔΔᐃⲆⵠᐃᐃⵠΔ = mk;
    this.ⲆⲆΔⲆ = {
      x: 0,
      y: In
    };
    this.ΔⲆΔⵠⵠⲆⵠ = 0;
    this.ⲆⵠᐃΔᐃᐃⲆ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ΔΔⵠΔ = this.ᐃΔⲆⲆᐃᐃΔ;
    this.down = function () {
      this.state = this.ΔⵠⲆⵠΔⲆΔ;
    };
    this.up = function () {
      this.state = this.ⵠᐃⵠⲆΔ;
    };
    this.ᐃⲆΔ = function () {
      return (this.ⲆⲆΔⲆ.x != this.ΔⲆΔⵠⵠⲆⵠ || this.ⲆⲆΔⲆ.y != this.ⲆⵠᐃΔᐃᐃⲆ) && (this.ΔⲆΔⵠⵠⲆⵠ = this.ⲆⲆΔⲆ.x, this.ⲆⵠᐃΔᐃᐃⲆ = this.ⲆⲆΔⲆ.y, true);
    };
  }();
  var yf = st;
  var _w = 0;
  var ax = new function (f, e, i) {
    this.ⲆΔ = f;
    this.ᐃ = e;
    this.ΔⵠΔⲆⵠΔⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      style: document.getElementById("loading").style,
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ΔⵠΔⲆⵠΔⵠ.style.position = "absolute";
    this.ΔⵠΔⲆⵠΔⵠ.style.display = "inline-block";
    this.ΔⵠΔⲆⵠΔⵠ.ᐃⲆΔ();
    this.ΔⵠᐃΔΔ = mh;
    this.stop = function () {
      this.ΔⵠᐃΔΔ = jl;
    };
    this.ᐃⵠⲆⲆⵠⲆⵠ = {
      total: 1
    };
    var j = this;
    function k() {}
    var m = Zj;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return hb;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -sd || a.indexOf("day-book") !== -1 || -Gh !== a.indexOf("night-book") || -au !== a.indexOf("day-player") || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || -Oq !== a.indexOf("night-accessory") || a.indexOf("day-crate") !== -1 || -Wl !== a.indexOf("night-crate") || a.indexOf("day-skin") !== -1 || -mk !== a.indexOf("night-skin") || a.indexOf("day-river") !== -1 || -gs !== a.indexOf("night-river") || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || -Oq !== a.indexOf("day-rock") || -wt !== a.indexOf("night-rock") || -za !== a.indexOf("day-flower") || -Hg !== a.indexOf("night-flower") || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -ie || a.indexOf("night-herb") !== -1 || -za !== a.indexOf("day-shell") || a.indexOf("night-shell") !== -1 || -zs !== a.indexOf("day-hand-skin") || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || -mk !== a.indexOf("bigday") || -za !== a.indexOf("bigzday") || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -wt || -mk !== a.indexOf("tuto-") || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || -zg !== a.indexOf("day-lava-") || -Wl !== a.indexOf("night-lava-") || -au !== a.indexOf("-click.png") || a.indexOf("-in.png") !== -Te || a.indexOf("-fog") !== -pu || a.indexOf("-lava") !== -1 || -Tl !== a.indexOf("pebblecompo") || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ᐃⵠⲆᐃⲆ = function () {
      j.ᐃⲆΔ();
      if (++m == 40) {
        j.stop();
        k();
        return;
      }
      dj.setTimeout(j.ᐃⵠⲆᐃⲆ, 33);
    };
    this.ᐃⵠⲆΔⲆ = function (a) {
      k = a;
      j.ᐃⵠⲆᐃⲆ();
    };
    new Date().getTime();
    Object.keys(Ⲇⵠ).length;
    console.log(undefined, undefined);
    for (var o in Ⲇⵠ) {
      if (n(Ⲇⵠ[o]) === os) {
        0;
      }
    }
    console.log(undefined, undefined);
    function p() {
      if (this.ⵠⲆⲆᐃⲆᐃⵠ !== 0) {
        return this.ⵠⲆⲆᐃⲆᐃⵠ;
      } else {
        this.ⵠⲆⲆᐃⲆᐃⵠ = 2;
        this.src = this.ΔⵠⲆⲆⵠ;
        return 0;
      }
    }
    function l(a) {
      this.ⵠⲆⲆᐃⲆᐃⵠ = wt;
    }
    var g = In;
    function q() {
      console.log(cg);
      if (gs !== g) {
        g = Tl;
        console.log(undefined);
        if (ct !== Jt) {
          ct();
        }
        Jt();
        var a = ᐃⵠΔⲆ.ΔⲆⵠᐃᐃΔΔ("server");
        if (a !== null) {
          Ⲇⵠᐃⵠ.ⵠᐃᐃⵠΔⲆᐃ = zg;
          Ⲇⵠᐃⵠ.ⲆΔⲆΔⵠ = [{
            nu: Bb,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: "Private Server " + a,
            ssl: mk
          }];
        }
        Ⲇⵠᐃⵠ.ᐃⲆᐃⵠⲆⲆⵠΔⲆ();
        setTimeout(i, x);
      }
    }
    function b() {
      let a = function () {
        Ⲇⵠᐃⵠ.ⲆⲆⵠⲆᐃΔⲆ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, xh);
        } else {
          setTimeout(b, lh);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function s() {
      this.ΔⵠᐃᐃⵠⲆⵠ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ΔⵠᐃᐃⵠⲆⵠ}`, this);
      if (this.ΔⵠᐃᐃⵠⲆⵠ > Tr) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ΔⵠᐃᐃⵠⲆⵠ;
      var b = this.src;
      var c = n(b) === ig ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ᐃⵠΔᐃⲆᐃᐃ) {
          if (b.indexOf(ᐃⵠΔᐃⲆᐃᐃ[c]) !== -1) {
            Ⲇⵠ[c] = new Image();
            Ⲇⵠ[c].onload = l;
            Ⲇⵠ[c].onerror = s;
            Ⲇⵠ[c].ΔⵠᐃᐃⵠⲆⵠ = a;
            Ⲇⵠ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function d(a) {
      for (var b in Ⲇⵠ) {
        var c = Ⲇⵠ[b];
        if (typeof c === "string" && n(c) === a) {
          Ⲇⵠ[b] = new Image();
          Ⲇⵠ[b].ⵠⲆⲆᐃⲆᐃⵠ = 0;
          Ⲇⵠ[b].ΔⵠᐃᐃⵠⲆⵠ = 0;
          Ⲇⵠ[b].onload = l;
          Ⲇⵠ[b].onerror = s;
          Ⲇⵠ[b].ⲆⲆⲆⵠᐃᐃⲆ = p;
          Ⲇⵠ[b].ΔⵠⲆⲆⵠ = c;
        }
      }
    }
    d(1);
    d(0);
    nd(wt, "l", 20, "#000");
    b();
    rm();
    this.ᐃⲆΔ = function () {
      this.ΔⵠΔⲆⵠΔⵠ.translate.x = (lo - 500) / 2;
      this.ΔⵠΔⲆⵠΔⵠ.translate.y = (jq - 150) / Vh;
      var a = 2500 / (40 - m + za) - 48;
      this.ΔⵠΔⲆⵠΔⵠ.translate.y -= a;
      this.ΔⵠΔⲆⵠΔⵠ.ᐃⲆΔ();
    };
    this.ΔⵠΔⲆⵠΔⵠ.ᐃⲆΔ();
    this.ᐃⵠᐃⵠ = function () {
      try {
        yd();
      } catch (a) {}
      this.ᐃⲆΔ();
    };
  }(ao, ho, function () {
    Bd();
    Zw = new Kw(ao, ho);
    (bf = new Jw(ao, ho)).ᐃᐃⲆⲆᐃⲆⲆΔⲆ();
    Yw = new Rw(ao, ho);
    cf = new rw();
    Xw = new Bw();
    ax.ᐃⵠⲆΔⲆ(function () {
      ax.ΔⵠΔⲆⵠΔⵠ.style.display = "none";
      bf.ⲆᐃⵠⲆⵠ();
    });
  });
  function Af(b, c, d, e, f) {
    const g = ~(b & 50523) & 50523 | ~(b & 50523) & b;
    const i = c ^ 52430;
    const a = ((d + 36606) * 22695477 + 1) % 4294967296;
    const j = (e | 12735) & ~(e & 12735);
    const h = f ^ 19534;
    return (2147483587 + (25023 + (oo(g, i, a, j) ^ no(h, g, i, a, j, h))) * 2147483629) % 2147483647;
  }
  function kf() {
    try {
      dj.Widget.adsRefresh();
    } catch (a) {}
  }
  dj.onbeforeunload = function () {
    if (Zw.ΔⵠᐃΔΔ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  ma();
  (function b(a) {
    dj.requestAnimationFrame(b);
    _w = (a - yf) / 1000;
    yf = a;
    _w = _w > 1 ? 1 : _w;
    if (Zw.ΔⵠᐃΔΔ) {
      Zw.ᐃⵠᐃⵠ();
    } else {
      ho.clearRect(Mg, Mg, lo, jq);
      if (ax.ΔⵠᐃΔΔ) {
        ax.ᐃⵠᐃⵠ();
      } else if (bf.ΔⵠᐃΔΔ) {
        bf.ᐃⵠᐃⵠ();
      } else if (Yw.ΔⵠᐃΔΔ) {
        Yw.ᐃⵠᐃⵠ();
      }
    }
  })(0);
  var xf = wj;
  function bx() {
    Mf.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
    Mf.send();
  }
  var Mf = new XMLHttpRequest();
  Mf.onreadystatechange = function () {
    if (this.readyState === gl) {
      this.status;
    }
  };
  var Bf = "https://token.starve.io/";
  var Df = "https://token2.starve.io/";
  var If = Lr;
  var Ef = 1;
  var Sf = cg;
  var cx = undefined;
  var dx = Lj;
  var ex = 0;
  dj.ᐃΔⲆΔᐃᐃⵠ = function () {
    ex = 1;
  };
  var fx = {
    ⵠᐃΔᐃΔᐃᐃΔⵠ: "ACCESS_TOKEN"
  };
  var Gf = document.createElement("script");
  Gf.type = "text/javascript";
  Gf.async = true;
  Gf.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  Gf.addEventListener("load", function (a) {
    dj.XPayStationWidget.init(fx);
    dj.XPayStationWidget.on("status-done", $f);
  }, Mh);
  document.getElementsByTagName("head")[Mg].appendChild(Gf);
  dj.fbAsyncInit = function () {
    Zf();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[Zj];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var jf = undefined;
  var gx = undefined;
  function hx() {
    dj.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (jf = a).isSignedIn.listen(Of);
      jf.currentUser.listen(Nf);
      if (jf.isSignedIn.get()) {
        jf.signIn();
      }
      qf();
    });
  }
  function Of(a) {}
  function Nf(a) {
    Zf();
    if (cx === j && gx !== undefined) {
      cx = gx.getAuthResponse().id_token;
      console.log(cg, undefined);
      if (cx !== undefined) {
        Sf = If;
        dj.ᐃΔⲆΔᐃᐃⵠ(dx);
      }
    }
    if (a !== undefined && a.isSignedIn() === true) {
      gx = a;
      dj.ᐃΔⲆΔᐃᐃⵠ(a.id);
    }
  }
  function qf() {
    if (jf) {
      gx = jf.currentUser.get();
    }
  }
  function Hf(a, b) {
    if (b > bf.ⲆᐃᐃΔⲆ) {
      bf.ⵠᐃⵠΔ(bf.ⵠⵠⵠΔΔ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Bf + "buyKit?token=" + cx + "&userid=" + dx + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (Pl == this.readyState && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          bf.ⲆᐃᐃΔⲆ -= b;
          bf.ⲆΔⲆΔᐃ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function Uf(a) {
    if (dx) {
      var b = new XMLHttpRequest();
      b.open("GET", Bf + "xsolla?userid=" + dx + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == Pe && this.status == 200 && b.responseText !== "0") {
          fx.access_token = b.responseText;
          dj.XPayStationWidget.init(fx);
          dj.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function Yf(a, b, c, d) {
    a = a === undefined ? bf.ⲆⲆΔᐃⵠⵠⵠ : a;
    b = El === b ? bf.ᐃΔⵠᐃⲆⲆΔ : b;
    c = c === cb ? bf.ᐃᐃⵠᐃΔᐃⲆ : c;
    d = d === er ? bf.ΔΔᐃᐃΔᐃΔ : d;
    if (a !== bf.ⲆⲆΔᐃⵠⵠⵠ || b !== bf.ᐃΔⵠᐃⲆⲆΔ || c !== bf.ᐃᐃⵠᐃΔᐃⲆ || bf.ΔΔᐃᐃΔᐃΔ !== d) {
      bf.ⲆⲆΔᐃⵠⵠⵠ = a;
      bf.ᐃΔⵠᐃⲆⲆΔ = b;
      bf.ᐃᐃⵠᐃΔᐃⲆ = c;
      bf.ΔΔᐃᐃΔᐃΔ = d;
      if (bf.ᐃΔⲆⵠᐃΔⵠ === d) {
        d = "0";
      } else if (bf.ᐃΔⲆⵠΔⲆΔ === d) {
        d = "1";
      } else if (d === bf.ⵠⵠᐃᐃⵠⵠᐃ) {
        d = "2";
      } else if (bf.Δᐃⵠⵠⵠⵠᐃ === d) {
        d = "3";
      } else if (d === bf.ⵠΔΔΔⲆΔᐃ) {
        d = "4";
      } else if (d === bf.ᐃⵠⵠΔⲆⲆⵠ) {
        d = "5";
      }
      if (bf.ⵠⵠⲆᐃⵠΔⵠ === b) {
        b = "total";
      } else if (b === bf.ᐃⲆⵠⲆᐃⲆᐃ) {
        b = "normal";
      } else if (bf.ⲆⲆⵠᐃⲆᐃⲆ === b) {
        b = "zombie";
      } else if (b === bf.ⵠᐃⲆᐃⲆΔᐃ) {
        b = "vampire";
      } else if (b === bf.ΔᐃⵠⲆⲆΔᐃ) {
        b = "forest";
      }
      if (bf.ⵠΔΔⵠⵠᐃᐃ === a) {
        a = "all";
      }
      if (a === bf.ᐃⲆⲆΔⵠᐃΔ) {
        a = "week";
      }
      if (a === bf.ⲆᐃΔⵠᐃᐃⵠ) {
        a = "today";
      }
      if (c === bf.ⲆⵠΔΔΔΔⵠ) {
        c = "kill";
      } else if (c === bf.ⵠⵠⲆⲆⵠᐃΔ) {
        c = "score";
      } else if (bf.ΔⲆΔⲆⲆⲆⲆ === c) {
        c = "time";
      }
      var f = new XMLHttpRequest();
      f.open("GET", Bf + "leaderboard?range=" + a + "&mode=" + b + "&sort=" + c + "&season=" + d);
      f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      f.onreadystatechange = function () {
        if (this.readyState == Ct && this.status == 200 && f.responseText !== "0") {
          for (var a = JSON.parse(f.responseText), b = "", c = 0; a.length > c; c++) {
            ᐃⵠⵠⵠⵠ = a[c];
            var d = ᐃⵠⵠⵠⵠ[1];
            try {
              if (-au === d.indexOf("Starver#")) {
                d = dj.decodeURIComponent(dj.escape(dj.atob(d)));
              }
            } catch (a) {}
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + zg + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += bf.ΔΔⵠΔᐃⵠⵠ(ᐃⵠⵠⵠⵠ[6]) + zg + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ᐃⵠⵠⵠⵠ[Ig] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ᐃⵠⵠⵠⵠ[Os] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ᐃⵠⵠⵠⵠ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      f.send();
    }
  }
  function Kf(a, b) {
    if (bf.ΔⲆⵠΔⵠ <= Lr) {
      if (b > bf.ⲆᐃᐃΔⲆ) {
        bf.ⵠᐃⵠΔ(bf.ⵠⵠⵠΔΔ);
      } else {
        bf.ΔⲆⵠΔⵠ = vg;
        bf.ΔᐃᐃᐃᐃⲆⵠ = wj;
        bf.ⵠΔΔⵠᐃᐃΔ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Bf + "buySpin?token=" + cx + "&userid=" + dx + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              bf.ⵠᐃⲆΔᐃⲆⲆⲆⲆ(Math.PI * a.rand * 2, a.type, a.id);
              bf.ⲆᐃᐃΔⲆ -= b;
            } else {
              bf.ΔⲆⵠΔⵠ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function Vf() {
    if (bf.ⲆᐃᐃΔⲆ >= 300 || bf.ⲆΔΔⵠᐃⲆⲆ <= Yh) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Bf + "changeNickname?token=" + cx + "&userid=" + dx + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (ba == this.readyState && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              bf.ⲆᐃᐃΔⲆ -= a;
            }
            bf.ⲆΔΔⵠᐃⲆⲆ = 1;
            bf.ⵠᐃⵠΔ(bf.ᐃⵠⵠᐃⲆ);
          }
        };
        b.send();
      }
    }
  }
  function Zf() {
    if (dj.FB) {
      dj.FB.init({
        version: "v15.0",
        appId: "642017356260407",
        cookie: true,
        xfbml: true
      });
    }
    if (dx === undefined) {
      (function () {
        try {
          if (dj.FB && dj.FB.getUserID()) {
            dx = dj.FB.getUserID();
            if (cx === undefined) {
              dj.FB.getLoginStatus(function () {
                Sf = Ef;
                cx = dj.FB.getAuthResponse().accessToken;
                dj.ᐃΔⲆΔᐃᐃⵠ(dx);
              });
            }
          }
        } catch (a) {}
        try {
          dx = gx.getBasicProfile().getId();
        } catch (a) {}
      })();
    }
  }
  function Xf(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Bf + "setRegion?token=" + cx + "&userid=" + dx + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          bf.ⵠᐃⵠΔ(bf.ΔᐃΔΔⵠ);
        } else {
          bf.ⵠᐃⵠΔ(bf.ⵠΔⵠⵠΔ);
        }
      }
    };
    b.send();
  }
  function $f() {
    var a = new XMLHttpRequest();
    a.open("GET", Bf + "claimBread?userid=" + dx);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (Gi == this.readyState && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          bf.ⲆᐃᐃΔⲆ = b;
        }
      }
    };
    a.send();
  }
  dj.onload = function () {
    dj.gapi.load("auth2", hx);
  };
})();
