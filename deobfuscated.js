(function () {
  var aj = 144;
  var bj = 123;
  var cj = 194;
  if (cj > 10) {
    cj = 180;
  }
  if (bj === 8) {
    bj = 216;
  }
  if (aj === 8) {
    aj = 31;
  }
  const dj = window;
  var n = 91;
  var ej = 147;
  if (ej >= 10) {
    ej = 27;
  }
  if (n > 0) {
    n = 155;
  }
  let fj = 224;
  const gj = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += dj.String.fromCharCode(a[c] ^ fj++ % 255);
    }
    return b;
  };
  var s = 254;
  var hj = 0;
  if (hj == 3) {
    hj = 203;
  }
  if (s > 5) {
    s = 48;
  }
  var ij = 97;
  if (ij === 9) {
    ij = 239;
  }
  var jj = 22;
  if (jj == 5) {
    jj = 188;
  }
  const kj = -8;
  const b = 19;
  const v = 15;
  const d = 11;
  const c = -4;
  const m = 17;
  const p = 16;
  const lj = undefined;
  const C = false;
  const f = C;
  const z = 5;
  const y = true;
  const w = 9;
  const P = 18;
  const mj = 0;
  const k = 255;
  const x = 100;
  const A = 20;
  const J = 10;
  const B = 2;
  const D = 13;
  const I = 3;
  const T = lj;
  const E = 8;
  const M = z;
  const Q = 4;
  const F = 12;
  const R = w;
  const G = p;
  const j = T;
  const L = 4096;
  const S = 6;
  const O = 1 << d;
  const N = 7;
  const nj = 4;
  const q = z;
  const H = 2;
  const U = 6;
  const K = nj;
  const V = P;
  const W = P;
  const X = F;
  const Y = x;
  const ie = 1;
  const Z = D;
  let _;
  let ee = lj;
  let ne = T;
  const te = J;
  const se = w;
  let he;
  let oj;
  let pj;
  let qj = lj;
  let rj = T;
  const sj = v;
  let de;
  let tj = [];
  let me = "_";
  let uj = lj;
  const vj = f;
  const Te = ie;
  let fe;
  const wj = mj;
  const ye = y;
  const xj = H;
  let we = j;
  const Pe = nj;
  const ke = d;
  let xe;
  let yj = T;
  const zj = E;
  const Be = b;
  let De;
  let Aj = lj;
  let Bj = j;
  let Cj = T;
  let Dj;
  const Ej = m;
  const Fe = k;
  let Re = lj;
  let Fj = T;
  const Gj = y;
  let Le = lj;
  const Hj = xj;
  let Oe;
  let Ij = j;
  const Jj = b;
  const He = E;
  let Ue;
  const Kj = ye;
  let Ke;
  const Lj = lj;
  let Ze;
  let Mj;
  let Nj;
  const Oj = z;
  let ii;
  const Pj = P;
  let ni = Lj;
  const Qj = R;
  let ri;
  let Rj = j;
  const Sj = F;
  let hi = j;
  var Tj = dj.console;
  let gi;
  let Uj;
  Tj.log = Tj.info = Tj.error = Tj.warn = Tj.debug = Tj.ⲆⵠΔⵠΔᐃᐃⲆⵠ = Tj.trace = Tj.time = Tj.timeEnd = function () {};
  const Vj = P;
  const vi = A;
  const di = 14;
  const ci = I;
  let mi;
  let Wj = Lj;
  let Xj = T;
  let Yj = lj;
  const Zj = mj;
  const zi = v;
  let yi;
  let $j;
  const _j = Y;
  let Ai;
  let ak;
  let bk = Lj;
  const ck = p;
  const Mi = 14;
  const Bi = zj;
  let Di = lj;
  const dk = Mi;
  const Ei = C;
  const Si = 256;
  let Qi = j;
  let ek = lj;
  const fk = R;
  const Ri = m;
  const Gi = Pe;
  const ji = U;
  const Li = Fe;
  let Wi = lj;
  const gk = G;
  const Ni = N;
  const qi = A;
  const Hi = wj;
  let Ui = Zj;
  let hk = lj;
  const ik = Z;
  if (!dj.WebAssembly || !dj.WebAssembly.instantiate) {
    ΔΔⲆⵠΔⵠⲆΔⲆ();
  }
  const Vi = Z;
  const Zi = {
    Date: Date
  };
  dj.WebAssembly.instantiate(Uint8Array.from(dj.atob(""), function (a) {
    return a.charCodeAt(mj);
  }), Zi).then(function (a) {
    ee = a.instance;
    _ = ee.exports;
    ne = _.memory;
    qj = ne.buffer;
    he = _.__pin;
    oj = _.__unpin;
    pj = _.__new;
    rj = _.__collect;
    me = "_";
    for (let b = Zj; b < 30; b++) {
      tj[b] = _[me + b];
    }
    de = _.__rtti_base;
    uj = new Float32Array(qj);
    fe = new Float64Array(qj);
    we = new BigUint64Array(qj);
    xe = new Uint32Array(qj);
    yj = new Uint16Array(qj);
    Aj = new Uint8Array(qj);
    De = new BigInt64Array(qj);
    Bj = new Int32Array(qj);
    Cj = new Int16Array(qj);
    Dj = new Int8Array(qj);
    Wj = tj[qi];
    ri = tj[25];
    Fj = tj[V];
    yi = tj[14];
    Ij = tj[28];
    Yj = tj[sj];
    $j = tj[4];
    ni = tj[0];
    Rj = tj[29];
    mi = tj[19];
    Oe = tj[23];
    Ke = tj[13];
    Qi = tj[xj];
    Wi = tj[27];
    Le = tj[8];
    Xj = tj[Ni];
    Ze = tj[J];
    Uj = tj[21];
    gi = tj[26];
    Di = tj[6];
    Re = tj[d];
    ii = tj[Sj];
    ak = tj[ie];
    hi = tj[17];
    Nj = tj[22];
    Mj = tj[M];
    Ai = tj[24];
    ek = tj[9];
    bk = tj[3];
    Ue = tj[G];
    Ui = 1;
    if (hk) {
      hk();
    }
  });
  const Xi = F;
  const $i = nj;
  const jk = xj;
  const kk = J;
  const lk = function (a) {
    return xe[(de + 4 >>> H) + (a << ie)];
  };
  const mk = ie;
  const nk = ji;
  function ok(a) {
    return 31 - Math.clz32(a >>> S & 31);
  }
  const pk = d;
  const qk = He;
  const rk = lj;
  const sk = J;
  const tk = pk;
  function uk(a) {
    const b = xe[a + kj >>> jk];
    const d = lk(b);
    const e = ok(d);
    let f = d & Q ? a : xe[a + K >>> 2];
    const g = d & B ? xe[a + X >>> 2] : xe[f + c >>> 2] >>> e;
    return vk(e, d & O, d & L).subarray(f >>>= e, f + g);
  }
  function vk(a, b, c) {
    if (c) {
      switch (a) {
        case xj:
          return uj;
        case ci:
          return fe;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return Dj;
          } else {
            return Aj;
          }
        case 1:
          if (b) {
            return Cj;
          } else {
            return yj;
          }
        case Hj:
          if (b) {
            return Bj;
          } else {
            return xe;
          }
        case I:
          if (b) {
            return De;
          } else {
            return we;
          }
      }
    }
  }
  const wk = Ni;
  const xk = Kj;
  const yk = 256;
  function zk(b, c, d, e, f) {
    const i = ((15761 + b) * 2147483629 + 2147483587) % 2147483647;
    const j = (1 + (c + 7965) * 22695477) % 4294967296;
    const a = (2531011 + (d + 57477) * 214013) % 4294967296;
    const k = (8 << (e >> 16 & 255)) + (0 << (e & 255)) + (16 << (e >> E & 255)) + (24 << (e >> 24 & Li));
    const h = (2531011 + (f + 14526) * 214013) % 4294967296;
    const l = function (b, c, d, e) {
      const f = (0 << (b >> 8 & 255)) + (8 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (16 << (b & 255));
      const g = ~(c & 40808) & (c | 40808);
      const i = ~(d & 22660) & d | ~(d & 22660) & 22660;
      const a = (59111 + e) % 65436;
      const j = pt(f, g, i);
      Ma(a, f, g, i, a);
      return (j | 34960) & ~(j & 34960);
    }(i, j, a, k);
    no(h, i, j, a, k, h);
    return ~(l & 33202) & 33202 | ~(l & 33202) & l;
  }
  const Ak = x;
  const Bk = dk;
  const Ck = U;
  const Dk = b;
  function Ek(a, b) {
    const c = (2147483587 + (60014 + a) * 2147483629) % 2147483647;
    const d = ~(b & 18605) & b | ~(b & 18605) & 18605;
    return ((5354 + (kf(c, d, c, d, c) ^ ht(d, c, d, c, d, c))) * 22695477 + 1) % 4294967296;
  }
  const Fk = q;
  const Gk = Bi;
  const Hk = ci;
  const Ik = P;
  function Jk(a, b, c) {
    Wj(Mw, a, b, c);
    const d = $s(Nw[0], Nw[1], Nw[Hj]);
    const e = function (b, c, d, e, f, g) {
      ri(Mw, b, c, d, e, f, g);
      const h = function (a, b, c, d) {
        Uj(Mw, a, b, c, d);
        const e = Ir(Nw[Rs], Nw[1]);
        (function (a, b, c) {
          ak(Mw, a, b, c);
          const d = Kn(Nw[0], Nw[1], Nw[2], Nw[0]);
          Ir(Nw[1], Nw[2]);
        })(Nw[2], Nw[3], Nw[0]);
        return e ^ 63745;
      }(Nw[0], Nw[1], Nw[2], Nw[3]);
      const a = Va(Nw[4], Nw[5], Nw[Hi], Nw[ie], Nw[xj]);
      return (8 << ((h ^ a) >> 8 & 255)) + (16 << ((h ^ a) & 255)) + (In << ((h ^ a) >> Mn & Fe)) + (24 << ((h ^ a) >> 24 & 255));
    }(Nw[wj], Nw[1], Nw[2], Nw[0], Nw[1], Nw[Hj]);
    return (8 << ((d ^ e) >> 24 & 255)) + (24 << ((d ^ e) & 255)) + (ck << ((d ^ e) >> 16 & 255)) + (0 << ((d ^ e) >> 8 & 255));
  }
  const Kk = yk;
  function Lk(b, c, d, e, f) {
    const i = (12345 + (56214 + b) * 1103515245) % 2147483648;
    const j = (31264 + c) % 65426;
    const a = (16 << (e >> 24 & 255)) + (24 << (e >> 8 & 255)) + (8 << (e & 255)) + (0 << (e >> 16 & 255));
    const k = (1013904223 + (13546 + f) * 1664525) % 4294967296;
    const h = function (b, c, d) {
      const e = (8 << (b >> 8 & 255)) + (0 << (b >> 16 & Bl)) + (16 << (b >> Zj & 255)) + (24 << (b >> 24 & 255));
      const f = (16 << (c >> 24 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c >> Rs & 255)) + (_a << (c >> 8 & Br));
      const g = (55188 + d) % 65322;
      const h = function (b, c, d, e, f, i) {
        const j = ~(e & 16217) & 16217 | ~(e & 16217) & e;
        const a = ((47059 + f) * 1103515245 + 12345) % 2147483648;
        const k = i ^ 63571;
        const h = Rw(((b + 63530) * 214013 + 2531011) % 4294967296, ~(c & 19757) & 19757 | ~(c & 19757) & c, (d | 33789) & ~(d & 33789));
        const l = gf(j, a, k);
        return (ct << ((h ^ l) >> qh & 255)) + (8 << ((h ^ l) >> 24 & 255)) + (24 << ((h ^ l) & 255)) + (0 << ((h ^ l) >> 8 & 255));
      }(e, f, g, e, f, g);
      Rw(e, f, g);
      return (h | 27408) & ~(h & 27408);
    }(i, j, ((d + 43685) * 2147483629 + 2147483587) % 2147483647);
    const l = Tw(a, k, i, j);
    return (Gk << ((h ^ l) >> Zj & 255)) + (24 << ((h ^ l) >> 24 & 255)) + (16 << ((h ^ l) >> 8 & 255)) + (0 << ((h ^ l) >> 16 & 255));
  }
  const Mk = "development";
  const Nk = Fe;
  const Ok = qi;
  const Pk = "production";
  const Qk = Qj;
  const Rk = Ej;
  function Sk(a) {
    this.ⲆⲆᐃᐃ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ⲆⲆᐃᐃ - ie));
  }
  const Tk = C;
  Sk.prototype.random = function () {
    this.state = (this.state * this.a + this.c) % this.ⲆⲆᐃᐃ;
    return this.state / this.ⲆⲆᐃᐃ;
  };
  Sk.prototype.ⵠᐃᐃⲆΔⲆⵠ = function (a) {
    this.state = a;
  };
  ΔⵠΔⲆⵠⵠⵠ = 10000;
  const Uk = Xi;
  ᐃΔᐃⲆᐃⲆΔ = [];
  var Vk = new Sk();
  Vk.ⵠᐃᐃⲆΔⲆⵠ(new Date().getTime());
  for (var Wk = wj; Wk < ΔⵠΔⲆⵠⵠⵠ; Wk++) {
    ᐃΔᐃⲆᐃⲆΔ.push(Vk.random());
  }
  const Xk = Ck;
  const Yk = gk;
  const Zk = kk;
  const $k = wk;
  function _k(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const j = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const a = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & Fe)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const m = function (c, d, e, f, i, j) {
      const m = c ^ 10715;
      const a = (24 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & k)) + (8 << (d >> 24 & 255));
      const n = (8 << (e >> 16 & 255)) + (32 << (e >> 24 & 255)) + (16 << (e >> 8 & 255)) + (24 << (e >> 32 & 255));
      const h = f ^ 40782;
      const l = i ^ 41301;
      const g = ~(j & 12091) & (j | 12091);
      const o = sn(m, a, n, h, l, g);
      sn(m, a, n, h, l, g);
      xn(m, a, n, h, l);
      const b = (o | 3006) & ~(o & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, j, a, f, i);
    const h = Fn(j, a, f, i, j);
    sn(a, f, i, j, a, f);
    const l = (1013904223 + (26191 + (m ^ h)) * 1664525) % 4294967296;
    return (l | 38630) & ~(l & 38630);
  }
  function aq(c, e, f, i, j, m) {
    const n = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const a = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const o = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const l = (j + 3575) % 65503;
    const g = ~(m & 6932) & m | ~(m & 6932) & 6932;
    const p = Sn(n, a, o, h, l);
    const b = function (c, d, e, f, i, j) {
      const m = c ^ 30142;
      const a = (d + 63025) % 65493;
      const n = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const l = (8 << (i >> 16 & Nk)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & k)) + (16 << (i >> 8 & 255));
      const g = (j | 45652) & ~(j & 45652);
      const o = Sn(m, a, n, h, l);
      dq(g, m, a, n, h);
      An(l, g, m, a, n, h);
      return o ^ 60048;
    }(g, n, a, o, h, l);
    mn(g, n, a, o, h, l);
    const q = (1013904223 + (60709 + (p ^ b)) * 1664525) % 4294967296;
    return ~(q & 42138) & q | ~(q & 42138) & 42138;
  }
  const bq = Jj;
  const cq = Ni;
  function dq(b, c, d, e, f) {
    const i = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
    const j = c ^ 63080;
    const a = ((d + 60304) * 22695477 + 1) % 4294967296;
    const k = ~(e & 5467) & 5467 | ~(e & 5467) & e;
    const h = (f | 40165) & ~(f & 40165);
    const l = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const j = d ^ 62842;
      const a = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = en(f, i, j, a);
      const h = Bn(f, i, j, a);
      _k(f, i, j, a);
      const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & Nk)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> zj & 255));
      return ~(l & 63304) & (l | 63304);
    }(i, j, a, k);
    const g = Fn(h, i, j, a, k);
    return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ Ln(h, i, j, a, k, h))) * 1664525 + 1013904223) % 4294967296;
  }
  const eq = Si;
  function fq(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const m = d ^ 58614;
    const a = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const n = f ^ 40810;
    const h = (24 << (i >> 24 & Li)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & Fe)) + (16 << (i >> 16 & 255));
    const l = Gn(j, m);
    const g = _k(a, n, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const j = (16 << (d >> 8 & k)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const a = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const m = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = Rn(c, d, c);
        ln(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ iq(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = En(j, a, f, i, j);
      Gn(a, f);
      const l = (58498 + (m ^ h)) % 65531;
    })(m, a, n, h);
    const o = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> p & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
    return ~(o & 13644) & o | ~(o & 13644) & 13644;
  }
  const gq = Kk;
  const hq = ik;
  function iq(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (G << (b >> 8 & 255)) + (24 << (b >> ck & 255)) + (8 << (b >> 32 & 255));
    const j = (c + 39144) % 65406;
    const a = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const l = en(i, j, a, k);
    En(h, i, j, a, k);
    mn(h, i, j, a, k, h);
    return (l | 19326) & ~(l & 19326) ^ 36297;
  }
  function en(a, b, c, d) {
    const e = a ^ 11762;
    const f = ~(b & 19425) & 19425 | ~(b & 19425) & b;
    return ((55182 + (((17757 + ((32 << ((e ^ f) >> 32 & 255)) + (8 << ((e ^ f) >> Bi & 255)) + (24 << ((e ^ f) >> 24 & 255)) + (16 << ((e ^ f) >> 16 & 255)) ^ (32 << (c >> 16 & 255)) + (8 << (c >> 32 & Li)) + (24 << (c >> 24 & 255)) + (16 << (c >> 8 & k)))) * 1664525 + 1013904223) % 4294967296 ^ (~(d & 259) & 259 | ~(d & 259) & d))) * 1664525 + 1013904223) % 4294967296;
  }
  function tn(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> G & 255)) + (16 << (b >> 8 & k)) + (8 << (b >> 32 & 255));
    const j = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const a = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & k));
    const m = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const l = Qn(i, j);
    En(a, m, h, i, j);
    An(a, m, h, i, j, a);
    const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
    return ~(g & 46567) & (g | 46567);
  }
  const nn = ke;
  const on = v;
  function rn(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & Nk));
    const i = ~(d & 32053) & (d | 32053);
    const a = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> gk & 255)) + (24 << (b >> 24 & 255)) + (E << (b >> 8 & 255));
      const i = (mk + (50595 + c) * 22695477) % 4294967296;
      const j = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const a = e ^ 18768;
      const k = Sn(f, i, j, a, f);
      const h = fq(i, j, a, f, i);
      const l = yn(j, a);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, i, a);
    Bn(f, g, i, a);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ Sn(f, g, i, a, f))) * 214013) % 4294967296;
  }
  function an(c, d, e, f, i, j) {
    const m = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const a = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const n = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & Nk)) + (Yk << (f >> E & 255)) + (E << (f >> ck & Li)) + (32 << (f >> 32 & 255));
    const l = (1 + (39199 + i) * 22695477) % 4294967296;
    const g = j ^ 33037;
    const o = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & Nk)) + (32 << (d >> 8 & 255));
      const i = wn(e, f, g, e, f);
      const a = Ln(g, e, f, g, e, f);
      const j = function (a, b) {
        const c = (16 << (a >> 8 & zn)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & k)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = An(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const j = (2531011 + (c + 41768) * 214013) % 4294967296;
          const a = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const l = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const h = dq(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const m = (2531011 + (c + 16955) * 214013) % 4294967296;
                const a = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const l = ~(j & 24998) & (j | 24998);
                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = rn(m, a, n, h);
                const b = En(l, g, m, a, n);
                const p = rn(h, l, g, m);
              })(g, e, f, g, e, f);
              Bn(g, e, f, g);
              return ~(h & 43875) & (h | 43875) ^ 15116;
            }(c, d, c);
            xn(d, c, d, c, d);
            en(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, j);
          ln(a, k, h, i);
          const g = tn(j, a, k, h, i);
        })(c, d, c, d, c);
        Qn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(g, e);
      const h = (16 << ((i ^ a) >> 32 & 255)) + (24 << ((i ^ a) >> 24 & k)) + (32 << ((i ^ a) >> zj & 255)) + (8 << ((i ^ a) >> 16 & 255));
      return (8 << ((h ^ j) >> 32 & 255)) + (G << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
    }(m, a, n);
    Bn(h, l, g, m);
    return ((34159 + (o ^ 2959 ^ rn(a, n, h, l))) * 1103515245 + 12345) % 2147483648;
  }
  function sn(b, c, d, e, f, i) {
    const j = ~(b & 36133) & (b | 36133);
    const a = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const l = f ^ 7550;
    const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (_n(j, a, k, h, l) ^ Bn(g, j, a, k))) * 2147483629 + 2147483587) % 2147483647 ^ xn(h, l, g, j, a))) * 1103515245) % 2147483648;
  }
  const hn = Ok;
  function ln(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const i = d ^ 38714;
    const a = e ^ 58084;
    const j = aq(f, g, i, a, f, g);
    Bn(i, a, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ mn(i, a, f, g, i, a))) * 214013 + 2531011) % 4294967296;
  }
  const gn = sk;
  const un = xk;
  const bn = Jj;
  const vn = D;
  const dn = d;
  const cn = j;
  function mn(b, c, d, e, f, g) {
    const i = b ^ 23409;
    const a = c ^ 26380;
    const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = g ^ 42490;
    return ((19056 + (en(i, a, d ^ 53590, e ^ 36633) ^ en(j, h, i, a))) * 22695477 + 1) % 4294967296;
  }
  const pn = Qk;
  const Cn = Ak;
  const Tn = di;
  const fn = I;
  const zn = k;
  function yn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> G & 255));
    const f = mn(d, e, d, e, d, e);
    const g = mn(d, e, d, e, d, e);
    en(d, e, d, e);
    const h = (16 << ((f ^ g) >> 32 & k)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(h & 55949) & 55949 | ~(h & 55949) & h;
  }
  function wn(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const j = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const a = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const l = mn(i, j, a, k, h, i);
    const g = en(j, a, k, h);
    Rn(i, j, a);
    return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & Nk)) ^ 31710;
  }
  const Pn = H;
  function An(c, d, e, f, i, j) {
    const k = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const a = (d | 41551) & ~(d & 41551);
    const m = (24 << (e >> 24 & Nk)) + (16 << (e >> 32 & 255)) + (8 << (e >> 16 & Fe)) + (32 << (e >> 8 & 255));
    const h = ~(f & 32641) & (f | 32641);
    const l = ((i + 35582) * 214013 + 2531011) % 4294967296;
    const g = ~(j & 1090) & (j | 1090);
    const n = Ln(k, a, m, h, l, g);
    iq(k, a, m, h, l);
    en(g, k, a, m);
    const b = ~(n & 8077) & 8077 | ~(n & 8077) & n;
    return ~(b & 3708) & (b | 3708);
  }
  const kn = P;
  function xn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const j = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const a = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & Fe)) + (ck << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const l = mn(i, j, a, k, h, i);
    const g = An(j, a, k, h, i, j);
    en(a, k, h, i);
    return (He << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> p & zn)) + (24 << ((l ^ g) >> Bi & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
  }
  const Jn = Ei;
  const Mn = ck;
  function Bn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const g = c ^ 57623;
    const i = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const a = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const j = Qn(f, g);
    Qn(i, a);
    Fn(f, g, i, a, f);
    const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
    return (h | 8862) & ~(h & 8862);
  }
  const Dn = Kk;
  const In = Hi;
  function En(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const j = c ^ 50118;
    const a = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const l = Ln(i, j, a, k, h, i);
    Ln(j, a, k, h, i, j);
    return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ en(a, k, h, i))) * 214013) % 4294967296;
  }
  function Sn(b, c, d, e, f) {
    const i = b ^ 62008;
    const j = (24 << (c >> 32 & 255)) + (qk << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const a = ((d + 46531) * 22695477 + mk) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const l = dq(i, j, a, k, h);
    Ln(i, j, a, k, h, i);
    return ((3037 + (l ^ 57467 ^ Fn(j, a, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  function Qn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (_n(c, d, c, d, c) ^ En(d, c, d, c, d))) % 65357 ^ en(c, d, c, d))) * 22695477) % 4294967296;
  }
  function _n(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (zj << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const k = d ^ 55978;
    const a = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & Li)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const l = En(j, k, a, m, h);
    const g = xn(j, k, a, m, h);
    en(j, k, a, m);
    const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & Li));
    return ~(n & 23686) & (n | 23686);
  }
  function Fn(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const k = (d + 52922) % 65337;
    const a = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const l = iq(j, k, a, m, h);
    const g = Gn(j, k);
    iq(a, m, h, j, k);
    const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  function Rn(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const h = tn(e, f, g, e, f);
    const a = tn(g, e, f, g, e);
    tn(f, g, e, f, g);
    return (16 << ((h ^ a) >> 32 & 255)) + (8 << ((h ^ a) >> 8 & 255)) + (24 << ((h ^ a) >> 24 & 255)) + (32 << ((h ^ a) >> 16 & 255)) ^ 31181;
  }
  function Gn(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = tn(d, e, d, e, d);
    const g = _n(e, d, e, d, e);
    wn(d, e, d, e, d);
    const h = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(h & 40927) & 40927 | ~(h & 40927) & h;
  }
  const jn = Zk;
  function Ln(b, c, d, e, f, i) {
    const j = d ^ 8102;
    const a = (24 << (e >> Mn & 255)) + (32 << (e >> 32 & k)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & Li));
    const m = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (ie + (62237 + i) * 22695477) % 4294967296;
    const l = yn((b + 52483) % 65496, (ck << (c >> 16 & 255)) + (24 << (c >> 8 & zn)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const g = yn(j, a);
    yn(m, h);
    return (45290 + (l ^ g)) % 65334 ^ 55575;
  }
  function Wn(b, c, d, e, f) {
    const g = ~(b & 34987) & (b | 34987);
    const i = e ^ 33438;
    const a = (2147483587 + (f + 3159) * 2147483629) % 2147483647;
    const j = pt(g, (c | 32276) & ~(c & 32276), (24 << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (Hi << (d >> mj & 255)) + (8 << (d >> 24 & 255)));
    const h = gf(i, a, g);
    return (8 << ((j ^ h) >> 8 & zn)) + (0 << ((j ^ h) >> 16 & 255)) + (24 << ((j ^ h) & Fe)) + (16 << ((j ^ h) >> 24 & 255));
  }
  const On = zj;
  const Nn = x;
  const qn = Kj;
  const Hn = Nk;
  const Un = Ej;
  function Yn(a, b, c) {
    Yj(Mw, a, b, c);
    return ((172 + (st(Nw[wj], Nw[mk], Nw[Hj], Nw[0]) ^ function (a, b, c) {
      Re(Mw, a, b, c);
      const d = Zs(Nw[0], Nw[1], Nw[2], Nw[0], Nw[Oq]);
      const e = function (b, c, d, e, f, g) {
        ni(Mw, b, c, d, e, f, g);
        const h = function (a, b, c, d) {
          Le(Mw, a, b, c, d);
          const e = Zs(Nw[Bg], Nw[1], Nw[dg], Nw[ci], Nw[0]);
          Va(Nw[ie], Nw[2], Nw[3], Nw[ya], Nw[1]);
          return ~(e & 46317) & (e | 46317);
        }(Nw[0], Nw[1], Nw[2], Nw[3]);
        const a = Zs(Nw[ul], Nw[5], Nw[0], Nw[1], Nw[H]);
        return ((90 + (h ^ a)) * 8121 + 28411) % 134456;
      }(Nw[2], Nw[ps], Nw[1], Nw[ss], Nw[0], Nw[mk]);
      return (0 << ((d ^ e) >> Vg & 255)) + (24 << ((d ^ e) >> 24 & Hn)) + (8 << ((d ^ e) >> Bi & 255)) + (16 << ((d ^ e) & 255));
    }(Nw[mk], Nw[H], Nw[0]))) * 8121 + 28411) % 134456;
  }
  function Kn(a, b, c, d) {
    Ue(Mw, a, b, c, d);
    return ((63 + (Jw(Nw[Hi], Nw[1], Nw[2], Nw[3]) ^ Yn(Nw[wj], Nw[Te], Nw[2]))) * 48271 + 0) % 2147483647;
  }
  const Vn = $i;
  const Zn = vn;
  const Xn = ie;
  ᐃⵠΔⲆ = {
    ΔⲆΔⲆⵠⲆᐃ: () => new Promise((a, b) => {
      dj.grecaptcha.ready(function () {
        dj.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (fw) {
            a(mj);
          } else {
            console.log(undefined);
            b(c);
          }
        });
      });
    }),
    ⲆᐃⲆᐃⵠⵠΔⲆⲆ: function (a) {
      dj.open(a, "_blank").focus();
    },
    ⲆⲆⲆΔᐃᐃᐃ: function (a) {
      dj.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ΔΔⲆᐃⲆΔⲆ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return f;
        }
      }
      return xk;
    },
    ᐃⵠᐃΔᐃΔΔᐃΔ: function (a, b) {
      if (a.length != b.length) {
        return C;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ΔΔⲆᐃⲆΔⲆ(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return false;
        }
      }
      return ye;
    },
    ΔⵠᐃΔⵠⲆΔ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ⲆⲆΔⵠⲆΔⲆ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⵠᐃΔᐃⲆᐃᐃⲆΔ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ⵠⵠᐃⵠⲆᐃΔ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ⵠΔⵠᐃⵠⵠⵠ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return mk;
      }
    },
    ⲆΔⵠᐃⵠᐃⲆ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ΔⵠΔⵠⲆᐃⲆ: function (a, b, c, d) {
      var e = d - b;
      var f = c - a;
      return Math.atan2(e, f);
    },
    ΔⲆΔⵠΔΔΔ: function (a, b) {
      return Math.asin(this.ⵠⵠᐃⵠⲆᐃΔ(a, b) / (this.ⵠΔⵠᐃⵠⵠⵠ(a) * this.ⵠΔⵠᐃⵠⵠⵠ(b))) * this.sign(this.ⲆΔⵠᐃⵠᐃⲆ(a, b));
    },
    ΔⲆⵠᐃᐃΔΔ: function (a) {
      ᐃΔᐃᐃⲆΔⵠ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ᐃΔᐃᐃⲆΔⵠ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ⵠΔⵠΔΔᐃⲆ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ᐃᐃΔΔⲆⲆⲆ: function (a, b) {
      return this.ΔⲆΔⵠΔΔΔ({
        x: mk,
        y: 0
      }, this.ⲆⲆΔⵠⲆΔⲆ(a, b));
    },
    ΔΔⵠΔ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ΔⵠⵠΔΔΔⲆ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ⲆΔΔᐃⲆⲆⵠ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ⲆᐃⲆᐃⲆⵠⵠ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ΔⵠᐃΔⵠⵠⲆᐃⵠ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ᐃᐃⲆΔᐃΔⵠⲆΔ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ᐃⵠᐃᐃΔ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ᐃΔᐃⵠΔⵠⲆ: function (a, b) {
      return Math.floor((a - b) / Pn);
    },
    ᐃⵠΔᐃⲆⲆⵠ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ᐃⲆᐃⲆᐃⲆᐃ: function () {
      if (Math.random() > 0.5) {
        return mk;
      } else {
        return -ie;
      }
    },
    ⲆᐃⵠⲆⵠᐃⲆΔⲆ: function (a, b, c) {
      var d = this.ᐃⲆᐃⲆᐃⲆᐃ();
      var e = this.ᐃⲆᐃⲆᐃⲆᐃ();
      var f = Math.random() * Math.PI / H;
      return {
        x: Math.floor(a + Math.sin(f) * d * c),
        y: Math.floor(b + Math.cos(f) * e * c)
      };
    },
    ΔⲆⵠᐃᐃⲆⵠΔᐃ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ΔⵠⲆ = d;
    },
    ΔⵠⲆⲆᐃⵠⵠΔⵠ: function (a) {
      Ⲇⵠᐃ = [];
      Ⲇⵠᐃ.push.apply(Ⲇⵠᐃ, a);
      var b = [];
      while (Ⲇⵠᐃ.length > wj) {
        var c = Math.floor(Math.random() * Ⲇⵠᐃ.length);
        b.push(Ⲇⵠᐃ[c]);
        Ⲇⵠᐃ.splice(c, ie);
      }
      return b;
    },
    ⲆⲆᐃⲆⵠΔⲆ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ᐃΔⵠᐃᐃᐃᐃ: function (a) {
      if (typeof a !== "number") {
        return "0";
      }
      if (a >= 10000) {
        var b = Math.floor(Math.log10(a)) - Pn;
        var c = Math.max(wj, Hk - b);
        var d = Math.floor(a / 1000).toString();
        if (c) {
          for (var e = (d += "." + (a % 1000 / 1000).toString().substring(2).substring(0, c)).length - mk, f = wj; e > 0 && d[e] == "0"; e--) {
            f++;
          }
          if ((d = d.substring(0, d.length - f))[d.length - mk] == ".") {
            d = d.substring(Zj, d.length - 1);
          }
        }
        return d += "k";
      }
      return a.toString();
    },
    ᐃΔΔⲆᐃⵠⵠ: function (a) {
      return a * (jk - a);
    },
    ⵠⵠⲆⵠΔΔΔ: function (a) {
      return --a * a * a + 1;
    },
    ⲆⵠΔⲆⵠ: function (a) {
      if (a < 0.5) {
        return H * a * a;
      } else {
        return (Pe - Hj * a) * a - 1;
      }
    },
    ΔΔⵠᐃⵠⵠᐃ: function (a) {
      if (a < 0.5) {
        return Gi * a * a * a;
      } else {
        return (a - Te) * (jk * a - 2) * (jk * a - 2) + 1;
      }
    },
    ΔⵠΔᐃᐃᐃᐃΔⲆ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - On * --a * a * a * a;
      }
    },
    ⲆⵠⵠⵠⵠᐃΔ: function (a) {
      return Xn - --a * a * a * a;
    },
    ΔⵠΔⵠᐃΔⲆ: function (a) {
      return mk + --a * a * a * a * a;
    },
    ⵠᐃⲆᐃ: function (a, b, c, d, e, f) {
      this.ⵠᐃⵠ = a;
      this.ΔΔⲆ = b;
      this.max = c;
      this.min = d;
      this.ⵠΔᐃᐃᐃⲆⲆ = e;
      this.ⵠΔⵠᐃⲆⲆⲆ = f;
      this.ᐃᐃᐃΔᐃᐃᐃ = Zj;
      this.ᐃⲆΔ = function () {
        if (this.ⵠᐃⵠ) {
          if ((a = this.ΔΔⲆ + _w * this.ⵠΔᐃᐃᐃⲆⲆ) > this.max) {
            this.ΔΔⲆ = this.max;
            this.ⵠᐃⵠ = vj;
            return true;
          }
          this.ΔΔⲆ = a;
        } else {
          var a;
          if ((a = this.ΔΔⲆ - _w * this.ⵠΔⵠᐃⲆⲆⲆ) < this.min) {
            this.ΔΔⲆ = this.min;
            this.ⵠᐃⵠ = true;
          } else {
            this.ΔΔⲆ = a;
          }
        }
      };
      return Jn;
    },
    ΔⲆⲆΔΔ: function (a, b, c, d, e, f) {
      this.ⵠΔⵠΔᐃ = a;
      this.ⵠΔΔⲆⲆ = b;
      this.ⵠⲆⵠⲆⵠ = c;
      this.ᐃΔᐃΔᐃ = d;
      this.x = e;
      this.Ⲇⵠⵠᐃᐃ = f;
      this.ⵠΔⵠᐃⵠᐃᐃ = function () {
        this.x = this.ΔⵠⲆⲆⲆᐃⵠᐃΔ;
        this.ⵠΔΔⲆⲆ = 0;
      };
      this.ⵠⵠᐃⲆⵠⵠⵠ = function (a) {
        if (a !== this.Ⲇⵠⵠᐃᐃ) {
          this.Ⲇⵠⵠᐃᐃ = a;
          this.ᐃΔᐃΔᐃ = this.x;
          this.ⵠΔΔⲆⲆ = 0;
        }
        if (this.Ⲇⵠⵠᐃᐃ !== this.x) {
          this.ⵠΔΔⲆⲆ += _w;
          if (this.ⵠΔΔⲆⲆ > this.ⵠⲆⵠⲆⵠ) {
            this.x = this.Ⲇⵠⵠᐃᐃ;
          } else {
            var b = this.ⵠΔⵠΔᐃ(this.ⵠΔΔⲆⲆ / this.ⵠⲆⵠⲆⵠ);
            this.x = this.ᐃΔᐃΔᐃ + (this.Ⲇⵠⵠᐃᐃ - this.ᐃΔᐃΔᐃ) * b;
          }
        }
      };
    },
    ᐃΔⵠⵠᐃΔⲆ: function (b, c, d, e, f, g, i, a, j) {
      this.ⵠΔⵠΔᐃ = b;
      this.ⵠΔΔⲆⲆ = c;
      this.ⵠⲆⵠⲆⵠ = d;
      this.ᐃΔᐃΔᐃ = e;
      this.ᐃⵠᐃⵠΔ = f;
      this.x = g;
      this.y = i;
      this.Ⲇⵠⵠᐃᐃ = a;
      this.ᐃⲆⲆⲆΔᐃⵠ = j;
      this.ⵠⵠᐃⲆⵠⵠⵠ = function (a) {
        if (a.x != this.Ⲇⵠⵠᐃᐃ || a.y != this.ᐃⲆⲆⲆΔᐃⵠ) {
          this.Ⲇⵠⵠᐃᐃ = a.x;
          this.ᐃⲆⲆⲆΔᐃⵠ = a.y;
          this.ᐃΔᐃΔᐃ = this.x;
          this.ᐃⵠᐃⵠΔ = this.y;
          this.ⵠΔΔⲆⲆ = mj;
        }
        if (this.Ⲇⵠⵠᐃᐃ != this.x || this.ᐃⲆⲆⲆΔᐃⵠ != this.y) {
          this.ⵠΔΔⲆⲆ += _w;
          if (this.ⵠΔΔⲆⲆ > this.ⵠⲆⵠⲆⵠ) {
            this.x = this.Ⲇⵠⵠᐃᐃ;
            this.y = this.ᐃⲆⲆⲆΔᐃⵠ;
          } else {
            var b = this.ⵠΔⵠΔᐃ(this.ⵠΔΔⲆⲆ / this.ⵠⲆⵠⲆⵠ);
            this.x = this.ᐃΔᐃΔᐃ + (this.Ⲇⵠⵠᐃᐃ - this.ᐃΔᐃΔᐃ) * b;
            this.y = this.ᐃⵠᐃⵠΔ + (this.ᐃⲆⲆⲆΔᐃⵠ - this.ᐃⵠᐃⵠΔ) * b;
          }
        }
      };
    },
    ΔⲆⲆⲆⵠⵠⵠ: function (a) {
      var b = "";
      for (var c = mj; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ΔᐃΔⵠᐃᐃΔ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ⵠⵠᐃΔⵠ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ⵠⲆᐃⲆᐃⵠⵠ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ΔⵠⲆ;
    },
    ⵠⲆΔⵠᐃᐃⲆ: function (b, c, d, e, f, g, h, a) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, h) < Math.min(e, a)) {
        return mk;
      } else {
        return wj;
      }
    },
    ᐃⵠΔⵠᐃᐃᐃ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ⲆⲆΔⲆᐃⵠⲆ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return ie;
    } else {
      return -1;
    }
  };
  const $n = N;
  const eo = on;
  const io = Pj;
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ΔΔⲆΔⵠⲆⵠⲆⲆ;
  };
  const to = A;
  function no(b, c, d, e, f, i) {
    const j = b ^ 55047;
    const a = ((4671 + c) * 22695477 + 1) % 4294967296;
    const k = ~(d & 13622) & (d | 13622);
    const h = (11497 + e) % 65366;
    const l = ~(i & 29486) & 29486 | ~(i & 29486) & i;
    const g = Uw(j, a, k, h, (mk + (21477 + f) * 22695477) % 4294967296);
    Uw(l, j, a, k, h);
    return g ^ 49075;
  }
  function oo(b, c, d, e) {
    const f = (51241 + b) % 65499;
    const g = (24 << (c >> Yk & zn)) + (0 << (c >> 24 & 255)) + (16 << (c >> mj & 255)) + (8 << (c >> 8 & 255));
    const h = (d | 63027) & ~(d & 63027);
    const a = ((60253 + e) * 214013 + 2531011) % 4294967296;
    return ((32743 + (no(f, g, h, a, f, g) ^ Uw(h, a, f, g, h))) * 1664525 + 1013904223) % 4294967296;
  }
  (function (a) {
    var b = Tk;
    if (typeof ΔⵠᐃᐃⲆⵠΔ === "function" && ΔⵠᐃᐃⲆⵠΔ.ΔᐃᐃⲆΔᐃΔ) {
      ΔⵠᐃᐃⲆⵠΔ(a);
      b = un;
    }
    if (typeof ᐃᐃⲆⵠⵠⲆⲆ === "object") {
      ⵠⵠⲆᐃᐃΔⲆᐃⲆ.exports = a();
      b = y;
    }
    if (!b) {
      var c = dj.ⵠⵠΔΔ;
      var d = dj.ⵠⵠΔΔ = a();
      d.ⵠᐃᐃΔⲆⵠᐃⵠᐃ = function () {
        dj.ⵠⵠΔΔ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; arguments.length > a; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document !== "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ᐃᐃⵠⲆΔᐃⲆ, j)).expires === "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) {}
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⵠᐃⵠᐃᐃⵠΔⵠΔ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = Zj; n.length > l; l++) {
            var p = n[l].split("=");
            var q = p.slice(Te).join("=");
            if (q.charAt(Zj) === "\"") {
              q = q.slice(Te, -mk);
            }
            try {
              var s = p[Zj].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) {}
              }
              if (s === e) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) {}
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ⵠᐃⲆⲆΔΔΔⵠⵠ = function () {
        return d.apply({
          json: true
        }, [].slice.call(arguments));
      };
      d.ᐃᐃⵠⲆΔᐃⲆ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ᐃⲆΔⲆᐃᐃⵠᐃⲆ = a;
      return d;
    }(function () {});
  });
  const ro = V;
  var ao = document.getElementById("game_canvas");
  const so = b;
  var ho = ao.getContext("2d");
  var lo = ao.width;
  var jq = ao.height;
  const kq = M;
  var bo = ao.width / 2;
  var lq = ao.height / 2;
  var mq = {
    x: bo,
    y: lq
  };
  const nq = I;
  const po = dk;
  var Co = Te;
  const oq = F;
  var fo = 1;
  const pq = jk;
  var yo = -ie;
  const qq = nk;
  var Po = "J" + Wq;
  var rq = "S" + or;
  var sq = dj;
  const xo = Ei;
  const Jo = lj;
  const Mo = nn;
  const Bo = te;
  const Do = po;
  var Io;
  var tq;
  var uq = (Ko = "O") + "N";
  var vq = mj;
  const _o = v;
  const Fo = gk;
  const Ro = Ck;
  const Go = yk;
  var jo = sq;
  const Lo = w;
  var Wo;
  const wq = vi;
  const No = Nn;
  rq = "N";
  const qo = nq;
  var Ho = "J";
  const xq = H;
  const Yo = Ej;
  var Ko = "O" + Wq;
  const yq = d;
  const Zo = Fe;
  var Xo = jo;
  const $o = Qj;
  var zq;
  const Aq = $k;
  const Bq = U;
  const Cq = D;
  const Dq = Be;
  const Eq = M;
  var Fq = Xo;
  uq = "N" + undefined;
  const Gq = qn;
  const Hq = T;
  const Iq = E;
  const Jq = d;
  const Kq = dk;
  var Lq = Fq;
  const Mq = $i;
  var Nq;
  const Oq = Te;
  const Pq = Kq;
  var Qq;
  const Rq = Hi;
  const Sq = 14;
  var Tq;
  var Uq = Lq;
  const Vq = W;
  var Wq;
  var Xq = Uq;
  const Yq = Cn;
  var Zq;
  const $q = sj;
  var _q = Xq;
  Ho = "O";
  const ar = Nn;
  const br = On;
  const dr = Ei;
  const er = rk;
  var fr;
  const gr = Uk;
  const hr = W;
  var kr = _q = Xq;
  const lr = pq;
  var mr;
  const nr = Oj;
  var jr = kr;
  var or = "J" + (fr = "S");
  function pr(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⵠⲆⲆᐃⲆᐃⵠ = Te;
    return b;
  }
  ao.oncontextmenu = function () {
    return C;
  };
  Po = "J";
  const rr = Qj;
  const sr = Yk;
  const qr = Ok;
  const tr = Ri;
  const ur = wk;
  const vr = J;
  const wr = cn;
  const yr = I;
  const Ar = Aq;
  Ko = uq;
  uq = Wq;
  const Br = k;
  const Dr = vn;
  Wq = or;
  Ko = or;
  const ea = Hk;
  zq = Nq = or + (Ho += Po = rq);
  rq = Ho + Po;
  Qq = Io = tq = or + Ho;
  const ia = Aq;
  const ta = Fk;
  Ko = or + Ho;
  Tq = tq;
  const na = Kj;
  uq = or + Ho;
  Zq = Wo = Io;
  const oa = y;
  Ho = Wq = or;
  const ra = ke;
  const aa = br;
  fr = tq;
  const sa = x;
  const ha = bq;
  mr = Io;
  Po = Ko;
  const la = Mi;
  var ua = dj.devicePixelRatio || Oq;
  const ba = Vn;
  const va = Ck;
  const da = Sj;
  var ca = ho.ΔⵠⵠⵠᐃⵠⲆⲆᐃ || ho.ⵠᐃⵠΔΔⵠᐃⲆⲆ || ho.ⵠⲆᐃⲆⲆᐃⵠᐃⵠ || ho.ΔΔΔⲆΔΔⵠΔΔ || ho.ⵠᐃⵠᐃᐃΔⲆΔⲆ || 1;
  function ma() {
    if (ao.width != dj.innerWidth) {
      ao.width = dj.innerWidth;
      lo = ao.width;
      bo = ao.width / xj;
    }
    if (ao.height != dj.innerHeight) {
      ao.height = dj.innerHeight;
      jq = ao.height;
      lq = ao.height / pq;
    }
    mq = {
      x: bo,
      y: lq
    };
    var a = ao.width;
    var b = ao.height;
    fo = yo === -1 ? ua / ca : yo;
    ao.width = a * fo;
    ao.height = b * fo;
    ao.style.width = a + "px";
    ao.style.height = b + "px";
    ho.scale(fo, fo);
    if (Xw) {
      Xw.ⵠᐃⲆ.ⵠᐃⵠᐃᐃⲆⵠ = a;
      Xw.ⵠᐃⲆ.ᐃᐃᐃᐃᐃΔᐃ = b;
    }
    if (ax.ΔⵠᐃΔΔ) {
      ax.ᐃⲆΔ();
    } else if (vf.ΔⵠᐃΔΔ) {
      vf.ᐃⲆΔ();
    } else if (Zw.ΔⵠᐃΔΔ) {
      Zw.ᐃⲆΔ();
    } else if (Yw.ΔⵠᐃΔΔ) {
      Yw.ᐃⲆΔ();
    }
  }
  var pa = document.getElementById("game_body");
  const Ca = se;
  const Ta = Ei;
  const fa = zn;
  const za = Oq;
  pa.ondragstart = function () {
    return false;
  };
  pa.ondrop = function () {
    return Ei;
  };
  pa.onresize = ma;
  const ya = mj;
  const wa = gn;
  const Pa = sr;
  function Aa(b, c, d, e) {
    const f = ~(b & 32924) & (b | 32924);
    const g = c ^ 25669;
    const i = (Iq << (d & 255)) + (mj << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (24 << (d >> 24 & 255));
    const a = ~(e & 52849) & (e | 52849);
    const j = function (b, c, d, e) {
      const f = (12345 + (36970 + b) * 1103515245) % 2147483648;
      const g = (2531011 + (c + 45004) * 214013) % 4294967296;
      const i = d ^ 49735;
      const a = ~(e & 63410) & e | ~(e & 63410) & 63410;
      const j = kf(f, g, i, a, f);
      const h = function (b, c, d, e, f, i) {
        const j = ~(b & 46933) & b | ~(b & 46933) & 46933;
        const a = ((d + 22745) * 2147483629 + 2147483587) % 2147483647;
        const k = ((e + 58347) * 214013 + 2531011) % 4294967296;
        const h = ~(f & 52727) & f | ~(f & 52727) & 52727;
        const l = ~(i & 20032) & (i | 20032);
        const g = Ek(j, (8 << (c & 255)) + (16 << (c >> 16 & 255)) + (24 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)));
        Lk(a, k, h, l, j);
        return ~(g & 25886) & (g | 25886);
      }(g, i, a, f, g, i);
      return (24 << ((j ^ h) >> 8 & 255)) + (0 << ((j ^ h) >> 16 & 255)) + (8 << ((j ^ h) >> 24 & 255)) + (16 << ((j ^ h) & 255));
    }(f, g, i, a);
    const h = Tw(f, g, i, a);
    return (0 << ((j ^ h) >> p & 255)) + (24 << ((j ^ h) >> 24 & Li)) + (8 << ((j ^ h) >> 8 & 255)) + (16 << ((j ^ h) & 255));
  }
  (function () {
    var b = wj;
    for (var a = ["ms", "moz", "webkit", "o"], c = Rq; c < a.length && !dj.requestAnimationFrame; ++c) {
      dj.requestAnimationFrame = dj[a[c] + "RequestAnimationFrame"];
      dj.cancelAnimationFrame = dj[a[c] + "CancelAnimationFrame"] || dj[a[c] + "CancelRequestAnimationFrame"];
    }
    dj.requestAnimationFrame ||= function (c, d) {
      var e = new Date().getTime();
      var f = Math.max(mj, 16 - (e - b));
      var g = dj.setTimeout(function () {
        c(e + f);
      }, f);
      b = e + f;
      return g;
    };
    dj.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const ka = function () {
    let f = 0;
    let j = 0;
    let k = 0;
    const m = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([115, 116, 97, 99, 107]);
    const n = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
    const o = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
    const a = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([Nn, 114, 97, 119, 73, 109, 97, 103, 101]);
    ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
    const p = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
    const h = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([105, 110, 100, 101, 120, 79, 102]);
    const l = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([77, 97, 116, 104]);
    ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([99, 101, 105, 108]);
    const g = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([102, 108, 111, 111, 114]);
    const q = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
    const b = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([115, 101, 110, 100]);
    const r = ᐃⵠΔⲆ.ⵠⵠᐃΔⵠ([115, 105, 103, 110]);
    function d(a) {
      try {
        a();
      } catch (a) {
        if (a[m][h](p) !== -1) {
          return 1;
        } else {
          return 0;
        }
      }
      return wj;
    }
    return {
      ΔⵠⲆᐃⵠΔⵠ: function () {
        j++;
        if (j > 1000) {
          j = wj;
          k = d(dj[n][o][a]) || k;
          k = d(dj[q][o][b]) || k;
          k = function (a) {
            try {
              new a();
            } catch (a) {
              if (a[m][h](p) !== -Xn) {
                return Oq;
              } else {
                return In;
              }
            }
            return In;
          }(dj[q]) || k;
        }
        if (Xn === k) {
          f++;
          if (f > 10000) {
            f = 0;
            dj[l][g] = dj[l][r];
          }
        }
      }
    };
  }();
  function xa(b, c, d) {
    const e = b ^ 32587;
    const f = ((19981 + c) * 1664525 + 1013904223) % 4294967296;
    const g = ((39766 + d) * 1664525 + 1013904223) % 4294967296;
    const h = Jr(e, f);
    (function (b, c, d, e, f, g) {
      const i = (2147483587 + (55915 + b) * 2147483629) % 2147483647;
      const a = (12345 + (15503 + g) * 1103515245) % 2147483648;
      const j = Wn(i, (12345 + (12846 + c) * 1103515245) % 2147483648, d ^ 65503, ~(e & 32611) & e | ~(e & 32611) & 32611, ~(f & 58450) & 58450 | ~(f & 58450) & f);
      Jr(a, i);
    })(g, e, f, g, e, f);
    return h ^ 54677;
  }
  const Ja = Kk;
  function Ma(b, c, d, e, f) {
    const i = (b + 139) % 65333;
    const j = (0 << (c & 255)) + (24 << (c >> 8 & 255)) + (16 << (c >> 24 & 255)) + (8 << (c >> 16 & 255));
    const a = (d + 32839) % 65339;
    const k = (0 << (e >> 8 & 255)) + (8 << (e >> 16 & 255)) + (24 << (e >> 24 & 255)) + (16 << (e & Li));
    const h = (8 << (f >> 8 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 24 & 255)) + (0 << (f & 255));
    const l = Wn(i, j, a, k, h);
    const g = no(i, j, a, k, h, i);
    return (24 << ((l ^ g) >> 24 & Br)) + (16 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) & Fe)) + (0 << ((l ^ g) >> 16 & 255));
  }
  function Ba(a) {
    return function (b, c, d, e) {
      const f = (8 << (b >> 8 & 255)) + (24 << (b >> zl & 255)) + (0 << (b >> 24 & 255)) + (16 << (b >> 16 & 255));
      const g = (1 + (c + 44589) * 22695477) % 4294967296;
      const i = (d | 55208) & ~(d & 55208);
      const a = ((e + 25543) * 1103515245 + 12345) % 2147483648;
      const j = Jr(f, g);
      (function (b, c, d, e, f) {
        const g = b ^ 57510;
        const h = ~(f & 11694) & f | ~(f & 11694) & 11694;
        const a = Aa(g, ~(c & 46360) & c | ~(c & 46360) & 46360, ~(d & 25146) & d | ~(d & 25146) & 25146, ~(e & 45890) & (e | 45890));
        Hw(h, g);
      })(i, a, f, g, i);
      return j ^ 44598;
    }(a, 13795, 19269, 47307);
  }
  const Da = mj;
  var Ia = navigator.language || navigator.userLanguage;
  var Er = -new Date().getTimezoneOffset() / 60;
  const Sa = Ik;
  const Qa = qq;
  const _a = Bi;
  var Fa = "Europe";
  const Ra = J;
  const Ga = $q;
  const ja = Zn;
  const La = Sj;
  const Wa = dk;
  var Oa = "South America";
  const Na = ji;
  const qa = Yo;
  var Ha = Fa;
  const Fr = Gi;
  if (Er >= -lr && Er <= 2) {
    Ha = Fa;
  } else if (Er > 2 && Er <= 5) {
    Ha = "Russia";
  } else if (nr < Er && Lo >= Er) {
    Ha = "Asia";
  } else if (Er > 9) {
    Ha = "Australia";
  } else if (Er >= -nr && Er < -Pn) {
    Ha = Ia === "pt-BR" || Ia === "pt-br" || Ia === "pt" || Ia === "pt-pt" ? Oa : "North America";
  } else if (Er < -5) {
    Ha = Ia === "pt-BR" || Ia === "pt-br" || Ia === "pt" || Ia === "pt-pt" ? Oa : "West America";
  }
  var Sk = {
    ⵠᐃⲆΔᐃⲆⵠ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor(Math.random() * (b - mk));
      this.ᐃΔΔΔᐃ = function (a) {
        c = a || Math.floor(Math.random() * (b - ie));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const Ya = Bq;
  const Ka = oq;
  function Va(b, c, d, e, f) {
    Mj(Mw, b, c, d, e, f);
    const g = Iw(Nw[0], Nw[1], Nw[2], Nw[3], Nw[Pe], Nw[mj]);
    const h = Iw(Nw[1], Nw[xq], Nw[Hk], Nw[4], Nw[ya], Nw[1]);
    return (16 << ((g ^ h) >> 16 & 255)) + (0 << ((g ^ h) >> 8 & 255)) + (24 << ((g ^ h) & Br)) + (He << ((g ^ h) >> 24 & 255));
  }
  const Za = rk;
  const Xa = to;
  const $a = Ka;
  const Hr = Bi;
  function Ir(a, b) {
    mi(Mw, a, b);
    const c = $s(Nw[0], Nw[Xn], Nw[0]);
    $s(Nw[1], Nw[0], Nw[Te]);
    return c ^ 54357;
  }
  function Jr(a, b) {
    const c = ~(a & 56758) & 56758 | ~(a & 56758) & a;
    const d = ~(b & 21953) & (b | 21953);
    const e = it(c, d, c, d, c, d);
    const f = function (b, c, d) {
      const e = ~(b & 16347) & 16347 | ~(b & 16347) & b;
      const f = c ^ 30675;
      const g = ~(d & 33945) & (d | 33945);
      const h = lf(e, f, g, e, f, g);
      const a = function (c, d, e, f, i, j) {
        const k = ~(c & 51476) & 51476 | ~(c & 51476) & c;
        const a = ~(d & 65196) & (d | 65196);
        const m = ~(e & 1626) & e | ~(e & 1626) & 1626;
        const h = ~(f & 11312) & 11312 | ~(f & 11312) & f;
        const l = ((i + 51351) * 1103515245 + 12345) % 2147483648;
        const g = (24 << (j >> 16 & rh)) + (0 << (j >> 24 & 255)) + (8 << (j & 255)) + (16 << (j >> 8 & 255));
        const n = function (b, c, d) {
          const e = (b | 5301) & ~(b & 5301);
          const f = (c + 54951) % 65424;
          const g = (0 << (d >> 24 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (He << (d & 255));
          const h = function (b, c, d, e) {
            const f = ((46782 + b) * 2147483629 + 2147483587) % 2147483647;
            const g = (2531011 + (c + 12803) * 214013) % 4294967296;
            const i = (d + 43194) % 65347;
            const a = e ^ 48528;
            const j = it(f, g, i, a, f, g);
            oo(i, a, f, g);
            return ~(j & 3771) & j | ~(j & 3771) & 3771;
          }(e, f, g, e);
          Wn(f, g, e, f, g);
          return h ^ 33185;
        }(k, a, m);
        const b = it(h, l, g, k, a, m);
        return (24 << ((n ^ b) >> 24 & 255)) + (16 << ((n ^ b) & 255)) + (0 << ((n ^ b) >> 8 & 255)) + (8 << ((n ^ b) >> 16 & 255));
      }(e, f, g, e, f, g);
      return ((22941 + (h ^ a)) * 2147483629 + 2147483587) % 2147483647;
    }(c, d, c);
    return (Iq << ((e ^ f) >> He & 255)) + (16 << ((e ^ f) & 255)) + (0 << ((e ^ f) >> 16 & 255)) + (24 << ((e ^ f) >> 24 & 255));
  }
  var Kr = [[mj, "DRAGON", 18, 6, 66, 35, mj], [Da, "WINTER", 91, Ik, Oj, 40, He], [Zj, "DESERT", 135, 180, 89, 124, kq], [0, "LAVA", 142, 6, 82, 99, U], [Da, "FOREST", 6, 150, 90, 154, 8], [In, "WINTER", Xk, ji, 90, 150, Da], [1, "b", Hi, 5, 175, mj], [1, "t", 2, 5, 174, 0], [Xn, "t", Oj, nr, 173, In], [1, "b", I, 5, 176, 0], [za, "t", 0, 5, 177, ya], [Te, "t", 3, M, 178, 0], [Te, "t", 4, 5, 179, 0], [1, "b", 0, kq, 180, 0], [ie, "t", Fk, nr, 181, 0], [1, "b", xq, 5, 182, 0], [ie, "b", 1, nr, 183, Zj], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [Oq, "t", 2, 5, 186, Hi], [1, "t", Hi, ta, 187, Da], [mk, "t", 5, 5, 188, 0], [1, "t", Te, Fk, 189, wj], [mk, "b", H, q, 190, 0], [1, "t", 4, 5, 191, wj], [Te, "b", yr, 5, 192, ya], [1, "t", ta, 5, 193, mj], [1, "t", wj, 5, 194, 0], [1, "t", 3, q, 195, 0], [za, "b", ya, 5, 196, ya], [1, "t", kq, Eq, 197, Rq], [1, "t", 2, M, 198, 0], [ie, "b", lr, kq, 199, 0], [Te, "t", 4, 5, 200, 0], [ie, "t", 1, 5, 201, ya], [za, "b", Te, 5, 202, 0], [1, "t", Oj, kq, 203, 0], [1, "t", lr, nr, 204, 0], [1, "t", Vn, z, 205, 0], [1, "b", H, 5, 206, mj], [za, "t", za, 5, 207, 0], [1, "t", Vn, nr, 208, 0], [ie, "t", Hj, 5, 209, 0], [1, "b", Rq, ta, 210, 0], [Xn, "t", 5, z, 211, 0], [1, "t", za, 5, 212, Da], [1, "t", 2, M, 213, 0], [za, "b", ci, 5, 214, mj], [Xn, "t", Eq, 5, 215, Rq], [1, "b", wj, nr, 216, 0], [ie, "t", $i, Fk, 217, mj], [1, "t", Hj, 5, 218, 0], [1, "t", ie, 5, 219, Rq], [Xn, "t", 3, 5, 220, 0], [Oq, "t", 5, nr, 221, 0], [1, "t", jk, Oj, 222, 0], [mk, "t", 4, kq, 223, 0], [Oq, "b", 3, M, 224, ya], [Oq, "t", 1, Eq, 225, 0], [1, "t", 3, 5, 226, In], [1, "b", 0, 5, 227, 0], [Oq, "t", nq, Fk, 228, 0], [1, "t", ta, 5, 229, 0], [Xn, "t", 2, Oj, 230, 0], [1, "t", ya, ta, 231, 0], [Oq, "b", xq, 5, 232, Rq], [Te, "t", za, nr, 233, ya], [1, "t", 4, 5, 234, Rq], [1, "b", za, q, 235, 0], [Oq, "t", nj, 5, 236, 0], [Oq, "t", 2, 5, 237, wj], [1, "t", 0, M, 238, 0], [1, "t", 4, 5, 239, ya], [mk, "b", Hj, ta, 240, Rq], [1, "t", Oj, 5, 241, mj], [1, "b", mk, 5, 242, 0], [ie, "t", Pe, nr, 243, 0], [1, "t", Hj, Oj, 244, 0], [Xn, "t", Xn, 5, 245, Da], [1, "b", 1, 5, 246, wj], [ie, "t", nq, q, 247, Hi], [1, "b", 2, 5, 248, 0], [1, "t", M, 5, 249, ya], [1, "t", 2, q, 250, Zj], [1, "t", 4, ta, 251, mj], [Xn, "b", za, kq, 252, wj], [Oq, "t", 4, 5, 253, Zj], [1, "t", 1, z, 254, mj], [ie, "t", 3, nr, Zo, 0], [mk, "t", z, 5, Ja, mj], [za, "b", Pn, Fk, 257, 0], [1, "t", ba, Eq, 258, Hi], [mk, "b", 3, 5, 259, 0], [1, "t", ta, 5, 260, 0], [1, "b", ya, 5, 261, 0], [ie, "t", I, 5, 262, Rq], [ie, "t", 4, 5, 263, 0], [mk, "t", 2, Fk, 264, 0], [za, "b", 1, 5, 265, 0], [mk, "b", 2, Eq, 266, Da], [za, "t", qo, 5, 267, ya], [Te, "t", $i, 5, 268, In], [ie, "t", 0, 5, 269, Hi], [1, "t", 5, 5, 270, 0], [za, "t", qo, 5, 271, 0], [1, "t", Vn, 5, 272, 0], [Xn, "t", 1, nr, 273, Da], [1, "b", pq, 5, 274, In], [1, "t", Oq, 5, 275, wj], [Xn, "t", Pe, Fk, 276, 0], [1, "b", 1, nr, 277, Hi], [1, "b", 2, 5, 278, 0], [1, "t", za, 5, 279, Da], [za, "t", 4, 5, 280, 0], [Oq, "t", 2, q, 281, Hi], [1, "t", Oj, 5, 282, ya], [Xn, "b", 2, 5, 283, 0], [ie, "t", Oq, 5, 284, mj], [mk, "b", 3, 5, 285, Rq], [ie, "t", 4, 5, 286, 0], [Oq, "t", wj, 5, 287, ya], [1, "t", Fk, Eq, 288, 0], [1, "t", 2, 5, 289, Zj], [1, "b", Oq, 5, 290, Zj], [Oq, "t", Pe, 5, 292, 0], [1, "t", Pn, 5, 291, Hi], [mk, "b", 2, z, 293, 0], [za, "t", Xn, z, 294, 0], [ie, "t", 3, 5, 295, In], [ie, "t", Oj, 5, 296, 0], [za, "b", 0, ta, 297, Rq], [za, "b", 3, M, 298, wj], [1, "t", 4, 5, 299, Hi], [1, "t", xj, Eq, 300, Zj], [1, "t", $i, 5, 301, 0], [za, "b", 0, q, 302, mj], [za, "b", H, 5, 303, mj], [Te, "t", Xn, Na, 303, Hi], [Te, "t", Hj, ur, 303, Rq], [1, "t", 1, q, 304, 0], [1, "t", I, U, 304, Rq], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", mk, zj, 304, 0], [za, "b", 2, 9, 304, Da], [mk, "b", 3, 12, 303, 0], [1, "b", Hk, Rk, 304, 0], [1, "t", za, se, 303, wj], [za, "t", 1, Ga, 304, mj], [1, "t", mk, Vi, 303, Rq], [1, "t", 3, sk, 303, wj], [1, "t", 3, 14, 304, 0], [1, "t", ba, 10, 304, 0], [1, "t", 5, 11, 304, In], [mk, "t", 5, dk, 303, Rq], [1, "t", 5, 16, 304, Da], [1, "t", 5, D, 304, 0], [Xn, "t", jk, 12, 304, Rq], [ie, "t", 1, ke, 303, 0], [1, "b", 3, eo, 303, 0], [mk, "b", Da, G, 303, 0], [Xn, "t", I, 17, 303, 0], [mk, "t", 4, 18, 303, Hi], [1, "t", Pn, 19, 303, Zj], [Xn, "t", 1, vi, 303, In], [Te, "b", 1, 21, 303, 0], [1, "t", xq, 22, 303, ya], [ie, "t", 4, 23, 303, 0], [Xn, "b", Hk, 24, 303, 0], [Oq, "t", kq, 25, 303, 0], [1, "t", 1, 26, 303, Zj], [Oq, "t", lr, 27, 303, Zj], [1, "t", 4, 28, 303, Da], [1, "b", In, 18, 304, Da], [Te, "t", lr, b, 304, 0], [ie, "t", 5, 20, 304, 0], [ie, "b", 2, 21, 304, 0], [ie, "t", 4, 22, 304, 0], [za, "t", 2, 23, 304, In], [1, "t", 1, 24, 304, Zj], [1, "t", Hk, 25, 304, 0], [1, "t", wj, 27, 304, Rq], [Xn, "t", Eq, 26, 304, 0], [1, "b", H, 28, 304, 0], [mk, "t", mk, 29, 304, 0], [ie, "b", mk, 29, 303, Zj], [mk, "b", 2, 30, 303, 0], [Xn, "t", 4, 31, 303, ya], [ie, "t", Hi, 32, 303, 0], [za, "t", Oj, 33, 303, In], [1, "t", lr, 34, 303, 0], [1, "t", 4, 35, 303, wj], [1, "t", 1, 36, 303, 0], [ie, "b", yr, 37, 303, Rq], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", za, 31, 304, wj], [mk, "b", 1, 33, 304, 0], [ie, "t", 2, 35, 304, ya], [1, "t", 5, 34, 304, Da], [1, "b", 2, 36, 304, Rq], [1, "t", 5, 37, 304, Rq], [mk, "t", za, 38, 304, Rq], [ie, "b", 1, 40, 303, In], [mk, "t", ea, 39, 303, Rq], [Te, "t", 3, 42, 304, 0], [1, "t", ta, 38, 303, 0], [Xn, "t", Eq, 39, 304, 0], [1, "t", nr, 41, 303, wj], [1, "t", Mq, 41, 304, Rq], [1, "t", 4, 44, 303, 0], [Xn, "b", Pn, 40, 304, Rq], [1, "b", H, 43, 303, 0], [za, "t", mk, 42, 303, 0], [za, "t", Oq, 43, 304, 0], [Xn, "t", ta, 44, 304, 0], [Te, "b", 1, 45, 303, ya], [ie, "t", Hj, 45, 304, 0], [1, "t", 2, 46, 303, 0], [Oq, "t", Mq, 47, 303, 0], [1, "b", wj, 48, 303, 0], [1, "t", z, 49, 303, ya], [1, "t", pq, 50, 303, 0], [1, "t", ie, 51, 303, In], [1, "t", 4, 52, 303, mj], [1, "t", Oj, 46, 304, wj], [za, "t", xq, 47, 304, 0], [1, "t", kq, 48, 304, Hi], [za, "t", Te, 49, 304, 0], [1, "t", jk, 50, 304, 0], [1, "b", mk, 53, 303, wj], [1, "b", Pn, 51, 304, Hi], [ie, "t", 5, 52, 304, ya], [1, "t", 3, 53, 304, Rq], [Te, "b", 2, 54, 303, 0], [1, "t", Oj, 54, 304, 0], [mk, "t", kq, 55, 303, Rq], [1, "t", 3, 56, 303, Rq], [1, "t", Mq, 57, 303, 0], [1, "t", Oj, 58, 303, Hi], [Xn, "b", Oq, 55, 304, Da], [1, "t", H, 56, 304, mj], [mk, "t", Rq, 57, 304, 0], [Xn, "t", 3, 58, 304, wj], [1, "t", 3, 63, 304, wj], [1, "t", 3, 59, 303, 0], [Oq, "t", $i, 59, 304, 0], [za, "t", nr, 60, 303, Zj], [ie, "t", Zj, 60, 304, 0], [Te, "t", wj, 66, 303, Hi], [Xn, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, wj], [Oq, "t", qo, 67, 303, Hi], [1, "t", fn, 73, 304, Rq], [Te, "t", ci, 76, 303, 0], [1, "t", I, 78, 304, Zj], [1, "t", 1, 61, 303, 0], [Te, "t", 1, 73, 303, mj], [Te, "t", ie, 79, 303, 0], [1, "b", Hj, 62, 304, Da], [Oq, "b", Hj, 70, 303, 0], [za, "t", q, 62, 303, 0], [1, "t", 5, 68, 303, Zj], [za, "t", Oj, 71, 304, 0], [Oq, "t", 5, 77, 304, wj], [1, "t", 5, 75, 303, 0], [1, "t", kq, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, Hi], [za, "t", 3, 63, 303, mj], [1, "t", ta, 82, 304, 0], [1, "b", 2, 65, 304, 0], [Oq, "t", 1, 64, 303, 0], [Te, "t", Xn, 68, 304, 0], [1, "t", xq, 69, 304, 0], [Te, "t", 4, 69, 303, 0], [mk, "t", 5, 66, 304, In], [mk, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", Zj, 71, 303, Da], [1, "t", Pe, 72, 303, 0], [1, "t", 4, 74, 304, 0], [Oq, "t", xj, 74, 303, 0], [za, "t", fn, 75, 304, Rq], [1, "t", mk, 77, 303, wj], [ie, "t", Gi, 78, 303, Da], [za, "t", Mq, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", ie, 81, 304, 0], [Te, "t", Hj, 81, 303, Rq], [mk, "t", Eq, 82, 303, mj], [1, "t", mk, 83, 303, 0], [1, "b", 2, 83, 304, Zj], [1, "t", Te, 84, 304, Rq], [1, "t", Mq, 84, 303, ya], [Te, "t", Oj, 85, 304, Zj], [za, "t", 3, 85, 303, In], [za, "b", 2, 86, 304, ya], [Oq, "t", Oq, 86, 303, ya], [1, "b", 3, 87, 303, Da], [Te, "t", 4, 87, 304, Zj], [za, "t", Mq, 88, 303, 0], [ie, "t", 0, 88, 304, mj], [Oq, "b", Oq, 89, 303, 0], [1, "t", 3, 89, 304, mj], [za, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", Fr, 91, 303, Zj], [Te, "t", 0, 91, 304, 0], [Xn, "b", Hj, 92, 303, 0], [1, "t", ba, 92, 304, In], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, In], [1, "b", fn, 94, 303, 0], [za, "b", 0, 94, 304, Hi], [Oq, "b", 0, 95, 303, 0], [za, "t", Hj, 95, 304, 0], [1, "f", Oq, z, 151, Xn], [1, "f", Pn, ta, 153, ie], [Xn, "f", 0, Eq, 152, Te], [mk, "f", Rq, 5, 147, 1], [1, "f", 0, 5, 144, Te], [Te, "f", 0, M, 140, 1], [1, "f", 1, nr, 149, ie], [1, "f", 1, kq, 146, 1], [1, "f", Xn, 5, 143, 1], [Te, "f", 1, 5, 141, 1], [1, "f", jk, nr, 150, 1], [za, "f", Pn, 5, 148, 1], [1, "f", 2, nr, 145, 1], [Te, "f", Hj, ta, 142, 1], [1, "f", jk, z, 139, 1], [za, "f", pq, ta, 136, 1], [1, "f", pq, 5, 133, 1], [1, "f", lr, 5, 131, 1], [1, "f", 2, 5, 127, 1], [za, "f", pq, 5, 125, Xn], [ie, "f", 1, Fk, 138, 1], [ie, "f", 1, kq, 135, za], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, ie], [1, "f", Xn, q, 128, Xn], [Oq, "f", ie, ta, 126, za], [1, "f", ie, 5, 124, 1], [Te, "f", wj, 5, 129, mk], [1, "f", In, 5, 134, 1], [1, "f", 0, z, 137, 1], [Xn, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, Te], [mk, "f", mk, Eq, 120, 1], [Te, "f", ie, 5, 117, 1], [1, "f", Te, ta, 115, 1], [1, "f", 1, 5, 111, 1], [Oq, "f", 1, Eq, 108, 1], [1, "f", pq, M, 121, ie], [1, "f", xq, Eq, 118, za], [1, "f", xq, z, 116, za], [1, "f", 2, Fk, 113, 1], [Oq, "f", 2, 5, 110, ie], [Te, "f", 0, kq, 119, Oq], [1, "f", Zj, 5, 114, 1], [1, "f", 0, Eq, 112, Xn], [za, "f", 0, 5, 109, 1], [1, "f", Oq, 5, 106, ie], [Te, "f", 1, M, 103, 1], [1, "f", 1, 5, Cn, 1], [Te, "f", 1, ta, 97, mk], [Oq, "f", Xn, ta, 95, Xn], [1, "f", xj, 5, 107, mk], [Oq, "f", pq, q, 105, 1], [1, "f", 2, kq, 102, 1], [mk, "f", 2, 5, 99, mk], [1, "f", H, 5, 96, za], [ie, "f", 2, 5, 94, Oq], [1, "f", 0, Eq, 104, 1], [1, "f", Da, 5, 101, 1], [Oq, "f", Zj, z, 98, 1], [1, "f", 0, 5, 93, ie], [1, "f", Oq, 5, 92, 1], [Xn, "f", 1, 5, 89, mk], [1, "f", Oq, M, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [Te, "f", 1, Fk, 78, 1], [ie, "f", 2, kq, 90, 1], [ie, "f", pq, Fk, 88, Xn], [Oq, "f", pq, 5, 85, Xn], [1, "f", xj, 5, 82, Te], [1, "f", 2, z, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", lr, Oj, 75, za], [Oq, "f", 2, q, 72, 1], [1, "f", 0, Eq, 91, za], [za, "f", 0, Fk, 87, Xn], [1, "f", ya, 5, 84, Xn], [za, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, ie], [1, "f", Da, Fk, 74, 1], [1, "f", 1, nr, 73, 1], [1, "f", Xn, Fk, 71, 1], [1, "f", 1, 5, 68, za], [Xn, "f", 1, 5, 66, Xn], [1, "f", 1, 5, 62, za], [ie, "f", Te, q, 59, Te], [Xn, "f", 1, Fk, 56, za], [Te, "f", 1, Eq, 53, 1], [1, "f", za, 5, 50, 1], [1, "f", 2, nr, 70, Oq], [Xn, "f", lr, 5, 67, 1], [1, "f", 2, 5, 65, 1], [ie, "f", xq, 5, 63, 1], [ie, "f", Hj, 5, 60, 1], [Te, "f", 2, Eq, 57, za], [mk, "f", Pn, 5, 54, za], [1, "f", 2, ta, 51, Te], [1, "f", Da, ta, 69, 1], [mk, "f", Zj, Eq, 64, mk], [mk, "f", 0, 5, 61, 1], [1, "f", Zj, Oj, 58, 1], [ie, "f", 0, 5, 55, 1], [ie, "f", 0, 5, 52, ie], [mk, "f", mj, 5, 49, 1], [1, "f", 0, ta, 45, 1], [Oq, "f", Rq, q, 42, 1], [za, "f", 0, 5, 38, Te], [Xn, "f", 0, kq, 34, za], [1, "f", 0, 5, 31, za], [Xn, "f", ie, 5, 48, 1], [1, "f", Xn, 5, 44, Xn], [ie, "f", 1, 5, 41, mk], [Te, "f", 1, 5, 37, 1], [1, "f", Te, 5, 33, 1], [1, "f", 1, 5, 29, ie], [za, "f", 2, 5, 30, 1], [za, "f", H, ta, 32, Te], [Xn, "f", 2, 5, 35, za], [Te, "f", 2, 5, 39, 1], [1, "f", Hj, Eq, 46, za], [1, "f", pq, 5, 43, ie], [1, "f", Oq, M, 47, 1], [Te, "f", mj, 5, 40, za], [1, "f", 0, M, 36, Xn], [Te, "f", 0, 5, 28, Xn], [1, "f", Te, 5, 25, 1], [1, "f", 1, nr, 22, 1], [1, "f", 1, Oj, 20, ie], [ie, "f", 1, z, 16, mk], [Xn, "f", za, 5, ja, za], [za, "f", 1, ta, sk, 1], [1, "f", 2, 5, 27, Oq], [ie, "f", Hj, z, 24, 1], [mk, "f", 2, 5, 21, Xn], [Te, "f", xq, ta, 19, 1], [Xn, "f", pq, kq, Ga, 1], [1, "f", 2, 5, 12, za], [1, "f", jk, q, R, Xn], [1, "f", 0, 5, 26, za], [1, "f", 0, 5, 23, 1], [mk, "f", mj, 5, 14, Xn], [1, "f", ya, 5, 11, ie], [ie, "f", Da, ta, 17, mk], [za, "f", za, nr, 18, 1], [1, "f", 1, nr, He, mk], [Xn, "f", mj, 5, ia, 1], [1, "f", Xn, kq, Qa, Oq], [mk, "f", 0, Fk, 5, 1], [1, "f", 1, 6, M, 1], [1, "f", xj, 7, 5, Xn], [mk, "f", 0, Bi, 5, Te], [1, "f", Oq, 9, 5, 1], [ie, "f", 1, 12, q, ie], [1, "f", 1, 15, 5, 1], [ie, "f", Xn, Yo, 5, Xn], [1, "f", Oq, 22, 5, 1], [Xn, "f", 1, 26, 5, Xn], [ie, "f", 2, 10, Eq, ie], [1, "f", H, Cq, nr, 1], [mk, "f", jk, ck, 5, 1], [1, "f", 2, 18, 5, 1], [ie, "f", pq, 21, 5, 1], [1, "f", pq, 23, Eq, Oq], [1, "f", Pn, 25, 5, za], [1, "f", Hj, 27, z, 1], [za, "f", Zj, nn, ta, 1], [Oq, "f", 0, Do, 5, 1], [1, "f", Zj, 19, 5, Te], [1, "f", 0, 24, nr, Te], [Oq, "f", 0, 28, 5, Oq], [Oq, "f", ie, 20, Oj, 1], [1, "f", Xn, 29, ta, 1], [Xn, "f", Te, 32, 5, za], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, kq, 1], [1, "f", 1, 41, Oj, mk], [1, "f", Xn, 45, 5, 1], [1, "f", xj, 30, ta, 1], [1, "f", pq, 33, kq, ie], [za, "f", pq, 36, 5, Te], [Te, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, Oq], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, z, 1], [1, "f", ya, 43, 5, Oq], [Xn, "f", 0, 40, q, Oq], [Te, "f", 0, 37, 5, 1], [Xn, "f", 0, 34, 5, mk], [1, "f", mj, 31, 5, 1], [za, "f", 0, 47, 5, 1], [Xn, "f", 1, 48, 5, ie], [ie, "f", 1, 51, 5, Oq], [1, "f", ie, 53, 5, mk], [1, "f", ie, 57, Eq, 1], [1, "f", 1, 60, kq, 1], [Te, "f", 1, 63, q, mk], [1, "f", 1, 65, M, mk], [1, "f", xj, 64, 5, 1], [1, "f", Hj, 62, q, 1], [za, "f", 2, 59, 5, 1], [Xn, "f", 2, 56, q, Te], [Xn, "f", 2, 52, 5, 1], [Oq, "f", 2, 49, ta, mk], [Oq, "f", 2, 54, 5, Te], [1, "f", 0, 50, q, 1], [Xn, "f", In, 55, M, Oq], [1, "f", 0, 58, Fk, za], [1, "f", Hi, 61, Eq, ie], [1, "f", 0, 66, 5, Te], [1, "f", 1, 67, 5, Te], [Oq, "f", za, 70, 5, za], [za, "f", 1, 72, 5, Xn], [1, "f", 1, 75, z, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, ta, 1], [mk, "f", Hj, 71, 5, ie], [1, "f", 2, 74, Fk, Xn], [mk, "f", 2, 76, 5, 1], [za, "f", lr, 78, q, ie], [Oq, "f", ya, 69, 5, Te], [1, "f", 0, 73, ta, 1], [za, "f", 0, 77, nr, Oq], [za, "f", Rq, 80, 5, Oq], [Te, "f", Oq, 81, 5, za], [Te, "f", 1, 84, nr, 1], [1, "f", 1, 87, 5, ie], [1, "f", 1, 89, q, mk], [1, "f", 1, 92, kq, mk], [1, "f", 1, 94, 5, 1], [ie, "f", 0, 82, 5, 1], [1, "f", H, 83, Fk, 1], [Xn, "f", xq, 85, q, ie], [1, "f", 2, 88, kq, 1], [1, "f", 2, 90, 5, mk], [1, "f", xj, 93, Eq, za], [Te, "f", 2, 95, nr, 1], [za, "f", 0, 86, M, mk], [1, "f", mj, 91, Fk, za], [ie, "f", 2, 6, 153, 1], [Te, "f", mk, Ro, 152, za], [1, "t", za, 93, 301, 0], [1, "t", nq, 94, 302, In], [mk, "t", 5, 95, 302, 0], [1, "t", Oj, 93, 302, Rq], [Te, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, ya], [1, "t", Oj, 90, 302, Rq], [1, "b", 2, 92, 301, Zj], [Oq, "t", ie, 91, 301, wj], [ie, "t", 2, 90, 301, Rq], [Oq, "b", 2, 89, 302, Da], [Te, "t", 4, 89, 301, Zj], [za, "t", Oq, 88, 302, 0], [za, "t", xj, 88, 301, In], [mk, "t", ci, 87, 302, ya], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, mj], [Xn, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, mj], [Te, "b", 2, 84, 302, mj], [1, "t", Oj, 83, 302, 0], [Xn, "t", 1, 82, 302, 0], [1, "t", q, 81, 302, 0], [Te, "t", jk, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", lr, 78, 302, Rq], [1, "b", ie, 77, 302, 0], [1, "b", 2, 76, 302, 0], [za, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [Oq, "b", 1, 73, 302, wj], [za, "t", lr, 72, 302, 0], [1, "t", 4, 71, 302, ya], [1, "b", 3, 70, 302, mj], [1, "t", 1, 69, 302, Rq], [mk, "t", 2, 68, 302, wj], [1, "t", Fk, 67, 302, 0], [1, "b", Xn, 66, 302, Rq], [Xn, "t", 2, 65, 302, 0], [1, "t", Gi, 64, 302, 0], [1, "b", ci, 63, 302, wj], [1, "t", Fk, 62, 302, wj], [ie, "b", 1, 61, 302, Zj], [1, "t", qo, 60, 302, 0], [1, "t", 4, 59, 302, 0], [Te, "b", 2, 58, 302, In], [Te, "t", 5, 57, 302, 0], [mk, "t", ie, 56, 302, 0], [Xn, "t", 3, 55, 302, Rq], [Te, "t", $i, 54, 302, Hi], [ie, "t", 1, 53, 302, Rq], [1, "t", Eq, 52, 302, Rq], [Te, "t", 2, 51, 302, 0], [za, "t", Vn, 50, 302, 0], [1, "t", 2, 49, 302, Da], [1, "b", 1, 48, 302, 0], [ie, "t", 3, 47, 302, Da], [mk, "t", 4, 46, 302, In], [1, "t", mk, 45, 302, Rq], [Oq, "t", 2, 44, 302, Zj], [1, "t", q, 43, 302, wj], [1, "t", 2, 42, 302, 0], [ie, "t", Te, 41, 302, wj], [Oq, "t", Mq, 40, 302, 0], [za, "b", H, 39, 302, 0], [za, "t", 5, 38, 302, 0], [1, "t", ie, 37, 302, 0], [za, "t", 2, 36, 302, Da], [Oq, "t", 5, 35, 302, 0], [Oq, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", Fr, 32, 302, 0], [za, "b", 1, 31, 302, 0], [1, "t", lr, 30, 302, Da], [ie, "t", 4, 29, 302, Hi], [Xn, "t", 2, 28, 302, 0], [1, "t", Oj, 27, 302, mj], [1, "b", 3, 26, 302, 0], [Oq, "t", 1, 25, 302, Da], [Xn, "t", Fr, 24, 302, Hi], [za, "t", xq, 23, 302, ya], [1, "t", 1, 22, 302, mj], [1, "t", 5, 21, 302, 0], [1, "t", pq, 20, 302, Hi], [1, "t", 4, Dq, 302, Zj], [ie, "b", 1, W, 302, 0], [1, "t", nr, 17, 302, Rq], [1, "t", Hk, gk, 302, 0], [ie, "t", Xn, _o, 302, Hi], [1, "t", M, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [ie, "t", 1, 11, 302, Zj], [Xn, "t", 2, 10, 302, 0], [mk, "t", 4, fk, 302, 0], [mk, "b", 3, 8, 302, 0], [1, "t", Oj, zj, 302, wj], [1, "t", 5, cq, 302, wj], [ie, "b", 2, U, 302, Da], [1, "t", mk, qq, 301, Da], [1, "t", 4, 6, 300, Rq], [za, "t", xj, nk, 299, Hi], [ie, "b", mj, 6, 298, 0], [1, "t", kq, 6, 297, Zj], [mk, "t", jk, Ck, 296, 0], [1, "t", mj, 6, 295, 0], [1, "b", lr, Ro, 294, 0], [za, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, Zj], [za, "b", 0, Na, 291, 0], [1, "t", lr, 6, 290, 0], [1, "t", Fk, Na, 289, Rq], [1, "t", ie, 6, 288, 0], [ie, "t", nj, nk, 287, In], [mk, "t", xq, 6, 286, 0], [1, "t", q, U, 285, 0], [ie, "t", H, 6, 284, 0], [Oq, "b", Zj, U, 283, In], [1, "t", pq, 6, 282, Hi], [Oq, "t", Oj, ji, 281, 0], [1, "b", 2, Ro, 280, Hi], [za, "t", z, 6, 279, 0], [1, "t", ie, va, 278, 0], [1, "t", 4, Bq, 277, Hi], [mk, "t", 3, Ya, 276, 0], [Xn, "t", Oj, 6, 275, 0], [1, "b", Hi, 6, 274, 0], [1, "t", 5, U, 273, 0], [ie, "t", Xn, 6, 272, 0], [1, "t", 4, 6, 271, Rq], [1, "b", nq, Ro, 270, 0], [1, "t", M, Qa, 269, 0], [za, "t", 1, qq, 268, 0], [1, "t", Gi, ji, 267, 0], [1, "t", za, 6, 266, 0], [Xn, "t", 3, 6, 265, 0], [1, "t", 4, Na, 264, Zj], [Te, "b", pq, 6, 263, 0], [1, "t", 5, 6, 262, 0], [za, "t", I, Qa, 261, 0], [mk, "t", 0, 6, 260, 0], [Xn, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, mj], [1, "t", I, 6, 257, 0], [ie, "t", Gi, 6, 255, mj], [1, "t", 3, 6, 254, wj], [1, "t", Eq, 6, 253, mj], [1, "b", lr, 6, 252, 0], [mk, "t", ta, 6, 251, 0], [Xn, "t", 1, Bq, 250, 0], [Te, "t", 3, va, 249, 0], [1, "t", Vn, Bq, 248, 0], [mk, "b", ea, 6, 247, 0], [Oq, "t", 5, Ck, 246, mj], [1, "t", yr, 6, 245, 0], [1, "t", Oj, va, 244, 0], [ie, "t", mj, 6, 243, 0], [Xn, "t", 4, 6, 242, Zj], [1, "t", I, 6, 241, In], [1, "t", 5, qq, 240, 0], [1, "b", 0, 6, 239, mj], [ie, "t", 3, 6, 238, 0], [1, "t", Fr, 6, 237, 0], [Te, "t", 1, 6, 236, 0], [Te, "t", nr, qq, 235, 0], [Xn, "b", 2, ji, 234, Rq], [Oq, "t", xq, 6, 233, Rq], [Xn, "t", nj, Ya, 232, Da], [Oq, "b", Hk, Ya, 231, 0], [Oq, "t", 5, Na, 230, 0], [Xn, "t", za, 6, 229, 0], [1, "t", 2, U, 228, mj], [za, "t", 5, 6, 227, mj], [1, "b", 2, Ya, 226, mj], [ie, "t", 4, 6, 225, 0], [1, "t", 0, Bq, 224, 0], [1, "t", xq, 6, 223, 0], [Xn, "t", In, Bq, 222, Zj], [ie, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, Ya, 219, 0], [ie, "t", 5, va, 218, In], [1, "t", 0, Na, 217, 0], [1, "t", qo, 6, 216, 0], [1, "b", Rq, 6, 215, 0], [Te, "t", 4, 6, 214, Rq], [Oq, "t", H, Ya, 213, 0], [za, "t", mj, Ya, 212, In], [1, "t", pq, Ya, 211, ya], [mk, "b", 3, qq, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", kq, Bq, 207, wj], [Xn, "t", 2, 6, 208, 0], [1, "t", 0, Ck, 206, Hi], [1, "t", 2, ji, 205, Zj], [1, "t", jk, 6, 203, wj], [ie, "b", wj, Ya, 202, 0], [1, "t", yr, nk, 201, 0], [1, "t", 4, Na, 199, 0], [Te, "t", 0, Na, 198, 0], [za, "t", jk, Bq, 197, 0], [1, "t", 4, va, 196, 0], [Oq, "t", 1, 6, 195, ya], [za, "t", 3, va, 194, In], [ie, "t", 4, va, 192, Zj], [1, "t", 2, 6, 191, ya], [Xn, "b", Da, nk, 190, 0], [1, "t", 3, U, 189, Hi], [Te, "t", 4, va, 187, Rq], [1, "b", 0, U, 186, mj], [1, "t", H, 6, 185, 0], [Xn, "t", Pe, 6, 184, Hi], [Xn, "t", xj, Bq, 183, 0], [1, "t", 0, Ro, 182, 0], [ie, "b", 2, Xk, 181, 0], [1, "t", M, 6, 180, Da], [1, "t", 2, ji, 179, Rq], [1, "t", 0, nk, 178, 0], [Xn, "t", jk, nk, 177, 0], [1, "t", Gi, U, 176, 0], [1, "b", Hj, Bq, 175, 0], [1, "t", 1, U, 174, ya], [1, "t", 5, 6, 173, In], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, Da], [Te, "t", 4, 6, 200, ya], [Te, "t", Pn, 6, 193, Rq], [Oq, "t", Hj, nk, 188, Rq], [1, "f", 1, 6, 150, Oq], [1, "f", Pn, 6, 151, 1], [1, "f", 2, 6, 149, 1], [mk, "f", 1, 6, 148, 1], [ie, "f", jk, 6, 147, Oq], [za, "f", Pn, Xk, 145, ie], [1, "f", 2, 6, 143, 1], [za, "f", 1, 6, 146, Te], [Xn, "f", 1, Na, 144, ie], [1, "f", Oq, nk, 142, 1], [1, "f", 2, 6, 141, 1], [ie, "f", xj, 6, 139, 1], [ie, "f", 2, Ro, 137, mk], [Oq, "f", 2, 6, 135, 1], [1, "f", 2, Na, 133, za], [1, "f", 1, 6, 140, 1], [za, "f", 1, 6, 138, 1], [Oq, "f", 1, 6, 136, za], [mk, "f", 1, 6, 134, Xn], [1, "f", 1, 6, 132, 1], [Oq, "f", Pn, 6, 131, 1], [1, "f", 2, U, 129, za], [1, "f", Hj, va, 127, 1], [1, "f", Pn, Xk, 125, 1], [1, "f", 2, 6, 123, 1], [ie, "f", pq, Bq, 121, 1], [1, "f", 1, Ck, 130, 1], [ie, "f", mk, 6, 128, Oq], [Xn, "f", mk, qq, 126, Xn], [1, "f", Oq, 6, 124, 1], [1, "f", Xn, va, 122, Xn], [ie, "f", 1, 6, 120, mk], [1, "f", 2, Bq, 119, 1], [1, "f", 2, 6, 117, 1], [mk, "f", xj, U, 115, Xn], [1, "f", pq, 6, 113, mk], [1, "f", xq, 6, 111, ie], [Xn, "f", pq, 6, 109, Te], [Xn, "f", mk, 6, 118, Xn], [za, "f", Te, 6, 116, Te], [1, "f", 1, 6, 114, Oq], [1, "f", Oq, 6, 112, za], [1, "f", 1, 6, 110, 1], [1, "f", 1, qq, 108, za], [mk, "f", za, 6, 106, 1], [1, "f", 1, 6, 104, 1], [mk, "f", 2, Ck, 107, 1], [ie, "f", pq, 6, 105, ie], [Te, "f", pq, 6, 103, Te], [1, "f", 2, 6, 101, 1], [ie, "f", jk, Xk, 99, 1], [ie, "f", Pn, 6, 97, 1], [Oq, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, Oq], [1, "f", 2, 6, 91, 1], [Xn, "f", 1, 6, 102, Te], [Xn, "f", 1, 6, Yq, 1], [Oq, "f", Oq, 6, 98, 1], [1, "f", 1, 6, 96, mk], [Te, "f", Oq, 6, 94, ie], [mk, "f", Oq, 6, 92, 1], [1, "f", ie, Ya, 90, 1], [1, "f", 1, va, 88, mk], [1, "f", 1, 6, 86, za], [Oq, "f", Hj, 6, 89, Oq], [Xn, "f", 2, ji, 87, za], [1, "f", lr, nk, 85, Oq], [1, "f", Hj, va, 83, 1], [za, "f", Hj, 6, 81, 1], [1, "f", Hj, Ck, 79, 1], [Te, "f", jk, 6, 77, 1], [1, "f", 1, 6, 84, 1], [ie, "f", Te, Bq, 82, 1], [1, "f", 1, 6, 80, Te], [Te, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, Te], [1, "f", 2, 6, 75, Oq], [1, "f", 2, 6, 73, Oq], [1, "f", xq, 6, 71, za], [1, "f", Pn, 6, 69, za], [ie, "f", Hj, 6, 67, 1], [Oq, "f", pq, Na, 65, 1], [1, "f", za, 6, 74, mk], [Te, "f", 1, 6, 72, za], [1, "f", Oq, 6, 70, 1], [1, "f", za, 6, 68, 1], [mk, "f", 1, Ro, 66, za], [mk, "f", Oq, 6, 64, za], [ie, "f", 2, U, 63, ie], [Oq, "f", 2, 6, 61, Oq], [1, "f", jk, 6, 59, Xn], [Xn, "f", 2, 6, 57, Xn], [za, "f", H, Xk, 55, 1], [ie, "f", 2, 6, 53, 1], [za, "f", 2, va, 51, 1], [1, "f", Xn, Xk, 62, za], [1, "f", 1, U, 60, Xn], [za, "f", 1, 6, 58, mk], [ie, "f", 1, 6, 56, Oq], [1, "f", Oq, U, 54, 1], [Oq, "f", za, 6, 52, mk], [Te, "f", 1, 6, 50, 1], [za, "f", jk, 6, 49, 1], [1, "f", 2, 6, 47, Te], [Xn, "f", Hj, 6, 45, 1], [1, "f", 2, Na, 43, za], [Xn, "f", 2, qq, 41, za], [1, "f", lr, 6, 39, za], [Xn, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", Te, 6, 44, Te], [Oq, "f", 1, 6, 42, Xn], [Xn, "f", ie, 6, 40, Te], [za, "f", Oq, nk, 38, ie], [1, "f", 2, 6, 37, Oq], [mk, "f", 2, qq, 35, Xn], [Xn, "f", 2, 6, 33, mk], [1, "f", pq, U, 31, 1], [1, "f", 2, 6, 29, 1], [za, "f", 2, Bq, 27, Xn], [1, "f", 1, 6, 36, mk], [za, "f", 1, va, 34, Xn], [za, "f", Te, nk, 32, 1], [1, "f", 1, Qa, 30, 1], [mk, "f", Xn, 6, 28, Xn], [Te, "f", mk, 6, 26, Te], [1, "f", Pn, Ro, 25, mk], [Xn, "f", 2, Na, 23, Oq], [mk, "f", Hj, ji, 21, 1], [1, "f", 2, Na, so, Xn], [Xn, "f", Hj, 6, 17, ie], [1, "f", xj, 6, eo, 1], [1, "f", 1, Bq, 24, 1], [1, "f", 1, 6, 22, Xn], [za, "f", za, 6, qi, 1], [Xn, "f", 1, 6, P, 1], [Xn, "f", za, 6, 16, Te], [mk, "f", xj, 6, 13, Xn], [1, "f", pq, qq, nn, 1], [Xn, "f", Hj, 6, $o, mk], [1, "f", pq, 6, ur, 1], [1, "f", 1, Bq, di, Te], [Oq, "f", ie, Ro, 12, Te], [za, "f", 1, Ck, 10, ie], [1, "f", ie, Na, 8, 1], [Oq, "f", 1, 6, Xk, Te], [Xn, "f", 1, aa, 6, 1], [Oq, "f", 2, ur, 6, 1], [1, "f", 2, w, 6, 1], [za, "f", lr, 11, 6, Xn], [za, "f", xj, vn, qq, Oq], [1, "f", H, $q, 6, 1], [Oq, "f", ie, Bo, Qa, Xn], [Xn, "f", Xn, da, 6, 1], [Xn, "f", 1, po, 6, 1], [Oq, "f", ie, gk, nk, Oq], [1, "f", Te, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", Te, 22, nk, Xn], [mk, "f", 1, 24, va, 1], [1, "f", 1, 26, 6, ie], [1, "f", 2, 17, Ck, 1], [za, "f", pq, Dq, Na, 1], [1, "f", pq, 21, 6, mk], [Xn, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [Oq, "f", jk, 27, 6, Oq], [Xn, "f", 2, 29, Qa, Te], [Oq, "f", 2, 31, 6, 1], [mk, "f", lr, 33, 6, mk], [1, "f", 1, 28, Ro, 1], [1, "f", 1, 30, ji, ie], [mk, "f", za, 32, 6, Oq], [za, "f", Oq, 34, qq, ie], [1, "f", 2, 67, 6, 1], [Oq, "f", 2, 69, va, za], [1, "f", Pn, 71, 6, 1], [za, "f", lr, 73, 6, 1], [mk, "f", 2, 75, 6, ie], [1, "f", za, 68, 6, Xn], [za, "f", za, 70, va, Oq], [1, "f", 1, 72, 6, Oq], [za, "f", mk, 74, 6, mk], [1, "f", Oq, 76, 6, Oq], [za, "f", 2, 77, 6, za], [1, "f", 2, 79, Bq, ie], [ie, "f", H, 81, va, Xn], [za, "f", 2, 83, Ya, 1], [Xn, "f", Pn, 85, 6, 1], [ie, "f", 1, 78, 6, mk], [Oq, "f", 1, 80, 6, 1], [1, "f", 1, 82, va, 1], [Oq, "f", 1, 84, Na, 1], [1, "f", ie, 86, 6, mk], [1, "f", jk, 87, 6, 1], [za, "f", 2, 89, 6, Oq], [1, "f", lr, 91, Ck, 1], [1, "f", 2, 93, 6, mk], [mk, "f", za, 88, Na, Te], [Oq, "f", mk, 90, 6, Te], [za, "f", Xn, 92, ji, Te], [Te, "f", Xn, 94, 6, ie], [1, "f", H, 95, 6, 1], [ie, "f", 1, 95, ur, ie], [Xn, "f", 1, 83, 7, za], [mk, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, Oq], [za, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, ie], [ie, "f", Te, 73, 7, Xn], [1, "f", 1, 71, 7, 1], [Oq, "f", mk, 69, wk, 1], [1, "f", 1, 33, $k, ie], [za, "f", Te, 31, 7, 1], [1, "f", ie, 29, $k, mk], [ie, "f", mk, 27, 7, 1], [mk, "f", ie, 25, 7, Xn], [za, "f", mk, 23, Ar, Te], [mk, "f", mk, 21, $k, Xn], [ie, "f", 1, 19, 7, Xn], [Oq, "f", za, m, cq, 1], [1, "f", Xn, 15, Ni, ie], [1, "f", mk, 13, 7, 1], [mk, "f", Te, pk, 7, 1], [1, "f", 1, w, 7, 1], [za, "f", 1, 7, ia, Xn], [za, "s", 0, 7, Bi, ie], [Te, "t", 4, 7, 174, 0], [Oq, "t", Eq, $n, 175, 0], [1, "t", Mq, $n, 176, In], [Te, "b", Pn, Ni, 177, mj], [za, "t", 3, 94, 301, wj], [1, "b", 3, 95, 301, 0], [Oq, "t", 4, 96, 301, Zj], [Xn, "t", Te, 97, 301, mj], [Oq, "t", 2, 98, 301, Da], [mk, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, Da], [1, "t", 4, 96, 304, Hi], [1, "t", Hj, 96, 302, wj], [1, "t", 2, 97, 304, Zj], [mk, "t", lr, 96, 303, 0], [1, "t", ta, 97, 303, Hi], [1, "t", 5, 98, 304, 0], [ie, "b", H, 97, 302, 0], [mk, "b", 2, 99, 304, wj], [1, "t", 1, 98, 303, ya], [Xn, "t", 4, 98, 302, Hi], [1, "t", nj, 99, 303, Hi], [1, "t", 4, 100, 304, Rq], [1, "t", kq, 99, 302, 0], [za, "t", 5, 101, 303, Zj], [1, "t", 2, 100, 303, 0], [1, "t", 0, _j, 302, In], [1, "t", mj, 101, 304, 0], [Xn, "t", Fr, 102, 304, mj], [Te, "f", 0, 94, 7, Xn], [1, "f", 1, 93, ia, Xn], [1, "f", za, 92, 7, 1], [Te, "f", mj, 91, 7, Oq], [za, "f", 1, 90, Aq, 1], [Oq, "f", 1, 89, ur, za], [Oq, "f", ya, 88, Ni, mk], [Te, "f", Xn, 87, $n, ie], [1, "f", 1, 86, 7, Xn], [1, "f", Te, 85, Ar, Te], [1, "f", 0, 84, $n, 1], [1, "f", mk, 82, $k, 1], [Oq, "f", In, 80, 7, Oq], [Oq, "f", za, 78, 7, ie], [Te, "f", Hi, 76, wk, 1], [1, "f", Oq, 74, ia, 1], [za, "f", Zj, 72, cq, 1], [za, "f", Rq, 70, 7, 1], [za, "f", Xn, 68, Aq, Xn], [mk, "f", Te, 32, 7, 1], [1, "f", Zj, 30, $n, 1], [za, "f", 1, 28, wk, 1], [1, "f", 0, 26, 7, ie], [mk, "f", 1, 24, $n, 1], [Oq, "f", Da, 22, 7, ie], [Xn, "f", mk, wq, $n, Xn], [1, "f", 0, 18, 7, 1], [1, "f", mk, p, 7, 1], [za, "f", Rq, Wa, $k, ie], [1, "f", 1, 12, 7, Xn], [1, "f", wj, gn, wk, 1], [1, "f", 1, 8, 7, 1], [1, "s", za, $n, fk, 1], [1, "f", mj, 95, 152, 1], [1, "f", Xn, 95, 151, Oq], [ie, "f", Rq, 95, 11, Xn], [1, "f", Xn, 95, gr, Te], [za, "f", Oq, 95, 14, mk], [1, "f", 1, 95, 19, Xn], [Xn, "f", wj, 95, 15, ie], [Te, "f", In, 95, 20, Te], [1, "f", mk, 95, 21, 1], [1, "f", 1, 95, 26, Oq], [Oq, "f", 1, 95, 37, 1], [Oq, "f", Rq, 95, 44, ie], [1, "f", Oq, 95, 50, 1], [1, "f", Xn, 95, 52, 1], [ie, "f", ya, 95, 53, mk], [ie, "f", 1, 95, 54, ie], [mk, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, za], [za, "f", 1, 95, 64, Oq], [1, "f", 0, 95, 58, 1], [ie, "f", 0, 95, 61, Oq], [ie, "f", Hi, 95, 68, 1], [1, "f", ya, 95, 72, ie], [ie, "f", Zj, 95, 78, Oq], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [Oq, "f", ie, 95, 128, ie], [1, "f", Zj, 95, 85, 1], [Xn, "f", Hi, 95, 91, 1], [ie, "f", wj, 95, 95, 1], [Xn, "f", 0, 95, 114, ie], [1, "f", lr, 95, 113, 1], [1, "f", ie, 95, 119, Te], [Xn, "f", 0, 95, 120, Te], [1, "f", 1, 95, 121, Xn], [ie, "f", mj, 95, 127, 1], [mk, "f", Xn, 95, 130, Te], [Te, "f", 0, 95, 131, ie], [1, "f", Xn, 95, 132, 1], [za, "f", 1, 95, 136, mk], [1, "f", 0, 95, 137, 1], [ie, "f", Zj, 95, 143, Oq], [1, "f", In, 95, 147, Te], [1, "f", Xn, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, vr, mk], [1, "f", Hi, 95, 8, 1], [1, "f", 1, 95, Qj, 1], [ie, "f", 0, 95, 13, 1], [ie, "f", 1, 95, G, 1], [1, "f", za, 95, 17, za], [Oq, "f", wj, 95, Vj, 1], [1, "f", Te, 95, 45, Te], [za, "f", 0, 95, 51, Xn], [ie, "f", 1, 95, 56, 1], [1, "f", Te, 95, 57, za], [1, "f", ie, 95, 59, Oq], [Xn, "f", ie, 95, 60, mk], [1, "f", za, 95, 63, za], [Oq, "f", 0, 95, 65, Xn], [Oq, "f", ie, 95, 66, 1], [1, "f", ie, 95, 67, 1], [za, "f", mk, 95, 69, mk], [Te, "f", 1, 95, 70, 1], [Oq, "f", 0, 95, 71, Te], [Xn, "f", mk, 95, 73, 1], [mk, "f", mk, 95, 74, 1], [mk, "f", 0, 95, 75, za], [1, "f", za, 95, 76, Oq], [1, "f", 1, 95, 77, Xn], [1, "f", ie, 95, 79, 1], [ie, "f", za, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", Xn, 95, 82, Te], [Te, "f", In, 95, 83, 1], [1, "f", Oq, 95, 84, 1], [Xn, "f", 1, 95, 86, 1], [za, "f", Oq, 95, 88, 1], [Oq, "f", mj, 95, 87, Te], [1, "f", Oq, 95, 89, za], [za, "f", 1, 95, 90, Oq], [Te, "f", 1, 95, 92, Te], [1, "f", Te, 95, 93, Xn], [za, "f", 1, 95, 94, 1], [Te, "f", 1, 95, 96, za], [Oq, "f", Oq, 95, 97, 1], [1, "f", wj, 95, 98, ie], [1, "f", Te, 95, 99, za], [1, "f", 1, 95, 100, Xn], [Xn, "f", 0, 95, 101, 1], [Oq, "f", 1, 95, 102, 1], [Te, "f", 0, 95, 103, 1], [1, "f", Xn, 95, 104, Xn], [Te, "f", mk, 95, 105, Xn], [1, "f", wj, 95, 106, mk], [1, "f", 1, 95, 107, za], [1, "f", 1, 95, 108, za], [mk, "f", mk, 95, 109, Xn], [ie, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, ie], [1, "f", 0, 95, 112, 1], [ie, "f", Te, 95, 116, Te], [ie, "f", Rq, 95, 118, 1], [ie, "f", mj, 95, 122, Te], [1, "f", mk, 95, 123, 1], [1, "f", Te, 95, 124, za], [1, "f", wj, 95, 125, Oq], [za, "f", 1, 95, 126, 1], [Oq, "f", Oq, 95, 129, Xn], [1, "f", Xn, 95, 133, 1], [ie, "f", mj, 95, 134, Oq], [1, "f", 1, 95, 135, Te], [1, "f", ie, 95, 139, 1], [Oq, "f", Rq, 95, 140, za], [za, "f", 1, 95, 141, za], [ie, "f", mk, 95, 142, 1], [1, "f", Te, 95, 146, 1], [mk, "f", In, 95, 145, za], [1, "f", Te, 95, 148, za], [1, "f", ie, 95, 149, 1], [1, "f", Oq, 95, 150, 1], [1, "f", Oq, 95, 153, 1], [za, "cs", Rq, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, G, 1], [1, "cs", 2, 64, Dk, Te], [1, "cs", Hi, 64, hn, 1], [1, "cs", Oq, 64, 21, Xn], [Xn, "cs", jk, 64, 22, 1], [Te, "cs", 0, 64, 23, Xn], [za, "cs", 2, 64, 24, 1], [1, "cs", za, 64, 29, za], [1, "cs", lr, 64, 30, Te], [1, "cs", 3, 64, 31, za], [za, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, za], [Te, "cs", 0, 64, 35, Xn], [Te, "cs", Pn, 64, Gk, 1], [1, "cs", Hj, 65, 8, 1], [Oq, "cs", 1, 65, pn, Xn], [mk, "cs", lr, 65, J, 1], [mk, "cs", 3, 65, dn, za], [za, "cs", Xn, 65, Pa, 1], [1, "cs", Hi, 64, 17, 1], [za, "cs", Hk, 65, 17, 1], [za, "cs", 2, 64, hr, 1], [mk, "cs", lr, 65, 18, za], [mk, "cs", Hi, 65, Jj, ie], [Oq, "cs", 1, 65, vi, Te], [1, "cs", nq, 65, 21, 1], [1, "cs", 2, 65, 22, ie], [1, "cs", qo, 65, 23, ie], [za, "cs", Rq, 65, 24, Te], [1, "cs", xj, 65, 29, Oq], [1, "cs", ea, 65, 30, Xn], [Xn, "cs", Da, 65, 31, mk], [Xn, "cs", 1, 65, 32, 1], [Xn, "cs", 2, 65, 33, ie], [ie, "cs", 3, 65, 34, 1], [Xn, "cs", 2, 63, rr, 1], [1, "cs", Zj, 62, 9, 1], [ie, "cs", xq, 61, Qj, 1], [1, "cs", wj, 60, w, 1], [Xn, "cs", H, 59, 9, mk], [Xn, "cs", jk, 58, Qj, Oq], [1, "cs", 0, 57, R, 1], [Xn, "cs", jk, 56, se, Oq], [1, "cs", 2, 55, 9, Xn], [1, "cs", 2, 54, 9, 1], [Oq, "cs", 0, 53, 9, Xn], [Te, "cs", 0, 51, 9, 1], [Oq, "cs", Pn, 52, Qk, 1], [1, "cs", jk, 50, 9, 1], [Oq, "cs", pq, 48, $o, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, R, 1], [1, "cs", 0, 45, Ca, mk], [Oq, "cs", 0, 43, 9, 1], [ie, "cs", 2, 46, $o, 1], [1, "cs", lr, 44, se, 1], [Te, "cs", 2, 42, 9, Oq], [1, "cs", Hj, 41, 9, 1], [za, "cs", 0, 40, Lo, 1], [1, "cs", xq, 39, Qk, 1], [1, "cs", lr, 38, 9, 1], [mk, "cs", ya, 37, $o, 1], [1, "cs", Rq, 63, 8, 1], [Xn, "cs", 2, 65, N, Oq], [1, "cs", nq, 64, N, za], [Xn, "cs", Pn, 62, aa, Te], [za, "cs", 3, 61, aa, 1], [1, "cs", ie, 62, 7, ie], [mk, "cs", jk, 63, $k, 1], [za, "cs", Hi, 64, 6, 1], [mk, "cs", ea, 65, Qa, 1], [ie, "cs", 2, 63, Bq, Xn], [1, "cs", jk, 62, 6, Xn], [ie, "cs", 2, 61, U, ie], [Te, "cs", Pn, 60, 6, 1], [1, "cs", H, 59, 6, mk], [1, "cs", 2, 61, ia, 1], [Oq, "cs", Hi, 60, Ar, 1], [za, "cs", 2, 60, 8, 1], [ie, "cs", lr, 59, $n, za], [mk, "cs", 2, 59, Hr, mk], [mk, "cs", Te, 58, Gk, 1], [1, "cs", mk, 57, 6, 1], [Te, "cs", mk, 55, 7, Te], [1, "cs", mj, 56, 6, ie], [Te, "cs", H, 58, nk, Xn], [1, "cs", 2, 58, 7, Oq], [za, "cs", Pn, 57, N, Te], [1, "cs", H, 56, 7, 1], [1, "cs", xj, 55, 6, ie], [Te, "cs", Hj, 57, 8, za], [za, "cs", lr, 56, Bi, ie], [1, "cs", Pn, 55, 8, 1], [za, "cs", mj, 54, 8, 1], [Oq, "cs", Zj, 50, Aq, 1], [1, "cs", 0, 53, Bq, 1], [1, "cs", xj, 54, 6, mk], [Te, "cs", lr, 54, N, za], [za, "cs", 2, 53, 7, Oq], [mk, "cs", Pn, 52, Aq, 1], [Oq, "cs", 2, 52, ji, 1], [ie, "cs", 1, 52, 8, mk], [Oq, "cs", 2, 53, Hr, 1], [Te, "cs", pq, 51, 8, 1], [1, "cs", pq, 51, ur, 1], [1, "cs", H, 51, Qa, Oq], [Xn, "cs", Hj, 50, 6, Te], [1, "cs", lr, 50, E, 1], [Te, "cs", 2, 49, 8, Oq], [za, "cs", H, 49, Ni, 1], [Te, "cs", 2, 49, Xk, 1], [1, "cs", 0, 46, N, za], [Oq, "cs", 1, 48, 8, Xn], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, _a, Te], [1, "cs", Hj, 48, 7, Te], [ie, "cs", Pn, 48, U, 1], [mk, "cs", xj, 47, 6, ie], [mk, "cs", jk, 47, 7, mk], [Te, "cs", lr, 47, 8, ie], [1, "cs", jk, 46, Hr, 1], [1, "cs", Hj, 45, 8, ie], [1, "cs", 2, 45, $k, za], [1, "cs", 2, 45, 6, ie], [1, "cs", 2, 46, Ya, za], [1, "cs", jk, 44, 6, 1], [Xn, "cs", Hj, 44, 8, Oq], [ie, "cs", 2, 43, Bi, Xn], [1, "cs", 2, 43, $n, 1], [1, "cs", 2, 43, Ro, Te], [1, "cs", 2, 42, Qa, Xn], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, aa, 1], [1, "cs", H, 41, N, 1], [ie, "cs", 2, 41, 6, 1], [1, "cs", pq, 40, 6, Oq], [za, "cs", Pn, 40, Ni, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", jk, 39, Iq, ie], [1, "cs", 0, 39, 7, 1], [1, "cs", mk, 38, 8, ie], [Te, "cs", Pn, 39, Ck, Oq], [1, "cs", xq, 38, Ck, za], [1, "cs", 2, 37, 6, ie], [1, "cs", 2, 38, cq, 1], [mk, "cs", 2, 37, N, 1], [Oq, "cs", xj, 37, 8, 1], [1, "cs", jk, 37, 10, Xn], [Oq, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, ie], [mk, "cs", 0, 38, 17, 1], [Xn, "cs", ie, 37, Pj, Te], [Oq, "cs", 0, 38, 19, 1], [Oq, "cs", jk, 37, nn, za], [ie, "cs", 2, 37, Mn, Te], [mk, "cs", 2, 37, 17, 1], [mk, "cs", 2, 38, Pj, 1], [1, "cs", pq, 37, b, Xn], [1, "cs", 3, 38, gk, mk], [Oq, "cs", 0, 37, 21, ie], [za, "cs", Da, 38, 22, 1], [Te, "cs", 0, 38, 24, mk], [1, "cs", H, 37, 20, ie], [Te, "cs", 2, 38, Xa, mk], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, Te], [1, "cs", 3, 37, 22, Te], [Te, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, Oq], [mk, "cs", Hi, 38, 30, Oq], [Xn, "cs", ya, 38, 32, Xn], [1, "cs", mj, 37, 31, 1], [Xn, "cs", 1, 38, 34, 1], [Te, "cs", 1, 37, 29, 1], [ie, "cs", 2, 38, 29, 1], [Xn, "cs", 2, 37, 30, ie], [1, "cs", xq, 38, 31, mk], [Xn, "cs", pq, 37, 32, Oq], [za, "cs", Hk, 38, 33, 1], [1, "cs", I, 38, 35, 1], [1, "cs", xq, 37, 33, Oq], [mk, "cs", jk, 36, zj, 1], [1, "cs", Da, 36, 11, 1], [1, "cs", 0, 35, 9, mk], [ie, "cs", lr, 36, pn, 1], [1, "cs", xj, 36, sk, 1], [za, "cs", 2, 35, Bo, 1], [1, "cs", ie, 33, 8, 1], [1, "cs", I, 34, 9, za], [1, "cs", 3, 35, He, 1], [1, "cs", 2, 34, 8, ie], [1, "cs", Rq, 36, ia, za], [1, "cs", 1, 34, 7, 1], [1, "cs", Hj, 35, 7, ie], [Oq, "cs", 2, 35, Ck, 1], [1, "cs", lr, 36, 6, za], [1, "cs", 2, 68, fk, 1], [1, "cs", xj, 66, 10, 1], [Oq, "cs", Hk, 66, 9, 1], [1, "cs", Rq, 67, 9, 1], [mk, "cs", 0, 66, zj, mk], [1, "cs", 2, 67, zj, 1], [ie, "cs", 1, 68, br, 1], [1, "cs", za, 66, Jq, za], [1, "cs", jk, 67, kk, 1], [ie, "cs", Da, 66, Xk, 1], [Te, "cs", 2, 66, 7, mk], [1, "cs", xq, 67, Aq, Oq], [1, "cs", 2, 69, Iq, 1], [Te, "cs", 2, 63, 32, 1], [Xn, "cs", H, 62, 34, 1], [Te, "cs", lr, 60, 35, 1], [Oq, "cs", ci, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", Rq, 63, 34, Xn], [Xn, "cs", 2, 63, 33, 1], [mk, "cs", jk, 63, 35, 1], [za, "cs", pq, 62, 35, mk], [Oq, "cs", lr, 58, 36, ie], [1, "cs", Xn, 59, 36, mk], [Te, "cs", za, 62, 36, 1], [1, "cs", 2, 60, 36, za], [1, "cs", jk, 61, 34, 1], [Oq, "cs", 3, 62, 33, mk], [1, "cs", ea, 63, 36, Te], [Xn, "cs", 3, 61, 36, 1], [ie, "cs", In, 42, 36, Xn], [1, "cs", Xn, 39, 36, za], [1, "cs", pq, 41, 36, 1], [1, "cs", fn, 39, 35, 1], [ie, "cs", 3, 40, 36, 1], [1, "cs", nq, 43, 36, Xn], [1, "cs", 1, 40, 35, za], [mk, "cs", 2, 41, 35, za], [ie, "cs", jk, 40, 34, 1], [Oq, "cs", Pn, 39, 34, 1], [Xn, "cs", 2, 39, 33, za], [1, "cs", jk, 39, 32, Oq], [Te, "cs", 0, 40, 33, za], [Xn, "cs", 2, 41, 34, Oq], [Te, "cs", 1, 44, 36, 1], [Oq, "cs", Hk, 43, 35, Oq], [ie, "cs", xq, 42, 35, Oq], [1, "cs", Zj, 37, 34, 1], [Xn, "cs", 3, 59, 30, Te], [1, "cs", mj, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [ie, "cs", fn, 60, 27, za], [1, "cs", 0, 60, 26, za], [Xn, "cs", xq, 54, 25, mk], [1, "cs", 2, 48, 25, 1], [za, "cs", 2, 42, 26, 1], [Oq, "cs", Rq, 55, 25, 1], [mk, "cs", 2, 59, 26, mk], [1, "cs", Hi, 43, 26, Te], [1, "cs", mk, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [za, "cs", 2, 43, 30, ie], [Oq, "cs", In, 42, 29, Oq], [za, "cs", ya, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [mk, "cs", 2, 54, 23, 1], [za, "cs", 2, 48, 23, Oq], [mk, "cs", H, 63, 22, 1], [1, "cs", Pn, 63, 21, Oq], [Xn, "cs", 2, 39, 21, mk], [za, "cs", ci, 57, 18, Xn], [1, "cs", 2, 56, io, Te], [Xn, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, to, Te], [Oq, "cs", xj, 51, Be, 1], [ie, "cs", 3, 51, 18, za], [1, "cs", Pn, 63, Yk, mk], [1, "cs", lr, 63, 10, 1], [1, "cs", xq, 56, 13, 1], [Oq, "cs", 3, 57, vn, 1], [1, "cs", 1, 45, Vq, 1], [1, "cs", 2, 47, W, Te], [1, "cs", lr, 46, io, mk], [1, "cs", wj, 46, 13, Oq], [1, "cs", 2, 45, ik, 1], [Xn, "cs", Pn, 39, 10, Te], [1, "cs", 2, 39, 16, 1], [ie, "cs", 2, 47, tr, 1], [ie, "a", 0, 51, $q, za], [Xn, "a", Oq, 53, Kq, 1], [mk, "a", Te, 49, Pq, Oq], [1, "de", 8, 55, v, 0], [1, "de", fk, 48, 28, Da], [Oq, "de", gn, 58, 26, In], [1, "de", 11, 59, 29, 0], [1, "de", tk, 55, 34, Zj], [ie, "de", te, 48, 33, ya], [1, "de", Qk, 41, 32, 0], [Xn, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", se, 45, ra, mj], [ie, "de", 9, 44, 17, wj], [1, "de", te, 44, 13, 0], [Xn, "de", jn, 58, 13, wj], [1, "de", Zk, 63, 31, Hi], [1, "de", 8, 60, 30, mj], [za, "de", 8, 43, 26, wj], [Oq, "de", 10, 43, 29, Da], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, Rq], [1, "de", Qj, 53, 19, 0], [1, "de", 11, 49, 19, mj], [ie, "de", 10, 39, 26, Zj], [Oq, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [mk, "de", 8, 40, 14, 0], [Xn, "de", 32, 55, 35, 0], [mk, "de", 32, 60, 33, 0], [Te, "de", 32, 63, 28, wj], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, ya], [1, "de", 32, 59, Ej, 0], [1, "de", 32, 63, Cq, Hi], [ie, "de", 32, 59, kk, 0], [mk, "de", 32, 56, 12, 0], [Oq, "de", 32, 52, 17, 0], [1, "de", 32, 51, Sq, 0], [Oq, "de", 32, 39, da, Zj], [1, "de", 32, 39, 18, Hi], [1, "de", 32, 41, 25, Da], [1, "de", 32, 39, 30, ya], [ie, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, Zj], [1, "de", 32, 47, 34, wj], [1, "de", 31, 54, 33, Zj], [Oq, "de", 31, 59, 24, 0], [Te, "de", 31, 63, Dq, 0], [1, "de", 31, 47, 15, In], [1, "de", 31, 43, Un, 0], [Xn, "de", 31, 39, 27, wj], [Xn, "de", 31, 48, 27, wj], [Oq, "de", 31, 57, 27, mj], [1, "de", 32, 44, 27, 0], [ie, "d", 0, gr, 13, Xn], [ie, "d", mj, 89, ja, 1], [1, "d", Oq, 91, 21, 1], [mk, "d", Xn, 10, 22, Oq], [1, "f", 2, 89, 18, 1], [za, "f", 0, 88, Jj, 1], [ie, "g", mk, 85, 22, Xn], [1, "s", 1, 90, 29, mk], [ie, "s", 1, 92, 15, ie], [ie, "s", 0, 91, 31, Xn], [ie, "s", 2, 90, 38, 1], [Xn, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", ie, 86, 43, 1], [1, "f", Rq, 81, 45, Te], [mk, "f", jk, 66, 44, 1], [Te, "f", 2, 55, 49, 1], [1, "f", Xn, 54, 50, 1], [1, "f", xq, 43, 45, 1], [1, "f", xj, 31, 48, 1], [ie, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, ie], [ie, "f", Oq, 69, 48, 1], [ie, "g", 0, 80, 40, 1], [1, "g", jk, 81, 40, Oq], [1, "s", 2, 77, 39, 1], [Oq, "s", 0, 68, 43, 1], [Oq, "s", jk, 57, 41, 1], [1, "s", Oq, 56, 42, ie], [1, "s", 1, 40, 41, Xn], [za, "s", Hj, 48, 48, Xn], [1, "f", pq, 17, Ka, ie], [Xn, "f", 0, ja, 31, 1], [1, "f", 1, Wa, 32, 1], [Oq, "s", ya, 15, 27, ie], [mk, "s", mj, Cq, 39, 1], [1, "f", lr, d, 17, 1], [Xn, "f", mk, Sj, hr, 1], [Xn, "g", 2, da, 25, 1], [Te, "f", 0, p, 45, ie], [Te, "f", Oq, Un, 46, 1], [ie, "s", Te, 74, 48, 1], [mk, "s", ie, 20, 47, Xn], [1, "g", wj, 58, 59, ie], [mk, "g", Hi, 46, 72, 1], [Xn, "g", 0, 69, 79, 1], [1, "g", Rq, 72, 74, 1], [mk, "g", Zj, 26, 88, 1], [mk, "g", Rq, Ok, 74, 1], [Te, "g", Rq, 28, 67, Xn], [1, "g", Hi, 49, 86, 1], [Te, "g", 0, 77, 90, Oq], [1, "g", 0, 87, 72, Te], [1, "g", 0, po, 85, 1], [1, "g", Xn, 85, 97, Xn], [1, "g", 1, 68, 104, ie], [1, "g", Oq, 63, 91, 1], [Te, "g", 1, 39, 90, Oq], [1, "g", 1, 34, 99, 1], [ie, "g", ie, Yo, 103, 1], [1, "g", 2, 77, 60, mk], [ie, "g", 2, 19, 56, 1], [mk, "g", 2, 39, 60, Xn], [Te, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [mk, "f", ya, 26, 59, Te], [Oq, "f", 0, 35, 53, Te], [1, "f", Rq, 44, 58, mk], [1, "f", Da, 88, 62, 1], [ie, "f", 0, 91, 82, 1], [ie, "f", 0, 84, 85, za], [1, "f", 0, 79, 69, 1], [Te, "f", Da, 64, 71, Oq], [mk, "f", 0, 62, 83, 1], [ie, "f", 0, 34, 81, 1], [za, "f", 0, 39, 71, mk], [1, "f", mj, 54, 94, 1], [1, "f", 1, 81, 70, mk], [ie, "f", Oq, 91, 72, 1], [mk, "f", mk, 8, 91, 1], [mk, "f", Oq, Wa, 81, mk], [mk, "f", 1, 29, 79, 1], [1, "f", za, 13, 65, 1], [1, "f", Te, 46, 97, 1], [mk, "f", Oq, 43, 73, 1], [1, "f", mk, 60, 69, Xn], [1, "f", 1, 70, 96, mk], [Xn, "f", 1, 58, 84, 1], [za, "s", za, 56, 76, za], [1, "s", mk, 85, 74, 1], [1, "s", wj, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", wj, 60, 61, 1], [1, "s", Rq, to, 66, 1], [1, "s", Hi, 47, 83, 1], [Xn, "s", wj, 29, 86, mk], [1, "s", Da, 78, 92, Xn], [Te, "s", mj, 62, 102, ie], [Xn, "s", 0, 18, 95, Xn], [Te, "s", 2, 64, 101, ie], [za, "s", 2, 78, 84, Te], [1, "s", 2, 49, 83, 1], [1, "s", 2, $q, 76, za], [mk, "s", 2, 21, 84, Te], [1, "f", Te, 26, 94, mk], [1, "f", H, 23, 96, mk], [Te, "f", xj, 25, 72, 1], [1, "f", 2, 85, 77, za], [1, "f", Pn, 79, 95, 1], [1, "f", Pn, 51, 65, Te], [ie, "f", pq, 69, 60, Xn], [1, "f", ie, 25, 105, 1], [za, "s", za, io, 68, Oq], [1, "s", Hi, 55, 76, Xn], [1, "s", 0, 74, 59, Oq], [1, "f", Xn, 46, 142, 1], [Te, "f", Xn, 19, 140, Xn], [1, "f", Te, 77, 137, 1], [Xn, "f", 0, 75, 137, 1], [Xn, "f", 0, 55, 138, Te], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [Oq, "f", Zj, 55, 121, za], [za, "f", wj, 13, 123, za], [1, "f", In, 18, 141, za], [1, "f", ya, 40, 137, 1], [1, "f", 2, 76, 142, 1], [Te, "f", lr, 57, 140, 1], [1, "f", jk, 39, 138, 1], [ie, "f", 2, 16, 143, 1], [za, "f", 2, 29, 131, Xn], [Te, "f", Hi, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, La, 132, 1], [Xn, "f", mj, 90, 129, 1], [za, "f", mk, 87, 131, za], [1, "f", 0, 91, 143, mk], [Oq, "f", 2, 87, 145, 1], [1, "f", mk, 89, 141, 1], [Te, "f", 1, 63, 130, Te], [1, "f", 1, 75, 122, 1], [1, "f", ie, 52, 124, 1], [Xn, "f", 1, 34, 127, 1], [Te, "f", 1, 14, 123, 1], [mk, "f", Te, 24, 122, 1], [1, "f", Rq, 83, 108, Te], [Oq, "f", mj, 89, 118, 1], [Xn, "f", 0, 56, 107, za], [1, "f", 0, 38, 113, Oq], [za, "f", 0, 16, 110, 1], [za, "f", Oq, 80, 105, Xn], [ie, "f", ie, 82, 109, Xn], [ie, "f", za, 87, 118, 1], [Xn, "f", za, 59, 110, Te], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [Te, "f", xj, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", Da, 81, 158, ie], [1, "s", 0, 25, 172, Xn], [1, "s", In, 22, 161, za], [1, "s", Zj, 35, 152, 1], [1, "s", 0, 66, 144, Oq], [za, "s", Da, 87, 145, ie], [mk, "s", wj, 86, 145, 1], [Xn, "s", 0, 84, 135, Oq], [Xn, "s", 0, 69, 133, ie], [Oq, "s", 0, 84, 122, 1], [za, "s", wj, 68, 121, za], [1, "s", 0, 48, 124, ie], [Oq, "s", wj, 26, 129, za], [1, "s", ya, rr, 127, 1], [za, "s", mj, 11, 144, Oq], [1, "s", 0, 9, 109, ie], [1, "s", 0, 35, 101, Xn], [ie, "s", In, 47, 109, 1], [1, "s", In, 58, 111, Oq], [1, "s", 0, 84, 110, 1], [ie, "s", Rq, 28, 114, Xn], [1, "s", 1, 30, 116, 1], [1, "s", za, 46, 112, 1], [ie, "s", Xn, 81, 111, ie], [ie, "s", ie, 70, 123, mk], [1, "s", za, 49, 127, Te], [Xn, "s", Te, 66, 134, 1], [mk, "s", Xn, 67, 144, 1], [Xn, "s", 1, 38, 152, Oq], [1, "s", ie, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [za, "s", 1, 12, 125, Xn], [1, "s", 1, 65, 158, za], [Oq, "s", za, 83, 167, 1], [Te, "s", 1, 65, 167, mk], [1, "s", mk, 47, 164, 1], [1, "s", 1, 56, 168, 1], [Te, "s", 2, 54, 169, 1], [Oq, "s", 2, 88, 170, za], [Te, "s", 2, 91, 162, 1], [1, "s", H, 79, 149, mk], [1, "s", xj, 75, 144, 1], [Xn, "s", 2, 57, 150, 1], [ie, "s", H, 47, 143, Xn], [1, "s", jk, 31, 145, 1], [1, "s", 2, 36, 138, mk], [1, "s", pq, Bo, 163, 1], [1, "s", 2, 22, 142, Te], [Te, "g", 2, 78, 132, Oq], [1, "g", mk, 48, 135, ie], [Oq, "g", 2, gk, 136, 1], [ie, "g", 0, 62, 92, 1], [1, "g", Pn, 70, 80, 1], [za, "g", xj, eo, 86, mk], [mk, "g", 2, 47, 75, ie], [Oq, "g", xq, 36, 89, Xn], [Oq, "g", jk, 80, 90, Te], [mk, "f", Oq, 39, 118, 1], [1, "d", xq, 84, 54, 1], [1, "d", 2, p, 54, 1], [Xn, "de", Aq, Cq, 13, In], [1, "de", 5, 16, 28, 0], [Te, "de", Fk, 9, 25, 0], [1, "de", q, 34, 41, wj], [mk, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", qq, Sj, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, ya], [ie, "de", qq, Ni, 33, 0], [Oq, "de", U, 40, 42, 0], [ie, "de", 7, wq, 48, 0], [Xn, "de", 7, 29, 59, 0], [ie, "de", Ya, 27, 58, 0], [1, "de", Na, 15, 54, mj], [Oq, "de", q, 12, 66, 0], [Te, "de", q, 37, 53, 0], [Oq, "de", 4, 10, 63, Da], [1, "de", 7, 49, 48, In], [Xn, "de", cq, 37, 63, Zj], [mk, "de", qq, 33, 68, Rq], [1, "de", Xk, 56, 52, Da], [1, "de", kq, 59, 58, Zj], [Oq, "de", 6, 48, 58, 0], [Te, "de", 4, 53, 63, ya], [1, "de", 4, 67, 44, 0], [1, "de", ta, 70, 49, 0], [za, "de", 5, 82, 55, Hi], [za, "de", ta, 79, 41, Rq], [1, "de", 5, 91, 29, Rq], [ie, "de", 7, 91, 43, 0], [mk, "de", U, 85, 44, 0], [mk, "de", 6, 74, 60, 0], [1, "de", 6, 90, Bi, In], [mk, "de", kq, 91, 15, In], [1, "de", Mq, 87, 20, 0], [ie, "de", 7, 93, tk, Zj], [1, "de", U, 91, 21, mj], [1, "de", 6, 85, 35, 0], [ie, "de", z, 93, 58, 0], [Oq, "de", q, 87, 63, 0], [1, "de", ur, 77, 62, 0], [1, "de", Ro, 68, 61, 0], [za, "de", 5, 90, 73, 0], [za, "de", 4, 87, 71, 0], [Te, "de", 7, 80, 71, Hi], [1, "de", Ar, 83, 77, 0], [1, "de", N, 89, 83, Hi], [Xn, "de", 4, 71, 80, mj], [Xn, "de", 4, 71, 70, Rq], [mk, "de", 5, 63, 72, In], [Xn, "de", 4, 54, 75, ya], [Oq, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, In], [1, "de", 5, 15, 81, 0], [Oq, "de", ba, 29, 80, Da], [Xn, "de", 4, 37, 90, Zj], [za, "de", Vn, 7, 75, 0], [1, "de", Bq, 22, 74, 0], [1, "de", qq, 43, 95, 0], [Te, "de", nk, 57, 85, 0], [mk, "de", 6, bq, 94, Hi], [1, "de", 6, rr, 92, In], [Oq, "de", z, 26, 89, 0], [Xn, "de", q, 31, 112, mj], [1, "de", Fk, 54, 108, Hi], [1, "de", Oj, 55, 95, ya], [za, "de", ta, 35, 104, 0], [Oq, "de", Eq, 13, 110, Rq], [1, "de", 7, 27, 107, 0], [Te, "de", ia, 47, 99, 0], [mk, "de", cq, tk, 104, 0], [za, "de", Ar, R, 111, In], [ie, "de", 7, 40, 114, Zj], [mk, "de", $n, 28, 117, 0], [1, "de", $k, 47, 113, 0], [Xn, "de", 7, 63, 104, 0], [1, "de", nj, 64, 92, 0], [Te, "de", Qa, 86, 97, Hi], [mk, "de", nr, 76, 91, 0], [1, "de", q, 85, 86, 0], [1, "de", nk, 78, 83, mj], [1, "de", ji, 71, 97, In], [ie, "de", 4, 69, 105, 0], [Xn, "de", ba, 79, 104, 0], [Oq, "de", 4, 86, 109, 0], [1, "de", Fr, 86, 118, wj], [ie, "de", nr, 70, 113, 0], [1, "de", 6, 69, 121, 0], [za, "de", 6, 76, 122, 0], [1, "de", ia, 87, 130, 0], [1, "de", 4, 84, 123, Hi], [1, "de", Vn, 57, 121, In], [ie, "de", q, 53, 125, Hi], [Xn, "de", nr, 62, 131, 0], [1, "de", 6, 67, 143, ya], [1, "de", M, 77, 143, Hi], [Xn, "de", 5, 85, 136, 0], [ie, "de", 6, 87, 147, 0], [Xn, "de", 6, 92, 140, 0], [mk, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [za, "de", q, 45, 144, 0], [za, "de", Vn, 41, 139, 0], [Te, "de", 4, 54, 138, Zj], [1, "de", 6, 29, 145, 0], [1, "de", ji, 29, 132, 0], [1, "de", 6, 35, 127, mj], [mk, "de", va, 64, 142, Zj], [Te, "de", 5, 23, 131, ya], [ie, "de", 5, pn, 134, 0], [1, "de", 6, 11, 121, Da], [Xn, "de", 4, 26, 121, 0], [Oq, "de", 35, 58, 150, Rq], [ie, "de", 33, 48, 156, ya], [1, "de", 33, 25, 158, 0], [Te, "de", 33, 36, 154, Zj], [1, "de", 34, rr, 154, Da], [1, "de", 34, 13, 148, Rq], [Xn, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [ie, "de", 34, 47, 144, wj], [Te, "de", 34, 68, 142, Zj], [1, "de", 36, 70, 135, 0], [za, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [za, "de", 36, 90, 141, ya], [Oq, "de", 36, 93, 131, Rq], [mk, "de", 36, 91, 125, ya], [1, "de", 36, 76, 123, 0], [za, "de", 33, 82, 122, 0], [za, "de", 35, 56, 122, mj], [Xn, "de", 35, 40, 119, Zj], [1, "de", 35, 17, 112, wj], [1, "de", 35, 37, 102, 0], [Te, "de", 33, hr, 97, 0], [ie, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, ya], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, wj], [1, "de", 36, po, 45, 0], [1, "de", 36, 21, 42, 0], [mk, "de", 35, 8, 32, Hi], [za, "de", 33, $o, 24, 0], [1, "de", 35, 35, 27, wj], [1, "de", 33, 56, 35, 0], [Oq, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, Zj], [ie, "de", 35, 53, 39, Rq], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, mj], [za, "de", 33, 68, 112, In], [za, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [Xn, "de", 33, 90, 76, Da], [mk, "de", 36, 76, 83, Zj], [Oq, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, Hi], [1, "de", 36, 90, 64, Da], [1, "de", 36, 60, 70, wj], [Te, "de", 35, 75, 90, 0], [Xn, "de", 35, 81, 58, 0], [Oq, "de", 35, 91, 51, Hi], [ie, "de", 35, 93, 56, ya], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [za, "de", 34, 92, R, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, mj], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [za, "de", 33, 49, 50, mj], [Oq, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, Zj], [za, "de", 33, 64, 84, 0], [ie, "de", 33, 56, 94, 0], [Xn, "de", 33, 25, 90, Da], [Xn, "de", 33, 31, 69, Hi], [1, "de", 35, 34, 54, Hi], [ie, "de", 35, 29, 47, In], [mk, "de", 36, 42, 41, Rq], [za, "de", 36, 29, 34, Zj], [1, "de", 35, 20, 55, 0], [Oq, "de", 35, 14, 52, mj], [1, "s", 2, Uk, 171, 1], [Te, "r", 20, 188, In], [1, "r", 21, 188, mj], [1, "r", 22, 188, 0], [mk, "r", 23, 188, ya], [Te, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, In], [1, "r", 23, 189, 0], [mk, "r", 22, 189, Rq], [Xn, "r", 21, 189, 0], [Xn, "r", wq, 189, Rq], [1, "r", Dq, 189, Zj], [1, "r", 19, 190, Zj], [ie, "r", ha, 191, wj], [mk, "r", to, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [mk, "r", 24, 191, Rq], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [Oq, "r", 25, 190, mj], [1, "r", 24, 190, ya], [1, "r", 23, 190, Zj], [Xn, "r", 22, 190, 0], [1, "r", 21, 190, In], [ie, "r", vi, 190, Zj], [mk, "r", 26, 190, mj], [1, "r", 26, 191, Hi], [za, "r", 24, 193, ya], [Xn, "r", 23, 193, 0], [ie, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, Da], [mk, "r", 22, 192, 0], [1, "r", 23, 192, 0], [mk, "r", 24, 192, 0], [1, "r", 25, 192, ya], [za, "r", 53, 199, mj], [1, "r", 52, 200, 0], [1, "r", 54, 199, Zj], [1, "r", 55, 199, 0], [1, "r", 55, 200, Hi], [Oq, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [Te, "r", 55, 201, Rq], [1, "r", 54, 201, 0], [Te, "r", 55, 202, wj], [1, "r", 54, 203, 0], [Xn, "r", 54, 204, Hi], [1, "r", 54, 202, wj], [1, "r", 53, 202, Zj], [Oq, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, wj], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [Oq, "r", 50, 202, 0], [Te, "r", 50, 201, 0], [za, "r", 56, 201, ya], [za, "r", 53, 203, 0], [1, "r", 52, 203, Hi], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [mk, "r", 53, 204, 0], [1, "r", 52, 204, Da], [ie, "r", 55, 204, 0], [1, "r", 56, 203, wj], [mk, "r", 56, 244, In], [1, "r", 54, 246, In], [za, "r", 50, 248, In], [mk, "r", 48, 248, ya], [1, "r", 43, 248, In], [1, "r", 45, 238, 0], [1, "r", 44, 238, Hi], [1, "r", 43, 238, Hi], [mk, "r", 46, 238, 0], [1, "r", 47, 238, Rq], [Te, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, Rq], [1, "r", 51, 238, 0], [1, "r", 52, 238, ya], [Te, "r", 53, 238, Rq], [1, "r", 54, 239, 0], [Oq, "r", 53, 240, mj], [Xn, "r", 53, 239, Da], [Oq, "r", 52, 239, 0], [Oq, "r", 51, 239, 0], [ie, "r", 50, 239, Hi], [Xn, "r", 49, 239, 0], [Oq, "r", 48, 239, mj], [ie, "r", 47, 239, 0], [1, "r", 46, 239, 0], [ie, "r", 45, 239, Rq], [1, "r", 44, 239, Zj], [Oq, "r", 43, 239, Hi], [Xn, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [ie, "r", 43, 240, 0], [1, "r", 44, 240, 0], [za, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, Da], [Xn, "r", 48, 240, Hi], [1, "r", 49, 240, Zj], [mk, "r", 50, 240, Hi], [Oq, "r", 51, 240, Zj], [Te, "r", 52, 240, In], [ie, "r", 54, 240, Zj], [za, "r", 55, 240, In], [ie, "r", 56, 241, Hi], [Xn, "r", 55, 241, Da], [ie, "r", 54, 241, Hi], [1, "r", 53, 241, Rq], [Oq, "r", 52, 241, Hi], [Oq, "r", 51, 241, wj], [1, "r", 49, 241, Hi], [1, "r", 50, 241, In], [1, "r", 48, 241, ya], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [Te, "r", 45, 241, Da], [1, "r", 44, 241, 0], [Te, "r", 43, 241, 0], [Xn, "r", 42, 241, 0], [Oq, "r", 41, 241, 0], [Te, "r", 40, 242, Rq], [za, "r", 41, 242, 0], [ie, "r", 42, 242, 0], [Xn, "r", 43, 242, 0], [Xn, "r", 44, 242, 0], [1, "r", 45, 242, Hi], [1, "r", 46, 242, 0], [za, "r", 47, 242, 0], [za, "r", 48, 242, 0], [za, "r", 49, 242, 0], [1, "r", 50, 242, 0], [ie, "r", 51, 242, Zj], [mk, "r", 52, 242, Hi], [1, "r", 53, 242, 0], [za, "r", 54, 242, 0], [ie, "r", 55, 242, wj], [1, "r", 56, 242, wj], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [Xn, "r", 54, 243, mj], [1, "r", 53, 243, 0], [ie, "r", 52, 243, In], [1, "r", 51, 243, 0], [za, "r", 50, 243, 0], [Oq, "r", 49, 243, wj], [1, "r", 48, 243, mj], [1, "r", 47, 243, mj], [Te, "r", 46, 243, wj], [1, "r", 45, 243, Hi], [1, "r", 44, 243, ya], [Xn, "r", 43, 243, Da], [1, "r", 42, 243, In], [1, "r", 41, 243, 0], [1, "r", 40, 243, mj], [Oq, "r", 40, 244, mj], [Te, "r", 41, 244, 0], [mk, "r", 43, 244, 0], [Xn, "r", 44, 244, 0], [1, "r", 45, 244, mj], [1, "r", 46, 244, 0], [mk, "r", 47, 244, 0], [1, "r", 48, 244, 0], [Oq, "r", 49, 244, 0], [1, "r", 50, 244, Zj], [Oq, "r", 51, 244, 0], [1, "r", 52, 244, mj], [Xn, "r", 53, 244, mj], [ie, "r", 54, 244, 0], [ie, "r", 55, 244, Da], [Xn, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, In], [za, "r", 42, 245, 0], [1, "r", 43, 245, mj], [1, "r", 44, 245, 0], [1, "r", 45, 245, Hi], [za, "r", 46, 245, 0], [ie, "r", 47, 245, Da], [Te, "r", 48, 245, Zj], [za, "r", 49, 245, 0], [ie, "r", 50, 245, mj], [za, "r", 51, 245, Rq], [Xn, "r", 52, 246, mj], [za, "r", 52, 245, wj], [za, "r", 53, 245, Da], [Xn, "r", 54, 245, Da], [1, "r", 55, 245, Da], [1, "r", 53, 246, Rq], [1, "r", 51, 246, In], [1, "r", 50, 246, Hi], [1, "r", 49, 246, 0], [ie, "r", 48, 246, In], [Te, "r", 47, 246, mj], [za, "r", 45, 246, 0], [za, "r", 46, 246, mj], [Te, "r", 44, 246, mj], [1, "r", 43, 246, 0], [Xn, "r", 42, 246, Da], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [za, "r", 43, 247, 0], [Te, "r", 44, 247, 0], [1, "r", 45, 247, Da], [1, "r", 46, 247, In], [Oq, "r", 47, 247, 0], [Oq, "r", 48, 247, mj], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [za, "r", 52, 247, In], [za, "r", 53, 247, 0], [Te, "r", 54, 247, Rq], [mk, "r", 49, 247, 0], [1, "r", 49, 248, Hi], [mk, "r", 47, 248, 0], [1, "r", 46, 248, 0], [mk, "r", 45, 248, Rq], [1, "r", 51, 248, mj], [1, "r", 55, 246, 1], [Te, "r", 55, 247, 1], [Oq, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, ie], [za, "r", 93, 270, 1], [1, "r", 94, 270, za], [Xn, "r", 95, 271, 1], [1, "r", 94, 271, 1], [Xn, "r", 93, 271, 1], [za, "r", 94, 282, Oq], [1, "r", 93, 282, mk], [za, "r", 93, 281, 1], [1, "r", 92, 281, 1], [Te, "r", 92, 280, 1], [Oq, "r", 91, 280, ie], [1, "r", 90, 279, 1], [Oq, "r", 95, 275, 1], [Te, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [Oq, "r", 94, 274, Xn], [mk, "r", 94, 273, 1], [mk, "r", 94, 272, Oq], [mk, "r", 93, 272, 1], [ie, "r", 93, 273, mk], [1, "r", 93, 274, Xn], [mk, "r", 92, 273, ie], [za, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [Te, "r", 92, 269, ie], [1, "r", 90, 269, 1], [1, "r", 91, 269, Oq], [ie, "r", 91, 271, Xn], [1, "r", 91, 270, Oq], [Oq, "r", 95, 278, Te], [mk, "r", 95, 277, Te], [1, "r", 95, 276, 1], [1, "r", 94, 276, Xn], [za, "r", 94, 275, Xn], [Xn, "r", 93, 275, ie], [Te, "r", 92, 274, za], [1, "r", 92, 275, 1], [Oq, "r", 91, 275, Te], [1, "r", 90, 275, mk], [1, "r", 89, 274, 1], [Xn, "r", 90, 274, 1], [za, "r", 89, 275, 1], [1, "r", 88, 274, ie], [1, "r", 88, 273, 1], [Te, "r", 86, 272, 1], [mk, "r", 85, 271, 1], [Xn, "r", 86, 271, za], [mk, "r", 87, 272, Oq], [1, "r", 55, 248, za], [1, "r", 54, 248, za], [1, "r", 56, 249, za], [1, "r", 55, 249, Oq], [ie, "r", 55, 250, mk], [1, "r", 56, 250, ie], [1, "r", 57, 250, za], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [Oq, "r", 58, 250, 1], [1, "r", 60, 250, za], [Te, "r", 61, 251, za], [1, "r", 60, 251, 1], [ie, "r", 62, 251, 1], [za, "r", 62, 252, Te], [Oq, "r", 63, 252, 1], [Te, "r", 58, 251, Oq], [1, "r", 57, 251, Xn], [Oq, "r", 56, 251, ie], [1, "r", 58, 252, 1], [1, "r", 57, 252, Oq], [Xn, "r", 57, 253, Oq], [1, "r", 58, 253, Te], [mk, "r", 58, 254, za], [1, "r", 59, 255, ie], [Xn, "r", 58, 255, Oq], [1, "r", 57, 254, ie], [1, "r", 56, 252, Xn], [1, "r", 55, 251, 1], [Te, "r", 60, Br, 1], [Te, "r", 61, Li, 1], [Oq, "r", 61, 256, za], [1, "r", 60, Ja, ie], [1, "r", 62, eq, ie], [1, "r", 62, 257, 1], [1, "r", 61, 257, Xn], [Te, "r", 64, 253, Xn], [mk, "r", 64, 254, mk], [mk, "r", 65, 254, ie], [1, "r", 61, 250, mk], [1, "r", 64, 252, ie], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, Oq], [Te, "r", 64, zn, mk], [Te, "r", 64, Si, 1], [1, "r", 65, Kk, Oq], [mk, "r", 65, 257, 1], [Te, "r", 64, 257, ie], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [ie, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, k, 1], [1, "r", 66, gq, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [za, "r", 67, 259, za], [1, "r", 66, 259, ie], [1, "r", 65, 259, 1], [za, "r", 56, 246, 1], [1, "r", 56, 245, za], [Xn, "r", 68, 258, 1], [1, "r", 68, 259, mk], [Oq, "r", 68, 260, 1], [1, "r", 69, 260, 1], [Xn, "r", 69, 261, za], [1, "r", 70, 261, za], [Te, "r", 71, 261, 1], [1, "r", 67, 260, Xn], [1, "r", 89, 269, 1], [1, "r", 89, 268, za], [1, "r", 90, 268, 1], [mk, "r", 82, 267, 1], [Xn, "r", 83, 267, 1], [Xn, "r", 80, 266, 1], [Oq, "r", 81, 266, Xn], [1, "r", 81, 267, 1], [1, "r", 79, 266, Oq], [1, "r", 78, 265, 1], [Oq, "r", 77, 265, za], [Xn, "r", 76, 264, 1], [1, "r", 75, 264, 1], [Oq, "r", 75, 263, Te], [1, "r", 74, 263, 1], [Xn, "r", 74, 262, 1], [Xn, "r", 72, 262, za], [1, "r", 73, 262, 1], [ie, "r", 71, 262, 1], [1, "r", 85, 270, Oq], [Te, "r", 84, 270, 1], [1, "r", 84, 269, 1], [mk, "r", 83, 269, ie], [za, "r", 82, 269, za], [1, "r", 81, 269, mk], [1, "r", 81, 268, 1], [za, "r", 82, 268, Oq], [1, "r", 83, 268, Te], [1, "r", 80, 268, 1], [1, "r", 80, 267, Xn], [1, "r", 79, 267, 1], [za, "r", 78, 266, 1], [Oq, "r", 76, 265, 1], [Oq, "r", 75, 262, 1], [Oq, "r", 90, 280, 1], [Xn, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, ie], [za, "r", 88, 278, 1], [1, "r", 87, 277, ie], [1, "r", 86, 276, 1], [Oq, "r", 86, 275, 1], [za, "r", 86, 274, 1], [ie, "r", 86, 273, 1], [1, "r", 85, 273, Oq], [1, "r", 85, 272, mk], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [ie, "r", 87, 278, Xn], [mk, "r", 84, 271, za], [1, "r", 83, 270, 1], [1, "r", 87, 273, Te], [1, "r", 91, 274, 1], [mk, "r", 89, 273, za], [ie, "r", 88, 272, 1], [1, "r", 91, 281, 1], [ie, "r", 92, 282, mk], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [Te, "r", 85, 275, ie], [mk, "r", 84, 273, Xn], [1, "r", 84, 272, 1], [mk, "r", 83, 271, 1], [Oq, "r", 82, 270, za], [1, "r", 84, 267, 0], [Oq, "r", 85, 267, Zj], [Te, "r", 76, 262, wj], [mk, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [Xn, "r", 80, 262, wj], [1, "r", 80, 263, wj], [mk, "r", 81, 263, mj], [Te, "r", 82, 263, ya], [1, "r", 83, 263, Zj], [Te, "r", 84, 263, Hi], [1, "r", 85, 263, 0], [ie, "r", 88, 262, 0], [mk, "r", 89, 262, 0], [Oq, "r", 90, 262, 0], [1, "r", 87, 262, 0], [Xn, "r", 86, 262, mj], [Te, "r", 86, 263, 0], [1, "r", 87, 263, Da], [Te, "r", 91, 262, Hi], [1, "r", 95, 262, 0], [za, "r", 94, 262, 0], [1, "r", 86, 267, wj], [Te, "r", 87, 267, wj], [Oq, "r", 87, 268, Hi], [ie, "r", 86, 268, 0], [1, "r", 74, 189, Rq], [Xn, "r", 75, 189, Zj], [1, "r", 76, 189, Zj], [za, "r", 77, 189, wj], [1, "r", 78, 190, 0], [1, "r", 77, 190, mj], [Te, "r", 75, 190, wj], [Oq, "r", 76, 190, 0], [1, "r", 74, 190, wj], [1, "r", 73, 190, 0], [ie, "r", 78, 191, Rq], [mk, "r", 76, 191, 0], [1, "r", 77, 191, Zj], [1, "r", 75, 191, Zj], [1, "r", 74, 191, In], [ie, "r", 78, 192, Rq], [1, "r", 77, 192, Zj], [ie, "r", 76, 192, Rq], [1, "r", 75, 192, wj], [Oq, "r", 74, 192, In], [ie, "r", 73, 191, Da], [1, "f", ie, 96, 22, Te], [Oq, "s", Oq, 97, 22, Oq], [1, "f", 1, 98, 22, 1], [1, "s", mj, 99, 22, Te], [ie, "s", 1, sa, 21, ie], [ie, "s", Oq, 96, 49, 1], [1, "s", Te, Nn, 50, ie], [1, "s", 0, 99, 49, 1], [Xn, "s", 0, 97, 49, 1], [ie, "f", 1, 98, 49, Oq], [Te, "r", 70, 218, 0], [1, "r", 71, 218, 0], [Oq, "r", 72, 218, Hi], [1, "r", 73, 218, 0], [za, "r", 74, 219, 0], [1, "r", 73, 219, wj], [1, "r", 72, 219, Rq], [1, "r", 71, 219, In], [mk, "r", 70, 219, 0], [mk, "r", 73, 220, mj], [ie, "r", 72, 220, 0], [1, "r", 71, 220, 0], [Oq, "r", 72, 221, 0], [1, "r", 71, 221, In], [Oq, "r", 70, 221, 0], [1, "r", 69, 221, Hi], [mk, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [Te, "r", 69, 219, Hi], [za, "r", 68, 220, Da], [mk, "r", 73, 221, Da], [Xn, "r", 73, 222, Hi], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [Xn, "r", 74, 221, 0], [1, "r", 74, 220, 0], [Xn, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, In], [Xn, "r", 69, 222, Hi], [Xn, "r", 29, 217, 0], [1, "r", 30, 217, 0], [mk, "r", 31, 217, 0], [1, "r", 32, 217, mj], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, Da], [1, "r", 27, 218, Hi], [Oq, "r", 28, 218, wj], [1, "r", 29, 218, Hi], [Te, "r", 30, 218, 0], [Te, "r", 28, 217, 0], [Oq, "r", 26, 217, 0], [1, "r", 27, 217, 0], [ie, "r", 28, 216, 0], [Oq, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, mj], [1, "r", 32, 218, Rq], [1, "r", 31, 216, ya], [mk, "r", 31, 221, 0], [1, "r", 31, 220, Rq], [Xn, "r", 30, 220, In], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, In], [1, "r", 26, 220, Hi], [Oq, "r", 25, 218, mj], [1, "r", 27, 221, 0], [1, "r", 28, 221, Da], [1, "r", 29, 221, In], [Oq, "r", 30, 221, mj], [Te, "r", 32, 220, Hi], [Te, "r", 32, 219, Rq], [Oq, "r", 33, 218, Zj], [Te, "r", 33, 219, 0], [1, "r", 75, 238, 0], [Oq, "r", 76, 238, 0], [1, "r", 77, 239, 0], [Xn, "r", 76, 239, 0], [Oq, "r", 75, 239, wj], [1, "r", 74, 239, 0], [1, "r", 76, 240, mj], [1, "r", 77, 240, 0], [1, "r", 78, 240, Rq], [1, "r", 77, 241, 0], [za, "r", 76, 241, In], [Oq, "r", 75, 241, Zj], [1, "r", 75, 240, Zj], [1, "r", 74, 240, 0], [ie, "r", 78, 239, Rq], [mk, "r", 77, 238, ya], [Te, "r", 18, 253, 0], [Oq, "r", 19, 252, 0], [Oq, "r", 20, 252, Zj], [mk, "r", 21, 253, mj], [mk, "r", 23, 254, 0], [za, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, mj], [1, "r", 18, 254, 0], [Xn, "r", b, 253, 0], [za, "r", 20, 253, Da], [ie, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [mk, "r", hn, Li, 0], [1, "r", 19, Li, 0], [1, "r", 18, 255, 0], [1, "r", Ri, 255, In], [1, "r", 17, 254, Rq], [Xn, "r", 22, fa, 0], [Oq, "r", Dq, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, gq, 0], [Oq, "r", 39, 270, 0], [za, "r", 40, 270, wj], [ie, "r", 41, 270, Da], [1, "r", 43, 270, Rq], [ie, "r", 44, 270, 0], [Te, "r", 46, 270, 0], [Oq, "r", 42, 270, 0], [ie, "r", 45, 270, 0], [1, "r", 44, 269, In], [Te, "r", 43, 269, 0], [Oq, "r", 42, 269, In], [mk, "r", 40, 269, 0], [Xn, "r", 41, 269, 0], [1, "r", 45, 271, mj], [1, "r", 44, 271, Hi], [1, "r", 43, 271, In], [ie, "r", 42, 271, mj], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, Rq], [1, "r", 44, 272, mj], [1, "r", 43, 272, In], [mk, "r", 42, 272, Zj], [Te, "r", 19, 284, 0], [Te, "r", 20, 284, mj], [1, "r", 21, 285, 0], [1, "r", 22, 285, ya], [1, "r", 23, 286, 0], [1, "r", 22, 288, wj], [mk, "r", 20, 288, 0], [Xn, "r", 18, 288, 0], [Xn, "r", 17, 287, 0], [1, "r", 16, 287, 0], [Oq, "r", ck, 286, 0], [Te, "r", 17, 286, wj], [1, "r", Vq, 286, 0], [Xn, "r", so, 286, 0], [1, "r", qi, 286, Rq], [ie, "r", 21, 286, Hi], [1, "r", 22, 286, 0], [za, "r", hn, 285, Zj], [za, "r", 19, 285, Hi], [1, "r", 18, 285, 0], [1, "r", Rk, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [za, "r", 20, 287, wj], [Te, "r", 21, 287, mj], [1, "r", 22, 287, 0], [Oq, "r", 23, 287, 0], [za, "r", 21, 288, ya], [mk, "r", Dq, 288, mj], [ie, "r", Ri, 288, 0], [Xn, "r", b, 289, Hi], [1, "r", 21, 289, 0], [mk, "r", 22, 289, 0], [mk, "r", Ok, 289, Da], [1, "r", 23, 288, mj], [Xn, "r", 24, 287, mj], [Oq, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, Rq], [1, "r", 64, 287, 0], [Te, "r", 63, 287, In], [1, "r", 60, 287, Rq], [Xn, "r", 59, 285, 0], [Oq, "r", 58, 284, 0], [1, "r", 59, 283, Da], [Te, "r", 65, 283, mj], [mk, "r", 64, 283, Rq], [mk, "r", 63, 283, 0], [Oq, "r", 62, 283, 0], [1, "r", 61, 283, Hi], [Oq, "r", 60, 283, Rq], [Te, "r", 59, 284, In], [za, "r", 58, 285, 0], [1, "r", 60, 286, 0], [mk, "r", 59, 286, mj], [Xn, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [Oq, "r", 62, 286, ya], [Oq, "r", 63, 286, Zj], [Oq, "r", 64, 286, 0], [mk, "r", 65, 286, 0], [za, "r", 67, 285, In], [ie, "r", 66, 285, In], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [Oq, "r", 62, 285, 0], [Te, "r", 61, 285, In], [mk, "r", 60, 285, Zj], [1, "r", 60, 284, 0], [1, "r", 61, 284, Zj], [1, "r", 62, 284, Rq], [Xn, "r", 63, 284, 0], [1, "r", 64, 284, Rq], [1, "r", 65, 284, 0], [Te, "r", 66, 284, 0], [1, "r", 65, 287, 0], [Xn, "r", 67, 286, Hi], [1, "p", 0, ik, 189, 1], [ie, "p", 0, 32, 184, 1], [Oq, "p", 0, 47, 191, 1], [1, "p", Hi, 64, 184, 1], [1, "p", Hi, 84, 192, 1], [1, "p", Da, 78, 207, 1], [1, "p", Da, 58, 216, 1], [Te, "p", Hi, 41, 211, Oq], [1, "p", 0, 18, 211, 1], [1, "p", mj, la, 230, 1], [1, "p", Hi, 29, 237, 1], [ie, "p", 0, 50, 230, 1], [1, "p", mj, 78, 241, Oq], [1, "p", 0, 74, 256, ie], [Xn, "p", In, 68, 266, 1], [1, "p", 0, 48, 259, 1], [ie, "p", wj, 31, 263, Te], [Te, "p", ya, 18, 274, 1], [mk, "p", In, 33, 283, 1], [Te, "p", Rq, 66, 287, 1], [1, "p", In, 82, 291, Oq], [Te, "p", 0, 16, 295, mk], [1, "p", 0, 45, 294, 1], [Oq, "p", 0, kn, 252, 1], [mk, "p", 0, 79, 227, 1], [Oq, "p", 0, 32, 200, za], [Xn, "p", In, 64, 200, Te], [mk, "s", wj, 21, 193, 1], [1, "s", mk, hr, 189, 1], [Te, "s", 2, 26, 189, 1], [1, "b", Oq, 15, 181, 0], [Oq, "b", 2, 18, 190, 0], [Oq, "b", 2, 29, 193, Hi], [Oq, "t", ea, 16, 182, Hi], [ie, "t", 3, Z, 195, 0], [Te, "t", 4, p, 183, Hi], [1, "t", 5, sk, 184, 0], [1, "t", 5, 23, 182, 0], [Oq, "t", 4, 30, 187, ya], [za, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, In], [1, "s", za, 24, 181, ie], [1, "t", 3, 33, 183, Da], [za, "b", Te, 36, 189, 0], [1, "t", xj, 35, 190, Rq], [Oq, "b", 3, b, 200, 0], [1, "s", 0, 28, 194, 1], [Oq, "s", 1, 32, 196, 1], [Te, "s", mk, 36, 183, za], [Te, "s", Hj, 38, 184, 1], [1, "s", xq, Ra, 192, Xn], [Oq, "s", pq, 12, 183, 1], [mk, "s", 1, $q, 199, 1], [mk, "b", 0, F, 202, Rq], [Xn, "t", Hj, ja, 203, 0], [1, "t", Gi, wq, 200, 0], [1, "t", 4, 12, 194, 0], [Xn, "t", Eq, 15, 205, Rq], [1, "t", 5, 29, 200, Da], [1, "t", ea, 28, 201, 0], [Xn, "s", Hj, 25, 199, 1], [ie, "s", mk, 22, 204, mk], [ie, "g", pq, 25, 205, 1], [za, "b", Xn, 27, 216, In], [1, "s", mk, 25, 217, ie], [1, "s", 1, 33, 217, ie], [za, "s", 2, 35, 215, Te], [Xn, "s", 0, 32, 221, 1], [za, "t", xj, 31, 222, Da], [1, "t", Fr, 26, 221, 0], [mk, "b", fn, 27, 222, 0], [za, "b", ya, 17, 217, 0], [Te, "t", ea, 18, 216, 0], [ie, "t", 4, Zn, 215, 0], [za, "t", Fk, 30, 213, 0], [za, "t", 5, 24, 208, 0], [Xn, "s", Te, Sj, 216, Xn], [1, "s", 2, 11, 210, 1], [za, "s", H, 34, 223, mk], [mk, "b", 2, 36, 218, 0], [1, "t", Fr, 40, 206, 0], [1, "t", z, 35, 203, 0], [Xn, "t", 3, 39, 206, 0], [za, "b", 1, 34, 204, 0], [1, "s", Oq, 33, 206, 1], [1, "s", 1, 42, 203, Te], [1, "s", mj, 47, 196, Te], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, In], [1, "t", kq, 44, 187, 0], [1, "b", Te, 46, 181, Da], [1, "t", 2, 47, 182, Zj], [Xn, "b", wj, 57, 182, Hi], [1, "b", 3, 56, 183, ya], [1, "t", 4, 55, 184, 0], [1, "t", Oj, 62, 195, wj], [Te, "s", 1, 51, 185, ie], [ie, "s", 2, 62, 180, Oq], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, Te], [1, "s", pq, 48, 195, za], [1, "b", mk, 51, 199, 0], [1, "t", 2, 52, 199, mj], [1, "t", 3, 56, 204, In], [1, "t", $i, 57, 204, Rq], [Oq, "t", 4, 51, 204, Hi], [Te, "s", 1, 52, 205, 1], [mk, "s", Hj, 57, 200, 1], [1, "s", ie, 56, 199, 1], [ie, "b", 0, 55, 192, 0], [1, "t", fn, 56, 193, 0], [za, "t", Gi, 50, 190, 0], [za, "b", 1, 76, 188, 0], [Xn, "t", pq, 75, 188, 0], [1, "t", lr, 73, 192, 0], [mk, "t", 4, 72, 191, wj], [1, "t", 5, 78, 193, Da], [1, "b", Zj, 79, 192, Rq], [ie, "s", xq, 79, 190, 1], [ie, "s", mk, 74, 194, 1], [1, "s", 1, 72, 187, ie], [mk, "s", Zj, 74, 183, 1], [Oq, "s", 1, 75, 183, 1], [Xn, "t", 2, 69, 181, Zj], [Te, "t", 4, 70, 182, mj], [Te, "t", nr, 69, 180, mj], [1, "b", 1, 65, 189, 0], [Oq, "b", jk, 66, 189, Hi], [Te, "t", ci, 64, 188, 0], [1, "t", Vn, 67, 192, Hi], [1, "b", 2, 85, 183, 0], [ie, "t", Te, 84, 184, Hi], [1, "t", ba, 81, 180, 0], [za, "t", Eq, 89, 180, wj], [1, "t", 0, 90, 188, ya], [1, "t", nq, 89, 190, In], [ie, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", Xn, 84, 200, 0], [1, "t", 2, 83, 201, 0], [za, "t", 4, 87, 207, 0], [ie, "s", 2, 79, 202, 1], [ie, "s", za, 80, 203, 1], [1, "t", Zj, 71, 200, Da], [Xn, "b", Hj, 72, 201, mj], [1, "t", xq, 65, 205, 0], [1, "t", 1, 66, 206, 0], [mk, "t", ba, 63, 209, 0], [Te, "t", 5, 73, 203, mj], [1, "s", 0, 70, 207, Xn], [mk, "s", za, 71, 206, 1], [1, "s", xj, 68, 199, za], [za, "s", za, 64, 213, Te], [Xn, "t", 0, 85, 213, wj], [1, "b", 2, 84, 212, ya], [Oq, "t", Hk, 77, 209, 0], [mk, "t", $i, 83, 216, 0], [Te, "t", nj, 73, 209, Rq], [1, "b", 0, 86, 222, ya], [1, "b", nq, 87, 221, Da], [Xn, "s", mk, 80, 214, 1], [Te, "s", Pn, 87, 216, 1], [1, "s", Pn, 84, 224, 1], [1, "s", mk, 77, 227, Te], [Xn, "t", Oq, 74, 222, 0], [mk, "b", Xn, 69, 218, 0], [1, "b", 2, 75, 219, Zj], [1, "s", jk, 74, 218, 1], [1, "s", za, 69, 223, 1], [Oq, "s", Te, 77, 221, 1], [za, "b", 1, 72, 211, 0], [mk, "b", Xn, 85, 232, mj], [Xn, "t", xq, 84, 233, 0], [Xn, "t", Pn, 78, 238, 0], [1, "b", 1, 77, 237, 0], [ie, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, ya], [Xn, "b", 2, 74, 241, In], [1, "s", Zj, 73, 242, mk], [Te, "s", Da, 81, 238, 1], [1, "s", 1, 82, 237, Te], [1, "s", Hj, 72, 237, za], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, Zj], [1, "b", 2, 62, 229, mj], [ie, "t", 4, 67, 231, mj], [Te, "t", ba, 62, 228, 0], [Te, "t", q, 64, 233, Da], [za, "t", H, 65, 234, Hi], [1, "t", 2, 51, 220, wj], [Xn, "t", 1, 50, 218, 0], [Xn, "b", 1, 45, 223, Hi], [1, "b", 2, 46, 224, Rq], [1, "t", Mq, 49, 218, 0], [mk, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", Pn, 51, 213, 1], [ie, "s", H, 42, 227, za], [1, "s", Oq, 44, 227, Xn], [Oq, "s", 1, 60, 230, ie], [ie, "s", 2, 59, 231, mk], [ie, "b", 1, 85, 252, 0], [Te, "t", 2, 84, 251, In], [1, "t", 2, 74, 250, 0], [ie, "t", 0, 75, 251, 0], [ie, "b", Zj, 83, 246, wj], [1, "t", qo, 82, 247, 0], [Xn, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, Da], [1, "t", Oj, 75, 252, Hi], [Te, "s", 1, 79, 257, mk], [Te, "s", 2, 78, 249, Te], [1, "s", 2, 80, 258, ie], [za, "s", 1, 88, 254, 1], [1, "s", Te, 85, 264, 1], [1, "s", 2, 89, 263, Te], [Oq, "s", pq, 87, 269, 1], [Xn, "s", 0, 84, 268, Xn], [Te, "s", pq, 76, 267, Te], [1, "s", ie, 66, 261, mk], [1, "s", ie, 87, 274, Oq], [Oq, "s", 1, 76, 263, za], [mk, "s", za, 59, 251, Oq], [za, "s", Rq, 59, 252, Xn], [1, "t", 2, 86, 265, wj], [1, "t", Zj, 78, 270, 0], [Te, "t", 2, 79, 271, 0], [ie, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, Rq], [1, "b", 1, 71, 264, 0], [mk, "b", Te, 88, 269, 0], [1, "t", q, 84, 264, Rq], [1, "t", nr, 79, 261, In], [1, "t", q, 72, 265, 0], [1, "t", 5, 77, 270, 0], [mk, "t", 0, 87, 261, In], [Te, "t", pq, 86, 260, Rq], [1, "t", Pe, 84, 255, wj], [ie, "t", Gi, 68, fa, 0], [Xn, "t", mk, 67, 254, 0], [1, "t", jk, 65, 262, 0], [1, "t", 1, 57, 260, 0], [Te, "t", 2, 58, 259, 0], [1, "b", 1, 63, Ja, 0], [ie, "b", 1, 52, 248, 0], [mk, "t", pq, 53, 248, Rq], [1, "s", 1, 50, 253, ie], [ie, "s", Pn, 67, 263, 1], [Te, "s", 2, 52, 252, 1], [1, "s", Hj, 71, 244, Oq], [Xn, "b", Rq, 57, 245, Hi], [Te, "t", 2, 58, 244, Da], [mk, "b", 1, 53, 237, Da], [1, "t", H, 54, 237, Da], [Xn, "t", lr, 41, 238, 0], [Xn, "t", 1, 42, 237, 0], [mk, "t", M, 57, 235, 0], [Te, "t", z, 60, 246, 0], [1, "t", M, 50, 252, In], [mk, "t", Xn, 42, 248, 0], [za, "b", 1, 43, 249, Da], [mk, "b", 3, 37, 243, wj], [1, "s", In, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, ie], [1, "s", 2, 60, 243, 1], [1, "s", Hj, 36, 240, Te], [1, "s", 2, 43, 254, za], [Te, "s", 1, 42, 254, Oq], [za, "t", 1, 38, 233, 0], [Te, "t", 2, 35, 235, 0], [1, "t", ba, 33, 228, 0], [1, "t", Pe, 33, 245, ya], [za, "t", Pe, 43, 235, wj], [1, "t", q, 45, 249, 0], [Te, "t", 5, 41, 253, Rq], [ie, "b", Oq, 20, 227, 0], [1, "b", Oq, 14, 240, 0], [1, "t", 3, 21, 227, wj], [ie, "t", 3, 27, 234, 0], [1, "t", Hk, 15, 241, wj], [Xn, "t", nq, gr, 229, Hi], [1, "t", $i, 17, 224, Rq], [Xn, "t", nj, ra, 231, 0], [mk, "t", nj, 22, 238, wj], [1, "t", Mq, 11, 239, 0], [1, "t", Te, 22, 243, wj], [1, "b", xj, 23, 242, Hi], [mk, "s", 1, 23, 238, 1], [Xn, "s", 1, 22, 228, Xn], [za, "s", 2, 24, 228, 1], [1, "s", Hj, 21, 236, 1], [Xn, "s", ya, 13, 228, Xn], [1, "s", Da, 16, 242, 1], [ie, "s", mk, 15, 244, Oq], [1, "s", 1, 34, 236, 1], [za, "t", 1, 26, 249, wj], [Xn, "t", 1, 22, 256, Hi], [1, "t", xq, 23, 255, mj], [1, "b", 1, qa, 256, Rq], [1, "b", 2, 18, Go, Rq], [1, "s", 0, 21, 252, 1], [za, "s", 2, vi, 250, za], [1, "s", 2, 23, 259, mk], [mk, "s", 1, 13, 257, 1], [1, "t", Te, 31, 254, 0], [mk, "t", xj, 32, 254, 0], [Oq, "t", ba, 28, 254, 0], [1, "t", $i, 34, 258, ya], [1, "t", Da, 29, 260, 0], [Te, "b", 2, 30, 261, 0], [1, "t", mj, 43, 262, 0], [1, "t", 2, 42, 263, mj], [1, "t", 4, 46, 264, 0], [Te, "b", 1, 39, 265, Da], [1, "b", 1, 58, 267, 0], [mk, "t", 2, 57, 268, 0], [mk, "t", 4, 62, 270, Hi], [za, "t", 5, 52, 273, ya], [Oq, "s", mk, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", Hj, 41, 274, 1], [mk, "t", lr, 42, 268, mj], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [Oq, "b", 1, 14, 265, 0], [ie, "t", 2, zi, 266, 0], [Xn, "t", Vn, Be, 264, 0], [mk, "t", 4, 29, 263, wj], [1, "t", 4, Mo, 269, Hi], [1, "t", 1, 29, 271, mj], [1, "b", pq, 28, 272, 0], [1, "t", 2, 24, 267, 0], [Oq, "t", 2, A, 279, 0], [Xn, "t", Hi, 19, 278, Da], [1, "t", ci, Dr, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, hr, 289, 0], [Xn, "t", 2, wq, 283, 0], [1, "t", 2, 19, 290, Da], [ie, "t", 4, so, 283, wj], [1, "t", 4, 20, 290, Zj], [1, "s", 1, sr, 285, ie], [1, "s", ie, 24, 288, Oq], [ie, "s", 2, 26, 287, Te], [Oq, "s", H, 16, 278, za], [1, "s", 1, 21, 268, 1], [1, "s", xq, b, 268, Xn], [ie, "t", Da, 12, 294, 0], [mk, "b", Te, Dr, 295, 0], [ie, "t", I, 13, 291, 0], [1, "t", 3, Bo, 299, Hi], [Xn, "t", 4, yq, 287, Rq], [1, "t", Vn, qa, 298, wj], [1, "t", 1, 27, 294, 0], [1, "b", jk, 26, 295, Zj], [1, "t", fn, 33, 297, 0], [Te, "b", 1, 48, 278, mj], [za, "b", Rq, 46, 280, 0], [1, "b", jk, 50, 280, Zj], [1, "t", Da, 44, 282, 0], [1, "b", 1, 49, 283, Da], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, ya], [Oq, "b", 3, 44, 284, ya], [Xn, "b", mj, 47, 284, Zj], [1, "b", 2, 42, 283, 0], [1, "t", Fr, 51, 277, 0], [Te, "b", Xn, 44, 286, 0], [ie, "b", 2, 46, 286, wj], [Te, "b", 1, 42, 285, 0], [za, "b", Hk, 41, 286, 0], [mk, "t", z, 42, 287, 0], [1, "b", mk, 42, 278, ya], [mk, "b", Pn, 43, 279, mj], [1, "b", wj, 40, 280, 0], [1, "t", Gi, 39, 283, mj], [1, "t", $i, 39, 279, Rq], [Te, "t", 5, 43, 277, Rq], [mk, "t", 5, 47, 287, 0], [1, "t", ba, 46, 277, 0], [Oq, "t", Gi, 45, 290, ya], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", Xn, 29, 279, 0], [1, "b", 1, 32, 277, ya], [Te, "t", qo, 31, 278, 0], [1, "b", jk, 28, 280, ya], [za, "t", 4, 29, 286, 0], [Te, "t", z, 28, 275, Hi], [1, "t", ci, 37, 292, 0], [1, "b", mk, 36, 291, 0], [ie, "b", Zj, 34, 298, 0], [1, "t", Vn, 31, 292, mj], [1, "t", ba, 46, 295, Da], [mk, "t", Gi, 59, 287, 0], [ie, "b", ie, 58, 286, mj], [Oq, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, Oq], [1, "s", 0, 67, 284, mk], [Oq, "t", 3, 66, 283, 0], [mk, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [Oq, "b", 1, 76, 294, 0], [1, "t", Oj, 75, 295, 0], [Te, "t", q, 56, 293, ya], [Te, "t", nr, 59, 281, Da], [Te, "t", 5, 67, 291, In], [ie, "b", ya, 88, 293, 0], [Oq, "t", H, 89, 292, wj], [Xn, "t", jk, 85, 286, mj], [1, "t", Fr, 88, 289, 0], [1, "t", Vn, 79, 287, ya], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, Rq], [1, "b", 0, 75, 278, 0], [ie, "t", 3, 74, 277, Hi], [Oq, "t", 4, 81, 276, 0], [ie, "t", Pn, 65, 276, mj], [Oq, "b", Oq, 66, 275, wj], [Te, "g", Da, 45, 261, 1], [1, "g", 1, 39, 258, Te], [1, "g", 0, 35, 250, ie], [1, "g", pq, 22, 247, 1], [1, "g", xj, 27, 227, ie], [1, "g", 2, 63, 218, Xn], [1, "g", 1, 56, 224, 1], [Xn, "g", 0, 46, 231, 1], [Te, "g", mk, 65, 240, ie], [za, "g", pq, 67, 238, 1], [1, "g", lr, 79, 232, Oq], [mk, "g", pq, 72, 253, ie], [ie, "g", 2, 62, 264, 1], [Xn, "g", xq, 28, 267, 1], [1, "g", pq, 58, 274, za], [Te, "de", Hj, 14, 182, 0], [1, "de", 2, 24, 182, Da], [Xn, "de", 0, 11, 185, Rq], [mk, "de", 0, 14, 194, 0], [Te, "de", ie, 25, 196, 0], [Oq, "de", 3, 31, 183, mj], [Oq, "de", In, 38, 181, 0], [za, "de", pq, 45, 186, 0], [za, "de", 1, 38, 191, 0], [Oq, "de", Hi, 56, 181, Da], [ie, "de", Xn, 68, 182, Zj], [mk, "de", jk, 80, 181, 0], [mk, "de", qo, 86, 187, 0], [mk, "de", 0, 84, 193, ya], [Te, "de", ie, 82, 201, Hi], [1, "de", jk, 64, 191, wj], [1, "de", 2, 72, 200, ya], [1, "de", 3, 64, 201, In], [1, "de", xj, 76, 209, 0], [mk, "de", 3, 71, 212, Hi], [Oq, "de", 1, 86, 214, 0], [1, "de", Zj, 57, 208, Zj], [Te, "de", wj, 41, 203, Rq], [za, "de", Xn, 15, 206, mj], [1, "de", lr, 25, 209, Da], [1, "de", qo, sr, 218, wj], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", pq, 24, 238, mj], [1, "de", 3, 22, 246, Zj], [1, "de", qo, jn, 253, Zj], [1, "de", Te, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, Do, 267, 0], [Oq, "de", mj, 24, 268, mj], [1, "de", In, sj, 278, wj], [1, "de", 2, 21, 279, 0], [ie, "de", 2, 30, 272, 0], [Xn, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", ci, gr, 291, 0], [1, "de", I, 30, 287, ya], [ie, "de", 3, 27, 293, Da], [1, "de", 0, 25, 296, Zj], [1, "de", Rq, nn, 298, Da], [1, "de", 0, 8, 286, wj], [1, "de", Pn, 36, 299, Rq], [1, "de", xq, 37, 280, 0], [1, "de", yr, 38, 291, wj], [Xn, "de", 1, 48, 287, 0], [Xn, "de", Oq, 46, 277, 0], [za, "de", Oq, 53, 278, 0], [Xn, "de", I, 48, 295, 0], [1, "de", 0, 57, 294, 0], [mk, "de", Oq, 65, 290, In], [Te, "de", Te, 84, 292, 0], [za, "de", xq, 77, 295, Hi], [1, "de", 2, 84, 287, In], [1, "de", Rq, 74, 279, In], [1, "de", 3, 65, 274, 0], [Xn, "de", pq, 71, 267, wj], [1, "de", 2, 65, 261, 0], [Oq, "de", 2, 47, 264, 0], [ie, "de", 3, 47, 258, wj], [1, "de", nq, 53, 251, 0], [Oq, "de", jk, 40, 253, Rq], [Te, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, ya], [mk, "de", lr, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, wj], [mk, "de", 2, 65, 241, ya], [ie, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, In], [1, "de", xj, 86, 253, 0], [Oq, "de", Pn, 83, 245, Da], [za, "de", Te, 82, 238, ya], [ie, "de", fn, 76, 235, Hi], [mk, "de", jk, 86, 232, Da], [1, "de", wj, 86, 224, wj], [Te, "de", Pn, 76, 226, Rq], [Oq, "de", 2, 61, 228, wj], [1, "de", Pn, 58, 217, 0], [1, "de", Zj, 49, 217, 0], [1, "de", Dq, pk, 179, Da], [1, "de", 20, 17, 180, 0], [Te, "de", 22, 18, 181, 0], [1, "de", Dq, 30, 184, wj], [1, "de", 19, 27, 187, 0], [za, "de", bn, 30, 195, ya], [Xn, "de", Be, Sa, 192, 0], [1, "de", bn, 44, 182, Hi], [1, "de", Be, 49, 182, wj], [Oq, "de", 19, 54, 182, In], [ie, "de", 19, 59, 183, 0], [1, "de", bn, 56, 186, 0], [Te, "de", 19, 46, 188, Rq], [1, "de", so, 58, 193, 0], [1, "de", 19, 67, 187, 0], [ie, "de", bn, 65, 192, Da], [ie, "de", Jj, 71, 180, 0], [ie, "de", 19, 78, 187, 0], [1, "de", ha, 80, 194, Hi], [1, "de", 19, 72, 193, Hi], [mk, "de", ha, 82, 182, ya], [1, "de", 19, 88, 185, Da], [1, "de", 19, 87, 189, Da], [mk, "de", b, 86, 197, Zj], [za, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, mj], [za, "de", Dk, 70, 202, 0], [1, "de", b, 83, 199, 0], [mk, "de", b, 86, 208, 0], [Xn, "de", b, 84, 214, Da], [Te, "de", b, 83, 211, Zj], [1, "de", so, 84, 217, Zj], [Oq, "de", Be, 77, 210, 0], [Te, "de", 19, 71, 210, In], [1, "de", Dq, 73, 213, Hi], [1, "de", bq, 66, 207, wj], [1, "de", Be, 66, 204, In], [Xn, "de", 19, 62, 209, Zj], [za, "de", 19, 63, 201, 0], [Oq, "de", Jj, 56, 205, 0], [za, "de", Jj, 49, 199, In], [Xn, "de", ha, 50, 205, Hi], [1, "de", 19, 40, 197, Hi], [1, "de", 19, 38, 198, mj], [mk, "de", ha, 40, 208, 0], [1, "de", 19, 36, 204, 0], [ie, "de", 19, 33, 204, ya], [1, "de", Jj, 29, 202, ya], [Te, "de", 19, 27, 200, ya], [mk, "de", 19, 26, 193, ya], [Te, "de", Dk, Sa, 201, Hi], [ie, "de", 19, 20, 199, In], [1, "de", 19, Sj, 196, wj], [za, "de", 19, Xi, 204, Da], [mk, "de", Jj, 11, 201, 0], [1, "de", 19, 23, 208, Rq], [1, "de", Dk, 31, 214, 0], [1, "de", 19, 26, 215, Hi], [1, "de", 19, 36, 217, Zj], [1, "de", bq, 32, 223, 0], [Xn, "de", 19, 26, 223, mj], [1, "de", Dk, ro, 218, 0], [1, "de", b, _o, 215, 0], [Te, "de", Dk, 17, 212, 0], [Oq, "de", Dk, v, 224, Rq], [1, "de", Be, Be, 229, 0], [1, "de", Be, Ra, 230, mj], [1, "de", 19, 22, 240, Da], [Xn, "de", Dk, 13, 238, Hi], [ie, "de", bq, Z, 243, Da], [1, "de", b, 24, 244, In], [Te, "de", 19, 24, 250, 0], [ie, "de", Dk, 28, 253, In], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [mk, "de", 19, 31, 260, ya], [1, "de", 19, 38, 267, 0], [1, "de", Be, 44, 264, mj], [Xn, "de", ha, 43, 261, 0], [Xn, "de", bn, Fo, 257, 0], [mk, "de", 19, 22, 258, 0], [mk, "de", 19, gr, 253, Hi], [1, "de", bq, aa, 242, 0], [Oq, "de", b, Hr, 255, Hi], [Te, "de", 19, eo, 264, 0], [mk, "de", 19, 20, 265, Zj], [ie, "de", 19, 12, 271, Hi], [za, "de", ha, 8, 272, 0], [Oq, "de", Jj, 13, 277, ya], [1, "de", 19, 21, 277, 0], [Oq, "de", 19, 21, 281, 0], [za, "de", ha, 27, 282, 0], [1, "de", Jj, 29, 278, Zj], [mk, "de", Dq, 29, 273, mj], [1, "de", ha, 36, 271, 0], [Xn, "de", ha, E, 278, 0], [1, "de", 19, Jq, 286, mj], [1, "de", 19, 17, 291, 0], [za, "de", Dq, 14, 294, 0], [Oq, "de", 19, 8, 292, 0], [Te, "de", Be, Uk, 300, Zj], [za, "de", bq, hr, 298, wj], [1, "de", 19, Fo, 301, Hi], [1, "de", Dk, 27, 296, 0], [Te, "de", Dk, 25, 292, ya], [ie, "de", 19, 23, 301, 0], [Xn, "de", 19, 28, 301, ya], [za, "de", ha, 35, 297, 0], [za, "de", 19, 37, 301, 0], [ie, "de", b, 43, 301, 0], [Oq, "de", so, 46, 294, 0], [1, "de", 19, 46, 288, ya], [Xn, "de", 19, 40, 287, 0], [1, "de", so, 50, 301, 0], [1, "de", 19, 58, 301, Rq], [za, "de", ha, 64, 301, Hi], [Xn, "de", b, 71, 301, 0], [Oq, "de", ha, 80, 301, 0], [1, "de", 19, 87, 301, ya], [1, "de", 19, 86, 294, ya], [1, "de", bn, 87, 290, ya], [1, "de", Be, 82, 286, Hi], [Te, "de", 19, 75, 285, mj], [Xn, "de", Be, 66, 292, 0], [1, "de", 19, 66, 288, 0], [Oq, "de", Jj, 58, 288, 0], [Oq, "de", bq, 67, 282, mj], [Oq, "de", 19, 61, 281, Da], [ie, "de", 19, 60, 295, 0], [1, "de", ha, 50, 282, 0], [1, "de", b, 47, 283, Da], [1, "de", Jj, 48, 281, Zj], [ie, "de", 19, 44, 277, Da], [mk, "de", 19, 41, 282, Hi], [1, "de", bn, 38, 281, Da], [Xn, "de", 19, 42, 288, wj], [1, "de", 19, 52, 281, 0], [Xn, "de", 19, 50, 275, mj], [Te, "de", 19, 39, 277, Hi], [1, "de", 19, 38, 284, Rq], [1, "de", Dk, 51, 285, 0], [ie, "de", Dk, 38, 278, Hi], [ie, "de", Dq, 47, 272, Zj], [1, "de", ha, 44, 267, Hi], [1, "de", Be, 76, 280, mj], [1, "de", bn, 78, 272, wj], [Oq, "de", Dk, 68, 275, 0], [Oq, "de", Dk, 70, 265, Hi], [1, "de", Jj, 65, 263, Rq], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, wj], [1, "de", Dq, 56, 266, 0], [mk, "de", 19, 55, 260, 0], [1, "de", Dq, 59, 258, In], [1, "de", Be, 62, Nk, 0], [Oq, "de", bn, 67, 253, 0], [mk, "de", 19, 69, 256, mj], [1, "de", 19, 44, 253, ya], [Te, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, Hi], [Oq, "de", 19, 39, 239, 0], [1, "de", Be, 42, 234, Hi], [za, "de", 19, 37, 235, 0], [1, "de", Dk, 45, 226, wj], [ie, "de", Be, 46, 222, 0], [ie, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [Te, "de", 19, 74, 224, wj], [1, "de", 19, 76, 218, ya], [1, "de", 19, 84, 221, 0], [mk, "de", ha, 88, 223, mj], [za, "de", 19, 76, 230, mj], [1, "de", b, 86, 234, 0], [1, "de", 19, 79, 237, Rq], [Oq, "de", so, 75, 243, Hi], [1, "de", ha, 81, 245, In], [1, "de", 19, 83, 247, Da], [1, "de", 19, 88, 247, Rq], [mk, "de", 19, 84, 254, Zj], [1, "de", 19, 86, 251, 0], [1, "de", Jj, 85, 260, 0], [za, "de", 19, 79, 260, wj], [Oq, "de", 19, 76, 251, Rq], [ie, "de", 19, 72, 251, 0], [mk, "de", 19, 69, 251, 0], [1, "de", bn, 87, 266, 0], [1, "de", Jj, 89, 270, 0], [Te, "de", bn, 87, 271, Hi], [1, "de", 19, 82, 277, wj], [Oq, "de", b, 87, 284, 0], [Oq, "de", 19, 87, 237, Hi], [Oq, "de", bq, 88, 179, Rq], [1, "de", 19, 50, 191, mj], [1, "de", ha, 52, 221, Hi], [1, "de", 19, 34, 234, Hi], [mk, "de", 19, 27, 233, 0], [Oq, "de", 19, 37, 293, mj], [ie, "de", 29, 13, 181, 0], [Xn, "de", 29, 8, 180, mj], [za, "de", 30, Cq, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, Rq], [Te, "de", 32, 37, 182, In], [Xn, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [za, "de", 30, 58, 181, 0], [mk, "de", 30, 66, 188, In], [Oq, "de", 30, 66, 182, wj], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [ie, "de", 30, 87, 182, 0], [Oq, "de", 30, 83, 185, Rq], [Xn, "de", 29, 88, 189, 0], [za, "de", 29, 85, 202, Zj], [1, "de", 31, 82, 203, mj], [za, "de", 32, 80, 201, 0], [Oq, "de", 32, 87, 209, Rq], [1, "de", 32, 83, 214, mj], [za, "de", 30, 88, 220, Zj], [Xn, "de", 30, 78, 229, 0], [ie, "de", 30, 73, 223, wj], [1, "de", 29, 74, 217, 0], [ie, "de", 29, 67, 217, mj], [1, "de", 30, 72, 208, mj], [Oq, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, wj], [Xn, "de", 29, 63, 210, Zj], [1, "de", 29, 50, 204, Rq], [1, "de", 30, 41, 205, ya], [Te, "de", 29, 35, 205, 0], [ie, "de", 30, 27, 202, Hi], [1, "de", 30, 20, 201, 0], [1, "de", 29, Bo, 203, ya], [mk, "de", 29, Wa, 196, 0], [za, "de", 29, 24, 187, 0], [Xn, "de", 29, 28, 223, Da], [1, "de", 29, 32, 212, 0], [Oq, "de", 30, 28, 214, wj], [1, "de", 31, 24, 218, 0], [ie, "de", 29, 36, 219, 0], [Te, "de", 29, 37, 217, ya], [1, "de", 29, 52, 217, ya], [Te, "de", 29, 59, 217, 0], [Xn, "de", 29, 69, 231, Da], [1, "de", 29, 64, 242, 0], [Oq, "de", 30, 53, 253, ya], [Te, "de", 30, 45, 250, wj], [Te, "de", 30, 58, 261, wj], [Xn, "de", 30, 73, 276, mj], [mk, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, Rq], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, Hi], [1, "de", 30, 40, 288, Da], [Oq, "de", 30, 37, 283, Zj], [1, "de", 30, 53, 280, Zj], [Xn, "de", 30, 41, 277, Hi], [1, "de", 29, 28, 296, In], [ie, "de", 29, Pj, 292, Hi], [za, "de", 29, 24, 284, Hi], [mk, "de", 30, sk, 295, 0], [1, "de", 30, J, 286, mj], [1, "de", 30, 15, 279, In], [za, "de", 30, $q, 269, In], [Te, "de", 30, 21, 259, 0], [1, "de", 30, La, Kk, Hi], [Te, "de", 30, 31, 245, Zj], [ie, "de", 30, 12, 240, Da], [1, "de", 30, 28, 235, mj], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, Da], [1, "de", 30, 61, 226, Hi], [mk, "r", 96, 262, 0], [1, "r", 97, 262, mj], [1, "r", 98, 262, 0], [Xn, "r", 97, 270, In], [1, "r", 97, 271, 0], [1, "r", 97, 272, Hi], [mk, "r", 97, 273, Zj], [Te, "r", 97, 274, ya], [1, "r", 97, 275, 0], [ie, "r", 97, 276, Da], [1, "r", 97, 277, 0], [1, "r", 97, 278, ya], [za, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [mk, "r", 98, 273, 0], [mk, "r", 98, 274, In], [1, "r", 98, 275, 0], [Te, "r", 98, 276, 0], [1, "r", 98, 277, Zj], [1, "r", 98, 278, wj], [1, "r", 96, 283, 0], [ie, "r", 97, 283, 0], [Oq, "r", 97, 284, 0], [1, "r", 97, 285, 0], [Xn, "r", 98, 283, Hi], [ie, "r", 98, 284, 0], [1, "r", 98, 285, Zj], [1, "r", 96, 270, wj], [mk, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, Rq], [mk, "r", 96, 274, Zj], [mk, "r", 96, 275, Da], [Te, "r", 96, 276, 0], [Xn, "r", 96, 277, 0], [1, "r", 96, 278, Zj], [1, "r", 44, 248, 0], [1, "de", p, 94, 290, Hi], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [Te, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, za], [mk, "r", 94, 281, 1], [Oq, "r", 90, 281, za], [1, "r", 91, 282, mk], [Te, "r", 89, 281, Oq], [1, "r", 85, 276, 1], [mk, "r", 85, 277, mk], [Xn, "r", 86, 278, Xn], [1, "p", In, 85, 279, ie], [1, "r", 86, 279, 1], [ie, "r", 87, 280, 1], [1, "r", 96, 281, mj], [1, "r", 97, 281, Da], [ie, "r", 98, 281, 0], [1, "r", 98, 282, 0], [Xn, "r", 97, 282, 0], [Xn, "r", 96, 282, 0], [ie, "r", 68, 261, 1], [za, "fo", za, 94, 168, 0], [Te, "fo", 2, 94, 151, ya], [Oq, "fo", 1, 94, 138, wj], [1, "fo", 1, 93, 124, ya], [Te, "fo", 1, 94, 129, 0], [1, "fo", ie, 93, 113, 0], [Te, "fo", 1, 94, 102, ya], [Oq, "fo", Oq, 94, 93, wj], [1, "fo", 1, 93, 90, 0], [1, "fo", ie, 94, 79, 0], [ie, "fo", mk, 94, 76, mj], [Oq, "fo", 1, 93, 70, Da], [1, "fo", mk, 93, 63, wj], [1, "fo", ie, 94, 53, Da], [1, "fo", 1, 93, jn, wj], [1, "fo", ie, 85, 8, Zj], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, Vi, wj], [1, "fo", 1, 69, se, Zj], [1, "fo", Hj, 68, 14, 0], [mk, "fo", 2, 66, 25, Zj], [Oq, "fo", lr, 92, 9, 0], [1, "fo", pq, 94, 14, 0], [1, "fo", Pn, 87, 9, 0], [1, "fo", 2, 71, se, Zj], [Xn, "fo", lr, 90, 12, mj], [1, "fo", 2, 91, hq, In], [Te, "fo", 1, 74, 12, Da], [1, "fo", 2, 72, F, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, eo, 0], [1, "fo", 2, 84, 12, 0], [Xn, "fo", xj, 81, dk, 0], [1, "fo", Oq, 84, 13, 0], [za, "fo", Oq, 84, b, 0], [Oq, "fo", 1, pk, 9, Rq], [1, "fo", 1, 7, 14, 0], [Oq, "fo", mk, 8, 22, In], [ie, "fo", Xn, ur, 34, 0], [Oq, "fo", Te, 12, 24, 0], [1, "fo", jk, Iq, 24, 0], [1, "fo", xq, Qj, 21, Hi], [Oq, "fo", 2, 31, 10, 0], [ie, "fo", Hj, 33, 27, 0], [za, "fo", 2, 9, 34, Da], [1, "fo", 2, qk, 19, mj], [1, "fo", 1, dk, J, 0], [1, "fo", H, hq, R, mj], [Oq, "fo", 2, 15, 11, 0], [1, "fo", xj, 9, 9, 0], [1, "fo", lr, 9, 10, Rq], [ie, "fo", 2, Lo, 15, ya], [1, "fo", 2, 10, 23, Rq], [za, "fo", Hj, 34, 29, 0], [za, "fo", jk, 27, 18, wj], [Te, "fo", xq, 25, 21, 0], [za, "fo", 2, 20, P, 0], [1, "fo", xj, hr, 21, 0], [1, "fo", 2, 29, fk, Hi], [1, "fo", 2, 13, Sq, 0], [1, "fo", 2, rr, 38, 0], [za, "fo", H, 21, 39, 0], [Oq, "fo", xq, 84, 26, 0], [1, "fo", 2, 77, 25, In], [1, "fo", 2, 86, 35, Da], [mk, "fo", 1, 70, 35, Rq], [1, "fo", 2, 72, 36, ya], [za, "fo", 2, 73, 31, mj], [1, "fo", 2, 89, 39, 0], [1, "fo", Hj, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, ya], [1, "de", 22, 17, 206, 0], [ie, "de", Dq, 8, 184, Hi], [mk, "de", Be, 22, 183, 0], [Te, "de", bn, 35, 188, 0], [1, "de", Dq, 36, 192, Da], [za, "de", bq, 50, 277, ya], [ie, "de", ha, 35, 279, 0], [1, "t", nj, 7, 178, 0], [ie, "t", 1, 7, 179, wj], [1, "t", 3, cq, 180, 0], [1, "t", pq, 7, 181, In], [1, "t", 5, Ar, 182, 0], [1, "t", 4, 7, 183, 0], [Oq, "t", nq, 7, 184, mj], [1, "t", 4, 7, 185, In], [1, "t", xj, 7, 186, wj], [ie, "t", 1, 7, 187, 0], [ie, "t", $i, 7, 188, 0], [1, "t", fn, 7, 189, In], [Xn, "t", 5, $n, 190, Hi], [Te, "t", 1, Aq, 191, 0], [1, "t", 3, N, 192, 0], [1, "t", Fr, 7, 193, Da], [mk, "t", yr, 7, 194, 0], [ie, "t", 5, 7, 195, 0], [Oq, "t", 2, $k, 196, Zj], [Oq, "t", Pe, 7, 197, 0], [1, "b", 2, 7, 198, Hi], [1, "t", nj, N, 199, 0], [1, "t", Pn, 7, 200, Rq], [1, "t", kq, 7, 201, 0], [mk, "t", 2, 7, 202, 0], [1, "t", 4, $k, 203, Zj], [mk, "t", 2, Ar, 204, Zj], [1, "t", 5, 7, 205, mj], [1, "t", jk, Aq, 206, 0], [1, "t", 1, 7, 207, Da], [1, "t", 4, ur, 208, Da], [1, "t", yr, Ar, 209, 0], [Xn, "t", 1, 7, 210, 0], [za, "b", Rq, 7, 211, 0], [mk, "t", 3, $n, 212, wj], [1, "t", Mq, N, 213, Zj], [za, "t", qo, 7, 214, Hi], [1, "t", z, $k, 215, 0], [1, "t", 5, ia, 216, ya], [Oq, "t", 3, N, 217, In], [1, "t", 1, wk, 218, Rq], [Te, "t", Mq, Ar, 219, wj], [1, "b", 2, 7, 220, 0], [Xn, "t", 1, 7, 221, 0], [1, "t", jk, 7, 222, mj], [1, "t", Pe, cq, 223, Da], [1, "t", ci, 7, 224, Rq], [mk, "t", 1, $n, 225, 0], [Xn, "t", 4, wk, 226, Da], [1, "t", pq, wk, 227, 0], [1, "t", M, Ni, 228, 0], [1, "t", Hk, 7, 229, 0], [1, "t", za, 7, 230, 0], [Xn, "t", Fr, ur, 231, 0], [Oq, "b", 2, 7, 232, Zj], [1, "t", M, 7, 233, Hi], [Te, "t", Oq, 7, 234, 0], [1, "t", ea, Ni, 235, wj], [1, "t", ba, $n, 236, ya], [Xn, "t", jk, $n, 237, 0], [1, "t", kq, 7, 238, 0], [1, "b", I, 7, 239, 0], [1, "t", xj, cq, 240, 0], [Xn, "t", Xn, 7, 241, 0], [mk, "t", lr, $n, 242, 0], [1, "t", nj, 7, 243, 0], [ie, "t", qo, 7, 244, wj], [Xn, "t", 4, 7, 245, In], [1, "t", 1, 7, 246, ya], [mk, "b", Da, wk, 247, 0], [za, "t", 3, N, 248, 0], [Te, "t", nr, Ni, 249, ya], [1, "t", jk, $k, 250, ya], [1, "t", mk, $k, 251, ya], [Xn, "t", ba, 7, 252, 0], [Xn, "t", 3, wk, 253, wj], [1, "t", Oj, 7, 254, 0], [Xn, "t", 1, 7, Fe, 0], [mk, "t", 4, Aq, Kk, Rq], [ie, "t", mk, 7, 257, mj], [1, "t", 2, 7, 258, ya], [1, "t", 5, ur, 260, Da], [1, "t", 3, 7, 259, Hi], [1, "t", 1, Ar, 261, Zj], [ie, "t", ci, Ni, 262, 0], [1, "t", 4, 7, 263, wj], [Oq, "t", 1, 7, 264, mj], [mk, "t", 2, $k, 265, 0], [1, "t", 5, ia, 266, Rq], [1, "t", xj, 7, 267, Da], [Oq, "t", 2, 7, 269, wj], [1, "b", 2, 7, 268, Rq], [1, "t", Mq, 7, 270, 0], [ie, "t", 1, $n, 271, 0], [Xn, "t", 5, ia, 272, ya], [Xn, "b", 2, 7, 273, 0], [1, "t", 4, ia, 274, Da], [1, "t", 2, 7, 275, Hi], [1, "t", kq, Ni, 276, 0], [Te, "t", 5, Ar, 277, 0], [1, "t", H, Ni, 278, 0], [1, "t", 1, 7, 279, Zj], [1, "t", $i, Aq, 280, 0], [1, "b", 1, $k, 281, mj], [1, "t", Hk, $k, 282, 0], [1, "t", Fr, cq, 283, 0], [1, "t", mk, 7, 284, mj], [1, "t", yr, 7, 285, wj], [1, "t", 5, 7, 286, 0], [za, "t", 4, 7, 288, 0], [1, "t", H, wk, 287, 0], [mk, "b", Rq, 7, 289, Rq], [1, "t", 4, Aq, 290, In], [1, "t", 2, $n, 291, wj], [mk, "t", z, 7, 292, 0], [1, "t", fn, Ni, 293, 0], [za, "t", 1, 7, 294, 0], [1, "t", Mq, Aq, 295, Hi], [1, "t", yr, Ni, 296, 0], [1, "t", 1, cq, 297, Da], [1, "t", 4, Ni, 298, 0], [Oq, "t", H, ia, 299, Zj], [1, "b", 0, Aq, 300, 0], [ie, "t", 2, 7, 301, 0], [Oq, "r", 196, 271, 0], [mk, "r", 199, 274, 0], [za, "r", 167, 238, Da], [Te, "r", 171, 240, Zj], [ie, "r", 189, 207, Rq], [1, "r", 192, 209, wj], [mk, "r", 198, 271, Rq], [ie, "r", 197, 271, 0], [1, "r", 198, 272, wj], [Xn, "r", 197, 272, 0], [mk, "r", 196, 272, 0], [1, "r", 195, 272, Rq], [Xn, "r", 199, 272, 0], [1, "r", 199, 273, 0], [mk, "r", 198, 273, In], [Xn, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [mk, "r", 197, 274, Da], [Xn, "r", 195, 273, In], [Te, "r", 196, 274, 0], [Xn, "r", 198, 275, Zj], [1, "r", 197, 275, Hi], [1, "r", 200, 274, Zj], [1, "r", 200, 273, Hi], [1, "r", 199, 275, wj], [Xn, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, Zj], [Oq, "plm", 0, 199, 268, 0], [1, "plm", wj, 193, 277, Da], [1, "plm", Te, 199, 276, 0], [za, "s", 1, 200, 275, za], [1, "s", 1, 194, 272, Xn], [1, "s", jk, 193, 270, 1], [Xn, "g", 2, 193, 273, 1], [za, "g", 2, 201, 267, Te], [Xn, "m", 2, 220, 298, 1], [1, "m", Te, 219, 292, Xn], [1, "m", 1, 214, 297, Oq], [1, "r", 168, 238, In], [Xn, "r", 169, 238, In], [Oq, "r", 170, 238, 0], [mk, "r", 171, 239, Hi], [1, "r", 170, 239, ya], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, Hi], [1, "r", 166, 239, 0], [za, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, Hi], [1, "r", 169, 240, ya], [Xn, "r", 170, 240, In], [za, "r", 168, 241, Da], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, Rq], [Te, "plm", jk, 171, 238, Rq], [ie, "plm", Te, 166, 238, 0], [1, "plm", mj, 167, 237, 0], [mk, "plm", 0, 171, 242, 0], [1, "plm", wj, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, Zj], [za, "s", Xn, 165, 239, 1], [ie, "s", 1, 172, 241, Oq], [Oq, "s", 0, 170, 237, 1], [Oq, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", H, 162, 241, za], [mk, "s", 2, 170, 246, 1], [1, "s", lr, 167, 235, 1], [ie, "s", 2, 176, 243, mk], [mk, "r", 190, 207, Zj], [Xn, "r", 191, 207, wj], [Oq, "r", 192, 208, 0], [Te, "r", 191, 208, Zj], [1, "r", 190, 208, Zj], [1, "r", 189, 208, Hi], [1, "r", 188, 208, Rq], [za, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [Oq, "r", 188, 209, 0], [1, "r", 190, 210, 0], [za, "r", 191, 210, Rq], [1, "r", 192, 210, In], [Xn, "plm", lr, 189, 210, mj], [Te, "plm", xq, 192, 205, 0], [Xn, "plm", Xn, 192, 207, 0], [1, "plm", 0, 193, 210, ya], [1, "plm", Hi, 187, 208, 0], [Xn, "plm", 0, 197, 206, mj], [1, "plm", 0, 191, 213, Hi], [1, "plm", 0, 190, 204, Hi], [za, "s", Xn, 188, 207, mk], [1, "s", 1, 190, 211, 1], [Oq, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [Te, "s", Zj, 194, 210, mk], [1, "s", 0, 198, 207, 1], [mk, "s", 1, 193, 204, ie], [za, "s", 1, 193, 213, 1], [mk, "s", 2, 198, 212, ie], [1, "s", Pn, 182, 208, 1], [Oq, "s", mk, 204, 271, 1], [Oq, "s", mj, 203, 272, mk], [1, "s", 0, 189, 275, 1], [ie, "s", In, 195, 265, 1], [1, "s", 2, 196, 264, mk], [ie, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, za], [Oq, "s", 0, 217, 282, Te], [1, "s", za, 214, 285, 1], [1, "s", Xn, 214, 274, ie], [1, "s", mk, 203, 282, 1], [1, "s", ie, 205, 290, Oq], [Oq, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, Xn], [Xn, "s", 2, 213, 289, Oq], [1, "s", lr, 196, 294, 1], [1, "s", 2, 187, 286, mk], [Te, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", Hi, 213, 273, 1], [1, "g", 2, 212, 278, 1], [ie, "g", 1, 200, 288, mk], [1, "g", H, 215, 265, za], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, Oq], [1, "s", 0, 167, 281, mk], [1, "s", Hi, 175, 263, za], [1, "s", za, 176, 293, 1], [Xn, "s", 1, 163, 285, 1], [Xn, "s", 1, 177, 266, 1], [ie, "s", 1, 161, 272, Xn], [1, "s", pq, 185, 261, Xn], [1, "c", wj, 217, 270, 1], [1, "c", Hi, 220, 278, Xn], [1, "c", ya, 217, 283, 1], [1, "c", 0, 220, 287, ie], [za, "c", Da, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, Xn], [1, "c", mj, 208, 283, 1], [1, "c", mj, 197, 283, 1], [1, "c", 0, 190, 289, Te], [mk, "c", 0, 183, 296, ie], [1, "c", Rq, 189, 291, 1], [Xn, "c", mj, 178, 284, ie], [1, "c", wj, 208, 265, 1], [Xn, "c", 0, 169, 292, za], [Te, "s", Xn, 158, 294, 1], [mk, "s", In, 151, 297, Te], [Te, "s", 0, 147, 288, 1], [1, "c", Rq, 150, 289, Xn], [za, "c", mj, 160, 282, Xn], [mk, "c", 0, 146, 274, Oq], [1, "c", 0, 167, 264, Xn], [za, "c", 0, 165, 267, 1], [Oq, "g", 0, 189, 257, 1], [Xn, "g", Te, 197, 248, 1], [Oq, "g", Pn, 170, Li, Xn], [Xn, "g", pq, 212, 234, mk], [mk, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, Xn], [ie, "g", ie, 210, 214, 1], [Oq, "s", 1, 153, 257, za], [Xn, "s", In, 158, 255, 1], [ie, "s", Zj, 184, 248, Te], [Te, "s", ya, 212, 254, mk], [Oq, "s", ie, 203, 249, za], [1, "s", 2, 204, 252, Te], [Xn, "s", jk, 187, 248, mk], [za, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, za], [Oq, "s", mj, 181, 228, 1], [1, "s", 1, 199, 227, 1], [Xn, "s", 1, 208, 238, 1], [1, "s", za, 179, 222, ie], [ie, "s", Xn, 213, 223, Oq], [1, "s", 2, 182, 222, za], [za, "s", 2, 211, 226, Te], [Te, "s", xj, 214, 214, 1], [Te, "s", 2, 201, 216, 1], [1, "s", xq, 215, 192, Oq], [Oq, "s", 1, 210, 198, 1], [Te, "s", za, 198, 196, ie], [1, "s", 2, 208, 199, 1], [Te, "s", 2, 187, 192, 1], [Oq, "s", 1, 179, 198, 1], [1, "s", jk, 177, 197, 1], [ie, "s", ya, 164, 197, 1], [1, "s", ie, 159, 193, ie], [1, "s", za, 149, 206, ie], [mk, "s", 1, 164, 209, Xn], [1, "s", 2, 165, 210, mk], [1, "s", pq, 161, 191, ie], [1, "s", Xn, 162, 224, Xn], [za, "s", 0, 150, 236, 1], [Xn, "s", 1, 149, 239, Xn], [Te, "s", 2, 153, 236, za], [za, "s", xj, 160, 223, 1], [mk, "s", 2, 151, 207, 1], [Oq, "s", xq, 147, 220, Xn], [1, "s", jk, 145, 265, 1], [1, "s", jk, 145, 285, 1], [mk, "c", mj, 152, 266, 1], [Te, "c", ya, 185, 271, 1], [ie, "c", Da, 210, 254, 1], [Te, "c", Hi, 209, 256, Te], [za, "c", 0, 198, 254, 1], [Xn, "c", 0, 213, 246, Te], [1, "c", 0, 216, 237, 1], [za, "c", 0, 204, 240, 1], [Te, "c", 0, 196, 234, za], [1, "c", 0, 188, 238, za], [Oq, "c", 0, 182, 245, 1], [Te, "c", In, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", wj, 158, 233, Oq], [za, "c", 0, 147, 230, 1], [za, "c", mj, 151, 224, 1], [Oq, "c", 0, 157, 214, 1], [za, "c", In, 167, 219, za], [Xn, "c", 0, 171, 208, za], [1, "c", 0, 179, 219, 1], [Te, "c", Zj, 176, 229, 1], [1, "c", 0, 195, 221, ie], [Xn, "c", Hi, 207, 222, za], [1, "c", 0, 214, 207, 1], [mk, "c", Da, 205, 210, Oq], [Oq, "c", 0, 204, 196, 1], [Te, "c", In, 214, 196, 1], [1, "c", 0, 190, 199, ie], [1, "c", Da, 184, 194, Te], [1, "c", 0, 172, 199, 1], [ie, "c", 0, 161, 204, mk], [Xn, "c", 0, 157, 196, Oq], [Oq, "c", 0, 149, 194, za], [mk, "c", 0, 147, 208, Oq], [Oq, "c", 0, 207, 274, 1], [1, "c", Zj, 217, 258, 1], [1, "c", 0, 201, 260, za], [1, "c", 0, 178, 276, ie], [mk, "c", Da, 187, 265, ie], [1, "s", Te, 204, 260, 1], [1, "s", Te, 216, 260, Xn], [Oq, "s", za, 187, 255, Te], [mk, "s", Pn, 189, 254, ie], [za, "s", jk, 212, 257, 1], [1, "s", 2, 182, 286, 1], [Oq, "s", H, 169, 280, 1], [za, "s", xj, 217, 273, za], [Xn, "s", 2, 215, 282, Oq], [1, "s", xq, 172, 263, 1], [ie, "s", 2, 176, 267, Oq], [1, "s", pq, 215, 251, ie], [Xn, "fod", mk, 221, 282, In], [mk, "fod", ie, 222, 284, 0], [ie, "fod", mk, 221, 290, In], [1, "fod", 1, 222, 294, 0], [1, "fod", Xn, 221, 297, 0], [Xn, "fod", 1, 223, 298, 0], [Oq, "fod", 1, 222, 300, ya], [Oq, "fod", 1, 218, 301, 0], [1, "fod", za, 217, 299, ya], [Oq, "fod", 1, 215, 301, 0], [Te, "fod", Te, 212, 300, In], [za, "fod", 1, 206, 300, 0], [za, "fod", za, 209, 301, Zj], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [Xn, "fod", 1, 199, 301, mj], [Te, "fod", Oq, 222, 282, wj], [1, "fod", 1, 207, 301, 0], [1, "fod", Xn, 197, 301, 0], [1, "fod", Xn, 215, 291, 0], [Oq, "fod", ie, 216, 286, 0], [1, "fod", ie, 214, 292, Zj], [1, "fod", Xn, 210, 289, Hi], [za, "fod", 1, 208, 294, Zj], [1, "fod", 1, 210, 298, Rq], [Te, "fod", ie, 212, 281, Da], [ie, "fod", 1, 219, 278, Hi], [ie, "fod", 1, 219, 282, 0], [Te, "fod", Te, 205, 286, 0], [1, "fod", Xn, 202, 293, 0], [za, "fod", ie, 198, 295, wj], [mk, "fod", 2, 213, 282, 0], [Oq, "fod", 2, 213, 291, Hi], [1, "fod", 2, 216, 289, mj], [za, "fod", xq, 219, 289, 0], [za, "fod", xj, 218, 285, Hi], [Te, "fod", 2, 220, 283, ya], [1, "fod", pq, 211, 283, Zj], [1, "fod", 2, 215, 281, 0], [ie, "fod", pq, 217, 279, 0], [1, "fod", Pn, 208, 290, Rq], [1, "fod", Pn, 211, 296, 0], [Xn, "fod", 2, 215, 294, mj], [Xn, "fod", pq, 212, 298, 0], [Xn, "fod", 2, 203, 294, Hi], [1, "fod", 2, 204, 288, Hi], [1, "fod", pq, 200, 294, 0], [za, "fod", 2, 198, 297, Zj], [1, "fod", xj, 202, 299, wj], [Oq, "fod", jk, 200, 299, wj], [1, "fod", 2, 220, 300, 0], [ie, "fod", H, 220, 295, wj], [1, "fod", pq, 220, 292, wj], [Oq, "fod", 2, 219, 287, Da], [1, "fod", 2, 211, 288, 0], [Xn, "fod", 2, 213, 287, ya], [Oq, "fod", xq, 211, 289, Da], [Te, "fod", 2, 212, 290, 0], [1, "fod", xj, 195, 296, Zj], [1, "fod", H, 196, 299, Da], [Xn, "fod", Hj, 194, 300, 0], [Te, "fod", 2, 195, 300, ya], [1, "fod", lr, 213, 279, Hi], [ie, "fod", xq, 211, 279, Rq], [1, "fod", Da, 218, 290, mj], [1, "fod", Zj, 212, 294, 0], [mk, "fod", 1, 213, 295, mj], [za, "fod", Oq, 217, 292, 0], [mk, "fod", Te, 218, 288, 0], [Xn, "fod", Te, 210, 295, 0], [1, "fod", Te, 213, 292, 0], [Xn, "fod", 1, 212, 289, 0], [1, "fod", mk, 205, 295, 0], [Te, "fod", 2, 206, 296, 0], [mk, "fod", xq, 208, 296, 0], [Te, "fod", 2, 221, 288, mj], [ie, "fod", xj, 209, 299, Hi], [za, "fod", lr, 211, 291, In], [Xn, "fod", za, 203, 275, 0], [1, "fod", 1, 204, 272, In], [1, "fod", xj, 205, 273, 0], [1, "fod", xq, 204, 276, mj], [mk, "fod", Pn, 202, 276, 0], [Te, "fod", 2, 199, 277, wj], [ie, "fod", 2, 202, 273, Hi], [ie, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [za, "fod", Xn, 192, 274, Da], [1, "fod", 1, 194, 267, 0], [Xn, "fod", 2, 194, 265, Zj], [Oq, "fod", xj, 190, 272, ya], [1, "fod", 2, 191, 275, Hi], [Oq, "fod", lr, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, Da], [1, "fod", za, 175, 240, mj], [Xn, "fod", 1, 169, 234, mj], [Oq, "fod", 1, 162, 235, ya], [ie, "fod", 2, 169, 236, ya], [1, "fod", Hj, 171, 234, 0], [1, "fod", Hj, 165, 238, Rq], [za, "fod", Hj, 173, 241, In], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, ya], [1, "fod", Pn, 169, 244, 0], [1, "fod", 2, 166, 243, In], [Xn, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, mj], [1, "fod", xq, 162, 233, 0], [1, "fod", pq, 163, 236, 0], [za, "fod", Pn, 174, 242, In], [1, "fod", xj, 171, 243, 0], [za, "fod", 1, 194, 206, In], [1, "fod", za, 190, 214, 0], [Xn, "fod", 1, 186, 206, 0], [1, "fod", mk, 197, 207, Zj], [1, "fod", H, 196, 208, 0], [1, "fod", 2, 198, 206, Zj], [za, "fod", pq, 198, 208, Rq], [1, "fod", 2, 194, 204, 0], [1, "fod", pq, 187, 206, Da], [Xn, "fod", Pn, 186, 204, In], [ie, "fod", 2, 189, 214, mj], [1, "fod", 2, 189, 213, Rq], [1, "fod", 2, 193, 215, 0], [ie, "fod", H, 194, 214, mj], [1, "fod", jk, 187, 215, Da], [1, "fod", Pn, 193, 209, Da], [1, "fod", H, 189, 211, 0], [Te, "fod", Pn, 187, 209, Da], [Te, "fod", 2, 187, 207, Hi], [Xn, "fod", 2, 191, 205, In], [Te, "fod", lr, 189, 203, 0], [1, "cs", 2, 224, 176, mk], [1, "cs", 0, 224, 177, Oq], [Oq, "cs", 3, 224, 178, mk], [Xn, "cs", 2, 224, 179, 1], [Te, "cs", Te, 224, 180, 1], [ie, "cs", H, 224, 181, Te], [1, "cs", Da, 224, 182, Oq], [1, "cs", 2, 224, 183, Oq], [1, "cs", In, 224, 184, Xn], [1, "cs", ea, 224, 185, 1], [Xn, "cs", pq, 224, 186, 1], [1, "cs", wj, 224, 187, 1], [Te, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, Xn], [1, "cs", 1, 224, 190, 1], [1, "cs", lr, 224, 191, mk], [1, "cs", 0, 224, 192, za], [Xn, "cs", jk, 224, 193, 1], [Oq, "cs", Hj, 224, 194, 1], [1, "cs", 1, 224, 195, mk], [ie, "cs", xq, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [ie, "cs", xq, 224, 199, 1], [za, "cs", 1, 224, 200, 1], [za, "cs", 2, 224, 201, 1], [1, "cs", nq, 224, 202, 1], [1, "cs", wj, 224, 203, 1], [mk, "cs", Te, 224, 204, 1], [Xn, "cs", pq, 224, 205, 1], [1, "cs", In, 224, 206, Te], [mk, "cs", mk, 224, 207, 1], [za, "cs", 3, 224, 208, ie], [za, "cs", Pn, 224, 209, Xn], [ie, "cs", H, 224, 210, Te], [1, "cs", 0, 223, 211, 1], [Te, "cs", 1, 224, 211, 1], [Xn, "cs", 2, 224, 212, 1], [1, "cs", xq, 224, 213, ie], [1, "cs", Te, 224, 214, 1], [za, "cs", 3, 224, 215, 1], [ie, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, ie], [1, "cs", 2, 224, 218, Xn], [1, "cs", yr, 224, 219, 1], [1, "cs", ya, 223, 215, Xn], [za, "cs", H, 223, 214, 1], [mk, "cs", xj, 223, 212, 1], [mk, "cs", Pn, 223, 216, 1], [1, "cs", 3, 223, 217, mk], [ie, "cs", 0, 223, 218, za], [1, "cs", In, 224, 220, za], [1, "cs", mj, 224, 222, 1], [Xn, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, za], [Te, "cs", xj, 224, 221, 1], [za, "cs", xj, 223, 219, za], [1, "cs", lr, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", xj, 223, 210, 1], [1, "cs", 1, 223, 178, ie], [Xn, "cs", 3, 223, 179, Xn], [mk, "cs", ea, 223, 181, Oq], [1, "cs", I, 223, 182, 1], [mk, "cs", 1, 223, 185, 1], [Xn, "cs", H, 223, 184, 1], [Oq, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, Xn], [1, "cs", mj, 223, 183, 1], [1, "cs", lr, 223, 187, 1], [mk, "cs", ie, 223, 188, ie], [1, "cs", 2, 223, 189, Oq], [mk, "cs", 2, 223, 190, mk], [Xn, "cs", Hk, 223, 191, 1], [Xn, "cs", 1, 223, 192, ie], [1, "cs", 2, 223, 193, Te], [1, "cs", jk, 223, 194, 1], [ie, "cs", Hk, 223, 195, 1], [ie, "cs", Te, 223, 196, 1], [za, "cs", 2, 223, 197, mk], [1, "cs", pq, 223, 199, mk], [1, "cs", 2, 223, 198, Te], [1, "cs", 0, 223, 200, 1], [1, "cs", H, 223, 201, 1], [Te, "cs", Da, 223, 202, 1], [Te, "cs", Hk, 223, 203, Te], [1, "cs", ci, 223, 204, za], [Xn, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, mk], [za, "cs", qo, 223, 208, Xn], [Xn, "cs", 2, 223, 221, Oq], [Oq, "cs", jk, 223, 222, 1], [Te, "cs", 0, 223, 224, Oq], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, za], [Oq, "cs", 0, 223, 234, Te], [1, "cs", 2, 223, 223, 1], [mk, "cs", 2, 224, 223, 1], [1, "cs", xq, 224, 224, Xn], [mk, "cs", xq, 224, 225, Oq], [Te, "cs", za, 223, 226, za], [Oq, "cs", 1, 224, 231, Xn], [za, "cs", 1, 223, 232, ie], [1, "cs", qo, 223, 225, 1], [1, "cs", yr, 224, 226, Te], [Oq, "cs", 3, 223, 227, Te], [Xn, "cs", 3, 224, 227, ie], [mk, "cs", 3, 223, 229, za], [1, "cs", yr, 223, 228, mk], [mk, "cs", yr, 224, 229, 1], [1, "cs", ea, 223, 230, 1], [1, "cs", 3, 223, 231, ie], [ie, "cs", Hk, 224, 232, 1], [1, "cs", nq, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", Hk, 224, 234, za], [1, "cs", 3, 224, 235, Oq], [1, "cs", 3, 223, 235, 1], [za, "cs", Oq, 224, 236, 1], [Oq, "cs", jk, 223, 236, za], [Oq, "cs", jk, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [Te, "cs", ea, 224, 238, za], [za, "cs", 0, 224, 239, 1], [za, "cs", 1, 223, 241, 1], [Te, "cs", 0, 224, 243, Te], [1, "cs", Da, 223, 245, ie], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, Xn], [Oq, "cs", xj, 223, 239, mk], [za, "cs", xq, 224, 240, Xn], [Te, "cs", xq, 224, 241, ie], [1, "cs", jk, 224, 242, Xn], [Xn, "cs", H, 223, 242, za], [mk, "cs", 2, 223, 243, mk], [Oq, "cs", lr, 223, 244, Oq], [1, "cs", 2, 224, 244, za], [1, "cs", 2, 224, 245, Oq], [1, "cs", 2, 224, 246, mk], [ie, "cs", qo, 223, 238, Xn], [1, "cs", 3, 223, 246, za], [1, "cs", 2, 223, 247, Oq], [ie, "cs", Te, 223, 249, Te], [mk, "cs", Oq, 224, 253, Xn], [Te, "cs", Xn, 223, 256, 1], [Te, "cs", 0, 223, 254, Oq], [1, "cs", wj, 224, 250, Oq], [1, "cs", 3, 223, 248, za], [1, "cs", 3, 223, 250, Xn], [1, "cs", 3, 223, 252, za], [ie, "cs", fn, 223, 255, Oq], [Xn, "cs", Hk, 223, 257, 1], [Oq, "cs", 2, 224, 248, ie], [Xn, "cs", xq, 224, 249, 1], [1, "cs", 2, 223, 251, mk], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, Oq], [1, "cs", 2, 223, 253, Xn], [1, "cs", jk, 224, 254, 1], [1, "cs", 2, 224, fa, 1], [1, "cs", 2, 224, Dn, Te], [mk, "cs", H, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [za, "cs", 0, 223, 261, 1], [mk, "cs", In, 224, 263, Oq], [1, "cs", 0, 224, 266, za], [Xn, "cs", 0, 224, 272, 1], [za, "cs", In, 223, 270, Oq], [1, "cs", In, 223, 275, Xn], [Xn, "cs", Te, 223, 259, Oq], [Xn, "cs", 1, 223, 264, 1], [Xn, "cs", 1, 223, 268, Te], [1, "cs", 1, 224, 274, mk], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, mk], [mk, "cs", 2, 223, 265, 1], [Te, "cs", Pn, 223, 267, ie], [Te, "cs", xq, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", ci, 223, 262, ie], [Xn, "cs", Hk, 223, 266, 1], [Xn, "cs", Hk, 223, 269, Oq], [1, "cs", qo, 223, 272, mk], [mk, "cs", Hk, 223, 274, Xn], [1, "cs", I, 224, 275, Oq], [Oq, "cs", 3, 224, 273, Oq], [Oq, "cs", I, 224, 271, Te], [1, "cs", ea, 224, 270, 1], [1, "cs", nq, 224, 269, za], [1, "cs", ea, 224, 268, za], [1, "cs", Hk, 224, 267, ie], [mk, "cs", nq, 224, 265, 1], [za, "cs", I, 224, 264, Xn], [1, "cs", Hk, 224, 262, za], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [za, "cs", nq, 224, 259, ie], [1, "cs", 2, 223, 276, Te], [1, "cs", 1, 224, 276, mk], [Te, "cs", 1, 224, 280, za], [1, "cs", 1, 223, 281, Te], [1, "cs", Oq, 224, 286, za], [1, "cs", 0, 223, 280, mk], [1, "cs", mj, 223, 284, 1], [Xn, "cs", mj, 224, 288, Te], [mk, "cs", 0, 224, 279, Oq], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, Xn], [ie, "cs", jk, 224, 281, 1], [1, "cs", 2, 224, 283, za], [Oq, "cs", xj, 224, 282, 1], [za, "cs", 2, 224, 284, Xn], [1, "cs", 2, 224, 285, Oq], [1, "cs", H, 224, 287, mk], [1, "cs", pq, 223, 287, 1], [Te, "cs", 2, 223, 285, 1], [mk, "cs", 2, 223, 283, 1], [ie, "cs", jk, 223, 279, ie], [Oq, "cs", fn, 223, 278, Oq], [1, "cs", 3, 223, 282, 1], [1, "cs", ci, 223, 286, ie], [mk, "cs", 3, 223, 289, Oq], [1, "cs", Hk, 224, 289, za], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [za, "cs", ie, 223, 290, za], [Te, "cs", ya, 224, 292, 1], [Te, "cs", 0, 223, 294, Xn], [1, "cs", Hi, 224, 297, Te], [1, "cs", 0, 223, 299, Xn], [1, "cs", H, 223, 291, Xn], [1, "cs", xj, 224, 291, Oq], [1, "cs", xq, 223, 292, 1], [Te, "cs", 2, 223, 293, za], [Xn, "cs", pq, 224, 293, 1], [1, "cs", 2, 224, 294, ie], [1, "cs", 1, 224, 295, Oq], [1, "cs", H, 223, 295, 1], [1, "cs", xj, 223, 296, 1], [ie, "cs", xq, 224, 296, Oq], [1, "cs", Pn, 223, 297, ie], [1, "cs", 2, 223, 298, za], [za, "cs", lr, 224, 298, 1], [1, "cs", 2, 224, 299, Oq], [1, "cs", lr, 223, 300, Te], [Te, "cs", mk, 224, 300, za], [1, "cs", 0, 223, 301, ie], [Xn, "cs", Hi, 224, 302, mk], [1, "cs", 0, 224, 304, za], [Oq, "cs", qo, 224, 301, 1], [Oq, "cs", 3, 224, 303, 1], [Te, "cs", Hi, 221, 303, Xn], [1, "cs", 0, 219, 304, Xn], [1, "cs", Oq, 222, 304, 1], [1, "cs", ie, 222, 302, Oq], [Xn, "cs", Pn, 223, 302, za], [1, "cs", 2, 223, 303, mk], [za, "cs", 2, 222, 303, Te], [Xn, "cs", Pn, 223, 304, Oq], [Xn, "cs", pq, 221, 304, mk], [1, "cs", xj, 220, 304, 1], [za, "cs", 2, 220, 303, 1], [Oq, "cs", 2, 220, 302, 1], [mk, "cs", Hj, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", ya, 217, 302, 1], [mk, "cs", 0, 215, 304, za], [ie, "cs", In, 214, 302, Te], [za, "cs", ie, 218, 302, 1], [1, "cs", 1, 217, 304, za], [Oq, "cs", 1, 215, 302, mk], [za, "cs", 2, 219, 302, 1], [mk, "cs", xj, 218, 303, Xn], [Te, "cs", 2, 218, 304, Oq], [1, "cs", 2, 217, 303, Oq], [1, "cs", Hj, 216, 304, Te], [Oq, "cs", Hj, 215, 303, 1], [Te, "cs", xj, 216, 303, 1], [ie, "cs", xj, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [ie, "cs", 2, 214, 304, Oq], [za, "cs", Zj, 212, 302, ie], [ie, "cs", Hi, 210, 303, Oq], [1, "cs", Zj, 212, 304, 1], [1, "cs", Zj, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [Te, "cs", 1, 208, 303, Oq], [1, "cs", jk, 213, 302, 1], [Oq, "cs", lr, 213, 303, Xn], [1, "cs", xj, 213, 304, za], [1, "cs", Hj, 212, 303, ie], [mk, "cs", lr, 211, 304, ie], [1, "cs", 2, 211, 303, za], [ie, "cs", jk, 211, 302, 1], [1, "cs", Hj, 209, 302, 1], [1, "cs", 2, 209, 303, mk], [1, "cs", Hj, 209, 304, za], [mk, "cs", lr, 210, 304, Te], [mk, "cs", 2, 208, 302, ie], [Xn, "cs", 0, 206, 303, mk], [Xn, "cs", In, 203, 304, 1], [1, "cs", Hi, 200, 303, ie], [1, "cs", wj, 199, 304, ie], [1, "cs", Rq, 195, 304, 1], [mk, "cs", ya, 191, 303, 1], [1, "cs", ya, 193, 304, 1], [mk, "cs", In, 189, 304, Te], [Te, "cs", Xn, 204, 303, 1], [1, "cs", Zj, 197, 302, Oq], [Xn, "cs", mj, 202, 302, mk], [Xn, "cs", Hi, 188, 302, mk], [1, "cs", 0, 194, 302, za], [1, "cs", Oq, 197, 303, Te], [1, "cs", mk, 201, 304, 1], [Oq, "cs", 1, 192, 302, Oq], [1, "cs", ie, 189, 303, Oq], [1, "cs", mk, 205, 302, 1], [za, "cs", 1, 188, 304, Oq], [1, "cs", H, 207, 302, ie], [Oq, "cs", 2, 207, 303, Xn], [Oq, "cs", jk, 207, 304, Xn], [mk, "cs", Pn, 206, 304, 1], [1, "cs", H, 206, 302, 1], [1, "cs", jk, 205, 303, Xn], [Xn, "cs", xq, 204, 304, 1], [1, "cs", lr, 205, 304, 1], [Oq, "cs", 2, 204, 302, mk], [1, "cs", 2, 203, 302, Oq], [1, "cs", 2, 203, 303, ie], [1, "cs", H, 202, 303, 1], [Oq, "cs", Pn, 201, 303, Oq], [1, "cs", xj, 201, 302, za], [1, "cs", lr, 200, 302, 1], [ie, "cs", 2, 199, 302, 1], [mk, "cs", 2, 198, 303, 1], [1, "cs", lr, 198, 302, Xn], [Oq, "cs", 2, 199, 303, mk], [1, "cs", xq, 200, 304, Oq], [mk, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", xj, 198, 304, ie], [1, "cs", xj, 196, 304, 1], [za, "cs", H, 196, 303, 1], [Oq, "cs", 2, 196, 302, ie], [Xn, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", jk, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [mk, "cs", H, 193, 303, mk], [ie, "cs", lr, 193, 302, 1], [mk, "cs", jk, 192, 303, 1], [Xn, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, Xn], [za, "cs", Pn, 190, 304, 1], [1, "cs", Hj, 190, 303, Oq], [Xn, "cs", xj, 189, 302, mk], [mk, "cs", 2, 190, 302, za], [za, "cs", 2, 191, 302, ie], [mk, "cs", H, 188, 303, Te], [mk, "cs", 0, 186, 303, ie], [1, "cs", mj, 183, 304, 1], [ie, "cs", 0, 184, 302, Oq], [1, "cs", ya, 181, 302, 1], [ie, "cs", In, 176, 302, 1], [1, "cs", Rq, 178, 303, Te], [1, "cs", 0, 173, 304, Oq], [Xn, "cs", mj, 170, 303, 1], [Oq, "cs", Da, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", za, 178, 304, 1], [1, "cs", Te, 175, 304, Xn], [1, "cs", Te, 173, 302, mk], [1, "cs", Oq, 185, 304, za], [ie, "cs", 1, 169, 304, Xn], [1, "cs", ea, 187, 304, Oq], [1, "cs", 3, 186, 304, za], [Te, "cs", fn, 187, 303, ie], [ie, "cs", fn, 187, 302, Te], [za, "cs", ea, 186, 302, Te], [1, "cs", yr, 185, 302, za], [1, "cs", Hk, 185, 303, mk], [ie, "cs", 3, 184, 303, Xn], [1, "cs", 3, 183, 303, ie], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [za, "cs", 3, 184, 304, 1], [1, "cs", I, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [mk, "cs", I, 179, 304, Te], [ie, "cs", Hk, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, ie], [1, "cs", yr, 179, 303, za], [mk, "cs", 3, 180, 302, Oq], [1, "cs", 3, 179, 302, 1], [1, "cs", I, 178, 302, mk], [ie, "cs", ea, 177, 302, za], [1, "cs", ci, 177, 304, 1], [ie, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, Te], [ie, "cs", 3, 175, 303, 1], [1, "cs", qo, 174, 303, ie], [Te, "cs", 3, 173, 303, mk], [ie, "cs", 3, 172, 303, 1], [ie, "cs", Hk, 171, 303, ie], [Oq, "cs", 3, 170, 304, za], [Oq, "cs", nq, 171, 304, 1], [1, "cs", qo, 172, 304, 1], [1, "cs", 3, 174, 302, Te], [za, "cs", nq, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", qo, 169, 302, Te], [ie, "cs", I, 169, 303, mk], [1, "cs", 0, 168, 302, Oq], [1, "cs", In, 166, 303, za], [1, "cs", Da, 163, 304, 1], [Xn, "cs", ya, 161, 302, 1], [Te, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [mk, "cs", 0, 155, 303, 1], [mk, "cs", za, 164, 303, ie], [1, "cs", Te, 162, 303, 1], [Oq, "cs", 1, 158, 304, Xn], [1, "cs", 1, 156, 302, Te], [1, "cs", mk, 153, 302, 1], [1, "cs", 1, 154, 304, Te], [mk, "cs", 2, 168, 304, Xn], [Xn, "cs", 2, 168, 303, 1], [za, "cs", 2, 167, 303, 1], [Te, "cs", 2, 167, 304, Te], [Te, "cs", Pn, 166, 304, 1], [1, "cs", 2, 165, 304, Te], [1, "cs", xj, 164, 304, Te], [1, "cs", Pn, 165, 303, Te], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, Xn], [ie, "cs", xq, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", H, 163, 302, ie], [1, "cs", Hj, 162, 302, ie], [1, "cs", H, 163, 303, Oq], [ie, "cs", xq, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", Pn, 159, 304, 1], [Te, "cs", pq, 161, 304, Xn], [1, "cs", 2, 161, 303, Te], [1, "cs", 2, 160, 303, 1], [Te, "cs", H, 160, 302, Oq], [1, "cs", 2, 158, 302, 1], [ie, "cs", pq, 159, 302, 1], [Te, "cs", xj, 157, 302, ie], [1, "cs", 2, 156, 303, 1], [za, "cs", 2, 157, 303, 1], [Oq, "cs", 2, 158, 303, 1], [za, "cs", 2, 157, 304, mk], [1, "cs", 2, 156, 304, 1], [mk, "cs", Hj, 155, 304, za], [1, "cs", 2, 153, 304, 1], [za, "cs", 2, 153, 303, 1], [ie, "cs", 2, 154, 303, ie], [1, "cs", 2, 154, 302, 1], [mk, "cs", 2, 155, 302, Oq], [mk, "cs", jk, 152, 303, 1], [1, "cs", lr, 152, 302, Oq], [ie, "cs", In, 151, 302, 1], [1, "cs", Hi, 149, 303, mk], [Oq, "cs", ya, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [mk, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", Oq, 147, 304, Oq], [1, "cs", Te, 145, 302, 1], [Te, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, Te], [Oq, "cs", 2, 151, 304, 1], [1, "cs", xq, 151, 303, 1], [1, "cs", jk, 150, 303, Te], [za, "cs", 2, 150, 302, za], [Te, "cs", 2, 148, 302, mk], [1, "cs", xj, 146, 302, 1], [ie, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", xq, 142, 304, 1], [1, "cs", 2, 142, 303, mk], [1, "cs", 2, 143, 304, Te], [1, "cs", 2, 144, 304, Xn], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [ie, "cs", 2, 148, 303, Te], [1, "cs", jk, 146, 303, za], [1, "cs", 2, 145, 303, Oq], [1, "cs", pq, 147, 303, 1], [1, "cs", Pn, 146, 304, Te], [Oq, "cs", jk, 149, 304, Oq], [1, "cs", ci, 149, 302, 1], [1, "cs", Hk, 143, 302, 1], [Oq, "cs", Da, 139, 304, 1], [1, "cs", 0, 138, 302, mk], [Xn, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, Te], [1, "cs", Hj, 140, 303, 1], [Te, "cs", 2, 139, 303, Oq], [1, "cs", xq, 138, 303, 1], [1, "cs", H, 138, 304, Te], [ie, "cs", 2, 140, 304, Te], [ie, "cs", 0, 137, 304, 1], [mk, "cs", In, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", mk, 135, 304, Te], [ie, "cs", Oq, 136, 302, 1], [za, "cs", 2, 137, 302, Oq], [Xn, "cs", H, 136, 303, Xn], [ie, "cs", 2, 137, 303, 1], [1, "cs", lr, 136, 304, Oq], [Te, "cs", 2, 134, 304, Oq], [1, "cs", 2, 134, 303, Oq], [1, "cs", pq, 133, 303, 1], [1, "cs", 2, 132, 304, Oq], [1, "cs", 0, 131, 302, 1], [mk, "cs", 0, 134, 302, 1], [1, "cs", ya, 129, 304, 1], [1, "cs", mk, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", Pn, 135, 302, Te], [ie, "cs", 2, 133, 302, Xn], [1, "cs", lr, 132, 303, Xn], [za, "cs", 2, 131, 303, 1], [1, "cs", pq, 130, 304, 1], [1, "cs", Hj, 131, 304, 1], [mk, "cs", 2, 128, 304, 1], [1, "cs", Hj, 129, 303, ie], [1, "cs", 2, 130, 302, 1], [za, "cs", 3, 127, 304, Te], [1, "cs", pq, 132, 301, Oq], [1, "cs", Hj, 133, 301, Xn], [Xn, "cs", xq, 134, 301, 1], [1, "cs", Hj, 135, 301, 1], [1, "cs", 3, 131, 301, Xn], [1, "cs", Hk, 136, 301, 1], [1, "cs", 3, 136, 178, ie], [mk, "cs", 0, 136, 183, 1], [Xn, "cs", 2, 136, 182, mk], [1, "cs", 1, 136, 181, Te], [1, "cs", 0, 136, 179, Te], [Oq, "cs", 3, 136, 180, ie], [Oq, "cs", 2, 135, 183, Oq], [za, "cs", 1, 135, 182, 1], [za, "cs", 3, 135, 180, 1], [1, "cs", wj, 134, 183, ie], [1, "cs", 2, 133, 183, Xn], [Oq, "cs", qo, 133, 182, mk], [1, "cs", Oq, 132, 183, 1], [mk, "cs", 3, 131, 183, Te], [Te, "cs", 2, 135, 181, 1], [Xn, "cs", 2, 134, 182, 1], [mk, "cs", ci, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [ie, "fod", 0, 204, 301, mj], [1, "fod", za, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", Oq, 190, 288, 0], [1, "fod", 1, 189, 296, Hi], [1, "fod", Te, 193, 293, 0], [1, "fod", ie, 183, 292, 0], [1, "fod", Xn, 186, 287, mj], [za, "fod", za, 190, 290, 0], [1, "fod", ie, 218, 271, ya], [1, "fod", za, 220, 266, Rq], [1, "fod", mk, 211, 268, 0], [1, "fod", Oq, 210, 274, wj], [1, "fod", mk, 205, 263, 0], [1, "fod", ie, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, wj], [1, "fod", 2, 188, 299, 0], [za, "fod", 2, 186, 297, Zj], [1, "fod", 2, 188, 296, 0], [mk, "fod", H, 189, 291, 0], [za, "fod", H, 189, 286, mj], [Te, "fod", 2, 191, 286, 0], [1, "fod", pq, 197, 286, 0], [1, "fod", Hj, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [za, "fod", 2, 183, 293, 0], [ie, "fod", pq, 198, 286, ya], [Oq, "fod", 2, 196, 283, wj], [1, "fod", Hj, 196, 281, 0], [ie, "fod", pq, 201, 280, Hi], [1, "fod", jk, 205, 287, 0], [Xn, "fod", jk, 209, 283, Zj], [Te, "fod", 2, 212, 280, Zj], [1, "fod", 2, 209, 277, 0], [ie, "fod", pq, 217, 278, mj], [1, "fod", 2, 219, 275, Hi], [Oq, "fod", H, 220, 271, 0], [za, "fod", xj, 220, 267, 0], [1, "fod", xj, 217, 265, Hi], [Xn, "fod", 2, 213, 267, 0], [Te, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [Xn, "fod", xj, 204, 270, Da], [1, "fod", jk, 196, 267, 0], [mk, "fod", pq, 214, 261, 0], [Oq, "fod", lr, 211, 260, 0], [mk, "fod", Pn, 218, 256, 0], [1, "fod", H, 219, 262, 0], [za, "fod", xj, 220, 253, 0], [za, "fod", jk, 211, 257, ya], [Te, "la", yr, 198, 27, za], [1, "la", qo, 201, 30, Te], [Xn, "la", ea, 200, 32, mk], [ie, "la", qo, 198, 33, ie], [Xn, "la", I, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, Te], [1, "la", 0, 200, 28, Xn], [1, "la", wj, 193, 30, Xn], [za, "la", Hk, 196, 27, ie], [1, "la", qo, 199, 30, 1], [za, "la", 3, 197, 29, Oq], [1, "la", 3, 195, 30, mk], [1, "la", 3, 197, 31, mk], [1, "la", H, 201, 33, za], [1, "la", Vn, 202, 34, ie], [1, "la", 4, 202, 35, Te], [Oq, "la", ba, 203, 36, 1], [mk, "la", $i, 204, 37, 1], [1, "la", xq, 205, 38, 1], [1, "la", z, 205, 39, 1], [1, "la", 5, 205, 40, mk], [mk, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, Xn], [1, "la", 1, 205, 41, 1], [za, "la", nj, 208, 43, 1], [1, "la", $i, 209, 43, Oq], [Te, "la", 1, 210, 43, Xn], [za, "la", 2, 211, 43, 1], [1, "la", nr, 212, 43, ie], [mk, "la", Vn, 213, 44, Xn], [ie, "la", 3, 223, 54, 1], [za, "la", nq, 221, 53, 1], [mk, "la", 3, 219, 53, 1], [za, "la", 4, 218, 52, 1], [Te, "la", Gi, 217, 51, Xn], [1, "la", 4, 216, 51, ie], [Xn, "la", za, 215, 50, Oq], [Xn, "la", Vn, 212, 46, za], [mk, "la", 1, 210, 44, 1], [Xn, "la", ci, 206, 50, ie], [Te, "re", Da, 217, 24, Te], [za, "re", 0, 207, 16, 1], [Oq, "de", 44, 54, 14, ya], [Te, "de", 44, 53, 13, Da], [1, "de", 44, 51, Fo, Zj], [Xn, "de", 44, 49, Z, 0], [Xn, "de", 44, 48, Sq, Zj], [Xn, "de", 21, 78, 293, Zj], [1, "cs", 0, 221, 8, ie], [1, "cs", In, 224, Qj, Te], [Te, "cs", Oq, 223, Bi, 1], [Xn, "cs", Pn, 224, 8, 1], [1, "cs", H, 222, 8, Te], [1, "cs", 0, 224, Na, ie], [Oq, "cs", 0, 222, 5, 1], [Xn, "cs", 0, 219, wk, 1], [Te, "cs", 1, 220, Eq, 1], [1, "cs", ie, 217, 7, Te], [za, "cs", 2, 224, 5, Xn], [1, "cs", xj, 223, M, 1], [za, "cs", 2, 224, 7, Oq], [Te, "cs", 2, 223, 7, Xn], [Oq, "cs", Hj, 223, 6, ie], [za, "cs", 2, 222, 6, 1], [mk, "cs", 2, 222, Ar, Te], [Te, "cs", Pn, 221, 7, Xn], [mk, "cs", Hj, 221, Bq, za], [Te, "cs", 2, 221, 5, za], [1, "cs", 2, 220, 6, 1], [Xn, "cs", jk, 220, Ar, Oq], [ie, "cs", 2, 220, 8, Oq], [Oq, "cs", 2, 219, 8, ie], [Te, "cs", 2, 219, Ro, ie], [ie, "cs", 2, 219, 5, 1], [za, "cs", Hi, 218, nr, za], [1, "cs", mj, 216, 8, 1], [Oq, "cs", Pn, 218, 8, 1], [za, "cs", lr, 217, 8, 1], [1, "cs", jk, 218, 7, 1], [za, "cs", 2, 218, 6, Te], [1, "cs", Hj, 217, 6, mk], [1, "cs", 2, 217, 5, 1], [mk, "cs", 1, 215, 6, za], [1, "cs", 1, 213, 5, za], [Oq, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, Oj, 1], [1, "cs", 0, 213, 8, Te], [1, "cs", Hi, 211, Ar, 1], [ie, "cs", 0, 209, Eq, Oq], [Oq, "cs", 0, 208, Ni, mk], [1, "cs", ya, 207, aa, Te], [1, "cs", pq, 216, 6, 1], [1, "cs", 2, 216, Ar, Te], [1, "cs", 2, 215, 7, mk], [1, "cs", lr, 215, Bi, 1], [1, "cs", 2, 214, Bi, 1], [ie, "cs", Hj, 214, 7, ie], [1, "cs", jk, 215, 5, 1], [za, "cs", 2, 214, Eq, Te], [Te, "cs", 2, 213, 6, 1], [Xn, "cs", 2, 213, ia, Xn], [1, "cs", 2, 212, $k, ie], [za, "cs", 1, 211, 5, Oq], [1, "cs", za, 209, 8, ie], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, E, 1], [1, "cs", xj, 210, zj, 1], [1, "cs", 2, 209, $n, Oq], [1, "cs", 2, 210, ia, Xn], [Oq, "cs", 2, 210, qq, Oq], [za, "cs", pq, 212, Qa, mk], [1, "cs", 2, 212, 5, 1], [Xn, "cs", 2, 211, ji, Te], [1, "cs", 2, 210, 5, Te], [Xn, "cs", xj, 209, 6, za], [1, "cs", 2, 208, 6, 1], [Xn, "cs", 2, 208, ta, Te], [1, "cs", 2, 207, 7, 1], [1, "cs", pq, 207, ji, mk], [1, "cs", 2, 207, 5, ie], [Oq, "cs", 2, 206, Eq, Xn], [ie, "cs", 2, 208, aa, 1], [mk, "cs", 2, 206, 6, 1], [Oq, "cs", 0, 204, zj, Xn], [1, "cs", Zj, 205, 6, 1], [1, "cs", ya, 203, z, 1], [1, "cs", Zj, 202, 7, 1], [Te, "cs", 0, 199, E, Te], [Oq, "cs", 0, 200, 6, 1], [1, "cs", In, 197, 6, Te], [Oq, "cs", mj, 195, 8, 1], [1, "cs", wj, 194, 6, mk], [Te, "cs", 1, 202, 8, 1], [Xn, "cs", 1, 206, wk, Te], [1, "cs", 1, 201, 5, 1], [1, "cs", Xn, 197, 8, 1], [ie, "cs", ie, 192, 7, ie], [1, "cs", Te, 195, 5, 1], [1, "cs", Hj, 205, ur, 1], [1, "cs", Pn, 205, Hr, Oq], [1, "cs", H, 206, Bi, 1], [Oq, "cs", xj, 204, N, 1], [1, "cs", xj, 204, 6, 1], [Oq, "cs", pq, 204, 5, Oq], [Xn, "cs", 2, 205, 5, 1], [za, "cs", Pn, 203, Qa, Xn], [1, "cs", 2, 203, ia, za], [za, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [Xn, "cs", H, 200, Iq, Xn], [1, "cs", 2, 200, 7, 1], [1, "cs", xj, 201, N, 1], [1, "cs", 2, 201, 6, 1], [Te, "cs", 2, 202, Oj, 1], [Oq, "cs", H, 202, Qa, 1], [1, "cs", 2, 200, 5, ie], [ie, "cs", 2, 199, Fk, 1], [Oq, "cs", 2, 197, M, mk], [mk, "cs", 2, 196, 5, 1], [ie, "cs", xq, 198, 5, Oq], [mk, "cs", 2, 198, ji, 1], [Te, "cs", Pn, 199, 6, Te], [za, "cs", H, 199, $k, 1], [1, "cs", H, 198, 7, za], [za, "cs", 2, 198, 8, Oq], [1, "cs", pq, 197, ia, ie], [Te, "cs", 2, 196, 7, 1], [Te, "cs", 2, 196, Bi, 1], [Xn, "cs", pq, 196, ji, Te], [za, "cs", H, 195, Xk, 1], [1, "cs", 2, 195, Ni, 1], [1, "cs", pq, 194, N, za], [mk, "cs", 2, 193, Bi, 1], [1, "cs", Pn, 194, 8, mk], [za, "cs", H, 193, 7, mk], [Xn, "cs", xq, 193, 6, 1], [1, "cs", 2, 193, 5, mk], [1, "cs", 2, 194, 5, Xn], [1, "cs", 0, 192, Eq, ie], [1, "cs", 0, 191, 8, 1], [Xn, "cs", 0, 190, 6, ie], [1, "cs", 0, 188, ur, 1], [Te, "cs", Rq, 186, Iq, 1], [1, "cs", 0, 186, ta, Te], [1, "cs", Zj, 184, 7, Oq], [1, "cs", Da, 182, Hr, 1], [1, "cs", 0, 181, Ya, Te], [1, "cs", Te, 189, He, Xn], [1, "cs", 1, 183, E, Oq], [mk, "cs", 1, 188, 5, 1], [1, "cs", mk, 185, 6, 1], [Xn, "cs", Xn, 180, $k, 1], [Te, "cs", 1, 183, 5, za], [ie, "cs", mk, 178, 8, 1], [Oq, "cs", za, 177, Qa, 1], [1, "cs", za, 173, $n, 1], [ie, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, za], [ie, "cs", 0, 179, 5, 1], [Xn, "cs", Zj, 174, ta, ie], [1, "cs", mj, 176, Fk, Xn], [1, "cs", 0, 172, E, Te], [Xn, "cs", 0, 170, Gk, 1], [ie, "cs", mj, 169, qq, Xn], [Xn, "cs", 2, 192, 6, mk], [ie, "cs", pq, 192, Bi, 1], [mk, "cs", 2, 191, wk, Xn], [za, "cs", jk, 191, 6, 1], [ie, "cs", xq, 191, Eq, 1], [Oq, "cs", 2, 190, 5, 1], [Te, "cs", lr, 189, 5, 1], [1, "cs", 2, 189, Na, Xn], [1, "cs", 2, 189, Aq, 1], [Oq, "cs", 2, 190, 7, 1], [Te, "cs", xq, 190, 8, 1], [1, "cs", lr, 188, 8, ie], [Xn, "cs", xj, 187, 8, za], [1, "cs", 2, 187, Ni, Oq], [1, "cs", lr, 187, Na, Oq], [1, "cs", H, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", lr, 186, Qa, mk], [1, "cs", 2, 186, $n, Oq], [za, "cs", 2, 185, 7, 1], [1, "cs", Hj, 185, On, Oq], [mk, "cs", lr, 184, 8, 1], [mk, "cs", 2, 183, 7, za], [1, "cs", Hj, 183, U, Te], [Xn, "cs", 2, 184, Ro, 1], [ie, "cs", Hj, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, U, 1], [Oq, "cs", H, 182, Ni, Te], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, E, 1], [1, "cs", Pn, 180, 8, Oq], [ie, "cs", 2, 179, 8, 1], [Oq, "cs", 2, 182, ta, 1], [Te, "cs", xj, 181, M, Xn], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", jk, 179, va, 1], [1, "cs", Hj, 179, 7, Te], [1, "cs", 2, 178, cq, Oq], [1, "cs", 2, 178, 6, 1], [1, "cs", xq, 178, q, ie], [1, "cs", Pn, 177, 5, za], [1, "cs", lr, 177, N, mk], [1, "cs", pq, 176, $n, 1], [Te, "cs", 2, 176, Na, 1], [1, "cs", 2, 175, 6, 1], [Te, "cs", 2, 175, Fk, Te], [1, "cs", Hj, 176, 8, ie], [za, "cs", pq, 174, 8, 1], [1, "cs", 2, 175, Hr, 1], [Te, "cs", xq, 173, 8, Te], [1, "cs", jk, 174, 7, 1], [Te, "cs", 2, 173, 6, za], [1, "cs", 2, 174, 6, mk], [1, "cs", 2, 172, 5, 1], [1, "cs", xj, 173, 5, 1], [mk, "cs", 2, 172, 6, 1], [Oq, "cs", H, 172, 7, Xn], [ie, "cs", 2, 171, 8, Oq], [1, "cs", 2, 170, 7, za], [1, "cs", 2, 170, 6, 1], [Xn, "cs", 2, 170, kq, mk], [mk, "cs", jk, 171, nr, ie], [ie, "cs", 2, 171, Na, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", H, 169, Aq, 1], [1, "cs", 2, 169, 8, Oq], [1, "cs", 1, 168, 7, Oq], [Te, "cs", Te, 166, 5, ie], [1, "cs", Xn, 164, $n, ie], [1, "cs", za, 160, 7, 1], [1, "cs", 1, 156, He, Te], [1, "cs", 0, 166, Hr, Oq], [1, "cs", 0, 168, Fk, Te], [mk, "cs", ya, 164, 6, 1], [Te, "cs", ya, 162, Ar, mk], [Te, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, Ck, Oq], [Te, "cs", 0, 161, 5, 1], [mk, "cs", In, 159, 5, Te], [Xn, "cs", 0, 155, $k, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, Ni, za], [1, "cs", Xn, 153, Bi, 1], [Xn, "cs", 1, 151, 5, Xn], [1, "cs", pq, 168, 6, 1], [Te, "cs", Hj, 168, 8, 1], [Oq, "cs", lr, 167, 8, Te], [1, "cs", lr, 167, Aq, 1], [Oq, "cs", xq, 167, 6, za], [1, "cs", xq, 167, 5, Oq], [1, "cs", 2, 166, 6, Oq], [Xn, "cs", 2, 166, 7, Te], [1, "cs", 2, 165, 7, mk], [Te, "cs", xq, 165, Xk, za], [1, "cs", jk, 165, M, 1], [ie, "cs", 2, 164, 5, ie], [mk, "cs", 2, 163, q, 1], [Xn, "cs", lr, 162, 5, mk], [1, "cs", 2, 162, ji, 1], [ie, "cs", 2, 163, 6, Oq], [1, "cs", 2, 163, 7, Xn], [1, "cs", H, 163, 8, za], [mk, "cs", 2, 164, He, 1], [1, "cs", 2, 165, zj, 1], [1, "cs", xq, 161, 8, 1], [Oq, "cs", 2, 162, 8, Oq], [1, "cs", H, 160, zj, Te], [ie, "cs", H, 159, zj, ie], [Oq, "cs", H, 159, 7, za], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, Oq], [1, "cs", H, 160, 6, mk], [1, "cs", jk, 161, 6, 1], [za, "cs", 2, 161, $n, 1], [1, "cs", jk, 157, 7, 1], [1, "cs", jk, 158, 7, 1], [ie, "cs", Hj, 158, va, ie], [Te, "cs", 2, 158, nr, ie], [1, "cs", 2, 155, M, 1], [1, "cs", 2, 155, Xk, 1], [Oq, "cs", xj, 156, Bq, 1], [1, "cs", 2, 156, $k, ie], [Xn, "cs", 2, 157, qk, 1], [1, "cs", lr, 155, 8, 1], [1, "cs", Hj, 154, _a, ie], [1, "cs", pq, 154, N, 1], [1, "cs", 2, 154, 6, 1], [ie, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, ie], [1, "cs", xj, 153, U, 1], [1, "cs", xq, 153, z, Xn], [ie, "cs", lr, 152, 5, 1], [Oq, "cs", 2, 152, 6, Xn], [mk, "cs", xj, 152, 7, 1], [1, "cs", 2, 151, Ck, Oq], [mk, "cs", xj, 157, 5, 1], [1, "cs", 1, 156, ta, 1], [mk, "cs", mj, 150, 5, 1], [1, "cs", 0, 149, N, 1], [1, "cs", 0, 147, 8, Te], [ie, "cs", wj, 146, q, Xn], [1, "cs", ya, 144, Aq, za], [1, "cs", Da, 142, 5, Xn], [Te, "cs", 1, 147, va, mk], [1, "cs", ie, 145, 8, 1], [1, "cs", 1, 144, 5, Xn], [1, "cs", 2, 148, Fk, mk], [Oq, "cs", 2, 149, z, Te], [1, "cs", jk, 150, Na, 1], [1, "cs", lr, 150, 8, Oq], [1, "cs", jk, 151, 8, ie], [Oq, "cs", jk, 150, ur, 1], [Xn, "cs", 2, 149, br, mk], [za, "cs", 2, 148, He, za], [za, "cs", 2, 149, 6, 1], [Te, "cs", Hj, 148, 6, 1], [Te, "cs", 2, 148, 7, 1], [ie, "cs", Pn, 147, Ar, Oq], [1, "cs", 2, 147, 5, 1], [1, "cs", xj, 146, 6, 1], [1, "cs", 2, 146, ia, 1], [Te, "cs", H, 146, 8, Oq], [1, "cs", 2, 145, wk, Xn], [1, "cs", 2, 145, Ro, 1], [1, "cs", 2, 145, M, 1], [mk, "cs", 2, 144, 6, 1], [za, "cs", H, 143, 5, Xn], [za, "cs", 2, 143, va, Te], [ie, "cs", lr, 142, U, 1], [za, "cs", 2, 141, 5, za], [Xn, "cs", Hj, 224, 10, 1], [1, "cs", mj, 224, ra, 1], [Xn, "cs", Hi, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", Da, 224, Jj, 1], [1, "cs", 0, 224, 22, 1], [ie, "cs", ya, 224, 24, 1], [Oq, "cs", 0, 224, 29, 1], [Xn, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, Te], [za, "cs", Da, 224, 38, Oq], [1, "cs", 1, 224, 14, ie], [mk, "cs", 1, 224, 20, 1], [Xn, "cs", ie, 224, 27, 1], [Xn, "cs", mk, 224, 31, 1], [1, "cs", Oq, 224, 36, 1], [za, "cs", 2, 224, La, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [ie, "cs", 2, 224, W, za], [1, "cs", xj, 224, 21, ie], [za, "cs", pq, 224, 23, Xn], [Oq, "cs", lr, 224, 25, mk], [za, "cs", 2, 224, 26, Xn], [1, "cs", Pn, 224, 28, 1], [1, "cs", Pn, 224, 30, 1], [1, "cs", 2, 224, 32, za], [1, "cs", Pn, 224, 34, Xn], [1, "cs", 2, 224, 37, 1], [mk, "cs", 2, 224, 39, Oq], [1, "cs", 0, 224, 41, Oq], [Xn, "cs", Da, 224, 44, 1], [1, "cs", Hi, 224, 46, mk], [1, "cs", 0, 224, 52, 1], [Te, "cs", Hi, 224, 57, 1], [1, "cs", 1, 224, 47, Te], [1, "cs", lr, 224, 40, 1], [1, "cs", pq, 224, 42, 1], [1, "cs", 2, 224, 43, Te], [1, "cs", xj, 224, 45, Xn], [mk, "cs", 2, 224, 49, 1], [Te, "cs", Xn, 224, 50, Oq], [ie, "cs", pq, 224, 51, 1], [za, "la", I, 224, 54, 1], [Xn, "cs", jk, 224, 56, Xn], [mk, "cs", H, 224, 58, 1], [za, "cs", 2, 224, 61, 1], [Oq, "cs", Hi, 224, 60, 1], [Te, "cs", Da, 224, 64, Te], [Te, "cs", 0, 224, 66, 1], [1, "cs", ya, 224, 70, Xn], [1, "cs", In, 224, 74, 1], [1, "cs", 0, 224, 77, Xn], [Te, "cs", 1, 224, 62, mk], [Te, "cs", 1, 224, 68, 1], [mk, "cs", 1, 224, 72, 1], [1, "cs", Te, 224, 76, 1], [1, "cs", Oq, 224, 80, 1], [za, "cs", mk, 224, 83, Oq], [1, "cs", 1, 224, 91, 1], [za, "cs", 1, 224, 95, 1], [Xn, "cs", 1, 224, 97, 1], [mk, "cs", In, 224, 85, 1], [Oq, "cs", In, 224, 88, 1], [1, "cs", Da, 224, 93, Oq], [Xn, "cs", 0, 224, 98, Xn], [Xn, "cs", 2, 224, 59, ie], [mk, "cs", H, 224, 63, ie], [Oq, "cs", 2, 224, 65, 1], [Xn, "cs", jk, 224, 67, Xn], [Oq, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, Oq], [ie, "cs", lr, 224, 73, Oq], [1, "cs", jk, 224, 75, ie], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, ie], [1, "cs", xq, 224, 81, 1], [Te, "cs", xq, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, mk], [1, "cs", 2, 224, 87, Xn], [1, "cs", 2, 224, 89, 1], [za, "cs", xq, 224, 90, ie], [1, "cs", Pn, 224, 92, Te], [1, "cs", 2, 224, 94, ie], [Oq, "cs", 2, 224, 96, Te], [Te, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [mk, "cs", Rq, 224, 101, mk], [ie, "cs", za, 224, 103, 1], [ie, "cs", 2, 224, 102, 1], [1, "cs", Da, 222, 10, 1], [Te, "cs", xq, 223, w, 1], [1, "cs", 2, 222, 9, 1], [Xn, "cs", 2, 221, 9, Xn], [Oq, "cs", Hj, 223, 10, 1], [za, "cs", pq, 223, 11, Xn], [1, "cs", 2, 223, 12, ie], [1, "cs", 3, 223, 13, 1], [1, "cs", Hk, 222, 11, 1], [1, "cs", 3, 220, Qj, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, te, ie], [1, "re", lr, 219, 13, 1], [Oq, "re", ie, 218, Vj, 1], [Xn, "re", 1, 214, Zn, 1], [1, "cs", 0, 221, Ok, 1], [1, "cs", 1, 223, hr, mk], [mk, "cs", lr, 222, 19, mk], [1, "cs", 2, 223, 19, Te], [za, "cs", xq, 223, vi, mk], [1, "cs", xj, 222, 20, mk], [1, "cs", lr, 220, 21, ie], [mk, "cs", Rq, 219, 21, 1], [za, "cs", qo, 221, 21, 1], [ie, "cs", nq, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [Xn, "cs", 3, 220, 22, 1], [Te, "cs", 3, 219, 22, Oq], [1, "cs", Hk, 221, 22, 1], [Xn, "cs", 0, 211, 9, 1], [1, "cs", Oq, 211, 10, 1], [mk, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, Oq], [1, "cs", Pn, 210, 9, za], [1, "cs", 2, 210, Zk, 1], [mk, "cs", 2, 210, tk, ie], [Oq, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, Vi, Te], [1, "cs", pq, 211, 12, mk], [1, "cs", Pn, 211, ra, Te], [ie, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, sj, 1], [Te, "cs", lr, 210, 14, 1], [Xn, "cs", 3, 211, 15, 1], [Te, "cs", yr, 213, 9, 1], [Oq, "cs", ea, 212, vr, Te], [Te, "cs", qo, 223, 21, Xn], [Te, "cs", I, 209, R, Oq], [Oq, "la", 3, 223, 22, Te], [Te, "la", Hk, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", fn, 209, 10, Te], [1, "la", 0, 209, 12, ie], [Te, "la", Fr, 209, 14, 1], [Oq, "la", 4, 219, 23, za], [1, "la", Hk, 210, 15, za], [1, "la", Hk, 217, 22, 1], [ie, "la", 4, 212, 16, Te], [Xn, "la", pq, 214, 19, 1], [1, "la", 4, 213, vi, 1], [Te, "la", Te, 212, 21, Te], [Te, "la", 4, 215, V, 1], [1, "la", jk, 216, 17, za], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, zi, 1], [Xn, "la", 1, 217, 16, 1], [1, "la", 2, 218, G, 1], [za, "la", 2, 216, 14, 1], [mk, "la", H, 219, 16, 1], [1, "la", q, 220, 16, 1], [Xn, "la", z, 216, Z, 1], [za, "la", Vn, 217, 15, ie], [Xn, "cs", Da, 211, 44, 1], [Xn, "cs", 1, 212, 45, 1], [1, "cs", pq, 213, 45, Oq], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, za], [Xn, "cs", 3, 213, 46, 1], [Xn, "cs", 3, 214, 47, mk], [za, "cs", 3, 214, 48, Te], [ie, "cs", qo, 216, 46, Oq], [mk, "cs", Rq, 208, qi, Te], [1, "cs", Hi, 210, 21, Te], [Te, "cs", 0, 212, 23, 1], [Oq, "cs", 0, 213, 25, 1], [ie, "cs", 2, 213, 24, za], [Te, "cs", 2, 211, 22, Oq], [za, "cs", 2, 210, hn, mk], [Xn, "cs", 2, 209, 21, Xn], [Te, "cs", Pn, 209, Xa, 1], [Te, "cs", 2, 211, 21, Te], [ie, "cs", 2, 212, 22, 1], [1, "cs", Hj, 213, 23, Xn], [Te, "cs", Hk, 213, 26, 1], [1, "cs", 3, 207, Ok, 1], [Xn, "la", $i, 192, 33, Te], [1, "la", Mq, 191, 34, 1], [1, "la", 4, 190, 35, za], [1, "la", fn, 189, 37, Oq], [mk, "la", yr, 188, 39, 1], [1, "la", $i, 186, 40, Te], [Xn, "la", 4, 185, 39, ie], [1, "la", Vn, 184, 39, 1], [1, "la", lr, 183, 39, 1], [ie, "la", Te, 182, 40, za], [1, "la", 2, 181, 41, 1], [Te, "la", 5, 180, 41, 1], [1, "la", Eq, 179, 41, 1], [Oq, "la", 4, 192, 28, 1], [za, "la", Fr, 191, 28, Te], [Xn, "la", 4, 190, 27, Xn], [1, "la", yr, 188, 27, 1], [1, "la", 4, 187, 26, ie], [1, "la", 4, 186, 25, Te], [1, "la", 4, 185, 25, za], [Xn, "la", Vn, 184, 24, 1], [Te, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", Oq, 183, Xa, 1], [1, "la", 5, 182, 20, ie], [1, "la", 2, 181, 20, Xn], [1, "la", nr, 180, 20, Xn], [Xn, "la", lr, 179, Ok, Te], [1, "la", 4, 178, 19, 1], [Oq, "la", 3, 178, 17, Xn], [1, "la", 3, 176, 18, Te], [Oq, "cs", 0, 177, zi, 1], [1, "cs", 0, 175, 17, 1], [Te, "cs", 0, 180, G, 1], [1, "cs", 0, 174, 19, Xn], [Oq, "cs", Da, 172, 20, za], [za, "cs", 1, 175, Ga, za], [ie, "cs", mk, 172, V, 1], [Xn, "cs", 1, 181, sj, za], [1, "cs", 2, 179, _o, Xn], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, Pa, 1], [Xn, "cs", 2, 174, 18, 1], [ie, "cs", 2, 173, bq, 1], [1, "cs", xq, 172, Be, 1], [1, "cs", 2, 173, Vq, za], [ie, "cs", 2, 173, 17, za], [mk, "cs", 2, 174, Rk, 1], [1, "cs", 2, 174, Mn, 1], [Te, "cs", 2, 175, Yk, mk], [za, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [Xn, "cs", lr, 178, G, Xn], [1, "cs", jk, 179, G, Xn], [1, "cs", xj, 180, 15, mk], [mk, "cs", pq, 181, 16, Xn], [1, "cs", fn, 182, Pa, Te], [1, "cs", qo, 172, 21, 1], [za, "la", za, 175, 19, 1], [1, "la", jk, 174, 20, Xn], [1, "la", 2, 173, vi, 1], [1, "la", 1, 180, Un, Xn], [za, "la", xj, 181, qa, 1], [1, "la", qo, 191, wq, ie], [1, "s", Zj, 217, 30, 1], [mk, "s", Da, 208, 35, 1], [Te, "s", Da, 204, 24, 1], [1, "s", mk, 218, 32, 1], [Oq, "s", za, 207, 34, Xn], [Xn, "s", 1, 202, 23, za], [Xn, "s", ie, 195, 16, 1], [1, "s", Pn, 222, 28, za], [1, "s", Hj, 212, 38, Oq], [Oq, "s", H, 207, 23, za], [1, "s", xq, 202, Uk, Te], [Oq, "s", H, 195, io, za], [1, "s", 1, 191, 12, 1], [Xn, "s", 0, 187, 16, Xn], [mk, "s", Hj, 188, 16, 1], [Oq, "s", 1, 186, 14, 1], [Te, "s", Oq, 201, sr, 1], [1, "g", 1, 216, 31, 1], [1, "g", Hi, 200, eo, Te], [1, "g", ya, 202, 40, mk], [1, "g", 0, 189, 32, Oq], [Oq, "g", In, 204, 28, ie], [1, "g", Rq, 196, 24, ie], [1, "g", lr, 198, 37, 1], [za, "s", 0, 193, 39, 1], [Te, "s", ya, 201, 45, 1], [mk, "a", Rq, 210, 29, 1], [za, "a", Da, 200, 20, za], [1, "cs", 0, 200, 34, Oq], [1, "cs", ya, 193, 27, 1], [ie, "cs", Xn, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [za, "cs", xj, 202, 32, 1], [ie, "cs", 2, 194, 26, 1], [Oq, "cs", Hj, 192, 27, 1], [1, "cs", 2, 192, 32, Xn], [1, "cs", jk, 203, 31, 1], [Oq, "cs", 2, 202, 31, Te], [Xn, "cs", 2, 202, 30, Oq], [1, "cs", 3, 202, 29, 1], [1, "cs", ci, 201, 32, 1], [1, "cs", qo, 199, 35, 1], [Xn, "cs", 0, 193, 34, 1], [1, "cs", H, 194, 34, 1], [mk, "cs", jk, 198, 35, Oq], [1, "cs", 3, 199, 34, 1], [1, "cs", ci, 191, 29, 1], [1, "cs", Da, 191, 30, Oq], [Oq, "cs", 3, 190, 29, za], [1, "la", 3, 180, 69, 1], [ie, "la", 3, 182, 68, Xn], [ie, "la", 3, 184, 68, Xn], [Te, "la", ci, 186, 70, 1], [mk, "la", 3, 184, 72, Te], [1, "la", 3, 182, 72, 1], [Te, "la", qo, 180, 71, ie], [1, "cs", Hi, 186, 68, 1], [1, "cs", Da, 187, 70, ie], [ie, "cs", Rq, 183, 74, Oq], [Te, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, mk], [1, "cs", Pn, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", Pn, 180, 74, 1], [za, "cs", 2, 181, 74, ie], [Te, "la", mj, 184, 70, 1], [Xn, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [za, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, za], [mk, "la", $i, 187, 69, za], [ie, "la", Te, 188, 68, 1], [1, "la", 4, 189, 68, 1], [za, "la", 2, 190, 68, Oq], [1, "la", 1, 191, 68, Xn], [ie, "la", 4, 192, 68, Te], [1, "la", jk, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", Pn, 194, 70, 1], [1, "la", Eq, 195, 71, 1], [1, "la", za, 194, 71, 1], [1, "la", H, 196, 72, Xn], [ie, "la", Gi, 196, 71, 1], [1, "la", za, 197, 73, ie], [1, "la", 5, 196, 73, 1], [za, "la", 5, 198, 73, Xn], [1, "la", 3, 201, 73, Oq], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", Te, 205, 72, 1], [1, "la", jk, 206, 72, 1], [za, "la", 5, 207, 72, Te], [1, "la", 1, 208, 72, Xn], [1, "la", 1, 209, 73, ie], [ie, "la", jk, 209, 74, 1], [ie, "la", ta, 211, 76, 1], [1, "la", Pe, 210, 75, 1], [Oq, "la", 5, 212, 76, 1], [1, "la", Fr, 202, 75, 1], [Te, "la", 2, 203, 76, mk], [za, "la", Mq, 204, 77, mk], [1, "la", 2, 204, 78, Te], [ie, "la", 2, 204, 79, 1], [1, "la", q, 204, 80, 1], [za, "cs", Rq, 202, 74, mk], [1, "cs", za, 203, 74, za], [Oq, "cs", 2, 204, 73, Te], [Te, "cs", xq, 203, 75, Xn], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", In, 205, 74, 1], [Oq, "cs", Hj, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, za], [mk, "cs", yr, 207, 73, 1], [1, "cs", lr, 205, 76, 1], [za, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, ie], [1, "la", 4, 184, 64, 1], [Te, "la", 4, 185, 63, 1], [mk, "la", 1, 185, 62, Xn], [za, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, Te], [1, "la", Gi, 186, 59, ie], [1, "la", 1, 187, 58, 1], [Xn, "la", xq, 187, 57, 1], [1, "la", pq, 187, 56, 1], [ie, "s", Hi, 191, 60, Te], [ie, "s", 1, 195, 58, Te], [ie, "s", Te, 199, 46, 1], [ie, "s", xq, 202, 49, 1], [1, "g", 2, 197, 55, 1], [Oq, "g", 1, 213, 55, Oq], [1, "g", 0, 192, 45, 1], [1, "g", In, 210, 61, 1], [mk, "g", In, 182, 52, mk], [Oq, "g", Hi, 180, 35, za], [1, "g", In, 175, 25, 1], [mk, "g", Da, 168, 32, 1], [Xn, "g", Oq, 179, 28, Xn], [1, "g", 1, 161, 16, za], [mk, "g", jk, 172, 12, 1], [Te, "g", lr, 160, 25, za], [Oq, "g", 2, 157, 39, 1], [1, "g", pq, 170, 43, Oq], [Xn, "g", 2, 202, 67, 1], [Te, "g", 2, 217, 72, ie], [1, "g", jk, 214, 82, za], [1, "g", xj, 193, 86, Te], [1, "g", jk, 168, 60, 1], [1, "g", lr, 165, 78, 1], [Oq, "g", 2, 173, 88, ie], [1, "s", ya, 185, 51, 1], [Te, "s", 0, 175, 44, ie], [Te, "s", 0, 165, 50, mk], [ie, "s", 0, 160, 32, 1], [1, "s", Oq, 162, 30, 1], [Xn, "s", 1, 176, 28, Te], [mk, "s", Te, 154, Ri, Oq], [Te, "s", 1, 184, 49, ie], [Oq, "s", za, 192, 62, 1], [Xn, "s", 1, 216, 62, 1], [Te, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, za], [1, "s", 1, 206, 86, Xn], [Te, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", ta, 201, 81, 1], [Oq, "la", 1, 207, 83, 1], [1, "la", fn, 173, 32, Xn], [1, "la", xq, 181, 45, 1], [mk, "la", za, 178, 38, Oq], [mk, "la", 1, 213, 69, Oq], [Oq, "la", 5, 214, 69, Oq], [za, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, za], [1, "la", qo, 191, 80, ie], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", Pn, 154, 67, mk], [1, "g", xq, 202, 94, mk], [Te, "g", xq, 155, 90, za], [1, "s", 2, 215, 80, Te], [1, "s", 2, 204, 62, Xn], [1, "s", 2, 218, 60, 1], [mk, "s", 2, 194, 62, mk], [1, "s", 0, 216, 86, 1], [ie, "s", Zj, 211, 93, Oq], [Te, "la", In, 216, 92, 1], [1, "la", 0, 151, 96, 1], [Oq, "la", ie, 155, 95, 1], [1, "la", Pe, 214, 88, ie], [1, "s", 0, 205, 99, za], [1, "s", za, 217, 88, 1], [Te, "s", 1, 213, 94, 1], [za, "s", 1, 202, 97, ie], [za, "s", 0, 199, 85, za], [1, "s", Da, 190, 93, Oq], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, Te], [1, "la", ci, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [Te, "la", mj, 219, 77, 1], [1, "la", Da, 200, 59, 1], [1, "la", 3, 188, 87, za], [Oq, "la", Zj, 183, 94, 1], [Xn, "la", ie, 187, 83, mk], [Xn, "la", 1, 175, 82, Te], [1, "la", ie, 172, 94, za], [1, "la", 2, 179, 78, za], [za, "la", Hi, 166, 87, 1], [1, "la", 3, 159, 80, Te], [Te, "la", 3, 167, 15, mk], [ie, "la", 1, 164, qa, 1], [1, "la", 1, 172, 28, 1], [1, "la", Hk, 153, 24, 1], [1, "la", 4, 164, 91, Xn], [za, "la", 4, 156, 82, 1], [mk, "la", 4, 149, 90, za], [mk, "s", mj, 178, 85, Xn], [1, "s", 1, 180, 85, ie], [ie, "s", 0, 163, 96, 1], [1, "s", ya, 159, 86, 1], [za, "s", 0, 185, 78, mk], [Xn, "s", za, 194, 75, Xn], [Te, "s", lr, 195, 76, ie], [1, "s", 2, 181, 78, mk], [1, "s", lr, 161, 87, Oq], [Xn, "s", xq, 166, 97, ie], [1, "s", Pn, 177, 97, Te], [Oq, "s", In, 149, 85, 1], [1, "s", Te, 151, 83, 1], [Oq, "s", Te, 175, 74, 1], [1, "s", ya, 174, 72, 1], [mk, "la", ea, 168, 71, ie], [za, "la", 3, 180, 60, 1], [1, "s", Rq, 156, 63, 1], [za, "s", 0, 151, 47, Xn], [ie, "s", Te, 158, 64, 1], [1, "s", 1, 161, 75, 1], [Te, "s", 1, 162, 51, 1], [Te, "s", 1, 175, 45, 1], [Xn, "s", za, 152, 47, 1], [za, "s", mk, 159, 33, za], [1, "s", 1, 152, Pj, mk], [1, "s", Zj, 151, 13, 1], [1, "s", In, 166, 22, mk], [Oq, "s", 0, 170, 63, Oq], [Xn, "s", 2, 172, 62, Te], [za, "s", pq, 155, 61, 1], [mk, "s", xj, 167, 51, ie], [Te, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, Oq], [ie, "la", Mq, 177, 68, Oq], [1, "la", qo, 176, 67, 1], [ie, "la", 0, 174, 67, Te], [1, "la", ie, 172, 67, ie], [Te, "la", 4, 171, 67, Oq], [mk, "la", Vn, 170, 66, ie], [1, "la", Mq, 169, 66, ie], [1, "la", ie, 168, 66, 1], [1, "la", 4, 167, 67, 1], [ie, "la", 1, 166, 67, mk], [1, "la", Vn, 165, 68, Oq], [za, "la", 5, 164, 68, Te], [1, "la", jk, 163, 68, Xn], [za, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, mk], [Oq, "la", ci, 153, 72, 1], [1, "la", I, 163, 60, 1], [Te, "la", 3, 164, 42, Xn], [Oq, "la", 0, 155, 51, 1], [ie, "la", Oq, 168, 42, za], [1, "la", Fr, 158, 48, Oq], [1, "la", Vn, 178, 57, ie], [1, "la", Vn, 151, 69, Te], [1, "la", 2, 170, 74, za], [za, "la", 2, 160, 84, Xn], [1, "la", Pn, 174, 92, mk], [ie, "la", jk, 188, 90, za], [1, "la", 2, 209, 84, 1], [ie, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", z, 165, 57, 1], [1, "la", 5, 182, 58, za], [mk, "la", Fk, 166, 44, 1], [Oq, "la", 1, 163, 39, Oq], [1, "la", 1, 152, 53, Xn], [mk, "la", 1, 152, 37, ie], [1, "la", 2, 163, Cq, mk], [Te, "de", da, 219, Xi, 0], [Xn, "de", Do, 203, ik, 0], [1, "de", 15, 220, 19, 0], [1, "de", F, 223, sj, ya], [1, "de", 12, 213, sk, 0], [mk, "de", 37, 217, ha, 0], [1, "de", 38, 220, 14, ya], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, Tn, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, hr, Zj], [1, "de", 37, 212, 18, 0], [ie, "de", 38, 215, 26, ya], [Te, "de", 37, 222, 25, mj], [za, "de", 40, 221, 29, Zj], [1, "de", Xi, 220, 27, 0], [Xn, "de", 13, 213, 27, 0], [za, "de", dk, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, Zj], [Te, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, Rq], [1, "de", 39, 215, 32, Zj], [1, "de", 37, 211, 35, 0], [Xn, "de", Uk, 223, 38, 0], [1, "de", Z, 213, 38, 0], [Te, "de", Wa, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", zi, 206, 23, 0], [Xn, "de", ik, 205, 28, Rq], [Te, "de", Kq, 211, 23, mj], [1, "de", dk, 201, 20, 0], [1, "de", 15, 198, se, 0], [ie, "de", 15, 199, 16, ya], [1, "de", Sj, 194, 15, ya], [1, "de", 12, 197, 23, In], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, Qj, 0], [za, "de", 40, 196, 12, Hi], [1, "de", 40, 198, Ik, mj], [Oq, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [Oq, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [mk, "de", 39, 204, 31, Hi], [Te, "de", 39, 192, 24, Rq], [Xn, "de", 40, 187, 23, 0], [ie, "de", 38, 187, kn, 0], [Xn, "de", 39, 192, Pj, Zj], [1, "de", 37, 185, 15, Da], [Xn, "de", 12, 188, _o, 0], [Oq, "de", hq, 185, 13, 0], [mk, "de", 14, 189, se, 0], [1, "de", on, 187, 22, Rq], [Oq, "de", 15, 180, 9, Hi], [1, "de", Xi, 177, 14, 0], [1, "de", 14, 173, Qj, 0], [1, "de", Sq, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, Cq, 0], [Te, "de", 39, 175, 9, Da], [ie, "de", 40, 173, 14, Rq], [Xn, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, mj], [1, "de", 38, 164, 15, Da], [1, "de", 39, 170, 20, 0], [Oq, "de", 40, 160, 17, Hi], [1, "de", 40, 154, 10, Da], [za, "de", 40, 165, 23, Zj], [1, "de", 40, 150, so, 0], [Te, "de", 37, 155, 16, 0], [ie, "de", 39, 146, Zk, wj], [1, "de", 12, 159, 12, wj], [Oq, "de", 13, 151, pn, ya], [1, "de", 14, 150, 14, In], [Xn, "de", Ga, 153, so, 0], [za, "de", 13, 161, 25, Zj], [Xn, "de", Tn, 169, 25, wj], [Te, "de", 15, 176, 25, Hi], [1, "de", 12, 180, 29, Rq], [1, "de", 12, 188, 31, Hi], [mk, "de", po, 181, 36, Hi], [Oq, "de", 37, 186, 33, 0], [Xn, "de", 38, 183, 26, 0], [Xn, "de", 39, 177, 21, Hi], [ie, "de", 40, 175, 31, mj], [1, "de", 37, 176, 39, 0], [za, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [Oq, "de", 38, 168, 45, Da], [Xn, "de", 38, 173, 45, ya], [ie, "de", 39, 160, 35, 0], [za, "de", 40, 161, 42, 0], [Xn, "de", 40, 170, 39, 0], [mk, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [Xn, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [ie, "de", 40, 150, 50, ya], [Te, "de", 40, 160, 52, 0], [mk, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [Te, "de", 12, 167, 32, ya], [1, "de", Zn, 158, 32, Da], [1, "de", 14, 149, 28, wj], [za, "de", Ga, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", oq, 171, 43, mj], [Te, "de", Uk, 174, 36, ya], [1, "de", 12, 151, 43, Hi], [1, "de", vn, 152, 48, 0], [1, "de", dk, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, Rq], [1, "de", ik, 183, 51, 0], [ie, "de", dk, 186, 48, 0], [1, "de", 37, 182, 48, Hi], [Te, "de", 38, 187, 52, wj], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [Oq, "de", 40, 194, 37, Da], [mk, "de", 39, 199, 44, Hi], [mk, "de", 38, 200, 49, In], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, wj], [1, "de", po, 198, 47, mj], [1, "de", 15, 198, 55, Hi], [1, "de", 15, 212, 54, ya], [1, "de", 15, 216, 63, wj], [1, "de", 14, 209, 62, Zj], [Xn, "de", 12, 219, 60, 0], [ie, "de", 12, 206, 56, Da], [za, "de", Sj, 218, 72, Zj], [za, "de", $a, 223, 67, wj], [ie, "de", Uk, 205, 64, 0], [1, "de", 12, 193, 63, Zj], [ie, "de", 14, 216, 80, 0], [Te, "de", 14, 222, 87, wj], [mk, "de", 38, 210, 53, Rq], [Xn, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [Oq, "de", 37, 222, 60, mj], [ie, "de", 37, 207, 70, 0], [Xn, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [Oq, "de", 38, 218, 55, 0], [Xn, "de", 38, 212, 61, ya], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, Rq], [1, "de", 40, 222, 81, 0], [Xn, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, wj], [1, "de", 39, 208, 86, 0], [za, "de", 39, 218, 87, Rq], [Te, "de", 39, 222, 93, In], [ie, "de", 39, 216, 96, Hi], [ie, "de", 39, 209, 94, Rq], [Xn, "de", 39, 201, 87, Da], [1, "de", 39, 198, 82, Rq], [Xn, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, Zj], [Oq, "de", 39, 202, 92, wj], [Te, "de", 37, 194, 97, mj], [ie, "de", 39, 204, 88, 0], [ie, "de", 39, 189, 90, wj], [mk, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [ie, "de", 37, 183, 91, wj], [Oq, "de", 37, 186, 80, ya], [Te, "de", 37, 191, 72, ya], [1, "de", 38, 184, 77, 0], [Te, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, Rq], [mk, "de", 40, 178, 87, Zj], [Xn, "de", 40, 174, 94, 0], [za, "de", 40, 192, 93, Hi], [Te, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, Da], [mk, "de", 38, 161, 85, wj], [1, "de", 38, 164, 98, Hi], [Te, "de", 38, 151, 99, Da], [1, "de", 38, 151, 85, In], [Xn, "de", 40, 148, 83, 0], [Oq, "de", 40, 160, 77, 0], [za, "de", 40, 167, 77, Da], [Te, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, Hi], [1, "de", 37, 161, 64, 0], [mk, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, Da], [1, "de", 39, 174, 64, Rq], [1, "de", 39, 175, 56, 0], [mk, "de", 39, 149, 67, Da], [1, "de", 12, 218, 96, Da], [Xn, "de", 13, 212, 95, Rq], [Oq, "de", 14, 204, 85, 0], [mk, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", $a, 198, 87, 0], [Xn, "de", 14, 196, 77, 0], [1, "de", vn, 194, 86, 0], [1, "de", _o, 181, 84, mj], [Oq, "de", 14, 184, 79, 0], [1, "de", Kq, 188, 93, Hi], [1, "de", Dr, 180, 87, 0], [za, "de", Zn, 178, 96, 0], [1, "de", 13, 163, 95, Zj], [mk, "de", v, 172, 88, Da], [Oq, "de", Ga, 176, 75, Da], [Xn, "de", 14, 172, 72, Da], [Te, "de", 14, 169, 82, Zj], [Oq, "de", ja, 164, 78, Hi], [Xn, "de", 13, 158, 87, Zj], [ie, "de", 13, 149, 86, wj], [ie, "de", 15, 154, 91, 0], [1, "de", v, 160, 74, Hi], [Oq, "de", la, 152, 76, Zj], [1, "de", 14, 158, 63, ya], [za, "de", dk, 150, 60, Hi], [Te, "de", oq, 169, 59, Hi], [1, "de", 13, 173, 61, 0], [1, "cs", mk, 143, 104, Oq], [1, "cs", In, 141, 102, za], [1, "cs", I, 138, 102, Oq], [1, "cs", jk, 139, 102, za], [mk, "cs", 2, 140, 102, za], [mk, "cs", nq, 143, 107, 1], [Te, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, Xn], [1, "cs", 2, 142, 103, 1], [1, "cs", ya, 142, 104, Oq], [1, "cs", 2, 141, 103, ie], [1, "cs", ci, 142, 105, Xn], [1, "cs", 3, 140, 103, 1], [1, "cs", yr, 141, 104, 1], [1, "la", 4, 151, 23, Te], [Xn, "la", $i, 150, 22, 1], [mk, "la", 1, 149, 21, Oq], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, qr, mk], [za, "la", 4, 147, bn, 1], [1, "la", Oj, 147, 18, mk], [1, "la", Oq, 147, 17, Oq], [Oq, "la", Hk, 144, rr, 1], [Xn, "la", ta, 147, 16, za], [mk, "la", pq, 147, Ga, Xn], [1, "la", 4, 147, 14, 1], [1, "la", Gi, 145, 11, za], [mk, "la", M, 145, Sj, 1], [1, "la", mk, 146, D, 1], [1, "la", 2, 145, 13, 1], [mk, "la", 3, 155, 25, 1], [Te, "la", Da, 155, 24, 1], [Te, "la", Hk, 153, 26, Te], [1, "cs", mj, 151, 24, Oq], [Te, "cs", 0, 153, 22, Xn], [za, "cs", ci, 152, 22, 1], [1, "cs", I, 154, 22, 1], [Xn, "cs", mk, 157, 26, Oq], [za, "cs", lr, 157, 24, Te], [Oq, "cs", pq, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", Hj, 151, 26, Xn], [Xn, "cs", 2, 152, 25, Te], [Oq, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, ie], [1, "cs", 2, 157, 23, Xn], [Oq, "cs", 2, 157, 22, 1], [Xn, "cs", ea, 150, 24, mk], [1, "cs", ea, 150, 23, Xn], [1, "de", 38, 155, 29, 0], [Te, "de", 12, 157, 27, wj], [Oq, "de", Do, 153, 29, mj], [1, "de", Ga, 158, 23, 0], [Oq, "de", hq, 156, 21, 0], [1, "de", 13, 147, 36, Rq], [1, "de", Zn, 161, 56, 0], [1, "de", Dr, 147, 79, 0], [Te, "de", da, 157, 99, In], [1, "de", Uk, 172, 99, In], [ie, "la", Hk, 143, 102, ie], [Te, "la", Vn, 149, 96, 1], [1, "la", $i, 145, 102, 1], [Xn, "la", 1, 148, 97, 1], [1, "la", Oj, 148, 98, 1], [za, "cs", ea, 144, 104, 1], [Oq, "cs", 3, 144, 103, ie], [1, "cs", I, 145, 103, Xn], [1, "cs", nq, 145, 104, 1], [Oq, "cs", fn, 142, 101, 1], [Oq, "cs", nq, 143, 100, Te], [1, "cs", 3, 141, 101, Te], [Oq, "cs", 3, 142, Cn, 1], [1, "cs", 0, 141, 100, 1], [za, "cs", 2, 140, 101, 1], [1, "cs", pq, 144, 105, 1], [ie, "cs", yr, 146, 103, 1], [1, "cs", I, 146, 102, za], [1, "cs", ea, 150, 95, Oq], [Te, "cs", ya, 150, 97, ie], [1, "cs", 2, 151, 98, Te], [1, "cs", wj, 153, 97, za], [1, "cs", Hk, 153, 96, 1], [1, "cs", jk, 149, 95, 1], [Xn, "s", 0, 213, 127, 1], [za, "plm", Oq, 214, 131, mj], [1, "plm", ie, 207, 128, Rq], [1, "plm", Zj, 208, 127, 0], [1, "s", Xn, 207, 132, 1], [1, "s", 2, 208, 133, Oq], [1, "plm", wj, 217, 132, Rq], [Oq, "plm", pq, 186, 158, 0], [1, "plm", In, 184, 160, In], [1, "s", za, 183, 156, Xn], [1, "s", 2, 186, 159, Te], [Xn, "p", 0, 182, 157, 1], [Oq, "p", In, 114, 205, ie], [za, "plm", Te, 117, 204, ya], [1, "plm", 0, 117, 205, 0], [ie, "plm", 2, 112, 204, 0], [Xn, "s", pq, 114, 207, 1], [ie, "s", 2, 115, 204, Xn], [Oq, "plm", 2, 122, 151, 0], [1, "plm", Xn, 123, 150, 0], [1, "plm", Xn, 117, 151, mj], [1, "s", Hi, 118, 150, 1], [Xn, "s", 1, 122, 152, ie], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, Zj], [1, "s", 0, 153, 128, 1], [za, "s", 2, 152, 130, 1], [Xn, "p", 0, 123, 65, 1], [Oq, "plm", Hj, 125, 62, 0], [Oq, "plm", 1, 124, 62, Da], [mk, "plm", Zj, 120, 65, Zj], [1, "s", 1, 125, 63, ie], [Xn, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [Te, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", xj, 145, 105, za], [1, "cs", Pn, 144, 107, Te], [1, "cs", 2, 141, 106, 1], [mk, "cs", 2, 141, 105, 1], [1, "cs", Pn, 140, 105, Oq], [1, "cs", H, 140, 104, ie], [Te, "cs", 1, 138, 103, ie], [1, "cs", mj, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", Hj, 139, 105, 1], [1, "cs", 2, 142, 106, ie], [Te, "cs", 2, 142, 107, 1], [1, "cs", Pn, 139, 101, 1], [1, "de", 19, 27, 264, ya], [Oq, "la", Pe, 147, 99, Oq], [1, "la", Te, 146, Cn, 1], [1, "la", 4, 145, 101, ie], [1, "cs", mk, 215, 47, 1], [1, "cs", 2, 216, 47, mk], [Oq, "cs", 2, 215, 48, 1], [1, "la", Mq, 214, 45, mk], [Oq, "la", Gi, 215, 45, za], [ie, "la", 0, 216, 46, mk], [Xn, "la", $i, 216, 48, Te], [1, "la", Pe, 216, 49, 1], [ie, "la", Vn, 217, 50, 1], [ie, "la", 3, 214, 49, za], [1, "la", Pe, 211, 45, mk], [1, "la", nq, 213, 47, 1], [1, "cs", Pn, 224, 48, 1], [za, "plm", 2, 111, 243, Da], [mk, "plm", 1, 108, 246, 0], [Oq, "s", Te, 110, 243, Oq], [Xn, "s", 0, 108, 245, Oq], [1, "s", 0, 121, 276, Oq], [mk, "plm", pq, 122, 277, Da], [1, "plm", pq, 117, 276, Zj], [Te, "plm", 1, 118, 277, Rq], [1, "s", Te, 118, 278, 1], [Xn, "cs", Hj, 66, sr, Te], [ie, "cs", I, 67, 16, Xn], [1, "cs", In, 67, tr, Te], [1, "cs", 2, 66, Ri, za], [Te, "cs", fn, 66, 18, Xn], [1, "cs", 3, 68, Un, 1], [1, "cs", mj, 36, Fo, 1], [Xn, "cs", 2, 36, 17, 1], [Oq, "cs", 2, 36, 18, 1], [mk, "cs", nq, 35, tr, Xn], [ie, "cs", Hk, 36, Dq, Te], [ie, "cs", 3, 35, 18, 1], [Xn, "cs", 2, 66, 30, mk], [mk, "cs", Pn, 66, 23, Xn], [1, "cs", nq, 66, 22, Xn], [1, "cs", ea, 66, 31, 1], [za, "cs", 2, 36, 30, mk], [ie, "cs", Pn, 36, 23, Xn], [1, "cs", 1, 36, 22, Te], [1, "cs", xq, 36, 31, mk], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, hq, 1], [1, "cs", xj, 44, 13, 1], [mk, "cs", Hk, 42, Yk, 1], [1, "cs", nq, 41, 16, 1], [1, "cs", 3, 40, 16, Te], [1, "cs", 0, 42, 19, 1], [mk, "cs", 3, 43, 19, 1], [ie, "cs", 3, 44, 19, 1], [ie, "cs", 3, 45, 19, 1], [ie, "cs", Pn, 46, 19, Te], [Te, "cs", 0, 43, 22, 1], [mk, "cs", xq, 42, 22, 1], [1, "cs", Te, 41, 22, Xn], [1, "cs", Rq, 40, 22, 1], [1, "cs", 3, 39, 17, ie], [1, "cs", 1, 44, 26, 1], [za, "cs", 2, 45, 26, 1], [1, "cs", qo, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", pq, 48, 26, Xn], [Oq, "cs", yr, 47, 25, 1], [1, "cs", 3, 43, 27, Oq], [1, "cs", 1, 49, 32, mk], [Te, "cs", 2, 50, 32, ie], [Te, "cs", xj, 51, 32, Te], [1, "cs", H, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", Oq, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", yr, 55, 31, mk], [Oq, "cs", nq, 54, 32, Xn], [1, "cs", fn, 47, 31, za], [ie, "cs", 3, 48, 32, Xn], [za, "cs", 0, 51, 33, 1], [ie, "cs", lr, 52, 33, 1], [Te, "cs", 2, 50, 33, Oq], [Oq, "cs", ea, 56, 30, ie], [1, "cs", ci, 56, 31, ie], [ie, "cs", 3, 46, 30, 1], [ie, "cs", Hk, 46, 31, 1], [1, "cs", Xn, 53, 33, za], [za, "cs", H, 49, 33, Xn], [1, "cs", xq, 53, 32, za], [ie, "cs", wj, 55, 32, 1], [za, "cs", 0, 47, 32, ie], [Oq, "d", 1, 54, 35, 1], [mk, "fo", 2, 35, 15, wj], [1, "fo", H, 36, 12, In], [1, "fo", Pn, 67, eo, Hi], [1, "cs", 3, 60, 13, 1], [Xn, "cs", xq, 59, Z, ie], [Te, "cs", 1, 58, 13, 1], [Xn, "cs", nq, 62, 16, 1], [1, "cs", ya, 61, p, Xn], [Oq, "cs", 3, 60, G, 1], [1, "cs", qo, 63, Rk, 1], [ie, "cs", Pn, 60, so, mk], [Oq, "cs", Xn, 59, b, 1], [za, "cs", nq, 58, 19, 1], [mk, "cs", jk, 57, b, 1], [ie, "cs", pq, 56, Dk, 1], [1, "cs", In, 55, 18, 1], [1, "cs", 2, 55, m, 1], [1, "cs", 2, 63, 23, Xn], [Xn, "cs", In, 62, 22, Oq], [Te, "cs", Hj, 61, 22, 1], [mk, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, Xn], [1, "cs", 2, 54, 26, Te], [mk, "cs", Hj, 55, 26, ie], [1, "cs", xj, 56, 26, 1], [1, "cs", ie, 57, 26, Te], [mk, "cs", 2, 58, 26, Te], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", xq, 68, 15, ie], [Oq, "cs", 3, 69, 15, Xn], [Oq, "cs", 3, 70, eo, mk], [1, "cs", 3, 70, 14, ie], [ie, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, Mn, 1], [1, "cs", Pn, 71, 13, za], [1, "cs", 2, 71, Kq, 1], [Te, "cs", I, 72, 13, 1], [Xn, "cs", 3, 70, 8, Xn], [za, "cs", fn, 71, 8, mk], [1, "cs", lr, 72, zj, Te], [1, "cs", 0, 73, 8, 1], [1, "cs", nq, 74, fk, Oq], [1, "cs", 3, 74, Bi, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [Te, "cs", 3, 75, 10, za], [mk, "cs", mj, 76, 10, ie], [mk, "cs", Da, 76, 16, mk], [mk, "cs", 3, 76, $q, Te], [Te, "cs", Hk, 75, gk, 1], [1, "cs", 2, 77, Mo, 1], [1, "cs", 2, 77, 14, mk], [1, "cs", Hk, 77, F, 1], [Xn, "cs", 3, 77, 13, 1], [1, "cs", nq, 77, $q, 1], [1, "cs", 0, 74, 18, mk], [Xn, "cs", mk, 75, Yo, 1], [1, "cs", xq, 74, qa, 1], [1, "cs", 3, 73, Be, 1], [1, "cs", ea, 67, 23, Oq], [za, "cs", 0, 68, 23, za], [mk, "cs", 0, 72, Ok, ie], [Xn, "cs", 2, 73, 20, Xn], [Xn, "cs", xj, 74, Jj, 1], [1, "cs", 2, 74, 36, 1], [mk, "cs", Hj, 77, 27, mk], [1, "cs", Pn, 76, 26, Xn], [1, "cs", 2, 75, 26, Xn], [1, "cs", 0, 74, 26, 1], [Oq, "cs", 2, 75, 25, 1], [1, "cs", mj, 76, 25, 1], [ie, "cs", 1, 77, 23, Xn], [1, "cs", 2, 77, 16, mk], [Te, "cs", 2, 76, 17, Xn], [za, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [Te, "cs", 2, 77, 25, mk], [Oq, "cs", 2, 77, 26, 1], [ie, "cs", Te, 75, 27, Te], [Te, "cs", 3, 76, 27, Xn], [ie, "cs", lr, 67, 24, Te], [ie, "cs", pq, 66, 24, Te], [1, "cs", Pn, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, Xn], [Oq, "cs", Hj, 66, Dk, 1], [1, "cs", Pn, 66, 20, Xn], [za, "cs", jk, 66, 21, 1], [Oq, "cs", xj, 67, Sa, 1], [za, "cs", 2, 67, 22, ie], [1, "cs", 0, 77, 36, 1], [ie, "cs", 0, 77, 32, 1], [1, "cs", Oq, 75, 35, za], [Oq, "cs", 2, 75, 36, ie], [1, "cs", xj, 76, 36, 1], [Te, "cs", Pn, 77, 35, mk], [Te, "cs", 2, 77, 34, 1], [1, "cs", lr, 76, 35, Oq], [1, "cs", 2, 77, 33, 1], [1, "cs", lr, 77, 31, Xn], [Oq, "cs", Rq, 77, 29, 1], [1, "cs", Zj, 71, 32, 1], [Te, "cs", Rq, 76, 34, za], [mk, "cs", xq, 77, 30, 1], [Oq, "cs", lr, 77, 28, 1], [za, "cs", jk, 76, 28, 1], [1, "cs", Pn, 75, 28, Xn], [ie, "cs", 2, 76, 29, 1], [1, "cs", xq, 76, 33, 1], [1, "cs", jk, 70, 32, ie], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [Te, "cs", 2, 67, 31, 1], [ie, "cs", Hj, 67, 30, ie], [Te, "cs", 2, 69, 32, za], [Xn, "cs", 1, 67, 32, ie], [ie, "cs", 2, 68, 32, 1], [za, "cs", H, 66, 32, 1], [1, "cs", 2, 66, 33, ie], [Xn, "cs", 2, 67, 33, 1], [mk, "cs", jk, 70, 33, Te], [1, "cs", 2, 69, 33, Te], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [mk, "cs", 1, 66, 35, za], [Xn, "cs", Hj, 67, 34, 1], [Te, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [Oq, "cs", 2, 64, 36, 1], [za, "cs", 2, 65, 36, 1], [mk, "cs", 2, 67, 35, ie], [1, "cs", Pn, 66, 36, mk], [1, "cs", xj, 69, 34, 1], [mk, "cs", xj, 68, 35, Oq], [ie, "cs", xj, 76, Qj, 1], [Te, "cs", lr, 77, Qk, Oq], [1, "cs", 2, 77, _a, za], [1, "cs", lr, 77, 10, za], [ie, "cs", xq, 78, 8, ie], [ie, "cs", 2, 78, 9, za], [mk, "cs", pq, 78, 10, Oq], [Oq, "cs", Hj, 78, 11, mk], [Te, "cs", 2, 78, da, ie], [1, "cs", xq, 78, 13, Xn], [1, "cs", 0, 79, 9, 1], [za, "cs", ie, 79, nn, mk], [1, "cs", 3, 79, _a, 1], [Oq, "cs", qo, 79, 10, Te], [Xn, "cs", 3, 79, Uk, mk], [mk, "cs", 3, 80, 8, ie], [Oq, "cs", Oq, 80, 10, Te], [1, "cs", xj, 80, Qk, 1], [1, "cs", Pn, 80, pk, 1], [1, "cs", 2, 81, 8, za], [1, "cs", H, 81, 9, Te], [1, "cs", 2, 81, 10, Te], [ie, "cs", H, 78, Bk, Oq], [Oq, "cs", xj, 79, 13, Te], [1, "cs", xj, 78, $q, 1], [1, "cs", 2, 80, $a, 1], [ie, "cs", 0, 79, 14, Te], [1, "cs", 0, 82, $o, Oq], [ie, "cs", Hj, 82, 8, 1], [Te, "cs", Hj, 82, gn, 1], [Oq, "cs", 2, 81, tk, 1], [Xn, "cs", I, 80, Zn, mk], [1, "cs", za, 78, 30, 1], [1, "cs", 1, 78, 34, Xn], [1, "cs", 1, 78, 27, 1], [ie, "cs", 0, 78, 25, 1], [1, "cs", Da, 79, 29, 1], [1, "cs", wj, 79, 32, 1], [za, "cs", 0, 79, 35, 1], [1, "cs", Hj, 78, 35, 1], [Te, "cs", xq, 78, 36, Te], [ie, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, Oq], [1, "cs", xq, 79, 33, Oq], [1, "cs", Hj, 78, 32, 1], [mk, "cs", Hj, 78, 31, Te], [1, "cs", Pn, 79, 31, 1], [1, "cs", jk, 79, 30, 1], [1, "cs", Hj, 78, 29, 1], [za, "cs", Hj, 78, 28, 1], [1, "cs", 2, 79, 28, za], [Xn, "cs", 2, 79, 27, ie], [Xn, "cs", 2, 78, 26, Xn], [1, "cs", pq, 79, 26, mk], [1, "cs", 2, 78, 24, Oq], [za, "cs", jk, 80, 34, Xn], [1, "cs", 2, 80, 33, za], [1, "cs", 2, 80, 31, Te], [1, "cs", 2, 80, 30, 1], [za, "cs", 2, 80, 32, za], [za, "cs", pq, 80, 29, Xn], [Oq, "cs", lr, 80, 28, za], [1, "cs", 2, 80, 27, 1], [1, "cs", mj, 81, 30, Xn], [Te, "cs", ie, 81, 32, 1], [1, "cs", mk, 81, 28, 1], [ie, "cs", Pn, 81, 29, mk], [1, "cs", Pn, 81, 31, ie], [za, "cs", xj, 81, 33, 1], [1, "cs", pq, 82, 30, 1], [Oq, "cs", 2, 82, 31, za], [1, "cs", xq, 82, 32, 1], [za, "cs", 0, 37, 36, mk], [1, "cs", 2, 38, 36, 1], [za, "cs", Pn, 37, 35, Oq], [mk, "cs", jk, 36, 36, 1], [Xn, "cs", 2, 34, 35, Oq], [1, "cs", 2, 35, 35, 1], [Te, "cs", 2, 36, 35, za], [1, "cs", Hi, 33, 34, 1], [Xn, "cs", 1, 35, 34, 1], [Oq, "cs", 2, 36, 34, za], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [Xn, "cs", 2, 35, 33, Xn], [1, "cs", Hj, 34, 33, Xn], [Te, "cs", 2, 33, 33, 1], [1, "cs", Pn, 31, 32, 1], [Te, "cs", mk, 36, 32, Oq], [Oq, "cs", 1, 32, 32, Te], [1, "cs", 2, 35, 32, 1], [mk, "cs", 2, 33, 32, 1], [mk, "cs", lr, 32, 33, 1], [mk, "cs", 2, 33, 31, mk], [1, "cs", Hj, 34, 31, Xn], [Te, "cs", 2, 35, 31, 1], [1, "cs", wj, 34, 32, mk], [Xn, "cs", 2, 35, 30, ie], [1, "cs", za, 39, 23, 1], [1, "cs", 3, 39, 22, ie], [1, "cs", ea, 36, 24, 1], [Xn, "cs", qo, 35, 24, Xn], [1, "cs", jk, 34, 23, ie], [Xn, "cs", 2, 35, 23, mk], [Te, "cs", 2, 36, wq, Oq], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [Te, "cs", xq, 35, 16, 1], [ie, "cs", 2, 34, Fo, 1], [1, "cs", xq, 33, 16, 1], [1, "cs", ya, 34, 17, za], [mk, "cs", Zj, 32, 15, mk], [za, "cs", 2, 31, la, 1], [mk, "cs", ci, 30, 13, 1], [ie, "cs", Te, 33, zi, 1], [1, "cs", za, 31, hq, Oq], [1, "cs", 2, 32, Sq, 1], [1, "cs", 0, 31, On, ie], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [Xn, "cs", 0, 25, F, Te], [Te, "cs", 2, 25, 11, Oq], [Xn, "cs", 3, 25, 10, ie], [Xn, "cs", ya, 25, 9, Te], [mk, "cs", H, 25, 8, Xn], [ie, "cs", 2, 26, He, mk], [1, "cs", pq, 27, 8, 1], [1, "cs", 2, 28, He, 1], [Xn, "cs", 2, 29, qk, 1], [1, "cs", xj, 30, 8, Xn], [1, "cs", jk, 26, fk, za], [1, "cs", lr, 27, 9, Te], [Xn, "cs", lr, 26, 10, 1], [1, "cs", 1, 27, vr, mk], [1, "cs", 3, 28, Qk, 1], [1, "cs", 3, 25, Kq, za], [1, "cs", 0, 25, $q, Xn], [Te, "cs", 2, 26, on, 1], [1, "cs", 3, 27, 16, ie], [1, "cs", wj, 28, 17, Xn], [Te, "cs", Oq, 29, Vq, Oq], [1, "cs", xj, 26, 16, Te], [Te, "cs", 2, 25, 16, 1], [za, "cs", 2, 27, 17, Oq], [1, "cs", 2, 26, qa, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, ro, mk], [1, "cs", H, 30, 19, Te], [za, "cs", 2, 29, 19, Oq], [1, "cs", 2, 24, Tn, Te], [Oq, "cs", H, 24, 15, 1], [1, "cs", Zj, 23, 14, ie], [Xn, "cs", pq, 24, te, Xn], [1, "cs", lr, 24, 11, 1], [Xn, "cs", Pn, 24, 12, 1], [Xn, "cs", pq, 24, D, Oq], [1, "cs", Oq, 23, wa, Xn], [1, "cs", Hi, 22, 8, 1], [1, "cs", Hi, 22, oq, 1], [Xn, "cs", 1, 23, Hr, 1], [Oq, "cs", 2, 24, Bi, 1], [Xn, "cs", 2, 24, Qj, ie], [za, "cs", 2, 23, 9, ie], [1, "cs", 2, 22, 9, 1], [1, "cs", H, 22, 10, 1], [za, "cs", lr, 22, nn, 1], [1, "cs", 2, 23, 11, mk], [1, "cs", pq, 23, 12, za], [mk, "cs", lr, 23, hq, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, Ca, 1], [za, "cs", Pn, 21, qk, 1], [1, "cs", 2, 29, 25, Te], [Oq, "cs", 2, 25, 24, 1], [Oq, "cs", 2, 26, 25, 1], [1, "cs", H, 27, 25, ie], [Te, "cs", 0, 28, 25, Oq], [1, "cs", 1, 25, 23, Te], [1, "cs", Pn, 26, 24, 1], [za, "cs", mj, 24, 25, mk], [1, "cs", 3, 23, 24, 1], [1, "cs", I, 24, 24, Te], [mk, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [Xn, "cs", Oq, 26, 26, 1], [Oq, "cs", mk, 29, 26, mk], [za, "cs", H, 23, 26, 1], [mk, "cs", 2, 24, 26, mk], [1, "cs", 2, 25, 26, 1], [1, "cs", xq, 27, 26, za], [mk, "cs", Hj, 28, 26, ie], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, za], [1, "cs", mk, 26, 29, 1], [Oq, "cs", ya, 28, 27, za], [1, "cs", H, 27, 28, 1], [1, "cs", H, 27, 27, 1], [1, "cs", jk, 26, 28, ie], [1, "cs", 2, 26, 27, Te], [za, "cs", 2, 25, 28, Xn], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, ie], [Oq, "cs", 2, 24, 27, Oq], [1, "cs", 0, 24, 28, Te], [Oq, "cs", ya, 25, 32, 1], [1, "cs", Oq, 24, 30, 1], [Xn, "cs", 2, 25, 31, 1], [mk, "cs", Pn, 25, 30, za], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, za], [ie, "cs", 2, 26, 33, 1], [mk, "cs", 0, 26, 34, 1], [Te, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, Xn], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, Oq], [Te, "cs", jk, 24, 32, 1], [1, "cs", pq, 25, 33, 1], [1, "cs", 2, 26, 35, za], [1, "cs", 2, 24, 33, Te], [1, "cs", 2, 25, 34, mk], [1, "cs", ie, 22, 29, Oq], [Xn, "cs", Te, 24, 34, 1], [Oq, "cs", 0, 23, 35, za], [1, "cs", xq, 25, 35, 1], [1, "cs", pq, 24, 35, ie], [1, "cs", 2, 23, 34, mk], [Xn, "cs", 2, 23, 33, 1], [Xn, "cs", wj, 22, 33, mk], [Oq, "cs", ie, 23, 32, 1], [1, "cs", 2, 22, 32, Oq], [za, "cs", xj, 23, 31, Te], [1, "cs", H, 23, 30, 1], [1, "cs", lr, 22, 30, 1], [mk, "cs", H, 22, 31, Oq], [1, "cs", Xn, 21, 31, za], [ie, "cs", 0, 21, 29, mk], [1, "cs", Hj, 21, 30, 1], [mk, "cs", 2, 24, 36, 1], [mk, "cs", 2, 26, 36, za], [1, "cs", jk, 25, 36, Oq], [Oq, "cs", 2, 27, 36, ie], [Te, "cs", 2, 28, 36, 1], [Te, "d", 2, 83, 65, 1], [1, "d", jk, gk, 67, 1], [1, "g", In, eo, 17, ie], [Oq, "s", ya, Ik, 13, 1], [1, "s", wj, 85, 11, mk], [Oq, "f", 0, 41, 102, 1], [Oq, "f", 0, 42, 124, Te], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [Te, "f", 0, 70, 87, 1], [1, "f", In, 27, 96, Te], [Te, "f", 0, 22, 79, 1], [Te, "f", ya, to, 117, Oq], [Te, "f", 0, 30, 137, za], [Xn, "f", Rq, 59, 146, Xn], [Te, "f", Rq, 52, 147, 1], [mk, "f", 0, 20, 149, ie], [Xn, "f", 0, 36, 146, 1], [mk, "f", 0, 62, 124, 1], [Te, "g", 1, 34, 121, Oq], [1, "g", 1, 52, 116, 1], [1, "g", Xn, 78, 116, Oq], [Xn, "g", za, 71, 129, 1], [ie, "s", mj, 53, 100, 1], [1, "s", Hi, 73, 111, Xn], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, mk], [1, "s", In, bn, 102, 1], [1, "s", wj, V, 127, ie], [za, "s", 0, 35, 159, Oq], [1, "s", 0, 65, 54, Oq], [1, "s", mj, 44, 52, Te], [Oq, "s", In, 26, 51, za], [1, "f", ie, 56, 136, Xn], [Te, "f", 1, 41, 133, 1], [1, "f", za, 80, 120, 1], [1, "f", Xn, 16, 117, 1], [ie, "f", Xn, 13, 99, 1], [ie, "f", 1, Ri, 89, 1], [Xn, "f", 1, 90, 98, za], [Te, "f", 1, 84, 95, 1], [Xn, "f", 1, 16, 57, 1], [1, "f", mk, 77, 53, Xn], [Oq, "d", 1, 48, 35, 1], [1, "de", _a, 33, Zn, Hi], [1, "de", 8, 30, fk, 0], [Oq, "de", 9, 32, 30, mj], [Oq, "de", J, 30, 25, 0], [za, "de", Zk, 33, 21, Rq], [ie, "de", 8, 31, 34, 0], [1, "de", Hr, 67, 29, Da], [za, "de", 9, 70, 22, Rq], [mk, "de", Ra, 70, 16, wj], [Xn, "de", gn, 75, 11, 0], [mk, "de", 8, 68, jn, 0], [1, "de", He, 75, 30, 0], [ie, "de", 11, 71, 33, 0], [1, "de", dn, 72, 25, Da], [Te, "de", 11, 64, 25, 0], [1, "de", 11, 52, kk, 0], [1, "de", 11, 31, v, wj], [1, "de", 30, 29, Wa, Hi], [mk, "de", 30, 36, 15, In], [mk, "de", 30, 34, 29, Rq], [Te, "de", 30, 30, 29, wj], [1, "de", 30, 71, 29, 0], [Xn, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, bn, wj], [1, "de", 29, 72, 10, Rq], [Oq, "de", 29, 75, 32, 0], [za, "de", 29, 32, vi, 0], [Oq, "fo", 1, 39, 12, 0], [1, "fo", Xn, 34, 14, 0], [1, "fo", Oq, 74, 28, Da], [Xn, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [Oq, "fo", 2, 77, 22, In], [1, "fo", xj, 74, 21, ya], [Te, "fo", lr, 76, io, Hi], [1, "fo", Oq, 78, 17, 0], [Te, "fo", mk, 28, 19, 0], [ie, "fo", lr, 27, 24, mj], [ie, "fo", Hj, 24, Yo, 0], [1, "fo", jk, 29, 21, ya], [Te, "fo", mk, 27, 32, mj], [1, "fo", 2, 30, 33, 0], [Oq, "fo", Xn, 29, 28, mj], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, wq, 24, ya], [1, "fo", 2, to, 26, 0], [Xn, "fo", xj, 23, 16, Da], [mk, "fo", pq, nn, 25, 0], [ie, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [za, "de", 34, 30, V, Hi], [za, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, In], [1, "de", 36, 72, 23, 0], [Oq, "de", 35, 25, Vq, 0], [Oq, "d", mk, 83, 41, Xn], [Xn, "d", 1, 17, 40, 1], [mk, "cs", 2, 224, 104, 1], [1, "cs", Hi, 224, 105, 1], [1, "cs", yr, 224, 106, Te], [mk, "la", I, 216, 128, ie], [1, "la", 0, 215, 126, Xn], [ie, "s", 0, 216, 130, za], [ie, "s", za, 217, 129, 1], [Te, "s", wj, 218, 128, 1], [ie, "s", ie, 217, 127, za], [1, "s", 0, 217, 126, mk], [1, "s", 1, 217, 125, 1], [1, "s", Da, 216, 124, 1], [1, "s", 1, 215, 124, za], [Te, "s", Da, 214, 124, 1], [za, "s", 1, 213, 125, mk], [1, "s", ya, 213, 126, za], [1, "plm", 2, 217, 130, 0], [za, "plm", 2, 212, 125, 0], [1, "p", wj, 214, 134, ie], [Xn, "s", za, 211, 126, Te], [za, "b", ie, 45, 277, mj], [Te, "b", 1, 50, 286, 0], [1, "b", jk, 51, 284, wj], [1, "b", 1, 47, 287, ya], [Te, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [mk, "b", Rq, 52, 283, Rq], [mk, "b", mk, 51, 280, 0], [1, "g", Rq, 45, 269, 1], [Xn, "p", 0, 55, 281, 1], [Te, "b", za, M, 172, Da], [Te, "b", 2, Ck, 172, 0], [ie, "t", nr, 6, 171, mj], [Oq, "t", ie, 5, 170, Rq], [1, "t", Oq, 5, 164, ya], [mk, "t", 3, U, 164, 0], [Xn, "b", ya, Bq, 165, Zj], [Oq, "t", 3, ta, 165, mj], [1, "b", pq, Na, 166, 0], [Oq, "t", 4, 5, 166, 0], [Oq, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, In], [Xn, "t", 0, va, 169, 0], [1, "t", 4, 6, 170, In], [za, "t", 0, 5, 167, 0], [za, "t", xj, Eq, 169, mj], [1, "b", wj, 5, 168, 0], [1, "s", 1, $k, 153, 1], [Oq, "s", pq, 7, 151, 1], [Xn, "de", Oj, Aq, 152, mj], [1, "t", mk, nr, 154, Da], [1, "b", Zj, ji, 154, In], [za, "t", lr, 6, 155, 0], [Xn, "b", xq, qq, 156, In], [1, "t", 2, 5, 157, 0], [mk, "t", ba, 5, 155, 0], [Xn, "b", In, U, 157, wj], [mk, "t", Xn, z, 156, mj], [1, "t", 5, Bq, 158, Hi], [Oq, "b", 2, U, 159, 0], [1, "b", In, ji, 162, 0], [za, "t", 4, va, 163, Da], [1, "t", 4, Na, 161, Rq], [1, "b", 1, 6, 160, 0], [Te, "b", 2, 5, 163, ya], [Te, "b", Hj, 5, 158, 0], [1, "b", 2, Fk, 161, ya], [za, "t", ie, 5, 162, In], [1, "t", Te, M, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", Hj, 83, 178, In], [Oq, "s", 1, 82, 177, Xn], [Xn, "b", mj, 76, 172, Da], [Te, "b", I, 76, 174, 0], [Oq, "t", fn, 73, 174, ya], [Oq, "t", z, 72, 175, ya], [1, "t", 5, 87, 173, 0], [za, "de", H, 76, 175, 0], [1, "de", ea, 77, 171, ya], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", Te, 70, 174, Te], [mk, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, In], [mk, "r", 50, 174, 0], [1, "r", 49, 174, Da], [za, "r", 52, 175, Da], [Te, "r", 52, 176, Da], [Xn, "r", 51, 176, 0], [1, "r", 50, 176, Zj], [mk, "r", 49, 176, Rq], [1, "r", 48, 175, 0], [1, "r", 47, 175, ya], [Xn, "r", 48, 176, Rq], [1, "r", 69, 163, Rq], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [ie, "r", 73, 163, 0], [Xn, "r", 72, 163, 0], [Oq, "r", 73, 164, ya], [Te, "r", 72, 164, 0], [za, "r", 71, 164, mj], [1, "r", 70, 164, Da], [Te, "r", 69, 164, 0], [1, "r", 68, 164, ya], [1, "r", 68, 165, mj], [Oq, "r", 69, 165, Hi], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [Oq, "r", 74, 164, ya], [1, "r", 73, 165, mj], [ie, "r", 72, 166, Rq], [Te, "r", 71, 166, Rq], [mk, "r", 70, 166, 0], [ie, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, Rq], [Xn, "r", 26, 165, mj], [Oq, "r", 27, 165, Da], [mk, "r", 25, 165, wj], [1, "r", 24, 165, 0], [ie, "r", 23, 165, In], [1, "r", 22, 165, 0], [ie, "r", 21, 165, 0], [Xn, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [mk, "r", 24, 166, wj], [1, "r", 25, 166, Da], [1, "r", 26, 166, ya], [1, "r", 27, 166, In], [za, "r", 28, 166, wj], [Te, "r", 28, 167, 0], [1, "r", 26, 167, wj], [za, "r", 25, 167, ya], [1, "r", 24, 167, mj], [Te, "r", 23, 167, 0], [1, "r", 22, 167, 0], [mk, "r", 27, 167, mj], [ie, "r", 29, 166, Da], [za, "r", 29, 167, Rq], [1, "r", 28, 168, Zj], [ie, "r", 27, 168, 0], [za, "r", 26, 168, Hi], [1, "r", 25, 168, wj], [1, "r", 24, 168, mj], [1, "r", 23, 168, 0], [1, "r", 27, 169, Hi], [za, "r", 26, 169, 0], [za, "r", 25, 169, Zj], [Te, "r", 24, 169, Da], [Xn, "r", 23, 169, ya], [1, "r", 22, 168, wj], [Oq, "r", 21, 167, Rq], [1, "s", 1, 52, 174, 1], [1, "t", ci, 50, 177, Rq], [ie, "t", 4, 49, 177, Hi], [ie, "b", 0, 47, 174, 0], [Te, "b", 0, 69, 166, 0], [Te, "t", 2, 68, 166, 0], [1, "t", q, 74, 163, 0], [Oq, "t", Te, 73, 162, Rq], [1, "s", Da, 73, 166, 1], [Oq, "s", Pn, 76, 165, mk], [Oq, "g", 2, 59, 175, Xn], [mk, "p", Hi, 78, 168, 1], [1, "p", ya, 61, 162, Oq], [za, "p", Rq, 42, 170, Xn], [1, "p", Rq, 20, 174, 1], [Xn, "p", In, 16, 160, 1], [1, "b", 1, 23, 164, 0], [Oq, "b", Oq, 28, 169, 0], [ie, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, wj], [1, "t", 1, 15, 171, Da], [za, "t", nr, Zn, 175, ya], [1, "t", 5, Dq, 166, Zj], [ie, "t", q, 26, 163, Rq], [ie, "s", 1, 29, 165, 1], [Xn, "t", 5, pk, 167, Da], [1, "t", In, 29, 176, mj], [1, "b", Pn, 30, 175, 0], [1, "t", 2, 24, 177, 0], [Xn, "b", ie, 37, 174, 0], [1, "b", ya, 35, 172, 0], [1, "b", nq, 37, 170, Rq], [ie, "t", ba, 38, 169, 0], [za, "t", 4, 34, 173, 0], [Xn, "t", M, 38, 175, 0], [Oq, "b", 2, 39, 173, ya], [za, "t", 3, 37, 176, 0], [Xn, "t", Fr, 30, 168, 0], [ie, "s", jk, 35, 176, za], [Xn, "s", 1, 41, 175, ie], [ie, "b", pq, 53, 176, ya], [1, "t", Fk, 55, 173, 0], [ie, "t", Eq, 45, 170, 0], [Oq, "b", 1, 53, 162, Da], [1, "b", In, 50, 164, Da], [1, "t", 2, 54, 163, Rq], [ie, "t", 3, 49, 165, In], [Xn, "t", 4, 48, 160, Zj], [1, "t", $i, 57, 164, wj], [1, "t", ba, 66, 162, Zj], [Oq, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, In], [mk, "t", 3, 85, 162, 0], [Te, "t", ta, 81, 162, Hi], [mk, "t", kq, 88, 163, 0], [ie, "t", ie, 84, 166, In], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, Zj], [1, "s", 1, 57, 162, Te], [Te, "b", mk, 39, 161, Zj], [za, "b", Hi, 34, 164, ya], [Oq, "b", jk, 54, 164, 0], [mk, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, Zj], [ie, "t", Vn, 63, 169, 0], [1, "t", Gi, 63, 174, 0], [mk, "t", Xn, 62, 175, 0], [mk, "t", Fk, 40, 162, 0], [Xn, "t", 1, 63, 180, Rq], [Oq, "t", 2, 64, 179, Da], [1, "t", H, 35, 165, 0], [1, "s", 1, 63, 173, ie], [1, "s", 2, 40, 165, 1], [1, "b", In, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, wj], [Xn, "de", 22, 83, 175, wj], [Oq, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, wj], [Oq, "de", 19, 68, 168, 0], [Xn, "de", bq, 65, 163, 0], [1, "de", bq, 75, 162, 0], [1, "de", bn, 80, 162, 0], [1, "de", Dq, 88, 159, mj], [Te, "de", 19, 87, 164, Da], [1, "de", Be, 61, 177, 0], [1, "de", 19, 59, 172, 0], [ie, "de", 19, 59, 167, 0], [Xn, "de", b, 53, 165, 0], [1, "de", b, 56, 163, Rq], [ie, "de", 19, 51, 161, Zj], [1, "de", bn, 48, 167, 0], [1, "de", Be, 47, 170, wj], [Oq, "de", bn, 41, 163, In], [mk, "de", ha, 37, 161, Hi], [Xn, "de", 19, 36, 166, 0], [1, "de", b, 36, 171, mj], [1, "de", 19, 34, 174, Hi], [za, "de", Jj, 40, 172, mj], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, wj], [Oq, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [ie, "de", 19, 64, 181, Hi], [ie, "de", Dk, 64, 175, Hi], [Te, "de", Dk, 79, 172, Zj], [1, "de", 19, 30, 170, 0], [1, "de", Dk, 17, 168, 0], [za, "de", b, Wa, 173, 0], [1, "de", Dk, F, 162, 0], [1, "de", Dq, $o, 167, 0], [mk, "de", bq, qi, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", bq, 83, 195, wj], [1, "de", 2, 85, 163, 0], [1, "de", xj, 80, 164, mj], [Te, "de", Hj, 84, 169, wj], [1, "de", 2, 55, 165, 0], [mk, "de", ci, 46, 163, 0], [za, "de", 2, 66, 169, In], [za, "de", wj, 63, 175, Rq], [1, "de", ya, 34, 164, Zj], [za, "de", 0, ro, 160, Da], [1, "de", 2, 40, 160, Rq], [1, "de", 2, 53, 160, In], [1, "de", xq, 14, 170, ya], [ie, "de", H, Dk, 175, 0], [1, "de", 2, 23, 176, In], [mk, "de", 5, 60, 147, wj], [Oq, "de", 33, 59, 160, Hi], [Xn, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [ie, "de", 33, 62, 140, mj], [1, "de", 33, 43, 127, 0], [Te, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [Te, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", Te, 44, 156, 0], [1, "t", Hj, 45, 157, 0], [ie, "b", 0, 75, 156, Rq], [1, "t", nq, 76, 157, Rq], [1, "t", 5, 62, 157, 0], [Oq, "t", z, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, ya], [Oq, "t", Hj, 27, 157, mj], [1, "t", 4, 21, 156, 0], [mk, "t", 4, 56, 159, In], [Xn, "f", 1, 94, 153, 1], [za, "f", 2, 93, 153, 1], [1, "f", H, 99, 153, Te], [ie, "f", 1, 98, 153, Oq], [mk, "f", mj, 97, 153, 1], [1, "f", Te, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, Hi], [Oq, "b", 3, 43, 281, 0], [Te, "de", 50, 24, 39, mj], [1, "de", 50, 21, 39, wj], [mk, "de", 50, 22, 43, 0], [ie, "de", 50, Ga, 34, ya], [1, "de", 50, 18, 26, Hi], [za, "de", 50, 44, 42, mj], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, Rq], [za, "de", 50, 77, 44, Zj], [ie, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [ie, "de", 50, 20, 41, 0], [1, "de", 50, hr, 21, ya], [mk, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, Da], [ie, "de", 50, 17, 17, 0], [Te, "de", 50, 18, vr, Rq], [mk, "de", 50, hr, 9, 0], [mk, "de", 50, 52, 41, ya], [1, "de", 50, 82, 39, Da], [1, "de", 50, 86, 38, Da], [Xn, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [Oq, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, Hi], [za, "de", 50, 86, Pq, 0], [1, "de", 50, 29, 42, Hi], [Oq, "de", $o, 74, 37, wj], [Oq, "de", 9, 76, 22, 0], [Te, "de", Bo, 79, 24, wj], [1, "de", ra, 77, Un, Hi], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [Te, "de", 36, 21, 36, 0], [Oq, "de", 28, 23, 22, wj], [1, "de", 28, 27, 31, 0], [za, "de", 28, 69, 36, 0], [mk, "de", 28, 80, 20, 0], [za, "de", 51, 24, 155, Hi], [Xn, "de", 51, ia, 154, In], [1, "de", 51, Jq, 154, 0], [1, "de", 51, gr, 156, Rq], [1, "de", 51, 16, 154, Hi], [1, "de", 51, wq, 154, 0], [1, "de", 51, 23, 154, 0], [ie, "de", 51, Pj, 157, wj], [Xn, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, mj], [1, "de", 51, 86, 154, In], [1, "de", 51, 88, 156, mj], [1, "de", 51, 82, 154, 0], [mk, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [Oq, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [ie, "de", 51, 67, 154, 0], [Oq, "de", 51, 60, 154, wj], [mk, "de", 51, 57, 154, wj], [1, "de", 51, 65, 154, Rq], [Oq, "de", 51, 68, 156, 0], [za, "de", 51, 59, 156, 0], [Xn, "de", 51, 55, 154, Da], [za, "de", 51, 54, 154, 0], [za, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, ya], [Te, "de", 51, 49, 154, wj], [Xn, "de", 51, 46, 154, Da], [za, "de", 51, 44, 154, 0], [ie, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, Da], [1, "de", 51, 38, 154, Zj], [1, "de", 51, 39, 156, Da], [1, "de", 51, 34, 154, 0], [1, "de", 5, ha, 142, Da], [1, "de", 5, 37, 147, ya], [Te, "de", Ni, 53, 147, 0], [1, "de", 6, 69, 150, 0], [mk, "de", $i, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", nj, 28, 137, Rq], [Te, "de", 4, 15, 137, Da], [mk, "de", $i, 48, 134, 0], [1, "de", 5, 67, 135, 0], [Te, "de", 34, 84, 155, 0], [Te, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, wj], [Xn, "de", 35, 56, 157, Hi], [Oq, "de", 35, 65, 159, Da], [ie, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, Zj], [Xn, "de", 35, 8, 155, 0], [1, "de", 33, ja, 155, 0], [ie, "de", 33, 33, 158, 0], [za, "de", 36, 78, 155, ya], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, Hi], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [Te, "fo", 2, 45, 36, Zj], [ie, "fo", lr, 53, 34, 0], [Oq, "fo", ie, 51, 35, wj], [1, "fo", 1, 58, 35, 0], [1, "fo", mk, 33, 35, Da], [1, "fo", Oq, 31, 33, wj], [1, "fo", 2, 29, 36, Zj], [za, "fo", xj, 56, 36, 0], [ie, "fo", 2, 60, 37, 0], [mk, "fo", 2, 45, 32, 0], [1, "fo", Hj, 22, 25, Da], [1, "fo", 2, 21, 35, wj], [1, "de", 52, 90, 208, 0], [ie, "de", W, 94, 250, wj], [1, "de", Ri, 95, 253, Rq], [1, "cs", 0, 140, Fk, 1], [1, "cs", Pn, 139, Oj, Te], [za, "cs", pq, 138, 5, 1], [1, "cs", 2, 138, 6, za], [1, "cs", pq, 139, 6, Xn], [1, "cs", xq, 141, nk, 1], [mk, "cs", 2, 140, U, za], [1, "la", 3, 143, 7, Xn], [1, "la", 3, 139, wk, Xn], [1, "cs", Hi, 137, 7, 1], [1, "cs", 1, 138, 8, Xn], [za, "cs", xj, 137, 6, za], [ie, "cs", 2, 137, br, Oq], [1, "cs", 2, 136, 7, Xn], [1, "cs", lr, 138, 9, mk], [Te, "cs", fn, 139, Ca, 1], [za, "cs", 3, 136, Hr, ie], [Te, "cs", nq, 137, 9, ie], [Te, "de", 53, 92, 165, Hi], [Oq, "de", 53, 92, 180, ya], [1, "de", 53, 92, 188, 0], [za, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [Xn, "de", 54, 90, 153, ya], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, Da], [Te, "de", 54, 87, 153, wj], [1, "de", 54, 86, 153, 0], [ie, "de", 54, 85, 153, mj], [Oq, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, Rq], [1, "de", 54, 82, 153, Da], [Oq, "de", 54, 81, 153, mj], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, mj], [1, "de", 54, 78, 153, ya], [Oq, "de", 54, 77, 153, Zj], [Xn, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [za, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [za, "de", 54, 72, 153, Rq], [za, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, Zj], [Xn, "de", 54, 68, 153, In], [mk, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, Da], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, Hi], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, mj], [1, "de", 54, 62, 153, 0], [za, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, wj], [Oq, "de", 54, 57, 153, In], [Oq, "de", 54, 58, 153, 0], [Xn, "de", 54, 56, 153, ya], [za, "de", 54, 55, 153, Da], [Te, "de", 54, 54, 153, 0], [mk, "de", 54, 53, 153, Da], [mk, "de", 54, 52, 153, Zj], [Te, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, Rq], [1, "de", 54, 49, 153, 0], [ie, "de", 54, 48, 153, 0], [Oq, "de", 54, 47, 153, 0], [za, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, Hi], [Te, "de", 54, 44, 153, In], [ie, "de", 54, 43, 153, 0], [mk, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, mj], [Xn, "de", 54, 40, 153, wj], [1, "de", 54, 39, 153, 0], [ie, "de", 54, 37, 153, Rq], [1, "de", 54, 38, 153, In], [Oq, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, ya], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, Da], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [mk, "de", 54, 30, 153, In], [Te, "de", 54, 29, 153, Zj], [Xn, "de", 54, 28, 153, mj], [za, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [Oq, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, In], [za, "de", 54, 21, 153, mj], [Te, "de", 54, 20, 153, Da], [1, "de", 54, Dk, 153, 0], [1, "de", 54, io, 153, 0], [1, "de", 54, 17, 153, Rq], [1, "de", 54, 16, 153, Da], [1, "de", 54, _o, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, hq, 153, 0], [1, "de", 54, 12, 153, In], [za, "de", 54, ke, 153, 0], [Oq, "de", 54, jn, 153, 0], [mk, "de", 54, 8, 153, Da], [1, "de", 54, 9, 153, 0], [za, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [mk, "de", 55, 83, 10, ya], [Oq, "de", 55, 83, 11, Hi], [1, "de", 55, 83, 12, 0], [Xn, "de", 55, 83, 13, 0], [1, "de", 55, 83, Mi, 0], [1, "de", 55, 83, 15, mj], [za, "de", 55, 83, p, 0], [Xn, "de", 55, 83, 17, mj], [Oq, "de", 55, 83, so, 0], [1, "de", 55, 83, 18, 0], [ie, "de", 55, 83, 20, 0], [Oq, "de", 55, 83, 21, 0], [Te, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [za, "de", 55, 83, 24, Da], [Te, "de", 55, 83, 25, Hi], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, wj], [1, "de", 55, 83, 28, Rq], [1, "de", 55, 83, 29, Rq], [Oq, "de", 55, 83, 30, wj], [1, "de", 55, 83, 31, Zj], [mk, "de", 55, 83, 32, 0], [Te, "de", 55, 83, 33, mj], [1, "de", 55, 83, 34, wj], [mk, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, mj], [1, "de", 55, 83, 37, wj], [mk, "de", 55, 83, 38, wj], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, In], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, In], [Oq, "de", 55, 77, 38, 0], [Oq, "de", 55, 76, 38, 0], [Oq, "de", 55, 75, 38, 0], [Xn, "de", 55, 73, 38, Zj], [za, "de", 55, 74, 38, 0], [ie, "de", 55, 72, 38, Da], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, wj], [mk, "de", 55, 69, 38, wj], [1, "de", 55, 67, 38, Rq], [1, "de", 55, 66, 38, In], [Xn, "de", 55, 65, 38, 0], [Oq, "de", 55, 64, 38, Rq], [1, "de", 55, 63, 38, Hi], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [ie, "de", 55, 61, 38, Da], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, Rq], [Xn, "de", 55, 58, 38, 0], [ie, "de", 55, 56, 38, wj], [za, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, Zj], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [Xn, "de", 55, 49, 38, ya], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, Da], [mk, "de", 55, 46, 38, 0], [Oq, "de", 55, 45, 38, 0], [Te, "de", 55, 44, 38, 0], [za, "de", 55, 43, 38, Rq], [Xn, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, In], [1, "de", 55, 39, 38, 0], [za, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, Da], [Te, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, wj], [za, "de", 55, 35, 38, Zj], [1, "de", 55, 33, 38, ya], [Xn, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [za, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [Oq, "de", 55, 28, 38, 0], [mk, "de", 55, 27, 38, mj], [Xn, "de", 55, 26, 38, Da], [ie, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, Zj], [1, "de", 55, 23, 38, In], [1, "de", 55, 21, 38, Da], [za, "de", 55, 22, 38, Hi], [1, "de", 55, 20, 38, 0], [za, "de", 55, Be, 38, 0], [1, "de", 55, ha, 37, Da], [1, "de", 55, bn, 36, Rq], [ie, "de", 55, Dq, 35, mj], [ie, "de", 55, 19, 34, 0], [1, "de", 55, b, 33, 0], [za, "de", 55, 19, 32, ya], [Te, "de", 55, ha, 31, 0], [1, "de", 55, 19, 30, 0], [za, "de", 55, so, 28, Hi], [1, "de", 55, Be, 29, 0], [za, "de", 55, 19, 27, ya], [1, "de", 55, 19, 26, 0], [Xn, "de", 55, 19, 25, 0], [mk, "de", 55, bq, 24, Hi], [Te, "de", 55, Jj, 23, Hi], [1, "de", 55, Jj, 22, wj], [mk, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, b, 18, 0], [1, "de", 55, b, Dk, 0], [mk, "de", 55, 19, 16, mj], [ie, "de", 55, Dk, 17, Hi], [1, "de", 55, ha, Ga, 0], [mk, "de", 55, 19, 14, In], [ie, "de", 55, 19, 13, Zj], [1, "de", 55, Dk, F, wj], [1, "de", 55, 19, yq, ya], [1, "de", 55, so, wa, In], [1, "de", 55, bq, 9, mj], [1, "de", 55, 19, On, 0], [Te, "de", 55, 84, 35, Zj], [ie, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [za, "de", 50, 84, 24, 0], [mk, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, Hi], [Xn, "de", 55, 84, G, 0], [1, "de", 50, 84, 15, In], [1, "de", 55, 84, 8, Rq], [Xn, "de", 55, 84, Lo, 0], [1, "de", 50, 85, d, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, Rq], [1, "de", 55, 72, 39, Rq], [1, "de", 55, 74, 39, 0], [ie, "de", 55, 66, 39, Zj], [1, "de", 55, 65, 39, 0], [ie, "de", 50, 67, 41, In], [Te, "de", 55, 56, 39, mj], [Te, "de", 55, 58, 39, Da], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, mj], [1, "de", 55, 42, 39, Rq], [Te, "de", 50, 43, 39, wj], [1, "de", 50, 41, 39, wj], [ie, "de", 50, 37, 39, 0], [Xn, "de", 55, 36, 39, Rq], [Te, "de", 55, 32, 39, wj], [Oq, "de", 50, 31, 39, mj], [ie, "de", 55, 23, 39, 0], [Te, "de", 55, 18, 37, mj], [1, "de", 50, 18, 36, wj], [Te, "de", 55, hr, 35, Zj], [1, "de", 50, V, 34, mj], [mk, "de", 55, 18, 31, 0], [Xn, "de", 50, hr, 30, Rq], [1, "de", 55, W, 25, 0], [mk, "de", 50, hr, 24, Hi], [1, "de", 55, Pj, qr, 0], [1, "de", 55, 18, Sq, Zj], [1, "de", 50, V, Ga, wj], [Oq, "de", 55, 18, _a, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, wj], [ie, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, mj], [Te, "de", 54, 76, 154, 0], [za, "de", 54, 70, 154, Da], [Xn, "de", 54, 66, 154, mj], [za, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [ie, "de", 54, 53, 154, 0], [mk, "de", 54, 45, 154, 0], [mk, "de", 54, 42, 154, Hi], [za, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [Oq, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [mk, "de", 54, kk, 154, wj], [1, "de", 54, qk, 154, Hi], [ie, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [Xn, "de", 53, 93, 156, Zj], [1, "de", 53, 93, 158, 0], [za, "de", 52, 91, 157, Da], [1, "de", 53, 93, 159, Hi], [Xn, "de", 53, 93, 161, 0], [Oq, "de", 53, 93, 162, 0], [Xn, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, Hi], [1, "de", 53, 93, 165, 0], [Xn, "de", 53, 93, 166, 0], [mk, "de", 53, 93, 167, 0], [Oq, "de", 52, 91, 167, Hi], [1, "de", 53, 93, 169, 0], [ie, "de", 53, 93, 168, 0], [Te, "de", 53, 93, 170, Da], [1, "de", 53, 93, 171, In], [1, "de", 53, 93, 173, wj], [Oq, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, Hi], [1, "de", 53, 92, 169, wj], [mk, "de", 53, 93, 178, Da], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, Zj], [1, "de", 53, 93, 181, wj], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, ya], [1, "de", 53, 93, 186, 0], [1, "de", hr, 95, 185, ya], [1, "de", 53, 93, 187, mj], [Te, "de", 53, 93, 188, mj], [1, "de", 52, 91, 186, Da], [1, "de", 53, 93, 190, ya], [1, "de", 53, 93, 192, Hi], [1, "de", 53, 93, 195, Da], [1, "de", 53, 93, 194, Hi], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, wj], [1, "de", 53, 93, 198, Hi], [Oq, "de", 53, 93, 201, ya], [Te, "de", 53, 93, 202, ya], [mk, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, wj], [ie, "de", 53, 93, 206, 0], [mk, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, wj], [za, "de", 53, 93, 209, 0], [ie, "de", 53, 93, 210, Rq], [Xn, "de", 53, 93, 212, 0], [ie, "de", 52, 91, 204, wj], [ie, "de", 53, 93, 213, Rq], [Te, "de", 53, 93, 214, In], [1, "de", 53, 93, 215, 0], [mk, "de", 53, 93, 216, Rq], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [Te, "de", 53, 93, 219, 0], [Oq, "de", 53, 93, 220, In], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, wj], [mk, "de", 52, 92, 202, 0], [ie, "de", 53, 92, 201, mj], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [mk, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, In], [za, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, Zj], [za, "de", 53, 93, 228, Da], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, Rq], [1, "de", 52, 92, 221, 0], [Oq, "de", 52, 92, 225, 0], [Xn, "de", 52, 93, 226, Da], [1, "de", 52, 93, 224, Da], [1, "de", 52, 93, 208, In], [za, "de", 52, 93, 211, 0], [Oq, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, In], [Oq, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, In], [mk, "de", 52, 93, 193, Hi], [1, "de", 52, 93, 182, Hi], [ie, "de", 52, 93, 185, In], [za, "de", 52, 93, 172, Zj], [1, "de", 52, 93, 174, 0], [Xn, "de", 52, 93, 177, Rq], [za, "de", 52, 93, 155, ya], [mk, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [Te, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [Te, "de", 53, 93, 231, Zj], [Oq, "de", 53, 93, 232, Hi], [1, "de", 53, 93, 234, Da], [Xn, "de", 52, 93, 230, 0], [Oq, "de", 52, 92, 228, Da], [mk, "de", 53, 93, 235, Hi], [1, "de", 53, 93, 236, Da], [ie, "de", 53, 93, 237, 0], [za, "de", 53, 93, 239, 0], [Oq, "de", 53, 93, 240, Da], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [Te, "de", 52, 93, 242, Zj], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, ya], [Xn, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, wj], [1, "de", 53, 93, 248, 0], [mk, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [ie, "de", 53, 93, 251, wj], [1, "de", 53, 93, 252, Da], [1, "de", 53, 93, 254, wj], [1, "de", 52, 93, 253, ya], [Xn, "de", 52, 93, zn, 0], [za, "de", 53, 93, 257, mj], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [Te, "de", 53, 93, 259, Da], [Te, "de", 52, 93, 260, Zj], [mk, "de", 53, 93, 263, Zj], [mk, "de", 53, 93, 264, Zj], [1, "de", 53, 93, 265, Hi], [Te, "de", 52, 93, 266, Zj], [ie, "de", 53, 93, 267, Da], [Oq, "de", 52, 93, 268, 0], [mk, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [za, "de", 53, 93, 277, wj], [Te, "de", 52, 93, 278, Da], [1, "de", 53, 93, 279, 0], [za, "de", 52, 93, 280, Da], [1, "de", 52, 93, 283, 0], [Xn, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, ya], [Xn, "de", 53, 93, 286, ya], [Te, "de", 52, 93, 287, 0], [Oq, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [Oq, "de", 52, 93, 290, Rq], [1, "de", 52, 93, 291, Hi], [1, "de", 53, 93, 292, 0], [ie, "de", 52, 93, 293, Da], [1, "de", 53, 93, 294, mj], [mk, "de", 52, 93, 295, Hi], [1, "de", 52, 93, 296, 0], [Oq, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, Rq], [za, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, Zj], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, Da], [za, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, ie], [za, "cs", pq, 223, 105, 1], [mk, "cs", Pn, 223, 102, za], [Xn, "cs", pq, 223, 103, 1], [1, "la", qo, 141, 8, 1], [1, "cs", 2, 140, Lo, 1], [mk, "la", Fr, 142, Qk, 1], [mk, "de", Pe, 81, 149, ya], [za, "f", In, 83, 148, 1], [za, "f", 1, 82, 149, ie], [Te, "de", 34, 81, 156, 0], [mk, "de", 51, 17, 9, In], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, fk, 0], [Te, "cs", nq, 223, 106, 1], [Te, "p", 0, 119, 279, ie], [mk, "p", mj, 109, 242, za], [1, "cs", 1, 29, 9, za], [1, "cs", 2, 30, 9, mk], [Te, "cs", 2, 31, 9, 1], [mk, "cs", jk, 32, pn, mk], [mk, "cs", Pn, 33, 9, za], [1, "cs", lr, 69, 9, 1], [ie, "cs", 2, 71, 9, mk], [1, "cs", 2, 70, w, za], [ie, "cs", ie, 72, 9, Xn], [1, "cs", Pn, 73, Qk, za], [Oq, "de", gn, 31, 10, Rq], [1, "de", te, 29, Ra, ya], [Te, "de", 10, 44, 10, Zj], [mk, "de", 4, 87, 10, 0], [1, "de", 4, 86, sk, 0], [1, "de", 5, 87, 9, Da], [1, "de", z, hq, Ra, Hi], [1, "de", Mq, la, Jq, 0], [1, "de", Pe, 16, 10, 0], [za, "de", 4, m, 10, mj], [Oq, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, se, 1], [Oq, "cs", lr, 150, 9, Te], [1, "cs", Pn, 153, 9, mk], [mk, "cs", H, 155, 9, Xn], [1, "cs", mk, 149, Qk, mk], [1, "cs", 1, 154, rr, Te], [1, "cs", Hk, 147, Qj, za], [1, "cs", 3, 151, rr, 1], [mk, "cs", 3, 152, pn, mk], [1, "cs", qo, 156, 9, 1], [Oq, "cs", yr, 157, 9, Te], [1, "cs", I, 158, $o, 1], [1, "cs", 3, 159, $o, ie], [Te, "cs", 3, 160, se, Te], [Oq, "cs", wj, 161, 9, 1], [ie, "cs", 2, 162, Lo, 1], [1, "cs", 2, 163, 9, Te], [1, "cs", 1, 164, $o, 1], [Xn, "cs", 2, 165, 9, Oq], [1, "cs", 3, 166, $o, 1], [Te, "cs", 3, 168, 9, 1], [za, "cs", 3, 170, 9, Xn], [ie, "cs", ie, 169, pn, 1], [1, "cs", lr, 167, pn, mk], [mk, "cs", lr, 171, 9, 1], [Xn, "cs", Hj, 173, pn, 1], [1, "cs", 2, 172, 9, Te], [1, "cs", 2, 174, Qk, 1], [1, "cs", Xn, 175, R, za], [1, "cs", qo, 176, pn, Te], [Oq, "cs", 3, 178, R, mk], [1, "cs", 3, 179, se, 1], [Oq, "cs", 0, 180, 9, za], [za, "cs", pq, 177, se, 1], [1, "cs", Pn, 182, Qj, Te], [1, "cs", lr, 181, 9, 1], [mk, "cs", 2, 183, se, 1], [mk, "cs", jk, 184, Qk, 1], [1, "cs", 2, 185, 9, Xn], [mk, "cs", 2, 186, 9, Oq], [za, "cs", 1, 187, 9, Oq], [Oq, "cs", 2, 188, Lo, 1], [za, "cs", I, 189, fk, za], [1, "cs", yr, 190, Qk, mk], [ie, "cs", Hk, 191, 9, 1], [Xn, "cs", lr, 192, Qj, 1], [Xn, "cs", Hi, 193, 9, Oq], [1, "cs", H, 194, Qj, 1], [za, "cs", pq, 196, Qk, ie], [Te, "cs", 2, 198, 9, Oq], [ie, "cs", Pn, 200, 9, 1], [ie, "cs", qo, 195, 9, 1], [1, "cs", yr, 197, 9, Te], [1, "cs", nq, 199, 9, za], [1, "cs", 0, 201, R, Oq], [1, "cs", 2, 202, Ca, ie], [1, "cs", H, 203, fk, za], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, $o, 1], [1, "cs", 3, 206, R, 1], [1, "cs", yr, 205, Qk, 1], [1, "cs", 3, 204, rr, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", qo, 215, 9, Xn], [Xn, "cs", 3, 216, 9, Xn], [Te, "cs", 3, 217, R, 1], [1, "cs", 3, 218, Qk, 1], [mk, "b", Da, z, 159, 0], [za, "b", Hi, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [xq, "isl", 2, 119, 277, 0], [pq, "isl", xj, 109, 244, Hi], [lr, "isl", 2, 114, 205, wj], [jk, "isl", za, 120, 150, 0], [xq, "isl", 2, 154, 129, Rq], [xq, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, Rq], [2, "isl", 1, 214, 128, 0], [2, "isl", Oq, 209, 132, 0], [Xn, "la", I, 217, hn, 1], [1, "la", 1, 215, 19, ie], [1, "la", mj, 212, 18, 1], [1, "la", Pe, 214, 18, Oq], [mk, "la", nj, 216, 19, 1], [mk, "la", ba, 211, 20, za], [Oq, "la", 3, 210, Be, 1], [mk, "la", fn, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", fn, 214, 22, Oq], [Te, "la", fn, 214, 24, Xn], [1, "la", 4, 214, 26, 1], [Oq, "la", 4, 213, 27, 1], [Te, "la", 1, 212, 28, 1], [Te, "la", 2, 212, 29, Xn], [1, "la", Fk, 212, 30, za], [za, "la", 4, 208, 19, 1], [za, "la", 4, 207, 19, Te], [1, "la", 1, 206, Be, Xn], [1, "la", 1, 205, 19, mk], [1, "la", 2, 204, bq, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, tr, 1]];
  const Lr = mj;
  var Nr = 0;
  const Qr = z;
  const Rr = Ni;
  const Tr = ea;
  const Ur = Nk;
  const Vr = br;
  const Wr = Wa;
  var Xr = {
    ᐃᐃΔΔⵠ: ["#133A2B", "#042b30"],
    ⲆⲆᐃΔΔΔⲆⵠⲆ: ["#EBF2F0", "#136167"],
    ⲆᐃΔΔⲆΔⲆ: ["#4EB687", "#187484"],
    ΔⵠΔⲆᐃΔⵠ: ["#664516", "#13474C"],
    ᐃⲆᐃⵠⵠΔⲆ: ["#FCEFBB", "#0F4D48"],
    ⵠⵠⵠⲆⲆΔΔ: ["#C1AA7E", "#0F423D"],
    ᐃⲆⵠⲆⵠⲆⵠ: ["#594837", Ⲇ[sj]],
    ᐃⲆⵠⲆᐃⲆΔ: ["#A5D6D6", "#539CA0"],
    ᐃⵠΔⲆⲆ: ["#0B6A84", "#09373F"],
    ⵠᐃⲆΔⲆᐃᐃ: ["#2A8B9B", "#0F464C"],
    ⵠᐃⵠⲆᐃⵠⲆ: ["#A9D6D3", "#115E60"],
    ⵠᐃΔⵠᐃᐃⵠ: ["#ECF7F9", "#539CA0"],
    ᐃⵠΔⲆⲆᐃΔ: ["#FFF", "#FFF"],
    ΔΔΔΔΔΔᐃ: ["#FFF", "#FFF"],
    ΔᐃⲆⲆΔⲆⵠ: ["#1C9BA4", "#00272F"],
    ΔᐃΔΔⲆ: ["#2D2017", "#031C1E"],
    ⲆᐃΔ: 0,
    ΔⲆⵠ: ie,
    ᐃⵠⲆⲆΔⵠⲆᐃⲆ: 2300,
    ⵠΔⵠⵠΔⵠΔⲆⲆ: 2290,
    ⵠⵠᐃⲆⵠⵠᐃ: 34,
    ⵠᐃⵠⵠΔᐃⲆ: M,
    ᐃⲆⵠᐃⲆᐃⵠ: 68,
    ΔⵠΔⲆⵠᐃⵠ: 34,
    ᐃᐃⲆⲆⵠᐃΔ: 5,
    ⲆⵠⲆΔⵠΔᐃ: za,
    ⵠΔᐃᐃΔⵠᐃ: 0.6,
    ⵠⵠΔⲆΔᐃⵠ: 0.25,
    ⲆᐃⲆⵠⲆⵠⵠ: 50,
    ⲆᐃᐃᐃⲆⲆⵠ: 10,
    ⵠⵠᐃⲆⲆⵠⵠ: 75,
    ᐃΔᐃᐃᐃⵠᐃ: 20,
    ⲆⵠᐃᐃᐃⲆᐃ: 5,
    ᐃᐃⲆΔⲆ: Nr++,
    ⲆⵠⵠⲆⲆ: Nr++,
    ⵠⵠΔⵠΔ: Nr++,
    ⵠᐃⲆΔΔ: Nr++,
    ᐃⲆⵠΔⲆ: Nr++,
    ⵠΔΔΔΔ: Nr++,
    ᐃΔⲆᐃΔ: Nr++,
    ΔᐃΔΔΔ: Nr++,
    ⲆΔⲆⲆⵠ: Nr++,
    ⵠΔᐃᐃⵠ: Nr++,
    ᐃⲆᐃⲆᐃ: Nr++,
    ᐃⵠⵠⵠΔ: Nr++,
    ᐃᐃΔⲆⲆ: Nr++,
    ⵠΔᐃⵠᐃ: Nr++,
    ⵠᐃᐃⵠΔ: Nr++,
    ᐃᐃᐃᐃⲆ: Nr++,
    ⲆⲆΔᐃᐃ: Nr++,
    ΔⲆᐃΔⵠ: Nr++,
    Ⲇᐃᐃᐃᐃ: Nr++,
    ⵠⵠΔΔⵠ: Nr++,
    Δⵠⵠⵠᐃ: Nr++,
    ᐃΔᐃⲆⲆ: Nr++,
    ⲆΔᐃΔᐃ: Nr++,
    ⲆᐃᐃΔᐃ: Nr++,
    ⵠᐃᐃΔᐃ: Nr++,
    Δᐃᐃⵠᐃ: Nr++,
    ΔᐃΔⲆⲆ: Nr++,
    ᐃⲆⲆⵠᐃ: Nr++,
    ᐃⵠΔΔⲆ: Nr++,
    ⵠⲆᐃᐃ: Nr++,
    ΔⲆᐃⵠΔ: Nr++,
    ΔⲆⲆⵠⲆ: Nr++,
    ⲆⵠΔⵠΔ: Nr++,
    ᐃΔⵠⲆᐃ: Nr++,
    ᐃΔⲆⵠΔ: Nr++,
    ⲆᐃΔⲆΔ: Nr++,
    ⲆⲆⵠⲆⲆ: Nr++,
    ⵠΔΔΔⵠ: Nr++,
    ᐃⵠⵠⵠᐃ: Nr++,
    ᐃⵠⲆⵠΔ: Nr++,
    ᐃⲆⲆΔΔ: Nr++,
    ᐃᐃⵠⲆⲆ: Nr++,
    ΔⲆΔⲆⲆ: Nr++,
    ⵠⲆⲆⵠⵠ: Nr++,
    ⲆᐃⵠΔᐃ: Nr++,
    ⵠⵠᐃᐃⲆ: Nr++,
    ᐃΔΔΔΔ: Nr++,
    ᐃⵠⵠⲆΔ: Nr++,
    ᐃⲆⵠⲆⲆ: Nr++,
    ᐃᐃΔⵠΔ: Nr++,
    ⲆΔΔⵠⵠ: Nr++,
    ⵠᐃⵠᐃΔ: Nr++,
    ⵠᐃⲆⲆⵠ: Nr++,
    ⲆⵠⲆᐃΔ: Nr++,
    ᐃΔΔᐃΔ: Nr++,
    ᐃⵠᐃΔⵠ: Nr++,
    Ⲇᐃⵠⵠᐃ: Nr++,
    ΔⵠᐃΔᐃ: Nr++,
    ᐃᐃⲆⵠⵠ: Nr++,
    ᐃⵠΔᐃΔ: Nr++,
    ⵠᐃΔΔⵠ: Nr++,
    ⲆⲆΔΔⵠ: Nr++,
    ⵠᐃᐃΔⵠ: Nr++,
    ⲆⲆᐃᐃⲆ: Nr++,
    ΔΔΔⲆΔ: Nr++,
    ⲆΔᐃΔⵠ: Nr++,
    ᐃᐃⲆᐃᐃ: Nr++,
    Δᐃᐃⵠⵠ: Nr++,
    ⵠΔΔᐃᐃ: Nr++,
    ΔᐃⵠⵠΔ: Nr++,
    ⵠΔⲆΔⲆ: Nr++,
    ⲆΔⵠΔΔ: Nr++,
    ᐃΔᐃΔⲆ: Nr++,
    ᐃᐃΔᐃⲆ: Nr++,
    ΔⲆΔΔΔ: Nr++,
    ᐃΔⵠᐃⵠ: Nr++,
    Δⵠᐃᐃᐃ: Nr++,
    ᐃⲆΔⵠⵠ: Nr++,
    ⵠᐃⵠⵠΔ: Nr++,
    ⲆⲆᐃᐃΔ: Nr++,
    ⵠᐃΔΔᐃ: Nr++,
    ⵠⵠΔᐃᐃ: Nr++,
    ΔᐃᐃᐃΔ: Nr++,
    ⲆΔⵠⵠᐃ: Nr++,
    ΔᐃⲆⵠⵠ: Nr++,
    ΔΔᐃⲆΔ: Nr++,
    ΔᐃⵠⲆΔ: Nr++,
    ⲆⵠΔᐃⲆ: Nr++,
    ⵠⲆⵠΔᐃ: Nr++,
    ᐃⵠⲆⵠⲆ: Nr++,
    ᐃⵠᐃⵠⵠ: Nr++,
    ⲆⵠΔΔΔ: Nr++,
    ᐃΔⵠⵠᐃ: Nr++,
    ⵠⵠᐃᐃΔ: Nr++,
    ΔᐃⲆᐃᐃ: Nr++,
    ᐃⲆΔⲆⵠ: Nr++,
    ⲆᐃᐃⲆᐃ: Nr++,
    ⲆⲆⲆⵠⵠ: Nr++,
    ΔΔⲆᐃᐃ: Nr++,
    ⲆⲆⲆᐃΔ: Nr++,
    ⲆΔΔᐃΔⲆΔᐃⵠ: Nr++,
    ΔᐃⲆⵠⲆ: Nr++,
    ᐃᐃΔᐃΔ: Nr++,
    ⲆΔⲆᐃⲆ: Nr++,
    ΔΔⲆⵠⲆ: Nr++,
    ⲆⵠΔⵠⵠ: Nr++,
    ⲆⵠΔⲆⲆ: Nr++,
    ΔⵠΔⵠⵠ: Nr++,
    ⵠⵠⲆΔΔ: Nr++,
    ΔΔⵠⲆ: Nr++,
    ⵠᐃⲆⲆⲆ: Nr++,
    ᐃⲆⵠᐃ: Nr++,
    ᐃⲆΔⵠ: Nr++,
    ⲆⲆᐃⵠΔⲆⵠ: Nr++,
    ⵠⲆΔⵠᐃ: Nr++,
    ΔⵠⵠᐃⲆᐃΔ: Nr++,
    ⵠⵠᐃᐃⵠ: Nr++,
    ΔΔⵠⵠⲆ: Nr++,
    ⵠᐃΔᐃⵠᐃⵠ: Nr++,
    ⲆⲆᐃⵠᐃⲆⵠ: Nr++,
    ⵠΔΔΔⲆ: Nr++,
    Ⲇⵠⵠⵠ: Nr++,
    ᐃΔⵠⵠΔ: Nr++,
    ᐃⲆⵠᐃᐃ: Nr++,
    ⵠᐃⲆᐃⲆⲆᐃ: Nr++,
    ⲆᐃⲆᐃⵠ: Nr++,
    ⲆⲆΔⲆᐃ: Nr++,
    ΔᐃᐃⵠΔ: Nr++,
    ᐃⲆⵠΔᐃ: Nr++,
    ΔᐃΔⲆᐃ: Nr++,
    ⲆΔᐃΔⲆ: Nr++,
    ᐃⵠᐃⵠᐃ: Nr++,
    ⲆΔᐃΔΔ: Nr++,
    ⲆᐃᐃⵠΔ: Nr++,
    ⲆΔΔᐃⵠ: Nr++,
    ⵠΔⲆⲆΔ: Nr++,
    ⵠᐃⲆⲆᐃ: Nr++,
    ΔΔᐃⵠⲆ: Nr++,
    ⵠⲆΔⲆᐃ: Nr++,
    ⵠᐃΔⲆⵠ: Nr++,
    ⲆΔⲆΔΔΔⲆ: Nr++,
    ΔΔΔⵠⵠ: Nr++,
    ΔᐃΔᐃΔΔⵠ: Nr++,
    ⲆᐃᐃΔᐃᐃⲆ: Nr++,
    ⲆᐃΔᐃⲆⵠⵠ: Nr++,
    ⵠⵠⲆⵠⵠⵠⵠ: Nr++,
    ⲆΔΔᐃᐃ: Nr++,
    ⲆⲆⲆᐃⵠ: Nr++,
    ⵠⵠⲆⵠᐃ: Nr++,
    ⵠⵠⲆⵠⲆ: Nr++,
    ᐃⲆᐃⵠΔ: Nr++,
    ⲆⲆⵠⵠᐃ: Nr++,
    ΔⲆΔΔⲆ: Nr++,
    ⲆᐃΔⲆⵠ: Nr++,
    ⲆΔᐃⵠⲆ: Nr++,
    ΔⵠᐃⲆⵠ: Nr++,
    ΔⲆⵠⵠⵠ: Nr++,
    ⲆⲆⵠⵠΔ: Nr++,
    ᐃⵠᐃⲆⵠ: Nr++,
    ⲆⵠᐃᐃΔ: Nr++,
    ⵠⵠΔⵠⲆ: Nr++,
    ᐃΔⵠᐃⲆ: Nr++,
    ⲆⲆⲆⲆⵠ: Nr++,
    ΔᐃⵠⲆⲆ: Nr++,
    ᐃᐃᐃᐃᐃ: Nr++,
    ⵠᐃⲆᐃⵠ: Nr++,
    ⵠⲆΔᐃⵠⲆⲆ: Nr++,
    ᐃⲆⲆⲆⲆ: Nr++,
    ⲆᐃⲆΔΔ: Nr++,
    Ⲇᐃⵠᐃⵠ: Nr++,
    ⲆⵠᐃΔΔ: Nr++,
    ΔⵠΔⲆᐃⵠᐃ: Nr++,
    ΔⲆⲆⲆⵠⲆⲆ: Nr++,
    ᐃⲆⲆΔⵠⵠⵠ: Nr++,
    ⲆⵠⵠΔᐃ: Nr++,
    ⲆⵠⲆⵠⲆⲆᐃ: Nr++,
    ᐃⵠⵠⲆΔΔⲆ: Nr++,
    ⵠΔᐃⲆᐃΔΔ: Nr++,
    ⵠΔⵠⵠΔⵠⵠ: Nr++,
    ᐃⵠⲆⲆⵠΔΔ: Nr++,
    ΔⵠΔⲆⲆⵠⵠ: Nr++,
    ΔΔΔΔⲆᐃᐃ: Nr++,
    ᐃⲆΔⲆᐃᐃΔ: Nr++,
    ⵠΔᐃᐃᐃ: Nr++,
    ⵠᐃΔⵠΔ: Nr++,
    ᐃⲆΔᐃᐃ: Nr++,
    ⲆⲆΔⲆΔ: Nr++,
    ΔⲆᐃᐃⲆ: Nr++,
    ⲆⲆⲆⵠⲆΔᐃ: Nr++,
    ⵠᐃⵠΔⵠ: Nr++,
    ⲆᐃⵠΔΔ: Nr++,
    ⲆᐃⵠΔⵠⲆⵠ: Nr++,
    ⲆᐃΔᐃΔ: Nr++,
    ⵠᐃΔⲆⵠⲆⲆ: Nr++,
    ᐃⲆᐃᐃΔ: Nr++,
    ᐃΔᐃⲆᐃ: Nr++,
    ⲆⲆⵠⵠⲆⲆΔ: Nr++,
    ᐃΔᐃΔⵠⵠΔ: Nr++,
    ΔⲆⵠΔΔ: Nr++,
    ᐃΔᐃⵠⵠ: Nr++,
    ⲆⲆⲆΔᐃⵠΔ: Nr++,
    ⵠᐃΔⲆⲆ: Nr++,
    ᐃⵠᐃΔ: Nr++,
    ΔⲆⲆⵠΔ: Nr++,
    ⵠⲆᐃⲆᐃⵠᐃ: Nr++,
    ⲆᐃΔⵠᐃ: Nr++,
    ᐃᐃⲆᐃΔΔᐃ: Nr++,
    ⲆᐃΔΔⵠ: Nr++,
    ᐃᐃⲆⲆⲆΔΔ: Nr++,
    ⲆᐃⵠΔⲆ: Nr++,
    ᐃⲆⵠᐃᐃⵠᐃ: Nr++,
    ᐃᐃΔΔᐃᐃΔ: Nr++,
    ᐃⲆΔᐃⲆ: Nr++,
    ΔⵠⵠΔΔ: Nr++,
    ΔΔⲆᐃⲆ: Nr++,
    ΔⵠΔⲆΔ: Nr++,
    ⵠΔⲆⵠᐃ: Nr++,
    ᐃⵠⵠⲆᐃ: Nr++,
    Ⲇᐃⵠⵠⵠ: Nr++,
    ⵠⲆᐃᐃⲆ: Nr++,
    ᐃΔΔⵠᐃ: Nr++,
    ⵠᐃⵠᐃⵠ: Nr++,
    ᐃⲆⲆⲆᐃ: Nr++,
    ⵠⵠⲆΔⲆ: Nr++,
    ⵠᐃᐃⲆᐃ: Nr++,
    ΔⵠᐃⵠⵠΔΔ: Nr++,
    ᐃⵠⵠⲆᐃⵠᐃ: Nr++,
    ⵠⲆᐃⲆΔ: Nr++,
    ΔᐃΔΔΔᐃⲆ: Nr++,
    ⲆⵠᐃΔᐃ: Nr++,
    ⵠⲆⵠᐃᐃ: Nr++,
    ᐃⵠⵠᐃⵠ: Nr++,
    ⲆⵠΔᐃⵠ: Nr++,
    ⲆⲆΔⵠⲆ: Nr++,
    ⵠⵠⵠᐃⲆΔΔ: Nr++,
    ⵠᐃⲆⲆΔ: Nr++,
    ΔⵠΔΔⵠ: Nr++,
    ⵠⵠΔⲆⵠ: Nr++,
    ⵠΔⵠᐃⵠ: Nr++,
    ⵠΔᐃⵠⲆ: Nr++,
    ΔⵠΔΔⲆ: Nr++,
    ᐃⵠⵠΔⵠ: Nr++,
    ⵠΔⵠⵠⲆ: Nr++,
    ⲆᐃΔⲆᐃⵠΔ: Nr++,
    ΔⵠΔⲆⲆ: Nr++,
    ᐃⲆⵠᐃΔ: Nr++,
    ᐃΔᐃΔΔⵠᐃ: Nr++,
    ⵠⵠⲆᐃΔ: Nr++,
    ΔΔⵠⲆⲆ: Nr++,
    ΔᐃᐃⵠΔΔⵠ: Nr++,
    Δⵠᐃᐃⵠ: Nr++,
    ⵠᐃΔⲆᐃ: Nr++,
    ᐃᐃᐃΔⵠΔᐃ: Nr++,
    ᐃᐃᐃⲆⲆᐃΔ: Nr++,
    ᐃⲆΔⲆⵠⲆᐃ: Nr++,
    ᐃⲆΔᐃΔᐃⲆ: Nr++,
    ᐃⵠᐃⲆⵠΔⲆ: Nr++,
    ᐃΔᐃᐃᐃᐃᐃ: Nr++,
    ᐃΔΔΔⲆⵠᐃ: Nr++,
    ⲆⲆⵠⵠⵠⲆΔ: Nr++,
    ⵠΔᐃΔⵠ: Nr++,
    ⲆᐃⲆᐃᐃΔΔ: Nr++,
    ᐃΔΔⲆⵠᐃᐃ: Nr++,
    ᐃⲆᐃⵠⲆΔᐃ: Nr++,
    ⵠⵠⲆⵠΔ: Nr++,
    ΔΔⲆΔⵠⵠⵠ: Nr++,
    ⲆΔⵠΔᐃΔⲆ: Nr++,
    ΔᐃⲆⲆᐃⲆᐃ: Nr++,
    ΔⵠΔΔᐃⲆᐃ: Nr++,
    ΔⵠΔⵠᐃⵠᐃ: Nr++,
    ⵠΔⲆΔᐃⲆⵠ: Nr++,
    ᐃᐃᐃᐃⲆΔΔ: Nr++,
    ΔΔⵠᐃⵠⵠⵠ: Nr++,
    ΔΔⲆⲆⵠⵠᐃ: Nr++,
    ⵠⲆΔΔⲆΔᐃ: Nr++,
    ⵠᐃΔΔΔⲆᐃ: Nr++,
    ⵠⵠΔΔⲆⵠΔ: Nr++,
    ⵠᐃΔⲆⲆⲆᐃ: Nr++,
    ⲆᐃΔΔⲆⵠⵠ: Nr++,
    ⲆᐃⲆⵠ: Nr++,
    ᐃᐃⵠⵠᐃ: Nr++,
    ᐃᐃⲆΔⲆⵠⲆ: Nr++,
    ⲆΔᐃΔⵠⲆⵠ: Nr++,
    ᐃⲆ: Nr++,
    ᐃᐃⲆᐃⲆΔⵠ: Nr++,
    ⵠⲆⲆᐃᐃ: Nr++,
    ᐃᐃⵠᐃⲆ: Nr++,
    ΔΔᐃⵠΔᐃⲆ: Nr++,
    ΔᐃᐃⲆⲆ: Nr++,
    ⲆᐃΔⵠⲆᐃΔ: Nr++,
    ᐃⵠⵠⵠΔⵠΔ: Nr++,
    ᐃᐃⲆᐃⲆᐃⲆ: Nr++,
    ΔΔᐃΔⲆΔⲆ: Nr++,
    ᐃⵠⵠᐃᐃⵠᐃ: Nr++,
    ⵠⵠⵠⲆΔ: Nr++,
    ⲆΔΔΔᐃⲆΔ: Nr++,
    ⲆⲆⲆⲆⲆⲆᐃ: Nr++,
    ᐃⲆΔΔⵠⲆΔ: Nr++,
    ⲆⲆΔⵠᐃΔⲆ: Nr++,
    ΔⵠΔⵠⲆ: Nr++,
    ⵠⲆⲆΔΔΔⵠ: Nr++,
    ⵠᐃⲆΔⲆΔⲆ: Nr++,
    ΔᐃΔᐃⵠⲆᐃ: Nr++,
    ΔⲆΔⲆΔᐃΔ: Nr++,
    ⲆⵠⵠⲆᐃⵠⲆ: Nr++,
    ΔⵠΔΔΔᐃᐃ: Nr++,
    ᐃΔⵠᐃᐃⲆΔ: Nr++,
    ΔⵠᐃⲆΔ: Nr++,
    ⲆᐃᐃⲆΔΔΔ: Nr++,
    ⵠⲆⵠⲆⵠΔⲆ: Nr++,
    ⵠⲆᐃⵠᐃⵠᐃ: Nr++,
    ᐃΔⵠⲆᐃⲆᐃ: Nr++,
    ᐃⲆᐃΔᐃᐃΔ: Nr++,
    ⵠᐃΔⲆᐃᐃⵠ: Nr++,
    ⲆᐃⵠⲆᐃⵠⲆ: Nr++,
    ⲆⵠⵠⲆⲆⲆᐃ: Nr++,
    ⵠⵠⵠΔΔᐃⵠ: Nr++,
    ⵠᐃⲆⲆᐃᐃΔ: Nr++,
    ᐃᐃⵠΔⲆᐃⲆ: Nr++,
    ⲆΔᐃᐃⲆⲆΔ: Nr++,
    ΔΔΔΔⵠΔᐃ: Nr++,
    ᐃⲆᐃⲆΔ: Nr++,
    ⵠᐃⵠᐃⵠⵠᐃ: Nr++,
    ᐃⲆⲆⲆⲆΔᐃ: Nr++,
    ΔⵠⲆⵠⲆᐃΔ: Nr++,
    ⵠΔⲆⲆΔⵠΔ: Nr++,
    ΔⵠΔᐃⲆΔⵠ: Nr++,
    ΔᐃⵠᐃᐃⲆⵠ: Nr++,
    ⲆΔⵠⲆⲆⵠΔ: Nr++,
    ⵠᐃΔΔⵠⲆⲆ: Nr++,
    Δⵠᐃⵠⵠᐃᐃ: Nr++,
    ⵠΔⵠⵠⵠⵠᐃ: Nr++,
    ⵠⲆⵠⵠⵠⲆⵠ: Nr++,
    ⲆⵠⵠⲆᐃΔΔ: Nr++,
    ΔᐃⵠⲆᐃΔΔ: Nr++,
    ᐃᐃⵠⵠⲆΔⵠ: Nr++,
    ⵠᐃⵠΔⵠΔⲆ: Nr++,
    ⵠⲆⲆⲆᐃⵠᐃ: Nr++,
    ΔⲆΔᐃᐃΔΔ: Nr++,
    ΔⲆᐃΔᐃᐃⲆ: Nr++,
    ⲆⵠⲆᐃⲆⲆⵠ: Nr++,
    ⵠⵠⵠⵠⵠⲆᐃ: Nr++,
    ᐃⵠᐃⵠⵠΔΔ: Nr++,
    ⵠΔⵠⲆⵠᐃⵠ: Nr++,
    ⵠΔΔΔⵠΔⵠ: Nr++,
    ᐃΔⲆⲆⵠⵠΔ: Nr++,
    ᐃΔⵠΔΔᐃΔ: Nr++,
    ΔⲆᐃΔᐃᐃⲆⲆΔ: Nr++,
    ΔᐃΔΔⲆᐃⲆ: Nr++,
    ⵠᐃΔⵠᐃᐃΔ: Nr++,
    ⵠΔⵠⲆᐃⲆⲆ: Nr++,
    ᐃⵠᐃⵠᐃⲆΔ: Nr++,
    ΔⲆⵠΔⲆⵠⵠ: Nr++,
    ⲆᐃⵠᐃⲆⲆΔ: Nr++,
    ⵠⵠⲆⲆⵠⲆᐃ: Nr++,
    ⲆⲆᐃΔⵠΔⵠ: Nr++,
    ᐃΔΔᐃⵠᐃᐃ: Nr++,
    ⵠᐃᐃᐃᐃΔΔ: Nr++,
    ΔⲆⲆⲆⲆᐃⲆ: Nr++,
    ⲆᐃⲆⲆΔⲆΔ: Nr++,
    ⵠⵠⲆⵠΔⵠⲆ: Nr++,
    ᐃΔᐃⲆᐃΔⵠ: Nr++,
    ᐃΔⲆᐃⲆⲆΔ: Nr++,
    ⵠⵠᐃΔⵠⵠⲆ: Nr++,
    ⲆⲆⵠⵠΔⵠΔ: Nr++,
    ⲆⲆΔⲆΔⵠⲆ: Nr++,
    ΔᐃⲆΔⲆΔⲆ: Nr++,
    ⵠⲆⵠᐃⲆⲆΔ: Nr++,
    ΔⲆᐃΔΔᐃᐃ: Nr++,
    ᐃⵠⵠⲆⵠᐃⲆ: Nr++,
    ᐃⲆⲆⲆΔΔᐃ: Nr++,
    ΔᐃⲆⲆⵠⲆΔ: Nr++,
    ΔᐃⵠⵠᐃⲆⵠ: Nr++,
    ⵠΔⲆᐃᐃⲆᐃ: Nr++,
    ⲆⵠⵠΔΔΔᐃ: Nr++,
    ΔⲆᐃΔⲆⵠᐃ: Nr++,
    ΔⲆⲆᐃᐃΔΔ: Nr++,
    ᐃΔΔΔⲆⵠⲆ: Nr++,
    ⲆΔΔⵠΔⵠⲆ: Nr++,
    ᐃᐃᐃΔᐃΔⵠ: Nr++,
    ⲆΔⲆⵠⲆⵠΔ: Nr++,
    ΔⲆⵠᐃΔⵠⵠ: Nr++,
    ΔⵠⲆⲆⲆⲆΔ: Nr++,
    ⵠⲆᐃᐃΔⵠΔ: Nr++,
    ⲆΔᐃΔⲆΔΔ: Nr++,
    ᐃⵠᐃⵠΔⲆΔ: Nr++,
    ⲆⵠⵠⲆⵠᐃⵠ: Nr++,
    ⲆⵠᐃΔⲆᐃⵠ: Nr++,
    ΔⲆⲆᐃᐃΔⲆ: Nr++,
    ⲆⲆΔᐃⲆⲆⵠ: Nr++,
    ⲆⲆΔᐃⲆΔΔ: Nr++,
    ΔΔΔΔΔⲆⵠ: Nr++,
    ⲆᐃⵠⵠⵠⵠΔ: Nr++,
    ⵠⲆᐃⵠⲆᐃⵠ: Nr++,
    ⲆⵠⵠⵠⵠΔΔ: Nr++,
    ⵠⵠΔΔΔΔⲆ: Nr++,
    ΔⵠⵠᐃᐃΔᐃ: Nr++,
    ⲆⲆᐃΔⵠⵠⲆ: Nr++,
    ⵠⲆⵠΔⲆⵠᐃ: Nr++,
    ᐃⲆⲆᐃⲆΔⲆ: Nr++,
    ⵠᐃⲆΔⲆⵠⲆ: Nr++,
    ΔⲆΔᐃⲆⵠΔ: Nr++,
    ᐃᐃⵠⵠⲆΔΔ: Nr++,
    ⵠΔΔᐃⲆⵠᐃ: Nr++,
    ᐃᐃᐃⵠΔᐃΔ: Nr++,
    ΔⵠᐃΔⲆⵠⵠ: Nr++,
    ᐃⲆⲆΔΔⵠⵠ: Nr++,
    ⲆⲆⵠΔᐃᐃⲆ: Nr++,
    ᐃⵠⲆΔᐃᐃⵠ: Nr++,
    ⲆⲆⵠᐃΔⲆᐃ: Nr++,
    ⲆᐃⲆⵠᐃⵠᐃ: Nr++,
    ⵠⲆᐃΔᐃΔⲆ: Nr++,
    ᐃⲆⲆⵠΔⲆᐃ: Nr++,
    ᐃⵠᐃᐃᐃ: Nr++,
    ⵠⵠⵠΔΔⵠⵠⵠᐃ: Nr++,
    ⵠΔⵠᐃᐃ: Nr++,
    ⲆⵠⲆΔᐃ: Nr++,
    ⵠⵠᐃΔΔⵠⵠΔⲆ: Nr++,
    ⵠⲆΔᐃΔᐃⲆ: Nr++,
    ⲆⵠⲆᐃⵠ: Nr++,
    ⲆⵠΔΔⵠⵠΔ: Nr++,
    ⲆⲆⵠⵠⲆⲆᐃ: Nr++,
    ΔⲆⲆΔⵠⵠᐃ: Nr++,
    ⲆᐃⵠⲆΔⵠⲆ: Nr++,
    ⵠⵠΔⵠᐃΔⵠ: Nr++,
    ⲆⵠⵠΔᐃᐃⲆ: Nr++,
    ⲆΔⵠⲆⵠⲆⵠ: Nr++,
    ΔᐃⵠᐃᐃⲆᐃ: Nr++,
    ᐃⵠᐃⲆᐃⵠⲆ: Nr++,
    ΔⲆⵠⵠⲆⲆΔ: Nr++,
    ⲆⲆⵠⵠᐃⵠᐃ: Nr++,
    ⲆΔΔΔⲆᐃΔ: Nr++,
    ᐃΔⲆΔᐃᐃⲆ: Nr++,
    ⲆᐃⲆⵠⲆᐃⵠ: Nr++,
    ΔⵠᐃᐃⵠⲆⲆ: Nr++,
    ΔⲆⵠΔᐃⲆⲆ: Nr++,
    ⵠᐃⵠΔⵠⵠⵠ: Nr++,
    ⲆᐃⲆⲆⲆᐃⲆ: Nr++,
    ⲆᐃΔⵠⵠⵠΔ: Nr++,
    ᐃⵠⵠᐃⲆΔⵠ: Nr++,
    ΔⵠⵠΔⲆⵠΔ: Nr++,
    ⵠΔⲆᐃⵠᐃΔ: Nr++,
    ⲆⲆΔΔⵠⵠⵠ: Nr++,
    ΔⵠᐃΔΔⵠᐃ: Nr++,
    ΔᐃⵠⵠⲆΔΔΔΔ: Nr++,
    ⵠⲆⲆᐃΔ: Nr++,
    ⵠᐃⵠⵠⵠⵠΔ: Nr++,
    ᐃᐃᐃⵠΔⲆΔ: Nr++,
    ᐃⲆⵠⵠᐃⵠΔΔΔ: Nr++,
    ᐃⵠΔⵠⵠ: Nr++,
    ᐃΔⲆⲆΔ: Nr++,
    ᐃⵠⵠⲆΔⵠΔ: Nr++,
    ᐃᐃΔⵠΔᐃⵠ: Nr++,
    ΔᐃΔΔᐃᐃⲆ: Nr++,
    ⵠⵠⵠᐃⲆΔⵠ: Nr++,
    ⵠᐃⵠⲆΔᐃΔ: Nr++,
    ⲆΔⲆᐃⲆⵠᐃ: Nr++,
    ⲆᐃΔΔΔΔⵠ: Nr++,
    ΔⲆᐃⲆΔᐃⲆ: Nr++,
    ⵠⵠΔΔΔⲆΔ: Nr++,
    ᐃⵠᐃⵠΔΔᐃ: Nr++,
    ⲆᐃⲆⵠᐃᐃΔ: Nr++,
    ⲆΔΔⲆᐃⲆⵠ: Nr++,
    ⵠⲆⵠᐃⲆⵠᐃ: Nr++,
    ᐃᐃⵠᐃⲆΔΔ: Nr++,
    ΔΔΔᐃⵠΔⵠ: Nr++,
    ΔᐃΔΔΔΔᐃ: Nr++,
    ⲆⵠΔⲆΔᐃΔ: Nr++,
    ⵠΔⲆⲆⵠΔΔ: Nr++,
    ⵠᐃᐃⲆΔᐃΔ: Nr++,
    ⲆⵠⲆΔⵠΔⲆ: Nr++,
    ΔⲆⲆⵠΔⵠᐃ: Nr++,
    ⵠΔⵠⲆᐃⲆᐃ: Nr++,
    ⲆΔⵠΔⲆᐃⵠ: Nr++,
    ⵠⵠⵠᐃⵠⵠⵠ: Nr++,
    ᐃᐃⵠᐃᐃᐃΔ: Nr++,
    ΔΔᐃΔᐃⲆᐃ: Nr++,
    ΔᐃᐃᐃΔⵠΔ: Nr++,
    ᐃΔᐃΔⵠᐃΔ: Nr++,
    ᐃⲆⲆⵠⵠⲆᐃ: Nr++,
    ΔᐃⵠⵠΔⲆΔ: Nr++,
    ΔⵠΔⵠᐃΔΔ: Nr++,
    ᐃΔⵠⲆⲆⲆᐃ: Nr++,
    ᐃⲆⲆⵠᐃᐃⲆ: Nr++,
    ᐃⵠΔᐃⵠⵠΔ: Nr++,
    ⵠⵠᐃᐃⵠⲆΔ: Nr++,
    ⲆᐃⵠⵠΔⵠΔ: Nr++,
    ⲆⲆⵠᐃΔⲆΔ: Nr++,
    ᐃⲆᐃⲆᐃΔΔ: Nr++,
    ᐃΔΔⲆᐃᐃⵠ: Nr++,
    ⵠⵠᐃⵠΔᐃⲆ: Nr++,
    ⲆᐃⵠⲆΔΔⵠ: Nr++,
    ΔᐃⲆⲆⵠᐃⲆ: Nr++,
    ᐃⵠᐃΔᐃⵠⵠ: Nr++,
    ⵠⵠⲆⲆⵠᐃⵠ: Nr++,
    ⲆᐃⵠᐃᐃⲆᐃ: Nr++,
    ΔᐃⲆⵠⲆⲆⵠ: Nr++,
    ᐃⵠᐃⲆΔⵠⵠ: Nr++,
    ⲆⵠᐃⲆⲆⵠⵠ: Nr++,
    ΔⵠΔΔΔᐃⲆ: Nr++,
    ΔⲆⲆᐃΔⵠⲆ: Nr++,
    ᐃᐃᐃΔⵠⵠᐃ: Nr++,
    ᐃⵠⲆᐃΔᐃΔ: Nr++,
    ⲆⵠⵠᐃᐃΔΔ: Nr++,
    ⲆⵠⲆᐃⵠⵠΔ: Nr++,
    ⵠᐃΔΔⵠⲆᐃ: Nr++,
    ⵠⲆⲆΔⲆⲆⲆ: Nr++,
    ΔΔΔᐃⵠΔⵠ: Nr++,
    ⲆⲆⵠⲆΔᐃᐃ: Nr++,
    ΔⲆⵠⵠⲆⵠᐃ: Nr++,
    ΔⵠⲆΔⲆΔⲆ: Nr++,
    ΔⲆⵠΔΔⵠᐃ: Nr++,
    ᐃΔᐃΔᐃΔΔ: Nr++,
    ⲆⲆᐃⲆᐃΔᐃ: Nr++,
    ΔⲆⲆΔΔⵠⲆ: Nr++,
    ΔⲆⲆⵠᐃⲆᐃ: Nr++,
    ⲆⵠᐃΔⲆΔⲆ: Nr++,
    ᐃⵠΔⵠᐃⲆⲆ: Nr++,
    ΔᐃⲆⵠΔΔⵠ: Nr++,
    ⲆΔᐃΔⵠΔⲆ: Nr++,
    ⵠⵠᐃΔΔᐃᐃ: Nr++,
    ᐃᐃᐃⲆᐃⲆⲆ: Nr++,
    ⵠⲆⵠᐃΔᐃⵠ: Nr++,
    ΔΔΔΔⵠⲆⲆ: Nr++,
    ᐃᐃⵠⵠᐃⲆΔ: Nr++,
    ⵠⵠᐃⵠⲆⲆⲆ: Nr++,
    ᐃᐃΔⲆᐃᐃᐃ: Nr++,
    ΔᐃⵠⵠᐃⲆⲆ: Nr++,
    ᐃⵠΔⵠⲆⲆᐃ: Nr++,
    ⵠⵠⵠΔⵠⲆⲆ: Nr++,
    ⵠΔΔΔⵠᐃⵠ: Nr++,
    ᐃΔΔᐃⲆᐃᐃ: Nr++,
    ⵠⲆΔΔⵠᐃΔ: Nr++,
    ⵠⵠⵠΔΔⵠⲆ: Nr++,
    ⲆΔᐃⲆᐃⵠⲆ: Nr++,
    ⲆⲆⵠⲆΔΔⲆ: Nr++,
    ⲆΔᐃⵠⲆᐃΔ: Nr++,
    ᐃⵠᐃⵠᐃⵠΔ: Nr++,
    ⵠⲆⲆⲆⵠᐃⲆ: Nr++,
    ΔⵠᐃⵠᐃᐃⲆΔⲆ: Nr++,
    ⵠⲆᐃᐃⵠΔᐃ: Nr++,
    ⵠⲆⵠᐃΔⲆΔ: Nr++,
    Ⲇⵠᐃᐃᐃᐃⵠ: Nr++,
    ᐃᐃⵠⵠᐃΔᐃ: Nr++,
    ⲆΔⲆᐃⵠΔᐃΔⲆ: Nr++,
    POINTS: Nr++,
    ΔᐃⵠⵠᐃⲆᐃ: Nr++,
    ΔⵠⵠⲆΔᐃΔ: Nr++,
    ΔⲆᐃΔΔᐃⵠ: Nr++,
    ⵠᐃᐃⵠⵠⵠᐃ: Nr++,
    ᐃⲆⲆΔᐃΔⵠ: Nr++,
    ⵠⲆᐃⲆΔⲆⲆ: Nr++,
    ⵠᐃΔᐃⲆΔⲆ: Nr++,
    ᐃΔΔᐃΔΔΔ: Nr++,
    ⵠᐃΔΔᐃⲆᐃ: Nr++,
    ⲆᐃΔⲆⵠⵠᐃ: Nr++,
    ⲆᐃΔᐃⵠⲆⲆ: Nr++,
    ΔᐃΔᐃⵠᐃΔ: Nr++,
    ⲆΔⵠΔᐃⲆΔ: Nr++,
    ΔⲆΔΔⵠᐃⵠ: Nr++,
    ⵠᐃΔΔᐃᐃⵠ: Nr++,
    ΔᐃᐃᐃⲆⵠᐃ: Nr++,
    ⲆⲆⵠᐃΔⵠᐃ: Nr++,
    ⵠⲆⵠᐃⵠΔⵠ: Nr++,
    ⵠΔⲆⵠΔⵠⲆ: Nr++,
    ᐃⵠⵠⵠᐃᐃⵠ: Nr++,
    ⵠⵠΔⵠᐃᐃⵠ: Nr++,
    ΔⵠΔΔΔΔᐃ: Nr++,
    ᐃΔⵠᐃⵠᐃⲆ: Nr++,
    ⲆⲆΔⲆⵠⲆΔ: Nr++,
    ⵠⵠᐃⵠⵠⵠᐃ: Nr++,
    ΔⵠⲆⲆΔⲆⲆ: Nr++,
    ΔΔⲆⵠΔⵠⵠ: Nr++,
    ΔᐃⵠΔᐃⵠⲆ: Nr++,
    ᐃᐃⵠΔⲆⲆⲆ: Nr++,
    ΔᐃⲆⵠᐃⲆⲆ: Nr++,
    ⵠⲆⵠⵠΔⵠⵠ: Nr++,
    ⲆⲆⵠⵠΔⲆⵠ: Nr++,
    ΔᐃⲆᐃᐃΔᐃ: Nr++,
    ᐃᐃᐃⵠΔᐃᐃ: Nr++,
    ΔΔⲆΔⲆⵠⲆ: Nr++,
    ᐃⵠⲆⲆⲆᐃⵠ: Nr++,
    ⵠⵠⲆΔΔᐃⲆ: Nr++,
    ᐃⵠⲆΔΔⵠΔ: Nr++,
    ⲆⵠⵠⲆΔⵠᐃ: Nr++,
    ⵠⵠᐃΔⲆΔⵠ: Nr++,
    ⵠⲆⲆΔⲆⲆΔ: Nr++,
    ⲆᐃΔⲆᐃᐃⵠ: Nr++,
    ᐃⲆᐃΔⲆⵠᐃ: Nr++,
    ΔᐃᐃΔΔΔᐃ: Nr++,
    ⵠᐃΔⵠⲆΔΔ: Nr++,
    ⵠⵠᐃⲆᐃᐃⵠ: Nr++,
    ⵠᐃⵠΔⵠⲆⲆ: Nr++,
    ΔⵠⲆⲆᐃΔⲆᐃᐃ: Nr++,
    ᐃⵠⲆⲆᐃⵠⵠ: Nr++,
    ⲆⲆᐃⵠΔΔΔⵠᐃ: Nr++,
    ΔᐃᐃᐃᐃΔᐃ: Nr++,
    ΔᐃᐃⵠⵠⲆΔⲆⵠ: Nr++,
    ⲆΔⵠⵠⲆⵠⵠⵠⲆ: Nr++,
    ⲆᐃΔΔⵠⲆΔⵠΔ: Nr++,
    ΔⵠΔⵠΔΔⵠΔⲆ: Nr++,
    ᐃΔΔΔΔⲆΔⵠⲆ: Nr++,
    ⵠΔⲆⲆⲆⵠⲆ: Nr++,
    ᐃᐃⲆΔΔ: Nr++,
    ΔⲆⲆΔΔⵠᐃ: Nr++,
    ⵠⵠⵠᐃᐃΔⲆ: Nr++,
    ⲆⵠⵠΔᐃᐃᐃ: Nr++,
    ΔⵠᐃΔΔΔⵠᐃΔ: Nr++,
    ΔΔΔΔⵠΔΔ: Nr++,
    ⵠᐃⲆⲆΔΔᐃ: Nr++,
    ΔΔⵠⵠⲆΔⵠ: Nr++,
    ΔᐃⲆⲆⵠΔᐃ: Nr++,
    ΔⲆⵠⵠᐃᐃⲆ: Nr++,
    ΔⵠᐃΔⲆᐃⵠ: Nr++,
    ΔᐃⵠⲆΔⵠᐃ: Nr++,
    ᐃΔᐃⵠⵠᐃⲆ: Nr++,
    ᐃΔΔⵠΔᐃⲆ: Nr++,
    ᐃⵠⲆᐃΔⵠᐃ: Nr++,
    ᐃⵠⲆΔᐃⲆᐃ: Nr++,
    ΔⲆᐃⵠᐃ: Nr++,
    ⵠᐃᐃⵠᐃ: Nr++,
    ΔΔΔᐃⲆ: Nr++,
    ΔⵠⵠⲆΔⵠᐃΔᐃ: Nr++,
    ⵠΔΔⲆⵠⵠⵠ: Nr++,
    ΔᐃᐃⲆΔΔᐃ: Nr++,
    ⵠⲆᐃⲆⲆⵠⲆ: Nr++,
    ⲆᐃΔᐃᐃᐃⵠ: Nr++,
    ΔᐃᐃⵠⲆⲆⵠ: Nr++,
    ⲆᐃⵠᐃⲆⵠⵠ: Nr++,
    ΔⲆⵠᐃⵠᐃᐃ: Nr++,
    ᐃⲆⵠⵠⵠΔⵠ: Nr++,
    ⵠⲆⵠⲆΔⲆⲆ: Nr++,
    ΔΔⲆᐃᐃΔΔ: Nr++,
    ⵠΔᐃᐃᐃⲆⵠ: Nr++,
    ΔⲆΔⲆᐃᐃⵠ: Nr++,
    ΔΔΔᐃᐃᐃⵠ: Nr++,
    ΔⲆⵠΔᐃⵠᐃ: Nr++,
    ⲆⲆᐃⲆᐃ: Nr++,
    ΔΔⵠⲆⲆΔⲆ: Nr++,
    ΔΔΔΔᐃⲆⲆ: Nr++,
    ⵠΔᐃⵠⲆⵠΔ: Nr++,
    ⵠⲆᐃⵠⲆⲆⲆ: Nr++,
    ⲆⲆⲆᐃᐃΔᐃ: Nr++,
    ΔᐃΔⵠⲆΔⵠ: Nr++,
    ⵠᐃΔΔᐃⲆⲆ: Nr++,
    ᐃΔΔΔΔⵠΔ: Nr++,
    ⵠΔΔⵠΔⲆⲆ: Nr++,
    ⲆᐃⲆⵠⲆⲆΔ: Nr++,
    ΔᐃΔᐃΔᐃΔ: Nr++,
    ⲆΔᐃⲆΔᐃΔ: Nr++,
    ⲆⲆⲆⵠΔΔΔ: Nr++,
    ⵠᐃΔⵠΔⵠᐃ: Nr++,
    ⵠⵠᐃΔⲆⲆⵠ: Nr++,
    ⵠΔⵠΔᐃⵠⲆ: Nr++,
    ⲆⲆΔᐃⵠⲆⲆ: Nr++,
    ᐃᐃⲆᐃⵠⲆⵠ: Nr++,
    ΔⵠᐃΔⲆⵠⲆ: Nr++,
    ᐃⲆⲆᐃⵠᐃΔ: Nr++,
    ΔᐃᐃΔᐃⲆΔ: Nr++,
    ⲆᐃΔⵠⵠᐃⵠ: Nr++,
    ᐃᐃⲆΔᐃⲆᐃ: Nr++,
    ΔΔᐃᐃⲆᐃΔ: Nr++,
    ⵠΔⲆⲆⵠⵠⵠ: Nr++,
    ⲆΔΔⵠⵠⵠΔ: Nr++,
    ΔᐃΔΔΔⵠⲆ: Nr++,
    ⵠⵠᐃⵠⵠΔⲆ: Nr++,
    ⲆⲆΔⲆΔⲆⵠ: Nr++,
    ᐃⵠⲆⵠΔⵠⲆ: Nr++,
    ⲆᐃⲆⵠⵠΔⵠ: Nr++,
    ᐃⲆⲆΔⵠⲆᐃ: Nr++,
    ⵠᐃⲆⲆᐃⵠⲆ: Nr++,
    ΔᐃⲆⲆⲆΔⵠ: Nr++,
    ΔᐃᐃⵠⲆᐃΔ: Nr++,
    ⲆⲆᐃⲆⵠ: Nr++,
    ⵠⵠΔᐃᐃⵠᐃ: Nr++,
    ⲆⵠᐃⵠⲆⵠᐃ: Nr++,
    ⵠⲆᐃᐃⵠ: Nr++,
    ΔⲆΔⲆⵠⵠᐃⵠᐃ: Nr++,
    ᐃΔⲆΔΔⲆⲆ: Nr++,
    ⵠᐃⵠⵠⵠ: Nr++,
    ᐃΔⵠᐃⵠⵠⵠ: Nr++,
    ⵠⵠⵠⲆᐃΔⲆ: Nr++,
    ⲆᐃⵠⲆⵠⲆΔ: Nr++,
    ⵠΔⵠᐃᐃⵠᐃ: Nr++,
    ⵠⲆⵠΔⵠΔⲆ: Nr++,
    ⲆᐃΔⵠΔΔΔ: Nr++,
    ΔⵠⵠᐃᐃⲆⵠ: Nr++,
    ΔⲆᐃᐃⲆⲆⵠ: Nr++,
    ᐃⲆⲆⵠⵠᐃᐃ: Nr++,
    ΔΔΔΔᐃⵠⵠ: Nr++,
    ΔΔᐃⲆᐃⲆⵠ: Nr++,
    ⵠΔΔⲆᐃ: Nr++,
    ⲆⲆⵠⲆᐃ: Nr++,
    ΔᐃᐃΔⵠ: Nr++,
    ⵠΔⵠⲆⵠ: Nr++,
    ⵠⵠⵠᐃⲆ: Nr++,
    ⵠᐃΔᐃΔΔΔ: Nr++,
    ᐃⵠⵠⵠᐃⵠⵠ: Nr++,
    ⵠᐃⵠᐃᐃⵠᐃ: Nr++,
    ⲆΔΔᐃᐃᐃⵠ: Nr++,
    ΔᐃᐃⵠⲆΔⵠ: Nr++,
    ⲆⵠᐃᐃᐃΔᐃ: Nr++,
    ⲆΔⵠΔⵠⲆⲆ: Nr++,
    ᐃⲆΔⲆΔᐃΔ: Nr++,
    ⲆᐃⵠᐃΔⲆⵠ: Nr++,
    ⲆΔⵠⲆΔΔⵠ: Nr++,
    ⲆᐃⵠⲆΔᐃᐃ: Nr++,
    ᐃᐃⵠΔΔΔⲆ: Nr++,
    ⲆᐃⵠᐃⵠⲆᐃ: Nr++,
    ⲆΔᐃⵠΔᐃᐃ: Nr++,
    ⵠᐃⵠΔΔⵠΔ: Nr++,
    ⵠⵠⲆΔΔᐃᐃ: Nr++,
    ⵠᐃⲆⵠⵠⵠΔ: Nr++,
    ⵠᐃⲆᐃΔⵠᐃ: Nr++,
    ⲆΔΔᐃⵠⲆⲆ: Nr++,
    ⵠⲆᐃᐃᐃᐃⵠ: Nr++,
    ⲆᐃⲆΔᐃⵠⲆ: Nr++,
    ⵠⵠᐃⵠⲆⲆᐃ: Nr++,
    ᐃΔΔΔⵠⵠᐃ: Nr++,
    ⲆᐃᐃⵠⲆⵠⲆ: Nr++,
    ΔⲆᐃⵠⵠⵠⵠ: Nr++,
    ⵠᐃΔΔⵠⵠΔΔⵠ: Nr++,
    ᐃⵠⲆⵠⲆⲆⵠ: Nr++,
    ᐃⵠΔⲆᐃⲆⵠ: Nr++,
    ⲆⲆᐃⵠⵠᐃⲆ: Nr++,
    ⲆⲆⵠΔΔⲆΔ: Nr++,
    ᐃᐃΔᐃᐃΔΔ: Nr++,
    ⵠⵠⵠᐃⵠΔⲆ: Nr++,
    ⵠΔΔⵠΔᐃΔ: Nr++,
    ⵠΔΔᐃⵠΔᐃ: Nr++,
    ᐃᐃⲆⲆᐃΔΔ: Nr++,
    ᐃᐃⲆΔᐃᐃⵠ: Nr++,
    ᐃⲆⵠΔΔⵠⵠ: Nr++,
    ᐃⲆⵠᐃᐃⵠⲆ: Nr++,
    ⵠᐃⲆΔΔΔⲆ: Nr++,
    ⲆᐃⵠⲆⲆᐃⲆ: Nr++,
    ᐃᐃⲆᐃⵠΔⵠ: Nr++,
    ⵠⵠⵠⵠΔⲆⲆ: Nr++,
    ⵠⵠⵠⲆⵠΔᐃ: Nr++,
    ⲆᐃⲆᐃᐃᐃⲆ: Nr++,
    ΔⲆⵠΔⲆⲆⲆ: Nr++,
    ⵠⵠᐃⵠᐃⵠᐃ: Nr++,
    ⵠΔᐃᐃⵠᐃΔ: Nr++,
    ΔΔⲆᐃᐃᐃⵠ: Nr++,
    ΔᐃⲆΔΔᐃⵠ: Nr++,
    ΔᐃᐃⲆⲆⵠⲆ: Nr++,
    ⲆⲆΔΔⲆᐃⲆ: Nr++,
    ΔⲆⵠⲆΔⲆⵠ: Nr++,
    ⵠⲆᐃΔⵠΔⲆ: Nr++,
    ⲆⵠⵠΔⲆⵠⲆ: Nr++,
    ᐃⲆⲆΔΔΔΔ: Nr++,
    ᐃᐃⵠᐃⲆΔⲆ: Nr++,
    ᐃⲆΔⲆⵠΔᐃ: Nr++,
    ΔⵠᐃᐃⲆᐃⵠ: Nr++,
    ⵠΔⲆⲆᐃⲆⲆ: Nr++,
    ⵠᐃⲆᐃⵠᐃΔ: Nr++,
    ⲆΔΔΔΔⵠᐃ: Nr++,
    ⵠΔⵠⵠᐃΔᐃ: Nr++,
    ⵠⵠᐃⲆΔⲆᐃ: Nr++,
    ⵠΔⲆΔΔᐃΔ: Nr++,
    ⵠⵠΔᐃᐃⲆⵠ: Nr++,
    ΔⵠⲆᐃⲆⵠΔ: Nr++,
    ⲆⲆⲆᐃΔΔⵠ: Nr++,
    ⲆΔᐃⵠᐃᐃΔ: Nr++,
    ΔᐃⵠᐃⲆⵠⲆ: Nr++,
    ⲆⲆⵠᐃΔᐃᐃ: Nr++,
    ΔⲆᐃⲆᐃⵠΔ: Nr++,
    ᐃᐃΔᐃⲆⵠⲆ: Nr++,
    ΔΔᐃᐃⵠⲆΔ: Nr++,
    ⲆⲆⵠⲆᐃΔΔ: Nr++,
    ᐃⵠⲆΔⵠⲆⲆ: Nr++,
    ⵠᐃᐃⵠⵠΔⲆ: Nr++,
    ⵠᐃΔᐃᐃᐃΔ: Nr++,
    ⲆΔΔⲆⲆΔΔ: Nr++,
    ᐃⲆⲆΔΔⲆΔ: Nr++,
    ᐃᐃᐃⲆᐃΔᐃ: Nr++,
    ᐃⲆⲆᐃⲆᐃᐃ: Nr++,
    ⲆᐃⲆᐃΔⲆⵠ: Nr++,
    ΔⵠⲆⵠᐃᐃⲆ: Nr++,
    ΔⵠΔⵠⵠⵠΔ: Nr++,
    ΔⲆⵠⵠᐃΔᐃ: Nr++,
    ⲆᐃΔᐃⵠΔⲆ: Nr++,
    ᐃΔⲆᐃΔΔⲆ: Nr++,
    ⵠᐃᐃᐃΔΔᐃ: Nr++,
    ᐃⵠΔⵠⲆΔⵠ: Nr++,
    ⲆᐃᐃⵠⵠΔᐃ: Nr++,
    ΔⲆᐃᐃΔⵠⲆ: Nr++,
    ⲆΔᐃᐃᐃᐃⵠ: Nr++,
    ᐃⵠΔⲆᐃᐃΔ: Nr++,
    ⲆⵠΔⲆⵠΔΔ: Nr++,
    ᐃΔⵠΔⲆᐃΔ: Nr++,
    ᐃᐃⵠⵠⲆⵠΔ: Nr++,
    ᐃΔⲆⲆⲆΔΔ: Nr++,
    ⲆⵠⵠⲆΔ: Nr++,
    ᐃᐃⲆⵠⵠΔᐃ: Nr++,
    ⵠⲆΔΔΔΔⲆ: Nr++,
    ΔⲆⵠⲆⵠ: Nr++,
    ⵠⲆⲆⲆⲆΔⲆ: Nr++,
    ᐃⵠΔᐃΔⲆⲆ: Nr++,
    ⵠⲆΔⵠⵠΔⲆ: Nr++,
    ᐃΔᐃⲆΔᐃⲆ: Nr++,
    ΔΔᐃΔΔΔⲆ: Nr++,
    ᐃᐃᐃⲆΔ: Nr++,
    ᐃⵠΔⵠⵠᐃΔ: Nr++,
    ⲆⵠⲆⲆⵠⲆⲆᐃⲆ: Nr++,
    ⲆⲆⲆᐃⲆⲆⵠΔᐃ: Nr++,
    ᐃᐃⵠΔⵠᐃⵠΔⵠ: Nr++,
    ⲆⵠⲆⵠⲆⲆⲆⲆᐃ: Nr++,
    ⵠᐃⲆΔⵠΔΔ: Nr++,
    ⲆᐃⲆⲆΔᐃΔ: Nr++,
    ⲆΔⲆⵠΔⲆΔ: Nr++,
    ⵠᐃⵠⵠΔΔᐃ: Nr++,
    ΔⵠⲆΔᐃᐃⲆ: Nr++,
    ⵠᐃᐃⵠᐃⲆⵠ: Nr++,
    ⵠⵠⵠⵠΔⲆΔ: Nr++,
    ⲆⵠΔⲆΔⲆⵠ: Nr++,
    ᐃⵠⲆΔⲆⵠⵠ: Nr++,
    ᐃΔᐃⲆΔᐃΔ: Nr++,
    ΔⵠⲆⵠΔ: Nr++,
    ΔΔⵠᐃⵠ: Nr++,
    ΔⵠΔᐃΔᐃᐃ: Nr++,
    ⲆⲆⵠⲆⵠᐃⵠ: Nr++,
    ⲆⵠᐃⲆⲆᐃΔ: Nr++,
    ᐃΔⲆᐃⵠⲆⵠ: Nr++,
    ᐃⵠΔΔᐃΔΔ: Nr++,
    ᐃᐃᐃᐃⵠΔᐃ: Nr++,
    ᐃⲆᐃΔⵠⵠⵠ: Nr++,
    ⵠⲆΔᐃⲆⲆⲆ: Nr++,
    ⲆΔⲆⲆᐃΔⲆ: Nr++,
    ᐃΔΔΔⵠⲆⲆ: Nr++,
    ᐃΔⲆᐃΔΔᐃ: Nr++,
    ΔⲆⲆⵠΔⵠⲆ: Nr++,
    ⵠⲆⵠΔⵠᐃⵠⲆᐃ: Nr++,
    ⵠΔᐃⵠᐃⵠΔΔΔ: Nr++,
    ⲆⵠⲆⵠⲆᐃΔ: Nr++,
    ⲆΔⲆⲆⲆⵠⲆ: Nr++,
    ΔΔⵠΔᐃΔΔ: Nr++,
    ᐃΔⵠΔᐃⵠⲆ: Nr++,
    ᐃⵠⲆⵠΔΔΔ: Nr++,
    ⲆᐃΔΔᐃΔⵠ: Nr++,
    ᐃⵠᐃᐃⲆⵠΔ: Nr++,
    ⵠⵠⵠΔⲆΔⲆ: Nr++,
    ⵠⲆⵠⵠᐃᐃΔ: Nr++,
    ΔᐃΔᐃᐃⲆΔ: Nr++,
    ΔⲆⲆⲆΔᐃᐃ: Nr++,
    ⵠⵠΔᐃⲆⲆᐃ: Nr++,
    ΔⲆΔᐃΔⲆⵠ: Nr++,
    ΔⲆᐃᐃⲆⵠⵠ: Nr++,
    ⲆᐃⲆᐃᐃᐃᐃ: Nr++,
    ⲆⲆΔᐃᐃᐃᐃ: Nr++,
    ⵠⲆⲆⵠⲆⲆⵠ: Nr++,
    ΔⲆΔⲆⵠⲆⵠ: Nr++,
    ⵠⵠΔⲆΔⵠⵠᐃΔ: Nr++,
    ᐃⲆΔΔᐃⵠᐃ: Nr++,
    ΔΔΔΔΔ: Nr++,
    ⲆⵠⵠⲆⵠᐃΔⵠΔ: Nr++,
    ⵠᐃⲆΔⵠᐃΔⲆᐃ: Nr++,
    ΔⲆⲆⲆᐃⵠⲆⵠⵠ: Nr++,
    ⲆⲆⵠᐃᐃⲆⲆⵠⵠ: Nr++,
    ⲆⵠΔᐃⲆΔᐃ: Nr++,
    ΔᐃⵠΔΔⵠⲆ: Nr++,
    ⲆΔⲆᐃᐃΔⵠ: Nr++,
    ΔΔΔⲆΔⵠΔ: Nr++,
    ΔᐃⲆⵠⲆΔⲆ: Nr++,
    ΔⲆⲆⵠᐃᐃΔΔⵠ: Nr++,
    ᐃΔⲆΔⵠⲆΔ: Nr++,
    ⲆⲆⲆΔΔⲆⵠ: Nr++,
    ᐃⵠⲆⲆΔⲆΔ: Nr++,
    ΔⲆᐃᐃⵠⲆⲆ: Nr++,
    ΔⵠⲆΔᐃⲆⵠ: Nr++,
    ⲆᐃⵠᐃⲆΔⲆ: Nr++,
    ΔⵠᐃⵠΔⵠᐃ: Nr++,
    ᐃⵠᐃⵠⲆ: Nr++,
    ΔⲆⵠⵠΔⲆᐃᐃⲆ: Nr++,
    ⵠⲆΔⵠⲆⲆᐃ: Nr++,
    ⵠᐃᐃⲆⵠⲆⲆ: Nr++,
    ⵠΔⲆⲆΔᐃⲆ: Nr++,
    ᐃΔΔᐃⲆᐃⲆ: Nr++,
    ⲆᐃⵠᐃⵠᐃⲆ: Nr++,
    ⵠᐃⲆⲆⲆⲆᐃ: Nr++,
    ΔⵠᐃᐃⵠⵠⲆ: Nr++,
    ⵠⲆⵠⲆΔᐃⲆ: Nr++,
    ⲆΔᐃΔᐃᐃᐃ: Nr++,
    ⵠΔⲆⲆⲆⲆⲆ: Nr++,
    ⵠΔΔⲆᐃⲆᐃ: Nr++,
    ᐃⲆⲆⲆⵠᐃᐃ: Nr++,
    ΔΔⲆⲆⲆΔᐃ: Nr++,
    ⵠⵠⵠⵠⲆ: Nr++,
    ΔⲆΔⵠᐃᐃⲆ: Nr++,
    ᐃⲆⵠᐃᐃΔⲆ: Nr++,
    ⲆΔⲆⲆᐃⵠΔ: Nr++,
    ⵠΔⵠⵠⲆⲆⲆ: Nr++,
    ΔᐃⵠΔΔⲆⵠ: Nr++,
    ᐃⲆⵠᐃᐃᐃⲆ: Nr++,
    ᐃⲆⲆᐃΔⵠᐃ: Nr++,
    ΔⲆᐃⲆΔᐃΔ: Nr++,
    ⵠⵠᐃᐃⵠⲆᐃ: Nr++,
    ΔⵠᐃⵠᐃⲆⲆ: Nr++,
    ᐃⲆᐃᐃΔᐃⵠ: Nr++,
    ᐃⲆⵠΔΔⲆⵠ: Nr++,
    ⲆⲆᐃΔⲆⵠΔ: Nr++,
    ΔⲆⵠᐃᐃᐃⵠ: Nr++,
    ᐃⲆΔⵠⲆᐃⲆ: Nr++,
    ⵠⲆⵠⲆΔᐃᐃ: Nr++,
    ⵠᐃΔΔΔΔΔ: Nr++,
    ⵠᐃᐃΔᐃΔΔ: Nr++,
    ΔᐃⵠⵠⲆⵠⲆ: Nr++,
    ᐃΔⲆⵠⲆᐃⲆ: Nr++,
    ⵠⵠΔᐃⲆΔΔ: Nr++,
    ᐃᐃⵠΔⵠΔᐃ: Nr++,
    ⵠⲆⵠΔⵠⲆⲆ: Nr++,
    ⲆⵠᐃⲆΔΔⵠ: Nr++,
    ⲆᐃᐃᐃΔΔⲆ: Nr++,
    ⲆᐃⲆⵠᐃⵠⵠ: Nr++,
    ⲆΔⲆⵠⲆᐃᐃᐃⵠ: Nr++,
    ⲆᐃΔⵠΔᐃΔΔⵠ: Nr++,
    ᐃⲆⵠⲆΔΔⲆⲆΔ: Nr++,
    ⵠⵠᐃΔᐃΔⲆⵠⲆ: Nr++,
    ΔΔⲆᐃᐃⲆΔ: Nr++,
    ᐃⲆᐃΔⵠⲆⵠ: Nr++,
    ΔⲆᐃΔᐃ: Nr++,
    ΔᐃᐃΔᐃΔⵠ: Nr++,
    ᐃⵠΔⵠⵠⵠᐃ: Nr++,
    ⲆᐃΔⲆΔⲆⵠ: Nr++,
    ᐃⲆΔΔΔΔⲆ: Nr++,
    ᐃᐃⵠᐃᐃΔΔ: Nr++,
    ⲆᐃΔⲆⵠΔⵠ: Nr++,
    ⵠΔⵠⲆΔᐃⲆ: Nr++,
    ΔᐃΔᐃΔΔᐃ: Nr++,
    ᐃΔΔᐃⵠᐃⵠ: Nr++,
    ⲆⲆᐃΔⲆᐃᐃ: Nr++,
    ΔⲆⵠⵠⲆⵠⲆ: Nr++,
    ⵠᐃΔᐃⵠⵠᐃ: Nr++,
    ᐃᐃᐃᐃⵠⲆⲆ: Nr++,
    ⵠⵠⵠⵠᐃⲆⵠ: Nr++,
    ᐃΔΔΔⲆⵠΔ: Nr++,
    ⲆⲆⵠⵠᐃΔᐃ: Nr++,
    ⲆⲆⵠᐃᐃⵠᐃ: Nr++,
    ᐃⵠⵠⵠΔᐃⵠ: Nr++,
    ⲆⵠΔᐃΔⲆⵠ: Nr++,
    ⲆΔΔᐃΔΔⵠΔᐃ: Nr++,
    ⲆΔⵠⲆᐃ: Nr++,
    ᐃⲆⵠᐃⲆⵠⲆ: Nr++,
    ⲆᐃᐃⵠᐃΔΔ: Nr++,
    ⵠΔΔΔΔⲆⲆ: Nr++,
    ᐃⵠΔⵠⲆⲆⲆ: Nr++,
    ⵠⵠΔΔⵠᐃᐃ: Nr++,
    ⵠΔⲆⲆⲆⲆᐃ: Nr++,
    ⵠΔΔΔΔᐃⲆ: Nr++,
    ᐃᐃᐃᐃΔⲆⲆ: Nr++,
    ᐃᐃᐃΔᐃⲆⲆ: Nr++,
    ᐃⲆⲆΔⲆΔⵠ: Nr++,
    ⲆⲆᐃΔΔⵠΔ: Nr++,
    ΔⵠΔⵠⲆΔᐃ: Nr++,
    ᐃᐃᐃⲆⲆⲆΔ: Nr++,
    ⵠⵠᐃⵠᐃᐃⵠ: Nr++,
    ᐃΔⵠᐃⲆⵠⲆ: Nr++,
    ⲆⵠᐃᐃⲆⲆⲆ: Nr++,
    ⵠⲆⲆᐃΔᐃᐃ: Nr++,
    ᐃᐃⵠΔΔΔⵠ: Nr++,
    ᐃΔΔⲆⵠᐃⵠ: Nr++,
    ⲆⵠᐃᐃⲆΔΔ: Nr++,
    ⲆᐃᐃⲆΔᐃΔ: Nr++,
    ᐃⵠⵠΔᐃⵠⲆ: Nr++,
    ᐃᐃⵠⲆΔⲆⵠⲆⲆ: Nr++,
    ⲆΔᐃΔⵠΔⵠ: Nr++,
    ΔΔᐃᐃΔⵠΔ: Nr++,
    ⲆⲆΔⵠⲆΔⵠ: Nr++,
    ΔⵠⵠⲆⵠᐃⵠ: Nr++,
    ⵠⵠⵠΔⲆⲆᐃ: Nr++,
    ⲆΔⵠⵠⲆΔΔ: Nr++,
    ⵠᐃⵠᐃⲆᐃΔ: Nr++,
    ⵠᐃⲆᐃΔᐃᐃ: Nr++,
    ⵠΔⵠᐃΔⲆⲆ: Nr++,
    ΔⵠΔΔΔΔⵠ: Nr++,
    ΔᐃᐃⵠΔⵠⵠ: Nr++,
    ⲆΔᐃΔΔⲆᐃ: Nr++,
    ⲆᐃⵠΔΔΔⲆ: Nr++,
    ΔⵠΔΔⲆⵠᐃ: Nr++,
    ᐃᐃⵠᐃⲆᐃⵠ: Nr++,
    ᐃⲆⲆⵠⲆᐃⲆ: Nr++,
    ᐃⵠⲆᐃⵠΔⲆ: Nr++,
    ⲆΔⲆⵠᐃΔΔ: Nr++,
    ⵠΔᐃᐃⵠⵠⵠ: Nr++,
    ᐃΔᐃᐃᐃΔⵠ: Nr++,
    ΔᐃΔᐃᐃⲆⵠ: Nr++,
    ΔⵠⲆΔΔᐃᐃ: Nr++,
    ΔᐃΔΔⲆⵠᐃ: Nr++,
    ΔᐃΔⲆⲆⵠⲆ: Nr++,
    ⵠⵠⵠΔⲆ: Nr++,
    ⵠᐃΔᐃᐃᐃⲆ: Nr++,
    ΔΔΔᐃΔⵠΔ: Nr++,
    ⲆⵠΔΔᐃᐃΔ: Nr++,
    ᐃⵠᐃⲆⲆⵠⲆ: Nr++,
    ⵠᐃⲆⵠᐃΔΔ: Nr++,
    ⲆᐃΔⵠΔᐃⵠ: Nr++,
    ⲆᐃΔⲆᐃᐃΔ: Nr++,
    ᐃᐃΔΔᐃΔⵠ: Nr++,
    ΔⲆΔᐃⲆᐃΔ: Nr++,
    ⵠⲆᐃⵠⲆᐃᐃ: Nr++,
    ⵠᐃΔⵠᐃᐃᐃ: Nr++,
    ⵠⲆⲆⲆⲆⲆᐃ: Nr++,
    ΔΔⲆᐃᐃᐃᐃ: Nr++,
    ΔⲆᐃⲆᐃⵠᐃ: Nr++,
    ⵠΔⲆᐃⵠⵠᐃ: Nr++,
    ⲆᐃΔⵠᐃᐃⲆ: Nr++,
    ᐃⵠⲆΔⲆⲆⵠ: Nr++,
    ⵠⵠΔⲆΔΔᐃ: Nr++,
    ⵠᐃⲆⵠⵠⲆⵠ: Nr++,
    ᐃⵠⵠⵠᐃΔΔ: Nr++,
    ᐃᐃⵠⲆⵠΔⵠ: Nr++,
    ⲆΔⵠⲆⲆⵠⲆ: Nr++,
    ᐃⵠΔⲆⵠⵠᐃ: Nr++,
    ΔⵠᐃⲆⲆⵠΔ: Nr++,
    ΔⲆⲆⲆⲆΔΔ: Nr++,
    ΔᐃⵠΔⵠΔΔ: Nr++,
    ΔᐃⲆᐃⲆⲆⵠ: Nr++,
    ⵠΔΔᐃᐃΔᐃ: Nr++,
    ⲆΔⵠⵠΔⵠⲆ: Nr++,
    ᐃⲆᐃⵠᐃΔΔ: Nr++,
    ᐃⲆⵠⲆⵠΔⵠ: Nr++,
    ⲆᐃΔᐃᐃⲆΔ: Nr++,
    ⲆᐃⲆⲆⲆⵠⲆ: Nr++,
    ᐃᐃⵠᐃᐃᐃᐃ: Nr++,
    ΔΔⲆⲆ: Nr++,
    ᐃⲆᐃⲆ: Nr++,
    ⲆⵠⵠⲆⵠᐃⲆ: Nr++,
    ΔⲆΔⲆⵠⵠᐃ: Nr++,
    ΔⲆᐃⲆⲆⲆⲆ: Nr++,
    ΔⲆⲆᐃᐃᐃⵠ: Nr++,
    ⵠⲆⲆᐃⵠΔᐃ: Nr++,
    ΔΔᐃΔⲆΔⵠ: Nr++,
    ⲆᐃⵠᐃᐃΔΔ: Nr++,
    ⲆᐃᐃⲆⵠ: Nr++,
    ΔⵠΔⲆⲆᐃΔ: Nr++,
    ⲆⲆⵠᐃⵠ: Nr++,
    ΔΔᐃⵠⲆⵠᐃ: Nr++,
    ΔⲆΔⵠᐃ: Nr++,
    ⲆⵠⲆᐃⵠΔⵠ: Nr++,
    ΔⲆΔⵠⲆ: Nr++,
    ᐃⲆⲆⵠᐃᐃΔ: Nr++,
    ᐃⲆᐃⵠᐃ: Nr++,
    ᐃΔᐃⵠΔ: Nr++,
    ᐃΔⲆⵠᐃⲆⵠ: Nr++,
    ⲆⵠⲆᐃⵠⲆⵠ: Nr++,
    ᐃᐃᐃΔΔⲆᐃ: Nr++,
    ⲆⵠΔⵠⵠⵠⵠ: Nr++,
    ⵠⵠΔΔᐃⵠⵠ: Nr++,
    ⵠΔΔⲆΔᐃΔ: Nr++,
    ⵠⵠⵠᐃⵠᐃΔ: Nr++,
    ΔⵠΔⵠⵠⲆⵠ: Nr++,
    ΔΔⵠᐃⲆΔΔ: Nr++,
    ⲆΔᐃⲆᐃ: Nr++,
    ⵠⲆᐃⵠⲆⵠᐃ: Nr++,
    ᐃⵠⵠᐃⵠ: Nr++,
    ᐃᐃᐃⵠⵠⵠΔ: Nr++,
    ΔⲆⲆᐃⵠΔⵠ: Nr++,
    ⵠᐃΔᐃᐃⵠᐃ: Nr++,
    ⵠⲆⲆⵠᐃᐃᐃ: Nr++,
    ΔⲆΔⵠᐃⵠⲆ: Nr++,
    ᐃΔⵠΔᐃᐃⵠ: Nr++,
    ᐃⲆΔᐃⵠᐃᐃⲆΔ: Nr++,
    ΔᐃᐃⵠⲆⵠⵠ: Nr++,
    ᐃᐃᐃⵠⲆΔᐃ: Nr++,
    ⲆΔⵠⵠⵠᐃⵠⵠᐃ: Nr++,
    ⲆᐃΔⵠⲆⲆⲆ: Nr++,
    ⵠΔᐃΔΔΔⲆ: Nr++,
    ⲆΔⵠᐃΔΔⵠ: Nr++,
    ⵠⲆⲆⵠᐃᐃⲆ: Nr++,
    ⲆⵠΔᐃⵠ: Nr++,
    ᐃᐃΔⵠⲆⵠΔ: Nr++,
    ΔⲆⲆⵠΔⲆΔ: Nr++,
    ᐃⵠΔᐃᐃᐃⵠ: Nr++,
    ⲆΔΔⲆⲆⵠⵠ: Nr++,
    ⵠⵠⲆᐃⵠⵠⵠ: Nr++,
    ᐃⲆⵠⵠᐃⲆΔ: Nr++,
    ⵠⵠⵠⵠⲆᐃⵠ: Nr++,
    ΔⲆⵠⲆⲆΔᐃ: Nr++,
    ΔⲆᐃⵠᐃᐃⵠ: Nr++,
    ⲆⲆᐃⲆΔΔΔ: Nr++,
    ΔΔᐃⲆᐃⵠⲆ: Nr++,
    ⵠⲆⵠᐃⵠᐃⵠ: Nr++,
    ⲆⵠⵠΔᐃⵠᐃ: Nr++,
    ⲆᐃⵠΔᐃᐃΔ: Nr++,
    ⲆⲆΔⵠⲆ: Nr++,
    ᐃᐃΔⵠⵠⵠⲆ: Nr++,
    ΔΔⵠΔᐃΔᐃ: Nr++,
    ⵠΔΔⵠΔⵠᐃ: Nr++,
    ⵠⲆⵠⲆⵠⵠΔ: Nr++,
    ᐃᐃⵠⲆⵠΔΔ: Nr++,
    ⵠΔⲆⲆᐃΔⵠ: Nr++,
    ⵠⲆⲆΔΔᐃΔ: Nr++,
    ⵠΔΔⲆⵠⲆᐃ: Nr++,
    ⲆⵠᐃᐃⲆᐃⲆ: Nr++,
    ⲆΔⵠΔⵠⲆΔ: Nr++,
    ᐃⵠⵠᐃᐃⵠⲆ: Nr++,
    ⵠᐃΔⵠᐃⲆΔ: Nr++,
    ⵠᐃᐃⲆᐃⲆⵠ: Nr++,
    ⵠⵠⲆΔᐃⵠⲆ: Nr++,
    ⵠᐃⲆⲆΔ: Nr++,
    ⵠᐃⲆΔΔᐃᐃ: Nr++,
    ⲆⲆᐃΔⵠΔᐃ: Nr++,
    ᐃⲆᐃΔⲆᐃΔ: Nr++,
    ⵠⵠᐃΔⵠⲆⵠ: Nr++,
    ᐃΔΔΔⵠⲆᐃ: Nr++,
    ⲆⲆⵠΔᐃⲆⲆ: Nr++,
    ⵠⲆᐃⵠⵠᐃⲆ: Nr++,
    ᐃⲆⲆⵠⲆⵠⲆ: Nr++,
    ⲆⲆⵠᐃᐃᐃⲆ: Nr++,
    ΔⵠⵠᐃⵠΔᐃ: Nr++,
    ᐃⲆⲆᐃⲆΔⵠ: Nr++,
    ⵠΔⵠⵠⵠᐃⵠ: Nr++,
    ΔᐃⲆᐃⲆⵠΔ: Nr++,
    ⲆᐃⲆⲆΔⵠΔ: Nr++,
    ⲆᐃᐃᐃΔⵠᐃ: Nr++,
    ⲆⲆⲆⲆⲆᐃᐃ: Nr++,
    ᐃΔⵠᐃᐃΔᐃ: Nr++,
    ⵠⲆⵠΔΔΔⲆ: Nr++,
    ΔΔΔᐃΔⲆⲆ: Nr++,
    ΔᐃⵠⵠΔΔᐃ: Nr++,
    ⵠΔⵠᐃⵠ: Nr++,
    ⵠᐃⵠᐃΔΔⵠ: Nr++,
    ΔᐃΔᐃⲆᐃᐃ: Nr++,
    ΔΔᐃΔⲆⵠΔ: Nr++,
    ᐃⲆⵠⵠᐃⲆᐃ: Nr++,
    ⵠⵠΔΔⲆᐃⲆ: Nr++,
    ΔΔᐃᐃᐃΔΔ: Nr++,
    ΔⲆⵠⵠΔᐃΔ: Nr++,
    ⲆⵠⵠᐃΔᐃᐃ: Nr++,
    ᐃᐃⵠⲆᐃᐃⲆ: Nr++,
    ⲆⵠⵠΔᐃⲆⵠ: Nr++,
    ⲆⵠΔᐃⵠᐃΔ: Nr++,
    ΔⵠⵠᐃⲆΔΔ: Nr++,
    ᐃΔⲆⲆⵠΔΔ: Nr++,
    ΔᐃⵠⲆⲆⵠⲆ: Nr++,
    ⲆᐃⲆᐃⲆⲆⲆ: Nr++,
    ⵠⵠΔΔⲆᐃⵠ: Nr++,
    ⵠⲆⲆᐃⵠⵠⵠ: Nr++,
    ⵠⵠᐃΔⵠᐃΔ: Nr++,
    ⲆⲆⵠΔⲆⵠⵠ: Nr++,
    ΔΔⵠΔⲆⲆΔ: Nr++,
    ⵠΔᐃᐃⵠΔⵠ: Nr++,
    ⲆΔⲆΔΔⲆⵠ: Nr++,
    ⵠᐃⲆΔⵠⵠᐃ: Nr++,
    ΔᐃΔᐃⲆᐃⵠ: Nr++,
    ⵠΔᐃⵠⵠⵠΔ: Nr++,
    ⲆᐃⵠᐃⵠⲆⲆ: Nr++,
    ΔⵠᐃΔΔΔᐃ: Nr++,
    ⵠᐃΔᐃᐃΔᐃ: Nr++,
    ΔⲆⲆΔⲆΔⵠ: ["#E9CF96", "#144940"],
    ΔⲆⲆᐃᐃΔᐃ: Nr++,
    ⵠᐃⵠⵠᐃⲆⲆ: Nr++,
    ᐃⲆᐃⲆᐃⵠⲆ: Nr++,
    ᐃⵠⲆᐃⵠΔΔ: Nr++,
    ⲆⵠⲆΔΔⲆⵠ: Nr++,
    ⲆⲆΔΔΔΔᐃ: Nr++,
    ᐃⵠⲆΔΔⵠⵠ: Nr++,
    ΔΔⵠⵠⵠ: Nr++,
    ΔᐃⵠᐃᐃΔⲆ: Nr++,
    ΔⵠᐃⲆᐃⲆΔ: Nr++,
    ⲆᐃΔΔⲆΔᐃ: Nr++,
    ⲆΔⲆⵠΔⵠΔ: Nr++,
    ΔⲆⲆᐃⲆⲆⵠ: Nr++,
    ⵠΔᐃΔⵠⲆΔ: Nr++,
    ΔᐃⵠⲆⵠᐃΔ: Nr++,
    ΔⵠΔΔⲆᐃⵠ: Nr++,
    ΔΔⵠᐃⲆⲆⲆ: Nr++,
    ⵠᐃΔΔⲆⲆⵠ: Nr++,
    ᐃⲆⵠⵠΔΔᐃ: Nr++,
    ⲆⵠΔΔΔΔΔ: Nr++,
    ⲆᐃΔⵠΔΔⲆ: Nr++,
    ᐃⵠⵠⲆᐃⵠΔ: Nr++,
    ⲆⲆΔⵠΔΔⵠ: Nr++,
    ᐃΔᐃᐃΔⲆⲆ: Nr++,
    ᐃⵠᐃᐃⲆΔⵠ: Nr++,
    ΔⲆⲆΔⵠⲆⲆ: Nr++,
    ΔᐃⵠΔᐃⲆΔ: Nr++,
    ⲆΔⲆⲆⵠⵠΔ: Nr++,
    ⵠᐃᐃⲆⲆⵠⲆ: Nr++,
    ⲆΔΔⲆⵠⲆⲆ: Nr++,
    ΔⲆᐃⲆⲆⵠΔ: Nr++,
    ᐃᐃᐃᐃⲆⵠᐃ: Nr++,
    ⵠΔᐃᐃⲆᐃᐃ: Nr++,
    ΔⲆᐃΔᐃΔⲆ: Nr++,
    ⲆᐃⵠΔⵠΔⵠ: Nr++,
    ᐃᐃᐃⵠⲆⲆᐃ: Nr++,
    ᐃⵠⵠᐃⲆᐃΔ: Nr++,
    ⵠⲆΔⲆΔᐃⵠ: Nr++,
    ΔⵠᐃⲆΔⵠⲆ: Nr++,
    ᐃΔⵠⵠⲆᐃΔ: Nr++,
    ⲆⵠⲆⲆᐃⲆᐃ: Nr++,
    ⵠⵠⵠᐃΔⲆΔ: Nr++,
    ⲆⵠᐃᐃⲆΔᐃ: Nr++,
    ΔⲆΔΔΔⲆΔ: Nr++,
    ⵠΔⲆⵠⲆⲆⲆ: Nr++,
    ⲆΔⲆⵠⲆᐃⲆ: Nr++,
    ᐃⵠᐃⵠⲆⵠⵠ: Nr++,
    ⵠⲆΔⲆⲆΔⵠ: Nr++,
    ⵠΔⵠᐃⵠⲆᐃ: Nr++,
    ΔΔⵠⵠⲆⵠΔ: Nr++,
    ᐃⵠΔⵠⵠΔⲆ: Nr++,
    ⵠᐃΔⲆΔⲆⵠ: Nr++,
    ⵠⵠⲆΔΔᐃⵠ: Nr++,
    ΔⲆΔⵠᐃᐃⵠ: Nr++,
    ⵠⵠⲆᐃⵠᐃⲆ: Nr++,
    ᐃⵠⲆⵠⲆᐃΔ: Nr++,
    ᐃᐃⵠᐃᐃΔᐃ: Nr++,
    ᐃᐃΔΔᐃᐃᐃ: Nr++,
    ⵠⵠᐃΔⲆⵠᐃ: Nr++,
    ᐃᐃΔⵠΔⵠᐃ: Nr++,
    ᐃᐃΔⲆᐃᐃⲆ: Nr++,
    ⲆⵠⵠⲆᐃᐃΔ: Nr++,
    ᐃΔⲆᐃΔⲆᐃ: Nr++,
    ⵠΔⲆΔⲆⲆᐃ: Nr++,
    ⲆⲆⵠᐃΔΔᐃ: Nr++,
    ⵠⵠΔΔⵠⲆⲆ: Nr++,
    ⵠΔⲆᐃⵠⵠΔ: Nr++,
    ᐃⵠⲆⲆΔⲆⲆ: Nr++,
    ΔᐃᐃᐃᐃⲆⲆ: Nr++,
    ᐃΔⲆⲆⲆ: Nr++,
    ᐃⲆΔΔᐃⵠⵠ: Nr++,
    ΔΔⵠⲆⲆ: Nr++,
    ⲆΔⵠΔⲆⵠⲆ: Nr++,
    ⵠⲆΔΔⲆⵠΔ: Nr++,
    ⵠΔΔⵠⲆΔⲆ: Nr++,
    ⵠᐃⲆⵠⵠΔⵠ: Nr++,
    Ⲇᐃᐃⵠᐃᐃⵠ: Nr++,
    ⵠⲆⲆⵠⵠⵠᐃ: Nr++,
    ΔΔΔΔⲆᐃⵠ: Nr++,
    ⵠⵠᐃⲆᐃᐃⲆ: Nr++,
    ᐃⵠⵠⲆᐃᐃᐃ: Nr++,
    ᐃΔᐃⵠⵠΔⲆ: Nr++,
    ᐃⵠᐃⲆᐃΔⵠ: Nr++,
    ᐃΔΔᐃΔᐃᐃ: Nr++,
    ⲆΔᐃⲆΔΔᐃ: Nr++,
    ⲆᐃΔⲆΔΔᐃ: Nr++,
    ⵠᐃⲆⵠᐃΔⲆ: Nr++,
    ⲆⲆᐃⵠᐃΔⲆ: Nr++,
    ΔᐃᐃᐃⲆⵠⲆ: Nr++,
    ⵠᐃⵠⵠΔΔⵠ: Nr++,
    ⵠᐃΔΔΔᐃⵠ: Nr++,
    ᐃⵠⲆⲆᐃⵠΔ: Nr++,
    ΔⵠᐃΔⲆⲆΔ: Nr++,
    ⵠⲆᐃᐃΔΔⵠ: Nr++,
    ΔᐃⵠᐃΔΔⲆ: Nr++,
    ⲆⲆⵠⵠⲆᐃⵠ: Nr++,
    ⲆⲆⲆⵠᐃᐃᐃ: Nr++,
    ΔⲆⵠΔᐃⵠⵠ: Nr++,
    ⵠⵠᐃⲆᐃⲆᐃ: Nr++,
    ⲆⵠΔΔΔΔᐃ: Nr++,
    ΔⵠⲆⲆᐃᐃΔ: Nr++,
    ΔΔᐃᐃΔᐃⲆ: Nr++,
    ⵠⵠⲆⵠⵠᐃⵠ: Nr++,
    ⲆᐃᐃΔΔᐃⲆ: Nr++,
    ΔⲆⲆΔΔᐃⵠ: Nr++,
    ᐃᐃᐃⲆᐃᐃⲆ: Nr++,
    ⵠⲆᐃⲆⲆΔⲆ: Nr++,
    ⲆᐃⵠⲆᐃᐃⵠ: Nr++,
    ΔⲆΔᐃΔⲆΔ: Nr++,
    ⵠⵠⵠⲆΔⲆΔ: Nr++,
    ⲆᐃⲆⲆⲆᐃᐃ: Nr++,
    ᐃΔⵠⲆⲆⵠⲆ: Nr++,
    ⲆᐃᐃᐃⵠᐃⲆ: Nr++,
    ᐃΔᐃΔΔᐃᐃ: Nr++,
    ⲆⵠⵠᐃᐃⲆⲆ: Nr++,
    ⲆⵠᐃᐃΔⵠΔ: Nr++,
    ⵠΔⲆᐃⲆⵠΔ: Nr++,
    ΔⲆⵠᐃᐃⲆΔ: Nr++,
    ⲆⲆⵠⵠΔⵠᐃ: Nr++,
    ΔⲆΔⵠⵠᐃⵠ: Nr++,
    ΔⵠΔⵠΔΔⲆ: Nr++,
    ⵠΔᐃᐃΔΔᐃ: Nr++,
    ⵠⵠⲆᐃΔᐃᐃ: Nr++,
    ⵠᐃⲆⵠΔⵠⵠ: Nr++,
    ⵠΔⲆⲆⵠⲆⵠ: Nr++
  };
  const Yr = Sj;
  Nr = Lr;
  const Zr = $a;
  var $r = {
    ΔᐃᐃⲆⲆ: Nr++,
    ᐃΔΔⵠΔ: Nr++,
    ⲆᐃΔᐃⵠ: Nr++,
    ⵠⲆΔⵠᐃ: Nr++,
    ⲆΔⲆⲆⵠ: Nr++,
    ⲆⵠⵠⲆⲆ: Nr++,
    ⵠᐃⲆΔΔ: Nr++,
    ᐃⲆⵠΔⲆ: Nr++,
    ΔⲆⲆⵠⲆ: Nr++,
    ⲆⵠΔⵠΔ: Nr++,
    ⲆᐃΔⲆΔ: Nr++,
    ⲆⲆⵠⲆⲆ: Nr++,
    ⵠΔΔΔⵠ: Nr++,
    ᐃⵠⵠⵠᐃ: Nr++,
    ᐃⵠⲆⵠΔ: Nr++,
    ⵠⵠᐃᐃⲆ: Nr++,
    ᐃΔΔΔΔ: Nr++,
    ⲆΔΔⵠⵠ: Nr++,
    ⵠᐃⵠᐃΔ: Nr++,
    ⵠᐃⲆⲆⵠ: Nr++,
    ⲆΔᐃΔⲆ: Nr++,
    ᐃᐃΔⵠΔ: Nr++,
    ⲆⵠⲆᐃΔ: Nr++,
    ᐃΔΔᐃΔ: Nr++,
    ᐃⵠΔΔⲆ: Nr++,
    ᐃᐃΔⲆⲆ: Nr++,
    ⵠΔᐃⵠᐃ: Nr++,
    ⵠᐃᐃⵠΔ: Nr++,
    ᐃᐃᐃᐃⲆ: Nr++,
    ᐃΔⵠⲆᐃ: Nr++,
    ᐃΔⲆⵠΔ: Nr++,
    ⲆⲆΔᐃᐃ: Nr++,
    ΔⲆᐃΔⵠ: Nr++,
    Ⲇᐃᐃᐃᐃ: Nr++,
    ΔⵠᐃΔᐃ: Nr++,
    ᐃᐃⲆΔⲆ: Nr++,
    ⵠΔΔΔΔ: Nr++,
    ᐃΔⲆᐃΔ: Nr++,
    ΔⲆᐃⵠΔ: Nr++,
    ⵠⵠΔΔⵠ: Nr++,
    ⵠᐃΔⲆᐃ: Nr++,
    ⲆΔᐃΔΔ: Nr++,
    ᐃⵠᐃᐃⵠ: Nr++,
    ⲆⲆΔⲆⵠ: Nr++,
    ᐃⲆⲆᐃΔ: Nr++,
    ⲆⵠΔᐃᐃ: Nr++,
    ᐃⵠΔΔΔ: Nr++,
    ⲆΔⲆⵠΔ: Nr++,
    ΔⵠⵠΔⲆ: Nr++,
    ΔΔⵠⵠⲆ: Nr++,
    ⵠⲆΔⲆᐃ: Nr++,
    ⲆⵠΔⲆΔ: Nr++,
    ⲆᐃᐃⵠΔ: Nr++,
    ⵠᐃⲆⲆᐃ: Nr++,
    ᐃΔᐃⲆᐃ: Nr++,
    ⲆⲆⲆⲆⵠ: Nr++,
    ΔᐃⵠⲆⲆ: Nr++,
    ᐃᐃᐃᐃᐃ: Nr++,
    ⵠᐃⲆᐃⵠ: Nr++,
    ᐃΔⵠⵠΔ: Nr++,
    ᐃⵠⵠⲆᐃ: Nr++,
    ΔⵠⵠⲆᐃ: Nr++,
    ⵠΔᐃⲆΔ: Nr++,
    ᐃΔⵠⵠⵠ: Nr++,
    ⵠΔᐃΔΔ: Nr++,
    Δⵠᐃⵠᐃ: Nr++,
    Ⲇᐃⵠⵠⵠ: Nr++,
    ⵠⵠΔⵠⲆ: Nr++,
    ⲆᐃⲆΔΔ: Nr++,
    Ⲇᐃⵠᐃⵠ: Nr++,
    ⲆⵠᐃΔΔ: Nr++,
    ᐃⲆⵠᐃᐃ: Nr++,
    ⵠⲆᐃᐃⲆ: Nr++,
    ᐃⲆΔᐃⲆ: Nr++,
    ΔⵠⵠΔΔ: Nr++,
    ΔΔⲆᐃⲆ: Nr++,
    ΔⵠΔⲆΔ: Nr++,
    ⵠΔⲆⵠᐃ: Nr++,
    ᐃΔΔⵠᐃ: Nr++,
    ᐃⲆⲆⲆⲆ: Nr++,
    ⲆᐃᐃΔᐃ: Nr++,
    ⵠᐃᐃΔᐃ: Nr++,
    ΔᐃᐃᐃΔ: Nr++,
    ᐃⲆᐃⲆᐃ: Nr++,
    ᐃⵠⵠⵠΔ: Nr++,
    ᐃⲆⲆΔΔ: Nr++,
    ⵠⲆⵠΔᐃ: Nr++,
    ᐃᐃⲆⵠⵠ: Nr++,
    Δᐃᐃⵠᐃ: Nr++,
    ΔᐃΔⲆⲆ: Nr++,
    ᐃⲆⲆⵠᐃ: Nr++,
    ⵠⲆⲆⵠⵠ: Nr++,
    ⲆᐃⵠΔᐃ: Nr++,
    ᐃⲆⵠⲆⲆ: Nr++,
    ᐃⵠⵠⲆΔ: Nr++,
    Δⵠⵠⵠᐃ: Nr++,
    ᐃΔᐃⲆⲆ: Nr++,
    ⲆΔᐃΔᐃ: Nr++,
    ⵠᐃΔΔᐃ: Nr++,
    ⵠⵠΔᐃᐃ: Nr++,
    ⵠⲆᐃᐃ: Nr++,
    ⵠΔΔΔⲆ: Nr++,
    ⲆⲆⲆᐃⵠ: Nr++,
    ⵠⵠⲆⵠᐃ: Nr++,
    ᐃⵠᐃⲆⵠ: Nr++,
    ⲆⵠᐃᐃΔ: Nr++,
    ⲆᐃⲆᐃⵠ: Nr++,
    ⲆᐃⵠΔΔ: Nr++,
    ⵠᐃⵠᐃⵠ: Nr++,
    ΔΔΔⵠⵠ: Nr++,
    ᐃⲆⵠΔᐃ: Nr++,
    ΔᐃᐃⵠΔ: Nr++,
    ᐃᐃⲆⲆΔⵠᐃ: Nr++,
    ⲆⲆᐃΔⲆⲆΔ: Nr++,
    ⵠΔⲆⲆΔ: Nr++,
    ⲆⲆⵠⵠᐃ: Nr++,
    ΔⲆΔΔⲆ: Nr++,
    ⲆᐃΔⲆⵠ: Nr++,
    ⲆΔᐃⵠⲆ: Nr++,
    ΔⵠᐃⲆⵠ: Nr++,
    ΔⲆⵠⵠⵠ: Nr++,
    ⲆⲆⵠⵠΔ: Nr++,
    ᐃⵠᐃΔⵠ: Nr++,
    Ⲇᐃⵠⵠᐃ: Nr++,
    Δᐃᐃᐃᐃ: Nr++,
    ⲆⲆΔⵠⵠ: Nr++,
    ᐃⵠΔᐃΔ: Nr++,
    ⵠᐃΔΔⵠ: Nr++,
    ⲆⲆΔΔⵠ: Nr++,
    ⵠᐃᐃΔⵠ: Nr++,
    ⲆⲆᐃᐃⲆ: Nr++,
    ΔΔΔⲆΔ: Nr++,
    ΔᐃⲆⵠⲆ: Nr++,
    ⲆΔᐃΔⵠ: Nr++,
    ᐃᐃΔᐃΔ: Nr++,
    ᐃᐃⲆᐃᐃ: Nr++,
    ⲆΔⲆᐃⲆ: Nr++,
    Δᐃᐃⵠⵠ: Nr++,
    ΔΔⲆⵠⲆ: Nr++,
    ⵠΔΔᐃᐃ: Nr++,
    ⲆⵠΔⵠⵠ: Nr++,
    ΔᐃⵠⵠΔ: Nr++,
    ⲆⵠΔⲆⲆ: Nr++,
    ⵠΔⲆΔⲆ: Nr++,
    ΔⵠΔⵠⵠ: Nr++,
    ⲆΔⵠΔΔ: Nr++,
    ᐃΔᐃΔⲆ: Nr++,
    ᐃᐃΔᐃⲆ: Nr++,
    ΔⲆΔΔΔ: Nr++,
    ᐃΔⵠᐃⵠ: Nr++,
    Δⵠᐃᐃᐃ: Nr++,
    ᐃⲆΔⵠⵠ: Nr++,
    ⵠᐃⵠⵠΔ: Nr++,
    ⲆⲆᐃᐃΔ: Nr++,
    ⲆΔⵠⵠᐃ: Nr++,
    ΔᐃⲆⵠⵠ: Nr++,
    ΔΔᐃⲆΔ: Nr++,
    ΔᐃⵠⲆΔ: Nr++,
    ΔΔᐃΔΔ: Nr++,
    ⲆΔⵠΔᐃ: Nr++,
    ⲆⵠⲆⵠⵠ: Nr++,
    ⵠΔᐃᐃᐃ: Nr++,
    ΔⲆⵠΔΔ: Nr++,
    ⵠⵠⲆΔⲆ: Nr++,
    ⵠᐃᐃⲆᐃ: Nr++,
    ᐃⵠⲆⵠⲆ: Nr++,
    ΔⵠΔΔⵠ: Nr++,
    ΔᐃⲆᐃᐃ: Nr++,
    ᐃⲆΔⲆⵠ: Nr++,
    ⲆᐃᐃⲆᐃ: Nr++,
    ⲆⲆⲆⵠⵠ: Nr++,
    ΔΔⲆᐃᐃ: Nr++,
    ⲆⲆⲆᐃΔ: Nr++,
    ᐃⵠᐃⵠⵠ: Nr++,
    ᐃΔⵠⵠᐃ: Nr++,
    ⵠⵠᐃᐃΔ: Nr++,
    ⲆⵠΔΔΔ: Nr++
  };
  Nr = 0;
  var _r = {
    ᐃᐃⲆΔⲆ: Nr++,
    ⲆⵠⵠⲆⲆ: Nr++,
    ⵠⵠΔⵠΔ: Nr++,
    ⵠᐃⲆΔΔ: Nr++,
    ᐃⲆⵠΔⲆ: Nr++,
    ⵠΔΔΔΔ: Nr++,
    ᐃΔⲆᐃΔ: Nr++,
    ΔᐃΔΔΔ: Nr++,
    ⲆΔⲆⲆⵠ: Nr++,
    ⵠΔᐃᐃⵠ: Nr++,
    ᐃⲆᐃⲆᐃ: Nr++,
    ᐃⵠⵠⵠΔ: Nr++,
    ᐃᐃΔⲆⲆ: Nr++,
    ⵠΔᐃⵠᐃ: Nr++,
    ⵠᐃᐃⵠΔ: Nr++,
    ᐃᐃᐃᐃⲆ: Nr++,
    ⲆⲆΔᐃᐃ: Nr++,
    ΔⲆᐃΔⵠ: Nr++,
    Ⲇᐃᐃᐃᐃ: Nr++,
    ⵠⵠΔΔⵠ: Nr++,
    Δⵠⵠⵠᐃ: Nr++,
    ᐃΔᐃⲆⲆ: Nr++,
    ⲆΔᐃΔᐃ: Nr++,
    ⲆᐃᐃΔᐃ: Nr++,
    ⵠᐃᐃΔᐃ: Nr++,
    Δᐃᐃⵠᐃ: Nr++,
    ΔᐃΔⲆⲆ: Nr++,
    ᐃⲆⲆⵠᐃ: Nr++,
    ᐃⵠΔΔⲆ: Nr++,
    ⵠⲆᐃᐃ: Nr++,
    ΔⲆᐃⵠΔ: Nr++,
    ΔⲆⲆⵠⲆ: Nr++,
    ⲆⵠΔⵠΔ: Nr++,
    ᐃΔⵠⲆᐃ: Nr++,
    ᐃΔⲆⵠΔ: Nr++,
    ⲆᐃΔⲆΔ: Nr++,
    ⲆⲆⵠⲆⲆ: Nr++,
    ⵠΔΔΔⵠ: Nr++,
    ᐃⵠⵠⵠᐃ: Nr++,
    ᐃⵠⲆⵠΔ: Nr++,
    ᐃⲆⲆΔΔ: Nr++,
    ᐃᐃⵠⲆⲆ: Nr++,
    ΔⲆΔⲆⲆ: Nr++,
    ⵠⲆⲆⵠⵠ: Nr++,
    ⲆᐃⵠΔᐃ: Nr++,
    ⵠⵠᐃᐃⲆ: Nr++,
    ᐃΔΔΔΔ: Nr++,
    ᐃⵠⵠⲆΔ: Nr++,
    ᐃⲆⵠⲆⲆ: Nr++,
    ᐃᐃΔⵠΔ: Nr++,
    ⲆΔΔⵠⵠ: Nr++,
    ⵠᐃⵠᐃΔ: Nr++,
    ⵠᐃⲆⲆⵠ: Nr++,
    ⲆⵠⲆᐃΔ: Nr++,
    ᐃΔΔᐃΔ: Nr++,
    ᐃⵠᐃΔⵠ: Nr++,
    Ⲇᐃⵠⵠᐃ: Nr++,
    ΔⵠᐃΔᐃ: Nr++,
    ᐃᐃⲆⵠⵠ: Nr++,
    ᐃⵠΔᐃΔ: Nr++,
    ⵠᐃΔΔⵠ: Nr++,
    ⲆⲆΔΔⵠ: Nr++,
    ⵠᐃᐃΔⵠ: Nr++,
    ⲆⲆᐃᐃⲆ: Nr++,
    ΔΔΔⲆΔ: Nr++,
    ⲆΔᐃΔⵠ: Nr++,
    ᐃᐃⲆᐃᐃ: Nr++,
    Δᐃᐃⵠⵠ: Nr++,
    ⵠΔΔᐃᐃ: Nr++,
    ΔᐃⵠⵠΔ: Nr++,
    ⵠΔⲆΔⲆ: Nr++,
    ⲆΔⵠΔΔ: Nr++,
    ᐃΔᐃΔⲆ: Nr++,
    ᐃᐃΔᐃⲆ: Nr++,
    ΔⲆΔΔΔ: Nr++,
    ᐃΔⵠᐃⵠ: Nr++,
    Δⵠᐃᐃᐃ: Nr++,
    ᐃⲆΔⵠⵠ: Nr++,
    ⵠᐃⵠⵠΔ: Nr++,
    ⲆⲆᐃᐃΔ: Nr++,
    ⵠᐃΔΔᐃ: Nr++,
    ⵠⵠΔᐃᐃ: Nr++,
    ΔᐃᐃᐃΔ: Nr++,
    ⲆΔⵠⵠᐃ: Nr++,
    ΔᐃⲆⵠⵠ: Nr++,
    ΔΔᐃⲆΔ: Nr++,
    ΔᐃⵠⲆΔ: Nr++,
    ⲆⵠΔᐃⲆ: Nr++,
    ⵠⲆⵠΔᐃ: Nr++,
    ᐃⵠⲆⵠⲆ: Nr++,
    ᐃⵠᐃⵠⵠ: Nr++,
    ⲆⵠΔΔΔ: Nr++,
    ᐃΔⵠⵠᐃ: Nr++,
    ⵠⵠᐃᐃΔ: Nr++,
    ΔᐃⲆᐃᐃ: Nr++,
    ᐃⲆΔⲆⵠ: Nr++,
    ⲆᐃᐃⲆᐃ: Nr++,
    ⲆⲆⲆⵠⵠ: Nr++,
    ΔΔⲆᐃᐃ: Nr++,
    ⲆⲆⲆᐃΔ: Nr++,
    ᐃⲆⵠᐃΔ: Nr++,
    ΔᐃⲆⵠⲆ: Nr++,
    ᐃᐃΔᐃΔ: Nr++,
    ⲆΔⲆᐃⲆ: Nr++,
    ΔΔⲆⵠⲆ: Nr++,
    ⲆⵠΔⵠⵠ: Nr++,
    ⲆⵠΔⲆⲆ: Nr++,
    ΔⵠΔⵠⵠ: Nr++,
    ᐃΔⵠⲆ: Nr++,
    ⵠᐃⵠⵠ: Nr++,
    ⵠᐃⲆⲆⲆ: Nr++,
    ᐃⲆⵠᐃ: Nr++,
    ᐃⲆΔⵠ: Nr++,
    ΔᐃᐃⲆⲆ: Nr++,
    ⵠⲆΔⵠᐃ: Nr++,
    ⵠᐃΔⲆᐃ: Nr++,
    ⵠⵠᐃᐃⵠ: Nr++,
    ΔΔⵠⵠⲆ: Nr++,
    ᐃΔΔⵠΔ: Nr++,
    ⲆᐃΔᐃⵠ: Nr++,
    ⵠΔΔΔⲆ: Nr++,
    Ⲇⵠⵠⵠ: Nr++,
    ᐃΔⵠⵠΔ: Nr++,
    ᐃⲆⵠᐃᐃ: Nr++,
    Δⵠᐃⵠᐃ: Nr++,
    ⲆᐃⲆᐃⵠ: Nr++,
    ⲆⲆΔⲆᐃ: Nr++,
    ΔᐃᐃⵠΔ: Nr++,
    ᐃⲆⵠΔᐃ: Nr++,
    ΔᐃΔⲆᐃ: Nr++,
    ⲆΔᐃΔⲆ: Nr++,
    ᐃⵠᐃⵠᐃ: Nr++,
    ⲆΔᐃΔΔ: Nr++,
    ⲆᐃᐃⵠΔ: Nr++,
    ⲆΔΔᐃⵠ: Nr++,
    ⵠΔⲆⲆΔ: Nr++,
    ⵠᐃⲆⲆᐃ: Nr++,
    ΔΔᐃⵠⲆ: Nr++,
    ⵠⲆΔⲆᐃ: Nr++,
    ⵠᐃΔⲆⵠ: Nr++,
    ᐃᐃΔΔⵠ: Nr++,
    ΔΔΔⵠⵠ: Nr++,
    ᐃΔΔΔⲆ: Nr++,
    ⲆⵠΔⲆΔ: Nr++,
    Δᐃᐃᐃᐃ: Nr++,
    ⲆⲆΔⵠⵠ: Nr++,
    ⲆΔΔᐃᐃ: Nr++,
    ⲆⲆⲆᐃⵠ: Nr++,
    ⵠⵠⲆⵠᐃ: Nr++,
    ⵠⵠⲆⵠⲆ: Nr++,
    ᐃⲆᐃⵠΔ: Nr++,
    ⲆⲆⵠⵠᐃ: Nr++,
    ΔⲆΔΔⲆ: Nr++,
    ⲆᐃΔⲆⵠ: Nr++,
    ⲆΔᐃⵠⲆ: Nr++,
    ΔⵠᐃⲆⵠ: Nr++,
    ΔⲆⵠⵠⵠ: Nr++,
    ⲆⲆⵠⵠΔ: Nr++,
    ᐃⵠᐃⲆⵠ: Nr++,
    ⲆⵠᐃᐃΔ: Nr++,
    ⵠⵠΔⵠⲆ: Nr++,
    ᐃΔⵠᐃⲆ: Nr++,
    ⲆⲆⲆⲆⵠ: Nr++,
    ΔᐃⵠⲆⲆ: Nr++,
    ᐃᐃᐃᐃᐃ: Nr++,
    ⵠᐃⲆᐃⵠ: Nr++,
    ΔⵠⵠⲆᐃ: Nr++,
    ᐃⲆⲆⲆⲆ: Nr++,
    ⲆᐃⲆΔΔ: Nr++,
    Ⲇᐃⵠᐃⵠ: Nr++,
    ⲆⵠᐃΔΔ: Nr++,
    ⵠΔᐃⲆΔ: Nr++,
    ᐃΔⵠⵠⵠ: Nr++,
    ⵠΔᐃΔΔ: Nr++,
    ⲆⵠⵠΔᐃ: Nr++,
    ΔᐃΔᐃⵠ: Nr++,
    ⵠⲆⲆΔᐃ: Nr++,
    ΔΔⲆⲆᐃ: Nr++,
    ᐃΔΔⲆΔ: Nr++,
    ⵠⲆΔᐃᐃ: Nr++,
    ΔΔᐃΔΔ: Nr++,
    ⲆΔⵠΔᐃ: Nr++,
    ⲆⵠⲆⵠⵠ: Nr++,
    ⵠΔᐃᐃᐃ: Nr++,
    ⵠᐃΔⵠΔ: Nr++,
    ᐃⲆΔᐃᐃ: Nr++,
    ⲆⲆΔⲆΔ: Nr++,
    ΔⲆᐃᐃⲆ: Nr++,
    ᐃⵠᐃᐃⵠ: Nr++,
    ⵠᐃⵠΔⵠ: Nr++,
    ⲆᐃⵠΔΔ: Nr++,
    ⲆⲆΔⲆⵠ: Nr++,
    ⲆᐃΔᐃΔ: Nr++,
    ᐃⲆⲆᐃΔ: Nr++,
    ᐃⲆᐃᐃΔ: Nr++,
    ᐃΔᐃⲆᐃ: Nr++,
    ⲆⵠᐃΔᐃ: Nr++,
    ⵠⲆⵠᐃᐃ: Nr++,
    ΔⲆⵠΔΔ: Nr++,
    ᐃΔᐃⵠⵠ: Nr++,
    ⲆⵠⲆⲆΔ: Nr++,
    ⵠᐃΔⲆⲆ: Nr++,
    ᐃⵠᐃΔ: Nr++,
    ⲆⵠⵠΔⲆ: Nr++,
    ⲆⵠΔᐃᐃ: Nr++,
    ⲆᐃΔⵠᐃ: Nr++,
    ᐃⵠΔΔΔ: Nr++,
    ⲆᐃΔΔⵠ: Nr++,
    ⲆΔⲆⵠΔ: Nr++,
    ⲆᐃⵠΔⲆ: Nr++,
    ΔⵠⵠΔⲆ: Nr++,
    ⵠΔᐃⵠⲆ: Nr++,
    ᐃⲆΔᐃⲆ: Nr++,
    ΔⵠⵠΔΔ: Nr++,
    ΔΔⲆᐃⲆ: Nr++,
    ΔⵠΔⲆΔ: Nr++,
    ⵠΔⲆⵠᐃ: Nr++,
    ᐃⵠⵠⲆᐃ: Nr++,
    Ⲇᐃⵠⵠⵠ: Nr++,
    ⵠⲆᐃᐃⲆ: Nr++,
    ᐃΔΔⵠᐃ: Nr++,
    ⵠᐃⵠᐃⵠ: Nr++,
    ᐃⲆⲆⲆᐃ: Nr++,
    ⵠⵠⲆΔⲆ: Nr++,
    ⵠᐃᐃⲆᐃ: Nr++,
    ⵠⲆᐃⲆΔ: Nr++,
    ᐃⵠⵠᐃⵠ: Nr++,
    ⲆⵠΔᐃⵠ: Nr++,
    ⲆⲆΔⵠⲆ: Nr++,
    ⵠᐃⲆⲆΔ: Nr++,
    ΔⵠΔΔⵠ: Nr++,
    ⵠⵠΔⲆⵠ: Nr++,
    ΔⵠΔΔⲆ: Nr++,
    ⵠⵠⵠΔⲆ: Nr++,
    ᐃⵠⵠΔⵠ: Nr++,
    ΔᐃΔΔⲆⲆⵠ: Nr++,
    ᐃⲆᐃⵠᐃΔⵠ: Nr++,
    ⵠΔⵠⵠⲆ: Nr++,
    ⵠⲆᐃΔⵠ: Nr++,
    ΔΔⵠⲆⲆ: Nr++,
    ᐃⲆΔⲆⲆ: Nr++
  };
  const bs = H;
  var cs = {
    ⵠⲆⵠⲆΔ: qo,
    ⲆᐃⵠᐃΔ: 0,
    ⵠᐃⲆᐃᐃ: pq,
    ΔⲆⵠⵠⲆ: 4,
    ΔⲆΔⵠ: Te,
    Ⲇⵠⵠⵠᐃ: 5
  };
  const ds = Kk;
  var es = [];
  const fs = nj;
  es[_r.ⵠᐃⵠⵠ] = {
    name: "Wood",
    ⵠⵠ: Xr.ⵠⵠⵠΔΔᐃⵠ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 0
  };
  const gs = ye;
  const hs = Xn;
  const is = Ri;
  es[_r.ᐃΔⵠⲆ] = {
    name: "Stone",
    ⵠⵠ: Xr.ⲆⵠⵠⲆⲆⲆᐃ,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: ya
  };
  es[_r.ᐃⲆⵠᐃ] = {
    name: "Gold",
    ⵠⵠ: Xr.ᐃⲆΔΔⵠⲆΔ,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: In
  };
  const ls = b;
  es[_r.ᐃⲆΔⵠ] = {
    name: "Diamond",
    ⵠⵠ: Xr.ⲆⲆΔⵠᐃΔⲆ,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: mj
  };
  const ks = Gi;
  const ms = U;
  const ns = pn;
  const os = _j;
  es[_r.Ⲇⵠⵠⵠ] = {
    name: "Amethyst",
    ⵠⵠ: Xr.ⵠⲆΔᐃΔᐃⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Rq
  };
  const ps = Lr;
  es[_r.ⵠⵠΔⵠΔ] = {
    name: "Rabbit fur",
    ⵠⵠ: Xr.ΔⲆᐃΔΔᐃᐃ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: Da
  };
  const rs = ra;
  const ss = bs;
  es[_r.ⲆⵠⵠΔᐃ] = {
    name: "Wolf fur",
    ⵠⵠ: Xr.ⵠⲆᐃⵠⲆᐃⵠ,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: ps
  };
  es[_r.ⵠΔⵠⵠⲆ] = {
    name: "Boar fur",
    ⵠⵠ: Xr.ⵠΔᐃΔⵠⲆΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: ps
  };
  const ts = dr;
  es[_r.ᐃⲆⵠᐃΔ] = {
    name: "Firefly",
    ⵠⵠ: Xr.ΔⵠΔΔⲆᐃⵠ,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ΔᐃⲆⵠⲆ] = {
    name: "Wood arrow",
    ⵠⵠ: Xr.ⵠᐃΔΔⲆⲆⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Xn
  };
  es[_r.ᐃᐃΔᐃΔ] = {
    name: "Stone arrow",
    ⵠⵠ: Xr.ⲆᐃΔⵠΔΔⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  es[_r.ⲆΔⲆᐃⲆ] = {
    name: "Gold arrow",
    ⵠⵠ: Xr.ᐃΔᐃᐃΔⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  const us = Ri;
  es[_r.ΔΔⲆⵠⲆ] = {
    name: "Diamond arrow",
    ⵠⵠ: Xr.ΔᐃⵠΔᐃⲆΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⲆⵠΔⵠⵠ] = {
    name: "Amethyst arrow",
    ⵠⵠ: Xr.ⲆΔΔⲆⵠⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⲆⵠΔⲆⲆ] = {
    name: "Reidite arrow",
    ⵠⵠ: Xr.ⵠΔᐃᐃⲆᐃᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  es[_r.ΔⵠΔⵠⵠ] = {
    name: "Dragon arrow",
    ⵠⵠ: Xr.ᐃᐃᐃⵠⲆⲆᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: In
  };
  const vs = xk;
  const ws = Ik;
  es[_r.ⲆΔΔᐃᐃ] = {
    name: "Winter fur",
    ⵠⵠ: Xr.ⵠᐃΔΔⵠⲆᐃ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ᐃⲆΔⲆⲆ] = {
    name: "Fur mammoth",
    ⵠⵠ: Xr.ⲆΔᐃⲆΔΔᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Rq
  };
  es[_r.ᐃΔⵠᐃⲆ] = {
    name: "Web",
    ⵠⵠ: Xr.ΔⵠΔΔΔᐃᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const xs = A;
  es[_r.ⵠⵠᐃᐃⵠ] = {
    name: "Meat",
    ⵠⵠ: Xr.ⵠⲆⲆΔΔΔⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: ya
  };
  es[_r.ΔΔᐃⵠⲆ] = {
    name: "Fish",
    ⵠⵠ: Xr.ⵠΔⲆⲆⵠⵠⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ΔᐃΔⲆᐃ] = {
    name: "Kraken skin",
    ⵠⵠ: Xr.ΔᐃᐃⲆΔΔᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⵠᐃΔⲆⵠ] = {
    name: "Piranha scales",
    ⵠⵠ: Xr.ⵠⵠΔᐃᐃⵠᐃ,
    ⵠⲆᐃⲆ: Rq,
    ⲆΔⲆⲆ: 0
  };
  const ys = sr;
  const zs = D;
  const js = mk;
  es[_r.ᐃΔΔΔⲆ] = {
    name: "Ice",
    ⵠⵠ: Xr.ΔᐃΔᐃΔΔⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mj
  };
  es[_r.ⲆⲆΔⲆᐃ] = {
    name: "Sand",
    ⵠⵠ: Xr.ⵠᐃⲆⲆΔΔᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: wj
  };
  es[_r.ᐃᐃΔΔⵠ] = {
    name: "Dirt",
    ⵠⵠ: Xr.ⲆΔⲆΔΔΔⲆ,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⵠᐃⲆⲆⲆ] = {
    name: "Berrie",
    ⵠⵠ: Xr.ⵠᐃΔⲆⲆⲆᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ᐃⵠᐃⵠᐃ] = {
    name: "Flour",
    ⵠⵠ: Xr.ΔⲆⵠᐃⵠᐃᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Lr
  };
  es[_r.ⲆΔΔᐃⵠ] = {
    name: "Flour",
    ⵠⵠ: Xr.ΔΔΔΔᐃⲆⲆ,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: Da
  };
  const As = E;
  const Bs = U;
  es[_r.ᐃΔΔⲆΔ] = {
    name: "Special fur peasant",
    ⵠⵠ: Xr.ⵠΔⵠⵠΔⵠⵠ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: wj
  };
  es[_r.ⵠⲆΔᐃᐃ] = {
    name: "Special fur hood",
    ⵠⵠ: Xr.ᐃⵠⲆⲆⵠΔΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: wj
  };
  es[_r.ⵠᐃⵠΔⵠ] = {
    name: "Pumpkin",
    ⵠⵠ: Xr.ⵠⵠⵠⵠΔⲆΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Da
  };
  const Cs = Ok;
  es[_r.ⲆᐃΔᐃΔ] = {
    name: "Garlic",
    ⵠⵠ: Xr.ᐃⵠᐃᐃⲆⵠΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Zj
  };
  const Ds = Ra;
  const qs = _o;
  const Es = da;
  es[_r.ᐃⲆᐃᐃΔ] = {
    name: "Thornbush",
    ⵠⵠ: Xr.ⵠⲆⲆⵠⲆⲆⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Rq
  };
  es[_r.ⲆᐃΔⵠᐃ] = {
    name: "Carrot",
    ⵠⵠ: Xr.ⵠⵠᐃⵠᐃᐃⵠ,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: ya
  };
  const Fs = On;
  es[_r.ⲆᐃΔΔⵠ] = {
    name: "Tomato",
    ⵠⵠ: Xr.ⲆΔᐃΔⵠΔⵠ,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: In
  };
  const Gs = q;
  const Hs = Lj;
  es[_r.ⲆᐃⵠΔⲆ] = {
    name: "Watermelon",
    ⵠⵠ: Xr.ⵠᐃⲆᐃΔᐃᐃ,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: Da
  };
  es[_r.ⵠΔᐃⵠⲆ] = {
    name: "Aloe Vera",
    ⵠⵠ: Xr.ΔᐃΔΔⲆⵠᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ᐃⲆⲆⲆᐃ] = {
    name: "Penguin Feather",
    ⵠⵠ: Xr.ⲆⲆⵠᐃⵠ,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: Rq
  };
  const Is = Br;
  es[_r.ⵠⵠΔⲆⵠ] = {
    name: "Hawk Feather",
    ⵠⵠ: Xr.ΔⲆΔⵠᐃ,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: Rq
  };
  const Js = $n;
  es[_r.ΔⵠΔΔⲆ] = {
    name: "Vulture Feather",
    ⵠⵠ: Xr.ΔⲆΔⵠⲆ,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: Zj
  };
  es[_r.ⵠⵠⵠΔⲆ] = {
    name: "Cactus",
    ⵠⵠ: Xr.ⲆⲆΔΔΔΔᐃ,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 0
  };
  const Ks = nq;
  const Ls = _j;
  es[_r.ᐃⲆᐃⵠᐃΔⵠ] = {
    name: "Cactus",
    ⵠⵠ: Xr.ⲆΔⲆⵠΔⵠΔ,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: Rq
  };
  es[_r.ΔᐃΔΔⲆⲆⵠ] = {
    name: "Pitchfork Part",
    ⵠⵠ: Xr.ΔⵠᐃⲆᐃⲆΔ,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: 0
  };
  const eh = Gi;
  const ih = H;
  es[_r.ⵠⲆᐃΔⵠ] = {
    name: "Emerald Machine",
    ⵠⵠ: Xr.ΔⵠᐃⲆΔⵠⲆ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 0
  };
  const th = ja;
  es[_r.ᐃⵠⵠΔⵠ] = {
    name: "Emerald",
    ⵠⵠ: Xr.ΔΔⵠⵠⵠ,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 0
  };
  const nh = gr;
  es[_r.ᐃᐃⵠⲆⲆ] = {
    name: "Christmas Hat",
    ⵠⵠ: Xr.ΔⵠᐃᐃⵠⵠⲆ,
    ⲆΔⲆⲆ: Lr
  };
  es[_r.ΔⲆΔⲆⲆ] = {
    name: "Elf Hat",
    ⵠⵠ: Xr.ⲆΔᐃΔᐃᐃᐃ,
    ⲆΔⲆⲆ: Zj
  };
  const oh = Xa;
  es[_r.ⵠᐃΔⲆⲆ] = {
    name: "Garland",
    ⵠⵠ: Xr.ⲆᐃⵠᐃⲆΔⲆ,
    ⲆΔⲆⲆ: 0,
    ⵠⲆᐃⲆ: ps
  };
  es[_r.ⲆⵠⲆⲆΔ] = {
    name: "Candy",
    ⵠⵠ: Xr.ⲆⲆⲆΔᐃⵠΔ,
    ⲆΔⲆⲆ: 0
  };
  const rh = Nk;
  es[_r.ᐃΔᐃⵠⵠ] = {
    name: "Sugar Cane",
    ⵠⵠ: Xr.ᐃΔⲆΔⵠⲆΔ,
    ⲆΔⲆⲆ: 0
  };
  const ah = 14;
  const sh = Yq;
  const hh = so;
  es[_r.ⵠΔᐃᐃⵠ] = {
    name: "Pirate Sword",
    ⵠⵠ: Xr.ΔᐃⵠΔΔⵠⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Rq
  };
  es[_r.ⲆⵠᐃΔᐃ] = {
    name: "Crab Stick",
    ⵠⵠ: Xr.ⲆⲆⵠⵠⲆⲆΔ,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: 0
  };
  const lh = Wa;
  es[_r.ᐃⵠᐃΔ] = {
    name: "Reidite",
    ⵠⵠ: Xr.ᐃⵠⵠⵠΔᐃⵠ,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: ps
  };
  es[_r.ⲆⵠⵠΔⲆ] = {
    name: "Flame",
    ⵠⵠ: Xr.ⲆⲆⵠⵠᐃΔᐃ,
    ⵠⲆᐃⲆ: Rq,
    ⲆΔⲆⲆ: In
  };
  es[_r.ΔᐃᐃⲆⲆ] = {
    name: "Campfire",
    ⵠⵠ: Xr.ΔᐃΔᐃⵠⲆᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const gh = x;
  const uh = C;
  const bh = $k;
  const vh = Jq;
  es[_r.ΔⲆⵠΔΔ] = {
    name: "Bed",
    ⵠⵠ: Xr.ᐃᐃⵠΔⵠΔᐃ,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: 1
  };
  const dh = _j;
  const ch = Lo;
  es[_r.ⵠⲆΔⵠᐃ] = {
    name: "Workbench",
    ⵠⵠ: Xr.ᐃΔΔⲆⵠᐃᐃ,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ᐃᐃⲆΔⲆ] = {
    name: "Stone sword",
    ⵠⵠ: Xr.ᐃⲆΔⲆⵠⲆᐃ,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: Xn
  };
  const mh = vi;
  const ph = gs;
  es[_r.ⲆⵠⵠⲆⲆ] = {
    name: "Stone pick",
    ⵠⵠ: Xr.ᐃⵠᐃⲆⵠΔⲆ,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 1
  };
  const Ch = $o;
  es[_r.ⵠᐃΔⲆᐃ] = {
    name: "Berries bush",
    ⵠⵠ: Xr.ᐃᐃⲆᐃⲆΔⵠ,
    ⵠⲆᐃⲆ: ps,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⵠᐃⲆΔΔ] = {
    name: "Gold pick",
    ⵠⵠ: Xr.ⲆΔΔΔᐃⲆΔ,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: js
  };
  const Th = te;
  const fh = Bq;
  const zh = Ur;
  es[_r.ᐃⲆⵠΔⲆ] = {
    name: "Diamond pick",
    ⵠⵠ: Xr.ᐃΔᐃᐃᐃᐃᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: za
  };
  es[_r.ΔⵠᐃΔᐃ] = {
    name: "Wood sword",
    ⵠⵠ: Xr.ᐃΔⲆᐃΔΔᐃ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⵠΔΔΔΔ] = {
    name: "Gold sword",
    ⵠⵠ: Xr.ᐃⵠⵠⵠΔⵠΔ,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: ie
  };
  es[_r.ᐃΔⲆᐃΔ] = {
    name: "Diamond sword",
    ⵠⵠ: Xr.ᐃᐃⲆᐃⲆᐃⲆ,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: 1
  };
  const yh = Gk;
  es[_r.ⲆΔⲆⲆⵠ] = {
    name: "Wood pick",
    ⵠⵠ: Xr.ⲆᐃⵠⲆᐃⵠⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const wh = Bi;
  const Ph = ro;
  es[_r.ⲆⲆⲆⲆⵠ] = {
    name: "Wood wall",
    ⵠⵠ: Xr.ᐃᐃⵠΔⲆᐃⲆ,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: 1
  };
  const Ah = Y;
  const kh = Vj;
  es[_r.ⵠⵠΔⵠⲆ] = {
    name: "Wood spike",
    ⵠⵠ: Xr.ΔΔΔΔⵠΔᐃ,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ΔΔⵠⵠⲆ] = {
    name: "Cooked meat",
    ⵠⵠ: Xr.ⵠΔⲆⲆΔⵠΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: In
  };
  es[_r.ᐃΔΔⵠΔ] = {
    name: "Big campfire",
    ⵠⵠ: Xr.ΔᐃⵠᐃᐃⲆⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const xh = ye;
  const Jh = Nn;
  const Mh = Un;
  es[_r.ᐃΔᐃⲆᐃ] = {
    name: "Bandage",
    ⵠⵠ: Xr.ⲆⵠⵠⲆᐃⵠⲆ,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: hs
  };
  const Bh = dr;
  const Dh = vs;
  const Ih = ws;
  const Eh = ya;
  es[_r.ΔᐃⵠⲆⲆ] = {
    name: "Stone wall",
    ⵠⵠ: Xr.ᐃⲆᐃⵠⲆΔᐃ,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ᐃᐃᐃᐃᐃ] = {
    name: "Gold wall",
    ⵠⵠ: Xr.ΔΔⲆΔⵠⵠⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⵠᐃⲆᐃⵠ] = {
    name: "Diamond wall",
    ⵠⵠ: Xr.ⵠⲆⵠⵠⵠⲆⵠ,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  const Sh = Gj;
  es[_r.ΔⵠⵠⲆᐃ] = {
    name: "Wood door",
    ⵠⵠ: Xr.ΔⵠΔΔᐃⲆᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: ie
  };
  es[_r.ᐃⲆⲆⲆⲆ] = {
    name: "Chest",
    ⵠⵠ: Xr.ΔⲆΔᐃᐃΔΔ,
    ⵠⲆᐃⲆ: ps,
    ⲆΔⲆⲆ: hs
  };
  es[_r.ⲆᐃⲆΔΔ] = {
    name: "Stone spike",
    ⵠⵠ: Xr.ⵠⵠⲆⵠΔⵠⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Qh = sr;
  es[_r.Ⲇᐃⵠᐃⵠ] = {
    name: "Gold spike",
    ⵠⵠ: Xr.ⵠⵠᐃΔⵠⵠⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const _h = on;
  es[_r.ⲆⵠᐃΔΔ] = {
    name: "Diamond spike",
    ⵠⵠ: Xr.ⲆⲆΔⲆΔⵠⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⵠΔᐃⲆΔ] = {
    name: "Stone door",
    ⵠⵠ: Xr.ΔᐃⲆⲆⵠⲆΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: js
  };
  es[_r.ᐃΔⵠⵠⵠ] = {
    name: "Gold door",
    ⵠⵠ: Xr.ⲆⵠⵠΔΔΔᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  es[_r.ⵠΔᐃΔΔ] = {
    name: "Diamond door",
    ⵠⵠ: Xr.ᐃΔΔΔⲆⵠⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: hs
  };
  es[_r.ᐃⲆᐃⲆᐃ] = {
    name: "Chapka",
    ⵠⵠ: Xr.ᐃⲆⲆⲆΔΔᐃ,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: Te
  };
  es[_r.ᐃⵠⵠⵠΔ] = {
    name: "Big Chapka",
    ⵠⵠ: Xr.ⲆΔⲆⵠⲆⵠΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Fh = dr;
  es[_r.ᐃᐃΔⲆⲆ] = {
    name: "Wood spear",
    ⵠⵠ: Xr.ᐃᐃⵠⵠⲆΔΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Rh = uh;
  const Gh = ds;
  const jh = ie;
  es[_r.ⵠΔᐃⵠᐃ] = {
    name: "Stone spear",
    ⵠⵠ: Xr.ΔⵠⵠᐃᐃΔᐃ,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: mk
  };
  es[_r.ⵠᐃᐃⵠΔ] = {
    name: "Gold spear",
    ⵠⵠ: Xr.ᐃⲆⲆᐃⲆΔⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Te
  };
  const Lh = bh;
  const Wh = di;
  const Oh = er;
  es[_r.ᐃᐃᐃᐃⲆ] = {
    name: "Diamond spear",
    ⵠⵠ: Xr.ΔⵠᐃΔⲆⵠⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Nh = Kq;
  es[_r.ⲆⲆΔᐃᐃ] = {
    name: "Dragon spear",
    ⵠⵠ: Xr.ⵠΔⲆⲆΔᐃⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ΔⲆᐃΔⵠ] = {
    name: "Dragon spear",
    ⵠⵠ: Xr.ⵠᐃⲆⲆⲆⲆᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mj
  };
  const qh = p;
  const Hh = vi;
  es[_r.Ⲇᐃᐃᐃᐃ] = {
    name: "Crab spear",
    ⵠⵠ: Xr.ⲆⲆᐃΔⲆⵠΔ,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: js
  };
  const Uh = Qr;
  es[_r.ⵠⲆⵠᐃᐃ] = {
    name: "Crab loot",
    ⵠⵠ: Xr.ᐃΔᐃΔⵠⵠΔ,
    ⵠⲆᐃⲆ: ps,
    ⲆΔⲆⲆ: mj
  };
  const Yh = sa;
  const Kh = Rq;
  es[_r.ⲆᐃΔᐃⵠ] = {
    name: "Furnace",
    ⵠⵠ: Xr.ⲆⲆⵠᐃΔⲆᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Oq
  };
  const Vh = La;
  const Zh = jk;
  es[_r.ⲆᐃᐃΔᐃ] = {
    name: "Explorer hat",
    ⵠⵠ: Xr.ⲆⲆⵠⵠⲆⲆᐃ,
    ⵠⲆᐃⲆ: ps,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⵠᐃᐃΔᐃ] = {
    name: "Pirate hat",
    ⵠⵠ: Xr.ⵠⵠΔⵠᐃΔⵠ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⲆⵠΔᐃⲆ] = {
    name: "Flower hat",
    ⵠⵠ: Xr.ⵠⵠᐃⲆᐃᐃⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Xh = m;
  const $h = Is;
  es[_r.ⵠⲆⵠΔᐃ] = {
    name: "Fur hat",
    ⵠⵠ: Xr.ᐃⵠᐃⲆᐃΔⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: js
  };
  es[_r.ᐃᐃⲆⵠⵠ] = {
    name: "Wood helmet",
    ⵠⵠ: Xr.ⵠⲆΔᐃⲆⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: js
  };
  es[_r.Δᐃᐃⵠᐃ] = {
    name: "Stone helmet",
    ⵠⵠ: Xr.ⲆⲆⵠⵠᐃⵠᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Te
  };
  const el = zh;
  const il = ar;
  es[_r.ΔᐃΔⲆⲆ] = {
    name: "Gold helmet",
    ⵠⵠ: Xr.ⲆᐃⲆⵠⲆᐃⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const tl = qa;
  es[_r.ᐃⲆⲆⵠᐃ] = {
    name: "Diamond helmet",
    ⵠⵠ: Xr.ⵠᐃⵠΔⵠⵠⵠ,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: jh
  };
  const nl = vn;
  es[_r.ᐃⵠΔΔⲆ] = {
    name: "Book",
    ⵠⵠ: Xr.ᐃⵠⵠᐃⲆΔⵠ,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⵠΔΔΔⲆ] = {
    name: "Paper",
    ⵠⵠ: Xr.ⲆⲆΔΔⵠⵠⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⵠⲆᐃᐃ] = {
    name: "Bag",
    ⵠⵠ: Xr.ⵠⲆⵠᐃⲆⲆΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Oq
  };
  es[_r.ΔⲆᐃⵠΔ] = {
    name: "Amethyst sword",
    ⵠⵠ: Xr.ⲆΔⲆᐃⲆⵠᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const ol = Vn;
  const rl = b;
  const al = mh;
  es[_r.ΔⲆⲆⵠⲆ] = {
    name: "Amethyst pick",
    ⵠⵠ: Xr.ᐃⵠᐃⵠΔΔᐃ,
    ⵠⲆᐃⲆ: ps,
    ⲆΔⲆⲆ: 1
  };
  const sl = C;
  es[_r.ᐃΔⵠⲆᐃ] = {
    name: "Amethyst spear",
    ⵠⵠ: Xr.ⲆΔⵠΔⲆᐃⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: hs
  };
  const hl = ci;
  es[_r.ⲆᐃΔⲆΔ] = {
    name: "Stone hammer",
    ⵠⵠ: Xr.ᐃΔᐃΔⵠᐃΔ,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⲆⲆⵠⲆⲆ] = {
    name: "Gold hammer",
    ⵠⵠ: Xr.ΔⵠΔⵠᐃΔΔ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  const ll = z;
  const gl = ea;
  const ul = Gi;
  es[_r.ⵠΔΔΔⵠ] = {
    name: "Diamond hammer",
    ⵠⵠ: Xr.ᐃⵠΔᐃⵠⵠΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const bl = v;
  const vl = b;
  const dl = yq;
  es[_r.ᐃⵠⵠⵠᐃ] = {
    name: "Amethyst hammer",
    ⵠⵠ: Xr.ⲆⲆⵠᐃΔⲆΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Te
  };
  es[_r.ᐃⵠⲆⵠΔ] = {
    name: "Reidite hammer",
    ⵠⵠ: Xr.ⵠⵠᐃⵠΔᐃⲆ,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  const cl = rr;
  es[_r.ᐃΔⵠⵠΔ] = {
    name: "Amethyst wall",
    ⵠⵠ: Xr.ᐃⵠᐃΔᐃⵠⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Te
  };
  const ml = xh;
  const pl = Hh;
  const Cl = Bs;
  const Tl = da;
  const fl = Oq;
  const zl = Hi;
  es[_r.ᐃⲆⵠᐃᐃ] = {
    name: "Amethyst spike",
    ⵠⵠ: Xr.ΔᐃⲆⵠⲆⲆⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const yl = Bo;
  const wl = po;
  es[_r.Δⵠᐃⵠᐃ] = {
    name: "Amethyst door",
    ⵠⵠ: Xr.ⲆⵠᐃⲆⲆⵠⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  es[_r.ᐃⲆⲆΔΔ] = {
    name: "Cap & scarf",
    ⵠⵠ: Xr.ⲆⵠⵠᐃᐃΔΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  es[_r.ⲆⲆⲆᐃⵠ] = {
    name: "Blue cord",
    ⵠⵠ: Xr.ΔⲆⲆⵠᐃⲆᐃ,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 0
  };
  const Pl = is;
  const Al = Pe;
  const kl = D;
  const xl = Fo;
  es[_r.ⵠⵠⲆⵠᐃ] = {
    name: "Lock",
    ⵠⵠ: Xr.ⲆΔᐃΔⵠΔⲆ,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: 1
  };
  const Jl = kl;
  es[_r.ⲆⲆⵠⵠᐃ] = {
    name: "Resurrection",
    ⵠⵠ: Xr.ⵠΔΔΔⵠᐃⵠ,
    ⵠⲆᐃⲆ: Eh,
    ⲆΔⲆⲆ: fl
  };
  es[_r.ᐃⵠᐃⲆⵠ] = {
    name: "Lockpick",
    ⵠⵠ: Xr.ⵠⵠⵠΔΔⵠⲆ,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: Te
  };
  es[_r.ⲆⵠᐃᐃΔ] = {
    name: "Totem",
    ⵠⵠ: Xr.ⲆᐃΔⲆⵠⵠᐃ,
    ⵠⲆᐃⲆ: ps,
    ⲆΔⲆⲆ: js
  };
  es[_r.ⵠⲆⲆⵠⵠ] = {
    name: "Amethyst helmet",
    ⵠⵠ: Xr.Ⲇⵠᐃᐃᐃᐃⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⵠⵠᐃᐃⲆ] = {
    name: "Super hammer",
    ⵠⵠ: Xr.ⵠⲆᐃⲆΔⲆⲆ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⲆᐃⲆᐃⵠ] = {
    name: "Bridge",
    ⵠⵠ: Xr.ΔⲆⲆΔΔⵠᐃ,
    ⵠⲆᐃⲆ: Te,
    ⲆΔⲆⲆ: 1
  };
  const Ml = aa;
  const Bl = Zo;
  const Dl = Sa;
  const Il = wq;
  es[_r.ⵠᐃⵠᐃⵠ] = {
    name: "Wood Tower",
    ⵠⵠ: Xr.ⵠᐃⲆⵠᐃΔⲆ,
    ⵠⲆᐃⲆ: mk,
    ⲆΔⲆⲆ: Oq
  };
  es[_r.ΔᐃᐃⵠΔ] = {
    name: "Bottle full",
    ⵠⵠ: Xr.ⵠⲆᐃᐃᐃᐃⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ᐃⲆⵠΔᐃ] = {
    name: "Bottle empty",
    ⵠⵠ: Xr.ΔᐃⲆⲆⵠΔᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ᐃΔΔΔΔ] = {
    name: "Stone shovel",
    ⵠⵠ: Xr.ᐃⵠⲆΔᐃⲆᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⲆΔᐃΔⲆ] = {
    name: "Watering can",
    ⵠⵠ: Xr.ΔᐃᐃⵠⲆⲆⵠ,
    ⵠⲆᐃⲆ: Kh,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⲆΔᐃΔΔ] = {
    name: "Wheat",
    ⵠⵠ: Xr.ΔΔⲆᐃᐃΔΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mj
  };
  es[_r.ⲆᐃᐃⵠΔ] = {
    name: "Cookie",
    ⵠⵠ: Xr.ΔΔΔᐃᐃᐃⵠ,
    ⵠⲆᐃⲆ: Kh,
    ⲆΔⲆⲆ: Lr
  };
  const El = is;
  es[_r.ⵠΔⲆⲆΔ] = {
    name: "Windmill",
    ⵠⵠ: Xr.ΔᐃΔⵠⲆΔⵠ,
    ⵠⲆᐃⲆ: Eh,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ᐃⵠⵠⲆΔ] = {
    name: "Super diving suit",
    ⵠⵠ: Xr.ⲆᐃⲆⵠⲆⲆΔ,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 1
  };
  const Sl = Hq;
  const Ql = $a;
  es[_r.ᐃⲆⵠⲆⲆ] = {
    name: "Diving mask",
    ⵠⵠ: Xr.ⲆⲆⲆⵠΔΔΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: jh
  };
  es[_r.ᐃᐃΔⵠΔ] = {
    name: "Watering can full",
    ⵠⵠ: Xr.ⲆⲆΔᐃⵠⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: zl
  };
  const _l = nk;
  const Fl = ys;
  es[_r.ⵠᐃⲆⲆᐃ] = {
    name: "Cake",
    ⵠⵠ: Xr.ᐃᐃⲆΔᐃⲆᐃ,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⵠⲆΔⲆᐃ] = {
    name: "Foodfish cooked",
    ⵠⵠ: Xr.ⲆⲆΔⲆΔⲆⵠ,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: Hi
  };
  const Rl = b;
  es[_r.ΔΔΔⵠⵠ] = {
    name: "Plot",
    ⵠⵠ: Xr.ⵠⲆⵠΔⵠΔⲆ,
    ⵠⲆᐃⲆ: js,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⲆⵠΔⲆΔ] = {
    name: "Bread",
    ⵠⵠ: Xr.ΔΔᐃⲆᐃⲆⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: ya
  };
  es[_r.ᐃᐃⲆⲆΔⵠᐃ] = {
    name: "Bottle full (with ice)",
    ⵠⵠ: Xr.ΔᐃⲆⵠⵠᐃⵠⵠⲆ,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: mk
  };
  es[_r.ⲆⲆᐃΔⲆⲆΔ] = {
    name: "Bottle full (with well)",
    ⵠⵠ: Xr.ⵠⲆΔⵠⲆⵠᐃᐃⲆ,
    ⵠⲆᐃⲆ: Rq,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⲆΔΔⵠⵠ] = {
    name: "Gold shovel",
    ⵠⵠ: Xr.ΔᐃᐃⵠⲆΔⵠ,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: fl
  };
  const Gl = jk;
  const jl = Zn;
  es[_r.ⵠᐃⵠᐃΔ] = {
    name: "Diamond shovel",
    ⵠⵠ: Xr.ⲆᐃⵠᐃΔⲆⵠ,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 1
  };
  const Ll = Tk;
  const Wl = ta;
  es[_r.ⵠᐃⲆⲆⵠ] = {
    name: "Amethyst shovel",
    ⵠⵠ: Xr.ⲆᐃⵠⲆΔᐃᐃ,
    ⵠⲆᐃⲆ: Eh,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ᐃⵠᐃΔⵠ] = {
    name: "Spanner",
    ⵠⵠ: Xr.ⵠⵠⲆΔΔᐃᐃ,
    ⵠⲆᐃⲆ: zl,
    ⲆΔⲆⲆ: 1
  };
  const Ol = jh;
  const Nl = vh;
  const ql = Rr;
  const Hl = Ak;
  const Ul = rk;
  const Yl = jk;
  es[_r.Ⲇᐃⵠⵠᐃ] = {
    name: "Machete",
    ⵠⵠ: Xr.ⲆΔΔᐃⵠⲆⲆ,
    ⵠⲆᐃⲆ: zl,
    ⲆΔⲆⲆ: 1
  };
  es[_r.Δᐃᐃᐃᐃ] = {
    name: "Bread oven",
    ⵠⵠ: Xr.ᐃΔΔΔⵠⵠᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⲆⲆΔⵠⵠ] = {
    name: "Sandwich",
    ⵠⵠ: Xr.ᐃᐃⲆⲆᐃΔΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const Kl = y;
  const Vl = Il;
  const Zl = qq;
  es[_r.ᐃⵠΔᐃΔ] = {
    name: "Dragon helmet",
    ⵠⵠ: Xr.ⵠᐃⲆΔΔΔⲆ,
    ⵠⲆᐃⲆ: zl,
    ⲆΔⲆⲆ: 0
  };
  const Xl = Z;
  es[_r.ⵠᐃΔΔⵠ] = {
    name: "Dragon helmet",
    ⵠⵠ: Xr.ⵠⵠⵠⵠΔⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const $l = wh;
  es[_r.ᐃⵠᐃⵠⵠ] = {
    name: "Witch",
    ⵠⵠ: Xr.ΔⲆⵠΔⲆⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: In
  };
  const eg = Al;
  es[_r.ⲆⵠΔΔΔ] = {
    name: "Nimbus",
    ⵠⵠ: Xr.ΔΔⲆᐃᐃᐃⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ᐃΔⵠⵠᐃ] = {
    name: "Wand1",
    ⵠⵠ: Xr.ⲆⲆΔΔⲆᐃⲆ,
    ⵠⲆᐃⲆ: ps,
    ⲆΔⲆⲆ: Da
  };
  es[_r.ⵠⵠᐃᐃΔ] = {
    name: "Wand2",
    ⵠⵠ: Xr.ⲆⵠⵠΔⲆⵠⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Eh
  };
  es[_r.ⵠᐃᐃΔⵠ] = {
    name: "Dragon sword",
    ⵠⵠ: Xr.ⵠΔⲆⵠΔⵠⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⲆⲆᐃᐃⲆ] = {
    name: "Dragon sword",
    ⵠⵠ: Xr.ΔⵠΔΔΔΔᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⲆΔⵠΔΔ] = {
    name: "Wood shield",
    ⵠⵠ: Xr.ⵠᐃⵠⵠΔΔⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  const ig = ea;
  const tg = ya;
  es[_r.ᐃΔᐃΔⲆ] = {
    name: "Stone shield",
    ⵠⵠ: Xr.ΔⵠᐃΔⲆⲆΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Te
  };
  const ng = $k;
  const og = zi;
  const rg = fl;
  const ag = Sa;
  es[_r.ᐃᐃΔᐃⲆ] = {
    name: "Gold shield",
    ⵠⵠ: Xr.ⲆⲆⵠⵠⲆᐃⵠ,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: hs
  };
  es[_r.ΔⲆΔΔΔ] = {
    name: "Diamond shield",
    ⵠⵠ: Xr.ⵠⵠᐃⲆᐃⲆᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: za
  };
  es[_r.ᐃΔⵠᐃⵠ] = {
    name: "Amethyst shield",
    ⵠⵠ: Xr.ΔΔᐃᐃΔᐃⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.Δⵠᐃᐃᐃ] = {
    name: "Reidite shield",
    ⵠⵠ: Xr.ΔⲆⲆΔΔᐃⵠ,
    ⵠⲆᐃⲆ: Zj,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ΔᐃⲆᐃᐃ] = {
    name: "Wood axe",
    ⵠⵠ: Xr.ⲆᐃⵠⲆᐃᐃⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const sg = zi;
  es[_r.ᐃⲆΔⲆⵠ] = {
    name: "Stone axe",
    ⵠⵠ: Xr.ⲆᐃⲆⲆⲆᐃᐃ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  const hg = El;
  es[_r.ⲆᐃᐃⲆᐃ] = {
    name: "Gold axe",
    ⵠⵠ: Xr.ᐃΔᐃΔΔᐃᐃ,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⲆⲆⲆⵠⵠ] = {
    name: "Diamond axe",
    ⵠⵠ: Xr.ⵠΔⲆᐃⲆⵠΔ,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: hs
  };
  es[_r.ΔΔⲆᐃᐃ] = {
    name: "Amethyst axe",
    ⵠⵠ: Xr.ΔⲆΔⵠⵠᐃⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⲆⲆⲆᐃΔ] = {
    name: "Reidite axe",
    ⵠⵠ: Xr.ⵠⵠⲆᐃΔᐃᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const lg = Zo;
  const gg = Ra;
  const ug = R;
  es[_r.ΔΔΔⲆΔ] = {
    name: "Wood bow",
    ⵠⵠ: Xr.ⵠⵠᐃⵠⵠⵠᐃ,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: za
  };
  es[_r.ⲆΔᐃΔⵠ] = {
    name: "Stone bow",
    ⵠⵠ: Xr.ΔᐃⵠΔᐃⵠⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: js
  };
  es[_r.ᐃᐃⲆᐃᐃ] = {
    name: "Gold bow",
    ⵠⵠ: Xr.ⵠⲆⵠⵠΔⵠⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const bg = ik;
  es[_r.Δᐃᐃⵠⵠ] = {
    name: "Diamond bow",
    ⵠⵠ: Xr.ᐃᐃᐃⵠΔᐃᐃ,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: Te
  };
  es[_r.ⵠΔΔᐃᐃ] = {
    name: "Amethyst bow",
    ⵠⵠ: Xr.ⵠⵠⲆΔΔᐃⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  const vg = m;
  es[_r.ΔᐃⵠⵠΔ] = {
    name: "Reidite bow",
    ⵠⵠ: Xr.ⵠⵠᐃΔⲆΔⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Ol
  };
  es[_r.ⵠΔⲆΔⲆ] = {
    name: "Dragon bow",
    ⵠⵠ: Xr.ᐃⲆᐃΔⲆⵠᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const dg = pq;
  es[_r.ᐃⲆΔⵠⵠ] = {
    name: "Crown of life",
    ⵠⵠ: Xr.ⵠⵠᐃⲆΔⲆᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Hi
  };
  const cg = p;
  es[_r.ΔᐃΔᐃⵠ] = {
    name: "Gem of life",
    ⵠⵠ: Xr.ᐃⵠⵠⲆΔΔⲆ,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: Hi
  };
  es[_r.ᐃⲆΔᐃᐃ] = {
    name: "Orb of the dragon",
    ⵠⵠ: Xr.ᐃᐃᐃΔⵠΔᐃ,
    ⵠⲆᐃⲆ: zl,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ΔⲆᐃᐃⲆ] = {
    name: "Orb of the dragon",
    ⵠⵠ: Xr.ᐃᐃᐃⲆⲆᐃΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⵠᐃΔⵠΔ] = {
    name: "Cube of the dragon",
    ⵠⵠ: Xr.ᐃᐃⵠᐃⲆΔⲆ,
    ⵠⲆᐃⲆ: Da,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⲆⲆΔⲆΔ] = {
    name: "Cube of the dragon",
    ⵠⵠ: Xr.ΔⵠᐃᐃⲆᐃⵠ,
    ⵠⲆᐃⲆ: zl,
    ⲆΔⲆⲆ: 0
  };
  const mg = lj;
  es[_r.ⵠᐃⵠⵠΔ] = {
    name: "Crown of luck",
    ⵠⵠ: Xr.ⲆⲆⲆᐃΔΔⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⵠⲆⲆΔᐃ] = {
    name: "Gem of luck",
    ⵠⵠ: Xr.ⵠΔᐃⲆᐃΔΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Eh
  };
  es[_r.ⲆⲆᐃᐃΔ] = {
    name: "Crown of the angel",
    ⵠⵠ: Xr.ᐃⵠⲆΔⵠⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const pg = Dk;
  const Cg = _h;
  es[_r.ΔΔⲆⲆᐃ] = {
    name: "Gem of the angel",
    ⵠⵠ: Xr.ⲆⵠⲆⵠⲆⲆᐃ,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⵠⵠⲆⵠⲆ] = {
    name: "Dragon heart",
    ⵠⵠ: Xr.ᐃᐃᐃⲆᐃⲆⲆ,
    ⵠⲆᐃⲆ: zl,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ᐃⲆᐃⵠΔ] = {
    name: "Lava heart",
    ⵠⵠ: Xr.ΔΔΔΔⵠⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: In
  };
  const Tg = ur;
  es[_r.ⲆΔⵠⵠᐃ] = {
    name: "Hood",
    ⵠⵠ: Xr.ΔΔᐃᐃⵠⲆΔ,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ΔᐃⲆⵠⵠ] = {
    name: "Peasant",
    ⵠⵠ: Xr.ⵠᐃΔᐃᐃᐃΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ΔᐃⵠⲆΔ] = {
    name: "Winter peasant",
    ⵠⵠ: Xr.ⲆᐃⲆᐃΔⲆⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Da
  };
  es[_r.ΔΔᐃⲆΔ] = {
    name: "Winter hood",
    ⵠⵠ: Xr.ΔⲆⵠⵠᐃΔᐃ,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: Da
  };
  const fg = qn;
  es[_r.ΔΔᐃΔΔ] = {
    name: "Bucket full",
    ⵠⵠ: Xr.ᐃⵠΔⵠⲆΔⵠ,
    ⵠⲆᐃⲆ: Eh,
    ⲆΔⲆⲆ: zl
  };
  es[_r.ⲆΔⵠΔᐃ] = {
    name: "Bucket empty",
    ⵠⵠ: Xr.ⲆᐃᐃⵠⵠΔᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const zg = Ni;
  const yg = Oq;
  es[_r.ⲆⵠⲆⵠⵠ] = {
    name: "Well",
    ⵠⵠ: Xr.ᐃᐃⵠⵠⲆⵠΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Ol
  };
  const wg = Yr;
  es[_r.ⵠΔᐃᐃᐃ] = {
    name: "Sign",
    ⵠⵠ: Xr.ⵠⲆΔⵠⵠΔⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Pg = ps;
  const Ag = Lo;
  const kg = Rh;
  es[_r.ᐃⵠᐃᐃⵠ] = {
    name: "Pumpkin Seed",
    ⵠⵠ: Xr.ⲆᐃⲆⲆΔᐃΔ,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⲆⲆΔⲆⵠ] = {
    name: "Garlic Seed",
    ⵠⵠ: Xr.ⲆΔⲆⲆⲆⵠⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ᐃⲆⲆᐃΔ] = {
    name: "Thorbushes Seed",
    ⵠⵠ: Xr.ΔⲆΔᐃΔⲆⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⲆᐃⵠΔΔ] = {
    name: "Roof",
    ⵠⵠ: Xr.ΔᐃΔᐃᐃⲆΔ,
    ⵠⲆᐃⲆ: Xn,
    ⲆΔⲆⲆ: 1
  };
  const xg = d;
  es[_r.ⲆⲆΔΔⵠ] = {
    name: "Crab Crown",
    ⵠⵠ: Xr.ⲆᐃᐃᐃΔΔⲆ,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: 1
  };
  const Jg = Jo;
  const Mg = hn;
  const Bg = mj;
  es[_r.ⲆⵠΔᐃᐃ] = {
    name: "Carrot Seed",
    ⵠⵠ: Xr.ᐃᐃᐃΔᐃⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ᐃⵠΔΔΔ] = {
    name: "Tomato Seed",
    ⵠⵠ: Xr.ᐃΔΔⲆⵠᐃⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ⲆΔⲆⵠΔ] = {
    name: "Watermelon Seed",
    ⵠⵠ: Xr.ⲆⲆΔⵠⲆΔⵠ,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 0
  };
  const Dg = el;
  es[_r.ΔⵠⵠΔⲆ] = {
    name: "Aloe Vera Seed",
    ⵠⵠ: Xr.ⲆΔⲆⵠᐃΔΔ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 0
  };
  const Ig = As;
  const Eg = Oj;
  const Sg = Xh;
  es[_r.ⵠᐃΔΔᐃ] = {
    name: "Cap",
    ⵠⵠ: Xr.ⵠⵠᐃΔⵠᐃΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Qg = el;
  es[_r.ⵠⵠΔᐃᐃ] = {
    name: "Turban",
    ⵠⵠ: Xr.ⵠΔᐃᐃⵠΔⵠ,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ΔᐃᐃᐃΔ] = {
    name: "Pilot Helmet",
    ⵠⵠ: Xr.ΔᐃⵠᐃᐃⲆᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ΔⲆΔΔⲆ] = {
    name: "Emerald Machine",
    ⵠⵠ: Xr.ⵠⲆΔⲆⲆΔⵠ,
    ⵠⲆᐃⲆ: Lr,
    ⲆΔⲆⲆ: 0
  };
  const _g = Fh;
  es[_r.ⲆᐃΔⲆⵠ] = {
    name: "Emerald Machine",
    ⵠⵠ: Xr.ⵠᐃΔⲆΔⲆⵠ,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: js
  };
  const Fg = Sh;
  es[_r.ⲆΔᐃⵠⲆ] = {
    name: "Emerald Machine",
    ⵠⵠ: Xr.ᐃⵠⲆⵠⲆᐃΔ,
    ⵠⲆᐃⲆ: ya,
    ⲆΔⲆⲆ: ie
  };
  const Rg = Zl;
  const Gg = V;
  es[_r.ΔⵠᐃⲆⵠ] = {
    name: "Emerald Machine",
    ⵠⵠ: Xr.ᐃᐃΔⵠΔⵠᐃ,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ΔⲆⵠⵠⵠ] = {
    name: "Emerald Machine",
    ⵠⵠ: Xr.ⵠΔⲆΔⲆⲆᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const jg = Jj;
  es[_r.ⲆⲆⵠⵠΔ] = {
    name: "Emerald Machine",
    ⵠⵠ: Xr.ᐃⵠⲆⲆΔⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  const Lg = nl;
  es[_r.ⲆⵠⲆᐃΔ] = {
    name: "Pitchfork",
    ⵠⵠ: Xr.ⲆᐃⵠΔΔΔⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Ol
  };
  const Wg = ea;
  const Og = ul;
  es[_r.ᐃⲆΔᐃⲆ] = {
    name: "Wood Door Spike",
    ⵠⵠ: Xr.ⵠᐃΔᐃᐃᐃⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: fl
  };
  es[_r.ΔⵠⵠΔΔ] = {
    name: "Stone Door Spike",
    ⵠⵠ: Xr.ᐃⵠᐃⲆⲆⵠⲆ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: 1
  };
  const Ng = rk;
  const qg = Vn;
  es[_r.ΔΔⲆᐃⲆ] = {
    name: "Gold Door Spike",
    ⵠⵠ: Xr.ⲆᐃΔⲆᐃᐃΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  es[_r.ΔⵠΔⲆΔ] = {
    name: "Diamond Door Spike",
    ⵠⵠ: Xr.ⵠⲆᐃⵠⲆᐃᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⵠΔⲆⵠᐃ] = {
    name: "Amethyst Door Spike",
    ⵠⵠ: Xr.ΔΔⲆᐃᐃᐃᐃ,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: 1
  };
  es[_r.Δⵠⵠⵠᐃ] = {
    name: "Diamond Fire Protection ",
    ⵠⵠ: Xr.ᐃⵠΔⵠⵠⵠᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ᐃΔᐃⲆⲆ] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: Xr.ⲆᐃΔⲆⵠΔⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Xn
  };
  es[_r.ⲆΔᐃΔᐃ] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: Xr.ⲆⲆᐃΔⲆᐃᐃ,
    ⵠⲆᐃⲆ: Rq,
    ⲆΔⲆⲆ: fl
  };
  const Hg = ke;
  es[_r.ⵠⵠΔΔⵠ] = {
    name: "Reidite Sword",
    ⵠⵠ: Xr.ᐃᐃᐃᐃⵠⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Xn
  };
  const Ug = ie;
  es[_r.ᐃΔⲆⵠΔ] = {
    name: "Reidite Spear",
    ⵠⵠ: Xr.ⵠΔΔΔΔⲆⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: mk
  };
  const Yg = ss;
  es[_r.ⲆᐃⵠΔᐃ] = {
    name: "Reidite Helmet",
    ⵠⵠ: Xr.ⵠΔⲆⲆⲆⲆᐃ,
    ⵠⲆᐃⲆ: Eh,
    ⲆΔⲆⲆ: Te
  };
  es[_r.ᐃΔΔⵠᐃ] = {
    name: "Reidite Door Spike",
    ⵠⵠ: Xr.ⲆᐃΔⵠᐃᐃⲆ,
    ⵠⲆᐃⲆ: Hi,
    ⲆΔⲆⲆ: hs
  };
  const Kg = J;
  es[_r.Ⲇᐃⵠⵠⵠ] = {
    name: "Reidite Door",
    ⵠⵠ: Xr.ⵠᐃⲆⵠⵠⲆⵠ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⵠⲆᐃᐃⲆ] = {
    name: "Reidite Spike",
    ⵠⵠ: Xr.ⲆΔⵠⲆⲆⵠⲆ,
    ⵠⲆᐃⲆ: In,
    ⲆΔⲆⲆ: js
  };
  const Vg = p;
  const Zg = Yl;
  es[_r.ᐃⵠⵠⲆᐃ] = {
    name: "Reidite Wall",
    ⵠⵠ: Xr.ΔⲆⲆⲆⲆΔΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Oq
  };
  const Xg = kq;
  const $g = Xa;
  es[_r.ⲆⵠΔⵠΔ] = {
    name: "Reidite pick",
    ⵠⵠ: Xr.ᐃⲆᐃⵠᐃΔΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  const Ms = da;
  const Ns = lg;
  es[_r.ⵠⵠⲆΔⲆ] = {
    name: "Boat",
    ⵠⵠ: Xr.ΔⲆΔⲆⵠⵠᐃ,
    ⵠⲆᐃⲆ: Bg,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⵠᐃᐃⲆᐃ] = {
    name: "Sled",
    ⵠⵠ: Xr.ⵠⲆⲆᐃⵠΔᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ᐃⵠⲆⵠⲆ] = {
    name: "Saddle",
    ⵠⵠ: Xr.ⵠΔΔⲆΔᐃΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 1
  };
  es[_r.ⵠⲆᐃⲆΔ] = {
    name: "Mount Boar",
    ⵠⵠ: Xr.ΔΔⵠᐃⲆΔΔ,
    ⵠⲆᐃⲆ: wj,
    ⲆΔⲆⲆ: 0
  };
  const Os = pn;
  const Ps = Fr;
  const Qs = so;
  es[_r.ᐃⵠⵠᐃⵠ] = {
    name: "Mount King Crab",
    ⵠⵠ: Xr.ⲆⵠᐃᐃⲆΔᐃ,
    ⵠⲆᐃⲆ: mj,
    ⲆΔⲆⲆ: ya
  };
  es[_r.ⲆⵠΔᐃⵠ] = {
    name: "Mount Baby Dragon",
    ⵠⵠ: Xr.ⲆⵠⵠΔᐃⵠᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: Bg
  };
  const Rs = Rq;
  es[_r.ⲆⲆΔⵠⲆ] = {
    name: "Mount Baby Lava",
    ⵠⵠ: Xr.ⵠᐃᐃⲆᐃⲆⵠ,
    ⵠⲆᐃⲆ: tg,
    ⲆΔⲆⲆ: 0
  };
  const Ss = qq;
  const Ts = zi;
  es[_r.ⵠᐃⲆⲆΔ] = {
    name: "Mount Hawk",
    ⵠⵠ: Xr.ΔᐃⲆᐃⲆⵠΔ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ΔⵠΔΔⵠ] = {
    name: "Plane",
    ⵠⵠ: Xr.ᐃΔⵠᐃᐃΔᐃ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  const Us = bg;
  const Vs = V;
  es[_r.ᐃΔΔᐃΔ] = {
    name: "Pitchfork 2",
    ⵠⵠ: Xr.ᐃⲆⲆⵠⲆᐃⲆ,
    ⵠⲆᐃⲆ: 0,
    ⲆΔⲆⲆ: 0
  };
  es[_r.ΔΔⵠⲆⲆ] = {
    name: "Baby Mammoth",
    ⵠⵠ: Xr.ⵠⲆⲆⵠⵠⵠᐃ,
    ⵠⲆᐃⲆ: Pg,
    ⲆΔⲆⲆ: Hi
  };
  var Ws = undefined;
  var Xs = [{
    r: [[_r.ⵠᐃⵠⵠ, 25], [_r.ᐃΔⵠⲆ, 5]],
    w: 0,
    f: 0,
    ⵠᐃⵠ: Eh,
    e: 0,
    id: $r.ΔᐃᐃⲆⲆ,
    Δⵠⵠⵠ: _r.ΔᐃᐃⲆⲆ,
    time: 1 / Xg,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ΔᐃᐃⲆⲆ, 1], [_r.ⵠᐃⵠⵠ, 35], [_r.ᐃΔⵠⲆ, kk]],
    w: 0,
    f: Zj,
    ⵠᐃⵠ: 0,
    e: In,
    id: $r.ᐃΔΔⵠΔ,
    Δⵠⵠⵠ: _r.ᐃΔΔⵠΔ,
    time: 1 / Uh,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 150], [_r.ᐃΔⵠⲆ, 50], [_r.ᐃⲆⵠᐃ, 15]],
    w: Ol,
    f: Bg,
    ⵠᐃⵠ: zl,
    e: 0,
    id: $r.ⲆᐃΔᐃⵠ,
    Δⵠⵠⵠ: _r.ⲆᐃΔᐃⵠ,
    time: Ug / 20,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 20], [_r.ᐃΔⵠⲆ, Zk]],
    w: In,
    f: Hi,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⵠⲆΔⵠᐃ,
    Δⵠⵠⵠ: _r.ⵠⲆΔⵠᐃ,
    time: 0.16666666666666666,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, Ra]],
    w: wj,
    f: ya,
    ⵠᐃⵠ: 0,
    e: In,
    id: $r.ⲆΔⲆⲆⵠ,
    Δⵠⵠⵠ: _r.ⲆΔⲆⲆⵠ,
    time: 1 / yr,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⲆΔⲆⲆⵠ, js], [_r.ⵠᐃⵠⵠ, 50], [_r.ᐃΔⵠⲆ, _h]],
    w: 1,
    f: zl,
    ⵠᐃⵠ: In,
    e: In,
    id: $r.ⲆⵠⵠⲆⲆ,
    Δⵠⵠⵠ: _r.ⲆⵠⵠⲆⲆ,
    time: jh / Vr,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 40], [_r.ᐃⲆⵠᐃ, 20], [_r.ᐃΔⵠⲆ, 30], [_r.ⲆⵠⵠⲆⲆ, yg]],
    w: mk,
    f: Kh,
    ⵠᐃⵠ: In,
    e: 0,
    id: $r.ⵠᐃⲆΔΔ,
    Δⵠⵠⵠ: _r.ⵠᐃⲆΔΔ,
    time: hs / F,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ᐃⲆΔⵠ, 20], [_r.ᐃⲆⵠᐃ, 50], [_r.ᐃΔⵠⲆ, 80], [_r.ⵠᐃⲆΔΔ, Ug]],
    w: Ug,
    f: 0,
    ⵠᐃⵠ: 0,
    e: ya,
    id: $r.ᐃⲆⵠΔⲆ,
    Δⵠⵠⵠ: _r.ᐃⲆⵠΔⲆ,
    time: Oq / Cs,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ᐃⲆΔⵠ, 40], [_r.ᐃⲆⵠᐃ, 60], [_r.Ⲇⵠⵠⵠ, 30], [_r.ᐃⲆⵠΔⲆ, za]],
    w: hs,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ΔⲆⲆⵠⲆ,
    Δⵠⵠⵠ: _r.ΔⲆⲆⵠⲆ,
    time: 0.016666666666666666,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.Ⲇⵠⵠⵠ, 30], [_r.ᐃⲆΔⵠ, 40], [_r.ᐃⵠᐃΔ, 30], [_r.ΔⲆⲆⵠⲆ, jh]],
    w: Ug,
    f: Rq,
    ⵠᐃⵠ: Zj,
    e: 0,
    id: $r.ⲆⵠΔⵠΔ,
    Δⵠⵠⵠ: _r.ⲆⵠΔⵠΔ,
    time: 0.011111111111111112,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 90], [_r.ᐃΔⵠⲆ, 50]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆᐃΔⲆΔ,
    Δⵠⵠⵠ: _r.ⲆᐃΔⲆΔ,
    time: 0.1,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 160], [_r.ᐃΔⵠⲆ, 120], [_r.ᐃⲆⵠᐃ, 80], [_r.ⲆᐃΔⲆΔ, 1]],
    w: 1,
    f: ya,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆⲆⵠⲆⲆ,
    Δⵠⵠⵠ: _r.ⲆⲆⵠⲆⲆ,
    time: za / 15,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ᐃⲆΔⵠ, 80], [_r.ᐃΔⵠⲆ, 200], [_r.ᐃⲆⵠᐃ, 150], [_r.ⲆⲆⵠⲆⲆ, ie]],
    w: 1,
    f: In,
    ⵠᐃⵠ: Da,
    e: Pg,
    id: $r.ⵠΔΔΔⵠ,
    Δⵠⵠⵠ: _r.ⵠΔΔΔⵠ,
    time: 1 / qi,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ᐃⲆΔⵠ, 160], [_r.Ⲇⵠⵠⵠ, 60], [_r.ᐃⲆⵠᐃ, 250], [_r.ⵠΔΔΔⵠ, jh]],
    w: 1,
    f: In,
    ⵠᐃⵠ: 0,
    e: Zj,
    id: $r.ᐃⵠⵠⵠᐃ,
    Δⵠⵠⵠ: _r.ᐃⵠⵠⵠᐃ,
    time: Ol / 60,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.Ⲇⵠⵠⵠ, 160], [_r.ᐃⵠᐃΔ, 60], [_r.ᐃⲆΔⵠ, 250], [_r.ᐃⵠⵠⵠᐃ, 1]],
    w: Te,
    f: 0,
    ⵠᐃⵠ: In,
    e: 0,
    id: $r.ᐃⵠⲆⵠΔ,
    Δⵠⵠⵠ: _r.ᐃⵠⲆⵠΔ,
    time: Oq / 90,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ᐃⵠⲆⵠΔ, 1], [_r.ΔᐃᐃⵠΔ, 1], [_r.ΔᐃΔⲆᐃ, fl], [_r.ⵠᐃΔⲆⵠ, yl], [_r.Ⲇⵠⵠⵠ, 20]],
    w: 1,
    f: rg,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⵠⵠᐃᐃⲆ,
    Δⵠⵠⵠ: _r.ⵠⵠᐃᐃⲆ,
    time: za / 120,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 30], [_r.ᐃΔⵠⲆ, 15]],
    w: 1,
    f: Rq,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃΔΔΔΔ,
    Δⵠⵠⵠ: _r.ᐃΔΔΔΔ,
    time: Oq / 5,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ᐃΔΔΔΔ, za], [_r.ᐃⲆⵠᐃ, Il], [_r.ᐃΔⵠⲆ, 30], [_r.ⵠᐃⵠⵠ, 40]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Rs,
    e: 0,
    id: $r.ⲆΔΔⵠⵠ,
    Δⵠⵠⵠ: _r.ⲆΔΔⵠⵠ,
    time: 1 / gn,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⲆΔΔⵠⵠ, 1], [_r.ᐃⲆΔⵠ, 20], [_r.ᐃⲆⵠᐃ, 50], [_r.ᐃΔⵠⲆ, 80]],
    w: rg,
    f: ya,
    ⵠᐃⵠ: 0,
    e: Rq,
    id: $r.ⵠᐃⵠᐃΔ,
    Δⵠⵠⵠ: _r.ⵠᐃⵠᐃΔ,
    time: 1 / pl,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⵠᐃⵠᐃΔ, 1], [_r.ᐃⲆⵠᐃ, 60], [_r.Ⲇⵠⵠⵠ, 30], [_r.ᐃⲆΔⵠ, 40]],
    w: 1,
    f: Lr,
    ⵠᐃⵠ: 0,
    e: Rq,
    id: $r.ⵠᐃⲆⲆⵠ,
    Δⵠⵠⵠ: _r.ⵠᐃⲆⲆⵠ,
    time: ie / 40,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 50]],
    w: 1,
    f: ps,
    ⵠᐃⵠ: Hi,
    e: 0,
    id: $r.ⲆΔᐃΔⲆ,
    Δⵠⵠⵠ: _r.ⲆΔᐃΔⲆ,
    time: 1 / q,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⲆΔᐃΔⲆ, js]],
    w: Pg,
    f: Rq,
    ⵠᐃⵠ: Ol,
    e: tg,
    id: $r.ᐃᐃΔⵠΔ,
    Δⵠⵠⵠ: _r.ᐃᐃΔⵠΔ,
    time: 0.2,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 100], [_r.ᐃΔⵠⲆ, 50]],
    w: 1,
    f: In,
    ⵠᐃⵠ: 0,
    e: tg,
    id: $r.ⲆⵠⲆᐃΔ,
    Δⵠⵠⵠ: _r.ⲆⵠⲆᐃΔ,
    time: Te / 10,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⲆⵠⲆᐃΔ, 1], [_r.ΔᐃΔΔⲆⲆⵠ, yg]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃΔΔᐃΔ,
    Δⵠⵠⵠ: _r.ᐃΔΔᐃΔ,
    time: 0.016666666666666666,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⵠΔΔΔⲆ, 4], [_r.ᐃΔⵠᐃⲆ, ba], [_r.ⲆⵠⵠΔᐃ, ks]],
    w: Oq,
    f: zl,
    ⵠᐃⵠ: Pg,
    e: Da,
    id: $r.ᐃⵠΔΔⲆ,
    Δⵠⵠⵠ: _r.ᐃⵠΔΔⲆ,
    time: Xn / 15,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 40]],
    w: Zj,
    f: Rq,
    ⵠᐃⵠ: 0,
    e: wj,
    id: $r.ᐃᐃΔⲆⲆ,
    Δⵠⵠⵠ: _r.ᐃᐃΔⲆⲆ,
    time: 1 / Qr,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃᐃΔⲆⲆ, rg], [_r.ⵠᐃⵠⵠ, 60], [_r.ᐃΔⵠⲆ, kk]],
    w: Oq,
    f: 0,
    ⵠᐃⵠ: ya,
    e: mj,
    id: $r.ⵠΔᐃⵠᐃ,
    Δⵠⵠⵠ: _r.ⵠΔᐃⵠᐃ,
    time: Ug / sk,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 80], [_r.ᐃⲆⵠᐃ, 30], [_r.ᐃΔⵠⲆ, 30], [_r.ⵠΔᐃⵠᐃ, 1]],
    w: 1,
    f: Hi,
    ⵠᐃⵠ: 0,
    e: Zj,
    id: $r.ⵠᐃᐃⵠΔ,
    Δⵠⵠⵠ: _r.ⵠᐃᐃⵠΔ,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ,
    time: 1 / Hh
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 200], [_r.ᐃⲆΔⵠ, 40], [_r.ᐃⲆⵠᐃ, 60], [_r.ⵠᐃᐃⵠΔ, yg]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃᐃᐃᐃⲆ,
    Δⵠⵠⵠ: _r.ᐃᐃᐃᐃⲆ,
    time: 0.03333333333333333,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.Ⲇⵠⵠⵠ, 40], [_r.ᐃⲆΔⵠ, 80], [_r.ᐃⲆⵠᐃ, 90], [_r.ᐃᐃᐃᐃⲆ, ie]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Hi,
    id: $r.ᐃΔⵠⲆᐃ,
    Δⵠⵠⵠ: _r.ᐃΔⵠⲆᐃ,
    time: 0.016666666666666666,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⵠᐃΔ, 40], [_r.Ⲇⵠⵠⵠ, 80], [_r.ᐃⲆΔⵠ, 90], [_r.ᐃΔⵠⲆᐃ, 1]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Bg,
    e: 0,
    id: $r.ᐃΔⲆⵠΔ,
    Δⵠⵠⵠ: _r.ᐃΔⲆⵠΔ,
    time: za / 90,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⲆⲆⲆᐃⵠ, xs], [_r.ᐃⲆΔᐃᐃ, 1], [_r.Ⲇⵠⵠⵠ, 100], [_r.ⵠⵠⲆⵠⲆ, nq]],
    w: fl,
    f: ie,
    ⵠᐃⵠ: yg,
    e: Pg,
    id: $r.ⲆⲆΔᐃᐃ,
    Δⵠⵠⵠ: _r.ⲆⲆΔᐃᐃ,
    time: 0.008333333333333333,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⲆⲆΔᐃᐃ, mk], [_r.ΔⲆᐃᐃⲆ, fl], [_r.ᐃⵠᐃΔ, 100], [_r.ᐃⲆᐃⵠΔ, H]],
    w: Ug,
    f: Oq,
    ⵠᐃⵠ: 1,
    e: Eh,
    id: $r.ΔⲆᐃΔⵠ,
    Δⵠⵠⵠ: _r.ΔⲆᐃΔⵠ,
    time: Xn / 200,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃᐃΔⲆⲆ, ie], [_r.ⵠⲆⵠᐃᐃ, 5], [_r.ᐃΔⵠᐃⲆ, fh]],
    w: jh,
    f: 0,
    ⵠᐃⵠ: Eh,
    e: tg,
    id: $r.Ⲇᐃᐃᐃᐃ,
    Δⵠⵠⵠ: _r.Ⲇᐃᐃᐃᐃ,
    time: ie / 30,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 30]],
    w: zl,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Rs,
    id: $r.ΔⵠᐃΔᐃ,
    Δⵠⵠⵠ: _r.ΔⵠᐃΔᐃ,
    time: 0.2,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 50], [_r.ᐃΔⵠⲆ, 25], [_r.ΔⵠᐃΔᐃ, 1]],
    w: rg,
    f: 0,
    ⵠᐃⵠ: 0,
    e: mj,
    id: $r.ᐃᐃⲆΔⲆ,
    Δⵠⵠⵠ: _r.ᐃᐃⲆΔⲆ,
    time: rg / 10,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 60], [_r.ᐃⲆⵠᐃ, 40], [_r.ᐃΔⵠⲆ, 50], [_r.ᐃᐃⲆΔⲆ, 1]],
    w: yg,
    f: Eh,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⵠΔΔΔΔ,
    Δⵠⵠⵠ: _r.ⵠΔΔΔΔ,
    time: Oq / 20,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⲆΔⵠ, 40], [_r.ᐃⲆⵠᐃ, 60], [_r.ᐃΔⵠⲆ, 80], [_r.ⵠΔΔΔΔ, 1]],
    w: yg,
    f: Lr,
    ⵠᐃⵠ: Bg,
    e: wj,
    id: $r.ᐃΔⲆᐃΔ,
    Δⵠⵠⵠ: _r.ᐃΔⲆᐃΔ,
    time: 0.03333333333333333,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⲆΔⵠ, 60], [_r.ᐃⲆⵠᐃ, 100], [_r.Ⲇⵠⵠⵠ, 40], [_r.ᐃΔⲆᐃΔ, hs]],
    w: rg,
    f: Kh,
    ⵠᐃⵠ: Kh,
    e: Hi,
    id: $r.ΔⲆᐃⵠΔ,
    Δⵠⵠⵠ: _r.ΔⲆᐃⵠΔ,
    time: 0.016666666666666666,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⲆΔⵠ, 100], [_r.Ⲇⵠⵠⵠ, 80], [_r.ᐃⵠᐃΔ, 40], [_r.ΔⲆᐃⵠΔ, rg]],
    w: za,
    f: Zj,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⵠⵠΔΔⵠ,
    Δⵠⵠⵠ: _r.ⵠⵠΔΔⵠ,
    time: mk / 90,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⵠᐃⲆⲆⲆ, 3]],
    w: 0,
    f: Xn,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⵠᐃΔⲆᐃ,
    Δⵠⵠⵠ: _r.ⵠᐃΔⲆᐃ,
    time: 1 / Xg,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ⲆΔΔᐃⵠ, qo]],
    w: Lr,
    f: mk,
    ⵠᐃⵠ: Hi,
    e: 0,
    id: $r.ⲆΔᐃΔΔ,
    Δⵠⵠⵠ: _r.ⲆΔᐃΔΔ,
    time: 0.2,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ⵠᐃⵠΔⵠ, _a]],
    w: In,
    f: 1,
    ⵠᐃⵠ: 0,
    e: Lr,
    id: $r.ᐃⵠᐃᐃⵠ,
    Δⵠⵠⵠ: _r.ᐃⵠᐃᐃⵠ,
    time: Ug / 5,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ⲆᐃΔᐃΔ, wh]],
    w: 0,
    f: 1,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆⲆΔⲆⵠ,
    Δⵠⵠⵠ: _r.ⲆⲆΔⲆⵠ,
    time: 0.2,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ᐃⲆᐃᐃΔ, 8]],
    w: Pg,
    f: 1,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃⲆⲆᐃΔ,
    Δⵠⵠⵠ: _r.ᐃⲆⲆᐃΔ,
    time: 0.2,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ⲆᐃΔⵠᐃ, 8]],
    w: Da,
    f: Ol,
    ⵠᐃⵠ: Eh,
    e: zl,
    id: $r.ⲆⵠΔᐃᐃ,
    Δⵠⵠⵠ: _r.ⲆⵠΔᐃᐃ,
    time: Oq / Eg,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ⲆᐃΔΔⵠ, zj]],
    w: tg,
    f: js,
    ⵠᐃⵠ: tg,
    e: 0,
    id: $r.ᐃⵠΔΔΔ,
    Δⵠⵠⵠ: _r.ᐃⵠΔΔΔ,
    time: jh / kq,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ⲆᐃⵠΔⲆ, Fo]],
    w: Rq,
    f: 1,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆΔⲆⵠΔ,
    Δⵠⵠⵠ: _r.ⲆΔⲆⵠΔ,
    time: 1 / Eg,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ⵠΔᐃⵠⲆ, 16]],
    w: 0,
    f: rg,
    ⵠᐃⵠ: 0,
    e: Rs,
    id: $r.ΔⵠⵠΔⲆ,
    Δⵠⵠⵠ: _r.ΔⵠⵠΔⲆ,
    time: yg / ta,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ⵠⵠᐃᐃⵠ, Ol]],
    w: 0,
    f: 1,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ΔΔⵠⵠⲆ,
    Δⵠⵠⵠ: _r.ΔΔⵠⵠⲆ,
    time: yg / ta,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ΔΔᐃⵠⲆ, za]],
    w: Rq,
    f: ie,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⵠⲆΔⲆᐃ,
    Δⵠⵠⵠ: _r.ⵠⲆΔⲆᐃ,
    time: za / 3,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ᐃⵠᐃⵠᐃ, 3]],
    w: Hi,
    f: 1,
    ⵠᐃⵠ: Bg,
    e: 0,
    id: $r.ⲆⵠΔⲆΔ,
    Δⵠⵠⵠ: _r.ⲆⵠΔⲆΔ,
    time: jh / 3,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ᐃⵠᐃⵠᐃ, yr], [_r.ⵠᐃⲆⲆⲆ, mk]],
    w: 0,
    f: hs,
    ⵠᐃⵠ: Da,
    e: ya,
    id: $r.ⲆᐃᐃⵠΔ,
    Δⵠⵠⵠ: _r.ⲆᐃᐃⵠΔ,
    time: 0.3333333333333333,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ᐃⵠᐃⵠᐃ, ll], [_r.ⵠᐃⲆⲆⲆ, 2], [_r.ᐃΔΔΔⲆ, Zh]],
    w: 0,
    f: fl,
    ⵠᐃⵠ: ya,
    e: Rs,
    id: $r.ⵠᐃⲆⲆᐃ,
    Δⵠⵠⵠ: _r.ⵠᐃⲆⲆᐃ,
    time: js / Gs,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ᐃΔⵠᐃⲆ, 2]],
    w: Oq,
    f: ya,
    ⵠᐃⵠ: 0,
    e: Hi,
    id: $r.ᐃΔᐃⲆᐃ,
    Δⵠⵠⵠ: _r.ᐃΔᐃⲆᐃ,
    time: 1 / ta,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 20]],
    w: mk,
    f: 0,
    ⵠᐃⵠ: wj,
    e: ya,
    id: $r.ⲆⲆⲆⲆⵠ,
    Δⵠⵠⵠ: _r.ⲆⲆⲆⲆⵠ,
    time: jh / Gs,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ⲆⲆⲆⲆⵠ, 1], [_r.ᐃΔⵠⲆ, Ej]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: tg,
    e: 0,
    id: $r.ΔᐃⵠⲆⲆ,
    Δⵠⵠⵠ: _r.ΔᐃⵠⲆⲆ,
    time: 1 / Gs,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ΔᐃⵠⲆⲆ, ie], [_r.ᐃⲆⵠᐃ, 14]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: In,
    e: Lr,
    id: $r.ᐃᐃᐃᐃᐃ,
    Δⵠⵠⵠ: _r.ᐃᐃᐃᐃᐃ,
    time: 0.2,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ᐃᐃᐃᐃᐃ, jh], [_r.ᐃⲆΔⵠ, 11]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⵠᐃⲆᐃⵠ,
    Δⵠⵠⵠ: _r.ⵠᐃⲆᐃⵠ,
    time: Ug / 5,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ⵠᐃⲆᐃⵠ, 1], [_r.Ⲇⵠⵠⵠ, 8]],
    w: 1,
    f: Bg,
    ⵠᐃⵠ: 0,
    e: Kh,
    id: $r.ᐃΔⵠⵠΔ,
    Δⵠⵠⵠ: _r.ᐃΔⵠⵠΔ,
    time: Ol / kq,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ᐃΔⵠⵠΔ, 1], [_r.ᐃⵠᐃΔ, Xg]],
    w: 1,
    f: Kh,
    ⵠᐃⵠ: tg,
    e: 0,
    id: $r.ᐃⵠⵠⲆᐃ,
    Δⵠⵠⵠ: _r.ᐃⵠⵠⲆᐃ,
    time: ie / Gs,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 30]],
    w: Ug,
    f: 0,
    ⵠᐃⵠ: Hi,
    e: 0,
    id: $r.ΔⵠⵠⲆᐃ,
    Δⵠⵠⵠ: _r.ΔⵠⵠⲆᐃ,
    time: 1 / Iq,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ΔⵠⵠⲆᐃ, 1], [_r.ᐃΔⵠⲆ, 27]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: wj,
    e: Lr,
    id: $r.ⵠΔᐃⲆΔ,
    Δⵠⵠⵠ: _r.ⵠΔᐃⲆΔ,
    time: 1 / As,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ⵠΔᐃⲆΔ, fl], [_r.ᐃⲆⵠᐃ, 24]],
    w: Ug,
    f: Pg,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃΔⵠⵠⵠ,
    Δⵠⵠⵠ: _r.ᐃΔⵠⵠⵠ,
    time: 1 / He,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ᐃΔⵠⵠⵠ, 1], [_r.ᐃⲆΔⵠ, 21]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: zl,
    e: 0,
    id: $r.ⵠΔᐃΔΔ,
    Δⵠⵠⵠ: _r.ⵠΔᐃΔΔ,
    time: rg / 8,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ⵠΔᐃΔΔ, za], [_r.Ⲇⵠⵠⵠ, Pj]],
    w: Xn,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.Δⵠᐃⵠᐃ,
    Δⵠⵠⵠ: _r.Δⵠᐃⵠᐃ,
    time: js / 8,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.Δⵠᐃⵠᐃ, 1], [_r.ᐃⵠᐃΔ, 15]],
    w: Ug,
    f: Bg,
    ⵠᐃⵠ: zl,
    e: 0,
    id: $r.Ⲇᐃⵠⵠⵠ,
    Δⵠⵠⵠ: _r.Ⲇᐃⵠⵠⵠ,
    time: 1 / E,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ⲆⲆⲆⲆⵠ, 1], [_r.ⵠᐃⵠⵠ, 40], [_r.ᐃΔⵠⲆ, 30]],
    w: 1,
    f: Rs,
    ⵠᐃⵠ: 0,
    e: tg,
    id: $r.ⵠⵠΔⵠⲆ,
    Δⵠⵠⵠ: _r.ⵠⵠΔⵠⲆ,
    time: 1 / Ok,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ΔᐃⵠⲆⲆ, yg], [_r.ᐃΔⵠⲆ, 70]],
    w: 1,
    f: Bg,
    ⵠᐃⵠ: 0,
    e: Kh,
    id: $r.ⲆᐃⲆΔΔ,
    Δⵠⵠⵠ: _r.ⲆᐃⲆΔΔ,
    time: 1 / mh,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ᐃᐃᐃᐃᐃ, Te], [_r.ᐃⲆⵠᐃ, 40], [_r.ᐃΔⵠⲆ, 30]],
    w: 1,
    f: Rs,
    ⵠᐃⵠ: ps,
    e: 0,
    id: $r.Ⲇᐃⵠᐃⵠ,
    Δⵠⵠⵠ: _r.Ⲇᐃⵠᐃⵠ,
    time: Te / 20,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ⵠᐃⲆᐃⵠ, yg], [_r.ᐃⲆΔⵠ, 40], [_r.ᐃΔⵠⲆ, 30]],
    w: js,
    f: 0,
    ⵠᐃⵠ: Lr,
    e: 0,
    id: $r.ⲆⵠᐃΔΔ,
    Δⵠⵠⵠ: _r.ⲆⵠᐃΔΔ,
    time: fl / 20,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ᐃΔⵠⵠΔ, 1], [_r.Ⲇⵠⵠⵠ, 40], [_r.ᐃΔⵠⲆ, 30]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃⲆⵠᐃᐃ,
    Δⵠⵠⵠ: _r.ᐃⲆⵠᐃᐃ,
    time: 0.05,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ᐃⵠⵠⲆᐃ, Xn], [_r.ᐃⵠᐃΔ, 40], [_r.ᐃⲆⵠᐃ, 30]],
    w: ie,
    f: 0,
    ⵠᐃⵠ: In,
    e: tg,
    id: $r.ⵠⲆᐃᐃⲆ,
    Δⵠⵠⵠ: _r.ⵠⲆᐃᐃⲆ,
    time: fl / 20,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ΔⵠⵠⲆᐃ, js], [_r.ⵠᐃⵠⵠ, 80], [_r.ᐃΔⵠⲆ, 60]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Rq,
    e: 0,
    id: $r.ᐃⲆΔᐃⲆ,
    Δⵠⵠⵠ: _r.ᐃⲆΔᐃⲆ,
    time: Ug / 20,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ⵠΔᐃⲆΔ, 1], [_r.ᐃΔⵠⲆ, 140]],
    w: jh,
    f: Kh,
    ⵠᐃⵠ: 0,
    e: In,
    id: $r.ΔⵠⵠΔΔ,
    Δⵠⵠⵠ: _r.ΔⵠⵠΔΔ,
    time: rg / 20,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ᐃΔⵠⵠⵠ, jh], [_r.ᐃⲆⵠᐃ, 80], [_r.ᐃΔⵠⲆ, 60]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ΔΔⲆᐃⲆ,
    Δⵠⵠⵠ: _r.ΔΔⲆᐃⲆ,
    time: fl / 20,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ⵠΔᐃΔΔ, 1], [_r.ᐃⲆΔⵠ, 80], [_r.ᐃΔⵠⲆ, 60]],
    w: Ug,
    f: ya,
    ⵠᐃⵠ: 0,
    e: Lr,
    id: $r.ΔⵠΔⲆΔ,
    Δⵠⵠⵠ: _r.ΔⵠΔⲆΔ,
    time: 1 / pl,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.Δⵠᐃⵠᐃ, fl], [_r.Ⲇⵠⵠⵠ, 80], [_r.ᐃΔⵠⲆ, 60]],
    w: 1,
    f: Da,
    ⵠᐃⵠ: Hi,
    e: Lr,
    id: $r.ⵠΔⲆⵠᐃ,
    Δⵠⵠⵠ: _r.ⵠΔⲆⵠᐃ,
    time: 1 / Il,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.Ⲇᐃⵠⵠⵠ, 1], [_r.ᐃⵠᐃΔ, 80], [_r.ᐃⲆⵠᐃ, 60]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: ps,
    e: 0,
    id: $r.ᐃΔΔⵠᐃ,
    Δⵠⵠⵠ: _r.ᐃΔΔⵠᐃ,
    time: mk / Cs,
    ⵠⵠⵠ: cs.Ⲇⵠⵠⵠᐃ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 25], [_r.ᐃⲆⵠᐃ, ih]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Bg,
    e: 0,
    id: $r.ᐃⲆⲆⲆⲆ,
    Δⵠⵠⵠ: _r.ᐃⲆⲆⲆⲆ,
    time: yg / kq,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠΔΔΔⲆ, ie], [_r.ⵠⵠΔⵠΔ, 1], [_r.ᐃΔⵠᐃⲆ, 2]],
    w: yg,
    f: Kh,
    ⵠᐃⵠ: Zj,
    e: Lr,
    id: $r.ⲆᐃᐃΔᐃ,
    Δⵠⵠⵠ: _r.ⲆᐃᐃΔᐃ,
    time: 1 / Eg,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⵠΔΔΔⲆ, ll], [_r.ᐃⲆⲆⲆᐃ, 20], [_r.ⲆⲆⲆᐃⵠ, 5], [_r.ⵠⵠΔⵠΔ, Qr]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⵠᐃᐃΔᐃ,
    Δⵠⵠⵠ: _r.ⵠᐃᐃΔᐃ,
    time: js / 30,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃⲆᐃⵠᐃΔⵠ, js], [_r.ⵠⵠΔⲆⵠ, 8], [_r.ΔⵠΔΔⲆ, yh], [_r.ᐃⲆⲆⲆᐃ, 8], [_r.ᐃΔⵠᐃⲆ, 6]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: Bg,
    e: Kh,
    id: $r.ΔᐃᐃᐃΔ,
    Δⵠⵠⵠ: _r.ΔᐃᐃᐃΔ,
    time: Xn / 60,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⵠⵠΔⵠΔ, mk], [_r.ᐃΔⵠᐃⲆ, 2]],
    w: Ol,
    f: Eh,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃⲆᐃⲆᐃ,
    Δⵠⵠⵠ: _r.ᐃⲆᐃⲆᐃ,
    time: 0.2,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃⲆᐃⲆᐃ, 1], [_r.ⲆⵠⵠΔᐃ, 5], [_r.ᐃΔⵠᐃⲆ, ol]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃⵠⵠⵠΔ,
    Δⵠⵠⵠ: _r.ᐃⵠⵠⵠΔ,
    time: mk / 12,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃⵠⵠⵠΔ, ie], [_r.ⲆΔΔᐃᐃ, M], [_r.ⲆⲆⲆᐃⵠ, 4]],
    w: jh,
    f: In,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃⲆⲆΔΔ,
    Δⵠⵠⵠ: _r.ᐃⲆⲆΔΔ,
    time: za / 30,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃⲆⲆΔΔ, 1], [_r.ⲆΔΔᐃᐃ, 5], [_r.ᐃⲆΔⲆⲆ, Ra], [_r.ⲆⲆⲆᐃⵠ, 4]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Pg,
    e: Da,
    id: $r.ⵠⲆⵠΔᐃ,
    Δⵠⵠⵠ: _r.ⵠⲆⵠΔᐃ,
    time: Xn / 50,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 50]],
    w: 0,
    f: ya,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃᐃⲆⵠⵠ,
    Δⵠⵠⵠ: _r.ᐃᐃⲆⵠⵠ,
    time: Te / 5,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃΔⵠⲆ, 75], [_r.ⵠᐃⵠⵠ, 75], [_r.ᐃᐃⲆⵠⵠ, 1]],
    w: ie,
    f: Rq,
    ⵠᐃⵠ: ya,
    e: 0,
    id: $r.Δᐃᐃⵠᐃ,
    Δⵠⵠⵠ: _r.Δᐃᐃⵠᐃ,
    time: js / gg,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃΔⵠⲆ, 90], [_r.ⵠᐃⵠⵠ, 90], [_r.ᐃⲆⵠᐃ, 90], [_r.Δᐃᐃⵠᐃ, Oq]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: ps,
    id: $r.ΔᐃΔⲆⲆ,
    Δⵠⵠⵠ: _r.ΔᐃΔⲆⲆ,
    time: 1 / Xa,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃΔⵠⲆ, Cn], [_r.ᐃⲆⵠᐃ, 100], [_r.ᐃⲆΔⵠ, _j], [_r.ΔᐃΔⲆⲆ, 1]],
    w: Oq,
    f: mj,
    ⵠᐃⵠ: 0,
    e: Lr,
    id: $r.ᐃⲆⲆⵠᐃ,
    Δⵠⵠⵠ: _r.ᐃⲆⲆⵠᐃ,
    time: 1 / 30,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.Ⲇⵠⵠⵠ, 80], [_r.ᐃⲆⵠᐃ, 150], [_r.ᐃⲆΔⵠ, 120], [_r.ᐃⲆⲆⵠᐃ, 1]],
    w: jh,
    f: 0,
    ⵠᐃⵠ: tg,
    e: 0,
    id: $r.ⵠⲆⲆⵠⵠ,
    Δⵠⵠⵠ: _r.ⵠⲆⲆⵠⵠ,
    time: jh / 60,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃⵠᐃΔ, 80], [_r.ᐃⲆΔⵠ, 150], [_r.Ⲇⵠⵠⵠ, 120], [_r.ⵠⲆⲆⵠⵠ, hs]],
    w: Xn,
    f: 1,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆᐃⵠΔᐃ,
    Δⵠⵠⵠ: _r.ⲆᐃⵠΔᐃ,
    time: fl / 90,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⵠᐃΔⲆⵠ, Zh], [_r.ᐃⲆΔⵠ, 40], [_r.ᐃΔⵠᐃⲆ, ks]],
    w: 1,
    f: zl,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃⲆⵠⲆⲆ,
    Δⵠⵠⵠ: _r.ᐃⲆⵠⲆⲆ,
    time: fl / mh,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃⲆⵠⲆⲆ, hs], [_r.ᐃⲆⵠᐃ, 80], [_r.ΔᐃΔⲆᐃ, 1], [_r.Ⲇⵠⵠⵠ, 20]],
    w: Ol,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃⵠⵠⲆΔ,
    Δⵠⵠⵠ: _r.ᐃⵠⵠⲆΔ,
    time: 0.011111111111111112,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⲆⵠⵠΔⲆ, 5], [_r.ᐃⲆΔⵠ, 50], [_r.ⲆⲆⲆᐃⵠ, 5]],
    w: 1,
    f: 1,
    ⵠᐃⵠ: In,
    e: Zj,
    id: $r.Δⵠⵠⵠᐃ,
    Δⵠⵠⵠ: _r.Δⵠⵠⵠᐃ,
    time: fl / 20,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.Δⵠⵠⵠᐃ, Xn], [_r.ⲆⵠⵠΔⲆ, 10], [_r.Ⲇⵠⵠⵠ, 50]],
    w: Ug,
    f: 1,
    ⵠᐃⵠ: wj,
    e: 0,
    id: $r.ᐃΔᐃⲆⲆ,
    Δⵠⵠⵠ: _r.ᐃΔᐃⲆⲆ,
    time: za / 60,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃΔᐃⲆⲆ, Oq], [_r.ⲆⵠⵠΔⲆ, bl], [_r.Ⲇⵠⵠⵠ, 50], [_r.ᐃⵠᐃΔ, 50]],
    w: 1,
    f: Te,
    ⵠᐃⵠ: Lr,
    e: 0,
    id: $r.ⲆΔᐃΔᐃ,
    Δⵠⵠⵠ: _r.ⲆΔᐃΔᐃ,
    time: 1 / 90,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃΔⵠᐃⲆ, Al], [_r.ⵠΔⵠⵠⲆ, 2]],
    w: Te,
    f: Hi,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⵠᐃΔΔᐃ,
    Δⵠⵠⵠ: _r.ⵠᐃΔΔᐃ,
    time: Te / sj,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⵠᐃΔΔᐃ, rg], [_r.ᐃΔⵠᐃⲆ, ji], [_r.ⵠΔⵠⵠⲆ, 4], [_r.ΔⵠΔΔⲆ, 12], [_r.ᐃⲆⲆⲆᐃ, ol]],
    w: 1,
    f: In,
    ⵠᐃⵠ: Pg,
    e: zl,
    id: $r.ⵠⵠΔᐃᐃ,
    Δⵠⵠⵠ: _r.ⵠⵠΔᐃᐃ,
    time: 0.006666666666666667,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃΔⵠᐃⲆ, ms], [_r.ⲆⵠⵠΔᐃ, 5]],
    w: Te,
    f: Hi,
    ⵠᐃⵠ: ps,
    e: Pg,
    id: $r.ⵠⲆᐃᐃ,
    Δⵠⵠⵠ: _r.ⵠⲆᐃᐃ,
    time: Xn / 15,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, mh]],
    w: In,
    f: 1,
    ⵠᐃⵠ: Pg,
    e: Lr,
    id: $r.ⵠΔΔΔⲆ,
    Δⵠⵠⵠ: _r.ⵠΔΔΔⲆ,
    time: za / 3,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ᐃⲆΔⵠ, Xn], [_r.ᐃΔⵠᐃⲆ, jh]],
    w: rg,
    f: 0,
    ⵠᐃⵠ: Zj,
    e: zl,
    id: $r.ⲆⲆⲆᐃⵠ,
    Δⵠⵠⵠ: _r.ⲆⲆⲆᐃⵠ,
    time: fl / 3,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ᐃⲆⵠᐃ, 10]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Rq,
    id: $r.ⵠⵠⲆⵠᐃ,
    Δⵠⵠⵠ: _r.ⵠⵠⲆⵠᐃ,
    time: js / 5,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ᐃⲆⵠᐃ, 250]],
    w: fl,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Eh,
    id: $r.ᐃⵠᐃⲆⵠ,
    Δⵠⵠⵠ: _r.ᐃⵠᐃⲆⵠ,
    time: Ug / 60,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 50]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: In,
    e: 0,
    id: $r.ⲆⵠᐃᐃΔ,
    Δⵠⵠⵠ: _r.ⲆⵠᐃᐃΔ,
    time: za / 10,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 15]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Hi,
    e: 0,
    id: $r.ⲆᐃⲆᐃⵠ,
    Δⵠⵠⵠ: _r.ⲆᐃⲆᐃⵠ,
    time: 1 / M,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 30]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: wj,
    e: Zj,
    id: $r.ⲆᐃⵠΔΔ,
    Δⵠⵠⵠ: _r.ⲆᐃⵠΔΔ,
    time: Ol / ta,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 120]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Bg,
    e: wj,
    id: $r.ⵠᐃⵠᐃⵠ,
    Δⵠⵠⵠ: _r.ⵠᐃⵠᐃⵠ,
    time: 1 / _o,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, vi], [_r.ᐃᐃΔΔⵠ, sj]],
    w: Ol,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ΔΔΔⵠⵠ,
    Δⵠⵠⵠ: _r.ΔΔΔⵠⵠ,
    time: 0.2,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⲆⲆΔⲆᐃ, 25]],
    w: 1,
    f: 1,
    ⵠᐃⵠ: Hi,
    e: ps,
    id: $r.ᐃⲆⵠΔᐃ,
    Δⵠⵠⵠ: _r.ᐃⲆⵠΔᐃ,
    time: 1 / Uh,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ᐃⲆⵠΔᐃ, mk]],
    w: 0,
    f: Pg,
    ⵠᐃⵠ: mk,
    e: Rs,
    id: $r.ΔᐃᐃⵠΔ,
    Δⵠⵠⵠ: _r.ΔᐃᐃⵠΔ,
    time: ie / 5,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ᐃΔΔΔⲆ, qi], [_r.ᐃⲆⵠΔᐃ, jh]],
    w: Zj,
    f: jh,
    ⵠᐃⵠ: Zj,
    e: Rs,
    id: $r.ᐃᐃⲆⲆΔⵠᐃ,
    Δⵠⵠⵠ: _r.ΔᐃᐃⵠΔ,
    time: ie / 10,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ᐃⲆⵠΔᐃ, 1]],
    w: 0,
    f: 0,
    ⵠᐃⵠ: 0,
    e: rg,
    id: $r.ⲆⲆᐃΔⲆⲆΔ,
    Δⵠⵠⵠ: _r.ΔᐃᐃⵠΔ,
    time: 0.3333333333333333,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 60], [_r.ᐃΔⵠⲆ, vi], [_r.ᐃΔⵠᐃⲆ, xq]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: tg,
    id: $r.ⵠΔⲆⲆΔ,
    Δⵠⵠⵠ: _r.ⵠΔⲆⲆΔ,
    time: rg / Bo,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ᐃⲆΔⵠ, 40], [_r.ᐃΔⵠⲆ, 45]],
    w: 1,
    f: In,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆⲆⵠⵠᐃ,
    Δⵠⵠⵠ: _r.ⲆⲆⵠⵠᐃ,
    time: za / al,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⲆⲆⵠⵠᐃ, Oq], [_r.ᐃⵠⵠΔⵠ, 40], [_r.ⵠⲆᐃΔⵠ, 1]],
    w: za,
    f: Ol,
    ⵠᐃⵠ: rg,
    e: 0,
    id: $r.ΔⲆΔΔⲆ,
    Δⵠⵠⵠ: _r.ΔⲆΔΔⲆ,
    time: 0.005,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 50], [_r.ᐃΔⵠⲆ, 100]],
    w: mk,
    f: 0,
    ⵠᐃⵠ: Lr,
    e: Eh,
    id: $r.ⲆᐃΔⲆⵠ,
    Δⵠⵠⵠ: _r.ⲆᐃΔⲆⵠ,
    time: 1 / 90,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ᐃΔⵠⲆ, 60], [_r.ᐃⲆⵠᐃ, 120]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆΔᐃⵠⲆ,
    Δⵠⵠⵠ: _r.ⲆΔᐃⵠⲆ,
    time: Oq / 90,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ᐃⲆⵠᐃ, 70], [_r.ᐃⲆΔⵠ, 140]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Pg,
    e: 0,
    id: $r.ΔⵠᐃⲆⵠ,
    Δⵠⵠⵠ: _r.ΔⵠᐃⲆⵠ,
    time: 0.011111111111111112,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ᐃⲆΔⵠ, 80], [_r.Ⲇⵠⵠⵠ, 160]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Rs,
    e: 0,
    id: $r.ΔⲆⵠⵠⵠ,
    Δⵠⵠⵠ: _r.ΔⲆⵠⵠⵠ,
    time: mk / 90,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.Ⲇⵠⵠⵠ, 90], [_r.ᐃⵠᐃΔ, 180]],
    w: Xn,
    f: zl,
    ⵠᐃⵠ: 0,
    e: Rs,
    id: $r.ⲆⲆⵠⵠΔ,
    Δⵠⵠⵠ: _r.ⲆⲆⵠⵠΔ,
    time: rg / 90,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ᐃΔⵠⲆ, 70]],
    w: 1,
    f: Pg,
    ⵠᐃⵠ: 0,
    e: Kh,
    id: $r.ᐃⵠᐃΔⵠ,
    Δⵠⵠⵠ: _r.ᐃⵠᐃΔⵠ,
    time: 0.1,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ᐃΔⵠⲆ, 70], [_r.ⵠᐃⵠⵠ, 50]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: ps,
    e: Zj,
    id: $r.Ⲇᐃⵠⵠᐃ,
    Δⵠⵠⵠ: _r.Ⲇᐃⵠⵠᐃ,
    time: Te / 10,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 40], [_r.ᐃΔⵠⲆ, 40]],
    w: Ug,
    f: Bg,
    ⵠᐃⵠ: 0,
    e: Eh,
    id: $r.Δᐃᐃᐃᐃ,
    Δⵠⵠⵠ: _r.Δᐃᐃᐃᐃ,
    time: 0.1,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⲆⵠΔⲆΔ, 1], [_r.ΔΔⵠⵠⲆ, js]],
    w: Hi,
    f: Rs,
    ⵠᐃⵠ: Lr,
    e: tg,
    id: $r.ⲆⲆΔⵠⵠ,
    Δⵠⵠⵠ: _r.ⲆⲆΔⵠⵠ,
    time: 1 / Tr,
    ⵠⵠⵠ: cs.ⵠⲆⵠⲆΔ
  }, {
    r: [[_r.ⲆⲆⲆᐃⵠ, 30], [_r.ⵠᐃΔⵠΔ, 1], [_r.Ⲇⵠⵠⵠ, 150], [_r.ⵠⵠⲆⵠⲆ, ci]],
    w: 1,
    f: hs,
    ⵠᐃⵠ: Te,
    e: 0,
    id: $r.ᐃⵠΔᐃΔ,
    Δⵠⵠⵠ: _r.ᐃⵠΔᐃΔ,
    time: Ug / 120,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ᐃⵠΔᐃΔ, ie], [_r.ⲆⲆΔⲆΔ, 1], [_r.ᐃⵠᐃΔ, 150], [_r.ᐃⲆᐃⵠΔ, xj]],
    w: 1,
    f: 1,
    ⵠᐃⵠ: Ug,
    e: 0,
    id: $r.ⵠᐃΔΔⵠ,
    Δⵠⵠⵠ: _r.ⵠᐃΔΔⵠ,
    time: 0.005555555555555556,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ΔᐃΔⲆⲆ, fl], [_r.ⵠⲆⵠᐃᐃ, 10], [_r.ⲆⵠᐃΔᐃ, 10], [_r.ᐃΔⵠᐃⲆ, 10]],
    w: Ol,
    f: Rs,
    ⵠᐃⵠ: Rs,
    e: ya,
    id: $r.ⲆⲆΔΔⵠ,
    Δⵠⵠⵠ: _r.ⲆⲆΔΔⵠ,
    time: 0.016666666666666666,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⲆⲆⲆᐃⵠ, vi], [_r.ᐃⲆΔᐃᐃ, ie], [_r.Ⲇⵠⵠⵠ, 150], [_r.ⵠⵠⲆⵠⲆ, 3]],
    w: 1,
    f: Ug,
    ⵠᐃⵠ: js,
    e: 0,
    id: $r.ⵠᐃᐃΔⵠ,
    Δⵠⵠⵠ: _r.ⵠᐃᐃΔⵠ,
    time: js / 120,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⵠᐃᐃΔⵠ, jh], [_r.ΔⲆᐃᐃⲆ, 1], [_r.ᐃⵠᐃΔ, 150], [_r.ᐃⲆᐃⵠΔ, 2]],
    w: js,
    f: 1,
    ⵠᐃⵠ: 1,
    e: Rs,
    id: $r.ⲆⲆᐃᐃⲆ,
    Δⵠⵠⵠ: _r.ⲆⲆᐃᐃⲆ,
    time: 1 / 180,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, Ls], [_r.ᐃΔⵠᐃⲆ, Ps]],
    w: mk,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Rs,
    id: $r.ΔΔΔⲆΔ,
    Δⵠⵠⵠ: _r.ΔΔΔⲆΔ,
    time: 1 / vi,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 30]],
    w: Ug,
    f: Hi,
    ⵠᐃⵠ: 0,
    e: wj,
    id: $r.ΔᐃⲆⵠⲆ,
    Δⵠⵠⵠ: _r.ΔᐃⲆⵠⲆ,
    time: 1 / Uh,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃΔⵠⲆ, 200], [_r.ᐃΔⵠᐃⲆ, aa], [_r.ᐃⲆⲆⲆᐃ, Vn], [_r.ΔΔΔⲆΔ, 1]],
    w: ie,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Hi,
    id: $r.ⲆΔᐃΔⵠ,
    Δⵠⵠⵠ: _r.ⲆΔᐃΔⵠ,
    time: Ol / 25,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃΔⵠⲆ, Xa], [_r.ⵠⵠΔⲆⵠ, za]],
    w: za,
    f: Lr,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ᐃᐃΔᐃΔ,
    Δⵠⵠⵠ: _r.ᐃᐃΔᐃΔ,
    time: ie / 5,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⲆⵠᐃ, 200], [_r.ᐃΔⵠᐃⲆ, 12], [_r.ⵠⵠΔⲆⵠ, 4], [_r.ᐃⲆⲆⲆᐃ, Vn], [_r.ⲆΔᐃΔⵠ, Ug]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Da,
    e: Lr,
    id: $r.ᐃᐃⲆᐃᐃ,
    Δⵠⵠⵠ: _r.ᐃᐃⲆᐃᐃ,
    time: 1 / 30,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⲆⵠᐃ, 20], [_r.ᐃⲆⲆⲆᐃ, 1]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: Zj,
    id: $r.ⲆΔⲆᐃⲆ,
    Δⵠⵠⵠ: _r.ⲆΔⲆᐃⲆ,
    time: 1 / Bo,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⲆΔⵠ, 200], [_r.ⲆⲆⲆᐃⵠ, 10], [_r.ⵠⵠΔⲆⵠ, Ig], [_r.ᐃⲆⲆⲆᐃ, 8], [_r.ᐃᐃⲆᐃᐃ, js]],
    w: fl,
    f: Hi,
    ⵠᐃⵠ: Rs,
    e: Bg,
    id: $r.Δᐃᐃⵠⵠ,
    Δⵠⵠⵠ: _r.Δᐃᐃⵠⵠ,
    time: 0.02857142857142857,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⲆΔⵠ, 10], [_r.ᐃⲆⲆⲆᐃ, Te]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: In,
    e: zl,
    id: $r.ΔΔⲆⵠⲆ,
    Δⵠⵠⵠ: _r.ΔΔⲆⵠⲆ,
    time: 1 / sk,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.Ⲇⵠⵠⵠ, 200], [_r.ⲆⲆⲆᐃⵠ, Bo], [_r.ᐃⲆⲆⲆᐃ, 8], [_r.ΔⵠΔΔⲆ, Hr], [_r.Δᐃᐃⵠⵠ, 1]],
    w: 1,
    f: Rs,
    ⵠᐃⵠ: Eh,
    e: 0,
    id: $r.ⵠΔΔᐃᐃ,
    Δⵠⵠⵠ: _r.ⵠΔΔᐃᐃ,
    time: Xn / 40,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.Ⲇⵠⵠⵠ, Zk], [_r.ΔⵠΔΔⲆ, 1]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: Da,
    e: Bg,
    id: $r.ⲆⵠΔⵠⵠ,
    Δⵠⵠⵠ: _r.ⲆⵠΔⵠⵠ,
    time: 1 / $q,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⵠᐃΔ, 200], [_r.ⲆⲆⲆᐃⵠ, gg], [_r.ΔᐃΔⲆᐃ, 1], [_r.ⵠΔΔᐃᐃ, 1]],
    w: 1,
    f: ps,
    ⵠᐃⵠ: zl,
    e: 0,
    id: $r.ΔᐃⵠⵠΔ,
    Δⵠⵠⵠ: _r.ΔᐃⵠⵠΔ,
    time: Oq / 45,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⵠᐃΔ, 10], [_r.ΔⵠΔΔⲆ, 1], [_r.ⲆⵠⵠΔⲆ, hs]],
    w: 1,
    f: ps,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆⵠΔⲆⲆ,
    Δⵠⵠⵠ: _r.ⲆⵠΔⲆⲆ,
    time: Ug / bl,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⵠⵠΔⵠ, 200], [_r.ⲆⲆⲆᐃⵠ, Kg], [_r.ᐃⲆΔᐃᐃ, mk], [_r.ΔᐃⵠⵠΔ, yg]],
    w: 1,
    f: Zj,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⵠΔⲆΔⲆ,
    Δⵠⵠⵠ: _r.ⵠΔⲆΔⲆ,
    time: Ug / 50,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⵠⵠΔⵠ, 10], [_r.ⵠⲆᐃΔⵠ, 1]],
    w: rg,
    f: Kh,
    ⵠᐃⵠ: In,
    e: 0,
    id: $r.ΔⵠΔⵠⵠ,
    Δⵠⵠⵠ: _r.ΔⵠΔⵠⵠ,
    time: 1 / hn,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 100]],
    w: mk,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆΔⵠΔΔ,
    Δⵠⵠⵠ: _r.ⲆΔⵠΔΔ,
    time: js / 25,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⲆΔⵠΔΔ, 1], [_r.ᐃΔⵠⲆ, 100], [_r.ⵠᐃⵠⵠ, 50]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: ps,
    e: wj,
    id: $r.ᐃΔᐃΔⲆ,
    Δⵠⵠⵠ: _r.ᐃΔᐃΔⲆ,
    time: mk / 40,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃΔᐃΔⲆ, 1], [_r.ᐃⲆⵠᐃ, 50], [_r.ᐃΔⵠⲆ, 50], [_r.ⵠᐃⵠⵠ, 50]],
    w: 1,
    f: In,
    ⵠᐃⵠ: Da,
    e: Pg,
    id: $r.ᐃᐃΔᐃⲆ,
    Δⵠⵠⵠ: _r.ᐃᐃΔᐃⲆ,
    time: 0.02,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃᐃΔᐃⲆ, js], [_r.ᐃⲆΔⵠ, 50], [_r.ᐃⲆⵠᐃ, 50], [_r.ᐃΔⵠⲆ, 50]],
    w: 1,
    f: zl,
    ⵠᐃⵠ: 0,
    e: Da,
    id: $r.ΔⲆΔΔΔ,
    Δⵠⵠⵠ: _r.ΔⲆΔΔΔ,
    time: 0.014285714285714285,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ΔⲆΔΔΔ, 1], [_r.Ⲇⵠⵠⵠ, 50], [_r.ᐃⲆΔⵠ, 50], [_r.ᐃⲆⵠᐃ, 50]],
    w: Oq,
    f: Zj,
    ⵠᐃⵠ: Pg,
    e: 0,
    id: $r.ᐃΔⵠᐃⵠ,
    Δⵠⵠⵠ: _r.ᐃΔⵠᐃⵠ,
    time: 0.011111111111111112,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃΔⵠᐃⵠ, Oq], [_r.ᐃⵠᐃΔ, 50], [_r.Ⲇⵠⵠⵠ, 50], [_r.ᐃⲆΔⵠ, 50]],
    w: Te,
    f: 0,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.Δⵠᐃᐃᐃ,
    Δⵠⵠⵠ: _r.Δⵠᐃᐃᐃ,
    time: mk / 120,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ΔᐃΔᐃⵠ, 1], [_r.ᐃⲆⵠᐃ, 200]],
    w: 1,
    f: Te,
    ⵠᐃⵠ: za,
    e: Eh,
    id: $r.ᐃⲆΔⵠⵠ,
    Δⵠⵠⵠ: _r.ᐃⲆΔⵠⵠ,
    time: 0.016666666666666666,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⵠⲆⲆΔᐃ, jh], [_r.ᐃⲆⵠᐃ, 200]],
    w: Te,
    f: 1,
    ⵠᐃⵠ: 1,
    e: ya,
    id: $r.ⵠᐃⵠⵠΔ,
    Δⵠⵠⵠ: _r.ⵠᐃⵠⵠΔ,
    time: Ug / 60,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ΔΔⲆⲆᐃ, 1], [_r.ᐃⲆⵠᐃ, 200], [_r.ⵠⵠⲆⵠⲆ, 1]],
    w: rg,
    f: fl,
    ⵠᐃⵠ: 1,
    e: 0,
    id: $r.ⲆⲆᐃᐃΔ,
    Δⵠⵠⵠ: _r.ⲆⲆᐃᐃΔ,
    time: rg / 60,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⲆⵠⵠΔᐃ, 10], [_r.ⵠⵠΔⵠΔ, 5], [_r.ᐃΔⵠᐃⲆ, va]],
    w: 1,
    f: Lr,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆΔⵠⵠᐃ,
    Δⵠⵠⵠ: _r.ⲆΔⵠⵠᐃ,
    time: Oq / 10,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⵠⵠΔⵠΔ, 3], [_r.ᐃΔⵠᐃⲆ, 2]],
    w: Ug,
    f: Rs,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ΔᐃⲆⵠⵠ,
    Δⵠⵠⵠ: _r.ΔᐃⲆⵠⵠ,
    time: 1 / Kg,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⲆΔⵠⵠᐃ, 1], [_r.ⵠⲆΔᐃᐃ, Ol], [_r.ⲆΔΔᐃᐃ, 15], [_r.ⲆⲆⲆᐃⵠ, Gs], [_r.ᐃⲆⲆⲆᐃ, _a]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: wj,
    id: $r.ΔΔᐃⲆΔ,
    Δⵠⵠⵠ: _r.ΔΔᐃⲆΔ,
    time: Oq / 60,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ΔᐃⲆⵠⵠ, 1], [_r.ᐃΔΔⲆΔ, js], [_r.ⲆΔΔᐃᐃ, yl], [_r.ⲆⲆⲆᐃⵠ, 5], [_r.ᐃⲆⲆⲆᐃ, Iq]],
    w: Xn,
    f: Kh,
    ⵠᐃⵠ: Zj,
    e: 0,
    id: $r.ΔᐃⵠⲆΔ,
    Δⵠⵠⵠ: _r.ΔᐃⵠⲆΔ,
    time: fl / 60,
    ⵠⵠⵠ: cs.ⵠᐃⲆᐃᐃ
  }, {
    r: [[_r.ⲆΔⵠΔᐃ, ie]],
    w: 0,
    f: 0,
    ⵠᐃⵠ: 1,
    e: Da,
    id: $r.ΔΔᐃΔΔ,
    Δⵠⵠⵠ: _r.ΔΔᐃΔΔ,
    time: 0.2,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, qr], [_r.ᐃΔⵠᐃⲆ, 1]],
    w: 1,
    f: Bg,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆΔⵠΔᐃ,
    Δⵠⵠⵠ: _r.ⲆΔⵠΔᐃ,
    time: Ol / Uh,
    ⵠⵠⵠ: cs.ⲆᐃⵠᐃΔ
  }, {
    r: [[_r.ᐃΔⵠⲆ, 100], [_r.ᐃᐃΔΔⵠ, 30]],
    w: Ol,
    f: mk,
    ⵠᐃⵠ: mj,
    e: ya,
    id: $r.ⲆⵠⲆⵠⵠ,
    Δⵠⵠⵠ: _r.ⲆⵠⲆⵠⵠ,
    time: 1 / Ra,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, Il]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: Zj,
    e: In,
    id: $r.ⵠΔᐃᐃᐃ,
    Δⵠⵠⵠ: _r.ⵠΔᐃᐃᐃ,
    time: yg / 5,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, sh], [_r.ᐃΔⵠⲆ, 50], [_r.ⵠⵠΔⵠΔ, kq], [_r.ⲆⵠⵠΔᐃ, Qr], [_r.ᐃΔⵠᐃⲆ, 6]],
    w: fl,
    f: 0,
    ⵠᐃⵠ: Eh,
    e: Eh,
    id: $r.ΔⲆⵠΔΔ,
    Δⵠⵠⵠ: _r.ΔⲆⵠΔΔ,
    time: fl / Mg,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 250], [_r.ⲆⲆⲆᐃⵠ, Th], [_r.ⲆΔΔᐃᐃ, 2], [_r.ⵠᐃΔⲆⵠ, dg]],
    w: 1,
    f: 0,
    ⵠᐃⵠ: 0,
    e: wj,
    id: $r.ⵠⵠⲆΔⲆ,
    Δⵠⵠⵠ: _r.ⵠⵠⲆΔⲆ,
    time: js / 50,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 250], [_r.ᐃΔⵠᐃⲆ, gn], [_r.ⲆΔΔᐃᐃ, 2], [_r.ᐃⲆⲆⲆᐃ, 8]],
    w: js,
    f: In,
    ⵠᐃⵠ: 0,
    e: tg,
    id: $r.ⵠᐃᐃⲆᐃ,
    Δⵠⵠⵠ: _r.ⵠᐃᐃⲆᐃ,
    time: js / 50,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ᐃΔⵠᐃⲆ, 10], [_r.ⲆⵠⵠΔᐃ, 6], [_r.ⵠⵠΔⵠΔ, 4], [_r.ⲆⲆΔⲆᐃ, 50]],
    w: rg,
    f: wj,
    ⵠᐃⵠ: ya,
    e: 0,
    id: $r.ᐃⵠⲆⵠⲆ,
    Δⵠⵠⵠ: _r.ᐃⵠⲆⵠⲆ,
    time: mk / Ok,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 250], [_r.ᐃΔⵠᐃⲆ, te], [_r.ⵠΔΔΔⲆ, 10], [_r.ⵠⵠΔⲆⵠ, 8]],
    w: Ug,
    f: Bg,
    ⵠᐃⵠ: 0,
    e: Rq,
    id: $r.ΔⵠΔΔⵠ,
    Δⵠⵠⵠ: _r.ΔⵠΔΔⵠ,
    time: 0.02,
    ⵠⵠⵠ: cs.ΔⲆⵠⵠⲆ
  }, {
    r: [[_r.ⵠᐃⵠⵠ, 40]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: 0,
    e: Hi,
    id: $r.ΔᐃⲆᐃᐃ,
    Δⵠⵠⵠ: _r.ΔᐃⲆᐃᐃ,
    time: 1 / Oj,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ΔᐃⲆᐃᐃ, Ol], [_r.ᐃΔⵠⲆ, 40], [_r.ⵠᐃⵠⵠ, 50]],
    w: 1,
    f: tg,
    ⵠᐃⵠ: 0,
    e: Pg,
    id: $r.ᐃⲆΔⲆⵠ,
    Δⵠⵠⵠ: _r.ᐃⲆΔⲆⵠ,
    time: 0.1,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ᐃⲆΔⲆⵠ, 1], [_r.ᐃⲆⵠᐃ, 40], [_r.ᐃΔⵠⲆ, 50], [_r.ⵠᐃⵠⵠ, 60]],
    w: 1,
    f: wj,
    ⵠᐃⵠ: 0,
    e: 0,
    id: $r.ⲆᐃᐃⲆᐃ,
    Δⵠⵠⵠ: _r.ⲆᐃᐃⲆᐃ,
    time: rg / oh,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⲆᐃᐃⲆᐃ, 1], [_r.ᐃⲆΔⵠ, 40], [_r.ᐃⲆⵠᐃ, 70], [_r.ᐃΔⵠⲆ, 80]],
    w: jh,
    f: Lr,
    ⵠᐃⵠ: 0,
    e: Hi,
    id: $r.ⲆⲆⲆⵠⵠ,
    Δⵠⵠⵠ: _r.ⲆⲆⲆⵠⵠ,
    time: 0.03333333333333333,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ⲆⲆⲆⵠⵠ, mk], [_r.Ⲇⵠⵠⵠ, 40], [_r.ᐃⲆΔⵠ, 70], [_r.ᐃⲆⵠᐃ, 110]],
    w: Xn,
    f: 0,
    ⵠᐃⵠ: Bg,
    e: Hi,
    id: $r.ΔΔⲆᐃᐃ,
    Δⵠⵠⵠ: _r.ΔΔⲆᐃᐃ,
    time: Ol / 60,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }, {
    r: [[_r.ΔΔⲆᐃᐃ, rg], [_r.ᐃⵠᐃΔ, 50], [_r.Ⲇⵠⵠⵠ, 80], [_r.ᐃⲆΔⵠ, 110]],
    w: hs,
    f: 0,
    ⵠᐃⵠ: zl,
    e: tg,
    id: $r.ⲆⲆⲆᐃΔ,
    Δⵠⵠⵠ: _r.ⲆⲆⲆᐃΔ,
    time: 1 / 90,
    ⵠⵠⵠ: cs.ΔⲆΔⵠ
  }];
  const Ys = ql;
  Nr = 300;
  function Zs(a, b, c, d, e) {
    $j(Mw, a, b, c, d, e);
    return ((83 + (ft(Nw[0], Nw[1]) ^ st(Nw[Zh], Nw[3], Nw[4], Nw[0]))) * 75 + 74) % 65537;
  }
  function $s(a, b, c) {
    Wi(Mw, a, b, c);
    const d = Jw(Nw[Eh], Nw[Ol], Nw[2], Nw[zl]);
    Jw(Nw[1], Nw[Zg], Nw[tg], Nw[za]);
    return ~(d & 40115) & d | ~(d & 40115) & 40115;
  }
  function _s(a, b, c) {
    const d = ~(a & 21621) & (a | 21621);
    const e = b ^ 64260;
    const f = (0 << (c >> Bg & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (24 << (c >> 24 & lg));
    return ((39717 + (oo(d, e, f, d) ^ function (b, c, d, e) {
      const f = (2147483587 + (17040 + b) * 2147483629) % 2147483647;
      const g = ~(c & 30717) & c | ~(c & 30717) & 30717;
      const i = ~(d & 23873) & (d | 23873);
      const a = (0 << (e & 255)) + (16 << (e >> 24 & 255)) + (8 << (e >> 8 & 255)) + (24 << (e >> 16 & 255));
      const j = Tw(f, g, i, a);
      ib(f, g, i, a);
      return ~(j & 57141) & j | ~(j & 57141) & 57141;
    }(e, f, d, e))) * 22695477 + 1) % 4294967296;
  }
  ΔΔᐃ = {
    ⵠⵠΔⵠΔⲆᐃ: Nr++,
    ⵠⵠᐃⲆⲆᐃⲆ: Nr++,
    ⵠᐃΔⲆⲆⲆⲆ: Nr++,
    ⲆᐃΔⲆⲆᐃⲆ: Nr++,
    ⵠᐃᐃⲆᐃᐃᐃ: Nr++,
    ΔⲆᐃΔΔΔⵠ: Nr++,
    ⲆΔⲆᐃᐃⵠᐃ: Nr++,
    ⵠΔᐃΔᐃⵠΔ: Nr++,
    ᐃⵠⲆⲆᐃΔⵠ: Nr++,
    ⲆᐃΔⲆᐃᐃᐃ: Nr++,
    ⲆΔΔⵠᐃⲆΔ: Nr++,
    ⵠⵠⲆᐃᐃΔΔ: Nr++,
    EMPTY: Nr++,
    ⵠⲆᐃⲆⵠᐃⵠ: Nr++,
    ⲆᐃᐃⲆᐃᐃⲆ: Nr++,
    ⲆᐃⲆⵠⲆᐃⲆ: Nr++,
    ΔⵠⵠⲆᐃᐃⵠ: Nr++,
    ᐃⵠᐃᐃᐃⲆΔ: Nr++,
    ⲆᐃⵠΔᐃᐃⲆ: Nr++,
    ⲆΔΔΔⵠⲆᐃ: Nr++,
    ⵠⲆⲆΔᐃᐃΔ: Nr++,
    ᐃⵠⲆᐃᐃᐃᐃ: Nr++,
    ΔᐃⵠΔⵠ: Nr++,
    ᐃⵠⵠⲆᐃᐃΔ: Nr++,
    ᐃᐃⲆⲆⲆ: Nr++,
    ⵠᐃΔⲆᐃⲆᐃ: Nr++,
    ᐃᐃⵠⵠⵠᐃΔ: Nr++,
    ⲆⲆⵠᐃⵠⵠⵠ: Nr++,
    ⲆΔⵠⵠⲆⲆΔ: Nr++,
    ⵠⲆⵠⵠⵠᐃⲆ: Nr++,
    ⵠᐃᐃⲆΔᐃᐃ: Nr++,
    ΔΔⲆⲆⵠⲆΔ: Nr++,
    POINTS: Nr++,
    ⵠΔΔᐃᐃⲆⲆ: Nr++,
    ⲆⵠⲆΔⲆⲆᐃ: Nr++,
    ⵠⲆΔⵠΔⵠⲆ: Nr++,
    ⵠⲆΔᐃⵠΔⲆ: Nr++,
    ⵠⲆᐃᐃᐃΔⵠ: Nr++,
    ᐃⵠᐃⵠⲆⵠⲆ: Nr++,
    ᐃⲆΔΔΔⵠⵠ: Nr++,
    ΔΔᐃΔᐃΔⵠ: Nr++,
    ⵠᐃⵠⲆᐃⲆⵠ: Nr++,
    ΔᐃⲆΔⵠᐃⵠ: Nr++,
    ᐃⵠΔᐃⲆⵠΔ: Nr++
  };
  const at = wk;
  function bt(a, b, c, d, e, f) {
    Rj(Mw, a, b, c, d, e, f);
    return ((234 + (Iw(Nw[0], Nw[mk], Nw[Zg], Nw[3], Nw[4], Nw[Oj]) ^ function (a, b, c) {
      Ke(Mw, a, b, c);
      const d = Jk(Nw[0], Nw[1], Nw[Zg]);
      const e = Kn(Nw[0], Nw[1], Nw[2], Nw[Da]);
      return ((233 + (d ^ e)) * 75 + 74) % 65537;
    }(Nw[Hi], Nw[1], Nw[xq]))) * 16807 + 0) % 2147483647;
  }
  const ct = Fl;
  function dt() {
    Ft[_r.ⲆⲆⲆᐃΔ] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    Ft[_r.ΔΔⲆᐃᐃ] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    Ft[_r.ⲆⲆⲆⵠⵠ] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    Ft[_r.ⲆᐃᐃⲆᐃ] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    Ft[_r.ᐃⲆΔⲆⵠ] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    Ft[_r.ΔᐃⲆᐃᐃ] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    Ft[_r.ⲆᐃΔⲆⵠ] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    Ft[_r.ⲆΔᐃⵠⲆ] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    Ft[_r.ΔⵠᐃⲆⵠ] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    Ft[_r.ΔⲆⵠⵠⵠ] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    Ft[_r.ⲆⲆⵠⵠΔ] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    Ft[_r.Δⵠᐃᐃᐃ] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    Ft[_r.ᐃΔⵠᐃⵠ] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    Ft[_r.ΔⲆΔΔΔ] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    Ft[_r.ᐃᐃΔᐃⲆ] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    Ft[_r.ᐃΔᐃΔⲆ] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    Ft[_r.ⲆΔⵠΔΔ] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    Ft[_r.Ⲇᐃⵠⵠᐃ] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    Ft[_r.ⵠᐃⵠᐃⵠ] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    Ft[_r.ΔⵠΔⵠⵠ] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    Ft[_r.ⵠΔⲆΔⲆ] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    Ft[_r.ⲆⵠΔⲆⲆ] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    Ft[_r.ΔᐃⵠⵠΔ] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    Ft[_r.ⲆⵠΔⵠⵠ] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    Ft[_r.ⵠΔΔᐃᐃ] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    Ft[_r.ΔΔⲆⵠⲆ] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    Ft[_r.Δᐃᐃⵠⵠ] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    Ft[_r.ⲆΔⲆᐃⲆ] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    Ft[_r.ᐃᐃⲆᐃᐃ] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    Ft[_r.ᐃᐃΔᐃΔ] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    Ft[_r.ⲆΔᐃΔⵠ] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    Ft[_r.ΔᐃⲆⵠⲆ] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    Ft[_r.ΔΔΔⲆΔ] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    Ft[_r.ΔⲆΔΔⲆ] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    Ft[_r.ⵠΔⵠⵠⲆ] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    Ft[_r.ᐃⲆΔⲆⲆ] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    Ft[_r.ΔⵠΔΔⲆ] = ["Vulture Feather", "From a deadly vulture"];
    Ft[_r.ᐃⵠⵠΔⵠ] = ["Emerald", "How many golden breads can you get from it?"];
    Ft[_r.ⵠⲆᐃΔⵠ] = ["Sand Worm Juice", "I don't want to know how you got this."];
    Ft[_r.ⵠᐃΔΔᐃ] = ["Turban", "Useful to survive in the desert."];
    Ft[_r.ⵠⵠΔᐃᐃ] = ["Ninja outfit", "Essential to survive in the desert"];
    Ft[_r.ΔᐃᐃᐃΔ] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    Ft[_r.ᐃⲆᐃⵠᐃΔⵠ] = ["Pilot Glasses"];
    Ft[_r.ⵠⲆᐃⲆΔ] = ["Tamed Boar", "Fast on lands and slow on water."];
    Ft[_r.ΔΔⵠⲆⲆ] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    Ft[_r.ᐃⵠⵠᐃⵠ] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    Ft[_r.ⲆⵠΔᐃⵠ] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    Ft[_r.ⲆⲆΔⵠⲆ] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    Ft[_r.ⵠᐃⲆⲆΔ] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    Ft[_r.ᐃⵠⲆⵠⲆ] = ["Saddle", "Hit a boar with it to tame it."];
    Ft[_r.ᐃⵠᐃⵠⵠ] = ["Witch Hat", "You're a wizard Starvy!"];
    Ft[_r.ⲆⵠΔΔΔ] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    Ft[_r.ᐃΔⵠⵠᐃ] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    Ft[_r.ⵠⵠᐃᐃΔ] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    Ft[_r.ᐃⲆⵠᐃΔ] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    Ft[_r.ⵠᐃᐃΔᐃ] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    Ft[_r.ⵠᐃᐃⲆᐃ] = ["Sled", "You are faster with it in the snow"];
    Ft[_r.ⵠⵠⲆΔⲆ] = ["Boat", "You are faster with it in the water"];
    Ft[_r.ΔⵠΔΔⵠ] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    Ft[_r.ᐃⵠⲆⵠΔ] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
    Ft[_r.ᐃⲆⲆⲆᐃ] = ["Penguin Feather", "From a deadly cute penguin."];
    Ft[_r.ⵠⵠΔⲆⵠ] = ["Hawk Feather", "From a deadly hawk."];
    Ft[_r.ⵠⵠⵠΔⲆ] = ["Cactus", "Food : 20", "Water : 10"];
    Ft[_r.ⵠΔᐃⵠⲆ] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    Ft[_r.ΔⵠⵠΔⲆ] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    Ft[_r.ⲆᐃⵠΔⲆ] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    Ft[_r.ⲆΔⲆⵠΔ] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    Ft[_r.Ⲇᐃⵠⵠⵠ] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    Ft[_r.ᐃⵠⵠⲆᐃ] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    Ft[_r.ⵠⲆᐃᐃⲆ] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    Ft[_r.ᐃΔΔⵠᐃ] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    Ft[_r.ⲆⵠΔⵠΔ] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    Ft[_r.ᐃⲆΔᐃⲆ] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    Ft[_r.ΔⵠⵠΔΔ] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    Ft[_r.ΔΔⲆᐃⲆ] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    Ft[_r.ΔⵠΔⲆΔ] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    Ft[_r.ⵠΔⲆⵠᐃ] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    Ft[_r.ⲆᐃΔⵠᐃ] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    Ft[_r.ⲆᐃΔΔⵠ] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    Ft[_r.ⲆⵠΔᐃᐃ] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", Ⲇ[Aq], "Lifetime: 8 days"];
    Ft[_r.ᐃⵠΔΔΔ] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Ft[_r.ⲆⵠⲆᐃΔ] = ["Pitchfork", "Perfect for gathering"];
    Ft[_r.ᐃΔΔᐃΔ] = ["Golden Pitchfork", "Essential for a real farmer."];
    Ft[_r.ΔᐃΔΔⲆⲆⵠ] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    Ft[_r.ᐃᐃΔΔᐃⲆᐃ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    Ft[_r.ΔⲆⲆⲆⵠⵠᐃ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    Ft[_r.ΔⵠΔᐃᐃΔⲆ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    Ft[_r.ᐃᐃⵠⲆᐃⵠⲆ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    Ft[_r.ⲆⲆᐃΔΔᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    Ft[_r.ⲆⲆΔⲆΔ] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    Ft[_r.ΔⲆᐃᐃⲆ] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    Ft[_r.ⲆⲆᐃᐃⲆ] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    Ft[_r.ΔⲆᐃΔⵠ] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    Ft[_r.ᐃⲆᐃⵠΔ] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    Ft[_r.ⵠᐃΔΔⵠ] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    Ft[_r.ᐃΔⲆⵠΔ] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    Ft[_r.ⵠⵠΔΔⵠ] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    Ft[_r.ⲆⵠⵠΔⲆ] = ["Flame", "It's hot!"];
    Ft[_r.Δⵠⵠⵠᐃ] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    Ft[_r.ᐃΔᐃⲆⲆ] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    Ft[_r.ⲆΔᐃΔᐃ] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    Ft[_r.ᐃⵠᐃΔ] = ["Reidite", "The ultimate ore"];
    Ft[_r.ⵠᐃΔⵠΔ] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    Ht[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ht[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    Ht[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    Ht[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    Ht[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    Ht[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    Ht[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    Ht[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    Ht[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    Ht[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    Ht[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    Ht[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    Ht[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    Ht[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    Ht[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    Ht[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    Ht[38] = ["You died crushed by an angry baby mammoth."];
    Ht[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    Ht[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    Ft[_r.ⲆⵠᐃΔᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ft[ΔΔᐃ.ⵠᐃⵠⲆᐃⲆⵠ] = "A sandstorm is approaching in a few seconds.";
    Ft[ΔΔᐃ.ΔΔᐃΔᐃΔⵠ] = "The sandstorm will soon stop.";
    Ft[ΔΔᐃ.ᐃⵠΔᐃⲆⵠΔ] = "A blizzard is approaching in a few seconds.";
    Ft[ΔΔᐃ.ΔᐃⲆΔⵠᐃⵠ] = "The blizzard will soon stop.";
    Ft[ΔΔᐃ.ⲆΔⵠⵠⲆⲆΔ] = " BACK TO THE GAME";
    Ft[ΔΔᐃ.ⵠⲆⵠⵠⵠᐃⲆ] = " Share on Twitter";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆΔᐃᐃ] = " Share on Facebook";
    Ft[ΔΔᐃ.ΔΔⲆⲆⵠⲆΔ] = "You can buy items on the shop in the next game with your points";
    Ft[ΔΔᐃ.POINTS] = "points";
    Ft[ΔΔᐃ.ⵠΔΔᐃᐃⲆⲆ] = "Score";
    Ft[ΔΔᐃ.ⲆⵠⲆΔⲆⲆᐃ] = "Kill";
    Ft[ΔΔᐃ.ⵠⲆΔⵠΔⵠⲆ] = "Days survived";
    Ft[ΔΔᐃ.ⵠⲆΔᐃⵠΔⲆ] = Ⲇ[rg];
    Ft[ΔΔᐃ.ⵠⲆᐃᐃᐃΔⵠ] = "Building method: Grid. Press G to change";
    Ft[_r.ⵠⲆⵠᐃᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ft[_r.Ⲇᐃᐃᐃᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    Ft[_r.ⲆⲆΔΔⵠ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    Ft[_r.ΔⲆⵠΔΔ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = ya; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ft[_r.ΔᐃΔΔΔ] = ["Hand"];
    Ft[_r.ᐃᐃΔΔⵠ] = ["Dirt", "Dirty!"];
    Ft[_r.ⲆⲆΔⲆᐃ] = ["Sand", "I got it in my eyes!"];
    Ft[_r.ⵠᐃⵠⵠ] = ["Wood", "You can't get enough of it!"];
    Ft[_r.ᐃΔⵠⲆ] = ["Stone", "Also called a rock"];
    Ft[_r.ᐃⲆⵠᐃ] = ["Gold", "Be generous, give it to others"];
    Ft[_r.ᐃⲆΔⵠ] = ["Diamond", "What will you make with it?"];
    Ft[_r.Ⲇⵠⵠⵠ] = ["Amethyst", "It's Mauve like Lapa"];
    Ft[_r.ᐃⵠᐃⵠᐃ] = ["Flour", "Used in cooking"];
    Ft[_r.ⲆᐃᐃⵠΔ] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    Ft[_r.ⵠᐃⲆⲆᐃ] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    Ft[_r.ⵠⵠᐃᐃⵠ] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    Ft[_r.ΔΔⵠⵠⲆ] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    Ft[_r.ΔΔᐃⵠⲆ] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    Ft[_r.ⵠⲆΔⲆᐃ] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    Ft[_r.ⲆⵠΔⲆΔ] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    Ft[_r.ⲆⲆΔⵠⵠ] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    Ft[_r.ⲆⵠⲆⲆΔ] = ["Candies", "Only for children!", "Food: 20"];
    Ft[_r.ᐃΔᐃⵠⵠ] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    Ft[_r.ⵠᐃΔⲆⲆ] = ["Garland", "Perfect decoration for roofs"];
    Ft[_r.ⵠᐃΔⲆᐃ] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    Ft[_r.ⵠᐃⲆⲆⲆ] = ["Berry", "Berry tasty!", "Food: 10"];
    Ft[_r.ⲆΔᐃΔΔ] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", Ⲇ[$k], "Lifetime: 8 days"];
    Ft[_r.ⲆΔΔᐃⵠ] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    Ft[_r.ᐃⵠᐃᐃⵠ] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", Ⲇ[wk], "Lifetime: 8 days"];
    Ft[_r.ⵠᐃⵠΔⵠ] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    Ft[_r.ⲆⲆΔⲆⵠ] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", Ⲇ[Lh], "Lifetime: 8 days"];
    Ft[_r.ⲆᐃΔᐃΔ] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    Ft[_r.ᐃⲆⲆᐃΔ] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    Ft[_r.ᐃⲆᐃᐃΔ] = ["Thorn bush", "It stings!"];
    Ft[_r.ΔΔΔⵠⵠ] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    Ft[_r.ᐃΔΔΔⲆ] = ["Ice", "Useful for making cakes and water"];
    Ft[_r.ᐃⵠᐃΔⵠ] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    Ft[_r.ⲆⵠⵠΔᐃ] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    Ft[_r.ⵠⵠΔⵠΔ] = ["Rabbit Fur", "That rabbit was so cute..."];
    Ft[_r.ᐃΔΔⲆΔ] = ["Pure Fur", "You're a bread factory"];
    Ft[_r.ⵠⲆΔᐃᐃ] = ["Dark Fur", "You get ready to do something wrong"];
    Ft[_r.ⲆΔΔᐃᐃ] = ["Winter Fur", "These animals just wanted a hug..."];
    Ft[_r.ⵠᐃΔⲆⵠ] = ["Scales", "It smells like fish!"];
    Ft[_r.ΔᐃΔⲆᐃ] = ["Kraken Skin", "Weren't you too scared?"];
    Ft[_r.ΔᐃᐃⲆⲆ] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    Ft[_r.ᐃΔΔⵠΔ] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    Ft[_r.ⵠⲆΔⵠᐃ] = ["Workbench", "Very useful to craft all kinds of objects"];
    Ft[_r.ᐃΔⵠᐃⲆ] = ["Cord", "Used in crafting Hats and Bag"];
    Ft[_r.ⲆⲆⲆᐃⵠ] = ["Diamond Cord", "Used in crafting Special Hats"];
    Ft[_r.ᐃⲆⲆⲆⲆ] = ["Chest", "Allows you to store items", "Durability: 500"];
    Ft[_r.ΔⵠᐃΔᐃ] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    Ft[_r.ᐃᐃⲆΔⲆ] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    Ft[_r.ⵠΔΔΔΔ] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    Ft[_r.ᐃΔⲆᐃΔ] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    Ft[_r.ⵠΔᐃᐃⵠ] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    Ft[_r.ΔⲆᐃⵠΔ] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    Ft[_r.ⵠᐃᐃΔⵠ] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    Ft[_r.ⲆⲆΔᐃᐃ] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    Ft[_r.ⲆΔⲆⲆⵠ] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    Ft[_r.ⲆⵠⵠⲆⲆ] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    Ft[_r.ⵠᐃⲆΔΔ] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    Ft[_r.ᐃⲆⵠΔⲆ] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    Ft[_r.ΔⲆⲆⵠⲆ] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    Ft[_r.ⲆᐃΔⲆΔ] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    Ft[_r.ⲆⲆⵠⲆⲆ] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    Ft[_r.ⵠΔΔΔⵠ] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    Ft[_r.ᐃⵠⵠⵠᐃ] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    Ft[_r.ⵠⵠᐃᐃⲆ] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
    Ft[_r.ᐃᐃΔⲆⲆ] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    Ft[_r.ⵠΔᐃⵠᐃ] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    Ft[_r.ⵠᐃᐃⵠΔ] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    Ft[_r.ᐃᐃᐃᐃⲆ] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    Ft[_r.ᐃΔⵠⲆᐃ] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    Ft[_r.ᐃΔΔΔΔ] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    Ft[_r.ⲆΔΔⵠⵠ] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    Ft[_r.ⵠᐃⵠᐃΔ] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    Ft[_r.ⵠᐃⲆⲆⵠ] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    Ft[_r.ᐃᐃⲆⵠⵠ] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    Ft[_r.Δᐃᐃⵠᐃ] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    Ft[_r.ΔᐃΔⲆⲆ] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    Ft[_r.ᐃⲆⲆⵠᐃ] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    Ft[_r.ⵠⲆⲆⵠⵠ] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    Ft[_r.ⲆᐃⵠΔᐃ] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    Ft[_r.ᐃⵠΔᐃΔ] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    Ft[_r.ⲆᐃᐃΔᐃ] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    Ft[_r.ᐃᐃⵠⲆⲆ] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    Ft[_r.ΔⲆΔⲆⲆ] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    Ft[_r.ⲆΔⵠⵠᐃ] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    Ft[_r.ᐃⲆᐃⲆᐃ] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    Ft[_r.ᐃⵠⵠⵠΔ] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    Ft[_r.ᐃⲆⲆΔΔ] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    Ft[_r.ⵠⲆⵠΔᐃ] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    Ft[_r.ΔᐃⲆⵠⵠ] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Ft[_r.ΔΔᐃⲆΔ] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    Ft[_r.ΔᐃⵠⲆΔ] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Ft[_r.ᐃⲆⵠⲆⲆ] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    Ft[_r.ᐃⵠⵠⲆΔ] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    Ft[_r.ᐃⲆΔᐃᐃ] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    Ft[_r.ⵠⵠⲆⵠⲆ] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    Ft[_r.ΔᐃΔᐃⵠ] = ["Green Gemstone", "You didn't cheat, promise?"];
    Ft[_r.ⵠⲆⲆΔᐃ] = ["Orange Gemstone", "Only a real pirate can find it!"];
    Ft[_r.ΔΔⲆⲆᐃ] = ["Blue Gemstone", "For too kind people"];
    Ft[_r.ᐃⲆΔⵠⵠ] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    Ft[_r.ⵠᐃⵠⵠΔ] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    Ft[_r.ⲆⲆᐃᐃΔ] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    Ft[_r.ΔΔᐃΔΔ] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    Ft[_r.ⲆΔⵠΔᐃ] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    Ft[_r.ΔᐃᐃⵠΔ] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    Ft[_r.ᐃⲆⵠΔᐃ] = ["Empty Bottle", "You can fill this bottle near a water source"];
    Ft[_r.ⲆΔᐃΔⲆ] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    Ft[_r.ᐃᐃΔⵠΔ] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    Ft[_r.ⵠⲆᐃᐃ] = ["Bag", "More space for your items!"];
    Ft[_r.ⵠΔΔΔⲆ] = ["Paper", "Used in book-crafting"];
    Ft[_r.ᐃⵠΔΔⲆ] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    Ft[_r.ᐃΔᐃⲆᐃ] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    Ft[_r.ⵠⵠⲆⵠᐃ] = ["Lock", "Allow you to lock your chest"];
    Ft[_r.ᐃⵠᐃⲆⵠ] = ["Lock-pick", "Allows you to unlock one chest"];
    Ft[_r.ⲆⵠᐃᐃΔ] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    Ft[_r.ⲆᐃⲆᐃⵠ] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    Ft[_r.ⵠΔᐃᐃᐃ] = ["Sign", "Leave a message to others", "Durability: 200"];
    Ft[_r.ⲆᐃⵠΔΔ] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    Ft[_r.ⲆⵠⲆⵠⵠ] = ["Well", "Allows bottle filling", "Durability: 1000"];
    Ft[_r.ⲆⲆⲆⲆⵠ] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    Ft[_r.ΔᐃⵠⲆⲆ] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    Ft[_r.ᐃᐃᐃᐃᐃ] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    Ft[_r.ⵠᐃⲆᐃⵠ] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    Ft[_r.ᐃΔⵠⵠΔ] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    Ft[_r.ⵠⵠΔⵠⲆ] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    Ft[_r.ⲆᐃⲆΔΔ] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    Ft[_r.Ⲇᐃⵠᐃⵠ] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    Ft[_r.ⲆⵠᐃΔΔ] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    Ft[_r.ᐃⲆⵠᐃᐃ] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    Ft[_r.ΔⵠⵠⲆᐃ] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    Ft[_r.ⵠΔᐃⲆΔ] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    Ft[_r.ᐃΔⵠⵠⵠ] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    Ft[_r.ⵠΔᐃΔΔ] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    Ft[_r.Δⵠᐃⵠᐃ] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    Ft[_r.ⲆᐃΔᐃⵠ] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    Ft[_r.ⵠΔⲆⲆΔ] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    Ft[_r.Δᐃᐃᐃᐃ] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    Ft[_r.ⲆⲆⵠⵠᐃ] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    Ft[ΔΔᐃ.ⵠⵠΔⵠΔⲆᐃ] = "You cannot join this server";
    Ft[ΔΔᐃ.ⵠⵠᐃⲆⲆᐃⲆ] = "Kicked: ";
    Ft[ΔΔᐃ.ⵠᐃΔⲆⲆⲆⲆ] = "Your key is already used by someone else";
    Ft[ΔΔᐃ.ⲆᐃΔⲆⲆᐃⲆ] = "Your key is wrong";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆᐃᐃᐃ] = "You have an old version, you need to clear your cache";
    Ft[ΔΔᐃ.ᐃⵠᐃⵠⲆⵠⲆ] = "Your client version is too recent for this server. The server is being updated";
    Ft[ΔΔᐃ.ᐃⲆΔΔΔⵠⵠ] = "Wrong password! To enter a password: https://starve.io/?password=...";
    Ft[ΔΔᐃ.ΔⲆᐃΔΔΔⵠ] = "There are no more new resources";
    Ft[ΔΔᐃ.ⲆΔⲆᐃᐃⵠᐃ] = "You survived 1 day";
    Ft[ΔΔᐃ.ⵠΔᐃΔᐃⵠΔ] = "You survived ";
    Ft[ΔΔᐃ.ᐃⵠⲆⲆᐃΔⵠ] = " days";
    Ft[ΔΔᐃ.ⲆᐃΔⲆᐃᐃᐃ] = "You are dead ;-;";
    Ft[ΔΔᐃ.ⲆΔΔⵠᐃⲆΔ] = "Server cannot find spawn location! Spam the play button!";
    Ft[ΔΔᐃ.ⵠⵠⲆᐃᐃΔΔ] = "Server is full! Spam the play button!";
    Ft[ΔΔᐃ.EMPTY] = "Resource is empty";
    Ft[ΔΔᐃ.ⵠⲆᐃⲆⵠᐃⵠ] = "Inventory is full (right-click to empty items)";
    Ft[ΔΔᐃ.ⲆᐃᐃⲆᐃᐃⲆ] = " is dead";
    Ft[ΔΔᐃ.ⲆᐃⲆⵠⲆᐃⲆ] = "This is not the right tool";
    Ft[ΔΔᐃ.ΔⵠⵠⲆᐃᐃⵠ] = "You joined a team";
    Ft[ΔΔᐃ.ᐃⵠᐃᐃᐃⲆΔ] = "You are dead";
    Ft[ΔΔᐃ.ⲆᐃⵠΔᐃᐃⲆ] = " joined the team";
    Ft[ΔΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "Your team was destroyed";
    Ft[ΔΔᐃ.ⵠⲆⲆΔᐃᐃΔ] = "You left the team";
    Ft[ΔΔᐃ.ᐃⵠⲆᐃᐃᐃᐃ] = " left the team";
    Ft[ΔΔᐃ.ΔᐃⵠΔⵠ] = "Someone stole your token :>";
    Ft[ΔΔᐃ.ᐃⵠⵠⲆᐃᐃΔ] = "Choose a server";
    Ft[ΔΔᐃ.ᐃᐃⲆⲆⲆ] = "players";
    Ft[ΔΔᐃ.ⵠᐃΔⲆᐃⲆᐃ] = "total players";
    Ft[ΔΔᐃ.ᐃᐃⵠⵠⵠᐃΔ] = "players on this mode";
    Ft[ΔΔᐃ.ⲆⲆⵠᐃⵠⵠⵠ] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    Ht[Eh] = ["You were killed for no reason"];
    Ht[1] = ["You starved to death, as the name of the game implies"];
    Ht[ih] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    Ht[Hk] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    Ht[qg] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    Ht[ll] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    Ht[qq] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    Ht[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    Ht[Iq] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    Ht[ns] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    Ht[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    Ht[vh] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    Ht[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    Ht[Lg] = ["You died of thirst. Better drink your own piss."];
    Ht[Sq] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    Ht[og] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    Ht[ct] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    Ht[17] = ["Your skin's falling apart, the sun killed you."];
    Ht[18] = ["Garlic stored in your pockets boiled your brain."];
    Ht[Qs] = ["As a vampire, don't stand near the garlic cloves."];
    Ht[20] = ["You ate garlic as a vampire, what did you expect?"];
    Ht[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const et = tl;
  function ft(a, b) {
    Di(Mw, a, b);
    return ~(Nw[0] & 35256) & Nw[Hi] | ~(Nw[0] & 35256) & 35256;
  }
  function gt() {
    Ft[_r.ⵠᐃΔⵠΔ] = ["You feel a great power emanating from this orb"];
    Ht[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ft[_r.ⲆⵠᐃΔᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ft[ΔΔᐃ.ⲆΔⵠⵠⲆⲆΔ] = " BACK TO THE GAME";
    Ft[ΔΔᐃ.ⵠⲆⵠⵠⵠᐃⲆ] = " Share on Twitter";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆΔᐃᐃ] = " Share on Facebook";
    Ft[ΔΔᐃ.ΔΔⲆⲆⵠⲆΔ] = "You can buy items on the shop in the next game with your points";
    Ft[ΔΔᐃ.POINTS] = "points";
    Ft[ΔΔᐃ.ⵠΔΔᐃᐃⲆⲆ] = "Score";
    Ft[ΔΔᐃ.ⲆⵠⲆΔⲆⲆᐃ] = "Kill";
    Ft[ΔΔᐃ.ⵠⲆΔⵠΔⵠⲆ] = "Days survived";
    Ft[ΔΔᐃ.ⵠⲆΔᐃⵠΔⲆ] = Ⲇ[mk];
    Ft[ΔΔᐃ.ⵠⲆᐃᐃᐃΔⵠ] = "Building method: Grid. Press G to change";
    Ft[_r.ⵠⲆⵠᐃᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ft[_r.Ⲇᐃᐃᐃᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ft[_r.ⲆⲆΔΔⵠ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", Ⲇ[so], "Players Defense: 4", "Animals Defense: 13"];
    Ft[_r.ΔⲆⵠΔΔ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = Ⲇ[us];
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById(Ⲇ[al]).innerHTML = " After 1 day, survive in winter";
    for (var a = Kh; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ft[_r.ΔᐃΔΔΔ] = ["Рука"];
    Ft[_r.ᐃᐃΔΔⵠ] = ["Земля", "Грязно!"];
    Ft[_r.ⲆⲆΔⲆᐃ] = ["Песок", "Он в моих глазах!"];
    Ft[_r.ⵠᐃⵠⵠ] = ["Дерево", "Постоянно нужно больше!"];
    Ft[_r.ᐃΔⵠⲆ] = ["Камень", "Твердый"];
    Ft[_r.ᐃⲆⵠᐃ] = ["Золото", "Будьте щедры, давайте его другим"];
    Ft[_r.ᐃⲆΔⵠ] = ["Алмаз", "Что вы создадите с помощью него?"];
    Ft[_r.Ⲇⵠⵠⵠ] = ["Аметист", "Он сиреневый, как Lapa"];
    Ft[_r.ᐃⵠᐃⵠᐃ] = ["Мука", "Используется в готовке"];
    Ft[_r.ⲆᐃᐃⵠΔ] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    Ft[_r.ⵠᐃⲆⲆᐃ] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    Ft[_r.ⵠⵠᐃᐃⵠ] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    Ft[_r.ΔΔⵠⵠⲆ] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    Ft[_r.ΔΔᐃⵠⲆ] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    Ft[_r.ⵠⲆΔⲆᐃ] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    Ft[_r.ⲆⵠΔⲆΔ] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    Ft[_r.ⲆⲆΔⵠⵠ] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    Ft[_r.ⲆⵠⲆⲆΔ] = ["Конфеты", "Только для детей!", "Еда: 20"];
    Ft[_r.ᐃΔᐃⵠⵠ] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    Ft[_r.ⵠᐃΔⲆⲆ] = ["Гирлянда", "Прекрасная декорация для крыши"];
    Ft[_r.ⵠᐃΔⲆᐃ] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Ft[_r.ⵠᐃⲆⲆⲆ] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    Ft[_r.ⲆΔᐃΔΔ] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Ft[_r.ⲆΔΔᐃⵠ] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    Ft[_r.ᐃⵠᐃᐃⵠ] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Ft[_r.ⵠᐃⵠΔⵠ] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    Ft[_r.ⲆⲆΔⲆⵠ] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Ft[_r.ⲆᐃΔᐃΔ] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    Ft[_r.ᐃⲆⲆᐃΔ] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    Ft[_r.ᐃⲆᐃᐃΔ] = ["Колючий Куст", "Это больно!"];
    Ft[_r.ΔΔΔⵠⵠ] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    Ft[_r.ᐃΔΔΔⲆ] = ["Лёд", "Используется для изготовления тортов и воды"];
    Ft[_r.ᐃⵠᐃΔⵠ] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    Ft[_r.ⲆⵠⵠΔᐃ] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    Ft[_r.ⵠⵠΔⵠΔ] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    Ft[_r.ᐃΔΔⲆΔ] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    Ft[_r.ⵠⲆΔᐃᐃ] = ["Чёрная Шкура", "Вы готовы делать зло."];
    Ft[_r.ⲆΔΔᐃᐃ] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    Ft[_r.ⵠᐃΔⲆⵠ] = ["Чешуя", "Она пахнет рыбой!"];
    Ft[_r.ΔᐃΔⲆᐃ] = ["Шкура Кракена", "Вы не испугались?"];
    Ft[_r.ΔᐃᐃⲆⲆ] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    Ft[_r.ᐃΔΔⵠΔ] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    Ft[_r.ⵠⲆΔⵠᐃ] = ["Верстак", "Необходим для создания многих предметов"];
    Ft[_r.ᐃΔⵠᐃⲆ] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    Ft[_r.ⲆⲆⲆᐃⵠ] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    Ft[_r.ᐃⲆⲆⲆⲆ] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    Ft[_r.ΔⵠᐃΔᐃ] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    Ft[_r.ᐃᐃⲆΔⲆ] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    Ft[_r.ⵠΔΔΔΔ] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    Ft[_r.ᐃΔⲆᐃΔ] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    Ft[_r.ⵠΔᐃᐃⵠ] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    Ft[_r.ΔⲆᐃⵠΔ] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    Ft[_r.ⵠᐃᐃΔⵠ] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    Ft[_r.ⲆⲆΔᐃᐃ] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    Ft[_r.ⲆΔⲆⲆⵠ] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    Ft[_r.ⲆⵠⵠⲆⲆ] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    Ft[_r.ⵠᐃⲆΔΔ] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    Ft[_r.ᐃⲆⵠΔⲆ] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    Ft[_r.ΔⲆⲆⵠⲆ] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", Ⲇ[nq]];
    Ft[_r.ⲆᐃΔⲆΔ] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    Ft[_r.ⲆⲆⵠⲆⲆ] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    Ft[_r.ⵠΔΔΔⵠ] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    Ft[_r.ᐃⵠⵠⵠᐃ] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    Ft[_r.ⵠⵠᐃᐃⲆ] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    Ft[_r.ᐃᐃΔⲆⲆ] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    Ft[_r.ⵠΔᐃⵠᐃ] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    Ft[_r.ⵠᐃᐃⵠΔ] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    Ft[_r.ᐃᐃᐃᐃⲆ] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    Ft[_r.ᐃΔⵠⲆᐃ] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    Ft[_r.ᐃΔΔΔΔ] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    Ft[_r.ⲆΔΔⵠⵠ] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", Ⲇ[Ks]];
    Ft[_r.ⵠᐃⵠᐃΔ] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    Ft[_r.ⵠᐃⲆⲆⵠ] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    Ft[_r.ᐃᐃⲆⵠⵠ] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    Ft[_r.Δᐃᐃⵠᐃ] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    Ft[_r.ΔᐃΔⲆⲆ] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    Ft[_r.ᐃⲆⲆⵠᐃ] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    Ft[_r.ⵠⲆⲆⵠⵠ] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    Ft[_r.ᐃⵠΔᐃΔ] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    Ft[_r.ⲆᐃᐃΔᐃ] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    Ft[_r.ᐃᐃⵠⲆⲆ] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    Ft[_r.ΔⲆΔⲆⲆ] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    Ft[_r.ⲆΔⵠⵠᐃ] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Ft[_r.ᐃⲆᐃⲆᐃ] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    Ft[_r.ᐃⵠⵠⵠΔ] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    Ft[_r.ᐃⲆⲆΔΔ] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    Ft[_r.ΔᐃⲆⵠⵠ] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Ft[_r.ΔΔᐃⲆΔ] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Ft[_r.ΔᐃⵠⲆΔ] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Ft[_r.ᐃⲆⵠⲆⲆ] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    Ft[_r.ᐃⵠⵠⲆΔ] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    Ft[_r.ᐃⲆΔᐃᐃ] = ["Шар Дракона", "Даётся за квест"];
    Ft[_r.ⵠⵠⲆⵠⲆ] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    Ft[_r.ΔᐃΔᐃⵠ] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    Ft[_r.ⵠⲆⲆΔᐃ] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    Ft[_r.ΔΔⲆⲆᐃ] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    Ft[_r.ᐃⲆΔⵠⵠ] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    Ft[_r.ⵠᐃⵠⵠΔ] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    Ft[_r.ⲆⲆᐃᐃΔ] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    Ft[_r.ΔΔᐃΔΔ] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    Ft[_r.ⲆΔⵠΔᐃ] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    Ft[_r.ΔᐃᐃⵠΔ] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    Ft[_r.ᐃⲆⵠΔᐃ] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    Ft[_r.ⲆΔᐃΔⲆ] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    Ft[_r.ᐃᐃΔⵠΔ] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    Ft[_r.ⵠⲆᐃᐃ] = ["Рюкзак", "Больше места для ваших предметов!"];
    Ft[_r.ⵠΔΔΔⲆ] = ["Бумага", "Используется при создании книги"];
    Ft[_r.ᐃⵠΔΔⲆ] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    Ft[_r.ᐃΔᐃⲆᐃ] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    Ft[_r.ⵠⵠⲆⵠᐃ] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    Ft[_r.ᐃⵠᐃⲆⵠ] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    Ft[_r.ⲆⵠᐃᐃΔ] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    Ft[_r.ⲆᐃⲆᐃⵠ] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    Ft[_r.ⵠΔᐃᐃᐃ] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    Ft[_r.ⲆᐃⵠΔΔ] = ["Крыша", "Немного скрывает вас и согревает!"];
    Ft[_r.ⲆⵠⲆⵠⵠ] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    Ft[_r.ⲆⲆⲆⲆⵠ] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    Ft[_r.ΔᐃⵠⲆⲆ] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    Ft[_r.ᐃᐃᐃᐃᐃ] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    Ft[_r.ⵠᐃⲆᐃⵠ] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    Ft[_r.ᐃΔⵠⵠΔ] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    Ft[_r.ⵠⵠΔⵠⲆ] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    Ft[_r.ⲆᐃⲆΔΔ] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    Ft[_r.Ⲇᐃⵠᐃⵠ] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    Ft[_r.ⲆⵠᐃΔΔ] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    Ft[_r.ᐃⲆⵠᐃᐃ] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    Ft[_r.ΔⵠⵠⲆᐃ] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    Ft[_r.ⵠΔᐃⲆΔ] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    Ft[_r.ᐃΔⵠⵠⵠ] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    Ft[_r.ⵠΔᐃΔΔ] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    Ft[_r.Δⵠᐃⵠᐃ] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    Ft[_r.ⲆᐃΔᐃⵠ] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    Ft[_r.ⵠΔⲆⲆΔ] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", Ⲇ[dh]];
    Ft[_r.Δᐃᐃᐃᐃ] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    Ft[_r.ⲆⲆⵠⵠᐃ] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    Ft[ΔΔᐃ.ⵠⵠΔⵠΔⲆᐃ] = "Вы не можете зайти на этот сервер";
    Ft[ΔΔᐃ.ⵠⵠᐃⲆⲆᐃⲆ] = "Выгнаны: ";
    Ft[ΔΔᐃ.ⵠᐃΔⲆⲆⲆⲆ] = "Ваш ключ уже используется кем-то";
    Ft[ΔΔᐃ.ⲆᐃΔⲆⲆᐃⲆ] = "Ваш ключ неправильный";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆᐃᐃᐃ] = "У вас старая версия, вам нужно очистить кеш";
    Ft[ΔΔᐃ.ΔⲆᐃΔΔΔⵠ] = "Ресурсов больше нет";
    Ft[ΔΔᐃ.ⲆΔⲆᐃᐃⵠᐃ] = "Вы выжили 1 день";
    Ft[ΔΔᐃ.ⵠΔᐃΔᐃⵠΔ] = "Вы выжили ";
    Ft[ΔΔᐃ.ᐃⵠⲆⲆᐃΔⵠ] = " дней";
    Ft[ΔΔᐃ.ⲆᐃΔⲆᐃᐃᐃ] = "Вы умерли ;-;";
    Ft[ΔΔᐃ.ⲆΔΔⵠᐃⲆΔ] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    Ft[ΔΔᐃ.ⵠⵠⲆᐃᐃΔΔ] = "Сервер заполнен! Спамьте кнопку играть!";
    Ft[ΔΔᐃ.EMPTY] = "Ресурсы закончились";
    Ft[ΔΔᐃ.ⵠⲆᐃⲆⵠᐃⵠ] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    Ft[ΔΔᐃ.ⲆᐃᐃⲆᐃᐃⲆ] = " умер";
    Ft[ΔΔᐃ.ⲆᐃⲆⵠⲆᐃⲆ] = "Это не тот инструмент";
    Ft[ΔΔᐃ.ΔⵠⵠⲆᐃᐃⵠ] = "Вы вошли в команду";
    Ft[ΔΔᐃ.ᐃⵠᐃᐃᐃⲆΔ] = "Вы умерли";
    Ft[ΔΔᐃ.ⲆᐃⵠΔᐃᐃⲆ] = " вошёл в команду";
    Ft[ΔΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "Ваша команда была разрушена";
    Ft[ΔΔᐃ.ⵠⲆⲆΔᐃᐃΔ] = "Вы покинули команду";
    Ft[ΔΔᐃ.ᐃⵠⲆᐃᐃᐃᐃ] = " покинул команду";
    Ft[ΔΔᐃ.ΔᐃⵠΔⵠ] = "Кто-то использует ваш токен :>";
    Ft[ΔΔᐃ.ᐃⵠⵠⲆᐃᐃΔ] = "Выберите сервер";
    Ft[ΔΔᐃ.ᐃᐃⲆⲆⲆ] = "игроков";
    Ft[ΔΔᐃ.ⵠᐃΔⲆᐃⲆᐃ] = "игроков всего";
    Ft[ΔΔᐃ.ᐃᐃⵠⵠⵠᐃΔ] = "игроков в этом режиме";
    Ft[ΔΔᐃ.ⲆⲆⵠᐃⵠⵠⵠ] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    Ht[0] = ["Вы были убиты без причины"];
    Ht[hs] = ["Вы умерли от голода, как название игры подразумевает это"];
    Ht[ss] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    Ht[Tr] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    Ht[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    Ht[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    Ht[Ck] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    Ht[ia] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    Ht[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    Ht[Ag] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    Ht[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    Ht[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    Ht[gr] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    Ht[ja] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    Ht[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    Ht[bl] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    Ht[Fl] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    Ht[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    Ht[ws] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    Ht[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    Ht[Ok] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    Ht[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function ht(b, c, d, e, f, i) {
    const j = ~(b & 23002) & b | ~(b & 23002) & 23002;
    const a = f ^ 35943;
    const k = i ^ 36773;
    const h = oo(j, c ^ 21973, (1013904223 + (63691 + d) * 1664525) % 4294967296, ~(e & 16720) & 16720 | ~(e & 16720) & e);
    const l = xa(a, k, j);
    return (16 << ((h ^ l) >> 8 & 255)) + (24 << ((h ^ l) >> 16 & 255)) + (0 << ((h ^ l) >> Kh & 255)) + (8 << ((h ^ l) >> 24 & 255));
  }
  function it(b, c, d, e, f, i) {
    const j = (8 << (b >> 16 & 255)) + (0 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (24 << (b & fa));
    const a = (16 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (8 << (c & 255)) + (24 << (c >> 24 & 255));
    const k = (1013904223 + (63114 + d) * 1664525) % 4294967296;
    const h = function (b, c, d, e, f, i) {
      const j = ((63022 + b) * 1103515245 + 12345) % 2147483648;
      const a = (c | 47370) & ~(c & 47370);
      const k = (e | 22154) & ~(e & 22154);
      const h = ~(f & 26219) & f | ~(f & 26219) & 26219;
      const l = i ^ 52709;
      const g = _s(j, a, ~(d & 56031) & d | ~(d & 56031) & 56031);
      Ma(k, h, l, j, a);
      return ~(g & 56525) & 56525 | ~(g & 56525) & g;
    }(j, a, k, ~(e & 25711) & (e | 25711), ~(f & 26417) & f | ~(f & 26417) & 26417, (i + 38278) % 65476);
    const l = pt(j, a, k);
    return (mk + (32726 + (h ^ l)) * 22695477) % 4294967296;
  }
  const kt = Dq;
  function lt() {
    Ft[_r.ⵠᐃΔⵠΔ] = ["You feel a great power emanating from this orb"];
    Ht[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ft[_r.ⲆⵠᐃΔᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ft[ΔΔᐃ.ⲆΔⵠⵠⲆⲆΔ] = " BACK TO THE GAME";
    Ft[ΔΔᐃ.ⵠⲆⵠⵠⵠᐃⲆ] = " Share on Twitter";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆΔᐃᐃ] = " Share on Facebook";
    Ft[ΔΔᐃ.ΔΔⲆⲆⵠⲆΔ] = "You can buy items on the shop in the next game with your points";
    Ft[ΔΔᐃ.POINTS] = "points";
    Ft[ΔΔᐃ.ⵠΔΔᐃᐃⲆⲆ] = "Score";
    Ft[ΔΔᐃ.ⲆⵠⲆΔⲆⲆᐃ] = "Kill";
    Ft[ΔΔᐃ.ⵠⲆΔⵠΔⵠⲆ] = "Days survived";
    Ft[ΔΔᐃ.ⵠⲆΔᐃⵠΔⲆ] = "Building method: Free. Press G to change";
    Ft[ΔΔᐃ.ⵠⲆᐃᐃᐃΔⵠ] = "Building method: Grid. Press G to change";
    Ft[_r.ⵠⲆⵠᐃᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ft[_r.Ⲇᐃᐃᐃᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ft[_r.ⲆⲆΔΔⵠ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ft[_r.ΔⲆⵠΔΔ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById(Ⲇ[to]).innerHTML = " After 1 day, survive in winter";
    for (var a = 0; Js > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ft[_r.ΔᐃΔΔΔ] = ["mão"];
    Ft[_r.ᐃᐃΔΔⵠ] = ["terra", "está sujo!"];
    Ft[_r.ⲆⲆΔⲆᐃ] = ["areia", "entrou nos meus olhos!"];
    Ft[_r.ⵠᐃⵠⵠ] = ["madeira", "você não pode pegar o suficiente disso!"];
    Ft[_r.ᐃΔⵠⲆ] = ["pedra", "também chamado rocha"];
    Ft[_r.ᐃⲆⵠᐃ] = ["ouro", "seja generoso, dê para outros"];
    Ft[_r.ᐃⲆΔⵠ] = ["diamante", "o que você irá fazer com isso?"];
    Ft[_r.Ⲇⵠⵠⵠ] = ["ametista", "é mauve como lapa"];
    Ft[_r.ᐃⵠᐃⵠᐃ] = ["farinha", "usada na cozinha"];
    Ft[_r.ⲆᐃᐃⵠΔ] = ["biscoito", "biscoito da vovó", "comida: 50"];
    Ft[_r.ⵠᐃⲆⲆᐃ] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    Ft[_r.ⵠⵠᐃᐃⵠ] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    Ft[_r.ΔΔⵠⵠⲆ] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    Ft[_r.ΔΔᐃⵠⲆ] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    Ft[_r.ⵠⲆΔⲆᐃ] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    Ft[_r.ⲆⵠΔⲆΔ] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    Ft[_r.ⲆⲆΔⵠⵠ] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    Ft[_r.ⲆⵠⲆⲆΔ] = ["doces", "apenas para crianças!", "comida: 100"];
    Ft[_r.ᐃΔᐃⵠⵠ] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    Ft[_r.ⵠᐃΔⲆⲆ] = ["pisca-pisca", "decoração perfeita de telhado"];
    Ft[_r.ⵠᐃΔⲆᐃ] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Ft[_r.ⵠᐃⲆⲆⲆ] = ["berry", "Berry saborosa!", "comida: 10"];
    Ft[_r.ⲆΔᐃΔΔ] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    Ft[_r.ⲆΔΔᐃⵠ] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    Ft[_r.ᐃⵠᐃᐃⵠ] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    Ft[_r.ⵠᐃⵠΔⵠ] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    Ft[_r.ⲆⲆΔⲆⵠ] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Ft[_r.ⲆᐃΔᐃΔ] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    Ft[_r.ᐃⲆⲆᐃΔ] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    Ft[_r.ᐃⲆᐃᐃΔ] = ["mato de espinhos", "pica!"];
    Ft[_r.ΔΔΔⵠⵠ] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    Ft[_r.ᐃΔΔΔⲆ] = ["gelo", "útil para fazer bolo e água"];
    Ft[_r.ᐃⵠᐃΔⵠ] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    Ft[_r.ⲆⵠⵠΔᐃ] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    Ft[_r.ⵠⵠΔⵠΔ] = ["pele de coelho", "o coelho era tão fofo..."];
    Ft[_r.ᐃΔΔⲆΔ] = ["pele pura", "você é uma fábrica de pão"];
    Ft[_r.ⵠⲆΔᐃᐃ] = ["pele negra", "você está pronto para fazer algo errado"];
    Ft[_r.ⲆΔΔᐃᐃ] = ["pele de inverno", "ele só queria um abraço"];
    Ft[_r.ⵠᐃΔⲆⵠ] = ["escala", "é pequeno como peixe!"];
    Ft[_r.ΔᐃΔⲆᐃ] = ["pele do kraken", "você não está com medo?"];
    Ft[_r.ΔᐃᐃⲆⲆ] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    Ft[_r.ᐃΔΔⵠΔ] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    Ft[_r.ⵠⲆΔⵠᐃ] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    Ft[_r.ᐃΔⵠᐃⲆ] = ["linha", "usada para fazer chapéus e mochila"];
    Ft[_r.ⲆⲆⲆᐃⵠ] = ["linha de diamante", "usada para fazer chapéus especiais"];
    Ft[_r.ᐃⲆⲆⲆⲆ] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    Ft[_r.ΔⵠᐃΔᐃ] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    Ft[_r.ᐃᐃⲆΔⲆ] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    Ft[_r.ⵠΔΔΔΔ] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    Ft[_r.ᐃΔⲆᐃΔ] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    Ft[_r.ⵠΔᐃᐃⵠ] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    Ft[_r.ΔⲆᐃⵠΔ] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    Ft[_r.ⵠᐃᐃΔⵠ] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    Ft[_r.ⲆⲆΔᐃᐃ] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    Ft[_r.ⲆΔⲆⲆⵠ] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    Ft[_r.ⲆᐃΔⵠΔΔᐃⲆⲆ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    Ft[_r.ⵠᐃⲆΔΔ] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    Ft[_r.ᐃⲆⵠΔⲆ] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    Ft[_r.ΔⲆⲆⵠⲆ] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    Ft[_r.ⲆᐃΔⲆΔ] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    Ft[_r.ⲆⲆⵠⲆⲆ] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    Ft[_r.ⵠΔΔΔⵠ] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    Ft[_r.ᐃⵠⵠⵠᐃ] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    Ft[_r.ⵠⵠᐃᐃⲆ] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    Ft[_r.ᐃᐃΔⲆⲆ] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    Ft[_r.ⵠΔᐃⵠᐃ] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    Ft[_r.ⵠᐃᐃⵠΔ] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    Ft[_r.ᐃᐃᐃᐃⲆ] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    Ft[_r.ᐃΔⵠⲆᐃ] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    Ft[_r.ᐃΔΔΔΔ] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    Ft[_r.ⲆΔΔⵠⵠ] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    Ft[_r.ⵠᐃⵠᐃΔ] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    Ft[_r.ⵠᐃⲆⲆⵠ] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    Ft[_r.ᐃᐃⲆⵠⵠ] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    Ft[_r.Δᐃᐃⵠᐃ] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    Ft[_r.ΔᐃΔⲆⲆ] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    Ft[_r.ᐃⲆⲆⵠᐃ] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    Ft[_r.ⵠⲆⲆⵠⵠ] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    Ft[_r.ᐃⵠΔᐃΔ] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    Ft[_r.ⲆᐃᐃΔᐃ] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    Ft[_r.ᐃᐃⵠⲆⲆ] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    Ft[_r.ΔⲆΔⲆⲆ] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    Ft[_r.ⲆΔⵠⵠᐃ] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    Ft[_r.ᐃⲆᐃⲆᐃ] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    Ft[_r.ᐃⵠⵠⵠΔ] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    Ft[_r.ᐃⲆⲆΔΔ] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    Ft[_r.ΔᐃⲆⵠⵠ] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Ft[_r.ΔΔᐃⲆΔ] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    Ft[_r.ΔᐃⵠⲆΔ] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Ft[_r.ᐃⲆⵠⲆⲆ] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    Ft[_r.ᐃⵠⵠⲆΔ] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    Ft[_r.ᐃⲆΔᐃᐃ] = ["esfera do dragão", "dado na questt"];
    Ft[_r.ⵠⵠⲆⵠⲆ] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    Ft[_r.ΔᐃΔᐃⵠ] = ["pedra verde", "você não vai trapacear, promete?"];
    Ft[_r.ⵠⲆⲆΔᐃ] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    Ft[_r.ΔΔⲆⲆᐃ] = ["pedra azul", "para pessoas muito gentis"];
    Ft[_r.ᐃⲆΔⵠⵠ] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    Ft[_r.ⵠᐃⵠⵠΔ] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    Ft[_r.ⲆⲆᐃᐃΔ] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    Ft[_r.ΔΔᐃΔΔ] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    Ft[_r.ⲆΔⵠΔᐃ] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    Ft[_r.ΔᐃᐃⵠΔ] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    Ft[_r.ᐃⲆⵠΔᐃ] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    Ft[_r.ⲆΔᐃΔⲆ] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    Ft[_r.ᐃᐃΔⵠΔ] = ["regador", "permite regar as plantas", "dano: 1"];
    Ft[_r.ⵠⲆᐃᐃ] = ["mochila", "mais espaço para seus itens!"];
    Ft[_r.ⵠΔΔΔⲆ] = ["papel", "usado para fazer o livro"];
    Ft[_r.ᐃⵠΔΔⲆ] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    Ft[_r.ᐃΔᐃⲆᐃ] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    Ft[_r.ⵠⵠⲆⵠᐃ] = ["fechadura", "permite você trancar seu baú"];
    Ft[_r.ᐃⵠᐃⲆⵠ] = ["chave", "permite destrancar um baú"];
    Ft[_r.ⲆⵠᐃᐃΔ] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    Ft[_r.ⲆᐃⲆᐃⵠ] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    Ft[_r.ⵠΔᐃᐃᐃ] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    Ft[_r.ⲆᐃⵠΔΔ] = ["telhado", "esconde você um pouco e te esquenta!"];
    Ft[_r.ⲆⵠⲆⵠⵠ] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    Ft[_r.ⲆⲆⲆⲆⵠ] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    Ft[_r.ΔᐃⵠⲆⲆ] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    Ft[_r.ᐃᐃᐃᐃᐃ] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    Ft[_r.ⵠᐃⲆᐃⵠ] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    Ft[_r.ᐃΔⵠⵠΔ] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    Ft[_r.ⵠⵠΔⵠⲆ] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    Ft[_r.ⲆᐃⲆΔΔ] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    Ft[_r.Ⲇᐃⵠᐃⵠ] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    Ft[_r.ⲆⵠᐃΔΔ] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    Ft[_r.ᐃⲆⵠᐃᐃ] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    Ft[_r.ΔⵠⵠⲆᐃ] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    Ft[_r.ⵠΔᐃⲆΔ] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    Ft[_r.ᐃΔⵠⵠⵠ] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    Ft[_r.ⵠΔᐃΔΔ] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    Ft[_r.Δⵠᐃⵠᐃ] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    Ft[_r.ⲆᐃΔᐃⵠ] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    Ft[_r.ⵠΔⲆⲆΔ] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Ft[_r.Δᐃᐃᐃᐃ] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Ft[_r.ⲆⲆⵠⵠᐃ] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    Ft[ΔΔᐃ.ⵠⵠΔⵠΔⲆᐃ] = "você não pode entrar no servidor";
    Ft[ΔΔᐃ.ⵠⵠᐃⲆⲆᐃⲆ] = "kickado: ";
    Ft[ΔΔᐃ.ⵠᐃΔⲆⲆⲆⲆ] = "sua chave está em uso por outra pessoa";
    Ft[ΔΔᐃ.ⲆᐃΔⲆⲆᐃⲆ] = "sua chave está errada";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆᐃᐃᐃ] = "você tem uma versão velha, limpe seu cache";
    Ft[ΔΔᐃ.ΔⲆᐃΔΔΔⵠ] = "não tem mais recursos";
    Ft[ΔΔᐃ.ⲆΔⲆᐃᐃⵠᐃ] = "você sobreviveu 1 dia";
    Ft[ΔΔᐃ.ⵠΔᐃΔᐃⵠΔ] = "você sobreviveu ";
    Ft[ΔΔᐃ.ᐃⵠⲆⲆᐃΔⵠ] = " dias";
    Ft[ΔΔᐃ.ⲆᐃΔⲆᐃᐃᐃ] = "você está morto ;-;";
    Ft[ΔΔᐃ.ⲆΔΔⵠᐃⲆΔ] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    Ft[ΔΔᐃ.ⵠⵠⲆᐃᐃΔΔ] = "servidor está cheio! spam o botão de play!";
    Ft[ΔΔᐃ.EMPTY] = "não tem recursos";
    Ft[ΔΔᐃ.ⵠⲆᐃⲆⵠᐃⵠ] = "inventário está cheio (botão direito para deletar itens)";
    Ft[ΔΔᐃ.ⲆᐃᐃⲆᐃᐃⲆ] = " está morto";
    Ft[ΔΔᐃ.ⲆᐃⲆⵠⲆᐃⲆ] = "essa não é a ferramenta certa";
    Ft[ΔΔᐃ.ΔⵠⵠⲆᐃᐃⵠ] = "você entrou no time";
    Ft[ΔΔᐃ.ᐃⵠᐃᐃᐃⲆΔ] = "você está morto";
    Ft[ΔΔᐃ.ⲆᐃⵠΔᐃᐃⲆ] = "entrou no time";
    Ft[ΔΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "seu time foi destruido";
    Ft[ΔΔᐃ.ⵠⲆⲆΔᐃᐃΔ] = "você saiu do time";
    Ft[ΔΔᐃ.ᐃⵠⲆᐃᐃᐃᐃ] = " saiu do time";
    Ft[ΔΔᐃ.ΔᐃⵠΔⵠ] = "alguém roubou sua ficha :>";
    Ft[ΔΔᐃ.ᐃⵠⵠⲆᐃᐃΔ] = "escolha um servidor";
    Ft[ΔΔᐃ.ᐃᐃⲆⲆⲆ] = "jogadores";
    Ft[ΔΔᐃ.ⵠᐃΔⲆᐃⲆᐃ] = "jogadores totais";
    Ft[ΔΔᐃ.ᐃᐃⵠⵠⵠᐃΔ] = "jogadores nesse modo";
    Ft[ΔΔᐃ.ⲆⲆⵠᐃⵠⵠⵠ] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    Ht[wj] = ["você morreu sem motivo"];
    Ht[1] = ["você morreu de fome, como o jogo diz"];
    Ht[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    Ht[ea] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    Ht[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    Ht[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    Ht[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    Ht[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    Ht[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    Ht[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    Ht[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    Ht[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    Ht[Sj] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    Ht[bg] = ["você morreu de sede. melhor beber sua própria urina."];
    Ht[Tn] = ["você sabia que você morre afogado? agora você sabe."];
    Ht[Ts] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    Ht[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    Ht[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    Ht[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    Ht[19] = ["como vampiro, não chegue perto do alho."];
    Ht[20] = ["você comeu alho como vampiro, o que você esperava?"];
    Ht[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  function mt(a, b, c, d, e) {
    Oe(Mw, a, b, c, d, e);
    return ((205 + (Jw(Nw[Lr], Nw[ie], Nw[2], Nw[3]) ^ function (a, b, c, d) {
      Nj(Mw, a, b, c, d);
      const e = $s(Nw[Kh], Nw[1], Nw[Yg]);
      const f = bt(Nw[3], Nw[wj], Nw[rg], Nw[2], Nw[ea], Nw[Pg]);
      return ((108 + (e ^ f)) * 48271 + Rs) % 2147483647;
    }(Nw[4], Nw[zl], Nw[Ol], Nw[Gl]))) * 75 + 74) % 65537;
  }
  const nt = bl;
  const ot = kg;
  function pt(a, b, c) {
    const d = (a | 46973) & ~(a & 46973);
    const e = ~(b & 23097) & b | ~(b & 23097) & 23097;
    const f = c ^ 61143;
    return (41038 + (lf(d, e, f, d, e, f) ^ lf(d, e, f, d, e, f))) % 65297;
  }
  const qt = xg;
  function rt() {
    Ft[_r.ⵠᐃΔⵠΔ] = ["You feel a great power emanating from this orb"];
    Ht[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ft[_r.ⲆⵠᐃΔᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ft[ΔΔᐃ.ⲆΔⵠⵠⲆⲆΔ] = " BACK TO THE GAME";
    Ft[ΔΔᐃ.ⵠⲆⵠⵠⵠᐃⲆ] = " Share on Twitter";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆΔᐃᐃ] = " Share on Facebook";
    Ft[ΔΔᐃ.ΔΔⲆⲆⵠⲆΔ] = "You can buy items on the shop in the next game with your points";
    Ft[ΔΔᐃ.POINTS] = "points";
    Ft[ΔΔᐃ.ⵠΔΔᐃᐃⲆⲆ] = "Score";
    Ft[ΔΔᐃ.ⲆⵠⲆΔⲆⲆᐃ] = "Kill";
    Ft[ΔΔᐃ.ⵠⲆΔⵠΔⵠⲆ] = "Days survived";
    Ft[ΔΔᐃ.ⵠⲆΔᐃⵠΔⲆ] = Ⲇ[za];
    Ft[ΔΔᐃ.ⵠⲆᐃᐃᐃΔⵠ] = "Building method: Grid. Press G to change";
    Ft[_r.ⵠⲆⵠᐃᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ft[_r.Ⲇᐃᐃᐃᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ft[_r.ⲆⲆΔΔⵠ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ft[_r.ΔⲆⵠΔΔ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById(Ⲇ[vi]).innerHTML = " After 1 day, survive in winter";
    for (var a = mj; wk > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ft[_r.ΔᐃΔΔΔ] = ["Mano"];
    Ft[_r.ᐃᐃΔΔⵠ] = ["Tierra", "¡Tan limpia como mis manos!"];
    Ft[_r.ⲆⲆΔⲆᐃ] = ["Arena", "¡Tengo arena en mis ojos!"];
    Ft[_r.ⵠᐃⵠⵠ] = ["Madera", "¡Nunca hay suficiente!"];
    Ft[_r.ᐃΔⵠⲆ] = ["Piedra", "También llamada roca."];
    Ft[_r.ᐃⲆⵠᐃ] = ["Oro", "Sé generoso, compártelo con los otros"];
    Ft[_r.ᐃⲆΔⵠ] = ["Diamante", "¿Que vas a hacer con él?"];
    Ft[_r.Ⲇⵠⵠⵠ] = ["Amatista", "Es Mauve como Lapa"];
    Ft[_r.ᐃⵠᐃⵠᐃ] = ["Harina", "Usada para cocinar."];
    Ft[_r.ⲆᐃᐃⵠΔ] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    Ft[_r.ⵠᐃⲆⲆᐃ] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    Ft[_r.ⵠⵠᐃᐃⵠ] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    Ft[_r.ΔΔⵠⵠⲆ] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    Ft[_r.ΔΔᐃⵠⲆ] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    Ft[_r.ⵠⲆΔⲆᐃ] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    Ft[_r.ⲆⵠΔⲆΔ] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    Ft[_r.ⲆⲆΔⵠⵠ] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    Ft[_r.ⲆⵠⲆⲆΔ] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    Ft[_r.ᐃΔᐃⵠⵠ] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    Ft[_r.ⵠᐃΔⲆⲆ] = ["Guirnalda", "Perfecta para decorar el techo"];
    Ft[_r.ⵠᐃΔⲆᐃ] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Ft[_r.ⵠᐃⲆⲆⲆ] = ["Baya", "No es venenosa.", "Comida: 10"];
    Ft[_r.ⲆΔᐃΔΔ] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Ft[_r.ⲆΔΔᐃⵠ] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    Ft[_r.ᐃⵠᐃᐃⵠ] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Ft[_r.ⵠᐃⵠΔⵠ] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    Ft[_r.ⲆⲆΔⲆⵠ] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    Ft[_r.ⲆᐃΔᐃΔ] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    Ft[_r.ᐃⲆⲆᐃΔ] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    Ft[_r.ᐃⲆᐃᐃΔ] = ["Planta de Espinas", "¡Te daña!"];
    Ft[_r.ΔΔΔⵠⵠ] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    Ft[_r.ᐃΔΔΔⲆ] = ["Hielo", "Bueno para hacer tartas y agua"];
    Ft[_r.ᐃⵠᐃΔⵠ] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    Ft[_r.ⲆⵠⵠΔᐃ] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    Ft[_r.ⵠⵠΔⵠΔ] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    Ft[_r.ᐃΔΔⲆΔ] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    Ft[_r.ⵠⲆΔᐃᐃ] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    Ft[_r.ⲆΔΔᐃᐃ] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    Ft[_r.ⵠᐃΔⲆⵠ] = ["Escamas", "¡Huele a pescado!"];
    Ft[_r.ΔᐃΔⲆᐃ] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    Ft[_r.ΔᐃᐃⲆⲆ] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    Ft[_r.ᐃΔΔⵠΔ] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    Ft[_r.ⵠⲆΔⵠᐃ] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    Ft[_r.ᐃΔⵠᐃⲆ] = ["Hilo", "Usado para craftear ropa y mochila"];
    Ft[_r.ⲆⲆⲆᐃⵠ] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    Ft[_r.ᐃⲆⲆⲆⲆ] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    Ft[_r.ΔⵠᐃΔᐃ] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    Ft[_r.ᐃᐃⲆΔⲆ] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    Ft[_r.ⵠΔΔΔΔ] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    Ft[_r.ᐃΔⲆᐃΔ] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    Ft[_r.ⵠΔᐃᐃⵠ] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    Ft[_r.ΔⲆᐃⵠΔ] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    Ft[_r.ⵠᐃᐃΔⵠ] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    Ft[_r.ⲆⲆΔᐃᐃ] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    Ft[_r.ⲆΔⲆⲆⵠ] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    Ft[_r.ⲆⵠⵠⲆⲆ] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    Ft[_r.ⵠᐃⲆΔΔ] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    Ft[_r.ᐃⲆⵠΔⲆ] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    Ft[_r.ΔⲆⲆⵠⲆ] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    Ft[_r.ⲆᐃΔⲆΔ] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    Ft[_r.ⲆⲆⵠⲆⲆ] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    Ft[_r.ⵠΔΔΔⵠ] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    Ft[_r.ᐃⵠⵠⵠᐃ] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    Ft[_r.ⵠⵠᐃᐃⲆ] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    Ft[_r.ᐃᐃΔⲆⲆ] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    Ft[_r.ⵠΔᐃⵠᐃ] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    Ft[_r.ⵠᐃᐃⵠΔ] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    Ft[_r.ᐃᐃᐃᐃⲆ] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    Ft[_r.ᐃΔⵠⲆᐃ] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    Ft[_r.ᐃΔΔΔΔ] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    Ft[_r.ⲆΔΔⵠⵠ] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    Ft[_r.ⵠᐃⵠᐃΔ] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    Ft[_r.ⵠᐃⲆⲆⵠ] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    Ft[_r.ᐃᐃⲆⵠⵠ] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    Ft[_r.Δᐃᐃⵠᐃ] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    Ft[_r.ΔᐃΔⲆⲆ] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    Ft[_r.ᐃⲆⲆⵠᐃ] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    Ft[_r.ⵠⲆⲆⵠⵠ] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    Ft[_r.ᐃⵠΔᐃΔ] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    Ft[_r.ⲆᐃᐃΔᐃ] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    Ft[_r.ᐃᐃⵠⲆⲆ] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    Ft[_r.ΔⲆΔⲆⲆ] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    Ft[_r.ⲆΔⵠⵠᐃ] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    Ft[_r.ᐃⲆᐃⲆᐃ] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    Ft[_r.ᐃⵠⵠⵠΔ] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    Ft[_r.ᐃⲆⲆΔΔ] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    Ft[_r.ΔᐃⲆⵠⵠ] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    Ft[_r.ΔΔᐃⲆΔ] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    Ft[_r.ΔᐃⵠⲆΔ] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    Ft[_r.ᐃⲆⵠⲆⲆ] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    Ft[_r.ᐃⵠⵠⲆΔ] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    Ft[_r.ᐃⲆΔᐃᐃ] = ["Esfera del Dragón", "Dada en la misión"];
    Ft[_r.ⵠⵠⲆⵠⲆ] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    Ft[_r.ΔᐃΔᐃⵠ] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    Ft[_r.ⵠⲆⲆΔᐃ] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    Ft[_r.ΔΔⲆⲆᐃ] = ["Gema Azul", "Para gente muy amable"];
    Ft[_r.ᐃⲆΔⵠⵠ] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Ft[_r.ⵠᐃⵠⵠΔ] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Ft[_r.ⲆⲆᐃᐃΔ] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    Ft[_r.ΔΔᐃΔΔ] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    Ft[_r.ⲆΔⵠΔᐃ] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    Ft[_r.ΔᐃᐃⵠΔ] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    Ft[_r.ᐃⲆⵠΔᐃ] = ["Botella Vacia", "La puedes llenar de agua"];
    Ft[_r.ⲆΔᐃΔⲆ] = ["Regadera Vacía", "La tienes que llenar de agua"];
    Ft[_r.ᐃᐃΔⵠΔ] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    Ft[_r.ⵠⲆᐃᐃ] = ["Mochila", "¡Mas espacio para tus cosas!"];
    Ft[_r.ⵠΔΔΔⲆ] = ["Hoja", "Usada para hacer un libro"];
    Ft[_r.ᐃⵠΔΔⲆ] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    Ft[_r.ᐃΔᐃⲆᐃ] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    Ft[_r.ⵠⵠⲆⵠᐃ] = ["Cerradura", "Te permite cerrar tu cofre"];
    Ft[_r.ᐃⵠᐃⲆⵠ] = ["Llave", "Te permite abrir un cofre cerrado"];
    Ft[_r.ⲆⵠᐃᐃΔ] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    Ft[_r.ⲆᐃⲆᐃⵠ] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    Ft[_r.ⵠΔᐃᐃᐃ] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    Ft[_r.ⲆᐃⵠΔΔ] = ["Techo", "Te esconde un poco y te protege del frío"];
    Ft[_r.ⲆⵠⲆⵠⵠ] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    Ft[_r.ⲆⲆⲆⲆⵠ] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    Ft[_r.ΔᐃⵠⲆⲆ] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    Ft[_r.ᐃᐃᐃᐃᐃ] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    Ft[_r.ⵠᐃⲆᐃⵠ] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    Ft[_r.ᐃΔⵠⵠΔ] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    Ft[_r.ⵠⵠΔⵠⲆ] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    Ft[_r.ⲆᐃⲆΔΔ] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    Ft[_r.Ⲇᐃⵠᐃⵠ] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    Ft[_r.ⲆⵠᐃΔΔ] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    Ft[_r.ᐃⲆⵠᐃᐃ] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    Ft[_r.ΔⵠⵠⲆᐃ] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    Ft[_r.ⵠΔᐃⲆΔ] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    Ft[_r.ᐃΔⵠⵠⵠ] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    Ft[_r.ⵠΔᐃΔΔ] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    Ft[_r.Δⵠᐃⵠᐃ] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    Ft[_r.ⲆᐃΔᐃⵠ] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    Ft[_r.ⵠΔⲆⲆΔ] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Ft[_r.Δᐃᐃᐃᐃ] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Ft[_r.ⲆⲆⵠⵠᐃ] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    Ft[ΔΔᐃ.ⵠⵠΔⵠΔⲆᐃ] = "No puedes unirte a este servidor";
    Ft[ΔΔᐃ.ⵠⵠᐃⲆⲆᐃⲆ] = "Expulsado: ";
    Ft[ΔΔᐃ.ⵠᐃΔⲆⲆⲆⲆ] = "Tu llave ya está usada";
    Ft[ΔΔᐃ.ⲆᐃΔⲆⲆᐃⲆ] = "Tu llave está mal";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆᐃᐃᐃ] = "Tienes una versión antigua, limpia tu cache";
    Ft[ΔΔᐃ.ΔⲆᐃΔΔΔⵠ] = "No hay mas recursos";
    Ft[ΔΔᐃ.ⲆΔⲆᐃᐃⵠᐃ] = "Has sobrevivido 1 día";
    Ft[ΔΔᐃ.ⵠΔᐃΔᐃⵠΔ] = "Has sobrevivido ";
    Ft[ΔΔᐃ.ᐃⵠⲆⲆᐃΔⵠ] = " días";
    Ft[ΔΔᐃ.ⲆᐃΔⲆᐃᐃᐃ] = "Estás muerto ;-;";
    Ft[ΔΔᐃ.ⲆΔΔⵠᐃⲆΔ] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    Ft[ΔΔᐃ.ⵠⵠⲆᐃᐃΔΔ] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    Ft[ΔΔᐃ.EMPTY] = "Recurso vacio";
    Ft[ΔΔᐃ.ⵠⲆᐃⲆⵠᐃⵠ] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    Ft[ΔΔᐃ.ⲆᐃᐃⲆᐃᐃⲆ] = " está muerto";
    Ft[ΔΔᐃ.ⲆᐃⲆⵠⲆᐃⲆ] = "Esta no es la herramienta correcta";
    Ft[ΔΔᐃ.ΔⵠⵠⲆᐃᐃⵠ] = "Te has unido a un equipo";
    Ft[ΔΔᐃ.ᐃⵠᐃᐃᐃⲆΔ] = "Estás muerto";
    Ft[ΔΔᐃ.ⲆᐃⵠΔᐃᐃⲆ] = " se unió al equipo";
    Ft[ΔΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "Tu equipo ha sido destruido";
    Ft[ΔΔᐃ.ⵠⲆⲆΔᐃᐃΔ] = "Has dejado el equipo";
    Ft[ΔΔᐃ.ᐃⵠⲆᐃᐃᐃᐃ] = " dejo el equipo ";
    Ft[ΔΔᐃ.ΔᐃⵠΔⵠ] = "Alguien te robó tu token :>";
    Ft[ΔΔᐃ.ᐃⵠⵠⲆᐃᐃΔ] = "Elige un servidor";
    Ft[ΔΔᐃ.ᐃᐃⲆⲆⲆ] = "jugadores";
    Ft[ΔΔᐃ.ⵠᐃΔⲆᐃⲆᐃ] = "total de jugadores";
    Ft[ΔΔᐃ.ᐃᐃⵠⵠⵠᐃΔ] = "Jugadores en este modo de juego";
    Ft[ΔΔᐃ.ⲆⲆⵠᐃⵠⵠⵠ] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    Ht[tg] = ["Has muerto por ninguna razón"];
    Ht[mk] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    Ht[Zh] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    Ht[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    Ht[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    Ht[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    Ht[Rg] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    Ht[Js] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    Ht[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    Ht[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    Ht[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    Ht[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    Ht[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    Ht[ik] = ["Has muerto de sed, mejor bebe tu propia orina."];
    Ht[Tn] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    Ht[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    Ht[ck] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    Ht[17] = ["Tu piel se cayó, el sol te quemó."];
    Ht[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    Ht[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    Ht[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    Ht[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  function st(a, b, c, d) {
    hi(Mw, a, b, c, d);
    const e = Ir(Nw[0], Nw[yg]);
    Jw(Nw[bs], Nw[Wg], Nw[0], Nw[1]);
    return e ^ 57202;
  }
  const tt = zl;
  const ut = Ng;
  const vt = ig;
  const wt = dr;
  const xt = fl;
  const yt = vr;
  function zt(b, c, d, e, f) {
    const g = b ^ 39736;
    const i = (16 << (e & 255)) + (24 << (e >> 24 & 255)) + (0 << (e >> 8 & 255)) + (Fs << (e >> ck & 255));
    const a = (~(g & 8435) & 8435 | ~(g & 8435) & g) ^ 39346;
    const j = (0 << ((a ^ i) & 255)) + (24 << ((a ^ i) >> 8 & 255)) + (16 << ((a ^ i) >> 16 & fa)) + (8 << ((a ^ i) >> 24 & Nk));
    return ~(j & 26964) & 26964 | ~(j & 26964) & j;
  }
  function At() {
    Ft[_r.ⵠᐃΔⵠΔ] = ["You feel a great power emanating from this orb"];
    Ht[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ft[_r.ⲆⵠᐃΔᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ft[ΔΔᐃ.ⲆΔⵠⵠⲆⲆΔ] = " BACK TO THE GAME";
    Ft[ΔΔᐃ.ⵠⲆⵠⵠⵠᐃⲆ] = " Share on Twitter";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆΔᐃᐃ] = " Share on Facebook";
    Ft[ΔΔᐃ.ΔΔⲆⲆⵠⲆΔ] = "You can buy items on the shop in the next game with your points";
    Ft[ΔΔᐃ.POINTS] = "points";
    Ft[ΔΔᐃ.ⵠΔΔᐃᐃⲆⲆ] = "Score";
    Ft[ΔΔᐃ.ⲆⵠⲆΔⲆⲆᐃ] = "Kill";
    Ft[ΔΔᐃ.ⵠⲆΔⵠΔⵠⲆ] = "Days survived";
    Ft[ΔΔᐃ.ⵠⲆΔᐃⵠΔⲆ] = "Building method: Free. Press G to change";
    Ft[ΔΔᐃ.ⵠⲆᐃᐃᐃΔⵠ] = "Building method: Grid. Press G to change";
    Ft[_r.ⵠⲆⵠᐃᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ft[_r.Ⲇᐃᐃᐃᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ft[_r.ⲆⲆΔΔⵠ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ft[_r.ΔⲆⵠΔΔ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = Ⲇ[et];
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById(Ⲇ[al]).innerHTML = " After 1 day, survive in winter";
    for (var a = Rs; ia > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ft[_r.ΔᐃΔΔΔ] = ["Hand"];
    Ft[_r.ᐃᐃΔΔⵠ] = ["Boden", "Dreckig!"];
    Ft[_r.ⲆⲆΔⲆᐃ] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    Ft[_r.ⵠᐃⵠⵠ] = ["Holz", "Du kannst niemals zu viel haben!"];
    Ft[_r.ᐃΔⵠⲆ] = ["Stein", "Auch Fels gennant"];
    Ft[_r.ᐃⲆⵠᐃ] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    Ft[_r.ᐃⲆΔⵠ] = ["Diamant", "Was wirst du daraus machen?"];
    Ft[_r.Ⲇⵠⵠⵠ] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    Ft[_r.ᐃⵠᐃⵠᐃ] = ["Mehl", "wird fürs Backen gebraucht"];
    Ft[_r.ⲆᐃᐃⵠΔ] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    Ft[_r.ⵠᐃⲆⲆᐃ] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    Ft[_r.ⵠⵠᐃᐃⵠ] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    Ft[_r.ΔΔⵠⵠⲆ] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    Ft[_r.ΔΔᐃⵠⲆ] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    Ft[_r.ⵠⲆΔⲆᐃ] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    Ft[_r.ⲆⵠΔⲆΔ] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    Ft[_r.ⲆⲆΔⵠⵠ] = ["Sandwich", "Schmeckt wie Krabbenburger", Ⲇ[fh]];
    Ft[_r.ⲆⵠⲆⲆΔ] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    Ft[_r.ᐃΔᐃⵠⵠ] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    Ft[_r.ⵠᐃΔⲆⲆ] = ["Girlande", "perfekter Schmuck für Dächer"];
    Ft[_r.ⵠᐃΔⲆᐃ] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ft[_r.ⵠᐃⲆⲆⲆ] = ["Beere", "Beeren lecker!", "Essen: 10"];
    Ft[_r.ⲆΔᐃΔΔ] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ft[_r.ⲆΔΔᐃⵠ] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    Ft[_r.ᐃⵠᐃᐃⵠ] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ft[_r.ⵠᐃⵠΔⵠ] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    Ft[_r.ⲆⲆΔⲆⵠ] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ft[_r.ⲆᐃΔᐃΔ] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    Ft[_r.ᐃⲆⲆᐃΔ] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    Ft[_r.ᐃⲆᐃᐃΔ] = ["Dornenbusch", "Es sticht!"];
    Ft[_r.ΔΔΔⵠⵠ] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    Ft[_r.ᐃΔΔΔⲆ] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    Ft[_r.ᐃⵠᐃΔⵠ] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", Ⲇ[xl]];
    Ft[_r.ⲆⵠⵠΔᐃ] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    Ft[_r.ⵠⵠΔⵠΔ] = ["Hasenfell", "Der Hase war so süß..."];
    Ft[_r.ᐃΔΔⲆΔ] = ["Klares Fell", "Du bist eine Brotfabrik"];
    Ft[_r.ⵠⲆΔᐃᐃ] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    Ft[_r.ⲆΔΔᐃᐃ] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    Ft[_r.ⵠᐃΔⲆⵠ] = ["Schuppen", "Es riecht wie Fisch!"];
    Ft[_r.ΔᐃΔⲆᐃ] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    Ft[_r.ΔᐃᐃⲆⲆ] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    Ft[_r.ᐃΔΔⵠΔ] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    Ft[_r.ⵠⲆΔⵠᐃ] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    Ft[_r.ᐃΔⵠᐃⲆ] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    Ft[_r.ⲆⲆⲆᐃⵠ] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    Ft[_r.ᐃⲆⲆⲆⲆ] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    Ft[_r.ΔⵠᐃΔᐃ] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    Ft[_r.ᐃᐃⲆΔⲆ] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    Ft[_r.ⵠΔΔΔΔ] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    Ft[_r.ᐃΔⲆᐃΔ] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Ft[_r.ⵠΔᐃᐃⵠ] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Ft[_r.ΔⲆᐃⵠΔ] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    Ft[_r.ⵠᐃᐃΔⵠ] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    Ft[_r.ⲆⲆΔᐃᐃ] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    Ft[_r.ⲆΔⲆⲆⵠ] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    Ft[_r.ⲆⵠⵠⲆⲆ] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", Ⲇ[sr]];
    Ft[_r.ⵠᐃⲆΔΔ] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Ft[_r.ᐃⲆⵠΔⲆ] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Ft[_r.ΔⲆⲆⵠⲆ] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Ft[_r.ⲆᐃΔⲆΔ] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", Ⲇ[Vg], "Schaden an Gebäuden: 20"];
    Ft[_r.ⲆⲆⵠⲆⲆ] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    Ft[_r.ⵠΔΔΔⵠ] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    Ft[_r.ᐃⵠⵠⵠᐃ] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    Ft[_r.ⵠⵠᐃᐃⲆ] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    Ft[_r.ᐃᐃΔⲆⲆ] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    Ft[_r.ⵠΔᐃⵠᐃ] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    Ft[_r.ⵠᐃᐃⵠΔ] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    Ft[_r.ᐃᐃᐃᐃⲆ] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    Ft[_r.ᐃΔⵠⲆᐃ] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    Ft[_r.ᐃΔΔΔΔ] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    Ft[_r.ⲆΔΔⵠⵠ] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Ft[_r.ⵠᐃⵠᐃΔ] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Ft[_r.ⵠᐃⲆⲆⵠ] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", Ⲇ[$h]];
    Ft[_r.ᐃᐃⲆⵠⵠ] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    Ft[_r.Δᐃᐃⵠᐃ] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    Ft[_r.ΔᐃΔⲆⲆ] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    Ft[_r.ᐃⲆⲆⵠᐃ] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    Ft[_r.ⵠⲆⲆⵠⵠ] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    Ft[_r.ᐃⵠΔᐃΔ] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    Ft[_r.ⲆᐃᐃΔᐃ] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    Ft[_r.ᐃᐃⵠⲆⲆ] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    Ft[_r.ΔⲆΔⲆⲆ] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    Ft[_r.ⲆΔⵠⵠᐃ] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Ft[_r.ᐃⲆᐃⲆᐃ] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    Ft[_r.ᐃⵠⵠⵠΔ] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    Ft[_r.ᐃⲆⲆΔΔ] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    Ft[_r.ΔᐃⲆⵠⵠ] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Ft[_r.ΔΔᐃⲆΔ] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Ft[_r.ΔᐃⵠⲆΔ] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Ft[_r.ᐃⲆⵠⲆⲆ] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    Ft[_r.ᐃⵠⵠⲆΔ] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ft[_r.ᐃⲆΔᐃᐃ] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    Ft[_r.ⵠⵠⲆⵠⲆ] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    Ft[_r.ΔᐃΔᐃⵠ] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    Ft[_r.ⵠⲆⲆΔᐃ] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    Ft[_r.ΔΔⲆⲆᐃ] = ["Blauer Edelstein", "Für sehr nette Leute"];
    Ft[_r.ᐃⲆΔⵠⵠ] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ft[_r.ⵠᐃⵠⵠΔ] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ft[_r.ⲆⲆᐃᐃΔ] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ft[_r.ΔΔᐃΔΔ] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    Ft[_r.ⲆΔⵠΔᐃ] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    Ft[_r.ΔᐃᐃⵠΔ] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    Ft[_r.ᐃⲆⵠΔᐃ] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    Ft[_r.ⲆΔᐃΔⲆ] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    Ft[_r.ᐃᐃΔⵠΔ] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    Ft[_r.ⵠⲆᐃᐃ] = ["Rucksack", "Mehr Platz im Inventar!"];
    Ft[_r.ⵠΔΔΔⲆ] = ["Papier", "Wird fürs Büchermachen verwendet"];
    Ft[_r.ᐃⵠΔΔⲆ] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    Ft[_r.ᐃΔᐃⲆᐃ] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    Ft[_r.ⵠⵠⲆⵠᐃ] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    Ft[_r.ᐃⵠᐃⲆⵠ] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    Ft[_r.ⲆⵠᐃᐃΔ] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    Ft[_r.ⲆᐃⲆᐃⵠ] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    Ft[_r.ⵠΔᐃᐃᐃ] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    Ft[_r.ⲆᐃⵠΔΔ] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    Ft[_r.ⲆⵠⲆⵠⵠ] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    Ft[_r.ⲆⲆⲆⲆⵠ] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    Ft[_r.ΔᐃⵠⲆⲆ] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    Ft[_r.ᐃᐃᐃᐃᐃ] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    Ft[_r.ⵠᐃⲆᐃⵠ] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    Ft[_r.ᐃΔⵠⵠΔ] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    Ft[_r.ⵠⵠΔⵠⲆ] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    Ft[_r.ⲆᐃⲆΔΔ] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    Ft[_r.Ⲇᐃⵠᐃⵠ] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    Ft[_r.ⲆⵠᐃΔΔ] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    Ft[_r.ᐃⲆⵠᐃᐃ] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    Ft[_r.ΔⵠⵠⲆᐃ] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    Ft[_r.ⵠΔᐃⲆΔ] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    Ft[_r.ᐃΔⵠⵠⵠ] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    Ft[_r.ⵠΔᐃΔΔ] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    Ft[_r.Δⵠᐃⵠᐃ] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    Ft[_r.ⲆᐃΔᐃⵠ] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    Ft[_r.ⵠΔⲆⲆΔ] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Ft[_r.Δᐃᐃᐃᐃ] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Ft[_r.ⲆⲆⵠⵠᐃ] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    Ft[ΔΔᐃ.ⵠⵠΔⵠΔⲆᐃ] = "Du kannst diesem Server nicht beitreten";
    Ft[ΔΔᐃ.ⵠⵠᐃⲆⲆᐃⲆ] = "Gekickt: ";
    Ft[ΔΔᐃ.ⵠᐃΔⲆⲆⲆⲆ] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    Ft[ΔΔᐃ.ⲆᐃΔⲆⲆᐃⲆ] = "Dein Schlüssel ist falsch";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆᐃᐃᐃ] = "Deine Version ist veraltet, säubere dein Cache";
    Ft[ΔΔᐃ.ΔⲆᐃΔΔΔⵠ] = "Es gibt keine neuen Ressourcen";
    Ft[ΔΔᐃ.ⲆΔⲆᐃᐃⵠᐃ] = "Du hast einen Tag überlebt";
    Ft[ΔΔᐃ.ⵠΔᐃΔᐃⵠΔ] = "Du hast überlebt ";
    Ft[ΔΔᐃ.ᐃⵠⲆⲆᐃΔⵠ] = " Tage";
    Ft[ΔΔᐃ.ⲆᐃΔⲆᐃᐃᐃ] = "Du bist gestorben ;-;";
    Ft[ΔΔᐃ.ⲆΔΔⵠᐃⲆΔ] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    Ft[ΔΔᐃ.ⵠⵠⲆᐃᐃΔΔ] = "Server ist voll! Drücke immer wieder auf spielen!";
    Ft[ΔΔᐃ.EMPTY] = "Ressource ist leer";
    Ft[ΔΔᐃ.ⵠⲆᐃⲆⵠᐃⵠ] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    Ft[ΔΔᐃ.ⲆᐃᐃⲆᐃᐃⲆ] = " ist gestorben";
    Ft[ΔΔᐃ.ⲆᐃⲆⵠⲆᐃⲆ] = "Das ist nicht das richtige Werkzeug";
    Ft[ΔΔᐃ.ΔⵠⵠⲆᐃᐃⵠ] = "Du bist einem Team beigetreten";
    Ft[ΔΔᐃ.ᐃⵠᐃᐃᐃⲆΔ] = "Du bist gestorben";
    Ft[ΔΔᐃ.ⲆᐃⵠΔᐃᐃⲆ] = " ist dem Team beigetreten";
    Ft[ΔΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "Dein Team wurde zerstört";
    Ft[ΔΔᐃ.ⵠⲆⲆΔᐃᐃΔ] = "Du hast das Team verlassen";
    Ft[ΔΔᐃ.ᐃⵠⲆᐃᐃᐃᐃ] = " hat das Team verlassen";
    Ft[ΔΔᐃ.ΔᐃⵠΔⵠ] = "Jemand hat dein Token gestohlen :>";
    Ft[ΔΔᐃ.ᐃⵠⵠⲆᐃᐃΔ] = "Suche dir ein Server aus";
    Ft[ΔΔᐃ.ᐃᐃⲆⲆⲆ] = "Spieler";
    Ft[ΔΔᐃ.ⵠᐃΔⲆᐃⲆᐃ] = "alle Spieler";
    Ft[ΔΔᐃ.ᐃᐃⵠⵠⵠᐃΔ] = "Spieler in diesem Modus";
    Ft[ΔΔᐃ.ⲆⲆⵠᐃⵠⵠⵠ] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    Ht[tg] = ["Du wurdest ohne Grund getötet"];
    Ht[rg] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    Ht[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    Ht[ig] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    Ht[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    Ht[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    Ht[Zl] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    Ht[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    Ht[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    Ht[se] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    Ht[Zk] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    Ht[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    Ht[Ms] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    Ht[Jl] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    Ht[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    Ht[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    Ht[Fl] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    Ht[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    Ht[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    Ht[jg] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    Ht[oh] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    Ht[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const Bt = tk;
  function Ct() {
    Ft[_r.ⵠᐃΔⵠΔ] = ["You feel a great power emanating from this orb"];
    Ht[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ft[_r.ⲆⵠᐃΔᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ft[ΔΔᐃ.ⲆΔⵠⵠⲆⲆΔ] = " BACK TO THE GAME";
    Ft[ΔΔᐃ.ⵠⲆⵠⵠⵠᐃⲆ] = " Share on Twitter";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆΔᐃᐃ] = " Share on Facebook";
    Ft[ΔΔᐃ.ΔΔⲆⲆⵠⲆΔ] = "You can buy items on the shop in the next game with your points";
    Ft[ΔΔᐃ.POINTS] = "points";
    Ft[ΔΔᐃ.ⵠΔΔᐃᐃⲆⲆ] = "Score";
    Ft[ΔΔᐃ.ⲆⵠⲆΔⲆⲆᐃ] = "Kill";
    Ft[ΔΔᐃ.ⵠⲆΔⵠΔⵠⲆ] = "Days survived";
    Ft[ΔΔᐃ.ⵠⲆΔᐃⵠΔⲆ] = "Building method: Free. Press G to change";
    Ft[ΔΔᐃ.ⵠⲆᐃᐃᐃΔⵠ] = "Building method: Grid. Press G to change";
    Ft[_r.ⵠⲆⵠᐃᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ft[_r.Ⲇᐃᐃᐃᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ft[_r.ⲆⲆΔΔⵠ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ft[_r.ΔⲆⵠΔΔ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById(Ⲇ[Xa]).innerHTML = " After 1 day, survive in winter";
    for (var a = Hi; ql > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ft[_r.ΔᐃΔΔΔ] = ["Ręka"];
    Ft[_r.ᐃᐃΔΔⵠ] = ["Ziemia", "Brudna!"];
    Ft[_r.ⲆⲆΔⲆᐃ] = ["Piasek", "Mam go w oczach!"];
    Ft[_r.ⵠᐃⵠⵠ] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    Ft[_r.ᐃΔⵠⲆ] = ["Kamień", "Także nazywany skałą"];
    Ft[_r.ᐃⲆⵠᐃ] = ["Złoto", "Bądź hojny, daj trochę innym"];
    Ft[_r.ᐃⲆΔⵠ] = ["Diament", "Co z nim zrobisz?"];
    Ft[_r.Ⲇⵠⵠⵠ] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    Ft[_r.ᐃⵠᐃⵠᐃ] = ["Mąka", "Używana w gotowaniu"];
    Ft[_r.ⲆᐃᐃⵠΔ] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    Ft[_r.ⵠᐃⲆⲆᐃ] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    Ft[_r.ⵠⵠᐃᐃⵠ] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    Ft[_r.ΔΔⵠⵠⲆ] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    Ft[_r.ΔΔᐃⵠⲆ] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    Ft[_r.ⵠⲆΔⲆᐃ] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    Ft[_r.ⲆⵠΔⲆΔ] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    Ft[_r.ⲆⲆΔⵠⵠ] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    Ft[_r.ⲆⵠⲆⲆΔ] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    Ft[_r.ᐃΔᐃⵠⵠ] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    Ft[_r.ⵠᐃΔⲆⲆ] = ["Girlanda", "Idealna do dekorowania dachów"];
    Ft[_r.ⵠᐃΔⲆᐃ] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ft[_r.ⵠᐃⲆⲆⲆ] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    Ft[_r.ⲆΔᐃΔΔ] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ft[_r.ⲆΔΔᐃⵠ] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    Ft[_r.ᐃⵠᐃᐃⵠ] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ft[_r.ⵠᐃⵠΔⵠ] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    Ft[_r.ⲆⲆΔⲆⵠ] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ft[_r.ⲆᐃΔᐃΔ] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    Ft[_r.ᐃⲆⲆᐃΔ] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    Ft[_r.ᐃⲆᐃᐃΔ] = ["Kolczasty krzew", "Kłuje!"];
    Ft[_r.ΔΔΔⵠⵠ] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    Ft[_r.ᐃΔΔΔⲆ] = ["Lód", "Użyteczny do robienia ciast i wody"];
    Ft[_r.ᐃⵠᐃΔⵠ] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    Ft[_r.ⲆⵠⵠΔᐃ] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    Ft[_r.ⵠⵠΔⵠΔ] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    Ft[_r.ᐃΔΔⲆΔ] = ["Skóra", "Jesteś fabryką chleba"];
    Ft[_r.ⵠⲆΔᐃᐃ] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    Ft[_r.ⲆΔΔᐃᐃ] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    Ft[_r.ⵠᐃΔⲆⵠ] = ["Łuski", "Pachnie jak ryba!"];
    Ft[_r.ΔᐃΔⲆᐃ] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    Ft[_r.ΔᐃᐃⲆⲆ] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    Ft[_r.ᐃΔΔⵠΔ] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    Ft[_r.ⵠⲆΔⵠᐃ] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    Ft[_r.ᐃΔⵠᐃⲆ] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    Ft[_r.ⲆⲆⲆᐃⵠ] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    Ft[_r.ᐃⲆⲆⲆⲆ] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    Ft[_r.ΔⵠᐃΔᐃ] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    Ft[_r.ᐃᐃⲆΔⲆ] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    Ft[_r.ⵠΔΔΔΔ] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    Ft[_r.ᐃΔⲆᐃΔ] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Ft[_r.ⵠΔᐃᐃⵠ] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Ft[_r.ΔⲆᐃⵠΔ] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    Ft[_r.ⵠᐃᐃΔⵠ] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    Ft[_r.ⲆⲆΔᐃᐃ] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    Ft[_r.ⲆΔⲆⲆⵠ] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    Ft[_r.ⲆⵠⵠⲆⲆ] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    Ft[_r.ⵠᐃⲆΔΔ] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Ft[_r.ᐃⲆⵠΔⲆ] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Ft[_r.ΔⲆⲆⵠⲆ] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Ft[_r.ⲆᐃΔⲆΔ] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    Ft[_r.ⲆⲆⵠⲆⲆ] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    Ft[_r.ⵠΔΔΔⵠ] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    Ft[_r.ᐃⵠⵠⵠᐃ] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    Ft[_r.ⵠⵠᐃᐃⲆ] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    Ft[_r.ᐃᐃΔⲆⲆ] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    Ft[_r.ⵠΔᐃⵠᐃ] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    Ft[_r.ⵠᐃᐃⵠΔ] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    Ft[_r.ᐃᐃᐃᐃⲆ] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    Ft[_r.ᐃΔⵠⲆᐃ] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    Ft[_r.ᐃΔΔΔΔ] = ["Kamienna łopata", Ⲇ[Kh], "Możesz także zdobyć minerały", "Obrażenia: 2"];
    Ft[_r.ⲆΔΔⵠⵠ] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Ft[_r.ⵠᐃⵠᐃΔ] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Ft[_r.ⵠᐃⲆⲆⵠ] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Ft[_r.ᐃᐃⲆⵠⵠ] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    Ft[_r.Δᐃᐃⵠᐃ] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    Ft[_r.ΔᐃΔⲆⲆ] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    Ft[_r.ᐃⲆⲆⵠᐃ] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    Ft[_r.ⵠⲆⲆⵠⵠ] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    Ft[_r.ᐃⵠΔᐃΔ] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    Ft[_r.ⲆᐃᐃΔᐃ] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    Ft[_r.ᐃᐃⵠⲆⲆ] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    Ft[_r.ΔⲆΔⲆⲆ] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    Ft[_r.ⲆΔⵠⵠᐃ] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    Ft[_r.ᐃⲆᐃⲆᐃ] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    Ft[_r.ᐃⵠⵠⵠΔ] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    Ft[_r.ᐃⲆⲆΔΔ] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    Ft[_r.ΔᐃⲆⵠⵠ] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    Ft[_r.ΔΔᐃⲆΔ] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    Ft[_r.ΔᐃⵠⲆΔ] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    Ft[_r.ᐃⲆⵠⲆⲆ] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    Ft[_r.ᐃⵠⵠⲆΔ] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ft[_r.ᐃⲆΔᐃᐃ] = ["Smocza kula", "Zdobyta podczas zadania"];
    Ft[_r.ⵠⵠⲆⵠⲆ] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    Ft[_r.ΔᐃΔᐃⵠ] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    Ft[_r.ⵠⲆⲆΔᐃ] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    Ft[_r.ΔΔⲆⲆᐃ] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    Ft[_r.ᐃⲆΔⵠⵠ] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ft[_r.ⵠᐃⵠⵠΔ] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ft[_r.ⲆⲆᐃᐃΔ] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ft[_r.ΔΔᐃΔΔ] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    Ft[_r.ⲆΔⵠΔᐃ] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    Ft[_r.ΔᐃᐃⵠΔ] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    Ft[_r.ᐃⲆⵠΔᐃ] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    Ft[_r.ⲆΔᐃΔⲆ] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    Ft[_r.ᐃᐃΔⵠΔ] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    Ft[_r.ⵠⲆᐃᐃ] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    Ft[_r.ⵠΔΔΔⲆ] = ["Papier", "Używany w tworzeniu książki"];
    Ft[_r.ᐃⵠΔΔⲆ] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    Ft[_r.ᐃΔᐃⲆᐃ] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    Ft[_r.ⵠⵠⲆⵠᐃ] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    Ft[_r.ᐃⵠᐃⲆⵠ] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    Ft[_r.ⲆⵠᐃᐃΔ] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    Ft[_r.ⲆᐃⲆᐃⵠ] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    Ft[_r.ⵠΔᐃᐃᐃ] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    Ft[_r.ⲆᐃⵠΔΔ] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    Ft[_r.ⲆⵠⲆⵠⵠ] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    Ft[_r.ⲆⲆⲆⲆⵠ] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    Ft[_r.ΔᐃⵠⲆⲆ] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    Ft[_r.ᐃᐃᐃᐃᐃ] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    Ft[_r.ⵠᐃⲆᐃⵠ] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    Ft[_r.ᐃΔⵠⵠΔ] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    Ft[_r.ⵠⵠΔⵠⲆ] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    Ft[_r.ⲆᐃⲆΔΔ] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    Ft[_r.Ⲇᐃⵠᐃⵠ] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    Ft[_r.ⲆⵠᐃΔΔ] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    Ft[_r.ᐃⲆⵠᐃᐃ] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    Ft[_r.ΔⵠⵠⲆᐃ] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    Ft[_r.ⵠΔᐃⲆΔ] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    Ft[_r.ᐃΔⵠⵠⵠ] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    Ft[_r.ⵠΔᐃΔΔ] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    Ft[_r.Δⵠᐃⵠᐃ] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    Ft[_r.ⲆᐃΔᐃⵠ] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    Ft[_r.ⵠΔⲆⲆΔ] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Ft[_r.Δᐃᐃᐃᐃ] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Ft[_r.ⲆⲆⵠⵠᐃ] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    Ft[ΔΔᐃ.ⵠⵠΔⵠΔⲆᐃ] = "Nie możesz dołączyć do tego serwera";
    Ft[ΔΔᐃ.ⵠⵠᐃⲆⲆᐃⲆ] = "Wyrzucony: ";
    Ft[ΔΔᐃ.ⵠᐃΔⲆⲆⲆⲆ] = "Twój klucz jest aktualnie używany przez innego gracza";
    Ft[ΔΔᐃ.ⲆᐃΔⲆⲆᐃⲆ] = "Twój klucz jest nieprawidłowy";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆᐃᐃᐃ] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    Ft[ΔΔᐃ.ΔⲆᐃΔΔΔⵠ] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    Ft[ΔΔᐃ.ⲆΔⲆᐃᐃⵠᐃ] = "Przeżyłeś 1 dzień";
    Ft[ΔΔᐃ.ⵠΔᐃΔᐃⵠΔ] = "Przeżyłeś ";
    Ft[ΔΔᐃ.ᐃⵠⲆⲆᐃΔⵠ] = " dni";
    Ft[ΔΔᐃ.ⲆᐃΔⲆᐃᐃᐃ] = "Jesteś martwy ;-;";
    Ft[ΔΔᐃ.ⲆΔΔⵠᐃⲆΔ] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    Ft[ΔΔᐃ.ⵠⵠⲆᐃᐃΔΔ] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    Ft[ΔΔᐃ.EMPTY] = "Źródło jest puste";
    Ft[ΔΔᐃ.ⵠⲆᐃⲆⵠᐃⵠ] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    Ft[ΔΔᐃ.ⲆᐃᐃⲆᐃᐃⲆ] = " jest martwy";
    Ft[ΔΔᐃ.ⲆᐃⲆⵠⲆᐃⲆ] = "To nie jest właściwe narzędzie";
    Ft[ΔΔᐃ.ΔⵠⵠⲆᐃᐃⵠ] = "Dołączyłeś do drużyny";
    Ft[ΔΔᐃ.ᐃⵠᐃᐃᐃⲆΔ] = "Jesteś martwy";
    Ft[ΔΔᐃ.ⲆᐃⵠΔᐃᐃⲆ] = " dołączył do drużyny";
    Ft[ΔΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "Twoja drużyna została zniszczona";
    Ft[ΔΔᐃ.ⵠⲆⲆΔᐃᐃΔ] = " Opuściłeś drużynę";
    Ft[ΔΔᐃ.ᐃⵠⲆᐃᐃᐃᐃ] = " opuścił drużynę";
    Ft[ΔΔᐃ.ΔᐃⵠΔⵠ] = "Ktoś ukradł twój żeton :>";
    Ft[ΔΔᐃ.ᐃⵠⵠⲆᐃᐃΔ] = "Wybierz serwer";
    Ft[ΔΔᐃ.ᐃᐃⲆⲆⲆ] = "graczy";
    Ft[ΔΔᐃ.ⵠᐃΔⲆᐃⲆᐃ] = "wszystkich graczy";
    Ft[ΔΔᐃ.ᐃᐃⵠⵠⵠᐃΔ] = "graczy w tym trybie";
    Ft[ΔΔᐃ.ⲆⲆⵠᐃⵠⵠⵠ] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    Ht[Bg] = ["Zostałeś zabity bez powodu"];
    Ht[mk] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    Ht[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    Ht[Ks] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    Ht[ba] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    Ht[Eq] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    Ht[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    Ht[$n] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    Ht[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    Ht[pn] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    Ht[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    Ht[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    Ht[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    Ht[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    Ht[di] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    Ht[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    Ht[G] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    Ht[Un] = ["Twoja skóra odpada, słońce cię zabija."];
    Ht[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    Ht[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    Ht[A] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    Ht[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  const Dt = Al;
  var Et = function () {
    Ft[_r.ⵠᐃΔⵠΔ] = ["You feel a great power emanating from this orb"];
    Ht[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ft[_r.ⲆⵠᐃΔᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ft[ΔΔᐃ.ⲆΔⵠⵠⲆⲆΔ] = " RETOUR AU JEU";
    Ft[ΔΔᐃ.ⵠⲆⵠⵠⵠᐃⲆ] = " Partage sur Twitter";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆΔᐃᐃ] = " Partage sur Facebook";
    Ft[ΔΔᐃ.ΔΔⲆⲆⵠⲆΔ] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    Ft[ΔΔᐃ.POINTS] = "points";
    Ft[ΔΔᐃ.ⵠΔΔᐃᐃⲆⲆ] = "Score";
    Ft[ΔΔᐃ.ⲆⵠⲆΔⲆⲆᐃ] = "Tués";
    Ft[ΔΔᐃ.ⵠⲆΔⵠΔⵠⲆ] = "Jours survécus";
    Ft[ΔΔᐃ.ⵠⲆΔᐃⵠΔⲆ] = "Mode de construction: Libre. Appuie sur G pour changer";
    Ft[ΔΔᐃ.ⵠⲆᐃᐃᐃΔⵠ] = "Mode de construction: Grille. Appuie sur G pour changer";
    Ft[_r.ⵠⲆⵠᐃᐃ] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    Ft[_r.Ⲇᐃᐃᐃᐃ] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    Ft[_r.ⲆⲆΔΔⵠ] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    Ft[_r.ΔⲆⵠΔΔ] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById(Ⲇ[Mg]).innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < at; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    Ft[_r.ΔᐃΔΔΔ] = ["Main"];
    Ft[_r.ᐃᐃΔΔⵠ] = ["Terre", "C'est sale!"];
    Ft[_r.ⲆⲆΔⲆᐃ] = ["Sable", "J'en ai dans les yeux"];
    Ft[_r.ⵠᐃⵠⵠ] = ["Bois", "Tu n'en auras jamais trop!"];
    Ft[_r.ᐃΔⵠⲆ] = ["Pierre", "Aussi appelée roche"];
    Ft[_r.ᐃⲆⵠᐃ] = ["Or", "Sois généreux, donne en aux autres"];
    Ft[_r.ᐃⲆΔⵠ] = ["Diamant", "Comme tes yeux! wesh"];
    Ft[_r.Ⲇⵠⵠⵠ] = ["Améthyste", "C'est Mauve comme Lapa"];
    Ft[_r.ᐃⵠᐃⵠᐃ] = ["Farine", "Utile pour la cuisine"];
    Ft[_r.ⲆᐃᐃⵠΔ] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    Ft[_r.ⵠᐃⲆⲆᐃ] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    Ft[_r.ⵠⵠᐃᐃⵠ] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    Ft[_r.ΔΔⵠⵠⲆ] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    Ft[_r.ΔΔᐃⵠⲆ] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    Ft[_r.ⵠⲆΔⲆᐃ] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    Ft[_r.ⲆⵠΔⲆΔ] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    Ft[_r.ⲆⲆΔⵠⵠ] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    Ft[_r.ⲆⵠⲆⲆΔ] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    Ft[_r.ᐃΔᐃⵠⵠ] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    Ft[_r.ⵠᐃΔⲆⲆ] = ["Guirlandes", "Utilisable sur les toits"];
    Ft[_r.ⵠᐃΔⲆᐃ] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ft[_r.ⵠᐃⲆⲆⲆ] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    Ft[_r.ⲆΔᐃΔΔ] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ft[_r.ⲆΔΔᐃⵠ] = ["Blé", "Peut être transformé en farine dans les moulins"];
    Ft[_r.ᐃⵠᐃᐃⵠ] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ft[_r.ⵠᐃⵠΔⵠ] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    Ft[_r.ⲆⲆΔⲆⵠ] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ft[_r.ⲆᐃΔᐃΔ] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    Ft[_r.ᐃⲆⲆᐃΔ] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    Ft[_r.ᐃⲆᐃᐃΔ] = ["Ronces", "Ça pique!"];
    Ft[_r.ΔΔΔⵠⵠ] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    Ft[_r.ᐃΔΔΔⲆ] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    Ft[_r.ᐃⵠᐃΔⵠ] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    Ft[_r.ⲆⵠⵠΔᐃ] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    Ft[_r.ⵠⵠΔⵠΔ] = ["Peau de lapin", "Vous êtes un monstre"];
    Ft[_r.ᐃΔΔⲆΔ] = ["Fourrure blanche", "Tu es une usine à pain"];
    Ft[_r.ⵠⲆΔᐃᐃ] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    Ft[_r.ⲆΔΔᐃᐃ] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    Ft[_r.ⵠᐃΔⲆⵠ] = ["Écailles", "Ça sent le poisson!"];
    Ft[_r.ΔᐃΔⲆᐃ] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    Ft[_r.ΔᐃᐃⲆⲆ] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    Ft[_r.ᐃΔΔⵠΔ] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    Ft[_r.ⵠⲆΔⵠᐃ] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    Ft[_r.ᐃΔⵠᐃⲆ] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    Ft[_r.ⲆⲆⲆᐃⵠ] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    Ft[_r.ᐃⲆⲆⲆⲆ] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    Ft[_r.ΔⵠᐃΔᐃ] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    Ft[_r.ᐃᐃⲆΔⲆ] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    Ft[_r.ⵠΔΔΔΔ] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    Ft[_r.ᐃΔⲆᐃΔ] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    Ft[_r.ⵠΔᐃᐃⵠ] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    Ft[_r.ΔⲆᐃⵠΔ] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    Ft[_r.ⵠᐃᐃΔⵠ] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    Ft[_r.ⲆⲆΔᐃᐃ] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    Ft[_r.ⲆΔⲆⲆⵠ] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    Ft[_r.ⲆⵠⵠⲆⲆ] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    Ft[_r.ⵠᐃⲆΔΔ] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    Ft[_r.ᐃⲆⵠΔⲆ] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    Ft[_r.ΔⲆⲆⵠⲆ] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    Ft[_r.ⲆᐃΔⲆΔ] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    Ft[_r.ⲆⲆⵠⲆⲆ] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    Ft[_r.ⵠΔΔΔⵠ] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    Ft[_r.ᐃⵠⵠⵠᐃ] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    Ft[_r.ⵠⵠᐃᐃⲆ] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    Ft[_r.ᐃᐃΔⲆⲆ] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    Ft[_r.ⵠΔᐃⵠᐃ] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    Ft[_r.ⵠᐃᐃⵠΔ] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    Ft[_r.ᐃᐃᐃᐃⲆ] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    Ft[_r.ᐃΔⵠⲆᐃ] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    Ft[_r.ᐃΔΔΔΔ] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    Ft[_r.ⲆΔΔⵠⵠ] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    Ft[_r.ⵠᐃⵠᐃΔ] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    Ft[_r.ⵠᐃⲆⲆⵠ] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    Ft[_r.ᐃᐃⲆⵠⵠ] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    Ft[_r.Δᐃᐃⵠᐃ] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    Ft[_r.ΔᐃΔⲆⲆ] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    Ft[_r.ᐃⲆⲆⵠᐃ] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    Ft[_r.ⵠⲆⲆⵠⵠ] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    Ft[_r.ᐃⵠΔᐃΔ] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    Ft[_r.ⲆᐃᐃΔᐃ] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ft[_r.ᐃᐃⵠⲆⲆ] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ft[_r.ΔⲆΔⲆⲆ] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ft[_r.ⲆΔⵠⵠᐃ] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ft[_r.ᐃⲆᐃⲆᐃ] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ft[_r.ᐃⵠⵠⵠΔ] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ft[_r.ᐃⲆⲆΔΔ] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    Ft[_r.ΔᐃⲆⵠⵠ] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ft[_r.ΔΔᐃⲆΔ] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ft[_r.ΔᐃⵠⲆΔ] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ft[_r.ᐃⲆⵠⲆⲆ] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    Ft[_r.ᐃⵠⵠⲆΔ] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    Ft[_r.ᐃⲆΔᐃᐃ] = ["Orbe du Dragon", "Donné en Quête"];
    Ft[_r.ⵠⵠⲆⵠⲆ] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    Ft[_r.ΔᐃΔᐃⵠ] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    Ft[_r.ⵠⲆⲆΔᐃ] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    Ft[_r.ΔΔⲆⲆᐃ] = ["Gemme bleue", "Pour les gens trop gentils"];
    Ft[_r.ᐃⲆΔⵠⵠ] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    Ft[_r.ⵠᐃⵠⵠΔ] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    Ft[_r.ⲆⲆᐃᐃΔ] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    Ft[_r.ΔΔᐃΔΔ] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    Ft[_r.ⲆΔⵠΔᐃ] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    Ft[_r.ΔᐃᐃⵠΔ] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    Ft[_r.ᐃⲆⵠΔᐃ] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    Ft[_r.ⲆΔᐃΔⲆ] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    Ft[_r.ᐃᐃΔⵠΔ] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    Ft[_r.ⵠⲆᐃᐃ] = ["Sac", "Plus de place dans ton inventaire!"];
    Ft[_r.ⵠΔΔΔⲆ] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    Ft[_r.ᐃⵠΔΔⲆ] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    Ft[_r.ᐃΔᐃⲆᐃ] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    Ft[_r.ⵠⵠⲆⵠᐃ] = ["Cadenas", "Pour verrouiller un coffre"];
    Ft[_r.ᐃⵠᐃⲆⵠ] = ["Clé", "Pour déverrouiller un coffre"];
    Ft[_r.ⲆⵠᐃᐃΔ] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    Ft[_r.ⲆᐃⲆᐃⵠ] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    Ft[_r.ⵠΔᐃᐃᐃ] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    Ft[_r.ⲆᐃⵠΔΔ] = ["Toit", "Te cache un peu et te réchauffe"];
    Ft[_r.ⲆⵠⲆⵠⵠ] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    Ft[_r.ⲆⲆⲆⲆⵠ] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    Ft[_r.ΔᐃⵠⲆⲆ] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    Ft[_r.ᐃᐃᐃᐃᐃ] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    Ft[_r.ⵠᐃⲆᐃⵠ] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    Ft[_r.ᐃΔⵠⵠΔ] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    Ft[_r.ⵠⵠΔⵠⲆ] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    Ft[_r.ⲆᐃⲆΔΔ] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    Ft[_r.Ⲇᐃⵠᐃⵠ] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    Ft[_r.ⲆⵠᐃΔΔ] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    Ft[_r.ᐃⲆⵠᐃᐃ] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    Ft[_r.ΔⵠⵠⲆᐃ] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    Ft[_r.ⵠΔᐃⲆΔ] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    Ft[_r.ᐃΔⵠⵠⵠ] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    Ft[_r.ⵠΔᐃΔΔ] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    Ft[_r.Δⵠᐃⵠᐃ] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    Ft[_r.ⲆᐃΔᐃⵠ] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    Ft[_r.ⵠΔⲆⲆΔ] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Ft[_r.Δᐃᐃᐃᐃ] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Ft[_r.ⲆⲆⵠⵠᐃ] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    Ft[ΔΔᐃ.ⵠⵠΔⵠΔⲆᐃ] = "Tu ne peux pas rejoindre le serveur";
    Ft[ΔΔᐃ.ⵠⵠᐃⲆⲆᐃⲆ] = "Expulsé: ";
    Ft[ΔΔᐃ.ⵠᐃΔⲆⲆⲆⲆ] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    Ft[ΔΔᐃ.ⲆᐃΔⲆⲆᐃⲆ] = "Ta clé est fausse";
    Ft[ΔΔᐃ.ⵠᐃᐃⲆᐃᐃᐃ] = "Tu as une vieille version, rafraichis tes caches";
    Ft[ΔΔᐃ.ΔⲆᐃΔΔΔⵠ] = "Il n'y a plus de nouvelles ressources";
    Ft[ΔΔᐃ.ⲆΔⲆᐃᐃⵠᐃ] = "Tu as survécu 1 jour";
    Ft[ΔΔᐃ.ⵠΔᐃΔᐃⵠΔ] = "Tu as survécu ";
    Ft[ΔΔᐃ.ᐃⵠⲆⲆᐃΔⵠ] = " jours";
    Ft[ΔΔᐃ.ⲆᐃΔⲆᐃᐃᐃ] = "Tu es mort ;-;";
    Ft[ΔΔᐃ.ⲆΔΔⵠᐃⲆΔ] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    Ft[ΔΔᐃ.ⵠⵠⲆᐃᐃΔΔ] = "Le serveur est complet! Spam le bouton jouer";
    Ft[ΔΔᐃ.EMPTY] = "Cette ressource est vide";
    Ft[ΔΔᐃ.ⵠⲆᐃⲆⵠᐃⵠ] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    Ft[ΔΔᐃ.ⲆᐃᐃⲆᐃᐃⲆ] = " est mort";
    Ft[ΔΔᐃ.ⲆᐃⲆⵠⲆᐃⲆ] = "Ce n'est pas le bon outil";
    Ft[ΔΔᐃ.ΔⵠⵠⲆᐃᐃⵠ] = "Tu as rejoins une équipe";
    Ft[ΔΔᐃ.ᐃⵠᐃᐃᐃⲆΔ] = "Tu es mort";
    Ft[ΔΔᐃ.ⲆᐃⵠΔᐃᐃⲆ] = " a rejoint l'équipe";
    Ft[ΔΔᐃ.ⲆΔΔΔⵠⲆᐃ] = "Ton équipe a été détruite";
    Ft[ΔΔᐃ.ⵠⲆⲆΔᐃᐃΔ] = "Tu as quitté l'équipe";
    Ft[ΔΔᐃ.ᐃⵠⲆᐃᐃᐃᐃ] = " a quitté l'équipe";
    Ft[ΔΔᐃ.ΔᐃⵠΔⵠ] = "Quelqu'un a volé ton token :>";
    Ft[ΔΔᐃ.ᐃⵠⵠⲆᐃᐃΔ] = "Choisis un serveur";
    Ft[ΔΔᐃ.ᐃᐃⲆⲆⲆ] = "joueurs";
    Ft[ΔΔᐃ.ⵠᐃΔⲆᐃⲆᐃ] = "joueurs";
    Ft[ΔΔᐃ.ᐃᐃⵠⵠⵠᐃΔ] = "joueurs dans ce mode";
    Ft[ΔΔᐃ.ⲆⲆⵠᐃⵠⵠⵠ] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    Ht[Rq] = ["Tu as été tué sans raison particulière, juste comme ça"];
    Ht[Xn] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    Ht[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    Ht[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    Ht[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    Ht[nr] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    Ht[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    Ht[Ys] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    Ht[8] = ["Cet ours voulait juste un câlin."];
    Ht[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    Ht[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    Ht[Jq] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    Ht[da] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    Ht[bg] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    Ht[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    Ht[$q] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    Ht[16] = ["Un kraken a 'kraké' tes os."];
    Ht[Sg] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    Ht[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    Ht[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    Ht[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    Ht[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ᐃⲆⵠⵠΔ = "Uuunnnggg";
    ΔᐃᐃᐃⲆⵠΔ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  };
  var Ft = [];
  for (var Gt = 0; Gt < 344; Gt++) {
    Ft[Gt] = "";
  }
  var Ht = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  const It = gg;
  const Jt = ss;
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      dt();
    } else if (a === "Français") {
      Et();
    } else if (a === "Deutsch") {
      At();
    } else if (a === "Español") {
      rt();
    } else if (a === "Português") {
      lt();
    } else if (a === "Русский") {
      gt();
    } else if (a === "Polski") {
      Ct();
    }
    ⵠⲆᐃᐃΔ = [];
    Xw.ΔᐃⲆⵠ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  var Kt;
  Ia = "EN";
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      Ia = "RU";
      break;
    case "en":
      Ia = "EN";
      break;
    case "es":
      Ia = "SP";
      break;
    case "fr":
      Ia = "FR";
      break;
    case "pl":
      Ia = "PL";
      break;
    case "de":
      Ia = "DE";
      break;
    case "pt":
      Ia = "PT";
  }
  const Lt = ns;
  if (Ia === "FR") {
    $(".md-languages label button").text("Français");
    Kt = Et;
  } else if (Ia === "PL") {
    $(".md-languages label button").text("Polski");
    Kt = Ct;
  } else if (Ia === "PT") {
    $(".md-languages label button").text("Português");
    Kt = lt;
  } else if (Ia === "SP") {
    $(".md-languages label button").text("Español");
    Kt = rt;
  } else if (Ia === "RU") {
    $(".md-languages label button").text("Русский");
    Kt = gt;
  } else if (Ia === "DE") {
    $(".md-languages label button").text("Deutsch");
    Kt = At;
  } else {
    $(".md-languages label button").text("English");
    Kt = dt;
  }
  const Mt = jk;
  const eb = F;
  function ib(b, c, d, e) {
    const f = b ^ 49890;
    const g = (24 << (c >> 24 & 255)) + (8 << (c >> As & 255)) + (0 << (c >> 16 & 255)) + (16 << (c & Br));
    const i = ((2373 + d) * 2147483629 + 2147483587) % 2147483647;
    const a = ~(e & 15908) & (e | 15908);
    const j = zk(f, g, i, a, f);
    const h = zk(g, i, a, f, g);
    return (0 << ((j ^ h) & 255)) + (24 << ((j ^ h) >> 16 & 255)) + (ct << ((j ^ h) >> 24 & 255)) + (8 << ((j ^ h) >> 8 & 255));
  }
  Ⲇⵠ = {
    ΔⲆⵠⲆⲆⲆΔⵠΔ: "img/logo.png",
    ⲆᐃᐃⲆⲆⲆⵠ: "img/mapday.png",
    ᐃΔᐃΔⵠΔΔ: "img/mapnight.png",
    ᐃⲆᐃⲆᐃΔᐃᐃΔ: "img/bigzday.png",
    ᐃⲆⲆⵠⲆᐃᐃᐃⲆ: "img/bigznight.png",
    ⲆⲆⵠᐃⲆΔⲆ: "img/bigday-river1.png",
    ΔᐃⲆⵠⵠΔⵠΔⵠ: "img/bigday-lake.png",
    ⲆΔΔⲆΔᐃᐃ: "img/bigday-berry.png",
    ΔⲆᐃΔᐃᐃᐃ: "img/bigday-stone1.png",
    ⵠⵠⲆⲆΔᐃⵠ: "img/bigday-stone2.png",
    ⲆΔⵠⵠⵠⵠΔ: "img/bigday-gold1.png",
    ᐃⵠΔΔⵠⵠⲆ: "img/bigday-gold2.png",
    ΔⲆΔᐃᐃᐃᐃ: "img/bigday-emerald1.png",
    ΔΔⵠΔᐃᐃᐃ: "img/bigday-emerald2.png",
    ΔⲆΔΔⵠⵠⲆ: "img/bigday-amethyst.png",
    ΔⵠⲆⵠᐃⵠⵠ: "img/bigday-bear.png",
    ⲆᐃᐃⵠΔⲆᐃ: "img/bigday-cave.png",
    ᐃΔⵠᐃⲆᐃⵠ: "img/bigday-diamond.png",
    ΔΔΔⲆᐃΔΔ: "img/bigday-island.png",
    ᐃⵠᐃᐃΔⵠᐃ: "img/bigday-reidite.png",
    ⵠΔⲆⵠᐃΔⲆ: "img/bigday-spider.png",
    ⲆᐃⲆᐃᐃᐃⵠ: "img/bigday-wolf.png",
    ΔᐃⵠᐃΔᐃᐃ: "img/bigday-fir-tree.png",
    ᐃⵠⲆΔᐃⲆⵠ: "img/bigday-fox.png",
    ⵠⲆⲆⲆⲆⵠⲆ: "img/bigday-kraken.png",
    ΔΔΔⲆⲆⲆᐃ: "img/bigday-piranha.png",
    ΔᐃⵠΔⲆⵠᐃ: "img/bigday-cactus.png",
    ΔᐃⵠΔⲆΔᐃ: "img/bigday-magma.png",
    ⲆᐃⲆⲆΔᐃⲆ: "img/bigday-river1.png",
    ⲆᐃⲆΔⵠⲆⵠᐃⲆ: "img/bignight-lake.png",
    ᐃⵠⵠᐃⲆᐃΔᐃΔ: "img/bignight-berry.png",
    ⵠⵠⲆⲆᐃⵠⲆ: "img/bignight-stone1.png",
    ⲆᐃⵠΔᐃⲆⵠ: "img/bignight-stone2.png",
    ΔΔᐃΔⵠⵠᐃ: "img/bignight-gold1.png",
    ΔΔᐃⲆⲆⲆᐃ: "img/bignight-gold2.png",
    ΔΔᐃⵠᐃⵠΔ: "img/bignight-emerald1.png",
    ᐃᐃΔⵠⲆⲆⵠ: "img/bignight-emerald2.png",
    ⵠᐃⵠΔⵠⲆΔ: "img/bignight-amethyst.png",
    ⲆΔΔⲆΔᐃⵠ: "img/bignight-bear.png",
    ΔⲆᐃⲆⵠⲆⲆ: "img/bignight-cave.png",
    ⵠᐃᐃᐃⲆⲆᐃ: "img/bignight-diamond.png",
    ᐃⲆⵠΔᐃᐃⵠ: "img/bignight-island.png",
    ⵠΔⲆΔⲆᐃΔ: "img/bignight-reidite.png",
    ᐃⵠᐃΔᐃΔᐃ: "img/bignight-spider.png",
    ⵠⲆⵠⵠΔᐃⵠ: "img/bignight-wolf.png",
    ⵠΔΔⵠⲆᐃᐃ: "img/bignight-fir-tree.png",
    ⲆⵠΔᐃΔⲆᐃ: "img/bignight-fox.png",
    ⵠⲆΔΔⲆⵠⲆ: "img/bignight-kraken.png",
    ⵠⲆⵠⲆⲆⵠΔ: "img/bignight-piranha.png",
    ΔᐃⵠⲆⲆᐃⵠ: "img/bignight-cactus.png",
    ΔΔΔⵠΔⵠⲆ: "img/bignight-magma.png",
    ⲆⵠᐃΔⵠⵠⵠ: "img/bigday-desert.png",
    ⵠΔΔᐃΔᐃⵠ: "img/bigday-winter.png",
    ᐃᐃᐃΔᐃΔΔ: "img/bigday-lava.png",
    ⵠⲆⲆⵠᐃⲆΔ: "img/bigday-forest.png",
    ᐃⲆⵠΔⵠᐃᐃ: "img/bignight-desert.png",
    ΔΔⲆᐃᐃΔⵠ: "img/bignight-winter.png",
    ⲆⲆⲆΔⲆⲆᐃ: "img/bignight-lava.png",
    ⲆΔⲆΔⲆⲆⲆ: "img/bignight-forest.png",
    ⲆΔΔΔΔⵠΔ: "img/day-river-wave.png",
    ⵠⲆΔⲆⵠΔⵠ: "img/night-river-wave.png",
    ΔᐃⵠΔⲆᐃⲆ: "img/day-fog0.png",
    ⵠⲆΔᐃΔⵠⲆ: "img/day-fog1.png",
    ΔⲆΔΔⲆⵠⲆ: "img/day-fog2.png",
    ᐃⵠⲆⲆⲆⵠⵠ: "img/night-fog0.png",
    ⵠᐃᐃⵠⵠᐃᐃ: "img/night-fog1.png",
    Ⲇⵠᐃᐃⵠᐃᐃ: "img/night-fog2.png",
    ᐃΔΔⵠᐃΔⲆ: "img/day-fogdesert0.png",
    ᐃΔⲆⵠΔᐃⵠ: "img/day-fogdesert1.png",
    ᐃⲆⲆⵠΔᐃᐃ: "img/day-fogdesert2.png",
    ⲆᐃΔⵠⵠⲆΔ: "img/night-fogdesert0.png",
    ᐃⲆⵠⵠΔⲆΔ: "img/night-fogdesert1.png",
    ⵠⵠⵠᐃⵠΔⵠ: "img/night-fogdesert2.png",
    ⲆᐃⲆᐃᐃⲆⲆ: "img/day-cross-server.png",
    ⲆᐃⲆᐃⵠΔⵠ: "img/day-here-server.png",
    ⲆᐃⲆⲆⵠᐃΔ: "img/day-finish-server.png",
    ⵠᐃΔΔᐃΔⵠ: "img/day-item-server.png",
    ⲆᐃᐃᐃⲆΔⵠ: "img/day-skull-server.png",
    ᐃᐃᐃⵠⲆΔⵠ: "img/night-cross-server.png",
    ᐃᐃΔΔΔⵠⵠ: "img/night-here-server.png",
    ⲆⵠⲆⵠᐃᐃᐃ: "img/night-finish-server.png",
    ⲆΔⵠΔᐃᐃΔ: "img/night-item-server.png",
    ⲆⲆᐃⵠⲆⲆᐃ: "img/night-skull-server.png",
    ⵠᐃⵠΔΔⲆⵠ: "img/day-reidite0.png",
    ⵠᐃⲆⵠΔⲆⵠ: "img/night-reidite0.png",
    ᐃᐃᐃΔⵠΔⵠ: "img/day-reidite1.png",
    ΔᐃⲆⵠⵠⲆΔ: "img/night-reidite1.png",
    ᐃΔΔΔᐃⲆⵠ: "img/day-reidite2.png",
    ⲆⲆⲆᐃⲆⲆΔ: "img/night-reidite2.png",
    ᐃᐃⲆᐃΔⲆⵠ: "img/day-lava1.png",
    ΔⵠᐃⵠⲆᐃⵠ: "img/night-lava1.png",
    ᐃΔΔᐃⵠⲆⲆ: "img/day-lava2.png",
    ᐃⲆⵠⵠΔⲆⵠ: "img/night-lava2.png",
    ⵠⵠᐃⵠⵠΔⵠ: "img/day-lava3.png",
    Ⲇⵠᐃᐃᐃⵠᐃ: "img/night-lava3.png",
    ΔΔⲆⲆᐃⵠᐃ: "img/day-lava4.png",
    ⲆᐃⲆⲆⵠⵠΔ: "img/night-lava4.png",
    ⲆⵠⲆᐃⵠᐃΔ: "img/day-lava5.png",
    ⲆΔᐃᐃᐃΔⵠ: "img/night-lava5.png",
    ⲆᐃⵠᐃⵠⲆΔ: "img/day-lava6.png",
    ᐃⵠᐃᐃⵠⵠⲆ: "img/night-lava6.png",
    ⵠⵠᐃᐃⲆⲆΔ: "img/day-lava-ground1.png",
    ΔᐃⵠΔᐃⵠⵠ: "img/night-lava-ground1.png",
    ᐃⵠᐃⵠΔⲆⲆ: "img/day-lava-ground2.png",
    ΔⲆΔᐃⲆⲆΔ: "img/night-lava-ground2.png",
    ⵠᐃⲆⲆᐃᐃⵠ: "img/day-lava-ground3.png",
    ᐃᐃⵠⵠⲆⲆΔ: "img/night-lava-ground3.png",
    ᐃΔΔⲆΔⵠⵠ: "img/day-lava-ground4.png",
    ᐃⵠⲆᐃᐃⵠⵠ: "img/night-lava-ground4.png",
    ⵠΔⵠΔⲆᐃᐃ: "img/day-lava-ground5.png",
    ΔⵠᐃⵠᐃⲆᐃ: "img/night-lava-ground5.png",
    ΔᐃΔΔⵠⲆⵠ: "img/day-lava-ground6.png",
    ⲆᐃΔᐃᐃΔⲆ: "img/night-lava-ground6.png",
    ᐃⲆΔΔᐃⲆⲆ: "img/day-fire-mob.png",
    ᐃⲆⵠᐃⲆⵠⵠ: "img/night-fire-mob.png",
    ΔⵠⲆⵠⲆᐃⵠ: "img/hurt-fire-mob.png",
    ⲆⲆΔᐃΔΔᐃ: "img/day-diamond-protection.png",
    ⵠᐃᐃⵠᐃᐃⲆ: "img/night-diamond-protection.png",
    ⲆⲆᐃᐃⵠⵠΔ: "img/day-hand-diamond-protection.png",
    ⲆⵠⲆⲆᐃᐃⲆ: "img/night-hand-diamond-protection.png",
    ⵠⵠⵠᐃⲆⲆΔ: "img/inv-diamond-protection-out.png",
    ⲆⲆᐃΔᐃⲆⲆ: "img/inv-diamond-protection-in.png",
    ⵠΔᐃⵠⲆⵠⵠ: "img/inv-diamond-protection-click.png",
    ᐃΔΔⵠⲆᐃΔ: "img/day-amethyst-protection.png",
    ΔⵠΔⲆⵠΔᐃ: "img/night-amethyst-protection.png",
    ΔⵠᐃᐃⲆᐃⲆΔΔ: "img/day-hand-amethyst-protection.png",
    ⲆⵠⲆᐃⵠⲆΔⵠⲆ: "img/night-hand-amethyst-protection.png",
    ᐃᐃᐃⵠⵠⲆⵠ: "img/inv-amethyst-protection-out.png",
    ⲆᐃⵠⲆⵠΔⵠ: "img/inv-amethyst-protection-in.png",
    ⲆᐃⲆΔⲆΔⲆ: "img/inv-amethyst-protection-click.png",
    ΔᐃⲆᐃΔⲆΔ: "img/day-reidite-sword.png",
    ⲆⵠᐃⲆⲆⲆᐃ: "img/night-reidite-sword.png",
    ⵠΔⵠⲆⵠᐃΔ: "img/inv-reidite-sword-out.png",
    ⲆΔⵠⲆⵠⲆΔ: "img/inv-reidite-sword-in.png",
    ⲆⵠΔᐃⲆⲆⲆ: "img/inv-reidite-sword-click.png",
    ᐃΔᐃᐃⲆᐃᐃ: "img/inv-reidite-out.png",
    ⵠⵠⲆᐃᐃᐃᐃ: "img/inv-reidite-in.png",
    ᐃᐃΔⵠⵠⲆΔ: "img/inv-reidite-click.png",
    ⵠⲆᐃΔⵠⲆⲆ: "img/inv-flame-out.png",
    ᐃΔⵠⵠⲆⵠⲆ: "img/inv-flame-in.png",
    ᐃᐃᐃⲆⵠᐃΔ: "img/inv-flame-click.png",
    ΔⵠⵠΔⲆΔⵠ: "img/day-magma-buble0.png",
    ⵠΔⲆΔᐃⲆΔ: "img/night-magma-buble0.png",
    ⵠᐃᐃΔⲆⲆᐃ: "img/day-magma-buble1.png",
    ⲆⲆΔⲆᐃΔⵠ: "img/night-magma-buble1.png",
    ΔⵠΔⲆΔᐃⲆ: "img/day-magma-buble2.png",
    ᐃᐃⵠΔΔⲆⲆ: "img/night-magma-buble2.png",
    ᐃⵠᐃⲆⲆⲆᐃ: "img/day-lava-dragon.png",
    ᐃΔᐃⲆⲆᐃΔ: "img/night-lava-dragon.png",
    ⲆⵠᐃΔΔΔᐃⵠⲆ: "img/day-fire-dragon.png",
    ᐃⵠⲆⵠΔΔⵠⲆⲆ: "img/night-fire-dragon.png",
    ᐃᐃⵠᐃⲆΔΔ: "img/hurt-lava-dragon.png",
    ⲆⲆᐃⵠΔⵠΔ: "img/day-lava-wing-left.png",
    ⵠΔⲆⲆⲆᐃⵠ: "img/night-lava-wing-left.png",
    ᐃΔᐃⵠΔΔΔ: "img/day-lava-wing-right.png",
    ⵠΔⲆᐃᐃⵠᐃ: "img/night-lava-wing-right.png",
    ⵠΔⲆⲆⵠΔΔ: "img/hurt-lava-wing-left.png",
    ⵠᐃᐃⲆΔᐃΔ: "img/hurt-lava-wing-right.png",
    ⵠᐃᐃᐃᐃⲆⵠ: "img/day-reidite-spear.png",
    ᐃⵠᐃⲆⲆⲆⵠ: "img/night-reidite-spear.png",
    ᐃⲆᐃⵠᐃⵠⵠ: "img/inv-reidite-spear-out.png",
    ΔΔⲆⲆⲆΔΔ: "img/inv-reidite-spear-in.png",
    ᐃᐃⵠΔⵠⵠΔ: "img/inv-reidite-spear-click.png",
    ᐃᐃⵠⲆᐃⲆᐃ: "img/day-reidite-helmet.png",
    ᐃⵠⲆᐃᐃΔᐃ: "img/night-reidite-helmet.png",
    ⵠΔⵠⲆⲆⵠⲆ: "img/inv-reidite-helmet-out.png",
    ⲆⵠᐃⵠΔⵠᐃ: "img/inv-reidite-helmet-in.png",
    ᐃᐃΔΔⲆΔᐃ: "img/inv-reidite-helmet-click.png",
    ΔⵠⵠᐃᐃⵠΔ: "img/day-hand-reidite-protection.png",
    ᐃⲆΔⲆᐃᐃⵠ: "img/night-hand-reidite-protection.png",
    ᐃⵠⲆⵠΔΔⵠ: "img/day-reidite-protection.png",
    ⲆᐃⲆⲆⲆⲆⲆ: "img/night-reidite-protection.png",
    ΔⲆⵠⵠΔⲆΔ: "img/inv-reidite-protection-out.png",
    ⵠΔⵠⵠⲆᐃⵠ: "img/inv-reidite-protection-in.png",
    ⲆⵠⵠⵠΔΔΔ: "img/inv-reidite-protection-click.png",
    ΔΔⵠⲆⵠΔⵠ: "img/day-lava-dragon-sword.png",
    ΔⵠΔΔⲆᐃΔ: "img/night-lava-dragon-sword.png",
    ⲆᐃᐃᐃΔᐃⵠ: "img/inv-lava-dragon-sword-out.png",
    ΔᐃⲆⲆⵠⵠᐃ: "img/inv-lava-dragon-sword-in.png",
    ΔⲆⲆᐃΔⵠⵠ: "img/inv-lava-dragon-sword-click.png",
    ᐃⲆⵠᐃᐃΔⵠ: "img/day-lava-spear.png",
    ΔΔᐃΔⵠⲆⵠ: "img/night-lava-spear.png",
    ⲆⵠΔⵠⲆⲆⲆ: "img/inv-lava-spear-out.png",
    ⲆⲆⲆⵠⲆⲆⲆ: "img/inv-lava-spear-in.png",
    ΔⲆⵠΔⵠⲆⵠ: "img/inv-lava-spear-click.png",
    ΔⲆⲆᐃᐃᐃΔ: "img/day-lava-helmet.png",
    ⵠⲆᐃᐃⵠⲆΔ: "img/night-lava-helmet.png",
    ⲆΔⵠᐃᐃⲆᐃ: "img/inv-lava-helmet-out.png",
    ⵠΔᐃⵠΔⵠⵠ: "img/inv-lava-helmet-in.png",
    ᐃᐃⵠᐃⲆⲆⲆ: "img/inv-lava-helmet-click.png",
    ΔᐃⵠΔⲆⲆⲆ: "img/day-witch-hat.png",
    ᐃⲆΔΔⲆΔⵠ: "img/night-witch-hat.png",
    ΔⵠᐃⲆⵠᐃᐃ: "img/inv-witch-hat-out.png",
    ⲆⵠΔΔⵠΔΔ: "img/inv-witch-hat-in.png",
    ⵠᐃⲆⲆⲆⲆⲆ: "img/inv-witch-hat-click.png",
    ᐃⵠⵠᐃᐃⵠⵠ: "img/day-nimbus2000.png",
    ΔⲆⵠⲆⲆⲆᐃ: "img/night-nimbus2000.png",
    ΔᐃⵠⵠⵠⵠΔ: "img/inv-nimbus2000-out.png",
    ⲆᐃΔᐃⵠᐃΔ: "img/inv-nimbus2000-in.png",
    ΔΔᐃΔΔⲆⵠ: "img/inv-nimbus2000-click.png",
    ⲆⵠΔᐃᐃⲆᐃ: "img/day-accessory1-pacques.png",
    ᐃⵠᐃⲆΔⲆΔ: "img/night-accessory1-pacques.png",
    ⲆⵠᐃᐃⵠⲆⲆ: "img/day-accessory2-pacques.png",
    ΔᐃᐃⵠⵠⲆᐃ: "img/night-accessory2-pacques.png",
    ⲆⲆᐃⵠΔⲆΔ: "img/day-accessory3-pacques.png",
    ⵠⵠᐃᐃⲆᐃⲆ: "img/night-accessory3-pacques.png",
    ᐃⵠⵠⲆΔΔⵠ: "img/day-accessory5-pacques.png",
    ⲆΔⵠΔⲆⲆᐃ: "img/night-accessory5-pacques.png",
    ΔⵠⵠⲆⲆⲆⵠ: "img/day-accessory6-pacques.png",
    ᐃⵠᐃⵠⵠⵠᐃ: "img/night-accessory6-pacques.png",
    ΔΔⲆⲆᐃⵠⵠ: "img/day-accessory7-pacques.png",
    ⵠⲆΔᐃⵠᐃⵠ: "img/night-accessory7-pacques.png",
    ΔⲆᐃⵠΔΔⲆ: "img/day-accessory8-pacques.png",
    ⲆⲆⲆΔᐃⵠᐃ: "img/night-accessory8-pacques.png",
    ᐃᐃⲆⵠᐃΔᐃ: "img/day-bag-pacques.png",
    ⵠⵠⵠⵠⲆᐃΔ: "img/night-bag-pacques.png",
    ⵠᐃⲆⵠᐃᐃⵠ: "img/day-carrot.png",
    Ⲇⵠᐃᐃⵠⵠⵠ: "img/night-carrot.png",
    ⲆⲆⵠΔᐃⵠᐃ: "img/day-carrot-dried.png",
    ᐃⲆᐃᐃⲆᐃᐃ: "img/night-carrot-dried.png",
    ⵠᐃΔⲆⵠⵠⵠ: "img/day-tomato-herb.png",
    ᐃΔⵠⵠⲆⲆⲆ: "img/night-tomato-herb.png",
    ⵠΔᐃⲆᐃᐃⵠ: "img/day-tomato-herb-dried.png",
    ⲆⵠⲆΔⵠᐃΔ: "img/night-tomato-herb-dried.png",
    ⲆⲆⲆΔⵠⲆⵠ: "img/day-tomato.png",
    ΔᐃⲆⵠⲆⵠⵠ: "img/night-tomato.png",
    ⲆᐃⵠⲆΔΔΔ: "img/inv-carrot-out.png",
    ⲆΔᐃⲆⵠΔⲆ: "img/inv-carrot-in.png",
    ᐃᐃⵠΔᐃⲆΔ: "img/inv-carrot-click.png",
    ΔΔⵠⵠΔᐃⲆ: "img/inv-tomato-out.png",
    ᐃΔᐃΔⵠⲆΔ: "img/inv-tomato-in.png",
    ΔⵠⵠⲆⲆᐃΔ: "img/inv-tomato-click.png",
    ᐃⵠⲆⲆⵠⵠⲆ: "img/day-player0.png",
    ⵠΔᐃᐃⲆⵠⲆ: "img/night-player0.png",
    ΔⲆⲆⲆⵠΔΔ: "img/day-player1.png",
    ⵠᐃⲆᐃΔᐃⲆ: "img/night-player1.png",
    ᐃⲆΔⲆᐃⲆΔ: "img/day-player2.png",
    ᐃᐃΔᐃΔᐃΔ: "img/night-player22.png",
    ⲆᐃⲆΔΔΔⵠ: "img/day-player3.png",
    ⵠⵠΔⵠⲆⲆⲆ: "img/night-player33.png",
    ⲆᐃᐃᐃΔΔᐃ: "img/day-player4.png",
    ᐃΔⲆⲆⲆⲆΔ: "img/night-player4.png",
    ⲆΔΔⵠⲆⲆⵠ: "img/day-player5.png",
    ΔⵠⵠᐃⲆΔᐃ: "img/night-player5.png",
    ΔⲆⵠΔΔᐃⵠ: "img/day-player6.png",
    ⲆⵠΔⵠⲆΔⲆ: "img/night-player6.png",
    ⲆⵠᐃΔⲆⵠⲆ: "img/day-player7.png",
    ᐃⲆⲆⲆⵠⵠⲆ: "img/night-player7.png",
    ᐃΔⵠΔᐃᐃⲆ: "img/day-player8.png",
    ᐃΔᐃⲆΔⲆⵠ: "img/night-player8.png",
    ⵠⲆᐃΔⲆⲆⵠ: "img/day-player9.png",
    ΔΔⵠⵠΔⵠⵠ: "img/night-player9.png",
    ᐃⵠΔⲆᐃᐃⲆ: "img/day-player10.png",
    ᐃⲆⲆΔΔᐃⵠ: "img/night-player10.png",
    ⵠⲆⵠΔᐃᐃⵠ: "img/day-player11.png",
    ⵠⵠΔΔⲆⲆⲆ: "img/night-player11.png",
    ⵠΔΔΔⵠⲆᐃ: "img/day-player12.png",
    ⲆΔΔᐃⵠᐃΔ: "img/night-player12.png",
    ΔⲆⵠΔᐃⵠⲆ: "img/day-player13.png",
    ΔⲆⲆⵠⲆᐃⲆ: "img/night-player13.png",
    ΔⵠΔⲆⵠⵠⲆ: "img/day-player14.png",
    ᐃΔⲆᐃⵠⵠⵠ: "img/night-player14.png",
    ⲆΔᐃᐃΔⲆⲆ: "img/day-player15.png",
    ⵠᐃᐃⵠΔᐃⲆ: "img/night-player15.png",
    ⵠᐃⵠⵠⵠⲆⵠ: "img/day-player16.png",
    ⲆΔⲆΔⲆᐃⲆ: "img/night-player16.png",
    ΔⵠΔᐃΔⵠΔ: "img/day-player17.png",
    ⵠⵠΔⲆΔⵠⲆ: "img/night-player17.png",
    ᐃⵠΔⲆⲆⲆᐃ: "img/day-player18.png",
    ⵠⲆⵠᐃΔΔⵠ: "img/night-player18.png",
    ΔⲆᐃΔⵠⲆΔ: "img/day-player19.png",
    ᐃⵠΔᐃᐃΔΔ: "img/night-player19.png",
    ⲆΔᐃΔᐃⵠΔ: "img/day-hand-player0.png",
    ⵠΔᐃΔⵠⵠⲆ: "img/night-hand-player0.png",
    ᐃᐃΔⲆᐃⵠⲆ: "img/day-hand-player1.png",
    ⲆⲆΔⲆᐃⵠΔ: "img/night-hand-player1.png",
    ⲆⲆΔᐃᐃⲆΔ: "img/day-hand-player2.png",
    ΔⵠᐃⲆΔΔᐃ: "img/night-hand-player22.png",
    ⵠⵠΔⲆⵠᐃⲆ: "img/day-hand-player3.png",
    ⲆⲆΔⵠⵠᐃⲆ: "img/night-hand-player33.png",
    ⵠΔΔⲆⵠΔΔ: "img/day-hand-player4.png",
    ΔΔΔⲆΔΔᐃ: "img/night-hand-player4.png",
    ⵠⵠᐃᐃᐃΔΔ: "img/day-hand-player5.png",
    ⲆΔⵠΔΔⲆⵠ: "img/night-hand-player5.png",
    ⲆⵠΔⵠⵠⲆⲆ: "img/day-hand-player6.png",
    ⲆΔΔᐃᐃΔΔ: "img/night-hand-player6.png",
    ᐃⵠᐃᐃⲆⲆⵠ: "img/day-hand-player7.png",
    ⲆᐃⵠⲆⲆΔΔ: "img/night-hand-player7.png",
    ΔᐃΔᐃᐃⵠⵠ: "img/day-hand-player8.png",
    ΔΔⵠᐃΔᐃΔ: "img/night-hand-player8.png",
    ⲆᐃⲆᐃᐃΔᐃ: "img/day-hand-player9.png",
    ⲆΔⲆⲆᐃΔᐃ: "img/night-hand-player9.png",
    ⵠⲆᐃⲆΔⵠΔ: "img/day-hand-player10.png",
    ⵠⵠᐃᐃΔⲆⵠ: "img/night-hand-player10.png",
    ᐃⲆⲆⲆⵠΔⵠ: "img/day-hand-player11.png",
    ΔⵠᐃⲆᐃⵠΔ: "img/night-hand-player11.png",
    ΔΔⵠᐃΔⵠΔ: "img/day-hand-player12.png",
    ⵠⲆΔⲆⵠⵠᐃ: "img/night-hand-player12.png",
    ⲆΔⵠⲆⲆΔⵠ: "img/day-hand-player13.png",
    ᐃⵠⲆΔⲆⵠⲆ: "img/night-hand-player13.png",
    ᐃᐃΔᐃⵠⵠⵠ: "img/day-hand-player14.png",
    ΔΔⵠΔᐃⲆΔ: "img/night-hand-player14.png",
    ⵠⵠᐃⵠⵠᐃⵠ: "img/day-hand-player15.png",
    ᐃⲆⲆⲆⵠᐃΔ: "img/night-hand-player15.png",
    ⲆΔΔᐃⵠΔⲆ: "img/day-hand-player16.png",
    ⵠΔⲆⲆⵠᐃᐃ: "img/night-hand-player16.png",
    ⲆᐃⲆⵠΔⲆⵠ: "img/day-hand-player17.png",
    ⵠⲆΔⵠᐃⲆᐃ: "img/night-hand-player17.png",
    ⵠᐃᐃⵠⲆⲆⲆ: "img/day-hand-player18.png",
    ⵠⲆⲆⲆΔΔΔ: "img/night-hand-player18.png",
    ⲆᐃⵠⲆᐃᐃᐃ: "img/day-hand-player19.png",
    ΔⵠᐃⲆⲆⲆⲆ: "img/night-hand-player19.png",
    ΔΔΔᐃⵠΔᐃ: "img/day-accessory4.png",
    ΔⲆⲆΔΔΔⲆ: "img/night-accessory4.png",
    ⵠᐃΔⲆᐃⲆΔ: "img/day-accessory9.png",
    ⲆᐃΔᐃⲆⵠⲆ: "img/night-accessory9.png",
    ᐃⵠᐃⲆᐃⲆᐃ: "img/day-accessory10.png",
    ⲆΔⵠⵠⲆΔⵠ: "img/night-accessory10.png",
    ⲆⵠᐃⲆᐃΔⲆ: "img/day-accessory11.png",
    ⵠΔⲆΔᐃᐃΔ: "img/night-accessory11.png",
    ⲆⲆᐃΔⵠᐃΔ: "img/day-accessory12.png",
    ΔⵠᐃⲆⵠⲆΔ: "img/night-accessory12.png",
    ⵠΔΔⲆⵠⲆⲆ: "img/day-bag.png",
    ᐃⵠᐃⵠᐃⲆᐃ: "img/night-bag.png",
    ΔⵠᐃᐃΔⲆᐃ: "img/inv-bag-out.png",
    ⵠⵠⲆΔⲆⵠⲆ: "img/inv-bag-in.png",
    ⲆᐃⵠⵠⲆᐃΔ: "img/inv-bag-click.png",
    ᐃⲆⵠΔⲆⵠⵠ: "img/day-pitchfork.png",
    ΔΔᐃΔᐃⵠⲆ: "img/night-pitchfork.png",
    ΔᐃⵠᐃⲆΔⵠ: "img/inv-pitchfork-out.png",
    Ⲇⵠⵠᐃᐃᐃⵠ: "img/inv-pitchfork-in.png",
    ⲆᐃΔΔⵠΔΔ: "img/inv-pitchfork-click.png",
    ⵠⲆⵠⵠΔⲆⵠ: "img/inv-wood-spike-door-out.png",
    ΔⲆⲆᐃⵠᐃⲆ: "img/inv-wood-spike-door-in.png",
    ᐃⲆᐃⲆΔᐃΔ: "img/inv-wood-spike-door-click.png",
    ΔΔⵠΔΔⵠⵠ: "img/inv-stone-spike-door-out.png",
    ΔⵠⵠΔⵠⵠᐃ: "img/inv-stone-spike-door-in.png",
    ⵠΔᐃΔᐃΔⲆ: "img/inv-stone-spike-door-click.png",
    ⲆⲆᐃᐃⵠⵠⲆ: "img/inv-gold-spike-door-out.png",
    ⵠΔᐃᐃΔᐃⲆ: "img/inv-gold-spike-door-in.png",
    ΔⵠΔᐃΔⲆⵠ: "img/inv-gold-spike-door-click.png",
    ⵠⲆⵠΔⵠⲆⵠ: "img/inv-diamond-spike-door-out.png",
    ΔⲆᐃᐃⲆⵠⲆ: "img/inv-diamond-spike-door-in.png",
    ⵠⲆᐃⲆⵠᐃΔ: "img/inv-diamond-spike-door-click.png",
    ᐃⵠⲆᐃⲆⲆⵠ: "img/inv-amethyst-spike-door-out.png",
    ᐃⵠΔΔⵠᐃⵠ: "img/inv-amethyst-spike-door-in.png",
    ⲆⲆᐃⵠⵠⵠᐃ: "img/inv-amethyst-spike-door-click.png",
    ᐃᐃⲆΔⲆᐃΔ: "img/day-wood-spike-door.png",
    ᐃᐃⲆⵠΔΔᐃ: "img/night-wood-spike-door.png",
    ⲆᐃⲆᐃᐃⲆⵠ: "img/day-stone-spike-door.png",
    ⵠΔⵠⵠᐃᐃⲆ: "img/night-stone-spike-door.png",
    ᐃⵠⵠᐃⵠⵠⲆ: "img/day-gold-spike-door.png",
    ⲆΔⲆⲆⵠⵠⵠ: "img/night-gold-spike-door.png",
    ᐃⲆⲆΔᐃᐃᐃ: "img/day-diamond-spike-door.png",
    ᐃᐃⵠⵠⵠⵠⵠ: "img/night-diamond-spike-door.png",
    ΔΔⲆⵠⵠⵠᐃ: "img/day-amethyst-spike-door.png",
    ᐃᐃⵠΔⲆⵠⵠ: "img/night-amethyst-spike-door.png",
    ΔⲆΔⲆᐃⲆⵠ: "img/inv-reidite-spike-door-out.png",
    ⲆⲆⵠΔⵠⵠⵠ: "img/inv-reidite-spike-door-in.png",
    ⲆⵠⲆᐃᐃⵠⵠ: "img/inv-reidite-spike-door-click.png",
    ⵠⵠⵠΔΔⵠᐃ: "img/inv-reidite-door-out.png",
    ᐃΔⵠⲆΔΔⲆ: "img/inv-reidite-door-in.png",
    ⵠΔΔⲆΔΔΔ: "img/inv-reidite-door-click.png",
    ⲆⵠᐃⲆᐃⵠⵠ: "img/inv-reidite-spike-out.png",
    ⵠΔⲆᐃⵠⵠⲆ: "img/inv-reidite-spike-in.png",
    ⵠᐃΔⲆΔⲆᐃ: "img/inv-reidite-spike-click.png",
    ⵠΔⲆⵠᐃⲆᐃ: "img/inv-reidite-wall-out.png",
    ᐃᐃΔⵠⵠⵠΔ: "img/inv-reidite-wall-in.png",
    ΔΔⵠΔΔⲆΔ: "img/inv-reidite-wall-click.png",
    ᐃⵠⵠⲆⲆΔΔ: "img/day-reidite-wall.png",
    ᐃᐃⲆⵠΔⵠⵠ: "img/night-reidite-wall.png",
    ΔⵠⲆΔᐃⵠⵠ: "img/day-reidite-door.png",
    ⲆⵠᐃᐃⵠⲆᐃ: "img/night-reidite-door.png",
    ᐃⵠΔⲆⲆⵠᐃ: "img/day-reidite-spike.png",
    ⲆΔⲆΔⵠⲆⲆ: "img/night-reidite-spike.png",
    ᐃᐃⲆⵠᐃⵠᐃ: "img/day-reidite-spike-door.png",
    ΔⵠΔΔⵠⲆⵠ: "img/night-reidite-spike-door.png",
    ⵠⲆⲆΔᐃⵠⲆ: "img/inv-reidite-pickaxe-out.png",
    ⲆΔⵠᐃᐃᐃⲆ: "img/inv-reidite-pickaxe-in.png",
    ΔⲆⵠΔⲆᐃⵠ: "img/inv-reidite-pickaxe-click.png",
    ΔⲆΔΔⲆⲆᐃ: "img/day-reidite-pickaxe.png",
    ᐃⲆΔΔⲆᐃⵠ: "img/night-reidite-pickaxe.png",
    ΔⲆⵠⲆΔᐃΔ: "img/inv-reidite-hammer-out.png",
    ⵠⲆᐃΔᐃᐃΔ: "img/inv-reidite-hammer-in.png",
    ᐃⲆⵠⵠⲆⲆΔ: "img/inv-reidite-hammer-click.png",
    ⲆΔⵠⵠᐃᐃΔ: "img/day-reidite-hammer.png",
    ⵠⲆΔⵠᐃⲆⵠ: "img/night-reidite-hammer.png",
    ⲆⲆΔⲆΔΔᐃ: "img/day-watermelon1.png",
    ⲆᐃⵠⲆⵠⲆᐃ: "img/night-watermelon1.png",
    ⲆᐃᐃⵠⲆΔᐃ: "img/day-watermelon-dried1.png",
    ⵠᐃΔᐃⵠⲆᐃ: "img/night-watermelon-dried1.png",
    ⲆΔᐃᐃᐃⵠΔ: "img/inv-watermelon-out.png",
    ᐃⵠΔΔΔⵠⵠ: "img/inv-watermelon-in.png",
    ⲆᐃⲆᐃⵠⵠᐃ: "img/inv-watermelon-click.png",
    ⲆⲆⵠⵠⵠⵠⲆ: "img/day-boat.png",
    ⲆⲆⵠᐃᐃΔᐃ: "img/night-boat.png",
    ⵠᐃⲆⲆⵠⵠⲆ: "img/day-boat-wave.png",
    ΔⵠⵠⲆⵠᐃᐃ: "img/night-boat-wave.png",
    ᐃⲆΔⵠᐃᐃⵠ: "img/inv-boat-out.png",
    ᐃΔΔᐃᐃΔᐃ: "img/inv-boat-in.png",
    ⵠΔᐃΔⲆᐃΔ: "img/inv-boat-click.png",
    ⵠⵠᐃᐃᐃΔᐃ: "img/day-plane.png",
    ⲆΔⵠΔΔᐃⲆ: "img/night-plane.png",
    ⲆⲆᐃⲆⲆⵠᐃ: "img/inv-plane-out.png",
    ΔⲆᐃΔΔΔⲆ: "img/inv-plane-in.png",
    ΔⵠᐃⲆΔⲆⲆ: "img/inv-plane-click.png",
    ⵠⵠᐃᐃⲆΔΔ: "img/day-sled.png",
    ΔᐃⵠᐃⵠⵠΔ: "img/night-sled.png",
    ΔⲆⲆᐃⲆΔΔ: "img/day-sled-wave.png",
    ⲆᐃΔⵠΔⵠⵠ: "img/night-sled-wave.png",
    ΔᐃⵠΔΔⲆΔ: "img/inv-sled-out.png",
    ᐃⲆᐃᐃᐃⲆⵠ: "img/inv-sled-in.png",
    ⲆⵠᐃⲆΔⵠⵠ: "img/inv-sled-click.png",
    ᐃΔᐃᐃΔΔⵠ: "img/day-pirate-hat.png",
    ⲆⵠⲆⵠⲆΔᐃ: "img/night-pirate-hat.png",
    ⲆⲆⲆᐃΔⵠΔ: "img/inv-pirate-hat-out.png",
    ΔΔΔⵠᐃΔⲆ: "img/inv-pirate-hat-in.png",
    ᐃⵠⲆᐃⲆᐃᐃ: "img/inv-pirate-hat-click.png",
    ΔⵠⵠΔⲆⲆᐃ: "img/day-penguin.png",
    ⲆᐃΔⲆⲆΔΔ: "img/night-penguin.png",
    ΔⵠΔⲆⲆᐃΔ: "img/hurt-penguin.png",
    ⲆⲆⵠᐃⵠ: "img/inv-penguin-feather-click.png",
    ΔⲆΔⵠᐃ: "img/inv-hawk-feather-click.png",
    ⲆⲆΔᐃⲆⵠⲆ: "img/day-boar1.png",
    ⲆⲆⵠᐃΔᐃⲆ: "img/day-boar1-tamed.png",
    ⵠᐃΔᐃⵠⲆⵠ: "img/day-boar1-angry.png",
    ⵠⲆᐃⵠⵠΔⲆ: "img/night-boar1.png",
    ᐃᐃΔΔⵠΔⲆ: "img/night-boar1-tamed.png",
    ⲆᐃⲆΔⵠᐃⲆ: "img/night-boar1-angry.png",
    ⵠΔᐃᐃΔᐃⵠ: "img/inv-mount-boar-out.png",
    ⵠⲆⵠᐃⲆΔᐃ: "img/inv-mount-boar-in.png",
    ΔΔⲆᐃⵠΔᐃ: "img/inv-mount-boar-click.png",
    ᐃᐃᐃΔΔⲆᐃ: "img/day-hurt-boar1.png",
    ΔᐃΔΔΔᐃⲆ: "img/boar1-step.png",
    ⲆΔⲆᐃᐃᐃΔ: "img/day-saddle1.png",
    ᐃⲆⲆᐃⵠᐃⲆ: "img/night-saddle1.png",
    ΔⵠᐃᐃⲆΔΔ: "img/inv-saddle-out.png",
    ⵠⵠΔⲆᐃⲆⲆ: "img/inv-saddle-in.png",
    ᐃⵠΔΔᐃΔⵠ: "img/inv-saddle-click.png",
    ⵠⵠⲆⵠᐃⲆⵠ: "img/day-magic-wand0.png",
    ᐃΔΔᐃᐃΔⵠ: "img/night-magic-wand0.png",
    ⵠΔᐃⵠΔᐃΔ: "img/day-light-wand1.png",
    ⵠΔΔⲆΔΔⲆ: "img/night-light-wand1.png",
    ⲆᐃⲆⲆⵠΔΔ: "img/inv-magic-wand0-out.png",
    ⲆⲆⲆⵠⵠᐃⲆ: "img/inv-magic-wand0-in.png",
    ⲆᐃⵠᐃⲆⵠⲆ: "img/inv-magic-wand0-click.png",
    ᐃΔᐃⲆⲆΔΔ: "img/day-magic-wand1.png",
    ᐃⲆΔⲆΔⲆΔ: "img/night-magic-wand1.png",
    ⲆᐃᐃⵠⲆᐃⵠ: "img/day-light-wand0.png",
    ⲆᐃΔᐃΔⵠᐃ: "img/night-light-wand0.png",
    ⵠᐃⲆⵠⵠⲆΔ: "img/inv-magic-wand1-out.png",
    ᐃⵠᐃⵠⲆΔⲆ: "img/inv-magic-wand1-in.png",
    ΔΔⲆⵠΔᐃⵠ: "img/inv-magic-wand1-click.png",
    ⵠᐃᐃᐃⵠᐃⵠ: "img/day-firefly.png",
    ⲆᐃΔᐃⲆⲆᐃ: "img/night-firefly.png",
    ᐃΔᐃΔΔⵠᐃ: "img/hurt-firefly.png",
    ⵠΔΔⵠᐃⵠΔ: "img/inv-firefly-out.png",
    ⵠⲆΔΔΔⵠⵠ: "img/inv-firefly-in.png",
    ⵠⵠΔΔⲆᐃΔ: "img/inv-firefly-click.png",
    ΔᐃΔⲆⵠΔⵠ: "img/day-baby-dragon.png",
    ⲆⵠᐃⲆᐃⲆΔ: "img/night-baby-dragon.png",
    ᐃᐃⵠΔΔⵠⵠ: "img/day-baby-dragon-angry.png",
    ᐃⵠⵠⵠⲆΔⲆ: "img/night-baby-dragon-angry.png",
    ⵠΔᐃⵠᐃⲆⵠ: "img/day-baby-dragon-tamed.png",
    ΔⲆⵠⲆᐃⲆᐃ: "img/night-baby-dragon-tamed.png",
    ⵠΔΔⵠⲆⲆⲆ: "img/day-wing-dragon-left-angry.png",
    ⲆⵠⲆΔᐃΔⵠ: "img/night-dragon-wing-left-angry.png",
    ⵠΔⵠΔⲆⲆⲆ: "img/day-wing-dragon-right-angry.png",
    ⵠⵠᐃᐃⵠΔⲆ: "img/night-dragon-wing-right-angry.png",
    ⲆΔΔⵠⵠΔⲆ: "img/day-wing-dragon-left-tamed.png",
    ⵠᐃΔⵠⵠᐃⲆ: "img/night-dragon-wing-left-tamed.png",
    ⵠⲆⵠΔᐃⵠⵠ: "img/day-wing-dragon-right-tamed.png",
    ᐃᐃᐃᐃΔΔⵠ: "img/night-wing-dragon-right-tamed.png",
    ᐃⵠΔⲆΔⵠΔ: "img/day-wing-dragon-left.png",
    ⲆΔⵠⲆᐃᐃᐃ: "img/night-dragon-wing-left.png",
    ΔⵠⲆΔᐃⵠΔ: "img/day-wing-dragon-right.png",
    ⲆᐃⵠΔⲆⲆᐃ: "img/night-wing-dragon-right.png",
    ΔⲆⵠⲆⲆΔᐃ: "img/hurt-baby-dragon.png",
    ΔⲆᐃⵠᐃᐃⵠ: "img/hurt-baby-dragon-wing-left.png",
    ⲆⲆᐃⲆΔΔΔ: "img/hurt-baby-dragon-wing-right.png",
    ΔⲆΔΔⲆⵠⵠ: "img/inv-baby-dragon-out.png",
    ΔΔⲆⵠᐃⲆⵠ: "img/inv-baby-dragon-in.png",
    ΔⵠⲆΔⲆⵠΔ: "img/inv-baby-dragon-click.png",
    ⲆⲆᐃᐃⵠⵠᐃ: "img/day-baby-lava.png",
    ⲆᐃᐃⵠᐃⲆΔ: "img/night-baby-lava.png",
    ᐃᐃᐃΔⵠⲆⵠ: "img/day-baby-lava-angry.png",
    ΔⲆᐃΔⵠⵠⵠ: "img/night-baby-lava-angry.png",
    ⲆᐃⵠⵠᐃⲆⵠ: "img/day-baby-lava-tamed.png",
    ⵠⲆⲆⲆⵠⲆᐃ: "img/night-baby-lava-tamed.png",
    ᐃⲆᐃᐃᐃᐃⲆ: "img/day-wing-lava-left-angry.png",
    ⲆΔⲆⵠᐃᐃⲆ: "img/night-wing-lava-left-angry.png",
    ΔΔⲆⲆⲆᐃⲆ: "img/day-wing-lava-right-angry.png",
    ⲆᐃΔΔᐃⵠᐃ: "img/night-wing-lava-right-angry.png",
    ⵠⲆᐃⲆⲆᐃᐃ: "img/day-wing-lava-left-tamed.png",
    ⲆΔⲆⲆΔⲆΔ: "img/night-wing-lava-left-tamed.png",
    ΔᐃⵠⵠⵠᐃⲆ: "img/day-wing-lava-right-tamed.png",
    ⲆᐃΔⵠⵠⵠᐃ: "img/night-wing-lava-right-tamed.png",
    ⲆᐃᐃⲆⲆΔΔ: "img/day-wing-lava-left.png",
    ⲆⵠΔⲆⲆⵠⵠ: "img/night-wing-lava-left.png",
    ᐃᐃΔΔⵠⲆᐃ: "img/day-wing-lava-right.png",
    ΔⵠΔⲆⲆⲆⵠ: "img/night-wing-lava-right.png",
    ⵠΔΔⲆⵠⲆᐃ: "img/hurt-baby-lava.png",
    ⲆⵠᐃᐃⲆᐃⲆ: "img/hurt-baby-lava-wing-left.png",
    ⲆΔⵠΔⵠⲆΔ: "img/hurt-baby-lava-wing-right.png",
    ΔⵠᐃΔᐃⲆⵠ: "img/inv-baby-lava-out.png",
    ⲆⵠΔⵠⲆⲆΔ: "img/inv-baby-lava-in.png",
    ⲆⲆΔⵠΔⲆⵠ: "img/inv-baby-lava-click.png",
    ⲆⵠΔᐃⵠⵠΔ: "img/day-falcon.png",
    ⵠᐃⵠᐃᐃΔⵠ: "img/night-falcon.png",
    ⵠⵠⲆᐃⵠΔⲆ: "img/day-falcon-angry.png",
    ΔⲆᐃΔᐃΔᐃ: "img/night-falcon-angry.png",
    ᐃᐃⵠⵠⵠⵠᐃ: "img/day-falcon-ground.png",
    ⲆⵠⲆⲆⵠⵠⵠ: "img/night-falcon-ground.png",
    ΔⵠᐃᐃᐃΔⵠ: "img/day-falcon-ground-angry.png",
    ᐃⲆᐃⵠΔΔᐃ: "img/night-falcon-ground-angry.png",
    ⲆΔᐃⵠΔΔⲆ: "img/day-falcon-wings-left.png",
    ΔⵠᐃΔᐃΔⵠ: "img/night-falcon-wings-left.png",
    ᐃⲆⲆⵠⵠⲆⲆ: "img/day-falcon-wings-right.png",
    ᐃᐃⵠⲆⲆⲆⵠ: "img/night-falcon-wings-right.png",
    ⵠⲆⵠⵠᐃⵠⲆ: "img/day-falcon-angry-wings-left.png",
    ⵠᐃⵠⲆΔⲆⲆ: "img/night-falcon-angry-wings-left.png",
    ⲆⲆᐃⵠΔΔΔ: "img/day-falcon-angry-wings-right.png",
    ΔΔᐃΔⵠΔⲆ: "img/night-falcon-angry-wings-right.png",
    ᐃΔᐃᐃΔΔΔ: "img/day-falcon-wings-left-tamed.png",
    ᐃΔⲆⲆᐃⵠⲆ: "img/night-falcon-wings-left-tamed.png",
    ⲆⵠⲆᐃΔΔᐃ: "img/day-falcon-wings-right-tamed.png",
    ᐃⲆⲆⲆⲆΔⵠ: "img/night-falcon-wings-right-tamed.png",
    ⲆⲆⵠΔΔΔⲆ: "img/day-falcon-tamed.png",
    ᐃⵠⲆᐃΔΔΔ: "img/night-falcon-tamed.png",
    ⲆⲆⲆⲆⲆᐃᐃ: "img/hurt-falcon-ground.png",
    ᐃⲆⲆⵠⲆⵠⲆ: "img/hurt-falcon.png",
    ⲆⲆⵠᐃᐃᐃⲆ: "img/hurt-falcon-wings-left.png",
    ΔⵠⵠᐃⵠΔᐃ: "img/hurt-falcon-wings-right.png",
    ⲆΔⵠᐃⵠⲆⲆ: "img/inv-falcon-out.png",
    ⵠⵠΔⵠⵠΔΔ: "img/inv-falcon-in.png",
    ⲆⲆⵠΔᐃⵠΔ: "img/inv-falcon-click.png",
    ⲆⲆᐃⵠᐃⵠⵠ: "img/day-crab-boss.png",
    ⵠⵠⲆΔⲆⲆⵠ: "img/night-crab-boss.png",
    ΔⲆᐃⵠΔᐃⲆ: "img/day-crab-boss-angry.png",
    ⲆᐃⲆᐃⲆⵠⲆ: "img/night-crab-boss-angry.png",
    ΔΔⵠᐃⵠΔᐃ: "img/day-crab-boss-tamed.png",
    ΔⲆΔⵠⲆΔᐃ: "img/night-crab-boss-tamed.png",
    ᐃⵠΔⵠᐃᐃⵠ: "img/day-crab-boss-claw-left-attack.png",
    ᐃᐃᐃΔΔΔΔ: "img/night-crab-boss-claw-left-attack.png",
    ⵠⲆΔⵠⲆΔⵠ: "img/day-crab-boss-claw-right-attack.png",
    ᐃΔⲆᐃⵠΔⵠ: "img/night-crab-boss-claw-right-attack.png",
    ⲆᐃⲆⵠΔᐃΔᐃⲆ: "img/day-crab-boss-claw-left-tamed.png",
    ⲆⵠΔᐃⲆⵠⵠⲆΔ: "img/night-crab-boss-claw-left-tamed.png",
    ΔⲆⵠᐃΔΔᐃⵠᐃ: "img/day-crab-boss-claw-right-tamed.png",
    ΔⵠᐃᐃᐃⲆⵠⵠΔ: "img/night-crab-boss-claw-right-tamed.png",
    ⵠⲆⲆⵠⲆΔⲆ: "img/day-crab-boss-claw-left.png",
    ΔⲆⲆΔⲆⲆⲆ: "img/night-crab-boss-claw-left.png",
    ⵠᐃⵠΔⲆΔΔ: "img/day-crab-boss-claw-right.png",
    ⲆⵠᐃᐃⲆⵠⲆ: "img/night-crab-boss-claw-right.png",
    ΔⲆⲆᐃⵠΔⵠ: "img/hurt-crab-boss.png",
    ⵠᐃΔᐃᐃⵠᐃ: "img/hurt-crab-boss-claw-left.png",
    ⵠⲆⲆⵠᐃᐃᐃ: "img/hurt-crab-boss-claw-right.png",
    ⲆᐃΔⵠⲆⲆⲆ: "img/heal-crab-boss.png",
    ⵠΔᐃΔΔΔⲆ: "img/heal-crab-boss-claw-left.png",
    ⲆΔⵠᐃΔΔⵠ: "img/heal-crab-boss-claw-right.png",
    ⵠⵠⵠᐃⲆΔΔ: "img/crab-step.png",
    ᐃⲆⵠΔΔⵠᐃ: "img/inv-crab-boss-out.png",
    ΔⵠᐃΔⵠⲆⲆ: "img/inv-crab-boss-in.png",
    ⲆⵠΔⵠᐃᐃⵠ: "img/inv-crab-boss-click.png",
    ΔᐃΔⵠΔᐃᐃ: "img/day-cactus10.png",
    ⲆⲆⵠⲆΔᐃⲆ: "img/night-cactus10.png",
    ⲆᐃᐃⲆᐃⲆᐃ: "img/inv-cactus-out.png",
    ⵠᐃⲆⵠΔΔⵠ: "img/inv-cactus-in.png",
    ᐃΔⲆΔᐃⲆΔ: "img/inv-cactus-click.png",
    ᐃⲆΔⵠⵠⵠⵠ: "img/day-scorpion.png",
    ΔⵠⵠⲆᐃⲆᐃ: "img/night-scorpion.png",
    ⲆⲆΔΔⲆⲆⲆ: "img/day-scorpion-hand-left.png",
    ⵠΔΔⲆᐃᐃΔ: "img/night-scorpion-hand-left.png",
    ΔΔⲆⲆⵠⲆⵠ: "img/day-scorpion-hand-right.png",
    Δᐃᐃⵠⵠᐃᐃ: "img/night-scorpion-hand-right.png",
    ΔᐃΔᐃⲆᐃⵠ: "img/hurt-scorpion.png",
    ΔⵠᐃΔΔΔᐃ: "img/hurt-scorpion-hand-left.png",
    ⵠᐃΔᐃᐃΔᐃ: "img/hurt-scorpion-hand-right.png",
    ΔΔⵠⵠΔΔⵠ: "img/day-vulture.png",
    ᐃⵠΔᐃⵠᐃᐃ: "img/night-vulture.png",
    ΔⵠᐃᐃΔⲆⲆ: "img/day-vulture-angry.png",
    ΔᐃᐃⵠΔⲆᐃ: "img/night-vulture-angry.png",
    ΔΔⲆⵠΔⲆΔ: "img/day-vulture-ground.png",
    ᐃⵠⲆⲆΔⲆᐃ: "img/night-vulture-ground.png",
    ⲆⲆⵠⵠΔⲆⲆ: "img/day-vulture-ground-angry.png",
    ᐃⲆⵠⵠⲆⲆⵠ: "img/night-vulture-ground-angry.png",
    ᐃΔᐃⵠΔⲆΔ: "img/day-vulture-wings-left.png",
    ᐃᐃᐃᐃⵠᐃⵠ: "img/night-vulture-wings-left.png",
    ΔΔⵠᐃᐃᐃΔ: "img/day-vulture-wings-right.png",
    ⲆⵠᐃⲆΔΔΔ: "img/night-vulture-wings-right.png",
    ⲆⵠΔⵠⲆⵠⵠ: "img/day-vulture-angry-wings-left.png",
    ⲆΔᐃⵠⲆⵠⵠ: "img/night-vulture-angry-wings-left.png",
    ᐃΔⲆⵠᐃⵠⵠ: "img/day-vulture-angry-wings-right.png",
    ⵠΔⲆᐃⵠᐃⲆ: "img/night-vulture-angry-wings-right.png",
    ⵠΔⵠΔⵠⲆⲆ: "img/day-vulture-wings-left-tamed.png",
    ΔⲆⲆⵠΔᐃΔ: "img/night-vulture-wings-left-tamed.png",
    ᐃᐃⲆΔⲆⲆⲆ: "img/day-vulture-wings-right-tamed.png",
    ᐃΔⵠⵠᐃΔⵠ: "img/night-vulture-wings-right-tamed.png",
    ΔⵠΔᐃⲆⲆⵠ: "img/day-vulture-tamed.png",
    ᐃⲆⲆⵠΔⲆⵠ: "img/night-vulture-tamed.png",
    ⵠⵠΔΔⲆᐃⵠ: "img/hurt-vulture-ground.png",
    ⲆⵠⵠᐃΔᐃᐃ: "img/hurt-vulture.png",
    ᐃᐃⵠⲆᐃᐃⲆ: "img/hurt-vulture-wings-left.png",
    ⲆⵠⵠΔᐃⲆⵠ: "img/hurt-vulture-wings-right.png",
    ᐃⵠⲆⵠⵠⵠΔ: "img/day-aloe-vera.png",
    ΔᐃᐃΔⲆⲆⲆ: "img/night-aloe-vera.png",
    ⲆΔᐃΔⲆⲆᐃ: "img/inv-aloe-vera-out.png",
    ⵠⵠⲆᐃᐃⵠⲆ: "img/inv-aloe-vera-in.png",
    ᐃⲆᐃⲆⲆⲆᐃ: "img/inv-aloe-vera-click.png",
    ᐃΔᐃⵠⵠΔᐃ: "img/day-aloe-vera-grown.png",
    ᐃᐃΔⵠⲆⲆⲆ: "img/night-aloe-vera-grown.png",
    ΔᐃᐃⵠᐃⲆⵠ: "img/day-aloe-vera-dried.png",
    ⵠᐃΔᐃΔⲆⲆ: "img/night-aloe-vera-dried.png",
    ΔⵠⵠΔᐃΔⵠ: "img/day-turban1.png",
    ΔⵠⲆⵠⵠᐃⲆ: "img/night-turban1.png",
    ⲆᐃᐃⲆΔΔⵠ: "img/day-turban2.png",
    ᐃΔᐃⵠⵠⵠⲆ: "img/night-turban2.png",
    ⲆⲆΔⵠᐃⲆⵠ: "img/inv-turban2-out.png",
    ⵠⵠⲆⵠⵠᐃⲆ: "img/inv-turban2-in.png",
    ΔΔⵠΔⵠⲆΔ: "img/inv-turban2-click.png",
    ⵠΔⵠᐃⵠΔⵠ: "img/inv-turban1-out.png",
    ⵠⵠⵠⵠⵠⵠΔ: "img/inv-turban1-in.png",
    ⵠⲆⲆⲆᐃⲆᐃ: "img/inv-turban1-click.png",
    ᐃΔⵠⲆⲆΔⵠ: "img/day-pitchfork2.png",
    ΔⵠⵠᐃᐃΔⲆ: "img/night-pitchfork2.png",
    ΔⵠⵠᐃΔⵠⲆ: "img/inv-pitchfork2-out.png",
    ΔᐃᐃⵠⲆᐃᐃ: "img/inv-pitchfork2-in.png",
    ⲆΔⵠⵠΔΔⵠ: "img/inv-pitchfork2-click.png",
    ⲆⲆⵠⵠⵠⲆⲆ: "img/inv-gold-fork-click.png",
    ⲆΔΔⵠⵠⲆⲆ: "img/inv-pilot-glasses-click.png",
    ⲆⲆΔᐃᐃᐃⲆ: "img/day-pilot-helmet.png",
    Ⲇᐃᐃᐃⵠⵠᐃ: "img/night-pilot-helmet.png",
    ΔᐃᐃᐃΔᐃⵠ: "img/inv-pilot-helmet-out.png",
    ⲆΔᐃⲆⵠⵠⵠ: "img/inv-pilot-helmet-in.png",
    ΔⲆⲆΔⲆΔΔ: "img/inv-pilot-helmet-click.png",
    ⵠᐃⵠⲆᐃᐃⵠΔⵠ: "img/day-sandworm0.png",
    ⲆΔⲆⵠΔᐃⵠ: "img/day-sandworm1.png",
    ᐃᐃΔΔⲆⵠΔ: "img/day-sandworm2.png",
    ⲆⵠⲆⲆᐃⵠⵠᐃⵠ: "img/night-sandworm0.png",
    ᐃᐃΔᐃᐃΔᐃ: "img/night-sandworm1.png",
    ⲆⵠⲆᐃⲆⲆᐃ: "img/night-sandworm2.png",
    ΔⲆⲆᐃᐃΔᐃ: "img/hurt-sandworm0.png",
    ᐃⲆᐃⲆᐃⵠⲆ: "img/hurt-sandworm1.png",
    ⲆⵠⲆΔΔⲆⵠ: "img/hurt-sandworm2.png",
    ΔⲆΔⵠⲆ: "img/inv-vulture-feather-click.png",
    ⵠΔᐃᐃΔⲆΔ: "img/day-emerald0.png",
    ΔⵠΔⲆᐃⵠⵠ: "img/night-emerald0.png",
    ΔⵠⲆᐃΔΔⲆ: "img/day-emerald1.png",
    ΔⲆⲆⲆΔⵠᐃ: "img/night-emerald1.png",
    ⵠⲆⵠⵠΔⲆΔ: "img/day-emerald2.png",
    ΔΔᐃᐃΔΔᐃ: "img/night-emerald2.png",
    ΔΔⵠⵠⵠ: "img/inv-emerald-click.png",
    ⲆᐃⲆⵠⲆⵠΔ: "img/inv-sworm-juice-out.png",
    ᐃᐃⵠΔⵠⲆᐃ: "img/inv-sworm-juice-in.png",
    ΔⵠΔⵠⲆⵠⵠ: "img/inv-sworm-juice-click.png",
    ⵠΔᐃΔⲆᐃⲆ: "img/day-point-machine.png",
    ᐃⵠΔⵠⲆⵠᐃ: "img/night-point-machine.png",
    ⵠⲆᐃᐃⲆᐃᐃ: "img/day-point-machine-hole.png",
    ⵠⵠⵠⵠΔⵠⲆ: "img/night-point-machine-hole.png",
    ⵠⲆΔⲆᐃᐃᐃ: "img/day-point-machine-ground.png",
    ⵠⵠⵠⵠᐃΔⵠ: "img/night-point-machine-ground.png",
    ⲆⵠᐃᐃΔΔⲆ: "img/day-point-machine-rotate.png",
    ⲆΔⲆΔⵠᐃᐃ: "img/night-point-machine-rotate.png",
    ΔΔᐃⵠᐃⲆΔ: "img/inv-point-machine-out.png",
    ⲆΔᐃⲆΔΔⲆ: "img/inv-point-machine-in.png",
    Ⲇⵠᐃᐃᐃᐃᐃ: "img/inv-point-machine-click.png",
    ᐃΔΔⵠΔⲆᐃ: "img/day-extractor-machine0-stone.png",
    ⵠΔΔⲆΔΔᐃ: "img/night-extractor-machine0-stone.png",
    ⲆᐃΔᐃᐃⲆⲆ: "img/day-extractor-machine-stone.png",
    ⵠⲆΔΔᐃᐃΔ: "img/night-extractor-machine-stone.png",
    ΔᐃᐃΔⵠᐃΔ: "img/inv-extractor-machine-stone-out.png",
    ⵠΔΔⵠΔΔᐃ: "img/inv-extractor-machine-stone-in.png",
    ⵠᐃⲆⵠΔⵠⲆ: "img/inv-extractor-machine-stone-click.png",
    ⲆⲆⵠᐃⲆΔⵠ: "img/day-extractor-machine0-gold.png",
    ᐃⵠᐃⲆᐃⵠΔ: "img/night-extractor-machine0-gold.png",
    ᐃΔΔΔⲆΔᐃ: "img/day-extractor-machine-gold.png",
    ⲆⲆΔΔⵠⲆⵠ: "img/night-extractor-machine-gold.png",
    ᐃⵠΔΔⵠᐃⲆ: "img/inv-extractor-machine-gold-out.png",
    ⵠⵠᐃⲆⵠᐃⲆ: "img/inv-extractor-machine-gold-in.png",
    ⲆΔⵠᐃᐃⵠᐃ: "img/inv-extractor-machine-gold-click.png",
    ⲆᐃⲆΔⵠΔⲆ: "img/day-extractor-machine0-diamond.png",
    ⲆᐃᐃᐃⲆⲆΔ: "img/night-extractor-machine0-diamond.png",
    ⵠᐃᐃⵠⵠⲆᐃ: "img/day-extractor-machine-diamond.png",
    ᐃⵠΔⵠⲆΔᐃ: "img/night-extractor-machine-diamond.png",
    ΔⵠΔᐃᐃⲆᐃ: "img/inv-extractor-machine-diamond-out.png",
    ᐃⵠΔⲆⲆⲆⲆ: "img/inv-extractor-machine-diamond-in.png",
    ᐃⵠᐃᐃᐃΔⵠ: "img/inv-extractor-machine-diamond-click.png",
    ᐃⵠΔⲆΔᐃᐃ: "img/day-extractor-machine0-amethyst.png",
    ΔᐃᐃΔⲆᐃᐃ: "img/night-extractor-machine0-amethyst.png",
    ⵠⵠⵠΔⲆⵠⲆ: "img/day-extractor-machine-amethyst.png",
    ᐃⲆⲆⵠⲆᐃΔ: "img/night-extractor-machine-amethyst.png",
    ⵠΔᐃⲆᐃΔᐃ: "img/inv-extractor-machine-amethyst-out.png",
    ΔΔΔⵠⲆΔᐃ: "img/inv-extractor-machine-amethyst-in.png",
    ᐃⲆⲆᐃᐃᐃᐃ: "img/inv-extractor-machine-amethyst-click.png",
    ⲆᐃⵠⲆⲆᐃᐃ: "img/day-extractor-machine0-reidite.png",
    ᐃᐃᐃΔⵠⲆᐃ: "img/night-extractor-machine0-reidite.png",
    ΔΔⲆⵠⲆⵠᐃ: "img/day-extractor-machine-reidite.png",
    ΔⵠΔⵠⵠΔΔ: "img/night-extractor-machine-reidite.png",
    ⵠᐃⲆᐃᐃΔⲆ: "img/inv-extractor-machine-reidite-out.png",
    ΔⲆΔΔᐃΔⵠ: "img/inv-extractor-machine-reidite-in.png",
    ᐃᐃᐃⵠⵠⲆΔ: "img/inv-extractor-machine-reidite-click.png",
    ΔⵠᐃΔⲆⵠⲆ: "img/extractor-cases.png",
    ᐃⲆᐃΔΔⵠⲆ: "img/day-golden-hen.png",
    ᐃΔⵠᐃⲆᐃᐃ: "img/night-golden-hen.png",
    ᐃᐃᐃⵠⲆⵠᐃ: "img/day-golden-chicken.png",
    ⲆⲆᐃᐃᐃⲆⲆ: "img/night-golden-chicken.png",
    ⲆᐃⲆⲆⲆⵠⲆ: "img/hurt-golden-hen.png",
    ᐃᐃⵠᐃᐃᐃᐃ: "img/hurt-golden-chicken.png",
    ᐃΔᐃΔⲆΔⵠ: "img/logo-interface.png",
    ΔΔᐃⵠΔᐃⵠ: "img/forest-mode-hover.png",
    ⵠⲆⲆᐃᐃⲆⵠ: "img/normal-mode-hover.png",
    ΔΔᐃᐃⲆᐃⵠ: "img/vampire-mode-hover.png",
    ᐃᐃᐃᐃᐃⵠΔ: "img/zombie-mode-hover.png",
    ᐃⲆⲆⵠΔΔⵠ: "img/community-mode-hover2.png",
    ⵠⵠⵠΔΔⲆΔ: "img/experimental-mode-hover.png",
    ⵠⵠⵠᐃΔΔΔ: "img/zombie-mode-out.png",
    ⵠⲆⵠΔᐃΔⲆ: "img/zombie-mode-in.png",
    ᐃⲆᐃΔΔⵠᐃ: "img/zombie-mode-click.png",
    ᐃⵠⵠΔⵠΔᐃ: "img/vampire-mode-out.png",
    ΔⲆⵠⵠⲆⲆⵠ: "img/vampire-mode-in.png",
    ⲆΔⵠᐃⵠΔⵠ: "img/vampire-mode-click.png",
    ΔΔⵠⵠⵠⵠᐃ: "img/normal-mode-out.png",
    ⵠΔᐃΔⲆΔⲆ: "img/normal-mode-in.png",
    ⲆΔᐃᐃⲆΔⵠ: "img/normal-mode-click.png",
    ΔΔⵠᐃᐃΔΔ: "img/forest-mode-out.png",
    ⲆⵠⲆⲆⵠΔΔ: "img/forest-mode-in.png",
    ᐃΔΔΔⲆᐃⵠ: "img/forest-mode-click.png",
    ⵠΔΔΔⵠᐃⲆ: "img/community-mode-out.png",
    ᐃⵠΔⵠⵠΔⵠ: "img/community-mode-in.png",
    ᐃⲆⵠᐃⵠⵠΔ: "img/community-mode-click.png",
    ⵠⲆⵠⵠⲆᐃΔ: "img/experimental-modes-out.png",
    ⵠᐃΔΔⵠᐃᐃ: "img/experimental-modes-in.png",
    ⵠⲆᐃᐃⵠΔⲆ: "img/experimental-modes-click.png",
    ⵠⵠᐃⲆΔᐃᐃ: "img/youtube-button-out.png",
    ᐃᐃⲆΔΔⵠⲆ: "img/youtube-button-in.png",
    ⲆᐃⲆΔⲆΔⵠ: "img/youtube-button-click.png",
    ⵠⲆΔⵠⵠᐃᐃ: "img/wiki-button-out.png",
    ⲆΔⵠΔⵠⲆⵠ: "img/wiki-button-in.png",
    ⵠⲆΔⵠᐃᐃΔ: "img/wiki-button-click.png",
    ᐃΔΔΔᐃᐃᐃ: "img/twitter-button-out.png",
    ΔⵠⲆᐃⵠⲆⲆ: "img/twitter-button-in.png",
    ΔΔⲆⲆΔᐃⵠ: "img/twitter-button-click.png",
    Δⵠⵠᐃⵠᐃⵠ: "img/facebook-button-out.png",
    ᐃⲆΔΔΔΔⵠ: "img/facebook-button-in.png",
    ⵠᐃⵠⲆΔⵠᐃ: "img/facebook-button-click.png",
    ᐃᐃⵠᐃΔᐃⵠ: "img/reddit-button-out.png",
    ΔⵠᐃᐃᐃΔΔ: "img/reddit-button-in.png",
    ⲆΔⲆᐃⲆΔⵠ: "img/reddit-button-click.png",
    ᐃΔᐃᐃⲆⵠᐃ: "img/discord-button-out.png",
    ΔΔⵠⵠⵠⲆⲆ: "img/discord-button-in.png",
    ΔᐃⵠᐃⵠᐃΔ: "img/discord-button-click.png",
    ⵠᐃᐃΔᐃⲆΔ: "img/merch-button-out.png",
    ⲆᐃⲆᐃⲆΔΔ: "img/merch-button-in.png",
    ΔᐃΔΔΔΔⲆ: "img/merch-button-click.png",
    ⵠⵠⵠⵠΔⲆᐃⲆΔ: "img/terminal-button-out.png",
    ⵠΔΔⵠᐃΔΔΔᐃ: "img/terminal-button-in.png",
    ⵠⵠᐃⵠᐃᐃⲆⲆᐃ: "img/terminal-button-click.png",
    ⵠΔᐃᐃΔⵠⵠ: "img/restart-out.png",
    ᐃΔⲆΔⲆⵠᐃ: "img/restart-in.png",
    ⲆᐃΔΔᐃᐃⲆ: "img/restart-click.png",
    ⲆⲆᐃΔᐃΔⲆ: "img/guide-out.png",
    ᐃⵠⵠⵠΔΔⵠ: "img/guide-in.png",
    ΔⲆⵠᐃΔΔⵠ: "img/guide-click.png",
    ΔⲆΔⲆΔⵠΔ: "img/copy-paste-out.png",
    ᐃᐃⲆΔⲆᐃⲆ: "img/copy-paste-in.png",
    ᐃᐃΔⵠᐃᐃⲆ: "img/copy-paste-click.png",
    ⲆΔΔⲆⵠΔⵠ: "img/link-buttons-bg.png",
    ⵠΔᐃⲆⵠᐃⵠ: "img/changelog-box2.png",
    ⲆⵠΔⵠᐃΔΔ: "img/changelog_30.png",
    ⵠⲆᐃΔᐃᐃⵠ: "img/banner-taming.png",
    ΔΔΔᐃⲆΔᐃ: "img/profile-button-out.png",
    ⲆⲆᐃᐃΔᐃΔ: "img/profile-button-in.png",
    ⲆᐃΔΔᐃⲆᐃ: "img/profile-button-click.png",
    ⲆⵠⵠⵠᐃΔᐃ: "img/login-button-out.png",
    ΔⲆΔᐃᐃⵠᐃ: "img/login-button-in.png",
    ᐃⵠᐃΔⲆΔΔ: "img/login-button-click.png",
    ⲆΔΔⵠΔᐃⵠ: "img/login-google-out.png",
    ⲆⲆⵠΔⲆⵠΔ: "img/login-google-in.png",
    ΔᐃⲆΔᐃⲆⵠ: "img/login-google-click.png",
    ⵠⵠΔⵠΔⲆⲆ: "img/login-facebook-out.png",
    ᐃᐃΔΔⵠᐃΔ: "img/login-facebook-in.png",
    ⵠΔⲆⵠⲆΔⵠ: "img/login-facebook-click.png",
    ᐃⲆⵠⲆⵠΔⲆ: "img/account-box.png",
    ΔⲆΔᐃⵠⲆⲆⵠⵠ: "img/account-under-maintenance.png",
    ΔⲆⵠΔⵠⵠᐃ: "img/close-button-account-out.png",
    ΔⵠΔᐃᐃΔᐃ: "img/close-button-account-in.png",
    ⲆΔⲆΔΔⵠⵠ: "img/close-button-account-click.png",
    ᐃⲆΔΔΔⲆⵠ: "img/play-button-out.png",
    ⵠᐃⵠⲆⵠΔᐃ: "img/play-button-in.png",
    ⵠⲆⲆⲆⵠΔⵠ: "img/play-button-click.png",
    ⵠᐃΔᐃⲆΔᐃᐃΔ: "img/app-store-badge.png",
    ⲆⲆΔⵠⵠⲆΔⲆΔ: "img/play-store-badge.png",
    ΔⲆΔᐃⵠᐃΔⲆΔ: "img/mobile-boxad.png",
    ⲆⵠΔⲆⵠⲆΔ: "img/modify-name-out.png",
    ⵠⲆᐃⵠΔΔⵠ: "img/modify-name-in.png",
    ⲆΔⲆΔᐃᐃᐃ: "img/modify-name-click.png",
    ΔⵠⲆⲆⵠΔΔ: "img/yes-button-out.png",
    ΔᐃΔⲆⲆᐃⵠ: "img/yes-button-in.png",
    ⵠᐃΔᐃΔΔⲆ: "img/yes-button-click.png",
    ᐃΔⵠⵠⵠΔᐃ: "img/yes-300-button-out.png",
    ⲆΔᐃᐃΔⲆᐃ: "img/yes-300-button-in.png",
    ⲆΔΔⲆⵠⲆᐃ: "img/yes-300-button-click.png",
    ΔΔⲆΔⵠᐃΔ: "img/no-button-out.png",
    ΔⵠᐃᐃⲆᐃᐃ: "img/no-button-in.png",
    ⲆⵠΔⲆᐃᐃΔ: "img/no-button-click.png",
    ΔΔⲆᐃⵠᐃⵠ: "img/no-thanks-button-out.png",
    ⵠᐃⲆⲆⲆⵠᐃ: "img/no-thanks-button-in.png",
    ΔᐃᐃⵠΔΔⲆ: "img/no-thanks-button-click.png",
    ᐃⲆᐃΔᐃⵠᐃ: "img/shop-button-out.png",
    ᐃᐃⲆⵠⵠⲆⵠ: "img/shop-button-in.png",
    ᐃΔⵠΔⵠⲆⵠ: "img/shop-button-click.png",
    ⲆᐃᐃΔⵠᐃⲆ: "img/logout-out.png",
    ⵠᐃⲆⵠⲆⲆⵠ: "img/logout-in.png",
    ⲆᐃΔⲆᐃⵠⲆ: "img/logout-click.png",
    ⵠⲆΔᐃⲆΔⵠ: "img/terms-button-out.png",
    ΔΔΔᐃΔⵠⲆ: "img/terms-button-in.png",
    ⵠΔⵠⲆᐃΔⲆ: "img/terms-button-click.png",
    ⲆΔᐃΔΔⵠᐃ: "img/tutorial-icon.png",
    ᐃⵠⲆΔᐃΔⵠ: "img/skins-icon.png",
    ⲆᐃⲆⵠᐃΔΔ: "img/shop-icon.png",
    ᐃᐃⵠⲆⲆΔⲆᐃΔ: "img/paint-icon.png",
    ⵠⵠΔⵠⲆΔⵠ: "img/leaderboard-icon.png",
    ᐃⵠᐃΔᐃᐃᐃ: "img/start-icon.png",
    ⲆⲆΔΔᐃⵠᐃ: "img/profile-icon.png",
    ΔᐃᐃⲆⵠⵠᐃ: "img/server-access-icon2.png",
    ⵠΔᐃΔⵠΔⲆ: "img/button-homepage-bg-out.png",
    Δⵠᐃᐃⵠⵠⵠ: "img/button-homepage-bg-in.png",
    ᐃᐃⲆⲆⲆⵠᐃ: "img/button-homepage-bg-click.png",
    ᐃⵠⲆⲆⲆᐃΔ: "img/button-bottom-homepage-bg-out.png",
    ⵠΔᐃⵠᐃⵠⲆ: "img/button-bottom-homepage-bg-in.png",
    ⵠⵠᐃΔⵠⲆᐃ: "img/button-bottom-homepage-bg-click.png",
    ⵠᐃᐃᐃᐃⵠΔ: "img/lvl-player.png",
    ⲆᐃⲆΔᐃⵠᐃ: "img/avatar-player.png",
    ᐃᐃⲆⲆΔⵠⵠ: "img/avatar-player1.png",
    ⲆᐃΔⵠⲆⵠⲆ: "img/avatar-player2.png",
    ⲆⵠᐃⲆⲆⲆΔ: "img/avatar-player3.png",
    ΔⲆΔΔⵠᐃⲆ: "img/avatar-player4.png",
    ⲆⵠⵠⲆᐃⵠΔ: "img/avatar-player5.png",
    ⵠᐃⵠΔᐃⲆⵠ: "img/avatar-player6.png",
    ᐃᐃⵠⵠⵠΔⲆ: "img/avatar-player7.png",
    Δᐃᐃᐃᐃᐃⵠ: "img/avatar-player8.png",
    ΔΔⲆᐃΔⲆⲆ: "img/avatar-player9.png",
    ⵠⲆⲆⵠⵠᐃΔ: "img/avatar-player10.png",
    ᐃΔⲆΔⵠᐃΔ: "img/avatar-player11.png",
    ⵠᐃᐃⲆΔⲆᐃ: "img/avatar-player12.png",
    ᐃᐃⲆᐃⵠⲆⲆ: "img/avatar-player13.png",
    ΔΔⵠⵠΔⲆᐃ: "img/avatar-player14.png",
    ΔⵠⵠⲆΔΔⵠ: "img/avatar-player14.png",
    ΔᐃⵠⲆᐃΔⲆ: "img/avatar-player14.png",
    ᐃⲆⵠᐃⵠⵠⲆ: "img/avatar-player14.png",
    ΔᐃⵠⲆᐃⵠⵠⵠⲆ: "img/golden-bread.png",
    ᐃᐃⵠᐃⵠⵠⲆ: "img/buy-bread-out.png",
    ⵠⵠⲆᐃᐃΔⲆ: "img/buy-bread-in.png",
    ⲆⲆᐃᐃΔⵠⲆ: "img/buy-bread-click.png",
    ⵠⲆⲆⲆΔᐃⲆ: "img/gauge.png",
    ΔᐃᐃⵠΔΔⵠⵠᐃ: "img/season-4-out.png",
    ⲆⵠᐃᐃᐃⵠⲆᐃᐃ: "img/season-4-in.png",
    ΔΔⵠΔⲆⲆⵠⲆⲆ: "img/season-4-click.png",
    ⵠⲆᐃⵠⲆᐃᐃⵠᐃ: "img/season4-box.png",
    ⲆⲆᐃᐃⵠⵠⵠΔᐃ: "img/season-5-out.png",
    ᐃᐃΔᐃⵠΔⲆⲆᐃ: "img/season-5-in.png",
    ᐃⵠᐃΔᐃᐃΔᐃⲆ: "img/season-5-click.png",
    ΔΔⲆᐃⲆΔᐃⵠΔ: "img/season5-box.png",
    ⲆⵠΔΔᐃⲆᐃ: "img/season-6-out.png",
    ⲆᐃᐃⵠᐃⵠⲆ: "img/season-6-in.png",
    ᐃⲆⵠⲆΔⲆᐃ: "img/season-6-click.png",
    ⲆⵠⲆΔⵠᐃᐃ: "img/season6-box.png",
    ΔΔᐃⵠΔⵠᐃ: "img/profile3-box.png",
    ⲆⵠᐃᐃⲆΔⵠ: "img/skins-box.png",
    ᐃΔⵠⵠⲆⵠⵠ: "img/shop-box.png",
    ⵠΔⵠᐃⵠᐃⲆⲆΔ: "img/private-server-box.png",
    ᐃⲆΔᐃΔⵠΔ: "img/location-box.png",
    ΔᐃⲆᐃⵠⲆᐃ: "img/server-duration-box.png",
    ᐃΔⲆⲆⲆᐃᐃ: "img/tutorial-box.png",
    ᐃΔⲆⲆⲆⲆᐃ: "img/leaderboard2-box.png",
    ⲆⵠΔⵠⵠΔΔ: "img/buy-breads-box.png",
    ⵠⵠⲆⵠΔᐃⲆ: "img/bag-box.png",
    ⵠΔᐃⲆΔⲆΔ: "img/deadbox-box.png",
    ⵠⲆⵠᐃΔΔᐃ: "img/book-box.png",
    ᐃᐃⵠⲆΔⵠⲆ: "img/accessories-box.png",
    ⵠⲆΔⲆⲆᐃᐃ: "img/customskin-box.png",
    ⲆⵠⵠΔΔⵠΔ: "img/bag-lasts.png",
    ΔᐃᐃᐃΔⵠⵠ: "img/server-lasts.png",
    ⲆⵠΔΔΔⲆᐃ: "img/server-access-box2.png",
    ΔΔⵠᐃᐃⵠⲆ: "img/lootbox-box.png",
    ᐃⲆⵠⵠⵠⲆΔ: "img/change-nickname0.png",
    ΔᐃⲆᐃᐃⵠⵠ: "img/change-nickname1.png",
    ⵠⵠⵠᐃⵠΔΔ: "img/cheating-box.png",
    ⲆⲆⲆᐃⲆᐃΔᐃΔ: "img/daily-quest-box.png",
    ⲆΔΔⲆΔΔⵠⵠᐃ: "img/daily-5-bread.png",
    ⵠᐃΔΔΔᐃΔΔᐃ: "img/daily-10-bread.png",
    ᐃⵠᐃΔᐃΔΔⵠΔ: "img/daily-valid.png",
    ᐃⵠΔⲆⵠⵠⵠ: "img/normal-profile-out.png",
    ᐃᐃΔⵠⵠⲆⵠ: "img/normal-profile-in.png",
    ΔⵠⵠⵠⵠⲆⵠ: "img/normal-profile-click.png",
    ΔⵠⵠⲆⲆⲆᐃ: "img/forest-profile-out.png",
    ᐃⲆⲆⵠᐃⲆⲆ: "img/forest-profile-in.png",
    ᐃᐃⲆⵠⵠΔΔ: "img/forest-profile-click.png",
    ᐃⲆΔⵠⲆᐃᐃ: "img/zombie-profile-out.png",
    ⲆᐃⵠⵠΔᐃᐃ: "img/zombie-profile-in.png",
    ᐃΔⲆᐃᐃⵠΔ: "img/zombie-profile-click.png",
    ΔⵠᐃΔᐃᐃᐃ: "img/vampire-profile-out.png",
    ᐃΔᐃΔⲆΔⲆ: "img/vampire-profile-in.png",
    ΔᐃⵠΔᐃᐃᐃ: "img/vampire-profile-click.png",
    ⵠⵠⵠⲆⲆᐃΔ: "img/total-profile-out.png",
    ΔⵠⵠΔᐃᐃⵠ: "img/total-profile-in.png",
    ΔΔⵠⵠⲆᐃⲆ: "img/total-profile-click.png",
    ΔᐃᐃΔᐃⵠⲆ: "img/season1-out.png",
    ⲆᐃᐃⵠⵠⵠⲆ: "img/season1-in.png",
    ⵠⵠᐃⵠᐃᐃΔ: "img/season1-click.png",
    ΔΔΔᐃⲆᐃᐃ: "img/season2-out.png",
    ΔⵠⲆᐃⵠᐃⵠ: "img/season2-in.png",
    ᐃᐃᐃⲆⲆⵠⵠ: "img/season2-click.png",
    ⵠᐃⲆⲆΔⲆᐃ: "img/season3-out.png",
    ⲆⵠᐃⵠΔᐃᐃ: "img/season3-in.png",
    ᐃᐃⲆⲆΔⲆⲆ: "img/season3-click.png",
    ᐃΔⲆⵠⵠⲆⵠ: "img/season4-out.png",
    ΔⵠΔⵠⲆⵠΔ: "img/season4-in.png",
    ⲆΔⵠᐃⵠⲆΔ: "img/season4-click.png",
    ᐃⵠΔⵠⲆⲆΔ: "img/season5-out.png",
    ⵠⵠΔᐃⲆⵠⵠ: "img/season5-in.png",
    ⲆⲆⵠΔᐃⲆⵠ: "img/season5-click.png",
    ⵠᐃᐃᐃᐃⵠᐃ: "img/season6-out.png",
    ⵠᐃⲆΔⲆⵠᐃ: "img/season6-in.png",
    ΔⵠⲆⲆⵠΔᐃ: "img/season6-click.png",
    ᐃⵠᐃΔⵠⲆⲆ: "img/locked-skin-alert.png",
    ΔⲆᐃⲆᐃᐃΔ: "img/locked-custom-alert.png",
    ⵠΔΔⵠᐃⵠⵠ: "img/bg-red-locked.png",
    ⵠΔⵠᐃⲆⵠΔ: "img/skin-button-out.png",
    ᐃⲆᐃⵠⵠᐃΔ: "img/skin-button-in.png",
    ΔⵠᐃᐃⵠⲆᐃ: "img/skin-button-click.png",
    ΔⵠᐃⵠΔᐃᐃ: "img/accessory-button-out.png",
    ⵠᐃⲆⲆⵠⲆⵠ: "img/accessory-button-in.png",
    ᐃⵠⲆⵠΔⵠⵠ: "img/accessory-button-click.png",
    ⲆⵠⵠΔᐃⲆⲆ: "img/bag-button-out.png",
    ⵠᐃΔⵠⵠᐃᐃ: "img/bag-button-in.png",
    ᐃⲆᐃⲆΔⵠⲆ: "img/bag-button-click.png",
    ⲆΔᐃΔⲆᐃⵠ: "img/book-button-out.png",
    ⵠⲆⵠⲆⵠᐃⵠ: "img/book-button-in.png",
    ΔΔⵠΔⵠⵠⵠ: "img/book-button-click.png",
    ᐃⲆⵠⵠⲆΔⵠ: "img/deadbox-button-out.png",
    ⵠⵠⲆᐃⲆᐃⲆ: "img/deadbox-button-in.png",
    ⵠΔΔᐃⲆⲆΔ: "img/deadbox-button-click.png",
    ⲆⵠᐃΔⲆᐃᐃ: "img/loot-button-out.png",
    ⵠΔⲆⵠⲆᐃⲆ: "img/loot-button-in.png",
    ᐃᐃⲆⲆΔⲆᐃ: "img/loot-button-click.png",
    ⲆΔⵠᐃΔᐃΔ: "img/free-item-out.png",
    ΔᐃⵠⵠⲆⵠⵠ: "img/free-item-in.png",
    ⵠΔⲆΔΔᐃᐃ: "img/free-item-click.png",
    ⵠΔᐃⲆ: "img/wood-item-out.png",
    ᐃΔⵠΔ: "img/wood-item-in.png",
    ᐃⲆⵠⵠ: "img/wood-item-click.png",
    ⵠΔᐃΔΔᐃΔ: "img/stone-item.png",
    ᐃᐃᐃⲆⲆΔⲆ: "img/stone-item-in.png",
    ᐃⲆᐃᐃⵠⵠⲆ: "img/stone-item-click.png",
    ᐃⵠᐃᐃΔⲆⲆ: "img/gold-item.png",
    ΔⲆΔⲆΔΔⵠ: "img/gold-item-in.png",
    ΔⲆΔⵠⲆᐃᐃ: "img/gold-item-click.png",
    ΔᐃΔⵠΔⲆⵠ: "img/diamond-item.png",
    ⵠΔᐃᐃⲆⲆⵠ: "img/diamond-item-in.png",
    ᐃΔΔⵠᐃᐃⵠ: "img/diamond-item-click.png",
    ΔⵠΔⵠⲆⵠⲆ: "img/amethyst-item.png",
    ΔⵠⵠⵠᐃⵠΔ: "img/amethyst-item-in.png",
    ᐃⲆⵠΔᐃΔΔ: "img/amethyst-item-click.png",
    ⵠⵠΔᐃᐃⵠΔ: "img/reidite-item.png",
    ⲆⲆΔΔⲆⲆⵠ: "img/reidite-item-in.png",
    ΔΔⲆⵠΔΔⵠ: "img/reidite-item-click.png",
    ᐃⲆᐃⲆⵠⵠᐃ: "img/special-item-out.png",
    ⵠᐃⲆΔΔⵠΔ: "img/special-item-in.png",
    ⲆⵠΔΔⵠΔⵠ: "img/special-item-click.png",
    ⲆΔΔⵠⲆᐃⲆ: "img/level-item-out.png",
    ᐃⲆⲆΔⲆⵠⲆ: "img/level-item-in.png",
    ᐃⵠⲆⵠᐃᐃⲆ: "img/level-item-click.png",
    ⲆⵠᐃⲆⲆΔΔ: "img/skin-previous-out.png",
    ΔᐃⵠΔΔⲆⲆ: "img/skin-previous-in.png",
    ΔᐃⵠᐃⵠⲆᐃ: "img/skin-previous-click.png",
    ΔΔᐃⲆΔᐃᐃ: "img/skin-next-out.png",
    ᐃΔⵠᐃᐃᐃⲆ: "img/skin-next-in.png",
    ⲆΔⲆᐃᐃⲆⵠ: "img/skin-next-click.png",
    ΔᐃΔⲆΔ: "img/back-button-out.png",
    ᐃᐃᐃⵠᐃ: "img/back-button-in.png",
    ⵠⲆⲆⵠᐃ: "img/back-button-click.png",
    ᐃⲆΔⲆⲆⵠΔ: "img/get-more-button-out.png",
    ⲆⵠΔⲆⵠⵠⵠ: "img/get-more-button-in.png",
    ΔΔⵠⵠⵠᐃⵠ: "img/get-more-button-click.png",
    ᐃⵠᐃᐃⵠⵠᐃ: "img/currency1-out.png",
    ᐃⵠΔⲆⵠᐃⲆ: "img/currency1-in.png",
    ⲆΔΔΔᐃᐃⵠ: "img/currency1-click.png",
    ΔᐃⲆΔⵠⲆⵠ: "img/currency2-out.png",
    ⲆΔᐃᐃⲆⲆⲆ: "img/currency2-in.png",
    ΔᐃⵠᐃⵠⲆΔ: "img/currency2-click.png",
    ΔⲆΔⵠⵠΔΔ: "img/currency3-out.png",
    ⵠⵠⵠⲆΔⲆⵠ: "img/currency3-in.png",
    ᐃⲆΔⲆⵠΔⲆ: "img/currency3-click.png",
    ⲆⲆⵠⵠᐃⲆΔ: "img/currency4-out.png",
    ⲆΔᐃΔⵠⲆⲆ: "img/currency4-in.png",
    ΔᐃⵠᐃⲆΔᐃ: "img/currency4-click.png",
    ΔⲆⲆⵠⲆΔⲆ: "img/currency5-out.png",
    ⵠⵠᐃᐃⵠⲆⵠ: "img/currency5-in.png",
    ⲆⲆᐃⲆⵠⵠΔ: "img/currency5-click.png",
    ΔⲆΔⵠΔⵠΔ: "img/price1-out.png",
    Δᐃⵠⵠᐃⵠⵠ: "img/price1-in.png",
    ⵠᐃΔⵠⵠΔⵠ: "img/price1-click.png",
    ⵠΔⲆᐃᐃⲆⲆ: "img/price2-out.png",
    ⲆΔᐃⲆᐃᐃⲆ: "img/price2-in.png",
    ⲆΔⲆᐃⲆⵠΔ: "img/price2-click.png",
    ᐃⵠΔⵠⲆᐃⲆ: "img/price3-out.png",
    ⲆⲆⵠⲆⵠⵠᐃ: "img/price3-in.png",
    ᐃᐃᐃⵠⵠΔⲆ: "img/price3-click.png",
    ᐃᐃᐃΔΔΔⵠ: "img/price4-out.png",
    ΔΔᐃΔᐃᐃΔ: "img/price4-in.png",
    ⵠⲆΔⲆᐃⲆⵠ: "img/price4-click.png",
    ᐃᐃΔⲆᐃⵠΔ: "img/price5-out.png",
    ᐃᐃⲆᐃᐃΔⲆ: "img/price5-in.png",
    ⲆΔᐃⲆⲆΔᐃ: "img/price5-click.png",
    ᐃⲆⵠᐃⵠⲆΔⵠΔ: "img/buy-private-server-out.png",
    ⵠᐃΔΔⲆᐃΔΔⲆ: "img/buy-private-server-in.png",
    ΔΔᐃⵠⵠΔᐃⵠΔ: "img/buy-private-server-click.png",
    ΔⵠⲆΔΔᐃΔ: "img/atlanta-out.png",
    ⵠᐃⵠΔⲆⲆΔ: "img/atlanta-in.png",
    ⵠⲆΔⲆΔᐃᐃ: "img/atlanta-click.png",
    ⵠⲆⵠΔΔᐃᐃ: "img/dallas-out.png",
    ⵠⲆⲆⵠⲆᐃᐃ: "img/dallas-in.png",
    ΔⵠᐃᐃⵠⵠΔ: "img/dallas-click.png",
    ᐃⲆⲆⵠⵠⵠᐃ: "img/fremont-out.png",
    ⲆΔⵠⲆΔⲆΔ: "img/fremont-in.png",
    ⵠᐃⲆᐃΔⲆᐃ: "img/fremont-click.png",
    ⵠⵠΔΔⲆⲆⵠ: "img/newark-out.png",
    ⵠⲆⲆᐃⵠⲆⲆ: "img/newark-in.png",
    ⲆⲆⵠΔΔⲆᐃ: "img/newark-click.png",
    ⵠⲆⲆᐃᐃΔⲆ: "img/toronto-out.png",
    ΔⲆⲆⵠⵠⲆᐃ: "img/toronto-in.png",
    ⲆⲆΔⲆⲆΔⵠ: "img/toronto-click.png",
    ᐃⲆΔⲆΔΔⵠ: "img/singapore-out.png",
    ⵠᐃⲆΔᐃΔᐃ: "img/singapore-in.png",
    ⵠⵠΔᐃⵠΔⵠ: "img/singapore-click.png",
    ᐃⲆᐃⵠⲆⲆⲆ: "img/frankfurt-out.png",
    ΔⲆⵠⵠⵠᐃᐃ: "img/frankfurt-in.png",
    ᐃⲆⵠⲆⲆΔΔ: "img/frankfurt-click.png",
    ᐃᐃΔᐃᐃᐃΔ: "img/london-out.png",
    ⲆΔᐃᐃⲆᐃⲆ: "img/london-in.png",
    ΔᐃⵠⲆΔΔᐃ: "img/london-click.png",
    ᐃᐃⲆⵠⵠⵠΔ: "img/mumbai-out.png",
    ᐃⲆᐃΔΔⲆⲆ: "img/mumbai-in.png",
    ᐃᐃⵠΔᐃⲆⵠ: "img/mumbai-click.png",
    ⲆΔⲆᐃⲆⵠⲆ: "img/tokyo-out.png",
    ΔⵠᐃⲆⵠⲆⲆ: "img/tokyo-in.png",
    ⲆⲆⵠⵠΔΔΔ: "img/tokyo-click.png",
    ΔΔΔⵠᐃᐃⲆᐃᐃ: "img/yes-location-out.png",
    ΔΔⵠᐃⵠᐃⲆᐃⵠ: "img/yes-location-in.png",
    ᐃⵠⵠⵠⵠΔⲆΔⲆ: "img/yes-location-click.png",
    ᐃⲆᐃⵠⲆᐃΔ: "img/3days-out.png",
    ⲆⲆᐃⲆⲆΔⵠ: "img/3days-in.png",
    ⲆᐃⵠᐃΔΔΔ: "img/3days-click.png",
    ᐃΔⵠⲆⲆΔΔ: "img/7days-out.png",
    ⲆⵠΔΔⵠᐃΔ: "img/7days-in.png",
    ⵠΔΔⲆΔⵠⵠ: "img/7days-click.png",
    ΔᐃⵠᐃᐃᐃⲆ: "img/30days-out.png",
    ⵠΔⲆᐃᐃᐃΔ: "img/30days-in.png",
    ⲆⲆⵠᐃΔⵠⲆ: "img/30days-click.png",
    ⲆΔⵠᐃⲆⲆΔ: "img/90days-out.png",
    ΔΔᐃᐃΔⲆⵠ: "img/90days-in.png",
    ⲆⲆᐃΔΔΔⲆ: "img/90days-click.png",
    ⲆⲆΔⲆⵠᐃᐃ: "img/spin1.png",
    ⲆⵠᐃⵠⲆⲆᐃ: "img/spin2.png",
    ᐃᐃᐃΔⵠⵠⵠ: "img/spin3.png",
    ᐃΔⲆⲆᐃⵠᐃ: "img/spin4.png",
    ΔⲆᐃⵠᐃⵠⲆ: "img/spin5.png",
    ΔᐃΔⵠΔΔⵠ: "img/spin6.png",
    ⲆⵠⲆⲆᐃΔᐃ: "img/arrow-spin.png",
    ⲆΔΔⲆⲆΔⵠ: "img/spin-button-1-out.png",
    ⲆⵠᐃΔΔⵠᐃ: "img/spin-button-1-in.png",
    ΔΔΔⲆⵠᐃᐃ: "img/spin-button-1-click.png",
    ⲆⵠⵠᐃΔᐃⵠ: "img/spin-button-2-out.png",
    ᐃΔΔΔⲆΔⵠ: "img/spin-button-2-in.png",
    ΔⲆᐃᐃⲆⲆⲆ: "img/spin-button-2-click.png",
    ᐃΔⲆᐃᐃⵠⵠ: "img/spin-button-3-out.png",
    ⲆⲆᐃΔⲆΔΔ: "img/spin-button-3-in.png",
    ⵠᐃΔΔⲆΔⵠ: "img/spin-button-3-click.png",
    ⲆⵠⲆⵠᐃⵠⲆ: "img/spin-button-4-out.png",
    ΔᐃᐃⲆⵠᐃⲆ: "img/spin-button-4-in.png",
    ⵠⵠⵠⲆⵠⲆΔ: "img/spin-button-4-click.png",
    ⵠΔΔΔᐃⵠⲆ: "img/spin-button-5-out.png",
    ⲆⲆⵠⲆⲆⵠΔ: "img/spin-button-5-in.png",
    ⵠᐃⲆⲆᐃΔⲆ: "img/spin-button-5-click.png",
    ᐃΔᐃⵠⲆⲆⲆ: "img/spin-light.png",
    ⵠⵠⵠⲆᐃΔᐃ: "img/tuto-wiki-out.png",
    ΔΔΔⵠᐃⵠᐃ: "img/tuto-wiki-in.png",
    ᐃⲆⲆⵠΔᐃⲆ: "img/tuto-wiki-click.png",
    ⵠⵠΔⵠΔᐃⵠ: "img/tuto-previous-out.png",
    ⵠΔΔⵠᐃᐃⵠ: "img/tuto-previous-in.png",
    ᐃᐃΔΔⲆⲆᐃ: "img/tuto-previous-click.png",
    ⲆⵠᐃⵠΔⲆᐃ: "img/tuto-next-out.png",
    ⲆΔⲆΔⵠⲆⵠ: "img/tuto-next-in.png",
    ᐃⵠⲆᐃⲆΔⲆ: "img/tuto-next-click.png",
    ⲆΔΔⲆᐃΔΔ: "img/time-leaderboard-out.png",
    ⲆⲆᐃⲆΔᐃᐃ: "img/time-leaderboard-in.png",
    ΔⵠΔⵠΔⵠΔ: "img/time-leaderboard-click.png",
    ᐃⲆᐃⵠⵠⵠᐃ: "img/score-leaderboard-out.png",
    ⲆᐃΔᐃⲆⲆΔ: "img/score-leaderboard-in.png",
    ⵠⲆᐃᐃⵠΔΔ: "img/score-leaderboard-click.png",
    ΔⵠⲆᐃΔᐃᐃ: "img/lvl-leaderboard-out.png",
    ⵠΔⲆⵠΔⲆⲆ: "img/lvl-leaderboard-in.png",
    ΔⲆᐃⵠΔΔΔ: "img/lvl-leaderboard-click.png",
    Δᐃⵠᐃⵠⵠⵠ: "img/kill-leaderboard-out.png",
    ΔΔⲆᐃⲆᐃᐃ: "img/kill-leaderboard-in.png",
    ᐃⵠⵠᐃᐃⲆΔ: "img/kill-leaderboard-click.png",
    ⵠᐃΔᐃΔᐃᐃ: "img/all-leaderboard-out.png",
    ᐃᐃᐃⲆΔⲆΔ: "img/all-leaderboard-in.png",
    ΔⵠⲆⲆᐃⲆⵠ: "img/all-leaderboard-click.png",
    ⲆᐃΔΔⲆᐃᐃ: "img/today-leaderboard-out.png",
    ΔⵠΔᐃⵠᐃΔ: "img/today-leaderboard-in.png",
    ⵠⲆᐃᐃⵠᐃᐃ: "img/today-leaderboard-click.png",
    ⵠⵠⵠⵠⲆⵠΔ: "img/week-leaderboard-out.png",
    ⲆᐃᐃᐃⲆⲆᐃ: "img/week-leaderboard-in.png",
    ⲆⲆᐃΔᐃΔΔ: "img/week-leaderboard-click.png",
    ᐃᐃⲆⵠᐃⲆΔ: "img/season1-out.png",
    ⵠᐃΔΔΔᐃⲆ: "img/season1-in.png",
    ΔᐃᐃΔⵠⵠⵠ: "img/season1-click.png",
    ⵠᐃⵠᐃⵠΔⵠ: "img/season2-out.png",
    ᐃᐃΔᐃⲆΔⲆ: "img/season2-in.png",
    ⲆΔᐃᐃⵠⲆᐃ: "img/season2-click.png",
    ΔⲆᐃⵠⵠΔⲆ: "img/season3-out.png",
    ᐃᐃⲆΔᐃⵠⵠ: "img/season3-in.png",
    ⲆᐃⲆΔⲆⵠⲆ: "img/season3-click.png",
    ᐃⵠⵠΔΔⵠⵠ: "img/season4-out.png",
    ᐃᐃⵠⵠⲆᐃⵠ: "img/season4-in.png",
    ⲆᐃⵠΔⵠⵠⵠ: "img/season4-click.png",
    ᐃΔⲆΔΔᐃⲆ: "img/season5-out.png",
    ΔΔΔⵠᐃΔᐃ: "img/season5-in.png",
    ⲆⵠᐃᐃⵠΔᐃ: "img/season5-click.png",
    ΔⲆⵠⲆᐃΔΔ: "img/season6-out.png",
    ΔⵠⲆᐃᐃⵠⲆ: "img/season6-in.png",
    ᐃΔⲆⲆΔⲆⵠ: "img/season6-click.png",
    ⵠⲆΔⲆⵠⲆΔ: "img/total-lead-out.png",
    ᐃⲆᐃᐃⵠⵠⵠ: "img/total-lead-in.png",
    ΔⲆᐃⵠΔᐃⵠ: "img/total-lead-click.png",
    ᐃΔΔᐃΔᐃⲆ: "img/normal-lead-out.png",
    ⲆᐃⵠⵠΔⵠⲆ: "img/normal-lead-in.png",
    ΔᐃᐃΔΔᐃⲆ: "img/normal-lead-click.png",
    ⵠᐃᐃΔΔᐃⵠ: "img/forest-lead-out.png",
    ⲆΔΔΔⲆΔΔ: "img/forest-lead-in.png",
    ⵠⵠᐃΔᐃⵠⲆ: "img/forest-lead-click.png",
    ⵠⵠⵠΔⲆⵠᐃ: "img/vampire-lead-out.png",
    ⲆⵠΔΔᐃⲆⵠ: "img/vampire-lead-in.png",
    ᐃⵠⲆⵠⵠΔⲆ: "img/vampire-lead-click.png",
    ⵠΔⲆⲆΔⲆᐃ: "img/zombie-lead-out.png",
    ΔⵠⲆⲆⲆΔᐃ: "img/zombie-lead-in.png",
    ᐃⲆⲆⵠⲆΔⲆ: "img/zombie-lead-click.png",
    ᐃΔΔⵠⲆᐃᐃ: "img/day-level5.png",
    ⵠⵠⲆᐃᐃΔⵠ: "img/night-level5.png",
    ⵠΔⵠⵠⲆⲆⵠ: "img/day-level10.png",
    ΔⲆΔⵠΔⵠⲆ: "img/night-level10.png",
    ⵠⲆΔⵠⵠⵠΔ: "img/day-level15.png",
    ᐃΔΔⵠΔᐃΔ: "img/night-level15.png",
    ⲆⵠⵠⲆΔⲆᐃ: "img/day-level20.png",
    ⲆΔΔᐃⵠΔⵠ: "img/night-level20.png",
    ⵠΔⵠⵠᐃⵠΔ: "img/day-level25.png",
    ⵠⲆᐃᐃᐃⵠᐃ: "img/night-level25.png",
    ⲆⵠⲆᐃᐃᐃΔ: "img/day-level30.png",
    ΔΔⵠΔⵠΔⲆ: "img/night-level30.png",
    ᐃⵠⵠⵠΔΔⲆ: "img/day-level35.png",
    ⵠⵠⲆᐃⵠΔΔ: "img/night-level35.png",
    ᐃⲆΔⵠⲆΔΔ: "img/day-level40.png",
    ⲆⵠΔΔᐃΔⵠ: "img/night-level40.png",
    ⵠⲆᐃΔᐃⲆⲆ: "img/day-level45.png",
    ⲆⲆⵠⲆΔⲆᐃ: "img/night-level45.png",
    ΔᐃᐃΔΔⲆⲆ: "img/day-level50.png",
    ⲆⵠⵠⵠⲆⲆⵠ: "img/night-level50.png",
    ⲆⵠᐃΔⵠⵠⲆ: "img/day-level55.png",
    ᐃᐃΔᐃᐃⲆⵠ: "img/night-level55.png",
    ᐃᐃⲆΔᐃⲆΔ: "img/day-level60.png",
    ⵠΔᐃⵠΔⲆⵠ: "img/night-level60.png",
    ΔⵠΔΔᐃⵠⲆ: "img/day-skin-devast0.png",
    ΔⵠⵠⵠΔΔᐃ: "img/night-skin-devast0.png",
    ΔⵠⵠⵠⲆⵠᐃ: "img/day-hand-devaster.png",
    ⵠⵠⵠⵠΔⵠΔ: "img/night-hand-devaster.png",
    ⵠⵠⲆΔᐃⲆⲆ: "img/day-skin-star0.png",
    ⲆΔⵠⲆΔⲆⲆ: "img/night-skin-star0.png",
    ΔΔᐃⲆⲆⵠΔ: "img/day-hand-star0.png",
    ᐃⵠⲆΔⵠⲆΔ: "img/night-hand-star0.png",
    ⵠΔΔᐃᐃᐃᐃ: "img/day-vampire.png",
    ⲆⲆⲆᐃⵠⲆⲆ: "img/night-vampire.png",
    ᐃᐃⵠᐃⵠᐃΔ: "img/day-hand-vampire.png",
    ΔΔΔΔᐃⲆᐃ: "img/night-hand-vampire.png",
    ⲆⲆᐃᐃⲆΔⲆ: "img/day-zombie.png",
    ⵠᐃᐃⲆᐃⵠΔ: "img/night-zombie.png",
    ᐃᐃᐃⵠⵠⵠⵠ: "img/day-hand-zombie.png",
    ⵠᐃΔᐃⵠΔΔ: "img/night-hand-zombie.png",
    ⲆⲆⲆⵠⵠᐃΔ: "img/day-skin113.png",
    ⵠⲆⵠΔᐃΔᐃ: "img/night-skin113.png",
    ΔⲆⵠᐃΔΔⲆ: "img/day-hand-skin113.png",
    ⲆᐃⵠⵠᐃⲆᐃ: "img/night-hand-skin113.png",
    ᐃⵠΔΔᐃᐃΔ: "img/day-skin0.png",
    ⲆᐃⲆΔᐃⲆᐃ: "img/night-skin0.png",
    ⵠⵠⲆΔᐃΔⲆ: "img/day-skin1.png",
    ⵠⵠⵠᐃΔⲆᐃ: "img/night-skin1.png",
    ᐃΔᐃᐃⵠⲆⲆ: "img/day-skin2.png",
    ᐃⵠⵠΔΔⲆⲆ: "img/night-skin2.png",
    ⵠⵠⲆᐃⲆⲆᐃ: "img/day-skin3.png",
    ⵠᐃⲆᐃⲆᐃΔ: "img/night-skin3.png",
    ᐃⲆΔΔⲆⵠᐃ: "img/day-skin4.png",
    ΔᐃΔⵠⵠⵠΔ: "img/night-skin4.png",
    ⲆᐃⵠᐃⲆⲆⲆ: "img/day-skin5.png",
    ⲆᐃΔΔⲆᐃⲆ: "img/night-skin5.png",
    ΔⵠᐃⵠΔⲆⲆ: "img/day-skin6.png",
    ΔⲆΔⵠⲆΔΔ: "img/night-skin6.png",
    ᐃΔⲆⲆᐃⵠⵠ: "img/day-skin7.png",
    ⵠᐃΔΔⲆΔᐃ: "img/night-skin7.png",
    ⵠⲆⵠⵠⵠΔⲆ: "img/day-skin8.png",
    ⲆⵠᐃΔᐃⵠⲆ: "img/night-skin8.png",
    ΔΔᐃᐃᐃᐃᐃ: "img/day-skin9.png",
    ΔⵠⲆⵠⲆΔⲆ: "img/night-skin9.png",
    ΔⲆⵠⲆΔᐃⵠ: "img/day-skin10.png",
    ᐃΔⲆᐃΔᐃⲆ: "img/night-skin10.png",
    ⵠΔⵠᐃⲆΔⲆ: "img/day-skin11.png",
    ΔΔΔᐃΔⲆⵠ: "img/night-skin11.png",
    ⵠᐃΔΔᐃⵠⵠ: "img/day-skin12.png",
    ⵠⵠᐃⵠΔΔᐃ: "img/night-skin12.png",
    ⵠΔΔⲆⲆⵠᐃ: "img/day-skin13.png",
    ⵠΔᐃⲆⵠⲆⵠ: "img/night-skin13.png",
    ⲆΔⵠᐃᐃⲆΔ: "img/day-skin14.png",
    ΔⲆΔΔⵠⵠⵠ: "img/night-skin14.png",
    ΔΔΔⲆⵠⲆⲆ: "img/day-skin15.png",
    ᐃΔⲆⲆⵠᐃⲆ: "img/night-skin15.png",
    ᐃⲆⲆⵠΔⵠΔ: "img/day-skin16.png",
    ᐃⵠΔⵠΔᐃⲆ: "img/night-skin16.png",
    ⵠΔⲆⲆᐃᐃⵠ: "img/day-skin17.png",
    ⲆⵠⲆᐃΔᐃΔ: "img/night-skin17.png",
    ΔΔⵠⵠᐃᐃΔ: "img/day-skin18.png",
    ⵠⵠⲆᐃⵠⲆⲆ: "img/night-skin18.png",
    ⲆⵠⵠⵠⲆⵠⲆ: "img/day-skin19.png",
    ΔⲆᐃⲆΔⵠⲆ: "img/night-skin19.png",
    ᐃᐃⵠᐃᐃⵠᐃ: "img/day-skin20.png",
    ⲆᐃᐃΔⲆⵠᐃ: "img/night-skin20.png",
    ⲆⲆⲆⵠᐃΔΔ: "img/day-skin21.png",
    ΔⵠⲆᐃΔⲆΔ: "img/night-skin21.png",
    ⵠᐃⵠᐃᐃᐃΔ: "img/day-skin22.png",
    ⲆΔΔᐃᐃᐃΔ: "img/night-skin22.png",
    ⵠΔⲆΔⲆⲆⵠ: "img/day-skin23.png",
    ⵠⵠΔᐃⵠⵠᐃ: "img/night-skin23.png",
    ΔᐃΔⲆᐃΔΔ: "img/day-skin24.png",
    ΔⵠⲆΔⵠⲆⵠ: "img/night-skin24.png",
    ᐃⵠⲆⵠⲆⵠⵠ: "img/day-skin25.png",
    ⲆᐃⲆⵠΔⵠΔ: "img/night-skin25.png",
    ΔΔⵠⲆⲆⲆⵠ: "img/day-skin26.png",
    ᐃΔᐃᐃⲆᐃⲆ: "img/night-skin26.png",
    ΔΔⵠΔᐃⲆⲆ: "img/day-skin27.png",
    ᐃΔᐃⲆᐃⵠΔ: "img/night-skin27.png",
    ⵠᐃΔⵠΔΔΔ: "img/day-skin28.png",
    ΔᐃΔⲆΔⵠⲆ: "img/night-skin28.png",
    ⵠΔΔᐃΔⵠᐃ: "img/day-skin29.png",
    ΔΔⲆⲆⲆⲆⵠ: "img/night-skin29.png",
    ᐃΔᐃⵠⵠᐃⵠ: "img/day-skin30.png",
    ΔⲆΔⵠᐃⲆᐃ: "img/night-skin30.png",
    ⲆⲆⵠⵠΔΔᐃ: "img/day-skin31.png",
    ᐃΔⵠⲆⵠⲆΔ: "img/night-skin31.png",
    ᐃⵠᐃᐃᐃⵠᐃ: "img/day-skin32.png",
    ⲆⲆⵠⲆᐃⵠᐃ: "img/night-skin32.png",
    ⵠⵠᐃᐃⵠⵠⲆ: "img/day-skin33.png",
    ΔᐃΔⲆΔΔⵠ: "img/night-skin33.png",
    ⵠⵠⲆⵠⵠⲆⵠ: "img/day-skin34.png",
    ΔⵠⲆΔⲆⲆᐃ: "img/night-skin34.png",
    ⵠΔⵠⲆΔΔⲆ: "img/day-skin35.png",
    ⲆⵠⵠⵠⲆⵠᐃ: "img/night-skin35.png",
    ⵠⵠΔⵠⲆⵠⲆ: "img/day-skin36.png",
    ΔᐃⲆΔᐃᐃⵠ: "img/night-skin36.png",
    ᐃⲆⲆⵠᐃⵠⵠ: "img/day-skin37.png",
    ⵠⲆⲆΔΔⲆᐃ: "img/night-skin37.png",
    ΔⵠⵠⵠⲆᐃᐃ: "img/day-skin38.png",
    ΔⵠⲆᐃΔᐃΔ: "img/night-skin38.png",
    ⲆΔⲆⵠᐃΔᐃ: "img/day-skin39.png",
    ΔΔΔΔⲆⵠΔ: "img/night-skin39.png",
    ΔᐃⲆⲆⲆⲆᐃ: "img/day-skin40.png",
    ⵠᐃΔᐃᐃⲆⵠ: "img/night-skin40.png",
    ΔⲆⲆⵠᐃⵠᐃ: "img/day-skin41.png",
    ⵠΔⵠᐃᐃⵠⵠ: "img/night-skin41.png",
    ᐃⲆᐃᐃᐃΔⵠ: "img/day-skin42.png",
    ΔᐃⲆᐃᐃⲆΔ: "img/night-skin42.png",
    ΔΔⲆⲆⵠΔⵠ: "img/day-skin43.png",
    ⵠⵠⵠᐃᐃΔΔ: "img/night-skin43.png",
    ᐃᐃᐃⲆⵠΔᐃ: "img/day-skin44.png",
    ᐃᐃᐃΔⲆⲆΔ: "img/night-skin44.png",
    ⲆΔΔⲆᐃⵠⵠ: "img/day-skin45.png",
    ᐃⲆⵠΔⲆⵠⲆ: "img/night-skin45.png",
    ⲆᐃΔⵠⵠⲆⵠ: "img/day-skin46.png",
    ⵠⵠΔᐃⵠᐃΔ: "img/night-skin46.png",
    ᐃΔⵠⵠⵠᐃΔ: "img/day-skin47.png",
    ⵠΔᐃⲆΔᐃᐃ: "img/night-skin47.png",
    ⲆⲆⲆᐃΔΔᐃ: "img/day-skin48.png",
    ⲆΔⲆᐃᐃᐃⲆ: "img/night-skin48.png",
    ΔⲆᐃⵠΔⲆⵠ: "img/day-skin49.png",
    ⲆⲆΔᐃⵠᐃⲆ: "img/night-skin49.png",
    ⵠᐃᐃΔᐃⲆⲆ: "img/day-skin50.png",
    ΔⲆᐃⵠⲆⵠᐃ: "img/night-skin50.png",
    ΔⲆⲆⲆΔⲆΔ: "img/day-skin51.png",
    ⵠᐃⲆᐃⵠΔⲆ: "img/night-skin51.png",
    ⲆΔⲆⲆΔΔᐃ: "img/day-skin52.png",
    ᐃΔΔⲆⵠΔΔ: "img/night-skin52.png",
    ΔᐃⵠⲆᐃᐃⵠ: "img/day-skin53.png",
    ⲆⵠᐃⵠⲆⵠⲆ: "img/night-skin53.png",
    ⵠΔⲆᐃⲆΔΔ: "img/day-skin54.png",
    ΔΔⲆΔⵠΔΔ: "img/night-skin54.png",
    ⵠⲆⲆᐃⲆⵠΔ: "img/day-skin55.png",
    ⲆᐃⵠᐃΔΔⵠ: "img/night-skin55.png",
    ⵠᐃᐃᐃᐃⲆⲆ: "img/day-skin56.png",
    ⲆⵠᐃᐃⵠᐃΔ: "img/night-skin56.png",
    ⲆⲆⲆΔⲆᐃᐃ: "img/day-skin57.png",
    ⲆⲆⵠⵠᐃᐃⲆ: "img/night-skin57.png",
    ᐃⲆΔⵠΔⵠⵠ: "img/day-skin58.png",
    ⲆⲆⲆⲆΔᐃⲆ: "img/night-skin58.png",
    ΔΔᐃⲆᐃᐃⵠ: "img/day-skin59.png",
    ΔⵠᐃᐃΔΔᐃ: "img/night-skin59.png",
    ⵠᐃΔⲆΔΔᐃ: "img/day-skin60.png",
    ᐃΔᐃⲆᐃⵠᐃ: "img/night-skin60.png",
    ΔΔᐃⲆᐃΔᐃ: "img/day-skin61.png",
    ΔᐃΔᐃᐃΔΔ: "img/night-skin61.png",
    ⲆⵠᐃΔΔᐃᐃ: "img/day-skin62.png",
    ΔᐃᐃᐃⵠⲆⲆ: "img/night-skin62.png",
    ⵠΔⲆᐃⲆᐃⲆ: "img/day-skin63.png",
    ⵠΔⲆΔⲆΔⲆ: "img/night-skin63.png",
    ⲆⵠᐃⵠⲆΔⵠ: "img/day-skin64.png",
    ΔⲆᐃⲆⵠⵠΔ: "img/night-skin64.png",
    ᐃᐃⲆⵠⲆⵠⵠ: "img/day-skin65.png",
    ΔⲆᐃⵠΔⵠⵠ: "img/night-skin65.png",
    ΔᐃΔⵠⵠⵠⵠ: "img/day-skin66.png",
    ⲆⲆⵠΔⵠᐃⵠ: "img/night-skin66.png",
    ᐃᐃⲆΔΔⲆΔ: "img/day-skin67.png",
    ΔΔΔⵠⵠⲆΔ: "img/night-skin67.png",
    ᐃⲆᐃᐃᐃⵠⵠ: "img/day-skin68.png",
    ΔⵠΔᐃⲆᐃΔ: "img/night-skin68.png",
    ⵠᐃⵠⵠⲆᐃᐃ: "img/day-skin69.png",
    ᐃΔΔⲆⵠⲆΔ: "img/night-skin69.png",
    ᐃΔΔⲆᐃᐃⲆ: "img/day-skin70.png",
    ⲆⲆᐃⲆⲆⲆⵠ: "img/night-skin70.png",
    ⵠΔⵠᐃⲆᐃᐃ: "img/day-skin71.png",
    ⵠᐃⵠⵠΔⲆⲆ: "img/night-skin71.png",
    ΔⲆⲆᐃΔⵠᐃ: "img/day-skin72.png",
    ⵠⲆᐃΔⲆΔᐃ: "img/night-skin72.png",
    ΔᐃΔⵠⲆΔⲆ: "img/day-skin73.png",
    ⵠⵠΔⲆⲆⲆΔ: "img/night-skin73.png",
    ᐃᐃΔᐃⲆⵠᐃ: "img/day-skin74.png",
    ΔᐃⵠΔⲆΔⲆ: "img/night-skin74.png",
    ᐃᐃⲆⲆᐃⵠⲆ: "img/day-skin75.png",
    ᐃᐃᐃΔΔⵠᐃ: "img/night-skin75.png",
    ΔΔⵠᐃΔⲆΔ: "img/day-skin76.png",
    ⵠⲆⲆᐃΔᐃⵠ: "img/night-skin76.png",
    ΔⵠᐃⲆⲆⵠᐃ: "img/day-skin77.png",
    ΔⲆⲆΔΔⵠⵠ: "img/night-skin77.png",
    ΔⵠⵠⵠᐃⲆⵠ: "img/day-skin78.png",
    ⵠᐃⲆⵠⵠΔⲆ: "img/night-skin78.png",
    ΔⲆⲆⵠᐃΔΔ: "img/day-skin79.png",
    ⵠⲆⲆⲆΔⲆΔ: "img/night-skin79.png",
    ⵠⵠᐃⵠΔᐃᐃ: "img/day-skin80.png",
    ⵠᐃⲆᐃΔᐃⵠ: "img/night-skin80.png",
    ⵠⵠⵠΔⵠᐃΔ: "img/day-skin81.png",
    ᐃⲆⵠⵠⵠⵠⲆ: "img/night-skin81.png",
    ⵠᐃᐃΔⵠⲆΔ: "img/day-skin82.png",
    ΔΔᐃΔᐃᐃᐃ: "img/night-skin82.png",
    ⲆΔΔΔᐃΔᐃ: "img/day-skin83.png",
    ⵠⵠⲆⲆᐃⲆⲆ: "img/night-skin83.png",
    ᐃⲆⵠⲆΔᐃᐃ: "img/day-skin84.png",
    ⲆⲆᐃΔⲆⲆⵠ: "img/night-skin84.png",
    ΔΔⲆⲆᐃΔᐃ: "img/day-skin85.png",
    ᐃⵠᐃΔⵠⲆᐃ: "img/night-skin85.png",
    ⵠᐃⲆⵠⵠΔᐃ: "img/day-skin86.png",
    ΔⲆⵠᐃᐃⲆᐃ: "img/night-skin86.png",
    ΔᐃΔⵠⲆᐃΔ: "img/day-skin87.png",
    ⲆΔⵠⵠΔⲆⵠ: "img/night-skin87.png",
    ⲆⵠⵠⲆΔⲆΔ: "img/day-skin88.png",
    ⵠⲆⵠⵠⲆΔⲆ: "img/night-skin88.png",
    ⲆΔⲆⲆⵠᐃⲆ: "img/day-skin89.png",
    ΔᐃⲆᐃⵠΔⲆ: "img/night-skin89.png",
    ᐃᐃᐃⲆⵠᐃᐃ: "img/day-skin90.png",
    ⵠᐃⲆⵠⲆⲆᐃ: "img/night-skin90.png",
    ⲆᐃⵠⲆᐃΔᐃ: "img/day-skin91.png",
    ⲆΔᐃⲆΔⲆⲆ: "img/night-skin91.png",
    ᐃᐃᐃⵠⵠⵠᐃ: "img/day-skin92.png",
    ΔⵠⲆⵠⲆⵠⲆ: "img/night-skin92.png",
    ᐃⲆΔΔⵠⵠΔ: "img/day-skin93.png",
    ΔⲆΔΔⵠⵠΔ: "img/night-skin93.png",
    ⲆⲆⵠᐃᐃΔⵠ: "img/day-skin94.png",
    ⵠⵠᐃΔᐃΔΔ: "img/night-skin94.png",
    ⵠΔⲆⲆΔⲆⲆ: "img/day-skin95.png",
    ⲆⵠⲆΔⲆⵠⲆ: "img/night-skin95.png",
    ΔⲆⵠⵠᐃⵠΔ: "img/day-skin96.png",
    ⵠΔⲆⵠᐃᐃΔ: "img/night-skin96.png",
    ⲆΔΔΔᐃⵠᐃ: "img/day-skin97.png",
    ΔᐃΔⵠΔΔᐃ: "img/night-skin97.png",
    ⵠΔⵠᐃᐃᐃᐃ: "img/day-skin98.png",
    ⵠⵠΔⲆΔⵠⵠ: "img/night-skin98.png",
    ᐃΔⵠⲆΔⲆᐃ: "img/day-skin99.png",
    ᐃΔΔᐃΔⵠⵠ: "img/night-skin99.png",
    ΔⲆⲆⲆᐃⲆⵠ: "img/day-skin100.png",
    ΔⵠⵠΔⲆⲆⵠ: "img/night-skin100.png",
    ⵠⵠᐃΔᐃΔᐃ: "img/day-skin101.png",
    ᐃⲆᐃⵠΔⵠⲆ: "img/night-skin101.png",
    ᐃⵠⲆⵠⵠΔᐃ: "img/day-skin102.png",
    ΔᐃΔⲆⵠⲆⲆ: "img/night-skin102.png",
    ᐃᐃΔⵠᐃⲆⵠ: "img/day-skin103.png",
    ᐃⲆⵠⵠᐃⵠⲆ: "img/night-skin103.png",
    ⲆΔⲆⵠⲆⵠⵠ: "img/day-skin104.png",
    ⵠⲆⲆΔⵠΔΔ: "img/night-skin104.png",
    ΔΔⲆΔⲆΔᐃ: "img/day-skin105.png",
    ᐃΔⵠⲆⲆᐃⲆ: "img/night-skin105.png",
    ⲆᐃΔΔᐃⵠⵠ: "img/day-skin106.png",
    ᐃΔΔⲆⲆᐃⵠ: "img/night-skin106.png",
    ΔⲆΔⵠΔⲆⵠ: "img/day-skin107.png",
    ΔⲆΔΔⲆⵠΔ: "img/night-skin107.png",
    ΔⲆΔΔⲆⲆⲆ: "img/day-skin108.png",
    ⵠΔᐃΔⲆΔΔ: "img/night-skin108.png",
    ⵠΔᐃⲆⲆⵠΔ: "img/day-skin109.png",
    ᐃᐃⲆᐃᐃᐃⲆ: "img/night-skin109.png",
    ⵠⲆΔΔⲆⲆⵠ: "img/day-skin110.png",
    ⲆΔⵠΔⵠᐃᐃ: "img/night-skin110.png",
    ΔᐃⵠⲆᐃⲆᐃ: "img/day-skin111.png",
    ᐃᐃⵠⲆⲆⵠᐃ: "img/night-skin111.png",
    ⲆΔᐃⲆⲆⲆⵠ: "img/day-skin112.png",
    ⵠⵠᐃᐃᐃΔⲆ: "img/night-skin112.png",
    ᐃⵠⲆⲆΔⲆᐃΔΔ: "img/day-skin113.png",
    ⲆᐃⵠᐃΔⲆⲆΔΔ: "img/night-skin113.png",
    ΔⲆᐃΔⲆⵠⵠ: "img/day-skin114.png",
    ⲆᐃΔᐃΔⲆⲆ: "img/night-skin114.png",
    ⵠᐃΔⵠⵠⲆⵠ: "img/day-skin115.png",
    ⵠⵠᐃⵠΔᐃⵠ: "img/night-skin115.png",
    ⵠᐃᐃΔⵠΔⵠ: "img/day-skin116.png",
    ⲆΔΔΔᐃⵠⲆ: "img/night-skin116.png",
    ᐃⵠⵠΔⲆΔⵠ: "img/day-skin117.png",
    ⲆᐃⲆᐃⲆⵠΔ: "img/night-skin117.png",
    ΔⲆᐃⵠΔᐃΔ: "img/day-skin118.png",
    ᐃΔⲆⵠΔⲆᐃ: "img/night-skin118.png",
    ΔⵠⵠᐃᐃⲆΔ: "img/day-skin119.png",
    ΔΔⲆᐃⲆⵠΔ: "img/night-skin119.png",
    ᐃⵠⵠΔᐃⲆᐃ: "img/day-skin120.png",
    ⵠᐃⲆⵠⲆΔⲆ: "img/night-skin120.png",
    ⲆᐃᐃⵠⲆᐃΔ: "img/day-skin121.png",
    ᐃⵠᐃⲆΔᐃᐃ: "img/night-skin121.png",
    ⵠⵠⲆᐃⵠΔᐃ: "img/day-skin122.png",
    ᐃⵠᐃΔⲆⲆⲆ: "img/night-skin122.png",
    ⲆᐃⲆΔⵠⲆᐃ: "img/day-skin123.png",
    ⵠΔⲆᐃⵠΔΔ: "img/night-skin123.png",
    ᐃΔⵠΔⲆⲆⵠ: "img/day-skin124.png",
    ᐃᐃᐃᐃᐃΔΔ: "img/night-skin124.png",
    ⲆⲆΔⵠⵠⲆΔ: "img/day-skin125.png",
    ᐃᐃΔΔⵠᐃᐃ: "img/night-skin125.png",
    ᐃⲆⲆΔⲆⲆΔ: "img/day-skin126.png",
    ᐃΔΔⲆᐃᐃΔ: "img/night-skin126.png",
    ⵠΔᐃᐃⲆⲆΔ: "img/day-skin127.png",
    ⲆᐃᐃΔΔΔᐃ: "img/night-skin127.png",
    ΔΔᐃᐃΔΔⵠ: "img/day-skin128.png",
    ⲆᐃⲆΔΔᐃⲆ: "img/night-skin128.png",
    ⲆⵠⵠΔⵠΔᐃ: "img/day-skin129.png",
    ⵠⵠⲆⵠⵠΔⲆ: "img/night-skin129.png",
    ᐃᐃᐃᐃᐃᐃⵠ: "img/day-skin130-1.png",
    ⵠⵠⲆΔⲆᐃΔ: "img/night-skin130-1.png",
    ⲆᐃⵠⵠᐃΔⵠ: "img/day-skin131.png",
    ᐃⲆⵠⲆΔΔⲆ: "img/night-skin131.png",
    ⲆⵠⵠᐃⵠⵠⲆ: "img/day-skin132.png",
    ᐃⵠⵠᐃΔⲆⵠ: "img/night-skin132.png",
    ᐃⵠᐃΔΔⲆΔ: "img/day-skin133.png",
    ⲆⲆⲆⵠΔΔⵠ: "img/night-skin133.png",
    ΔΔⲆⵠΔⵠΔ: "img/day-skin134.png",
    ⲆᐃᐃⲆΔⲆⲆ: "img/night-skin134.png",
    ᐃⲆⲆΔΔΔᐃ: "img/day-skin135.png",
    ᐃΔᐃΔΔⲆΔ: "img/night-skin135.png",
    ΔⲆᐃⲆⲆⲆⵠ: "img/day-skin136.png",
    ΔⵠΔᐃⲆⲆΔ: "img/night-skin136.png",
    ⵠΔΔΔᐃᐃⵠ: "img/day-skin137.png",
    ΔⲆΔΔΔΔⲆ: "img/night-skin137.png",
    ᐃⲆⵠⵠΔᐃΔ: "img/day-skin138.png",
    ΔᐃⵠᐃΔᐃΔ: "img/night-skin138.png",
    Ⲇᐃⵠᐃⵠᐃⵠ: "img/day-skin139.png",
    ᐃΔⵠΔᐃⲆᐃ: "img/night-skin139.png",
    ⵠⵠⵠⲆΔⵠᐃ: "img/day-skin140.png",
    ⵠⵠΔⲆΔⲆⵠ: "img/night-skin140.png",
    ᐃⲆᐃΔⲆᐃⲆ: "img/day-skin141.png",
    ⲆΔΔⵠⵠΔᐃ: "img/night-skin141.png",
    ᐃᐃⲆⲆⵠⲆⵠ: "img/day-skin142.png",
    ⲆΔⵠⵠⵠⵠⵠ: "img/night-skin142.png",
    ᐃᐃⲆⲆΔΔΔ: "img/day-skin143.png",
    ⲆΔⵠⵠΔᐃᐃ: "img/night-skin143.png",
    ⲆᐃⲆⵠΔΔᐃ: "img/day-skin144.png",
    ⵠΔΔᐃΔⵠⵠ: "img/night-skin144.png",
    ᐃΔΔⲆΔΔΔ: "img/day-skin145.png",
    ⲆⵠᐃⲆᐃⵠᐃ: "img/night-skin145.png",
    ⵠᐃⵠᐃⵠΔᐃ: "img/day-skin146.png",
    ⵠⲆⲆᐃΔⲆᐃ: "img/night-skin146.png",
    ᐃᐃᐃΔⲆᐃᐃ: "img/day-skin147.png",
    ΔΔᐃᐃⲆⲆⵠ: "img/night-skin147.png",
    ⲆΔⲆⵠᐃⵠⵠ: "img/day-skin148.png",
    ᐃⵠⵠᐃⵠᐃᐃ: "img/night-skin148.png",
    ΔΔᐃⲆΔΔⲆ: "img/day-skin149.png",
    ⲆⵠⵠⵠᐃᐃⲆ: "img/night-skin149.png",
    ⲆᐃⲆᐃΔⵠⵠ: "img/day-skin150.png",
    ΔΔᐃⲆⲆΔⵠ: "img/night-skin150.png",
    ᐃᐃΔⲆΔᐃⲆ: "img/day-hand-skin0.png",
    Ⲇᐃⵠⵠⵠⵠᐃ: "img/night-hand-skin0.png",
    ⵠⵠⲆᐃᐃⲆⵠ: "img/day-hand-skin1.png",
    ΔᐃⵠⵠⵠΔΔ: "img/night-hand-skin1.png",
    ⵠᐃⵠΔⵠᐃⵠ: "img/day-hand-skin2.png",
    ᐃᐃᐃⲆⵠᐃⲆ: "img/night-hand-skin2.png",
    ᐃⵠΔⵠᐃᐃΔ: "img/day-hand-skin3.png",
    ⲆᐃⵠⵠᐃΔᐃ: "img/night-hand-skin3.png",
    ᐃⲆⵠⵠⲆΔᐃ: "img/day-hand-skin4.png",
    ⲆᐃᐃⲆⲆⲆⲆ: "img/night-hand-skin4.png",
    ΔΔΔⵠᐃⲆⵠ: "img/day-hand-skin5.png",
    ⲆΔⲆⵠⵠᐃΔ: "img/night-hand-skin5.png",
    ᐃⵠⲆᐃᐃΔΔ: "img/day-hand-skin6.png",
    ΔᐃⲆΔΔⲆᐃΔᐃ: "img/night-hand-skin6.png",
    ᐃⵠΔⵠᐃΔⲆ: "img/day-hand-skin6.png",
    ᐃΔᐃⵠᐃᐃᐃ: "img/night-hand-skin6.png",
    ⲆᐃΔⵠΔⲆΔ: "img/day-hand-skin8.png",
    ⵠᐃⵠⵠΔΔΔ: "img/night-hand-skin8.png",
    ᐃⵠᐃΔΔᐃΔ: "img/day-hand-skin9.png",
    ⲆⵠⲆⵠΔⲆⲆ: "img/night-hand-skin9.png",
    ᐃᐃΔⵠⵠΔΔ: "img/day-hand-skin10.png",
    ΔᐃᐃⵠⲆΔᐃ: "img/night-hand-skin10.png",
    ᐃⲆⲆⲆⲆΔⲆ: "img/day-hand-skin11.png",
    ⵠᐃⲆᐃᐃⵠⵠ: "img/night-hand-skin11.png",
    ΔΔⲆΔΔᐃⲆ: "img/day-hand-skin12.png",
    ⲆⲆⵠᐃᐃⵠⲆ: "img/night-hand-skin12.png",
    ⵠⲆⲆΔⲆᐃΔ: "img/day-hand-skin13.png",
    ⵠⲆΔΔⲆΔΔ: "img/night-hand-skin13.png",
    ᐃⵠΔⵠⲆᐃΔ: "img/day-hand-skin14.png",
    ⲆᐃΔᐃⵠᐃⲆ: "img/night-hand-skin14.png",
    ΔⲆⲆΔⲆⵠᐃ: "img/day-hand-skin15.png",
    ΔⵠⵠΔΔⲆᐃ: "img/night-hand-skin15.png",
    ΔⲆⲆⲆᐃᐃΔ: "img/day-hand-skin16.png",
    ᐃΔⵠΔΔⵠⵠ: "img/night-hand-skin16.png",
    ᐃᐃⵠᐃⲆⵠⲆ: "img/day-hand-skin17.png",
    ⲆΔᐃᐃⵠᐃⵠ: "img/night-hand-skin17.png",
    ⵠΔⲆⵠΔᐃΔ: "img/day-hand-skin18.png",
    ⵠⲆᐃΔΔⲆⵠ: "img/night-hand-skin18.png",
    ⵠΔᐃΔΔⵠⲆ: "img/day-hand-skin19.png",
    ΔΔⵠᐃΔΔⲆ: "img/night-hand-skin19.png",
    ⵠᐃΔⲆᐃⵠᐃ: "img/day-hand-skin20.png",
    ᐃᐃⲆⲆⲆΔᐃ: "img/night-hand-skin20.png",
    ᐃⵠⲆⵠᐃⲆⵠ: "img/day-hand-skin21.png",
    ΔⲆΔⲆᐃⵠⵠ: "img/night-hand-skin21.png",
    ΔⲆΔΔΔᐃⲆ: "img/day-hand-skin22.png",
    ⵠⲆᐃΔΔΔⵠ: "img/night-hand-skin22.png",
    ⲆⲆᐃⵠᐃⲆΔ: "img/day-hand-skin23.png",
    ΔⲆΔⵠᐃΔⵠ: "img/night-hand-skin23.png",
    ΔⲆⵠⲆΔⲆΔ: "img/day-hand-skin24.png",
    ΔΔΔᐃⵠⵠΔ: "img/night-hand-skin24.png",
    ⵠΔᐃⵠᐃΔⵠ: "img/day-hand-skin25.png",
    ΔᐃΔⵠⵠⵠᐃ: "img/night-hand-skin25.png",
    ᐃᐃΔΔⵠΔΔ: "img/day-hand-skin26.png",
    ⵠⲆⵠᐃᐃΔΔ: "img/night-hand-skin26.png",
    ᐃΔΔⵠΔᐃⵠ: "img/day-hand-skin27.png",
    ⵠΔⵠⲆⲆⵠΔ: "img/night-hand-skin27.png",
    ΔⲆΔⵠᐃⵠⵠ: "img/day-hand-skin28.png",
    ⲆⲆᐃⵠⲆⵠⵠ: "img/night-hand-skin28.png",
    Δⵠⵠᐃᐃⵠᐃ: "img/day-hand-skin29.png",
    ᐃᐃⲆⵠⲆⲆⵠ: "img/night-hand-skin29.png",
    ΔⲆⲆᐃⵠᐃΔ: "img/day-hand-skin30.png",
    ΔΔΔᐃⵠⲆΔ: "img/night-hand-skin30.png",
    ⲆⵠᐃⲆΔⲆⲆ: "img/day-hand-skin31.png",
    ᐃⲆⵠΔⲆⵠᐃ: "img/night-hand-skin31.png",
    ⲆΔⵠⵠⵠᐃⲆ: "img/day-hand-skin32.png",
    ΔⵠᐃⲆᐃΔΔ: "img/night-hand-skin32.png",
    ⲆⵠᐃⵠΔⲆⲆ: "img/day-hand-skin33.png",
    ⵠⵠⲆⵠᐃΔΔ: "img/night-hand-skin33.png",
    ⲆⲆⵠᐃᐃᐃΔ: "img/day-hand-skin34.png",
    ᐃΔⲆⵠⵠΔΔ: "img/night-hand-skin34.png",
    ΔᐃⵠᐃⲆᐃⵠ: "img/day-hand-skin35.png",
    ΔΔⵠᐃⵠᐃⵠ: "img/night-hand-skin35.png",
    ⲆⲆΔⲆⵠⲆⲆ: "img/day-hand-skin36.png",
    ⲆⲆΔⲆⵠⵠΔ: "img/night-hand-skin36.png",
    ⲆⲆⲆᐃᐃΔⵠ: "img/day-hand-skin37.png",
    ΔⵠⵠΔΔᐃᐃ: "img/night-hand-skin37.png",
    ⵠᐃⲆⲆⵠⵠⵠ: "img/day-hand-skin38.png",
    ΔᐃⵠⲆⲆΔΔ: "img/night-hand-skin38.png",
    ⲆΔᐃⲆⲆⲆᐃ: "img/day-hand-skin39.png",
    ⲆⲆΔⵠⵠᐃᐃ: "img/night-hand-skin39.png",
    ⵠⵠᐃⵠᐃᐃᐃ: "img/day-hand-skin40.png",
    ⲆᐃᐃΔⲆᐃᐃ: "img/night-hand-skin40.png",
    ⲆⵠⲆᐃⵠⵠᐃ: "img/day-hand-skin41.png",
    ΔⲆⲆᐃΔⲆⵠ: "img/night-hand-skin41.png",
    ⵠᐃⵠⵠᐃΔⲆ: "img/day-hand-skin42.png",
    ᐃⲆΔᐃΔⲆⵠ: "img/night-hand-skin42.png",
    ᐃᐃᐃⵠΔⵠⲆ: "img/day-hand-skin43.png",
    ⵠⵠⲆᐃᐃΔᐃ: "img/night-hand-skin43.png",
    ᐃⲆⲆΔⵠᐃᐃ: "img/day-hand-skin16.png",
    ᐃΔΔⲆⵠᐃⲆ: "img/night-hand-skin16.png",
    ΔⵠⲆⲆᐃᐃᐃ: "img/day-hand-skin45.png",
    ⵠⵠΔⵠⵠΔⵠ: "img/night-hand-skin45.png",
    ⵠΔᐃᐃᐃⵠⲆ: "img/day-hand-skin46.png",
    ⲆⲆᐃⵠⲆⵠᐃ: "img/night-hand-skin46.png",
    ᐃᐃⵠΔⵠⲆⲆ: "img/day-hand-skin47.png",
    ⵠⵠⵠᐃΔΔⲆ: "img/night-hand-skin47.png",
    ΔⵠᐃⵠᐃΔᐃ: "img/day-hand-skin48.png",
    ⵠⲆΔⵠⵠⵠⲆ: "img/night-hand-skin48.png",
    ᐃᐃⵠⲆΔⲆⲆ: "img/day-hand-skin49.png",
    ΔⲆⲆᐃⲆᐃⲆ: "img/night-hand-skin49.png",
    ⵠⵠⲆⵠΔⵠᐃ: "img/day-hand-skin49.png",
    ΔⵠⲆΔⵠᐃᐃ: "img/night-hand-skin49.png",
    ⵠᐃΔᐃᐃΔⲆ: "img/day-hand-skin51.png",
    ⵠⲆⲆᐃᐃᐃΔ: "img/night-hand-skin51.png",
    ᐃᐃⵠⲆⲆⵠⲆ: "img/day-hand-skin52.png",
    ⵠᐃⲆⲆᐃΔᐃ: "img/night-hand-skin52.png",
    ⵠⵠΔᐃΔᐃⲆ: "img/day-hand-skin53.png",
    ΔⵠⵠⵠⲆΔᐃ: "img/night-hand-skin53.png",
    ⵠⲆⵠΔᐃⲆΔ: "img/day-hand-skin53.png",
    ⲆⲆⲆΔⲆΔⵠ: "img/night-hand-skin53.png",
    ⲆⵠᐃᐃⵠᐃⲆ: "img/day-hand-skin55.png",
    ΔⵠⲆⵠⵠΔΔ: "img/night-hand-skin55.png",
    ⵠΔᐃⲆΔⲆᐃ: "img/day-hand-skin56.png",
    ᐃΔΔΔⲆᐃᐃ: "img/night-hand-skin56.png",
    ᐃⲆᐃⵠⵠΔⵠ: "img/day-hand-skin57.png",
    ⵠᐃΔᐃⵠⵠⲆ: "img/night-hand-skin57.png",
    ΔⵠΔΔΔΔⲆ: "img/day-hand-skin58.png",
    ⵠᐃⲆⵠⲆⵠΔ: "img/night-hand-skin58.png",
    ⲆΔⲆΔΔⲆΔ: "img/day-hand-skin59.png",
    ΔᐃⵠΔΔⵠⵠ: "img/night-hand-skin59.png",
    ⵠⲆⵠⵠⵠⲆΔ: "img/day-hand-skin61.png",
    ΔⲆⵠᐃⵠⵠⲆ: "img/night-hand-skin61.png",
    ⵠΔᐃⵠⵠⲆⲆ: "img/day-hand-skin61.png",
    ⵠᐃᐃⵠᐃⵠⲆ: "img/night-hand-skin61.png",
    ᐃⲆΔᐃΔᐃᐃ: "img/day-hand-skin62.png",
    ᐃΔᐃⲆᐃⵠⲆ: "img/night-hand-skin62.png",
    ᐃΔⵠⲆᐃᐃⵠ: "img/day-hand-skin63.png",
    ᐃᐃⵠⲆⲆⵠⵠ: "img/night-hand-skin63.png",
    ⲆⵠᐃΔΔⲆⵠ: "img/day-hand-skin64.png",
    ⲆΔΔⲆᐃⵠΔ: "img/night-hand-skin64.png",
    ΔᐃⲆΔⵠΔⵠ: "img/day-hand-skin65.png",
    ΔΔⲆⵠⵠΔⵠ: "img/night-hand-skin65.png",
    ᐃⵠⵠᐃΔⲆⲆ: "img/day-hand-skin66.png",
    ⲆⵠⲆᐃΔⲆⵠ: "img/night-hand-skin66.png",
    ⵠⵠᐃⲆⲆΔᐃ: "img/day-hand-skin67.png",
    ⵠⲆⵠⵠᐃⵠⵠ: "img/night-hand-skin67.png",
    ⲆᐃΔΔΔⵠᐃ: "img/day-hand-skin68.png",
    ⲆⲆⲆⲆⵠⲆᐃ: "img/night-hand-skin68.png",
    ΔΔᐃⲆⵠᐃⵠ: "img/day-hand-skin69.png",
    ᐃⵠⲆᐃΔⲆⲆ: "img/night-hand-skin69.png",
    ⲆⵠⵠⵠⲆᐃⲆ: "img/day-hand-skin70.png",
    ᐃᐃΔⲆΔᐃⵠ: "img/night-hand-skin70.png",
    ⵠⵠᐃᐃΔⵠⲆ: "img/day-hand-skin71.png",
    ΔΔⲆΔⵠⵠᐃ: "img/night-hand-skin71.png",
    ᐃᐃΔᐃᐃᐃᐃ: "img/day-hand-skin72.png",
    ⲆⲆΔΔᐃΔⵠ: "img/night-hand-skin72.png",
    ΔⲆⵠⲆⲆᐃᐃ: "img/day-hand-skin73.png",
    ΔⵠⵠΔⲆᐃⵠ: "img/night-hand-skin73.png",
    ⲆΔΔⵠΔΔᐃ: "img/day-hand-skin74.png",
    ⵠⵠⲆⲆΔⲆΔ: "img/night-hand-skin74.png",
    ᐃᐃᐃⲆΔⲆⲆ: "img/day-hand-skin75.png",
    ⲆᐃᐃⲆΔᐃⵠ: "img/night-hand-skin75.png",
    ⵠⲆᐃⲆΔⲆΔ: "img/day-hand-skin76.png",
    ᐃᐃⵠⵠΔⵠⵠ: "img/night-hand-skin76.png",
    ᐃⲆⲆΔⵠΔΔ: "img/day-hand-skin77.png",
    ΔᐃⲆⵠⵠⵠⲆ: "img/night-hand-skin77.png",
    ᐃⲆᐃᐃⵠⲆᐃ: "img/day-hand-skin78.png",
    ⲆⲆΔᐃⲆΔᐃ: "img/night-hand-skin78.png",
    ΔⲆⵠΔᐃᐃⵠ: "img/day-hand-skin79.png",
    ΔᐃᐃᐃΔⲆΔ: "img/night-hand-skin79.png",
    ⲆⲆᐃᐃⵠᐃᐃ: "img/day-hand-skin80.png",
    ⲆᐃΔⵠᐃⵠⲆ: "img/night-hand-skin80.png",
    ⵠⲆᐃΔΔⵠΔ: "img/day-hand-skin81.png",
    ⲆᐃΔΔΔⲆΔ: "img/night-hand-skin81.png",
    ⵠᐃⵠⵠⵠᐃΔ: "img/day-hand-skin82.png",
    ΔΔⲆΔΔⲆⵠ: "img/night-hand-skin82.png",
    ⵠΔⵠᐃⲆΔΔ: "img/day-hand-skin83.png",
    ⵠΔΔⵠⵠⵠⲆ: "img/night-hand-skin83.png",
    ΔⲆΔᐃⵠΔⲆ: "img/day-hand-skin84.png",
    ⵠⵠΔᐃΔΔⲆ: "img/night-hand-skin84.png",
    ΔⵠⲆⵠΔⵠᐃ: "img/day-hand-skin85.png",
    ΔⲆᐃⲆᐃΔΔ: "img/night-hand-skin85.png",
    ΔᐃΔⵠⲆᐃᐃ: "img/day-hand-skin86.png",
    ΔΔΔΔⵠⲆΔ: "img/night-hand-skin86.png",
    ᐃⲆΔⵠΔΔᐃ: "img/day-hand-skin87.png",
    ⲆΔⲆⲆⵠⲆⲆ: "img/night-hand-skin87.png",
    ⵠᐃᐃⵠᐃⵠΔ: "img/day-hand-skin88.png",
    ⲆⲆⲆⵠⲆΔⵠ: "img/night-hand-skin88.png",
    ⵠⲆᐃΔⲆᐃΔ: "img/day-hand-skin89.png",
    ⲆⲆΔᐃΔⲆᐃ: "img/night-hand-skin89.png",
    ⵠΔⵠΔΔⵠⵠ: "img/day-hand-skin90.png",
    ⲆΔΔⲆΔⵠⵠ: "img/night-hand-skin90.png",
    ΔⲆⵠⲆⵠⵠᐃ: "img/day-hand-skin91.png",
    ⵠⵠⲆΔⲆⲆⲆ: "img/night-hand-skin91.png",
    ⲆⵠⵠⲆᐃΔⲆ: "img/day-hand-skin92.png",
    ⵠΔⵠᐃᐃᐃΔ: "img/night-hand-skin92.png",
    ᐃΔⲆΔⲆᐃⲆ: "img/day-hand-skin93.png",
    ᐃⲆᐃⵠΔᐃⵠ: "img/night-hand-skin93.png",
    ⲆᐃΔⲆΔⵠᐃ: "img/day-hand-skin94.png",
    ᐃΔᐃⵠⵠⵠᐃ: "img/night-hand-skin94.png",
    ᐃᐃⵠⲆᐃΔⵠ: "img/day-hand-skin95.png",
    ⵠⵠⵠΔⵠⲆᐃ: "img/night-hand-skin95.png",
    ᐃⲆⵠⲆⲆΔⲆ: "img/day-hand-skin96.png",
    ᐃᐃᐃⲆΔΔⵠ: "img/night-hand-skin96.png",
    ⲆᐃⲆΔΔΔΔ: "img/day-hand-skin97.png",
    ⲆᐃΔᐃⲆⵠΔ: "img/night-hand-skin97.png",
    ⲆΔⵠᐃΔΔΔ: "img/day-hand-skin98.png",
    ⲆΔΔΔΔⵠⲆ: "img/night-hand-skin98.png",
    ⲆⲆᐃⵠᐃΔᐃ: "img/day-hand-skin99.png",
    ᐃᐃΔⲆⵠΔΔ: "img/night-hand-skin99.png",
    ᐃΔΔΔⲆΔⲆ: "img/day-hand-skin100.png",
    ᐃΔᐃⵠⵠΔⵠ: "img/night-hand-skin100.png",
    ᐃΔⲆᐃⲆⲆⲆ: "img/day-hand-skin101.png",
    ΔⵠΔⵠⲆᐃΔ: "img/night-hand-skin101.png",
    ΔⵠⲆⲆⲆΔΔ: "img/day-hand-skin102.png",
    ΔⵠⵠᐃΔⵠⵠ: "img/night-hand-skin102.png",
    ΔⲆⲆΔⵠⵠΔ: "img/day-hand-skin103.png",
    ⲆⵠⲆⲆⲆΔᐃ: "img/night-hand-skin103.png",
    ⲆᐃⵠᐃⵠΔⵠ: "img/day-hand-skin104.png",
    ᐃᐃΔⵠΔⵠⲆ: "img/night-hand-skin104.png",
    ⵠⵠᐃΔΔⲆⲆ: "img/day-hand-skin105.png",
    ΔΔⵠⲆᐃΔⵠ: "img/night-hand-skin105.png",
    ᐃⵠΔⲆᐃⵠᐃ: "img/day-hand-skin106.png",
    ⵠΔⵠⵠⵠⵠΔ: "img/night-hand-skin106.png",
    ᐃⵠⲆⲆΔΔΔ: "img/day-hand-skin107.png",
    ᐃΔΔᐃᐃⵠΔ: "img/night-hand-skin107.png",
    ⵠᐃⵠⲆΔᐃⲆ: "img/day-hand-skin108.png",
    ⲆⲆᐃᐃⵠⲆᐃ: "img/night-hand-skin108.png",
    ᐃΔΔᐃⲆⵠΔ: "img/day-hand-skin109.png",
    ⲆⵠⲆᐃΔᐃⵠ: "img/night-hand-skin109.png",
    ⵠᐃⲆᐃⵠⲆΔ: "img/day-hand-skin110.png",
    ⲆᐃⵠⵠⲆΔⵠ: "img/night-hand-skin110.png",
    ⵠΔΔⲆⲆⲆᐃ: "img/day-hand-skin111.png",
    ᐃⵠΔᐃⲆᐃΔ: "img/night-hand-skin111.png",
    ΔᐃⵠⲆΔⵠⲆ: "img/day-hand-skin112.png",
    ⲆⵠⲆⲆⲆᐃΔ: "img/night-hand-skin112.png",
    ᐃΔᐃⲆⲆⲆⵠⵠΔ: "img/day-hand-skin113.png",
    ᐃⵠᐃΔⲆΔᐃΔᐃ: "img/night-hand-skin113.png",
    ⵠⲆⵠⵠⵠⵠⲆ: "img/day-hand-skin114.png",
    ᐃΔᐃΔᐃΔⲆ: "img/night-hand-skin114.png",
    ⲆΔΔΔⲆⵠΔ: "img/day-hand-skin115.png",
    ΔⵠⲆⵠᐃΔⵠ: "img/night-hand-skin115.png",
    ⲆᐃⲆⵠⲆⲆᐃ: "img/day-hand-skin116.png",
    ᐃⲆⵠⵠΔΔΔ: "img/night-hand-skin116.png",
    ΔᐃΔΔΔΔⵠ: "img/day-hand-skin117.png",
    ᐃⲆΔⵠΔᐃⵠ: "img/night-hand-skin117.png",
    ⲆⵠᐃⵠⲆᐃΔ: "img/day-hand-skin118.png",
    ΔΔᐃⵠΔⲆⵠ: "img/night-hand-skin118.png",
    ᐃᐃᐃⲆⵠⵠΔ: "img/day-hand-skin119.png",
    ᐃⵠΔᐃⲆⲆⲆ: "img/night-hand-skin119.png",
    ⵠⲆⵠⲆᐃᐃⲆ: "img/day-hand-skin120.png",
    ⵠⲆΔᐃⵠⲆⵠ: "img/night-hand-skin120.png",
    ΔᐃⲆⲆᐃⵠⲆ: "img/day-hand-skin122.png",
    ΔⲆⵠⲆⵠⵠΔ: "img/night-hand-skin122.png",
    ᐃΔⲆΔⵠⲆᐃ: "img/day-hand-skin122.png",
    ⲆⵠΔⵠⵠⲆΔ: "img/night-hand-skin122.png",
    ⲆⲆΔⲆⲆⵠΔ: "img/day-hand-skin122.png",
    ᐃᐃⵠᐃⵠᐃⲆ: "img/night-hand-skin122.png",
    ΔⲆΔⲆⲆΔⲆ: "img/day-hand-skin124.png",
    ⲆⵠⲆⲆᐃᐃᐃ: "img/night-hand-skin124.png",
    ΔΔᐃᐃⵠⵠⲆ: "img/day-hand-skin125.png",
    ᐃⵠⲆᐃᐃⵠᐃ: "img/night-hand-skin125.png",
    ⲆΔⵠᐃⵠⵠᐃ: "img/day-hand-skin126.png",
    ΔᐃᐃⲆⵠᐃᐃ: "img/night-hand-skin126.png",
    ⵠΔⲆᐃⲆⲆΔ: "img/day-hand-skin127.png",
    ΔⵠⲆⵠⲆΔⵠ: "img/night-hand-skin127.png",
    ⲆⵠᐃᐃⲆⵠΔ: "img/day-hand-skin128.png",
    ΔⲆⲆⵠᐃΔⲆ: "img/night-hand-skin128.png",
    ΔⲆⲆⵠⲆⲆⲆ: "img/day-hand-skin129.png",
    ⲆⵠΔΔⵠⵠᐃ: "img/night-hand-skin129.png",
    ΔⲆⵠⵠⵠΔⲆ: "img/day-hand-skin130.png",
    ⲆⵠΔᐃⲆᐃᐃ: "img/night-hand-skin130.png",
    ᐃⵠⲆᐃⵠⲆⵠ: "img/day-hand-skin131.png",
    ⲆᐃⵠᐃⲆΔᐃ: "img/night-hand-skin131.png",
    ⵠᐃⵠⵠⲆⲆⵠ: "img/day-hand-skin130.png",
    ΔᐃⵠⵠⲆᐃᐃ: "img/night-hand-skin130.png",
    ΔⲆᐃΔⲆⲆⲆ: "img/day-hand-skin133.png",
    ⲆⵠΔᐃⲆᐃⵠ: "img/night-hand-skin133.png",
    ᐃⵠᐃΔΔⵠⲆ: "img/day-hand-skin134.png",
    ⲆⲆᐃΔᐃⲆᐃ: "img/night-hand-skin134.png",
    ⵠᐃⲆⵠⵠΔΔ: "img/day-hand-skin135.png",
    ⵠⲆΔⵠⵠᐃⵠ: "img/night-hand-skin135.png",
    ᐃⵠⲆⵠⵠᐃΔ: "img/day-hand-skin136.png",
    ΔΔⵠΔΔⵠᐃ: "img/night-hand-skin136.png",
    ⵠⲆΔΔᐃⵠⵠ: "img/day-hand-skin137.png",
    ᐃⲆᐃⲆⵠΔΔ: "img/night-hand-skin137.png",
    ᐃⵠⲆΔΔΔⵠ: "img/day-hand-skin138.png",
    ΔⵠΔᐃᐃᐃᐃ: "img/night-hand-skin138.png",
    ⵠⵠⲆⵠⵠⲆΔ: "img/day-hand-skin139.png",
    ⲆΔⲆΔᐃⵠⵠ: "img/night-hand-skin139.png",
    ᐃⲆΔᐃⵠΔⲆ: "img/day-hand-skin140.png",
    ΔᐃⲆⵠΔᐃⵠ: "img/night-hand-skin140.png",
    ⲆⵠⲆⲆⲆⲆⲆ: "img/day-hand-skin141.png",
    ᐃΔⲆⲆΔΔΔ: "img/night-hand-skin141.png",
    ᐃⵠΔⵠΔᐃⵠ: "img/day-hand-skin142.png",
    ⲆΔΔᐃⵠᐃⵠ: "img/night-hand-skin142.png",
    ΔᐃΔⲆΔⲆΔ: "img/day-hand-skin143.png",
    ⵠᐃⲆΔᐃⵠᐃ: "img/night-hand-skin143.png",
    ⲆⲆᐃᐃΔᐃⵠ: "img/day-hand-skin144.png",
    ⲆᐃᐃⵠⲆⲆᐃ: "img/night-hand-skin144.png",
    ᐃᐃⵠⵠΔⲆΔ: "img/day-hand-skin145.png",
    ⵠⵠΔΔⵠⵠᐃ: "img/night-hand-skin145.png",
    ⵠΔΔΔᐃΔᐃ: "img/day-hand-skin146.png",
    ⲆΔⵠⵠᐃᐃⲆ: "img/night-hand-skin146.png",
    ⵠΔⵠⲆᐃΔᐃ: "img/day-hand-skin147.png",
    ⵠⵠⵠⵠⲆⵠᐃ: "img/night-hand-skin147.png",
    ⲆᐃΔⵠΔⵠᐃ: "img/day-hand-skin148.png",
    ᐃⲆᐃⵠⲆⲆⵠ: "img/night-hand-skin148.png",
    ⲆⵠΔᐃΔᐃⵠ: "img/day-hand-skin149.png",
    ΔᐃᐃΔⵠΔⲆ: "img/night-hand-skin149.png",
    ᐃΔⵠΔⵠᐃⵠ: "img/day-hand-skin150.png",
    ΔⵠⲆᐃΔΔᐃ: "img/night-hand-skin150.png",
    ΔΔⵠΔΔΔᐃ: "img/day-bag-star0.png",
    ΔᐃⲆᐃⵠⵠⲆ: "img/night-bag-star0.png",
    ΔᐃᐃΔⵠⵠΔ: "img/day-bag0.png",
    ᐃⵠⲆⵠᐃⲆΔ: "img/night-bag0.png",
    ⵠΔⵠⵠⵠⵠⲆ: "img/day-bag1.png",
    ᐃⵠᐃᐃⵠⲆⲆ: "img/night-bag1.png",
    ⲆⲆᐃᐃⲆΔΔ: "img/day-bag2.png",
    ⵠᐃᐃⵠⵠⲆΔ: "img/night-bag2.png",
    ΔᐃᐃⲆⲆᐃⵠ: "img/day-bag3.png",
    ΔΔᐃᐃⵠΔᐃ: "img/night-bag3.png",
    ΔᐃⲆⲆⲆⲆⲆ: "img/day-bag4.png",
    ᐃⲆⲆᐃᐃᐃΔ: "img/night-bag4.png",
    ΔΔᐃᐃᐃᐃⲆ: "img/day-bag5.png",
    ⵠⵠᐃᐃΔⵠᐃ: "img/night-bag5.png",
    ᐃⵠᐃⵠⵠⲆⵠ: "img/day-bag6.png",
    ⲆⵠΔⵠᐃⲆᐃ: "img/night-bag6.png",
    ΔΔᐃᐃⲆΔΔ: "img/day-bag7.png",
    ΔᐃΔᐃΔⲆΔ: "img/night-bag7.png",
    ⵠⲆᐃⵠⲆᐃⲆ: "img/day-bag8.png",
    ΔᐃⵠΔΔⵠᐃ: "img/night-bag8.png",
    ᐃᐃⵠΔⵠᐃΔ: "img/day-bag9.png",
    ΔⵠⵠⵠⵠⲆⲆ: "img/night-bag9.png",
    ᐃⵠⵠⲆΔᐃⵠ: "img/day-bag10.png",
    ΔᐃⲆⵠᐃᐃΔ: "img/night-bag10.png",
    ᐃⲆΔΔΔⵠⲆ: "img/day-bag11.png",
    ⵠᐃᐃⵠᐃⲆᐃ: "img/night-bag11.png",
    ᐃⲆΔⵠⵠᐃΔ: "img/day-bag13.png",
    ΔⲆⵠᐃⵠᐃⵠ: "img/night-bag13.png",
    ⵠᐃⵠⲆⲆΔᐃ: "img/day-bag14.png",
    ᐃⲆΔⵠⲆⵠᐃ: "img/night-bag14.png",
    ᐃᐃⲆᐃΔᐃⵠ: "img/day-bag16.png",
    ᐃᐃⲆΔⲆⵠΔ: "img/night-bag16.png",
    ᐃᐃᐃⵠΔΔΔ: "img/day-bag17.png",
    ⵠᐃΔᐃΔⲆⵠ: "img/night-bag17.png",
    ΔⲆΔᐃΔΔᐃ: "img/day-bag18.png",
    ΔΔⵠΔⲆᐃⵠ: "img/night-bag18.png",
    ᐃᐃⵠΔⵠᐃᐃ: "img/day-bag19.png",
    ⲆⲆⲆⵠᐃⲆᐃ: "img/night-bag19.png",
    ᐃⲆⵠⲆⲆⲆⲆ: "img/day-bag20.png",
    ⲆⲆᐃⲆⵠΔᐃ: "img/night-bag20.png",
    ⵠᐃⲆᐃᐃᐃⲆ: "img/day-bag21.png",
    ⲆΔⵠᐃᐃⵠⲆ: "img/night-bag21.png",
    ⲆΔΔᐃᐃΔⲆ: "img/day-bag22.png",
    ΔᐃΔⵠⵠᐃⲆ: "img/night-bag22.png",
    ΔⵠⲆᐃΔⵠΔ: "img/day-bag23.png",
    ⵠᐃΔᐃⵠⲆⲆ: "img/night-bag23.png",
    ᐃᐃⵠΔᐃⵠⵠ: "img/day-bag24.png",
    ⲆΔⵠⲆⲆᐃΔ: "img/night-bag24.png",
    ⲆⵠⲆΔⲆⲆⵠ: "img/day-bag25.png",
    ⵠⲆΔⵠⲆΔΔ: "img/night-bag25.png",
    ⵠⵠⵠᐃᐃⵠΔ: "img/day-bag26.png",
    ΔΔΔⵠᐃᐃⲆ: "img/night-bag26.png",
    ΔᐃⲆᐃⵠⲆⵠ: "img/day-bag27.png",
    ⲆΔⲆΔΔΔᐃ: "img/night-bag27.png",
    ⵠᐃⵠᐃΔⲆΔ: "img/day-bag28.png",
    ⲆᐃⵠΔᐃΔⲆ: "img/night-bag28.png",
    ⵠᐃⲆΔⲆⲆⲆ: "img/day-bag29.png",
    ᐃⲆΔⵠⵠΔᐃ: "img/night-bag29.png",
    ᐃⲆⵠⵠΔⲆᐃ: "img/day-bag30.png",
    ᐃΔΔᐃᐃⵠⲆ: "img/night-bag30.png",
    ΔᐃᐃⵠΔΔΔ: "img/day-bag31.png",
    ⵠᐃΔⲆⲆΔΔ: "img/night-bag31.png",
    ⵠᐃⵠΔⲆΔⵠ: "img/day-bag32.png",
    ⲆᐃⵠⵠⵠΔⵠ: "img/night-bag32.png",
    ᐃⲆΔⵠⲆⲆᐃ: "img/day-bag33.png",
    ᐃⲆᐃᐃᐃⵠᐃ: "img/night-bag33.png",
    ⵠⵠⲆⵠⵠⵠᐃ: "img/day-bag34.png",
    ᐃΔΔⵠⲆⲆᐃ: "img/night-bag34.png",
    ⲆⵠⲆⵠⵠⲆΔ: "img/day-bag35.png",
    ᐃⲆᐃⲆⲆᐃΔ: "img/night-bag35.png",
    ⲆᐃⲆᐃΔΔⲆ: "img/day-bag36.png",
    ⵠΔⵠΔΔΔᐃ: "img/night-bag36.png",
    ⵠᐃⵠⵠᐃᐃⵠ: "img/day-bag37.png",
    ᐃᐃΔΔⲆᐃⵠ: "img/night-bag37.png",
    ⵠⲆⵠᐃⵠᐃᐃ: "img/day-bag38.png",
    ΔⵠⲆⲆΔᐃⲆ: "img/night-bag38.png",
    ΔᐃΔⵠⲆᐃⲆ: "img/day-bag39.png",
    ⲆᐃᐃⵠⲆΔⵠ: "img/night-bag39.png",
    ⵠⲆⵠⲆᐃΔⵠ: "img/day-bag40.png",
    ⵠⲆⲆᐃΔΔⵠ: "img/night-bag40.png",
    ᐃᐃⲆⲆΔΔⵠ: "img/day-bag41.png",
    ⵠⵠΔΔⵠⲆΔ: "img/night-bag41.png",
    ⲆᐃⵠΔⲆⲆⵠ: "img/day-bag42.png",
    ⲆⲆΔⵠᐃⲆΔ: "img/night-bag42.png",
    ΔᐃⲆⵠΔΔΔ: "img/day-bag43.png",
    ⵠᐃᐃᐃⲆΔⲆ: "img/night-bag43.png",
    ⵠᐃⵠΔᐃᐃΔ: "img/day-bag44.png",
    ᐃΔⲆΔᐃΔᐃ: "img/night-bag44.png",
    ⵠᐃⵠΔᐃΔⲆ: "img/day-bag45.png",
    ᐃΔΔΔⵠΔⵠ: "img/night-bag45.png",
    ᐃⲆⵠᐃΔΔⲆ: "img/day-bag46.png",
    ΔⵠⲆᐃⵠΔⲆ: "img/night-bag46.png",
    ⲆⲆᐃⲆⵠΔⵠ: "img/day-bag47.png",
    ⵠᐃⵠⵠᐃᐃᐃ: "img/night-bag47.png",
    ΔⲆᐃΔⵠᐃᐃ: "img/day-bag48.png",
    ⲆⵠΔᐃⵠⵠⵠ: "img/night-bag48.png",
    ΔᐃⵠⲆᐃⲆⲆ: "img/day-bag49.png",
    ⲆⵠⵠⲆᐃⲆΔ: "img/night-bag49.png",
    ᐃⵠⲆΔΔⲆΔ: "img/day-bag50.png",
    ⵠⵠⵠⲆᐃΔΔ: "img/night-bag50.png",
    ᐃⵠⵠⵠᐃⲆⲆ: "img/day-bag51.png",
    ΔⲆᐃΔᐃⲆᐃ: "img/night-bag51.png",
    ΔΔΔΔⵠⵠᐃ: "img/day-bag52.png",
    ⲆⲆⲆⲆⵠΔΔ: "img/night-bag52.png",
    ⲆⲆᐃΔⲆΔⲆ: "img/day-bag53.png",
    ᐃᐃᐃΔΔⵠⲆ: "img/night-bag53.png",
    ΔⵠⵠⵠⲆⵠΔ: "img/day-bag54.png",
    ΔⵠΔⵠᐃΔⵠ: "img/night-bag54.png",
    ΔᐃⵠΔΔΔᐃ: "img/day-bag55.png",
    ⵠΔⲆΔᐃΔⵠ: "img/night-bag55.png",
    ⵠⵠΔᐃⵠⵠⵠ: "img/day-bag56.png",
    ⲆᐃⲆⵠΔⲆᐃ: "img/night-bag56.png",
    ΔⵠⵠⲆᐃΔⲆ: "img/day-bag57.png",
    ⵠᐃⵠⵠⵠΔᐃ: "img/night-bag57.png",
    ⵠᐃⵠⵠᐃⵠΔ: "img/day-bag58.png",
    ΔⵠᐃⲆⲆΔΔ: "img/night-bag58.png",
    ⵠⵠᐃΔⵠΔᐃ: "img/day-bag59.png",
    ⲆΔⲆᐃᐃΔΔ: "img/night-bag59.png",
    ᐃᐃᐃΔᐃⲆΔ: "img/day-bag60.png",
    ΔⵠΔᐃΔΔⵠ: "img/night-bag60.png",
    ΔᐃⲆⲆⲆΔⲆ: "img/day-bag61.png",
    ᐃᐃΔⲆⲆᐃᐃ: "img/night-bag61.png",
    ᐃⵠⵠⵠⲆΔᐃ: "img/day-bag62.png",
    ΔⲆΔⲆⲆⲆΔ: "img/night-bag62.png",
    ⵠⲆᐃⲆᐃⵠΔ: "img/day-bag63.png",
    ᐃᐃⲆΔⵠᐃⲆ: "img/night-bag63.png",
    ⲆᐃΔⲆᐃⲆⵠ: "img/day-bag64.png",
    ⵠⲆⵠⲆⲆΔΔ: "img/night-bag64.png",
    ΔⲆⵠΔΔⵠΔ: "img/day-bag65.png",
    ΔᐃⵠΔᐃᐃΔ: "img/night-bag65.png",
    ⲆᐃΔⲆᐃΔΔ: "img/day-bag66.png",
    ΔᐃΔⲆΔⲆⲆ: "img/night-bag66.png",
    ⲆⵠᐃΔΔⲆⲆ: "img/day-bag67.png",
    ⵠᐃΔⲆᐃᐃⲆ: "img/night-bag67.png",
    ⵠΔᐃⲆⵠⵠΔ: "img/day-bag68.png",
    ΔΔΔΔⲆⲆⲆ: "img/night-bag68.png",
    ⵠᐃⵠⵠⵠⵠᐃ: "img/day-accessory0.png",
    ᐃⵠⵠⲆⲆⵠΔ: "img/day-accessory0-pacques.png",
    ΔΔⵠΔⵠΔᐃ: "img/night-accessory0-pacques.png",
    ΔⲆⲆᐃΔᐃΔ: "img/day-accessory13.png",
    ΔΔⵠᐃⵠᐃΔ: "img/night-accessory13.png",
    ᐃⵠᐃⲆΔⵠⲆ: "img/day-accessory14.png",
    ᐃⵠⵠΔᐃⵠᐃ: "img/night-accessory14.png",
    ΔᐃΔⲆᐃᐃⲆ: "img/day-accessory15.png",
    ⲆΔⵠᐃⵠᐃᐃ: "img/night-accessory15.png",
    ⵠᐃΔⲆⲆⲆⵠ: "img/day-accessory16.png",
    ᐃⵠⵠᐃⲆᐃⲆ: "img/night-accessory16.png",
    ⲆΔᐃᐃΔΔᐃ: "img/day-accessory17.png",
    ΔⲆᐃΔⲆᐃⲆ: "img/day-accessory17.png",
    ⲆΔΔΔⲆΔᐃ: "img/day-accessory19.png",
    ⵠⵠⲆᐃΔⲆⵠ: "img/night-accessory19.png",
    ⲆΔΔⵠⵠᐃⵠ: "img/day-accessory20.png",
    ᐃΔᐃⵠΔⵠⵠ: "img/night-accessory20.png",
    ᐃⵠⵠᐃᐃΔΔ: "img/day-accessory21.png",
    ⵠᐃⲆⵠⲆⵠⲆ: "img/night-accessory21.png",
    ΔΔΔⲆⵠⲆΔ: "img/day-accessory22.png",
    ⵠᐃⵠⲆᐃⲆᐃ: "img/night-accessory22.png",
    ΔΔᐃⵠⵠⵠΔ: "img/day-accessory23.png",
    ΔᐃⵠⲆᐃⲆⵠ: "img/night-accessory23.png",
    ΔⵠⲆⵠΔᐃᐃ: "img/day-accessory24.png",
    ΔΔⲆⲆᐃⲆΔ: "img/night-accessory24.png",
    ΔⲆᐃᐃΔⲆᐃ: "img/day-accessory25.png",
    ⵠᐃΔΔᐃⲆⵠ: "img/night-accessory25.png",
    ᐃⵠΔᐃΔⵠΔ: "img/day-accessory26.png",
    ⵠΔⲆΔⵠⵠΔ: "img/night-accessory26.png",
    ⵠᐃⵠᐃⲆᐃⲆ: "img/day-accessory27.png",
    ⵠⵠΔΔΔΔⵠ: "img/night-accessory27.png",
    ⵠⲆᐃⵠⲆΔⵠ: "img/day-accessory18.png",
    ⵠΔᐃⲆⲆⲆⵠ: "img/night-accessory18.png",
    ⵠΔᐃΔⲆᐃᐃ: "img/day-accessory29.png",
    ⵠΔⵠⵠⲆᐃⲆ: "img/night-accessory29.png",
    ⲆⲆᐃΔᐃⵠΔ: "img/day-accessory30.png",
    ⵠⵠΔⵠⵠᐃⲆ: "img/night-accessory30.png",
    ⲆⵠⵠᐃⲆⵠΔ: "img/day-accessory31.png",
    ⲆⵠⲆᐃⲆᐃⵠ: "img/night-accessory31.png",
    ⵠᐃΔΔΔⲆⵠ: "img/day-accessory32.png",
    ⵠᐃᐃⲆⲆⵠᐃ: "img/night-accessory32.png",
    ⲆᐃⲆⵠⲆΔⲆ: "img/day-accessory33.png",
    ⲆᐃⲆⲆᐃΔⲆ: "img/night-accessory33.png",
    ᐃᐃⵠᐃⵠⵠⵠ: "img/day-accessory34.png",
    ⲆⵠⵠⵠᐃΔⲆ: "img/night-accessory34.png",
    ⵠⵠᐃᐃΔΔⵠ: "img/day-accessory35.png",
    ᐃΔⲆⵠΔΔᐃ: "img/night-accessory35.png",
    ⵠᐃⲆⵠΔⲆΔ: "img/day-accessory28.png",
    ᐃⲆⵠᐃᐃⵠⵠ: "img/night-accessory28.png",
    ΔⲆΔⵠᐃᐃᐃ: "img/day-accessory36.png",
    ⲆΔⵠΔΔΔΔ: "img/night-accessory36.png",
    ᐃᐃᐃⵠΔⲆⵠ: "img/day-accessory37.png",
    ᐃⵠⵠⲆΔⲆᐃ: "img/night-accessory37.png",
    ᐃΔⵠᐃⵠΔᐃ: "img/day-accessory39.png",
    ⵠᐃᐃⲆΔⵠⵠ: "img/night-accessory39.png",
    ⵠⵠⵠᐃⲆᐃⵠ: "img/day-accessory40.png",
    ΔΔΔΔᐃᐃⵠ: "img/night-accessory40.png",
    ᐃⵠΔⵠⵠΔΔ: "img/day-accessory41.png",
    ΔᐃⲆᐃⲆᐃⵠ: "img/night-accessory41.png",
    ΔᐃⲆΔⵠΔⲆ: "img/day-accessory42.png",
    ⵠΔΔΔᐃⲆⵠ: "img/night-accessory42.png",
    ΔⵠⵠΔᐃᐃᐃ: "img/day-accessory43.png",
    ⲆΔΔⲆΔΔΔ: "img/night-accessory43.png",
    ΔᐃΔΔᐃⵠⵠ: "img/day-accessory44.png",
    ᐃΔⲆⵠᐃⵠᐃ: "img/night-accessory44.png",
    ⲆᐃⵠΔⲆᐃⲆ: "img/day-accessory38.png",
    ᐃᐃⲆⲆΔⵠⲆ: "img/night-accessory38.png",
    ΔΔⵠⵠⵠᐃⲆ: "img/day-accessory46.png",
    ΔΔⲆⲆⵠⵠΔ: "img/night-accessory46.png",
    ⵠⵠⲆⵠΔᐃΔ: "img/day-accessory47.png",
    ⵠⲆⵠΔΔᐃⲆ: "img/night-accessory47.png",
    ΔΔᐃⵠᐃᐃⲆ: "img/day-accessory48.png",
    ⲆΔᐃⵠⵠⲆⵠ: "img/night-accessory48.png",
    ΔⲆⵠΔⲆⵠᐃ: "img/day-accessory49.png",
    ⲆᐃⲆⵠⵠⵠⵠ: "img/night-accessory49.png",
    ⵠⲆΔⵠᐃⵠⵠ: "img/day-accessory45.png",
    ᐃᐃᐃᐃⲆᐃᐃ: "img/night-accessory45.png",
    ⵠᐃΔⲆⵠⵠΔ: "img/day-accessory50.png",
    ᐃⵠᐃⵠⲆⲆᐃ: "img/night-accessory50.png",
    ᐃΔΔΔᐃⵠⵠ: "img/day-accessory51.png",
    ⵠᐃΔᐃΔⵠⲆ: "img/night-accessory51.png",
    ⲆΔⲆⵠⲆᐃⵠ: "img/day-accessory52.png",
    ΔΔΔⵠΔⵠᐃ: "img/night-accessory52.png",
    ΔΔΔΔⵠᐃⵠ: "img/day-accessory53.png",
    ⲆⵠΔⵠᐃⲆⲆ: "img/night-accessory53.png",
    ⲆΔᐃᐃᐃᐃΔ: "img/day-accessory54.png",
    ⵠⲆΔⵠΔⲆΔ: "img/night-accessory54.png",
    ΔᐃᐃᐃᐃⲆΔ: "img/day-accessory55.png",
    ᐃⲆᐃᐃΔⲆᐃ: "img/night-accessory55.png",
    ⵠⲆΔΔΔⲆⵠ: "img/day-accessory56.png",
    ΔⵠⲆΔⵠⵠⲆ: "img/night-accessory56.png",
    ⲆⵠⵠⲆΔᐃΔ: "img/day-accessory57.png",
    ⲆⵠΔᐃᐃⵠΔ: "img/night-accessory57.png",
    ⲆΔⵠᐃΔⵠΔ: "img/day-accessory58.png",
    ΔᐃΔⵠⵠΔⵠ: "img/night-accessory58.png",
    ΔᐃⵠⵠⵠΔᐃ: "img/day-accessory59.png",
    ᐃᐃⵠⵠᐃⵠᐃ: "img/night-accessory59.png",
    ⵠⲆⵠΔⵠⵠΔ: "img/day-accessory60.png",
    ΔᐃⲆΔⲆᐃᐃ: "img/night-accessory60.png",
    ΔⵠᐃΔⲆⵠᐃ: "img/day-accessory61.png",
    ᐃΔΔΔⲆᐃΔ: "img/night-accessory61.png",
    ᐃᐃᐃᐃⵠⲆⵠ: "img/day-accessory62.png",
    ⵠⲆⵠΔⲆⲆΔ: "img/night-accessory62.png",
    ⵠΔΔᐃΔⲆⵠ: "img/day-accessory63.png",
    ᐃⲆⲆᐃⵠⲆΔ: "img/night-accessory63.png",
    ⵠⲆΔΔⲆⵠᐃ: "img/day-accessory64.png",
    ⵠⲆⲆᐃⵠᐃΔ: "img/night-accessory64.png",
    ΔᐃⵠⲆⵠⵠⲆ: "img/day-accessory65.png",
    ⵠΔΔΔⵠⵠⵠ: "img/night-accessory65.png",
    ⲆⵠΔⲆᐃⲆⵠ: "img/day-accessory66.png",
    ⲆⲆᐃⲆᐃΔⵠ: "img/night-accessory66.png",
    ΔΔᐃⲆⲆᐃⵠ: "img/day-accessory67.png",
    ⵠΔⵠΔⵠⲆⵠ: "img/night-accessory67.png",
    ᐃΔΔΔΔᐃΔ: "img/day-accessory68.png",
    ᐃⵠᐃᐃⲆⲆΔ: "img/night-accessory68.png",
    ⲆᐃᐃΔᐃΔᐃ: "img/day-accessory69.png",
    ΔⲆⲆⲆΔⲆⵠ: "img/night-accessory69.png",
    ⲆⵠΔΔᐃⵠⵠ: "img/day-accessory70.png",
    ᐃᐃΔⵠⲆⵠⲆ: "img/night-accessory70.png",
    ᐃⲆᐃΔⲆⲆⲆ: "img/day-accessory71.png",
    ⵠⵠΔᐃΔΔΔ: "img/night-accessory71.png",
    ⲆᐃΔᐃΔⲆⵠ: "img/day-accessory72.png",
    ⵠΔΔᐃΔⵠΔ: "img/night-accessory72.png",
    ᐃⵠⵠᐃᐃⲆⵠ: "img/day-accessory73.png",
    ᐃⵠⵠⲆⵠⵠᐃ: "img/night-accessory73.png",
    ⲆⵠⲆⲆᐃⵠⲆ: "img/day-accessory74.png",
    ΔᐃⵠⵠⲆⲆⵠ: "img/night-accessory74.png",
    ⲆⲆⵠᐃΔᐃⵠ: "img/day-accessory75.png",
    ⲆⲆᐃᐃᐃⲆΔ: "img/night-accessory75.png",
    ⲆⵠⵠⵠⲆⵠⵠ: "img/day-accessory76.png",
    ΔⲆⲆⵠΔⲆᐃ: "img/night-accessory76.png",
    ΔⲆⵠⵠⵠᐃΔ: "img/day-accessory77.png",
    ⵠⲆΔⵠΔⵠᐃ: "img/night-accessory77.png",
    ⵠⵠΔⵠⵠⵠⲆ: "img/day-accessory78.png",
    ⵠⵠΔⵠⵠⲆⲆ: "img/night-accessory78.png",
    ΔᐃΔᐃᐃᐃⲆ: "img/day-accessory79.png",
    ⵠᐃᐃᐃΔⲆᐃ: "img/night-accessory79.png",
    ΔᐃⵠΔᐃΔΔ: "img/day-accessory80.png",
    ⲆᐃᐃⵠⵠᐃΔ: "img/night-accessory80.png",
    ΔⲆⲆⵠⵠᐃΔ: "img/day-accessory81.png",
    ⲆⵠΔⵠⵠⲆᐃ: "img/night-accessory81.png",
    ⵠⲆⲆⵠᐃΔΔ: "img/day-book0.png",
    ᐃⵠⵠⲆΔⲆⲆ: "img/night-book0.png",
    ΔΔᐃⵠⵠᐃⲆ: "img/day-book1.png",
    ΔᐃΔⲆΔᐃΔ: "img/night-book1.png",
    ⲆⵠΔⵠΔᐃΔ: "img/day-book2.png",
    ᐃΔⵠⲆᐃⵠᐃ: "img/night-book2.png",
    ⵠΔⲆΔⵠΔΔ: "img/day-book3.png",
    ⵠⲆⲆΔⲆΔⲆ: "img/night-book3.png",
    ΔᐃⲆᐃΔⵠⵠ: "img/day-book4.png",
    ⲆⵠᐃΔⲆΔΔ: "img/night-book4.png",
    ⵠΔᐃᐃᐃΔᐃ: "img/day-book5.png",
    ⵠⲆᐃᐃᐃⵠⵠ: "img/night-book5.png",
    ⵠᐃᐃΔⵠⵠᐃ: "img/day-book6.png",
    ΔⵠΔⵠΔᐃⵠ: "img/night-book6.png",
    ⵠᐃⵠᐃⵠⵠⵠ: "img/day-book7.png",
    ΔᐃᐃᐃΔΔᐃ: "img/night-book7.png",
    ⲆᐃᐃΔⲆᐃΔ: "img/day-book8.png",
    ⵠⲆΔΔⲆᐃⲆ: "img/night-book8.png",
    ⲆΔⲆⲆⵠΔΔ: "img/day-book9.png",
    ΔⲆⲆⲆⲆⵠⵠ: "img/night-book9.png",
    ⲆΔΔᐃΔᐃΔ: "img/day-book10.png",
    ᐃΔᐃⲆⵠᐃⵠ: "img/night-book10.png",
    ⵠᐃⲆΔΔΔΔ: "img/day-book11.png",
    ᐃᐃⵠⵠⵠⲆΔ: "img/night-book11.png",
    ⲆⵠⵠᐃᐃⲆⵠ: "img/day-book12.png",
    ⲆⲆᐃⲆⲆᐃⲆ: "img/night-book12.png",
    ᐃⵠᐃⲆⲆⵠΔ: "img/day-book13.png",
    ⵠⵠΔⲆⲆΔⲆ: "img/night-book13.png",
    ᐃᐃᐃⵠⲆᐃⵠ: "img/day-book14.png",
    ᐃⵠΔⲆⵠⲆᐃ: "img/night-book14.png",
    ⵠⵠᐃⲆⵠⲆⲆ: "img/day-book15.png",
    ⲆΔᐃΔⲆᐃᐃ: "img/night-book15.png",
    ᐃⵠⲆⲆⵠΔⵠ: "img/day-book16.png",
    ᐃᐃⲆᐃᐃⲆⲆ: "img/night-book16.png",
    ᐃⵠΔⲆΔᐃⵠ: "img/day-book17.png",
    ⲆᐃⵠᐃⲆΔⵠ: "img/night-book17.png",
    ⵠΔᐃᐃᐃΔⵠ: "img/day-book18.png",
    ⲆⵠΔᐃⲆⲆᐃ: "img/night-book18.png",
    ΔⲆᐃᐃᐃᐃᐃ: "img/day-book19.png",
    ΔᐃᐃⲆⵠΔᐃ: "img/night-book19.png",
    ⵠⵠΔᐃⲆΔⲆ: "img/day-book20.png",
    ΔⲆⵠΔⵠⵠΔ: "img/night-book20.png",
    ᐃΔⵠΔΔⲆⲆ: "img/day-book21.png",
    ᐃΔᐃⲆⵠⵠⲆ: "img/night-book21.png",
    ⲆⲆᐃⲆⵠⵠⵠ: "img/day-book22.png",
    ΔⵠᐃⲆⲆᐃᐃ: "img/night-book22.png",
    ΔⲆⲆⲆΔᐃΔ: "img/day-book23.png",
    ⵠᐃᐃᐃⵠⲆⵠ: "img/night-book23.png",
    ΔⵠⲆΔᐃᐃᐃ: "img/day-book24.png",
    ᐃΔΔᐃᐃᐃΔ: "img/night-book24.png",
    ⵠᐃᐃⲆΔⵠⲆ: "img/day-book25.png",
    ⵠⵠΔΔⲆⵠⵠ: "img/night-book25.png",
    ΔΔⵠᐃΔΔⵠ: "img/day-book26.png",
    ᐃⲆΔᐃΔΔⵠ: "img/night-book26.png",
    ⵠΔΔᐃⲆΔⵠ: "img/day-book27.png",
    ᐃᐃᐃΔⲆᐃⲆ: "img/night-book27.png",
    ᐃΔⲆⵠᐃᐃᐃ: "img/day-book28.png",
    ΔⲆᐃⵠⵠⲆΔ: "img/night-book28.png",
    ΔᐃΔⲆⵠⵠⲆ: "img/day-book29.png",
    ⲆΔⵠⵠⲆⲆᐃ: "img/night-book29.png",
    ᐃⲆΔᐃᐃᐃⵠ: "img/day-book30.png",
    ⵠΔΔΔⵠΔΔ: "img/night-book30.png",
    ΔⲆᐃΔΔⵠᐃ: "img/day-book31.png",
    ⲆΔΔΔᐃⵠΔ: "img/night-book31.png",
    ΔⵠⵠⲆⵠⲆΔ: "img/day-book32.png",
    ΔᐃⲆΔⲆⵠⲆ: "img/night-book32.png",
    ⲆᐃΔⲆΔΔⲆ: "img/day-book33.png",
    ⲆΔⵠⲆᐃΔΔ: "img/night-book33.png",
    ΔΔΔⲆΔⵠⵠ: "img/day-book34.png",
    ⲆⵠⲆᐃⲆᐃⲆ: "img/night-book34.png",
    ᐃΔᐃⵠᐃΔⲆ: "img/day-book35.png",
    ⵠΔⵠⲆΔⲆΔ: "img/night-book35.png",
    ⲆΔᐃΔΔⲆⵠ: "img/day-book36.png",
    ᐃΔᐃⲆΔⵠᐃ: "img/night-book36.png",
    ΔΔΔΔⲆᐃᐃⲆⵠ: "img/day-book37.png",
    ᐃᐃⵠⲆⲆΔᐃⵠΔ: "img/night-book37.png",
    ⵠΔⵠᐃΔⵠΔ: "img/day-book38.png",
    ᐃⵠⲆⵠⲆⲆΔ: "img/night-book38.png",
    ᐃⵠΔⵠΔⵠΔ: "img/day-book39.png",
    ᐃᐃⲆⲆⲆΔⲆ: "img/night-book39.png",
    ᐃⵠⵠΔⲆⵠⵠ: "img/day-book40.png",
    ΔⲆⲆⲆⵠΔᐃ: "img/night-book40.png",
    ⲆⲆΔⲆᐃᐃⲆ: "img/day-book41.png",
    ᐃᐃⵠΔⲆΔⲆ: "img/night-book41.png",
    ⲆᐃΔᐃᐃᐃⲆ: "img/day-book42.png",
    ⲆⲆΔᐃᐃΔᐃ: "img/night-book42.png",
    ΔΔⲆΔΔⲆⲆ: "img/day-book43.png",
    ⲆⵠᐃᐃΔⲆΔ: "img/night-book43.png",
    ⲆⵠⵠⲆΔⵠΔ: "img/day-book44.png",
    ⲆΔᐃⵠᐃᐃᐃ: "img/night-book44.png",
    ⲆᐃᐃⲆΔᐃⲆ: "img/day-book45.png",
    ⵠⵠΔⵠⵠᐃᐃ: "img/night-book45.png",
    ⵠΔΔⲆᐃⲆⲆ: "img/day-crate1.png",
    ⲆΔⲆΔⵠᐃⲆ: "img/night-crate1.png",
    ᐃΔⲆⵠⵠⲆⲆ: "img/day-crate2.png",
    ΔᐃΔᐃΔⲆᐃ: "img/night-crate2.png",
    ᐃⲆⵠⲆΔΔⵠ: "img/day-crate3.png",
    ᐃΔⲆΔΔΔΔ: "img/night-crate3.png",
    ᐃΔᐃⲆΔΔⵠ: "img/day-crate4.png",
    ᐃᐃⵠΔⲆΔⵠ: "img/night-crate4.png",
    ΔⲆⵠⲆΔΔΔ: "img/day-crate5.png",
    ⵠᐃⵠⲆⲆⵠΔ: "img/night-crate5.png",
    ΔⵠⲆΔⵠᐃΔ: "img/day-crate6.png",
    ⲆᐃⲆᐃⵠⵠⲆ: "img/night-crate6.png",
    ᐃΔᐃⲆⲆⵠⲆ: "img/day-crate7.png",
    ⲆᐃⲆⵠᐃⲆΔ: "img/night-crate7.png",
    ΔⲆⲆᐃⲆⲆⲆ: "img/day-crate8.png",
    ⵠᐃᐃᐃⲆⵠⲆ: "img/night-crate8.png",
    ⲆΔⲆΔⲆΔⲆ: "img/day-crate9.png",
    ΔⲆⵠⵠⵠΔⵠ: "img/night-crate9.png",
    ᐃⲆΔΔᐃΔⵠ: "img/day-crate10.png",
    ⵠΔⵠΔⲆⵠⵠ: "img/night-crate10.png",
    ⲆᐃⲆⲆⲆⵠⵠ: "img/day-crate11.png",
    ⲆᐃᐃⲆⵠⲆΔ: "img/night-crate11.png",
    ΔⲆⲆᐃᐃⵠⵠ: "img/day-crate12.png",
    ΔⲆⲆⵠⲆⵠⲆ: "img/night-crate12.png",
    ⲆⵠⵠᐃⵠⲆᐃ: "img/day-crate13.png",
    ⵠΔᐃⲆᐃᐃⲆ: "img/night-crate13.png",
    ΔΔⵠΔᐃᐃⵠ: "img/day-crate14.png",
    ⲆⲆΔᐃⵠᐃΔ: "img/night-crate14.png",
    ⵠΔⲆΔⵠΔⵠ: "img/day-crate15.png",
    ⲆⵠⲆⵠⵠΔᐃ: "img/night-crate15.png",
    ⲆᐃⲆⲆⵠΔⵠ: "img/day-crate16.png",
    ΔᐃⲆᐃᐃⵠⲆ: "img/night-crate16.png",
    ⵠΔΔᐃᐃΔⵠ: "img/day-crate17.png",
    ⲆⵠⵠⲆΔⵠⵠ: "img/night-crate17.png",
    ᐃⲆΔᐃⲆⵠⲆ: "img/day-crate18.png",
    ᐃⵠΔⲆⲆⲆⵠ: "img/night-crate18.png",
    ᐃⵠⲆⲆⵠᐃⵠ: "img/day-crate19.png",
    ⲆᐃΔⵠⲆΔᐃ: "img/night-crate19.png",
    ⵠᐃⵠᐃᐃᐃⵠ: "img/day-crate20.png",
    ΔΔⲆⲆᐃᐃᐃ: "img/night-crate20.png",
    ΔⲆⲆⲆⵠⲆΔ: "img/day-crate21.png",
    ΔΔⲆⵠⵠᐃᐃ: "img/night-crate21.png",
    ⲆᐃᐃⵠⲆⵠⵠ: "img/day-crate22.png",
    ⵠᐃⵠⲆⵠᐃᐃ: "img/night-crate22.png",
    ᐃⵠⵠⲆⲆΔⲆ: "img/day-crate23.png",
    ⲆΔΔⵠᐃΔΔ: "img/night-crate23.png",
    ΔΔⲆⲆΔⲆⵠ: "img/day-crate24.png",
    ⵠⵠΔⵠⲆⵠⵠ: "img/night-crate24.png",
    ᐃᐃΔⲆⲆⲆᐃ: "img/day-crate25.png",
    ⲆⵠⵠⵠⲆΔⵠ: "img/night-crate25.png",
    ΔΔᐃⲆⵠΔΔ: "img/day-crate26.png",
    ⵠⲆᐃΔⲆⵠⵠ: "img/night-crate26.png",
    ⵠⵠⵠΔⲆΔᐃ: "img/day-crate27.png",
    ⲆⵠⲆΔⲆΔᐃ: "img/night-crate27.png",
    ᐃΔⲆᐃᐃⲆⲆ: "img/day-crate28.png",
    ΔⵠⲆᐃⵠⲆⵠ: "img/night-crate28.png",
    ⵠⲆⲆΔⲆⵠΔ: "img/day-crate29.png",
    ᐃΔⲆᐃᐃᐃⲆ: "img/night-crate29.png",
    ⲆΔᐃⲆⲆⵠⵠ: "img/day-crate30.png",
    ᐃᐃᐃⲆⵠⵠᐃ: "img/night-crate30.png",
    ⲆⲆⲆⵠΔⵠᐃ: "img/day-crate31.png",
    ⲆᐃᐃᐃⵠⵠⲆ: "img/night-crate31.png",
    ΔⵠⵠⲆΔΔΔ: "img/day-crate32.png",
    ⲆᐃⲆⲆᐃⲆⵠ: "img/night-crate32.png",
    ᐃΔᐃⲆⲆⲆΔ: "img/day-crate33.png",
    ⵠΔⵠΔⵠΔⲆ: "img/night-crate33.png",
    ⲆᐃⵠⵠΔⲆᐃ: "img/day-crate34.png",
    ΔⲆᐃᐃΔⲆΔ: "img/night-crate34.png",
    ΔⵠⵠⲆᐃⲆⲆ: "img/day-crate35.png",
    ᐃⲆΔⲆΔⲆⲆ: "img/night-crate35.png",
    ᐃⵠⵠⲆᐃΔⲆ: "img/day-crate36.png",
    ⲆⲆⵠⵠᐃⲆⲆ: "img/night-crate36.png",
    ⵠⲆᐃⲆⵠⲆⲆ: "img/day-crate37.png",
    ⲆᐃⵠᐃᐃⲆΔ: "img/night-crate37.png",
    ⲆᐃᐃΔⵠⲆΔ: "img/day-crate38.png",
    ⲆΔΔᐃⲆΔⲆ: "img/night-crate38.png",
    ⲆᐃⵠᐃΔᐃⵠ: "img/day-crate39.png",
    ΔᐃⲆⵠΔΔⲆ: "img/night-crate39.png",
    ᐃⲆᐃⵠⵠⵠⲆ: "img/day-crate40.png",
    ⲆⲆⲆⵠⵠⵠⲆ: "img/night-crate40.png",
    ᐃⵠⲆᐃⲆΔⵠ: "img/day-crate41.png",
    ΔⲆΔΔᐃⲆⲆ: "img/night-crate41.png",
    ᐃⲆᐃΔⵠⲆΔ: "img/day-crate42.png",
    ᐃⲆⲆⵠⲆⲆᐃ: "img/night-crate42.png",
    ⵠⲆⲆⵠᐃᐃΔ: "img/day-crate43.png",
    ⵠⲆᐃⲆⵠⵠᐃ: "img/night-crate43.png",
    ⵠᐃⲆΔⵠⲆᐃ: "img/day-crate44.png",
    ᐃⲆᐃᐃΔⵠⵠ: "img/night-crate44.png",
    ⲆᐃⲆᐃΔᐃⲆ: "img/day-crate45.png",
    ΔᐃΔⵠᐃΔᐃ: "img/night-crate45.png",
    ᐃΔΔᐃⵠΔⲆ: "img/day-crate46.png",
    ΔⵠⵠᐃᐃΔΔ: "img/night-crate46.png",
    ᐃΔⵠⵠⵠⲆᐃ: "img/day-crate47.png",
    ᐃⵠᐃΔᐃᐃⲆ: "img/night-crate47.png",
    ⵠⵠᐃⵠΔⵠⲆ: "img/day-crate48.png",
    ΔⲆⵠᐃᐃᐃⲆ: "img/night-crate48.png",
    ᐃᐃΔΔⲆΔⲆ: "img/day-crate49.png",
    ⵠΔⲆⲆⵠⵠΔ: "img/night-crate49.png",
    ⲆᐃⲆⲆΔᐃᐃ: "img/day-crate50.png",
    ⲆᐃⵠⵠⵠⲆΔ: "img/night-crate50.png",
    ⵠⲆⲆⲆⲆᐃᐃ: "img/day-crate51.png",
    ΔΔΔᐃⲆΔⲆ: "img/night-crate51.png",
    ᐃᐃΔⲆⵠⲆᐃ: "img/day-crate52.png",
    ᐃΔⵠᐃⲆΔᐃ: "img/night-crate52.png",
    ΔᐃᐃᐃᐃⵠⲆ: "img/day-crate53.png",
    ᐃⵠⲆᐃⵠΔⵠ: "img/night-crate53.png",
    ⲆⲆΔΔΔΔⲆ: "img/day-crate54.png",
    ΔⵠΔᐃΔΔⲆ: "img/night-crate54.png",
    ΔΔⲆᐃⵠΔⲆ: "img/day-crate55.png",
    ΔⵠᐃⵠⲆⵠᐃ: "img/night-crate55.png",
    ΔΔⲆᐃᐃⵠᐃ: "img/day-crate56.png",
    ΔⲆᐃΔᐃⵠⵠ: "img/night-crate56.png",
    ᐃΔᐃⲆⵠⵠᐃ: "img/day-crate57.png",
    ⵠⲆⵠⵠⲆΔΔ: "img/night-crate57.png",
    ᐃΔΔⵠΔⵠΔ: "img/day-crate58.png",
    ΔⵠⲆⵠⵠⵠᐃ: "img/night-crate58.png",
    ⵠⲆⲆᐃΔⵠᐃ: "img/day-crate59.png",
    ᐃⵠᐃⲆΔⵠΔ: "img/night-crate59.png",
    ΔⵠᐃᐃΔⲆΔ: "img/day-crate60.png",
    ᐃⵠⵠᐃᐃᐃΔ: "img/night-crate60.png",
    ΔⲆΔⵠΔΔᐃ: "img/day-crate61.png",
    ⲆⲆᐃⲆΔᐃⵠ: "img/night-crate61.png",
    ⲆⲆΔⲆΔΔⵠ: "img/day-crate62.png",
    ⲆⵠᐃΔΔⵠΔ: "img/night-crate62.png",
    ᐃⲆⵠᐃΔⲆⵠ: "img/day-crate63.png",
    ⲆΔΔᐃⵠⲆΔ: "img/night-crate63.png",
    ΔΔΔⲆⲆⲆⵠ: "img/day-crate64.png",
    ⲆⵠⵠⲆⵠᐃΔ: "img/night-crate64.png",
    ΔΔⵠⲆⵠⲆⵠ: "img/day-crate65.png",
    ⲆᐃΔᐃⲆⵠᐃ: "img/night-crate65.png",
    ΔⵠΔⵠΔⲆΔ: "img/day-crate66.png",
    ᐃⲆⵠⲆᐃΔᐃ: "img/night-crate66.png",
    ΔⵠⲆⲆᐃΔΔ: "img/day-crate67.png",
    ⲆⵠⵠⵠΔⵠΔ: "img/night-crate67.png",
    ᐃᐃΔΔᐃⲆⲆ: "img/day-crate68.png",
    ⵠᐃⲆⵠⲆᐃⲆ: "img/night-crate68.png",
    ⲆⵠᐃᐃΔⵠⲆ: "img/day-crate69.png",
    ᐃΔⲆᐃⵠᐃⵠ: "img/night-crate69.png",
    ⵠⵠⵠⵠΔΔⲆ: "img/day-crate70.png",
    ΔⵠᐃⲆⲆΔᐃ: "img/night-crate70.png",
    ᐃⵠⲆⲆᐃᐃⲆ: "img/day-crate71.png",
    ⲆᐃⵠⲆΔⲆΔ: "img/night-crate71.png",
    ⲆⵠⵠⵠᐃⵠΔ: "img/day-crate72.png",
    ᐃⲆⵠᐃⲆᐃΔ: "img/night-crate72.png",
    ⲆΔⲆᐃⲆⲆⲆ: "img/day-herb0.png",
    ᐃⵠⲆⵠᐃᐃΔ: "img/day-herb1.png",
    ᐃΔᐃⵠΔⲆᐃ: "img/day-herb2.png",
    ⵠⵠⵠⵠᐃⵠΔ: "img/day-herb3.png",
    ΔⲆᐃᐃΔⲆⲆ: "img/day-herb4.png",
    ΔⲆⵠᐃⵠⵠⵠ: "img/day-herb5.png",
    ΔⲆᐃⲆΔⲆⲆ: "img/day-herb6.png",
    ⲆΔᐃⵠⵠΔᐃ: "img/day-herb7.png",
    ΔΔⵠⵠⲆⵠⵠ: "img/day-herb8.png",
    ⲆΔⵠⵠⵠᐃᐃ: "img/day-herb9.png",
    ᐃᐃⲆⲆΔᐃⵠ: "img/day-herb10.png",
    ΔΔΔᐃᐃᐃΔ: "img/day-herb11.png",
    ᐃΔΔⵠⵠᐃᐃ: "img/day-herb12.png",
    ᐃᐃᐃΔᐃⵠⵠ: "img/day-herb13.png",
    ⲆⲆⲆⵠᐃⵠΔ: "img/day-herb14.png",
    ᐃᐃⵠΔⵠᐃⵠ: "img/day-herb15.png",
    ⵠΔᐃᐃⵠⵠΔ: "img/day-shell0.png",
    ΔᐃᐃΔⵠΔⵠ: "img/day-shell1.png",
    ⵠⲆⲆⲆᐃⲆΔ: "img/day-shell2.png",
    ΔⵠⵠΔΔᐃΔ: "img/day-leaf1.png",
    ⲆⵠᐃⲆⵠΔᐃ: "img/day-leaf2.png",
    ᐃⵠΔᐃⵠⵠᐃ: "img/day-leaf3.png",
    ⵠᐃⲆᐃᐃⵠᐃ: "img/day-leaf4.png",
    ΔⲆⵠΔΔⲆⵠ: "img/day-leaf5.png",
    ᐃΔΔᐃᐃⲆⵠ: "img/day-leaf6.png",
    ᐃΔⵠΔⵠᐃΔ: "img/day-leaf7.png",
    ΔΔⲆΔⵠΔⵠ: "img/day-leaf8.png",
    ΔᐃⵠⲆⵠⲆΔ: "img/day-rock0.png",
    ᐃΔⲆᐃᐃⲆᐃ: "img/day-rock1.png",
    ⵠⵠᐃⵠᐃΔᐃ: "img/day-rock2.png",
    ⲆⵠⵠΔⵠⵠΔ: "img/day-rock3.png",
    ᐃᐃⲆⵠⲆⵠΔ: "img/day-rock4.png",
    ᐃⲆᐃΔⵠΔᐃ: "img/day-rock5.png",
    ΔΔⲆⵠⵠⵠΔ: "img/day-rock6.png",
    ΔⲆⵠᐃⲆᐃᐃ: "img/day-rock7.png",
    ⲆΔⲆΔⵠⵠⲆ: "img/day-rock8.png",
    ᐃᐃⲆⲆᐃⲆΔ: "img/day-rock9.png",
    ΔⲆΔΔⲆΔⲆ: "img/day-rock10.png",
    ⲆⵠⵠⲆⵠⵠΔ: "img/day-rock11.png",
    ⲆⵠⲆᐃΔⵠⵠ: "img/day-rock12.png",
    ᐃΔᐃⲆⲆᐃᐃ: "img/day-rock13.png",
    ⵠΔⵠⵠΔᐃⲆ: "img/day-flower1.png",
    ΔⵠΔΔⵠᐃⵠ: "img/day-flower2.png",
    ΔᐃⵠⵠΔⲆᐃ: "img/day-flower3.png",
    ᐃΔᐃⵠⵠᐃΔ: "img/day-flower4.png",
    ᐃⵠΔᐃΔⵠⲆ: "img/day-flower5.png",
    ⵠⵠⲆⵠᐃⲆⲆ: "img/day-flower6.png",
    ⲆⲆᐃᐃᐃⵠᐃ: "img/day-flower7.png",
    ᐃΔⲆⲆΔᐃⵠ: "img/day-flower8.png",
    ⵠΔⵠⵠⲆⵠⲆ: "img/day-flower9.png",
    ⲆⲆᐃⲆΔΔᐃ: "img/day-herb16.png",
    ΔⲆⲆⲆⵠΔⵠ: "img/day-herb17.png",
    ⵠⲆⵠᐃⵠᐃⲆ: "img/day-herb18.png",
    ⲆⲆⲆⲆⲆᐃⲆ: "img/day-herb19.png",
    ᐃⲆⵠᐃⲆⵠᐃ: "img/day-herb20.png",
    ΔⲆᐃᐃΔⵠⵠ: "img/day-herb21.png",
    ᐃⵠⵠⵠΔⲆᐃ: "img/night-herb0.png",
    ⵠⲆΔⵠⲆⲆⵠ: "img/night-herb1.png",
    ΔⵠⲆⲆΔΔⵠ: "img/night-herb2.png",
    ᐃⵠⵠΔᐃᐃᐃ: "img/night-herb3.png",
    ⵠΔᐃⵠᐃⵠΔ: "img/night-herb4.png",
    ΔΔᐃΔΔⵠΔ: "img/night-herb5.png",
    ΔᐃΔⲆᐃΔⵠ: "img/night-herb6.png",
    ⲆᐃⵠᐃᐃⵠⲆ: "img/night-herb7.png",
    ᐃΔⲆⲆⵠⲆⵠ: "img/night-herb8.png",
    ⲆⲆᐃΔⲆⲆⲆ: "img/night-herb9.png",
    ⵠΔᐃΔΔᐃᐃ: "img/night-herb10.png",
    ⲆⲆΔᐃⲆᐃᐃ: "img/night-herb11.png",
    ⲆⵠᐃⵠⵠⲆᐃ: "img/night-herb12.png",
    ᐃΔᐃⵠⲆΔⲆ: "img/night-herb13.png",
    ΔᐃᐃᐃⲆⵠⵠ: "img/night-herb14.png",
    ΔΔⲆⵠⵠΔᐃ: "img/night-herb15.png",
    ΔΔᐃⲆᐃᐃⲆ: "img/night-shell0.png",
    ᐃⲆⵠⵠⲆΔⲆ: "img/night-shell1.png",
    ΔⵠᐃΔⵠⲆⵠ: "img/night-shell2.png",
    ΔⲆⲆⵠⵠⲆⲆ: "img/night-leaf1.png",
    ΔⵠΔⲆΔⵠⵠ: "img/night-leaf2.png",
    ⵠᐃᐃⵠⵠⲆⲆ: "img/night-leaf3.png",
    ⲆΔΔⵠΔⲆⲆ: "img/night-leaf4.png",
    ⲆⵠⲆᐃⵠⲆΔ: "img/night-leaf5.png",
    ΔᐃⵠΔⵠⵠⵠ: "img/night-leaf6.png",
    ΔⲆᐃⵠⵠΔᐃ: "img/night-leaf7.png",
    ⵠᐃⵠᐃᐃⵠⵠ: "img/night-leaf8.png",
    ΔᐃᐃᐃᐃⲆᐃ: "img/night-rock0.png",
    ΔⵠΔⲆΔⲆΔ: "img/night-rock1.png",
    ΔⲆⲆΔᐃⲆΔ: "img/night-rock2.png",
    ⵠⲆⵠⲆⲆⲆᐃ: "img/night-rock3.png",
    ΔⲆⵠⵠⵠⵠΔ: "img/night-rock4.png",
    ⵠⵠⵠΔΔⵠΔ: "img/night-rock5.png",
    ΔΔⵠⵠΔⲆⲆ: "img/night-rock6.png",
    ⵠᐃⲆΔΔⲆᐃ: "img/night-rock7.png",
    ⲆⵠⲆΔⲆⵠⵠ: "img/night-rock8.png",
    ⵠᐃΔᐃⲆᐃⵠ: "img/night-rock9.png",
    ⵠⵠⲆΔᐃΔᐃ: "img/night-rock10.png",
    ⲆΔⲆΔᐃΔΔ: "img/night-rock11.png",
    ⲆⲆⵠⲆΔΔⵠ: "img/night-rock12.png",
    ⲆⲆⲆᐃΔᐃⵠ: "img/night-rock13.png",
    ᐃⲆⵠⵠⵠⲆᐃ: "img/night-flower1.png",
    ᐃⲆΔᐃⵠᐃΔ: "img/night-flower2.png",
    ⵠᐃᐃⲆᐃᐃΔ: "img/night-flower3.png",
    ⵠⲆΔΔⵠⵠⵠ: "img/night-flower4.png",
    ᐃΔᐃΔᐃⵠΔ: "img/night-flower5.png",
    ΔⵠΔΔⲆᐃⲆ: "img/night-flower6.png",
    ᐃⲆΔⵠᐃΔΔ: "img/night-flower7.png",
    ⵠⵠⵠᐃΔᐃⲆ: "img/night-flower8.png",
    ᐃᐃⲆⵠΔᐃᐃ: "img/night-flower9.png",
    ᐃⲆⲆᐃΔᐃⵠ: "img/night-herb16.png",
    ⵠⲆΔⲆᐃΔⲆ: "img/night-herb17.png",
    ⲆⲆΔⵠΔΔΔ: "img/night-herb18.png",
    ᐃᐃᐃⵠᐃΔⵠ: "img/night-herb19.png",
    ΔⵠⵠΔⵠΔⲆ: "img/night-herb20.png",
    ΔⲆⲆⵠᐃΔᐃ: "img/night-herb21.png",
    ⲆⲆⲆⲆᐃⵠᐃ: "img/day-river000-010-000.png",
    ⲆⲆⲆⵠⲆⵠⲆ: "img/day-river000-010-010.png",
    ᐃⵠᐃΔΔⵠΔ: "img/day-river000-011-000.png",
    ᐃⲆⵠⲆⲆⲆⵠ: "img/day-river000-011-010.png",
    ⲆΔⲆⵠⲆⲆᐃ: "img/day-river000-011-011.png",
    ⲆⵠⲆᐃⵠⲆᐃ: "img/day-river000-110-000.png",
    ᐃΔΔᐃⲆⵠⵠ: "img/day-river000-110-010.png",
    ΔΔΔⲆⵠᐃΔ: "img/day-river000-110-110.png",
    ᐃⲆᐃⲆⵠᐃⲆ: "img/day-river000-111-000.png",
    ⵠⵠⲆⵠⲆⲆⲆ: "img/day-river000-111-010.png",
    ⲆⲆᐃΔᐃᐃΔ: "img/day-river000-111-011.png",
    ᐃⵠⵠⵠⲆⲆⵠ: "img/day-river000-111-110.png",
    ⵠⵠᐃΔᐃⲆΔ: "img/day-river000-111-111.png",
    ΔᐃΔⲆⲆᐃⲆ: "img/day-river010-010-000.png",
    ΔⲆⵠⵠⵠⲆⲆ: "img/day-river010-010-010.png",
    ΔⲆΔⲆᐃᐃᐃ: "img/day-river010-011-000.png",
    ⲆΔΔΔⵠΔᐃ: "img/day-river010-011-010.png",
    ᐃⵠⲆΔⵠⵠᐃ: "img/day-river010-011-011.png",
    ᐃΔⲆⵠⵠᐃⲆ: "img/day-river010-110-000.png",
    ⵠⵠΔⲆΔⲆᐃ: "img/day-river010-110-010.png",
    ΔΔⵠⵠᐃⵠᐃ: "img/day-river010-110-110.png",
    ΔᐃᐃΔΔⵠΔ: "img/day-river010-111-000.png",
    ⵠⵠΔΔΔⲆⵠ: "img/day-river010-111-010.png",
    ⵠⵠⵠⲆⲆⵠᐃ: "img/day-river010-111-011.png",
    ᐃΔⲆΔⲆΔⵠ: "img/day-river010-111-110.png",
    ⲆⲆⲆᐃΔⵠⵠ: "img/day-river010-111-111.png",
    ⵠⵠᐃⲆΔⲆⲆ: "img/day-river011-011-000.png",
    ΔΔΔⵠΔᐃⵠ: "img/day-river011-011-010.png",
    ᐃⲆΔⲆⵠᐃⲆ: "img/day-river011-011-011.png",
    ᐃᐃᐃΔⵠᐃᐃ: "img/day-river011-111-000.png",
    ΔⲆᐃᐃΔΔⵠ: "img/day-river011-111-010.png",
    ΔⵠᐃΔⵠΔⲆ: "img/day-river011-111-011.png",
    ᐃⲆᐃΔⲆⵠΔ: "img/day-river011-111-110.png",
    ᐃⲆⵠⲆⲆΔᐃ: "img/day-river011-111-111.png",
    ⲆⵠⵠⲆᐃⵠᐃ: "img/day-river110-110-000.png",
    ᐃΔⵠⲆⵠⵠⵠ: "img/day-river110-110-010.png",
    ⵠΔⵠᐃΔⲆΔ: "img/day-river110-110-110.png",
    ΔΔⲆᐃⲆᐃΔ: "img/day-river110-111-000.png",
    ΔΔⵠᐃΔⵠⲆ: "img/day-river110-111-010.png",
    ⵠᐃⲆᐃΔΔⲆ: "img/day-river110-111-011.png",
    ⵠⵠⵠⲆᐃⲆⵠ: "img/day-river110-111-110.png",
    ⲆΔⵠⵠᐃΔᐃ: "img/day-river110-111-111.png",
    ⲆᐃΔⵠΔⲆⲆ: "img/day-river111-111-011.png",
    ⲆⲆᐃᐃⲆⲆᐃ: "img/day-river111-111-110.png",
    ⲆᐃΔⵠΔⲆⲆ: "img/day-river111-111-011.png",
    ΔᐃⵠⲆᐃⵠⲆ: "img/day-river111-111-000.png",
    ΔᐃⵠⵠΔΔΔ: "img/day-river111-111-111.png",
    ᐃⵠᐃⵠΔᐃΔ: "img/day-river111-111-010.png",
    ᐃⲆⲆᐃᐃΔΔ: "img/night-river000-010-000.png",
    ᐃⲆᐃΔΔⲆⵠ: "img/night-river000-010-010.png",
    ΔⵠⲆⵠⲆΔΔ: "img/night-river000-011-000.png",
    ΔΔⵠⵠᐃⵠΔ: "img/night-river000-011-010.png",
    ⲆⲆΔⵠᐃⵠⲆ: "img/night-river000-011-011.png",
    ᐃⲆⲆᐃⲆᐃⵠ: "img/night-river000-110-000.png",
    ⲆᐃⵠΔᐃΔᐃ: "img/night-river000-110-010.png",
    ΔⵠⵠΔΔⲆⲆ: "img/night-river000-110-110.png",
    ΔⲆⲆⲆᐃⵠⲆ: "img/night-river000-111-000.png",
    ΔⲆⵠⲆⲆⵠΔ: "img/night-river000-111-010.png",
    ᐃΔⲆΔⲆᐃⵠ: "img/night-river000-111-011.png",
    ΔΔᐃⲆⲆⵠⵠ: "img/night-river000-111-110.png",
    ⵠⵠΔⲆⲆⲆⲆ: "img/night-river000-111-111.png",
    ᐃⵠΔⲆᐃΔᐃ: "img/night-river010-010-000.png",
    ᐃⲆⵠΔΔᐃⵠ: "img/night-river010-010-010.png",
    ⲆⲆⲆᐃᐃⲆᐃ: "img/night-river010-011-000.png",
    ᐃⵠᐃΔᐃΔⵠ: "img/night-river010-011-010.png",
    ⲆᐃⵠᐃⲆᐃΔ: "img/night-river010-011-011.png",
    ⵠΔⵠⲆⵠⲆᐃ: "img/night-river010-110-000.png",
    ⵠⵠⵠⵠⵠⵠⲆ: "img/night-river010-110-010.png",
    ᐃᐃⲆΔⵠⵠⲆ: "img/night-river010-110-110.png",
    ᐃᐃⲆⲆⵠⲆᐃ: "img/night-river010-111-000.png",
    ⵠᐃⲆⵠⵠⵠᐃ: "img/night-river010-111-010.png",
    ᐃⲆᐃΔⲆΔΔ: "img/night-river010-111-011.png",
    ΔⲆⲆᐃⵠᐃⵠ: "img/night-river010-111-110.png",
    ⵠᐃⲆⲆᐃⵠΔ: "img/night-river010-111-111.png",
    ΔⲆⲆΔⲆᐃⲆ: "img/night-river011-011-000.png",
    ᐃᐃⵠⵠᐃⲆᐃ: "img/night-river011-011-010.png",
    ⵠⲆᐃᐃⲆⲆⵠ: "img/night-river011-011-011.png",
    ΔⵠᐃᐃᐃⲆⲆ: "img/night-river011-111-000.png",
    ⲆⲆᐃᐃΔΔⵠ: "img/night-river011-111-010.png",
    ΔⵠⲆⲆⵠᐃⲆ: "img/night-river011-111-011.png",
    ⵠΔΔⵠᐃⲆⵠ: "img/night-river011-111-110.png",
    ⵠⵠⵠᐃᐃⵠᐃ: "img/night-river011-111-111.png",
    ΔⵠΔᐃⵠΔⲆ: "img/night-river110-110-000.png",
    ⵠⵠⵠⵠⵠⲆΔ: "img/night-river110-110-010.png",
    ᐃᐃⲆⲆⲆⲆⲆ: "img/night-river110-110-110.png",
    ⲆⲆᐃⲆΔⲆᐃ: "img/night-river110-111-000.png",
    ⲆⲆⵠΔᐃΔⲆ: "img/night-river110-111-010.png",
    ΔΔᐃⲆᐃⵠᐃ: "img/night-river110-111-011.png",
    ⵠᐃⲆᐃⵠᐃⲆ: "img/night-river110-111-110.png",
    ⲆⲆᐃΔⵠⲆΔ: "img/night-river110-111-111.png",
    ᐃⲆΔΔⵠΔⲆ: "img/night-river111-111-011.png",
    ΔⵠⵠⲆⲆᐃᐃ: "img/night-river111-111-110.png",
    ᐃⲆΔΔⵠΔⲆ: "img/night-river111-111-011.png",
    ⲆⵠⲆΔᐃⵠⲆ: "img/night-river111-111-000.png",
    ⵠᐃΔᐃᐃⲆⲆ: "img/night-river111-111-111.png",
    ᐃⲆΔᐃⲆⵠᐃ: "img/night-river111-111-010.png",
    ᐃᐃΔΔⲆⵠⵠ: "img/day-pebblecompo1.png",
    ᐃⵠⵠᐃᐃ: "img/day-pebblecompo2.png",
    ⲆⵠⵠⵠΔ: "img/day-pebblecompo3.png",
    ⵠᐃⵠⵠᐃⵠⵠ: "img/day-pebblecompo4.png",
    ⵠΔⵠᐃⲆ: "img/day-pebblecompo5.png",
    ⵠΔᐃⵠΔ: "img/day-pebblecompo6.png",
    ⵠᐃⲆⵠΔ: "img/day-pebblecompo7.png",
    ΔᐃⲆⵠⲆΔᐃ: "img/day-pebblecompo8.png",
    ⲆⵠⵠⵠᐃⲆᐃ: "img/day-pebblecompo9.png",
    ⵠΔᐃᐃⵠⵠᐃ: "img/day-pebblecompo10.png",
    ⵠᐃᐃⵠⲆ: "img/day-pebblecompo11.png",
    ᐃⵠΔⲆᐃⵠⲆ: "img/day-pebblecompo12.png",
    ΔΔΔⲆⲆⵠⲆ: "img/day-pebblecompo13.png",
    ᐃᐃΔᐃⲆΔⵠ: "img/day-pebblecompo14.png",
    ᐃⲆᐃⵠⵠΔΔ: "img/day-pebblecompo15.png",
    ᐃⵠⵠᐃⲆᐃⵠ: "img/day-pebblecompo16.png",
    ΔⲆⲆᐃᐃ: "img/day-pebblecompo17.png",
    ⲆⵠᐃΔⵠⲆΔ: "img/day-pebblecompo18.png",
    ᐃΔⵠⲆΔΔΔ: "img/day-pebblecompo19.png",
    ΔⵠⵠᐃΔ: "img/day-pebblecompo20.png",
    ⲆΔᐃⲆⲆ: "img/day-pebblecompo21.png",
    ⲆΔᐃⲆᐃⵠᐃ: "img/day-pebblecompo22.png",
    ΔᐃⲆⵠᐃⲆᐃ: "img/day-pebblecompo23.png",
    ⲆⲆΔΔⵠΔⵠ: "img/day-pebblecompo24.png",
    ⵠⵠⵠΔⵠ: "img/day-pebblecompo25.png",
    ⵠΔΔᐃΔ: "img/day-pebblecompo26.png",
    ΔⲆΔⵠΔᐃⵠ: "img/day-pebblecompo27.png",
    ᐃⲆΔⵠΔ: "img/day-pebblecompo28.png",
    ΔⲆΔΔⲆΔᐃ: "img/night-pebblecompo1.png",
    ΔᐃⲆⲆᐃ: "img/night-pebblecompo2.png",
    ⵠⵠᐃⲆⲆ: "img/night-pebblecompo3.png",
    ⵠΔΔᐃⲆⲆⲆ: "img/night-pebblecompo4.png",
    ⵠᐃⵠⵠᐃ: "img/night-pebblecompo5.png",
    ⲆⲆⵠΔᐃ: "img/night-pebblecompo6.png",
    ⵠⵠᐃⲆⵠ: "img/night-pebblecompo7.png",
    ⵠⵠⵠⲆⲆΔⵠ: "img/night-pebblecompo8.png",
    ⵠΔⲆⵠⲆⵠⲆ: "img/night-pebblecompo9.png",
    ⵠΔⲆΔⵠⲆΔ: "img/night-pebblecompo10.png",
    ⵠⲆⵠⲆᐃ: "img/night-pebblecompo11.png",
    ⲆᐃΔᐃᐃΔΔ: "img/night-pebblecompo12.png",
    ᐃⲆᐃⵠⲆⵠᐃ: "img/night-pebblecompo13.png",
    ⵠⲆⵠⲆⲆⵠᐃ: "img/night-pebblecompo14.png",
    ΔΔᐃΔⵠⵠΔ: "img/night-pebblecompo15.png",
    ⵠᐃΔᐃⵠΔⵠ: "img/night-pebblecompo16.png",
    ⲆⵠⵠᐃⲆ: "img/night-pebblecompo17.png",
    ΔΔⵠⵠᐃᐃⵠ: "img/night-pebblecompo18.png",
    ᐃΔᐃΔⵠΔⲆ: "img/night-pebblecompo19.png",
    ⵠⲆᐃⵠⵠ: "img/night-pebblecompo20.png",
    ᐃᐃⵠΔⲆ: "img/night-pebblecompo21.png",
    ⲆᐃᐃΔⵠΔΔ: "img/night-pebblecompo22.png",
    ᐃΔⲆⲆΔᐃᐃ: "img/night-pebblecompo23.png",
    ⲆᐃⲆΔⲆᐃᐃ: "img/night-pebblecompo24.png",
    ⲆᐃⲆΔⵠ: "img/night-pebblecompo25.png",
    ᐃⵠᐃⲆⲆ: "img/night-pebblecompo26.png",
    ᐃⲆⲆⵠⲆΔΔ: "img/night-pebblecompo27.png",
    ⲆⲆⲆΔⵠ: "img/night-pebblecompo28.png",
    ⲆⵠΔΔⲆⲆⵠ: "img/day-baby-mammoth.png",
    ΔΔⲆⲆⲆⵠⲆ: "img/day-baby-mammoth-tamed.png",
    ⵠΔⵠΔⲆΔᐃ: "img/day-baby-mammoth-angry.png",
    ⵠΔⲆⲆΔΔⲆ: "img/night-baby-mammoth.png",
    ⲆᐃⵠΔⵠᐃᐃ: "img/night-baby-mammoth-tamed.png",
    ⵠᐃⵠΔⵠⵠⲆ: "img/night-baby-mammoth-angry.png",
    ΔⵠⵠⲆΔⵠᐃ: "img/inv-mammoth-out.png",
    ΔⲆΔⵠⵠᐃΔ: "img/inv-mammoth-in.png",
    ⲆΔⲆⲆⲆⵠᐃ: "img/inv-mammoth-click.png",
    ⵠΔΔⵠⲆΔⲆ: "img/hurt-baby-mammoth.png",
    ΔᐃᐃⵠΔΔⵠ: "img/baby-mammoth-step.png",
    ⲆⵠⲆᐃΔΔⲆ: "img/day-flower-hat.png",
    ᐃᐃⲆⲆᐃᐃⵠ: "img/night-flower-hat.png",
    ⲆⵠⲆⵠⵠΔⲆ: "img/inv-flower-hat-out.png",
    ⵠⲆⲆΔᐃⵠᐃ: "img/inv-flower-hat-in.png",
    ᐃⲆⲆⲆΔⲆⲆ: "img/inv-flower-hat-click.png",
    ᐃⲆⵠⲆᐃᐃΔ: "img/day-fur-hat.png",
    ⵠⵠΔΔΔΔΔ: "img/night-fur-hat.png",
    ⵠⲆⲆⵠΔᐃⲆ: "img/inv-fur-hat-out.png",
    ⵠⵠᐃⵠⲆⵠᐃ: "img/inv-fur-hat-in.png",
    ΔⵠΔⵠᐃᐃᐃ: "img/inv-fur-hat-click.png",
    ⵠᐃΔΔᐃⲆΔ: "img/day-mammoth.png",
    ᐃΔⵠᐃΔᐃΔ: "img/night-mammoth.png",
    ᐃⲆΔΔᐃⵠⵠ: "img/hurt-mammoth.png",
    ΔⵠᐃⲆⵠⲆᐃ: "img/inv-mammoth-fur-out.png",
    ⲆΔΔᐃⵠΔΔ: "img/inv-mammoth-fur-in.png",
    ⲆᐃΔⲆⲆⵠᐃ: "img/inv-mammoth-fur-click.png",
    ᐃⵠⵠΔΔⲆⵠ: "img/inv-wood-bow-out.png",
    ⲆΔⲆᐃⵠΔΔ: "img/inv-wood-bow-in.png",
    ᐃⵠΔᐃⵠᐃⵠ: "img/inv-wood-bow-click.png",
    ΔⲆⵠⲆᐃᐃⵠ: "img/inv-wood-arrow-out.png",
    ⲆᐃΔⲆⲆᐃΔ: "img/inv-wood-arrow-in.png",
    ᐃⵠᐃⵠⲆⲆⵠ: "img/inv-wood-arrow-click.png",
    ᐃΔᐃᐃΔⵠⲆ: "img/day-wood-bow2.png",
    ⲆⵠⵠΔⲆⲆᐃ: "img/night-wood-bow2.png",
    ΔᐃⲆΔⵠᐃⲆ: "img/day-wood-arrow.png",
    ᐃⲆⵠᐃᐃᐃΔ: "img/night-wood-arrow.png",
    ⲆᐃⵠΔⲆΔΔ: "img/inv-stone-bow-out.png",
    ⲆⵠⲆΔᐃⵠⵠ: "img/inv-stone-bow-in.png",
    ⲆⵠⲆⲆⵠⲆΔ: "img/inv-stone-bow-click.png",
    ᐃⵠᐃⵠⵠᐃⲆ: "img/inv-stone-arrow-out.png",
    ᐃΔⲆⵠᐃⲆⲆ: "img/inv-stone-arrow-in.png",
    ᐃⲆΔⵠⲆⲆⵠ: "img/inv-stone-arrow-click.png",
    ᐃⵠΔΔⲆᐃᐃ: "img/day-stone-bow.png",
    ᐃᐃⲆΔᐃⵠᐃ: "img/night-stone-bow.png",
    ⵠᐃΔᐃΔᐃⲆ: "img/day-stone-arrow.png",
    ΔᐃⵠᐃΔᐃⵠ: "img/night-stone-arrow.png",
    ⲆᐃⲆΔⵠᐃⵠ: "img/inv-gold-bow-out.png",
    ⲆΔⲆᐃⵠⲆΔ: "img/inv-gold-bow-in.png",
    ΔⲆⵠⵠⵠⲆⵠ: "img/inv-gold-bow-click.png",
    ⵠΔⲆΔⲆⵠᐃ: "img/inv-gold-arrow-out.png",
    ⵠⲆΔⵠΔΔⵠ: "img/inv-gold-arrow-in.png",
    ⲆⲆⲆΔΔΔΔ: "img/inv-gold-arrow-click.png",
    ᐃΔⲆΔΔⵠⲆ: "img/day-gold-bow.png",
    ΔⵠⲆᐃⲆΔΔ: "img/night-gold-bow.png",
    ΔⵠⵠⲆᐃᐃΔ: "img/day-gold-arrow.png",
    ⵠᐃⵠⲆⲆᐃⲆ: "img/night-gold-arrow.png",
    ΔΔⲆΔᐃΔᐃ: "img/inv-diamond-bow-out.png",
    ᐃⲆⲆΔⲆⲆⵠ: "img/inv-diamond-bow-in.png",
    ᐃᐃᐃᐃΔᐃⲆ: "img/inv-diamond-bow-click.png",
    ⲆⲆᐃᐃⲆⵠΔ: "img/inv-diamond-arrow-out.png",
    ⵠᐃⲆΔᐃⲆΔ: "img/inv-diamond-arrow-in.png",
    ΔᐃⲆⲆᐃⵠΔ: "img/inv-diamond-arrow-click.png",
    ΔⵠⲆᐃᐃⲆⵠ: "img/day-diamond-bow.png",
    ⵠⵠᐃᐃᐃᐃΔ: "img/night-diamond-bow.png",
    ΔⵠᐃΔᐃⵠⲆ: "img/day-diamond-arrow.png",
    ᐃΔⵠⲆᐃΔⵠ: "img/night-diamond-arrow.png",
    ⵠⵠⵠΔᐃⲆⲆ: "img/inv-amethyst-bow-out.png",
    ᐃΔⲆᐃⲆᐃⵠᐃⲆ: "img/inv-amethyst-bow-in.png",
    ⲆⵠᐃΔᐃΔᐃᐃᐃ: "img/inv-amethyst-bow-click.png",
    ᐃΔᐃⲆᐃΔⵠΔΔ: "img/inv-amethyst-arrow-out.png",
    ᐃᐃⲆΔᐃⲆⵠⲆⵠ: "img/inv-amethyst-arrow-in.png",
    ΔⲆⲆᐃⲆΔⵠⵠΔ: "img/inv-amethyst-arrow-click.png",
    ⲆΔⵠᐃⲆΔⵠᐃΔ: "img/day-amethyst-bow.png",
    ᐃⲆⲆᐃⲆⲆⵠⲆᐃ: "img/night-amethyst-bow.png",
    ᐃⵠᐃᐃΔⲆⵠ: "img/day-amethyst-arrow.png",
    ΔΔᐃⲆΔⲆⲆ: "img/night-amethyst-arrow.png",
    ΔΔΔΔⵠⵠⵠᐃΔ: "img/inv-dragon-bow-out.png",
    ΔⲆΔⲆᐃⲆⵠΔⲆ: "img/inv-dragon-bow-in.png",
    ΔⲆᐃⲆᐃᐃⲆΔᐃ: "img/inv-dragon-bow-click.png",
    ⵠᐃⵠΔΔΔΔⵠᐃ: "img/inv-dragon-arrow-out.png",
    ⲆᐃⵠΔΔⲆᐃⲆᐃ: "img/inv-dragon-arrow-in.png",
    ⲆΔⲆⵠⵠᐃⲆⲆᐃ: "img/inv-dragon-arrow-click.png",
    ᐃⵠⲆⵠⲆⲆⲆᐃⲆ: "img/day-dragon-bow.png",
    ᐃⲆᐃⵠⲆΔⲆⵠⵠ: "img/night-dragon-bow.png",
    ⵠᐃⵠⲆⵠⵠⲆ: "img/day-dragon-arrow.png",
    ⵠⵠᐃⲆⲆᐃΔ: "img/night-dragon-arrow.png",
    ᐃᐃᐃᐃᐃᐃᐃⵠᐃ: "img/inv-reidite-bow-out.png",
    ⲆⵠΔᐃᐃⵠⲆᐃᐃ: "img/inv-reidite-bow-in.png",
    ⵠⵠΔⵠⵠᐃⵠⲆⲆ: "img/inv-reidite-bow-click.png",
    ⲆᐃⲆᐃᐃᐃⲆΔΔ: "img/inv-reidite-arrow-out.png",
    ⲆᐃⲆⲆᐃⵠᐃᐃΔ: "img/inv-reidite-arrow-in.png",
    ΔᐃⵠΔΔΔΔⲆΔ: "img/inv-reidite-arrow-click.png",
    ⲆΔⲆⵠᐃΔᐃΔⵠ: "img/day-reidite-bow.png",
    ⵠⲆᐃⵠⲆⵠΔⵠⲆ: "img/night-reidite-bow.png",
    ΔᐃᐃⲆⲆΔᐃ: "img/day-reidite-arrow.png",
    ΔⲆΔΔΔΔⵠΔⵠ: "img/night-reidite-arrow.png",
    ᐃⲆⲆⵠᐃΔᐃⵠⵠ: "img/inv-wooden-axe-out.png",
    ΔⲆᐃⲆᐃᐃⲆΔΔ: "img/inv-wooden-axe-in.png",
    ᐃΔⲆⲆⲆⵠⲆΔⵠ: "img/inv-wooden-axe-click.png",
    ⵠⲆΔᐃⲆⲆᐃᐃΔ: "img/day-wooden-axe.png",
    ΔΔⵠⲆⲆⲆⲆΔⲆ: "img/night-wooden-axe.png",
    ⲆⵠⲆΔⵠⵠᐃⵠⲆ: "img/inv-stone-axe-out.png",
    ᐃΔᐃᐃⲆⵠⵠᐃΔ: "img/inv-stone-axe-in.png",
    ᐃⲆΔⲆⲆᐃⵠᐃᐃ: "img/inv-stone-axe-click.png",
    ⵠⵠΔⵠᐃⵠⵠᐃⵠ: "img/day-stone-axe.png",
    ᐃⵠᐃⲆΔᐃᐃⵠΔ: "img/night-stone-axe.png",
    ᐃᐃⵠⲆⲆⵠᐃⵠⵠ: "img/inv-golden-axe-out.png",
    ΔᐃΔᐃⵠΔᐃᐃΔ: "img/inv-golden-axe-in.png",
    ⵠⵠⲆΔⵠⵠΔᐃⵠ: "img/inv-golden-axe-click.png",
    ᐃΔⵠᐃⲆⵠⵠΔΔ: "img/day-golden-axe.png",
    ᐃⵠⵠⵠΔᐃⲆⲆⲆ: "img/night-golden-axe.png",
    ΔᐃᐃⵠᐃᐃΔᐃΔ: "img/inv-diamond-axe-out.png",
    ⲆᐃᐃΔᐃΔⲆⵠᐃ: "img/inv-diamond-axe-in.png",
    ΔⵠⲆⲆⵠⵠΔΔⲆ: "img/inv-diamond-axe-click.png",
    ⲆΔΔᐃᐃⲆΔⲆΔ: "img/day-diamond-axe.png",
    ΔⵠⲆⲆΔΔᐃⲆΔ: "img/night-diamond-axe.png",
    ΔΔⵠⵠΔⲆΔⵠⵠ: "img/inv-amethyst-axe-out.png",
    ⵠᐃΔΔᐃᐃᐃΔᐃ: "img/inv-amethyst-axe-in.png",
    ᐃⲆΔⲆᐃⵠⲆⲆΔ: "img/inv-amethyst-axe-click.png",
    ⵠΔᐃΔᐃᐃᐃΔΔ: "img/day-amethyst-axe.png",
    ⲆⲆᐃᐃⵠΔⲆⲆⲆ: "img/night-amethyst-axe.png",
    ⲆᐃᐃⲆΔⲆⵠⲆⵠ: "img/inv-reidite-axe-out.png",
    ᐃⲆⵠⵠΔΔⵠⲆΔ: "img/inv-reidite-axe-in.png",
    ⵠᐃᐃⵠⲆⲆⲆΔᐃ: "img/inv-reidite-axe-click.png",
    ⵠⵠⵠⵠⵠᐃⲆΔᐃ: "img/day-reidite-axe.png",
    ⲆΔⲆⵠΔΔⲆⵠΔ: "img/night-reidite-axe.png",
    ΔⵠⵠⲆΔᐃΔ: "img/bandage-activated.png",
    ΔᐃⵠⵠᐃⲆᐃ: "img/auto-feed.png",
    ⵠᐃᐃⵠⵠⵠᐃ: "img/stop-regeneration.png",
    ΔⲆᐃΔΔᐃⵠ: "img/stop-regeneration2.png",
    ⲆⵠⵠΔΔᐃⲆᐃᐃ: "img/day-wood-platform.png",
    ⵠᐃⲆΔⵠΔᐃᐃᐃ: "img/night-wood-platform.png",
    ᐃΔᐃⵠⵠⲆⲆⲆΔ: "img/inv-wood-platform-in.png",
    ⵠⵠⵠⲆᐃⵠᐃⲆᐃ: "img/inv-wood-platform-out.png",
    ⵠⵠⵠΔⲆⵠᐃᐃΔ: "img/inv-wood-platform-click.png",
    ΔΔⵠⲆΔⲆⲆΔᐃ: "img/day-wood-shield.png",
    ⲆⵠᐃⲆⵠΔⲆⲆⵠ: "img/night-wood-shield.png",
    ᐃⵠⵠΔⵠΔⲆᐃᐃ: "img/day-stone-shield.png",
    ⲆⲆⲆⲆΔⵠⲆⵠⲆ: "img/night-stone-shield.png",
    ΔⲆᐃᐃΔⵠΔᐃΔ: "img/day-gold-shield.png",
    ΔΔⵠⲆΔⵠⲆᐃⵠ: "img/night-gold-shield.png",
    ΔΔΔΔⲆΔⵠⲆⵠ: "img/day-diamond-shield.png",
    ⵠⲆⵠΔⵠΔⵠⵠⲆ: "img/night-diamond-shield.png",
    ᐃΔⵠΔΔΔⵠᐃΔ: "img/day-amethyst-shield.png",
    ᐃΔΔⵠⲆⵠᐃᐃᐃ: "img/night-amethyst-shield.png",
    ⵠᐃⵠⲆΔᐃⲆᐃⲆ: "img/day-reidite-shield.png",
    ⵠᐃΔⵠᐃΔᐃΔᐃ: "img/night-reidite-shield.png",
    ΔⲆᐃⲆΔⲆⲆΔᐃ: "img/inv-wood-shield-in.png",
    ᐃⲆⵠᐃΔΔⵠᐃⲆ: "img/inv-wood-shield-out.png",
    ΔᐃⲆⵠᐃⲆⲆⲆΔ: "img/inv-wood-shield-click.png",
    ᐃⵠΔΔᐃᐃⵠᐃᐃ: "img/inv-stone-shield-in.png",
    ᐃᐃᐃⲆⵠⵠᐃⵠⲆ: "img/inv-stone-shield-out.png",
    ⵠᐃΔⲆΔᐃⵠᐃⵠ: "img/inv-stone-shield-click.png",
    ΔᐃΔΔΔᐃᐃⲆᐃ: "img/inv-gold-shield-in.png",
    ⲆΔⲆⲆⲆᐃΔⵠⵠ: "img/inv-gold-shield-out.png",
    ΔΔΔᐃⲆⵠⲆΔⵠ: "img/inv-gold-shield-click.png",
    ΔᐃⲆⲆᐃᐃⵠⲆⲆ: "img/inv-diamond-shield-in.png",
    ΔΔⵠᐃⵠⵠΔⵠⵠ: "img/inv-diamond-shield-out.png",
    ᐃΔᐃⵠⲆⲆⲆⵠⵠ: "img/inv-diamond-shield-click.png",
    ΔⵠΔᐃᐃᐃⵠΔⲆ: "img/inv-amethyst-shield-in.png",
    ⵠⲆΔᐃΔᐃΔΔⲆ: "img/inv-amethyst-shield-out.png",
    ᐃⵠⲆᐃΔⲆⵠⲆⵠ: "img/inv-amethyst-shield-click.png",
    ⲆⲆⲆΔⲆⲆΔⵠⵠ: "img/inv-reidite-shield-in.png",
    ⵠⵠⵠⵠⲆΔᐃΔⵠ: "img/inv-reidite-shield-out.png",
    ᐃᐃⲆᐃᐃⵠⲆᐃΔ: "img/inv-reidite-shield-click.png",
    ΔⵠⵠⵠⲆⵠΔⲆⵠ: "img/day-machete.png",
    ⲆᐃⲆⲆⵠⲆᐃⵠⲆ: "img/night-machete.png",
    ⵠⵠΔⵠⲆⲆᐃⵠᐃ: "img/inv-machete-in.png",
    ⲆⵠᐃᐃᐃΔⵠᐃᐃ: "img/inv-machete-out.png",
    ⵠⵠᐃⲆΔΔᐃⲆΔ: "img/inv-machete-click.png"
  };
  ᐃᐃⵠⲆΔΔⲆ = [{}];
  const tb = Uh;
  ᐃᐃⵠⲆΔΔⲆ[In].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = ps; c < a.length; c++) {
      b[c] = a[c];
    }
    return b;
  };
  const nb = Mq;
  ᐃⵠΔᐃⲆᐃᐃ = {};
  ΔⵠΔΔΔⲆᐃᐃⲆ = {};
  for (var Gt in Ⲇⵠ) {
    ᐃⵠΔᐃⲆᐃᐃ[Gt] = Ⲇⵠ[Gt];
  }
  function ob(a, b) {
    const c = ~(a & 19540) & 19540 | ~(a & 19540) & a;
    const d = b ^ 852;
    const e = ht(c, d, c, d, c, d);
    Hw(c, d);
    return e ^ 11563;
  }
  ΔΔ = [];
  const rb = ug;
  ᐃΔⵠ = {};
  ᐃΔⵠ.ⵠᐃⵠⲆᐃ = 0;
  ᐃΔⵠ.ⵠᐃⵠⵠ = rg;
  ᐃΔⵠ.ᐃΔⵠⲆ = 2;
  ᐃΔⵠ.ᐃⲆⵠᐃ = 3;
  const ab = so;
  ᐃΔⵠ.ᐃⲆΔⵠ = Ps;
  ᐃΔⵠ.Ⲇⵠⵠⵠ = Qr;
  const sb = Ej;
  ᐃΔⵠ.ᐃⵠᐃΔ = _l;
  ᐃΔⵠ.ΔΔⲆΔΔⲆΔ = ur;
  ᐃΔⵠ.ᐃΔⵠᐃΔ = $l;
  ΔⲆⵠⲆ = {};
  ⵠᐃΔⲆ = [];
  ⲆⵠⵠΔΔᐃⲆ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (b === a[c].id) {
        return c;
      }
    }
    return -Ol;
  };
  const hb = og;
  const lb = Te;
  var gb = [];
  function Nt(a, b) {
    for (var c = 0; gb.length > c; c += b) {
      var d = gb[c];
      if (a === d[zl]) {
        db(d[Lr], d[1], d[ih], d[gl]);
      }
    }
  }
  const bb = I;
  const vb = G;
  function db(b, c, d, e) {
    var f = ⵠᐃΔⲆ[b];
    if (Jg !== f) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / mf.ⵠⲆᐃⲆᐃ;
        var m = d * 193 / mf.ⲆⵠⲆⵠᐃ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ΔΔ[Xr.ΔⵠⲆⵠΔ][i].drawImage(j, k - n / Yg, m - o / bs, n, o);
        k = e * 600 / mf.ⵠⲆᐃⲆᐃ;
        m = d * 600 / mf.ⲆⵠⲆⵠᐃ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ΔΔ[Xr.ΔΔⵠᐃⵠ][i].drawImage(j, k - n / 2, m - o / Zh, n, o);
      }
    }
  }
  function cb(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  ⵠⵠⲆΔⵠΔⲆᐃΔ = function () {
    for (var b = 0; b < 2; b++) {
      ΔΔ[Xr.ΔⵠⲆⵠΔ][b].clearRect(Hi, 0, 193, 193);
      ΔΔ[Xr.ΔⵠⲆⵠΔ][b].drawImage(ⵠᐃΔⲆ.MAP[b], 0, 0, 193, 193);
      ΔΔ[Xr.ΔΔⵠᐃⵠ][b].clearRect(0, Rs, 600, 600);
      ΔΔ[Xr.ΔΔⵠᐃⵠ][b].drawImage(ⵠᐃΔⲆ.MAP[b], 0, 0, 600, 600);
      for (var c = mf.Ⲇᐃᐃᐃ.length - 1; c >= 0; c--) {
        var d = mf.Ⲇᐃᐃᐃ[c];
        var f = d.x1 * 193 / (Hl * mf.ⵠⲆᐃⲆᐃ);
        var j = d.y1 * 193 / (mf.ⲆⵠⲆⵠᐃ * 100);
        var k = d.w * 193 / (Yh * mf.ⵠⲆᐃⲆᐃ);
        var m = d.ΔⵠⲆ * 193 / (_j * mf.ⲆⵠⲆⵠᐃ);
        var p = d.x1 * 600 / (mf.ⵠⲆᐃⲆᐃ * 100);
        var q = d.y1 * 600 / (mf.ⲆⵠⲆⵠᐃ * 100);
        var u = d.w * 600 / (Ah * mf.ⵠⲆᐃⲆᐃ);
        var v = d.ΔⵠⲆ * 600 / (Jh * mf.ⲆⵠⲆⵠᐃ);
        if (mf.ⵠΔΔⵠⲆ === d.ⵠⵠⵠ) {
          ΔΔ[Xr.ΔⵠⲆⵠΔ][b].drawImage(ⵠᐃΔⲆ.FOREST[b], f, j, k, m);
          ΔΔ[Xr.ΔΔⵠᐃⵠ][b].drawImage(ⵠᐃΔⲆ.FOREST[b], p, q, u, v);
        }
        if (d.ⵠⵠⵠ === mf.ᐃΔΔΔⵠⵠΔ) {
          ΔΔ[Xr.ΔⵠⲆⵠΔ][b].drawImage(ⵠᐃΔⲆ.WINTER[b], f, j, k, m);
          ΔΔ[Xr.ΔΔⵠᐃⵠ][b].drawImage(ⵠᐃΔⲆ.WINTER[b], p, q, u, v);
        }
        if (d.ⵠⵠⵠ === mf.ⵠⵠⲆΔⵠΔΔ) {
          ΔΔ[Xr.ΔⵠⲆⵠΔ][b].drawImage(ⵠᐃΔⲆ.LAVA[b], f, j, k, m);
          ΔΔ[Xr.ΔΔⵠᐃⵠ][b].drawImage(ⵠᐃΔⲆ.LAVA[b], p, q, u, v);
        }
        if (mf.ΔᐃΔΔⲆⲆⲆ === d.ⵠⵠⵠ) {
          ΔΔ[Xr.ΔⵠⲆⵠΔ][b].drawImage(ⵠᐃΔⲆ.CAVE[b], f, j, k, m);
          ΔΔ[Xr.ΔΔⵠᐃⵠ][b].drawImage(ⵠᐃΔⲆ.CAVE[b], p, q, u, v);
        }
        if (mf.ᐃⵠⵠᐃΔᐃΔ === d.ⵠⵠⵠ) {
          ΔΔ[Xr.ΔⵠⲆⵠΔ][b].drawImage(ⵠᐃΔⲆ.DESERT[b], f, j, k, m);
          ΔΔ[Xr.ΔΔⵠᐃⵠ][b].drawImage(ⵠᐃΔⲆ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ᐃⵠᐃᐃⲆⲆᐃᐃᐃ = function () {
    ΔⲆⵠⲆ = {
      ᐃⵠΔᐃⲆ: [{
        id: wj,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⲆⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃᐃⲆⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔᐃΔᐃⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔᐃΔⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆΔΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⵠⲆⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠΔⲆⵠᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔⵠⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔⲆᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔᐃΔᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆΔᐃᐃⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠᐃⲆΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⵠⵠΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⲆᐃᐃΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⲆⲆᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⲆⵠΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆᐃΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔⲆᐃⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔⲆᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "What?"
      }, {
        id: ba,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃᐃΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆⲆⲆⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔΔⲆⵠΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔΔⲆΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔⵠⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⵠᐃⲆΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃᐃᐃΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⵠΔΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Scar"
      }, {
        id: Bs,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠΔΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔⵠⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠΔⵠⵠⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔΔᐃᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "In Trouble"
      }, {
        id: zg,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃΔⲆⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⲆⲆⵠⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠᐃᐃⲆⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃⵠⲆⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠΔᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆΔⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃΔᐃᐃⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠᐃΔᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔⲆᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⲆΔΔᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆᐃⲆΔⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠᐃᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Happy 2"
      }, {
        id: tk,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⵠΔᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔΔⲆⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⲆⲆⵠΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠᐃⲆᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Crazy"
      }, {
        id: Vh,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔΔⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔᐃⵠᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔⵠᐃΔⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔⲆⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠΔᐃⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⵠⲆᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔⵠⲆⲆΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠⲆΔⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠΔⲆⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆᐃⵠⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔᐃⵠⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠΔᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Curious"
      }, {
        id: v,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃᐃΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⵠΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃⵠⵠᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆⲆⲆⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⵠⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⲆΔⲆᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔΔᐃⵠΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔⲆⲆⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠΔᐃΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⲆΔⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⲆⵠΔⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Scar 2"
      }, {
        id: ro,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔⲆⲆⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠᐃΔΔⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃᐃⵠⲆⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆⲆⲆΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Sick"
      }, {
        id: hh,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃΔⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠΔᐃᐃΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⵠⲆᐃᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠᐃⲆⲆⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⲆⲆᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔΔⲆΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠΔⵠᐃΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔᐃⵠᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔΔᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆΔᐃⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔⲆΔᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.Ⲇᐃⵠⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⵠᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆⵠⵠΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆᐃᐃⵠⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔᐃⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃⵠΔᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆᐃΔᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆᐃᐃⵠᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃΔⵠᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠΔⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠⵠⵠⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆᐃΔΔⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃΔΔΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 104,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⵠᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆⲆΔⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠΔᐃᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃᐃᐃΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔᐃᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆᐃⵠⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠᐃⵠᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔΔΔᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃᐃⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⲆᐃⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃᐃⵠⵠⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃΔᐃⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠΔΔᐃⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⵠⵠΔΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠⵠⵠⲆⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⵠⵠΔⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠⲆᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔᐃⲆΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠⲆⵠⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⲆΔⲆⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⵠⲆⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃⲆΔⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔᐃΔΔⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠᐃΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⵠᐃᐃⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃΔⲆⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃΔⲆᐃⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃⲆⲆⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⲆᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆΔⵠⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠⲆΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔΔᐃⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆⵠⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆΔⲆⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆⵠᐃᐃᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔⲆⵠⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃᐃⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⲆΔΔⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃⵠΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⲆⵠᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⵠⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⲆⵠⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔᐃⲆⵠᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠⲆᐃΔⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠⲆΔᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃΔⲆⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆΔᐃⵠΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠΔᐃΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⲆⵠᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆᐃⵠΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆᐃΔⲆᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔᐃΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆⲆΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆΔⲆⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠⲆᐃΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⵠΔⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃⲆⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆᐃᐃᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔΔᐃⲆⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆᐃΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆΔΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠΔⵠᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⲆᐃⵠⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃⵠⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠⲆᐃⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⵠⲆⲆⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔΔⲆⲆⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠΔᐃⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃᐃᐃΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃⵠⲆΔⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆⲆⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃΔⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃΔᐃΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆⵠⵠⵠⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔᐃΔᐃΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⵠⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃⵠΔᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔΔΔⲆⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⲆⵠᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃΔⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔΔᐃⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⲆⵠⲆⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆⵠⵠΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠΔⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆᐃⲆⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃΔΔΔΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆΔⵠΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃⵠΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆⵠΔⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃⵠⲆᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔᐃⵠΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃᐃᐃΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆΔⲆⲆΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆⲆᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆΔⵠⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔΔⵠᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔᐃᐃⵠⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠⲆᐃᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⲆΔⲆⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⲆᐃᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔⵠᐃⵠⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃᐃⲆⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃᐃⲆⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃΔΔΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔⲆᐃⲆⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⲆⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃᐃΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆΔΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃᐃⲆⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆⲆⵠᐃΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠΔⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆⵠⵠΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⲆⵠⲆⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠΔΔⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃᐃᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆΔⲆᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠⵠⵠΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠΔᐃⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠⵠᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠⲆΔΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆᐃⵠⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃⵠᐃⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠᐃⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠᐃΔⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⵠⵠⲆⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⵠⵠⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⲆΔΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃΔΔⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⲆⵠⵠΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔⵠⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⲆΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⵠΔᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃΔⲆΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃⲆΔᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆᐃΔⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔΔΔᐃΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⵠⵠᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃΔⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔᐃᐃⲆⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔⵠⲆᐃΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⵠⵠⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⲆΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠᐃᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠΔᐃΔᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃᐃΔⵠΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "aloner",
        name: "Machine Mask"
      }, {
        id: 29,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃᐃⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠΔΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⵠΔⵠᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃᐃⲆⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆᐃⲆⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆᐃⲆᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠΔⵠᐃᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃⵠⵠᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔΔⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⵠⵠⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⵠⵠⲆΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃᐃⲆⲆⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠᐃⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃΔΔⲆᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔΔⵠᐃⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⲆⵠⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⵠⵠⵠΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃΔᐃⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃΔⵠΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃⵠⵠΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃᐃᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆⵠⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠᐃΔΔᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆⵠΔⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠⲆΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆᐃΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔⵠⵠΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃᐃⵠⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆⲆᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆᐃΔᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠᐃⲆⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔᐃᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠΔᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆᐃⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔΔⵠΔᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔⵠⲆⲆⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⵠΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⲆΔⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆΔⵠᐃⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆᐃⵠⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃⵠΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆΔᐃⵠᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠⲆΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆⲆᐃⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃΔᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃⵠⲆⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠⲆⵠΔⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⲆΔⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠⲆΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠⲆⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃⵠᐃⲆᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠΔⵠⲆⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆΔᐃᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆΔⲆⵠⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔⲆⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔⲆᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠΔⲆⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠⲆⲆᐃᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠΔⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔⵠⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔᐃⵠᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔᐃᐃᐃⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆᐃⵠⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⲆΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⲆⵠΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠⲆⲆⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃⲆⲆᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃΔΔᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃᐃᐃⵠⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆΔᐃΔᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔᐃⲆᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠⲆᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃⵠⲆⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠΔᐃΔᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⵠⵠⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆᐃⲆΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆΔⵠΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆⵠΔᐃⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆⲆΔⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠᐃⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⵠΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃᐃΔⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⲆΔⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠᐃⲆⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆΔΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⲆΔⵠΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⲆⵠⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃΔⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔᐃΔᐃᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⵠⵠⵠᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⲆΔΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆΔⵠΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔΔⲆⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆⲆΔΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔΔᐃᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆⵠⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⵠᐃᐃⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃΔⵠⲆᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔΔΔⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⲆΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠⵠⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃᐃⵠᐃⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆⲆⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⵠⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆⵠⲆⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠⵠⲆᐃΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔⵠᐃᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔΔⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔΔⵠⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔⲆΔⲆᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆᐃⵠΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⵠᐃᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃΔᐃΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃΔⲆΔⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔᐃⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔΔᐃⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⵠΔΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⲆΔΔΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃΔᐃⲆⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⵠⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⲆⵠⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠⲆⲆⲆΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⵠᐃΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔᐃⲆⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆⵠⵠᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠΔΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠⵠΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠᐃΔᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆΔΔΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠΔᐃᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⲆⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⵠⵠⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠΔⵠΔᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔΔᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔⲆΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃⲆᐃⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠⵠΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠΔΔⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⵠᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠᐃⵠᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃΔⵠΔⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆᐃⵠⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "aloner",
        name: "Axolotl"
      }, {
        id: 25,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠᐃⵠΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔⵠⲆΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆᐃᐃΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.Ⲇᐃⵠⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆΔᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⲆΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔᐃⲆⲆⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠⲆΔⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠᐃⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔᐃΔⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⲆⲆⲆΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃⲆᐃᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆᐃⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆΔⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔⵠⲆᐃᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃⵠⲆⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠⵠᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆⵠᐃᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⵠⲆⲆΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃᐃⲆΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔᐃᐃᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆΔΔΔᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆᐃΔΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔᐃⵠⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆᐃⵠᐃⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆΔⵠᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⲆⵠΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠΔⵠΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⲆⲆᐃᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔⵠΔΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⲆⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃΔⲆⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆⲆΔⵠᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔΔⲆⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃᐃⲆᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔΔⵠΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆⵠᐃᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆΔΔⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃΔⲆΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⵠⲆΔᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆᐃᐃⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⵠⵠᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔⵠᐃⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⲆᐃⵠᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔΔᐃⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆⲆⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⵠᐃᐃΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃᐃⵠΔⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⲆᐃᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⲆⵠᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆΔΔⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆⲆᐃᐃΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⵠΔΔᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⵠⵠΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⵠⲆⵠⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃⲆΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆⵠΔⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠⵠⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃⲆΔᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃⵠΔⵠⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⵠᐃΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⲆᐃΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⲆᐃᐃᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠᐃⵠᐃΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔⵠⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃᐃᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔᐃⲆᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃΔΔΔⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆⲆⲆⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⲆΔⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⵠⵠᐃᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆᐃⵠⵠΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃΔᐃⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔⵠΔⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆⲆΔᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠΔΔΔΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃⲆⵠⲆⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⲆᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃᐃΔΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔⲆΔΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⵠΔΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⲆΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆᐃⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆⵠⵠⵠⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆⵠᐃⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⲆᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔᐃᐃΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔᐃⵠⵠⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠᐃᐃⵠᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆᐃΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆᐃΔⲆΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃΔᐃᐃᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔΔᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⵠⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⲆⲆⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠⲆⲆᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⵠΔⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃΔᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆᐃⵠΔⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔⲆᐃⲆⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠΔⵠⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃⵠⲆᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⲆΔᐃᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃⲆⲆᐃⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆⵠⲆⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆᐃⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃΔⲆⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔⲆΔⵠⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠΔⵠⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆΔⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆᐃⵠΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆΔⲆⲆⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃⵠᐃⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆⵠΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃⲆΔⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠᐃΔΔⵠⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆᐃΔᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ⵠΔⲆ: Ⲇⵠ.Ⲇᐃⵠᐃⵠᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⵠΔᐃⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠⲆⵠⵠⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⲆΔᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: Ⲇ[Vn],
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠⲆΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⲆΔⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆΔᐃⵠΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⲆⵠΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔΔᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔΔΔΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆΔΔᐃⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆᐃⲆⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆⵠΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔΔᐃΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆᐃᐃΔᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃᐃⵠⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆᐃΔⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔᐃⲆⲆΔⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔⵠΔⵠᐃⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⲆᐃΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Water skin"
      }, {
        id: 42,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⵠᐃᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔΔⵠⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠΔⵠⲆᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃΔᐃⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⵠⵠⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⵠΔⵠᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⵠᐃΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔⲆⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆⲆⵠᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⲆΔⲆⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⵠΔΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠⵠᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆᐃⵠⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔⲆⵠΔᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆᐃΔΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⵠⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⵠΔⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔᐃⵠᐃΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃΔⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔᐃΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆⲆⲆⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.Δⵠⵠᐃᐃⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃⲆⵠⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃᐃᐃⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⵠⲆᐃⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔⵠⵠⵠᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠᐃⲆᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⵠᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔΔⲆⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔᐃⲆⲆⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆΔⵠⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆⲆⲆⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔᐃᐃⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃⵠᐃᐃᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃᐃΔⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆΔΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔⵠⵠⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃⲆⲆΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆⵠⵠᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⵠᐃⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠᐃᐃⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠⲆᐃⵠⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆⲆᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆᐃⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠᐃΔΔⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃᐃⵠᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⵠⲆⵠⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃᐃᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃᐃⵠᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔᐃⲆΔⲆᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔΔΔⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔᐃⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠΔⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔΔⵠΔΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⵠⲆⲆΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⲆᐃⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃΔΔⵠᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃᐃⲆΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃᐃⲆΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⲆⵠᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆⵠⲆⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔⵠΔΔⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔΔⲆΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠᐃΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆᐃΔᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆᐃⲆΔⲆΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃⵠⵠΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⲆⲆᐃⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠΔⲆᐃⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔⵠⵠⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠᐃᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆᐃⲆⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃᐃᐃⲆⵠⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⵠΔᐃⲆⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠΔᐃⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆⵠⲆΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆⵠⲆᐃᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔᐃⵠⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Momo"
      }, {
        id: 95,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔⲆᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃⲆⲆⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠⵠⵠⲆᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃΔⲆΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⲆΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆᐃⵠΔⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃΔᐃᐃΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆⲆᐃᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆΔᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⵠᐃΔⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠⲆᐃᐃⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⵠⵠⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⵠⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃⵠΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔᐃⲆΔⵠΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⲆⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠⲆΔⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔᐃΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⲆᐃⵠᐃΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃΔⲆⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃⵠΔΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔΔⲆΔΔᐃⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⲆⵠᐃᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔⲆⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃⲆⵠⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⲆⲆΔⲆᐃΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠⲆΔΔⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔΔᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆⲆᐃⲆⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠΔⵠᐃⲆΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⵠΔΔⵠⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠᐃᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⲆΔⵠⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆΔⵠᐃΔΔΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔΔΔΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔⵠᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠⵠᐃⵠⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⲆΔⵠⵠΔ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠⲆⲆⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⲆᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⵠΔⲆⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃΔΔΔⲆΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔᐃⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⲆⵠᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆᐃΔⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⵠⲆⵠᐃⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆΔⲆᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⵠⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆΔⵠΔΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆᐃⵠᐃⵠΔⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃᐃΔⵠΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⵠⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆᐃΔᐃΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⲆⲆⵠⵠⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔᐃⵠⲆⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃᐃᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆᐃᐃⲆΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠᐃⵠⵠᐃΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃⲆΔᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆΔⲆΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⵠⲆⲆᐃⲆ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⵠⵠᐃΔΔⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔΔⵠⲆᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃⵠⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃⲆⵠⵠΔ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠᐃΔΔⲆⵠ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔΔⲆᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⵠⲆᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⵠΔⲆⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ᐃⲆΔⵠΔΔᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆΔⲆⲆⵠⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Lava Starver"
      }, {
        id: 48,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⲆⵠⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠΔᐃΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆⵠᐃΔΔⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆᐃⵠⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ΔΔⲆΔΔⲆΔ,
        ᐃΔᐃ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆⲆᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃΔⵠⲆᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⵠⲆⵠΔⵠᐃ,
        ⵠⵠΔᐃ: Ⲇⵠ.ΔⲆᐃⲆᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ΔΔⲆΔΔⲆΔ,
        ᐃΔᐃ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃΔΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆⵠΔΔⵠ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ΔⲆᐃΔⲆⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ⲆⵠΔᐃⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ΔΔⲆΔΔⲆΔ,
        ᐃΔᐃ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃΔⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔⵠⵠΔᐃ,
        ⵠⲆᐃⵠ: Ⲇⵠ.ⲆⵠⲆⲆⲆⲆⲆ,
        ⵠⵠΔᐃ: Ⲇⵠ.ᐃΔⲆⲆΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ΔΔⲆΔΔⲆΔ,
        ᐃΔᐃ: "OmarJr13",
        name: "Blob Skin"
      }],
      ⵠⲆᐃᐃ: [{
        id: 0,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔⲆⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Bag 1"
      }, {
        id: Oq,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃΔⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⲆⵠᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆⲆⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⲆᐃᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bag 2"
      }, {
        id: yr,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃᐃᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃᐃΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃⵠⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bag 4"
      }, {
        id: Fk,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃᐃⲆΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔᐃΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⲆᐃΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔᐃⵠⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: hh,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆᐃΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆΔⲆⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆᐃΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠΔΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⵠᐃⵠᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆⲆΔᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆⵠΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃᐃⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⲆⲆΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆΔⵠⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⵠᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⵠⵠⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠΔΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆᐃⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⵠΔⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⵠⵠⵠⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Winter Bag"
      }, {
        id: Cs,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⵠΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⵠΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⲆⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔⵠⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⵠᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⵠᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔΔⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃΔⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃΔΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⵠᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃⲆⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆⲆⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔⲆⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 13,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⲆΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆⵠᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆΔᐃΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⵠΔⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⲆΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆΔⵠⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃⵠΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔⲆⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⵠⲆᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆᐃΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠᐃΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆᐃⵠΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆΔΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⵠⲆᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔΔⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆⲆⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⲆᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⵠⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃΔⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔᐃΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃΔᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⲆᐃᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃⲆᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆΔⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃⲆⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔΔⲆⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 14,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠⵠⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃᐃⵠⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: sg,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃᐃⲆΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⵠⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: gk,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃⲆⲆᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔᐃᐃⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: vg,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃⵠⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠΔΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⵠΔⵠᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔᐃᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⵠⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠᐃᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔⵠᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⵠⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠΔᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆΔᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠΔᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔΔⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⵠᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃΔᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔⲆᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠⲆⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔⲆᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⲆΔⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 48,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃⲆⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⵠᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠⲆⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃⲆⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆᐃⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⲆΔΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠⵠΔⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔᐃᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠΔⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠΔⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆΔⵠᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆⵠⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⵠⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠⲆᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⲆᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠΔΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆΔᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠΔᐃⵠⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⵠΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠΔΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠΔᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃΔΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔⲆᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 31,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆᐃᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠᐃᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: ws,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔΔΔⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⵠᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃΔⵠᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔᐃⵠⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⲆⵠⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆᐃⲆⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⵠⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔⵠᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠΔᐃΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆΔⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆΔⵠⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔⵠⲆⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆᐃᐃᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆⲆΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔΔⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⵠⲆΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔⲆⲆⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Engineer Bag"
      }],
      Δⵠᐃᐃⵠ: [{
        id: zl,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⲆⲆⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⵠᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⲆΔⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆᐃⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔⲆᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⲆΔⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: ig,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⲆⵠⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔᐃΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: $i,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠⲆΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆΔΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: Qr,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⲆΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⵠΔⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: Xk,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠⲆΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⲆⲆⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box"
      }, {
        id: at,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆᐃⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃᐃⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆΔⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⵠⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔΔᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠΔⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆⲆⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃⲆⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆᐃᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⵠⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠᐃΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆⵠΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠᐃⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃⲆᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⲆⵠᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃΔⵠⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆⲆᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆΔⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆᐃᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠⵠⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃΔᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 19,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⲆⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆⵠⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Beehive"
      }, {
        id: th,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠΔᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆΔᐃⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃⵠⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⲆⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⲆⵠΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆᐃΔⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃⲆⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃⲆⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⲆᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆΔⲆΔⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⲆᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⵠⵠᐃⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Communist",
        name: "Glass Crate"
      }, {
        id: 16,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆΔⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆⵠⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔᐃⲆⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠΔⲆⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠΔⲆΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆΔⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⲆΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⲆᐃⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⲆⲆⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠΔⵠΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠⵠΔⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃᐃΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃⲆⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠᐃᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆⵠᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆᐃⲆⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 22,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⲆⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔⵠᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: tl,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆⲆⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆᐃᐃⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔⲆⲆⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⲆᐃᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆᐃⵠⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆᐃⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔΔᐃⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃΔⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⲆⵠⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃⵠⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆⵠⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆΔⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆᐃᐃΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃⵠΔⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⵠᐃᐃᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔΔⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆⲆⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 45,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔᐃⵠΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⵠᐃᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆᐃΔᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⵠᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Winter Box"
      }, {
        id: Hh,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔᐃᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⲆΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆⲆΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⵠⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⲆⵠΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃᐃⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃΔⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔᐃⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆⲆΔᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠⵠⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆⲆⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔᐃⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔⲆⵠⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⵠᐃⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃᐃᐃⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⲆᐃⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆΔΔΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔᐃΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆᐃⵠΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃⵠⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆᐃᐃⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃΔᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⲆⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠⵠⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔⵠΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆᐃΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⲆΔⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠᐃᐃΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠᐃᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆΔⵠΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃⲆΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆΔⲆΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃΔΔⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆⵠᐃΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔᐃⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⲆⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠⲆⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃΔᐃⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠΔⵠΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠⲆᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⲆⲆᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠΔⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃΔΔᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆⵠⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃᐃΔⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠⵠΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃⲆⲆΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 70,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⲆᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠⲆΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 71,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⵠᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠᐃⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Dragon Box"
      }],
      ᐃⵠΔΔⲆ: [{
        id: 0,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⲆⵠᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠⲆΔⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⲆΔⵠΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆΔⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Book 2"
      }, {
        id: lr,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆᐃΔⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃΔⲆΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃᐃᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆᐃᐃᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Book 4"
      }, {
        id: eg,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃΔⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠΔⵠΔᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃᐃᐃΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔᐃⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: Eg,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⵠⵠᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⲆΔᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠΔⵠΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⵠⲆᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: Ys,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃⵠⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃᐃᐃΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠΔᐃⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⵠΔⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⲆΔᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔᐃᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Communist",
        name: "Stone Tablet"
      }, {
        id: Th,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃⲆⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⲆⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⲆⵠΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⲆⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Gold Book"
      }, {
        id: _o,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃⲆⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔᐃΔⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: Xh,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔⲆΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⵠᐃⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃᐃⲆΔⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔΔⲆⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⲆⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆΔⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔⵠΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆⲆⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠᐃΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⲆⵠⲆⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠΔⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⲆⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: dn,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔᐃΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Diamond Book"
      }, {
        id: Lt,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃΔⲆᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆΔΔⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⲆⲆⵠΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆᐃᐃⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃⲆⵠⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃⲆⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⲆΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃᐃⵠⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔᐃᐃᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔΔΔⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃΔΔⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔΔᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: Us,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆΔΔΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⵠⵠⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⲆⵠᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃⵠⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⲆⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⵠⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔᐃⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃΔⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔᐃⵠᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠⲆΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃΔΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆΔⲆᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⵠΔⲆΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔᐃᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆΔᐃᐃΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 33,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔⲆΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⲆᐃΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔⲆΔⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆᐃⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Autumn Book"
      }, {
        id: Wh,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠᐃᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃⲆⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⵠⲆᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠΔⲆⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠᐃΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆΔᐃΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Lava Book 2"
      }, {
        id: so,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃᐃᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃᐃⲆⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠΔΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⲆⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆΔΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠᐃᐃΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⲆΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔᐃⵠᐃᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃⲆΔᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⵠⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "aloner",
        name: "Mystery Book"
      }],
      ΔⲆⵠⲆⵠ: [{
        id: 0,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠⵠⵠⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔᐃⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆΔΔΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⲆΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠΔⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Heart"
      }, {
        id: Oq,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃⵠΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠᐃᐃⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⵠⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⲆᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Flower 1"
      }, {
        id: Gs,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃⵠΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⲆΔᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Bow 1"
      }, {
        id: qq,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⲆᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃΔᐃⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bandage 2"
      }, {
        id: Ar,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔⲆᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠᐃⵠᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃⲆᐃⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠⵠⲆΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⲆⵠΔⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⵠᐃᐃⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⲆⵠΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠΔΔᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃᐃᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆΔⵠΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃᐃᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆᐃᐃΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆΔΔΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠⲆΔⵠⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ⵠᐃⵠⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: Ej,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⲆⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⵠΔⵠΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: Ra,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⲆⲆᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆΔᐃⵠᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Bow 2"
      }, {
        id: nn,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆᐃΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⵠᐃⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃⲆᐃΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆΔᐃᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆⵠᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⵠⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠⲆᐃⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Clown nose"
      }, {
        id: Fl,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃᐃⵠⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃᐃⵠⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃΔᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⵠⵠᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃⵠΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠⲆΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠᐃΔⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔΔⲆᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃᐃᐃⵠⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⵠΔⲆⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠΔⲆᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃⲆᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⵠⲆⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⵠΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠⵠⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆΔⵠΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠⲆ,
        ᐃΔᐃ: "Ant",
        name: "Hero Mask"
      }, {
        id: $q,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⲆⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠᐃᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⲆⵠⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⲆⵠΔᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆⲆᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔⲆⵠⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃⵠⲆᐃⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: Us,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠᐃⲆΔⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠΔᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔᐃΔⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠⵠⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠᐃⲆⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⲆᐃⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠⵠᐃⲆᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔΔᐃᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆΔⵠᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃᐃᐃⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ⵠΔⲆ: Ⲇⵠ.ΔΔⵠⵠⵠᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⲆⲆⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃΔᐃᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃᐃΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠΔᐃΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃᐃⵠⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⲆⵠⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔⵠⵠⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆⵠᐃ,
        ᐃΔᐃ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 9,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠΔᐃᐃⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⲆΔⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆᐃᐃΔⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔΔᐃⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆᐃΔⵠᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⵠᐃⲆⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: ab,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔΔⲆΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆᐃΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃⵠⲆΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃⲆⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆΔⵠᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔⵠΔΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔⵠᐃⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⲆΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ⵠΔⲆ: Ⲇⵠ.ΔⵠⵠΔᐃᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔⲆΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ⵠΔⲆ: Ⲇⵠ.ΔⲆⵠΔⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⵠⵠⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔⲆⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃⵠⲆⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⲆⵠⲆᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔΔⵠΔⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ⵠΔⲆ: Ⲇⵠ.ΔΔΔΔⵠᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔⵠᐃⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⲆΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔᐃᐃⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔⵠᐃΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃΔⵠⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠⵠⵠΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⵠⵠᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆⵠΔⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆΔⲆᐃᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔΔᐃΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⲆⲆᐃⵠⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆΔΔⲆⵠᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆⲆᐃⵠᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⵠⲆⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔΔΔⵠⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⲆⲆᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⵠΔⵠⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔΔΔᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠᐃᐃⲆⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃᐃΔᐃΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆⲆⲆΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠΔΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔⵠⲆⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆᐃΔⲆⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔᐃΔΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠΔⵠⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔⵠⵠⲆⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⲆΔⵠ,
        ᐃΔᐃ: "aloner",
        name: "Blood"
      }, {
        id: 27,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃⵠᐃⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠΔΔΔΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔΔⵠⵠᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔᐃⵠΔⵠⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ⵠΔⲆ: Ⲇⵠ.ⵠᐃΔΔΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃᐃⲆⲆⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⲆⵠⲆΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆᐃⲆⲆᐃΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⵠᐃⵠⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠᐃΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔⵠⵠΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⲆᐃⲆᐃⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃⲆΔⵠΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔΔΔᐃⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃΔᐃΔⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔΔᐃΔⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.Ⲇⵠⵠⵠ,
        ᐃΔᐃ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 60,
        ⵠΔⲆ: Ⲇⵠ.ΔΔᐃⵠᐃᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔᐃⵠⵠⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠΔᐃΔⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔⲆΔⵠⵠΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ⵠΔⲆ: Ⲇⵠ.ⲆΔᐃᐃΔΔᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆᐃΔⲆᐃⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ⵠΔⲆ: Ⲇⵠ.ⵠⵠᐃᐃΔΔⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔⲆⵠΔΔᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔΔᐃⵠⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠᐃΔᐃΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ⵠΔⲆ: Ⲇⵠ.ⲆᐃⵠΔⲆᐃⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃⲆⲆΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠᐃᐃⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃⵠⵠⲆⵠⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⲆⲆᐃⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ΔᐃⵠⵠⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ⵠΔⲆ: Ⲇⵠ.ⲆⲆⵠᐃΔᐃⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆᐃᐃᐃⲆΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃⵠᐃΔ,
        ᐃΔᐃ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 45,
        ⵠΔⲆ: Ⲇⵠ.ᐃΔΔⵠⲆᐃᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆᐃᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 5",
        level: q
      }, {
        id: 46,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠⵠⲆⲆⵠ,
        ⵠᐃᐃ: Ⲇⵠ.ΔⲆΔⵠΔⵠⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆΔⵠⵠⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃΔΔⵠΔᐃΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 15",
        level: $q
      }, {
        id: 48,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⵠⲆΔⲆᐃ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆΔΔᐃⵠΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 20",
        level: vi
      }, {
        id: 49,
        ⵠΔⲆ: Ⲇⵠ.ⵠΔⵠⵠᐃⵠΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⲆᐃᐃᐃⵠᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠⲆᐃᐃᐃΔ,
        ⵠᐃᐃ: Ⲇⵠ.ΔΔⵠΔⵠΔⲆ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ⵠΔⲆ: Ⲇⵠ.ᐃⵠⵠⵠΔΔⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠⵠⲆᐃⵠΔΔ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ⵠΔⲆ: Ⲇⵠ.ᐃⲆΔⵠⲆΔΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠΔΔᐃΔⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ⵠΔⲆ: Ⲇⵠ.ⵠⲆᐃΔᐃⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⲆⵠⲆΔⲆᐃ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ⵠΔⲆ: Ⲇⵠ.ΔᐃᐃΔΔⲆⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ⲆⵠⵠⵠⲆⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ⵠΔⲆ: Ⲇⵠ.ⲆⵠᐃΔⵠⵠⲆ,
        ⵠᐃᐃ: Ⲇⵠ.ᐃᐃΔᐃᐃⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ⵠΔⲆ: Ⲇⵠ.ᐃᐃⲆΔᐃⲆΔ,
        ⵠᐃᐃ: Ⲇⵠ.ⵠΔᐃⵠΔⲆⵠ,
        ΔⲆⲆ: ᐃΔⵠ.ᐃΔⵠᐃΔ,
        ᐃΔᐃ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    lw.ΔⵠⲆΔⵠᐃⲆ = ⲆⵠⵠΔΔᐃⲆ(ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ, 21);
    lw.ⵠⲆⵠⲆⵠⲆᐃ = ⲆⵠⵠΔΔᐃⲆ(ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ, 20);
    ΔΔ[Xr.ᐃⲆΔᐃΔᐃⲆ] = [];
    ΔΔ[Xr.ΔᐃΔΔΔ] = [];
    ΔΔ[Xr.Δⵠᐃᐃⵠ] = [];
    ΔΔ[Xr.ᐃⵠΔΔⲆ] = [];
    ΔΔ[Xr.ⵠⲆᐃᐃ] = [];
    ΔΔ[Xr.ΔⲆⵠⲆⵠ] = [];
    for (var a = 0; a < ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ.length; a++) {
      ΔΔ[Xr.ᐃⲆΔᐃΔᐃⲆ][a] = [ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[a].ⵠΔⲆ, ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[a].ⵠᐃᐃ];
      ΔΔ[Xr.ΔᐃΔΔΔ][a] = [ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[a].ⵠⲆᐃⵠ, ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[a].ⵠⵠΔᐃ];
    }
    for (a = 0; a < ΔⲆⵠⲆ.ᐃⵠΔΔⲆ.length; a++) {
      ΔΔ[Xr.ᐃⵠΔΔⲆ][a] = [ΔⲆⵠⲆ.ᐃⵠΔΔⲆ[a].ⵠΔⲆ, ΔⲆⵠⲆ.ᐃⵠΔΔⲆ[a].ⵠᐃᐃ];
    }
    for (a = 0; ΔⲆⵠⲆ.Δⵠᐃᐃⵠ.length > a; a++) {
      ΔΔ[Xr.Δⵠᐃᐃⵠ][a] = [ΔⲆⵠⲆ.Δⵠᐃᐃⵠ[a].ⵠΔⲆ, ΔⲆⵠⲆ.Δⵠᐃᐃⵠ[a].ⵠᐃᐃ];
    }
    for (a = Da; ΔⲆⵠⲆ.ⵠⲆᐃᐃ.length > a; a++) {
      ΔΔ[Xr.ⵠⲆᐃᐃ][a] = [ΔⲆⵠⲆ.ⵠⲆᐃᐃ[a].ⵠΔⲆ, ΔⲆⵠⲆ.ⵠⲆᐃᐃ[a].ⵠᐃᐃ];
    }
    for (a = ps; ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ.length > a; a++) {
      ΔΔ[Xr.ΔⲆⵠⲆⵠ][a] = [ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ[a].ⵠΔⲆ, ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ[a].ⵠᐃᐃ];
    }
  };
  const mb = wr;
  const pb = ta;
  function Cb(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var h = Ml * b;
    var a = e.measureText(c).width + h * ss;
    d.width = a;
    d.height = f;
    wb(e, 0, 0, a, f, b * 10);
    e.globalAlpha = 0.5;
    cb(e, "#000");
    e.globalAlpha = Ol;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, h, f / bs);
    return d;
  }
  function Tb(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var g = [{
      x: d,
      y: Pg
    }];
    var i = [];
    for (var a = 1; a < c; a++) {
      g.push({
        x: d * Math.sin(a * f),
        y: Math.cos(a * f) * d
      });
      var j = g.length;
      i.push(ᐃⵠΔⲆ.ᐃⵠΔᐃⲆⲆⵠ(g[j - 2], g[j - fl]));
    }
    i.push(ᐃⵠΔⲆ.ᐃⵠΔᐃⲆⲆⵠ(g[g.length - yg], g[0]));
    var k = i[i.length - Ol];
    b.moveTo(k.x, k.y);
    for (a = 0; c > a; a++) {
      b.arcTo(g[a].x, g[a].y, i[a].x, i[a].y, e);
    }
    b.closePath();
  }
  function fb(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * jk);
  }
  function zb(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, ps, e * (Math.PI * pq));
  }
  function yb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 120;
    var j = c * 110;
    var k = i / 2;
    var a = j / 2;
    var m = Mg * c;
    var h = c * 112;
    var l = c * 82;
    var g = h / ih;
    var n = l / Zg;
    var b = c * 4;
    e.width = i;
    e.height = j;
    f.globalAlpha = Ol;
    f.translate(k, a);
    wb(f, -g, -n, h, l, m);
    cb(f, d, d, b);
    return e;
  }
  function wb(a, b, c, d, e, f) {
    if (ss * f > d) {
      f = d / xj;
    }
    if (f * 2 > e) {
      f = e / bs;
    }
    if (f < In) {
      f = 0;
    }
    a.beginPath();
    a.moveTo(b + f, c);
    a.arcTo(b + d, c, b + d, c + e, f);
    a.arcTo(b + d, c + e, b, c + e, f);
    a.arcTo(b, c + e, b, c, f);
    a.arcTo(b, c, b + d, c, f);
    a.closePath();
  }
  function Pb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / Yl, -b.height / ss);
    return c;
  }
  const Ab = yl;
  const kb = qs;
  const xb = nn;
  const Jb = fn;
  function Mb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(Lr, a * 10);
    e.globalAlpha = b ? 0.5 : ie;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, nl * a, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * Nl, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    cb(e, c[0]);
    e.translate(Bg, -Bo * a);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, Lg * a, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(rs * a, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    cb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    cb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    cb(e, c[3], c[4], a * 4);
    return d;
  }
  function Bb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    fb(e, a * 26, a * 26, a * 9);
    cb(e, c[Lr]);
    fb(e, a * 56, a * 36, a * 9);
    cb(e, c[Xn]);
    fb(e, a * 40, a * 50, a * se);
    cb(e, c[Mt]);
    e.globalAlpha = js;
    fb(e, a * 26, a * 26, a * 5);
    cb(e, c[0]);
    fb(e, a * 56, a * 36, a * 5);
    cb(e, c[1]);
    fb(e, a * 40, a * 50, a * Wl);
    cb(e, c[lr]);
    return d;
  }
  const Db = wj;
  function Ib(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    wb(e, a * -8.5, a * -63, a * Sg, a * 127, a * lb);
    e.restore();
    cb(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    wb(e, a * -8, a * -63, a * ck, a * 126, yg * a);
    e.restore();
    cb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    wb(e, a * -84.5, a * -25.5, a * 169, a * 51, Gs * a);
    e.restore();
    cb(e, c[2], c[Ug], nk * a);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    wb(e, a * -85.5, a * -24, a * 169, a * 48, a * Wl);
    e.restore();
    cb(e, c[Wg], c[za], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    wb(e, a * -84, a * -23.5, a * 169, a * 47, a * q);
    e.restore();
    cb(e, c[Jt], c[1], a * Ss);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    cb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    cb(e, c[Ol]);
    return d;
  }
  function Eb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    wb(e, a * -8, a * -67, a * 16, a * 134, Xn * a);
    e.restore();
    cb(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    wb(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    cb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    wb(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    cb(e, c[xq], c[1], Cl * a);
    e.save();
    e.translate(a * 123, a * 179.5);
    wb(e, a * -83, a * -24.5, a * 166, a * 49, ks * a);
    e.restore();
    cb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    wb(e, a * -82.5, a * -24.5, a * 165, a * 49, a * Ps);
    e.restore();
    cb(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    cb(e, c[1]);
    return d;
  }
  function Sb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    wb(e, -He * a, a * -70.5, a * ys, a * 141, a * 1);
    e.restore();
    cb(e, c[Db]);
    e.save();
    e.translate(a * 69.5, a * 110);
    wb(e, a * -8.5, a * -71, a * Un, a * 143, js * a);
    e.restore();
    cb(e, c[Rq]);
    e.save();
    e.translate(a * 123.5, a * 181);
    wb(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    cb(e, c[Zg], c[yg], Zl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, Yh * a, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    cb(e, c[lr], c[za], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    cb(e, c[3], c[1], Ro * a);
    return d;
  }
  function Qb(a, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = a * 185;
    f.height = a * 240;
    g.globalAlpha = 0.5;
    g.translate(0, a * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 44, a * 137);
    g.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    g.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    g.closePath();
    cb(g, d[Db]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 53, a * 181);
    g.bezierCurveTo(a * 30, a * 164, a * b, a * 150, a * Hg, a * 136);
    g.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    g.closePath();
    cb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 63, a * 208);
    g.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    g.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    g.closePath();
    cb(g, d[ya]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 130, a * 170);
    g.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    g.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    g.closePath();
    cb(g, d[zl]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 39, a * 140);
    g.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    g.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    g.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    g.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    g.closePath();
    cb(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, -jn * a);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 44, a * 137);
    g.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    g.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    g.closePath();
    cb(g, d[hs], d[2], a * Fr);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 53, a * 181);
    g.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    g.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    g.closePath();
    cb(g, d[yg], d[2], a * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 63, a * 208);
    g.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    g.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    g.closePath();
    cb(g, d[1], d[lr], eh * a);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 130, a * 170);
    g.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    g.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    g.closePath();
    cb(g, d[js], d[2], a * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 39, a * 140);
    g.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    g.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    g.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    g.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    g.closePath();
    cb(g, d[1], d[2], Dt * a);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 59, a * 99);
    g.bezierCurveTo(a * 71, a * 68, a * 81, a * 68, a * 94, a * 67);
    g.bezierCurveTo(a * 105, a * 66, a * 119, a * 75, a * 123, a * 96);
    g.bezierCurveTo(a * 104, a * 91, a * 101, a * 94, a * 94, a * 97);
    g.bezierCurveTo(a * 76, a * 92, a * 73, a * 93, a * 60, a * 99);
    g.closePath();
    cb(g, d[gl], d[2], a * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(a * 47, a * 149);
      g.bezierCurveTo(a * 43, a * 140, a * 48, a * 130, a * 59, a * 127);
      g.bezierCurveTo(a * 77, a * 126, a * 90, a * 131, a * 131, a * 127);
      g.bezierCurveTo(a * 143, a * 130, a * 144, a * 143, a * 132, a * 154);
      g.bezierCurveTo(a * 90, a * 152, a * 90, a * 152, a * 48, a * 150);
      g.closePath();
      cb(g, d[js]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(a * 40, a * 139);
      g.bezierCurveTo(a * 48, a * 113, a * 76, a * 119, a * 91, a * 126);
      g.bezierCurveTo(a * 117, a * 113, a * 135, a * 117, a * 144, a * 134);
      g.bezierCurveTo(a * 144, a * 138, a * 144, a * 138, a * 144, a * 142);
      g.bezierCurveTo(a * 128, a * 124, a * 108, a * 124, a * 91, a * 136);
      g.bezierCurveTo(a * 59, a * 124, a * 50, a * 137, a * 42, a * 148);
      g.closePath();
      cb(g, d[hl], d[2], a * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(a * 41, a * 139);
      g.bezierCurveTo(a * 53, a * 117, a * 69, a * 118, a * 92, a * 127);
      g.bezierCurveTo(a * 124, a * 111, a * 136, a * 121, a * 143, a * 136);
      g.bezierCurveTo(a * 142, a * 144, a * 142, a * 144, a * 141, a * 152);
      g.bezierCurveTo(a * 128, a * 131, a * 113, a * 138, a * 92, a * 145);
      g.bezierCurveTo(a * 57, a * 133, a * 57, a * 147, a * 44, a * 154);
      g.closePath();
      cb(g, d[3], d[2], nb * a);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 90, a * 95);
    g.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    g.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    g.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    g.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    g.closePath();
    cb(g, d[Oq], d[Gl], a * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 90, a * 86);
    g.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    g.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * cg);
    g.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    g.closePath();
    cb(g, d[1], d[3], a * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 92, a * 117);
    g.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    g.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    g.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    g.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    g.closePath();
    cb(g, d[fl], d[3], Ps * a);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 92, a * 175);
    g.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    g.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    g.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    g.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    g.closePath();
    cb(g, d[1], d[nq], a * Vn);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 48, a * 169);
    g.bezierCurveTo(a * 42, a * 187, a * 50, a * 193, a * 59, a * 198);
    g.closePath();
    cb(g, undefined, d[2], a * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 136, a * 171);
    g.bezierCurveTo(a * 139, a * 186, a * 138, a * 191, a * 124, a * 199);
    g.closePath();
    cb(g, undefined, d[2], a * ba);
    fb(g, a * 63, a * 180, a * 15.231546211727817);
    cb(g, d[4]);
    fb(g, a * 121, a * 181, a * 15.652475842498529);
    cb(g, d[qg]);
    fb(g, a * 58, a * 175, a * 5.656854249492381);
    cb(g, d[bs]);
    fb(g, a * 116, a * 175, a * 5.656854249492381);
    cb(g, d[xj]);
    return f;
  }
  function _b(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    cb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * xb, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    cb(d, b[In]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    cb(d, b[Da]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    cb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    cb(d, b[zl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, Pa * a, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    cb(d, b[Zj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * xl);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    cb(d, b[wj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * dh, a * 92, a * 117);
    d.closePath();
    cb(d, b[Kh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    cb(d, b[0]);
    return c;
  }
  function Fb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    fb(e, a * Bt, a * 11, a * J);
    cb(e, c[In]);
    e.globalAlpha = 0.7;
    fb(e, Nl * a, a * pk, a * Ar);
    cb(e, c[Hi]);
    e.globalAlpha = 1;
    fb(e, a * 11, a * Hg, a * 4);
    cb(e, c[In]);
    return d;
  }
  function Rb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * yl);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    wb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * A);
    e.restore();
    cb(e, c[Hi], c[Rs], a * Og);
    e.globalAlpha = Oq;
    e.translate(Hi, a * -vr);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    wb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * xs);
    e.restore();
    cb(e, c[mk], c[Jt], a * ol);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    cb(e, c[Jt], c[3], a * $i);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    cb(e, c[3], c[ks], ol * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    cb(e, c[ta], c[Ya], a * 4);
    fb(e, a * 68, a * 111.29513549804688, a * 15);
    cb(e, c[cq], c[8], Pe * a);
    fb(e, a * 123, a * 111.29510498046875, a * 15);
    cb(e, c[7], c[8], a * 4);
    fb(e, a * 63, a * 106, a * 5);
    cb(e, c[ug]);
    fb(e, a * 118, a * 106, a * 5);
    cb(e, c[rr]);
    return d;
  }
  function Gb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * It);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    wb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    cb(e, c[Pg], c[Lr], a * eh);
    e.globalAlpha = 1;
    e.translate(0, a * -vr);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    wb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    cb(e, c[1], c[2], a * 4);
    e.translate(a * bs, Lr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, to * a, a * 122, a * Mn);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * vg, a * 103, a * pl, a * 86, a * 23, a * 72);
    e.bezierCurveTo(og * a, a * 74, a * 14, a * 78, a * Uk, a * 83);
    e.bezierCurveTo(F * a, a * 65, eb * a, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * ah, a * 39, ah * a, a * 39, a * Uk, a * 36);
    e.bezierCurveTo(a * 16, a * 33, Vg * a, a * 33, a * rl, a * 30);
    e.bezierCurveTo(kh * a, a * 27, Vs * a, a * 27, Sg * a, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * so);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, Qh * a, a * 74, a * 16, a * 106, Vg * a);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    cb(e, c[3], c[$i], Dt * a);
    return d;
  }
  function jb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    wb(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    cb(d, b[In], b[ps], a * ks);
    d.translate(a * dg, mj);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * Mg, a * 122, xl * a);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * on, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, oq * a, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * Tn, a * 39, Mi * a, a * 39, Vh * a, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, hh * a, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, gk * a);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    cb(d, b[0], b[0], a * $i);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    wb(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    cb(d, b[0], b[0], a * 4);
    return c;
  }
  function Lb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 40;
    var i = b * 40;
    e.width = g;
    e.height = i;
    var a = g * b / 2;
    var j = i * b / 2;
    var k = b * 15;
    f.save();
    f.translate(a, j);
    f.globalAlpha = jh;
    fb(f, Pg, 0, k);
    cb(f, d[0]);
    k = Xg * b;
    a = b * 2;
    j = b * js;
    f.translate(a, j);
    f.globalAlpha = js;
    fb(f, ps, 0, k);
    cb(f, d[yg]);
    f.restore();
    return e;
  }
  const Wb = Kg;
  const Ob = I;
  const Nb = dg;
  const qb = ls;
  function Hb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 100;
    var j = c * x;
    var k = i / Nb;
    var a = j / 2;
    e.width = i;
    e.height = j;
    var m = c * 5;
    var h = c * 28;
    var l = m / ss;
    var g = h / Gl;
    f.translate(k, a);
    for (var n = Da; n < 4; n++) {
      wb(f, -l, -g, m, h, c * 2);
      f.rotate(Math.PI / ul);
      cb(f, d);
    }
    f.arc(Rq, Eh, c * kk, 0, Math.PI * Gl);
    cb(f, d);
    f.globalCompositeOperation = "destination-out";
    fb(f, 0, tt, c * 4);
    f.fill();
    return e;
  }
  function Ub(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 32;
    var k = c * 32;
    var a = j / 2;
    var m = k / 2;
    f.width = j;
    f.height = k;
    var h = Fk * c;
    var l = c * 28;
    var g = h / 2;
    var n = l / 2;
    i.translate(c * 0, Lr * c);
    i.translate(a, m);
    if (fl == e) {
      fb(i, 0, Eh, kk * c);
      cb(i, d[2], d[2], c * ea);
      for (var b = Rq; ul > b; b++) {
        wb(i, -g, -n, h, l, c * 2);
        i.rotate(Math.PI / Vn);
        cb(i, d[xq], d[2], c * 4);
      }
    }
    fb(i, tg, Kh, c * 10);
    cb(i, d[0], d[1], c * 1.5);
    for (b = 0; b < 4; b++) {
      wb(i, -g, -n, h, l, c * Zg);
      i.rotate(Math.PI / ul);
      cb(i, d[Da], d[xt], c * 1.5);
    }
    fb(i, Hi, 0, c * gn);
    cb(i, d[0]);
    fb(i, Zj, Zj, c * 4);
    cb(i, d[2], d[1], c * 1.5);
    i.globalCompositeOperation = "destination-out";
    fb(i, wj, 0, ks * c);
    cb(i, d[Zj], d[Xn], c * 2);
    i.globalCompositeOperation = "source-over";
    fb(i, tg, Kh, Pe * c);
    cb(i, undefined, d[Xn], c * dg);
    return f;
  }
  function Yb(a) {
    var b = document.createElement("canvas");
    var c = b.getContext("2d");
    var d = a * 200;
    var e = a * 200;
    b.width = d;
    b.height = e;
    var f = sd(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
    c.drawImage(f, wa, Ab);
    f = nd(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 21, xs);
    f = nd(0.9, Fh, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 38, 28);
    f = nd(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, v, 37);
    f = nd(0.9, _g, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 32, 45);
    return b;
  }
  const Kb = Mn;
  function Vb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * Gs);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    cb(d, b[Kh], b[Hi], a * nj);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    cb(d, b[Eh], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    cb(d, b[0], b[Da], bs * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    cb(d, b[Db], b[Rq], a * Zg);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    cb(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    cb(d, b[fn]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    cb(d, Jo, b[ss], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    cb(d, b[mk], b[Zg], Jb * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    cb(d, b[1], b[Yl], ci * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    cb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    cb(d, b[Wg]);
    fb(d, a * 77, a * 107, a * 6);
    cb(d, b[Nb]);
    fb(d, a * 110, a * 107, a * Ss);
    cb(d, b[Zh]);
    fb(d, a * 75, a * 105, a * 3);
    cb(d, b[4]);
    fb(d, a * 108, a * 105, a * 3);
    cb(d, b[nb]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    cb(d, b[rg]);
    return c;
  }
  function Zb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var k = c * 6;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + k);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    cb(f, d[Db]);
    f.translate(0, -k);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    cb(f, d[Ol], d[Yl], eh);
    var a = c * 155;
    var m = c * 133;
    var h = gn * c;
    var l = c * qo;
    var g = a + -Jb * c;
    var n = m + c * -5;
    f.save();
    f.translate(a, m);
    f.globalAlpha = 1;
    fb(f, tg, 0, h);
    cb(f, d[vt]);
    f.restore();
    f.save();
    f.translate(g, n);
    f.globalAlpha = Ug;
    fb(f, Pg, In, l);
    cb(f, d[4]);
    f.restore();
    f.save();
    f.translate(a + c * 27, m);
    f.globalAlpha = js;
    fb(f, Eh, Rq, h);
    cb(f, d[3]);
    f.restore();
    f.save();
    f.translate(c * 27 + g, n);
    f.globalAlpha = za;
    fb(f, 0, Bg, l);
    cb(f, d[Gi]);
    return e;
  }
  function Xb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var h = b * 55;
    var a = b * br;
    e.width = g;
    e.height = h;
    f.translate(b * -65, b * -55 + a);
    f.globalAlpha = hs;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    cb(f, d[Kh], d[rg], 3);
    f.globalAlpha = yg;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * Yh, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    cb(f, d[2], d[yr], 3);
    return e;
  }
  function $b(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var n = (r = f * 125) / Zh;
    var o = (t = f * 95) / Pn;
    var a = Th * f;
    var p = f * qk;
    var h = f * 112;
    var l = f * 82;
    var g = h / Jt;
    var q = l / 2;
    var b = f * Fr;
    j.width = r;
    j.height = t;
    k.translate(n - f * Al, o + f * 4);
    k.globalAlpha = e ? 0.5 : jh;
    wb(k, -g, -q, h, l, a);
    cb(k, i[0]);
    k.globalAlpha = 1;
    k.translate(0, -p);
    wb(k, -g, -q, h, l, a);
    cb(k, i[xt], i[ih], b);
    var r = f * 55;
    var t = f * 45;
    a = nr;
    k.translate(f * -40, f * -30);
    wb(k, Eh, 0, r, t, a);
    cb(k, i[gl]);
    var u = Hb(f * 0.7, i[Hk]);
    k.drawImage(u, f * 45, f * -25);
    u = Hb(f * 0.7, i[Hk]);
    k.drawImage(u, f * 45, f * 15);
    u = Hb(f * 1.2, i[3]);
    k.drawImage(u, f * 28, f * -30);
    r = f * 15;
    t = f * 70;
    a = f * ll;
    k.translate(f * 78, -Xg * f);
    wb(k, 0, 0, r, t, a);
    cb(k, i[Dt]);
    r = f * 9;
    t = f * 50;
    a = f * 3;
    k.translate(f * -hn, f * Il);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    wb(k, Da, Rs, r, t, a);
    cb(k, i[Eq]);
    k.translate(f * -20, f * 29);
    k.rotate(Math.PI / Fk);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(Lr, 0);
    k.lineTo(0, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    cb(k, null, i[Gs], f * 8);
    return j;
  }
  const Ot = lb;
  const Pt = Eq;
  function Qt(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + pb * a);
    d.globalAlpha = 0.3;
    fb(d, a * 213.5, a * 256.75, a * 75);
    cb(d, b[5]);
    fb(d, a * 213.5, a * 175.75, a * 25);
    cb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = Pl * a;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[nr];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Eg];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * hg;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * Xh;
    d.strokeStyle = b[Gs];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * vg;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[tb];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -Wl);
    d.globalAlpha = 1;
    fb(d, a * 213.5, a * 256.75, a * 75);
    cb(d, b[3]);
    fb(d, a * 213.5, a * 175.75, a * 25);
    cb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = Rk * a;
    d.strokeStyle = b[ci];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = El * a;
    d.strokeStyle = b[I];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * hg;
    d.strokeStyle = b[Hk];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * Ri;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[vt];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = sb * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[mj];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[Bg];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = $l * a;
    d.strokeStyle = b[Da];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * yh;
    d.strokeStyle = b[Db];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * Ml;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    fb(d, a * 213.5, a * 256.75, a * 70);
    cb(d, b[0]);
    fb(d, a * 213.5, a * 175.75, a * Vl);
    cb(d, b[Rq]);
    fb(d, a * 222, a * 166, a * Qr);
    d.fillStyle = b[2];
    d.fill();
    fb(d, a * 205, a * 166, a * M);
    d.fillStyle = b[2];
    d.fill();
    fb(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    fb(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[Og];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    wb(d, a * -22, a * -21, a * 44, a * 42, a * Cl);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    wb(d, a * -15, a * -14.5, a * 30, a * 29, ms * a);
    d.restore();
    d.fillStyle = b[Ug];
    d.fill();
    return c;
  }
  const Rt = vh;
  const St = Ga;
  function Tt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    wb(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    cb(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    wb(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    cb(e, b[2], b[rg], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    wb(e, a * -96.5, a * -20.5, a * 193, a * 41, Da * a);
    e.restore();
    cb(e, b[I], b[fl], a * Zr);
    e.save();
    e.translate(a * 202.5, a * 275);
    wb(e, a * 96.5, a * -21, a * -193, a * 42, a * Rq);
    e.restore();
    cb(e, b[Db], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    wb(e, a * -116, a * -22, a * 232, a * 44, Bo * a);
    e.restore();
    cb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    wb(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    cb(e, b[Tr], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    wb(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    cb(e, b[hl], b[ie], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    wb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    cb(e, b[3], b[Te], La * a);
    e.save();
    e.translate(a * 108.5, a * 210);
    wb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    cb(e, b[gl], b[1], eb * a);
    e.save();
    e.translate(a * 204, a * 121.5);
    wb(e, a * -92, a * -9.5, a * 184, vl * a, a * 10);
    e.restore();
    cb(e, b[3], b[Tr], gg * a);
    e.save();
    e.translate(a * 197, a * 299);
    wb(e, a * 85, a * -rr, a * -170, a * 18, sk * a);
    e.restore();
    cb(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    cb(e, undefined, b[1], eb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    cb(e, undefined, b[za], a * $a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    cb(e, undefined, b[Oq], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    cb(e, undefined, b[1], a * 12);
    if (Kh == c) {
      e.scale(Yg, xq);
      e.translate(a * -at, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      cb(e, b[4], b[4], a * pb);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      cb(e, b[Ks]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      cb(e, b[qo]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      cb(e, b[4], b[eg], a * pl);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      cb(e, undefined, b[0], nl * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      cb(e, undefined, b[Lr], a * 20);
      fb(e, a * 142, a * 221, a * 16.1245154965971);
      cb(e, b[0]);
    }
    return d;
  }
  const Ut = yr;
  function Vt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    Tb(e, ms, a * 54.585977194239184, xt * a);
    e.restore();
    cb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    Tb(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    cb(e, c[yg], c[2], a * Sj);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    Tb(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    cb(e, c[Ot], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    Tb(e, Rg, a * 52.53573932334064, a * yg);
    e.restore();
    cb(e, c[js], c[2], a * eb);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    Tb(e, Na, a * 57.63465889766331, a * 1);
    e.restore();
    cb(e, c[1], c[2], Xi * a);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    Tb(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    cb(e, c[1], c[bs], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    Tb(e, Ss, a * 52.009614495783374, a * 1);
    e.restore();
    cb(e, c[yg], c[bs], Xi * a);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    Tb(e, 6, a * 53.16013544000805, a * ie);
    e.restore();
    cb(e, c[1], c[bs], Sj * a);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Tb(e, 6, a * 50, a * za);
    e.restore();
    cb(e, c[1], c[2], Yr * a);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    Tb(e, 6, a * 54, a * 1);
    e.restore();
    cb(e, c[Ot], c[2], $a * a);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    Tb(e, _l, a * 55.08175741568164, a * 1);
    e.restore();
    cb(e, c[1], c[2], a * Yr);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Tb(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    cb(e, c[1], c[Pn], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    Tb(e, 6, a * 49.49747468305833, Ug * a);
    e.restore();
    cb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    cb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    cb(e, Za, c[Gl], wg * a);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Tb(e, 6, a * 30, _h * a);
    e.restore();
    cb(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Tb(e, 6, a * 30, a * zi);
    e.restore();
    cb(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    Tb(e, Ya, a * 30, a * 15);
    e.restore();
    cb(e, c[vt]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    Tb(e, 6, a * 30, a * 15);
    e.restore();
    cb(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    Tb(e, Ss, a * 30, a * 15);
    e.restore();
    cb(e, c[Wg]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    Tb(e, _l, a * 30, a * 15);
    e.restore();
    cb(e, c[ig]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    Tb(e, 6, a * 30, Cg * a);
    e.restore();
    cb(e, c[Jb]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    Tb(e, 6, a * 30, on * a);
    e.restore();
    cb(e, c[nq]);
    return d;
  }
  function Wt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, Ur * a);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    cb(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    cb(e, c[2], c[1], Wr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    cb(e, Jo, c[1], a * di);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    cb(e, c[hl], c[fs], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    cb(e, c[0], c[ie], a * Bk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, Gh * a, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    cb(e, c[ss], c[1], a * Kq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    cb(e, undefined, c[Ot], Kq * a);
    fb(e, a * 161, a * 201, Dr * a);
    cb(e, c[Gs]);
    fb(e, a * 216, a * 205, a * 8.06225774829855);
    cb(e, c[5]);
    fb(e, a * 216, a * 175, a * 6.708203932499369);
    cb(e, c[Pt]);
    fb(e, a * 271, a * 191, a * 5.0990195135927845);
    cb(e, c[nr]);
    fb(e, a * 206, a * 180, a * 11.180339887498949);
    cb(e, c[Pt]);
    return d;
  }
  function Xt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(z * a, a * q);
    e.globalAlpha = b ? 0.5 : mk;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Tb(e, Ar, a * 42.15447781671598, a * Ds);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = ie;
    e.translate(a * -ta, a * -Xg);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Tb(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    cb(e, c[1], c[2], fs * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Wl, a * Uh);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Tb(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    cb(e, c[Rq]);
    e.globalAlpha = 1;
    e.translate(a * -Pt, a * -pb);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Tb(e, Ar, a * 30.463092423455635, a * te);
    e.restore();
    cb(e, c[3], c[Al], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    fb(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -M, -tb * a);
    fb(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    cb(e, c[Pt], c[6], nj * a);
    return d;
  }
  function Yt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    cb(e, undefined, c[1], a * ss);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    cb(e, undefined, c[rg], a * pq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    cb(e, c[Rq], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    cb(e, c[0], c[fl], a * Mt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    cb(e, c[zl], c[rg], jk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    cb(e, c[Kh], c[ie], a * pq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    cb(e, undefined, c[jh], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    cb(e, Ul, c[1], xq * a);
    return d;
  }
  function Zt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : yg;
    e.translate(a * 5, a * Pt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    cb(e, undefined, c[Kh], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    cb(e, c[Eh]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    cb(e, c[$n]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    cb(e, undefined, c[Bq], Vn * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * Uh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    cb(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-pb * a, -Gs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    cb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    cb(e, Sl, c[Bq], a * Vn);
    e.globalAlpha = b ? 0.5 : lb;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    cb(e, Hs, c[0], a * Ps);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = Te;
    e.translate(a * -5, -q * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    cb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    cb(e, Hq, c[nk], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * pb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    cb(e, undefined, c[0], a * Og);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    cb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    cb(e, undefined, c[U], fs * a);
    return d;
  }
  const $t = St;
  function au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Tb(e, 7, a * 9.848857801796104, a * ll);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = fl;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Tb(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    cb(e, c[8], c[9], Gi * a);
    return d;
  }
  const cu = jh;
  function du(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var o = n.getContext("2d");
    var a = f * 70;
    var p = f * 70;
    var h = f * 10;
    var l = f * 5;
    n.width = a;
    n.height = p + l;
    for (var g = tg; g < e.length; g++) {
      var q = e[g];
      o.globalAlpha = q.a;
      var r = q.f(i, Ei, q.c);
      o.save();
      o.translate(a / 2 + q.x * f, p / H + q.y * f);
      o.rotate(q.r);
      o.drawImage(r, -r.width / 2, -r.height / 2);
      o.restore();
    }
    var s = [];
    for (g = Pg; g < j.length; g++) {
      var d = document.createElement("canvas");
      var t = d.getContext("2d");
      d.width = a;
      d.height = p + l;
      t.globalAlpha = k / 2;
      if (pq == g) {
        wb(t, 0, l, a, p, h);
      } else {
        wb(t, 0, Zj, a, p + l, h);
      }
      cb(t, "#081a19");
      t.globalAlpha = k;
      if (Gl == g) {
        wb(t, 0, l, a, p, h);
      } else {
        wb(t, Da, 0, a, p, h);
      }
      cb(t, j[g]);
      t.globalAlpha = 1;
      if (g == Mt) {
        t.drawImage(n, Pg, l);
      } else {
        t.drawImage(n, 0, 0);
      }
      s.push(pr(d));
    }
    return s;
  }
  function eu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var m = c * 190;
    var a = k / xq;
    var n = m / Hj;
    i.width = k;
    i.height = m;
    var h = c * 10;
    var l = c * 35;
    var g = c * 150;
    var o = l / Zg;
    var b = g / Zg;
    var p = c * 4;
    j.translate(a - c * 5, n - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    wb(j, -o, -b, l, g, h);
    cb(j, f[Zj], f[Ol], p);
    j.translate(Eh, 0);
    j.rotate(Math.PI / Ob);
    j.globalAlpha = xt;
    wb(j, -o, -b, l, g, h);
    cb(j, f[0], f[jh], p);
    j.translate(Lr, Wl);
    wb(j, -o / 2, -b / lr, l / 2, g / 3, h - 2);
    cb(j, f[1]);
    return i;
  }
  function fu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var h = b * 55;
    e.width = g;
    e.height = h;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    cb(f, d[Rs]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    cb(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    cb(f, false, d[mk], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    cb(f, d[2]);
    return e;
  }
  const gu = wj;
  function hu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 370;
    var i = b * 370;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    var h = b * 180;
    f.globalAlpha = 0.2;
    fb(f, a, j, h);
    cb(f, d[ps]);
    return e;
  }
  function iu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 145;
    var i = b * 145;
    var a = g / xq;
    var j = i / Jt;
    e.width = g;
    e.height = i;
    var h = b * 70;
    f.translate(a, j);
    f.globalAlpha = 0.4;
    fb(f, 0, Db, h);
    cb(f, d[Da]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    fb(f, Zj, Pg, h);
    cb(f, d[Rq]);
    h = b * 35;
    f.translate(zl, mj);
    f.globalAlpha = 0.8;
    fb(f, 0, 0, h);
    cb(f, d[lb]);
    h = oh * b;
    f.translate(mj, zl);
    f.globalAlpha = 0.8;
    fb(f, tg, 0, h);
    cb(f, d[2]);
    return e;
  }
  function ju(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(-zg * a, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * Qs, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -Gk);
    e.translate(ur * a, vi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, Hh * a, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * ps, a * 73, qo * a);
    e.bezierCurveTo(a * 51, a * 5, a * 36, Ok * a, a * 25, a * 28);
    e.closePath();
    cb(e, c[jh], c[lr], Fr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * $q, a * 84, a * Tl, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * Rt, a * 96, Zl * a, a * 85, bs * a);
    e.bezierCurveTo(a * 59, yr * a, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, da * a, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * Xg, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    cb(e, Ng, c[Yl], a * 4);
    fb(e, a * 18, a * 38, a * 14.866068747318506);
    cb(e, c[qg], c[kq], Al * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    cb(e, c[1], c[bs], ba * a);
    e.translate(a * -$n, a * -Cs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    cb(e, c[6], c[Ar], a * va);
    return d;
  }
  function ku(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 205;
    var i = b * 205;
    var a = g / xj;
    var j = i / Yg;
    e.width = g;
    e.height = i;
    var h = b * 100;
    f.translate(a, j);
    f.globalAlpha = 1;
    fb(f, 0, Rq, h);
    cb(f, d[Db]);
    return e;
  }
  function lu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var m = c * 190;
    var a = k / 2;
    var n = m / 2;
    i.width = k;
    i.height = m;
    var h = c * 10;
    var l = c * 25;
    var g = c * 180;
    var o = l / Yg;
    var b = g / 2;
    var p = c * 4;
    j.translate(a, n);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = rg;
    wb(j, -o, -b, l, g, h);
    cb(j, f[Rq], f[1], p);
    j.translate(zl, Db);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    wb(j, -o, -b, l, g, h);
    cb(j, f[0], f[1], p);
    return i;
  }
  function mu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var h = b * 16;
    var a = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / jk, g / 2);
    e.globalAlpha = 1;
    fb(e, 0, tg, h);
    cb(e, c[0], c[Ug], a);
    return d;
  }
  function nu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = b * 32;
    var a = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / Hj, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    fb(e, 0, Kh, h);
    cb(e, c[Bg], c[0]);
    e.translate(Pg, -Bi * b);
    e.globalAlpha = 1;
    fb(e, 0, Rs, h);
    cb(e, c[js], c[2], a);
    return d;
  }
  function ou(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -ql, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, -Iq * a);
    e.translate(ia * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * Yk);
    e.bezierCurveTo(a * 106, a * oq, a * 89, a * Kh, a * 73, qo * a);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * Hh, a * 25, a * 28);
    e.closePath();
    cb(e, c[Oq], c[pq], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, qh * a);
    e.bezierCurveTo(a * 107, a * Nl, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * hl, a * 54, a * 7, a * 40, a * m);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    cb(e, c[qo]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * Cs, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, zl * a, a * 73, a * 3);
    e.bezierCurveTo(a * 51, z * a, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    cb(e, Jo, c[2], ba * a);
    fb(e, a * Ih, a * 38, a * 14.866068747318506);
    cb(e, c[eg], c[tb], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    cb(e, c[hs], c[Yl], a * $i);
    e.translate(a * -ql, a * -al);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    cb(e, c[4], c[Xg], a * 4);
    return d;
  }
  function pu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var m = c * 198;
    var a = c * 140;
    var n = c * 90;
    i.width = k;
    i.height = m;
    var h = c * J;
    var l = c * 25;
    var g = c * 180;
    var o = l / Zg;
    var b = g / 2;
    var p = c * 4;
    j.translate(c * -25, c * 1);
    j.translate(a, n);
    j.rotate(-Math.PI / 5);
    wb(j, -o, -b, l, g, h);
    cb(j, f[Da], f[mk], p);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / Tr);
    wb(j, -o, -b, l, g, h);
    cb(j, f[ya], f[1], p);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    wb(j, -o, -b, l, g, h);
    cb(j, f[0], f[1], p);
    return i;
  }
  const qu = cu;
  const ru = Ob;
  function su(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 283;
    e.height = a * 224;
    f.translate(0, a * 15);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    cb(f, c[zl]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    f.closePath();
    cb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    cb(f, c[Rq]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    cb(f, c[ps]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    cb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    cb(f, c[gu]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    cb(f, c[0]);
    f.translate(tg, a * -15);
    f.globalAlpha = jh;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(sa * a, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    cb(f, er, c[Jt], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    cb(f, Ng, c[dg], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    cb(f, undefined, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    cb(f, Oh, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    cb(f, Jg, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    cb(f, undefined, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    cb(f, c[1], c[Gl], yl * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    cb(f, undefined, c[1], a * oh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    cb(f, undefined, c[1], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    cb(f, undefined, c[Xn], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    cb(f, undefined, c[yg], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    cb(f, T, c[fl], Cs * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    cb(f, undefined, c[yg], a * 20);
    fb(f, a * 101, a * 155, a * 20.591260281974);
    cb(f, c[3]);
    fb(f, a * 180, a * 155, a * 20.591260281974);
    cb(f, c[3]);
    fb(f, a * 95, a * 148, a * 7.211102550927978);
    cb(f, c[4]);
    fb(f, a * 173, a * 148, a * 7.211102550927978);
    cb(f, c[Ps]);
    if (d === 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 191, a * 107);
      f.bezierCurveTo(a * 180, a * 104, a * 175, a * 101, a * 180, a * 95);
      f.bezierCurveTo(a * 180, a * 95, a * 181, a * 99, a * 188, a * 103);
      f.bezierCurveTo(a * 191, a * 101, a * 191, a * 95, a * 190, a * 91);
      f.bezierCurveTo(a * 190, a * 91, a * 196, a * 89, a * 195, a * 99);
      f.closePath();
      cb(f, c[2]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 206, a * 98);
      f.bezierCurveTo(a * 203, a * 95, a * 200, a * 93, a * 198, a * 101);
      f.bezierCurveTo(a * 194, a * 109, a * 193, a * 109, a * 196, a * 110);
      f.bezierCurveTo(a * 206, a * 115, a * 209, a * 114, a * 211, a * 111);
      f.bezierCurveTo(a * 211, a * 106, a * 208, a * 108, a * 203, a * 108);
      f.bezierCurveTo(a * 193, a * 107, a * 204, a * 101, a * 206, a * 99);
      f.closePath();
      cb(f, c[jk]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 172, a * 111);
      f.bezierCurveTo(a * 172, a * 106, a * 174, a * 105, a * 185, a * 109);
      f.bezierCurveTo(a * 190, a * 109, a * 189, a * 114, a * 185, a * 120);
      f.bezierCurveTo(a * 181, a * 125, a * 180, a * 126, a * 176, a * 122);
      f.bezierCurveTo(a * 182, a * 119, a * 187, a * 110, a * 182, a * 112);
      f.closePath();
      cb(f, c[lr]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 202, a * 125);
      f.bezierCurveTo(a * 197, a * 117, a * 193, a * 116, a * 193, a * 120);
      f.bezierCurveTo(a * 192.5, a * 124.5, a * 192.5, a * 124.5, a * 192, a * 129);
      f.bezierCurveTo(a * 188, a * 129, a * 187, a * 124, a * 189, a * 120);
      f.bezierCurveTo(a * 191, a * 110, a * 192, a * 110, a * 200, a * 116);
      f.bezierCurveTo(a * 208, a * 120, a * 207, a * 123, a * 202, a * 125);
      f.closePath();
      cb(f, c[2]);
    }
    return e;
  }
  function tu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(Db, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * v, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    cb(e, c[mj]);
    e.globalAlpha = hs;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(vg * a, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * sj, a * 83, io * a, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    cb(e, c[ie], c[Pn], a * 10);
    return d;
  }
  function vu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : lb;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    wb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    cb(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    cb(e, c[0]);
    fb(e, a * 204, a * 693, a * 36.013886210738214);
    cb(e, c[0]);
    fb(e, a * 105, a * 518, a * 30);
    cb(e, c[tg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    cb(e, c[mj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    cb(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    wb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    cb(e, c[ie], c[Yg], a * vb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    cb(e, c[3], c[Mq], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    cb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    cb(e, c[ji], c[4], vb * a);
    fb(e, a * 204, a * 693, a * 36.013886210738214);
    cb(e, c[U], c[Mq], a * 16);
    fb(e, a * 105, a * 518, a * 30);
    cb(e, c[Ya], c[4], Kb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    cb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    cb(e, c[6]);
    fb(e, a * 204, a * 693, a * 17.029386365926403);
    cb(e, c[7]);
    fb(e, a * 106, a * 518, a * 12);
    cb(e, c[7]);
    return d;
  }
  function wu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.max(b.width, a.width);
    var f = Math.max(b.height, a.height);
    c.width = e;
    c.height = f;
    d.drawImage(a, (e - a.width) / xj, (f - a.height) / bs);
    d.drawImage(b, (e - b.width) / 2, (f - b.height) / 2);
    return c;
  }
  function xu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    cb(d, Ul, b[Da], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    cb(d, wr, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    cb(d, Sl, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    cb(d, undefined, b[gu], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    cb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    cb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    cb(d, b[Pg]);
    return c;
  }
  function yu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : rg;
    e.translate(Hh * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    cb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    wb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    cb(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Tb(e, 4, a * 26.476404589747453, yt * a);
    e.restore();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    cb(e, c[Rs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = yg;
    e.translate(a * -wq, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    cb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    wb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    cb(e, c[4], c[ta], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Tb(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    cb(e, c[fl], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    cb(e, c[qu], c[Gl], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    cb(e, c[fn]);
    return d;
  }
  function zu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(wj, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, Kb * a, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * ck, a * 39, gk * a, a * 44);
    e.closePath();
    cb(e, c[Lr]);
    e.globalAlpha = Ug;
    e.translate(mj, a * -nt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * sr, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, xl * a, a * 39, xl * a, a * 44);
    e.closePath();
    cb(e, c[lb], c[2], a * 8);
    return d;
  }
  function Au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(pb * a, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(Cg * a, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cb(e, c[tt]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * $q, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cb(e, c[1], c[Hj], J * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    cb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    cb(e, Jg, c[4], a * eh);
    e.translate(-Y * a, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * Wl, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(Ga * a, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cb(e, c[Hi]);
    e.globalAlpha = Te;
    e.translate(a * -Fk, -Bo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * nt, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    cb(e, c[Ks]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    cb(e, c[Pn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    cb(e, undefined, c[4], a * 4);
    e.translate(Mg * a, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : rg;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * og, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-Gs * a, a * -Th);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    cb(e, c[1], c[dg], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    cb(e, c[Yl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    cb(e, undefined, c[Mq], a * 4);
    return d;
  }
  function Bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    cb(e, c[0]);
    fb(e, a * 160.5, a * 243.03125, a * 7);
    cb(e, c[Hi]);
    fb(e, a * 227.5, a * 242.03125, a * Js);
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    cb(e, c[In], c[Kh], a * 5);
    fb(e, a * 194, a * 298, Os * a);
    cb(e, c[Kh], c[Da], q * a);
    e.globalAlpha = 1;
    e.translate(a * -Ds, Ds * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    cb(e, c[3], c[ol], a * pb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    cb(e, c[jh], c[2], a * 5);
    fb(e, a * 160.5, a * 243.03125, a * N);
    cb(e, c[1], c[2], a * Pt);
    fb(e, a * 227.5, a * 242.03125, a * Ni);
    cb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    cb(e, c[cu], c[2], a * 7);
    fb(e, a * 194, a * 298, se * a);
    cb(e, c[Oq], c[2], a * 7);
    return d;
  }
  function Cu(c, d, e, f) {
    var i = document.createElement("canvas");
    var k = i.getContext("2d");
    var m = c * 210;
    var a = c * 205;
    var n = c * 30;
    var h = Ok * c;
    var l = c * 200;
    var g = c * 180;
    var o = l / 2;
    var b = g / 2;
    i.width = m;
    i.height = a;
    i.width = c * 419;
    i.height = c * 412;
    if (f == 1) {
      k.save();
      k.translate(c * jn, c * 0);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      cb(k, lj, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      cb(k, undefined, d[Pe], c * ci);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      cb(k, undefined, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      cb(k, ut, d[ba], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      cb(k, j, d[Og], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      cb(k, lj, d[fs], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      cb(k, j, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      cb(k, Hs, d[4], c * 3);
      k.restore();
    } else if (Yl == f) {
      k.save();
      k.translate(c * 130, c * 35);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      cb(k, Jo, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      cb(k, rk, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      cb(k, undefined, d[Al], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      cb(k, mg, d[ol], c * Ut);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      cb(k, undefined, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      cb(k, undefined, d[4], c * hl);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      cb(k, undefined, d[4], Ob * c);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      cb(k, ut, d[4], c * 3);
      k.restore();
    }
    k.translate(i.width / 2, i.height / Yl);
    if (!f) {
      k.globalAlpha = 0.5;
      wb(k, -o, -b, l, g + h, n);
      cb(k, d[zl]);
      if (e) {
        k.rotate(Math.PI);
      }
      k.globalAlpha = 1;
      wb(k, -o, -b, l, g, n);
      cb(k, d[yg], d[2], 4);
      k.globalAlpha = 1;
      wb(k, c * 35 - o, c * xs - b, l - c * 50, g - c * 50, n - It * c);
      cb(k, d[3]);
    }
    if (f == 3) {
      k.translate(-i.width / 2, -i.height / Yl);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      cb(k, d[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      cb(k, d[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      cb(k, d[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      cb(k, d[ta]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      cb(k, d[5]);
      k.translate(c * M, c * -55);
      k.translate(-ta * c, c * qs);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      cb(k, d[5]);
    } else if (Dt == f) {
      k.translate(-i.width / xj, -i.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 30, c * 167);
      k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, Yh * c, c * 179);
      k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      k.closePath();
      cb(k, d[eg]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 26, c * 145);
      k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      k.closePath();
      cb(k, d[nb]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 13, c * 193);
      k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * al, c * 202);
      k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, hq * c, c * 193);
      k.closePath();
      cb(k, d[Pe]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      cb(k, d[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 335, c * 196);
      k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      k.closePath();
      cb(k, d[ks]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 349, c * 212);
      k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      k.closePath();
      cb(k, d[nj]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 46, c * 165);
      k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      k.closePath();
      cb(k, d[Al]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      cb(k, d[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      cb(k, d[Gs]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      cb(k, d[Gs]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      cb(k, d[ta]);
      k.translate(Wl * c, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      cb(k, d[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 367, c * 164);
      k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      k.closePath();
      cb(k, d[ba]);
    }
    return i;
  }
  function Du(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * to, hn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    cb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    wb(e, a * -14, a * -56.5, a * 28, a * 113, Hr * a);
    e.restore();
    cb(e, c[0]);
    fb(e, a * 122, a * 480, a * 18.439088914585774);
    cb(e, c[mj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = yg;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    cb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    wb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    cb(e, c[Mq], c[5], a * 12.5);
    fb(e, a * 122, a * 480, a * 18.439088914585774);
    cb(e, c[4], c[Gs], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    cb(e, c[4], c[Qr], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * x);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    cb(e, c[bb]);
    return d;
  }
  function Eu(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = (n = c * 450) / 2;
    var k = (o = c * 145) / 2;
    var a = c * It;
    var m = c * 300;
    var h = c * 30;
    var l = m / 2;
    var g = h / 2;
    if (e) {
      var n = c * 145;
      var o = c * 450;
      f.width = n;
      f.height = o;
      i.rotate(Math.PI / bs);
      i.save();
      i.globalAlpha = 0.5;
      wb(i, c * 100, c * -110, m, h, a);
      cb(i, d[0]);
      i.translate(c * 178, c * -98);
      wb(i, -l, -g - c * 6, c * 100, c * 100, a);
      cb(i, d[0]);
      i.translate(c * -50, c * Gs);
      wb(i, c * 220, c * -15, c * 90, c * 90, a);
      cb(i, d[In]);
      i.restore();
      i.save();
      i.globalAlpha = yg;
      i.translate(c * 250, c * -63);
      wb(i, -l - $g * c, -g, m, h, a);
      cb(i, d[1], d[bs], 4);
      i.translate(c * -70, c * -40);
      wb(i, -l - c * 20, -g, c * 100, c * Nn, a);
      cb(i, d[qo], d[ul], 4);
      i.translate(c * -70, c * 15);
      wb(i, c * 220, c * -22, c * 90, c * 90, a);
      cb(i, d[yr], d[4], 4);
      wb(i, c * 230, c * -12, c * 55, c * 55, a);
      cb(i, d[Uh]);
      i.translate(c * -70, ps);
      wb(i, c * -15, -ss * c, c * 60, c * 60, a);
      cb(i, d[5]);
      i.restore();
    } else {
      f.width = n;
      f.height = o;
      i.save();
      i.globalAlpha = 0.5;
      i.translate(j, k + c * 10);
      wb(i, -l, -g, m, h, a);
      cb(i, d[0]);
      i.translate(c * -65, c * -25);
      wb(i, -l, -g - c * 6, Y * c, c * 100, c * Cg);
      cb(i, d[0]);
      i.translate(c * -35, -Pt * c);
      wb(i, c * 220, c * -15, c * 90, c * 90, c * 15);
      cb(i, d[0]);
      i.restore();
      i.save();
      i.globalAlpha = 1;
      i.translate(c * 240, c * 70);
      wb(i, -l, -g, m, h, a);
      cb(i, d[1], d[Yl], 4);
      i.translate(c * -60, c * -40);
      wb(i, -l - c * 20, -g, c * 100, c * x, c * 15);
      cb(i, d[qo], d[4], 4);
      i.translate(c * -55, Zk * c);
      wb(i, c * 220, c * -22, c * 90, c * 90, c * 15);
      cb(i, d[ru], d[4], 4);
      wb(i, c * 240, c * -oq, c * 55, c * 55, c * 12);
      cb(i, d[nr]);
      i.translate(c * 45, c * ps);
      wb(i, c * -145, c * -2, c * 60, c * 60, Zr * c);
      cb(i, d[Eq]);
      i.restore();
    }
    return f;
  }
  function Fu(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 105;
    var k = c * 125;
    var a = c * 4;
    var m = c * 10;
    var h = c * Eg;
    var l = c * 10;
    var g = c * 110;
    var n = l / lr;
    var b = g / Yg;
    f.width = j;
    f.height = k;
    i.save();
    i.globalAlpha = d ? 0.5 : 1;
    i.translate(j / Gl + c * Fs, k / lr + h);
    wb(i, -n, -b, l, g, m);
    cb(i, d ? e[0] : e[hs]);
    i.translate(c * -130 + h, c * -128 + h);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    cb(i, e[ih]);
    i.restore();
    i.translate(j / lr + 8, k / Zg);
    i.globalAlpha = 1;
    wb(i, -n, -b, l, g, m);
    cb(i, e[bb], e[ks], a);
    i.translate(c * -130, c * -125);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    cb(i, e[q], e[Ck], a);
    return f;
  }
  function Gu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = vb * b;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / pq);
    e.globalAlpha = 0.5;
    fb(e, 0, zl, h);
    cb(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  function Hu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : js;
    e.translate(to * a, wq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    cb(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    wb(e, a * -15.5, a * -63, a * 31, a * 126, kk * a);
    e.restore();
    cb(e, c[0]);
    fb(e, a * 121, a * 480, a * 20.396078054371138);
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * sa, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = Te;
    e.translate(a * -Hh, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    cb(e, c[Xn], c[xq], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    wb(e, a * -15.5, a * -63, a * 31, a * 126, yt * a);
    e.restore();
    cb(e, c[4], c[5], a * 12.5);
    fb(e, a * 121, a * 480, a * 20.396078054371138);
    cb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * _j, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    cb(e, c[1], c[Hj], a * 12.5);
    return d;
  }
  function Iu(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 121;
    e.height = a * 130;
    f.translate(Rq, vi * a);
    if (c == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 6, a * 23);
      f.bezierCurveTo(a * 6, a * 46, qq * a, a * 46, a * Cl, a * 69);
      f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
      f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
      f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, Hk * a);
      f.bezierCurveTo(a * 47, Bk * a, a * 47, po * a, a * 38, a * 25);
      f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, a * 6, a * 23);
      f.closePath();
      cb(f, undefined, b[3], ja * a);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 6, a * 23);
    f.bezierCurveTo(Zl * a, a * 46, a * 6, a * 46, ji * a, a * 69);
    f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
    f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
    f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, gl * a);
    f.bezierCurveTo(a * 47, a * 14, a * 47, a * wl, a * 38, a * 25);
    f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, Ss * a, a * 23);
    f.closePath();
    cb(f, b[1], b[2], a * 4);
    if (d == 1) {
      f.translate(0, Wl * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      cb(f, undefined, b[0], a * 10);
      f.translate(ea, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, a * 17);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      cb(f, Jo, b[0], a * 10);
      f.translate(Ut, Rs * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, Ml * a);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      cb(f, undefined, b[Eh], a * It);
      if (c == 1) {
        f.translate(a * -6, a * -q);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 67, a * 30);
        f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
        cb(f, undefined, b[3], Pj * a);
        f.translate(3, Eh * a);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 70, a * 17);
        f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
        cb(f, undefined, b[3], a * W);
        f.translate(Hk, Hi * a);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 76, aa * a);
        f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
        cb(f, undefined, b[3], a * ag);
        f.translate(-Rg, a * Lr);
      } else {
        f.translate(a * -6, a * -Uh);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      cb(f, mg, b[2], a * Ds);
      f.translate(hl, a * ya);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, a * qa);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      cb(f, T, b[xj], yt * a);
      f.translate(3, Lr * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, a * 8);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      cb(f, mb, b[2], J * a);
    } else {
      if (js == c) {
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        cb(f, undefined, b[bb], a * Ik);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        cb(f, Oh, b[3], a * Ik);
      } else {
        f.translate(Hi, a * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        cb(f, undefined, b[ya], a * 7);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        cb(f, undefined, b[0], a * 7);
        f.translate(0, a * 5);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 108, a * 27);
      f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
      f.closePath();
      cb(f, undefined, b[ih], a * Ni);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 79, a * 30);
      f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
      f.closePath();
      cb(f, undefined, b[2], a * Ys);
    }
    return e;
  }
  function Ju(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : lb;
    e.translate(a * al, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * Wh);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * z);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    cb(e, c[Hi]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    cb(e, c[tg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * wh, a * 323, a * Hr, a * 323, a * 9, a * 313);
    e.closePath();
    cb(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    wb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * kk);
    e.restore();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    cb(e, c[Rs]);
    e.globalAlpha = 1;
    e.translate(a * -20, -qr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * Wh);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, ta * a);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    cb(e, c[1], c[bs], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    cb(e, c[I]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * Mi);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    cb(e, cn, c[2], a * ia);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    cb(e, c[4], c[5], zg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(Iq * a, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    cb(e, c[Pe], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    wb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    cb(e, c[qg], c[Xg], ng * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    cb(e, c[Qa]);
    return d;
  }
  const Ku = Mn;
  function Lu(a, b, c) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 217;
    e.height = a * 215;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 79, a * 113);
    f.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    f.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    f.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    f.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    f.closePath();
    cb(f, c[Te], c[2], a * ol);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 154, a * 103);
    f.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    f.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    f.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    f.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    f.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    f.closePath();
    cb(f, c[1], c[2], a * Ps);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60, a * 46);
    f.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    f.bezierCurveTo(a * 52, a * 12, a * 52, Fl * a, a * 49, a * 24);
    f.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    f.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    f.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    f.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    f.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    f.closePath();
    cb(f, c[ba], c[5], a * Dt);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 50);
    f.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    f.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    f.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    f.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    f.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    f.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    f.closePath();
    cb(f, c[4], c[M], nb * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 51, a * 40);
    f.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    f.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    f.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    f.closePath();
    cb(f, c[Rr]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 29, a * 48);
    f.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    f.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    f.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    f.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    f.closePath();
    cb(f, c[$n]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 89, a * 61);
    f.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    f.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    f.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    f.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    f.closePath();
    cb(f, c[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 99, a * 59);
    f.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    f.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    f.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    f.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    f.closePath();
    cb(f, c[$n]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 62);
    f.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    f.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    f.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    f.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    f.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    f.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    f.closePath();
    cb(f, c[nj], c[ll], eh * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 130);
    f.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    f.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    f.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    f.closePath();
    cb(f, c[Ig]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 119);
    f.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    f.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    f.bezierCurveTo(a * 36, ar * a, a * 49, a * 102, a * 53, a * 95);
    f.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    f.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    f.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    f.closePath();
    cb(f, c[$o], c[sk], Dt * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 64);
    f.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    f.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    f.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    f.closePath();
    cb(f, c[aa]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 65);
    f.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    f.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    f.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    f.closePath();
    cb(f, c[Ig]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 51, a * 112);
    f.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    f.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    f.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    f.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    f.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    f.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    f.closePath();
    cb(f, c[fk], c[Wb], a * $i);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 50, a * 114);
    f.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    f.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    f.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    f.closePath();
    cb(f, c[11], c[qt], a * fs);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 85, a * 152);
    f.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    f.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    f.closePath();
    f.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    cb(f, c[11], c[Nl], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 104, a * 166);
    f.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    f.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    f.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    f.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    f.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    f.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    f.closePath();
    cb(f, c[Ag], c[Bo], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 105, a * 168);
    f.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    f.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    f.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    f.closePath();
    cb(f, c[10]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 102, a * 169);
    f.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    f.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    f.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    f.closePath();
    cb(f, c[Lo], c[9], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 64, a * 107);
    f.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    f.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    f.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    f.closePath();
    cb(f, c[tk], c[xg], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 40, a * 108);
    f.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    f.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    f.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    f.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    f.closePath();
    cb(f, c[d], c[vh], ba * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 189, a * 106);
    f.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    f.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    f.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    f.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    f.closePath();
    cb(f, c[8]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 69, a * 178);
    f.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    f.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    cb(f, undefined, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 161);
    f.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    f.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    cb(f, ut, c[Ks], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 91, a * 29);
    f.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    f.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    cb(f, undefined, c[6], Fr * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107, a * 33);
    f.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    f.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    cb(f, Oh, c[Ya], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 98);
    f.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    f.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    f.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    f.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    f.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    f.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    f.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    f.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    f.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    cb(f, ut, c[3], fs * a);
    return e;
  }
  function Mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(Rq, Bo * a);
    fb(e, a * 42, a * 43, a * 24.758836806279895);
    cb(e, c[Da]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, _j * a, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    cb(e, c[0]);
    e.translate(0, a * -J);
    fb(e, a * 42, a * 43, a * 24.758836806279895);
    cb(e, c[xt], c[ss], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    cb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    cb(e, c[lb], c[Yl], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, Rl * a, a * 48, a * Pa, a * 52, a * 16);
    e.closePath();
    cb(e, c[3], c[4], kq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    cb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    cb(e, c[3], c[4], a * Pt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * Ka, a * 39, _o * a, a * 38, a * 18, a * 37);
    e.closePath();
    cb(e, c[Ob], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    cb(e, c[Hk], c[Mq], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    cb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    cb(e, c[bb], c[qg], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    cb(e, c[3], c[ul], a * Uh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    cb(e, c[3], c[ol], a * Eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * vi, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * Il, a * 53);
    e.closePath();
    cb(e, c[fn], c[ba], Uh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    cb(e, c[3], c[fs], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    cb(e, c[3], c[Ps], Wl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    cb(e, c[vt], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    cb(e, c[Hk], c[4], a * Gs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    cb(e, c[Ks], c[4], pb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    cb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    cb(e, c[3], c[eh], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    cb(e, c[5], c[Zl], a * pb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    cb(e, c[7], c[Ml], a * 5);
    return d;
  }
  function Nu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : lb;
    e.translate(Db, a * Kg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(th * a, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, Pl * a, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = mk;
    e.translate(Lr, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * Xl, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    cb(e, c[1], c[2], a * Vn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, A * a, a * 76, a * 23, a * 62);
    e.closePath();
    cb(e, c[Wg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, oh * a);
    e.bezierCurveTo(a * 59, a * m, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    cb(e, c[ig]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    cb(e, c[qo]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    cb(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(Ak * a, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * Yh, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    cb(e, c[Ps], c[5], a * 4);
    fb(e, a * 107, a * 152, a * 9);
    cb(e, c[6]);
    fb(e, a * 105, a * 173, a * Lo);
    cb(e, c[Na]);
    fb(e, a * 87, a * 161, a * 9);
    cb(e, c[6]);
    fb(e, a * 106, a * 147, a * ks);
    cb(e, c[7]);
    fb(e, a * 104, a * 167, Mq * a);
    cb(e, c[7]);
    fb(e, a * 86, a * 154, a * qg);
    cb(e, c[Tg]);
    return d;
  }
  function Ou(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var i = b * 90;
    var a = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, sa * b, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    cb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    cb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    cb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    cb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    cb(f, d[0], d[js], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * ar, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    cb(f, d[zl], d[1], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, Yh * b, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    cb(f, d[0], d[Ug], a);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / M);
    f.globalAlpha = Oq;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    cb(f, d[0], d[rg], a);
    f.restore();
    return e;
  }
  function Pu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Ok, a * Mg);
    e.translate(a * -wq, -Mg * a);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    wb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Ak, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    cb(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    wb(e, a * -14, a * -61, a * 28, a * 122, gn * a);
    e.restore();
    cb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    cb(e, c[Ol], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    cb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    cb(e, c[1], c[bs], a * 12.5);
    e.globalAlpha = jh;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    cb(e, c[Hk]);
    return d;
  }
  function Qu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    cb(e, c[wj], c[za], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    cb(e, c[Lr], c[Te], a * qk);
    fb(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    cb(e, c[2]);
    fb(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    cb(e, c[ss]);
    fb(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    cb(e, c[2]);
    fb(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    cb(e, c[bs]);
    fb(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    cb(e, c[2]);
    fb(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    cb(e, c[ss]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    cb(e, c[ci], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    cb(e, c[fn], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    cb(e, c[ig], c[$i], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    cb(e, c[3], c[4], nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    cb(e, c[3], c[nj], $i * a);
    return d;
  }
  const ed = Oj;
  function id(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 220;
    var i = b * 230;
    var a = b * 100;
    var j = a / fs;
    var h = b * 20;
    e.width = g;
    e.height = i;
    f.translate(g / ih, i / 2 + h);
    f.globalAlpha = 0.5;
    Tb(f, ia, a, j);
    cb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    Tb(f, ia, a, j);
    cb(f, d[Ot]);
    Tb(f, ji, a * 0.65, j * 0.65);
    cb(f, d[Zg]);
    return e;
  }
  function td(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 220;
    var a = b * 220;
    var j = b * Ah;
    var h = j / 4;
    f.width = i;
    f.height = a;
    g.translate(i / xj, a / Zg);
    g.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      g.translate(In * b, b * -8);
    }
    Tb(g, 7, j, h);
    cb(g, c ? d[Da] : d[hs]);
    g.globalAlpha = za;
    if (tt == e) {
      Tb(g, fh, j * 0.65, h * 0.65);
      cb(g, d[2]);
    } else if (e == qu) {
      g.translate(b * 20, b * 20);
      Tb(g, 6, j * 0.45, h * 0.4);
      cb(g, d[Mt]);
    }
    return f;
  }
  function nd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = Sa * b;
    var i = b * Ik;
    e.width = g;
    e.height = i;
    var a = b * 9;
    var j = b * 9;
    var k = b * 8;
    f.save();
    f.translate(a, j);
    f.globalAlpha = Ol;
    fb(f, 0, 0, k);
    cb(f, d[0]);
    k = b * 3;
    a = Lr;
    j = b * -fn;
    f.translate(a, j);
    f.globalAlpha = yg;
    fb(f, Bg, 0, k);
    cb(f, d[1]);
    f.restore();
    return e;
  }
  function od(f, e, i, j, k, m, n, a, o, h, l) {
    if (l === Ng) {
      l = 0;
    }
    var p = document.createElement("canvas");
    var q = p.getContext("2d");
    m = m ? f * m : 0;
    var b = Math.floor(f * i);
    q.font = b + "px Baloo Paaji";
    q.lineJoin = "round";
    a *= f;
    var t = n ? a * 2 : 0;
    if (o) {
      var d = Math.min(q.measureText(e).width + Nb * f + t, o);
    } else {
      d = q.measureText(e).width + f * 2 + t + l * f * 2;
    }
    b = f * (b + m + l) + t;
    p.width = d;
    p.height = b;
    if (n) {
      q.fillStyle = n;
      wb(q, mj, 0, d, b, Hj * a);
      q.fill();
      q.translate(a, a);
    }
    q.textBaseline = "middle";
    q.font = i + "px Baloo Paaji";
    q.lineJoin = "round";
    if (k) {
      q.beginPath();
      q.fillStyle = k;
      q.fillText(e, 0, b / 2 + m - t / Hj, d);
    }
    q.beginPath();
    if (h) {
      q.strokeStyle = h;
      q.lineWidth = l;
      q.strokeText(e, l, (b - t) / 2, d);
    }
    q.fillStyle = j;
    q.fillText(e, l, (b - t) / 2, d);
    return p;
  }
  function rd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 180;
    var i = b * 210;
    var a = (h = b * 60) / eh;
    var j = b * 20;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(g / Nb - b * Hi, i / 2 - b * 35 + j);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * Bg, -al * b);
    Tb(f, 5, h, a);
    cb(f, d[Lr]);
    f.restore();
    f.save();
    f.translate(g / xj + b * 10, i / 2 + b * 15 + j);
    f.rotate(Math.PI / Zh);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -Xa);
    Tb(f, kq, h, a);
    cb(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 50, i / Jt + b * 40 + j);
    f.rotate(Math.PI / yr);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    Tb(f, 5, h, a);
    cb(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - Zj * b, i / Zg - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = yg;
    f.translate(wj * b, -qr * b);
    Tb(f, Oj, h, a);
    cb(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 + kk * b, i / 2 + b * _h);
    f.rotate(Math.PI / pq);
    f.globalAlpha = 1;
    f.translate(tg, b * -20);
    Tb(f, q, h, a);
    cb(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 50, i / 2 + b * 40);
    f.rotate(Math.PI / Hk);
    f.globalAlpha = 1;
    f.translate(Da, b * -20);
    Tb(f, Wl, h, a);
    cb(f, d[qu]);
    f.restore();
    var h;
    a = (h = b * 30) / nb;
    f.save();
    f.translate(g / bs + b * 5, i / Yg - qi * b);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -wq);
    Tb(f, q, h, a);
    cb(f, d[H]);
    f.restore();
    f.save();
    f.translate(g / Hj + b * 0, i / lr + b * yl);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(tg, b * -20);
    Tb(f, 5, h, a);
    cb(f, d[Mt]);
    f.restore();
    f.save();
    f.translate(g / dg - b * 45, i / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(Pg, b * -Ok);
    Tb(f, Oj, h, a);
    cb(f, d[2]);
    f.restore();
    fb(f, g / 2 - b * 7, i / 2 + Js * b, Eq);
    cb(f, d[2]);
    return e;
  }
  function ad(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 120;
    var i = b * 150;
    var a = b * 60;
    var j = a / 4;
    var h = b * 15;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(g / 2 + b * 0, i / Jt + Hi * b + h);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    Tb(f, 8, a, j);
    cb(f, d[mj]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 11, i / 2 + oq * b);
    f.globalAlpha = 1;
    f.rotate(Math.PI / ea);
    f.translate(0, -h);
    Tb(f, 8, a, j);
    cb(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 9, i / 2 - b * Yr);
    f.rotate(Math.PI / 2.8);
    Tb(f, 5, a * 0.5, j * 0.4);
    cb(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 + bn * b, i / Hj + b * z);
    f.rotate(Math.PI / qu);
    Tb(f, 5, a * 0.5, j * 0.4);
    cb(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / Zg - b * 8, i / dg + b * 20);
    f.rotate(Math.PI / 2.25);
    Tb(f, 5, a * 0.5, j * 0.4);
    cb(f, d[lr]);
    f.restore();
    return e;
  }
  function sd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var i = b * 150;
    var a = Ra * b;
    var j = b * 4;
    e.width = g;
    e.height = i;
    f.translate(b * -50, b * -38 + a);
    f.globalAlpha = c ? 0.5 : qu;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    cb(f, d[Bg]);
    f.translate(Bg, 0 - a);
    f.globalAlpha = js;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    cb(f, d[1], d[2], j);
    return e;
  }
  const hd = ie;
  function ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, Bo * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    wb(e, 0, 0, a * 400, a * 220, a * 30);
    cb(e, c[0]);
    e.globalAlpha = xt;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Os, a * 5);
    e.bezierCurveTo(a * 381, a * jk, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, Mq * a, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * xq, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * eh, a * 30.5, a * 4, a * 30.5, fs * a, Vs * a);
    e.bezierCurveTo(a * 16, a * 18.5, Fl * a, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, fk * a, a * ll);
    e.closePath();
    cb(e, c[pq], c[1], a * Ms);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Oj * a, a * 70);
    e.bezierCurveTo(a * kq, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * qs, a * 108);
    e.bezierCurveTo(xt * a, a * 106, a * 5, a * 106, a * Qr, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, Na * a, a * 71);
    e.closePath();
    cb(e, c[3], c[1], a * Ms);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * Xg, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * qq, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    cb(e, c[lr], c[1], da * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(ie * a, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * Vq, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * nb, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    cb(e, c[Ut], c[lb], a * 12);
    fb(e, a * 41, a * 30, a * 14.7648230602334);
    cb(e, c[3], c[1], a * 12);
    fb(e, a * 369, a * 30, a * 15.556349186104045);
    cb(e, c[vt], c[Oq], a * 12);
    fb(e, a * 364, a * 190, a * 15.620499351813308);
    cb(e, c[3], c[lb], a * 12);
    fb(e, a * 41, a * 186, a * 15.556349186104045);
    cb(e, c[3], c[1], $a * a);
    return d;
  }
  function gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Tb(e, Zl, a * 146, a * 30);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Tb(e, U, a * 146, a * 30);
    e.restore();
    cb(e, c[Ug], c[2], E * a);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Tb(e, Ss, a * 105, a * 30);
    e.restore();
    cb(e, c[gl], c[ci], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(Eh);
    Tb(e, Na, a * 66, a * 30);
    e.restore();
    cb(e, c[Ps], c[Zg], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    Tb(e, $k, Xh * a, a * Hr);
    e.restore();
    cb(e, c[Bs]);
    e.save();
    e.translate(a * 163, a * 168);
    Tb(e, 7, a * 25, a * 8);
    e.restore();
    cb(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    Tb(e, 7, a * 11, zj * a);
    e.restore();
    cb(e, c[fh]);
    e.save();
    e.translate(a * 167, a * 122);
    Tb(e, 7, a * 12, a * Vr);
    e.restore();
    cb(e, c[U]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    cb(e, Hs, c[Yl], a * Bi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    cb(e, undefined, c[2], zj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * ar);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    cb(e, Jg, c[2], a * 8);
    return d;
  }
  function ud(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(Ar * a, a * nt);
      e.scale(0.9, 0.9);
      e.save();
      wb(e, a * zl, a * ta, a * 90, a * 60, 10);
      cb(e, b[Db]);
      e.globalCompositeOperation = "destination-out";
      fb(e, a * 25, a * 40, a * 10);
      e.fill();
      fb(e, a * 65, a * 40, Kg * a);
      e.fill();
      e.restore();
      e.save();
      wb(e, 0, 0, a * 90, a * 60, a * 10);
      cb(e, b[ie]);
      e.globalCompositeOperation = "destination-out";
      fb(e, a * 25, a * 40, J * a);
      e.fill();
      fb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(_o * a, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      cb(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      cb(e, b[Ot]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      cb(e, b[Ug]);
      e.restore();
      e.save();
      wb(e, 0, a * 15, a * 90, a * 50, a * te);
      cb(e, b[Da]);
      wb(e, 0, te * a, a * 90, a * 50, a * 10);
      cb(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      fb(e, a * 25, a * 40, a * 10);
      e.fill();
      fb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    cb(e, c[0], c[tt], a * yt);
    e.translate(Hi * a, -wa * a);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    cb(e, c[Yg], c[3], gn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    cb(e, c[2], c[Hk], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    cb(e, c[Nb], c[Ob], It * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    cb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    cb(e, c[1], c[1], It * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    cb(e, c[1], c[1], It * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    cb(e, c[Gl], c[3], a * vr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    cb(e, c[Ug], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    cb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    cb(e, c[2], c[ea], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    cb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    cb(e, c[2], c[3], a * Ab);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    cb(e, c[hs], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    cb(e, c[2], c[3], gg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    cb(e, c[2], c[3], a * It);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    cb(e, c[1], c[1], cu * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    cb(e, c[hl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    cb(e, c[2], c[Ks], a * vr);
    fb(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    cb(e, c[4], c[tb], a * 1);
    fb(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    cb(e, c[4], c[5], a * 1);
    fb(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    cb(e, c[nj], c[5], qu * a);
    fb(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    cb(e, c[eh], c[5], cu * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    cb(e, c[qg], c[5], a * J);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    cb(e, c[6]);
    return d;
  }
  function vd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    cb(e, c[On], c[wh], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    cb(e, c[Hr], c[8], a * wa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    cb(e, c[Ml], c[yh], a * Wb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    cb(e, c[8], c[$l], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    cb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    cb(e, c[Ig], c[8], Kg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    cb(e, c[Gk], c[8], As * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    cb(e, c[8], c[Ig], a * It);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    cb(e, c[br], c[8], a * sk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    cb(e, c[fl], c[Nb], a * nj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    cb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    cb(e, c[rg], c[Jt], a * ba);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    cb(e, c[ie], c[2], a * ol);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    cb(e, c[3], c[jk], Ps * a);
    fb(e, a * 108.5, a * 148.421875, fk * a);
    cb(e, c[Fk]);
    fb(e, a * 106.5, a * 144.421875, ci * a);
    cb(e, c[Qa]);
    fb(e, a * 46.5, a * 148.421875, a * pn);
    cb(e, c[Oj]);
    fb(e, a * 44.5, a * 144.421875, a * Ks);
    cb(e, c[ji]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    cb(e, c[3], c[xj], nb * a);
    e.beginPath();
    e.translate(mj, -Zh * a);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    cb(e, c[hl], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    cb(e, c[Pe]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    cb(e, c[qo], c[2], a * Fr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    cb(e, c[Tr], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    cb(e, c[Zl], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    cb(e, c[Qa], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    cb(e, c[6], c[Lh], a * H);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    cb(e, c[Ya], c[zg], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    cb(e, c[3], c[xq], a * Mq);
    return d;
  }
  function dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, Vl * a);
    e.globalAlpha = b ? 0.5 : cu;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    wb(e, a * -11.5, a * -226, a * 23, a * 452, te * a);
    e.restore();
    cb(e, c[Bg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    cb(e, c[wj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    cb(e, c[In]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    cb(e, c[Hi]);
    e.translate(a * -Mg, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(tt);
    wb(e, a * -11.5, a * -226, a * 23, a * 452, a * yt);
    e.restore();
    cb(e, c[1], c[2], aa * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    cb(e, c[Wg], c[ol], br * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    cb(e, c[3], c[4], a * br);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    cb(e, c[Gs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    cb(e, c[6], c[$n], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    cb(e, c[E]);
    return d;
  }
  function cd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, Ks);
    wb(e, a * 24, a * 26, a * 70, a * Ca, gg * a);
    cb(e, c[0]);
    wb(e, a * 26, a * 70, a * 70, a * Lo, a * vr);
    cb(e, c[0]);
    wb(e, a * Fk, a * Ob, a * 22, a * 94, a * 5);
    cb(e, c[0]);
    wb(e, a * 40, a * fn, a * 22, a * 94, a * 5);
    cb(e, c[Pg]);
    wb(e, a * 75, bb * a, a * 22, a * 94, a * 5);
    cb(e, c[0]);
    e.globalAlpha = Ug;
    e.translate(-yr, -ru);
    wb(e, a * 24, a * 26, a * 70, a * 9, It * a);
    cb(e, c[cu]);
    wb(e, a * 26, a * 70, a * 70, Lo * a, a * 10);
    cb(e, c[jh]);
    wb(e, a * ll, a * 3, a * 22, a * 94, a * 5);
    cb(e, c[xj], c[3], Dt * a);
    wb(e, a * 40, a * 3, a * 22, a * 94, a * z);
    cb(e, c[2], c[3], a * nb);
    wb(e, a * 75, a * 3, a * 22, a * 94, Eq * a);
    cb(e, c[Pn], c[Tr], a * 4);
    return d;
  }
  function md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * jl, a * 127.13540649414062, a * vi, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    cb(e, c[Eh], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    cb(e, c[1]);
    return d;
  }
  function pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(Zj, a * 10);
    e.globalAlpha = Te;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    cb(e, c[Lr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    cb(e, c[0]);
    e.translate(Bg, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    cb(e, c[1], c[2], He * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    cb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    cb(e, Hs, c[2], a * Fs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    cb(e, undefined, c[2], nb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    cb(e, undefined, c[Yg], a * qg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    cb(e, c[1], c[pq], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    cb(e, c[nq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    cb(e, c[3]);
    return d;
  }
  function Cd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * Th, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(nr * a, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    cb(e, c[ps]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    cb(e, c[rg], c[2], Cg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, xs * a, a * 239, nh * a, a * 159);
    e.bezierCurveTo(Eq * a, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    cb(e, c[3], c[ba], a * 15);
    return d;
  }
  function Td(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : js;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    cb(e, rk, c[0], dn * a);
    e.translate(0, a * -5);
    e.globalAlpha = jh;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    cb(e, c[nq], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    cb(e, c[xt], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    cb(e, lj, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    cb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    cb(e, c[lb], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    cb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    cb(e, c[eg], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    cb(e, Sl, c[2], a * ke);
    return d;
  }
  function fd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    fb(d, a * 55, a * 55, a * 55);
    cb(d, b[0]);
    return c;
  }
  function zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * te);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    cb(e, c[Db]);
    e.globalAlpha = Ol;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    cb(e, c[1], c[2], a * 10);
    return d;
  }
  function yd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    fb(d, a * 86.5, a * 98, a * 80);
    cb(d, b[Da]);
    d.globalAlpha = za;
    fb(d, a * 86.5, a * 89, a * 81);
    cb(d, b[Ol], b[Mt], a * ol);
    fb(d, a * 86.5, a * 86, a * 59);
    cb(d, b[Wg], b[4], Fr * a);
    d.globalAlpha = 0.5;
    fb(d, a * 86.5, a * 95, a * 34);
    cb(d, b[zl]);
    d.globalAlpha = 1;
    fb(d, a * 86.5, a * 89, a * 34);
    cb(d, b[ll]);
    return c;
  }
  function wd() {
    var b = Ww.time;
    if (ΔΔ[Xr.ⵠⲆⲆᐃᐃ]) {
      ho.drawImage(ΔΔ[Xr.ⵠⲆⲆᐃᐃ][b][1], bo + 480, lq + 190);
      ho.drawImage(ΔΔ[Xr.ⵠⲆⲆᐃᐃ][b][2], bo + 180, lq - 430);
      ho.drawImage(ΔΔ[Xr.ⵠⲆⲆᐃᐃ][b][rg], bo - 855, lq + 100);
      ho.drawImage(ΔΔ[Xr.ⵠⲆⲆᐃᐃ][b][0], bo - 550, lq - 300);
      ho.drawImage(ΔΔ[Xr.ⵠⲆⲆᐃᐃ][b][tt], bo - 1020, lq - 520);
    }
    if (ΔΔ[Xr.ⵠⵠⲆΔΔ]) {
      ho.drawImage(ΔΔ[Xr.ⵠⵠⲆΔΔ][b][hd], bo - 80, lq - 640);
      ho.drawImage(ΔΔ[Xr.ⵠⵠⲆΔΔ][b][Te], bo + 80, lq + 490);
      ho.drawImage(ΔΔ[Xr.ⵠⵠⲆΔΔ][b][2], bo - 180, lq - 700);
      ho.drawImage(ΔΔ[Xr.ⵠⵠⲆΔΔ][b][wj], bo + 550, lq + 100);
      ho.drawImage(ΔΔ[Xr.ⵠⵠⲆΔΔ][b][1], bo + 450, lq + 300);
      ho.drawImage(ΔΔ[Xr.ⵠⵠⲆΔΔ][b][hs], bo + 780, lq + 300);
      ho.drawImage(ΔΔ[Xr.ⵠⵠⲆΔΔ][b][2], bo + 980, lq + 200);
      ho.drawImage(ΔΔ[Xr.ⵠⵠⲆΔΔ][b][ih], bo + 680, lq + 600);
      ho.drawImage(ΔΔ[Xr.ⵠⵠⲆΔΔ][b][H], bo - 380, lq + Hl);
      ho.drawImage(ΔΔ[Xr.ⵠⵠⲆΔΔ][b][2], bo + 280, lq + 250);
    }
    if (ΔΔ[Xr.ⵠᐃⲆⲆⲆ]) {
      ho.drawImage(ΔΔ[Xr.ⵠᐃⲆⲆⲆ][b][Bg], bo - 590, lq);
      ho.drawImage(ΔΔ[Xr.ⵠᐃⲆⲆⲆ][b][0], bo + 120, lq - 390);
      ho.drawImage(ΔΔ[Xr.ⵠᐃⲆⲆⲆ][b][0], bo - 270, lq + 340);
    }
    if (ΔΔ[Xr.ΔΔⵠⲆ]) {
      ho.drawImage(ΔΔ[Xr.ΔΔⵠⲆ][b][4], bo - 700, lq - 600);
      ho.drawImage(ΔΔ[Xr.ΔΔⵠⲆ][b][Nb], bo - 970, lq - 250);
      ho.drawImage(ΔΔ[Xr.ΔΔⵠⲆ][b][5], bo - 720, lq - 200);
      ho.drawImage(ΔΔ[Xr.ΔΔⵠⲆ][b][2], bo - 1020, lq + 340);
      ho.drawImage(ΔΔ[Xr.ΔΔⵠⲆ][b][Hi], bo - 1120, lq - 0);
      ho.drawImage(ΔΔ[Xr.ΔΔⵠⲆ][b][za], bo - 650, lq - 330);
      ho.drawImage(ΔΔ[Xr.ΔΔⵠⲆ][b][qg], bo - 495, lq - 90);
      ho.drawImage(ΔΔ[Xr.ΔΔⵠⲆ][b][3], bo - 520, lq + 340);
      ho.drawImage(ΔΔ[Xr.ΔΔⵠⲆ][b][Yl], bo + 830, lq - 520);
    }
    ΔΔ[Xr.ᐃⵠᐃᐃᐃ];
    if (Xw && mf) {
      var c = Xw.ⵠᐃⲆ.x;
      var d = Xw.ⵠᐃⲆ.y;
      Xw.ⵠᐃⲆ.x = bo;
      Xw.ⵠᐃⲆ.y = lq;
      var e = mf.time;
      mf.time = Ww.time;
      var f;
      var g = Ww.items;
      g[ss].x = 400;
      g[2].y = 100;
      g[2].ᐃⵠᐃⵠ(Xr.ⵠⲆΔⵠᐃ);
      (f = g[cu]).x = -500;
      f.y = 100;
      f.Δᐃⵠⵠ[0].x = f.x - 20.5;
      f.Δᐃⵠⵠ[mj].y = f.y - 22.5;
      f.Δᐃⵠⵠ[Oq].x = f.x - 35.5;
      f.Δᐃⵠⵠ[cu].y = f.y + 7.5;
      f.Δᐃⵠⵠ[xq].x = f.x + 7.5;
      f.Δᐃⵠⵠ[2].y = f.y - 30;
      f.Δᐃⵠⵠ[3].x = f.x + 22.5;
      f.Δᐃⵠⵠ[Ks].y = f.y;
      f.Δᐃⵠⵠ[Vn].x = f.x - 7.5;
      f.Δᐃⵠⵠ[4].y = f.y + 14.5;
      for (var h = 0; f.info > h; h++) {
        f.Δᐃⵠⵠ[h].ᐃⵠᐃⵠ(Xr.ⵠⵠⵠⲆΔ);
      }
      (f = g[Ks]).x = 210;
      f.y = -290;
      f.Δᐃⵠⵠ[Kh].x = f.x - 20.5;
      f.Δᐃⵠⵠ[0].y = f.y - 22.5;
      f.Δᐃⵠⵠ[fl].x = f.x - 35.5;
      f.Δᐃⵠⵠ[1].y = f.y + 7.5;
      f.Δᐃⵠⵠ[ih].x = f.x + 7.5;
      f.Δᐃⵠⵠ[2].y = f.y - 30;
      f.Δᐃⵠⵠ[3].x = f.x + 22.5;
      f.Δᐃⵠⵠ[3].y = f.y;
      f.Δᐃⵠⵠ[Mq].x = f.x - 7.5;
      f.Δᐃⵠⵠ[ol].y = f.y + 14.5;
      for (h = 0; h < f.info; h++) {
        f.Δᐃⵠⵠ[h].ᐃⵠᐃⵠ(Xr.ⵠⵠⵠⲆΔ);
      }
      g[0].x = 450;
      g[0].y = -_j;
      g[0].ⲆᐃⲆⲆᐃ(Xr.ⲆⲆᐃⵠΔⲆⵠ);
      g[ya].ᐃΔᐃⵠᐃ();
      Xw.ⵠᐃⲆ.x = c;
      Xw.ⵠᐃⲆ.y = d;
      mf.time = e;
    }
  }
  function Pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    wb(e, a * -78, a * -54.5, a * 156, a * 109, a * oh);
    e.restore();
    cb(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    wb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    cb(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    wb(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    cb(e, c[3], c[4], Og);
    e.save();
    e.translate(a * 79, a * 54);
    wb(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    cb(e, undefined, c[Oj], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    cb(e, Hq, c[U], nb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    cb(e, Jg, c[Bq], eh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    cb(e, ut, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    cb(e, mg, c[Ys], Dt);
    e.save();
    e.translate(a * 79, a * 113);
    wb(e, a * -18, a * -Nb, a * 36, a * 4, a * 20);
    e.restore();
    cb(e, undefined, c[zj], $i);
    e.save();
    e.translate(a * 75, a * 118);
    wb(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    cb(e, c[Iq]);
    return d;
  }
  function Ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    wb(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    cb(e, c[ie]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * ll, kq * a);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    wb(e, a * -64, a * -4.5, a * 129, Lo * a, a * q);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-Uh * a, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    wb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    cb(e, c[2], c[Tr], ig * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(ed * a, Gs * a);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    wb(e, a * -4.5, a * -61, a * 9, a * 129, a * pb);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = Ol;
    e.translate(a * -Eq, a * -ed);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    wb(e, a * -4.5, a * -61, a * 9, a * 129, tb * a);
    e.restore();
    cb(e, c[Zh], c[ig], a * qo);
    e.globalAlpha = b ? 0.5 : Ot;
    e.translate(a * tb, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    wb(e, a * -4.5, a * -65, a * 9, a * 129, a * pb);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -M);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    wb(e, a * -4.5, a * -65, $o * a, a * 129, a * 5);
    e.restore();
    cb(e, c[2], c[3], Ks * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(z * a, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    wb(e, a * -65.5, a * -qg, a * 129, a * 9, a * 5);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = Ol;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    wb(e, a * -65.5, a * -nj, a * 129, a * 9, a * 5);
    e.restore();
    cb(e, c[2], c[nq], a * ea);
    e.globalAlpha = b ? 0.5 : Te;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    wb(e, -tk * a, a * -11.5, a * 22, a * 22, a * Eq);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -kq, a * -z);
    e.save();
    e.translate(a * tr, a * 18.1015625);
    wb(e, a * -11, a * -11.5, a * 22, a * 22, a * tb);
    e.restore();
    cb(e, c[Gl], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, Eq * a);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    wb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    cb(e, c[Rq]);
    e.globalAlpha = za;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    wb(e, a * -10.5, a * -11.5, a * 21, a * 22, Oj * a);
    e.restore();
    cb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : yg;
    e.translate(a * M, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    wb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -kq, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    wb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    cb(e, c[Zh], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : ie;
    e.translate(Xg * a, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    wb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    cb(e, c[Zj]);
    e.globalAlpha = 1;
    e.translate(a * -z, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    wb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    cb(e, c[jk], c[Wg], a * 3);
    return d;
  }
  function kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * ql);
    e.bezierCurveTo(a * 169, a * la, a * 212, a * 9, a * 241, a * pb);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * Vr);
    e.closePath();
    cb(e, c[Kh], c[1], a * Mi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    cb(e, c[Yl], c[3], rg * a);
    return d;
  }
  function xd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    cb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    cb(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    cb(d, b[2]);
    return c;
  }
  function Jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * Yg, xt * a);
    e.globalAlpha = 0.3;
    fb(e, a * 98, a * 99, a * Yq);
    cb(e, c[0]);
    e.globalAlpha = 0.5;
    fb(e, a * 98, a * 99, a * 90);
    cb(e, c[1]);
    return d;
  }
  function Md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, ji * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    cb(e, c[Lr]);
    e.globalAlpha = ie;
    e.translate(ps, a * -U);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, U * a);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    cb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    cb(e, c[Ut], c[bs], sk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    cb(e, c[nq], c[2], a * Ds);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    cb(e, c[4], c[2], a * Ra);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    cb(e, c[4], c[2], a * gn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    cb(e, c[Dt], c[xq], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    cb(e, c[gl], c[2], a * sk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    cb(e, c[3], c[bs], a * 10);
    return d;
  }
  function Bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Gt === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      Tb(e, Ar, a * 41, a * Th);
      e.restore();
      cb(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    Tb(e, ng, a * 41, a * 10);
    cb(e, c[1], c[2], Ps * a);
    Tb(e, ur, a * 35, a * J);
    cb(e, c[3], c[qg], a * 4);
    Tb(e, Ni, a * 23, z * a);
    e.restore();
    cb(e, c[ll]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    wb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    cb(e, c[eh], c[Mq], a * Gl);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(tg);
    wb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    cb(e, c[Ps], c[ol], a * 2);
    fb(e, a * 45, a * 29, a * 7);
    cb(e, c[Eg]);
    fb(e, a * 45, a * 61, a * Js);
    cb(e, c[nr]);
    fb(e, a * 28, a * 45, a * 7);
    cb(e, c[kq]);
    fb(e, a * 62, a * 45, ql * a);
    cb(e, c[Oj]);
    return d;
  }
  function Dd() {
    new Date().getTime();
    am();
    (function () {
      ΔΔ[Xr.ⵠⵠⵠⵠΔⲆΔ] = du(za, [{
        f: Qd,
        x: 0,
        y: wj,
        a: 1,
        r: mj,
        c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆⵠΔⲆΔⲆⵠ] = ΔΔ[Xr.ⵠⵠⵠⵠΔⲆΔ];
      ΔΔ[Xr.ⵠⵠᐃⵠᐃᐃⵠ] = [];
      ΔΔ[Xr.ⵠⵠᐃⵠᐃᐃⵠ][Rq] = Ⲇⵠ.ⲆᐃⵠⲆΔΔΔ;
      ΔΔ[Xr.ⵠⵠᐃⵠᐃᐃⵠ][1] = Ⲇⵠ.ⲆΔᐃⲆⵠΔⲆ;
      ΔΔ[Xr.ⵠⵠᐃⵠᐃᐃⵠ][2] = Ⲇⵠ.ᐃᐃⵠΔᐃⲆΔ;
      ΔΔ[Xr.ᐃΔⵠᐃⲆⵠⲆ] = ΔΔ[Xr.ⵠⵠᐃⵠᐃᐃⵠ];
      ΔΔ[Xr.ⵠᐃⲆᐃΔᐃᐃ] = [];
      ΔΔ[Xr.ⵠᐃⲆᐃΔᐃᐃ][gu] = Ⲇⵠ.ⲆΔᐃᐃᐃⵠΔ;
      ΔΔ[Xr.ⵠᐃⲆᐃΔᐃᐃ][1] = Ⲇⵠ.ᐃⵠΔΔΔⵠⵠ;
      ΔΔ[Xr.ⵠᐃⲆᐃΔᐃᐃ][2] = Ⲇⵠ.ⲆᐃⲆᐃⵠⵠᐃ;
      ΔΔ[Xr.ⵠΔⵠᐃΔⲆⲆ] = ΔΔ[Xr.ⵠᐃⲆᐃΔᐃᐃ];
      ΔΔ[Xr.ΔᐃΔΔⲆⵠᐃ] = [];
      ΔΔ[Xr.ΔᐃΔΔⲆⵠᐃ][Rq] = Ⲇⵠ.ⲆΔᐃΔⲆⲆᐃ;
      ΔΔ[Xr.ΔᐃΔΔⲆⵠᐃ][1] = Ⲇⵠ.ⵠⵠⲆᐃᐃⵠⲆ;
      ΔΔ[Xr.ΔᐃΔΔⲆⵠᐃ][Hj] = Ⲇⵠ.ᐃⲆᐃⲆⲆⲆᐃ;
      ΔΔ[Xr.ΔᐃΔⲆⲆⵠⲆ] = ΔΔ[Xr.ΔᐃΔΔⲆⵠᐃ];
      ΔΔ[Xr.ⲆⲆΔΔΔΔᐃ] = [];
      ΔΔ[Xr.ⲆⲆΔΔΔΔᐃ][Rq] = Ⲇⵠ.ⲆᐃᐃⲆᐃⲆᐃ;
      ΔΔ[Xr.ⲆⲆΔΔΔΔᐃ][xt] = Ⲇⵠ.ⵠᐃⲆⵠΔΔⵠ;
      ΔΔ[Xr.ⲆⲆΔΔΔΔᐃ][Pn] = Ⲇⵠ.ᐃΔⲆΔᐃⲆΔ;
      ΔΔ[Xr.ᐃⵠⲆΔΔⵠⵠ] = ΔΔ[Xr.ⲆⲆΔΔΔΔᐃ];
      ΔΔ[Xr.ⲆΔᐃΔⵠΔⵠ] = [];
      ΔΔ[Xr.ⲆΔᐃΔⵠΔⵠ][0] = Ⲇⵠ.ΔΔⵠⵠΔᐃⲆ;
      ΔΔ[Xr.ⲆΔᐃΔⵠΔⵠ][rg] = Ⲇⵠ.ᐃΔᐃΔⵠⲆΔ;
      ΔΔ[Xr.ⲆΔᐃΔⵠΔⵠ][Zg] = Ⲇⵠ.ΔⵠⵠⲆⲆᐃΔ;
      ΔΔ[Xr.ΔⵠΔΔΔΔⵠ] = ΔΔ[Xr.ⲆΔᐃΔⵠΔⵠ];
      ΔΔ[Xr.ΔⲆᐃⲆⲆⲆⲆ] = [];
      ΔΔ[Xr.ΔⲆᐃⲆⲆⲆⲆ][In] = Ⲇⵠ.ᐃⲆΔⵠᐃᐃⵠ;
      ΔΔ[Xr.ΔⲆᐃⲆⲆⲆⲆ][1] = Ⲇⵠ.ᐃΔΔᐃᐃΔᐃ;
      ΔΔ[Xr.ΔⲆᐃⲆⲆⲆⲆ][2] = Ⲇⵠ.ⵠΔᐃΔⲆᐃΔ;
      ΔΔ[Xr.ΔⲆⲆᐃᐃᐃⵠ] = ΔΔ[Xr.ΔⲆᐃⲆⲆⲆⲆ];
      ΔΔ[Xr.ΔⲆΔⲆⵠⵠᐃ] = ΔΔ[Xr.ΔⲆᐃⲆⲆⲆⲆ];
      ΔΔ[Xr.ⵠᐃⲆⵠⵠⵠΔ] = [];
      ΔΔ[Xr.ⵠᐃⲆⵠⵠⵠΔ][Lr] = Ⲇⵠ.ⲆⵠᐃᐃᐃΔⵠᐃᐃ;
      ΔΔ[Xr.ⵠᐃⲆⵠⵠⵠΔ][Oq] = Ⲇⵠ.ⵠⵠΔⵠⲆⲆᐃⵠᐃ;
      ΔΔ[Xr.ⵠᐃⲆⵠⵠⵠΔ][2] = Ⲇⵠ.ⵠⵠᐃⲆΔΔᐃⲆΔ;
      ΔΔ[Xr.ⵠᐃⲆᐃΔⵠᐃ] = ΔΔ[Xr.ⵠᐃⲆⵠⵠⵠΔ];
      ΔΔ[Xr.ⲆΔΔᐃⵠⲆⲆ] = ΔΔ[Xr.ⵠᐃⲆⵠⵠⵠΔ];
      ΔΔ[Xr.ΔΔᐃΔⲆΔⵠ] = [];
      ΔΔ[Xr.ΔΔᐃΔⲆΔⵠ][zl] = Ⲇⵠ.ΔᐃⵠΔΔⲆΔ;
      ΔΔ[Xr.ΔΔᐃΔⲆΔⵠ][1] = Ⲇⵠ.ᐃⲆᐃᐃᐃⲆⵠ;
      ΔΔ[Xr.ΔΔᐃΔⲆΔⵠ][2] = Ⲇⵠ.ⲆⵠᐃⲆΔⵠⵠ;
      ΔΔ[Xr.ⲆᐃⵠᐃᐃΔΔ] = ΔΔ[Xr.ΔΔᐃΔⲆΔⵠ];
      ΔΔ[Xr.ⵠⲆⲆᐃⵠΔᐃ] = ΔΔ[Xr.ΔΔᐃΔⲆΔⵠ];
      ΔΔ[Xr.ⲆᐃⵠⲆΔⵠⲆ] = [];
      ΔΔ[Xr.ⲆᐃⵠⲆΔⵠⲆ][0] = Ⲇⵠ.ⲆⲆⲆᐃΔⵠΔ;
      ΔΔ[Xr.ⲆᐃⵠⲆΔⵠⲆ][yg] = Ⲇⵠ.ΔΔΔⵠᐃΔⲆ;
      ΔΔ[Xr.ⲆᐃⵠⲆΔⵠⲆ][2] = Ⲇⵠ.ᐃⵠⲆᐃⲆᐃᐃ;
      ΔΔ[Xr.ⲆⵠⵠΔᐃᐃⲆ] = ΔΔ[Xr.ⲆᐃⵠⲆΔⵠⲆ];
      ΔΔ[Xr.ⵠⵠΔⵠᐃΔⵠ] = ΔΔ[Xr.ⲆᐃⵠⲆΔⵠⲆ];
      ΔΔ[Xr.ⲆΔᐃⲆΔΔᐃ] = [];
      ΔΔ[Xr.ⲆΔᐃⲆΔΔᐃ][tg] = Ⲇⵠ.ΔⵠᐃⲆⵠⲆᐃ;
      ΔΔ[Xr.ⲆΔᐃⲆΔΔᐃ][lb] = Ⲇⵠ.ⲆΔΔᐃⵠΔΔ;
      ΔΔ[Xr.ⲆΔᐃⲆΔΔᐃ][2] = Ⲇⵠ.ⲆᐃΔⲆⲆⵠᐃ;
      ΔΔ[Xr.ⲆᐃΔⲆΔΔᐃ] = ΔΔ[Xr.ⲆΔᐃⲆΔΔᐃ];
      ΔΔ[Xr.ᐃΔᐃⵠⵠΔⲆ] = [];
      ΔΔ[Xr.ᐃΔᐃⵠⵠΔⲆ][ya] = Ⲇⵠ.ⵠⲆⲆⵠΔᐃⲆ;
      ΔΔ[Xr.ᐃΔᐃⵠⵠΔⲆ][mk] = Ⲇⵠ.ⵠⵠᐃⵠⲆⵠᐃ;
      ΔΔ[Xr.ᐃΔᐃⵠⵠΔⲆ][Jt] = Ⲇⵠ.ΔⵠΔⵠᐃᐃᐃ;
      ΔΔ[Xr.ᐃΔΔᐃΔᐃᐃ] = ΔΔ[Xr.ᐃΔᐃⵠⵠΔⲆ];
      ΔΔ[Xr.ᐃⵠᐃⲆᐃΔⵠ] = ΔΔ[Xr.ᐃΔᐃⵠⵠΔⲆ];
      ΔΔ[Xr.ⲆⲆΔⲆⵠⲆΔ] = [];
      ΔΔ[Xr.ⲆⲆΔⲆⵠⲆΔ][0] = Ⲇⵠ.ᐃⵠⵠΔΔⲆⵠ;
      ΔΔ[Xr.ⲆⲆΔⲆⵠⲆΔ][xt] = Ⲇⵠ.ⲆΔⲆᐃⵠΔΔ;
      ΔΔ[Xr.ⲆⲆΔⲆⵠⲆΔ][2] = Ⲇⵠ.ᐃⵠΔᐃⵠᐃⵠ;
      ΔΔ[Xr.ΔⵠⲆⲆΔⲆⲆ] = ΔΔ[Xr.ⲆⲆΔⲆⵠⲆΔ];
      ΔΔ[Xr.ⵠⵠᐃⵠⵠⵠᐃ] = ΔΔ[Xr.ⲆⲆΔⲆⵠⲆΔ];
      ΔΔ[Xr.ⵠᐃΔΔⲆⲆⵠ] = [];
      ΔΔ[Xr.ⵠᐃΔΔⲆⲆⵠ][Db] = Ⲇⵠ.ΔⲆⵠⲆᐃᐃⵠ;
      ΔΔ[Xr.ⵠᐃΔΔⲆⲆⵠ][1] = Ⲇⵠ.ⲆᐃΔⲆⲆᐃΔ;
      ΔΔ[Xr.ⵠᐃΔΔⲆⲆⵠ][2] = Ⲇⵠ.ᐃⵠᐃⵠⲆⲆⵠ;
      ΔΔ[Xr.ᐃⲆⵠⵠΔΔᐃ] = ΔΔ[Xr.ⵠᐃΔΔⲆⲆⵠ];
      ΔΔ[Xr.ⲆⵠΔΔΔΔΔ] = ΔΔ[Xr.ⵠᐃΔΔⲆⲆⵠ];
      ΔΔ[Xr.ΔΔⲆⵠΔⵠⵠ] = [];
      ΔΔ[Xr.ΔΔⲆⵠΔⵠⵠ][Eh] = Ⲇⵠ.ⲆᐃⵠΔⲆΔΔ;
      ΔΔ[Xr.ΔΔⲆⵠΔⵠⵠ][1] = Ⲇⵠ.ⲆⵠⲆΔᐃⵠⵠ;
      ΔΔ[Xr.ΔΔⲆⵠΔⵠⵠ][2] = Ⲇⵠ.ⲆⵠⲆⲆⵠⲆΔ;
      ΔΔ[Xr.ᐃᐃⵠΔⲆⲆⲆ] = ΔΔ[Xr.ΔΔⲆⵠΔⵠⵠ];
      ΔΔ[Xr.ΔᐃⵠΔᐃⵠⲆ] = ΔΔ[Xr.ΔΔⲆⵠΔⵠⵠ];
      ΔΔ[Xr.ⲆᐃΔⵠΔΔⲆ] = [];
      ΔΔ[Xr.ⲆᐃΔⵠΔΔⲆ][0] = Ⲇⵠ.ᐃⵠᐃⵠⵠᐃⲆ;
      ΔΔ[Xr.ⲆᐃΔⵠΔΔⲆ][mk] = Ⲇⵠ.ᐃΔⲆⵠᐃⲆⲆ;
      ΔΔ[Xr.ⲆᐃΔⵠΔΔⲆ][2] = Ⲇⵠ.ᐃⲆΔⵠⲆⲆⵠ;
      ΔΔ[Xr.ᐃⵠⵠⲆᐃⵠΔ] = ΔΔ[Xr.ⲆᐃΔⵠΔΔⲆ];
      ΔΔ[Xr.ⲆⲆΔⵠΔΔⵠ] = ΔΔ[Xr.ⲆᐃΔⵠΔΔⲆ];
      ΔΔ[Xr.ΔᐃⲆⵠᐃⲆⲆ] = [];
      ΔΔ[Xr.ΔᐃⲆⵠᐃⲆⲆ][Hi] = Ⲇⵠ.ⲆᐃⲆΔⵠᐃⵠ;
      ΔΔ[Xr.ΔᐃⲆⵠᐃⲆⲆ][hd] = Ⲇⵠ.ⲆΔⲆᐃⵠⲆΔ;
      ΔΔ[Xr.ΔᐃⲆⵠᐃⲆⲆ][ss] = Ⲇⵠ.ΔⲆⵠⵠⵠⲆⵠ;
      ΔΔ[Xr.ⲆⲆⵠⵠΔⲆⵠ] = ΔΔ[Xr.ΔᐃⲆⵠᐃⲆⲆ];
      ΔΔ[Xr.ⵠⲆⵠⵠΔⵠⵠ] = ΔΔ[Xr.ΔᐃⲆⵠᐃⲆⲆ];
      ΔΔ[Xr.ᐃΔᐃᐃΔⲆⲆ] = [];
      ΔΔ[Xr.ᐃΔᐃᐃΔⲆⲆ][Db] = Ⲇⵠ.ⵠΔⲆΔⲆⵠᐃ;
      ΔΔ[Xr.ᐃΔᐃᐃΔⲆⲆ][Xn] = Ⲇⵠ.ⵠⲆΔⵠΔΔⵠ;
      ΔΔ[Xr.ᐃΔᐃᐃΔⲆⲆ][Yl] = Ⲇⵠ.ⲆⲆⲆΔΔΔΔ;
      ΔΔ[Xr.ᐃⵠᐃᐃⲆΔⵠ] = ΔΔ[Xr.ᐃΔᐃᐃΔⲆⲆ];
      ΔΔ[Xr.ΔⲆⲆΔⵠⲆⲆ] = ΔΔ[Xr.ᐃΔᐃᐃΔⲆⲆ];
      ΔΔ[Xr.ΔᐃⲆᐃᐃΔᐃ] = [];
      ΔΔ[Xr.ΔᐃⲆᐃᐃΔᐃ][0] = Ⲇⵠ.ΔΔⲆΔᐃΔᐃ;
      ΔΔ[Xr.ΔᐃⲆᐃᐃΔᐃ][rg] = Ⲇⵠ.ᐃⲆⲆΔⲆⲆⵠ;
      ΔΔ[Xr.ΔᐃⲆᐃᐃΔᐃ][lr] = Ⲇⵠ.ᐃᐃᐃᐃΔᐃⲆ;
      ΔΔ[Xr.ΔΔⲆΔⲆⵠⲆ] = ΔΔ[Xr.ΔᐃⲆᐃᐃΔᐃ];
      ΔΔ[Xr.ᐃᐃᐃⵠΔᐃᐃ] = ΔΔ[Xr.ΔᐃⲆᐃᐃΔᐃ];
      ΔΔ[Xr.ΔᐃⵠΔᐃⲆΔ] = [];
      ΔΔ[Xr.ΔᐃⵠΔᐃⲆΔ][Hi] = Ⲇⵠ.ⲆⲆᐃᐃⲆⵠΔ;
      ΔΔ[Xr.ΔᐃⵠΔᐃⲆΔ][1] = Ⲇⵠ.ⵠᐃⲆΔᐃⲆΔ;
      ΔΔ[Xr.ΔᐃⵠΔᐃⲆΔ][xj] = Ⲇⵠ.ΔᐃⲆⲆᐃⵠΔ;
      ΔΔ[Xr.ⲆΔⲆⲆⵠⵠΔ] = ΔΔ[Xr.ΔᐃⵠΔᐃⲆΔ];
      ΔΔ[Xr.ⵠᐃᐃⲆⲆⵠⲆ] = ΔΔ[Xr.ΔᐃⵠΔᐃⲆΔ];
      ΔΔ[Xr.ᐃⵠⲆⲆⲆᐃⵠ] = [];
      ΔΔ[Xr.ᐃⵠⲆⲆⲆᐃⵠ][0] = Ⲇⵠ.ⵠⵠⵠΔᐃⲆⲆ;
      ΔΔ[Xr.ᐃⵠⲆⲆⲆᐃⵠ][yg] = Ⲇⵠ.ᐃΔⲆᐃⲆᐃⵠᐃⲆ;
      ΔΔ[Xr.ᐃⵠⲆⲆⲆᐃⵠ][2] = Ⲇⵠ.ⲆⵠᐃΔᐃΔᐃᐃᐃ;
      ΔΔ[Xr.ᐃⵠⲆΔΔⵠΔ] = ΔΔ[Xr.ᐃⵠⲆⲆⲆᐃⵠ];
      ΔΔ[Xr.ⵠⵠⲆΔΔᐃⲆ] = ΔΔ[Xr.ᐃⵠⲆⲆⲆᐃⵠ];
      ΔΔ[Xr.ⲆΔΔⲆⵠⲆⲆ] = [];
      ΔΔ[Xr.ⲆΔΔⲆⵠⲆⲆ][tg] = Ⲇⵠ.ᐃΔᐃⲆᐃΔⵠΔΔ;
      ΔΔ[Xr.ⲆΔΔⲆⵠⲆⲆ][1] = Ⲇⵠ.ᐃᐃⲆΔᐃⲆⵠⲆⵠ;
      ΔΔ[Xr.ⲆΔΔⲆⵠⲆⲆ][Pn] = Ⲇⵠ.ΔⲆⲆᐃⲆΔⵠⵠΔ;
      ΔΔ[Xr.ΔⲆᐃⲆⲆⵠΔ] = ΔΔ[Xr.ⲆΔΔⲆⵠⲆⲆ];
      ΔΔ[Xr.ᐃᐃᐃᐃⲆⵠᐃ] = ΔΔ[Xr.ⲆΔΔⲆⵠⲆⲆ];
      ΔΔ[Xr.ⲆⵠⵠⲆΔⵠᐃ] = [];
      ΔΔ[Xr.ⲆⵠⵠⲆΔⵠᐃ][0] = Ⲇⵠ.ᐃᐃᐃᐃᐃᐃᐃⵠᐃ;
      ΔΔ[Xr.ⲆⵠⵠⲆΔⵠᐃ][Te] = Ⲇⵠ.ⲆⵠΔᐃᐃⵠⲆᐃᐃ;
      ΔΔ[Xr.ⲆⵠⵠⲆΔⵠᐃ][Nb] = Ⲇⵠ.ⵠⵠΔⵠⵠᐃⵠⲆⲆ;
      ΔΔ[Xr.ⵠⲆⲆΔⲆⲆΔ] = ΔΔ[Xr.ⲆⵠⵠⲆΔⵠᐃ];
      ΔΔ[Xr.ⵠⵠᐃΔⲆΔⵠ] = ΔΔ[Xr.ⲆⵠⵠⲆΔⵠᐃ];
      ΔΔ[Xr.ⵠΔᐃᐃⲆᐃᐃ] = [];
      ΔΔ[Xr.ⵠΔᐃᐃⲆᐃᐃ][0] = Ⲇⵠ.ⲆᐃⲆᐃᐃᐃⲆΔΔ;
      ΔΔ[Xr.ⵠΔᐃᐃⲆᐃᐃ][1] = Ⲇⵠ.ⲆᐃⲆⲆᐃⵠᐃᐃΔ;
      ΔΔ[Xr.ⵠΔᐃᐃⲆᐃᐃ][Nb] = Ⲇⵠ.ΔᐃⵠΔΔΔΔⲆΔ;
      ΔΔ[Xr.ΔⲆᐃΔᐃΔⲆ] = ΔΔ[Xr.ⵠΔᐃᐃⲆᐃᐃ];
      ΔΔ[Xr.ⲆᐃⵠΔⵠΔⵠ] = ΔΔ[Xr.ⵠΔᐃᐃⲆᐃᐃ];
      ΔΔ[Xr.ⲆᐃΔⲆᐃᐃⵠ] = [];
      ΔΔ[Xr.ⲆᐃΔⲆᐃᐃⵠ][ya] = Ⲇⵠ.ΔΔΔΔⵠⵠⵠᐃΔ;
      ΔΔ[Xr.ⲆᐃΔⲆᐃᐃⵠ][1] = Ⲇⵠ.ΔⲆΔⲆᐃⲆⵠΔⲆ;
      ΔΔ[Xr.ⲆᐃΔⲆᐃᐃⵠ][Mt] = Ⲇⵠ.ΔⲆᐃⲆᐃᐃⲆΔᐃ;
      ΔΔ[Xr.ΔᐃᐃΔΔΔᐃ] = ΔΔ[Xr.ⲆᐃΔⲆᐃᐃⵠ];
      ΔΔ[Xr.ᐃⲆᐃΔⲆⵠᐃ] = ΔΔ[Xr.ⲆᐃΔⲆᐃᐃⵠ];
      ΔΔ[Xr.ᐃᐃᐃⵠⲆⲆᐃ] = [];
      ΔΔ[Xr.ᐃᐃᐃⵠⲆⲆᐃ][gu] = Ⲇⵠ.ⵠᐃⵠΔΔΔΔⵠᐃ;
      ΔΔ[Xr.ᐃᐃᐃⵠⲆⲆᐃ][yg] = Ⲇⵠ.ⲆᐃⵠΔΔⲆᐃⲆᐃ;
      ΔΔ[Xr.ᐃᐃᐃⵠⲆⲆᐃ][2] = Ⲇⵠ.ⲆΔⲆⵠⵠᐃⲆⲆᐃ;
      ΔΔ[Xr.ᐃⵠⵠᐃⲆᐃΔ] = ΔΔ[Xr.ᐃᐃᐃⵠⲆⲆᐃ];
      ΔΔ[Xr.ⵠⲆΔⲆΔᐃⵠ] = ΔΔ[Xr.ᐃᐃᐃⵠⲆⲆᐃ];
      ΔΔ[Xr.ΔⲆΔᐃΔⲆΔ] = [];
      ΔΔ[Xr.ΔⲆΔᐃΔⲆΔ][0] = Ⲇⵠ.ᐃⲆⲆⵠᐃΔᐃⵠⵠ;
      ΔΔ[Xr.ΔⲆΔᐃΔⲆΔ][1] = Ⲇⵠ.ΔⲆᐃⲆᐃᐃⲆΔΔ;
      ΔΔ[Xr.ΔⲆΔᐃΔⲆΔ][2] = Ⲇⵠ.ᐃΔⲆⲆⲆⵠⲆΔⵠ;
      ΔΔ[Xr.ⵠⵠⵠⲆΔⲆΔ] = ΔΔ[Xr.ΔⲆΔᐃΔⲆΔ];
      ΔΔ[Xr.ⲆᐃⵠⲆᐃᐃⵠ] = ΔΔ[Xr.ΔⲆΔᐃΔⲆΔ];
      ΔΔ[Xr.ᐃΔⵠⲆⲆⵠⲆ] = [];
      ΔΔ[Xr.ᐃΔⵠⲆⲆⵠⲆ][0] = Ⲇⵠ.ⲆⵠⲆΔⵠⵠᐃⵠⲆ;
      ΔΔ[Xr.ᐃΔⵠⲆⲆⵠⲆ][yg] = Ⲇⵠ.ᐃΔᐃᐃⲆⵠⵠᐃΔ;
      ΔΔ[Xr.ᐃΔⵠⲆⲆⵠⲆ][2] = Ⲇⵠ.ᐃⲆΔⲆⲆᐃⵠᐃᐃ;
      ΔΔ[Xr.ⲆᐃᐃᐃⵠᐃⲆ] = ΔΔ[Xr.ᐃΔⵠⲆⲆⵠⲆ];
      ΔΔ[Xr.ⲆᐃⲆⲆⲆᐃᐃ] = ΔΔ[Xr.ᐃΔⵠⲆⲆⵠⲆ];
      ΔΔ[Xr.ⲆⵠⵠᐃᐃⲆⲆ] = [];
      ΔΔ[Xr.ⲆⵠⵠᐃᐃⲆⲆ][wj] = Ⲇⵠ.ᐃᐃⵠⲆⲆⵠᐃⵠⵠ;
      ΔΔ[Xr.ⲆⵠⵠᐃᐃⲆⲆ][1] = Ⲇⵠ.ΔᐃΔᐃⵠΔᐃᐃΔ;
      ΔΔ[Xr.ⲆⵠⵠᐃᐃⲆⲆ][2] = Ⲇⵠ.ⵠⵠⲆΔⵠⵠΔᐃⵠ;
      ΔΔ[Xr.ⲆⵠᐃᐃΔⵠΔ] = ΔΔ[Xr.ⲆⵠⵠᐃᐃⲆⲆ];
      ΔΔ[Xr.ᐃΔᐃΔΔᐃᐃ] = ΔΔ[Xr.ⲆⵠⵠᐃᐃⲆⲆ];
      ΔΔ[Xr.ΔⲆⵠᐃᐃⲆΔ] = [];
      ΔΔ[Xr.ΔⲆⵠᐃᐃⲆΔ][Eh] = Ⲇⵠ.ΔᐃᐃⵠᐃᐃΔᐃΔ;
      ΔΔ[Xr.ΔⲆⵠᐃᐃⲆΔ][1] = Ⲇⵠ.ⲆᐃᐃΔᐃΔⲆⵠᐃ;
      ΔΔ[Xr.ΔⲆⵠᐃᐃⲆΔ][2] = Ⲇⵠ.ΔⵠⲆⲆⵠⵠΔΔⲆ;
      ΔΔ[Xr.ⲆⲆⵠⵠΔⵠᐃ] = ΔΔ[Xr.ΔⲆⵠᐃᐃⲆΔ];
      ΔΔ[Xr.ⵠΔⲆᐃⲆⵠΔ] = ΔΔ[Xr.ΔⲆⵠᐃᐃⲆΔ];
      ΔΔ[Xr.ΔⵠΔⵠΔΔⲆ] = [];
      ΔΔ[Xr.ΔⵠΔⵠΔΔⲆ][wj] = Ⲇⵠ.ΔΔⵠⵠΔⲆΔⵠⵠ;
      ΔΔ[Xr.ΔⵠΔⵠΔΔⲆ][qu] = Ⲇⵠ.ⵠᐃΔΔᐃᐃᐃΔᐃ;
      ΔΔ[Xr.ΔⵠΔⵠΔΔⲆ][2] = Ⲇⵠ.ᐃⲆΔⲆᐃⵠⲆⲆΔ;
      ΔΔ[Xr.ⵠΔᐃᐃΔΔᐃ] = ΔΔ[Xr.ΔⵠΔⵠΔΔⲆ];
      ΔΔ[Xr.ΔⲆΔⵠⵠᐃⵠ] = ΔΔ[Xr.ΔⵠΔⵠΔΔⲆ];
      ΔΔ[Xr.ⵠᐃⲆⵠΔⵠⵠ] = [];
      ΔΔ[Xr.ⵠᐃⲆⵠΔⵠⵠ][Hi] = Ⲇⵠ.ⲆᐃᐃⲆΔⲆⵠⲆⵠ;
      ΔΔ[Xr.ⵠᐃⲆⵠΔⵠⵠ][cu] = Ⲇⵠ.ᐃⲆⵠⵠΔΔⵠⲆΔ;
      ΔΔ[Xr.ⵠᐃⲆⵠΔⵠⵠ][2] = Ⲇⵠ.ⵠᐃᐃⵠⲆⲆⲆΔᐃ;
      ΔΔ[Xr.ⵠΔⲆⲆⵠⲆⵠ] = ΔΔ[Xr.ⵠᐃⲆⵠΔⵠⵠ];
      ΔΔ[Xr.ⵠⵠⲆᐃΔᐃᐃ] = ΔΔ[Xr.ⵠᐃⲆⵠΔⵠⵠ];
      ΔΔ[Xr.ⵠᐃΔΔΔᐃⵠ] = [];
      ΔΔ[Xr.ⵠᐃΔΔΔᐃⵠ][ps] = Ⲇⵠ.ᐃⲆⵠᐃΔΔⵠᐃⲆ;
      ΔΔ[Xr.ⵠᐃΔΔΔᐃⵠ][1] = Ⲇⵠ.ΔⲆᐃⲆΔⲆⲆΔᐃ;
      ΔΔ[Xr.ⵠᐃΔΔΔᐃⵠ][Nb] = Ⲇⵠ.ΔᐃⲆⵠᐃⲆⲆⲆΔ;
      ΔΔ[Xr.ᐃⵠⲆⲆᐃⵠΔ] = ΔΔ[Xr.ⵠᐃΔΔΔᐃⵠ];
      ΔΔ[Xr.ⵠᐃⵠⵠΔΔⵠ] = ΔΔ[Xr.ⵠᐃΔΔΔᐃⵠ];
      ΔΔ[Xr.ⵠⲆᐃᐃΔΔⵠ] = [];
      ΔΔ[Xr.ⵠⲆᐃᐃΔΔⵠ][Rq] = Ⲇⵠ.ᐃᐃᐃⲆⵠⵠᐃⵠⲆ;
      ΔΔ[Xr.ⵠⲆᐃᐃΔΔⵠ][lb] = Ⲇⵠ.ᐃⵠΔΔᐃᐃⵠᐃᐃ;
      ΔΔ[Xr.ⵠⲆᐃᐃΔΔⵠ][pq] = Ⲇⵠ.ⵠᐃΔⲆΔᐃⵠᐃⵠ;
      ΔΔ[Xr.ΔᐃⵠᐃΔΔⲆ] = ΔΔ[Xr.ⵠⲆᐃᐃΔΔⵠ];
      ΔΔ[Xr.ΔⵠᐃΔⲆⲆΔ] = ΔΔ[Xr.ⵠⲆᐃᐃΔΔⵠ];
      ΔΔ[Xr.ⲆⲆⲆⵠᐃᐃᐃ] = [];
      ΔΔ[Xr.ⲆⲆⲆⵠᐃᐃᐃ][0] = Ⲇⵠ.ⲆΔⲆⲆⲆᐃΔⵠⵠ;
      ΔΔ[Xr.ⲆⲆⲆⵠᐃᐃᐃ][1] = Ⲇⵠ.ΔᐃΔΔΔᐃᐃⲆᐃ;
      ΔΔ[Xr.ⲆⲆⲆⵠᐃᐃᐃ][2] = Ⲇⵠ.ΔΔΔᐃⲆⵠⲆΔⵠ;
      ΔΔ[Xr.ΔⲆⵠΔᐃⵠⵠ] = ΔΔ[Xr.ⲆⲆⲆⵠᐃᐃᐃ];
      ΔΔ[Xr.ⲆⲆⵠⵠⲆᐃⵠ] = ΔΔ[Xr.ⲆⲆⲆⵠᐃᐃᐃ];
      ΔΔ[Xr.ⲆⵠΔΔΔΔᐃ] = [];
      ΔΔ[Xr.ⲆⵠΔΔΔΔᐃ][0] = Ⲇⵠ.ΔΔⵠᐃⵠⵠΔⵠⵠ;
      ΔΔ[Xr.ⲆⵠΔΔΔΔᐃ][fl] = Ⲇⵠ.ΔᐃⲆⲆᐃᐃⵠⲆⲆ;
      ΔΔ[Xr.ⲆⵠΔΔΔΔᐃ][2] = Ⲇⵠ.ᐃΔᐃⵠⲆⲆⲆⵠⵠ;
      ΔΔ[Xr.ΔⵠⲆⲆᐃᐃΔ] = ΔΔ[Xr.ⲆⵠΔΔΔΔᐃ];
      ΔΔ[Xr.ⵠⵠᐃⲆᐃⲆᐃ] = ΔΔ[Xr.ⲆⵠΔΔΔΔᐃ];
      ΔΔ[Xr.ⵠⵠⲆⵠⵠᐃⵠ] = [];
      ΔΔ[Xr.ⵠⵠⲆⵠⵠᐃⵠ][0] = Ⲇⵠ.ⵠⲆΔᐃΔᐃΔΔⲆ;
      ΔΔ[Xr.ⵠⵠⲆⵠⵠᐃⵠ][1] = Ⲇⵠ.ΔⵠΔᐃᐃᐃⵠΔⲆ;
      ΔΔ[Xr.ⵠⵠⲆⵠⵠᐃⵠ][Zh] = Ⲇⵠ.ᐃⵠⲆᐃΔⲆⵠⲆⵠ;
      ΔΔ[Xr.ⲆᐃᐃΔΔᐃⲆ] = ΔΔ[Xr.ⵠⵠⲆⵠⵠᐃⵠ];
      ΔΔ[Xr.ΔΔᐃᐃΔᐃⲆ] = ΔΔ[Xr.ⵠⵠⲆⵠⵠᐃⵠ];
      ΔΔ[Xr.ᐃᐃᐃⲆᐃᐃⲆ] = [];
      ΔΔ[Xr.ᐃᐃᐃⲆᐃᐃⲆ][Pg] = Ⲇⵠ.ⵠⵠⵠⵠⲆΔᐃΔⵠ;
      ΔΔ[Xr.ᐃᐃᐃⲆᐃᐃⲆ][Ug] = Ⲇⵠ.ⲆⲆⲆΔⲆⲆΔⵠⵠ;
      ΔΔ[Xr.ᐃᐃᐃⲆᐃᐃⲆ][xq] = Ⲇⵠ.ᐃᐃⲆᐃᐃⵠⲆᐃΔ;
      ΔΔ[Xr.ⵠⲆᐃⲆⲆΔⲆ] = ΔΔ[Xr.ᐃᐃᐃⲆᐃᐃⲆ];
      ΔΔ[Xr.ΔⲆⲆΔΔᐃⵠ] = ΔΔ[Xr.ᐃᐃᐃⲆᐃᐃⲆ];
      ΔΔ[Xr.ΔΔΔΔⲆᐃⵠ] = [];
      ΔΔ[Xr.ΔΔΔΔⲆᐃⵠ][ps] = Ⲇⵠ.ⲆⵠⲆⵠⵠΔⲆ;
      ΔΔ[Xr.ΔΔΔΔⲆᐃⵠ][rg] = Ⲇⵠ.ⵠⲆⲆΔᐃⵠᐃ;
      ΔΔ[Xr.ΔΔΔΔⲆᐃⵠ][2] = Ⲇⵠ.ᐃⲆⲆⲆΔⲆⲆ;
      ΔΔ[Xr.ᐃⵠⵠⲆᐃᐃᐃ] = ΔΔ[Xr.ΔΔΔΔⲆᐃⵠ];
      ΔΔ[Xr.ⵠⵠᐃⲆᐃᐃⲆ] = ΔΔ[Xr.ΔΔΔΔⲆᐃⵠ];
      ΔΔ[Xr.ΔⵠᐃⲆΔⵠⲆ] = [];
      ΔΔ[Xr.ΔⵠᐃⲆΔⵠⲆ][Eh] = Ⲇⵠ.ⲆᐃⲆⵠⲆⵠΔ;
      ΔΔ[Xr.ΔⵠᐃⲆΔⵠⲆ][1] = Ⲇⵠ.ᐃᐃⵠΔⵠⲆᐃ;
      ΔΔ[Xr.ΔⵠᐃⲆΔⵠⲆ][2] = Ⲇⵠ.ΔⵠΔⵠⲆⵠⵠ;
      ΔΔ[Xr.ᐃΔⵠⵠⲆᐃΔ] = ΔΔ[Xr.ΔⵠᐃⲆΔⵠⲆ];
      ΔΔ[Xr.ᐃⵠⵠᐃⵠᐃᐃⲆⲆ] = ΔΔ[Xr.ΔⵠᐃⲆΔⵠⲆ];
      ΔΔ[Xr.ᐃⵠᐃᐃⲆⵠΔ] = du(lb, [{
        f: Mb,
        x: zl,
        y: Zj,
        a: Oq,
        r: 0,
        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
      }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⵠⵠⵠΔⲆΔⲆ] = ΔΔ[Xr.ᐃⵠᐃᐃⲆⵠΔ];
      ΔΔ[Xr.ⵠⲆⲆⵠⲆⲆⵠ] = du(qu, [{
        f: vc,
        x: Pg,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔⲆΔⲆⵠⲆⵠ] = ΔΔ[Xr.ⵠⲆⲆⵠⲆⲆⵠ];
      ΔΔ[Xr.ⵠᐃΔΔᐃⲆⲆ] = du(1, [{
        f: Xt,
        x: -fl,
        y: Hi,
        a: yg,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Zt,
        x: -xt,
        y: 0,
        a: qu,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: au,
        x: -1,
        y: 0,
        a: 1,
        r: ps,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔᐃΔⵠⲆΔⵠ] = ΔΔ[Xr.ⵠᐃΔΔᐃⲆⲆ];
      ΔΔ[Xr.ΔΔΔΔᐃⲆⲆ] = du(Xn, [{
        f: Yt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃΔᐃⲆΔᐃⲆ] = du(lb, [{
        f: ld,
        x: ya,
        y: Lr,
        a: rg,
        r: 0,
        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⵠⲆΔⵠⵠΔⲆ] = ΔΔ[Xr.ᐃΔᐃⲆΔᐃⲆ];
      ΔΔ[Xr.ⵠⲆⵠⲆΔⲆⲆ] = du(za, [{
        f: Ou,
        x: 0,
        y: 0,
        a: fl,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔΔⲆᐃᐃΔΔ] = ΔΔ[Xr.ⵠⲆⵠⲆΔⲆⲆ];
      ΔΔ[Xr.ᐃΔⵠⲆᐃⲆᐃ] = du(js, [{
        f: Ou,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"]
      }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃᐃⲆᐃⲆΔⵠ] = ΔΔ[Xr.ᐃΔⵠⲆᐃⲆᐃ];
      ΔΔ[Xr.ⵠᐃⲆΔⵠΔΔ] = du(fl, [{
        f: Ou,
        x: 0,
        y: zl,
        a: 1,
        r: 0,
        c: ["#c67933", "#b17238"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆᐃⲆⲆΔᐃΔ] = ΔΔ[Xr.ⵠᐃⲆΔⵠΔΔ];
      ΔΔ[Xr.ⲆⵠⲆⵠⲆᐃΔ] = du(1, [{
        f: Ou,
        x: mj,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e8e8e8", "#bbbbbb"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆΔⲆⲆⲆⵠⲆ] = ΔΔ[Xr.ⲆⵠⲆⵠⲆᐃΔ];
      ΔΔ[Xr.ⵠⵠΔᐃⲆⲆᐃ] = du(1, [{
        f: Ou,
        x: Lr,
        y: Bg,
        a: 1,
        r: 0,
        c: ["#328a56", "#449573"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔⲆΔᐃΔⲆⵠ] = ΔΔ[Xr.ⵠⵠΔᐃⲆⲆᐃ];
      ΔΔ[Xr.ᐃᐃᐃᐃΔⲆⲆ] = du(hd, [{
        f: Ou,
        x: Db,
        y: tt,
        a: za,
        r: 0,
        c: ["#c98e2f", "#a36b11"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃᐃᐃΔᐃⲆⲆ] = ΔΔ[Xr.ᐃᐃᐃᐃΔⲆⲆ];
      ΔΔ[Xr.ᐃⲆⲆΔⲆΔⵠ] = ΔΔ[Xr.ᐃᐃᐃᐃΔⲆⲆ];
      ΔΔ[Xr.ΔΔᐃᐃΔⵠΔ] = du(fl, [{
        f: Ou,
        x: Kh,
        y: Hi,
        a: Te,
        r: Db,
        c: ["#13a56d", "#098a58"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆⲆΔⵠⲆΔⵠ] = ΔΔ[Xr.ΔΔᐃᐃΔⵠΔ];
      ΔΔ[Xr.ΔⵠⵠⲆⵠᐃⵠ] = ΔΔ[Xr.ΔΔᐃᐃΔⵠΔ];
      ΔΔ[Xr.ᐃⵠⲆᐃⵠΔⲆ] = du(1, [{
        f: Ou,
        x: Kh,
        y: Pg,
        a: ie,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆΔⲆⵠᐃΔΔ] = ΔΔ[Xr.ᐃⵠⲆᐃⵠΔⲆ];
      ΔΔ[Xr.ⵠΔᐃᐃⵠⵠⵠ] = ΔΔ[Xr.ᐃⵠⲆᐃⵠΔⲆ];
      ΔΔ[Xr.ᐃᐃⵠΔΔΔⵠ] = du(1, [{
        f: Ou,
        x: Da,
        y: wj,
        a: qu,
        r: 0,
        c: ["#b22419", "#99110e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃΔΔⲆⵠᐃⵠ] = ΔΔ[Xr.ᐃᐃⵠΔΔΔⵠ];
      ΔΔ[Xr.ⲆⵠᐃᐃⲆΔΔ] = ΔΔ[Xr.ᐃᐃⵠΔΔΔⵠ];
      ΔΔ[Xr.ⵠⲆⵠⲆⵠΔⲆ] = du(hs, [{
        f: lu,
        x: -2,
        y: -2,
        a: hd,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"]
      }, {
        f: iu,
        x: -2,
        y: -2,
        a: qu,
        r: -Math.PI / ia,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔᐃΔᐃⵠⲆᐃ] = ΔΔ[Xr.ⵠⲆⵠⲆⵠΔⲆ];
      ΔΔ[Xr.ⲆΔⵠⲆⲆⵠΔ] = du(1, [{
        f: pu,
        x: -Zh,
        y: -1,
        a: cu,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
      }, {
        f: iu,
        x: -xj,
        y: -1,
        a: jh,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔᐃⵠᐃᐃⲆⵠ] = ΔΔ[Xr.ⲆΔⵠⲆⲆⵠΔ];
      ΔΔ[Xr.ΔᐃⵠΔΔⵠⲆ] = du(1, [{
        f: vu,
        x: dg,
        y: Kh,
        a: 1,
        r: Math.PI / nr,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
      }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃΔⲆΔⵠⲆΔ] = du(1, [{
        f: Nu,
        x: Nb,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃΔΔΔⵠⲆⲆ] = du(qu, [{
        f: Ju,
        x: 2,
        y: ps,
        a: za,
        r: Math.PI / Wl,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆᐃⲆᐃᐃΔΔ] = du(ie, [{
        f: Du,
        x: xq,
        y: 0,
        a: hd,
        r: Math.PI / ta,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ΔΔᐃΔⲆΔⲆ] = du(1, [{
        f: Hu,
        x: 2,
        y: ps,
        a: 1,
        r: Math.PI / tb,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃⵠⵠᐃᐃⵠᐃ] = du(1, [{
        f: yu,
        x: 2,
        y: ya,
        a: ie,
        r: Math.PI / ll,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠᐃⵠⲆΔᐃΔ] = du(qu, [{
        f: Pu,
        x: 2,
        y: Rs,
        a: Ot,
        r: Math.PI / tb,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠᐃΔⲆᐃᐃⵠ] = du(1, [{
        f: Fu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / z,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃⲆᐃΔᐃᐃΔ] = du(hd, [{
        f: Fu,
        x: -Yl,
        y: q,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃΔΔΔⲆⵠᐃ] = du(Oq, [{
        f: Fu,
        x: -Zg,
        y: 5,
        a: 1,
        r: -Math.PI / Eq,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆⲆⲆⲆⲆⲆᐃ] = du(Ug, [{
        f: Fu,
        x: -Yg,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ΔⲆᐃⲆΔᐃⲆ] = du(yg, [{
        f: Fu,
        x: -Zh,
        y: 5,
        a: 1,
        r: -Math.PI / Eq,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠΔΔᐃᐃΔᐃ] = [];
      ΔΔ[Xr.ⵠΔΔᐃᐃΔᐃ][Rs] = Ⲇⵠ.ⵠⲆⲆΔᐃⵠⲆ;
      ΔΔ[Xr.ⵠΔΔᐃᐃΔᐃ][Ot] = Ⲇⵠ.ⲆΔⵠᐃᐃᐃⲆ;
      ΔΔ[Xr.ⵠΔΔᐃᐃΔᐃ][2] = Ⲇⵠ.ΔⲆⵠΔⲆᐃⵠ;
      ΔΔ[Xr.ᐃⲆᐃⵠᐃΔΔ] = ΔΔ[Xr.ⵠΔΔᐃᐃΔᐃ];
      ΔΔ[Xr.ⲆΔⵠⵠΔⵠⲆ] = ΔΔ[Xr.ⵠΔΔᐃᐃΔᐃ];
      ΔΔ[Xr.ⲆⵠⵠⲆⲆⲆᐃ] = du(yg, [{
        f: id,
        x: -nr,
        y: -5,
        a: 1,
        r: wj,
        c: ["#252B28", "#58645F", "#75827D"]
      }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ᐃⲆΔΔⵠⲆΔ] = du(Ug, [{
        f: ad,
        x: -q,
        y: -5,
        a: cu,
        r: 0,
        c: ["#282823", "#877c2d", "#c4bc51"]
      }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⲆⲆΔⵠᐃΔⲆ] = du(1, [{
        f: rd,
        x: -5,
        y: -ed,
        a: rg,
        r: 0,
        c: ["#232828", "#3fc9c9", "#74ede6"]
      }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⵠⵠⵠΔΔᐃⵠ] = du(jh, [{
        f: lu,
        x: 0,
        y: -5,
        a: qu,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ᐃΔⲆᐃΔΔᐃ] = ΔΔ[Xr.ᐃΔΔΔⵠⲆⲆ];
      ΔΔ[Xr.ᐃⲆΔⲆⵠⲆᐃ] = ΔΔ[Xr.ⲆᐃⲆᐃᐃΔΔ];
      ΔΔ[Xr.ᐃⵠⵠⵠΔⵠΔ] = ΔΔ[Xr.ΔΔᐃΔⲆΔⲆ];
      ΔΔ[Xr.ᐃᐃⲆᐃⲆᐃⲆ] = ΔΔ[Xr.ᐃⵠⵠᐃᐃⵠᐃ];
      ΔΔ[Xr.ⲆΔⲆᐃⲆⵠᐃ] = ΔΔ[Xr.ⵠᐃⵠⲆΔᐃΔ];
      ΔΔ[Xr.ⲆᐃⵠⲆᐃⵠⲆ] = ΔΔ[Xr.ⵠᐃΔⲆᐃᐃⵠ];
      ΔΔ[Xr.ᐃⵠᐃⲆⵠΔⲆ] = ΔΔ[Xr.ᐃⲆᐃΔᐃᐃΔ];
      ΔΔ[Xr.ⲆΔΔΔᐃⲆΔ] = ΔΔ[Xr.ᐃΔΔΔⲆⵠᐃ];
      ΔΔ[Xr.ᐃΔᐃᐃᐃᐃᐃ] = ΔΔ[Xr.ⲆⲆⲆⲆⲆⲆᐃ];
      ΔΔ[Xr.ᐃⵠᐃⵠΔΔᐃ] = ΔΔ[Xr.ΔⲆᐃⲆΔᐃⲆ];
      ΔΔ[Xr.ⵠᐃΔⲆⲆⲆᐃ] = du(fl, [{
        f: Yb,
        x: 0,
        y: 0,
        a: 1,
        r: ps
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⵠⲆᐃⵠᐃⵠᐃ] = du(za, [{
        f: $b,
        x: 0,
        y: 0,
        a: Te,
        r: tg,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃΔΔⲆⵠᐃᐃ] = ΔΔ[Xr.ⵠⲆᐃⵠᐃⵠᐃ];
      ΔΔ[Xr.ⵠᐃΔΔⵠⲆⲆ] = du(Xn, [{
        f: Zc,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃⲆᐃⵠⲆΔᐃ] = ΔΔ[Xr.ⵠᐃΔΔⵠⲆⲆ];
      ΔΔ[Xr.ⵠΔⵠⵠⵠⵠᐃ] = du(Xn, [{
        f: Vc,
        x: Lr,
        y: 0,
        a: fl,
        r: Pg,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⵠⲆⵠⵠⵠⲆⵠ] = ΔΔ[Xr.ⵠΔⵠⵠⵠⵠᐃ];
      ΔΔ[Xr.ΔᐃⲆⲆⵠᐃⲆ] = du(1, [{
        f: Zc,
        x: Rq,
        y: In,
        a: fl,
        r: Rq,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃⵠᐃΔᐃⵠⵠ] = ΔΔ[Xr.ΔᐃⲆⲆⵠᐃⲆ];
      ΔΔ[Xr.Δⵠᐃⵠⵠᐃᐃ] = du(1, [{
        f: oc,
        x: Hi,
        y: 0,
        a: za,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔΔⲆΔⵠⵠⵠ] = ΔΔ[Xr.Δⵠᐃⵠⵠᐃᐃ];
      ΔΔ[Xr.ⵠᐃⲆⲆᐃᐃΔ] = du(1, [{
        f: bm,
        x: 0,
        y: 0,
        a: ie,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃᐃⵠΔⲆᐃⲆ] = ΔΔ[Xr.ⵠᐃⲆⲆᐃᐃΔ];
      ΔΔ[Xr.ⲆΔᐃᐃⲆⲆΔ] = du(1, [{
        f: Nc,
        x: 0,
        y: 0,
        a: fl,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔΔΔΔⵠΔᐃ] = ΔΔ[Xr.ⲆΔᐃᐃⲆⲆΔ];
      ΔΔ[Xr.ᐃΔⲆᐃⲆⲆΔ] = du(hs, [{
        f: fc,
        x: In,
        y: 0,
        a: 1,
        r: In,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⵠⵠᐃΔⵠⵠⲆ] = ΔΔ[Xr.ᐃΔⲆᐃⲆⲆΔ];
      ΔΔ[Xr.ⲆⲆⵠⵠΔⵠΔ] = du(Xn, [{
        f: fc,
        x: 0,
        y: Eh,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆⲆΔⲆΔⵠⲆ] = ΔΔ[Xr.ⲆⲆⵠⵠΔⵠΔ];
      ΔΔ[Xr.ᐃΔᐃⲆᐃΔⵠ] = du(1, [{
        f: Gd,
        x: 0,
        y: 0,
        a: rg,
        r: ya,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⵠⵠⲆⵠΔⵠⲆ] = ΔΔ[Xr.ᐃΔᐃⲆᐃΔⵠ];
      ΔΔ[Xr.ⲆᐃⵠᐃᐃⲆᐃ] = du(Te, [{
        f: Gd,
        x: 0,
        y: 0,
        a: ie,
        r: ya,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔᐃⲆⵠⲆⲆⵠ] = ΔΔ[Xr.ⲆᐃⵠᐃᐃⲆᐃ];
      ΔΔ[Xr.ᐃᐃⵠⵠⲆΔⵠ] = du(jh, [{
        f: Vd,
        x: 0,
        y: Db,
        a: yg,
        r: 0,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔⵠΔΔᐃⲆᐃ] = ΔΔ[Xr.ᐃᐃⵠⵠⲆΔⵠ];
      ΔΔ[Xr.ΔᐃⵠⵠᐃⲆⵠ] = du(qu, [{
        f: Bd,
        x: 0,
        y: Pg,
        a: mk,
        r: Zj,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔᐃⲆⲆⵠⲆΔ] = ΔΔ[Xr.ΔᐃⵠⵠᐃⲆⵠ];
      ΔΔ[Xr.ΔⵠΔΔΔᐃⲆ] = du(ie, [{
        f: Bd,
        x: 0,
        y: 0,
        a: 1,
        r: Eh,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", Ⲇ[Zh], "#af59cd", "#d588f1"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆⵠᐃⲆⲆⵠⵠ] = ΔΔ[Xr.ΔⵠΔΔΔᐃⲆ];
      ΔΔ[Xr.ΔⲆᐃΔⲆⵠᐃ] = du(1, [{
        f: wm,
        x: Kh,
        y: 0,
        a: xt,
        r: Zj,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆⵠⵠΔΔΔᐃ] = ΔΔ[Xr.ΔⲆᐃΔⲆⵠᐃ];
      ΔΔ[Xr.ⲆΔΔⵠΔⵠⲆ] = du(1, [{
        f: Sc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃΔΔΔⲆⵠⲆ] = ΔΔ[Xr.ⲆΔΔⵠΔⵠⲆ];
      ΔΔ[Xr.ⵠⲆⲆⲆᐃⵠᐃ] = du(yg, [{
        f: Pd,
        x: Da,
        y: 2,
        a: 1,
        r: 0,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔⲆΔᐃᐃΔΔ] = ΔΔ[Xr.ⵠⲆⲆⲆᐃⵠᐃ];
      ΔΔ[Xr.ⵠⲆⲆΔΔΔⵠ] = du(1, [{
        f: Xb,
        x: 0,
        y: -yr,
        a: Ug,
        r: 0,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃⲆⲆⲆⲆΔᐃ] = du(za, [{
        f: Xb,
        x: ya,
        y: -3,
        a: Ug,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⵠΔⲆⲆΔⵠΔ] = ΔΔ[Xr.ᐃⲆⲆⲆⲆΔᐃ];
      ΔΔ[Xr.ΔⵠΔΔΔᐃᐃ] = du(1, [{
        f: fu,
        x: -ci,
        y: -Ut,
        a: 1,
        r: 0,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆⲆᐃⲆᐃΔᐃ] = du(1, [{
        f: fu,
        x: -3,
        y: -ea,
        a: 1,
        r: mj,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔⲆⲆⵠᐃⲆᐃ] = ΔΔ[Xr.ⲆⲆᐃⲆᐃΔᐃ];
      ΔΔ[Xr.ΔⲆᐃΔΔᐃᐃ] = du(mk, [{
        f: Ru,
        x: -I,
        y: -nq,
        a: 1,
        r: 0,
        c: ["#ef96be", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⵠΔᐃΔⵠⲆΔ] = du(Ot, [{
        f: Ru,
        x: -3,
        y: -hl,
        a: mk,
        r: Da,
        c: ["#55423e", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⵠΔⵠⵠΔⵠⵠ] = du(jh, [{
        f: kd,
        x: Rq,
        y: Bg,
        a: 1,
        r: wj,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ᐃⵠⲆⲆⵠΔΔ] = du(1, [{
        f: kd,
        x: 0,
        y: 0,
        a: yg,
        r: 0,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ΔᐃᐃⲆΔΔᐃ] = du(Te, [{
        f: Ru,
        x: Db,
        y: Kh,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⵠⲆᐃⵠⲆᐃⵠ] = du(js, [{
        f: Ru,
        x: -vt,
        y: -ea,
        a: Ot,
        r: 0,
        c: ["#231f20", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⵠᐃΔΔⵠⲆᐃ] = du(Oq, [{
        f: Ru,
        x: -ru,
        y: -vt,
        a: 1,
        r: 0,
        c: ["#ffffff", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ᐃⵠⵠⲆⵠᐃⲆ] = du(1, [{
        f: Cm,
        x: 0,
        y: Db,
        a: Te,
        r: zl,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃⲆⲆⲆΔΔᐃ] = ΔΔ[Xr.ᐃⵠⵠⲆⵠᐃⲆ];
      ΔΔ[Xr.ΔⲆⵠᐃΔⵠⵠ] = du(ie, [{
        f: Tc,
        x: Pg,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆΔⲆⵠⲆⵠΔ] = ΔΔ[Xr.ΔⲆⵠᐃΔⵠⵠ];
      ΔΔ[Xr.ᐃⵠⲆᐃΔᐃΔ] = du(Xn, [{
        f: im,
        x: Da,
        y: Da,
        a: Oq,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆⵠⵠᐃᐃΔΔ] = ΔΔ[Xr.ᐃⵠⲆᐃΔᐃΔ];
      ΔΔ[Xr.ΔⵠᐃᐃⵠⵠⲆ] = du(1, [{
        f: ou,
        x: ps,
        y: Eg,
        a: 1,
        r: 0,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠⲆⵠⲆΔᐃⲆ] = ΔΔ[Xr.ΔⵠᐃᐃⵠⵠⲆ];
      ΔΔ[Xr.ⲆΔᐃΔᐃᐃᐃ] = du(lb, [{
        f: ju,
        x: In,
        y: ta,
        a: cu,
        r: 0,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠΔⲆⲆⲆⲆⲆ] = ΔΔ[Xr.ⲆΔᐃΔᐃᐃᐃ];
      ΔΔ[Xr.ΔⲆΔⲆΔᐃΔ] = du(lb, [{
        f: eu,
        x: -H,
        y: -H,
        a: 1,
        r: Rs,
        c: ["#ffffff", "#cec0c4"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆⵠⵠⲆᐃⵠⲆ] = ΔΔ[Xr.ΔⲆΔⲆΔᐃΔ];
      ΔΔ[Xr.ⲆᐃⵠⵠⵠⵠΔ] = [];
      ΔΔ[Xr.ⲆᐃⵠⵠⵠⵠΔ][Zj] = Ⲇⵠ.ΔⵠᐃᐃΔⲆᐃ;
      ΔΔ[Xr.ⲆᐃⵠⵠⵠⵠΔ][mk] = Ⲇⵠ.ⵠⵠⲆΔⲆⵠⲆ;
      ΔΔ[Xr.ⲆᐃⵠⵠⵠⵠΔ][Hj] = Ⲇⵠ.ⲆᐃⵠⵠⲆᐃΔ;
      ΔΔ[Xr.ⵠⲆⵠᐃⲆⲆΔ] = ΔΔ[Xr.ⲆᐃⵠⵠⵠⵠΔ];
      ΔΔ[Xr.ΔᐃᐃⵠΔⵠⵠ] = [];
      ΔΔ[Xr.ΔᐃᐃⵠΔⵠⵠ][0] = Ⲇⵠ.ΔᐃⵠᐃⲆΔⵠ;
      ΔΔ[Xr.ΔᐃᐃⵠΔⵠⵠ][1] = Ⲇⵠ.Ⲇⵠⵠᐃᐃᐃⵠ;
      ΔΔ[Xr.ΔᐃᐃⵠΔⵠⵠ][xj] = Ⲇⵠ.ⲆᐃΔΔⵠΔΔ;
      ΔΔ[Xr.ⲆᐃⵠΔΔΔⲆ] = ΔΔ[Xr.ΔᐃᐃⵠΔⵠⵠ];
      ΔΔ[Xr.ⲆΔᐃΔΔⲆᐃ] = ΔΔ[Xr.ΔᐃᐃⵠΔⵠⵠ];
      ΔΔ[Xr.ΔⵠΔΔⲆⵠᐃ] = [];
      ΔΔ[Xr.ΔⵠΔΔⲆⵠᐃ][mj] = Ⲇⵠ.ΔⵠⵠᐃΔⵠⲆ;
      ΔΔ[Xr.ΔⵠΔΔⲆⵠᐃ][hs] = Ⲇⵠ.ΔᐃᐃⵠⲆᐃᐃ;
      ΔΔ[Xr.ΔⵠΔΔⲆⵠᐃ][2] = Ⲇⵠ.ⲆΔⵠⵠΔΔⵠ;
      ΔΔ[Xr.ᐃⲆⲆⵠⲆᐃⲆ] = ΔΔ[Xr.ΔⵠΔΔⲆⵠᐃ];
      ΔΔ[Xr.ᐃᐃⵠᐃⲆᐃⵠ] = ΔΔ[Xr.ΔⵠΔΔⲆⵠᐃ];
      ΔΔ[Xr.ΔⵠᐃⲆᐃⲆΔ] = [];
      ΔΔ[Xr.ΔⵠᐃⲆᐃⲆΔ][0] = Ⲇⵠ.ⲆⲆⵠⵠⵠⲆⲆ;
      ΔΔ[Xr.ΔⵠᐃⲆᐃⲆΔ][1] = Ⲇⵠ.ⲆⲆⵠⵠⵠⲆⲆ;
      ΔΔ[Xr.ΔⵠᐃⲆᐃⲆΔ][2] = Ⲇⵠ.ⲆⲆⵠⵠⵠⲆⲆ;
      ΔΔ[Xr.ⲆᐃΔΔⲆΔᐃ] = ΔΔ[Xr.ΔⵠᐃⲆᐃⲆΔ];
      ΔΔ[Xr.ⲆΔⵠⲆⵠⲆⵠ] = [];
      ΔΔ[Xr.ⲆΔⵠⲆⵠⲆⵠ][0] = Ⲇⵠ.ΔᐃᐃᐃΔᐃⵠ;
      ΔΔ[Xr.ⲆΔⵠⲆⵠⲆⵠ][1] = Ⲇⵠ.ⲆΔᐃⲆⵠⵠⵠ;
      ΔΔ[Xr.ⲆΔⵠⲆⵠⲆⵠ][2] = Ⲇⵠ.ΔⲆⲆΔⲆΔΔ;
      ΔΔ[Xr.ΔᐃⵠᐃᐃⲆᐃ] = ΔΔ[Xr.ⲆΔⵠⲆⵠⲆⵠ];
      ΔΔ[Xr.ᐃⵠᐃⲆᐃⵠⲆ] = ΔΔ[Xr.ⲆΔⵠⲆⵠⲆⵠ];
      ΔΔ[Xr.ⲆΔⲆⵠΔⵠΔ] = [];
      ΔΔ[Xr.ⲆΔⲆⵠΔⵠΔ][Kh] = Ⲇⵠ.ⲆΔΔⵠⵠⲆⲆ;
      ΔΔ[Xr.ⲆΔⲆⵠΔⵠΔ][1] = Ⲇⵠ.ⲆΔΔⵠⵠⲆⲆ;
      ΔΔ[Xr.ⲆΔⲆⵠΔⵠΔ][Hj] = Ⲇⵠ.ⲆΔΔⵠⵠⲆⲆ;
      ΔΔ[Xr.ΔⲆⲆᐃⲆⲆⵠ] = ΔΔ[Xr.ⲆΔⲆⵠΔⵠΔ];
      ΔΔ[Xr.ⲆⲆᐃⵠᐃΔⲆ] = [];
      ΔΔ[Xr.ⲆⲆᐃⵠᐃΔⲆ][0] = Ⲇⵠ.ⵠⵠⵠⲆᐃⵠᐃⲆᐃ;
      ΔΔ[Xr.ⲆⲆᐃⵠᐃΔⲆ][hs] = Ⲇⵠ.ᐃΔᐃⵠⵠⲆⲆⲆΔ;
      ΔΔ[Xr.ⲆⲆᐃⵠᐃΔⲆ][2] = Ⲇⵠ.ⵠⵠⵠΔⲆⵠᐃᐃΔ;
      ΔΔ[Xr.ⵠᐃⲆⵠᐃΔⲆ] = ΔΔ[Xr.ⲆⲆᐃⵠᐃΔⲆ];
      ΔΔ[Xr.ΔᐃᐃᐃⲆⵠⲆ] = ΔΔ[Xr.ⲆⲆᐃⵠᐃΔⲆ];
      ΔΔ[Xr.ΔΔΔᐃΔⵠΔ] = [];
      ΔΔ[Xr.ΔΔΔᐃΔⵠΔ][tg] = Ⲇⵠ.ⵠⲆⵠⵠΔⲆⵠ;
      ΔΔ[Xr.ΔΔΔᐃΔⵠΔ][Oq] = Ⲇⵠ.ΔⲆⲆᐃⵠᐃⲆ;
      ΔΔ[Xr.ΔΔΔᐃΔⵠΔ][Yg] = Ⲇⵠ.ᐃⲆᐃⲆΔᐃΔ;
      ΔΔ[Xr.ⵠᐃΔᐃᐃᐃⲆ] = ΔΔ[Xr.ΔΔΔᐃΔⵠΔ];
      ΔΔ[Xr.ⲆⵠΔΔᐃᐃΔ] = ΔΔ[Xr.ΔΔΔᐃΔⵠΔ];
      ΔΔ[Xr.ⵠᐃⲆⵠᐃΔΔ] = [];
      ΔΔ[Xr.ⵠᐃⲆⵠᐃΔΔ][0] = Ⲇⵠ.ΔΔⵠΔΔⵠⵠ;
      ΔΔ[Xr.ⵠᐃⲆⵠᐃΔΔ][1] = Ⲇⵠ.ΔⵠⵠΔⵠⵠᐃ;
      ΔΔ[Xr.ⵠᐃⲆⵠᐃΔΔ][Jt] = Ⲇⵠ.ⵠΔᐃΔᐃΔⲆ;
      ΔΔ[Xr.ᐃⵠᐃⲆⲆⵠⲆ] = ΔΔ[Xr.ⵠᐃⲆⵠᐃΔΔ];
      ΔΔ[Xr.ⲆᐃΔⵠΔᐃⵠ] = ΔΔ[Xr.ⵠᐃⲆⵠᐃΔΔ];
      ΔΔ[Xr.ᐃᐃΔΔᐃΔⵠ] = [];
      ΔΔ[Xr.ᐃᐃΔΔᐃΔⵠ][0] = Ⲇⵠ.ⲆⲆᐃᐃⵠⵠⲆ;
      ΔΔ[Xr.ᐃᐃΔΔᐃΔⵠ][1] = Ⲇⵠ.ⵠΔᐃᐃΔᐃⲆ;
      ΔΔ[Xr.ᐃᐃΔΔᐃΔⵠ][Jt] = Ⲇⵠ.ΔⵠΔᐃΔⲆⵠ;
      ΔΔ[Xr.ⲆᐃΔⲆᐃᐃΔ] = ΔΔ[Xr.ᐃᐃΔΔᐃΔⵠ];
      ΔΔ[Xr.ΔⲆΔᐃⲆᐃΔ] = ΔΔ[Xr.ᐃᐃΔΔᐃΔⵠ];
      ΔΔ[Xr.ⵠᐃΔⵠᐃᐃᐃ] = [];
      ΔΔ[Xr.ⵠᐃΔⵠᐃᐃᐃ][0] = Ⲇⵠ.ⵠⲆⵠΔⵠⲆⵠ;
      ΔΔ[Xr.ⵠᐃΔⵠᐃᐃᐃ][1] = Ⲇⵠ.ΔⲆᐃᐃⲆⵠⲆ;
      ΔΔ[Xr.ⵠᐃΔⵠᐃᐃᐃ][Zg] = Ⲇⵠ.ⵠⲆᐃⲆⵠᐃΔ;
      ΔΔ[Xr.ⵠⲆᐃⵠⲆᐃᐃ] = ΔΔ[Xr.ⵠᐃΔⵠᐃᐃᐃ];
      ΔΔ[Xr.ⵠⲆⲆⲆⲆⲆᐃ] = ΔΔ[Xr.ⵠᐃΔⵠᐃᐃᐃ];
      ΔΔ[Xr.ΔⲆᐃⲆᐃⵠᐃ] = [];
      ΔΔ[Xr.ΔⲆᐃⲆᐃⵠᐃ][0] = Ⲇⵠ.ᐃⵠⲆᐃⲆⲆⵠ;
      ΔΔ[Xr.ΔⲆᐃⲆᐃⵠᐃ][1] = Ⲇⵠ.ᐃⵠΔΔⵠᐃⵠ;
      ΔΔ[Xr.ΔⲆᐃⲆᐃⵠᐃ][Zg] = Ⲇⵠ.ⲆⲆᐃⵠⵠⵠᐃ;
      ΔΔ[Xr.ΔΔⲆᐃᐃᐃᐃ] = ΔΔ[Xr.ΔⲆᐃⲆᐃⵠᐃ];
      ΔΔ[Xr.ⵠΔⲆᐃⵠⵠᐃ] = ΔΔ[Xr.ΔⲆᐃⲆᐃⵠᐃ];
      ΔΔ[Xr.ᐃⵠⲆΔⲆⲆⵠ] = [];
      ΔΔ[Xr.ᐃⵠⲆΔⲆⲆⵠ][Hi] = Ⲇⵠ.ΔⲆΔⲆᐃⲆⵠ;
      ΔΔ[Xr.ᐃⵠⲆΔⲆⲆⵠ][ie] = Ⲇⵠ.ⲆⲆⵠΔⵠⵠⵠ;
      ΔΔ[Xr.ᐃⵠⲆΔⲆⲆⵠ][2] = Ⲇⵠ.ⲆⵠⲆᐃᐃⵠⵠ;
      ΔΔ[Xr.ⲆᐃΔⵠᐃᐃⲆ] = ΔΔ[Xr.ᐃⵠⲆΔⲆⲆⵠ];
      ΔΔ[Xr.ⵠⵠΔⲆΔΔᐃ] = ΔΔ[Xr.ᐃⵠⲆΔⲆⲆⵠ];
      ΔΔ[Xr.ᐃⵠⵠⵠᐃΔΔ] = [];
      ΔΔ[Xr.ᐃⵠⵠⵠᐃΔΔ][In] = Ⲇⵠ.ⵠⵠⵠΔΔⵠᐃ;
      ΔΔ[Xr.ᐃⵠⵠⵠᐃΔΔ][jh] = Ⲇⵠ.ᐃΔⵠⲆΔΔⲆ;
      ΔΔ[Xr.ᐃⵠⵠⵠᐃΔΔ][2] = Ⲇⵠ.ⵠΔΔⲆΔΔΔ;
      ΔΔ[Xr.ⵠᐃⲆⵠⵠⲆⵠ] = ΔΔ[Xr.ᐃⵠⵠⵠᐃΔΔ];
      ΔΔ[Xr.ᐃᐃⵠⲆⵠΔⵠ] = ΔΔ[Xr.ᐃⵠⵠⵠᐃΔΔ];
      ΔΔ[Xr.ᐃⵠΔⲆⵠⵠᐃ] = [];
      ΔΔ[Xr.ᐃⵠΔⲆⵠⵠᐃ][0] = Ⲇⵠ.ⲆⵠᐃⲆᐃⵠⵠ;
      ΔΔ[Xr.ᐃⵠΔⲆⵠⵠᐃ][1] = Ⲇⵠ.ⵠΔⲆᐃⵠⵠⲆ;
      ΔΔ[Xr.ᐃⵠΔⲆⵠⵠᐃ][H] = Ⲇⵠ.ⵠᐃΔⲆΔⲆᐃ;
      ΔΔ[Xr.ⲆΔⵠⲆⲆⵠⲆ] = ΔΔ[Xr.ᐃⵠΔⲆⵠⵠᐃ];
      ΔΔ[Xr.ΔⵠᐃⲆⲆⵠΔ] = ΔΔ[Xr.ᐃⵠΔⲆⵠⵠᐃ];
      ΔΔ[Xr.ΔᐃⵠΔⵠΔΔ] = [];
      ΔΔ[Xr.ΔᐃⵠΔⵠΔΔ][0] = Ⲇⵠ.ⵠΔⲆⵠᐃⲆᐃ;
      ΔΔ[Xr.ΔᐃⵠΔⵠΔΔ][1] = Ⲇⵠ.ᐃᐃΔⵠⵠⵠΔ;
      ΔΔ[Xr.ΔᐃⵠΔⵠΔΔ][2] = Ⲇⵠ.ΔΔⵠΔΔⲆΔ;
      ΔΔ[Xr.ΔⲆⲆⲆⲆΔΔ] = ΔΔ[Xr.ΔᐃⵠΔⵠΔΔ];
      ΔΔ[Xr.ΔᐃⲆᐃⲆⲆⵠ] = ΔΔ[Xr.ΔᐃⵠΔⵠΔΔ];
      ΔΔ[Xr.ⲆⲆⵠᐃⵠ] = [];
      ΔΔ[Xr.ⲆⲆⵠᐃⵠ][0] = Ⲇⵠ.ⲆⲆⵠᐃⵠ;
      ΔΔ[Xr.ⲆⲆⵠᐃⵠ][1] = Ⲇⵠ.ⲆⲆⵠᐃⵠ;
      ΔΔ[Xr.ⲆⲆⵠᐃⵠ][2] = Ⲇⵠ.ⲆⲆⵠᐃⵠ;
      ΔΔ[Xr.ΔⵠᐃⲆΔΔⲆⵠΔ] = ΔΔ[Xr.ⲆⲆⵠᐃⵠ];
      ΔΔ[Xr.ΔΔᐃⵠⲆⵠᐃ] = ΔΔ[Xr.ⲆⲆⵠᐃⵠ];
      ΔΔ[Xr.ΔⲆΔⵠᐃ] = [];
      ΔΔ[Xr.ΔⲆΔⵠᐃ][0] = Ⲇⵠ.ΔⲆΔⵠᐃ;
      ΔΔ[Xr.ΔⲆΔⵠᐃ][xt] = Ⲇⵠ.ΔⲆΔⵠᐃ;
      ΔΔ[Xr.ΔⲆΔⵠᐃ][2] = Ⲇⵠ.ΔⲆΔⵠᐃ;
      ΔΔ[Xr.ⲆΔⲆᐃΔΔⵠⲆᐃ] = ΔΔ[Xr.ΔⲆΔⵠᐃ];
      ΔΔ[Xr.ⲆⵠⲆᐃⵠΔⵠ] = ΔΔ[Xr.ΔⲆΔⵠᐃ];
      ΔΔ[Xr.ΔⲆΔⵠⲆ] = [];
      ΔΔ[Xr.ΔⲆΔⵠⲆ][gu] = Ⲇⵠ.ΔⲆΔⵠⲆ;
      ΔΔ[Xr.ΔⲆΔⵠⲆ][za] = Ⲇⵠ.ΔⲆΔⵠⲆ;
      ΔΔ[Xr.ΔⲆΔⵠⲆ][2] = Ⲇⵠ.ΔⲆΔⵠⲆ;
      ΔΔ[Xr.ⵠΔᐃΔᐃⵠⲆⵠⵠ] = ΔΔ[Xr.ΔⲆΔⵠⲆ];
      ΔΔ[Xr.ᐃⲆⲆⵠᐃᐃΔ] = ΔΔ[Xr.ΔⲆΔⵠⲆ];
      ΔΔ[Xr.ΔΔⵠⵠⵠ] = [];
      ΔΔ[Xr.ΔΔⵠⵠⵠ][Zj] = Ⲇⵠ.ΔΔⵠⵠⵠ;
      ΔΔ[Xr.ΔΔⵠⵠⵠ][Te] = Ⲇⵠ.ΔΔⵠⵠⵠ;
      ΔΔ[Xr.ΔΔⵠⵠⵠ][2] = Ⲇⵠ.ΔΔⵠⵠⵠ;
      ΔΔ[Xr.ΔᐃⵠᐃᐃΔⲆ] = ΔΔ[Xr.ΔΔⵠⵠⵠ];
      ΔΔ[Xr.ⲆⵠΔⵠⵠⵠⵠ] = [];
      ΔΔ[Xr.ⲆⵠΔⵠⵠⵠⵠ][Lr] = Ⲇⵠ.ΔⵠᐃᐃⲆΔΔ;
      ΔΔ[Xr.ⲆⵠΔⵠⵠⵠⵠ][yg] = Ⲇⵠ.ⵠⵠΔⲆᐃⲆⲆ;
      ΔΔ[Xr.ⲆⵠΔⵠⵠⵠⵠ][Mt] = Ⲇⵠ.ᐃⵠΔΔᐃΔⵠ;
      ΔΔ[Xr.ⵠΔΔⲆΔᐃΔ] = ΔΔ[Xr.ⲆⵠΔⵠⵠⵠⵠ];
      ΔΔ[Xr.ⵠⵠΔΔᐃⵠⵠ] = ΔΔ[Xr.ⲆⵠΔⵠⵠⵠⵠ];
      ΔΔ[Xr.ΔᐃⲆΔΔᐃⵠ] = [];
      ΔΔ[Xr.ΔᐃⲆΔΔᐃⵠ][0] = Ⲇⵠ.ⲆᐃⲆⲆⵠΔΔ;
      ΔΔ[Xr.ΔᐃⲆΔΔᐃⵠ][Ol] = Ⲇⵠ.ⲆⲆⲆⵠⵠᐃⲆ;
      ΔΔ[Xr.ΔᐃⲆΔΔᐃⵠ][2] = Ⲇⵠ.ⲆᐃⵠᐃⲆⵠⲆ;
      ΔΔ[Xr.ⲆⲆΔΔⲆᐃⲆ] = ΔΔ[Xr.ΔᐃⲆΔΔᐃⵠ];
      ΔΔ[Xr.ΔᐃᐃⲆⲆⵠⲆ] = ΔΔ[Xr.ΔᐃⲆΔΔᐃⵠ];
      ΔΔ[Xr.ΔⲆⵠⲆΔⲆⵠ] = [];
      ΔΔ[Xr.ΔⲆⵠⲆΔⲆⵠ][ps] = Ⲇⵠ.ⵠᐃⲆⵠⵠⲆΔ;
      ΔΔ[Xr.ΔⲆⵠⲆΔⲆⵠ][Oq] = Ⲇⵠ.ᐃⵠᐃⵠⲆΔⲆ;
      ΔΔ[Xr.ΔⲆⵠⲆΔⲆⵠ][Hj] = Ⲇⵠ.ΔΔⲆⵠΔᐃⵠ;
      ΔΔ[Xr.ⲆⵠⵠΔⲆⵠⲆ] = ΔΔ[Xr.ΔⲆⵠⲆΔⲆⵠ];
      ΔΔ[Xr.ⵠⲆᐃΔⵠΔⲆ] = ΔΔ[Xr.ΔⲆⵠⲆΔⲆⵠ];
      ΔΔ[Xr.ⵠⵠⵠᐃⵠᐃΔ] = [];
      ΔΔ[Xr.ⵠⵠⵠᐃⵠᐃΔ][0] = Ⲇⵠ.ⵠΔᐃᐃΔᐃⵠ;
      ΔΔ[Xr.ⵠⵠⵠᐃⵠᐃΔ][1] = Ⲇⵠ.ⵠⲆⵠᐃⲆΔᐃ;
      ΔΔ[Xr.ⵠⵠⵠᐃⵠᐃΔ][dg] = Ⲇⵠ.ΔΔⲆᐃⵠΔᐃ;
      ΔΔ[Xr.ΔΔⵠᐃⲆΔΔ] = ΔΔ[Xr.ⵠⵠⵠᐃⵠᐃΔ];
      ΔΔ[Xr.ΔⵠΔⵠⵠⲆⵠ] = ΔΔ[Xr.ⵠⵠⵠᐃⵠᐃΔ];
      ΔΔ[Xr.ⲆⵠⲆⲆᐃⲆᐃ] = [];
      ΔΔ[Xr.ⲆⵠⲆⲆᐃⲆᐃ][0] = Ⲇⵠ.ᐃⲆⵠΔΔⵠᐃ;
      ΔΔ[Xr.ⲆⵠⲆⲆᐃⲆᐃ][jh] = Ⲇⵠ.ΔⵠᐃΔⵠⲆⲆ;
      ΔΔ[Xr.ⲆⵠⲆⲆᐃⲆᐃ][2] = Ⲇⵠ.ⲆⵠΔⵠᐃᐃⵠ;
      ΔΔ[Xr.ⲆⵠᐃᐃⲆΔᐃ] = ΔΔ[Xr.ⲆⵠⲆⲆᐃⲆᐃ];
      ΔΔ[Xr.ⵠⵠⵠᐃΔⲆΔ] = ΔΔ[Xr.ⲆⵠⲆⲆᐃⲆᐃ];
      ΔΔ[Xr.ᐃⲆⲆᐃⲆΔⵠ] = [];
      ΔΔ[Xr.ᐃⲆⲆᐃⲆΔⵠ][ya] = Ⲇⵠ.ⲆΔⵠᐃⵠⲆⲆ;
      ΔΔ[Xr.ᐃⲆⲆᐃⲆΔⵠ][Xn] = Ⲇⵠ.ⵠⵠΔⵠⵠΔΔ;
      ΔΔ[Xr.ᐃⲆⲆᐃⲆΔⵠ][H] = Ⲇⵠ.ⲆⲆⵠΔᐃⵠΔ;
      ΔΔ[Xr.ΔᐃⲆᐃⲆⵠΔ] = ΔΔ[Xr.ᐃⲆⲆᐃⲆΔⵠ];
      ΔΔ[Xr.ⵠΔⵠⵠⵠᐃⵠ] = ΔΔ[Xr.ᐃⲆⲆᐃⲆΔⵠ];
      ΔΔ[Xr.ⲆⵠΔᐃⵠᐃΔ] = [];
      ΔΔ[Xr.ⲆⵠΔᐃⵠᐃΔ][Hi] = Ⲇⵠ.ⵠΔⵠⵠΔⵠᐃⲆΔ;
      ΔΔ[Xr.ⲆⵠΔᐃⵠᐃΔ][cu] = Ⲇⵠ.ᐃⵠⵠⵠᐃⲆⵠᐃΔ;
      ΔΔ[Xr.ⲆⵠΔᐃⵠᐃΔ][Hj] = Ⲇⵠ.ᐃⲆᐃᐃⵠⵠⲆⵠⲆ;
      ΔΔ[Xr.ᐃΔⲆⲆⵠΔΔ] = ΔΔ[Xr.ⲆⵠΔᐃⵠᐃΔ];
      ΔΔ[Xr.ΔⵠⵠᐃⲆΔΔ] = ΔΔ[Xr.ⲆⵠΔᐃⵠᐃΔ];
      ΔΔ[Xr.ⵠⲆⲆᐃⵠⵠⵠ] = [];
      ΔΔ[Xr.ⵠⲆⲆᐃⵠⵠⵠ][0] = Ⲇⵠ.ⵠΔⵠᐃⵠΔⵠ;
      ΔΔ[Xr.ⵠⲆⲆᐃⵠⵠⵠ][1] = Ⲇⵠ.ⵠⵠⵠⵠⵠⵠΔ;
      ΔΔ[Xr.ⵠⲆⲆᐃⵠⵠⵠ][xj] = Ⲇⵠ.ⵠⲆⲆⲆᐃⲆᐃ;
      ΔΔ[Xr.ⵠⵠᐃΔⵠᐃΔ] = ΔΔ[Xr.ⵠⲆⲆᐃⵠⵠⵠ];
      ΔΔ[Xr.ⲆⲆⵠΔⲆⵠⵠ] = ΔΔ[Xr.ⵠⲆⲆᐃⵠⵠⵠ];
      ΔΔ[Xr.ΔΔⵠΔⲆⲆΔ] = [];
      ΔΔ[Xr.ΔΔⵠΔⲆⲆΔ][Rq] = Ⲇⵠ.ⲆⲆΔⵠᐃⲆⵠ;
      ΔΔ[Xr.ΔΔⵠΔⲆⲆΔ][qu] = Ⲇⵠ.ⵠⵠⲆⵠⵠᐃⲆ;
      ΔΔ[Xr.ΔΔⵠΔⲆⲆΔ][Mt] = Ⲇⵠ.ΔΔⵠΔⵠⲆΔ;
      ΔΔ[Xr.ⵠΔᐃᐃⵠΔⵠ] = ΔΔ[Xr.ΔΔⵠΔⲆⲆΔ];
      ΔΔ[Xr.ⲆΔⲆΔΔⲆⵠ] = ΔΔ[Xr.ΔΔⵠΔⲆⲆΔ];
      ΔΔ[Xr.ⵠⲆⵠΔΔΔⲆ] = [];
      ΔΔ[Xr.ⵠⲆⵠΔΔΔⲆ][Hi] = Ⲇⵠ.ⲆⲆᐃⲆⲆⵠᐃ;
      ΔΔ[Xr.ⵠⲆⵠΔΔΔⲆ][yg] = Ⲇⵠ.ΔⲆᐃΔΔΔⲆ;
      ΔΔ[Xr.ⵠⲆⵠΔΔΔⲆ][2] = Ⲇⵠ.ΔⵠᐃⲆΔⲆⲆ;
      ΔΔ[Xr.ᐃΔⵠᐃᐃΔᐃ] = ΔΔ[Xr.ⵠⲆⵠΔΔΔⲆ];
      ΔΔ[Xr.ΔΔΔᐃΔⲆⲆ] = ΔΔ[Xr.ⵠⲆⵠΔΔΔⲆ];
      ΔΔ[Xr.ΔΔᐃⲆᐃⵠⲆ] = [];
      ΔΔ[Xr.ΔΔᐃⲆᐃⵠⲆ][gu] = Ⲇⵠ.ΔⲆΔΔⲆⵠⵠ;
      ΔΔ[Xr.ΔΔᐃⲆᐃⵠⲆ][1] = Ⲇⵠ.ΔΔⲆⵠᐃⲆⵠ;
      ΔΔ[Xr.ΔΔᐃⲆᐃⵠⲆ][2] = Ⲇⵠ.ΔⵠⲆΔⲆⵠΔ;
      ΔΔ[Xr.ⲆⵠⵠΔᐃⵠᐃ] = ΔΔ[Xr.ΔΔᐃⲆᐃⵠⲆ];
      ΔΔ[Xr.ⵠⲆⵠᐃⵠᐃⵠ] = ΔΔ[Xr.ΔΔᐃⲆᐃⵠⲆ];
      ΔΔ[Xr.ⵠᐃⲆⵠⵠΔⵠ] = [];
      ΔΔ[Xr.ⵠᐃⲆⵠⵠΔⵠ][Eh] = Ⲇⵠ.ΔⵠⵠⲆΔⵠᐃ;
      ΔΔ[Xr.ⵠᐃⲆⵠⵠΔⵠ][qu] = Ⲇⵠ.ΔⲆΔⵠⵠᐃΔ;
      ΔΔ[Xr.ⵠᐃⲆⵠⵠΔⵠ][2] = Ⲇⵠ.ⲆΔⲆⲆⲆⵠᐃ;
      ΔΔ[Xr.ⵠⲆⲆⵠⵠⵠᐃ] = ΔΔ[Xr.ⵠᐃⲆⵠⵠΔⵠ];
      ΔΔ[Xr.Ⲇᐃᐃⵠᐃᐃⵠ] = ΔΔ[Xr.ⵠᐃⲆⵠⵠΔⵠ];
      ΔΔ[Xr.ᐃⵠⵠᐃᐃⵠⲆ] = [];
      ΔΔ[Xr.ᐃⵠⵠᐃᐃⵠⲆ][ya] = Ⲇⵠ.ΔⵠᐃΔᐃⲆⵠ;
      ΔΔ[Xr.ᐃⵠⵠᐃᐃⵠⲆ][1] = Ⲇⵠ.ⲆⵠΔⵠⲆⲆΔ;
      ΔΔ[Xr.ᐃⵠⵠᐃᐃⵠⲆ][2] = Ⲇⵠ.ⲆⲆΔⵠΔⲆⵠ;
      ΔΔ[Xr.ⵠᐃᐃⲆᐃⲆⵠ] = ΔΔ[Xr.ᐃⵠⵠᐃᐃⵠⲆ];
      ΔΔ[Xr.ⵠᐃΔⵠᐃⲆΔ] = ΔΔ[Xr.ᐃⵠⵠᐃᐃⵠⲆ];
      ΔΔ[Xr.ⵠⵠᐃⵠⲆⲆᐃ] = du(Xn, [{
        f: Uc,
        x: 0,
        y: 0,
        a: 1,
        r: Eh,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
      }, {
        f: fd,
        x: 0,
        y: 0,
        a: 1,
        r: Eh,
        c: ["#e4c027"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃΔΔΔⵠⵠᐃ] = ΔΔ[Xr.ⵠⵠᐃⵠⲆⲆᐃ];
      ΔΔ[Xr.ᐃⵠⲆΔᐃᐃⵠ] = du(fl, [{
        f: qc,
        x: gu,
        y: 0,
        a: ie,
        r: Eh,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆⲆⵠᐃΔⲆᐃ] = ΔΔ[Xr.ᐃⵠⲆΔᐃᐃⵠ];
      ΔΔ[Xr.ᐃΔⲆⵠⲆᐃⲆ] = du(1, [{
        f: Ac,
        x: 0,
        y: mj,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
      }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃᐃⵠΔⵠΔᐃ] = ΔΔ[Xr.ᐃΔⲆⵠⲆᐃⲆ];
      ΔΔ[Xr.ⵠⵠΔᐃⲆΔΔ] = ΔΔ[Xr.ᐃΔⲆⵠⲆᐃⲆ];
      ΔΔ[Xr.ᐃΔᐃΔⵠⵠΔ] = du(1, [{
        f: Cd,
        x: ps,
        y: Lr,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔᐃⵠⵠⲆⵠⲆ] = ΔΔ[Xr.ᐃΔᐃΔⵠⵠΔ];
      ΔΔ[Xr.ΔⲆⵠᐃᐃᐃⵠ] = du(1, [{
        f: cm,
        x: 2,
        y: Db,
        a: js,
        r: Math.PI / kq,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆⲆᐃΔⲆⵠΔ] = ΔΔ[Xr.ΔⲆⵠᐃᐃᐃⵠ];
      ΔΔ[Xr.ᐃⲆⵠΔΔⲆⵠ] = ΔΔ[Xr.ΔⲆⵠᐃᐃᐃⵠ];
      ΔΔ[Xr.ΔⲆΔᐃⲆⵠΔ] = du(Xn, [{
        f: uc,
        x: ih,
        y: 0,
        a: hd,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃᐃⵠⵠⲆΔΔ] = ΔΔ[Xr.ΔⲆΔᐃⲆⵠΔ];
      ΔΔ[Xr.ⵠⵠΔΔΔΔⲆ] = du(Ol, [{
        f: bc,
        x: xj,
        y: 0,
        a: Oq,
        r: Math.PI / ed,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ΔⵠⵠᐃᐃΔᐃ] = ΔΔ[Xr.ⵠⵠΔΔΔΔⲆ];
      ΔΔ[Xr.ⵠⲆⵠΔⲆⵠᐃ] = du(qu, [{
        f: Wc,
        x: bs,
        y: 0,
        a: 1,
        r: Math.PI / Uh,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃⲆⲆᐃⲆΔⲆ] = ΔΔ[Xr.ⵠⲆⵠΔⲆⵠᐃ];
      ΔΔ[Xr.ᐃᐃᐃⵠΔᐃΔ] = du(yg, [{
        f: dd,
        x: 2,
        y: Db,
        a: za,
        r: Math.PI / tb,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ΔⵠᐃΔⲆⵠⵠ] = ΔΔ[Xr.ᐃᐃᐃⵠΔᐃΔ];
      ΔΔ[Xr.ⵠΔⵠⲆᐃⲆᐃ] = du(hd, [{
        f: jd,
        x: Pn,
        y: tt,
        a: qu,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆΔⵠΔⲆᐃⵠ] = ΔΔ[Xr.ⵠΔⵠⲆᐃⲆᐃ];
      ΔΔ[Xr.ⵠⲆΔⵠⲆⲆᐃ] = du(hd, [{
        f: jc,
        x: ss,
        y: mj,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
      }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠΔⲆⲆΔᐃⲆ] = ΔΔ[Xr.ⵠⲆΔⵠⲆⲆᐃ];
      ΔΔ[Xr.ⵠᐃᐃⲆⵠⲆⲆ] = ΔΔ[Xr.ⵠⲆΔⵠⲆⲆᐃ];
      ΔΔ[Xr.ΔᐃᐃᐃΔⵠΔ] = du(1, [{
        f: rc,
        x: H,
        y: mj,
        a: 1,
        r: Math.PI / ta,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃΔᐃΔⵠᐃΔ] = ΔΔ[Xr.ΔᐃᐃᐃΔⵠΔ];
      ΔΔ[Xr.ⲆΔᐃⵠΔᐃᐃ] = du(qu, [{
        f: lm,
        x: Bg,
        y: Lr,
        a: fl,
        r: Math.PI / pb,
        c: ["#0d1b1c", "#939393", "#5f6061"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠⵠⲆΔΔᐃᐃ] = ΔΔ[Xr.ⲆΔᐃⵠΔᐃᐃ];
      ΔΔ[Xr.ᐃⲆⲆΔᐃΔⵠ] = du(qu, [{
        f: lc,
        x: 2,
        y: Pg,
        a: cu,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠⲆᐃⲆΔⲆⲆ] = ΔΔ[Xr.ᐃⲆⲆΔᐃΔⵠ];
      ΔΔ[Xr.ΔᐃⵠⵠΔⲆΔ] = du(mk, [{
        f: rc,
        x: ss,
        y: 0,
        a: rg,
        r: Math.PI / Oj,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ΔⵠΔⵠᐃΔΔ] = ΔΔ[Xr.ΔᐃⵠⵠΔⲆΔ];
      ΔΔ[Xr.ᐃⲆⲆⵠᐃᐃⲆ] = du(1, [{
        f: rc,
        x: Mt,
        y: 0,
        a: 1,
        r: Math.PI / z,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃⵠΔᐃⵠⵠΔ] = ΔΔ[Xr.ᐃⲆⲆⵠᐃᐃⲆ];
      ΔΔ[Xr.ⲆᐃⵠⵠΔⵠΔ] = du(js, [{
        f: rc,
        x: Hj,
        y: zl,
        a: 1,
        r: Math.PI / ll,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆⲆⵠᐃΔⲆΔ] = ΔΔ[Xr.ⲆᐃⵠⵠΔⵠΔ];
      ΔΔ[Xr.ᐃΔΔⲆᐃᐃⵠ] = [];
      ΔΔ[Xr.ᐃΔΔⲆᐃᐃⵠ][Bg] = Ⲇⵠ.ΔⲆⵠⲆΔᐃΔ;
      ΔΔ[Xr.ᐃΔΔⲆᐃᐃⵠ][ie] = Ⲇⵠ.ⵠⲆᐃΔᐃᐃΔ;
      ΔΔ[Xr.ᐃΔΔⲆᐃᐃⵠ][2] = Ⲇⵠ.ᐃⲆⵠⵠⲆⲆΔ;
      ΔΔ[Xr.ⲆᐃⵠⲆΔΔⵠ] = ΔΔ[Xr.ᐃΔΔⲆᐃᐃⵠ];
      ΔΔ[Xr.ⵠⵠᐃⵠΔᐃⲆ] = ΔΔ[Xr.ᐃΔΔⲆᐃᐃⵠ];
      ΔΔ[Xr.ᐃⵠᐃⵠⲆⵠⵠ] = [];
      ΔΔ[Xr.ᐃⵠᐃⵠⲆⵠⵠ][Kh] = Ⲇⵠ.ΔΔᐃⵠᐃⲆΔ;
      ΔΔ[Xr.ᐃⵠᐃⵠⲆⵠⵠ][Oq] = Ⲇⵠ.ⲆΔᐃⲆΔΔⲆ;
      ΔΔ[Xr.ᐃⵠᐃⵠⲆⵠⵠ][Gl] = Ⲇⵠ.Ⲇⵠᐃᐃᐃᐃᐃ;
      ΔΔ[Xr.ⵠΔⵠᐃⵠⲆᐃ] = ΔΔ[Xr.ᐃⵠᐃⵠⲆⵠⵠ];
      ΔΔ[Xr.ⵠⲆΔⲆⲆΔⵠ] = ΔΔ[Xr.ᐃⵠᐃⵠⲆⵠⵠ];
      ΔΔ[Xr.ᐃⵠΔⵠⵠΔⲆ] = [];
      ΔΔ[Xr.ᐃⵠΔⵠⵠΔⲆ][0] = Ⲇⵠ.ΔᐃᐃΔⵠᐃΔ;
      ΔΔ[Xr.ᐃⵠΔⵠⵠΔⲆ][1] = Ⲇⵠ.ⵠΔΔⵠΔΔᐃ;
      ΔΔ[Xr.ᐃⵠΔⵠⵠΔⲆ][2] = Ⲇⵠ.ⵠᐃⲆⵠΔⵠⲆ;
      ΔΔ[Xr.ⵠⵠⲆΔΔᐃⵠ] = ΔΔ[Xr.ᐃⵠΔⵠⵠΔⲆ];
      ΔΔ[Xr.ⵠᐃΔⲆΔⲆⵠ] = ΔΔ[Xr.ᐃⵠΔⵠⵠΔⲆ];
      ΔΔ[Xr.ⵠⵠⲆᐃⵠᐃⲆ] = [];
      ΔΔ[Xr.ⵠⵠⲆᐃⵠᐃⲆ][Db] = Ⲇⵠ.ᐃⵠΔΔⵠᐃⲆ;
      ΔΔ[Xr.ⵠⵠⲆᐃⵠᐃⲆ][mk] = Ⲇⵠ.ⵠⵠᐃⲆⵠᐃⲆ;
      ΔΔ[Xr.ⵠⵠⲆᐃⵠᐃⲆ][2] = Ⲇⵠ.ⲆΔⵠᐃᐃⵠᐃ;
      ΔΔ[Xr.ᐃᐃⵠᐃᐃΔᐃ] = ΔΔ[Xr.ⵠⵠⲆᐃⵠᐃⲆ];
      ΔΔ[Xr.ᐃⵠⲆⵠⲆᐃΔ] = ΔΔ[Xr.ⵠⵠⲆᐃⵠᐃⲆ];
      ΔΔ[Xr.ⵠⵠᐃΔⲆⵠᐃ] = [];
      ΔΔ[Xr.ⵠⵠᐃΔⲆⵠᐃ][Zj] = Ⲇⵠ.ΔⵠΔᐃᐃⲆᐃ;
      ΔΔ[Xr.ⵠⵠᐃΔⲆⵠᐃ][1] = Ⲇⵠ.ᐃⵠΔⲆⲆⲆⲆ;
      ΔΔ[Xr.ⵠⵠᐃΔⲆⵠᐃ][2] = Ⲇⵠ.ᐃⵠᐃᐃᐃΔⵠ;
      ΔΔ[Xr.ᐃᐃΔⲆᐃᐃⲆ] = ΔΔ[Xr.ⵠⵠᐃΔⲆⵠᐃ];
      ΔΔ[Xr.ᐃᐃΔⵠΔⵠᐃ] = ΔΔ[Xr.ⵠⵠᐃΔⲆⵠᐃ];
      ΔΔ[Xr.ᐃΔⲆᐃΔⲆᐃ] = [];
      ΔΔ[Xr.ᐃΔⲆᐃΔⲆᐃ][Lr] = Ⲇⵠ.ⵠΔᐃⲆᐃΔᐃ;
      ΔΔ[Xr.ᐃΔⲆᐃΔⲆᐃ][hd] = Ⲇⵠ.ΔΔΔⵠⲆΔᐃ;
      ΔΔ[Xr.ᐃΔⲆᐃΔⲆᐃ][Gl] = Ⲇⵠ.ᐃⲆⲆᐃᐃᐃᐃ;
      ΔΔ[Xr.ⲆⲆⵠᐃΔΔᐃ] = ΔΔ[Xr.ᐃΔⲆᐃΔⲆᐃ];
      ΔΔ[Xr.ⵠΔⲆΔⲆⲆᐃ] = ΔΔ[Xr.ᐃΔⲆᐃΔⲆᐃ];
      ΔΔ[Xr.ⵠΔⲆᐃⵠⵠΔ] = [];
      ΔΔ[Xr.ⵠΔⲆᐃⵠⵠΔ][wj] = Ⲇⵠ.ⵠᐃⲆᐃᐃΔⲆ;
      ΔΔ[Xr.ⵠΔⲆᐃⵠⵠΔ][Ug] = Ⲇⵠ.ΔⲆΔΔᐃΔⵠ;
      ΔΔ[Xr.ⵠΔⲆᐃⵠⵠΔ][Yg] = Ⲇⵠ.ᐃᐃᐃⵠⵠⲆΔ;
      ΔΔ[Xr.ΔᐃᐃᐃᐃⲆⲆ] = ΔΔ[Xr.ⵠΔⲆᐃⵠⵠΔ];
      ΔΔ[Xr.ᐃⵠⲆⲆΔⲆⲆ] = ΔΔ[Xr.ⵠΔⲆᐃⵠⵠΔ];
      ΔΔ[Xr.ΔᐃⲆⵠΔΔⵠ] = du(fl, [{
        f: Xc,
        x: -2,
        y: -2,
        a: Ol,
        r: 0,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
      }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⲆΔᐃΔⵠΔⲆ] = ΔΔ[Xr.ΔᐃⲆⵠΔΔⵠ];
      ΔΔ[Xr.ⵠⲆΔΔⵠᐃΔ] = du(yg, [{
        f: ym,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / q,
        c: ["#141414", "#c4a23a", "#816511"]
      }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⵠⵠⵠΔΔⵠⲆ] = ΔΔ[Xr.ⵠⲆΔΔⵠᐃΔ];
      ΔΔ[Xr.ᐃᐃᐃⲆᐃⲆⲆ] = du(qu, [{
        f: pd,
        x: -2,
        y: -lr,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ΔΔ[Xr.ΔΔΔΔⵠⲆⲆ] = du(fl, [{
        f: pd,
        x: -2,
        y: -2,
        a: Oq,
        r: Lr,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ΔΔ[Xr.ⵠⵠⵠΔⵠⲆⲆ] = du(lb, [{
        f: Jd,
        x: ps,
        y: 0,
        a: jh,
        r: 0,
        c: ["#347f93", "#54a4ba"]
      }, {
        f: vm,
        x: 0,
        y: Eh,
        a: 1,
        r: wj,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
      }, {
        f: gc,
        x: 0,
        y: Zj,
        a: 1,
        r: Rq,
        c: ["#a9e4ed", "#86d4e0"]
      }, {
        f: gm,
        x: mj,
        y: 0,
        a: 1,
        r: In,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⵠΔΔΔⵠᐃⵠ] = ΔΔ[Xr.ⵠⵠⵠΔⵠⲆⲆ];
      ΔΔ[Xr.ᐃΔΔᐃΔΔΔ] = du(1, [{
        f: Wd,
        x: 45,
        y: 70,
        a: Ot,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆᐃΔⲆⵠⵠᐃ] = ΔΔ[Xr.ᐃΔΔᐃΔΔΔ];
      ΔΔ[Xr.ⵠⲆⵠᐃΔⲆΔ] = du(za, [{
        f: rm,
        x: 0,
        y: gu,
        a: Ol,
        r: Kh,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.Ⲇⵠᐃᐃᐃᐃⵠ] = ΔΔ[Xr.ⵠⲆⵠᐃΔⲆΔ];
      ΔΔ[Xr.ΔⵠΔⵠⵠⵠΔ] = du(Te, [{
        f: $d,
        x: gu,
        y: 0,
        a: Ug,
        r: mj,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ΔⲆⵠⵠᐃΔᐃ] = ΔΔ[Xr.ΔⵠΔⵠⵠⵠΔ];
      ΔΔ[Xr.ᐃᐃΔᐃⲆⵠⲆ] = du(Ug, [{
        f: Cc,
        x: Db,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041"]
      }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ΔΔᐃᐃⵠⲆΔ] = ΔΔ[Xr.ᐃᐃΔᐃⲆⵠⲆ];
      ΔΔ[Xr.ᐃⲆⲆᐃⲆᐃᐃ] = du(1, [{
        f: Oc,
        x: ya,
        y: 3,
        a: Ug,
        r: gu,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆᐃⲆᐃΔⲆⵠ] = ΔΔ[Xr.ᐃⲆⲆᐃⲆᐃᐃ];
      ΔΔ[Xr.ⵠᐃᐃⵠⵠΔⲆ] = du(1, [{
        f: Oc,
        x: 0,
        y: 3,
        a: rg,
        r: 0,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠᐃΔᐃᐃᐃΔ] = ΔΔ[Xr.ⵠᐃᐃⵠⵠΔⲆ];
      ΔΔ[Xr.ⲆΔΔΔΔⵠᐃ] = du(1, [{
        f: bd,
        x: 0,
        y: gg,
        a: yg,
        r: ya,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠⵠᐃⲆΔⲆᐃ] = ΔΔ[Xr.ⲆΔΔΔΔⵠᐃ];
      ΔΔ[Xr.ⵠⵠΔᐃᐃⲆⵠ] = du(1, [{
        f: bd,
        x: Rs,
        y: 10,
        a: 1,
        r: tt,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆⲆⲆᐃΔΔⵠ] = ΔΔ[Xr.ⵠⵠΔᐃᐃⲆⵠ];
      ΔΔ[Xr.ΔᐃⵠᐃⲆⵠⲆ] = du(hd, [{
        f: bd,
        x: In,
        y: 10,
        a: yg,
        r: ya,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃⵠⲆΔⵠⲆⲆ] = ΔΔ[Xr.ΔᐃⵠᐃⲆⵠⲆ];
      ΔΔ[Xr.ⵠⲆⵠΔⵠⲆⲆ] = du(jh, [{
        f: Md,
        x: -1,
        y: mj,
        a: 1,
        r: Bg,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆᐃᐃᐃΔΔⲆ] = ΔΔ[Xr.ⵠⲆⵠΔⵠⲆⲆ];
      ΔΔ[Xr.ⲆⵠᐃⲆΔΔⵠ] = ΔΔ[Xr.ⵠⲆⵠΔⵠⲆⲆ];
      ΔΔ[Xr.ᐃⲆⵠΔΔⵠⵠ] = du(jh, [{
        f: Pc,
        x: 0,
        y: Lr,
        a: js,
        r: 0,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠᐃⲆΔΔΔⲆ] = ΔΔ[Xr.ᐃⲆⵠΔΔⵠⵠ];
      ΔΔ[Xr.ⵠⲆⵠᐃⵠΔⵠ] = du(1, [{
        f: Yc,
        x: 0,
        y: Hi,
        a: za,
        r: Math.PI / Xg,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
      }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠΔⲆⵠΔⵠⲆ] = ΔΔ[Xr.ⵠⲆⵠᐃⵠΔⵠ];
      ΔΔ[Xr.ᐃᐃⵠᐃⲆΔⲆ] = du(Te, [{
        f: um,
        x: tt,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ᐃᐃᐃΔⵠΔᐃ] = du(xt, [{
        f: Ec,
        x: Hi,
        y: Pg,
        a: 1,
        r: Bg,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ΔⵠᐃᐃⲆᐃⵠ] = du(1, [{
        f: um,
        x: 0,
        y: 0,
        a: rg,
        r: tt,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ᐃᐃᐃⲆⲆᐃΔ] = du(Xn, [{
        f: Ec,
        x: 0,
        y: 0,
        a: Te,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ᐃⵠⵠⲆΔΔⲆ] = du(1, [{
        f: dm,
        x: 0,
        y: wj,
        a: rg,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⵠΔᐃⲆᐃΔΔ] = du(Ot, [{
        f: dm,
        x: Kh,
        y: ya,
        a: 1,
        r: 0,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⲆⵠⲆⵠⲆⲆᐃ] = du(js, [{
        f: dm,
        x: ps,
        y: Hi,
        a: 1,
        r: 0,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ᐃΔΔⵠΔᐃⲆ] = du(1, [{
        f: om,
        x: ps,
        y: 0,
        a: Ug,
        r: Math.PI / Eq,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃⵠⲆΔᐃⲆᐃ] = ΔΔ[Xr.ᐃΔΔⵠΔᐃⲆ];
      ΔΔ[Xr.ⲆΔΔᐃᐃᐃⵠ] = du(1, [{
        f: om,
        x: Kh,
        y: 0,
        a: hs,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ΔᐃᐃⵠⲆΔⵠ] = ΔΔ[Xr.ⲆΔΔᐃᐃᐃⵠ];
      ΔΔ[Xr.ⲆΔⵠΔⵠⲆⲆ] = du(xt, [{
        f: om,
        x: mj,
        y: ya,
        a: Xn,
        r: Math.PI / ed,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆᐃⵠᐃΔⲆⵠ] = ΔΔ[Xr.ⲆΔⵠΔⵠⲆⲆ];
      ΔΔ[Xr.ⲆΔⵠⲆΔΔⵠ] = du(1, [{
        f: om,
        x: ya,
        y: tg,
        a: hs,
        r: Math.PI / M,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆᐃⵠⲆΔᐃᐃ] = ΔΔ[Xr.ⲆΔⵠⲆΔΔⵠ];
      ΔΔ[Xr.ⲆⵠΔΔⵠⵠΔ] = du(fl, [{
        f: dc,
        x: 0,
        y: mj,
        a: xt,
        r: gu,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆⲆⵠⵠⲆⲆᐃ] = ΔΔ[Xr.ⲆⵠΔΔⵠⵠΔ];
      ΔΔ[Xr.ᐃⲆᐃΔⵠⵠⵠ] = du(1, [{
        f: Dc,
        x: 0,
        y: 0,
        a: Oq,
        r: mj,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠⲆΔᐃⲆⲆⲆ] = ΔΔ[Xr.ᐃⲆᐃΔⵠⵠⵠ];
      ΔΔ[Xr.ΔⲆⵠⵠⲆⲆΔ] = du(Oq, [{
        f: qd,
        x: 0,
        y: -2,
        a: 1,
        r: Zj,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆⲆⵠⵠᐃⵠᐃ] = ΔΔ[Xr.ΔⲆⵠⵠⲆⲆΔ];
      ΔΔ[Xr.ᐃΔⲆΔᐃᐃⲆ] = du(1, [{
        f: Sd,
        x: Rq,
        y: Eh,
        a: lb,
        r: 0,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆᐃⲆⵠⲆᐃⵠ] = ΔΔ[Xr.ᐃΔⲆΔᐃᐃⲆ];
      ΔΔ[Xr.ΔⲆⵠΔᐃⲆⲆ] = du(1, [{
        f: mm,
        x: gu,
        y: 0,
        a: 1,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⵠᐃⵠΔⵠⵠⵠ] = ΔΔ[Xr.ΔⲆⵠΔᐃⲆⲆ];
      ΔΔ[Xr.ⲆᐃΔⵠⵠⵠΔ] = du(ie, [{
        f: _d,
        x: 0,
        y: wj,
        a: 1,
        r: 0,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ᐃⵠⵠᐃⲆΔⵠ] = ΔΔ[Xr.ⲆᐃΔⵠⵠⵠΔ];
      ΔΔ[Xr.ⵠΔⲆᐃⵠᐃΔ] = du(1, [{
        f: zd,
        x: ya,
        y: wj,
        a: hs,
        r: tt,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⲆⲆΔΔⵠⵠⵠ] = ΔΔ[Xr.ⵠΔⲆᐃⵠᐃΔ];
      ΔΔ[Xr.ⵠⲆΔᐃΔᐃⲆ] = du(1, [{
        f: Mc,
        x: -5,
        y: -ll,
        a: hd,
        r: zl,
        c: ["#1d051e", "#c27add", "#cd98e5"]
      }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⵠᐃⲆⲆΔΔᐃ] = du(Ol, [{
        f: md,
        x: 0,
        y: tt,
        a: 1,
        r: 0,
        c: ["#D7C393", "#a48c6c"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ΔᐃΔᐃΔΔⵠ] = du(rg, [{
        f: nm,
        x: 0,
        y: Bg,
        a: yg,
        r: In,
        c: ["#93CBCE", "#E9F6F6"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆΔⲆΔΔΔⲆ] = du(1, [{
        f: md,
        x: tg,
        y: mj,
        a: 1,
        r: 0,
        c: ["#866432", "#6b4f25"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ΔⵠΔⲆⲆⵠⵠ] = du(1, [{
        f: Pm,
        x: nq,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ΔΔΔΔⲆᐃᐃ] = du(1, [{
        f: Td,
        x: 3,
        y: Hj,
        a: 1,
        r: In,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ᐃⵠΔⵠⲆΔⵠ] = ΔΔ[Xr.ΔⵠΔⲆⲆⵠⵠ];
      ΔΔ[Xr.ⲆᐃᐃⵠⵠΔᐃ] = ΔΔ[Xr.ΔΔΔΔⲆᐃᐃ];
      ΔΔ[Xr.ⲆⵠΔⲆⵠΔΔ] = du(1, [{
        f: Bc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
      }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃᐃⵠⵠⲆⵠΔ] = ΔΔ[Xr.ⲆⵠΔⲆⵠΔΔ];
      ΔΔ[Xr.ΔⵠᐃΔⲆᐃⵠ] = du(1, [{
        f: kc,
        x: 0,
        y: ps,
        a: 1,
        r: Math.PI / ll,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔⲆⵠⵠᐃᐃⲆ] = du(1, [{
        f: tc,
        x: Zj,
        y: 0,
        a: 1,
        r: Math.PI / z,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⵠⲆᐃᐃᐃᐃⵠ] = ΔΔ[Xr.ΔⵠᐃΔⲆᐃⵠ];
      ΔΔ[Xr.ΔᐃⲆⲆⵠΔᐃ] = ΔΔ[Xr.ΔⲆⵠⵠᐃᐃⲆ];
      ΔΔ[Xr.ΔⲆΔⲆᐃᐃⵠ] = du(1, [{
        f: Qu,
        x: Da,
        y: ps,
        a: ie,
        r: tg,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔΔΔᐃᐃᐃⵠ] = ΔΔ[Xr.ΔⲆΔⲆᐃᐃⵠ];
      ΔΔ[Xr.ⲆⲆⲆΔᐃⵠΔ] = du(1, [{
        f: Lu,
        x: mj,
        y: Rs,
        a: za,
        r: 0,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆⲆⲆΔΔⲆⵠ] = du(ie, [{
        f: Mu,
        x: Eh,
        y: tt,
        a: Ot,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆᐃᐃΔᐃᐃⲆ] = du(hs, [{
        f: sm,
        x: Da,
        y: -2,
        a: fl,
        r: ps,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔΔᐃⲆᐃⲆⵠ] = ΔΔ[Xr.ⲆᐃᐃΔᐃᐃⲆ];
      ΔΔ[Xr.ⵠΔⲆⲆⵠⵠⵠ] = du(hs, [{
        f: Rc,
        x: -bb,
        y: -5,
        a: Te,
        r: Hi,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔᐃΔΔΔⵠⲆ] = du(Te, [{
        f: Id,
        x: In,
        y: Db,
        a: 1,
        r: Kh,
        c: ["#1d051e", "#42261A", "#281818"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⲆⲆΔⲆΔⲆⵠ] = ΔΔ[Xr.ΔᐃΔΔΔⵠⲆ];
      ΔΔ[Xr.ⲆΔᐃⲆΔᐃΔ] = du(za, [{
        f: $c,
        x: -3,
        y: tg,
        a: 1,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆⲆⲆⵠΔΔΔ] = ΔΔ[Xr.ⲆΔᐃⲆΔᐃΔ];
      ΔΔ[Xr.ⵠⵠΔᐃᐃⵠᐃ] = du(fl, [{
        f: Vt,
        x: Pg,
        y: wj,
        a: 1,
        r: 0,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
      }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⵠΔΔⵠΔⲆⲆ] = du(1, [{
        f: Kd,
        x: tg,
        y: Pg,
        a: 1,
        r: 0,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Xr.ⲆᐃⲆⵠⲆⲆΔ] = ΔΔ[Xr.ⵠΔΔⵠΔⲆⲆ];
      ΔΔ[Xr.ⲆᐃΔⵠΔΔΔ] = du(1, [{
        f: Ad,
        x: tt,
        y: In,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ⵠⲆⵠΔⵠΔⲆ] = ΔΔ[Xr.ⲆᐃΔⵠΔΔΔ];
      ΔΔ[Xr.ⲆᐃⵠᐃⲆΔⲆ] = du(1, [{
        f: Bb,
        x: -5,
        y: -kq,
        a: 1,
        r: Rq,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
      }], Ot, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔⵠᐃⵠΔⵠᐃ] = ΔΔ[Xr.ⲆᐃⵠᐃⲆΔⲆ];
      ΔΔ[Xr.ⵠⵠⵠᐃᐃΔⲆ] = du(za, [{
        f: cd,
        x: 0,
        y: 0,
        a: 1,
        r: Da,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
      }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔⲆⲆΔΔⵠᐃ] = ΔΔ[Xr.ⵠⵠⵠᐃᐃΔⲆ];
      ΔΔ[Xr.ⵠⲆⵠⵠᐃᐃΔ] = du(1, [{
        f: Ib,
        x: 0,
        y: 0,
        a: Ug,
        r: 0,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ΔᐃΔᐃᐃⲆΔ] = ΔΔ[Xr.ⵠⲆⵠⵠᐃᐃΔ];
      ΔΔ[Xr.ⵠⵠᐃΔⲆⲆⵠ] = du(1, [{
        f: hc,
        x: -mk,
        y: Da,
        a: Oq,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
      ΔΔ[Xr.ⲆⲆΔᐃⵠⲆⲆ] = ΔΔ[Xr.ⵠⵠᐃΔⲆⲆⵠ];
      ΔΔ[Xr.ⲆᐃΔᐃᐃᐃⵠ] = du(Oq, [{
        f: hc,
        x: -js,
        y: 0,
        a: Xn,
        r: -Math.PI / Wl,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
      }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ΔᐃᐃⵠⲆⲆⵠ] = ΔΔ[Xr.ⲆᐃΔᐃᐃᐃⵠ];
      ΔΔ[Xr.ΔⲆⵠᐃⵠᐃᐃ] = du(1, [{
        f: Qc,
        x: zl,
        y: Zj,
        a: Oq,
        r: Pg,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Xr.ⲆⲆⵠⵠⲆⲆΔ] = du(mk, [{
        f: Au,
        x: 0,
        y: 0,
        a: fl,
        r: Rq,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃⲆᐃᐃΔᐃⵠ] = ΔΔ[Xr.ⲆⲆⵠⵠⲆⲆΔ];
      ΔΔ[Xr.ⲆᐃΔⵠⵠᐃⵠ] = du(1, [{
        f: Zd,
        x: 0,
        y: 0,
        a: Xn,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃᐃⲆΔᐃⲆᐃ] = ΔΔ[Xr.ⲆᐃΔⵠⵠᐃⵠ];
      ΔΔ[Xr.ⵠⵠⲆⵠⵠⵠⵠ] = du(xt, [{
        f: Wt,
        x: -pq,
        y: -8,
        a: 1,
        r: Db,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Xr.ᐃᐃⲆⲆᐃΔΔ] = ΔΔ[Xr.ⵠⵠⲆⵠⵠⵠⵠ];
      ΔΔ[Xr.ⵠⵠΔⵠᐃᐃⵠ] = [];
      ΔΔ[Xr.ⵠⵠΔⵠᐃᐃⵠ][0] = Ⲇⵠ.ⲆᐃᐃᐃΔᐃⵠ;
      ΔΔ[Xr.ⵠⵠΔⵠᐃᐃⵠ][1] = Ⲇⵠ.ΔᐃⲆⲆⵠⵠᐃ;
      ΔΔ[Xr.ⵠⵠΔⵠᐃᐃⵠ][2] = Ⲇⵠ.ΔⲆⲆᐃΔⵠⵠ;
      ΔΔ[Xr.ΔⵠΔΔΔΔᐃ] = ΔΔ[Xr.ⵠⵠΔⵠᐃᐃⵠ];
      ΔΔ[Xr.ᐃΔⵠᐃⵠᐃⲆ] = ΔΔ[Xr.ⵠⵠΔⵠᐃᐃⵠ];
      ΔΔ[Xr.ᐃΔΔᐃⲆᐃⲆ] = [];
      ΔΔ[Xr.ᐃΔΔᐃⲆᐃⲆ][Db] = Ⲇⵠ.ⲆⵠΔⵠⲆⲆⲆ;
      ΔΔ[Xr.ᐃΔΔᐃⲆᐃⲆ][1] = Ⲇⵠ.ⲆⲆⲆⵠⲆⲆⲆ;
      ΔΔ[Xr.ᐃΔΔᐃⲆᐃⲆ][2] = Ⲇⵠ.ΔⲆⵠΔⵠⲆⵠ;
      ΔΔ[Xr.ⵠᐃⲆⲆⲆⲆᐃ] = ΔΔ[Xr.ᐃΔΔᐃⲆᐃⲆ];
      ΔΔ[Xr.ⲆᐃⵠᐃⵠᐃⲆ] = ΔΔ[Xr.ᐃΔΔᐃⲆᐃⲆ];
      ΔΔ[Xr.ᐃᐃᐃᐃⵠⲆⲆ] = ΔΔ[Xr.ⵠᐃΔᐃⵠⵠᐃ];
      ΔΔ[Xr.ⵠⵠⵠⵠᐃⲆⵠ] = ΔΔ[Xr.ⵠᐃΔᐃⵠⵠᐃ];
      ΔΔ[Xr.ⵠᐃΔᐃⵠⵠᐃ] = [];
      ΔΔ[Xr.ⵠᐃΔᐃⵠⵠᐃ][0] = Ⲇⵠ.ⵠΔⵠⲆⵠᐃΔ;
      ΔΔ[Xr.ⵠᐃΔᐃⵠⵠᐃ][1] = Ⲇⵠ.ⲆΔⵠⲆⵠⲆΔ;
      ΔΔ[Xr.ⵠᐃΔᐃⵠⵠᐃ][2] = Ⲇⵠ.ⲆⵠΔᐃⲆⲆⲆ;
      ΔΔ[Xr.ᐃᐃᐃᐃⵠⲆⲆ] = ΔΔ[Xr.ⵠᐃΔᐃⵠⵠᐃ];
      ΔΔ[Xr.ⵠⵠⵠⵠᐃⲆⵠ] = ΔΔ[Xr.ⵠᐃΔᐃⵠⵠᐃ];
      ΔΔ[Xr.ⲆᐃᐃⵠᐃΔΔ] = [];
      ΔΔ[Xr.ⲆᐃᐃⵠᐃΔΔ][In] = Ⲇⵠ.ᐃⲆᐃⵠᐃⵠⵠ;
      ΔΔ[Xr.ⲆᐃᐃⵠᐃΔΔ][cu] = Ⲇⵠ.ΔΔⲆⲆⲆΔΔ;
      ΔΔ[Xr.ⲆᐃᐃⵠᐃΔΔ][2] = Ⲇⵠ.ᐃᐃⵠΔⵠⵠΔ;
      ΔΔ[Xr.ⵠΔΔΔΔⲆⲆ] = ΔΔ[Xr.ⲆᐃᐃⵠᐃΔΔ];
      ΔΔ[Xr.ᐃⵠΔⵠⲆⲆⲆ] = ΔΔ[Xr.ⲆᐃᐃⵠᐃΔΔ];
      ΔΔ[Xr.ΔᐃᐃΔᐃΔⵠ] = [];
      ΔΔ[Xr.ΔᐃᐃΔᐃΔⵠ][Rs] = Ⲇⵠ.ⵠⵠⵠᐃⲆⲆΔ;
      ΔΔ[Xr.ΔᐃᐃΔᐃΔⵠ][Oq] = Ⲇⵠ.ⲆⲆᐃΔᐃⲆⲆ;
      ΔΔ[Xr.ΔᐃᐃΔᐃΔⵠ][2] = Ⲇⵠ.ⵠΔᐃⵠⲆⵠⵠ;
      ΔΔ[Xr.ᐃⵠΔⵠⵠⵠᐃ] = ΔΔ[Xr.ΔᐃᐃΔᐃΔⵠ];
      ΔΔ[Xr.ⲆᐃΔⲆΔⲆⵠ] = ΔΔ[Xr.ΔᐃᐃΔᐃΔⵠ];
      ΔΔ[Xr.ᐃᐃⵠᐃᐃΔΔ] = [];
      ΔΔ[Xr.ᐃᐃⵠᐃᐃΔΔ][Eh] = Ⲇⵠ.ᐃᐃᐃⵠⵠⲆⵠ;
      ΔΔ[Xr.ᐃᐃⵠᐃᐃΔΔ][1] = Ⲇⵠ.ⲆᐃⵠⲆⵠΔⵠ;
      ΔΔ[Xr.ᐃᐃⵠᐃᐃΔΔ][2] = Ⲇⵠ.ⲆᐃⲆΔⲆΔⲆ;
      ΔΔ[Xr.ⲆᐃΔⲆⵠΔⵠ] = ΔΔ[Xr.ᐃᐃⵠᐃᐃΔΔ];
      ΔΔ[Xr.ⵠΔⵠⲆΔᐃⲆ] = ΔΔ[Xr.ᐃᐃⵠᐃᐃΔΔ];
      ΔΔ[Xr.ᐃΔΔᐃⵠᐃⵠ] = [];
      ΔΔ[Xr.ᐃΔΔᐃⵠᐃⵠ][ya] = Ⲇⵠ.ΔⲆⵠⵠΔⲆΔ;
      ΔΔ[Xr.ᐃΔΔᐃⵠᐃⵠ][cu] = Ⲇⵠ.ⵠΔⵠⵠⲆᐃⵠ;
      ΔΔ[Xr.ᐃΔΔᐃⵠᐃⵠ][Jt] = Ⲇⵠ.ⲆⵠⵠⵠΔΔΔ;
      ΔΔ[Xr.ⲆⲆᐃΔⲆᐃᐃ] = ΔΔ[Xr.ᐃΔΔᐃⵠᐃⵠ];
      ΔΔ[Xr.ΔⲆⵠⵠⲆⵠⲆ] = ΔΔ[Xr.ᐃΔΔᐃⵠᐃⵠ];
      ΔΔ[Xr.ⵠⵠΔΔⵠᐃᐃ] = [];
      ΔΔ[Xr.ⵠⵠΔΔⵠᐃᐃ][0] = Ⲇⵠ.ⵠΔⵠⲆⲆⵠⲆ;
      ΔΔ[Xr.ⵠⵠΔΔⵠᐃᐃ][fl] = Ⲇⵠ.ⲆⵠᐃⵠΔⵠᐃ;
      ΔΔ[Xr.ⵠⵠΔΔⵠᐃᐃ][Zh] = Ⲇⵠ.ᐃᐃΔΔⲆΔᐃ;
      ΔΔ[Xr.ⵠΔⲆⲆⲆⲆᐃ] = ΔΔ[Xr.ⵠⵠΔΔⵠᐃᐃ];
      ΔΔ[Xr.ⵠΔΔΔΔᐃⲆ] = ΔΔ[Xr.ⵠⵠΔΔⵠᐃᐃ];
      ΔΔ[Xr.ⲆᐃⵠⲆⲆᐃⲆ] = [];
      ΔΔ[Xr.ⲆᐃⵠⲆⲆᐃⲆ][Hi] = Ⲇⵠ.ⲆΔⵠᐃᐃⲆᐃ;
      ΔΔ[Xr.ⲆᐃⵠⲆⲆᐃⲆ][1] = Ⲇⵠ.ⵠΔᐃⵠΔⵠⵠ;
      ΔΔ[Xr.ⲆᐃⵠⲆⲆᐃⲆ][2] = Ⲇⵠ.ᐃᐃⵠᐃⲆⲆⲆ;
      ΔΔ[Xr.ⵠⵠⵠⵠΔⲆⲆ] = ΔΔ[Xr.ⲆᐃⵠⲆⲆᐃⲆ];
      ΔΔ[Xr.ᐃᐃⲆᐃⵠΔⵠ] = ΔΔ[Xr.ⲆᐃⵠⲆⲆᐃⲆ];
      ΔΔ[Xr.ΔⵠΔΔⲆᐃⵠ] = [];
      ΔΔ[Xr.ΔⵠΔΔⲆᐃⵠ][0] = Ⲇⵠ.ⵠΔΔⵠᐃⵠΔ;
      ΔΔ[Xr.ΔⵠΔΔⲆᐃⵠ][1] = Ⲇⵠ.ⵠⲆΔΔΔⵠⵠ;
      ΔΔ[Xr.ΔⵠΔΔⲆᐃⵠ][H] = Ⲇⵠ.ⵠⵠΔΔⲆᐃΔ;
      ΔΔ[Xr.ⵠⲆⲆⵠΔⲆᐃᐃΔ] = ΔΔ[Xr.ΔⵠΔΔⲆᐃⵠ];
      ΔΔ[Xr.ΔΔⵠᐃⲆⲆⲆ] = ΔΔ[Xr.ΔⵠΔΔⲆᐃⵠ];
      ΔΔ[Xr.ⵠⵠⵠⲆⵠΔᐃ] = [];
      ΔΔ[Xr.ⵠⵠⵠⲆⵠΔᐃ][Da] = Ⲇⵠ.ΔⵠᐃⲆⵠᐃᐃ;
      ΔΔ[Xr.ⵠⵠⵠⲆⵠΔᐃ][1] = Ⲇⵠ.ⲆⵠΔΔⵠΔΔ;
      ΔΔ[Xr.ⵠⵠⵠⲆⵠΔᐃ][Gl] = Ⲇⵠ.ⵠᐃⲆⲆⲆⲆⲆ;
      ΔΔ[Xr.ΔⲆⵠΔⲆⲆⲆ] = ΔΔ[Xr.ⵠⵠⵠⲆⵠΔᐃ];
      ΔΔ[Xr.ⲆᐃⲆᐃᐃᐃⲆ] = ΔΔ[Xr.ⵠⵠⵠⲆⵠΔᐃ];
      ΔΔ[Xr.ⵠⵠᐃⵠᐃⵠᐃ] = [];
      ΔΔ[Xr.ⵠⵠᐃⵠᐃⵠᐃ][Kh] = Ⲇⵠ.ΔᐃⵠⵠⵠⵠΔ;
      ΔΔ[Xr.ⵠⵠᐃⵠᐃⵠᐃ][1] = Ⲇⵠ.ⲆᐃΔᐃⵠᐃΔ;
      ΔΔ[Xr.ⵠⵠᐃⵠᐃⵠᐃ][lr] = Ⲇⵠ.ΔΔᐃΔΔⲆⵠ;
      ΔΔ[Xr.ΔΔⲆᐃᐃᐃⵠ] = ΔΔ[Xr.ⵠⵠᐃⵠᐃⵠᐃ];
      ΔΔ[Xr.ⵠΔᐃᐃⵠᐃΔ] = ΔΔ[Xr.ⵠⵠᐃⵠᐃⵠᐃ];
      ΔΔ[Xr.ᐃⵠⵠⵠΔᐃⵠ] = [];
      ΔΔ[Xr.ᐃⵠⵠⵠΔᐃⵠ][0] = Ⲇⵠ.ᐃΔᐃᐃⲆᐃᐃ;
      ΔΔ[Xr.ᐃⵠⵠⵠΔᐃⵠ][cu] = Ⲇⵠ.ⵠⵠⲆᐃᐃᐃᐃ;
      ΔΔ[Xr.ᐃⵠⵠⵠΔᐃⵠ][Zg] = Ⲇⵠ.ᐃᐃΔⵠⵠⲆΔ;
      ΔΔ[Xr.ⲆⵠΔᐃΔⲆⵠ] = ΔΔ[Xr.ᐃⵠⵠⵠΔᐃⵠ];
      ΔΔ[Xr.ⲆⲆⵠⵠᐃΔᐃ] = [];
      ΔΔ[Xr.ⲆⲆⵠⵠᐃΔᐃ][wj] = Ⲇⵠ.ⵠⲆᐃΔⵠⲆⲆ;
      ΔΔ[Xr.ⲆⲆⵠⵠᐃΔᐃ][1] = Ⲇⵠ.ᐃΔⵠⵠⲆⵠⲆ;
      ΔΔ[Xr.ⲆⲆⵠⵠᐃΔᐃ][H] = Ⲇⵠ.ᐃᐃᐃⲆⵠᐃΔ;
      ΔΔ[Xr.ⲆⲆⵠᐃᐃⵠᐃ] = ΔΔ[Xr.ⲆⲆⵠⵠᐃΔᐃ];
      ΔΔ[Xr.ᐃⵠⲆᐃΔⵠᐃ] = ΔΔ[Xr.ᐃΔΔⵠΔᐃⲆ];
      ΔΔ[Xr.ⲆⵠᐃᐃᐃΔᐃ] = ΔΔ[Xr.ⲆΔΔᐃᐃᐃⵠ];
      ΔΔ[Xr.ᐃⲆΔⲆΔᐃΔ] = ΔΔ[Xr.ⲆΔⵠΔⵠⲆⲆ];
      ΔΔ[Xr.ᐃᐃⵠΔΔΔⲆ] = ΔΔ[Xr.ⲆΔⵠⲆΔΔⵠ];
      ΔΔ[Xr.ΔᐃΔΔⲆᐃⲆ] = ΔΔ[Xr.ᐃΔⵠⲆᐃⲆᐃ];
      ΔΔ[Xr.ⵠΔᐃᐃᐃⲆⵠ] = ΔΔ[Xr.ⵠⲆⵠⲆΔⲆⲆ];
      ΔΔ[Xr.ᐃΔΔΔΔⵠΔ] = ΔΔ[Xr.ⵠᐃΔΔᐃⲆⲆ];
      ΔΔ[Xr.ⵠΔᐃⵠⲆⵠΔ] = ΔΔ[Xr.ΔΔΔΔᐃⲆⲆ];
      ΔΔ[Xr.ΔΔⲆⲆⵠⵠᐃ] = ΔΔ[Xr.ⵠⲆⵠⲆⵠΔⲆ];
      ΔΔ[Xr.ⵠᐃΔⵠⲆΔΔ] = ΔΔ[Xr.ᐃᐃᐃΔⵠΔᐃ];
      ΔΔ[Xr.ᐃⲆΔⲆⵠΔᐃ] = ΔΔ[Xr.ᐃᐃⵠᐃⲆΔⲆ];
      ΔΔ[Xr.ⵠⵠᐃⲆᐃᐃⵠ] = ΔΔ[Xr.ᐃᐃᐃⲆⲆᐃΔ];
      ΔΔ[Xr.ⵠΔⲆⲆᐃⲆⲆ] = ΔΔ[Xr.ΔⵠᐃᐃⲆᐃⵠ];
      ΔΔ[Xr.ⵠⵠΔΔⲆⵠΔ] = ΔΔ[Xr.ⲆΔⵠⲆⲆⵠΔ];
      ΔΔ[Xr.ΔᐃⲆⵠⲆΔⲆ] = ΔΔ[Xr.ᐃΔⲆΔⵠⲆΔ];
      ΔΔ[Xr.ΔΔΔⲆΔⵠΔ] = ΔΔ[Xr.ΔᐃⵠΔΔⵠⲆ];
      ΔΔ[Xr.ΔⲆⲆⵠΔⵠⲆ] = ΔΔ[Xr.ᐃΔΔΔⵠⲆⲆ];
      ΔΔ[Xr.ⲆⵠⲆᐃⲆⲆⵠ] = ΔΔ[Xr.ⲆᐃⲆᐃᐃΔΔ];
      ΔΔ[Xr.ΔᐃᐃᐃᐃΔᐃ] = ΔΔ[Xr.ᐃⵠⲆⲆᐃⵠⵠ];
      ΔΔ[Xr.ᐃΔⲆⲆⵠⵠΔ] = ΔΔ[Xr.ΔΔᐃΔⲆΔⲆ];
      ΔΔ[Xr.ᐃΔⵠΔΔᐃΔ] = ΔΔ[Xr.ᐃⵠⵠᐃᐃⵠᐃ];
      ΔΔ[Xr.ⲆᐃΔΔΔΔⵠ] = ΔΔ[Xr.ⵠᐃⵠⲆΔᐃΔ];
      ΔΔ[Xr.ⵠⲆΔΔⲆΔᐃ] = ΔΔ[Xr.ⵠᐃΔⲆᐃᐃⵠ];
      ΔΔ[Xr.ⵠⵠⵠⵠⵠⲆᐃ] = ΔΔ[Xr.ᐃⲆᐃΔᐃᐃΔ];
      ΔΔ[Xr.ΔΔⵠᐃⵠⵠⵠ] = ΔΔ[Xr.ᐃΔΔΔⲆⵠᐃ];
      ΔΔ[Xr.ⵠΔΔΔⵠΔⵠ] = ΔΔ[Xr.ⲆⲆⲆⲆⲆⲆᐃ];
      ΔΔ[Xr.ⵠⵠΔΔΔⲆΔ] = ΔΔ[Xr.ΔⲆᐃⲆΔᐃⲆ];
      ΔΔ[Xr.ᐃⵠᐃⵠⵠΔΔ] = ΔΔ[Xr.ⲆⵠⵠⲆⲆⲆᐃ];
      ΔΔ[Xr.ⵠΔⲆΔᐃⲆⵠ] = ΔΔ[Xr.ᐃⲆΔΔⵠⲆΔ];
      ΔΔ[Xr.ᐃᐃᐃᐃⲆΔΔ] = ΔΔ[Xr.ⲆⲆΔⵠᐃΔⲆ];
      ΔΔ[Xr.ⵠΔⵠⲆⵠᐃⵠ] = ΔΔ[Xr.ⵠⵠⵠΔΔᐃⵠ];
      ΔΔ[Xr.ΔⵠΔⵠᐃⵠᐃ] = ΔΔ[Xr.ⵠᐃΔⲆⲆⲆᐃ];
      ΔΔ[Xr.ΔⲆⲆⲆⲆᐃⲆ] = ΔΔ[Xr.ⵠⲆᐃⵠᐃⵠᐃ];
      ΔΔ[Xr.ⵠⵠⲆⲆⵠⲆᐃ] = ΔΔ[Xr.ⵠᐃΔΔⵠⲆⲆ];
      ΔΔ[Xr.ᐃΔΔᐃⵠᐃᐃ] = ΔΔ[Xr.ⵠΔⵠⵠⵠⵠᐃ];
      ΔΔ[Xr.ⲆⲆᐃΔⵠΔⵠ] = ΔΔ[Xr.Δⵠᐃⵠⵠᐃᐃ];
      ΔΔ[Xr.ⵠⵠⲆⲆⵠᐃⵠ] = ΔΔ[Xr.ΔᐃⲆⲆⵠᐃⲆ];
      ΔΔ[Xr.ⵠᐃΔⵠᐃᐃΔ] = ΔΔ[Xr.ⵠᐃⲆⲆᐃᐃΔ];
      ΔΔ[Xr.ⵠΔⵠⲆᐃⲆⲆ] = ΔΔ[Xr.ⲆΔᐃᐃⲆⲆΔ];
      ΔΔ[Xr.ⵠᐃΔΔΔⲆᐃ] = ΔΔ[Xr.ⵠⲆⲆΔΔΔⵠ];
      ΔΔ[Xr.ᐃⵠᐃⵠᐃⲆΔ] = ΔΔ[Xr.ᐃⲆⲆⲆⲆΔᐃ];
      ΔΔ[Xr.ⲆᐃⵠᐃⲆⲆΔ] = ΔΔ[Xr.ΔⵠΔΔΔᐃᐃ];
      ΔΔ[Xr.ΔⲆⲆΔΔⵠⲆ] = ΔΔ[Xr.ⲆⲆᐃⲆᐃΔᐃ];
      ΔΔ[Xr.ΔⲆⵠΔⲆⵠⵠ] = ΔΔ[Xr.ΔⲆΔⲆΔᐃΔ];
      ΔΔ[Xr.ⵠⵠᐃΔΔᐃᐃ] = ΔΔ[Xr.ΔᐃⲆⵠΔΔⵠ];
      ΔΔ[Xr.ⲆΔᐃⲆᐃⵠⲆ] = ΔΔ[Xr.ⵠⲆΔΔⵠᐃΔ];
      ΔΔ[Xr.ᐃΔΔᐃⲆᐃᐃ] = ΔΔ[Xr.ⵠⵠⵠΔⵠⲆⲆ];
      ΔΔ[Xr.ⵠⲆⵠᐃΔᐃⵠ] = ΔΔ[Xr.ᐃᐃᐃⲆᐃⲆⲆ];
      ΔΔ[Xr.ᐃᐃⵠⵠᐃⲆΔ] = ΔΔ[Xr.ΔΔΔΔⵠⲆⲆ];
      ΔΔ[Xr.ᐃⵠⵠⵠᐃᐃⵠ] = ΔΔ[Xr.ⵠⲆⵠᐃⵠΔⵠ];
      ΔΔ[Xr.ⵠᐃΔΔᐃⲆᐃ] = ΔΔ[Xr.ᐃΔΔᐃΔΔΔ];
      ΔΔ[Xr.ⵠᐃᐃᐃᐃΔΔ] = ΔΔ[Xr.ᐃᐃⵠⵠⲆΔⵠ];
      ΔΔ[Xr.ⲆᐃⲆⲆΔⲆΔ] = ΔΔ[Xr.ⵠⲆⲆⲆᐃⵠᐃ];
      ΔΔ[Xr.ΔⲆᐃΔᐃᐃⲆ] = pr(function (a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 129;
        e.save();
        e.translate(a * 90, a * 90);
        wb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
        e.restore();
        cb(e, c[Rq], c[1], Gi);
        e.save();
        wb(e, a * 30, a * 115, a * 60, a * Pt, a * 15);
        e.restore();
        cb(e, c[2], c[hl], Dt);
        e.save();
        wb(e, a * 50, a * 117, a * 20, a * vr, a * 15);
        e.restore();
        cb(e, c[pq]);
        return d;
      }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
      ΔΔ[Xr.ΔᐃⲆΔⲆΔⲆ] = du(0.5, [{
        f: Nd,
        x: 0,
        y: 2,
        a: za,
        r: Eh,
        c: ["#ffffff"]
      }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
      ΔΔ[Xr.ΔⵠⲆⲆⲆⲆΔ] = ΔΔ[Xr.ᐃΔᐃⲆᐃΔⵠ];
      ΔΔ[Xr.ⵠⲆᐃᐃΔⵠΔ] = ΔΔ[Xr.ᐃΔⲆᐃⲆⲆΔ];
      ΔΔ[Xr.ⲆΔᐃΔⲆΔΔ] = ΔΔ[Xr.ⲆⲆⵠⵠΔⵠΔ];
      ΔΔ[Xr.ᐃⵠᐃⲆΔⵠⵠ] = ΔΔ[Xr.ⲆᐃⵠᐃᐃⲆᐃ];
      ΔΔ[Xr.ᐃⵠᐃⵠΔⲆΔ] = ΔΔ[Xr.ⲆᐃⵠⵠⵠⵠΔ];
      ΔΔ[Xr.ᐃⲆⲆΔΔⲆΔ] = ΔΔ[Xr.ⵠΔⵠⵠΔⵠⵠ];
      ΔΔ[Xr.ᐃᐃᐃⲆᐃΔᐃ] = ΔΔ[Xr.ᐃⵠⲆⲆⵠΔΔ];
      ΔΔ[Xr.ⲆⵠⵠⲆⵠᐃⵠ] = ΔΔ[Xr.ΔⲆᐃΔΔᐃᐃ];
      ΔΔ[Xr.ⵠⲆᐃⲆⲆⵠⲆ] = ΔΔ[Xr.ΔᐃᐃⲆΔΔᐃ];
      ΔΔ[Xr.ⲆⵠⵠⵠⵠΔΔ] = ΔΔ[Xr.ⵠⲆᐃⵠⲆᐃⵠ];
      ΔΔ[Xr.ΔᐃⵠⲆⵠᐃΔ] = ΔΔ[Xr.ⵠΔᐃΔⵠⲆΔ];
      ΔΔ[Xr.ⵠⲆⲆΔⲆⲆⲆ] = ΔΔ[Xr.ⵠᐃΔΔⵠⲆᐃ];
      ΔΔ[Xr.ⲆⵠᐃΔⲆᐃⵠ] = ΔΔ[Xr.ᐃⵠⵠⲆⵠᐃⲆ];
      ΔΔ[Xr.ⲆⵠⲆᐃⵠⵠΔ] = ΔΔ[Xr.ᐃⵠⲆᐃΔᐃΔ];
      ΔΔ[Xr.ΔⲆⲆᐃᐃΔⲆ] = ΔΔ[Xr.ΔᐃⵠⵠᐃⲆⵠ];
      ΔΔ[Xr.ⲆⲆΔᐃⲆⲆⵠ] = ΔΔ[Xr.ΔⲆᐃΔⲆⵠᐃ];
      ΔΔ[Xr.ⲆⲆΔᐃⲆΔΔ] = ΔΔ[Xr.ⲆΔΔⵠΔⵠⲆ];
      ΔΔ[Xr.ᐃᐃᐃΔⵠⵠᐃ] = ΔΔ[Xr.ΔⵠΔΔΔᐃⲆ];
      ΔΔ[Xr.ΔΔΔΔΔⲆⵠ] = ΔΔ[Xr.ΔⲆⵠᐃΔⵠⵠ];
      ΔΔ[Xr.ⵠΔΔᐃⲆⵠᐃ] = ΔΔ[Xr.ΔⲆΔᐃⲆⵠΔ];
      ΔΔ[Xr.ⲆⲆᐃΔⵠⵠⲆ] = ΔΔ[Xr.ⵠⵠΔΔΔΔⲆ];
      ΔΔ[Xr.ⵠᐃⲆΔⲆⵠⲆ] = ΔΔ[Xr.ⵠⲆⵠΔⲆⵠᐃ];
      ΔΔ[Xr.ᐃⲆⲆΔΔⵠⵠ] = ΔΔ[Xr.ᐃᐃᐃⵠΔᐃΔ];
      ΔΔ[Xr.ⵠⵠⵠᐃⵠⵠⵠ] = ΔΔ[Xr.ⵠΔⵠⲆᐃⲆᐃ];
      ΔΔ[Xr.ⵠᐃᐃⲆⵠⲆⲆ] = ΔΔ[Xr.ⵠⲆΔⵠⲆⲆᐃ];
      ΔΔ[Xr.ⵠᐃΔᐃⲆΔⲆ] = ΔΔ[Xr.ᐃⲆⲆΔᐃΔⵠ];
      ΔΔ[Xr.ⵠᐃⵠΔΔⵠΔ] = ΔΔ[Xr.ⲆΔᐃⵠΔᐃᐃ];
      ΔΔ[Xr.ᐃⲆⲆⵠⵠⲆᐃ] = ΔΔ[Xr.ΔᐃᐃᐃΔⵠΔ];
      ΔΔ[Xr.ᐃΔⵠⲆⲆⲆᐃ] = ΔΔ[Xr.ΔᐃⵠⵠΔⲆΔ];
      ΔΔ[Xr.ⵠⵠᐃᐃⵠⲆΔ] = ΔΔ[Xr.ᐃⲆⲆⵠᐃᐃⲆ];
      ΔΔ[Xr.ᐃⲆᐃⲆᐃΔΔ] = ΔΔ[Xr.ⲆᐃⵠⵠΔⵠΔ];
      ΔΔ[Xr.ⲆᐃⲆⵠᐃⵠᐃ] = ΔΔ[Xr.ᐃⵠⲆΔᐃᐃⵠ];
      ΔΔ[Xr.ⲆᐃᐃⵠⲆⵠⲆ] = ΔΔ[Xr.ⵠⵠᐃⵠⲆⲆᐃ];
      ΔΔ[Xr.ΔⲆⲆΔⵠⵠᐃ] = ΔΔ[Xr.ⲆⵠΔΔⵠⵠΔ];
      ΔΔ[Xr.ⲆΔΔΔⲆᐃΔ] = ΔΔ[Xr.ΔⲆⵠⵠⲆⲆΔ];
      ΔΔ[Xr.ΔⵠᐃᐃⵠⲆⲆ] = ΔΔ[Xr.ᐃΔⲆΔᐃᐃⲆ];
      ΔΔ[Xr.ⲆᐃⲆⲆⲆᐃⲆ] = ΔΔ[Xr.ΔⲆⵠΔᐃⲆⲆ];
      ΔΔ[Xr.ᐃᐃⵠⵠᐃΔᐃ] = ΔΔ[Xr.ⵠⲆⵠᐃΔⲆΔ];
      ΔΔ[Xr.ᐃⲆⵠᐃᐃⵠⲆ] = ΔΔ[Xr.ᐃⲆⵠΔΔⵠⵠ];
      ΔΔ[Xr.ΔⵠⵠΔⲆⵠΔ] = ΔΔ[Xr.ⲆᐃΔⵠⵠⵠΔ];
      ΔΔ[Xr.ΔⵠᐃΔΔⵠᐃ] = ΔΔ[Xr.ⵠΔⲆᐃⵠᐃΔ];
      ΔΔ[Xr.ⵠᐃⵠⵠⵠⵠΔ] = ΔΔ[Xr.ⵠⲆΔᐃΔᐃⲆ];
      ΔΔ[Xr.ⲆⵠⵠΔᐃᐃᐃ] = ΔΔ[Xr.ⵠⵠⵠᐃᐃΔⲆ];
      ΔΔ[Xr.ΔⲆⲆⲆΔᐃᐃ] = ΔΔ[Xr.ⵠⲆⵠⵠᐃᐃΔ];
      ΔΔ[Xr.ⵠΔⵠᐃᐃⵠᐃ] = ΔΔ[Xr.ⲆᐃΔⵠΔΔΔ];
      ΔΔ[Xr.ΔΔⵠⵠⲆΔⵠ] = ΔΔ[Xr.ⵠᐃⲆⲆΔΔᐃ];
      ΔΔ[Xr.ΔΔΔΔᐃⵠⵠ] = ΔΔ[Xr.ⲆᐃᐃΔᐃᐃⲆ];
      ΔΔ[Xr.ΔⵠⵠᐃᐃⲆⵠ] = ΔΔ[Xr.ΔᐃΔᐃΔΔⵠ];
      ΔΔ[Xr.ⲆᐃⵠⲆⵠⲆΔ] = ΔΔ[Xr.ⲆΔⲆΔΔΔⲆ];
      ΔΔ[Xr.ᐃΔᐃⵠⵠᐃⲆ] = ΔΔ[Xr.ΔⵠᐃΔⲆᐃⵠ];
      ΔΔ[Xr.ΔᐃⵠⲆΔⵠᐃ] = ΔΔ[Xr.ΔⲆⵠⵠᐃᐃⲆ];
      ΔΔ[Xr.ⲆᐃⵠᐃⲆⵠⵠ] = ΔΔ[Xr.ⲆᐃΔᐃᐃᐃⵠ];
      ΔΔ[Xr.ᐃⲆⵠⵠⵠΔⵠ] = ΔΔ[Xr.ΔⲆⵠᐃⵠᐃᐃ];
      ΔΔ[Xr.ΔⲆⵠΔᐃⵠᐃ] = ΔΔ[Xr.ΔⲆΔⲆᐃᐃⵠ];
      ΔΔ[Xr.ΔⲆᐃᐃⵠⲆⲆ] = ΔΔ[Xr.ⲆⲆⲆΔᐃⵠΔ];
      ΔΔ[Xr.ᐃⵠⲆⲆΔⲆΔ] = ΔΔ[Xr.ⲆⲆⲆΔΔⲆⵠ];
      ΔΔ[Xr.ΔᐃΔᐃΔᐃΔ] = ΔΔ[Xr.ⵠΔΔⵠΔⲆⲆ];
      ΔΔ[Xr.ⵠᐃΔⵠΔⵠᐃ] = ΔΔ[Xr.ⲆΔᐃⲆΔᐃΔ];
      ΔΔ[Xr.ⵠΔⵠΔᐃⵠⲆ] = ΔΔ[Xr.ⵠⵠᐃΔⲆⲆⵠ];
      ΔΔ[Xr.ΔΔᐃᐃⲆᐃΔ] = ΔΔ[Xr.ⲆᐃΔⵠⵠᐃⵠ];
      ΔΔ[Xr.ᐃⲆᐃᐃΔᐃⵠ] = ΔΔ[Xr.ⲆⲆⵠⵠⲆⲆΔ];
      ΔΔ[Xr.ⲆΔΔⵠⵠⵠΔ] = ΔΔ[Xr.ⵠΔⲆⲆⵠⵠⵠ];
      ΔΔ[Xr.ⵠⵠᐃⵠⵠΔⲆ] = ΔΔ[Xr.ΔᐃΔΔΔⵠⲆ];
      ΔΔ[Xr.ⲆⵠᐃⵠⲆⵠᐃ] = ΔΔ[Xr.ⵠⵠΔᐃᐃⵠᐃ];
      ΔΔ[Xr.ᐃᐃⲆΔᐃᐃⵠ] = ΔΔ[Xr.ⵠⵠⲆⵠⵠⵠⵠ];
      ΔΔ[Xr.ⵠΔⵠⵠᐃΔᐃ] = ΔΔ[Xr.ⲆΔΔΔΔⵠᐃ];
      ΔΔ[Xr.ⵠΔⲆΔΔᐃΔ] = ΔΔ[Xr.ᐃⵠⵠⲆΔΔⲆ];
      ΔΔ[Xr.ΔⵠⲆᐃⲆⵠΔ] = ΔΔ[Xr.ⵠⵠΔᐃᐃⲆⵠ];
      ΔΔ[Xr.ⲆΔᐃⵠᐃᐃΔ] = ΔΔ[Xr.ⵠΔᐃⲆᐃΔΔ];
      ΔΔ[Xr.ⲆⲆⵠᐃΔᐃᐃ] = ΔΔ[Xr.ΔᐃⵠᐃⲆⵠⲆ];
      ΔΔ[Xr.ΔⲆᐃⲆᐃⵠΔ] = ΔΔ[Xr.ⲆⵠⲆⵠⲆⲆᐃ];
      ΔΔ[Xr.ⲆⲆⵠⲆᐃΔΔ] = ΔΔ[Xr.ᐃᐃΔᐃⲆⵠⲆ];
      ΔΔ[Xr.ⲆΔΔⲆⲆΔΔ] = ΔΔ[Xr.ⵠᐃᐃⵠⵠΔⲆ];
      ΔΔ[Xr.ΔⵠⲆⵠᐃᐃⲆ] = ΔΔ[Xr.ᐃⲆⲆᐃⲆᐃᐃ];
      ΔΔ[Xr.ⲆᐃΔᐃⵠΔⲆ] = ΔΔ[Xr.ΔⵠΔⵠⵠⵠΔ];
      ΔΔ[Xr.ⲆΔᐃᐃᐃᐃⵠ] = ΔΔ[Xr.ΔΔΔΔⲆᐃᐃ];
      ΔΔ[Xr.ΔⲆᐃᐃΔⵠⲆ] = ΔΔ[Xr.ΔⵠΔⲆⲆⵠⵠ];
      ΔΔ[Xr.ᐃΔⵠΔⲆᐃΔ] = ΔΔ[Xr.ⲆⵠΔⲆⵠΔΔ];
      ΔΔ[Xr.ΔΔᐃΔΔΔⲆ] = ΔΔ[Xr.ᐃΔᐃⲆΔᐃⲆ];
      ΔΔ[Xr.ⲆΔⲆⵠΔⲆΔ] = ΔΔ[Xr.ⵠᐃⲆΔⵠΔΔ];
      ΔΔ[Xr.ΔΔⵠΔᐃΔΔ] = ΔΔ[Xr.ⲆⵠⲆⵠⲆᐃΔ];
      ΔΔ[Xr.ΔⲆᐃᐃⲆⵠⵠ] = ΔΔ[Xr.ⵠⵠΔᐃⲆⲆᐃ];
      ΔΔ[Xr.ⲆΔⲆⲆᐃΔⲆ] = ΔΔ[Xr.ᐃⲆᐃΔⵠⵠⵠ];
    })();
    ΔΔ[Xr.ⵠⲆᐃᐃⵠΔᐃ] = [];
    ΔΔ[Xr.ⵠⲆᐃᐃⵠΔᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠⲆᐃᐃⵠΔᐃ][Xr.ΔⲆⵠ] = [];
    for (var a = zl; a < Xr.ⲆⵠᐃᐃᐃⲆᐃ; a++) {
      ΔΔ[Xr.ⵠⲆᐃᐃⵠΔᐃ][Xr.ⲆᐃΔ].push(pr(nc(1, 4 + a, "#59B8CE")));
      ΔΔ[Xr.ⵠⲆᐃᐃⵠΔᐃ][Xr.ΔⲆⵠ].push(pr(nc(1, Dt + a, "#90DDD9")));
    }
    ΔΔ[Xr.ⲆⵠⲆΔⵠΔⲆ] = [];
    ΔΔ[Xr.ⲆⵠⲆΔⵠΔⲆ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⲆⵠⲆΔⵠΔⲆ][Xr.ΔⲆⵠ] = [];
    for (a = 0; a < Xr.ⵠᐃⵠⵠΔᐃⲆ; a++) {
      ΔΔ[Xr.ⲆⵠⲆΔⵠΔⲆ][Xr.ⲆᐃΔ].push(pr(nc(1, 4 + a, "#fff")));
      ΔΔ[Xr.ⲆⵠⲆΔⵠΔⲆ][Xr.ΔⲆⵠ].push(pr(nc(1, 4 + a, "#fff")));
    }
    ΔΔ[Xr.ΔⲆⲆⵠΔⵠᐃ] = [];
    ΔΔ[Xr.ΔⲆⲆⵠΔⵠᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ΔⲆⲆⵠΔⵠᐃ][Xr.ΔⲆⵠ] = [];
    for (a = 0; Xr.ⵠᐃⵠⵠΔᐃⲆ > a; a++) {
      ΔΔ[Xr.ΔⲆⲆⵠΔⵠᐃ][Xr.ⲆᐃΔ].push(pr(nc(1, Na + a, "#DDCD8A")));
      ΔΔ[Xr.ΔⲆⲆⵠΔⵠᐃ][Xr.ΔⲆⵠ].push(pr(nc(1, 6 + a, "#155E57")));
    }
    ΔΔ[Xr.ᐃⲆⵠᐃⲆⵠⲆ] = [];
    ΔΔ[Xr.ᐃⲆⵠᐃⲆⵠⲆ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃⲆⵠᐃⲆⵠⲆ][Xr.ΔⲆⵠ] = [];
    for (a = Hi; a < Xr.ᐃᐃⲆⲆⵠᐃΔ; a++) {
      ΔΔ[Xr.ᐃⲆⵠᐃⲆⵠⲆ][Xr.ⲆᐃΔ].push(pr(nc(1, Vn + a, "#353326")));
      ΔΔ[Xr.ᐃⲆⵠᐃⲆⵠⲆ][Xr.ΔⲆⵠ].push(pr(nc(1, Og + a, "#1D2526")));
    }
    ΔΔ[Xr.ⵠᐃΔⲆⲆ] = [];
    ΔΔ[Xr.ⵠᐃΔⲆⲆ][Xr.ⲆᐃΔ] = pr(Fb(1.5, 0, ["#ee71a9"]));
    ΔΔ[Xr.ⵠᐃΔⲆⲆ][Xr.ΔⲆⵠ] = pr(Fb(1.5, 0, ["#ee71a9"]));
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ] = [ΔΔ[Xr.ⵠᐃΔⲆⲆ]];
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][Ot] = [];
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][2] = [];
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][3] = [];
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][4] = [];
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][1][Xr.ⲆᐃΔ] = pr(Fb(1.5, 0, ["#e2d63b"]));
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][Ot][Xr.ΔⲆⵠ] = pr(Fb(1.5, 0, ["#e2d63b"]));
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][2][Xr.ⲆᐃΔ] = pr(Fb(1.5, 0, ["#309cbd"]));
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][2][Xr.ΔⲆⵠ] = pr(Fb(1.5, 0, ["#309cbd"]));
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][vt][Xr.ⲆᐃΔ] = pr(Fb(1.5, 0, ["#cd232d"]));
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][3][Xr.ΔⲆⵠ] = pr(Fb(1.5, 0, ["#cd232d"]));
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][ks][Xr.ⲆᐃΔ] = pr(Fb(1.5, 0, ["#42b672"]));
    ΔΔ[Xr.ᐃⵠᐃⵠⲆ][4][Xr.ΔⲆⵠ] = pr(Fb(1.5, 0, ["#42b672"]));
    if (ᐃⵠΔⲆ.ΔᐃΔⵠᐃᐃΔ("cti", dj.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      pr = function (a) {
        a.loaded = Oq;
        return a;
      };
    }
    ΔΔ[Xr.ⵠⲆⲆⲆⲆΔⲆ] = pr(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(Pg, 0, a.width, a.height);
      b.lineWidth = eh;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ΔΔ[Xr.ⵠⵠⲆΔΔ] = [];
    ΔΔ[Xr.ⵠⵠⲆΔΔ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠⵠⲆΔΔ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⵠⵠⲆΔΔ][Xr.ⲆᐃΔ].push(pr(id(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[Xr.ⵠⵠⲆΔΔ][Xr.ⲆᐃΔ].push(pr(id(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[Xr.ⵠⵠⲆΔΔ][Xr.ⲆᐃΔ].push(pr(id(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[Xr.ⵠⵠⲆΔΔ][Xr.ΔⲆⵠ].push(pr(id(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[Xr.ⵠⵠⲆΔΔ][Xr.ΔⲆⵠ].push(pr(id(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[Xr.ⵠⵠⲆΔΔ][Xr.ΔⲆⵠ].push(pr(id(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[Xr.ᐃⲆⵠᐃ] = [];
    ΔΔ[Xr.ᐃⲆⵠᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃⲆⵠᐃ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃⲆⵠᐃ][Xr.ⲆᐃΔ].push(pr(ad(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Xr.ᐃⲆⵠᐃ][Xr.ⲆᐃΔ].push(pr(ad(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Xr.ᐃⲆⵠᐃ][Xr.ⲆᐃΔ].push(pr(ad(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Xr.ᐃⲆⵠᐃ][Xr.ΔⲆⵠ].push(pr(ad(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[Xr.ᐃⲆⵠᐃ][Xr.ΔⲆⵠ].push(pr(ad(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[Xr.ᐃⲆⵠᐃ][Xr.ΔⲆⵠ].push(pr(ad(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[Xr.ᐃⲆΔⵠ] = [];
    ΔΔ[Xr.ᐃⲆΔⵠ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃⲆΔⵠ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃⲆΔⵠ][Xr.ⲆᐃΔ].push(pr(rd(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[Xr.ᐃⲆΔⵠ][Xr.ⲆᐃΔ].push(pr(rd(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[Xr.ᐃⲆΔⵠ][Xr.ⲆᐃΔ].push(pr(rd(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[Xr.ᐃⲆΔⵠ][Xr.ΔⲆⵠ].push(pr(rd(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ΔΔ[Xr.ᐃⲆΔⵠ][Xr.ΔⲆⵠ].push(pr(rd(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ΔΔ[Xr.ᐃⲆΔⵠ][Xr.ΔⲆⵠ].push(pr(rd(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ΔΔ[Xr.ⵠΔᐃⵠⲆ] = [];
    ΔΔ[Xr.ⵠΔᐃⵠⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⲆⵠⵠⵠΔ;
    ΔΔ[Xr.ⵠΔᐃⵠⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃᐃΔⲆⲆⲆ;
    ΔΔ[Xr.ᐃᐃⵠᐃⲆ] = [];
    ΔΔ[Xr.ᐃᐃⵠᐃⲆ][Xr.ⲆᐃΔ] = pr(Gu(0.6, ["#0d1b1c"]));
    ΔΔ[Xr.ᐃᐃⵠᐃⲆ][Xr.ΔⲆⵠ] = pr(Gu(0.6, ["#030d14"]));
    ΔΔ[Xr.ⲆⵠⵠⲆΔ] = [];
    ΔΔ[Xr.ⲆⵠⵠⲆΔ][Xr.ⲆᐃΔ] = pr(mu(0.6, ["#2a2938", "#242330"]));
    ΔΔ[Xr.ⲆⵠⵠⲆΔ][Xr.ΔⲆⵠ] = pr(mu(0.6, ["#1b1e30", "#161921"]));
    ΔΔ[Xr.ΔⵠΔᐃΔᐃᐃ] = [];
    ΔΔ[Xr.ΔⵠΔᐃΔᐃᐃ][Xr.ⲆᐃΔ] = pr(Gb(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ΔΔ[Xr.ΔⵠΔᐃΔᐃᐃ][Xr.ΔⲆⵠ] = pr(Gb(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ΔΔ[Xr.ⲆⲆⵠⲆⵠᐃⵠ] = [];
    ΔΔ[Xr.ⲆⲆⵠⲆⵠᐃⵠ][Xr.ⲆᐃΔ] = pr(Rb(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ΔΔ[Xr.ⲆⲆⵠⲆⵠᐃⵠ][Xr.ΔⲆⵠ] = pr(Rb(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ΔΔ[Xr.ⲆⵠᐃⲆⲆᐃΔ] = [];
    ΔΔ[Xr.ⲆⵠᐃⲆⲆᐃΔ][Xr.ⲆᐃΔ] = pr(nu(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ΔΔ[Xr.ⲆⵠᐃⲆⲆᐃΔ][Xr.ΔⲆⵠ] = pr(nu(0.4, ["#030d14", "#11635e", "#02373e"]));
    ΔΔ[Xr.ᐃΔⲆᐃⵠⲆⵠ] = pr(jb(0.6, ["#BB0000"]));
    ΔΔ[Xr.ᐃⵠΔΔᐃΔΔ] = pr(jb(0.6, ["#DBE71C"]));
    ΔΔ[Xr.ᐃᐃᐃᐃⵠΔᐃ] = pr(jb(0.6, ["#00BB00"]));
    ΔΔ[Xr.ΔΔⵠⲆ] = [];
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ].push(Cu(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], false, 0));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ].push(Cu(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], true, Db));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ].push(Cu(0.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], false, ya));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ].push(Cu(0.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], xh, tg));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ].push(Cu(0.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], false, Kh));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ].push(Cu(0.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], vs, Bg));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ].push(Cu(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], false, 0));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ].push(Cu(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], true, Pg));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ].push(Cu(0.9, ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], Ta, 0));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ].push(Cu(0.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, Lr));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ].push(Cu(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, Pg));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ].push(Cu(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
    ΔΔ[Xr.ΔⵠᐃⲆΔ] = [];
    ΔΔ[Xr.ΔⵠᐃⲆΔ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ΔⵠᐃⲆΔ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ΔⵠᐃⲆΔ][Xr.ⲆᐃΔ].push(pr(wu(Eu(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], false), ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][0])));
    ΔΔ[Xr.ΔⵠᐃⲆΔ][Xr.ⲆᐃΔ].push(pr(wu(Eu(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], true), ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][Te])));
    ΔΔ[Xr.ΔⵠᐃⲆΔ][Xr.ΔⲆⵠ].push(pr(wu(Eu(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], Ll), ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][Rs])));
    ΔΔ[Xr.ΔⵠᐃⲆΔ][Xr.ΔⲆⵠ].push(pr(wu(Eu(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], true), ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][1])));
    ΔΔ[Xr.ΔⵠᐃⲆΔ][Xr.ⲆᐃΔ].push(pr(wu(Eu(0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], false), ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][Yg])));
    ΔΔ[Xr.ΔⵠᐃⲆΔ][Xr.ⲆᐃΔ].push(pr(wu(Eu(0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], ph), ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][2])));
    ΔΔ[Xr.ΔⵠᐃⲆΔ][Xr.ΔⲆⵠ].push(pr(wu(Eu(0.9, ["#030d14", "#031619", "#041c21", "#0d2522", "#0c2821", "#0d2a28"], _g), ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][xj])));
    ΔΔ[Xr.ΔⵠᐃⲆΔ][Xr.ΔⲆⵠ].push(pr(wu(Eu(0.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], Gq), ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][Ut])));
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][5] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][5]);
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][4] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][4]);
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][ea] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][vt]);
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][2] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][2]);
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][qu] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][1]);
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][0] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ⲆᐃΔ][0]);
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][5] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][Oj]);
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][$i] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][ba]);
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][3] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][yr]);
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][Gl] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][2]);
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][Te] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][1]);
    ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][Lr] = pr(ΔΔ[Xr.ΔΔⵠⲆ][Xr.ΔⲆⵠ][0]);
    ΔΔ[Xr.ⲆΔⲆⲆⵠ] = [];
    ΔΔ[Xr.ⲆΔⲆⲆⵠ][Xr.ⲆᐃΔ] = pr(Pb(Dt, Fu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ΔΔ[Xr.ⲆΔⲆⲆⵠ][Xr.ΔⲆⵠ] = pr(Pb(Og, Fu(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ΔΔ[Xr.ⲆⵠⵠⲆⲆ] = [];
    ΔΔ[Xr.ⲆⵠⵠⲆⲆ][Xr.ⲆᐃΔ] = pr(Pb($i, Fu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ΔΔ[Xr.ⲆⵠⵠⲆⲆ][Xr.ΔⲆⵠ] = pr(Pb(4, Fu(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ΔΔ[Xr.ⵠᐃⲆΔΔ] = [];
    ΔΔ[Xr.ⵠᐃⲆΔΔ][Xr.ⲆᐃΔ] = pr(Pb(4, Fu(0.75, xk, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ΔΔ[Xr.ⵠᐃⲆΔΔ][Xr.ΔⲆⵠ] = pr(Pb(Mq, Fu(0.75, oa, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ΔΔ[Xr.ᐃⲆⵠΔⲆ] = [];
    ΔΔ[Xr.ᐃⲆⵠΔⲆ][Xr.ⲆᐃΔ] = pr(Pb(ks, Fu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ΔΔ[Xr.ᐃⲆⵠΔⲆ][Xr.ΔⲆⵠ] = pr(Pb(4, Fu(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ΔΔ[Xr.ΔⲆⲆⵠⲆ] = [];
    ΔΔ[Xr.ΔⲆⲆⵠⲆ][Xr.ⲆᐃΔ] = pr(Pb(4, Fu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ΔΔ[Xr.ΔⲆⲆⵠⲆ][Xr.ΔⲆⵠ] = pr(Pb(fs, Fu(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ΔΔ[Xr.ⵠΔᐃᐃⵠ] = [];
    ΔΔ[Xr.ⵠΔᐃᐃⵠ][Xr.ⲆᐃΔ] = pr(Pb(3, vu(0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ΔΔ[Xr.ⵠΔᐃᐃⵠ][Xr.ΔⲆⵠ] = pr(Pb(I, vu(0.17, vs, ["#0d1b1c", "#0d2e33", Ⲇ[Qk], "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ΔΔ[Xr.ᐃΔᐃⵠⵠ] = [];
    ΔΔ[Xr.ᐃΔᐃⵠⵠ][Xr.ⲆᐃΔ] = pr(Pb(I, Nu(0.32, xk, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ΔΔ[Xr.ᐃΔᐃⵠⵠ][Xr.ΔⲆⵠ] = pr(Pb(Ut, Nu(0.42, Gj, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ΔΔ[Xr.ΔⵠᐃΔᐃ] = [];
    ΔΔ[Xr.ΔⵠᐃΔᐃ][Xr.ⲆᐃΔ] = pr(Pb(Jb, Ju(0.4, gs, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ΔΔ[Xr.ΔⵠᐃΔᐃ][Xr.ΔⲆⵠ] = pr(Pb(fn, Ju(0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ΔΔ[Xr.ᐃᐃⲆΔⲆ] = [];
    ΔΔ[Xr.ᐃᐃⲆΔⲆ][Xr.ⲆᐃΔ] = pr(Pb(3, Du(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ΔΔ[Xr.ᐃᐃⲆΔⲆ][Xr.ΔⲆⵠ] = pr(Pb(3, Du(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ΔΔ[Xr.ⵠΔΔΔΔ] = [];
    ΔΔ[Xr.ⵠΔΔΔΔ][Xr.ⲆᐃΔ] = pr(Pb(3, Hu(0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ΔΔ[Xr.ⵠΔΔΔΔ][Xr.ΔⲆⵠ] = pr(Pb(3, Hu(0.4, un, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ΔΔ[Xr.ᐃΔⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃΔⲆᐃΔ][Xr.ⲆᐃΔ] = pr(Pb(3, yu(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ΔΔ[Xr.ᐃΔⲆᐃΔ][Xr.ΔⲆⵠ] = pr(Pb(ci, yu(0.4, fg, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ΔΔ[Xr.ΔⲆᐃⵠΔ] = [];
    ΔΔ[Xr.ΔⲆᐃⵠΔ][Xr.ⲆᐃΔ] = pr(Pb(gl, Pu(0.4, vs, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ΔΔ[Xr.ΔⲆᐃⵠΔ][Xr.ΔⲆⵠ] = pr(Pb(3, Pu(0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ] = [];
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ⲆᐃΔ].push(pr(Am(0.9, false, ["#0d4f35"], 0)));
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ⲆᐃΔ].push(pr(Am(0.9, false, ["#0d4f35"], 1)));
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ⲆᐃΔ].push(pr(Am(0.9, C, ["#0d4f35"], 2)));
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ΔⲆⵠ].push(pr(Am(0.9, false, ["#053339"], Db)));
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ΔⲆⵠ].push(pr(Am(0.9, false, ["#053339"], Oq)));
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ΔⲆⵠ].push(pr(Am(0.9, sl, ["#053339"], 2)));
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ⲆᐃΔ].push(pr(mc(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ⲆᐃΔ].push(pr(mc(0.8, ["#292002", "#ba930e", "#6d5704"])));
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ΔⲆⵠ].push(pr(mc(0.9, ["#052919", "#0a4738", "#06321f"])));
    ΔΔ[Xr.ⵠⲆⲆᐃᐃ][Xr.ΔⲆⵠ].push(pr(mc(0.8, ["#052918", "#08491c", "#063417"])));
    ΔΔ[Xr.ⵠΔᐃᐃᐃ] = [];
    ΔΔ[Xr.ⵠΔᐃᐃᐃ][Xr.ⲆᐃΔ] = pr(Pb(Math.PI / xj, ld(0.25, gs, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ΔΔ[Xr.ⵠΔᐃᐃᐃ][Xr.ΔⲆⵠ] = pr(Pb(Math.PI / 2, ld(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ΔΔ[Xr.ᐃⵠΔⵠⵠᐃΔ] = [];
    ΔΔ[Xr.ᐃⵠΔⵠⵠᐃΔ].push(pr(ic(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ΔΔ[Xr.ᐃⵠΔⵠⵠᐃΔ].push(pr(ic(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ΔΔ[Xr.ᐃⵠΔⵠⵠᐃΔ].push(pr(ic(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ΔΔ[Xr.ᐃᐃᐃⲆΔ] = [];
    ΔΔ[Xr.ᐃᐃᐃⲆΔ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃᐃᐃⲆΔ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃᐃᐃⲆΔ][Xr.ⲆᐃΔ].push(pr(Pb(Math.PI / Jt, Rd(0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ΔΔ[Xr.ᐃᐃᐃⲆΔ][Xr.ΔⲆⵠ].push(pr(Pb(Math.PI / 2, Rd(0.25, Ei, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], jh))));
    ΔΔ[Xr.ᐃᐃᐃⲆΔ][Xr.ⲆᐃΔ].push(pr(Pb(Math.PI / Hj, Rd(0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ΔΔ[Xr.ᐃᐃᐃⲆΔ][Xr.ΔⲆⵠ].push(pr(Pb(Math.PI / 2, Rd(0.25, Tk, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], ss))));
    ΔΔ[Xr.ᐃᐃᐃⲆΔ][Xr.ⲆᐃΔ].push(pr(Pb(Math.PI / Mt, Rd(0.25, xo, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ΔΔ[Xr.ᐃᐃᐃⲆΔ][Xr.ΔⲆⵠ].push(pr(Pb(Math.PI / 2, Rd(0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], nq))));
    ΔΔ[Xr.ᐃᐃᐃⲆΔ][Xr.ⲆᐃΔ].push(pr(Pb(Math.PI / 2, Rd(0.25, Rh, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ΔΔ[Xr.ᐃᐃᐃⲆΔ][Xr.ΔⲆⵠ].push(pr(Pb(Math.PI / 2, Rd(0.25, wt, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ΔΔ[Xr.ⵠᐃⲆⲆⲆ] = [];
    ΔΔ[Xr.ⵠᐃⲆⲆⲆ][Xr.ⲆᐃΔ] = [pr(sd(1.2, un, ["#352b10", "#80500b", "#7c4908"]))];
    ΔΔ[Xr.ⵠᐃⲆⲆⲆ][Xr.ΔⲆⵠ] = [pr(sd(1.2, true, ["#030d14", "#0a3429", "#0a2f2b"]))];
    ΔΔ[Xr.ⵠΔΔⲆⵠⵠⵠ] = [];
    ΔΔ[Xr.ⵠΔΔⲆⵠⵠⵠ][Xr.ⲆᐃΔ] = pr(sd(0.8, true, ["#0e3022", "#68622D", "#665329"]));
    ΔΔ[Xr.ⵠΔΔⲆⵠⵠⵠ][Xr.ΔⲆⵠ] = pr(sd(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ΔΔ[Xr.ⵠᐃⵠΔⵠ] = [];
    ΔΔ[Xr.ⵠᐃⵠΔⵠ][Xr.ⲆᐃΔ] = pr(Qd(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ΔΔ[Xr.ⵠᐃⵠΔⵠ][Xr.ΔⲆⵠ] = pr(Qd(0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ΔΔ[Xr.ⲆᐃΔᐃΔ] = [];
    ΔΔ[Xr.ⲆᐃΔᐃΔ][Xr.ⲆᐃΔ] = pr(Mb(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ΔΔ[Xr.ⲆᐃΔᐃΔ][Xr.ΔⲆⵠ] = pr(Mb(0.5, Gq, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ΔΔ[Xr.ᐃⲆᐃᐃΔ] = [];
    ΔΔ[Xr.ᐃⲆᐃᐃΔ][Xr.ⲆᐃΔ] = pr(vc(0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ΔΔ[Xr.ᐃⲆᐃᐃΔ][Xr.ΔⲆⵠ] = pr(vc(0.5, Kl, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ΔΔ[Xr.ΔΔᐃⵠΔᐃⲆ] = [];
    ΔΔ[Xr.ΔΔᐃⵠΔᐃⲆ][Xr.ⲆᐃΔ] = pr(sd(0.8, Gq, ["#1b170c", "#0b8052", "#077b49"]));
    ΔΔ[Xr.ΔΔᐃⵠΔᐃⲆ][Xr.ΔⲆⵠ] = pr(sd(0.8, ye, ["#030d14", "#084442", "#0a4049"]));
    ΔΔ[Xr.ⵠᐃᐃⵠᐃⲆⵠ] = [];
    ΔΔ[Xr.ⵠᐃᐃⵠᐃⲆⵠ][Xr.ⲆᐃΔ] = pr(Qd(0.5, na, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ΔΔ[Xr.ⵠᐃᐃⵠᐃⲆⵠ][Xr.ΔⲆⵠ] = pr(Qd(0.5, na, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ΔΔ[Xr.ⲆᐃΔΔᐃΔⵠ] = [];
    ΔΔ[Xr.ⲆᐃΔΔᐃΔⵠ][Xr.ⲆᐃΔ] = pr(Mb(0.5, qn, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ΔΔ[Xr.ⲆᐃΔΔᐃΔⵠ][Xr.ΔⲆⵠ] = pr(Mb(0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ΔΔ[Xr.ΔⵠⲆΔᐃⲆⵠ] = [];
    ΔΔ[Xr.ΔⵠⲆΔᐃⲆⵠ][Xr.ⲆᐃΔ] = pr(vc(0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ΔΔ[Xr.ΔⵠⲆΔᐃⲆⵠ][Xr.ΔⲆⵠ] = pr(vc(0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ΔΔ[Xr.ΔΔΔΔΔ] = [];
    ΔΔ[Xr.ΔΔΔΔΔ][Xr.ⲆᐃΔ] = pr(Ud(0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ΔΔ[Xr.ΔΔΔΔΔ][Xr.ΔⲆⵠ] = pr(Ud(0.45, ye, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ΔΔ[Xr.ⲆⵠΔᐃⲆΔᐃ] = pr(Ud(0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ΔΔ[Xr.ⵠⵠⵠⲆΔ] = [];
    ΔΔ[Xr.ⵠⵠⵠⲆΔ][Xr.ⲆᐃΔ] = pr(nd(1.4, 0, ["#3d2a6e", "#8255b5"]));
    ΔΔ[Xr.ⵠⵠⵠⲆΔ][Xr.ΔⲆⵠ] = pr(nd(1.4, 0, ["#26124f", "#524082"]));
    ΔΔ[Xr.ΔᐃᐃⲆⲆ] = [];
    ΔΔ[Xr.ΔᐃᐃⲆⲆ][Xr.ⲆᐃΔ] = pr(iu(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ΔΔ[Xr.ΔᐃᐃⲆⲆ][Xr.ΔⲆⵠ] = pr(iu(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ΔΔ[Xr.ⵠᐃΔᐃⵠᐃⵠ] = [];
    ΔΔ[Xr.ⵠᐃΔᐃⵠᐃⵠ][Xr.ⲆᐃΔ] = pr(pu(0.9, 0, ["#4d2d14", "#432516"]));
    ΔΔ[Xr.ⵠᐃΔᐃⵠᐃⵠ][Xr.ΔⲆⵠ] = pr(pu(0.9, 0, ["#282404", "#0a0a01"]));
    ΔΔ[Xr.ⲆⲆᐃⵠΔⲆⵠ] = [];
    ΔΔ[Xr.ⲆⲆᐃⵠΔⲆⵠ][Xr.ⲆᐃΔ] = pr(lu(0.9, 0, ["#4d2d14", "#432516"]));
    ΔΔ[Xr.ⲆⲆᐃⵠΔⲆⵠ][Xr.ΔⲆⵠ] = pr(lu(0.9, 0, ["#282404", "#0a0a01"]));
    ΔΔ[Xr.ⲆᐃΔⵠⲆᐃΔ] = [];
    ΔΔ[Xr.ⲆᐃΔⵠⲆᐃΔ][Xr.ⲆᐃΔ] = pr(hu(0.9, 0, ["#efd435"]));
    ΔΔ[Xr.ⲆᐃΔⵠⲆᐃΔ][Xr.ΔⲆⵠ] = pr(hu(0.9, 0, ["#fffabb"]));
    ΔΔ[Xr.ⲆΔᐃΔⵠⲆⵠ] = [];
    ΔΔ[Xr.ⲆΔᐃΔⵠⲆⵠ][Xr.ⲆᐃΔ] = pr(ku(0.9, 0, ["#efd435"]));
    ΔΔ[Xr.ⲆΔᐃΔⵠⲆⵠ][Xr.ΔⲆⵠ] = pr(ku(0.9, 0, ["#fffabb"]));
    ΔΔ[Xr.ᐃⵠⲆΔⲆⵠⵠ] = [];
    ΔΔ[Xr.ᐃⵠⲆΔⲆⵠⵠ][Xr.ⲆᐃΔ] = pr(hu(0.9, 0, ["#efd435"]));
    ΔΔ[Xr.ᐃⵠⲆΔⲆⵠⵠ][Xr.ΔⲆⵠ] = pr(hu(0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ΔΔ[Xr.ᐃΔᐃⲆΔᐃΔ] = [];
    ΔΔ[Xr.ᐃΔᐃⲆΔᐃΔ][Xr.ⲆᐃΔ] = pr(ku(0.9, 0, ["#efd435"]));
    ΔΔ[Xr.ᐃΔᐃⲆΔᐃΔ][Xr.ΔⲆⵠ] = pr(ku(0.9, 0, ["#ff5704"]));
    ΔΔ[Xr.ΔⵠⲆⵠⲆᐃΔ] = pr(Hb(1, "#ffffff"));
    ΔΔ[Xr.ⵠᐃⲆΔⲆΔⲆ] = pr(Hb(1.5, "#ffffff"));
    ΔΔ[Xr.ᐃΔⵠᐃᐃⲆΔ] = pr(od(1, "Your score:", bl * 1, "#FFF"));
    ΔΔ[Xr.ᐃᐃⲆᐃⵠⲆⵠ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      fb(d, a * 119.5, a * 140.125, a * 19);
      cb(d, undefined, b[hd], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      cb(d, b[Hi], b[1], Al * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      cb(d, cn, b[Gl], a * yt);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      cb(d, wr, b[3], a * Bo);
      fb(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      cb(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      cb(d, b[6], b[cq], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      cb(d, er, b[8], Wl * a);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      wb(d, a * -39, a * -40, a * 78, a * 78, Wb * a);
      d.restore();
      cb(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      wb(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      cb(d, b[ug]);
      return c;
    }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ΔΔ[Xr.ΔⵠᐃΔⲆⵠⲆ] = Ⲇⵠ.ΔⵠᐃΔⲆⵠⲆ;
    ΔΔ[Xr.ⵠΔⲆⲆΔ] = [];
    ΔΔ[Xr.ⵠΔⲆⲆΔ][Xr.ⲆᐃΔ] = pr(Xt(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[Xr.ⵠΔⲆⲆΔ][Xr.ΔⲆⵠ] = pr(Xt(1.5, Gq, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", Ⲇ[St], "#214C4B"]));
    ΔΔ[Xr.ⵠⲆᐃⵠⲆⲆⲆ] = [];
    ΔΔ[Xr.ⵠⲆᐃⵠⲆⲆⲆ][Xr.ⲆᐃΔ] = pr(Zt(2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[Xr.ⵠⲆᐃⵠⲆⲆⲆ][Xr.ΔⲆⵠ] = pr(Zt(bs * 1, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", Ⲇ[Cg], "#214C4B"]));
    ΔΔ[Xr.ⲆⲆⲆᐃᐃΔᐃ] = [];
    ΔΔ[Xr.ⲆⲆⲆᐃᐃΔᐃ][Xr.ⲆᐃΔ] = pr(au(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[Xr.ⲆⲆⲆᐃᐃΔᐃ][Xr.ΔⲆⵠ] = pr(au(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", Ⲇ[nt], "#214C4B"]));
    ΔΔ[Xr.ⲆΔΔᐃⵠ] = [];
    ΔΔ[Xr.ⲆΔΔᐃⵠ][Xr.ⲆᐃΔ] = pr(Yt(2.2, 0, ["#A89F67", "#9E8456"]));
    ΔΔ[Xr.ⲆΔΔᐃⵠ][Xr.ΔⲆⵠ] = pr(Yt(2.2, 0, ["#0B4049", "#08383D"]));
    ΔΔ[Xr.ΔΔⵠⲆⲆΔⲆ] = [];
    ΔΔ[Xr.ΔΔⵠⲆⲆΔⲆ][Xr.ⲆᐃΔ] = pr(Yt(2.2, 0, ["#68622D", "#665329"]));
    ΔΔ[Xr.ΔΔⵠⲆⲆΔⲆ][Xr.ΔⲆⵠ] = pr(Yt(2.2, 0, ["#0F3A24", "#083326"]));
    ΔΔ[Xr.ᐃⲆᐃⲆΔ] = [];
    ΔΔ[Xr.ᐃⲆᐃⲆΔ][Xr.ⲆᐃΔ] = pr(Ou(0.8, 0, ["#A89F67", "#9E8456"]));
    ΔΔ[Xr.ᐃⲆᐃⲆΔ][Xr.ΔⲆⵠ] = pr(Ou(0.8, 0, ["#15514F", "#0F3F3D"]));
    ΔΔ[Xr.ⵠᐃⵠⵠΔΔᐃ] = [];
    ΔΔ[Xr.ⵠᐃⵠⵠΔΔᐃ][Xr.ⲆᐃΔ] = pr(Ou(0.8, 0, ["#c67933", "#b17238"]));
    ΔΔ[Xr.ⵠᐃⵠⵠΔΔᐃ][Xr.ΔⲆⵠ] = pr(Ou(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Xr.ᐃΔᐃᐃᐃΔⵠ] = [];
    ΔΔ[Xr.ᐃΔᐃᐃᐃΔⵠ][Xr.ⲆᐃΔ] = pr(Ou(0.8, 0, ["#3a8214", "#4a9c1e"]));
    ΔΔ[Xr.ᐃΔᐃᐃᐃΔⵠ][Xr.ΔⲆⵠ] = pr(Ou(0.8, 0, ["#032d29", "#044640"]));
    ΔΔ[Xr.ᐃΔⵠΔᐃⵠⲆ] = [];
    ΔΔ[Xr.ᐃΔⵠΔᐃⵠⲆ][Xr.ⲆᐃΔ] = pr(Ou(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ΔΔ[Xr.ᐃΔⵠΔᐃⵠⲆ][Xr.ΔⲆⵠ] = pr(Ou(0.8, 0, ["#1c6161", "#07413f"]));
    ΔΔ[Xr.ⲆᐃⲆᐃᐃᐃᐃ] = [];
    ΔΔ[Xr.ⲆᐃⲆᐃᐃᐃᐃ][Xr.ⲆᐃΔ] = pr(Ou(0.8, 0, ["#328a56", "#449573"]));
    ΔΔ[Xr.ⲆᐃⲆᐃᐃᐃᐃ][Xr.ΔⲆⵠ] = pr(Ou(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Xr.ⲆⲆᐃΔΔⵠΔ] = [];
    ΔΔ[Xr.ⲆⲆᐃΔΔⵠΔ][Xr.ⲆᐃΔ] = pr(Ou(0.8, 0, ["#c98e2f", "#a36b11"]));
    ΔΔ[Xr.ⲆⲆᐃΔΔⵠΔ][Xr.ΔⲆⵠ] = pr(Ou(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Xr.ⲆᐃᐃⲆΔᐃΔ] = [];
    ΔΔ[Xr.ⲆᐃᐃⲆΔᐃΔ][Xr.ⲆᐃΔ] = pr(Ou(0.8, 0, ["#b22419", "#99110e"]));
    ΔΔ[Xr.ⲆᐃᐃⲆΔᐃΔ][Xr.ΔⲆⵠ] = pr(Ou(0.8, 0, ["#04323c", "#03222b"]));
    ΔΔ[Xr.ⵠⵠⵠΔⲆⲆᐃ] = [];
    ΔΔ[Xr.ⵠⵠⵠΔⲆⲆᐃ][Xr.ⲆᐃΔ] = pr(Ou(0.8, 0, ["#13a56d", "#098a58"]));
    ΔΔ[Xr.ⵠⵠⵠΔⲆⲆᐃ][Xr.ΔⲆⵠ] = pr(Ou(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Xr.ᐃⲆⲆᐃⵠᐃΔ] = du(1, [{
      f: Yt,
      x: Pg,
      y: Zj,
      a: 1,
      r: Rq,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Xr.ᐃⵠΔⲆᐃⲆⵠ] = du(js, [{
      f: lu,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / Xg,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Xr.ⲆⲆᐃⵠⵠᐃⲆ] = du(qu, [{
      f: sm,
      x: Rq,
      y: -Fk,
      a: Oq,
      r: Eh,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Xr.ΔᐃⵠⲆᐃΔΔ] = du(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Xr.ΔⵠⵠᐃⲆᐃΔ] = [];
    ΔΔ[Xr.ΔⵠⵠᐃⲆᐃΔ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#7d613e", "#9e7e5a"]));
    ΔΔ[Xr.ΔⵠⵠᐃⲆᐃΔ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#084442", "#125e5a"]));
    ΔΔ[Xr.ⲆΔᐃΔΔ] = [];
    ΔΔ[Xr.ⲆΔᐃΔΔ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#9E8456", "#A89F67"]));
    ΔΔ[Xr.ⲆΔᐃΔΔ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ΔΔ[Xr.ⲆᐃⲆⵠⵠΔⵠ] = [];
    ΔΔ[Xr.ⲆᐃⲆⵠⵠΔⵠ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#665329", "#68622D"]));
    ΔΔ[Xr.ⲆᐃⲆⵠⵠΔⵠ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#083326", "#0F3A24"]));
    ΔΔ[Xr.ⲆⲆⲆⵠⲆΔᐃ] = [];
    ΔΔ[Xr.ⲆⲆⲆⵠⲆΔᐃ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#c67933", "#ec952d"]));
    ΔΔ[Xr.ⲆⲆⲆⵠⲆΔᐃ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[Xr.ᐃⲆⵠᐃᐃⵠᐃ] = [];
    ΔΔ[Xr.ᐃⲆⵠᐃᐃⵠᐃ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#375809", "#4b770e"]));
    ΔΔ[Xr.ᐃⲆⵠᐃᐃⵠᐃ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#09542d", "#0d5d2f"]));
    ΔΔ[Xr.ΔᐃΔᐃᐃⲆⵠ] = [];
    ΔΔ[Xr.ΔᐃΔᐃᐃⲆⵠ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#585809", "#72770e"]));
    ΔΔ[Xr.ΔᐃΔᐃᐃⲆⵠ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#295209", "#305d0d"]));
    ΔΔ[Xr.ⲆᐃⵠΔⵠⲆⵠ] = [];
    ΔΔ[Xr.ⲆᐃⵠΔⵠⲆⵠ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#b9b094", "#e2d2c0"]));
    ΔΔ[Xr.ⲆᐃⵠΔⵠⲆⵠ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#126366", "#0d484b"]));
    ΔΔ[Xr.ⵠᐃΔⲆⵠⲆⲆ] = [];
    ΔΔ[Xr.ⵠᐃΔⲆⵠⲆⲆ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#3f8662", "#30915d"]));
    ΔΔ[Xr.ⵠᐃΔⲆⵠⲆⲆ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[Xr.ΔⵠⲆΔᐃᐃⲆ] = [];
    ΔΔ[Xr.ΔⵠⲆΔᐃᐃⲆ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#c79153", "#dfa868"]));
    ΔΔ[Xr.ΔⵠⲆΔᐃᐃⲆ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#073927", "#075040"]));
    ΔΔ[Xr.ᐃⵠⲆⵠΔΔΔ] = [];
    ΔΔ[Xr.ᐃⵠⲆⵠΔΔΔ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#768b5b", "#819984"]));
    ΔΔ[Xr.ᐃⵠⲆⵠΔΔΔ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#0c4540", "#0e5153"]));
    ΔΔ[Xr.ⲆⲆΔᐃᐃᐃᐃ] = [];
    ΔΔ[Xr.ⲆⲆΔᐃᐃᐃᐃ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#567465", "#627c6e"]));
    ΔΔ[Xr.ⲆⲆΔᐃᐃᐃᐃ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#073927", "#075040"]));
    ΔΔ[Xr.ⵠⲆᐃⲆᐃⵠᐃ] = [];
    ΔΔ[Xr.ⵠⲆᐃⲆᐃⵠᐃ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#996b3a", "#bf956b"]));
    ΔΔ[Xr.ⵠⲆᐃⲆᐃⵠᐃ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[Xr.ΔⵠΔⵠⲆΔᐃ] = [];
    ΔΔ[Xr.ΔⵠΔⵠⲆΔᐃ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#7a634a", "#a68f77"]));
    ΔΔ[Xr.ΔⵠΔⵠⲆΔᐃ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#1e4d43", "#113c32"]));
    ΔΔ[Xr.ᐃᐃⲆᐃΔΔᐃ] = [];
    ΔΔ[Xr.ᐃᐃⲆᐃΔΔᐃ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#99403c", "#bc796c"]));
    ΔΔ[Xr.ᐃᐃⲆᐃΔΔᐃ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#1e434d", "#11303c"]));
    ΔΔ[Xr.ᐃⵠⵠΔᐃⵠⲆ] = [];
    ΔΔ[Xr.ᐃⵠⵠΔᐃⵠⲆ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#88504e", "#b3857c"]));
    ΔΔ[Xr.ᐃⵠⵠΔᐃⵠⲆ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#253b41", "#162930"]));
    ΔΔ[Xr.ᐃᐃⲆⲆⲆΔΔ] = [];
    ΔΔ[Xr.ᐃᐃⲆⲆⲆΔΔ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#0f8870", "#23af93"]));
    ΔΔ[Xr.ᐃᐃⲆⲆⲆΔΔ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#032829", "#083233"]));
    ΔΔ[Xr.ⲆΔⵠⵠⲆΔΔ] = [];
    ΔΔ[Xr.ⲆΔⵠⵠⲆΔΔ][Xr.ⲆᐃΔ] = pr(Lb(0.9, 0, ["#618a20", "#84a74e"]));
    ΔΔ[Xr.ⲆΔⵠⵠⲆΔΔ][Xr.ΔⲆⵠ] = pr(Lb(0.9, 0, ["#1f4632", "#335d47"]));
    ΔΔ[Xr.ⵠⲆΔⵠᐃ] = [];
    ΔΔ[Xr.ⵠⲆΔⵠᐃ][Xr.ⲆᐃΔ] = pr($b(1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ΔΔ[Xr.ⵠⲆΔⵠᐃ][Xr.ΔⲆⵠ] = pr($b(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ΔΔ[Xr.ⲆⲆⲆⲆⵠ] = [];
    ΔΔ[Xr.ⲆⲆⲆⲆⵠ][Xr.ⲆᐃΔ] = pr(bm(Oq * 1, qn, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ΔΔ[Xr.ⲆⲆⲆⲆⵠ][Xr.ΔⲆⵠ] = pr(bm(1, Gq, ["#030d14", "#0d2e33", "#184747", Ⲇ[Pq], "#0d2e33", "#174444"]));
    ΔΔ[Xr.ⵠᐃⲆᐃⵠ] = [];
    ΔΔ[Xr.ⵠᐃⲆᐃⵠ][Xr.ⲆᐃΔ] = pr(Vc(1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[Xr.ⵠᐃⲆᐃⵠ][Xr.ΔⲆⵠ] = pr(Vc(1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[Xr.ᐃΔⵠⵠΔ] = [];
    ΔΔ[Xr.ᐃΔⵠⵠΔ][Xr.ⲆᐃΔ] = pr(Zc(1, Fg, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ΔΔ[Xr.ᐃΔⵠⵠΔ][Xr.ΔⲆⵠ] = pr(Zc(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[Xr.ΔᐃⵠⲆⲆ] = [];
    ΔΔ[Xr.ΔᐃⵠⲆⲆ][Xr.ⲆᐃΔ] = pr(Zc(1, Sh, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ΔΔ[Xr.ΔᐃⵠⲆⲆ][Xr.ΔⲆⵠ] = pr(Zc(cu * 1, ye, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ΔΔ[Xr.ᐃᐃᐃᐃᐃ] = [];
    ΔΔ[Xr.ᐃᐃᐃᐃᐃ][Xr.ⲆᐃΔ] = pr(oc(rg * 1, y, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ΔΔ[Xr.ᐃᐃᐃᐃᐃ][Xr.ΔⲆⵠ] = pr(oc(1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ΔΔ[Xr.ⵠⵠΔⵠⲆ] = [];
    ΔΔ[Xr.ⵠⵠΔⵠⲆ][Xr.ⲆᐃΔ] = pr(Nc(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ΔΔ[Xr.ⵠⵠΔⵠⲆ][Xr.ΔⲆⵠ] = pr(Nc(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[Xr.Ⲇᐃⵠᐃⵠ] = [];
    ΔΔ[Xr.Ⲇᐃⵠᐃⵠ][Xr.ⲆᐃΔ] = pr(fc(0.8, un, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ΔΔ[Xr.Ⲇᐃⵠᐃⵠ][Xr.ΔⲆⵠ] = pr(fc(0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ΔΔ[Xr.ⲆⵠᐃΔΔ] = [];
    ΔΔ[Xr.ⲆⵠᐃΔΔ][Xr.ⲆᐃΔ] = pr(zc(0.8, Gq, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[Xr.ⲆⵠᐃΔΔ][Xr.ΔⲆⵠ] = pr(zc(0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[Xr.ⲆᐃⲆΔΔ] = [];
    ΔΔ[Xr.ⲆᐃⲆΔΔ][Xr.ⲆᐃΔ] = pr(Gd(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ΔΔ[Xr.ⲆᐃⲆΔΔ][Xr.ΔⲆⵠ] = pr(Gd(0.8, Fg, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ΔΔ[Xr.ᐃⲆⵠᐃᐃ] = [];
    ΔΔ[Xr.ᐃⲆⵠᐃᐃ][Xr.ⲆᐃΔ] = pr(Gd(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", Ⲇ[Hj], "#af59cd", "#d588f1"]));
    ΔΔ[Xr.ᐃⲆⵠᐃᐃ][Xr.ΔⲆⵠ] = pr(Gd(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[Xr.ⵠⲆΔᐃⵠⲆⲆ] = [];
    ΔΔ[Xr.ⵠⲆΔᐃⵠⲆⲆ][Xr.ⲆᐃΔ] = pr(Vd(1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ΔΔ[Xr.ⵠⲆΔᐃⵠⲆⲆ][Xr.ΔⲆⵠ] = pr(Vd(1.5, true, ["#030d14", "#0d2e33", "#184747", Ⲇ[wl], "#0d2e33", "#174444"]));
    ΔΔ[Xr.ⵠᐃⵠΔⵠΔⲆ] = [];
    ΔΔ[Xr.ⵠᐃⵠΔⵠΔⲆ][Xr.ⲆᐃΔ] = pr(Vd(lb * 1, Ei, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Xr.ⵠᐃⵠΔⵠΔⲆ][Xr.ΔⲆⵠ] = pr(Vd(1, Rh, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ΔΔ[Xr.ΔⵠΔⲆᐃⵠᐃ] = [];
    ΔΔ[Xr.ΔⵠΔⲆᐃⵠᐃ][Xr.ⲆᐃΔ] = pr(Bd(1.5, Kl, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ΔΔ[Xr.ΔⵠΔⲆᐃⵠᐃ][Xr.ΔⲆⵠ] = pr(Bd(1.5, Gq, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ΔΔ[Xr.ⵠΔⲆᐃᐃⲆᐃ] = [];
    ΔΔ[Xr.ⵠΔⲆᐃᐃⲆᐃ][Xr.ⲆᐃΔ] = pr(Bd(js * 1, Rh, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Xr.ⵠΔⲆᐃᐃⲆᐃ][Xr.ΔⲆⵠ] = pr(Bd(1, uh, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[Xr.ⵠᐃⲆᐃⲆⲆᐃ] = [];
    ΔΔ[Xr.ⵠᐃⲆᐃⲆⲆᐃ][Xr.ⲆᐃΔ] = pr(Bd(1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", Ⲇ[Zh], "#af59cd", "#d588f1"]));
    ΔΔ[Xr.ⵠᐃⲆᐃⲆⲆᐃ][Xr.ΔⲆⵠ] = pr(Bd(1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[Xr.ΔⲆⲆᐃΔⵠⲆ] = [];
    ΔΔ[Xr.ΔⲆⲆᐃΔⵠⲆ][Xr.ⲆᐃΔ] = pr(Bd(rg * 1, Ll, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Xr.ΔⲆⲆᐃΔⵠⲆ][Xr.ΔⲆⵠ] = pr(Bd(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[Xr.ΔⲆⲆⲆⵠⲆⲆ] = [];
    ΔΔ[Xr.ΔⲆⲆⲆⵠⲆⲆ][Xr.ⲆᐃΔ] = pr(wm(1.5, gs, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ΔΔ[Xr.ΔⲆⲆⲆⵠⲆⲆ][Xr.ΔⲆⵠ] = pr(wm(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ΔΔ[Xr.ΔⲆⲆᐃᐃΔΔ] = [];
    ΔΔ[Xr.ΔⲆⲆᐃᐃΔΔ][Xr.ⲆᐃΔ] = pr(wm(za * 1, Bh, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Xr.ΔⲆⲆᐃᐃΔΔ][Xr.ΔⲆⵠ] = pr(wm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[Xr.ᐃⲆⲆΔⵠⵠⵠ] = [];
    ΔΔ[Xr.ᐃⲆⲆΔⵠⵠⵠ][Xr.ⲆᐃΔ] = pr(Sc(1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[Xr.ᐃⲆⲆΔⵠⵠⵠ][Xr.ΔⲆⵠ] = pr(Sc(1.5, xh, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[Xr.ᐃᐃᐃΔᐃΔⵠ] = [];
    ΔΔ[Xr.ᐃᐃᐃΔᐃΔⵠ][Xr.ⲆᐃΔ] = pr(Sc(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Xr.ᐃᐃᐃΔᐃΔⵠ][Xr.ΔⲆⵠ] = pr(Sc(za * 1, _g, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[Xr.ᐃⲆⲆⲆⲆ] = [];
    ΔΔ[Xr.ᐃⲆⲆⲆⲆ][Xr.ⲆᐃΔ] = pr(Pd(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ΔΔ[Xr.ᐃⲆⲆⲆⲆ][Xr.ΔⲆⵠ] = pr(Pd(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ΔΔ[Xr.ⵠΔΔⲆᐃ] = [];
    ΔΔ[Xr.ⵠΔΔⲆᐃ][Xr.ⲆᐃΔ] = pr(_c(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ΔΔ[Xr.ⵠΔΔⲆᐃ][Xr.ΔⲆⵠ] = pr(_c(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ΔΔ[Xr.ⵠⵠⲆⵠΔ] = [];
    ΔΔ[Xr.ⵠⵠⲆⵠΔ][Xr.ⲆᐃΔ] = pr(Zb(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ΔΔ[Xr.ⵠⵠⲆⵠΔ][Xr.ΔⲆⵠ] = pr(Zb(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ΔΔ[Xr.ⵠΔᐃΔⵠ] = [];
    ΔΔ[Xr.ⵠΔᐃΔⵠ][Xr.ⲆᐃΔ] = pr(Pb(Math.PI, Qt(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ΔΔ[Xr.ⵠΔᐃΔⵠ][Xr.ΔⲆⵠ] = pr(Pb(Math.PI, Qt(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ΔΔ[Xr.ⲆΔⵠΔᐃΔⲆ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      cb(d, rk, b[Eh], ks);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      cb(d, Jg, b[0], ol);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      cb(d, er, b[Pg], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      cb(d, undefined, b[0], Ps);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      cb(d, wr, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      cb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      cb(d, undefined, b[ps], Vn);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      cb(d, mb, b[Rq], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      cb(d, undefined, b[0], ba);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      cb(d, Hq, b[0], 4);
      return c;
    }(0.6, ["#FFFFFF"]));
    ΔΔ[Xr.ΔⵠΔⵠⲆ] = [];
    ΔΔ[Xr.ΔⵠΔⵠⲆ][Xr.ⲆᐃΔ] = pr(Vb(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ΔΔ[Xr.ΔⵠΔⵠⲆ][Xr.ΔⲆⵠ] = pr(Vb(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ΔΔ[Xr.ᐃⲆᐃⲆᐃ] = [];
    ΔΔ[Xr.ᐃⲆᐃⲆᐃ][Xr.ⲆᐃΔ] = pr(Cm(0.6, true, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ΔΔ[Xr.ᐃⲆᐃⲆᐃ][Xr.ΔⲆⵠ] = pr(Cm(0.6, oa, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ΔΔ[Xr.ᐃⵠⵠⵠΔ] = [];
    ΔΔ[Xr.ᐃⵠⵠⵠΔ][Xr.ⲆᐃΔ] = pr(Tc(0.6, true, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ΔΔ[Xr.ᐃⵠⵠⵠΔ][Xr.ΔⲆⵠ] = pr(Tc(0.6, true, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ΔΔ[Xr.ᐃⲆⲆΔΔ] = [];
    ΔΔ[Xr.ᐃⲆⲆΔΔ][Xr.ⲆᐃΔ] = pr(im(0.63, xk, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ΔΔ[Xr.ᐃⲆⲆΔΔ][Xr.ΔⲆⵠ] = pr(im(0.63, ph, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ΔΔ[Xr.ᐃᐃⵠⲆⲆ] = [];
    ΔΔ[Xr.ᐃᐃⵠⲆⲆ][Xr.ⲆᐃΔ] = pr(ou(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ΔΔ[Xr.ᐃᐃⵠⲆⲆ][Xr.ΔⲆⵠ] = pr(ou(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ΔΔ[Xr.ΔⲆΔⲆⲆ] = [];
    ΔΔ[Xr.ΔⲆΔⲆⲆ][Xr.ⲆᐃΔ] = pr(ju(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ΔΔ[Xr.ΔⲆΔⲆⲆ][Xr.ΔⲆⵠ] = pr(ju(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ΔΔ[Xr.ⲆᐃⲆΔᐃⵠⲆ] = [];
    ΔΔ[Xr.ⲆᐃⲆΔᐃⵠⲆ][Xr.ⲆᐃΔ] = pr(Uc(0.42, Gj, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ΔΔ[Xr.ⲆᐃⲆΔᐃⵠⲆ][Xr.ΔⲆⵠ] = pr(Uc(0.42, ph, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ΔΔ[Xr.ΔⲆᐃⵠⵠⵠⵠ] = [];
    ΔΔ[Xr.ΔⲆᐃⵠⵠⵠⵠ][Xr.ⲆᐃΔ] = pr(fd(0.9, ["#e4c027"]));
    ΔΔ[Xr.ΔⲆᐃⵠⵠⵠⵠ][Xr.ΔⲆⵠ] = pr(fd(0.9, ["#D8E57F"]));
    ΔΔ[Xr.ⲆᐃΔᐃⲆⵠⵠ] = [];
    ΔΔ[Xr.ⲆᐃΔᐃⲆⵠⵠ][Xr.ⲆᐃΔ] = pr(Yd(0.42, y, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ΔΔ[Xr.ⲆᐃΔᐃⲆⵠⵠ][Xr.ΔⲆⵠ] = pr(Yd(0.42, xk, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ΔΔ[Xr.ᐃⵠⲆⵠⲆⲆⵠ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      wb(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      cb(d, b[0], b[1], eh * a);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      wb(d, a * -57.5, a * 50.5, a * sa, a * 105, a * 10);
      d.restore();
      cb(d, b[Ro], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      cb(d, b[lr], b[H], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * Kb, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      cb(d, b[hl], b[3], a * wa);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      cb(d, b[2], b[Gl], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      cb(d, b[gl], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      wb(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      cb(d, b[Dt]);
      d.save();
      d.translate(a * 72, a * 175.5);
      wb(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      cb(d, b[ol]);
      d.save();
      d.translate(a * 72, a * 279.5);
      wb(d, a * -41.5, a * -40.5, a * 73, a * 73, Dr * a);
      d.restore();
      cb(d, b[Al]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      cb(d, b[Zh], b[bs], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Mn * a, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      cb(d, b[fn], b[3], a * 10);
      return c;
    }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ΔΔ[Xr.ⲆⲆⵠΔᐃᐃⲆ] = [];
    ΔΔ[Xr.ⲆⲆⵠΔᐃᐃⲆ][Xr.ⲆᐃΔ] = pr(qc(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ΔΔ[Xr.ⲆⲆⵠΔᐃᐃⲆ][Xr.ΔⲆⵠ] = pr(qc(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ΔΔ[Xr.ⲆⲆᐃⵠᐃⲆⵠ] = [];
    ΔΔ[Xr.ⲆⲆᐃⵠᐃⲆⵠ][Xr.ⲆᐃΔ] = pr(gd(0.5, Kl, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ΔΔ[Xr.ⲆⲆᐃⵠᐃⲆⵠ][Xr.ΔⲆⵠ] = pr(gd(0.5, Fg, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ΔΔ[Xr.ⵠⲆᐃΔᐃΔⲆ] = pr(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      wb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      cb(e, c[Zj], c[1], 4);
      return d;
    }(0.8, 0, ["#5f6061", "#939393"]));
    ΔΔ[Xr.ᐃⲆⲆⵠΔⲆᐃ] = du(1, [{
      f: lu,
      x: 0,
      y: tg,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ΔΔ[Xr.ΔⲆⵠΔΔ] = [];
    ΔΔ[Xr.ΔⲆⵠΔΔ][Xr.ⲆᐃΔ] = pr(Ac(1, true, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ΔΔ[Xr.ΔⲆⵠΔΔ][Xr.ΔⲆⵠ] = pr(Ac(1, Kl, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ΔΔ[Xr.ⲆᐃⲆⵠᐃⵠⵠ] = [];
    ΔΔ[Xr.ⲆᐃⲆⵠᐃⵠⵠ][Xr.ⲆᐃΔ] = pr(sc(1, true, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ΔΔ[Xr.ⲆᐃⲆⵠᐃⵠⵠ][Xr.ΔⲆⵠ] = pr(sc(1, na, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ΔΔ[Xr.Ⲇᐃᐃᐃᐃ] = [];
    ΔΔ[Xr.Ⲇᐃᐃᐃᐃ][Xr.ⲆᐃΔ] = pr(Pb(3, cm(0.7, Kl, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ΔΔ[Xr.Ⲇᐃᐃᐃᐃ][Xr.ΔⲆⵠ] = pr(Pb(Tr, cm(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ΔΔ[Xr.ᐃᐃΔⲆⲆ] = [];
    ΔΔ[Xr.ᐃᐃΔⲆⲆ][Xr.ⲆᐃΔ] = pr(Pb(qo, uc(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ΔΔ[Xr.ᐃᐃΔⲆⲆ][Xr.ΔⲆⵠ] = pr(Pb(3, uc(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ΔΔ[Xr.ⵠΔᐃⵠᐃ] = [];
    ΔΔ[Xr.ⵠΔᐃⵠᐃ][Xr.ⲆᐃΔ] = pr(Pb(3, bc(0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ΔΔ[Xr.ⵠΔᐃⵠᐃ][Xr.ΔⲆⵠ] = pr(Pb(3, bc(0.65, gs, ["#0d1b1c", "#0d2e33", Ⲇ[se], "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ΔΔ[Xr.ⵠᐃᐃⵠΔ] = [];
    ΔΔ[Xr.ⵠᐃᐃⵠΔ][Xr.ⲆᐃΔ] = pr(Pb(nq, Wc(0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ΔΔ[Xr.ⵠᐃᐃⵠΔ][Xr.ΔⲆⵠ] = pr(Pb(3, Wc(0.67, xh, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ΔΔ[Xr.ᐃᐃᐃᐃⲆ] = [];
    ΔΔ[Xr.ᐃᐃᐃᐃⲆ][Xr.ⲆᐃΔ] = pr(Pb(Hk, dd(0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ΔΔ[Xr.ᐃᐃᐃᐃⲆ][Xr.ΔⲆⵠ] = pr(Pb(3, dd(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ΔΔ[Xr.ᐃΔⵠⲆᐃ] = [];
    ΔΔ[Xr.ᐃΔⵠⲆᐃ][Xr.ⲆᐃΔ] = pr(Pb(fn, jd(0.67, fg, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ΔΔ[Xr.ᐃΔⵠⲆᐃ][Xr.ΔⲆⵠ] = pr(Pb(3, jd(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ΔΔ[Xr.ⲆⲆΔᐃᐃ] = [];
    ΔΔ[Xr.ⲆⲆΔᐃᐃ][Xr.ⲆᐃΔ] = pr(Pb(3, jc(hd * 1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ΔΔ[Xr.ⲆⲆΔᐃᐃ][Xr.ΔⲆⵠ] = pr(Pb(3, jc(lb * 1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", Ⲇ[Vs], "#49b2cf", Ⲇ[ro]])));
    ΔΔ[Xr.ⲆᐃΔⲆΔ] = [];
    ΔΔ[Xr.ⲆᐃΔⲆΔ][Xr.ⲆᐃΔ] = pr(Pb(3, rc(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ΔΔ[Xr.ⲆᐃΔⲆΔ][Xr.ΔⲆⵠ] = pr(Pb(gl, rc(Xn * 1, ml, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ΔΔ[Xr.ᐃⵠᐃΔⵠ] = [];
    ΔΔ[Xr.ᐃⵠᐃΔⵠ][Xr.ⲆᐃΔ] = pr(Pb(3, lm(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
    ΔΔ[Xr.ᐃⵠᐃΔⵠ][Xr.ΔⲆⵠ] = pr(Pb(Tr, lm(0.5, true, ["#030d14", "#485e66", "#1f343f"])));
    ΔΔ[Xr.ⵠⵠᐃᐃⲆ] = [];
    ΔΔ[Xr.ⵠⵠᐃᐃⲆ][Xr.ⲆᐃΔ] = pr(Pb(3, lc(Ot * 1, ml, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ΔΔ[Xr.ⵠⵠᐃᐃⲆ][Xr.ΔⲆⵠ] = pr(Pb(3, lc(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ΔΔ[Xr.ⲆⲆⵠⲆⲆ] = [];
    ΔΔ[Xr.ⲆⲆⵠⲆⲆ][Xr.ⲆᐃΔ] = pr(Pb(Wg, rc(1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ΔΔ[Xr.ⲆⲆⵠⲆⲆ][Xr.ΔⲆⵠ] = pr(Pb(nq, rc(1, vs, ["#0d1b1c", "#0d2e33", Ⲇ[$o], "#43aa82", "#29997c"])));
    ΔΔ[Xr.ⵠΔΔΔⵠ] = [];
    ΔΔ[Xr.ⵠΔΔΔⵠ][Xr.ⲆᐃΔ] = pr(Pb(3, rc(Ug * 1, ml, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ΔΔ[Xr.ⵠΔΔΔⵠ][Xr.ΔⲆⵠ] = pr(Pb(hl, rc(rg * 1, na, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ΔΔ[Xr.ᐃⵠⵠⵠᐃ] = [];
    ΔΔ[Xr.ᐃⵠⵠⵠᐃ][Xr.ⲆᐃΔ] = pr(Pb(3, rc(rg * 1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ΔΔ[Xr.ᐃⵠⵠⵠᐃ][Xr.ΔⲆⵠ] = pr(Pb(ci, rc(lb * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ΔΔ[Xr.ⵠⵠⲆⵠᐃ] = [];
    ΔΔ[Xr.ⵠⵠⲆⵠᐃ][Xr.ⲆᐃΔ] = pr(Xc(0.55, sl, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ΔΔ[Xr.ⵠⵠⲆⵠᐃ][Xr.ΔⲆⵠ] = pr(Xc(0.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ΔΔ[Xr.ⲆΔᐃⵠⲆᐃΔ] = [];
    ΔΔ[Xr.ⲆΔᐃⵠⲆᐃΔ].push(pr(Xc(0.8, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ΔΔ[Xr.ⲆΔᐃⵠⲆᐃΔ].push(pr(Xc(0.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ΔΔ[Xr.ⲆΔᐃⵠⲆᐃΔ].push(pr(Xc(0.8, wt, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ΔΔ[Xr.ⵠⲆⲆⲆⵠᐃⲆ] = [];
    ΔΔ[Xr.ⵠⲆⲆⲆⵠᐃⲆ].push(ΔΔ[Xr.ⲆΔᐃⵠⲆᐃΔ][mj]);
    ΔΔ[Xr.ⵠⲆⲆⲆⵠᐃⲆ].push(ΔΔ[Xr.ⲆΔᐃⵠⲆᐃΔ][Db]);
    ΔΔ[Xr.ⵠⲆⲆⲆⵠᐃⲆ].push(ΔΔ[Xr.ⲆΔᐃⵠⲆᐃΔ][Rs]);
    ΔΔ[Xr.ᐃⵠᐃⲆⵠ] = [];
    ΔΔ[Xr.ᐃⵠᐃⲆⵠ][Xr.ⲆᐃΔ] = pr(ym(0.06, false, ["#141414", "#c4a23a", "#816511"]));
    ΔΔ[Xr.ᐃⵠᐃⲆⵠ][Xr.ΔⲆⵠ] = pr(ym(0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
    ΔΔ[Xr.ⲆⲆⵠⲆΔΔⲆ] = [];
    ΔΔ[Xr.ⲆⲆⵠⲆΔΔⲆ].push(pr(ym(0.08, false, ["#141414", "#c4a23a", "#816511"])));
    ΔΔ[Xr.ⲆⲆⵠⲆΔΔⲆ].push(pr(ym(0.08, Tk, ["#141414", "#e2bd4e", "#a38018"])));
    ΔΔ[Xr.ⲆⲆⵠⲆΔΔⲆ].push(pr(ym(0.08, wt, ["#141414", "#b0902e", "#634d09"])));
    ΔΔ[Xr.ⵠⵠⲆⵠⲆ] = du(1.5, [{
      f: pd,
      x: Lr,
      y: 0,
      a: ie,
      r: Pg,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ΔΔ[Xr.ᐃᐃΔⲆᐃᐃᐃ] = [];
    ΔΔ[Xr.ᐃᐃΔⲆᐃᐃᐃ][Xr.ⲆᐃΔ] = pr(Jd(0.8, 0, ["#347f93", "#54a4ba"]));
    ΔΔ[Xr.ᐃᐃΔⲆᐃᐃᐃ][Xr.ΔⲆⵠ] = pr(Jd(0.8, 0, ["#98ede3", "#94f2e7"]));
    ΔΔ[Xr.ΔᐃⵠⵠᐃⲆⲆ] = [];
    ΔΔ[Xr.ΔᐃⵠⵠᐃⲆⲆ][Xr.ⲆᐃΔ] = pr(gm(0.8, Gq, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ΔΔ[Xr.ΔᐃⵠⵠᐃⲆⲆ][Xr.ΔⲆⵠ] = pr(gm(0.8, true, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ΔΔ[Xr.ᐃⵠΔⵠⲆⲆᐃ] = [];
    ΔΔ[Xr.ᐃⵠΔⵠⲆⲆᐃ][Xr.ⲆᐃΔ] = pr(gc(0.8, true, ["#a9e4ed", "#86d4e0"]));
    ΔΔ[Xr.ᐃⵠΔⵠⲆⲆᐃ][Xr.ΔⲆⵠ] = pr(gc(0.8, fg, ["#83ddd4", "#485e66"]));
    ΔΔ[Xr.ⲆⲆⵠⵠᐃ] = [];
    ΔΔ[Xr.ⲆⲆⵠⵠᐃ][Xr.ⲆᐃΔ] = pr(vm(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ΔΔ[Xr.ⲆⲆⵠⵠᐃ][Xr.ΔⲆⵠ] = pr(vm(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ΔΔ[Xr.ΔⲆΔΔΔⲆΔ] = [];
    ΔΔ[Xr.ΔⲆΔΔΔⲆΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆΔⲆᐃᐃᐃ;
    ΔΔ[Xr.ΔⲆΔΔΔⲆΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠⵠⵠᐃΔⵠ;
    ΔΔ[Xr.ⵠΔⲆⵠⲆⲆⲆ] = [];
    ΔΔ[Xr.ⵠΔⲆⵠⲆⲆⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆᐃᐃⲆᐃᐃ;
    ΔΔ[Xr.ⵠΔⲆⵠⲆⲆⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠⵠⵠΔⵠⲆ;
    ΔΔ[Xr.ⲆΔⲆⵠⲆᐃⲆ] = [];
    ΔΔ[Xr.ⲆΔⲆⵠⲆᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠᐃᐃΔΔⲆ;
    ΔΔ[Xr.ⲆΔⲆⵠⲆᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆΔⵠᐃᐃ;
    ΔΔ[Xr.ΔⲆΔΔⲆ] = [];
    ΔΔ[Xr.ΔⲆΔΔⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔᐃΔⲆᐃⲆ;
    ΔΔ[Xr.ΔⲆΔΔⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠΔⵠⲆⵠᐃ;
    ΔΔ[Xr.ΔΔⵠⵠⲆⵠΔ] = [];
    ΔΔ[Xr.ΔΔⵠⵠⲆⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔΔⵠΔⲆᐃ;
    ΔΔ[Xr.ΔΔⵠⵠⲆⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔΔⲆΔΔᐃ;
    ΔΔ[Xr.ⲆᐃΔⲆⵠ] = [];
    ΔΔ[Xr.ⲆᐃΔⲆⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃΔᐃᐃⲆⲆ;
    ΔΔ[Xr.ⲆᐃΔⲆⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆΔΔᐃᐃΔ;
    ΔΔ[Xr.ΔⲆΔⵠᐃᐃⵠ] = [];
    ΔΔ[Xr.ΔⲆΔⵠᐃᐃⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠᐃⲆΔⵠ;
    ΔΔ[Xr.ΔⲆΔⵠᐃᐃⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠᐃⲆᐃⵠΔ;
    ΔΔ[Xr.ⲆΔᐃⵠⲆ] = [];
    ΔΔ[Xr.ⲆΔᐃⵠⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔΔΔⲆΔᐃ;
    ΔΔ[Xr.ⲆΔᐃⵠⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⲆΔΔⵠⲆⵠ;
    ΔΔ[Xr.ᐃᐃΔΔᐃᐃᐃ] = [];
    ΔΔ[Xr.ᐃᐃΔΔᐃᐃᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃⲆΔⵠΔⲆ;
    ΔΔ[Xr.ᐃᐃΔΔᐃᐃᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃᐃᐃⲆⲆΔ;
    ΔΔ[Xr.ΔⵠᐃⲆⵠ] = [];
    ΔΔ[Xr.ΔⵠᐃⲆⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃᐃⵠⵠⲆᐃ;
    ΔΔ[Xr.ΔⵠᐃⲆⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠΔⵠⲆΔᐃ;
    ΔΔ[Xr.ⲆⵠⵠⲆᐃᐃΔ] = [];
    ΔΔ[Xr.ⲆⵠⵠⲆᐃᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠΔⲆΔᐃᐃ;
    ΔΔ[Xr.ⲆⵠⵠⲆᐃᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃᐃΔⲆᐃᐃ;
    ΔΔ[Xr.ΔⲆⵠⵠⵠ] = [];
    ΔΔ[Xr.ΔⲆⵠⵠⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠⵠΔⲆⵠⲆ;
    ΔΔ[Xr.ΔⲆⵠⵠⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⲆⵠⲆᐃΔ;
    ΔΔ[Xr.ⵠⵠΔΔⵠⲆⲆ] = [];
    ΔΔ[Xr.ⵠⵠΔΔⵠⲆⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃⵠⲆⲆᐃᐃ;
    ΔΔ[Xr.ⵠⵠΔΔⵠⲆⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃᐃΔⵠⲆᐃ;
    ΔΔ[Xr.ⲆⲆⵠⵠΔ] = [];
    ΔΔ[Xr.ⲆⲆⵠⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⵠⲆⵠᐃ;
    ΔΔ[Xr.ⲆⲆⵠⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠΔⵠⵠΔΔ;
    ΔΔ[Xr.ᐃⲆⵠᐃΔ] = [];
    ΔΔ[Xr.ᐃⲆⵠᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃᐃᐃⵠᐃⵠ;
    ΔΔ[Xr.ᐃⲆⵠᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃΔᐃⲆⲆᐃ;
    ΔΔ[Xr.ᐃΔᐃΔΔⵠᐃ] = Ⲇⵠ.ᐃΔᐃΔΔⵠᐃ;
    ΔΔ[Xr.ⲆⵠᐃᐃΔ] = [];
    ΔΔ[Xr.ⲆⵠᐃᐃΔ][Xr.ⲆᐃΔ] = pr(cc(0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ΔΔ[Xr.ⲆⵠᐃᐃΔ][Xr.ΔⲆⵠ] = pr(cc(0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ΔΔ[Xr.ⲆΔⵠΔᐃⲆΔ] = pr(ud(0.3, ["#092813", "#1f773d"], 0));
    ΔΔ[Xr.ΔⲆΔΔⵠᐃⵠ] = pr(ud(0.3, ["#092813", "#1f773d"], 1));
    ΔΔ[Xr.ᐃⲆⲆⲆⵠᐃᐃ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      cb(d, b[0]);
      d.translate(ps, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      cb(d, b[1]);
      return c;
    }(0.6, ["#092813", "#1f773d"]));
    ΔΔ[Xr.ⲆᐃΔᐃⵠⲆⲆ] = [];
    ΔΔ[Xr.ⲆᐃΔᐃⵠⲆⲆ].push(pr(Kc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], zl)));
    ΔΔ[Xr.ⲆᐃΔᐃⵠⲆⲆ].push(pr(Kc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], Pg)));
    ΔΔ[Xr.ⲆᐃΔᐃⵠⲆⲆ].push(pr(Kc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], tt)));
    ΔΔ[Xr.ⵠᐃΔΔᐃᐃⵠ] = [];
    var b = pr(Kc(0.7, [Ⲇ[zj], "#77371f", "#280e09", "#2e2410", "#77371f"], In));
    ΔΔ[Xr.ⵠᐃΔΔᐃᐃⵠ].push(b);
    ΔΔ[Xr.ⵠᐃΔΔᐃᐃⵠ].push(b);
    ΔΔ[Xr.ⵠᐃΔΔᐃᐃⵠ].push(b);
    ΔΔ[Xr.ΔᐃΔᐃⵠᐃΔ] = [];
    ΔΔ[Xr.ΔᐃΔᐃⵠᐃΔ].push(pr(Kc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ΔΔ[Xr.ΔᐃΔᐃⵠᐃΔ].push(pr(Kc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], js)));
    ΔΔ[Xr.ΔᐃΔᐃⵠᐃΔ].push(pr(Kc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ΔΔ[Xr.ⵠⵠⵠⲆᐃΔⲆ] = pr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var i = f / Pn;
      var a = g / dg;
      d.width = f;
      d.height = g;
      e.translate(i, a);
      e.save();
      for (var j = mj; j < Ra; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, Pg);
        Tb(e, 3, hr * b, Vn * b);
        cb(e, c[Zj]);
        e.restore();
      }
      e.restore();
      fb(e, 0, Lr, b * 40);
      cb(e, undefined, c[0], b * 6);
      fb(e, tg, zl, b * 20);
      cb(e, c[mj]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ΔΔ[Xr.ᐃᐃⲆⵠⵠΔᐃ] = pr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var h = f / 2;
      var a = g / 2;
      d.width = f;
      d.height = g;
      fb(e, h, a, b * 40);
      cb(e, undefined, c[0], b * ql);
      fb(e, h, a, b * 30);
      cb(e, mg, c[Db], wk * b);
      fb(e, h, a, b * 20);
      cb(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ΔΔ[Xr.ⲆⲆⵠᐃΔⵠᐃ] = pr(ud(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], Rq));
    ΔΔ[Xr.ᐃⵠⲆⵠΔⵠⲆ] = pr(Pb(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      wb(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      cb(d, b[0], b[Hi], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      cb(d, b[0], b[0], a * nt);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      cb(d, b[Pg], b[wj], a * 15);
      return c;
    }(0.2, ["#FFFFFF"])));
    ΔΔ[Xr.ⵠⲆⲆⵠⵠ] = [];
    ΔΔ[Xr.ⵠⲆⲆⵠⵠ][Xr.ⲆᐃΔ] = pr(rm(0.85, Sh, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ΔΔ[Xr.ⵠⲆⲆⵠⵠ][Xr.ΔⲆⵠ] = pr(rm(0.85, true, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ΔΔ[Xr.ΔᐃᐃᐃⲆⵠᐃ] = [];
    ΔΔ[Xr.ΔᐃᐃᐃⲆⵠᐃ].push(pr(Kc(0.7, ["#280e09", "#77371f", Ⲇ[Hr], "#2e2410", "#77371f"], 1)));
    ΔΔ[Xr.ΔᐃᐃᐃⲆⵠᐃ].push(pr(Kc(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], yg)));
    ΔΔ[Xr.ΔᐃᐃᐃⲆⵠᐃ].push(pr(Kc(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], Ug)));
    ΔΔ[Xr.ⲆΔⵠⵠᐃ] = [];
    ΔΔ[Xr.ⲆΔⵠⵠᐃ][Xr.ⲆᐃΔ] = pr(Cc(0.37, xk, ["#2a2938", "#242330", "#313041"]));
    ΔΔ[Xr.ⲆΔⵠⵠᐃ][Xr.ΔⲆⵠ] = pr(Cc(0.37, true, ["#1b1e30", "#161921", "#252f3e"]));
    ΔΔ[Xr.ΔΔᐃⲆΔ] = [];
    ΔΔ[Xr.ΔΔᐃⲆΔ][Xr.ⲆᐃΔ] = pr($d(0.17, qn, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ΔΔ[Xr.ΔΔᐃⲆΔ][Xr.ΔⲆⵠ] = pr($d(0.17, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ΔΔ[Xr.ΔᐃⵠⲆΔ] = [];
    ΔΔ[Xr.ΔᐃⵠⲆΔ][Xr.ⲆᐃΔ] = pr(Oc(0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ΔΔ[Xr.ΔᐃⵠⲆΔ][Xr.ΔⲆⵠ] = pr(Oc(0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ΔΔ[Xr.ΔᐃⲆⵠⵠ] = [];
    ΔΔ[Xr.ΔᐃⲆⵠⵠ][Xr.ⲆᐃΔ] = pr(Oc(0.55, na, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ΔΔ[Xr.ΔᐃⲆⵠⵠ][Xr.ΔⲆⵠ] = pr(Oc(0.55, Gq, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], tg));
    ΔΔ[Xr.ᐃⲆΔⵠⵠ] = [];
    ΔΔ[Xr.ᐃⲆΔⵠⵠ][Xr.ⲆᐃΔ] = pr(bd(0.2, Kj, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ΔΔ[Xr.ᐃⲆΔⵠⵠ][Xr.ΔⲆⵠ] = pr(bd(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ΔΔ[Xr.ⵠᐃⵠⵠΔ] = [];
    ΔΔ[Xr.ⵠᐃⵠⵠΔ][Xr.ⲆᐃΔ] = pr(bd(0.2, oa, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ΔΔ[Xr.ⵠᐃⵠⵠΔ][Xr.ΔⲆⵠ] = pr(bd(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ΔΔ[Xr.ⲆⲆᐃᐃΔ] = [];
    ΔΔ[Xr.ⲆⲆᐃᐃΔ][Xr.ⲆᐃΔ] = pr(bd(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ΔΔ[Xr.ⲆⲆᐃᐃΔ][Xr.ΔⲆⵠ] = pr(bd(0.2, un, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ΔΔ[Xr.ⲆⲆΔΔⵠ] = [];
    ΔΔ[Xr.ⲆⲆΔΔⵠ][Xr.ⲆᐃΔ] = pr(Md(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ΔΔ[Xr.ⲆⲆΔΔⵠ][Xr.ΔⲆⵠ] = pr(Md(0.24, vs, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ΔΔ[Xr.ᐃⵠΔᐃΔ] = [];
    ΔΔ[Xr.ᐃⵠΔᐃΔ][Xr.ⲆᐃΔ] = pr(Pc(0.32, gs, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ΔΔ[Xr.ᐃⵠΔᐃΔ][Xr.ΔⲆⵠ] = pr(Pc(0.32, Fg, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ΔΔ[Xr.ⵠᐃᐃΔⵠ] = [];
    ΔΔ[Xr.ⵠᐃᐃΔⵠ][Xr.ⲆᐃΔ] = pr(Pb(3, Yc(0.9, Dh, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ΔΔ[Xr.ⵠᐃᐃΔⵠ][Xr.ΔⲆⵠ] = pr(Pb(3, Yc(0.9, true, ["#0d1b1c", "#18332e", "#112320", Ⲇ[Ih], "#49b2cf"])));
    ΔΔ[Xr.ᐃⲆⲆΔΔΔΔ] = [];
    ΔΔ[Xr.ᐃⲆⲆΔΔΔΔ][Xr.ⲆᐃΔ] = pr(Pb(3, Yc(yg * 1, vs, [Hs, cn, undefined, "#c8efef", "#c8efef"])));
    ΔΔ[Xr.ᐃⲆⲆΔΔΔΔ][Xr.ΔⲆⵠ] = pr(Pb(3, Yc(1, Kj, [j, ut, Hq, Ⲇ[Ik], "#87d2e6"])));
    ΔΔ[Xr.ⵠᐃⲆᐃⵠᐃΔ] = [];
    ΔΔ[Xr.ⵠᐃⲆᐃⵠᐃΔ].push(pr(Ic(0.3, ph, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], Db)));
    ΔΔ[Xr.ⵠᐃⲆᐃⵠᐃΔ].push(pr(Ic(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], qu)));
    ΔΔ[Xr.ⵠᐃⲆᐃⵠᐃΔ].push(pr(Ic(0.3, xk, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], Ot)));
    ΔΔ[Xr.ⵠⲆΔΔΔΔⲆ] = [];
    ΔΔ[Xr.ⵠⲆΔΔΔΔⲆ].push(pr(Gc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], Db)));
    ΔΔ[Xr.ⵠⲆΔΔΔΔⲆ].push(pr(Gc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ΔΔ[Xr.ⵠⲆΔΔΔΔⲆ].push(pr(Gc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ΔΔ[Xr.ᐃΔⲆᐃΔΔⲆ] = [];
    ΔΔ[Xr.ᐃΔⲆᐃΔΔⲆ].push(pr(Iu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Bg, jh)));
    ΔΔ[Xr.ᐃΔⲆᐃΔΔⲆ].push(pr(Iu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Ol, 1)));
    ΔΔ[Xr.ᐃΔⲆᐃΔΔⲆ].push(pr(Iu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ΔΔ[Xr.ⵠᐃᐃᐃΔΔᐃ] = [];
    ΔΔ[Xr.ⵠᐃᐃᐃΔΔᐃ].push(pr(Iu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], zl, 0)));
    ΔΔ[Xr.ⵠᐃᐃᐃΔΔᐃ].push(pr(Iu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, ya)));
    ΔΔ[Xr.ⵠᐃᐃᐃΔΔᐃ].push(pr(Iu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, Zj)));
    ΔΔ[Xr.ᐃΔΔΔΔ] = [];
    ΔΔ[Xr.ᐃΔΔΔΔ][Xr.ⲆᐃΔ] = pr(Pb(3, om(0.7, Sh, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ΔΔ[Xr.ᐃΔΔΔΔ][Xr.ΔⲆⵠ] = pr(Pb(3, om(0.7, true, ["#0d1b1c", "#0d2e33", Ⲇ[Qj], "#485e66", "#1f343f", "#274352"])));
    ΔΔ[Xr.ⲆΔΔⵠⵠ] = [];
    ΔΔ[Xr.ⲆΔΔⵠⵠ][Xr.ⲆᐃΔ] = pr(Pb(3, om(0.7, Sh, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ΔΔ[Xr.ⲆΔΔⵠⵠ][Xr.ΔⲆⵠ] = pr(Pb(gl, om(0.7, vs, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ΔΔ[Xr.ⵠᐃⵠᐃΔ] = [];
    ΔΔ[Xr.ⵠᐃⵠᐃΔ][Xr.ⲆᐃΔ] = pr(Pb(3, om(0.7, Sh, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ΔΔ[Xr.ⵠᐃⵠᐃΔ][Xr.ΔⲆⵠ] = pr(Pb(3, om(0.7, ph, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ΔΔ[Xr.ⵠᐃⲆⲆⵠ] = [];
    ΔΔ[Xr.ⵠᐃⲆⲆⵠ][Xr.ⲆᐃΔ] = pr(Pb(3, om(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ΔΔ[Xr.ⵠᐃⲆⲆⵠ][Xr.ΔⲆⵠ] = pr(Pb(Ob, om(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ΔΔ[Xr.ⵠᐃⵠΔⵠⲆⲆ] = [];
    ΔΔ[Xr.ⵠᐃⵠΔⵠⲆⲆ].push(pr(Fc(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ΔΔ[Xr.ⵠᐃⵠΔⵠⲆⲆ].push(pr(Fc(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ΔΔ[Xr.ⵠᐃⵠΔⵠⲆⲆ].push(pr(Fc(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ΔΔ[Xr.ΔⵠΔᐃⲆΔⵠ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      cb(d, b[tg], b[Pg], a * Fr);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      cb(d, b[0], b[ya], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      cb(d, b[Kh], b[Lr], a * 2);
      return c;
    }(1.1, ["#BB0000"]));
    ΔΔ[Xr.ⲆⵠⵠⲆᐃΔΔ] = pr(Pb(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      fb(d, a * 213.5, a * 256.75, a * 75);
      cb(d, b);
      fb(d, a * 213.5, a * 175.75, a * 25);
      cb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * m;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = is * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * us;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = Mh * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = J * a;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(0.9, "#BB0000")));
    ΔΔ[Xr.ⲆᐃᐃΔᐃ] = [];
    ΔΔ[Xr.ⲆᐃᐃΔᐃ][Xr.ⲆᐃΔ] = pr(dc(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ΔΔ[Xr.ⲆᐃᐃΔᐃ][Xr.ΔⲆⵠ] = pr(dc(0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ΔΔ[Xr.ᐃᐃⲆⵠⵠ] = [];
    ΔΔ[Xr.ᐃᐃⲆⵠⵠ][Xr.ⲆᐃΔ] = pr(Dc(0.55, xh, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ΔΔ[Xr.ᐃᐃⲆⵠⵠ][Xr.ΔⲆⵠ] = pr(Dc(0.55, Dh, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ΔΔ[Xr.Δᐃᐃⵠᐃ] = [];
    ΔΔ[Xr.Δᐃᐃⵠᐃ][Xr.ⲆᐃΔ] = pr(qd(0.6, ml, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ΔΔ[Xr.Δᐃᐃⵠᐃ][Xr.ΔⲆⵠ] = pr(qd(0.6, qn, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ΔΔ[Xr.ΔᐃΔⲆⲆ] = [];
    ΔΔ[Xr.ΔᐃΔⲆⲆ][Xr.ⲆᐃΔ] = pr(Sd(0.58, Gj, ["#dbce71", "#b29c32", "#c4bc51"]));
    ΔΔ[Xr.ΔᐃΔⲆⲆ][Xr.ΔⲆⵠ] = pr(Sd(0.58, Kj, ["#2b7c57", "#15543c", "#1a7961"]));
    ΔΔ[Xr.ᐃⲆⲆⵠᐃ] = [];
    ΔΔ[Xr.ᐃⲆⲆⵠᐃ][Xr.ⲆᐃΔ] = pr(mm(0.69, true, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ΔΔ[Xr.ᐃⲆⲆⵠᐃ][Xr.ΔⲆⵠ] = pr(mm(0.69, un, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ΔΔ[Xr.ᐃⵠᐃᐃᐃ] = [];
    ΔΔ[Xr.ᐃⵠᐃᐃᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃⵠᐃᐃᐃ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃⵠᐃᐃᐃ][Xr.ⲆᐃΔ].push(pr(fm(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ΔΔ[Xr.ᐃⵠᐃᐃᐃ][Xr.ⲆᐃΔ].push(pr(yd(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ΔΔ[Xr.ᐃⵠᐃᐃᐃ][Xr.ⲆᐃΔ].push(pr(Xd(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ΔΔ[Xr.ᐃⵠᐃᐃᐃ][Xr.ΔⲆⵠ].push(pr(fm(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ΔΔ[Xr.ᐃⵠᐃᐃᐃ][Xr.ΔⲆⵠ].push(pr(yd(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ΔΔ[Xr.ᐃⵠᐃᐃᐃ][Xr.ΔⲆⵠ].push(pr(Xd(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ΔΔ[Xr.ᐃⵠΔⵠⵠ] = [];
    ΔΔ[Xr.ᐃⵠΔⵠⵠ][Xr.ⲆᐃΔ] = pr(Hd(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ΔΔ[Xr.ᐃⵠΔⵠⵠ][Xr.ΔⲆⵠ] = pr(Hd(Te * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ΔΔ[Xr.ᐃⵠⵠⲆΔⵠΔ] = [];
    ΔΔ[Xr.ᐃⵠⵠⲆΔⵠΔ][Xr.ⲆᐃΔ] = pr(zm(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ΔΔ[Xr.ᐃⵠⵠⲆΔⵠΔ][Xr.ΔⲆⵠ] = pr(zm(js * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ΔΔ[Xr.ᐃᐃΔⵠΔᐃⵠ] = [];
    ΔΔ[Xr.ᐃᐃΔⵠΔᐃⵠ][Xr.ⲆᐃΔ] = pr(xd(hd * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ΔΔ[Xr.ᐃᐃΔⵠΔᐃⵠ][Xr.ΔⲆⵠ] = pr(xd(lb * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ΔΔ[Xr.ⲆᐃΔⲆᐃⵠΔ] = [];
    ΔΔ[Xr.ⲆᐃΔⲆᐃⵠΔ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⲆᐃΔⲆᐃⵠΔ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⲆᐃΔⲆᐃⵠΔ][Xr.ⲆᐃΔ] = [Ⲇⵠ.ⲆΔⲆᐃⲆⲆⲆ, Ⲇⵠ.ᐃⵠⲆⵠᐃᐃΔ, Ⲇⵠ.ᐃΔᐃⵠΔⲆᐃ, Ⲇⵠ.ⵠⵠⵠⵠᐃⵠΔ, Ⲇⵠ.ΔⲆᐃᐃΔⲆⲆ, Ⲇⵠ.ΔⲆⵠᐃⵠⵠⵠ, Ⲇⵠ.ΔⲆᐃⲆΔⲆⲆ, Ⲇⵠ.ⲆΔᐃⵠⵠΔᐃ, Ⲇⵠ.ΔΔⵠⵠⲆⵠⵠ, Ⲇⵠ.ⲆΔⵠⵠⵠᐃᐃ, Ⲇⵠ.ᐃᐃⲆⲆΔᐃⵠ, Ⲇⵠ.ΔΔΔᐃᐃᐃΔ, Ⲇⵠ.ᐃΔΔⵠⵠᐃᐃ, Ⲇⵠ.ᐃᐃᐃΔᐃⵠⵠ, Ⲇⵠ.ⲆⲆⲆⵠᐃⵠΔ, Ⲇⵠ.ᐃᐃⵠΔⵠᐃⵠ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠΔ, Ⲇⵠ.ΔᐃᐃΔⵠΔⵠ, Ⲇⵠ.ⵠⲆⲆⲆᐃⲆΔ, Ⲇⵠ.ΔⵠⵠΔΔᐃΔ, Ⲇⵠ.ⲆⵠᐃⲆⵠΔᐃ, Ⲇⵠ.ᐃⵠΔᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃⲆᐃᐃⵠᐃ, Ⲇⵠ.ΔⲆⵠΔΔⲆⵠ, Ⲇⵠ.ᐃΔΔᐃᐃⲆⵠ, Ⲇⵠ.ᐃΔⵠΔⵠᐃΔ, Ⲇⵠ.ΔΔⲆΔⵠΔⵠ, Ⲇⵠ.ΔᐃⵠⲆⵠⲆΔ, Ⲇⵠ.ᐃΔⲆᐃᐃⲆᐃ, Ⲇⵠ.ⵠⵠᐃⵠᐃΔᐃ, Ⲇⵠ.ⲆⵠⵠΔⵠⵠΔ, Ⲇⵠ.ᐃᐃⲆⵠⲆⵠΔ, Ⲇⵠ.ᐃⲆᐃΔⵠΔᐃ, Ⲇⵠ.ΔΔⲆⵠⵠⵠΔ, Ⲇⵠ.ΔⲆⵠᐃⲆᐃᐃ, Ⲇⵠ.ⲆΔⲆΔⵠⵠⲆ, Ⲇⵠ.ᐃᐃⲆⲆᐃⲆΔ, Ⲇⵠ.ΔⲆΔΔⲆΔⲆ, Ⲇⵠ.ⲆⵠⵠⲆⵠⵠΔ, Ⲇⵠ.ⲆⵠⲆᐃΔⵠⵠ, Ⲇⵠ.ᐃΔᐃⲆⲆᐃᐃ, Ⲇⵠ.ⵠΔⵠⵠΔᐃⲆ, Ⲇⵠ.ΔⵠΔΔⵠᐃⵠ, Ⲇⵠ.ΔᐃⵠⵠΔⲆᐃ, Ⲇⵠ.ᐃΔᐃⵠⵠᐃΔ, Ⲇⵠ.ᐃⵠΔᐃΔⵠⲆ, Ⲇⵠ.ⵠⵠⲆⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆᐃᐃᐃⵠᐃ, Ⲇⵠ.ᐃΔⲆⲆΔᐃⵠ, Ⲇⵠ.ⵠΔⵠⵠⲆⵠⲆ, Ⲇⵠ.ⲆⲆᐃⲆΔΔᐃ, Ⲇⵠ.ΔⲆⲆⲆⵠΔⵠ, Ⲇⵠ.ⵠⲆⵠᐃⵠᐃⲆ, Ⲇⵠ.ⲆⲆⲆⲆⲆᐃⲆ, Ⲇⵠ.ᐃⲆⵠᐃⲆⵠᐃ, Ⲇⵠ.ΔⲆᐃᐃΔⵠⵠ];
    ΔΔ[Xr.ⲆᐃΔⲆᐃⵠΔ][Xr.ΔⲆⵠ] = [Ⲇⵠ.ᐃⵠⵠⵠΔⲆᐃ, Ⲇⵠ.ⵠⲆΔⵠⲆⲆⵠ, Ⲇⵠ.ΔⵠⲆⲆΔΔⵠ, Ⲇⵠ.ᐃⵠⵠΔᐃᐃᐃ, Ⲇⵠ.ⵠΔᐃⵠᐃⵠΔ, Ⲇⵠ.ΔΔᐃΔΔⵠΔ, Ⲇⵠ.ΔᐃΔⲆᐃΔⵠ, Ⲇⵠ.ⲆᐃⵠᐃᐃⵠⲆ, Ⲇⵠ.ᐃΔⲆⲆⵠⲆⵠ, Ⲇⵠ.ⲆⲆᐃΔⲆⲆⲆ, Ⲇⵠ.ⵠΔᐃΔΔᐃᐃ, Ⲇⵠ.ⲆⲆΔᐃⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃⵠⵠⲆᐃ, Ⲇⵠ.ᐃΔᐃⵠⲆΔⲆ, Ⲇⵠ.ΔᐃᐃᐃⲆⵠⵠ, Ⲇⵠ.ΔΔⲆⵠⵠΔᐃ, Ⲇⵠ.ΔΔᐃⲆᐃᐃⲆ, Ⲇⵠ.ᐃⲆⵠⵠⲆΔⲆ, Ⲇⵠ.ΔⵠᐃΔⵠⲆⵠ, Ⲇⵠ.ΔⲆⲆⵠⵠⲆⲆ, Ⲇⵠ.ΔⵠΔⲆΔⵠⵠ, Ⲇⵠ.ⵠᐃᐃⵠⵠⲆⲆ, Ⲇⵠ.ⲆΔΔⵠΔⲆⲆ, Ⲇⵠ.ⲆⵠⲆᐃⵠⲆΔ, Ⲇⵠ.ΔᐃⵠΔⵠⵠⵠ, Ⲇⵠ.ΔⲆᐃⵠⵠΔᐃ, Ⲇⵠ.ⵠᐃⵠᐃᐃⵠⵠ, Ⲇⵠ.ΔᐃᐃᐃᐃⲆᐃ, Ⲇⵠ.ΔⵠΔⲆΔⲆΔ, Ⲇⵠ.ΔⲆⲆΔᐃⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆⲆⲆᐃ, Ⲇⵠ.ΔⲆⵠⵠⵠⵠΔ, Ⲇⵠ.ⵠⵠⵠΔΔⵠΔ, Ⲇⵠ.ΔΔⵠⵠΔⲆⲆ, Ⲇⵠ.ⵠᐃⲆΔΔⲆᐃ, Ⲇⵠ.ⲆⵠⲆΔⲆⵠⵠ, Ⲇⵠ.ⵠᐃΔᐃⲆᐃⵠ, Ⲇⵠ.ⵠⵠⲆΔᐃΔᐃ, Ⲇⵠ.ⲆΔⲆΔᐃΔΔ, Ⲇⵠ.ⲆⲆⵠⲆΔΔⵠ, Ⲇⵠ.ⲆⲆⲆᐃΔᐃⵠ, Ⲇⵠ.ᐃⲆⵠⵠⵠⲆᐃ, Ⲇⵠ.ᐃⲆΔᐃⵠᐃΔ, Ⲇⵠ.ⵠᐃᐃⲆᐃᐃΔ, Ⲇⵠ.ⵠⲆΔΔⵠⵠⵠ, Ⲇⵠ.ᐃΔᐃΔᐃⵠΔ, Ⲇⵠ.ΔⵠΔΔⲆᐃⲆ, Ⲇⵠ.ᐃⲆΔⵠᐃΔΔ, Ⲇⵠ.ⵠⵠⵠᐃΔᐃⲆ, Ⲇⵠ.ᐃᐃⲆⵠΔᐃᐃ, Ⲇⵠ.ᐃⲆⲆᐃΔᐃⵠ, Ⲇⵠ.ⵠⲆΔⲆᐃΔⲆ, Ⲇⵠ.ⲆⲆΔⵠΔΔΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃΔⵠ, Ⲇⵠ.ΔⵠⵠΔⵠΔⲆ, Ⲇⵠ.ΔⲆⲆⵠᐃΔᐃ];
    ΔΔ[Xr.ⵠⲆᐃᐃⵠ] = [];
    ΔΔ[Xr.ⵠⲆᐃᐃⵠ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠⲆᐃᐃⵠ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⵠⲆᐃᐃⵠ][Xr.ⲆᐃΔ].push(pr(td(1.1, ts, ["#252B28", "#747471", "#83827e"], Pg)));
    ΔΔ[Xr.ⵠⲆᐃᐃⵠ][Xr.ⲆᐃΔ].push(pr(td(0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
    ΔΔ[Xr.ⵠⲆᐃᐃⵠ][Xr.ⲆᐃΔ].push(pr(td(za * 1, Ta, ["#252B28", "#747471", "#83827e"], pq)));
    ΔΔ[Xr.ⵠⲆᐃᐃⵠ][Xr.ⲆᐃΔ].push(pr(td(0.9, kg, ["#252B28", "#747471", "#83827e"], Zh)));
    ΔΔ[Xr.ⵠⲆᐃᐃⵠ][Xr.ΔⲆⵠ].push(pr(td(1.1, false, ["#030d14", "#123335", "#183f3f"], Rq)));
    ΔΔ[Xr.ⵠⲆᐃᐃⵠ][Xr.ΔⲆⵠ].push(pr(td(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
    ΔΔ[Xr.ⵠⲆᐃᐃⵠ][Xr.ΔⲆⵠ].push(pr(td(1, kg, ["#030d14", "#123335", "#183f3f"], Nb)));
    ΔΔ[Xr.ⵠⲆᐃᐃⵠ][Xr.ΔⲆⵠ].push(pr(td(0.9, false, ["#030d14", "#123335", "#183f3f"], ss)));
    ΔΔ[Xr.ⵠᐃⵠⵠⵠ] = [];
    ΔΔ[Xr.ⵠᐃⵠⵠⵠ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠᐃⵠⵠⵠ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⵠᐃⵠⵠⵠ][Xr.ⲆᐃΔ].push(pr(td(1.1, vs, ["#252B28", "#58645F", "#75827D"], 2)));
    ΔΔ[Xr.ⵠᐃⵠⵠⵠ][Xr.ⲆᐃΔ].push(pr(td(0.9, fg, ["#252B28", "#58645F", "#75827D"], dg)));
    ΔΔ[Xr.ⵠᐃⵠⵠⵠ][Xr.ⲆᐃΔ].push(pr(td(Ot * 1, Gq, ["#252B28", "#58645F", "#75827D"], 2)));
    ΔΔ[Xr.ⵠᐃⵠⵠⵠ][Xr.ⲆᐃΔ].push(pr(td(0.9, xh, ["#252B28", "#58645F", "#75827D"], Hj)));
    ΔΔ[Xr.ⵠᐃⵠⵠⵠ][Xr.ΔⲆⵠ].push(pr(td(1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ΔΔ[Xr.ⵠᐃⵠⵠⵠ][Xr.ΔⲆⵠ].push(pr(td(0.9, true, ["#030d14", "#123335", "#183f3f"], Pn)));
    ΔΔ[Xr.ⵠᐃⵠⵠⵠ][Xr.ΔⲆⵠ].push(pr(td(cu * 1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ΔΔ[Xr.ⵠᐃⵠⵠⵠ][Xr.ΔⲆⵠ].push(pr(td(0.9, xk, ["#030d14", "#123335", "#183f3f"], 2)));
    ΔΔ[Xr.ⵠΔⵠᐃᐃ] = [];
    ΔΔ[Xr.ⵠΔⵠᐃᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠΔⵠᐃᐃ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⵠΔⵠᐃᐃ][Xr.ⲆᐃΔ].push(pr(ad(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Xr.ⵠΔⵠᐃᐃ][Xr.ⲆᐃΔ].push(pr(ad(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Xr.ⵠΔⵠᐃᐃ][Xr.ⲆᐃΔ].push(pr(ad(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Xr.ⵠΔⵠᐃᐃ][Xr.ΔⲆⵠ].push(pr(ad(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[Xr.ⵠΔⵠᐃᐃ][Xr.ΔⲆⵠ].push(pr(ad(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[Xr.ⵠΔⵠᐃᐃ][Xr.ΔⲆⵠ].push(pr(ad(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[Xr.ⲆⵠⲆΔᐃ] = [];
    ΔΔ[Xr.ⲆⵠⲆΔᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⲆⵠⲆΔᐃ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⲆⵠⲆΔᐃ][Xr.ⲆᐃΔ].push(pr(rd(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[Xr.ⲆⵠⲆΔᐃ][Xr.ⲆᐃΔ].push(pr(rd(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[Xr.ⲆⵠⲆΔᐃ][Xr.ⲆᐃΔ].push(pr(rd(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[Xr.ⲆⵠⲆΔᐃ][Xr.ΔⲆⵠ].push(pr(rd(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[Xr.ⲆⵠⲆΔᐃ][Xr.ΔⲆⵠ].push(pr(rd(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[Xr.ⲆⵠⲆΔᐃ][Xr.ΔⲆⵠ].push(pr(rd(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[Xr.Ⲇⵠⵠⵠ] = [];
    ΔΔ[Xr.Ⲇⵠⵠⵠ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.Ⲇⵠⵠⵠ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.Ⲇⵠⵠⵠ][Xr.ⲆᐃΔ].push(pr(Mc(1.7, y, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[Xr.Ⲇⵠⵠⵠ][Xr.ⲆᐃΔ].push(pr(Mc(1.5, un, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[Xr.Ⲇⵠⵠⵠ][Xr.ⲆᐃΔ].push(pr(Mc(1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[Xr.Ⲇⵠⵠⵠ][Xr.ΔⲆⵠ].push(pr(Mc(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[Xr.Ⲇⵠⵠⵠ][Xr.ΔⲆⵠ].push(pr(Mc(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[Xr.Ⲇⵠⵠⵠ][Xr.ΔⲆⵠ].push(pr(Mc(1.3, Fg, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[Xr.ᐃΔⲆΔΔⲆⲆ] = [];
    ΔΔ[Xr.ᐃΔⲆΔΔⲆⲆ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃΔⲆΔΔⲆⲆ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃΔⲆΔΔⲆⲆ][Xr.ⲆᐃΔ].push(pr(ec(1, ["#2d53c4"])));
    ΔΔ[Xr.ᐃΔⲆΔΔⲆⲆ][Xr.ΔⲆⵠ].push(pr(ec(1, ["#2d53c4"])));
    ΔΔ[Xr.ⵠᐃΔᐃΔΔΔ] = [];
    ΔΔ[Xr.ⵠᐃΔᐃΔΔΔ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠᐃΔᐃΔΔΔ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⵠᐃΔᐃΔΔΔ][Xr.ⲆᐃΔ].push(pr(ec(1, ["#c4912d"])));
    ΔΔ[Xr.ⵠᐃΔᐃΔΔΔ][Xr.ΔⲆⵠ].push(pr(ec(1, ["#c4912d"])));
    ΔΔ[Xr.ᐃΔⵠᐃⵠⵠⵠ] = [];
    ΔΔ[Xr.ᐃΔⵠᐃⵠⵠⵠ][Xr.ⲆᐃΔ] = pr(Tm(1, ["#414040"]));
    ΔΔ[Xr.ᐃΔⵠᐃⵠⵠⵠ][Xr.ΔⲆⵠ] = pr(Tm(1, ["#153635"]));
    ΔΔ[Xr.ⲆⲆⵠⲆΔᐃᐃ] = [];
    ΔΔ[Xr.ⲆⲆⵠⲆΔᐃᐃ][Xr.ⲆᐃΔ] = pr(Vd(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Xr.ⲆⲆⵠⲆΔᐃᐃ][Xr.ΔⲆⵠ] = pr(Vd(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Xr.ΔⲆⵠⵠⲆⵠᐃ] = [];
    ΔΔ[Xr.ΔⲆⵠⵠⲆⵠᐃ][Xr.ⲆᐃΔ] = pr(Bd(Te * 1, Jn, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Xr.ΔⲆⵠⵠⲆⵠᐃ][Xr.ΔⲆⵠ] = pr(Bd(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Xr.ᐃΔᐃΔᐃΔΔ] = [];
    ΔΔ[Xr.ᐃΔᐃΔᐃΔΔ][Xr.ⲆᐃΔ] = pr(Bd(1, _g, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Xr.ᐃΔᐃΔᐃΔΔ][Xr.ΔⲆⵠ] = pr(Bd(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Xr.ΔⲆⵠΔΔⵠᐃ] = [];
    ΔΔ[Xr.ΔⲆⵠΔΔⵠᐃ][Xr.ⲆᐃΔ] = pr(Sc(1, Tk, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Xr.ΔⲆⵠΔΔⵠᐃ][Xr.ΔⲆⵠ] = pr(Sc(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Xr.ΔⵠⲆΔⲆΔⲆ] = [];
    ΔΔ[Xr.ΔⵠⲆΔⲆΔⲆ][Xr.ⲆᐃΔ] = pr(wm(qu * 1, xo, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Xr.ΔⵠⲆΔⲆΔⲆ][Xr.ΔⲆⵠ] = pr(wm(cu * 1, kg, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Xr.ⲆⵠⲆᐃⵠ] = [];
    ΔΔ[Xr.ⲆⵠⲆᐃⵠ][Xr.ⲆᐃΔ] = pr(Ed(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ΔΔ[Xr.ⲆⵠⲆᐃⵠ][Xr.ΔⲆⵠ] = pr(Ed(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ΔΔ[Xr.ⵠⲆⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠⲆⲆᐃΔ][Xr.ⲆᐃΔ] = pr(em(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ΔΔ[Xr.ⵠⲆⲆᐃΔ][Xr.ΔⲆⵠ] = pr(em(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ΔΔ[Xr.ⲆⲆⵠⵠⵠⲆΔ] = [];
    ΔΔ[Xr.ΔⵠⲆⵠΔ] = [];
    ΔΔ[Xr.ⲆⵠᐃΔⲆΔⲆ] = [];
    ΔΔ[Xr.ΔΔⵠᐃⵠ] = [];
    for (a = ps; xq > a; a++) {
      ΔΔ[Xr.ⲆⲆⵠⵠⵠⲆΔ][a] = document.createElement("canvas");
      ΔΔ[Xr.ⲆⲆⵠⵠⵠⲆΔ][a].width = 193;
      ΔΔ[Xr.ⲆⲆⵠⵠⵠⲆΔ][a].height = 193;
      ΔΔ[Xr.ΔⵠⲆⵠΔ][a] = ΔΔ[Xr.ⲆⲆⵠⵠⵠⲆΔ][a].getContext("2d");
      ΔΔ[Xr.ⲆⵠᐃΔⲆΔⲆ][a] = document.createElement("canvas");
      ΔΔ[Xr.ⲆⵠᐃΔⲆΔⲆ][a].width = 600;
      ΔΔ[Xr.ⲆⵠᐃΔⲆΔⲆ][a].height = 600;
      ΔΔ[Xr.ΔΔⵠᐃⵠ][a] = ΔΔ[Xr.ⲆⵠᐃΔⲆΔⲆ][a].getContext("2d");
    }
    ΔΔ[Xr.ᐃᐃⵠᐃᐃᐃΔ] = [];
    ΔΔ[Xr.ᐃᐃⵠᐃᐃᐃΔ][Xr.ⲆᐃΔ] = pr(Tm(1, ["#c8e0de"]));
    ΔΔ[Xr.ᐃᐃⵠᐃᐃᐃΔ][Xr.ΔⲆⵠ] = pr(Tm(1, ["#147071"]));
    ΔΔ[Xr.ΔΔᐃΔᐃⲆᐃ] = [];
    ΔΔ[Xr.ΔΔᐃΔᐃⲆᐃ][Xr.ⲆᐃΔ] = pr(Tm(1, ["#231912"]));
    ΔΔ[Xr.ΔΔᐃΔᐃⲆᐃ][Xr.ΔⲆⵠ] = pr(Tm(1, ["#021719"]));
    ΔΔ[Xr.ᐃⵠⵠⵠᐃⵠⵠ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      wb(d, a * -$n, a * -hn, a * 14, a * 37, a * qi);
      d.restore();
      cb(d, b[Rs]);
      d.save();
      d.translate(a * 131, a * 94);
      wb(d, a * -84, a * -67, a * 168, a * 134, vi * a);
      d.restore();
      cb(d, b[gu], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      wb(d, a * -5, a * -18.5, a * It, a * 37, a * mh);
      d.restore();
      cb(d, b[ps]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      wb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * Xa);
      d.restore();
      cb(d, b[0]);
      return c;
    }(0.5, ["#BB0000"]));
    ΔΔ[Xr.ⲆᐃⲆⵠᐃᐃΔ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var e = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * Qj, a * 93);
      e.bezierCurveTo(a * Pl, a * 95, kt * a, a * 95, a * 21, a * 95);
      e.bezierCurveTo(cl * a, a * 83, a * 17, a * 93, eh * a, a * 76);
      e.bezierCurveTo(xb * a, a * 75, a * 11, a * 75, a * Ik, a * 75);
      e.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * ng, a * 59);
      e.bezierCurveTo(Wr * a, a * 59, a * 14, a * 59, a * 21, a * 59);
      e.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      e.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, Vg * a);
      e.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      e.bezierCurveTo(a * 76, a * ng, a * 75, a * d, a * 76, ms * a);
      e.bezierCurveTo(a * 81, a * 12, a * 84, Dl * a, a * 89, a * 27);
      e.bezierCurveTo(a * 95, a * 25, a * Cn, a * 16, a * 105, a * Wr);
      e.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      e.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      e.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      e.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      e.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      e.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      e.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      e.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      e.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      e.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      e.bezierCurveTo(Vs * a, a * 95, a * 13, a * 99, a * aa, a * 93);
      e.closePath();
      cb(e, b, b, a * Pe);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 25, a * 63);
      e.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * vg, a * 33);
      e.bezierCurveTo(a * hh, a * 12, a * 21, a * gr, a * 32, a * 17);
      e.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      cb(e, b, b, ul * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 91, a * 53);
      e.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, pl * a);
      e.bezierCurveTo(a * 137, a * 12, a * 137, a * xl, a * 139, a * 27);
      e.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      cb(e, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ΔΔ[Xr.ⲆΔΔⲆᐃⲆⵠ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Gk * a, a * 50);
      d.bezierCurveTo(St * a, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, Ig * a, a * 50);
      d.closePath();
      cb(d, b, b, a * eh);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * M, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      cb(d, b, b, eg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, Vl * a);
      d.bezierCurveTo(a * 144, a * tr, a * 146, a * 52, a * 133, a * 58);
      cb(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ΔΔ[Xr.ⵠⲆⵠᐃⲆⵠᐃ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      cb(d, b[In]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * dh, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      cb(d, b[Bg]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * eq);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      cb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, sh * a, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      cb(d, b[Eh]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      cb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      cb(d, b[mj]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      cb(d, b[Pg]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      cb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      cb(d, b[Lr]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      cb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      cb(d, b[0]);
      return c;
    }(fl * 1, ["#BB0000"]));
    ΔΔ[Xr.ΔᐃΔΔΔΔᐃ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -qr, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      cb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      cb(d, b, b, a * Ps);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      cb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ΔΔ[Xr.ⲆⵠΔⲆΔᐃΔ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      cb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      cb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      cb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ΔΔ[Xr.ⵠᐃⵠᐃⵠⵠᐃ] = pr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var h = Gi * b;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = jh;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      cb(e, c, c, h);
      return d;
    }(0.9, "#BB0000"));
    ΔΔ[Xr.ⲆᐃⲆⵠ] = pr(yb(0.6, "#BB0000"));
    ΔΔ[Xr.ᐃᐃⵠⵠᐃ] = pr(yb(0.6, "#1CE7E0"));
    ΔΔ[Xr.ᐃᐃⲆΔⲆⵠⲆ] = pr(yb(0.6, "#DBE71C"));
    ΔΔ[Xr.ⲆᐃᐃⲆΔΔΔ] = pr(yb(0.6, "#00BB00"));
    ΔΔ[Xr.ⵠΔⲆⲆⲆⵠⲆ] = [];
    ΔΔ[Xr.ⵠΔⲆⲆⲆⵠⲆ][Xr.ⲆᐃΔ] = pr(Tm(1, ["#dac291"]));
    ΔΔ[Xr.ⵠΔⲆⲆⲆⵠⲆ][Xr.ΔⲆⵠ] = pr(Tm(1, ["#0D423D"]));
    ΔΔ[Xr.ⵠᐃⵠᐃᐃⵠᐃ] = [];
    ΔΔ[Xr.ⵠᐃⵠᐃᐃⵠᐃ][Xr.ⲆᐃΔ] = pr(Tm(1, ["#dac291"]));
    ΔΔ[Xr.ⵠᐃⵠᐃᐃⵠᐃ][Xr.ΔⲆⵠ] = pr(Tm(1, ["#0D423D"]));
    ΔΔ[Xr.ᐃⵠΔⲆᐃᐃΔ] = [];
    ΔΔ[Xr.ᐃⵠΔⲆᐃᐃΔ][Xr.ⲆᐃΔ] = pr(Bc(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ΔΔ[Xr.ᐃⵠΔⲆᐃᐃΔ][Xr.ΔⲆⵠ] = pr(Bc(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ΔΔ[Xr.ᐃⲆΔⲆᐃᐃΔ] = [];
    ΔΔ[Xr.ᐃⲆΔⲆᐃᐃΔ][Xr.ⲆᐃΔ] = pr(Bc(0.3, xk, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ΔΔ[Xr.ᐃⲆΔⲆᐃᐃΔ][Xr.ΔⲆⵠ] = pr(Bc(0.3, Fg, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ΔΔ[Xr.ΔᐃᐃⵠΔ] = [pr(kc(1, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ΔΔ[Xr.ᐃⲆⵠΔᐃ] = [pr(kc(1, fg, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ΔΔ[Xr.ᐃᐃⲆΔΔ] = [];
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ⲆᐃΔ].push(pr(Fd(1, ["#0B6A84"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ⲆᐃΔ].push(pr(xc(Te * 1, ["#0B6A84"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ⲆᐃΔ].push(pr(ac(xt * 1, ["#0B6A84"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ⲆᐃΔ].push(pr(pm(hs * 1, ["#0B6A84"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ⲆᐃΔ].push(pr(hm(qu * 1, ["#0B6A84"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ⲆᐃΔ].push(pr(Lc(fl * 1, ["#0B6A84"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ⲆᐃΔ].push(pr(wc(Xn * 1, ["#0B6A84"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ΔⲆⵠ].push(pr(Fd(1, ["#09373F"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ΔⲆⵠ].push(pr(xc(1, ["#09373F"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ΔⲆⵠ].push(pr(ac(mk * 1, ["#09373F"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ΔⲆⵠ].push(pr(pm(1, ["#09373F"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ΔⲆⵠ].push(pr(hm(Te * 1, ["#09373F"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ΔⲆⵠ].push(pr(Lc(1, ["#09373F"])));
    ΔΔ[Xr.ᐃᐃⲆΔΔ][Xr.ΔⲆⵠ].push(pr(wc(Oq * 1, ["#09373F"])));
    ΔΔ[Xr.ⲆⲆⵠⲆᐃ] = [];
    ΔΔ[Xr.ⲆⲆⵠⲆᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⲆⲆⵠⲆᐃ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⲆⲆⵠⲆᐃ][Xr.ⲆᐃΔ].push(pr(tm(1.7, ["#FBEFBC"], 0)));
    ΔΔ[Xr.ⲆⲆⵠⲆᐃ][Xr.ⲆᐃΔ].push(pr(tm(1.9, ["#FBEFBC"], 1)));
    ΔΔ[Xr.ⲆⲆⵠⲆᐃ][Xr.ⲆᐃΔ].push(pr(tm(1.7, ["#FBEFBC"], 2)));
    ΔΔ[Xr.ⲆⲆⵠⲆᐃ][Xr.ΔⲆⵠ].push(pr(tm(1.7, ["#0F4C48"], Eh)));
    ΔΔ[Xr.ⲆⲆⵠⲆᐃ][Xr.ΔⲆⵠ].push(pr(tm(1.9, ["#0F4C48"], yg)));
    ΔΔ[Xr.ⲆⲆⵠⲆᐃ][Xr.ΔⲆⵠ].push(pr(tm(1.7, ["#0F4C48"], 2)));
    ΔΔ[Xr.ⵠΔⵠⲆⵠ] = [];
    ΔΔ[Xr.ⵠΔⵠⲆⵠ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠΔⵠⲆⵠ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⵠΔⵠⲆⵠ][Xr.ⲆᐃΔ].push(pr(tm(1.8, ["#A9D6D3"], 0)));
    ΔΔ[Xr.ⵠΔⵠⲆⵠ][Xr.ⲆᐃΔ].push(pr(tm(2, ["#A9D6D3"], Oq)));
    ΔΔ[Xr.ⵠΔⵠⲆⵠ][Xr.ⲆᐃΔ].push(pr(tm(1.8, ["#A9D6D3"], xj)));
    ΔΔ[Xr.ⵠΔⵠⲆⵠ][Xr.ΔⲆⵠ].push(pr(tm(1.8, ["#115E60"], 0)));
    ΔΔ[Xr.ⵠΔⵠⲆⵠ][Xr.ΔⲆⵠ].push(pr(tm(2, ["#115E60"], 1)));
    ΔΔ[Xr.ⵠΔⵠⲆⵠ][Xr.ΔⲆⵠ].push(pr(tm(1.8, ["#115E60"], pq)));
    ΔΔ[Xr.ⵠⵠⵠᐃⲆ] = [];
    ΔΔ[Xr.ⵠⵠⵠᐃⲆ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠⵠⵠᐃⲆ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⵠⵠⵠᐃⲆ][Xr.ⲆᐃΔ].push(pr(tm(1.9, ["#2A8B9B"], Db)));
    ΔΔ[Xr.ⵠⵠⵠᐃⲆ][Xr.ⲆᐃΔ].push(pr(tm(2.1, ["#2A8B9B"], Ot)));
    ΔΔ[Xr.ⵠⵠⵠᐃⲆ][Xr.ⲆᐃΔ].push(pr(tm(1.9, ["#2A8B9B"], 2)));
    ΔΔ[Xr.ⵠⵠⵠᐃⲆ][Xr.ΔⲆⵠ].push(pr(tm(1.9, ["#0F464C"], tt)));
    ΔΔ[Xr.ⵠⵠⵠᐃⲆ][Xr.ΔⲆⵠ].push(pr(tm(2.1, ["#0F464C"], 1)));
    ΔΔ[Xr.ⵠⵠⵠᐃⲆ][Xr.ΔⲆⵠ].push(pr(tm(1.9, ["#0F464C"], Gl)));
    ΔΔ[Xr.ΔᐃᐃΔⵠ] = [];
    ΔΔ[Xr.ΔᐃᐃΔⵠ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ΔᐃᐃΔⵠ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ΔᐃᐃΔⵠ][Xr.ⲆᐃΔ].push(pr(Jc(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[Xr.ΔᐃᐃΔⵠ][Xr.ⲆᐃΔ].push(pr(Jc(Ot * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[Xr.ΔᐃᐃΔⵠ][Xr.ⲆᐃΔ].push(pr(Jc(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[Xr.ΔᐃᐃΔⵠ][Xr.ΔⲆⵠ].push(pr(Jc(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[Xr.ΔᐃᐃΔⵠ][Xr.ΔⲆⵠ].push(pr(Jc(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[Xr.ΔᐃᐃΔⵠ][Xr.ΔⲆⵠ].push(pr(Jc(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[Xr.ⲆⲆᐃⲆᐃ] = [];
    ΔΔ[Xr.ⲆⲆᐃⲆᐃ][Xr.ⲆᐃΔ] = pr(yc(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ΔΔ[Xr.ⲆⲆᐃⲆᐃ][Xr.ΔⲆⵠ] = pr(yc(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ΔΔ[Xr.ΔⲆᐃᐃⲆⲆⵠ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = Te;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      cb(d, b[gu], b[0], a * 12);
      return c;
    }(0.8, ["#B6222A"]));
    ΔΔ[Xr.ⲆⲆᐃⲆⵠ] = [];
    ΔΔ[Xr.ⲆⲆᐃⲆⵠ][Xr.ⲆᐃΔ] = pr(vd(0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ΔΔ[Xr.ⲆⲆᐃⲆⵠ][Xr.ΔⲆⵠ] = pr(vd(0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ΔΔ[Xr.ᐃⲆⲆⵠⵠᐃᐃ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      cb(d, b[0], b[Rq], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      cb(d, b[0], b[tt], a * Zk);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      cb(d, b[0], b[Pg], a * Ab);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      cb(d, b[0], b[Hi], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      cb(d, b[tg], b[0], a * Th);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      cb(d, b[Kh], b[Lr], a * gn);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      cb(d, b[Lr], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      cb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      cb(d, b[Zj], b[0], a * Wb);
      return c;
    }(0.8, ["#B6222A"]));
    ΔΔ[Xr.ᐃⲆΔⵠⲆᐃⲆ] = [];
    ΔΔ[Xr.ᐃⲆΔⵠⲆᐃⲆ][Xr.ⲆᐃΔ] = pr(Qb(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ΔΔ[Xr.ᐃⲆΔⵠⲆᐃⲆ][Xr.ΔⲆⵠ] = pr(Qb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], wj));
    ΔΔ[Xr.ⵠⲆⵠⲆΔᐃᐃ] = [];
    ΔΔ[Xr.ⵠⲆⵠⲆΔᐃᐃ][Xr.ⲆᐃΔ] = pr(Qb(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], yg));
    ΔΔ[Xr.ⵠⲆⵠⲆΔᐃᐃ][Xr.ΔⲆⵠ] = pr(Qb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], hs));
    ΔΔ[Xr.ⲆⵠᐃΔⵠⲆⲆ] = [];
    ΔΔ[Xr.ⲆⵠᐃΔⵠⲆⲆ][Xr.ⲆᐃΔ] = pr(Qb(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ΔΔ[Xr.ⲆⵠᐃΔⵠⲆⲆ][Xr.ΔⲆⵠ] = pr(Qb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], Bg));
    ΔΔ[Xr.ⵠᐃΔΔΔΔΔ] = pr(_b(0.4, ["#B6222A"]));
    ΔΔ[Xr.ⵠᐃᐃΔᐃΔΔ] = pr(_b(0.4, ["#B6222A"]));
    ΔΔ[Xr.ᐃⲆᐃⲆⲆΔⵠᐃᐃ] = pr(_b(0.4, ["#B6222A"]));
    ΔΔ[Xr.ⵠⲆⵠᐃᐃ] = pr(Cd(0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ΔΔ[Xr.ⲆⵠᐃΔᐃ] = pr(Au(0.35, oa, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ΔΔ[Xr.ΔΔⲆⲆⲆΔᐃ] = [];
    ΔΔ[Xr.ΔΔⲆⲆⲆΔᐃ][Xr.ⲆᐃΔ] = pr(su(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ΔΔ[Xr.ΔΔⲆⲆⲆΔᐃ][Xr.ΔⲆⵠ] = pr(su(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ΔΔ[Xr.ⵠⵠⵠⵠⲆ] = [];
    ΔΔ[Xr.ⵠⵠⵠⵠⲆ][Xr.ⲆᐃΔ] = pr(su(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ΔΔ[Xr.ⵠⵠⵠⵠⲆ][Xr.ΔⲆⵠ] = pr(su(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ΔΔ[Xr.ᐃⲆⲆᐃΔⵠᐃ] = [];
    ΔΔ[Xr.ᐃⲆⲆᐃΔⵠᐃ][Xr.ⲆᐃΔ] = pr(tu(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ΔΔ[Xr.ᐃⲆⲆᐃΔⵠᐃ][Xr.ΔⲆⵠ] = pr(tu(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ΔΔ[Xr.ΔⲆᐃⲆΔᐃΔ] = [];
    ΔΔ[Xr.ΔⲆᐃⲆΔᐃΔ][Xr.ⲆᐃΔ] = pr(zu(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ΔΔ[Xr.ΔⲆᐃⲆΔᐃΔ][Xr.ΔⲆⵠ] = pr(zu(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ΔΔ[Xr.ⵠⵠᐃᐃⵠⲆᐃ] = [];
    ΔΔ[Xr.ⵠⵠᐃᐃⵠⲆᐃ][Xr.ⲆᐃΔ] = pr(tu(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ΔΔ[Xr.ⵠⵠᐃᐃⵠⲆᐃ][Xr.ΔⲆⵠ] = pr(tu(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ΔΔ[Xr.ΔⵠᐃⵠᐃⲆⲆ] = [];
    ΔΔ[Xr.ΔⵠᐃⵠᐃⲆⲆ][Xr.ⲆᐃΔ] = pr(zu(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ΔΔ[Xr.ΔⵠᐃⵠᐃⲆⲆ][Xr.ΔⲆⵠ] = pr(zu(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ΔΔ[Xr.ΔⲆΔⵠᐃᐃⲆ] = pr(xu(0.35, ["#B6222A"]));
    ΔΔ[Xr.ᐃⲆⵠᐃᐃΔⲆ] = pr(tu(0.35, 0, [undefined, "#B6222A"]));
    ΔΔ[Xr.ⲆΔⲆⲆᐃⵠΔ] = pr(zu(0.35, 0, [mg, "#B6222A"]));
    ΔΔ[Xr.ⵠΔⵠⵠⲆⲆⲆ] = pr(xu(0.35, ["#22E066"]));
    ΔΔ[Xr.ΔᐃⵠΔΔⲆⵠ] = pr(tu(0.35, 0, [cn, "#22E066"]));
    ΔΔ[Xr.ᐃⲆⵠᐃᐃᐃⲆ] = pr(zu(0.35, 0, [undefined, "#22E066"]));
    ΔΔ[Xr.ᐃⲆⵠⲆⲆ] = [];
    ΔΔ[Xr.ᐃⲆⵠⲆⲆ][Xr.ⲆᐃΔ] = pr($c(0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ΔΔ[Xr.ᐃⲆⵠⲆⲆ][Xr.ΔⲆⵠ] = pr($c(0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ΔΔ[Xr.ᐃⵠⵠⲆΔ] = [];
    ΔΔ[Xr.ᐃⵠⵠⲆΔ][Xr.ⲆᐃΔ] = pr(Kd(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ΔΔ[Xr.ᐃⵠⵠⲆΔ][Xr.ΔⲆⵠ] = pr(Kd(0.45, Fg, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ΔΔ[Xr.ΔΔΔⵠⵠ] = [];
    ΔΔ[Xr.ΔΔΔⵠⵠ][Xr.ⲆᐃΔ] = pr(Ad(0.63, oa, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ΔΔ[Xr.ΔΔΔⵠⵠ][Xr.ΔⲆⵠ] = pr(Ad(0.63, Gj, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ΔΔ[Xr.ⲆᐃⲆᐃⵠ] = [];
    ΔΔ[Xr.ⲆᐃⲆᐃⵠ][Xr.ⲆᐃΔ] = pr(cd(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ΔΔ[Xr.ⲆᐃⲆᐃⵠ][Xr.ΔⲆⵠ] = pr(cd(1, ye, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ΔΔ[Xr.ⵠᐃⵠᐃⵠ] = [];
    ΔΔ[Xr.ⵠᐃⵠᐃⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠⵠΔΔᐃⲆᐃᐃ;
    ΔΔ[Xr.ⵠᐃⵠᐃⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃⲆΔⵠΔᐃᐃᐃ;
    ΔΔ[Xr.ⲆᐃⵠΔΔ] = [];
    ΔΔ[Xr.ⲆᐃⵠΔΔ][Xr.ⲆᐃΔ] = pr(Ib(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[Xr.ⲆᐃⵠΔΔ][Xr.ΔⲆⵠ] = pr(Ib(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[Xr.ᐃⲆΔΔᐃⵠᐃ] = [ΔΔ[Xr.ⲆᐃⵠΔΔ]];
    ΔΔ[Xr.ᐃⲆΔΔᐃⵠᐃ][lb] = [];
    ΔΔ[Xr.ᐃⲆΔΔᐃⵠᐃ][Yl] = [];
    ΔΔ[Xr.ᐃⲆΔΔᐃⵠᐃ][1][Xr.ⲆᐃΔ] = pr(Eb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[Xr.ᐃⲆΔΔᐃⵠᐃ][1][Xr.ΔⲆⵠ] = pr(Eb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[Xr.ᐃⲆΔΔᐃⵠᐃ][2][Xr.ⲆᐃΔ] = pr(Sb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[Xr.ᐃⲆΔΔᐃⵠᐃ][H][Xr.ΔⲆⵠ] = pr(Sb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[Xr.ᐃᐃΔⵠΔ] = [];
    ΔΔ[Xr.ᐃᐃΔⵠΔ][Xr.ⲆᐃΔ] = pr(Pb(3 - Math.PI / H, hc(0.6, Fg, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ΔΔ[Xr.ᐃᐃΔⵠΔ][Xr.ΔⲆⵠ] = pr(Pb(Ob - Math.PI / ss, hc(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ΔΔ[Xr.ⵠΔΔⵠΔᐃΔ] = [];
    ΔΔ[Xr.ⵠΔΔⵠΔᐃΔ][Xr.ⲆᐃΔ] = pr(Tt(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ΔΔ[Xr.ⵠΔΔⵠΔᐃΔ][Xr.ΔⲆⵠ] = pr(Tt(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], tt));
    ΔΔ[Xr.ᐃⵠΔᐃΔⲆⲆ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      wb(d, a * -96.5, a * -21.5, a * 193, a * 193, tt * a);
      d.restore();
      cb(d, b[Ps], b[Ug], La * a);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      wb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      cb(d, b[3], b[xt], a * Vh);
      d.save();
      d.translate(a * 203.5, a * 299);
      wb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      cb(d, b[ig], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      wb(d, a * -20.5, a * -109, a * 41, a * 218, Kg * a);
      d.restore();
      cb(d, b[3], b[js], da * a);
      d.save();
      d.translate(a * 108.5, a * 210);
      wb(d, a * -20.5, a * -109, a * 41, a * 218, a * yl);
      d.restore();
      cb(d, b[vt], b[rg], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      wb(d, a * -92, a * -9.5, a * 184, a * Be, Th * a);
      d.restore();
      cb(d, b[fn], b[I], Bo * a);
      d.save();
      d.translate(a * 197, a * 299);
      wb(d, a * 85, a * -9, a * -170, a * Gg, a * 10);
      d.restore();
      cb(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      cb(d, undefined, b[Xn], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      cb(d, Jg, b[1], Vh * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      cb(d, undefined, b[Ug], a * Uk);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      cb(d, j, b[1], a * $a);
      return c;
    }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ΔΔ[Xr.ⵠΔΔᐃⵠΔᐃ] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      wb(d, a * -96.5, a * -21.5, a * 193, a * 43, Rq * a);
      d.restore();
      cb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      wb(d, a * 96.5, a * -21.5, a * -193, a * 43, ps * a);
      d.restore();
      cb(d, b[0], b[ps], $a * a);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      wb(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      cb(d, b[0], b[Pg], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      wb(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      cb(d, b[0], b[In], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      wb(d, a * -115.5, a * -20.5, a * 231, a * 41, J * a);
      d.restore();
      cb(d, b[0], b[Db], Es * a);
      d.save();
      d.translate(a * 203.5, a * 299);
      wb(d, a * -115.5, -al * a, a * 231, a * 40, a * 10);
      d.restore();
      cb(d, b[0], b[0], Uk * a);
      d.save();
      d.translate(a * 298.5, a * 210);
      wb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      cb(d, b[zl], b[Pg], a * F);
      d.save();
      d.translate(a * 108.5, a * 210);
      wb(d, a * -20.5, a * -109, a * 41, a * 218, Kg * a);
      d.restore();
      cb(d, b[0], b[Eh], a * 12);
      return c;
    }(0.3, ["#BB0000"]));
    ΔΔ[Xr.ΔᐃᐃΔᐃⲆΔ] = du(hd, [{
      f: Qc,
      x: Rs,
      y: 0,
      a: 1,
      r: Rq,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Xr.ᐃⲆᐃⵠΔ] = du(1.5, [{
      f: pd,
      x: 0,
      y: Eh,
      a: cu,
      r: Rq,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ΔΔ[Xr.ᐃⲆⲆΔⵠⲆᐃ] = Od(0.35, ["#072428", "#67A242", "#67A242"], 0);
    ΔΔ[Xr.ⵠᐃⲆⲆᐃⵠⲆ] = Od(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ΔΔ[Xr.ΔᐃⲆⲆⲆΔⵠ] = Od(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ΔΔ[Xr.ΔᐃᐃⵠⲆᐃΔ] = Od(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], I);
    if (ΔΔⵠΔᐃᐃΔ) {
      ΔΔ[Xr.ⲆᐃΔΔⲆⵠⵠ] = pr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        wb(d, Lr, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        cb(d, "#1D6055");
        d.globalAlpha = fl;
        var h = od(b, "Leaderboard", 25, "#FFF");
        d.drawImage(h, (e - h.width) / 2, b * 5);
        return c;
      }(1));
    } else {
      ΔΔ[Xr.ⲆᐃΔΔⲆⵠⵠ] = pr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = E * b;
        c.width = e;
        c.height = f + qi;
        d.beginPath();
        wb(d, ya, Zj, e, f - g, g);
        d.globalAlpha = 0.5;
        cb(d, "#1D6055");
        d.globalAlpha = cu;
        var h = od(b, "Leaderboard", 25, "#FFF");
        d.drawImage(h, (e - h.width) / 2, b * Gs);
        return c;
      }(1));
    }
    if (ΔΔⵠΔᐃᐃΔ) {
      ΔΔ[Xr.ΔᐃⲆⲆᐃⲆᐃ] = pr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var j = b * Ok;
        var a = b * 35;
        var k = b * 65;
        var h = b * 2;
        var l = b * nb;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, bl * b);
        wb(d, k, ps, f, j, h);
        cb(d, null, "#69A148", l);
        d.translate(Kh, a);
        wb(d, k, ps, f, j, h);
        cb(d, null, "#AF352A", l);
        d.translate(0, a);
        wb(d, k, gu, f, j, h);
        cb(d, null, "#669BB1", l);
        return c;
      }(0.75));
    } else {
      ΔΔ[Xr.ΔᐃⲆⲆᐃⲆᐃ] = pr(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var k = c * pl;
        var a = c * 240;
        var m = c * 35;
        var h = c * 1;
        var l = c * 4;
        var g = c * 4;
        d.width = f;
        d.height = j;
        e.translate(Bg, c * 15);
        wb(e, m, h, i, k, l);
        cb(e, null, "#69A148", g);
        var n = ΔΔ[Xr.ᐃⲆⲆΔⵠⲆᐃ];
        e.drawImage(n, Ej, -8);
        e.translate(a, 0);
        wb(e, m, h, i, k, l);
        cb(e, null, "#AF352A", g);
        n = ΔΔ[Xr.ΔᐃⲆⲆⲆΔⵠ];
        e.drawImage(n, 17, -9);
        e.translate(a, Rs);
        wb(e, m, h, i, k, l);
        cb(e, null, "#669BB1", g);
        n = ΔΔ[Xr.ⵠᐃⲆⲆᐃⵠⲆ];
        e.drawImage(n, 17, -8);
        e.translate(a, Da);
        wb(e, m, h, i, k, l);
        cb(e, null, "#074A87", g);
        n = ΔΔ[Xr.ΔᐃᐃⵠⲆᐃΔ];
        e.drawImage(n, Pl, -8);
        return d;
      }(1));
    }
    if (ΔΔⵠΔᐃᐃΔ) {
      ΔΔ[Xr.ΔΔΔΔⵠΔΔ] = pr(Ld(0.75));
    } else {
      ΔΔ[Xr.ΔΔΔΔⵠΔΔ] = pr(Ld(1));
    }
    ΔΔ[Xr.ᐃΔⲆⲆⲆΔΔ] = pr(qd(0.16, oa, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ΔΔ[Xr.ᐃⵠᐃⵠᐃⵠΔ] = pr(Pb(5.8, Bu(0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ΔΔ[Xr.ᐃⲆ] = [];
    ΔΔ[Xr.ΔΔΔᐃⵠΔⵠ] = [];
    for (a = Zj; a < lw.ⲆᐃΔᐃΔᐃΔ + xj; a++) {
      ΔΔ[Xr.ΔΔΔᐃⵠΔⵠ][a] = od(1, "" + (a + 1), Ms, "#FFF");
    }
    ΔΔ[Xr.ⲆᐃⵠᐃⵠⲆᐃ] = [];
    ΔΔ[Xr.ⲆᐃⵠᐃⵠⲆᐃ].push(pr(Hc(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ΔΔ[Xr.ⲆᐃⵠᐃⵠⲆᐃ].push(pr(Hc(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ΔΔ[Xr.ⲆᐃⵠᐃⵠⲆᐃ].push(pr(Hc(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ΔΔ[Xr.ⲆⲆⵠΔΔⲆΔ] = [];
    ΔΔ[Xr.ⲆⲆⵠΔΔⲆΔ].push(pr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(In, a * 5);
      c.translate(Rs, a * 20);
      fb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      cb(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      fb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      cb(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      cb(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      cb(c, "#3A2A0D");
      fb(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      cb(c, j, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      cb(c, undefined, "#5E3E1A", Sj * a);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      cb(c, Hs, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      cb(c, undefined, "#c7a726", F * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      cb(c, lj, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      cb(c, undefined, "#c7a726", Uk * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      cb(c, lj, "#c7a726", Sj * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      cb(c, Hs, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      cb(c, Jg, "#c7a726", Ms * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      cb(c, Sl, "#c7a726", a * gr);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      cb(c, mg, "#c7a726", a * da);
      c.translate(0, a * -yh);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      cb(c, Hq, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      cb(c, Jo, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      cb(c, cn, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      cb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      cb(c, mg, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      cb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      cb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      cb(c, undefined, "#EDCE4F", Es * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      cb(c, Ng, "#EDCE4F", oq * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      cb(c, "#704618", "#5D3D1A", yh * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      cb(c, "#ECBE35", "#EDCE4F", a * 8);
      fb(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      cb(c, "#392C16", "#5E3E1A", jn * a);
      return b;
    }(0.22)));
    ΔΔ[Xr.ⲆⲆⵠΔΔⲆΔ].push(pr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * Ok);
      fb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      cb(c, "#322413", "#322413", a * 4);
      c.translate(Da, a * -20);
      fb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      cb(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      cb(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      cb(c, "#071A1B");
      fb(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      cb(c, undefined, "#5E3E1A", yl * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      cb(c, wr, "#5E3E1A", wg * a);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      cb(c, Hs, "#281C08", a * da);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      cb(c, undefined, "#281C08", gr * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      cb(c, Za, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      cb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      cb(c, T, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      cb(c, Lj, "#281C08", Vh * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      cb(c, undefined, "#281C08", a * La);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      cb(c, Jg, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      cb(c, undefined, "#281C08", a * 12);
      c.translate(0, a * -_a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      cb(c, cn, "#5E3C10", a * oq);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      cb(c, undefined, "#5E3C10", Tl * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      cb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      cb(c, cn, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      cb(c, undefined, "#5E3C10", Es * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      cb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      cb(c, undefined, "#5E3C10", a * Tl);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      cb(c, Za, "#5E3C10", a * Vh);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      cb(c, mb, "#5E3C10", a * da);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      cb(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      cb(c, "#E1DDD5", "#EAE7E4", a * Ig);
      fb(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      cb(c, "#392C16", "#5E3E1A", a * yl);
      return b;
    }(0.22)));
    ΔΔ[Xr.ᐃᐃΔᐃᐃΔΔ] = pr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(Zj, a * 5);
      fb(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      cb(c, "#C09D6F", "#A37943", gn * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      cb(c, "#C09D6F", "#A37943", a * Ds);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      wb(c, a * -5.5, a * -37.5, pk * a, a * 75, a * yl);
      c.restore();
      cb(c, "#C09D6F", "#A37943", Ab * a);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      wb(c, a * -10, a * -5.5, a * 20, a * rs, a * mk);
      c.restore();
      cb(c, "#C09D6F");
      fb(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      cb(c, "#C09D6F");
      return b;
    }(0.22));
    ΔΔ[Xr.ⵠⵠⵠᐃⵠΔⲆ] = [];
    ΔΔ[Xr.ⵠⵠⵠᐃⵠΔⲆ].push(pr(Ub(1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ΔΔ[Xr.ⵠⵠⵠᐃⵠΔⲆ].push(pr(Ub(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ΔΔ[Xr.ⵠⵠⵠᐃⵠΔⲆ].push(pr(Ub(1.5, ["#67441f", "#573819", "#9c6e08"], cu)));
    ΔΔ[Xr.ΔᐃⵠⵠᐃⲆᐃ] = Ⲇⵠ.ΔᐃⵠⵠᐃⲆᐃ;
    ΔΔ[Xr.ΔⵠⵠⲆΔᐃΔ] = Ⲇⵠ.ΔⵠⵠⲆΔᐃΔ;
    ΔΔ[Xr.ΔⲆᐃΔΔᐃⵠ] = Ⲇⵠ.ΔⲆᐃΔΔᐃⵠ;
    ΔΔ[Xr.ⵠᐃᐃⵠⵠⵠᐃ] = Ⲇⵠ.ⵠᐃᐃⵠⵠⵠᐃ;
    ΔΔ[Xr.ᐃⵠΔⵠᐃⲆⲆ] = od(1, "Show spectators", 25, "#FFF", Hs, Za, "#000", kq, 220);
    ΔΔ[Xr.ⵠⵠᐃⵠⲆⲆⲆ] = od(1, "Reconnecting...", 30, "#FFF");
    console.log(cn, Jg);
  }
  function Id(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * yl, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    cb(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    cb(e, c[ps], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    cb(e, c[Rs], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    cb(e, c[gu], c[0], yt * a);
    e.globalAlpha = 1;
    e.translate(-Kg * a, a * -nr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    cb(e, c[fl], c[xj], vr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    cb(e, c[1], c[dg], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    cb(e, c[1], c[Jt], a * J);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    cb(e, c[lb], c[2], gg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    cb(e, c[1], c[xq], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    cb(e, c[js], c[Gl], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    cb(e, c[1], c[dg], a * Rr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    cb(e, c[1], c[Hj], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    cb(e, c[1], c[Jt], at * a);
    return d;
  }
  function Ed(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(Db, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(El * a, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * se, a * 83, tr * a, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(vn * a, a * 67, a * Zn, a * 67, a * Aq, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, ng * a, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * eb, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * lh);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    cb(d, b[0]);
    d.globalAlpha = js;
    d.translate(Rs, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(Pl * a, a * 95, jg * a, a * 95, a * 21, a * 95);
    d.bezierCurveTo(cl * a, a * 83, a * is, a * 93, Pe * a, a * 76);
    d.bezierCurveTo(yq * a, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * Lg, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * Do, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * xl);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, $n * a, a * 75, a * 11, a * 76, ms * a);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * ar, ck * a, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, hq * a, a * 99, a * On, a * 93);
    d.closePath();
    cb(d, b[Oq]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    cb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    cb(d, b[3]);
    fb(d, a * 103, a * 110, a * 11);
    cb(d, b[4]);
    fb(d, a * 55, a * 111, a * 11);
    cb(d, b[nb]);
    fb(d, a * 99, a * 107, pb * a);
    cb(d, b[1]);
    fb(d, a * 51, a * 108, Eg * a);
    cb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    cb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, ya);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    cb(d, b[ru]);
    d.translate(2, Rs);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(Sg * a, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * sb, a * 93, eh * a, a * 76);
    d.bezierCurveTo(a * dl, a * 75, a * 11, a * 75, a * Pj, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, ia * a, a * 59);
    d.bezierCurveTo(a * Pq, a * 59, a * dk, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * pk, a * 76, a * 6);
    d.bezierCurveTo(a * 81, Ql * a, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * Vg, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(Gg * a, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    cb(d, undefined, b[2], nj * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * Rk, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * Yr, a * 32, a * Yo);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    cb(d, b[fl], b[Mt], a * Al);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * Vl);
    d.bezierCurveTo(a * 137, a * Tl, a * 137, Kb * a, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    cb(d, b[1], b[H], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    cb(d, b[Tr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    cb(d, b[3]);
    return c;
  }
  function Sd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    wb(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    cb(e, c[tt], c[1], a * Og);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    wb(e, a * -61, a * -$g, a * 122, a * 40, Mg * a);
    e.restore();
    cb(e, c[Mt], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    cb(e, c[2], c[1], a * Al);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * ch, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(sr * a, a * 68.375, hg * a, a * 69.375, Sg * a, a * 68.375);
    e.closePath();
    cb(e, c[lr], c[1], a * fs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * ql, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    cb(e, c[2], c[qu], a * 4);
    fb(e, a * 71, a * 44.375, a * 16.55294535724685);
    cb(e, c[Hj], c[1], a * 4);
    fb(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    cb(e, c[2], c[ie], a * Pe);
    return d;
  }
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, Vl * a);
    e.globalAlpha = b ? 0.5 : jh;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    cb(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    cb(e, c[1], c[ih], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    cb(e, c[yr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    cb(e, c[nb], c[Xg], ms * a);
    return d;
  }
  function _d(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    wb(e, a * -97.5, a * -134.5, a * 195, a * 269, It * a);
    e.restore();
    cb(e, c[Hi], c[ie], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    cb(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    wb(e, a * -93.5, a * -126.5, a * 187, a * 253, a * vr);
    e.restore();
    cb(e, c[4], c[qu], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    cb(e, undefined, c[mk], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    cb(e, c[eg], c[1], wh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    cb(e, c[4], c[xt], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    cb(e, c[Gi], c[1], a * zj);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    wb(e, a * -58.5, a * -32, a * 117, a * 64, a * wa);
    e.restore();
    cb(e, c[5]);
    return d;
  }
  function Fd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    cb(d, b[0]);
    return c;
  }
  function Rd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var h = ld(b * Ug, xh, d);
    g.drawImage(h, b * 0, b * 0);
    if (fl == e) {
      g.translate(b * 100, b * 0);
      fb(g, b * 113, b * 120, b * 66);
      cb(g, undefined, d[4], b * 13);
      h = Bu(b * 0.65, vs, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(h, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      cb(g, undefined, d[Al], Cq * b);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      fb(g, b * 113, b * 120, b * 66);
      cb(g, ut, d[4], zs * b);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      wb(g, b * -40.5, b * -29.5, b * 81, b * 59, b * hb);
      g.restore();
      cb(g, "#dff2f7", "#187484", b * $n);
      fb(g, b * 22, b * 82, Zr * b);
      cb(g, "#dff2f7", "#187484", b * 7);
      fb(g, b * 145, b * 82, Vh * b);
      cb(g, "#dff2f7", "#187484", $n * b);
      h = sd(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * jn, b * 85);
      h = sd(b * 0.5, true, [Ⲇ[vh], "#7c4908"]);
      g.drawImage(h, b * 50, b * 85);
      h = sd(b * 0.5, un, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * 90, b * 85);
      h = nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = nd(Xn * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, b * 125);
      h = nd(Ol * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 50, b * 115);
      h = nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, b * 100);
      h = nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 80, b * 120);
      h = nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 110, b * 125);
      h = nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 120, b * 105);
    } else if (e == bb) {
      g.translate(b * 100, b * 0);
      fb(g, b * 113, b * 120, b * 66);
      cb(g, undefined, d[Ps], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      wb(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      cb(g, undefined, d[nr], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      cb(g, d[Uh], d[Pt], eh * b);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      cb(g, undefined, d[qg], b * Vi);
    } else if (e == Gi) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      cb(g, mg, d[Uh], b * lh);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      cb(g, Lj, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * $n, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      cb(g, Hq, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * ct);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, hg * b);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      cb(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      cb(g, j, d[ta], Wa * b);
      g.translate(b * sk, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      cb(g, undefined, d[ta], b * lh);
      g.translate(Ra * b, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, dk * b);
      g.bezierCurveTo(b * 239, b * _o, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      cb(g, lj, d[M], Wa * b);
    }
    return f;
  }
  function Gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Eh, a * 5);
    e.save();
    e.translate(a * 85, a * 88);
    e.rotate(1.4);
    Tb(e, 7, a * 60, Th * a);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = Ug;
    e.translate(a * 85, a * 80);
    for (var f = Bg; f < 10; f++) {
      e.rotate(Math.PI / 5);
      e.save();
      e.translate(a * 65, Rs);
      Tb(e, Wg, a * 21, a * 4);
      cb(e, c[fl], c[2], a * 4);
      e.restore();
    }
    e.save();
    e.translate(a * 0, a * Kh);
    e.rotate(1.4);
    Tb(e, 7, a * 60, a * 10);
    cb(e, c[3], c[4], a * 4);
    e.rotate(0.64);
    Tb(e, 7, a * 40, a * 10);
    cb(e, c[Eq], c[6], a * 4);
    e.rotate(0.12);
    Tb(e, wk, a * 23, a * Eq);
    e.restore();
    cb(e, c[7]);
    return d;
  }
  function jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(oh * a, a * 20);
    e.globalAlpha = b ? 0.5 : Ot;
    e.save();
    e.translate(a * 54, a * 389.5);
    wb(e, -nt * a, a * -228.5, a * 30, a * 457, Ra * a);
    e.restore();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    cb(e, c[Rq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    cb(e, c[In]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    cb(e, c[Lr]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = lb;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(Kh);
    wb(e, a * -15, a * -228.5, a * 30, a * 457, a * jn);
    e.restore();
    cb(e, c[Ug], c[Pn], a * On);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    cb(e, c[Ks], c[4], a * br);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    cb(e, c[3], c[nj], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    cb(e, c[Oj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    cb(e, c[fh], c[7], a * qk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    cb(e, c[8]);
    return d;
  }
  function Ld(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var h = b * 4;
    c.width = e;
    c.height = f;
    wb(d, b * 5, b * 5, e - b * Ab, f - b * 10, g);
    cb(d, null, "#BBE8EF", h);
    return c;
  }
  function Wd(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 501;
    e.height = a * 564;
    f.scale(0.5, 0.5);
    f.translate(a * 240, Li * a);
    f.rotate(d);
    f.globalAlpha = b ? 0.5 : 0.2;
    fb(f, a * 174, a * 87.984375, a * 20.8806130178211);
    cb(f, c[0], c[Eh], yh * a);
    fb(f, a * 174, a * 87.984375, a * 12.165525060596439);
    cb(f, c[ya], c[0], a * 8);
    fb(f, a * 174, a * 87.484375, Ro * a);
    cb(f, c[0]);
    fb(f, a * 30, a * 87.984375, a * 20.8806130178211);
    cb(f, c[gu], c[gu], Vn * a);
    fb(f, a * 30, a * 87.984375, a * 12.165525060596439);
    cb(f, c[tg], c[Db], a * Dt);
    fb(f, a * 30, a * 87.484375, a * nk);
    cb(f, c[0]);
    fb(f, a * Ak, a * 30, a * 20.8806130178211);
    cb(f, c[0], c[0], a * Ps);
    fb(f, Yh * a, a * 30, a * 12.165525060596439);
    cb(f, c[0], c[0], a * 4);
    fb(f, a * Cn, a * 30, a * 6);
    cb(f, c[0]);
    fb(f, a * 100, a * 130, a * 20.8806130178211);
    cb(f, c[tt], c[zl], Ps * a);
    fb(f, a * 100, a * 130, a * 12.165525060596439);
    cb(f, c[0], c[Kh], a * 4);
    fb(f, a * 100, a * 130, a * 6);
    cb(f, c[ps]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    f.rotate(0);
    wb(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    cb(f, c[ps], c[0], a * qg);
    f.save();
    f.translate(a * 101, a * 64.984375);
    f.rotate(0);
    wb(f, a * -33, a * -vr, a * 66, al * a, a * 15);
    f.restore();
    cb(f, c[tt], c[Rs], a * ul);
    f.save();
    f.translate(a * 102, a * 63.484375);
    f.rotate(wj);
    wb(f, -cl * a, a * -27.5, a * Gg, a * 55, St * a);
    f.restore();
    f.translate(z, -5);
    f.globalAlpha = Ot;
    fb(f, a * 174, a * 87.984375, a * 20.8806130178211);
    cb(f, c[1], c[Jb], a * Ml);
    fb(f, a * 174, a * 87.984375, a * 12.165525060596439);
    cb(f, c[1], c[bb], a * 8);
    fb(f, a * 174, a * 87.484375, Ya * a);
    cb(f, c[H]);
    fb(f, a * 30, a * 87.984375, a * 20.8806130178211);
    cb(f, c[1], c[gl], a * 8);
    fb(f, a * 30, a * 87.984375, a * 12.165525060596439);
    cb(f, c[lb], c[nq], a * 8);
    fb(f, a * 30, a * 87.484375, Ck * a);
    cb(f, c[pq]);
    fb(f, a * 102, a * 30, a * 20.8806130178211);
    cb(f, c[1], c[Ks], a * 8);
    fb(f, a * 102, a * 30, a * 12.165525060596439);
    cb(f, c[fl], c[3], a * 8);
    fb(f, a * 102, a * 30, nk * a);
    cb(f, c[1]);
    fb(f, a * 102, a * 130, a * 20.8806130178211);
    cb(f, c[js], c[ru], a * 8);
    fb(f, a * 102, a * 130, a * 12.165525060596439);
    cb(f, c[1], c[Hk], a * 8);
    fb(f, a * 102, a * 130, a * 6);
    cb(f, c[cu]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    wb(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    cb(f, c[mk], c[Hk], a * $l);
    f.save();
    f.translate(a * 101, a * 64.984375);
    wb(f, a * -33, a * -10, a * 66, a * 20, a * nt);
    f.restore();
    cb(f, c[2], c[1], a * 8);
    f.save();
    f.translate(a * 102, a * 63.484375);
    wb(f, a * -9, a * -27.5, W * a, a * 55, a * 15);
    f.restore();
    cb(f, c[Mt], c[1], Fs * a);
    fb(f, a * 135, a * 107.36605834960938, a * 21.095023109728988);
    cb(f, c[cu], c[ea], On * a);
    fb(f, a * 135, a * 107.36605834960938, a * 13);
    cb(f, c[Ol], c[3], a * Vr);
    fb(f, a * 135, a * 107.36605834960938, a * 6.082762530298219);
    cb(f, c[2]);
    fb(f, a * 70, a * 107.36605834960938, a * 21.095023109728988);
    cb(f, c[1], c[vt], qk * a);
    fb(f, a * 70, a * 107.36605834960938, a * 13);
    cb(f, c[1], c[Hk], a * 8);
    fb(f, a * 70, a * 107.36605834960938, a * 6.082762530298219);
    cb(f, c[xq]);
    return e;
  }
  function Od(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    fb(e, a * 54.5, a * 55, a * 48.038209575038294);
    cb(e, b[Da], b[Ug], yh * a);
    if (zl == c) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      cb(e, b[Hj]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      wb(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      cb(e, b[2], b[ru], a * 4);
      fb(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      cb(e, b[ks], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      wb(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      cb(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      cb(e, undefined, b[ll], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      cb(e, undefined, b[nr], Dt * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      cb(e, Jg, b[5], Al * a);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      cb(e, b[H]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      cb(e, b[ru], b[Al], a * nk);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      cb(e, b[qo], b[4], Zl * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      cb(e, b[Pn]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      cb(e, b[Jt], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      cb(e, b[fn]);
    }
    return d;
  }
  function Nd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    wb(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    cb(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    wb(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    cb(e, c[zl]);
    return d;
  }
  function qd(a, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 175;
    e.height = a * 106;
    f.globalAlpha = c ? 0.5 : hd;
    f.translate(Lr, a * Bi);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 67);
    f.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    f.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    f.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    f.closePath();
    cb(f, d[mj]);
    f.globalAlpha = rg;
    f.translate(0, -yh * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 75);
    f.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, dh * a, a * 27);
    f.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    f.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    f.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    f.closePath();
    cb(f, d[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 38, a * 46);
    f.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    f.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    f.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    f.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    f.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    f.closePath();
    cb(f, d[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 75);
    f.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, Ak * a, a * 27);
    f.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    f.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    f.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    f.closePath();
    cb(f, rk, d[dg], a * 4);
    f.translate(Bg, a * -vt);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 67);
    f.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    f.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    f.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    f.closePath();
    cb(f, d[10], d[kk], a * fs);
    f.translate(ps, a * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131, a * 43);
    f.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, qa * a);
    f.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    f.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    f.closePath();
    cb(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 43);
    f.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * hg);
    f.bezierCurveTo(a * 7, a * 34, Pl * a, a * 63, a * 33, a * 66);
    f.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    f.closePath();
    cb(f, d[vt]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 24, b * a);
    f.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    f.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    f.bezierCurveTo(a * 25, a * 47, m * a, a * 36, a * 23, a * Cs);
    f.closePath();
    cb(f, d[Na]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 148, a * 18);
    f.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    f.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    f.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * W);
    f.closePath();
    cb(f, d[Ss]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131, a * 43);
    f.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, tr * a);
    f.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    f.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    f.closePath();
    cb(f, undefined, d[4], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 43);
    f.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    f.bezierCurveTo(a * $n, a * 34, a * 17, a * 63, a * 33, a * 66);
    f.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    f.closePath();
    cb(f, Za, d[4], a * 4);
    f.save();
    f.translate(a * 87, a * 34.5);
    f.rotate(Da);
    wb(f, -Hr * a, a * -10.5, qh * a, a * 21, a * 10);
    f.restore();
    cb(f, d[cq], d[Mt], a * 4);
    f.save();
    f.translate(a * 87, a * 57);
    f.rotate(Kh);
    wb(f, -Ig * a, a * -23, a * ys, a * 46, a * gg);
    f.restore();
    cb(f, d[8], d[2], a * 4);
    fb(f, a * 87, a * 39, a * 4.123105625617661);
    cb(f, d[ch], d[2], a * 4);
    fb(f, a * 87, a * 60, a * 4.242640687119285);
    cb(f, d[9], d[2], ba * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 28, a * 67);
    f.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    f.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    f.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    f.closePath();
    cb(f, d[8], d[lr], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 27, a * 69);
    f.bezierCurveTo(a * ik, a * 77, vb * a, a * 74, a * 27, a * 80);
    f.closePath();
    cb(f, d[Lo], d[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 145, a * 70);
    f.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    f.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    f.closePath();
    cb(f, d[w], d[Zg], fs * a);
    fb(f, a * 50, a * 80, a * 5);
    cb(f, d[9], d[Pn], Og * a);
    fb(f, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    cb(f, d[ch], d[Gl], a * Fr);
    fb(f, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    cb(f, d[9], d[2], nj * a);
    return e;
  }
  function Hd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    cb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    cb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, yk * a);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    cb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, Ah * a, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    cb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    cb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    cb(d, b[wj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    cb(d, b[ya]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    cb(d, b[Bg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    cb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    cb(d, b[tg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    cb(d, b[mj]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    cb(d, b[bb], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * Ah, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    cb(d, b[Jb], b[Ut], a * E);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    cb(d, b[yr], b[Ut], a * Fs);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, sh * a, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    cb(d, b[3], b[bb], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    cb(d, b[3], b[3], a * Iq);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    cb(d, b[3], b[vt], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    cb(d, b[ru], b[Ks], a * aa);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    cb(d, b[3], b[yr], Gk * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    cb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    cb(d, b[Wg], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    cb(d, b[I], b[3], br * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    cb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, gh * a, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    cb(d, b[nr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    cb(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    cb(d, b[1]);
    fb(d, a * 102, a * 269, a * 11);
    cb(d, b[Ob]);
    fb(d, a * 98, a * 266, a * 5);
    cb(d, b[6]);
    fb(d, a * 168, a * 269, a * 11);
    cb(d, b[nq]);
    fb(d, a * 164, a * 266, a * 5);
    cb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    cb(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    cb(d, b[Gi]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    cb(d, b[wh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    cb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    cb(d, b[br]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    cb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    cb(d, b[zj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    cb(d, b[Gk]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    cb(d, b[_a]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    cb(d, b[aa]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    cb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    cb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    cb(d, b[On]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    cb(d, b[E]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    cb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    cb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    cb(d, b[N]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    cb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    cb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    cb(d, b[ng]);
    return c;
  }
  function Ud(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Lr, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    wb(e, a * -71.5, a * -71, a * 143, a * 143, te * a);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = Xn;
    e.translate(Hi, a * -Th);
    e.save();
    e.translate(a * 80.5, a * 78);
    wb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    cb(e, c[Ug], c[lr], a * nk);
    e.save();
    e.translate(a * 80, a * 78.5);
    wb(e, a * -17, a * -72.5, a * 34, a * 145, It * a);
    e.restore();
    cb(e, c[Hk], c[fs], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Db, a * yl);
    e.save();
    e.translate(a * 80, a * 79.5);
    wb(e, a * -73, a * -16.5, a * 145, a * 34, Ra * a);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    wb(e, a * -73, a * -16.5, a * 145, a * 34, a * yl);
    e.restore();
    cb(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(wj, a * Wb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    cb(e, c[Rq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    cb(e, c[3], c[4], Bs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    cb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    cb(e, c[vt], c[4], a * Xk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    cb(e, c[3], c[Al], a * U);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Zj, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    wb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(Da, a * -yt);
    e.save();
    e.translate(a * 78.5, a * 78);
    wb(e, a * -13.5, -wl * a, a * 27, a * 27, a * qq);
    e.restore();
    cb(e, c[Ob], c[nb], a * nk);
    return d;
  }
  function Yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : yg;
    e.translate(a * z, a * ta);
    fb(e, a * 220, a * 201, a * 170.41713528867922);
    cb(e, c[0], c[Pg], Xk * a);
    e.globalAlpha = qu;
    e.translate(a * -5, a * -5);
    fb(e, a * 220, a * 201, a * 170.41713528867922);
    cb(e, c[1], c[2], a * 6);
    fb(e, a * 220, a * 201, a * 130);
    cb(e, c[11], c[ss], a * 6);
    fb(e, a * 222, a * 199, a * 120.74767078498864);
    cb(e, Oh, c[3], a * 40);
    fb(e, a * 220, a * 200, a * 95.44108130150245);
    cb(e, undefined, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : yg;
    e.translate(a * 5, a * 5);
    fb(e, a * 63, a * 136, a * 49.193495504995376);
    cb(e, c[0], c[tt], a * 4);
    e.globalAlpha = mk;
    e.translate(a * -5, -ta * a);
    fb(e, a * 63, a * 136, a * 49.193495504995376);
    cb(e, c[8], c[Yl], a * 4);
    fb(e, a * 63, a * 137, a * 25.632011235952593);
    cb(e, c[7], c[Mt], ol * a);
    return d;
  }
  function Kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : ie;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    cb(e, c[Qr], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    cb(e, c[Wl], c[Xg], a * Yl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    cb(e, c[$i], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    cb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    cb(e, c[$i], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    cb(e, c[eg], c[4], pq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    cb(e, c[4], c[4], a * Yg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * Nk, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    cb(e, c[4], c[4], a * Zg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, Fe * a, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    cb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    cb(e, c[Dt], c[$i], Zg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    cb(e, c[Dt], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    cb(e, c[4], c[Ps], a * Jt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    cb(e, Hq, c[Al], _l * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    cb(e, undefined, c[Og], Cl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    cb(e, c[ks], c[4], a * Hj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    cb(e, undefined, c[4], a * Ck);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    cb(e, undefined, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(xt, hs);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    cb(e, c[5], c[5], nb * a);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    cb(e, c[Kh], c[Ot], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    cb(e, c[0], c[Ug], Gl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    cb(e, c[0], c[rg], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    cb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    cb(e, c[ps], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    cb(e, c[0], c[js], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(Is * a, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    cb(e, c[Eh], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    cb(e, c[Yg], c[bs], nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    cb(e, Hs, c[Ut], a * Cl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    cb(e, c[0], c[qu], Jt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    cb(e, c[0], c[js], dg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    cb(e, c[0], c[hs], jk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    cb(e, undefined, c[hd], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    cb(e, Oh, c[fl], Pn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    cb(e, c[0], c[0], Zg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    cb(e, undefined, c[rg], a * 2);
    return d;
  }
  function Vd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, Fk * a);
    if (Gt === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      fb(e, a * 44, a * 55, a * 41);
      cb(e, c[mj]);
    }
    e.globalAlpha = 1;
    fb(e, a * 44, a * 45, a * 41);
    cb(e, c[1], c[2], a * Og);
    fb(e, a * 44, a * 45, a * 31);
    cb(e, c[gl]);
    e.save();
    e.translate(a * 45, a * 45);
    wb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    cb(e, c[qg], c[ba], a * Pn);
    e.save();
    e.translate(a * 45, a * 45);
    wb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    cb(e, c[4], c[ks], a * 2);
    fb(e, a * 45, a * 29, a * 7);
    cb(e, c[Fk]);
    fb(e, a * 45, a * 61, at * a);
    cb(e, c[5]);
    fb(e, a * 28, a * 45, a * 7);
    cb(e, c[Pt]);
    fb(e, a * 62, a * 45, a * 7);
    cb(e, c[M]);
    return d;
  }
  function Zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    cb(e, c[1], c[2], a * nh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    cb(e, undefined, c[2], da * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    cb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    cb(e, c[3], c[4], Sj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    cb(e, c[5], c[Bq], a * 12);
    fb(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    cb(e, c[7]);
    fb(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    cb(e, c[Iq]);
    return d;
  }
  function Xd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    fb(d, a * 74.5, a * 85, a * 66);
    cb(d, b[zl]);
    d.globalAlpha = qu;
    fb(d, a * 75.5, a * 72.5, a * 67);
    cb(d, b[hs], b[2], fs * a);
    fb(d, a * 75.5, a * 73.5, a * 54);
    cb(d, b[gl]);
    d.globalAlpha = 0.5;
    fb(d, a * 74.5, a * 80.5, a * 39);
    cb(d, b[$i]);
    d.globalAlpha = rg;
    fb(d, a * 74.5, a * 74.5, a * 37);
    cb(d, b[5]);
    return c;
  }
  function $d(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(nk * a, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    cb(e, c[nq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    cb(e, c[ya], c[cu], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    cb(e, c[Jt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    cb(e, ut, c[1], qh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    cb(e, c[ya], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    cb(e, c[0], c[cu], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    cb(e, c[Gl], c[hd], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    cb(e, c[0], c[qu], a * oh);
    return d;
  }
  function ec(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = Yh * a;
    d.globalAlpha = 0.5;
    d.fillStyle = b[tt];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, vr * a);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * Eg);
      e.bezierCurveTo(a * 381, dg * a, a * 197, a * 4.5, a * 385, Vn * a);
      e.bezierCurveTo(a * 397, nb * a, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * nt, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * Og, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, Al * a, a * 30.5, a * 4, V * a);
      e.bezierCurveTo(sr * a, a * 18.5, a * 16, a * 18.5, a * 28, so * a);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, Qk * a, a * 5);
      e.closePath();
      cb(e, b[3], b[hl], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, nr * a, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      cb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * Mq, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * Cl, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      cb(e, b[Hk], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * qg, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * qg, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * hr, a * 213);
      e.bezierCurveTo(a * fn, a * 213, a * Pn, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      cb(e, b[3], b[vt], a * 32);
      fb(e, a * 41, a * 30, a * 14.7648230602334);
      cb(e, b[ci], b[nq], a * 32);
      fb(e, a * 369, a * 30, a * 15.556349186104045);
      cb(e, b[3], b[ru], a * 32);
      fb(e, a * 364, a * 190, a * 15.620499351813308);
      cb(e, b[3], b[Jb], a * 32);
      fb(e, a * 41, a * 186, a * 15.556349186104045);
      cb(e, b[bb], b[Ks], a * 32);
    } else if (Hj == c) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, ed * a);
      e.bezierCurveTo(a * 381, a * Zg, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, ks * a, a * 43);
      e.bezierCurveTo(ol * a, a * 30.5, a * 4, a * 30.5, a * 4, Gg * a);
      e.bezierCurveTo(a * ct, a * 18.5, a * Kb, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, $a * a, a * 18.5, a * $a, a * Qj, Eg * a);
      e.closePath();
      cb(e, b[ig], b[ci], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * Wl, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * Wl, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, Oj * a, a * 106, a * Pt, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      cb(e, b[vt], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(Vn * a, a * 110, Bq * a, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      cb(e, b[3], b[ea], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * Te, a * 163, a * Ps, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, H * a, a * 213, ba * a, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      cb(e, b[bb], b[bb], a * 32);
      fb(e, a * 41, a * 30, a * 14.7648230602334);
      cb(e, b[Hk], b[Hk], a * 32);
      fb(e, a * 369, a * 30, a * 15.556349186104045);
      cb(e, b[3], b[3], a * 32);
      fb(e, a * 364, a * 190, a * 15.620499351813308);
      cb(e, b[Ks], b[3], a * 32);
      fb(e, a * 41, a * 186, a * 15.556349186104045);
      cb(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Ag, a * 5);
    e.bezierCurveTo(a * 381, a * Mt, a * 197, a * 4.5, a * 385, ul * a);
    e.bezierCurveTo(a * 397, a * 4, a * 401, nb * a, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(Nb * a, a * 55, Mq * a, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * $i, a * 30.5, a * 4, a * 30.5, a * 4, V * a);
    e.bezierCurveTo(Ku * a, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * ug, Pt * a);
    e.closePath();
    cb(e, b[1], b[Eh], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(Eq * a, a * 58, a * pb, a * 55, Yo * a, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * ie, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * Bs, a * 71);
    e.closePath();
    cb(e, b[Jt], b[0], a * nh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, Fk * a, a * 118);
    e.bezierCurveTo(a * 4, a * 110, fh * a, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    cb(e, b[1], b[0], a * Ms);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(eg * a, a * 183);
    e.bezierCurveTo(a * hs, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * W, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    cb(e, b[Jt], b[0], a * 12);
    fb(e, a * 41, a * 30, a * 14.7648230602334);
    cb(e, b[2], b[mj], Tl * a);
    fb(e, a * 369, a * 30, a * 15.556349186104045);
    cb(e, b[2], b[0], a * 12);
    fb(e, a * 364, a * 190, a * 15.620499351813308);
    cb(e, b[Yg], b[0], nh * a);
    fb(e, a * 41, a * 186, a * 15.556349186104045);
    cb(e, b[Pn], b[tt], a * eb);
    return d;
  }
  function tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    wb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    cb(e, c[1], c[ss], hb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    cb(e, Ng, c[Xg], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    cb(e, Jg, c[Bq], a * og);
    return d;
  }
  function nc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = Zg * (b * c);
    var i = c * b * 2;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    f.translate(a, j);
    fb(f, tg, tt, c * b);
    cb(f, d);
    return e;
  }
  function oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : hd;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    Tb(e, 8, a * 60, a * 10);
    cb(e, c[In]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    Tb(e, 8, a * 60, a * 10);
    cb(e, c[1], c[2], 4);
    e.rotate(0.56);
    Tb(e, qk, a * 40, Ds * a);
    cb(e, c[3], c[4], nb);
    e.rotate(0.28);
    Tb(e, Hr, a * 28, a * 8);
    cb(e, c[Qr]);
    e.restore();
    return d;
  }
  function rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    wb(e, a * -fh, a * -66.5, a * 8, No * a, a * sk);
    e.restore();
    cb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    wb(e, a * -9.5, a * -6.5, a * 16, a * Cq, vr * a);
    e.restore();
    cb(e, c[tg]);
    e.save();
    e.translate(a * 30, hg * a);
    wb(e, a * -7.5, a * -5.5, Yr * a, dn * a, a * Ra);
    e.restore();
    cb(e, c[Rq]);
    e.save();
    e.translate(a * 30, a * 31);
    wb(e, a * -26, a * -14.5, a * 52, a * 29, nr * a);
    e.restore();
    cb(e, c[Eh]);
    e.globalAlpha = mk;
    e.save();
    e.translate(a * 36, a * 79.140625);
    wb(e, -Ro * a, a * -66.5, a * On, il * a, a * 10);
    e.restore();
    cb(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    wb(e, a * -9.5, a * -6.5, a * Vg, a * Us, a * Zk);
    e.restore();
    cb(e, c[Ut], c[4], fn * a);
    e.save();
    e.translate(a * 35, a * 12.140625);
    wb(e, a * -7.5, a * -5.5, a * 12, a * 11, gn * a);
    e.restore();
    cb(e, c[fn], c[4], fn * a);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    wb(e, a * -26, a * -14.5, a * 52, a * 29, a * Wl);
    e.restore();
    cb(e, c[Ob], c[4], a * 3);
    return d;
  }
  function ac(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, -Ts * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    cb(d, b[0]);
    return c;
  }
  function sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * Wr, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    cb(e, c[On], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    cb(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(Bg, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Ga * a, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = Ot;
    e.translate(tt, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * dk, a * 127);
    e.bezierCurveTo(vn * a, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, Il * a, a * 120, Ku * a, a * 127);
    e.closePath();
    cb(e, c[4], c[M], a * q);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    wb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    cb(e, c[1], c[2], pb * a);
    e.save();
    e.translate(a * 143.5, a * 137);
    wb(e, a * -13.5, a * -14, a * 27, a * 28, fs * a);
    e.restore();
    cb(e, c[1], c[pq], a * 5);
    return d;
  }
  function hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Ab * a, a * Uh);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    wb(e, a * -19.5, a * -8.5, a * 39, Xh * a, a * 10);
    e.restore();
    cb(e, c[Rq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    cb(e, c[0]);
    fb(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    cb(e, c[Rs]);
    e.globalAlpha = 1;
    e.translate(-Wb * a, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    wb(e, a * -19.5, a * -8.5, a * 39, a * Ej, Wb * a);
    e.restore();
    cb(e, Jg, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    cb(e, undefined, c[3], ms * a);
    fb(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    cb(e, j, c[3], a * Xk);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    wb(e, a * -19.5, a * -8.5, a * 39, Mh * a, a * 10);
    e.restore();
    cb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    cb(e, c[rg]);
    fb(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    cb(e, c[2], c[1], a * 4);
    fb(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    cb(e, c[fn], c[xt], a * 4);
    fb(e, a * 78, a * 44, a * 20);
    cb(e, c[4]);
    return d;
  }
  function lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, Hi * a);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    wb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    cb(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    wb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    cb(e, c[0], c[gu], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    wb(e, a * -26.5, -$q * a, a * 53, a * 30, a * 5);
    e.restore();
    cb(e, c[Db], c[tg], a * 4);
    e.translate(a * ed, a * tg);
    e.globalAlpha = rg;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    wb(e, a * -4.5, a * -39, a * 9, a * 78, nr * a);
    e.restore();
    cb(e, c[ie], c[2], a * hl);
    e.save();
    e.translate(a * 53, a * 36);
    wb(e, a * -29, a * -17.5, a * 58, a * 35, a * kq);
    e.restore();
    cb(e, c[3], c[eh], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    wb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    cb(e, c[Oj], c[Rg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    cb(e, c[7], c[6], I * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    cb(e, c[Ar], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    cb(e, c[9], c[Iq], a * Ut);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    cb(e, c[Bt], c[kk], yr * a);
    return d;
  }
  function gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    Tb(e, Xk, a * 43, a * Ra);
    e.restore();
    cb(e, c[0], c[hd], a * 3);
    return d;
  }
  function uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, A * a);
    e.globalAlpha = b ? 0.5 : ie;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    cb(e, c[0]);
    e.translate(a * -Vl, a * -pl);
    e.globalAlpha = za;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * eo);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    cb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * Cg);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    cb(e, mg, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    cb(e, c[4], c[Eq], On * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    cb(e, undefined, c[ta], a * He);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    cb(e, Hs, c[5], a * 8);
    return d;
  }
  function bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * os;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : cu;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    wb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    cb(e, c[Lr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    cb(e, c[Bg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    cb(e, c[Zj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    cb(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * Xa, a * 98);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    cb(e, c[Zj]);
    e.translate(a * -20, a * -wq);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    wb(e, a * -13.5, a * -249.5, a * 27, a * 499, kk * a);
    e.restore();
    cb(e, c[1], c[ss], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    cb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    cb(e, er, c[4], a * Ml);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    cb(e, c[5], c[Zl], aa * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    cb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    cb(e, c[5], c[6], a * Ig);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(Yl, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    cb(e, c[qk]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * Il, a * 98);
    e.closePath();
    cb(e, c[8], c[9], a * As);
    e.scale(Pn, 2);
    e.translate(a * -23, a * -Mg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    cb(e, c[10]);
    return d;
  }
  function vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, Zk * a);
    e.globalAlpha = b ? 0.5 : Xn;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    cb(e, c[Rs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * Dr, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    cb(e, c[Hi]);
    e.translate(gu, a * -10);
    e.globalAlpha = jh;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    cb(e, c[Eg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    cb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    cb(e, c[1], c[jk], Fk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    cb(e, mb, c[dg], a * Oj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    cb(e, c[fs], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    cb(e, c[4], c[M], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    cb(e, c[fs], c[Eg], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    cb(e, c[fs], c[5], a * ed);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * Jh, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    cb(e, c[4], c[5], tb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    cb(e, c[4], c[5], a * Eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    cb(e, c[$i], c[5], a * z);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    cb(e, c[4], c[pb], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    cb(e, c[4], c[Eg], a * ll);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    cb(e, c[eh], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    cb(e, c[Gi], c[Qr], q * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    cb(e, c[4], c[5], a * Qr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    cb(e, c[ks], c[z], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    cb(e, c[Ps], c[5], a * z);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    cb(e, c[4], c[pb], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    cb(e, c[4], c[5], a * Eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    cb(e, c[4], c[Gs], a * ta);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, Rl * a, a * 96, ys * a, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    cb(e, c[4], c[ta], a * 5);
    return d;
  }
  function dc(a, b, c) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 187;
    e.height = a * 119;
    f.globalAlpha = b ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(tg, 3);
    f.moveTo(a * 53, a * 45);
    f.bezierCurveTo(a * fn, a * 60, d * a, a * 72, a * 19, a * 81);
    f.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    f.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    f.bezierCurveTo(a * 63, a * 101, a * 92, a * No, a * 138, a * 93);
    f.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    f.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    f.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    f.closePath();
    cb(f, c[Pt]);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(0, -3);
    f.moveTo(a * 53, a * 45);
    f.bezierCurveTo(a * Hk, a * 60, a * 11, a * 72, Jj * a, a * 81);
    f.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    f.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    f.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    f.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    f.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    f.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    f.closePath();
    cb(f, c[In], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 151, a * 60);
    f.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    f.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    f.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    f.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    f.closePath();
    cb(f, c[Da], c[mk], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 37, a * 53);
    f.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    f.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    f.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    f.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    f.closePath();
    cb(f, c[2], c[vt], qg * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(Yq * a, a * 36);
    f.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    f.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    f.closePath();
    cb(f, c[0], c[1], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80, a * 43);
    f.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    cb(f, rk, c[1], a * 4);
    fb(f, a * 58, a * 50, Qr * a);
    cb(f, c[4]);
    fb(f, a * 43, a * 65, a * 5);
    cb(f, c[4]);
    fb(f, a * 58, a * 73, Eq * a);
    cb(f, c[4]);
    fb(f, a * 58, a * 50, a * 2);
    cb(f, c[5]);
    fb(f, a * 43, a * 65, Yl * a);
    cb(f, c[5]);
    fb(f, a * 58, a * 73, a * 2);
    cb(f, c[Eg]);
    return e;
  }
  function cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 185;
    d.height = a * 164;
    e.translate(Zj, 0);
    var f = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * Xg);
      e.globalAlpha = b ? 0.5 : hd;
      fb(e, a * 100.5, a * 82, a * 74.92746655359852);
      cb(e, c[Kh], c[0], a * 4);
      fb(e, a * 100.5, a * 82, a * 65.9417374971317);
      cb(e, c[Lr], c[0], Gi * a);
      e.translate(Bg, -Fk);
      e.globalAlpha = 1;
      fb(e, a * 100.5, a * 82, a * 74.92746655359852);
      cb(e, c[1], c[ci], a * 4);
      fb(e, a * 100.5, a * 82, a * 65.9417374971317);
      cb(e, c[Ug], c[Hj], a * Ps);
      fb(e, a * 100.5, a * 82, a * 35.9417374971317);
      cb(e, c[xt], c[2], Mg * a);
      fb(e, a * 100.5, a * 82, a * 15.9417374971317);
      cb(e, c[Ug], c[Yl], a * 6);
      return d;
    }(a, b, c);
    e.drawImage(f, -jn * a, a * 0);
    f = Wd(a, b, c, 0);
    e.drawImage(f, a * -83, a * -40);
    f = Wd(a, b, c, Math.PI / 1.4);
    e.drawImage(f, a * -15, a * -88);
    f = Wd(a, b, c, Math.PI / -1.4);
    e.drawImage(f, a * on, -He * a);
    return d;
  }
  function mc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * 19, a * 148, Ss * a, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    cb(d, b[0], b[wj], Pe * a);
    return c;
  }
  function Ru(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * Kh, a * 61, on * a);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, is * a, a * 89, Ar * a, a * 84);
    e.bezierCurveTo(a * rg, a * 77, a * Ps, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * vh, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, wa * a);
    e.closePath();
    cb(e, c[ya], c[1], Vn);
    return d;
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    cb(e, c[0], c[Xn], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    cb(e, c[tg], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, Cn * a, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    cb(e, Ng, c[1], ul * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    cb(e, ut, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    cb(e, undefined, c[1], Al * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    cb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    cb(e, c[Yl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    cb(e, c[2]);
    return d;
  }
  function Tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    cb(e, c[0], c[jh], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    cb(e, c[0], c[ie], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    cb(e, c[0], c[xt], a * Lh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, ta * a, a * 93.5, Do * a, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    cb(e, c[Zg], c[fn], a * N);
    return d;
  }
  function fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 3);
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    Tb(e, zg, a * 60, a * 10);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 85, a * 82);
    for (var f = In; f < J; f++) {
      e.rotate(Math.PI / Qr);
      e.save();
      e.translate(a * 65, Da);
      Tb(e, hl, a * 21, a * $i);
      cb(e, c[za], c[2], ol * a);
      e.restore();
    }
    e.save();
    e.translate(a * wj, a * 0);
    e.rotate(1);
    Tb(e, Hr, a * 60, a * It);
    cb(e, c[qo], c[Al], Pe * a);
    e.rotate(0.56);
    Tb(e, As, a * 40, kk * a);
    cb(e, c[5], c[6], a * 4);
    e.rotate(0.28);
    Tb(e, Iq, a * 28, a * 8);
    cb(e, c[7]);
    e.restore();
    return d;
  }
  function zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.translate(Kh, a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    Tb(e, 7, a * 60, a * yt);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 85, a * 82);
    for (var f = Bg; f < Ra; f++) {
      e.rotate(Math.PI / 5);
      e.save();
      e.translate(a * 65, Eh);
      Tb(e, 3, a * 21, a * 4);
      cb(e, c[Ug], c[2], a * Al);
      e.restore();
    }
    e.save();
    e.translate(a * Rs, a * tg);
    e.rotate(0.2);
    Tb(e, 9, a * 60, Ds * a);
    cb(e, c[qo], c[4], a * 4);
    e.rotate(-0.32);
    Tb(e, cl, a * 38, Wb * a);
    cb(e, c[5], c[va], a * 4);
    e.rotate(0.68);
    Tb(e, Lo, a * to, a * As);
    cb(e, c[Lh], c[Ml], Qa * a);
    e.restore();
    return d;
  }
  function yc(a, b) {
    var c = document.createElement("canvas");
    var e = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    e.globalAlpha = 0.5;
    e.translate(a * 5, Qr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 191.633544921875, a * 123.98580932617188);
    e.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    e.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    e.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    e.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    e.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    e.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    e.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    e.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    e.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    e.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    e.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    e.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    e.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    e.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    e.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    e.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    e.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    e.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    e.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    e.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    e.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    e.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    e.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    e.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    e.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    e.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    e.closePath();
    cb(e, b[0]);
    e.globalAlpha = 1;
    e.translate(-Gi * a, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 191.633544921875, a * 123.98580932617188);
    e.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    e.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    e.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    e.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    e.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    e.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    e.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    e.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    e.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    e.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    e.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    e.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    e.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    e.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    e.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    e.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    e.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    e.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    e.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    e.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    e.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    e.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    e.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    e.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    e.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    e.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    e.closePath();
    cb(e, Ul, b[qu], nh * a);
    e.translate(a * -1, a * wj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.633544921875, a * 88.98580932617188);
    e.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    e.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    e.closePath();
    cb(e, b[fs], b[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 275.633544921875, a * 281.9858093261719);
    e.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    e.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    e.closePath();
    cb(e, b[4], b[5], a * ba);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 124.633544921875, a * 291.9858093261719);
    e.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    e.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    e.closePath();
    cb(e, b[4], b[5], a * Ps);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113.633544921875, a * 80.98580932617188);
    e.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    e.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    e.closePath();
    cb(e, b[ks], b[5], Mq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 202.633544921875, a * 20.985809326171875);
    e.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    e.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    e.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    e.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    e.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    e.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    e.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    e.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    e.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    e.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    e.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    e.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    e.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    e.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    e.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    e.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    e.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    e.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    e.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    e.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    e.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    e.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    e.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    e.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    e.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    e.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    e.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    e.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    e.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    e.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    e.closePath();
    cb(e, b[dg], b[3], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203.633544921875, a * 21.985809326171875);
    e.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    e.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    e.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    e.closePath();
    cb(e, b[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175.633544921875, a * 25.985809326171875);
    e.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    e.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    e.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    e.closePath();
    cb(e, b[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.633544921875, a * 96.98580932617188);
    e.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    e.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    e.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    e.closePath();
    cb(e, b[hl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 351.633544921875, a * 99.98580932617188);
    e.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    e.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    e.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    e.closePath();
    cb(e, b[Hk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 350.633544921875, a * 302.9858093261719);
    e.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    e.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    e.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    e.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    e.closePath();
    cb(e, b[Jb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95.633544921875, a * 224.98580932617188);
    e.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    e.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    e.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    e.closePath();
    cb(e, b[nq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 195.633544921875, a * 253.98580932617188);
    e.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    e.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    e.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    e.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    e.closePath();
    cb(e, b[Ks]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 195.633544921875, a * 251.98580932617188);
    e.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    e.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    e.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    e.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    e.closePath();
    cb(e, b[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 316, a * 186.8020782470703);
    e.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    e.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    e.closePath();
    cb(e, b[Cl], b[7], fs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 340, a * 157.8020782470703);
    e.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    e.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    e.closePath();
    cb(e, b[6], b[Rr], Fr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349, a * 136.8020782470703);
    e.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    e.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    e.closePath();
    cb(e, b[Qa], b[7], a * Mq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 278.75, a * 246.4375);
    e.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    e.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    e.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    e.closePath();
    cb(e, b[va], b[Lh], nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.75, a * 277.4375);
    e.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    e.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    e.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    e.closePath();
    cb(e, b[6], b[7], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 217.75, a * 257.4375);
    e.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    e.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    e.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    e.closePath();
    cb(e, b[Cl], b[Ar], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 211.75, a * 289.4375);
    e.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    e.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    e.closePath();
    cb(e, b[6], b[7], a * Mq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171.75, a * 256.4375);
    e.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    e.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    e.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    e.closePath();
    cb(e, b[Na], b[ia], eg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175.75, a * 289.9375);
    e.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    e.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    e.closePath();
    cb(e, b[6], b[Ys], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205.75, a * 314.4375);
    e.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    e.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    e.closePath();
    cb(e, b[6], b[7], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 186.75, a * 313.4375);
    e.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    e.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    e.closePath();
    cb(e, b[U], b[ur], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.75, a * 244.4375);
    e.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    e.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    e.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    e.closePath();
    cb(e, b[Rg], b[N], ol * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.75, a * 182.4375);
    e.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    e.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    e.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    e.closePath();
    cb(e, b[6], b[7], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44.75, a * 152.4375);
    e.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    e.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    e.closePath();
    cb(e, b[Rg], b[7], a * fs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31.75, a * 130.4375);
    e.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    e.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    e.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    e.closePath();
    cb(e, b[6], b[7], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69.75, a * 274.4375);
    e.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    e.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    e.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    e.closePath();
    cb(e, b[6], b[7], Ps * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 165.75, a * 95.4375);
    e.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    e.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    e.closePath();
    cb(e, b[6], b[7], Pe * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.75, a * 94.4375);
    e.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    e.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    e.closePath();
    cb(e, b[6], b[bh], nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 211.75, a * 68.4375);
    e.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    e.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    e.closePath();
    cb(e, b[Cl], b[ia], a * Vn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169.75, a * 71.4375);
    e.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    e.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    e.closePath();
    cb(e, b[6], b[7], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.75, a * 160.4375);
    e.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    e.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    e.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    e.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    e.closePath();
    cb(e, b[8], b[rr], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    e.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    e.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    e.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    e.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    e.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    e.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    e.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    e.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    e.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    e.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    e.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    e.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    e.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    e.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    e.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    e.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    e.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    e.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    e.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    e.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    e.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    e.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    e.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    e.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    e.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    e.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    e.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    e.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    e.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    e.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    e.closePath();
    cb(e, b[kk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.1999969482422, a * 173.8125);
    e.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    e.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    e.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    e.closePath();
    cb(e, b[rs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    e.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    e.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    e.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    e.closePath();
    cb(e, b[11]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    e.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    e.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    e.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    e.closePath();
    cb(e, b[11]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    e.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    e.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    e.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    e.closePath();
    cb(e, b[11]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204.1999969482422, a * 201.8125);
    e.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    e.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    e.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    e.closePath();
    cb(e, b[d]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    e.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    e.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    e.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    e.closePath();
    cb(e, b[Bt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    e.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    e.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    e.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    e.closePath();
    cb(e, b[11]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    e.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    e.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    e.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    e.closePath();
    cb(e, b[rs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.1999969482422, a * 196.8125);
    e.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    e.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    e.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    e.closePath();
    cb(e, b[qt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    e.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    e.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    e.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    e.closePath();
    cb(e, b[rs]);
    fb(e, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    cb(e, b[12]);
    fb(e, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    cb(e, b[13]);
    fb(e, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    cb(e, b[F]);
    fb(e, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    cb(e, b[13]);
    return c;
  }
  function wc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    cb(d, b[0]);
    return c;
  }
  function Pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    cb(e, c[Te], c[bs], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    cb(e, c[3], c[4], Hr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    cb(e, c[gl], c[ba], a * wh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    cb(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    cb(e, c[cu], c[Mt], Fs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    cb(e, c[1], c[2], $l * a);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    cb(e, c[7], c[He], E * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    cb(e, c[Rr], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    cb(e, undefined, c[8], Bi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    cb(e, mg, c[8], a * br);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    cb(e, c[ng], c[yh], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    cb(e, c[3], c[4], a * Fs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    cb(e, c[Tr], c[4], zj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    cb(e, c[Ob], c[4], _a * a);
    return d;
  }
  function Ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    cb(e, c[tt]);
    e.globalAlpha = Xn;
    e.translate(0, a * -ea);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    wb(e, a * -66.5, a * -65.5, a * 133, a * 131, wa * a);
    e.restore();
    cb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    wb(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    cb(e, c[ru], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    cb(e, c[4], c[Wl], Qr * a);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    wb(e, -di * a, a * -Wh, a * 28, a * 28, a * 4);
    e.restore();
    cb(e, c[1], c[Pn], a * q);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(Hi);
    wb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    cb(e, c[Ug], c[Pn], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, sh * a, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    cb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    cb(e, c[wh], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    cb(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * $t, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * og, a * 122, a * 18, a * 129);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(Lr, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * Xl, a * 117, a * Yr, a * 109, a * $q, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    cb(e, c[4], c[ed], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    wb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    cb(e, c[1], c[2], a * z);
    e.save();
    e.translate(a * 143.5, a * 137);
    wb(e, a * -13.5, a * -14, a * 27, a * 28, a * Pe);
    e.restore();
    cb(e, c[1], c[xj], a * 5);
    return d;
  }
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    wb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    cb(e, c[hd], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    cb(e, c[yr], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    cb(e, undefined, c[5], a * qs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    cb(e, mg, c[qq], a * eo);
    return d;
  }
  function xc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    cb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    cb(d, b[ya]);
    return c;
  }
  function Jc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    cb(d, b[0]);
    d.globalAlpha = Ol;
    d.translate(a * -15, a * -og);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    cb(d, b[xt], b[Yl], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    cb(d, b[ru], b[Tr], a * Hj);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    cb(d, b[3], b[3], a * xq);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    cb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    cb(d, b[3], b[vt], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    cb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    cb(d, b[gl], b[ru], a * ih);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    cb(d, undefined, b[lr], ks * a);
    return c;
  }
  function Mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(Da, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * Rg, a * 41, a * 6, a * 33, a * oq, a * 27);
    e.bezierCurveTo(a * 27, a * Xk, a * 28, Bq * a, a * 37, a * Ro);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * ed, a * 67, Lg * a);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    cb(e, c[Zj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    cb(e, c[Rq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, yh * a, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    cb(e, c[gu]);
    e.translate(mj, -sk * a);
    e.globalAlpha = yg;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * Cl, a * 41, a * Bs, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * Rg, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * kq, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    cb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * ar, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    cb(e, c[Oq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, Bi * a, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    cb(e, c[js]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, Vn * a, a * 57, a * 4, a * 64, wa * a);
    e.closePath();
    cb(e, c[lr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    cb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(Eq * a, a * 98, xg * a, a * 89, a * 26, a * 70);
    e.closePath();
    cb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    cb(e, c[ss]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    cb(e, c[2]);
    return d;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 496;
    d.height = a * 520;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, Ab * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.000030517578125, a * 256.67613983154297);
    e.bezierCurveTo(a * 1.000030517578125, a * 332.67613983154297, a * 23.000030517578125, a * 404.67613983154297, a * 95.00003051757812, a * 463.67613983154297);
    e.bezierCurveTo(a * 128.00003051757812, a * 491.67613983154297, a * 165.00003051757812, a * 507.67613983154297, a * 194.00003051757812, a * 512.676139831543);
    e.bezierCurveTo(a * 280.0000305175781, a * 517.676139831543, a * 291.0000305175781, a * 516.676139831543, a * 342.0000305175781, a * 497.67613983154297);
    e.bezierCurveTo(a * 425.0000305175781, a * 454.67613983154297, a * 469.0000305175781, a * 392.67613983154297, a * 468.0000305175781, a * 300.67613983154297);
    e.bezierCurveTo(a * 408.5000305175781, a * 365.17613983154297, a * 408.5000305175781, a * 365.17613983154297, a * 349.0000305175781, a * 429.67613983154297);
    e.bezierCurveTo(a * 256.0000305175781, a * 473.67613983154297, a * 167.00003051757812, a * 459.67613983154297, a * 78.00003051757812, a * 384.67613983154297);
    e.closePath();
    cb(e, c[tg]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    fb(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    cb(e, c[Uh], Hs, a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, gn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.00003051757812, a * 263.4034118652344);
    e.bezierCurveTo(a * 109.00003051757812, a * 160.40341186523438, a * 185.00003051757812, a * 128.40341186523438, a * 222.00003051757812, a * 124.40341186523438);
    e.bezierCurveTo(a * 277.0000305175781, a * 116.40341186523438, a * 339.0000305175781, a * 134.40341186523438, a * 379.0000305175781, a * 195.40341186523438);
    e.bezierCurveTo(a * 409.0000305175781, a * 242.40341186523438, a * 416.0000305175781, a * 256.4034118652344, a * 428.0000305175781, a * 304.4034118652344);
    e.bezierCurveTo(a * 457.0000305175781, a * 203.40341186523438, a * 449.0000305175781, a * 183.40341186523438, a * 438.0000305175781, a * 162.40341186523438);
    e.bezierCurveTo(a * 381.0000305175781, a * 73.40341186523438, a * 360.0000305175781, a * 66.40341186523438, a * 257.0000305175781, a * 46.403411865234375);
    e.bezierCurveTo(a * 191.00003051757812, a * 45.403411865234375, a * 142.00003051757812, a * 65.40341186523438, a * 101.00003051757812, a * 115.40341186523438);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = 1;
    var f = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = Ot;
      d.translate(0, a * -It);
      fb(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      cb(d, b[Ug], b[Nb], Nh * a);
      d.globalCompositeOperation = "destination-out";
      fb(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      cb(d, b[zl], b[Db], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(a, c);
    e.drawImage(f, Kh, Da);
    e.translate(0, a * -te);
    fb(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    cb(e, undefined, c[2], a * Ms);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    cb(e, c[0], c[0], a * Uk);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    cb(e, c[qo], c[2], a * Ms);
    e.globalAlpha = b ? 0.5 : Te;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    cb(e, c[wj], c[Bg], Zr * a);
    e.globalAlpha = 1;
    e.translate(Zj, a * -Xg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    cb(e, c[4], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : za;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    cb(e, c[0], c[0], a * Es);
    e.globalAlpha = 1;
    e.translate(Pg, a * -Fk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    cb(e, c[Pe], c[2], eb * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    cb(e, c[Db], c[0], a * gr);
    e.globalAlpha = 1;
    e.translate(Rq, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    cb(e, c[ul], c[2], F * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Lr, ll * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    cb(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    cb(e, c[nb], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Eh, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    cb(e, c[ya], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(ya, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    cb(e, c[Jb], c[Jt], a * 12);
    e.globalAlpha = b ? 0.5 : hs;
    e.translate(Rq, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    cb(e, c[0], c[0], a * 12);
    e.globalAlpha = cu;
    e.translate(0, a * -z);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    cb(e, c[4], c[xq], a * 12);
    e.globalAlpha = b ? 0.5 : hs;
    e.translate(Lr, a * Qr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    cb(e, c[0], c[Rs], $a * a);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    cb(e, c[4], c[lr], a * Tl);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(tt, Wl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    cb(e, c[0], c[Zj], a * wg);
    e.globalAlpha = 1;
    e.translate(0, -Wl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    cb(e, c[qg], c[pq], a * Zr);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Rq, a * Eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    cb(e, c[0], c[Pg], eb * a);
    e.globalAlpha = 1;
    e.translate(ya, -Wl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    cb(e, c[4], c[ih], a * F);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, Wl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    cb(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(Hi, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    cb(e, c[vt], c[2], Zr * a);
    e.globalAlpha = b ? 0.5 : Te;
    e.translate(gu, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    cb(e, c[Eh], c[0], a * Es);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    cb(e, c[4], c[xj], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Bg, tb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    cb(e, c[0], c[Pg], a * Sj);
    e.globalAlpha = 1;
    e.translate(Bg, a * -M);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    cb(e, c[4], c[2], da * a);
    e.globalAlpha = b ? 0.5 : Xn;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    cb(e, c[Lr], c[0], La * a);
    e.globalAlpha = 1;
    e.translate(mj, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    cb(e, c[ks], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    cb(e, c[0], c[0], a * 12);
    e.globalAlpha = Xn;
    e.translate(In, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    cb(e, c[qo], c[2], Sj * a);
    e.globalAlpha = b ? 0.5 : rg;
    e.translate(Db, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    cb(e, c[0], c[0], a * F);
    e.globalAlpha = 1;
    e.translate(0, -pb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    cb(e, c[Og], c[Yl], a * da);
    return d;
  }
  function Dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : yg;
    e.translate(Kh, a * Ab);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    wb(e, a * -67, a * -16.5, a * 134, a * 33, Pt * a);
    e.restore();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    cb(e, c[tt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    cb(e, c[Db]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    wb(e, a * -73, a * -20.5, a * 146, a * 41, a * pb);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(ps, -yl * a);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    wb(e, a * -67, a * -16.5, a * 134, a * 33, a * ll);
    e.restore();
    cb(e, c[hs], c[Zh], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    cb(e, c[1], c[Yl], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    cb(e, c[1], c[lr], a * Gi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    cb(e, c[mk], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    wb(e, a * -73, a * -20.5, a * 146, a * 41, a * Oj);
    e.restore();
    cb(e, c[1], c[Yg], Og * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    cb(e, c[Ob]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    cb(e, c[I]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    cb(e, c[Hk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    cb(e, c[Ut]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    cb(e, c[Hk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    cb(e, c[xj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    cb(e, c[ih]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    cb(e, c[Hj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    cb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    cb(e, c[Yg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    cb(e, c[2]);
    return d;
  }
  function Ic(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 170;
    e.height = a * 200;
    f.translate(a * 5, a * Ga);
    if (d == 1) {
      f.translate(Lr, a * -Uh);
      fb(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
      cb(f, c[1], c[ta], a * qr);
      fb(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
      cb(f, c[lb], c[Qr], a * qr);
      f.save();
      f.translate(a * 77.00003051757812, a * 31.267044067382812);
      wb(f, -Bq * a, a * -12.5, Uk * a, a * 25, Zk * a);
      f.restore();
      cb(f, c[Oq], c[5], a * qr);
      f.save();
      f.translate(a * 77.00003051757812, a * 13.267044067382812);
      wb(f, -_h * a, a * -10.5, a * 30, a * 21, a * 10);
      f.restore();
      cb(f, c[hs], c[5], A * a);
    }
    fb(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
    cb(f, c[js], c[2], a * wk);
    fb(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
    cb(f, c[1], c[2], a * Rr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 18.000030517578125, a * 105.85795593261719);
    f.bezierCurveTo(a * 134.00003051757812, a * 104.85795593261719, a * 77.00003051757812, a * 104.85795593261719, a * 136.00003051757812, a * 103.85795593261719);
    f.closePath();
    cb(f, c[1], c[xj], a * qk);
    fb(f, a * 77.00003051757812, a * 104.6761474609375, a * 32.55764119219941);
    cb(f, c[Ot], c[ss], a * Gk);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 112.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 62.03977966308594);
    f.closePath();
    cb(f, c[3], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 48.03977966308594);
    f.bezierCurveTo(a * 82.00003051757812, a * 55.53977966308594, a * 82.00003051757812, a * 55.53977966308594, a * 86.00003051757812, a * 63.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 63.03977966308594, a * 78.00003051757812, a * 63.03977966308594, a * 70.00003051757812, a * 63.03977966308594);
    f.closePath();
    cb(f, c[ci], c[Yl], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80.00003051757812, a * 111.6761474609375);
    f.bezierCurveTo(a * 95.00003051757812, a * 97.1761474609375, a * 95.00003051757812, a * 97.1761474609375, a * 110.00003051757812, a * 82.6761474609375);
    f.closePath();
    cb(f, c[ci], c[H], On * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107.00003051757812, a * 76.6761474609375);
    f.bezierCurveTo(a * 111.50003051757812, a * 82.6761474609375, a * 111.50003051757812, a * 82.6761474609375, a * 116.00003051757812, a * 88.6761474609375);
    f.bezierCurveTo(a * 118.50003051757812, a * 81.6761474609375, a * 118.50003051757812, a * 81.6761474609375, a * 121.00003051757812, a * 74.6761474609375);
    f.closePath();
    cb(f, c[qo], c[dg], Ps * a);
    fb(f, a * 77.00003051757812, a * 105.03977966308594, a * 15.556349186104045);
    cb(f, c[3], c[Nb], a * Mq);
    f.save();
    f.translate(a * 77.00003051757812, a * 31.267044067382812);
    f.rotate(0);
    wb(f, -Bs * a, a * -12.5, a * eb, a * 25, a * 10);
    f.restore();
    cb(f, c[1], c[2], Aq * a);
    f.save();
    f.translate(a * 77.00003051757812, a * 13.267044067382812);
    f.rotate(0);
    wb(f, a * -15, a * -10.5, a * 30, a * 21, a * 10);
    f.restore();
    cb(f, c[lb], c[xj], Lh * a);
    return e;
  }
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    fb(e, a * 69, a * 64, a * 48.16637831516918);
    cb(e, c[1]);
    e.globalAlpha = 0.7;
    fb(e, a * 69, a * 64, a * 38.23105625617661);
    cb(e, c[2]);
    e.globalAlpha = 0.7;
    fb(e, a * 69, a * 64, a * 32.01562118716424);
    cb(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    cb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    cb(e, c[bb]);
    return d;
  }
  function Sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, Mq * a);
    if (ps === Gt) {
      e.globalAlpha = b ? 0.5 : rg;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      Tb(e, $o, a * 41, Zk * a);
      e.restore();
      cb(e, c[Kh]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    Tb(e, cl, a * 41, yl * a);
    cb(e, c[rg], c[Pn], a * 4);
    e.rotate(-0.32);
    Tb(e, Lo, a * 32, sk * a);
    cb(e, c[ci], c[4], a * 4);
    e.rotate(0.68);
    Tb(e, 9, a * 23, a * 8);
    cb(e, c[5], c[6], Bq * a);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(Pg);
    wb(e, a * -ug, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    cb(e, c[$i], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    wb(e, a * -26, -Os * a, a * 52, a * 18, a * 30);
    e.restore();
    cb(e, c[4], c[4], a * jk);
    fb(e, a * 45, a * 29, a * 7);
    cb(e, c[z]);
    fb(e, a * 45, a * 61, a * bh);
    cb(e, c[5]);
    fb(e, a * 28, a * 45, a * Ar);
    cb(e, c[5]);
    fb(e, a * 62, a * 45, a * 7);
    cb(e, c[5]);
    return d;
  }
  function Qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    cb(e, c[Kh], c[Oq], a * gr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    cb(e, j, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    cb(e, c[2], c[Ut], da * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    cb(e, c[Yl], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    cb(e, c[lr], c[yr], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    cb(e, c[2], c[3], a * 12);
    return d;
  }
  function _c(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    wb(d, -zg * a, a * -20, a * Wh, a * 39, xs * a);
    d.restore();
    cb(d, b[0]);
    d.globalAlpha = hd;
    d.save();
    d.translate(a * 37, a * 94);
    wb(d, a * -7, a * -20, a * po, a * 37, Il * a);
    d.restore();
    cb(d, b[xq]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    wb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    cb(d, b[ps], b[0], a * Dr);
    d.globalAlpha = ie;
    d.save();
    d.translate(a * 131, a * 94);
    wb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    cb(d, b[bs], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    wb(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    cb(d, b[3], b[1], a * Hr);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    wb(d, a * -30.5, a * -58.5, a * 61, a * 117, qr * a);
    d.restore();
    cb(d, b[3], b[ul], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    wb(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    cb(d, b[3], b[4], a * ji);
    d.save();
    d.translate(a * 130.5, a * 94);
    wb(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    cb(d, b[3], b[Zh], a * Ml);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    wb(d, a * -83, a * -gr, a * 160, a * 24, a * In);
    d.restore();
    cb(d, b[Pg]);
    d.globalAlpha = hd;
    d.save();
    d.translate(a * 133, a * 92);
    wb(d, a * -83, -Xi * a, a * 160, a * 24, a * 0);
    d.restore();
    cb(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    wb(d, a * -5, a * -18.5, a * vr, a * 37, a * A);
    d.restore();
    cb(d, b[Eh]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    wb(d, a * -5, a * -18.5, a * 10, a * 37, a * oh);
    d.restore();
    cb(d, b[pq]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    wb(d, a * -22.5, a * -6.5, a * 45, D * a, Ok * a);
    d.restore();
    cb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    wb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    cb(d, b[Mt]);
    return c;
  }
  function Fc(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    wb(e, Ra * b, b * Yr, b * 110, b * 90, b * 10);
    cb(e, c[0]);
    wb(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    cb(e, c[1], c[2], b * 4);
    var h = Pb(-Math.PI / Xg, Fu(b * 0.5, Gj, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(h, b * 12, b * Pj);
    h = Pb(Math.PI / 4, rc(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(h, b * 36, b * 16);
    return d;
  }
  function Rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : jh;
    e.translate(a * J, Fk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    cb(e, c[0], c[Eh], oq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    cb(e, c[In], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    cb(e, c[Hi], c[0], a * Yr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    cb(e, c[Bg], c[In], Es * a);
    e.globalAlpha = 1;
    e.translate(-kk * a, a * -Wl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    cb(e, c[hd], c[jk], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    cb(e, c[Jb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    cb(e, c[Mq]);
    fb(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    cb(e, c[Gs]);
    fb(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    cb(e, c[Ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    cb(e, c[7], c[Ml], a * gr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    cb(e, c[ng], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    cb(e, c[7], c[8], a * Sj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    cb(e, cn, c[9], a * Ro);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    cb(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    cb(e, lj, c[se], Cl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    cb(e, undefined, c[9], a * eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    cb(e, mb, c[9], a * hl);
    return d;
  }
  function Gc(a, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 81;
    e.height = a * 77;
    f.translate(Db, a * It);
    f.scale(0.2, 0.2);
    f.translate(mj, a * -30);
    if (d == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 36.5, a * 278.0625);
      f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      f.closePath();
      cb(f, c[0], c[3], a * 50);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36.5, a * 278.0625);
    f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    f.closePath();
    cb(f, c[0], c[1], a * Jj);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 214.5, a * 124.0625);
    f.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    f.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    f.closePath();
    cb(f, c[0], c[qu], bn * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157.5, a * 145.0625);
    f.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    f.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    f.closePath();
    cb(f, c[tg], c[1], a * qb);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 103.5, a * 169.0625);
    f.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    f.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    f.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    f.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    f.closePath();
    cb(f, c[jk], c[1], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 194.5, a * 313.0625);
    f.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    f.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    f.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    f.closePath();
    cb(f, c[Ug]);
    f.scale(3, ig);
    f.translate(15, a * 10);
    if (mk == d) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 4, a * 32);
      f.bezierCurveTo(a * 19, a * 25, b * a, a * 25, a * 34, a * 18);
      f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      f.bezierCurveTo(a * 59.5, a * 20, a * 59.5, Xa * a, a * 70, ra * a);
      cb(f, T, c[yr], a * 28);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 56, a * Cl);
      f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      f.closePath();
      cb(f, c[3], c[ig], a * 28);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(Mq * a, a * 32);
    f.bezierCurveTo(Be * a, a * 25, a * ab, a * 25, a * 34, a * 18);
    f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    f.bezierCurveTo(a * 59.5, a * xs, a * 59.5, Xa * a, a * 70, a * 11);
    cb(f, undefined, c[1], a * Sg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * Ss);
    f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    f.closePath();
    cb(f, c[qu], c[ie], a * 17);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 4, a * 32);
    f.bezierCurveTo(a * ab, a * 25, ha * a, a * 25, a * 34, a * Gg);
    f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    f.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, xb * a);
    cb(f, undefined, c[Hj], a * wa);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 6);
    f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * Hj);
    f.closePath();
    cb(f, c[Mt], c[2], a * 10);
    return e;
  }
  function jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : qu;
    e.translate(0, a * jn);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    wb(e, a * -4, a * -76.5, yh * a, a * 163, a * 10);
    e.restore();
    cb(e, c[0]);
    e.translate(Da, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, gg * a);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * p, a * 38.5, a * 16, a * 38.5, a * ra, a * 41);
    e.closePath();
    cb(e, c[Lr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * Gg, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, ur * a, a * 36);
    e.closePath();
    cb(e, c[Zj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(lh * a, a * 171.5, ah * a, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * $t, a * 160.5, a * 15, a * 149);
    e.closePath();
    cb(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, Ro * a);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    cb(e, c[wj]);
    e.translate(0, -pl * a);
    e.globalAlpha = 1;
    e.translate(gu, a * 10);
    e.translate(-tb * a, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    wb(e, -ba * a, a * -76.5, a * 8, a * 163, a * Ds);
    e.restore();
    cb(e, c[Ot], c[2], a * 4);
    e.translate(0, Ra * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(sr * a, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    cb(e, c[3], c[ol], eh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * Ol);
    e.bezierCurveTo(a * 28, a * io, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    cb(e, c[5], c[Bs], a * 4);
    e.translate(tt, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * qs, a * 160.5, a * zi, a * 149);
    e.closePath();
    cb(e, c[hd], c[pq], a * qg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, Qa * a);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    cb(e, c[8]);
    return d;
  }
  function Lc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    cb(d, b[0]);
    return c;
  }
  function Wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    wb(e, a * -og, a * -216.5, a * 30, a * 433, Ab * a);
    e.restore();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    cb(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    cb(e, c[Da]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    cb(e, c[0]);
    e.translate(a * -20, a * -pl);
    e.globalAlpha = qu;
    e.save();
    e.translate(a * 45, a * 384.5);
    wb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    cb(e, c[Te], c[Pn], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * pg, a * 607, a * 27, a * 573);
    e.closePath();
    cb(e, c[3], c[Dt], a * aa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    cb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * hr, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    cb(e, c[fn], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    cb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    cb(e, c[Zl], c[ia], a * On);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    cb(e, c[8]);
    return d;
  }
  function Oc(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 198;
    e.height = a * 147;
    f.globalAlpha = b ? 0.5 : Oq;
    f.translate(0, a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 76);
    f.bezierCurveTo(a * 50, a * 82, a * 50, a * 82, a * 56, a * 88);
    f.bezierCurveTo(a * 59, a * 82, a * 59, a * 82, a * 62, a * 76);
    f.bezierCurveTo(a * 59, a * 71, a * 59, a * 71, a * 56, a * 66);
    f.bezierCurveTo(a * 59, a * 69, a * 59, a * 69, a * 62, a * 72);
    f.bezierCurveTo(a * 80, a * 48, a * 102, a * 50, a * 120, a * 62);
    f.bezierCurveTo(a * 127, a * 58, a * 127, a * 58, a * 134, a * 54);
    f.bezierCurveTo(a * 129, a * 60, a * 129, a * 60, a * 124, a * 66);
    f.bezierCurveTo(a * 129, a * 73, a * 129, a * 73, a * 134, a * 80);
    f.bezierCurveTo(a * 140, a * 74, a * 140, a * 74, a * 146, a * 68);
    f.bezierCurveTo(a * 142, a * 76, a * 142, a * 76, a * 138, a * 84);
    f.bezierCurveTo(a * 144, a * 90, a * 142, a * 90, a * 144, a * 90);
    f.bezierCurveTo(a * 136, a * 97, a * 136, a * 97, a * 128, a * 104);
    f.bezierCurveTo(a * 154, a * 110, a * 164, a * 90, a * 160, a * 80);
    f.bezierCurveTo(a * 138, a * 22, a * 148, a * 51, a * 136, a * 22);
    f.bezierCurveTo(a * 97, a * 24, a * 97, a * 24, a * 58, a * 26);
    f.bezierCurveTo(a * 47, a * 54, a * 36, a * 80, a * 36, a * 82);
    f.bezierCurveTo(a * 40, a * 108, a * 54, a * 104, a * 62, a * 104);
    f.bezierCurveTo(a * 46, a * 92, a * 54, a * 97, a * 46, a * 90);
    f.closePath();
    cb(f, c[Lr]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, a * 100);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, a * 100, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, a * Nn);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    cb(f, c[0]);
    f.globalAlpha = Ug;
    f.translate(mj, a * -6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, a * Nn);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, a * 100, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, a * Ah);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    cb(f, c[mk], c[2], a * nb);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 98);
    f.bezierCurveTo(a * 96.5, a * 98, a * 96.5, a * 98, a * 144, a * 98);
    f.bezierCurveTo(a * 136.5, a * 102, a * 136.5, a * 102, a * 129, a * 106);
    f.bezierCurveTo(a * 103, a * 105.5, a * 103, a * 105.5, a * 77, a * 105);
    f.bezierCurveTo(a * 65, a * 105, a * 65, a * 105, a * 53, a * 105);
    f.closePath();
    cb(f, c[1]);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 54, a * 98);
    f.bezierCurveTo(a * 97, a * 98, a * 97, a * 98, a * 140, a * 98);
    f.bezierCurveTo(a * 134, a * 101, a * 134, a * 101, a * 128, a * 104);
    f.bezierCurveTo(a * 92, a * 104, a * 92, a * 104, a * 56, a * 104);
    f.closePath();
    cb(f, c[0]);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 47);
    f.bezierCurveTo(a * 124.5, a * 43.5, a * 124.5, a * 43.5, a * 131, a * 40);
    f.bezierCurveTo(a * 128, a * 46, a * 128, a * 46, a * 125, a * 52);
    f.bezierCurveTo(a * 131, a * 57, a * 135, a * 64, a * 139, a * 73);
    f.bezierCurveTo(a * 142.5, a * 69.5, a * 142.5, a * 69.5, a * 146, a * 66);
    f.bezierCurveTo(a * 143.5, a * 72.5, a * 143.5, a * 72.5, a * 141, a * 79);
    f.bezierCurveTo(a * 142, a * 91, a * 141, a * 94, a * 132, a * 98);
    f.bezierCurveTo(a * 117, a * 102, a * 126, a * 108, a * 142, a * 102);
    f.bezierCurveTo(a * 159, a * 98, a * 164, a * 80, a * 162, a * 47);
    f.bezierCurveTo(a * 160, Qs * a, a * 150, a * fh, a * 117, a * 4);
    f.bezierCurveTo(a * 44, gu * a, a * 35, a * 20, a * 33, a * 37);
    f.bezierCurveTo(a * 29, a * 69, a * 33, a * 88, a * 44, a * 96);
    f.bezierCurveTo(a * 64, a * 107, a * 70, a * 102, a * 54, a * 93);
    f.bezierCurveTo(a * 49, a * 88, a * 50, a * 82, a * 53, a * 77);
    f.bezierCurveTo(a * 51.5, a * 71, a * 51.5, a * 71, a * 50, a * 65);
    f.bezierCurveTo(a * 53, a * 68.5, a * 53, a * 68.5, a * 56, a * 72);
    f.bezierCurveTo(a * 59, a * 67.5, a * 59, a * 67.5, a * 62, a * 63);
    f.bezierCurveTo(a * 60.5, a * 59.5, a * 60.5, a * 59.5, a * 59, a * 56);
    f.bezierCurveTo(a * 62, a * 57, a * 62, a * 57, a * 65, a * 58);
    f.bezierCurveTo(a * 78, a * 35, a * 103, a * 36, a * 117, a * 47);
    f.closePath();
    cb(f, c[lb], c[pq], a * ji);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 62, a * 21);
    f.bezierCurveTo(a * 63, a * 34, a * 64, a * 37, a * 66, a * 40);
    f.bezierCurveTo(a * 54, a * 49, a * 53, a * 51, a * 48, a * 58);
    f.bezierCurveTo(a * 44, a * 51, a * 42, a * 43, a * 40, a * 36);
    f.bezierCurveTo(a * 47, a * 28, a * 52, a * 25, a * 61, a * 21);
    f.closePath();
    cb(f, c[4]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60, a * 29);
    f.bezierCurveTo(a * 62, a * 25, a * 65, a * 24, a * 70, a * 23);
    cb(f, undefined, c[Ob], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 61, a * 37);
    f.bezierCurveTo(a * 63, a * 32, a * 66, a * 32, a * 71, a * 32);
    cb(f, undefined, c[3], a * Dt);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 31);
    f.bezierCurveTo(a * 50, a * 26, a * 50, a * 25, a * 51, a * 23);
    cb(f, undefined, c[nq], a * ol);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 35);
    f.bezierCurveTo(a * 44, a * 31, a * 43, a * 29, a * 45, a * 26);
    cb(f, Ng, c[Ks], Ps * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 44);
    f.bezierCurveTo(a * 57, a * 48, a * 57, a * 50, a * 60, a * 52);
    cb(f, Hq, c[vt], a * Fr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 48);
    f.bezierCurveTo(a * 52, a * 52, a * 52, a * 54, a * 55, a * 57);
    cb(f, undefined, c[yr], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 41);
    f.bezierCurveTo(a * 41, a * 42, a * 39, a * 45, a * 38, a * 48);
    cb(f, undefined, c[fn], Gi * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 48, a * 48);
    f.bezierCurveTo(a * 42, a * 51, a * 42, a * 53, a * 40, a * 55);
    cb(f, undefined, c[3], Vn * a);
    if (d == 0) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 99, a * 101);
      f.bezierCurveTo(a * 118.6666259765625, a * 104.33331298828125, a * 124.6666259765625, a * 116.33331298828125, a * 112.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 104.6666259765625, a * 112.33331298828125, a * 100.6666259765625, a * 105.33331298828125, a * 99.6666259765625, a * 101.33331298828125);
      cb(f, undefined, c[kq], va * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 97.6666259765625, a * 101.33331298828125);
      f.bezierCurveTo(a * 81.6666259765625, a * 106.33331298828125, a * 79.6666259765625, a * 114.33331298828125, a * 89.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 95.6666259765625, a * 111.33331298828125, a * 95.6666259765625, a * 109.33331298828125, a * 98.6666259765625, a * 102.33331298828125);
      cb(f, lj, c[5], a * fh);
    } else {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 120, a * 106.39999389648438, a * 118, a * 107.39999389648438, a * 120, a * 111.39999389648438);
      cb(f, Hs, c[ta], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 90, a * 103.39999389648438, a * 89, a * 106.39999389648438, a * 87, a * 112.39999389648438);
      cb(f, lj, c[Fk], a * 6);
      fb(f, a * 86, a * 114.39999389648438, a * 4.5);
      cb(f, c[yg], c[5], a * 6);
      fb(f, a * 121, a * 114.39999389648438, a * 4.5);
      cb(f, c[ie], c[nr], a * Bq);
    }
    return e;
  }
  function Nc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 170;
    var i = b * 172;
    var a = g / lr;
    var j = i / 2;
    e.width = g;
    e.height = i;
    f.translate(a, j + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    fb(f, Bg, 0, b * 60);
    cb(f, d[Bg]);
    f.globalAlpha = 1;
    f.translate(ya, b * -7);
    f.save();
    for (var h = 0; J > h; h++) {
      f.rotate(Math.PI / ll);
      f.save();
      f.translate(b * 65, ya);
      Tb(f, 3, A * b, Ps * b);
      cb(f, d[Te], d[2], b * 4);
      f.restore();
    }
    f.restore();
    fb(f, Zj, 0, b * 60);
    cb(f, d[bb], d[4], b * qg);
    fb(f, In, tt, b * 40);
    cb(f, d[Xg]);
    fb(f, 0, Da, b * 25);
    cb(f, d[ji], d[7], b * $l);
    return e;
  }
  function qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : Te;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Tb(e, 6, a * 146, a * 30);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = yg;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Tb(e, 6, a * 146, a * 30);
    e.restore();
    cb(e, c[1], c[pq], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Tb(e, 6, a * 105, a * 30);
    e.restore();
    cb(e, c[fn], c[3], Fs * a);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(Bg);
    Tb(e, Ro, a * 66, a * 30);
    e.restore();
    cb(e, c[nj], c[jk], a * E);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Tb(e, 6, a * 31, a * 30);
    e.restore();
    cb(e, c[Xg], c[Ya], a * Bi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    cb(e, undefined, c[Mt], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, _j * a);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    cb(e, undefined, c[2], Iq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * sa);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    cb(e, Ng, c[ih], a * He);
    return d;
  }
  function Hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, _o * a, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, vn * a, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      cb(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * Qg, a * 60, Qg * a, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    cb(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * $q, a * 325, Ik * a, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    cb(e, b[2], b[Hk], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, br * a, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, Is * a, a * 188, a * 308);
    e.closePath();
    cb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    cb(e, b[Tr], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    cb(e, b[Mt], b[bb], gr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    cb(e, b[3], b[3], Ka * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    cb(e, b[2], b[3], Ql * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    cb(e, b[2], b[Ut], a * $a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    cb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    cb(e, b[2], b[3], Es * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    cb(e, b[H], b[3], a * Yr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    cb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    cb(e, b[3], b[Jb], a * 12);
    return d;
  }
  function Uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(z * a, q * a);
    fb(e, a * 220, a * 201, a * 170.41713528867922);
    cb(e, c[0], c[tt], a * Qa);
    e.globalAlpha = js;
    e.translate(-Uh * a, -tb * a);
    fb(e, a * 220, a * 201, a * 170.41713528867922);
    cb(e, c[fl], c[H], a * 6);
    fb(e, a * 220, a * 201, a * 130);
    cb(e, c[ra], c[pq], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    cb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    cb(e, c[5], c[6], a * Og);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    cb(e, c[tb], c[Bs], a * $i);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    cb(e, c[5], c[6], nb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    cb(e, c[M], c[Rg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    cb(e, c[Eg], c[_l], nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    cb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    cb(e, c[Wb], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    cb(e, c[Ra], c[10], nb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    cb(e, c[Zk], c[jn], a * Fr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    cb(e, undefined, c[Ro], a * nk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    cb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    cb(e, wr, c[ms], ms * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    cb(e, Jo, c[6], Ya * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    cb(e, undefined, c[6], ji * a);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    cb(e, Jg, c[Xk], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    cb(e, mg, c[Cl], Ro * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    cb(e, Hs, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    cb(e, j, c[6], qq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * eq, a * 216, a * 307);
    e.closePath();
    cb(e, undefined, c[Ya], a * U);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    cb(e, mg, c[6], a * Ro);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    cb(e, T, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    cb(e, Jg, c[6], a * Bq);
    fb(e, a * 222, a * 199, a * 120.74767078498864);
    cb(e, undefined, c[3], a * 40);
    fb(e, a * 220, a * 200, a * 95.44108130150245);
    cb(e, undefined, c[2], a * 15);
    fb(e, a * 220, a * 201, a * 85);
    cb(e, undefined, c[4], wa * a);
    e.globalAlpha = 0.5;
    fb(e, a * 220, a * 201, a * 82);
    cb(e, c[Lo]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(M * a, a * 5);
    fb(e, a * 63, a * 136, a * 49.193495504995376);
    cb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -nr, -ll * a);
    fb(e, a * 63, a * 136, a * 49.193495504995376);
    cb(e, c[8], c[2], a * ks);
    fb(e, a * 63, a * 137, a * 25.632011235952593);
    cb(e, c[Aq], c[Yg], a * Fr);
    return d;
  }
  function Yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, ps);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    cb(e, c[Kh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -za, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(ie * a, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    cb(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    wb(e, -Ar * a, -nb * a, a * 14, a * 8, a * Ab);
    e.restore();
    cb(e, c[Zj]);
    e.translate(a * 0, mj);
    e.globalAlpha = 1;
    e.translate(Kg * a, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    cb(e, c[qo], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -ie, Kh);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    cb(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * Ol, tg);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    cb(e, c[hs], c[2], fn * a);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(zl);
    wb(e, a * -Tg, a * -4, a * 14, a * zj, a * 10);
    e.restore();
    cb(e, c[Oq], c[2], a * 3);
    return d;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 120;
    d.height = a * 100;
    wb(e, a * 10, a * 10, a * 95, a * 80, a * 10);
    cb(e, b[2]);
    wb(e, a * 10, Uh * a, a * 95, a * 80, jn * a);
    cb(e, b[Tr], b[$i], a * 4);
    if (Eh == c) {
      var f = ud(a * 0.75, b, 0);
      e.drawImage(f, a * 22, a * 18);
    } else if (c == ie) {
      f = ud(a * 0.75, b, 1);
      e.drawImage(f, a * 22, a * 18);
    }
    return d;
  }
  function Vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : fl;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    Tb(e, ug, a * 60, a * 10);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    Tb(e, cl, a * 60, a * Ab);
    cb(e, c[1], c[ih], qg);
    e.rotate(-0.32);
    Tb(e, 9, a * 38, a * Ds);
    cb(e, c[3], c[$i], 4);
    e.rotate(0.68);
    Tb(e, 9, wq * a, Iq * a);
    cb(e, c[Xg], c[_l], 6);
    e.restore();
    return d;
  }
  function mc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = Nn * a;
    d.scale(0.5, 0.5);
    d.translate(10, zi);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, Tl * a, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    cb(d, b[Hi]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * gn, a * 83, ol * a, a * 87);
    cb(d, mg, b[gu], a * Kg);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, kq * a);
    d.bezierCurveTo(so * a, a * 30, a * Ka, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * ms);
    d.closePath();
    cb(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, Bo * a, a * 83, nb * a, a * 87);
    cb(d, Hq, b[xq], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    cb(d, undefined, b[Gl], Ml * a);
    return c;
  }
  function Zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : qu;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    Tb(e, Tg, a * 60, a * 10);
    e.restore();
    cb(e, c[In]);
    e.globalAlpha = hs;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    Tb(e, Ni, a * 60, Ds * a);
    cb(e, c[hd], c[bs], 4);
    e.rotate(0.64);
    Tb(e, Ar, a * 40, a * wa);
    cb(e, c[3], c[4], 4);
    e.rotate(0.12);
    Tb(e, Ni, a * 23, a * 5);
    e.restore();
    cb(e, c[5]);
    return d;
  }
  function Xc(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    fb(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    cb(d, Sl, c[2], nb * a);
    fb(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    cb(d, Jo, c[ie], a * 4);
    fb(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    cb(d, rk, c[1], qg * a);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(Kh);
    wb(d, a * -21.5, a * -19, a * 43, a * 38, Th * a);
    d.restore();
    cb(d, c[Hj], c[js], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    Tb(d, Tr, a * 8.06225774829855, a * 0);
    d.restore();
    cb(d, c[I]);
    fb(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    cb(d, c[Ks]);
    return e;
  }
  function $c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : fl;
    e.translate(a * 5, a * Eq);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    wb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    cb(e, c[Xn], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    cb(e, c[0], c[0], a * Bs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    cb(e, c[Lr], c[0], a * Qa);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    wb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    cb(e, c[0], c[Da], U * a);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    wb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    cb(e, c[In], c[0], a * Bq);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    wb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    cb(e, c[Bg], c[ps], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    wb(e, a * -x, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    cb(e, c[Eh], c[0], Ya * a);
    fb(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    cb(e, c[Hi], c[zl], ji * a);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    cb(e, c[3], c[4], Xk * a);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    wb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    cb(e, c[hd], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    cb(e, c[1], c[2], a * ji);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    wb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    cb(e, c[5], c[ba], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    wb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    cb(e, c[Jb], c[Dt], a * Ro);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    wb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    cb(e, c[6], c[Dt], va * a);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    wb(e, -sa * a, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    cb(e, c[ql], c[E], a * Cl);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    wb(e, a * -_j, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    cb(e, c[Aq], c[As], a * 6);
    e.globalAlpha = ie;
    e.save();
    fb(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    cb(e, c[fn], c[Ps], a * 6);
    e.restore();
    return d;
  }
  function em(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * aa);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * On, a * 50);
    d.bezierCurveTo(a * 15, a * Fo, a * 49, Zl * a, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, Ig * a, a * 50);
    d.closePath();
    cb(d, b[Rs]);
    d.translate(0, a * -br);
    d.globalAlpha = Te;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(br * a, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * Ya, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * vt, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(Yl * a, a * 127, a * fn, a * 87, aa * a, a * 50);
    d.closePath();
    cb(d, b[jh], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    cb(d, b[1], b[Zh], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    cb(d, b[Ug], b[Nb], Dt * a);
    fb(d, a * 51, a * 91, a * 9);
    cb(d, b[Tr]);
    fb(d, a * 95, a * 91, a * rb);
    cb(d, b[Tr]);
    fb(d, a * 91, a * 89, a * Vn);
    cb(d, b[4]);
    fb(d, a * 47, a * 89, eh * a);
    cb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    cb(d, b[tb]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    cb(d, b[ms]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    cb(d, undefined, b[6], Yl * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(Jj * a, a * 58);
    d.bezierCurveTo(jn * a, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    cb(d, b[Na]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * Ak, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    cb(d, b[ms]);
    return c;
  }
  function im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : Ot;
    e.translate(0, a * Wl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * Xl, a * 84.640625, R * a, a * 86.640625, Aq * a, a * 78.640625);
    e.bezierCurveTo(Ck * a, a * 69.640625, zi * a, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    cb(e, c[Lr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * Fs, a * 83.640625, a * Ds, a * 84.640625);
    e.closePath();
    cb(e, c[Db]);
    e.globalAlpha = 1;
    e.translate(0, -Oj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Iq * a, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * Vr, a * 73.640625);
    e.closePath();
    cb(e, c[1], c[Yl], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    cb(e, c[hl], c[xq], $i * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    cb(e, Jg, c[H], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(Ah * a, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    cb(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, cl * a, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * Xk, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    cb(e, c[3], c[4], a * nb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * zj, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, wa * a, a * 84.640625);
    e.closePath();
    cb(e, c[Jb], c[Pe], a * 4);
    return d;
  }
  function tm(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      cb(d, b[0]);
    } else if (c == ie) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      cb(d, b[Zj]);
    } else if (c == xq) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      cb(d, b[0]);
    }
    return e;
  }
  function nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    wb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    cb(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    wb(e, a * -57.5, a * -54.5, a * 115, a * 109, bl * a);
    e.restore();
    cb(e, undefined, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    wb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    cb(e, c[Pg]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    wb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    cb(e, undefined, c[xt], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    cb(e, Ng, c[1], a * 10);
    return d;
  }
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : ie;
    e.translate(a * 5, Gs * a);
    e.save();
    wb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    cb(e, c[gu]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -Yq);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    cb(e, c[Zj]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    wb(e, a * 33, a * 53, Ra * a, a * 98, a * 10);
    cb(e, c[za], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -gh);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    cb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(Pg * a, a * rg);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    cb(e, c[Uh]);
    e.restore();
    return d;
  }
  function rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * V, a * -zj);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * Ah, a * 93, a * Ah, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    cb(e, c[Ps], c[M], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, Dt * a);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, sa * a, a * 93, sa * a, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    cb(e, c[4], c[Eq], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * eh);
    e.save();
    e.translate(a * Nn, a * 73.06874084472656);
    e.rotate(Rq);
    wb(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    cb(e, c[Xn], c[2], a * 4);
    e.save();
    e.translate(os * a, a * 71.36874389648438);
    e.rotate(Pg);
    wb(e, a * -60.5, -Vq * a, a * 121, a * 30, a * 20);
    e.restore();
    cb(e, c[3], c[jk], $i * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * Ah, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * dh, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    cb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    cb(e, c[dg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, Ak * a, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    cb(e, c[eh], c[Xg], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    cb(e, c[3], c[H], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    cb(e, c[3], c[2], ol * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    cb(e, c[3], c[2], ol * a);
    e.scale(0.5, 0.5);
    e.translate(Ak * a, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    cb(e, c[Na], c[lr], a * 4);
    return d;
  }
  function am() {
    new Date().getTime();
    function a(a) {
      var b = 0;
      var c = ya;
      for (var d = 0; a.length > d; d++) {
        var e = a.charAt(d);
        if (e !== "_" && d !== Eq) {
          if (e === "1") {
            b += Math.pow(2, c);
          }
          c++;
        }
      }
      return b;
    }
    ᐃⵠᐃᐃⲆⲆᐃᐃᐃ();
    ΔΔ[Xr.ⲆⵠⵠⲆⵠᐃⲆ] = [Ⲇⵠ.ⲆΔΔΔΔⵠΔ, Ⲇⵠ.ⵠⲆΔⲆⵠΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ] = [];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_010_000")] = [Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ΔⵠⵠᐃΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_010_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_010_000")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_011_000")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_010_000")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_011_010")] = [Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_011_011")] = [Ⲇⵠ.ⵠᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_110_000")] = [Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⵠⵠᐃΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_110_010")] = [Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ΔⲆΔⵠΔᐃⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_110_110")] = [Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ΔᐃⲆⵠⲆΔᐃ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ΔⲆΔⵠΔᐃⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_111_000")] = [Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_111_111")] = [Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_010_000")] = [Ⲇⵠ.ΔⵠⵠᐃΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_010_010")] = [Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_011_000")] = [Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_000")] = [Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")] = [Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_011_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_011_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_111_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_111_000")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_111_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_111_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a(Ⲇ[nl])] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_111_111")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_111_110")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("000_111_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("011_011_000")] = [Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("011_011_010")] = [Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("011_011_011")] = [Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("011_111_000")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("011_011_010")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("011_111_010")] = [Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("011_111_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("011_111_010")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("011_111_110")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("011_111_010")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("011_111_111")] = [Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("110_110_000")] = [Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ᐃⵠΔⲆᐃⵠⲆ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("110_110_010")] = [Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("110_110_110")] = [Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a(Ⲇ[kk])] = [Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ᐃⵠΔⲆᐃⵠⲆ, Ⲇⵠ.ᐃᐃΔᐃⲆΔⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a(Ⲇ[Vh])] = [Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ᐃᐃΔᐃⲆΔⵠ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("110_111_111")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a(Ⲇ[Xi])];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("110_111_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a(Ⲇ[gr])];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("110_111_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a(Ⲇ[eb])];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("111_111_110")] = [Ⲇⵠ.ᐃⲆΔⵠΔ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃᐃΔᐃⲆΔⵠ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("111_111_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("111_111_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("111_111_000")] = [Ⲇⵠ.ᐃⵠΔⲆᐃⵠⲆ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃᐃΔᐃⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("111_111_111")] = [Ⲇⵠ.ᐃᐃΔΔⲆⵠⵠ, Ⲇⵠ.ᐃⵠⵠᐃᐃ, Ⲇⵠ.ⲆⵠⵠⵠΔ, Ⲇⵠ.ⵠᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ⵠΔⵠᐃⲆ, Ⲇⵠ.ⵠΔᐃⵠΔ, Ⲇⵠ.ⵠᐃⲆⵠΔ, Ⲇⵠ.ⲆⵠⵠⵠᐃⲆᐃ, Ⲇⵠ.ⵠΔᐃᐃⵠⵠᐃ, Ⲇⵠ.ⵠᐃᐃⵠⲆ, Ⲇⵠ.ΔΔΔⲆⲆⵠⲆ, Ⲇⵠ.ᐃⲆᐃⵠⵠΔΔ, Ⲇⵠ.ᐃⵠⵠᐃⲆᐃⵠ, Ⲇⵠ.ΔⲆⲆᐃᐃ, Ⲇⵠ.ⲆⵠᐃΔⵠⲆΔ, Ⲇⵠ.ᐃΔⵠⲆΔΔΔ, Ⲇⵠ.ΔⵠⵠᐃΔ, Ⲇⵠ.ⲆΔᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃⵠᐃ, Ⲇⵠ.ΔᐃⲆⵠᐃⲆᐃ, Ⲇⵠ.ⲆⲆΔΔⵠΔⵠ, Ⲇⵠ.ⵠⵠⵠΔⵠ, Ⲇⵠ.ⵠΔΔᐃΔ, Ⲇⵠ.ᐃⲆΔⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("111_111_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ⲆᐃΔ][a("111_111_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_010_000")] = [Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_010_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_010_000")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_011_000")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_010_000")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_011_010")] = [Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_011_011")] = [Ⲇⵠ.ⵠΔΔᐃⲆⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_110_000")] = [Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠⲆᐃⵠⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_110_010")] = [Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ᐃⲆⲆⵠⲆΔΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_110_110")] = [Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠⵠⵠⲆⲆΔⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ᐃⲆⲆⵠⲆΔΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_111_000")] = [Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_111_111")] = [Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⵠΔΔᐃⲆⲆⲆ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_010_000")] = [Ⲇⵠ.ⵠⲆᐃⵠⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_010_010")] = [Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_011_000")] = [Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ᐃⵠᐃⲆⲆ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_000")] = [Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")] = [Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_011_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_011_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_111_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_111_000")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_111_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_111_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a(Ⲇ[zs])] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_111_111")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_111_110")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("000_111_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("010_110_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("011_011_000")] = [Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ᐃⵠᐃⲆⲆ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("011_011_010")] = [Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("011_011_011")] = [Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⵠΔΔᐃⲆⲆⲆ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("011_111_000")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("011_011_010")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("011_111_010")] = [Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("011_111_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("011_111_010")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("011_111_110")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("011_111_010")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("011_111_111")] = [Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃⲆⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("110_110_000")] = [Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆᐃΔᐃᐃΔΔ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("110_110_010")] = [Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("110_110_110")] = [Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a(Ⲇ[yl])] = [Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⲆᐃΔᐃᐃΔΔ, Ⲇⵠ.ⵠⲆⵠⲆⲆⵠᐃ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("110_111_110")] = [Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ⵠⲆⵠⲆⲆⵠᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("110_111_111")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("110_111_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("110_111_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("110_111_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("110_111_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("110_111_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("111_111_110")] = [Ⲇⵠ.ⲆⲆⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠⲆⵠⲆⲆⵠᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ΔⲆΔΔⲆΔᐃ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("111_111_011")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("111_111_110")];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("111_111_000")] = [Ⲇⵠ.ⲆᐃΔᐃᐃΔΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ⵠⲆⵠⲆⲆⵠᐃ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("111_111_111")] = [Ⲇⵠ.ΔⲆΔΔⲆΔᐃ, Ⲇⵠ.ΔᐃⲆⲆᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆ, Ⲇⵠ.ⵠΔΔᐃⲆⲆⲆ, Ⲇⵠ.ⵠᐃⵠⵠᐃ, Ⲇⵠ.ⲆⲆⵠΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⵠ, Ⲇⵠ.ⵠΔⲆⵠⲆⵠⲆ, Ⲇⵠ.ⵠΔⲆΔⵠⲆΔ, Ⲇⵠ.ⵠⲆⵠⲆᐃ, Ⲇⵠ.ᐃⲆᐃⵠⲆⵠᐃ, Ⲇⵠ.ΔΔᐃΔⵠⵠΔ, Ⲇⵠ.ⵠᐃΔᐃⵠΔⵠ, Ⲇⵠ.ⲆⵠⵠᐃⲆ, Ⲇⵠ.ΔΔⵠⵠᐃᐃⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔⲆ, Ⲇⵠ.ⵠⲆᐃⵠⵠ, Ⲇⵠ.ᐃᐃⵠΔⲆ, Ⲇⵠ.ⲆᐃᐃΔⵠΔΔ, Ⲇⵠ.ᐃΔⲆⲆΔᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⲆᐃᐃ, Ⲇⵠ.ⲆᐃⲆΔⵠ, Ⲇⵠ.ᐃⵠᐃⲆⲆ, Ⲇⵠ.ⲆⲆⲆΔⵠ];
    ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("111_111_010")] = ΔΔ[Xr.ᐃⲆᐃⲆ][Xr.ΔⲆⵠ][a("111_111_110")];
    ΔΔ[Xr.ΔΔⲆⲆ] = [];
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_010_000")] = Ⲇⵠ.ⲆⲆⲆⲆᐃⵠᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_010_010")] = Ⲇⵠ.ⲆⲆⲆⵠⲆⵠⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_011_000")] = Ⲇⵠ.ᐃⵠᐃΔΔⵠΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_011_010")] = Ⲇⵠ.ᐃⲆⵠⲆⲆⲆⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_011_011")] = Ⲇⵠ.ⲆΔⲆⵠⲆⲆᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_110_000")] = Ⲇⵠ.ⲆⵠⲆᐃⵠⲆᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_110_010")] = Ⲇⵠ.ᐃΔΔᐃⲆⵠⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_110_110")] = Ⲇⵠ.ΔΔΔⲆⵠᐃΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_111_000")] = Ⲇⵠ.ᐃⲆᐃⲆⵠᐃⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_111_010")] = Ⲇⵠ.ⵠⵠⲆⵠⲆⲆⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_111_011")] = Ⲇⵠ.ⲆⲆᐃΔᐃᐃΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_111_110")] = Ⲇⵠ.ᐃⵠⵠⵠⲆⲆⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("000_111_111")] = Ⲇⵠ.ⵠⵠᐃΔᐃⲆΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_010_000")] = Ⲇⵠ.ΔᐃΔⲆⲆᐃⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_010_010")] = Ⲇⵠ.ΔⲆⵠⵠⵠⲆⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_011_000")] = Ⲇⵠ.ΔⲆΔⲆᐃᐃᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_011_010")] = Ⲇⵠ.ⲆΔΔΔⵠΔᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_011_011")] = Ⲇⵠ.ᐃⵠⲆΔⵠⵠᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_110_000")] = Ⲇⵠ.ᐃΔⲆⵠⵠᐃⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_110_010")] = Ⲇⵠ.ⵠⵠΔⲆΔⲆᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_110_110")] = Ⲇⵠ.ΔΔⵠⵠᐃⵠᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_111_000")] = Ⲇⵠ.ΔᐃᐃΔΔⵠΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_111_010")] = Ⲇⵠ.ⵠⵠΔΔΔⲆⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_111_011")] = Ⲇⵠ.ⵠⵠⵠⲆⲆⵠᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_111_110")] = Ⲇⵠ.ᐃΔⲆΔⲆΔⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("010_111_111")] = Ⲇⵠ.ⲆⲆⲆᐃΔⵠⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("011_011_000")] = Ⲇⵠ.ⵠⵠᐃⲆΔⲆⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("011_011_010")] = Ⲇⵠ.ΔΔΔⵠΔᐃⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("011_011_011")] = Ⲇⵠ.ᐃⲆΔⲆⵠᐃⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("011_111_000")] = Ⲇⵠ.ᐃᐃᐃΔⵠᐃᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("011_111_010")] = Ⲇⵠ.ΔⲆᐃᐃΔΔⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("011_111_011")] = Ⲇⵠ.ΔⵠᐃΔⵠΔⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("011_111_110")] = Ⲇⵠ.ᐃⲆᐃΔⲆⵠΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("011_111_111")] = Ⲇⵠ.ᐃⲆⵠⲆⲆΔᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("110_110_000")] = Ⲇⵠ.ⲆⵠⵠⲆᐃⵠᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("110_110_010")] = Ⲇⵠ.ᐃΔⵠⲆⵠⵠⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("110_110_110")] = Ⲇⵠ.ⵠΔⵠᐃΔⲆΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("110_111_000")] = Ⲇⵠ.ΔΔⲆᐃⲆᐃΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("110_111_010")] = Ⲇⵠ.ΔΔⵠᐃΔⵠⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("110_111_011")] = Ⲇⵠ.ⵠᐃⲆᐃΔΔⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a(Ⲇ[$a])] = Ⲇⵠ.ⵠⵠⵠⲆᐃⲆⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("110_111_111")] = Ⲇⵠ.ⲆΔⵠⵠᐃΔᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("111_111_011")] = Ⲇⵠ.ⲆᐃΔⵠΔⲆⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("111_111_110")] = Ⲇⵠ.ⲆⲆᐃᐃⲆⲆᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("111_111_011")] = Ⲇⵠ.ⲆᐃΔⵠΔⲆⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("111_111_000")] = Ⲇⵠ.ΔᐃⵠⲆᐃⵠⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("111_111_111")] = Ⲇⵠ.ΔᐃⵠⵠΔΔΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ⲆᐃΔ][a("111_111_010")] = Ⲇⵠ.ᐃⵠᐃⵠΔᐃΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_010_000")] = Ⲇⵠ.ᐃⲆⲆᐃᐃΔΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_010_010")] = Ⲇⵠ.ᐃⲆᐃΔΔⲆⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_011_000")] = Ⲇⵠ.ΔⵠⲆⵠⲆΔΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_011_010")] = Ⲇⵠ.ΔΔⵠⵠᐃⵠΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_011_011")] = Ⲇⵠ.ⲆⲆΔⵠᐃⵠⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_110_000")] = Ⲇⵠ.ᐃⲆⲆᐃⲆᐃⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_110_010")] = Ⲇⵠ.ⲆᐃⵠΔᐃΔᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_110_110")] = Ⲇⵠ.ΔⵠⵠΔΔⲆⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_111_000")] = Ⲇⵠ.ΔⲆⲆⲆᐃⵠⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_111_010")] = Ⲇⵠ.ΔⲆⵠⲆⲆⵠΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_111_011")] = Ⲇⵠ.ᐃΔⲆΔⲆᐃⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_111_110")] = Ⲇⵠ.ΔΔᐃⲆⲆⵠⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("000_111_111")] = Ⲇⵠ.ⵠⵠΔⲆⲆⲆⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_010_000")] = Ⲇⵠ.ᐃⵠΔⲆᐃΔᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_010_010")] = Ⲇⵠ.ᐃⲆⵠΔΔᐃⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_011_000")] = Ⲇⵠ.ⲆⲆⲆᐃᐃⲆᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_011_010")] = Ⲇⵠ.ᐃⵠᐃΔᐃΔⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_011_011")] = Ⲇⵠ.ⲆᐃⵠᐃⲆᐃΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_110_000")] = Ⲇⵠ.ⵠΔⵠⲆⵠⲆᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_110_010")] = Ⲇⵠ.ⵠⵠⵠⵠⵠⵠⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_110_110")] = Ⲇⵠ.ᐃᐃⲆΔⵠⵠⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_111_000")] = Ⲇⵠ.ᐃᐃⲆⲆⵠⲆᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_111_010")] = Ⲇⵠ.ⵠᐃⲆⵠⵠⵠᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_111_011")] = Ⲇⵠ.ᐃⲆᐃΔⲆΔΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a(Ⲇ[zs])] = Ⲇⵠ.ΔⲆⲆᐃⵠᐃⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("010_111_111")] = Ⲇⵠ.ⵠᐃⲆⲆᐃⵠΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("011_011_000")] = Ⲇⵠ.ΔⲆⲆΔⲆᐃⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("011_011_010")] = Ⲇⵠ.ᐃᐃⵠⵠᐃⲆᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("011_011_011")] = Ⲇⵠ.ⵠⲆᐃᐃⲆⲆⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("011_111_000")] = Ⲇⵠ.ΔⵠᐃᐃᐃⲆⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("011_111_010")] = Ⲇⵠ.ⲆⲆᐃᐃΔΔⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("011_111_011")] = Ⲇⵠ.ΔⵠⲆⲆⵠᐃⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("011_111_110")] = Ⲇⵠ.ⵠΔΔⵠᐃⲆⵠ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("011_111_111")] = Ⲇⵠ.ⵠⵠⵠᐃᐃⵠᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("110_110_000")] = Ⲇⵠ.ΔⵠΔᐃⵠΔⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("110_110_010")] = Ⲇⵠ.ⵠⵠⵠⵠⵠⲆΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("110_110_110")] = Ⲇⵠ.ᐃᐃⲆⲆⲆⲆⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("110_111_000")] = Ⲇⵠ.ⲆⲆᐃⲆΔⲆᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("110_111_010")] = Ⲇⵠ.ⲆⲆⵠΔᐃΔⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("110_111_011")] = Ⲇⵠ.ΔΔᐃⲆᐃⵠᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a(Ⲇ[da])] = Ⲇⵠ.ⵠᐃⲆᐃⵠᐃⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("110_111_111")] = Ⲇⵠ.ⲆⲆᐃΔⵠⲆΔ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("111_111_011")] = Ⲇⵠ.ᐃⲆΔΔⵠΔⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("111_111_110")] = Ⲇⵠ.ΔⵠⵠⲆⲆᐃᐃ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("111_111_011")] = Ⲇⵠ.ᐃⲆΔΔⵠΔⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("111_111_000")] = Ⲇⵠ.ⲆⵠⲆΔᐃⵠⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("111_111_111")] = Ⲇⵠ.ⵠᐃΔᐃᐃⲆⲆ;
    ΔΔ[Xr.ΔΔⲆⲆ][Xr.ΔⲆⵠ][a("111_111_010")] = Ⲇⵠ.ᐃⲆΔᐃⲆⵠᐃ;
    ΔΔ[Xr.ⲆⵠΔⵠΔ] = [];
    ΔΔ[Xr.ⲆⵠΔⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⲆΔΔⲆⲆᐃ;
    ΔΔ[Xr.ⲆⵠΔⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆΔΔⲆᐃⵠ;
    ΔΔ[Xr.ⲆᐃΔⵠᐃ] = [];
    ΔΔ[Xr.ⲆᐃΔⵠᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃⲆⵠᐃᐃⵠ;
    ΔΔ[Xr.ⲆᐃΔⵠᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.Ⲇⵠᐃᐃⵠⵠⵠ;
    ΔΔ[Xr.ⲆⵠᐃᐃⲆⲆⲆ] = [];
    ΔΔ[Xr.ⲆⵠᐃᐃⲆⲆⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃΔⲆⵠⵠⵠ;
    ΔΔ[Xr.ⲆⵠᐃᐃⲆⲆⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⵠⵠⲆⲆⲆ;
    ΔΔ[Xr.ⲆᐃΔΔⵠ] = [];
    ΔΔ[Xr.ⲆᐃΔΔⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⲆΔⵠⲆⵠ;
    ΔΔ[Xr.ⲆᐃΔΔⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃⲆⵠⲆⵠⵠ;
    ΔΔ[Xr.ᐃᐃᐃⲆⲆⲆΔ] = [];
    ΔΔ[Xr.ᐃᐃᐃⲆⲆⲆΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠΔᐃⵠᐃ;
    ΔΔ[Xr.ᐃᐃᐃⲆⲆⲆΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆᐃᐃⲆᐃᐃ;
    ΔΔ[Xr.ⵠⲆⲆᐃΔᐃᐃ] = [];
    ΔΔ[Xr.ⵠⲆⲆᐃΔᐃᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔᐃⲆᐃᐃⵠ;
    ΔΔ[Xr.ⵠⲆⲆᐃΔᐃᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆΔⵠᐃΔ;
    ΔΔ[Xr.ⲆᐃⵠΔⲆ] = [];
    ΔΔ[Xr.ⲆᐃⵠΔⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆΔⲆΔΔᐃ;
    ΔΔ[Xr.ⲆᐃⵠΔⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⵠⲆⵠⲆᐃ;
    ΔΔ[Xr.ⵠᐃⵠᐃⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠᐃⵠᐃⲆᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃᐃⵠⲆΔᐃ;
    ΔΔ[Xr.ⵠᐃⵠᐃⲆᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃΔᐃⵠⲆᐃ;
    ΔΔ[Xr.ᐃᐃΔΔᐃᐃΔ] = [];
    ΔΔ[Xr.ᐃᐃΔΔᐃᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃⵠⵠΔᐃ;
    ΔΔ[Xr.ᐃᐃΔΔᐃᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃΔⵠⲆⲆⲆ;
    ΔΔ[Xr.ΔⵠⲆΔΔᐃᐃ] = [];
    ΔΔ[Xr.ΔⵠⲆΔΔᐃᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃᐃⵠᐃⲆⵠ;
    ΔΔ[Xr.ΔⵠⲆΔΔᐃᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃΔᐃΔⲆⲆ;
    ΔΔ[Xr.ⵠⵠⵠΔⲆ] = [];
    ΔΔ[Xr.ⵠⵠⵠΔⲆ][Xr.ⲆᐃΔ] = [Ⲇⵠ.ΔᐃΔⵠΔᐃᐃ];
    ΔΔ[Xr.ⵠⵠⵠΔⲆ][Xr.ΔⲆⵠ] = [Ⲇⵠ.ⲆⲆⵠⲆΔᐃⲆ];
    ΔΔ[Xr.ᐃⵠⵠⲆᐃ] = [];
    ΔΔ[Xr.ᐃⵠⵠⲆᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⵠⲆⲆΔΔ;
    ΔΔ[Xr.ᐃⵠⵠⲆᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⲆⵠΔⵠⵠ;
    ΔΔ[Xr.ⵠⲆᐃᐃⲆ] = [];
    ΔΔ[Xr.ⵠⲆᐃᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠΔⲆⲆⵠᐃ;
    ΔΔ[Xr.ⵠⲆᐃᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆΔⵠⲆⲆ;
    ΔΔ[Xr.Ⲇᐃⵠⵠⵠ] = [];
    ΔΔ[Xr.Ⲇᐃⵠⵠⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⲆΔᐃⵠⵠ;
    ΔΔ[Xr.Ⲇᐃⵠⵠⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃᐃⵠⲆᐃ;
    ΔΔ[Xr.ᐃⲆΔᐃⲆ] = [];
    ΔΔ[Xr.ᐃⲆΔᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⲆΔⲆᐃΔ;
    ΔΔ[Xr.ᐃⲆΔᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⲆⵠΔΔᐃ;
    ΔΔ[Xr.ΔⵠⵠΔΔ] = [];
    ΔΔ[Xr.ΔⵠⵠΔΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃⲆᐃᐃⲆⵠ;
    ΔΔ[Xr.ΔⵠⵠΔΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔⵠⵠᐃᐃⲆ;
    ΔΔ[Xr.ΔΔⲆᐃⲆ] = [];
    ΔΔ[Xr.ΔΔⲆᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⵠᐃⵠⵠⲆ;
    ΔΔ[Xr.ΔΔⲆᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆⲆⵠⵠⵠ;
    ΔΔ[Xr.ΔⵠΔⲆΔ] = [];
    ΔΔ[Xr.ΔⵠΔⲆΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆⲆΔᐃᐃᐃ;
    ΔΔ[Xr.ΔⵠΔⲆΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⵠⵠⵠⵠⵠ;
    ΔΔ[Xr.ⵠΔⲆⵠᐃ] = [];
    ΔΔ[Xr.ⵠΔⲆⵠᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⵠⵠⵠᐃ;
    ΔΔ[Xr.ⵠΔⲆⵠᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⵠΔⲆⵠⵠ;
    ΔΔ[Xr.ᐃΔΔⵠᐃ] = [];
    ΔΔ[Xr.ᐃΔΔⵠᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⲆⵠᐃⵠᐃ;
    ΔΔ[Xr.ᐃΔΔⵠᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠΔΔⵠⲆⵠ;
    ΔΔ[Xr.ᐃⲆⵠⲆⵠΔⵠ] = [];
    ΔΔ[Xr.ᐃⲆⵠⲆⵠΔⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆᐃΔΔⵠⲆ;
    ΔΔ[Xr.ᐃⲆⵠⲆⵠΔⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⵠᐃⲆᐃᐃ;
    ΔΔ[Xr.ⲆᐃΔᐃᐃⲆΔ] = [];
    ΔΔ[Xr.ⲆᐃΔᐃᐃⲆΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃᐃⵠⲆⵠᐃ;
    ΔΔ[Xr.ⲆᐃΔᐃᐃⲆΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⲆᐃᐃᐃⲆⲆ;
    ΔΔ[Xr.ᐃⵠⲆⵠΔ] = [];
    ΔΔ[Xr.ᐃⵠⲆⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔⵠⵠᐃᐃΔ;
    ΔΔ[Xr.ᐃⵠⲆⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆΔⵠᐃⲆⵠ;
    ΔΔ[Xr.ⲆᐃⲆⲆⲆⵠⲆ] = Ⲇⵠ.ⲆᐃⲆⲆⲆⵠⲆ;
    ΔΔ[Xr.ᐃᐃⵠᐃᐃᐃᐃ] = Ⲇⵠ.ᐃᐃⵠᐃᐃᐃᐃ;
    ΔΔ[Xr.ᐃⲆᐃⵠᐃ] = [];
    ΔΔ[Xr.ᐃⲆᐃⵠᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃⲆᐃⵠᐃ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃⲆᐃⵠᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔᐃⵠΔⲆᐃⲆ);
    ΔΔ[Xr.ᐃⲆᐃⵠᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⲆΔᐃΔⵠⲆ);
    ΔΔ[Xr.ᐃⲆᐃⵠᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⲆΔΔⲆⵠⲆ);
    ΔΔ[Xr.ᐃⲆᐃⵠᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⵠⲆⲆⲆⵠⵠ);
    ΔΔ[Xr.ᐃⲆᐃⵠᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠᐃᐃⵠⵠᐃᐃ);
    ΔΔ[Xr.ᐃⲆᐃⵠᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.Ⲇⵠᐃᐃⵠᐃᐃ);
    ΔΔ[Xr.ΔⵠΔⲆⲆ] = [];
    ΔΔ[Xr.ΔⵠΔⲆⲆ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ΔⵠΔⲆⲆ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ΔⵠΔⲆⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃΔΔⵠᐃΔⲆ);
    ΔΔ[Xr.ΔⵠΔⲆⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃΔⲆⵠΔᐃⵠ);
    ΔΔ[Xr.ΔⵠΔⲆⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃⲆⲆⵠΔᐃᐃ);
    ΔΔ[Xr.ΔⵠΔⲆⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆᐃΔⵠⵠⲆΔ);
    ΔΔ[Xr.ΔⵠΔⲆⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⲆⵠⵠΔⲆΔ);
    ΔΔ[Xr.ΔⵠΔⲆⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠⵠⵠᐃⵠΔⵠ);
    ΔΔ[Xr.ⲆΔᐃⲆᐃ] = [];
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆᐃⲆᐃᐃⲆⲆ);
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆᐃⲆᐃⵠΔⵠ);
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆᐃⲆⲆⵠᐃΔ);
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠᐃΔΔᐃΔⵠ);
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆᐃᐃᐃⲆΔⵠ);
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃᐃⵠⲆΔⵠ);
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃΔΔΔⵠⵠ);
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⵠⲆⵠᐃᐃᐃ);
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆΔⵠΔᐃᐃΔ);
    ΔΔ[Xr.ⲆΔᐃⲆᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⲆᐃⵠⲆⲆᐃ);
    ΔΔ[Xr.ᐃΔⲆⲆΔ] = [];
    ΔΔ[Xr.ᐃΔⲆⲆΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠᐃⲆⲆⲆᐃ;
    ΔΔ[Xr.ᐃΔⲆⲆΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔᐃⲆⲆᐃΔ;
    ΔΔ[Xr.ΔᐃΔΔᐃᐃⲆ] = [];
    ΔΔ[Xr.ΔᐃΔΔᐃᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃⵠΔⵠΔ;
    ΔΔ[Xr.ΔᐃΔΔᐃᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔⲆⲆⲆᐃⵠ;
    ΔΔ[Xr.ⵠⵠⵠᐃⲆΔⵠ] = [];
    ΔΔ[Xr.ⵠⵠⵠᐃⲆΔⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃⵠΔΔΔ;
    ΔΔ[Xr.ⵠⵠⵠᐃⲆΔⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔⲆᐃᐃⵠᐃ;
    ΔΔ[Xr.ᐃᐃⵠᐃⲆΔΔ] = Ⲇⵠ.ᐃᐃⵠᐃⲆΔΔ;
    ΔΔ[Xr.ⵠΔⲆⲆⵠΔΔ] = Ⲇⵠ.ⵠΔⲆⲆⵠΔΔ;
    ΔΔ[Xr.ⵠᐃᐃⲆΔᐃΔ] = Ⲇⵠ.ⵠᐃᐃⲆΔᐃΔ;
    ΔΔ[Xr.Δⵠⵠⵠᐃ] = [];
    ΔΔ[Xr.Δⵠⵠⵠᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆΔᐃΔΔᐃ;
    ΔΔ[Xr.Δⵠⵠⵠᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃᐃⵠᐃᐃⲆ;
    ΔΔ[Xr.ΔⲆᐃΔᐃ] = [];
    ΔΔ[Xr.ΔⲆᐃΔᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃᐃⵠⵠΔ;
    ΔΔ[Xr.ΔⲆᐃΔᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆⲆᐃᐃⲆ;
    ΔΔ[Xr.ᐃΔᐃⲆⲆ] = [];
    ΔΔ[Xr.ᐃΔᐃⲆⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔΔⵠⲆᐃΔ;
    ΔΔ[Xr.ᐃΔᐃⲆⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠΔⲆⵠΔᐃ;
    ΔΔ[Xr.ᐃⲆΔΔΔΔⲆ] = [];
    ΔΔ[Xr.ᐃⲆΔΔΔΔⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃᐃⵠⵠΔ;
    ΔΔ[Xr.ᐃⲆΔΔΔΔⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆⲆᐃᐃⲆ;
    ΔΔ[Xr.ⲆᐃⵠΔᐃ] = [];
    ΔΔ[Xr.ⲆᐃⵠΔᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⵠⲆᐃⲆᐃ;
    ΔΔ[Xr.ⲆᐃⵠΔᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠⲆᐃᐃΔᐃ;
    ΔΔ[Xr.ⵠⵠΔΔⵠ] = [];
    ΔΔ[Xr.ⵠⵠΔΔⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃⲆᐃΔⲆΔ;
    ΔΔ[Xr.ⵠⵠΔΔⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃⲆⲆⲆᐃ;
    ΔΔ[Xr.ᐃΔⲆⵠΔ] = [];
    ΔΔ[Xr.ᐃΔⲆⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃᐃᐃᐃⲆⵠ;
    ΔΔ[Xr.ᐃΔⲆⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠᐃⲆⲆⲆⵠ;
    ΔΔ[Xr.ΔⲆᐃΔⵠ] = [];
    ΔΔ[Xr.ΔⲆᐃΔⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆⵠᐃᐃΔⵠ;
    ΔΔ[Xr.ΔⲆᐃΔⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔᐃΔⵠⲆⵠ;
    ΔΔ[Xr.ⲆⲆᐃᐃⲆ] = [];
    ΔΔ[Xr.ⲆⲆᐃᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⵠⲆⵠΔⵠ;
    ΔΔ[Xr.ⲆⲆᐃᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠΔΔⲆᐃΔ;
    ΔΔ[Xr.ⵠᐃΔΔⵠ] = [];
    ΔΔ[Xr.ⵠᐃΔΔⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⲆⲆᐃᐃᐃΔ;
    ΔΔ[Xr.ⵠᐃΔΔⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆᐃᐃⵠⲆΔ;
    ΔΔ[Xr.ΔᐃⲆᐃᐃ] = [];
    ΔΔ[Xr.ΔᐃⲆᐃᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆΔᐃⲆⲆᐃᐃΔ;
    ΔΔ[Xr.ΔᐃⲆᐃᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔⵠⲆⲆⲆⲆΔⲆ;
    ΔΔ[Xr.ᐃⲆΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃⲆΔⲆⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠΔⵠᐃⵠⵠᐃⵠ;
    ΔΔ[Xr.ᐃⲆΔⲆⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠᐃⲆΔᐃᐃⵠΔ;
    ΔΔ[Xr.ⲆᐃᐃⲆᐃ] = [];
    ΔΔ[Xr.ⲆᐃᐃⲆᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔⵠᐃⲆⵠⵠΔΔ;
    ΔΔ[Xr.ⲆᐃᐃⲆᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠⵠⵠΔᐃⲆⲆⲆ;
    ΔΔ[Xr.ⲆⲆⲆⵠⵠ] = [];
    ΔΔ[Xr.ⲆⲆⲆⵠⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔΔᐃᐃⲆΔⲆΔ;
    ΔΔ[Xr.ⲆⲆⲆⵠⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⲆⲆΔΔᐃⲆΔ;
    ΔΔ[Xr.ΔΔⲆᐃᐃ] = [];
    ΔΔ[Xr.ΔΔⲆᐃᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔᐃΔᐃᐃᐃΔΔ;
    ΔΔ[Xr.ΔΔⲆᐃᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⲆᐃᐃⵠΔⲆⲆⲆ;
    ΔΔ[Xr.ⲆⲆⲆᐃΔ] = [];
    ΔΔ[Xr.ⲆⲆⲆᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠⵠⵠⵠᐃⲆΔᐃ;
    ΔΔ[Xr.ⲆⲆⲆᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆⵠΔΔⲆⵠΔ;
    ΔΔ[Xr.ᐃⵠᐃⵠⵠ] = [];
    ΔΔ[Xr.ᐃⵠᐃⵠⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃⵠΔⲆⲆⲆ;
    ΔΔ[Xr.ᐃⵠᐃⵠⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆΔΔⲆΔⵠ;
    ΔΔ[Xr.ⲆⵠΔΔΔ] = [];
    ΔΔ[Xr.ⲆⵠΔΔΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⵠᐃᐃⵠⵠ;
    ΔΔ[Xr.ⲆⵠΔΔΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆⵠⲆⲆⲆᐃ;
    ΔΔ[Xr.ⲆΔⵠΔΔ] = [];
    ΔΔ[Xr.ⲆΔⵠΔΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⵠⲆΔⲆⲆΔᐃ;
    ΔΔ[Xr.ⲆΔⵠΔΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃⲆⵠΔⲆⲆⵠ;
    ΔΔ[Xr.ᐃΔᐃΔⲆ] = [];
    ΔΔ[Xr.ᐃΔᐃΔⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⵠΔⵠΔⲆᐃᐃ;
    ΔΔ[Xr.ᐃΔᐃΔⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⲆⲆⲆΔⵠⲆⵠⲆ;
    ΔΔ[Xr.ᐃᐃΔᐃⲆ] = [];
    ΔΔ[Xr.ᐃᐃΔᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⲆᐃᐃΔⵠΔᐃΔ;
    ΔΔ[Xr.ᐃᐃΔᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔⵠⲆΔⵠⲆᐃⵠ;
    ΔΔ[Xr.ΔⲆΔΔΔ] = [];
    ΔΔ[Xr.ΔⲆΔΔΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔΔΔⲆΔⵠⲆⵠ;
    ΔΔ[Xr.ΔⲆΔΔΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆⵠΔⵠΔⵠⵠⲆ;
    ΔΔ[Xr.ᐃΔⵠᐃⵠ] = [];
    ΔΔ[Xr.ᐃΔⵠᐃⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔⵠΔΔΔⵠᐃΔ;
    ΔΔ[Xr.ᐃΔⵠᐃⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔΔⵠⲆⵠᐃᐃᐃ;
    ΔΔ[Xr.Δⵠᐃᐃᐃ] = [];
    ΔΔ[Xr.Δⵠᐃᐃᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃⵠⲆΔᐃⲆᐃⲆ;
    ΔΔ[Xr.Δⵠᐃᐃᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃΔⵠᐃΔᐃΔᐃ;
    ΔΔ[Xr.ΔᐃⲆⵠⲆ] = [];
    ΔΔ[Xr.ΔᐃⲆⵠⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃⲆΔⵠᐃⲆ;
    ΔΔ[Xr.ΔᐃⲆⵠⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⵠᐃᐃᐃΔ;
    ΔΔ[Xr.ΔΔΔⲆΔ] = [];
    ΔΔ[Xr.ΔΔΔⲆΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃᐃΔⵠⲆ;
    ΔΔ[Xr.ΔΔΔⲆΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⵠΔⲆⲆᐃ;
    ΔΔ[Xr.ᐃᐃΔᐃΔ] = [];
    ΔΔ[Xr.ᐃᐃΔᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃΔᐃΔᐃⲆ;
    ΔΔ[Xr.ᐃᐃΔᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃⵠᐃΔᐃⵠ;
    ΔΔ[Xr.ⲆΔᐃΔⵠ] = [];
    ΔΔ[Xr.ⲆΔᐃΔⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠΔΔⲆᐃᐃ;
    ΔΔ[Xr.ⲆΔᐃΔⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⲆΔᐃⵠᐃ;
    ΔΔ[Xr.ⲆΔⲆᐃⲆ] = [];
    ΔΔ[Xr.ⲆΔⲆᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⵠⲆᐃᐃΔ;
    ΔΔ[Xr.ⲆΔⲆᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃⵠⲆⲆᐃⲆ;
    ΔΔ[Xr.ᐃᐃⲆᐃᐃ] = [];
    ΔΔ[Xr.ᐃᐃⲆᐃᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔⲆΔΔⵠⲆ;
    ΔΔ[Xr.ᐃᐃⲆᐃᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⲆᐃⲆΔΔ;
    ΔΔ[Xr.ΔΔⲆⵠⲆ] = [];
    ΔΔ[Xr.ΔΔⲆⵠⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠᐃΔᐃⵠⲆ;
    ΔΔ[Xr.ΔΔⲆⵠⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⵠⲆᐃΔⵠ;
    ΔΔ[Xr.Δᐃᐃⵠⵠ] = [];
    ΔΔ[Xr.Δᐃᐃⵠⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⲆᐃᐃⲆⵠ;
    ΔΔ[Xr.Δᐃᐃⵠⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠᐃᐃᐃᐃΔ;
    ΔΔ[Xr.ⲆⵠΔⵠⵠ] = [];
    ΔΔ[Xr.ⲆⵠΔⵠⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠᐃᐃΔⲆⵠ;
    ΔΔ[Xr.ⲆⵠΔⵠⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔᐃⲆΔⲆⲆ;
    ΔΔ[Xr.ⵠΔΔᐃᐃ] = [];
    ΔΔ[Xr.ⵠΔΔᐃᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔⵠᐃⲆΔⵠᐃΔ;
    ΔΔ[Xr.ⵠΔΔᐃᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⲆᐃⲆⲆⵠⲆᐃ;
    ΔΔ[Xr.ⲆⵠΔⲆⲆ] = [];
    ΔΔ[Xr.ⲆⵠΔⲆⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃᐃⲆⲆΔᐃ;
    ΔΔ[Xr.ⲆⵠΔⲆⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆΔΔΔΔⵠΔⵠ;
    ΔΔ[Xr.ΔᐃⵠⵠΔ] = [];
    ΔΔ[Xr.ΔᐃⵠⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔⲆⵠᐃΔᐃΔⵠ;
    ΔΔ[Xr.ΔᐃⵠⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆᐃⵠⲆⵠΔⵠⲆ;
    ΔΔ[Xr.ΔⵠΔⵠⵠ] = [];
    ΔΔ[Xr.ΔⵠΔⵠⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃⵠⲆⵠⵠⲆ;
    ΔΔ[Xr.ΔⵠΔⵠⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠᐃⲆⲆᐃΔ;
    ΔΔ[Xr.ⵠΔⲆΔⲆ] = [];
    ΔΔ[Xr.ⵠΔⲆΔⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⲆⵠⲆⲆⲆᐃⲆ;
    ΔΔ[Xr.ⵠΔⲆΔⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆᐃⵠⲆΔⲆⵠⵠ;
    ΔΔ[Xr.ⵠᐃΔΔᐃ] = [];
    ΔΔ[Xr.ⵠᐃΔΔᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⵠΔᐃΔⵠ;
    ΔΔ[Xr.ⵠᐃΔΔᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⲆⵠⵠᐃⲆ;
    ΔΔ[Xr.ⵠⵠΔᐃᐃ] = [];
    ΔΔ[Xr.ⵠⵠΔᐃᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃᐃⲆΔΔⵠ;
    ΔΔ[Xr.ⵠⵠΔᐃᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔᐃⵠⵠⵠⲆ;
    ΔΔ[Xr.ⲆΔᐃΔᐃ] = [];
    ΔΔ[Xr.ⲆΔᐃΔᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠⲆⵠΔΔⵠ;
    ΔΔ[Xr.ⲆΔᐃΔᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⲆⲆⲆⲆⲆ;
    ΔΔ[Xr.ΔᐃΔᐃΔΔᐃ] = [];
    ΔΔ[Xr.ΔᐃΔᐃΔΔᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⵠᐃᐃⵠΔ;
    ΔΔ[Xr.ΔᐃΔᐃΔΔᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆΔⲆᐃᐃⵠ;
    ΔΔ[Xr.ᐃΔΔΔⲆⵠΔ] = [];
    ΔΔ[Xr.ᐃΔΔΔⲆⵠΔ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃΔΔΔⲆⵠΔ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃΔΔΔⲆⵠΔ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⵠᐃⵠᐃⵠΔᐃΔ);
    ΔΔ[Xr.ᐃΔΔΔⲆⵠΔ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃᐃᐃⵠᐃⲆⵠᐃⲆ);
    ΔΔ[Xr.ᐃΔΔΔⲆⵠΔ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃᐃⵠᐃⲆⵠᐃⲆ);
    ΔΔ[Xr.ᐃΔΔΔⲆⵠΔ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⵠΔᐃⲆΔⵠᐃⵠ);
    ΔΔ[Xr.ⲆΔⵠⲆᐃ] = [];
    ΔΔ[Xr.ⲆΔⵠⲆᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⲆΔⵠⲆᐃ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⲆΔⵠⲆᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⵠⵠΔⲆΔⵠ);
    ΔΔ[Xr.ⲆΔⵠⲆᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠᐃᐃΔⲆⲆᐃ);
    ΔΔ[Xr.ⲆΔⵠⲆᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⵠΔⲆΔᐃⲆ);
    ΔΔ[Xr.ⲆΔⵠⲆᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠΔⲆΔᐃⲆΔ);
    ΔΔ[Xr.ⲆΔⵠⲆᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⲆΔⲆᐃΔⵠ);
    ΔΔ[Xr.ⲆΔⵠⲆᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃⵠΔΔⲆⲆ);
    ΔΔ[Xr.ⲆⵠⲆᐃΔ] = [];
    ΔΔ[Xr.ⲆⵠⲆᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆⵠΔⲆⵠⵠ;
    ΔΔ[Xr.ⲆⵠⲆᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔᐃΔᐃⵠⲆ;
    ΔΔ[Xr.ᐃΔΔᐃΔ] = [];
    ΔΔ[Xr.ᐃΔΔᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔⵠⲆⲆΔⵠ;
    ΔΔ[Xr.ᐃΔΔᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⵠᐃᐃΔⲆ;
    ΔΔ[Xr.ᐃⵠⵠΔⵠ] = [];
    ΔΔ[Xr.ᐃⵠⵠΔⵠ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃⵠⵠΔⵠ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃⵠⵠΔⵠ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠΔᐃᐃΔⲆΔ);
    ΔΔ[Xr.ᐃⵠⵠΔⵠ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⵠⲆᐃΔΔⲆ);
    ΔΔ[Xr.ᐃⵠⵠΔⵠ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⲆⵠⵠΔⲆΔ);
    ΔΔ[Xr.ᐃⵠⵠΔⵠ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔⵠΔⲆᐃⵠⵠ);
    ΔΔ[Xr.ᐃⵠⵠΔⵠ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔⲆⲆⲆΔⵠᐃ);
    ΔΔ[Xr.ᐃⵠⵠΔⵠ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔΔᐃᐃΔΔᐃ);
    ΔΔ[Xr.ᐃⵠᐃΔ] = [];
    ΔΔ[Xr.ᐃⵠᐃΔ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃⵠᐃΔ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ᐃⵠᐃΔ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠᐃⵠΔΔⲆⵠ);
    ΔΔ[Xr.ᐃⵠᐃΔ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃᐃᐃΔⵠΔⵠ);
    ΔΔ[Xr.ᐃⵠᐃΔ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃΔΔΔᐃⲆⵠ);
    ΔΔ[Xr.ᐃⵠᐃΔ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠᐃⲆⵠΔⲆⵠ);
    ΔΔ[Xr.ᐃⵠᐃΔ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔᐃⲆⵠⵠⲆΔ);
    ΔΔ[Xr.ᐃⵠᐃΔ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⲆⲆᐃⲆⲆΔ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ] = [];
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃᐃⲆᐃΔⲆⵠ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃΔΔᐃⵠⲆⲆ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⵠᐃⵠⵠΔⵠ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔΔⲆⲆᐃⵠᐃ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆⵠⲆᐃⵠᐃΔ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆᐃⵠᐃⵠⲆΔ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔⵠᐃⵠⲆᐃⵠ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⲆⵠⵠΔⲆⵠ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ΔⲆⵠ].push(Ⲇⵠ.Ⲇⵠᐃᐃᐃⵠᐃ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆᐃⲆⲆⵠⵠΔ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆΔᐃᐃᐃΔⵠ);
    ΔΔ[Xr.ΔⲆⲆⵠΔ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⵠᐃᐃⵠⵠⲆ);
    ΔΔ[Xr.ΔᐃΔΔⲆ] = [];
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⵠᐃᐃⲆⲆΔ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃⵠᐃⵠΔⲆⲆ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠᐃⲆⲆᐃᐃⵠ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃΔΔⲆΔⵠⵠ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠΔⵠΔⲆᐃᐃ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔᐃΔΔⵠⲆⵠ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔᐃⵠΔᐃⵠⵠ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔⲆΔᐃⲆⲆΔ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃⵠⵠⲆⲆΔ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⵠⲆᐃᐃⵠⵠ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ΔⵠᐃⵠᐃⲆᐃ);
    ΔΔ[Xr.ΔᐃΔΔⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆᐃΔᐃᐃΔⲆ);
    ΔΔ[Xr.ΔΔⲆᐃᐃⲆΔ] = [];
    ΔΔ[Xr.ΔΔⲆᐃᐃⲆΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆΔΔᐃⲆⲆ;
    ΔΔ[Xr.ΔΔⲆᐃᐃⲆΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⵠᐃⲆⵠⵠ;
    ΔΔ[Xr.ᐃⲆᐃΔⵠⲆⵠ] = Ⲇⵠ.ΔⵠⲆⵠⲆᐃⵠ;
    ΔΔ[Xr.Ⲇᐃⵠⵠᐃ] = [];
    ΔΔ[Xr.Ⲇᐃⵠⵠᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⵠⵠⲆⵠΔⲆⵠ;
    ΔΔ[Xr.Ⲇᐃⵠⵠᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⲆⲆⵠⲆᐃⵠⲆ;
    ΔΔ[Xr.ⵠⵠⲆΔⲆ] = [];
    ΔΔ[Xr.ⵠⵠⲆΔⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠⵠⵠⵠⲆ;
    ΔΔ[Xr.ⵠⵠⲆΔⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⲆⵠᐃᐃΔᐃ;
    ΔΔ[Xr.ⵠᐃᐃⲆᐃ] = [];
    ΔΔ[Xr.ⵠᐃᐃⲆᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠᐃᐃⲆΔΔ;
    ΔΔ[Xr.ⵠᐃᐃⲆᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃⵠᐃⵠⵠΔ;
    ΔΔ[Xr.ΔⵠΔΔⵠ] = [];
    ΔΔ[Xr.ΔⵠΔΔⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠᐃᐃᐃΔᐃ;
    ΔΔ[Xr.ΔⵠΔΔⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⵠΔΔᐃⲆ;
    ΔΔ[Xr.ⲆᐃᐃⲆⵠ] = [];
    ΔΔ[Xr.ⲆᐃᐃⲆⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⵠΔⲆⲆᐃ;
    ΔΔ[Xr.ⲆᐃᐃⲆⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃΔⲆⲆΔΔ;
    ΔΔ[Xr.ΔⵠΔⲆⲆᐃΔ] = Ⲇⵠ.ΔⵠΔⲆⲆᐃΔ;
    ΔΔ[Xr.ⵠᐃⵠⵠᐃⲆⲆ] = [];
    ΔΔ[Xr.ⵠᐃⵠⵠᐃⲆⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔⲆⵠΔᐃⵠ;
    ΔΔ[Xr.ⵠᐃⵠⵠᐃⲆⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃΔᐃᐃΔᐃ;
    ΔΔ[Xr.ᐃⵠⲆᐃⵠΔΔ] = [];
    ΔΔ[Xr.ᐃⵠⲆᐃⵠΔΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃΔΔⲆⵠΔ;
    ΔΔ[Xr.ᐃⵠⲆᐃⵠΔΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆᐃⲆⲆᐃ;
    ΔΔ[Xr.ΔⲆⲆᐃᐃΔᐃ] = Ⲇⵠ.ΔⲆⲆᐃᐃΔᐃ;
    ΔΔ[Xr.ᐃⲆᐃⲆᐃⵠⲆ] = Ⲇⵠ.ᐃⲆᐃⲆᐃⵠⲆ;
    ΔΔ[Xr.ⲆⵠⲆΔΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆΔΔⲆⵠ;
    ΔΔ[Xr.ⵠᐃⲆΔⵠⵠᐃ] = [];
    ΔΔ[Xr.ⵠᐃⲆΔⵠⵠᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆΔⵠⵠⵠⵠ;
    ΔΔ[Xr.ⵠᐃⲆΔⵠⵠᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⵠⲆᐃⲆᐃ;
    ΔΔ[Xr.ⵠΔᐃⵠⵠⵠΔ] = [];
    ΔΔ[Xr.ⵠΔᐃⵠⵠⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆΔΔⲆⲆⲆ;
    ΔΔ[Xr.ⵠΔᐃⵠⵠⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔΔⲆᐃᐃΔ;
    ΔΔ[Xr.ⲆᐃⵠᐃⵠⲆⲆ] = [];
    ΔΔ[Xr.ⲆᐃⵠᐃⵠⲆⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⲆⵠⲆⵠ;
    ΔΔ[Xr.ⲆᐃⵠᐃⵠⲆⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.Δᐃᐃⵠⵠᐃᐃ;
    ΔΔ[Xr.ΔᐃΔᐃⲆᐃⵠ] = Ⲇⵠ.ΔᐃΔᐃⲆᐃⵠ;
    ΔΔ[Xr.ⵠᐃΔᐃᐃΔᐃ] = Ⲇⵠ.ⵠᐃΔᐃᐃΔᐃ;
    ΔΔ[Xr.ΔⵠᐃΔΔΔᐃ] = Ⲇⵠ.ΔⵠᐃΔΔΔᐃ;
    ΔΔ[Xr.ⵠⲆᐃⵠⲆⵠᐃ] = [];
    ΔΔ[Xr.ⵠⲆᐃⵠⲆⵠᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⲆᐃⵠΔᐃⲆ;
    ΔΔ[Xr.ⵠⲆᐃⵠⲆⵠᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⲆᐃⲆⵠⲆ;
    ΔΔ[Xr.ᐃᐃᐃⵠⵠⵠΔ] = [];
    ΔΔ[Xr.ᐃᐃᐃⵠⵠⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⵠᐃⵠΔᐃ;
    ΔΔ[Xr.ᐃᐃᐃⵠⵠⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆΔⵠⲆΔᐃ;
    ΔΔ[Xr.ᐃⵠⵠᐃⵠ] = [];
    ΔΔ[Xr.ᐃⵠⵠᐃⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃⵠᐃⵠⵠ;
    ΔΔ[Xr.ᐃⵠⵠᐃⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠⲆΔⲆⲆⵠ;
    ΔΔ[Xr.ᐃΔⵠΔᐃᐃⵠ] = [];
    ΔΔ[Xr.ᐃΔⵠΔᐃᐃⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆⲆⵠⲆΔⲆ;
    ΔΔ[Xr.ᐃΔⵠΔᐃᐃⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆⲆΔⲆⲆⲆ;
    ΔΔ[Xr.ᐃᐃᐃⵠⲆΔᐃ] = [];
    ΔΔ[Xr.ᐃᐃᐃⵠⲆΔᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃⵠΔⲆΔΔ;
    ΔΔ[Xr.ᐃᐃᐃⵠⲆΔᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃᐃⲆⵠⲆ;
    ΔΔ[Xr.ΔⲆΔⵠᐃⵠⲆ] = [];
    ΔΔ[Xr.ΔⲆΔⵠᐃⵠⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠΔⵠᐃᐃⵠ;
    ΔΔ[Xr.ΔⲆΔⵠᐃⵠⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃᐃΔΔΔΔ;
    ΔΔ[Xr.ΔᐃᐃⵠⲆⵠⵠ] = [];
    ΔΔ[Xr.ΔᐃᐃⵠⲆⵠⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆΔⵠⲆΔⵠ;
    ΔΔ[Xr.ΔᐃᐃⵠⲆⵠⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⲆᐃⵠΔⵠ;
    ΔΔ[Xr.ΔⲆⲆᐃⵠΔⵠ] = Ⲇⵠ.ΔⲆⲆᐃⵠΔⵠ;
    ΔΔ[Xr.ⵠᐃΔᐃᐃⵠᐃ] = Ⲇⵠ.ⵠᐃΔᐃᐃⵠᐃ;
    ΔΔ[Xr.ⵠⲆⲆⵠᐃᐃᐃ] = Ⲇⵠ.ⵠⲆⲆⵠᐃᐃᐃ;
    ΔΔ[Xr.ⲆᐃΔⵠⲆⲆⲆ] = Ⲇⵠ.ⲆᐃΔⵠⲆⲆⲆ;
    ΔΔ[Xr.ⵠΔᐃΔΔΔⲆ] = Ⲇⵠ.ⵠΔᐃΔΔΔⲆ;
    ΔΔ[Xr.ⲆΔⵠᐃΔΔⵠ] = Ⲇⵠ.ⲆΔⵠᐃΔΔⵠ;
    ΔΔ[Xr.ⵠⲆΔΔⲆⵠΔ] = [];
    ΔΔ[Xr.ⵠⲆΔΔⲆⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔⵠΔⲆΔᐃ;
    ΔΔ[Xr.ⵠⲆΔΔⲆⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃⵠΔⵠⵠⲆ;
    ΔΔ[Xr.ΔΔⵠⲆⲆ] = [];
    ΔΔ[Xr.ΔΔⵠⲆⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠΔΔⲆⲆⵠ;
    ΔΔ[Xr.ΔΔⵠⲆⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔⲆⲆΔΔⲆ;
    ΔΔ[Xr.ᐃΔⲆⲆⲆ] = [];
    ΔΔ[Xr.ᐃΔⲆⲆⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃΔΔᐃⲆΔ;
    ΔΔ[Xr.ᐃΔⲆⲆⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⵠᐃΔᐃΔ;
    ΔΔ[Xr.ⲆΔⵠΔⲆⵠⲆ] = [];
    ΔΔ[Xr.ⲆΔⵠΔⲆⵠⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⲆⲆⵠⲆ;
    ΔΔ[Xr.ⲆΔⵠΔⲆⵠⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⵠΔⵠᐃᐃ;
    ΔΔ[Xr.ⵠΔΔⵠⲆΔⲆ] = Ⲇⵠ.ⵠΔΔⵠⲆΔⲆ;
    ΔΔ[Xr.ᐃⲆΔΔᐃⵠⵠ] = Ⲇⵠ.ᐃⲆΔΔᐃⵠⵠ;
    ΔΔ[Xr.ⵠⲆⲆⵠᐃᐃⲆ] = [];
    ΔΔ[Xr.ⵠⲆⲆⵠᐃᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⵠΔΔⵠⵠ;
    ΔΔ[Xr.ⵠⲆⲆⵠᐃᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠⵠⵠⲆΔⲆ;
    ΔΔ[Xr.ⲆⵠΔᐃⵠ] = [];
    ΔΔ[Xr.ⲆⵠΔᐃⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃΔⲆⵠΔⵠ;
    ΔΔ[Xr.ⲆⵠΔᐃⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃⲆᐃⲆΔ;
    ΔΔ[Xr.ᐃᐃΔⵠⲆⵠΔ] = [];
    ΔΔ[Xr.ᐃᐃΔⵠⲆⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔᐃⵠᐃⲆⵠ;
    ΔΔ[Xr.ᐃᐃΔⵠⲆⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆⵠⲆᐃⲆᐃ;
    ΔΔ[Xr.ᐃⵠΔᐃᐃᐃⵠ] = [];
    ΔΔ[Xr.ᐃⵠΔᐃᐃᐃⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⵠΔⲆΔⵠΔ;
    ΔΔ[Xr.ᐃⵠΔᐃᐃᐃⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⵠⲆᐃᐃᐃ;
    ΔΔ[Xr.ᐃⲆⵠⵠᐃⲆΔ] = [];
    ΔΔ[Xr.ᐃⲆⵠⵠᐃⲆΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠⲆΔᐃⵠΔ;
    ΔΔ[Xr.ᐃⲆⵠⵠᐃⲆΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⵠΔⲆⲆᐃ;
    ΔΔ[Xr.ΔⲆⲆⵠΔⲆΔ] = [];
    ΔΔ[Xr.ΔⲆⲆⵠΔⲆΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔΔⵠⲆⲆⲆ;
    ΔΔ[Xr.ΔⲆⲆⵠΔⲆΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆΔᐃΔⵠ;
    ΔΔ[Xr.ⵠⵠⲆᐃⵠⵠⵠ] = [];
    ΔΔ[Xr.ⵠⵠⲆᐃⵠⵠⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔⵠΔⲆⲆⲆ;
    ΔΔ[Xr.ⵠⵠⲆᐃⵠⵠⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠᐃᐃⵠΔⲆ;
    ΔΔ[Xr.ⲆΔΔⲆⲆⵠⵠ] = [];
    ΔΔ[Xr.ⲆΔΔⲆⲆⵠⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔΔⵠⵠΔⲆ;
    ΔΔ[Xr.ⲆΔΔⲆⲆⵠⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃΔⵠⵠᐃⲆ;
    ΔΔ[Xr.ⵠⵠⵠⵠⲆᐃⵠ] = [];
    ΔΔ[Xr.ⵠⵠⵠⵠⲆᐃⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆⵠΔᐃⵠⵠ;
    ΔΔ[Xr.ⵠⵠⵠⵠⲆᐃⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃᐃᐃΔΔⵠ;
    ΔΔ[Xr.ΔⲆⵠⲆⲆΔᐃ] = Ⲇⵠ.ΔⲆⵠⲆⲆΔᐃ;
    ΔΔ[Xr.ΔⲆᐃⵠᐃᐃⵠ] = Ⲇⵠ.ΔⲆᐃⵠᐃᐃⵠ;
    ΔΔ[Xr.ⲆⲆᐃⲆΔΔΔ] = Ⲇⵠ.ⲆⲆᐃⲆΔΔΔ;
    ΔΔ[Xr.ⲆᐃⵠΔᐃᐃΔ] = [];
    ΔΔ[Xr.ⲆᐃⵠΔᐃᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃᐃΔⵠⲆⵠ;
    ΔΔ[Xr.ⲆᐃⵠΔᐃᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆᐃΔⵠⵠⵠ;
    ΔΔ[Xr.ⲆⲆΔⵠⲆ] = [];
    ΔΔ[Xr.ⲆⲆΔⵠⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃᐃⵠⵠᐃ;
    ΔΔ[Xr.ⲆⲆΔⵠⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃᐃⵠᐃⲆΔ;
    ΔΔ[Xr.ᐃᐃΔⵠⵠⵠⲆ] = [];
    ΔΔ[Xr.ᐃᐃΔⵠⵠⵠⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃⵠⵠᐃⲆⵠ;
    ΔΔ[Xr.ᐃᐃΔⵠⵠⵠⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆⲆⲆⵠⲆᐃ;
    ΔΔ[Xr.ⵠΔΔⵠΔⵠᐃ] = [];
    ΔΔ[Xr.ⵠΔΔⵠΔⵠᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆᐃᐃⲆⲆΔΔ;
    ΔΔ[Xr.ⵠΔΔⵠΔⵠᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠΔⲆⲆⵠⵠ;
    ΔΔ[Xr.ⵠΔⲆⲆᐃΔⵠ] = [];
    ΔΔ[Xr.ⵠΔⲆⲆᐃΔⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃΔΔⵠⲆᐃ;
    ΔΔ[Xr.ⵠΔⲆⲆᐃΔⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠΔⲆⲆⲆⵠ;
    ΔΔ[Xr.ΔΔⵠΔᐃΔᐃ] = [];
    ΔΔ[Xr.ΔΔⵠΔᐃΔᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆᐃᐃᐃᐃⲆ;
    ΔΔ[Xr.ΔΔⵠΔᐃΔᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆⵠᐃᐃⲆ;
    ΔΔ[Xr.ᐃᐃⵠⲆⵠΔΔ] = [];
    ΔΔ[Xr.ᐃᐃⵠⲆⵠΔΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⲆⲆᐃⲆ;
    ΔΔ[Xr.ᐃᐃⵠⲆⵠΔΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃΔΔᐃⵠᐃ;
    ΔΔ[Xr.ⵠⲆⵠⲆⵠⵠΔ] = [];
    ΔΔ[Xr.ⵠⲆⵠⲆⵠⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆᐃⲆⲆᐃᐃ;
    ΔΔ[Xr.ⵠⲆⵠⲆⵠⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔⲆⲆΔⲆΔ;
    ΔΔ[Xr.ⵠⲆⲆΔΔᐃΔ] = [];
    ΔΔ[Xr.ⵠⲆⲆΔΔᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃⵠⵠⵠᐃⲆ;
    ΔΔ[Xr.ⵠⲆⲆΔΔᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃΔⵠⵠⵠᐃ;
    ΔΔ[Xr.ⵠΔΔⲆⵠⲆᐃ] = Ⲇⵠ.ⵠΔΔⲆⵠⲆᐃ;
    ΔΔ[Xr.ⲆⵠᐃᐃⲆᐃⲆ] = Ⲇⵠ.ⲆⵠᐃᐃⲆᐃⲆ;
    ΔΔ[Xr.ⲆΔⵠΔⵠⲆΔ] = Ⲇⵠ.ⲆΔⵠΔⵠⲆΔ;
    ΔΔ[Xr.ⵠⵠⲆΔᐃⵠⲆ] = [];
    ΔΔ[Xr.ⵠⵠⲆΔᐃⵠⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠⲆᐃⵠΔⲆ;
    ΔΔ[Xr.ⵠⵠⲆΔᐃⵠⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆᐃΔᐃΔᐃ;
    ΔΔ[Xr.ⵠᐃⲆⲆΔ] = [];
    ΔΔ[Xr.ⵠᐃⲆⲆΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠΔᐃⵠⵠΔ;
    ΔΔ[Xr.ⵠᐃⲆⲆΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃⵠᐃᐃΔⵠ;
    ΔΔ[Xr.ⲆⲆⲆⲆⲆᐃᐃ] = Ⲇⵠ.ⲆⲆⲆⲆⲆᐃᐃ;
    ΔΔ[Xr.ⲆᐃⲆⲆΔⵠΔ] = [];
    ΔΔ[Xr.ⲆᐃⲆⲆΔⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⵠⵠⵠⵠᐃ;
    ΔΔ[Xr.ⲆᐃⲆⲆΔⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆⲆⵠⵠⵠ;
    ΔΔ[Xr.ⲆᐃᐃᐃΔⵠᐃ] = [];
    ΔΔ[Xr.ⲆᐃᐃᐃΔⵠᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠᐃᐃᐃΔⵠ;
    ΔΔ[Xr.ⲆᐃᐃᐃΔⵠᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆᐃⵠΔΔᐃ;
    ΔΔ[Xr.ⵠᐃⲆΔΔᐃᐃ] = [];
    ΔΔ[Xr.ⵠᐃⲆΔΔᐃᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠΔΔΔⲆ;
    ΔΔ[Xr.ⵠᐃⲆΔΔᐃᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠⲆᐃΔΔΔ;
    ΔΔ[Xr.ᐃⲆᐃΔⲆᐃΔ] = [];
    ΔΔ[Xr.ᐃⲆᐃΔⲆᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔᐃⵠΔΔⲆ;
    ΔΔ[Xr.ᐃⲆᐃΔⲆᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠᐃΔᐃΔⵠ;
    ΔΔ[Xr.ⲆⲆⵠΔᐃⲆⲆ] = [];
    ΔΔ[Xr.ⲆⲆⵠΔᐃⲆⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆⲆⵠⵠⲆⲆ;
    ΔΔ[Xr.ⲆⲆⵠΔᐃⲆⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⵠⲆⲆⲆⵠ;
    ΔΔ[Xr.ⲆⲆᐃΔⵠΔᐃ] = [];
    ΔΔ[Xr.ⲆⲆᐃΔⵠΔᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⲆⵠⵠᐃⵠⲆ;
    ΔΔ[Xr.ⲆⲆᐃΔⵠΔᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠᐃⵠⲆΔⲆⲆ;
    ΔΔ[Xr.ᐃΔΔΔⵠⲆᐃ] = [];
    ΔΔ[Xr.ᐃΔΔΔⵠⲆᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆᐃⵠΔΔΔ;
    ΔΔ[Xr.ᐃΔΔΔⵠⲆᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔΔᐃΔⵠΔⲆ;
    ΔΔ[Xr.ⵠⵠᐃΔⵠⲆⵠ] = [];
    ΔΔ[Xr.ⵠⵠᐃΔⵠⲆⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃᐃΔΔΔ;
    ΔΔ[Xr.ⵠⵠᐃΔⵠⲆⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⲆⲆᐃⵠⲆ;
    ΔΔ[Xr.ⵠⲆᐃⵠⵠᐃⲆ] = [];
    ΔΔ[Xr.ⵠⲆᐃⵠⵠᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠⲆᐃΔΔᐃ;
    ΔΔ[Xr.ⵠⲆᐃⵠⵠᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⲆⲆⲆΔⵠ;
    ΔΔ[Xr.ᐃⲆⲆⵠⲆⵠⲆ] = Ⲇⵠ.ᐃⲆⲆⵠⲆⵠⲆ;
    ΔΔ[Xr.ⲆⲆⵠᐃᐃᐃⲆ] = Ⲇⵠ.ⲆⲆⵠᐃᐃᐃⲆ;
    ΔΔ[Xr.ΔⵠⵠᐃⵠΔᐃ] = Ⲇⵠ.ΔⵠⵠᐃⵠΔᐃ;
    ΔΔ[Xr.ΔᐃⵠⵠΔΔᐃ] = [];
    ΔΔ[Xr.ΔᐃⵠⵠΔΔᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠᐃᐃΔⲆⲆ;
    ΔΔ[Xr.ΔᐃⵠⵠΔΔᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃᐃⵠΔⲆᐃ;
    ΔΔ[Xr.ⵠΔⵠᐃⵠ] = [];
    ΔΔ[Xr.ⵠΔⵠᐃⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⵠⵠΔΔⵠ;
    ΔΔ[Xr.ⵠΔⵠᐃⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠΔᐃⵠᐃᐃ;
    ΔΔ[Xr.ⵠⵠΔΔⲆᐃⵠ] = Ⲇⵠ.ⵠⵠΔΔⲆᐃⵠ;
    ΔΔ[Xr.ΔᐃⵠⲆⲆⵠⲆ] = [];
    ΔΔ[Xr.ΔᐃⵠⲆⲆⵠⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⲆⵠΔⲆΔ;
    ΔΔ[Xr.ΔᐃⵠⲆⲆⵠⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⵠⲆⲆΔⲆᐃ;
    ΔΔ[Xr.ⲆᐃⲆᐃⲆⲆⲆ] = [];
    ΔΔ[Xr.ⲆᐃⲆᐃⲆⲆⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠⵠΔⲆⲆ;
    ΔΔ[Xr.ⲆᐃⲆᐃⲆⲆⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⵠⵠⲆⲆⵠ;
    ΔΔ[Xr.ⵠᐃⵠᐃΔΔⵠ] = [];
    ΔΔ[Xr.ⵠᐃⵠᐃΔΔⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⵠΔᐃⲆⲆⵠ;
    ΔΔ[Xr.ⵠᐃⵠᐃΔΔⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⲆⵠΔⲆⵠ;
    ΔΔ[Xr.ΔΔᐃΔⲆⵠΔ] = [];
    ΔΔ[Xr.ΔΔᐃΔⲆⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃⵠΔⲆΔ;
    ΔΔ[Xr.ΔΔᐃΔⲆⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃᐃᐃⵠᐃⵠ;
    ΔΔ[Xr.ΔΔᐃᐃᐃΔΔ] = [];
    ΔΔ[Xr.ΔΔᐃᐃᐃΔΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔΔⵠᐃᐃᐃΔ;
    ΔΔ[Xr.ΔΔᐃᐃᐃΔΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠᐃⲆΔΔΔ;
    ΔΔ[Xr.ΔᐃΔᐃⲆᐃᐃ] = [];
    ΔΔ[Xr.ΔᐃΔᐃⲆᐃᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠΔⵠⲆⵠⵠ;
    ΔΔ[Xr.ΔᐃΔᐃⲆᐃᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆΔᐃⵠⲆⵠⵠ;
    ΔΔ[Xr.ⵠⵠΔΔⲆᐃⲆ] = [];
    ΔΔ[Xr.ⵠⵠΔΔⲆᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔⲆⵠᐃⵠⵠ;
    ΔΔ[Xr.ⵠⵠΔΔⲆᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠΔⲆᐃⵠᐃⲆ;
    ΔΔ[Xr.ᐃⲆⵠⵠᐃⲆᐃ] = [];
    ΔΔ[Xr.ᐃⲆⵠⵠᐃⲆᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠΔⵠΔⵠⲆⲆ;
    ΔΔ[Xr.ᐃⲆⵠⵠᐃⲆᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⲆⲆⵠΔᐃΔ;
    ΔΔ[Xr.ΔⲆⵠⵠΔᐃΔ] = [];
    ΔΔ[Xr.ΔⲆⵠⵠΔᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃᐃⲆΔⲆⲆⲆ;
    ΔΔ[Xr.ΔⲆⵠⵠΔᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔⵠⵠᐃΔⵠ;
    ΔΔ[Xr.ⲆⵠⵠᐃΔᐃᐃ] = Ⲇⵠ.ⲆⵠⵠᐃΔᐃᐃ;
    ΔΔ[Xr.ᐃᐃⵠⲆᐃᐃⲆ] = Ⲇⵠ.ᐃᐃⵠⲆᐃᐃⲆ;
    ΔΔ[Xr.ⲆⵠⵠΔᐃⲆⵠ] = Ⲇⵠ.ⲆⵠⵠΔᐃⲆⵠ;
    ΔΔ[Xr.ᐃΔᐃⵠΔ] = [];
    ΔΔ[Xr.ᐃΔᐃⵠΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆΔᐃⲆⵠⲆ;
    ΔΔ[Xr.ᐃΔᐃⵠΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⲆᐃⵠⵠΔⲆ;
    ΔΔ[Xr.ᐃΔⲆⵠᐃⲆⵠ] = [];
    ΔΔ[Xr.ᐃΔⲆⵠᐃⲆⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆⵠᐃΔᐃⲆ;
    ΔΔ[Xr.ᐃΔⲆⵠᐃⲆⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃΔΔⵠΔⲆ;
    ΔΔ[Xr.ⲆⵠⲆᐃⵠⲆⵠ] = [];
    ΔΔ[Xr.ⲆⵠⲆᐃⵠⲆⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃΔᐃⵠⲆⵠ;
    ΔΔ[Xr.ⲆⵠⲆᐃⵠⲆⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃⲆΔⵠᐃⲆ;
    ΔΔ[Xr.ΔᐃΔΔΔᐃⲆ] = [];
    ΔΔ[Xr.ΔᐃΔΔΔᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃΔΔΔᐃⲆ;
    ΔΔ[Xr.ΔᐃΔΔΔᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃΔΔΔᐃⲆ;
    ΔΔ[Xr.ⵠⵠⵠᐃⲆΔΔ] = [];
    ΔΔ[Xr.ⵠⵠⵠᐃⲆΔΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠⵠᐃⲆΔΔ;
    ΔΔ[Xr.ⵠⵠⵠᐃⲆΔΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠⵠᐃⲆΔΔ;
    ΔΔ[Xr.ΔᐃᐃⵠΔΔⵠ] = [];
    ΔΔ[Xr.ΔᐃᐃⵠΔΔⵠ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔᐃᐃⵠΔΔⵠ;
    ΔΔ[Xr.ΔᐃᐃⵠΔΔⵠ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔᐃᐃⵠΔΔⵠ;
    ΔΔ[Xr.ᐃᐃᐃΔΔⲆᐃ] = Ⲇⵠ.ᐃᐃᐃΔΔⲆᐃ;
    ΔΔ[Xr.ᐃⵠⲆⵠⲆ] = [];
    ΔΔ[Xr.ᐃⵠⲆⵠⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆΔⲆᐃᐃᐃΔ;
    ΔΔ[Xr.ᐃⵠⲆⵠⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆⲆᐃⵠᐃⲆ;
    ΔΔ[Xr.ᐃΔⵠⵠᐃ] = [];
    ΔΔ[Xr.ᐃΔⵠⵠᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠⵠⲆⵠᐃⲆⵠ;
    ΔΔ[Xr.ᐃΔⵠⵠᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃΔΔᐃᐃΔⵠ;
    ΔΔ[Xr.ⵠⵠⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠⵠⲆᐃΔ][Xr.ⲆᐃΔ] = [Ⲇⵠ.ⲆᐃᐃⵠⲆᐃⵠ, Ⲇⵠ.ⵠΔᐃⵠΔᐃΔ, Ⲇⵠ.ΔᐃⲆΔⵠᐃⲆ, Ⲇⵠ.ⵠᐃΔᐃΔᐃⲆ, Ⲇⵠ.ΔⵠⵠⲆᐃᐃΔ, Ⲇⵠ.ΔⵠᐃΔᐃⵠⲆ, Ⲇⵠ.ᐃⵠᐃᐃΔⲆⵠ, Ⲇⵠ.ΔᐃᐃⲆⲆΔᐃ, Ⲇⵠ.ⵠᐃⵠⲆⵠⵠⲆ];
    ΔΔ[Xr.ⵠⵠⲆᐃΔ][Xr.ΔⲆⵠ] = [Ⲇⵠ.ⲆᐃΔᐃΔⵠᐃ, Ⲇⵠ.ⵠΔΔⲆΔΔⲆ, Ⲇⵠ.ᐃⲆⵠᐃᐃᐃΔ, Ⲇⵠ.ΔᐃⵠᐃΔᐃⵠ, Ⲇⵠ.ⵠᐃⵠⲆⲆᐃⲆ, Ⲇⵠ.ᐃΔⵠⲆᐃΔⵠ, Ⲇⵠ.ΔΔᐃⲆΔⲆⲆ, Ⲇⵠ.ΔᐃᐃⲆⲆΔᐃ, Ⲇⵠ.ⵠⵠᐃⲆⲆᐃΔ];
    ΔΔ[Xr.ⵠⵠᐃᐃΔ] = [];
    ΔΔ[Xr.ⵠⵠᐃᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃⲆⲆΔΔ;
    ΔΔ[Xr.ⵠⵠᐃᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃⲆΔⲆΔⲆΔ;
    ΔΔ[Xr.ΔⵠᐃⵠⵠΔΔ] = [];
    ΔΔ[Xr.ΔⵠᐃⵠⵠΔΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⵠᐃⲆⲆⵠⵠⲆ;
    ΔΔ[Xr.ΔⵠᐃⵠⵠΔΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.ΔⵠⵠⲆⵠᐃᐃ;
    ΔΔ[Xr.ᐃⵠⵠⲆᐃⵠᐃ] = [];
    ΔΔ[Xr.ᐃⵠⵠⲆᐃⵠᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ΔⲆⲆᐃⲆΔΔ;
    ΔΔ[Xr.ᐃⵠⵠⲆᐃⵠᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆᐃΔⵠΔⵠⵠ;
    ΔΔ[Xr.ⵠᐃᐃΔᐃ] = [];
    ΔΔ[Xr.ⵠᐃᐃΔᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃΔᐃᐃΔΔⵠ;
    ΔΔ[Xr.ⵠᐃᐃΔᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⲆⵠⲆⵠⲆΔᐃ;
    ΔΔ[Xr.ⵠⲆⵠΔᐃ] = [];
    ΔΔ[Xr.ⵠⲆⵠΔᐃ][Xr.ⲆᐃΔ] = Ⲇⵠ.ᐃⲆⵠⲆᐃᐃΔ;
    ΔΔ[Xr.ⵠⲆⵠΔᐃ][Xr.ΔⲆⵠ] = Ⲇⵠ.ⵠⵠΔΔΔΔΔ;
    ΔΔ[Xr.ⲆⵠΔᐃⲆ] = [];
    ΔΔ[Xr.ⲆⵠΔᐃⲆ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⵠⲆᐃΔΔⲆ;
    ΔΔ[Xr.ⲆⵠΔᐃⲆ][Xr.ΔⲆⵠ] = Ⲇⵠ.ᐃᐃⲆⲆᐃᐃⵠ;
    ΔΔ[Xr.ΔᐃᐃᐃΔ] = [];
    ΔΔ[Xr.ΔᐃᐃᐃΔ][Xr.ⲆᐃΔ] = Ⲇⵠ.ⲆⲆΔᐃᐃᐃⲆ;
    ΔΔ[Xr.ΔᐃᐃᐃΔ][Xr.ΔⲆⵠ] = Ⲇⵠ.Ⲇᐃᐃᐃⵠⵠᐃ;
    ΔΔ[Xr.ΔΔΔᐃⲆ] = [];
    ΔΔ[Xr.ΔΔΔᐃⲆ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ΔΔΔᐃⲆ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ΔΔΔᐃⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⲆΔⵠⲆΔᐃᐃΔ);
    ΔΔ[Xr.ΔΔΔᐃⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃⲆΔᐃⵠⲆΔᐃᐃ);
    ΔΔ[Xr.ΔΔΔᐃⲆ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⲆΔᐃᐃⵠⵠᐃⵠⵠ);
    ΔΔ[Xr.ΔΔΔᐃⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⵠⵠᐃΔᐃΔⵠΔ);
    ΔΔ[Xr.ΔΔΔᐃⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⵠⵠΔᐃⵠⲆΔⲆ);
    ΔΔ[Xr.ΔΔΔᐃⲆ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠⵠⵠⵠᐃΔΔᐃⵠ);
    ΔΔ[Xr.ΔⲆᐃⵠᐃ] = [];
    ΔΔ[Xr.ΔⲆᐃⵠᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ΔⲆᐃⵠᐃ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ΔⲆᐃⵠᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ᐃⲆΔΔⵠⲆⵠⵠⵠ);
    ΔΔ[Xr.ΔⲆᐃⵠᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠⲆΔᐃⲆᐃᐃᐃⵠ);
    ΔΔ[Xr.ΔⲆᐃⵠᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ⵠᐃⲆⲆⵠⵠⲆΔᐃ);
    ΔΔ[Xr.ΔⲆᐃⵠᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⲆⵠⲆⲆⲆⲆΔΔᐃ);
    ΔΔ[Xr.ΔⲆᐃⵠᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃᐃⲆᐃⵠΔⲆΔⲆ);
    ΔΔ[Xr.ΔⲆᐃⵠᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠⲆⲆⲆⲆⲆⲆⵠΔ);
    ΔΔ[Xr.ⵠᐃᐃⵠᐃ] = [];
    ΔΔ[Xr.ⵠᐃᐃⵠᐃ][Xr.ⲆᐃΔ] = [];
    ΔΔ[Xr.ⵠᐃᐃⵠᐃ][Xr.ΔⲆⵠ] = [];
    ΔΔ[Xr.ⵠᐃᐃⵠᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔᐃⲆⵠΔΔΔᐃⲆ);
    ΔΔ[Xr.ⵠᐃᐃⵠᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⲆΔⵠΔⲆⵠΔΔ);
    ΔΔ[Xr.ⵠᐃᐃⵠᐃ][Xr.ⲆᐃΔ].push(Ⲇⵠ.ΔⲆⲆΔΔⵠᐃΔΔ);
    ΔΔ[Xr.ⵠᐃᐃⵠᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠⲆΔᐃΔΔⵠⵠⲆ);
    ΔΔ[Xr.ⵠᐃᐃⵠᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ᐃⵠⵠⲆΔⲆⲆⵠᐃ);
    ΔΔ[Xr.ⵠᐃᐃⵠᐃ][Xr.ΔⲆⵠ].push(Ⲇⵠ.ⵠΔΔΔΔⲆΔΔᐃ);
    ⵠᐃΔⲆ.g = [];
    ⵠᐃΔⲆ.g[0] = [Ⲇⵠ.ⲆΔⵠⵠⵠⵠΔ, Ⲇⵠ.ΔΔᐃΔⵠⵠᐃ];
    ⵠᐃΔⲆ.g[1] = ⵠᐃΔⲆ.g[ya];
    ⵠᐃΔⲆ.g[xj] = [Ⲇⵠ.ᐃⵠΔΔⵠⵠⲆ, Ⲇⵠ.ΔΔᐃⲆⲆⲆᐃ];
    ⵠᐃΔⲆ.m = [];
    ⵠᐃΔⲆ.m[0] = [Ⲇⵠ.ΔⲆΔᐃᐃᐃᐃ, Ⲇⵠ.ΔΔᐃⵠᐃⵠΔ];
    ⵠᐃΔⲆ.m[1] = ⵠᐃΔⲆ.m[ya];
    ⵠᐃΔⲆ.m[Zh] = [Ⲇⵠ.ΔΔⵠΔᐃᐃᐃ, Ⲇⵠ.ᐃᐃΔⵠⲆⲆⵠ];
    ⵠᐃΔⲆ.la = [];
    ⵠᐃΔⲆ.la[ps] = [Ⲇⵠ.ΔᐃⵠΔⲆΔᐃ, Ⲇⵠ.ΔΔΔⵠΔⵠⲆ];
    ⵠᐃΔⲆ.la[Te] = ⵠᐃΔⲆ.la[zl];
    ⵠᐃΔⲆ.la[2] = ⵠᐃΔⲆ.la[0];
    ⵠᐃΔⲆ.la[fn] = ⵠᐃΔⲆ.la[ya];
    ⵠᐃΔⲆ.la[ol] = ⵠᐃΔⲆ.la[Rq];
    ⵠᐃΔⲆ.la[5] = ⵠᐃΔⲆ.la[0];
    ⵠᐃΔⲆ.s = [];
    ⵠᐃΔⲆ.s[Da] = [Ⲇⵠ.ΔⲆᐃΔᐃᐃᐃ, Ⲇⵠ.ⵠⵠⲆⲆᐃⵠⲆ];
    ⵠᐃΔⲆ.s[mk] = ⵠᐃΔⲆ.s[Lr];
    ⵠᐃΔⲆ.s[jk] = [Ⲇⵠ.ⵠⵠⲆⲆΔᐃⵠ, Ⲇⵠ.ⲆᐃⵠΔᐃⲆⵠ];
    ⵠᐃΔⲆ.p = [];
    ⵠᐃΔⲆ.p[ya] = [Ⲇⵠ.ⲆΔΔⲆΔᐃᐃ, Ⲇⵠ.ⲆΔΔⲆΔᐃᐃ];
    ⵠᐃΔⲆ.a = [];
    ⵠᐃΔⲆ.a[Hi] = [Ⲇⵠ.ΔⲆΔΔⵠⵠⲆ, Ⲇⵠ.ⵠᐃⵠΔⵠⲆΔ];
    ⵠᐃΔⲆ.a[1] = ⵠᐃΔⲆ.a[Kh];
    ⵠᐃΔⲆ.a[Yg] = ⵠᐃΔⲆ.a[mj];
    ⵠᐃΔⲆ.d = [];
    ⵠᐃΔⲆ.d[0] = [Ⲇⵠ.ᐃΔⵠᐃⲆᐃⵠ, Ⲇⵠ.ⵠᐃᐃᐃⲆⲆᐃ];
    ⵠᐃΔⲆ.d[1] = ⵠᐃΔⲆ.d[0];
    ⵠᐃΔⲆ.d[Jt] = ⵠᐃΔⲆ.d[0];
    ⵠᐃΔⲆ.re = [];
    ⵠᐃΔⲆ.re[Kh] = [Ⲇⵠ.ᐃⵠᐃᐃΔⵠᐃ, Ⲇⵠ.ⵠΔⲆΔⲆᐃΔ];
    ⵠᐃΔⲆ.re[qu] = ⵠᐃΔⲆ.re[Eh];
    ⵠᐃΔⲆ.re[Mt] = ⵠᐃΔⲆ.re[tg];
    ⵠᐃΔⲆ.f = [];
    ⵠᐃΔⲆ.f[ps] = [Ⲇⵠ.ΔᐃⵠᐃΔᐃᐃ, Ⲇⵠ.ⵠΔΔⵠⲆᐃᐃ];
    ⵠᐃΔⲆ.f[1] = ⵠᐃΔⲆ.f[0];
    ⵠᐃΔⲆ.f[2] = ⵠᐃΔⲆ.f[0];
    ⵠᐃΔⲆ.isl = [];
    ⵠᐃΔⲆ.isl[0] = [Ⲇⵠ.ΔΔΔⲆᐃΔΔ, Ⲇⵠ.ᐃⲆⵠΔᐃᐃⵠ];
    ⵠᐃΔⲆ.isl[Ug] = ⵠᐃΔⲆ.isl[0];
    ⵠᐃΔⲆ.isl[Yl] = ⵠᐃΔⲆ.isl[0];
    ⵠᐃΔⲆ.c = [];
    ⵠᐃΔⲆ.c[gu] = [Ⲇⵠ.ΔᐃⵠΔⲆⵠᐃ, Ⲇⵠ.ΔᐃⵠⲆⲆᐃⵠ];
    ⵠᐃΔⲆ.c[jh] = ⵠᐃΔⲆ.c[Pg];
    ⵠᐃΔⲆ.c[2] = ⵠᐃΔⲆ.c[tg];
    ⵠᐃΔⲆ.wtb = [];
    ⵠᐃΔⲆ.wtb[Eh] = [Ⲇⵠ.ⲆⲆⵠᐃⲆΔⲆ, Ⲇⵠ.ⲆᐃⲆⲆΔᐃⲆ];
    ⵠᐃΔⲆ.PIRANHA = [Ⲇⵠ.ΔΔΔⲆⲆⲆᐃ, Ⲇⵠ.ⵠⲆⵠⲆⲆⵠΔ];
    ⵠᐃΔⲆ.KRAKEN = [Ⲇⵠ.ⵠⲆⲆⲆⲆⵠⲆ, Ⲇⵠ.ⵠⲆΔΔⲆⵠⲆ];
    ⵠᐃΔⲆ.FOX = [Ⲇⵠ.ᐃⵠⲆΔᐃⲆⵠ, Ⲇⵠ.ⲆⵠΔᐃΔⲆᐃ];
    ⵠᐃΔⲆ.WOLF = [Ⲇⵠ.ⲆᐃⲆᐃᐃᐃⵠ, Ⲇⵠ.ⵠⲆⵠⵠΔᐃⵠ];
    ⵠᐃΔⲆ.SPIDER = [Ⲇⵠ.ⵠΔⲆⵠᐃΔⲆ, Ⲇⵠ.ᐃⵠᐃΔᐃΔᐃ];
    ⵠᐃΔⲆ.BEAR = [Ⲇⵠ.ΔⵠⲆⵠᐃⵠⵠ, Ⲇⵠ.ⲆΔΔⲆΔᐃⵠ];
    ⵠᐃΔⲆ.CAVE = [Ⲇⵠ.ⲆᐃᐃⵠΔⲆᐃ, Ⲇⵠ.ΔⲆᐃⲆⵠⲆⲆ];
    ⵠᐃΔⲆ.MAP = [Ⲇⵠ.ⲆᐃᐃⲆⲆⲆⵠ, Ⲇⵠ.ᐃΔᐃΔⵠΔΔ];
    ⵠᐃΔⲆ.FOREST = [Ⲇⵠ.ⵠⲆⲆⵠᐃⲆΔ, Ⲇⵠ.ⲆΔⲆΔⲆⲆⲆ];
    ⵠᐃΔⲆ.WINTER = [Ⲇⵠ.ⵠΔΔᐃΔᐃⵠ, Ⲇⵠ.ΔΔⲆᐃᐃΔⵠ];
    ⵠᐃΔⲆ.DESERT = [Ⲇⵠ.ⲆⵠᐃΔⵠⵠⵠ, Ⲇⵠ.ᐃⲆⵠΔⵠᐃᐃ];
    ⵠᐃΔⲆ.LAVA = [Ⲇⵠ.ᐃᐃᐃΔᐃΔΔ, Ⲇⵠ.ⲆⲆⲆΔⲆⲆᐃ];
    for (var b in ⵠᐃΔⲆ) {
      for (var c = ⵠᐃΔⲆ[b], d = Lr; d < c.length; d++) {
        var e = c[d];
        if (e.ⲆⲆⲆⵠᐃᐃⲆ !== Lj) {
          e.ⲆⲆⲆⵠᐃᐃⲆ();
        } else if (e.length > 0) {
          for (var f = 0; f < e.length; f++) {
            if (e[f].ⲆⲆⲆⵠᐃᐃⲆ !== wr) {
              e[f].ⲆⲆⲆⵠᐃᐃⲆ();
            }
          }
        }
      }
    }
    console.log(undefined, undefined);
  }
  function sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = hd;
    e.translate(Hh * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    cb(e, c[0]);
    e.translate(a * -20, -oh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    cb(e, c[Ol], c[2], pg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    cb(e, undefined, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    cb(e, undefined, c[Jt], a * ha);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    cb(e, c[Wg], c[Yl], a * rl);
    fb(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    cb(e, c[4]);
    fb(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    cb(e, c[Gi]);
    fb(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    cb(e, c[ol]);
    fb(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    cb(e, c[Al]);
    fb(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    cb(e, c[4]);
    fb(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    cb(e, c[nb]);
    fb(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    cb(e, c[qg]);
    fb(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    cb(e, c[4]);
    fb(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    cb(e, c[Vn]);
    fb(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    cb(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    cb(e, c[kq]);
    return d;
  }
  function hm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    cb(d, b[0]);
    return c;
  }
  function lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * al, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    cb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -Oj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, ar * a, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * Sq, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    cb(e, c[1], c[2], a * 6);
    return d;
  }
  function gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Tb(e, Qa, a * 40, a * 10);
    e.restore();
    cb(e, c[0], c[1], a * Uh);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Tb(e, Bs, a * 25.11521001172521, a * 10);
    e.restore();
    cb(e, c[Gl], c[3], a * 5);
    return d;
  }
  function um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    cb(e, mb, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    cb(e, Jg, c[cu], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    cb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    cb(e, c[fl], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    cb(e, c[1], c[ih], Mq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    cb(e, c[1], c[3], a * nb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    cb(e, c[xt], c[3], ol * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    cb(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    cb(e, ut, c[hl], Dt * a);
    return d;
  }
  function bm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var i = b * 142;
    var a = g / 2;
    var j = i / ss;
    e.width = g;
    e.height = i;
    f.translate(a, j + b * 7);
    f.globalAlpha = c ? 0.5 : fl;
    fb(f, Zj, Kh, b * 60);
    cb(f, d[0]);
    f.translate(Kh, b * -7);
    f.globalAlpha = 1;
    fb(f, Zj, tt, b * 60);
    cb(f, d[Ug], d[Mt], Pe * b);
    fb(f, Lr, Pg, b * 40);
    cb(f, d[3]);
    fb(f, 0, 0, b * 25);
    cb(f, d[Og], d[5], b * Bi);
    return e;
  }
  function vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * ih, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    wb(e, a * -16, a * -16.5, a * 32, a * 33, Rr * a);
    e.restore();
    cb(e, c[Gl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    cb(e, c[pq]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    wb(e, a * -15.5, a * -16, a * 31, a * 32, Lh * a);
    e.restore();
    cb(e, c[pq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    cb(e, c[Zg]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    wb(e, a * -16.5, a * -17.5, a * 33, a * 35, bh * a);
    e.restore();
    cb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    cb(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    wb(e, a * -io, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    cb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    cb(e, c[pq]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    wb(e, a * -18, a * -jg, a * 36, a * 38, N * a);
    e.restore();
    cb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    cb(e, c[bs]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    wb(e, a * -A, a * -17.5, a * 40, a * 35, a * Ys);
    e.restore();
    cb(e, c[pq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    cb(e, c[bs]);
    e.globalAlpha = 1;
    e.translate(0, a * -Zk);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    wb(e, a * -G, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    cb(e, c[3], c[ba], M * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    cb(e, Jg, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    wb(e, a * -15.5, a * -16, a * 31, a * 32, a * Lh);
    e.restore();
    cb(e, c[gl], c[4], Eg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    cb(e, Ul, c[4], Eg * a);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    wb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    cb(e, c[nq], c[Dt], q * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    cb(e, undefined, c[Gi], a * Oj);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    wb(e, a * -18, -Vq * a, a * 36, a * 36, Js * a);
    e.restore();
    cb(e, c[Tr], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    cb(e, Ul, c[Mq], a * ed);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    wb(e, a * -18, a * -19, a * 36, a * 38, a * Ar);
    e.restore();
    cb(e, c[ci], c[Og], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    cb(e, j, c[Og], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    wb(e, a * -20, a * -17.5, a * 40, a * 35, a * at);
    e.restore();
    cb(e, c[3], c[4], Pt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    cb(e, cn, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    Tb(e, Ss, a * 70.28669492273468, a * 10);
    e.restore();
    cb(e, c[lr]);
    e.save();
    e.translate(a * 98, a * 99);
    Tb(e, Qa, a * 56.455940020351264, yt * a);
    e.restore();
    cb(e, c[2]);
    e.globalAlpha = cu;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    Tb(e, 6, a * 70.28669492273468, a * te);
    e.restore();
    cb(e, c[5], c[Ss], a * Eg);
    e.save();
    e.translate(a * 98, a * 99);
    Tb(e, Ro, a * 56.455940020351264, Kg * a);
    e.restore();
    cb(e, c[Aq], c[Ml], Js * a);
    return d;
  }
  function dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, Pe * a);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, Cq * a, a * 16);
    e.closePath();
    cb(e, c[In]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    cb(e, c[Xn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    cb(e, c[Oq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    cb(e, c[Pn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * Ih, sh * a, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(il * a, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * W, a * 106.5, a * qu, a * 97);
    e.closePath();
    cb(e, c[Ks]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, E * a, a * 53, a * Vn, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    cb(e, Sl, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    cb(e, Hs, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * vi, a * 73, a * 12.5, a * 80.5, a * al, a * 72);
    e.closePath();
    cb(e, undefined, c[ba], Ss * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    cb(e, lj, c[4], fh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    cb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    cb(e, wr, c[Og], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    cb(e, undefined, c[4], a * ji);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * et, a * 55, a * 6);
    e.closePath();
    cb(e, Lj, c[fs], a * 6);
    return d;
  }
  function cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, js);
    e.translate(a * -110, 0);
    e.translate(Bo * a, gn * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    wb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    cb(e, c[Kh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, U * a);
    e.bezierCurveTo(a * 34, a * 10, Xk * a, a * 43, Oj * a, a * 76);
    e.bezierCurveTo(eh * a, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * ys, a * 164, $n * a, a * 156);
    e.bezierCurveTo(a * In, a * 186, a * It, a * 201, a * 43, a * 220);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    cb(e, c[Kh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    cb(e, c[Kh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    cb(e, c[Bg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    cb(e, c[wj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    cb(e, c[ya]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    cb(e, c[0]);
    e.translate(-Ra * a, a * -10);
    e.globalAlpha = cu;
    e.save();
    e.translate(a * 51.5, a * 342);
    wb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    cb(e, c[Ot], c[2], Eq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    cb(e, c[hl], c[4], qq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * Ck);
    e.bezierCurveTo(a * 34, a * 10, Ro * a, a * 43, a * Eq, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    cb(e, c[Xg], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    cb(e, c[$n], c[8], a * va);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    cb(e, Hs, c[He], Bs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    cb(e, Jo, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    cb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    cb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * Ph, a * 117, Hg * a, a * 110);
    e.bezierCurveTo(Bt * a, a * 115, $t * a, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    cb(e, c[7], c[8], nk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    cb(e, c[7], c[8], Na * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    cb(e, c[Lh], c[E], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    cb(e, c[7], c[He], a * Xk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    cb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    cb(e, c[ql], c[8], a * nk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    cb(e, c[3], c[ul], a * 6);
    return d;
  }
  function mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    cb(e, c[3], c[4], Mq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, ck * a, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, qi * a, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    cb(e, c[3], c[4], a * Vn);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(tg);
    wb(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    cb(e, c[zl], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    wb(e, a * -49, a * -12.5, a * 98, a * 25, eo * a);
    e.restore();
    cb(e, c[xj], c[mk], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    cb(e, c[xj], c[1], Pe * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    cb(e, c[Pn], c[cu], $i * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    cb(e, c[3], c[Dt], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    cb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Dl * a, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * Al, a * 14.3671875, a * Tg, a * 18.3671875, a * yh, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, vg * a, a * 56.3671875);
    e.closePath();
    cb(e, c[fn], c[fs], Fr * a);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    wb(e, a * -20.5, a * -20.5, a * 41, a * 41, a * te);
    e.restore();
    cb(e, undefined, c[5], fs * a);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    wb(e, a * -21, a * -20.5, a * 42, a * 41, a * gg);
    e.restore();
    cb(e, c[Ut], c[4], a * ks);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    wb(e, a * -10, -Wb * a, a * 20, a * 20, a * 5);
    e.restore();
    cb(e, c[6], c[ql], a * eg);
    return d;
  }
  function pm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, -sk * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    cb(d, b[Hi]);
    return c;
  }
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * kh, a * 129, a * 18, a * 114, th * a);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, Qh * a);
    e.bezierCurveTo(On * a, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    cb(e, c[Gl], c[3], Pe);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    cb(e, c[gu], c[mk], eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Xa, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(hh * a, a * 49, a * 19, a * 49, a * bl, a * 54);
    e.bezierCurveTo(a * 4, a * 43, Bo * a, a * 35, a * 20, a * 32);
    e.closePath();
    cb(e, c[Kh], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Vs * a, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * ro, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    cb(e, c[0], c[1], 4);
    return d;
  }
  function Tm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * oh;
    c.height = a * 35;
    wb(d, 0, gu, vi, 35, 7);
    cb(d, b[tg]);
    return c;
  }
  function fm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    fb(d, a * 126.5, a * 134, a * 119);
    cb(d, b[ya]);
    d.globalAlpha = 1;
    fb(d, a * 126.5, a * 124, a * 119);
    cb(d, b[fl], b[2], a * ks);
    fb(d, a * 126.5, a * 127, a * os);
    cb(d, b[3]);
    d.globalAlpha = 0.5;
    fb(d, a * 126.5, a * 135, a * 81);
    cb(d, b[0]);
    d.globalAlpha = 1;
    fb(d, a * 126.5, a * 125, a * 84);
    cb(d, b[4], b[Xg], a * 4);
    fb(d, a * 126.5, a * 125, a * 61);
    cb(d, b[fh], b[7], a * 4);
    d.globalAlpha = 0.5;
    fb(d, a * 126.5, a * 134, a * 40);
    cb(d, b[Ig]);
    d.globalAlpha = 1;
    fb(d, a * 126.5, a * 125, a * 40);
    cb(d, b[9]);
    return c;
  }
  function zm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    cb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    cb(d, b[2], b[ea], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    cb(d, b[2]);
    return c;
  }
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(pb * a, a * 5);
    e.globalAlpha = b ? ya : Lr;
    fb(e, a * 178.5, a * 172.828125, a * 150);
    cb(e, undefined, c[tg], a * 65);
    fb(e, a * 178.5, a * 172.828125, a * 150);
    cb(e, Lj, c[Zj], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    wb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    cb(e, c[ya]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    wb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    cb(e, c[Bg]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    wb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    cb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(ps, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    cb(e, c[0]);
    e.translate(Ob, a * -z);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    cb(e, c[Kh]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    cb(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = rg;
    e.translate(a * on, a * 35);
    fb(e, a * 178.5, a * 172.828125, a * 150);
    cb(e, T, c[2], a * 95);
    fb(e, a * 178.5, a * 172.828125, a * 150);
    cb(e, undefined, c[lb], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    wb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    cb(e, c[xt], c[Mt], a * oh);
    e.save();
    e.translate(a * 136, a * 581.828125);
    wb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    cb(e, c[Xn], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    wb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    cb(e, c[ie], c[2], Il * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    cb(e, c[za]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, Uh * a);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    cb(e, c[hs]);
    e.translate(Hi, -Uh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    cb(e, c[fl]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    cb(e, c[mk], c[1], a * 7);
    e.restore();
    return d;
  }
  function wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(In, fs * a);
    if (Gt === Eh) {
      e.globalAlpha = b ? 0.5 : hs;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(fl);
      Tb(e, 8, a * 41, a * J);
      cb(e, c[Bg]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    Tb(e, 8, a * 41, a * 10);
    cb(e, c[Xn], c[2], a * Pe);
    e.rotate(0.56);
    Tb(e, _a, a * 33, a * Bo);
    cb(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    Tb(e, 8, a * 24, aa * a);
    cb(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    wb(e, a * -9, a * -25.5, a * Vq, a * 51, a * 30);
    e.restore();
    cb(e, c[qg], c[$i], dg * a);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(ya);
    wb(e, a * -26, a * -9, a * 52, a * kn, a * 30);
    e.restore();
    cb(e, c[4], c[4], a * 2);
    fb(e, a * 45, a * 29, a * Tg);
    cb(e, c[5]);
    fb(e, a * 45, a * 61, a * 7);
    cb(e, c[5]);
    fb(e, a * 28, a * 45, a * 7);
    cb(e, c[5]);
    fb(e, a * 62, a * 45, a * Rr);
    cb(e, c[ll]);
    return d;
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(Rs, sg * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    cb(e, c[tg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, zn * a, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    cb(e, undefined, c[Rs], a * 11);
    e.translate(0, a * -q);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    cb(e, c[ru], c[Gl], a * 12);
    e.translate(Kh, a * 25);
    e.globalAlpha = Oq;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    cb(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    cb(e, c[1], c[xj], Ka * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    cb(e, undefined, c[2], a * Zr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    cb(e, Hs, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    cb(e, c[za], c[Zg], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    cb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    cb(e, c[qg], c[lr], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    cb(e, j, c[2], a * Nl);
    return d;
  }
  function Am(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var i = g.getContext("2d");
    if (e == Da) {
      var a = b * 270;
      var j = b * 250;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 140, b * 3);
      i.translate(b * -25, b * -to);
      i.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      i.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      i.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      i.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      i.bezierCurveTo(oh * b, b * 158, b * 35, b * 78, b * 59, b * 56);
      i.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      i.closePath();
      cb(i, d[mj]);
    } else if (e == fl) {
      a = b * 430;
      j = b * 350;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 180, b * 5);
      i.translate(b * -30, b * -60);
      i.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      i.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      i.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * Ns, b * 386);
      i.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      i.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      i.closePath();
      cb(i, d[Kh]);
    } else if (e == Gl) {
      a = b * 400;
      j = b * 300;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 80, b * 52);
      i.translate(b * -40, b * -30);
      i.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      i.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      i.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      i.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      i.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      i.closePath();
      cb(i, d[0]);
    }
    return g;
  }
  function km() {
    if (!Xw.ΔⲆΔΔ.open && !Xw.ᐃⲆⵠⲆΔ.open) {
      Xw.ΔΔᐃⵠ.open = _g;
      var b = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = lw.ⲆⲆⲆᐃⵠΔΔ;
      if (b) {
        for (var d = 0; d < pw.length; d++) {
          for (var e = pw[d][0], f = pw[d][fl], j = Hi; j < mf.ⲆΔⲆ[e].length; j++) {
            var k = mf.ⲆΔⲆ[e][j];
            var m = ᐃⵠΔⲆ.ΔΔⵠΔ(k, b);
            if (m < c) {
              c = m;
              Xw.ΔΔᐃⵠ.ΔΔΔⵠΔⲆΔ = f;
              Xw.ΔΔᐃⵠ.type = e;
              Xw.ΔΔᐃⵠ.open = true;
              Xw.ΔΔᐃⵠ.ⲆⲆᐃΔⵠⲆᐃ = k.info & 255;
              Xw.ΔΔᐃⵠ.ΔⲆⲆᐃΔᐃᐃ = (k.info & 65280) >> On;
              Xw.ΔΔᐃⵠ.Ⲇⵠⵠᐃ = k.Ⲇⵠⵠᐃ;
              Xw.ΔΔᐃⵠ.ⵠΔᐃⲆⲆ = k.id;
            }
          }
        }
        if (lw.ⲆⲆⲆᐃⵠΔΔ > c) {
          var p = ΔΔ[Xr.ΔⵠᐃΔⲆⵠⲆ];
          var h = (q = Zw.ΔᐃⵠⲆⵠⵠΔ).info.translate.x - 33;
          Mm(ho, p, h, Bg);
          if (Xw.ΔΔᐃⵠ.ⲆⲆᐃΔⵠⲆᐃ > 0) {
            q.ᐃⵠᐃⵠ(ho);
            var l = Xw.ΔΔᐃⵠ.ⲆⲆᐃΔⵠⲆᐃ;
            if (fl < l) {
              Gm(l, q);
            }
          }
          switch (Xw.ΔΔᐃⵠ.ΔΔΔⵠΔⲆΔ) {
            case _r.ᐃΔⵠⲆ:
              var q = Zw.ⲆΔΔⲆΔⲆᐃ;
              break;
            case _r.ᐃⲆⵠᐃ:
              q = Zw.ΔⲆΔᐃΔΔⲆ;
              break;
            case _r.ᐃⲆΔⵠ:
              q = Zw.ᐃⵠᐃⵠᐃᐃΔ;
              break;
            case _r.Ⲇⵠⵠⵠ:
              q = Zw.ⵠᐃᐃΔⲆΔᐃ;
              break;
            case _r.ᐃⵠᐃΔ:
              q = Zw.ⲆⵠⲆΔΔⲆⲆ;
          }
          if (wj < Xw.ΔΔᐃⵠ.ΔⲆⲆᐃΔᐃᐃ) {
            q.ᐃⵠᐃⵠ(ho);
            if ((l = Xw.ΔΔᐃⵠ.ΔⲆⲆᐃΔᐃᐃ) > 1) {
              Gm(l, q);
            }
          }
        }
      }
    }
  }
  function xm() {
    Xw.ΔⲆΔΔ.id = -Ot;
    Xw.ΔⲆΔΔ.lock = false;
    Xw.ΔⲆΔΔ.locked = false;
    Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ = f;
    Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ = false;
    Xw.ΔⲆΔΔ.open = Jn;
    var b = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
    var c = lw.ᐃᐃΔᐃⵠΔⲆ;
    if (b) {
      for (var d = Rq; d < mf.ⲆΔⲆ[ow.ᐃⲆⲆⲆⲆ].length; d++) {
        var e = mf.ⲆΔⲆ[ow.ᐃⲆⲆⲆⲆ][d];
        var g = ᐃⵠΔⲆ.ΔΔⵠΔ(e, b);
        if (g < c) {
          c = g;
          Xw.ΔⲆΔΔ.open = true;
          Xw.ΔⲆΔΔ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          Xw.ΔⲆΔΔ.ⵠᐃⵠⲆ = e.info;
          Xw.ΔⲆΔΔ.Ⲇⵠⵠᐃ = e.Ⲇⵠⵠᐃ;
          Xw.ΔⲆΔΔ.ⵠΔᐃⲆⲆ = e.id;
          Xw.ΔⲆΔΔ.locked = e.lock;
          Xw.ΔⲆΔΔ.lock = e.lock && e.Ⲇⵠⵠᐃ != Xw.id && !Xw.ᐃⲆⵠⲆⵠⵠᐃ(e.Ⲇⵠⵠᐃ) ? fg : wt;
          Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ = e.Ⲇⵠⵠᐃ === Xw.id && !Xw.ΔⲆΔΔ.locked && Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⵠⵠⲆⵠᐃ) != -1;
          if (Xw.ΔⲆΔΔ.locked && -qu != Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ᐃⵠᐃⲆⵠ)) {
            Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ = true;
          }
        }
      }
      if (lw.ᐃᐃΔᐃⵠΔⲆ > c) {
        var j = ΔΔ[Xr.ΔⲆᐃΔᐃᐃⲆ];
        var k = Zw.ⲆⵠΔ[gu];
        var m = Math.floor(k.info.translate.x + (k.info.ⵠⵠ[0].width - j.width) / xj);
        var p = Math.floor(k.info.translate.y + (k.info.ⵠⵠ[tg].height - j.height) / H) + Ut;
        Mm(ho, j, m, p);
        if ((!Xw.ΔⲆΔΔ.lock || Xw.id === Xw.ΔⲆΔΔ.Ⲇⵠⵠᐃ) && Xw.ΔⲆΔΔ.id >= In) {
          (k = Zw.ⲆⵠΔ[Xw.ΔⲆΔΔ.id]).ᐃⵠᐃⵠ(ho);
          var h = Xw.ΔⲆΔΔ.ⵠᐃⵠⲆ;
          if (h > 1) {
            Gm(h, k);
          }
        }
        if (Xw.ΔⲆΔΔ.lock) {
          Zw.ΔΔᐃⵠⵠⵠⵠ.ᐃⵠᐃⵠ(ho);
        } else if (Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ) {
          Zw.ⲆΔⵠᐃⲆⵠⲆ.ᐃⵠᐃⵠ(ho);
        }
        if (Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ) {
          Zw.ⵠᐃⲆΔΔⲆΔ.ᐃⵠᐃⵠ(ho);
        }
      }
    }
  }
  function Jm() {
    var a = Zw.Ⲇⵠᐃⵠⵠ;
    var b = a.id;
    if (a.ⵠⲆⲆᐃⲆ === hd && a.display === Ol) {
      if (ⵠⲆᐃᐃΔ[b] === undefined) {
        ⵠⲆᐃᐃΔ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = Ft[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[ya]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          Gt = xq;
          for (; e.length > Gt; Gt++) {
            f = Math.max(f, d.measureText(e[Gt]).width);
          }
          var g = f + 35;
          var h = ya;
          h = e.length === 1 ? 55 : H === e.length ? 85 : (e.length - lr) * 26 + 85;
          c.width = g;
          c.height = h;
          wb(d, 0, 0, g, h, Zk);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (ie <= e.length) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[Rs], _h, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], v, 55);
            h = 55;
          }
          if (e.length >= Ut) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            Gt = Zg;
            for (; Gt < e.length; Gt++) {
              d.fillText(e[Gt], nt, h + 28);
              h += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ΔᐃⲆⵠ === rg) {
        Mm(ho, ⵠⲆᐃᐃΔ[b], a.x, a.y);
      } else if (lo < a.x - 80 + ⵠⲆᐃᐃΔ[b].width) {
        Mm(ho, ⵠⲆᐃᐃΔ[b], lo - ⵠⲆᐃᐃΔ[b].width - Kg, a.y - ⵠⲆᐃᐃΔ[b].height - Ds);
      } else {
        Mm(ho, ⵠⲆᐃᐃΔ[b], a.x - 80, a.y - ⵠⲆᐃᐃΔ[b].height - Wb);
      }
    }
  }
  function Mm(b, c, d, e, f, g, i, a, j, h) {
    if (c.ⲆⲆⲆⵠᐃᐃⲆ === undefined || c.ⲆⲆⲆⵠᐃᐃⲆ() === 1) {
      if (Jo !== h) {
        b.drawImage(c, d, e, Math.max(mk, f), Math.max(1, g), i, a, j, h);
      } else if (g !== wr) {
        b.drawImage(c, d, e, f, g);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function Bm() {
    Xw.ⲆᐃⵠᐃⲆ.open = Fh;
    var a = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
    var b = lw.ⲆⵠᐃⲆⲆΔⲆ;
    if (a) {
      for (var c = gu; c < mf.ⲆΔⲆ[ow.ⲆⲆⵠⵠᐃ].length; c++) {
        var d = mf.ⲆΔⲆ[ow.ⲆⲆⵠⵠᐃ][c];
        var e = ᐃⵠΔⲆ.ΔΔⵠΔ(d, a);
        if (e < b) {
          b = e;
          Xw.ⲆᐃⵠᐃⲆ.open = Kl;
          Xw.ⲆᐃⵠᐃⲆ.Ⲇⵠⵠᐃ = d.Ⲇⵠⵠᐃ;
          Xw.ⲆᐃⵠᐃⲆ.ⵠΔᐃⲆⲆ = d.id;
        }
      }
      if (lw.ⲆⵠᐃⲆⲆΔⲆ > b) {
        Zw.ⲆᐃⵠᐃⲆ.ᐃⵠᐃⵠ(ho);
      }
    }
  }
  function Dm() {
    if (Db < Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length) {
      var b = {
        x: Zw.ΔΔΔⲆⵠ.translate.x,
        y: Zw.ΔΔΔⲆⵠ.translate.y - Co * 120
      };
    } else {
      b = {
        x: Zw.ΔΔΔⲆⵠ.translate.x,
        y: Zw.ΔΔΔⲆⵠ.translate.y - Co * 50
      };
    }
    ho.globalAlpha = 0.8;
    var c = ΔΔ[Xr.ⲆⲆⵠⵠⵠⲆΔ][mf.time];
    Mm(ho, c, b.x, b.y);
    ho.globalAlpha = 1;
    if (-qu < Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.x) {
      ho.fillStyle = "#660000";
      fb(ho, b.x + Co * Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.x, b.y + Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.y * Co, Co * ed);
      ho.fill();
    }
    var d = Co;
    for (var f = Zw.ΔΔΔⲆⵠ.ⵠΔΔⲆ, g = mj; g < f.length; g++) {
      var h = f[g];
      mf.time;
      ho.fillStyle = "#ff0000";
      fb(ho, b.x + Co * (h.x / (mf.ⵠⲆᐃⲆᐃ * 100) * 193), b.y + Co * (h.y / (mf.ⲆⵠⲆⵠᐃ * 100) * 193), Co * 2);
      ho.fill();
    }
    var i = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
    if (i) {
      ho.fillStyle = mf.time ? "#fff" : "#e39716";
      fb(ho, b.x + Co * (i.x / (mf.ⵠⲆᐃⲆᐃ * Nn) * 193), b.y + Co * (i.y / (mf.ⲆⵠⲆⵠᐃ * 100) * 193), eh * Co);
      ho.fill();
    }
    Co = d;
  }
  function Im() {
    if (!Xw.ΔⲆΔΔ.open && !Xw.ᐃⲆⵠⲆΔ.open) {
      Xw.ᐃⵠᐃᐃ.open = false;
      var b = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = lw.ⵠᐃⲆᐃⲆᐃᐃ;
      if (b) {
        for (var d = 0; d < mf.ⲆΔⲆ[ow.ⵠΔⲆⲆΔ].length; d++) {
          var e = mf.ⲆΔⲆ[ow.ⵠΔⲆⲆΔ][d];
          var f = ᐃⵠΔⲆ.ΔΔⵠΔ(e, b);
          if (c > f) {
            c = f;
            Xw.ᐃⵠᐃᐃ.open = true;
            Xw.ᐃⵠᐃᐃ.ΔⲆΔⲆᐃΔⵠ = e.info & 255;
            Xw.ᐃⵠᐃᐃ.ΔⲆⵠⵠΔ = (e.info & 65280) >> Hr;
            Xw.ᐃⵠᐃᐃ.Ⲇⵠⵠᐃ = e.Ⲇⵠⵠᐃ;
            Xw.ᐃⵠᐃᐃ.ⵠΔᐃⲆⲆ = e.id;
          }
        }
        if (lw.ⵠᐃⲆᐃⲆᐃᐃ > c) {
          var g = ΔΔ[Xr.ᐃᐃⲆᐃⵠⲆⵠ];
          var j = (k = Zw.ⵠⵠⲆⵠΔⵠΔ).info.translate.x - 33;
          Mm(ho, g, j, In);
          if (Xw.ᐃⵠᐃᐃ.ΔⲆΔⲆᐃΔⵠ > 0) {
            k.ᐃⵠᐃⵠ(ho);
            if ((a = Xw.ᐃⵠᐃᐃ.ΔⲆΔⲆᐃΔⵠ) > 1) {
              Gm(a, k);
            }
          }
          var a;
          var k = Zw.ΔᐃΔⲆᐃΔᐃ;
          if (Xw.ᐃⵠᐃᐃ.ΔⲆⵠⵠΔ > 0) {
            k.ᐃⵠᐃⵠ(ho);
            if ((a = Xw.ᐃⵠᐃᐃ.ΔⲆⵠⵠΔ) > 1) {
              Gm(a, k);
            }
          }
        }
      }
    }
  }
  function Em(a, b, c) {
    var d = ΔΔ[Xr.ΔΔΔᐃⵠΔⵠ][a];
    var e = b.info.translate.x + Co * Wl;
    var f = b.info.translate.y + Co * ta;
    if (b.info.state == Zv || c) {
      f += Uh * Co;
    }
    Mm(ho, d, e, f);
  }
  function Sm() {
    Xw.ΔⵠⲆᐃᐃ.id = -Xn;
    Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ = -mk;
    if (!Xw.ᐃⲆⲆΔΔᐃᐃ && !Xw.ΔⵠⲆᐃᐃ.wait && !Xw.ⲆᐃⲆⵠᐃ) {
      var b = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = lw.ⵠΔΔⵠΔΔⵠⲆⵠ;
      if (b) {
        for (var d = tt; d < mf.ⲆΔⲆ[ow.ⲆⵠᐃᐃΔ].length; d++) {
          var e = mf.ⲆΔⲆ[ow.ⲆⵠᐃᐃΔ][d];
          var f = ᐃⵠΔⲆ.ΔΔⵠΔ(e, b);
          if (f < c) {
            c = f;
            Xw.ΔⵠⲆᐃᐃ.id = e.id;
            Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ = e.Ⲇⵠⵠᐃ;
            Xw.ΔⵠⲆᐃᐃ.info = e.info;
            Xw.ΔⵠⲆᐃᐃ.lock = (e.info & 16) >> Dt;
          }
        }
      }
      var g = Zw.ᐃⵠᐃᐃⲆ;
      Zw.ᐃⵠᐃᐃⲆ = -1;
      if (Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ == -za || Xw.ᐃΔⲆⲆⵠ.length != 0 && Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ != Xw.id) {
        if (Xw.ᐃΔⲆⲆⵠ.length != 0 && Xw.ᐃΔⲆⲆⵠ[0] != Xw.id) {
          Zw.ᐃⵠᐃᐃⲆ = kw.ᐃⵠᐃⲆΔΔⵠ;
        } else if (Xw.ᐃΔⲆⲆⵠ.length != 0 && Xw.id == Xw.ᐃΔⲆⲆⵠ[ps]) {
          Zw.ᐃⵠᐃᐃⲆ = kw.ⵠᐃᐃⵠᐃΔΔ;
        } else if (Xw.ᐃΔⲆⲆⵠ.length != 0) {
          Zw.ᐃⵠᐃᐃⲆ = kw.ΔᐃΔΔΔⲆⲆ;
        }
      } else if (wj == Xw.ᐃΔⲆⲆⵠ.length && E <= Xw.ΔⵠⲆᐃᐃ.info) {
        Zw.ᐃⵠᐃᐃⲆ = kw.ᐃⲆΔⵠᐃⵠⵠ;
      } else if (Xw.ᐃΔⲆⲆⵠ.length == 0) {
        Zw.ᐃⵠᐃᐃⲆ = kw.ΔᐃΔΔΔⲆⲆ;
      } else {
        Zw.ᐃⵠᐃᐃⲆ = kw.ᐃⲆᐃⲆⵠⵠΔ;
      }
      if (Zw.ᐃⵠᐃᐃⲆ != -1) {
        Zw.ⲆΔⵠᐃᐃ[Zw.ᐃⵠᐃᐃⲆ].button.ᐃⵠᐃⵠ(ho);
      }
      var h = document.getElementById("team_box").style;
      if (Zw.ᐃⵠᐃᐃⲆ != -hd && Zw.ᐃⵠᐃᐃⲆ != g && h.display == "inline-block") {
        Zw.ⲆΔⵠᐃᐃ[Zw.ᐃⵠᐃᐃⲆ].action();
      }
    }
  }
  function Qm() {
    if (Xw.reconnect.enabled) {
      ho.globalAlpha = 0.9;
      ho.fillStyle = "#000";
      wb(ho, bo - 150, lq - 90, 300, 180, _o);
      ho.fill();
      ho.globalAlpha = cu;
      var a = ΔΔ[Xr.ⵠᐃⲆΔⲆΔⲆ];
      ho.save();
      Xw.reconnect.rotate = (Xw.reconnect.rotate + _w * 2) % (Gl * Math.PI);
      ho.translate(lo / Yg, jq / 2 - 25);
      ho.rotate(Xw.reconnect.rotate);
      Mm(ho, a, -a.width / Pn, -a.height / ih);
      ho.restore();
      a = ΔΔ[Xr.ⵠⵠᐃⵠⲆⲆⲆ];
      Mm(ho, a, (lo - a.width) / 2, (jq - a.height) / dg + 25);
    }
  }
  function _m() {
    if (Xw.ⲆⲆΔΔΔᐃᐃ) {
      ho.globalAlpha = 0.5;
      ho.fillStyle = "#000";
      ho.fillRect(0, tt, lo, jq);
      ho.globalAlpha = 0.8;
      var b = ΔΔ[Xr.ⲆⵠᐃΔⲆΔⲆ][mf.time];
      var c = bo - b.width / pq;
      var d = lq - b.height / Gl;
      Mm(ho, b, c, d);
      ho.globalAlpha = za;
      if (Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.x > -1) {
        ho.fillStyle = "#660000";
        fb(ho, c + Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.x * 3 * Co, d + Co * (Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.y * Ob), Wr * Co);
        ho.fill();
      }
      for (var e = Zw.ΔΔΔⲆⵠ.ⵠΔΔⲆ, f = 0; f < e.length; f++) {
        var g = e[f];
        mf.time;
        ho.fillStyle = "#ff0000";
        fb(ho, c + Co * (g.x / (mf.ⵠⲆᐃⲆᐃ * 100) * 600), d + g.y / (ar * mf.ⲆⵠⲆⵠᐃ) * 600 * Co, Co * Ss);
        ho.fill();
      }
      var h = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      if (h) {
        ho.fillStyle = mf.time ? "#fff" : "#e39716";
        fb(ho, c + Co * (h.x / (mf.ⵠⲆᐃⲆᐃ * 100) * 600), d + Co * (h.y / (mf.ⲆⵠⲆⵠᐃ * 100) * 600), eb * Co);
        ho.fill();
      }
    }
  }
  function Fm() {
    if (!Xw.ΔⲆΔΔ.open && !Xw.ᐃⲆⵠⲆΔ.open && !Xw.ᐃⵠᐃᐃ.open && !Xw.ⲆᐃⵠΔ.open && !Xw.ΔΔᐃⵠ.open) {
      Xw.sign.open = dr;
      var a = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var b = lw.ᐃᐃΔⵠᐃᐃᐃ;
      if (a) {
        for (var c = 0; c < mf.ⲆΔⲆ[ow.ⵠΔᐃᐃᐃ].length; c++) {
          var d = mf.ⲆΔⲆ[ow.ⵠΔᐃᐃᐃ][c];
          var e = ᐃⵠΔⲆ.ΔΔⵠΔ(d, a);
          if (b > e && d.info === 0 && d.Ⲇⵠⵠᐃ === Xw.id) {
            Xw.sign.open = true;
            b = e;
            Xw.sign.ⵠΔᐃⲆⲆ = d.id;
          }
        }
        if (lw.ᐃᐃΔⵠᐃᐃᐃ > b) {
          Zw.sign.button.ᐃⵠᐃⵠ(ho);
        }
      }
    }
  }
  function Rm() {
    if (!Xw.ΔⲆΔΔ.open && !Xw.ᐃⲆⵠⲆΔ.open && !Xw.ᐃⵠᐃᐃ.open && !Xw.ΔΔᐃⵠ.open) {
      Xw.ⲆᐃⵠΔ.open = ts;
      var b = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = lw.ΔⵠⵠⵠᐃΔᐃ;
      if (b) {
        for (var d = gu; d < mf.ⲆΔⲆ[ow.Δᐃᐃᐃᐃ].length; d++) {
          var e = mf.ⲆΔⲆ[ow.Δᐃᐃᐃᐃ][d];
          var f = ᐃⵠΔⲆ.ΔΔⵠΔ(e, b);
          if (c > f) {
            c = f;
            Xw.ⲆᐃⵠΔ.open = xh;
            Xw.ⲆᐃⵠΔ.ⲆⲆᐃΔⵠⲆᐃ = e.info & 31;
            Xw.ⲆᐃⵠΔ.ΔⲆⵠⵠΔ = (e.info & 992) >> 5;
            Xw.ⲆᐃⵠΔ.ⲆⲆⲆᐃΔⲆΔ = (e.info & 31744) >> 10;
            Xw.ⲆᐃⵠΔ.Ⲇⵠⵠᐃ = e.Ⲇⵠⵠᐃ;
            Xw.ⲆᐃⵠΔ.ⵠΔᐃⲆⲆ = e.id;
          }
        }
        if (c < lw.ΔⵠⵠⵠᐃΔᐃ) {
          var g = ΔΔ[Xr.ᐃⵠⲆⵠⲆⲆⵠ];
          var j = (a = Zw.ᐃᐃᐃᐃⵠΔⲆ).info.translate.x - 32;
          Mm(ho, g, j, 0);
          if (Xw.ⲆᐃⵠΔ.ⲆⲆᐃΔⵠⲆᐃ > Db) {
            a.ᐃⵠᐃⵠ(ho);
            if ((k = Xw.ⲆᐃⵠΔ.ⲆⲆᐃΔⵠⲆᐃ) > 1) {
              Gm(k, a);
            }
          }
          var a = Zw.ᐃⲆΔⵠᐃⲆⲆ;
          if (Xw.ⲆᐃⵠΔ.ⲆⲆⲆᐃΔⲆΔ > 0) {
            a.ᐃⵠᐃⵠ(ho);
            if ((k = Xw.ⲆᐃⵠΔ.ⲆⲆⲆᐃΔⲆΔ) > 1) {
              Gm(k, a);
            }
          }
          a = Zw.ΔⵠⲆⵠΔⵠⲆ;
          if (Xw.ⲆᐃⵠΔ.ΔⲆⵠⵠΔ > 0) {
            a.ᐃⵠᐃⵠ(ho);
            var k = Xw.ⲆᐃⵠΔ.ΔⲆⵠⵠΔ;
            if (lb < k) {
              Gm(k, a);
            }
          }
        }
      }
    }
  }
  function Gm(a, b) {
    ΔΔ[Xr.ᐃⲆ][a] ||= od(Co, "x" + a, m, "#FFF");
    var c = ΔΔ[Xr.ᐃⲆ][a];
    var d = b.info.translate.x + b.info.ⵠⵠ[0].width - c.width - Sq * Co;
    var e = b.info.translate.y + b.info.ⵠⵠ[Db].height - c.height - Co * pg;
    if (Zv == b.info.state) {
      e += nr * Co;
    }
    Mm(ho, c, d, e);
  }
  function jm() {
    if (!Xw.ΔⲆΔΔ.open) {
      Xw.ᐃⲆⵠⲆΔ.ⵠᐃⵠⲆ = wj;
      Xw.ᐃⲆⵠⲆΔ.open = false;
      var b = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = lw.ΔΔⵠᐃΔⵠᐃ;
      if (b) {
        for (var d = 0; mf.ⲆΔⲆ[ow.ⲆᐃΔᐃⵠ].length > d; d++) {
          var e = mf.ⲆΔⲆ[ow.ⲆᐃΔᐃⵠ][d];
          var f = ᐃⵠΔⲆ.ΔΔⵠΔ(e, b);
          if (f < c) {
            c = f;
            Xw.ᐃⲆⵠⲆΔ.open = true;
            Xw.ᐃⲆⵠⲆΔ.ⵠᐃⵠⲆ = e.info;
            Xw.ᐃⲆⵠⲆΔ.Ⲇⵠⵠᐃ = e.Ⲇⵠⵠᐃ;
            Xw.ᐃⲆⵠⲆΔ.ⵠΔᐃⲆⲆ = e.id;
          }
        }
        if (c < lw.ΔΔⵠᐃΔⵠᐃ) {
          var g = ΔΔ[Xr.ⵠⲆᐃΔᐃΔⲆ];
          var j = Zw.ⲆΔⲆᐃⵠⵠᐃ;
          var a = Math.floor(j.info.translate.x + (j.info.ⵠⵠ[ps].width - g.width) / 2);
          var k = Math.floor(j.info.translate.y + (j.info.ⵠⵠ[0].height - g.height) / pq) + Wg;
          Mm(ho, g, a, k);
          if (gu < Xw.ᐃⲆⵠⲆΔ.ⵠᐃⵠⲆ) {
            j.ᐃⵠᐃⵠ(ho);
            var h = Xw.ᐃⲆⵠⲆΔ.ⵠᐃⵠⲆ;
            if (h > xt) {
              Gm(h, j);
            }
          }
        }
      }
    }
  }
  ⵠⲆᐃᐃΔ = [];
  ᐃᐃⵠⵠᐃᐃᐃ = [];
  var Lm = [];
  function Wm() {
    ho.save();
    var a = Co;
    if (Xw.ⲆΔᐃΔ.ΔΔᐃΔᐃ.x < 0.25) {
      ho.globalAlpha = Xw.ⲆΔᐃΔ.ᐃⵠᐃⵠⲆᐃⵠ.ΔΔⲆ;
    }
    var b = zl < Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length ? -70 : Kh;
    if (Xw.ΔⲆΔΔ.open || Xw.ᐃⲆⵠⲆΔ.open && Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⵠᐃⵠⵠ) != -1 || Xw.ᐃⵠᐃᐃ.open && Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⲆΔΔᐃⵠ) != -js || Xw.ΔΔᐃⵠ.open && Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⵠᐃⵠⵠ) != -1 || Xw.ᐃⵠⵠΔⲆ.open && Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ΔΔᐃΔΔ) != -1 || Xw.ⲆᐃⵠΔ.open && (-lb != Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⵠᐃⵠⵠ) || -hs != Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ᐃⵠᐃⵠᐃ))) {
      b -= Co * 50;
    }
    ho.translate((lo - Co * 950) / 2, b);
    ho.fillStyle = "#69A148";
    ho.fillRect(this.translate.x + Co * 37, this.translate.y + Mh * Co, Co * (Xw.ⲆΔᐃΔ.ΔΔᐃΔᐃ.x * 178), Co * 18);
    ho.globalAlpha = 1;
    if (Xw.ⲆΔᐃΔ.ⵠⲆΔΔΔᐃΔ.x < 0.35) {
      ho.fillStyle = "#8F050A";
      ho.globalAlpha = Xw.ⲆΔᐃΔ.ⲆⲆᐃⵠᐃⵠⲆ.ΔΔⲆ;
      ho.fillRect(this.translate.x + Co * 277, this.translate.y + Ri * Co, Co * 178, Co * 18);
      ho.globalAlpha = 1;
    }
    ho.fillStyle = "#AF352A";
    ho.fillRect(this.translate.x + Co * 277, this.translate.y + Co * hg, Xw.ⲆΔᐃΔ.ⵠⲆΔΔΔᐃΔ.x * 178 * Co, Co * 18);
    if (Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.x < 0.35) {
      ho.fillStyle = "#366B91";
      ho.globalAlpha = Xw.ⲆΔᐃΔ.ᐃⲆⵠΔⲆΔΔ.ΔΔⲆ;
      ho.fillRect(this.translate.x + Co * 517, this.translate.y + Un * Co, Co * 178, Co * 18);
      ho.globalAlpha = 1;
    }
    ho.fillStyle = "#669BB1";
    ho.fillRect(this.translate.x + Co * 517, this.translate.y + Co * 17, Co * (Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.x * 178), Co * W);
    if (Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.x > 0.99) {
      if (Xw.ⲆΔᐃΔ.ΔⲆⲆΔⵠ.x < 0.35) {
        ho.fillStyle = "#6C4036";
        ho.globalAlpha = Xw.ⲆΔᐃΔ.ⲆᐃᐃᐃⲆⵠᐃ.ΔΔⲆ;
        ho.fillRect(this.translate.x + Co * 517, this.translate.y + Co * 17, Co * 178, Co * Gg);
        ho.globalAlpha = Oq;
      }
      ho.fillStyle = "#9C4036";
      ho.fillRect(this.translate.x + Co * 517, this.translate.y + Yo * Co, (1 - Xw.ⲆΔᐃΔ.ΔⲆⲆΔⵠ.x) * 178 * Co, Ik * Co);
    }
    if (Xw.ⲆΔᐃΔ.ⲆᐃⵠΔΔⲆΔ.x < 0.35) {
      ho.fillStyle = "#001A57";
      ho.globalAlpha = Xw.ⲆΔᐃΔ.ΔΔᐃⲆᐃⲆⲆ.ΔΔⲆ;
      ho.fillRect(this.translate.x + Co * 757, this.translate.y + hg * Co, Co * 178, Co * 18);
      ho.globalAlpha = 1;
    }
    ho.fillStyle = "#074A87";
    ho.fillRect(this.translate.x + Co * 757, this.translate.y + et * Co, Co * (Xw.ⲆΔᐃΔ.ⲆᐃⵠΔΔⲆΔ.x * 178), Co * 18);
    Co = a;
    Mm(ho, this.ⵠⵠ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    ho.restore();
    if (Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.x < 0.99) {
      var c = Math.floor(bo - ΔΔ[Xr.ΔΔΔΔⵠΔΔ].width / Zg);
      b += this.translate.y - ΔΔ[Xr.ΔΔΔΔⵠΔΔ].height - Co * 5;
      ho.fillStyle = "#BBE8EF";
      ho.fillRect(c + 5, b + Co * Oj, Co * 588 * Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.x, Co * 10);
      if (Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.x < 0.35) {
        ho.fillStyle = "#9BA8AF";
        ho.globalAlpha = Xw.ⲆΔᐃΔ.ⲆⲆⲆΔⲆⵠⵠ.ΔΔⲆ;
        ho.fillRect(c + Wl, b + 5, Co * 588, Co * 10);
        ho.globalAlpha = hs;
      }
      Mm(ho, ΔΔ[Xr.ΔΔΔΔⵠΔΔ], c, b);
      this.y = b;
    }
  }
  function Om() {
    for (var b = Xw.ᐃΔᐃⵠ, c = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ], d = Kh; d < b.ⲆᐃⲆⲆΔ.length; d++) {
      var e = b.ⲆᐃⲆⲆΔ[d];
      var f = false;
      if ((c = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ]) && (e.id == c.right || e.id == c.ⵠΔⵠⲆᐃ && tt < c.ⵠΔⵠⲆᐃ)) {
        f = true;
        Mm(ho, e.info.ⵠⵠ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ᐃⵠᐃⵠ(ho);
      }
      var g = Xw.ᐃΔᐃⵠ.ⲆΔΔ[e.id];
      if (g > 1) {
        Gm(g, e);
      }
      if (g > Rs) {
        Em(d, e, f);
      }
      var h = Xw.ΔⲆΔΔ;
      if (!!h.open && (h.id < wj || h.id == e.id) && (!h.lock || Xw.id == h.Ⲇⵠⵠᐃ)) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
      if (Xw.ᐃⲆⵠⲆΔ.open && e.id == _r.ⵠᐃⵠⵠ) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
      if (Xw.ᐃⵠⵠΔⲆ.open && _r.ΔΔᐃΔΔ == e.id) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
      if (Xw.ᐃⵠᐃᐃ.open && e.id == _r.ⲆΔΔᐃⵠ) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
      if (Xw.ΔΔᐃⵠ.open && e.id == _r.ⵠᐃⵠⵠ) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
      if (!!Xw.ⲆᐃⵠΔ.open && (e.id == _r.ⵠᐃⵠⵠ || e.id == _r.ᐃⵠᐃⵠᐃ)) {
        Zw.ⲆⵠᐃΔⲆ[e.id].ᐃⵠᐃⵠ(ho);
      }
    }
    if (e && d < b.max) {
      var j = ΔΔ[Xr.ΔᐃⵠⲆᐃΔΔ][ss];
      ᐃᐃ = e.info.translate.x;
      ⵠⲆⵠ = e.info.translate.y;
      ⵠΔⲆᐃ = fl;
      for (; d < b.max; d++, ⵠΔⲆᐃ++) {
        Mm(ho, j, ᐃᐃ + ⵠΔⲆᐃ * (j.width + 5), ⵠⲆⵠ);
      }
    }
  }
  function Nm() {
    var a = Xw.ΔⵠⲆᐃᐃ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      ho.save();
      var c = ΔΔ[Xr.ⲆⲆⵠᐃΔⵠᐃ];
      var d = ΔΔ[Xr.ᐃⵠᐃⵠᐃⵠΔ].height + Co * 25;
      ho.translate(c.width, Zw.ⲆΔᐃΔ.translate.y - Co * 188 - d);
      var e = -c.width / 2 - Pn;
      var f = -c.height / Hj - 4;
      Mm(ho, c, e + 2, f);
      ho.beginPath();
      ho.lineWidth = Co * 5;
      ho.strokeStyle = Xr.ᐃⵠΔⲆⲆᐃΔ[mf.time];
      ho.lineCap = "round";
      ho.arc(Eh, f + c.height / 2, Co * 25, 0, xq * Math.PI * a.timeout.ΔΔⲆ);
      ho.stroke();
      ho.restore();
      if (b) {
        a.wait = false;
        a.timeout.ΔΔⲆ = Eh;
        a.timeout.ⵠᐃⵠ = Ei;
      }
    }
  }
  function qm(b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == Bh) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var c = Co * ((1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var d = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * c;
      var e = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * c;
    } else {
      d = 0;
      e = Bg;
    }
    var f = ΔΔ[Xr.ᐃⲆΔΔᐃⵠᐃ].length;
    ⵠⵠ = ΔΔ[Xr.ᐃⲆΔΔᐃⵠᐃ][(this.ⵠΔⲆᐃ + this.ⵠΔ % 2) % f][mf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    var g = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
    if (g && (this.Ⲇⵠⵠᐃ === Xw.id || Xw.ᐃⲆⵠⲆⵠⵠᐃ(this.Ⲇⵠⵠᐃ))) {
      if (ᐃⵠΔⲆ.ΔΔⵠΔ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - _w, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + _w, 1);
      }
    } else if (g && ᐃⵠΔⲆ.ΔΔⵠΔ(this, mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ]) < 150) {
      this.opacity = Math.max(this.opacity - _w, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + _w, qu);
    }
    var h = ho.globalAlpha;
    ho.globalAlpha *= this.opacity;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / 2 + d, -ΔⵠⲆ / 2 + e, ⲆⲆᐃ, ΔⵠⲆ);
    ho.globalAlpha = h;
    ho.restore();
  }
  function Hm() {
    var b = Xw.ΔⲆⵠᐃⲆ;
    var c = Zw.ⵠⵠⵠⵠ;
    if (b.ᐃⲆΔ) {
      b.ᐃⲆΔ = false;
      var d = b.ⵠⲆΔᐃⲆ;
      var e = c.ⲆΔ.width;
      var f = c.ⲆΔ.height;
      var g = c.ᐃ;
      var i = mf.ⵠΔΔⲆ;
      var a = false;
      g.clearRect(0, 0, e, f);
      g.drawImage(c.ⵠⵠ, Zj, 0);
      for (var k = 0; d.length > k; k++) {
        var m = i[d[k]];
        if ((mf.mode !== lw.ⲆⵠⲆⵠⲆⲆⵠ || m.ⲆⲆΔⵠᐃ !== "spectator") && (mf.mode !== lw.ΔΔΔΔᐃ || m.ΔⵠΔᐃ !== lw.ΔⵠⲆΔⵠᐃⲆ)) {
          if (Xw.id == d[k]) {
            a = ye;
            if (lw.ᐃᐃⲆΔⵠ === mf.mode && m.ΔⵠΔᐃ === lw.ⵠⲆⵠⲆⵠⲆᐃ) {
              ⵠᐃ = "#FF0000";
            } else {
              ⵠᐃ = "#FFF";
            }
          } else if (mf.mode === lw.ᐃᐃⲆΔⵠ && m.ΔⵠΔᐃ === lw.ⵠⲆⵠⲆⵠⲆᐃ) {
            ⵠᐃ = "#990000";
          } else {
            ⵠᐃ = "#A1BDCD";
          }
          g.drawImage(od(Co, "" + (k + xt), Co * qs, ⵠᐃ), Co * Cs, (40 + k * 22) * Co);
          if (!m.ⲆΔⵠⵠⵠⵠᐃ) {
            m.ⲆΔⵠⵠⵠⵠᐃ = od(Co, m.ⲆⲆΔⵠᐃ, Ga * Co, ⵠᐃ, undefined, undefined, rk, j, Co * 110);
          }
          g.drawImage(m.ⲆΔⵠⵠⵠⵠᐃ, Co * 39, Co * (40 + k * 22));
          g.drawImage(od(Co, ᐃⵠΔⲆ.ᐃΔⵠᐃᐃᐃᐃ(m.ⲆΔΔᐃⲆ), Co * 15, ⵠᐃ), Co * 156, (40 + k * 22) * Co);
        }
      }
      if (!a) {
        if (mf.mode === lw.ⵠᐃᐃⲆⲆ || lw.ᐃᐃⲆΔⵠ === mf.mode || lw.ⲆⲆⲆⲆᐃ === mf.mode || lw.ᐃⲆⵠⲆΔΔᐃ === mf.mode || lw.ⵠΔᐃᐃⲆ === mf.mode || mf.mode === lw.ⲆⵠⲆⵠⲆⲆⵠ && !Xw.ᐃⲆⲆΔΔᐃᐃ || mf.mode === lw.ΔΔΔΔᐃ && !Xw.ⲆᐃⲆⵠᐃ) {
          g.drawImage(ΔΔ[Xr.ᐃΔⵠᐃᐃⲆΔ], Co * 15, Co * (46 + k * 22));
          g.drawImage(od(Co, ᐃⵠΔⲆ.ᐃΔⵠᐃᐃᐃᐃ(mf.ⵠΔΔⲆ[Xw.id].ⲆΔΔᐃⲆ), v * Co, "#FFF"), Y * Co, Co * (46 + k * 22));
        }
      }
    }
    Mm(ho, c.ⲆΔ, c.translate.x, c.translate.y);
  }
  function Um() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var a = Co * (_w * (rg - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
    } else {
      b = tt;
      c = 0;
    }
    ⵠⵠ = ΔΔ[Xr.ᐃⲆⲆⲆⲆ][mf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / 2 + b, -ΔⵠⲆ / Mt + c, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.lock) {
      ⵠⵠ = ΔΔ[Xr.ⵠⵠⲆⵠᐃ][mf.time];
      ⲆⲆᐃ = -ⵠⵠ.width;
      ΔⵠⲆ = -ⵠⵠ.height;
      Mm(ho, ⵠⵠ, -ⲆⲆᐃ / H + b - za * Co, -ΔⵠⲆ / 2 + c, ⲆⲆᐃ, ΔⵠⲆ);
    }
    ho.restore();
  }
  function Ym(a) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = wt;
      }
      var b = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = Zj;
    }
    var e = ΔΔ[a][mf.time];
    ⲆⲆᐃ = -e.width;
    ΔⵠⲆ = -e.height;
    Mm(ho, e, -ⲆⲆᐃ / 2 + c, -ΔⵠⲆ / Zh + d, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function Km(a) {
    if ((a = a / sh) <= 0.8) {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && Ta == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
          this.ᐃⲆⲆ.ᐃⲆΔ = ot;
        }
        var b = Co * ((1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
        var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
        var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      ho.globalAlpha = 0.5;
      zb(ho, c, d, Co * 18, a);
      cb(ho, null, "#000000", Co * 18);
      ho.globalAlpha = Ug;
      zb(ho, c, d, Co * W, a);
      cb(ho, null, Xr.ΔⵠΔⲆᐃΔⵠ[mf.time], Co * 6);
      ho.restore();
    }
  }
  function Vm() {
    var b = Xw.ΔᐃⲆⵠ;
    if (!b.ΔⲆⵠΔᐃ && b.ΔᐃΔⵠ > 0) {
      var c = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      if (!c) {
        return;
      }
      ho.save();
      if (es[b.ΔᐃΔⵠ].ⵠⲆᐃⲆ === gu && mj === b.mode) {
        ho.translate(Xw.ⵠᐃⲆ.x + c.x, Xw.ⵠᐃⲆ.y + c.y);
        ho.rotate(c.angle);
        ho.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = Xw.ⵠᐃⲆ.x + (d - d % Nn + 50);
        e = Xw.ⵠᐃⲆ.y + (e - e % 100 + 50);
        ho.translate(d, e);
      }
      var f = ΔΔ[b.ΔᐃΔⵠ][mf.time];
      ho.globalAlpha = 0.5;
      Mm(ho, f, -f.width / Mt, -f.height / 2);
      ho.globalAlpha = 1;
      ho.restore();
      if (es[b.ΔᐃΔⵠ].ⵠⲆᐃⲆ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[Eh] = od(Co, Ft[ΔΔᐃ.ⵠⲆΔᐃⵠΔⲆ], 20, "#e2c340");
          } else {
            b.label[1] = od(Co, Ft[ΔΔᐃ.ⵠⲆᐃᐃᐃΔⵠ], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Mm(ho, f, bo + -f.width / xq, Zw.ⲆΔᐃΔ.y - 26);
      }
    }
    if (b.ΔⲆⵠΔᐃ) {
      var g = b.timeout.ᐃⲆΔ();
      for (var i = 0; i < b.ⲆΔⵠⵠΔ.length; i++) {
        var j = b.ⲆΔⵠⵠΔ[i];
        if (b.id == j.id) {
          var k = Co * 42;
          var m = et * Co;
          wb(ho, j.info.translate.x, j.info.translate.y + (fl - b.timeout.ΔΔⲆ) * k, j.info.width, k * b.timeout.ΔΔⲆ + m, Co * Ds);
          ho.fillStyle = "#55B973";
          ho.fill();
          ho.globalAlpha = 0.8;
          j.ᐃⵠᐃⵠ(ho);
        } else {
          ho.globalAlpha = 0.5;
          j.ᐃⵠᐃⵠ(ho);
        }
        ho.globalAlpha = 1;
      }
      if (g) {
        b.ΔⲆⵠΔᐃ = false;
        b.timeout.ΔΔⲆ = Da;
        b.timeout.ⵠᐃⵠ = false;
      }
      return Kj;
    }
    for (i = mj; b.ⲆΔⵠⵠΔ.length > i; i++) {
      b.ⲆΔⵠⵠΔ[i].ᐃⵠᐃⵠ(ho);
    }
    return dr;
  }
  function Zm() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ᐃⲆᐃⲆΔ][mf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / Yl, -ΔⵠⲆ / pq, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function Xm() {
    var a = Xw.ⲆᐃᐃⲆΔ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      ho.save();
      var c = ΔΔ[Xr.ᐃΔⲆⲆⲆΔΔ];
      ho.translate(c.width - Co * 2, Zw.ⲆΔᐃΔ.translate.y - Co * 125);
      var d = -c.width / 2 + yt;
      var e = -c.height / Pn - 4;
      Mm(ho, c, d, e);
      ho.beginPath();
      ho.lineWidth = Co * 5;
      ho.strokeStyle = Xr.ΔΔΔΔΔΔᐃ[mf.time];
      ho.lineCap = "round";
      ho.arc(9, e + c.height / 2, Co * 25, 0, a.timeout.ΔΔⲆ * (jk * Math.PI));
      ho.stroke();
      ho.restore();
      if (b) {
        a.wait = false;
        a.timeout.ΔΔⲆ = 0;
        a.timeout.ⵠᐃⵠ = Ll;
      }
    }
  }
  function $m() {
    var a = Xw.ᐃΔᐃⲆⵠ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      ho.save();
      var c = ΔΔ[Xr.ᐃᐃⲆⵠⵠΔᐃ];
      ho.translate(c.width - Co * gr, Zw.ⲆΔᐃΔ.translate.y - Co * 190);
      var d = -c.width / xj + ch;
      var e = -c.height / xq - ba;
      Mm(ho, c, d, e);
      ho.beginPath();
      ho.lineWidth = Co * 5;
      ho.strokeStyle = Xr.ΔΔΔΔΔΔᐃ[mf.time];
      ho.lineCap = "round";
      ho.arc(9, e + c.height / xj, Co * 25, Pg, a.timeout.ΔΔⲆ * (dg * Math.PI));
      ho.stroke();
      ho.restore();
      if (b) {
        a.wait = uh;
        a.timeout.ΔΔⲆ = 0;
        a.timeout.ⵠᐃⵠ = f;
      }
    }
  }
  function ep() {
    var a = mf.ΔᐃᐃΔⲆ;
    var b = ΔΔ[Xr.ⲆⲆⵠΔΔⲆΔ][mf.time];
    Mm(ho, b, a.translate.x, a.translate.y);
    ho.save();
    ho.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    mf.ΔᐃᐃΔⲆ.now = (new Date().getTime() - a.ᐃΔΔΔᐃ + a.ᐃⵠᐃⲆΔ) % lw.ⲆᐃΔ;
    var c = Math.PI * 2 * mf.ΔᐃᐃΔⲆ.now / lw.ⲆᐃΔ - Math.PI / 2;
    ho.rotate(c);
    Mm(ho, ΔΔ[Xr.ᐃᐃΔᐃᐃΔΔ], -b.width / 2, -b.height / dg);
    ho.restore();
  }
  function ip() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ⵠᐃⵠⵠΔΔᐃ][mf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / bs, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function tp(b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && Tk == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var c = Co * ((jh - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var d = c * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var e = c * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      d = mj;
      e = tg;
    }
    if (b === Xr.ⲆᐃⲆⵠᐃⵠⵠ && !mf.transition) {
      var f = 0;
      for (var g = mf.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ], h = 0; g.length > h; h++) {
        var i = ᐃⵠΔⲆ.ΔΔⵠΔ(g[h], this);
        if (i < 140 && i > 35) {
          f = Lr;
          break;
        }
        if (i <= 35) {
          f = ie;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - _w / 1.5) : Math.min(1, this.opacity + _w / 1.5);
      ho.globalAlpha = this.opacity;
    }
    ⵠⵠ = ΔΔ[b][mf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / Yl + d, -ΔⵠⲆ / 2 + e, ⲆⲆᐃ, ΔⵠⲆ);
    ho.globalAlpha = rg;
    ho.restore();
  }
  function np() {
    var a = -8;
    if (Xw.ᐃΔᐃᐃⲆ.enabled) {
      var b = ΔΔ[Xr.ΔᐃⵠⵠᐃⲆᐃ];
      Mm(ho, b, Xw.ᐃΔᐃᐃⲆ.translate.x, Xw.ᐃΔᐃᐃⲆ.translate.y + a);
      a += 70;
    }
    if (Xw.ⲆΔᐃᐃᐃᐃᐃ === 1) {
      b = ΔΔ[Xr.ⵠᐃᐃⵠⵠⵠᐃ];
      Mm(ho, b, Xw.ᐃΔᐃᐃⲆ.translate.x, Xw.ᐃΔᐃᐃⲆ.translate.y + a);
      a += 70;
    } else if (Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.x < 0.25 || Xw.ⲆΔᐃΔ.ⵠⲆΔΔΔᐃΔ.x < 0.25 || Xw.ⲆΔᐃΔ.ⲆᐃⵠΔΔⲆΔ.x < 0.25 || Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.x < 0.25 || Xw.ⲆΔᐃΔ.ΔⲆⲆΔⵠ.x < 0.25) {
      b = ΔΔ[Xr.ΔⲆᐃΔΔᐃⵠ];
      Mm(ho, b, Xw.ᐃΔᐃᐃⲆ.translate.x, Xw.ᐃΔᐃᐃⲆ.translate.y + a);
      a += 70;
    }
    if (Xw.ⵠᐃⵠᐃᐃ > 0) {
      b = ΔΔ[Xr.ΔⵠⵠⲆΔᐃΔ];
      Mm(ho, b, Xw.ᐃΔᐃᐃⲆ.translate.x, Xw.ᐃΔᐃᐃⲆ.translate.y + a);
      var c = Lm[Xw.ⵠᐃⵠᐃᐃ];
      if (c === Ng) {
        c = od(Co, Xw.ⵠᐃⵠᐃᐃ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", Rg);
        Lm[Xw.ⵠᐃⵠᐃᐃ] = c;
      }
      if (Xw.ⵠᐃⵠᐃᐃ < 9) {
        Mm(ho, c, Xw.ᐃΔᐃᐃⲆ.translate.x - 39, Xw.ᐃΔᐃᐃⲆ.translate.y + a + Hh);
      } else {
        Mm(ho, c, Xw.ᐃΔᐃᐃⲆ.translate.x - 46, Xw.ᐃΔᐃᐃⲆ.translate.y + a + Ok);
      }
    }
  }
  function op(a) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && ot == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = Co * (_w * (hd - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = Db;
      d = 0;
    }
    if (this.ᐃᐃⵠᐃᐃ.ᐃⲆΔ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ⵠⵠ = ΔΔ[Xr.ᐃⵠᐃⵠⲆ][Math.floor(this.id + this.color) % Gs][mf.time];
    ⲆⲆᐃ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / Hj + c, -ΔⵠⲆ / 2 + d, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function rp() {
    var a = Xw.ΔᐃⲆⵠ;
    if (a.ΔⲆⵠΔᐃ) {
      var b = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + b.x, Xw.ⵠᐃⲆ.y + b.y);
      var c = ΔΔ[Xr.ΔⵠⲆⵠⲆᐃΔ];
      var d = -c.width / ss;
      var e = -c.height / Gl - Co * 125;
      Mm(ho, c, d, e);
      ho.beginPath();
      ho.lineWidth = Co * 5;
      ho.strokeStyle = Xr.ⲆᐃΔΔⲆΔⲆ[mf.time];
      ho.lineCap = "round";
      ho.arc(tt, e + c.height / Nb, Co * 25, wj, Zh * Math.PI * a.timeout.ΔΔⲆ);
      ho.stroke();
      ho.restore();
    }
  }
  function ap() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ⲆᐃⲆᐃᐃᐃᐃ][mf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / jk, -ΔⵠⲆ / Mt, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function sp() {
    var a = Xw.ⲆᐃᐃᐃⲆ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      ho.save();
      var c = ΔΔ[Xr.ᐃⵠᐃⵠᐃⵠΔ];
      ho.translate(c.width - ih * Co, Zw.ⲆΔᐃΔ.translate.y - Co * 60);
      var d = -c.width / jk - 2;
      var e = -c.height / lr - 4;
      Mm(ho, c, d, e);
      ho.beginPath();
      ho.lineWidth = Co * 5;
      ho.strokeStyle = Xr.ᐃⵠΔⲆⲆᐃΔ[mf.time];
      ho.lineCap = "round";
      ho.arc(0, e + c.height / 2, Co * 25, Rs, a.timeout.ΔΔⲆ * (ih * Math.PI));
      ho.stroke();
      ho.restore();
      if (b) {
        a.wait = C;
        a.timeout.ΔΔⲆ = gu;
        a.timeout.ⵠᐃⵠ = false;
      }
    }
  }
  function hp(a) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
      var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
    } else {
      c = Bg;
      d = wj;
    }
    ⵠⵠ = ΔΔ[a][mf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / bs + c, -ΔⵠⲆ / 2 + d, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function lp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ᐃΔⵠΔᐃⵠⲆ][mf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / Yg, -ΔⵠⲆ / jk, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  var gp = dj.Math.acos;
  dj.Math.acos = dj.Math.asin;
  dj.Math.asin = gp;
  var up = dj.Math.cos;
  function bp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ⵠΔᐃⵠⲆ][mf.time];
    ⲆⲆᐃ = -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function vp(a) {
    if ((a = a / x) <= 0.95) {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
          this.ᐃⲆⲆ.ᐃⲆΔ = false;
        }
        var b = Co * ((za - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
        var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
        var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
      } else {
        c = 0;
        d = Zj;
      }
      ho.globalAlpha = 0.5;
      zb(ho, c, d, Co * 28, a);
      cb(ho, null, "#000000", Pj * Co);
      ho.globalAlpha = qu;
      zb(ho, c, d, Co * 28, a);
      cb(ho, null, Xr.ⲆᐃΔΔⲆΔⲆ[mf.time], Co * Bq);
      ho.restore();
    }
  }
  dj.Math.cos = dj.Math.sin;
  dj.Math.sin = up;
  var dp = Eh;
  function Su() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
    } else {
      c = gu;
      d = 0;
    }
    var e = this.info & 15;
    if (wa === this.info || zl === e) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Xr.ⲆΔⵠⵠⲆΔΔ][mf.time];
      } else {
        f = ΔΔ[Xr.ᐃᐃⲆⲆⲆΔΔ][mf.time];
      }
      var g = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.width;
      var h = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.height;
      Mm(ho, f, -g / ss + c, -h / Mt + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Xr.ⵠᐃⵠᐃⲆᐃΔ][mf.time];
      } else {
        f = ΔΔ[Xr.ⲆᐃⵠΔⲆ][mf.time];
      }
      ho.translate(0, f.height / 2);
      Mm(ho, f, c - f.width / Gl, -f.height + d);
    }
    ho.restore();
  }
  function mp() {
    if (te <= this.info) {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
          this.ᐃⲆⲆ.ᐃⲆΔ = C;
        }
        var a = Co * ((Te - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
        var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
        var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
      } else {
        b = 0;
        c = 0;
      }
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      var d = ΔΔ[Xr.ᐃᐃⲆᐃΔΔᐃ][mf.time];
      var e = this.ᐃᐃᐃᐃ.ΔΔⲆ * -d.width;
      var f = -d.height * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      Mm(ho, d, -e / 2 + b, -f / H + c, e, f);
      ho.restore();
    }
  }
  function pp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var a = Co * ((jh - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      d = ΔΔ[Xr.ⲆᐃⲆΔᐃⵠⲆ][mf.time];
      Mm(ho, d, -d.width / 2 + b, -d.height / Nb + c);
      this.up.ᐃⲆΔ();
      var d = ΔΔ[Xr.ΔⲆᐃⵠⵠⵠⵠ][mf.time];
      var e = this.up.ΔΔⲆ * -d.width;
      var f = this.up.ΔΔⲆ * -d.height;
      Mm(ho, d, -e / 2 + hs * Co, -f / Mt + Co * 3, e, f);
    } else {
      d = ΔΔ[Xr.ⲆᐃΔᐃⲆⵠⵠ][mf.time];
      Mm(ho, d, -d.width / 2 + b, -d.height / 2 + c);
    }
    ho.restore();
  }
  function Cp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃᐃᐃᐃ.ᐃⲆΔ();
    ho.globalAlpha = 0.3;
    var a = ΔΔ[Xr.ⲆΔᐃΔⵠⲆⵠ][mf.time];
    var b = this.ᐃᐃᐃᐃ.ΔΔⲆ * -a.width;
    var c = this.ᐃᐃᐃᐃ.ΔΔⲆ * -a.height;
    Mm(ho, a, -b / Yl, -c / 2, b, c);
    ho.globalAlpha = 1;
    ho.restore();
  }
  function Tp() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == Ta) {
        this.ᐃⲆⲆ.ᐃⲆΔ = Ll;
      }
      var a = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = tg;
    }
    ho.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * ih - 1;
    }
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ⲆⲆⵠⵠΔ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / Nb, -ⵠⵠ.height / H);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + _w * I) % (Math.PI * dg);
    }
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[Xr.ⵠⵠΔΔⵠⲆⲆ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / Jt, -ⵠⵠ.height / Zg);
    ho.restore();
  }
  function fp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = mj;
      d = Lr;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Xr.ΔⵠⲆΔᐃᐃⲆ][mf.time];
      } else {
        f = ΔΔ[Xr.ⲆⲆⲆⵠⲆΔᐃ][mf.time];
      }
      var g = -f.width * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      var h = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.height;
      Mm(ho, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Xr.ⵠᐃᐃⵠᐃⲆⵠ][mf.time];
      } else {
        f = ΔΔ[Xr.ⵠᐃⵠΔⵠ][mf.time];
      }
      ho.translate(0, f.height / 2);
      Mm(ho, f, c - f.width / xj, -f.height + d);
    }
    ho.restore();
  }
  function zp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + _w / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - _w, hd);
    }
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = this.info === 0 ? ΔΔ[Xr.ⲆⲆΔⵠⲆ][mf.time] : ΔΔ[Xr.ⲆᐃⵠΔᐃᐃΔ][mf.time];
    ⲆⲆᐃ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width);
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height * this.scale;
    Mm(ho, a, -ⲆⲆᐃ / 4, -ΔⵠⲆ / 4, ⲆⲆᐃ / Zh, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[Xr.ⵠΔΔⲆⵠⲆᐃ];
      Mm(ho, a, -ⲆⲆᐃ / 4, -ΔⵠⲆ / nj, ⲆⲆᐃ / jk, ΔⵠⲆ / 2);
      ho.globalAlpha = hd;
    }
    a = this.info === 0 ? ΔΔ[Xr.ⵠΔΔⵠΔⵠᐃ][mf.time] : ΔΔ[Xr.ΔΔⵠΔᐃΔᐃ][mf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width * this.scale;
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height);
    ho.save();
    ho.translate(Co * -40, Co * Kg);
    ho.rotate(this.rotate.ΔΔⲆ);
    Mm(ho, a, Co * -ⲆⲆᐃ / 4, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[Xr.ⲆⵠᐃᐃⲆᐃⲆ];
      Mm(ho, a, Co * -ⲆⲆᐃ / ks, -ΔⵠⲆ * Co / eg, ⲆⲆᐃ / 2, ΔⵠⲆ / xj);
      ho.globalAlpha = 1;
    }
    ho.restore();
    a = ps === this.info ? ΔΔ[Xr.ⵠΔⲆⲆᐃΔⵠ][mf.time] : ΔΔ[Xr.ᐃᐃⵠⲆⵠΔΔ][mf.time];
    ho.save();
    ho.translate(Co * 40, Co * gn);
    ho.rotate(-this.rotate.ΔΔⲆ);
    Mm(ho, a, -ⲆⲆᐃ * Co / Fr, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / dg, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[Xr.ⲆΔⵠΔⵠⲆΔ];
      Mm(ho, a, -ⲆⲆᐃ * Co / nj, -ΔⵠⲆ * Co / nb, ⲆⲆᐃ / H, ΔⵠⲆ / pq);
      ho.globalAlpha = Ug;
    }
    ho.restore();
    ho.restore();
  }
  function yp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃⲆΔΔᐃ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[Xr.ΔᐃᐃⲆⲆ][mf.time];
    ⲆⲆᐃ = this.ᐃⲆΔΔᐃ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = this.ᐃⲆΔΔᐃ.ΔΔⲆ * -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / pq, -ΔⵠⲆ / ss, ⲆⲆᐃ, ΔⵠⲆ);
    this.ᐃᐃⵠᐃᐃ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[Xr.ⲆᐃΔⵠⲆᐃΔ][mf.time];
    ⲆⲆᐃ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / xj, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function wp() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == C) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var a = Co * (_w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = In;
    }
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ⵠΔⲆⲆΔ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / dg, -ⵠⵠ.height / bs);
    ho.restore();
  }
  function Pp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + _w / ih, 1.8);
    } else {
      this.scale = Math.max(this.scale - _w, 1);
    }
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = ΔΔ[Xr.ᐃΔⲆⲆΔ][mf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width * this.scale;
    ΔⵠⲆ = this.scale * (-a.height * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    Mm(ho, a, -ⲆⲆᐃ / ks, -ΔⵠⲆ / ks, ⲆⲆᐃ / ih, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && _g == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[Xr.ᐃᐃⵠᐃⲆΔΔ];
      Mm(ho, a, -ⲆⲆᐃ / Dt, -ΔⵠⲆ / qg, ⲆⲆᐃ / 2, ΔⵠⲆ / jk);
      ho.globalAlpha = 1;
    }
    a = ΔΔ[Xr.ΔᐃΔΔᐃᐃⲆ][mf.time];
    ⲆⲆᐃ = -a.width * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height);
    ho.save();
    ho.translate(Co * -60, al * Co);
    ho.rotate(this.rotate.ΔΔⲆ);
    Mm(ho, a, -ⲆⲆᐃ * Co / 4, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / Gl, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[Xr.ⵠΔⲆⲆⵠΔΔ];
      Mm(ho, a, -ⲆⲆᐃ * Co / 4, Co * -ΔⵠⲆ / Ps, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
      ho.globalAlpha = 1;
    }
    ho.restore();
    a = ΔΔ[Xr.ⵠⵠⵠᐃⲆΔⵠ][mf.time];
    ho.save();
    ho.translate(Co * 60, Hh * Co);
    ho.rotate(-this.rotate.ΔΔⲆ);
    Mm(ho, a, Co * -ⲆⲆᐃ / ul, Co * -ΔⵠⲆ / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[Xr.ⵠᐃᐃⲆΔᐃΔ];
      Mm(ho, a, Co * -ⲆⲆᐃ / ks, Co * -ΔⵠⲆ / 4, ⲆⲆᐃ / Gl, ΔⵠⲆ / 2);
      ho.globalAlpha = yg;
    }
    ho.restore();
    ho.restore();
  }
  function Ap() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + _w / Nb, 1.8);
    } else {
      this.scale = Math.max(this.scale - _w, hs);
    }
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = this.info === 0 ? ΔΔ[Xr.ⲆⵠΔᐃⵠ][mf.time] : ΔΔ[Xr.ⵠⲆⲆⵠᐃᐃⲆ][mf.time];
    ⲆⲆᐃ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width);
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height);
    Mm(ho, a, -ⲆⲆᐃ / ol, -ΔⵠⲆ / 4, ⲆⲆᐃ / xj, ΔⵠⲆ / Mt);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && f == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[Xr.ΔⲆⵠⲆⲆΔᐃ];
      Mm(ho, a, -ⲆⲆᐃ / ol, -ΔⵠⲆ / ol, ⲆⲆᐃ / 2, ΔⵠⲆ / Jt);
      ho.globalAlpha = 1;
    }
    a = this.info === 0 ? ΔΔ[Xr.ᐃⵠΔᐃᐃᐃⵠ][mf.time] : ΔΔ[Xr.ΔⲆⲆⵠΔⲆΔ][mf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width * this.scale;
    ΔⵠⲆ = this.scale * (-a.height * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ho.save();
    ho.translate(Co * -40, Co * 10);
    ho.rotate(this.rotate.ΔΔⲆ);
    Mm(ho, a, Co * -ⲆⲆᐃ / 4, Co * -ΔⵠⲆ / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[Xr.ΔⲆᐃⵠᐃᐃⵠ];
      Mm(ho, a, Co * -ⲆⲆᐃ / Vn, -ΔⵠⲆ * Co / Dt, ⲆⲆᐃ / 2, ΔⵠⲆ / H);
      ho.globalAlpha = 1;
    }
    ho.restore();
    a = mj === this.info ? ΔΔ[Xr.ᐃⲆⵠⵠᐃⲆΔ][mf.time] : ΔΔ[Xr.ⵠⵠⲆᐃⵠⵠⵠ][mf.time];
    ho.save();
    ho.translate(Co * 40, Co * 10);
    ho.rotate(-this.rotate.ΔΔⲆ);
    Mm(ho, a, -ⲆⲆᐃ * Co / 4, Co * -ΔⵠⲆ / Gi, ⲆⲆᐃ / Hj, ΔⵠⲆ / Yl);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[Xr.ⲆⲆᐃⲆΔΔΔ];
      Mm(ho, a, -ⲆⲆᐃ * Co / 4, -ΔⵠⲆ * Co / eh, ⲆⲆᐃ / 2, ΔⵠⲆ / Zg);
      ho.globalAlpha = Ug;
    }
    ho.restore();
    ho.restore();
  }
  function kp(a, b, c) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + b, Xw.ⵠᐃⲆ.y + c);
    ho.rotate(this.angle);
    ho.translate(this.x - b, this.y - c);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[a][mf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Nb, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function xp() {
    var a = Math.PI / Pn;
    var b = Math.PI / Pe;
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.ᐃⲆⲆΔⲆⲆᐃ.ᐃⲆΔ();
    this.ΔᐃⲆΔⵠΔᐃ.ᐃⲆΔ();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    c = Bg === this.info ? ΔΔ[Xr.ⵠⵠⵠⵠⲆ][mf.time] : ΔΔ[Xr.ΔΔⲆⲆⲆΔᐃ][mf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -c.width;
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -c.height;
    Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Hj, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = ΔΔ[Xr.ΔⲆΔⵠᐃᐃⲆ];
      Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = fl;
    }
    if (this.action & iw.ᐃᐃⵠⵠᐃ) {
      if (this.ⵠᐃᐃᐃⵠ.ᐃⲆΔ() && this.ⵠᐃᐃᐃⵠ.ⵠᐃⵠ == Ll) {
        this.action -= iw.ᐃᐃⵠⵠᐃ;
      }
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[Xr.ⵠΔⵠⵠⲆⲆⲆ];
      Mm(ho, c, -ⲆⲆᐃ / Yl, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = qu;
    }
    ho.restore();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle + b);
    ho.translate(55, 0);
    ho.rotate(a);
    c = this.info === ps ? ΔΔ[Xr.ᐃⲆⲆᐃΔⵠᐃ][mf.time] : ΔΔ[Xr.ⵠⵠᐃᐃⵠⲆᐃ][mf.time];
    ⲆⲆᐃ = -c.width * this.ᐃⲆⲆΔⲆⲆᐃ.ΔΔⲆ;
    ΔⵠⲆ = -c.height * this.ᐃⲆⲆΔⲆⲆᐃ.ΔΔⲆ;
    Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / jk, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      c = ΔΔ[Xr.ᐃⲆⵠᐃᐃΔⲆ];
      Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Pn, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    if (this.action & iw.ᐃᐃⵠⵠᐃ) {
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[Xr.ΔᐃⵠΔΔⲆⵠ];
      Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = cu;
    }
    ho.restore();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle + a + b);
    ho.translate(55, Kh);
    ho.rotate(a);
    c = this.info === 0 ? ΔΔ[Xr.ΔⲆᐃⲆΔᐃΔ][mf.time] : ΔΔ[Xr.ΔⵠᐃⵠᐃⲆⲆ][mf.time];
    ⲆⲆᐃ = -c.width * this.ΔᐃⲆΔⵠΔᐃ.ΔΔⲆ;
    ΔⵠⲆ = this.ΔᐃⲆΔⵠΔᐃ.ΔΔⲆ * -c.height;
    Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      c = ΔΔ[Xr.ⲆΔⲆⲆᐃⵠΔ];
      Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / xj, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    if (this.action & iw.ᐃᐃⵠⵠᐃ) {
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[Xr.ᐃⲆⵠᐃᐃᐃⲆ];
      Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function Jp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = Ta;
      }
      var a = (Ug - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
    } else {
      b = ya;
      c = Zj;
    }
    if (this.action == 2) {
      ⵠⵠ = ΔΔ[Xr.ⲆⲆⵠΔᐃᐃⲆ][mf.time];
    } else {
      ⵠⵠ = ΔΔ[Xr.ⲆⲆᐃⵠᐃⲆⵠ][mf.time];
    }
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / Zg + b, -ⵠⵠ.height / 2 + c);
    ho.restore();
  }
  function Mp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && _g == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = Co * ((1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = wj;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Xr.ΔᐃΔᐃᐃⲆⵠ][mf.time];
      } else {
        f = ΔΔ[Xr.ᐃⲆⵠᐃᐃⵠᐃ][mf.time];
      }
      var g = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.width;
      var h = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.height;
      Mm(ho, f, -g / Mt + c, -h / Mt + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Xr.ΔⵠⲆΔΔᐃᐃ][mf.time];
      } else {
        f = ΔΔ[Xr.ᐃᐃΔΔᐃᐃΔ][mf.time];
      }
      ho.translate(0, f.height / 2);
      Mm(ho, f, c - f.width / 2, -f.height + d);
    }
    ho.restore();
  }
  function Bp() {
    if (Xn === (this.info & 1)) {
      this.ⵠⲆΔⲆⲆ = Math.min(this.ⵠⲆΔⲆⲆ + _w, 2.2);
    } else {
      this.ⵠⲆΔⲆⲆ = Math.max(this.ⵠⲆΔⲆⲆ - _w, tg);
      this.ⵠΔⲆΔᐃᐃⵠ += _w;
      if (this.ⵠΔⲆΔᐃᐃⵠ > 0.1) {
        this.ⵠΔⲆΔᐃᐃⵠ = wj;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: Hi,
          r: Math.random() * 30 + 30
        };
        this.ᐃᐃᐃᐃ.push(a);
      }
    }
    for (var b = In; this.ᐃᐃᐃᐃ.length > b; b++) {
      a = this.ᐃᐃᐃᐃ[b];
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + a.x, Xw.ⵠᐃⲆ.y + a.y);
      a.a = Math.min(1, a.a + _w / 2);
      var c = a.a;
      if (c < 0.2) {
        c *= kq;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      ho.globalAlpha = c * 0.8;
      fb(ho, Kh, 0, a.r);
      cb(ho, Xr.ΔⲆⲆΔⲆΔⵠ[mf.time]);
      ho.restore();
      if (a.a === Ot) {
        this.ᐃᐃᐃᐃ.splice(b, jh);
        b--;
      }
    }
  }
  function Dp() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = _g;
      }
      var a = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
    } else {
      b = tg;
      c = 0;
    }
    ho.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - hd;
    }
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ΔⵠᐃⲆⵠ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + _w * 3) % (Math.PI * xj);
    }
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[Xr.ᐃᐃΔΔᐃᐃᐃ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / xj, -ⵠⵠ.height / ss);
    ho.restore();
  }
  function Ip() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == wt) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = Co * (_w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = Da;
    }
    var e = this.info & 15;
    if (gg === this.info || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Xr.ⲆᐃⲆⵠⵠΔⵠ][mf.time];
      } else {
        f = ΔΔ[Xr.ⲆΔᐃΔΔ][mf.time];
      }
      var g = -f.width * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      var h = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.height;
      Mm(ho, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      this.ΔᐃⲆᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        f = ΔΔ[Xr.ΔΔⵠⲆⲆΔⲆ][mf.time];
      } else {
        f = ΔΔ[Xr.ⲆΔΔᐃⵠ][mf.time];
      }
      ho.translate(mj, f.height / 2);
      ho.rotate(this.ΔᐃⲆᐃᐃᐃᐃ.ΔΔⲆ);
      Mm(ho, f, c - f.width / 2, -f.height + d);
    }
    ho.restore();
  }
  function Ep() {
    if (this.info !== 10) {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == Ta) {
          this.ᐃⲆⲆ.ᐃⲆΔ = false;
        }
        var a = Co * (_w * (za - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
        var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
        var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
      } else {
        b = 0;
        c = In;
      }
      if (this.info & 16) {
        var d = ΔΔ[Xr.ⵠΔΔⲆⵠⵠⵠ][mf.time];
      } else {
        d = ΔΔ[Xr.ΔΔᐃⵠΔᐃⲆ][mf.time];
      }
      Mm(ho, d, -d.width / 2 + b, -d.width / 2 + c);
      ho.restore();
      for (var e = this.info & 15, f = tg; e > f; f++) {
        this.Δᐃⵠⵠ[f].ᐃⵠᐃⵠ(Xr.ⵠⵠⵠⲆΔ);
      }
    }
  }
  function Sp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃᐃⵠᐃᐃ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[Xr.ᐃᐃΔⲆᐃᐃᐃ][mf.time];
    ⲆⲆᐃ = -ⵠⵠ.width * this.ᐃᐃⵠᐃᐃ.ΔΔⲆ;
    ΔⵠⲆ = -ⵠⵠ.height * this.ᐃᐃⵠᐃᐃ.ΔΔⲆ;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / Gl, -ΔⵠⲆ / Yl, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function Qp(f, e, i, j, k, n, o, a = undefined, p) {
    if (a === undefined) a = Eh;
    for (var h = f; h <= e; h++) {
      for (var q = i; q <= j; q++) {
        var r = Vw.ᐃᐃⲆⲆ[h][q];
        if (r !== undefined && wr !== r[n]) {
          var t = r[n];
          var w = ΔΔ[k][mf.time][t.ΔᐃⲆⵠⵠΔⲆ];
          Mm(ho, w, Xw.ⵠᐃⲆ.x + t.x - w.width / (ΔⵠⲆⵠⲆ * 4), Xw.ⵠᐃⲆ.y + t.y - w.height / (ΔⵠⲆⵠⲆ * ul), w.width / (ΔⵠⲆⵠⲆ * 2), w.height / (ΔⵠⲆⵠⲆ * dg));
          if (vf.ⵠⵠᐃⲆᐃ) {
            var x = 2147483648;
            var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(y * Gs * ΔΔ[Xr.ᐃⲆᐃⲆ][mf.time][t.ΔᐃⲆⵠⵠΔⲆ].length);
              w = ΔΔ[Xr.ᐃⲆᐃⲆ][mf.time][t.ΔᐃⲆⵠⵠΔⲆ][y];
              Mm(ho, w, Xw.ⵠᐃⲆ.x + t.x - w.width / (nj * ΔⵠⲆⵠⲆ), Xw.ⵠᐃⲆ.y + t.y - w.height / (ΔⵠⲆⵠⲆ * 4), w.width / (Pn * ΔⵠⲆⵠⲆ), w.height / (xq * ΔⵠⲆⵠⲆ));
            } else if (zl !== t.ᐃᐃⲆⲆⵠⵠΔ) {
              w = ΔΔ[Xr.ⲆⵠⵠⲆⵠᐃⲆ][mf.time];
              var z = (dp + h % 2 * 30) % 60;
              ho.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
              Mm(ho, w, Xw.ⵠᐃⲆ.x + t.x - w.width / (ΔⵠⲆⵠⲆ * 4), Xw.ⵠᐃⲆ.y + t.y - w.height / (ΔⵠⲆⵠⲆ * 4) - 30 + z, w.width / (ΔⵠⲆⵠⲆ * 2), w.height / (Yg * ΔⵠⲆⵠⲆ));
              ho.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function _p() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var a = Co * (_w * (rg - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = ps;
    }
    ho.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * Gl - 1;
    }
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ⲆΔᐃⵠⲆ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / Mt);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + I * _w) % (Math.PI * ss);
    }
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[Xr.ΔⲆΔⵠᐃᐃⵠ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / dg, -ⵠⵠ.height / 2);
    ho.restore();
  }
  function Fp(a, b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (a === Xr.ΔΔΔΔΔ) {
      a = Xr.Δⵠᐃᐃⵠ;
      this.info = 36;
    }
    ⵠⵠ = ΔΔ[a][this.info][mf.time];
    ⲆⲆᐃ = -ⵠⵠ.width / Yl;
    ΔⵠⲆ = -ⵠⵠ.height / lr;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Jt, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = nv(this.info, ⵠⵠ, ⲆⲆⵠΔᐃⵠⲆⲆⵠ);
      Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Zg, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function Rp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃⵠΔΔΔᐃⲆ = Math.min(1, this.ᐃⵠΔΔΔᐃⲆ + _w * 2);
    ho.globalAlpha = this.ᐃⵠΔΔΔᐃⲆ * Math.min(ie, Math.max(wj, ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r) / 80));
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[Xr.ⵠⵠⲆᐃΔ][mf.time][this.ⲆⵠⵠΔⵠ];
    if (this.ⲆⵠⵠΔⵠ < 2) {
      ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -ⵠⵠ.width;
      ΔⵠⲆ = -ⵠⵠ.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    } else if (this.ⲆⵠᐃⲆΔⲆΔ === Zj) {
      ⲆⲆᐃ = -ⵠⵠ.width;
      ΔⵠⲆ = -ⵠⵠ.height;
    } else {
      ⲆⲆᐃ = -ⵠⵠ.width * 1.35;
      ΔⵠⲆ = -ⵠⵠ.height * 1.35;
    }
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / Yg, -ΔⵠⲆ / pq, ⲆⲆᐃ, ΔⵠⲆ);
    ho.globalAlpha = 1;
    ho.restore();
  }
  function Gp() {
    if (this.info >= 10) {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && Ll == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
          this.ᐃⲆⲆ.ᐃⲆΔ = false;
        }
        var a = Co * ((1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
        var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
        var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
      } else {
        b = ps;
        c = Db;
      }
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      var d = ΔΔ[Xr.ΔⵠⵠᐃⲆᐃΔ][mf.time];
      var e = -d.width * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      var f = -d.height * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      Mm(ho, d, -e / 2 + b, -f / 2 + c, e, f);
      ho.restore();
    }
  }
  function jp() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var a = Co * ((rg - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ᐃⲆᐃΔᐃⲆᐃ = (this.ᐃⲆᐃΔᐃⲆᐃ + gl * _w) % (Math.PI * H);
    this.ⵠΔⵠᐃΔΔΔ = (this.ⵠΔⵠᐃΔΔΔ - _w * ru) % (Math.PI * 2);
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.save();
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ⲆⲆⵠⵠᐃ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    ho.restore();
    ho.save();
    ho.rotate(this.ᐃⲆᐃΔᐃⲆᐃ);
    ⵠⵠ = ΔΔ[Xr.ᐃⵠΔⵠⲆⲆᐃ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / Mt, -ⵠⵠ.height / lr);
    ho.restore();
    ho.save();
    ho.rotate(this.ⵠΔⵠᐃΔΔΔ);
    ⵠⵠ = ΔΔ[Xr.ΔᐃⵠⵠᐃⲆⲆ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / ss, -ⵠⵠ.height / 2);
    ho.restore();
    ho.restore();
  }
  function Lp(a, b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    c = ΔΔ[a][mf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -c.width;
    ΔⵠⲆ = -c.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    Mm(ho, c, -ⲆⲆᐃ / Yl, -ΔⵠⲆ / Gl, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && dr == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = ΔΔ[b];
      Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function Wp() {
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    a = Db === this.info ? ΔΔ[Xr.ᐃΔᐃⵠΔ][mf.time] : ΔΔ[Xr.ⲆⵠⲆᐃⵠⲆⵠ][mf.time];
    ⲆⲆᐃ = -a.width * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height;
    Mm(ho, a, -ⲆⲆᐃ / Zh, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && sl == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[Xr.ᐃᐃᐃΔΔⲆᐃ];
      Mm(ho, a, -ⲆⲆᐃ / jk, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function Op() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = wt;
      }
      var b = Co * (_w * (Ug - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = 0;
      d = Rs;
    }
    var e = this.info & 15;
    if (jn === this.info || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Xr.ΔⵠΔⵠⲆΔᐃ][mf.time];
      } else {
        f = ΔΔ[Xr.ⵠⲆᐃⲆᐃⵠᐃ][mf.time];
      }
      var g = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.width;
      var h = -f.height * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      Mm(ho, f, -g / Zh + c, -h / bs + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Xr.ᐃᐃᐃⲆⲆⲆΔ][mf.time];
      } else {
        f = ΔΔ[Xr.ⲆᐃΔⵠᐃ][mf.time];
      }
      ho.translate(0, f.height / dg);
      Mm(ho, f, c - f.width / xj, -f.height + d);
    }
    ho.restore();
  }
  function Np() {
    if (this.info !== 10) {
      for (var a = this.info & 15, b = 0; b < a; b++) {
        this.Δᐃⵠⵠ[b].ᐃⵠᐃⵠ(Xr.ⲆᐃΔΔⵠ, this.x, this.y);
      }
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.angle);
      if (this.ᐃⲆⲆ.ᐃⲆΔ) {
        if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
          this.ᐃⲆⲆ.ᐃⲆΔ = false;
        }
        var c = (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
        var d = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * c;
        var e = c * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
      } else {
        d = Rs;
        e = 0;
      }
      if (this.info & 16) {
        var f = ΔΔ[Xr.ⵠⲆⲆᐃΔᐃᐃ][mf.time];
      } else {
        f = ΔΔ[Xr.ⲆⵠᐃᐃⲆⲆⲆ][mf.time];
      }
      Mm(ho, f, -f.width / 2 + d, -f.width / Jt + e);
      ho.restore();
    }
  }
  function qp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == Ta) {
        this.ᐃⲆⲆ.ᐃⲆΔ = Rh;
      }
      var b = Co * ((xt - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
    } else {
      c = ya;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Xr.ᐃⵠⲆⵠΔΔΔ][mf.time];
      } else {
        f = ΔΔ[Xr.ⲆᐃⵠΔⵠⲆⵠ][mf.time];
      }
      var g = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.width;
      var h = -f.height * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      Mm(ho, f, -g / Jt + c, -h / Yl + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Xr.ⲆᐃΔΔᐃΔⵠ][mf.time];
      } else {
        f = ΔΔ[Xr.ⲆᐃΔᐃΔ][mf.time];
      }
      ho.translate(0, f.height / 2);
      Mm(ho, f, c - f.width / H, -f.height + d);
    }
    ho.restore();
  }
  function Hp() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = uh;
      }
      var a = _w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600 * Co;
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
    } else {
      b = Zj;
      c = 0;
    }
    ho.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += bs * Math.random() - cu;
      c += Math.random() * pq - 1;
    }
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ΔⲆⵠⵠⵠ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + _w * 3) % (Math.PI * 2);
    }
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[Xr.ⲆⵠⵠⲆᐃᐃΔ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / jk, -ⵠⵠ.height / 2);
    ho.restore();
  }
  function Up() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + _w / dg, 1.8);
    } else {
      this.scale = Math.max(this.scale - _w, Oq);
    }
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = ΔΔ[Xr.ᐃⵠΔⵠⵠ][mf.time];
    ⲆⲆᐃ = this.scale * (-a.width * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ΔⵠⲆ = this.scale * (-a.height * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    Mm(ho, a, -ⲆⲆᐃ / Yl, -ΔⵠⲆ / Yl, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && xo == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[Xr.ⵠⲆⵠᐃⲆⵠᐃ];
      Mm(ho, a, -ⲆⲆᐃ / bs, -ΔⵠⲆ / jk, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = xt;
    }
    a = ΔΔ[Xr.ᐃⵠⵠⲆΔⵠΔ][mf.time];
    ⲆⲆᐃ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width);
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height);
    ho.save();
    ho.translate(Co * -30, Co * 70);
    ho.rotate(this.rotate.ΔΔⲆ);
    Mm(ho, a, Co * -Kg, Co * -40, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[Xr.ΔᐃΔΔΔΔᐃ];
      Mm(ho, a, Co * -10, Co * -40, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = hs;
    }
    ho.restore();
    a = ΔΔ[Xr.ᐃᐃΔⵠΔᐃⵠ][mf.time];
    ho.save();
    ho.translate(Co * 30, Co * 70);
    ho.rotate(-this.rotate.ΔΔⲆ);
    Mm(ho, a, Co * Th - ⲆⲆᐃ, Co * -40, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      a = ΔΔ[Xr.ⲆⵠΔⲆΔᐃΔ];
      Mm(ho, a, J * Co - ⲆⲆᐃ, Co * -40, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = Te;
    }
    ho.restore();
    ho.restore();
  }
  function Yp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    var a = ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + _w / Zh, 1.8) : Math.max(this.scale - _w, xt);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    this.ⲆⲆⵠᐃ = a < 350 ? Math.max(0, this.ⲆⲆⵠᐃ - _w * 2.2) : Math.min(rg, this.ⲆⲆⵠᐃ + _w * 2.2);
    b = this.info & 1 ? ΔΔ[Xr.ⲆᐃᐃᐃΔⵠᐃ][mf.time] : ΔΔ[Xr.ⲆᐃⲆⲆΔⵠΔ][mf.time];
    ⲆⲆᐃ = this.scale * (-b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height);
    ho.globalAlpha = 1 - this.ⲆⲆⵠᐃ;
    Mm(ho, b, -ⲆⲆᐃ / 4, -ΔⵠⲆ / 4, ⲆⲆᐃ / Gl, ΔⵠⲆ / 2);
    b = (this.info & 1) === ya ? ΔΔ[Xr.ⵠᐃⲆⲆΔ][mf.time] : ΔΔ[Xr.ⵠⵠⲆΔᐃⵠⲆ][mf.time];
    ⲆⲆᐃ = this.scale * (-b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height * this.scale;
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(ho, b, -ⲆⲆᐃ / $i, -ΔⵠⲆ / Mq, ⲆⲆᐃ / ih, ΔⵠⲆ / Hj);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = (Ug - this.ⲆⲆⵠᐃ) * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      var b = ΔΔ[Xr.ⲆⲆⲆⲆⲆᐃᐃ];
      ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.width * this.scale;
      ΔⵠⲆ = -b.height * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
      Mm(ho, b, -ⲆⲆᐃ / Dt, -ΔⵠⲆ / eh, ⲆⲆᐃ / 2, ΔⵠⲆ / Nb);
      ho.globalAlpha = (0.6 - this.ᐃⲆⲆ.ΔΔⲆ) * this.ⲆⲆⵠᐃ;
      b = ΔΔ[Xr.ᐃⲆⲆⵠⲆⵠⲆ];
      ⲆⲆᐃ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.width);
      ΔⵠⲆ = -b.height * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
      Mm(ho, b, -ⲆⲆᐃ / Pe, -ΔⵠⲆ / Fr, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
      ho.globalAlpha = 1;
    }
    b = Da === (this.info & 1) ? ΔΔ[Xr.ᐃⲆᐃΔⲆᐃΔ][mf.time] : ΔΔ[Xr.ⲆⲆᐃΔⵠΔᐃ][mf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.width * this.scale;
    ΔⵠⲆ = this.scale * (this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height);
    ho.save();
    ho.translate(Co * -20, Co * 0);
    ho.rotate(this.rotate.ΔΔⲆ);
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(ho, b, Co * -ⲆⲆᐃ / ba, Co * -ΔⵠⲆ / Al, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = (0.6 - this.ᐃⲆⲆ.ΔΔⲆ) * this.ⲆⲆⵠᐃ;
      b = ΔΔ[Xr.ⲆⲆⵠᐃᐃᐃⲆ];
      Mm(ho, b, Co * -ⲆⲆᐃ / 4, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / Yg, ΔⵠⲆ / bs);
      ho.globalAlpha = 1;
    }
    ho.restore();
    b = this.info & 1 ? ΔΔ[Xr.ᐃΔΔΔⵠⲆᐃ][mf.time] : ΔΔ[Xr.ⲆⲆⵠΔᐃⲆⲆ][mf.time];
    ho.save();
    ho.translate(Co * 20, Co * gu);
    ho.rotate(-this.rotate.ΔΔⲆ);
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(ho, b, -ⲆⲆᐃ * Co / $i, Co * -ΔⵠⲆ / Pe, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      b = ΔΔ[Xr.ΔⵠⵠᐃⵠΔᐃ];
      Mm(ho, b, -ⲆⲆᐃ * Co / ul, Co * -ΔⵠⲆ / 4, ⲆⲆᐃ / lr, ΔⵠⲆ / 2);
      ho.globalAlpha = xt;
    }
    ho.globalAlpha = fl;
    ho.restore();
    ho.restore();
  }
  function Kp() {
    var a = undefined;
    var b = Oh;
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    if (this.ⵠⲆΔⲆⲆ >= 0.1 && this.ⵠⲆΔⲆⲆ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ⵠⲆΔⲆⲆ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : Ug;
      }
      a = ΔΔ[Xr.ⵠᐃⵠⵠᐃⲆⲆ][mf.time];
      ⲆⲆᐃ = -a.width * this.ⲆᐃᐃⲆ.ΔΔⲆ;
      ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height;
      ho.globalAlpha = c;
      Mm(ho, a, -ⲆⲆᐃ / nj, -ΔⵠⲆ / fs, ⲆⲆᐃ / Gl, ΔⵠⲆ / ih);
      b = ΔΔ[Xr.ᐃⲆᐃⲆᐃⵠⲆ];
    }
    if (this.ⵠⲆΔⲆⲆ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(Ot, this.ⵠⲆΔⲆⲆ - 0.9))) < 0.2) {
        c *= kq;
      } else {
        c = Xn;
      }
      a = ΔΔ[Xr.ᐃⵠⲆᐃⵠΔΔ][mf.time];
      ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width;
      ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.height;
      ho.globalAlpha = c;
      Mm(ho, a, -ⲆⲆᐃ / fs, -ΔⵠⲆ / qg, ⲆⲆᐃ / xq, ΔⵠⲆ / Jt);
      b = ΔΔ[Xr.ⲆⵠⲆΔΔⲆⵠ];
    }
    if (this.action & iw.ⲆᐃⲆⵠ && b !== undefined) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == C) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = c * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.width;
      ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height;
      Mm(ho, b, -ⲆⲆᐃ / nb, -ΔⵠⲆ / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / bs);
    }
    ho.globalAlpha = 1;
    ho.restore();
  }
  function Vp(a) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[a][mf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = -ⵠⵠ.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / pq, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function Zp(a, b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    c = ΔΔ[a][mf.time];
    ⲆⲆᐃ = -c.width * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    ΔⵠⲆ = -c.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    Mm(ho, c, -ⲆⲆᐃ / 4, -ΔⵠⲆ / 4, ⲆⲆᐃ / pq, ΔⵠⲆ / dg);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && vj == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = ΔΔ[b];
      Mm(ho, c, -ⲆⲆᐃ / ol, -ΔⵠⲆ / eh, ⲆⲆᐃ / ss, ΔⵠⲆ / Gl);
      ho.globalAlpha = lb;
    }
    ho.restore();
  }
  function Xp() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && ts == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = false;
      }
      var b = Co * ((jh - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      c = mj;
      d = zl;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      ho.rotate(this.angle);
      this.ᐃᐃᐃᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Xr.ⲆⲆΔᐃᐃᐃᐃ][mf.time];
      } else {
        f = ΔΔ[Xr.ⵠᐃΔⲆⵠⲆⲆ][mf.time];
      }
      var g = -f.width * this.ᐃᐃᐃᐃ.ΔΔⲆ;
      var h = this.ᐃᐃᐃᐃ.ΔΔⲆ * -f.height;
      Mm(ho, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Xr.ΔⵠⲆΔᐃⲆⵠ][mf.time];
      } else {
        f = ΔΔ[Xr.ᐃⲆᐃᐃΔ][mf.time];
      }
      ho.translate(0, f.height / Yl);
      Mm(ho, f, c - f.width / Nb, -f.height + d);
    }
    ho.restore();
  }
  function $p(a, b, c) {
    if (tt <= a) {
      ⵠⵠ = ΔΔ[a][mf.time];
      switch (a) {
        case Xr.ⲆΔⵠΔΔ:
        case Xr.ᐃΔᐃΔⲆ:
        case Xr.ᐃᐃΔᐃⲆ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - (Rs + b) * Co, -ⵠⵠ.height / ks + Co * (c + 35));
          break;
        case Xr.ΔⲆΔΔΔ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - (Ol + b) * Co, -ⵠⵠ.height / Mq + (c + 45) * Co);
          break;
        case Xr.ᐃΔⵠᐃⵠ:
        case Xr.Δⵠᐃᐃᐃ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - (1 + b) * Co, -ⵠⵠ.height / fs + (c + 40) * Co);
      }
    }
  }
  function Tu() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == 0) {
        this.ᐃⲆⲆ.ᐃⲆΔ = dr;
      }
      var a = (Ug - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
    } else {
      b = Rs;
      c = 0;
    }
    this.ᐃⲆᐃΔᐃⲆᐃ = (this.ᐃⲆᐃΔᐃⲆᐃ + Ut * _w) % (Hj * Math.PI);
    this.ⵠΔⵠᐃΔΔΔ = (this.ⵠΔⵠᐃΔΔΔ - Tr * _w) % (Math.PI * xj);
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.save();
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ΔⲆΔΔⲆ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    ho.restore();
    ho.save();
    ho.rotate(this.ᐃⲆᐃΔᐃⲆᐃ);
    ⵠⵠ = ΔΔ[Xr.ⲆΔⲆⵠⲆᐃⲆ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / Yg, -ⵠⵠ.height / Jt);
    ho.restore();
    ho.save();
    ho.rotate(this.ⵠΔⵠᐃΔΔΔ);
    ⵠⵠ = ΔΔ[Xr.ⵠΔⲆⵠⲆⲆⲆ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / Pn);
    ho.restore();
    ho.restore();
  }
  function Uu() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && xo == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = f;
      }
      var a = (Oq - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
      var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = tg;
    }
    if (this.info === tt) {
      ⵠⵠ = ΔΔ[Xr.ⵠΔᐃᐃᐃ][mf.time];
    } else {
      ⵠⵠ = ΔΔ[Xr.ᐃᐃᐃⲆΔ][mf.time][this.info - 1];
    }
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / 2 + b, -ⵠⵠ.height / xj + c);
    ho.restore();
  }
  function Vu() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃᐃⵠᐃᐃ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[Xr.ΔⲆΔΔΔⲆΔ][mf.time];
    ⲆⲆᐃ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / xj, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function Wu(a, b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    c = ΔΔ[a][mf.time];
    ⲆⲆᐃ = -c.width;
    ΔⵠⲆ = -c.height;
    Mm(ho, c, -ⲆⲆᐃ / ih, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && Jn == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = ΔΔ[b];
      Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / lr, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = ie;
    }
    ho.restore();
  }
  function Zu() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      var a = (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600 * Co;
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = Lr;
      c = Kh;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + _w * 0.5) % (Math.PI * 2);
    }
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.save();
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[Xr.ⵠⲆᐃⵠⲆⲆⲆ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    ho.restore();
    ho.save();
    ho.rotate(this.ᐃⲆⲆⲆΔⵠⲆⲆⲆ);
    ⵠⵠ = ΔΔ[Xr.ⲆⲆⲆᐃᐃΔᐃ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / ss, -ⵠⵠ.height / xq);
    ho.restore();
    ho.restore();
  }
  function $u() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃᐃⵠᐃᐃ.ᐃⲆΔ();
    ⵠⵠ = ΔΔ[Xr.ⲆᐃΔⵠⲆᐃΔ][mf.time];
    ⲆⲆᐃ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.width;
    ΔⵠⲆ = this.ᐃᐃⵠᐃᐃ.ΔΔⲆ * -ⵠⵠ.height;
    Mm(ho, ⵠⵠ, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Yg, ⲆⲆᐃ, ΔⵠⲆ);
    ho.restore();
  }
  function _u() {
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    a = this.info === 0 ? ΔΔ[Xr.ΔΔⵠⲆⲆ][mf.time] : ΔΔ[Xr.ⵠⲆΔΔⲆⵠΔ][mf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -a.width;
    ΔⵠⲆ = -a.height * this.ⲆᐃᐃⲆ.ΔΔⲆ;
    Mm(ho, a, -ⲆⲆᐃ / Pn, -ΔⵠⲆ / Gl, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var a = ΔΔ[Xr.ⵠΔΔⵠⲆΔⲆ];
      Mm(ho, a, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Yl, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function av() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ⲆⲆⵠᐃⲆ.length == Bg || Xr.ⵠΔᐃᐃΔⵠᐃ >= this.ⲆⲆⵠᐃⲆ[this.ⲆⲆⵠᐃⲆ.length - Te])) {
      this.ⲆⲆⵠᐃⲆ.push(Xr.ⲆⵠⲆΔⵠΔᐃ);
    }
    for (var a = 0; this.ⲆⲆⵠᐃⲆ.length > a; a++) {
      this.ⲆⲆⵠᐃⲆ[a] = Math.max(0, this.ⲆⲆⵠᐃⲆ[a] - _w * Xr.ⵠⵠΔⲆΔᐃⵠ);
      ho.globalAlpha = this.ⲆⲆⵠᐃⲆ[a] / 1.3;
      var b = (Ol - this.ⲆⲆⵠᐃⲆ[a]) * 40;
      var c = (za - this.ⲆⲆⵠᐃⲆ[a]) * 35 + Th;
      fb(ho, Co * -68 + b * Math.sin(-this.angle - Math.PI / 2), Co * -to + b * Math.cos(-this.angle - Math.PI / Nb), c);
      cb(ho, "#333333");
    }
    ho.globalAlpha = mk;
    if (this.ⲆⲆⵠᐃⲆ.length > 0 && this.ⲆⲆⵠᐃⲆ[0] === wj) {
      this.ⲆⲆⵠᐃⲆ.shift();
    }
    ho.restore();
  }
  function bv(b) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    this.ᐃᐃᐃᐃ.ᐃⲆΔ();
    ho.globalAlpha = 0.3;
    var c = ΔΔ[Xr.ⲆΔᐃΔⵠⲆⵠ][mf.time];
    var d = -c.width * this.ᐃᐃᐃᐃ.ΔΔⲆ;
    var e = this.ᐃᐃᐃᐃ.ΔΔⲆ * -c.height;
    Mm(ho, c, -d / 2, -e / 2, d, e);
    ho.globalAlpha = hd;
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && Ta == this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ) {
        this.ᐃⲆⲆ.ᐃⲆΔ = uh;
      }
      var f = Co * (_w * (1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * 600);
      var g = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * f;
      var h = f * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      g = ya;
      h = 0;
    }
    c = ΔΔ[b][mf.time];
    Mm(ho, c, -c.width / Zh + g, -c.height / Jt + h);
    ho.restore();
  }
  function cv() {
    var a = Math.PI / H;
    var b = Math.PI / Og;
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.ᐃⲆⲆΔⲆⲆᐃ.ᐃⲆΔ();
    this.ΔᐃⲆΔⵠΔᐃ.ᐃⲆΔ();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    c = this.info === 0 ? ΔΔ[Xr.ᐃⵠⵠᐃⵠ][mf.time] : ΔΔ[Xr.ⵠⲆᐃⵠⲆⵠᐃ][mf.time];
    ⲆⲆᐃ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -c.width;
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -c.height;
    Mm(ho, c, -ⲆⲆᐃ / ih, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && Rh == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      var c = ΔΔ[Xr.ΔⲆⲆᐃⵠΔⵠ];
      Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = hd;
    }
    if (this.action & iw.ᐃᐃⵠⵠᐃ) {
      if (this.ⵠᐃᐃᐃⵠ.ᐃⲆΔ() && this.ⵠᐃᐃᐃⵠ.ⵠᐃⵠ == ts) {
        this.action -= iw.ᐃᐃⵠⵠᐃ;
      }
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[Xr.ⲆᐃΔⵠⲆⲆⲆ];
      Mm(ho, c, -ⲆⲆᐃ / dg, -ΔⵠⲆ / xj, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle + b);
    ho.translate(100, tt);
    ho.rotate(a);
    c = this.info === tt ? ΔΔ[Xr.ᐃΔⵠΔᐃᐃⵠ][mf.time] : ΔΔ[Xr.ΔⲆΔⵠᐃⵠⲆ][mf.time];
    ⲆⲆᐃ = this.ᐃⲆⲆΔⲆⲆᐃ.ΔΔⲆ * -c.width;
    ΔⵠⲆ = -c.height * this.ᐃⲆⲆΔⲆⲆᐃ.ΔΔⲆ;
    Mm(ho, c, -ⲆⲆᐃ / pq, -ΔⵠⲆ / Yl, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      c = ΔΔ[Xr.ⵠᐃΔᐃᐃⵠᐃ];
      Mm(ho, c, -ⲆⲆᐃ / Zh, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = rg;
    }
    if (this.action & iw.ᐃᐃⵠⵠᐃ) {
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[Xr.ⵠΔᐃΔΔΔⲆ];
      Mm(ho, c, -ⲆⲆᐃ / Gl, -ΔⵠⲆ / pq, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle + a + b);
    ho.translate(100, Kh);
    ho.rotate(a);
    c = this.info === 0 ? ΔΔ[Xr.ᐃᐃᐃⵠⲆΔᐃ][mf.time] : ΔΔ[Xr.ΔᐃᐃⵠⲆⵠⵠ][mf.time];
    ⲆⲆᐃ = -c.width * this.ΔᐃⲆΔⵠΔᐃ.ΔΔⲆ;
    ΔⵠⲆ = -c.height * this.ΔᐃⲆΔⵠΔᐃ.ΔΔⲆ;
    Mm(ho, c, -ⲆⲆᐃ / Gl, -ΔⵠⲆ / Hj, ⲆⲆᐃ, ΔⵠⲆ);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
      c = ΔΔ[Xr.ⵠⲆⲆⵠᐃᐃᐃ];
      Mm(ho, c, -ⲆⲆᐃ / 2, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    if (this.action & iw.ᐃᐃⵠⵠᐃ) {
      ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
      c = ΔΔ[Xr.ⲆΔⵠᐃΔΔⵠ];
      Mm(ho, c, -ⲆⲆᐃ / xq, -ΔⵠⲆ / 2, ⲆⲆᐃ, ΔⵠⲆ);
      ho.globalAlpha = 1;
    }
    ho.restore();
  }
  function dv() {
    if (this.ᐃⲆⲆ.ᐃⲆΔ) {
      if (this.ᐃⲆⲆ.ᐃΔⵠⵠ.ᐃⲆΔ() && this.ᐃⲆⲆ.ᐃΔⵠⵠ.ⵠᐃⵠ == sl) {
        this.ᐃⲆⲆ.ᐃⲆΔ = Jn;
      }
      var a = Co * ((1 - this.ᐃⲆⲆ.ᐃΔⵠⵠ.ΔΔⲆ) * _w * 600);
      var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
    } else {
      b = 0;
      c = Lr;
    }
    ho.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * Yg - 1;
      c += Math.random() * Mt - Te;
    }
    ho.translate(Xw.ⵠᐃⲆ.x + this.x + b, Xw.ⵠᐃⲆ.y + this.y + c);
    ho.rotate(this.angle);
    ⵠⵠ = ΔΔ[Xr.ⲆᐃΔⲆⵠ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / bs, -ⵠⵠ.height / H);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + _w * 3) % (Math.PI * 2);
    }
    ho.rotate(this.rotate);
    ⵠⵠ = ΔΔ[Xr.ΔΔⵠⵠⲆⵠΔ][mf.time];
    Mm(ho, ⵠⵠ, -ⵠⵠ.width / xj, -ⵠⵠ.height / 2);
    ho.restore();
  }
  function ev() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    ho.rotate(this.angle);
    var a = ᐃⵠΔⲆ.ΔΔⵠΔ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + _w / ih, 1.8) : Math.max(this.scale - _w, 1);
    this.ⲆᐃᐃⲆ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    this.ⲆⲆⵠᐃ = a < 350 ? Math.max(0, this.ⲆⲆⵠᐃ - _w * 2.2) : Math.min(cu, this.ⲆⲆⵠᐃ + _w * 2.2);
    b = ΔΔ[Xr.ⲆᐃⲆᐃⲆⲆⲆ][mf.time];
    ⲆⲆᐃ = -b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
    ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height * this.scale;
    ho.globalAlpha = xt - this.ⲆⲆⵠᐃ;
    Mm(ho, b, -ⲆⲆᐃ / Vn, -ΔⵠⲆ / 4, ⲆⲆᐃ / Pn, ΔⵠⲆ / pq);
    b = ΔΔ[Xr.ΔᐃⵠⵠΔΔᐃ][mf.time];
    ⲆⲆᐃ = this.scale * (-b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ΔⵠⲆ = this.scale * (-b.height * this.ⲆᐃᐃⲆ.ΔΔⲆ);
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(ho, b, -ⲆⲆᐃ / 4, -ΔⵠⲆ / 4, ⲆⲆᐃ / dg, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      if (this.ᐃⲆⲆ.ᐃⲆΔ() && f == this.ᐃⲆⲆ.ⵠᐃⵠ) {
        this.action -= iw.ⲆᐃⲆⵠ;
      }
      ho.globalAlpha = (0.6 - this.ᐃⲆⲆ.ΔΔⲆ) * (1 - this.ⲆⲆⵠᐃ);
      var b = ΔΔ[Xr.ⵠⵠΔΔⲆᐃⵠ];
      ⲆⲆᐃ = this.scale * (-b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ);
      ΔⵠⲆ = this.ⲆᐃᐃⲆ.ΔΔⲆ * -b.height * this.scale;
      Mm(ho, b, -ⲆⲆᐃ / qg, -ΔⵠⲆ / fs, ⲆⲆᐃ / Yg, ΔⵠⲆ / dg);
      ho.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      b = ΔΔ[Xr.ⲆⵠⵠᐃΔᐃᐃ];
      ⲆⲆᐃ = -b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
      ΔⵠⲆ = this.scale * (-b.height * this.ⲆᐃᐃⲆ.ΔΔⲆ);
      Mm(ho, b, -ⲆⲆᐃ / 4, -ΔⵠⲆ / ul, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
      ho.globalAlpha = 1;
    }
    b = ΔΔ[Xr.ΔᐃΔᐃⲆᐃᐃ][mf.time];
    ⲆⲆᐃ = -b.width * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
    ΔⵠⲆ = -b.height * this.ⲆᐃᐃⲆ.ΔΔⲆ * this.scale;
    ho.save();
    ho.translate(Co * -40, Co * 80);
    ho.rotate(this.rotate.ΔΔⲆ);
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(ho, b, -ⲆⲆᐃ * Co / 4, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / Yl, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      b = ΔΔ[Xr.ᐃᐃⵠⲆᐃᐃⲆ];
      Mm(ho, b, -ⲆⲆᐃ * Co / 4, -ΔⵠⲆ * Co / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / Nb);
      ho.globalAlpha = qu;
    }
    ho.restore();
    b = ΔΔ[Xr.ⵠⵠΔΔⲆᐃⲆ][mf.time];
    ho.save();
    ho.translate(Co * 40, Co * 80);
    ho.rotate(-this.rotate.ΔΔⲆ);
    ho.globalAlpha = this.ⲆⲆⵠᐃ;
    Mm(ho, b, Co * -ⲆⲆᐃ / 4, -ΔⵠⲆ * Co / Pe, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
    if (this.action & iw.ⲆᐃⲆⵠ) {
      ho.globalAlpha = this.ⲆⲆⵠᐃ * (0.6 - this.ᐃⲆⲆ.ΔΔⲆ);
      b = ΔΔ[Xr.ⲆⵠⵠΔᐃⲆⵠ];
      Mm(ho, b, -ⲆⲆᐃ * Co / 4, Co * -ΔⵠⲆ / 4, ⲆⲆᐃ / ss, ΔⵠⲆ / bs);
      ho.globalAlpha = 1;
    }
    ho.globalAlpha = 1;
    ho.restore();
    ho.restore();
  }
  function fv(a, b, c) {
    if (a >= 0) {
      ⵠⵠ = ΔΔ[a][mf.time];
      switch (a) {
        case Xr.ⲆⵠⵠⲆⲆ:
        case Xr.ⵠᐃⲆΔΔ:
        case Xr.ᐃⲆⵠΔⲆ:
        case Xr.ⲆΔⲆⲆⵠ:
        case Xr.ΔⲆⲆⵠⲆ:
        case Xr.ⲆⵠΔⵠΔ:
          Nv(a, ⵠⵠ, -ⵠⵠ.width / 2 - Co * (45 + b), -ⵠⵠ.height / 2 + (c + 22) * Co);
          break;
        case Xr.ΔᐃⲆᐃᐃ:
        case Xr.ᐃⲆΔⲆⵠ:
        case Xr.ⲆᐃᐃⲆᐃ:
        case Xr.ⲆⲆⲆⵠⵠ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / Fr - Co * (52 + b), -ⵠⵠ.height / eh + (c + 20) * Co);
          break;
        case Xr.ΔΔⲆᐃᐃ:
        case Xr.ⲆⲆⲆᐃΔ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / Al - Co * (57 + b), -ⵠⵠ.height / 4 + (c + Cs) * Co);
          break;
        case Xr.ΔⵠᐃΔᐃ:
        case Xr.ᐃᐃⲆΔⲆ:
        case Xr.ⵠΔΔΔΔ:
        case Xr.ᐃΔⲆᐃΔ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * Co, -ⵠⵠ.height / Fr + Co * (c + 45));
          break;
        case Xr.ΔⲆᐃⵠΔ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (52 + b), -ⵠⵠ.height / 4 + (c + 45) * Co);
          break;
        case Xr.ⵠⵠΔΔⵠ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (47 + b), -ⵠⵠ.height / 4 + Co * (c + 44));
          break;
        case Xr.ⵠΔᐃᐃⵠ:
          Nv(a, ⵠⵠ, -ⵠⵠ.width / 2 - (47 + b) * Co, -ⵠⵠ.height / dg + (c + 44) * Co);
          break;
        case Xr.ⵠᐃᐃΔⵠ:
          Nv(a, ⵠⵠ, -ⵠⵠ.width / 2 - (40 + b) * Co, -ⵠⵠ.height / jk + (c + 65) * Co);
          break;
        case Xr.ᐃᐃΔⲆⲆ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (37 + b), -ⵠⵠ.height / 4 + (c + 85) * Co);
          break;
        case Xr.ᐃΔⲆⵠΔ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / ul - (37 + b) * Co, -ⵠⵠ.height / ks + (c + 85) * Co);
          break;
        case Xr.ᐃΔΔᐃΔ:
        case Xr.ⲆⵠⲆᐃΔ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - (26 + b) * Co, -ⵠⵠ.height / 4 + (c + 77) * Co);
          break;
        case Xr.ΔⲆᐃΔⵠ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / Dt - Co * (37 + b), -ⵠⵠ.height / 4 + (c + 85) * Co);
          break;
        case Xr.ⲆⲆᐃᐃⲆ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / Vn - Co * (47 + b), -ⵠⵠ.height / 4 + (c + 44) * Co);
          break;
        case Xr.ΔΔΔⲆΔ:
        case Xr.ⲆΔᐃΔⵠ:
        case Xr.ᐃᐃⲆᐃᐃ:
        case Xr.Δᐃᐃⵠⵠ:
        case Xr.ⵠΔΔᐃᐃ:
        case Xr.ΔᐃⵠⵠΔ:
        case Xr.ⵠΔⲆΔⲆ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (37 + b), -ⵠⵠ.height / 4 + (c + 30) * Co);
          break;
        case Xr.Ⲇᐃⵠⵠᐃ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * Co, -ⵠⵠ.height / ol + Co * (c + 35));
          break;
        case Xr.ᐃΔⵠⵠᐃ:
        case Xr.ⵠⵠᐃᐃΔ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (47 + b), -ⵠⵠ.height / 4 + Co * (c + 40));
          break;
        case Xr.ᐃⵠⲆⵠⲆ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / Mq - Co * (47 + b), -ⵠⵠ.height / nj + (c + 34) * Co);
          break;
        case Xr.ⵠΔᐃⵠᐃ:
        case Xr.ⵠᐃᐃⵠΔ:
        case Xr.ᐃᐃᐃᐃⲆ:
        case Xr.ᐃΔⵠⲆᐃ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - Co * (37 + b), -ⵠⵠ.height / ks + (c + 90) * Co);
          break;
        case Xr.Ⲇᐃᐃᐃᐃ:
          Ev(a, ⵠⵠ, -ⵠⵠ.width / 4 - (40 + b) * Co, -ⵠⵠ.height / 4 + (c + 85) * Co);
          break;
        case Xr.ⲆⲆΔᐃᐃ:
          Nv(a, ⵠⵠ, -ⵠⵠ.width / 2 - Co * (39 + b), -ⵠⵠ.height / 2 + Co * (c + 90));
          break;
        case Xr.ⲆᐃΔⲆΔ:
        case Xr.ⲆⲆⵠⲆⲆ:
        case Xr.ⵠΔΔΔⵠ:
        case Xr.ᐃⵠⵠⵠᐃ:
        case Xr.ᐃⵠⲆⵠΔ:
        case Xr.ⵠⵠᐃᐃⲆ:
          Nv(a, ⵠⵠ, -ⵠⵠ.width / 2 - (46 + b) * Co, -ⵠⵠ.height / 2 + (c + 35) * Co);
          break;
        case Xr.ᐃᐃΔⵠΔ:
          Nv(a, ⵠⵠ, -ⵠⵠ.width / 2 - (47 + b) * Co, -ⵠⵠ.height / Hj + Co * (c + 54));
          break;
        case Xr.ᐃΔΔΔΔ:
        case Xr.ⲆΔΔⵠⵠ:
        case Xr.ⵠᐃⵠᐃΔ:
        case Xr.ⵠᐃⲆⲆⵠ:
          Nv(a, ⵠⵠ, -ⵠⵠ.width / 2 - Co * (46 + b), -ⵠⵠ.height / 2 + (c + 35) * Co);
          break;
        case Xr.ᐃⵠᐃΔⵠ:
          Nv(a, ⵠⵠ, -ⵠⵠ.width / 2 - Co * (47 + b), -ⵠⵠ.height / Jt + Co * (c + 20));
      }
    }
  }
  function gv(a) {
    if (a > Bg) {
      var b = ΔΔ[a][mf.time];
      switch (a) {
        case Xr.ᐃᐃⲆⵠⵠ:
          Nv(a, b, -b.width / Jt + Hj * Co, -b.height / Gl - Co * 5);
          break;
        case Xr.ᐃⲆᐃⲆᐃ:
          Nv(a, b, -b.width / bs, -b.height / Hj - Co * 18);
          break;
        case Xr.ᐃⵠⵠⵠΔ:
          Nv(a, b, -b.width / 2, -b.height / 2 - Co * 10);
          break;
        case Xr.ⲆᐃᐃΔᐃ:
          Nv(a, b, -b.width / Yg, -b.height / 2 - Co * Rl);
          break;
        case Xr.ⵠᐃᐃΔᐃ:
          Ev(a, b, -b.width / 4, -b.height / 4 - Co * Mg);
          break;
        case Xr.Δᐃᐃⵠᐃ:
          Nv(a, b, -b.width / 2 - Co * Ot, -b.height / Yg - Co * 23);
          break;
        case Xr.ΔᐃΔⲆⲆ:
          Nv(a, b, -b.width / 2, -b.height / Gl - Fk * Co);
          break;
        case Xr.ᐃⲆⲆⵠᐃ:
          Nv(a, b, -b.width / 2, -b.height / Zg - Co * 2);
          break;
        case Xr.ⵠⲆⲆⵠⵠ:
          Nv(a, b, -b.width / pq + Co * 1.5, -b.height / Zh - js * Co);
          break;
        case Xr.ⲆᐃⵠΔᐃ:
        case Xr.Δⵠⵠⵠᐃ:
        case Xr.ᐃΔᐃⲆⲆ:
        case Xr.ⲆΔᐃΔᐃ:
        case Xr.ⵠᐃΔΔᐃ:
        case Xr.ⵠⵠΔᐃᐃ:
        case Xr.ΔᐃᐃᐃΔ:
        case Xr.ⵠᐃΔΔⵠ:
        case Xr.ᐃⵠᐃⵠⵠ:
        case Xr.ⵠⲆⵠΔᐃ:
        case Xr.ⲆⵠΔᐃⲆ:
          Ev(a, b, -b.width / ks, -b.height / eg + Co * Mt);
          break;
        case Xr.ᐃᐃⵠⲆⲆ:
        case Xr.ΔⲆΔⲆⲆ:
          Nv(a, b, -b.width / 2 - Co * 5, -b.height / Gl - Co * ih);
          break;
        case Xr.ᐃⲆⲆΔΔ:
          Nv(a, b, -b.width / 2, -b.height / pq - Co * 2);
          break;
        case Xr.ΔΔᐃⲆΔ:
          Nv(a, b, -b.width / 2, -b.height / Yl - Co * 2);
          break;
        case Xr.ᐃⲆⵠⲆⲆ:
          Nv(a, b, -b.width / 2, -b.height / Hj - Co * 2);
          break;
        case Xr.ᐃⵠⵠⲆΔ:
          Nv(a, b, -b.width / Zh + xq * Co, -b.height / 2);
          break;
        case Xr.ᐃⵠΔᐃΔ:
          Nv(a, b, -b.width / 2, -b.height / 2 - Co * 5);
          break;
        case Xr.ᐃⲆΔⵠⵠ:
        case Xr.ⵠᐃⵠⵠΔ:
        case Xr.ⲆⲆᐃᐃΔ:
          Nv(a, b, -b.width / 2 - Co * 1, -b.height / 2);
          break;
        case Xr.ⲆΔⵠⵠᐃ:
          Nv(a, b, -b.width / Gl, -b.height / 2 + Co * 2);
          break;
        case Xr.ΔᐃⲆⵠⵠ:
        case Xr.ΔᐃⵠⲆΔ:
          Nv(a, b, -b.width / 2, -b.height / ih + Co * 8);
          break;
        case Xr.ⲆⲆΔΔⵠ:
          Nv(a, b, -b.width / Zg, -b.height / bs - Co * 4);
      }
    }
  }
  function hv() {
    if (!this.ᐃⲆᐃⲆⵠ && this.ΔⲆᐃΔΔ !== Lr) {
      if (this.x != this.r.x || this.y != this.r.y) {
        var a = (ᐃⵠΔⲆ.ΔⵠΔⵠⲆᐃⲆ(this.x, this.y, this.r.x, this.r.y) + Math.PI / lr) % (ss * Math.PI);
        this.ⲆΔΔΔⵠ = ᐃⵠΔⲆ.ⵠΔⵠΔΔᐃⲆ(a, this.ⲆΔΔΔⵠ);
        this.ⲆΔΔΔⵠ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⲆΔΔΔⵠ, a, 0.018);
      }
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      ho.rotate(this.ⲆΔΔΔⵠ);
      if (this.ΔⲆᐃΔΔ === _r.ⵠⵠⲆΔⲆ) {
        if (this.ᐃⵠⵠⵠⲆ > 50 || this.ⵠᐃᐃᐃⲆ > 0) {
          if (this.ᐃⵠⵠⵠⲆ > 50) {
            this.ⵠᐃᐃᐃⲆ = Math.min(hs, this.ⵠᐃᐃᐃⲆ + _w);
          } else {
            this.ⵠᐃᐃᐃⲆ = Math.max(0, this.ⵠᐃᐃᐃⲆ - _w);
          }
          ho.globalAlpha = this.ⵠᐃᐃᐃⲆ;
          var b = ΔΔ[Xr.ΔⵠᐃⵠⵠΔΔ][mf.time];
          Ev(Xr.ΔⵠᐃⵠⵠΔΔ, b, -b.width / 4, -b.height / Mq);
          ho.globalAlpha = Ol;
        }
        b = ΔΔ[Xr.ⵠⵠⲆΔⲆ][mf.time];
        Ev(Xr.ⵠⵠⲆΔⲆ, b, -b.width / Gi, -b.height / 4);
      } else if (_r.ⵠᐃⲆⲆΔ === this.ΔⲆᐃΔΔ) {
        this.ⵠⵠⲆⲆᐃ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⵠⵠⲆⲆᐃ, this.ᐃⵠⵠⵠⲆ, 0.018);
        this.ᐃⲆⵠᐃⵠᐃⲆ.ᐃⲆΔ();
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min(1, this.ⵠᐃᐃᐃⲆ + _w / 4);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0.1, this.ⵠᐃᐃᐃⲆ - _w);
        }
        b = ΔΔ[Xr.ⵠᐃⲆΔΔᐃᐃ][mf.time];
        Ev(Xr.ⵠᐃⲆΔΔᐃᐃ, b, -b.width / ul, -b.height / nj);
        b = ΔΔ[Xr.ⵠⵠᐃΔⵠⲆⵠ][mf.time];
        ⲆⲆᐃ = -b.width;
        ΔⵠⲆ = -b.height;
        ho.save();
        ho.translate(Co * -al, -xs * Co);
        ho.rotate(this.ⵠᐃᐃᐃⲆ * this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ);
        Mm(ho, b, -ⲆⲆᐃ / Al, -ΔⵠⲆ / 4, ⲆⲆᐃ / Yg, ΔⵠⲆ / jk);
        ho.restore();
        b = ΔΔ[Xr.ⵠⲆᐃⵠⵠᐃⲆ][mf.time];
        ho.save();
        ho.translate(Co * 20, Co * -qr);
        ho.rotate(this.ⵠᐃᐃᐃⲆ * -this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ);
        Mm(ho, b, -ⲆⲆᐃ / qg, -ΔⵠⲆ / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / pq);
        ho.restore();
      } else if (this.ΔⲆᐃΔΔ === _r.ⲆⲆΔⵠⲆ) {
        this.ⵠⵠⲆⲆᐃ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⵠⵠⲆⲆᐃ, this.ᐃⵠⵠⵠⲆ, 0.018);
        this.ᐃⲆⵠᐃⵠᐃⲆ.ᐃⲆΔ();
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min(hs, this.ⵠᐃᐃᐃⲆ + _w / 4);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0.1, this.ⵠᐃᐃᐃⲆ - _w);
        }
        b = ΔΔ[Xr.ᐃᐃΔⵠⵠⵠⲆ][mf.time];
        Ev(Xr.ᐃᐃΔⵠⵠⵠⲆ, b, -b.width / 4, -b.height / Dt);
        b = ΔΔ[Xr.ⵠⲆⵠⲆⵠⵠΔ][mf.time];
        ⲆⲆᐃ = -b.width;
        ΔⵠⲆ = -b.height;
        ho.save();
        ho.translate(Co * -40, Co * -45);
        ho.rotate(this.ⵠᐃᐃᐃⲆ * this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ);
        Mm(ho, b, -ⲆⲆᐃ / ks, -ΔⵠⲆ / ks, ⲆⲆᐃ / Mt, ΔⵠⲆ / 2);
        ho.restore();
        b = ΔΔ[Xr.ⵠⲆⲆΔΔᐃΔ][mf.time];
        ho.save();
        ho.translate(Co * 40, Co * -45);
        ho.rotate(-this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ * this.ⵠᐃᐃᐃⲆ);
        Mm(ho, b, -ⲆⲆᐃ / 4, -ΔⵠⲆ / Fr, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
        ho.restore();
      } else if (this.ΔⲆᐃΔΔ === _r.ⲆⵠΔᐃⵠ) {
        this.ⵠⵠⲆⲆᐃ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⵠⵠⲆⲆᐃ, this.ᐃⵠⵠⵠⲆ, 0.018);
        this.ᐃⲆⵠᐃⵠᐃⲆ.ᐃⲆΔ();
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min(Ot, this.ⵠᐃᐃᐃⲆ + _w / 4);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0.1, this.ⵠᐃᐃᐃⲆ - _w);
        }
        b = ΔΔ[Xr.ᐃᐃΔⵠⲆⵠΔ][mf.time];
        Ev(Xr.ᐃᐃΔⵠⲆⵠΔ, b, -b.width / Dt, -b.height / 4);
        b = ΔΔ[Xr.ⲆΔΔⲆⲆⵠⵠ][mf.time];
        ⲆⲆᐃ = -b.width;
        ΔⵠⲆ = -b.height;
        ho.save();
        ho.translate(Co * -40, Co * -45);
        ho.rotate(this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ * this.ⵠᐃᐃᐃⲆ);
        Mm(ho, b, -ⲆⲆᐃ / ks, -ΔⵠⲆ / 4, ⲆⲆᐃ / Nb, ΔⵠⲆ / 2);
        ho.restore();
        b = ΔΔ[Xr.ⵠⵠⵠⵠⲆᐃⵠ][mf.time];
        ho.save();
        ho.translate(Co * 40, Co * -45);
        ho.rotate(this.ⵠᐃᐃᐃⲆ * -this.ᐃⲆⵠᐃⵠᐃⲆ.ΔΔⲆ);
        Mm(ho, b, -ⲆⲆᐃ / ba, -ΔⵠⲆ / 4, ⲆⲆᐃ / 2, ΔⵠⲆ / 2);
        ho.restore();
      } else if (this.ΔⲆᐃΔΔ === _r.ⲆⵠΔΔΔ) {
        this.ⵠⵠⲆⲆᐃ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⵠⵠⲆⲆᐃ, this.ᐃⵠⵠⵠⲆ, 0.018);
        b = ΔΔ[Xr.ⲆⵠΔΔΔ][mf.time];
        Ev(Xr.ⲆⵠΔΔΔ, b, -b.width / 4, -b.height / Gi);
      } else if (_r.ΔⵠΔΔⵠ === this.ΔⲆᐃΔΔ) {
        this.ⵠⵠⲆⲆᐃ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(this.ⵠⵠⲆⲆᐃ, this.ᐃⵠⵠⵠⲆ, 0.018);
        b = ΔΔ[Xr.ΔⵠΔΔⵠ][mf.time];
        Ev(Xr.ΔⵠΔΔⵠ, b, -b.width / ba, -b.height / 4);
      } else if (this.ΔⲆᐃΔΔ === _r.ⵠᐃᐃⲆᐃ) {
        b = ΔΔ[Xr.ⵠᐃᐃⲆᐃ][mf.time];
        Ev(Xr.ⵠᐃᐃⲆᐃ, b, -b.width / Gi, -b.height / Pe);
      } else if (this.ΔⲆᐃΔΔ === _r.ΔΔⵠⲆⲆ) {
        b = ΔΔ[Xr.ⲆΔⵠΔⲆⵠⲆ][mf.time];
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min(qu, this.ⵠᐃᐃᐃⲆ + _w / 4);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0, this.ⵠᐃᐃᐃⲆ - _w);
        }
        this.ⵠΔᐃⵠⵠ += _w * 60;
        if (this.ⵠΔᐃⵠⵠ > 60) {
          this.ⵠΔᐃⵠⵠ -= 60;
        }
        var c = (La * (this.ⵠΔᐃⵠⵠ < 30 ? this.ⵠΔᐃⵠⵠ / 30 : fl - (this.ⵠΔᐃⵠⵠ - 30) / 30) - 6) * this.ⵠᐃᐃᐃⲆ;
        Ev(Xr.ⲆΔⵠΔⲆⵠⲆ, b, -b.width / 4, -b.height / Al + c);
      } else if (this.ΔⲆᐃΔΔ === _r.ⵠⲆᐃⲆΔ) {
        b = ΔΔ[Xr.ᐃΔⲆⵠᐃⲆⵠ][mf.time];
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min(Ol, this.ⵠᐃᐃᐃⲆ + _w / 4);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0, this.ⵠᐃᐃᐃⲆ - _w);
        }
        this.ⵠΔᐃⵠⵠ += _w * 60;
        if (this.ⵠΔᐃⵠⵠ > 60) {
          this.ⵠΔᐃⵠⵠ -= 60;
        }
        c = this.ⵠᐃᐃᐃⲆ * (-qq + (this.ⵠΔᐃⵠⵠ < 30 ? this.ⵠΔᐃⵠⵠ / 30 : 1 - (this.ⵠΔᐃⵠⵠ - 30) / 30) * 12);
        Ev(Xr.ᐃΔⲆⵠᐃⲆⵠ, b, -b.width / 4, -b.height / 4 + c);
      } else if (_r.ᐃⵠⵠᐃⵠ === this.ΔⲆᐃΔΔ) {
        var d = Math.PI / dg;
        var e = Math.PI / nb;
        b = ΔΔ[Xr.ᐃᐃᐃⵠⵠⵠΔ][mf.time];
        if (this.ᐃⵠⵠⵠⲆ > 85) {
          this.ⵠᐃᐃᐃⲆ = Math.min(hd, this.ⵠᐃᐃᐃⲆ + _w / Og);
        } else {
          this.ⵠᐃᐃᐃⲆ = Math.max(0, this.ⵠᐃᐃᐃⲆ - _w);
        }
        this.ⵠΔᐃⵠⵠ += _w * 60;
        if (this.ⵠΔᐃⵠⵠ > 60) {
          this.ⵠΔᐃⵠⵠ -= 60;
        }
        c = this.ⵠᐃᐃᐃⲆ * ($a * (this.ⵠΔᐃⵠⵠ < 30 ? this.ⵠΔᐃⵠⵠ / 30 : hd - (this.ⵠΔᐃⵠⵠ - 30) / 30) - 6);
        Ev(Xr.ᐃᐃᐃⵠⵠⵠΔ, b, -b.width / 4 + c, -b.height / Pe);
        ho.restore();
        ho.save();
        ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
        ho.rotate(Math.PI + this.ⲆΔΔΔⵠ + e);
        ho.translate(120, c);
        ho.rotate(d);
        b = ΔΔ[Xr.ᐃΔⵠΔᐃᐃⵠ][mf.time];
        ⲆⲆᐃ = -b.width;
        ΔⵠⲆ = -b.height;
        Mm(ho, b, -ⲆⲆᐃ / jk, -ΔⵠⲆ / jk, ⲆⲆᐃ, ΔⵠⲆ);
        ho.restore();
        ho.save();
        ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
        ho.rotate(Math.PI + this.ⲆΔΔΔⵠ + d + e);
        ho.translate(120, c);
        ho.rotate(d);
        b = ΔΔ[Xr.ᐃᐃᐃⵠⲆΔᐃ][mf.time];
        ⲆⲆᐃ = -b.width;
        ΔⵠⲆ = -b.height;
        Mm(ho, b, -ⲆⲆᐃ / 2, -ΔⵠⲆ / Pn, ⲆⲆᐃ, ΔⵠⲆ);
      }
      ho.restore();
    }
  }
  function iv() {
    if (this.enabled && this.ΔᐃⲆΔᐃ >= tg) {
      var a = new Date().getTime() - this.ΔᐃⲆΔᐃ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = Te - (b - 0.5) * H;
      } else {
        b *= 2;
      }
      if ((a = Math.floor(a / 1000)) < lw.ᐃⲆᐃⲆᐃᐃⵠ) {
        a = lw.ᐃⲆᐃⲆᐃᐃⵠ - a;
        this.label ||= od(Co, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (this.now != a || !this.ⵠⵠᐃΔⵠΔⵠ) {
          this.now = a;
          this.ⵠⵠᐃΔⵠΔⵠ = od(Co, "" + a, 40, "#660000", null, null, null, null, null, "#000", Ds);
        }
        Mm(ho, this.label, (lo - this.label.width) / Yg, Co * 100);
        ho.globalAlpha = b;
        Mm(ho, this.ⵠⵠᐃΔⵠΔⵠ, (lo - this.label.width) / 2 - this.ⵠⵠᐃΔⵠΔⵠ.width + St * Co, Co * 100);
        ho.globalAlpha = 1;
      }
    }
  }
  function jv() {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; this.text.length > a && a < bs; a++) {
        if (!this.label[a]) {
          this.label[a] = Cb(Co, this.text[a]);
          this.ΔⲆⲆⲆΔΔⵠ[a] = 0;
          this.ᐃⲆⲆⲆΔΔⵠ[a] = mj;
        }
        if (a === ie) {
          this.ᐃⲆⲆⲆΔΔⵠ[Rq] = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(this.ⵠΔᐃᐃᐃⵠΔ) * 30;
        }
      }
      this.ΔⲆⲆⲆΔΔⵠ[Kh] += _w;
      if (this.text.length > 1) {
        this.ⵠΔᐃᐃᐃⵠΔ = Math.min(this.ⵠΔᐃᐃᐃⵠΔ + _w, Ot);
        if (Te < this.ΔⲆⲆⲆΔΔⵠ[0] && this.ⵠΔᐃᐃᐃⵠΔ > 0.5) {
          this.ΔⲆⲆⲆΔΔⵠ[1] += _w;
        }
      }
      for (a = Pg; this.text.length > a && Zh > a; a++) {
        var b = this.ΔⲆⲆⲆΔΔⵠ[a];
        if (b > Pg) {
          ho.globalAlpha = b < 0.25 ? b * fs : b > 3.75 ? Math.max(($i - b) * nb, 0) : 1;
          Mm(ho, this.label[a], -this.label[a].width / 2, -this.ᐃⲆⲆⲆΔΔⵠ[a] + -this.label[a].height / Pn - Co * 110);
        }
      }
      if (this.ΔⲆⲆⲆΔΔⵠ[0] > 4) {
        this.ΔⲆⲆⲆΔΔⵠ.shift();
        this.text.shift();
        this.ᐃⲆⲆⲆΔΔⵠ.shift();
        this.label.shift();
        this.ⵠΔᐃᐃᐃⵠΔ = Kh;
      }
    }
    ho.restore();
  }
  function kv() {
    var c = Lr;
    switch (this.right) {
      case Xr.ⲆΔⵠΔΔ:
      case Xr.ᐃΔᐃΔⲆ:
      case Xr.ᐃᐃΔᐃⲆ:
      case Xr.ΔⲆΔΔΔ:
      case Xr.ᐃΔⵠᐃⵠ:
      case Xr.Δⵠᐃᐃᐃ:
        c = 1;
    }
    if (this.ᐃⲆᐃⲆⵠ) {
      for (var f = 0; this.bubbles.length > f; f++) {
        var j = this.bubbles[f];
        if (j.ΔΔᐃΔᐃ > 0.5) {
          var k = Ot - (j.ΔΔᐃΔᐃ - 0.5) * pq;
        } else {
          k = j.ΔΔᐃΔᐃ * 2;
        }
        ho.globalAlpha = k;
        var m = ΔΔ[Xr.ⵠⲆᐃᐃⵠΔᐃ][mf.time][j.id];
        Mm(ho, m, Xw.ⵠᐃⲆ.x + j.x - m.width / 2, Xw.ⵠᐃⲆ.y + j.y - m.height / 2);
        ho.globalAlpha = 1;
      }
    } else {
      ho.save();
      ho.translate(Xw.ⵠᐃⲆ.x + this.x, Xw.ⵠᐃⲆ.y + this.y);
      mf.ᐃⲆΔᐃΔᐃΔⲆΔ(this);
      if (this.action & iw.ⲆⵠⵠΔⲆᐃⲆ) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case Xr.ᐃᐃΔⵠΔ:
                ho.save();
                var b = a.attack.ΔΔⲆ * -3 / Math.PI;
                if (a.attack.ⵠᐃⵠ) {
                  var c = -Math.PI / 3 - (Math.PI / vt + a.attack.ΔΔⲆ) / 3;
                } else {
                  c = a.attack.ΔΔⲆ;
                }
                ho.rotate(a.angle - Math.PI / Yg + c);
                ho.globalAlpha = b / 1.2;
                fb(ho, Co * -40, Co * 90, Co * 5);
                cb(ho, "#0B6A84");
                ho.globalAlpha = b / 1.2;
                fb(ho, Co * -52, Co * 100, Co * 8);
                cb(ho, "#0B6A84");
                ho.globalAlpha = b / 1.2;
                fb(ho, Co * -30, Co * 95, Co * 4);
                cb(ho, "#0B6A84");
                ho.globalAlpha = 1;
                ho.restore();
                break;
              case Xr.ᐃΔΔΔΔ:
              case Xr.ⲆΔΔⵠⵠ:
              case Xr.ⵠᐃⵠᐃΔ:
              case Xr.ⵠᐃⲆⲆⵠ:
                if (qu === a.ⲆⵠᐃⲆΔⲆΔ) {
                  break;
                }
                if (a.ⲆΔΔΔᐃ > 0) {
                  var d = Xr.ᐃⲆⵠⲆᐃⲆΔ[mf.time];
                } else {
                  d = gu < a.ⲆᐃⵠⵠⵠΔΔ || Lr < a.ΔΔⲆΔⲆ ? Xr.ⵠⵠⵠⲆⲆΔΔ[mf.time] : Xr.ᐃⲆⵠⲆⵠⲆⵠ[mf.time];
                }
                b = -hl * a.attack.ΔΔⲆ / Math.PI;
                if ((c = a.attack.ⵠᐃⵠ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ⵠᐃᐃⲆⵠᐃΔ = a.angle;
                }
                ho.save();
                ho.rotate(a.ⵠᐃᐃⲆⵠᐃΔ - Math.PI / 2);
                ho.globalAlpha = b;
                var e = Co * 25 + c * 25;
                fb(ho, e, Co * 80, Co * 15);
                cb(ho, d);
                fb(ho, -e, Co * 80, kb * Co);
                cb(ho, d);
                ho.globalAlpha = Oq;
                ho.restore();
            }
          }
        })(this);
      }
      ho.save();
      ho.rotate(this.angle - Math.PI / jk);
      if (!(this.action & iw.ⲆⵠⵠΔⲆᐃⲆ)) {
        if (this.action & iw.IDLE || tg !== this.ΔⲆᐃΔΔ) {
          this.ᐃᐃⵠⲆⵠⵠⲆ.ᐃⲆΔ();
        } else if (this.action & iw.ⵠⵠⵠᐃΔΔⵠ) {
          this.ΔⲆΔⵠⲆᐃⲆ.ᐃⲆΔ();
        }
      }
      var p;
      var q = this.ᐃᐃⵠⲆⵠⵠⲆ.ΔΔⲆ;
      var w = this.ΔⲆΔⵠⲆᐃⲆ.ΔΔⲆ;
      if (this.ⵠΔⵠⲆᐃ === Xr.ΔΔᐃⲆΔ) {
        m = ΔΔ[Xr.ⲆⵠⵠⲆΔ][mf.time];
        p = Xr.ⲆⵠⵠⲆΔ;
      } else if (this.ⵠΔⵠⲆᐃ === Xr.Δⵠⵠⵠᐃ) {
        m = ΔΔ[Xr.ΔⲆᐃΔᐃ][mf.time];
        p = Xr.ΔⲆᐃΔᐃ;
      } else if (Xr.ᐃΔᐃⲆⲆ === this.ⵠΔⵠⲆᐃ) {
        m = ΔΔ[Xr.ᐃⲆΔΔΔΔⲆ][mf.time];
        p = Xr.ᐃⲆΔΔΔΔⲆ;
      } else if (Xr.ⲆΔᐃΔᐃ === this.ⵠΔⵠⲆᐃ) {
        m = ΔΔ[Xr.ΔᐃΔᐃΔΔᐃ][mf.time];
        p = Xr.ΔᐃΔᐃΔΔᐃ;
      } else if (this.ⲆΔⲆⵠⵠⲆᐃ) {
        m = ΔΔ[Xr.ⲆⵠᐃⲆⲆᐃΔ][mf.time];
        p = Xr.ⲆⵠᐃⲆⲆᐃΔ;
      } else {
        m = ΔΔ[Xr.ΔᐃΔΔΔ][this.ΔⵠΔᐃ][mf.time];
        p = Xr.ΔᐃΔΔΔ;
      }
      ΔΔⲆᐃ = ΔΔ[Xr.ᐃᐃⵠᐃⲆ][mf.time];
      var x = m;
      var h = p;
      if (this.action & iw.ⲆⵠⵠΔⲆᐃⲆ) {
        if (this.attack.ᐃⲆΔ() && Fh == this.attack.ⵠᐃⵠ) {
          this.ⵠⲆᐃΔⲆ = !this.ⵠⲆᐃΔⲆ;
          this.action -= iw.ⲆⵠⵠΔⲆᐃⲆ;
          if (Xw.ᐃⲆᐃᐃ == this.ᐃⲆᐃᐃ) {
            Xw.control.ΔᐃⵠΔ = 0;
          }
        }
        if (this.right >= 0) {
          this.ⵠⲆᐃΔⲆ = true;
        }
        var l = this.ⵠⲆᐃΔⲆ ? this.attack.ΔΔⲆ : -this.attack.ΔΔⲆ / 3;
        var y = this.ⵠⲆᐃΔⲆ ? this.attack.ΔΔⲆ / 3 : -this.attack.ΔΔⲆ;
        if (this.ⲆΔⲆⵠⵠⲆᐃ) {
          ho.save();
          ho.rotate(l);
          Nv(p, m, -m.width / 2 - Co * (66 + q), -m.height / H + (5 + w) * Co);
          ho.restore();
          ho.save();
          ho.rotate(y);
          Nv(p, m, -m.width / 2 + (66 + q) * Co, -m.height / Yg + (5 + w) * Co);
          ho.restore();
        } else if (c === Pg) {
          if (Xr.ΔΔΔⲆΔ === this.right) {
            l = -ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ(-l);
          }
          ho.save();
          ho.rotate(l);
          Nv(Xr.ᐃᐃⵠᐃⲆ, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / Pn - (49 + q) * Co, -ΔΔⲆᐃ.height / 2 + Co * (_h + w));
          if (Xr.ᐃⵠΔΔⲆ === this.right) {
            var u = ΔΔ[this.right][this.ᐃΔⲆⵠⲆ][mf.time];
            Sv(this.right, this.ᐃΔⲆⵠⲆ, u, -u.width / 4 - Co * (62 + q), -u.height / 4 + (w + 18) * Co);
          } else {
            fv(this.right, q, w);
          }
          if (p >= Xr.ΔⲆᐃΔᐃ) {
            Ev(p, m, -m.width / 4 - (49 + q) * Co, -m.height / Og + (d + w) * Co);
          } else if (Xr.ⲆⵠⵠⲆΔ !== p) {
            Sv(p, this.ΔⵠΔᐃ, m, -m.width / $i - (49 + q) * Co, -m.height / 4 + (rs + w) * Co);
          } else {
            Nv(p, m, -m.width / 2 - (49 + q) * Co, -m.height / 2 + (nn + w) * Co);
          }
          ho.restore();
          ho.save();
          ho.rotate(y);
          Nv(Xr.ᐃᐃⵠᐃⲆ, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / 2 + (49 + q) * Co, -ΔΔⲆᐃ.height / 2 + Co * (sj + w));
          if (p >= Xr.ΔⲆᐃΔᐃ) {
            Ev(p, m, -m.width / Vn + (49 + q) * Co, -m.height / Fr + (11 + w) * Co);
          } else if (Xr.ⲆⵠⵠⲆΔ !== p) {
            Sv(p, this.ΔⵠΔᐃ, m, -m.width / 4 + Co * (49 + q), -m.height / 4 + Co * (Bt + w));
          } else {
            Nv(p, m, -m.width / 2 + (49 + q) * Co, -m.height / 2 + (Rt + w) * Co);
          }
          ho.restore();
        }
      } else if (this.ⲆΔⲆⵠⵠⲆᐃ) {
        Nv(p, m, -m.width / 2 - Co * (66 + q), -m.height / 2 + (5 + w) * Co);
        Nv(p, m, -m.width / 2 + Co * (66 + q), -m.height / 2 + Co * (Fk + w));
      } else if (c === 0) {
        Nv(Xr.ᐃᐃⵠᐃⲆ, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / ss - Co * (49 + q), -ΔΔⲆᐃ.height / 2 + Co * (15 + w));
        if (Xr.ᐃⵠΔΔⲆ === this.right) {
          u = ΔΔ[this.right][this.ᐃΔⲆⵠⲆ][mf.time];
          Sv(this.right, this.ᐃΔⲆⵠⲆ, u, -u.width / 4 - (62 + q) * Co, -u.height / 4 + Co * (w + 18));
        } else {
          fv(this.right, q, w);
        }
        if (Xr.ΔⲆᐃΔᐃ <= p) {
          Ev(p, m, -m.width / 4 - (49 + q) * Co, -m.height / Dt + (11 + w) * Co);
        } else if (Xr.ⲆⵠⵠⲆΔ !== p) {
          Sv(p, this.ΔⵠΔᐃ, m, -m.width / 4 - (49 + q) * Co, -m.height / Dt + Co * (11 + w));
        } else {
          Nv(p, m, -m.width / 2 - Co * (49 + q), -m.height / 2 + Co * (11 + w));
        }
        Nv(Xr.ᐃᐃⵠᐃⲆ, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / 2 + (49 + q) * Co, -ΔΔⲆᐃ.height / Zh + Co * (15 + w));
        if (p >= Xr.ΔⲆᐃΔᐃ) {
          Ev(p, m, -m.width / nb + (49 + q) * Co, -m.height / 4 + (nn + w) * Co);
        } else if (Xr.ⲆⵠⵠⲆΔ !== p) {
          Sv(p, this.ΔⵠΔᐃ, m, -m.width / 4 + Co * (49 + q), -m.height / ba + (Nl + w) * Co);
        } else {
          Nv(p, m, -m.width / 2 + Co * (49 + q), -m.height / 2 + (11 + w) * Co);
        }
      }
      if (this.ᐃⵠΔⲆᐃ && this.ⵠΔⵠⲆᐃ < 1) {
        m = ΔΔ[Xr.ⵠⲆᐃᐃ][this.ⲆⵠᐃΔⲆⲆⲆ][mf.time];
        Sv(Xr.ⵠⲆᐃᐃ, this.ⲆⵠᐃΔⲆⲆⲆ, m, -m.width / ul, -m.height / 4 - Co * 39);
      }
      if (this.ⲆΔⲆⵠⵠⲆᐃ) {
        m = ΔΔ[Xr.ΔⵠΔᐃΔᐃᐃ][mf.time];
        Nv(Xr.ΔⵠΔᐃΔᐃᐃ, m, -m.width / 2, -m.height / Pn);
        this.ΔΔⲆⵠⲆᐃΔ.ᐃⲆΔ();
        m = ΔΔ[Xr.ⲆⲆⵠⲆⵠᐃⵠ][mf.time];
        Nv(Xr.ⲆⲆⵠⲆⵠᐃⵠ, m, -m.width / xq, -m.height / lr + this.ΔΔⲆⵠⲆᐃΔ.ΔΔⲆ);
      } else {
        m = ΔΔ[Xr.ᐃⲆΔᐃΔᐃⲆ][this.ΔⵠΔᐃ][mf.time];
        if (Xr.ΔΔᐃⲆΔ !== this.ⵠΔⵠⲆᐃ && (Sv(Xr.ᐃⲆΔᐃΔᐃⲆ, this.ΔⵠΔᐃ, m, -m.width / 4, -m.height / Dt), Lr < this.ΔⵠΔᐃᐃ)) {
          m = ΔΔ[Xr.ΔⲆⵠⲆⵠ][this.ΔⵠΔᐃᐃ][mf.time];
          Sv(Xr.ΔⲆⵠⲆⵠ, this.ΔⵠΔᐃᐃ, m, -m.width / 4, -m.height / Ps);
        }
      }
      if (this.action & iw.ⲆᐃᐃⲆΔΔΔ) {
        if (this.ⵠᐃᐃᐃⵠ.ᐃⲆΔ() && wt == this.ⵠᐃᐃᐃⵠ.ⵠᐃⵠ) {
          this.action -= iw.ⲆᐃᐃⲆΔΔΔ;
        }
        ho.globalAlpha = 0.6 - this.ⵠᐃᐃᐃⵠ.ΔΔⲆ;
        if (this.ⲆΔⲆⵠⵠⲆᐃ) {
          m = ΔΔ[Xr.ᐃᐃᐃᐃⵠΔᐃ];
          Mm(ho, m, -m.width / 2, -m.height / lr);
        } else {
          m = nv(this.ΔⵠΔᐃ, ΔΔ[Xr.ᐃⲆΔᐃΔᐃⲆ][this.ΔⵠΔᐃ][Zj], ⵠⲆⲆⲆⵠⲆⲆⲆᐃ);
          Mm(ho, m, m.width / 4, m.height / Mq, -m.width / Jt, -m.height / xj);
        }
        ho.globalAlpha = 1;
      }
      if (this.action & iw.ⲆΔⵠΔᐃΔⲆ) {
        if (this.ΔΔⵠᐃⵠⲆⲆ.ᐃⲆΔ() && this.ΔΔⵠᐃⵠⲆⲆ.ⵠᐃⵠ == Tk) {
          this.action -= iw.ⲆΔⵠΔᐃΔⲆ;
        }
        ho.globalAlpha = 0.6 - this.ΔΔⵠᐃⵠⲆⲆ.ΔΔⲆ;
        m = ΔΔ[Xr.ⲆΔⵠΔᐃΔⲆ];
        Mm(ho, m, -m.width / 2, -m.height / 2);
        ho.globalAlpha = 1;
      }
      if (this.action & iw.ⲆᐃⲆⵠ) {
        if (this.ᐃⲆⲆ.ᐃⲆΔ() && this.ᐃⲆⲆ.ⵠᐃⵠ == Tk) {
          this.action -= iw.ⲆᐃⲆⵠ;
        }
        ho.globalAlpha = 0.6 - this.ᐃⲆⲆ.ΔΔⲆ;
        if (this.ⲆΔⲆⵠⵠⲆᐃ) {
          m = ΔΔ[Xr.ᐃΔⲆᐃⵠⲆⵠ];
          Mm(ho, m, -m.width / xq, -m.height / Zg);
        } else {
          m = nv(this.ΔⵠΔᐃ, ΔΔ[Xr.ᐃⲆΔᐃΔᐃⲆ][this.ΔⵠΔᐃ][0], ⵠᐃΔⲆΔᐃⵠⵠⲆ);
          Mm(ho, m, m.width / Pe, m.height / Dt, -m.width / 2, -m.height / Pn);
        }
        ho.globalAlpha = Ug;
      }
      if (this.action & iw.ᐃᐃⵠⵠᐃ) {
        if (this.freeze.ᐃⲆΔ() && this.freeze.ⵠᐃⵠ == Jn) {
          this.action -= iw.ᐃᐃⵠⵠᐃ;
        }
        ho.globalAlpha = 0.6 - this.freeze.ΔΔⲆ;
        m = nv(this.ΔⵠΔᐃ, ΔΔ[Xr.ᐃⲆΔᐃΔᐃⲆ][this.ΔⵠΔᐃ][0], ΔⵠᐃⵠᐃᐃⵠᐃΔ);
        Mm(ho, m, m.width / 4, m.height / Og, -m.width / 2, -m.height / 2);
        ho.globalAlpha = xt;
      }
      if (this.action & iw.ᐃᐃⲆΔⲆⵠⲆ) {
        if (this.ᐃⵠⲆⲆᐃⲆᐃ.ᐃⲆΔ() && this.ᐃⵠⲆⲆᐃⲆᐃ.ⵠᐃⵠ == 0) {
          this.action -= iw.ᐃᐃⲆΔⲆⵠⲆ;
        }
        ho.globalAlpha = 0.6 - this.ᐃⵠⲆⲆᐃⲆᐃ.ΔΔⲆ;
        if (this.ⲆΔⲆⵠⵠⲆᐃ) {
          m = ΔΔ[Xr.ᐃⵠΔΔᐃΔΔ];
          Mm(ho, m, -m.width / 2, -m.height / 2);
        } else {
          m = nv(this.ΔⵠΔᐃ, ΔΔ[Xr.ᐃⲆΔᐃΔᐃⲆ][this.ΔⵠΔᐃ][mj], ΔᐃⲆⲆⲆΔⵠᐃΔ);
          Mm(ho, m, m.width / Gi, m.height / 4, -m.width / 2, -m.height / xq);
        }
        ho.globalAlpha = 1;
      }
      gv(this.ⵠΔⵠⲆᐃ);
      if (c === mk) {
        if (this.action & iw.ⲆⵠⵠΔⲆᐃⲆ) {
          q += this.attack.ΔΔⲆ * Ga;
        }
        Nv(Xr.ᐃᐃⵠᐃⲆ, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / lr - Co * 26, -ΔΔⲆᐃ.height / Zh + (31 + w + q) * Co);
        if (Xr.ΔⲆᐃΔᐃ <= h) {
          Ev(h, x, -x.width / 4 - Co * 26, -x.height / 4 + Co * (27 + w + q));
        } else if (h !== Xr.ⲆⵠⵠⲆΔ) {
          Sv(h, this.ΔⵠΔᐃ, x, -x.width / Dt - Co * 26, -x.height / eg + (27 + w + q) * Co);
        } else {
          Nv(h, x, -x.width / Yl - Co * 26, -x.height / 2 + Co * (27 + w + q));
        }
        Nv(Xr.ᐃᐃⵠᐃⲆ, ΔΔⲆᐃ, -ΔΔⲆᐃ.width / 2 + Co * 26, -ΔΔⲆᐃ.height / 2 + (31 + w + q) * Co);
        if (h >= Xr.ΔⲆᐃΔᐃ) {
          Ev(h, x, -x.width / eh + Co * 26, -x.height / 4 + Co * (27 + w + q));
        } else if (Xr.ⲆⵠⵠⲆΔ !== h) {
          Sv(h, this.ΔⵠΔᐃ, x, -x.width / eg + Co * 26, -x.height / 4 + (27 + w + q) * Co);
        } else {
          Nv(h, x, -x.width / 2 + Co * 26, -x.height / Hj + Co * (27 + w + q));
        }
        $p(this.right, 0, w + q);
      }
      ho.restore();
      if (Xr.ⲆΔⵠⵠᐃ !== this.ⵠΔⵠⲆᐃ && Xr.ΔΔᐃⲆΔ !== this.ⵠΔⵠⲆᐃ) {
        if (this.ⲆΔΔΔᐃ > 0) {
          if (!this.ⲆᐃΔⲆ.ᐃΔⲆⵠⲆΔⵠ) {
            this.ⲆᐃΔⲆ.ᐃΔⲆⵠⲆΔⵠ = od(Co, this.ⲆᐃΔⲆ.ⲆⲆΔⵠᐃ, Mg, "#187484", "#000", 2, null, null, Co * 300);
          }
          m = this.ⲆᐃΔⲆ.ᐃΔⲆⵠⲆΔⵠ;
        } else {
          this.ⲆᐃΔⲆ.label ||= od(Co, this.ⲆᐃΔⲆ.ⲆⲆΔⵠᐃ, qr, "#FFF", "#000", 2, null, null, Co * 300);
          m = this.ⲆᐃΔⲆ.label;
        }
        if (Xr.ΔⲆⵠ == mf.ⵠΔⲆ) {
          ho.globalAlpha = 0.5;
        }
        q = Math.floor(-m.width / 2);
        w = Math.floor(-m.height / 2 - Co * 70);
        Mm(ho, m, q, w);
        if (wj < this.ⲆᐃΔⲆ.level) {
          var z = q + m.width + 5;
          m = ΔΔ[Xr.ᐃⲆⲆⲆⵠᐃᐃ];
          if (ᐃᐃⵠⵠᐃᐃᐃ[this.ⲆᐃΔⲆ.level] === undefined) {
            ᐃᐃⵠⵠᐃᐃᐃ[this.ⲆᐃΔⲆ.level] = od(Co, "[" + this.ⲆᐃΔⲆ.level + "]", Vl, "#F9E8A2", "#000", 2, null, null, Co * 50);
          }
          Mm(ho, ᐃᐃⵠⵠᐃᐃᐃ[this.ⲆᐃΔⲆ.level], z, w);
        }
        ho.globalAlpha = lb;
      } else {
        w = Math.floor(Co * -70);
        q = Math.floor(ΔΔ[Xr.ⲆΔⵠΔᐃⲆΔ].width / 1.5);
      }
      if (Xw.ᐃⲆⵠⲆⵠⵠᐃ(this.Ⲇⵠⵠᐃ)) {
        if (this.Ⲇⵠⵠᐃ == Xw.ᐃΔⲆⲆⵠ[0]) {
          m = ΔΔ[Xr.ΔⲆΔΔⵠᐃⵠ];
        } else {
          m = ΔΔ[Xr.ⲆΔⵠΔᐃⲆΔ];
        }
        Mm(ho, m, q - m.width - pb, w - 6);
      }
      ho.restore();
    }
  }
  function lv() {
    if (Lj !== this.message) {
      var a = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length > 0 ? -95 : Zj;
      Mm(ho, this.message, tg, jq - this.message.height + a);
    }
  }
  function mv(a, b) {
    if (this.text) {
      if (this.timeout.ⵠᐃⵠ) {
        ho.globalAlpha = 1 - this.timeout.ΔΔⲆ;
      } else {
        ho.globalAlpha = cu;
      }
      this.label ||= od(Co, this.text, 40, a, null, null, null, null, null, b, gg);
      Mm(ho, this.label, (lo - this.label.width) / Nb, Co * 50);
      ho.globalAlpha = jh;
      if (this.timeout.ᐃⲆΔ() && sl == this.timeout.ⵠᐃⵠ) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function nv(b, c, d) {
    if (c.ⲆⲆⲆⵠᐃᐃⲆ() !== 1) {
      return c;
    }
    var e = ΔⲆⲆΔΔⲆΔ[d][b];
    if (e === undefined) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var h = c.height;
      e.width = g;
      e.height = h;
      f.drawImage(c, Kh, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ⵠᐃΔⵠⲆᐃᐃΔⵠ[d];
      f.fillRect(0, 0, g, h);
      ΔⲆⲆΔΔⲆΔ[d][b] = e;
    }
    return e;
  }
  ⵠᐃΔⲆΔᐃⵠⵠⲆ = 0;
  ⵠⲆⲆⲆⵠⲆⲆⲆᐃ = rg;
  ΔⵠᐃⵠᐃᐃⵠᐃΔ = Zg;
  ΔᐃⲆⲆⲆΔⵠᐃΔ = 3;
  ⲆⲆⵠΔᐃⵠⲆⲆⵠ = Ps;
  ΔⲆⲆΔΔⲆΔ = [[], [], [], [], []];
  ⵠᐃΔⵠⲆᐃᐃΔⵠ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var ov = 0;
  function pv(j, e, i, k, n, o, q, a = 0) {
    for (var r = q; a <= r; r--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; t <= k; t++) {
          var w = Vw.ᐃᐃⲆⲆ[s][t];
          if (w && w[o]) {
            var x = w[o][r];
            if (x !== er) {
              for (var y = 0; y < x.length; y++) {
                var z = x[y];
                var A = ΔΔ[n][mf.time][r];
                var B = (ov + (s + t) * Hk) % 60;
                var D = B < 30 ? B / 30 : hd - (B - 30) / 30;
                var E = (Te + D * 0.9 / 30) * -A.width;
                var F = (1 + D * 0.9 / 30) * -A.height;
                D = (B = (ov + (s + t) * 7) % 60) < 30 ? B / 30 : 1 - (B - 30) / 30;
                var G = ho.globalAlpha;
                ho.globalAlpha = G * (0.9 + D * 0.1);
                Mm(ho, A, Xw.ⵠᐃⲆ.x + z.x - E / 2, Xw.ⵠᐃⲆ.y + z.y - F / 2, E, F);
                ho.globalAlpha = G;
              }
            }
          }
        }
      }
    }
  }
  function qv(j, e, i, k, n, o, q, a = undefined) {
    if (a === undefined) a = In;
    mf.ⲆᐃᐃⲆ[n].ᐃⲆΔ();
    for (var r = q; r >= a; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; w <= k; w++) {
          var x = Vw.ᐃᐃⲆⲆ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== Jg) {
              for (var z = 0; y.length > z; z++) {
                var A = y[z];
                if (A.ᐃⲆΔ) {
                  if (A.ᐃⲆⲆ.ᐃⲆΔ() && A.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
                    A.ᐃⲆΔ = Jn;
                  }
                  var B = (1 - A.ᐃⲆⲆ.ΔΔⲆ) * _w * 600 * Co;
                  var D = B * Math.sin(A.angle);
                  var E = Math.cos(A.angle) * B;
                } else {
                  D = 0;
                  E = Lr;
                }
                var F = ΔΔ[n][mf.time][r];
                var G = mf.ⲆᐃᐃⲆ[n].ΔΔⲆ * -F.width;
                var H = -F.height * mf.ⲆᐃᐃⲆ[n].ΔΔⲆ;
                Mm(ho, F, Xw.ⵠᐃⲆ.x + A.x - G / xq + D, Xw.ⵠᐃⲆ.y + A.y - H / 2 + E, G, H);
              }
            }
          }
        }
      }
    }
  }
  var rv = [];
  for (Gt = Kh; Gt < Ah; Gt++) {
    var sv = xt;
    if (Math.random() < 0.25) {
      sv = 0;
    }
    rv.push(sv);
  }
  function tv(j, e, i, k, n, o, q, a, r) {
    if (a === Ng) {
      a = Bg;
    }
    for (var h = q; a <= h; h--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; w <= k; w++) {
          var x = Vw.ᐃᐃⲆⲆ[t][w];
          if (x !== undefined && x[o] !== undefined) {
            var A = x[o][h];
            if (Hs !== A) {
              for (var B = Kh; A.length > B; B++) {
                var D = A[B];
                if (D.ᐃⲆΔ) {
                  if (D.ᐃⲆⲆ.ᐃⲆΔ() && D.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
                    D.ᐃⲆΔ = false;
                  }
                  var E = Co * ((Ug - D.ᐃⲆⲆ.ΔΔⲆ) * _w * 600);
                  var F = Math.sin(D.angle) * E;
                  var G = E * Math.cos(D.angle);
                } else {
                  F = zl;
                  G = tg;
                }
                for (var H = Pg; ΔΔΔⵠᐃᐃⵠ[h].ⵠᐃⵠⲆ > H; H++) {
                  if (mf.ⵠᐃᐃⲆΔ[H].ᐃᐃᐃΔᐃᐃᐃ !== wf) {
                    mf.ⵠᐃᐃⲆΔ[H].ᐃⲆΔ();
                    mf.ⵠᐃᐃⲆΔ[H].ᐃᐃᐃΔᐃᐃᐃ = wf;
                  }
                  var I = ΔΔ[Xr.ⲆΔⵠⲆᐃ][mf.time][ΔΔΔⵠᐃᐃⵠ[h].ⲆⲆΔⲆ[H].ⵠⵠⵠ];
                  var J = -I.width * mf.ⵠᐃᐃⲆΔ[H].ΔΔⲆ;
                  var K = -I.height * mf.ⵠᐃᐃⲆΔ[H].ΔΔⲆ;
                  Mm(ho, I, Xw.ⵠᐃⲆ.x + D.x - J / 4 + F + ΔΔΔⵠᐃᐃⵠ[h].ⲆⲆΔⲆ[H].x, Xw.ⵠᐃⲆ.y + D.y - K / 4 + G + ΔΔΔⵠᐃᐃⵠ[h].ⲆⲆΔⲆ[H].y, J / 2, K / Mt);
                }
              }
            }
          }
        }
      }
    }
  }
  function uv(j, e, i, k, n, o, q, a, r) {
    if (lj === a) {
      a = 0;
    }
    for (var h = q; h >= a; h--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; k >= w; w++) {
          if (wj >= r || rv[(t + w * r) % rv.length] !== Ot) {
            var x = Vw.ᐃᐃⲆⲆ[t][w];
            if (er !== x && x[o] !== undefined) {
              var y = x[o][h];
              if (Sl !== y) {
                for (var z = 0; z < y.length; z++) {
                  var A = y[z];
                  if (A.ᐃⲆΔ) {
                    if (A.ᐃⲆⲆ.ᐃⲆΔ() && A.ᐃⲆⲆ.ⵠᐃⵠ == 0) {
                      A.ᐃⲆΔ = Jn;
                    }
                    var B = _w * (js - A.ᐃⲆⲆ.ΔΔⲆ) * 600 * Co;
                    var D = Math.sin(A.angle) * B;
                    var E = B * Math.cos(A.angle);
                  } else {
                    D = 0;
                    E = tg;
                  }
                  var F = ΔΔ[n][mf.time][h];
                  Mm(ho, F, Xw.ⵠᐃⲆ.x + A.x - F.width / (ΔⵠⲆⵠⲆ * xj) + D, Xw.ⵠᐃⲆ.y + A.y - F.height / (ΔⵠⲆⵠⲆ * Pn) + E, F.width / ΔⵠⲆⵠⲆ, F.height / ΔⵠⲆⵠⲆ);
                }
              }
            }
          }
        }
      }
    }
  }
  function vv(c, e, f, i, j, k, m, a = undefined, n) {
    if (a === undefined) a = ps;
    for (var h = c; h <= e; h++) {
      for (var o = f; i >= o; o++) {
        var p = Vw.ᐃᐃⲆⲆ[h][o];
        if (p !== mg && p[k] !== undefined) {
          var q = p[k];
          if (q !== undefined) {
            if (ie === q.scale) {
              var r = ΔΔ[j][mf.time][q.ⵠⲆⲆⲆ];
              ho.save();
              ho.translate(Xw.ⵠᐃⲆ.x + q.x, Xw.ⵠᐃⲆ.y + q.y);
              ho.rotate(q.angle);
              Mm(ho, r, -r.width / 4, -r.height / eh, r.width / 2, r.height / ih);
              ho.restore();
            } else if (ig === q.scale) {
              for (var t = 0; t < q.ⲆⲆⵠ.length; t++) {
                ho.save();
                ho.translate(Xw.ⵠᐃⲆ.x + q.x, Xw.ⵠᐃⲆ.y + q.y);
                ho.rotate(q.ⲆⲆⵠ[t].angle);
                r = ΔΔ[j][mf.time][q.ⲆⲆⵠ[t].ⵠⲆⲆⲆ];
                Mm(ho, r, -r.width / bb + q.ⲆⲆⵠ[t].x, -r.height / 3 + q.ⲆⲆⵠ[t].y, r.width / 1.5, r.height / 1.5);
                ho.restore();
              }
            } else {
              r = ΔΔ[j][mf.time][q.ⵠⲆⲆⲆ];
              ho.save();
              ho.translate(Xw.ⵠᐃⲆ.x + q.x, Xw.ⵠᐃⲆ.y + q.y);
              ho.rotate(q.angle);
              Mm(ho, r, -r.width / Mt, -r.height / dg, r.width, r.height);
              ho.restore();
            }
          }
        }
      }
    }
  }
  ΔⵠⲆⵠⲆ = 1;
  ΔΔΔⵠᐃᐃⵠ = [{
    ⵠᐃⵠⲆ: yt,
    ⲆⲆΔⲆ: [{
      y: -20,
      ⵠⵠⵠ: 0,
      x: -128
    }, {
      x: -86,
      y: -Fr,
      ⵠⵠⵠ: Ug
    }, {
      y: -74,
      x: -60,
      ⵠⵠⵠ: 2
    }, {
      y: -144,
      x: -22,
      ⵠⵠⵠ: ps
    }, {
      ⵠⵠⵠ: 0,
      x: -58,
      y: 86
    }, {
      x: 3,
      ⵠⵠⵠ: ps,
      y: -30
    }, {
      x: 65,
      ⵠⵠⵠ: 1,
      y: -115
    }, {
      x: 118,
      ⵠⵠⵠ: 0,
      y: -50
    }, {
      y: hb,
      x: 73,
      ⵠⵠⵠ: fl
    }, {
      ⵠⵠⵠ: 0,
      x: 67,
      y: 79
    }]
  }, {
    ⵠᐃⵠⲆ: Gs,
    ⲆⲆΔⲆ: [{
      ⵠⵠⵠ: 0,
      y: -26,
      x: -45
    }, {
      ⵠⵠⵠ: H,
      x: -45,
      y: 20
    }, {
      ⵠⵠⵠ: 1,
      x: 10,
      y: -60
    }, {
      x: 52,
      y: -Mh,
      ⵠⵠⵠ: 1
    }, {
      y: 45,
      x: 14,
      ⵠⵠⵠ: 0
    }]
  }, {
    ⵠᐃⵠⲆ: 3,
    ⲆⲆΔⲆ: [{
      y: bb,
      ⵠⵠⵠ: 2,
      x: -30
    }, {
      x: 7,
      ⵠⵠⵠ: 2,
      y: -38
    }, {
      ⵠⵠⵠ: Yl,
      y: ta,
      x: 37
    }]
  }, {
    ⲆⲆΔⲆ: [{
      x: -74,
      ⵠⵠⵠ: Nb,
      y: -87
    }, {
      x: -11,
      ⵠⵠⵠ: lb,
      y: -10
    }, {
      x: -99,
      ⵠⵠⵠ: Ot,
      y: 17
    }, {
      y: 84,
      ⵠⵠⵠ: ps,
      x: -66
    }, {
      ⵠⵠⵠ: 1,
      y: 123,
      x: -55
    }, {
      ⵠⵠⵠ: 2,
      x: gg,
      y: 81
    }, {
      ⵠⵠⵠ: Zj,
      y: 50,
      x: 52
    }, {
      ⵠⵠⵠ: 1,
      y: 9,
      x: 138
    }, {
      y: -28,
      x: 104,
      ⵠⵠⵠ: Pg
    }, {
      ⵠⵠⵠ: Zh,
      x: 67,
      y: -56
    }, {
      ⵠⵠⵠ: 0,
      y: -112,
      x: 5
    }],
    ⵠᐃⵠⲆ: yq
  }, {
    ⲆⲆΔⲆ: [{
      x: -33,
      ⵠⵠⵠ: Nb,
      y: -66
    }, {
      x: -58,
      y: Ab,
      ⵠⵠⵠ: ps
    }, {
      y: 44,
      ⵠⵠⵠ: 1,
      x: -19
    }, {
      y: 20,
      x: 44,
      ⵠⵠⵠ: Pg
    }, {
      ⵠⵠⵠ: 2,
      y: -36,
      x: 53
    }, {
      x: bh,
      ⵠⵠⵠ: 0,
      y: -62
    }],
    ⵠᐃⵠⲆ: Ss
  }, {
    ⵠᐃⵠⲆ: 3,
    ⲆⲆΔⲆ: [{
      x: -jg,
      y: -25,
      ⵠⵠⵠ: rg
    }, {
      ⵠⵠⵠ: 2,
      x: -29,
      y: Cq
    }, {
      ⵠⵠⵠ: Zj,
      x: 12,
      y: Sj
    }]
  }];
  var wv = ya;
  var xv = 0;
  var yv = ya;
  var zv = tt;
  function Av(a, b, c) {
    if (mf.transition) {
      ho.globalAlpha = xt;
      a.ᐃⵠᐃⵠ(b, c);
      mf.time = mf.time ? wj : Oq;
      ho.globalAlpha = mk - mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      a.ᐃⵠᐃⵠ(b, c);
      mf.time = mf.time ? wj : hd;
      ho.globalAlpha = 1;
    } else {
      a.ᐃⵠᐃⵠ(b, c);
    }
  }
  function Bv(a) {
    ho.globalAlpha = a.alpha;
    fb(ho, a.x + Xw.ⵠᐃⲆ.x, a.y + Xw.ⵠᐃⲆ.y, a.r);
    cb(ho, Xr.ΔᐃⲆⲆΔⲆⵠ[mf.time]);
    ho.globalAlpha = za;
  }
  function Cv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Xw.ⵠᐃⲆ.y + f + 710;
    var l = Math.max(Xw.ⵠᐃⲆ.x + e, 0);
    var g = Math.max(-Xw.ⵠᐃⲆ.x + lo - i - 100, Rq);
    var r = l;
    var b = lo - l - g;
    if (n) {
      var s = j.ⵠⵠⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + lw.ⲆⲆⵠⲆΔ;
    lw.ΔᐃⲆᐃⲆ;
    t += -s + lw.ΔᐃⲆᐃⲆ + 2;
    if (n) {
      s = j.ⵠⵠⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h - lw.ⲆᐃⵠⲆΔ - t - s;
    var v = (t += u + xq) - Yl;
    if (n) {
      s = j.ⵠⵠⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (v > t + (u = h - lw.ⲆᐃᐃⵠⲆ - t - s)) {
      t += u + 2;
    } else {
      t = v;
    }
    u = h - lw.ᐃΔΔᐃᐃⵠᐃ - t;
    if (n > 0 && k.ᐃⲆΔⲆⵠⲆΔ === hd) {
      if (mf.transition) {
        var p = mf.time ? Xn - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(15, 77, 72, 252, 239, 187, p);
      } else {
        ho.fillStyle = Xr.ᐃⲆᐃⵠⵠΔⲆ[mf.time];
      }
      ho.fillRect(r, t, b, u);
    } else {
      if (mf.transition) {
        p = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(k.ⵠᐃᐃ[tg], k.ⵠᐃᐃ[1], k.ⵠᐃᐃ[Nb], k.ⵠΔⲆ[0], k.ⵠΔⲆ[lb], k.ⵠΔⲆ[2], p);
      } else {
        ho.fillStyle = k.ᐃΔⵠΔⵠ[mf.time];
      }
      ho.fillRect(r, t, b, u);
    }
  }
  function Dv(b, c, d, e, f, g, i, a, j, h) {
    if (mf.transition) {
      ho.globalAlpha = 1;
      b(c, d, e, f, g, i, a, j, h);
      mf.time = mf.time ? Rq : hd;
      ho.globalAlpha = Oq - mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      b(c, d, e, f, g, i, a, j, h);
      mf.time = mf.time ? Eh : Te;
      ho.globalAlpha = xt;
    } else {
      b(c, d, e, f, g, i, a, j, h);
    }
  }
  function Ev(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var h = Math.floor(f / 2);
    var a = Math.floor(g / lr);
    if (mf.transition) {
      ho.globalAlpha = 1;
      Mm(ho, ΔΔ[b][mf.time], 0, 0, f, g, d, e, h, a);
      mf.time = mf.time ? ya : 1;
      ho.globalAlpha = 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      Mm(ho, ΔΔ[b][mf.time], 0, Pg, f, g, d, e, h, a);
      mf.time = mf.time ? ps : 1;
      ho.globalAlpha = hd;
    } else {
      Mm(ho, c, Db, Da, f, g, d, e, h, a);
    }
  }
  function Fv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Xw.ⵠᐃⲆ.y + f - 700;
    var l = Math.max(Xw.ⵠᐃⲆ.x + e, Rs);
    var g = Math.max(-Xw.ⵠᐃⲆ.x + lo - i - 100, 0);
    var r = l;
    var b = lo - l - g;
    if (n) {
      var s = j.ⵠⵠⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + lw.ⲆⲆⵠⲆΔ;
    lw.ΔᐃⲆᐃⲆ;
    t += s + lw.ΔᐃⲆᐃⲆ - 2;
    if (n) {
      s = j.ⵠⵠⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + lw.ⲆᐃⵠⲆΔ - t + s;
    var v = (t += u - jk) - 2;
    if (n) {
      s = j.ⵠⵠⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (v < t + (u = h + lw.ⲆᐃᐃⵠⲆ - t + s) - 3) {
      t += u - Nb;
    } else {
      t = v;
    }
    u = h + lw.ᐃΔΔᐃᐃⵠᐃ - t;
    if (n > 0 && k.ᐃⲆΔⲆⵠⲆΔ === 1) {
      if (mf.transition) {
        var p = mf.time ? rg - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(15, 77, 72, 252, 239, 187, p);
      } else {
        ho.fillStyle = Xr.ᐃⲆᐃⵠⵠΔⲆ[mf.time];
      }
      ho.fillRect(r, t, b, u);
    } else {
      if (mf.transition) {
        p = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(k.ⵠᐃᐃ[0], k.ⵠᐃᐃ[1], k.ⵠᐃᐃ[Zh], k.ⵠΔⲆ[0], k.ⵠΔⲆ[za], k.ⵠΔⲆ[2], p);
      } else {
        ho.fillStyle = k.ᐃΔⵠΔⵠ[mf.time];
      }
      ho.fillRect(r, t, b, u);
    }
  }
  function Gv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Xw.ⵠᐃⲆ.y + j - 700;
    var l = Math.max(Xw.ⵠᐃⲆ.x + e, Eh);
    var g = Math.max(-Xw.ⵠᐃⲆ.x + lo - i - 100, wj);
    var t = l;
    var b = lo - l - g;
    if (o) {
      var u = q.ⵠⵠⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + lw.ⲆⲆⵠⲆΔ;
    var F = t;
    var m = v;
    var p = u.x + lw.ΔᐃⲆᐃⲆ;
    var C = b;
    var G = v += u.x + lw.ΔᐃⲆᐃⲆ - 2;
    if (o) {
      u = q.ⵠⵠⵠ(a);
    } else {
      u = a.r;
    }
    var f = h + lw.ⲆᐃⵠⲆΔ - v + u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f - 2) - 2;
    if (o) {
      u = q.ⵠⵠⵠ(s);
    } else {
      u = s.r;
    }
    if (A < v + (f = h + lw.ⲆᐃᐃⵠⲆ - v + u.x) - Tr) {
      var k = ml;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f - Zh;
    } else {
      k = false;
      v = A;
      D = -1;
    }
    f = h + lw.ᐃΔΔᐃᐃⵠᐃ - v;
    if (mf.transition) {
      var N = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
    }
    ho.fillRect(F, m, C, p);
    if (o) {
      if (mf.transition) {
        N = mf.time ? Xn - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(15, 70, 76, 42, 139, 155, N);
      } else {
        ho.fillStyle = Xr.ⵠᐃⲆΔⲆᐃᐃ[mf.time];
      }
    } else if (mf.transition) {
      N = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
    }
    ho.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (mf.transition) {
          N = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
          ho.fillStyle = Qv(17, 94, 96, 169, 214, 211, N);
        } else {
          ho.fillStyle = Xr.ⵠᐃⵠⲆᐃⵠⲆ[mf.time];
        }
      } else if (mf.transition) {
        N = mf.time ? Te - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
      } else {
        ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
      }
      ho.fillRect(J, L, B, M);
    }
    if (vf.ⵠⵠᐃⲆᐃ && o) {
      q.ⲆⵠⲆⲆΔⲆᐃⵠⲆ(A, D, G, h, -Xw.ⵠᐃⲆ.x + F, -Xw.ⵠᐃⲆ.x + F + C);
    }
  }
  function Hv(a, b) {
    if (mf.transition) {
      ho.globalAlpha = za;
      a.ⲆᐃⲆⲆᐃ(b);
      mf.time = mf.time ? 0 : 1;
      ho.globalAlpha = hd - mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      a.ⲆᐃⲆⲆᐃ(b);
      mf.time = mf.time ? Eh : 1;
      ho.globalAlpha = cu;
    } else {
      a.ⲆᐃⲆⲆᐃ(b);
    }
  }
  function Iv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Xw.ⵠᐃⲆ.x + f - 700;
    var l = Math.max(Xw.ⵠᐃⲆ.y + e, 0);
    var g = Math.max(-Xw.ⵠᐃⲆ.y + jq - i - Yh, tg);
    var r = l;
    var b = jq - l - g;
    if (n) {
      var s = j.ⵠⵠⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + lw.ⲆⲆⵠⲆΔ;
    lw.ΔᐃⲆᐃⲆ;
    t += s + lw.ΔᐃⲆᐃⲆ - Gl;
    if (n) {
      s = j.ⵠⵠⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + lw.ⲆᐃⵠⲆΔ - t + s;
    var v = (t += u - 2) - dg;
    if (n) {
      s = j.ⵠⵠⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (t + (u = h + lw.ⲆᐃᐃⵠⲆ - t + s) - I > v) {
      t += u - 2;
    } else {
      t = v;
    }
    u = h + lw.ᐃΔΔᐃᐃⵠᐃ - t;
    if (n > 0 && k.ᐃⲆΔⲆⵠⲆΔ === 1) {
      if (mf.transition) {
        var p = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(15, 77, 72, 252, 239, 187, p);
      } else {
        ho.fillStyle = Xr.ᐃⲆᐃⵠⵠΔⲆ[mf.time];
      }
      ho.fillRect(t, r, u, b);
    } else {
      if (mf.transition) {
        p = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(k.ⵠᐃᐃ[Pg], k.ⵠᐃᐃ[1], k.ⵠᐃᐃ[2], k.ⵠΔⲆ[zl], k.ⵠΔⲆ[1], k.ⵠΔⲆ[2], p);
      } else {
        ho.fillStyle = k.ᐃΔⵠΔⵠ[mf.time];
      }
      ho.fillRect(t, r, u, b);
    }
  }
  function Jv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Xw.ⵠᐃⲆ.x + j + 820;
    var l = Math.max(Xw.ⵠᐃⲆ.y + e, 0);
    var g = Math.max(-Xw.ⵠᐃⲆ.y + jq - i - 100, wj);
    var t = l;
    var b = jq - l - g;
    if (o) {
      var u = q.ⵠⵠⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + lw.ⲆⲆⵠⲆΔ;
    var F = v;
    var m = t;
    var p = -u.x + lw.ΔᐃⲆᐃⲆ;
    var C = b;
    var G = v += -u.x + lw.ΔᐃⲆᐃⲆ + 2;
    if (o) {
      u = q.ⵠⵠⵠ(a);
    } else {
      u = a.r;
    }
    var f = h - lw.ⲆᐃⵠⲆΔ - v - u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f + Gl) - 2;
    if (o) {
      u = q.ⵠⵠⵠ(s);
    } else {
      u = s.r;
    }
    if (v + (f = h - lw.ⲆᐃᐃⵠⲆ - v - u.x) < A) {
      var k = true;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f + 2;
    } else {
      k = false;
      v = A;
      D = -cu;
    }
    f = h - lw.ᐃΔΔᐃᐃⵠᐃ - v;
    if (mf.transition) {
      var N = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
    }
    ho.fillRect(F, m, p, C);
    if (o) {
      if (mf.transition) {
        N = mf.time ? Ug - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(15, 70, 76, 42, 139, 155, N);
      } else {
        ho.fillStyle = Xr.ⵠᐃⲆΔⲆᐃᐃ[mf.time];
      }
    } else if (mf.transition) {
      N = mf.time ? Ot - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
    }
    ho.fillRect(H, y, w, K);
    if (k) {
      if (o) {
        if (mf.transition) {
          N = mf.time ? za - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
          ho.fillStyle = Qv(17, 94, 96, 169, 214, 211, N);
        } else {
          ho.fillStyle = Xr.ⵠᐃⵠⲆᐃⵠⲆ[mf.time];
        }
      } else if (mf.transition) {
        N = mf.time ? Xn - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
      } else {
        ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
      }
      ho.fillRect(L, J, M, B);
    }
    if (vf.ⵠⵠᐃⲆᐃ && o) {
      q.ΔᐃⲆⵠⲆⲆⵠⵠΔ(A, D, G, h, -Xw.ⵠᐃⲆ.y + m, -Xw.ⵠᐃⲆ.y + m + C);
    }
  }
  function Kv(a, b, c, d, e) {
    if (mf.transition && e == 1) {
      ho.globalAlpha = fl;
      Mm(ho, ΔΔ[a][mf.time][b], c, d);
      mf.time = mf.time ? Hi : 1;
      ho.globalAlpha = za - mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      Mm(ho, ΔΔ[a][mf.time][b], c, d);
      mf.time = mf.time ? mj : mk;
      ho.globalAlpha = ie;
    } else {
      ho.globalAlpha = e;
      Mm(ho, ΔΔ[a][mf.time][b], c, d);
      ho.globalAlpha = 1;
    }
  }
  function Lv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Xw.ⵠᐃⲆ.x + j - 700;
    var l = Math.max(Xw.ⵠᐃⲆ.y + e, 0);
    var g = Math.max(-Xw.ⵠᐃⲆ.y + jq - i - Ah, 0);
    var t = l;
    var b = jq - l - g;
    if (o) {
      var u = q.ⵠⵠⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + lw.ⲆⲆⵠⲆΔ;
    var F = v;
    var m = t;
    var p = u.x + lw.ΔᐃⲆᐃⲆ;
    var C = b;
    var G = v += u.x + lw.ΔᐃⲆᐃⲆ - 2;
    if (o) {
      u = q.ⵠⵠⵠ(a);
    } else {
      u = a.r;
    }
    var f = h + lw.ⲆᐃⵠⲆΔ - v + u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f - Zh) - 2;
    if (o) {
      u = q.ⵠⵠⵠ(s);
    } else {
      u = s.r;
    }
    if (A < v + (f = h + lw.ⲆᐃᐃⵠⲆ - v + u.x) - vt) {
      var k = xh;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f - 2;
    } else {
      k = uh;
      v = A;
      D = -Ol;
    }
    f = h + lw.ᐃΔΔᐃᐃⵠᐃ - v;
    if (mf.transition) {
      var N = mf.time ? rg - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
    }
    ho.fillRect(F, m, p, C);
    if (o) {
      if (mf.transition) {
        N = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(15, 70, 76, 42, 139, 155, N);
      } else {
        ho.fillStyle = Xr.ⵠᐃⲆΔⲆᐃᐃ[mf.time];
      }
    } else if (mf.transition) {
      N = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
    }
    ho.fillRect(H, y, w, K);
    if (k) {
      if (o) {
        if (mf.transition) {
          N = mf.time ? jh - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
          ho.fillStyle = Qv(17, 94, 96, 169, 214, 211, N);
        } else {
          ho.fillStyle = Xr.ⵠᐃⵠⲆᐃⵠⲆ[mf.time];
        }
      } else if (mf.transition) {
        N = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
      } else {
        ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
      }
      ho.fillRect(L, J, M, B);
    }
    if (vf.ⵠⵠᐃⲆᐃ && o) {
      q.ⲆΔⵠΔΔΔⵠΔⲆ(A, D, G, h, -Xw.ⵠᐃⲆ.y + m, -Xw.ⵠᐃⲆ.y + m + C);
    }
  }
  function Mv(a) {
    ho.save();
    ho.translate(Xw.ⵠᐃⲆ.x + a.x, Xw.ⵠᐃⲆ.y + a.y);
    ho.rotate(a.angle);
    ho.globalAlpha = a.alpha;
    var b = ΔΔ[a.id][mf.time];
    Mm(ho, b, -b.width / 2, -b.height / ih);
    ho.globalAlpha = jh;
    ho.restore();
  }
  function Nv(a, b, c, d) {
    if (mf.transition) {
      ho.globalAlpha = za;
      Mm(ho, ΔΔ[a][mf.time], c, d);
      mf.time = mf.time ? Rs : 1;
      ho.globalAlpha = 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      Mm(ho, ΔΔ[a][mf.time], c, d);
      mf.time = mf.time ? 0 : xt;
      ho.globalAlpha = 1;
    } else {
      Mm(ho, b, c, d);
    }
  }
  function Ov() {
    ho.globalAlpha = 1;
    if (mf.transition) {
      var a = mf.ᐃⵠⵠⵠ.ᐃⲆΔ();
    }
    mf.ⲆᐃⵠⲆΔᐃΔⲆⲆ(-Xw.ⵠᐃⲆ.x, -Xw.ⵠᐃⲆ.y);
    wv = Math.max(Math.floor(-Xw.ⵠᐃⲆ.x / mf.ᐃⲆⲆⲆⲆᐃᐃ) - ll, 0);
    xv = Math.min(Math.floor((-Xw.ⵠᐃⲆ.x + Xw.ⵠᐃⲆ.w) / mf.ᐃⲆⲆⲆⲆᐃᐃ) + 4, mf.ⵠⲆᐃⲆᐃ - 1);
    yv = Math.max(Math.floor(-Xw.ⵠᐃⲆ.y / mf.ᐃᐃᐃⵠⵠᐃΔ) - Hk, 0);
    zv = Math.min(Math.floor((-Xw.ⵠᐃⲆ.y + Xw.ⵠᐃⲆ.ΔⵠⲆ) / mf.ᐃᐃᐃⵠⵠᐃΔ) + hl, mf.ⲆⵠⲆⵠᐃ - ie);
    (function () {
      for (var c = mf.Ⲇᐃᐃᐃ.length - 1; c >= 0; c--) {
        var f = mf.Ⲇᐃᐃᐃ[c];
        if (mf.ΔⲆΔⵠΔ === f.ⵠⵠⵠ) {
          var j = mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ];
          if (f.x1 - 230 - lo <= -Xw.ⵠᐃⲆ.x && f.x2 + 330 >= -Xw.ⵠᐃⲆ.x && f.y1 - jq <= -Xw.ⵠᐃⲆ.y && -Xw.ⵠᐃⲆ.y <= f.y2 + 100) {
            var k = f.x2;
            if (mf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
              k -= 610;
            }
            var m = f.x1;
            if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
              m += 610;
            }
            var p = f.y2;
            if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
              p -= 610;
            }
            var q = f.y1;
            if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
              q += 610;
            }
            if (mf.transition) {
              var w = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
              ho.fillStyle = Qv(j.ⵠᐃᐃ[Eh], j.ⵠᐃᐃ[rg], j.ⵠᐃᐃ[Mt], j.ⵠΔⲆ[zl], j.ⵠΔⲆ[1], j.ⵠΔⲆ[1], w);
            } else {
              ho.fillStyle = j.ᐃΔⵠΔⵠ[mf.time];
            }
            var x = Math.max(Xw.ⵠᐃⲆ.x + m - dg - 230, 0);
            var y = Math.max(-Xw.ⵠᐃⲆ.x + lo - k - 330 - Zg, 0);
            var z = Math.max(Xw.ⵠᐃⲆ.y + q - 2, wj);
            var A = Math.max(-Xw.ⵠᐃⲆ.y + jq - p - dh - ih, 0);
            ho.beginPath();
            ho.fillRect(x, z, lo - y - x, jq - z - A);
          }
        }
      }
      for (c = mf.Ⲇᐃᐃᐃ.length - 1; c >= 0; c--) {
        if ((f = mf.Ⲇᐃᐃᐃ[c]).ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
          k = f.x2;
          if (mf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
            k -= 400;
          }
          m = f.x1;
          if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
            m += 400;
          }
          p = f.y2;
          if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
            p -= 300;
          }
          q = f.y1;
          if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
            q += 300;
          }
          if ((f.ΔΔⲆ & lw.ⲆΔΔⵠΔ) === ya && k - lo + 120 <= -Xw.ⵠᐃⲆ.x && k + 820 >= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.y >= q + 88 - jq && -Xw.ⵠᐃⲆ.y <= p + 50) {
            Rv(k, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[0], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ⲆΔΔⵠΔ);
            Jv(k, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[Da], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ⲆΔΔⵠΔ);
          }
          if (!(f.ΔΔⲆ & lw.ᐃᐃⲆᐃΔ) && m - lo - 700 <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= m - mh && -Xw.ⵠᐃⲆ.y >= q + 88 - jq && p + 50 >= -Xw.ⵠᐃⲆ.y) {
            Iv(m, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[za], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ᐃᐃⲆᐃΔ);
            Lv(m, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[js], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ᐃᐃⲆᐃΔ);
          }
          if (mj === (f.ΔΔⲆ & lw.ΔᐃᐃⲆΔ) && m - 235 - lo <= -Xw.ⵠᐃⲆ.x && k + 350 >= -Xw.ⵠᐃⲆ.x && p - jq - 275 <= -Xw.ⵠᐃⲆ.y && -Xw.ⵠᐃⲆ.y <= p + 490) {
            Cv(p - 230, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[2], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ΔᐃᐃⲆΔ);
            Pv(p - 230, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[Mt], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ΔᐃᐃⲆΔ);
          }
          if (!(f.ΔΔⲆ & lw.ⵠᐃⵠⵠⲆ) && -Xw.ⵠᐃⲆ.x >= m - 235 - lo && k + 350 >= -Xw.ⵠᐃⲆ.x && q - jq - 390 <= -Xw.ⵠᐃⲆ.y && -Xw.ⵠᐃⲆ.y <= q + 315) {
            Fv(q + 310, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[hl], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ⵠᐃⵠⵠⲆ);
            Gv(q + 310, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[Hk], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ⵠᐃⵠⵠⲆ);
          }
        }
      }
      for (c = mf.Ⲇᐃᐃᐃ.length - 1; c >= 0; c--) {
        f = mf.Ⲇᐃᐃᐃ[c];
        if (mf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
          k = f.x2;
          if (mf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
            k -= 400;
          }
          m = f.x1;
          if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
            m += 400;
          }
          p = f.y2;
          if (mf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
            p -= 300;
          }
          q = f.y1;
          if (mf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
            q += 300;
          }
          if (Kh !== (f.ΔΔⲆ & lw.ⲆΔΔⵠΔ) && k - lo + 120 <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= k + 820 && -Xw.ⵠᐃⲆ.y >= q + 88 - jq && -Xw.ⵠᐃⲆ.y <= p + 50) {
            Rv(k, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[0], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ⲆΔΔⵠΔ);
          }
          if ((f.ΔΔⲆ & lw.ᐃᐃⲆᐃΔ) !== gu && m - lo - 700 <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= m - 20 && -Xw.ⵠᐃⲆ.y >= q + 88 - jq && -Xw.ⵠᐃⲆ.y <= p + 50) {
            Iv(m, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[Ol], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ᐃᐃⲆᐃΔ);
          }
          if ((f.ΔΔⲆ & lw.ΔᐃᐃⲆΔ) !== tt && -Xw.ⵠᐃⲆ.x >= m - 235 - lo && k + 350 >= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.y >= p - jq - 275 && p + 490 >= -Xw.ⵠᐃⲆ.y) {
            Cv(p - 230, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[2], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ΔᐃᐃⲆΔ);
          }
          if (f.ΔΔⲆ & lw.ⵠᐃⵠⵠⲆ && m - 235 - lo <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= k + 350 && -Xw.ⵠᐃⲆ.y >= q - jq - 390 && -Xw.ⵠᐃⲆ.y <= q + 315) {
            Fv(q + 310, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[ig], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ⵠᐃⵠⵠⲆ);
          }
        }
      }
      for (c = mf.Ⲇᐃᐃᐃ.length - cu; c >= 0; c--) {
        if ((f = mf.Ⲇᐃᐃᐃ[c]).ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
          j = mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ];
          if (f.x1 - 230 - lo <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= f.x2 + 330 && -Xw.ⵠᐃⲆ.y >= f.y1 - jq && -Xw.ⵠᐃⲆ.y <= f.y2 + sh) {
            k = f.x2;
            if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
              if (ya === (f.ΔΔⲆ & lw.ⲆΔΔⵠΔ)) {
                k -= 414;
              } else {
                k -= 610;
              }
            }
            m = f.x1;
            if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
              if (f.ΔΔⲆ & lw.ᐃᐃⲆᐃΔ) {
                m += 610;
              } else {
                m += 414;
              }
            }
            p = f.y2;
            if (mf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
              if ((f.ΔΔⲆ & lw.ΔᐃᐃⲆΔ) === tt) {
                p -= 414;
              } else {
                p -= 610;
              }
            }
            q = f.y1;
            if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
              if (f.ΔΔⲆ & lw.ⵠᐃⵠⵠⲆ) {
                q += 610;
              } else {
                q += 414;
              }
            }
            if (mf.transition) {
              w = mf.time ? fl - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
              ho.fillStyle = Qv(j.ⵠᐃᐃ[0], j.ⵠᐃᐃ[1], j.ⵠᐃᐃ[2], j.ⵠΔⲆ[0], j.ⵠΔⲆ[Ug], j.ⵠΔⲆ[Yg], w);
            } else {
              ho.fillStyle = j.ᐃΔⵠΔⵠ[mf.time];
            }
            x = Math.max(Xw.ⵠᐃⲆ.x + m - jk - 230, Db);
            y = Math.max(-Xw.ⵠᐃⲆ.x + lo - k - 330 - Yg, 0);
            z = Math.max(Xw.ⵠᐃⲆ.y + q - Nb, Eh);
            A = Math.max(-Xw.ⵠᐃⲆ.y + jq - p - 100 - Gl, Zj);
            ho.beginPath();
            ho.fillRect(x, z, lo - y - x, jq - z - A);
          }
        }
      }
      if (vf.ⵠⵠᐃⲆᐃ) {
        Dv(qv, yv, zv, wv, xv, Xr.ⵠⵠⵠᐃⲆ, "isl", dg);
        Dv(qv, yv, zv, wv, xv, Xr.ⵠΔⵠⲆⵠ, "isl", Gl);
      }
      Dv(uv, yv, zv, wv, xv, Xr.ⲆⲆⵠⲆᐃ, "isl", 2);
      if (vf.ⵠⵠᐃⲆᐃ) {
        Dv(vv, yv, zv, wv, xv, Xr.ⲆᐃΔⲆᐃⵠΔ, "de");
      }
      var B = mf.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ];
      for (c = 0; c < B.length; c++) {
        for (var b = B[c], C = ps; C < b.ΔⵠⵠΔᐃ.length; C++) {
          Mv(b.ΔⵠⵠΔᐃ[C]);
        }
      }
      if ((dp += _w * 40) > 60) {
        dp -= 60;
      }
      Dv(Qp, yv, zv, wv, xv, Xr.ΔΔⲆⲆ, "r", wj);
      for (c = 0; c < mf.Ⲇᐃᐃᐃ.length; c++) {
        if ((f = mf.Ⲇᐃᐃᐃ[c]).ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
          k = f.x2;
          if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
            k -= 400;
          }
          m = f.x1;
          if (mf.ΔⲆΔⵠΔ !== f.ⵠⵠⵠ) {
            m += 400;
          }
          p = f.y2;
          if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
            p -= 300;
          }
          q = f.y1;
          if (f.ⵠⵠⵠ !== mf.ΔⲆΔⵠΔ) {
            q += 300;
          }
          if ((f.ΔΔⲆ & lw.ⲆΔΔⵠΔ) > 0 && -Xw.ⵠᐃⲆ.x >= k - lo + 120 && -Xw.ⵠᐃⲆ.x <= k + 820 && q + 88 - jq <= -Xw.ⵠᐃⲆ.y && -Xw.ⵠᐃⲆ.y <= p + 50) {
            Jv(k, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[0], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ⲆΔΔⵠΔ);
          }
          if ((f.ΔΔⲆ & lw.ᐃᐃⲆᐃΔ) > 0 && -Xw.ⵠᐃⲆ.x >= m - lo - 700 && -Xw.ⵠᐃⲆ.x <= m - 20 && q + 88 - jq <= -Xw.ⵠᐃⲆ.y && p + 50 >= -Xw.ⵠᐃⲆ.y) {
            Lv(m, q + 88, p - 88, Xw.ⲆⲆⲆᐃ[1], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ᐃᐃⲆᐃΔ);
          }
          if ((f.ΔΔⲆ & lw.ΔᐃᐃⲆΔ) > 0 && -Xw.ⵠᐃⲆ.x >= m - 235 - lo && k + 350 >= -Xw.ⵠᐃⲆ.x && p - jq - 275 <= -Xw.ⵠᐃⲆ.y && p + 490 >= -Xw.ⵠᐃⲆ.y) {
            Pv(p - 230, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[Zg], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ΔᐃᐃⲆΔ);
          }
          if ((f.ΔΔⲆ & lw.ⵠᐃⵠⵠⲆ) > 0 && m - 235 - lo <= -Xw.ⵠᐃⲆ.x && -Xw.ⵠᐃⲆ.x <= k + 350 && -Xw.ⵠᐃⲆ.y >= q - jq - 390 && q + 315 >= -Xw.ⵠᐃⲆ.y) {
            Gv(q + 310, m - 230, k + 230, Xw.ⲆⲆⲆᐃ[3], mf.ⵠⲆⲆΔⲆ[f.ⵠⵠⵠ], f.ΔΔⲆ & lw.ⵠᐃⵠⵠⲆ);
          }
        }
      }
    })();
    (function () {
      var k = wv;
      var e = xv;
      var i = yv;
      var t = zv;
      if (vf.ⵠⵠᐃⲆᐃ) {
        Dv(uv, i, t, k, e, Xr.ΔΔΔᐃⲆ, "l", 2);
      }
      if (vf.ⵠⵠᐃⲆᐃ) {
        Dv(uv, i, t, k, e, Xr.ΔᐃΔΔⲆ, "la", Qr);
      }
      Dv(uv, i, t, k, e, Xr.ΔⲆⲆⵠΔ, "la", Oj);
      Dv(qv, i, t, k, e, Xr.ⵠᐃᐃⵠᐃ, "l", 2);
      if (vf.ⵠⵠᐃⲆᐃ) {
        Dv(tv, i, t, k, e, Xr.ΔⲆⲆⵠΔ, "la", Eg);
        Dv(qv, i, t, k, e, Xr.ΔⲆᐃⵠᐃ, "l", bs);
      }
      Dv(uv, i, t, k, e, Xr.ⲆΔᐃⲆᐃ, "ma", qg);
      for (var n = mf.ⲆΔⲆ[ow.ⵠⵠᐃΔⲆᐃΔ], aa = 0; n.length > aa; aa++) {
        n[aa].ΔⲆⵠⲆⲆⵠⲆ();
      }
      var ba = mf.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ];
      for (aa = Zj; ba.length > aa; aa++) {
        for (var ca = ba[aa], da = Zj; ca.ᐃΔᐃⵠⲆ.length > da; da++) {
          Bv(ca.ᐃΔᐃⵠⲆ[da]);
        }
      }
      var ea = mf.ⲆΔⲆ[ow.ⲆᐃⲆᐃⵠ];
      for (aa = tg; aa < ea.length; aa++) {
        Av(ea[aa], Xr.ⲆᐃⲆᐃⵠ);
        ea[aa].ΔⵠⲆⵠᐃ(ea[aa].info);
      }
      var l = mf.ⲆΔⲆ[ow.ⲆᐃΔᐃⵠ];
      for (aa = Rs; l.length > aa; aa++) {
        if (l[aa].action == 2) {
          Hv(l[aa]);
        }
      }
      var fa = mf.ⲆΔⲆ[ow.ΔᐃᐃⲆⲆ];
      for (aa = Pg; fa.length > aa; aa++) {
        Hv(fa[aa], Xr.ⲆⲆᐃⵠΔⲆⵠ);
      }
      var ha = mf.ⲆΔⲆ[ow.ⲆⲆⵠⵠᐃ];
      for (aa = 0; ha.length > aa; aa++) {
        Hv(ha[aa]);
      }
      var ia = mf.ⲆΔⲆ[ow.ΔⲆΔΔⲆ];
      for (aa = In; ia.length > aa; aa++) {
        Hv(ia[aa]);
      }
      var ja = mf.ⲆΔⲆ[ow.ᐃΔΔⵠΔ];
      for (aa = tt; ja.length > aa; aa++) {
        Hv(ja[aa], Xr.ⵠᐃΔᐃⵠᐃⵠ);
      }
      var d = mf.ⲆΔⲆ[ow.ⵠΔᐃᐃᐃ];
      for (aa = 0; aa < d.length; aa++) {
        Av(d[aa]);
      }
      var c = mf.ⲆΔⲆ[ow.ΔΔΔⵠⵠ];
      for (aa = 0; c.length > aa; aa++) {
        Av(c[aa], Xr.ΔΔΔⵠⵠ);
      }
      var m = mf.ⲆΔⲆ[ow.ⵠᐃΔⲆᐃ];
      for (aa = Kh; m.length > aa; aa++) {
        Hv(m[aa]);
      }
      m = mf.ⲆΔⲆ[ow.ᐃⵠΔΔΔ];
      aa = 0;
      for (; aa < m.length; aa++) {
        Hv(m[aa]);
      }
      m = mf.ⲆΔⲆ[ow.ⵠᐃΔⲆᐃ];
      aa = gu;
      for (; aa < m.length; aa++) {
        Tv(m[aa]);
      }
      var ka = mf.ⲆΔⲆ[ow.ⲆⵠΔᐃᐃ];
      for (aa = 0; ka.length > aa; aa++) {
        if (Db === (ka[aa].info & 15) || jn === ka[aa].info) {
          Av(ka[aa]);
        }
      }
      var la = mf.ⲆΔⲆ[ow.ⲆΔⲆⵠΔ];
      for (aa = 0; la.length > aa; aa++) {
        if (wj === (la[aa].info & 15) || la[aa].info === 10) {
          Av(la[aa]);
        }
      }
      var ma = mf.ⲆΔⲆ[ow.ΔⵠⵠΔⲆ];
      for (aa = 0; aa < ma.length; aa++) {
        if (In === (ma[aa].info & 15) || yt === ma[aa].info) {
          Av(ma[aa]);
        }
      }
      var na = mf.ⲆΔⲆ[ow.ᐃⲆᐃⲆΔ];
      for (aa = In; na.length > aa; aa++) {
        Av(na[aa], Xr.ⲆΔᐃΔΔ);
      }
      var oa = mf.ⲆΔⲆ[ow.ⲆⲆΔⲆⵠ];
      for (aa = 0; aa < oa.length; aa++) {
        if (!(oa[aa].info & 15) || Ra === oa[aa].info) {
          Av(oa[aa]);
        }
      }
      var pa = mf.ⲆΔⲆ[ow.ᐃⲆⲆᐃΔ];
      for (aa = Kh; pa.length > aa; aa++) {
        if (!(pa[aa].info & 15) || pa[aa].info === Bo) {
          Av(pa[aa]);
        }
      }
      var qa = mf.ⲆΔⲆ[ow.ᐃⵠᐃᐃⵠ];
      for (aa = 0; aa < qa.length; aa++) {
        if (!(qa[aa].info & 15) || qa[aa].info === 10) {
          Av(qa[aa]);
        }
      }
      na = mf.ⲆΔⲆ[ow.ⲆΔᐃΔΔ];
      aa = 0;
      for (; na.length > aa; aa++) {
        Av(na[aa]);
      }
      var ra = mf.ⲆΔⲆ[ow.Δⵠᐃᐃⵠ];
      for (aa = Da; ra.length > aa; aa++) {
        Av(ra[aa], Xr.Δⵠᐃᐃⵠ, Xr.ⵠΔΔᐃⵠΔᐃ);
      }
      var A = mf.ⲆΔⲆ[ow.ⵠΔΔⵠΔᐃΔ];
      for (aa = 0; aa < A.length; aa++) {
        Av(A[aa], Xr.Δⵠᐃᐃⵠ, Xr.ⵠΔΔᐃⵠΔᐃ);
      }
      var x = mf.ⲆΔⲆ[ow.ΔΔΔΔΔ];
      for (aa = 0; aa < x.length; aa++) {
        Av(x[aa], Xr.ΔΔΔΔΔ, Xr.ⲆⵠΔᐃⲆΔᐃ);
      }
      var J = mf.ⲆΔⲆ[ow.ᐃⲆΔᐃⲆ];
      for (aa = ya; J.length > aa; aa++) {
        if (J[aa].info & mk) {
          Av(J[aa], Xr.ⵠᐃⵠΔⵠΔⲆ);
        }
      }
      J = mf.ⲆΔⲆ[ow.ΔⵠⵠΔΔ];
      aa = tg;
      for (; J.length > aa; aa++) {
        if (J[aa].info & 1) {
          Av(J[aa], Xr.ⵠΔⲆᐃᐃⲆᐃ);
        }
      }
      J = mf.ⲆΔⲆ[ow.ΔΔⲆᐃⲆ];
      aa = Da;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          Av(J[aa], Xr.ΔⲆⲆᐃᐃΔΔ);
        }
      }
      J = mf.ⲆΔⲆ[ow.ΔⵠΔⲆΔ];
      aa = Eh;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          Av(J[aa], Xr.ᐃᐃᐃΔᐃΔⵠ);
        }
      }
      J = mf.ⲆΔⲆ[ow.ⵠΔⲆⵠᐃ];
      aa = mj;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          Av(J[aa], Xr.ΔⲆⲆᐃΔⵠⲆ);
        }
      }
      J = mf.ⲆΔⲆ[ow.ᐃΔΔⵠᐃ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          Av(J[aa], Xr.ΔⲆⲆᐃᐃΔΔ);
        }
      }
      J = mf.ⲆΔⲆ[ow.ΔⵠⵠⲆᐃ];
      aa = tg;
      for (; aa < J.length; aa++) {
        if (J[aa].info & 1) {
          Av(J[aa], Xr.ⵠᐃⵠΔⵠΔⲆ);
        }
      }
      J = mf.ⲆΔⲆ[ow.ⵠΔᐃⲆΔ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info & 1) {
          Av(J[aa], Xr.ⵠΔⲆᐃᐃⲆᐃ);
        }
      }
      J = mf.ⲆΔⲆ[ow.ᐃΔⵠⵠⵠ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          Av(J[aa], Xr.ΔⲆⲆᐃᐃΔΔ);
        }
      }
      J = mf.ⲆΔⲆ[ow.ⵠΔᐃΔΔ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          Av(J[aa], Xr.ᐃᐃᐃΔᐃΔⵠ);
        }
      }
      J = mf.ⲆΔⲆ[ow.Δⵠᐃⵠᐃ];
      aa = tt;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          Av(J[aa], Xr.ΔⲆⲆᐃΔⵠⲆ);
        }
      }
      J = mf.ⲆΔⲆ[ow.Ⲇᐃⵠⵠⵠ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          Av(J[aa], Xr.ΔⲆⲆᐃᐃΔΔ);
        }
      }
      var sa = mf.ⲆΔⲆ[ow.ⵠⵠⲆⵠΔ];
      for (aa = 0; aa < sa.length; aa++) {
        Av(sa[aa], Xr.ⵠⵠⲆⵠΔ, Xr.ⵠᐃⵠᐃⵠⵠᐃ);
      }
      var B = mf.ⲆΔⲆ[ow.ΔⲆⵠΔΔ];
      for (aa = Hi; aa < B.length; aa++) {
        Av(B[aa], Xr.ΔⲆⵠΔΔ);
      }
      n = mf.ⲆΔⲆ[ow.ⵠⵠᐃΔⲆᐃΔ];
      aa = 0;
      for (; aa < n.length; aa++) {
        Av(n[aa], Xr.ⵠⵠᐃΔⲆᐃΔ, Xr.ᐃⲆᐃⵠⵠᐃΔⵠΔ);
      }
      var ta = mf.ⲆΔⲆ[ow.ⵠⵠⲆᐃΔ];
      for (aa = Zj; ta.length > aa; aa++) {
        if (ta[aa].ⲆⵠᐃⲆΔⲆΔ === tt) {
          Av(ta[aa]);
        }
      }
      ba = mf.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ];
      aa = 0;
      for (; ba.length > aa; aa++) {
        ca = ba[aa];
        if (_r.ⲆⵠΔᐃⵠ !== ba[aa].ΔⲆᐃΔΔ && ba[aa].ΔⲆᐃΔΔ !== _r.ⲆⲆΔⵠⲆ && _r.ⵠᐃⲆⲆΔ !== ba[aa].ΔⲆᐃΔΔ && _r.ΔⵠΔΔⵠ !== ba[aa].ΔⲆᐃΔΔ && ba[aa].ΔⲆᐃΔΔ !== _r.ⲆⵠΔΔΔ) {
          if (ca.ⵠᐃᐃᐃΔⵠΔ === 0) {
            if (ca.ᐃⵠⵠⵠⵠⵠⵠ > 0.001) {
              ca.ᐃⵠⵠⵠⵠⵠⵠ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(ca.ᐃⵠⵠⵠⵠⵠⵠ, 0, 0.018);
              var ua = 1 + Math.min(1, Math.max(ca.ᐃⵠⵠⵠⵠⵠⵠ, ps) / 100) * 0.18;
              ho.save();
              ho.scale(ua, ua);
              Xw.ⵠᐃⲆ.x /= ua;
              Xw.ⵠᐃⲆ.y /= ua;
              ca.x /= ua;
              ca.y /= ua;
              ca.r.x /= ua;
              ca.r.y /= ua;
              ca.ⲆⲆΔⲆΔⲆⲆ();
              ca.ᐃⵠᐃⵠ();
              Xw.ⵠᐃⲆ.x *= ua;
              Xw.ⵠᐃⲆ.y *= ua;
              ca.x *= ua;
              ca.y *= ua;
              ca.r.x *= ua;
              ca.r.y *= ua;
              ho.restore();
            } else {
              ca.ⲆⵠᐃⲆΔⲆΔ = 0;
              ca.ⲆⲆΔⲆΔⲆⲆ();
              ca.ᐃⵠᐃⵠ();
            }
          }
        } else if (ca.ᐃⵠⵠⵠⲆ <= 180) {
          ho.save();
          ua = 1 + Math.min(1, Math.max(ca.ⵠⵠⲆⲆᐃ - 30, Zj) / 180) * 0.35;
          ho.scale(ua, ua);
          Xw.ⵠᐃⲆ.x /= ua;
          Xw.ⵠᐃⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ⲆⵠᐃⲆΔⲆΔ = Hi;
          ca.ⲆⲆΔⲆΔⲆⲆ();
          ca.ᐃⵠᐃⵠ();
          Xw.ⵠᐃⲆ.x *= ua;
          Xw.ⵠᐃⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          ho.restore();
        }
      }
      B = mf.ⲆΔⲆ[ow.ΔⲆⵠΔΔ];
      aa = Kh;
      for (; B.length > aa; aa++) {
        Av(B[aa], Xr.ⲆᐃⲆⵠᐃⵠⵠ);
      }
      var va = mf.ⲆΔⲆ[ow.ⵠⵠⵠⵠⲆ];
      for (aa = Lr; aa < va.length; aa++) {
        Av(va[aa]);
      }
      var S = mf.ⲆΔⲆ[ow.ⲆⵠⲆᐃⵠ];
      for (aa = tg; aa < S.length; aa++) {
        Av(S[aa], Xr.ⲆⵠⲆᐃⵠ, Xr.ⲆᐃⲆⵠᐃᐃΔ);
      }
      var Q = mf.ⲆΔⲆ[ow.ᐃΔᐃⵠΔ];
      for (aa = 0; Q.length > aa; aa++) {
        Av(Q[aa]);
      }
      var _ = mf.ⲆΔⲆ[ow.ΔⵠΔⵠⲆ];
      for (aa = Pg; _.length > aa; aa++) {
        Av(_[aa], Xr.ΔⵠΔⵠⲆ, Xr.ΔⵠΔᐃⲆΔⵠ);
      }
      var F = mf.ⲆΔⲆ[ow.ⲆⵠΔᐃⵠ];
      for (aa = 0; aa < F.length; aa++) {
        Av(F[aa], Xr.ⲆⵠΔᐃⵠ, Xr.ΔⲆⵠⲆⲆΔᐃ);
      }
      var R = mf.ⲆΔⲆ[ow.ⲆⲆΔⵠⲆ];
      for (aa = 0; R.length > aa; aa++) {
        Av(R[aa], Xr.ⲆⲆΔⵠⲆ, Xr.ⵠΔΔⲆⵠⲆᐃ);
      }
      ka = mf.ⲆΔⲆ[ow.ⲆⵠΔᐃᐃ];
      aa = zl;
      for (; aa < ka.length; aa++) {
        if ((ka[aa].info & 15) !== Rs && ka[aa].info !== Th) {
          Av(ka[aa]);
        }
      }
      la = mf.ⲆΔⲆ[ow.ⲆΔⲆⵠΔ];
      aa = In;
      for (; aa < la.length; aa++) {
        if (Db !== (la[aa].info & 15) && Ab !== la[aa].info) {
          Av(la[aa]);
        }
      }
      ma = mf.ⲆΔⲆ[ow.ⵠᐃΔΔΔⵠΔ];
      aa = Rs;
      for (; ma.length > aa; aa++) {
        Av(ma[aa], Xr.ⵠΔᐃⵠⲆ);
      }
      ma = mf.ⲆΔⲆ[ow.ΔⵠⵠΔⲆ];
      aa = 0;
      for (; ma.length > aa; aa++) {
        if ((ma[aa].info & 15) !== Bg && ma[aa].info !== 10) {
          Av(ma[aa]);
        }
      }
      m = mf.ⲆΔⲆ[ow.ᐃⵠΔΔΔ];
      aa = 0;
      for (; m.length > aa; aa++) {
        Tv(m[aa]);
      }
      oa = mf.ⲆΔⲆ[ow.ⲆⲆΔⲆⵠ];
      aa = Db;
      for (; oa.length > aa; aa++) {
        if (oa[aa].info & 15 && oa[aa].info !== 10) {
          Av(oa[aa]);
        }
      }
      pa = mf.ⲆΔⲆ[ow.ᐃⲆⲆᐃΔ];
      aa = Rq;
      for (; aa < pa.length; aa++) {
        if (pa[aa].info & 15 && pa[aa].info !== 10) {
          Av(pa[aa]);
        }
      }
      qa = mf.ⲆΔⲆ[ow.ᐃⵠᐃᐃⵠ];
      aa = 0;
      for (; aa < qa.length; aa++) {
        if (qa[aa].info & 15 && qa[aa].info !== 10) {
          Av(qa[aa]);
        }
      }
      var G = mf.ⲆΔⲆ[ow.ⵠΔΔⲆᐃ];
      for (aa = Rq; aa < G.length; aa++) {
        Av(G[aa], Xr.ⵠΔΔⲆᐃ, Xr.ᐃⵠⵠⵠᐃⵠⵠ);
      }
      var j = mf.ⲆΔⲆ[ow.ⲆⲆᐃⲆᐃ];
      for (aa = 0; aa < j.length; aa++) {
        Av(j[aa], Xr.ⲆⲆᐃⲆᐃ, Xr.ΔⲆᐃᐃⲆⲆⵠ);
      }
      var L = mf.ⲆΔⲆ[ow.ⲆⲆᐃⲆⵠ];
      for (aa = Kh; L.length > aa; aa++) {
        Av(L[aa], Xr.ⲆⲆᐃⲆⵠ, Xr.ᐃⲆⲆⵠⵠᐃᐃ);
      }
      var W = mf.ⲆΔⲆ[ow.ⵠΔᐃΔⵠ];
      for (aa = Kh; W.length > aa; aa++) {
        Av(W[aa], Xr.ⵠΔᐃΔⵠ, Xr.ⲆⵠⵠⲆᐃΔΔ);
      }
      var O = mf.ⲆΔⲆ[ow.ⲆᐃᐃⲆⵠ];
      for (aa = Bg; aa < O.length; aa++) {
        Av(O[aa], Xr.ⲆᐃᐃⲆⵠ, Xr.ΔⵠΔⲆⲆᐃΔ);
      }
      var N = mf.ⲆΔⲆ[ow.ⵠⲆⲆᐃΔ];
      for (aa = 0; N.length > aa; aa++) {
        Av(N[aa], Xr.ⵠⲆⲆᐃΔ, Xr.ⲆΔΔⲆᐃⲆⵠ);
      }
      var q = mf.ⲆΔⲆ[ow.ΔΔⵠⲆⲆ];
      for (aa = 0; aa < q.length; aa++) {
        Av(q[aa]);
      }
      var H = mf.ⲆΔⲆ[ow.ⲆⵠⵠΔⲆ];
      for (aa = tg; H.length > aa; aa++) {
        Av(H[aa], Xr.ΔΔⲆᐃᐃⲆΔ, Xr.ᐃⲆᐃΔⵠⲆⵠ);
      }
      var U = mf.ⲆΔⲆ[ow.ᐃⵠⵠᐃⵠ];
      for (aa = Da; U.length > aa; aa++) {
        Av(U[aa]);
      }
      var Y = mf.ⲆΔⲆ[ow.ᐃΔⲆⲆⲆ];
      for (aa = 0; aa < Y.length; aa++) {
        Av(Y[aa], Xr.ᐃΔⲆⲆⲆ, Xr.ᐃⲆΔΔᐃⵠⵠ);
      }
      var K = mf.ⲆΔⲆ[ow.ᐃⵠΔⵠⵠ];
      for (aa = 0; aa < K.length; aa++) {
        if (K[aa].scale === ie) {
          Av(K[aa], Xr.ᐃⵠΔⵠⵠ, Xr.ⵠⲆⵠᐃⲆⵠᐃ);
        }
      }
      K = mf.ⲆΔⲆ[ow.ᐃΔⲆⲆΔ];
      aa = Da;
      for (; K.length > aa; aa++) {
        if (K[aa].scale === 1) {
          Av(K[aa], Xr.ᐃΔⲆⲆΔ, Xr.ᐃᐃⵠᐃⲆΔΔ);
        }
      }
      var wa = mf.ⲆΔⲆ[ow.ᐃⲆⲆⲆⲆ];
      for (aa = 0; wa.length > aa; aa++) {
        Av(wa[aa]);
      }
      var Z = mf.ⲆΔⲆ[ow.ⵠⲆΔⵠᐃ];
      for (aa = Pg; aa < Z.length; aa++) {
        Av(Z[aa], Xr.ⵠⲆΔⵠᐃ);
      }
      l = mf.ⲆΔⲆ[ow.ⲆᐃΔᐃⵠ];
      aa = 0;
      for (; l.length > aa; aa++) {
        Av(l[aa]);
      }
      var X = mf.ⲆΔⲆ[ow.Δᐃᐃᐃᐃ];
      for (aa = wj; X.length > aa; aa++) {
        Av(X[aa]);
      }
      J = mf.ⲆΔⲆ[ow.ΔⵠⵠⲆᐃ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & jh)) {
          Av(J[aa], Xr.ⵠⲆΔᐃⵠⲆⲆ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> Ol);
      }
      J = mf.ⲆΔⲆ[ow.ⵠΔᐃⲆΔ];
      aa = Zj;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          Av(J[aa], Xr.ΔⵠΔⲆᐃⵠᐃ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> js);
      }
      J = mf.ⲆΔⲆ[ow.ᐃΔⵠⵠⵠ];
      aa = Kh;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & Oq)) {
          Av(J[aa], Xr.ΔⲆⲆⲆⵠⲆⲆ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> ie);
      }
      J = mf.ⲆΔⲆ[ow.ⵠΔᐃΔΔ];
      aa = mj;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          Av(J[aa], Xr.ᐃⲆⲆΔⵠⵠⵠ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> fl);
      }
      J = mf.ⲆΔⲆ[ow.Δⵠᐃⵠᐃ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & yg)) {
          Av(J[aa], Xr.ⵠᐃⲆᐃⲆⲆᐃ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> qu);
      }
      J = mf.ⲆΔⲆ[ow.Ⲇᐃⵠⵠⵠ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          Av(J[aa], Xr.Ⲇᐃⵠⵠⵠ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> Ug);
      }
      J = mf.ⲆΔⲆ[ow.ᐃⲆΔᐃⲆ];
      aa = In;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & yg)) {
          Av(J[aa], Xr.ᐃⲆΔᐃⲆ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> 1);
      }
      J = mf.ⲆΔⲆ[ow.ΔⵠⵠΔΔ];
      aa = tt;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          Av(J[aa], Xr.ΔⵠⵠΔΔ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> Ug);
      }
      J = mf.ⲆΔⲆ[ow.ΔΔⲆᐃⲆ];
      aa = Rq;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          Av(J[aa], Xr.ΔΔⲆᐃⲆ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> 1);
      }
      J = mf.ⲆΔⲆ[ow.ΔⵠΔⲆΔ];
      aa = tg;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & mk)) {
          Av(J[aa], Xr.ΔⵠΔⲆΔ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> 1);
      }
      J = mf.ⲆΔⲆ[ow.ⵠΔⲆⵠᐃ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          Av(J[aa], Xr.ⵠΔⲆⵠᐃ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> 1);
      }
      J = mf.ⲆΔⲆ[ow.ᐃΔΔⵠᐃ];
      aa = mj;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & yg)) {
          Av(J[aa], Xr.ᐃΔΔⵠᐃ);
        }
        J[aa].ΔⵠⲆⵠᐃ(J[aa].info >> Ol);
      }
      var xa = mf.ⲆΔⲆ[ow.ⲆⲆⲆⲆⵠ];
      for (aa = Rq; xa.length > aa; aa++) {
        Av(xa[aa], Xr.ⲆⲆⲆⲆⵠ);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      xa = mf.ⲆΔⲆ[ow.ΔᐃⵠⲆⲆ];
      aa = 0;
      for (; aa < xa.length; aa++) {
        Av(xa[aa], Xr.ΔᐃⵠⲆⲆ);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      xa = mf.ⲆΔⲆ[ow.ᐃᐃᐃᐃᐃ];
      aa = ya;
      for (; xa.length > aa; aa++) {
        Av(xa[aa], Xr.ᐃᐃᐃᐃᐃ);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      xa = mf.ⲆΔⲆ[ow.ⵠᐃⲆᐃⵠ];
      aa = Rs;
      for (; xa.length > aa; aa++) {
        Av(xa[aa], Xr.ⵠᐃⲆᐃⵠ);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      xa = mf.ⲆΔⲆ[ow.ᐃΔⵠⵠΔ];
      aa = 0;
      for (; aa < xa.length; aa++) {
        Av(xa[aa], Xr.ᐃΔⵠⵠΔ);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      xa = mf.ⲆΔⲆ[ow.ᐃⵠⵠⲆᐃ];
      aa = 0;
      for (; aa < xa.length; aa++) {
        Av(xa[aa], Xr.ᐃⵠⵠⲆᐃ);
        xa[aa].ΔⵠⲆⵠᐃ(xa[aa].info);
      }
      var Aa = mf.ⲆΔⲆ[ow.ⵠⵠΔⵠⲆ];
      for (aa = Hi; aa < Aa.length; aa++) {
        Av(Aa[aa], Xr.ⵠⵠΔⵠⲆ);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      Aa = mf.ⲆΔⲆ[ow.ⲆᐃⲆΔΔ];
      aa = 0;
      for (; Aa.length > aa; aa++) {
        Av(Aa[aa], Xr.ⲆᐃⲆΔΔ);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      Aa = mf.ⲆΔⲆ[ow.Ⲇᐃⵠᐃⵠ];
      aa = 0;
      for (; Aa.length > aa; aa++) {
        Av(Aa[aa], Xr.Ⲇᐃⵠᐃⵠ);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      Aa = mf.ⲆΔⲆ[ow.ⲆⵠᐃΔΔ];
      aa = 0;
      for (; aa < Aa.length; aa++) {
        Av(Aa[aa], Xr.ⲆⵠᐃΔΔ);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      Aa = mf.ⲆΔⲆ[ow.ᐃⲆⵠᐃᐃ];
      aa = ya;
      for (; aa < Aa.length; aa++) {
        Av(Aa[aa], Xr.ᐃⲆⵠᐃᐃ);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      Aa = mf.ⲆΔⲆ[ow.ⵠⲆᐃᐃⲆ];
      aa = Rq;
      for (; Aa.length > aa; aa++) {
        Av(Aa[aa], Xr.ⵠⲆᐃᐃⲆ);
        Aa[aa].ΔⵠⲆⵠᐃ(Aa[aa].info);
      }
      var Ba = mf.ⲆΔⲆ[ow.ⲆⵠⲆⵠⵠ];
      for (aa = gu; Ba.length > aa; aa++) {
        var Ca = Ba[aa];
        if (Ca.info > zl) {
          Av(Ca, Xr.ᐃⵠΔⲆᐃᐃΔ);
        } else {
          Av(Ca, Xr.ᐃⲆΔⲆᐃᐃΔ);
        }
      }
      var Ea = mf.ⲆΔⲆ[ow.ⲆⵠᐃᐃΔ];
      for (aa = 0; aa < Ea.length; aa++) {
        Av(Ea[aa], Xr.ⲆⵠᐃᐃΔ);
      }
      Dv(uv, i, t, k, e, Xr.ᐃⲆⵠᐃ, "g", ss);
      Dv(uv, i, t, k, e, Xr.ⵠΔⵠᐃᐃ, "gw", 2);
      Dv(uv, i, t, k, e, Xr.ᐃⲆΔⵠ, "d", 2);
      Dv(uv, i, t, k, e, Xr.ⲆⵠⲆΔᐃ, "dw", Zh);
      Dv(uv, i, t, k, e, Xr.ⵠᐃⲆⲆⲆ, "p", 0);
      Dv(uv, i, t, k, e, Xr.ᐃⵠⵠΔⵠ, "m", xq);
      Dv(uv, i, t, k, e, Xr.Ⲇⵠⵠⵠ, "a", Gl);
      Dv(uv, i, t, k, e, Xr.ᐃⵠᐃΔ, "re", 2);
      Dv(uv, i, t, k, e, Xr.ⵠᐃⵠⵠⵠ, "cs", Tr, vt);
      Dv(uv, i, t, k, e, Xr.ⵠᐃⵠⵠⵠ, "cs", Zh, Yg);
      Dv(uv, i, t, k, e, Xr.ⵠᐃⵠⵠⵠ, "cs", Oq, rg);
      Dv(uv, i, t, k, e, Xr.ⵠᐃⵠⵠⵠ, "cs", 0, Da);
      Dv(uv, i, t, k, e, Xr.ⵠⲆᐃᐃⵠ, "cs", gl, Ob);
      Dv(uv, i, t, k, e, Xr.ⵠⲆᐃᐃⵠ, "cs", Zh, Zh);
      Dv(uv, i, t, k, e, Xr.ⵠⲆᐃᐃⵠ, "cs", Ug, 1);
      Dv(uv, i, t, k, e, Xr.ⵠⲆᐃᐃⵠ, "cs", 0, ps);
      var Fa = mf.ⲆΔⲆ[ow.ⵠⵠⵠⲆΔ];
      for (aa = 0; Fa.length > aa; aa++) {
        for (da = Hi; da < Fa[aa].info; da++) {
          Av(Fa[aa].Δᐃⵠⵠ[da], Xr.ⵠⵠⵠⲆΔ);
        }
      }
      Dv(uv, i, t, k, e, Xr.ⵠⵠⲆΔΔ, "s", pq);
      var Ga = mf.ⲆΔⲆ[ow.ⲆᐃΔⲆⵠ];
      for (aa = Bg; aa < Ga.length; aa++) {
        Av(Ga[aa]);
      }
      Ga = mf.ⲆΔⲆ[ow.ⲆΔᐃⵠⲆ];
      aa = Rq;
      for (; Ga.length > aa; aa++) {
        Av(Ga[aa]);
      }
      Ga = mf.ⲆΔⲆ[ow.ΔⵠᐃⲆⵠ];
      aa = 0;
      for (; aa < Ga.length; aa++) {
        Av(Ga[aa]);
      }
      Ga = mf.ⲆΔⲆ[ow.ΔⲆⵠⵠⵠ];
      aa = Db;
      for (; Ga.length > aa; aa++) {
        Av(Ga[aa]);
      }
      Ga = mf.ⲆΔⲆ[ow.ⲆⲆⵠⵠΔ];
      aa = 0;
      for (; Ga.length > aa; aa++) {
        Av(Ga[aa]);
      }
      var Ha = mf.ⲆΔⲆ[ow.ⵠΔⲆⲆΔ];
      for (aa = ps; aa < Ha.length; aa++) {
        Hv(Ha[aa]);
      }
      fa = mf.ⲆΔⲆ[ow.ΔᐃᐃⲆⲆ];
      aa = Zj;
      for (; fa.length > aa; aa++) {
        Tv(fa[aa]);
      }
      fa = mf.ⲆΔⲆ[ow.ᐃΔΔⵠΔ];
      aa = Rq;
      for (; fa.length > aa; aa++) {
        Tv(fa[aa]);
      }
      l = mf.ⲆΔⲆ[ow.ⲆᐃΔᐃⵠ];
      aa = 0;
      for (; l.length > aa; aa++) {
        if (l[aa].action == 2) {
          Tv(l[aa]);
        }
      }
      X = mf.ⲆΔⲆ[ow.Δᐃᐃᐃᐃ];
      aa = 0;
      for (; aa < X.length; aa++) {
        Tv(X[aa]);
      }
      ha = mf.ⲆΔⲆ[ow.ⲆⲆⵠⵠᐃ];
      aa = In;
      for (; aa < ha.length; aa++) {
        Tv(ha[aa]);
      }
      ia = mf.ⲆΔⲆ[ow.ΔⲆΔΔⲆ];
      aa = 0;
      for (; ia.length > aa; aa++) {
        Tv(ia[aa]);
        ia[aa].ΔⵠⲆⵠᐃ(ia[aa].info);
      }
      Dv(uv, i, t, k, e, Xr.ⵠⵠⵠΔⲆ, "c", ya);
      Dv(uv, i, t, k, e, Xr.ΔΔⵠⲆ, "t", 5, 4);
      Dv(uv, i, t, k, e, Xr.ᐃⵠᐃᐃᐃ, "f", 2, 2);
      Dv(uv, i, t, k, e, Xr.ΔᐃᐃΔⵠ, "plm", Eh, 0);
      Dv(uv, i, t, k, e, Xr.ΔⵠᐃⲆΔ, "b", Tr, 2);
      Dv(uv, i, t, k, e, Xr.ΔΔⵠⲆ, "t", 3, lr);
      Dv(uv, i, t, k, e, Xr.ΔⵠᐃⲆΔ, "b", rg, 0);
      Dv(uv, i, t, k, e, Xr.ᐃⵠᐃᐃᐃ, "f", 1, 1);
      Dv(uv, i, t, k, e, Xr.ΔᐃᐃΔⵠ, "plm", lb, 1);
      Dv(uv, i, t, k, e, Xr.ΔΔⵠⲆ, "t", za, Rs);
      Dv(uv, i, t, k, e, Xr.ᐃⵠᐃᐃᐃ, "f", Rs, 0);
      Dv(uv, i, t, k, e, Xr.ΔᐃᐃΔⵠ, "plm", 2, 2);
      Ha = mf.ⲆΔⲆ[ow.ⵠΔⲆⲆΔ];
      aa = 0;
      for (; Ha.length > aa; aa++) {
        Tv(Ha[aa]);
      }
      var Ia = mf.ⲆΔⲆ[ow.ⵠᐃⵠᐃⵠ];
      for (aa = Pg; aa < Ia.length; aa++) {
        Av(Ia[aa], Xr.ⵠᐃⵠᐃⵠ);
      }
      ba = mf.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ];
      aa = 0;
      for (; ba.length > aa; aa++) {
        if ((ca = ba[aa]).ⵠᐃᐃᐃΔⵠΔ === 1 && (ca.ᐃⵠⵠⵠⲆ < 180 || _r.ⲆⵠΔᐃⵠ !== ca.ΔⲆᐃΔΔ && _r.ⲆⲆΔⵠⲆ !== ca.ΔⲆᐃΔΔ && ca.ΔⲆᐃΔΔ !== _r.ⲆⵠΔΔΔ && ca.ΔⲆᐃΔΔ !== _r.ⵠᐃⲆⲆΔ && _r.ΔⵠΔΔⵠ !== ca.ΔⲆᐃΔΔ)) {
          ca.ᐃⵠⵠⵠⵠⵠⵠ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(ca.ᐃⵠⵠⵠⵠⵠⵠ, 100, 0.018);
          ua = Ol + Math.min(1, Math.max(ca.ᐃⵠⵠⵠⵠⵠⵠ, 0) / Ah) * 0.18;
          ho.save();
          ho.scale(ua, ua);
          Xw.ⵠᐃⲆ.x /= ua;
          Xw.ⵠᐃⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ⲆⲆΔⲆΔⲆⲆ();
          ca.ᐃⵠᐃⵠ();
          Xw.ⵠᐃⲆ.x *= ua;
          Xw.ⵠᐃⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          ho.restore();
        }
      }
      var Ja = mf.ⲆΔⲆ[ow.ⲆᐃⵠΔΔ];
      for (aa = 0; Ja.length > aa; aa++) {
        Av(Ja[aa], Xr.ⲆᐃⵠΔΔ);
        Ja[aa].ΔⵠⲆⵠᐃ(Ja[aa].info);
      }
      var Ka = mf.ⲆΔⲆ[ow.ᐃⲆⵠᐃΔ];
      for (aa = 0; aa < Ka.length; aa++) {
        Av(Ka[aa], Xr.ᐃⲆⵠᐃΔ, Xr.ᐃΔᐃΔΔⵠᐃ);
      }
      var La = mf.ⲆΔⲆ[ow.ⵠᐃΔⲆⲆ];
      for (aa = Rs; aa < La.length; aa++) {
        Av(La[aa], Xr.ⵠᐃΔⲆⲆ);
      }
      ba = mf.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ];
      aa = ps;
      for (; aa < ba.length; aa++) {
        if (((ca = ba[aa]).ΔⲆᐃΔΔ === _r.ⲆⵠΔᐃⵠ || ca.ΔⲆᐃΔΔ === _r.ⲆⲆΔⵠⲆ || _r.ⲆⵠΔΔΔ === ca.ΔⲆᐃΔΔ || _r.ⵠᐃⲆⲆΔ === ca.ΔⲆᐃΔΔ || _r.ΔⵠΔΔⵠ === ca.ΔⲆᐃΔΔ) && ca.ᐃⵠⵠⵠⲆ > 180) {
          ca.ⲆⵠᐃⲆΔⲆΔ = Te;
          ho.save();
          ua = 1 + Math.min(1, Math.max(ca.ⵠⵠⲆⲆᐃ - 30, tg) / 180) * 0.35;
          ho.scale(ua, ua);
          Xw.ⵠᐃⲆ.x /= ua;
          Xw.ⵠᐃⲆ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ⲆⲆΔⲆΔⲆⲆ();
          ca.ᐃⵠᐃⵠ();
          Xw.ⵠᐃⲆ.x *= ua;
          Xw.ⵠᐃⲆ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          ho.restore();
        }
      }
      ta = mf.ⲆΔⲆ[ow.ⵠⵠⲆᐃΔ];
      aa = ya;
      for (; aa < ta.length; aa++) {
        if (ta[aa].ⲆⵠᐃⲆΔⲆΔ === 1) {
          Av(ta[aa]);
        }
      }
      K = mf.ⲆΔⲆ[ow.ᐃⵠΔⵠⵠ];
      aa = Pg;
      for (; aa < K.length; aa++) {
        if (K[aa].scale > 1) {
          Av(K[aa], Xr.ᐃⵠΔⵠⵠ, Xr.ⵠⲆⵠᐃⲆⵠᐃ);
        }
      }
      K = mf.ⲆΔⲆ[ow.ᐃΔⲆⲆΔ];
      aa = 0;
      for (; K.length > aa; aa++) {
        if (K[aa].scale > 1) {
          Av(K[aa], Xr.ᐃΔⲆⲆΔ, Xr.ᐃᐃⵠᐃⲆΔΔ);
        }
      }
      var Ma = mf.ⲆΔⲆ[ow.ⵠᐃⲆⲆΔ];
      for (aa = 0; Ma.length > aa; aa++) {
        Av(Ma[aa], Xr.ⵠᐃⲆⲆΔ, Xr.ᐃⲆⲆⵠⲆⵠⲆ);
      }
      var Na = mf.ⲆΔⲆ[ow.ⵠΔⵠᐃⵠ];
      for (aa = Rq; aa < Na.length; aa++) {
        Av(Na[aa], Xr.ⵠΔⵠᐃⵠ, Xr.ⲆⵠⵠᐃΔᐃᐃ);
      }
      if ((ov += Ts * _w) > 60) {
        ov -= 60;
      }
      Dv(pv, i, t, k, e, Xr.ᐃⲆᐃⵠᐃ, "fo", 2);
      Dv(pv, i, t, k, e, Xr.ΔⵠΔⲆⲆ, "fod", 2);
    })();
    if (vf.ⵠⵠᐃⲆᐃ && lw.ΔΔΔΔᐃ !== mf.mode && lw.ⲆⲆⲆⲆᐃ !== mf.mode && mf.mode !== lw.ᐃⲆⵠⲆΔΔᐃ) {
      (function () {
        var a = Xw.ⵠΔⲆᐃⲆ;
        if (a.ᐃⲆⲆΔⵠ === wj) {
          a.ΔⲆⵠᐃΔ = Math.max(gu, a.ΔⲆⵠᐃΔ - _w / kk);
        } else {
          a.ΔⲆⵠᐃΔ = Math.min(xt, a.ΔⲆⵠᐃΔ + _w / Th);
        }
        for (var b = a.ᐃᐃΔΔⲆ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ᐃⲆΔ(d);
          Kv(Xr.ΔⲆⲆⵠΔⵠᐃ, d.id, Xw.ⵠᐃⲆ.x + d.x, Xw.ⵠᐃⲆ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ΔΔᐃΔᐃ <= 0 || -Xw.ⵠᐃⲆ.x + lo < d.x || -Xw.ⵠᐃⲆ.x - Xw.ⵠᐃⲆ.w / dg > d.x || d.y > -Xw.ⵠᐃⲆ.y + jq) {
            b.splice(c, xt);
          }
        }
        var e = -Xw.ⵠᐃⲆ.y;
        if (mf.ΔΔⲆΔⲆ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Xw.ⲆⵠᐃⵠΔ;
        if (a.ᐃⲆⲆΔⵠ === 0) {
          a.ΔⲆⵠᐃΔ = Math.max(0, a.ΔⲆⵠᐃΔ - _w / wa);
        } else {
          a.ΔⲆⵠᐃΔ = Math.min(js, a.ΔⲆⵠᐃΔ + _w / It);
        }
        for (var b = a.ᐃᐃΔΔⲆ, c = Rs; c < b.length; c++) {
          var d = b[c];
          a.ᐃⲆΔ(d);
          Kv(Xr.ⲆⵠⲆΔⵠΔⲆ, d.id, Xw.ⵠᐃⲆ.x + d.x, Xw.ⵠᐃⲆ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ΔΔᐃΔᐃ <= 0 || -Xw.ⵠᐃⲆ.x + lo < d.x || -Xw.ⵠᐃⲆ.x > d.x || d.y > -Xw.ⵠᐃⲆ.y + jq) {
            b.splice(c, 1);
          }
        }
        var e = -Xw.ⵠᐃⲆ.y;
        if (mf.ⲆΔΔΔᐃ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Xw.ⲆᐃⲆΔⵠΔⵠ;
        for (var b = a.ᐃᐃΔΔⲆ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ᐃⲆΔ(d);
          Kv(Xr.ᐃⲆⵠᐃⲆⵠⲆ, d.id, Xw.ⵠᐃⲆ.x + d.x, Xw.ⵠᐃⲆ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ΔΔᐃΔᐃ <= 0 || -Xw.ⵠᐃⲆ.x + lo < d.x || d.x < -Xw.ⵠᐃⲆ.x || -Xw.ⵠᐃⲆ.y + jq < d.y) {
            b.splice(c, js);
          }
        }
        var e = -Xw.ⵠᐃⲆ.y;
        if (mf.ⵠⲆΔᐃⵠ > -1000) {
          a.add(e);
        }
      })();
    }
    if (mf.transition && a) {
      mf.transition = xo;
      mf.ᐃⵠⵠⵠ.ΔΔⲆ = 0;
      mf.ᐃⵠⵠⵠ.ⵠᐃⵠ = wt;
    }
  }
  function Pv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Xw.ⵠᐃⲆ.y + j + 710;
    var l = Math.max(Xw.ⵠᐃⲆ.x + e, 0);
    var g = Math.max(-Xw.ⵠᐃⲆ.x + lo - i - Cn, Da);
    var t = l;
    var b = lo - l - g;
    if (o) {
      var u = q.ⵠⵠⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + lw.ⲆⲆⵠⲆΔ;
    var F = v;
    var m = t;
    var p = -u.x + lw.ΔᐃⲆᐃⲆ;
    var C = b;
    var G = v += -u.x + lw.ΔᐃⲆᐃⲆ + 2;
    if (o) {
      u = q.ⵠⵠⵠ(a);
    } else {
      u = a.r;
    }
    var f = h - lw.ⲆᐃⵠⲆΔ - v - u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f + Yl) - jk;
    if (o) {
      u = q.ⵠⵠⵠ(s);
    } else {
      u = s.r;
    }
    if (v + (f = h - lw.ⲆᐃᐃⵠⲆ - v - u.x) < A) {
      var k = true;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f + 2;
    } else {
      k = false;
      v = A;
      D = -1;
    }
    f = h - lw.ᐃΔΔᐃᐃⵠᐃ - v;
    if (mf.transition) {
      var N = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
    }
    ho.fillRect(m, F, C, p);
    if (o) {
      if (mf.transition) {
        N = mf.time ? yg - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(15, 70, 76, 42, 139, 155, N);
      } else {
        ho.fillStyle = Xr.ⵠᐃⲆΔⲆᐃᐃ[mf.time];
      }
    } else if (mf.transition) {
      N = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
    } else {
      ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
    }
    ho.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (mf.transition) {
          N = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
          ho.fillStyle = Qv(17, 94, 96, 169, 214, 211, N);
        } else {
          ho.fillStyle = Xr.ⵠᐃⵠⲆᐃⵠⲆ[mf.time];
        }
      } else if (mf.transition) {
        N = mf.time ? Ug - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(9, 55, 63, 11, 106, 132, N);
      } else {
        ho.fillStyle = Xr.ᐃⵠΔⲆⲆ[mf.time];
      }
      ho.fillRect(J, L, B, M);
    }
    if (vf.ⵠⵠᐃⲆᐃ && o) {
      q.ⵠΔⵠΔⵠᐃᐃⲆΔ(A, D, G, h, -Xw.ⵠᐃⲆ.x + m, -Xw.ⵠᐃⲆ.x + m + C);
    }
  }
  function Qv(b, c, d, e, f, g, i) {
    var a;
    var j = "#";
    j += (a = Math.floor(i * e + b * (1 - i))) < 16 ? "0" + a.toString(16) : a.toString(Fl);
    j += (a = Math.floor(i * f + c * (qu - i))) < 16 ? "0" + a.toString(Qh) : a.toString(xl);
    return j += (a = Math.floor(g * i + (cu - i) * d)) < 16 ? "0" + a.toString(16) : a.toString(Fo);
  }
  function Rv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Xw.ⵠᐃⲆ.x + f + 820;
    var l = Math.max(Xw.ⵠᐃⲆ.y + e, Bg);
    var g = Math.max(-Xw.ⵠᐃⲆ.y + jq - i - 100, mj);
    var r = l;
    var b = jq - l - g;
    if (n) {
      var s = j.ⵠⵠⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + lw.ⲆⲆⵠⲆΔ;
    lw.ΔᐃⲆᐃⲆ;
    t += -s + lw.ΔᐃⲆᐃⲆ + 2;
    if (n) {
      s = j.ⵠⵠⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h - lw.ⲆᐃⵠⲆΔ - t - s;
    var v = (t += u + 2) - 2;
    if (n) {
      s = j.ⵠⵠⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (v > t + (u = h - lw.ⲆᐃᐃⵠⲆ - t - s)) {
      t += u + 2;
    } else {
      t = v;
    }
    u = h - lw.ᐃΔΔᐃᐃⵠᐃ - t;
    if (n > 0 && k.ᐃⲆΔⲆⵠⲆΔ === 1) {
      if (mf.transition) {
        var p = mf.time ? Oq - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(15, 77, 72, 252, 239, 187, p);
      } else {
        ho.fillStyle = Xr.ᐃⲆᐃⵠⵠΔⲆ[mf.time];
      }
      ho.fillRect(t, r, u, b);
    } else {
      if (mf.transition) {
        p = mf.time ? Ot - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
        ho.fillStyle = Qv(k.ⵠᐃᐃ[Db], k.ⵠᐃᐃ[fl], k.ⵠᐃᐃ[Zg], k.ⵠΔⲆ[ya], k.ⵠΔⲆ[Ot], k.ⵠΔⲆ[jk], p);
      } else {
        ho.fillStyle = k.ᐃΔⵠΔⵠ[mf.time];
      }
      ho.fillRect(t, r, u, b);
    }
  }
  function Sv(b, c, d, e, f) {
    var g = d.width;
    var i = d.height;
    var a = Math.floor(g / Gl);
    var j = Math.floor(i / Hj);
    if (mf.transition) {
      ho.globalAlpha = rg;
      Mm(ho, ΔΔ[b][c][mf.time], 0, 0, g, i, e, f, a, j);
      mf.time = mf.time ? 0 : 1;
      ho.globalAlpha = js - mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      Mm(ho, ΔΔ[b][c][mf.time], Da, Lr, g, i, e, f, a, j);
      mf.time = mf.time ? Bg : Ot;
      ho.globalAlpha = Oq;
    } else {
      Mm(ho, ΔΔ[b][c][mf.time], 0, Db, g, i, e, f, a, j);
    }
  }
  function Tv(a, b) {
    if (mf.transition) {
      ho.globalAlpha = xt;
      a.ᐃΔᐃⵠᐃ(b);
      mf.time = mf.time ? Rs : 1;
      ho.globalAlpha = 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ;
      a.ᐃΔᐃⵠᐃ(b);
      mf.time = mf.time ? Rs : 1;
      ho.globalAlpha = fl;
    } else {
      a.ᐃΔᐃⵠᐃ(b);
    }
  }
  var Uv = Db;
  var Vv = rg;
  var Wv = 2;
  var Xv = Hi;
  var Yv = 1;
  var Zv = Jt;
  function $v(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function _v(f, j, i, k, n, p, q, r, t, w, l, g, u, b, x) {
    if (f.length === Bg) {
      f = " ";
    }
    if (q === undefined) {
      q = Zj;
    }
    if (Ng === r) {
      r = 0;
    }
    if (t === Jg) {
      t = 0;
    }
    if (b === mg) {
      b = Kh;
    }
    var d = document.createElement("canvas");
    var c = d.getContext("2d");
    c.textBaseline = "middle";
    c.font = (x !== Sl ? x + " " : "") + k + "px " + j;
    n = n !== Za ? Math.min(c.measureText(f).width, n) : c.measureText(f).width;
    d.width = n + q;
    d.height = k + r;
    if (p !== cn) {
      if (l !== undefined) {
        c.globalAlpha = l;
      }
      c.fillStyle = p;
      if (rk !== g) {
        ⵠᐃⵠΔⲆΔΔΔΔ(c, t + ih, t, n + q - t * 2 - nj, k + r - t * 2, g);
        c.fill();
      } else {
        c.fillRect(t, t, n + q - t * Mt, k + r - Jt * t);
      }
      c.globalAlpha = Ot;
      if (t !== Rs) {
        c.lineWidth = t;
        c.strokeStyle = w;
        c.stroke();
      }
    }
    c.textBaseline = "middle";
    c.font = (x !== Hs ? x + " " : "") + k + "px " + j;
    if (u !== undefined) {
      c.strokeStyle = u;
      c.lineWidth = b;
      c.lineJoin = "miter";
      c.miterLimit = Zg;
      c.strokeText(f, Math.floor(q / 2), Math.floor(r / H) + Math.floor(k / Zh), n);
    }
    c.fillStyle = i;
    c.fillText(f, Math.floor(q / 2), Math.floor(r / Zg) + Math.floor(k / ss), n);
    d.w2 = d.width / Jt;
    d.ΔΔᐃᐃᐃ = d.height / 2;
    return d;
  }
  function aw(f, e, i, j, k, m, n, a, p, q, t) {
    if (p === lj) {
      p = 0;
    }
    if (rk === a) {
      a = Pg;
    }
    if (q === undefined) {
      q = 0;
    }
    if (t === undefined) {
      t = 1;
    }
    if (m !== lb) {
      m = Bg;
    }
    if (j) {
      var w = j;
    }
    var u;
    var x = {
      width: f,
      height: e,
      ⵠⵠ: w,
      state: Xv,
      translate: {
        x: a,
        y: p,
        ⲆᐃⲆⲆⵠ: a,
        ⲆΔⲆⵠⲆ: p
      },
      ⵠᐃⵠΔΔΔⵠⲆΔ: m,
      ⲆᐃᐃⲆ: ps,
      callback: n,
      position: q,
      active: t
    };
    function v() {
      return x.ⵠⵠ[x.state];
    }
    function d(a) {
      var b = x.translate;
      if (wj === x.width || x.height === 0) {
        x.width = x.ⵠⵠ[0].width;
        x.height = x.ⵠⵠ[0].height;
      }
      return a.x > b.x && a.x < b.x + x.width / k && a.y > b.y && a.y < b.y + x.height / k;
    }
    m = function () {
      var a = Rs;
      if (x.ⵠᐃⵠΔΔΔⵠⲆΔ === 1) {
        if (x.state === Yv || Zv === x.state) {
          x.ⲆᐃᐃⲆ = (x.ⲆᐃᐃⲆ + _w * 1000) % 1000;
        } else if (x.ⲆᐃᐃⲆ > 0) {
          x.ⲆᐃᐃⲆ = x.ⲆᐃᐃⲆ > 500 ? x.ⲆᐃᐃⲆ + _w * 1000 : x.ⲆᐃᐃⲆ - _w * 1000;
          if (x.ⲆᐃᐃⲆ < 0 || x.ⲆᐃᐃⲆ > 1000) {
            x.ⲆᐃᐃⲆ = tt;
          }
        }
        a = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(x.ⲆᐃᐃⲆ > 500 ? (1000 - x.ⲆᐃᐃⲆ) / 500 : x.ⲆᐃᐃⲆ / 500) * 0.2;
      }
      return a;
    };
    if (Nb === (k = k === Jb ? hl : k === 1 ? 2 : 1)) {
      u = function (b) {
        var c = rg + m();
        var d = v();
        var e = x.width * c / Yg;
        var f = x.height * c / 2;
        var g = (e - x.width / xq) / xj;
        var a = (f - x.height / 2) / 2;
        Mm(b, d, x.translate.x - g, x.translate.y - a, e, f);
      };
    } else if (k === qo) {
      u = function (a) {
        var b = v();
        var c = x.width;
        var d = x.height;
        var e = (c - x.width) / Jt;
        var f = (d - x.height) / ih;
        Mm(a, b, x.translate.x - e, x.translate.y - f, c, d);
      };
      k = 1;
    } else {
      u = function (a) {
        Mm(a, v(), x.translate.x, x.translate.y);
      };
    }
    return {
      info: x,
      ⲆⵠᐃΔ: function (a, b, c) {
        if (d(b)) {
          if (c == Vv) {
            x.state = Zv;
          } else if (Wv == c || c == Uv && Zv != x.state) {
            x.state = Yv;
          }
          return true;
        } else {
          x.state = Xv;
          return false;
        }
      },
      ᐃⵠᐃⵠ: u,
      ⲆⵠᐃⲆᐃⵠⲆ: d
    };
  }
  function bw(a, b, c, d, e) {
    var f = {
      x: c,
      y: d,
      ⲆᐃⲆⲆⵠ: c,
      ⲆΔⲆⵠⲆ: d
    };
    return {
      translate: f,
      ᐃⵠᐃⵠ: function (b) {
        Mm(b, a, f.x, f.y, a.width / Yl, a.height / pq);
      },
      active: b,
      position: e
    };
  }
  var cw = "send";
  var dw = ᐃⵠΔⲆ.ΔⲆⵠᐃᐃΔΔ("id") === "1" ? ie : Kh;
  var ew = ᐃⵠΔⲆ.ΔⲆⵠᐃᐃΔΔ("password");
  var fw = ᐃⵠΔⲆ.ΔⲆⵠᐃᐃΔΔ("debug") || Oh;
  if (fw !== undefined) {
    fw = JSON.parse(dj.decodeURIComponent(fw));
  }
  var gw = "starve.io";
  var hw = "https://" + gw;
  var iw = {
    ⵠⵠⵠᐃΔΔⵠ: 32,
    ᐃᐃⵠⵠᐃ: 4,
    IDLE: 64,
    ⲆΔⵠΔᐃΔⲆ: 256,
    ⲆᐃᐃⲆΔΔΔ: 128,
    ⲆⵠⵠΔⲆᐃⲆ: 16,
    ⲆᐃⲆⵠ: 2,
    ⲆΔⲆⵠⵠⵠⲆΔⵠ: 1,
    ᐃᐃⲆΔⲆⵠⲆ: E
  };
  var jw = [{
    ⲆⵠΔΔⲆ: 1000,
    items: [[jk, _r.ΔᐃᐃⲆⲆ], [jh, _r.ΔΔⵠⵠⲆ], [Gk, _r.ⵠᐃⲆⲆⲆ], [1, _r.ⲆⵠΔⲆΔ]]
  }, {
    ⲆⵠΔΔⲆ: 2000,
    items: [[2, _r.ᐃΔΔⵠΔ], [rg, _r.ⲆΔⲆⲆⵠ], [2, _r.ΔΔⵠⵠⲆ], [16, _r.ⵠᐃⲆⲆⲆ], [2, _r.ⲆⵠΔⲆΔ]]
  }, {
    ⲆⵠΔΔⲆ: 4000,
    items: [[3, _r.ᐃΔΔⵠΔ], [rg, _r.ⲆⵠⵠⲆⲆ], [4, _r.ΔΔⵠⵠⲆ], [20, _r.ⵠᐃⲆⲆⲆ], [4, _r.ⲆⵠΔⲆΔ], [1, _r.ⵠⲆΔⵠᐃ], [80, _r.ᐃΔⵠⲆ], [140, _r.ⵠᐃⵠⵠ]]
  }, {
    ⲆⵠΔΔⲆ: 8000,
    items: [[xt, _r.ⵠⲆᐃᐃ], [4, _r.ᐃΔΔⵠΔ], [1, _r.ⵠᐃⲆΔΔ], [6, _r.ΔΔⵠⵠⲆ], [30, _r.ⵠᐃⲆⲆⲆ], [_l, _r.ⲆⵠΔⲆΔ], [1, _r.ⵠⲆΔⵠᐃ], [150, _r.ᐃΔⵠⲆ], [200, _r.ⵠᐃⵠⵠ], [60, _r.ᐃⲆⵠᐃ], [jk, _r.ΔᐃᐃⵠΔ]]
  }, {
    ⲆⵠΔΔⲆ: 16000,
    items: [[1, _r.ⵠⲆᐃᐃ], [Xn, _r.ᐃⲆⵠΔⲆ], [cu, _r.ΔⲆⵠΔΔ], [7, _r.ⵠᐃⲆⲆᐃ], [2, _r.ΔᐃᐃⵠΔ], [2, _r.ᐃΔΔⵠΔ], [yg, _r.ⲆᐃΔᐃⵠ], [v, _r.ΔᐃⵠⲆⲆ], [Jt, _r.ⵠΔᐃⲆΔ], [1, _r.ⲆⵠᐃᐃΔ], [1, _r.ᐃⵠᐃΔⵠ], [200, _r.ᐃΔⵠⲆ], [300, _r.ⵠᐃⵠⵠ]]
  }, {
    ⲆⵠΔΔⲆ: 16000,
    items: [[Te, _r.ⵠⲆᐃᐃ], [cu, _r.ᐃⵠⵠⵠΔ], [cu, _r.ⲆΔΔⵠⵠ], [1, _r.ⵠᐃⲆΔΔ], [kk, _r.ⵠᐃⲆⲆᐃ], [Og, _r.ΔᐃᐃⵠΔ], [Na, _r.ᐃΔΔⵠΔ], [3, _r.ᐃΔᐃⲆᐃ], [mk, _r.ᐃⵠΔΔⲆ], [200, _r.ᐃΔⵠⲆ], [300, _r.ⵠᐃⵠⵠ]]
  }, {
    ⲆⵠΔΔⲆ: 16000,
    items: [[1, _r.ⵠⲆᐃᐃ], [js, _r.ⲆΔⵠⵠᐃ], [1, _r.ⲆⲆⵠⲆⲆ], [3, _r.ᐃΔᐃⲆᐃ], [1, wj], [rg, _r.ⵠᐃⲆΔΔ], [ur, _r.ⵠᐃⲆⲆᐃ], [2, _r.ΔᐃᐃⵠΔ], [4, _r.ᐃΔΔⵠΔ], [150, _r.ᐃΔⵠⲆ], [200, _r.ⵠᐃⵠⵠ], [1, _r.ᐃⵠᐃⲆⵠ]]
  }, {
    ⲆⵠΔΔⲆ: 16000,
    items: [[1, _r.ⵠⲆᐃᐃ], [1, _r.ΔᐃⲆⵠⵠ], [cu, _r.ⵠᐃⲆΔΔ], [zg, _r.ⵠᐃⲆⲆᐃ], [Hj, _r.ΔᐃᐃⵠΔ], [4, _r.ᐃΔΔⵠΔ], [2, _r.ⵠΔⲆⲆΔ], [ba, _r.Δᐃᐃᐃᐃ], [Wb, _r.ΔΔΔⵠⵠ], [6, _r.ⲆΔᐃΔΔ], [$i, _r.ⵠᐃΔⲆᐃ], [1, _r.ᐃᐃΔⵠΔ], [500, _r.ⵠᐃⵠⵠ]]
  }, {
    ⲆⵠΔΔⲆ: 16000,
    items: [[1, _r.ⵠⲆᐃᐃ], [mk, _r.ⵠᐃⲆΔΔ], [cg, _r.ⵠⲆΔⲆᐃ], [1, _r.ΔᐃᐃⵠΔ], [ji, _r.ᐃΔΔⵠΔ], [yr, _r.ᐃΔᐃⲆᐃ], [1, _r.ᐃⲆⵠⲆⲆ], [1, _r.ᐃᐃⲆΔⲆ], [16, _r.ⲆᐃⲆᐃⵠ], [150, _r.ᐃΔⵠⲆ], [200, _r.ⵠᐃⵠⵠ]]
  }, {
    ⲆⵠΔΔⲆ: 20000,
    items: [[Ug, _r.ⵠⲆᐃᐃ], [1, _r.ⵠᐃⲆΔΔ], [Ot, _r.ⵠᐃⲆⲆᐃ], [cu, _r.ΔᐃᐃⵠΔ], [Hk, _r.ᐃΔΔⵠΔ], [Jb, _r.ᐃΔᐃⲆᐃ], [Xn, _r.ΔᐃΔⲆⲆ], [Oq, _r.ⵠΔΔΔΔ], [mk, _r.ᐃᐃᐃᐃⲆ], [Yl, _r.Ⲇᐃⵠᐃⵠ], [50, _r.ᐃΔⵠⲆ], [Y, _r.ⵠᐃⵠⵠ]]
  }];
  var kw = {
    ΔᐃΔΔΔⲆⲆ: ci,
    ⲆᐃⲆⲆΔⲆⵠᐃᐃ: 14,
    ᐃⲆΔⵠᐃⵠⵠ: 4,
    ΔⵠⵠⵠᐃΔⵠⵠΔ: 200,
    ⵠΔΔΔⲆⵠⲆᐃⲆ: 2000,
    ⵠⵠⵠⲆᐃΔⲆⲆΔ: 0.58,
    ΔⲆᐃⵠⵠΔⵠᐃᐃ: "[" + fh + "]",
    ΔᐃΔᐃⲆΔᐃⲆᐃ: 26,
    ΔᐃᐃᐃⲆⵠᐃᐃΔ: 50,
    ᐃᐃΔΔΔΔᐃⵠᐃ: hl,
    ⲆᐃⲆΔΔΔΔⵠΔ: 15,
    ⲆⵠⵠΔⲆᐃⲆ: 0.2,
    ᐃⵠᐃⲆΔΔⵠ: pq,
    ᐃⲆᐃⲆⵠⵠΔ: Db,
    ΔⵠΔⲆⲆᐃΔΔⲆ: 8000,
    ⲆⵠⲆⲆⲆΔΔⵠΔ: 60000,
    ᐃⲆⲆᐃⵠⵠΔᐃᐃ: 5,
    ΔΔΔⲆⲆᐃᐃΔⵠ: 14,
    ⲆᐃⲆⵠⲆΔΔ: 0.2,
    ⲆᐃⵠᐃⲆᐃⵠ: 600000,
    ᐃⵠⵠΔⵠⲆΔ: 52,
    ⵠᐃᐃⲆΔᐃⵠΔΔ: 125000,
    ⵠᐃᐃⵠᐃΔΔ: 1,
    ⵠΔᐃⵠΔΔΔᐃⵠ: 20,
    ⲆΔⲆΔⵠⵠᐃ: fs
  };
  var lw = {
    ⲆᐃΔ: 480000,
    ⲆᐃΔᐃⵠⲆⵠ: 10,
    ⲆᐃΔᐃΔᐃΔ: 16,
    ᐃⲆΔⲆᐃⵠⵠⲆΔ: 16 - gg,
    ᐃⲆᐃⲆᐃᐃⵠ: 60,
    ⵠᐃⵠⵠⲆ: Ol,
    ΔᐃᐃⲆΔ: pq,
    ᐃᐃⲆᐃΔ: 4,
    ⲆΔΔⵠΔ: wh,
    ⲆᐃⲆⵠⲆΔΔ: Zk,
    ᐃᐃΔᐃⵠΔⲆ: Ak,
    ΔΔⵠᐃΔⵠᐃ: os,
    ⵠᐃⲆᐃⲆᐃᐃ: dh,
    ᐃΔⵠⵠⲆΔΔⵠⵠ: 100,
    ΔⵠⵠⵠᐃΔᐃ: Ah,
    ᐃᐃΔⵠᐃᐃᐃ: 100,
    ⵠΔΔⵠΔΔⵠⲆⵠ: 100,
    ᐃᐃΔⵠᐃᐃᐃ: 100,
    ⲆⵠᐃⲆⲆΔⲆ: Nn,
    ⲆⲆⲆᐃⵠΔΔ: dh,
    ⵠᐃᐃⲆⲆ: Rs,
    ⲆⵠⲆⵠⲆⲆⵠ: Ug,
    ΔΔΔΔᐃ: Yg,
    ᐃᐃⲆΔⵠ: Jb,
    ⲆⲆⲆⲆᐃ: Og,
    ᐃⲆⵠⲆΔΔᐃ: 5,
    ⵠΔⲆᐃⵠ: 6,
    ⵠΔᐃᐃⲆ: 7,
    ΔΔⲆΔᐃⵠⵠⵠΔ: {
      sydney: "Sydney",
      frankfurt: "Frankfurt",
      osaka: "Osaka",
      atlanta: "Atlanta",
      losangeles: "Los Angeles"
    },
    ΔᐃⲆᐃⵠⵠᐃ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ΔⵠⲆΔⵠᐃⲆ: 0,
    ⵠⲆⵠⲆⵠⲆᐃ: Db,
    ⵠΔΔⲆᐃⲆᐃ: 30,
    ᐃᐃⲆⵠΔⵠⵠⲆⲆ: xj,
    ᐃⲆᐃⲆᐃᐃⵠ: 60000,
    ΔᐃΔⵠⲆⲆᐃᐃⲆ: 0,
    ⵠⲆⲆᐃΔⲆᐃⵠΔ: Pg,
    ᐃᐃᐃⵠⲆⵠᐃⵠᐃ: 50,
    ⵠΔΔⲆᐃⲆΔⵠⵠ: In,
    ⲆⲆⲆⵠⲆⲆΔⵠⲆ: 40,
    ⲆⵠⲆᐃΔᐃⵠⲆΔ: 39,
    ᐃᐃⲆⲆΔⲆΔⵠᐃ: 830,
    ⵠⲆⵠⵠᐃΔᐃ: 25,
    ΔⲆΔΔⵠΔᐃ: Ml,
    ΔᐃⲆᐃⲆ: 0,
    ⲆⲆⵠⲆΔ: zl,
    ΔⵠΔΔᐃΔⵠ: 200,
    ⲆⵠΔᐃⲆⲆΔ: 0,
    ⲆᐃⵠⲆΔ: 250,
    ⵠⵠⲆᐃΔΔᐃ: 150,
    ⵠⵠΔⲆⵠΔΔ: 0,
    ⲆᐃᐃⵠⲆ: 350,
    ⲆⵠⵠΔᐃᐃⵠ: 100,
    ᐃΔΔᐃᐃⵠᐃ: 700,
    ⵠᐃΔⲆᐃ: 39879
  };
  var mw = [];
  for (Gt = Lr; Gt < 500; Gt++) {
    mw[Gt] = 0;
  }
  mw[Xr.ᐃⵠⵠⲆΔ] = js;
  mw[Xr.ΔⵠᐃΔᐃ] = 1;
  mw[Xr.ᐃᐃⲆΔⲆ] = lb;
  mw[Xr.ⵠΔΔΔΔ] = 1;
  mw[Xr.ᐃΔⲆᐃΔ] = hd;
  mw[Xr.ΔⲆᐃⵠΔ] = 1;
  mw[Xr.ⵠⵠΔΔⵠ] = 1;
  mw[Xr.ⵠΔᐃᐃⵠ] = 1;
  mw[Xr.ⵠᐃᐃΔⵠ] = fl;
  mw[Xr.ⲆⲆᐃᐃⲆ] = Te;
  mw[Xr.ⵠΔᐃⵠᐃ] = mk;
  mw[Xr.ⵠᐃᐃⵠΔ] = Ot;
  mw[Xr.ᐃᐃᐃᐃⲆ] = za;
  mw[Xr.ᐃΔⵠⲆᐃ] = fl;
  mw[Xr.ᐃΔⲆⵠΔ] = 1;
  mw[Xr.ⲆⲆΔᐃᐃ] = 1;
  mw[Xr.ΔⲆᐃΔⵠ] = 1;
  mw[Xr.ᐃᐃΔⲆⲆ] = fl;
  mw[Xr.Ⲇᐃᐃᐃᐃ] = 1;
  var nw = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: Dt * 480000
  }, {
    time: 1440000
  }, {
    time: zj * 60000 * Na
  }, {
    time: Bi * 60000 * Eg
  }, {
    time: 2400000
  }, {
    time: Bi * 60000 * 10
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: Iq * 60000 * 6
  }, {
    time: 3840000
  }, {
    time: ur * 480000
  }];
  var ow = {
    ⵠᐃⵠᐃⵠ: 56,
    ΔⵠⵠΔΔ: 46,
    ΔⲆⵠΔΔ: 41,
    ᐃⲆΔᐃⲆ: 45,
    ⵠⲆⲆⵠΔⲆⵠ: 83,
    ΔΔⵠⲆⲆ: 77,
    ⲆⵠⲆⵠⵠ: 35,
    ⵠⵠΔⵠⲆ: Qr,
    ᐃᐃⲆⲆⲆ: ps,
    ⲆⲆΔⲆⵠ: 39,
    ᐃⵠⵠⲆᐃ: 50,
    ⵠΔⵠΔⵠᐃⵠ: 85,
    ⲆⲆᐃⲆᐃ: 66,
    ⲆᐃΔᐃⵠ: hr,
    ⲆΔᐃΔΔ: 31,
    ᐃⵠᐃᐃⵠ: 37,
    ⲆⵠⲆᐃⵠ: 62,
    ΔⵠⵠⲆᐃ: 10,
    ⲆΔᐃⵠⲆ: 25,
    ⲆⲆⵠⵠᐃ: 22,
    ⵠⵠᐃΔⲆᐃΔ: 76,
    ⲆⵠᐃΔΔ: Do,
    ᐃⵠⵠᐃⵠ: 71,
    ⵠⵠⲆᐃΔ: 91,
    ⵠΔᐃⲆΔ: qs,
    ⲆⲆⵠⵠΔ: 28,
    ⵠᐃΔΔΔⵠΔ: 89,
    ᐃΔᐃⵠΔ: 70,
    ⲆᐃⲆᐃⵠ: 30,
    Δⵠᐃⵠᐃ: 21,
    ΔΔⲆᐃⲆ: 47,
    ⵠΔΔⵠΔᐃΔ: 82,
    ⵠᐃΔⲆᐃ: qo,
    ⲆᐃΔⲆⵠ: 24,
    ⵠᐃΔⲆⲆ: 42,
    Ⲇᐃⵠᐃⵠ: 13,
    ᐃⲆⵠᐃΔ: 90,
    ᐃΔΔⵠΔ: Cl,
    ⵠⵠⵠⲆΔ: Ak,
    ⲆⲆᐃⲆⵠ: 65,
    ⲆⲆⲆⲆⵠ: Al,
    ΔⵠΔⲆΔ: 48,
    ΔᐃᐃⲆⲆ: 1,
    ⵠΔᐃΔΔ: 17,
    ΔⵠᐃⲆⵠ: 26,
    ⵠΔⲆⵠᐃ: 49,
    ᐃⲆⲆᐃΔ: 40,
    Δⵠᐃᐃⵠ: 86,
    ⲆⲆΔⵠⲆ: 73,
    Δᐃᐃᐃᐃ: 34,
    ⵠⵠⲆⵠΔ: 80,
    ⵠⲆⲆᐃΔ: 63,
    ⵠⲆᐃᐃⲆ: 52,
    ᐃⵠΔⵠⵠ: 64,
    ᐃⲆⵠᐃᐃ: 20,
    ⵠⵠⵠⵠⲆ: 67,
    ΔⵠⵠΔⲆ: 55,
    ᐃΔⵠⵠⵠ: 16,
    ΔΔΔΔΔ: 87,
    ⵠᐃⲆᐃⵠ: Lt,
    ΔⲆΔΔⲆ: 23,
    ⲆⵠⵠΔⲆ: 68,
    ⵠΔΔⲆᐃ: 81,
    Ⲇᐃⵠⵠⵠ: 51,
    ⵠⲆΔⵠᐃ: lr,
    ⵠⲆⵠΔⲆⵠⵠ: 84,
    ᐃⲆⲆⲆⲆ: Bt,
    ⵠᐃⲆⲆΔ: 74,
    ᐃⵠΔΔΔ: 43,
    ΔᐃⵠⲆⲆ: 7,
    ᐃΔΔⵠᐃ: 53,
    ⵠΔⲆⲆΔ: 32,
    ᐃΔⲆⲆⲆ: 78,
    ⵠΔⵠᐃⵠ: 75,
    ᐃΔⲆⲆΔ: 69,
    ΔⲆⵠⵠⵠ: 27,
    ⲆⵠᐃᐃΔ: 29,
    ᐃΔⵠⵠΔ: 19,
    ⲆᐃᐃⲆⵠ: 88,
    ⲆᐃⵠΔΔ: 38,
    ΔΔΔⵠⵠ: 33,
    ⲆΔⲆⵠΔ: 54,
    ⲆⵠΔᐃⵠ: 72,
    ⵠΔᐃᐃᐃ: 36,
    ⵠΔᐃΔⵠ: 61,
    ⲆᐃⲆΔΔ: Ka,
    ᐃⲆᐃⲆΔ: 79,
    ΔⵠΔⵠⲆ: 60,
    ⲆⵠΔᐃᐃ: 44,
    ᐃᐃᐃᐃᐃ: aa
  };
  var pw = [[ow.ⲆᐃΔⲆⵠ, _r.ᐃΔⵠⲆ], [ow.ⲆΔᐃⵠⲆ, _r.ᐃⲆⵠᐃ], [ow.ΔⵠᐃⲆⵠ, _r.ᐃⲆΔⵠ], [ow.ΔⲆⵠⵠⵠ, _r.Ⲇⵠⵠⵠ], [ow.ⲆⲆⵠⵠΔ, _r.ᐃⵠᐃΔ]];
  function qw(a, b, c, d) {
    this.id = a;
    this.ᐃⵠⵠⵠⲆ = (a + 5) * aa;
    this.ΔΔᐃΔᐃ = lo / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ⵠⵠΔⵠ = Math.cos(d);
    this.alpha = gu;
  }
  function rw(b, c, d, e, i, j, k, a, m, h) {
    this.type = b;
    this.Ⲇⵠⵠᐃ = c;
    this.id = d;
    this.x = e;
    this.y = i;
    this.angle = j;
    this.ᐃⲆΔⵠⵠΔⵠ = j;
    this.action = k;
    this.info = a;
    this.ⵠᐃᐃⵠⵠ = h;
    this.r = {
      x: e,
      y: i
    };
    this.ᐃⵠⵠⵠⲆ = m;
    if (mf) {
      this.ᐃⲆᐃᐃ = mf.ΔᐃⵠᐃⲆΔΔ * c + d;
    }
    switch (b) {
      case ow.ᐃᐃⲆⲆⲆ:
        this.ⲆᐃΔⲆ = mf.ⵠΔΔⲆ[this.Ⲇⵠⵠᐃ];
        this.ΔⵠΔᐃ = this.ⲆᐃΔⲆ.ΔⵠΔᐃ;
        this.ⲆⵠᐃΔⲆⲆⲆ = this.ⲆᐃΔⲆ.ⲆⵠᐃΔⲆⲆⲆ;
        this.ᐃΔⲆⵠⲆ = this.ⲆᐃΔⲆ.ᐃΔⲆⵠⲆ;
        this.ΔⵠΔᐃᐃ = this.ⲆᐃΔⲆ.ΔⵠΔᐃᐃ;
        this.ΔΔᐃᐃΔⵠᐃ = -1000000;
        this.ⵠⲆΔᐃⵠ = -1000000;
        this.ⲆΔΔΔᐃ = -1000000;
        this.ΔΔⲆΔⲆ = -1000000;
        this.ΔⵠᐃⲆᐃⲆⵠ = -1000000;
        this.ⲆᐃⵠⵠⵠΔΔ = -1000000;
        this.ΔΔᐃΔⵠ = -1000000;
        this.ⲆᐃⲆⵠᐃ = mf.mode === lw.ΔΔΔΔᐃ && lw.ΔⵠⲆΔⵠᐃⲆ === this.ΔⵠΔᐃ && ye;
        this.ΔΔⵠⵠⲆᐃᐃ = mf.mode === lw.ᐃᐃⲆΔⵠ && this.ΔⵠΔᐃ === lw.ⵠⲆⵠⲆⵠⲆᐃ ? qn : Ta;
        this.ⲆΔⲆⵠⵠⲆᐃ = this.ⲆᐃⲆⵠᐃ && this.ⲆᐃΔⲆ.ⲆⲆΔⵠᐃ === "  " ? Kj : uh;
        this.ΔⵠⵠΔᐃ = [];
        this.ⵠᐃᐃᐃΔⵠΔ = tt;
        this.ⵠⲆΔΔ = xh;
        this.ᐃΔΔᐃⵠⵠⲆ = 0;
        this.ⲆⵠᐃⲆΔⲆΔ = Rs;
        this.ᐃΔᐃⵠⲆ = [];
        this.r = {
          x: e,
          y: i
        };
        this.ᐃⵠᐃⵠ = kv;
        this.ⲆⲆΔⲆΔⲆⲆ = hv;
        this.ⵠᐃᐃᐃⲆ = 0;
        this.ⲆΔΔΔⵠ = In;
        this.ⵠΔᐃⵠⵠ = gu;
        this.ᐃⲆⵠᐃⵠᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 0, -Math.PI / Cl, 0.5, 1);
        this.ⵠⵠⲆⲆᐃ = Lr;
        this.ᐃⵠⵠⵠⵠⵠⵠ = zl;
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, 0.6, 0.6, tg, 5, 3);
        this.ⵠᐃᐃᐃⵠ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 0.6, 0.6, wj, tb, 3);
        this.freeze = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, Rq, ll, 3);
        this.ᐃⵠⲆⲆᐃⲆᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, z, nq);
        this.ᐃᐃⵠⲆⵠⵠⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(true, Kh, 2.25, -1.5, 3.75, 7.5);
        this.ΔⲆΔⵠⲆᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(true, 0, 7.5, -Tr, 22.5, 33.75);
        this.attack = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, In, 0, -Math.PI / Jb, 6, 9);
        this.ⲆⵠΔⲆⵠΔⲆᐃⲆ = Rq;
        this.ΔΔⵠᐃⵠⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, Bg, 1, 3);
        this.ΔΔⲆⵠⲆᐃΔ = this.ⲆΔⲆⵠⵠⲆᐃ ? new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(true, 0, 2.25, -1.5, 2.75, 5.5) : Kh;
        this.ⵠᐃᐃⲆⵠᐃΔ = 0;
        this.ⵠΔᐃᐃᐃⵠΔ = 0;
        this.ΔⲆⲆⲆΔΔⵠ = [];
        this.ᐃⲆⲆⲆΔΔⵠ = [];
        this.text = [];
        this.label = [];
        this.Ⲇⵠᐃⵠᐃⵠᐃ = jv;
        this.ⵠⲆᐃΔⲆ = true;
        this.right = -Ot;
        this.ΔⲆᐃΔΔ = -js;
        this.action = iw.IDLE;
        this.ΔΔⲆⵠⵠΔΔ = sl;
        this.ⵠΔⵠⲆᐃ = 0;
        this.ᐃⲆᐃⲆⵠ = ot;
        this.bubbles = [];
        this.ᐃⵠΔⲆᐃ = 0;
        this.ᐃⵠΔᐃⵠ = -yg;
        this.ᐃⲆΔ = function (a) {
          if (this.info & 32768) {
            this.ΔΔⲆⵠⵠΔΔ = ye;
            this.info = this.info & -32769;
          } else {
            this.ΔΔⲆⵠⵠΔΔ = Rh;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ᐃⵠΔⲆᐃ = 1;
          } else {
            this.ᐃⵠΔⲆᐃ = In;
          }
          this.ⵠΔⵠⲆᐃ = Math.floor(this.info / 128);
          this.info -= this.ⵠΔⵠⲆᐃ * 128;
          if (this.info === _r.ΔᐃΔΔΔ || this.ⲆΔⲆⵠⵠⲆᐃ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ⵠᐃᐃᐃΔⵠΔ = mf.ⲆⲆⲆΔⵠⵠΔΔᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / il));
          this.ΔⲆᐃΔΔ = this.ⵠᐃᐃⵠⵠ & 255;
          if (lw.ᐃᐃⲆⵠΔⵠⵠⲆⲆ === this.right) {
            this.ᐃⲆᐃⲆⵠ = y;
          } else {
            this.ᐃⲆᐃⲆⵠ = false;
          }
          if (mw[this.right]) {
            this.ⲆᐃᐃᐃⲆ = xh;
          } else {
            this.ⲆᐃᐃᐃⲆ = ts;
          }
          if (a & iw.ⲆΔⵠΔᐃΔⲆ) {
            this.ΔΔⵠᐃⵠⲆⲆ.ⵠᐃⵠ = false;
            this.ΔΔⵠᐃⵠⲆⲆ.ΔΔⲆ = 0.6;
          } else if (a & iw.ᐃᐃⵠⵠᐃ) {
            this.freeze.ⵠᐃⵠ = sl;
            this.freeze.ΔΔⲆ = 0.6;
          } else if (a & iw.ⲆᐃᐃⲆΔΔΔ) {
            this.ⵠᐃᐃᐃⵠ.ⵠᐃⵠ = Fh;
            this.ⵠᐃᐃᐃⵠ.ΔΔⲆ = 0.6;
          }
          if (a & iw.ᐃᐃⲆΔⲆⵠⲆ) {
            this.ᐃⵠⲆⲆᐃⲆᐃ.ⵠᐃⵠ = false;
            this.ᐃⵠⲆⲆᐃⲆᐃ.ΔΔⲆ = 0.6;
          }
          if (a & iw.ⲆᐃⲆⵠ) {
            this.ᐃⲆⲆ.ⵠᐃⵠ = Rh;
            this.ᐃⲆⲆ.ΔΔⲆ = 0.6;
          }
          if (a & iw.ⲆⵠⵠΔⲆᐃⲆ) {
            this.ⲆⵠΔⲆⵠΔⲆᐃⲆ = kw.ⵠⵠⵠⲆᐃΔⲆⲆΔ;
            if ($w.ⲆᐃⵠⲆⵠ && this.ᐃⵠΔᐃⵠ !== -hs) {
              $w.ⵠΔΔⲆ[this.ᐃⵠΔᐃⵠ].ΔⲆΔⵠᐃⲆⵠⵠᐃ(of[this.right]);
            }
          }
        };
        this.ᐃⲆΔ();
        break;
      case ow.ΔⲆΔΔⲆ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
          ᐃⲆΔ: false,
          angle: gu
        };
        this.ⲆᐃⲆⲆᐃ = Vu;
        this.ᐃΔᐃⵠᐃ = Tu;
        this.ᐃᐃⵠᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(_g, ie, 1.23, 1.18, 0.01, 0.01);
        this.ᐃⲆᐃΔᐃⲆᐃ = Da;
        this.ⵠΔⵠᐃΔΔΔ = 0;
        this.ΔⵠⲆⵠᐃ = vp;
        break;
      case ow.ⲆⲆⵠⵠᐃ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(f, Ot, 1, ps, Wb, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ⲆᐃⲆⲆᐃ = Sp;
        this.ᐃΔᐃⵠᐃ = jp;
        this.ᐃᐃⵠᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ll, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃⲆᐃΔᐃⲆᐃ = 0;
        this.ⵠΔⵠᐃΔΔΔ = 0;
        break;
      case ow.ΔᐃᐃⲆⲆ:
      case ow.ᐃΔΔⵠΔ:
        this.ⲆᐃⲆⲆᐃ = bv;
        this.ᐃΔᐃⵠᐃ = yp;
        this.ᐃⲆΔΔᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, lb, 1.03, 0.98, 0.3, 0.3);
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃᐃⵠᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, Ug, 1, Lr, 10, Bo),
          ᐃⲆΔ: sl,
          angle: 0
        };
        break;
      case ow.ᐃⵠΔΔΔ:
        this.ⲆᐃⲆⲆᐃ = mp;
        this.ᐃΔᐃⵠᐃ = Np;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ei, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Jn, 1, 1, Db, yl, 10),
          ᐃⲆΔ: false,
          angle: Rq
        };
        this.Δᐃⵠⵠ = [];
        for (var l = Eh; l < 3; l++) {
          this.Δᐃⵠⵠ.push({
            ᐃⵠᐃⵠ: kp,
            ⲆᐃᐃⲆ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Fh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.Δᐃⵠⵠ[0].x = this.x - 16.5;
        this.Δᐃⵠⵠ[0].y = this.y - 15.5;
        this.Δᐃⵠⵠ[Hi].angle = this.angle;
        this.Δᐃⵠⵠ[1].x = this.x + 36;
        this.Δᐃⵠⵠ[1].y = this.y + 17;
        this.Δᐃⵠⵠ[1].angle = this.angle;
        this.Δᐃⵠⵠ[Nb].x = this.x - 18.5;
        this.Δᐃⵠⵠ[2].y = this.y + 39;
        this.Δᐃⵠⵠ[Zg].angle = this.angle;
        break;
      case ow.ⵠᐃΔⲆᐃ:
        this.ⲆᐃⲆⲆᐃ = Gp;
        this.ᐃΔᐃⵠᐃ = Ep;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, Ol, 0, 10, gg),
          ᐃⲆΔ: false,
          angle: Zj
        };
        this.Δᐃⵠⵠ = [];
        for (l = 0; l < 3; l++) {
          this.Δᐃⵠⵠ.push({
            ᐃⵠᐃⵠ: Vp,
            ⲆᐃᐃⲆ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(C, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.Δᐃⵠⵠ[0].x = this.x - 16.5;
        this.Δᐃⵠⵠ[0].y = this.y - 15.5;
        this.Δᐃⵠⵠ[cu].x = this.x - 5.5;
        this.Δᐃⵠⵠ[js].y = this.y + 7.5;
        this.Δᐃⵠⵠ[2].x = this.x + Pj;
        this.Δᐃⵠⵠ[2].y = this.y - Wl;
        break;
      case ow.ΔΔⵠⲆⲆ:
        this.ᐃⵠᐃⵠ = _u;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(C, 0.6, 0.6, Kh, 5, 3);
        break;
      case ow.ᐃΔᐃⵠΔ:
        this.ᐃⵠᐃⵠ = Wp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Jn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, In, pb, 3);
        break;
      case ow.ᐃⵠⵠᐃⵠ:
        this.ᐃⵠᐃⵠ = cv;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(wt, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆΔⲆⲆᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⲆΔⵠΔᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(kg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, Ob);
        this.ⵠᐃᐃᐃⵠ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, ci);
        break;
      case ow.ⵠⵠⵠⵠⲆ:
        this.ᐃⵠᐃⵠ = xp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆΔⲆⲆᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(xo, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⲆΔⵠΔᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ts, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, Eg, 3);
        this.ⵠᐃᐃᐃⵠ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, tt, 5, Wg);
        break;
      case ow.ⲆⵠⵠΔⲆ:
        this.ᐃⵠᐃⵠ = Zp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, M, 3);
        break;
      case ow.ᐃⲆⵠᐃΔ:
        this.ᐃⵠᐃⵠ = Lp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(wt, 0.6, 0.6, Db, Qr, fn);
        break;
      case ow.ⵠⵠⲆᐃΔ:
        this.ⲆⵠⵠΔⵠ = this.info & 15;
        this.ⲆⵠᐃⲆΔⲆΔ = this.ⵠᐃᐃⵠⵠ & ie;
        this.ᐃⵠΔΔΔᐃⲆ = 0;
        this.x = this.info;
        this.y = this.ⵠᐃᐃⵠⵠ;
        this.ᐃⵠᐃⵠ = Rp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case ow.ⵠⵠⲆⵠΔ:
      case ow.ΔⵠΔⵠⲆ:
      case ow.ⵠΔᐃΔⵠ:
      case ow.ⲆⵠⲆᐃⵠ:
      case ow.ⵠⲆⲆᐃΔ:
      case ow.ᐃΔⲆⲆⲆ:
      case ow.ⲆⲆᐃⲆⵠ:
      case ow.ⲆⲆᐃⲆᐃ:
      case ow.ⲆᐃᐃⲆⵠ:
        this.ᐃⵠᐃⵠ = Lp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ts, 0.6, 0.6, 0, 5, 3);
        break;
      case ow.ⵠΔᐃᐃᐃ:
        this.ᐃⵠᐃⵠ = Uu;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, Ot, 1, 0, gg, 10),
          ᐃⲆΔ: dr,
          angle: 0
        };
        break;
      case ow.Δᐃᐃᐃᐃ:
        this.ᐃΔᐃⵠᐃ = av;
        this.ᐃⵠᐃⵠ = pp;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, Ds),
          ᐃⲆΔ: f,
          angle: 0
        };
        this.up = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1.03, 0.98, 0.1, 0.1);
        this.ⲆⲆⵠᐃⲆ = [];
        break;
      case ow.ΔΔΔΔΔ:
        this.angle = Math.random() * Math.PI / Hj;
      case ow.Δⵠᐃᐃⵠ:
      case ow.ⵠΔΔⵠΔᐃΔ:
        this.ᐃⵠᐃⵠ = Fp;
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, 0.6, 0.6, 0, 5, 3);
        break;
      case ow.ⵠΔΔⲆᐃ:
        this.ᐃⵠᐃⵠ = Wu;
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ta, 0.6, 0.6, 0, 5, qo);
        break;
      case ow.ᐃΔⲆⲆΔ:
        this.scale = 1;
        this.ᐃⵠᐃⵠ = Pp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(wt, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 0, Lr, -Math.PI / Na, 0.5, mk);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, zl, 5, 3);
        break;
      case ow.ⵠⵠᐃΔⲆᐃΔ:
        this.ⵠⲆΔⲆⲆ = 0;
        this.ᐃᐃᐃᐃ = [];
        this.ⵠΔⲆΔᐃᐃⵠ = Db;
        this.ΔⲆⵠⲆⲆⵠⲆ = Bp;
        this.ᐃⵠᐃⵠ = Kp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 0, -Math.PI / fh, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, Hi, 5, 3);
        break;
      case ow.ⵠΔⵠᐃⵠ:
        this.x = this.info;
        this.y = this.ⵠᐃᐃⵠⵠ;
        this.scale = cu;
        this.ⲆⲆⵠᐃ = 0;
        this.ᐃⵠᐃⵠ = ev;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(_g, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(_g, 0, Bg, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, 0.6, 0.6, ya, ll, Ut);
        break;
      case ow.ⵠᐃⲆⲆΔ:
        this.x = this.info;
        this.y = this.ⵠᐃᐃⵠⵠ;
        this.scale = 1;
        this.ⲆⲆⵠᐃ = 0;
        this.ᐃⵠᐃⵠ = Yp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ta, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ei, Db, Da, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case ow.ⲆⲆΔⵠⲆ:
        this.scale = 1;
        this.ᐃⵠᐃⵠ = zp;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ta, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, ll, Ut);
        break;
      case ow.ⲆⵠΔᐃⵠ:
        this.scale = qu;
        this.ᐃⵠᐃⵠ = Ap;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, Gs, vt);
        break;
      case ow.ᐃⵠΔⵠⵠ:
        this.scale = za;
        this.ᐃⵠᐃⵠ = Up;
        this.ⲆᐃᐃⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⲆ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(uh, 0.6, 0.6, wj, 5, Ks);
        break;
      case ow.ⵠⵠⵠⲆΔ:
        this.Δᐃⵠⵠ = [];
        for (l = Db; l < ll; l++) {
          this.Δᐃⵠⵠ.push({
            ᐃⵠᐃⵠ: Vp,
            ⲆᐃᐃⲆ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % Ks) {
          case 0:
            this.Δᐃⵠⵠ[Bg].x = this.x - 20.5;
            this.Δᐃⵠⵠ[0].y = this.y - 22.5;
            this.Δᐃⵠⵠ[Te].x = this.x - 35.5;
            this.Δᐃⵠⵠ[1].y = this.y + 7.5;
            this.Δᐃⵠⵠ[2].x = this.x + 7.5;
            this.Δᐃⵠⵠ[2].y = this.y - 30;
            this.Δᐃⵠⵠ[Ob].x = this.x + 22.5;
            this.Δᐃⵠⵠ[3].y = this.y;
            this.Δᐃⵠⵠ[4].x = this.x - 7.5;
            this.Δᐃⵠⵠ[4].y = this.y + 14.5;
            break;
          case Te:
            this.Δᐃⵠⵠ[Db].x = this.x - 30.5;
            this.Δᐃⵠⵠ[Da].y = this.y - 22.5;
            this.Δᐃⵠⵠ[1].x = this.x - 15.5;
            this.Δᐃⵠⵠ[1].y = this.y + 7.5;
            this.Δᐃⵠⵠ[2].x = this.x + 15.5;
            this.Δᐃⵠⵠ[2].y = this.y - 30;
            this.Δᐃⵠⵠ[I].x = this.x + 12.5;
            this.Δᐃⵠⵠ[ig].y = this.y + Gs;
            this.Δᐃⵠⵠ[Mq].x = this.x - 40.5;
            this.Δᐃⵠⵠ[4].y = this.y + 14.5;
            break;
          case bs:
            this.Δᐃⵠⵠ[0].x = this.x - 20.5;
            this.Δᐃⵠⵠ[In].y = this.y - 20.5;
            this.Δᐃⵠⵠ[1].x = this.x - 35.5;
            this.Δᐃⵠⵠ[ie].y = this.y + 15.5;
            this.Δᐃⵠⵠ[2].x = this.x + 7.5;
            this.Δᐃⵠⵠ[2].y = this.y - 17;
            this.Δᐃⵠⵠ[3].x = this.x + 22.5;
            this.Δᐃⵠⵠ[3].y = this.y + kq;
            this.Δᐃⵠⵠ[4].x = this.x - 7.5;
            this.Δᐃⵠⵠ[4].y = this.y + 1.5;
        }
        break;
      case ow.ⲆΔᐃΔΔ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ei, ie, hd, 0, yl, 10),
          ᐃⲆΔ: vj,
          angle: zl
        };
        this.ᐃⵠᐃⵠ = Ip;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⲆᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, tg, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case ow.ᐃⲆⲆᐃΔ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, Pg, gg, 10),
          ᐃⲆΔ: ts,
          angle: 0
        };
        this.ᐃⵠᐃⵠ = Xp;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ow.ⲆⲆΔⲆⵠ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, 0, kk, Zk),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ᐃⵠᐃⵠ = qp;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ow.ⲆⵠΔᐃᐃ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Jn, 1, js, Rs, te, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ᐃⵠᐃⵠ = Op;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ot, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ow.ΔⵠⵠΔⲆ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, yg, 1, Lr, 10, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ᐃⵠᐃⵠ = Mp;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ow.ⲆΔⲆⵠΔ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ts, 1, fl, Hi, 10, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ᐃⵠᐃⵠ = Su;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ot, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ow.ᐃⵠᐃᐃⵠ:
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ts, hs, 1, tt, gn, 10),
          ᐃⲆΔ: Rh,
          angle: Pg
        };
        this.ᐃⵠᐃⵠ = fp;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ta, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ow.ⲆᐃΔⲆⵠ:
        this.ᐃⵠᐃⵠ = dv;
        this.rotate = Kh;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, rg, Xn, 0, Th, 10),
          ᐃⲆΔ: kg,
          angle: Kh
        };
        break;
      case ow.ⲆΔᐃⵠⲆ:
        this.ᐃⵠᐃⵠ = _p;
        this.rotate = 0;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, hs, 0, gg, yt),
          ᐃⲆΔ: dr,
          angle: 0
        };
        break;
      case ow.ΔⵠᐃⲆⵠ:
        this.ᐃⵠᐃⵠ = Dp;
        this.rotate = 0;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Fh, Ol, Ot, gu, J, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        break;
      case ow.ΔⲆⵠⵠⵠ:
        this.ᐃⵠᐃⵠ = Hp;
        this.rotate = Zj;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 1, 1, 0, yl, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        break;
      case ow.ⲆⲆⵠⵠΔ:
        this.ᐃⵠᐃⵠ = Tp;
        this.rotate = Da;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, Db, 10, 10),
          ᐃⲆΔ: Fh,
          angle: 0
        };
        break;
      case ow.ⵠΔⲆⲆΔ:
        this.ⲆᐃⲆⲆᐃ = wp;
        this.ᐃΔᐃⵠᐃ = Zu;
        this.rotate = Kh;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, qu, 1, Rq, Zk, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        break;
      case ow.ⲆᐃⵠΔΔ:
        this.ᐃⵠᐃⵠ = qm;
        this.ⵠΔⲆᐃ = Math.floor(this.x / 100);
        this.ⵠΔ = Math.floor(this.y / Hl);
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(_g, xt, 1, ps, Zk, It),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.opacity = 1;
        this.ΔⵠⲆⵠᐃ = Km;
        break;
      case ow.ⵠᐃΔⲆⲆ:
        this.ᐃⵠᐃⵠ = op;
        this.ᐃᐃⵠᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ot, hs, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, Ol, 0, gg, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        break;
      case ow.ΔΔΔⵠⵠ:
      case ow.ⵠⲆΔⵠᐃ:
      case ow.ⵠᐃⵠᐃⵠ:
      case ow.ⲆⵠⲆⵠⵠ:
      case ow.ⲆⵠᐃᐃΔ:
        this.ᐃⵠᐃⵠ = hp;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(sl, 1, Ol, 0, J, te),
          ᐃⲆΔ: false,
          angle: mj
        };
        break;
      case ow.ⲆᐃⲆᐃⵠ:
        this.ᐃⵠᐃⵠ = hp;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, Te, 0, 10, Zk),
          ᐃⲆΔ: Bh,
          angle: ps
        };
        this.ΔⵠⲆⵠᐃ = Km;
        break;
      case ow.ⲆⲆⲆⲆⵠ:
      case ow.ΔᐃⵠⲆⲆ:
      case ow.ᐃᐃᐃᐃᐃ:
      case ow.ⵠᐃⲆᐃⵠ:
      case ow.ᐃΔⵠⵠΔ:
      case ow.ᐃⵠⵠⲆᐃ:
      case ow.ⵠⵠΔⵠⲆ:
      case ow.ⲆᐃⲆΔΔ:
      case ow.Ⲇᐃⵠᐃⵠ:
      case ow.ⲆⵠᐃΔΔ:
      case ow.ᐃⲆⵠᐃᐃ:
      case ow.ⵠⲆᐃᐃⲆ:
        this.ᐃⵠᐃⵠ = hp;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(C, 1, 1, ya, 10, 10),
          ᐃⲆΔ: dr,
          angle: Hi
        };
        this.ΔⵠⲆⵠᐃ = vp;
        break;
      case ow.ΔⲆⵠΔΔ:
        this.ᐃⵠᐃⵠ = tp;
        this.opacity = 1;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, hs, 1, 0, Th, 10),
          ᐃⲆΔ: kg,
          angle: 0
        };
        var n = this.angle % (Math.PI / 2);
        if (n < Math.PI / 4) {
          this.angle -= n;
        } else {
          this.angle += Math.PI / 2 - n;
        }
        break;
      case ow.ᐃⲆᐃⲆΔ:
        this.ᐃⵠᐃⵠ = Zm;
        this.angle = Hj * (Math.PI * Math.random());
        break;
      case ow.ⵠᐃΔΔΔⵠΔ:
        this.ᐃⵠᐃⵠ = bp;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case ow.ⵠⲆⲆⵠΔⲆⵠ:
        this.ᐃⵠᐃⵠ = ip;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case ow.ⵠⲆⵠΔⲆⵠⵠ:
        this.ᐃⵠᐃⵠ = lp;
        this.angle = pq * (Math.PI * Math.random());
        break;
      case ow.ⵠΔⵠΔⵠᐃⵠ:
        this.ᐃⵠᐃⵠ = ap;
        this.angle = Yg * (Math.PI * Math.random());
        break;
      case ow.ᐃⲆⲆⲆⲆ:
        this.ᐃⲆΔ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ᐃⵠᐃⵠ = Um;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, hd, hd, 0, 10, Bo),
          ᐃⲆΔ: Bh,
          angle: Kh
        };
        this.lock = ps;
        this.ᐃⲆΔ(this.action);
        break;
      case ow.ᐃⲆΔᐃⲆ:
      case ow.ΔⵠⵠΔΔ:
      case ow.ΔΔⲆᐃⲆ:
      case ow.ΔⵠΔⲆΔ:
      case ow.ⵠΔⲆⵠᐃ:
      case ow.ᐃΔΔⵠᐃ:
      case ow.ΔⵠⵠⲆᐃ:
      case ow.ⵠΔᐃⲆΔ:
      case ow.ᐃΔⵠⵠⵠ:
      case ow.ⵠΔᐃΔΔ:
      case ow.Δⵠᐃⵠᐃ:
      case ow.Ⲇᐃⵠⵠⵠ:
        this.ᐃⵠᐃⵠ = Ym;
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, Hi, J, Wb),
          ᐃⲆΔ: false,
          angle: Eh
        };
        this.ΔⵠⲆⵠᐃ = vp;
        break;
      case ow.ⲆᐃΔᐃⵠ:
        this.ⲆᐃⲆⲆᐃ = Cp;
        this.ᐃⵠᐃⵠ = Jp;
        this.ᐃΔᐃⵠᐃ = $u;
        this.ᐃᐃᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1.23, 1.18, 0.02, 0.02);
        this.ᐃᐃⵠᐃᐃ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, Ug, 1.23, 1.18, 0.04, 0.04);
        this.ᐃⲆⲆ = {
          ᐃΔⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, Oq, ie, 0, 10, 10),
          ᐃⲆΔ: false,
          angle: In
        };
        this.ᐃⲆΔ = function (a) {
          this.action = a;
        };
    }
  }
  function sw(d) {
    function e(a, b, c) {
      var d = b;
      for (var e = c; mf.ⲆⵠⲆⵠᐃ > e; e++) {
        for (var f = b; f < mf.ⵠⲆᐃⲆᐃ && (e === c && (d = Math.max(f, d)), f <= d) && a[e][f] !== 1; f++) {
          a[e][f] = 1;
        }
        if (d > f) {
          break;
        }
      }
      mf.Ⲇᐃᐃᐃ.push(new mf.ΔⵠΔᐃᐃⲆⵠ(mf.ΔⲆΔⵠΔ, b, c, d - b + 1, e - c, 15));
    }
    function f(b, c, d, e, f) {
      for (var g = Zj; g < f && k(b, c, d, e, aa) !== 1; g++);
      if (f === g) {
        return Zj;
      } else {
        return Ol;
      }
    }
    function k(c, d, e, f, i) {
      var j = d + Math.floor(f * mf.ΔΔΔⵠⲆ.get());
      var k = e + Math.floor(mf.ΔΔΔⵠⲆ.get() * f);
      var a = Th + Math.floor((mf.ⵠⲆᐃⲆᐃ - j - Vl) * mf.ΔΔΔⵠⲆ.get());
      var m = 10 + Math.floor((mf.ⲆⵠⲆⵠᐃ - k - pl) * mf.ΔΔΔⵠⲆ.get());
      var h = a + j;
      var l = m + k;
      for (var g = Db; mf.Ⲇᐃᐃᐃ.length > g; g++) {
        var n = mf.Ⲇᐃᐃᐃ[g];
        if (za === ᐃⵠΔⲆ.ⵠⲆΔⵠᐃᐃⲆ(a, h, m, l, n.x1 / _j - i, n.x2 / 100 + i, n.y1 / gh - i, n.y2 / Ak + i)) {
          return 0;
        }
      }
      mf.Ⲇᐃᐃᐃ.push(new mf.ΔⵠΔᐃᐃⲆⵠ(c, a, m, j, k, 15));
      return 1;
    }
    function q(b, c) {
      for (var d = 0; d < c.length; d++) {
        a(c[d][Kh], c[d][1], b, c[d][2]);
      }
    }
    function o(a, e) {
      var f = mf.Ⲇᐃᐃᐃ[a];
      var i = Math.floor(f.y1 / il);
      var j = Math.floor(f.x1 / Hl);
      var k = Math.floor(f.ΔⵠⲆ / 100);
      var o = j + (A = Math.floor(f.w / gh));
      var q = ss;
      var r = k;
      var s = i;
      for (var t = j + Ds + Math.floor((A - 20) * mf.ΔΔΔⵠⲆ.get()), v = t - nj; v < t + Gi; v++) {
        x(i - 1, v, "wtb", gu, Ol);
      }
      while (Lr < r) {
        if (bs !== q) {
          if (r < 10) {
            for (B = yg; r > 0; B++) {
              n(s, t, 1, Xn, 0, e, B, 1);
              r -= jh;
              s += ie;
            }
          } else if (Ug !== q) {
            q = 1;
            var w = Math.floor(1 + mf.ΔΔΔⵠⲆ.get() * dg);
            var y = hd + Math.floor(mf.ΔΔΔⵠⲆ.get() * $i);
            if (j + 16 > t) {
              n(s, t, w, 0, 1, e, y, y);
              t += w;
            } else if (t > o - gk) {
              n(s, t, w, 0, -1, e, y, y);
              t -= w;
            } else if (mf.ΔΔΔⵠⲆ.get() > 0.5) {
              n(s, t, w, ya, fl, e, y, y);
              t += w;
            } else {
              n(s, t, w, Db, -yg, e, y, y);
              t -= w;
            }
          } else {
            var z = Math.min(r, Math.floor(Oq + mf.ΔΔΔⵠⲆ.get() * 4));
            var A = 1 + Math.floor(Og * mf.ΔΔΔⵠⲆ.get());
            n(s, t, z, mk, 0, e, A, A);
            q = 0;
            r -= z;
            s += z;
          }
        } else {
          for (var B = 10; B > 1; B--) {
            n(s, t, 1, Ol, 0, e, B, 1);
            r -= qu;
            s += 1;
          }
          q = 0;
        }
      }
      for (v = t - 1; v < t + Yg; v++) {
        x(s, v, "wtb", In, Oq);
      }
    }
    function n(f, j, k, m, n, o, p, a) {
      var q = Math.floor(p / xq);
      var h = Math.max(Ug, Math.floor(p / Yg));
      var l = Math.floor(a / Zh);
      var g = Math.max(cu, Math.floor(a / Hj));
      for (var r = 0; r < k; r++) {
        for (var s = f - l; f + g > s; s++) {
          for (var t = j - q; t < j + h; t++) {
            if (x(s, t, "wtb", 0, 1) === hd) {
              o.push([s, t, 1]);
            }
          }
        }
        f += m;
        j += n;
      }
    }
    function a(a, b, c, d) {
      if (h(a, b) && (ᐃᐃⲆⲆ = Vw.ᐃᐃⲆⲆ, ᐃᐃⲆⲆ[a][b] === undefined && (ᐃᐃⲆⲆ[a][b] = {}), ᐃᐃⲆⲆ[a][b].r === undefined)) {
        var e = Hi;
        if (h(a - 1, b) && ᐃᐃⲆⲆ[a - cu][b] !== undefined && Za !== ᐃᐃⲆⲆ[a - Oq][b].wtb) {
          e += 2;
        }
        if (h(a, b - 1) && ᐃᐃⲆⲆ[a][b - 1] !== Ul && j !== ᐃᐃⲆⲆ[a][b - js].wtb) {
          e += $l;
        }
        if (h(a, b + 1) && ᐃᐃⲆⲆ[a][b + qu] !== Jo && ᐃᐃⲆⲆ[a][b + qu].wtb !== Ng) {
          e += 16;
        }
        if (h(a + 1, b) && cn !== ᐃᐃⲆⲆ[a + 1][b] && ᐃᐃⲆⲆ[a + 1][b].wtb !== cn) {
          e += 64;
        }
        if (h(a - 1, b - qu) && 8 + ih === (e & 8 + Zh) && ᐃᐃⲆⲆ[a - rg][b - xt] !== undefined && ᐃᐃⲆⲆ[a - Xn][b - Oq].wtb !== undefined) {
          e += 1;
        }
        if (h(a - ie, b + ie) && 16 + Pn === (e & 18) && ᐃᐃⲆⲆ[a - qu][b + 1] !== rk && ᐃᐃⲆⲆ[a - 1][b + 1].wtb !== undefined) {
          e += 4;
        }
        if (h(a + Ot, b - xt) && $l + 64 === (e & 72) && ᐃᐃⲆⲆ[a + lb][b - fl] !== Hs && ᐃᐃⲆⲆ[a + 1][b - 1].wtb !== undefined) {
          e += 32;
        }
        if (h(a + Ol, b + Te) && (e & 80) === cg + 64 && ᐃᐃⲆⲆ[a + Oq][b + 1] !== mg && Jo !== ᐃᐃⲆⲆ[a + 1][b + 1].wtb) {
          e += 128;
        }
        ᐃᐃⲆⲆ[a][b].r = {};
        ᐃᐃⲆⲆ[a][b].r.ΔᐃⲆⵠⵠΔⲆ = e;
        ᐃᐃⲆⲆ[a][b].r.ᐃᐃⲆⲆⵠⵠΔ = d;
        ᐃᐃⲆⲆ[a][b].r.ΔΔⵠΔ = mf.ⵠⲆⲆΔⵠ(c, b * Yq + 50, a * 100 + 50) - 400;
        ᐃᐃⲆⲆ[a][b].r.x = b * 100 + 50;
        ᐃᐃⲆⲆ[a][b].r.y = a * 100 + 50;
      }
    }
    function r(a) {
      var b = mf.Ⲇᐃᐃᐃ[a];
      x(-yr + Math.floor(b.y2 / Y), -mk + Math.floor(b.x2 / 100), "s", Eh, 0);
      x(fn + Math.floor(b.y1 / 100), -yg + Math.floor(b.x2 / 100), "s", 0, Lr);
      x(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", zl, gu);
      x(gl + Math.floor(b.y1 / 100), jh + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function h(a, b) {
      return a >= 0 && b >= Kh && a < mf.ⲆⵠⲆⵠᐃ && b < mf.ⵠⲆᐃⲆᐃ;
    }
    function i(a, b) {
      (function (b, c) {
        var d = mf.Ⲇᐃᐃᐃ[c];
        for (var e = wj, f = Rs; b > e && f < 10000; f++) {
          var i = d.y1 + d.ΔⵠⲆ * mf.ΔΔΔⵠⲆ.get();
          var j = d.x1 + d.w * mf.ΔΔΔⵠⲆ.get();
          var k = Math.floor(i / No);
          var m = Math.floor(j / gh);
          if (mf.ⵠⲆⲆΔⵠ(c, m * 100 + 50, Yq * k + 50) >= 600) {
            for (var p = 1, q = k - 4; p === 1 && k + 4 >= q; q++) {
              for (var t = m - 4; Xn === p && t <= m + 4; t++) {
                if (mg !== Vw.ᐃᐃⲆⲆ[q][t]) {
                  p = Lr;
                }
              }
            }
            if (p !== Db) {
              x(k, m, "la", e % 6, 0);
              e++;
            }
          }
        }
      })(b * 80, a);
      for (var c = 0; c < Ut; c++) {
        g(a, "s", c, Math.floor(b * wg));
      }
      for (c = 0; Jb > c; c++) {
        g(a, "g", c, Math.floor(va * b));
      }
      for (c = 0; c < 3; c++) {
        g(a, "re", c, Math.max(qu, Math.floor(Te * b)), 0.2);
      }
      for (c = 0; c < fn; c++) {
        g(a, "a", c, Math.max(yg, Math.floor(b * Nb)));
      }
      r(a);
    }
    function g(f, e, i, k, n) {
      var p = mf.Ⲇᐃᐃᐃ[f];
      var q = Math.floor(p.x1 / _j);
      var r = Math.floor(p.y1 / 100);
      var t = Math.floor(p.w / Yq);
      var v = Math.floor(p.ΔⵠⲆ / gh);
      if (n !== j) {
        n = 1 - n;
        q += Math.floor(t * n / 2);
        r += Math.floor(n * v / Jt);
        t -= Math.floor(n * t);
        v -= Math.floor(n * v);
      }
      var w = Vw.ᐃᐃⲆⲆ;
      for (var g = 0, y = Lr; k > g && y <= 50000; y++) {
        var z = r + Math.floor(v * mf.ΔΔΔⵠⲆ.get());
        var A = q + Math.floor(mf.ΔΔΔⵠⲆ.get() * t);
        if (mf.ⵠⲆⲆΔⵠ(f, _j * A + 50, z * 100 + 50) >= 400 && ((B = w[z][A + xt]) === undefined || B[e] === T || B[e][i] === undefined) && ((B = w[z][A - 1]) === undefined || B[e] === undefined || B[e][i] === undefined) && ((B = w[z + 1][A]) === undefined || Lj === B[e] || B[e][i] === j) && ((B = w[z - 1][A]) === undefined || B[e] === undefined || er === B[e][i]) && ((B = w[z + ie][A - Ol]) === undefined || B[e] === Lj || B[e][i] === undefined) && ((B = w[z - 1][A + za]) === undefined || Hs === B[e] || B[e][i] === Hq)) {
          var B = w[z + 1][A + hs];
          if (lj === B || B[e] === undefined || B[e][i] === undefined) {
            B = w[z - 1][A - 1];
            if (Hq === B || B[e] === undefined || B[e][i] === undefined) {
              if (Ng === w[z][A]) {
                x(z, A, e, i, qu);
                g++;
              }
            }
          }
        }
      }
    }
    function s(a) {
      for (var b = Rq; Ob > b; b++) {
        g(a, "s", b, v);
      }
      for (b = tg; vt > b; b++) {
        g(a, "a", b, 1);
      }
      for (b = 0; b < bb; b++) {
        g(a, "d", b, jh);
      }
      r(a);
    }
    function x(a, b, c, d, e) {
      if (a >= Hi && Rs <= b && mf.ⲆⵠⲆⵠᐃ > a && b < mf.ⵠⲆᐃⲆᐃ) {
        ᐃᐃⲆⲆ = Vw.ᐃᐃⲆⲆ;
        if (ᐃᐃⲆⲆ[a][b] === Hs) {
          ᐃᐃⲆⲆ[a][b] = {};
        }
        if (ᐃᐃⲆⲆ[a][b][c] !== undefined) {
          return 0;
        } else {
          ᐃᐃⲆⲆ[a][b][c] = [];
          ᐃᐃⲆⲆ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === qu) {
            (function (a, b, c, d) {
              gb.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return yg;
        }
      }
    }
    function b(a, b) {
      for (var c = 0; Bs > c; c++) {
        g(a, "t", c, Math.floor(b * 80));
      }
      for (c = wj; c < 4; c++) {
        g(a, "b", c, Math.floor(b * 80));
      }
      for (c = wj; Hk > c; c++) {
        g(a, "s", c, Math.floor(b * 50));
      }
      var d = [];
      for (c = 0; _l > c; c++) {
        o(a, d);
      }
      q(a, d);
      d = [];
      g(a, "p", Eh, Math.floor(b * 28));
      for (c = Db; c < 3; c++) {
        g(a, "g", c, Math.floor(b * 7));
      }
      for (c = 0; c < 3; c++) {
        g(a, "d", c, Math.floor(ss * b));
      }
      for (c = 0; c < 3; c++) {
        g(a, "a", c, Math.floor(b * Ot));
      }
      for (c = 0; c < 3; c++) {
        g(a, "m", c, Math.floor(b * 1));
      }
      g(a, "a", 0, Math.floor(b * js));
      r(a);
    }
    function c(a, b) {
      for (var c = 0; c < 6; c++) {
        g(a, "t", c, Math.floor(pl * b));
      }
      for (c = 0; c < ba; c++) {
        g(a, "b", c, Math.floor(b * 20));
      }
      for (c = 0; vt > c; c++) {
        g(a, "s", c, Math.floor(b * 20));
      }
      var d = [];
      o(a, d);
      q(a, d);
      d = [];
      g(a, "p", 0, Math.floor(b * 24));
      for (c = 0; c < 3; c++) {
        g(a, "g", c, Math.floor(kq * b));
      }
      if (mf.mode === lw.ΔΔΔΔᐃ) {
        for (c = In; c < 3; c++) {
          g(a, "d", c, Math.floor(b * fn));
        }
        for (c = Pg; c < 3; c++) {
          g(a, "a", c, Math.floor(H * b));
        }
      }
      r(a);
    }
    function m(a, b) {
      for (var c = ya; c < 3; c++) {
        g(a, "s", c, Math.floor(Pj * b));
      }
      for (c = mj; c < 3; c++) {
        g(a, "f", c, Math.floor(b * 24));
      }
      for (c = zl; c < 3; c++) {
        g(a, "d", c, Math.max(Ot, Math.floor(H * b)), 0.3);
      }
      for (c = Rs; c < I; c++) {
        g(a, "g", c, Math.floor(b * ji));
      }
      r(a);
    }
    function p(a, b) {
      for (var c = 0; c < 3; c++) {
        g(a, "s", c, Math.floor(b * wg));
      }
      for (c = Pg; c < Jb; c++) {
        g(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      g(a, "c", 0, Math.floor(b * 36));
      var d = [];
      (function (b, c) {
        var d = mf.Ⲇᐃᐃᐃ[b];
        var e = Math.floor(d.y1 / sh);
        var f = Math.floor(d.x1 / 100);
        var i = Math.floor(d.ΔⵠⲆ / Ls);
        var j = Math.floor(d.w / Ak);
        var a = e + Math.floor(i / 2);
        var k = f + Math.floor(j / 2);
        for (var h = 0; h < 3; h++) {
          x(m = Math.floor(a - 3 + U * mf.ΔΔΔⵠⲆ.get()), n = Math.floor(k - 3 + mf.ΔΔΔⵠⲆ.get() * 6), "plm", h, hd);
        }
        for (h = mj; h < 80; h++) {
          var m = Math.floor(a - 3 + mf.ΔΔΔⵠⲆ.get() * 6);
          var n = Math.floor(k - Ut + mf.ΔΔΔⵠⲆ.get() * 6);
          if (cu === x(m, n, "wtb", In, 1)) {
            c.push([m, n, Da]);
          }
        }
      })(a, d);
      q(a, d);
      d = [];
    }
    function l(a, b, c) {
      if (a[b]) {
        for (Wk = 0; Wk < a[b].length; Wk++) {
          if (a[b][Wk]) {
            for (ⵠᐃΔΔ = 0; ⵠᐃΔΔ < a[b][Wk].length; ⵠᐃΔΔ++) {
              a[b][Wk][ⵠᐃΔΔ].ᐃⲆⲆ = c;
              a[b][Wk][ⵠᐃΔΔ].ᐃⲆΔ = false;
              a[b][Wk][ⵠᐃΔΔ].time = Rs;
              a[b][Wk][ⵠᐃΔΔ].angle = tt;
            }
          }
        }
      }
    }
    this.mode = lw.ⵠᐃᐃⲆⲆ;
    this.ΔᐃⵠᐃⲆΔΔ = d;
    this.ⵠⵠΔⲆᐃ = 0;
    this.ⲆΔᐃⲆⵠⵠⲆ = Ck;
    this.ⵠΔΔⲆ = [];
    this.ⲆΔⲆ = [];
    this.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ] = [];
    this.ⲆΔⲆ[ow.ⵠⵠⵠⲆΔ] = [];
    this.ⲆΔⲆ[ow.ⵠⵠⲆⵠΔ] = [];
    this.ⲆΔⲆ[ow.ΔⵠΔⵠⲆ] = [];
    this.ⲆΔⲆ[ow.ⵠⵠⵠⵠⲆ] = [];
    this.ⲆΔⲆ[ow.ᐃΔᐃⵠΔ] = [];
    this.ⲆΔⲆ[ow.ΔΔⵠⲆⲆ] = [];
    this.ⲆΔⲆ[ow.ᐃⵠⵠᐃⵠ] = [];
    this.ⲆΔⲆ[ow.ⲆⵠΔᐃⵠ] = [];
    this.ⲆΔⲆ[ow.ⲆⲆΔⵠⲆ] = [];
    this.ⲆΔⲆ[ow.ⵠᐃⲆⲆΔ] = [];
    this.ⲆΔⲆ[ow.ⲆⲆᐃⲆⵠ] = [];
    this.ⲆΔⲆ[ow.ⲆⲆᐃⲆᐃ] = [];
    this.ⲆΔⲆ[ow.ⲆⵠⲆᐃⵠ] = [];
    this.ⲆΔⲆ[ow.ⲆᐃᐃⲆⵠ] = [];
    this.ⲆΔⲆ[ow.ⵠⵠⲆᐃΔ] = [];
    this.ⲆΔⲆ[ow.ᐃⲆⵠᐃΔ] = [];
    this.ⲆΔⲆ[ow.ⵠⲆⲆᐃΔ] = [];
    this.ⲆΔⲆ[ow.ᐃΔⲆⲆⲆ] = [];
    this.ⲆΔⲆ[ow.ᐃⵠΔⵠⵠ] = [];
    this.ⲆΔⲆ[ow.ᐃΔⲆⲆΔ] = [];
    this.ⲆΔⲆ[ow.ⲆⵠⵠΔⲆ] = [];
    this.ⲆΔⲆ[ow.ᐃⲆᐃⲆΔ] = [];
    this.ⲆΔⲆ[ow.ⵠᐃΔΔΔⵠΔ] = [];
    this.ⲆΔⲆ[ow.ⵠⲆⲆⵠΔⲆⵠ] = [];
    this.ⲆΔⲆ[ow.ⵠⲆⵠΔⲆⵠⵠ] = [];
    this.ⲆΔⲆ[ow.ⵠΔⵠΔⵠᐃⵠ] = [];
    this.ⲆΔⲆ[ow.ⵠΔΔⲆᐃ] = [];
    this.ⲆΔⲆ[ow.ⵠΔΔⵠΔᐃΔ] = [];
    this.ⲆΔⲆ[ow.Δⵠᐃᐃⵠ] = [];
    this.ⲆΔⲆ[ow.Δᐃᐃᐃᐃ] = [];
    this.ⲆΔⲆ[ow.ⵠΔᐃᐃᐃ] = [];
    this.ⲆΔⲆ[ow.ⵠΔᐃΔⵠ] = [];
    this.ⲆΔⲆ[ow.ⵠⲆΔⵠᐃ] = [];
    this.ⲆΔⲆ[ow.ΔᐃᐃⲆⲆ] = [];
    this.ⲆΔⲆ[ow.ᐃΔΔⵠΔ] = [];
    this.ⲆΔⲆ[ow.ⵠᐃΔⲆᐃ] = [];
    this.ⲆΔⲆ[ow.ⵠⵠΔⵠⲆ] = [];
    this.ⲆΔⲆ[ow.ⲆᐃⲆΔΔ] = [];
    this.ⲆΔⲆ[ow.Ⲇᐃⵠᐃⵠ] = [];
    this.ⲆΔⲆ[ow.ⲆⵠᐃΔΔ] = [];
    this.ⲆΔⲆ[ow.ᐃⲆⵠᐃᐃ] = [];
    this.ⲆΔⲆ[ow.ⵠⲆᐃᐃⲆ] = [];
    this.ⲆΔⲆ[ow.ⲆⲆⲆⲆⵠ] = [];
    this.ⲆΔⲆ[ow.ΔᐃⵠⲆⲆ] = [];
    this.ⲆΔⲆ[ow.ᐃᐃᐃᐃᐃ] = [];
    this.ⲆΔⲆ[ow.ⵠᐃⲆᐃⵠ] = [];
    this.ⲆΔⲆ[ow.ᐃΔⵠⵠΔ] = [];
    this.ⲆΔⲆ[ow.ᐃⵠⵠⲆᐃ] = [];
    this.ⲆΔⲆ[ow.ΔⲆⵠΔΔ] = [];
    this.ⲆΔⲆ[ow.ΔⵠⵠⲆᐃ] = [];
    this.ⲆΔⲆ[ow.ⵠΔᐃⲆΔ] = [];
    this.ⲆΔⲆ[ow.ᐃΔⵠⵠⵠ] = [];
    this.ⲆΔⲆ[ow.ⵠΔᐃΔΔ] = [];
    this.ⲆΔⲆ[ow.Δⵠᐃⵠᐃ] = [];
    this.ⲆΔⲆ[ow.Ⲇᐃⵠⵠⵠ] = [];
    this.ⲆΔⲆ[ow.ᐃⲆΔᐃⲆ] = [];
    this.ⲆΔⲆ[ow.ΔⵠⵠΔΔ] = [];
    this.ⲆΔⲆ[ow.ΔΔⲆᐃⲆ] = [];
    this.ⲆΔⲆ[ow.ΔⵠΔⲆΔ] = [];
    this.ⲆΔⲆ[ow.ⵠΔⲆⵠᐃ] = [];
    this.ⲆΔⲆ[ow.ᐃΔΔⵠᐃ] = [];
    this.ⲆΔⲆ[ow.ⲆᐃΔᐃⵠ] = [];
    this.ⲆΔⲆ[ow.ⲆⵠᐃᐃΔ] = [];
    this.ⲆΔⲆ[ow.ⵠᐃⵠᐃⵠ] = [];
    this.ⲆΔⲆ[ow.ᐃⲆⲆⲆⲆ] = [];
    this.ⲆΔⲆ[ow.ⲆⲆⵠⵠᐃ] = [];
    this.ⲆΔⲆ[ow.ΔⲆΔΔⲆ] = [];
    this.ⲆΔⲆ[ow.ⲆᐃⲆᐃⵠ] = [];
    this.ⲆΔⲆ[ow.ⲆᐃⵠΔΔ] = [];
    this.ⲆΔⲆ[ow.ΔΔΔⵠⵠ] = [];
    this.ⲆΔⲆ[ow.ⲆΔᐃΔΔ] = [];
    this.ⲆΔⲆ[ow.ΔⵠⵠΔⲆ] = [];
    this.ⲆΔⲆ[ow.ᐃⵠᐃᐃⵠ] = [];
    this.ⲆΔⲆ[ow.ᐃⵠΔΔΔ] = [];
    this.ⲆΔⲆ[ow.ⲆⵠΔᐃᐃ] = [];
    this.ⲆΔⲆ[ow.ⲆΔⲆⵠΔ] = [];
    this.ⲆΔⲆ[ow.ⲆⲆΔⲆⵠ] = [];
    this.ⲆΔⲆ[ow.ᐃⲆⲆᐃΔ] = [];
    this.ⲆΔⲆ[ow.ⵠΔⲆⲆΔ] = [];
    this.ⲆΔⲆ[ow.ⲆᐃΔⲆⵠ] = [];
    this.ⲆΔⲆ[ow.ⲆΔᐃⵠⲆ] = [];
    this.ⲆΔⲆ[ow.ΔⵠᐃⲆⵠ] = [];
    this.ⲆΔⲆ[ow.ΔⲆⵠⵠⵠ] = [];
    this.ⲆΔⲆ[ow.ⲆⲆⵠⵠΔ] = [];
    this.ⲆΔⲆ[ow.ⲆⵠⲆⵠⵠ] = [];
    this.ⲆΔⲆ[ow.ΔΔΔΔΔ] = [];
    this.ⲆΔⲆ[ow.ⵠᐃΔⲆⲆ] = [];
    this.Δⵠⵠᐃᐃ = [];
    this.ⵠⲆᐃⲆᐃ = 260;
    this.ⲆⵠⲆⵠᐃ = 260;
    this.ᐃⲆⲆⲆⲆᐃᐃ = Ah;
    this.ᐃᐃᐃⵠⵠᐃΔ = 100;
    this.w = this.ⵠⲆᐃⲆᐃ * this.ᐃⲆⲆⲆⲆᐃᐃ;
    this.ΔⵠⲆ = this.ᐃᐃᐃⵠⵠᐃΔ * this.ⲆⵠⲆⵠᐃ;
    this.ΔΔΔⵠⲆ = new Sk.ⵠᐃⲆΔᐃⲆⵠ();
    this.Ⲇᐃᐃᐃ = [];
    this.ᐃⵠⵠⵠ = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, Oq, 0, 1, 1);
    this.transition = sl;
    this.ⵠⲆⲆΔⲆ = [];
    this.ⵠΔΔⵠⲆ = tg;
    this.ᐃΔΔΔⵠⵠΔ = 1;
    this.ⵠⵠⲆΔⵠΔΔ = 2;
    this.ΔᐃΔΔⲆⲆⲆ = 3;
    this.ΔⲆΔⵠΔ = 4;
    this.ᐃⵠⵠᐃΔᐃΔ = 10;
    this.ⵠⲆⲆΔⲆ[this.ⵠΔΔⵠⲆ] = {
      ᐃⲆΔⲆⵠⲆΔ: 1,
      ⵠΔⲆ: [19, 58, 43],
      ⵠᐃᐃ: [4, 43, 48],
      ᐃΔⵠΔⵠ: ["#133a2b", "#042b30"]
    };
    this.ⵠⲆⲆΔⲆ[this.ΔⲆΔⵠΔ] = {
      ᐃⲆΔⲆⵠⲆΔ: 0,
      ⵠΔⲆ: [11, 106, 132],
      ⵠᐃᐃ: [9, 55, 63],
      ᐃΔⵠΔⵠ: ["#0B6A84", "#09373F"]
    };
    this.ⵠⲆⲆΔⲆ[this.ᐃΔΔΔⵠⵠΔ] = {
      ᐃⲆΔⲆⵠⲆΔ: Pg,
      ⵠΔⲆ: [235, 242, 240],
      ⵠᐃᐃ: [19, 97, 103],
      ᐃΔⵠΔⵠ: ["#EBF2F0", "#136167"]
    };
    this.ⵠⲆⲆΔⲆ[this.ⵠⵠⲆΔⵠΔΔ] = {
      ⵠΔⲆ: [45, 32, 23],
      ᐃΔⵠΔⵠ: ["#2D2017", "#031C1E"],
      ᐃⲆΔⲆⵠⲆΔ: 0,
      ⵠᐃᐃ: [3, 28, 30]
    };
    this.ⵠⲆⲆΔⲆ[this.ΔᐃΔΔⲆⲆⲆ] = {
      ᐃⲆΔⲆⵠⲆΔ: wj,
      ⵠᐃᐃ: [24, 61, 60],
      ᐃΔⵠΔⵠ: ["#4A4A4A", "#183D3C"],
      ⵠΔⲆ: [74, 74, 74]
    };
    this.ⵠⲆⲆΔⲆ[this.ᐃⵠⵠᐃΔᐃΔ] = {
      ⵠᐃᐃ: [9, 61, 56],
      ᐃⲆΔⲆⵠⲆΔ: 0,
      ᐃΔⵠΔⵠ: ["#EBD8A6", "#093D38"],
      ⵠΔⲆ: [235, 216, 166]
    };
    this.ΔⵠΔᐃᐃⲆⵠ = function (a, b, c, d, e, f) {
      this.x1 = b * 100;
      this.y1 = c * No;
      this.w = d * Y;
      this.ΔⵠⲆ = Yq * e;
      this.x2 = (b + d) * 100;
      this.y2 = (c + e) * 100;
      this.ⵠⵠⵠ = a;
      this.ΔΔⲆ = f === Za ? 15 : f;
    };
    this.ⵠΔΔⲆΔ = -1000000;
    this.ⲆΔΔΔᐃ = this.ⵠΔΔⲆΔ;
    this.ΔΔⲆΔⲆ = this.ⵠΔΔⲆΔ;
    this.ⵠⲆΔᐃⵠ = this.ⵠΔΔⲆΔ;
    this.ΔΔᐃᐃΔⵠᐃ = this.ⵠΔΔⲆΔ;
    this.ΔⵠᐃⲆᐃⲆⵠ = this.ⵠΔΔⲆΔ;
    this.ΔΔᐃΔⵠ = this.ⵠΔΔⲆΔ;
    this.ᐃⲆΔᐃΔᐃΔⲆΔ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / sa);
      var f = Math.floor(c / Ah);
      b.ⲆΔΔΔᐃ = mf.ⵠΔΔⲆΔ;
      b.ΔΔⲆΔⲆ = mf.ⵠΔΔⲆΔ;
      b.ⵠⲆΔᐃⵠ = mf.ⵠΔΔⲆΔ;
      b.ΔΔᐃᐃΔⵠᐃ = mf.ⵠΔΔⲆΔ;
      b.ΔΔᐃΔⵠ = mf.ⵠΔΔⲆΔ;
      b.ⲆᐃⵠⵠⵠΔΔ = mf.ⵠΔΔⲆΔ;
      for (var g = 0; mf.ΔⲆΔⵠΔ !== mf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ; g++) {
        if (mf.ⵠΔΔⵠⲆ === mf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ) {
          var h = mf.ⵠⲆⲆΔⵠ(g, c, d);
          b.ΔΔᐃᐃΔⵠᐃ = Math.max(b.ΔΔᐃᐃΔⵠᐃ, h);
          if (h > 0 && mk === mf.ⲆⵠⵠᐃⵠⵠΔΔΔ(g, c, d)) {
            b.ⲆᐃⵠⵠⵠΔΔ = 1;
          }
        } else if (mf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ === mf.ᐃΔΔΔⵠⵠΔ) {
          b.ⲆΔΔΔᐃ = Math.max(b.ⲆΔΔΔᐃ, mf.ⵠⲆⲆΔⵠ(g, c, d));
        } else if (mf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ === mf.ᐃⵠⵠᐃΔᐃΔ) {
          b.ΔΔⲆΔⲆ = Math.max(b.ΔΔⲆΔⲆ, mf.ⵠⲆⲆΔⵠ(g, c, d));
        } else if (mf.ⵠⵠⲆΔⵠΔΔ === mf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ) {
          b.ⵠⲆΔᐃⵠ = Math.max(b.ⵠⲆΔᐃⵠ, mf.ⵠⲆⲆΔⵠ(g, c, d));
        } else if (mf.Ⲇᐃᐃᐃ[g].ⵠⵠⵠ === mf.ΔᐃΔΔⲆⲆⲆ) {
          b.ΔΔᐃΔⵠ = Math.max(b.ΔΔᐃΔⵠ, mf.ⵠⲆⲆΔⵠ(g, c, d));
        }
      }
      if (Vw.ᐃᐃⲆⲆ[e][f].iblk) {
        b.ⲆᐃⵠⵠⵠΔΔ = 1;
      }
      if (mf.ⲆΔΔⲆⵠⲆⲆᐃⵠ(f, e)) {
        b.ΔⵠᐃⲆᐃⲆⵠ = b.ⵠΔΔⲆΔ;
      } else if (Vw.ᐃᐃⲆⲆ[e][f].wtb || b.ⲆΔΔΔᐃ < 0 && Eh > b.ⵠⲆΔᐃⵠ && b.ΔΔᐃᐃΔⵠᐃ < 0 && In > b.ⲆᐃⵠⵠⵠΔΔ && mj > b.ΔΔᐃΔⵠ && b.ΔΔⲆΔⲆ < 0) {
        b.ΔⵠᐃⲆᐃⲆⵠ = jh;
      } else {
        b.ΔⵠᐃⲆᐃⲆⵠ = b.ⵠΔΔⲆΔ;
      }
    };
    this.ⲆᐃⵠⲆΔᐃΔⲆⲆ = function (a, b) {
      mf.ⲆΔΔΔᐃ = mf.ⵠΔΔⲆΔ;
      mf.ΔΔⲆΔⲆ = mf.ⵠΔΔⲆΔ;
      mf.ⵠⲆΔᐃⵠ = mf.ⵠΔΔⲆΔ;
      mf.ΔΔᐃΔⵠ = mf.ⵠΔΔⲆΔ;
      mf.ΔΔᐃᐃΔⵠᐃ = mf.ⵠΔΔⲆΔ;
      for (var c = 0; mf.ΔⲆΔⵠΔ !== mf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ; c++) {
        if (mf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ === mf.ⵠΔΔⵠⲆ) {
          mf.ΔΔᐃᐃΔⵠᐃ = Math.max(mf.ΔΔᐃᐃΔⵠᐃ, mf.ⵠⲆⲆΔⵠ(c, a, b));
        } else if (mf.ᐃΔΔΔⵠⵠΔ === mf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ) {
          mf.ⲆΔΔΔᐃ = Math.max(mf.ⲆΔΔΔᐃ, mf.ⵠⲆⲆΔⵠ(c, a, b));
        } else if (mf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ === mf.ᐃⵠⵠᐃΔᐃΔ) {
          mf.ΔΔⲆΔⲆ = Math.max(mf.ΔΔⲆΔⲆ, mf.ⵠⲆⲆΔⵠ(c, a, b));
        } else if (mf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ === mf.ⵠⵠⲆΔⵠΔΔ) {
          mf.ⵠⲆΔᐃⵠ = Math.max(mf.ⵠⲆΔᐃⵠ, mf.ⵠⲆⲆΔⵠ(c, a, b));
        } else if (mf.Ⲇᐃᐃᐃ[c].ⵠⵠⵠ === mf.ΔᐃΔΔⲆⲆⲆ) {
          mf.ΔΔᐃΔⵠ = Math.max(mf.ΔΔᐃΔⵠ, mf.ⵠⲆⲆΔⵠ(c, a, b));
        }
      }
      if (mf.ⲆΔΔΔᐃ < 0 && mf.ΔΔᐃΔⵠ < 0 && mf.ΔΔᐃᐃΔⵠᐃ < 0 && mf.ΔΔᐃΔⵠ < 0 && mf.ΔΔⲆΔⲆ < 0) {
        mf.ΔⵠᐃⲆᐃⲆⵠ = jh;
      } else {
        mf.ΔⵠᐃⲆᐃⲆⵠ = mf.ⵠΔΔⲆΔ;
      }
    };
    this.ⲆⵠⵠᐃⵠⵠΔΔΔ = function (a, b, c) {
      var d = mf.Ⲇᐃᐃᐃ[a];
      var e = Lr;
      ΔⵠⵠⲆ = d.x1 + 30 + (d.ΔΔⲆ & lw.ᐃᐃⲆᐃΔ ? 0 : 150);
      var f = b - ΔⵠⵠⲆ;
      if ((d.ΔΔⲆ & lw.ᐃᐃⲆᐃΔ) > 0 && f > tg && f < 320) {
        e = mk;
      }
      ΔᐃⲆⲆ = d.y1 + 250 + (d.ΔΔⲆ & lw.ⵠᐃⵠⵠⲆ ? ya : 150);
      f = c - ΔᐃⲆⲆ;
      if ((d.ΔΔⲆ & lw.ⵠᐃⵠⵠⲆ) > 0 && f > 0 && f < 320) {
        e = Ot;
      }
      ⲆᐃᐃΔ = d.x2 + 80 + (d.ΔΔⲆ & lw.ⲆΔΔⵠΔ ? 0 : -200);
      f = ⲆᐃᐃΔ - b;
      if ((d.ΔΔⲆ & lw.ⲆΔΔⵠΔ) > wj && f > Db && f < 320) {
        e = Ug;
      }
      ᐃⲆⲆⲆ = d.y2 - 200 + (ya === (d.ΔΔⲆ & lw.ΔᐃᐃⲆΔ) ? -200 : 0);
      f = ᐃⲆⲆⲆ - c;
      if ((d.ΔΔⲆ & lw.ΔᐃᐃⲆΔ) > 0 && f > 0 && f < 320) {
        e = Ug;
      }
      if (b >= ΔⵠⵠⲆ && ⲆᐃᐃΔ >= b && c >= ΔᐃⲆⲆ && c <= ᐃⲆⲆⲆ) {
        return e;
      } else {
        return Da;
      }
    };
    this.ⵠⲆⲆΔⵠ = function (a, b, c) {
      var d = mf.Ⲇᐃᐃᐃ[a];
      ΔⵠⵠⲆ = d.x1 + 30;
      ΔᐃⲆⲆ = d.y1 + 250;
      ⲆᐃᐃΔ = d.x2 + 80;
      ᐃⲆⲆⲆ = d.y2 - 200;
      if (ΔⵠⵠⲆ <= b && b <= ⲆᐃᐃΔ && ΔᐃⲆⲆ <= c && ᐃⲆⲆⲆ >= c) {
        return Math.min(b - ΔⵠⵠⲆ, ⲆᐃᐃΔ - b, c - ΔᐃⲆⲆ, ᐃⲆⲆⲆ - c);
      }
      var e = -1000000;
      if (b - ΔⵠⵠⲆ < 0) {
        e = Math.max(e, b - ΔⵠⵠⲆ);
      } else if (ⲆᐃᐃΔ - b < zl) {
        e = Math.max(e, ⲆᐃᐃΔ - b);
      }
      ⲆⵠⵠⵠᐃΔⵠ = -1000000;
      if (ΔᐃⲆⲆ > c || c > ᐃⲆⲆⲆ) {
        if (c - ΔᐃⲆⲆ < Pg) {
          ⲆⵠⵠⵠᐃΔⵠ = Math.max(ⲆⵠⵠⵠᐃΔⵠ, c - ΔᐃⲆⲆ);
        } else {
          ⲆⵠⵠⵠᐃΔⵠ = Math.max(ⲆⵠⵠⵠᐃΔⵠ, ᐃⲆⲆⲆ - c);
        }
        e = e !== -1000000 && ⲆⵠⵠⵠᐃΔⵠ !== -1000000 ? Math.min(e, ⲆⵠⵠⵠᐃΔⵠ) : ⲆⵠⵠⵠᐃΔⵠ;
      }
      return e;
    };
    this.ⲆⲆᐃⲆᐃⲆⲆ = function (b, c, d) {
      var e = d;
      var f = c;
      x(e, f, "isl", b, hs);
      for (var g = 0; g < Mq; g++) {
        for (var h = zl; h < 3; h++) {
          x(e - h, f - g, "iblk", 0);
          x(e + h, f - g, "iblk", wj);
          x(e + h, f + g, "iblk", Bg);
          x(e - h, f + g, "iblk", 0);
        }
      }
      if (b === 0) {
        for (g = Db; g < jk; g++) {
          x(e - g, f - nj, "iblk", Rq);
          x(e + g, f - eh, "iblk", 0);
          x(e - g, f + ks, "iblk", ps);
          x(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          x(e - nq, f + g, "iblk", gu);
          x(e + 3, f + g, "iblk", 0);
          x(e - ig, f - g, "iblk", 0);
          x(e + 3, f - g, "iblk", 0);
        }
        x(e - Nb, f - Dt, "iblk", Hi);
        x(e - ea, f - gl, "iblk", Rs);
        x(e + Hj, f + 4, "iblk", mj);
        x(e + 3, f + Jb, "iblk", 0);
      } else if (b === rg) {
        for (g = 0; g < 3; g++) {
          x(e - g, f - eg, "iblk", 0);
          x(e + g, f - ba, "iblk", Db);
          x(e - g, f + 4, "iblk", 0);
          x(e + g, f + 4, "iblk", tg);
        }
        for (g = 0; Og > g; g++) {
          x(e - 3, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", Bg);
          x(e - 3, f - g, "iblk", ps);
          x(e + ci, f - g, "iblk", Hi);
        }
      } else if (b === ih) {
        for (g = Rs; g < Yg; g++) {
          x(e - g, f - ks, "iblk", Zj);
          x(e + g, f - ks, "iblk", 0);
          x(e - g, f + 4, "iblk", 0);
          x(e + g, f + ks, "iblk", tt);
        }
        for (g = gu; hl > g; g++) {
          x(e - 3, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", ya);
          x(e - 3, f - g, "iblk", Zj);
          x(e + Wg, f - g, "iblk", zl);
        }
      }
    };
    this.ⵠᐃⲆΔᐃⵠᐃᐃⵠ = function (b) {
      for (var c = zl; mf.Ⲇᐃᐃᐃ.length > c && b > Pg; c++) {
        var d = mf.Ⲇᐃᐃᐃ[c];
        if (d.ⵠⵠⵠ === mf.ΔⲆΔⵠΔ && d.w > 1800 && d.ΔⵠⲆ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / sa);
          var g = Math.floor((d.y1 + d.ΔⵠⲆ / Yl) / 100);
          mf.ⲆⲆᐃⲆᐃⲆⲆ(b % fn, f, g);
          for (var h = gu; h < gl; h++) {
            var j = g - 2 + Math.floor(mf.ΔΔΔⵠⲆ.get() * ul);
            var k = f - 3 + Math.floor(mf.ΔΔΔⵠⲆ.get() * 6);
            if (Vw.ᐃᐃⲆⲆ[j][k].s === undefined) {
              x(j, k, "plm", h);
            }
            j = g - Nb + Math.floor(eh * mf.ΔΔΔⵠⲆ.get());
            k = f - ea + Math.floor(mf.ΔΔΔⵠⲆ.get() * 6);
            if (Vw.ᐃᐃⲆⲆ[j][k].plm === undefined) {
              x(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(mf.ΔΔΔⵠⲆ.get() * 4);
          k = f - Ob + Math.floor(mf.ΔΔΔⵠⲆ.get() * 6);
          if (Vw.ᐃᐃⲆⲆ[j][k].plm === undefined && Vw.ᐃᐃⲆⲆ[j][k].s === undefined) {
            x(j, k, "p", 0, Xn);
          }
          b--;
        }
      }
    };
    this.ⵠⵠⵠΔⵠⵠⲆΔⵠ = function (g) {
      mf.ΔΔΔⵠⲆ.ᐃΔΔΔᐃ(g);
      var j = Hi;
      while (mk) {
        if (++j > 10000) {
          return;
        }
        mf.Ⲇᐃᐃᐃ = [];
        if (In === mf.ⵠⵠΔⲆᐃ && (lw.ᐃᐃⲆΔⵠ === mf.mode || lw.ⵠΔᐃᐃⲆ === mf.mode || mf.mode === lw.ⵠᐃᐃⲆⲆ)) {
          mf.ⵠⵠΔⲆᐃ = Kr;
        }
        if (mf.mode === lw.ΔΔΔΔᐃ) {
          mf.Ⲇᐃᐃᐃ.push(new mf.ΔⵠΔᐃᐃⲆⵠ(mf.ⵠΔΔⵠⲆ, Gl, 2, 80, 80, 15));
        } else if (mf.mode === lw.ⲆⲆⲆⲆᐃ) {
          mf.Ⲇᐃᐃᐃ.push(new mf.ΔⵠΔᐃᐃⲆⵠ(mf.ⵠΔΔⵠⲆ, Nb, dg, 150, 150, 15));
        } else if (mf.ⵠⵠΔⲆᐃ !== ps && Rs < mf.ⵠⵠΔⲆᐃ.length && Tr < mf.ⵠⵠΔⲆᐃ[gu].length) {
          for (var k = 0; k < mf.ⵠⵠΔⲆᐃ.length; k++) {
            if ((G = mf.ⵠⵠΔⲆᐃ[k])[wj] !== Rs) {
              break;
            }
            var o = lw.ⵠΔΔⵠⲆ;
            switch (G[1]) {
              case "FOREST":
                o = mf.ⵠΔΔⵠⲆ;
                break;
              case "WINTER":
                o = mf.ᐃΔΔΔⵠⵠΔ;
                break;
              case "DESERT":
                o = mf.ᐃⵠⵠᐃΔᐃΔ;
                break;
              case "LAVA":
                o = mf.ⵠⵠⲆΔⵠΔΔ;
                break;
              case "DRAGON":
                o = mf.ΔᐃΔΔⲆⲆⲆ;
            }
            mf.Ⲇᐃᐃᐃ.push(new mf.ΔⵠΔᐃᐃⲆⵠ(o, G[dg], G[Ob], G[nb], G[5], G[6], G[7]));
          }
        } else if (Bg !== mf.ⵠⵠΔⲆᐃ) {
          for (k = tt; mf.ⵠⵠΔⲆᐃ.length > k; k++) {
            var t = mf.ⵠⵠΔⲆᐃ[k];
            o = lw.ⵠΔΔⵠⲆ;
            switch (t[tg]) {
              case "FOREST":
                o = mf.ⵠΔΔⵠⲆ;
                break;
              case "WINTER":
                o = mf.ᐃΔΔΔⵠⵠΔ;
                break;
              case "DESERT":
                o = mf.ᐃⵠⵠᐃΔᐃΔ;
                break;
              case "LAVA":
                o = mf.ⵠⵠⲆΔⵠΔΔ;
                break;
              case "DRAGON":
                o = mf.ΔᐃΔΔⲆⲆⲆ;
            }
            if (f(o, t[1], t[Zh], 0, (k + xt) * 10) === 0) {
              break;
            }
          }
          if (mf.ⵠⵠΔⲆᐃ.length !== k) {
            continue;
          }
        }
        break;
      }
      ⵠⵠⲆΔⵠΔⲆᐃΔ();
      var v = [];
      for (var h = 0; mf.ⲆⵠⲆⵠᐃ > h; h++) {
        v[h] = new Array(mf.ⵠⲆᐃⲆᐃ);
        for (var A = 0; A < mf.ⵠⲆᐃⲆᐃ; A++) {
          v[h][A] = Lr;
        }
      }
      for (h = 0; h < mf.Ⲇᐃᐃᐃ.length; h++) {
        for (var B = (t = mf.Ⲇᐃᐃᐃ[h]).x2 / 100, C = t.y2 / Y, D = t.x1 / 100; B >= D; D++) {
          for (var E = t.y1 / 100; E <= C; E++) {
            v[E][D] = hs;
          }
        }
      }
      for (E = 0; E < mf.ⲆⵠⲆⵠᐃ; E++) {
        for (D = ps; mf.ⵠⲆᐃⲆᐃ > D; D++) {
          if (v[E][D] === 0) {
            e(v, D, E);
          }
        }
      }
      Vw = {
        w: mf.ⵠⲆᐃⲆᐃ,
        ΔⵠⲆ: mf.ⲆⵠⲆⵠᐃ,
        ᐃᐃⲆⲆ: []
      };
      for (h = 0; h < mf.ⲆⵠⲆⵠᐃ; h++) {
        Vw.ᐃᐃⲆⲆ[h] = [];
      }
      if (Bg !== mf.ⵠⵠΔⲆᐃ && mf.ⵠⵠΔⲆᐃ.length > 0 && mf.ⵠⵠΔⲆᐃ[0].length > ea) {
        for (k = tg; k < mf.ⵠⵠΔⲆᐃ.length; k++) {
          if ((G = mf.ⵠⵠΔⲆᐃ[k])[mk] === "isl") {
            mf.ⲆⲆᐃⲆᐃⲆⲆ(G[Jt], G[fn], G[4]);
          }
        }
      } else {
        mf.ⵠᐃⲆΔᐃⵠᐃᐃⵠ(mf.ⲆΔᐃⲆⵠⵠⲆ);
      }
      if (mf.ⵠⵠΔⲆᐃ !== 0 && mf.ⵠⵠΔⲆᐃ.length > 0 && mf.ⵠⵠΔⲆᐃ[0].length > 3) {
        var F = [];
        for (k = 0; mf.ⵠⵠΔⲆᐃ.length > k; k++) {
          var G;
          if ((G = mf.ⵠⵠΔⲆᐃ[k])[0] === 1) {
            if (G[1] === "r") {
              x(G[Ks], G[Jt], "wtb", mj, Oq);
              F.push([G[3], G[2], G[Og]]);
            } else {
              x(G[4], G[Wg], G[1], G[pq], G[5]);
            }
          }
        }
        q(zl, F);
        F = [];
      } else {
        for (h = 0; h < mf.Ⲇᐃᐃᐃ.length; h++) {
          t = mf.Ⲇᐃᐃᐃ[h];
          if (mf.mode === lw.ⲆⲆⲆⲆᐃ) {
            if (mf.ⵠΔΔⵠⲆ === t.ⵠⵠⵠ) {
              b(h, t.w / (Yh * Cn));
            }
          } else {
            if (mf.ⵠΔΔⵠⲆ === t.ⵠⵠⵠ) {
              c(h, t.w / 10000);
            }
            if (mf.ⵠⵠⲆΔⵠΔΔ === t.ⵠⵠⵠ) {
              i(h, t.w / (Ls * 100));
            }
            if (t.ⵠⵠⵠ === mf.ᐃΔΔΔⵠⵠΔ) {
              m(h, t.w / (No * 100));
            }
            if (mf.ᐃⵠⵠᐃΔᐃΔ === t.ⵠⵠⵠ) {
              p(h, t.w / (il * Yh));
            }
            if (t.ⵠⵠⵠ === mf.ΔᐃΔΔⲆⲆⲆ) {
              s(h);
            }
          }
        }
      }
      Nt("isl", 1);
      Nt("wtb", Il);
      Nt("la", ie);
      Nt("c", mk);
      Nt("s", Xn);
      Nt("f", yg);
      Nt("p", yg);
      Nt("g", Xn);
      Nt("d", jh);
      Nt("a", js);
      Nt("re", 1);
      Nt("m", 1);
      gb = [];
      mf.ᐃⲆⲆᐃⵠᐃⵠⲆⵠ(Vw);
    };
    this.ⲆΔⵠⲆ = x;
    this.ᐃⲆⲆᐃⵠᐃⵠⲆⵠ = function (b) {
      for (var c = 0; c < this.ⲆⵠⲆⵠᐃ; c++) {
        for (var d = Rs; this.ⵠⲆᐃⲆᐃ > d; d++) {
          if (!b.ᐃᐃⲆⲆ[c]) {
            b.ᐃᐃⲆⲆ[c] = [];
          }
          if (b.ᐃᐃⲆⲆ[c][d]) {
            var e = b.ᐃᐃⲆⲆ[c][d];
            if (e.de && e.de.length > Db) {
              for (var f = ps; e.de.length > f; f++) {
                if (e.de[f] && e.de[f].length > 0) {
                  e.de = e.de[f][mj];
                  if (f >= 41 && f <= 49) {
                    e.de.scale = hl;
                    var g = Math.floor(Math.random() * 3 + 1);
                    e.de.ⲆⲆⵠ = [];
                    for (var h = Zj; g > h; h++) {
                      e.de.ⲆⲆⵠ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Zh * (Math.PI * Math.random()),
                        ⵠⲆⲆⲆ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (f >= 19 && f <= 26) {
                    e.de.scale = 3;
                    g = Math.floor(Math.random() * Ob + 1);
                    e.de.ⲆⲆⵠ = [];
                    for (h = mj; h < g; h++) {
                      e.de.ⲆⲆⵠ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ⵠⲆⲆⲆ: 19 + Math.floor(Math.random() * Hr)
                      });
                    }
                  } else if (f <= _h || f >= 27 && f <= 40) {
                    e.de.angle = In;
                    e.de.scale = 2;
                    e.de.ⵠⲆⲆⲆ = f;
                  } else {
                    e.de.angle = Math.random() * Math.PI * Zg;
                    e.de.scale = jh;
                    e.de.ⵠⲆⲆⲆ = f;
                  }
                }
              }
            }
            l(e, "p", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(C, lb, 1, 0, Ra, gn));
            l(e, "t", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, Te, Ol, 0, It, 10));
            l(e, "s", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(xo, ie, 1, 0, Ra, 10));
            l(e, "g", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(sl, xt, 1, 0, jn, 10));
            l(e, "d", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, hd, 1, Zj, gn, 10));
            l(e, "b", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ei, za, 1, 0, gn, 10));
            l(e, "f", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(ts, 1, 1, zl, 10, J));
            l(e, "sw", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10));
            l(e, "gw", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(sl, 1, fl, 0, jn, yt));
            l(e, "dw", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 1, 1, 0, Th, 10));
            l(e, "a", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, jh, 1, 0, Ra, kk));
            l(e, "cs", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(_g, Oq, 1, 0, 10, vr));
            l(e, "plm", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 1, 1, tt, Kg, Kg));
            l(e, "re", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Jn, cu, 1, Da, 10, 10));
            l(e, "c", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 1, za, tt, Bo, Kg));
            l(e, "m", new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, hs, 1, ps, 10, te));
          } else {
            b.ᐃᐃⲆⲆ[c][d] = [];
          }
        }
      }
    };
    this.time = Xr.ⲆᐃΔ;
    this.ΔᐃᐃΔⲆ = {
      ᐃΔΔΔᐃ: 0,
      ᐃⵠᐃⲆΔ: Eh,
      now: ya,
      translate: {
        y: Zj,
        x: ps
      }
    };
    this.ᐃⲆΔΔᐃⲆΔⲆⲆ = function () {
      this.Δⵠⵠᐃᐃ = [];
      this.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ] = [];
      this.ⲆΔⲆ[ow.ⵠⲆΔⵠᐃ] = [];
      this.ⲆΔⲆ[ow.ΔᐃᐃⲆⲆ] = [];
      this.ⲆΔⲆ[ow.ᐃΔΔⵠΔ] = [];
      this.ⲆΔⲆ[ow.ⵠᐃΔⲆᐃ] = [];
      this.ⲆΔⲆ[ow.ⵠⵠΔⵠⲆ] = [];
      this.ⲆΔⲆ[ow.ⲆᐃⲆΔΔ] = [];
      this.ⲆΔⲆ[ow.Ⲇᐃⵠᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ⲆⵠᐃΔΔ] = [];
      this.ⲆΔⲆ[ow.ᐃⲆⵠᐃᐃ] = [];
      this.ⲆΔⲆ[ow.ⵠⲆᐃᐃⲆ] = [];
      this.ⲆΔⲆ[ow.ⲆᐃⲆᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ⵠᐃⵠᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ⲆᐃⵠΔΔ] = [];
      this.ⲆΔⲆ[ow.ΔΔΔⵠⵠ] = [];
      this.ⲆΔⲆ[ow.ⲆΔᐃΔΔ] = [];
      this.ⲆΔⲆ[ow.ΔⵠⵠΔⲆ] = [];
      this.ⲆΔⲆ[ow.ᐃⵠᐃᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ᐃⵠΔΔΔ] = [];
      this.ⲆΔⲆ[ow.ⲆⵠΔᐃᐃ] = [];
      this.ⲆΔⲆ[ow.ⲆΔⲆⵠΔ] = [];
      this.ⲆΔⲆ[ow.ⲆⲆΔⲆⵠ] = [];
      this.ⲆΔⲆ[ow.ᐃⲆⲆᐃΔ] = [];
      this.ⲆΔⲆ[ow.ⵠΔⲆⲆΔ] = [];
      this.ⲆΔⲆ[ow.ⲆᐃΔⲆⵠ] = [];
      this.ⲆΔⲆ[ow.ⲆΔᐃⵠⲆ] = [];
      this.ⲆΔⲆ[ow.ΔⵠᐃⲆⵠ] = [];
      this.ⲆΔⲆ[ow.ΔⲆⵠⵠⵠ] = [];
      this.ⲆΔⲆ[ow.ⲆⲆⵠⵠΔ] = [];
      this.ⲆΔⲆ[ow.ⲆⵠⲆⵠⵠ] = [];
      this.ⲆΔⲆ[ow.ⲆⲆⲆⲆⵠ] = [];
      this.ⲆΔⲆ[ow.ΔᐃⵠⲆⲆ] = [];
      this.ⲆΔⲆ[ow.ᐃᐃᐃᐃᐃ] = [];
      this.ⲆΔⲆ[ow.ⵠᐃⲆᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ᐃΔⵠⵠΔ] = [];
      this.ⲆΔⲆ[ow.ᐃⵠⵠⲆᐃ] = [];
      this.ⲆΔⲆ[ow.ΔⲆⵠΔΔ] = [];
      this.ⲆΔⲆ[ow.ΔⵠⵠⲆᐃ] = [];
      this.ⲆΔⲆ[ow.ⵠΔᐃⲆΔ] = [];
      this.ⲆΔⲆ[ow.ᐃΔⵠⵠⵠ] = [];
      this.ⲆΔⲆ[ow.ⵠΔᐃΔΔ] = [];
      this.ⲆΔⲆ[ow.Δⵠᐃⵠᐃ] = [];
      this.ⲆΔⲆ[ow.Ⲇᐃⵠⵠⵠ] = [];
      this.ⲆΔⲆ[ow.ᐃⲆΔᐃⲆ] = [];
      this.ⲆΔⲆ[ow.ΔⵠⵠΔΔ] = [];
      this.ⲆΔⲆ[ow.ΔΔⲆᐃⲆ] = [];
      this.ⲆΔⲆ[ow.ΔⵠΔⲆΔ] = [];
      this.ⲆΔⲆ[ow.ⵠΔⲆⵠᐃ] = [];
      this.ⲆΔⲆ[ow.ᐃΔΔⵠᐃ] = [];
      this.ⲆΔⲆ[ow.ⲆᐃΔᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ⲆⵠᐃᐃΔ] = [];
      this.ⲆΔⲆ[ow.ⵠᐃⵠᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ᐃⲆⲆⲆⲆ] = [];
      this.ⲆΔⲆ[ow.ⲆⲆⵠⵠᐃ] = [];
      this.ⲆΔⲆ[ow.ΔⲆΔΔⲆ] = [];
      this.ⲆΔⲆ[ow.ⵠⵠⵠⲆΔ] = [];
      this.ⲆΔⲆ[ow.ⵠⵠⲆⵠΔ] = [];
      this.ⲆΔⲆ[ow.ΔⵠΔⵠⲆ] = [];
      this.ⲆΔⲆ[ow.ⵠⵠⵠⵠⲆ] = [];
      this.ⲆΔⲆ[ow.ᐃΔᐃⵠΔ] = [];
      this.ⲆΔⲆ[ow.ΔΔⵠⲆⲆ] = [];
      this.ⲆΔⲆ[ow.ᐃⵠⵠᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ⲆⵠΔᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ⲆⲆΔⵠⲆ] = [];
      this.ⲆΔⲆ[ow.ⵠᐃⲆⲆΔ] = [];
      this.ⲆΔⲆ[ow.ⲆⲆᐃⲆⵠ] = [];
      this.ⲆΔⲆ[ow.ⲆⲆᐃⲆᐃ] = [];
      this.ⲆΔⲆ[ow.ⲆⵠⲆᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ⲆᐃᐃⲆⵠ] = [];
      this.ⲆΔⲆ[ow.ⵠⵠⲆᐃΔ] = [];
      this.ⲆΔⲆ[ow.ᐃⲆⵠᐃΔ] = [];
      this.ⲆΔⲆ[ow.ⵠⲆⲆᐃΔ] = [];
      this.ⲆΔⲆ[ow.ᐃΔⲆⲆⲆ] = [];
      this.ⲆΔⲆ[ow.ⵠΔⵠᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ⵠⵠᐃΔⲆᐃΔ] = [];
      this.ⲆΔⲆ[ow.ᐃⵠΔⵠⵠ] = [];
      this.ⲆΔⲆ[ow.ᐃΔⲆⲆΔ] = [];
      this.ⲆΔⲆ[ow.ⲆⵠⵠΔⲆ] = [];
      this.ⲆΔⲆ[ow.ᐃⲆᐃⲆΔ] = [];
      this.ⲆΔⲆ[ow.ⵠᐃΔΔΔⵠΔ] = [];
      this.ⲆΔⲆ[ow.ⵠⲆⲆⵠΔⲆⵠ] = [];
      this.ⲆΔⲆ[ow.ⵠⲆⵠΔⲆⵠⵠ] = [];
      this.ⲆΔⲆ[ow.ⵠΔⵠΔⵠᐃⵠ] = [];
      this.ⲆΔⲆ[ow.ⵠΔΔⲆᐃ] = [];
      this.ⲆΔⲆ[ow.ⵠΔΔⵠΔᐃΔ] = [];
      this.ⲆΔⲆ[ow.Δⵠᐃᐃⵠ] = [];
      this.ⲆΔⲆ[ow.Δᐃᐃᐃᐃ] = [];
      this.ⲆΔⲆ[ow.ⵠΔᐃᐃᐃ] = [];
      this.ⲆΔⲆ[ow.ⵠΔᐃΔⵠ] = [];
      this.ⲆΔⲆ[ow.ΔΔΔΔΔ] = [];
      this.ⲆΔⲆ[ow.ⵠᐃΔⲆⲆ] = [];
    };
    this.ⵠᐃᐃⲆⵠⲆⵠⵠⲆ = function (a) {
      if (this.Δⵠⵠᐃᐃ[a]) {
        ΔΔΔΔ = this.Δⵠⵠᐃᐃ[a].type;
        this.Δⵠⵠᐃᐃ[a] = null;
        for (var b = this.ⲆΔⲆ[ΔΔΔΔ], c = Db; b.length > c; c++) {
          if (a == b[c].ᐃⲆᐃᐃ) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⲆⲆⲆΔⵠⵠΔΔᐃ = function (a, b) {
      for (var c = Kh; this.ⲆΔⲆ[ow.ⵠᐃⵠᐃⵠ].length > c; c++) {
        var d = this.ⲆΔⲆ[ow.ⵠᐃⵠᐃⵠ][c];
        if (b === Math.floor(d.x / Ak) && a === Math.floor(d.y / sh)) {
          return js;
        }
      }
      return Rq;
    };
    this.ⲆΔΔⲆⵠⲆⲆᐃⵠ = function (a, b) {
      for (var c = tg; this.ⲆΔⲆ[ow.ⲆᐃⲆᐃⵠ].length > c; c++) {
        var d = this.ⲆΔⲆ[ow.ⲆᐃⲆᐃⵠ][c];
        if (Math.floor(d.x / 100) == a && b == Math.floor(d.y / 100)) {
          return xh;
        }
      }
      return false;
    };
    this.Δᐃⵠⵠⵠ = function (j) {
      for (var e = 0; j.length > e; e++) {
        ᐃⵠⲆΔ = j[e];
        if (ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ != ᐃⵠⲆΔ.angle) {
          var k = Math.PI * Gl;
          ᐃⵠⲆΔ.angle = (ᐃⵠⲆΔ.angle + k) % k;
          ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ = (ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ + k) % k;
          if (ᐃⵠⲆΔ.angle != ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ) {
            var q = ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ - ᐃⵠⲆΔ.angle;
            var B = Math.abs(q);
            if (Math.PI < B) {
              B = Math.PI * 2 - B;
            }
            var D = _w * (B / Math.PI * 3 * lw.ⲆᐃⲆⵠⲆΔΔ);
            if (q > Math.PI) {
              ᐃⵠⲆΔ.angle -= D;
            } else if (-Math.PI > q) {
              ᐃⵠⲆΔ.angle += D;
            } else if (q < 0) {
              ᐃⵠⲆΔ.angle -= D;
            } else {
              ᐃⵠⲆΔ.angle += D;
            }
            ᐃⵠⲆΔ.angle = (ᐃⵠⲆΔ.angle + k) % k;
            if (Math.abs(ᐃⵠⲆΔ.angle - ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ) < D) {
              ᐃⵠⲆΔ.angle = ᐃⵠⲆΔ.ᐃⲆΔⵠⵠΔⵠ;
            }
          }
        }
        Math.floor(ᐃⵠⲆΔ.r.y / Jh);
        Math.floor(ᐃⵠⲆΔ.r.x / _j);
        if (ᐃⵠⲆΔ.r.x != ᐃⵠⲆΔ.x || ᐃⵠⲆΔ.y != ᐃⵠⲆΔ.r.y) {
          if (ᐃⵠⲆΔ.action & iw.IDLE) {
            ᐃⵠⲆΔ.action -= iw.IDLE;
          }
          ᐃⵠⲆΔ.action |= iw.ⵠⵠⵠᐃΔΔⵠ;
          var E = ᐃⵠΔⲆ.ᐃᐃΔΔⲆⲆⲆ(ᐃⵠⲆΔ, ᐃⵠⲆΔ.r) + Math.PI;
          var F = _w * ᐃⵠⲆΔ.ᐃⵠⵠⵠⲆ;
          var G = ᐃⵠΔⲆ.ΔⵠⵠΔΔΔⲆ(F, E);
          if (ᐃⵠΔⲆ.ⵠΔⵠᐃⵠⵠⵠ(ᐃⵠΔⲆ.ⲆⲆΔⵠⲆΔⲆ(ᐃⵠⲆΔ, ᐃⵠⲆΔ.r)) > ᐃⵠΔⲆ.ⵠΔⵠᐃⵠⵠⵠ(G)) {
            ᐃⵠΔⲆ.ⲆΔΔᐃⲆⲆⵠ(ᐃⵠⲆΔ, G);
          } else {
            if (ᐃⵠⲆΔ.action & iw.ⵠⵠⵠᐃΔΔⵠ) {
              ᐃⵠⲆΔ.action -= iw.ⵠⵠⵠᐃΔΔⵠ;
            }
            ᐃⵠⲆΔ.action |= iw.IDLE;
            ᐃⵠΔⲆ.ΔⵠᐃΔⵠⲆΔ(ᐃⵠⲆΔ.r, ᐃⵠⲆΔ);
          }
        }
        if (ᐃⵠⲆΔ.ᐃⲆᐃⲆⵠ) {
          var H = ᐃⵠⲆΔ.bubbles;
          var I = H.length;
          if (Da === I || Xr.ᐃΔᐃᐃᐃⵠᐃ > I && H[I - Ug].ΔΔᐃΔᐃ < 0.95) {
            H.push({
              id: Math.floor(Math.random() * ΔΔ[Xr.ⵠⲆᐃᐃⵠΔᐃ][zl].length),
              x: Math.floor(ᐃⵠⲆΔ.x + Math.random() * 80 - 40),
              y: Math.floor(ᐃⵠⲆΔ.y + Math.random() * 80 - 40),
              ΔΔᐃΔᐃ: 1
            });
          }
          for (var K = 0; K < I; K++) {
            H[K].ΔΔᐃΔᐃ = Math.max(tt, H[K].ΔΔᐃΔᐃ - _w);
          }
          for (K = gu; K < I; K++) {
            if (H[K].ΔΔᐃΔᐃ === Lr) {
              H.splice(K, 1);
              break;
            }
          }
        }
        var L = In;
        if (ᐃⵠⲆΔ.ⵠⲆΔΔ && vf.ⵠⵠᐃⲆᐃ) {
          var M = ᐃⵠⲆΔ.ᐃΔᐃⵠⲆ;
          I = M.length;
          if (ᐃⵠⲆΔ.ΔⵠᐃⲆᐃⲆⵠ > 0 && _r.ⲆⵠΔᐃⵠ !== ᐃⵠⲆΔ.ΔⲆᐃΔΔ && ᐃⵠⲆΔ.ΔⲆᐃΔΔ !== _r.ⲆⲆΔⵠⲆ && _r.ΔⵠΔΔⵠ !== ᐃⵠⲆΔ.ΔⲆᐃΔΔ && ᐃⵠⲆΔ.ΔⲆᐃΔΔ !== _r.ⵠᐃⲆⲆΔ && ᐃⵠⲆΔ.ΔⲆᐃΔΔ !== _r.ⲆⵠΔΔΔ && !ᐃⵠⲆΔ.ᐃⲆᐃⲆⵠ && (L = hd, I === 0 || Xr.ⵠⵠᐃⲆⲆⵠⵠ < ᐃⵠΔⲆ.ΔΔⵠΔ(M[I - js], ᐃⵠⲆΔ))) {
            var N = -ᐃⵠⲆΔ.angle;
            var O = Co * (Math.cos(N) * 45);
            var Q = Co * (Math.sin(N) * 45);
            M.push({
              x: ᐃⵠⲆΔ.x + O,
              y: ᐃⵠⲆΔ.y + Q,
              r: 8,
              alpha: 0.8
            });
            M.push({
              x: ᐃⵠⲆΔ.x - O,
              y: ᐃⵠⲆΔ.y - Q,
              r: Hr,
              alpha: 0.8
            });
            M.push({
              x: ᐃⵠⲆΔ.x,
              y: ᐃⵠⲆΔ.y,
              r: 24,
              alpha: Ot
            });
          }
          for (K = zl; I > K; K++) {
            M[K].alpha = Math.max(0, M[K].alpha - _w / 2.2);
            M[K].r += Cs * _w;
          }
          if (M.length > 0 && M[0].alpha === 0) {
            M.splice(Rs, yg);
          }
          var R = ᐃⵠⲆΔ.ΔⵠⵠΔᐃ;
          I = R.length;
          var S = -1;
          var U = Math.max(Rq, Math.sign(ᐃⵠⲆΔ.ⲆᐃⵠⵠⵠΔΔ));
          var V = Math.max(0, Math.sign(ᐃⵠⲆΔ.ⲆΔΔΔᐃ));
          Math.max(0, Math.sign(ᐃⵠⲆΔ.ΔΔⲆΔⲆ));
          var W = Math.max(0, Math.sign(ᐃⵠⲆΔ.ⵠⲆΔᐃⵠ));
          var X = Math.max(0, Math.sign(ᐃⵠⲆΔ.ΔΔᐃΔⵠ));
          if (ᐃⵠⲆΔ.ⲆᐃⵠⵠⵠΔΔ > 0 || ᐃⵠⲆΔ.ΔΔⲆΔⲆ > 0) {
            S = Xr.ⵠΔⲆⲆⲆⵠⲆ;
          } else if (Db < ᐃⵠⲆΔ.ΔΔᐃΔⵠ) {
            S = Xr.ᐃΔⵠᐃⵠⵠⵠ;
          } else if (mj < ᐃⵠⲆΔ.ⲆΔΔΔᐃ) {
            S = Xr.ᐃᐃⵠᐃᐃᐃΔ;
          } else if (ᐃⵠⲆΔ.ⵠⲆΔᐃⵠ > 0) {
            S = Xr.ΔΔᐃΔᐃⲆᐃ;
          }
          if (_r.ⵠⲆᐃⲆΔ === ᐃⵠⲆΔ.ΔⲆᐃΔΔ && (U | V | W | X) === ie) {
            S = Xr.ΔᐃΔΔΔᐃⲆ;
            var Y = ᐃⵠⲆΔ.ⲆΔΔΔⵠ - Math.PI / Pn;
            var Z = kb;
            var _ = 11;
            var aa = Xr.ⲆᐃⲆⵠⲆⵠⵠ;
          } else if (ᐃⵠⲆΔ.ΔⲆᐃΔΔ === _r.ΔΔⵠⲆⲆ && (U | V | W | X) == 1) {
            S = Xr.ΔᐃᐃⵠΔΔⵠ;
            Y = ᐃⵠⲆΔ.ⲆΔΔΔⵠ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = Xr.ⲆᐃⲆⵠⲆⵠⵠ;
          } else if (ᐃⵠⲆΔ.ΔⲆᐃΔΔ === _r.ᐃⵠⵠᐃⵠ && (U | V | W | X) == 1) {
            S = Xr.ⵠⵠⵠᐃⲆΔΔ;
            Y = ᐃⵠⲆΔ.ⲆΔΔΔⵠ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = Eh + ba;
            aa = Xr.ⲆᐃⲆⵠⲆⵠⵠ * 0.9;
          } else {
            Y = ᐃⵠⲆΔ.angle;
            Z = sj;
            _ = 11;
            aa = Xr.ⲆᐃⲆⵠⲆⵠⵠ;
          }
          if (ᐃⵠⲆΔ.ΔⲆᐃΔΔ === _r.ⲆⵠΔᐃⵠ || ᐃⵠⲆΔ.ΔⲆᐃΔΔ === _r.ⲆⲆΔⵠⲆ || ᐃⵠⲆΔ.ΔⲆᐃΔΔ === _r.ⲆⵠΔΔΔ || _r.ⵠᐃⲆⲆΔ === ᐃⵠⲆΔ.ΔⲆᐃΔΔ || _r.ΔⵠΔΔⵠ === ᐃⵠⲆΔ.ΔⲆᐃΔΔ || ᐃⵠⲆΔ.ᐃⲆᐃⲆⵠ) ;else if (_r.ⵠᐃᐃⲆᐃ === ᐃⵠⲆΔ.ΔⲆᐃΔΔ) {
            if (I === 0 || ᐃⵠΔⲆ.ΔΔⵠΔ(R[I - 1], ᐃⵠⲆΔ) > Xr.ⲆᐃᐃᐃⲆⲆⵠ) {
              R.push({
                x: ᐃⵠⲆΔ.x,
                y: ᐃⵠⲆΔ.y,
                angle: ᐃⵠⲆΔ.ⲆΔΔΔⵠ,
                alpha: hd,
                id: Xr.ᐃⵠⵠⲆᐃⵠᐃ
              });
            }
          } else if (S != -cu && L === 0 && (I === 0 || ᐃⵠΔⲆ.ΔΔⵠΔ(R[I - 1], ᐃⵠⲆΔ) > aa)) {
            ᐃⵠⲆΔ.ᐃΔΔᐃⵠⵠⲆ++;
            if (Math.abs(ᐃⵠⲆΔ.x - ᐃⵠⲆΔ.r.x) > rg && Math.abs(ᐃⵠⲆΔ.y - ᐃⵠⲆΔ.r.y) > 1) {
              if (ᐃⵠⲆΔ.x < ᐃⵠⲆΔ.r.x && ᐃⵠⲆΔ.y > ᐃⵠⲆΔ.r.y || ᐃⵠⲆΔ.r.x < ᐃⵠⲆΔ.x && ᐃⵠⲆΔ.r.y > ᐃⵠⲆΔ.y) {
                if (ᐃⵠⲆΔ.ᐃΔΔᐃⵠⵠⲆ % ss) {
                  O = -_ * Co;
                  Q = -_ * Co;
                } else {
                  Q = _ * Co;
                  O = Co * _;
                }
              } else if (ᐃⵠⲆΔ.ᐃΔΔᐃⵠⵠⲆ % Nb) {
                O = Co * _;
                Q = Co * -_;
              } else {
                Q = _ * Co;
                O = Co * -_;
              }
            } else if (ᐃⵠⲆΔ.ᐃΔΔᐃⵠⵠⲆ % Nb) {
              O = Co * (Z * Math.cos(Y));
              Q = Co * (Math.sin(Y) * Z);
            } else {
              O = Z * -Math.cos(Y) * Co;
              Q = -Math.sin(Y) * Z * Co;
            }
            R.push({
              x: ᐃⵠⲆΔ.x + O,
              y: ᐃⵠⲆΔ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (K = tg; I > K; K++) {
            if (Xr.ᐃⵠⵠⲆᐃⵠᐃ === R[K].id) {
              R[K].alpha = Math.max(Hi, R[K].alpha - _w * 1.5);
            } else {
              R[K].alpha = Math.max(0, R[K].alpha - _w / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(gu, za);
          }
        }
      }
    };
    this.ᐃⲆΔ = function () {
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⵠⵠⲆⵠΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ΔⵠΔⵠⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⵠⵠⵠⵠⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ᐃΔᐃⵠΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ΔΔⵠⲆⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ᐃⵠⵠᐃⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⲆⵠΔᐃⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⲆⲆΔⵠⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⵠᐃⲆⲆΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⵠΔᐃΔⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⲆⵠⲆᐃⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⲆᐃᐃⲆⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⵠⵠⲆᐃΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ᐃⲆⵠᐃΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⵠⲆⲆᐃΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ᐃΔⲆⲆⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⵠΔⵠᐃⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⵠⵠᐃΔⲆᐃΔ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ᐃⵠΔⵠⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⲆⵠⵠΔⲆ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⲆⲆᐃⲆⵠ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ⲆⲆᐃⲆᐃ]);
      this.Δᐃⵠⵠⵠ(this.ⲆΔⲆ[ow.ᐃΔⲆⲆΔ]);
    };
    this.ⲆᐃᐃⲆ = [];
    this.ⲆᐃᐃⲆ[Xr.ⵠᐃᐃⵠᐃ] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, jh, 1.05, za, 0.008, 0.008);
    this.ⲆᐃᐃⲆ[Xr.ΔⲆᐃⵠᐃ] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(uh, 1, 1.08, ie, 0.006, 0.006);
    this.ⲆᐃᐃⲆ[Xr.ⵠΔⵠⲆⵠ] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Bh, Te, 1.02, 1, 0.008, 0.008);
    this.ⲆᐃᐃⲆ[Xr.ⵠⵠⵠᐃⲆ] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(wt, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠᐃᐃⲆΔ = [];
    this.ⵠᐃᐃⲆΔ[0] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.1, Ug, 0, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[rg] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Rh, 0.4, Xn, tg, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[ih] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(sl, 0.3, fl, Bg, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[Wg] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Tk, 0.8, lb, Lr, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[4] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.3, 1, Pg, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[5] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Bh, 0.8, Ot, Rq, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[6] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(kg, 0.5, 1, Rs, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[7] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.9, lb, Pg, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[On] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(dr, 0.6, 1, 0, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[Lt] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[10] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(kg, 0.6, Ol, 0, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[11] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 0.4, 1, Rq, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[Es] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.8, yg, tg, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[13] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Jn, 0.2, 1, Da, 0.6, 0.6);
    this.ⵠᐃᐃⲆΔ[14] = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0.7, 1, gu, 0.6, 0.6);
  }
  function tw() {
    this.ⲆⲆΔⵠᐃ = "";
    this.ΔⵠΔᐃ = Zj;
    this.ΔⵠΔᐃᐃ = Zj;
    this.ᐃⵠΔⲆᐃ = Eh;
    this.ⲆⵠᐃΔⲆⲆⲆ = Lr;
    this.ᐃΔⲆⵠⲆ = Lr;
    this.ⲆⲆⲆⵠΔ = 0;
    this.ᐃᐃⵠΔΔ = 0;
    this.level = 0;
    this.label = null;
    this.ᐃΔⲆⵠⲆΔⵠ = null;
    this.ⲆΔⵠⵠⵠⵠᐃ = null;
    this.ⲆᐃΔⵠⲆ = false;
    this.ⲆΔΔᐃⲆ = 0;
  }
  function uw() {
    Math.random();
    return "o";
  }
  function vw() {
    Math.random();
    return "t";
  }
  function ww() {
    Math.random();
    return "p";
  }
  function vw() {
    Math.random();
    return "t";
  }
  function xw() {
    Math.random();
    return "n";
  }
  function yw() {
    Math.random();
    return "a";
  }
  function zw() {
    Math.random();
    return "i";
  }
  function Aw() {
    Math.random();
    return "g";
  }
  function yw() {
    Math.random();
    return "a";
  }
  function Bw() {
    Math.random();
    return "d";
  }
  function ww() {
    Math.random();
    return "p";
  }
  function Cw() {
    this.ᐃΔΔΔᐃ = function () {};
    this.ⲆᐃⵠᐃⲆ = {
      Ⲇⵠⵠᐃ: za,
      ⵠΔᐃⲆⲆ: Ol,
      open: kg
    };
    this.ᐃⵠⵠΔⲆ = {
      Ⲇⵠⵠᐃ: 1,
      ⵠΔᐃⲆⲆ: -rg,
      open: false
    };
    this.ᐃⵠᐃᐃ = {
      Ⲇⵠⵠᐃ: Ug,
      ΔⲆΔⲆᐃΔⵠ: 0,
      open: f,
      ΔⲆⵠⵠΔ: 0,
      ⵠΔᐃⲆⲆ: -1
    };
    this.ΔΔᐃⵠ = {
      ⲆⲆᐃΔⵠⲆᐃ: Kh,
      ΔⲆⲆᐃΔᐃᐃ: ps,
      type: mj,
      ΔΔΔⵠΔⲆΔ: Eh,
      Ⲇⵠⵠᐃ: 1,
      ⵠΔᐃⲆⲆ: -fl,
      open: false
    };
    this.ⲆᐃⵠΔ = {
      ⲆⲆᐃΔⵠⲆᐃ: 0,
      ⲆⲆⲆᐃΔⲆΔ: mj,
      ΔⲆⵠⵠΔ: Da,
      Ⲇⵠⵠᐃ: ie,
      ⵠΔᐃⲆⲆ: -za,
      open: false
    };
    this.sign = {
      ⵠΔᐃⲆⲆ: -rg,
      open: Rh
    };
    this.ᐃⲆⵠⲆΔ = {
      open: C,
      Ⲇⵠⵠᐃ: 1,
      ⵠᐃⵠⲆ: gu,
      ⵠΔᐃⲆⲆ: -1
    };
    this.ᐃⲆᐃⲆⵠ = {
      enabled: false,
      ΔᐃⲆΔᐃ: -Xn,
      label: Jn,
      now: -Ug,
      ᐃⵠᐃⵠ: iv
    };
    this.ΔⲆΔΔ = {
      id: -jh,
      ⵠᐃⵠⲆ: Zj,
      Ⲇⵠⵠᐃ: 1,
      ⵠΔᐃⲆⲆ: -js,
      open: false,
      lock: false,
      locked: false,
      ΔⵠᐃΔⲆΔⵠ: false,
      ⵠⵠᐃᐃᐃⵠⵠ: false
    };
    this.ⲆᐃΔⵠⲆ = na;
    this.reconnect = {
      enabled: false,
      rotate: 0
    };
    this.key = ᐃⵠΔⲆ.ΔᐃΔⵠᐃᐃΔ("key", dj.location.href);
    var a = ᐃⵠΔⲆ.ΔᐃΔⵠᐃᐃΔ("egg", dj.location.href);
    if (a) {
      vf.ΔⵠΔᐃ = parseInt(a);
    }
    this.beta = dj.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : Lr;
    if (this.key && this.beta) {
      ⵠⵠΔΔ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ⵠⵠΔΔ.get("starve_beta");
    }
    this.Δⵠⵠⵠⵠ = ⵠⵠΔΔ.get("starve_token") ? ⵠⵠΔΔ.get("starve_token") : ᐃⵠΔⲆ.ΔⲆⲆⲆⵠⵠⵠ(kw.ΔΔΔⲆⲆᐃᐃΔⵠ);
    dj.baguette();
    var b = dj.kot2;
    function c() {
      this.seed = 1;
      this.ᐃⲆΔᐃⲆΔΔ = xj;
      this.ⵠΔΔⵠⵠⵠΔ = yr;
      this.ⲆⲆⵠᐃᐃᐃⵠᐃⵠ = 1;
      this.ⲆⲆⲆΔᐃᐃΔΔΔ = Zg;
      this.ⲆⵠⵠⲆΔⲆᐃᐃᐃ = 3;
      this.ⲆⵠⲆⲆᐃⵠᐃ = function (a) {
        this.seed = jk + Math.floor(Math.random() * lw.ⵠᐃΔⲆᐃ);
      };
      this.ᐃΔⵠΔⵠΔΔ = function (a) {
        this.ᐃⲆΔᐃⲆΔΔ = 2 + Math.floor(Math.random() * lw.ⵠᐃΔⲆᐃ);
      };
      this.ᐃᐃⲆⲆᐃⲆᐃ = function (a) {
        this.ⵠΔΔⵠⵠⵠΔ = Pn + Math.floor(lw.ⵠᐃΔⲆᐃ * Math.random());
      };
      this.ᐃΔΔⵠᐃⵠᐃᐃᐃ = function (a) {
        this.ⲆⲆⵠᐃᐃᐃⵠᐃⵠ = Gl + Math.floor(Math.random() * lw.ⵠᐃΔⲆᐃ);
      };
      this.ⲆᐃⵠⵠⲆΔΔⲆⵠ = function (a) {
        this.ⲆⲆⲆΔᐃᐃΔΔΔ = 2 + Math.floor(lw.ⵠᐃΔⲆᐃ * Math.random());
      };
      this.ⲆᐃΔⵠᐃᐃⵠⵠᐃ = function (a) {
        this.ⲆⵠⵠⲆΔⲆᐃᐃᐃ = 2 + Math.floor(lw.ⵠᐃΔⲆᐃ * Math.random());
      };
      this.ΔⲆⲆⵠⲆⵠΔ = function (c, d, e, f, i, j, k) {
        for (var a = ie; k > a;) {
          var m = e * a % ΔⵠΔⲆⵠⵠⵠ;
          var n = ᐃΔᐃⲆᐃⲆΔ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(f * n + i);
            if (a > j && a < k) {
              var p = Math.random() > 0.5 ? _w * -Ab : _w * 10;
              var q = d * o;
              this.ⲆᐃⲆⲆΔⵠᐃ[m] = Math.max(-lw.ⵠⲆⵠⵠᐃΔᐃ, Math.min(lw.ⵠⲆⵠⵠᐃΔᐃ, this.ⲆᐃⲆⲆΔⵠᐃ[m] + p));
              this.ᐃᐃΔⵠΔΔᐃ[m] = Math.max(-lw.ΔⲆΔΔⵠΔᐃ, Math.min(lw.ΔⲆΔΔⵠΔᐃ, this.ᐃᐃΔⵠΔΔᐃ[m] + p));
              if (q > 0) {
                ho.beginPath();
                ho.arc(a + Xw.ⵠᐃⲆ.x + this.ᐃᐃΔⵠΔΔᐃ[m], c + this.ⲆᐃⲆⲆΔⵠᐃ[m] - lw.ⵠⲆⵠⵠᐃΔᐃ * 0.8, q, In, Jt * Math.PI);
                if (mf.transition) {
                  var r = mf.time ? fl - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
                  ho.fillStyle = Qv(83, 156, 160, 236, 247, 249, r);
                } else {
                  ho.fillStyle = Xr.ⵠᐃΔⵠᐃᐃⵠ[mf.time];
                }
                ho.fill();
              }
            }
            a += o * xj;
          }
        }
      };
      this.ΔᐃΔⲆⵠᐃΔ = function (c, d, e, f, i, j, k) {
        for (var a = yg; k > a;) {
          var m = a * e % ΔⵠΔⲆⵠⵠⵠ;
          var n = ᐃΔᐃⲆᐃⲆΔ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(f * n + i);
            if (a > j && a < k) {
              var p = Math.random() > 0.5 ? _w * -10 : yt * _w;
              var q = o * d;
              this.ᐃᐃΔΔΔ[m] = Math.max(-lw.ⵠⲆⵠⵠᐃΔᐃ, Math.min(lw.ⵠⲆⵠⵠᐃΔᐃ, this.ᐃᐃΔΔΔ[m] + p));
              this.ⵠⲆᐃⲆⵠ[m] = Math.max(-lw.ΔⲆΔΔⵠΔᐃ, Math.min(lw.ΔⲆΔΔⵠΔᐃ, this.ⵠⲆᐃⲆⵠ[m] + p));
              if (q > 0) {
                ho.beginPath();
                ho.arc(c + this.ᐃᐃΔΔΔ[m] - lw.ⵠⲆⵠⵠᐃΔᐃ * 0.8, a + Xw.ⵠᐃⲆ.y + this.ⵠⲆᐃⲆⵠ[m], q, 0, Math.PI * 2);
                if (mf.transition) {
                  var r = mf.time ? 1 - mf.ᐃⵠⵠⵠ.ΔΔⲆ : mf.ᐃⵠⵠⵠ.ΔΔⲆ;
                  ho.fillStyle = Qv(83, 156, 160, 236, 247, 249, r);
                } else {
                  ho.fillStyle = Xr.ⵠᐃΔⵠᐃᐃⵠ[mf.time];
                }
                ho.fill();
              }
            }
            a += o * xj;
          }
        }
      };
      this.ⵠΔⵠΔⵠᐃᐃⲆΔ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - lw.ⲆⲆⵠⲆΔ - e - 2) / lw.ΔⵠΔΔᐃΔⵠ) === 0) {
          this.ᐃᐃⲆⲆᐃⲆᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔⲆⲆⵠⲆⵠΔ(d, h, this.ⵠΔΔⵠⵠⵠΔ, Vq, vb, f, g);
        ho.globalAlpha = 1;
        if ((h = -(b - lw.ⲆᐃⵠⲆΔ - e + 500) / lw.ⵠⵠⲆᐃΔΔᐃ) === tg) {
          this.ⲆⵠⲆⲆᐃⵠᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔⲆⲆⵠⲆⵠΔ(b, h, this.seed, nh, Wb, f, g);
        ho.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - lw.ⲆᐃᐃⵠⲆ - e + 698) / lw.ⲆⵠⵠΔᐃᐃⵠ) <= 0.01) {
            this.ᐃΔⵠΔⵠΔΔ();
          }
          ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
          this.ΔⲆⲆⵠⲆⵠΔ(c, h, this.ᐃⲆΔᐃⲆΔΔ, 6, Qa, f, g);
          ho.globalAlpha = jh;
        }
      };
      this.ⲆⵠⲆⲆΔⲆᐃⵠⲆ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(-d + lw.ⲆⲆⵠⲆΔ + e + Yl) / lw.ΔⵠΔΔᐃΔⵠ;
        if (Rs === h) {
          this.ᐃᐃⲆⲆᐃⲆᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔⲆⲆⵠⲆⵠΔ(d, h, this.ⵠΔΔⵠⵠⵠΔ, 18, 16, f, g);
        ho.globalAlpha = Ug;
        if ((h = -(-b + lw.ⲆᐃⵠⲆΔ + e) / lw.ⵠⵠⲆᐃΔΔᐃ) === ya) {
          this.ⲆⵠⲆⲆᐃⵠᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔⲆⲆⵠⲆⵠΔ(b, h, this.seed, Vh, 10, f, g);
        ho.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + lw.ⲆᐃᐃⵠⲆ + e) / lw.ⲆⵠⵠΔᐃᐃⵠ) <= 0.01) {
            this.ᐃΔⵠΔⵠΔΔ();
          }
          ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
          this.ΔⲆⲆⵠⲆⵠΔ(c, h, this.ᐃⲆΔᐃⲆΔΔ, Ss, 6, f, g);
          ho.globalAlpha = yg;
        }
      };
      this.ⲆΔⵠΔΔΔⵠΔⲆ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + lw.ⲆⲆⵠⲆΔ + e + xj) / lw.ΔⵠΔΔᐃΔⵠ) === 0) {
          this.ᐃᐃⲆⲆᐃⲆᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔᐃΔⲆⵠᐃΔ(d, h, this.ⵠΔΔⵠⵠⵠΔ, 18, G, f, g);
        ho.globalAlpha = ie;
        if ((h = -(-b + lw.ⲆᐃⵠⲆΔ + e) / lw.ⵠⵠⲆᐃΔΔᐃ) === 0) {
          this.ⲆⵠⲆⲆᐃⵠᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔᐃΔⲆⵠᐃΔ(b, h, this.seed, La, 10, f, g);
        ho.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + lw.ⲆᐃᐃⵠⲆ + e) / lw.ⲆⵠⵠΔᐃᐃⵠ) <= 0.01) {
            this.ᐃΔⵠΔⵠΔΔ();
          }
          ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
          this.ΔᐃΔⲆⵠᐃΔ(c, h, this.ᐃⲆΔᐃⲆΔΔ, 6, Ro, f, g);
          ho.globalAlpha = Ug;
        }
      };
      this.ΔᐃⲆⵠⲆⲆⵠⵠΔ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - lw.ⲆⲆⵠⲆΔ - e - pq) / lw.ΔⵠΔΔᐃΔⵠ) === 0) {
          this.ᐃᐃⲆⲆᐃⲆᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔᐃΔⲆⵠᐃΔ(d, h, this.ⵠΔΔⵠⵠⵠΔ, Dl, 16, f, g);
        ho.globalAlpha = Ot;
        if ((h = -(b - lw.ⲆᐃⵠⲆΔ - e + 500) / lw.ⵠⵠⲆᐃΔΔᐃ) === ya) {
          this.ⲆⵠⲆⲆᐃⵠᐃ();
        }
        ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
        this.ΔᐃΔⲆⵠᐃΔ(b, h, this.seed, Es, Th, f, g);
        ho.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - lw.ⲆᐃᐃⵠⲆ - e + 698) / lw.ⲆⵠⵠΔᐃᐃⵠ) <= 0.01) {
            this.ᐃΔⵠΔⵠΔΔ();
          }
          ho.globalAlpha = ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(h);
          this.ΔᐃΔⲆⵠᐃΔ(c, h, this.ᐃⲆΔᐃⲆΔΔ, Qa, ji, f, g);
          ho.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ⵠⵠⲆⵠΔΔΔ, 0, 10, lw.ΔᐃⲆᐃⲆ, lw.ΔᐃⲆᐃⲆ, lw.ΔⵠΔΔᐃΔⵠ),
        ⵠᐃΔΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ΔΔⵠᐃⵠⵠᐃ, Db, 10, lw.ΔⵠΔΔᐃΔⵠ, lw.ΔⵠΔΔᐃΔⵠ, lw.ΔᐃⲆᐃⲆ)
      };
      this.w2 = {
        r: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ⲆⵠⵠⵠⵠᐃΔ, mj, J, lw.ⲆⵠΔᐃⲆⲆΔ, lw.ⲆⵠΔᐃⲆⲆΔ, lw.ⵠⵠⲆᐃΔΔᐃ),
        ⵠᐃΔΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ, 0, yt, lw.ⵠⵠⲆᐃΔΔᐃ, lw.ⵠⵠⲆᐃΔΔᐃ, lw.ⲆⵠΔᐃⲆⲆΔ)
      };
      this.w3 = {
        r: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ΔⵠΔⵠᐃΔⲆ, Hi, It, lw.ⵠⵠΔⲆⵠΔΔ, lw.ⵠⵠΔⲆⵠΔΔ, lw.ⲆⵠⵠΔᐃᐃⵠ),
        ⵠᐃΔΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ, 0, 10, lw.ⲆⵠⵠΔᐃᐃⵠ, lw.ⲆⵠⵠΔᐃᐃⵠ, lw.ⵠⵠΔⲆⵠΔΔ)
      };
      this.ⲆᐃᐃⲆᐃⲆᐃⲆΔ = function (a) {
        if (a.r.Ⲇⵠⵠᐃᐃ === a.r.x) {
          if (a.ⵠᐃΔΔ.Ⲇⵠⵠᐃᐃ === a.ⵠᐃΔΔ.x) {
            return a.r;
          } else {
            return a.ⵠᐃΔΔ;
          }
        } else {
          return a.r;
        }
      };
      this.ⵠⵠⵠ = function (a) {
        var b;
        if (a.r.x === a.r.Ⲇⵠⵠᐃᐃ) {
          if (a.ⵠᐃΔΔ.Ⲇⵠⵠᐃᐃ === a.ⵠᐃΔΔ.x) {
            a.r.ⵠΔⵠᐃⵠᐃᐃ();
            a.ⵠᐃΔΔ.ⵠΔⵠᐃⵠᐃᐃ();
            b = a.r;
          } else {
            b = a.ⵠᐃΔΔ;
          }
        } else {
          b = a.r;
        }
        b.ⵠⵠᐃⲆⵠⵠⵠ(b.Ⲇⵠⵠᐃᐃ);
        return b;
      };
      this.ᐃᐃΔΔΔ = [];
      this.ⵠⲆᐃⲆⵠ = [];
      this.ⲆᐃⲆⲆΔⵠᐃ = [];
      this.ᐃᐃΔⵠΔΔᐃ = [];
      this.ᐃΔΔΔᐃ = function () {
        for (var a = mj; ΔⵠΔⲆⵠⵠⵠ > a; a++) {
          this.ᐃᐃΔΔΔ[a] = Math.floor(ᐃΔᐃⲆᐃⲆΔ[a] * lw.ⵠⲆⵠⵠᐃΔᐃ);
          this.ⵠⲆᐃⲆⵠ[a] = Math.floor(lw.ΔⲆΔΔⵠΔᐃ * ᐃΔᐃⲆᐃⲆΔ[a]);
          this.ⲆᐃⲆⲆΔⵠᐃ[a] = Math.floor(ᐃΔᐃⲆᐃⲆΔ[a] * lw.ⵠⲆⵠⵠᐃΔᐃ);
          this.ᐃᐃΔⵠΔΔᐃ[a] = Math.floor(lw.ΔⲆΔΔⵠΔᐃ * ᐃΔᐃⲆᐃⲆΔ[a]);
        }
        this.w1.r.x = this.w1.r.Ⲇⵠⵠᐃᐃ;
        this.w2.r.ⵠΔΔⲆⲆ = 3.5;
        this.w3.r.ⵠΔΔⲆⲆ = xj;
      };
      this.ᐃΔΔΔᐃ();
    }
    this.Δⵠⵠⵠⵠ = b.substring(Lr, 6) + this.Δⵠⵠⵠⵠ.substring(6);
    this.ᐃᐃᐃΔⵠⵠΔ = ⵠⵠΔΔ.get("starve_token_id") ? ⵠⵠΔΔ.get("starve_token_id") : "";
    this.id = Lr;
    this.ᐃⲆᐃᐃ = 0;
    this.ⵠΔⲆ = 0;
    this.ⵠⲆⵠⲆⲆⲆⲆ = {
      ⲆᐃⲆΔᐃⲆⲆ: mj,
      ⵠᐃⵠΔᐃ: Kh,
      ⲆΔΔᐃⲆ: 0,
      ⵠⵠⲆᐃⲆⵠⲆ: ""
    };
    this.ⵠⲆⵠⵠⲆΔⲆⵠⵠ = {
      connected: tt,
      ᐃᐃᐃΔᐃᐃᐃ: new Date().getTime()
    };
    this.ᐃΔⲆⲆⵠ = [];
    this.ᐃⲆⵠⲆⵠⵠᐃ = function (a) {
      for (var b = Pg; this.ᐃΔⲆⲆⵠ.length > b; b++) {
        if (a == this.ᐃΔⲆⲆⵠ[b]) {
          return Kj;
        }
      }
      return Fh;
    };
    this.ⵠΔⲆⵠΔ = {
      ΔᐃⲆΔᐃ: 0,
      time: 0,
      value: tt,
      open: vj,
      ᐃⵠᐃⵠ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ΔᐃⲆΔᐃ) / 1000);
          if (this.time < 60) {
            Zw.ⵠΔⲆⵠΔ.button.ᐃⵠᐃⵠ(ho);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = kg;
          }
        }
      }
    };
    this.ΔⵠⲆᐃᐃ = {
      id: -1,
      Ⲇⵠⵠᐃ: -lb,
      lock: Bg,
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, Ol, 0, 1 / 30, 1),
      wait: Jn
    };
    this.ⲆᐃᐃⲆΔ = {
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ei, Lr, cu, 0, xt / Xg, 1),
      wait: false
    };
    this.ᐃΔᐃⲆⵠ = {
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, 0, xt, 0, 1, hs),
      wait: false
    };
    this.ⲆᐃᐃᐃⲆ = {
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(wt, Rs, lb, 0, Oq / gg, js),
      wait: false
    };
    this.ⵠᐃⲆ = new ᐃⵠΔⲆ.ᐃΔⵠⵠᐃΔⲆ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, 0, 0.4, 0, 0, bo, lq, bo, lq);
    this.ⵠᐃⲆ.ΔᐃⲆΔᐃ = Pg;
    this.ⵠᐃⲆ.ⵠΔΔΔΔⲆⵠ = 0;
    this.ⵠᐃⲆ.ᐃⲆΔ = function () {
      if (Lr < this.ⵠΔΔΔΔⲆⵠ) {
        this.ⵠΔΔΔΔⲆⵠ -= _w;
      } else {
        var a = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
        if (a) {
          this.ΔᐃⲆΔᐃ = Rs;
          var b = Math.max(Math.min(bo - a.x, -xq), -mf.w + pq + lo);
          var c = Math.max(Math.min(lq - a.y, -Mt), -mf.ΔⵠⲆ + ih + jq);
          this.ⵠⵠᐃⲆⵠⵠⵠ({
            x: b,
            y: c
          });
        } else {
          this.ΔᐃⲆΔᐃ += _w;
          if (this.ΔᐃⲆΔᐃ > 3) {
            this.ΔᐃⲆΔᐃ = 0;
            if (!Xw.reconnect.enabled) {
              Ⲇⵠᐃⵠ.ⵠⵠΔΔΔᐃΔΔᐃ();
            }
          }
        }
      }
    };
    this.ⵠᐃⲆ.w = screen.width;
    this.ⵠᐃⲆ.ΔⵠⲆ = screen.height;
    this.ⵠᐃⲆ.ⵠᐃⵠᐃᐃⲆⵠ = this.ⵠᐃⲆ.w;
    this.ⵠᐃⲆ.ᐃᐃᐃᐃᐃΔᐃ = this.ⵠᐃⲆ.ΔⵠⲆ;
    this.ⵠᐃⲆ.rx = Lr;
    this.ⵠᐃⲆ.ry = 0;
    this.ⵠᐃⲆ.ΔᐃⵠᐃΔⵠᐃⲆⵠ = ya;
    this.ⵠᐃⲆ.ΔⲆᐃⲆⵠⵠⵠⵠⲆ = tg;
    this.ⵠᐃⲆ.ⲆⲆΔᐃⵠ = function (a, b) {
      this.x = -Math.min(Math.max(-mf.ᐃⲆⲆⲆⲆᐃᐃ * pq, a - mf.ᐃⲆⲆⲆⲆᐃᐃ - this.ⵠᐃⵠᐃᐃⲆⵠ / 2), mf.w - this.ⵠᐃⵠᐃᐃⲆⵠ);
      this.y = -Math.min(Math.max(-mf.ᐃᐃᐃⵠⵠᐃΔ * ss, b - (mf.ᐃᐃᐃⵠⵠᐃΔ + this.ᐃᐃᐃᐃᐃΔᐃ) / 2), mf.ΔⵠⲆ - this.ᐃᐃᐃᐃᐃΔᐃ + mf.ᐃᐃᐃⵠⵠᐃΔ);
      this.Ⲇⵠⵠᐃᐃ = this.x;
      this.ᐃⲆⲆⲆΔᐃⵠ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ⲆⲆᐃⲆΔᐃΔ: mj,
      ΔᐃⵠΔ: Db,
      attack: ps,
      ᐃⲆΔ: function () {
        var a = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
        if (a) {
          var b = {
            x: Xw.ⵠᐃⲆ.x + a.x,
            y: Xw.ⵠᐃⲆ.y + a.y
          };
        } else {
          b = mq;
        }
        var c = ᐃⵠΔⲆ.ᐃᐃΔΔⲆⲆⲆ(yf.ⲆⲆΔⲆ, b);
        var d = ot;
        this.ΔᐃⵠΔ += _w;
        if (!yf.state) {
          if (a && !(a.action & iw.ⲆⵠⵠΔⲆᐃⲆ) && this.ΔᐃⵠΔ > kw.ⲆⵠⵠΔⲆᐃⲆ) {
            this.attack = 1;
            d = true;
            this.ΔᐃⵠΔ = 0;
            Ⲇⵠᐃⵠ.ⲆⵠⵠᐃᐃΔᐃⲆΔ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ᐃⲆΔⵠⵠΔⵠ = c;
        }
        if (!d) {
          this.timeout += _w;
          if (this.timeout > kw.ⲆᐃⲆⵠⲆΔΔ) {
            this.timeout = ya;
            if (Math.abs(this.angle - c) > 0.005) {
              Ⲇⵠᐃⵠ.ΔⵠᐃΔⵠᐃⵠⵠⲆ(c);
              this.angle = c;
            }
          }
        }
        if (!Xw.Ⲇᐃᐃᐃⵠ.open && !Xw.ⲆΔⵠⲆⵠ.open) {
          var e = 0;
          if (zf.ⵠᐃⵠⲆⲆⵠᐃ()) {
            e |= yg;
          }
          if (zf.ᐃΔⲆᐃᐃⲆΔ()) {
            e |= 2;
          }
          if (zf.ΔΔΔⵠΔⲆⲆ()) {
            e |= nb;
          }
          if (zf.ⲆᐃΔΔⲆΔⵠ()) {
            e |= yh;
          }
          if (this.ⲆⲆᐃⲆΔᐃΔ != e) {
            Ⲇⵠᐃⵠ.ᐃᐃⲆᐃⲆⵠᐃᐃⵠ(e);
          }
          this.ⲆⲆᐃⲆΔᐃΔ = e;
        }
      }
    };
    this.ⲆΔᐃΔ = {
      c: 1,
      ⵠᐃΔΔ: js,
      ΔⵠⲆ: 1,
      ⵠⵠⵠ: za,
      ⵠᐃⵠ: cu,
      ΔⵠⲆΔᐃⲆΔ: 1,
      ᐃⲆⵠΔⲆΔΔ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Kl, 0, 1, 0, 3, Wg),
      ᐃⵠᐃⵠⲆᐃⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(xh, 0, Oq, wj, Mt, Nb),
      ⲆⲆᐃⵠᐃⵠⲆ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Kj, Db, za, 0, ci, Wg),
      ΔΔᐃⲆᐃⲆⲆ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(true, 0, 1, Zj, Ob, ru),
      ⲆⲆⲆΔⲆⵠⵠ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(y, Hi, Ug, 0, 3, 3),
      ⲆᐃᐃᐃⲆⵠᐃ: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(true, 0, 1, 0, 3, qo),
      ⲆⲆⵠⲆⵠ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, 0, fl, Bg, tt, qu),
      ΔΔᐃΔᐃ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, gu, hd, 0, Pg, 1),
      ⵠⲆΔΔΔᐃΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, 0, 1, ya, 0, ie),
      ⲆᐃⵠΔΔⲆΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, 0, yg, 0, zl, Ug),
      ⲆᐃΔⵠΔⵠΔ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, Kh, fl, Hi, Db, 1),
      ΔⲆⲆΔⵠ: new ᐃⵠΔⲆ.ΔⲆⲆΔΔ(ᐃⵠΔⲆ.ᐃΔΔⲆᐃⵠⵠ, 0, Oq, 0, 0, hd),
      ᐃⲆΔ: function () {
        this.ᐃⲆⵠΔⲆΔΔ.ᐃⲆΔ();
        this.ᐃⵠᐃⵠⲆᐃⵠ.ᐃⲆΔ();
        this.ⲆⲆᐃⵠᐃⵠⲆ.ᐃⲆΔ();
        this.ΔΔᐃⲆᐃⲆⲆ.ᐃⲆΔ();
        this.ⲆⲆⲆΔⲆⵠⵠ.ᐃⲆΔ();
        this.ⲆᐃᐃᐃⲆⵠᐃ.ᐃⲆΔ();
        this.ⲆⲆⵠⲆⵠ.ⵠⵠᐃⲆⵠⵠⵠ(this.c);
        this.ΔΔᐃΔᐃ.ⵠⵠᐃⲆⵠⵠⵠ(this.ⵠᐃΔΔ);
        this.ⵠⲆΔΔΔᐃΔ.ⵠⵠᐃⲆⵠⵠⵠ(this.ΔⵠⲆ);
        this.ⲆᐃⵠΔΔⲆΔ.ⵠⵠᐃⲆⵠⵠⵠ(this.ⵠⵠⵠ);
        this.ⲆᐃΔⵠΔⵠΔ.ⵠⵠᐃⲆⵠⵠⵠ(this.ⵠᐃⵠ);
        this.ΔⲆⲆΔⵠ.ⵠⵠᐃⲆⵠⵠⵠ(this.ΔⵠⲆΔᐃⲆΔ);
      }
    };
    this.ⲆⲆΔΔΔᐃᐃ = Rh;
    this.ᐃⲆⲆΔΔᐃᐃ = false;
    this.ⲆᐃⲆⵠᐃ = Bh;
    this.ΔΔⵠⵠⲆᐃᐃ = false;
    this.ᐃΔᐃⵠ = {
      max: lw.ⲆᐃΔᐃⵠⲆⵠ,
      ᐃᐃΔⲆⲆΔΔ: Da,
      ᐃⵠΔⲆᐃ: In,
      ⲆΔΔ: [],
      ⲆᐃⲆⲆΔ: [],
      ΔΔᐃⵠⲆⵠⵠ: function (a, b) {
        if (a === jh) {
          this.ᐃⵠΔⲆᐃ = lw.ᐃⲆΔⲆᐃⵠⵠⲆΔ;
        }
        this.ᐃᐃΔⲆⲆΔΔ += b;
        this.max = lw.ⲆᐃΔᐃⵠⲆⵠ + this.ᐃᐃΔⲆⲆΔΔ + this.ᐃⵠΔⲆᐃ;
      },
      ᐃⲆⵠⲆⵠⲆⲆ: {
        item: -Ot,
        ⵠⵠ: null,
        ΔΔΔΔⵠ: 0,
        ᐃⲆΔΔᐃΔⲆ: Hi,
        ⲆᐃⲆⲆⵠ: -cu,
        ⲆΔⲆⵠⲆ: -1,
        ᐃⵠᐃᐃΔ: function (a) {
          if (!!this.ΔΔΔΔⵠ && (a.x !== this.ⲆᐃⲆⲆⵠ || a.y !== this.ⲆΔⲆⵠⲆ)) {
            this.ᐃⲆΔΔᐃΔⲆ = 1;
          }
        },
        start: function (a, b) {
          this.ⲆᐃⲆⲆⵠ = b.x;
          this.ⲆΔⲆⵠⲆ = b.y;
          this.item = a;
          this.ⵠⵠ = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ[a].info.ⵠⵠ[Yl];
          this.ΔΔΔΔⵠ = ie;
        },
        stop: function () {
          this.ΔΔΔΔⵠ = 0;
          this.ᐃⲆΔΔᐃΔⲆ = ya;
          this.ⲆᐃⲆⲆⵠ = -hs;
          this.ⲆΔⲆⵠⲆ = -1;
        },
        release: function () {
          var a = -Ot;
          var b = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ;
          var c = mj;
          if (this.ΔΔΔΔⵠ && this.ᐃⲆΔΔᐃΔⲆ) {
            for (var d = Pg; d < b.length; d++) {
              if (b[d].info.state === Yv) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = Xn;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              Zw.ΔᐃⲆᐃΔᐃⵠ();
            }
          }
          this.stop();
          return c;
        },
        ᐃⵠᐃⵠ: function (a, b) {
          if (this.ΔΔΔΔⵠ && this.ᐃⲆΔΔᐃΔⲆ) {
            Mm(ho, this.ⵠⵠ, Math.floor(a - this.ⵠⵠ.width / 2), Math.floor(b - this.ⵠⵠ.height / Pn));
          }
        }
      },
      ᐃᐃⲆΔᐃⲆᐃΔⵠ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ⲆΔΔ[a[d][tg]] == a[d][Ot]) {
            return oa;
          }
        }
        return Fh;
      },
      ᐃⲆⲆΔⲆ: function (a) {
        for (var b = 0; b < this.ⲆᐃⲆⲆΔ.length; b++) {
          if (this.ⲆᐃⲆⲆΔ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ⲆΔⲆⵠᐃᐃᐃ: function (a, b) {
        this.ⲆΔΔ[a] = Da;
        this.ⲆᐃⲆⲆΔ.splice(b, 1);
        Zw.ΔᐃⲆᐃΔᐃⵠ();
      },
      ⲆΔΔⵠᐃⵠᐃ: function (a, b, c) {
        ᐃⲆΔ = vs;
        this.ⲆΔΔ[a] = Math.max(0, this.ⲆΔΔ[a] - b);
        if (!this.ⲆΔΔ[a] && c >= 0) {
          this.ⲆΔⲆⵠᐃᐃᐃ(a, c);
        }
      }
    };
    this.ΔΔⵠᐃᐃ = {
      enabled: Bh,
      translate: {
        x: 0,
        y: Da
      },
      ᐃⵠⲆⵠⵠᐃᐃ: function () {
        if (mf.mode == lw.ⲆⵠⲆⵠⲆⲆⵠ && !Xw.ᐃⲆⲆΔΔᐃᐃ) {
          Xw.ΔΔⵠᐃᐃ.enabled = !Xw.ΔΔⵠᐃᐃ.enabled;
          if (Xw.ΔΔⵠᐃᐃ.enabled) {
            Zw.options.ⲆⲆᐃΔⲆᐃⵠ.display = "inline-block";
          } else {
            Zw.options.ⲆⲆᐃΔⲆᐃⵠ.display = "none";
          }
        }
      }
    };
    Zw.options.ⲆⲆᐃΔⲆᐃⵠ.display = "none";
    this.ᐃΔᐃᐃⲆ = {
      enabled: false,
      translate: {
        x: 0,
        y: Pg
      },
      ΔᐃⲆΔᐃ: Db,
      ᐃⵠⲆⵠⵠᐃᐃ: function () {
        Xw.ᐃΔᐃᐃⲆ.enabled = !Xw.ᐃΔᐃᐃⲆ.enabled;
        if (Xw.ᐃΔᐃᐃⲆ.enabled) {
          Zw.options.ⵠᐃⲆⵠᐃⵠⵠ.display = "inline-block";
        } else {
          Zw.options.ⵠᐃⲆⵠᐃⵠⵠ.display = "none";
        }
      },
      ᐃⲆΔ: function () {
        if (!!this.enabled && Xw.ΔᐃⲆⵠ.id < 0 && !Zw.ⵠⵠⵠΔ.open) {
          this.ΔᐃⲆΔᐃ += _w;
          if (this.ΔᐃⲆΔᐃ > 2) {
            this.ΔᐃⲆΔᐃ = 0;
            if (Xw.ⲆΔᐃΔ.ΔⵠⲆ < 0.35) {
              if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⵠᐃⲆⲆⲆ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⵠᐃⲆⲆⲆ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⵠᐃⲆⲆⲆ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⲆᐃΔᐃΔ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⲆᐃΔᐃΔ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⲆᐃΔᐃΔ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⲆⵠᐃΔᐃ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⲆⵠᐃΔᐃ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⲆⵠᐃΔᐃ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⵠᐃⵠΔⵠ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⵠᐃⵠΔⵠ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⵠᐃⵠΔⵠ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⲆᐃΔΔⵠ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⲆᐃΔΔⵠ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⲆᐃΔΔⵠ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⲆᐃΔⵠᐃ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⲆᐃΔⵠᐃ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⲆᐃΔⵠᐃ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⲆᐃⵠΔⲆ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⲆᐃⵠΔⲆ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⲆᐃⵠΔⲆ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⲆⵠΔⲆΔ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⲆⵠΔⲆΔ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⲆⵠΔⲆΔ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ΔΔⵠⵠⲆ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ΔΔⵠⵠⲆ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ΔΔⵠⵠⲆ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⵠⲆΔⲆᐃ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⵠⲆΔⲆᐃ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⵠⲆΔⲆᐃ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⲆᐃᐃⵠΔ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⲆᐃᐃⵠΔ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⲆᐃᐃⵠΔ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⲆⲆΔⵠⵠ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⲆⲆΔⵠⵠ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⲆⲆΔⵠⵠ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⵠᐃⲆⲆᐃ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⵠᐃⲆⲆᐃ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⵠᐃⲆⲆᐃ));
              } else if (Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ⵠⲆⵠᐃᐃ]) {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ⵠⲆⵠᐃᐃ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ⵠⲆⵠᐃᐃ));
              }
            } else if (Xw.ⲆΔᐃΔ.ⵠⵠⵠ < 0.35 && Xw.ᐃΔᐃⵠ.ⲆΔΔ[_r.ΔᐃᐃⵠΔ]) {
              Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(_r.ΔᐃᐃⵠΔ, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(_r.ΔᐃᐃⵠΔ));
            }
          }
        }
      }
    };
    Zw.options.ⵠᐃⲆⵠᐃⵠⵠ.display = "none";
    this.ΔᐃⲆⵠ = {
      id: -1,
      Δⵠⵠⵠ: -1,
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Ll, Da, Oq, 0, jh, 1),
      ΔⲆⵠΔᐃ: Tk,
      ΔᐃΔⵠ: -1,
      mode: 0,
      label: [],
      ⲆΔⵠⵠΔ: [],
      ᐃᐃᐃⲆᐃ: false,
      ᐃⲆΔΔᐃ: false,
      ⵠΔⵠΔΔⲆᐃ: false,
      ᐃⵠⵠΔⲆ: Fh,
      ⵠΔⵠⵠⵠᐃⵠΔⲆ: function () {
        this.mode = this.mode === 0 ? yg : Kh;
      },
      ΔⲆⲆⲆᐃⲆⵠⲆⵠ: function (a) {
        this.ᐃᐃᐃⲆᐃ = a;
        var b = Zw.ⵠⵠⵠΔ;
        if (b.open) {
          b.ⲆᐃⵠᐃΔᐃΔ(b.button);
        }
        this.ᐃⲆΔ();
      },
      ΔⲆⵠⵠᐃⵠⵠⲆΔ: function (a) {
        var b = Xs[a];
        this.id = a;
        this.ΔⲆⵠΔᐃ = oa;
        mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
        this.timeout.ⵠΔᐃᐃᐃⲆⲆ = b.time * 8;
        this.Δⵠⵠⵠ = b.Δⵠⵠⵠ;
      },
      ΔΔⲆΔⲆⵠᐃⲆⵠ: function (a) {
        var b = Xs[a];
        this.id = a;
        this.ΔⲆⵠΔᐃ = Gj;
        var c = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
        if (c && c.right == _r.ᐃⵠΔΔⲆ) {
          this.timeout.ⵠΔᐃᐃᐃⲆⲆ = b.time * 3;
        } else {
          this.timeout.ⵠΔᐃᐃᐃⲆⲆ = b.time;
        }
        this.Δⵠⵠⵠ = b.Δⵠⵠⵠ;
        for (var d = Eh; d < b.r.length; d++) {
          var e = b.r[d];
          Xw.ᐃΔᐃⵠ.ⲆΔΔⵠᐃⵠᐃ(e[tt], e[jh], Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(e[0]));
        }
        Zw.ΔᐃⲆᐃΔᐃⵠ();
      },
      ᐃⲆΔ: function () {
        this.ⲆΔⵠⵠΔ = [];
        if (Zw.Ⲇⵠᐃⵠⵠ.ΔᐃⲆⵠ === Ot) {
          Zw.Ⲇⵠᐃⵠⵠ.display = 0;
        }
        for (var a in Xs) {
          var b = Xs[a];
          var c = gs;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (Xw.ᐃΔᐃⵠ.max >= lw.ⲆᐃΔᐃΔᐃΔ && b.id === $r.ⵠⲆᐃᐃ) {
                c = false;
                break;
              }
              if (b.w > this.ᐃᐃᐃⲆᐃ || b.f > this.ᐃⲆΔΔᐃ || b.ⵠᐃⵠ > this.ⵠΔⵠΔΔⲆᐃ || b.e > this.ᐃⵠⵠΔⲆ) {
                c = ts;
                break;
              }
              var f = b.r[d];
              if (!Xw.ᐃΔᐃⵠ.ⲆΔΔ[f[0]] || Xw.ᐃΔᐃⵠ.ⲆΔΔ[f[Rs]] < f[1]) {
                c = false;
                break;
              }
            }
            if (c) {
              this.ⲆΔⵠⵠΔ.push(Zw.ⵠⵠᐃ[b.id]);
            }
          }
        }
        Zw.ᐃⵠΔⲆΔⵠⲆ();
        Zw.ⲆΔⵠΔᐃⲆⵠ();
        Zw.ⲆΔᐃⵠΔⲆΔ();
        Zw.ⲆΔⲆᐃΔΔⲆ();
        Zw.ⵠᐃᐃᐃⲆΔΔ();
        Zw.ⲆⵠᐃⲆⲆⲆⵠ();
        Zw.sign.ⲆⲆΔⵠⵠᐃΔ();
      },
      ⵠΔⵠᐃⵠᐃᐃ: function () {
        this.id = -js;
        this.ΔⲆⵠΔᐃ = false;
        this.timeout.ΔΔⲆ = 0;
        this.timeout.ⵠᐃⵠ = false;
        this.ᐃⲆΔ();
      }
    };
    this.ⵠⲆⲆⵠΔᐃᐃ = {
      message: undefined,
      ᐃⵠᐃⵠ: lv
    };
    this.alert = {
      timeout: new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 1, hs, 0, 4, 0.3),
      text: "",
      label: null,
      ᐃⵠᐃⵠ: mv,
      list: []
    };
    this.ΔⲆⵠᐃⲆ = {
      ⲆΔ: document.createElement("canvas"),
      ⵠⲆΔᐃⲆ: [],
      ᐃⲆΔ: gs,
      translate: {
        y: 0,
        x: Eh
      },
      sort: function () {
        var a = [];
        for (var b = mf.ⵠΔΔⲆ, c = ps; c < b.length; c++) {
          if (b[c].ⲆᐃΔⵠⲆ) {
            a.push({
              id: c,
              ⵠⵠΔⵠ: b[c].ⲆΔΔᐃⲆ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ⵠⵠΔⵠ - a.ⵠⵠΔⵠ;
        });
        this.ⵠⲆΔᐃⲆ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ⵠⲆΔᐃⲆ.push(a[c].id);
        }
        this.ᐃⲆΔ = true;
      },
      ᐃΔΔΔᐃ: function (a) {
        for (var b = mf.ⵠΔΔⲆ, c = 0; c < b.length; c++) {
          b[c].ⲆΔΔᐃⲆ = gu;
        }
        b[Xw.id].ⲆΔΔᐃⲆ = ᐃⵠΔⲆ.ⲆⲆᐃⲆⵠΔⲆ(a[za]);
        this.ⵠⲆΔᐃⲆ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ⵠⲆΔᐃⲆ.push(a[c]);
          b[a[c]].ⲆΔΔᐃⲆ = ᐃⵠΔⲆ.ⲆⲆᐃⲆⵠΔⲆ(a[c + 1]);
        }
        this.ᐃⲆΔ = true;
      }
    };
    this.ΔⲆⵠᐃⲆ.ⲆΔ.width = Co * 180;
    this.ΔⲆⵠᐃⲆ.ⲆΔ.height = Co * 300;
    this.ΔⲆⵠᐃⲆ.ᐃ = this.ΔⲆⵠᐃⲆ.ⲆΔ.getContext("2d");
    this.ⲆΔⵠⲆⵠ = {
      open: false,
      input: document.getElementById("commandInput"),
      ΔⵠΔⵠΔᐃᐃ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ⲆⲆΔᐃᐃⵠᐃᐃⵠ: function (a) {
        this.ΔⵠΔⵠΔᐃᐃ.innerHTML += a;
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(lo / 2 - 300) + "px";
        this.style.top = Math.floor(jq / 2 - 250) + "px";
      },
      ΔⵠᐃΔᐃᐃᐃΔⵠ: function () {
        this.ΔⵠΔⵠΔᐃᐃ.innerHTML = "";
      },
      ᐃⵠⲆΔⲆ: function () {
        this.open = false;
        this.style.display = "none";
      },
      ΔⵠᐃΔⲆ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = gu; c < a.length; c++) {
          if (c % bb == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + qu) % yr === Rq || c + ie === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ᐃᐃᐃⲆⲆ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ⲆⲆΔᐃᐃⵠᐃᐃⵠ(f);
        this.ᐃΔᐃΔΔⲆᐃΔⵠ();
      },
      ᐃΔᐃΔΔⲆᐃΔⵠ: function () {
        this.ΔⵠΔⵠΔᐃᐃ.scrollTop = this.ΔⵠΔⵠΔᐃᐃ.scrollHeight;
      },
      ⵠⲆᐃⵠᐃᐃᐃ: function (a) {
        switch (a) {
          case "clean":
            this.ΔⵠᐃΔᐃᐃᐃΔⵠ();
            return true;
          case "list":
            var b = "";
            for (var c = mf.ⵠΔΔⲆ, d = Da; d < c.length; d++) {
              var e = c[d];
              if (e.ⲆᐃΔⵠⲆ) {
                b += e.ⲆⲆΔⵠᐃ + " <span style=\"color:green\">#" + d + "</span><br />";
              }
            }
            this.ᐃᐃᐃⲆⲆ("list", xt, "List all connected players", b);
            return Sh;
          case "weapon-list":
            this.ᐃᐃᐃⲆⲆ("Weapons", 1, "List all weapons in the game", this.ΔⵠᐃΔⲆ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
            return true;
          case "tool-list":
            this.ᐃᐃᐃⲆⲆ("Tools", 1, "List all tools in the game", this.ΔⵠᐃΔⲆ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return true;
          case "survival-list":
            this.ᐃᐃᐃⲆⲆ("Survival Items", Oq, "List all survival items in the game", this.ΔⵠᐃΔⲆ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return qn;
          case "resource-list":
            this.ᐃᐃᐃⲆⲆ("Resources", 1, "List all resources in the game", this.ΔⵠᐃΔⲆ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return true;
          case "food-list":
            this.ᐃᐃᐃⲆⲆ("Food", 1, "List all food in the game", this.ΔⵠᐃΔⲆ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return ph;
          case "hat-list":
            this.ᐃᐃᐃⲆⲆ("Hats", hs, "List all hats in the game", this.ΔⵠᐃΔⲆ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return true;
          case "building-list":
            this.ᐃᐃᐃⲆⲆ("Buildings", 1, "List all buildings in the game", this.ΔⵠᐃΔⲆ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return Gj;
          case "biome-list":
            this.ᐃᐃᐃⲆⲆ("Biomes list", Ol, "List all available biomes in the game", this.ΔⵠᐃΔⲆ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return ml;
          case "help-config":
            this.ᐃᐃᐃⲆⲆ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return Dh;
          case "pos":
            c = mf.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ];
            d = 0;
            for (; d < c.length; d++) {
              var f = c[d];
              if (f.Ⲇⵠⵠᐃ === Xw.id) {
                this.ᐃᐃᐃⲆⲆ("pos", 1, "Your position is " + Math.floor(f.x / os) + ":" + Math.floor(f.y / sh));
                return ph;
              }
            }
            break;
          case "help-admin":
            this.ᐃᐃᐃⲆⲆ("help-admin", 1, "List all available commands for admin only", this.ΔⵠᐃΔⲆ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return qn;
          case "help":
            this.ᐃᐃᐃⲆⲆ("help", 1, "List all available commands", this.ΔⵠᐃΔⲆ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return qn;
        }
        return uh;
      },
      ⵠᐃᐃⲆⲆᐃⲆᐃⵠ: function () {
        if (!this.open) {
          this.open = vs;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ⵠΔΔⵠⲆⵠᐃ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ⵠⲆᐃⵠᐃᐃᐃ(a)) {
            Ⲇⵠᐃⵠ.ⲆⲆⵠᐃΔⲆⵠⲆΔ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.Ⲇᐃᐃᐃⵠ = {
      open: Ll,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(lo / 2 - 150) + "px";
        this.style.top = Math.floor(jq / 2 + 80) + "px";
      },
      ᐃⵠⲆΔⲆ: function () {
        this.open = ot;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (Xw.alert.text) {
              Xw.alert.list.push(b);
            } else {
              Xw.alert.text = b;
            }
            Zw.ⵠⲆⲆⲆᐃᐃⲆ = Eh;
          } else {
            Zw.ⵠⲆⲆⲆᐃᐃⲆ = Ug;
          }
        }
      },
      ⵠⲆᐃⵠᐃᐃᐃ: function (a) {
        if (a.charAt(Bg) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = lb; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return na;
        }
        return false;
      },
      ⲆᐃⵠⲆⵠ: function () {
        if (this.open) {
          this.open = false;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ⵠⲆᐃⵠᐃᐃᐃ(a)) {
              Ⲇⵠᐃⵠ.ΔⵠⵠⲆᐃⵠᐃΔΔ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ⲆᐃⲆΔⵠΔⵠ = {
      ᐃᐃΔΔⲆ: [],
      ᐃⲆΔ: function (a) {
        a.y += _w * 80 * a.ⵠⵠΔⵠ;
        a.x += _w * 80 * a.c;
        a.ΔΔᐃΔᐃ -= _w / 6;
        if (a.ΔΔᐃΔᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + _w * vt, hd);
        } else {
          a.alpha = Math.max(a.alpha - _w * za, tt);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min(Xr.ΔⵠΔⲆⵠᐃⵠ * (lo / 1366), Xr.ΔⵠΔⲆⵠᐃⵠ + Wb) * Math.max(Math.min(mf.ⵠⲆΔᐃⵠ + 1000, 3000) / 3000, 0));
        if (this.ᐃᐃΔΔⲆ.length < b) {
          var c = Math.floor(Math.random() * Xr.ᐃᐃⲆⲆⵠᐃΔ);
          var d = -Xw.ⵠᐃⲆ.x + Math.floor(Math.random() * Xw.ⵠᐃⲆ.w);
          var e = -Xw.ⵠᐃⲆ.y + Math.floor(Math.random() * Xw.ⵠᐃⲆ.ΔⵠⲆ);
          var f = Math.random(Math.PI);
          this.ᐃᐃΔΔⲆ.push(new qw(c, d, e, f));
        }
      }
    };
    this.ⲆΔᐃᐃᐃᐃᐃ = Lr;
    this.ⵠᐃⵠᐃᐃ = 0;
    this.ⵠΔⲆᐃⲆ = {
      ᐃᐃΔΔⲆ: [],
      ᐃⲆⲆΔⵠ: 0,
      ΔⲆⵠᐃΔ: 0,
      ᐃⲆΔ: function (a) {
        a.y += _w * (200 + this.ΔⲆⵠᐃΔ * 800) * a.ⵠⵠΔⵠ;
        a.x += _w * (200 + this.ΔⲆⵠᐃΔ * 800) * a.c;
        a.ΔΔᐃΔᐃ -= _w / ji;
        if (a.ΔΔᐃΔᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + _w * 3, Ug);
        } else {
          a.alpha = Math.max(a.alpha - _w * rg, Rs);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔⲆⵠᐃΔ + 0.1) * Xr.ᐃⲆⵠᐃⲆᐃⵠ * (lo / 1366), (this.ΔⲆⵠᐃΔ + 0.1) * Xr.ᐃⲆⵠᐃⲆᐃⵠ + Th) * Math.max(Math.min(mf.ΔΔⲆΔⲆ + 1000, 3000) / 3000, 0));
        if (this.ᐃᐃΔΔⲆ.length < b) {
          var c = Math.floor(Math.random() * Xr.ᐃᐃⲆⲆⵠᐃΔ);
          var d = -Xw.ⵠᐃⲆ.x + Math.floor(Math.random() * Xw.ⵠᐃⲆ.w);
          var e = -Xw.ⵠᐃⲆ.y + Math.floor(Math.random() * Xw.ⵠᐃⲆ.ΔⵠⲆ);
          var f = Math.random(Math.PI);
          if (Xw.ⵠΔⲆᐃⲆ.ᐃⲆⲆΔⵠ !== 0) {
            d -= Xw.ⵠᐃⲆ.w / xq;
          }
          this.ᐃᐃΔΔⲆ.push(new qw(c, d, e, f));
        }
      }
    };
    this.ⲆⵠᐃⵠΔ = {
      ᐃᐃΔΔⲆ: [],
      ᐃⲆⲆΔⵠ: Rq,
      ΔⲆⵠᐃΔ: 0,
      ᐃⲆΔ: function (a) {
        if (zf.ΔΔΔⵠΔⲆⲆ()) {
          a.y += _w * a.ᐃⵠⵠⵠⲆ * (5.5 + this.ΔⲆⵠᐃΔ * 10);
        } else {
          a.y += _w * a.ᐃⵠⵠⵠⲆ * (tb + this.ΔⲆⵠᐃΔ * 10);
        }
        a.ΔΔᐃΔᐃ -= _w / 2;
        if (zf.ⵠᐃⵠⲆⲆⵠᐃ()) {
          a.x += _w * (100 + this.ΔⲆⵠᐃΔ * 400);
        } else if (zf.ᐃΔⲆᐃᐃⲆΔ()) {
          a.x -= _w * (130 - this.ΔⲆⵠᐃΔ * 400);
        } else {
          a.x -= _w * (30 - this.ΔⲆⵠᐃΔ * 400);
        }
        if (a.ΔΔᐃΔᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + _w * 3, rg);
        } else {
          a.alpha = Math.max(a.alpha - _w * M, ps);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔⲆⵠᐃΔ * 1.5 + 0.5) * Xr.ⵠⵠᐃⲆⵠⵠᐃ * (lo / 1366), (this.ΔⲆⵠᐃΔ * 1.5 + 0.5) * Xr.ⵠⵠᐃⲆⵠⵠᐃ + 10) * Math.max(Math.min(mf.ⲆΔΔΔᐃ + 1000, 3000) / 3000, 0));
        if (this.ᐃᐃΔΔⲆ.length < b) {
          var c = Math.floor(Math.random() * Xr.ⵠᐃⵠⵠΔᐃⲆ);
          var d = -Xw.ⵠᐃⲆ.x + Math.floor(Math.random() * Xw.ⵠᐃⲆ.w);
          var e = -Xw.ⵠᐃⲆ.y + Math.floor(Math.random() * 400 * Co - Co * 200);
          this.ᐃᐃΔΔⲆ.push(new qw(c, d, e, Bg));
        }
      }
    };
    this.ⲆⲆⲆᐃ = [];
    for (var d = 0; Vn > d; d++) {
      this.ⲆⲆⲆᐃ.push(new c());
    }
  }
  function Dw() {
    Math.random();
    return "C";
  }
  function Ew() {
    Math.random();
    return "s";
  }
  function Fw() {
    Math.random();
    return "e";
  }
  function Gw() {
    Math.random();
    return "r";
  }
  function uw() {
    Math.random();
    return "o";
  }
  ⲆⲆΔⵠⲆⲆᐃᐃᐃ = 1;
  setTimeout(function a() {
    var b = xw() + yw() + vw() + zw();
    Math.random();
    var c = "W" + Fw() + (Math.random(), "b") + (Math.random(), "S") + uw() + function () {
      Math.random();
      return "c";
    }() + (Math.random(), "k") + Fw() + vw();
    if (dj[c].toString().indexOf(b) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    var d = Ew() + Fw() + xw() + Bw();
    var e = ww() + Gw() + uw() + vw() + uw() + vw() + (Math.random(), "y") + ww() + Fw();
    if (dj[c][e][d].toString().indexOf(b) === -1) {
      Math.floor = function () {
        return Math.round() + Ot;
      };
    }
    c = Bw() + Gw() + yw() + (Math.random(), "w") + (Math.random(), "I") + (Math.random(), "m") + yw() + Aw() + Fw();
    d = Dw() + yw() + xw() + (Math.random(), "v") + yw() + Ew() + (Math.random(), "R") + Fw() + xw() + Bw() + Fw() + Gw() + zw() + xw() + Aw() + Dw() + uw() + xw() + vw() + Fw() + (Math.random(), "x") + vw() + (Math.random(), "2") + (Math.random(), "D");
    if (-jh === dj[d][e][c].toString().indexOf(b)) {
      Math.floor = function () {
        return Math.round() + xt;
      };
    }
    setTimeout(a, 100000);
  }, 100000);
  function Hw(a, b) {
    const c = (1 + (15516 + a) * 22695477) % 4294967296;
    const d = (b | 60253) & ~(b & 60253);
    const e = ib(c, d, c, d);
    Ek(c, d);
    return ~(e & 32242) & 32242 | ~(e & 32242) & e;
  }
  function Iw(b, c, d, e, f, g) {
    Ze(Mw, b, c, d, e, f, g);
    const h = Jw(Nw[0], Nw[mk], Nw[bs], Nw[3]);
    Zs(Nw[4], Nw[5], Nw[Zj], Nw[hs], Nw[2]);
    return h ^ 31239;
  }
  function Jw(a, b, c, d) {
    gi(Mw, a, b, c, d);
    return (6215 + (ft(Nw[0], Nw[1]) ^ ft(Nw[xj], Nw[3]))) % 65302;
  }
  function Kw(k, L) {
    this.ⲆΔ = k;
    this.ᐃ = L;
    if (-rg < dj.navigator.userAgent.indexOf("Edge")) {
      this.ⵠΔΔⲆⲆᐃΔ = "default";
      this.ⲆᐃᐃⲆᐃⵠⲆ = "pointer";
    } else {
      this.ⵠΔΔⲆⲆᐃΔ = "url('img/cursor0.png'), default";
      this.ⲆᐃᐃⲆᐃⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    var S = this;
    function e(c, d, e, f, i) {
      var j = this;
      for (var k = d + Os, m = 0, a = f, n = d; k > n; n++) {
        S.buttons[n].info.callback = o;
        S.buttons[n].info.ⵠΔⵠⵠᐃⲆΔⲆⵠ = c;
      }
      function o() {
        if (a !== this.ᐃⵠΔᐃⲆⵠᐃ && this.ᐃⵠΔᐃⲆⵠᐃ !== -1) {
          if (In < this.ΔⵠᐃⵠΔⵠⵠ) {
            if (ΔⵠΔΔⵠⵠΔ === d) {
              q(y, na, "none");
            } else {
              q(w, na, "none");
            }
          } else if (d === ΔⵠΔΔⵠⵠΔ) {
            q(y, oa, "inline-block");
          } else {
            q(w, oa, "inline-block");
          }
          a = this.ᐃⵠΔᐃⲆⵠᐃ;
          e(this.ᐃⵠΔᐃⲆⵠᐃ);
          p();
        }
      }
      function p() {
        var b = c[a];
        vf.ᐃΔΔᐃⵠΔᐃ = _v(b.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, yt, yh);
        if (b.level !== undefined) {
          vf.ᐃᐃⵠᐃᐃⵠⵠ = _v("Level " + b.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, wr, Zk, 8);
        } else {
          vf.ᐃᐃⵠᐃᐃⵠⵠ = _v("by " + b.ᐃΔᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, wh);
        }
      }
      this.ⵠΔⲆΔᐃ = function () {
        for (var b = d, e = m * 3; k > b && e < c.length; b++, e++) {
          if (ᐃΔⵠ.ΔΔⲆΔΔⲆΔ !== c[e].ΔⲆⲆ || Pg !== i[e]) {
            S.buttons[b].info.ᐃⵠΔᐃⲆⵠᐃ = e;
            for (var f = 0; vt > f; f++) {
              S.buttons[b].info.ⵠⵠ[f] = ᐃⵠⲆᐃΔ[c[e].ΔⲆⲆ][f];
              S.buttons[b].info.active = oa;
              S.buttons[b].info.ΔⵠᐃⵠΔⵠⵠ = i[e];
            }
          } else {
            S.buttons[b].info.ᐃⵠΔᐃⲆⵠᐃ = -1;
            S.buttons[b].info.active = na;
          }
        }
        for (; b < k; b++) {
          S.buttons[b].info.ᐃⵠΔᐃⲆⵠᐃ = -1;
          S.buttons[b].info.active = na;
        }
        p();
      };
      S.buttons[k].info.callback = function () {
        if (m > Kh) {
          m--;
        }
        j.ⵠΔⲆΔᐃ();
      };
      S.buttons[k + rg].info.callback = function () {
        if (m * 3 + se < c.length) {
          m++;
        }
        j.ⵠΔⲆΔᐃ();
      };
    }
    function n() {
      var b = Number(ⵠⵠΔΔ.get("starve_crate"));
      var c = Number(ⵠⵠΔΔ.get("starve_dead"));
      var d = Number(ⵠⵠΔΔ.get("starve_book"));
      var e = Number(ⵠⵠΔΔ.get("starve_bag"));
      var f = Number(ⵠⵠΔΔ.get("starve_skin"));
      var g = Number(ⵠⵠΔΔ.get("starve_accessory"));
      S.ΔⵠΔᐃ = f || 0;
      S.ᐃΔⲆⵠⲆ = d || Zj;
      S.ⲆⲆⲆⵠΔ = b || 1;
      S.ΔⵠΔᐃᐃ = g || 0;
      S.ᐃⵠΔⲆᐃ = e || Zj;
      S.ᐃᐃⵠΔΔ = c || 0;
    }
    function i() {
      for (var a = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ, b = 0; a.length > b; b++) {
        if (a[b].ΔⲆⲆ === ᐃΔⵠ.ⵠᐃⵠⲆᐃ) {
          S.unlock.ΔⵠΔᐃ[b] = 1;
        } else {
          S.unlock.ΔⵠΔᐃ[b] = 0;
        }
      }
      a = ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ΔⲆⲆ === ᐃΔⵠ.ⵠᐃⵠⲆᐃ) {
          S.unlock.ΔⵠΔᐃᐃ[b] = 1;
        } else {
          S.unlock.ΔⵠΔᐃᐃ[b] = Bg;
        }
      }
      a = ΔⲆⵠⲆ.ⵠⲆᐃᐃ;
      b = ya;
      for (; b < a.length; b++) {
        if (a[b].ΔⲆⲆ === ᐃΔⵠ.ⵠᐃⵠⲆᐃ) {
          S.unlock.ᐃⵠΔⲆᐃ[b] = 1;
        } else {
          S.unlock.ᐃⵠΔⲆᐃ[b] = 0;
        }
      }
      a = ΔⲆⵠⲆ.ᐃⵠΔΔⲆ;
      b = Da;
      for (; a.length > b; b++) {
        if (ᐃΔⵠ.ⵠᐃⵠⲆᐃ === a[b].ΔⲆⲆ) {
          S.unlock.ᐃΔⲆⵠⲆ[b] = za;
        } else {
          S.unlock.ᐃΔⲆⵠⲆ[b] = Lr;
        }
      }
      a = ΔⲆⵠⲆ.Δⵠᐃᐃⵠ;
      b = Bg;
      for (; a.length > b; b++) {
        if (ᐃΔⵠ.ⵠᐃⵠⲆᐃ === a[b].ΔⲆⲆ) {
          S.unlock.ⲆⲆⲆⵠΔ[b] = mk;
          S.unlock.ᐃᐃⵠΔΔ[b] = 1;
        } else {
          S.unlock.ⲆⲆⲆⵠΔ[b] = 0;
          S.unlock.ᐃᐃⵠΔΔ[b] = zl;
        }
      }
    }
    this.waiting = false;
    this.ⲆᐃⲆⵠΔᐃⵠ = Pg;
    this.ᐃⲆᐃⵠᐃΔⲆ = -1;
    this.ᐃⵠⲆⲆⵠⲆⵠ = {
      translate: {
        y: wj,
        x: 0
      },
      angle: 0,
      ⵠⵠ: ΔΔ[Xr.ⵠᐃⲆΔⲆΔⲆ],
      ᐃⵠᐃⵠ: function () {
        this.angle += _w * Mt;
        L.save();
        L.translate(this.translate.x + this.ⵠⵠ.width / 2, this.translate.y + this.ⵠⵠ.height / 2);
        L.rotate(this.angle);
        Mm(L, this.ⵠⵠ, -this.ⵠⵠ.width / jk, -this.ⵠⵠ.height / 2);
        L.restore();
      }
    };
    this.ⲆⵠⲆΔΔⵠⲆ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: Bg,
        x: 0
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆᐃᐃΔⲆ = ya;
    this.ⲆⲆⵠᐃⵠᐃⵠ = -1;
    this.ΔⵠΔⵠⵠᐃⲆ = Oh;
    this.ᐃⵠᐃⵠᐃΔⲆ = "";
    this.ⵠⲆΔᐃΔΔⵠ = "";
    this.ΔⲆᐃᐃᐃⲆⲆ = wr;
    this.ⲆⲆΔⲆⲆ = 0;
    this.ⲆⵠⲆⲆⵠᐃⵠ = -qu;
    this.ⵠᐃᐃⲆᐃΔⵠ = undefined;
    this.ⵠᐃᐃΔⲆⲆⲆ = 0;
    this.ᐃⲆⵠⵠⲆᐃΔ = 0;
    this.ⲆΔΔⵠᐃⲆⲆ = 0;
    this.ⵠᐃⵠΔᐃ = 0;
    this.ΔⲆⲆΔⲆᐃⵠ = tg;
    this.time = 0;
    this.ⲆΔΔᐃⲆ = 0;
    this.ⲆⲆΔΔⵠΔⲆ = 0;
    this.ⵠⲆⵠΔⵠⲆᐃ = Hi;
    this.ᐃΔⲆⵠᐃᐃΔ = Bg;
    this.ⵠᐃΔᐃⲆⵠᐃ = 0;
    this.ΔⵠᐃΔⲆⵠΔ = [];
    this.ⲆΔⲆΔᐃ = -xt;
    this.ⵠⲆᐃΔⲆⵠΔ = -1;
    this.ⲆΔΔⲆΔⲆⵠ = -1;
    this.ᐃᐃᐃⲆⲆΔⵠ = Oh;
    this.ⵠⲆⲆΔΔΔΔ = Oh;
    this.ΔⵠᐃⵠᐃΔⲆ = -js;
    this.ⲆᐃᐃᐃⲆᐃⵠ = -1;
    this.ᐃᐃΔⵠⲆⵠⵠ = -1;
    this.ⲆⲆⲆⲆⵠⵠⵠ = -cu;
    this.ⲆⵠⲆΔⲆΔⲆ = cn;
    this.ᐃΔᐃΔΔᐃⵠ = lj;
    this.ᐃᐃⲆⲆⵠⲆⲆ = undefined;
    this.ᐃΔΔᐃⵠΔᐃ = undefined;
    this.ᐃᐃⵠᐃᐃⵠⵠ = mg;
    this.ⲆⲆΔᐃⵠⵠⵠ = T;
    this.ᐃΔⵠᐃⲆⲆΔ = undefined;
    this.ᐃᐃⵠᐃΔᐃⲆ = ut;
    this.ΔΔᐃᐃΔᐃΔ = undefined;
    this.ΔΔⵠΔΔᐃΔ = hl;
    this.ⲆᐃᐃⲆ = 0;
    this.ΔΔᐃΔΔⲆⲆᐃᐃ = vj;
    this.ⵠⵠᐃⲆᐃ = ⵠⵠΔΔ.get("starve_quality") ? ⵠⵠΔΔ.get("starve_quality") : "high";
    if (this.ⵠⵠᐃⲆᐃ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠⵠᐃⲆᐃ = xt;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠⵠᐃⲆᐃ = Pg;
    }
    this.ⲆⲆⵠⲆⵠᐃΔΔⲆ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ⵠⵠΔΔ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      Zw.ᐃΔⵠΔⵠⲆⲆ();
      vf.ⵠⵠᐃⲆᐃ = 1;
    };
    this.ⲆⲆᐃⲆᐃΔΔⲆΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ⵠⵠΔΔ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (ua / ca);
      Zw.ᐃΔⵠΔⵠⲆⲆ();
      vf.ⵠⵠᐃⲆᐃ = tg;
    };
    if (ⵠⵠΔΔ.get("starve_mapping") === undefined && Ia === "FR") {
      zf.ⲆΔⵠⲆΔᐃᐃ();
      this.mapping = "azerty";
    } else {
      this.mapping = ⵠⵠΔΔ.get("starve_mapping") ? ⵠⵠΔΔ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      zf.ⲆΔⵠⲆΔᐃᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ⲆΔⵠⲆΔᐃᐃ = function () {
      zf.ⲆΔⵠⲆΔᐃᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ⵠⵠΔΔ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⵠᐃⲆᐃᐃΔΔ = function () {
      zf.ⵠᐃⲆᐃᐃΔΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ⵠⵠΔΔ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ⲆⵠᐃᐃⵠⲆⵠ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        y: 0,
        x: 0
      },
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    n();
    this.unlock = {};
    this.unlock.ΔⵠΔᐃ = [];
    this.unlock.ᐃⵠΔⲆᐃ = [];
    this.unlock.ᐃΔⲆⵠⲆ = [];
    this.unlock.ⲆⲆⲆⵠΔ = [];
    this.unlock.ᐃᐃⵠΔΔ = [];
    this.unlock.ΔⵠΔᐃᐃ = [];
    this.ΔⲆⵠΔⲆΔΔ = 0;
    this.ΔⲆᐃⵠᐃΔⲆ = i;
    i();
    this.ⵠᐃⲆΔⲆ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        y: Lr,
        x: 0
      },
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var a;
    var o = 0;
    function r() {
      S.ᐃⲆΔ();
      if (++o == 30) {
        S.ᐃΔⲆΔⵠΔⵠ();
        S.ⲆᐃⲆⵠΔᐃⵠ = xh;
        S.ᐃⲆΔ();
        return;
      }
      dj.setTimeout(r, 33);
    }
    this.ᐃⵠⲆΔⲆ = function (b) {
      a = b;
      S.ΔΔⲆᐃⲆᐃⲆ();
      S.ⲆᐃⲆⵠΔᐃⵠ = tg;
      l = -za;
      t();
    };
    var l = -1;
    function t() {
      S.ᐃⲆΔ();
      if (++l == 30) {
        ⵠⵠΔΔ.set("starve_nickname", S.ⲆⲆΔⵠᐃ.input.value, {
          expires: 30
        });
        S.ⲆⲆΔⵠᐃ.style.display = "none";
        S.ⲆΔⲆΔⵠ.style.display = "none";
        S.ⲆⵠⲆΔΔⵠⲆ.style.display = "none";
        S.ⲆⵠᐃᐃⵠⲆⵠ.style.display = "none";
        S.ⵠᐃⲆΔⲆ.style.display = "none";
        S.stop();
        a();
        return;
      }
      dj.setTimeout(t, 33);
    }
    this.ΔⵠᐃΔΔ = false;
    this.stop = function () {
      this.ΔⵠᐃΔΔ = kg;
    };
    this.ⲆᐃⵠⲆⵠ = function () {
      bx();
      document.getElementById("game_body").style.backgroundColor = Xr.ᐃᐃΔΔⵠ[Ww.time];
      S.ⲆⲆΔⵠᐃ.style.display = "inline-block";
      S.ⲆΔⲆΔⵠ.style.display = "inline-block";
      S.ⲆⵠⲆΔΔⵠⲆ.style.display = "inline-block";
      S.ⲆⵠᐃᐃⵠⲆⵠ.style.display = "inline-block";
      S.ⵠᐃⲆΔⲆ.style.display = "inline-block";
      S.waiting = sl;
      S.ΔⵠᐃΔΔ = fg;
      l = -Te;
      o = Zj;
      r();
    };
    this.ⲆᐃᐃΔⵠⵠΔ = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & ia) === ia) {
        if ((a.position & X) === X) {
          a.translate.x = bo + a.translate.ⲆᐃⲆⲆⵠ - b;
        } else if ((a.position & ea) === ea) {
          a.translate.x = bo + a.translate.ⲆᐃⲆⲆⵠ + b;
        } else {
          a.translate.x = bo + a.translate.ⲆᐃⲆⲆⵠ;
        }
      } else if ((a.position & X) === X) {
        a.translate.x = a.translate.ⲆᐃⲆⲆⵠ - b;
      } else if (ea === (a.position & ea)) {
        a.translate.x = lo - a.translate.ⲆᐃⲆⲆⵠ + b;
      } else {
        a.translate.x = a.translate.ⲆᐃⲆⲆⵠ;
      }
      if ((a.position & ja) === ja) {
        if (fa === (a.position & fa)) {
          a.translate.y = lq + a.translate.ⲆΔⲆⵠⲆ - b;
        } else if ((a.position & ha) === ha) {
          a.translate.y = lq + a.translate.ⲆΔⲆⵠⲆ + b;
        } else {
          a.translate.y = lq + a.translate.ⲆΔⲆⵠⲆ;
        }
      } else if (fa === (a.position & fa)) {
        a.translate.y = a.translate.ⲆΔⲆⵠⲆ - b;
      } else if (ha === (a.position & ha)) {
        a.translate.y = jq + a.translate.ⲆΔⲆⵠⲆ + b;
      } else {
        a.translate.y = a.translate.ⲆΔⲆⵠⲆ;
      }
      if (a.style !== undefined) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ᐃⲆΔ = function () {
      var a = gu;
      if (o != 30 || l != -1) {
        if (o != 30) {
          a = 1500 / (o + 1) - 50;
        }
        if (-Xn != l) {
          a = -(1750 / (30 - l + 1) - 48);
        }
      }
      for (var b = Pg; b < this.ΔⵠΔΔ.length; b++) {
        this.ⲆᐃᐃΔⵠⵠΔ(this.ΔⵠΔΔ[b], a);
      }
      for (b = Lr; this.buttons.length > b; b++) {
        this.ⲆᐃᐃΔⵠⵠΔ(this.buttons[b].info, a);
      }
      for (b = Lr; this.ΔⲆⵠⲆᐃ.length > b; b++) {
        this.ⲆᐃᐃΔⵠⵠΔ(this.ΔⲆⵠⲆᐃ[b], a);
      }
      this.ᐃⵠⲆⲆⵠⲆⵠ.translate.x = (lo - this.ᐃⵠⲆⲆⵠⲆⵠ.ⵠⵠ.width) / 2;
      this.ᐃⵠⲆⲆⵠⲆⵠ.translate.y = zl;
      this.ⲆⵠⲆΔΔⵠⲆ.translate.x = lo - 450;
      this.ⲆⵠⲆΔΔⵠⲆ.translate.y = jq - 40;
      this.ⲆⵠᐃᐃⵠⲆⵠ.translate.x = lo - 340;
      this.ⲆⵠᐃᐃⵠⲆⵠ.translate.y = jq - 25;
      this.ⵠᐃⲆΔⲆ.translate.x = lo - 320;
      this.ⵠᐃⲆΔⲆ.translate.y = 80;
      if (o != 30 || l != -Xn) {
        var c = Zj;
        if (o != 30) {
          c = 1500 / (o + 1) - 50;
        }
        if (l != -1) {
          c = -(1750 / (30 - l + 1) - 48);
        }
        this.ᐃⵠⲆⲆⵠⲆⵠ.translate.y -= c > 0 ? c : -c;
        this.ⲆⵠⲆΔΔⵠⲆ.translate.y -= c < 0 ? c : -c;
        this.ⲆⵠᐃᐃⵠⲆⵠ.translate.y -= c < 0 ? c : -c;
      }
      this.ⲆⵠⲆΔΔⵠⲆ.ᐃⲆΔ();
      this.ⲆⵠᐃᐃⵠⲆⵠ.ᐃⲆΔ();
      this.ⵠᐃⲆΔⲆ.ᐃⲆΔ();
    };
    this.ⲆΔⲆΔⵠⵠΔ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; b.length > f; f++) {
        var g = b[f][Rs];
        var h = Math.PI * b[f][1] / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, Bh);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ΔⵠᐃⲆⵠᐃᐃΔᐃ = function () {
      this.ᐃⵠᐃⵠᐃΔⲆ = document.getElementById("account_nickname_input").value;
      if (this.ⵠⲆΔᐃΔΔⵠ !== this.ᐃⵠᐃⵠᐃΔⲆ) {
        this.ⵠⲆΔᐃΔΔⵠ = this.ᐃⵠᐃⵠᐃΔⲆ;
        this.ΔⲆᐃᐃᐃⲆⲆ = _v(this.ᐃⵠᐃⵠᐃΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ᐃⵠᐃⵠ = function () {
      wd();
      vf.ⵠᐃᐃΔⲆⲆⲆ = ᐃⵠΔⲆ.ᐃⵠΔⵠᐃᐃᐃ(vf.ⵠᐃᐃΔⲆⲆⲆ, vf.ᐃⲆⵠⵠⲆᐃΔ, 0.03);
      this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.x = this.ΔⵠΔΔ[Kh].translate.x + -72 + vf.ⵠᐃᐃΔⲆⲆⲆ * 165;
      this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.ⲆᐃⲆⲆⵠ = this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.x;
      this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.y = this.ΔⵠΔΔ[0].translate.y + 30;
      this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.ⲆΔⲆⵠⲆ = this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ].translate.y;
      for (var f = Jt; this.ΔⵠΔΔ.length > f; f++) {
        if (this.ΔⵠΔΔ[f].active === oa) {
          this.ΔⵠΔΔ[f].ᐃⵠᐃⵠ(L);
        }
      }
      var i;
      if ((i = this.ⲆΔⲆΔᐃ - Date.now()) > 0) {
        var j = Math.floor(i / 60000);
        var k = Math.floor(j / 60);
        j %= 60;
        if (this.ⲆΔΔⲆΔⲆⵠ !== j) {
          this.ⲆΔΔⲆΔⲆⵠ = j;
          j = j < 10 ? "0" + j : "" + j;
          S.ᐃᐃᐃⲆⲆΔⵠ = _v(j, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (k !== this.ⵠⲆᐃΔⲆⵠΔ) {
          this.ⵠⲆᐃΔⲆⵠΔ = k;
          k = k < 10 ? "0" + k : "" + k;
          S.ⵠⲆⲆΔΔΔΔ = _v(k, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (t = this.ΔⵠΔΔ[ⲆⵠⵠΔΔⵠΔ]).ᐃⵠᐃⵠ(L);
        var q = this.ⵠⲆⲆΔΔΔΔ;
        Mm(L, q, t.translate.x - q.width / 4 + 182, t.translate.y - q.height / 4 + 40, q.width / 2, q.height / Zh);
        q = this.ᐃᐃᐃⲆⲆΔⵠ;
        Mm(L, q, t.translate.x - q.width / 4 + 251, t.translate.y - q.height / Vn + 40, q.width / 2, q.height / Mt);
      }
      if ((i = this.ΔⵠᐃⵠᐃΔⲆ - Date.now()) > 0) {
        j = Math.floor(i / 60000);
        k = Math.floor(j / 60);
        var t;
        var U = Math.floor(k / 24);
        k %= 24;
        if ((j %= 60) !== this.ⲆⲆⲆⲆⵠⵠⵠ) {
          this.ⲆⲆⲆⲆⵠⵠⵠ = j;
          j = jn > j ? "0" + j : "" + j;
          S.ⲆⵠⲆΔⲆΔⲆ = _v(j, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (k !== this.ᐃᐃΔⵠⲆⵠⵠ) {
          this.ᐃᐃΔⵠⲆⵠⵠ = k;
          k = k < 10 ? "0" + k : "" + k;
          S.ᐃΔᐃΔΔᐃⵠ = _v(k, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⲆᐃᐃᐃⲆᐃⵠ !== U) {
          this.ⲆᐃᐃᐃⲆᐃⵠ = U;
          U = sk > U ? "0" + U : "" + U;
          S.ᐃᐃⲆⲆⵠⲆⲆ = _v(U, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (t = this.ΔⵠΔΔ[ΔᐃᐃᐃΔⵠⵠ]).ᐃⵠᐃⵠ(L);
        q = this.ᐃᐃⲆⲆⵠⲆⲆ;
        Mm(L, q, t.translate.x - q.width / Vn + 113, t.translate.y - q.height / Pe + 40, q.width / 2, q.height / 2);
        q = this.ᐃΔᐃΔΔᐃⵠ;
        Mm(L, q, t.translate.x - q.width / fs + 182, t.translate.y - q.height / fs + 40, q.width / Gl, q.height / ih);
        q = this.ⲆⵠⲆΔⲆΔⲆ;
        Mm(L, q, t.translate.x - q.width / qg + 251, t.translate.y - q.height / 4 + 40, q.width / 2, q.height / 2);
      }
      if (aa === (this.ΔᐃⵠⵠⲆ & aa)) {
        this.buttons[ⵠᐃⵠⲆⵠΔΔ].info.state = Zv;
      } else if (C === (this.ΔᐃⵠⵠⲆ & C)) {
        this.buttons[ᐃΔⲆⲆⵠᐃⵠ].info.state = Zv;
      } else if ((this.ΔᐃⵠⵠⲆ & c) === c) {
        this.buttons[ⵠⲆⵠⵠᐃΔⵠ].info.state = Zv;
      } else if ((this.ΔᐃⵠⵠⲆ & v) === v) {
        this.buttons[ⲆⲆᐃⵠΔΔᐃ].info.state = Zv;
      } else if (p === (this.ΔᐃⵠⵠⲆ & p)) {
        this.buttons[ΔΔⲆⲆⲆⲆΔ].info.state = Zv;
      } else if (d === (this.ΔᐃⵠⵠⲆ & d)) {
        this.buttons[ⵠᐃΔⵠⵠⵠᐃ].info.state = Zv;
      } else if (m === (this.ΔᐃⵠⵠⲆ & m) || (this.ΔᐃⵠⵠⲆ & P) === P || (this.ΔᐃⵠⵠⲆ & A) === A || (this.ΔᐃⵠⵠⲆ & x) === x || (this.ΔᐃⵠⵠⲆ & J) === J || (this.ΔᐃⵠⵠⲆ & M) === M || B === (this.ΔᐃⵠⵠⲆ & B)) {
        this.buttons[ⵠΔΔᐃⲆᐃⵠ].info.state = Zv;
      } else if (D === (this.ΔᐃⵠⵠⲆ & D) || (this.ΔᐃⵠⵠⲆ & E) === E || I === (this.ΔᐃⵠⵠⲆ & I) || Q === (this.ΔᐃⵠⵠⲆ & Q) || _ === (this.ΔᐃⵠⵠⲆ & _) || (this.ΔᐃⵠⵠⲆ & F) === F) {
        this.buttons[ⵠⲆⵠⵠᐃΔⵠ].info.state = Zv;
      } else if (da === (this.ΔᐃⵠⵠⲆ & da) || W === (this.ΔᐃⵠⵠⲆ & W) || (this.ΔᐃⵠⵠⲆ & O) === O) {
        this.buttons[ⲆⵠΔΔΔΔⲆ].info.state = Zv;
      } else if ((this.ΔᐃⵠⵠⲆ & N) === N) {
        this.buttons[ⲆⲆᐃⵠΔΔᐃ].info.state = Zv;
      }
      if (C === (this.ΔᐃⵠⵠⲆ & C)) {
        if (this.ⵠⵠⲆᐃⵠΔⵠ === this.ᐃΔⵠᐃⲆⲆΔ) {
          this.ⲆⲆΔᐃⵠⵠⵠ = this.ⵠΔΔⵠⵠᐃᐃ;
          this.buttons[this.ⵠΔΔⵠⵠᐃᐃ].info.active = na;
          this.buttons[this.ᐃⲆⲆΔⵠᐃΔ].info.active = na;
          this.buttons[this.ⲆᐃΔⵠᐃᐃⵠ].info.active = na;
        } else {
          this.buttons[this.ⵠΔΔⵠⵠᐃᐃ].info.active = oa;
          this.buttons[this.ᐃⲆⲆΔⵠᐃΔ].info.active = oa;
          this.buttons[this.ⲆᐃΔⵠᐃᐃⵠ].info.active = oa;
        }
        if (this.ᐃΔⵠᐃⲆⲆΔ === this.ᐃⲆⵠⲆᐃⲆᐃ) {
          this.buttons[this.ᐃⲆⵠⲆᐃⲆᐃ].info.state = Zv;
        } else if (this.ⵠᐃⲆᐃⲆΔᐃ === this.ᐃΔⵠᐃⲆⲆΔ) {
          this.buttons[this.ⵠᐃⲆᐃⲆΔᐃ].info.state = Zv;
        } else if (this.ⵠⵠⲆᐃⵠΔⵠ === this.ᐃΔⵠᐃⲆⲆΔ) {
          this.buttons[this.ⵠⵠⲆᐃⵠΔⵠ].info.state = Zv;
        } else if (this.ⲆⲆⵠᐃⲆᐃⲆ === this.ᐃΔⵠᐃⲆⲆΔ) {
          this.buttons[this.ⲆⲆⵠᐃⲆᐃⲆ].info.state = Zv;
        } else if (this.ΔᐃⵠⲆⲆΔᐃ === this.ᐃΔⵠᐃⲆⲆΔ) {
          this.buttons[this.ΔᐃⵠⲆⲆΔᐃ].info.state = Zv;
        }
        if (this.ⲆⲆΔᐃⵠⵠⵠ === this.ⵠΔΔⵠⵠᐃᐃ) {
          this.buttons[this.ⵠΔΔⵠⵠᐃᐃ].info.state = Zv;
        } else if (this.ᐃⲆⲆΔⵠᐃΔ === this.ⲆⲆΔᐃⵠⵠⵠ) {
          this.buttons[this.ᐃⲆⲆΔⵠᐃΔ].info.state = Zv;
        } else if (this.ⲆⲆΔᐃⵠⵠⵠ === this.ⲆᐃΔⵠᐃᐃⵠ) {
          this.buttons[this.ⲆᐃΔⵠᐃᐃⵠ].info.state = Zv;
        }
        if (this.ⲆⵠΔΔΔΔⵠ === this.ᐃᐃⵠᐃΔᐃⲆ) {
          this.buttons[this.ⲆⵠΔΔΔΔⵠ].info.state = Zv;
        } else if (this.ⵠⵠⲆⲆⵠᐃΔ === this.ᐃᐃⵠᐃΔᐃⲆ) {
          this.buttons[this.ⵠⵠⲆⲆⵠᐃΔ].info.state = Zv;
        } else if (this.ᐃᐃⵠᐃΔᐃⲆ === this.ΔⲆΔⲆⲆⲆⲆ) {
          this.buttons[this.ΔⲆΔⲆⲆⲆⲆ].info.state = Zv;
        }
        if (this.ᐃΔⲆⵠᐃΔⵠ === this.ΔΔᐃᐃΔᐃΔ) {
          this.buttons[this.ᐃΔⲆⵠᐃΔⵠ].info.state = Zv;
        } else if (this.ΔΔᐃᐃΔᐃΔ === this.ᐃΔⲆⵠΔⲆΔ) {
          this.buttons[this.ᐃΔⲆⵠΔⲆΔ].info.state = Zv;
        } else if (this.ΔΔᐃᐃΔᐃΔ === this.ⵠⵠᐃᐃⵠⵠᐃ) {
          this.buttons[this.ⵠⵠᐃᐃⵠⵠᐃ].info.state = Zv;
        } else if (this.ΔΔᐃᐃΔᐃΔ === this.Δᐃⵠⵠⵠⵠᐃ) {
          this.buttons[this.Δᐃⵠⵠⵠⵠᐃ].info.state = Zv;
        } else if (this.ⵠΔΔΔⲆΔᐃ === this.ΔΔᐃᐃΔᐃΔ) {
          this.buttons[this.ⵠΔΔΔⲆΔᐃ].info.state = Zv;
        } else if (this.ᐃⵠⵠΔⲆⲆⵠ === this.ΔΔᐃᐃΔᐃΔ) {
          this.buttons[this.ᐃⵠⵠΔⲆⲆⵠ].info.state = Zv;
        }
      }
      if (v === (this.ΔᐃⵠⵠⲆ & v)) {
        if (this.ᐃⲆᐃⵠᐃΔⲆ === -hd) {
          this.buttons[Ma].info.state = Zv;
        } else if (this.ᐃⲆᐃⵠᐃΔⲆ === lw.ⵠᐃᐃⲆⲆ) {
          this.buttons[Na].info.state = Zv;
        } else if (this.ᐃⲆᐃⵠᐃΔⲆ === lw.ΔΔΔΔᐃ) {
          this.buttons[Pa].info.state = Zv;
        } else if (this.ᐃⲆᐃⵠᐃΔⲆ === lw.ᐃᐃⲆΔⵠ) {
          this.buttons[Qa].info.state = Zv;
        } else if (this.ᐃⲆᐃⵠᐃΔⲆ === lw.ⲆⲆⲆⲆᐃ) {
          this.buttons[Oa].info.state = Zv;
        }
        if (this.ΔΔⵠΔΔᐃΔ === 0) {
          this.buttons[Ea].info.state = Zv;
        } else if (mk === this.ΔΔⵠΔΔᐃΔ) {
          this.buttons[Fa].info.state = Zv;
        } else if (this.ΔΔⵠΔΔᐃΔ === 2) {
          this.buttons[Ha].info.state = Zv;
        } else if (this.ΔΔⵠΔΔᐃΔ === 3) {
          this.buttons[Ja].info.state = Zv;
        } else if (this.ΔΔⵠΔΔᐃΔ === 4) {
          this.buttons[Ka].info.state = Zv;
        } else if (this.ΔΔⵠΔΔᐃΔ === 5) {
          this.buttons[La].info.state = Zv;
        }
      }
      if ((this.ΔᐃⵠⵠⲆ & aa) === aa && Ⲇⵠᐃⵠ.ⵠᐃᐃⵠΔⲆᐃ === ya) {
        if (this.buttons[sa].ⲆⵠᐃⲆᐃⵠⲆ(yf.ⲆⲆΔⲆ)) {
          this.buttons[sa].hint = Math.min(1, this.buttons[sa].hint + _w * 1.5);
        } else {
          this.buttons[sa].hint = Math.max(Kh, this.buttons[sa].hint - _w * 1.5);
        }
        if (this.buttons[ta].ⲆⵠᐃⲆᐃⵠⲆ(yf.ⲆⲆΔⲆ)) {
          this.buttons[ta].hint = Math.min(1, this.buttons[ta].hint + _w * 1.5);
        } else {
          this.buttons[ta].hint = Math.max(0, this.buttons[ta].hint - _w * 1.5);
        }
        if (this.buttons[va].ⲆⵠᐃⲆᐃⵠⲆ(yf.ⲆⲆΔⲆ)) {
          this.buttons[va].hint = Math.min(Oq, this.buttons[va].hint + _w * 1.5);
        } else {
          this.buttons[va].hint = Math.max(0, this.buttons[va].hint - _w * 1.5);
        }
        if (this.buttons[Aa].ⲆⵠᐃⲆᐃⵠⲆ(yf.ⲆⲆΔⲆ)) {
          this.buttons[Aa].hint = Math.min(1, this.buttons[Aa].hint + _w * 1.5);
        } else {
          this.buttons[Aa].hint = Math.max(mj, this.buttons[Aa].hint - _w * 1.5);
        }
        if (this.buttons[wa].ⲆⵠᐃⲆᐃⵠⲆ(yf.ⲆⲆΔⲆ)) {
          this.buttons[wa].hint = Math.min(xt, this.buttons[wa].hint + _w * 1.5);
        } else {
          this.buttons[wa].hint = Math.max(tg, this.buttons[wa].hint - _w * 1.5);
        }
        if (this.buttons[xa].ⲆⵠᐃⲆᐃⵠⲆ(yf.ⲆⲆΔⲆ)) {
          this.buttons[xa].hint = Math.min(Xn, this.buttons[xa].hint + _w * 1.5);
        } else {
          this.buttons[xa].hint = Math.max(ps, this.buttons[xa].hint - _w * 1.5);
        }
      }
      var V = 1;
      if ((this.ΔᐃⵠⵠⲆ & (P | A | x | J | M | B)) > za) {
        q = Ⲇⵠ.ⲆⵠⲆⲆᐃΔᐃ;
        L.save();
        L.translate(bo, ra + q.height / 4);
        if (this.ΔⲆⵠΔⵠ === 1) {
          this.ΔᐃᐃᐃᐃⲆⵠ += _w / Jb;
          V = this.ⵠΔΔⵠᐃᐃΔ - 100 / Math.pow(Ol + this.ΔᐃᐃᐃᐃⲆⵠ, 1 + this.ΔᐃᐃᐃᐃⲆⵠ);
          L.rotate(V);
        }
        Mm(L, q, -q.width / 4, -q.height / 4, q.width / Hj, q.height / bs);
        L.restore();
      }
      if (Ⲇⵠᐃⵠ.ⵠᐃᐃⵠΔⲆᐃ === Zj) {
        if (lw.ⵠᐃᐃⲆⲆ === Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ) {
          this.buttons[sa].info.state = Zv;
        } else if (lw.ⲆⲆⲆⲆᐃ === Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ) {
          this.buttons[ta].info.state = Zv;
        } else if (lw.ΔΔΔΔᐃ === Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ) {
          this.buttons[wa].info.state = Zv;
        } else if (lw.ᐃᐃⲆΔⵠ === Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ) {
          this.buttons[xa].info.state = Zv;
        } else if (lw.ⵠΔⲆᐃⵠ === Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ) {
          this.buttons[va].info.state = Zv;
        } else if (Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ === lw.ⵠΔᐃᐃⲆ) {
          this.buttons[Aa].info.state = Zv;
        }
      }
      for (f = js; f < this.buttons.length; f++) {
        if (oa === this.buttons[f].info.active) {
          this.buttons[f].ᐃⵠᐃⵠ(L);
        }
      }
      this.ΔⵠΔΔ[Db].ᐃⵠᐃⵠ(L);
      if (tg < (this.ΔᐃⵠⵠⲆ & (G | R))) {
        q = this.ΔⲆᐃᐃᐃⲆⲆ;
        Mm(L, q, bo - q.width / ks, 138, q.width / 2, q.height / Nb);
      }
      var X = Math.max(fl, Math.min(18, Math.floor((vf.ⲆⲆΔⲆⲆ + ig) / Pn)));
      this.ΔⵠΔΔ[X].active = oa;
      this.ΔⵠΔΔ[X].ᐃⵠᐃⵠ(L);
      this.ΔⵠΔΔ[X].active = na;
      this.buttons[0].ᐃⵠᐃⵠ(L);
      if ((this.ΔᐃⵠⵠⲆ & (c | E | Q | D | _)) > 1) {
        var g = (this.ΔᐃⵠⵠⲆ & (E | Q | D | _)) > 1 ? -190 : Hi;
        q = ΔΔ[Xr.ⵠⲆᐃᐃ][this.ᐃⵠΔⲆᐃ][this.ΔⲆⵠΔⲆΔΔ];
        Mm(L, q, bo - q.width / 4 + g, 183, q.width / lr, q.height / 2);
        this.ⲆᐃᐃⲆ = (this.ⲆᐃᐃⲆ + _w * 1000) % 2000;
        var u = (this.ⲆᐃᐃⲆ < 1000) * 4.5 ? this.ⲆᐃᐃⲆ / 1000 : (2000 - this.ⲆᐃᐃⲆ) / 1000;
        q = ΔΔ[Xr.ᐃⵠΔΔⲆ][this.ᐃΔⲆⵠⲆ][this.ΔⲆⵠΔⲆΔΔ];
        Mm(L, q, bo - q.width / qg - 62 + u + g, 240, q.width / Gl, q.height / 2);
        q = ΔΔ[Xr.ΔᐃΔΔΔ][this.ΔⵠΔᐃ][this.ΔⲆⵠΔⲆΔΔ];
        Mm(L, q, bo - q.width / 4 - 54 + u + g, 272, q.width / pq, q.height / dg);
        Mm(L, q, bo - q.width / Fr + 54 - u + g, 272, q.width / 2, q.height / Zh);
        q = ΔΔ[Xr.ᐃⲆΔᐃΔᐃⲆ][this.ΔⵠΔᐃ][this.ΔⲆⵠΔⲆΔΔ];
        Mm(L, q, bo - q.width / Al + g, 222, q.width / 2, q.height / Yl);
        q = ΔΔ[Xr.ΔⲆⵠⲆⵠ][this.ΔⵠΔᐃᐃ][this.ΔⲆⵠΔⲆΔΔ];
        Mm(L, q, bo - q.width / Fr + g, 222, q.width / Pn, q.height / dg);
      }
      if ((this.ΔᐃⵠⵠⲆ & c) === c) {
        q = ΔΔ[Xr.Δⵠᐃᐃⵠ][this.ⲆⲆⲆⵠΔ][this.ΔⲆⵠΔⲆΔΔ];
        Mm(L, q, bo - q.width / qg - 61, 406 - q.height / Fr, q.width / 2, q.height / 2);
        q = ΔΔ[Xr.Δⵠᐃᐃⵠ][this.ᐃᐃⵠΔΔ][this.ΔⲆⵠΔⲆΔΔ];
        Mm(L, q, bo - q.width / 4 + 53, 406 - q.height / ks, q.width / 2, q.height / ih);
      }
      if (I === (this.ΔᐃⵠⵠⲆ & I)) {
        q = ΔΔ[Xr.Δⵠᐃᐃⵠ][this.ᐃᐃⵠΔΔ][this.ΔⲆⵠΔⲆΔΔ];
        Mm(L, q, bo - q.width / 4 - 200, 268 - q.height / 4, q.width / 2, q.height / Hj);
      }
      if (F === (this.ΔᐃⵠⵠⲆ & F)) {
        q = ΔΔ[Xr.Δⵠᐃᐃⵠ][this.ⲆⲆⲆⵠΔ][this.ΔⲆⵠΔⲆΔΔ];
        Mm(L, q, bo - q.width / 4 - 200, 268 - q.height / 4, q.width / 2, q.height / 2);
      }
      if ((this.ΔᐃⵠⵠⲆ & (E | Q | D | _ | I | F)) > 1) {
        for (f = 1; f < this.buttons.length; f++) {
          if (this.buttons[f].view & this.ΔᐃⵠⵠⲆ) {
            var Y = this.buttons[f].info;
            if (Pg <= Y.ᐃⵠΔᐃⲆⵠᐃ) {
              q = Y.ⵠΔⵠⵠᐃⲆΔⲆⵠ[Y.ᐃⵠΔᐃⲆⵠᐃ].ⵠΔⲆ;
              Mm(L, q, Y.translate.x - q.width / 8 + 44.5, Y.translate.y - q.height / Iq + 45.5, q.width / 4, q.height / 4);
              if (Y.ΔⵠᐃⵠΔⵠⵠ !== 1) {
                q = Ⲇⵠ.ⵠΔΔⵠᐃⵠⵠ;
                Mm(L, q, Y.translate.x - q.width / 4 + 44.5, Y.translate.y - q.height / ol + 44.5, q.width / 2, q.height / pq);
              }
            }
          }
        }
        q = this.ᐃΔΔᐃⵠΔᐃ;
        Mm(L, q, bo - 312, 375, q.width / 2, q.height / 2);
        q = this.ᐃᐃⵠᐃᐃⵠⵠ;
        Mm(L, q, bo - 312, 395, q.width / xq, q.height / 2);
      }
      if (this.ⲆᐃᐃΔⲆ !== this.ⲆⲆⵠᐃⵠᐃⵠ) {
        this.ⲆⲆⵠᐃⵠᐃⵠ = this.ⲆᐃᐃΔⲆ;
        this.ΔⵠΔⵠⵠᐃⲆ = _v("" + this.ⲆᐃᐃΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Mm(L, this.ΔⵠΔⵠⵠᐃⲆ, this.ΔⵠΔΔ[Da].translate.x + 350, Ga, this.ΔⵠΔⵠⵠᐃⲆ.w2, this.ΔⵠΔⵠⵠᐃⲆ.ΔΔᐃᐃᐃ);
      if (this.ⲆⵠⲆⲆⵠᐃⵠ !== this.ⲆⲆΔⲆⲆ) {
        this.ⲆⵠⲆⲆⵠᐃⵠ = this.ⲆⲆΔⲆⲆ;
        this.ⵠᐃᐃⲆᐃΔⵠ = _v("LVL " + (this.ⲆⲆΔⲆⲆ + qu), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, Za, 30, 24, undefined, undefined, rk, Jo, "#3F3019", $g);
      }
      Mm(L, this.ⵠᐃᐃⲆᐃΔⵠ, this.ΔⵠΔΔ[0].translate.x + 94, 0, this.ⵠᐃᐃⲆᐃΔⵠ.w2, this.ⵠᐃᐃⲆᐃΔⵠ.ΔΔᐃᐃᐃ);
      if (Ⲇⵠᐃⵠ.ⵠᐃᐃⵠΔⲆᐃ === 0) {
        var Z = this.buttons[sa].hint;
        if (Eh < Z) {
          q = Ⲇⵠ.ⵠⲆⲆᐃᐃⲆⵠ;
          Mm(L, q, bo - q.width / 4, -36 - ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(1 - Z) * q.height / H, q.width / Gl, q.height / 2);
        }
        if ((Z = this.buttons[ta].hint) > 0) {
          q = Ⲇⵠ.ΔΔᐃⵠΔᐃⵠ;
          Mm(L, q, bo - q.width / 4, -36 - q.height * ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(1 - Z) / 2, q.width / xq, q.height / 2);
        }
        if ((Z = this.buttons[va].hint) > 0) {
          q = Ⲇⵠ.ᐃⲆⲆⵠΔΔⵠ;
          Mm(L, q, bo - q.width / 4, -36 - q.height * ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(Ot - Z) / 2, q.width / 2, q.height / 2);
        }
        if ((Z = this.buttons[Aa].hint) > 0) {
          q = Ⲇⵠ.ⵠⵠⵠΔΔⲆΔ;
          Mm(L, q, bo - q.width / Pe, -36 - ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(1 - Z) * q.height / 2, q.width / 2, q.height / lr);
        }
        if ((Z = this.buttons[xa].hint) > 0) {
          q = Ⲇⵠ.ΔΔᐃᐃⲆᐃⵠ;
          Mm(L, q, bo - q.width / 4, -36 - ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(fl - Z) * q.height / 2, q.width / 2, q.height / bs);
        }
        Z = this.buttons[wa].hint;
        if (tg < Z) {
          q = Ⲇⵠ.ᐃᐃᐃᐃᐃⵠΔ;
          Mm(L, q, bo - q.width / 4, -36 - q.height * ᐃⵠΔⲆ.ⲆⵠΔⲆⵠ(hs - Z) / H, q.width / pq, q.height / 2);
        }
      }
      if (this.ΔⲆⵠΔⵠ === 1 && Math.abs(V - this.ⵠΔΔⵠᐃᐃΔ) < 0.006) {
        L.globalAlpha = Math.min(yg, this.ΔⲆᐃᐃⲆᐃΔ * 3);
        q = Ⲇⵠ.ᐃΔᐃⵠⲆⲆⲆ;
        L.save();
        L.translate(bo, 260);
        this.ΔⲆᐃᐃⲆᐃΔ += _w;
        L.rotate(this.ΔⲆᐃᐃⲆᐃΔ);
        Mm(L, q, -q.width / 2, -q.height / 2, q.width, q.height);
        L.restore();
        u = 1.05 + Math.cos(this.ΔⲆᐃᐃⲆᐃΔ * 5) * 0.05;
        if (this.ⲆᐃⵠⲆⵠᐃⵠ === wj) {
          var ba = u * (q = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[this.ᐃⵠⲆⲆⵠⲆⲆ].ⵠΔⲆ).width;
          var ca = q.height * u;
          Mm(L, q, bo - ba / 2, 260 - ca / ss, ba, ca);
        } else if (this.ⲆᐃⵠⲆⵠᐃⵠ === lb) {
          ba = u * (q = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[0].ⵠΔⲆ).width;
          ca = u * q.height;
          Mm(L, q, bo - ba / ss, 260 - ca / pq, ba, ca);
          ba = (q = ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ[this.ᐃⵠⲆⲆⵠⲆⲆ].ⵠΔⲆ).width * u;
          ca = q.height * u;
          Mm(L, q, bo - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ⲆᐃⵠⲆⵠᐃⵠ === Zg) {
          ba = (q = ΔⲆⵠⲆ.ⵠⲆᐃᐃ[this.ᐃⵠⲆⲆⵠⲆⲆ].ⵠΔⲆ).width * u;
          ca = u * q.height;
          Mm(L, q, bo - ba / 2, 180 - ca / pq, ba, ca);
          ba = u * (q = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[0].ⵠΔⲆ).width;
          ca = q.height * u;
          Mm(L, q, bo - ba / Yg, 260 - ca / Yl, ba, ca);
        } else if (qo === this.ⲆᐃⵠⲆⵠᐃⵠ) {
          ba = u * (q = ΔⲆⵠⲆ.ᐃⵠΔΔⲆ[this.ᐃⵠⲆⲆⵠⲆⲆ].ⵠΔⲆ).width;
          ca = q.height * u;
          L.save();
          L.translate(bo, 260);
          L.rotate(Math.PI);
          Mm(L, q, -ba / 2, -ca / 2, ba, ca);
          L.restore();
        } else if (this.ⲆᐃⵠⲆⵠᐃⵠ === 4) {
          ba = u * (q = ΔⲆⵠⲆ.Δⵠᐃᐃⵠ[this.ᐃⵠⲆⲆⵠⲆⲆ].ⵠΔⲆ).width;
          ca = u * q.height;
          Mm(L, q, bo - ba / Zg, 260 - ca / xq, ba, ca);
        }
        q = this.ⵠⲆⲆⲆΔᐃΔ;
        Mm(L, q, bo - q.width / 4, 340, q.width / 2, q.height / 2);
        q = this.ⵠΔⲆⵠᐃᐃⵠ;
        Mm(L, q, bo - q.width / 4, 365, q.width / 2, q.height / 2);
        if (this.ΔⲆᐃᐃⲆᐃΔ > 6) {
          this.ΔⲆⵠΔⵠ = Bg;
          K(m);
        }
        L.globalAlpha = xt;
      }
      Xw.alert.ᐃⵠᐃⵠ("#FFF", "#000");
      if (S.waiting) {
        this.ᐃⵠⲆⲆⵠⲆⵠ.ᐃⵠᐃⵠ();
      }
    };
    var u = 0;
    var aa = Math.pow(bs, u++);
    var v = Math.pow(2, u++);
    this.ᐃⵠⵠᐃⲆ = v;
    var d = Math.pow(2, u++);
    var c = Math.pow(2, u++);
    var m = Math.pow(2, u++);
    var p = Math.pow(Yl, u++);
    var C = Math.pow(2, u++);
    var z = Math.pow(2, u++);
    this.ⵠⵠⵠΔΔ = z;
    var y = Math.pow(Jt, u++);
    var w = Math.pow(xj, u++);
    var P = Math.pow(ss, u++);
    var A = Math.pow(2, u++);
    var x = Math.pow(ih, u++);
    var J = Math.pow(Jt, u++);
    var M = Math.pow(2, u++);
    var B = Math.pow(2, u++);
    var D = Math.pow(2, u++);
    var I = Math.pow(2, u++);
    var E = Math.pow(2, u++);
    var Q = Math.pow(lr, u++);
    var _ = Math.pow(2, u++);
    var F = Math.pow(lr, u++);
    var R = Math.pow(ss, u++);
    var G = Math.pow(dg, u++);
    var da = Math.pow(lr, u++);
    this.ΔⲆΔΔⵠ = da;
    var W = Math.pow(2, u++);
    this.ΔᐃΔΔⵠ = W;
    var O = Math.pow(2, u++);
    this.ΔΔᐃᐃⲆ = O;
    var N = Math.pow(2, u++);
    function q(a, b, c) {
      for (var d = Db; d < S.ΔⵠΔΔ.length; d++) {
        if (S.ΔⵠΔΔ[d].view & a) {
          S.ΔⵠΔΔ[d].active = b;
        }
      }
      for (d = 0; d < S.buttons.length; d++) {
        if ((S.buttons[d].view & a) !== In) {
          S.buttons[d].info.active = b;
        }
      }
      for (d = 0; d < S.ΔⲆⵠⲆᐃ.length; d++) {
        if ((S.ΔⲆⵠⲆᐃ[d].view & a) !== Lr) {
          S.ΔⲆⵠⲆᐃ[d].style.display = c;
        }
      }
    }
    this.ΔᐃⵠⵠⲆ = aa;
    function U() {
      var a = Number(ⵠⵠΔΔ.get("starve_crate"));
      var b = Number(ⵠⵠΔΔ.get("starve_dead"));
      var c = Number(ⵠⵠΔΔ.get("starve_book"));
      var d = Number(ⵠⵠΔΔ.get("starve_bag"));
      var e = Number(ⵠⵠΔΔ.get("starve_skin"));
      var f = Number(ⵠⵠΔΔ.get("starve_accessory"));
      if (vf.unlock.ΔⵠΔᐃ[vf.ΔⵠΔᐃ] <= wj) {
        vf.ΔⵠΔᐃ = vf.unlock.ΔⵠΔᐃ[e] > Eh ? e : Eh;
      }
      if (vf.unlock.ᐃΔⲆⵠⲆ[vf.ᐃΔⲆⵠⲆ] <= ps) {
        vf.ᐃΔⲆⵠⲆ = vf.unlock.ᐃΔⲆⵠⲆ[c] > Zj ? c : ya;
      }
      if (vf.unlock.ᐃᐃⵠΔΔ[vf.ᐃᐃⵠΔΔ] <= zl) {
        vf.ᐃᐃⵠΔΔ = vf.unlock.ᐃᐃⵠΔΔ[b] > 0 ? b : 0;
      }
      if (vf.unlock.ⲆⲆⲆⵠΔ[vf.ⲆⲆⲆⵠΔ] <= Da) {
        vf.ⲆⲆⲆⵠΔ = vf.unlock.ⲆⲆⲆⵠΔ[a] > ya ? a : 0;
      }
      if (vf.unlock.ΔⵠΔᐃᐃ[vf.ΔⵠΔᐃᐃ] <= Rs) {
        vf.ΔⵠΔᐃᐃ = vf.unlock.ΔⵠΔᐃᐃ[f] > 0 ? f : 0;
      }
      if (vf.unlock.ᐃⵠΔⲆᐃ[vf.ᐃⵠΔⲆᐃ] <= zl) {
        vf.ᐃⵠΔⲆᐃ = vf.unlock.ᐃⵠΔⲆᐃ[d] > Kh ? d : 0;
      }
    }
    function K(a) {
      if (S.ⲆᐃⲆⵠΔᐃⵠ !== wt) {
        q(y, na, "none");
        q(w, na, "none");
        U();
        if (a !== S.ΔᐃⵠⵠⲆ && S.ΔⲆⵠΔⵠ < za) {
          S.ⵠᐃⲆΔⲆ.style.display = a === aa || a === m || a === v || a === C || a === c || p === a ? "inline-block" : "none";
          q(S.ΔᐃⵠⵠⲆ, na, "none");
          S.ΔᐃⵠⵠⲆ = a;
          q(S.ΔᐃⵠⵠⲆ, oa, "inline-block");
        }
      }
    }
    function V(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (b !== mg) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== lj) {
          c();
        }
      };
      d.send();
    }
    function Z() {
      if (Xw.ⲆΔΔᐃⵠᐃⲆ !== undefined && Xw.ⵠᐃⵠⲆΔᐃᐃ !== cn && Ul !== Xw.ΔⵠᐃΔⵠⵠⲆ) {
        U();
        if (Jf % xq) {
          console.log(undefined);
          Ⲇⵠᐃⵠ.connect();
        } else {
          console.log(Hq);
          if (dj.Widget.isBlocked === 1) {
            dj.Widget.createAdPlayer(Ⲇⵠᐃⵠ.connect.bind(Ⲇⵠᐃⵠ), Ⲇⵠᐃⵠ.connect.bind(Ⲇⵠᐃⵠ));
          } else {
            dj.Widget.preroll();
            dj.Widget.play = Ⲇⵠᐃⵠ.connect.bind(Ⲇⵠᐃⵠ);
          }
        }
      }
    }
    this.ᐃⲆΔⵠᐃΔᐃ = Kh;
    this.ⵠᐃⵠΔ = K;
    this.ᐃⵠᐃΔΔⵠᐃ = function () {
      if (S.waiting === false) {
        Xw.reconnect.enabled = false;
        S.waiting = Fg;
        if (Xw.ⲆΔΔᐃⵠᐃⲆ) {
          Z();
        } else {
          V(`${Df}token`, function (a) {
            const b = a.split("_");
            const c = b[Rq] + "_";
            const d = Number(b[hs]);
            const e = Math.abs(function (a) {
              return an(a, 8260, 46947, 8004, 37330, 5330);
            }(d));
            Xw.ⲆΔΔᐃⵠᐃⲆ = c + e;
            Z();
          }, function () {
            S.waiting = false;
          });
        }
        V(`${If}get`, function (a) {
          const b = a.split("_");
          const c = b[0] + "_";
          const d = Number(b[1]);
          const e = Math.abs(Ba(d));
          Xw.ⵠᐃⵠⲆΔᐃᐃ = c + e;
          Z();
        }, function () {
          S.waiting = f;
        });
        V(`${If}set`, function (a) {
          const b = a.split("_");
          const c = b[zl] + "_";
          const d = Number(b[1]);
          const e = Math.abs(function (a) {
            return mt(a, 19490, 6203, 53487, 30585);
          }(d));
          Xw.ΔⵠᐃΔⵠⵠⲆ = c + e;
          Z();
        }, function () {
          S.waiting = Rh;
        });
      }
    };
    var X = ie;
    var ea = pq;
    var fa = eg;
    var ha = br;
    var ia = vb;
    var ja = 32;
    var ka = mk;
    var la = Eh;
    var ma = ie;
    var na = 0;
    var oa = 1;
    if (dj.innerWidth < 1300) {
      this.ⲆⲆΔⵠᐃ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: oa,
        position: fa | X,
        view: aa,
        translate: {
          x: 0,
          ⲆᐃⲆⲆⵠ: 200,
          y: 0,
          ⲆΔⲆⵠⲆ: 184
        }
      };
    } else {
      this.ⲆⲆΔⵠᐃ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: oa,
        position: fa | ia,
        view: aa,
        translate: {
          ⲆᐃⲆⲆⵠ: -180,
          ⲆΔⲆⵠⲆ: 184,
          x: wj,
          y: 0
        }
      };
    }
    this.ⲆⲆΔⵠᐃ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !S.waiting && !S.ΔΔᐃΔΔⲆⲆᐃᐃ) {
        S.ᐃⵠᐃΔΔⵠᐃ();
      }
    });
    this.ⲆⲆΔⵠᐃ.input.value = ⵠⵠΔΔ.get("starve_nickname") ? ⵠⵠΔΔ.get("starve_nickname") : "";
    this.ᐃᐃⵠΔᐃⲆⲆⵠⵠ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: na,
      position: fa | ia,
      view: v,
      translate: {
        ⲆΔⲆⵠⲆ: 110,
        x: 0,
        y: 0,
        ⲆᐃⲆⲆⵠ: -122
      }
    };
    if (dj.innerWidth < 1300) {
      this.ⲆΔⲆΔⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: oa,
        position: fa | X,
        view: aa,
        translate: {
          y: 0,
          ⲆΔⲆⵠⲆ: 225,
          x: 0,
          ⲆᐃⲆⲆⵠ: 208
        }
      };
    } else {
      this.ⲆΔⲆΔⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: oa,
        position: fa | ia,
        view: aa,
        translate: {
          ⲆᐃⲆⲆⵠ: -180,
          y: 0,
          x: Pg,
          ⲆΔⲆⵠⲆ: 225
        }
      };
    }
    this.ⵠⵠⵠⵠ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: na,
      position: fa | ia,
      view: C,
      translate: {
        ⲆΔⲆⵠⲆ: 190,
        x: 0,
        y: tg,
        ⲆᐃⲆⲆⵠ: -294.5
      }
    };
    this.ⲆⲆᐃⲆⲆΔΔⵠᐃ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: na,
      position: fa | ia,
      view: v,
      translate: {
        ⲆΔⲆⵠⲆ: 187,
        ⲆᐃⲆⲆⵠ: 125,
        y: In,
        x: tt
      }
    };
    this.ΔΔⵠⲆⵠⵠⵠⲆⵠ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: na,
      position: fa | ia,
      view: O,
      translate: {
        ⲆΔⲆⵠⲆ: 350,
        ⲆᐃⲆⲆⵠ: -220,
        x: Kh,
        y: 0
      }
    };
    u = 0;
    this.ΔⲆⵠⲆᐃ = [];
    this.ΔⲆⵠⲆᐃ[u++] = this.ⲆⲆΔⵠᐃ;
    this.ΔⲆⵠⲆᐃ[u++] = this.ⲆΔⲆΔⵠ;
    this.ΔⲆⵠⲆᐃ[u++] = this.ⵠⵠⵠⵠ;
    this.ΔⲆⵠⲆᐃ[u++] = this.ᐃᐃⵠΔᐃⲆⲆⵠⵠ;
    this.ΔⲆⵠⲆᐃ[u++] = this.ⲆⲆᐃⲆⲆΔΔⵠᐃ;
    this.ΔⲆⵠⲆᐃ[u++] = this.ΔΔⵠⲆⵠⵠⵠⲆⵠ;
    u = Db;
    this.ΔⵠΔΔ = [];
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ⵠᐃᐃᐃᐃⵠΔ, oa, Lr, 0, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ⲆᐃⲆΔᐃⵠᐃ, na, 0, ya, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ᐃᐃⲆⲆΔⵠⵠ, na, Db, 0, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ⲆᐃΔⵠⲆⵠⲆ, na, 0, zl, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ⲆⵠᐃⲆⲆⲆΔ, na, ps, wj, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ΔⲆΔΔⵠᐃⲆ, na, Da, Zj, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ⲆⵠⵠⲆᐃⵠΔ, na, 0, 0, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ⵠᐃⵠΔᐃⲆⵠ, na, In, 0, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ᐃᐃⵠⵠⵠΔⲆ, na, 0, wj, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.Δᐃᐃᐃᐃᐃⵠ, na, ps, Rq, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ΔΔⲆᐃΔⲆⲆ, na, 0, ps, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ⵠⲆⲆⵠⵠᐃΔ, na, Bg, 0, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ᐃΔⲆΔⵠᐃΔ, na, 0, Rs, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ⵠᐃᐃⲆΔⲆᐃ, na, 0, Lr, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ᐃᐃⲆᐃⵠⲆⲆ, na, mj, 0, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ΔΔⵠⵠΔⲆᐃ, na, 0, In, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ΔⵠⵠⲆΔΔⵠ, na, 0, 0, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ΔᐃⵠⲆᐃΔⲆ, na, 0, 0, X);
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ᐃⲆⵠᐃⵠⵠⲆ, na, In, Zj, X);
    if (dj.innerWidth < 1300) {
      this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃΔᐃΔⲆΔⵠ, oa, 200, 100, fa | X);
    } else {
      this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃΔᐃΔⲆΔⵠ, oa, -753 / 4, il, fa | ia);
    }
    this.ΔⵠΔΔ[u++].view = aa;
    this.ΔⵠΔΔ[u++] = bw(Ⲇⵠ.ⲆΔΔⲆⵠΔⵠ, oa, 403, -10, ea);
    if (dj.innerWidth > 1300) {
      this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ⵠΔᐃⲆⵠᐃⵠ, oa, -885 / 4, -159.5, ha | ia);
      this.ΔⵠΔΔ[u++].view = aa;
    }
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ΔΔᐃⵠΔⵠᐃ, na, -1293 / ba, il, fa | ia);
    this.ΔⵠΔΔ[u++].view = v;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ⲆⵠᐃᐃⲆΔⵠ, na, -356.25, ar, fa | ia);
    this.ΔⵠΔΔ[u++].view = c;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃⲆⵠⲆⵠΔⲆ, na, -905 / 4, 50, fa | ia);
    this.ΔⵠΔΔ[u++].view = d;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃΔⵠⵠⲆⵠⵠ, na, -1608 / Mq, 130, fa | ia);
    this.ΔⵠΔΔ[u++].view = m;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃⲆΔᐃΔⵠΔ, na, -1117 / Dt, 130, fa | ia);
    this.ΔⵠΔΔ[u++].view = da;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ΔᐃⲆᐃⵠⲆᐃ, na, -1222 / Al, 130, fa | ia);
    this.ΔⵠΔΔ[u++].view = W;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ⲆⵠΔΔΔⲆᐃ, na, -1222 / Al, 100, fa | ia);
    this.ΔⵠΔΔ[u++].view = O;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ⲆⵠⲆΔⵠᐃᐃ, na, -Ⲇⵠ.ⲆⵠⲆΔⵠᐃᐃ.width / Gi - 350, -kb, fa | ia);
    this.ΔⵠΔΔ[u++].view = N;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃΔⲆⲆⲆᐃᐃ, na, -374.25, 110, fa | ia);
    this.ΔⵠΔΔ[u++].view = p;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃΔⲆⲆⲆⲆᐃ, na, -306.5, Y, fa | ia);
    this.ΔⵠΔΔ[u++].view = C;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ⲆⵠΔⵠⵠΔΔ, na, -1381 / Og, 80, fa | ia);
    this.ΔⵠΔΔ[u++].view = z;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ⲆⲆΔⲆⵠᐃᐃ, na, -1542 / Gi, 150, fa | ia);
    this.ΔⵠΔΔ[u++].view = P;
    var pa = 3.6;
    var qa = this.ⲆΔⲆΔⵠⵠΔ([["#25c5d6", nq * pa], ["#e2cf27", pa * sk], ["#afac98", 108], ["#d88e23", pa * 57]]);
    this.ΔⵠΔΔ[u] = bw(qa, na, -qa.width / 4, 178, fa | ia);
    this.ΔⵠΔΔ[u++].view = P;
    this.ⵠᐃⲆΔᐃⲆⲆⲆⲆ = function (a, b, c) {
      var d;
      S.ΔⲆⵠΔⵠ = 1;
      S.ΔᐃᐃᐃᐃⲆⵠ = ps;
      S.ΔⲆᐃᐃⲆᐃΔ = Da;
      S.ⵠΔΔⵠᐃᐃΔ = a;
      S.ⲆᐃⵠⲆⵠᐃⵠ = b;
      var e = Pg;
      if (ps === b) {
        for (e = 0; e < ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ.length && ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[e].id !== c; e++);
        d = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ[e];
        S.unlock.ΔⵠΔᐃ[e] = Xn;
      } else if (b === 1) {
        for (e = 0; e < ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ.length && c !== ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ[e].id; e++);
        d = ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ[e];
        S.unlock.ΔⵠΔᐃᐃ[e] = 1;
      } else if (b === 2) {
        for (e = tg; e < ΔⲆⵠⲆ.ⵠⲆᐃᐃ.length && ΔⲆⵠⲆ.ⵠⲆᐃᐃ[e].id !== c; e++);
        d = ΔⲆⵠⲆ.ⵠⲆᐃᐃ[e];
        S.unlock.ᐃⵠΔⲆᐃ[e] = xt;
      } else if (b === 3) {
        for (e = 0; e < ΔⲆⵠⲆ.ᐃⵠΔΔⲆ.length && c !== ΔⲆⵠⲆ.ᐃⵠΔΔⲆ[e].id; e++);
        d = ΔⲆⵠⲆ.ᐃⵠΔΔⲆ[e];
        S.unlock.ᐃΔⲆⵠⲆ[e] = Ot;
      } else if (nb === b) {
        for (e = tg; ΔⲆⵠⲆ.Δⵠᐃᐃⵠ.length > e && ΔⲆⵠⲆ.Δⵠᐃᐃⵠ[e].id !== c; e++);
        d = ΔⲆⵠⲆ.Δⵠᐃᐃⵠ[e];
        S.unlock.ⲆⲆⲆⵠΔ[e] = qu;
        S.unlock.ᐃᐃⵠΔΔ[e] = lb;
      }
      S.ᐃⵠⲆⲆⵠⲆⲆ = e;
      S.ⵠΔⲆⵠᐃᐃⵠ = _v("by " + d.ᐃΔᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, T, 30, 24, undefined, cn, undefined, mb, "#000000", 24);
      S.ⵠⲆⲆⲆΔᐃΔ = _v(d.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, Jg, undefined, mb, undefined, "#000000", 20);
    };
    this.ΔⲆⵠΔⵠ = 0;
    this.ΔᐃᐃᐃᐃⲆⵠ = Da;
    this.ⵠΔΔⵠᐃᐃΔ = 0;
    this.ⲆᐃⵠⲆⵠᐃⵠ = 0;
    this.ΔⲆᐃᐃⲆᐃΔ = Rq;
    this.ⵠΔⲆⵠᐃᐃⵠ = undefined;
    this.ⵠⲆⲆⲆΔᐃΔ = undefined;
    var ra = 262 - 260 / ol;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ⲆⵠᐃⵠⲆⲆᐃ, na, -1542 / Al, 150, fa | ia);
    this.ΔⵠΔΔ[u++].view = M;
    qa = this.ⲆΔⲆΔⵠⵠΔ([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", pa * 57]]);
    this.ΔⵠΔΔ[u] = bw(qa, na, -qa.width / 4, 178, fa | ia);
    this.ΔⵠΔΔ[u++].view = M;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃᐃᐃΔⵠⵠⵠ, na, -1542 / nj, 150, fa | ia);
    this.ΔⵠΔΔ[u++].view = x;
    qa = this.ⲆΔⲆΔⵠⵠΔ([["#d33a2a", pa * Wg], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", pa * 57]]);
    this.ΔⵠΔΔ[u] = bw(qa, na, -qa.width / qg, 178, fa | ia);
    this.ΔⵠΔΔ[u++].view = x;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃΔⲆⲆᐃⵠᐃ, na, -385.5, 150, fa | ia);
    this.ΔⵠΔΔ[u++].view = J;
    qa = this.ⲆΔⲆΔⵠⵠΔ([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", pa * 57]]);
    this.ΔⵠΔΔ[u] = bw(qa, na, -qa.width / 4, 178, fa | ia);
    this.ΔⵠΔΔ[u++].view = J;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ΔⲆᐃⵠᐃⵠⲆ, na, -385.5, 150, fa | ia);
    this.ΔⵠΔΔ[u++].view = A;
    qa = this.ⲆΔⲆΔⵠⵠΔ([["#d45ce5", 10.8], ["#25c5d6", pa * Zk], ["#e2cf27", 108], ["#afac98", pa * 57]]);
    this.ΔⵠΔΔ[u] = bw(qa, na, -qa.width / eh, 178, fa | ia);
    this.ΔⵠΔΔ[u++].view = A;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ΔᐃΔⵠΔΔⵠ, na, -1542 / Ps, 150, fa | ia);
    this.ΔⵠΔΔ[u++].view = B;
    qa = this.ⲆΔⲆΔⵠⵠΔ([["#d33a2a", bb * pa], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", pa * 57]]);
    this.ΔⵠΔΔ[u] = bw(qa, na, -qa.width / eh, 178, fa | ia);
    this.ΔⵠΔΔ[u++].view = B;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ⵠⲆΔⲆⲆᐃᐃ, na, -341.5, 100, fa | ia);
    this.ΔⵠΔΔ[u++].view = D;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃᐃⵠⲆΔⵠⲆ, na, -1366 / nb, 100, fa | ia);
    this.ΔⵠΔΔ[u++].view = _;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ⵠⵠⲆⵠΔᐃⲆ, na, -1366 / $i, 100, fa | ia);
    this.ΔⵠΔΔ[u++].view = E;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ⵠⲆⵠᐃΔΔᐃ, na, -341.5, Yh, fa | ia);
    this.ΔⵠΔΔ[u++].view = Q;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ⵠΔᐃⲆΔⲆΔ, na, -341.5, 100, fa | ia);
    this.ΔⵠΔΔ[u++].view = I;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ΔΔⵠᐃᐃⵠⲆ, na, -1366 / $i, Hl, fa | ia);
    this.ΔⵠΔΔ[u++].view = F;
    ⲆⵠⵠΔΔⵠΔ = u++;
    this.ΔⵠΔΔ[ⲆⵠⵠΔΔⵠΔ] = bw(Ⲇⵠ.ⲆⵠⵠΔΔⵠΔ, na, 908 / Yl + 30, 0, fa);
    ΔᐃᐃᐃΔⵠⵠ = u++;
    this.ΔⵠΔΔ[ΔᐃᐃᐃΔⵠⵠ] = bw(Ⲇⵠ.ΔᐃᐃᐃΔⵠⵠ, na, 908 / dg + 597 / Yg + 60, Eh, fa);
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ΔⲆᐃⲆᐃᐃΔ, na, -189.5, -nr, fa | ia);
    this.ΔⵠΔΔ[u++].view = w;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃⵠᐃΔⵠⲆⲆ, na, -189.5, -Wl, fa | ia);
    this.ΔⵠΔΔ[u++].view = y;
    ΔⵠⲆⵠᐃᐃⵠ = u++;
    this.ΔⵠΔΔ[ΔⵠⲆⵠᐃᐃⵠ] = bw(Ⲇⵠ.ⵠⲆⲆⲆΔᐃⲆ, oa, 93, 30, fa);
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ᐃⲆⵠⵠⵠⲆΔ, na, -692 / fs, 110, fa | ia);
    this.ΔⵠΔΔ[u++].view = R;
    this.ΔⵠΔΔ[u] = bw(Ⲇⵠ.ΔᐃⲆᐃᐃⵠⵠ, na, -692 / nj, 110, fa | ia);
    this.ΔⵠΔΔ[u++].view = G;
    u = Hi;
    this.buttons = [];
    this.buttons[u] = aw(50, 57, 0, [Ⲇⵠ.ᐃᐃⵠᐃⵠⵠⲆ, Ⲇⵠ.ⵠⵠⲆᐃᐃΔⲆ, Ⲇⵠ.ⲆⲆᐃᐃΔⵠⲆ], ka, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        K(z);
      } else {
        K(d);
      }
    }, 320, 0, X, oa);
    u++;
    if (dj.innerWidth < 1300) {
      this.buttons[u] = aw(202, 97, 0, [Ⲇⵠ.ᐃⲆΔΔΔⲆⵠ, Ⲇⵠ.ⵠᐃⵠⲆⵠΔᐃ, Ⲇⵠ.ⵠⲆⲆⲆⵠΔⵠ], ka, la, this.ᐃⵠᐃΔΔⵠᐃ, 462, 235, fa | X, oa);
    } else {
      this.buttons[u] = aw(202, 97, 0, [Ⲇⵠ.ᐃⲆΔΔΔⲆⵠ, Ⲇⵠ.ⵠᐃⵠⲆⵠΔᐃ, Ⲇⵠ.ⵠⲆⲆⲆⵠΔⵠ], ka, la, this.ᐃⵠᐃΔΔⵠᐃ, 74, 235, fa | ia, oa);
    }
    this.buttons[u].view = aa;
    u++;
    if (dj.innerWidth > 1300) {
      this.buttons[u] = aw(355, 168, 0, [Ⲇⵠ.ⲆⵠΔⵠᐃΔΔ, Ⲇⵠ.ⲆⵠΔⵠᐃΔΔ, Ⲇⵠ.ⲆⵠΔⵠᐃΔΔ], ka, la, function () {
        dj.open("./changelog.html", "_blank");
      }, -195, -115, ha | ia, oa);
      this.buttons[u++].view = aa;
      this.buttons[u] = aw(355, 168, 0, [Ⲇⵠ.ⵠⲆᐃΔᐃᐃⵠ, Ⲇⵠ.ⵠⲆᐃΔᐃᐃⵠ, Ⲇⵠ.ⵠⲆᐃΔᐃᐃⵠ], ka, la, function () {
        dj.open("https://taming.io", "_blank");
      }, 20, -115, ha | ia, oa);
      this.buttons[u++].view = aa;
    }
    this.buttons[u++] = aw(80, 80, 0, [Ⲇⵠ.ⵠᐃᐃΔᐃⲆΔ, Ⲇⵠ.ⲆᐃⲆᐃⲆΔΔ, Ⲇⵠ.ΔᐃΔΔΔΔⲆ], ka, la, function () {
      dj.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, te, ea, oa);
    this.buttons[u++] = aw(80, 80, 0, [Ⲇⵠ.ᐃΔᐃᐃⲆⵠᐃ, Ⲇⵠ.ΔΔⵠⵠⵠⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠᐃΔ], ka, la, function () {
      dj.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, ea, oa);
    this.buttons[u++] = aw(80, 80, 0, [Ⲇⵠ.ᐃᐃⵠᐃΔᐃⵠ, Ⲇⵠ.ΔⵠᐃᐃᐃΔΔ, Ⲇⵠ.ⲆΔⲆᐃⲆΔⵠ], ka, la, function () {
      dj.open("https://reddit.com/r/starveio", "_blank");
    }, 280, jn, ea, oa);
    this.buttons[u++] = aw(80, 80, 0, [Ⲇⵠ.ⵠⲆΔⵠⵠᐃᐃ, Ⲇⵠ.ⲆΔⵠΔⵠⲆⵠ, Ⲇⵠ.ⵠⲆΔⵠᐃᐃΔ], ka, la, function () {
      dj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, ea, oa);
    this.buttons[u++] = aw(80, 80, 0, [Ⲇⵠ.Δⵠⵠᐃⵠᐃⵠ, Ⲇⵠ.ᐃⲆΔΔΔΔⵠ, Ⲇⵠ.ⵠᐃⵠⲆΔⵠᐃ], ka, la, function () {
      dj.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, ea, oa);
    this.buttons[u++] = aw(80, 80, 0, [Ⲇⵠ.ᐃΔΔΔᐃᐃᐃ, Ⲇⵠ.ΔⵠⲆᐃⵠⲆⲆ, Ⲇⵠ.ΔΔⲆⲆΔᐃⵠ], ka, la, function () {
      dj.open("https://twitter.com/lapamauve", "_blank");
    }, 105, vr, ea, oa);
    this.buttons[u++] = aw(80, 80, 0, [Ⲇⵠ.ⵠⵠᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃᐃⲆΔΔⵠⲆ, Ⲇⵠ.ⲆᐃⲆΔⲆΔⵠ], ka, la, function () {
      dj.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, ea, oa);
    ᐃΔⲆⲆⵠᐃⵠ = u++;
    this.buttons[ᐃΔⲆⲆⵠᐃⵠ] = aw(232, 142, 0, [Ⲇⵠ.ᐃⵠⲆⲆⲆᐃΔ, Ⲇⵠ.ⵠΔᐃⵠᐃⵠⲆ, Ⲇⵠ.ⵠⵠᐃΔⵠⲆᐃ], ka, la, function () {
      K(C);
      Kf(vf.ⵠΔΔⵠⵠᐃᐃ, vf.ⵠⵠⲆᐃⵠΔⵠ, vf.ⵠⵠⲆⲆⵠᐃΔ, vf.ᐃⵠⵠΔⲆⲆⵠ);
    }, -5, 573, X, oa);
    this.buttons[u++] = aw(236, 165, 0, [Ⲇⵠ.ⵠⵠΔⵠⲆΔⵠ, Ⲇⵠ.ⵠⵠΔⵠⲆΔⵠ, Ⲇⵠ.ⵠⵠΔⵠⲆΔⵠ], ka, ma, function () {
      K(C);
    }, -5, 566, X, oa);
    ΔΔⲆⲆⲆⲆΔ = u++;
    this.buttons[ΔΔⲆⲆⲆⲆΔ] = aw(236, 165, 0, [Ⲇⵠ.ⵠΔᐃΔⵠΔⲆ, Ⲇⵠ.Δⵠᐃᐃⵠⵠⵠ, Ⲇⵠ.ᐃᐃⲆⲆⲆⵠᐃ], ka, la, function () {
      K(p);
    }, -kq, 494, X, oa);
    this.buttons[u++] = aw(236, 165, 0, [Ⲇⵠ.ⲆΔᐃΔΔⵠᐃ, Ⲇⵠ.ⲆΔᐃΔΔⵠᐃ, Ⲇⵠ.ⲆΔᐃΔΔⵠᐃ], ka, ma, function () {
      K(p);
    }, -5, 494, X, oa);
    ⲆⵠΔΔΔΔⲆ = u++;
    this.buttons[ⲆⵠΔΔΔΔⲆ] = aw(236, 165, 0, [Ⲇⵠ.ⵠΔᐃΔⵠΔⲆ, Ⲇⵠ.Δⵠᐃᐃⵠⵠⵠ, Ⲇⵠ.ᐃᐃⲆⲆⲆⵠᐃ], ka, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        if (tt < vf.ΔⵠᐃⵠᐃΔⲆ - Date.now()) {
          K(O);
        }
      } else {
        K(d);
      }
    }, -5, 415, X, oa);
    this.buttons[u++] = aw(236, 165, 0, [Ⲇⵠ.ΔᐃᐃⲆⵠⵠᐃ, Ⲇⵠ.ΔᐃᐃⲆⵠⵠᐃ, Ⲇⵠ.ΔᐃᐃⲆⵠⵠᐃ], ka, ma, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        if (vf.ΔⵠᐃⵠᐃΔⲆ - Date.now() > 0) {
          K(O);
        }
      } else {
        K(d);
      }
    }, -5, 415, X, oa);
    ⵠΔΔᐃⲆᐃⵠ = u++;
    this.buttons[ⵠΔΔᐃⲆᐃⵠ] = aw(236, 165, 0, [Ⲇⵠ.ⵠΔᐃΔⵠΔⲆ, Ⲇⵠ.Δⵠᐃᐃⵠⵠⵠ, Ⲇⵠ.ᐃᐃⲆⲆⲆⵠᐃ], ka, la, function () {
      K(m);
    }, -5, 336, X, oa);
    this.buttons[u++] = aw(236, 165, 0, [Ⲇⵠ.ⲆᐃⲆⵠᐃΔΔ, Ⲇⵠ.ⲆᐃⲆⵠᐃΔΔ, Ⲇⵠ.ⲆᐃⲆⵠᐃΔΔ], ka, ma, function () {
      K(m);
    }, -5, 336, X, oa);
    ⵠⲆⵠⵠᐃΔⵠ = u++;
    this.buttons[ⵠⲆⵠⵠᐃΔⵠ] = aw(236, 165, 0, [Ⲇⵠ.ⵠΔᐃΔⵠΔⲆ, Ⲇⵠ.Δⵠᐃᐃⵠⵠⵠ, Ⲇⵠ.ᐃᐃⲆⲆⲆⵠᐃ], ka, la, function () {
      K(c);
    }, -5, 257, X, oa);
    this.buttons[u++] = aw(236, 165, 0, [Ⲇⵠ.ᐃⵠⲆΔᐃΔⵠ, Ⲇⵠ.ᐃⵠⲆΔᐃΔⵠ, Ⲇⵠ.ᐃⵠⲆΔᐃΔⵠ], ka, ma, function () {
      K(c);
    }, -ed, 257, X, oa);
    ⵠᐃⵠⲆⵠΔΔ = u++;
    this.buttons[ⵠᐃⵠⲆⵠΔΔ] = aw(236, 165, 0, [Ⲇⵠ.ⵠΔᐃΔⵠΔⲆ, Ⲇⵠ.Δⵠᐃᐃⵠⵠⵠ, Ⲇⵠ.ᐃᐃⲆⲆⲆⵠᐃ], ka, la, function () {
      K(aa);
    }, -5, 178, X, oa);
    this.buttons[u++] = aw(236, 165, 0, [Ⲇⵠ.ᐃⵠᐃΔᐃᐃᐃ, Ⲇⵠ.ᐃⵠᐃΔᐃᐃᐃ, Ⲇⵠ.ᐃⵠᐃΔᐃᐃᐃ], ka, ma, function () {
      K(aa);
    }, -5, 178, X, oa);
    ⵠᐃΔⵠⵠⵠᐃ = u++;
    this.ⵠᐃΔⵠⵠⵠᐃ = ⵠᐃΔⵠⵠⵠᐃ;
    this.buttons[ⵠᐃΔⵠⵠⵠᐃ] = aw(324, 222, 0, [Ⲇⵠ.ⲆⵠⵠⵠᐃΔᐃ, Ⲇⵠ.ΔⲆΔᐃᐃⵠᐃ, Ⲇⵠ.ᐃⵠᐃΔⲆΔΔ], ka, la, function () {
      K(d);
    }, 0, 70, X, oa);
    ⲆⲆᐃⵠΔΔᐃ = u++;
    ⲆΔᐃⵠⲆⲆⲆ = u++;
    this.ⲆⲆᐃⵠΔΔᐃ = ⲆⲆᐃⵠΔΔᐃ;
    this.ⲆΔᐃⵠⲆⲆⲆ = ⲆΔᐃⵠⲆⲆⲆ;
    this.buttons[ⲆⲆᐃⵠΔΔᐃ] = aw(324, 222, 0, [Ⲇⵠ.ΔΔΔᐃⲆΔᐃ, Ⲇⵠ.ⲆⲆᐃᐃΔᐃΔ, Ⲇⵠ.ⲆᐃΔΔᐃⲆᐃ], ka, la, function () {
      K(v);
      Ca(-1);
    }, wj, 70, X, na);
    this.buttons[ⲆΔᐃⵠⲆⲆⲆ] = aw(324, 222, 0, [Ⲇⵠ.ⲆⲆΔΔᐃⵠᐃ, Ⲇⵠ.ⲆⲆΔΔᐃⵠᐃ, Ⲇⵠ.ⲆⲆΔΔᐃⵠᐃ], ka, ma, function () {
      K(v);
      Ca(-yg);
    }, ya, 70, X, na);
    if (Ⲇⵠᐃⵠ.ⵠᐃᐃⵠΔⲆᐃ === 0) {
      var sa = u++;
      if (dj.innerWidth < 1300) {
        this.buttons[sa] = aw(266, 176, 0, [Ⲇⵠ.ΔΔⵠⵠⵠⵠᐃ, Ⲇⵠ.ⵠΔᐃΔⲆΔⲆ, Ⲇⵠ.ⲆΔᐃᐃⲆΔⵠ], ka, la, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(lw.ⵠᐃᐃⲆⲆ);
        }, 150, 300, X | fa, oa);
      } else {
        this.buttons[sa] = aw(266, 176, 0, [Ⲇⵠ.ΔΔⵠⵠⵠⵠᐃ, Ⲇⵠ.ⵠΔᐃΔⲆΔⲆ, Ⲇⵠ.ⲆΔᐃᐃⲆΔⵠ], ka, la, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(lw.ⵠᐃᐃⲆⲆ);
        }, -340, 100, ia | fa, oa);
      }
      this.buttons[sa].view = aa;
      this.buttons[sa].hint = 0;
      var ta = u++;
      if (dj.innerWidth < 1300) {
        this.buttons[ta] = aw(266, 176, 0, [Ⲇⵠ.ΔΔⵠᐃᐃΔΔ, Ⲇⵠ.ⲆⵠⲆⲆⵠΔΔ, Ⲇⵠ.ᐃΔΔΔⲆᐃⵠ], ka, la, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(lw.ⲆⲆⲆⲆᐃ);
        }, 150, 400, X | fa, oa);
      } else {
        this.buttons[ta] = aw(266, 176, 0, [Ⲇⵠ.ΔΔⵠᐃᐃΔΔ, Ⲇⵠ.ⲆⵠⲆⲆⵠΔΔ, Ⲇⵠ.ᐃΔΔΔⲆᐃⵠ], ka, la, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(lw.ⲆⲆⲆⲆᐃ);
        }, -340, 200, ia | fa, oa);
      }
      this.buttons[ta].view = aa;
      this.buttons[ta].hint = Da;
      var va = u++;
      if (dj.innerWidth < 1300) {
        this.buttons[va] = aw(266, 176, 0, [Ⲇⵠ.ⵠΔΔΔⵠᐃⲆ, Ⲇⵠ.ᐃⵠΔⵠⵠΔⵠ, Ⲇⵠ.ᐃⲆⵠᐃⵠⵠΔ], ka, la, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(lw.ⵠΔⲆᐃⵠ);
        }, 450, 300, X | fa, oa);
      } else {
        this.buttons[va] = aw(266, 176, 0, [Ⲇⵠ.ⵠΔΔΔⵠᐃⲆ, Ⲇⵠ.ᐃⵠΔⵠⵠΔⵠ, Ⲇⵠ.ᐃⲆⵠᐃⵠⵠΔ], ka, la, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(lw.ⵠΔⲆᐃⵠ);
        }, -340, 300, ia | fa, oa);
      }
      this.buttons[va].view = aa;
      this.buttons[va].hint = 0;
      var wa = u++;
      if (dj.innerWidth < 1300) {
        this.buttons[wa] = aw(266, 176, 0, [Ⲇⵠ.ⵠⵠⵠᐃΔΔΔ, Ⲇⵠ.ⵠⲆⵠΔᐃΔⲆ, Ⲇⵠ.ᐃⲆᐃΔΔⵠᐃ], ka, la, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(lw.ΔΔΔΔᐃ);
        }, 300, 300, X | fa, oa);
      } else {
        this.buttons[wa] = aw(266, 176, 0, [Ⲇⵠ.ⵠⵠⵠᐃΔΔΔ, Ⲇⵠ.ⵠⲆⵠΔᐃΔⲆ, Ⲇⵠ.ᐃⲆᐃΔΔⵠᐃ], ka, la, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(lw.ΔΔΔΔᐃ);
        }, 204, Nn, ia | fa, oa);
      }
      this.buttons[wa].view = aa;
      this.buttons[wa].hint = 0;
      var xa = u++;
      if (dj.innerWidth < 1300) {
        this.buttons[xa] = aw(266, 176, 0, [Ⲇⵠ.ᐃⵠⵠΔⵠΔᐃ, Ⲇⵠ.ΔⲆⵠⵠⲆⲆⵠ, Ⲇⵠ.ⲆΔⵠᐃⵠΔⵠ], ka, la, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(lw.ᐃᐃⲆΔⵠ);
        }, 300, 400, X | fa, oa);
      } else {
        this.buttons[xa] = aw(266, 176, 0, [Ⲇⵠ.ᐃⵠⵠΔⵠΔᐃ, Ⲇⵠ.ΔⲆⵠⵠⲆⲆⵠ, Ⲇⵠ.ⲆΔⵠᐃⵠΔⵠ], ka, la, function () {
          Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(lw.ᐃᐃⲆΔⵠ);
        }, 204, 200, ia | fa, oa);
      }
      this.buttons[xa].view = aa;
      this.buttons[xa].hint = Bg;
      var Aa = u++;
      this.buttons[Aa] = aw(266, 176, 0, [Ⲇⵠ.ⵠⲆⵠⵠⲆᐃΔ, Ⲇⵠ.ⵠᐃΔΔⵠᐃᐃ, Ⲇⵠ.ⵠⲆᐃᐃⵠΔⲆ], ka, la, function () {
        Ⲇⵠᐃⵠ.ⵠΔΔⲆⵠ(lw.ⵠΔᐃᐃⲆ);
      }, dj.innerWidth < 1300 ? 450 : 204, dj.innerWidth < 1300 ? 400 : 300, (dj.innerWidth < 1300 ? X : ia) | fa, oa);
      this.buttons[Aa].view = aa;
      this.buttons[Aa].hint = 0;
    }
    function Ca(a, b) {
      if (b !== undefined) {
        vf.ΔΔⵠΔΔᐃΔ = b;
        var c = vf.ΔⵠᐃΔⲆⵠΔ[b];
        vf.ⲆΔΔᐃⲆ = c.score;
        vf.ⵠᐃⵠΔᐃ = c.kill;
        vf.ΔⲆⲆΔⲆᐃⵠ = c.death;
        vf.time = c.time;
        vf.ⵠᐃΔᐃⲆⵠᐃ = c.bestScore;
        vf.ⵠⲆⵠΔⵠⲆᐃ = c.bestKill;
        vf.ᐃΔⲆⵠᐃᐃΔ = c.bestTime;
        vf.ⲆⲆΔΔⵠΔⲆ = c.scoreTotal;
      }
      if (a === undefined) {
        a = vf.ᐃⲆᐃⵠᐃΔⲆ;
      }
      vf.ᐃⲆᐃⵠᐃΔⲆ = a;
      if (a >= wj) {
        document.getElementById("stats_box_time").innerHTML = vf.ᐃΔⲆⵠᐃᐃΔ[a];
        document.getElementById("stats_box_kill").innerHTML = vf.ⵠⲆⵠΔⵠⲆᐃ[a];
        document.getElementById("stats_box_score").innerHTML = vf.ⵠᐃΔᐃⲆⵠᐃ[a];
      } else {
        var d = 0;
        for (var f = tt; f < vf.ⵠᐃⵠΔᐃ.length; f++) {
          d += vf.ⵠᐃⵠΔᐃ[f];
        }
        var g = ps;
        for (f = 0; vf.time.length > f; f++) {
          g += vf.time[f];
        }
        document.getElementById("stats_box_time").innerHTML = g;
        document.getElementById("stats_box_kill").innerHTML = d;
        document.getElementById("stats_box_score").innerHTML = vf.ⲆΔΔᐃⲆ;
      }
    }
    this.buttons[u] = aw(87, 78, 0, [Ⲇⵠ.ⲆⵠΔⲆⵠⲆΔ, Ⲇⵠ.ⵠⲆᐃⵠΔΔⵠ, Ⲇⵠ.ⲆΔⲆΔᐃᐃᐃ], ka, la, function () {
      vf.ΔⵠᐃⲆⵠᐃᐃΔᐃ();
      if (vf.ⲆΔΔⵠᐃⲆⲆ === 0) {
        K(G);
      } else {
        K(R);
      }
    }, 127, 110, ia | fa, na);
    this.buttons[u++].view = v;
    this.buttons[u] = aw(87, 78, 0, [Ⲇⵠ.ⲆᐃᐃΔⵠᐃⲆ, Ⲇⵠ.ⵠᐃⲆⵠⲆⲆⵠ, Ⲇⵠ.ⲆᐃΔⲆᐃⵠⲆ], ka, la, function () {
      if (Sf === Qf && dj.FB && dj.FB.getUserID()) {
        dj.FB.logout();
      }
      if (Ef === Qf && gx !== mb) {
        dj.gapi.auth2.getAuthInstance().signOut();
        gx = Ul;
      }
      dx = undefined;
      cx = Ul;
      Qf = undefined;
      ex = 0;
      vf.ⲆΔⲆΔᐃ = 0;
      vf.ⲆᐃᐃΔⲆ = 0;
      vf.ⲆΔΔᐃⲆ = Zj;
      vf.ΔⲆᐃⵠᐃΔⲆ();
      ⲆⲆᐃⲆΔΔⵠⲆᐃ();
    }, Is, 110, ia | fa, na);
    this.buttons[u++].view = v;
    this.buttons[u] = aw(58, 64, 0, [Ⲇⵠ.ΔⲆⵠΔⵠⵠᐃ, Ⲇⵠ.ΔⵠΔᐃᐃΔᐃ, Ⲇⵠ.ⲆΔⲆΔΔⵠⵠ], ka, la, function () {
      K(aa);
    }, 189, 118, ia | fa, na);
    this.buttons[u++].view = d;
    this.buttons[u] = aw(497, 72, 0, [Ⲇⵠ.ⲆΔΔⵠΔᐃⵠ, Ⲇⵠ.ⲆⲆⵠΔⲆⵠΔ, Ⲇⵠ.ΔᐃⲆΔᐃⲆⵠ], ka, la, function () {
      dj.gapi.auth2.getAuthInstance().signIn();
    }, -130, 390, ia | fa, na);
    this.buttons[u++].view = d;
    this.buttons[u] = aw(497, 72, 0, [Ⲇⵠ.ⵠⵠΔⵠΔⲆⲆ, Ⲇⵠ.ᐃᐃΔΔⵠᐃΔ, Ⲇⵠ.ⵠΔⲆⵠⲆΔⵠ], ka, la, function () {
      dj.FB.login(function (a) {
        if (a.authResponse) {
          dj.FB.api("/me", function (a) {
            Qf = Sf;
            cx = dj.FB.getAuthResponse().accessToken;
            Xf();
            dj.ᐃΔⲆΔᐃᐃⵠ(dx);
          });
        }
      });
    }, -130, 430, ia | fa, na);
    this.buttons[u++].view = d;
    ΔΔΔᐃⲆⵠΔ = 20000;
    this.ᐃⵠⲆⵠⵠⵠⲆ = function (a) {
      var b = vf.ΔΔⵠΔᐃⵠⵠ(a);
      var c = ΔΔΔᐃⲆⵠΔ * (b * b);
      return (a -= c) / (ΔΔΔᐃⲆⵠΔ * ((b + hs) * (b + 1)) - c);
    };
    this.ΔΔⵠΔᐃⵠⵠ = function (a) {
      return Math.floor(Math.sqrt(a / ΔΔΔᐃⲆⵠΔ));
    };
    this.ΔⵠⵠⲆⲆⲆΔᐃΔ = function (a) {
      vf.ⲆⲆΔⲆⲆ = vf.ΔΔⵠΔᐃⵠⵠ(a);
      vf.ᐃⲆⵠⵠⲆᐃΔ = vf.ᐃⵠⲆⵠⵠⵠⲆ(a);
      vf.ⵠᐃᐃΔⲆⲆⲆ = Bg;
      vf.ⲆΔΔᐃⲆ = a;
    };
    this.ⵠⵠⵠⵠᐃⲆΔΔΔ = function (b) {
      vf.buttons[vf.ⵠᐃΔⵠⵠⵠᐃ].info.active = Da;
      vf.buttons[vf.ⲆⲆᐃⵠΔΔᐃ].info.active = 1;
      vf.buttons[vf.ⲆΔᐃⵠⲆⲆⲆ].info.active = Oq;
      n();
      if (-za === b.name.indexOf("Starver#")) {
        document.getElementById("account_nickname_input").value = dj.decodeURIComponent(dj.escape(dj.atob(b.name)));
      } else {
        document.getElementById("account_nickname_input").value = b.name;
      }
      vf.ⲆᐃᐃΔⲆ = b.bread;
      var c = b.seasons;
      var d = c[c.length - 1];
      vf.ΔⵠᐃΔⲆⵠΔ = c;
      S.ΔⵠⵠⲆⲆⲆΔᐃΔ(d.score);
      vf.ⲆΔΔᐃⲆ = d.score;
      vf.ⵠᐃⵠΔᐃ = d.kill;
      vf.ΔⲆⲆΔⲆᐃⵠ = d.death;
      vf.time = d.time;
      vf.ⵠᐃΔᐃⲆⵠᐃ = d.bestScore;
      vf.ⵠⲆⵠΔⵠⲆᐃ = d.bestKill;
      vf.ᐃΔⲆⵠᐃᐃΔ = d.bestTime;
      vf.ⲆⲆΔΔⵠΔⲆ = d.scoreTotal;
      vf.ⲆΔΔⵠᐃⲆⲆ = b.firstName;
      document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + b.privateServer;
      if (vf.ⲆΔΔⵠᐃⲆⲆ === undefined) {
        vf.ⲆΔΔⵠᐃⲆⲆ = zl;
      }
      vf.ΔⵠᐃⵠᐃΔⲆ = Date.now() + b.privateServerTime;
      if (In < Number(b.privateServerTime)) {
        vf.ΔⵠᐃⵠᐃΔⲆ = Date.now() + Number(b.privateServerTime);
      }
      vf.ⲆΔⲆΔᐃ = Date.now() + b.kit;
      if (Number(b.kit) > 0) {
        vf.ⲆΔⲆΔᐃ = Date.now() + Number(b.kit);
      }
      var e = ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ;
      for (var f = tt; b.skins.length > f; f++) {
        var g = b.skins[f];
        if (Pg < g) {
          for (var i = Lr; e.length > i; i++) {
            if (e[i].id === f) {
              S.unlock.ΔⵠΔᐃ[i] = fl;
            }
          }
        }
      }
      e = ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ;
      f = Bg;
      for (; f < b.accessories.length; f++) {
        if ((g = b.accessories[f]) > 0) {
          for (i = 0; i < e.length; i++) {
            if (f === e[i].id) {
              S.unlock.ΔⵠΔᐃᐃ[i] = 1;
            }
          }
        }
      }
      e = ΔⲆⵠⲆ.ᐃⵠΔΔⲆ;
      f = 0;
      for (; b.books.length > f; f++) {
        g = b.books[f];
        if (Eh < g) {
          for (i = wj; i < e.length; i++) {
            if (f === e[i].id) {
              S.unlock.ᐃΔⲆⵠⲆ[i] = 1;
            }
          }
        }
      }
      e = ΔⲆⵠⲆ.ⵠⲆᐃᐃ;
      f = In;
      for (; b.bags.length > f; f++) {
        if ((g = b.bags[f]) > Db) {
          for (i = Rq; e.length > i; i++) {
            if (e[i].id === f) {
              S.unlock.ᐃⵠΔⲆᐃ[i] = 1;
            }
          }
        }
      }
      e = ΔⲆⵠⲆ.Δⵠᐃᐃⵠ;
      f = 0;
      for (; b.crates.length > f; f++) {
        g = b.crates[f];
        if (Bg < g) {
          for (i = 0; i < e.length; i++) {
            if (f === e[i].id) {
              S.unlock.ⲆⲆⲆⵠΔ[i] = rg;
              S.unlock.ᐃᐃⵠΔΔ[i] = 1;
            }
          }
        }
      }
    };
    this.ᐃᐃⲆⲆᐃⲆⲆΔⲆ = function () {
      dj.ᐃΔⲆΔᐃᐃⵠ = function () {
        K(aa);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Df + "login?token=" + cx + "&type=" + Qf);
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (eg === this.readyState && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(S.ⵠⵠⵠⵠᐃⲆΔΔΔ);
      };
      if (ex === 1) {
        dj.ᐃΔⲆΔᐃᐃⵠ();
      }
    };
    dj.ⲆⲆᐃⲆΔΔⵠⲆᐃ = function () {
      vf.buttons[vf.ⵠᐃΔⵠⵠⵠᐃ].info.active = yg;
      vf.buttons[vf.ⲆⲆᐃⵠΔΔᐃ].info.active = 0;
      vf.buttons[vf.ⲆΔᐃⵠⲆⲆⲆ].info.active = 0;
      K(aa);
    };
    this.ᐃΔⵠⲆⲆ = function () {
      return vf.buttons[vf.ⲆⲆᐃⵠΔΔᐃ].info.active;
    };
    this.buttons[u] = aw(461, 105, 0, [Ⲇⵠ.ᐃⲆΔⲆⲆⵠΔ, Ⲇⵠ.ⲆⵠΔⲆⵠⵠⵠ, Ⲇⵠ.ΔΔⵠⵠⵠᐃⵠ], ka, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        K(z);
      } else {
        K(d);
      }
    }, -100, 80, ia | fa, na);
    this.buttons[u++].view = m;
    this.buttons[u] = aw(157, 158, 0, [Ⲇⵠ.ⵠⵠⵠⲆᐃΔᐃ, Ⲇⵠ.ΔΔΔⵠᐃⵠᐃ, Ⲇⵠ.ᐃⲆⲆⵠΔᐃⲆ], ka, la, function () {
      dj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, ia | fa, na);
    this.buttons[u++].view = p;
    this.buttons[u] = aw(66, 73, 0, [Ⲇⵠ.ⵠⵠΔⵠΔᐃⵠ, Ⲇⵠ.ⵠΔΔⵠᐃᐃⵠ, Ⲇⵠ.ᐃᐃΔΔⲆⲆᐃ], ka, la, undefined, -68, 340, ia | fa, na);
    this.buttons[u++].view = p;
    this.buttons[u] = aw(66, 73, 0, [Ⲇⵠ.ⲆⵠᐃⵠΔⲆᐃ, Ⲇⵠ.ⲆΔⲆΔⵠⲆⵠ, Ⲇⵠ.ᐃⵠⲆᐃⲆΔⲆ], ka, la, undefined, -30, 340, ia | fa, na);
    this.buttons[u++].view = p;
    this.ⵠΔᐃΔᐃⵠᐃⵠᐃ = u;
    this.buttons[u] = aw(97, 66, 0, [Ⲇⵠ.ΔⵠⲆᐃΔᐃᐃ, Ⲇⵠ.ⵠΔⲆⵠΔⲆⲆ, Ⲇⵠ.ΔⲆᐃⵠΔΔΔ], ka, la, function () {
      Kf(undefined, undefined, vf.ⵠⵠⲆⲆⵠᐃΔ);
    }, -14, 151, ia | fa, na);
    this.buttons[u++].view = C;
    this.ⲆⵠΔΔΔΔⵠ = u;
    this.buttons[u] = aw(135, 66, 0, [Ⲇⵠ.Δᐃⵠᐃⵠⵠⵠ, Ⲇⵠ.ΔΔⲆᐃⲆᐃᐃ, Ⲇⵠ.ᐃⵠⵠᐃᐃⲆΔ], ka, la, function () {
      Kf(undefined, er, vf.ⲆⵠΔΔΔΔⵠ);
    }, 37.5, 151, ia | fa, na);
    this.buttons[u++].view = C;
    this.ΔⲆΔⲆⲆⲆⲆ = u;
    this.buttons[u] = aw(160, 66, 0, [Ⲇⵠ.ⲆΔΔⲆᐃΔΔ, Ⲇⵠ.ⲆⲆᐃⲆΔᐃᐃ, Ⲇⵠ.ΔⵠΔⵠΔⵠΔ], ka, la, function () {
      Kf(undefined, undefined, vf.ΔⲆΔⲆⲆⲆⲆ);
    }, 107.5, 151, ia | fa, na);
    this.buttons[u++].view = C;
    this.ⵠⵠⲆⲆⵠᐃΔ = u;
    this.buttons[u] = aw(207, 66, 0, [Ⲇⵠ.ᐃⲆᐃⵠⵠⵠᐃ, Ⲇⵠ.ⲆᐃΔᐃⲆⲆΔ, Ⲇⵠ.ⵠⲆᐃᐃⵠΔΔ], ka, la, function () {
      Kf(undefined, er, vf.ⵠⵠⲆⲆⵠᐃΔ);
    }, 190.5, 151, ia | fa, na);
    this.buttons[u++].view = C;
    this.ⲆᐃΔⵠᐃᐃⵠ = u;
    this.buttons[u] = aw(144, 66, 0, [Ⲇⵠ.ⲆᐃΔΔⲆᐃᐃ, Ⲇⵠ.ΔⵠΔᐃⵠᐃΔ, Ⲇⵠ.ⵠⲆᐃᐃⵠᐃᐃ], ka, la, function () {
      Kf(vf.ⲆᐃΔⵠᐃᐃⵠ);
    }, 103.5, 110, ia | fa, na);
    this.buttons[u++].view = C;
    this.ᐃⲆⲆΔⵠᐃΔ = u;
    this.buttons[u] = aw(124, 66, 0, [Ⲇⵠ.ⵠⵠⵠⵠⲆⵠΔ, Ⲇⵠ.ⲆᐃᐃᐃⲆⲆᐃ, Ⲇⵠ.ⲆⲆᐃΔᐃΔΔ], ka, la, function () {
      Kf(vf.ᐃⲆⲆΔⵠᐃΔ);
    }, 177.5, 110, ia | fa, na);
    this.buttons[u++].view = C;
    this.ⵠΔΔⵠⵠᐃᐃ = u;
    this.buttons[u] = aw(104, 66, 0, [Ⲇⵠ.ⵠᐃΔᐃΔᐃᐃ, Ⲇⵠ.ᐃᐃᐃⲆΔⲆΔ, Ⲇⵠ.ΔⵠⲆⲆᐃⲆⵠ], ka, la, function () {
      Kf(vf.ⵠΔΔⵠⵠᐃᐃ);
    }, 242, 110, ia | fa, na);
    this.buttons[u++].view = C;
    this.ᐃΔⲆⵠᐃΔⵠ = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ᐃᐃⲆⵠᐃⲆΔ, Ⲇⵠ.ⵠᐃΔΔΔᐃⲆ, Ⲇⵠ.ΔᐃᐃΔⵠⵠⵠ], ka, la, function () {
      Kf(undefined, undefined, undefined, vf.ᐃΔⲆⵠᐃΔⵠ);
    }, -185, 528, ia | fa, na);
    this.buttons[u++].view = C;
    this.ᐃΔⲆⵠΔⲆΔ = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ⵠᐃⵠᐃⵠΔⵠ, Ⲇⵠ.ᐃᐃΔᐃⲆΔⲆ, Ⲇⵠ.ⲆΔᐃᐃⵠⲆᐃ], ka, la, function () {
      Kf(undefined, Ul, undefined, vf.ᐃΔⲆⵠΔⲆΔ);
    }, -149, 528, ia | fa, na);
    this.buttons[u++].view = C;
    this.ⵠⵠᐃᐃⵠⵠᐃ = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ΔⲆᐃⵠⵠΔⲆ, Ⲇⵠ.ᐃᐃⲆΔᐃⵠⵠ, Ⲇⵠ.ⲆᐃⲆΔⲆⵠⲆ], ka, la, function () {
      Kf(Oh, undefined, undefined, vf.ⵠⵠᐃᐃⵠⵠᐃ);
    }, -113, 528, ia | fa, na);
    this.buttons[u++].view = C;
    this.Δᐃⵠⵠⵠⵠᐃ = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ᐃⵠⵠΔΔⵠⵠ, Ⲇⵠ.ᐃᐃⵠⵠⲆᐃⵠ, Ⲇⵠ.ⲆᐃⵠΔⵠⵠⵠ], ka, la, function () {
      Kf(Sl, Hs, T, vf.Δᐃⵠⵠⵠⵠᐃ);
    }, -77, 528, ia | fa, na);
    this.buttons[u++].view = C;
    this.ⵠΔΔΔⲆΔᐃ = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ᐃΔⲆΔΔᐃⲆ, Ⲇⵠ.ΔΔΔⵠᐃΔᐃ, Ⲇⵠ.ⲆⵠᐃᐃⵠΔᐃ], ka, la, function () {
      Kf(undefined, undefined, undefined, vf.ⵠΔΔΔⲆΔᐃ);
    }, -41, 528, ia | fa, na);
    this.buttons[u++].view = C;
    this.ᐃⵠⵠΔⲆⲆⵠ = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ΔⲆⵠⲆᐃΔΔ, Ⲇⵠ.ΔⵠⲆᐃᐃⵠⲆ, Ⲇⵠ.ᐃΔⲆⲆΔⲆⵠ], ka, la, function () {
      Kf(undefined, undefined, undefined, vf.ᐃⵠⵠΔⲆⲆⵠ);
    }, -Gs, 528, ia | fa, na);
    this.buttons[u++].view = C;
    this.buttons[u] = aw(232, 352, 0, [Ⲇⵠ.ᐃⵠᐃᐃⵠⵠᐃ, Ⲇⵠ.ᐃⵠΔⲆⵠᐃⲆ, Ⲇⵠ.ⲆΔΔΔᐃᐃⵠ], ka, la, function () {
      Yf(300);
    }, -330, 135, ia | fa, na);
    this.buttons[u++].view = z;
    this.buttons[u] = aw(232, 352, 0, [Ⲇⵠ.ΔᐃⲆΔⵠⲆⵠ, Ⲇⵠ.ⲆΔᐃᐃⲆⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆΔ], ka, la, function () {
      Yf(600);
    }, -195, 135, ia | fa, na);
    this.buttons[u++].view = z;
    this.buttons[u] = aw(243, 374, 0, [Ⲇⵠ.ΔⲆΔⵠⵠΔΔ, Ⲇⵠ.ⵠⵠⵠⲆΔⲆⵠ, Ⲇⵠ.ᐃⲆΔⲆⵠΔⲆ], ka, la, function () {
      Yf(2600);
    }, -60, 130, ia | fa, na);
    this.buttons[u++].view = z;
    this.buttons[u] = aw(232, 352, 0, [Ⲇⵠ.ⲆⲆⵠⵠᐃⲆΔ, Ⲇⵠ.ⲆΔᐃΔⵠⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⲆΔᐃ], ka, la, function () {
      Yf(7000);
    }, 78, 135, ia | fa, na);
    this.buttons[u++].view = z;
    this.buttons[u] = aw(243, 374, 0, [Ⲇⵠ.ΔⲆⲆⵠⲆΔⲆ, Ⲇⵠ.ⵠⵠᐃᐃⵠⲆⵠ, Ⲇⵠ.ⲆⲆᐃⲆⵠⵠΔ], ka, la, function () {
      Yf(20000);
    }, 213, 130, ia | fa, na);
    this.buttons[u++].view = z;
    this.buttons[u] = aw(58, 64, 0, [Ⲇⵠ.ΔⲆⵠΔⵠⵠᐃ, Ⲇⵠ.ΔⵠΔᐃᐃΔᐃ, Ⲇⵠ.ⲆΔⲆΔΔⵠⵠ], ka, la, function () {
      K(m);
    }, 300, 88, ia | fa, na);
    this.buttons[u++].view = z;
    this.buttons[u] = aw(323, 112, 0, [Ⲇⵠ.ⵠΔⵠᐃⲆⵠΔ, Ⲇⵠ.ᐃⲆᐃⵠⵠᐃΔ, Ⲇⵠ.ΔⵠᐃᐃⵠⲆᐃ], ka, la, function () {
      K(D);
      Sa.ⵠΔⲆΔᐃ();
    }, -315, 185, ia | fa, na);
    this.buttons[u++].view = c;
    this.buttons[u] = aw(323, 112, 0, [Ⲇⵠ.ΔⵠᐃⵠΔᐃᐃ, Ⲇⵠ.ⵠᐃⲆⲆⵠⲆⵠ, Ⲇⵠ.ᐃⵠⲆⵠΔⵠⵠ], ka, la, function () {
      K(_);
      Xa.ⵠΔⲆΔᐃ();
    }, -315, 321, ia | fa, na);
    this.buttons[u++].view = c;
    this.buttons[u] = aw(323, 112, 0, [Ⲇⵠ.ⲆⵠⵠΔᐃⲆⲆ, Ⲇⵠ.ⵠᐃΔⵠⵠᐃᐃ, Ⲇⵠ.ᐃⲆᐃⲆΔⵠⲆ], ka, la, function () {
      K(E);
      Ta.ⵠΔⲆΔᐃ();
    }, 153, 185, ia | fa, na);
    this.buttons[u++].view = c;
    this.buttons[u] = aw(323, 112, 0, [Ⲇⵠ.ⲆΔᐃΔⲆᐃⵠ, Ⲇⵠ.ⵠⲆⵠⲆⵠᐃⵠ, Ⲇⵠ.ΔΔⵠΔⵠⵠⵠ], ka, la, function () {
      K(Q);
      Ua.ⵠΔⲆΔᐃ();
    }, 153, 321, ia | fa, na);
    this.buttons[u++].view = c;
    this.buttons[u] = aw(323, 112, 0, [Ⲇⵠ.ᐃⲆⵠⵠⲆΔⵠ, Ⲇⵠ.ⵠⵠⲆᐃⲆᐃⲆ, Ⲇⵠ.ⵠΔΔᐃⲆⲆΔ], ka, la, function () {
      K(I);
      Va.ⵠΔⲆΔᐃ();
    }, 153, 463, ia | fa, na);
    this.buttons[u++].view = c;
    this.buttons[u] = aw(323, 112, 0, [Ⲇⵠ.ⲆⵠᐃΔⲆᐃᐃ, Ⲇⵠ.ⵠΔⲆⵠⲆᐃⲆ, Ⲇⵠ.ᐃᐃⲆⲆΔⲆᐃ], ka, la, function () {
      K(F);
      Wa.ⵠΔⲆΔᐃ();
    }, -315, 463, ia | fa, na);
    this.buttons[u++].view = c;
    this.buttons[u] = aw(327, 117, 0, [Ⲇⵠ.ⲆⵠΔΔᐃⲆᐃ, Ⲇⵠ.ⲆᐃᐃⵠᐃⵠⲆ, Ⲇⵠ.ᐃⲆⵠⲆΔⲆᐃ], ka, la, function () {
      K(N);
    }, 155, 70, X, oa);
    this.buttons[u++].view = aa;
    this.buttons[u] = aw(130, 129, 0, [Ⲇⵠ.ᐃⲆᐃΔᐃⵠᐃ, Ⲇⵠ.ᐃᐃⲆⵠⵠⲆⵠ, Ⲇⵠ.ᐃΔⵠΔⵠⲆⵠ], ka, la, function () {
      q(y, na, "none");
      K(m);
    }, Th, 40, ia | fa, na);
    this.buttons[u++].view = y;
    this.buttons[u] = aw(130, 129, 0, [Ⲇⵠ.ᐃⲆᐃΔᐃⵠᐃ, Ⲇⵠ.ᐃᐃⲆⵠⵠⲆⵠ, Ⲇⵠ.ᐃΔⵠΔⵠⲆⵠ], ka, la, function () {
      q(w, na, "none");
      K(m);
    }, Ra, 40, ia | fa, na);
    this.buttons[u++].view = w;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(m);
    }, 200, 140, ia | fa, na);
    this.buttons[u++].view = da;
    this.buttons[u] = aw(253, 110, 0, [Ⲇⵠ.ΔⵠⲆΔΔᐃΔ, Ⲇⵠ.ⵠᐃⵠΔⲆⲆΔ, Ⲇⵠ.ⵠⲆΔⲆΔᐃᐃ], ka, la, function () {
      $f("Atlanta");
    }, -265, 300, ia | fa, na);
    this.buttons[u++].view = da;
    this.buttons[u] = aw(253, 110, 0, [Ⲇⵠ.ⵠⲆⵠΔΔᐃᐃ, Ⲇⵠ.ⵠⲆⲆⵠⲆᐃᐃ, Ⲇⵠ.ΔⵠᐃᐃⵠⵠΔ], ka, la, function () {
      $f("Dallas");
    }, -130, 300, ia | fa, na);
    this.buttons[u++].view = da;
    this.buttons[u] = aw(253, 110, 0, [Ⲇⵠ.ᐃⲆⲆⵠⵠⵠᐃ, Ⲇⵠ.ⲆΔⵠⲆΔⲆΔ, Ⲇⵠ.ⵠᐃⲆᐃΔⲆᐃ], ka, la, function () {
      $f("Fremont");
    }, 5, 300, ia | fa, na);
    this.buttons[u++].view = da;
    this.buttons[u] = aw(253, 110, 0, [Ⲇⵠ.ⵠⵠΔΔⲆⲆⵠ, Ⲇⵠ.ⵠⲆⲆᐃⵠⲆⲆ, Ⲇⵠ.ⲆⲆⵠΔΔⲆᐃ], ka, la, function () {
      $f("Newark");
    }, 140, 300, ia | fa, na);
    this.buttons[u++].view = da;
    this.buttons[u] = aw(253, 110, 0, [Ⲇⵠ.ᐃᐃΔᐃᐃᐃΔ, Ⲇⵠ.ⲆΔᐃᐃⲆᐃⲆ, Ⲇⵠ.ΔᐃⵠⲆΔΔᐃ], ka, la, function () {
      $f("London");
    }, -265, 365, ia | fa, na);
    this.buttons[u++].view = da;
    this.buttons[u] = aw(253, 110, 0, [Ⲇⵠ.ᐃⲆᐃⵠⲆⲆⲆ, Ⲇⵠ.ΔⲆⵠⵠⵠᐃᐃ, Ⲇⵠ.ᐃⲆⵠⲆⲆΔΔ], ka, la, function () {
      $f("Frankfurt");
    }, -130, 365, ia | fa, na);
    this.buttons[u++].view = da;
    this.buttons[u] = aw(253, 110, 0, [Ⲇⵠ.ᐃⲆΔⲆΔΔⵠ, Ⲇⵠ.ⵠᐃⲆΔᐃΔᐃ, Ⲇⵠ.ⵠⵠΔᐃⵠΔⵠ], ka, la, function () {
      $f("Singapore");
    }, 5, 365, ia | fa, na);
    this.buttons[u++].view = da;
    this.buttons[u] = aw(253, 110, 0, [Ⲇⵠ.ⲆΔⲆᐃⲆⵠⲆ, Ⲇⵠ.ΔⵠᐃⲆⵠⲆⲆ, Ⲇⵠ.ⲆⲆⵠⵠΔΔΔ], ka, la, function () {
      $f("Tokyo");
    }, 140, 365, ia | fa, na);
    this.buttons[u++].view = da;
    this.buttons[u] = aw(253, 110, 0, [Ⲇⵠ.ⵠⲆⲆᐃᐃΔⲆ, Ⲇⵠ.ΔⲆⲆⵠⵠⲆᐃ, Ⲇⵠ.ⲆⲆΔⲆⲆΔⵠ], ka, la, function () {
      $f("Toronto");
    }, -265, 430, ia | fa, na);
    this.buttons[u++].view = da;
    this.buttons[u] = aw(253, 110, 0, [Ⲇⵠ.ᐃᐃⲆⵠⵠⵠΔ, Ⲇⵠ.ᐃⲆᐃΔΔⲆⲆ, Ⲇⵠ.ᐃᐃⵠΔᐃⲆⵠ], ka, la, function () {
      $f("Mumbai");
    }, -130, 430, ia | fa, na);
    this.buttons[u++].view = da;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(da);
    }, 230, 140, ia | fa, na);
    this.buttons[u++].view = W;
    this.buttons[u] = aw(230, 352, 0, [Ⲇⵠ.ᐃⲆᐃⵠⲆᐃΔ, Ⲇⵠ.ⲆⲆᐃⲆⲆΔⵠ, Ⲇⵠ.ⲆᐃⵠᐃΔΔΔ], ka, la, function () {
      Yf(350);
    }, -280, 240, ia | fa, na);
    this.buttons[u++].view = W;
    this.buttons[u] = aw(230, 352, 0, [Ⲇⵠ.ᐃΔⵠⲆⲆΔΔ, Ⲇⵠ.ⲆⵠΔΔⵠᐃΔ, Ⲇⵠ.ⵠΔΔⲆΔⵠⵠ], ka, la, function () {
      Yf(700);
    }, -130, 240, ia | fa, na);
    this.buttons[u++].view = W;
    this.buttons[u] = aw(230, 352, 0, [Ⲇⵠ.ΔᐃⵠᐃᐃᐃⲆ, Ⲇⵠ.ⵠΔⲆᐃᐃᐃΔ, Ⲇⵠ.ⲆⲆⵠᐃΔⵠⲆ], ka, la, function () {
      Yf(1400);
    }, 20, 240, ia | fa, na);
    this.buttons[u++].view = W;
    this.buttons[u] = aw(230, 352, 0, [Ⲇⵠ.ⲆΔⵠᐃⲆⲆΔ, Ⲇⵠ.ΔΔᐃᐃΔⲆⵠ, Ⲇⵠ.ⲆⲆᐃΔΔΔⲆ], ka, la, function () {
      Yf(3000);
    }, 170, 240, ia | fa, na);
    this.buttons[u++].view = W;
    this.buttons[u] = aw(105, 119, 0, [Ⲇⵠ.ΔⲆΔⲆΔⵠΔ, Ⲇⵠ.ᐃᐃⲆΔⲆᐃⲆ, Ⲇⵠ.ᐃᐃΔⵠᐃᐃⲆ], ka, la, function () {
      document.getElementById("serverAddressInput").select();
      document.execCommand("copy");
    }, 170, 310, ia | fa, na);
    this.buttons[u++].view = O;
    this.buttons[u] = aw(105, 119, 0, [Ⲇⵠ.ⵠΔᐃᐃΔⵠⵠ, Ⲇⵠ.ᐃΔⲆΔⲆⵠᐃ, Ⲇⵠ.ⲆᐃΔΔᐃᐃⲆ], ka, la, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Df + "rebootServer?token=" + cx + "&userid=" + dx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            location.href = document.getElementById("serverAddressInput").value;
          }
        };
        a.send();
      })();
    }, 235, 310, ia | fa, na);
    this.buttons[u++].view = O;
    this.buttons[u] = aw(204, 115, 0, [Ⲇⵠ.ⲆⲆᐃΔᐃΔⲆ, Ⲇⵠ.ᐃⵠⵠⵠΔΔⵠ, Ⲇⵠ.ΔⲆⵠᐃΔΔⵠ], ka, la, function () {
      dj.open("./commands.html", "_blank");
    }, -265, 490, ia | fa, na);
    this.buttons[u++].view = O;
    this.buttons[u] = aw(145, 69, 0, [Ⲇⵠ.ᐃᐃΔⲆᐃⵠΔ, Ⲇⵠ.ᐃᐃⲆᐃᐃΔⲆ, Ⲇⵠ.ⲆΔᐃⲆⲆΔᐃ], ka, la, function () {
      K(P);
    }, -210, 170, ia | fa, na);
    this.buttons[u++].view = m;
    this.buttons[u] = aw(145, 69, 0, [Ⲇⵠ.ΔⲆΔⵠΔⵠΔ, Ⲇⵠ.Δᐃⵠⵠᐃⵠⵠ, Ⲇⵠ.ⵠᐃΔⵠⵠΔⵠ], ka, la, function () {
      K(J);
    }, 70, 170, ia | fa, na);
    this.buttons[u++].view = m;
    this.buttons[u] = aw(145, 69, 0, [Ⲇⵠ.ⵠΔⲆᐃᐃⲆⲆ, Ⲇⵠ.ⲆΔᐃⲆᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃⲆⵠΔ], ka, la, function () {
      K(A);
    }, 70, 204, ia | fa, na);
    this.buttons[u++].view = m;
    this.buttons[u] = aw(145, 69, 0, [Ⲇⵠ.ᐃⵠΔⵠⲆᐃⲆ, Ⲇⵠ.ⲆⲆⵠⲆⵠⵠᐃ, Ⲇⵠ.ᐃᐃᐃⵠⵠΔⲆ], ka, la, function () {
      K(M);
    }, -210, 204, ia | fa, na);
    this.buttons[u++].view = m;
    this.buttons[u] = aw(145, 69, 0, [Ⲇⵠ.ᐃⵠΔⵠⲆᐃⲆ, Ⲇⵠ.ⲆⲆⵠⲆⵠⵠᐃ, Ⲇⵠ.ᐃᐃᐃⵠⵠΔⲆ], ka, la, function () {
      K(B);
    }, 70, 238, ia | fa, na);
    this.buttons[u++].view = m;
    this.buttons[u] = aw(145, 69, 0, [Ⲇⵠ.ᐃⵠΔⵠⲆᐃⲆ, Ⲇⵠ.ⲆⲆⵠⲆⵠⵠᐃ, Ⲇⵠ.ᐃᐃᐃⵠⵠΔⲆ], ka, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Uf(Lr, 300);
      } else {
        K(d);
      }
    }, 307, 205, ia | fa, na);
    this.buttons[u++].view = m;
    this.buttons[u] = aw(145, 69, 0, [Ⲇⵠ.ᐃᐃᐃΔΔΔⵠ, Ⲇⵠ.ΔΔᐃΔᐃᐃΔ, Ⲇⵠ.ⵠⲆΔⲆᐃⲆⵠ], ka, la, function () {
      K(x);
    }, -210, 238, ia | fa, na);
    this.buttons[u++].view = m;
    this.buttons[u] = aw(145, 69, 0, [Ⲇⵠ.ᐃᐃᐃΔΔΔⵠ, Ⲇⵠ.ΔΔᐃΔᐃᐃΔ, Ⲇⵠ.ⵠⲆΔⲆᐃⲆⵠ], ka, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Uf(za, 600);
      } else {
        K(d);
      }
    }, 307, 239, ia | fa, na);
    this.buttons[u++].view = m;
    this.buttons[u] = aw(192, 101, 0, [Ⲇⵠ.ΔⵠⲆⲆⵠΔΔ, Ⲇⵠ.ΔᐃΔⲆⲆᐃⵠ, Ⲇⵠ.ⵠᐃΔᐃΔΔⲆ], ka, la, function () {
      Zf();
    }, -100, 250, ia | fa, na);
    this.buttons[u++].view = G;
    this.buttons[u] = aw(192, 104, 0, [Ⲇⵠ.ᐃΔⵠⵠⵠΔᐃ, Ⲇⵠ.ⲆΔᐃᐃΔⲆᐃ, Ⲇⵠ.ⲆΔΔⲆⵠⲆᐃ], ka, la, function () {
      Zf();
    }, -dh, 239, ia | fa, na);
    this.buttons[u++].view = R;
    this.buttons[u] = aw(192, 101, 0, [Ⲇⵠ.ΔΔⲆΔⵠᐃΔ, Ⲇⵠ.ΔⵠᐃᐃⲆᐃᐃ, Ⲇⵠ.ⲆⵠΔⲆᐃᐃΔ], ka, la, function () {
      K(v);
    }, 10, 250, ia | fa, na);
    this.buttons[u++].view = G;
    this.buttons[u] = aw(192, 104, 0, [Ⲇⵠ.ΔΔⲆᐃⵠᐃⵠ, Ⲇⵠ.ⵠᐃⲆⲆⲆⵠᐃ, Ⲇⵠ.ΔᐃᐃⵠΔΔⲆ], ka, la, function () {
      K(v);
    }, 10, 239, ia | fa, na);
    this.buttons[u++].view = R;
    ᐃⵠⲆᐃΔ = [];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ⵠᐃⵠⲆᐃ] = [Ⲇⵠ.ⲆΔⵠᐃΔᐃΔ, Ⲇⵠ.ΔᐃⵠⵠⲆⵠⵠ, Ⲇⵠ.ⵠΔⲆΔΔᐃᐃ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ⵠᐃⵠⵠ] = [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ᐃΔⵠⲆ] = [Ⲇⵠ.ⵠΔᐃΔΔᐃΔ, Ⲇⵠ.ᐃᐃᐃⲆⲆΔⲆ, Ⲇⵠ.ᐃⲆᐃᐃⵠⵠⲆ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ᐃⲆⵠᐃ] = [Ⲇⵠ.ᐃⵠᐃᐃΔⲆⲆ, Ⲇⵠ.ΔⲆΔⲆΔΔⵠ, Ⲇⵠ.ΔⲆΔⵠⲆᐃᐃ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ᐃⲆΔⵠ] = [Ⲇⵠ.ΔᐃΔⵠΔⲆⵠ, Ⲇⵠ.ⵠΔᐃᐃⲆⲆⵠ, Ⲇⵠ.ᐃΔΔⵠᐃᐃⵠ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.Ⲇⵠⵠⵠ] = [Ⲇⵠ.ΔⵠΔⵠⲆⵠⲆ, Ⲇⵠ.ΔⵠⵠⵠᐃⵠΔ, Ⲇⵠ.ᐃⲆⵠΔᐃΔΔ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ᐃⵠᐃΔ] = [Ⲇⵠ.ⵠⵠΔᐃᐃⵠΔ, Ⲇⵠ.ⲆⲆΔΔⲆⲆⵠ, Ⲇⵠ.ΔΔⲆⵠΔΔⵠ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ᐃΔⵠᐃΔ] = [Ⲇⵠ.ⲆΔΔⵠⲆᐃⲆ, Ⲇⵠ.ᐃⲆⲆΔⲆⵠⲆ, Ⲇⵠ.ᐃⵠⲆⵠᐃᐃⲆ];
    ᐃⵠⲆᐃΔ[ᐃΔⵠ.ΔΔⲆΔΔⲆΔ] = [Ⲇⵠ.ᐃⲆᐃⲆⵠⵠᐃ, Ⲇⵠ.ⵠᐃⲆΔΔⵠΔ, Ⲇⵠ.ⲆⵠΔΔⵠΔⵠ];
    ΔⵠΔΔⵠⵠΔ = u;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, wr, -29, 205, ia | fa, na);
    this.buttons[u++].view = D;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, -29, 300, ia | fa, na);
    this.buttons[u++].view = D;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, -29, 395, ia | fa, na);
    this.buttons[u++].view = D;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 205, ia | fa, na);
    this.buttons[u++].view = D;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, Oh, 65, 300, ia | fa, na);
    this.buttons[u++].view = D;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, er, 65, 395, ia | fa, na);
    this.buttons[u++].view = D;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, ut, 159, 205, ia | fa, na);
    this.buttons[u++].view = D;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 159, 300, ia | fa, na);
    this.buttons[u++].view = D;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 159, 395, ia | fa, na);
    this.buttons[u++].view = D;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ka, la, Ng, -61, 315, ia | fa, na);
    this.buttons[u++].view = D;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ka, la, undefined, 260, 315, ia | fa, na);
    this.buttons[u++].view = D;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(c);
    }, -320, 470, ia | fa, na);
    this.buttons[u++].view = D;
    ᐃᐃΔΔⵠⲆᐃⲆⵠ = u;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, -29, 205, ia | fa, na);
    this.buttons[u++].view = _;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, mg, -29, 300, ia | fa, na);
    this.buttons[u++].view = _;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, Ul, -29, 395, ia | fa, na);
    this.buttons[u++].view = _;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, Ng, 65, 205, ia | fa, na);
    this.buttons[u++].view = _;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 300, ia | fa, na);
    this.buttons[u++].view = _;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, wr, 65, 395, ia | fa, na);
    this.buttons[u++].view = _;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, Oh, 159, 205, ia | fa, na);
    this.buttons[u++].view = _;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, mg, 159, 300, ia | fa, na);
    this.buttons[u++].view = _;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, mg, 159, 395, ia | fa, na);
    this.buttons[u++].view = _;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ka, la, undefined, -61, 315, ia | fa, na);
    this.buttons[u++].view = _;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ka, la, T, 260, 315, ia | fa, na);
    this.buttons[u++].view = _;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(c);
    }, -320, 470, ia | fa, na);
    this.buttons[u++].view = _;
    ⵠⲆΔⲆⵠᐃⲆΔⵠ = u;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, ut, -29, 205, ia | fa, na);
    this.buttons[u++].view = F;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, Jg, -29, 300, ia | fa, na);
    this.buttons[u++].view = F;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, -29, 395, ia | fa, na);
    this.buttons[u++].view = F;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 205, ia | fa, na);
    this.buttons[u++].view = F;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 300, ia | fa, na);
    this.buttons[u++].view = F;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 395, ia | fa, na);
    this.buttons[u++].view = F;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, Ng, 159, 205, ia | fa, na);
    this.buttons[u++].view = F;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, rk, 159, 300, ia | fa, na);
    this.buttons[u++].view = F;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 159, 395, ia | fa, na);
    this.buttons[u++].view = F;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ka, la, undefined, -61, 315, ia | fa, na);
    this.buttons[u++].view = F;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ka, la, undefined, 260, 315, ia | fa, na);
    this.buttons[u++].view = F;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(c);
    }, -320, 470, ia | fa, na);
    this.buttons[u++].view = F;
    ᐃᐃᐃᐃⲆⲆΔⲆᐃ = u;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, Hs, -29, 205, ia | fa, na);
    this.buttons[u++].view = E;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, er, -29, 300, ia | fa, na);
    this.buttons[u++].view = E;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, -29, 395, ia | fa, na);
    this.buttons[u++].view = E;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 205, ia | fa, na);
    this.buttons[u++].view = E;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 300, ia | fa, na);
    this.buttons[u++].view = E;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 395, ia | fa, na);
    this.buttons[u++].view = E;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 159, 205, ia | fa, na);
    this.buttons[u++].view = E;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 159, 300, ia | fa, na);
    this.buttons[u++].view = E;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 159, 395, ia | fa, na);
    this.buttons[u++].view = E;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ka, la, Ul, -61, 315, ia | fa, na);
    this.buttons[u++].view = E;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ka, la, rk, 260, 315, ia | fa, na);
    this.buttons[u++].view = E;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(c);
    }, -320, 470, ia | fa, na);
    this.buttons[u++].view = E;
    ΔⵠΔᐃⲆᐃᐃⵠᐃ = u;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, -29, 205, ia | fa, na);
    this.buttons[u++].view = Q;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, -29, 300, ia | fa, na);
    this.buttons[u++].view = Q;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, Jg, -29, 395, ia | fa, na);
    this.buttons[u++].view = Q;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 205, ia | fa, na);
    this.buttons[u++].view = Q;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 300, ia | fa, na);
    this.buttons[u++].view = Q;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, mb, 65, 395, ia | fa, na);
    this.buttons[u++].view = Q;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, Za, 159, 205, ia | fa, na);
    this.buttons[u++].view = Q;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 159, 300, ia | fa, na);
    this.buttons[u++].view = Q;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 159, 395, ia | fa, na);
    this.buttons[u++].view = Q;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ka, la, T, -61, 315, ia | fa, na);
    this.buttons[u++].view = Q;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ka, la, Jg, 260, 315, ia | fa, na);
    this.buttons[u++].view = Q;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(c);
    }, -320, 470, ia | fa, na);
    this.buttons[u++].view = Q;
    ΔΔⵠⵠⵠΔⵠⵠⲆ = u;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, -29, 205, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, -29, 300, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, -29, 395, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 205, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, mb, 65, 300, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 65, 395, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, Hq, 159, 205, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 159, 300, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(178, 182, 0, [Ⲇⵠ.ⵠΔᐃⲆ, Ⲇⵠ.ᐃΔⵠΔ, Ⲇⵠ.ᐃⲆⵠⵠ], ka, la, undefined, 159, 395, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ⲆⵠᐃⲆⲆΔΔ, Ⲇⵠ.ΔᐃⵠΔΔⲆⲆ, Ⲇⵠ.ΔᐃⵠᐃⵠⲆᐃ], ka, la, Jo, -61, 315, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(39, 122, 0, [Ⲇⵠ.ΔΔᐃⲆΔᐃᐃ, Ⲇⵠ.ᐃΔⵠᐃᐃᐃⲆ, Ⲇⵠ.ⲆΔⲆᐃᐃⲆⵠ], ka, la, lj, 260, 315, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(c);
    }, -320, 470, ia | fa, na);
    this.buttons[u++].view = I;
    this.buttons[u] = aw(260, 260, 0, [Ⲇⵠ.ⲆΔΔⲆⲆΔⵠ, Ⲇⵠ.ⲆⵠᐃΔΔⵠᐃ, Ⲇⵠ.ΔΔΔⲆⵠᐃᐃ], ka, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Vf(3, 50);
      } else {
        K(d);
      }
    }, -260 / Gi, 150 + 448 / ol - 65, ia | fa, na);
    this.buttons[u++].view = J;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(m);
    }, 309, 180, ia | fa, na);
    this.buttons[u++].view = J;
    this.buttons[u] = aw(260, 260, 0, [Ⲇⵠ.ⲆⵠⵠᐃΔᐃⵠ, Ⲇⵠ.ᐃΔΔΔⲆΔⵠ, Ⲇⵠ.ΔⲆᐃᐃⲆⲆⲆ], ka, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Vf(Zj, 100);
      } else {
        K(d);
      }
    }, -260 / nj, 197, ia | fa, na);
    this.buttons[u++].view = P;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(m);
    }, 309, 180, ia | fa, na);
    this.buttons[u++].view = P;
    this.buttons[u] = aw(260, 260, 0, [Ⲇⵠ.ᐃΔⲆᐃᐃⵠⵠ, Ⲇⵠ.ⲆⲆᐃΔⲆΔΔ, Ⲇⵠ.ⵠᐃΔΔⲆΔⵠ], ka, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Vf($i, 150);
      } else {
        K(d);
      }
    }, -260 / ol, 197, ia | fa, na);
    this.buttons[u++].view = A;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(m);
    }, 309, 180, ia | fa, na);
    this.buttons[u++].view = A;
    this.buttons[u] = aw(260, 260, 0, [Ⲇⵠ.ⲆⵠⲆⵠᐃⵠⲆ, Ⲇⵠ.ΔᐃᐃⲆⵠᐃⲆ, Ⲇⵠ.ⵠⵠⵠⲆⵠⲆΔ], ka, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Vf(qu, 300);
      } else {
        K(d);
      }
    }, -65, 150 + 448 / Mq - 260 / Ps, ia | fa, na);
    this.buttons[u++].view = M;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(m);
    }, 309, 180, ia | fa, na);
    this.buttons[u++].view = M;
    this.buttons[u] = aw(260, 260, 0, [Ⲇⵠ.ⵠΔΔΔᐃⵠⲆ, Ⲇⵠ.ⲆⲆⵠⲆⲆⵠΔ, Ⲇⵠ.ⵠᐃⲆⲆᐃΔⲆ], ka, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Vf(Jt, 600);
      } else {
        K(d);
      }
    }, -65, 262 - 260 / nj, ia | fa, na);
    this.buttons[u++].view = x;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(m);
    }, 309, 180, ia | fa, na);
    this.buttons[u++].view = x;
    this.buttons[u] = aw(260, 260, 0, [Ⲇⵠ.ⲆⵠⲆⵠᐃⵠⲆ, Ⲇⵠ.ΔᐃᐃⲆⵠᐃⲆ, Ⲇⵠ.ⵠⵠⵠⲆⵠⲆΔ], ka, la, function () {
      if (S.ᐃΔⵠⲆⲆ()) {
        Vf(5, 300);
      } else {
        K(d);
      }
    }, -65, 150 + 448 / Dt - 65, ia | fa, na);
    this.buttons[u++].view = B;
    this.buttons[u] = aw(115, 73, 0, [Ⲇⵠ.ΔᐃΔⲆΔ, Ⲇⵠ.ᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠⲆⲆⵠᐃ], ka, la, function () {
      K(m);
    }, 309, 180, ia | fa, na);
    this.buttons[u++].view = B;
    var Ea = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ΔᐃᐃΔᐃⵠⲆ, Ⲇⵠ.ⲆᐃᐃⵠⵠⵠⲆ, Ⲇⵠ.ⵠⵠᐃⵠᐃᐃΔ], ka, la, function () {
      Ca(j, 0);
    }, -305, 132, ia | fa, na);
    this.buttons[u++].view = v;
    var Fa = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ΔΔΔᐃⲆᐃᐃ, Ⲇⵠ.ΔⵠⲆᐃⵠᐃⵠ, Ⲇⵠ.ᐃᐃᐃⲆⲆⵠⵠ], ka, la, function () {
      Ca(undefined, 1);
    }, -273, 132, ia | fa, na);
    this.buttons[u++].view = v;
    var Ha = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ⵠᐃⲆⲆΔⲆᐃ, Ⲇⵠ.ⲆⵠᐃⵠΔᐃᐃ, Ⲇⵠ.ᐃᐃⲆⲆΔⲆⲆ], ka, la, function () {
      Ca(Jo, 2);
    }, -241, 132, ia | fa, na);
    this.buttons[u++].view = v;
    var Ja = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ᐃΔⲆⵠⵠⲆⵠ, Ⲇⵠ.ΔⵠΔⵠⲆⵠΔ, Ⲇⵠ.ⲆΔⵠᐃⵠⲆΔ], ka, la, function () {
      Ca(Hq, 3);
    }, -305, 165, ia | fa, na);
    this.buttons[u++].view = v;
    var Ka = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ᐃⵠΔⵠⲆⲆΔ, Ⲇⵠ.ⵠⵠΔᐃⲆⵠⵠ, Ⲇⵠ.ⲆⲆⵠΔᐃⲆⵠ], ka, la, function () {
      Ca(undefined, Wg);
    }, -273, 165, ia | fa, na);
    this.buttons[u++].view = v;
    var La = u;
    this.buttons[u] = aw(46, 51, 0, [Ⲇⵠ.ⵠᐃᐃᐃᐃⵠᐃ, Ⲇⵠ.ⵠᐃⲆΔⲆⵠᐃ, Ⲇⵠ.ΔⵠⲆⲆⵠΔᐃ], ka, la, function () {
      Ca(undefined, gl);
    }, -241, 165, ia | fa, na);
    this.buttons[u++].view = v;
    var Ma = u;
    this.buttons[u] = aw(460, 73, 0, [Ⲇⵠ.ⵠⵠⵠⲆⲆᐃΔ, Ⲇⵠ.ΔⵠⵠΔᐃᐃⵠ, Ⲇⵠ.ΔΔⵠⵠⲆᐃⲆ], ka, la, function () {
      Ca(-1);
    }, -180, 170, ia | fa, na);
    this.buttons[u++].view = v;
    var Na = u;
    this.buttons[u] = aw(222, 68, 0, [Ⲇⵠ.ᐃⵠΔⲆⵠⵠⵠ, Ⲇⵠ.ᐃᐃΔⵠⵠⲆⵠ, Ⲇⵠ.ΔⵠⵠⵠⵠⲆⵠ], ka, la, function () {
      Ca(lw.ⵠᐃᐃⲆⲆ);
    }, -180, 215, ia | fa, na);
    this.buttons[u++].view = v;
    var Oa = u;
    this.buttons[u] = aw(222, 68, 0, [Ⲇⵠ.ΔⵠⵠⲆⲆⲆᐃ, Ⲇⵠ.ᐃⲆⲆⵠᐃⲆⲆ, Ⲇⵠ.ᐃᐃⲆⵠⵠΔΔ], ka, la, function () {
      Ca(lw.ⲆⲆⲆⲆᐃ);
    }, -180, 260, ia | fa, na);
    this.buttons[u++].view = v;
    var Pa = u;
    this.buttons[u] = aw(222, 68, 0, [Ⲇⵠ.ᐃⲆΔⵠⲆᐃᐃ, Ⲇⵠ.ⲆᐃⵠⵠΔᐃᐃ, Ⲇⵠ.ᐃΔⲆᐃᐃⵠΔ], ka, la, function () {
      Ca(lw.ΔΔΔΔᐃ);
    }, -60, 215, ia | fa, na);
    this.buttons[u++].view = v;
    var Qa = u;
    this.buttons[u] = aw(222, 68, 0, [Ⲇⵠ.ΔⵠᐃΔᐃᐃᐃ, Ⲇⵠ.ᐃΔᐃΔⲆΔⲆ, Ⲇⵠ.ΔᐃⵠΔᐃᐃᐃ], ka, la, function () {
      Ca(lw.ᐃᐃⲆΔⵠ);
    }, -60, 260, ia | fa, na);
    this.buttons[u++].view = v;
    this.ⵠⵠⲆᐃⵠΔⵠ = u;
    this.buttons[u] = aw(143, 66, 0, [Ⲇⵠ.ⵠⲆΔⲆⵠⲆΔ, Ⲇⵠ.ᐃⲆᐃᐃⵠⵠⵠ, Ⲇⵠ.ΔⲆᐃⵠΔᐃⵠ], ka, la, function () {
      Kf(undefined, vf.ⵠⵠⲆᐃⵠΔⵠ);
    }, -298, 110, ia | fa, na);
    this.buttons[u++].view = C;
    this.ᐃⲆⵠⲆᐃⲆᐃ = u;
    this.buttons[u] = aw(104, 66, 0, [Ⲇⵠ.ᐃΔΔᐃΔᐃⲆ, Ⲇⵠ.ⲆᐃⵠⵠΔⵠⲆ, Ⲇⵠ.ΔᐃᐃΔΔᐃⲆ], ka, la, function () {
      Kf(j, vf.ᐃⲆⵠⲆᐃⲆᐃ);
    }, -223, 110, ia | fa, na);
    this.buttons[u++].view = C;
    this.ΔᐃⵠⲆⲆΔᐃ = u;
    this.buttons[u] = aw(110, 66, 0, [Ⲇⵠ.ⵠᐃᐃΔΔᐃⵠ, Ⲇⵠ.ⲆΔΔΔⲆΔΔ, Ⲇⵠ.ⵠⵠᐃΔᐃⵠⲆ], ka, la, function () {
      Kf(rk, vf.ΔᐃⵠⲆⲆΔᐃ);
    }, -168, 110, ia | fa, na);
    this.buttons[u++].view = C;
    this.ⲆⲆⵠᐃⲆᐃⲆ = u;
    this.buttons[u] = aw(88, 66, 0, [Ⲇⵠ.ⵠΔⲆⲆΔⲆᐃ, Ⲇⵠ.ΔⵠⲆⲆⲆΔᐃ, Ⲇⵠ.ᐃⲆⲆⵠⲆΔⲆ], ka, la, function () {
      Kf(undefined, vf.ⲆⲆⵠᐃⲆᐃⲆ);
    }, -110, 110, ia | fa, na);
    this.buttons[u++].view = C;
    this.ⵠᐃⲆᐃⲆΔᐃ = u;
    this.buttons[u] = aw(88, 66, 0, [Ⲇⵠ.ⵠⵠⵠΔⲆⵠᐃ, Ⲇⵠ.ⲆⵠΔΔᐃⲆⵠ, Ⲇⵠ.ᐃⵠⲆⵠⵠΔⲆ], ka, la, function () {
      Kf(mb, vf.ⵠᐃⲆᐃⲆΔᐃ);
    }, -63, 110, ia | fa, na);
    this.buttons[u++].view = C;
    this.buttons[u] = aw(86, 44, 0, [Ⲇⵠ.ⵠⲆΔᐃⲆΔⵠ, Ⲇⵠ.ΔΔΔᐃΔⵠⲆ, Ⲇⵠ.ⵠΔⵠⲆᐃΔⲆ], ka, la, function () {
      dj.open("./terms.html", "_blank");
    }, 349, 290, ia | fa, na);
    this.buttons[u++].view = m;
    var Sa = new e(ΔⲆⵠⲆ.ᐃⵠΔᐃⲆ, ΔⵠΔΔⵠⵠΔ, function (a) {
      vf.ΔⵠΔᐃ = a;
      if (vf.unlock.ΔⵠΔᐃ[a] === hs) {
        ⵠⵠΔΔ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⵠΔᐃ, this.unlock.ΔⵠΔᐃ);
    var Ta = new e(ΔⲆⵠⲆ.ⵠⲆᐃᐃ, ᐃᐃᐃᐃⲆⲆΔⲆᐃ, function (a) {
      vf.ᐃⵠΔⲆᐃ = a;
      if (vf.unlock.ᐃⵠΔⲆᐃ[a] === 1) {
        ⵠⵠΔΔ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⵠΔⲆᐃ, this.unlock.ᐃⵠΔⲆᐃ);
    var Ua = new e(ΔⲆⵠⲆ.ᐃⵠΔΔⲆ, ΔⵠΔᐃⲆᐃᐃⵠᐃ, function (a) {
      vf.ᐃΔⲆⵠⲆ = a;
      if (vf.unlock.ᐃΔⲆⵠⲆ[a] === 1) {
        ⵠⵠΔΔ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃΔⲆⵠⲆ, this.unlock.ᐃΔⲆⵠⲆ);
    var Va = new e(ΔⲆⵠⲆ.Δⵠᐃᐃⵠ, ΔΔⵠⵠⵠΔⵠⵠⲆ, function (a) {
      vf.ᐃᐃⵠΔΔ = a;
      if (vf.unlock.ᐃᐃⵠΔΔ[a] === Oq) {
        ⵠⵠΔΔ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃᐃⵠΔΔ, this.unlock.ᐃᐃⵠΔΔ);
    var Wa = new e(ΔⲆⵠⲆ.Δⵠᐃᐃⵠ, ⵠⲆΔⲆⵠᐃⲆΔⵠ, function (a) {
      vf.ⲆⲆⲆⵠΔ = a;
      if (vf.unlock.ⲆⲆⲆⵠΔ[a] === qu) {
        ⵠⵠΔΔ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⲆⲆⵠΔ, this.unlock.ⲆⲆⲆⵠΔ);
    var Xa = new e(ΔⲆⵠⲆ.ΔⲆⵠⲆⵠ, ᐃᐃΔΔⵠⲆᐃⲆⵠ, function (a) {
      vf.ΔⵠΔᐃᐃ = a;
      if (vf.unlock.ΔⵠΔᐃᐃ[a] === 1) {
        ⵠⵠΔΔ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⵠΔᐃᐃ, this.unlock.ΔⵠΔᐃᐃ);
    this.ⲆⵠΔᐃⵠΔⲆ = function (a) {
      yf.ⲆⲆΔⲆ = $v(S.ⲆΔ, a);
      for (var b = ps; b < S.buttons.length; b++) {
        if (S.buttons[b].info.active === oa) {
          S.buttons[b].ⲆⵠᐃΔ(S.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
        }
      }
    };
    this.ΔᐃᐃⲆⵠⲆᐃ = function (a) {
      yf.ⲆⲆΔⲆ = $v(S.ⲆΔ, a);
      for (var b = Lr; S.buttons.length > b; b++) {
        var c = S.buttons[b];
        if (c.info.active === oa && c.ⲆⵠᐃΔ(S.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ⲆᐃⵠⵠⲆⲆⲆ = _g;
    this.ⵠᐃᐃᐃⵠⲆᐃ = function (a) {
      yf.ⲆⲆΔⲆ = $v(S.ⲆΔ, a);
      var b = false;
      for (var c = 0; c < S.buttons.length; c++) {
        if (S.buttons[c].info.active === oa) {
          b |= S.buttons[c].ⲆⵠᐃΔ(S.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
        }
      }
      if (b !== S.ⲆᐃⵠⵠⲆⲆⲆ) {
        S.ⲆᐃⵠⵠⲆⲆⲆ = b;
        k.style.cursor = b ? S.ⲆᐃᐃⲆᐃⵠⲆ : S.ⵠΔΔⲆⲆᐃΔ;
      }
    };
    this.ᐃΔⲆΔⵠΔⵠ = function () {
      dj.addEventListener("mousedown", this.ⲆⵠΔᐃⵠΔⲆ, vj);
      dj.addEventListener("mouseup", this.ΔᐃᐃⲆⵠⲆᐃ, false);
      dj.addEventListener("mousemove", this.ⵠᐃᐃᐃⵠⲆᐃ, Ll);
    };
    this.ΔΔⲆᐃⲆᐃⲆ = function () {
      dj.removeEventListener("mousedown", this.ⲆⵠΔᐃⵠΔⲆ, false);
      dj.removeEventListener("mouseup", this.ΔᐃᐃⲆⵠⲆᐃ, false);
      dj.removeEventListener("mousemove", this.ⵠᐃᐃᐃⵠⲆᐃ, false);
    };
  }
  function Lw(c, d) {
    var j = this;
    this.ⲆΔ = c;
    this.ᐃ = d;
    if (dj.navigator.userAgent.indexOf("Edge") > -lb) {
      this.ⵠΔΔⲆⲆᐃΔ = "default";
      this.ⲆᐃᐃⲆᐃⵠⲆ = "pointer";
    } else {
      this.ⵠΔΔⲆⲆᐃΔ = "url('img/cursor0.png'), default";
      this.ⲆᐃᐃⲆᐃⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    this.ⵠⲆⲆⲆᐃᐃⲆ = za;
    this.ᐃⲆⲆᐃⲆΔᐃ = cu;
    this.ⵠΔΔⵠⵠΔᐃ = 1;
    this.ⵠⵠⵠᐃᐃᐃΔ = yg;
    this.ΔΔᐃⲆⵠᐃᐃΔΔ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ⲆΔᐃⲆ = {
      ⲆΔΔⲆΔⲆⲆ: aw(60, 60, 0, ΔΔ[Xr.ᐃΔⲆᐃΔΔⲆ]),
      ⵠᐃⵠⵠⲆΔᐃ: aw(60, 60, 0, ΔΔ[Xr.ⵠᐃᐃᐃΔΔᐃ])
    };
    this.sign = {
      open: f,
      ⵠᐃᐃᐃᐃⲆΔⵠⲆ: 0,
      ᐃΔⵠⲆⵠΔⲆ: document.getElementById("sign_object"),
      ᐃⲆᐃΔᐃᐃⵠ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: aw(60, 60, 0, ΔΔ[Xr.ᐃⵠΔⵠⵠᐃΔ]),
      ⲆⲆΔⵠⵠᐃΔ: function () {
        var a = Math.floor(Math.floor((3 + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / nj) * (10 + ΔΔ[Xr.ⵠⵠⵠΔΔᐃⵠ][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 150) + "px";
        this.style.top = Math.floor(lq - 115) + "px";
      },
      ᐃⵠⲆΔⲆ: function () {
        Zw.sign.style.display = "none";
        Zw.sign.open = f;
      },
      select: function () {
        Zw.sign.open = !Zw.sign.open;
        if (Zw.sign.open) {
          Zw.sign.style.display = "inline-block";
        } else {
          Zw.sign.style.display = "none";
        }
      },
      ok: function () {
        Ⲇⵠᐃⵠ.ΔⵠᐃΔΔΔⵠⵠⵠ(Xw.sign.ⵠΔᐃⲆⲆ, Zw.sign.ᐃⲆᐃΔᐃᐃⵠ);
        Zw.sign.select();
      },
      up: function () {
        Zw.sign.ᐃⲆᐃΔᐃᐃⵠ = Zw.sign.ᐃⲆᐃΔᐃᐃⵠ === zl ? kw.ⲆΔⲆΔⵠⵠᐃ - js : Zw.sign.ᐃⲆᐃΔᐃᐃⵠ - Ot;
        Zw.sign.ᐃΔⵠⲆⵠΔⲆ.src = "./img/sign" + Zw.sign.ᐃⲆᐃΔᐃᐃⵠ + ".png";
      },
      down: function () {
        Zw.sign.ᐃⲆᐃΔᐃᐃⵠ = (Zw.sign.ᐃⲆᐃΔᐃᐃⵠ + 1) % kw.ⲆΔⲆΔⵠⵠᐃ;
        Zw.sign.ᐃΔⵠⲆⵠΔⲆ.src = "./img/sign" + Zw.sign.ᐃⲆᐃΔᐃᐃⵠ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, kg);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, kg);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
    this.ⲆΔⵠΔⲆ = {
      open: Rh,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: Rq,
        name: "wood",
        ΔᐃⲆⲆⲆ: js,
        b: js,
        a: 3,
        ΔΔⲆΔᐃ: Xr.ⵠⵠⵠΔΔᐃⵠ
      }, {
        id: 1,
        name: "stone",
        ΔᐃⲆⲆⲆ: xt,
        b: 1,
        a: $i,
        ΔΔⲆΔᐃ: Xr.ⲆⵠⵠⲆⲆⲆᐃ
      }, {
        id: ss,
        name: "gold",
        ΔᐃⲆⲆⲆ: hs,
        b: mk,
        a: 6,
        ΔΔⲆΔᐃ: Xr.ᐃⲆΔΔⵠⲆΔ
      }, {
        id: 3,
        name: "diamond",
        ΔᐃⲆⲆⲆ: 4,
        b: Al,
        a: za,
        ΔΔⲆΔᐃ: Xr.ⲆⲆΔⵠᐃΔⲆ
      }, {
        id: 4,
        name: "amethyst",
        ΔᐃⲆⲆⲆ: 8,
        b: 8,
        a: fl,
        ΔΔⲆΔᐃ: Xr.ⵠⲆΔᐃΔᐃⲆ
      }, {
        id: tb,
        name: "reidite",
        ΔᐃⲆⲆⲆ: 16,
        b: 16,
        a: jh,
        ΔΔⲆΔᐃ: Xr.ᐃⵠⵠⵠΔᐃⵠ
      }, {
        id: Ck,
        name: "pumpkin_seed",
        ΔᐃⲆⲆⲆ: kk,
        b: gg,
        a: Ug,
        ΔΔⲆΔᐃ: Xr.ⵠᐃⲆΔⵠΔΔ
      }, {
        id: zg,
        name: "carrot_seed",
        ΔᐃⲆⲆⲆ: ck,
        b: 16,
        a: hs,
        ΔΔⲆΔᐃ: Xr.ᐃᐃᐃᐃΔⲆⲆ
      }, {
        id: 8,
        name: "tomato_seed",
        ΔᐃⲆⲆⲆ: al,
        b: 20,
        a: 1,
        ΔΔⲆΔᐃ: Xr.ᐃᐃⵠΔΔΔⵠ
      }, {
        id: Qj,
        name: "thornbush_seed",
        ΔᐃⲆⲆⲆ: 30,
        b: 30,
        a: 1,
        ΔΔⲆΔᐃ: Xr.ⵠⵠΔᐃⲆⲆᐃ
      }, {
        id: jn,
        name: "garlic_seed",
        ΔᐃⲆⲆⲆ: 40,
        b: 40,
        a: 1,
        ΔΔⲆΔᐃ: Xr.ⲆⵠⲆⵠⲆᐃΔ
      }, {
        id: 11,
        name: "watermelon_seed",
        ΔᐃⲆⲆⲆ: 60,
        b: 60,
        a: xt,
        ΔΔⲆΔᐃ: Xr.ΔΔᐃᐃΔⵠΔ
      }],
      button: aw(60, 60, 0, ΔΔ[Xr.ⵠⲆΔΔΔΔⲆ]),
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 450) + "px";
        this.style.top = Math.floor(lq - 270) + "px";
      },
      select: function () {
        Zw.ⲆΔⵠΔⲆ.open = !Zw.ⲆΔⵠΔⲆ.open;
        if (Zw.ⲆΔⵠΔⲆ.open) {
          Zw.ⲆΔⵠΔⲆ.style.display = "inline-block";
        } else {
          Zw.ⲆΔⵠΔⲆ.style.display = "none";
        }
      },
      ᐃⵠⲆΔⲆ: function () {
        Zw.ⲆΔⵠΔⲆ.style.display = "none";
        Zw.ⲆΔⵠΔⲆ.open = false;
      },
      ᐃⵠⵠᐃΔΔⵠ: function () {
        Ⲇⵠᐃⵠ.ⲆΔᐃΔΔΔⵠΔΔ(this.ᐃΔΔⲆΔⲆⵠ);
      },
      ⲆⲆΔᐃⵠ: function () {
        this.id;
        if (this.ᐃΔΔⲆΔⲆⵠ.a === xt) {
          var a = Math.floor(Number(this.value) * this.ᐃΔΔⲆΔⲆⵠ.b);
          this.ᐃΔΔⲆΔⲆⵠ.ΔᐃⲆⲆⲆ = a;
          document.getElementById(this.ᐃΔΔⲆΔⲆⵠ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ᐃΔΔⲆΔⲆⵠ.a);
          this.ᐃΔΔⲆΔⲆⵠ.ΔᐃⲆⲆⲆ = a;
          document.getElementById(this.ᐃΔΔⲆΔⲆⵠ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⲆΔⵠΔⲆ.ᐃⵠⲆΔⲆ, C);
    var e = [["mouseup", this.ⲆΔⵠΔⲆ.ᐃⵠⵠᐃΔΔⵠ, "buy_"], ["click", this.ⲆΔⵠΔⲆ.ⲆⲆΔᐃⵠ, ""], ["change", this.ⲆΔⵠΔⲆ.ⲆⲆΔᐃⵠ, ""], ["keypress", this.ⲆΔⵠΔⲆ.keypress, ""]];
    for (var i = Rq; this.ⲆΔⵠΔⲆ.items.length > i; i++) {
      var k = this.ⲆΔⵠΔⲆ.items[i];
      document.getElementById(k.name + "_market").src = ΔΔ[k.ΔΔⲆΔᐃ][0].ΔⵠⲆⲆⵠ === undefined ? ΔΔ[k.ΔΔⲆΔᐃ][0].src : ΔΔ[k.ΔΔⲆΔᐃ][0].ΔⵠⲆⲆⵠ;
      if (hs === k.a) {
        document.getElementById(k.name + "_trad_number").innerHTML = k.b;
        document.getElementById(k.name + "_number").value = za;
        document.getElementById(k.name + "_number").step = 1;
        document.getElementById(k.name + "_number").min = js;
        document.getElementById(k.name + "_number").max = Math.floor(Is / k.b);
      } else {
        document.getElementById(k.name + "_trad_number").innerHTML = qu;
        document.getElementById(k.name + "_number").value = k.a;
        document.getElementById(k.name + "_number").step = k.a;
        document.getElementById(k.name + "_number").min = k.a;
      }
      document.getElementById("buy_" + k.name + "_number").ᐃΔΔⲆΔⲆⵠ = k;
      document.getElementById(k.name + "_number").ᐃΔΔⲆΔⲆⵠ = k;
      for (var n = 0; e.length > n; n++) {
        document.getElementById(e[n][2] + k.name + "_number").addEventListener(e[n][0], e[n][1], false);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ᐃᐃⲆⲆᐃ: document.getElementById("agree_ing").style,
      ⵠⲆⵠᐃᐃⵠᐃ: document.getElementById("cancel_agree_ing").style,
      ᐃⲆⵠⵠΔΔⲆ: document.getElementById("quest_agree_ing").style,
      ⲆⲆᐃΔⲆᐃⵠ: document.getElementById("spectator_agree_ing").style,
      ⵠᐃⲆⵠᐃⵠⵠ: document.getElementById("auto_feed_agree_ing").style,
      ΔⵠΔᐃΔⵠⵠ: document.getElementById("info_agree_ing").style,
      ΔᐃᐃⲆΔΔⲆ: document.getElementById("pixelated_agree_ing").style,
      button: aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⵠᐃⵠΔⲆ]),
      ΔᐃⵠΔᐃⲆΔⲆⵠ: function () {
        Zw.options.open = !Zw.options.open;
        if (Zw.options.open) {
          Zw.options.style.display = "inline-block";
        } else {
          Zw.options.style.display = "none";
        }
      },
      ΔᐃⲆⵠⲆⵠⵠΔⲆ: function () {
        vf.ⲆΔⵠⲆΔᐃᐃ();
      },
      ΔⵠⵠᐃᐃᐃⲆΔⵠ: function () {
        vf.ⵠᐃⲆᐃᐃΔΔ();
      },
      high: function () {
        vf.ⲆⲆⵠⲆⵠᐃΔΔⲆ();
      },
      low: function () {
        vf.ⲆⲆᐃⲆᐃΔΔⲆΔ();
      },
      ᐃⲆⵠⵠⵠ: function () {
        Zw.ⵠⵠⵠΔ.ᐃⲆⵠⵠⵠ();
      },
      ᐃⲆⵠᐃⵠⵠⵠⲆᐃ: function () {
        Zw.ΔⲆⲆᐃⵠ.ᐃⲆⵠⵠⵠ();
      },
      ΔᐃΔⲆⲆⲆⵠΔΔ: function () {
        Zw.Δⵠᐃᐃ.ᐃⲆⵠⵠⵠ();
      },
      ⵠⲆⲆᐃΔⵠⲆⵠᐃ: function () {
        Xw.ΔΔⵠᐃᐃ.ᐃⵠⲆⵠⵠᐃᐃ();
      },
      ⵠΔⵠⲆⲆⲆᐃᐃᐃ: function () {
        Xw.ᐃΔᐃᐃⲆ.ᐃⵠⲆⵠⵠᐃᐃ();
      },
      ᐃⵠⲆΔⲆ: function () {
        Zw.options.style.display = "none";
        Zw.options.open = false;
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 235) + "px";
        this.style.top = Math.floor(lq - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔᐃⲆⵠⲆⵠⵠΔⲆ, ts);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ΔⵠⵠᐃᐃᐃⲆΔⵠ, Fh);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, ot);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, ot);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ᐃⵠⲆΔⲆ, false);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ᐃⲆⵠⵠⵠ, C);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ΔᐃΔⲆⲆⲆⵠΔΔ, false);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ᐃⲆⵠᐃⵠⵠⵠⲆᐃ, xo);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⵠⲆⲆᐃΔⵠⲆⵠᐃ, f);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⵠΔⵠⲆⲆⲆᐃᐃᐃ, false);
    this.ΔⲆⲆᐃⵠ = {
      open: dr,
      ⵠⲆⲆᐃⲆ: ⵠⵠΔΔ.get("starve_cancel") ? ⵠⵠΔΔ.get("starve_cancel") === "0" ? 0 : 1 : rg,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ᐃᐃⲆⲆᐃ: document.getElementById("cancel_agree").style,
      button: 0,
      ⵠΔ: ya,
      ᐃⵠⲆΔⲆ: function () {
        Zw.ΔⲆⲆᐃⵠ.style.display = "none";
        Zw.ΔⲆⲆᐃⵠ.open = false;
      },
      ⵠᐃΔⵠⲆΔᐃ: function () {
        if (Xw.ΔᐃⲆⵠ.ΔⲆⵠΔᐃ) {
          Ⲇⵠᐃⵠ.ⲆⲆΔⲆⲆᐃⵠⲆᐃ();
        }
        Zw.ΔⲆⲆᐃⵠ.ᐃⵠⲆΔⲆ();
      },
      ᐃⲆⵠⵠⵠ: function () {
        if (Zw.ΔⲆⲆᐃⵠ.ⵠⲆⲆᐃⲆ) {
          ⵠⵠΔΔ.set("starve_cancel", "0");
          Zw.ΔⲆⲆᐃⵠ.ᐃᐃⲆⲆᐃ.display = "inline-block";
          Zw.options.ⵠⲆⵠᐃᐃⵠᐃ.display = "none";
        } else {
          ⵠⵠΔΔ.set("starve_cancel", "1");
          Zw.ΔⲆⲆᐃⵠ.ᐃᐃⲆⲆᐃ.display = "none";
          Zw.options.ⵠⲆⵠᐃᐃⵠᐃ.display = "inline-block";
        }
        Zw.ΔⲆⲆᐃⵠ.ⵠⲆⲆᐃⲆ = !Zw.ΔⲆⲆᐃⵠ.ⵠⲆⲆᐃⲆ;
      },
      ⲆᐃⵠᐃΔᐃΔ: function () {
        if (this.ⵠⲆⲆᐃⲆ) {
          this.style.display = "inline-block";
          this.open = ye;
        } else {
          this.ⵠᐃΔⵠⲆΔᐃ();
        }
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 235) + "px";
        this.style.top = Math.floor(lq - 130) + "px";
      }
    };
    this.ΔⲆⲆᐃⵠ.id.oncontextmenu = function () {
      return false;
    };
    this.ΔⲆⲆᐃⵠ.ᐃᐃⲆⲆᐃ.display = "none";
    if (this.ΔⲆⲆᐃⵠ.ⵠⲆⲆᐃⲆ) {
      this.options.ⵠⲆⵠᐃᐃⵠᐃ.display = "inline-block";
    } else {
      this.options.ⵠⲆⵠᐃᐃⵠᐃ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ΔⲆⲆᐃⵠ.ⵠᐃΔⵠⲆΔᐃ, xo);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ΔⲆⲆᐃⵠ.ᐃⵠⲆΔⲆ, wt);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ΔⲆⲆᐃⵠ.ᐃⲆⵠⵠⵠ, dr);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, Tk);
    this.ᐃᐃⲆⲆΔⲆΔ = {
      ⵠⲆⲆᐃⲆ: ⵠⵠΔΔ.get("starve_aliasing") ? ⵠⵠΔΔ.get("starve_aliasing") === "0" ? Rq : lb : jh,
      ⵠᐃᐃΔⵠᐃᐃ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ᐃⲆⵠⵠⵠ: function () {
        if (Zw.ᐃᐃⲆⲆΔⲆΔ.ⵠⲆⲆᐃⲆ === Lr) {
          ⵠⵠΔΔ.set("starve_aliasing", "1");
          Zw.ᐃᐃⲆⲆΔⲆΔ.ⵠᐃᐃΔⵠᐃᐃ(fl);
          Zw.options.ΔᐃᐃⲆΔΔⲆ.display = "inline-block";
        } else {
          ⵠⵠΔΔ.set("starve_aliasing", "0");
          Zw.ᐃᐃⲆⲆΔⲆΔ.ⵠᐃᐃΔⵠᐃᐃ(0);
          Zw.options.ΔᐃᐃⲆΔΔⲆ.display = "none";
        }
        Zw.ᐃᐃⲆⲆΔⲆΔ.ⵠⲆⲆᐃⲆ = (Zw.ᐃᐃⲆⲆΔⲆΔ.ⵠⲆⲆᐃⲆ + 1) % 2;
      }
    };
    if (hs === this.ᐃᐃⲆⲆΔⲆΔ.ⵠⲆⲆᐃⲆ) {
      this.options.ΔᐃᐃⲆΔΔⲆ.display = "inline-block";
    } else {
      this.ᐃᐃⲆⲆΔⲆΔ.ⵠᐃᐃΔⵠᐃᐃ(0);
      this.options.ΔᐃᐃⲆΔΔⲆ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ᐃᐃⲆⲆΔⲆΔ.ᐃⲆⵠⵠⵠ, Ta);
    this.Ⲇⵠᐃⵠⵠ = {
      ⵠⲆⲆᐃⲆ: ⵠⵠΔΔ.get("starve_info_box") ? ⵠⵠΔΔ.get("starve_info_box") === "0" ? 0 : 1 : js,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ΔᐃⲆⵠ: ya,
      ᐃⲆⵠⵠⵠ: function () {
        if (Zw.Ⲇⵠᐃⵠⵠ.ⵠⲆⲆᐃⲆ === 0) {
          ⵠⵠΔΔ.set("starve_info_box", "1");
          Zw.options.ΔⵠΔᐃΔⵠⵠ.display = "inline-block";
        } else {
          ⵠⵠΔΔ.set("starve_info_box", "0");
          Zw.options.ΔⵠΔᐃΔⵠⵠ.display = "none";
        }
        Zw.Ⲇⵠᐃⵠⵠ.ⵠⲆⲆᐃⲆ = (Zw.Ⲇⵠᐃⵠⵠ.ⵠⲆⲆᐃⲆ + mk) % 2;
      },
      ⲆⵠᐃΔ: function (a, b, c) {
        if (a && this.ⵠⲆⲆᐃⲆ) {
          this.display = mk;
          this.id = c === Bg ? b.id : Xs[b.id].Δⵠⵠⵠ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ΔᐃⲆⵠ = c;
        }
        return a;
      }
    };
    if (this.Ⲇⵠᐃⵠⵠ.ⵠⲆⲆᐃⲆ === 1) {
      this.options.ΔⵠΔᐃΔⵠⵠ.display = "inline-block";
    } else {
      this.options.ΔⵠΔᐃΔⵠⵠ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.Ⲇⵠᐃⵠⵠ.ᐃⲆⵠⵠⵠ, false);
    if (ⵠⵠΔΔ.get("starve_scale")) {
      yo = Number(ⵠⵠΔΔ.get("starve_scale"));
      document.getElementById("input_ratio").value = yo;
      yo *= ua / ca;
      ma();
    }
    this.ᐃΔⵠΔⵠⲆⲆ = function () {
      ⵠⵠΔΔ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      yo = ua / ca * document.getElementById("input_ratio").value;
      ma();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ᐃΔⵠΔⵠⲆⲆ, f);
    this.ⵠⵠⵠΔ = {
      open: false,
      ⵠⲆⲆᐃⲆ: ⵠⵠΔΔ.get("starve_safe") && ⵠⵠΔΔ.get("starve_safe") === "0" ? 0 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ᐃᐃⲆⲆᐃ: document.getElementById("agree").style,
      button: Pg,
      ⵠΔ: 0,
      ᐃⵠⲆΔⲆ: function () {
        Zw.ⵠⵠⵠΔ.style.display = "none";
        Zw.ⵠⵠⵠΔ.open = ot;
      },
      all: function () {
        if (!Xw.ᐃΔᐃⲆⵠ.wait) {
          if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && Xw.ΔᐃⲆⵠ.id < wj && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
            Ⲇⵠᐃⵠ.ΔΔⵠΔⲆΔΔⲆⵠ(Zw.ⵠⵠⵠΔ.button);
          }
          Zw.ⵠⵠⵠΔ.ᐃⵠⲆΔⲆ();
        }
      },
      ⲆΔⲆⲆ: function () {
        if (Xw.ΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ && !Xw.ᐃΔᐃⲆⵠ.wait) {
          if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && Xw.ΔᐃⲆⵠ.id < 0 && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
            Ⲇⵠᐃⵠ.ⲆⵠⵠⵠᐃⲆⲆⲆⵠ(Zw.ⵠⵠⵠΔ.button);
          }
          Zw.ⵠⵠⵠΔ.ᐃⵠⲆΔⲆ();
        }
      },
      ᐃⵠⲆⵠⵠᐃⲆⲆΔ: function () {
        if (!Xw.ᐃΔᐃⲆⵠ.wait) {
          if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < Hi && Xw.ΔᐃⲆⵠ.id < 0 && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
            Ⲇⵠᐃⵠ.ⲆⵠᐃⵠⵠΔⲆΔⵠ(Zw.ⵠⵠⵠΔ.button);
          }
          Zw.ⵠⵠⵠΔ.ᐃⵠⲆΔⲆ();
        }
      },
      ᐃⲆⵠⵠⵠ: function () {
        if (Zw.ⵠⵠⵠΔ.ⵠⲆⲆᐃⲆ) {
          ⵠⵠΔΔ.set("starve_safe", "0");
          Zw.ⵠⵠⵠΔ.ᐃᐃⲆⲆᐃ.display = "inline-block";
          Zw.options.ᐃᐃⲆⲆᐃ.display = "none";
        } else {
          ⵠⵠΔΔ.set("starve_safe", "1");
          Zw.ⵠⵠⵠΔ.ᐃᐃⲆⲆᐃ.display = "none";
          Zw.options.ᐃᐃⲆⲆᐃ.display = "inline-block";
        }
        Zw.ⵠⵠⵠΔ.ⵠⲆⲆᐃⲆ = !Zw.ⵠⵠⵠΔ.ⵠⲆⲆᐃⲆ;
      },
      ⲆᐃⵠᐃΔᐃΔ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ΔΔ[es[a].ⵠⵠ][0].ΔⵠⲆⲆⵠ === ut ? ΔΔ[es[a].ⵠⵠ][Bg].src : ΔΔ[es[a].ⵠⵠ][0].ΔⵠⲆⲆⵠ;
        if (es[a].ⲆΔⲆⲆ && !Xw.ⲆᐃⲆⵠᐃ && Xw.ΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ⵠⲆⲆᐃⲆ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 235) + "px";
        this.style.top = Math.floor(lq - 175) + "px";
      }
    };
    this.ⵠⵠⵠΔ.ᐃᐃⲆⲆᐃ.display = "none";
    if (this.ⵠⵠⵠΔ.ⵠⲆⲆᐃⲆ) {
      this.options.ᐃᐃⲆⲆᐃ.display = "inline-block";
    } else {
      this.options.ᐃᐃⲆⲆᐃ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ⵠⵠⵠΔ.ᐃⵠⲆⵠⵠᐃⲆⲆΔ, f);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ⵠⵠⵠΔ.all, false);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ⵠⵠⵠΔ.ⲆΔⲆⲆ, false);
    document.getElementById("no_delete").addEventListener("mouseup", this.ⵠⵠⵠΔ.ᐃⵠⲆΔⲆ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ⵠⵠⵠΔ.ᐃⲆⵠⵠⵠ, false);
    this.ⵠΔⲆⵠΔ = {
      open: false,
      ⲆΔⲆΔᐃ: -Te,
      button: aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⵠΔⵠⲆⲆ]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 300) + "px";
        this.style.top = Math.floor(lq - 215) + "px";
      },
      ᐃⵠⲆΔⲆ: function () {
        Zw.ⵠΔⲆⵠΔ.open = xo;
        Zw.ⵠΔⲆⵠΔ.style.display = "none";
      },
      select: function () {
        Zw.ⵠΔⲆⵠΔ.open = !Zw.ⵠΔⲆⵠΔ.open;
        if (Zw.ⵠΔⲆⵠΔ.open) {
          Zw.ⵠΔⲆⵠΔ.style.display = "inline-block";
        } else {
          Zw.ⵠΔⲆⵠΔ.style.display = "none";
        }
      },
      ᐃⵠⵠᐃΔΔⵠ: function () {
        if (Zw.ⵠΔⲆⵠΔ.ⲆΔⲆΔᐃ >= 0) {
          Ⲇⵠᐃⵠ.ⵠΔΔᐃⲆᐃⵠΔΔ(Zw.ⵠΔⲆⵠΔ.ⲆΔⲆΔᐃ);
          Zw.ⵠΔⲆⵠΔ.ᐃⵠⲆΔⲆ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + Zw.ⵠΔⲆⵠΔ.ⲆΔⲆΔᐃ);
          }
        }
      },
      ᐃΔΔΔᐃ: function () {
        var a = Xw.ⵠΔⲆⵠΔ.value;
        document.getElementById("points_bank").innerHTML = ᐃⵠΔⲆ.ᐃΔⵠᐃᐃᐃᐃ(a) + " points";
        for (var b = 0; b < jw.length; b++) {
          if (jw[b].ⲆⵠΔΔⲆ > a) {
            document.getElementById("starter" + (b + Xn)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = xt; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ⵠⲆⵠΔᐃᐃᐃⲆⵠ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(Rr) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(bh));
        }
        var b = jw[a - fl];
        if (Xw.ⵠΔⲆⵠΔ.value >= b.ⲆⵠΔΔⲆ) {
          Zw.ⵠΔⲆⵠΔ.ⲆΔⲆΔᐃ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          Zw.ⵠΔⲆⵠΔ.ⲆΔⲆΔᐃ = -Oq;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = ie, d = Ug; c < b.length + 1; c++) {
          if (b[c - hs][1] !== _r.ⵠⲆᐃᐃ) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ΔΔ[es[b[c - 1][Ot]].ⵠⵠ][Rs].ΔⵠⲆⲆⵠ === Hq ? ΔΔ[es[b[c - 1][rg]].ⵠⵠ][Hi].src : ΔΔ[es[b[c - Ug][1]].ⵠⵠ][0].ΔⵠⲆⲆⵠ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - ie][gu];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ⵠΔⲆⵠΔ.ᐃⵠⲆΔⲆ, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ⵠΔⲆⵠΔ.ᐃⵠⵠᐃΔΔⵠ, Ta);
    for (n = Ug; n < 11; n++) {
      document.getElementById("starter" + n).addEventListener("mouseup", this.ⵠΔⲆⵠΔ.ⵠⲆⵠΔᐃᐃᐃⲆⵠ, Fh);
    }
    this.Δⵠᐃᐃ = {
      open: kg,
      ⵠⲆⲆᐃⲆ: ⵠⵠΔΔ.get("starve_quests") ? ⵠⵠΔΔ.get("starve_quests") === "1" ? 1 : 0 : ps,
      button: aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆᐃⵠᐃΔ]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(bo - 420) + "px";
        this.style.top = Math.floor(lq - 270) + "px";
      },
      ᐃⵠⲆΔⲆ: function () {
        Zw.Δⵠᐃᐃ.style.display = "none";
        Zw.Δⵠᐃᐃ.open = Jn;
      },
      select: function () {
        Zw.Δⵠᐃᐃ.open = !Zw.Δⵠᐃᐃ.open;
        if (Zw.Δⵠᐃᐃ.open) {
          Zw.Δⵠᐃᐃ.style.display = "inline-block";
        } else {
          Zw.Δⵠᐃᐃ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = Hi; a < nw.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ΔⵠⵠΔΔΔᐃ: Zj,
      ᐃⵠΔΔΔᐃⲆ: 0,
      ⲆⵠΔΔΔⵠⵠΔᐃ: function () {
        if (Zw.Δⵠᐃᐃ.open) {
          var a = new Date().getTime();
          if (a - this.ΔⵠⵠΔΔΔᐃ >= 1000) {
            this.ΔⵠⵠΔΔΔᐃ = a;
            for (var b = 0; b < nw.length; b++) {
              if (Zw.Δⵠᐃᐃ.list[b]) {
                var c = nw[b].time - (a - mf.ΔᐃᐃΔⲆ.ᐃΔΔΔᐃ + Zw.Δⵠᐃᐃ.ᐃⵠΔΔΔᐃⲆ);
                if (c > 960000) {
                  document.getElementById(Ⲇ[pb] + b).innerHTML = Math.floor(c / 480000) + " days";
                } else if (c > 480000) {
                  document.getElementById("timeremain_" + b).innerHTML = Math.floor(c / 480000) + " day";
                } else if (c > 60000) {
                  document.getElementById(Ⲇ[nr] + b).innerHTML = Math.floor(c / 60000) + " min";
                } else {
                  document.getElementById("timeremain_" + b).innerHTML = Math.floor(c / 1000) + " sec";
                }
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = Da; b < a.length; b++) {
          if (a[b] != 1) {
            Zw.Δⵠᐃᐃ.ᐃⵠⵠⵠⲆᐃⲆ(b, a[b]);
          }
        }
      },
      ᐃⵠⵠⵠⲆᐃⲆ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          Xw.ᐃΔᐃⵠ.ΔΔᐃⵠⲆⵠⵠ(wj, za);
          Zw.ΔᐃⲆᐃΔᐃⵠ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > Oq) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === In) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById(Ⲇ[Eq] + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === Pn ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        Zw.Δⵠᐃᐃ.list[a] = mj;
      },
      modify: function (a, b) {
        Zw.Δⵠᐃᐃ.ᐃⵠⵠⵠⲆᐃⲆ(a, b);
        if (Zw.Δⵠᐃᐃ.ⵠⲆⲆᐃⲆ) {
          Zw.Δⵠᐃᐃ.open = true;
          Zw.Δⵠᐃᐃ.style.display = "inline-block";
        }
      },
      ᐃⲆⵠⵠⵠ: function () {
        if (Zw.Δⵠᐃᐃ.ⵠⲆⲆᐃⲆ) {
          ⵠⵠΔΔ.set("starve_quests", "0");
          Zw.options.ᐃⲆⵠⵠΔΔⲆ.display = "none";
        } else {
          ⵠⵠΔΔ.set("starve_quests", "1");
          Zw.options.ᐃⲆⵠⵠΔΔⲆ.display = "inline-block";
        }
        Zw.Δⵠᐃᐃ.ⵠⲆⲆᐃⲆ = !Zw.Δⵠᐃᐃ.ⵠⲆⲆᐃⲆ;
      },
      ⵠΔⲆᐃΔⵠΔΔⵠ: function () {
        var a = Number(this.id.charAt(Cq));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= R) {
          a = a * J + b;
        }
        Ⲇⵠᐃⵠ.ⲆᐃΔΔΔᐃⵠⵠᐃ(a);
      }
    };
    if (this.Δⵠᐃᐃ.ⵠⲆⲆᐃⲆ) {
      this.options.ᐃⲆⵠⵠΔΔⲆ.display = "inline-block";
    } else {
      this.options.ᐃⲆⵠⵠΔΔⲆ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.Δⵠᐃᐃ.ᐃⵠⲆΔⲆ, Bh);
    for (n = 0; n < nw.length; n++) {
      document.getElementById("claim_reward_" + n).addEventListener("mouseup", this.Δⵠᐃᐃ.ⵠΔⲆᐃΔⵠΔΔⵠ, false);
    }
    this.ⲆⵠⲆⵠ = {
      open: Ei,
      button: aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠᐃⵠⲆᐃ]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ΔΔΔΔⵠᐃᐃ: [],
        ⲆⲆΔᐃᐃⲆⵠ: 0,
        ᐃⲆΔ: function () {
          this.style.left = Math.floor(bo - 335) + "px";
          this.style.top = Math.floor(lq - 215) + "px";
        },
        ᐃⵠⲆΔⲆ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          Zw.ⲆⵠⲆⵠ.open = false;
        },
        ⲆⲆᐃⲆΔᐃΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ⲆⵠΔΔ: function (a) {
          if ((b = this.ΔΔΔΔⵠᐃᐃ[a]).ⵠᐃⵠ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ΔΔ[es[b[a][tg]].ⵠⵠ][Eh].ΔⵠⲆⲆⵠ === undefined ? ΔΔ[es[b[a][ya]].ⵠⵠ][0].src : ΔΔ[es[b[a][In]].ⵠⵠ][0].ΔⵠⲆⲆⵠ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ⲆⲆΔᐃᐃⲆⵠ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = wj; b < Xs.length; b++) {
            var d = Xs[b];
            if (a === d.ⵠⵠⵠ) {
              this.ΔΔΔΔⵠᐃᐃ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ΔΔ[es[d.Δⵠⵠⵠ].ⵠⵠ][0].ΔⵠⲆⲆⵠ === undefined ? ΔΔ[es[d.Δⵠⵠⵠ].ⵠⵠ][Db].src : ΔΔ[es[d.Δⵠⵠⵠ].ⵠⵠ][0].ΔⵠⲆⲆⵠ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ⵠⲆΔΔⲆᐃΔ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ᐃⲆΔ: function () {
          this.style.left = Math.floor(bo - 285) + "px";
          this.style.top = Math.floor(lq - 170) + "px";
        },
        ᐃⵠⲆΔⲆ: function () {
          document.getElementById("home_craft").style.display = "none";
          Zw.ⲆⵠⲆⵠ.open = false;
        }
      },
      ⵠⵠⲆⲆᐃΔΔᐃⵠ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ⲆⵠⲆⵠ.ⵠⲆΔΔⲆᐃΔ.ᐃⵠⲆΔⲆ, _g);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ⲆⵠⲆⵠ.list.ᐃⵠⲆΔⲆ, Fh);
    document.getElementById("backhome").addEventListener("mouseup", this.ⲆⵠⲆⵠ.list.ⲆⲆᐃⲆΔᐃΔ, Ta);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(cs.ⵠᐃⲆᐃᐃ);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(cs.ΔⲆΔⵠ);
    }, wt);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(cs.ⲆᐃⵠᐃΔ);
    }, kg);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(cs.ⵠⲆⵠⲆΔ);
    }, false);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(cs.ΔⲆⵠⵠⲆ);
    }, false);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      Zw.ⲆⵠⲆⵠ.list.select(cs.Ⲇⵠⵠⵠᐃ);
    }, f);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(0);
    }, Bh);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(1);
    }, uh);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(qo);
    }, false);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(4);
    }, false);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(5);
    }, Ll);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(6);
    }, vj);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(7);
    }, Fh);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(Fs);
    }, dr);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(Ca);
    }, Ei);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(yt);
    }, xo);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(11);
    }, Tk);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(13);
    }, false);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(dk);
    }, Jn);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(qs);
    }, Ei);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(16);
    }, Fh);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(17);
    }, ts);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(Vq);
    }, ts);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(so);
    }, false);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(20);
    }, false);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(21);
    }, _g);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(22);
    }, Ll);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(23);
    }, xo);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(24);
    }, false);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(25);
    }, Ll);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(26);
    }, wt);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(27);
    }, C);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(28);
    }, false);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(29);
    }, false);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(30);
    }, wt);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(31);
    }, dr);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(32);
    }, false);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(33);
    }, false);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(34);
    }, uh);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(37);
    }, false);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(38);
    }, false);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(39);
    }, Tk);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(40);
    }, Fh);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(41);
    }, f);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(42);
    }, kg);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(43);
    }, false);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(45);
    }, false);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(46);
    }, false);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      Zw.ⲆⵠⲆⵠ.list.ⲆⵠΔΔ(47);
    }, false);
    this.ΔΔΔⲆⵠ = {
      translate: {
        y: Pg,
        x: 0
      },
      ⵠΔᐃᐃΔ: {
        y: -1,
        x: -1
      },
      ⵠΔΔⲆ: [],
      focus: function (a) {
        var b = this.translate.y + (Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ⵠΔᐃᐃΔ.x = a.x - this.translate.x;
          this.ⵠΔᐃᐃΔ.y = a.y - b;
        }
      }
    };
    this.ⵠⵠⵠⵠ = {
      translate: {
        y: wj,
        x: 0
      },
      ⵠⵠ: ΔΔ[Xr.ⲆᐃΔΔⲆⵠⵠ],
      ⲆΔ: document.createElement("canvas")
    };
    this.ⵠⵠⵠⵠ.ⲆΔ.width = this.ⵠⵠⵠⵠ.ⵠⵠ.width;
    this.ⵠⵠⵠⵠ.ⲆΔ.height = this.ⵠⵠⵠⵠ.ⵠⵠ.height;
    this.ⵠⵠⵠⵠ.ᐃ = this.ⵠⵠⵠⵠ.ⲆΔ.getContext("2d");
    this.ⲆΔᐃΔ = {
      translate: {
        y: Rq,
        x: 0
      },
      ⵠⵠ: ΔΔ[Xr.ΔᐃⲆⲆᐃⲆᐃ],
      ᐃⵠᐃⵠ: Wm,
      y: Hi
    };
    this.ΔⵠⵠΔΔⵠΔ = function () {
      ᐃⲆⵠⵠⲆ = document.getElementById("team_box");
      ᐃⲆⵠⵠⲆ.innerHTML = "";
      ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + mf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[ps]].ⲆⲆΔⵠᐃ + "</div";
      for (var a = 1; a < Xw.ᐃΔⲆⲆⵠ.length; a++) {
        ᐃⲆⵠⵠⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + mf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[a]].ⲆⲆΔⵠᐃ + "</div></div>";
      }
      ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ᐃⲆⵠⵠⲆ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", Ⲇⵠᐃⵠ.ΔⵠⵠΔΔⵠΔ, false);
    };
    this.ⲆⵠⵠΔΔᐃⵠᐃᐃ = function () {
      ᐃⲆⵠⵠⲆ = document.getElementById("team_box");
      ᐃⲆⵠⵠⲆ.innerHTML = "";
      ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + mf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[ya]].ⲆⲆΔⵠᐃ + "</div";
      for (var a = Ol; Xw.ᐃΔⲆⲆⵠ.length > a; a++) {
        ᐃⲆⵠⵠⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + mf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[a]].ⲆⲆΔⵠᐃ + "</div></div>";
      }
      ᐃⲆⵠⵠⲆ.innerHTML += "</div>";
      ᐃⲆⵠⵠⲆ.style.display = "inline-block";
    };
    this.ΔⲆᐃⵠΔᐃⵠⲆⲆ = function () {
      ᐃⲆⵠⵠⲆ = document.getElementById("team_box");
      ᐃⲆⵠⵠⲆ.innerHTML = "";
      ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + mf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[mj]].ⲆⲆΔⵠᐃ + "</div";
      for (var a = 1; Xw.ᐃΔⲆⲆⵠ.length > a; a++) {
        ᐃⲆⵠⵠⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + mf.ⵠΔΔⲆ[Xw.ᐃΔⲆⲆⵠ[a]].ⲆⲆΔⵠᐃ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (Xw.ΔⵠⲆᐃᐃ.lock === 0) {
        ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ᐃⲆⵠⵠⲆ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", Ⲇⵠᐃⵠ.ⵠᐃᐃΔⲆⵠⵠⲆΔ, false);
      ᐃⲆⵠⵠⲆ.style.display = "inline-block";
      for (a = Xn; Xw.ᐃΔⲆⲆⵠ.length > a; a++) {
        switch (a) {
          case jh:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(cu);
            }, false);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(2);
            }, false);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(Jb);
            }, ts);
            break;
          case eg:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(Mq);
            }, C);
            break;
          case pb:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(nr);
            }, sl);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(fh);
            }, wt);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(7);
            }, false);
            break;
          case Ig:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ⲇⵠᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ(8);
            }, false);
        }
      }
    };
    this.ⲆΔⵠᐃᐃ = [];
    this.ⲆΔⵠᐃᐃ[kw.ᐃⵠᐃⲆΔΔⵠ] = {
      button: aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔᐃⵠⲆⲆ]),
      action: this.ΔⵠⵠΔΔⵠΔ
    };
    this.ⲆΔⵠᐃᐃ[kw.ΔᐃΔΔΔⲆⲆ] = {
      button: aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔᐃⵠⲆⲆ]),
      action: Ⲇⵠᐃⵠ.ⲆᐃΔⵠΔⵠⲆⵠΔ
    };
    this.ⲆΔⵠᐃᐃ[kw.ᐃⲆᐃⲆⵠⵠΔ] = {
      button: aw(60, 60, 0, ΔΔ[Xr.ΔᐃΔᐃⵠᐃΔ]),
      action: this.ΔⲆᐃⵠΔᐃⵠⲆⲆ
    };
    this.ⲆΔⵠᐃᐃ[kw.ⵠᐃᐃⵠᐃΔΔ] = {
      button: aw(60, 60, 0, ΔΔ[Xr.ΔᐃᐃᐃⲆⵠᐃ]),
      action: this.ⲆⵠⵠΔΔᐃⵠᐃᐃ
    };
    this.ⲆΔⵠᐃᐃ[kw.ᐃⲆΔⵠᐃⵠⵠ] = {
      button: aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔΔᐃᐃⵠ]),
      action: function () {}
    };
    this.ᐃⵠᐃᐃⲆ = -1;
    this.ᐃᐃᐃᐃⵠΔⲆ = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠΔⲆᐃⲆⵠ]);
    this.ᐃⲆΔⵠᐃⲆⲆ = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆᐃⵠⵠᐃⲆ]);
    this.ΔⵠⲆⵠΔⵠⲆ = aw(60, 60, 0, ΔΔ[Xr.ΔᐃᐃΔᐃⲆΔ]);
    this.ⵠⵠⲆⵠΔⵠΔ = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⲆᐃⵠᐃΔ]);
    this.ΔᐃΔⲆᐃΔᐃ = aw(60, 60, 0, ΔΔ[Xr.ΔᐃᐃΔᐃⲆΔ]);
    this.ΔᐃⵠⲆⵠⵠΔ = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⵠΔΔᐃⵠ]);
    this.ⲆΔΔⲆΔⲆᐃ = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⵠⲆⲆⲆᐃ]);
    this.ΔⲆΔᐃΔΔⲆ = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆΔΔⵠⲆΔ]);
    this.ᐃⵠᐃⵠᐃᐃΔ = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆΔⵠᐃΔⲆ]);
    this.ⵠᐃᐃΔⲆΔᐃ = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆΔᐃΔᐃⲆ]);
    this.ⲆⵠⲆΔΔⲆⲆ = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⵠⵠΔᐃⵠ]);
    this.ⲆΔⲆᐃⵠⵠᐃ = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⲆⵠΔⲆᐃ]);
    this.ⲆΔⵠᐃⲆⵠⲆ = aw(60, 60, 0, ΔΔ[Xr.ⲆΔᐃⵠⲆᐃΔ]);
    this.ⵠᐃⲆΔΔⲆΔ = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⵠⲆΔΔⲆ]);
    this.ΔΔᐃⵠⵠⵠⵠ = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⲆⲆⵠᐃⲆ]);
    this.ⲆᐃⵠᐃⲆ = aw(120, 120, 0, ΔΔ[Xr.ⵠⵠⲆⵠⲆ]);
    this.ⲆᐃⵠᐃⲆ.info.translate.x = yt;
    this.ⲆᐃⵠᐃⲆ.info.translate.y = 10;
    this.ⲆⵠΔ = [];
    this.ⲆⵠΔ[_r.ᐃᐃⲆΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠⲆᐃⲆⲆⵠ], 3);
    this.ⲆⵠΔ[_r.ᐃᐃⲆΔⲆ].id = _r.ᐃᐃⲆΔⲆ;
    this.ⲆⵠΔ[_r.ⲆⵠⵠⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠⵠⵠⵠⲆᐃ], 3);
    this.ⲆⵠΔ[_r.ⲆⵠⵠⲆⲆ].id = _r.ⲆⵠⵠⲆⲆ;
    this.ⲆⵠΔ[_r.ᐃΔⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠᐃⵠⵠΔΔ], vt);
    this.ⲆⵠΔ[_r.ᐃΔⵠⲆ].id = _r.ᐃΔⵠⲆ;
    this.ⲆⵠΔ[_r.ⵠᐃⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⵠⲆⵠᐃⵠ], 3);
    this.ⲆⵠΔ[_r.ⵠᐃⵠⵠ].id = _r.ⵠᐃⵠⵠ;
    this.ⲆⵠΔ[_r.ⵠᐃⲆⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠΔⵠᐃⵠᐃ], 3);
    this.ⲆⵠΔ[_r.ⵠᐃⲆⲆⲆ].id = _r.ⵠᐃⲆⲆⲆ;
    this.ⲆⵠΔ[_r.ⵠⵠⵠΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠⲆΔΔⵠⵠ], 3);
    this.ⲆⵠΔ[_r.ⵠⵠⵠΔⲆ].id = _r.ⵠⵠⵠΔⲆ;
    this.ⲆⵠΔ[_r.ᐃⲆⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⲆΔᐃⲆⵠ], Hk);
    this.ⲆⵠΔ[_r.ᐃⲆⵠᐃ].id = _r.ᐃⲆⵠᐃ;
    this.ⲆⵠΔ[_r.ᐃⲆΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃᐃᐃⲆΔΔ], bb);
    this.ⲆⵠΔ[_r.ᐃⲆΔⵠ].id = _r.ᐃⲆΔⵠ;
    this.ⲆⵠΔ[_r.ⵠᐃⲆΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔⵠᐃⵠⵠⵠ], 3);
    this.ⲆⵠΔ[_r.ⵠᐃⲆΔΔ].id = _r.ⵠᐃⲆΔΔ;
    this.ⲆⵠΔ[_r.ᐃⲆⵠΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔΔΔⵠΔⵠ], fn);
    this.ⲆⵠΔ[_r.ᐃⲆⵠΔⲆ].id = _r.ᐃⲆⵠΔⲆ;
    this.ⲆⵠΔ[_r.ⵠΔΔΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔⲆⲆⵠⵠΔ], 3);
    this.ⲆⵠΔ[_r.ⵠΔΔΔΔ].id = _r.ⵠΔΔΔΔ;
    this.ⲆⵠΔ[_r.ΔⵠᐃΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⲆⵠΔⵠⲆ], Tr);
    this.ⲆⵠΔ[_r.ΔⵠᐃΔᐃ].id = _r.ΔⵠᐃΔᐃ;
    this.ⲆⵠΔ[_r.ᐃΔⲆᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔⵠΔΔᐃΔ], Hk);
    this.ⲆⵠΔ[_r.ᐃΔⲆᐃΔ].id = _r.ᐃΔⲆᐃΔ;
    this.ⲆⵠΔ[_r.ΔᐃᐃⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔⲆⲆⵠⵠᐃ], ig);
    this.ⲆⵠΔ[_r.ΔᐃᐃⲆⲆ].id = _r.ΔᐃᐃⲆⲆ;
    this.ⲆⵠΔ[_r.ⵠⲆΔⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⲆⲆⲆᐃⲆ], 3);
    this.ⲆⵠΔ[_r.ⵠⲆΔⵠᐃ].id = _r.ⵠⲆΔⵠᐃ;
    this.ⲆⵠΔ[_r.ⵠᐃΔⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃΔΔⲆᐃⲆ], nq);
    this.ⲆⵠΔ[_r.ⵠᐃΔⲆᐃ].id = _r.ⵠᐃΔⲆᐃ;
    this.ⲆⵠΔ[_r.ⲆⲆⲆⲆⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃΔⵠᐃᐃΔ], qo);
    this.ⲆⵠΔ[_r.ⲆⲆⲆⲆⵠ].id = _r.ⲆⲆⲆⲆⵠ;
    this.ⲆⵠΔ[_r.ⵠⵠΔⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⵠⲆᐃⲆⲆ], 3);
    this.ⲆⵠΔ[_r.ⵠⵠΔⵠⲆ].id = _r.ⵠⵠΔⵠⲆ;
    this.ⲆⵠΔ[_r.ⲆΔⲆⲆⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆΔΔⲆΔᐃ], 3);
    this.ⲆⵠΔ[_r.ⲆΔⲆⲆⵠ].id = _r.ⲆΔⲆⲆⵠ;
    this.ⲆⵠΔ[_r.ΔΔⵠⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠᐃⵠᐃⲆΔ], Ut);
    this.ⲆⵠΔ[_r.ΔΔⵠⵠⲆ].id = _r.ΔΔⵠⵠⲆ;
    this.ⲆⵠΔ[_r.ⵠⵠᐃᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃΔΔΔⲆᐃ], 3);
    this.ⲆⵠΔ[_r.ⵠⵠᐃᐃⵠ].id = _r.ⵠⵠᐃᐃⵠ;
    this.ⲆⵠΔ[_r.ᐃΔΔⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠΔΔⲆⵠΔ], ea);
    this.ⲆⵠΔ[_r.ᐃΔΔⵠΔ].id = _r.ᐃΔΔⵠΔ;
    this.ⲆⵠΔ[_r.ᐃΔᐃⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⵠΔⲆⵠⵠ], 3);
    this.ⲆⵠΔ[_r.ᐃΔᐃⲆᐃ].id = _r.ᐃΔᐃⲆᐃ;
    this.ⲆⵠΔ[_r.ᐃΔⵠᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃⵠᐃⲆⲆΔ], 3);
    this.ⲆⵠΔ[_r.ᐃΔⵠᐃⲆ].id = _r.ᐃΔⵠᐃⲆ;
    this.ⲆⵠΔ[_r.ΔᐃⵠⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠⲆⲆⵠⲆᐃ], qo);
    this.ⲆⵠΔ[_r.ΔᐃⵠⲆⲆ].id = _r.ΔᐃⵠⲆⲆ;
    this.ⲆⵠΔ[_r.ᐃᐃᐃᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⲆᐃΔⵠΔⵠ], ig);
    this.ⲆⵠΔ[_r.ᐃᐃᐃᐃᐃ].id = _r.ᐃᐃᐃᐃᐃ;
    this.ⲆⵠΔ[_r.ⵠᐃⲆᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔΔᐃⵠᐃᐃ], ci);
    this.ⲆⵠΔ[_r.ⵠᐃⲆᐃⵠ].id = _r.ⵠᐃⲆᐃⵠ;
    this.ⲆⵠΔ[_r.ΔⵠⵠⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃᐃᐃᐃΔΔ], I);
    this.ⲆⵠΔ[_r.ΔⵠⵠⲆᐃ].id = _r.ΔⵠⵠⲆᐃ;
    this.ⲆⵠΔ[_r.ᐃⲆⲆⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃⲆⲆΔⲆΔ], nq);
    this.ⲆⵠΔ[_r.ᐃⲆⲆⲆⲆ].id = _r.ᐃⲆⲆⲆⲆ;
    this.ⲆⵠΔ[_r.ⲆᐃⲆΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠⲆⲆⲆⲆΔ], 3);
    this.ⲆⵠΔ[_r.ⲆᐃⲆΔΔ].id = _r.ⲆᐃⲆΔΔ;
    this.ⲆⵠΔ[_r.Ⲇᐃⵠᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆᐃᐃΔⵠΔ], 3);
    this.ⲆⵠΔ[_r.Ⲇᐃⵠᐃⵠ].id = _r.Ⲇᐃⵠᐃⵠ;
    this.ⲆⵠΔ[_r.ⲆⵠᐃΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔᐃΔⲆΔΔ], 3);
    this.ⲆⵠΔ[_r.ⲆⵠᐃΔΔ].id = _r.ⲆⵠᐃΔΔ;
    this.ⲆⵠΔ[_r.ⵠⵠΔⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠⵠⲆⵠᐃⵠ], hl);
    this.ⲆⵠΔ[_r.ⵠⵠΔⵠΔ].id = _r.ⵠⵠΔⵠΔ;
    this.ⲆⵠΔ[_r.ⵠΔⵠⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃⵠⲆⵠᐃΔ], 3);
    this.ⲆⵠΔ[_r.ⵠΔⵠⵠⲆ].id = _r.ⵠΔⵠⵠⲆ;
    this.ⲆⵠΔ[_r.ⲆⵠⵠΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠⵠⵠⵠΔΔ], yr);
    this.ⲆⵠΔ[_r.ⲆⵠⵠΔᐃ].id = _r.ⲆⵠⵠΔᐃ;
    this.ⲆⵠΔ[_r.ᐃⲆⲆⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔᐃⵠⲆⵠᐃ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆⲆⲆᐃ].id = _r.ᐃⲆⲆⲆᐃ;
    this.ⲆⵠΔ[_r.ⵠⵠΔⲆⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠⲆᐃⵠΔⵠ], 3);
    this.ⲆⵠΔ[_r.ⵠⵠΔⲆⵠ].id = _r.ⵠⵠΔⲆⵠ;
    this.ⲆⵠΔ[_r.ΔⵠΔΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆⲆⵠᐃᐃΔ], Ob);
    this.ⲆⵠΔ[_r.ΔⵠΔΔⲆ].id = _r.ΔⵠΔΔⲆ;
    this.ⲆⵠΔ[_r.ᐃⵠⵠΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃⵠᐃᐃΔⲆ], 3);
    this.ⲆⵠΔ[_r.ᐃⵠⵠΔⵠ].id = _r.ᐃⵠⵠΔⵠ;
    this.ⲆⵠΔ[_r.ᐃⲆᐃⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠᐃΔⲆᐃⵠ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆᐃⲆᐃ].id = _r.ᐃⲆᐃⲆᐃ;
    this.ⲆⵠΔ[_r.ⵠΔᐃⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⲆᐃᐃΔⲆ], 3);
    this.ⲆⵠΔ[_r.ⵠΔᐃⲆΔ].id = _r.ⵠΔᐃⲆΔ;
    this.ⲆⵠΔ[_r.ᐃΔⵠⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⲆΔᐃⲆⲆⵠ], 3);
    this.ⲆⵠΔ[_r.ᐃΔⵠⵠⵠ].id = _r.ᐃΔⵠⵠⵠ;
    this.ⲆⵠΔ[_r.ⵠΔᐃΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⲆΔᐃⲆΔΔ], qo);
    this.ⲆⵠΔ[_r.ⵠΔᐃΔΔ].id = _r.ⵠΔᐃΔΔ;
    this.ⲆⵠΔ[_r.ᐃⵠⵠⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔΔΔΔⲆⵠ], ig);
    this.ⲆⵠΔ[_r.ᐃⵠⵠⵠΔ].id = _r.ᐃⵠⵠⵠΔ;
    this.ⲆⵠΔ[_r.ᐃᐃΔⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔΔᐃⲆⵠᐃ], 3);
    this.ⲆⵠΔ[_r.ᐃᐃΔⲆⲆ].id = _r.ᐃᐃΔⲆⲆ;
    this.ⲆⵠΔ[_r.ⵠΔᐃⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⲆᐃΔⵠⵠⲆ], 3);
    this.ⲆⵠΔ[_r.ⵠΔᐃⵠᐃ].id = _r.ⵠΔᐃⵠᐃ;
    this.ⲆⵠΔ[_r.ⵠᐃᐃⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃⲆΔⲆⵠⲆ], Jb);
    this.ⲆⵠΔ[_r.ⵠᐃᐃⵠΔ].id = _r.ⵠᐃᐃⵠΔ;
    this.ⲆⵠΔ[_r.ᐃᐃᐃᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆⲆΔΔⵠⵠ], Tr);
    this.ⲆⵠΔ[_r.ᐃᐃᐃᐃⲆ].id = _r.ᐃᐃᐃᐃⲆ;
    this.ⲆⵠΔ[_r.ⲆⲆΔᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃᐃⲆⵠⲆⲆ], Jb);
    this.ⲆⵠΔ[_r.ⲆⲆΔᐃᐃ].id = _r.ⲆⲆΔᐃᐃ;
    this.ⲆⵠΔ[_r.ⲆᐃΔᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃⲆⵠᐃⵠᐃ], 3);
    this.ⲆⵠΔ[_r.ⲆᐃΔᐃⵠ].id = _r.ⲆᐃΔᐃⵠ;
    this.ⲆⵠΔ[_r.ⲆᐃᐃΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⲆΔⵠⵠᐃ], ea);
    this.ⲆⵠΔ[_r.ⲆᐃᐃΔᐃ].id = _r.ⲆᐃᐃΔᐃ;
    this.ⲆⵠΔ[_r.ⵠᐃᐃΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠⵠΔᐃᐃⲆ], 3);
    this.ⲆⵠΔ[_r.ⵠᐃᐃΔᐃ].id = _r.ⵠᐃᐃΔᐃ;
    this.ⲆⵠΔ[_r.ⲆⵠΔᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠⵠⲆᐃᐃᐃ], 3);
    this.ⲆⵠΔ[_r.ⲆⵠΔᐃⲆ].id = _r.ⲆⵠΔᐃⲆ;
    this.ⲆⵠΔ[_r.ⵠⲆⵠΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔΔᐃΔᐃᐃ], ru);
    this.ⲆⵠΔ[_r.ⵠⲆⵠΔᐃ].id = _r.ⵠⲆⵠΔᐃ;
    this.ⲆⵠΔ[_r.ⵠᐃΔΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⲆⵠΔⲆⵠⵠ], ci);
    this.ⲆⵠΔ[_r.ⵠᐃΔΔᐃ].id = _r.ⵠᐃΔΔᐃ;
    this.ⲆⵠΔ[_r.ⵠⵠΔᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔⲆΔΔⲆⵠ], 3);
    this.ⲆⵠΔ[_r.ⵠⵠΔᐃᐃ].id = _r.ⵠⵠΔᐃᐃ;
    this.ⲆⵠΔ[_r.ΔᐃⲆⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆⵠⵠΔΔᐃ], hl);
    this.ⲆⵠΔ[_r.ΔᐃⲆⵠⲆ].id = _r.ΔᐃⲆⵠⲆ;
    this.ⲆⵠΔ[_r.ΔΔΔⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠⲆⲆΔⲆⲆ], Hk);
    this.ⲆⵠΔ[_r.ΔΔΔⲆΔ].id = _r.ΔΔΔⲆΔ;
    this.ⲆⵠΔ[_r.ⲆΔⵠΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠⲆⲆᐃⵠΔ], yr);
    this.ⲆⵠΔ[_r.ⲆΔⵠΔΔ].id = _r.ⲆΔⵠΔΔ;
    this.ⲆⵠΔ[_r.ᐃᐃΔᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠⵠⲆᐃⵠΔ], ru);
    this.ⲆⵠΔ[_r.ᐃᐃΔᐃΔ].id = _r.ᐃᐃΔᐃΔ;
    this.ⲆⵠΔ[_r.ⲆΔᐃΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃⵠΔⲆⲆⲆ], bb);
    this.ⲆⵠΔ[_r.ⲆΔᐃΔⵠ].id = _r.ⲆΔᐃΔⵠ;
    this.ⲆⵠΔ[_r.ᐃΔᐃΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃⵠᐃΔΔⲆ], yr);
    this.ⲆⵠΔ[_r.ᐃΔᐃΔⲆ].id = _r.ᐃΔᐃΔⲆ;
    this.ⲆⵠΔ[_r.ⲆΔⲆᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠᐃᐃⲆΔⵠ], 3);
    this.ⲆⵠΔ[_r.ⲆΔⲆᐃⲆ].id = _r.ⲆΔⲆᐃⲆ;
    this.ⲆⵠΔ[_r.ᐃᐃⲆᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⲆⵠⵠΔⲆⵠ], Hk);
    this.ⲆⵠΔ[_r.ᐃᐃⲆᐃᐃ].id = _r.ᐃᐃⲆᐃᐃ;
    this.ⲆⵠΔ[_r.ᐃᐃΔᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⵠΔᐃⵠⵠ], 3);
    this.ⲆⵠΔ[_r.ᐃᐃΔᐃⲆ].id = _r.ᐃᐃΔᐃⲆ;
    this.ⲆⵠΔ[_r.ΔΔⲆⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔⲆⲆⵠⵠΔ], yr);
    this.ⲆⵠΔ[_r.ΔΔⲆⵠⲆ].id = _r.ΔΔⲆⵠⲆ;
    this.ⲆⵠΔ[_r.Δᐃᐃⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔⲆΔⲆⵠⲆ], 3);
    this.ⲆⵠΔ[_r.Δᐃᐃⵠⵠ].id = _r.Δᐃᐃⵠⵠ;
    this.ⲆⵠΔ[_r.ΔⲆΔΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠⲆⲆᐃᐃΔ], 3);
    this.ⲆⵠΔ[_r.ΔⲆΔΔΔ].id = _r.ΔⲆΔΔΔ;
    this.ⲆⵠΔ[_r.ⲆⵠΔⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆᐃⲆⲆⵠΔ], Ob);
    this.ⲆⵠΔ[_r.ⲆⵠΔⵠⵠ].id = _r.ⲆⵠΔⵠⵠ;
    this.ⲆⵠΔ[_r.ⵠΔΔᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠⲆΔΔⵠΔ], 3);
    this.ⲆⵠΔ[_r.ⵠΔΔᐃᐃ].id = _r.ⵠΔΔᐃᐃ;
    this.ⲆⵠΔ[_r.ᐃΔⵠᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃᐃΔΔᐃⲆ], bb);
    this.ⲆⵠΔ[_r.ᐃΔⵠᐃⵠ].id = _r.ᐃΔⵠᐃⵠ;
    this.ⲆⵠΔ[_r.ⲆⵠΔⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆᐃΔᐃΔⲆ], 3);
    this.ⲆⵠΔ[_r.ⲆⵠΔⲆⲆ].id = _r.ⲆⵠΔⲆⲆ;
    this.ⲆⵠΔ[_r.ΔᐃⵠⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆⲆΔⲆⲆΔ], 3);
    this.ⲆⵠΔ[_r.ΔᐃⵠⵠΔ].id = _r.ΔᐃⵠⵠΔ;
    this.ⲆⵠΔ[_r.Δⵠᐃᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆᐃⲆⲆΔⲆ], ig);
    this.ⲆⵠΔ[_r.Δⵠᐃᐃᐃ].id = _r.Δⵠᐃᐃᐃ;
    this.ⲆⵠΔ[_r.ΔⵠΔⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠⵠᐃⲆᐃΔ], ig);
    this.ⲆⵠΔ[_r.ΔⵠΔⵠⵠ].id = _r.ΔⵠΔⵠⵠ;
    this.ⲆⵠΔ[_r.ⵠΔⲆΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃᐃΔΔΔᐃ], Hk);
    this.ⲆⵠΔ[_r.ⵠΔⲆΔⲆ].id = _r.ⵠΔⲆΔⲆ;
    this.ⲆⵠΔ[_r.ΔᐃⲆᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠⵠⲆΔⲆΔ], fn);
    this.ⲆⵠΔ[_r.ΔᐃⲆᐃᐃ].id = _r.ΔᐃⲆᐃᐃ;
    this.ⲆⵠΔ[_r.ᐃⲆΔⲆⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃᐃᐃⵠᐃⲆ], I);
    this.ⲆⵠΔ[_r.ᐃⲆΔⲆⵠ].id = _r.ᐃⲆΔⲆⵠ;
    this.ⲆⵠΔ[_r.ⲆᐃᐃⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠᐃᐃΔⵠΔ], 3);
    this.ⲆⵠΔ[_r.ⲆᐃᐃⲆᐃ].id = _r.ⲆᐃᐃⲆᐃ;
    this.ⲆⵠΔ[_r.ⲆⲆⲆⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⲆⵠⵠΔⵠᐃ], gl);
    this.ⲆⵠΔ[_r.ⲆⲆⲆⵠⵠ].id = _r.ⲆⲆⲆⵠⵠ;
    this.ⲆⵠΔ[_r.ΔΔⲆᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔᐃᐃΔΔᐃ], Hk);
    this.ⲆⵠΔ[_r.ΔΔⲆᐃᐃ].id = _r.ΔΔⲆᐃᐃ;
    this.ⲆⵠΔ[_r.ⲆⲆⲆᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⲆⲆⵠⲆⵠ], 3);
    this.ⲆⵠΔ[_r.ⲆⲆⲆᐃΔ].id = _r.ⲆⲆⲆᐃΔ;
    this.ⲆⵠΔ[_r.ᐃᐃⲆⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔⲆⲆᐃΔⲆ], 3);
    this.ⲆⵠΔ[_r.ᐃᐃⲆⵠⵠ].id = _r.ᐃᐃⲆⵠⵠ;
    this.ⲆⵠΔ[_r.Δᐃᐃⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔΔΔⲆᐃΔ], 3);
    this.ⲆⵠΔ[_r.Δᐃᐃⵠᐃ].id = _r.Δᐃᐃⵠᐃ;
    this.ⲆⵠΔ[_r.ΔᐃΔⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠᐃᐃⵠⲆⲆ], vt);
    this.ⲆⵠΔ[_r.ΔᐃΔⲆⲆ].id = _r.ΔᐃΔⲆⲆ;
    this.ⲆⵠΔ[_r.ᐃⲆⲆⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃⲆⲆⲆᐃⲆ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆⲆⵠᐃ].id = _r.ᐃⲆⲆⵠᐃ;
    this.ⲆⵠΔ[_r.ᐃⵠΔΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠⵠΔⲆⵠΔ], fn);
    this.ⲆⵠΔ[_r.ᐃⵠΔΔⲆ].id = _r.ᐃⵠΔΔⲆ;
    this.ⲆⵠΔ[_r.ⵠΔΔΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠᐃΔΔⵠᐃ], fn);
    this.ⲆⵠΔ[_r.ⵠΔΔΔⲆ].id = _r.ⵠΔΔΔⲆ;
    this.ⲆⵠΔ[_r.ⵠⲆᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠᐃⵠΔⲆΔ], 3);
    this.ⲆⵠΔ[_r.ⵠⲆᐃᐃ].id = _r.ⵠⲆᐃᐃ;
    this.ⲆⵠΔ[_r.Ⲇⵠⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃⵠⵠⵠⵠΔ], 3);
    this.ⲆⵠΔ[_r.Ⲇⵠⵠⵠ].id = _r.Ⲇⵠⵠⵠ;
    this.ⲆⵠΔ[_r.ΔⲆᐃⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃΔΔΔΔⵠ], Hk);
    this.ⲆⵠΔ[_r.ΔⲆᐃⵠΔ].id = _r.ΔⲆᐃⵠΔ;
    this.ⲆⵠΔ[_r.ⵠΔᐃᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔΔⲆΔⵠΔ], Tr);
    this.ⲆⵠΔ[_r.ⵠΔᐃᐃⵠ].id = _r.ⵠΔᐃᐃⵠ;
    this.ⲆⵠΔ[_r.ΔⲆⲆⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠΔΔΔⲆΔ], yr);
    this.ⲆⵠΔ[_r.ΔⲆⲆⵠⲆ].id = _r.ΔⲆⲆⵠⲆ;
    this.ⲆⵠΔ[_r.ⲆⵠΔⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔⵠⵠΔⵠⲆ], 3);
    this.ⲆⵠΔ[_r.ⲆⵠΔⵠΔ].id = _r.ⲆⵠΔⵠΔ;
    this.ⲆⵠΔ[_r.ᐃΔⵠⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠⵠᐃⵠⵠⵠ], 3);
    this.ⲆⵠΔ[_r.ᐃΔⵠⲆᐃ].id = _r.ᐃΔⵠⲆᐃ;
    this.ⲆⵠΔ[_r.ⲆᐃΔⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆⲆⵠⵠⲆᐃ], 3);
    this.ⲆⵠΔ[_r.ⲆᐃΔⲆΔ].id = _r.ⲆᐃΔⲆΔ;
    this.ⲆⵠΔ[_r.ⲆⲆⵠⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔⵠⲆⲆⲆᐃ], gl);
    this.ⲆⵠΔ[_r.ⲆⲆⵠⲆⲆ].id = _r.ⲆⲆⵠⲆⲆ;
    this.ⲆⵠΔ[_r.ⵠΔΔΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠᐃᐃⵠⲆΔ], Wg);
    this.ⲆⵠΔ[_r.ⵠΔΔΔⵠ].id = _r.ⵠΔΔΔⵠ;
    this.ⲆⵠΔ[_r.ᐃⵠⵠⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆᐃⲆᐃΔΔ], fn);
    this.ⲆⵠΔ[_r.ᐃⵠⵠⵠᐃ].id = _r.ᐃⵠⵠⵠᐃ;
    this.ⲆⵠΔ[_r.ᐃⵠⲆⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃⵠⲆΔΔⵠ], Ut);
    this.ⲆⵠΔ[_r.ᐃⵠⲆⵠΔ].id = _r.ᐃⵠⲆⵠΔ;
    this.ⲆⵠΔ[_r.ᐃΔⵠⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠⲆⲆⵠᐃⵠ], fn);
    this.ⲆⵠΔ[_r.ᐃΔⵠⵠΔ].id = _r.ᐃΔⵠⵠΔ;
    this.ⲆⵠΔ[_r.ᐃⲆⵠᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠᐃⲆΔⵠⵠ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆⵠᐃᐃ].id = _r.ᐃⲆⵠᐃᐃ;
    this.ⲆⵠΔ[_r.Δⵠᐃⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃᐃΔⵠⵠᐃ], yr);
    this.ⲆⵠΔ[_r.Δⵠᐃⵠᐃ].id = _r.Δⵠᐃⵠᐃ;
    this.ⲆⵠΔ[_r.ᐃⲆⲆΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠⲆᐃⵠⵠΔ], ci);
    this.ⲆⵠΔ[_r.ᐃⲆⲆΔΔ].id = _r.ᐃⲆⲆΔΔ;
    this.ⲆⵠΔ[_r.ⲆΔΔᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆⲆΔⲆⲆⲆ], 3);
    this.ⲆⵠΔ[_r.ⲆΔΔᐃᐃ].id = _r.ⲆΔΔᐃᐃ;
    this.ⲆⵠΔ[_r.ᐃⲆΔⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃΔⲆΔΔᐃ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆΔⲆⲆ].id = _r.ᐃⲆΔⲆⲆ;
    this.ⲆⵠΔ[_r.ⲆⲆⲆᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⲆΔΔⵠⲆ], 3);
    this.ⲆⵠΔ[_r.ⲆⲆⲆᐃⵠ].id = _r.ⲆⲆⲆᐃⵠ;
    this.ⲆⵠΔ[_r.ⵠⵠⲆⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠᐃΔΔᐃᐃ], gl);
    this.ⲆⵠΔ[_r.ⵠⵠⲆⵠᐃ].id = _r.ⵠⵠⲆⵠᐃ;
    this.ⲆⵠΔ[_r.ⵠⵠⲆⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆⵠᐃΔᐃⵠ], hl);
    this.ⲆⵠΔ[_r.ⵠⵠⲆⵠⲆ].id = _r.ⵠⵠⲆⵠⲆ;
    this.ⲆⵠΔ[_r.ᐃⲆᐃⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃⵠⵠᐃⲆΔ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆᐃⵠΔ].id = _r.ᐃⲆᐃⵠΔ;
    this.ⲆⵠΔ[_r.ⲆⲆⵠⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔΔᐃⲆᐃᐃ], Ob);
    this.ⲆⵠΔ[_r.ⲆⲆⵠⵠᐃ].id = _r.ⲆⲆⵠⵠᐃ;
    this.ⲆⵠΔ[_r.ᐃⵠᐃⲆⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔᐃⲆᐃⵠⲆ], 3);
    this.ⲆⵠΔ[_r.ᐃⵠᐃⲆⵠ].id = _r.ᐃⵠᐃⲆⵠ;
    this.ⲆⵠΔ[_r.ⲆⵠᐃᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃΔΔᐃⲆᐃ], 3);
    this.ⲆⵠΔ[_r.ⲆⵠᐃᐃΔ].id = _r.ⲆⵠᐃᐃΔ;
    this.ⲆⵠΔ[_r.ⵠⲆⲆⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃⵠⵠᐃΔᐃ], I);
    this.ⲆⵠΔ[_r.ⵠⲆⲆⵠⵠ].id = _r.ⵠⲆⲆⵠⵠ;
    this.ⲆⵠΔ[_r.ⵠⵠᐃᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃΔᐃⲆΔⲆ], ig);
    this.ⲆⵠΔ[_r.ⵠⵠᐃᐃⲆ].id = _r.ⵠⵠᐃᐃⲆ;
    this.ⲆⵠΔ[_r.ⲆᐃⲆᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠⵠΔᐃᐃᐃ], 3);
    this.ⲆⵠΔ[_r.ⲆᐃⲆᐃⵠ].id = _r.ⲆᐃⲆᐃⵠ;
    this.ⲆⵠΔ[_r.ⵠᐃⵠᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃᐃᐃⲆⵠⲆ], ig);
    this.ⲆⵠΔ[_r.ⵠᐃⵠᐃⵠ].id = _r.ⵠᐃⵠᐃⵠ;
    this.ⲆⵠΔ[_r.ⵠⵠⲆΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⲆᐃᐃᐃⵠ], gl);
    this.ⲆⵠΔ[_r.ⵠⵠⲆΔⲆ].id = _r.ⵠⵠⲆΔⲆ;
    this.ⲆⵠΔ[_r.ⵠᐃᐃⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃⵠᐃᐃΔΔ], yr);
    this.ⲆⵠΔ[_r.ⵠᐃᐃⲆᐃ].id = _r.ⵠᐃᐃⲆᐃ;
    this.ⲆⵠΔ[_r.ΔⵠΔΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔΔᐃΔⲆⲆ], 3);
    this.ⲆⵠΔ[_r.ΔⵠΔΔⵠ].id = _r.ΔⵠΔΔⵠ;
    this.ⲆⵠΔ[_r.ᐃⵠⲆⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠΔΔᐃⵠⵠ], bb);
    this.ⲆⵠΔ[_r.ᐃⵠⲆⵠⲆ].id = _r.ᐃⵠⲆⵠⲆ;
    this.ⲆⵠΔ[_r.ⵠⲆᐃⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠΔⵠⵠⲆⵠ], 3);
    this.ⲆⵠΔ[_r.ⵠⲆᐃⲆΔ].id = _r.ⵠⲆᐃⲆΔ;
    this.ⲆⵠΔ[_r.ⲆⵠΔᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆⵠᐃⵠᐃⵠ], Tr);
    this.ⲆⵠΔ[_r.ⲆⵠΔᐃⵠ].id = _r.ⲆⵠΔᐃⵠ;
    this.ⲆⵠΔ[_r.ΔΔⵠⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.Ⲇᐃᐃⵠᐃᐃⵠ], Ks);
    this.ⲆⵠΔ[_r.ΔΔⵠⲆⲆ].id = _r.ΔΔⵠⲆⲆ;
    this.ⲆⵠΔ[_r.ⲆⲆΔⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃΔⵠᐃⲆΔ], fn);
    this.ⲆⵠΔ[_r.ⲆⲆΔⵠⲆ].id = _r.ⲆⲆΔⵠⲆ;
    this.ⲆⵠΔ[_r.ⵠᐃⲆⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⵠⵠⵠᐃⵠ], gl);
    this.ⲆⵠΔ[_r.ⵠᐃⲆⲆΔ].id = _r.ⵠᐃⲆⲆΔ;
    this.ⲆⵠΔ[_r.ᐃⵠⵠᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠⵠᐃΔⲆΔ], 3);
    this.ⲆⵠΔ[_r.ᐃⵠⵠᐃⵠ].id = _r.ᐃⵠⵠᐃⵠ;
    this.ⲆⵠΔ[_r.ⲆⲆΔⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔⵠⵠⲆΔⵠ], 3);
    this.ⲆⵠΔ[_r.ⲆⲆΔⲆᐃ].id = _r.ⲆⲆΔⲆᐃ;
    this.ⲆⵠΔ[_r.ΔᐃᐃⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔᐃⵠⵠᐃⲆ], I);
    this.ⲆⵠΔ[_r.ΔᐃᐃⵠΔ].id = _r.ΔᐃᐃⵠΔ;
    this.ⲆⵠΔ[_r.ᐃⲆⵠΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃⵠⲆΔⵠᐃ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆⵠΔᐃ].id = _r.ᐃⲆⵠΔᐃ;
    this.ⲆⵠΔ[_r.ᐃΔΔΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠⲆᐃΔⵠᐃ], 3);
    this.ⲆⵠΔ[_r.ᐃΔΔΔΔ].id = _r.ᐃΔΔΔΔ;
    this.ⲆⵠΔ[_r.ⲆΔΔⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠᐃᐃᐃΔᐃ], bb);
    this.ⲆⵠΔ[_r.ⲆΔΔⵠⵠ].id = _r.ⲆΔΔⵠⵠ;
    this.ⲆⵠΔ[_r.ⵠᐃⵠᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆΔⲆΔᐃΔ], Jb);
    this.ⲆⵠΔ[_r.ⵠᐃⵠᐃΔ].id = _r.ⵠᐃⵠᐃΔ;
    this.ⲆⵠΔ[_r.ⵠᐃⲆⲆⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃⵠΔΔΔⲆ], Hk);
    this.ⲆⵠΔ[_r.ⵠᐃⲆⲆⵠ].id = _r.ⵠᐃⲆⲆⵠ;
    this.ⲆⵠΔ[_r.ᐃⵠᐃΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃⵠΔΔⵠΔ], Wg);
    this.ⲆⵠΔ[_r.ᐃⵠᐃΔⵠ].id = _r.ᐃⵠᐃΔⵠ;
    this.ⲆⵠΔ[_r.ΔᐃΔⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆᐃⲆⲆⵠⲆ], nq);
    this.ⲆⵠΔ[_r.ΔᐃΔⲆᐃ].id = _r.ΔᐃΔⲆᐃ;
    this.ⲆⵠΔ[_r.ⲆΔᐃΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃⵠᐃⲆⵠⵠ], 3);
    this.ⲆⵠΔ[_r.ⲆΔᐃΔⲆ].id = _r.ⲆΔᐃΔⲆ;
    this.ⲆⵠΔ[_r.ᐃⵠᐃⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆⵠⵠⵠΔⵠ], bb);
    this.ⲆⵠΔ[_r.ᐃⵠᐃⵠᐃ].id = _r.ᐃⵠᐃⵠᐃ;
    this.ⲆⵠΔ[_r.ⲆΔᐃΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔᐃᐃᐃⲆⵠ], 3);
    this.ⲆⵠΔ[_r.ⲆΔᐃΔΔ].id = _r.ⲆΔᐃΔΔ;
    this.ⲆⵠΔ[_r.ⲆᐃᐃⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⵠΔᐃⵠᐃ], gl);
    this.ⲆⵠΔ[_r.ⲆᐃᐃⵠΔ].id = _r.ⲆᐃᐃⵠΔ;
    this.ⲆⵠΔ[_r.ⲆΔΔᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔᐃⵠⲆⵠΔ], ci);
    this.ⲆⵠΔ[_r.ⲆΔΔᐃⵠ].id = _r.ⲆΔΔᐃⵠ;
    this.ⲆⵠΔ[_r.ⵠΔⲆⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔΔΔΔⵠΔ], 3);
    this.ⲆⵠΔ[_r.ⵠΔⲆⲆΔ].id = _r.ⵠΔⲆⲆΔ;
    this.ⲆⵠΔ[_r.ᐃⵠⵠⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃΔᐃΔᐃΔ], 3);
    this.ⲆⵠΔ[_r.ᐃⵠⵠⲆΔ].id = _r.ᐃⵠⵠⲆΔ;
    this.ⲆⵠΔ[_r.ᐃⲆⵠⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃΔⵠΔⵠᐃ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆⵠⲆⲆ].id = _r.ᐃⲆⵠⲆⲆ;
    this.ⲆⵠΔ[_r.ᐃᐃΔⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⵠΔᐃⵠⲆ], ea);
    this.ⲆⵠΔ[_r.ᐃᐃΔⵠΔ].id = _r.ᐃᐃΔⵠΔ;
    this.ⲆⵠΔ[_r.ⵠᐃⲆⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔᐃᐃⲆᐃΔ], 3);
    this.ⲆⵠΔ[_r.ⵠᐃⲆⲆᐃ].id = _r.ⵠᐃⲆⲆᐃ;
    this.ⲆⵠΔ[_r.ⲆⵠΔⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔΔΔᐃⵠⵠ], ig);
    this.ⲆⵠΔ[_r.ⲆⵠΔⲆΔ].id = _r.ⲆⵠΔⲆΔ;
    this.ⲆⵠΔ[_r.ΔΔᐃⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔΔⵠⵠⵠΔ], 3);
    this.ⲆⵠΔ[_r.ΔΔᐃⵠⲆ].id = _r.ΔΔᐃⵠⲆ;
    this.ⲆⵠΔ[_r.ⵠⲆΔⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠᐃⵠⵠΔⲆ], 3);
    this.ⲆⵠΔ[_r.ⵠⲆΔⲆᐃ].id = _r.ⵠⲆΔⲆᐃ;
    this.ⲆⵠΔ[_r.ⵠᐃΔⲆⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠᐃⵠⲆⵠᐃ], 3);
    this.ⲆⵠΔ[_r.ⵠᐃΔⲆⵠ].id = _r.ⵠᐃΔⲆⵠ;
    this.ⲆⵠΔ[_r.ᐃᐃΔΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃⵠⲆⵠⲆΔ], ea);
    this.ⲆⵠΔ[_r.ᐃᐃΔΔⵠ].id = _r.ᐃᐃΔΔⵠ;
    this.ⲆⵠΔ[_r.ΔΔΔⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⵠᐃᐃⵠᐃ], bb);
    this.ⲆⵠΔ[_r.ΔΔΔⵠⵠ].id = _r.ΔΔΔⵠⵠ;
    this.ⲆⵠΔ[_r.ᐃΔΔΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠⵠᐃᐃⲆⵠ], 3);
    this.ⲆⵠΔ[_r.ᐃΔΔΔⲆ].id = _r.ᐃΔΔΔⲆ;
    this.ⲆⵠΔ[_r.Δᐃᐃᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃᐃⵠⲆⵠⲆ], Jb);
    this.ⲆⵠΔ[_r.Δᐃᐃᐃᐃ].id = _r.Δᐃᐃᐃᐃ;
    this.ⲆⵠΔ[_r.ⲆⲆΔⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃⲆΔᐃᐃⵠ], qo);
    this.ⲆⵠΔ[_r.ⲆⲆΔⵠⵠ].id = _r.ⲆⲆΔⵠⵠ;
    this.ⲆⵠΔ[_r.ᐃⵠΔᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆⵠᐃᐃⵠⲆ], 3);
    this.ⲆⵠΔ[_r.ᐃⵠΔᐃΔ].id = _r.ᐃⵠΔᐃΔ;
    this.ⲆⵠΔ[_r.ⵠᐃᐃΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠⵠⵠᐃᐃⵠ], ig);
    this.ⲆⵠΔ[_r.ⵠᐃᐃΔⵠ].id = _r.ⵠᐃᐃΔⵠ;
    this.ⲆⵠΔ[_r.ᐃⲆΔᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃΔⵠⲆΔΔ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆΔᐃᐃ].id = _r.ᐃⲆΔᐃᐃ;
    this.ⲆⵠΔ[_r.ⵠᐃΔⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆΔⲆⵠΔᐃ], I);
    this.ⲆⵠΔ[_r.ⵠᐃΔⵠΔ].id = _r.ⵠᐃΔⵠΔ;
    this.ⲆⵠΔ[_r.ΔⲆᐃᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠᐃⲆᐃᐃⵠ], Ob);
    this.ⲆⵠΔ[_r.ΔⲆᐃᐃⲆ].id = _r.ΔⲆᐃᐃⲆ;
    this.ⲆⵠΔ[_r.ⲆⲆΔⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⲆⲆᐃⲆⲆ], qo);
    this.ⲆⵠΔ[_r.ⲆⲆΔⲆΔ].id = _r.ⲆⲆΔⲆΔ;
    this.ⲆⵠΔ[_r.ᐃⲆΔⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⵠⵠᐃΔᐃ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆΔⵠⵠ].id = _r.ᐃⲆΔⵠⵠ;
    this.ⲆⵠΔ[_r.ΔᐃΔᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⲆΔΔᐃΔ], Ks);
    this.ⲆⵠΔ[_r.ΔᐃΔᐃⵠ].id = _r.ΔᐃΔᐃⵠ;
    this.ⲆⵠΔ[_r.ⵠⲆⲆΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔᐃⵠᐃᐃΔ], 3);
    this.ⲆⵠΔ[_r.ⵠⲆⲆΔᐃ].id = _r.ⵠⲆⲆΔᐃ;
    this.ⲆⵠΔ[_r.ⵠᐃⵠⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠⲆᐃⲆⵠΔ], 3);
    this.ⲆⵠΔ[_r.ⵠᐃⵠⵠΔ].id = _r.ⵠᐃⵠⵠΔ;
    this.ⲆⵠΔ[_r.ΔΔⲆⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆᐃⲆᐃⵠΔ], nq);
    this.ⲆⵠΔ[_r.ΔΔⲆⲆᐃ].id = _r.ΔΔⲆⲆᐃ;
    this.ⲆⵠΔ[_r.ⲆⲆᐃᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⲆⵠᐃΔᐃᐃ], 3);
    this.ⲆⵠΔ[_r.ⲆⲆᐃᐃΔ].id = _r.ⲆⲆᐃᐃΔ;
    this.ⲆⵠΔ[_r.ⲆΔⵠⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⲆⵠⲆᐃΔΔ], Ks);
    this.ⲆⵠΔ[_r.ⲆΔⵠⵠᐃ].id = _r.ⲆΔⵠⵠᐃ;
    this.ⲆⵠΔ[_r.ΔᐃⲆⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔΔⲆⲆΔΔ], 3);
    this.ⲆⵠΔ[_r.ΔᐃⲆⵠⵠ].id = _r.ΔᐃⲆⵠⵠ;
    this.ⲆⵠΔ[_r.ᐃΔΔⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆⲆΔΔⲆΔ], qo);
    this.ⲆⵠΔ[_r.ᐃΔΔⲆΔ].id = _r.ᐃΔΔⲆΔ;
    this.ⲆⵠΔ[_r.ⵠⲆΔᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃᐃⲆᐃΔᐃ], Tr);
    this.ⲆⵠΔ[_r.ⵠⲆΔᐃᐃ].id = _r.ⵠⲆΔᐃᐃ;
    this.ⲆⵠΔ[_r.ΔᐃⵠⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠⲆⵠᐃᐃⲆ], ig);
    this.ⲆⵠΔ[_r.ΔᐃⵠⲆΔ].id = _r.ΔᐃⵠⲆΔ;
    this.ⲆⵠΔ[_r.ΔΔᐃⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃΔᐃⵠΔⲆ], 3);
    this.ⲆⵠΔ[_r.ΔΔᐃⲆΔ].id = _r.ΔΔᐃⲆΔ;
    this.ⲆⵠΔ[_r.ΔΔᐃΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆᐃᐃΔⵠⲆ], Tr);
    this.ⲆⵠΔ[_r.ΔΔᐃΔΔ].id = _r.ΔΔᐃΔΔ;
    this.ⲆⵠΔ[_r.ⲆΔⵠΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔᐃᐃᐃᐃⵠ], 3);
    this.ⲆⵠΔ[_r.ⲆΔⵠΔᐃ].id = _r.ⲆΔⵠΔᐃ;
    this.ⲆⵠΔ[_r.ⲆⵠⲆⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔⵠΔⲆᐃΔ], Ut);
    this.ⲆⵠΔ[_r.ⲆⵠⲆⵠⵠ].id = _r.ⲆⵠⲆⵠⵠ;
    this.ⲆⵠΔ[_r.ⵠΔᐃᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔᐃΔΔΔⲆ], 3);
    this.ⲆⵠΔ[_r.ⵠΔᐃᐃᐃ].id = _r.ⵠΔᐃᐃᐃ;
    this.ⲆⵠΔ[_r.ᐃⵠᐃᐃⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔⲆⵠΔⲆΔ], 3);
    this.ⲆⵠΔ[_r.ᐃⵠᐃᐃⵠ].id = _r.ᐃⵠᐃᐃⵠ;
    this.ⲆⵠΔ[_r.ⵠᐃⵠΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠΔⲆΔⲆⵠ], 3);
    this.ⲆⵠΔ[_r.ⵠᐃⵠΔⵠ].id = _r.ⵠᐃⵠΔⵠ;
    this.ⲆⵠΔ[_r.ⲆᐃⵠΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⲆⲆΔᐃᐃ], ig);
    this.ⲆⵠΔ[_r.ⲆᐃⵠΔΔ].id = _r.ⲆᐃⵠΔΔ;
    this.ⲆⵠΔ[_r.ⲆⲆΔⲆⵠ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔⵠΔᐃΔΔ], 3);
    this.ⲆⵠΔ[_r.ⲆⲆΔⲆⵠ].id = _r.ⲆⲆΔⲆⵠ;
    this.ⲆⵠΔ[_r.ⲆᐃΔᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠⵠΔⲆΔⲆ], Hk);
    this.ⲆⵠΔ[_r.ⲆᐃΔᐃΔ].id = _r.ⲆᐃΔᐃΔ;
    this.ⲆⵠΔ[_r.ᐃⲆⲆᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆᐃᐃⲆⵠⵠ], vt);
    this.ⲆⵠΔ[_r.ᐃⲆⲆᐃΔ].id = _r.ᐃⲆⲆᐃΔ;
    this.ⲆⵠΔ[_r.ᐃⲆᐃᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆΔⲆⵠⲆⵠ], nq);
    this.ⲆⵠΔ[_r.ᐃⲆᐃᐃΔ].id = _r.ᐃⲆᐃᐃΔ;
    this.ⲆⵠΔ[_r.ᐃⵠΔΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠᐃᐃⲆΔΔ], Ut);
    this.ⲆⵠΔ[_r.ᐃⵠΔΔΔ].id = _r.ᐃⵠΔΔΔ;
    this.ⲆⵠΔ[_r.ⲆᐃΔΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠΔΔΔΔⵠ], Ob);
    this.ⲆⵠΔ[_r.ⲆᐃΔΔⵠ].id = _r.ⲆᐃΔΔⵠ;
    this.ⲆⵠΔ[_r.ⲆⵠΔᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆⲆΔⲆΔⵠ], 3);
    this.ⲆⵠΔ[_r.ⲆⵠΔᐃᐃ].id = _r.ⲆⵠΔᐃᐃ;
    this.ⲆⵠΔ[_r.ⲆᐃΔⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔⵠᐃⲆⵠⲆ], qo);
    this.ⲆⵠΔ[_r.ⲆᐃΔⵠᐃ].id = _r.ⲆᐃΔⵠᐃ;
    this.ⲆⵠΔ[_r.ⲆΔⲆⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠⵠⲆⵠᐃⵠ], gl);
    this.ⲆⵠΔ[_r.ⲆΔⲆⵠΔ].id = _r.ⲆΔⲆⵠΔ;
    this.ⲆⵠΔ[_r.ⲆᐃⵠΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⵠᐃΔⲆⲆ], ci);
    this.ⲆⵠΔ[_r.ⲆᐃⵠΔⲆ].id = _r.ⲆᐃⵠΔⲆ;
    this.ⲆⵠΔ[_r.ΔⵠⵠΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔᐃᐃⵠⵠⵠ], 3);
    this.ⲆⵠΔ[_r.ΔⵠⵠΔⲆ].id = _r.ΔⵠⵠΔⲆ;
    this.ⲆⵠΔ[_r.ⵠΔᐃⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃΔⲆⲆⵠⲆ], 3);
    this.ⲆⵠΔ[_r.ⵠΔᐃⵠⲆ].id = _r.ⵠΔᐃⵠⲆ;
    this.ⲆⵠΔ[_r.ᐃᐃⵠⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆⵠⲆΔᐃⲆ], 3);
    this.ⲆⵠΔ[_r.ᐃᐃⵠⲆⲆ].id = _r.ᐃᐃⵠⲆⲆ;
    this.ⲆⵠΔ[_r.ΔⲆΔⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⲆⲆⲆⲆⲆ], ru);
    this.ⲆⵠΔ[_r.ΔⲆΔⲆⲆ].id = _r.ΔⲆΔⲆⲆ;
    this.ⲆⵠΔ[_r.ᐃᐃΔⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔΔᐃⲆⵠᐃ], Ks);
    this.ⲆⵠΔ[_r.ᐃᐃΔⲆⲆ].id = _r.ᐃᐃΔⲆⲆ;
    this.ⲆⵠΔ[_r.ⲆⲆΔᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃᐃⲆⵠⲆⲆ], 3);
    this.ⲆⵠΔ[_r.ⲆⲆΔᐃᐃ].id = _r.ⲆⲆΔᐃᐃ;
    this.ⲆⵠΔ[_r.ⲆⵠᐃΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆᐃᐃΔᐃⵠ], yr);
    this.ⲆⵠΔ[_r.ⲆⵠᐃΔᐃ].id = _r.ⲆⵠᐃΔᐃ;
    this.ⲆⵠΔ[_r.Ⲇᐃᐃᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⲆⵠΔΔⲆⵠ], 3);
    this.ⲆⵠΔ[_r.Ⲇᐃᐃᐃᐃ].id = _r.Ⲇᐃᐃᐃᐃ;
    this.ⲆⵠΔ[_r.ⵠⲆⵠᐃᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃⵠⵠⲆⵠⲆ], ig);
    this.ⲆⵠΔ[_r.ⵠⲆⵠᐃᐃ].id = _r.ⵠⲆⵠᐃᐃ;
    this.ⲆⵠΔ[_r.ΔⲆⵠΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠΔᐃⲆΔΔ], 3);
    this.ⲆⵠΔ[_r.ΔⲆⵠΔΔ].id = _r.ΔⲆⵠΔΔ;
    this.ⲆⵠΔ[_r.ⲆⲆΔΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠᐃⲆΔΔⵠ], Jb);
    this.ⲆⵠΔ[_r.ⲆⲆΔΔⵠ].id = _r.ⲆⲆΔΔⵠ;
    this.ⲆⵠΔ[_r.ⵠᐃΔⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠᐃⵠΔⵠᐃ], Ob);
    this.ⲆⵠΔ[_r.ⵠᐃΔⲆⲆ].id = _r.ⵠᐃΔⲆⲆ;
    this.ⲆⵠΔ[_r.ᐃΔᐃⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃⲆⵠⲆΔⲆ], ea);
    this.ⲆⵠΔ[_r.ᐃΔᐃⵠⵠ].id = _r.ᐃΔᐃⵠⵠ;
    this.ⲆⵠΔ[_r.ⲆⵠⲆⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆᐃᐃⵠⲆⲆ], ru);
    this.ⲆⵠΔ[_r.ⲆⵠⲆⲆΔ].id = _r.ⲆⵠⲆⲆΔ;
    this.ⲆⵠᐃΔⲆ = [];
    for (n = 0; n < 250; n++) {
      this.ⲆⵠᐃΔⲆ[n] = aw(0, Da, 0, ΔΔ[Xr.ΔᐃⲆΔⲆΔⲆ]);
    }
    this.ᐃᐃᐃ = [];
    this.ᐃᐃᐃ[_r.ᐃᐃⲆΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⲆᐃᐃΔΔ], Ob);
    this.ᐃᐃᐃ[_r.ᐃᐃⲆΔⲆ].id = _r.ᐃᐃⲆΔⲆ;
    this.ᐃᐃᐃ[_r.ⲆⵠⵠⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆᐃΔᐃᐃΔ], 3);
    this.ᐃᐃᐃ[_r.ⲆⵠⵠⲆⲆ].id = _r.ⲆⵠⵠⲆⲆ;
    this.ᐃᐃᐃ[_r.ᐃΔⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⵠⲆⲆⲆᐃ], bb);
    this.ᐃᐃᐃ[_r.ᐃΔⵠⲆ].id = _r.ᐃΔⵠⲆ;
    this.ᐃᐃᐃ[_r.ᐃΔⵠⲆ].info.ⵠⵠ[bs] = this.ᐃᐃᐃ[_r.ᐃΔⵠⲆ].info.ⵠⵠ[Lr];
    this.ᐃᐃᐃ[_r.ⵠᐃⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⵠΔΔᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃⵠⵠ].id = _r.ⵠᐃⵠⵠ;
    this.ᐃᐃᐃ[_r.ⵠᐃⵠⵠ].info.ⵠⵠ[Zg] = this.ᐃᐃᐃ[_r.ⵠᐃⵠⵠ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ⵠᐃⲆⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔⲆⲆⲆᐃ], Hk);
    this.ᐃᐃᐃ[_r.ⵠᐃⲆⲆⲆ].id = _r.ⵠᐃⲆⲆⲆ;
    this.ᐃᐃᐃ[_r.ⵠⵠⵠΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆΔΔΔΔᐃ], 3);
    this.ᐃᐃᐃ[_r.ⵠⵠⵠΔⲆ].id = _r.ⵠⵠⵠΔⲆ;
    this.ᐃᐃᐃ[_r.ᐃⲆⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆΔΔⵠⲆΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃⲆⵠᐃ].id = _r.ᐃⲆⵠᐃ;
    this.ᐃᐃᐃ[_r.ᐃⲆⵠᐃ].info.ⵠⵠ[dg] = this.ᐃᐃᐃ[_r.ᐃⲆⵠᐃ].info.ⵠⵠ[tg];
    this.ᐃᐃᐃ[_r.ᐃⲆΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆΔⵠᐃΔⲆ], Ut);
    this.ᐃᐃᐃ[_r.ᐃⲆΔⵠ].id = _r.ᐃⲆΔⵠ;
    this.ᐃᐃᐃ[_r.ᐃⲆΔⵠ].info.ⵠⵠ[Hj] = this.ᐃᐃᐃ[_r.ᐃⲆΔⵠ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ⵠᐃⲆΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔΔⲆⵠᐃ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃⲆΔΔ].id = _r.ⵠᐃⲆΔΔ;
    this.ᐃᐃᐃ[_r.ᐃⲆⵠΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⲆⲆⲆⲆᐃ], fn);
    this.ᐃᐃᐃ[_r.ᐃⲆⵠΔⲆ].id = _r.ᐃⲆⵠΔⲆ;
    this.ᐃᐃᐃ[_r.ⵠΔΔΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔᐃΔⲆΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ⵠΔΔΔΔ].id = _r.ⵠΔΔΔΔ;
    this.ᐃᐃᐃ[_r.ΔⵠᐃΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔΔⵠⲆⲆ], ru);
    this.ᐃᐃᐃ[_r.ΔⵠᐃΔᐃ].id = _r.ΔⵠᐃΔᐃ;
    this.ᐃᐃᐃ[_r.ᐃΔⲆᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⵠᐃᐃⵠᐃ], yr);
    this.ᐃᐃᐃ[_r.ᐃΔⲆᐃΔ].id = _r.ᐃΔⲆᐃΔ;
    this.ᐃᐃᐃ[_r.ΔᐃᐃⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠⲆⵠΔⲆ], vt);
    this.ᐃᐃᐃ[_r.ΔᐃᐃⲆⲆ].id = _r.ΔᐃᐃⲆⲆ;
    this.ᐃᐃᐃ[_r.ⵠⲆΔⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆᐃⵠᐃⵠᐃ], 3);
    this.ᐃᐃᐃ[_r.ⵠⲆΔⵠᐃ].id = _r.ⵠⲆΔⵠᐃ;
    this.ᐃᐃᐃ[_r.ⵠᐃΔⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔⵠⲆᐃⲆᐃ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃΔⲆᐃ].id = _r.ⵠᐃΔⲆᐃ;
    this.ᐃᐃᐃ[_r.ⲆⲆⲆⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆⲆᐃᐃΔ], Ks);
    this.ᐃᐃᐃ[_r.ⲆⲆⲆⲆⵠ].id = _r.ⲆⲆⲆⲆⵠ;
    this.ᐃᐃᐃ[_r.ⵠⵠΔⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔᐃᐃⲆⲆΔ], 3);
    this.ᐃᐃᐃ[_r.ⵠⵠΔⵠⲆ].id = _r.ⵠⵠΔⵠⲆ;
    this.ᐃᐃᐃ[_r.ⲆΔⲆⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔⲆᐃᐃⵠ], Wg);
    this.ᐃᐃᐃ[_r.ⲆΔⲆⲆⵠ].id = _r.ⲆΔⲆⲆⵠ;
    this.ᐃᐃᐃ[_r.ΔΔⵠⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⲆⲆⲆΔᐃ], nq);
    this.ᐃᐃᐃ[_r.ΔΔⵠⵠⲆ].id = _r.ΔΔⵠⵠⲆ;
    this.ᐃᐃᐃ[_r.ⵠⵠᐃᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⲆΔΔΔⵠ], qo);
    this.ᐃᐃᐃ[_r.ⵠⵠᐃᐃⵠ].id = _r.ⵠⵠᐃᐃⵠ;
    this.ᐃᐃᐃ[_r.ᐃΔΔⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⵠⲆⲆⵠΔ], bb);
    this.ᐃᐃᐃ[_r.ᐃΔΔⵠΔ].id = _r.ᐃΔΔⵠΔ;
    this.ᐃᐃᐃ[_r.ᐃΔᐃⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆΔⲆΔᐃΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔᐃⲆᐃ].id = _r.ᐃΔᐃⲆᐃ;
    this.ᐃᐃᐃ[_r.ᐃΔⵠᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠΔΔΔᐃᐃ], I);
    this.ᐃᐃᐃ[_r.ᐃΔⵠᐃⲆ].id = _r.ᐃΔⵠᐃⲆ;
    this.ᐃᐃᐃ[_r.ᐃΔⵠᐃⲆ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ᐃΔⵠᐃⲆ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ΔᐃⵠⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔΔⵠⲆⲆ], Hk);
    this.ᐃᐃᐃ[_r.ΔᐃⵠⲆⲆ].id = _r.ΔᐃⵠⲆⲆ;
    this.ᐃᐃᐃ[_r.ᐃᐃᐃᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.Δⵠᐃⵠⵠᐃᐃ], ea);
    this.ᐃᐃᐃ[_r.ᐃᐃᐃᐃᐃ].id = _r.ᐃᐃᐃᐃᐃ;
    this.ᐃᐃᐃ[_r.ⵠᐃⲆᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⵠⵠⵠⵠᐃ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃⲆᐃⵠ].id = _r.ⵠᐃⲆᐃⵠ;
    this.ᐃᐃᐃ[_r.ΔⵠⵠⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⵠⵠⲆΔⵠ], fn);
    this.ᐃᐃᐃ[_r.ΔⵠⵠⲆᐃ].id = _r.ΔⵠⵠⲆᐃ;
    this.ᐃᐃᐃ[_r.ᐃⲆⲆⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⲆⲆᐃⵠᐃ], ea);
    this.ᐃᐃᐃ[_r.ᐃⲆⲆⲆⲆ].id = _r.ᐃⲆⲆⲆⲆ;
    this.ᐃᐃᐃ[_r.ⲆᐃⲆΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔᐃⲆᐃΔⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆᐃⲆΔΔ].id = _r.ⲆᐃⲆΔΔ;
    this.ᐃᐃᐃ[_r.Ⲇᐃⵠᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔⲆᐃⲆⲆΔ], 3);
    this.ᐃᐃᐃ[_r.Ⲇᐃⵠᐃⵠ].id = _r.Ⲇᐃⵠᐃⵠ;
    this.ᐃᐃᐃ[_r.ⲆⵠᐃΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⵠⵠΔⵠΔ], 3);
    this.ᐃᐃᐃ[_r.ⲆⵠᐃΔΔ].id = _r.ⲆⵠᐃΔΔ;
    this.ᐃᐃᐃ[_r.ⵠⲆᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠⵠⵠⵠΔ], ig);
    this.ᐃᐃᐃ[_r.ⵠⲆᐃᐃ].id = _r.ⵠⲆᐃᐃ;
    this.ᐃᐃᐃ[_r.ᐃⲆᐃⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⵠⲆⵠᐃⲆ], gl);
    this.ᐃᐃᐃ[_r.ᐃⲆᐃⲆᐃ].id = _r.ᐃⲆᐃⲆᐃ;
    this.ᐃᐃᐃ[_r.ⵠΔᐃⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⵠⵠᐃⲆⵠ], 3);
    this.ᐃᐃᐃ[_r.ⵠΔᐃⲆΔ].id = _r.ⵠΔᐃⲆΔ;
    this.ᐃᐃᐃ[_r.ᐃΔⵠⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆᐃΔⲆⵠᐃ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔⵠⵠⵠ].id = _r.ᐃΔⵠⵠⵠ;
    this.ᐃᐃᐃ[_r.ⵠΔᐃΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔΔⵠΔⵠⲆ], 3);
    this.ᐃᐃᐃ[_r.ⵠΔᐃΔΔ].id = _r.ⵠΔᐃΔΔ;
    this.ᐃᐃᐃ[_r.ⵠⵠΔⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆᐃΔΔᐃᐃ], 3);
    this.ᐃᐃᐃ[_r.ⵠⵠΔⵠΔ].id = _r.ⵠⵠΔⵠΔ;
    this.ᐃᐃᐃ[_r.ⵠⵠΔⵠΔ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ⵠⵠΔⵠΔ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ⵠΔⵠⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔᐃΔⵠⲆΔ], Ks);
    this.ᐃᐃᐃ[_r.ⵠΔⵠⵠⲆ].id = _r.ⵠΔⵠⵠⲆ;
    this.ᐃᐃᐃ[_r.ⵠΔⵠⵠⲆ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ⵠΔⵠⵠⲆ].info.ⵠⵠ[zl];
    this.ᐃᐃᐃ[_r.ⲆⵠⵠΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆᐃⵠⲆᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆⵠⵠΔᐃ].id = _r.ⲆⵠⵠΔᐃ;
    this.ᐃᐃᐃ[_r.ⲆⵠⵠΔᐃ].info.ⵠⵠ[H] = this.ᐃᐃᐃ[_r.ⲆⵠⵠΔᐃ].info.ⵠⵠ[Pg];
    this.ᐃᐃᐃ[_r.ᐃⲆⲆⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⵠᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃⲆⲆⲆᐃ].id = _r.ᐃⲆⲆⲆᐃ;
    this.ᐃᐃᐃ[_r.ⵠⵠΔⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆΔⵠᐃ], fn);
    this.ᐃᐃᐃ[_r.ⵠⵠΔⲆⵠ].id = _r.ⵠⵠΔⲆⵠ;
    this.ᐃᐃᐃ[_r.ΔⵠΔΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆΔⵠⲆ], Ks);
    this.ᐃᐃᐃ[_r.ΔⵠΔΔⲆ].id = _r.ΔⵠΔΔⲆ;
    this.ᐃᐃᐃ[_r.ᐃⵠⵠΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔⵠⵠⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠⵠΔⵠ].id = _r.ᐃⵠⵠΔⵠ;
    this.ᐃᐃᐃ[_r.ᐃⲆᐃⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⵠⲆⵠᐃⲆ], 3);
    this.ᐃᐃᐃ[_r.ᐃⲆᐃⲆᐃ].id = _r.ᐃⲆᐃⲆᐃ;
    this.ᐃᐃᐃ[_r.ᐃⵠⵠⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⵠᐃΔⵠⵠ], ea);
    this.ᐃᐃᐃ[_r.ᐃⵠⵠⵠΔ].id = _r.ᐃⵠⵠⵠΔ;
    this.ᐃᐃᐃ[_r.ᐃᐃΔⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆΔᐃⲆⵠΔ], fn);
    this.ᐃᐃᐃ[_r.ᐃᐃΔⲆⲆ].id = _r.ᐃᐃΔⲆⲆ;
    this.ᐃᐃᐃ[_r.ⵠΔᐃⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠΔΔΔΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ⵠΔᐃⵠᐃ].id = _r.ⵠΔᐃⵠᐃ;
    this.ᐃᐃᐃ[_r.ⵠᐃᐃⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠΔⲆⵠᐃ], bb);
    this.ᐃᐃᐃ[_r.ⵠᐃᐃⵠΔ].id = _r.ⵠᐃᐃⵠΔ;
    this.ᐃᐃᐃ[_r.ᐃᐃᐃᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃⵠΔᐃΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃᐃᐃᐃⲆ].id = _r.ᐃᐃᐃᐃⲆ;
    this.ᐃᐃᐃ[_r.ⲆⲆΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆΔⵠⲆⲆᐃ], Tr);
    this.ᐃᐃᐃ[_r.ⲆⲆΔᐃᐃ].id = _r.ⲆⲆΔᐃᐃ;
    this.ᐃᐃᐃ[_r.ⲆᐃΔᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆΔᐃᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆᐃΔᐃⵠ].id = _r.ⲆᐃΔᐃⵠ;
    this.ᐃᐃᐃ[_r.ⲆᐃᐃΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠΔΔⵠⵠΔ], Tr);
    this.ᐃᐃᐃ[_r.ⲆᐃᐃΔᐃ].id = _r.ⲆᐃᐃΔᐃ;
    this.ᐃᐃᐃ[_r.ⵠᐃᐃΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠⲆΔⵠⲆ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃᐃΔᐃ].id = _r.ⵠᐃᐃΔᐃ;
    this.ᐃᐃᐃ[_r.ⲆⵠΔᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔΔΔⲆᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆⵠΔᐃⲆ].id = _r.ⲆⵠΔᐃⲆ;
    this.ᐃᐃᐃ[_r.ⵠⲆⵠΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔᐃⵠⵠΔⲆ], ru);
    this.ᐃᐃᐃ[_r.ⵠⲆⵠΔᐃ].id = _r.ⵠⲆⵠΔᐃ;
    this.ᐃᐃᐃ[_r.ⵠᐃΔΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⲆᐃⵠⵠⵠ], Ks);
    this.ᐃᐃᐃ[_r.ⵠᐃΔΔᐃ].id = _r.ⵠᐃΔΔᐃ;
    this.ᐃᐃᐃ[_r.ⵠⵠΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔⵠΔⲆⲆΔ], 3);
    this.ᐃᐃᐃ[_r.ⵠⵠΔᐃᐃ].id = _r.ⵠⵠΔᐃᐃ;
    this.ᐃᐃᐃ[_r.ΔΔΔⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆΔⲆⵠⲆΔ], 3);
    this.ᐃᐃᐃ[_r.ΔΔΔⲆΔ].id = _r.ΔΔΔⲆΔ;
    this.ᐃᐃᐃ[_r.ΔᐃⲆⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔΔⲆⲆⵠ], ea);
    this.ᐃᐃᐃ[_r.ΔᐃⲆⵠⲆ].id = _r.ΔᐃⲆⵠⲆ;
    this.ᐃᐃᐃ[_r.ⲆΔⵠΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔΔΔᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆΔⵠΔΔ].id = _r.ⲆΔⵠΔΔ;
    this.ᐃᐃᐃ[_r.ⲆΔᐃΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔⲆⵠΔⵠⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆΔᐃΔⵠ].id = _r.ⲆΔᐃΔⵠ;
    this.ᐃᐃᐃ[_r.ᐃᐃΔᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔⵠΔΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ᐃᐃΔᐃΔ].id = _r.ᐃᐃΔᐃΔ;
    this.ᐃᐃᐃ[_r.ᐃΔᐃΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆᐃᐃΔΔⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔᐃΔⲆ].id = _r.ᐃΔᐃΔⲆ;
    this.ᐃᐃᐃ[_r.ᐃᐃⲆᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⲆⵠᐃⲆⲆ], 3);
    this.ᐃᐃᐃ[_r.ᐃᐃⲆᐃᐃ].id = _r.ᐃᐃⲆᐃᐃ;
    this.ᐃᐃᐃ[_r.ⲆΔⲆᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔᐃᐃΔⲆⲆ], Jb);
    this.ᐃᐃᐃ[_r.ⲆΔⲆᐃⲆ].id = _r.ⲆΔⲆᐃⲆ;
    this.ᐃᐃᐃ[_r.ᐃᐃΔᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⲆⵠᐃᐃᐃ], 3);
    this.ᐃᐃᐃ[_r.ᐃᐃΔᐃⲆ].id = _r.ᐃᐃΔᐃⲆ;
    this.ᐃᐃᐃ[_r.Δᐃᐃⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⲆᐃᐃΔᐃ], gl);
    this.ᐃᐃᐃ[_r.Δᐃᐃⵠⵠ].id = _r.Δᐃᐃⵠⵠ;
    this.ᐃᐃᐃ[_r.ΔΔⲆⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⵠΔᐃⲆΔ], gl);
    this.ᐃᐃᐃ[_r.ΔΔⲆⵠⲆ].id = _r.ΔΔⲆⵠⲆ;
    this.ᐃᐃᐃ[_r.ΔⲆΔΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠΔΔΔΔᐃ], ru);
    this.ᐃᐃᐃ[_r.ΔⲆΔΔΔ].id = _r.ΔⲆΔΔΔ;
    this.ᐃᐃᐃ[_r.ⵠΔΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆⲆⲆᐃⵠ], Hk);
    this.ᐃᐃᐃ[_r.ⵠΔΔᐃᐃ].id = _r.ⵠΔΔᐃᐃ;
    this.ᐃᐃᐃ[_r.ⲆⵠΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔΔⲆⵠⲆⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆⵠΔⵠⵠ].id = _r.ⲆⵠΔⵠⵠ;
    this.ᐃᐃᐃ[_r.ᐃΔⵠᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⲆⵠⵠᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔⵠᐃⵠ].id = _r.ᐃΔⵠᐃⵠ;
    this.ᐃᐃᐃ[_r.ΔᐃⵠⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⵠⲆΔⵠᐃ], 3);
    this.ᐃᐃᐃ[_r.ΔᐃⵠⵠΔ].id = _r.ΔᐃⵠⵠΔ;
    this.ᐃᐃᐃ[_r.ⲆⵠΔⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔᐃᐃⲆᐃᐃ], 3);
    this.ᐃᐃᐃ[_r.ⲆⵠΔⲆⲆ].id = _r.ⲆⵠΔⲆⲆ;
    this.ᐃᐃᐃ[_r.Δⵠᐃᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃⲆᐃᐃⲆ], 3);
    this.ᐃᐃᐃ[_r.Δⵠᐃᐃᐃ].id = _r.Δⵠᐃᐃᐃ;
    this.ᐃᐃᐃ[_r.ⵠΔⲆΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔⲆᐃᐃⵠ], fn);
    this.ᐃᐃᐃ[_r.ⵠΔⲆΔⲆ].id = _r.ⵠΔⲆΔⲆ;
    this.ᐃᐃᐃ[_r.ΔⵠΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃⵠⲆⲆᐃ], 3);
    this.ᐃᐃᐃ[_r.ΔⵠΔⵠⵠ].id = _r.ΔⵠΔⵠⵠ;
    this.ᐃᐃᐃ[_r.ΔᐃⲆᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆΔᐃΔⲆΔ], 3);
    this.ᐃᐃᐃ[_r.ΔᐃⲆᐃᐃ].id = _r.ΔᐃⲆᐃᐃ;
    this.ᐃᐃᐃ[_r.ᐃⲆΔⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔⵠⲆⲆⵠⲆ], ea);
    this.ᐃᐃᐃ[_r.ᐃⲆΔⲆⵠ].id = _r.ᐃⲆΔⲆⵠ;
    this.ᐃᐃᐃ[_r.ⲆᐃᐃⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⵠᐃᐃⲆⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆᐃᐃⲆᐃ].id = _r.ⲆᐃᐃⲆᐃ;
    this.ᐃᐃᐃ[_r.ⲆⲆⲆⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⵠᐃᐃⲆΔ], 3);
    this.ᐃᐃᐃ[_r.ⲆⲆⲆⵠⵠ].id = _r.ⲆⲆⲆⵠⵠ;
    this.ᐃᐃᐃ[_r.ΔΔⲆᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠΔⵠΔΔⲆ], ig);
    this.ᐃᐃᐃ[_r.ΔΔⲆᐃᐃ].id = _r.ΔΔⲆᐃᐃ;
    this.ᐃᐃᐃ[_r.ⲆⲆⲆᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆⵠΔⵠⵠ], Ut);
    this.ᐃᐃᐃ[_r.ⲆⲆⲆᐃΔ].id = _r.ⲆⲆⲆᐃΔ;
    this.ᐃᐃᐃ[_r.ᐃᐃⲆⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆᐃΔⵠⵠⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃᐃⲆⵠⵠ].id = _r.ᐃᐃⲆⵠⵠ;
    this.ᐃᐃᐃ[_r.Δᐃᐃⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⵠⵠⲆⲆΔ], 3);
    this.ᐃᐃᐃ[_r.Δᐃᐃⵠᐃ].id = _r.Δᐃᐃⵠᐃ;
    this.ᐃᐃᐃ[_r.ΔᐃΔⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔⲆΔᐃᐃⲆ], Hk);
    this.ᐃᐃᐃ[_r.ΔᐃΔⲆⲆ].id = _r.ΔᐃΔⲆⲆ;
    this.ᐃᐃᐃ[_r.ᐃⲆⲆⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⵠΔᐃⲆⲆ], 3);
    this.ᐃᐃᐃ[_r.ᐃⲆⲆⵠᐃ].id = _r.ᐃⲆⲆⵠᐃ;
    this.ᐃᐃᐃ[_r.ᐃⵠΔΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔⵠⵠⵠΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠΔΔⲆ].id = _r.ᐃⵠΔΔⲆ;
    this.ᐃᐃᐃ[_r.ⵠΔΔΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⲆᐃⵠᐃΔ], 3);
    this.ᐃᐃᐃ[_r.ⵠΔΔΔⲆ].id = _r.ⵠΔΔΔⲆ;
    this.ᐃᐃᐃ[_r.ⵠΔΔΔⲆ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ⵠΔΔΔⲆ].info.ⵠⵠ[Hi];
    this.ᐃᐃᐃ[_r.ⵠⲆᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠⵠⵠⵠΔ], 3);
    this.ᐃᐃᐃ[_r.ⵠⲆᐃᐃ].id = _r.ⵠⲆᐃᐃ;
    this.ᐃᐃᐃ[_r.Ⲇⵠⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆΔᐃΔᐃⲆ], 3);
    this.ᐃᐃᐃ[_r.Ⲇⵠⵠⵠ].id = _r.Ⲇⵠⵠⵠ;
    this.ᐃᐃᐃ[_r.Ⲇⵠⵠⵠ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.Ⲇⵠⵠⵠ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ΔⲆᐃⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⵠⲆΔᐃΔ], Ob);
    this.ᐃᐃᐃ[_r.ΔⲆᐃⵠΔ].id = _r.ΔⲆᐃⵠΔ;
    this.ᐃᐃᐃ[_r.ⵠΔᐃᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⵠΔΔⵠⲆ], 3);
    this.ᐃᐃᐃ[_r.ⵠΔᐃᐃⵠ].id = _r.ⵠΔᐃᐃⵠ;
    this.ᐃᐃᐃ[_r.ΔⲆⲆⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆᐃⲆΔᐃⲆ], 3);
    this.ᐃᐃᐃ[_r.ΔⲆⲆⵠⲆ].id = _r.ΔⲆⲆⵠⲆ;
    this.ᐃᐃᐃ[_r.ⲆⵠΔⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔΔᐃᐃΔᐃ], Ks);
    this.ᐃᐃᐃ[_r.ⲆⵠΔⵠΔ].id = _r.ⲆⵠΔⵠΔ;
    this.ᐃᐃᐃ[_r.ᐃΔⵠⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⵠⲆᐃⲆᐃ], ea);
    this.ᐃᐃᐃ[_r.ᐃΔⵠⲆᐃ].id = _r.ᐃΔⵠⲆᐃ;
    this.ᐃᐃᐃ[_r.ⲆᐃΔⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃᐃᐃΔⵠΔ], 3);
    this.ᐃᐃᐃ[_r.ⲆᐃΔⲆΔ].id = _r.ⲆᐃΔⲆΔ;
    this.ᐃᐃᐃ[_r.ⲆⲆⵠⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⵠⵠΔⲆΔ], 3);
    this.ᐃᐃᐃ[_r.ⲆⲆⵠⲆⲆ].id = _r.ⲆⲆⵠⲆⲆ;
    this.ᐃᐃᐃ[_r.ⵠΔΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⲆⵠᐃᐃⲆ], 3);
    this.ᐃᐃᐃ[_r.ⵠΔΔΔⵠ].id = _r.ⵠΔΔΔⵠ;
    this.ᐃᐃᐃ[_r.ᐃⵠⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠⵠΔⵠΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠⵠⵠᐃ].id = _r.ᐃⵠⵠⵠᐃ;
    this.ᐃᐃᐃ[_r.ᐃⵠⲆⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔⲆᐃᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠⲆⵠΔ].id = _r.ᐃⵠⲆⵠΔ;
    this.ᐃᐃᐃ[_r.ᐃΔⵠⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⲆⲆⵠᐃⲆ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔⵠⵠΔ].id = _r.ᐃΔⵠⵠΔ;
    this.ᐃᐃᐃ[_r.ᐃⲆⵠᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠᐃᐃⲆᐃ], 3);
    this.ᐃᐃᐃ[_r.ᐃⲆⵠᐃᐃ].id = _r.ᐃⲆⵠᐃᐃ;
    this.ᐃᐃᐃ[_r.Δⵠᐃⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠΔΔΔᐃⲆ], qo);
    this.ᐃᐃᐃ[_r.Δⵠᐃⵠᐃ].id = _r.Δⵠᐃⵠᐃ;
    this.ᐃᐃᐃ[_r.ᐃⲆⲆΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆᐃΔᐃΔ], hl);
    this.ᐃᐃᐃ[_r.ᐃⲆⲆΔΔ].id = _r.ᐃⲆⲆΔΔ;
    this.ᐃᐃᐃ[_r.ⲆΔΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔΔⵠⲆᐃ], ru);
    this.ᐃᐃᐃ[_r.ⲆΔΔᐃᐃ].id = _r.ⲆΔΔᐃᐃ;
    this.ᐃᐃᐃ[_r.ⲆΔΔᐃᐃ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ⲆΔΔᐃᐃ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ᐃⲆΔⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔᐃⲆΔΔᐃ], fn);
    this.ᐃᐃᐃ[_r.ᐃⲆΔⲆⲆ].id = _r.ᐃⲆΔⲆⲆ;
    this.ᐃᐃᐃ[_r.ᐃⲆΔⲆⲆ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ᐃⲆΔⲆⲆ].info.ⵠⵠ[Bg];
    this.ᐃᐃᐃ[_r.ⲆⲆⲆᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆᐃⲆᐃΔᐃ], ru);
    this.ᐃᐃᐃ[_r.ⲆⲆⲆᐃⵠ].id = _r.ⲆⲆⲆᐃⵠ;
    this.ᐃᐃᐃ[_r.ⲆⲆⲆᐃⵠ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ⲆⲆⲆᐃⵠ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ⵠⵠⲆⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⲆⵠΔΔⵠ], 3);
    this.ᐃᐃᐃ[_r.ⵠⵠⲆⵠᐃ].id = _r.ⵠⵠⲆⵠᐃ;
    this.ᐃᐃᐃ[_r.ⵠⵠⲆⵠᐃ].info.ⵠⵠ[Gl] = this.ᐃᐃᐃ[_r.ⵠⵠⲆⵠᐃ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ⵠⵠⲆⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃⲆᐃⲆⲆ], 3);
    this.ᐃᐃᐃ[_r.ⵠⵠⲆⵠⲆ].id = _r.ⵠⵠⲆⵠⲆ;
    this.ᐃᐃᐃ[_r.ᐃⲆᐃⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔΔΔⵠⲆⲆ], qo);
    this.ᐃᐃᐃ[_r.ᐃⲆᐃⵠΔ].id = _r.ᐃⲆᐃⵠΔ;
    this.ᐃᐃᐃ[_r.ⲆⲆⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⵠΔⵠⲆⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆⲆⵠⵠᐃ].id = _r.ⲆⲆⵠⵠᐃ;
    this.ᐃᐃᐃ[_r.ᐃⵠᐃⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆΔΔⵠᐃΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠᐃⲆⵠ].id = _r.ᐃⵠᐃⲆⵠ;
    this.ᐃᐃᐃ[_r.ⲆⵠᐃᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔᐃΔΔΔ], Ks);
    this.ᐃᐃᐃ[_r.ⲆⵠᐃᐃΔ].id = _r.ⲆⵠᐃᐃΔ;
    this.ᐃᐃᐃ[_r.ⵠⲆⲆⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠᐃΔⲆΔ], nq);
    this.ᐃᐃᐃ[_r.ⵠⲆⲆⵠⵠ].id = _r.ⵠⲆⲆⵠⵠ;
    this.ᐃᐃᐃ[_r.ⵠⵠᐃᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⲆΔᐃΔⵠ], 3);
    this.ᐃᐃᐃ[_r.ⵠⵠᐃᐃⲆ].id = _r.ⵠⵠᐃᐃⲆ;
    this.ᐃᐃᐃ[_r.ⲆᐃⲆᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⵠᐃᐃΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆᐃⲆᐃⵠ].id = _r.ⲆᐃⲆᐃⵠ;
    this.ᐃᐃᐃ[_r.ⵠᐃⵠᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆᐃⵠᐃΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃⵠᐃⵠ].id = _r.ⵠᐃⵠᐃⵠ;
    this.ᐃᐃᐃ[_r.ⵠⵠⲆΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆᐃⲆⲆⲆⲆ], Tr);
    this.ᐃᐃᐃ[_r.ⵠⵠⲆΔⲆ].id = _r.ⵠⵠⲆΔⲆ;
    this.ᐃᐃᐃ[_r.ⵠᐃᐃⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔᐃΔⲆΔⵠ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃᐃⲆᐃ].id = _r.ⵠᐃᐃⲆᐃ;
    this.ᐃᐃᐃ[_r.ΔⵠΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠΔΔΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ΔⵠΔΔⵠ].id = _r.ΔⵠΔΔⵠ;
    this.ᐃᐃᐃ[_r.ᐃⵠⲆⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠΔⵠⵠⵠⵠ], ru);
    this.ᐃᐃᐃ[_r.ᐃⵠⲆⵠⲆ].id = _r.ᐃⵠⲆⵠⲆ;
    this.ᐃᐃᐃ[_r.ⵠⲆᐃⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⵠᐃⵠᐃΔ], qo);
    this.ᐃᐃᐃ[_r.ⵠⲆᐃⲆΔ].id = _r.ⵠⲆᐃⲆΔ;
    this.ᐃᐃᐃ[_r.ᐃⵠⵠᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⲆⲆᐃⲆᐃ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠⵠᐃⵠ].id = _r.ᐃⵠⵠᐃⵠ;
    this.ᐃᐃᐃ[_r.ⲆⵠΔᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔᐃⲆᐃⵠⲆ], qo);
    this.ᐃᐃᐃ[_r.ⲆⵠΔᐃⵠ].id = _r.ⲆⵠΔᐃⵠ;
    this.ᐃᐃᐃ[_r.ΔΔⵠⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆⵠⵠΔⵠ], ig);
    this.ᐃᐃᐃ[_r.ΔΔⵠⲆⲆ].id = _r.ΔΔⵠⲆⲆ;
    this.ᐃᐃᐃ[_r.ⲆⲆΔⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⵠᐃᐃⵠⲆ], Ob);
    this.ᐃᐃᐃ[_r.ⲆⲆΔⵠⲆ].id = _r.ⲆⲆΔⵠⲆ;
    this.ᐃᐃᐃ[_r.ⵠᐃⲆⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⲆᐃⲆΔⵠ], ig);
    this.ᐃᐃᐃ[_r.ⵠᐃⲆⲆΔ].id = _r.ⵠᐃⲆⲆΔ;
    this.ᐃᐃᐃ[_r.ⲆⲆΔⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆⲆΔΔᐃ], ea);
    this.ᐃᐃᐃ[_r.ⲆⲆΔⲆᐃ].id = _r.ⲆⲆΔⲆᐃ;
    this.ᐃᐃᐃ[_r.ⲆⲆΔⲆᐃ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ⲆⲆΔⲆᐃ].info.ⵠⵠ[Zj];
    this.ᐃᐃᐃ[_r.ΔᐃᐃⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠᐃΔⲆᐃⵠ], bb);
    this.ᐃᐃᐃ[_r.ΔᐃᐃⵠΔ].id = _r.ΔᐃᐃⵠΔ;
    this.ᐃᐃᐃ[_r.ᐃⲆⵠΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⵠⵠᐃᐃⲆ], Hk);
    this.ᐃᐃᐃ[_r.ᐃⲆⵠΔᐃ].id = _r.ᐃⲆⵠΔᐃ;
    this.ᐃᐃᐃ[_r.ᐃΔΔΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔⵠΔᐃⲆ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔΔΔΔ].id = _r.ᐃΔΔΔΔ;
    this.ᐃᐃᐃ[_r.ⲆΔΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔΔᐃᐃᐃⵠ], ig);
    this.ᐃᐃᐃ[_r.ⲆΔΔⵠⵠ].id = _r.ⲆΔΔⵠⵠ;
    this.ᐃᐃᐃ[_r.ⵠᐃⵠᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⵠΔⵠⲆⲆ], Ks);
    this.ᐃᐃᐃ[_r.ⵠᐃⵠᐃΔ].id = _r.ⵠᐃⵠᐃΔ;
    this.ᐃᐃᐃ[_r.ⵠᐃⲆⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⵠⲆΔΔⵠ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃⲆⲆⵠ].id = _r.ⵠᐃⲆⲆⵠ;
    this.ᐃᐃᐃ[_r.ᐃⵠᐃΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔᐃⵠΔᐃᐃ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠᐃΔⵠ].id = _r.ᐃⵠᐃΔⵠ;
    this.ᐃᐃᐃ[_r.ΔᐃΔⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃᐃⲆΔΔᐃ], Jb);
    this.ᐃᐃᐃ[_r.ΔᐃΔⲆᐃ].id = _r.ΔᐃΔⲆᐃ;
    this.ᐃᐃᐃ[_r.ΔᐃΔⲆᐃ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ΔᐃΔⲆᐃ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ⲆΔᐃΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔᐃᐃᐃⵠ], Hk);
    this.ᐃᐃᐃ[_r.ⲆΔᐃΔⲆ].id = _r.ⲆΔᐃΔⲆ;
    this.ᐃᐃᐃ[_r.ᐃⵠᐃⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⵠᐃⵠᐃᐃ], ci);
    this.ᐃᐃᐃ[_r.ᐃⵠᐃⵠᐃ].id = _r.ᐃⵠᐃⵠᐃ;
    this.ᐃᐃᐃ[_r.ᐃⵠᐃⵠᐃ].info.ⵠⵠ[Pn] = this.ᐃᐃᐃ[_r.ᐃⵠᐃⵠᐃ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ⲆΔᐃΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠⲆΔⲆⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆΔᐃΔΔ].id = _r.ⲆΔᐃΔΔ;
    this.ᐃᐃᐃ[_r.ⲆᐃᐃⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆΔⲆᐃᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆᐃᐃⵠΔ].id = _r.ⲆᐃᐃⵠΔ;
    this.ᐃᐃᐃ[_r.ⲆΔΔᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔΔΔᐃⲆⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆΔΔᐃⵠ].id = _r.ⲆΔΔᐃⵠ;
    this.ᐃᐃᐃ[_r.ⲆΔΔᐃⵠ].info.ⵠⵠ[Pn] = this.ᐃᐃᐃ[_r.ⲆΔΔᐃⵠ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ⵠΔⲆⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔΔᐃⲆⲆ], ru);
    this.ᐃᐃᐃ[_r.ⵠΔⲆⲆΔ].id = _r.ⵠΔⲆⲆΔ;
    this.ᐃᐃᐃ[_r.ᐃⵠⵠⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔΔⵠΔⲆⲆ], Ob);
    this.ᐃᐃᐃ[_r.ᐃⵠⵠⲆΔ].id = _r.ᐃⵠⵠⲆΔ;
    this.ᐃᐃᐃ[_r.ᐃⲆⵠⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔᐃⲆΔᐃΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃⲆⵠⲆⲆ].id = _r.ᐃⲆⵠⲆⲆ;
    this.ᐃᐃᐃ[_r.ᐃᐃΔⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃΔⲆⲆⵠ], Ob);
    this.ᐃᐃᐃ[_r.ᐃᐃΔⵠΔ].id = _r.ᐃᐃΔⵠΔ;
    this.ᐃᐃᐃ[_r.ⵠᐃⲆⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔⵠⵠᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃⲆⲆᐃ].id = _r.ⵠᐃⲆⲆᐃ;
    this.ᐃᐃᐃ[_r.ⲆⵠΔⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃᐃΔᐃᐃⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆⵠΔⲆΔ].id = _r.ⲆⵠΔⲆΔ;
    this.ᐃᐃᐃ[_r.ΔΔᐃⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⲆⲆⵠⵠⵠ], 3);
    this.ᐃᐃᐃ[_r.ΔΔᐃⵠⲆ].id = _r.ΔΔᐃⵠⲆ;
    this.ᐃᐃᐃ[_r.ⵠⲆΔⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃΔΔΔⵠⲆ], 3);
    this.ᐃᐃᐃ[_r.ⵠⲆΔⲆᐃ].id = _r.ⵠⲆΔⲆᐃ;
    this.ᐃᐃᐃ[_r.ⵠᐃΔⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠΔᐃᐃⵠᐃ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃΔⲆⵠ].id = _r.ⵠᐃΔⲆⵠ;
    this.ᐃᐃᐃ[_r.ⵠᐃΔⲆⵠ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ⵠᐃΔⲆⵠ].info.ⵠⵠ[Rq];
    this.ᐃᐃᐃ[_r.ᐃᐃΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⲆΔΔΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ᐃᐃΔΔⵠ].id = _r.ᐃᐃΔΔⵠ;
    this.ᐃᐃᐃ[_r.ᐃᐃΔΔⵠ].info.ⵠⵠ[Zh] = this.ᐃᐃᐃ[_r.ᐃᐃΔΔⵠ].info.ⵠⵠ[Eh];
    this.ᐃᐃᐃ[_r.ΔΔΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔⵠΔΔΔ], 3);
    this.ᐃᐃᐃ[_r.ΔΔΔⵠⵠ].id = _r.ΔΔΔⵠⵠ;
    this.ᐃᐃᐃ[_r.ᐃΔΔΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃΔᐃΔΔⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔΔΔⲆ].id = _r.ᐃΔΔΔⲆ;
    this.ᐃᐃᐃ[_r.ᐃΔΔΔⲆ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ᐃΔΔΔⲆ].info.ⵠⵠ[gu];
    this.ᐃᐃᐃ[_r.Δᐃᐃᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃⵠⲆⲆᐃ], I);
    this.ᐃᐃᐃ[_r.Δᐃᐃᐃᐃ].id = _r.Δᐃᐃᐃᐃ;
    this.ᐃᐃᐃ[_r.ⲆⲆΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⲆⵠⵠⵠⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆⲆΔⵠⵠ].id = _r.ⲆⲆΔⵠⵠ;
    this.ᐃᐃᐃ[_r.ᐃⵠΔᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⵠΔΔⵠⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠΔᐃΔ].id = _r.ᐃⵠΔᐃΔ;
    this.ᐃᐃᐃ[_r.ⵠᐃᐃΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠᐃⵠΔⵠ], bb);
    this.ᐃᐃᐃ[_r.ⵠᐃᐃΔⵠ].id = _r.ⵠᐃᐃΔⵠ;
    this.ᐃᐃᐃ[_r.ᐃⲆΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃΔⵠΔᐃ], hl);
    this.ᐃᐃᐃ[_r.ᐃⲆΔᐃᐃ].id = _r.ᐃⲆΔᐃᐃ;
    this.ᐃᐃᐃ[_r.ᐃⲆΔᐃᐃ].info.ⵠⵠ[Zg] = this.ᐃᐃᐃ[_r.ᐃⲆΔᐃᐃ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ⵠᐃΔⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⵠᐃⲆΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃΔⵠΔ].id = _r.ⵠᐃΔⵠΔ;
    this.ᐃᐃᐃ[_r.ⵠᐃΔⵠΔ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ⵠᐃΔⵠΔ].info.ⵠⵠ[Pg];
    this.ᐃᐃᐃ[_r.ΔⲆᐃΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔᐃⲆᐃⲆ], 3);
    this.ᐃᐃᐃ[_r.ΔⲆᐃΔⵠ].id = _r.ΔⲆᐃΔⵠ;
    this.ᐃᐃᐃ[_r.ⲆⲆᐃᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠΔⵠᐃᐃⵠ], Hk);
    this.ᐃᐃᐃ[_r.ⲆⲆᐃᐃⲆ].id = _r.ⲆⲆᐃᐃⲆ;
    this.ᐃᐃᐃ[_r.ΔⲆᐃᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃⲆⲆᐃΔ], yr);
    this.ᐃᐃᐃ[_r.ΔⲆᐃᐃⲆ].id = _r.ΔⲆᐃᐃⲆ;
    this.ᐃᐃᐃ[_r.ΔⲆᐃᐃⲆ].info.ⵠⵠ[dg] = this.ᐃᐃᐃ[_r.ΔⲆᐃᐃⲆ].info.ⵠⵠ[Rs];
    this.ᐃᐃᐃ[_r.ⲆⲆΔⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠᐃᐃⲆᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆⲆΔⲆΔ].id = _r.ⲆⲆΔⲆΔ;
    this.ᐃᐃᐃ[_r.ⲆⲆΔⲆΔ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ⲆⲆΔⲆΔ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ᐃⲆΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔΔΔΔⵠᐃ], yr);
    this.ᐃᐃᐃ[_r.ᐃⲆΔⵠⵠ].id = _r.ᐃⲆΔⵠⵠ;
    this.ᐃᐃᐃ[_r.ΔᐃΔᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⵠⲆΔΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ΔᐃΔᐃⵠ].id = _r.ΔᐃΔᐃⵠ;
    this.ᐃᐃᐃ[_r.ΔᐃΔᐃⵠ].info.ⵠⵠ[Hj] = this.ᐃᐃᐃ[_r.ΔᐃΔᐃⵠ].info.ⵠⵠ[Pg];
    this.ᐃᐃᐃ[_r.ⵠⲆⲆΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔᐃⲆᐃΔΔ], Tr);
    this.ᐃᐃᐃ[_r.ⵠⲆⲆΔᐃ].id = _r.ⵠⲆⲆΔᐃ;
    this.ᐃᐃᐃ[_r.ⵠⲆⲆΔᐃ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ⵠⲆⲆΔᐃ].info.ⵠⵠ[tt];
    this.ᐃᐃᐃ[_r.ⵠᐃⵠⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠΔᐃᐃⲆⵠ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃⵠⵠΔ].id = _r.ⵠᐃⵠⵠΔ;
    this.ᐃᐃᐃ[_r.ΔΔⲆⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⲆⵠⲆⲆᐃ], fn);
    this.ᐃᐃᐃ[_r.ΔΔⲆⲆᐃ].id = _r.ΔΔⲆⲆᐃ;
    this.ᐃᐃᐃ[_r.ΔΔⲆⲆᐃ].info.ⵠⵠ[ih] = this.ᐃᐃᐃ[_r.ΔΔⲆⲆᐃ].info.ⵠⵠ[0];
    this.ᐃᐃᐃ[_r.ⲆⲆᐃᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⵠᐃⲆⵠⲆ], Ob);
    this.ᐃᐃᐃ[_r.ⲆⲆᐃᐃΔ].id = _r.ⲆⲆᐃᐃΔ;
    this.ᐃᐃᐃ[_r.ⲆΔⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃΔᐃⲆⵠⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆΔⵠⵠᐃ].id = _r.ⲆΔⵠⵠᐃ;
    this.ᐃᐃᐃ[_r.ΔᐃⲆⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃᐃⵠⵠΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ΔᐃⲆⵠⵠ].id = _r.ΔᐃⲆⵠⵠ;
    this.ᐃᐃᐃ[_r.ᐃΔΔⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⵠⵠΔⵠⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔΔⲆΔ].id = _r.ᐃΔΔⲆΔ;
    this.ᐃᐃᐃ[_r.ⵠⲆΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆⲆⵠΔΔ], Tr);
    this.ᐃᐃᐃ[_r.ⵠⲆΔᐃᐃ].id = _r.ⵠⲆΔᐃᐃ;
    this.ᐃᐃᐃ[_r.ΔᐃⵠⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⲆᐃⲆᐃᐃ], qo);
    this.ᐃᐃᐃ[_r.ΔᐃⵠⲆΔ].id = _r.ΔᐃⵠⲆΔ;
    this.ᐃᐃᐃ[_r.ΔΔᐃⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠΔⵠⵠⵠΔ], I);
    this.ᐃᐃᐃ[_r.ΔΔᐃⲆΔ].id = _r.ΔΔᐃⲆΔ;
    this.ᐃᐃᐃ[_r.ΔΔᐃΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠΔⲆⲆⵠⵠ], nq);
    this.ᐃᐃᐃ[_r.ΔΔᐃΔΔ].id = _r.ΔΔᐃΔΔ;
    this.ᐃᐃᐃ[_r.ⲆΔⵠΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔΔΔⲆᐃᐃ], 3);
    this.ᐃᐃᐃ[_r.ⲆΔⵠΔᐃ].id = _r.ⲆΔⵠΔᐃ;
    this.ᐃᐃᐃ[_r.ⲆⵠⲆⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠΔⲆⵠΔΔ], Tr);
    this.ᐃᐃᐃ[_r.ⲆⵠⲆⵠⵠ].id = _r.ⲆⵠⲆⵠⵠ;
    this.ᐃᐃᐃ[_r.ⵠΔᐃᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔᐃⲆΔᐃⲆ], ea);
    this.ᐃᐃᐃ[_r.ⵠΔᐃᐃᐃ].id = _r.ⵠΔᐃᐃᐃ;
    this.ᐃᐃᐃ[_r.ᐃⵠᐃᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆΔⵠΔΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠᐃᐃⵠ].id = _r.ᐃⵠᐃᐃⵠ;
    this.ᐃᐃᐃ[_r.ⵠᐃⵠΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⵠⵠΔⲆΔ], ci);
    this.ᐃᐃᐃ[_r.ⵠᐃⵠΔⵠ].id = _r.ⵠᐃⵠΔⵠ;
    this.ᐃᐃᐃ[_r.ⲆⲆΔⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⲆⵠⲆᐃΔ], Ks);
    this.ᐃᐃᐃ[_r.ⲆⲆΔⲆⵠ].id = _r.ⲆⲆΔⲆⵠ;
    this.ᐃᐃᐃ[_r.ⲆᐃΔᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠᐃᐃⲆⵠΔ], I);
    this.ᐃᐃᐃ[_r.ⲆᐃΔᐃΔ].id = _r.ⲆᐃΔᐃΔ;
    this.ᐃᐃᐃ[_r.ⲆᐃⵠΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠⵠᐃᐃΔ], 3);
    this.ᐃᐃᐃ[_r.ⲆᐃⵠΔΔ].id = _r.ⲆᐃⵠΔΔ;
    this.ᐃᐃᐃ[_r.ᐃⲆⲆᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠΔᐃⲆⲆᐃ], bb);
    this.ᐃᐃᐃ[_r.ᐃⲆⲆᐃΔ].id = _r.ᐃⲆⲆᐃΔ;
    this.ᐃᐃᐃ[_r.ᐃⲆᐃᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⲆⵠⲆⲆⵠ], ea);
    this.ᐃᐃᐃ[_r.ᐃⲆᐃᐃΔ].id = _r.ᐃⲆᐃᐃΔ;
    this.ᐃᐃᐃ[_r.ⲆⵠΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃᐃΔⲆⲆ], Tr);
    this.ᐃᐃᐃ[_r.ⲆⵠΔᐃᐃ].id = _r.ⲆⵠΔᐃᐃ;
    this.ᐃᐃᐃ[_r.ⲆᐃΔⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃⵠᐃᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆᐃΔⵠᐃ].id = _r.ⲆᐃΔⵠᐃ;
    this.ᐃᐃᐃ[_r.ᐃⵠΔΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⵠΔΔΔⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠΔΔΔ].id = _r.ᐃⵠΔΔΔ;
    this.ᐃᐃᐃ[_r.ⲆᐃΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔᐃΔⵠΔⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆᐃΔΔⵠ].id = _r.ⲆᐃΔΔⵠ;
    this.ᐃᐃᐃ[_r.ⲆΔⲆⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔᐃᐃΔⵠΔ], gl);
    this.ᐃᐃᐃ[_r.ⲆΔⲆⵠΔ].id = _r.ⲆΔⲆⵠΔ;
    this.ᐃᐃᐃ[_r.ⲆᐃⵠΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆᐃΔᐃᐃ], fn);
    this.ᐃᐃᐃ[_r.ⲆᐃⵠΔⲆ].id = _r.ⲆᐃⵠΔⲆ;
    this.ᐃᐃᐃ[_r.ΔⵠⵠΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆᐃⵠΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ΔⵠⵠΔⲆ].id = _r.ΔⵠⵠΔⲆ;
    this.ᐃᐃᐃ[_r.ⵠΔᐃⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃΔΔⲆⵠᐃ], 3);
    this.ᐃᐃᐃ[_r.ⵠΔᐃⵠⲆ].id = _r.ⵠΔᐃⵠⲆ;
    this.ᐃᐃᐃ[_r.ᐃᐃⵠⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠᐃᐃⵠⵠⲆ], hl);
    this.ᐃᐃᐃ[_r.ᐃᐃⵠⲆⲆ].id = _r.ᐃᐃⵠⲆⲆ;
    this.ᐃᐃᐃ[_r.ΔⲆΔⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔᐃΔᐃᐃᐃ], 3);
    this.ᐃᐃᐃ[_r.ΔⲆΔⲆⲆ].id = _r.ΔⲆΔⲆⲆ;
    this.ᐃᐃᐃ[_r.ᐃᐃΔⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆΔᐃⲆⵠΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃᐃΔⲆⲆ].id = _r.ᐃᐃΔⲆⲆ;
    this.ᐃᐃᐃ[_r.ⲆⲆΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆΔⵠⲆⲆᐃ], 3);
    this.ᐃᐃᐃ[_r.ⲆⲆΔᐃᐃ].id = _r.ⲆⲆΔᐃᐃ;
    this.ᐃᐃᐃ[_r.ⲆⵠᐃΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⵠⵠⲆⲆΔ], 3);
    this.ᐃᐃᐃ[_r.ⲆⵠᐃΔᐃ].id = _r.ⲆⵠᐃΔᐃ;
    this.ᐃᐃᐃ[_r.Ⲇᐃᐃᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⵠᐃᐃᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.Ⲇᐃᐃᐃᐃ].id = _r.Ⲇᐃᐃᐃᐃ;
    this.ᐃᐃᐃ[_r.ⵠⲆⵠᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔᐃΔⵠⵠΔ], 3);
    this.ᐃᐃᐃ[_r.ⵠⲆⵠᐃᐃ].id = _r.ⵠⲆⵠᐃᐃ;
    this.ᐃᐃᐃ[_r.ΔⲆⵠΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔⲆⵠⲆᐃⲆ], nq);
    this.ᐃᐃᐃ[_r.ΔⲆⵠΔΔ].id = _r.ΔⲆⵠΔΔ;
    this.ᐃᐃᐃ[_r.ⲆⲆΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠΔⵠⲆⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆⲆΔΔⵠ].id = _r.ⲆⲆΔΔⵠ;
    this.ᐃᐃᐃ[_r.ⵠᐃΔⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠᐃⲆΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ⵠᐃΔⲆⲆ].id = _r.ⵠᐃΔⲆⲆ;
    this.ᐃᐃᐃ[_r.ⲆⵠⲆⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⲆΔᐃⵠΔ], Jb);
    this.ᐃᐃᐃ[_r.ⲆⵠⲆⲆΔ].id = _r.ⲆⵠⲆⲆΔ;
    this.ᐃᐃᐃ[_r.ᐃΔᐃⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔⲆΔⵠⲆΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔᐃⵠⵠ].id = _r.ᐃΔᐃⵠⵠ;
    this.ⵠⵠᐃ = [];
    this.ⵠⵠᐃ[$r.ᐃᐃⲆΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆΔⲆⵠⲆᐃ], ru);
    this.ⵠⵠᐃ[$r.ᐃᐃⲆΔⲆ].id = $r.ᐃᐃⲆΔⲆ;
    this.ⵠⵠᐃ[$r.ⲆⵠⵠⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠᐃⲆⵠΔⲆ], Ob);
    this.ⵠⵠᐃ[$r.ⲆⵠⵠⲆⲆ].id = $r.ⲆⵠⵠⲆⲆ;
    this.ⵠⵠᐃ[$r.ΔᐃᐃⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃΔᐃⵠⲆᐃ], 3);
    this.ⵠⵠᐃ[$r.ΔᐃᐃⲆⲆ].id = $r.ΔᐃᐃⲆⲆ;
    this.ⵠⵠᐃ[$r.ⵠⲆΔⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔⲆⵠᐃᐃ], ea);
    this.ⵠⵠᐃ[$r.ⵠⲆΔⵠᐃ].id = $r.ⵠⲆΔⵠᐃ;
    this.ⵠⵠᐃ[$r.ⲆⲆⲆⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⵠΔⲆᐃⲆ], hl);
    this.ⵠⵠᐃ[$r.ⲆⲆⲆⲆⵠ].id = $r.ⲆⲆⲆⲆⵠ;
    this.ⵠⵠᐃ[$r.ⵠⵠΔⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔΔΔⵠΔᐃ], hl);
    this.ⵠⵠᐃ[$r.ⵠⵠΔⵠⲆ].id = $r.ⵠⵠΔⵠⲆ;
    this.ⵠⵠᐃ[$r.ⵠᐃΔⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⲆᐃⲆΔⵠ], 3);
    this.ⵠⵠᐃ[$r.ⵠᐃΔⲆᐃ].id = $r.ⵠᐃΔⲆᐃ;
    this.ⵠⵠᐃ[$r.ⵠᐃⲆΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔΔΔᐃⲆΔ], 3);
    this.ⵠⵠᐃ[$r.ⵠᐃⲆΔΔ].id = $r.ⵠᐃⲆΔΔ;
    this.ⵠⵠᐃ[$r.ᐃⲆⵠΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔᐃᐃᐃᐃᐃ], 3);
    this.ⵠⵠᐃ[$r.ᐃⲆⵠΔⲆ].id = $r.ᐃⲆⵠΔⲆ;
    this.ⵠⵠᐃ[$r.ⵠΔΔΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⵠⵠΔⵠΔ], ci);
    this.ⵠⵠᐃ[$r.ⵠΔΔΔΔ].id = $r.ⵠΔΔΔΔ;
    this.ⵠⵠᐃ[$r.ΔⵠᐃΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔⲆᐃΔΔᐃ], 3);
    this.ⵠⵠᐃ[$r.ΔⵠᐃΔᐃ].id = $r.ΔⵠᐃΔᐃ;
    this.ⵠⵠᐃ[$r.ᐃΔⲆᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⲆᐃⲆᐃⲆ], Ob);
    this.ⵠⵠᐃ[$r.ᐃΔⲆᐃΔ].id = $r.ᐃΔⲆᐃΔ;
    this.ⵠⵠᐃ[$r.ⲆΔⲆⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠⲆᐃⵠⲆ], 3);
    this.ⵠⵠᐃ[$r.ⲆΔⲆⲆⵠ].id = $r.ⲆΔⲆⲆⵠ;
    this.ⵠⵠᐃ[$r.ΔΔⵠⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⲆⲆΔⵠΔ], 3);
    this.ⵠⵠᐃ[$r.ΔΔⵠⵠⲆ].id = $r.ΔΔⵠⵠⲆ;
    this.ⵠⵠᐃ[$r.ᐃΔΔⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⵠᐃᐃⲆⵠ], vt);
    this.ⵠⵠᐃ[$r.ᐃΔΔⵠΔ].id = $r.ᐃΔΔⵠΔ;
    this.ⵠⵠᐃ[$r.ᐃΔᐃⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⵠⲆᐃⵠⲆ], 3);
    this.ⵠⵠᐃ[$r.ᐃΔᐃⲆᐃ].id = $r.ᐃΔᐃⲆᐃ;
    this.ⵠⵠᐃ[$r.ΔᐃⵠⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆᐃⵠⲆΔᐃ], Ks);
    this.ⵠⵠᐃ[$r.ΔᐃⵠⲆⲆ].id = $r.ΔᐃⵠⲆⲆ;
    this.ⵠⵠᐃ[$r.ᐃᐃᐃᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔⲆΔⵠⵠⵠ], 3);
    this.ⵠⵠᐃ[$r.ᐃᐃᐃᐃᐃ].id = $r.ᐃᐃᐃᐃᐃ;
    this.ⵠⵠᐃ[$r.ⵠᐃⲆᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠⵠⵠⲆⵠ], I);
    this.ⵠⵠᐃ[$r.ⵠᐃⲆᐃⵠ].id = $r.ⵠᐃⲆᐃⵠ;
    this.ⵠⵠᐃ[$r.ΔⵠⵠⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠΔΔᐃⲆᐃ], 3);
    this.ⵠⵠᐃ[$r.ΔⵠⵠⲆᐃ].id = $r.ΔⵠⵠⲆᐃ;
    this.ⵠⵠᐃ[$r.ᐃⲆⲆⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆΔᐃᐃΔΔ], nq);
    this.ⵠⵠᐃ[$r.ᐃⲆⲆⲆⲆ].id = $r.ᐃⲆⲆⲆⲆ;
    this.ⵠⵠᐃ[$r.ⲆᐃⲆΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⲆⵠΔⵠⲆ], nq);
    this.ⵠⵠᐃ[$r.ⲆᐃⲆΔΔ].id = $r.ⲆᐃⲆΔΔ;
    this.ⵠⵠᐃ[$r.Ⲇᐃⵠᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃΔⵠⵠⲆ], gl);
    this.ⵠⵠᐃ[$r.Ⲇᐃⵠᐃⵠ].id = $r.Ⲇᐃⵠᐃⵠ;
    this.ⵠⵠᐃ[$r.ⲆⵠᐃΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆΔⲆΔⵠⲆ], ig);
    this.ⵠⵠᐃ[$r.ⲆⵠᐃΔΔ].id = $r.ⲆⵠᐃΔΔ;
    this.ⵠⵠᐃ[$r.ⵠⲆᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠᐃⲆⲆΔ], 3);
    this.ⵠⵠᐃ[$r.ⵠⲆᐃᐃ].id = $r.ⵠⲆᐃᐃ;
    this.ⵠⵠᐃ[$r.ᐃⲆᐃⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⲆⲆΔΔᐃ], 3);
    this.ⵠⵠᐃ[$r.ᐃⲆᐃⲆᐃ].id = $r.ᐃⲆᐃⲆᐃ;
    this.ⵠⵠᐃ[$r.ⵠΔᐃⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⲆⲆⵠⲆΔ], 3);
    this.ⵠⵠᐃ[$r.ⵠΔᐃⲆΔ].id = $r.ⵠΔᐃⲆΔ;
    this.ⵠⵠᐃ[$r.ᐃΔⵠⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⵠΔΔΔᐃ], Ut);
    this.ⵠⵠᐃ[$r.ᐃΔⵠⵠⵠ].id = $r.ᐃΔⵠⵠⵠ;
    this.ⵠⵠᐃ[$r.ⵠΔᐃΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔΔⲆⵠⲆ], 3);
    this.ⵠⵠᐃ[$r.ⵠΔᐃΔΔ].id = $r.ⵠΔᐃΔΔ;
    this.ⵠⵠᐃ[$r.ᐃⲆᐃⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⲆⲆΔΔᐃ], Wg);
    this.ⵠⵠᐃ[$r.ᐃⲆᐃⲆᐃ].id = $r.ᐃⲆᐃⲆᐃ;
    this.ⵠⵠᐃ[$r.ᐃⵠⵠⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⲆⵠⲆⵠΔ], 3);
    this.ⵠⵠᐃ[$r.ᐃⵠⵠⵠΔ].id = $r.ᐃⵠⵠⵠΔ;
    this.ⵠⵠᐃ[$r.ᐃᐃΔⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⵠⵠⲆΔΔ], 3);
    this.ⵠⵠᐃ[$r.ᐃᐃΔⲆⲆ].id = $r.ᐃᐃΔⲆⲆ;
    this.ⵠⵠᐃ[$r.ⵠΔᐃⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠⵠᐃᐃΔᐃ], 3);
    this.ⵠⵠᐃ[$r.ⵠΔᐃⵠᐃ].id = $r.ⵠΔᐃⵠᐃ;
    this.ⵠⵠᐃ[$r.ⵠᐃᐃⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⲆᐃⲆΔⲆ], Ut);
    this.ⵠⵠᐃ[$r.ⵠᐃᐃⵠΔ].id = $r.ⵠᐃᐃⵠΔ;
    this.ⵠⵠᐃ[$r.ᐃᐃᐃᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠᐃΔⲆⵠⵠ], vt);
    this.ⵠⵠᐃ[$r.ᐃᐃᐃᐃⲆ].id = $r.ᐃᐃᐃᐃⲆ;
    this.ⵠⵠᐃ[$r.ⲆⲆΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⲆⲆΔᐃⲆ], 3);
    this.ⵠⵠᐃ[$r.ⲆⲆΔᐃᐃ].id = $r.ⲆⲆΔᐃᐃ;
    this.ⵠⵠᐃ[$r.ⲆᐃΔᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⵠᐃΔⲆᐃ], nq);
    this.ⵠⵠᐃ[$r.ⲆᐃΔᐃⵠ].id = $r.ⲆᐃΔᐃⵠ;
    this.ⵠⵠᐃ[$r.ⲆᐃᐃΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⵠⵠⲆⲆᐃ], ru);
    this.ⵠⵠᐃ[$r.ⲆᐃᐃΔᐃ].id = $r.ⲆᐃᐃΔᐃ;
    this.ⵠⵠᐃ[$r.ⵠᐃᐃΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠΔⵠᐃΔⵠ], Ks);
    this.ⵠⵠᐃ[$r.ⵠᐃᐃΔᐃ].id = $r.ⵠᐃᐃΔᐃ;
    this.ⵠⵠᐃ[$r.ⲆⵠΔᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃⲆᐃᐃⲆ], 3);
    this.ⵠⵠᐃ[$r.ⲆⵠΔᐃⲆ].id = $r.ⲆⵠΔᐃⲆ;
    this.ⵠⵠᐃ[$r.ⵠⲆⵠΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠᐃⲆᐃΔⵠ], Ob);
    this.ⵠⵠᐃ[$r.ⵠⲆⵠΔᐃ].id = $r.ⵠⲆⵠΔᐃ;
    this.ⵠⵠᐃ[$r.ⵠᐃΔΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃΔⵠᐃΔ], ea);
    this.ⵠⵠᐃ[$r.ⵠᐃΔΔᐃ].id = $r.ⵠᐃΔΔᐃ;
    this.ⵠⵠᐃ[$r.ⵠⵠΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔᐃᐃⵠΔⵠ], 3);
    this.ⵠⵠᐃ[$r.ⵠⵠΔᐃᐃ].id = $r.ⵠⵠΔᐃᐃ;
    this.ⵠⵠᐃ[$r.ΔΔΔⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃⵠⵠⵠᐃ], qo);
    this.ⵠⵠᐃ[$r.ΔΔΔⲆΔ].id = $r.ΔΔΔⲆΔ;
    this.ⵠⵠᐃ[$r.ΔᐃⲆⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠΔΔΔΔΔ], nq);
    this.ⵠⵠᐃ[$r.ΔᐃⲆⵠⲆ].id = $r.ΔᐃⲆⵠⲆ;
    this.ⵠⵠᐃ[$r.ⲆΔⵠΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⵠⵠΔΔⵠ], Jb);
    this.ⵠⵠᐃ[$r.ⲆΔⵠΔΔ].id = $r.ⲆΔⵠΔΔ;
    this.ⵠⵠᐃ[$r.ⲆΔᐃΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⵠΔᐃⵠⲆ], ci);
    this.ⵠⵠᐃ[$r.ⲆΔᐃΔⵠ].id = $r.ⲆΔᐃΔⵠ;
    this.ⵠⵠᐃ[$r.ᐃᐃΔᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆΔⵠΔΔⵠ], Ob);
    this.ⵠⵠᐃ[$r.ᐃᐃΔᐃΔ].id = $r.ᐃᐃΔᐃΔ;
    this.ⵠⵠᐃ[$r.ᐃΔᐃΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠᐃΔⲆⲆΔ], 3);
    this.ⵠⵠᐃ[$r.ᐃΔᐃΔⲆ].id = $r.ᐃΔᐃΔⲆ;
    this.ⵠⵠᐃ[$r.ᐃᐃⲆᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠⵠΔⵠⵠ], 3);
    this.ⵠⵠᐃ[$r.ᐃᐃⲆᐃᐃ].id = $r.ᐃᐃⲆᐃᐃ;
    this.ⵠⵠᐃ[$r.ⲆΔⲆᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⲆΔⵠⲆⲆ], fn);
    this.ⵠⵠᐃ[$r.ⲆΔⲆᐃⲆ].id = $r.ⲆΔⲆᐃⲆ;
    this.ⵠⵠᐃ[$r.ᐃᐃΔᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⵠⵠⲆᐃⵠ], gl);
    this.ⵠⵠᐃ[$r.ᐃᐃΔᐃⲆ].id = $r.ᐃᐃΔᐃⲆ;
    this.ⵠⵠᐃ[$r.Δᐃᐃⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃⵠΔᐃᐃ], bb);
    this.ⵠⵠᐃ[$r.Δᐃᐃⵠⵠ].id = $r.Δᐃᐃⵠⵠ;
    this.ⵠⵠᐃ[$r.ΔΔⲆⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃᐃⲆⲆⵠⲆ], 3);
    this.ⵠⵠᐃ[$r.ΔΔⲆⵠⲆ].id = $r.ΔΔⲆⵠⲆ;
    this.ⵠⵠᐃ[$r.ΔᐃⲆᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠⲆᐃᐃⵠ], ci);
    this.ⵠⵠᐃ[$r.ΔᐃⲆᐃᐃ].id = $r.ΔᐃⲆᐃᐃ;
    this.ⵠⵠᐃ[$r.ᐃⲆΔⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⲆⲆⲆᐃᐃ], 3);
    this.ⵠⵠᐃ[$r.ᐃⲆΔⲆⵠ].id = $r.ᐃⲆΔⲆⵠ;
    this.ⵠⵠᐃ[$r.ⲆᐃᐃⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔᐃΔΔᐃᐃ], Ut);
    this.ⵠⵠᐃ[$r.ⲆᐃᐃⲆᐃ].id = $r.ⲆᐃᐃⲆᐃ;
    this.ⵠⵠᐃ[$r.ⲆⲆⲆⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⲆᐃⲆⵠΔ], 3);
    this.ⵠⵠᐃ[$r.ⲆⲆⲆⵠⵠ].id = $r.ⲆⲆⲆⵠⵠ;
    this.ⵠⵠᐃ[$r.ΔΔⲆᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆΔⵠⵠᐃⵠ], 3);
    this.ⵠⵠᐃ[$r.ΔΔⲆᐃᐃ].id = $r.ΔΔⲆᐃᐃ;
    this.ⵠⵠᐃ[$r.ⲆⲆⲆᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⲆᐃΔᐃᐃ], 3);
    this.ⵠⵠᐃ[$r.ⲆⲆⲆᐃΔ].id = $r.ⲆⲆⲆᐃΔ;
    this.ⵠⵠᐃ[$r.ΔⲆΔΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃⲆᐃⲆᐃ], Wg);
    this.ⵠⵠᐃ[$r.ΔⲆΔΔΔ].id = $r.ΔⲆΔΔΔ;
    this.ⵠⵠᐃ[$r.ⵠΔΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⲆΔΔᐃⲆ], 3);
    this.ⵠⵠᐃ[$r.ⵠΔΔᐃᐃ].id = $r.ⵠΔΔᐃᐃ;
    this.ⵠⵠᐃ[$r.ⲆⵠΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃᐃⲆⵠᐃ], ci);
    this.ⵠⵠᐃ[$r.ⲆⵠΔⵠⵠ].id = $r.ⲆⵠΔⵠⵠ;
    this.ⵠⵠᐃ[$r.ᐃΔⵠᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔᐃᐃΔᐃⲆ], fn);
    this.ⵠⵠᐃ[$r.ᐃΔⵠᐃⵠ].id = $r.ᐃΔⵠᐃⵠ;
    this.ⵠⵠᐃ[$r.ΔᐃⵠⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃΔⲆΔⵠ], hl);
    this.ⵠⵠᐃ[$r.ΔᐃⵠⵠΔ].id = $r.ΔᐃⵠⵠΔ;
    this.ⵠⵠᐃ[$r.ⲆⵠΔⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠΔⵠΔⵠ], 3);
    this.ⵠⵠᐃ[$r.ⲆⵠΔⲆⲆ].id = $r.ⲆⵠΔⲆⲆ;
    this.ⵠⵠᐃ[$r.Δⵠᐃᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⲆΔΔᐃⵠ], 3);
    this.ⵠⵠᐃ[$r.Δⵠᐃᐃᐃ].id = $r.Δⵠᐃᐃᐃ;
    this.ⵠⵠᐃ[$r.ⵠΔⲆΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆᐃΔⲆⵠᐃ], Jb);
    this.ⵠⵠᐃ[$r.ⵠΔⲆΔⲆ].id = $r.ⵠΔⲆΔⲆ;
    this.ⵠⵠᐃ[$r.ΔⵠΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆΔⲆΔᐃⵠ], hl);
    this.ⵠⵠᐃ[$r.ΔⵠΔⵠⵠ].id = $r.ΔⵠΔⵠⵠ;
    this.ⵠⵠᐃ[$r.ᐃᐃⲆⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆΔᐃⲆⲆⲆ], 3);
    this.ⵠⵠᐃ[$r.ᐃᐃⲆⵠⵠ].id = $r.ᐃᐃⲆⵠⵠ;
    this.ⵠⵠᐃ[$r.Δᐃᐃⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⵠⵠᐃⵠᐃ], Hk);
    this.ⵠⵠᐃ[$r.Δᐃᐃⵠᐃ].id = $r.Δᐃᐃⵠᐃ;
    this.ⵠⵠᐃ[$r.ΔᐃΔⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⲆⵠⲆᐃⵠ], 3);
    this.ⵠⵠᐃ[$r.ΔᐃΔⲆⲆ].id = $r.ΔᐃΔⲆⲆ;
    this.ⵠⵠᐃ[$r.ᐃⲆⲆⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⵠΔⵠⵠⵠ], nq);
    this.ⵠⵠᐃ[$r.ᐃⲆⲆⵠᐃ].id = $r.ᐃⲆⲆⵠᐃ;
    this.ⵠⵠᐃ[$r.ᐃⵠΔΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⵠᐃⲆΔⵠ], gl);
    this.ⵠⵠᐃ[$r.ᐃⵠΔΔⲆ].id = $r.ᐃⵠΔΔⲆ;
    this.ⵠⵠᐃ[$r.ⵠΔΔΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆΔΔⵠⵠⵠ], 3);
    this.ⵠⵠᐃ[$r.ⵠΔΔΔⲆ].id = $r.ⵠΔΔΔⲆ;
    this.ⵠⵠᐃ[$r.ⵠⲆᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠᐃⲆⲆΔ], nq);
    this.ⵠⵠᐃ[$r.ⵠⲆᐃᐃ].id = $r.ⵠⲆᐃᐃ;
    this.ⵠⵠᐃ[$r.ΔⲆᐃⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⲆᐃⲆⵠᐃ], 3);
    this.ⵠⵠᐃ[$r.ΔⲆᐃⵠΔ].id = $r.ΔⲆᐃⵠΔ;
    this.ⵠⵠᐃ[$r.ⵠΔᐃᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⲆᐃᐃΔⵠ], 3);
    this.ⵠⵠᐃ[$r.ⵠΔᐃᐃⵠ].id = $r.ⵠΔᐃᐃⵠ;
    this.ⵠⵠᐃ[$r.ΔⲆⲆⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠᐃⵠΔΔᐃ], ig);
    this.ⵠⵠᐃ[$r.ΔⲆⲆⵠⲆ].id = $r.ΔⲆⲆⵠⲆ;
    this.ⵠⵠᐃ[$r.ⲆⵠΔⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆᐃⵠᐃΔΔ], 3);
    this.ⵠⵠᐃ[$r.ⲆⵠΔⵠΔ].id = $r.ⲆⵠΔⵠΔ;
    this.ⵠⵠᐃ[$r.ᐃΔⵠⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⵠΔⲆᐃⵠ], 3);
    this.ⵠⵠᐃ[$r.ᐃΔⵠⲆᐃ].id = $r.ᐃΔⵠⲆᐃ;
    this.ⵠⵠᐃ[$r.ⲆᐃΔⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔᐃΔⵠᐃΔ], yr);
    this.ⵠⵠᐃ[$r.ⲆᐃΔⲆΔ].id = $r.ⲆᐃΔⲆΔ;
    this.ⵠⵠᐃ[$r.ⲆⲆⵠⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠΔⵠᐃΔΔ], yr);
    this.ⵠⵠᐃ[$r.ⲆⲆⵠⲆⲆ].id = $r.ⲆⲆⵠⲆⲆ;
    this.ⵠⵠᐃ[$r.ⵠΔΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠΔᐃⵠⵠΔ], 3);
    this.ⵠⵠᐃ[$r.ⵠΔΔΔⵠ].id = $r.ⵠΔΔΔⵠ;
    this.ⵠⵠᐃ[$r.ᐃⵠⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⵠᐃΔⲆΔ], Wg);
    this.ⵠⵠᐃ[$r.ᐃⵠⵠⵠᐃ].id = $r.ᐃⵠⵠⵠᐃ;
    this.ⵠⵠᐃ[$r.ᐃⵠⲆⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃⵠΔᐃⲆ], 3);
    this.ⵠⵠᐃ[$r.ᐃⵠⲆⵠΔ].id = $r.ᐃⵠⲆⵠΔ;
    this.ⵠⵠᐃ[$r.ᐃΔⵠⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠᐃΔᐃⵠⵠ], qo);
    this.ⵠⵠᐃ[$r.ᐃΔⵠⵠΔ].id = $r.ᐃΔⵠⵠΔ;
    this.ⵠⵠᐃ[$r.ᐃⲆⵠᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⲆⵠⲆⲆⵠ], I);
    this.ⵠⵠᐃ[$r.ᐃⲆⵠᐃᐃ].id = $r.ᐃⲆⵠᐃᐃ;
    this.ⵠⵠᐃ[$r.Δⵠᐃⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠᐃⲆⲆⵠⵠ], 3);
    this.ⵠⵠᐃ[$r.Δⵠᐃⵠᐃ].id = $r.Δⵠᐃⵠᐃ;
    this.ⵠⵠᐃ[$r.ᐃⲆⲆΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⵠᐃᐃΔΔ], ru);
    this.ⵠⵠᐃ[$r.ᐃⲆⲆΔΔ].id = $r.ᐃⲆⲆΔΔ;
    this.ⵠⵠᐃ[$r.ⲆⲆⲆᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⲆⵠᐃⲆᐃ], 3);
    this.ⵠⵠᐃ[$r.ⲆⲆⲆᐃⵠ].id = $r.ⲆⲆⲆᐃⵠ;
    this.ⵠⵠᐃ[$r.ⵠⵠⲆⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔᐃΔⵠΔⲆ], 3);
    this.ⵠⵠᐃ[$r.ⵠⵠⲆⵠᐃ].id = $r.ⵠⵠⲆⵠᐃ;
    this.ⵠⵠᐃ[$r.ⲆⲆⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔΔΔⵠᐃⵠ], 3);
    this.ⵠⵠᐃ[$r.ⲆⲆⵠⵠᐃ].id = $r.ⲆⲆⵠⵠᐃ;
    this.ⵠⵠᐃ[$r.ᐃⵠᐃⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⵠΔΔⵠⲆ], gl);
    this.ⵠⵠᐃ[$r.ᐃⵠᐃⲆⵠ].id = $r.ᐃⵠᐃⲆⵠ;
    this.ⵠⵠᐃ[$r.ⲆⵠᐃᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔⲆⵠⵠᐃ], 3);
    this.ⵠⵠᐃ[$r.ⲆⵠᐃᐃΔ].id = $r.ⲆⵠᐃᐃΔ;
    this.ⵠⵠᐃ[$r.ⵠⲆⲆⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.Ⲇⵠᐃᐃᐃᐃⵠ], bb);
    this.ⵠⵠᐃ[$r.ⵠⲆⲆⵠⵠ].id = $r.ⵠⲆⲆⵠⵠ;
    this.ⵠⵠᐃ[$r.ⵠⵠᐃᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆᐃⲆΔⲆⲆ], hl);
    this.ⵠⵠᐃ[$r.ⵠⵠᐃᐃⲆ].id = $r.ⵠⵠᐃᐃⲆ;
    this.ⵠⵠᐃ[$r.ⲆᐃⲆᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⲆΔΔⵠᐃ], ci);
    this.ⵠⵠᐃ[$r.ⲆᐃⲆᐃⵠ].id = $r.ⲆᐃⲆᐃⵠ;
    this.ⵠⵠᐃ[$r.ⵠᐃⵠᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆⵠᐃΔⲆ], Ut);
    this.ⵠⵠᐃ[$r.ⵠᐃⵠᐃⵠ].id = $r.ⵠᐃⵠᐃⵠ;
    this.ⵠⵠᐃ[$r.ⵠⵠⲆΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆΔⲆⵠⵠᐃ], 3);
    this.ⵠⵠᐃ[$r.ⵠⵠⲆΔⲆ].id = $r.ⵠⵠⲆΔⲆ;
    this.ⵠⵠᐃ[$r.ⵠᐃᐃⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⲆᐃⵠΔᐃ], Ut);
    this.ⵠⵠᐃ[$r.ⵠᐃᐃⲆᐃ].id = $r.ⵠᐃᐃⲆᐃ;
    this.ⵠⵠᐃ[$r.ΔⵠΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔⵠᐃᐃΔᐃ], 3);
    this.ⵠⵠᐃ[$r.ΔⵠΔΔⵠ].id = $r.ΔⵠΔΔⵠ;
    this.ⵠⵠᐃ[$r.ᐃⵠⲆⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔΔⲆΔᐃΔ], qo);
    this.ⵠⵠᐃ[$r.ᐃⵠⲆⵠⲆ].id = $r.ᐃⵠⲆⵠⲆ;
    this.ⵠⵠᐃ[$r.ⵠⲆᐃⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔⵠᐃⲆΔΔ], Ob);
    this.ⵠⵠᐃ[$r.ⵠⲆᐃⲆΔ].id = $r.ⵠⲆᐃⲆΔ;
    this.ⵠⵠᐃ[$r.ⲆⵠΔᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⵠΔᐃⵠᐃ], 3);
    this.ⵠⵠᐃ[$r.ⲆⵠΔᐃⵠ].id = $r.ⲆⵠΔᐃⵠ;
    this.ⵠⵠᐃ[$r.ΔΔⵠⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⲆⵠⵠⵠᐃ], I);
    this.ⵠⵠᐃ[$r.ΔΔⵠⲆⲆ].id = $r.ΔΔⵠⲆⲆ;
    this.ⵠⵠᐃ[$r.ᐃⵠⵠᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠᐃᐃⲆΔᐃ], Jb);
    this.ⵠⵠᐃ[$r.ᐃⵠⵠᐃⵠ].id = $r.ᐃⵠⵠᐃⵠ;
    this.ⵠⵠᐃ[$r.ᐃⲆⵠΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⲆⲆⵠΔᐃ], 3);
    this.ⵠⵠᐃ[$r.ᐃⲆⵠΔᐃ].id = $r.ᐃⲆⵠΔᐃ;
    this.ⵠⵠᐃ[$r.ΔᐃᐃⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆᐃᐃᐃᐃⵠ], 3);
    this.ⵠⵠᐃ[$r.ΔᐃᐃⵠΔ].id = $r.ΔᐃᐃⵠΔ;
    this.ⵠⵠᐃ[$r.ᐃᐃⲆⲆΔⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆᐃᐃᐃᐃⵠ], 3);
    this.ⵠⵠᐃ[$r.ᐃᐃⲆⲆΔⵠᐃ].id = $r.ᐃᐃⲆⲆΔⵠᐃ;
    this.ⵠⵠᐃ[$r.ⲆⲆᐃΔⲆⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆᐃᐃᐃᐃⵠ], ig);
    this.ⵠⵠᐃ[$r.ⲆⲆᐃΔⲆⲆΔ].id = $r.ⲆⲆᐃΔⲆⲆΔ;
    this.ⵠⵠᐃ[$r.ᐃΔΔΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆΔᐃⲆᐃ], Hk);
    this.ⵠⵠᐃ[$r.ᐃΔΔΔΔ].id = $r.ᐃΔΔΔΔ;
    this.ⵠⵠᐃ[$r.ⲆΔΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃᐃⵠⲆΔⵠ], 3);
    this.ⵠⵠᐃ[$r.ⲆΔΔⵠⵠ].id = $r.ⲆΔΔⵠⵠ;
    this.ⵠⵠᐃ[$r.ⵠᐃⵠᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠᐃΔⲆⵠ], nq);
    this.ⵠⵠᐃ[$r.ⵠᐃⵠᐃΔ].id = $r.ⵠᐃⵠᐃΔ;
    this.ⵠⵠᐃ[$r.ⵠᐃⲆⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠⲆΔᐃᐃ], 3);
    this.ⵠⵠᐃ[$r.ⵠᐃⲆⲆⵠ].id = $r.ⵠᐃⲆⲆⵠ;
    this.ⵠⵠᐃ[$r.ᐃⵠᐃΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⲆΔΔᐃᐃ], qo);
    this.ⵠⵠᐃ[$r.ᐃⵠᐃΔⵠ].id = $r.ᐃⵠᐃΔⵠ;
    this.ⵠⵠᐃ[$r.ⲆΔᐃΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃᐃⵠⲆⲆⵠ], vt);
    this.ⵠⵠᐃ[$r.ⲆΔᐃΔⲆ].id = $r.ⲆΔᐃΔⲆ;
    this.ⵠⵠᐃ[$r.ⲆΔᐃΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔⲆᐃᐃΔΔ], 3);
    this.ⵠⵠᐃ[$r.ⲆΔᐃΔΔ].id = $r.ⲆΔᐃΔΔ;
    this.ⵠⵠᐃ[$r.ⲆᐃᐃⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔΔᐃᐃᐃⵠ], 3);
    this.ⵠⵠᐃ[$r.ⲆᐃᐃⵠΔ].id = $r.ⲆᐃᐃⵠΔ;
    this.ⵠⵠᐃ[$r.ⵠΔⲆⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃΔⵠⲆΔⵠ], ci);
    this.ⵠⵠᐃ[$r.ⵠΔⲆⲆΔ].id = $r.ⵠΔⲆⲆΔ;
    this.ⵠⵠᐃ[$r.ᐃⵠⵠⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⲆⵠⲆⲆΔ], bb);
    this.ⵠⵠᐃ[$r.ᐃⵠⵠⲆΔ].id = $r.ᐃⵠⵠⲆΔ;
    this.ⵠⵠᐃ[$r.ᐃⲆⵠⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⲆⵠΔΔΔ], 3);
    this.ⵠⵠᐃ[$r.ᐃⲆⵠⲆⲆ].id = $r.ᐃⲆⵠⲆⲆ;
    this.ⵠⵠᐃ[$r.ᐃᐃΔⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆΔᐃⵠⲆⲆ], 3);
    this.ⵠⵠᐃ[$r.ᐃᐃΔⵠΔ].id = $r.ᐃᐃΔⵠΔ;
    this.ⵠⵠᐃ[$r.ⵠᐃⲆⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⲆΔᐃⲆᐃ], 3);
    this.ⵠⵠᐃ[$r.ⵠᐃⲆⲆᐃ].id = $r.ⵠᐃⲆⲆᐃ;
    this.ⵠⵠᐃ[$r.ⲆⵠΔⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔᐃⲆᐃⲆⵠ], Ut);
    this.ⵠⵠᐃ[$r.ⲆⵠΔⲆΔ].id = $r.ⲆⵠΔⲆΔ;
    this.ⵠⵠᐃ[$r.ⵠⲆΔⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆΔⲆΔⲆⵠ], yr);
    this.ⵠⵠᐃ[$r.ⵠⲆΔⲆᐃ].id = $r.ⵠⲆΔⲆᐃ;
    this.ⵠⵠᐃ[$r.ΔΔΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠΔⵠΔⲆ], 3);
    this.ⵠⵠᐃ[$r.ΔΔΔⵠⵠ].id = $r.ΔΔΔⵠⵠ;
    this.ⵠⵠᐃ[$r.Δᐃᐃᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔΔⵠⵠᐃ], ru);
    this.ⵠⵠᐃ[$r.Δᐃᐃᐃᐃ].id = $r.Δᐃᐃᐃᐃ;
    this.ⵠⵠᐃ[$r.ⲆⲆΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⲆⲆᐃΔΔ], Jb);
    this.ⵠⵠᐃ[$r.ⲆⲆΔⵠⵠ].id = $r.ⲆⲆΔⵠⵠ;
    this.ⵠⵠᐃ[$r.ᐃⵠΔᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆΔΔΔⲆ], 3);
    this.ⵠⵠᐃ[$r.ᐃⵠΔᐃΔ].id = $r.ᐃⵠΔᐃΔ;
    this.ⵠⵠᐃ[$r.ⵠᐃᐃΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⵠᐃⵠΔⵠ], 3);
    this.ⵠⵠᐃ[$r.ⵠᐃᐃΔⵠ].id = $r.ⵠᐃᐃΔⵠ;
    this.ⵠⵠᐃ[$r.ᐃⲆΔⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃⲆΔⲆᐃ], hl);
    this.ⵠⵠᐃ[$r.ᐃⲆΔⵠⵠ].id = $r.ᐃⲆΔⵠⵠ;
    this.ⵠⵠᐃ[$r.ⵠᐃⵠⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⲆᐃΔΔⵠ], 3);
    this.ⵠⵠᐃ[$r.ⵠᐃⵠⵠΔ].id = $r.ⵠᐃⵠⵠΔ;
    this.ⵠⵠᐃ[$r.ⲆⲆᐃᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆΔⵠⲆⲆ], ci);
    this.ⵠⵠᐃ[$r.ⲆⲆᐃᐃΔ].id = $r.ⲆⲆᐃᐃΔ;
    this.ⵠⵠᐃ[$r.ⲆΔⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔᐃᐃⵠⲆΔ], ea);
    this.ⵠⵠᐃ[$r.ⲆΔⵠⵠᐃ].id = $r.ⲆΔⵠⵠᐃ;
    this.ⵠⵠᐃ[$r.ΔᐃⲆⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔᐃᐃᐃΔ], Ks);
    this.ⵠⵠᐃ[$r.ΔᐃⲆⵠⵠ].id = $r.ΔᐃⲆⵠⵠ;
    this.ⵠⵠᐃ[$r.ΔᐃⵠⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⲆᐃΔⲆⵠ], ig);
    this.ⵠⵠᐃ[$r.ΔᐃⵠⲆΔ].id = $r.ΔᐃⵠⲆΔ;
    this.ⵠⵠᐃ[$r.ΔΔᐃⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⵠⵠᐃΔᐃ], Ut);
    this.ⵠⵠᐃ[$r.ΔΔᐃⲆΔ].id = $r.ΔΔᐃⲆΔ;
    this.ⵠⵠᐃ[$r.ΔΔᐃΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠΔⵠⲆΔⵠ], Ob);
    this.ⵠⵠᐃ[$r.ΔΔᐃΔΔ].id = $r.ΔΔᐃΔΔ;
    this.ⵠⵠᐃ[$r.ⲆΔⵠΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃᐃⵠⵠΔᐃ], bb);
    this.ⵠⵠᐃ[$r.ⲆΔⵠΔᐃ].id = $r.ⲆΔⵠΔᐃ;
    this.ⵠⵠᐃ[$r.ⲆⵠⲆⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⵠⵠⲆⵠΔ], I);
    this.ⵠⵠᐃ[$r.ⲆⵠⲆⵠⵠ].id = $r.ⲆⵠⲆⵠⵠ;
    this.ⵠⵠᐃ[$r.ⵠΔᐃᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆΔⵠⵠΔⲆ], 3);
    this.ⵠⵠᐃ[$r.ⵠΔᐃᐃᐃ].id = $r.ⵠΔᐃᐃᐃ;
    this.ⵠⵠᐃ[$r.ᐃⵠᐃᐃⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⲆⲆΔᐃΔ], 3);
    this.ⵠⵠᐃ[$r.ᐃⵠᐃᐃⵠ].id = $r.ᐃⵠᐃᐃⵠ;
    this.ⵠⵠᐃ[$r.ⲆⲆΔⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⲆⲆⲆⵠⲆ], 3);
    this.ⵠⵠᐃ[$r.ⲆⲆΔⲆⵠ].id = $r.ⲆⲆΔⲆⵠ;
    this.ⵠⵠᐃ[$r.ⲆᐃⵠΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃΔᐃᐃⲆΔ], ea);
    this.ⵠⵠᐃ[$r.ⲆᐃⵠΔΔ].id = $r.ⲆᐃⵠΔΔ;
    this.ⵠⵠᐃ[$r.ᐃⲆⲆᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆΔᐃΔⲆⵠ], 3);
    this.ⵠⵠᐃ[$r.ᐃⲆⲆᐃΔ].id = $r.ᐃⲆⲆᐃΔ;
    this.ⵠⵠᐃ[$r.ᐃⵠΔΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔⲆⵠᐃⵠ], ea);
    this.ⵠⵠᐃ[$r.ᐃⵠΔΔΔ].id = $r.ᐃⵠΔΔΔ;
    this.ⵠⵠᐃ[$r.ⲆⵠΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃΔᐃⲆⲆ], qo);
    this.ⵠⵠᐃ[$r.ⲆⵠΔᐃᐃ].id = $r.ⲆⵠΔᐃᐃ;
    this.ⵠⵠᐃ[$r.ⲆΔⲆⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆΔⵠⲆΔⵠ], Wg);
    this.ⵠⵠᐃ[$r.ⲆΔⲆⵠΔ].id = $r.ⲆΔⲆⵠΔ;
    this.ⵠⵠᐃ[$r.ΔⵠⵠΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⲆⵠᐃΔΔ], 3);
    this.ⵠⵠᐃ[$r.ΔⵠⵠΔⲆ].id = $r.ΔⵠⵠΔⲆ;
    this.ⵠⵠᐃ[$r.ᐃᐃΔⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⵠⵠⲆΔΔ], 3);
    this.ⵠⵠᐃ[$r.ᐃᐃΔⲆⲆ].id = $r.ᐃᐃΔⲆⲆ;
    this.ⵠⵠᐃ[$r.ⲆⲆΔᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⲆⲆΔᐃⲆ], fn);
    this.ⵠⵠᐃ[$r.ⲆⲆΔᐃᐃ].id = $r.ⲆⲆΔᐃᐃ;
    this.ⵠⵠᐃ[$r.Ⲇᐃᐃᐃᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆᐃΔⲆⵠΔ], Ob);
    this.ⵠⵠᐃ[$r.Ⲇᐃᐃᐃᐃ].id = $r.Ⲇᐃᐃᐃᐃ;
    this.ⵠⵠᐃ[$r.ΔⲆⵠΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⵠΔⵠΔᐃ], bb);
    this.ⵠⵠᐃ[$r.ΔⲆⵠΔΔ].id = $r.ΔⲆⵠΔΔ;
    this.ⵠⵠᐃ[$r.ⲆⲆΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃᐃᐃΔΔⲆ], fn);
    this.ⵠⵠᐃ[$r.ⲆⲆΔΔⵠ].id = $r.ⲆⲆΔΔⵠ;
    this.ⲆⵠΔ[_r.ⲆⵠⲆᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆΔᐃΔΔⲆᐃ], 3);
    this.ⲆⵠΔ[_r.ⲆⵠⲆᐃΔ].id = _r.ⲆⵠⲆᐃΔ;
    this.ᐃᐃᐃ[_r.ⲆⵠⲆᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃᐃⵠΔⵠⵠ], 3);
    this.ᐃᐃᐃ[_r.ⲆⵠⲆᐃΔ].id = _r.ⲆⵠⲆᐃΔ;
    this.ⵠⵠᐃ[$r.ⲆⵠⲆᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠΔΔΔⲆ], nq);
    this.ⵠⵠᐃ[$r.ⲆⵠⲆᐃΔ].id = $r.ⲆⵠⲆᐃΔ;
    this.ⲆⵠΔ[_r.ᐃΔΔᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃⵠᐃⲆᐃⵠ], 3);
    this.ⲆⵠΔ[_r.ᐃΔΔᐃΔ].id = _r.ᐃΔΔᐃΔ;
    this.ᐃᐃᐃ[_r.ᐃΔΔᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠΔΔⲆⵠᐃ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔΔᐃΔ].id = _r.ᐃΔΔᐃΔ;
    this.ⵠⵠᐃ[$r.ᐃΔΔᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⲆⲆⵠⲆᐃⲆ], gl);
    this.ⵠⵠᐃ[$r.ᐃΔΔᐃΔ].id = $r.ᐃΔΔᐃΔ;
    this.ⲆⵠΔ[_r.Ⲇᐃⵠⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠᐃⲆᐃΔⵠᐃ], 3);
    this.ⲆⵠΔ[_r.Ⲇᐃⵠⵠᐃ].id = _r.Ⲇᐃⵠⵠᐃ;
    this.ᐃᐃᐃ[_r.Ⲇᐃⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆⵠⵠⵠΔ], Ks);
    this.ᐃᐃᐃ[_r.Ⲇᐃⵠⵠᐃ].id = _r.Ⲇᐃⵠⵠᐃ;
    this.ⵠⵠᐃ[$r.Ⲇᐃⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔΔᐃⵠⲆⲆ], gl);
    this.ⵠⵠᐃ[$r.Ⲇᐃⵠⵠᐃ].id = $r.Ⲇᐃⵠⵠᐃ;
    this.ⲆⵠΔ[_r.ΔᐃᐃᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠᐃⲆᐃⵠⲆ], bb);
    this.ⲆⵠΔ[_r.ΔᐃᐃᐃΔ].id = _r.ΔᐃᐃᐃΔ;
    this.ᐃᐃᐃ[_r.ΔᐃᐃᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⵠⲆⵠⲆⵠ], 3);
    this.ᐃᐃᐃ[_r.ΔᐃᐃᐃΔ].id = _r.ΔᐃᐃᐃΔ;
    this.ⵠⵠᐃ[$r.ΔᐃᐃᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⵠᐃᐃⲆᐃ], 3);
    this.ⵠⵠᐃ[$r.ΔᐃᐃᐃΔ].id = $r.ΔᐃᐃᐃΔ;
    this.ⲆⵠΔ[_r.ΔᐃΔΔⲆⲆⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃΔΔⲆΔᐃ], 3);
    this.ⲆⵠΔ[_r.ΔᐃΔΔⲆⲆⵠ].id = _r.ΔᐃΔΔⲆⲆⵠ;
    this.ᐃᐃᐃ[_r.ΔᐃΔΔⲆⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠᐃⲆᐃⲆΔ], I);
    this.ᐃᐃᐃ[_r.ΔᐃΔΔⲆⲆⵠ].id = _r.ΔᐃΔΔⲆⲆⵠ;
    this.ⲆⵠΔ[_r.ⵠⲆᐃΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔⵠⵠⲆᐃΔ], Wg);
    this.ⲆⵠΔ[_r.ⵠⲆᐃΔⵠ].id = _r.ⵠⲆᐃΔⵠ;
    this.ᐃᐃᐃ[_r.ⵠⲆᐃΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠᐃⲆΔⵠⲆ], ig);
    this.ᐃᐃᐃ[_r.ⵠⲆᐃΔⵠ].id = _r.ⵠⲆᐃΔⵠ;
    this.ⲆⵠΔ[_r.ᐃⲆᐃⵠᐃΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⲆᐃⲆⲆⵠ], Jb);
    this.ⲆⵠΔ[_r.ᐃⲆᐃⵠᐃΔⵠ].id = _r.ᐃⲆᐃⵠᐃΔⵠ;
    this.ᐃᐃᐃ[_r.ᐃⲆᐃⵠᐃΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⲆⵠΔⵠΔ], nq);
    this.ᐃᐃᐃ[_r.ᐃⲆᐃⵠᐃΔⵠ].id = _r.ᐃⲆᐃⵠᐃΔⵠ;
    this.ⲆⵠΔ[_r.ΔⲆΔΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⵠᐃⵠⲆᐃ], qo);
    this.ⲆⵠΔ[_r.ΔⲆΔΔⲆ].id = _r.ΔⲆΔΔⲆ;
    this.ᐃᐃᐃ[_r.ΔⲆΔΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠᐃⵠⲆⵠⵠ], 3);
    this.ᐃᐃᐃ[_r.ΔⲆΔΔⲆ].id = _r.ΔⲆΔΔⲆ;
    this.ⵠⵠᐃ[$r.ΔⲆΔΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆΔⲆⲆΔⵠ], ig);
    this.ⵠⵠᐃ[$r.ΔⲆΔΔⲆ].id = $r.ΔⲆΔΔⲆ;
    this.ⲆⵠΔ[_r.ᐃⲆΔᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠΔΔᐃᐃΔ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆΔᐃⲆ].id = _r.ᐃⲆΔᐃⲆ;
    this.ᐃᐃᐃ[_r.ᐃⲆΔᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔΔᐃΔⵠΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃⲆΔᐃⲆ].id = _r.ᐃⲆΔᐃⲆ;
    this.ⵠⵠᐃ[$r.ᐃⲆΔᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔᐃᐃᐃⲆ], 3);
    this.ⵠⵠᐃ[$r.ᐃⲆΔᐃⲆ].id = $r.ᐃⲆΔᐃⲆ;
    this.ⲆⵠΔ[_r.ΔⵠⵠΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃΔⵠΔᐃⵠ], yr);
    this.ⲆⵠΔ[_r.ΔⵠⵠΔΔ].id = _r.ΔⵠⵠΔΔ;
    this.ᐃᐃᐃ[_r.ΔⵠⵠΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆⵠᐃΔΔ], I);
    this.ᐃᐃᐃ[_r.ΔⵠⵠΔΔ].id = _r.ΔⵠⵠΔΔ;
    this.ⵠⵠᐃ[$r.ΔⵠⵠΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠᐃⲆⲆⵠⲆ], qo);
    this.ⵠⵠᐃ[$r.ΔⵠⵠΔΔ].id = $r.ΔⵠⵠΔΔ;
    this.ⲆⵠΔ[_r.ΔΔⲆᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆΔᐃⲆᐃΔ], fn);
    this.ⲆⵠΔ[_r.ΔΔⲆᐃⲆ].id = _r.ΔΔⲆᐃⲆ;
    this.ᐃᐃᐃ[_r.ΔΔⲆᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃΔΔᐃΔⵠ], yr);
    this.ᐃᐃᐃ[_r.ΔΔⲆᐃⲆ].id = _r.ΔΔⲆᐃⲆ;
    this.ⵠⵠᐃ[$r.ΔΔⲆᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔⲆᐃᐃΔ], 3);
    this.ⵠⵠᐃ[$r.ΔΔⲆᐃⲆ].id = $r.ΔΔⲆᐃⲆ;
    this.ⲆⵠΔ[_r.ΔⵠΔⲆΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆⲆⲆⲆⲆᐃ], 3);
    this.ⲆⵠΔ[_r.ΔⵠΔⲆΔ].id = _r.ΔⵠΔⲆΔ;
    this.ᐃᐃᐃ[_r.ΔⵠΔⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔⵠᐃᐃᐃ], bb);
    this.ᐃᐃᐃ[_r.ΔⵠΔⲆΔ].id = _r.ΔⵠΔⲆΔ;
    this.ⵠⵠᐃ[$r.ΔⵠΔⲆΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆᐃⵠⲆᐃᐃ], 3);
    this.ⵠⵠᐃ[$r.ΔⵠΔⲆΔ].id = $r.ΔⵠΔⲆΔ;
    this.ⲆⵠΔ[_r.ⵠΔⲆⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⲆᐃⵠⵠᐃ], ci);
    this.ⲆⵠΔ[_r.ⵠΔⲆⵠᐃ].id = _r.ⵠΔⲆⵠᐃ;
    this.ᐃᐃᐃ[_r.ⵠΔⲆⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆᐃⲆᐃⵠᐃ], nq);
    this.ᐃᐃᐃ[_r.ⵠΔⲆⵠᐃ].id = _r.ⵠΔⲆⵠᐃ;
    this.ⵠⵠᐃ[$r.ⵠΔⲆⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔⲆᐃᐃᐃᐃ], Ks);
    this.ⵠⵠᐃ[$r.ⵠΔⲆⵠᐃ].id = $r.ⵠΔⲆⵠᐃ;
    this.ⲆⵠΔ[_r.ᐃΔΔⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠΔⲆΔΔᐃ], 3);
    this.ⲆⵠΔ[_r.ᐃΔΔⵠᐃ].id = _r.ᐃΔΔⵠᐃ;
    this.ᐃᐃᐃ[_r.ᐃΔΔⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆΔⲆⲆⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔΔⵠᐃ].id = _r.ᐃΔΔⵠᐃ;
    this.ⵠⵠᐃ[$r.ᐃΔΔⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔⵠᐃᐃⲆ], vt);
    this.ⵠⵠᐃ[$r.ᐃΔΔⵠᐃ].id = $r.ᐃΔΔⵠᐃ;
    this.ⲆⵠΔ[_r.ᐃⵠⵠⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃⲆᐃⲆⲆⵠ], ig);
    this.ⲆⵠΔ[_r.ᐃⵠⵠⲆᐃ].id = _r.ᐃⵠⵠⲆᐃ;
    this.ᐃᐃᐃ[_r.ᐃⵠⵠⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⵠΔⵠΔΔ], bb);
    this.ᐃᐃᐃ[_r.ᐃⵠⵠⲆᐃ].id = _r.ᐃⵠⵠⲆᐃ;
    this.ⵠⵠᐃ[$r.ᐃⵠⵠⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⲆⲆⲆΔΔ], ig);
    this.ⵠⵠᐃ[$r.ᐃⵠⵠⲆᐃ].id = $r.ᐃⵠⵠⲆᐃ;
    this.ⲆⵠΔ[_r.ⵠⲆᐃᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ΔⵠᐃⲆⲆⵠΔ], ci);
    this.ⲆⵠΔ[_r.ⵠⲆᐃᐃⲆ].id = _r.ⵠⲆᐃᐃⲆ;
    this.ᐃᐃᐃ[_r.ⵠⲆᐃᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠΔⲆⵠⵠᐃ], qo);
    this.ᐃᐃᐃ[_r.ⵠⲆᐃᐃⲆ].id = _r.ⵠⲆᐃᐃⲆ;
    this.ⵠⵠᐃ[$r.ⵠⲆᐃᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆΔⵠⲆⲆⵠⲆ], Tr);
    this.ⵠⵠᐃ[$r.ⵠⲆᐃᐃⲆ].id = $r.ⵠⲆᐃᐃⲆ;
    this.ⲆⵠΔ[_r.Ⲇᐃⵠⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃⵠⲆⵠΔⵠ], Wg);
    this.ⲆⵠΔ[_r.Ⲇᐃⵠⵠⵠ].id = _r.Ⲇᐃⵠⵠⵠ;
    this.ᐃᐃᐃ[_r.Ⲇᐃⵠⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⵠⵠᐃΔΔ], 3);
    this.ᐃᐃᐃ[_r.Ⲇᐃⵠⵠⵠ].id = _r.Ⲇᐃⵠⵠⵠ;
    this.ⵠⵠᐃ[$r.Ⲇᐃⵠⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆⵠⵠⲆⵠ], 3);
    this.ⵠⵠᐃ[$r.Ⲇᐃⵠⵠⵠ].id = $r.Ⲇᐃⵠⵠⵠ;
    this.ⲆⵠΔ[_r.ⲆᐃΔⲆⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠⲆΔΔᐃⵠ], Ks);
    this.ⲆⵠΔ[_r.ⲆᐃΔⲆⵠ].id = _r.ⲆᐃΔⲆⵠ;
    this.ᐃᐃᐃ[_r.ⲆᐃΔⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠΔⵠⵠΔⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆᐃΔⲆⵠ].id = _r.ⲆᐃΔⲆⵠ;
    this.ⵠⵠᐃ[$r.ⲆᐃΔⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔⲆΔⲆⵠ], Ob);
    this.ⵠⵠᐃ[$r.ⲆᐃΔⲆⵠ].id = $r.ⲆᐃΔⲆⵠ;
    this.ⲆⵠΔ[_r.ⲆΔᐃⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃⵠᐃᐃΔᐃ], ci);
    this.ⲆⵠΔ[_r.ⲆΔᐃⵠⲆ].id = _r.ⲆΔᐃⵠⲆ;
    this.ᐃᐃᐃ[_r.ⲆΔᐃⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⲆᐃⵠᐃⲆ], Ks);
    this.ᐃᐃᐃ[_r.ⲆΔᐃⵠⲆ].id = _r.ⲆΔᐃⵠⲆ;
    this.ⵠⵠᐃ[$r.ⲆΔᐃⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆⵠⲆᐃΔ], 3);
    this.ⵠⵠᐃ[$r.ⲆΔᐃⵠⲆ].id = $r.ⲆΔᐃⵠⲆ;
    this.ⲆⵠΔ[_r.ΔⵠᐃⲆⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃΔⲆᐃᐃⲆ], 3);
    this.ⲆⵠΔ[_r.ΔⵠᐃⲆⵠ].id = _r.ΔⵠᐃⲆⵠ;
    this.ᐃᐃᐃ[_r.ΔⵠᐃⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃΔⲆⵠᐃ], Wg);
    this.ᐃᐃᐃ[_r.ΔⵠᐃⲆⵠ].id = _r.ΔⵠᐃⲆⵠ;
    this.ⵠⵠᐃ[$r.ΔⵠᐃⲆⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃΔⵠΔⵠᐃ], vt);
    this.ⵠⵠᐃ[$r.ΔⵠᐃⲆⵠ].id = $r.ΔⵠᐃⲆⵠ;
    this.ⲆⵠΔ[_r.ΔⲆⵠⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⲆⵠᐃΔΔᐃ], 3);
    this.ⲆⵠΔ[_r.ΔⲆⵠⵠⵠ].id = _r.ΔⲆⵠⵠⵠ;
    this.ᐃᐃᐃ[_r.ΔⲆⵠⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔⲆᐃΔⲆᐃ], 3);
    this.ᐃᐃᐃ[_r.ΔⲆⵠⵠⵠ].id = _r.ΔⲆⵠⵠⵠ;
    this.ⵠⵠᐃ[$r.ΔⲆⵠⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⲆΔⲆⲆᐃ], Jb);
    this.ⵠⵠᐃ[$r.ΔⲆⵠⵠⵠ].id = $r.ΔⲆⵠⵠⵠ;
    this.ⲆⵠΔ[_r.ⲆⲆⵠⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃᐃᐃᐃⲆⲆ], 3);
    this.ⲆⵠΔ[_r.ⲆⲆⵠⵠΔ].id = _r.ⲆⲆⵠⵠΔ;
    this.ᐃᐃᐃ[_r.ⲆⲆⵠⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⲆᐃⵠⵠΔ], fn);
    this.ᐃᐃᐃ[_r.ⲆⲆⵠⵠΔ].id = _r.ⲆⲆⵠⵠΔ;
    this.ⵠⵠᐃ[$r.ⲆⲆⵠⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆⲆΔⲆⲆ], Ob);
    this.ⵠⵠᐃ[$r.ⲆⲆⵠⵠΔ].id = $r.ⲆⲆⵠⵠΔ;
    this.ⲆⵠΔ[_r.ⲆⵠⵠΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⲆⵠᐃᐃⵠᐃ], 3);
    this.ⲆⵠΔ[_r.ⲆⵠⵠΔⲆ].id = _r.ⲆⵠⵠΔⲆ;
    this.ᐃᐃᐃ[_r.ⲆⵠⵠΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆⵠⵠᐃΔᐃ], 3);
    this.ᐃᐃᐃ[_r.ⲆⵠⵠΔⲆ].id = _r.ⲆⵠⵠΔⲆ;
    this.ᐃᐃᐃ[_r.ⲆⵠⵠΔⲆ].info.ⵠⵠ[2] = this.ᐃᐃᐃ[_r.ⲆⵠⵠΔⲆ].info.ⵠⵠ[Db];
    this.ⲆⵠΔ[_r.ᐃⲆᐃⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃⵠⵠᐃⲆΔ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆᐃⵠΔ].id = _r.ᐃⲆᐃⵠΔ;
    this.ᐃᐃᐃ[_r.ᐃⲆᐃⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔΔΔⵠⲆⲆ], 3);
    this.ᐃᐃᐃ[_r.ᐃⲆᐃⵠΔ].id = _r.ᐃⲆᐃⵠΔ;
    this.ᐃᐃᐃ[_r.ᐃⲆᐃⵠΔ].info.ⵠⵠ[pq] = this.ᐃᐃᐃ[_r.ᐃⲆᐃⵠΔ].info.ⵠⵠ[0];
    this.ⲆⵠΔ[_r.ᐃⵠᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ⲆⵠΔᐃΔⲆⵠ], Tr);
    this.ⲆⵠΔ[_r.ᐃⵠᐃΔ].id = _r.ᐃⵠᐃΔ;
    this.ᐃᐃᐃ[_r.ᐃⵠᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⵠⵠΔᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠᐃΔ].id = _r.ᐃⵠᐃΔ;
    this.ᐃᐃᐃ[_r.ᐃⵠᐃΔ].info.ⵠⵠ[Zg] = this.ᐃᐃᐃ[_r.ᐃⵠᐃΔ].info.ⵠⵠ[In];
    this.ⲆⵠΔ[_r.ⵠⵠΔΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠⵠⵠᐃⲆⵠ], qo);
    this.ⲆⵠΔ[_r.ⵠⵠΔΔⵠ].id = _r.ⵠⵠΔΔⵠ;
    this.ᐃᐃᐃ[_r.ⵠⵠΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃΔᐃⵠⵠᐃ], 3);
    this.ᐃᐃᐃ[_r.ⵠⵠΔΔⵠ].id = _r.ⵠⵠΔΔⵠ;
    this.ⵠⵠᐃ[$r.ⵠⵠΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃᐃⵠⲆⲆ], yr);
    this.ⵠⵠᐃ[$r.ⵠⵠΔΔⵠ].id = $r.ⵠⵠΔΔⵠ;
    this.ⲆⵠΔ[_r.Δⵠⵠⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃΔⲆΔⲆⵠ], Jb);
    this.ⲆⵠΔ[_r.Δⵠⵠⵠᐃ].id = _r.Δⵠⵠⵠᐃ;
    this.ᐃᐃᐃ[_r.Δⵠⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃᐃΔᐃΔⵠ], ig);
    this.ᐃᐃᐃ[_r.Δⵠⵠⵠᐃ].id = _r.Δⵠⵠⵠᐃ;
    this.ⵠⵠᐃ[$r.Δⵠⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠΔⵠⵠⵠᐃ], bb);
    this.ⵠⵠᐃ[$r.Δⵠⵠⵠᐃ].id = $r.Δⵠⵠⵠᐃ;
    this.ⲆⵠΔ[_r.ᐃΔᐃⲆⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⵠⲆΔᐃⲆ], 3);
    this.ⲆⵠΔ[_r.ᐃΔᐃⲆⲆ].id = _r.ᐃΔᐃⲆⲆ;
    this.ᐃᐃᐃ[_r.ᐃΔᐃⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃⵠᐃᐃΔΔ], vt);
    this.ᐃᐃᐃ[_r.ᐃΔᐃⲆⲆ].id = _r.ᐃΔᐃⲆⲆ;
    this.ⵠⵠᐃ[$r.ᐃΔᐃⲆⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃΔⲆⵠΔⵠ], Hk);
    this.ⵠⵠᐃ[$r.ᐃΔᐃⲆⲆ].id = $r.ᐃΔᐃⲆⲆ;
    this.ⲆⵠΔ[_r.ⲆΔᐃΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔⲆⵠⵠⲆⵠⲆ], ig);
    this.ⲆⵠΔ[_r.ⲆΔᐃΔᐃ].id = _r.ⲆΔᐃΔᐃ;
    this.ᐃᐃᐃ[_r.ⲆΔᐃΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔᐃⵠᐃⵠ], qo);
    this.ᐃᐃᐃ[_r.ⲆΔᐃΔᐃ].id = _r.ⲆΔᐃΔᐃ;
    this.ⵠⵠᐃ[$r.ⲆΔᐃΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆᐃΔⲆᐃᐃ], 3);
    this.ⵠⵠᐃ[$r.ⲆΔᐃΔᐃ].id = $r.ⲆΔᐃΔᐃ;
    this.ⲆⵠΔ[_r.ⵠᐃΔΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃⲆᐃⵠΔⵠ], 3);
    this.ⲆⵠΔ[_r.ⵠᐃΔΔⵠ].id = _r.ⵠᐃΔΔⵠ;
    this.ᐃᐃᐃ[_r.ⵠᐃΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃⵠⲆⲆᐃⲆ], Wg);
    this.ᐃᐃᐃ[_r.ⵠᐃΔΔⵠ].id = _r.ⵠᐃΔΔⵠ;
    this.ⵠⵠᐃ[$r.ⵠᐃΔΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⵠⵠΔⲆⲆ], 3);
    this.ⵠⵠᐃ[$r.ⵠᐃΔΔⵠ].id = $r.ⵠᐃΔΔⵠ;
    this.ⲆⵠΔ[_r.ᐃⵠᐃⵠⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃⲆᐃᐃᐃⲆ], vt);
    this.ⲆⵠΔ[_r.ᐃⵠᐃⵠⵠ].id = _r.ᐃⵠᐃⵠⵠ;
    this.ᐃᐃᐃ[_r.ᐃⵠᐃⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠⵠⲆⵠΔᐃ], 3);
    this.ᐃᐃᐃ[_r.ᐃⵠᐃⵠⵠ].id = _r.ᐃⵠᐃⵠⵠ;
    this.ⵠⵠᐃ[$r.ᐃⵠᐃⵠⵠ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⵠΔⲆⲆⲆ], 3);
    this.ⵠⵠᐃ[$r.ᐃⵠᐃⵠⵠ].id = $r.ᐃⵠᐃⵠⵠ;
    this.ⲆⵠΔ[_r.ᐃΔⵠⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ΔᐃᐃⲆⲆⵠⲆ], ea);
    this.ⲆⵠΔ[_r.ᐃΔⵠⵠᐃ].id = _r.ᐃΔⵠⵠᐃ;
    this.ᐃᐃᐃ[_r.ᐃΔⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃⲆΔΔᐃⵠ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔⵠⵠᐃ].id = _r.ᐃΔⵠⵠᐃ;
    this.ⵠⵠᐃ[$r.ᐃΔⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⲆΔΔⲆᐃⲆ], I);
    this.ⵠⵠᐃ[$r.ᐃΔⵠⵠᐃ].id = $r.ᐃΔⵠⵠᐃ;
    this.ⲆⵠΔ[_r.ⵠⵠᐃᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆᐃΔⵠΔⲆ], hl);
    this.ⲆⵠΔ[_r.ⵠⵠᐃᐃΔ].id = _r.ⵠⵠᐃᐃΔ;
    this.ᐃᐃᐃ[_r.ⵠⵠᐃᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⲆⵠⲆΔⲆⵠ], 3);
    this.ᐃᐃᐃ[_r.ⵠⵠᐃᐃΔ].id = _r.ⵠⵠᐃᐃΔ;
    this.ⵠⵠᐃ[$r.ⵠⵠᐃᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆⵠⵠΔⲆⵠⲆ], 3);
    this.ⵠⵠᐃ[$r.ⵠⵠᐃᐃΔ].id = $r.ⵠⵠᐃᐃΔ;
    this.ⲆⵠΔ[_r.ⲆⵠΔΔΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔᐃᐃⵠᐃΔ], Ob);
    this.ⲆⵠΔ[_r.ⲆⵠΔΔΔ].id = _r.ⲆⵠΔΔΔ;
    this.ᐃᐃᐃ[_r.ⲆⵠΔΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠᐃⵠᐃⵠᐃ], gl);
    this.ᐃᐃᐃ[_r.ⲆⵠΔΔΔ].id = _r.ⲆⵠΔΔΔ;
    this.ⵠⵠᐃ[$r.ⲆⵠΔΔΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔⲆᐃᐃᐃⵠ], gl);
    this.ⵠⵠᐃ[$r.ⲆⵠΔΔΔ].id = $r.ⲆⵠΔΔΔ;
    this.ⲆⵠΔ[_r.ᐃⲆⵠᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ΔΔⵠᐃⲆⲆⲆ], 3);
    this.ⲆⵠΔ[_r.ᐃⲆⵠᐃΔ].id = _r.ᐃⲆⵠᐃΔ;
    this.ᐃᐃᐃ[_r.ᐃⲆⵠᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠΔΔⲆᐃⵠ], hl);
    this.ᐃᐃᐃ[_r.ᐃⲆⵠᐃΔ].id = _r.ᐃⲆⵠᐃΔ;
    this.ⵠⵠᐃ[$r.ᐃⲆⵠᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⲆⲆⵠΔⲆᐃᐃΔ], gl);
    this.ⵠⵠᐃ[$r.ᐃⲆⵠᐃΔ].id = $r.ᐃⲆⵠᐃΔ;
    this.ⲆⵠΔ[_r.ᐃΔⲆⵠΔ] = aw(68, 68, 0, ΔΔ[Xr.ᐃⵠΔⵠⲆⲆⲆ], Tr);
    this.ⲆⵠΔ[_r.ᐃΔⲆⵠΔ].id = _r.ᐃΔⲆⵠΔ;
    this.ᐃᐃᐃ[_r.ᐃΔⲆⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃᐃⵠᐃΔΔ], 3);
    this.ᐃᐃᐃ[_r.ᐃΔⲆⵠΔ].id = _r.ᐃΔⲆⵠΔ;
    this.ⵠⵠᐃ[$r.ᐃΔⲆⵠΔ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔΔΔΔⲆⲆ], nq);
    this.ⵠⵠᐃ[$r.ᐃΔⲆⵠΔ].id = $r.ᐃΔⲆⵠΔ;
    this.ⲆⵠΔ[_r.ⲆᐃⵠΔᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔΔΔΔᐃⲆ], 3);
    this.ⲆⵠΔ[_r.ⲆᐃⵠΔᐃ].id = _r.ⲆᐃⵠΔᐃ;
    this.ᐃᐃᐃ[_r.ⲆᐃⵠΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠΔΔⵠᐃᐃ], 3);
    this.ᐃᐃᐃ[_r.ⲆᐃⵠΔᐃ].id = _r.ⲆᐃⵠΔᐃ;
    this.ⵠⵠᐃ[$r.ⲆᐃⵠΔᐃ] = aw(60, 60, 0, ΔΔ[Xr.ⵠΔⲆⲆⲆⲆᐃ], 3);
    this.ⵠⵠᐃ[$r.ⲆᐃⵠΔᐃ].id = $r.ⲆᐃⵠΔᐃ;
    this.ⲆⵠΔ[_r.ΔⲆᐃΔⵠ] = aw(68, 68, 0, ΔΔ[Xr.ⲆᐃⵠᐃⵠᐃⲆ], 3);
    this.ⲆⵠΔ[_r.ΔⲆᐃΔⵠ].id = _r.ΔⲆᐃΔⵠ;
    this.ᐃᐃᐃ[_r.ΔⲆᐃΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔΔᐃⲆᐃⲆ], ea);
    this.ᐃᐃᐃ[_r.ΔⲆᐃΔⵠ].id = _r.ΔⲆᐃΔⵠ;
    this.ⵠⵠᐃ[$r.ΔⲆᐃΔⵠ] = aw(60, 60, 0, ΔΔ[Xr.ⵠᐃⲆⲆⲆⲆᐃ], ru);
    this.ⵠⵠᐃ[$r.ΔⲆᐃΔⵠ].id = $r.ΔⲆᐃΔⵠ;
    this.ⲆⵠΔ[_r.ⲆⲆᐃᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃΔⵠᐃⵠᐃⲆ], I);
    this.ⲆⵠΔ[_r.ⲆⲆᐃᐃⲆ].id = _r.ⲆⲆᐃᐃⲆ;
    this.ᐃᐃᐃ[_r.ⲆⲆᐃᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⵠⵠΔⵠᐃᐃⵠ], ci);
    this.ᐃᐃᐃ[_r.ⲆⲆᐃᐃⲆ].id = _r.ⲆⲆᐃᐃⲆ;
    this.ⵠⵠᐃ[$r.ⲆⲆᐃᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔⵠΔΔΔΔᐃ], 3);
    this.ⵠⵠᐃ[$r.ⲆⲆᐃᐃⲆ].id = $r.ⲆⲆᐃᐃⲆ;
    this.ⲆⵠΔ[_r.ΔⲆᐃᐃⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠᐃⲆᐃᐃⵠ], 3);
    this.ⲆⵠΔ[_r.ΔⲆᐃᐃⲆ].id = _r.ΔⲆᐃᐃⲆ;
    this.ᐃᐃᐃ[_r.ΔⲆᐃᐃⲆ] = aw(60, 60, 0, ΔΔ[Xr.ᐃᐃᐃⲆⲆᐃΔ], 3);
    this.ᐃᐃᐃ[_r.ΔⲆᐃᐃⲆ].id = _r.ΔⲆᐃᐃⲆ;
    this.ⲆⵠΔ[_r.ᐃᐃΔΔᐃⲆᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⲆΔΔΔᐃᐃᐃᐃ], bb);
    this.ⲆⵠΔ[_r.ᐃᐃΔΔᐃⲆᐃ].id = _r.ᐃᐃΔΔᐃⲆᐃ;
    this.ᐃᐃᐃ[_r.ᐃᐃΔΔᐃⲆᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃΔⵠᐃᐃᐃⲆΔᐃ], 3);
    this.ᐃᐃᐃ[_r.ᐃᐃΔΔᐃⲆᐃ].id = _r.ᐃᐃΔΔᐃⲆᐃ;
    this.ⲆⵠΔ[_r.ΔⲆⲆⲆⵠⵠᐃ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠΔⵠⵠᐃⵠΔⲆ], 3);
    this.ⲆⵠΔ[_r.ΔⲆⲆⲆⵠⵠᐃ].id = _r.ΔⲆⲆⲆⵠⵠᐃ;
    this.ᐃᐃᐃ[_r.ΔⲆⲆⲆⵠⵠᐃ] = aw(60, 60, 0, ΔΔ[Xr.ᐃⵠⲆⵠᐃⲆⲆⵠⵠ], Wg);
    this.ᐃᐃᐃ[_r.ΔⲆⲆⲆⵠⵠᐃ].id = _r.ΔⲆⲆⲆⵠⵠᐃ;
    this.ⲆⵠΔ[_r.ΔⵠΔᐃᐃΔⲆ] = aw(68, 68, 0, ΔΔ[Xr.ᐃᐃⵠⵠᐃᐃΔⲆⵠ], I);
    this.ⲆⵠΔ[_r.ΔⵠΔᐃᐃΔⲆ].id = _r.ΔⵠΔᐃᐃΔⲆ;
    this.ᐃᐃᐃ[_r.ΔⵠΔᐃᐃΔⲆ] = aw(60, 60, 0, ΔΔ[Xr.ⲆᐃᐃΔⲆᐃⲆᐃⵠ], I);
    this.ᐃᐃᐃ[_r.ΔⵠΔᐃᐃΔⲆ].id = _r.ΔⵠΔᐃᐃΔⲆ;
    this.ⲆⵠΔ[_r.ᐃᐃⵠⲆᐃⵠⲆ] = aw(68, 68, 0, ΔΔ[Xr.ⵠΔⲆⲆΔⵠⵠⲆΔ], yr);
    this.ⲆⵠΔ[_r.ᐃᐃⵠⲆᐃⵠⲆ].id = _r.ᐃᐃⵠⲆᐃⵠⲆ;
    this.ᐃᐃᐃ[_r.ᐃᐃⵠⲆᐃⵠⲆ] = aw(60, 60, 0, ΔΔ[Xr.ΔΔΔᐃⲆⵠΔⵠⵠ], bb);
    this.ᐃᐃᐃ[_r.ᐃᐃⵠⲆᐃⵠⲆ].id = _r.ᐃᐃⵠⲆᐃⵠⲆ;
    this.ⲆⵠΔ[_r.ⲆⲆᐃΔΔᐃΔ] = aw(68, 68, 0, ΔΔ[Xr.ⵠⵠᐃⵠΔⲆᐃΔᐃ], Ks);
    this.ⲆⵠΔ[_r.ⲆⲆᐃΔΔᐃΔ].id = _r.ⲆⲆᐃΔΔᐃΔ;
    this.ᐃᐃᐃ[_r.ⲆⲆᐃΔΔᐃΔ] = aw(60, 60, 0, ΔΔ[Xr.ΔᐃᐃⵠⵠᐃΔᐃⲆ], 3);
    this.ᐃᐃᐃ[_r.ⲆⲆᐃΔΔᐃΔ].id = _r.ⲆⲆᐃΔΔᐃΔ;
    this.ᐃⵠΔⲆΔⵠⲆ = function () {
      for (var a = Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ, b = 10, c = Th, d = 0; a.length > d; d++) {
        if (d > 0 && !(d % Vn)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += Zk + a[d].info.height;
      }
    };
    this.ⲆΔⵠΔᐃⲆⵠ = function () {
      var a = Math.floor((J + this.ⲆⵠΔ[0].info.ⵠⵠ[0].width) * Math.floor((3 + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / qg) + 35);
      for (var b = 0; this.ⲆⵠΔ.length > b; b++) {
        if (this.ⲆⵠΔ[b]) {
          this.ⲆⵠΔ[b].info.translate.x = a;
          this.ⲆⵠΔ[b].info.translate.y = 22;
        }
      }
      this.ⵠᐃⲆΔΔⲆΔ.info.translate.x = a + 17;
      this.ⵠᐃⲆΔΔⲆΔ.info.translate.y = 22 + ΔΔ[Xr.ΔⲆᐃΔᐃᐃⲆ].height;
      this.ΔΔᐃⵠⵠⵠⵠ.info.translate.x = a + m;
      this.ΔΔᐃⵠⵠⵠⵠ.info.translate.y = 30;
      this.ⲆΔⵠᐃⲆⵠⲆ.info.translate.x = a + Sg;
      this.ⲆΔⵠᐃⲆⵠⲆ.info.translate.y = 22 + ΔΔ[Xr.ΔⲆᐃΔᐃᐃⲆ].height;
    };
    this.ᐃᐃᐃⲆᐃⵠⲆⲆⲆ = function () {
      var a = Math.floor((lo - ΔΔ[Xr.ⲆᐃΔᐃⵠⲆⲆ][0].width) / Gl);
      for (var b = 0; this.ⲆΔⵠᐃᐃ.length > b; b++) {
        this.ⲆΔⵠᐃᐃ[b].button.info.translate.x = a;
        this.ⲆΔⵠᐃᐃ[b].button.info.translate.y = -13;
      }
    };
    this.ⲆⵠᐃⲆⲆⲆⵠ = function () {
      var a = 12 + Math.floor(Math.floor((3 + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / 4) * (yt + this.ᐃᐃᐃᐃⵠΔⲆ.info.ⵠⵠ[0].width) + 35);
      this.ᐃᐃᐃᐃⵠΔⲆ.info.translate.x = a;
      this.ᐃᐃᐃᐃⵠΔⲆ.info.translate.y = 33;
      this.ΔⵠⲆⵠΔⵠⲆ.info.translate.x = this.ᐃᐃᐃᐃⵠΔⲆ.info.translate.x;
      this.ΔⵠⲆⵠΔⵠⲆ.info.translate.y = 137;
      this.ᐃⲆΔⵠᐃⲆⲆ.info.translate.x = this.ᐃᐃᐃᐃⵠΔⲆ.info.translate.x;
      this.ᐃⲆΔⵠᐃⲆⲆ.info.translate.y = 240;
    };
    this.ⵠᐃᐃᐃⲆΔΔ = function () {
      var a = oq + Math.floor((10 + this.ΔᐃⵠⲆⵠⵠΔ.info.ⵠⵠ[0].width) * Math.floor((3 + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / ol) + 35);
      this.ΔᐃⵠⲆⵠⵠΔ.info.translate.x = a;
      this.ΔᐃⵠⲆⵠⵠΔ.info.translate.y = 36;
      a += 83;
      this.ⲆΔΔⲆΔⲆᐃ.info.translate.x = a;
      this.ⲆΔΔⲆΔⲆᐃ.info.translate.y = 36;
      this.ΔⲆΔᐃΔΔⲆ.info.translate.x = a;
      this.ΔⲆΔᐃΔΔⲆ.info.translate.y = 36;
      this.ᐃⵠᐃⵠᐃᐃΔ.info.translate.x = a;
      this.ᐃⵠᐃⵠᐃᐃΔ.info.translate.y = 36;
      this.ⵠᐃᐃΔⲆΔᐃ.info.translate.x = a;
      this.ⵠᐃᐃΔⲆΔᐃ.info.translate.y = 36;
      this.ⲆⵠⲆΔΔⲆⲆ.info.translate.x = a;
      this.ⲆⵠⲆΔΔⲆⲆ.info.translate.y = 36;
    };
    this.ⲆΔⲆᐃΔΔⲆ = function () {
      var a = Vh + Math.floor(Math.floor((hl + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / ks) * (te + this.ⵠⵠⲆⵠΔⵠΔ.info.ⵠⵠ[0].width) + 35);
      this.ⵠⵠⲆⵠΔⵠΔ.info.translate.x = a;
      this.ⵠⵠⲆⵠΔⵠΔ.info.translate.y = 36;
      a += 83;
      this.ΔᐃΔⲆᐃΔᐃ.info.translate.x = a;
      this.ΔᐃΔⲆᐃΔᐃ.info.translate.y = 36;
    };
    this.ⲆΔᐃⵠΔⲆΔ = function () {
      var a = Math.floor((Bo + this.ⲆΔⲆᐃⵠⵠᐃ.info.ⵠⵠ[0].width) * Math.floor((Jb + Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ.length) / 4) + 35);
      this.ⲆΔⲆᐃⵠⵠᐃ.info.translate.x = a;
      this.ⲆΔⲆᐃⵠⵠᐃ.info.translate.y = 22;
    };
    this.ΔᐃⲆᐃΔᐃⵠ = function () {
      var a = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ;
      if (Kh < a.length) {
        var b = Math.floor((lo - Xw.ᐃΔᐃⵠ.max * (a[0].info.width + 5)) / Jt);
      }
      for (var c = 0; c < a.length; c++) {
        a[c].info.translate.x = b + (a[c].info.width + Oj) * c;
        a[c].info.translate.y = jq - a[c].info.width - Bo;
        this.ⲆⵠᐃΔⲆ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ⲆⵠᐃΔⲆ[a[c].id].info.translate.y = a[c].info.translate.y - this.ⲆⵠᐃΔⲆ[a[c].id].info.ⵠⵠ[0].height - 6;
      }
    };
    var o;
    var p = 0;
    function q() {
      j.ᐃⲆΔ();
      if (++p == 30) {
        j.ᐃΔⲆΔⵠΔⵠ();
        j.ᐃⲆΔ();
        return;
      }
      dj.setTimeout(q, 33);
    }
    this.ᐃⵠⲆΔⲆ = function (a) {
      if (Xw.Ⲇᐃᐃᐃⵠ.open) {
        Xw.Ⲇᐃᐃᐃⵠ.ᐃⵠⲆΔⲆ();
      }
      if (Xw.ⲆΔⵠⲆⵠ.open) {
        Xw.ⲆΔⵠⲆⵠ.ᐃⵠⲆΔⲆ();
      }
      document.getElementById("team_box").style.display = "none";
      j.ⲆΔⵠΔⲆ.style.display = "none";
      j.ⲆΔⵠΔⲆ.open = false;
      j.sign.style.display = "none";
      j.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      j.ⲆⵠⲆⵠ.open = uh;
      document.getElementById("option_in_game").style.display = "none";
      j.options.open = _g;
      document.getElementById("sure_delete").style.display = "none";
      j.ⵠⵠⵠΔ.open = false;
      document.getElementById("cancel_sure_delete").style.display = "none";
      j.ΔⲆⲆᐃⵠ.open = Bh;
      document.getElementById("chronoquest").style.display = "none";
      j.Δⵠᐃᐃ.open = false;
      o = a;
      j.ΔΔⲆᐃⲆᐃⲆ();
      j.ⲆΔ.style.cursor = j.ⵠΔΔⲆⲆᐃΔ;
      $w.ᐃⵠⲆΔⲆ();
      g = -hd;
      t();
      xf();
    };
    var g = -Ug;
    function t() {
      j.ᐃⲆΔ();
      if (++g == 30) {
        j.stop();
        o();
        return;
      }
      dj.setTimeout(t, 33);
    }
    this.ΔⵠᐃΔΔ = false;
    this.stop = function () {
      this.ΔⵠᐃΔΔ = uh;
    };
    this.ⲆᐃⵠⲆⵠ = function () {
      Ⲇⵠᐃⵠ.ΔᐃᐃⵠᐃΔΔΔⵠ();
      j.ΔⵠᐃΔΔ = Fg;
      g = -ie;
      p = 0;
      q();
    };
    this.ᐃⲆΔ = function () {
      this.ⵠⵠⵠⵠ.translate.x = lo - this.ⵠⵠⵠⵠ.ⵠⵠ.width - 10;
      this.ⵠⵠⵠⵠ.translate.y = 5;
      mf.ΔᐃᐃΔⲆ.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[Xr.ⲆⲆⵠΔΔⲆΔ][Zj].width - 85;
      mf.ΔᐃᐃΔⲆ.translate.y = 10;
      this.ⲆⵠⲆⵠ.button.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[Xr.ⲆᐃⵠᐃⵠⲆᐃ][Bg].width - 10;
      this.ⲆⵠⲆⵠ.button.info.translate.y = Ra;
      this.Δⵠᐃᐃ.button.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[Xr.ⵠᐃⲆᐃⵠᐃΔ][Eh].width - 20;
      this.Δⵠᐃᐃ.button.info.translate.y = this.ⲆⵠⲆⵠ.button.info.translate.y + ΔΔ[Xr.ⲆᐃⵠᐃⵠⲆᐃ][Bg].height + 5;
      this.options.button.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[Xr.ⵠⵠⵠᐃⵠΔⲆ][0].width - Mg;
      this.options.button.info.translate.y = this.Δⵠᐃᐃ.button.info.translate.y + ΔΔ[Xr.ⵠⵠⵠᐃⵠΔⲆ][0].height + 18;
      this.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[Xr.ⵠⵠⵠᐃⵠΔⲆ][0].width - A;
      this.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.info.translate.y = this.options.button.info.translate.y + ΔΔ[Xr.ⵠᐃᐃᐃΔΔᐃ][0].height;
      this.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[Xr.ⵠⵠⵠᐃⵠΔⲆ][tg].width - 20;
      this.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.info.translate.y = this.options.button.info.translate.y + ΔΔ[Xr.ⵠᐃᐃᐃΔΔᐃ][zl].height;
      this.ⲆΔⵠΔⲆ.button.info.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[Xr.ⵠⲆΔΔΔΔⲆ][Bg].width - vi;
      this.ⲆΔⵠΔⲆ.button.info.translate.y = this.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.info.translate.y + ΔΔ[Xr.ⵠⲆΔΔΔΔⲆ][Bg].height;
      Xw.ᐃΔᐃᐃⲆ.translate.x = this.ⵠⵠⵠⵠ.translate.x - 63 - 85;
      Xw.ᐃΔᐃᐃⲆ.translate.y = 100;
      Xw.ΔΔⵠᐃᐃ.translate.x = this.ⵠⵠⵠⵠ.translate.x - ΔΔ[Xr.ᐃⵠΔⵠᐃⲆⲆ].width - 85;
      Xw.ΔΔⵠᐃᐃ.translate.y = Xw.ᐃΔᐃᐃⲆ.translate.y + jn + ΔΔ[Xr.ΔᐃⵠⵠᐃⲆᐃ].height;
      this.ΔΔΔⲆⵠ.translate.y = jq - 3 - 193;
      this.ΔΔΔⲆⵠ.translate.x = lo - 3 - 193;
      this.ⲆΔᐃΔ.translate.x = 5;
      this.ⲆΔᐃΔ.translate.y = jq - this.ⲆΔᐃΔ.ⵠⵠ.height - 5;
      this.ⵠΔⲆⵠΔ.button.info.translate.x = bo - 91 / pq;
      this.ⵠΔⲆⵠΔ.button.info.translate.y = 50;
      this.ᐃⵠΔⲆΔⵠⲆ();
      this.ΔᐃⲆᐃΔᐃⵠ();
      this.ⲆΔⵠΔᐃⲆⵠ();
      this.ⲆΔᐃⵠΔⲆΔ();
      this.ⲆΔⲆᐃΔΔⲆ();
      this.ⵠᐃᐃᐃⲆΔΔ();
      this.ⲆⵠᐃⲆⲆⲆⵠ();
      this.ᐃᐃᐃⲆᐃⵠⲆⲆⲆ();
      this.sign.ⲆⲆΔⵠⵠᐃΔ();
      Sm();
      Xw.Ⲇᐃᐃᐃⵠ.ᐃⲆΔ();
      Xw.ⲆΔⵠⲆⵠ.ᐃⲆΔ();
      this.ΔΔᐃⲆⵠᐃᐃΔΔ.ᐃⲆΔ();
      this.ⲆⵠⲆⵠ.ⵠⲆΔΔⲆᐃΔ.ᐃⲆΔ();
      this.ⲆⵠⲆⵠ.list.ᐃⲆΔ();
      this.ⵠⵠⵠΔ.ᐃⲆΔ();
      this.ΔⲆⲆᐃⵠ.ᐃⲆΔ();
      this.Δⵠᐃᐃ.ᐃⲆΔ();
      this.ⵠΔⲆⵠΔ.ᐃⲆΔ();
      this.options.ᐃⲆΔ();
      this.ⲆΔⵠΔⲆ.ᐃⲆΔ();
      this.sign.ᐃⲆΔ();
      var a = Hi;
      if (p != 30) {
        a = 1500 / (p + 1) - 50;
      }
      if (g != -1) {
        a = -(1500 / (30 - g + 1) - 48);
      }
      this.ⵠΔⲆⵠΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠⵠⵠⵠ.translate.y -= a > 0 ? a : -a;
      Xw.ᐃΔᐃᐃⲆ.translate.y -= a > Rs ? a : -a;
      Xw.ΔΔⵠᐃᐃ.translate.y -= a > 0 ? a : -a;
      this.ⲆⵠⲆⵠ.button.info.translate.y -= Pg < a ? a : -a;
      this.Δⵠᐃᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ⲆΔⵠΔⲆ.button.info.translate.y -= a > Da ? a : -a;
      this.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.info.translate.y -= a > ps ? a : -a;
      this.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.info.translate.y -= a > 0 ? a : -a;
      mf.ΔᐃᐃΔⲆ.translate.y -= a > 0 ? a : -a;
      this.ⲆΔᐃΔ.translate.y -= a < Eh ? a : -a;
      this.ΔΔΔⲆⵠ.translate.y -= Lr > a ? a : -a;
    };
    this.ᐃΔⵠΔΔᐃΔΔΔ = function () {
      if (!Xw.ᐃⲆᐃⲆⵠ.enabled && this.ⵠⲆⲆⲆᐃᐃⲆ && !Xw.ⲆᐃⲆⵠᐃ) {
        Vm();
      }
      rp();
      (function () {
        var a = mf.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ];
        if (mf.mode === lw.ⵠᐃᐃⲆⲆ || lw.ⵠΔᐃᐃⲆ === mf.mode || lw.ΔΔΔΔᐃ === mf.mode || mf.mode === lw.ⲆⲆⲆⲆᐃ || lw.ᐃⲆⵠⲆΔΔᐃ === mf.mode || lw.ᐃᐃⲆΔⵠ === mf.mode) {
          for (var b = Lr; b < a.length; b++) {
            a[b].Ⲇⵠᐃⵠᐃⵠᐃ();
          }
        } else if (mf.mode === lw.ⲆⵠⲆⵠⲆⲆⵠ) {
          for (b = wj; b < a.length; b++) {
            if (Xw.ᐃⲆⲆΔΔᐃᐃ || Xw.ΔΔⵠᐃᐃ.enabled || a[b].ⲆᐃΔⲆ.ⲆⲆΔⵠᐃ !== "spectator") {
              a[b].Ⲇⵠᐃⵠᐃⵠᐃ();
            }
          }
        }
      })();
      ka.ΔⵠⲆᐃⵠΔⵠ();
      if (this.ⵠⲆⲆⲆᐃᐃⲆ) {
        Dm();
        if (Oq === this.ⵠΔΔⵠⵠΔᐃ) {
          this.ⲆⵠⲆⵠ.button.ᐃⵠᐃⵠ(d);
        }
        if (mf.mode !== lw.ΔΔΔΔᐃ && mf.mode !== lw.ⲆⲆⲆⲆᐃ && lw.ᐃⲆⵠⲆΔΔᐃ !== mf.mode && xt === this.ⵠⵠⵠᐃᐃᐃΔ) {
          this.Δⵠᐃᐃ.button.ᐃⵠᐃⵠ(d);
        }
        this.options.button.ᐃⵠᐃⵠ(d);
        if (this.ⲆⲆⲆᐃΔⵠᐃ === 1) {
          this.ⲆΔⵠΔⲆ.button.ᐃⵠᐃⵠ(d);
        }
        if ($w.ⲆᐃⵠⲆⵠ) {
          this.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.ᐃⵠᐃⵠ(d);
        } else {
          this.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.ᐃⵠᐃⵠ(d);
        }
        Hm();
        np();
        this.ⲆΔᐃΔ.ᐃⵠᐃⵠ();
        sp();
        Xm();
        $m();
        Nm();
        Om();
        xm();
        jm();
        (function () {
          if (!Xw.ΔⲆΔΔ.open && !Xw.ᐃⲆⵠⲆΔ.open && !Xw.ᐃⵠᐃᐃ.open && !Xw.ⲆᐃⵠΔ.open && !Xw.ΔΔᐃⵠ.open) {
            Xw.ᐃⵠⵠΔⲆ.open = false;
            var a = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
            var b = lw.ᐃΔⵠⵠⲆΔΔⵠⵠ;
            if (a) {
              for (var c = Hi; mf.ⲆΔⲆ[ow.ⲆⵠⲆⵠⵠ].length > c; c++) {
                var d = mf.ⲆΔⲆ[ow.ⲆⵠⲆⵠⵠ][c];
                var e = ᐃⵠΔⲆ.ΔΔⵠΔ(d, a);
                if (b > e) {
                  b = e;
                  Xw.ᐃⵠⵠΔⲆ.open = true;
                  Xw.ᐃⵠⵠΔⲆ.Ⲇⵠⵠᐃ = d.Ⲇⵠⵠᐃ;
                  Xw.ᐃⵠⵠΔⲆ.ⵠΔᐃⲆⲆ = d.id;
                }
              }
            }
          }
        })();
        Im();
        km();
        Rm();
        Fm();
        Sm();
        Jm();
      }
      if (Xw.ᐃⲆᐃⲆⵠ.enabled) {
        Bm();
      }
      _m();
      if (this.ⵠⲆⲆⲆᐃᐃⲆ && this.ᐃⲆⲆᐃⲆΔᐃ === Oq) {
        ep();
      }
      Xw.ⵠⲆⲆⵠΔᐃᐃ.ᐃⵠᐃⵠ();
      Xw.alert.ᐃⵠᐃⵠ("#FFF", "#000");
      if (this.ⵠⲆⲆⲆᐃᐃⲆ) {
        Xw.ᐃⲆᐃⲆⵠ.ᐃⵠᐃⵠ();
        Xw.ⵠΔⲆⵠΔ.ᐃⵠᐃⵠ();
        Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.ᐃⵠᐃⵠ(yf.ⲆⲆΔⲆ.x, yf.ⲆⲆΔⲆ.y);
      }
      Qm();
    };
    this.ⲆⲆΔᐃΔΔⵠⲆᐃ = function () {
      Xw.ⵠᐃⲆ.ᐃⲆΔ();
      Xw.ⲆΔᐃΔ.ᐃⲆΔ();
      if (!Xw.reconnect.enabled && Xw.ⲆᐃΔⵠⲆ) {
        Xw.control.ᐃⲆΔ();
        Xw.ᐃΔᐃᐃⲆ.ᐃⲆΔ();
      }
      mf.ᐃⲆΔ();
      this.Δⵠᐃᐃ.ⲆⵠΔΔΔⵠⵠΔᐃ();
    };
    this.ⲆΔᐃⵠⵠⲆⵠⲆⲆ = function () {
      Ov();
    };
    this.ⵠⲆΔΔΔⲆΔΔΔ = function () {
      Ⲇⵠᐃⵠ.ΔⲆᐃⵠΔⵠᐃᐃᐃ();
      Ⲇⵠᐃⵠ.ᐃⵠⲆⲆⲆⵠᐃⵠⵠ();
      Ⲇⵠᐃⵠ.ⵠᐃⵠⲆⲆⵠᐃᐃΔ();
      Ⲇⵠᐃⵠ.ᐃΔΔⵠΔⵠΔᐃᐃ();
    };
    this.ᐃⵠᐃⵠ = function () {
      if (!Xw.reconnect.enabled && Xw.ⲆᐃΔⵠⲆ) {
        this.ⵠⲆΔΔΔⲆΔΔΔ();
      }
      $w.ᐃᐃⵠᐃᐃⲆᐃΔΔ();
      this.ⲆⲆΔᐃΔΔⵠⲆᐃ();
      if (vf.ᐃⲆΔⵠᐃΔᐃ !== hd) {
        this.ⲆΔᐃⵠⵠⲆⵠⲆⲆ();
        this.ᐃΔⵠΔΔᐃΔΔΔ();
      } else {
        var a = Ⲇⵠ.ⵠⵠⵠᐃⵠΔΔ;
        Mm(d, a, bo - a.width / fs, lq - a.height / eh, a.width / xj, a.height / 2);
      }
    };
    this.ΔⲆΔΔⵠⲆⲆ = function (a) {
      if (Xw.Ⲇᐃᐃᐃⵠ.open && a.keyCode === 27) {
        Xw.Ⲇᐃᐃᐃⵠ.ᐃⵠⲆΔⲆ();
      } else if (Xw.ⲆΔⵠⲆⵠ.open && a.keyCode === 27) {
        Xw.ⲆΔⵠⲆⵠ.ᐃⵠⲆΔⲆ();
      } else if (Xw.Ⲇᐃᐃᐃⵠ.open || Xw.ⲆΔⵠⲆⵠ.open || a.keyCode != 79 || g != -1) {
        if (a.keyCode == 13 && g == -1) {
          if (Xw.ⲆΔⵠⲆⵠ.open) {
            Xw.ⲆΔⵠⲆⵠ.ⵠΔΔⵠⲆⵠᐃ();
          } else {
            Xw.Ⲇᐃᐃᐃⵠ.ⲆᐃⵠⲆⵠ();
          }
        } else if (!Xw.Ⲇᐃᐃᐃⵠ.open && !Xw.ⲆΔⵠⲆⵠ.open) {
          if (a.keyCode === 82) {
            Xw.ᐃΔᐃᐃⲆ.ᐃⵠⲆⵠⵠᐃᐃ();
          } else if (a.keyCode !== 80 || mf.mode !== lw.ⲆⵠⲆⵠⲆⲆⵠ || Xw.ᐃⲆⲆΔΔᐃᐃ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (Xw.ΔᐃⲆⵠ.id < 0) {
                var b = a.keyCode - 49;
                var c = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ[b];
                if (c) {
                  Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              Xw.ⲆⲆΔΔΔᐃᐃ = !Xw.ⲆⲆΔΔΔᐃᐃ;
            } else if (a.keyCode == 71) {
              Xw.ΔᐃⲆⵠ.ⵠΔⵠⵠⵠᐃⵠΔⲆ();
            }
          } else {
            Xw.ΔΔⵠᐃᐃ.ᐃⵠⲆⵠⵠᐃᐃ();
          }
        }
      } else {
        Xw.ⲆΔⵠⲆⵠ.ⵠᐃᐃⲆⲆᐃⲆᐃⵠ();
      }
      zf.up(a);
    };
    this.ᐃΔΔᐃⲆᐃΔ = function (a) {
      zf.down(a);
      if (a.keyCode == 8 && !Xw.Ⲇᐃᐃᐃⵠ.open && !Xw.ⲆΔⵠⲆⵠ.open) {
        a.preventDefault();
      }
    };
    this.ⲆⵠΔᐃⵠΔⲆ = function (b) {
      yf.ⲆⲆΔⲆ = $v(j.ⲆΔ, b);
      var c = false;
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0) {
        j.ΔΔΔⲆⵠ.focus(yf.ⲆⲆΔⲆ);
      }
      var d = Xw.ΔⲆΔΔ;
      if (tg > Xw.ΔᐃⲆⵠ.id && d.id >= 0 && (!Xw.ΔⲆΔΔ.lock || Xw.ΔⲆΔΔ.Ⲇⵠⵠᐃ === Xw.id)) {
        c |= j.ⲆⵠΔ[Xw.ΔⲆΔΔ.id].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      var e = Xw.ᐃⵠᐃᐃ;
      if (e.open && e.ΔⲆⵠⵠΔ > 0) {
        c |= j.ΔᐃΔⲆᐃΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      var f = Xw.ΔΔᐃⵠ;
      if (f.open && f.ΔⲆⲆᐃΔᐃᐃ > Db) {
        c |= j.ⲆΔΔⲆΔⲆᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
        c |= j.ΔⲆΔᐃΔΔⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
        c |= j.ᐃⵠᐃⵠᐃᐃΔ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
        c |= j.ⵠᐃᐃΔⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
        c |= j.ⲆⵠⲆΔΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      var k = Xw.ⲆᐃⵠΔ;
      if (k.open && k.ⲆⲆⲆᐃΔⲆΔ > Eh) {
        c |= j.ᐃⲆΔⵠᐃⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      if (Xw.sign.open) {
        c |= j.sign.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      if (!Xw.ΔⲆΔΔ.lock) {
        if (Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ) {
          c |= j.ⲆΔⵠᐃⲆⵠⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
        }
      }
      if (Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ) {
        c |= j.ⵠᐃⲆΔΔⲆΔ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      if (Xw.ΔᐃⲆⵠ.id < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open && !j.ⲆΔⵠΔⲆ.open) {
        for (var a = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ, m = ya; a.length > m; m++) {
          var n = a[m].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
          c |= n;
          if (n) {
            Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.start(m, yf.ⲆⲆΔⲆ);
          }
          if (d.open && (d.id < 0 || d.id == a[m].id) || Xw.ᐃⲆⵠⲆΔ.open && _r.ⵠᐃⵠⵠ === a[m].id || Xw.ᐃⵠⵠΔⲆ.open && a[m].id === _r.ΔΔᐃΔΔ || Xw.ⲆᐃⵠΔ.open && (_r.ⵠᐃⵠⵠ === a[m].id || a[m].id === _r.ᐃⵠᐃⵠᐃ) || Xw.ᐃⵠᐃᐃ.open && _r.ⲆΔΔᐃⵠ === a[m].id || Xw.ΔΔᐃⵠ.open && _r.ⵠᐃⵠⵠ === a[m].id) {
            c |= j.ⲆⵠᐃΔⲆ[a[m].id].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
          }
        }
      }
      if (Xw.ⲆᐃⵠᐃⲆ.open) {
        c |= j.ⲆᐃⵠᐃⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      if (-Xn != j.ᐃⵠᐃᐃⲆ) {
        if (c |= j.ⲆΔⵠᐃᐃ[j.ᐃⵠᐃᐃⲆ].button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv)) {
          var o = true;
        }
      } else {
        o = dr;
      }
      if (Xw.ΔᐃⲆⵠ.id < 0 && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !o && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.ⲆΔⵠΔⲆ.open && !Xw.ⲆᐃⲆⵠᐃ) {
        a = Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ;
        m = 0;
        for (; a.length > m; m++) {
          c |= a[m].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
        }
      }
      if (Xw.ΔᐃⲆⵠ.id < 0 && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && Xw.ⵠΔⲆⵠΔ.open && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
        c |= j.ⵠΔⲆⵠΔ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < Db && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
        c |= j.ⲆⵠⲆⵠ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
        c |= j.options.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open) {
        c |= j.ⲆΔⵠΔⲆ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < Kh && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open && !j.ⲆΔⵠΔⲆ.open) {
        if ($w.ⲆᐃⵠⲆⵠ) {
          c |= j.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
        } else {
          c |= j.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
        }
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < Eh && !j.ⲆⵠⲆⵠ.open && !j.ⲆΔⵠΔⲆ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && mf.mode !== lw.ΔΔΔΔᐃ && mf.mode !== lw.ⲆⲆⲆⲆᐃ && mf.mode !== lw.ᐃⲆⵠⲆΔΔᐃ) {
        c |= j.Δⵠᐃᐃ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Vv);
      }
      if (!c && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open && !j.sign.open) {
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ >= gu) {
          Ⲇⵠᐃⵠ.ΔᐃⲆⵠⲆⵠᐃⵠΔ();
        } else if (!o) {
          yf.down();
        }
      }
    };
    this.ΔᐃᐃⲆⵠⲆᐃ = function (b) {
      yf.ⲆⲆΔⲆ = $v(j.ⲆΔ, b);
      yf.up();
      if (!Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.release()) {
        var c = Xw.ΔⲆΔΔ;
        var d = Xw.ᐃⲆⵠⲆΔ;
        var e = Xw.ᐃⵠⵠΔⲆ;
        var f = Xw.ᐃⵠᐃᐃ;
        var i = Xw.ΔΔᐃⵠ;
        var k = Xw.ⲆᐃⵠΔ;
        if (Xw.control.attack) {
          Xw.control.attack = In;
          Ⲇⵠᐃⵠ.ΔⲆⲆΔⵠⵠⲆΔⲆ();
        }
        if (-mk != j.ᐃⵠᐃᐃⲆ) {
          var m = j.ⲆΔⵠᐃᐃ[j.ᐃⵠᐃᐃⲆ].button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            j.ⲆΔⵠᐃᐃ[j.ᐃⵠᐃᐃⲆ].action();
          }
        }
        if (tt > Xw.ΔᐃⲆⵠ.id && tg <= c.id && !j.ⵠⵠⵠΔ.open) {
          if (!Xw.ΔⲆΔΔ.lock || Xw.ΔⲆΔΔ.Ⲇⵠⵠᐃ === Xw.id) {
            if (m = j.ⲆⵠΔ[Xw.ΔⲆΔΔ.id].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
              Ⲇⵠᐃⵠ.ⲆⲆΔⲆΔⵠΔΔⵠ(c);
            }
          }
        }
        if ((f = Xw.ᐃⵠᐃᐃ).open && f.ΔⲆⵠⵠΔ > 0 && !j.ⵠⵠⵠΔ.open) {
          if (m = j.ΔᐃΔⲆᐃΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
            Ⲇⵠᐃⵠ.ΔᐃᐃΔᐃⲆⲆᐃⲆ(f);
          }
        }
        if ((i = Xw.ΔΔᐃⵠ).open && i.ΔⲆⲆᐃΔᐃᐃ > 0 && !j.ⵠⵠⵠΔ.open) {
          switch (i.type) {
            case ow.ⲆᐃΔⲆⵠ:
              if (m = j.ⲆΔΔⲆΔⲆᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
                Ⲇⵠᐃⵠ.ΔⲆⵠΔΔΔⵠ(i);
              }
              break;
            case ow.ⲆΔᐃⵠⲆ:
              if (m = j.ΔⲆΔᐃΔΔⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
                Ⲇⵠᐃⵠ.ΔⲆⵠΔΔΔⵠ(i);
              }
              break;
            case ow.ΔⵠᐃⲆⵠ:
              if (m = j.ᐃⵠᐃⵠᐃᐃΔ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
                Ⲇⵠᐃⵠ.ΔⲆⵠΔΔΔⵠ(i);
              }
              break;
            case ow.ΔⲆⵠⵠⵠ:
              if (m = j.ⵠᐃᐃΔⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
                Ⲇⵠᐃⵠ.ΔⲆⵠΔΔΔⵠ(i);
              }
              break;
            case ow.ⲆⲆⵠⵠΔ:
              if (m = j.ⲆⵠⲆΔΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
                Ⲇⵠᐃⵠ.ΔⲆⵠΔΔΔⵠ(i);
              }
          }
        }
        if ((k = Xw.ⲆᐃⵠΔ).open && k.ⲆⲆⲆᐃΔⲆΔ > 0 && !j.ⵠⵠⵠΔ.open) {
          if (m = j.ᐃⲆΔⵠᐃⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
            Ⲇⵠᐃⵠ.ⲆⵠⵠᐃⵠΔⲆΔⲆ(k);
          }
        }
        if (Xw.sign.open && !j.ⵠⵠⵠΔ.open) {
          if (m = j.sign.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
            j.sign.select();
          }
        }
        if (!Xw.ΔⲆΔΔ.lock && !j.ⵠⵠⵠΔ.open) {
          if (Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ && (m = j.ⲆΔⵠᐃⲆⵠⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv))) {
            Ⲇⵠᐃⵠ.ⵠⲆⲆⲆⲆᐃⵠΔⲆ(c);
          }
        }
        if (Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ && !j.ⵠⵠⵠΔ.open && (m = j.ⵠᐃⲆΔΔⲆΔ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv))) {
          Ⲇⵠᐃⵠ.ⲆⵠᐃⲆΔⵠⲆⵠⲆ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (Xw.ⲆᐃⵠᐃⲆ.open) {
          if (m = j.ⲆᐃⵠᐃⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
            Ⲇⵠᐃⵠ.ⲆᐃⵠᐃⲆ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.id < 0 && !Xw.ᐃⲆᐃⲆⵠ.enabled && !j.ⵠⵠⵠΔ.open) {
          for (var l = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ, o = 0; o < l.length; o++) {
            if (m = l[o].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
              if (b.which != xt || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == 3) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0) {
                  j.ⵠⵠⵠΔ.ⲆᐃⵠᐃΔᐃΔ(l[o].id);
                }
              } else {
                Ⲇⵠᐃⵠ.ΔᐃΔᐃΔ(l[o].id, o);
              }
            } else if (c.open && (zl > c.id || c.id === l[o].id)) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0) {
                Ⲇⵠᐃⵠ.ᐃΔΔⲆⲆΔⲆᐃᐃ(c, l[o].id, b.shiftKey ? Ra : 1);
              }
            } else if (e.open && l[o].id === _r.ΔΔᐃΔΔ) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < Pg) {
                Ⲇⵠᐃⵠ.ⵠⲆⲆΔⲆⲆⲆΔΔ(e);
              }
            } else if (d.open && _r.ⵠᐃⵠⵠ === l[o].id) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < gu) {
                Ⲇⵠᐃⵠ.ᐃᐃⲆᐃⵠⵠΔⵠΔ(d, b.shiftKey ? 10 : 1);
              }
            } else if (f.open && _r.ⲆΔΔᐃⵠ === l[o].id) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) && Kh > Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ) {
                Ⲇⵠᐃⵠ.ⲆΔⵠⲆⵠᐃΔΔⲆ(f, b.shiftKey ? Th : jh);
              }
            } else if (i.open && l[o].id === _r.ⵠᐃⵠⵠ) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0) {
                Ⲇⵠᐃⵠ.ᐃⵠΔᐃΔᐃᐃⵠⲆ(i, b.shiftKey ? jn : 1);
              }
            } else if (k.open && (_r.ⵠᐃⵠⵠ === l[o].id || _r.ᐃⵠᐃⵠᐃ === l[o].id)) {
              if ((m = j.ⲆⵠᐃΔⲆ[l[o].id].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0) {
                if (l[o].id === _r.ⵠᐃⵠⵠ) {
                  Ⲇⵠᐃⵠ.ΔᐃⲆᐃⵠⲆⲆ(k, b.shiftKey ? yl : Xn, 0);
                } else {
                  Ⲇⵠᐃⵠ.ΔᐃⲆᐃⵠⲆⲆ(k, 0, b.shiftKey ? Wb : 1);
                }
              }
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.id < 0 && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !Xw.ᐃⲆᐃⲆⵠ.enabled && !j.ⵠⵠⵠΔ.open && !Xw.ⲆᐃⲆⵠᐃ) {
          l = Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ;
          o = tt;
          for (; o < l.length; o++) {
            if (m = l[o].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
              ⵠⵠⲆΔᐃ = Ⲇⵠᐃⵠ.ⲆᐃΔᐃᐃⵠᐃᐃᐃ(l[o].id);
              if (ⵠⵠⲆΔᐃ && ga) {
                ga("send", "event", "Game", "craft", es[Xs[l[o].id].Δⵠⵠⵠ].name);
              }
            }
          }
        }
        if (In > Xw.ΔᐃⲆⵠ.id && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && Xw.ⵠΔⲆⵠΔ.open && !j.ⲆΔⵠΔⲆ.open && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open) {
          if (m = j.ⵠΔⲆⵠΔ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv)) {
            Zw.ⵠΔⲆⵠΔ.select();
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ⲆΔⵠΔⲆ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open) {
          if ($w.ⲆᐃⵠⲆⵠ) {
            if (m = j.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
              $w.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = j.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
            $w.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
          if (m = j.options.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
            j.options.ΔᐃⵠΔᐃⲆΔⲆⵠ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open && j.ⲆⲆⲆᐃΔⵠᐃ === mk) {
          if (m = j.ⲆΔⵠΔⲆ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
            j.ⲆΔⵠΔⲆ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < Rq && !j.ⵠⵠⵠΔ.open && !j.ⲆΔⵠΔⲆ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && cu === j.ⵠΔΔⵠⵠΔᐃ) {
          if (m = j.ⲆⵠⲆⵠ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
            j.ⲆⵠⲆⵠ.ⵠⵠⲆⲆᐃΔΔᐃⵠ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.ⲆΔⵠΔⲆ.open && lw.ΔΔΔΔᐃ !== mf.mode && lw.ⲆⲆⲆⲆᐃ !== mf.mode && lw.ᐃⲆⵠⲆΔΔᐃ !== mf.mode && j.ⵠⵠⵠᐃᐃᐃΔ === 1) {
          if (m = j.Δⵠᐃᐃ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Wv)) {
            j.Δⵠᐃᐃ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (Xw.ΔᐃⲆⵠ.ΔⲆⵠΔᐃ && gl == b.which) {
          j.ΔⲆⲆᐃⵠ.ⲆᐃⵠᐃΔᐃΔ();
        }
      }
    };
    this.ⲆᐃⵠⵠⲆⲆⲆ = false;
    this.ⵠᐃᐃᐃⵠⲆᐃ = function (b) {
      yf.ⲆⲆΔⲆ = $v(j.ⲆΔ, b);
      var d = false;
      Zw.Ⲇⵠᐃⵠⵠ.display = Bg;
      Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.ᐃⵠᐃᐃΔ(yf.ⲆⲆΔⲆ);
      if (j.ᐃⵠᐃᐃⲆ != -1) {
        d |= j.ⲆΔⵠᐃᐃ[j.ᐃⵠᐃᐃⲆ].button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      var e = Xw.ᐃⵠᐃᐃ;
      if (e.open && e.ΔⲆⵠⵠΔ > 0) {
        d |= j.ΔᐃΔⲆᐃΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      var f = Xw.ΔΔᐃⵠ;
      if (f.open && f.ΔⲆⲆᐃΔᐃᐃ > 0) {
        d |= j.ⲆΔΔⲆΔⲆᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
        d |= j.ΔⲆΔᐃΔΔⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
        d |= j.ᐃⵠᐃⵠᐃᐃΔ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
        d |= j.ⵠᐃᐃΔⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
        d |= j.ⲆⵠⲆΔΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      var i = Xw.ⲆᐃⵠΔ;
      if (i.open && mj < i.ⲆⲆⲆᐃΔⲆΔ) {
        d |= j.ᐃⲆΔⵠᐃⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      if (Xw.sign.open) {
        d |= j.sign.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      var a = Xw.ΔⲆΔΔ;
      if (Eh > Xw.ΔᐃⲆⵠ.id && a.id >= 0 && !Xw.ᐃⲆᐃⲆⵠ.enabled && (!Xw.ΔⲆΔΔ.lock || Xw.id === Xw.ΔⲆΔΔ.Ⲇⵠⵠᐃ)) {
        d |= j.ⲆⵠΔ[a.id].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      if (Xw.ⲆᐃⵠᐃⲆ.open) {
        d |= j.ⲆᐃⵠᐃⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      if (!Xw.ΔⲆΔΔ.lock && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
        if (Xw.ΔⲆΔΔ.ⵠⵠᐃᐃᐃⵠⵠ) {
          d |= j.ⲆΔⵠᐃⲆⵠⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
        }
      }
      if (Xw.ΔⲆΔΔ.ΔⵠᐃΔⲆΔⵠ && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
        d |= j.ⵠᐃⲆΔΔⲆΔ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      if (Eh > Xw.ΔᐃⲆⵠ.id && !Xw.ᐃⲆᐃⲆⵠ.enabled) {
        for (var k = Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ, m = gu; k.length > m; m++) {
          var o = k[m].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
          d |= Zw.Ⲇⵠᐃⵠⵠ.ⲆⵠᐃΔ(o, k[m], zl);
          if (a.open && (a.id < 0 || a.id == k[m].id) || Xw.ᐃⲆⵠⲆΔ.open && _r.ⵠᐃⵠⵠ == k[m].id || Xw.ᐃⵠⵠΔⲆ.open && _r.ΔΔᐃΔΔ === k[m].id || Xw.ⲆᐃⵠΔ.open && (_r.ⵠᐃⵠⵠ == k[m].id || _r.ᐃⵠᐃⵠᐃ == k[m].id) || Xw.ᐃⵠᐃᐃ.open && _r.ⲆΔΔᐃⵠ == k[m].id || Xw.ΔΔᐃⵠ.open && k[m].id == _r.ⵠᐃⵠⵠ) {
            d |= j.ⲆⵠᐃΔⲆ[k[m].id].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
          }
        }
      }
      if (Xw.ΔᐃⲆⵠ.id < 0 && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < wj && !Xw.ᐃⲆᐃⲆⵠ.enabled && !Xw.ⲆᐃⲆⵠᐃ) {
        k = Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ;
        m = 0;
        for (; m < k.length; m++) {
          o = false;
          o = k[m].ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
          d |= Zw.Ⲇⵠᐃⵠⵠ.ⲆⵠᐃΔ(o, k[m], 1);
        }
      }
      if (Xw.ΔᐃⲆⵠ.id < 0 && Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !!Xw.ⵠΔⲆⵠΔ.open && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
        d |= j.ⵠΔⲆⵠΔ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      if (zl > Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open && j.ⵠΔΔⵠⵠΔᐃ === 1) {
        d |= j.ⲆⵠⲆⵠ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      if (tg > Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.ⲆΔⵠΔⲆ.open) {
        d |= j.options.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open && j.ⲆⲆⲆᐃΔⵠᐃ === 1) {
        d |= j.ⲆΔⵠΔⲆ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      if (Rq > Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.ΔⲆⲆᐃⵠ.open && !j.Δⵠᐃᐃ.open && !j.options.open && !j.ⲆΔⵠΔⲆ.open) {
        if ($w.ⲆᐃⵠⲆⵠ) {
          d |= j.ⲆΔᐃⲆ.ⲆΔΔⲆΔⲆⲆ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
        } else {
          d |= j.ⲆΔᐃⲆ.ⵠᐃⵠⵠⲆΔᐃ.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
        }
      }
      if (Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ < 0 && !j.ⲆⵠⲆⵠ.open && !j.ⵠⵠⵠΔ.open && !j.options.open && !j.ΔⲆⲆᐃⵠ.open && !j.ⲆΔⵠΔⲆ.open && lw.ΔΔΔΔᐃ !== mf.mode && lw.ⲆⲆⲆⲆᐃ !== mf.mode && mf.mode !== lw.ⲆⲆⲆΔΔⲆⲆᐃⲆ && j.ⵠⵠⵠᐃᐃᐃΔ === 1) {
        d |= j.Δⵠᐃᐃ.button.ⲆⵠᐃΔ(j.ⲆΔ, yf.ⲆⲆΔⲆ, Uv);
      }
      if (d !== j.ⲆᐃⵠⵠⲆⲆⲆ) {
        j.ⲆᐃⵠⵠⲆⲆⲆ = d;
        c.style.cursor = d ? j.ⲆᐃᐃⲆᐃⵠⲆ : j.ⵠΔΔⲆⲆᐃΔ;
      }
    };
    this.ᐃΔⲆΔⵠΔⵠ = function () {
      dj.addEventListener("mousedown", this.ⲆⵠΔᐃⵠΔⲆ, Bh);
      dj.addEventListener("mouseup", this.ΔᐃᐃⲆⵠⲆᐃ, sl);
      dj.addEventListener("mousemove", this.ⵠᐃᐃᐃⵠⲆᐃ, false);
      dj.addEventListener("keyup", this.ΔⲆΔΔⵠⲆⲆ, false);
      dj.addEventListener("keydown", this.ᐃΔΔᐃⲆᐃΔ, false);
    };
    this.ΔΔⲆᐃⲆᐃⲆ = function () {
      dj.removeEventListener("mousedown", this.ⲆⵠΔᐃⵠΔⲆ, false);
      dj.removeEventListener("mouseup", this.ΔᐃᐃⲆⵠⲆᐃ, Ta);
      dj.removeEventListener("mousemove", this.ⵠᐃᐃᐃⵠⲆᐃ, xo);
      dj.removeEventListener("keyup", this.ΔⲆΔΔⵠⲆⲆ, false);
      dj.removeEventListener("keydown", this.ᐃΔΔᐃⲆᐃΔ, wt);
    };
  }
  let Mw;
  let Nw;
  const Ow = hk;
  function Pw() {
    ᐃⵠΔⲆ.ⲆⲆⲆΔᐃᐃᐃ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function Qw() {
    ᐃⵠΔⲆ.ⲆⲆⲆΔᐃᐃᐃ("https://twitter.com/intent/tweet?text=I%20survived%20" + Xw.ⵠΔⲆ + "%20days%20with%20" + Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⲆΔΔᐃⲆ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Rw(a, b, c) {
    const d = (a | 40411) & ~(a & 40411);
    const e = (0 << (b & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & zh)) + (Yk << (b >> 16 & 255));
    const f = (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (24 << (c & 255));
    return (2147483587 + (55497 + (ob(d, e) ^ function (b, c, d, e, f, g) {
      const i = (8 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (24 << (e >> 24 & 255)) + (0 << (e & 255));
      const a = f ^ 8570;
      const j = _s((1013904223 + (b + 183) * 1664525) % 4294967296, (24 << (c & 255)) + (8 << (c >> As & 255)) + (16 << (c >> 24 & 255)) + (mj << (c >> 16 & 255)), (d | 58528) & ~(d & 58528));
      ob(i, a);
      return ~(j & 42875) & j | ~(j & 42875) & 42875;
    }(f, d, e, f, d))) * 2147483629) % 2147483647;
  }
  function Sw(b, c) {
    this.ⲆΔ = b;
    this.ᐃ = c;
    var d = this;
    this.ⵠⲆΔΔΔΔΔ = f;
    this.ⵠΔⲆΔΔⲆΔ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: zl,
      translate: {
        x: 0,
        y: Hi
      },
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ᐃΔΔΔᐃ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⵠⵠⲆᐃⲆⵠⲆ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Ft[ΔΔᐃ.ⵠⲆΔⵠΔⵠⲆ] + " : " + Xw.ⵠΔⲆ + "</div><div class=\"stats\"> " + Ft[ΔΔᐃ.ⲆⵠⲆΔⲆⲆᐃ] + " : " + Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⵠᐃⵠΔᐃ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Ft[ΔΔᐃ.ⵠΔΔᐃᐃⲆⲆ] + " : " + Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⲆΔΔᐃⲆ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⲆᐃⲆΔᐃⲆⲆ + " " + Ft[ΔΔᐃ.POINTS] + "</div></div><div id=\"shop_points\">" + Ft[ΔΔᐃ.ΔΔⲆⲆⵠⲆΔ] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Ft[ΔΔᐃ.ⵠⲆⵠⵠⵠᐃⲆ] + "</div><div class=\"social\" id=\"fffacebook\">" + Ft[ΔΔᐃ.ⵠᐃᐃⲆΔᐃᐃ] + "</div></div><div id=\"bbback\">" + Ft[ΔΔᐃ.ⲆΔⵠⵠⲆⲆΔ] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", Qw, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          Yw.ᐃⵠⲆΔⲆ(vf.ⲆᐃⵠⲆⵠ);
        }, sl);
        document.getElementById("fffacebook").addEventListener("mouseup", Pw, false);
        this.height = Math.floor(this.id.clientHeight / dg);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Df + "getBreadAndScore?userid=" + dx);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (Vn == this.readyState && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - vf.ⲆᐃᐃΔⲆ;
              vf.ⲆᐃᐃΔⲆ = b.b;
              vf.ⲆΔΔᐃⲆ = b.s;
              vf.ⲆⲆΔⲆⲆ = vf.ΔΔⵠΔᐃⵠⵠ(vf.ⲆΔΔᐃⲆ);
              vf.ᐃⲆⵠⵠⲆᐃΔ = vf.ᐃⵠⲆⵠⵠⵠⲆ(vf.ⲆΔΔᐃⲆ);
              vf.ⵠᐃᐃΔⲆⲆⲆ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var g;
    var i = 0;
    function e() {
      d.ᐃⲆΔ();
      if (++i != 30) {
        dj.setTimeout(e, 33);
      } else {
        d.ᐃⲆΔ();
      }
    }
    this.ᐃⵠⲆΔⲆ = function (b) {
      if (xk === d.ⵠⲆΔΔΔΔΔ) {
        d.ⵠⲆΔΔΔΔΔ = false;
        g = b;
        a = -Xn;
        j();
        xf();
      }
    };
    var a = -1;
    function j() {
      d.ᐃⲆΔ();
      if (++a == 30) {
        d.stop();
        d.ⵠΔⲆΔΔⲆΔ.style.display = "none";
        g();
        return;
      }
      dj.setTimeout(j, 33);
    }
    this.ΔⵠᐃΔΔ = false;
    this.stop = function () {
      this.ΔⵠᐃΔΔ = false;
    };
    this.ⲆᐃⵠⲆⵠ = function () {
      bx();
      document.getElementById("game_body").style.backgroundColor = Xr.ᐃᐃΔΔⵠ[Ww.time];
      d.ⵠΔⲆΔΔⲆΔ.ᐃΔΔΔᐃ();
      vf.ⵠᐃⲆΔⲆ.style.display = "inline-block";
      d.ΔⵠᐃΔΔ = true;
      d.ⵠⲆΔΔΔΔΔ = true;
      a = -1;
      i = 0;
      e();
    };
    this.ᐃⲆΔ = function () {
      this.ⵠΔⲆΔΔⲆΔ.translate.x = Math.floor(bo - 275);
      this.ⵠΔⲆΔΔⲆΔ.translate.y = Math.floor(lq - this.ⵠΔⲆΔΔⲆΔ.height - 28);
      vf.ⵠᐃⲆΔⲆ.translate.x = this.ⵠΔⲆΔΔⲆΔ.translate.x - 350;
      vf.ⵠᐃⲆΔⲆ.translate.y = this.ⵠΔⲆΔΔⲆΔ.translate.y + 0;
      vf.ⵠᐃⲆΔⲆ.ᐃⲆΔ();
      if (i != 30 || a != -fl) {
        var b = 0;
        if (i != 30) {
          b = 1500 / (i + fl) - 50;
        }
        if (a != -1) {
          b = -(1750 / (30 - a + 1) - 48);
        }
        this.ⵠΔⲆΔΔⲆΔ.translate.y -= b;
      }
      this.ⵠΔⲆΔΔⲆΔ.ᐃⲆΔ();
    };
    this.ᐃⵠᐃⵠ = function () {
      wd();
      Xw.alert.ᐃⵠᐃⵠ("#FFF", "#000");
    };
  }
  function Tw(b, c, d, e) {
    const f = b ^ 37957;
    const g = (0 << (c >> 24 & 255)) + (24 << (c >> 8 & 255)) + (16 << (c >> 16 & 255)) + (8 << (c >> wj & 255));
    const i = ((36755 + d) * 214013 + 2531011) % 4294967296;
    const a = (18648 + e) % 65368;
    const j = oo(f, g, i, a);
    ib(f, g, i, a);
    return (j | 31496) & ~(j & 31496);
  }
  function Uw(b, c, d, e, f) {
    const g = b ^ 2322;
    const i = (Fl << (c >> 16 & 255)) + (0 << (c >> 8 & 255)) + (8 << (c >> 24 & 255)) + (24 << (c & 255));
    const a = (24 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (Hr << (d & 255)) + (0 << (d >> 24 & Dg));
    const j = (8 << (e >> 16 & 255)) + (0 << (e & 255)) + (16 << (e >> 8 & fa)) + (24 << (e >> 24 & 255));
    const h = lf(g, i, a, j, (2147483587 + (17402 + f) * 2147483629) % 2147483647, g);
    pt(i, a, j);
    return h ^ 53978;
  }
  hk = function () {
    Mw = he(ek(ja));
    Nw = uk(Mw);
    if (Ow) {
      Ow();
    }
  };
  (function b() {
    const c = {
      ⵠⲆΔᐃⲆᐃⲆⲆⲆ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(dj.Math.floor(1 + dj.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const e = new dj.Function(g);
    dj.setTimeout(b, 10000);
    e();
  })();
  (function () {
    function b() {
      this.ᐃΔΔΔᐃ();
    }
    b.prototype = {
      ᐃΔΔΔᐃ: function () {
        var a = this || f;
        a.ΔⲆⲆᐃⲆᐃⵠ = 1000;
        a.ⲆᐃΔᐃⵠⵠⲆ = {};
        a.ΔⵠⵠⲆⵠ = [];
        a.ΔⲆᐃⲆⲆ = !js;
        a.ⲆᐃΔⲆⲆ = 1;
        a.ᐃΔᐃΔⲆⲆⵠ = "canplaythrough";
        a.ⲆⲆⵠⵠⵠ = typeof dj != "undefined" && dj.navigator ? dj.navigator : null;
        a.ᐃⵠⵠⲆΔᐃΔ = null;
        a.ⲆΔⲆⵠⵠᐃᐃ = false;
        a.ⲆΔⵠⲆⲆ = !In;
        a.ΔΔⲆΔⵠⲆⵠ = !ya;
        a.ᐃ = null;
        a.ᐃᐃΔⲆᐃΔΔ = !tg;
        a.ⲆⲆⲆⵠⵠᐃᐃ();
        return a;
      },
      volume: function (b) {
        var c = this || f;
        b = parseFloat(b);
        if (!c.ᐃ) {
          h();
        }
        if (b !== undefined && b >= Rs && b <= hs) {
          c.ⲆᐃΔⲆⲆ = b;
          if (c.ΔⲆᐃⲆⲆ) {
            return c;
          }
          if (c.ⲆΔⵠⲆⲆ) {
            c.ᐃⵠⵠⲆΔᐃΔ.gain.value = b;
          }
          for (var d = 0; d < c.ΔⵠⵠⲆⵠ.length; d++) {
            if (!c.ΔⵠⵠⲆⵠ[d].ΔΔⵠⲆᐃ) {
              for (var g = c.ΔⵠⵠⲆⵠ[d].ⵠⵠᐃΔΔ(), i = 0; i < g.length; i++) {
                var j = c.ΔⵠⵠⲆⵠ[d].ⲆΔⲆᐃᐃ(g[i]);
                if (j && j.ⲆⵠΔⲆ) {
                  j.ⲆⵠΔⲆ.volume = j.ⲆᐃΔⲆⲆ * b;
                }
              }
            }
          }
          return c;
        }
        return c.ⲆᐃΔⲆⲆ;
      },
      ΔΔⵠⲆΔⵠⵠ: function (b) {
        var c = this || f;
        if (!c.ᐃ) {
          h();
        }
        c.ΔⲆᐃⲆⲆ = b;
        if (c.ⲆΔⵠⲆⲆ) {
          c.ᐃⵠⵠⲆΔᐃΔ.gain.value = b ? zl : c.ⲆᐃΔⲆⲆ;
        }
        for (var d = 0; d < c.ΔⵠⵠⲆⵠ.length; d++) {
          if (!c.ΔⵠⵠⲆⵠ[d].ΔΔⵠⲆᐃ) {
            for (var e = c.ΔⵠⵠⲆⵠ[d].ⵠⵠᐃΔΔ(), g = 0; g < e.length; g++) {
              var i = c.ΔⵠⵠⲆⵠ[d].ⲆΔⲆᐃᐃ(e[g]);
              if (i && i.ⲆⵠΔⲆ) {
                i.ⲆⵠΔⲆ.muted = !!b || i.ΔⲆᐃⲆⲆ;
              }
            }
          }
        }
        return c;
      },
      ᐃΔⵠᐃΔᐃᐃ: function () {
        var a = this || f;
        for (var b = a.ΔⵠⵠⲆⵠ.length - js; b >= 0; b--) {
          a.ΔⵠⵠⲆⵠ[b].ᐃΔⵠᐃΔᐃᐃ();
        }
        if (a.ⲆΔⵠⲆⲆ && a.ᐃ && a.ᐃ.close !== undefined) {
          a.ᐃ.close();
          a.ᐃ = null;
          h();
        }
        return a;
      },
      ΔⵠᐃΔᐃⵠΔᐃᐃ: function (a) {
        return (this || f).ⲆᐃΔᐃⵠⵠⲆ[a.replace(/^x-/, "")];
      },
      ⲆⲆⲆⵠⵠᐃᐃ: function () {
        var a = this || f;
        a.state = a.ᐃ && a.ᐃ.state || "running";
        a.ᐃⵠΔᐃⵠⲆᐃ();
        if (!a.ⲆΔⵠⲆⲆ) {
          if (typeof Audio != "undefined") {
            try {
              if (new Audio().oncanplaythrough === undefined) {
                a.ᐃΔᐃΔⲆⲆⵠ = "canplay";
              }
            } catch (b) {
              a.ⲆΔⲆⵠⵠᐃᐃ = !tt;
            }
          } else {
            a.ⲆΔⲆⵠⵠᐃᐃ = true;
          }
        }
        try {
          if (new Audio().muted) {
            a.ⲆΔⲆⵠⵠᐃᐃ = true;
          }
        } catch (a) {}
        if (!a.ⲆΔⲆⵠⵠᐃᐃ) {
          a.ΔⵠⵠΔΔΔⲆⵠᐃ();
        }
        return a;
      },
      ΔⵠⵠΔΔΔⲆⵠᐃ: function () {
        var a = this || f;
        var b = null;
        try {
          b = typeof Audio != "undefined" ? new Audio() : null;
        } catch (b) {
          return a;
        }
        if (!b || typeof b.canPlayType != "function") {
          return a;
        }
        var c = b.canPlayType("audio/mpeg;").replace(/^no$/, "");
        var d = a.ⲆⲆⵠⵠⵠ && a.ⲆⲆⵠⵠⵠ.userAgent.match(/OPR\/([0-6].)/g);
        var e = d && parseInt(d[ps].split("/")[1], 10) < 33;
        a.ⲆᐃΔᐃⵠⵠⲆ = {
          ⲆΔⲆⲆΔΔⵠΔⲆ: !e && (!!c || !!b.canPlayType("audio/mp3;").replace(/^no$/, "")),
          ᐃⲆᐃᐃᐃΔⵠⵠΔ: !!c,
          ⵠⲆᐃᐃᐃⵠΔᐃⲆ: !!b.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
          ΔᐃⵠᐃΔⲆᐃⵠᐃ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ΔᐃᐃⵠᐃⲆⲆⲆᐃ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃⵠⲆⲆⲆⵠⵠⵠⲆ: !!b.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
          ΔⲆⲆⲆⵠᐃⵠΔΔ: !!b.canPlayType("audio/aac;").replace(/^no$/, ""),
          ΔΔⲆⲆⲆⲆᐃΔⲆ: !!b.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          ⵠΔΔΔᐃⵠᐃⵠⵠ: !!(b.canPlayType("audio/x-m4a;") || b.canPlayType("audio/m4a;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ⵠⵠⲆΔⵠⵠⲆᐃΔ: !!(b.canPlayType("audio/x-mp4;") || b.canPlayType("audio/mp4;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ⵠᐃⵠΔΔⵠΔΔᐃ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⲆΔⲆᐃΔᐃΔᐃᐃ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ΔⵠᐃⵠᐃΔⵠⲆᐃ: !!b.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
          ⵠΔⵠⲆⲆⲆᐃⲆᐃ: !!(b.canPlayType("audio/x-flac;") || b.canPlayType("audio/flac;")).replace(/^no$/, "")
        };
        return a;
      },
      ΔⲆⵠⵠᐃⵠⵠᐃⵠ: function () {
        var a = this || f;
        var b = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(a.ⲆⲆⵠⵠⵠ && a.ⲆⲆⵠⵠⵠ.userAgent);
        var c = !!("ontouchend" in dj) || !!a.ⲆⲆⵠⵠⵠ && a.ⲆⲆⵠⵠⵠ.maxTouchPoints > 0 || !!a.ⲆⲆⵠⵠⵠ && a.ⲆⲆⵠⵠⵠ.ΔⵠᐃⵠⲆⵠᐃⲆⵠ > 0;
        if (!a.ⵠⲆᐃΔⵠᐃᐃ && a.ᐃ && (b || c)) {
          a.ⵠⲆᐃΔⵠᐃᐃ = false;
          if (!a.ᐃⵠⵠᐃᐃⲆΔⲆΔ && a.ᐃ.sampleRate !== 44100) {
            a.ᐃⵠⵠᐃᐃⲆΔⲆΔ = !Hi;
            a.ᐃΔⵠᐃΔᐃᐃ();
          }
          a.ᐃⵠΔΔΔᐃᐃ = a.ᐃ.createBuffer(1, rg, 22050);
          function b() {
            f.ⵠⵠΔᐃⵠΔᐃ();
            var c = a.ᐃ.createBufferSource();
            c.buffer = a.ᐃⵠΔΔΔᐃᐃ;
            c.connect(a.ᐃ.destination);
            if (c.start === undefined) {
              c.ΔΔⵠᐃⲆΔⵠᐃⲆ(Rs);
            } else {
              c.start(zl);
            }
            if (typeof a.ᐃ.resume == "function") {
              a.ᐃ.resume();
            }
            c.onended = function () {
              c.disconnect(Db);
              a.ⵠⲆᐃΔⵠᐃᐃ = true;
              a.ᐃᐃΔⲆᐃΔΔ = !ie;
              document.removeEventListener("touchend", b, !tg);
            };
          }
          document.addEventListener("touchend", b, true);
          return a;
        }
      },
      ᐃⵠΔᐃⵠⲆᐃ: function () {
        var a = this;
        if (a.ΔΔⲆΔⵠⲆⵠ && a.ᐃ && a.ᐃ.suspend !== undefined && f.ⲆΔⵠⲆⲆ) {
          for (var b = Rs; b < a.ΔⵠⵠⲆⵠ.length; b++) {
            if (a.ΔⵠⵠⲆⵠ[b].ΔΔⵠⲆᐃ) {
              for (var c = In; c < a.ΔⵠⵠⲆⵠ[b].ⲆⲆᐃⵠᐃ.length; c++) {
                if (!a.ΔⵠⵠⲆⵠ[b].ⲆⲆᐃⵠᐃ[c].ⲆΔΔⵠⲆ) {
                  return a;
                }
              }
            }
          }
          if (a.ⲆᐃΔⵠⲆᐃᐃ) {
            clearTimeout(a.ⲆᐃΔⵠⲆᐃᐃ);
          }
          a.ⲆᐃΔⵠⲆᐃᐃ = setTimeout(function () {
            if (a.ΔΔⲆΔⵠⲆⵠ) {
              a.ⲆᐃΔⵠⲆᐃᐃ = null;
              a.state = "suspending";
              a.ᐃ.suspend().then(function () {
                a.state = "suspended";
                if (a.ΔᐃᐃᐃⵠⵠⲆ) {
                  delete a.ΔᐃᐃᐃⵠⵠⲆ;
                  a.ⵠⵠΔᐃⵠΔᐃ();
                }
              });
            }
          }, 30000);
          return a;
        }
      },
      ⵠⵠΔᐃⵠΔᐃ: function () {
        var a = this;
        if (a.ᐃ && a.ᐃ.resume !== undefined && f.ⲆΔⵠⲆⲆ) {
          if (a.state === "running" && a.ⲆᐃΔⵠⲆᐃᐃ) {
            clearTimeout(a.ⲆᐃΔⵠⲆᐃᐃ);
            a.ⲆᐃΔⵠⲆᐃᐃ = null;
          } else if (a.state === "suspended") {
            a.ᐃ.resume().then(function () {
              a.state = "running";
              for (var b = 0; b < a.ΔⵠⵠⲆⵠ.length; b++) {
                a.ΔⵠⵠⲆⵠ[b].ⵠᐃⲆΔᐃ("resume");
              }
            });
            if (a.ⲆᐃΔⵠⲆᐃᐃ) {
              clearTimeout(a.ⲆᐃΔⵠⲆᐃᐃ);
              a.ⲆᐃΔⵠⲆᐃᐃ = null;
            }
          } else if (a.state === "suspending") {
            a.ΔᐃᐃᐃⵠⵠⲆ = !ya;
          }
          return a;
        }
      }
    };
    var f = new b();
    function c(a) {
      if (a.src && a.src.length !== 0) {
        this.ᐃΔΔΔᐃ(a);
      } else {
        console.error(lj);
      }
    }
    c.prototype = {
      ᐃΔΔΔᐃ: function (a) {
        var b = this;
        if (!f.ᐃ) {
          h();
        }
        b.ᐃΔᐃᐃⵠΔΔΔΔ = a.autoplay || !hd;
        b.ΔⲆⵠᐃᐃⵠᐃ = typeof a.ⵠⵠⵠⲆⲆⲆⲆ != "string" ? a.ⵠⵠⵠⲆⲆⲆⲆ : [a.ⵠⵠⵠⲆⲆⲆⲆ];
        b.ᐃⲆΔΔᐃⲆᐃ = a.ΔⲆⵠⵠⲆΔⵠⲆⲆ || !js;
        b.ΔⲆᐃⲆⲆ = a.ΔΔⵠⲆΔⵠⵠ || false;
        b.ⵠΔⵠⲆΔ = a.loop || false;
        b.ⲆⲆⵠᐃⵠⵠΔΔΔ = a.ΔᐃⲆⲆⲆⵠΔΔⲆ || Fk;
        b.ΔΔⵠⲆΔⵠΔᐃⵠ = typeof a.preload != "boolean" || a.preload;
        b.ΔΔΔⲆᐃ = a.rate || 1;
        b.ᐃᐃΔⲆᐃ = a.ΔΔ || {};
        b.ΔⵠⲆⲆⵠ = typeof a.src != "string" ? a.src : [a.src];
        b.ⲆᐃΔⲆⲆ = a.volume !== undefined ? a.volume : 1;
        b.ΔⲆⲆᐃⲆⵠΔ = tg;
        b.ⲆΔΔⲆᐃ = "unloaded";
        b.ⲆⲆᐃⵠᐃ = [];
        b.ⵠᐃⵠⲆᐃᐃⵠ = {};
        b.ΔⵠⵠⲆΔ = [];
        b.ⵠᐃⵠⵠΔⲆⲆΔⵠ = a.onend ? [{
          ⵠΔⲆᐃᐃ: a.onend
        }] : [];
        b.ΔᐃⲆΔᐃⲆⲆⲆΔ = a.onfade ? [{
          ⵠΔⲆᐃᐃ: a.onfade
        }] : [];
        b.ᐃⵠⲆⵠΔΔⲆᐃᐃ = a.onload ? [{
          ⵠΔⲆᐃᐃ: a.onload
        }] : [];
        b.ᐃᐃΔⵠᐃΔⵠⵠⲆ = a.ⲆⵠⲆᐃⲆΔᐃⲆΔ ? [{
          ⵠΔⲆᐃᐃ: a.ⲆⵠⲆᐃⲆΔᐃⲆΔ
        }] : [];
        b.ΔⵠⵠᐃⵠᐃⲆⲆⲆ = a.onpause ? [{
          ⵠΔⲆᐃᐃ: a.onpause
        }] : [];
        b.ΔΔⵠΔⲆⲆⵠΔⵠ = a.onplay ? [{
          ⵠΔⲆᐃᐃ: a.onplay
        }] : [];
        b.ⲆΔⵠⵠΔΔᐃⵠⵠ = a.onstop ? [{
          ⵠΔⲆᐃᐃ: a.onstop
        }] : [];
        b.ⵠᐃᐃⲆⵠᐃⵠⵠΔ = a.onmute ? [{
          ⵠΔⲆᐃᐃ: a.onmute
        }] : [];
        b.ⲆⵠᐃⵠΔᐃᐃᐃⵠ = a.ᐃᐃⵠᐃⲆⵠᐃⵠΔ ? [{
          ⵠΔⲆᐃᐃ: a.ᐃᐃⵠᐃⲆⵠᐃⵠΔ
        }] : [];
        b.ⲆⲆᐃΔΔᐃⲆᐃᐃ = a.ⲆⲆⲆⲆᐃᐃⲆᐃⵠ ? [{
          ⵠΔⲆᐃᐃ: a.ⲆⲆⲆⲆᐃᐃⲆᐃⵠ
        }] : [];
        b.ⲆⲆⵠΔⵠᐃᐃΔᐃ = a.ⲆⵠΔΔΔᐃᐃⵠⲆ ? [{
          ⵠΔⲆᐃᐃ: a.ⲆⵠΔΔΔᐃᐃⵠⲆ
        }] : [];
        b.ᐃⲆⲆᐃⲆⵠΔⲆⵠ = [];
        b.ΔΔⵠⲆᐃ = f.ⲆΔⵠⲆⲆ && !b.ᐃⲆΔΔᐃⲆᐃ;
        if (f.ᐃ !== undefined && f.ᐃ && f.ᐃᐃΔⲆᐃΔΔ) {
          f.ΔⲆⵠⵠᐃⵠⵠᐃⵠ();
        }
        f.ΔⵠⵠⲆⵠ.push(b);
        if (b.ᐃΔᐃᐃⵠΔΔΔΔ) {
          b.ΔⵠⵠⲆΔ.push({
            event: "play",
            action: function () {
              b.play();
            }
          });
        }
        if (b.ΔΔⵠⲆΔⵠΔᐃⵠ) {
          b.load();
        }
        return b;
      },
      load: function () {
        var a = this;
        var b = null;
        if (!f.ⲆΔⲆⵠⵠᐃᐃ) {
          if (typeof a.ΔⵠⲆⲆⵠ == "string") {
            a.ΔⵠⲆⲆⵠ = [a.ΔⵠⲆⲆⵠ];
          }
          for (var c = Da; c < a.ΔⵠⲆⲆⵠ.length; c++) {
            var e;
            var g;
            if (a.ΔⲆⵠᐃᐃⵠᐃ && a.ΔⲆⵠᐃᐃⵠᐃ[c]) {
              e = a.ΔⲆⵠᐃᐃⵠᐃ[c];
            } else {
              if (typeof (g = a.ΔⵠⲆⲆⵠ[c]) != "string") {
                a.ⵠᐃⲆΔᐃ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              if (!(e = /^data:audio\/([^;,]+);/i.exec(g))) {
                e = /\.([^.]+)$/.exec(g.split("?", 1)[gu]);
              }
              e &&= e[lb].toLowerCase();
            }
            if (!e) {
              console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
            }
            if (e && f.ΔⵠᐃΔᐃⵠΔᐃᐃ(e)) {
              b = a.ΔⵠⲆⲆⵠ[c];
              break;
            }
          }
          if (b) {
            a.ΔⵠⲆⲆⵠ = b;
            a.ⲆΔΔⲆᐃ = "loading";
            if (dj.location.protocol === "https:" && b.slice(0, 5) === "http:") {
              a.ᐃⲆΔΔᐃⲆᐃ = !Hi;
              a.ΔΔⵠⲆᐃ = false;
            }
            new d(a);
            if (a.ΔΔⵠⲆᐃ) {
              i(a);
            }
            return a;
          } else {
            a.ⵠᐃⲆΔᐃ("loaderror", null, "No codec support for selected audio sources.");
            return;
          }
        }
        a.ⵠᐃⲆΔᐃ("loaderror", null, "No audio support.");
      },
      play: function (d, i) {
        var j = this;
        var k = null;
        if (typeof d == "number") {
          k = d;
          d = null;
        } else {
          if (typeof d == "string" && j.ⲆΔΔⲆᐃ === "loaded" && !j.ᐃᐃΔⲆᐃ[d]) {
            return null;
          }
          if (d === undefined) {
            d = "__default";
            var n = 0;
            for (var o = 0; o < j.ⲆⲆᐃⵠᐃ.length; o++) {
              if (j.ⲆⲆᐃⵠᐃ[o].ⲆΔΔⵠⲆ && !j.ⲆⲆᐃⵠᐃ[o].ⲆΔᐃⲆΔ) {
                n++;
                k = j.ⲆⲆᐃⵠᐃ[o].ⵠⲆⲆⲆ;
              }
            }
            if (xt === n) {
              d = null;
            } else {
              k = null;
            }
          }
        }
        var q = k ? j.ⲆΔⲆᐃᐃ(k) : j.ⲆⵠⲆⵠⲆᐃΔᐃⵠ();
        if (!q) {
          return null;
        }
        if (k && !d) {
          d = q.ᐃᐃΔⲆᐃ || "__default";
        }
        if (j.ⲆΔΔⲆᐃ !== "loaded") {
          q.ᐃᐃΔⲆᐃ = d;
          q.ⲆΔᐃⲆΔ = !Oq;
          var h = q.ⵠⲆⲆⲆ;
          j.ΔⵠⵠⲆΔ.push({
            event: "play",
            action: function () {
              j.play(h);
            }
          });
          return h;
        }
        if (k && !q.ⲆΔΔⵠⲆ) {
          if (!i) {
            setTimeout(function () {
              j.ⵠᐃⲆΔᐃ("play", q.ⵠⲆⲆⲆ);
            }, 0);
          }
          return q.ⵠⲆⲆⲆ;
        }
        if (j.ΔΔⵠⲆᐃ) {
          f.ⵠⵠΔᐃⵠΔᐃ();
        }
        var l = Math.max(Da, q.ΔⲆⵠⵠᐃ > Pg ? q.ΔⲆⵠⵠᐃ : j.ᐃᐃΔⲆᐃ[d][Lr] / 1000);
        var g = Math.max(Kh, (j.ᐃᐃΔⲆᐃ[d][0] + j.ᐃᐃΔⲆᐃ[d][1]) / 1000 - l);
        var p = g * 1000 / Math.abs(q.ΔΔΔⲆᐃ);
        q.ⲆΔΔⵠⲆ = false;
        q.ⲆΔᐃⲆΔ = !Ug;
        q.ᐃᐃΔⲆᐃ = d;
        q.ΔⲆⵠⵠᐃ = l;
        q.ΔΔΔΔⵠ = j.ᐃᐃΔⲆᐃ[d][ps] / 1000;
        q.ⵠΔᐃⵠᐃΔᐃ = (j.ᐃᐃΔⲆᐃ[d][0] + j.ᐃᐃΔⲆᐃ[d][yg]) / 1000;
        q.ⵠΔⵠⲆΔ = !!q.ⵠΔⵠⲆΔ || !!j.ᐃᐃΔⲆᐃ[d][dg];
        var b = q.ⲆⵠΔⲆ;
        if (j.ΔΔⵠⲆᐃ) {
          function a() {
            j.ΔⲆⲆⵠΔᐃΔΔⵠ(q);
            var a = q.ΔⲆᐃⲆⲆ || j.ΔⲆᐃⲆⲆ ? wj : q.ⲆᐃΔⲆⲆ;
            b.gain.setValueAtTime(a, f.ᐃ.currentTime);
            q.ⵠⲆⵠΔᐃᐃᐃ = f.ᐃ.currentTime;
            if (b.ⵠᐃᐃᐃᐃ.start === undefined) {
              if (q.ⵠΔⵠⲆΔ) {
                b.ⵠᐃᐃᐃᐃ.ᐃⵠⲆⲆᐃᐃⵠⲆⲆ(0, l, 86400);
              } else {
                b.ⵠᐃᐃᐃᐃ.ᐃⵠⲆⲆᐃᐃⵠⲆⲆ(0, l, g);
              }
            } else if (q.ⵠΔⵠⲆΔ) {
              b.ⵠᐃᐃᐃᐃ.start(Hi, l, 86400);
            } else {
              b.ⵠᐃᐃᐃᐃ.start(Kh, l, g);
            }
            if (p !== 1 / tt) {
              j.ⵠᐃⵠⲆᐃᐃⵠ[q.ⵠⲆⲆⲆ] = setTimeout(j.ⲆΔᐃⲆΔ.bind(j, q), p);
            }
            if (!i) {
              setTimeout(function () {
                j.ⵠᐃⲆΔᐃ("play", q.ⵠⲆⲆⲆ);
              }, Eh);
            }
          }
          var t = f.state === "running";
          if (j.ⲆΔΔⲆᐃ === "loaded" && t) {
            a();
          } else {
            var c = t || j.ⲆΔΔⲆᐃ !== "loaded" ? "load" : "resume";
            j.once(c, a, t ? q.ⵠⲆⲆⲆ : null);
            j.ᐃⲆᐃⲆⲆⲆⵠ(q.ⵠⲆⲆⲆ);
          }
        } else {
          function a() {
            b.currentTime = l;
            b.muted = q.ΔⲆᐃⲆⲆ || j.ΔⲆᐃⲆⲆ || f.ΔⲆᐃⲆⲆ || b.muted;
            b.volume = q.ⲆᐃΔⲆⲆ * f.volume();
            b.playbackRate = q.ΔΔΔⲆᐃ;
            b.play();
            if (p !== 1 / ps) {
              j.ⵠᐃⵠⲆᐃᐃⵠ[q.ⵠⲆⲆⲆ] = setTimeout(j.ⲆΔᐃⲆΔ.bind(j, q), p);
            }
            if (!i) {
              j.ⵠᐃⲆΔᐃ("play", q.ⵠⲆⲆⲆ);
            }
          }
          var m = j.ⲆΔΔⲆᐃ === "loaded" && (dj && dj.ΔΔᐃⵠⲆᐃΔⲆΔ || !b.readyState && f.ⲆⲆⵠⵠⵠ.ⵠⲆⲆⵠⵠⵠᐃⲆⲆ);
          if (b.readyState === 4 || m) {
            a();
          } else {
            function c() {
              a();
              b.removeEventListener(f.ᐃΔᐃΔⲆⲆⵠ, c, false);
            }
            b.addEventListener(f.ᐃΔᐃΔⲆⲆⵠ, c, false);
            j.ᐃⲆᐃⲆⲆⲆⵠ(q.ⵠⲆⲆⲆ);
          }
        }
        return q.ⵠⲆⲆⲆ;
      },
      pause: function (a) {
        var b = this;
        if (b.ⲆΔΔⲆᐃ !== "loaded") {
          b.ΔⵠⵠⲆΔ.push({
            event: "pause",
            action: function () {
              b.pause(a);
            }
          });
          return b;
        }
        for (var c = b.ⵠⵠᐃΔΔ(a), d = 0; d < c.length; d++) {
          b.ᐃⲆᐃⲆⲆⲆⵠ(c[d]);
          var e = b.ⲆΔⲆᐃᐃ(c[d]);
          if (e && !e.ⲆΔΔⵠⲆ && (e.ΔⲆⵠⵠᐃ = b.ⲆΔΔᐃⵠⲆⵠ(c[d]), e.ᐃⲆⲆΔⵠⵠⲆ = Rs, e.ⲆΔΔⵠⲆ = !Db, b.ⲆᐃⵠΔᐃⵠΔ(c[d]), e.ⲆⵠΔⲆ)) {
            if (b.ΔΔⵠⲆᐃ) {
              if (!e.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ) {
                continue;
              }
              if (e.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.stop === undefined) {
                e.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.ΔⵠΔⲆⲆΔⲆᐃⲆ(0);
              } else {
                e.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.stop(Bg);
              }
              b.ΔⵠⲆⲆⲆⲆⲆ(e.ⲆⵠΔⲆ);
            } else if (!isNaN(e.ⲆⵠΔⲆ.duration) || e.ⲆⵠΔⲆ.duration === 1 / Pg) {
              e.ⲆⵠΔⲆ.pause();
            }
          }
          if (!arguments[za]) {
            b.ⵠᐃⲆΔᐃ("pause", e ? e.ⵠⲆⲆⲆ : null);
          }
        }
        return b;
      },
      stop: function (a, b) {
        var c = this;
        if (c.ⲆΔΔⲆᐃ !== "loaded") {
          c.ΔⵠⵠⲆΔ.push({
            event: "stop",
            action: function () {
              c.stop(a);
            }
          });
          return c;
        }
        for (var d = c.ⵠⵠᐃΔΔ(a), e = Rs; e < d.length; e++) {
          c.ᐃⲆᐃⲆⲆⲆⵠ(d[e]);
          var f = c.ⲆΔⲆᐃᐃ(d[e]);
          if (f) {
            f.ΔⲆⵠⵠᐃ = f.ΔΔΔΔⵠ || 0;
            f.ᐃⲆⲆΔⵠⵠⲆ = Rs;
            f.ⲆΔΔⵠⲆ = !mj;
            f.ⲆΔᐃⲆΔ = true;
            c.ⲆᐃⵠΔᐃⵠΔ(d[e]);
            if (f.ⲆⵠΔⲆ) {
              if (c.ΔΔⵠⲆᐃ) {
                if (f.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ) {
                  if (f.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.stop === undefined) {
                    f.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.ΔⵠΔⲆⲆΔⲆᐃⲆ(0);
                  } else {
                    f.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.stop(Lr);
                  }
                  c.ΔⵠⲆⲆⲆⲆⲆ(f.ⲆⵠΔⲆ);
                }
              } else if (!isNaN(f.ⲆⵠΔⲆ.duration) || f.ⲆⵠΔⲆ.duration === Infinity) {
                f.ⲆⵠΔⲆ.currentTime = f.ΔΔΔΔⵠ || 0;
                f.ⲆⵠΔⲆ.pause();
              }
            }
            if (!b) {
              c.ⵠᐃⲆΔᐃ("stop", f.ⵠⲆⲆⲆ);
            }
          }
        }
        return c;
      },
      ΔΔⵠⲆΔⵠⵠ: function (b, c) {
        var d = this;
        if (d.ⲆΔΔⲆᐃ !== "loaded") {
          d.ΔⵠⵠⲆΔ.push({
            event: "mute",
            action: function () {
              d.ΔΔⵠⲆΔⵠⵠ(b, c);
            }
          });
          return d;
        }
        if (c === undefined) {
          if (typeof b != "boolean") {
            return d.ΔⲆᐃⲆⲆ;
          }
          d.ΔⲆᐃⲆⲆ = b;
        }
        for (var e = d.ⵠⵠᐃΔΔ(c), g = tt; g < e.length; g++) {
          var h = d.ⲆΔⲆᐃᐃ(e[g]);
          if (h) {
            h.ΔⲆᐃⲆⲆ = b;
            if (d.ΔΔⵠⲆᐃ && h.ⲆⵠΔⲆ) {
              h.ⲆⵠΔⲆ.gain.setValueAtTime(b ? tg : h.ⲆᐃΔⲆⲆ, f.ᐃ.currentTime);
            } else if (h.ⲆⵠΔⲆ) {
              h.ⲆⵠΔⲆ.muted = !!f.ΔⲆᐃⲆⲆ || b;
            }
            d.ⵠᐃⲆΔᐃ("mute", h.ⵠⲆⲆⲆ);
          }
        }
        return d;
      },
      volume: function () {
        var b;
        var c;
        var d;
        var g = this;
        var h = arguments;
        if (Zj === h.length) {
          return g.ⲆᐃΔⲆⲆ;
        }
        if (h.length === 1 || h.length === 2 && h[lb] === undefined) {
          if (g.ⵠⵠᐃΔΔ().indexOf(h[Bg]) >= wj) {
            c = parseInt(h[0], Zk);
          } else {
            b = parseFloat(h[Rq]);
          }
        } else if (h.length >= 2) {
          b = parseFloat(h[Bg]);
          c = parseInt(h[1], 10);
        }
        if (b === undefined || b < In || b > fl) {
          if (d = c ? g.ⲆΔⲆᐃᐃ(c) : g.ⲆⲆᐃⵠᐃ[zl]) {
            return d.ⲆᐃΔⲆⲆ;
          } else {
            return ps;
          }
        }
        if (g.ⲆΔΔⲆᐃ !== "loaded") {
          g.ΔⵠⵠⲆΔ.push({
            event: "volume",
            action: function () {
              g.volume.apply(g, h);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ⲆᐃΔⲆⲆ = b;
        }
        c = g.ⵠⵠᐃΔΔ(c);
        for (var i = 0; i < c.length; i++) {
          if (d = g.ⲆΔⲆᐃᐃ(c[i])) {
            d.ⲆᐃΔⲆⲆ = b;
            if (!h[jk]) {
              g.ⲆᐃⵠΔᐃⵠΔ(c[i]);
            }
            if (g.ΔΔⵠⲆᐃ && d.ⲆⵠΔⲆ && !d.ΔⲆᐃⲆⲆ) {
              d.ⲆⵠΔⲆ.gain.setValueAtTime(b, f.ᐃ.currentTime);
            } else if (d.ⲆⵠΔⲆ && !d.ΔⲆᐃⲆⲆ) {
              d.ⲆⵠΔⲆ.volume = b * f.volume();
            }
            g.ⵠᐃⲆΔᐃ("volume", d.ⵠⲆⲆⲆ);
          }
        }
        return g;
      },
      fade: function (j, e, i, k) {
        var m = this;
        var n = Math.abs(j - e);
        var a = j > e ? "out" : "in";
        var o = n / 0.01;
        var p = o > Pg ? i / o : i;
        if (p < 4) {
          o = Math.ceil(o / (Fr / p));
          p = 4;
        }
        if (m.ⲆΔΔⲆᐃ !== "loaded") {
          m.ΔⵠⵠⲆΔ.push({
            event: "fade",
            action: function () {
              m.fade(j, e, i, k);
            }
          });
          return m;
        }
        m.volume(j, k);
        for (var q = m.ⵠⵠᐃΔΔ(k), g = Kh; g < q.length; g++) {
          var r = m.ⲆΔⲆᐃᐃ(q[g]);
          if (r) {
            if (!k) {
              m.ⲆᐃⵠΔᐃⵠΔ(q[g]);
            }
            if (m.ΔΔⵠⲆᐃ && !r.ΔⲆᐃⲆⲆ) {
              var s = f.ᐃ.currentTime;
              var t = s + i / 1000;
              r.ⲆᐃΔⲆⲆ = j;
              r.ⲆⵠΔⲆ.gain.setValueAtTime(j, s);
              r.ⲆⵠΔⲆ.gain.linearRampToValueAtTime(e, t);
            }
            var w = j;
            r.ΔΔᐃΔⲆⲆΔ = setInterval(function (b, c) {
              if (o > 0) {
                w += a === "in" ? 0.01 : -0.01;
              }
              w = Math.max(Eh, w);
              w = Math.min(1, w);
              w = Math.round(Hl * w) / sa;
              if (m.ΔΔⵠⲆᐃ) {
                if (k === undefined) {
                  m.ⲆᐃΔⲆⲆ = w;
                }
                c.ⲆᐃΔⲆⲆ = w;
              } else {
                m.volume(w, b, !Hi);
              }
              if (e < j && w <= e || e > j && w >= e) {
                clearInterval(c.ΔΔᐃΔⲆⲆΔ);
                c.ΔΔᐃΔⲆⲆΔ = null;
                m.volume(e, b);
                m.ⵠᐃⲆΔᐃ("fade", b);
              }
            }.bind(m, q[g], r), p);
          }
        }
        return m;
      },
      ⲆᐃⵠΔᐃⵠΔ: function (a) {
        var b = this;
        var c = b.ⲆΔⲆᐃᐃ(a);
        if (c && c.ΔΔᐃΔⲆⲆΔ) {
          if (b.ΔΔⵠⲆᐃ) {
            c.ⲆⵠΔⲆ.gain.cancelScheduledValues(f.ᐃ.currentTime);
          }
          clearInterval(c.ΔΔᐃΔⲆⲆΔ);
          c.ΔΔᐃΔⲆⲆΔ = null;
          b.ⵠᐃⲆΔᐃ("fade", a);
        }
        return b;
      },
      loop: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          return f.ⵠΔⵠⲆΔ;
        }
        if (g.length === 1) {
          if (typeof g[gu] != "boolean") {
            return !!(d = f.ⲆΔⲆᐃᐃ(parseInt(g[Eh], 10))) && d.ⵠΔⵠⲆΔ;
          }
          b = g[0];
          f.ⵠΔⵠⲆΔ = b;
        } else if (pq === g.length) {
          b = g[0];
          c = parseInt(g[fl], Zk);
        }
        for (var h = f.ⵠⵠᐃΔΔ(c), j = mj; j < h.length; j++) {
          if (d = f.ⲆΔⲆᐃᐃ(h[j])) {
            d.ⵠΔⵠⲆΔ = b;
            if (f.ΔΔⵠⲆᐃ && d.ⲆⵠΔⲆ && d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ) {
              d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loop = b;
              if (b) {
                d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loopStart = d.ΔΔΔΔⵠ || Lr;
                d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loopEnd = d.ⵠΔᐃⵠᐃΔᐃ;
              }
            }
          }
        }
        return f;
      },
      rate: function () {
        var b;
        var c;
        var d;
        var g = this;
        var i = arguments;
        if (i.length === 0) {
          c = g.ⲆⲆᐃⵠᐃ[Lr].ⵠⲆⲆⲆ;
        } else if (Ot === i.length) {
          if (g.ⵠⵠᐃΔΔ().indexOf(i[Hi]) >= 0) {
            c = parseInt(i[tt], Ds);
          } else {
            b = parseFloat(i[0]);
          }
        } else if (i.length === 2) {
          b = parseFloat(i[0]);
          c = parseInt(i[yg], 10);
        }
        if (typeof b != "number") {
          if (d = g.ⲆΔⲆᐃᐃ(c)) {
            return d.ΔΔΔⲆᐃ;
          } else {
            return g.ΔΔΔⲆᐃ;
          }
        }
        if (g.ⲆΔΔⲆᐃ !== "loaded") {
          g.ΔⵠⵠⲆΔ.push({
            event: "rate",
            action: function () {
              g.rate.apply(g, i);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ΔΔΔⲆᐃ = b;
        }
        c = g.ⵠⵠᐃΔΔ(c);
        for (var j = 0; j < c.length; j++) {
          if (d = g.ⲆΔⲆᐃᐃ(c[j])) {
            d.ᐃⲆⲆΔⵠⵠⲆ = g.ⲆΔΔᐃⵠⲆⵠ(c[j]);
            d.ⵠⲆⵠΔᐃᐃᐃ = g.ΔΔⵠⲆᐃ ? f.ᐃ.currentTime : d.ⵠⲆⵠΔᐃᐃᐃ;
            d.ΔΔΔⲆᐃ = b;
            if (g.ΔΔⵠⲆᐃ && d.ⲆⵠΔⲆ && d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ) {
              d.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.playbackRate.value = b;
            } else if (d.ⲆⵠΔⲆ) {
              d.ⲆⵠΔⲆ.playbackRate = b;
            }
            var k = g.ⲆΔΔᐃⵠⲆⵠ(c[j]);
            var l = ((g.ᐃᐃΔⲆᐃ[d.ᐃᐃΔⲆᐃ][Db] + g.ᐃᐃΔⲆᐃ[d.ᐃᐃΔⲆᐃ][hs]) / 1000 - k) * 1000 / Math.abs(d.ΔΔΔⲆᐃ);
            if (!!g.ⵠᐃⵠⲆᐃᐃⵠ[c[j]] || !d.ⲆΔΔⵠⲆ) {
              g.ᐃⲆᐃⲆⲆⲆⵠ(c[j]);
              g.ⵠᐃⵠⲆᐃᐃⵠ[c[j]] = setTimeout(g.ⲆΔᐃⲆΔ.bind(g, d), l);
            }
            g.ⵠᐃⲆΔᐃ("rate", d.ⵠⲆⲆⲆ);
          }
        }
        return g;
      },
      ⲆΔΔᐃⵠⲆⵠ: function () {
        var b;
        var c;
        var d = this;
        var g = arguments;
        if (Hi === g.length) {
          c = d.ⲆⲆᐃⵠᐃ[Lr].ⵠⲆⲆⲆ;
        } else if (fl === g.length) {
          if (d.ⵠⵠᐃΔΔ().indexOf(g[zl]) >= ya) {
            c = parseInt(g[0], wa);
          } else {
            c = d.ⲆⲆᐃⵠᐃ[0].ⵠⲆⲆⲆ;
            b = parseFloat(g[0]);
          }
        } else if (g.length === 2) {
          b = parseFloat(g[0]);
          c = parseInt(g[Ot], Ab);
        }
        if (c === undefined) {
          return d;
        }
        if (d.ⲆΔΔⲆᐃ !== "loaded") {
          d.ΔⵠⵠⲆΔ.push({
            event: "seek",
            action: function () {
              d.ⲆΔΔᐃⵠⲆⵠ.apply(d, g);
            }
          });
          return d;
        }
        var i = d.ⲆΔⲆᐃᐃ(c);
        if (i) {
          if (typeof b != "number" || b < tt) {
            if (d.ΔΔⵠⲆᐃ) {
              var j = d.ⲆᐃᐃⵠᐃⲆᐃ(c) ? f.ᐃ.currentTime - i.ⵠⲆⵠΔᐃᐃᐃ : ya;
              var a = i.ᐃⲆⲆΔⵠⵠⲆ ? i.ᐃⲆⲆΔⵠⵠⲆ - i.ΔⲆⵠⵠᐃ : 0;
              return i.ΔⲆⵠⵠᐃ + (a + j * Math.abs(i.ΔΔΔⲆᐃ));
            }
            return i.ⲆⵠΔⲆ.currentTime;
          }
          var k = d.ⲆᐃᐃⵠᐃⲆᐃ(c);
          if (k) {
            d.pause(c, true);
          }
          i.ΔⲆⵠⵠᐃ = b;
          i.ⲆΔᐃⲆΔ = !cu;
          d.ᐃⲆᐃⲆⲆⲆⵠ(c);
          if (k) {
            d.play(c, !Zj);
          }
          if (!d.ΔΔⵠⲆᐃ && i.ⲆⵠΔⲆ) {
            i.ⲆⵠΔⲆ.currentTime = b;
          }
          d.ⵠᐃⲆΔᐃ("seek", c);
        }
        return d;
      },
      ⲆᐃᐃⵠᐃⲆᐃ: function (a) {
        var b = this;
        if (typeof a == "number") {
          var c = b.ⲆΔⲆᐃᐃ(a);
          return !!c && !c.ⲆΔΔⵠⲆ;
        }
        for (var d = 0; d < b.ⲆⲆᐃⵠᐃ.length; d++) {
          if (!b.ⲆⲆᐃⵠᐃ[d].ⲆΔΔⵠⲆ) {
            return !Rs;
          }
        }
        return false;
      },
      duration: function (a) {
        var b = this;
        var c = b.ΔⲆⲆᐃⲆⵠΔ;
        var d = b.ⲆΔⲆᐃᐃ(a);
        if (d) {
          c = b.ᐃᐃΔⲆᐃ[d.ᐃᐃΔⲆᐃ][1] / 1000;
        }
        return c;
      },
      state: function () {
        return this.ⲆΔΔⲆᐃ;
      },
      ᐃΔⵠᐃΔᐃᐃ: function () {
        var b = this;
        for (var c = b.ⲆⲆᐃⵠᐃ, d = Zj; d < c.length; d++) {
          if (!c[d].ⲆΔΔⵠⲆ) {
            b.stop(c[d].ⵠⲆⲆⲆ);
          }
          if (!b.ΔΔⵠⲆᐃ) {
            if (!/MSIE |Trident\//.test(f.ⲆⲆⵠⵠⵠ && f.ⲆⲆⵠⵠⵠ.userAgent)) {
              c[d].ⲆⵠΔⲆ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
            c[d].ⲆⵠΔⲆ.removeEventListener("error", c[d].ᐃⲆᐃⵠΔⵠΔ, !Ol);
            c[d].ⲆⵠΔⲆ.removeEventListener(f.ᐃΔᐃΔⲆⲆⵠ, c[d].ⵠᐃⲆᐃⲆⲆⲆ, !mk);
          }
          delete c[d].ⲆⵠΔⲆ;
          b.ᐃⲆᐃⲆⲆⲆⵠ(c[d].ⵠⲆⲆⲆ);
          var g = f.ΔⵠⵠⲆⵠ.indexOf(b);
          if (g >= 0) {
            f.ΔⵠⵠⲆⵠ.splice(g, 1);
          }
        }
        var h = true;
        for (d = 0; d < f.ΔⵠⵠⲆⵠ.length; d++) {
          if (f.ΔⵠⵠⲆⵠ[d].ΔⵠⲆⲆⵠ === b.ΔⵠⲆⲆⵠ) {
            h = false;
            break;
          }
        }
        if (j && h) {
          delete j[b.ΔⵠⲆⲆⵠ];
        }
        f.ⲆΔⲆⵠⵠᐃᐃ = !Xn;
        b.ⲆΔΔⲆᐃ = "unloaded";
        b.ⲆⲆᐃⵠᐃ = [];
        b = null;
        return null;
      },
      on: function (a, b, c, d) {
        var e = this["_on" + a];
        if (typeof b == "function") {
          e.push(d ? {
            id: c,
            ⵠΔⲆᐃᐃ: b,
            once: d
          } : {
            id: c,
            ⵠΔⲆᐃᐃ: b
          });
        }
        return this;
      },
      ᐃΔᐃⲆᐃⲆᐃΔᐃ: function (b, c, d) {
        var e = this;
        var f = e["_on" + b];
        var g = 0;
        if (typeof c == "number") {
          d = c;
          c = null;
        }
        if (c || d) {
          for (g = Eh; g < f.length; g++) {
            var h = d === f[g].id;
            if (c === f[g].ⵠΔⲆᐃᐃ && h || !c && h) {
              f.splice(g, 1);
              break;
            }
          }
        } else if (b) {
          e["_on" + b] = [];
        } else {
          var j = Object.keys(e);
          for (g = Bg; g < j.length; g++) {
            if (mj === j[g].indexOf("_on") && Array.isArray(e[j[g]])) {
              e[j[g]] = [];
            }
          }
        }
        return e;
      },
      once: function (a, b, c) {
        this.on(a, b, c, 1);
        return this;
      },
      ⵠᐃⲆΔᐃ: function (a, b, c) {
        var d = this;
        var e = d["_on" + a];
        for (var f = e.length - Oq; f >= gu; f--) {
          if (!e[f].id || e[f].id === b || a === "load") {
            setTimeout(function (a) {
              a.call(this, b, c);
            }.bind(d, e[f].ⵠΔⲆᐃᐃ), ps);
            if (e[f].once) {
              d.ᐃΔᐃⲆᐃⲆᐃΔᐃ(a, e[f].ⵠΔⲆᐃᐃ, e[f].id);
            }
          }
        }
        return d;
      },
      ᐃᐃΔⲆⵠⵠⵠ: function () {
        var a = this;
        if (a.ΔⵠⵠⲆΔ.length > tt) {
          var b = a.ΔⵠⵠⲆΔ[mj];
          a.once(b.event, function () {
            a.ΔⵠⵠⲆΔ.shift();
            a.ᐃᐃΔⲆⵠⵠⵠ();
          });
          b.action();
        }
        return a;
      },
      ⲆΔᐃⲆΔ: function (a) {
        var b = this;
        var c = a.ᐃᐃΔⲆᐃ;
        if (!b.ΔΔⵠⲆᐃ && b.ⲆⵠΔⲆ && !b.ⲆⵠΔⲆ.ended) {
          setTimeout(b.ⲆΔᐃⲆΔ.bind(b, a), 100);
          return b;
        }
        var d = !!a.ⵠΔⵠⲆΔ || !!b.ᐃᐃΔⲆᐃ[c][2];
        b.ⵠᐃⲆΔᐃ("end", a.ⵠⲆⲆⲆ);
        if (!b.ΔΔⵠⲆᐃ && d) {
          b.stop(a.ⵠⲆⲆⲆ, true).play(a.ⵠⲆⲆⲆ);
        }
        if (b.ΔΔⵠⲆᐃ && d) {
          b.ⵠᐃⲆΔᐃ("play", a.ⵠⲆⲆⲆ);
          a.ΔⲆⵠⵠᐃ = a.ΔΔΔΔⵠ || zl;
          a.ᐃⲆⲆΔⵠⵠⲆ = Bg;
          a.ⵠⲆⵠΔᐃᐃᐃ = f.ᐃ.currentTime;
          var e = (a.ⵠΔᐃⵠᐃΔᐃ - a.ΔΔΔΔⵠ) * 1000 / Math.abs(a.ΔΔΔⲆᐃ);
          b.ⵠᐃⵠⲆᐃᐃⵠ[a.ⵠⲆⲆⲆ] = setTimeout(b.ⲆΔᐃⲆΔ.bind(b, a), e);
        }
        if (b.ΔΔⵠⲆᐃ && !d) {
          a.ⲆΔΔⵠⲆ = true;
          a.ⲆΔᐃⲆΔ = !zl;
          a.ΔⲆⵠⵠᐃ = a.ΔΔΔΔⵠ || ya;
          a.ᐃⲆⲆΔⵠⵠⲆ = wj;
          b.ᐃⲆᐃⲆⲆⲆⵠ(a.ⵠⲆⲆⲆ);
          b.ΔⵠⲆⲆⲆⲆⲆ(a.ⲆⵠΔⲆ);
          f.ᐃⵠΔᐃⵠⲆᐃ();
        }
        if (!b.ΔΔⵠⲆᐃ && !d) {
          b.stop(a.ⵠⲆⲆⲆ);
        }
        return b;
      },
      ᐃⲆᐃⲆⲆⲆⵠ: function (a) {
        var b = this;
        if (b.ⵠᐃⵠⲆᐃᐃⵠ[a]) {
          clearTimeout(b.ⵠᐃⵠⲆᐃᐃⵠ[a]);
          delete b.ⵠᐃⵠⲆᐃᐃⵠ[a];
        }
        return b;
      },
      ⲆΔⲆᐃᐃ: function (a) {
        for (var b = this, c = ps; c < b.ⲆⲆᐃⵠᐃ.length; c++) {
          if (a === b.ⲆⲆᐃⵠᐃ[c].ⵠⲆⲆⲆ) {
            return b.ⲆⲆᐃⵠᐃ[c];
          }
        }
        return null;
      },
      ⲆⵠⲆⵠⲆᐃΔᐃⵠ: function () {
        var a = this;
        a.ⵠᐃⲆⵠᐃⵠⵠᐃⲆ();
        for (var b = 0; b < a.ⲆⲆᐃⵠᐃ.length; b++) {
          if (a.ⲆⲆᐃⵠᐃ[b].ⲆΔᐃⲆΔ) {
            return a.ⲆⲆᐃⵠᐃ[b].reset();
          }
        }
        return new d(a);
      },
      ⵠᐃⲆⵠᐃⵠⵠᐃⲆ: function () {
        var a = this;
        var b = a.ⲆⲆⵠᐃⵠⵠΔΔΔ;
        var c = tt;
        var d = gu;
        if (a.ⲆⲆᐃⵠᐃ.length >= b) {
          for (d = 0; d < a.ⲆⲆᐃⵠᐃ.length; d++) {
            if (a.ⲆⲆᐃⵠᐃ[d].ⲆΔᐃⲆΔ) {
              c++;
            }
          }
          for (d = a.ⲆⲆᐃⵠᐃ.length - 1; d >= tt; d--) {
            if (c <= b) {
              return;
            }
            if (a.ⲆⲆᐃⵠᐃ[d].ⲆΔᐃⲆΔ) {
              if (a.ΔΔⵠⲆᐃ && a.ⲆⲆᐃⵠᐃ[d].ⲆⵠΔⲆ) {
                a.ⲆⲆᐃⵠᐃ[d].ⲆⵠΔⲆ.disconnect(Hi);
              }
              a.ⲆⲆᐃⵠᐃ.splice(d, Xn);
              c--;
            }
          }
        }
      },
      ⵠⵠᐃΔΔ: function (a) {
        if (a === undefined) {
          var b = [];
          for (var c = 0; c < this.ⲆⲆᐃⵠᐃ.length; c++) {
            b.push(this.ⲆⲆᐃⵠᐃ[c].ⵠⲆⲆⲆ);
          }
          return b;
        }
        return [a];
      },
      ΔⲆⲆⵠΔᐃΔΔⵠ: function (a) {
        a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ = f.ᐃ.createBufferSource();
        a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.buffer = j[this.ΔⵠⲆⲆⵠ];
        if (a.ᐃⲆΔΔⵠ) {
          a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.connect(a.ᐃⲆΔΔⵠ);
        } else {
          a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.connect(a.ⲆⵠΔⲆ);
        }
        a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loop = a.ⵠΔⵠⲆΔ;
        if (a.ⵠΔⵠⲆΔ) {
          a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loopStart = a.ΔΔΔΔⵠ || Pg;
          a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.loopEnd = a.ⵠΔᐃⵠᐃΔᐃ;
        }
        a.ⲆⵠΔⲆ.ⵠᐃᐃᐃᐃ.playbackRate.value = a.ΔΔΔⲆᐃ;
        return this;
      },
      ΔⵠⲆⲆⲆⲆⲆ: function (a) {
        var b = this;
        if (b.ᐃⵠΔΔΔᐃᐃ) {
          a.ⵠᐃᐃᐃᐃ.onended = null;
          a.ⵠᐃᐃᐃᐃ.disconnect(wj);
          try {
            a.ⵠᐃᐃᐃᐃ.buffer = b.ᐃⵠΔΔΔᐃᐃ;
          } catch (a) {}
        }
        a.ⵠᐃᐃᐃᐃ = null;
        return b;
      }
    };
    function d(a) {
      this.ΔⵠⵠΔΔⵠᐃ = a;
      this.ᐃΔΔΔᐃ();
    }
    d.prototype = {
      ᐃΔΔΔᐃ: function () {
        var a = this;
        var b = a.ΔⵠⵠΔΔⵠᐃ;
        a.ΔⲆᐃⲆⲆ = b.ΔⲆᐃⲆⲆ;
        a.ⵠΔⵠⲆΔ = b.ⵠΔⵠⲆΔ;
        a.ⲆᐃΔⲆⲆ = b.ⲆᐃΔⲆⲆ;
        a.ΔΔΔⲆᐃ = b.ΔΔΔⲆᐃ;
        a.ΔⲆⵠⵠᐃ = wj;
        a.ⲆΔΔⵠⲆ = true;
        a.ⲆΔᐃⲆΔ = !Db;
        a.ᐃᐃΔⲆᐃ = "__default";
        a.ⵠⲆⲆⲆ = ++f.ΔⲆⲆᐃⲆᐃⵠ;
        b.ⲆⲆᐃⵠᐃ.push(a);
        a.create();
        return a;
      },
      create: function () {
        var a = this;
        var b = a.ΔⵠⵠΔΔⵠᐃ;
        var c = f.ΔⲆᐃⲆⲆ || a.ΔⲆᐃⲆⲆ || a.ΔⵠⵠΔΔⵠᐃ.ΔⲆᐃⲆⲆ ? 0 : a.ⲆᐃΔⲆⲆ;
        if (b.ΔΔⵠⲆᐃ) {
          a.ⲆⵠΔⲆ = f.ᐃ.createGain === undefined ? f.ᐃ.ⵠΔᐃΔⵠᐃⵠᐃᐃ() : f.ᐃ.createGain();
          a.ⲆⵠΔⲆ.gain.setValueAtTime(c, f.ᐃ.currentTime);
          a.ⲆⵠΔⲆ.paused = !mj;
          a.ⲆⵠΔⲆ.connect(f.ᐃⵠⵠⲆΔᐃΔ);
        } else {
          a.ⲆⵠΔⲆ = new Audio();
          a.ᐃⲆᐃⵠΔⵠΔ = a.ΔᐃΔⵠᐃⵠⲆΔⵠ.bind(a);
          a.ⲆⵠΔⲆ.addEventListener("error", a.ᐃⲆᐃⵠΔⵠΔ, false);
          a.ⵠᐃⲆᐃⲆⲆⲆ = a.ΔⲆⲆΔⲆⲆⵠⵠᐃ.bind(a);
          a.ⲆⵠΔⲆ.addEventListener(f.ᐃΔᐃΔⲆⲆⵠ, a.ⵠᐃⲆᐃⲆⲆⲆ, false);
          a.ⲆⵠΔⲆ.src = b.ΔⵠⲆⲆⵠ;
          a.ⲆⵠΔⲆ.preload = "auto";
          a.ⲆⵠΔⲆ.volume = c * f.volume();
          a.ⲆⵠΔⲆ.load();
        }
        return a;
      },
      reset: function () {
        var a = this;
        var b = a.ΔⵠⵠΔΔⵠᐃ;
        a.ΔⲆᐃⲆⲆ = b.ΔⲆᐃⲆⲆ;
        a.ⵠΔⵠⲆΔ = b.ⵠΔⵠⲆΔ;
        a.ⲆᐃΔⲆⲆ = b.ⲆᐃΔⲆⲆ;
        a.ΔΔΔⲆᐃ = b.ΔΔΔⲆᐃ;
        a.ΔⲆⵠⵠᐃ = 0;
        a.ᐃⲆⲆΔⵠⵠⲆ = 0;
        a.ⲆΔΔⵠⲆ = true;
        a.ⲆΔᐃⲆΔ = !wj;
        a.ᐃᐃΔⲆᐃ = "__default";
        a.ⵠⲆⲆⲆ = ++f.ΔⲆⲆᐃⲆᐃⵠ;
        return a;
      },
      ΔᐃΔⵠᐃⵠⲆΔⵠ: function () {
        var a = this;
        a.ΔⵠⵠΔΔⵠᐃ.ⵠᐃⲆΔᐃ("loaderror", a.ⵠⲆⲆⲆ, a.ⲆⵠΔⲆ.error ? a.ⲆⵠΔⲆ.error.code : 0);
        a.ⲆⵠΔⲆ.removeEventListener("error", a.ᐃⲆᐃⵠΔⵠΔ, !Ol);
      },
      ΔⲆⲆΔⲆⲆⵠⵠᐃ: function () {
        var a = this;
        var b = a.ΔⵠⵠΔΔⵠᐃ;
        b.ΔⲆⲆᐃⲆⵠΔ = Math.ceil(a.ⲆⵠΔⲆ.duration * 10) / yl;
        if (Object.keys(b.ᐃᐃΔⲆᐃ).length === 0) {
          b.ᐃᐃΔⲆᐃ = {
            ⲆᐃΔⵠΔⵠΔⲆⵠ: [Eh, b.ΔⲆⲆᐃⲆⵠΔ * 1000]
          };
        }
        if (b.ⲆΔΔⲆᐃ !== "loaded") {
          b.ⲆΔΔⲆᐃ = "loaded";
          b.ⵠᐃⲆΔᐃ("load");
          b.ᐃᐃΔⲆⵠⵠⵠ();
        }
        a.ⲆⵠΔⲆ.removeEventListener(f.ᐃΔᐃΔⲆⲆⵠ, a.ⵠᐃⲆᐃⲆⲆⲆ, false);
      }
    };
    var j = {};
    function i(b) {
      var c = b.ΔⵠⲆⲆⵠ;
      if (j[c]) {
        b.ΔⲆⲆᐃⲆⵠΔ = j[c].duration;
        a(b);
        return;
      }
      if (/^data:[^;]+;base64,/.test(c)) {
        for (var d = atob(c.split(",")[1]), e = new Uint8Array(d.length), f = 0; f < d.length; ++f) {
          e[f] = d.charCodeAt(f);
        }
        m(e.buffer, b);
      } else {
        var g = new XMLHttpRequest();
        g.open("GET", c, !Db);
        g.responseType = "arraybuffer";
        g.onload = function () {
          var a = (g.status + "")[0];
          if (a === "0" || a === "2" || a === "3") {
            m(g.response, b);
          } else {
            b.ⵠᐃⲆΔᐃ("loaderror", null, "Failed loading audio file with status: " + g.status + ".");
          }
        };
        g.onerror = function () {
          if (b.ΔΔⵠⲆᐃ) {
            b.ᐃⲆΔΔᐃⲆᐃ = true;
            b.ΔΔⵠⲆᐃ = !js;
            b.ⲆⲆᐃⵠᐃ = [];
            delete j[c];
            b.load();
          }
        };
        k(g);
      }
    }
    function k(a) {
      try {
        a.send();
      } catch (b) {
        a.onerror();
      }
    }
    function m(b, c) {
      f.ᐃ.decodeAudioData(b, function (b) {
        if (b && c.ⲆⲆᐃⵠᐃ.length > Da) {
          j[c.ΔⵠⲆⲆⵠ] = b;
          a(c, b);
        }
      }, function () {
        c.ⵠᐃⲆΔᐃ("loaderror", null, "Decoding audio data failed.");
      });
    }
    function a(a, b) {
      if (b && !a.ΔⲆⲆᐃⲆⵠΔ) {
        a.ΔⲆⲆᐃⲆⵠΔ = b.duration;
      }
      if (zl === Object.keys(a.ᐃᐃΔⲆᐃ).length) {
        a.ᐃᐃΔⲆᐃ = {
          ⲆᐃΔⵠΔⵠΔⲆⵠ: [zl, a.ΔⲆⲆᐃⲆⵠΔ * 1000]
        };
      }
      if (a.ⲆΔΔⲆᐃ !== "loaded") {
        a.ⲆΔΔⲆᐃ = "loaded";
        a.ⵠᐃⲆΔᐃ("load");
        a.ᐃᐃΔⲆⵠⵠⵠ();
      }
    }
    function h() {
      try {
        if (typeof AudioContext != "undefined") {
          f.ᐃ = new AudioContext();
        } else if (typeof ⵠΔⵠⵠᐃⲆⵠΔⵠ != "undefined") {
          f.ᐃ = new ⵠΔⵠⵠᐃⲆⵠΔⵠ();
        } else {
          f.ⲆΔⵠⲆⲆ = !cu;
        }
      } catch (a) {
        f.ⲆΔⵠⲆⲆ = false;
      }
      var a = /iP(hone|od|ad)/.test(f.ⲆⲆⵠⵠⵠ && f.ⲆⲆⵠⵠⵠ.platform);
      var b = f.ⲆⲆⵠⵠⵠ && f.ⲆⲆⵠⵠⵠ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
      var c = b ? parseInt(b[za], Ra) : null;
      if (a && c && c < 9) {
        var d = /safari/.test(f.ⲆⲆⵠⵠⵠ && f.ⲆⲆⵠⵠⵠ.userAgent.toLowerCase());
        if (f.ⲆⲆⵠⵠⵠ && f.ⲆⲆⵠⵠⵠ.ⲆⲆⵠⵠⵠⵠᐃⵠⵠ && !d || f.ⲆⲆⵠⵠⵠ && !f.ⲆⲆⵠⵠⵠ.ⲆⲆⵠⵠⵠⵠᐃⵠⵠ && !d) {
          f.ⲆΔⵠⲆⲆ = !jh;
        }
      }
      if (f.ⲆΔⵠⲆⲆ) {
        f.ᐃⵠⵠⲆΔᐃΔ = f.ᐃ.createGain === undefined ? f.ᐃ.ⵠΔᐃΔⵠᐃⵠᐃᐃ() : f.ᐃ.createGain();
        f.ᐃⵠⵠⲆΔᐃΔ.gain.value = f.ΔⲆᐃⲆⲆ ? 0 : mk;
        f.ᐃⵠⵠⲆΔᐃΔ.connect(f.ᐃ.destination);
      }
      f.ⲆⲆⲆⵠⵠᐃᐃ();
    }
    if (typeof ΔⵠᐃᐃⲆⵠΔ == "function" && ΔⵠᐃᐃⲆⵠΔ.ΔᐃᐃⲆΔᐃΔ) {
      ΔⵠᐃᐃⲆⵠΔ([], function () {
        return {
          Howler: f,
          Howl: c
        };
      });
    }
    if (typeof ᐃᐃⲆⵠⵠⲆⲆ != "undefined") {
      ᐃᐃⲆⵠⵠⲆⲆ.Howler = f;
      ᐃᐃⲆⵠⵠⲆⲆ.Howl = c;
    }
    if (typeof dj != "undefined") {
      dj.ⵠⵠⲆᐃᐃⲆΔ = b;
      dj.Howler = f;
      dj.Howl = c;
      dj.ᐃⵠⵠⵠΔᐃᐃ = d;
    } else if (typeof ᐃᐃΔᐃⲆᐃⲆ != "undefined") {
      ᐃᐃΔᐃⲆᐃⲆ.ⵠⵠⲆᐃᐃⲆΔ = b;
      ᐃᐃΔᐃⲆᐃⲆ.Howler = f;
      ᐃᐃΔᐃⲆᐃⲆ.Howl = c;
      ᐃᐃΔᐃⲆᐃⲆ.ᐃⵠⵠⵠΔᐃᐃ = d;
    }
  })();
  (function () {
    ⵠⵠⲆᐃᐃⲆΔ.prototype.ⲆⵠⲆΔΔ = [0, In, 0];
    ⵠⵠⲆᐃᐃⲆΔ.prototype.ⲆᐃΔᐃᐃ = [0, ps, -1, In, 1, mj];
    ⵠⵠⲆᐃᐃⲆΔ.prototype.ⵠΔⵠⲆᐃⵠᐃ = function (a) {
      var b = this;
      if (!b.ᐃ || !b.ᐃ.listener) {
        return b;
      }
      for (var c = b.ΔⵠⵠⲆⵠ.length - 1; c >= 0; c--) {
        b.ΔⵠⵠⲆⵠ[c].ⵠΔⵠⲆᐃⵠᐃ(a);
      }
      return b;
    };
    ⵠⵠⲆᐃᐃⲆΔ.prototype.ⲆⲆΔⲆ = function (a, b, c) {
      var d = this;
      if (d.ᐃ && d.ᐃ.listener) {
        b = typeof b != "number" ? d.ⲆⵠⲆΔΔ[1] : b;
        c = typeof c != "number" ? d.ⲆⵠⲆΔΔ[2] : c;
        if (typeof a != "number") {
          return d.ⲆⵠⲆΔΔ;
        } else {
          d.ⲆⵠⲆΔΔ = [a, b, c];
          d.ᐃ.listener.setPosition(d.ⲆⵠⲆΔΔ[Kh], d.ⲆⵠⲆΔΔ[1], d.ⲆⵠⲆΔΔ[Zh]);
          return d;
        }
      } else {
        return d;
      }
    };
    ⵠⵠⲆᐃᐃⲆΔ.prototype.orientation = function (b, c, d, e, f, g) {
      var h = this;
      if (!h.ᐃ || !h.ᐃ.listener) {
        return h;
      }
      var a = h.ⲆᐃΔᐃᐃ;
      c = typeof c != "number" ? a[Ug] : c;
      d = typeof d != "number" ? a[H] : d;
      e = typeof e != "number" ? a[3] : e;
      f = typeof f != "number" ? a[nj] : f;
      g = typeof g != "number" ? a[5] : g;
      if (typeof b != "number") {
        return a;
      } else {
        h.ⲆᐃΔᐃᐃ = [b, c, d, e, f, g];
        h.ᐃ.listener.setOrientation(b, c, d, e, f, g);
        return h;
      }
    };
    Howl.prototype.ᐃΔΔΔᐃ = function (a) {
      return function (b) {
        var c = this;
        c.ⲆᐃΔᐃᐃ = b.orientation || [1, 0, 0];
        c.ΔΔⲆᐃⲆⲆᐃ = b.ⵠΔⵠⲆᐃⵠᐃ || null;
        c.ⲆⵠⲆΔΔ = b.ⲆⲆΔⲆ || null;
        c.ΔΔⵠΔᐃ = {
          coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
          coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
          coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
          distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
          maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
          panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
          refDistance: b.refDistance !== undefined ? b.refDistance : jh,
          rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : za
        };
        c.ΔᐃⵠᐃΔⲆΔΔΔ = b.ΔⵠⲆⲆΔⵠⵠⵠᐃ ? [{
          ⵠΔⲆᐃᐃ: b.ΔⵠⲆⲆΔⵠⵠⵠᐃ
        }] : [];
        c.ⲆⵠⵠⲆᐃⵠΔⵠᐃ = b.ⲆⵠᐃⲆΔⵠⵠΔⵠ ? [{
          ⵠΔⲆᐃᐃ: b.ⲆⵠᐃⲆΔⵠⵠΔⵠ
        }] : [];
        c.ⲆᐃⲆⵠΔΔᐃⵠΔ = b.ⲆᐃⵠᐃᐃⵠᐃᐃΔ ? [{
          ⵠΔⲆᐃᐃ: b.ⲆᐃⵠᐃᐃⵠᐃᐃΔ
        }] : [];
        return a.call(this, b);
      };
    }(Howl.prototype.ᐃΔΔΔᐃ);
    Howl.prototype.ⵠΔⵠⲆᐃⵠᐃ = function (b, c) {
      var d = this;
      if (!d.ΔΔⵠⲆᐃ) {
        return d;
      }
      if (d.ⲆΔΔⲆᐃ !== "loaded") {
        d.ΔⵠⵠⲆΔ.push({
          event: "stereo",
          action: function () {
            d.ⵠΔⵠⲆᐃⵠᐃ(b, c);
          }
        });
        return d;
      }
      var e = Howler.ᐃ.createStereoPanner === undefined ? "spatial" : "stereo";
      if (c === undefined) {
        if (typeof b != "number") {
          return d.ΔΔⲆᐃⲆⲆᐃ;
        }
        d.ΔΔⲆᐃⲆⲆᐃ = b;
        d.ⲆⵠⲆΔΔ = [b, 0, Pg];
      }
      for (var f = d.ⵠⵠᐃΔΔ(c), g = Pg; g < f.length; g++) {
        var h = d.ⲆΔⲆᐃᐃ(f[g]);
        if (h) {
          if (typeof b != "number") {
            return h.ΔΔⲆᐃⲆⲆᐃ;
          }
          h.ΔΔⲆᐃⲆⲆᐃ = b;
          h.ⲆⵠⲆΔΔ = [b, 0, Zj];
          if (h.ⲆⵠΔⲆ) {
            h.ΔΔⵠΔᐃ.panningModel = "equalpower";
            if (!h.ᐃⲆΔΔⵠ || !h.ᐃⲆΔΔⵠ.pan) {
              a(h, e);
            }
            if (e === "spatial") {
              h.ᐃⲆΔΔⵠ.setPosition(b, 0, 0);
            } else {
              h.ᐃⲆΔΔⵠ.pan.value = b;
            }
          }
          d.ⵠᐃⲆΔᐃ("stereo", h.ⵠⲆⲆⲆ);
        }
      }
      return d;
    };
    Howl.prototype.ⲆⲆΔⲆ = function (b, c, d, e) {
      var f = this;
      if (!f.ΔΔⵠⲆᐃ) {
        return f;
      }
      if (f.ⲆΔΔⲆᐃ !== "loaded") {
        f.ΔⵠⵠⲆΔ.push({
          event: "pos",
          action: function () {
            f.ⲆⲆΔⲆ(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? 0 : c;
      d = typeof d != "number" ? -0.5 : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ⲆⵠⲆΔΔ;
        }
        f.ⲆⵠⲆΔΔ = [b, c, d];
      }
      for (var g = f.ⵠⵠᐃΔΔ(e), i = 0; i < g.length; i++) {
        var j = f.ⲆΔⲆᐃᐃ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ⲆⵠⲆΔΔ;
          }
          j.ⲆⵠⲆΔΔ = [b, c, d];
          if (j.ⲆⵠΔⲆ) {
            if (!j.ᐃⲆΔΔⵠ || !!j.ᐃⲆΔΔⵠ.pan) {
              a(j, "spatial");
            }
            j.ᐃⲆΔΔⵠ.setPosition(b, c, d);
          }
          f.ⵠᐃⲆΔᐃ("pos", j.ⵠⲆⲆⲆ);
        }
      }
      return f;
    };
    Howl.prototype.orientation = function (b, c, d, e) {
      var f = this;
      if (!f.ΔΔⵠⲆᐃ) {
        return f;
      }
      if (f.ⲆΔΔⲆᐃ !== "loaded") {
        f.ΔⵠⵠⲆΔ.push({
          event: "orientation",
          action: function () {
            f.orientation(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? f.ⲆᐃΔᐃᐃ[1] : c;
      d = typeof d != "number" ? f.ⲆᐃΔᐃᐃ[pq] : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ⲆᐃΔᐃᐃ;
        }
        f.ⲆᐃΔᐃᐃ = [b, c, d];
      }
      for (var g = f.ⵠⵠᐃΔΔ(e), i = 0; i < g.length; i++) {
        var j = f.ⲆΔⲆᐃᐃ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ⲆᐃΔᐃᐃ;
          }
          j.ⲆᐃΔᐃᐃ = [b, c, d];
          if (j.ⲆⵠΔⲆ) {
            if (!j.ᐃⲆΔΔⵠ) {
              j.ⲆⵠⲆΔΔ ||= f.ⲆⵠⲆΔΔ || [zl, ps, -0.5];
              a(j, "spatial");
            }
            j.ᐃⲆΔΔⵠ.setOrientation(b, c, d);
          }
          f.ⵠᐃⲆΔᐃ("orientation", j.ⵠⲆⲆⲆ);
        }
      }
      return f;
    };
    Howl.prototype.ⲆⵠΔᐃΔⵠⵠᐃⲆ = function () {
      var b;
      var c;
      var d;
      var e = this;
      var f = arguments;
      if (!e.ΔΔⵠⲆᐃ) {
        return e;
      }
      if (Rq === f.length) {
        return e.ΔΔⵠΔᐃ;
      }
      if (Xn === f.length) {
        if (typeof f[0] != "object") {
          if (d = e.ⲆΔⲆᐃᐃ(parseInt(f[Bg], 10))) {
            return d.ΔΔⵠΔᐃ;
          } else {
            return e.ΔΔⵠΔᐃ;
          }
        }
        b = f[0];
        if (c === undefined) {
          e.ΔΔⵠΔᐃ = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : e.ᐃΔⵠⲆΔⵠΔᐃⲆ,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : e.ⵠⲆⲆΔⲆⵠᐃᐃⵠ,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : e.ΔΔΔⵠΔΔⲆⵠⵠ,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : e.ᐃⵠⲆΔⲆⵠᐃΔⵠ,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : e.ⵠⵠⵠΔⲆⲆⵠⵠΔ,
            panningModel: b.panningModel !== undefined ? b.panningModel : e.ⵠΔΔⵠΔΔᐃᐃⵠ,
            refDistance: b.refDistance !== undefined ? b.refDistance : e.ⲆᐃⵠᐃᐃΔᐃᐃᐃ,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : e.ⵠᐃⲆΔΔΔΔⲆᐃ
          };
        }
      } else if (f.length === 2) {
        b = f[Db];
        c = parseInt(f[1], kk);
      }
      for (var g = e.ⵠⵠᐃΔΔ(c), j = 0; j < g.length; j++) {
        if (d = e.ⲆΔⲆᐃᐃ(g[j])) {
          var k = d.ΔΔⵠΔᐃ;
          k = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : k.coneInnerAngle,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : k.coneOuterAngle,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : k.coneOuterGain,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : k.distanceModel,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : k.maxDistance,
            panningModel: b.panningModel !== undefined ? b.panningModel : k.panningModel,
            refDistance: b.refDistance !== undefined ? b.refDistance : k.refDistance,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : k.rolloffFactor
          };
          var m = d.ᐃⲆΔΔⵠ;
          if (m) {
            m.coneInnerAngle = k.coneInnerAngle;
            m.coneOuterAngle = k.coneOuterAngle;
            m.coneOuterGain = k.coneOuterGain;
            m.distanceModel = k.distanceModel;
            m.maxDistance = k.maxDistance;
            m.panningModel = k.panningModel;
            m.refDistance = k.refDistance;
            m.rolloffFactor = k.rolloffFactor;
          } else {
            d.ⲆⵠⲆΔΔ ||= e.ⲆⵠⲆΔΔ || [0, Hi, -0.5];
            a(d, "spatial");
          }
        }
      }
      return e;
    };
    ᐃⵠⵠⵠΔᐃᐃ.prototype.ᐃΔΔΔᐃ = function (a) {
      return function () {
        var b = this;
        var c = b.ΔⵠⵠΔΔⵠᐃ;
        b.ⲆᐃΔᐃᐃ = c.ⲆᐃΔᐃᐃ;
        b.ΔΔⲆᐃⲆⲆᐃ = c.ΔΔⲆᐃⲆⲆᐃ;
        b.ⲆⵠⲆΔΔ = c.ⲆⵠⲆΔΔ;
        b.ΔΔⵠΔᐃ = c.ΔΔⵠΔᐃ;
        a.call(this);
        if (b.ΔΔⲆᐃⲆⲆᐃ) {
          c.ⵠΔⵠⲆᐃⵠᐃ(b.ΔΔⲆᐃⲆⲆᐃ);
        } else if (b.ⲆⵠⲆΔΔ) {
          c.ⲆⲆΔⲆ(b.ⲆⵠⲆΔΔ[0], b.ⲆⵠⲆΔΔ[Oq], b.ⲆⵠⲆΔΔ[2], b.ⵠⲆⲆⲆ);
        }
      };
    }(ᐃⵠⵠⵠΔᐃᐃ.prototype.ᐃΔΔΔᐃ);
    ᐃⵠⵠⵠΔᐃᐃ.prototype.reset = function (a) {
      return function () {
        var b = this;
        var c = b.ΔⵠⵠΔΔⵠᐃ;
        b.ⲆᐃΔᐃᐃ = c.ⲆᐃΔᐃᐃ;
        b.ⲆⵠⲆΔΔ = c.ⲆⵠⲆΔΔ;
        b.ΔΔⵠΔᐃ = c.ΔΔⵠΔᐃ;
        return a.call(this);
      };
    }(ᐃⵠⵠⵠΔᐃᐃ.prototype.reset);
    function a(a, b) {
      b = b || "spatial";
      if (b === "spatial") {
        a.ᐃⲆΔΔⵠ = Howler.ᐃ.createPanner();
        a.ᐃⲆΔΔⵠ.coneInnerAngle = a.ΔΔⵠΔᐃ.coneInnerAngle;
        a.ᐃⲆΔΔⵠ.coneOuterAngle = a.ΔΔⵠΔᐃ.coneOuterAngle;
        a.ᐃⲆΔΔⵠ.coneOuterGain = a.ΔΔⵠΔᐃ.coneOuterGain;
        a.ᐃⲆΔΔⵠ.distanceModel = a.ΔΔⵠΔᐃ.distanceModel;
        a.ᐃⲆΔΔⵠ.maxDistance = a.ΔΔⵠΔᐃ.maxDistance;
        a.ᐃⲆΔΔⵠ.panningModel = a.ΔΔⵠΔᐃ.panningModel;
        a.ᐃⲆΔΔⵠ.refDistance = a.ΔΔⵠΔᐃ.refDistance;
        a.ᐃⲆΔΔⵠ.rolloffFactor = a.ΔΔⵠΔᐃ.rolloffFactor;
        a.ᐃⲆΔΔⵠ.setPosition(a.ⲆⵠⲆΔΔ[0], a.ⲆⵠⲆΔΔ[1], a.ⲆⵠⲆΔΔ[2]);
        a.ᐃⲆΔΔⵠ.setOrientation(a.ⲆᐃΔᐃᐃ[0], a.ⲆᐃΔᐃᐃ[1], a.ⲆᐃΔᐃᐃ[2]);
      } else {
        a.ᐃⲆΔΔⵠ = Howler.ᐃ.createStereoPanner();
        a.ᐃⲆΔΔⵠ.pan.value = a.ΔΔⲆᐃⲆⲆᐃ;
      }
      a.ᐃⲆΔΔⵠ.connect(a.ⲆⵠΔⲆ);
      if (!a.ⲆΔΔⵠⲆ) {
        a.ΔⵠⵠΔΔⵠᐃ.pause(a.ⵠⲆⲆⲆ, true).play(a.ⵠⲆⲆⲆ);
      }
    }
  })();
  var ef = 1;
  var tf = 1;
  var nf = {
    ⲆⵠⵠΔⲆΔᐃ: 460000,
    ⵠᐃΔΔΔ: Zh,
    ⵠᐃΔⲆⲆᐃⵠΔᐃ: wg,
    ΔᐃΔᐃⵠⲆᐃⲆⵠ: 5000,
    ᐃᐃᐃⲆⵠⵠᐃⲆⲆ: 5000,
    ⵠΔΔᐃⵠᐃΔᐃᐃ: 5000,
    ΔⵠΔ: va,
    ᐃᐃⲆⲆⲆ: He,
    ᐃⲆⲆΔⵠΔᐃ: 12,
    ⵠᐃΔⲆⵠΔᐃ: 3000,
    ᐃΔΔΔΔ: Ob,
    ΔᐃΔΔΔ: qu,
    ⵠΔⲆⵠΔΔⵠⵠⲆ: Ms
  };
  var of = [];
  of[-1] = nf.ΔᐃΔΔΔ;
  of[_r.ᐃⵠΔΔⲆ] = nf.ΔᐃΔΔΔ;
  of[_r.ᐃᐃΔⵠΔ] = nf.ΔᐃΔΔΔ;
  of[_r.ᐃΔΔΔᐃΔⵠⲆᐃ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⲆΔⲆⲆⵠ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⲆⵠⵠⲆⲆ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⵠᐃⲆΔΔ] = nf.ⵠᐃΔΔΔ;
  of[_r.ᐃⲆⵠΔⲆ] = nf.ⵠᐃΔΔΔ;
  of[_r.ΔⲆⲆⵠⲆ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⲆⵠΔⵠΔ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⵠΔᐃᐃⵠ] = nf.ⵠᐃΔΔΔ;
  of[_r.ΔⵠᐃΔᐃ] = nf.ⵠᐃΔΔΔ;
  of[_r.ᐃᐃⲆΔⲆ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⲆⲆᐃᐃⲆ] = nf.ⵠᐃΔΔΔ;
  of[_r.ΔⲆᐃΔⵠ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⵠΔΔΔΔ] = nf.ⵠᐃΔΔΔ;
  of[_r.ᐃΔⲆᐃΔ] = nf.ⵠᐃΔΔΔ;
  of[_r.ΔⲆᐃⵠΔ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⵠᐃⲆΔᐃᐃᐃⲆᐃ] = nf.ⵠᐃΔΔΔ;
  of[_r.Ⲇᐃᐃᐃᐃ] = nf.ⵠᐃΔΔΔ;
  of[_r.ᐃᐃΔⲆⲆ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⵠΔᐃⵠᐃ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⵠᐃᐃⵠΔ] = nf.ⵠᐃΔΔΔ;
  of[_r.ᐃᐃᐃᐃⲆ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⲆⲆΔᐃᐃ] = nf.ⵠᐃΔΔΔ;
  of[_r.ᐃΔⵠⲆᐃ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⲆᐃⲆⲆᐃⲆᐃⲆᐃ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⲆᐃΔⲆΔ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⲆⲆⵠⲆⲆ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⵠΔΔΔⵠ] = nf.ⵠᐃΔΔΔ;
  of[_r.ᐃⵠⵠⵠᐃ] = nf.ⵠᐃΔΔΔ;
  of[_r.ᐃⵠⲆⵠΔ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⵠⵠᐃᐃⲆ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⵠᐃᐃΔⵠ] = nf.ⵠᐃΔΔΔ;
  of[_r.ᐃΔΔᐃΔ] = nf.ⵠᐃΔΔΔ;
  of[_r.ⲆⵠⲆᐃΔ] = nf.ⵠᐃΔΔΔ;
  of[_r.ᐃΔΔΔΔ] = nf.ᐃΔΔΔΔ;
  of[_r.ⲆΔΔⵠⵠ] = nf.ᐃΔΔΔΔ;
  of[_r.ⵠᐃⵠᐃΔ] = nf.ᐃΔΔΔΔ;
  of[_r.ⵠᐃⲆⲆⵠ] = nf.ᐃΔΔΔΔ;
  ⵠΔⵠⵠ = [];
  ⵠΔⵠⵠ[0] = ya;
  ⵠΔⵠⵠ[js] = lb;
  ⵠΔⵠⵠ[2] = Ug;
  ⵠΔⵠⵠ[ig] = 1;
  ⵠΔⵠⵠ[4] = mj;
  ⵠΔⵠⵠ[5] = 0;
  ⵠΔⵠⵠ[ms] = Rs;
  ⵠΔⵠⵠ[cq] = 0;
  ⵠΔⵠⵠ[$l] = Hi;
  ⵠΔⵠⵠ[cl] = Db;
  ⵠΔⵠⵠ[10] = 1;
  ⵠΔⵠⵠ[tk] = 1;
  ⵠΔⵠⵠ[12] = jh;
  ⵠΔⵠⵠ[13] = 1;
  ⵠΔⵠⵠ[Tn] = 1;
  if (dj.ᐃⲆᐃⲆⵠΔᐃⵠⲆ) {
    var rf = dj.Math.acos;
    dj.Math.acos = dj.Math.asin;
    dj.Math.asin = rf;
    var af = dj.Math.acos;
    dj.Math.acos = dj.Math.asin;
    dj.Math.asin = af;
  }
  ⵠΔⵠⵠ[15] = 1;
  ⵠΔⵠⵠ[16] = 0;
  ⵠΔⵠⵠ[us] = 0;
  ⵠΔⵠⵠ[18] = wj;
  ⵠΔⵠⵠ[vl] = Eh;
  ⵠΔⵠⵠ[20] = 0;
  ⵠΔⵠⵠ[21] = tg;
  ⵠΔⵠⵠ[22] = 0;
  ⵠΔⵠⵠ[23] = 1;
  ⵠΔⵠⵠ[24] = mk;
  ⵠΔⵠⵠ[25] = yg;
  ⵠΔⵠⵠ[26] = 1;
  ⵠΔⵠⵠ[27] = rg;
  ⵠΔⵠⵠ[28] = 1;
  ⵠΔⵠⵠ[29] = hs;
  ⵠΔⵠⵠ[30] = 1;
  ⵠΔⵠⵠ[31] = 1;
  ⵠΔⵠⵠ[32] = 1;
  ⵠΔⵠⵠ[33] = 1;
  ⵠΔⵠⵠ[34] = Xn;
  ⵠΔⵠⵠ[35] = fl;
  ⵠΔⵠⵠ[36] = ie;
  ⵠΔⵠⵠ[37] = 1;
  ⵠΔⵠⵠ[38] = ie;
  ⵠΔⵠⵠ[40] = 0;
  ⵠΔⵠⵠ[41] = 0;
  ⵠΔⵠⵠ[42] = 0;
  ⵠΔⵠⵠ[50] = qu;
  ⵠΔⵠⵠ[51] = fl;
  ⵠΔⵠⵠ[52] = jh;
  ⵠΔⵠⵠ[55] = Zj;
  ⵠΔⵠⵠ[56] = 0;
  ⵠΔⵠⵠ[57] = 0;
  ⵠΔⵠⵠ[58] = gu;
  ΔⲆᐃⲆⵠ = [];
  ΔⲆᐃⲆⵠ[ow.ⵠᐃⲆⲆⲆ] = 0;
  ΔⲆᐃⲆⵠ[ow.ΔᐃᐃⲆⲆ] = Kh;
  ΔⲆᐃⲆⵠ[ow.ⲆⵠᐃᐃΔ] = Hi;
  ΔⲆᐃⲆⵠ[ow.ᐃΔΔⵠΔ] = 0;
  ΔⲆᐃⲆⵠ[ow.ⵠᐃΔⲆᐃ] = -yg;
  ΔⲆᐃⲆⵠ[ow.ⲆΔᐃΔΔ] = -Ot;
  ΔⲆᐃⲆⵠ[ow.ⵠⲆΔⵠᐃ] = Zj;
  ΔⲆᐃⲆⵠ[ow.ⲆⲆⲆⲆⵠ] = 0;
  ΔⲆᐃⲆⵠ[ow.ⲆᐃⲆᐃⵠ] = 0;
  ΔⲆᐃⲆⵠ[ow.ΔΔΔⵠⵠ] = Eh;
  ΔⲆᐃⲆⵠ[ow.ⵠΔⲆⲆΔ] = 1;
  ΔⲆᐃⲆⵠ[ow.ⲆⵠⲆⵠⵠ] = rg;
  ΔⲆᐃⲆⵠ[ow.ΔᐃⵠⲆⲆ] = 1;
  ΔⲆᐃⲆⵠ[ow.ᐃᐃᐃᐃᐃ] = hd;
  ΔⲆᐃⲆⵠ[ow.ⵠᐃⲆᐃⵠ] = 1;
  ΔⲆᐃⲆⵠ[ow.ᐃΔⵠⵠΔ] = cu;
  ΔⲆᐃⲆⵠ[ow.ᐃⵠⵠⲆᐃ] = 1;
  ΔⲆᐃⲆⵠ[ow.ⵠⵠΔⵠⲆ] = Kh;
  ΔⲆᐃⲆⵠ[ow.ⲆᐃⲆΔΔ] = 1;
  ΔⲆᐃⲆⵠ[ow.Ⲇᐃⵠᐃⵠ] = 1;
  ΔⲆᐃⲆⵠ[ow.ⲆⵠᐃΔΔ] = 1;
  ΔⲆᐃⲆⵠ[ow.ᐃⲆⵠᐃᐃ] = 1;
  ΔⲆᐃⲆⵠ[ow.ⵠⲆᐃᐃⲆ] = Ol;
  ΔⲆᐃⲆⵠ[ow.ΔⵠⵠⲆᐃ] = tg;
  ΔⲆᐃⲆⵠ[ow.ⵠΔᐃⲆΔ] = xt;
  ΔⲆᐃⲆⵠ[ow.ᐃΔⵠⵠⵠ] = Ot;
  ΔⲆᐃⲆⵠ[ow.ⵠΔᐃΔΔ] = hs;
  ΔⲆᐃⲆⵠ[ow.Δⵠᐃⵠᐃ] = 1;
  ΔⲆᐃⲆⵠ[ow.Ⲇᐃⵠⵠⵠ] = Te;
  ΔⲆᐃⲆⵠ[ow.ᐃⲆΔᐃⲆ] = Bg;
  ΔⲆᐃⲆⵠ[ow.ΔⵠⵠΔΔ] = mk;
  ΔⲆᐃⲆⵠ[ow.ΔΔⲆᐃⲆ] = 1;
  ΔⲆᐃⲆⵠ[ow.ΔⵠΔⲆΔ] = cu;
  ΔⲆᐃⲆⵠ[ow.ⵠΔⲆⵠᐃ] = hs;
  ΔⲆᐃⲆⵠ[ow.ᐃΔΔⵠᐃ] = Ol;
  ΔⲆᐃⲆⵠ[ow.ⲆᐃΔᐃⵠ] = qu;
  ΔⲆᐃⲆⵠ[ow.ⲆⲆⵠⵠᐃ] = cu;
  ΔⲆᐃⲆⵠ[ow.ΔⲆΔΔⲆ] = 1;
  ΔⲆᐃⲆⵠ[ow.ᐃⲆⲆⲆⲆ] = mj;
  ΔⲆᐃⲆⵠ[ow.Δᐃᐃᐃᐃ] = 1;
  var sf = {
    ⲆⲆⲆⵠⵠⵠⵠ: {
      ⵠⵠᐃΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        d2: [90684, 300, false],
        d1: [90391, 300, uh],
        d0: [90086, 300, sl]
      },
      sample: {
        d0: nf.ᐃᐃⲆⲆⲆ,
        d1: nf.ᐃᐃⲆⲆⲆ,
        d2: nf.ᐃᐃⲆⲆⲆ
      }
    },
    ⲆΔᐃⵠᐃⵠᐃ: {
      ⵠⵠᐃΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        p0: [89303, 300, false],
        p2: [89815, 300, false],
        p1: [89549, 300, false]
      },
      sample: {
        p0: nf.ᐃᐃⲆⲆⲆ,
        p1: nf.ᐃᐃⲆⲆⲆ,
        p2: nf.ᐃᐃⲆⲆⲆ
      }
    },
    ⲆⲆΔⲆᐃⵠᐃ: {
      ⵠⵠᐃΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        w3: [89025, 300, false],
        w0: [88195, 300, false],
        w2: [88751, 300, xo],
        w1: [88473, 300, false]
      },
      sample: {
        w0: nf.ᐃᐃⲆⲆⲆ,
        w1: nf.ᐃᐃⲆⲆⲆ,
        w2: nf.ᐃᐃⲆⲆⲆ,
        w3: nf.ᐃᐃⲆⲆⲆ
      }
    },
    ⲆⵠᐃⵠᐃΔⲆ: {
      ⵠⵠᐃΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        ΔⵠᐃᐃΔᐃⲆ: [92249, 500, false],
        ⵠⲆΔⵠⲆΔᐃ: [54524, 11393, true],
        ΔⲆΔⲆⵠⲆⲆ: [91022, 400, false],
        ΔⲆΔⵠⲆᐃⲆ: [31658, 813, true],
        ᐃⲆΔΔᐃ: [12356, 6965, oa],
        ⲆᐃⲆⵠⵠⵠΔ: [66961, 21223, true],
        ΔⲆⲆⵠᐃⲆⵠ: [32604, 21890, Gq],
        ⲆΔⲆⵠⲆΔᐃ: [19882, 8301, Gj],
        ⲆᐃΔᐃᐃⵠⵠ: [66961, 21223, true],
        ⲆᐃᐃⲆⵠⲆⲆ: [66014, 925, true],
        ⵠⲆᐃΔⲆ: [91431, 400, false],
        ᐃΔᐃⵠⲆ: [28380, 1797, xk],
        ⲆⲆⵠᐃΔⲆⵠ: [30562, 655, xk],
        ⵠᐃⲆⵠᐃⲆᐃᐃⲆ: [ar, 2800, true],
        ⵠᐃⵠⲆᐃⲆⲆ: [3100, 8800, true]
      },
      sample: {
        ⵠᐃⲆⵠᐃⲆᐃᐃⲆ: fl,
        ⵠᐃⵠⲆᐃⲆⲆ: 1,
        ⲆΔⲆⵠⲆΔᐃ: 1,
        ΔⲆⲆⵠᐃⲆⵠ: 1,
        ⵠⲆΔⵠⲆΔᐃ: 1,
        ⲆᐃⲆⵠⵠⵠΔ: Xn,
        ⲆᐃΔᐃᐃⵠⵠ: 1,
        ᐃⲆΔΔᐃ: nf.ᐃᐃⲆⲆⲆ,
        ᐃΔᐃⵠⲆ: nf.ᐃᐃⲆⲆⲆ,
        ⲆⲆⵠᐃΔⲆⵠ: nf.ᐃᐃⲆⲆⲆ,
        ΔⲆΔⵠⲆᐃⲆ: nf.ᐃᐃⲆⲆⲆ,
        ⲆᐃᐃⲆⵠⲆⲆ: nf.ᐃᐃⲆⲆⲆ,
        ΔⲆΔⲆⵠⲆⲆ: nf.ΔⵠΔ,
        ⵠⲆᐃΔⲆ: nf.ΔⵠΔ,
        ΔⵠᐃᐃΔᐃⲆ: nf.ΔⵠΔ
      }
    }
  };
  function hf(b, c, d, e, f, i, j, a, k, h, l) {
    this.r = Ol;
    this.ΔᐃⲆΔᐃ = b;
    this.ᐃⵠΔᐃΔⵠⵠ = b;
    this.ⵠᐃᐃ = c;
    this.ⵠΔⲆ = d;
    this.fade = e;
    this.ⵠⲆⲆⵠⲆⵠᐃ = f;
    this.ⲆΔΔⲆⲆΔᐃ = i;
    this.ⲆᐃΔⲆ = j;
    this.ΔΔᐃⵠΔΔΔ = a;
    this.source = k;
    this.source.ⲆΔⵠΔⵠⵠⵠ = k.x + k.w;
    this.source.ⵠⲆᐃⲆⵠ = k.y + k.ΔⵠⲆ;
    this.ΔᐃⵠΔⲆⲆᐃⵠⲆ = h;
    this.ⵠⲆᐃⲆᐃⵠⵠ = l;
    this.ᐃⵠᐃⲆᐃᐃᐃ = 0;
    this.ᐃᐃⲆⵠᐃᐃᐃ = {
      ⲆⲆᐃᐃ: ta,
      d: 5
    };
    this.ⵠΔΔⵠⵠ = function () {
      this.ΔᐃⲆΔᐃ -= _w;
      if (this.ΔᐃⲆΔᐃ < 0) {
        this.ΔᐃⲆΔᐃ = this.ᐃⵠΔᐃΔⵠⵠ;
        var a = sf.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ.playing(this.ⵠᐃᐃ);
        var b = sf.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ.playing(this.ⵠΔⲆ);
        if (a && !b) {
          var c = this.ⲆᐃΔⲆ.volume(this.ⵠᐃᐃ) * ef;
          var d = (Math.random() * this.ⲆΔΔⲆⲆΔᐃ + this.ⵠⲆⲆⵠⲆⵠᐃ) * ef;
          this.ⲆᐃΔⲆ.fade(c, d, this.fade, this.ⵠᐃᐃ);
        } else if (!a && b) {
          c = this.ⲆᐃΔⲆ.volume(this.ⵠΔⲆ) * ef;
          d = (Math.random() * this.ⲆΔΔⲆⲆΔᐃ + this.ⵠⲆⲆⵠⲆⵠᐃ) * ef;
          this.ⲆᐃΔⲆ.fade(c, d, this.fade, this.ⵠΔⲆ);
        }
      }
    };
    this.transition = function () {
      this.ΔᐃⲆΔᐃ = this.ᐃⵠΔᐃΔⵠⵠ;
      this.ᐃᐃⲆⵠᐃᐃᐃ.d = this.ᐃᐃⲆⵠᐃᐃᐃ.ⲆⲆᐃᐃ;
      if (mf.time) {
        this.ⲆᐃΔⲆ.fade(0, this.ⵠⲆⲆⵠⲆⵠᐃ * ef, this.ΔΔᐃⵠΔΔΔ, this.ⵠᐃᐃ);
        this.ⲆᐃΔⲆ.play(this.ⵠᐃᐃ);
        if (this.ⲆᐃΔⲆ.playing(this.ⵠΔⲆ)) {
          var a = this.ⲆᐃΔⲆ.volume(this.ⵠΔⲆ) * ef;
          this.ⲆᐃΔⲆ.fade(a, 0, this.ΔΔᐃⵠΔΔΔ, this.ⵠΔⲆ);
        }
      } else {
        this.ⲆᐃΔⲆ.fade(Hi, this.ⵠⲆⲆⵠⲆⵠᐃ * ef, this.ΔΔᐃⵠΔΔΔ, this.ⵠΔⲆ);
        this.ⲆᐃΔⲆ.play(this.ⵠΔⲆ);
        if (this.ⲆᐃΔⲆ.playing(this.ⵠᐃᐃ)) {
          a = this.ⲆᐃΔⲆ.volume(this.ⵠᐃᐃ) * ef;
          this.ⲆᐃΔⲆ.fade(a, wj, this.ΔΔᐃⵠΔΔΔ, this.ⵠᐃᐃ);
        }
      }
    };
    this.check = function (a) {
      if (this.ᐃⵠᐃⲆᐃᐃᐃ) {
        if (ᐃⵠΔⲆ.ⵠⲆᐃⲆᐃⵠⵠ(a, this.ΔᐃⵠΔⲆⲆᐃⵠⲆ)) {
          if (!$w.transition && nf.ⲆⵠⵠΔⲆΔᐃ > mf.ΔᐃᐃΔⲆ.now) {
            if (mf.time) {
              if (!this.ⲆᐃΔⲆ.playing(this.ⵠᐃᐃ)) {
                this.ᐃᐃⲆⵠᐃᐃᐃ.d -= _w;
                if (this.ᐃᐃⲆⵠᐃᐃᐃ.d < mj) {
                  this.transition();
                }
              }
            } else if (!this.ⲆᐃΔⲆ.playing(this.ⵠΔⲆ)) {
              this.ᐃᐃⲆⵠᐃᐃᐃ.d -= _w;
              if (Rq > this.ᐃᐃⲆⵠᐃᐃᐃ.d) {
                this.transition();
              }
            }
          }
        } else {
          this.ᐃⵠᐃⲆᐃᐃᐃ = tt;
          if (this.ⲆᐃΔⲆ.playing(this.ⵠᐃᐃ)) {
            var b = this.ⲆᐃΔⲆ.volume(this.ⵠᐃᐃ) * ef;
            this.ⲆᐃΔⲆ.fade(b, Db, this.ΔΔᐃⵠΔΔΔ, this.ⵠᐃᐃ);
          }
          if (this.ⲆᐃΔⲆ.playing(this.ⵠΔⲆ)) {
            b = ef * this.ⲆᐃΔⲆ.volume(this.ⵠΔⲆ);
            this.ⲆᐃΔⲆ.fade(b, Eh, this.ΔΔᐃⵠΔΔΔ, this.ⵠΔⲆ);
          }
        }
      } else if (ᐃⵠΔⲆ.ⵠⲆᐃⲆᐃⵠⵠ(a, this.ⵠⲆᐃⲆᐃⵠⵠ)) {
        this.ᐃⵠᐃⲆᐃᐃᐃ = Ot;
        if (!$w.transition && mf.ΔᐃᐃΔⲆ.now < nf.ⲆⵠⵠΔⲆΔᐃ) {
          this.transition();
        }
      }
    };
    this.ᐃⲆΔ = function (a, b) {
      var c;
      var d;
      c = this.source.x > a.x ? $w.ΔⵠΔᐃᐃⲆΔ(this.source.x) : a.x > this.source.ⲆΔⵠΔⵠⵠⵠ ? $w.ΔⵠΔᐃᐃⲆΔ(this.source.ⲆΔⵠΔⵠⵠⵠ) : b.x;
      d = a.y < this.source.y ? $w.ⲆᐃᐃᐃΔᐃΔ(this.source.y) : this.source.ⵠⲆᐃⲆⵠ < a.y ? $w.ⲆᐃᐃᐃΔᐃΔ(this.source.ⵠⲆᐃⲆⵠ) : b.y;
      this.ⲆᐃΔⲆ.pos(c, d, -0.5, this.ⵠᐃᐃ);
      this.ⲆᐃΔⲆ.pos(c, d, -0.5, this.ⵠΔⲆ);
    };
  }
  function lf(b, c, d, e, f, g) {
    const i = (8 << (b >> 24 & 255)) + (16 << (b & 255)) + (0 << (b >> 8 & 255)) + (24 << (b >> Kb & 255));
    const a = (24 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (16 << (c & 255)) + (8 << (c >> 24 & 255));
    const j = ~(f & 14288) & f | ~(f & 14288) & 14288;
    const h = function (b, c, d, e) {
      const f = (16 << (b >> 8 & 255)) + (24 << (b & 255)) + (8 << (b >> 16 & 255)) + (0 << (b >> 24 & lg));
      const g = ~(c & 58389) & 58389 | ~(c & 58389) & c;
      const h = zt(f, 0, 0, (Ig << (e & 255)) + (24 << (e >> 8 & 255)) + (0 << (e >> 16 & 255)) + (16 << (e >> 24 & 255)));
      const a = zt(g, 0, 0, f);
      return (0 << ((h ^ a) >> 16 & 255)) + (16 << ((h ^ a) >> 24 & 255)) + (24 << ((h ^ a) & 255)) + (8 << ((h ^ a) >> 8 & 255));
    }(i, a, 0, ~(e & 31976) & 31976 | ~(e & 31976) & e);
    zt(j, 0, 0, a);
    return (h | 55350) & ~(h & 55350);
  }
  function gf(b, c, d) {
    const e = ~(b & 9014) & (b | 9014);
    const f = (8 << (c >> 8 & el)) + (16 << (c & 255)) + (24 << (c >> 16 & 255)) + (0 << (c >> 24 & 255));
    const g = d ^ 14636;
    const h = lf(e, f, 0, e, f);
    (function (b, c, d) {
      const e = ~(b & 35461) & 35461 | ~(b & 35461) & b;
      const f = ~(c & 543) & (c | 543);
      const g = (0 << (d >> 24 & 255)) + (24 << (d >> 8 & 255)) + (16 << (d & 255)) + (8 << (d >> 16 & 255));
      const h = Uw(e, f, g, e, f);
      const a = kf(g, e, f, g, e);
    })(e, f, g);
    return h ^ 39930;
  }
  ᐃᐃΔⵠⲆ = {
    ᐃⲆⵠᐃⲆΔⵠ: 300,
    ᐃᐃᐃⵠΔⲆΔ: qo,
    ΔⲆΔⵠⲆΔᐃⵠᐃ: 0.2,
    ⵠΔᐃⲆⵠΔΔ: 100,
    ΔⵠⵠΔᐃⲆⵠ: gh,
    ⲆⵠΔΔⵠΔⵠⲆⲆ: 0.2,
    ΔⲆΔᐃⲆⲆΔⲆⲆ: 0.4,
    ⲆΔⵠⲆⲆΔΔⲆᐃ: 0.2,
    ⲆΔⲆᐃⲆΔΔ: 2,
    ⵠⵠⵠᐃΔΔⵠ: 0,
    ⲆⲆΔⲆᐃ: 2,
    ᐃᐃⵠᐃΔⲆᐃ: Y,
    ᐃⲆΔᐃᐃⵠᐃ: 1,
    ⲆᐃᐃⵠⵠⲆᐃ: 4
  };
  function uf(a, b, c) {
    this.ⲆΔⵠⲆᐃᐃΔ = a;
    this.c = 0;
    this.ⲆᐃΔⲆ = b;
    this.ⵠⲆΔᐃⲆ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + hd) % this.max;
      var a = this.ⵠⲆΔᐃⲆ[this.c];
      this.ⲆΔⵠⲆᐃᐃΔ.ΔⲆⲆΔⲆⵠⵠ(this.ⲆᐃΔⲆ, a);
      this.ⲆᐃΔⲆ.play(a);
    };
  }
  function bf(a) {
    this.ᐃᐃΔᐃⵠΔᐃ = js;
    this.ᐃⲆᐃᐃ = 0;
    this.mode = -Te;
    this.ᐃΔᐃⵠⲆ = $w.sample.ᐃΔᐃⵠⲆ[a];
    this.ⲆⲆⵠᐃΔⲆⵠ = $w.sample.ⲆⲆⵠᐃΔⲆⵠ[a];
    this.ΔⲆΔⵠⲆᐃⲆ = $w.sample.ΔⲆΔⵠⲆᐃⲆ[a];
    this.ⲆᐃᐃⲆⵠⲆⲆ = $w.sample.ⲆᐃᐃⲆⵠⲆⲆ[a];
    this.ΔᐃⲆΔᐃⲆΔ = new uf(this, sf.ⲆΔᐃⵠᐃⵠᐃ.ⵠⵠᐃΔᐃ, $w.ⲆⲆⵠΔⲆ.ΔᐃⲆΔᐃⲆΔ[a]);
    this.ⲆᐃᐃᐃⲆ = new uf(this, sf.ⲆⲆΔⲆᐃⵠᐃ.ⵠⵠᐃΔᐃ, $w.ⲆⲆⵠΔⲆ.ⲆᐃᐃᐃⲆ[a]);
    this.ⵠⲆΔⲆⲆ = new uf(this, sf.ⲆⲆⲆⵠⵠⵠⵠ.ⵠⵠᐃΔᐃ, $w.ⲆⲆⵠΔⲆ.ⵠⲆΔⲆⲆ[a]);
    this.ᐃⵠΔᐃⵠ = a;
    this.x = Kh;
    this.y = 0;
    this.ᐃⵠᐃᐃΔ = zl;
    this.ΔᐃⲆΔᐃ = ᐃᐃΔⵠⲆ.ⲆⲆⵠΔⲆⲆⵠⲆᐃ;
    this.ⲆⲆΔⲆ = {
      y: ps,
      x: 0
    };
    this.ᐃΔⵠⲆⵠ = sf.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ;
    this.ΔⲆΔⵠᐃⲆⵠⵠᐃ = function (a) {
      if (a === nf.ΔᐃΔΔΔ) {
        this.ΔᐃⲆΔᐃⲆΔ.play();
      } else if (a === nf.ⵠᐃΔΔΔ) {
        this.ⲆᐃᐃᐃⲆ.play();
      } else if (a === nf.ᐃΔΔΔΔ) {
        this.ⵠⲆΔⲆⲆ.play();
      }
    };
    this.ⵠⵠᐃᐃⲆᐃΔ = function (a) {
      if (a.ⲆᐃⵠⵠⵠΔΔ > Rq) {
        return ᐃᐃΔⵠⲆ.ⲆⲆΔⲆᐃ;
      } else if (a.ΔⵠᐃⲆᐃⲆⵠ > ya) {
        return ᐃᐃΔⵠⲆ.ᐃⲆΔᐃᐃⵠᐃ;
      } else if (Pg < a.ⲆΔΔΔᐃ || a.ⵠⲆΔᐃⵠ > 0) {
        return ᐃᐃΔⵠⲆ.ᐃᐃᐃⵠΔⲆΔ;
      } else {
        return ᐃᐃΔⵠⲆ.ⵠⵠⵠᐃΔΔⵠ;
      }
    };
    this.ᐃΔΔΔᐃ = function (a) {
      this.ᐃᐃΔᐃⵠΔᐃ = mj;
      this.ᐃⲆᐃᐃ = a;
      var b = mf.Δⵠⵠᐃᐃ[a];
      b.ᐃⵠΔᐃⵠ = this.ᐃⵠΔᐃⵠ;
      this.mode = this.ⵠⵠᐃᐃⲆᐃΔ(b);
      this.ⲆⲆΔⲆ.x = b.x;
      this.ⲆⲆΔⲆ.y = b.y;
    };
    this.ᐃΔΔⲆⲆΔⲆ = function () {
      this.ᐃᐃΔᐃⵠΔᐃ = 1;
      this.mode = -1;
      this.ᐃΔⵠⲆⵠ.stop(this.ᐃΔᐃⵠⲆ);
      this.ᐃΔⵠⲆⵠ.stop(this.ⲆⲆⵠᐃΔⲆⵠ);
      this.ᐃΔⵠⲆⵠ.stop(this.ΔⲆΔⵠⲆᐃⲆ);
      this.ᐃΔⵠⲆⵠ.stop(this.ⲆᐃᐃⲆⵠⲆⲆ);
    };
    this.fade = function (a, b) {
      var c = this.ᐃΔⵠⲆⵠ.volume(a) * tf;
      this.ᐃΔⵠⲆⵠ.fade(c, 0, b, a);
    };
    this.ΔⲆⲆΔⲆⵠⵠ = function (a, b) {
      if (this.ᐃⵠᐃᐃΔ && this.ᐃⵠΔᐃⵠ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⵠΔΔⵠⵠ = function (b, c, d, e, f, g, i) {
      this.ΔᐃⲆΔᐃ = g;
      if (e && f === this.mode) {
        var a = tf * this.ᐃΔⵠⲆⵠ.volume(b);
        if (this.ᐃⵠᐃᐃΔ) {
          var j = (Math.random() * d + c) * tf;
          this.ᐃΔⵠⲆⵠ.fade(a, j, i, b);
        } else {
          this.ᐃΔⵠⲆⵠ.fade(a, Hi, i, b);
        }
      } else if (f != this.mode && this.ᐃⵠᐃᐃΔ) {
        this.ᐃΔⵠⲆⵠ.fade(Lr, (c + d) * tf, i, b);
      } else if (this.ᐃⵠᐃᐃΔ) {
        a = tf * this.ᐃΔⵠⲆⵠ.volume(b);
        j = (Math.random() * d + c) * tf;
        this.ᐃΔⵠⲆⵠ.fade(a, j, i, b);
      }
      this.ΔⲆⲆΔⲆⵠⵠ(this.ᐃΔⵠⲆⵠ, b);
      this.ᐃΔⵠⲆⵠ.play(b);
    };
    this.ᐃⲆΔ = function () {
      var a = mf.Δⵠⵠᐃᐃ[this.ᐃⲆᐃᐃ];
      this.ΔᐃⲆΔᐃ -= _w;
      if (this.ΔᐃⲆΔᐃ <= 0) {
        var b = 0;
        if (a.x != this.ⲆⲆΔⲆ.x || a.y != this.ⲆⲆΔⲆ.y) {
          if (!this.ᐃⵠᐃᐃΔ) {
            b = 1;
            this.ᐃⵠᐃᐃΔ = 1;
          }
          this.x = $w.ΔⵠΔΔⲆⵠⵠ(a.x, ᐃᐃΔⵠⲆ.ⲆΔⲆᐃⲆΔΔ);
          this.y = $w.ⵠⵠΔⲆΔΔⲆ(a.y, ᐃᐃΔⵠⲆ.ⲆΔⲆᐃⲆΔΔ);
        } else if (this.ᐃⵠᐃᐃΔ) {
          b = 1;
          this.ᐃⵠᐃᐃΔ = Hi;
        }
        this.ⲆⲆΔⲆ.x = a.x;
        this.ⲆⲆΔⲆ.y = a.y;
        Ⲇᐃⵠᐃ = this.ⵠⵠᐃᐃⲆᐃΔ(a);
        if (this.mode != Ⲇᐃⵠᐃ) {
          if (ᐃᐃΔⵠⲆ.ᐃⲆΔᐃᐃⵠᐃ === this.mode) {
            this.fade(this.ᐃΔᐃⵠⲆ, ᐃᐃΔⵠⲆ.ᐃⲆⵠᐃⲆΔⵠ);
          } else if (this.mode === ᐃᐃΔⵠⲆ.ⲆⲆΔⲆᐃ) {
            this.fade(this.ⲆⲆⵠᐃΔⲆⵠ, ᐃᐃΔⵠⲆ.ⵠΔᐃⲆⵠΔΔ);
          } else if (ᐃᐃΔⵠⲆ.ⵠⵠⵠᐃΔΔⵠ === this.mode) {
            this.fade(this.ΔⲆΔⵠⲆᐃⲆ, ᐃᐃΔⵠⲆ.ΔⵠⵠΔᐃⲆⵠ);
          } else if (ᐃᐃΔⵠⲆ.ᐃᐃᐃⵠΔⲆΔ === this.mode) {
            this.fade(this.ⲆᐃᐃⲆⵠⲆⲆ, ᐃᐃΔⵠⲆ.ᐃᐃⵠᐃΔⲆᐃ);
          }
        }
        if (Ⲇᐃⵠᐃ === ᐃᐃΔⵠⲆ.ᐃⲆΔᐃᐃⵠᐃ) {
          this.ⵠΔΔⵠⵠ(this.ᐃΔᐃⵠⲆ, 0.08, 0.3, b, Ⲇᐃⵠᐃ, ᐃᐃΔⵠⲆ.ΔⲆΔᐃⲆⲆΔⲆⲆ, ᐃᐃΔⵠⲆ.ᐃⲆⵠᐃⲆΔⵠ);
        } else if (Ⲇᐃⵠᐃ === ᐃᐃΔⵠⲆ.ⲆⲆΔⲆᐃ) {
          this.ⵠΔΔⵠⵠ(this.ⲆⲆⵠᐃΔⲆⵠ, 0.2, 0.3, b, Ⲇᐃⵠᐃ, ᐃᐃΔⵠⲆ.ΔⲆΔⵠⲆΔᐃⵠᐃ, ᐃᐃΔⵠⲆ.ⵠΔᐃⲆⵠΔΔ);
        } else if (Ⲇᐃⵠᐃ === ᐃᐃΔⵠⲆ.ⵠⵠⵠᐃΔΔⵠ) {
          this.ⵠΔΔⵠⵠ(this.ΔⲆΔⵠⲆᐃⲆ, 0.3, 0.6, b, Ⲇᐃⵠᐃ, ᐃᐃΔⵠⲆ.ⲆΔⵠⲆⲆΔΔⲆᐃ, ᐃᐃΔⵠⲆ.ΔⵠⵠΔᐃⲆⵠ);
        } else if (ᐃᐃΔⵠⲆ.ᐃᐃᐃⵠΔⲆΔ === Ⲇᐃⵠᐃ) {
          this.ⵠΔΔⵠⵠ(this.ⲆᐃᐃⲆⵠⲆⲆ, 0.1, 0.25, b, Ⲇᐃⵠᐃ, ᐃᐃΔⵠⲆ.ⲆⵠΔΔⵠΔⵠⲆⲆ, ᐃᐃΔⵠⲆ.ᐃᐃⵠᐃΔⲆᐃ);
        }
        this.mode = Ⲇᐃⵠᐃ;
      }
    };
    this.check = function () {
      var a = mf.Δⵠⵠᐃᐃ[this.ᐃⲆᐃᐃ];
      if (a) {
        return Dh;
      } else {
        this.ᐃΔΔⲆⲆΔⲆ(a);
        return false;
      }
    };
  }
  ΔΔⵠΔᐃᐃΔ = 0;
  document.getElementById("version").innerHTML = kw.ᐃⵠⵠΔⵠⲆΔ + ".3";
  var vf;
  var Vw = [];
  var Ww = {
    time: Math.floor(Math.random() * Nb),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = Xr.ᐃᐃΔΔⵠ[Ww.time];
  Ww.items.push(new rw(ow.ΔᐃᐃⲆⲆ, 0, 0, 0, 0, Math.random() * Math.PI * xq, Zh, 1));
  Ww.items.push(new rw(ow.ⵠⵠⵠⲆΔ, Da, tg, 0, 0, Lr, 0, pb));
  Ww.items.push(new rw(ow.ⵠⲆΔⵠᐃ, 0, tt, 0, mj, Math.PI / 4, ps, 0));
  Ww.items.push(new rw(ow.ⵠⵠⵠⲆΔ, 0, Db, 0, zl, zl, 0, 5));
  Ⲇⵠᐃⵠ = new function () {
    var c = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + Ft[ΔΔᐃ.ᐃᐃⲆⲆⲆ] + "]";
      }
    }
    this.ᐃᐃᐃⲆ = null;
    this.ᐃⲆᐃᐃⵠ = tt;
    this.ⲆΔⲆΔⵠ = [];
    this.ⲆΔⵠᐃⲆⲆⵠ = {};
    this.ⲆⲆᐃΔᐃ = [[], [], [], [], [], [], [], [], []];
    this.ᐃΔⲆΔⲆΔᐃ = [-xt, -jh, -jh, -jh, -ie, -rg, -yg, -1, -1];
    this.ᐃᐃΔⲆⵠ = 0;
    this.ⵠᐃᐃⵠΔⲆᐃ = zl;
    this.ⲆⲆⵠⲆᐃΔⲆ = function (a) {
      if (fw !== Jg) {
        c.ⲆΔⲆΔⵠ.push({
          a: fw.name,
          gm: fw.mode,
          idx: Zj,
          m: Ak,
          nu: 0,
          id: Eh
        });
        a();
        return;
      }
      fetch(hw + "/list", {
        method: "GET"
      }).then(function (b) {
        if (b.ok) {
          b.json().then(function (b) {
            c.ⲆΔⲆΔⵠ = [];
            c.ⲆΔⵠᐃⲆⲆⵠ = {};
            for (let a in lw.ΔᐃⲆᐃⵠⵠᐃ) {
              const b = lw.ΔᐃⲆᐃⵠⵠᐃ[a];
              c.ⲆΔⲆΔⵠ.push({
                a: "Auto Select",
                gm: b,
                m: 100,
                nu: Bg,
                auto: fg
              });
            }
            var d = yg;
            var e = Hj;
            var f = ol;
            for (let j = Pg; b.length > j; j++) {
              const i = b[j];
              const a = i.n;
              const k = i.l;
              const h = i.p;
              const m = [];
              for (let b = zl; h.length > b; b++) {
                const c = h[b];
                m.push(a + c[0]);
              }
              for (let b = 0; b < k.length; b++) {
                const g = k[b];
                let h;
                let a = lw.ΔᐃⲆᐃⵠⵠᐃ[g[e]];
                let i = a + g[d];
                h = a in c.ⲆΔⵠᐃⲆⲆⵠ ? ++c.ⲆΔⵠᐃⲆⲆⵠ[a] : c.ⲆΔⵠᐃⲆⲆⵠ[a] = 1;
                if (i in c.ⲆΔⵠᐃⲆⲆⵠ) {
                  ᐃⲆΔⲆⲆᐃⲆ = ++c.ⲆΔⵠᐃⲆⲆⵠ[i];
                } else {
                  ᐃⲆΔⲆⲆᐃⲆ = c.ⲆΔⵠᐃⲆⲆⵠ[i] = 1;
                }
                c.ⲆΔⲆΔⵠ.push({
                  name: g[f],
                  a: lw.ΔΔⲆΔᐃⵠⵠⵠΔ[g[d]] + " " + ᐃⲆΔⲆⲆᐃⲆ,
                  r: g[d],
                  gm: lw.ΔᐃⲆᐃⵠⵠᐃ[g[e]],
                  idx: h,
                  m: 100,
                  nu: g[3],
                  id: g[d] + g[0],
                  p: m
                });
              }
            }
            a();
          });
        } else {
          dj.setTimeout(function () {
            c.ⲆⲆⵠⲆᐃΔⲆ(a);
          }, 3000);
        }
      });
    };
    this.ⲆΔᐃᐃΔⲆⲆⵠⵠ = function (a) {
      var b = [];
      for (var c = Bg; a.length > c; c++) {
        if (a[c].a.indexOf(Ha) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return Hi;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ᐃⲆⵠᐃᐃΔΔ = function (b) {
      var c = Eh;
      for (var d = Da; d < b.length; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (Ⲇⵠᐃⵠ.ᐃΔⲆΔⲆΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ] === -1) {
        Ⲇⵠᐃⵠ.ᐃΔⲆΔⲆΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ] = e.selectedIndex = Ⲇⵠᐃⵠ.ⲆΔᐃᐃΔⲆⲆⵠⵠ(b);
      } else {
        e.selectedIndex = Ⲇⵠᐃⵠ.ᐃΔⲆΔⲆΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + Ft[ΔΔᐃ.ᐃᐃⲆⲆⲆ] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Ft[ΔΔᐃ.ᐃⵠⵠⲆᐃᐃΔ] + " (" + this.ⵠΔᐃⲆⲆⵠⵠ + ") " + Ft[ΔΔᐃ.ⵠᐃΔⲆᐃⲆᐃ] + "</li>";
      for (d = 0; d < b.length; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Ft[ΔΔᐃ.ᐃᐃⵠⵠⵠᐃΔ] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -rg;
        for (var d = Ⲇⵠᐃⵠ.ⲆⲆᐃΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ], e = 0; e < d.length; e++) {
          if (b === a(d[e])) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          Ⲇⵠᐃⵠ.ᐃΔⲆΔⲆΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ⵠΔᐃⲆⲆⵠⵠ = 0;
    this.ᐃⲆᐃⵠⲆⲆⵠΔⲆ = function () {
      this.ⵠΔᐃⲆⲆⵠⵠ = In;
      for (var a = 0; Ⲇⵠᐃⵠ.ⲆΔⲆΔⵠ.length > a; a++) {
        if (this.ⲆΔⲆΔⵠ[a].gm == "experimental") {
          this.ⲆⲆᐃΔᐃ[lw.ⵠΔᐃᐃⲆ].push(this.ⲆΔⲆΔⵠ[a]);
        } else if (this.ⲆΔⲆΔⵠ[a].gm == "zombies") {
          this.ⲆⲆᐃΔᐃ[lw.ΔΔΔΔᐃ].push(this.ⲆΔⲆΔⵠ[a]);
        } else if (this.ⲆΔⲆΔⵠ[a].gm == "community") {
          this.ⲆⲆᐃΔᐃ[lw.ⵠΔⲆᐃⵠ].push(this.ⲆΔⲆΔⵠ[a]);
        } else if (this.ⲆΔⲆΔⵠ[a].gm == "forest") {
          this.ⲆⲆᐃΔᐃ[lw.ⲆⲆⲆⲆᐃ].push(this.ⲆΔⲆΔⵠ[a]);
        } else if (this.ⲆΔⲆΔⵠ[a].gm == "battle-royale") {
          this.ⲆⲆᐃΔᐃ[lw.ᐃⲆⵠⲆΔΔᐃ].push(this.ⲆΔⲆΔⵠ[a]);
        } else if (this.ⲆΔⲆΔⵠ[a].gm == "vampires") {
          this.ⲆⲆᐃΔᐃ[lw.ᐃᐃⲆΔⵠ].push(this.ⲆΔⲆΔⵠ[a]);
        } else {
          this.ⲆⲆᐃΔᐃ[lw.ⵠᐃᐃⲆⲆ].push(this.ⲆΔⲆΔⵠ[a]);
        }
        this.ⵠΔᐃⲆⲆⵠⵠ += this.ⲆΔⲆΔⵠ[a].nu;
      }
      for (a = 0; this.ⲆⲆᐃΔᐃ.length > a; a++) {
        if (this.ⲆⲆᐃΔᐃ[a].length === 0) {
          this.ⲆⲆᐃΔᐃ[a].push({
            a: Ft[ΔΔᐃ.ⲆⲆⵠᐃⵠⵠⵠ],
            ⲆᐃⲆⲆᐃΔⵠⲆᐃ: Zj,
            ⵠΔ: "127.0.0.1",
            ⲆⲆⵠ: 80
          });
        }
      }
      this.ᐃⲆⵠᐃᐃΔΔ(this.ⲆⲆᐃΔᐃ[0]);
      this.ⵠΔΔⲆⵠ = function (a) {
        Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ = a;
        Ⲇⵠᐃⵠ.ᐃⲆⵠᐃᐃΔΔ(Ⲇⵠᐃⵠ.ⲆⲆᐃΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ]);
        Ⲇⵠᐃⵠ.ᐃⲆⵠᐃᐃΔΔ(Ⲇⵠᐃⵠ.ⲆⲆᐃΔᐃ[Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ]);
        document.getElementById("servselect").selectedIndex = Ⲇⵠᐃⵠ.ᐃᐃΔⲆⵠ;
      };
    };
    this.ΔⲆⵠᐃᐃⵠΔ = 0;
    this.Ⲇⵠᐃⵠᐃⵠⵠ = 0;
    this.ΔΔⲆⵠΔ = null;
    this.timeout = function () {
      c.Ⲇⵠᐃⵠᐃⵠⵠ++;
      c.ᐃᐃᐃⲆ.close();
      if (kw.ᐃᐃΔΔΔΔᐃⵠᐃ < c.Ⲇⵠᐃⵠᐃⵠⵠ) {
        Jf = Xn;
        vf.ᐃΔⵠΔᐃΔᐃΔᐃ = kw.ΔⵠⲆⵠⲆⲆΔΔⲆ;
        c.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⵠⵠΔⵠΔⲆᐃ]);
        vf.waiting = false;
        if (Xw.reconnect.enabled) {
          Zw.ᐃⵠⲆΔⲆ(vf.ⲆᐃⵠⲆⵠ);
        }
      } else {
        c.ᐃᐃⵠⲆⲆᐃᐃ();
      }
    };
    this.Δᐃᐃⵠⵠⵠᐃ = function (a) {
      if (this.ᐃⲆᐃᐃⵠ == this.ᐃᐃᐃⲆ.ᐃⲆᐃᐃⵠ) {
        this.ᐃⲆᐃᐃⵠ++;
        this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⵠⵠᐃⲆⲆᐃⲆ] + a);
        Zw.ᐃⵠⲆΔⲆ(vf.ⲆᐃⵠⲆⵠ);
      }
    };
    this.ΔΔⵠⲆΔⵠⵠ = function () {
      this.ⲆⲆⵠⵠⲆ("You speak too much");
    };
    this.ⲆΔΔΔⵠᐃΔᐃΔ = function () {
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⵠᐃΔⲆⲆⲆⲆ]);
      vf.waiting = false;
    };
    this.ⲆⲆⲆΔⵠⲆⵠΔⵠ = function () {
      Xw.ⵠΔⲆⵠΔ.open = false;
    };
    this.ⲆⲆⵠⵠⲆⵠⲆΔⵠ = function () {
      Zw.ⵠΔΔⵠⵠΔᐃ = ps;
    };
    this.ᐃⲆᐃᐃᐃᐃΔΔⵠ = function () {
      Zw.ᐃⲆⲆᐃⲆΔᐃ = 0;
    };
    this.ⲆᐃⵠΔⲆΔⲆⵠᐃ = function (a) {
      Xw.ⵠΔⲆᐃⲆ.ᐃⲆⲆΔⵠ = a;
      if (mf.ΔΔⲆΔⲆ > -300) {
        if (a === Rs) {
          this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ΔΔᐃΔᐃΔⵠ]);
        } else {
          this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⵠᐃⵠⲆᐃⲆⵠ]);
        }
      }
    };
    this.ⵠᐃⵠᐃᐃ = function (a) {
      Xw.ⵠᐃⵠᐃᐃ = a;
    };
    this.ⲆᐃⲆⲆⵠΔⵠΔΔ = function (a) {
      Xw.ⲆΔᐃᐃᐃᐃᐃ = a;
    };
    this.ⲆΔᐃᐃᐃᐃᐃ = function (a) {
      Xw.ⲆⵠᐃⵠΔ.ᐃⲆⲆΔⵠ = a;
      if (mf.ⲆΔΔΔᐃ > -300) {
        if (a === 0) {
          this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ΔᐃⲆΔⵠᐃⵠ]);
        } else {
          this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ᐃⵠΔᐃⲆⵠΔ]);
        }
      }
    };
    this.ᐃⵠΔᐃΔᐃΔⵠᐃ = function (a) {
      if (Db === a) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (Pn === a) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (ea === a) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ΔΔⲆΔⵠΔⵠΔⵠ = function () {
      Zw.ⲆⲆⲆᐃΔⵠᐃ = Kh;
    };
    this.ⵠΔΔⲆΔᐃᐃⵠⲆ = function () {
      Zw.ⵠⵠⵠᐃᐃᐃΔ = 0;
    };
    this.ᐃⲆᐃΔΔΔⵠⲆⵠ = function () {
      Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ = [];
      Xw.ᐃΔᐃⵠ.ⲆΔΔ = [];
      Xw.ᐃΔᐃⵠ.id = -1;
      Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.stop();
      Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ = [];
      Xw.ΔᐃⲆⵠ.ΔⲆⵠΔᐃ = false;
      Xw.ΔᐃⲆⵠ.ΔⲆⵠⵠᐃΔⵠⲆⲆ = wt;
      Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
      Xw.ΔᐃⲆⵠ.id = -fl;
      Xw.ΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ = false;
      Xw.ΔᐃⲆⵠ.ᐃⵠⵠΔⲆ = Ta;
      Xw.ΔᐃⲆⵠ.ᐃⲆΔΔᐃ = false;
      Xw.ΔᐃⲆⵠ.ⵠΔⵠΔΔⲆᐃ = kg;
      Xw.ΔᐃⲆⵠ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(Rh, mj, qu, Lr, 1, yg);
    };
    this.ⵠⲆᐃⵠⵠⵠΔᐃⲆ = function () {
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ();
      vf.waiting = false;
    };
    this.ⵠⲆᐃⵠᐃᐃᐃ = function (a) {
      for (var b = ps; b < a.length; b++) {
        if (typeof a[b] === "string") {
          a[b] = ᐃⵠΔⲆ.ⲆⲆΔⲆᐃⵠⲆ(a[b]);
        }
      }
      Xw.ⲆΔⵠⲆⵠ.ᐃᐃᐃⲆⲆ(a[1], a[jk], a[ci], a[4]);
    };
    this.message = function (a) {
      this.ⲆⲆⵠⵠⲆ(a);
    };
    this.ⲆⲆᐃᐃⵠⵠⲆⲆⲆ = function () {
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ᐃⲆΔΔΔⵠⵠ]);
      vf.waiting = false;
    };
    this.ⵠΔⲆⵠⵠΔⵠⲆⵠ = function () {
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ᐃⵠᐃⵠⲆⵠⲆ]);
      vf.waiting = Rh;
    };
    this.ᐃⵠⲆⲆⲆⵠᐃΔΔ = function () {
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⵠᐃᐃⲆᐃᐃᐃ]);
      vf.waiting = Bh;
    };
    this.ᐃⵠΔᐃⲆⵠⵠᐃⲆ = function () {
      Xw.ᐃΔᐃⵠ.ΔΔᐃⵠⲆⵠⵠ(1, 0);
      Zw.ΔᐃⲆᐃΔᐃⵠ();
    };
    this.ⲆⲆⵠⵠⵠᐃΔⲆⵠ = function (a) {
      var b = a[Ug];
      var c = mf.ⵠΔΔⲆ[b];
      c.ΔⵠΔᐃ = a[Mt];
      c.ΔⵠΔᐃᐃ = a[3];
      c.ⲆⵠᐃΔⲆⲆⲆ = a[Pe];
      c.ᐃΔⲆⵠⲆ = a[ll];
      c.ⲆⲆⲆⵠΔ = a[6];
      c.ᐃᐃⵠΔΔ = a[wk];
      c.level = a[8];
      var d = mf.Δⵠⵠᐃᐃ[b * mf.ΔᐃⵠᐃⲆΔΔ];
      if (d) {
        d.ΔⵠΔᐃ = a[Pn];
        d.ΔⵠΔᐃᐃ = a[3];
        d.ⲆⵠᐃΔⲆⲆⲆ = a[4];
        d.ᐃΔⲆⵠⲆ = a[z];
      }
    };
    this.ΔⵠⵠᐃⵠΔⲆᐃΔ = function (a) {
      if (_r.ⵠⲆᐃᐃ === a) {
        Xw.ᐃΔᐃⵠ.ΔΔᐃⵠⲆⵠⵠ(1, Hi);
        Zw.ΔᐃⲆᐃΔᐃⵠ();
      } else {
        this.ΔΔᐃᐃⵠⵠΔ([wj, a, 1]);
      }
      Xw.ΔᐃⲆⵠ.ⵠΔⵠᐃⵠᐃᐃ();
    };
    this.ⲆᐃⵠⵠⲆⲆΔⵠⵠ = function (a) {
      Xw.ᐃΔᐃᐃⲆ.ΔᐃⲆΔᐃ = 0;
      Xw.ΔᐃⲆⵠ.ΔⲆⵠⵠᐃⵠⵠⲆΔ(a);
    };
    this.ΔⲆᐃⲆΔⵠⲆⵠᐃ = function (a) {
      for (var b = Xs[a].r, c = ps; c < b.length; c++) {
        if (Xw.ᐃΔᐃⵠ.max > Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length || Eh < Xw.ᐃΔᐃⵠ.ⲆΔΔ[b[c][0]]) {
          var d = Math.floor(b[c][ie] * 0.8);
          if (!d) {
            continue;
          }
          this.ΔΔᐃᐃⵠⵠΔ([Pg, b[c][0], d]);
        }
      }
      Xw.ΔᐃⲆⵠ.ⵠΔⵠᐃⵠᐃᐃ();
    };
    this.ⵠᐃⵠΔΔⵠⲆᐃᐃ = function (a) {
      Xw.ᐃΔᐃᐃⲆ.ΔᐃⲆΔᐃ = Bg;
      Xw.ΔᐃⲆⵠ.ΔΔⲆΔⲆⵠᐃⲆⵠ(a);
    };
    this.ⲆⲆⵠⵠⲆ = function (a) {
      if (Xw.alert.text) {
        if (a !== Xw.alert.text && Xw.alert.list[Xw.alert.list.length - hd] !== a) {
          Xw.alert.list.push(a);
        }
      } else {
        Xw.alert.text = a;
      }
    };
    this.ᐃΔⵠᐃΔⵠᐃⵠᐃ = function () {
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ΔⲆᐃΔΔΔⵠ]);
    };
    this.ᐃⲆⵠΔⲆᐃⵠⲆΔ = function () {
      var a;
      a = Xw.ⵠΔⲆ == 0 ? Ft[ΔΔᐃ.ⲆΔⲆᐃᐃⵠᐃ] : Ft[ΔΔᐃ.ⵠΔᐃΔᐃⵠΔ] + (Xw.ⵠΔⲆ + 1) + Ft[ΔΔᐃ.ᐃⵠⲆⲆᐃΔⵠ];
      this.ⲆⲆⵠⵠⲆ(a);
      Xw.ⵠΔⲆ++;
    };
    this.ⵠⵠᐃⲆⵠΔΔⲆΔ = function () {
      clearTimeout(c.ΔΔⲆⵠΔ);
      Xw.reconnect.enabled = C;
      Xw.ⲆᐃΔⵠⲆ = ot;
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⲆᐃΔⲆᐃᐃᐃ]);
      Zw.ᐃⵠⲆΔⲆ(vf.ⲆᐃⵠⲆⵠ);
      this.ᐃᐃᐃⲆ.close();
    };
    this.ᐃΔⲆΔⲆⵠⲆᐃⵠ = function () {
      Jf = 1;
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⲆΔΔⵠᐃⲆΔ]);
      vf.waiting = C;
    };
    this.ⵠΔᐃⲆᐃⲆᐃⲆᐃ = function () {
      Jf = cu;
      clearTimeout(this.ΔΔⲆⵠΔ);
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⵠⵠⲆᐃᐃΔΔ]);
      vf.waiting = false;
    };
    this.ᐃⲆΔⲆⵠⲆⲆⲆᐃ = function (a) {
      var b = a[Xn];
      var c = mf.ⵠΔΔⲆ;
      c[b].ⲆⲆΔⵠᐃ = a[dg];
      c[b].ΔⵠΔᐃ = a[hl];
      c[b].ΔⵠΔᐃᐃ = a[Al];
      c[b].ⲆⵠᐃΔⲆⲆⲆ = a[Fk];
      c[b].ᐃΔⲆⵠⲆ = a[Qa];
      c[b].ⲆⲆⲆⵠΔ = a[7];
      c[b].ᐃᐃⵠΔΔ = a[8];
      c[b].level = a[Os];
      c[b].ⲆΔΔᐃⲆ = Hi;
      c[b].ⲆΔⵠⵠⵠⵠᐃ = null;
      c[b].label = null;
      c[b].ᐃΔⲆⵠⲆΔⵠ = null;
      c[b].ⲆᐃΔⵠⲆ = true;
      if (dw === 1) {
        c[b].ⲆⲆΔⵠᐃ += "|" + b;
      }
    };
    this.ⵠⵠΔΔΔᐃΔΔᐃ = function () {
      this.ᐃᐃᐃⲆ[cw](sq[tq].stringify([32]));
    };
    this.ΔᐃⵠⵠΔΔΔΔᐃ = function () {
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.EMPTY]);
    };
    this.ⵠΔⵠΔⲆᐃⵠ = function () {
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⵠⲆᐃⲆⵠᐃⵠ]);
    };
    this.ⵠΔΔᐃⲆᐃⵠΔΔ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Xo[Tq].stringify([wl, a]));
      Xw.ⵠΔⲆⵠΔ.open = uh;
    };
    this.ⵠΔⵠᐃᐃⵠΔᐃᐃ = function (a) {
      for (var b = jw[a - 1].items, c = 0; b.length > c && Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length < Xw.ᐃΔᐃⵠ.max; c++) {
        var d = b[c][za];
        var e = b[c][tg];
        if (b[c][1] === _r.ⵠⲆᐃᐃ) {
          Xw.ᐃΔᐃⵠ.ΔΔᐃⵠⲆⵠⵠ(xt, mj);
        } else {
          this.ΔΔᐃᐃⵠⵠΔ([0, d, e]);
        }
      }
    };
    this.ΔΔᐃᐃⵠⵠΔ = function (b) {
      for (var c = b.length, d = Xw.ᐃΔᐃⵠ, e = 1; e < c; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; h < d.ⲆᐃⲆⲆΔ.length; h++) {
          if (f == d.ⲆᐃⲆⲆΔ[h].id) {
            d.ⲆΔΔ[f] += g;
            break;
          }
        }
        if (d.ⲆᐃⲆⲆΔ.length == h) {
          d.ⲆΔΔ[f] = g;
          d.ⲆᐃⲆⲆΔ.push(Zw.ᐃᐃᐃ[f]);
          Zw.ΔᐃⲆᐃΔᐃⵠ();
        }
      }
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ⲆΔᐃΔ = function (b, c, d, e, f, g, h) {
      Xw.ⲆΔᐃΔ.ⵠᐃΔΔ = b / ar;
      Xw.ⲆΔᐃΔ.ΔⵠⲆ = c / Yq;
      Xw.ⲆΔᐃΔ.c = d / sa;
      Xw.ⲆΔᐃΔ.ⵠⵠⵠ = e / Yh;
      Xw.ⲆΔᐃΔ.ⵠᐃⵠ = f / Yh;
      Xw.ⲆΔᐃΔ.ΔⵠⲆΔᐃⲆΔ = g / Yq;
      Xw.ⵠᐃⵠᐃᐃ = h;
    };
    this.ΔⵠⲆᐃΔΔᐃⲆᐃ = function (a) {
      Zw.Δⵠᐃᐃ.modify(a, 2);
    };
    this.ⵠⵠⲆᐃᐃⵠΔⲆΔ = function (a) {
      Zw.Δⵠᐃᐃ.modify(a, Kh);
    };
    this.claimed = function (a) {
      Zw.Δⵠᐃᐃ.modify(a, 3);
    };
    this.ᐃⲆⵠᐃⲆᐃⵠΔΔ = function (a, b) {
      Xw.ⲆΔᐃΔ.ⵠᐃΔΔ = a / ar;
      Xw.ⵠᐃⵠᐃᐃ = b;
    };
    this.ⵠΔΔΔΔᐃᐃⵠᐃ = function (a) {
      Xw.ⲆΔᐃΔ.ⵠⵠⵠ = a / 100;
    };
    this.ⵠᐃΔⵠⵠⲆΔⵠⵠ = function (a) {
      Xw.ⲆΔᐃΔ.ΔⵠⲆ = a / 100;
    };
    this.ᐃᐃᐃᐃⲆⲆⲆΔⲆ = function (a) {
      Xw.ⲆΔᐃΔ.ΔⵠⲆΔᐃⲆΔ = a / Cn;
    };
    this.ⵠⲆⲆᐃⲆⲆⵠᐃⵠ = function (a) {
      Xw.ⲆΔᐃΔ.c = a / 100;
    };
    this.ΔᐃⵠⵠᐃᐃΔΔΔ = function (a) {
      mf.time = a;
      mf.transition = true;
      $w.transition = hs;
    };
    this.ΔᐃᐃⵠᐃΔΔΔⵠ = function () {
      document.getElementById("game_body").style.backgroundColor = Xr.ᐃᐃΔΔⵠ[mf.time];
    };
    this.ᐃⲆᐃⵠⲆᐃⲆΔΔ = function (a) {
      if (lw.ⲆⵠⲆⵠⲆⲆⵠ == mf.mode && mf.ⵠΔΔⲆ[a].ⲆⲆΔⵠᐃ !== "spectator") {
        this.ⲆⲆⵠⵠⲆ(mf.ⵠΔΔⲆ[a].ⲆⲆΔⵠᐃ + Ft[ΔΔᐃ.ⲆᐃᐃⲆᐃᐃⲆ]);
      }
      mf.ⵠΔΔⲆ[a].ⲆᐃΔⵠⲆ = sl;
    };
    this.ⲆⲆᐃᐃⵠⵠΔΔΔ = function (a) {
      var b = new Uint16Array(a);
      ⲆᐃΔⲆ.ⵠᐃⲆ.ⲆⲆΔᐃⵠ(b[fl], b[2]);
    };
    this.ⵠΔᐃᐃΔⲆⲆΔⵠ = function (a) {
      var b = new Uint16Array(a);
      Xw.ⵠᐃⲆ.ⲆⲆΔᐃⵠ(b[1], b[2]);
    };
    this.ⲆⲆⲆΔⵠᐃΔΔΔ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - Zh) / 4, f = Lr; f < e; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = Math.PI * ((b[5 + Dt * f] >> 1) / 127) * 2;
        var k = mf.Δⵠⵠᐃᐃ[i * mf.ΔᐃⵠᐃⲆΔΔ + g];
        if (k && k.ᐃⲆⲆ) {
          if ($w.loaded && $w.ⲆᐃⵠⲆⵠ) {
            $w.ᐃⲆⲆ(b[Uh + f * 4] & Ol, ΔⲆᐃⲆⵠ[k.type], k.x, k.y);
          }
          k.ᐃⲆⲆ.angle = j;
          k.ᐃⲆⲆ.ᐃⲆΔ = j;
        }
      }
    };
    this.ⲆΔⵠⲆΔⲆⵠΔΔ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / Mq, e = 0; e < d; e++) {
        var f;
        var i = e * Ps;
        var j = c[1 + i];
        var k = c[2 + i];
        var m = Math.PI * ((c[3 + i] >> js) / 127) * 2;
        var p = c[ba + i];
        var q = Vw.ᐃᐃⲆⲆ[k][j];
        switch (p) {
          case 0:
            (f = q.p[zl][gu]).angle = m;
            f.ᐃⲆΔ = Kl;
            break;
          case Te:
            (f = q.s[0][Hi]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case Zg:
            (f = q.s[ie][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 3:
            (f = q.s[Gl][0]).angle = m;
            f.ᐃⲆΔ = Sh;
            break;
          case Og:
            (f = q.t[wj][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 5:
            (f = q.t[1][Zj]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 6:
            (f = q.t[2][0]).angle = m;
            f.ᐃⲆΔ = ml;
            break;
          case cq:
            (f = q.t[3][Eh]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 8:
            (f = q.t[4][0]).angle = m;
            f.ᐃⲆΔ = fg;
            break;
          case 9:
            (f = q.t[5][0]).angle = m;
            f.ᐃⲆΔ = ye;
            break;
          case Wb:
            (f = q.g[0][Eh]).angle = m;
            f.ᐃⲆΔ = oa;
            break;
          case 11:
            (f = q.g[qu][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 12:
            (f = q.g[2][Db]).angle = m;
            f.ᐃⲆΔ = un;
            break;
          case Cq:
            (f = q.d[0][tt]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 14:
            (f = q.d[Ug][Hi]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 15:
            (f = q.d[2][0]).angle = m;
            f.ᐃⲆΔ = fg;
            break;
          case Vg:
            (f = q.b[0][0]).angle = m;
            f.ᐃⲆΔ = na;
            break;
          case 17:
            (f = q.b[Oq][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case Sa:
            (f = q.b[2][0]).angle = m;
            f.ᐃⲆΔ = y;
            break;
          case 19:
            (f = q.b[3][wj]).angle = m;
            f.ᐃⲆΔ = Fg;
            break;
          case wq:
            (f = q.f[Kh][Rq]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 21:
            (f = q.f[1][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 22:
            (f = q.f[ss][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 23:
            (f = q.sw[0][Db]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 24:
            (f = q.sw[js][0]).angle = m;
            f.ᐃⲆΔ = na;
            break;
          case 25:
            (f = q.sw[lr][Db]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 26:
            (f = q.gw[Rq][0]).angle = m;
            f.ᐃⲆΔ = ph;
            break;
          case 27:
            (f = q.gw[rg][0]).angle = m;
            f.ᐃⲆΔ = xk;
            break;
          case 28:
            (f = q.gw[2][ps]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 29:
            (f = q.dw[ps][Eh]).angle = m;
            f.ᐃⲆΔ = na;
            break;
          case 30:
            (f = q.dw[Oq][0]).angle = m;
            f.ᐃⲆΔ = y;
            break;
          case 31:
            (f = q.dw[2][tt]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 32:
            (f = q.a[wj][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 33:
            (f = q.a[Ot][0]).angle = m;
            f.ᐃⲆΔ = xh;
            break;
          case 34:
            (f = q.a[Zg][0]).angle = m;
            f.ᐃⲆΔ = ye;
            break;
          case 35:
            (f = q.cs[0][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 36:
            (f = q.cs[1][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 37:
            (f = q.cs[2][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 38:
            (f = q.cs[Ks][gu]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 40:
            (f = q.plm[zl][0]).angle = m;
            f.ᐃⲆΔ = Gq;
            break;
          case 41:
            (f = q.plm[hs][tt]).angle = m;
            f.ᐃⲆΔ = Kl;
            break;
          case 42:
            (f = q.plm[2][wj]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 50:
            (f = q.re[mj][0]).angle = m;
            f.ᐃⲆΔ = Gq;
            break;
          case 51:
            (f = q.re[lb][0]).angle = m;
            f.ᐃⲆΔ = Kj;
            break;
          case 52:
            (f = q.re[H][Bg]).angle = m;
            f.ᐃⲆΔ = ye;
            break;
          case 55:
            (f = q.c[0][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 56:
            (f = q.m[0][0]).angle = m;
            f.ᐃⲆΔ = ml;
            break;
          case 57:
            (f = q.m[cu][0]).angle = m;
            f.ᐃⲆΔ = true;
            break;
          case 58:
            (f = q.m[Hj][Pg]).angle = m;
            f.ᐃⲆΔ = true;
        }
        if ($w.loaded && $w.ⲆᐃⵠⲆⵠ && f) {
          $w.ᐃⲆⲆ(c[Hk + i] & Oq, ⵠΔⵠⵠ[p], f.x, f.y);
        }
      }
    };
    this.ⲆᐃⵠᐃⲆ = function () {
      this.ᐃᐃᐃⲆ[cw](jo[Io].stringify([36, Xw.ⲆᐃⵠᐃⲆ.Ⲇⵠⵠᐃ, Xw.ⲆᐃⵠᐃⲆ.ⵠΔᐃⲆⲆ]));
    };
    this.ⲆΔⵠⲆⵠᐃΔΔⲆ = function (a, b) {
      this.ᐃᐃᐃⲆ[cw](jo[zq].stringify([30, b, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ΔᐃⲆᐃⵠⲆⲆ = function (a, b, c) {
      if (b) {
        this.ᐃᐃᐃⲆ[cw](jo[zq].stringify([29, b, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
      } else {
        this.ᐃᐃᐃⲆ[cw](jo[Wo].stringify([31, c, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
      }
    };
    this.ⲆⵠⵠᐃⵠΔⲆΔⲆ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Lq[Nq].stringify([28, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ⲆᐃΔΔΔᐃⵠⵠᐃ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Lq[Zq].stringify([Ol, a]));
    };
    this.ⵠⲆⲆΔⲆⲆⲆΔΔ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Fq[Io].stringify([13, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ᐃⵠΔᐃΔᐃᐃⵠⲆ = function (a, b) {
      this.ᐃᐃᐃⲆ[cw](Xo[Nq].stringify([37, b, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ, a.type]));
    };
    this.ᐃᐃⲆᐃⵠⵠΔⵠΔ = function (a, b) {
      this.ᐃᐃᐃⲆ[cw](Xo[Nq].stringify([Nl, b, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ᐃΔΔⲆⲆΔⲆᐃᐃ = function (a, b, c) {
      this.ᐃᐃᐃⲆ[cw](Fq[zq].stringify([34, b, c, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ΔⲆⵠΔΔΔⵠ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Lq[Nq].stringify([3, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ, a.type]));
    };
    this.ΔᐃᐃΔᐃⲆⲆᐃⲆ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Lq[Nq].stringify([15, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ⲆⲆΔⲆΔⵠΔΔⵠ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Lq[Nq].stringify([24, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ⲆⵠᐃⲆΔⵠⲆⵠⲆ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Uq[Qq].stringify([us, a.Ⲇⵠⵠᐃ, a.ⵠΔᐃⲆⲆ]));
    };
    this.ⵠⲆⲆⲆⲆᐃⵠΔⲆ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Xq[Tq].stringify([Zj, a.ⵠΔᐃⲆⲆ]));
    };
    this.ⵠⲆᐃᐃⲆΔᐃ = function (a) {
      c.ᐃᐃᐃⲆ[cw](_q[Zq].stringify([33, Xw.ΔⵠⲆᐃᐃ.id, Xw.ᐃΔⲆⲆⵠ[a]]));
    };
    this.ⲆᐃΔⵠΔⵠⲆⵠΔ = function () {
      c.ᐃᐃᐃⲆ[cw](kr[fr].stringify([35, Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ, Xw.ΔⵠⲆᐃᐃ.id]));
    };
    this.ΔⵠⵠΔΔⵠΔ = function () {
      c.ᐃᐃᐃⲆ[cw](jr[mr].stringify([23]));
    };
    this.ⵠᐃᐃΔⲆⵠⵠⲆΔ = function () {
      c.ᐃᐃᐃⲆ[cw](jr[Zq].stringify([21, Xw.ΔⵠⲆᐃᐃ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        Xw.ΔⵠⲆᐃᐃ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        Xw.ΔⵠⲆᐃᐃ.lock = Kh;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ⲆΔⲆ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        mf.ᐃⲆΔΔᐃⲆΔⲆⲆ();
      }
      for (var n = (e.length - Pn) / hr, o = Hi; n > o; o++) {
        var q = 2 + o * 18;
        var t = 1 + pn * o;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + Fk];
        var z = w * mf.ΔᐃⵠᐃⲆΔΔ + y;
        if (x & iw.ⲆΔⲆⵠⵠⵠⲆΔⵠ) {
          mf.ⵠᐃᐃⲆⵠⲆⵠⵠⲆ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + qq];
          var F = k[t + N];
          var G = k[t + 8];
          var H = Yl * (e[q + 1] / Li * Math.PI);
          if (mf.Δⵠⵠᐃᐃ[z]) {
            var I = mf.Δⵠⵠᐃᐃ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && ᐃⵠΔⲆ.ΔΔⵠΔ(I, I.r) > kw.ΔⵠⵠⵠᐃΔⵠⵠΔ) {
              I.x = B;
              I.y = D;
            }
            if (I.id !== Xw.id || w === 0) {
              I.ᐃⲆΔⵠⵠΔⵠ = H;
            }
            I.action |= x;
            I.info = E;
            I.ᐃⵠⵠⵠⲆ = F;
            I.ⵠᐃᐃⵠⵠ = G;
            if (I.ᐃⲆΔ) {
              I.ᐃⲆΔ(x);
            }
          } else {
            var J = new rw(A, w, y, B, D, H, x, E, F, G);
            mf.Δⵠⵠᐃᐃ[z] = J;
            mf.ⲆΔⲆ[A].push(J);
          }
        }
      }
    };
    this.ⵠⵠⵠⵠ = function (a) {
      this.ΔⲆⵠᐃᐃⵠΔ = wf;
      var b = new Uint16Array(a);
      Xw.ΔⲆⵠᐃⲆ.ᐃΔΔΔᐃ(b);
    };
    this.ⲆΔⲆΔⵠⵠᐃⵠⲆ = function (a) {
      if (Ws !== undefined) {
        Xs = Ws;
      }
      if (a.length > 0) {
        Ws = JSON.parse(JSON.stringify(Xs));
        for (var b = Db; a.length > b; b++) {
          var c = a[b];
          var d = Xs[c.item];
          if (Sl !== d) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ⵠᐃⵠ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ⵠⲆⲆⵠΔᐃᐃ = function (a) {
      if (a && a.length !== Rq) {
        Xw.ⵠⲆⲆⵠΔᐃᐃ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ⵠᐃ = [];
          var f = Wh;
          var g = b.length * (f + Og) + jn;
          var h = Zj;
          d.font = f + "px Baloo Paaji";
          for (var i = 0; i < b.length; i++) {
            if (b[i].charAt(0) === "#") {
              ⵠᐃ[i] = b[i].substring(gu, Ys);
              b[i] = b[i].substring(8);
            } else {
              ⵠᐃ[i] = "#FFFFFF";
            }
            h = Math.max(d.measureText(b[i]).width + Kb, h);
          }
          c.height = g;
          c.width = h;
          i = 0;
          for (; b.length > i; i++) {
            var j = od(fl, b[i], f, ⵠᐃ[i], null, null, null, null, null, "#000", 6);
            d.drawImage(j, As, (f + 4) * i + 5);
          }
          return c;
        }(a);
      } else {
        Xw.ⵠⲆⲆⵠΔᐃᐃ.message = lj;
      }
    };
    this.Ⲇᐃᐃᐃⵠ = function (a) {
      var b = mf.Δⵠⵠᐃᐃ[a[1] * mf.ΔᐃⵠᐃⲆΔΔ];
      if (b) {
        if (mf.mode === lw.ΔΔΔΔᐃ && lw.ΔⵠⲆΔⵠᐃⲆ === b.ΔⵠΔᐃ) {
          if (Xw.ⲆᐃⲆⵠᐃ) {
            if (Math.random() > 0.5) {
              b.text.push(a[Pn] + " ..." + ᐃⲆⵠⵠΔ);
            } else {
              b.text.push(ᐃⲆⵠⵠΔ + "... " + a[2]);
            }
          } else {
            b.text.push(ΔᐃᐃᐃⲆⵠΔ[Math.floor(Math.random() * ΔᐃᐃᐃⲆⵠΔ.length)]);
          }
        } else {
          b.text.push(a[Gl]);
        }
      }
    };
    this.ⲆᐃΔᐃᐃⵠᐃᐃᐃ = function (a) {
      if (Xw.ᐃΔᐃⵠ.max !== Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ.length || Xs[a].Δⵠⵠⵠ === _r.ⵠⲆᐃᐃ || Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(Xs[a].Δⵠⵠⵠ) != -1 || Xw.ᐃΔᐃⵠ.ᐃᐃⲆΔᐃⲆᐃΔⵠ(Xs[a].r)) {
        this.ᐃᐃᐃⲆ[cw](sq[tq].stringify([tb, a]));
        return 1;
      } else {
        this.ⵠΔⵠΔⲆᐃⵠ();
        return 0;
      }
    };
    this.ᐃᐃᐃⲆᐃ = function (a) {
      Xw.ΔᐃⲆⵠ.ΔⲆⲆⲆᐃⲆⵠⲆⵠ(a);
    };
    this.ᐃⵠⵠΔⲆ = function (a) {
      Xw.ΔᐃⲆⵠ.ᐃⵠⵠΔⲆ = a;
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ᐃⲆΔΔᐃ = function (a) {
      Xw.ΔᐃⲆⵠ.ᐃⲆΔΔᐃ = a;
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ⵠΔⵠΔΔⲆᐃ = function (a) {
      Xw.ΔᐃⲆⵠ.ⵠΔⵠΔΔⲆᐃ = a;
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ΔᐃⵠᐃⲆⵠΔⲆΔ = function (a) {
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⲆᐃⲆⵠⲆᐃⲆ]);
    };
    this.ΔᐃᐃΔⵠᐃᐃⵠⵠ = function () {
      Xw.ΔᐃⲆⵠ.ⵠΔⵠᐃⵠᐃᐃ();
    };
    this.ΔΔΔⲆⵠ = function (a) {
      Zw.ΔΔΔⲆⵠ.ⵠΔΔⲆ = [];
      var b = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      var c = wj;
      for (var d = 1; d < a.length; d += Hj) {
        var e = {
          x: Math.floor(a[d] * mf.w / 250),
          y: Math.floor(a[d + 1] * mf.ΔⵠⲆ / 250)
        };
        if (b && !c && !Xw.ᐃⲆⲆΔΔᐃᐃ && ᐃⵠΔⲆ.ΔΔⵠΔ(e, b) < 250) {
          c += 1;
        } else {
          Zw.ΔΔΔⲆⵠ.ⵠΔΔⲆ.push(e);
        }
      }
    };
    this.ΔⵠⵠΔᐃᐃⵠⲆⲆ = function () {
      Xw.ⲆᐃⵠᐃⲆ.open = false;
      Xw.ᐃⲆᐃⲆⵠ.enabled = Ta;
      Xw.ᐃⲆᐃⲆⵠ.ΔᐃⲆΔᐃ = -1;
      Xw.ᐃⲆᐃⲆⵠ.label = null;
      Xw.ᐃⲆᐃⲆⵠ.ⵠⵠᐃΔⵠΔⵠ = null;
      Xw.ᐃⲆᐃⲆⵠ.now = -1;
    };
    this.ᐃⲆᐃⲆⵠ = function (a) {
      lw.ᐃⲆᐃⲆᐃᐃⵠ = a;
      Xw.ᐃⲆᐃⲆⵠ.enabled = ml;
      Xw.ᐃⲆᐃⲆⵠ.ΔᐃⲆΔᐃ = new Date().getTime();
      Xw.ᐃⲆᐃⲆⵠ.label = null;
      Xw.ᐃⲆᐃⲆⵠ.now = -1;
      for (var b = [_r.ⵠⵠᐃᐃⲆ, _r.ⵠⵠⲆⵠⲆ, _r.ΔⵠᐃΔᐃ, _r.ᐃᐃⲆΔⲆ, _r.ⵠΔΔΔΔ, _r.ᐃΔⲆᐃΔ, _r.ΔⲆᐃⵠΔ, _r.ⵠⵠΔΔⵠ, _r.ⵠᐃᐃΔⵠ, _r.ⲆⲆᐃᐃⲆ, _r.ⵠΔᐃᐃⵠ, _r.ⵠΔᐃⵠᐃ, _r.ᐃᐃΔⲆⲆ, _r.ⵠᐃᐃⵠΔ, _r.ᐃᐃᐃᐃⲆ, _r.ᐃΔⵠⲆᐃ, _r.ᐃΔⲆⵠΔ, _r.ⲆⲆΔᐃᐃ, _r.ΔⲆᐃΔⵠ, _r.Ⲇᐃᐃᐃᐃ, _r.ΔᐃⲆᐃᐃ, _r.ᐃⲆΔⲆⵠ, _r.ⲆᐃᐃⲆᐃ, _r.ⲆⲆⲆⵠⵠ, _r.ΔΔⲆᐃᐃ, _r.ⲆⲆⲆᐃΔ, _r.ΔΔΔⲆΔ, _r.ⲆΔᐃΔⵠ, _r.ᐃᐃⲆᐃᐃ, _r.Δᐃᐃⵠⵠ, _r.ⵠΔΔᐃᐃ, _r.ΔᐃⵠⵠΔ, _r.ⵠΔⲆΔⲆ, _r.ⲆΔⵠΔΔ, _r.ᐃΔᐃΔⲆ, _r.ᐃᐃΔᐃⲆ, _r.ΔⲆΔΔΔ, _r.ᐃΔⵠᐃⵠ, _r.Δⵠᐃᐃᐃ, _r.ᐃΔⵠⵠᐃ, _r.ⵠⵠᐃᐃΔ, _r.ⲆΔⲆⲆⵠ, _r.ⲆⵠⵠⲆⲆ, _r.ⵠᐃⲆΔΔ, _r.ᐃⲆⵠΔⲆ, _r.ΔⲆⲆⵠⲆ, _r.ⲆⵠΔⵠΔ, _r.ᐃⵠᐃΔⵠ, _r.ⲆⵠⲆᐃΔ, _r.ᐃΔΔᐃΔ], c = Da; c < b.length; c++) {
        var d = Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(b[c]);
        if (d != -1) {
          Xw.ᐃΔᐃⵠ.ⲆΔⲆⵠᐃᐃᐃ(b.length[c], d);
        }
      }
      Xw.ΔᐃⲆⵠ.ⵠΔⵠᐃⵠᐃᐃ();
    };
    this.ⵠⵠⲆᐃⵠᐃⵠⲆΔ = function (a, b, c) {
      this.ⵠⵠⲆⵠⵠᐃΔ(a, b * 256 + c);
    };
    this.ⵠⵠⲆⵠⵠᐃΔ = function (a, b) {
      Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
      Xw.ᐃΔᐃⵠ.ⲆΔΔⵠᐃⵠᐃ(a, b, Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(a));
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ⵠⲆΔⵠᐃΔⵠⵠᐃ = function (a) {
      Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -mk;
      Xw.ᐃΔᐃⲆⵠ.wait = true;
      var b = Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(a);
      Xw.ᐃΔᐃⵠ.ⲆΔΔⵠᐃⵠᐃ(a, 1, b);
      if (b >= 0 && !Xw.ᐃΔᐃⵠ.ⲆΔΔ[a]) {
        Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
      }
      if (_r.ⲆⵠᐃᐃΔ == a) {
        Xw.ᐃΔⲆⲆⵠ = [Xw.id];
      }
    };
    this.ⲆⲆΔⲆⲆᐃⵠⲆᐃ = function () {
      this.ᐃᐃᐃⲆ[cw](jo[Io].stringify([Hj]));
    };
    this.ⲆΔᐃΔΔΔⵠΔΔ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Xo[Wo].stringify([22, a.ΔᐃⲆⲆⲆ, a.id]));
    };
    this.ΔⵠᐃΔΔΔⵠⵠⵠ = function (a, b) {
      this.ᐃᐃᐃⲆ[cw](Xo[Nq].stringify([8, a, b]));
    };
    this.ΔᐃⲆⵠⲆⵠᐃⵠΔ = function () {
      var a = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      if (a) {
        var b = Math.PI * 2;
        this.ᐃᐃᐃⲆ[cw](Xo[Wo].stringify([9, Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ, Math.floor(k * ((a.angle + b) % b) / b), Xw.ΔᐃⲆⵠ.mode]));
      }
    };
    this.ΔᐃΔᐃΔ = function (a, b) {
      switch (a) {
        case _r.ᐃΔᐃⲆᐃ:
        case _r.ⵠᐃⲆⲆⲆ:
        case _r.ⵠⵠᐃᐃⵠ:
        case _r.ΔΔⵠⵠⲆ:
        case _r.ⲆⲆΔⵠⵠ:
        case _r.ΔᐃᐃⵠΔ:
        case _r.ⲆᐃᐃⵠΔ:
        case _r.ⵠᐃⲆⲆᐃ:
        case _r.ᐃΔΔΔⲆ:
        case _r.ⲆⵠΔⲆΔ:
        case _r.ⵠᐃⵠΔⵠ:
        case _r.ⲆᐃΔΔⵠ:
        case _r.ⵠⵠⵠΔⲆ:
        case _r.ⲆᐃΔⵠᐃ:
        case _r.ⲆᐃⵠΔⲆ:
        case _r.ⵠΔᐃⵠⲆ:
        case _r.ⲆᐃΔᐃΔ:
        case _r.ΔΔᐃⵠⲆ:
        case _r.ⵠⲆΔⲆᐃ:
        case _r.ⲆⵠᐃΔᐃ:
        case _r.ⵠⲆⵠᐃᐃ:
        case _r.ⲆⵠⲆⲆΔ:
        case _r.ᐃΔᐃⵠⵠ:
          Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -za;
          this.ᐃᐃᐃⲆ[cw](Fq[zq].stringify([25, a]));
          break;
        case _r.ⵠⲆΔⵠᐃ:
        case _r.ⵠⵠΔⵠⲆ:
        case _r.ⵠᐃΔⲆᐃ:
        case _r.ⲆΔᐃΔΔ:
        case _r.ᐃⵠᐃᐃⵠ:
        case _r.ᐃⵠΔΔΔ:
        case _r.ⲆⵠΔᐃᐃ:
        case _r.ⲆⲆΔⲆⵠ:
        case _r.ᐃⲆⲆᐃΔ:
        case _r.ⲆΔⲆⵠΔ:
        case _r.ΔⵠⵠΔⲆ:
        case _r.ΔᐃᐃⲆⲆ:
        case _r.ⲆⲆⲆⲆⵠ:
        case _r.ΔᐃⵠⲆⲆ:
        case _r.ᐃᐃᐃᐃᐃ:
        case _r.ⵠᐃⲆᐃⵠ:
        case _r.ᐃΔΔⵠΔ:
        case _r.ᐃⲆⲆⲆⲆ:
        case _r.ⲆⲆⵠⵠᐃ:
        case _r.ΔⲆΔΔⲆ:
        case _r.ΔⵠⵠⲆᐃ:
        case _r.ⵠΔᐃⲆΔ:
        case _r.ᐃΔⵠⵠⵠ:
        case _r.ⵠΔᐃΔΔ:
        case _r.Δⵠᐃⵠᐃ:
        case _r.Ⲇᐃⵠⵠⵠ:
        case _r.ᐃⲆΔᐃⲆ:
        case _r.ΔⵠⵠΔΔ:
        case _r.ΔΔⲆᐃⲆ:
        case _r.ΔⵠΔⲆΔ:
        case _r.ⵠΔⲆⵠᐃ:
        case _r.ᐃΔΔⵠᐃ:
        case _r.ⲆᐃⲆΔΔ:
        case _r.Ⲇᐃⵠᐃⵠ:
        case _r.ⲆⵠᐃΔΔ:
        case _r.ⲆᐃΔᐃⵠ:
        case _r.ᐃΔⵠⵠΔ:
        case _r.ᐃⲆⵠᐃᐃ:
        case _r.ᐃⵠⵠⲆᐃ:
        case _r.ⵠⲆᐃᐃⲆ:
        case _r.ⲆᐃⲆᐃⵠ:
        case _r.ⲆᐃⵠΔΔ:
        case _r.ΔΔΔⵠⵠ:
        case _r.ⵠΔⲆⲆΔ:
        case _r.ⲆᐃΔⲆⵠ:
        case _r.ⲆΔᐃⵠⲆ:
        case _r.ΔⵠᐃⲆⵠ:
        case _r.ΔⲆⵠⵠⵠ:
        case _r.ⲆⲆⵠⵠΔ:
        case _r.ΔⲆⵠΔΔ:
        case _r.ⵠᐃΔⲆⲆ:
        case _r.ⲆⵠⲆⵠⵠ:
        case _r.ⵠΔᐃᐃᐃ:
        case _r.Δᐃᐃᐃᐃ:
        case _r.ⲆⵠᐃᐃΔ:
        case _r.ⵠᐃⵠᐃⵠ:
          if (!Xw.ⲆᐃⲆⵠᐃ) {
            if (a === Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ) {
              Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -za;
            } else {
              Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = a;
            }
          }
          break;
        case _r.ᐃᐃⲆΔⲆ:
        case _r.ΔⵠᐃΔᐃ:
        case _r.ⵠΔΔΔΔ:
        case _r.ᐃΔⲆᐃΔ:
        case _r.ΔⲆᐃⵠΔ:
        case _r.ⵠⵠΔΔⵠ:
        case _r.ⵠΔᐃᐃⵠ:
        case _r.ⵠᐃᐃΔⵠ:
        case _r.ⲆⲆᐃᐃⲆ:
        case _r.ΔΔΔⲆΔ:
        case _r.ⲆΔᐃΔⵠ:
        case _r.ᐃᐃⲆᐃᐃ:
        case _r.Δᐃᐃⵠⵠ:
        case _r.ⵠΔΔᐃᐃ:
        case _r.ΔᐃⵠⵠΔ:
        case _r.ⵠΔⲆΔⲆ:
        case _r.ᐃΔⵠⵠᐃ:
        case _r.ⵠⵠᐃᐃΔ:
        case _r.ᐃᐃΔⲆⲆ:
        case _r.ⵠΔᐃⵠᐃ:
        case _r.ⵠᐃᐃⵠΔ:
        case _r.ᐃᐃᐃᐃⲆ:
        case _r.ᐃΔⵠⲆᐃ:
        case _r.ⲆᐃⲆⲆᐃⲆᐃⲆᐃ:
        case _r.ⲆⲆΔᐃᐃ:
        case _r.ΔⲆᐃΔⵠ:
        case _r.ᐃΔⲆⵠΔ:
        case _r.Ⲇᐃᐃᐃᐃ:
        case _r.ΔᐃⲆᐃᐃ:
        case _r.ᐃⲆΔⲆⵠ:
        case _r.ⲆᐃᐃⲆᐃ:
        case _r.ⲆⲆⲆⵠⵠ:
        case _r.ΔΔⲆᐃᐃ:
        case _r.ⲆⲆⲆᐃΔ:
          if (!Xw.ⲆᐃⲆⵠᐃ) {
            Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
            if ((c = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ]) && a === c.right) {
              this.ᐃᐃᐃⲆ[cw](Lq[Nq].stringify([25, _r.ΔᐃΔΔΔ]));
            } else {
              Xw.ⲆᐃᐃᐃⲆ.wait = true;
              this.ᐃᐃᐃⲆ[cw](Uq[Qq].stringify([25, a]));
            }
          }
          break;
        case _r.ⲆⵠⵠⲆⲆ:
        case _r.ⲆΔⲆⲆⵠ:
        case _r.ⵠᐃⲆΔΔ:
        case _r.ᐃⲆⵠΔⲆ:
        case _r.ⲆᐃΔⲆΔ:
        case _r.ⲆⲆⵠⲆⲆ:
        case _r.ⵠΔΔΔⵠ:
        case _r.ᐃⵠΔΔⲆ:
        case _r.ᐃⵠⵠⵠᐃ:
        case _r.ᐃⵠⲆⵠΔ:
        case _r.ΔⲆⲆⵠⲆ:
        case _r.ⲆⵠΔⵠΔ:
        case _r.ⵠⵠᐃᐃⲆ:
        case _r.ᐃΔΔΔΔ:
        case _r.ⲆΔΔⵠⵠ:
        case _r.ⵠᐃⵠᐃΔ:
        case _r.ⵠᐃⲆⲆⵠ:
        case _r.ᐃⵠᐃΔⵠ:
        case _r.Ⲇᐃⵠⵠᐃ:
        case _r.ⲆⵠⲆᐃΔ:
        case _r.ᐃΔΔᐃΔ:
        case _r.ᐃⵠⲆⵠⲆ:
        case _r.ᐃᐃΔⵠΔ:
        case _r.ⲆΔⵠΔΔ:
        case _r.ᐃΔᐃΔⲆ:
        case _r.ᐃᐃΔᐃⲆ:
        case _r.ΔⲆΔΔΔ:
        case _r.ᐃΔⵠᐃⵠ:
        case _r.Δⵠᐃᐃᐃ:
          if (!Xw.ⲆᐃⲆⵠᐃ) {
            Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
            if ((c = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ]) && a === c.right) {
              this.ᐃᐃᐃⲆ[cw](Xq[Tq].stringify([25, _r.ΔᐃΔΔΔ]));
            } else {
              this.ᐃᐃᐃⲆ[cw](_q[Zq].stringify([25, a]));
            }
          }
          break;
        case _r.ⵠⵠⲆΔⲆ:
        case _r.ⵠᐃᐃⲆᐃ:
        case _r.ⵠⲆᐃⲆΔ:
        case _r.ΔΔⵠⲆⲆ:
        case _r.ᐃⵠⵠᐃⵠ:
        case _r.ⲆⵠΔᐃⵠ:
        case _r.ⲆⲆΔⵠⲆ:
        case _r.ⵠᐃⲆⲆΔ:
        case _r.ΔⵠΔΔⵠ:
        case _r.ⲆⵠΔΔΔ:
          if (!Xw.ⲆᐃⲆⵠᐃ) {
            Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
            var c = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
            this.ᐃᐃᐃⲆ[cw](_q[Zq].stringify([25, a]));
          }
          break;
        case _r.ᐃⲆΔⵠⵠ:
        case _r.ⵠᐃⵠⵠΔ:
        case _r.ⲆⲆᐃᐃΔ:
        case _r.ᐃᐃⲆⵠⵠ:
        case _r.Δᐃᐃⵠᐃ:
        case _r.ΔᐃΔⲆⲆ:
        case _r.ᐃⲆⲆⵠᐃ:
        case _r.ⵠⲆⲆⵠⵠ:
        case _r.ⲆᐃⵠΔᐃ:
        case _r.Δⵠⵠⵠᐃ:
        case _r.ᐃΔᐃⲆⲆ:
        case _r.ⲆΔᐃΔᐃ:
        case _r.ᐃⵠΔᐃΔ:
        case _r.ⵠᐃΔΔⵠ:
        case _r.ᐃⵠᐃⵠⵠ:
        case _r.ⲆⲆΔΔⵠ:
        case _r.ᐃⵠⵠⲆΔ:
          if ((c = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ]) && c.ⵠΔⵠⲆᐃ !== a) {
            Xw.ⲆᐃᐃⲆΔ.wait = y;
          }
          this.ᐃᐃᐃⲆ[cw](Fq[Nq].stringify([25, a]));
          break;
        case _r.ᐃⲆᐃⲆᐃ:
        case _r.ⲆΔⵠⵠᐃ:
        case _r.ΔᐃⲆⵠⵠ:
        case _r.ΔᐃⵠⲆΔ:
        case _r.ᐃⵠⵠⵠΔ:
        case _r.ᐃⲆⲆΔΔ:
        case _r.ⵠⲆⵠΔᐃ:
        case _r.ΔᐃᐃᐃΔ:
        case _r.ⵠᐃΔΔᐃ:
        case _r.ⵠⵠΔᐃᐃ:
        case _r.ᐃᐃⵠⲆⲆ:
        case _r.ΔⲆΔⲆⲆ:
        case _r.ΔΔᐃⲆΔ:
        case _r.ⲆᐃᐃΔᐃ:
        case _r.ⵠᐃᐃΔᐃ:
        case _r.ᐃⲆⵠⲆⲆ:
          this.ᐃᐃᐃⲆ[cw](kr[fr].stringify([25, a]));
      }
    };
    this.ΔΔⵠΔⲆΔΔⲆⵠ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Xo[tq].stringify([7, a]));
    };
    this.ΔⲆΔΔⵠΔⵠⵠⵠ = function (a) {
      Xw.ᐃΔᐃⲆⵠ.wait = oa;
      var b = Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(a);
      Xw.ᐃΔᐃⵠ.ⲆΔⲆⵠᐃᐃᐃ(a, b);
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ⲆⵠⵠⵠᐃⲆⲆⲆⵠ = function (a, b) {
      this.ᐃᐃᐃⲆ[cw](sq[Tq].stringify([Hh, a]));
    };
    this.ⲆⵠᐃⵠⵠΔⲆΔⵠ = function (a, c) {
      this.ᐃᐃᐃⲆ[cw](jo[Io].stringify([b, a]));
    };
    this.ⵠⵠᐃΔⲆⲆΔΔⵠ = function (a) {
      Xw.ᐃΔᐃⲆⵠ.wait = true;
      var b = Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(a);
      Xw.ᐃΔᐃⵠ.ⲆΔΔⵠᐃⵠᐃ(a, 1, b);
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ΔⵠΔΔⵠⵠᐃΔΔ = function (a) {
      var b = a[js];
      var c = a[Gl];
      Xw.ᐃΔᐃⲆⵠ.wait = true;
      var d = Xw.ᐃΔᐃⵠ.ᐃⲆⲆΔⲆ(b);
      Xw.ᐃΔᐃⵠ.ⲆΔΔⵠᐃⵠᐃ(b, c, d);
      Xw.ΔᐃⲆⵠ.ᐃⲆΔ();
    };
    this.ΔⲆⲆΔⵠⵠⲆΔⲆ = function () {
      this.ᐃᐃᐃⲆ[cw](jo[Io].stringify([38]));
    };
    this.ⲆⵠⵠᐃᐃΔᐃⲆΔ = function (a) {
      var b = Math.PI * 2;
      this.ᐃᐃᐃⲆ[cw](Xo[Wo].stringify([gk, Math.floor(el * ((a + b) % b) / b)]));
    };
    this.ΔⵠᐃΔⵠᐃⵠⵠⲆ = function (a) {
      var b = Math.PI * 2;
      this.ᐃᐃᐃⲆ[cw](Xo[Wo].stringify([27, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ᐃᐃⲆᐃⲆⵠᐃᐃⵠ = function (a) {
      this.ᐃᐃᐃⲆ[cw](ᐃᐃⵠⲆΔΔⲆ[vq].stringify([Fr, a]));
    };
    this.ⲆⲆⵠᐃΔⲆⵠⲆΔ = function (a) {
      this.ᐃᐃᐃⲆ[cw](Lq[Nq].stringify([It, a]));
    };
    this.ΔⵠⵠⲆᐃⵠᐃΔΔ = function (a) {
      var b = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
      if (Xw.ⲆᐃⲆⵠᐃ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ᐃⲆⵠⵠΔ);
        } else {
          b.text.push(ᐃⲆⵠⵠΔ + "... " + a.substring(tt, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ᐃᐃᐃⲆ[cw](Lq[Nq].stringify([18, a]));
    };
    this.Δᐃⵠⵠⵠ = function (a) {
      var b = ⲆᐃΔⲆ.select.ⲆΔⲆ;
      if (mj != b.length) {
        var c = [4];
        var d = [];
        ᐃⵠΔⲆ.ⲆᐃⲆᐃⲆⵠⵠ(a, {
          x: ⲆᐃΔⲆ.ⵠᐃⲆ.rx,
          y: ⲆᐃΔⲆ.ⵠᐃⲆ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = Rq; b.length > e; e++) {
          d.push(b[e].ΔⲆᐃΔΔᐃΔᐃⵠ);
        }
        c.push(d);
        this.ᐃᐃᐃⲆ[cw](Uq[Qq].stringify(c));
      }
    };
    this.ⵠⵠᐃΔᐃⲆⵠ = 0;
    this.ⲆᐃΔΔⵠⵠΔ = {
      ⵠΔ: Pg,
      ⵠΔⲆᐃ: Hi
    };
    this.ᐃΔΔⵠΔⵠΔᐃᐃ = function () {
      if (wf - this.ⵠⵠᐃΔᐃⲆⵠ > kw.ΔᐃᐃᐃⲆⵠᐃᐃΔ) {
        this.ⵠⵠᐃΔᐃⲆⵠ = wf;
        var a = Xw.ⵠᐃⲆ;
        var b = Math.floor(a.x / sh);
        var c = Math.floor(a.y / 100);
        if (b != this.ⲆᐃΔΔⵠⵠΔ.ⵠΔ || c != this.ⲆᐃΔΔⵠⵠΔ.ⵠΔⲆᐃ) {
          this.ᐃᐃᐃⲆ[cw](_q[Tq].stringify([Xi, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ⲆᐃΔΔⵠⵠΔ.ⵠΔ = b;
          this.ⲆᐃΔΔⵠⵠΔ.ⵠΔⲆᐃ = c;
        }
      }
    };
    this.ⵠᐃⵠⵠΔⵠⵠ = In;
    this.ⵠᐃⵠⲆⲆⵠᐃᐃΔ = function () {
      if (wf - this.ⵠᐃⵠⵠΔⵠⵠ > kw.ⲆⵠⲆⲆⲆΔΔⵠΔ) {
        this.ⵠᐃⵠⵠΔⵠⵠ = wf;
        this.ping();
      }
    };
    this.ΔΔᐃⲆⲆΔᐃᐃⲆ = function () {
      Xw.reconnect.enabled = true;
      if (this.ᐃⲆᐃᐃⵠ == this.ᐃᐃᐃⲆ.ᐃⲆᐃᐃⵠ) {
        this.ᐃⲆᐃᐃⵠ++;
        this.ᐃᐃᐃⲆ.close();
        Ⲇⵠᐃⵠ.connect();
      }
    };
    this.ⵠΔⲆⵠⲆᐃᐃᐃⵠ = function (a) {
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ΔⵠⵠⲆᐃᐃⵠ]);
      for (var b = 1; b < a.length; b++) {
        Xw.ᐃΔⲆⲆⵠ.push(a[b]);
      }
    };
    this.ΔⵠⵠⵠΔᐃᐃⵠⵠ = function (a) {
      this.ⲆⲆⵠⵠⲆ(mf.ⵠΔΔⲆ[a].ⲆⲆΔⵠᐃ + Ft[ΔΔᐃ.ⲆᐃⵠΔᐃᐃⲆ]);
      Xw.ᐃΔⲆⲆⵠ.push(a);
      var b = document.getElementById("team_box");
      if (Zw.ᐃⵠᐃᐃⲆ != -1 && b.style.display == "inline-block") {
        Zw.ⲆΔⵠᐃᐃ[Zw.ᐃⵠᐃᐃⲆ].action();
      }
    };
    this.ΔΔᐃΔΔⵠΔⵠᐃ = function () {
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⲆΔΔΔⵠⲆᐃ]);
      Xw.ΔⵠⲆᐃᐃ.wait = Sh;
      Xw.ᐃΔⲆⲆⵠ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ᐃⲆⲆᐃᐃⵠⲆⵠⵠ = function (a) {
      if (a == Xw.id) {
        this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ⵠⲆⲆΔᐃᐃΔ]);
        Xw.ΔⵠⲆᐃᐃ.wait = Fg;
        Xw.ᐃΔⲆⲆⵠ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ⲆⲆⵠⵠⲆ(mf.ⵠΔΔⲆ[a].ⲆⲆΔⵠᐃ + Ft[ΔΔᐃ.ᐃⵠⲆᐃᐃᐃᐃ]);
        for (var b = 0; b < Xw.ᐃΔⲆⲆⵠ.length; b++) {
          if (Xw.ᐃΔⲆⲆⵠ[b] == a) {
            Xw.ᐃΔⲆⲆⵠ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (Zw.ᐃⵠᐃᐃⲆ != -1 && c.style.display == "inline-block") {
          Zw.ⲆΔⵠᐃᐃ[Zw.ᐃⵠᐃᐃⲆ].action();
        }
      }
    };
    this.ⵠⲆᐃΔᐃⵠᐃΔᐃ = function (a) {
      Xw.ⲆᐃΔⵠⲆ = Bh;
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ΔᐃⵠΔⵠ]);
      if (this.ᐃⲆᐃᐃⵠ == this.ᐃᐃᐃⲆ.ᐃⲆᐃᐃⵠ) {
        this.ᐃⲆᐃᐃⵠ++;
        Zw.ᐃⵠⲆΔⲆ(vf.ⲆᐃⵠⲆⵠ);
        this.ᐃᐃᐃⲆ.close();
      }
    };
    this.ⲆΔⲆᐃⵠΔᐃⲆⲆ = function (a, b) {
      Xw.ⲆᐃΔⵠⲆ = Rh;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⵠⵠⲆᐃⲆⵠⲆ = Ht[a][Math.floor(Math.random() * Ht[a].length)];
      Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⲆΔΔᐃⲆ = ᐃⵠΔⲆ.ᐃΔⵠᐃᐃᐃᐃ(mf.ⵠΔΔⲆ[Xw.id].ⲆΔΔᐃⲆ);
      Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⲆᐃⲆΔᐃⲆⲆ = ᐃⵠΔⲆ.ᐃΔⵠᐃᐃᐃᐃ(d[xt]);
      Xw.ⵠⲆⵠⲆⲆⲆⲆ.ⵠᐃⵠΔᐃ = c[qu];
      this.ⲆⲆⵠⵠⲆ(Ft[ΔΔᐃ.ᐃⵠᐃᐃᐃⲆΔ]);
      if (this.ᐃᐃᐃⲆ.ᐃⲆᐃᐃⵠ == this.ᐃⲆᐃᐃⵠ) {
        this.ᐃⲆᐃᐃⵠ++;
        Zw.ᐃⵠⲆΔⲆ(Yw.ⲆᐃⵠⲆⵠ);
        this.ᐃᐃᐃⲆ.close();
        try {
          dj.Widget.adsRefresh();
        } catch (a) {}
      }
    };
    this.ping = function () {
      this.ᐃᐃᐃⲆ[cw](kw.ΔⲆᐃⵠⵠΔⵠᐃᐃ);
    };
    this.ΔⲆᐃⵠΔⵠᐃᐃᐃ = function () {
      if (this.ᐃᐃᐃⲆ.readyState == ea) {
        this.ΔⲆⵠᐃᐃⵠΔ -= kw.ⲆᐃⵠᐃⲆᐃⵠ;
      }
    };
    this.ᐃⵠⲆⲆⲆⵠᐃⵠⵠ = function () {
      if (kw.ⲆᐃⲆΔΔΔΔⵠΔ < _w) {
        this.ΔⲆⵠᐃᐃⵠΔ = wf;
      }
      if (kw.ⲆᐃⵠᐃⲆᐃⵠ < wf - this.ΔⲆⵠᐃᐃⵠΔ) {
        this.ΔⲆⵠᐃᐃⵠΔ = wf;
        this.ΔΔᐃⲆⲆΔᐃᐃⲆ();
      }
    };
    this.ᐃⲆⵠⲆⵠⵠⲆΔΔ = function (b) {
      Jf++;
      clearTimeout(this.ΔΔⲆⵠΔ);
      document.getElementById("commandMainBoxName").innerHTML = this.ⲆⲆᐃΔᐃ[this.ᐃᐃΔⲆⵠ][this.ᐃΔⲆΔⲆΔᐃ[this.ᐃᐃΔⲆⵠ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ΔⲆⵠᐃᐃⵠΔ = wf;
      Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.ⵠΔΔⲆⲆ = Xw.ⲆΔᐃΔ.ⲆⲆⵠⲆⵠ.ⵠⲆⵠⲆⵠ;
      Xw.ⲆΔᐃΔ.ⵠⲆΔΔΔᐃΔ.ⵠΔΔⲆⲆ = Xw.ⲆΔᐃΔ.ⵠⲆΔΔΔᐃΔ.ⵠⲆⵠⲆⵠ;
      Xw.ⲆΔᐃΔ.ⲆᐃⵠΔΔⲆΔ.ⵠΔΔⲆⲆ = Xw.ⲆΔᐃΔ.ⲆᐃⵠΔΔⲆΔ.ⵠⲆⵠⲆⵠ;
      Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.ⵠΔΔⲆⲆ = Xw.ⲆΔᐃΔ.ⲆᐃΔⵠΔⵠΔ.ⵠⲆⵠⲆⵠ;
      Xw.ⲆΔᐃΔ.ΔⲆⲆΔⵠ.ⵠΔΔⲆⲆ = Xw.ⲆΔᐃΔ.ΔⲆⲆΔⵠ.ⵠⲆⵠⲆⵠ;
      Xw.ⲆΔᐃΔ.ⵠᐃΔΔ = Ol;
      Xw.ⲆΔᐃΔ.c = ie;
      Xw.ⲆΔᐃΔ.ΔⵠⲆ = xt;
      Xw.ⲆΔᐃΔ.ⵠⵠⵠ = hs;
      Xw.ⲆΔᐃΔ.ⵠᐃⵠ = 1;
      Xw.ⲆΔᐃΔ.ΔⵠⲆΔᐃⲆΔ = 1;
      Xw.ⲆⲆΔΔΔᐃᐃ = Fh;
      Zw.Ⲇⵠᐃⵠⵠ.display = 0;
      Xw.ᐃΔᐃⵠ.ⲆᐃⲆⲆΔ = [];
      Xw.ᐃΔᐃⵠ.ⲆΔΔ = [];
      Xw.ᐃΔᐃⵠ.max = lw.ⲆᐃΔᐃⵠⲆⵠ;
      Xw.ᐃΔᐃⵠ.ᐃᐃΔⲆⲆΔΔ = 0;
      Xw.ᐃΔᐃⵠ.ᐃⵠΔⲆᐃ = In;
      Xw.ᐃΔᐃⵠ.id = -yg;
      Zw.ⵠΔΔⵠⵠΔᐃ = 1;
      Zw.ᐃⲆⲆᐃⲆΔᐃ = lb;
      Zw.ⵠⵠⵠᐃᐃᐃΔ = 1;
      Zw.ⲆⲆⲆᐃΔⵠᐃ = xt;
      Xw.ⲆᐃΔⵠⲆ = Gq;
      Xw.ᐃΔᐃⵠ.ᐃⲆⵠⲆⵠⲆⲆ.stop();
      Xw.ΔᐃⲆⵠ.ⲆΔⵠⵠΔ = [];
      Xw.ΔᐃⲆⵠ.ΔⲆⵠΔᐃ = false;
      Xw.ΔᐃⲆⵠ.ΔⲆⵠⵠᐃΔⵠⲆⲆ = vj;
      Xw.ΔᐃⲆⵠ.ΔᐃΔⵠ = -1;
      Xw.ΔᐃⲆⵠ.id = -hs;
      Xw.ΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ = sl;
      Xw.ΔᐃⲆⵠ.ᐃⵠⵠΔⲆ = Ei;
      Xw.ΔᐃⲆⵠ.ᐃⲆΔΔᐃ = false;
      Xw.ΔᐃⲆⵠ.ⵠΔⵠΔΔⲆᐃ = Ei;
      Xw.ΔᐃⲆⵠ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(_g, Hi, Ug, ps, Xn, 1);
      Xw.ⲆᐃᐃᐃⲆ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 1, 0, 1 / Ds, 1);
      Xw.ⲆᐃᐃᐃⲆ.wait = Bh;
      Xw.ⲆᐃᐃⲆΔ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, hs, 0, 1 / z, za);
      Xw.ⲆᐃᐃⲆΔ.wait = false;
      Xw.ᐃΔᐃⲆⵠ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(vj, Db, 1, In, qu, 1);
      Xw.ᐃΔᐃⲆⵠ.wait = Jn;
      Xw.ΔⵠⲆᐃᐃ.id = -lb;
      Xw.ΔⵠⲆᐃᐃ.Ⲇⵠⵠᐃ = -1;
      Xw.ΔⵠⲆᐃᐃ.wait = wt;
      Xw.ΔⵠⲆᐃᐃ.timeout = new ᐃⵠΔⲆ.ⵠᐃⲆᐃ(false, 0, 1, Rs, 1 / 30, hd);
      Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.x = -1;
      Zw.ΔΔΔⲆⵠ.ⵠΔᐃᐃΔ.y = -cu;
      Zw.ⲆⵠⲆⵠ.open = Ta;
      Zw.ΔΔΔⲆⵠ.ⵠΔΔⲆ = [];
      Xw.ΔΔⵠᐃᐃ.enabled = false;
      mf.mode = b[Ot];
      if (b[20] !== undefined && b[21] !== cn) {
        mf.ⵠⲆᐃⲆᐃ = b[20];
        mf.ⲆⵠⲆⵠᐃ = b[21];
        mf.w = mf.ⵠⲆᐃⲆᐃ * mf.ᐃⲆⲆⲆⲆᐃᐃ;
        mf.ΔⵠⲆ = mf.ᐃᐃᐃⵠⵠᐃΔ * mf.ⲆⵠⲆⵠᐃ;
      }
      mf.ⲆΔᐃⲆⵠⵠⲆ = b[22];
      mf.ⵠⵠΔⲆᐃ = b[23];
      c.ⵠⲆⲆⵠΔᐃᐃ(b[24]);
      c.ⲆΔⲆΔⵠⵠᐃⵠⲆ(b[25]);
      Xw.ⵠΔⲆᐃⲆ.ᐃⲆⲆΔⵠ = b[26];
      Xw.ⲆΔᐃᐃᐃᐃᐃ = 0;
      Xw.ⲆⵠᐃⵠΔ.ᐃⲆⲆΔⵠ = b[27];
      mf.ⵠⵠⵠΔⵠⵠⲆΔⵠ(b[19]);
      mf.time = b[5];
      mf.ΔᐃᐃΔⲆ.ᐃⵠᐃⲆΔ = b[15];
      mf.ΔᐃᐃΔⲆ.ᐃΔΔΔᐃ = new Date().getTime();
      Zw.Δⵠᐃᐃ.ᐃⵠΔΔΔᐃⲆ = b[Ku];
      mf.transition = false;
      Xw.ⵠΔⲆ = b[Pn];
      Zw.Δⵠᐃᐃ.reset();
      Xw.ᐃΔⲆⲆⵠ = b[8];
      mf.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ] = [];
      mf.ⲆΔⲆ[ow.ⵠⵠⵠⲆΔ] = [];
      mf.ⲆΔⲆ[ow.ⵠⲆΔⵠᐃ] = [];
      mf.ⲆΔⲆ[ow.ΔᐃᐃⲆⲆ] = [];
      mf.ⲆΔⲆ[ow.ᐃΔΔⵠΔ] = [];
      mf.ⲆΔⲆ[ow.ⵠᐃΔⲆᐃ] = [];
      mf.ⲆΔⲆ[ow.ⲆΔᐃΔΔ] = [];
      mf.ⲆΔⲆ[ow.ᐃⵠᐃᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.ᐃⵠΔΔΔ] = [];
      mf.ⲆΔⲆ[ow.ⲆⵠΔᐃᐃ] = [];
      mf.ⲆΔⲆ[ow.ⲆⲆΔⲆⵠ] = [];
      mf.ⲆΔⲆ[ow.ᐃⲆⲆᐃΔ] = [];
      mf.ⲆΔⲆ[ow.ⲆΔⲆⵠΔ] = [];
      mf.ⲆΔⲆ[ow.ΔⵠⵠΔⲆ] = [];
      mf.ⲆΔⲆ[ow.ⲆⲆⲆⲆⵠ] = [];
      mf.ⲆΔⲆ[ow.ΔᐃⵠⲆⲆ] = [];
      mf.ⲆΔⲆ[ow.ᐃᐃᐃᐃᐃ] = [];
      mf.ⲆΔⲆ[ow.ⵠᐃⲆᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.ΔⵠⵠⲆᐃ] = [];
      mf.ⲆΔⲆ[ow.ⵠΔᐃⲆΔ] = [];
      mf.ⲆΔⲆ[ow.ᐃΔⵠⵠⵠ] = [];
      mf.ⲆΔⲆ[ow.ⵠΔᐃΔΔ] = [];
      mf.ⲆΔⲆ[ow.ᐃⲆΔᐃⲆ] = [];
      mf.ⲆΔⲆ[ow.ΔⵠⵠΔΔ] = [];
      mf.ⲆΔⲆ[ow.ΔΔⲆᐃⲆ] = [];
      mf.ⲆΔⲆ[ow.ΔⵠΔⲆΔ] = [];
      mf.ⲆΔⲆ[ow.ⵠΔⲆⵠᐃ] = [];
      mf.ⲆΔⲆ[ow.ᐃΔΔⵠᐃ] = [];
      mf.ⲆΔⲆ[ow.ᐃⲆⲆⲆⲆ] = [];
      mf.ⲆΔⲆ[ow.ⲆⲆⵠⵠᐃ] = [];
      mf.ⲆΔⲆ[ow.ΔⲆΔΔⲆ] = [];
      mf.ⲆΔⲆ[ow.ⵠⵠΔⵠⲆ] = [];
      mf.ⲆΔⲆ[ow.ⲆᐃⲆΔΔ] = [];
      mf.ⲆΔⲆ[ow.Ⲇᐃⵠᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.ⲆⵠᐃΔΔ] = [];
      mf.ⲆΔⲆ[ow.ΔⵠΔⵠⲆ] = [];
      mf.ⲆΔⲆ[ow.ᐃΔᐃⵠΔ] = [];
      mf.ⲆΔⲆ[ow.ᐃⵠⵠᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.ⲆⵠΔᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.ⲆⲆΔⵠⲆ] = [];
      mf.ⲆΔⲆ[ow.ⵠᐃⲆⲆΔ] = [];
      mf.ⲆΔⲆ[ow.ⵠΔΔⲆᐃ] = [];
      mf.ⲆΔⲆ[ow.ⵠΔΔⵠΔᐃΔ] = [];
      mf.ⲆΔⲆ[ow.ΔΔΔΔΔ] = [];
      mf.ⲆΔⲆ[ow.Δⵠᐃᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.Δᐃᐃᐃᐃ] = [];
      mf.ⲆΔⲆ[ow.ⲆⲆᐃⲆⵠ] = [];
      mf.ⲆΔⲆ[ow.ⲆⲆᐃⲆᐃ] = [];
      mf.ⲆΔⲆ[ow.ⵠⵠⵠⵠⲆ] = [];
      mf.ⲆΔⲆ[ow.ⲆⵠⲆᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.ⵠⲆⲆᐃΔ] = [];
      mf.ⲆΔⲆ[ow.ᐃΔⲆⲆⲆ] = [];
      mf.ⲆΔⲆ[ow.ΔΔⵠⲆⲆ] = [];
      mf.ⲆΔⲆ[ow.ⵠΔⵠᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.ⵠⵠᐃΔⲆᐃΔ] = [];
      mf.ⲆΔⲆ[ow.ᐃⵠΔⵠⵠ] = [];
      mf.ⲆΔⲆ[ow.ᐃΔⲆⲆΔ] = [];
      mf.ⲆΔⲆ[ow.ⲆⵠⵠΔⲆ] = [];
      mf.ⲆΔⲆ[ow.ᐃⲆᐃⲆΔ] = [];
      mf.ⲆΔⲆ[ow.ⵠᐃΔΔΔⵠΔ] = [];
      mf.ⲆΔⲆ[ow.ⵠⲆⲆⵠΔⲆⵠ] = [];
      mf.ⲆΔⲆ[ow.ⵠⲆⵠΔⲆⵠⵠ] = [];
      mf.ⲆΔⲆ[ow.ⵠΔⵠΔⵠᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.ⵠⵠⲆⵠΔ] = [];
      mf.ⲆΔⲆ[ow.ⲆᐃᐃⲆⵠ] = [];
      mf.ⲆΔⲆ[ow.ⵠⵠⲆᐃΔ] = [];
      mf.ⲆΔⲆ[ow.ᐃⲆⵠᐃΔ] = [];
      mf.ⲆΔⲆ[ow.ⵠΔᐃΔⵠ] = [];
      mf.ⲆΔⲆ[ow.ⲆᐃΔᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.ᐃΔⵠⵠΔ] = [];
      mf.ⲆΔⲆ[ow.ᐃⲆⵠᐃᐃ] = [];
      mf.ⲆΔⲆ[ow.Δⵠᐃⵠᐃ] = [];
      mf.ⲆΔⲆ[ow.ᐃⵠⵠⲆᐃ] = [];
      mf.ⲆΔⲆ[ow.ⵠⲆᐃᐃⲆ] = [];
      mf.ⲆΔⲆ[ow.Ⲇᐃⵠⵠⵠ] = [];
      mf.ⲆΔⲆ[ow.ⲆⵠᐃᐃΔ] = [];
      mf.ⲆΔⲆ[ow.ⵠᐃⵠᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.ⲆᐃⲆᐃⵠ] = [];
      mf.ⲆΔⲆ[ow.ⲆᐃⵠΔΔ] = [];
      mf.ⲆΔⲆ[ow.ΔΔΔⵠⵠ] = [];
      mf.ⲆΔⲆ[ow.ⵠΔⲆⲆΔ] = [];
      mf.ⲆΔⲆ[ow.ⲆᐃΔⲆⵠ] = [];
      mf.ⲆΔⲆ[ow.ⲆΔᐃⵠⲆ] = [];
      mf.ⲆΔⲆ[ow.ΔⵠᐃⲆⵠ] = [];
      mf.ⲆΔⲆ[ow.ΔⲆⵠⵠⵠ] = [];
      mf.ⲆΔⲆ[ow.ⲆⲆⵠⵠΔ] = [];
      mf.ⲆΔⲆ[ow.ⵠᐃΔⲆⲆ] = [];
      mf.ⲆΔⲆ[ow.ΔⲆⵠΔΔ] = [];
      mf.ⲆΔⲆ[ow.ⲆⵠⲆⵠⵠ] = [];
      mf.ⲆΔⲆ[ow.ⵠΔᐃᐃᐃ] = [];
      mf.Δⵠⵠᐃᐃ = [];
      mf.ΔᐃⵠᐃⲆΔΔ = b[7];
      Xw.id = b[9];
      Xw.ᐃⲆᐃᐃ = mf.ΔᐃⵠᐃⲆΔΔ * Xw.id;
      if ($w.loaded) {
        $w.ⵠΔΔⲆ[Lr].ᐃⲆᐃᐃ = Xw.ᐃⲆᐃᐃ;
        $w.ⵠΔΔⲆ[0].ᐃᐃΔᐃⵠΔᐃ = ya;
      }
      zf.ᐃΔᐃΔⵠΔᐃ();
      Xw.ⵠᐃⲆ.ⲆⲆΔᐃⵠ(b[qo], b[10]);
      mf.ⵠΔΔⲆ = [];
      var d = mf.ⵠΔΔⲆ;
      for (var e = 0; b[11] > e; e++) {
        d.push(new tw());
      }
      e = zl;
      for (var f = b[4]; f.length > e; e++) {
        var g = d[f[e].i];
        g.ⲆⲆΔⵠᐃ = f[e].n;
        g.ΔⵠΔᐃ = f[e].s;
        g.ΔⵠΔᐃᐃ = f[e].a;
        g.ⲆⲆⲆⵠΔ = f[e].c;
        g.ᐃΔⲆⵠⲆ = f[e].b;
        g.ᐃᐃⵠΔΔ = f[e].d;
        g.ⲆⵠᐃΔⲆⲆⲆ = f[e].g;
        g.level = f[e].l;
        g.ⲆΔΔᐃⲆ = ᐃⵠΔⲆ.ⲆⲆᐃⲆⵠΔⲆ(f[e].p);
        g.ⲆᐃΔⵠⲆ = true;
        if (Oq === dw) {
          g.ⲆⲆΔⵠᐃ += "|" + f[e].i;
        }
      }
      Xw.ΔⲆⵠᐃⲆ.sort();
      if (lw.ⲆⵠⲆⵠⲆⲆⵠ === mf.mode && mf.ⵠΔΔⲆ[Xw.id].ⲆⲆΔⵠᐃ === "spectator") {
        Xw.ᐃⲆⲆΔΔᐃᐃ = Sh;
      } else {
        Xw.ᐃⲆⲆΔΔᐃᐃ = false;
      }
      if (lw.ΔΔΔΔᐃ === mf.mode && lw.ΔⵠⲆΔⵠᐃⲆ === mf.ⵠΔΔⲆ[Xw.id].ΔⵠΔᐃ) {
        Xw.ⲆᐃⲆⵠᐃ = Kl;
      } else {
        Xw.ⲆᐃⲆⵠᐃ = false;
      }
      if (lw.ᐃᐃⲆΔⵠ === mf.mode && lw.ⵠⲆⵠⲆⵠⲆᐃ === mf.ⵠΔΔⲆ[Xw.id].ΔⵠΔᐃ) {
        Xw.ΔΔⵠⵠⲆᐃᐃ = true;
      } else {
        Xw.ΔΔⵠⵠⲆᐃᐃ = Ei;
      }
      ⵠⵠΔΔ.set("starve_token", Xw.Δⵠⵠⵠⵠ);
      if (b[12] === 0) {
        Xw.ⵠΔⲆⵠΔ.ΔᐃⲆΔᐃ = tg;
        Zw.Δⵠᐃᐃ.restore(b[Xh]);
        var h = b[Sq];
        if (h[_r.ⵠⲆᐃᐃ]) {
          Xw.ᐃΔᐃⵠ.ΔΔᐃⵠⲆⵠⵠ(cu, ps);
        }
        for (e = Lr; e < h.length; e++) {
          if (h[e]) {
            if (_r.ⵠⲆᐃᐃ == e) {
              continue;
            }
            if (e == _r.ΔᐃΔΔΔ) {
              continue;
            }
            this.ΔΔᐃᐃⵠⵠΔ([0, e, h[e]]);
          }
        }
        Xw.ⵠΔⲆⵠΔ.open = false;
      } else {
        if (mf.mode === lw.ⲆⲆⲆⲆᐃ) {
          this.ΔΔᐃᐃⵠⵠΔ([Pg, _r.ⵠⲆᐃΔⵠ, 1]);
        } else if (lw.ᐃᐃⲆΔⵠ === mf.mode) {
          if (Xw.ΔΔⵠⵠⲆᐃᐃ) {
            this.ΔΔᐃᐃⵠⵠΔ([Pg, _r.ⲆᐃⵠΔΔ, 4]);
          } else {
            this.ΔΔᐃᐃⵠⵠΔ([0, _r.ⲆⲆΔⲆⵠ, 3]);
          }
        }
        if (lw.ⵠᐃᐃⲆⲆ === mf.mode || mf.mode === lw.ᐃᐃⲆΔⵠ || mf.mode === lw.ⵠΔᐃᐃⲆ || mf.mode === lw.ⲆⲆⲆⲆᐃ) {
          Xw.ⵠΔⲆⵠΔ.ΔᐃⲆΔᐃ = new Date().getTime();
          Xw.ⵠΔⲆⵠΔ.open = true;
          Xw.ⵠΔⲆⵠΔ.value = b[13];
          Zw.ⵠΔⲆⵠΔ.ᐃΔΔΔᐃ();
        } else {
          Xw.ⵠΔⲆⵠΔ.ΔᐃⲆΔᐃ = Db;
          Xw.ⵠΔⲆⵠΔ.open = false;
          Xw.ⵠΔⲆⵠΔ.value = Eh;
        }
        Xw.ᐃᐃᐃΔⵠⵠΔ = b[da].toString();
      }
      Xw.ᐃⲆᐃⲆⵠ.enabled = b[ms];
      Xw.ᐃⲆᐃⲆⵠ.ΔᐃⲆΔᐃ = -lb;
      Xw.ᐃⲆᐃⲆⵠ.label = null;
      Xw.ᐃⲆᐃⲆⵠ.now = -Xn;
      ⵠⵠΔΔ.set("starve_token_id", Xw.ᐃᐃᐃΔⵠⵠΔ);
      if (Xw.reconnect.enabled) {
        Xw.reconnect.rotate = 0;
        Xw.reconnect.enabled = wt;
      } else {
        vf.ᐃⵠⲆΔⲆ(Zw.ⲆᐃⵠⲆⵠ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + vf.ΔⵠΔᐃ + "A" + vf.ΔⵠΔᐃᐃ);
        }
      }
    };
    this.connect = function () {
      c.Ⲇⵠᐃⵠᐃⵠⵠ = Lr;
      c.ᐃᐃⵠⲆⲆᐃᐃ();
    };
    this.ᐃᐃⵠᐃⵠᐃⵠ = Hs;
    this.ⲆⵠⵠⵠΔⲆΔΔᐃ = function (b) {
      const d = c.ⲆΔⲆΔⵠ.filter(a => a.gm === b);
      const f = {};
      for (let a = gu; d.length > a; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== Sl) {
          if (f[c] === Za) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function g(a) {
        c.ᐃᐃⵠᐃⵠᐃⵠ = a;
        const b = f[a];
        const d = b[Math.floor(Math.random() * b.length)];
        c.ⲆⲆⲆᐃⵠᐃⵠ({
          domain: gw,
          is_tls: jh,
          id: d.id,
          p: d.p
        });
      }
      if (c.ᐃᐃⵠᐃⵠᐃⵠ !== Sl) {
        g(c.ᐃᐃⵠᐃⵠᐃⵠ);
        return;
      }
      let h = 1;
      function i(a) {
        const b = new dj.XMLHttpRequest();
        const c = a[0];
        const d = c.p;
        const e = c.r;
        const f = d[Math.floor(Math.random() * d.length)];
        b.open("GET", "https://" + f + "." + gw + "/", true);
        b.onreadystatechange = function () {
          if (b.readyState === 4) {
            if (h === 0) {
              return;
            }
            h = 0;
            g(e);
          }
        };
        b.send();
      }
      for (let a in f) {
        i(f[a]);
      }
      dj.setTimeout(function () {
        if (h === 0) {
          return;
        }
        h = Lr;
        const a = dj.Object.keys(f);
        g(a[Math.floor(Math.random() * a.length)]);
      }, 5000);
    };
    this.ΔΔᐃⲆⵠⵠΔΔΔ = function () {
      let a = lw.ΔᐃⲆᐃⵠⵠᐃ[c.ᐃᐃΔⲆⵠ];
      console.log(mb, Hq, undefined);
      let b = c.ᐃΔⲆΔⲆΔᐃ[c.ᐃᐃΔⲆⵠ];
      let d = c.ⲆΔⲆΔⵠ.find(c => c.gm == a && c.idx == b);
      if (d === undefined) {
        c.ⲆⵠⵠⵠΔⲆΔΔᐃ(a);
      } else {
        c.ⲆⲆⲆᐃⵠᐃⵠ({
          domain: gw,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ᐃᐃⵠⲆⲆᐃᐃ = function () {
      console.log(Oh);
      if (fw === Sl) {
        c.ΔΔᐃⲆⵠⵠΔΔΔ();
      } else {
        c.ⲆⲆⲆᐃⵠᐃⵠ({
          domain: fw.domain,
          is_tls: fw.ssl,
          id: fw.id,
          p: [fw.p]
        });
      }
    };
    this.ⲆⲆⲆᐃⵠᐃⵠ = function (b) {
      let d = b.domain;
      let e = b.is_tls;
      let f = b.id;
      let g = b.p;
      let a = g[Math.floor(Math.random() * g.length)];
      let i = e ? "wss://" + a + "." + d + "/" + f : "ws://" + d;
      console.log(undefined, cn);
      c.ᐃᐃᐃⲆ = new dj.WebSocket(i);
      c.ᐃᐃᐃⲆ.binaryType = "arraybuffer";
      c.ᐃᐃᐃⲆ.ᐃⲆᐃᐃⵠ = c.ᐃⲆᐃᐃⵠ;
      c.ᐃᐃᐃⲆ.onmessage = function (a) {
        if (c.ᐃⲆᐃᐃⵠ == c.ᐃⲆᐃᐃⵠ) {
          if (typeof a.data == "string") {
            var b = JSON.parse(a.data);
            switch (b[0]) {
              case 0:
                c.Ⲇᐃᐃᐃⵠ(b);
                break;
              case 1:
                c.Δᐃᐃⵠⵠⵠᐃ(b[1]);
                break;
              case dg:
                c.ᐃⲆΔⲆⵠⲆⲆⲆᐃ(b);
                break;
              case Tr:
                c.ᐃⲆⵠⲆⵠⵠⲆΔΔ(b);
                break;
              case Pe:
                c.message(b[Te]);
                break;
              case 5:
                c.ⵠⲆᐃⵠᐃᐃᐃ(b);
                break;
              case Cl:
                c.ⵠⲆⲆⵠΔᐃᐃ(b[1]);
            }
          } else {
            var d = new Uint8Array(a.data);
            switch (d[Rs]) {
              case 0:
                c.ⲆΔⲆ(a.data, d, ts);
                break;
              case fl:
                c.ⲆΔⲆ(a.data, d, Kj);
                break;
              case 2:
                c.ΔᐃᐃΔⵠᐃᐃⵠⵠ();
                break;
              case 3:
                c.ΔΔᐃᐃⵠⵠΔ(new Uint16Array(a.data));
                break;
              case 4:
                c.ᐃⵠⲆⲆⲆⵠᐃΔΔ();
                break;
              case M:
                c.ⵠΔᐃⲆᐃⲆᐃⲆᐃ();
                break;
              case _l:
                c.ΔᐃⵠᐃⲆⵠΔⲆΔ();
                break;
              case 7:
                c.ⲆΔⵠⲆΔⲆⵠΔΔ(a.data);
                break;
              case $l:
                c.ΔⵠⵠᐃⵠΔⲆᐃΔ(d[Xn]);
                break;
              case Ch:
                c.ⵠᐃⵠΔΔⵠⲆᐃᐃ(d[mk]);
                break;
              case J:
                c.ⵠΔⵠΔⲆᐃⵠ();
                break;
              case 11:
                c.ⵠⵠⲆⵠⵠᐃΔ(d[rg], d[2]);
                break;
              case Uk:
                c.ᐃᐃᐃⲆᐃ(d[1]);
                break;
              case zs:
                c.ⲆⲆⲆΔⵠᐃΔΔΔ(d, a.data);
                break;
              case 14:
                c.ΔΔⵠⲆΔⵠⵠ();
                break;
              case 15:
                c.ᐃⲆᐃⵠⲆᐃⲆΔΔ(d[1]);
                break;
              case sr:
                c.ⲆΔᐃΔ(d[yg], d[2], d[3], d[Gi], d[5], d[6], d[wk]);
                break;
              case 17:
                c.ⵠΔᐃᐃΔⲆⲆΔⵠ(a.data);
                break;
              case hr:
                c.ΔᐃⵠⵠΔΔΔΔᐃ();
                break;
              case 19:
                c.ᐃⲆΔΔᐃ(d[fl]);
                break;
              case Xa:
                c.ᐃⲆⵠΔⲆᐃⵠⲆΔ();
                break;
              case 21:
                c.ⵠⵠⵠⵠ(a.data);
                break;
              case 22:
                c.ΔᐃⵠⵠᐃᐃΔΔΔ(d[Ot]);
                break;
              case 23:
                c.ⲆⲆᐃᐃⵠⵠΔΔΔ(a.data);
                break;
              case 24:
                c.ⵠⲆΔⵠᐃΔⵠⵠᐃ(d[Ol]);
                break;
              case 25:
                c.ⲆΔⲆᐃⵠΔᐃⲆⲆ(d[qu], a.data);
                break;
              case 26:
                c.ΔΔΔⲆⵠ(d);
                break;
              case 27:
                c.ⵠⵠᐃⲆⵠΔΔⲆΔ();
                break;
              case 28:
                c.ᐃⲆᐃⲆⵠ(d[hs]);
                break;
              case 29:
                c.ΔⵠⵠΔᐃᐃⵠⲆⲆ();
                break;
              case 30:
                c.ⵠⲆᐃΔᐃⵠᐃΔᐃ();
                break;
              case 31:
                c.ⵠΔⲆⵠⲆᐃᐃᐃⵠ(d);
                break;
              case 32:
                c.ᐃⲆⲆᐃᐃⵠⲆⵠⵠ(d[yg]);
                break;
              case 33:
                c.ΔⵠⵠⵠΔᐃᐃⵠⵠ(d[jh]);
                break;
              case 34:
                c.ΔΔᐃΔΔⵠΔⵠᐃ();
                break;
              case 35:
                c.ⵠΔⵠᐃᐃⵠΔᐃᐃ(d[1]);
                break;
              case 36:
                c.ⵠΔⵠΔΔⲆᐃ(d[jh]);
                break;
              case 37:
                c.ᐃⲆⵠᐃⲆᐃⵠΔΔ(d[xt], d[2]);
                break;
              case 38:
                c.ⵠᐃΔⵠⵠⲆΔⵠⵠ(d[Ot]);
                break;
              case 39:
                c.ⵠΔΔΔΔᐃᐃⵠᐃ(d[1]);
                break;
              case 40:
                c.ᐃⵠΔᐃⲆⵠⵠᐃⲆ();
                break;
              case 41:
                c.ⲆⲆⵠⵠⵠᐃΔⲆⵠ(d);
                break;
              case 42:
                c.ΔⵠⲆᐃΔΔᐃⲆᐃ(d[xt]);
                break;
              case 43:
                c.ⵠⵠⲆᐃᐃⵠΔⲆΔ(d[lb]);
                break;
              case 44:
                c.claimed(d[1]);
                break;
              case 45:
                c.ⲆᐃⵠⵠⲆⲆΔⵠⵠ(d[1]);
                break;
              case 46:
                c.ΔⲆᐃⲆΔⵠⲆⵠᐃ(d[Ol]);
                break;
              case 47:
                c.ᐃⵠⵠΔⲆ(d[js]);
                break;
              case 48:
                c.ᐃΔⵠᐃΔⵠᐃⵠᐃ();
                break;
              case 50:
                c.ⵠⵠⲆᐃⵠᐃⵠⲆΔ(d[1], d[2], d[3]);
                break;
              case 51:
                c.ᐃΔⲆΔⲆⵠⲆᐃⵠ();
                break;
              case 52:
                c.ΔⲆΔΔⵠΔⵠⵠⵠ(d[1]);
                break;
              case 53:
                c.ⵠⵠᐃΔⲆⲆΔΔⵠ(d[cu]);
                break;
              case 54:
                c.ⲆⵠᐃⲆⲆΔⵠᐃⵠ();
                break;
              case 55:
                c.ᐃᐃᐃᐃⲆⲆⲆΔⲆ(d[1]);
                break;
              case 56:
                c.ⵠⲆⲆᐃⲆⲆⵠᐃⵠ(d[Ol]);
                break;
              case 57:
                c.ⵠΔⲆⵠⵠΔⵠⲆⵠ();
                break;
              case 58:
                c.ⲆⲆᐃᐃⵠⵠⲆⲆⲆ();
                break;
              case 59:
                c.ᐃⲆᐃΔΔΔⵠⲆⵠ();
                break;
              case 60:
                c.ⲆⲆⲆΔⵠⲆⵠΔⵠ();
                break;
              case 61:
                Xw.ⵠᐃⲆ.ⵠΔΔΔΔⲆⵠ = 0.2;
                Xw.ⵠᐃⲆ.ΔᐃⲆΔᐃ = gl;
                break;
              case 62:
                c.ΔⵠΔΔⵠⵠᐃΔΔ(new Uint16Array(a.data));
                break;
              case 63:
                c.ᐃⲆᐃᐃᐃᐃΔΔⵠ();
                break;
              case 64:
                c.ⲆⲆⵠⵠⲆⵠⲆΔⵠ();
                break;
              case 65:
                c.ⵠΔΔⲆΔᐃᐃⵠⲆ();
                break;
              case 66:
                c.ΔΔⲆΔⵠΔⵠΔⵠ();
                break;
              case 67:
                c.ᐃⵠΔᐃΔᐃΔⵠᐃ(d[Te]);
                break;
              case 68:
                c.ⲆᐃⵠΔⲆΔⲆⵠᐃ(d[1]);
                break;
              case 69:
                c.ⲆΔᐃᐃᐃᐃᐃ(d[1]);
                break;
              case 70:
                c.ⲆᐃⲆⲆⵠΔⵠΔΔ(d[1]);
                break;
              case 71:
                c.ⵠᐃⵠᐃᐃ(d[hd]);
            }
          }
        }
      };
      this.ᐃᐃᐃⲆ.onopen = function () {
        clearTimeout(c.ΔΔⲆⵠΔ);
        Xw.ⲆΔΔᐃⵠᐃⲆ = Xw.ⲆΔΔᐃⵠᐃⲆ || ᐃⵠΔⲆ.ΔⲆⵠᐃᐃΔΔ("token");
        ᐃⵠΔⲆ.ΔⲆΔⲆⵠⲆᐃ().then(a => {
          c.ᐃᐃᐃⲆ[cw](jr[fr].stringify([vf.ⲆⲆΔⵠᐃ.input.value, screen.width + 200, screen.height + 200, kw.ᐃⵠⵠΔⵠⲆΔ, Xw.Δⵠⵠⵠⵠ, Xw.ᐃᐃᐃΔⵠⵠΔ, Xw.reconnect.enabled ? 1 : Rs, vf.ΔⵠΔᐃ, vf.ΔⵠΔᐃᐃ, vf.ᐃⵠΔⲆᐃ, vf.ᐃΔⲆⵠⲆ, vf.ⲆⲆⲆⵠΔ, vf.ᐃᐃⵠΔΔ, dx === undefined ? 0 : dx, cx === undefined ? Bg : cx.substring(cx.length - 50), ew, Xw.ⲆΔΔᐃⵠᐃⲆ, a, Xw.ⵠᐃⵠⲆΔᐃᐃ, Xw.ΔⵠᐃΔⵠⵠⲆ]));
          Xw.ⲆΔΔᐃⵠᐃⲆ = undefined;
          Xw.ⵠᐃⵠⲆΔᐃᐃ = undefined;
          Xw.ΔⵠᐃΔⵠⵠⲆ = undefined;
          c.ΔΔⲆⵠΔ = setTimeout(c.timeout, kw.ⵠΔΔΔⲆⵠⲆᐃⲆ);
        });
      };
    };
  }();
  var mf;
  var Xw;
  var Yw;
  var Zw = {
    ΔⵠᐃΔΔ: C
  };
  var $w = new function () {
    this.ⲆᐃⵠⲆⵠ = 0;
    this.loaded = mj;
    this.transition = mj;
    this.ΔⵠΔᐃᐃⲆΔ = function (a) {
      return a / mf.w * 100;
    };
    this.ⲆᐃᐃᐃΔᐃΔ = function (a) {
      return sa * (a / mf.ΔⵠⲆ);
    };
    this.ΔⵠΔΔⲆⵠⵠ = function (a, b) {
      a = this.ΔⵠΔᐃᐃⲆΔ(a) - this.Ⲇⵠⵠⵠⵠ.x;
      return this.Ⲇⵠⵠⵠⵠ.x + b * a;
    };
    this.ⵠⵠΔⲆΔΔⲆ = function (a, b) {
      a = Math.abs(this.ⲆᐃᐃᐃΔᐃΔ(a) - this.Ⲇⵠⵠⵠⵠ.y);
      return this.Ⲇⵠⵠⵠⵠ.y + b * a;
    };
    this.sample = {};
    this.ⲆⲆⵠΔⲆ = {};
    this.ⲆᐃΔⲆ = {};
    this.ᐃⲆⵠᐃᐃⵠΔ = function (a, b, c, d) {
      for (var e = Hi; e < b.length; e++) {
        var f = b[e];
        if (!a.playing(f)) {
          a.pos(c, d, -0.5, f);
          a.play(f);
          return true;
        }
      }
      return false;
    };
    this.ᐃⲆⲆ = function (a, b, c, d) {
      c = this.ΔⵠΔΔⲆⵠⵠ(c, ᐃᐃΔⵠⲆ.ⲆᐃᐃⵠⵠⲆᐃ);
      d = this.ⵠⵠΔⲆΔΔⲆ(d, ᐃᐃΔⵠⲆ.ⲆᐃᐃⵠⵠⲆᐃ);
      console.log("HIT", a, b, c, d, ᐃᐃΔⵠⲆ.ⲆᐃᐃⵠⵠⲆᐃ);
      if (a) {
        if (b === 1) {
          this.ᐃⲆⵠᐃᐃⵠΔ(this.ⲆᐃΔⲆ.ΔⵠᐃᐃΔᐃⲆ, this.sample.ΔⵠᐃᐃΔᐃⲆ, c, d);
        } else if (b === Db) {
          this.ᐃⲆⵠᐃᐃⵠΔ(this.ⲆᐃΔⲆ.ΔⲆΔⲆⵠⲆⲆ, this.sample.ΔⲆΔⲆⵠⲆⲆ, c, d);
        }
      } else {
        this.ᐃⲆⵠᐃᐃⵠΔ(this.ⲆᐃΔⲆ.ⵠⲆᐃΔⲆ, this.sample.ⵠⲆᐃΔⲆ, c, d);
      }
    };
    this.Ⲇⵠⵠⵠⵠ = {
      y: mj,
      x: ya
    };
    this.ⵠⵠⵠᐃⲆⲆⲆ = {
      x: tg,
      y: 0
    };
    this.ΔᐃΔⵠⵠ = {};
    this.ⵠΔΔⲆ = [];
    this.ᐃΔⵠⲆⵠ = function (a, b) {
      for (var c in this.ΔᐃΔⵠⵠ) {
        var d = this.ΔᐃΔⵠⵠ[c];
        d.check(a);
        if (d.ᐃⵠᐃⲆᐃᐃᐃ) {
          if (mf.ΔᐃᐃΔⲆ.now < nf.ⲆⵠⵠΔⲆΔᐃ) {
            d.ⵠΔΔⵠⵠ();
          }
          if (b) {
            d.ᐃⲆΔ(a, this.Ⲇⵠⵠⵠⵠ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= ps;
    };
    this.ᐃΔΔᐃΔᐃᐃΔᐃ = function () {
      var a = [];
      for (var b = Rs; this.ⵠΔΔⲆ.length > b; b++) {
        if ((e = this.ⵠΔΔⲆ[b]).ᐃᐃΔᐃⵠΔᐃ) {
          a.push(b);
        } else if (!e.ᐃᐃΔᐃⵠΔᐃ && !mf.Δⵠⵠᐃᐃ[e.ᐃⲆᐃᐃ]) {
          e.ᐃΔΔⲆⲆΔⲆ();
          a.push(b);
        }
      }
      var c = mf.ⲆΔⲆ[ow.ᐃᐃⲆⲆⲆ];
      var d = tt;
      for (b = Eh; b < c.length && a.length > d; b++) {
        var e = c[b];
        if ((lw.ⲆⵠⲆⵠⲆⲆⵠ != mf.mode || mf.ⵠΔΔⲆ[e.id].ⲆⲆΔⵠᐃ !== "spectator") && e.ᐃⵠΔᐃⵠ === -1 && Xw.ᐃⲆᐃᐃ !== e.ᐃⲆᐃᐃ) {
          this.ⵠΔΔⲆ[a[d]].ᐃΔΔΔᐃ(e.ᐃⲆᐃᐃ);
          d++;
        }
      }
    };
    this.ΔΔⲆᐃᐃᐃᐃⵠΔ = function () {
      this.ᐃΔΔᐃΔᐃᐃΔᐃ();
      for (var a = In; this.ⵠΔΔⲆ.length > a; a++) {
        var b = this.ⵠΔΔⲆ[a];
        if (!b.ᐃᐃΔᐃⵠΔᐃ && b.check()) {
          b.ᐃⲆΔ();
        }
      }
    };
    this.ⲆⲆⵠᐃΔⲆΔᐃΔ = function (a) {
      if (a.x === this.ⵠⵠⵠᐃⲆⲆⲆ.x && a.y === this.ⵠⵠⵠᐃⲆⲆⲆ.y) {
        return Eh;
      } else {
        this.ⵠⵠⵠᐃⲆⲆⲆ.x = a.x;
        this.ⵠⵠⵠᐃⲆⲆⲆ.y = a.y;
        this.Ⲇⵠⵠⵠⵠ.x = this.ΔⵠΔᐃᐃⲆΔ(a.x);
        this.Ⲇⵠⵠⵠⵠ.y = this.ⲆᐃᐃᐃΔᐃΔ(a.y);
        Howler.pos(this.Ⲇⵠⵠⵠⵠ.x, this.Ⲇⵠⵠⵠⵠ.y, Lr);
        return xt;
      }
    };
    this.ᐃᐃⵠᐃᐃⲆᐃΔΔ = function () {
      if (this.ⲆᐃⵠⲆⵠ && this.loaded) {
        var a = mf.Δⵠⵠᐃᐃ[Xw.ᐃⲆᐃᐃ];
        if (a) {
          a.ᐃⵠΔᐃⵠ = Rq;
          var b = this.ⲆⲆⵠᐃΔⲆΔᐃΔ(a);
          if (lw.ΔΔΔΔᐃ !== mf.mode && lw.ⲆⲆⲆⲆᐃ !== mf.mode && mf.mode !== lw.ᐃⲆⵠⲆΔΔᐃ) {
            this.ᐃΔⵠⲆⵠ(a, b);
          }
          this.ΔΔⲆᐃᐃᐃᐃⵠΔ();
        }
      }
    };
    this.ᐃⲆⲆⵠⲆΔΔᐃΔ = function () {
      for (var b in sf) {
        var c = sf[b];
        if (typeof c === "object" && c.path) {
          c.ⵠⵠᐃΔᐃ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.ΔΔ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(undefined);
          for (var h = zl; h < f; h++) {
            var j = c.ⵠⵠᐃΔᐃ.play(d);
            c.ⵠⵠᐃΔᐃ.stop(j);
            c.ⵠⵠᐃΔᐃ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(Sl, undefined);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            $w.sample[d] = g;
          } else {
            $w.sample[d] = g[0];
          }
          $w.ⲆᐃΔⲆ[d] = c.ⵠⵠᐃΔᐃ;
        }
      }
    };
    this.ⵠⲆᐃⵠΔᐃΔ = function (a, b, c) {
      for (var d = 0; a.length > d; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ⵠⲆΔⵠⲆⵠⵠ = function (b, c, d, e, f, g) {
      var i = b;
      for (var a = 0; d > a; a++) {
        var j = i[a] = [];
        for (ⵠΔⲆᐃ = 0; ⵠΔⲆᐃ < e; ⵠΔⲆᐃ++) {
          j[ⵠΔⲆᐃ] = $w.sample[f + ⵠΔⲆᐃ][a];
          c.ⵠⵠᐃΔᐃ.volume(g, j[ⵠΔⲆᐃ]);
        }
      }
    };
    this.ᐃΔΔΔᐃ = function () {
      $w.ᐃⲆⲆⵠⲆΔΔᐃΔ();
      $w.ⲆⲆⵠΔⲆ.ΔᐃⲆΔᐃⲆΔ = [];
      $w.ⲆⲆⵠΔⲆ.ⲆᐃᐃᐃⲆ = [];
      $w.ⲆⲆⵠΔⲆ.ⵠⲆΔⲆⲆ = [];
      $w.ⵠⲆΔⵠⲆⵠⵠ($w.ⲆⲆⵠΔⲆ.ΔᐃⲆΔᐃⲆΔ, sf.ⲆΔᐃⵠᐃⵠᐃ, nf.ᐃᐃⲆⲆⲆ, yr, "p", 0.15);
      $w.ⵠⲆΔⵠⲆⵠⵠ($w.ⲆⲆⵠΔⲆ.ⲆᐃᐃᐃⲆ, sf.ⲆⲆΔⲆᐃⵠᐃ, nf.ᐃᐃⲆⲆⲆ, 4, "w", 0.15);
      $w.ⵠⲆΔⵠⲆⵠⵠ($w.ⲆⲆⵠΔⲆ.ⵠⲆΔⲆⲆ, sf.ⲆⲆⲆⵠⵠⵠⵠ, nf.ᐃᐃⲆⲆⲆ, fn, "d", 0.09);
      $w.ⵠⲆᐃⵠΔᐃΔ($w.sample.ⵠⲆᐃΔⲆ, $w.ⲆᐃΔⲆ.ⵠⲆᐃΔⲆ, 0.15);
      $w.ⵠⲆᐃⵠΔᐃΔ($w.sample.ΔⲆΔⲆⵠⲆⲆ, $w.ⲆᐃΔⲆ.ΔⲆΔⲆⵠⲆⲆ, 0.2);
      $w.ⵠⲆᐃⵠΔᐃΔ($w.sample.ΔⵠᐃᐃΔᐃⲆ, $w.ⲆᐃΔⲆ.ΔⵠᐃᐃΔᐃⲆ, 1);
      $w.ΔᐃΔⵠⵠ.ΔΔᐃΔⲆᐃΔⲆⵠ = new hf(nf.ⵠΔⲆⵠΔΔⵠⵠⲆ, this.sample.ⲆΔⲆⵠⲆΔᐃ, this.sample.ⵠᐃⵠⲆᐃⲆⲆ, nf.ΔᐃΔᐃⵠⲆᐃⲆⵠ, 0.05, 0.4, sf.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ, nf.ⵠᐃΔⲆⵠΔᐃ, {
        x: Xr.ⵠⲆⲆᐃⲆⲆⲆ,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ,
        w: mf.w,
        ΔⵠⲆ: mf.ΔⵠⲆ
      }, {
        x: Xr.ⵠⲆⲆᐃⲆⲆⲆ - 2300,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ - 4000,
        w: mf.w,
        ΔⵠⲆ: mf.ΔⵠⲆ
      }, {
        x: Xr.ⵠⲆⲆᐃⲆⲆⲆ - 1500,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ - 2000,
        w: mf.w,
        ΔⵠⲆ: mf.ΔⵠⲆ
      });
      $w.ΔᐃΔⵠⵠ.ⲆⵠⵠⵠⵠᐃⲆⲆᐃ = new hf(nf.ᐃⲆⲆΔⵠΔᐃ, this.sample.ⵠⲆΔⵠⲆΔᐃ, this.sample.ΔⲆⲆⵠᐃⲆⵠ, nf.ᐃᐃᐃⲆⵠⵠᐃⲆⲆ, 0.03, 0.25, sf.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ, nf.ⵠᐃΔⲆⵠΔᐃ, {
        x: In,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ + 800,
        w: Xr.ⵠⲆⲆᐃⲆⲆⲆ - 2300,
        ΔⵠⲆ: mf.ΔⵠⲆ
      }, {
        x: -100,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ - 300,
        w: Xr.ⵠⲆⲆᐃⲆⲆⲆ - 100,
        ΔⵠⲆ: mf.ΔⵠⲆ
      }, {
        x: -Ls,
        y: Xr.ᐃᐃⲆⲆⵠⲆΔ + 400,
        w: Xr.ⵠⲆⲆᐃⲆⲆⲆ - 1400,
        ΔⵠⲆ: mf.ΔⵠⲆ
      });
      $w.ΔᐃΔⵠⵠ.ⲆᐃᐃⲆⵠⲆⲆ = new hf(nf.ᐃⲆⲆΔⵠΔᐃ, this.sample.ⲆᐃΔᐃᐃⵠⵠ, this.sample.ⲆᐃⲆⵠⵠⵠΔ, nf.ⵠΔΔᐃⵠᐃΔᐃᐃ, 0.01, 0.22, sf.ⲆⵠᐃⵠᐃΔⲆ.ⵠⵠᐃΔᐃ, nf.ⵠᐃΔⲆⵠΔᐃ, {
        x: -_j,
        y: -100,
        w: mf.w + 200,
        ΔⵠⲆ: Xr.ᐃᐃⲆⲆⵠⲆΔ - 1000
      }, {
        x: -Hl,
        y: -100,
        w: mf.w + 200,
        ΔⵠⲆ: Xr.ᐃᐃⲆⲆⵠⲆΔ + 600
      }, {
        x: -100,
        y: -100,
        w: mf.w + 200,
        ΔⵠⲆ: Xr.ᐃᐃⲆⲆⵠⲆΔ + 100
      });
      for (var a = Pg; a < nf.ᐃᐃⲆⲆⲆ; a++) {
        $w.ⵠΔΔⲆ[a] = new bf(a);
      }
      $w.ⵠΔΔⲆ[0].ᐃΔΔΔᐃ(Xw.ᐃⲆᐃᐃ);
      $w.loaded = 1;
    };
    this.ΔⵠᐃᐃΔⵠᐃⵠⵠ = function () {
      if (!this.transition && nf.ⲆⵠⵠΔⲆΔᐃ > mf.ΔᐃᐃΔⲆ.now) {
        this.transition = ie;
      }
    };
    this.ᐃⵠⲆΔⲆ = function () {
      if (this.ⲆᐃⵠⲆⵠ && this.loaded) {
        for (var a in $w.sample) {
          var b = $w.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              $w.ⲆᐃΔⲆ[a].stop(b[c]);
            }
          } else {
            $w.ⲆᐃΔⲆ[a].stop(b);
          }
        }
        for (c = ya; $w.ⵠΔΔⲆ.length > c; c++) {
          $w.ⵠΔΔⲆ[c].ᐃΔΔⲆⲆΔⲆ();
        }
      }
    };
    this.select = function () {
      if ($w.ⲆᐃⵠⲆⵠ) {
        $w.ᐃⵠⲆΔⲆ();
      } else {
        if (!$w.loaded) {
          $w.ᐃΔΔΔᐃ();
        }
        $w.ⵠΔΔⲆ[0].ᐃⲆᐃᐃ = Xw.ᐃⲆᐃᐃ;
        $w.ⵠΔΔⲆ[0].ᐃᐃΔᐃⵠΔᐃ = 0;
        $w.ΔⵠᐃᐃΔⵠᐃⵠⵠ();
      }
      $w.ⲆᐃⵠⲆⵠ = !$w.ⲆᐃⵠⲆⵠ;
    };
  }();
  var zf = new function () {
    this.ⲆΔⵠⲆΔᐃᐃ = function () {
      this.ᐃᐃⲆᐃΔ = 81;
      this.ⲆΔΔⵠΔ = 68;
      this.ⵠᐃⵠⵠⲆ = 90;
      this.ΔⵠⲆⵠΔⲆΔ = 83;
    };
    this.ⵠᐃⲆᐃᐃΔΔ = function () {
      this.ᐃᐃⲆᐃΔ = 65;
      this.ⲆΔΔⵠΔ = 68;
      this.ⵠᐃⵠⵠⲆ = 87;
      this.ΔᐃᐃⲆΔ = 83;
    };
    this.ⵠᐃⵠⲆΔ = wj;
    this.ΔⵠⲆⵠΔⲆΔ = ie;
    this.ⵠΔΔⵠᐃⵠⲆ = 49;
    this.ᐃᐃⲆⲆᐃⲆⵠ = 50;
    this.ⵠⲆᐃᐃᐃⲆᐃ = 51;
    this.Ⲇⵠⵠᐃⵠᐃⵠ = 52;
    this.ΔⲆᐃⵠⲆⲆᐃᐃΔ = 53;
    this.ΔᐃⲆΔᐃⲆᐃ = Ri;
    this.ⵠᐃⵠᐃΔᐃΔ = 37;
    this.ⲆⲆᐃᐃⵠⲆΔ = 39;
    this.ⵠΔⲆΔΔⵠⲆ = 38;
    this.ᐃᐃⲆⵠΔⵠᐃ = 40;
    this.ⲆⵠⲆⲆᐃᐃΔ = 32;
    this.ⲆⵠⲆⵠⵠⵠⲆ = 82;
    this.ⵠⲆΔΔΔᐃᐃ = 71;
    this.ΔᐃᐃⲆⲆⲆᐃ = 86;
    this.ⲆΔΔⵠᐃᐃΔ = 66;
    this.ⵠᐃⲆᐃᐃΔΔ();
    this.keys = new Array(Nk);
    for (var a = 0; a < Fe; a++) {
      this.keys[a] = this.ⵠᐃⵠⲆΔ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ⵠᐃⵠⲆΔ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, Hn);
      if (b == this.ᐃᐃⲆᐃΔ || this.ⵠᐃⵠᐃΔᐃΔ == b) {
        this.ᐃᐃᐃᐃⲆΔᐃ();
      } else if (this.ⵠᐃⵠⵠⲆ == b || b == this.ⵠΔⲆΔΔⵠⲆ) {
        this.ⲆᐃⵠⲆⵠⵠⲆ();
      } else if (this.ΔⵠⲆⵠΔⲆΔ == b || this.ᐃⲆΔΔⲆΔⲆΔⲆ == b) {
        this.ΔΔΔᐃΔΔᐃ();
      } else if (b == this.ⲆΔΔⵠΔ || this.ⲆⲆᐃᐃⵠⲆΔ == b) {
        this.ⵠⲆΔᐃΔⵠᐃ();
      }
      this.keys[b] = this.ΔⵠⲆⵠΔⲆΔ;
      return b;
    };
    this.ᐃᐃᐃᐃⲆΔᐃ = function () {
      this.keys[this.ⲆΔΔⵠΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⲆⲆᐃᐃⵠⲆΔ] = this.ⵠᐃⵠⲆΔ;
    };
    this.ⵠⲆΔᐃΔⵠᐃ = function () {
      this.keys[this.ᐃᐃⲆᐃΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⵠᐃⵠᐃΔᐃΔ] = this.ⵠᐃⵠⲆΔ;
    };
    this.ΔΔΔᐃΔΔᐃ = function () {
      this.keys[this.ⵠᐃⵠⵠⲆ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⵠΔⲆΔΔⵠⲆ] = this.ⵠᐃⵠⲆΔ;
    };
    this.ⲆᐃⵠⲆⵠⵠⲆ = function () {
      this.keys[this.ΔᐃᐃⲆΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ᐃᐃⲆⵠΔⵠᐃ] = this.ⵠᐃⵠⲆΔ;
    };
    this.ᐃΔᐃΔⵠΔᐃ = function () {
      this.keys[this.ⲆΔΔⵠΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⲆⲆᐃᐃⵠⲆΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ᐃᐃⲆᐃΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⵠᐃⵠᐃΔᐃΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⵠᐃⵠⵠⲆ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ⵠΔⲆΔΔⵠⲆ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ΔᐃᐃⲆΔ] = this.ⵠᐃⵠⲆΔ;
      this.keys[this.ᐃᐃⲆⵠΔⵠᐃ] = this.ⵠᐃⵠⲆΔ;
    };
    this.ⵠᐃⵠⲆⲆⵠᐃ = function () {
      return this.keys[this.ᐃᐃⲆᐃΔ] || this.keys[this.ⵠᐃⵠᐃΔᐃΔ];
    };
    this.ᐃΔⲆᐃᐃⲆΔ = function () {
      return this.keys[this.ⲆΔΔⵠΔ] || this.keys[this.ⲆⲆᐃᐃⵠⲆΔ];
    };
    this.ⲆᐃΔΔⲆΔⵠ = function () {
      return this.keys[this.ⵠᐃⵠⵠⲆ] || this.keys[this.ⵠΔⲆΔΔⵠⲆ];
    };
    this.ΔΔΔⵠΔⲆⲆ = function () {
      return this.keys[this.ΔᐃᐃⲆΔ] || this.keys[this.ᐃᐃⲆⵠΔⵠᐃ];
    };
    this.ᐃᐃΔΔⵠⵠΔⲆᐃ = function () {
      return this.keys[this.ΔᐃⲆΔᐃⲆᐃ];
    };
    this.ΔⵠⲆⲆⲆⲆⵠⲆⵠ = function () {
      return this.keys[this.ⵠΔΔⵠᐃⵠⲆ];
    };
    this.ΔᐃⲆΔⲆⲆΔᐃΔ = function () {
      return this.keys[this.ᐃᐃⲆⲆᐃⲆⵠ];
    };
    this.ⲆⵠⵠᐃⲆᐃΔΔᐃ = function () {
      return this.keys[this.ⵠⲆᐃᐃᐃⲆᐃ];
    };
    this.ΔᐃⵠΔᐃΔⵠᐃⲆ = function () {
      return this.keys[this.Ⲇⵠⵠᐃⵠᐃⵠ];
    };
    this.ⵠⵠΔᐃᐃΔΔⲆᐃ = function () {
      return this.keys[this.ⲆⵠⲆⲆᐃᐃΔ];
    };
    this.ⲆⵠΔΔⲆΔΔⵠΔ = function () {
      return this.keys[this.ⲆⵠⲆⵠⵠⵠⲆ];
    };
    this.ⵠⵠᐃⵠΔⵠᐃⵠΔ = function () {
      return this.keys[this.ⵠⲆΔΔΔᐃᐃ];
    };
    this.ᐃᐃᐃᐃⵠⵠΔⲆᐃ = function () {
      return this.keys[this.ΔᐃᐃⲆⲆⲆᐃ];
    };
    this.ᐃΔΔⲆᐃΔᐃⵠᐃ = function () {
      return this.keys[this.ⲆΔΔⵠᐃᐃΔ];
    };
  }();
  var yf = new function () {
    this.ΔⵠⲆⵠΔⲆΔ = wj;
    this.ⵠᐃⵠⲆΔ = 1;
    this.IDLE = 2;
    this.ᐃΔⲆⲆᐃᐃΔ = wj;
    this.ΔΔᐃⲆⵠᐃᐃⵠΔ = mk;
    this.ⲆⲆΔⲆ = {
      x: 0,
      y: In
    };
    this.ΔⲆΔⵠⵠⲆⵠ = 0;
    this.ⲆⵠᐃΔᐃᐃⲆ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ΔΔⵠΔ = this.ᐃΔⲆⲆᐃᐃΔ;
    this.down = function () {
      this.state = this.ΔⵠⲆⵠΔⲆΔ;
    };
    this.up = function () {
      this.state = this.ⵠᐃⵠⲆΔ;
    };
    this.ᐃⲆΔ = function () {
      return (this.ⲆⲆΔⲆ.x != this.ΔⲆΔⵠⵠⲆⵠ || this.ⲆⲆΔⲆ.y != this.ⲆⵠᐃΔᐃᐃⲆ) && (this.ΔⲆΔⵠⵠⲆⵠ = this.ⲆⲆΔⲆ.x, this.ⲆⵠᐃΔᐃᐃⲆ = this.ⲆⲆΔⲆ.y, true);
    };
  }();
  var wf = tt;
  var _w = 0;
  var ax = new function (f, e, i) {
    this.ⲆΔ = f;
    this.ᐃ = e;
    this.ΔⵠΔⲆⵠΔⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      style: document.getElementById("loading").style,
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ΔⵠΔⲆⵠΔⵠ.style.position = "absolute";
    this.ΔⵠΔⲆⵠΔⵠ.style.display = "inline-block";
    this.ΔⵠΔⲆⵠΔⵠ.ᐃⲆΔ();
    this.ΔⵠᐃΔΔ = ph;
    this.stop = function () {
      this.ΔⵠᐃΔΔ = Ll;
    };
    this.ᐃⵠⲆⲆⵠⲆⵠ = {
      total: 1
    };
    var j = this;
    function k() {}
    var m = Zj;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return lb;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -hd || a.indexOf("day-book") !== -1 || -jh !== a.indexOf("night-book") || -cu !== a.indexOf("day-player") || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || -Oq !== a.indexOf("night-accessory") || a.indexOf("day-crate") !== -1 || -Ol !== a.indexOf("night-crate") || a.indexOf("day-skin") !== -1 || -mk !== a.indexOf("night-skin") || a.indexOf("day-river") !== -1 || -hs !== a.indexOf("night-river") || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || -Oq !== a.indexOf("day-rock") || -xt !== a.indexOf("night-rock") || -za !== a.indexOf("day-flower") || -Ug !== a.indexOf("night-flower") || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -ie || a.indexOf("night-herb") !== -1 || -za !== a.indexOf("day-shell") || a.indexOf("night-shell") !== -1 || -js !== a.indexOf("day-hand-skin") || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || -mk !== a.indexOf("bigday") || -za !== a.indexOf("bigzday") || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -xt || -mk !== a.indexOf("tuto-") || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || -yg !== a.indexOf("day-lava-") || -Ol !== a.indexOf("night-lava-") || -cu !== a.indexOf("-click.png") || a.indexOf("-in.png") !== -Te || a.indexOf("-fog") !== -qu || a.indexOf("-lava") !== -1 || -fl !== a.indexOf("pebblecompo") || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ᐃⵠⲆᐃⲆ = function () {
      j.ᐃⲆΔ();
      if (++m == 40) {
        j.stop();
        k();
        return;
      }
      dj.setTimeout(j.ᐃⵠⲆᐃⲆ, 33);
    };
    this.ᐃⵠⲆΔⲆ = function (a) {
      k = a;
      j.ᐃⵠⲆᐃⲆ();
    };
    new Date().getTime();
    Object.keys(Ⲇⵠ).length;
    console.log(undefined, undefined);
    for (var o in Ⲇⵠ) {
      if (n(Ⲇⵠ[o]) === ps) {
        0;
      }
    }
    console.log(undefined, undefined);
    function p() {
      if (this.ⵠⲆⲆᐃⲆᐃⵠ !== 0) {
        return this.ⵠⲆⲆᐃⲆᐃⵠ;
      } else {
        this.ⵠⲆⲆᐃⲆᐃⵠ = 2;
        this.src = this.ΔⵠⲆⲆⵠ;
        return 0;
      }
    }
    function l(a) {
      this.ⵠⲆⲆᐃⲆᐃⵠ = xt;
    }
    var g = In;
    function q() {
      console.log(mg);
      if (hs !== g) {
        g = fl;
        console.log(undefined);
        if (dt !== Kt) {
          dt();
        }
        Kt();
        var a = ᐃⵠΔⲆ.ΔⲆⵠᐃᐃΔΔ("server");
        if (a !== null) {
          Ⲇⵠᐃⵠ.ⵠᐃᐃⵠΔⲆᐃ = yg;
          Ⲇⵠᐃⵠ.ⲆΔⲆΔⵠ = [{
            nu: Db,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: "Private Server " + a,
            ssl: mk
          }];
        }
        Ⲇⵠᐃⵠ.ᐃⲆᐃⵠⲆⲆⵠΔⲆ();
        setTimeout(i, x);
      }
    }
    function b() {
      let a = function () {
        Ⲇⵠᐃⵠ.ⲆⲆⵠⲆᐃΔⲆ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, Jh);
        } else {
          setTimeout(b, gh);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function s() {
      this.ΔⵠᐃᐃⵠⲆⵠ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ΔⵠᐃᐃⵠⲆⵠ}`, this);
      if (this.ΔⵠᐃᐃⵠⲆⵠ > Tr) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ΔⵠᐃᐃⵠⲆⵠ;
      var b = this.src;
      var c = n(b) === tg ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ᐃⵠΔᐃⲆᐃᐃ) {
          if (b.indexOf(ᐃⵠΔᐃⲆᐃᐃ[c]) !== -1) {
            Ⲇⵠ[c] = new Image();
            Ⲇⵠ[c].onload = l;
            Ⲇⵠ[c].onerror = s;
            Ⲇⵠ[c].ΔⵠᐃᐃⵠⲆⵠ = a;
            Ⲇⵠ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function d(a) {
      for (var b in Ⲇⵠ) {
        var c = Ⲇⵠ[b];
        if (typeof c === "string" && n(c) === a) {
          Ⲇⵠ[b] = new Image();
          Ⲇⵠ[b].ⵠⲆⲆᐃⲆᐃⵠ = 0;
          Ⲇⵠ[b].ΔⵠᐃᐃⵠⲆⵠ = 0;
          Ⲇⵠ[b].onload = l;
          Ⲇⵠ[b].onerror = s;
          Ⲇⵠ[b].ⲆⲆⲆⵠᐃᐃⲆ = p;
          Ⲇⵠ[b].ΔⵠⲆⲆⵠ = c;
        }
      }
    }
    d(1);
    d(0);
    od(xt, "l", 20, "#000");
    b();
    am();
    this.ᐃⲆΔ = function () {
      this.ΔⵠΔⲆⵠΔⵠ.translate.x = (lo - 500) / 2;
      this.ΔⵠΔⲆⵠΔⵠ.translate.y = (jq - 150) / Zh;
      var a = 2500 / (40 - m + za) - 48;
      this.ΔⵠΔⲆⵠΔⵠ.translate.y -= a;
      this.ΔⵠΔⲆⵠΔⵠ.ᐃⲆΔ();
    };
    this.ΔⵠΔⲆⵠΔⵠ.ᐃⲆΔ();
    this.ᐃⵠᐃⵠ = function () {
      try {
        wd();
      } catch (a) {}
      this.ᐃⲆΔ();
    };
  }(ao, ho, function () {
    Dd();
    Zw = new Lw(ao, ho);
    (vf = new Kw(ao, ho)).ᐃᐃⲆⲆᐃⲆⲆΔⲆ();
    Yw = new Sw(ao, ho);
    mf = new sw();
    Xw = new Cw();
    ax.ᐃⵠⲆΔⲆ(function () {
      ax.ΔⵠΔⲆⵠΔⵠ.style.display = "none";
      vf.ⲆᐃⵠⲆⵠ();
    });
  });
  function kf(b, c, d, e, f) {
    const g = ~(b & 50523) & 50523 | ~(b & 50523) & b;
    const i = c ^ 52430;
    const a = ((d + 36606) * 22695477 + 1) % 4294967296;
    const j = (e | 12735) & ~(e & 12735);
    const h = f ^ 19534;
    return (2147483587 + (25023 + (oo(g, i, a, j) ^ no(h, g, i, a, j, h))) * 2147483629) % 2147483647;
  }
  function xf() {
    try {
      dj.Widget.adsRefresh();
    } catch (a) {}
  }
  dj.onbeforeunload = function () {
    if (Zw.ΔⵠᐃΔΔ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  ma();
  (function b(a) {
    dj.requestAnimationFrame(b);
    _w = (a - wf) / 1000;
    wf = a;
    _w = _w > 1 ? 1 : _w;
    if (Zw.ΔⵠᐃΔΔ) {
      Zw.ᐃⵠᐃⵠ();
    } else {
      ho.clearRect(Bg, Bg, lo, jq);
      if (ax.ΔⵠᐃΔΔ) {
        ax.ᐃⵠᐃⵠ();
      } else if (vf.ΔⵠᐃΔΔ) {
        vf.ᐃⵠᐃⵠ();
      } else if (Yw.ΔⵠᐃΔΔ) {
        Yw.ᐃⵠᐃⵠ();
      }
    }
  })(0);
  var Jf = wj;
  function bx() {
    Bf.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
    Bf.send();
  }
  var Bf = new XMLHttpRequest();
  Bf.onreadystatechange = function () {
    if (this.readyState === ul) {
      this.status;
    }
  };
  var Df = "https://token.starve.io/";
  var If = "https://token2.starve.io/";
  var Ef = Lr;
  var Sf = 1;
  var Qf = mg;
  var cx = undefined;
  var dx = Lj;
  var ex = 0;
  dj.ᐃΔⲆΔᐃᐃⵠ = function () {
    ex = 1;
  };
  var fx = {
    ⵠᐃΔᐃΔᐃᐃΔⵠ: "ACCESS_TOKEN"
  };
  var jf = document.createElement("script");
  jf.type = "text/javascript";
  jf.async = true;
  jf.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  jf.addEventListener("load", function (a) {
    dj.XPayStationWidget.init(fx);
    dj.XPayStationWidget.on("status-done", ix);
  }, Bh);
  document.getElementsByTagName("head")[Bg].appendChild(jf);
  dj.fbAsyncInit = function () {
    Xf();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[Zj];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var Lf = undefined;
  var gx = undefined;
  function hx() {
    dj.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (Lf = a).isSignedIn.listen(Nf);
      Lf.currentUser.listen(qf);
      if (Lf.isSignedIn.get()) {
        Lf.signIn();
      }
      Hf();
    });
  }
  function Nf(a) {}
  function qf(a) {
    Xf();
    if (cx === j && gx !== undefined) {
      cx = gx.getAuthResponse().id_token;
      console.log(mg, undefined);
      if (cx !== undefined) {
        Qf = Ef;
        dj.ᐃΔⲆΔᐃᐃⵠ(dx);
      }
    }
    if (a !== undefined && a.isSignedIn() === true) {
      gx = a;
      dj.ᐃΔⲆΔᐃᐃⵠ(a.id);
    }
  }
  function Hf() {
    if (Lf) {
      gx = Lf.currentUser.get();
    }
  }
  function Uf(a, b) {
    if (b > vf.ⲆᐃᐃΔⲆ) {
      vf.ⵠᐃⵠΔ(vf.ⵠⵠⵠΔΔ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Df + "buyKit?token=" + cx + "&userid=" + dx + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (Al == this.readyState && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          vf.ⲆᐃᐃΔⲆ -= b;
          vf.ⲆΔⲆΔᐃ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function Yf(a) {
    if (dx) {
      var b = new XMLHttpRequest();
      b.open("GET", Df + "xsolla?userid=" + dx + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == Pe && this.status == 200 && b.responseText !== "0") {
          fx.access_token = b.responseText;
          dj.XPayStationWidget.init(fx);
          dj.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function Kf(a, b, c, d) {
    a = a === undefined ? vf.ⲆⲆΔᐃⵠⵠⵠ : a;
    b = Sl === b ? vf.ᐃΔⵠᐃⲆⲆΔ : b;
    c = c === mb ? vf.ᐃᐃⵠᐃΔᐃⲆ : c;
    d = d === er ? vf.ΔΔᐃᐃΔᐃΔ : d;
    if (a !== vf.ⲆⲆΔᐃⵠⵠⵠ || b !== vf.ᐃΔⵠᐃⲆⲆΔ || c !== vf.ᐃᐃⵠᐃΔᐃⲆ || vf.ΔΔᐃᐃΔᐃΔ !== d) {
      vf.ⲆⲆΔᐃⵠⵠⵠ = a;
      vf.ᐃΔⵠᐃⲆⲆΔ = b;
      vf.ᐃᐃⵠᐃΔᐃⲆ = c;
      vf.ΔΔᐃᐃΔᐃΔ = d;
      if (vf.ᐃΔⲆⵠᐃΔⵠ === d) {
        d = "0";
      } else if (vf.ᐃΔⲆⵠΔⲆΔ === d) {
        d = "1";
      } else if (d === vf.ⵠⵠᐃᐃⵠⵠᐃ) {
        d = "2";
      } else if (vf.Δᐃⵠⵠⵠⵠᐃ === d) {
        d = "3";
      } else if (d === vf.ⵠΔΔΔⲆΔᐃ) {
        d = "4";
      } else if (d === vf.ᐃⵠⵠΔⲆⲆⵠ) {
        d = "5";
      }
      if (vf.ⵠⵠⲆᐃⵠΔⵠ === b) {
        b = "total";
      } else if (b === vf.ᐃⲆⵠⲆᐃⲆᐃ) {
        b = "normal";
      } else if (vf.ⲆⲆⵠᐃⲆᐃⲆ === b) {
        b = "zombie";
      } else if (b === vf.ⵠᐃⲆᐃⲆΔᐃ) {
        b = "vampire";
      } else if (b === vf.ΔᐃⵠⲆⲆΔᐃ) {
        b = "forest";
      }
      if (vf.ⵠΔΔⵠⵠᐃᐃ === a) {
        a = "all";
      }
      if (a === vf.ᐃⲆⲆΔⵠᐃΔ) {
        a = "week";
      }
      if (a === vf.ⲆᐃΔⵠᐃᐃⵠ) {
        a = "today";
      }
      if (c === vf.ⲆⵠΔΔΔΔⵠ) {
        c = "kill";
      } else if (c === vf.ⵠⵠⲆⲆⵠᐃΔ) {
        c = "score";
      } else if (vf.ΔⲆΔⲆⲆⲆⲆ === c) {
        c = "time";
      }
      var f = new XMLHttpRequest();
      f.open("GET", Df + "leaderboard?range=" + a + "&mode=" + b + "&sort=" + c + "&season=" + d);
      f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      f.onreadystatechange = function () {
        if (this.readyState == Dt && this.status == 200 && f.responseText !== "0") {
          for (var a = JSON.parse(f.responseText), b = "", c = 0; a.length > c; c++) {
            ᐃⵠⵠⵠⵠ = a[c];
            var d = ᐃⵠⵠⵠⵠ[1];
            try {
              if (-cu === d.indexOf("Starver#")) {
                d = dj.decodeURIComponent(dj.escape(dj.atob(d)));
              }
            } catch (a) {}
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + yg + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += vf.ΔΔⵠΔᐃⵠⵠ(ᐃⵠⵠⵠⵠ[6]) + yg + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ᐃⵠⵠⵠⵠ[Eg] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ᐃⵠⵠⵠⵠ[Ps] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ᐃⵠⵠⵠⵠ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      f.send();
    }
  }
  function Vf(a, b) {
    if (vf.ΔⲆⵠΔⵠ <= Lr) {
      if (b > vf.ⲆᐃᐃΔⲆ) {
        vf.ⵠᐃⵠΔ(vf.ⵠⵠⵠΔΔ);
      } else {
        vf.ΔⲆⵠΔⵠ = dg;
        vf.ΔᐃᐃᐃᐃⲆⵠ = wj;
        vf.ⵠΔΔⵠᐃᐃΔ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Df + "buySpin?token=" + cx + "&userid=" + dx + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              vf.ⵠᐃⲆΔᐃⲆⲆⲆⲆ(Math.PI * a.rand * 2, a.type, a.id);
              vf.ⲆᐃᐃΔⲆ -= b;
            } else {
              vf.ΔⲆⵠΔⵠ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function Zf() {
    if (vf.ⲆᐃᐃΔⲆ >= 300 || vf.ⲆΔΔⵠᐃⲆⲆ <= Kh) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Df + "changeNickname?token=" + cx + "&userid=" + dx + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (ba == this.readyState && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              vf.ⲆᐃᐃΔⲆ -= a;
            }
            vf.ⲆΔΔⵠᐃⲆⲆ = 1;
            vf.ⵠᐃⵠΔ(vf.ᐃⵠⵠᐃⲆ);
          }
        };
        b.send();
      }
    }
  }
  function Xf() {
    if (dj.FB) {
      dj.FB.init({
        version: "v15.0",
        appId: "642017356260407",
        cookie: true,
        xfbml: true
      });
    }
    if (dx === undefined) {
      (function () {
        try {
          if (dj.FB && dj.FB.getUserID()) {
            dx = dj.FB.getUserID();
            if (cx === undefined) {
              dj.FB.getLoginStatus(function () {
                Qf = Sf;
                cx = dj.FB.getAuthResponse().accessToken;
                dj.ᐃΔⲆΔᐃᐃⵠ(dx);
              });
            }
          }
        } catch (a) {}
        try {
          dx = gx.getBasicProfile().getId();
        } catch (a) {}
      })();
    }
  }
  function $f(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Df + "setRegion?token=" + cx + "&userid=" + dx + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          vf.ⵠᐃⵠΔ(vf.ΔᐃΔΔⵠ);
        } else {
          vf.ⵠᐃⵠΔ(vf.ⵠΔⵠⵠΔ);
        }
      }
    };
    b.send();
  }
  function ix() {
    var a = new XMLHttpRequest();
    a.open("GET", Df + "claimBread?userid=" + dx);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (Gi == this.readyState && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          vf.ⲆᐃᐃΔⲆ = b;
        }
      }
    };
    a.send();
  }
  dj.onload = function () {
    dj.gapi.load("auth2", hx);
  };
})();
